{"buggy_code": ["package api\n\n// Visibility is the type of a visibility.\ntype Visibility string\n\nconst (\n\t// Public is the PUBLIC visibility.\n\tPublic Visibility = \"PUBLIC\"\n\t// Protected is the PROTECTED visibility.\n\tProtected Visibility = \"PROTECTED\"\n\t// Private is the PRIVATE visibility.\n\tPrivate Visibility = \"PRIVATE\"\n)\n\nfunc (e Visibility) String() string {\n\tswitch e {\n\tcase Public:\n\t\treturn \"PUBLIC\"\n\tcase Protected:\n\t\treturn \"PROTECTED\"\n\tcase Private:\n\t\treturn \"PRIVATE\"\n\t}\n\treturn \"PRIVATE\"\n}\n\ntype Memo struct {\n\tID int `json:\"id\"`\n\n\t// Standard fields\n\tRowStatus RowStatus `json:\"rowStatus\"`\n\tCreatorID int       `json:\"creatorId\"`\n\tCreatedTs int64     `json:\"createdTs\"`\n\tUpdatedTs int64     `json:\"updatedTs\"`\n\n\t// Domain specific fields\n\tContent    string     `json:\"content\"`\n\tVisibility Visibility `json:\"visibility\"`\n\tPinned     bool       `json:\"pinned\"`\n\tDisplayTs  int64      `json:\"displayTs\"`\n\n\t// Related fields\n\tCreator      *User       `json:\"creator\"`\n\tResourceList []*Resource `json:\"resourceList\"`\n}\n\ntype MemoCreate struct {\n\t// Standard fields\n\tCreatorID int\n\n\t// Domain specific fields\n\tVisibility Visibility `json:\"visibility\"`\n\tContent    string     `json:\"content\"`\n\n\t// Related fields\n\tResourceIDList []int `json:\"resourceIdList\"`\n}\n\ntype MemoPatch struct {\n\tID int\n\n\t// Standard fields\n\tCreatedTs *int64 `json:\"createdTs\"`\n\tUpdatedTs *int64\n\tRowStatus *RowStatus `json:\"rowStatus\"`\n\n\t// Domain specific fields\n\tContent    *string     `json:\"content\"`\n\tVisibility *Visibility `json:\"visibility\"`\n\n\t// Related fields\n\tResourceIDList []int `json:\"resourceIdList\"`\n}\n\ntype MemoFind struct {\n\tID *int `json:\"id\"`\n\n\t// Standard fields\n\tRowStatus *RowStatus `json:\"rowStatus\"`\n\tCreatorID *int       `json:\"creatorId\"`\n\n\t// Domain specific fields\n\tPinned         *bool\n\tContentSearch  *string\n\tVisibilityList []Visibility\n\n\t// Pagination\n\tLimit  int\n\tOffset int\n}\n\ntype MemoDelete struct {\n\tID int\n}\n", "package api\n\ntype Resource struct {\n\tID int `json:\"id\"`\n\n\t// Standard fields\n\tCreatorID int   `json:\"creatorId\"`\n\tCreatedTs int64 `json:\"createdTs\"`\n\tUpdatedTs int64 `json:\"updatedTs\"`\n\n\t// Domain specific fields\n\tFilename string `json:\"filename\"`\n\tBlob     []byte `json:\"-\"`\n\tType     string `json:\"type\"`\n\tSize     int64  `json:\"size\"`\n\n\t// Related fields\n\tLinkedMemoAmount int `json:\"linkedMemoAmount\"`\n}\n\ntype ResourceCreate struct {\n\t// Standard fields\n\tCreatorID int\n\n\t// Domain specific fields\n\tFilename string `json:\"filename\"`\n\tBlob     []byte `json:\"blob\"`\n\tType     string `json:\"type\"`\n\tSize     int64  `json:\"size\"`\n}\n\ntype ResourceFind struct {\n\tID *int `json:\"id\"`\n\n\t// Standard fields\n\tCreatorID *int `json:\"creatorId\"`\n\n\t// Domain specific fields\n\tFilename *string `json:\"filename\"`\n\tMemoID   *int\n}\n\ntype ResourcePatch struct {\n\tID int\n\n\t// Standard fields\n\tUpdatedTs *int64\n\n\t// Domain specific fields\n\tFilename *string `json:\"filename\"`\n}\n\ntype ResourceDelete struct {\n\tID int\n}\n", "package api\n\ntype Shortcut struct {\n\tID int `json:\"id\"`\n\n\t// Standard fields\n\tRowStatus RowStatus `json:\"rowStatus\"`\n\tCreatorID int       `json:\"creatorId\"`\n\tCreatedTs int64     `json:\"createdTs\"`\n\tUpdatedTs int64     `json:\"updatedTs\"`\n\n\t// Domain specific fields\n\tTitle   string `json:\"title\"`\n\tPayload string `json:\"payload\"`\n}\n\ntype ShortcutCreate struct {\n\t// Standard fields\n\tCreatorID int\n\n\t// Domain specific fields\n\tTitle   string `json:\"title\"`\n\tPayload string `json:\"payload\"`\n}\n\ntype ShortcutPatch struct {\n\tID int\n\n\t// Standard fields\n\tUpdatedTs *int64\n\tRowStatus *RowStatus `json:\"rowStatus\"`\n\n\t// Domain specific fields\n\tTitle   *string `json:\"title\"`\n\tPayload *string `json:\"payload\"`\n}\n\ntype ShortcutFind struct {\n\tID *int\n\n\t// Standard fields\n\tCreatorID *int\n\n\t// Domain specific fields\n\tTitle *string `json:\"title\"`\n}\n\ntype ShortcutDelete struct {\n\tID *int\n\n\t// Standard fields\n\tCreatorID *int\n}\n", "package api\n\nimport (\n\t\"fmt\"\n)\n\n// Role is the type of a role.\ntype Role string\n\nconst (\n\t// Host is the HOST role.\n\tHost Role = \"HOST\"\n\t// Admin is the ADMIN role.\n\tAdmin Role = \"ADMIN\"\n\t// NormalUser is the USER role.\n\tNormalUser Role = \"USER\"\n)\n\nfunc (e Role) String() string {\n\tswitch e {\n\tcase Host:\n\t\treturn \"HOST\"\n\tcase Admin:\n\t\treturn \"ADMIN\"\n\tcase NormalUser:\n\t\treturn \"USER\"\n\t}\n\treturn \"USER\"\n}\n\ntype User struct {\n\tID int `json:\"id\"`\n\n\t// Standard fields\n\tRowStatus RowStatus `json:\"rowStatus\"`\n\tCreatedTs int64     `json:\"createdTs\"`\n\tUpdatedTs int64     `json:\"updatedTs\"`\n\n\t// Domain specific fields\n\tUsername        string         `json:\"username\"`\n\tRole            Role           `json:\"role\"`\n\tEmail           string         `json:\"email\"`\n\tNickname        string         `json:\"nickname\"`\n\tPasswordHash    string         `json:\"-\"`\n\tOpenID          string         `json:\"openId\"`\n\tUserSettingList []*UserSetting `json:\"userSettingList\"`\n}\n\ntype UserCreate struct {\n\t// Domain specific fields\n\tUsername     string `json:\"username\"`\n\tRole         Role   `json:\"role\"`\n\tEmail        string `json:\"email\"`\n\tNickname     string `json:\"nickname\"`\n\tPassword     string `json:\"password\"`\n\tPasswordHash string\n\tOpenID       string\n}\n\nfunc (create UserCreate) Validate() error {\n\tif len(create.Username) < 4 {\n\t\treturn fmt.Errorf(\"username is too short, minimum length is 4\")\n\t}\n\tif len(create.Password) < 4 {\n\t\treturn fmt.Errorf(\"password is too short, minimum length is 4\")\n\t}\n\n\treturn nil\n}\n\ntype UserPatch struct {\n\tID int\n\n\t// Standard fields\n\tUpdatedTs *int64\n\tRowStatus *RowStatus `json:\"rowStatus\"`\n\n\t// Domain specific fields\n\tUsername     *string `json:\"username\"`\n\tEmail        *string `json:\"email\"`\n\tNickname     *string `json:\"nickname\"`\n\tPassword     *string `json:\"password\"`\n\tResetOpenID  *bool   `json:\"resetOpenId\"`\n\tPasswordHash *string\n\tOpenID       *string\n}\n\ntype UserFind struct {\n\tID *int `json:\"id\"`\n\n\t// Standard fields\n\tRowStatus *RowStatus `json:\"rowStatus\"`\n\n\t// Domain specific fields\n\tUsername *string `json:\"username\"`\n\tRole     *Role\n\tEmail    *string `json:\"email\"`\n\tNickname *string `json:\"nickname\"`\n\tOpenID   *string\n}\n\ntype UserDelete struct {\n\tID int\n}\n"], "fixing_code": ["package api\n\n// Visibility is the type of a visibility.\ntype Visibility string\n\nconst (\n\t// Public is the PUBLIC visibility.\n\tPublic Visibility = \"PUBLIC\"\n\t// Protected is the PROTECTED visibility.\n\tProtected Visibility = \"PROTECTED\"\n\t// Private is the PRIVATE visibility.\n\tPrivate Visibility = \"PRIVATE\"\n)\n\nfunc (e Visibility) String() string {\n\tswitch e {\n\tcase Public:\n\t\treturn \"PUBLIC\"\n\tcase Protected:\n\t\treturn \"PROTECTED\"\n\tcase Private:\n\t\treturn \"PRIVATE\"\n\t}\n\treturn \"PRIVATE\"\n}\n\ntype Memo struct {\n\tID int `json:\"id\"`\n\n\t// Standard fields\n\tRowStatus RowStatus `json:\"rowStatus\"`\n\tCreatorID int       `json:\"creatorId\"`\n\tCreatedTs int64     `json:\"createdTs\"`\n\tUpdatedTs int64     `json:\"updatedTs\"`\n\n\t// Domain specific fields\n\tContent    string     `json:\"content\"`\n\tVisibility Visibility `json:\"visibility\"`\n\tPinned     bool       `json:\"pinned\"`\n\tDisplayTs  int64      `json:\"displayTs\"`\n\n\t// Related fields\n\tCreator      *User       `json:\"creator\"`\n\tResourceList []*Resource `json:\"resourceList\"`\n}\n\ntype MemoCreate struct {\n\t// Standard fields\n\tCreatorID int\n\n\t// Domain specific fields\n\tVisibility Visibility `json:\"visibility\"`\n\tContent    string     `json:\"content\"`\n\n\t// Related fields\n\tResourceIDList []int `json:\"resourceIdList\"`\n}\n\ntype MemoPatch struct {\n\tID int `json:\"-\"`\n\n\t// Standard fields\n\tCreatedTs *int64 `json:\"createdTs\"`\n\tUpdatedTs *int64\n\tRowStatus *RowStatus `json:\"rowStatus\"`\n\n\t// Domain specific fields\n\tContent    *string     `json:\"content\"`\n\tVisibility *Visibility `json:\"visibility\"`\n\n\t// Related fields\n\tResourceIDList []int `json:\"resourceIdList\"`\n}\n\ntype MemoFind struct {\n\tID *int `json:\"id\"`\n\n\t// Standard fields\n\tRowStatus *RowStatus `json:\"rowStatus\"`\n\tCreatorID *int       `json:\"creatorId\"`\n\n\t// Domain specific fields\n\tPinned         *bool\n\tContentSearch  *string\n\tVisibilityList []Visibility\n\n\t// Pagination\n\tLimit  int\n\tOffset int\n}\n\ntype MemoDelete struct {\n\tID int\n}\n", "package api\n\ntype Resource struct {\n\tID int `json:\"id\"`\n\n\t// Standard fields\n\tCreatorID int   `json:\"creatorId\"`\n\tCreatedTs int64 `json:\"createdTs\"`\n\tUpdatedTs int64 `json:\"updatedTs\"`\n\n\t// Domain specific fields\n\tFilename string `json:\"filename\"`\n\tBlob     []byte `json:\"-\"`\n\tType     string `json:\"type\"`\n\tSize     int64  `json:\"size\"`\n\n\t// Related fields\n\tLinkedMemoAmount int `json:\"linkedMemoAmount\"`\n}\n\ntype ResourceCreate struct {\n\t// Standard fields\n\tCreatorID int\n\n\t// Domain specific fields\n\tFilename string `json:\"filename\"`\n\tBlob     []byte `json:\"blob\"`\n\tType     string `json:\"type\"`\n\tSize     int64  `json:\"size\"`\n}\n\ntype ResourceFind struct {\n\tID *int `json:\"id\"`\n\n\t// Standard fields\n\tCreatorID *int `json:\"creatorId\"`\n\n\t// Domain specific fields\n\tFilename *string `json:\"filename\"`\n\tMemoID   *int\n}\n\ntype ResourcePatch struct {\n\tID int `json:\"-\"`\n\n\t// Standard fields\n\tUpdatedTs *int64\n\n\t// Domain specific fields\n\tFilename *string `json:\"filename\"`\n}\n\ntype ResourceDelete struct {\n\tID int\n}\n", "package api\n\ntype Shortcut struct {\n\tID int `json:\"id\"`\n\n\t// Standard fields\n\tRowStatus RowStatus `json:\"rowStatus\"`\n\tCreatorID int       `json:\"creatorId\"`\n\tCreatedTs int64     `json:\"createdTs\"`\n\tUpdatedTs int64     `json:\"updatedTs\"`\n\n\t// Domain specific fields\n\tTitle   string `json:\"title\"`\n\tPayload string `json:\"payload\"`\n}\n\ntype ShortcutCreate struct {\n\t// Standard fields\n\tCreatorID int\n\n\t// Domain specific fields\n\tTitle   string `json:\"title\"`\n\tPayload string `json:\"payload\"`\n}\n\ntype ShortcutPatch struct {\n\tID int `json:\"-\"`\n\n\t// Standard fields\n\tUpdatedTs *int64\n\tRowStatus *RowStatus `json:\"rowStatus\"`\n\n\t// Domain specific fields\n\tTitle   *string `json:\"title\"`\n\tPayload *string `json:\"payload\"`\n}\n\ntype ShortcutFind struct {\n\tID *int\n\n\t// Standard fields\n\tCreatorID *int\n\n\t// Domain specific fields\n\tTitle *string `json:\"title\"`\n}\n\ntype ShortcutDelete struct {\n\tID *int\n\n\t// Standard fields\n\tCreatorID *int\n}\n", "package api\n\nimport (\n\t\"fmt\"\n)\n\n// Role is the type of a role.\ntype Role string\n\nconst (\n\t// Host is the HOST role.\n\tHost Role = \"HOST\"\n\t// Admin is the ADMIN role.\n\tAdmin Role = \"ADMIN\"\n\t// NormalUser is the USER role.\n\tNormalUser Role = \"USER\"\n)\n\nfunc (e Role) String() string {\n\tswitch e {\n\tcase Host:\n\t\treturn \"HOST\"\n\tcase Admin:\n\t\treturn \"ADMIN\"\n\tcase NormalUser:\n\t\treturn \"USER\"\n\t}\n\treturn \"USER\"\n}\n\ntype User struct {\n\tID int `json:\"id\"`\n\n\t// Standard fields\n\tRowStatus RowStatus `json:\"rowStatus\"`\n\tCreatedTs int64     `json:\"createdTs\"`\n\tUpdatedTs int64     `json:\"updatedTs\"`\n\n\t// Domain specific fields\n\tUsername        string         `json:\"username\"`\n\tRole            Role           `json:\"role\"`\n\tEmail           string         `json:\"email\"`\n\tNickname        string         `json:\"nickname\"`\n\tPasswordHash    string         `json:\"-\"`\n\tOpenID          string         `json:\"openId\"`\n\tUserSettingList []*UserSetting `json:\"userSettingList\"`\n}\n\ntype UserCreate struct {\n\t// Domain specific fields\n\tUsername     string `json:\"username\"`\n\tRole         Role   `json:\"role\"`\n\tEmail        string `json:\"email\"`\n\tNickname     string `json:\"nickname\"`\n\tPassword     string `json:\"password\"`\n\tPasswordHash string\n\tOpenID       string\n}\n\nfunc (create UserCreate) Validate() error {\n\tif len(create.Username) < 4 {\n\t\treturn fmt.Errorf(\"username is too short, minimum length is 4\")\n\t}\n\tif len(create.Password) < 4 {\n\t\treturn fmt.Errorf(\"password is too short, minimum length is 4\")\n\t}\n\n\treturn nil\n}\n\ntype UserPatch struct {\n\tID int `json:\"-\"`\n\n\t// Standard fields\n\tUpdatedTs *int64\n\tRowStatus *RowStatus `json:\"rowStatus\"`\n\n\t// Domain specific fields\n\tUsername     *string `json:\"username\"`\n\tEmail        *string `json:\"email\"`\n\tNickname     *string `json:\"nickname\"`\n\tPassword     *string `json:\"password\"`\n\tResetOpenID  *bool   `json:\"resetOpenId\"`\n\tPasswordHash *string\n\tOpenID       *string\n}\n\ntype UserFind struct {\n\tID *int `json:\"id\"`\n\n\t// Standard fields\n\tRowStatus *RowStatus `json:\"rowStatus\"`\n\n\t// Domain specific fields\n\tUsername *string `json:\"username\"`\n\tRole     *Role\n\tEmail    *string `json:\"email\"`\n\tNickname *string `json:\"nickname\"`\n\tOpenID   *string\n}\n\ntype UserDelete struct {\n\tID int\n}\n"], "filenames": ["api/memo.go", "api/resource.go", "api/shortcut.go", "api/user.go"], "buggy_code_start_loc": [60, 44, 27, 72], "buggy_code_end_loc": [61, 45, 28, 73], "fixing_code_start_loc": [60, 44, 27, 72], "fixing_code_end_loc": [61, 45, 28, 73], "type": "CWE-269", "message": "Incorrect Use of Privileged APIs in GitHub repository usememos/memos prior to 0.9.0.", "other": {"cve": {"id": "CVE-2022-4687", "sourceIdentifier": "security@huntr.dev", "published": "2022-12-23T12:15:11.447", "lastModified": "2022-12-30T22:18:50.207", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Incorrect Use of Privileged APIs in GitHub repository usememos/memos prior to 0.9.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-648"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:usememos:memos:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.9.0", "matchCriteriaId": "9E9BB4B3-BBB1-406D-96EE-69114B828CF0"}]}]}], "references": [{"url": "https://github.com/usememos/memos/commit/dca35bde877aab6e64ef51b52e590b5d48f692f9", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/b908377f-a61b-432c-8e6a-c7498da69788", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/usememos/memos/commit/dca35bde877aab6e64ef51b52e590b5d48f692f9"}}