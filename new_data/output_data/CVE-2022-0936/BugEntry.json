{"buggy_code": ["##\n# Attachments can be either assessment or course-specific.\n# This controller handles both types, setting @is_assessment to distinguish the two\n#\nclass AttachmentsController < ApplicationController\n  # inherited from ApplicationController\n  # this will also set an @is_assessment variable based on the result of is_assessment?\n  before_action :set_assessment, if: :assessment?\n  before_action :set_attachment, except: %i[index new create]\n  before_action :add_attachments_breadcrumb\n\n  rescue_from ActionView::MissingTemplate do |_exception|\n    redirect_to(\"/home/error_404\")\n  end\n\n  action_auth_level :index, :instructor\n  def index\n    @attachments = @is_assessment ? @assessment.attachments : @course.attachments\n  end\n\n  action_auth_level :new, :instructor\n  def new\n    @attachment = Attachment.new\n  end\n\n  action_auth_level :create, :instructor\n  def create\n    @attachment = if @is_assessment\n                    @course.attachments.new(assessment_id: @assessment.id)\n                  else\n                    @course.attachments.new\n                  end\n\n    update\n  end\n\n  action_auth_level :show, :student\n  def show\n    filename = Rails.root.join(\"attachments\", @attachment.filename)\n    unless File.exist?(filename)\n      COURSE_LOGGER.log(\"Cannot find the file '#{@attachment.filename}' for\"\\\n                        \" attachment #{@attachment.name}\")\n\n      flash[:error] = \"Error loading #{@attachment.name} from #{@attachment.filename}\"\n      redirect_to([@course, :attachments]) && return\n    end\n    send_file(filename, disposition: \"inline\",\n                        type: @attachment.mime_type, filename: @attachment.filename) && return\n  end\n\n  action_auth_level :edit, :instructor\n  def edit; end\n\n  action_auth_level :update, :instructor\n  def update\n    if @attachment.update(attachment_params)\n      # is successful\n      flash[:success] = \"Attachment updated\"\n      redirect_to_attachment_list && return\n    else\n      # not successful, go back to edit page\n      error_msg = \"Attachment update failed:\"\n      if !@attachment.valid?\n        @attachment.errors.full_messages.each do |msg|\n          error_msg += \"<br>#{msg}\"\n        end\n      else\n        error_msg += \"<br>Unknown error\"\n      end\n      flash[:error] = error_msg\n      COURSE_LOGGER.log(\"Failed to update attachment: #{error_msg}\")\n\n      if @is_assessment\n        redirect_to([:edit, @course, @assessment, @attachment]) && return\n      end\n\n      redirect_to([:edit, @course, @attachment]) && return\n    end\n  end\n\n  action_auth_level :destroy, :instructor\n  def destroy\n    @attachment.destroy\n    flash[:success] = \"Attachment deleted\"\n    redirect_to_attachment_list && return\n  end\n\nprivate\n\n  def assessment?\n    @is_assessment = params.key?(:assessment_name)\n  end\n\n  def set_attachment\n    @attachment = if @is_assessment\n                    @course.attachments.find_by(assessment_id: @assessment.id, id: params[:id])\n                  else\n                    @course.attachments.find(params[:id])\n                  end\n\n    return unless @attachment.nil?\n\n    COURSE_LOGGER.log(\"Cannot find attachment with id: #{params[:id]}\")\n    flash[:error] = \"Could not find Attachment \\# #{params[:id]}\"\n    redirect_to_attachment_list && return\n  end\n\n  def redirect_to_attachment_list\n    if @is_assessment\n      (redirect_to([@course, @assessment]) && return)\n    end\n\n    redirect_to([@course, :attachments]) && return\n  end\n\n  def add_attachments_breadcrumb\n    @breadcrumbs << if @is_assessment\n                      (view_context.link_to \"Assessment Attachments\",\n                                            [@course, @assessment, :attachments])\n                    else\n                      (view_context.link_to \"Course Attachments\", [@course, :attachments])\n                    end\n  end\n\n  def attachment_params\n    params.require(:attachment).permit(:name, :file, :released, :mime_type)\n  end\nend\n"], "fixing_code": ["##\n# Attachments can be either assessment or course-specific.\n# This controller handles both types, setting @is_assessment to distinguish the two\n#\nclass AttachmentsController < ApplicationController\n  # inherited from ApplicationController\n  # this will also set an @is_assessment variable based on the result of is_assessment?\n  before_action :set_assessment, if: :assessment?\n  before_action :set_attachment, except: %i[index new create]\n  before_action :add_attachments_breadcrumb\n\n  rescue_from ActionView::MissingTemplate do |_exception|\n    redirect_to(\"/home/error_404\")\n  end\n\n  action_auth_level :index, :instructor\n  def index\n    @attachments = @is_assessment ? @assessment.attachments : @course.attachments\n  end\n\n  action_auth_level :new, :instructor\n  def new\n    @attachment = Attachment.new\n  end\n\n  action_auth_level :create, :instructor\n  def create\n    @attachment = if @is_assessment\n                    @course.attachments.new(assessment_id: @assessment.id)\n                  else\n                    @course.attachments.new\n                  end\n\n    update\n  end\n\n  action_auth_level :show, :student\n  def show\n    filename = Rails.root.join(\"attachments\", @attachment.filename)\n    unless File.exist?(filename)\n      COURSE_LOGGER.log(\"Cannot find the file '#{@attachment.filename}' for\"\\\n                        \" attachment #{@attachment.name}\")\n\n      flash[:error] = \"Error loading #{@attachment.name} from #{@attachment.filename}\"\n      redirect_to([@course, :attachments]) && return\n    end\n    # Set to application/octet-stream to force download\n    send_file(filename, disposition: \"inline\",\n                        type: \"application/octet-stream\", filename: @attachment.filename) && return\n  end\n\n  action_auth_level :edit, :instructor\n  def edit; end\n\n  action_auth_level :update, :instructor\n  def update\n    if @attachment.update(attachment_params)\n      # is successful\n      flash[:success] = \"Attachment updated\"\n      redirect_to_attachment_list && return\n    else\n      # not successful, go back to edit page\n      error_msg = \"Attachment update failed:\"\n      if !@attachment.valid?\n        @attachment.errors.full_messages.each do |msg|\n          error_msg += \"<br>#{msg}\"\n        end\n      else\n        error_msg += \"<br>Unknown error\"\n      end\n      flash[:error] = error_msg\n      COURSE_LOGGER.log(\"Failed to update attachment: #{error_msg}\")\n\n      if @is_assessment\n        redirect_to([:edit, @course, @assessment, @attachment]) && return\n      end\n\n      redirect_to([:edit, @course, @attachment]) && return\n    end\n  end\n\n  action_auth_level :destroy, :instructor\n  def destroy\n    @attachment.destroy\n    flash[:success] = \"Attachment deleted\"\n    redirect_to_attachment_list && return\n  end\n\nprivate\n\n  def assessment?\n    @is_assessment = params.key?(:assessment_name)\n  end\n\n  def set_attachment\n    @attachment = if @is_assessment\n                    @course.attachments.find_by(assessment_id: @assessment.id, id: params[:id])\n                  else\n                    @course.attachments.find(params[:id])\n                  end\n\n    return unless @attachment.nil?\n\n    COURSE_LOGGER.log(\"Cannot find attachment with id: #{params[:id]}\")\n    flash[:error] = \"Could not find Attachment \\# #{params[:id]}\"\n    redirect_to_attachment_list && return\n  end\n\n  def redirect_to_attachment_list\n    if @is_assessment\n      (redirect_to([@course, @assessment]) && return)\n    end\n\n    redirect_to([@course, :attachments]) && return\n  end\n\n  def add_attachments_breadcrumb\n    @breadcrumbs << if @is_assessment\n                      (view_context.link_to \"Assessment Attachments\",\n                                            [@course, @assessment, :attachments])\n                    else\n                      (view_context.link_to \"Course Attachments\", [@course, :attachments])\n                    end\n  end\n\n  def attachment_params\n    params.require(:attachment).permit(:name, :file, :released, :mime_type)\n  end\nend\n"], "filenames": ["app/controllers/attachments_controller.rb"], "buggy_code_start_loc": [46], "buggy_code_end_loc": [49], "fixing_code_start_loc": [47], "fixing_code_end_loc": [50], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository autolab/autolab prior to 2.8.0.", "other": {"cve": {"id": "CVE-2022-0936", "sourceIdentifier": "security@huntr.dev", "published": "2022-04-11T07:15:08.140", "lastModified": "2022-04-14T20:39:32.157", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository autolab/autolab prior to 2.8.0."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Almacenado en el repositorio de GitHub autolab/autolab versiones anteriores a 2.8.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:autolabproject:autolab:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.8.0", "matchCriteriaId": "9F9D8D60-EC00-45C9-B3AC-C52D1FB4CAFA"}]}]}], "references": [{"url": "https://github.com/autolab/autolab/commit/02d76ab3737689bba95ffe9a1c69ca5166d71c6b", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/90701766-bfed-409e-b3dd-6ff884373968", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/autolab/autolab/commit/02d76ab3737689bba95ffe9a1c69ca5166d71c6b"}}