{"buggy_code": ["import os\nimport time\nimport json\nfrom secrets import token_bytes, token_hex, randbits\nfrom hashlib import sha256\nimport asyncio\nimport aiosqlite as sql\nfrom responses import *\n\nclass Database:\n    def __init__(self, session):\n        loop = asyncio.get_event_loop()\n        # lock to prevent race conditions when SELECT then fetchone\n        self.lock = asyncio.Lock(loop=loop)\n        self.dbw = loop.run_until_complete(sql.connect(DATABASE_FILENAME))\n        self.dbw.row_factory = sql.Row\n        self.db = loop.run_until_complete(self.dbw.cursor())\n        with open(os.path.join(os.path.dirname(__file__), 'sql',\n                               'startup.sql')) as startup:\n            loop.run_until_complete(self.db.executescript(startup.read()))\n        self.session = session\n\n    async def close(self):\n        await self.dbw.commit()\n        await self.dbw.close()\n\n    ### TABLE: clients ###\n\n    async def client_matches(self, client_id, token):\n        async with self.lock:\n            await self.db.execute('SELECT client_id FROM scratchverifier_clients \\\nWHERE client_id=? AND token=?', (client_id, token))\n            if (await self.db.fetchone()):\n                return True\n        return False\n\n    ### TABLE: clients and sessions ###\n\n    async def username_from_session(self, session_id):\n        if session_id == 0: # 0 means debug mode\n            return 'kenny2scratch'\n        async with self.lock:\n            await self.db.execute('SELECT username FROM scratchverifier_sessions \\\nWHERE session_id=?', (session_id,))\n            row = await self.db.fetchone()\n        if row is None:\n            return None\n        return row[0]\n\n    async def new_client(self, session_id):\n        if session_id == 0: # 0 means debug mode\n            # don't create a client, because other funcs return a dummy one\n            # when under debug mode\n            return {'client_id': 0, 'username': 'kenny2scratch',\n                    'token': 'This client is newly created.'}\n        username = await self.username_from_session(session_id)\n        if username is None:\n            return None\n        async with self.session.get(USERS_API.format(username)) as resp:\n            assert resp.status == 200\n            data = await resp.json()\n        client_id = data['id']\n        token = token_hex(32)\n        await self.db.execute('INSERT INTO scratchverifier_clients (client_id, \\\ntoken, username) VALUES (?, ?, ?)', (client_id, token, username))\n        return {'client_id': client_id, 'token': token, 'username': username}\n\n    async def get_client(self, session_id):\n        if session_id == 0: # 0 means debug mode\n            return {'client_id': 0, 'username': 'kenny2scratch',\n                    'token': 'This is an example token that can be censored.'}\n        username = await self.username_from_session(session_id)\n        if username is None:\n            return None\n        async with self.lock:\n            await self.db.execute('SELECT * FROM scratchverifier_clients \\\nWHERE username=?', (username,))\n            row = await self.db.fetchone()\n        if row is None:\n            return None\n        return dict(row)\n\n    async def get_client_info(self, client_id):\n        if client_id == 0: # 0 means debug mode\n            return {'client_id': 0, 'username': 'kenny2scratch',\n                    'token': 'This is an example token that can be censored.'}\n        async with self.lock:\n            await self.db.execute('SELECT * FROM scratchverifier_clients \\\nWHERE client_id=?', (client_id,))\n            row = await self.db.fetchone()\n        if row is None:\n            return None\n        return dict(row)\n\n    async def reset_token(self, session_id):\n        if session_id == 0: # 0 means debug mode\n            return {'client_id': 0, 'username': 'kenny2scratch',\n                    'token': 'Yes, the token was reset.'}\n        username = await self.username_from_session(session_id)\n        if username is None:\n            return None\n        await self.db.execute('UPDATE scratchverifier_clients SET token=? \\\nWHERE username=?', (token_hex(32), username))\n        return self.get_client(session_id)\n\n    async def del_client(self, session_id):\n        if session_id == 0: # 0 means debug mode\n            return\n        username = await self.username_from_session(session_id)\n        if username is None:\n            return\n        await self.db.execute('DELETE FROM scratchverifier_clients \\\nWHERE username=?', (username,))\n\n    ### TABLE: sessions ###\n\n    async def new_session(self, username):\n        while 1:\n            session_id = randbits(32)\n            async with self.lock:\n                await self.db.execute('SELECT session_id FROM \\\nscratchverifier_sessions WHERE session_id=?', (session_id,))\n                if (await self.db.fetchone()) is None:\n                    break\n        await self.db.execute('INSERT INTO scratchverifier_sessions \\\n(session_id, expiry, username) VALUES (?, ?, ?)', (\n            session_id,\n            int(time.time()) + SESSION_EXPIRY,\n            username\n        ))\n        await self.db.execute('DELETE FROM scratchverifier_sessions WHERE \\\nexpiry<=?', (int(time.time()),))\n        return session_id\n\n    async def get_expired(self, session_id):\n        async with self.lock:\n            await self.db.execute('SELECT expiry FROM scratchverifier_sessions \\\nWHERE session_id=?', (session_id,))\n            expiry = await self.db.fetchone()\n        if expiry is None:\n            # \"expired\" if session doesn't exist in the first place\n            return True\n        expiry = expiry[0]\n        if time.time() > expiry:\n            await self.db.execute('DELETE FROM scratchverifier_sessions \\\nWHERE session_id=?', (session_id,))\n            return True\n        return False\n\n    async def logout(self, session_id):\n        await self.db.execute('DELETE FROM scratchverifier_sessions \\\nWHERE session_id=?', (session_id,))\n\n    async def logout_user(self, username):\n        await self.db.execute('DELETE FROM scratchverifier_sessions \\\nWHERE username=?', (username,))\n\n    ### TABLE: usage ###\n\n    async def start_verification(self, client_id, username):\n        async with self.lock:\n            await self.db.execute('SELECT code FROM scratchverifier_usage WHERE \\\nclient_id=? AND username=?', (client_id, username))\n            row = await self.db.fetchone()\n        if row is not None:\n            await self.db.execute('UPDATE scratchverifier_usage SET expiry=? \\\nWHERE client_id=? AND username=? AND code=?', (int(time.time()) + VERIFY_EXPIRY,\n                                               client_id, username, row[0]))\n            return row[0]\n        code = sha256(\n            str(client_id).encode()\n            + str(time.time()).encode()\n            + username.encode()\n            + token_bytes()\n        # 0->A, 1->B, etc, to avoid Scratch's phone number censor\n        ).hexdigest().translate({ord('0') + i: ord('A') + i for i in range(10)})\n        await self.db.execute('INSERT INTO scratchverifier_usage (client_id, \\\ncode, username, expiry) VALUES (?, ?, ?, ?)', (client_id, code, username,\n                               int(time.time() + VERIFY_EXPIRY)))\n        await self.db.execute('INSERT INTO scratchverifier_logs (client_id, \\\nusername, log_time, log_type) VALUES (?, ?, ?, ?)', (client_id, username,\n                                                     int(time.time()), 1))\n        await self.db.execute('DELETE FROM scratchverifier_usage WHERE \\\nexpiry<=?', (int(time.time()),))\n        return code\n\n    async def get_code(self, client_id, username):\n        async with self.lock:\n            await self.db.execute('SELECT code, expiry FROM scratchverifier_usage \\\nWHERE client_id=? AND username=?', (client_id, username))\n            row = await self.db.fetchone()\n        if row is None:\n            return None\n        if time.time() > row['expiry']:\n            await self.end_verification(client_id, username, False)\n            return None\n        return row['code']\n\n    async def end_verification(self, client_id, username, succ=True):\n        await self.db.execute('DELETE FROM scratchverifier_usage WHERE \\\nclient_id=? AND username=?', (client_id, username))\n        await self.db.execute('INSERT INTO scratchverifier_logs (client_id, \\\nusername, log_time, log_type) \\\nVALUES (?, ?, ?, ?)', (client_id, username, int(time.time()), 3 - succ))\n\n    ### TABLE: logs solely ###\n\n    async def get_logs(self, table='logs', **params):\n        query = f'SELECT * FROM scratchverifier_{table} WHERE 1=1'\n        id_col = 'log_id' if table == 'logs' else 'id'\n        time_col = 'log_time' if table == 'logs' else 'time'\n        type_col = 'log_type' if table == 'logs' else 'type'\n        if 'start' in params:\n            query += f' AND {id_col}<:start'\n        if 'before' in params:\n            query += f' AND {time_col}<=:before'\n        if 'end' in params:\n            query += f' AND {id_col}>:end'\n        if 'after' in params:\n            query += f' AND {time_col}>=:after'\n        if 'client_id' in params:\n            query += ' AND client_id=:client_id'\n        if 'username' in params:\n            query += ' AND username=:username'\n        if 'type' in params:\n            query += f' AND {type_col}=:type'\n        query += f' ORDER BY {id_col} DESC LIMIT :limit'\n        for k, v in params.items():\n            if k in {'start', 'before', 'end', 'after', 'client_id', 'type'}:\n                params[k] = int(v)\n        params['limit'] = int(params['limit'])\n        async with self.lock:\n            await self.db.execute(query, params)\n            rows = await self.db.fetchall()\n        return [dict(i) for i in rows]\n\n    async def get_log(self, log_id, table='logs'):\n        id_col = 'log_id' if table == 'logs' else 'id'\n        async with self.lock:\n            await self.db.execute(f'SELECT * FROM scratchverifier_{table} \\\nWHERE {id_col}=?', (log_id,))\n            row = await self.db.fetchone()\n        if row is None:\n            return None\n        return dict(row)\n\n    ### TABLE: ratelimits ###\n\n    async def get_ratelimits(self):\n        async with self.lock:\n            await self.db.execute('SELECT * FROM scratchverifier_ratelimits')\n            rows = await self.db.fetchall()\n        return [dict(i) for i in rows]\n\n    async def get_ratelimit(self, username):\n        async with self.lock:\n            await self.db.execute('SELECT * FROM scratchverifier_ratelimits \\\nWHERE username=?', (username,))\n            row = await self.db.fetchone()\n        if row is None:\n            return None\n        return row\n\n    async def set_ratelimits(self, data, performer):\n        await self.db.executemany('INSERT OR REPLACE INTO \\\nscratchverifier_ratelimits (username, ratelimit) \\\nVALUES (:username, :ratelimit)', data)\n        if performer is not None:\n            await self.db.executemany(\n                'INSERT INTO scratchverifier_auditlogs \\\n    (username, time, type, data) VALUES \\\n    (:username, :time, :type, :data)',\n                ({\n                    'username': performer,\n                    'time': int(time.time()),\n                    'type': 2, # ratelimit update\n                    'data': json.dumps(i)\n                } for i in data)\n            )\n\n    ### TABLE: bans ###\n\n    async def get_bans(self):\n        async with self.lock:\n            await self.db.execute('SELECT * FROM scratchverifier_bans')\n            rows = await self.db.fetchall()\n        return [dict(i) for i in rows]\n\n    async def get_ban(self, username):\n        async with self.lock:\n            await self.db.execute('SELECT * FROM scratchverifier_bans \\\nWHERE username=?', (username,))\n            row = await self.db.fetchone()\n        if row is None:\n            return None\n        if row['expiry'] is not None and row['expiry'] < time.time():\n            # ban has expired, delete it and return no ban\n            await self.db.execute('DELETE FROM scratchverifier_bans \\\nWHERE username=?', (username,))\n            return None\n        return row\n\n    async def set_bans(self, data, performer):\n        await self.db.executemany('INSERT OR REPLACE INTO scratchverifier_bans \\\n(username, expiry) VALUES (:username, :expiry)', data)\n        await self.db.executemany('DELETE FROM scratchverifier_clients \\\nWHERE username=?', ((i['username'],) for i in data))\n        await self.db.executemany('DELETE FROM scratchverifier_sessions \\\nWHERE username=?', ((i['username'],) for i in data))\n        await self.db.executemany(\n            'INSERT INTO scratchverifier_auditlogs \\\n(username, time, type, data) VALUES \\\n(:username, :time, :type, :data)',\n            ({\n                'username': performer,\n                'time': int(time.time()),\n                'type': 1, # ban\n                'data': json.dumps(i)\n            } for i in data)\n        )\n\n    async def del_ban(self, username, performer):\n        await self.db.execute('DELETE FROM scratchverifier_bans \\\nWHERE username=?', (username,))\n        await self.db.execute(\n            'INSERT INTO scratchverifier_auditlogs \\\n(username, time, type, data) VALUES \\\n(:username, :time, :type, :data)',\n            {\n                'username': performer,\n                'time': int(time.time()),\n                'type': 3, # unban\n                'data': json.dumps({'username': username})\n            }\n        )\n", "{\n  \"index.html\": [\n    {\n      \"type\": \"intro\",\n      \"title\": \"Welcome to ScratchVerifier\",\n      \"paragraphs\": [\"Verify Scratch accounts as genuine, for use in authorization or identification.\"]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Introduction\",\n      \"paragraphs\": [\n        \"You've found the documentation for ScratchVerifier's API! These pages show you how to use ScratchVerifier for anything you might be making that needs to know who somebody is on Scratch.\",\n        \"This documentation is <a href=\\\"https://github.com/ScratchVerifier/ScratchVerifier/tree/develop/docs\\\">on GitHub</a> so feel free to submit an issue for any corrections or improvements!\"\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Bugs\",\n      \"paragraphs\": [\n        \"If you find something that you think is a bug, report it <a href=\\\"https://github.com/ScratchVerifier/ScratchVerifier\\\">on GitHub</a> and we'll be sure to check it out.\"\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Getting Started\",\n      \"paragraphs\": [\n        \"See the <a href=\\\"usage.html\\\">usage walkthrough</a> to get started!\"\n      ]\n    }\n  ],\n  \"reference.html\": [\n    {\n      \"type\": \"intro\",\n      \"title\": \"API Reference\",\n      \"paragraphs\": [\n        \"The ScratchVerifier API is a HTTP/REST API for all operations.\",\n        \"<b>API Base URL</b>: <a href=\\\"https://scratchverifier.ddns.net\\\">https://scratchverifier.ddns.net</a>\"\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Authorization\",\n      \"paragraphs\": [\n        \"Authorization is done using <a href=\\\"https://tools.ietf.org/html/rfc7617\\\">Basic HTTP Authorization</a>, using your client ID as the username and token as the password.\",\n        {\n          \"type\": \"headedpre\",\n          \"heading\": \"Example Authorization Header\",\n          \"text\": \"Authorization: Basic MTAxMTQ3NjQ6NDY5MDI1YzYxM2RhNDMwYmEzMTE0NzIwY...==\"\n        }\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"API Endpoints\",\n      \"paragraphs\": [\n        \"The simplicity of this API is such that there are only three total endpoints for its ultimate purpose.\"\n      ]\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Start/Renew Verification\",\n      \"desc\": \"Request a new verification code for a user. Only one code per user per client - if this endpoint is used again before the <a href=\\\"#finish-verification-endpoint\\\">Finish Verification</a> endpoint is used, this will instead renew the 30-minute expiry on the code and return the original code.\",\n      \"method\": \"PUT\",\n      \"path\": \"/verify/{username}\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"The username to verify\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns <a href=\\\"#verification-object\\\">Verification</a> object\",\n        \"400 Bad Request\": \"username is invalid by Scratch rules\",\n        \"401 Unauthorized\": \"missing/invalid <a href=\\\"#authorization\\\">authorization</a>\"\n      },\n      \"auth\": true,\n      \"returns\": {\n        \"type\": \"Verification\",\n        \"code\": \"EJAAFcffGJeFDCGdJB...\",\n        \"username\": \"scratchusername\"\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Finish Verification\",\n      \"desc\": \"Confirm verification for a user. Returns 204 No Content on successful verification, 403 Forbidden on failure.\",\n      \"method\": \"POST\",\n      \"path\": \"/verify/{username}\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"The username to verify\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"204 No Content\": \"verification successful\",\n        \"400 Bad Request\": \"username is invalid by Scratch rules\",\n        \"401 Unauthorized\": \"missing/invalid <a href=\\\"#authorization\\\">authorization</a>\",\n        \"403 Forbidden\": \"verification unsuccessful\",\n        \"404 Not Found\": \"username 404ed on Scratch API OR user is not currently being verified\"\n      },\n      \"auth\": true,\n      \"returns\": null\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Invalidate Verification\",\n      \"desc\": \"Cancel verifying a user.\",\n      \"method\": \"DELETE\",\n      \"path\": \"/verify/{username}\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"The username to give up on verifying\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"204 No Content\": \"invalidation successful\",\n        \"400 Bad Request\": \"username is invalid by Scratch rules\",\n        \"401 Unauthorized\": \"missing/invalid <a href=\\\"#authorization\\\">authorization</a>\"\n      },\n      \"auth\": true,\n      \"returns\": null\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"API Registration Endpoints\",\n      \"paragraphs\": [\n        \"These endpoints are to do with registering a client with the API.\"\n      ]\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Start Logging In\",\n      \"desc\": \"Begin the process of logging in to the registration API.\",\n      \"method\": \"POST\",\n      \"path\": \"/users/{username}/login\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"The username to log in with\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns <a href=\\\"#verification-object\\\">Verification</a> object\",\n        \"400 Bad Request\": \"username is invalid by Scratch rules\",\n        \"403 Forbidden\": \"this username is banned from registering\"\n      },\n      \"returns\": {\n        \"type\": \"Verification\",\n        \"code\": \"EJAAFcffGJeFDCGdJB...\",\n        \"username\": \"scratchusername\"\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Finish Logging In\",\n      \"desc\": \"Finish the process of logging in. If successful, response contains a <code>session</code> cookie that must be set for all endpoints listed after this one to work. Returns an <a href=\\\"#admin-object\\\">Admin</a> object on success.\",\n      \"method\": \"POST\",\n      \"path\": \"/users/{username}/finish-login\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"The username to log in with\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns <a href=\\\"#admin-object\\\">Admin</a> object\",\n        \"400 Bad Request\": \"username is invalid by Scratch rules\",\n        \"401 Unauthorized\": \"login failed\",\n        \"404 Not Found\": \"username 404ed on Scratch API\"\n      },\n      \"returns\": {\n        \"type\": \"Admin\",\n        \"admin\": false\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Logout All Sessions\",\n      \"desc\": \"Immediately invalidate all sessions under this username.\",\n      \"method\": \"POST\",\n      \"path\": \"/users/{username}/logout\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"The username to log out\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"204 No Content\": \"successfully logged out\",\n        \"400 Bad Request\": \"username is invalid by Scratch rules\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\",\n        \"403 Forbidden\": \"username does not match session\",\n        \"404 Not Found\": \"username 404ed on Scratch API\"\n      },\n      \"auth\": \"finish-logging-in-endpoint\",\n      \"returns\": null\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get Client Info\",\n      \"desc\": \"Get your client ID, token, and username. Returns a <a href=\\\"#user-object\\\">User</a> object on success.\",\n      \"method\": \"GET\",\n      \"path\": \"/session\",\n      \"params\": {},\n      \"http\": {\n        \"200 OK\": \"returns <a href=\\\"#user-object\\\">User</a> object\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\",\n        \"404 Not Found\": \"this user is not registered with the API yet\"\n      },\n      \"auth\": \"finish-logging-in-endpoint\",\n      \"returns\": {\n        \"type\": \"User\",\n        \"client_id\": 10114764,\n        \"token\": \"dd9410f80ba0...\",\n        \"username\": \"scratchusername\"\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Create Client\",\n      \"desc\": \"If this user does not own a client yet, create and return one.\",\n      \"method\": \"PUT\",\n      \"path\": \"/session\",\n      \"params\": {},\n      \"http\": {\n        \"200 OK\": \"returns new <a href=\\\"#user-object\\\">User</a> object\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\",\n        \"409 Conflict\": \"this user is already registered with the API\"\n      },\n      \"auth\": \"finish-logging-in-endpoint\",\n      \"returns\": {\n        \"type\": \"User\",\n        \"client_id\": 10114764,\n        \"token\": \"dd9410f80ba0...\",\n        \"username\": \"scratchusername\"\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Reset Token\",\n      \"desc\": \"If you suspect that your token has been compromised, reset it through this endpoint.\",\n      \"method\": \"PATCH\",\n      \"path\": \"/session\",\n      \"params\": {},\n      \"http\": {\n        \"200 OK\": \"returns updated <a href=\\\"#user-object\\\">User</a> object\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"finish-logging-in-endpoint\",\n      \"returns\": {\n        \"type\": \"User\",\n        \"client_id\": 10114764,\n        \"token\": \"dd9410f80ba0...\",\n        \"username\": \"scratchusername\"\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Delete Client\",\n      \"desc\": \"Deregister from the API. Returns 204 No Content on success.\",\n      \"method\": \"DELETE\",\n      \"path\": \"/session\",\n      \"params\": {},\n      \"http\": {\n        \"204 No Content\": \"client was successfully deleted\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"finish-logging-in-endpoint\",\n      \"returns\": null\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Logout Session\",\n      \"desc\": \"Invalidate this session ID.\",\n      \"method\": \"POST\",\n      \"path\": \"/session/logout\",\n      \"params\": {},\n      \"http\": {\n        \"204 No Content\": \"successfully logged out\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"finish-logging-in-endpoint\",\n      \"returns\": null\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"API Usage Endpoints\",\n      \"paragraphs\": [\n        \"These endpoints fetch API usage logs.\"\n      ]\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get Usage Logs\",\n      \"desc\": \"Get logs of who has used this API to verify what user. These logs are accessible by anyone to head off abuse.\",\n      \"method\": \"GET\",\n      \"path\": \"/usage\",\n      \"params\": {\n        \"limit\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return at most <code>limit</code> logs. <code>limit</code> cannot be greater than 500\",\n          \"query\": true\n        },\n        \"start\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return logs that happened before (not including) the log with ID <code>start</code>. Usually used for getting the next page of logs. This does not have to be a valid ID (though it usually is)\",\n          \"query\": true\n        },\n        \"before\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return logs that happened before (and including) the Unix epoch time <code>before</code>\",\n          \"query\": true\n        },\n        \"end\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return logs that happened after (not including) the log with ID <code>end</code>\",\n          \"query\": true\n        },\n        \"after\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return logs that happened after (and including) the Unix epoch time <code>after</code>. Usually used to limit returned logs by time\",\n          \"query\": true\n        },\n        \"client_id\": {\n          \"type\": \"integer\",\n          \"desc\": \"Only return logs with the client ID <code>client_id</code>\",\n          \"query\": true\n        },\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"Only return logs with the username <code>username</code>\",\n          \"query\": true\n        },\n        \"type\": {\n          \"type\": \"integer\",\n          \"desc\": \"Only return logs with the <a href=\\\"#log-types\\\">log type</a> <code>type</code>\",\n          \"query\": true\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns list of <a href=\\\"#log-object\\\">Log</a> objects\",\n        \"400 Bad Request\": \"<code>start</code> is after <code>end</code>, <code>before</code> is after <code>after</code>, <code>type</code> is invalid, or a query param was the wrong type\",\n        \"403 Forbidden\": \"<code>limit</code> was greater than 500\"\n      },\n      \"returns\": {\n        \"type\": \"Log[]\",\n        \"log_id\": 123,\n        \"client_id\": 1234567890,\n        \"username\": \"scratchusername\",\n        \"log_time\": \"1566974952\",\n        \"log_type\": 1\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get Usage Log\",\n      \"desc\": \"Fetch the information for a single log entry.\",\n      \"method\": \"GET\",\n      \"path\": \"/usage/{log ID}\",\n      \"params\": {\n        \"log ID\": {\n          \"type\": \"integer\",\n          \"desc\": \"ID of log entry to fetch\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns single <a href=\\\"#log-object\\\">Log</a> object\",\n        \"404 Not Found\": \"no log with such ID\"\n      },\n      \"returns\": {\n        \"type\": \"Log\",\n        \"log_id\": 123,\n        \"client_id\": 1234567890,\n        \"username\": \"scratchusername\",\n        \"log_time\": \"1566974952\",\n        \"log_type\": 1\n      }\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Administrative Endpoints\",\n      \"paragraphs\": [\n        \"The following endpoints can only be accessed by administrators.\",\n        \"Administrators must be logged in with the <a href=\\\"#finish-logging-in-endpoint\\\">Finish Logging In endpoint</a> to access these endpoints.\"\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Ratelimit Endpoints\",\n      \"paragraphs\": [\n        \"These endpoints are to do with getting and setting ratelimits on the main API.\"\n      ]\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get All Ratelimits\",\n      \"desc\": \"Fetch all currently active ratelimits.\",\n      \"method\": \"GET\",\n      \"path\": \"/admin/ratelimits\",\n      \"params\": {},\n      \"http\": {\n        \"200 OK\": \"returns list of <a href=\\\"#ratelimit-object\\\">Ratelimit</a> objects\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": {\n        \"type\": \"Ratelimit[]\",\n        \"username\": \"scratchusername\",\n        \"ratelimit\": 30\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get Single Ratelimit\",\n      \"desc\": \"Fetch ratelimits for a particular user.\",\n      \"method\": \"GET\",\n      \"path\": \"/admin/ratelimits/{username}\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"Username to fetch ratelimits for\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns <a href=\\\"#ratelimit-object\\\">Ratelimit</a> object\",\n        \"400 Bad Request\": \"username invalid by Scratch standards\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\",\n        \"404 Not Found\": \"no ratelimit set for that user\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": {\n        \"type\": \"PartialRatelimit\",\n        \"ratelimit\": 30\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Modify Ratelimits\",\n      \"desc\": \"Modify or set ratelimits for multiple users at once. Only users specified will modified; the rest will not be touched. Invalid entries are ignored.\",\n      \"method\": \"PATCH\",\n      \"path\": \"/admin/ratelimits\",\n      \"params\": {},\n      \"http\": {\n        \"204 No Content\": \"success\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": null,\n      \"body\": {\n        \"type\": \"Ratelimit[]\",\n        \"username\": \"scratchusername\",\n        \"ratelimit\": 30\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Modify Single Ratelimit\",\n      \"desc\": \"Modify or set ratelimits for a specific user. Nonexistent users can be set preemptively.\",\n      \"method\": \"POST\",\n      \"path\": \"/admin/ratelimits/{username}\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"Username to set ratelimits for\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"204 No Content\": \"success\",\n        \"400 Bad Request\": \"username invalid by Scratch standards\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": null,\n      \"body\": {\n        \"type\": \"Ratelimit\",\n        \"ratelimit\": 30\n      }\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Ban Endpoints\",\n      \"paragraphs\": [\n        \"These endpoints are to do with getting and setting bans on the registration API.\"\n      ]\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get All Bans\",\n      \"desc\": \"Fetch all currently active bans.\",\n      \"method\": \"GET\",\n      \"path\": \"/admin/bans\",\n      \"params\": {},\n      \"http\": {\n        \"200 OK\": \"returns list of <a href=\\\"#Ban-object\\\">Ban</a> objects\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": {\n        \"type\": \"Ban[]\",\n        \"username\": \"scratchusername\",\n        \"expiry\": 1598537437\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get Single Ban\",\n      \"desc\": \"Fetch the active ban for a specific user, if any.\",\n      \"method\": \"GET\",\n      \"path\": \"/admin/bans/{username}\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"Username to fetch ban for\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns <a href=\\\"#Ban-object\\\">Ban</a> object\",\n        \"400 Bad Request\": \"username invalid by Scratch standards\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\",\n        \"404 Not Found\": \"no ban currently in force for that user\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": {\n        \"type\": \"PartialBan\",\n        \"expiry\": 1598537437\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Modify Bans\",\n      \"desc\": \"Modify or put multiple bans into force. Invalid entries are ignored.\",\n      \"method\": \"PATCH\",\n      \"path\": \"/admin/bans\",\n      \"params\": {},\n      \"http\": {\n        \"204 No Content\": \"success\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": null,\n      \"body\": {\n        \"type\": \"Ban[]\",\n        \"username\": \"scratchusername\",\n        \"expiry\": 1598537437\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Modify Single Ban\",\n      \"desc\": \"Ban a user or modify their existing ban.\",\n      \"method\": \"GET\",\n      \"path\": \"/admin/bans/{username}\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"Username to ban\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"204 No Content\": \"success\",\n        \"400 Bad Request\": \"username invalid by Scratch standards\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": null,\n      \"body\": {\n        \"type\": \"PartialBan\",\n        \"expiry\": 1598537437\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Unban\",\n      \"desc\": \"Unban a user. This is idempotent; unbanning the same user multiple times will unban them once (unless they are banned again).\",\n      \"method\": \"DELETE\",\n      \"path\": \"/admin/bans/{username}\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"Username to unban\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"204 No Content\": \"success\",\n        \"400 Bad Request\": \"username invalid by Scratch standards\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": null\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Audit Log Endpoints\",\n      \"paragraphs\": [\n        \"Admins' actions are recorded. Fetch those logs with these endpoints.\"\n      ]\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get Audit Logs\",\n      \"desc\": \"Get logs of who has used this API to perform what admin action. These logs are accessible only by administrators.\",\n      \"method\": \"GET\",\n      \"path\": \"/admin/logs\",\n      \"params\": {\n        \"limit\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return at most <code>limit</code> logs. This can be arbitrarily large, but defaults to 100 and cannot be unlimited.\",\n          \"query\": true\n        },\n        \"start\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return logs that happened before (not including) the log with ID <code>start</code>. Usually used for getting the next page of logs. This does not have to be a valid ID (though it usually is)\",\n          \"query\": true\n        },\n        \"before\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return logs that happened before (and including) the Unix epoch time <code>before</code>\",\n          \"query\": true\n        },\n        \"end\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return logs that happened after (not including) the log with ID <code>end</code>\",\n          \"query\": true\n        },\n        \"after\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return logs that happened after (and including) the Unix epoch time <code>after</code>. Usually used to limit returned logs by time\",\n          \"query\": true\n        },\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"Only return logs with the username <code>username</code>\",\n          \"query\": true\n        },\n        \"type\": {\n          \"type\": \"integer\",\n          \"desc\": \"Only return logs with the <a href=\\\"#audit-log-types\\\">audit log type</a> <code>type</code>\",\n          \"query\": true\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns list of <a href=\\\"#auditlog-object\\\">AuditLog</a> objects\",\n        \"400 Bad Request\": \"<code>start</code> is after <code>end</code>, <code>before</code> is after <code>after</code>, <code>type</code> is invalid, or a query param was the wrong type\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": {\n        \"__type__\": \"AuditLog[]\",\n        \"id\": 123,\n        \"username\": \"actionperformer\",\n        \"time\": \"1566974952\",\n        \"type\": 1,\n        \"data\": \"{\\\"username\\\": \\\"ScratchUsername\\\", \\\"expiry\\\": 1234567890}\"\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get Audit Log\",\n      \"desc\": \"Fetch the information for a single audit log entry.\",\n      \"method\": \"GET\",\n      \"path\": \"/admin/logs/{log ID}\",\n      \"params\": {\n        \"log ID\": {\n          \"type\": \"integer\",\n          \"desc\": \"ID of audit log entry to fetch\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns single <a href=\\\"#auditlog-object\\\">Log</a> object\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\",\n        \"404 Not Found\": \"no log with such ID\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": {\n        \"__type__\": \"AuditLog\",\n        \"id\": 123,\n        \"username\": \"actionperformer\",\n        \"time\": \"1566974952\",\n        \"type\": 1,\n        \"data\": \"{\\\"username\\\": \\\"ScratchUsername\\\", \\\"expiry\\\": 1234567890}\"\n      }\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Miscellaneous Admin Tools\",\n      \"paragraphs\": [\n        \"Admins have a few other tools available as well.\"\n      ]\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get Client Info\",\n      \"desc\": \"Fetch information about a certain client. The token is partially censored.\",\n      \"method\": \"GET\",\n      \"path\": \"/admin/client/{client ID}\",\n      \"params\": {\n        \"client ID\": {\n          \"type\": \"integer\",\n          \"desc\": \"ID of client whose info is to be fetched\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns <a href=\\\"#client-object\\\">Client</a> object\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\",\n        \"404 Not Found\": \"no client with that ID\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": {\n        \"type\": \"Client\",\n        \"client_id\": 1234567890,\n        \"token\": \"EaFfBJdC******...\",\n        \"username\": \"scratchusername\",\n        \"ratelimit\": 30\n      }\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Objects\",\n      \"paragraphs\": [\n        \"Various endpoints have defined return types or body structures. They are documented below.\"\n      ]\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"Verification\",\n      \"desc\": \"Holds data related to verifying a user on Scratch.\",\n      \"fields\": {\n        \"code\": {\"type\": \"string\", \"desc\": \"verification code to post\"},\n        \"username\": {\"type\": \"string\", \"desc\": \"username being verified\"}\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"Admin\",\n      \"desc\": \"Indicates whether the user who just <a href=\\\"#finish-logging-in-endpoint\\\">finished logging in</a> is an admin on the site or not.\",\n      \"fields\": {\n        \"admin\": {\"type\": \"boolean\", \"desc\": \"whether the user is an admin\"}\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"User\",\n      \"desc\": \"Holds data that a client needs to access the API.\",\n      \"fields\": {\n        \"client_id\": {\"type\": \"integer\", \"desc\": \"client ID\"},\n        \"token\": {\"type\": \"string\", \"desc\": \"API token for client\"},\n        \"username\": {\"type\": \"string\", \"desc\": \"username of client\"}\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"Log\",\n      \"desc\": \"Holds log data for a verification.\",\n      \"fields\": {\n        \"log_id\": {\"type\": \"integer\", \"desc\": \"log ID\"},\n        \"client_id\": {\"type\": \"integer\", \"desc\": \"client ID responsible for this log\"},\n        \"username\": {\"type\": \"string\", \"desc\": \"username being verified\"},\n        \"log_time\": {\"type\": \"integer\", \"desc\": \"Unix epoch time of log\"},\n        \"log_type\": {\"type\": \"integer\", \"desc\": \"<a href=\\\"#log-types\\\">log type</a>\"}\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"Ratelimit\",\n      \"desc\": \"Holds data about a user's ratelimit.\",\n      \"fields\": {\n        \"username\": {\"type\": \"string\", \"desc\": \"username being ratelimited\"},\n        \"ratelimit\": {\"type\": \"integer\", \"desc\": \"how many requests they can make per minute\"}\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"PartialRatelimit\",\n      \"desc\": \"Holds data about a user's ratelimit, without their name\",\n      \"fields\": {\n        \"ratelimit\": {\"type\": \"integer\", \"desc\": \"how many requests they can make per minute\"}\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"Ban\",\n      \"desc\": \"Holds data about a user's ban status.\",\n      \"fields\": {\n        \"username\": {\"type\": \"string\", \"desc\": \"username being banned\"},\n        \"expiry\": {\"type\": \"integer?\", \"desc\": \"Unix timestamp when their ban expires. <code>null</code> means a permanent ban.\"}\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"PartialBan\",\n      \"desc\": \"Holds data about a user's ban status, without their name.\",\n      \"fields\": {\n        \"expiry\": {\"type\": \"integer?\", \"desc\": \"Unix epoch time when their ban expires. <code>null</code> means a permanent ban.\"}\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"AuditLog\",\n      \"desc\": \"Holds log data for an admin action.\",\n      \"fields\": {\n        \"id\": {\"type\": \"integer\", \"desc\": \"log ID\"},\n        \"username\": {\"type\": \"string\", \"desc\": \"username of action performer\"},\n        \"time\": {\"type\": \"integer\", \"desc\": \"Unix epoch time of log\"},\n        \"type\": {\"type\": \"integer\", \"desc\": \"<a href=\\\"#audit-log-types\\\">audit log type</a>\"},\n        \"data\": {\"type\": \"string\", \"desc\": \"stringified JSON of action data\"}\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"Client\",\n      \"desc\": \"Holds data about a client.\",\n      \"fields\": {\n        \"client_id\": {\"type\": \"integer\", \"desc\": \"client ID\"},\n        \"token\": {\"type\": \"string\", \"desc\": \"partially censored token of client\"},\n        \"username\": {\"type\": \"string\", \"desc\": \"username of owner\"},\n        \"ratelimit\": {\"type\": \"integer?\", \"desc\": \"how many requests this client can make per minute. Can be <code>null</code> if this client has never been used yet.\"}\n      }\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Log Types\",\n      \"paragraphs\": [\n        \"Logs can have four types:\",\n        {\"type\": \"ul\", \"items\": [\n          \"<code>1</code>: verification started\",\n          \"<code>2</code>: verification succeeded\",\n          \"<code>3</code>: verification failed\",\n          \"<code>4</code>: verification invalidated\"\n        ]}\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Audit Log Types\",\n      \"paragraphs\": [\n        \"Audit logs can have three types:\",\n        {\"type\": \"ul\", \"items\": [\n          \"<code>1</code>: user banned or user ban modified\",\n          \"<code>2</code>: user ratelimit modified\",\n          \"<code>3</code>: user unbanned\"\n        ]}\n      ]\n    }\n  ],\n  \"usage.html\": [\n    {\n      \"type\": \"intro\",\n      \"title\": \"ScratchVerifier Usage\",\n      \"paragraphs\": [\"This page contains a walkthrough for using this API.\"]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Basic Walkthrough\",\n      \"paragraphs\": [\n        \"The API root URL is <a href=\\\"https://scratchverifier.ddns.net\\\">https://scratchverifier.ddns.net</a>\",\n        \"After <a href=\\\"registration.html\\\"><b>registering</b></a>, here's how to use this API:\",\n        {\"type\": \"ol\", \"items\": [\n          \"Send an HTTP <span class=\\\"method\\\">PUT</span> request to <code>/verify/<span class=\\\"param\\\">{username}</span></code> with the client ID and token you obtained as HTTP Basic authorization\",\n          \"The API will send you a <a href=\\\"reference.html#verification-object\\\">Verification</a> object containing a code\",\n          \"Have your client post that verification code on <i>their own profile comments</i>\",\n          \"Send an HTTP <span class=\\\"method\\\">POST</span> request to <code>/verify/<span class=\\\"param\\\">{username}</span></code>\",\n          \"If your client is verified, you should receive a 204 No Content response. Done!\"\n        ]}\n      ]\n    }\n  ],\n  \"registration.html\": [\n    {\n      \"type\": \"intro\",\n      \"title\": \"ScratchVerifier Registration\",\n      \"paragraphs\": [\"This page contains walkthroughs for registering/handling your registration with this API.\"]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Registering Through the Website\",\n      \"paragraphs\": [\n        \"This is how to register with this API through the <a href=\\\"https://scratchverifier.ddns.net/site/\\\">website</a>.\",\n        {\"type\": \"ol\", \"items\": [\n          \"Visit the website.\",\n          \"Click \\\"Login/Register\\\" at the top right\",\n          \"You will be presented with a verification code. (That's right, we use our own API to register people with it!)\",\n          \"Post this code on your own profile comments\",\n          \"Click \\\"Continue\\\"\",\n          \"You will then be logged in\",\n          \"You will be presented with a button saying \\\"Create client\\\". Click it\",\n          \"You will be shown your client ID and a button to copy your token.\",\n          \"Put your client ID and token into your app's configuration. Done!\"\n        ]},\n        \"At any point, if you wish to view your info again, simply login (if necessary) and you will be presented with it.\"\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Registering Through the API\",\n      \"paragraphs\": [\n        \"The API itself provides endpoints to register yourself. Here's how to use them:\",\n        {\"type\": \"ol\", \"items\": [\n          \"Send an HTTP <span class=\\\"method\\\">POST</span> request to <code>/users/<span class=\\\"param\\\">{yourusername}</span>/login</code>\",\n          \"The API will send you a <a href=\\\"reference.html#verification-object\\\">Verification</a> object containing a code\",\n          \"Post this code on your own profile comments\",\n          \"Send an HTTP <span class=\\\"method\\\">POST</span> request to <code>/users/<span class=\\\"param\\\">{yourusername}</span>/finish-login</code>\",\n          \"You will receive a cookie with your session ID. Set it; it lasts a year\",\n          \"Assuming you haven't already created a client, send an HTTP <span class=\\\"method\\\">PUT</span> request to <code>/session</code>\",\n          \"You will receive a <a href=\\\"reference.html#user-object\\\">User</a> object containing your client ID and token\",\n          \"Put your client ID and token into your app's configuration. Done!\"\n        ]},\n        \"At any point, if it becomes necessary to fetch your info again, simply send an HTTP <span class=\\\"method\\\">GET</span> request to <code>/session</code> and you will receive it. If you receive a 401 Unauthorized response, you need to get another session ID by following steps 1-5.\"\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Resetting your Token\",\n      \"paragraphs\": [\n        \"If you think your token has been compromised, you can reset your token using the website:\",\n        {\"type\": \"ol\", \"items\": [\n          \"Visit the website. If presented with your current info, skip to step 8\",\n          \"Click \\\"Login/Register\\\" at the top right\",\n          \"You will be presented with a verification code\",\n          \"Post this code on your own profile comments\",\n          \"Click \\\"Continue\\\"\",\n          \"You will then be logged in\",\n          \"You will be presented with your client info\",\n          \"Click the button labelled \\\"Reset token\\\"\",\n          \"Copy your new token and update your app's configuration. Done!\"\n        ]},\n        \"Or using the API:\",\n        {\"type\": \"ol\", \"items\": [\n          \"<span class=\\\"method\\\">GET</span> <code>/session</code> to fetch your info\",\n          \"If you receive your info, skip to step 8. Otherwise, continue with step 3\",\n          \"Send an HTTP <span class=\\\"method\\\">POST</span> request to <code>/users/<span class=\\\"param\\\">{yourusername}</span>/login</code>\",\n          \"The API will send you a <a href=\\\"reference.html#verification-object\\\">Verification</a> object containing a code\",\n          \"Post this code on your own profile comments\",\n          \"Send an HTTP <span class=\\\"method\\\">POST</span> request to <code>/users/<span class=\\\"param\\\">{yourusername}</span>/finish-login</code>\",\n          \"You will receive a cookie with your session ID. Set it; it lasts a year\",\n          \"Send an HTTP <span class=\\\"method\\\">PATCH</span> request to <code>/session</code>\",\n          \"You will receive a new <a href=\\\"reference.html#user-object\\\">User</a> object containing your client ID and updated token\",\n          \"Update your token in your app's configuration. Done!\"\n        ]}\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Deleting your Account\",\n      \"paragraphs\": [\n        \"We're sorry to see you go! You can deregister from the API through the website:\",\n        {\"type\": \"ol\", \"items\": [\n          \"Visit the website. If presented with your current info, skip to step 8\",\n          \"Click \\\"Login/Register\\\" at the top right\",\n          \"You will be presented with a verification code\",\n          \"Post this code on your own profile comments\",\n          \"Click \\\"Continue\\\"\",\n          \"You will then be logged in\",\n          \"You will be presented with your client info\",\n          \"Click the button labelled \\\"Delete Account\\\"\",\n          \"Click the confirmation. :(\"\n        ]},\n        \"Or using the API:\",\n        {\"type\": \"ol\", \"items\": [\n          \"<span class=\\\"method\\\">GET</span> <code>/session</code> to fetch your info\",\n          \"If you receive your info, skip to step 8. Otherwise, continue with step 3\",\n          \"Send an HTTP <span class=\\\"method\\\">POST</span> request to <code>/users/<span class=\\\"param\\\">{yourusername}</span>/login</code>\",\n          \"The API will send you a <a href=\\\"reference.html#verification-object\\\">Verification</a> object containing a code\",\n          \"Post this code on your own profile comments\",\n          \"Send an HTTP <span class=\\\"method\\\">POST</span> request to <code>/users/<span class=\\\"param\\\">{yourusername}</span>/finish-login</code>\",\n          \"You will receive a cookie with your session ID. Set it; it lasts a year\",\n          \"Send an HTTP <span class=\\\"method\\\">DELETE</span> request to <code>/session</code>\",\n          \"You will receive a 204 No Content response. :(\"\n        ]},\n        \"<i>Note: This only deregisters your client from the API. You are still free to re-register later. Resetting your token is almost like deregistering and re-registering again.</i>\"\n      ]\n    }\n  ]\n}\n", "<!doctype html>\n<html>\n<head>\n    <link rel=\"stylesheet\" href=\"main.css\" />\n    <script src=\"main.js\"></script>\n    <script>\n    if (location.pathname === \"/docs\"){location.pathname = \"/docs/\"};\n    </script>\n    <title>API Reference - ScratchVerifier Documentation</title>\n</head>\n<body><div id=\"body\">\n\n<h1 id=\"api-reference\">API Reference</h1>\n<p>The ScratchVerifier API is a HTTP/REST API for all operations.</p>\n<p><b>API Base URL</b>: <a href=\"https://scratchverifier.ddns.net\">https://scratchverifier.ddns.net</a></p>\n<h2 id=\"authorization\">Authorization</h2>\n<p>Authorization is done using <a href=\"https://tools.ietf.org/html/rfc7617\">Basic HTTP Authorization</a>, using your client ID as the username and token as the password.</p>\n<table><caption>Example Authorization Header</caption>\n<tr><td class=\"pre\">Authorization: Basic MTAxMTQ3NjQ6NDY5MDI1YzYxM2RhNDMwYmEzMTE0NzIwY...==</td></tr>\n</table>\n<h2 id=\"api-endpoints\">API Endpoints</h2>\n<p>The simplicity of this API is such that there are only three total endpoints for its ultimate purpose.</p>\n<h3 id=\"start/renew-verification-endpoint\">Start/Renew Verification Endpoint</h3>\n<p>Request a new verification code for a user. Only one code per user per client - if this endpoint is used again before the <a href=\"#finish-verification-endpoint\">Finish Verification</a> endpoint is used, this will instead renew the 30-minute expiry on the code and return the original code.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">PUT</span> <code>/verify/<span class=\"param\">{username}</span></code> <a href=\"#authorization\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>The username to verify</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns <a href=\"#verification-object\">Verification</a> object</td></tr>\n<tr><td>400 Bad Request</td><td>username is invalid by Scratch rules</td></tr>\n<tr><td>401 Unauthorized</td><td>missing/invalid <a href=\"#authorization\">authorization</a></td></tr>\n</table>\n<table><caption>Returns a <a href=\"#verification-object\">Verification</a> object</caption>\n<tr><td class=\"pre\">{\n  \"code\": \"EJAAFcffGJeFDCGdJB...\",\n  \"username\": \"scratchusername\"\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"finish-verification-endpoint\">Finish Verification Endpoint</h3>\n<p>Confirm verification for a user. Returns 204 No Content on successful verification, 403 Forbidden on failure.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">POST</span> <code>/verify/<span class=\"param\">{username}</span></code> <a href=\"#authorization\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>The username to verify</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>verification successful</td></tr>\n<tr><td>400 Bad Request</td><td>username is invalid by Scratch rules</td></tr>\n<tr><td>401 Unauthorized</td><td>missing/invalid <a href=\"#authorization\">authorization</a></td></tr>\n<tr><td>403 Forbidden</td><td>verification unsuccessful</td></tr>\n<tr><td>404 Not Found</td><td>username 404ed on Scratch API OR user is not currently being verified</td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n</div></div>\n<h3 id=\"invalidate-verification-endpoint\">Invalidate Verification Endpoint</h3>\n<p>Cancel verifying a user.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">DELETE</span> <code>/verify/<span class=\"param\">{username}</span></code> <a href=\"#authorization\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>The username to give up on verifying</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>invalidation successful</td></tr>\n<tr><td>400 Bad Request</td><td>username is invalid by Scratch rules</td></tr>\n<tr><td>401 Unauthorized</td><td>missing/invalid <a href=\"#authorization\">authorization</a></td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n</div></div>\n<h2 id=\"api-registration-endpoints\">API Registration Endpoints</h2>\n<p>These endpoints are to do with registering a client with the API.</p>\n<h3 id=\"start-logging-in-endpoint\">Start Logging In Endpoint</h3>\n<p>Begin the process of logging in to the registration API.</p>\n<div class=\"endpoint\">\n<div class=\"method-path\" onclick=\"showOrHide(this)\"><span class=\"method\">POST</span> <code>/users/<span class=\"param\">{username}</span>/login</code> <a href=\"#authorization\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>The username to log in with</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns <a href=\"#verification-object\">Verification</a> object</td></tr>\n<tr><td>400 Bad Request</td><td>username is invalid by Scratch rules</td></tr>\n<tr><td>403 Forbidden</td><td>this username is banned from registering</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#verification-object\">Verification</a> object</caption>\n<tr><td class=\"pre\">{\n  \"code\": \"EJAAFcffGJeFDCGdJB...\",\n  \"username\": \"scratchusername\"\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"finish-logging-in-endpoint\">Finish Logging In Endpoint</h3>\n<p>Finish the process of logging in. If successful, response contains a <code>session</code> cookie that must be set for all endpoints listed after this one to work. Returns an <a href=\"#admin-object\">Admin</a> object on success.</p>\n<div class=\"endpoint\">\n<div class=\"method-path\" onclick=\"showOrHide(this)\"><span class=\"method\">POST</span> <code>/users/<span class=\"param\">{username}</span>/finish-login</code> <a href=\"#authorization\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>The username to log in with</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns <a href=\"#admin-object\">Admin</a> object</td></tr>\n<tr><td>400 Bad Request</td><td>username is invalid by Scratch rules</td></tr>\n<tr><td>401 Unauthorized</td><td>login failed</td></tr>\n<tr><td>404 Not Found</td><td>username 404ed on Scratch API</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#admin-object\">Admin</a> object</caption>\n<tr><td class=\"pre\">{\n  \"admin\": false\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"logout-all-sessions-endpoint\">Logout All Sessions Endpoint</h3>\n<p>Immediately invalidate all sessions under this username.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">POST</span> <code>/users/<span class=\"param\">{username}</span>/logout</code> <a href=\"#finish-logging-in-endpoint\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>The username to log out</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>successfully logged out</td></tr>\n<tr><td>400 Bad Request</td><td>username is invalid by Scratch rules</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n<tr><td>403 Forbidden</td><td>username does not match session</td></tr>\n<tr><td>404 Not Found</td><td>username 404ed on Scratch API</td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n</div></div>\n<h3 id=\"get-client-info-endpoint\">Get Client Info Endpoint</h3>\n<p>Get your client ID, token, and username. Returns a <a href=\"#user-object\">User</a> object on success.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/session</code> <a href=\"#finish-logging-in-endpoint\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns <a href=\"#user-object\">User</a> object</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n<tr><td>404 Not Found</td><td>this user is not registered with the API yet</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#user-object\">User</a> object</caption>\n<tr><td class=\"pre\">{\n  \"client_id\": 10114764,\n  \"token\": \"dd9410f80ba0...\",\n  \"username\": \"scratchusername\"\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"create-client-endpoint\">Create Client Endpoint</h3>\n<p>If this user does not own a client yet, create and return one.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">PUT</span> <code>/session</code> <a href=\"#finish-logging-in-endpoint\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns new <a href=\"#user-object\">User</a> object</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n<tr><td>409 Conflict</td><td>this user is already registered with the API</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#user-object\">User</a> object</caption>\n<tr><td class=\"pre\">{\n  \"client_id\": 10114764,\n  \"token\": \"dd9410f80ba0...\",\n  \"username\": \"scratchusername\"\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"reset-token-endpoint\">Reset Token Endpoint</h3>\n<p>If you suspect that your token has been compromised, reset it through this endpoint.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">PATCH</span> <code>/session</code> <a href=\"#finish-logging-in-endpoint\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns updated <a href=\"#user-object\">User</a> object</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#user-object\">User</a> object</caption>\n<tr><td class=\"pre\">{\n  \"client_id\": 10114764,\n  \"token\": \"dd9410f80ba0...\",\n  \"username\": \"scratchusername\"\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"delete-client-endpoint\">Delete Client Endpoint</h3>\n<p>Deregister from the API. Returns 204 No Content on success.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">DELETE</span> <code>/session</code> <a href=\"#finish-logging-in-endpoint\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>client was successfully deleted</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n</div></div>\n<h3 id=\"logout-session-endpoint\">Logout Session Endpoint</h3>\n<p>Invalidate this session ID.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">POST</span> <code>/session/logout</code> <a href=\"#finish-logging-in-endpoint\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>successfully logged out</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n</div></div>\n<h2 id=\"api-usage-endpoints\">API Usage Endpoints</h2>\n<p>These endpoints fetch API usage logs.</p>\n<h3 id=\"get-usage-logs-endpoint\">Get Usage Logs Endpoint</h3>\n<p>Get logs of who has used this API to verify what user. These logs are accessible by anyone to head off abuse.</p>\n<div class=\"endpoint\">\n<div class=\"method-path\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/usage</code> <a href=\"#authorization\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n</table>\n<table><caption>Query String Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>limit</td><td>integer</td><td>Return at most <code>limit</code> logs. <code>limit</code> cannot be greater than 500</td></tr>\n<tr><td>start</td><td>integer</td><td>Return logs that happened before (not including) the log with ID <code>start</code>. Usually used for getting the next page of logs. This does not have to be a valid ID (though it usually is)</td></tr>\n<tr><td>before</td><td>integer</td><td>Return logs that happened before (and including) the Unix epoch time <code>before</code></td></tr>\n<tr><td>end</td><td>integer</td><td>Return logs that happened after (not including) the log with ID <code>end</code></td></tr>\n<tr><td>after</td><td>integer</td><td>Return logs that happened after (and including) the Unix epoch time <code>after</code>. Usually used to limit returned logs by time</td></tr>\n<tr><td>client_id</td><td>integer</td><td>Only return logs with the client ID <code>client_id</code></td></tr>\n<tr><td>username</td><td>string</td><td>Only return logs with the username <code>username</code></td></tr>\n<tr><td>type</td><td>integer</td><td>Only return logs with the <a href=\"#log-types\">log type</a> <code>type</code></td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns list of <a href=\"#log-object\">Log</a> objects</td></tr>\n<tr><td>400 Bad Request</td><td><code>start</code> is after <code>end</code>, <code>before</code> is after <code>after</code>, <code>type</code> is invalid, or a query param was the wrong type</td></tr>\n<tr><td>403 Forbidden</td><td><code>limit</code> was greater than 500</td></tr>\n</table>\n<table><caption>Returns a list of <a href=\"#log-object\">Log</a> objects</caption>\n<tr><td class=\"pre\">{\n  \"log_id\": 123,\n  \"client_id\": 1234567890,\n  \"username\": \"scratchusername\",\n  \"log_time\": \"1566974952\",\n  \"log_type\": 1\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"get-usage-log-endpoint\">Get Usage Log Endpoint</h3>\n<p>Fetch the information for a single log entry.</p>\n<div class=\"endpoint\">\n<div class=\"method-path\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/usage/<span class=\"param\">{log ID}</span></code> <a href=\"#authorization\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>log ID</td><td>integer</td><td>ID of log entry to fetch</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns single <a href=\"#log-object\">Log</a> object</td></tr>\n<tr><td>404 Not Found</td><td>no log with such ID</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#log-object\">Log</a> object</caption>\n<tr><td class=\"pre\">{\n  \"log_id\": 123,\n  \"client_id\": 1234567890,\n  \"username\": \"scratchusername\",\n  \"log_time\": \"1566974952\",\n  \"log_type\": 1\n}</td></tr>\n</table>\n</div></div>\n<h2 id=\"administrative-endpoints\">Administrative Endpoints</h2>\n<p>The following endpoints can only be accessed by administrators.</p>\n<p>Administrators must be logged in with the <a href=\"#finish-logging-in-endpoint\">Finish Logging In endpoint</a> to access these endpoints.</p>\n<h2 id=\"ratelimit-endpoints\">Ratelimit Endpoints</h2>\n<p>These endpoints are to do with getting and setting ratelimits on the main API.</p>\n<h3 id=\"get-all-ratelimits-endpoint\">Get All Ratelimits Endpoint</h3>\n<p>Fetch all currently active ratelimits.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/admin/ratelimits</code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns list of <a href=\"#ratelimit-object\">Ratelimit</a> objects</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns a list of <a href=\"#ratelimit-object\">Ratelimit</a> objects</caption>\n<tr><td class=\"pre\">{\n  \"username\": \"scratchusername\",\n  \"ratelimit\": 30\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"get-single-ratelimit-endpoint\">Get Single Ratelimit Endpoint</h3>\n<p>Fetch ratelimits for a particular user.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/admin/ratelimits/<span class=\"param\">{username}</span></code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>Username to fetch ratelimits for</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns <a href=\"#ratelimit-object\">Ratelimit</a> object</td></tr>\n<tr><td>400 Bad Request</td><td>username invalid by Scratch standards</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n<tr><td>404 Not Found</td><td>no ratelimit set for that user</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#partialratelimit-object\">PartialRatelimit</a> object</caption>\n<tr><td class=\"pre\">{\n  \"ratelimit\": 30\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"modify-ratelimits-endpoint\">Modify Ratelimits Endpoint</h3>\n<p>Modify or set ratelimits for multiple users at once. Only users specified will modified; the rest will not be touched. Invalid entries are ignored.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">PATCH</span> <code>/admin/ratelimits</code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>success</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n<table><caption>Request body: a list of <a href=\"#ratelimit-object\">Ratelimit</a> objects</caption>\n<tr><td class=\"pre\">{\n  \"username\": \"scratchusername\",\n  \"ratelimit\": 30\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"modify-single-ratelimit-endpoint\">Modify Single Ratelimit Endpoint</h3>\n<p>Modify or set ratelimits for a specific user. Nonexistent users can be set preemptively.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">POST</span> <code>/admin/ratelimits/<span class=\"param\">{username}</span></code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>Username to set ratelimits for</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>success</td></tr>\n<tr><td>400 Bad Request</td><td>username invalid by Scratch standards</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n<table><caption>Request body: a <a href=\"#ratelimit-object\">Ratelimit</a> object</caption>\n<tr><td class=\"pre\">{\n  \"ratelimit\": 30\n}</td></tr>\n</table>\n</div></div>\n<h2 id=\"ban-endpoints\">Ban Endpoints</h2>\n<p>These endpoints are to do with getting and setting bans on the registration API.</p>\n<h3 id=\"get-all-bans-endpoint\">Get All Bans Endpoint</h3>\n<p>Fetch all currently active bans.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/admin/bans</code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns list of <a href=\"#Ban-object\">Ban</a> objects</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns a list of <a href=\"#ban-object\">Ban</a> objects</caption>\n<tr><td class=\"pre\">{\n  \"username\": \"scratchusername\",\n  \"expiry\": 1598537437\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"get-single-ban-endpoint\">Get Single Ban Endpoint</h3>\n<p>Fetch the active ban for a specific user, if any.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/admin/bans/<span class=\"param\">{username}</span></code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>Username to fetch ban for</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns <a href=\"#Ban-object\">Ban</a> object</td></tr>\n<tr><td>400 Bad Request</td><td>username invalid by Scratch standards</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n<tr><td>404 Not Found</td><td>no ban currently in force for that user</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#partialban-object\">PartialBan</a> object</caption>\n<tr><td class=\"pre\">{\n  \"expiry\": 1598537437\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"modify-bans-endpoint\">Modify Bans Endpoint</h3>\n<p>Modify or put multiple bans into force. Invalid entries are ignored.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">PATCH</span> <code>/admin/bans</code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>success</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n<table><caption>Request body: a list of <a href=\"#ban-object\">Ban</a> objects</caption>\n<tr><td class=\"pre\">{\n  \"username\": \"scratchusername\",\n  \"expiry\": 1598537437\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"modify-single-ban-endpoint\">Modify Single Ban Endpoint</h3>\n<p>Ban a user or modify their existing ban.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/admin/bans/<span class=\"param\">{username}</span></code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>Username to ban</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>success</td></tr>\n<tr><td>400 Bad Request</td><td>username invalid by Scratch standards</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n<table><caption>Request body: a <a href=\"#partialban-object\">PartialBan</a> object</caption>\n<tr><td class=\"pre\">{\n  \"expiry\": 1598537437\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"unban-endpoint\">Unban Endpoint</h3>\n<p>Unban a user. This is idempotent; unbanning the same user multiple times will unban them once (unless they are banned again).</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">DELETE</span> <code>/admin/bans/<span class=\"param\">{username}</span></code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>Username to unban</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>success</td></tr>\n<tr><td>400 Bad Request</td><td>username invalid by Scratch standards</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n</div></div>\n<h2 id=\"audit-log-endpoints\">Audit Log Endpoints</h2>\n<p>Admins' actions are recorded. Fetch those logs with these endpoints.</p>\n<h3 id=\"get-audit-logs-endpoint\">Get Audit Logs Endpoint</h3>\n<p>Get logs of who has used this API to perform what admin action. These logs are accessible only by administrators.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/admin/logs</code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n</table>\n<table><caption>Query String Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>limit</td><td>integer</td><td>Return at most <code>limit</code> logs. This can be arbitrarily large, but defaults to 100 and cannot be unlimited.</td></tr>\n<tr><td>start</td><td>integer</td><td>Return logs that happened before (not including) the log with ID <code>start</code>. Usually used for getting the next page of logs. This does not have to be a valid ID (though it usually is)</td></tr>\n<tr><td>before</td><td>integer</td><td>Return logs that happened before (and including) the Unix epoch time <code>before</code></td></tr>\n<tr><td>end</td><td>integer</td><td>Return logs that happened after (not including) the log with ID <code>end</code></td></tr>\n<tr><td>after</td><td>integer</td><td>Return logs that happened after (and including) the Unix epoch time <code>after</code>. Usually used to limit returned logs by time</td></tr>\n<tr><td>username</td><td>string</td><td>Only return logs with the username <code>username</code></td></tr>\n<tr><td>type</td><td>integer</td><td>Only return logs with the <a href=\"#audit-log-types\">audit log type</a> <code>type</code></td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns list of <a href=\"#auditlog-object\">AuditLog</a> objects</td></tr>\n<tr><td>400 Bad Request</td><td><code>start</code> is after <code>end</code>, <code>before</code> is after <code>after</code>, <code>type</code> is invalid, or a query param was the wrong type</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns a list of <a href=\"#auditlog-object\">AuditLog</a> objects</caption>\n<tr><td class=\"pre\">{\n  \"id\": 123,\n  \"username\": \"actionperformer\",\n  \"time\": \"1566974952\",\n  \"type\": 1,\n  \"data\": \"{\\\"username\\\": \\\"ScratchUsername\\\", \\\"expiry\\\": 1234567890}\"\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"get-audit-log-endpoint\">Get Audit Log Endpoint</h3>\n<p>Fetch the information for a single audit log entry.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/admin/logs/<span class=\"param\">{log ID}</span></code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>log ID</td><td>integer</td><td>ID of audit log entry to fetch</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns single <a href=\"#auditlog-object\">Log</a> object</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n<tr><td>404 Not Found</td><td>no log with such ID</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#auditlog-object\">AuditLog</a> object</caption>\n<tr><td class=\"pre\">{\n  \"id\": 123,\n  \"username\": \"actionperformer\",\n  \"time\": \"1566974952\",\n  \"type\": 1,\n  \"data\": \"{\\\"username\\\": \\\"ScratchUsername\\\", \\\"expiry\\\": 1234567890}\"\n}</td></tr>\n</table>\n</div></div>\n<h2 id=\"miscellaneous-admin-tools\">Miscellaneous Admin Tools</h2>\n<p>Admins have a few other tools available as well.</p>\n<h3 id=\"get-client-info-endpoint\">Get Client Info Endpoint</h3>\n<p>Fetch information about a certain client. The token is partially censored.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/admin/client/<span class=\"param\">{client ID}</span></code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>client ID</td><td>integer</td><td>ID of client whose info is to be fetched</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns <a href=\"#client-object\">Client</a> object</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n<tr><td>404 Not Found</td><td>no client with that ID</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#client-object\">Client</a> object</caption>\n<tr><td class=\"pre\">{\n  \"client_id\": 1234567890,\n  \"token\": \"EaFfBJdC******...\",\n  \"username\": \"scratchusername\",\n  \"ratelimit\": 30\n}</td></tr>\n</table>\n</div></div>\n<h2 id=\"objects\">Objects</h2>\n<p>Various endpoints have defined return types or body structures. They are documented below.</p>\n<h3 id=\"verification-object\">Verification Object</h3>\n<p>Holds data related to verifying a user on Scratch.</p>\n<table><caption>Verification Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>code</td><td>string</td><td>verification code to post</td></tr>\n<tr><td>username</td><td>string</td><td>username being verified</td></tr>\n</table>\n<h3 id=\"admin-object\">Admin Object</h3>\n<p>Indicates whether the user who just <a href=\"#finish-logging-in-endpoint\">finished logging in</a> is an admin on the site or not.</p>\n<table><caption>Admin Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>admin</td><td>boolean</td><td>whether the user is an admin</td></tr>\n</table>\n<h3 id=\"user-object\">User Object</h3>\n<p>Holds data that a client needs to access the API.</p>\n<table><caption>User Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>client_id</td><td>integer</td><td>client ID</td></tr>\n<tr><td>token</td><td>string</td><td>API token for client</td></tr>\n<tr><td>username</td><td>string</td><td>username of client</td></tr>\n</table>\n<h3 id=\"log-object\">Log Object</h3>\n<p>Holds log data for a verification.</p>\n<table><caption>Log Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>log_id</td><td>integer</td><td>log ID</td></tr>\n<tr><td>client_id</td><td>integer</td><td>client ID responsible for this log</td></tr>\n<tr><td>username</td><td>string</td><td>username being verified</td></tr>\n<tr><td>log_time</td><td>integer</td><td>Unix epoch time of log</td></tr>\n<tr><td>log_type</td><td>integer</td><td><a href=\"#log-types\">log type</a></td></tr>\n</table>\n<h3 id=\"ratelimit-object\">Ratelimit Object</h3>\n<p>Holds data about a user's ratelimit.</p>\n<table><caption>Ratelimit Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>username</td><td>string</td><td>username being ratelimited</td></tr>\n<tr><td>ratelimit</td><td>integer</td><td>how many requests they can make per minute</td></tr>\n</table>\n<h3 id=\"partialratelimit-object\">PartialRatelimit Object</h3>\n<p>Holds data about a user's ratelimit, without their name</p>\n<table><caption>PartialRatelimit Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>ratelimit</td><td>integer</td><td>how many requests they can make per minute</td></tr>\n</table>\n<h3 id=\"ban-object\">Ban Object</h3>\n<p>Holds data about a user's ban status.</p>\n<table><caption>Ban Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>username</td><td>string</td><td>username being banned</td></tr>\n<tr><td>expiry</td><td>integer?</td><td>Unix timestamp when their ban expires. <code>null</code> means a permanent ban.</td></tr>\n</table>\n<h3 id=\"partialban-object\">PartialBan Object</h3>\n<p>Holds data about a user's ban status, without their name.</p>\n<table><caption>PartialBan Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>expiry</td><td>integer?</td><td>Unix epoch time when their ban expires. <code>null</code> means a permanent ban.</td></tr>\n</table>\n<h3 id=\"auditlog-object\">AuditLog Object</h3>\n<p>Holds log data for an admin action.</p>\n<table><caption>AuditLog Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>id</td><td>integer</td><td>log ID</td></tr>\n<tr><td>username</td><td>string</td><td>username of action performer</td></tr>\n<tr><td>time</td><td>integer</td><td>Unix epoch time of log</td></tr>\n<tr><td>type</td><td>integer</td><td><a href=\"#audit-log-types\">audit log type</a></td></tr>\n<tr><td>data</td><td>string</td><td>stringified JSON of action data</td></tr>\n</table>\n<h3 id=\"client-object\">Client Object</h3>\n<p>Holds data about a client.</p>\n<table><caption>Client Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>client_id</td><td>integer</td><td>client ID</td></tr>\n<tr><td>token</td><td>string</td><td>partially censored token of client</td></tr>\n<tr><td>username</td><td>string</td><td>username of owner</td></tr>\n<tr><td>ratelimit</td><td>integer?</td><td>how many requests this client can make per minute. Can be <code>null</code> if this client has never been used yet.</td></tr>\n</table>\n<h2 id=\"log-types\">Log Types</h2>\n<p>Logs can have four types:</p>\n<ul>\n<li><code>1</code>: verification started</li>\n<li><code>2</code>: verification succeeded</li>\n<li><code>3</code>: verification failed</li>\n<li><code>4</code>: verification invalidated</li>\n</ul>\n<h2 id=\"audit-log-types\">Audit Log Types</h2>\n<p>Audit logs can have three types:</p>\n<ul>\n<li><code>1</code>: user banned or user ban modified</li>\n<li><code>2</code>: user ratelimit modified</li>\n<li><code>3</code>: user unbanned</li>\n</ul>\n</div><div id=\"contents\"><h1>Navigation</h1>\n<div><a href=\"#api-reference\">API&nbsp;Reference</a>\n<ul>\n<li>\n<div><a href=\"#authorization\">Authorization</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#api-endpoints\">API&nbsp;Endpoints</a>\n<ul>\n<li>\n<div><a href=\"#start/renew-verification-endpoint\">Start/Renew&nbsp;Verification&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#finish-verification-endpoint\">Finish&nbsp;Verification&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#invalidate-verification-endpoint\">Invalidate&nbsp;Verification&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<div><a href=\"#api-registration-endpoints\">API&nbsp;Registration&nbsp;Endpoints</a>\n<ul>\n<li>\n<div><a href=\"#start-logging-in-endpoint\">Start&nbsp;Logging&nbsp;In&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#finish-logging-in-endpoint\">Finish&nbsp;Logging&nbsp;In&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#logout-all-sessions-endpoint\">Logout&nbsp;All&nbsp;Sessions&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#get-client-info-endpoint\">Get&nbsp;Client&nbsp;Info&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#create-client-endpoint\">Create&nbsp;Client&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#reset-token-endpoint\">Reset&nbsp;Token&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#delete-client-endpoint\">Delete&nbsp;Client&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#logout-session-endpoint\">Logout&nbsp;Session&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<div><a href=\"#api-usage-endpoints\">API&nbsp;Usage&nbsp;Endpoints</a>\n<ul>\n<li>\n<div><a href=\"#get-usage-logs-endpoint\">Get&nbsp;Usage&nbsp;Logs&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#get-usage-log-endpoint\">Get&nbsp;Usage&nbsp;Log&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<div><a href=\"#administrative-endpoints\">Administrative&nbsp;Endpoints</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#ratelimit-endpoints\">Ratelimit&nbsp;Endpoints</a>\n<ul>\n<li>\n<div><a href=\"#get-all-ratelimits-endpoint\">Get&nbsp;All&nbsp;Ratelimits&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#get-single-ratelimit-endpoint\">Get&nbsp;Single&nbsp;Ratelimit&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#modify-ratelimits-endpoint\">Modify&nbsp;Ratelimits&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#modify-single-ratelimit-endpoint\">Modify&nbsp;Single&nbsp;Ratelimit&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<div><a href=\"#ban-endpoints\">Ban&nbsp;Endpoints</a>\n<ul>\n<li>\n<div><a href=\"#get-all-bans-endpoint\">Get&nbsp;All&nbsp;Bans&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#get-single-ban-endpoint\">Get&nbsp;Single&nbsp;Ban&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#modify-bans-endpoint\">Modify&nbsp;Bans&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#modify-single-ban-endpoint\">Modify&nbsp;Single&nbsp;Ban&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#unban-endpoint\">Unban&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<div><a href=\"#audit-log-endpoints\">Audit&nbsp;Log&nbsp;Endpoints</a>\n<ul>\n<li>\n<div><a href=\"#get-audit-logs-endpoint\">Get&nbsp;Audit&nbsp;Logs&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#get-audit-log-endpoint\">Get&nbsp;Audit&nbsp;Log&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<div><a href=\"#miscellaneous-admin-tools\">Miscellaneous&nbsp;Admin&nbsp;Tools</a>\n<ul>\n<li>\n<div><a href=\"#get-client-info-endpoint\">Get&nbsp;Client&nbsp;Info&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<div><a href=\"#objects\">Objects</a>\n<ul>\n<li>\n<div><a href=\"#verification-object\">Verification&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#admin-object\">Admin&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#user-object\">User&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#log-object\">Log&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#ratelimit-object\">Ratelimit&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#partialratelimit-object\">PartialRatelimit&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#ban-object\">Ban&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#partialban-object\">PartialBan&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#auditlog-object\">AuditLog&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#client-object\">Client&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<div><a href=\"#log-types\">Log&nbsp;Types</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#audit-log-types\">Audit&nbsp;Log&nbsp;Types</a>\n<ul>\n</ul>\n</li>\n</ul>\n<div><a href=\"index.html\">Welcome&nbsp;to&nbsp;ScratchVerifier</a></div>\n<div><a href=\"usage.html\">ScratchVerifier&nbsp;Usage</a></div>\n<div><a href=\"registration.html\">ScratchVerifier&nbsp;Registration</a></div>\n</div></body>\n</html>\n"], "fixing_code": ["import os\nimport time\nimport json\nfrom secrets import token_bytes, token_hex, randbits\nfrom hashlib import sha256\nimport asyncio\nimport aiosqlite as sql\nfrom responses import *\n\nclass Database:\n    def __init__(self, session):\n        loop = asyncio.get_event_loop()\n        # lock to prevent race conditions when SELECT then fetchone\n        self.lock = asyncio.Lock(loop=loop)\n        self.dbw = loop.run_until_complete(sql.connect(DATABASE_FILENAME))\n        self.dbw.row_factory = sql.Row\n        self.db = loop.run_until_complete(self.dbw.cursor())\n        with open(os.path.join(os.path.dirname(__file__), 'sql',\n                               'startup.sql')) as startup:\n            loop.run_until_complete(self.db.executescript(startup.read()))\n        self.session = session\n\n    async def close(self):\n        await self.dbw.commit()\n        await self.dbw.close()\n\n    ### TABLE: clients ###\n\n    async def client_matches(self, client_id, token):\n        async with self.lock:\n            await self.db.execute('SELECT client_id FROM scratchverifier_clients \\\nWHERE client_id=? AND token=?', (client_id, token))\n            if (await self.db.fetchone()):\n                return True\n        return False\n\n    ### TABLE: clients and sessions ###\n\n    async def username_from_session(self, session_id):\n        if session_id == 0: # 0 means debug mode\n            return 'kenny2scratch'\n        async with self.lock:\n            await self.db.execute('SELECT username FROM scratchverifier_sessions \\\nWHERE session_id=?', (session_id,))\n            row = await self.db.fetchone()\n        if row is None:\n            return None\n        return row[0]\n\n    async def new_client(self, session_id):\n        if session_id == 0: # 0 means debug mode\n            # don't create a client, because other funcs return a dummy one\n            # when under debug mode\n            return {'client_id': 0, 'username': 'kenny2scratch',\n                    'token': 'This client is newly created.'}\n        username = await self.username_from_session(session_id)\n        if username is None:\n            return None\n        async with self.session.get(USERS_API.format(username)) as resp:\n            assert resp.status == 200\n            data = await resp.json()\n        client_id = data['id']\n        token = token_hex(32)\n        await self.db.execute('INSERT INTO scratchverifier_clients (client_id, \\\ntoken, username) VALUES (?, ?, ?)', (client_id, token, username))\n        return {'client_id': client_id, 'token': token, 'username': username}\n\n    async def get_client(self, session_id):\n        if session_id == 0: # 0 means debug mode\n            return {'client_id': 0, 'username': 'kenny2scratch',\n                    'token': 'This is an example token that can be censored.'}\n        username = await self.username_from_session(session_id)\n        if username is None:\n            return None\n        async with self.lock:\n            await self.db.execute('SELECT * FROM scratchverifier_clients \\\nWHERE username=?', (username,))\n            row = await self.db.fetchone()\n        if row is None:\n            return None\n        return dict(row)\n\n    async def get_client_info(self, client_id):\n        if client_id == 0: # 0 means debug mode\n            return {'client_id': 0, 'username': 'kenny2scratch',\n                    'token': 'This is an example token that can be censored.'}\n        async with self.lock:\n            await self.db.execute('SELECT * FROM scratchverifier_clients \\\nWHERE client_id=?', (client_id,))\n            row = await self.db.fetchone()\n        if row is None:\n            return None\n        return dict(row)\n\n    async def reset_token(self, session_id):\n        if session_id == 0: # 0 means debug mode\n            return {'client_id': 0, 'username': 'kenny2scratch',\n                    'token': 'Yes, the token was reset.'}\n        username = await self.username_from_session(session_id)\n        if username is None:\n            return None\n        await self.db.execute('UPDATE scratchverifier_clients SET token=? \\\nWHERE username=?', (token_hex(32), username))\n        return self.get_client(session_id)\n\n    async def del_client(self, session_id):\n        if session_id == 0: # 0 means debug mode\n            return\n        username = await self.username_from_session(session_id)\n        if username is None:\n            return\n        await self.db.execute('DELETE FROM scratchverifier_clients \\\nWHERE username=?', (username,))\n\n    ### TABLE: sessions ###\n\n    async def new_session(self, username):\n        while 1:\n            session_id = randbits(32)\n            async with self.lock:\n                await self.db.execute('SELECT session_id FROM \\\nscratchverifier_sessions WHERE session_id=?', (session_id,))\n                if (await self.db.fetchone()) is None:\n                    break\n        await self.db.execute('INSERT INTO scratchverifier_sessions \\\n(session_id, expiry, username) VALUES (?, ?, ?)', (\n            session_id,\n            int(time.time()) + SESSION_EXPIRY,\n            username\n        ))\n        await self.db.execute('DELETE FROM scratchverifier_sessions WHERE \\\nexpiry<=?', (int(time.time()),))\n        return session_id\n\n    async def get_expired(self, session_id):\n        async with self.lock:\n            await self.db.execute('SELECT expiry FROM scratchverifier_sessions \\\nWHERE session_id=?', (session_id,))\n            expiry = await self.db.fetchone()\n        if expiry is None:\n            # \"expired\" if session doesn't exist in the first place\n            return True\n        expiry = expiry[0]\n        if time.time() > expiry:\n            await self.db.execute('DELETE FROM scratchverifier_sessions \\\nWHERE session_id=?', (session_id,))\n            return True\n        return False\n\n    async def logout(self, session_id):\n        await self.db.execute('DELETE FROM scratchverifier_sessions \\\nWHERE session_id=?', (session_id,))\n\n    async def logout_user(self, username):\n        await self.db.execute('DELETE FROM scratchverifier_sessions \\\nWHERE username=?', (username,))\n\n    ### TABLE: usage ###\n\n    async def start_verification(self, client_id, username):\n        async with self.lock:\n            await self.db.execute('SELECT code FROM scratchverifier_usage WHERE \\\nclient_id=? AND username=?', (client_id, username))\n            row = await self.db.fetchone()\n        code = sha256(\n            str(client_id).encode()\n            + str(time.time()).encode()\n            + username.encode()\n            + token_bytes()\n        # 0->A, 1->B, etc, to avoid Scratch's phone number censor\n        ).hexdigest().translate({ord('0') + i: ord('A') + i for i in range(10)})\n        if row is not None:\n            await self.db.execute(\n                'UPDATE scratchverifier_usage SET expiry=?, code=? \\\nWHERE client_id=? AND username=?', (int(time.time()) + VERIFY_EXPIRY,\n                                    code, client_id, username))\n            return code\n        await self.db.execute('INSERT INTO scratchverifier_usage (client_id, \\\ncode, username, expiry) VALUES (?, ?, ?, ?)', (client_id, code, username,\n                               int(time.time() + VERIFY_EXPIRY)))\n        await self.db.execute('INSERT INTO scratchverifier_logs (client_id, \\\nusername, log_time, log_type) VALUES (?, ?, ?, ?)', (client_id, username,\n                                                     int(time.time()), 1))\n        await self.db.execute('DELETE FROM scratchverifier_usage WHERE \\\nexpiry<=?', (int(time.time()),))\n        return code\n\n    async def get_code(self, client_id, username):\n        async with self.lock:\n            await self.db.execute('SELECT code, expiry FROM scratchverifier_usage \\\nWHERE client_id=? AND username=?', (client_id, username))\n            row = await self.db.fetchone()\n        if row is None:\n            return None\n        if time.time() > row['expiry']:\n            await self.end_verification(client_id, username, False)\n            return None\n        return row['code']\n\n    async def end_verification(self, client_id, username, succ=True):\n        await self.db.execute('DELETE FROM scratchverifier_usage WHERE \\\nclient_id=? AND username=?', (client_id, username))\n        await self.db.execute('INSERT INTO scratchverifier_logs (client_id, \\\nusername, log_time, log_type) \\\nVALUES (?, ?, ?, ?)', (client_id, username, int(time.time()), 3 - succ))\n\n    ### TABLE: logs solely ###\n\n    async def get_logs(self, table='logs', **params):\n        query = f'SELECT * FROM scratchverifier_{table} WHERE 1=1'\n        id_col = 'log_id' if table == 'logs' else 'id'\n        time_col = 'log_time' if table == 'logs' else 'time'\n        type_col = 'log_type' if table == 'logs' else 'type'\n        if 'start' in params:\n            query += f' AND {id_col}<:start'\n        if 'before' in params:\n            query += f' AND {time_col}<=:before'\n        if 'end' in params:\n            query += f' AND {id_col}>:end'\n        if 'after' in params:\n            query += f' AND {time_col}>=:after'\n        if 'client_id' in params:\n            query += ' AND client_id=:client_id'\n        if 'username' in params:\n            query += ' AND username=:username'\n        if 'type' in params:\n            query += f' AND {type_col}=:type'\n        query += f' ORDER BY {id_col} DESC LIMIT :limit'\n        for k, v in params.items():\n            if k in {'start', 'before', 'end', 'after', 'client_id', 'type'}:\n                params[k] = int(v)\n        params['limit'] = int(params['limit'])\n        async with self.lock:\n            await self.db.execute(query, params)\n            rows = await self.db.fetchall()\n        return [dict(i) for i in rows]\n\n    async def get_log(self, log_id, table='logs'):\n        id_col = 'log_id' if table == 'logs' else 'id'\n        async with self.lock:\n            await self.db.execute(f'SELECT * FROM scratchverifier_{table} \\\nWHERE {id_col}=?', (log_id,))\n            row = await self.db.fetchone()\n        if row is None:\n            return None\n        return dict(row)\n\n    ### TABLE: ratelimits ###\n\n    async def get_ratelimits(self):\n        async with self.lock:\n            await self.db.execute('SELECT * FROM scratchverifier_ratelimits')\n            rows = await self.db.fetchall()\n        return [dict(i) for i in rows]\n\n    async def get_ratelimit(self, username):\n        async with self.lock:\n            await self.db.execute('SELECT * FROM scratchverifier_ratelimits \\\nWHERE username=?', (username,))\n            row = await self.db.fetchone()\n        if row is None:\n            return None\n        return row\n\n    async def set_ratelimits(self, data, performer):\n        await self.db.executemany('INSERT OR REPLACE INTO \\\nscratchverifier_ratelimits (username, ratelimit) \\\nVALUES (:username, :ratelimit)', data)\n        if performer is not None:\n            await self.db.executemany(\n                'INSERT INTO scratchverifier_auditlogs \\\n    (username, time, type, data) VALUES \\\n    (:username, :time, :type, :data)',\n                ({\n                    'username': performer,\n                    'time': int(time.time()),\n                    'type': 2, # ratelimit update\n                    'data': json.dumps(i)\n                } for i in data)\n            )\n\n    ### TABLE: bans ###\n\n    async def get_bans(self):\n        async with self.lock:\n            await self.db.execute('SELECT * FROM scratchverifier_bans')\n            rows = await self.db.fetchall()\n        return [dict(i) for i in rows]\n\n    async def get_ban(self, username):\n        async with self.lock:\n            await self.db.execute('SELECT * FROM scratchverifier_bans \\\nWHERE username=?', (username,))\n            row = await self.db.fetchone()\n        if row is None:\n            return None\n        if row['expiry'] is not None and row['expiry'] < time.time():\n            # ban has expired, delete it and return no ban\n            await self.db.execute('DELETE FROM scratchverifier_bans \\\nWHERE username=?', (username,))\n            return None\n        return row\n\n    async def set_bans(self, data, performer):\n        await self.db.executemany('INSERT OR REPLACE INTO scratchverifier_bans \\\n(username, expiry) VALUES (:username, :expiry)', data)\n        await self.db.executemany('DELETE FROM scratchverifier_clients \\\nWHERE username=?', ((i['username'],) for i in data))\n        await self.db.executemany('DELETE FROM scratchverifier_sessions \\\nWHERE username=?', ((i['username'],) for i in data))\n        await self.db.executemany(\n            'INSERT INTO scratchverifier_auditlogs \\\n(username, time, type, data) VALUES \\\n(:username, :time, :type, :data)',\n            ({\n                'username': performer,\n                'time': int(time.time()),\n                'type': 1, # ban\n                'data': json.dumps(i)\n            } for i in data)\n        )\n\n    async def del_ban(self, username, performer):\n        await self.db.execute('DELETE FROM scratchverifier_bans \\\nWHERE username=?', (username,))\n        await self.db.execute(\n            'INSERT INTO scratchverifier_auditlogs \\\n(username, time, type, data) VALUES \\\n(:username, :time, :type, :data)',\n            {\n                'username': performer,\n                'time': int(time.time()),\n                'type': 3, # unban\n                'data': json.dumps({'username': username})\n            }\n        )\n", "{\n  \"index.html\": [\n    {\n      \"type\": \"intro\",\n      \"title\": \"Welcome to ScratchVerifier\",\n      \"paragraphs\": [\"Verify Scratch accounts as genuine, for use in authorization or identification.\"]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Introduction\",\n      \"paragraphs\": [\n        \"You've found the documentation for ScratchVerifier's API! These pages show you how to use ScratchVerifier for anything you might be making that needs to know who somebody is on Scratch.\",\n        \"This documentation is <a href=\\\"https://github.com/ScratchVerifier/ScratchVerifier/tree/develop/docs\\\">on GitHub</a> so feel free to submit an issue for any corrections or improvements!\"\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Bugs\",\n      \"paragraphs\": [\n        \"If you find something that you think is a bug, report it <a href=\\\"https://github.com/ScratchVerifier/ScratchVerifier\\\">on GitHub</a> and we'll be sure to check it out.\"\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Getting Started\",\n      \"paragraphs\": [\n        \"See the <a href=\\\"usage.html\\\">usage walkthrough</a> to get started!\"\n      ]\n    }\n  ],\n  \"reference.html\": [\n    {\n      \"type\": \"intro\",\n      \"title\": \"API Reference\",\n      \"paragraphs\": [\n        \"The ScratchVerifier API is a HTTP/REST API for all operations.\",\n        \"<b>API Base URL</b>: <a href=\\\"https://scratchverifier.ddns.net\\\">https://scratchverifier.ddns.net</a>\"\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Authorization\",\n      \"paragraphs\": [\n        \"Authorization is done using <a href=\\\"https://tools.ietf.org/html/rfc7617\\\">Basic HTTP Authorization</a>, using your client ID as the username and token as the password.\",\n        {\n          \"type\": \"headedpre\",\n          \"heading\": \"Example Authorization Header\",\n          \"text\": \"Authorization: Basic MTAxMTQ3NjQ6NDY5MDI1YzYxM2RhNDMwYmEzMTE0NzIwY...==\"\n        }\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"API Endpoints\",\n      \"paragraphs\": [\n        \"The simplicity of this API is such that there are only three total endpoints for its ultimate purpose.\"\n      ]\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Start/Renew Verification\",\n      \"desc\": \"Request a new verification code for a user. Only one code per user per client - if this endpoint is used again before the <a href=\\\"#finish-verification-endpoint\\\">Finish Verification</a> endpoint is used, this will generate a new code and reset the 30-minute expiry, returning the new code instead.\",\n      \"method\": \"PUT\",\n      \"path\": \"/verify/{username}\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"The username to verify\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns <a href=\\\"#verification-object\\\">Verification</a> object\",\n        \"400 Bad Request\": \"username is invalid by Scratch rules\",\n        \"401 Unauthorized\": \"missing/invalid <a href=\\\"#authorization\\\">authorization</a>\"\n      },\n      \"auth\": true,\n      \"returns\": {\n        \"type\": \"Verification\",\n        \"code\": \"EJAAFcffGJeFDCGdJB...\",\n        \"username\": \"scratchusername\"\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Finish Verification\",\n      \"desc\": \"Confirm verification for a user. Returns 204 No Content on successful verification, 403 Forbidden on failure.\",\n      \"method\": \"POST\",\n      \"path\": \"/verify/{username}\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"The username to verify\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"204 No Content\": \"verification successful\",\n        \"400 Bad Request\": \"username is invalid by Scratch rules\",\n        \"401 Unauthorized\": \"missing/invalid <a href=\\\"#authorization\\\">authorization</a>\",\n        \"403 Forbidden\": \"verification unsuccessful\",\n        \"404 Not Found\": \"username 404ed on Scratch API OR user is not currently being verified\"\n      },\n      \"auth\": true,\n      \"returns\": null\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Invalidate Verification\",\n      \"desc\": \"Cancel verifying a user.\",\n      \"method\": \"DELETE\",\n      \"path\": \"/verify/{username}\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"The username to give up on verifying\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"204 No Content\": \"invalidation successful\",\n        \"400 Bad Request\": \"username is invalid by Scratch rules\",\n        \"401 Unauthorized\": \"missing/invalid <a href=\\\"#authorization\\\">authorization</a>\"\n      },\n      \"auth\": true,\n      \"returns\": null\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"API Registration Endpoints\",\n      \"paragraphs\": [\n        \"These endpoints are to do with registering a client with the API.\"\n      ]\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Start Logging In\",\n      \"desc\": \"Begin the process of logging in to the registration API.\",\n      \"method\": \"POST\",\n      \"path\": \"/users/{username}/login\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"The username to log in with\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns <a href=\\\"#verification-object\\\">Verification</a> object\",\n        \"400 Bad Request\": \"username is invalid by Scratch rules\",\n        \"403 Forbidden\": \"this username is banned from registering\"\n      },\n      \"returns\": {\n        \"type\": \"Verification\",\n        \"code\": \"EJAAFcffGJeFDCGdJB...\",\n        \"username\": \"scratchusername\"\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Finish Logging In\",\n      \"desc\": \"Finish the process of logging in. If successful, response contains a <code>session</code> cookie that must be set for all endpoints listed after this one to work. Returns an <a href=\\\"#admin-object\\\">Admin</a> object on success.\",\n      \"method\": \"POST\",\n      \"path\": \"/users/{username}/finish-login\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"The username to log in with\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns <a href=\\\"#admin-object\\\">Admin</a> object\",\n        \"400 Bad Request\": \"username is invalid by Scratch rules\",\n        \"401 Unauthorized\": \"login failed\",\n        \"404 Not Found\": \"username 404ed on Scratch API\"\n      },\n      \"returns\": {\n        \"type\": \"Admin\",\n        \"admin\": false\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Logout All Sessions\",\n      \"desc\": \"Immediately invalidate all sessions under this username.\",\n      \"method\": \"POST\",\n      \"path\": \"/users/{username}/logout\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"The username to log out\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"204 No Content\": \"successfully logged out\",\n        \"400 Bad Request\": \"username is invalid by Scratch rules\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\",\n        \"403 Forbidden\": \"username does not match session\",\n        \"404 Not Found\": \"username 404ed on Scratch API\"\n      },\n      \"auth\": \"finish-logging-in-endpoint\",\n      \"returns\": null\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get Client Info\",\n      \"desc\": \"Get your client ID, token, and username. Returns a <a href=\\\"#user-object\\\">User</a> object on success.\",\n      \"method\": \"GET\",\n      \"path\": \"/session\",\n      \"params\": {},\n      \"http\": {\n        \"200 OK\": \"returns <a href=\\\"#user-object\\\">User</a> object\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\",\n        \"404 Not Found\": \"this user is not registered with the API yet\"\n      },\n      \"auth\": \"finish-logging-in-endpoint\",\n      \"returns\": {\n        \"type\": \"User\",\n        \"client_id\": 10114764,\n        \"token\": \"dd9410f80ba0...\",\n        \"username\": \"scratchusername\"\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Create Client\",\n      \"desc\": \"If this user does not own a client yet, create and return one.\",\n      \"method\": \"PUT\",\n      \"path\": \"/session\",\n      \"params\": {},\n      \"http\": {\n        \"200 OK\": \"returns new <a href=\\\"#user-object\\\">User</a> object\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\",\n        \"409 Conflict\": \"this user is already registered with the API\"\n      },\n      \"auth\": \"finish-logging-in-endpoint\",\n      \"returns\": {\n        \"type\": \"User\",\n        \"client_id\": 10114764,\n        \"token\": \"dd9410f80ba0...\",\n        \"username\": \"scratchusername\"\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Reset Token\",\n      \"desc\": \"If you suspect that your token has been compromised, reset it through this endpoint.\",\n      \"method\": \"PATCH\",\n      \"path\": \"/session\",\n      \"params\": {},\n      \"http\": {\n        \"200 OK\": \"returns updated <a href=\\\"#user-object\\\">User</a> object\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"finish-logging-in-endpoint\",\n      \"returns\": {\n        \"type\": \"User\",\n        \"client_id\": 10114764,\n        \"token\": \"dd9410f80ba0...\",\n        \"username\": \"scratchusername\"\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Delete Client\",\n      \"desc\": \"Deregister from the API. Returns 204 No Content on success.\",\n      \"method\": \"DELETE\",\n      \"path\": \"/session\",\n      \"params\": {},\n      \"http\": {\n        \"204 No Content\": \"client was successfully deleted\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"finish-logging-in-endpoint\",\n      \"returns\": null\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Logout Session\",\n      \"desc\": \"Invalidate this session ID.\",\n      \"method\": \"POST\",\n      \"path\": \"/session/logout\",\n      \"params\": {},\n      \"http\": {\n        \"204 No Content\": \"successfully logged out\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"finish-logging-in-endpoint\",\n      \"returns\": null\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"API Usage Endpoints\",\n      \"paragraphs\": [\n        \"These endpoints fetch API usage logs.\"\n      ]\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get Usage Logs\",\n      \"desc\": \"Get logs of who has used this API to verify what user. These logs are accessible by anyone to head off abuse.\",\n      \"method\": \"GET\",\n      \"path\": \"/usage\",\n      \"params\": {\n        \"limit\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return at most <code>limit</code> logs. <code>limit</code> cannot be greater than 500\",\n          \"query\": true\n        },\n        \"start\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return logs that happened before (not including) the log with ID <code>start</code>. Usually used for getting the next page of logs. This does not have to be a valid ID (though it usually is)\",\n          \"query\": true\n        },\n        \"before\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return logs that happened before (and including) the Unix epoch time <code>before</code>\",\n          \"query\": true\n        },\n        \"end\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return logs that happened after (not including) the log with ID <code>end</code>\",\n          \"query\": true\n        },\n        \"after\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return logs that happened after (and including) the Unix epoch time <code>after</code>. Usually used to limit returned logs by time\",\n          \"query\": true\n        },\n        \"client_id\": {\n          \"type\": \"integer\",\n          \"desc\": \"Only return logs with the client ID <code>client_id</code>\",\n          \"query\": true\n        },\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"Only return logs with the username <code>username</code>\",\n          \"query\": true\n        },\n        \"type\": {\n          \"type\": \"integer\",\n          \"desc\": \"Only return logs with the <a href=\\\"#log-types\\\">log type</a> <code>type</code>\",\n          \"query\": true\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns list of <a href=\\\"#log-object\\\">Log</a> objects\",\n        \"400 Bad Request\": \"<code>start</code> is after <code>end</code>, <code>before</code> is after <code>after</code>, <code>type</code> is invalid, or a query param was the wrong type\",\n        \"403 Forbidden\": \"<code>limit</code> was greater than 500\"\n      },\n      \"returns\": {\n        \"type\": \"Log[]\",\n        \"log_id\": 123,\n        \"client_id\": 1234567890,\n        \"username\": \"scratchusername\",\n        \"log_time\": \"1566974952\",\n        \"log_type\": 1\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get Usage Log\",\n      \"desc\": \"Fetch the information for a single log entry.\",\n      \"method\": \"GET\",\n      \"path\": \"/usage/{log ID}\",\n      \"params\": {\n        \"log ID\": {\n          \"type\": \"integer\",\n          \"desc\": \"ID of log entry to fetch\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns single <a href=\\\"#log-object\\\">Log</a> object\",\n        \"404 Not Found\": \"no log with such ID\"\n      },\n      \"returns\": {\n        \"type\": \"Log\",\n        \"log_id\": 123,\n        \"client_id\": 1234567890,\n        \"username\": \"scratchusername\",\n        \"log_time\": \"1566974952\",\n        \"log_type\": 1\n      }\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Administrative Endpoints\",\n      \"paragraphs\": [\n        \"The following endpoints can only be accessed by administrators.\",\n        \"Administrators must be logged in with the <a href=\\\"#finish-logging-in-endpoint\\\">Finish Logging In endpoint</a> to access these endpoints.\"\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Ratelimit Endpoints\",\n      \"paragraphs\": [\n        \"These endpoints are to do with getting and setting ratelimits on the main API.\"\n      ]\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get All Ratelimits\",\n      \"desc\": \"Fetch all currently active ratelimits.\",\n      \"method\": \"GET\",\n      \"path\": \"/admin/ratelimits\",\n      \"params\": {},\n      \"http\": {\n        \"200 OK\": \"returns list of <a href=\\\"#ratelimit-object\\\">Ratelimit</a> objects\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": {\n        \"type\": \"Ratelimit[]\",\n        \"username\": \"scratchusername\",\n        \"ratelimit\": 30\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get Single Ratelimit\",\n      \"desc\": \"Fetch ratelimits for a particular user.\",\n      \"method\": \"GET\",\n      \"path\": \"/admin/ratelimits/{username}\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"Username to fetch ratelimits for\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns <a href=\\\"#ratelimit-object\\\">Ratelimit</a> object\",\n        \"400 Bad Request\": \"username invalid by Scratch standards\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\",\n        \"404 Not Found\": \"no ratelimit set for that user\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": {\n        \"type\": \"PartialRatelimit\",\n        \"ratelimit\": 30\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Modify Ratelimits\",\n      \"desc\": \"Modify or set ratelimits for multiple users at once. Only users specified will modified; the rest will not be touched. Invalid entries are ignored.\",\n      \"method\": \"PATCH\",\n      \"path\": \"/admin/ratelimits\",\n      \"params\": {},\n      \"http\": {\n        \"204 No Content\": \"success\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": null,\n      \"body\": {\n        \"type\": \"Ratelimit[]\",\n        \"username\": \"scratchusername\",\n        \"ratelimit\": 30\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Modify Single Ratelimit\",\n      \"desc\": \"Modify or set ratelimits for a specific user. Nonexistent users can be set preemptively.\",\n      \"method\": \"POST\",\n      \"path\": \"/admin/ratelimits/{username}\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"Username to set ratelimits for\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"204 No Content\": \"success\",\n        \"400 Bad Request\": \"username invalid by Scratch standards\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": null,\n      \"body\": {\n        \"type\": \"Ratelimit\",\n        \"ratelimit\": 30\n      }\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Ban Endpoints\",\n      \"paragraphs\": [\n        \"These endpoints are to do with getting and setting bans on the registration API.\"\n      ]\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get All Bans\",\n      \"desc\": \"Fetch all currently active bans.\",\n      \"method\": \"GET\",\n      \"path\": \"/admin/bans\",\n      \"params\": {},\n      \"http\": {\n        \"200 OK\": \"returns list of <a href=\\\"#Ban-object\\\">Ban</a> objects\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": {\n        \"type\": \"Ban[]\",\n        \"username\": \"scratchusername\",\n        \"expiry\": 1598537437\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get Single Ban\",\n      \"desc\": \"Fetch the active ban for a specific user, if any.\",\n      \"method\": \"GET\",\n      \"path\": \"/admin/bans/{username}\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"Username to fetch ban for\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns <a href=\\\"#Ban-object\\\">Ban</a> object\",\n        \"400 Bad Request\": \"username invalid by Scratch standards\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\",\n        \"404 Not Found\": \"no ban currently in force for that user\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": {\n        \"type\": \"PartialBan\",\n        \"expiry\": 1598537437\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Modify Bans\",\n      \"desc\": \"Modify or put multiple bans into force. Invalid entries are ignored.\",\n      \"method\": \"PATCH\",\n      \"path\": \"/admin/bans\",\n      \"params\": {},\n      \"http\": {\n        \"204 No Content\": \"success\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": null,\n      \"body\": {\n        \"type\": \"Ban[]\",\n        \"username\": \"scratchusername\",\n        \"expiry\": 1598537437\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Modify Single Ban\",\n      \"desc\": \"Ban a user or modify their existing ban.\",\n      \"method\": \"GET\",\n      \"path\": \"/admin/bans/{username}\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"Username to ban\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"204 No Content\": \"success\",\n        \"400 Bad Request\": \"username invalid by Scratch standards\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": null,\n      \"body\": {\n        \"type\": \"PartialBan\",\n        \"expiry\": 1598537437\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Unban\",\n      \"desc\": \"Unban a user. This is idempotent; unbanning the same user multiple times will unban them once (unless they are banned again).\",\n      \"method\": \"DELETE\",\n      \"path\": \"/admin/bans/{username}\",\n      \"params\": {\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"Username to unban\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"204 No Content\": \"success\",\n        \"400 Bad Request\": \"username invalid by Scratch standards\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": null\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Audit Log Endpoints\",\n      \"paragraphs\": [\n        \"Admins' actions are recorded. Fetch those logs with these endpoints.\"\n      ]\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get Audit Logs\",\n      \"desc\": \"Get logs of who has used this API to perform what admin action. These logs are accessible only by administrators.\",\n      \"method\": \"GET\",\n      \"path\": \"/admin/logs\",\n      \"params\": {\n        \"limit\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return at most <code>limit</code> logs. This can be arbitrarily large, but defaults to 100 and cannot be unlimited.\",\n          \"query\": true\n        },\n        \"start\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return logs that happened before (not including) the log with ID <code>start</code>. Usually used for getting the next page of logs. This does not have to be a valid ID (though it usually is)\",\n          \"query\": true\n        },\n        \"before\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return logs that happened before (and including) the Unix epoch time <code>before</code>\",\n          \"query\": true\n        },\n        \"end\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return logs that happened after (not including) the log with ID <code>end</code>\",\n          \"query\": true\n        },\n        \"after\": {\n          \"type\": \"integer\",\n          \"desc\": \"Return logs that happened after (and including) the Unix epoch time <code>after</code>. Usually used to limit returned logs by time\",\n          \"query\": true\n        },\n        \"username\": {\n          \"type\": \"string\",\n          \"desc\": \"Only return logs with the username <code>username</code>\",\n          \"query\": true\n        },\n        \"type\": {\n          \"type\": \"integer\",\n          \"desc\": \"Only return logs with the <a href=\\\"#audit-log-types\\\">audit log type</a> <code>type</code>\",\n          \"query\": true\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns list of <a href=\\\"#auditlog-object\\\">AuditLog</a> objects\",\n        \"400 Bad Request\": \"<code>start</code> is after <code>end</code>, <code>before</code> is after <code>after</code>, <code>type</code> is invalid, or a query param was the wrong type\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": {\n        \"__type__\": \"AuditLog[]\",\n        \"id\": 123,\n        \"username\": \"actionperformer\",\n        \"time\": \"1566974952\",\n        \"type\": 1,\n        \"data\": \"{\\\"username\\\": \\\"ScratchUsername\\\", \\\"expiry\\\": 1234567890}\"\n      }\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get Audit Log\",\n      \"desc\": \"Fetch the information for a single audit log entry.\",\n      \"method\": \"GET\",\n      \"path\": \"/admin/logs/{log ID}\",\n      \"params\": {\n        \"log ID\": {\n          \"type\": \"integer\",\n          \"desc\": \"ID of audit log entry to fetch\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns single <a href=\\\"#auditlog-object\\\">Log</a> object\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\",\n        \"404 Not Found\": \"no log with such ID\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": {\n        \"__type__\": \"AuditLog\",\n        \"id\": 123,\n        \"username\": \"actionperformer\",\n        \"time\": \"1566974952\",\n        \"type\": 1,\n        \"data\": \"{\\\"username\\\": \\\"ScratchUsername\\\", \\\"expiry\\\": 1234567890}\"\n      }\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Miscellaneous Admin Tools\",\n      \"paragraphs\": [\n        \"Admins have a few other tools available as well.\"\n      ]\n    },\n    {\n      \"type\": \"endpoint\",\n      \"name\": \"Get Client Info\",\n      \"desc\": \"Fetch information about a certain client. The token is partially censored.\",\n      \"method\": \"GET\",\n      \"path\": \"/admin/client/{client ID}\",\n      \"params\": {\n        \"client ID\": {\n          \"type\": \"integer\",\n          \"desc\": \"ID of client whose info is to be fetched\",\n          \"query\": false\n        }\n      },\n      \"http\": {\n        \"200 OK\": \"returns <a href=\\\"#client-object\\\">Client</a> object\",\n        \"401 Unauthorized\": \"invalid or no <code>session</code> in cookies\",\n        \"404 Not Found\": \"no client with that ID\"\n      },\n      \"auth\": \"administrative-endpoints\",\n      \"returns\": {\n        \"type\": \"Client\",\n        \"client_id\": 1234567890,\n        \"token\": \"EaFfBJdC******...\",\n        \"username\": \"scratchusername\",\n        \"ratelimit\": 30\n      }\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Objects\",\n      \"paragraphs\": [\n        \"Various endpoints have defined return types or body structures. They are documented below.\"\n      ]\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"Verification\",\n      \"desc\": \"Holds data related to verifying a user on Scratch.\",\n      \"fields\": {\n        \"code\": {\"type\": \"string\", \"desc\": \"verification code to post\"},\n        \"username\": {\"type\": \"string\", \"desc\": \"username being verified\"}\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"Admin\",\n      \"desc\": \"Indicates whether the user who just <a href=\\\"#finish-logging-in-endpoint\\\">finished logging in</a> is an admin on the site or not.\",\n      \"fields\": {\n        \"admin\": {\"type\": \"boolean\", \"desc\": \"whether the user is an admin\"}\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"User\",\n      \"desc\": \"Holds data that a client needs to access the API.\",\n      \"fields\": {\n        \"client_id\": {\"type\": \"integer\", \"desc\": \"client ID\"},\n        \"token\": {\"type\": \"string\", \"desc\": \"API token for client\"},\n        \"username\": {\"type\": \"string\", \"desc\": \"username of client\"}\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"Log\",\n      \"desc\": \"Holds log data for a verification.\",\n      \"fields\": {\n        \"log_id\": {\"type\": \"integer\", \"desc\": \"log ID\"},\n        \"client_id\": {\"type\": \"integer\", \"desc\": \"client ID responsible for this log\"},\n        \"username\": {\"type\": \"string\", \"desc\": \"username being verified\"},\n        \"log_time\": {\"type\": \"integer\", \"desc\": \"Unix epoch time of log\"},\n        \"log_type\": {\"type\": \"integer\", \"desc\": \"<a href=\\\"#log-types\\\">log type</a>\"}\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"Ratelimit\",\n      \"desc\": \"Holds data about a user's ratelimit.\",\n      \"fields\": {\n        \"username\": {\"type\": \"string\", \"desc\": \"username being ratelimited\"},\n        \"ratelimit\": {\"type\": \"integer\", \"desc\": \"how many requests they can make per minute\"}\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"PartialRatelimit\",\n      \"desc\": \"Holds data about a user's ratelimit, without their name\",\n      \"fields\": {\n        \"ratelimit\": {\"type\": \"integer\", \"desc\": \"how many requests they can make per minute\"}\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"Ban\",\n      \"desc\": \"Holds data about a user's ban status.\",\n      \"fields\": {\n        \"username\": {\"type\": \"string\", \"desc\": \"username being banned\"},\n        \"expiry\": {\"type\": \"integer?\", \"desc\": \"Unix timestamp when their ban expires. <code>null</code> means a permanent ban.\"}\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"PartialBan\",\n      \"desc\": \"Holds data about a user's ban status, without their name.\",\n      \"fields\": {\n        \"expiry\": {\"type\": \"integer?\", \"desc\": \"Unix epoch time when their ban expires. <code>null</code> means a permanent ban.\"}\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"AuditLog\",\n      \"desc\": \"Holds log data for an admin action.\",\n      \"fields\": {\n        \"id\": {\"type\": \"integer\", \"desc\": \"log ID\"},\n        \"username\": {\"type\": \"string\", \"desc\": \"username of action performer\"},\n        \"time\": {\"type\": \"integer\", \"desc\": \"Unix epoch time of log\"},\n        \"type\": {\"type\": \"integer\", \"desc\": \"<a href=\\\"#audit-log-types\\\">audit log type</a>\"},\n        \"data\": {\"type\": \"string\", \"desc\": \"stringified JSON of action data\"}\n      }\n    },\n    {\n      \"type\": \"object\",\n      \"name\": \"Client\",\n      \"desc\": \"Holds data about a client.\",\n      \"fields\": {\n        \"client_id\": {\"type\": \"integer\", \"desc\": \"client ID\"},\n        \"token\": {\"type\": \"string\", \"desc\": \"partially censored token of client\"},\n        \"username\": {\"type\": \"string\", \"desc\": \"username of owner\"},\n        \"ratelimit\": {\"type\": \"integer?\", \"desc\": \"how many requests this client can make per minute. Can be <code>null</code> if this client has never been used yet.\"}\n      }\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Log Types\",\n      \"paragraphs\": [\n        \"Logs can have four types:\",\n        {\"type\": \"ul\", \"items\": [\n          \"<code>1</code>: verification started\",\n          \"<code>2</code>: verification succeeded\",\n          \"<code>3</code>: verification failed\",\n          \"<code>4</code>: verification invalidated\"\n        ]}\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Audit Log Types\",\n      \"paragraphs\": [\n        \"Audit logs can have three types:\",\n        {\"type\": \"ul\", \"items\": [\n          \"<code>1</code>: user banned or user ban modified\",\n          \"<code>2</code>: user ratelimit modified\",\n          \"<code>3</code>: user unbanned\"\n        ]}\n      ]\n    }\n  ],\n  \"usage.html\": [\n    {\n      \"type\": \"intro\",\n      \"title\": \"ScratchVerifier Usage\",\n      \"paragraphs\": [\"This page contains a walkthrough for using this API.\"]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Basic Walkthrough\",\n      \"paragraphs\": [\n        \"The API root URL is <a href=\\\"https://scratchverifier.ddns.net\\\">https://scratchverifier.ddns.net</a>\",\n        \"After <a href=\\\"registration.html\\\"><b>registering</b></a>, here's how to use this API:\",\n        {\"type\": \"ol\", \"items\": [\n          \"Send an HTTP <span class=\\\"method\\\">PUT</span> request to <code>/verify/<span class=\\\"param\\\">{username}</span></code> with the client ID and token you obtained as HTTP Basic authorization\",\n          \"The API will send you a <a href=\\\"reference.html#verification-object\\\">Verification</a> object containing a code\",\n          \"Have your client post that verification code on <i>their own profile comments</i>\",\n          \"Send an HTTP <span class=\\\"method\\\">POST</span> request to <code>/verify/<span class=\\\"param\\\">{username}</span></code>\",\n          \"If your client is verified, you should receive a 204 No Content response. Done!\"\n        ]}\n      ]\n    }\n  ],\n  \"registration.html\": [\n    {\n      \"type\": \"intro\",\n      \"title\": \"ScratchVerifier Registration\",\n      \"paragraphs\": [\"This page contains walkthroughs for registering/handling your registration with this API.\"]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Registering Through the Website\",\n      \"paragraphs\": [\n        \"This is how to register with this API through the <a href=\\\"https://scratchverifier.ddns.net/site/\\\">website</a>.\",\n        {\"type\": \"ol\", \"items\": [\n          \"Visit the website.\",\n          \"Click \\\"Login/Register\\\" at the top right\",\n          \"You will be presented with a verification code. (That's right, we use our own API to register people with it!)\",\n          \"Post this code on your own profile comments\",\n          \"Click \\\"Continue\\\"\",\n          \"You will then be logged in\",\n          \"You will be presented with a button saying \\\"Create client\\\". Click it\",\n          \"You will be shown your client ID and a button to copy your token.\",\n          \"Put your client ID and token into your app's configuration. Done!\"\n        ]},\n        \"At any point, if you wish to view your info again, simply login (if necessary) and you will be presented with it.\"\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Registering Through the API\",\n      \"paragraphs\": [\n        \"The API itself provides endpoints to register yourself. Here's how to use them:\",\n        {\"type\": \"ol\", \"items\": [\n          \"Send an HTTP <span class=\\\"method\\\">POST</span> request to <code>/users/<span class=\\\"param\\\">{yourusername}</span>/login</code>\",\n          \"The API will send you a <a href=\\\"reference.html#verification-object\\\">Verification</a> object containing a code\",\n          \"Post this code on your own profile comments\",\n          \"Send an HTTP <span class=\\\"method\\\">POST</span> request to <code>/users/<span class=\\\"param\\\">{yourusername}</span>/finish-login</code>\",\n          \"You will receive a cookie with your session ID. Set it; it lasts a year\",\n          \"Assuming you haven't already created a client, send an HTTP <span class=\\\"method\\\">PUT</span> request to <code>/session</code>\",\n          \"You will receive a <a href=\\\"reference.html#user-object\\\">User</a> object containing your client ID and token\",\n          \"Put your client ID and token into your app's configuration. Done!\"\n        ]},\n        \"At any point, if it becomes necessary to fetch your info again, simply send an HTTP <span class=\\\"method\\\">GET</span> request to <code>/session</code> and you will receive it. If you receive a 401 Unauthorized response, you need to get another session ID by following steps 1-5.\"\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Resetting your Token\",\n      \"paragraphs\": [\n        \"If you think your token has been compromised, you can reset your token using the website:\",\n        {\"type\": \"ol\", \"items\": [\n          \"Visit the website. If presented with your current info, skip to step 8\",\n          \"Click \\\"Login/Register\\\" at the top right\",\n          \"You will be presented with a verification code\",\n          \"Post this code on your own profile comments\",\n          \"Click \\\"Continue\\\"\",\n          \"You will then be logged in\",\n          \"You will be presented with your client info\",\n          \"Click the button labelled \\\"Reset token\\\"\",\n          \"Copy your new token and update your app's configuration. Done!\"\n        ]},\n        \"Or using the API:\",\n        {\"type\": \"ol\", \"items\": [\n          \"<span class=\\\"method\\\">GET</span> <code>/session</code> to fetch your info\",\n          \"If you receive your info, skip to step 8. Otherwise, continue with step 3\",\n          \"Send an HTTP <span class=\\\"method\\\">POST</span> request to <code>/users/<span class=\\\"param\\\">{yourusername}</span>/login</code>\",\n          \"The API will send you a <a href=\\\"reference.html#verification-object\\\">Verification</a> object containing a code\",\n          \"Post this code on your own profile comments\",\n          \"Send an HTTP <span class=\\\"method\\\">POST</span> request to <code>/users/<span class=\\\"param\\\">{yourusername}</span>/finish-login</code>\",\n          \"You will receive a cookie with your session ID. Set it; it lasts a year\",\n          \"Send an HTTP <span class=\\\"method\\\">PATCH</span> request to <code>/session</code>\",\n          \"You will receive a new <a href=\\\"reference.html#user-object\\\">User</a> object containing your client ID and updated token\",\n          \"Update your token in your app's configuration. Done!\"\n        ]}\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"heading\": \"Deleting your Account\",\n      \"paragraphs\": [\n        \"We're sorry to see you go! You can deregister from the API through the website:\",\n        {\"type\": \"ol\", \"items\": [\n          \"Visit the website. If presented with your current info, skip to step 8\",\n          \"Click \\\"Login/Register\\\" at the top right\",\n          \"You will be presented with a verification code\",\n          \"Post this code on your own profile comments\",\n          \"Click \\\"Continue\\\"\",\n          \"You will then be logged in\",\n          \"You will be presented with your client info\",\n          \"Click the button labelled \\\"Delete Account\\\"\",\n          \"Click the confirmation. :(\"\n        ]},\n        \"Or using the API:\",\n        {\"type\": \"ol\", \"items\": [\n          \"<span class=\\\"method\\\">GET</span> <code>/session</code> to fetch your info\",\n          \"If you receive your info, skip to step 8. Otherwise, continue with step 3\",\n          \"Send an HTTP <span class=\\\"method\\\">POST</span> request to <code>/users/<span class=\\\"param\\\">{yourusername}</span>/login</code>\",\n          \"The API will send you a <a href=\\\"reference.html#verification-object\\\">Verification</a> object containing a code\",\n          \"Post this code on your own profile comments\",\n          \"Send an HTTP <span class=\\\"method\\\">POST</span> request to <code>/users/<span class=\\\"param\\\">{yourusername}</span>/finish-login</code>\",\n          \"You will receive a cookie with your session ID. Set it; it lasts a year\",\n          \"Send an HTTP <span class=\\\"method\\\">DELETE</span> request to <code>/session</code>\",\n          \"You will receive a 204 No Content response. :(\"\n        ]},\n        \"<i>Note: This only deregisters your client from the API. You are still free to re-register later. Resetting your token is almost like deregistering and re-registering again.</i>\"\n      ]\n    }\n  ]\n}\n", "<!doctype html>\n<html>\n<head>\n    <link rel=\"stylesheet\" href=\"main.css\" />\n    <script src=\"main.js\"></script>\n    <script>\n    if (location.pathname === \"/docs\"){location.pathname = \"/docs/\"};\n    </script>\n    <title>API Reference - ScratchVerifier Documentation</title>\n</head>\n<body><div id=\"body\">\n\n<h1 id=\"api-reference\">API Reference</h1>\n<p>The ScratchVerifier API is a HTTP/REST API for all operations.</p>\n<p><b>API Base URL</b>: <a href=\"https://scratchverifier.ddns.net\">https://scratchverifier.ddns.net</a></p>\n<h2 id=\"authorization\">Authorization</h2>\n<p>Authorization is done using <a href=\"https://tools.ietf.org/html/rfc7617\">Basic HTTP Authorization</a>, using your client ID as the username and token as the password.</p>\n<table><caption>Example Authorization Header</caption>\n<tr><td class=\"pre\">Authorization: Basic MTAxMTQ3NjQ6NDY5MDI1YzYxM2RhNDMwYmEzMTE0NzIwY...==</td></tr>\n</table>\n<h2 id=\"api-endpoints\">API Endpoints</h2>\n<p>The simplicity of this API is such that there are only three total endpoints for its ultimate purpose.</p>\n<h3 id=\"start/renew-verification-endpoint\">Start/Renew Verification Endpoint</h3>\n<p>Request a new verification code for a user. Only one code per user per client - if this endpoint is used again before the <a href=\"#finish-verification-endpoint\">Finish Verification</a> endpoint is used, this will generate a new code and reset the 30-minute expiry, returning the new code instead.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">PUT</span> <code>/verify/<span class=\"param\">{username}</span></code> <a href=\"#authorization\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>The username to verify</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns <a href=\"#verification-object\">Verification</a> object</td></tr>\n<tr><td>400 Bad Request</td><td>username is invalid by Scratch rules</td></tr>\n<tr><td>401 Unauthorized</td><td>missing/invalid <a href=\"#authorization\">authorization</a></td></tr>\n</table>\n<table><caption>Returns a <a href=\"#verification-object\">Verification</a> object</caption>\n<tr><td class=\"pre\">{\n  \"code\": \"EJAAFcffGJeFDCGdJB...\",\n  \"username\": \"scratchusername\"\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"finish-verification-endpoint\">Finish Verification Endpoint</h3>\n<p>Confirm verification for a user. Returns 204 No Content on successful verification, 403 Forbidden on failure.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">POST</span> <code>/verify/<span class=\"param\">{username}</span></code> <a href=\"#authorization\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>The username to verify</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>verification successful</td></tr>\n<tr><td>400 Bad Request</td><td>username is invalid by Scratch rules</td></tr>\n<tr><td>401 Unauthorized</td><td>missing/invalid <a href=\"#authorization\">authorization</a></td></tr>\n<tr><td>403 Forbidden</td><td>verification unsuccessful</td></tr>\n<tr><td>404 Not Found</td><td>username 404ed on Scratch API OR user is not currently being verified</td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n</div></div>\n<h3 id=\"invalidate-verification-endpoint\">Invalidate Verification Endpoint</h3>\n<p>Cancel verifying a user.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">DELETE</span> <code>/verify/<span class=\"param\">{username}</span></code> <a href=\"#authorization\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>The username to give up on verifying</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>invalidation successful</td></tr>\n<tr><td>400 Bad Request</td><td>username is invalid by Scratch rules</td></tr>\n<tr><td>401 Unauthorized</td><td>missing/invalid <a href=\"#authorization\">authorization</a></td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n</div></div>\n<h2 id=\"api-registration-endpoints\">API Registration Endpoints</h2>\n<p>These endpoints are to do with registering a client with the API.</p>\n<h3 id=\"start-logging-in-endpoint\">Start Logging In Endpoint</h3>\n<p>Begin the process of logging in to the registration API.</p>\n<div class=\"endpoint\">\n<div class=\"method-path\" onclick=\"showOrHide(this)\"><span class=\"method\">POST</span> <code>/users/<span class=\"param\">{username}</span>/login</code> <a href=\"#authorization\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>The username to log in with</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns <a href=\"#verification-object\">Verification</a> object</td></tr>\n<tr><td>400 Bad Request</td><td>username is invalid by Scratch rules</td></tr>\n<tr><td>403 Forbidden</td><td>this username is banned from registering</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#verification-object\">Verification</a> object</caption>\n<tr><td class=\"pre\">{\n  \"code\": \"EJAAFcffGJeFDCGdJB...\",\n  \"username\": \"scratchusername\"\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"finish-logging-in-endpoint\">Finish Logging In Endpoint</h3>\n<p>Finish the process of logging in. If successful, response contains a <code>session</code> cookie that must be set for all endpoints listed after this one to work. Returns an <a href=\"#admin-object\">Admin</a> object on success.</p>\n<div class=\"endpoint\">\n<div class=\"method-path\" onclick=\"showOrHide(this)\"><span class=\"method\">POST</span> <code>/users/<span class=\"param\">{username}</span>/finish-login</code> <a href=\"#authorization\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>The username to log in with</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns <a href=\"#admin-object\">Admin</a> object</td></tr>\n<tr><td>400 Bad Request</td><td>username is invalid by Scratch rules</td></tr>\n<tr><td>401 Unauthorized</td><td>login failed</td></tr>\n<tr><td>404 Not Found</td><td>username 404ed on Scratch API</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#admin-object\">Admin</a> object</caption>\n<tr><td class=\"pre\">{\n  \"admin\": false\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"logout-all-sessions-endpoint\">Logout All Sessions Endpoint</h3>\n<p>Immediately invalidate all sessions under this username.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">POST</span> <code>/users/<span class=\"param\">{username}</span>/logout</code> <a href=\"#finish-logging-in-endpoint\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>The username to log out</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>successfully logged out</td></tr>\n<tr><td>400 Bad Request</td><td>username is invalid by Scratch rules</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n<tr><td>403 Forbidden</td><td>username does not match session</td></tr>\n<tr><td>404 Not Found</td><td>username 404ed on Scratch API</td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n</div></div>\n<h3 id=\"get-client-info-endpoint\">Get Client Info Endpoint</h3>\n<p>Get your client ID, token, and username. Returns a <a href=\"#user-object\">User</a> object on success.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/session</code> <a href=\"#finish-logging-in-endpoint\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns <a href=\"#user-object\">User</a> object</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n<tr><td>404 Not Found</td><td>this user is not registered with the API yet</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#user-object\">User</a> object</caption>\n<tr><td class=\"pre\">{\n  \"client_id\": 10114764,\n  \"token\": \"dd9410f80ba0...\",\n  \"username\": \"scratchusername\"\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"create-client-endpoint\">Create Client Endpoint</h3>\n<p>If this user does not own a client yet, create and return one.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">PUT</span> <code>/session</code> <a href=\"#finish-logging-in-endpoint\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns new <a href=\"#user-object\">User</a> object</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n<tr><td>409 Conflict</td><td>this user is already registered with the API</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#user-object\">User</a> object</caption>\n<tr><td class=\"pre\">{\n  \"client_id\": 10114764,\n  \"token\": \"dd9410f80ba0...\",\n  \"username\": \"scratchusername\"\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"reset-token-endpoint\">Reset Token Endpoint</h3>\n<p>If you suspect that your token has been compromised, reset it through this endpoint.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">PATCH</span> <code>/session</code> <a href=\"#finish-logging-in-endpoint\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns updated <a href=\"#user-object\">User</a> object</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#user-object\">User</a> object</caption>\n<tr><td class=\"pre\">{\n  \"client_id\": 10114764,\n  \"token\": \"dd9410f80ba0...\",\n  \"username\": \"scratchusername\"\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"delete-client-endpoint\">Delete Client Endpoint</h3>\n<p>Deregister from the API. Returns 204 No Content on success.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">DELETE</span> <code>/session</code> <a href=\"#finish-logging-in-endpoint\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>client was successfully deleted</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n</div></div>\n<h3 id=\"logout-session-endpoint\">Logout Session Endpoint</h3>\n<p>Invalidate this session ID.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">POST</span> <code>/session/logout</code> <a href=\"#finish-logging-in-endpoint\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>successfully logged out</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n</div></div>\n<h2 id=\"api-usage-endpoints\">API Usage Endpoints</h2>\n<p>These endpoints fetch API usage logs.</p>\n<h3 id=\"get-usage-logs-endpoint\">Get Usage Logs Endpoint</h3>\n<p>Get logs of who has used this API to verify what user. These logs are accessible by anyone to head off abuse.</p>\n<div class=\"endpoint\">\n<div class=\"method-path\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/usage</code> <a href=\"#authorization\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n</table>\n<table><caption>Query String Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>limit</td><td>integer</td><td>Return at most <code>limit</code> logs. <code>limit</code> cannot be greater than 500</td></tr>\n<tr><td>start</td><td>integer</td><td>Return logs that happened before (not including) the log with ID <code>start</code>. Usually used for getting the next page of logs. This does not have to be a valid ID (though it usually is)</td></tr>\n<tr><td>before</td><td>integer</td><td>Return logs that happened before (and including) the Unix epoch time <code>before</code></td></tr>\n<tr><td>end</td><td>integer</td><td>Return logs that happened after (not including) the log with ID <code>end</code></td></tr>\n<tr><td>after</td><td>integer</td><td>Return logs that happened after (and including) the Unix epoch time <code>after</code>. Usually used to limit returned logs by time</td></tr>\n<tr><td>client_id</td><td>integer</td><td>Only return logs with the client ID <code>client_id</code></td></tr>\n<tr><td>username</td><td>string</td><td>Only return logs with the username <code>username</code></td></tr>\n<tr><td>type</td><td>integer</td><td>Only return logs with the <a href=\"#log-types\">log type</a> <code>type</code></td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns list of <a href=\"#log-object\">Log</a> objects</td></tr>\n<tr><td>400 Bad Request</td><td><code>start</code> is after <code>end</code>, <code>before</code> is after <code>after</code>, <code>type</code> is invalid, or a query param was the wrong type</td></tr>\n<tr><td>403 Forbidden</td><td><code>limit</code> was greater than 500</td></tr>\n</table>\n<table><caption>Returns a list of <a href=\"#log-object\">Log</a> objects</caption>\n<tr><td class=\"pre\">{\n  \"log_id\": 123,\n  \"client_id\": 1234567890,\n  \"username\": \"scratchusername\",\n  \"log_time\": \"1566974952\",\n  \"log_type\": 1\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"get-usage-log-endpoint\">Get Usage Log Endpoint</h3>\n<p>Fetch the information for a single log entry.</p>\n<div class=\"endpoint\">\n<div class=\"method-path\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/usage/<span class=\"param\">{log ID}</span></code> <a href=\"#authorization\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>log ID</td><td>integer</td><td>ID of log entry to fetch</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns single <a href=\"#log-object\">Log</a> object</td></tr>\n<tr><td>404 Not Found</td><td>no log with such ID</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#log-object\">Log</a> object</caption>\n<tr><td class=\"pre\">{\n  \"log_id\": 123,\n  \"client_id\": 1234567890,\n  \"username\": \"scratchusername\",\n  \"log_time\": \"1566974952\",\n  \"log_type\": 1\n}</td></tr>\n</table>\n</div></div>\n<h2 id=\"administrative-endpoints\">Administrative Endpoints</h2>\n<p>The following endpoints can only be accessed by administrators.</p>\n<p>Administrators must be logged in with the <a href=\"#finish-logging-in-endpoint\">Finish Logging In endpoint</a> to access these endpoints.</p>\n<h2 id=\"ratelimit-endpoints\">Ratelimit Endpoints</h2>\n<p>These endpoints are to do with getting and setting ratelimits on the main API.</p>\n<h3 id=\"get-all-ratelimits-endpoint\">Get All Ratelimits Endpoint</h3>\n<p>Fetch all currently active ratelimits.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/admin/ratelimits</code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns list of <a href=\"#ratelimit-object\">Ratelimit</a> objects</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns a list of <a href=\"#ratelimit-object\">Ratelimit</a> objects</caption>\n<tr><td class=\"pre\">{\n  \"username\": \"scratchusername\",\n  \"ratelimit\": 30\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"get-single-ratelimit-endpoint\">Get Single Ratelimit Endpoint</h3>\n<p>Fetch ratelimits for a particular user.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/admin/ratelimits/<span class=\"param\">{username}</span></code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>Username to fetch ratelimits for</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns <a href=\"#ratelimit-object\">Ratelimit</a> object</td></tr>\n<tr><td>400 Bad Request</td><td>username invalid by Scratch standards</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n<tr><td>404 Not Found</td><td>no ratelimit set for that user</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#partialratelimit-object\">PartialRatelimit</a> object</caption>\n<tr><td class=\"pre\">{\n  \"ratelimit\": 30\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"modify-ratelimits-endpoint\">Modify Ratelimits Endpoint</h3>\n<p>Modify or set ratelimits for multiple users at once. Only users specified will modified; the rest will not be touched. Invalid entries are ignored.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">PATCH</span> <code>/admin/ratelimits</code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>success</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n<table><caption>Request body: a list of <a href=\"#ratelimit-object\">Ratelimit</a> objects</caption>\n<tr><td class=\"pre\">{\n  \"username\": \"scratchusername\",\n  \"ratelimit\": 30\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"modify-single-ratelimit-endpoint\">Modify Single Ratelimit Endpoint</h3>\n<p>Modify or set ratelimits for a specific user. Nonexistent users can be set preemptively.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">POST</span> <code>/admin/ratelimits/<span class=\"param\">{username}</span></code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>Username to set ratelimits for</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>success</td></tr>\n<tr><td>400 Bad Request</td><td>username invalid by Scratch standards</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n<table><caption>Request body: a <a href=\"#ratelimit-object\">Ratelimit</a> object</caption>\n<tr><td class=\"pre\">{\n  \"ratelimit\": 30\n}</td></tr>\n</table>\n</div></div>\n<h2 id=\"ban-endpoints\">Ban Endpoints</h2>\n<p>These endpoints are to do with getting and setting bans on the registration API.</p>\n<h3 id=\"get-all-bans-endpoint\">Get All Bans Endpoint</h3>\n<p>Fetch all currently active bans.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/admin/bans</code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns list of <a href=\"#Ban-object\">Ban</a> objects</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns a list of <a href=\"#ban-object\">Ban</a> objects</caption>\n<tr><td class=\"pre\">{\n  \"username\": \"scratchusername\",\n  \"expiry\": 1598537437\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"get-single-ban-endpoint\">Get Single Ban Endpoint</h3>\n<p>Fetch the active ban for a specific user, if any.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/admin/bans/<span class=\"param\">{username}</span></code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>Username to fetch ban for</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns <a href=\"#Ban-object\">Ban</a> object</td></tr>\n<tr><td>400 Bad Request</td><td>username invalid by Scratch standards</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n<tr><td>404 Not Found</td><td>no ban currently in force for that user</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#partialban-object\">PartialBan</a> object</caption>\n<tr><td class=\"pre\">{\n  \"expiry\": 1598537437\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"modify-bans-endpoint\">Modify Bans Endpoint</h3>\n<p>Modify or put multiple bans into force. Invalid entries are ignored.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">PATCH</span> <code>/admin/bans</code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>success</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n<table><caption>Request body: a list of <a href=\"#ban-object\">Ban</a> objects</caption>\n<tr><td class=\"pre\">{\n  \"username\": \"scratchusername\",\n  \"expiry\": 1598537437\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"modify-single-ban-endpoint\">Modify Single Ban Endpoint</h3>\n<p>Ban a user or modify their existing ban.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/admin/bans/<span class=\"param\">{username}</span></code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>Username to ban</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>success</td></tr>\n<tr><td>400 Bad Request</td><td>username invalid by Scratch standards</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n<table><caption>Request body: a <a href=\"#partialban-object\">PartialBan</a> object</caption>\n<tr><td class=\"pre\">{\n  \"expiry\": 1598537437\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"unban-endpoint\">Unban Endpoint</h3>\n<p>Unban a user. This is idempotent; unbanning the same user multiple times will unban them once (unless they are banned again).</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">DELETE</span> <code>/admin/bans/<span class=\"param\">{username}</span></code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>username</td><td>string</td><td>Username to unban</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>204 No Content</td><td>success</td></tr>\n<tr><td>400 Bad Request</td><td>username invalid by Scratch standards</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns nothing</caption>\n<tr><td class=\"pre\"></td></tr>\n</table>\n</div></div>\n<h2 id=\"audit-log-endpoints\">Audit Log Endpoints</h2>\n<p>Admins' actions are recorded. Fetch those logs with these endpoints.</p>\n<h3 id=\"get-audit-logs-endpoint\">Get Audit Logs Endpoint</h3>\n<p>Get logs of who has used this API to perform what admin action. These logs are accessible only by administrators.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/admin/logs</code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n</table>\n<table><caption>Query String Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>limit</td><td>integer</td><td>Return at most <code>limit</code> logs. This can be arbitrarily large, but defaults to 100 and cannot be unlimited.</td></tr>\n<tr><td>start</td><td>integer</td><td>Return logs that happened before (not including) the log with ID <code>start</code>. Usually used for getting the next page of logs. This does not have to be a valid ID (though it usually is)</td></tr>\n<tr><td>before</td><td>integer</td><td>Return logs that happened before (and including) the Unix epoch time <code>before</code></td></tr>\n<tr><td>end</td><td>integer</td><td>Return logs that happened after (not including) the log with ID <code>end</code></td></tr>\n<tr><td>after</td><td>integer</td><td>Return logs that happened after (and including) the Unix epoch time <code>after</code>. Usually used to limit returned logs by time</td></tr>\n<tr><td>username</td><td>string</td><td>Only return logs with the username <code>username</code></td></tr>\n<tr><td>type</td><td>integer</td><td>Only return logs with the <a href=\"#audit-log-types\">audit log type</a> <code>type</code></td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns list of <a href=\"#auditlog-object\">AuditLog</a> objects</td></tr>\n<tr><td>400 Bad Request</td><td><code>start</code> is after <code>end</code>, <code>before</code> is after <code>after</code>, <code>type</code> is invalid, or a query param was the wrong type</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n</table>\n<table><caption>Returns a list of <a href=\"#auditlog-object\">AuditLog</a> objects</caption>\n<tr><td class=\"pre\">{\n  \"id\": 123,\n  \"username\": \"actionperformer\",\n  \"time\": \"1566974952\",\n  \"type\": 1,\n  \"data\": \"{\\\"username\\\": \\\"ScratchUsername\\\", \\\"expiry\\\": 1234567890}\"\n}</td></tr>\n</table>\n</div></div>\n<h3 id=\"get-audit-log-endpoint\">Get Audit Log Endpoint</h3>\n<p>Fetch the information for a single audit log entry.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/admin/logs/<span class=\"param\">{log ID}</span></code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>log ID</td><td>integer</td><td>ID of audit log entry to fetch</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns single <a href=\"#auditlog-object\">Log</a> object</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n<tr><td>404 Not Found</td><td>no log with such ID</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#auditlog-object\">AuditLog</a> object</caption>\n<tr><td class=\"pre\">{\n  \"id\": 123,\n  \"username\": \"actionperformer\",\n  \"time\": \"1566974952\",\n  \"type\": 1,\n  \"data\": \"{\\\"username\\\": \\\"ScratchUsername\\\", \\\"expiry\\\": 1234567890}\"\n}</td></tr>\n</table>\n</div></div>\n<h2 id=\"miscellaneous-admin-tools\">Miscellaneous Admin Tools</h2>\n<p>Admins have a few other tools available as well.</p>\n<h3 id=\"get-client-info-endpoint\">Get Client Info Endpoint</h3>\n<p>Fetch information about a certain client. The token is partially censored.</p>\n<div class=\"endpoint\">\n<div class=\"method-path auth-needed\" onclick=\"showOrHide(this)\"><span class=\"method\">GET</span> <code>/admin/client/<span class=\"param\">{client ID}</span></code> <a href=\"#administrative-endpoints\"><img src=\"https://image.flaticon.com/icons/png/512/61/61457.png\" title=\"Authorization necessary\" /></a></div>\n<div style=\"display: none\">\n<table><caption>URL Params</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th>\n<tr><td>client ID</td><td>integer</td><td>ID of client whose info is to be fetched</td></tr>\n</table>\n<table><caption>HTTP statuses</caption>\n<tr><th>Status</th><th>Meaning</th>\n<tr><td>200 OK</td><td>returns <a href=\"#client-object\">Client</a> object</td></tr>\n<tr><td>401 Unauthorized</td><td>invalid or no <code>session</code> in cookies</td></tr>\n<tr><td>404 Not Found</td><td>no client with that ID</td></tr>\n</table>\n<table><caption>Returns a <a href=\"#client-object\">Client</a> object</caption>\n<tr><td class=\"pre\">{\n  \"client_id\": 1234567890,\n  \"token\": \"EaFfBJdC******...\",\n  \"username\": \"scratchusername\",\n  \"ratelimit\": 30\n}</td></tr>\n</table>\n</div></div>\n<h2 id=\"objects\">Objects</h2>\n<p>Various endpoints have defined return types or body structures. They are documented below.</p>\n<h3 id=\"verification-object\">Verification Object</h3>\n<p>Holds data related to verifying a user on Scratch.</p>\n<table><caption>Verification Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>code</td><td>string</td><td>verification code to post</td></tr>\n<tr><td>username</td><td>string</td><td>username being verified</td></tr>\n</table>\n<h3 id=\"admin-object\">Admin Object</h3>\n<p>Indicates whether the user who just <a href=\"#finish-logging-in-endpoint\">finished logging in</a> is an admin on the site or not.</p>\n<table><caption>Admin Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>admin</td><td>boolean</td><td>whether the user is an admin</td></tr>\n</table>\n<h3 id=\"user-object\">User Object</h3>\n<p>Holds data that a client needs to access the API.</p>\n<table><caption>User Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>client_id</td><td>integer</td><td>client ID</td></tr>\n<tr><td>token</td><td>string</td><td>API token for client</td></tr>\n<tr><td>username</td><td>string</td><td>username of client</td></tr>\n</table>\n<h3 id=\"log-object\">Log Object</h3>\n<p>Holds log data for a verification.</p>\n<table><caption>Log Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>log_id</td><td>integer</td><td>log ID</td></tr>\n<tr><td>client_id</td><td>integer</td><td>client ID responsible for this log</td></tr>\n<tr><td>username</td><td>string</td><td>username being verified</td></tr>\n<tr><td>log_time</td><td>integer</td><td>Unix epoch time of log</td></tr>\n<tr><td>log_type</td><td>integer</td><td><a href=\"#log-types\">log type</a></td></tr>\n</table>\n<h3 id=\"ratelimit-object\">Ratelimit Object</h3>\n<p>Holds data about a user's ratelimit.</p>\n<table><caption>Ratelimit Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>username</td><td>string</td><td>username being ratelimited</td></tr>\n<tr><td>ratelimit</td><td>integer</td><td>how many requests they can make per minute</td></tr>\n</table>\n<h3 id=\"partialratelimit-object\">PartialRatelimit Object</h3>\n<p>Holds data about a user's ratelimit, without their name</p>\n<table><caption>PartialRatelimit Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>ratelimit</td><td>integer</td><td>how many requests they can make per minute</td></tr>\n</table>\n<h3 id=\"ban-object\">Ban Object</h3>\n<p>Holds data about a user's ban status.</p>\n<table><caption>Ban Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>username</td><td>string</td><td>username being banned</td></tr>\n<tr><td>expiry</td><td>integer?</td><td>Unix timestamp when their ban expires. <code>null</code> means a permanent ban.</td></tr>\n</table>\n<h3 id=\"partialban-object\">PartialBan Object</h3>\n<p>Holds data about a user's ban status, without their name.</p>\n<table><caption>PartialBan Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>expiry</td><td>integer?</td><td>Unix epoch time when their ban expires. <code>null</code> means a permanent ban.</td></tr>\n</table>\n<h3 id=\"auditlog-object\">AuditLog Object</h3>\n<p>Holds log data for an admin action.</p>\n<table><caption>AuditLog Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>id</td><td>integer</td><td>log ID</td></tr>\n<tr><td>username</td><td>string</td><td>username of action performer</td></tr>\n<tr><td>time</td><td>integer</td><td>Unix epoch time of log</td></tr>\n<tr><td>type</td><td>integer</td><td><a href=\"#audit-log-types\">audit log type</a></td></tr>\n<tr><td>data</td><td>string</td><td>stringified JSON of action data</td></tr>\n</table>\n<h3 id=\"client-object\">Client Object</h3>\n<p>Holds data about a client.</p>\n<table><caption>Client Structure</caption>\n<tr><th>Field</th><th>Type</th><th>Description</th></tr>\n\n<tr><td>client_id</td><td>integer</td><td>client ID</td></tr>\n<tr><td>token</td><td>string</td><td>partially censored token of client</td></tr>\n<tr><td>username</td><td>string</td><td>username of owner</td></tr>\n<tr><td>ratelimit</td><td>integer?</td><td>how many requests this client can make per minute. Can be <code>null</code> if this client has never been used yet.</td></tr>\n</table>\n<h2 id=\"log-types\">Log Types</h2>\n<p>Logs can have four types:</p>\n<ul>\n<li><code>1</code>: verification started</li>\n<li><code>2</code>: verification succeeded</li>\n<li><code>3</code>: verification failed</li>\n<li><code>4</code>: verification invalidated</li>\n</ul>\n<h2 id=\"audit-log-types\">Audit Log Types</h2>\n<p>Audit logs can have three types:</p>\n<ul>\n<li><code>1</code>: user banned or user ban modified</li>\n<li><code>2</code>: user ratelimit modified</li>\n<li><code>3</code>: user unbanned</li>\n</ul>\n</div><div id=\"contents\"><h1>Navigation</h1>\n<div><a href=\"#api-reference\">API&nbsp;Reference</a>\n<ul>\n<li>\n<div><a href=\"#authorization\">Authorization</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#api-endpoints\">API&nbsp;Endpoints</a>\n<ul>\n<li>\n<div><a href=\"#start/renew-verification-endpoint\">Start/Renew&nbsp;Verification&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#finish-verification-endpoint\">Finish&nbsp;Verification&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#invalidate-verification-endpoint\">Invalidate&nbsp;Verification&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<div><a href=\"#api-registration-endpoints\">API&nbsp;Registration&nbsp;Endpoints</a>\n<ul>\n<li>\n<div><a href=\"#start-logging-in-endpoint\">Start&nbsp;Logging&nbsp;In&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#finish-logging-in-endpoint\">Finish&nbsp;Logging&nbsp;In&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#logout-all-sessions-endpoint\">Logout&nbsp;All&nbsp;Sessions&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#get-client-info-endpoint\">Get&nbsp;Client&nbsp;Info&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#create-client-endpoint\">Create&nbsp;Client&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#reset-token-endpoint\">Reset&nbsp;Token&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#delete-client-endpoint\">Delete&nbsp;Client&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#logout-session-endpoint\">Logout&nbsp;Session&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<div><a href=\"#api-usage-endpoints\">API&nbsp;Usage&nbsp;Endpoints</a>\n<ul>\n<li>\n<div><a href=\"#get-usage-logs-endpoint\">Get&nbsp;Usage&nbsp;Logs&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#get-usage-log-endpoint\">Get&nbsp;Usage&nbsp;Log&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<div><a href=\"#administrative-endpoints\">Administrative&nbsp;Endpoints</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#ratelimit-endpoints\">Ratelimit&nbsp;Endpoints</a>\n<ul>\n<li>\n<div><a href=\"#get-all-ratelimits-endpoint\">Get&nbsp;All&nbsp;Ratelimits&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#get-single-ratelimit-endpoint\">Get&nbsp;Single&nbsp;Ratelimit&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#modify-ratelimits-endpoint\">Modify&nbsp;Ratelimits&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#modify-single-ratelimit-endpoint\">Modify&nbsp;Single&nbsp;Ratelimit&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<div><a href=\"#ban-endpoints\">Ban&nbsp;Endpoints</a>\n<ul>\n<li>\n<div><a href=\"#get-all-bans-endpoint\">Get&nbsp;All&nbsp;Bans&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#get-single-ban-endpoint\">Get&nbsp;Single&nbsp;Ban&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#modify-bans-endpoint\">Modify&nbsp;Bans&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#modify-single-ban-endpoint\">Modify&nbsp;Single&nbsp;Ban&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#unban-endpoint\">Unban&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<div><a href=\"#audit-log-endpoints\">Audit&nbsp;Log&nbsp;Endpoints</a>\n<ul>\n<li>\n<div><a href=\"#get-audit-logs-endpoint\">Get&nbsp;Audit&nbsp;Logs&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#get-audit-log-endpoint\">Get&nbsp;Audit&nbsp;Log&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<div><a href=\"#miscellaneous-admin-tools\">Miscellaneous&nbsp;Admin&nbsp;Tools</a>\n<ul>\n<li>\n<div><a href=\"#get-client-info-endpoint\">Get&nbsp;Client&nbsp;Info&nbsp;Endpoint</a>\n<ul>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<div><a href=\"#objects\">Objects</a>\n<ul>\n<li>\n<div><a href=\"#verification-object\">Verification&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#admin-object\">Admin&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#user-object\">User&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#log-object\">Log&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#ratelimit-object\">Ratelimit&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#partialratelimit-object\">PartialRatelimit&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#ban-object\">Ban&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#partialban-object\">PartialBan&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#auditlog-object\">AuditLog&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#client-object\">Client&nbsp;Object</a>\n<ul>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<div><a href=\"#log-types\">Log&nbsp;Types</a>\n<ul>\n</ul>\n</li>\n<li>\n<div><a href=\"#audit-log-types\">Audit&nbsp;Log&nbsp;Types</a>\n<ul>\n</ul>\n</li>\n</ul>\n<div><a href=\"index.html\">Welcome&nbsp;to&nbsp;ScratchVerifier</a></div>\n<div><a href=\"usage.html\">ScratchVerifier&nbsp;Usage</a></div>\n<div><a href=\"registration.html\">ScratchVerifier&nbsp;Registration</a></div>\n</div></body>\n</html>\n"], "filenames": ["backend/db.py", "docs/docs.json", "docs/reference.html"], "buggy_code_start_loc": [165, 62, 24], "buggy_code_end_loc": [176, 63, 25], "fixing_code_start_loc": [164, 62, 24], "fixing_code_end_loc": [178, 63, 25], "type": "CWE-287", "message": "In ScratchVerifier before commit a603769, an attacker can hijack the verification process to log into someone else's account on any site that uses ScratchVerifier for logins. A possible exploitation would follow these steps: 1. User starts login process. 2. Attacker attempts login for user, and is given the same verification code. 3. User comments code as part of their normal login. 4. Before user can, attacker completes the login process now that the code is commented. 5. User gets a failed login and attacker now has control of the account. Since commit a603769 starting a login twice will generate different verification codes, causing both user and attacker login to fail. For clients that rely on a clone of ScratchVerifier not hosted by the developers, their users may attempt to finish the login process as soon as possible after commenting the code. There is no reliable way for the attacker to know before the user can finish the process that the user has commented the code, so this vulnerability only really affects those who comment the code and then take several seconds before finishing the login.", "other": {"cve": {"id": "CVE-2020-26236", "sourceIdentifier": "security-advisories@github.com", "published": "2020-11-20T18:15:11.963", "lastModified": "2020-12-04T17:25:07.253", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In ScratchVerifier before commit a603769, an attacker can hijack the verification process to log into someone else's account on any site that uses ScratchVerifier for logins. A possible exploitation would follow these steps: 1. User starts login process. 2. Attacker attempts login for user, and is given the same verification code. 3. User comments code as part of their normal login. 4. Before user can, attacker completes the login process now that the code is commented. 5. User gets a failed login and attacker now has control of the account. Since commit a603769 starting a login twice will generate different verification codes, causing both user and attacker login to fail. For clients that rely on a clone of ScratchVerifier not hosted by the developers, their users may attempt to finish the login process as soon as possible after commenting the code. There is no reliable way for the attacker to know before the user can finish the process that the user has commented the code, so this vulnerability only really affects those who comment the code and then take several seconds before finishing the login."}, {"lang": "es", "value": "En ScratchVerifier versiones anteriores al commit a603769, un atacante puede secuestrar el proceso de comprobaci\u00f3n para iniciar sesi\u00f3n en la cuenta de otra persona en cualquier sitio que use ScratchVerifier para iniciar sesi\u00f3n.&#xa0;Una posible explotaci\u00f3n seguir\u00eda estos pasos: 1. El usuario comienza el proceso de inicio de sesi\u00f3n.&#xa0;2. El atacante intenta iniciar sesi\u00f3n por el usuario y recibe el mismo c\u00f3digo de comprobaci\u00f3n .&#xa0;3. Un c\u00f3digo de comentarios de usuario como parte de su inicio de sesi\u00f3n normal.&#xa0;4. Antes de que el usuario pueda, el atacante completa el proceso de inicio de sesi\u00f3n ahora que el c\u00f3digo es comentado.&#xa0;5. El usuario obtiene un inicio de sesi\u00f3n fallido y el atacante ahora presenta el control de la cuenta.&#xa0;Dado que el commit a603769, comienza un inicio de sesi\u00f3n dos veces generar\u00e1 diferentes c\u00f3digos de comprobaci\u00f3n, causando un fallo al inicio de sesi\u00f3n del usuario y del atacante.&#xa0;Para los clientes que dependen de un clon de ScratchVerifier no alojado por los desarrolladores,&#xa0;sus usuarios pueden intentar finalizar el proceso de inicio de sesi\u00f3n lo antes posible despu\u00e9s de comentar el c\u00f3digo.&#xa0;No existe una forma confiable para que el atacante se entere antes que el usuario pueda finalizar el proceso que el usuario ha comentado el c\u00f3digo, por lo que esta vulnerabilidad solo afecta realmente a quienes comentan el c\u00f3digo y luego tardan varios segundos antes de finalizar el inicio de sesi\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.6, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.6, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:H/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "HIGH", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.1}, "baseSeverity": "MEDIUM", "exploitabilityScore": 4.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:scratchverifier:scratchverifier:*:*:*:*:*:*:*:*", "versionEndExcluding": "a603769", "matchCriteriaId": "9A0A98C4-97A6-464D-AB69-494E2A332B4F"}]}]}], "references": [{"url": "https://github.com/ScratchVerifier/ScratchVerifier/commit/a603769010abf8c1bede91af46e4945314e4aa4a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ScratchVerifier/ScratchVerifier/security/advisories/GHSA-99cr-hvf7-85g9", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ScratchVerifier/ScratchVerifier/commit/a603769010abf8c1bede91af46e4945314e4aa4a"}}