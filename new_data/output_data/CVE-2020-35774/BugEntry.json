{"buggy_code": [".. Author notes: this file is formatted with restructured text\n  (http://docutils.sourceforge.net/docs/user/rst/quickstart.html)\n  as it is included in TwitterServer's user's guide.\n\nNote that ``PHAB_ID=#`` and ``RB_ID=#`` correspond to associated messages in commits.\n\nUnreleased\n----------\n\n20.10.0\n-------\n\nNo Changes\n\n20.9.0\n------\n\nNo Changes\n\n* Bump version of Jackson to 2.11.2. ``PHAB_ID=D538440``\n\n* Encode the request URL names in /admin/clients/<client_name> and /admin/servers/<server_name>.\n  ``PHAB_ID=D540543``\n\n* If a client connecting to an instance of TwitterServer is sending a client certificate,\n  its expiry date (i.e. `Not After`) is now included as part of the information listed.\n  ``PHAB_ID=D528982``.\n\nBreaking API Changes\n~~~~~~~~~~~~~~~~~~~~\n\n* Add relative_name field to metrics in the Metrics Metadata endpoint and bump the\n  endpoints version number to 2.0. ``PHAB_ID=D552357``\n\n20.8.1\n------\n\n* Check SecurityManager permissions in the `ContentHandler` to ensure that contention\n  snapshotting is allowed. ``PHAB_ID=D531873``\n\n20.8.0\n------\n\nNo Changes\n\n20.7.0\n------\n\nBreaking API Changes\n~~~~~~~~~~~~~~~~~~~~\n\n* Make `Lifecycle` and `Lifecycle.Warmup` self-typed to `TwitterServer`. `Lifecycle` was previously\n  self-typed to `c.t.app.App` and `Lifecycle.Warmup` previously had no self-type restrictions. These\n  traits can now only be mixed into instances of `TwitterServer`. The `Lifecycle.DetatchedWarmup`\n  trait is introduced to allow users to transition to it, where they were previously extending\n  `Lifecycle.Warmup` without mixing into a `TwitterServer`. `Lifecycle.DetatchedWarmup`\n  is immediately deprecated and will be removed in a future release. ``PHAB_ID=D507392``\n\n20.6.0\n------\n\nNo Changes\n\n20.5.0\n------\n\n* Make lookup of Admin `LoggingHandler` more resilient when multiple implementations are detected.\n  Now instead of perhaps using an incorrect handler the server will instead emit a lint rule violation\n  and not attempt to install a logging handler ensuring that only when a single `LoggingHandler`\n  is located that the functionality is enabled. ``PHAB_ID=D484965``\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Bump jackson version to 2.11.0. ``PHAB_ID=D457496``\n\n20.4.1\n------\n\nNo Changes\n\n20.4.0\n------\n\nNo Changes\n\n20.3.0\n------\n\nNo Changes\n\n20.2.1\n------\n\n* Add `c.t.server.AbstractTwitterServer#onExitLast` to allow Java users to\n  easily register a final exit function. ``PHAB_ID=D433874``\n\n20.1.0\n------\n\nChanged\n~~~~~~~\n\n* Upgrade logback to 1.2.3 ``PHAB_ID=D415888``\n\n\n19.12.0\n-------\n\n* Upgrade to jackson 2.9.10 and jackson-databind 2.9.10.1 ``PHAB_ID=D410846``\n\n* Multiple changes have happened around query parameter retrieval in order\n  to remove duplicated functionality from Twitter Server that exists in\n  Finagle. Users are encouraged to use finagle-http's `Uri` class within their\n  own code to retrieve params. ``PHAB_ID=D398387``\n  * The `parse` method of `HttpUtils` has been removed.\n  * The protected `getParams` method of `TwitterHandler` has been removed.\n  * The signature of the `getGraceParam` method of `ShutdownHandler` has\n    been changed to take a `Request`.\n\n* Add a `disableAdminHttpServer` property to the `AdminHttpServer` that can be used to\n  prevent the `AdminHttpServer` from starting by default on a `TwitterServer`. ``PHAB_ID=D397925``\n\n* The `ResourceHandler` companion object is no longer a `JavaSingleton`.\n  ``PHAB_ID=D399947``\n\n* Update ScalaTest to 3.0.8, and ScalaCheck to 1.14.0. ``PHAB_ID=D408331``\n\n19.11.0\n-------\n\n* Add initial support for JDK 11 compatibility. ``PHAB_ID=D365075``\n\n* The endpoints section of the clients page has been fixed\n  to no longer render an incorrect html line break tag. ``PHAB_ID=D391907``\n\n19.10.0\n-------\n\nNo Changes\n\n19.9.0\n------\n\n* Changed `com.twitter.server.AdminHttpServer.routes` from a setter to getter, use it to get\n  all admin http server Routes. Use `com.twitter.server.AdminHttpServer.addAdminRoute` to add\n  a Route and `com.twitter.server.AdminHttpServer.addAdminRoutes` to add many Routes.\n  ``PHAB_ID=D354013``\n\n19.8.0\n------\n\nChanges\n~~~~~~~\n\n* Upgrade to Jackson 2.9.9. ``PHAB_ID=D345969``\n\n19.7.0\n------\n\nChanges\n~~~~~~~\n\n* Remove `c.t.server.util.TwitterStats` as it is dead code. ``PHAB_ID=D330013``\n\n19.6.0\n------\n\nChanges\n~~~~~~~\n\n* Remove the TwitterServer dependency on Netty 3. ``PHAB_ID=D328148``\n\nNew Features\n~~~~~~~~~~~~\n\n* Added an admin page, /admin/servers/connections.json with details about incoming connections,\n  including encryption status and remote principal ``PHAB_ID=D329940``\n\n19.5.1\n------\n\nNo Changes\n\n19.5.0\n------\n\nChanges\n~~~~~~~\n\n* Add `DuplicateFlagDefinitions` lint rule which is violated when multiple Flags with the same\n  name are added to the underlying `com.twitter.app.App#flag` `com.twitter.app.Flags` instance.\n  ``PHAB_ID=D314410``\n\n19.4.0\n------\n\nChanges\n~~~~~~~\n\n* Remove deprecated uses of `c.t.server.ShadowAdminServer`. ``PHAB_ID=D269149``\n\n* Mix in the `c.t.finagle.DtabFlags` to allow servers to append to the \"base\" `c.t.finagle.Dtab`\n  delegation table. Users can now call `c.t.finagle.DtabFlags#addDtabs()` when they want to append\n  the parsed Flag value to the `Dtab.base` delegation table. Users should note to only call this\n  method _after_ Flag parsing has occurred (which is after **init** and before **premain**).\n\n  We also update the `c.t.server.handler.DtabHandler` to always return a proper JSON response of\n  the currently configured `c.t.finagle.Dtab.base`. ``PHAB_ID=D297596``\n\n19.3.0\n------\n\n* Change the /admin/histograms?h=...-style endpoints to return data in the same style as\n  /admin/histograms.json. This should make it easier to use tools to parse data from either\n  endpoint. ``PHAB_ID=D279779``\n\n19.2.0\n------\n\nNo Changes\n\n19.1.0\n------\n\n* Propagate the admin server's shutdown to the handlers that are registered with the admin server.\n  ``PHAB_ID=D254656``\n\n18.12.0\n-------\n\nNo Changes\n\n18.11.0\n-------\n\nNo Changes\n\n18.10.0\n-------\n\nChanges\n~~~~~~~\n\n* Deprecate `c.t.server.AdminHttpServer#routes`. Routes should be added to the `AdminHttpServer`\n  via `c.t.server.AdminHttpServer#addAdminRoutes`. ``PHAB_ID=D230247``\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Update `BuildProperties` to not emit a warning when no `build.properties` file can be\n  located. ``PHAB_ID=D229586``\n\n18.9.1\n------\n\nNo Changes\n\n18.9.0\n------\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Move logic to parse the server `build.properties` file out the `c.t.server.handler.ServerInfoHandler`\n  and into a utility object, `c.t.server.BuildProperties` to allow for accessing by other server\n  logic such that the properties do not need to be re-parsed anytime access is desired. Failure to\n  load the properties can result in the server not starting in the case of a Fatal exception\n  being thrown. ``PHAB_ID=D201207``\n\n* Update `TwitterServer` trait to override the inherited `ShutdownTimer` to be the Finagle\n  `DefaultTimer` instead of the `c.t.util.JavaTimer` defined by default in `c.t.app.App`. Also\n  update the overridden `suppressGracefulShutdownErrors` in `TwitterServer` to be a val since\n  it is constant (instead of a def). ``PHAB_ID=D212896``\n\n18.8.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* Add `onExit` lifecycle callback to `c.t.server.Hook` (which is now an abstract class) to allow\n  implemented hooks to execute functions in the `App#onExit` lifecycle phase. Note:\n  `c.t.server.Hook#premain` now has a default implementation and requires the `override` modifier.\n  ``PHAB_ID=D198379``\n\n18.7.0\n------\n\nNo Changes\n\n18.6.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* Added an admin page at \"/admin/balancers.json\" with details about client load balancers,\n  including both configuration and current status. ``PHAB_ID=D171589``\n\n18.5.0\n------\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Overloaded `c.t.server.AdminHttpServer#isolate` to accept a\n  `Service[Request, Response]`. ``PHAB_ID=D157891``\n\n18.4.0\n------\n\nNo Changes\n\n18.3.0\n------\n\nNo Changes\n\n18.2.0\n------\n\nDependencies\n~~~~~~~~~~~~\n\n* Removed 'finagle-zipkin-core' as a depdendency since there was no\n  code in twitter-server which used it. ``PHAB_ID=D129515``\n\n18.1.0\n------\n\nNo Changes\n\n17.12.0\n-------\n\nBug Fixes\n~~~~~~~~~\n\n* Treat `io.netty.channel.epoll.Native.epollWait0` as an idle thread on\n  \"/admin/threads\". This method is observed when using Netty 4's native\n  transport. ``PHAB_ID=D115058``\n\n17.11.0\n-------\n\nBreaking API Changes\n~~~~~~~~~~~~~~~~~~~~\n\n* Change to apply JUL log format in the `c.t.server.logging.Logging` trait\n  constructor instead of in `premain` to apply format as early in the logging\n  stack as possible. However, this means that users overriding the\n  `def defaultFormatter` will not be able to use any flags to configure their\n  formatting, note: the default `LogFormatter` does not use flags.\n  ``PHAB_ID=D106534``\n\n17.10.0\n-------\n\nRelease Version Format\n~~~~~~~~~~~~~~~~~~~~~~\n\n* From now on, release versions will be based on release date in the format of\n  YY.MM.x where x is a patch number. ``PHAB_ID=D101244``\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* All admin endpoints except ping + healthcheck are now by-default served outside\n  the global worker pool. ``PHAB_ID=D96633``\n\nBreaking API Changes\n~~~~~~~~~~~~~~~~~~~~\n\n* Rename AdminHttpServer#defaultHttpPort to AdminHttpServer#defaultAdminPort.\n  ``PHAB_ID=D97394``\n\n1.32.0\n------\n\nBreaking API Changes\n~~~~~~~~~~~~~~~~~~~~\n\n* Removed code related to `util-events` including `EventSink`, `JsonSink`,\n  `TraceEventSink`. The corresponding \"/admin/events\" and \"/admin/events/record/\"\n  admin HTTP endpoints are also removed. ``PHAB_ID=D82346``\n\n1.31.0\n------\n\nNo Changes\n\n1.30.0\n------\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* The admin server now waits for other registered closables to shut down\n  before commencing its own shutdown. ``RB_ID=916421``\n\nBreaking API Changes\n~~~~~~~~~~~~~~~~~~~~\n\n* Removed `c.t.server.Closer` trait. Behavior has been moved to\n  `c.t.app.App`. ``RB_ID=915485``\n\n1.29.0\n------\n\nNo Changes\n\n1.28.0\n------\n\nDependencies\n~~~~~~~~~~~~\n\n* Bump guava to 19.0. ``RB_ID=907807``\n\n1.27.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* Add lint error warning on admin summary page. ``RB_ID=898202``\n\n1.26.0\n------\n\nBug Fixes\n~~~~~~~~~\n\n* Server graphs are now displaying again on the Twitter Server Summary page.\n  ``RB_ID=898422``\n\n1.25.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* Add ability to specify admin interface UI grouping, alias, and path for admin\n  handlers using the newly added Route and RouteUi. ``RB_ID=886829``\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Removed `scala-xml` dependency. ``RB_ID=890315``\n\n1.24.0\n------\n\nNo Changes\n\n1.23.0\n------\n\nNo Changes\n\n1.22.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* No longer need to add an additional resolver that points to maven.twttr.com.\n  ``RB_ID=878967``\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* ShutdownHandler and AbortHandler accept only POST requests and ignore\n  non-POST requests. ``RB_ID=848212``\n\n1.21.0\n------\n\nBug Fixes\n~~~~~~~~~\n\n* Escape user input that is rendered in HTML, and make bin/travisci publish\n  finagle-toggle. ``RB_ID=848579``\n\nNew Features\n~~~~~~~~~~~~\n\n* Add optional HTTP request parameter `filter` to `/admin/registry.json`\n  allowing for simple filtering of the returned JSON. ``RB_ID=842784``\n\n* Add admin endpoint, `/admin/toggles`, for\n  `c.t.finagle.toggle.StandardToggleMap` registered `Toggles`.\n  ``RB_ID=847434``\n\nBreaking API Changes\n~~~~~~~~~~~~~~~~~~~~\n\n* Removed AdminHttpServer#mkRoutex method. This method was created during the\n  migration away from direct usage of netty http types and is now\n  redundant. ``RB_ID=835083``\n\n* Builds are now only for Java 8 and Scala 2.11. See the\n  `blog post <https://finagle.github.io/blog/2016/04/20/scala-210-and-java7/>`_\n  for details. ``RB_ID=828898``\n\n1.20.0\n------\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Introduce a new lifecycle event `prebindWarmup` for warmup code\n  which needs to run before the service handles traffic. GC has\n  moved from `warmupComplete` to `prebindWarmup`. ``RB_ID=819411``\n\nNew Features\n~~~~~~~~~~~~\n\n* Update to register TwitterServer as library in /admin/registry.json. ``RB_ID=825129``\n* Add a FailFast lint rule for Memcached client. ``RB_ID=808727``\n\n1.19.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* Add AdminHttpServer#boundAddress to expose the bound address of\n  the AdminHttpServer. ``RB_ID=798322``\n\n1.18.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* Add new admin endpoint \"/\" which redirects requests to \"/admin\". ``RB_ID=777247``\n\n1.17.0\n------\n\nNOT RELEASED\n\n1.16.0\n------\n\n1.15.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* Add new admin endpoint \"/admin/lint\" which checks for possible issues with\n  performance or configuration. ``RB_ID=754348``\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* We no longer export a \"scheduler/productivity\" stat because various implementation\n  details made it difficult to report reliably.\n\n1.14.0\n------\n\nDependencies\n~~~~~~~~~~~~\n\n* Converted to finagle-httpx. Projects that depend transitively on\n  finagle-http through twitter-server will need to switch to finagle-httpx.\n  ``RB_ID=741454`` ``RB_ID=740731``\n\n1.13.0\n------\n\n1.12.0\n------\n\n* Enable syntax highlighting in the docs\n\n1.11.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* Introduce AbstractTwitterServer, a Java-friendly version of TwitterServer. RB_ID=661878\n\n1.10.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* TwitterServer collects a statically allocated ring of runtime events, which be viewed\n  at /admin/events, and downloaded as JSON with a HTTP client like curl (or by simply\n  omitting the User-Agent header in the request).\n\n* TwitterServer exports runtime configuration data about your service, which can be\n  downloaded as json at /admin/registry.json.\n\nDependencies\n~~~~~~~~~~~~\n\n* Bumped many dependency versions.\n\n1.9.0\n-----\n\nNew Features\n~~~~~~~~~~~~\n\n* Most noticeably, the admin server received a complete UI redesign. All http endpoints are\n  now available via a navigation pane. We provide a simple API for service owners to include\n  ad-hoc admin pages which will be part of the navigation pane. Note, it is still possible to\n  join the admin server\u2019s namespace via the global com.twitter.finagle.http.HttpMuxer.\n\n* When using the twitter Metrics library, the admin server now scrapes your stats to\n  extract a quick summary of how your server is performing. This includes secondly\n  success rates for your server and least performant downstreams. We provide a /admin/metrics\n  endpoint which can watch stats (at secondly granularity) and extract them via http queries.\n\n* More recently, Finagle clients and servers began to retain information about their composition.\n  This is useful in examining the modules and parameters that comprise a specific implementation.\n  We now surface this information in the admin server via /admin/clients/<client_name> and\n  /admin/servers/<server_name>\n\n* TwitterServer now exposes a /admin/registry.json endpoint, which speaks json and exposes the\n  values from util-registry as labels. Most labels are long-lived, and tend to represent something\n  about a process that is true for the entire lifetime, like the version of a library, or what a\n  flag was set to.\n\nDependencies\n~~~~~~~~~~~~\n\n* Remove dependency on mustache for admin server in favor of templating\n  via string interpolation. This is more hygienic for web applications\n  and frameworks built atop twitter-server.\n\n1.8.0\n-----\n\nNew Features\n~~~~~~~~~~~~\n\n* Add the ability to promote objects to old gen before serving\n* Export everything from build.properties at /admin/server_info\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Add merge_base merge_base_commit_date and scm_repository to server_info\n* AdminHttpServer now disables tracing\n* Export gauge on eden allocations\n* Improve heuristic for returning html or not in WebHandler\n* Initial redesign of admin pages\n\nBreaking API Changes\n~~~~~~~~~~~~~~~~~~~~\n\n* Remove ServerInfo class: export /admin/server_info directly from build.properties file\n\n1.7.6\n-----\n\n* twitter-server: Add gauge on eden allocations\n* twitter-server: Do not trace the admin http server\n* twitter-server: JvmStats needs to call Allocations.start()\n* twitter-server: Log severely if a flag is read at the wrong time\n* twitter-server: Parameterize IndexHandler on a `patterns: Seq[String]`\n* twitter-server: Proper resource loading in admin pages\n* twitter-server: Redesign of twitter-server admin page\n\n1.7.3\n-----\n\n- Add admin endpoint for per-client configuration\n- Add trace ID to twitter-server logging\n- Create a logging handler for on-the-fly logging updates\n\n1.7.2\n-----\n\n- release finagle v6.18.0\n- release util v6.18.0\n- user guide: Add blurb about filtering out stats\n\n1.7.1\n-----\n\n- Upgrade versions of all dependencies\n- Admin dtab handler: display base dtab\n- Change productivity stat to cpuTime/wallTime\n\n1.7.0\n-----\n\n- Bump finagle to 6.16.1-SNAPSHOT\n- Bump util to 6.16.1-SNAPSHOT\n- Disable admin server stats\n\n1.6.3\n-----\n\n- Define type for statsReceiver explicitly so that it can be overloaded\n- Store gauge references (otherwise only weakly referenced)\n- Enforce close grace period for com.twitter.app.App\n- upgrade finagle/util to 6.15.0\n\n1.6.2\n-----\n\n- Add com.twitter.io.Charsets and replace the use of org.jboss.netty.util.CharsetUtil\n- Fix twitter-server execution test\n\n1.6.1\n-----\n\n- upgrade finagle to 6.13.1\n- upgrade util to 6.13.2\n\n1.6.0\n-----\n\n- upgrade finagle version to 6.13.0\n- Implement application-level shutdown handling in App.\n- Bug-fix: Refresh JVM memory snapshots on stats collection Motivation\n- Bug-fix: set content-length when responding from TwitterHandler\n\n1.5.1\n-----\n\n- update finable to 6.12.1\n- update util to 6.12.1\n\n1.5.0\n-----\n\n- Add logging to TwitterHandlers\n- Report on deadlock conditions in admin/contentions\n- Twitter server handler for dumping the current dtab\n- TwitterHandler: non-root logger\n- update finagle version to 6.12.0\n- update util version to 6.12.0\n\n1.4.1\n-----\n\n- Upgrade finagle to 6.11.1\n- Upgrade util to 6.11.1\n\n1.4.0\n-----\n\n- Remove finagle-stats dependency so that alternate stats packages can be used such as ostrich\n- Add a hooking mechanism and expose an API to install the Dtab using the hooking mechanism\n- Upgrade finagle to 6.10.0\n- Upgrade util to 6.10.0\n\n1.3.1\n-----\n\n- Upgrade finagle to 6.8.1\n- Upgrade util to 6.8.1\n\n1.3.0\n-----\n\n- Upgrade finagle to 6.8.0\n- Upgrade util to 6.8.0\n- Adds a cautious registration to HttpMuxer / adds a default metrics endpoint to twitter-server\n- Docs: Pointed out that you need the finagle-stats jar on your classpath\n- Sync jackson versions in twitter-server\n- Revert ordering of TwitterServer mixins.\n- Mix in Closer by default... again.\n\n1.2.0\n-----\n\n- Support staged names introduced in Finagle\n- Add glog-style log formatting\n- Remove finagle-stats as a dependency\n- Don't stat admin endpoints\n\n1.1.0\n-----\n\n- Add ability to defer /health endpoint registration\n- Add new stats for current memory usage.\n- Change twitter-server admin http server flag and symbol name\n- Enable zipkin\n- Make Logging trait more flexible for easy extension\n- New scheduler \"productivity\" stats, dispatches.\n\n1.0.3\n-----\n\n- bump finagle to 6.5.2\n- bump util to 6.3.8\n\n1.0.2\n-----\n\n- bump finagle to 6.5.1\n- bump util to 6.3.7\n\n1.0.1\n-----\n\n- Initial Release\n", "package com.twitter.server.handler\n\nimport com.twitter.finagle.Service\nimport com.twitter.finagle.http.{Request, Response, Uri}\nimport com.twitter.finagle.stats.{BucketAndCount, HistogramDetail, WithHistogramDetails}\nimport com.twitter.io.Buf\nimport com.twitter.server.util.HtmlUtils.escapeHtml\nimport com.twitter.server.util.HttpUtils.newResponse\nimport com.twitter.server.util.JsonConverter\nimport com.twitter.util.Future\n\nobject HistogramQueryHandler {\n\n  private val ContentTypeJson = \"application/json;charset=UTF-8\"\n  private val ContentTypeHtml = \"text/html;charset=UTF-8\"\n\n  private case class Summary(\n    name: String,\n    count: Long,\n    sum: Long,\n    average: Option[Long],\n    min: Option[Long],\n    max: Option[Long],\n    percentiles: Map[String, Long])\n\n  /** the name and percentile thresholds used for summaries */\n  private val SummaryThresholds = Seq(\n    \"p50\" -> 0.5,\n    \"p90\" -> 0.9,\n    \"p95\" -> 0.95,\n    \"p99\" -> 0.99,\n    \"p999\" -> 0.999,\n    \"p9999\" -> 0.9999\n  )\n\n  /**\n   * Stores histogram bucket and a percentage.\n   * The percentage is either the density or a\n   * cumulative distribution for the bucket\n   */\n  case class BucketAndPercentage(lowerLimit: Long, upperLimit: Long, percentage: Float)\n\n  private[HistogramQueryHandler] def countPoints(counts: Seq[BucketAndCount]): Int =\n    counts.foldLeft(0) { case (acc, v) => acc + v.count }\n\n  // For each key return a percentage\n  private[server] def pdf(counts: Seq[BucketAndCount]): Seq[BucketAndPercentage] = {\n    val count = countPoints(counts)\n    counts.map { v => BucketAndPercentage(v.lowerLimit, v.upperLimit, v.count.toFloat / count) }\n  }\n\n  // For each key return a cumulative percentage\n  private[server] def cdf(counts: Seq[BucketAndCount]): Seq[BucketAndPercentage] = {\n    val count = countPoints(counts)\n    var c = 0\n    counts.map { v: BucketAndCount =>\n      c += v.count\n      BucketAndPercentage(v.lowerLimit, v.upperLimit, c.toFloat / count)\n    }\n  }\n\n  private[HistogramQueryHandler] def deliverData(\n    counts: Map[String, Seq[BucketAndCount]],\n    transform: Seq[BucketAndCount] => Any\n  ): String =\n    // \".toMap\" is important here for scala 2.13 as otherwise it will be a MapView which\n    // doesn't serialize correctly with Jackson\n    JsonConverter.writeToString(counts.mapValues(transform).toMap)\n\n  // Generates html for visualizing histograms\n  private[HistogramQueryHandler] val render: String = {\n    val css =\n      \"\"\"<link type=\"text/css\" href=\"/admin/files/css/histogram-query.css\" rel=\"stylesheet\"/>\"\"\"\n\n    val chart =\n      \"\"\"<div class=\"chart\">\n             <div id=\"curve_chart\" style=\"width: 900px; height: 500px\"></div>\n           </div>\"\"\"\n\n    /** Generates an html table to display key statistics of a histogram */\n    val statsTable = {\n      def entry(id: String, display: String): String = {\n        s\"\"\"<tr>\n                <td style=\"text-align:left\">${escapeHtml(display)}</td>\n                <td style=\"text-align:left\" id=\"$id\"></td>\n              </tr>\"\"\"\n      }\n      s\"\"\"\n          <div id=\"stats\">\n            <table>\n              <thead>\n                <th style=\"text-align:left\" colspan=\"2\">Details</th>\n              </thead>\n              <tbody>\n                ${entry(\"detail_count\", \"Count\")}\n                ${entry(\"detail_sum\", \"Sum\")}\n                ${entry(\"detail_average\", \"Average\")}\n                ${entry(\"detail_min\", \"Min\")}\n                ${entry(\"detail_max\", \"Max\")}\n                ${entry(\"detail_p50\", \"p50\")}\n                ${entry(\"detail_p90\", \"p90\")}\n                ${entry(\"detail_p95\", \"p95\")}\n                ${entry(\"detail_p99\", \"p99\")}\n                ${entry(\"detail_p999\", \"p999\")}\n                ${entry(\"detail_p9999\", \"p9999\")}\n              </tbody>\n            </table>\n          </div>\"\"\"\n    }\n\n    val buttonPanel =\n      \"\"\"<div id=\"option-panel\">\n          <form action=\"post\">\n            <span class=\"option-description\">Type:\n              <a id=\"PDF\" class=\"button-switch button-light-green left-rounded\" title=\"Probability density function\">PDF</a><a id=\"CDF\" class=\"button-switch button-green right-rounded\" title=\"Cumulative distribution function\">CDF</a>\n            </span>\n\n            <span class=\"option-description\">Scale:\n              <a id=\"reg\" class=\"button-switch button-red left-rounded\" title=\"Linear scale\">Reg</a><a id=\"log\" class=\"button-switch button-light-red right-rounded\" title=\"Log scale\">Log</a>\n            </span>\n\n            <span class=\"option-description\">Refresh:\n              <a id=\"refreshOn\" class=\"button-switch button-gray left-rounded\" title=\"Refresh the plot every minute\">On</a><a id=\"refreshOff\" class=\"button-switch button-black right-rounded\">Off</a>\n            </span>\n\n            <span class=\"option-description-last\"><a id=\"download-link\" class=\"button-download button-blue\" title=\"Download bucket counts in json\">Download</a></span>\n          </form>\n        </div>\"\"\"\n\n    val scripts =\n      \"\"\"\n        <script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>\n        <script type=\"text/javascript\" src=\"/admin/files/js/histogram-utils.js\"></script>\n        <script type=\"text/javascript\" src=\"/admin/files/js/histogram-dom.js\"></script>\n        <script type=\"text/javascript\" src=\"/admin/files/js/histogram-main.js\"></script>\"\"\"\n    css + chart + statsTable + buttonPanel + scripts\n  }\n\n  // Generates html for the histogram selection page (/admin/histograms)\n  private[HistogramQueryHandler] def renderFront(keys: Seq[String]): String = {\n    val css =\n      \"\"\"\n      <link type=\"text/css\" href=\"/admin/files/css/metric-query.css\" rel=\"stylesheet\"/>\n      <link type=\"text/css\" href=\"/admin/files/css/histogram-homepage.css\" rel=\"stylesheet\"/>\n      \"\"\"\n    val histogramListing = s\"\"\"\n      <div id=\"metrics-grid\" class=\"row\">\n        <div class=\"col-md-4 snuggle-right\">\n          <ul id=\"metrics\" class=\"list-unstyled\">\n            ${(for (key <- keys.sorted) yield {\n      s\"\"\"<li id=\"${key.replace(\"/\", \"-\")}\"><a id=\"special-$key\">${escapeHtml(key)}</a></li>\"\"\"\n    }).mkString(\"\\n\")}\n          </ul>\n        </div>\n        <div class=\"col-md-8 snuggle-left\">\n          <div style=\"width: 95%; margin: 0 auto;\">\n            <div id=\"metrics-header\">Histograms</div>\n            <ul>\n              <li class=\"metrics-point\">Visualize metric distributions</li>\n              <li class=\"metrics-point\">Download histogram contents</li>\n              <li class=\"metrics-point\">For more, read the\n                <a id=\"doc-link\" href=\"https://twitter.github.io/twitter-server/Features.html#histograms\">docs</a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      \"\"\"\n\n    val scripts = s\"\"\"\n      <script>\n        ${(for (key <- keys.sorted) yield {\n      s\"\"\"document.getElementById(\"special-$key\").setAttribute(\"href\", window.location.href + \"?h=$key&fmt=plot_cdf\");\"\"\"\n    }).mkString(\"\\n\")}\n      </script>\n      \"\"\"\n    css + histogramListing + scripts\n  }\n}\n\n/**\n * A handler which accepts queries via http strings and returns\n * json encoded histogram details\n */\nprivate[server] class HistogramQueryHandler(details: WithHistogramDetails)\n    extends Service[Request, Response] {\n  import HistogramQueryHandler._\n\n  // If possible, access histograms inside statsReceiversLoaded\n  private[this] def histograms: Map[String, HistogramDetail] = details.histogramDetails\n\n  private[this] def jsonResponse(\n    query: String,\n    transform: Seq[BucketAndCount] => String\n  ): Future[Response] =\n    newResponse(\n      contentType = ContentTypeJson,\n      content = {\n        val text = histograms.get(query) match {\n          case Some(h) => transform(h.counts)\n          case None => s\"Key: $query is not a valid histogram.\"\n        }\n        Buf.Utf8(text)\n      }\n    )\n\n  private[this] def renderHistogramsJson: String =\n    JsonConverter.writeToString(histograms.map {\n      case (key, value) =>\n        (key, value.counts)\n    })\n\n  // needs a special case for the upper bound sentinel.\n  private[this] def midPoint(bc: BucketAndCount): Double =\n    if (bc.upperLimit >= Int.MaxValue) bc.lowerLimit\n    else (bc.upperLimit + bc.lowerLimit) / 2.0\n\n  private[this] def generateSummary(histoName: String): Option[Summary] = {\n    histograms.get(histoName).map { detail =>\n      val bcs = detail.counts.sortBy(_.lowerLimit)\n\n      // first, the basic computations: sum, count, min, max, average\n      val min = bcs.headOption.map(_.lowerLimit)\n      val max = bcs.lastOption.map(_.upperLimit)\n      var sum = 0.0\n      var count = 0L\n      bcs.foreach { bc =>\n        count += bc.count\n        sum += bc.count.toDouble * midPoint(bc)\n      }\n      val average =\n        if (count == 0L) None\n        else Some(sum.toLong / count)\n\n      // note: this is modeled after `c.t.f.stats.BucketedHistogram.percentile`\n      def percentile(total: Long, p: Double): Long = {\n        if (p < 0.0 || p > 1.0)\n          throw new AssertionError(s\"percentile must be within 0.0 to 1.0 inclusive: $p\")\n\n        val target = Math.round(p * total)\n\n        val iter = bcs.iterator\n        var sum = 0L\n        var bc: BucketAndCount = null\n        while (iter.hasNext && sum < target) {\n          bc = iter.next()\n          sum += bc.count\n        }\n        bc match {\n          case null => 0\n          case _ if !iter.hasNext => max.getOrElse(0)\n          case _ => midPoint(bc).toLong\n        }\n      }\n\n      val percentiles: Map[String, Long] = SummaryThresholds.map {\n        case (name, p) =>\n          name -> percentile(count, p)\n      }.toMap\n\n      Summary(\n        name = histoName,\n        count = count,\n        sum = sum.toLong,\n        average = average,\n        min = min,\n        max = max,\n        percentiles = percentiles\n      )\n    }\n  }\n\n  private[this] def renderSummary(summary: Summary): String =\n    JsonConverter.writeToString(summary)\n\n  private[this] def htmlResponse(query: String): Future[Response] =\n    newResponse(\n      contentType = ContentTypeHtml,\n      content = Buf.Utf8 {\n        if (histograms.contains(query))\n          render\n        else\n          s\"Key: $query is not a valid histogram.\"\n      }\n    )\n\n  /**\n   * Handles requests for all histograms (/admin/histogram.json)\n   * or for a specific histogram (/admin/histogram?h=...)\n   *\n   * For specific histograms the following options are available:\n   *\n   * \"h\": the name of the histogram\n   *    Ex: finagle/timer/deviation_ms\n   *\n   * \"fmt\": the type of format used to display results.\n   *    The formats we support are raw, pdf, and cdf\n   *    raw: histogram bucket counts\n   *      (use to do a custom computation with histogram counts)\n   *    pdf: percentage of total for each bucket\n   *      (use to identify modes of a distribution)\n   *    cdf: cumulative percentage of total for each bucket\n   *      (use to view more quantiles)\n   *\n   * \"log_scale\": whether or not the x-axis increases linearly or exponentially.\n   *    This parameter can be omitted if not querying for plots\n   *\n   * For `histograms.json`, if there is a `summary` parameter,\n   * it will return JSON summarizing the histogram for the given `h` parameter.\n   * {{{\n   * {\n   *   \"name\": \"finagle/timer/deviation_ms\",\n   *   \"summary\": {\n   *     \"count\": 65059,\n   *     \"sum\": 651088,\n   *     \"average\": 10,\n   *     \"min\": 1,\n   *     \"max\": 94,\n   *     \"percentiles\": {\n   *       \"p50\": 10,\n   *       \"p90\": 12,\n   *       \"p95\": 12,\n   *       \"p99\": 13,\n   *       \"p999\": 20,\n   *       \"p9999\": 52,\n   *     }\n   *   }\n   * }\n   * }}}\n   *\n   * If `h` is not found, an empty JSON hash will be returned `{}`.\n   */\n  def apply(req: Request): Future[Response] = {\n    val uri = Uri.fromRequest(req)\n    val path = uri.path\n    val params = uri.params\n\n    path match {\n      case \"/admin/histograms.json\" =>\n        if (!params.contains(\"summary\")) {\n          newResponse(contentType = ContentTypeJson, content = Buf.Utf8(renderHistogramsJson))\n        } else {\n          val summary: Option[Summary] = params.get(\"h\") match {\n            case Some(histoName) => generateSummary(histoName)\n            case _ => None\n          }\n          val text: String = summary match {\n            case Some(s) => renderSummary(s)\n            case None => \"{}\"\n          }\n          newResponse(contentType = ContentTypeJson, content = Buf.Utf8(text))\n        }\n      case \"/admin/histograms\" =>\n        params.get(\"h\") match {\n          case Some(query) =>\n            params.get(\"fmt\") match {\n              case Some(\"plot_pdf\") | Some(\"plot_cdf\") =>\n                htmlResponse(query)\n\n              case Some(\"raw\") =>\n                jsonResponse(\n                  query,\n                  { counts: Seq[BucketAndCount] =>\n                    deliverData(Map(query -> counts), identity)\n                  })\n\n              case Some(\"pdf\") =>\n                jsonResponse(\n                  query,\n                  { counts: Seq[BucketAndCount] =>\n                    deliverData(Map(query -> counts), x => pdf(x))\n                  })\n\n              case Some(\"cdf\") =>\n                jsonResponse(\n                  query,\n                  { counts: Seq[BucketAndCount] =>\n                    deliverData(Map(query -> counts), x => cdf(x))\n                  })\n\n              case _ =>\n                newResponse(\n                  contentType = ContentTypeHtml,\n                  content = Buf.Utf8(\"Please provide a format: fmt = raw | pdf | cdf\")\n                )\n            }\n          case _ =>\n            newResponse(\n              contentType = ContentTypeHtml,\n              content = Buf.Utf8(renderFront(histograms.keySet.toSeq))\n            )\n        }\n      case _ =>\n        newResponse(\n          contentType = ContentTypeHtml,\n          content = Buf.Utf8(\"Invalid endpoint. Did you mean /admin/histograms.json?\")\n        )\n    }\n  }\n}\n"], "fixing_code": [".. Author notes: this file is formatted with restructured text\n  (http://docutils.sourceforge.net/docs/user/rst/quickstart.html)\n  as it is included in TwitterServer's user's guide.\n\nNote that ``PHAB_ID=#`` and ``RB_ID=#`` correspond to associated messages in commits.\n\nUnreleased\n----------\n\n* Escape user-provided string from the returned text.  This removes a potential vector for an XSS\n  attack. ``PHAB_ID=D574844``\n\n20.10.0\n-------\n\nNo Changes\n\n20.9.0\n------\n\nNo Changes\n\n* Bump version of Jackson to 2.11.2. ``PHAB_ID=D538440``\n\n* Encode the request URL names in /admin/clients/<client_name> and /admin/servers/<server_name>.\n  ``PHAB_ID=D540543``\n\n* If a client connecting to an instance of TwitterServer is sending a client certificate,\n  its expiry date (i.e. `Not After`) is now included as part of the information listed.\n  ``PHAB_ID=D528982``.\n\nBreaking API Changes\n~~~~~~~~~~~~~~~~~~~~\n\n* Add relative_name field to metrics in the Metrics Metadata endpoint and bump the\n  endpoints version number to 2.0. ``PHAB_ID=D552357``\n\n20.8.1\n------\n\n* Check SecurityManager permissions in the `ContentHandler` to ensure that contention\n  snapshotting is allowed. ``PHAB_ID=D531873``\n\n20.8.0\n------\n\nNo Changes\n\n20.7.0\n------\n\nBreaking API Changes\n~~~~~~~~~~~~~~~~~~~~\n\n* Make `Lifecycle` and `Lifecycle.Warmup` self-typed to `TwitterServer`. `Lifecycle` was previously\n  self-typed to `c.t.app.App` and `Lifecycle.Warmup` previously had no self-type restrictions. These\n  traits can now only be mixed into instances of `TwitterServer`. The `Lifecycle.DetatchedWarmup`\n  trait is introduced to allow users to transition to it, where they were previously extending\n  `Lifecycle.Warmup` without mixing into a `TwitterServer`. `Lifecycle.DetatchedWarmup`\n  is immediately deprecated and will be removed in a future release. ``PHAB_ID=D507392``\n\n20.6.0\n------\n\nNo Changes\n\n20.5.0\n------\n\n* Make lookup of Admin `LoggingHandler` more resilient when multiple implementations are detected.\n  Now instead of perhaps using an incorrect handler the server will instead emit a lint rule violation\n  and not attempt to install a logging handler ensuring that only when a single `LoggingHandler`\n  is located that the functionality is enabled. ``PHAB_ID=D484965``\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Bump jackson version to 2.11.0. ``PHAB_ID=D457496``\n\n20.4.1\n------\n\nNo Changes\n\n20.4.0\n------\n\nNo Changes\n\n20.3.0\n------\n\nNo Changes\n\n20.2.1\n------\n\n* Add `c.t.server.AbstractTwitterServer#onExitLast` to allow Java users to\n  easily register a final exit function. ``PHAB_ID=D433874``\n\n20.1.0\n------\n\nChanged\n~~~~~~~\n\n* Upgrade logback to 1.2.3 ``PHAB_ID=D415888``\n\n\n19.12.0\n-------\n\n* Upgrade to jackson 2.9.10 and jackson-databind 2.9.10.1 ``PHAB_ID=D410846``\n\n* Multiple changes have happened around query parameter retrieval in order\n  to remove duplicated functionality from Twitter Server that exists in\n  Finagle. Users are encouraged to use finagle-http's `Uri` class within their\n  own code to retrieve params. ``PHAB_ID=D398387``\n  * The `parse` method of `HttpUtils` has been removed.\n  * The protected `getParams` method of `TwitterHandler` has been removed.\n  * The signature of the `getGraceParam` method of `ShutdownHandler` has\n    been changed to take a `Request`.\n\n* Add a `disableAdminHttpServer` property to the `AdminHttpServer` that can be used to\n  prevent the `AdminHttpServer` from starting by default on a `TwitterServer`. ``PHAB_ID=D397925``\n\n* The `ResourceHandler` companion object is no longer a `JavaSingleton`.\n  ``PHAB_ID=D399947``\n\n* Update ScalaTest to 3.0.8, and ScalaCheck to 1.14.0. ``PHAB_ID=D408331``\n\n19.11.0\n-------\n\n* Add initial support for JDK 11 compatibility. ``PHAB_ID=D365075``\n\n* The endpoints section of the clients page has been fixed\n  to no longer render an incorrect html line break tag. ``PHAB_ID=D391907``\n\n19.10.0\n-------\n\nNo Changes\n\n19.9.0\n------\n\n* Changed `com.twitter.server.AdminHttpServer.routes` from a setter to getter, use it to get\n  all admin http server Routes. Use `com.twitter.server.AdminHttpServer.addAdminRoute` to add\n  a Route and `com.twitter.server.AdminHttpServer.addAdminRoutes` to add many Routes.\n  ``PHAB_ID=D354013``\n\n19.8.0\n------\n\nChanges\n~~~~~~~\n\n* Upgrade to Jackson 2.9.9. ``PHAB_ID=D345969``\n\n19.7.0\n------\n\nChanges\n~~~~~~~\n\n* Remove `c.t.server.util.TwitterStats` as it is dead code. ``PHAB_ID=D330013``\n\n19.6.0\n------\n\nChanges\n~~~~~~~\n\n* Remove the TwitterServer dependency on Netty 3. ``PHAB_ID=D328148``\n\nNew Features\n~~~~~~~~~~~~\n\n* Added an admin page, /admin/servers/connections.json with details about incoming connections,\n  including encryption status and remote principal ``PHAB_ID=D329940``\n\n19.5.1\n------\n\nNo Changes\n\n19.5.0\n------\n\nChanges\n~~~~~~~\n\n* Add `DuplicateFlagDefinitions` lint rule which is violated when multiple Flags with the same\n  name are added to the underlying `com.twitter.app.App#flag` `com.twitter.app.Flags` instance.\n  ``PHAB_ID=D314410``\n\n19.4.0\n------\n\nChanges\n~~~~~~~\n\n* Remove deprecated uses of `c.t.server.ShadowAdminServer`. ``PHAB_ID=D269149``\n\n* Mix in the `c.t.finagle.DtabFlags` to allow servers to append to the \"base\" `c.t.finagle.Dtab`\n  delegation table. Users can now call `c.t.finagle.DtabFlags#addDtabs()` when they want to append\n  the parsed Flag value to the `Dtab.base` delegation table. Users should note to only call this\n  method _after_ Flag parsing has occurred (which is after **init** and before **premain**).\n\n  We also update the `c.t.server.handler.DtabHandler` to always return a proper JSON response of\n  the currently configured `c.t.finagle.Dtab.base`. ``PHAB_ID=D297596``\n\n19.3.0\n------\n\n* Change the /admin/histograms?h=...-style endpoints to return data in the same style as\n  /admin/histograms.json. This should make it easier to use tools to parse data from either\n  endpoint. ``PHAB_ID=D279779``\n\n19.2.0\n------\n\nNo Changes\n\n19.1.0\n------\n\n* Propagate the admin server's shutdown to the handlers that are registered with the admin server.\n  ``PHAB_ID=D254656``\n\n18.12.0\n-------\n\nNo Changes\n\n18.11.0\n-------\n\nNo Changes\n\n18.10.0\n-------\n\nChanges\n~~~~~~~\n\n* Deprecate `c.t.server.AdminHttpServer#routes`. Routes should be added to the `AdminHttpServer`\n  via `c.t.server.AdminHttpServer#addAdminRoutes`. ``PHAB_ID=D230247``\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Update `BuildProperties` to not emit a warning when no `build.properties` file can be\n  located. ``PHAB_ID=D229586``\n\n18.9.1\n------\n\nNo Changes\n\n18.9.0\n------\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Move logic to parse the server `build.properties` file out the `c.t.server.handler.ServerInfoHandler`\n  and into a utility object, `c.t.server.BuildProperties` to allow for accessing by other server\n  logic such that the properties do not need to be re-parsed anytime access is desired. Failure to\n  load the properties can result in the server not starting in the case of a Fatal exception\n  being thrown. ``PHAB_ID=D201207``\n\n* Update `TwitterServer` trait to override the inherited `ShutdownTimer` to be the Finagle\n  `DefaultTimer` instead of the `c.t.util.JavaTimer` defined by default in `c.t.app.App`. Also\n  update the overridden `suppressGracefulShutdownErrors` in `TwitterServer` to be a val since\n  it is constant (instead of a def). ``PHAB_ID=D212896``\n\n18.8.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* Add `onExit` lifecycle callback to `c.t.server.Hook` (which is now an abstract class) to allow\n  implemented hooks to execute functions in the `App#onExit` lifecycle phase. Note:\n  `c.t.server.Hook#premain` now has a default implementation and requires the `override` modifier.\n  ``PHAB_ID=D198379``\n\n18.7.0\n------\n\nNo Changes\n\n18.6.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* Added an admin page at \"/admin/balancers.json\" with details about client load balancers,\n  including both configuration and current status. ``PHAB_ID=D171589``\n\n18.5.0\n------\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Overloaded `c.t.server.AdminHttpServer#isolate` to accept a\n  `Service[Request, Response]`. ``PHAB_ID=D157891``\n\n18.4.0\n------\n\nNo Changes\n\n18.3.0\n------\n\nNo Changes\n\n18.2.0\n------\n\nDependencies\n~~~~~~~~~~~~\n\n* Removed 'finagle-zipkin-core' as a depdendency since there was no\n  code in twitter-server which used it. ``PHAB_ID=D129515``\n\n18.1.0\n------\n\nNo Changes\n\n17.12.0\n-------\n\nBug Fixes\n~~~~~~~~~\n\n* Treat `io.netty.channel.epoll.Native.epollWait0` as an idle thread on\n  \"/admin/threads\". This method is observed when using Netty 4's native\n  transport. ``PHAB_ID=D115058``\n\n17.11.0\n-------\n\nBreaking API Changes\n~~~~~~~~~~~~~~~~~~~~\n\n* Change to apply JUL log format in the `c.t.server.logging.Logging` trait\n  constructor instead of in `premain` to apply format as early in the logging\n  stack as possible. However, this means that users overriding the\n  `def defaultFormatter` will not be able to use any flags to configure their\n  formatting, note: the default `LogFormatter` does not use flags.\n  ``PHAB_ID=D106534``\n\n17.10.0\n-------\n\nRelease Version Format\n~~~~~~~~~~~~~~~~~~~~~~\n\n* From now on, release versions will be based on release date in the format of\n  YY.MM.x where x is a patch number. ``PHAB_ID=D101244``\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* All admin endpoints except ping + healthcheck are now by-default served outside\n  the global worker pool. ``PHAB_ID=D96633``\n\nBreaking API Changes\n~~~~~~~~~~~~~~~~~~~~\n\n* Rename AdminHttpServer#defaultHttpPort to AdminHttpServer#defaultAdminPort.\n  ``PHAB_ID=D97394``\n\n1.32.0\n------\n\nBreaking API Changes\n~~~~~~~~~~~~~~~~~~~~\n\n* Removed code related to `util-events` including `EventSink`, `JsonSink`,\n  `TraceEventSink`. The corresponding \"/admin/events\" and \"/admin/events/record/\"\n  admin HTTP endpoints are also removed. ``PHAB_ID=D82346``\n\n1.31.0\n------\n\nNo Changes\n\n1.30.0\n------\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* The admin server now waits for other registered closables to shut down\n  before commencing its own shutdown. ``RB_ID=916421``\n\nBreaking API Changes\n~~~~~~~~~~~~~~~~~~~~\n\n* Removed `c.t.server.Closer` trait. Behavior has been moved to\n  `c.t.app.App`. ``RB_ID=915485``\n\n1.29.0\n------\n\nNo Changes\n\n1.28.0\n------\n\nDependencies\n~~~~~~~~~~~~\n\n* Bump guava to 19.0. ``RB_ID=907807``\n\n1.27.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* Add lint error warning on admin summary page. ``RB_ID=898202``\n\n1.26.0\n------\n\nBug Fixes\n~~~~~~~~~\n\n* Server graphs are now displaying again on the Twitter Server Summary page.\n  ``RB_ID=898422``\n\n1.25.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* Add ability to specify admin interface UI grouping, alias, and path for admin\n  handlers using the newly added Route and RouteUi. ``RB_ID=886829``\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Removed `scala-xml` dependency. ``RB_ID=890315``\n\n1.24.0\n------\n\nNo Changes\n\n1.23.0\n------\n\nNo Changes\n\n1.22.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* No longer need to add an additional resolver that points to maven.twttr.com.\n  ``RB_ID=878967``\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* ShutdownHandler and AbortHandler accept only POST requests and ignore\n  non-POST requests. ``RB_ID=848212``\n\n1.21.0\n------\n\nBug Fixes\n~~~~~~~~~\n\n* Escape user input that is rendered in HTML, and make bin/travisci publish\n  finagle-toggle. ``RB_ID=848579``\n\nNew Features\n~~~~~~~~~~~~\n\n* Add optional HTTP request parameter `filter` to `/admin/registry.json`\n  allowing for simple filtering of the returned JSON. ``RB_ID=842784``\n\n* Add admin endpoint, `/admin/toggles`, for\n  `c.t.finagle.toggle.StandardToggleMap` registered `Toggles`.\n  ``RB_ID=847434``\n\nBreaking API Changes\n~~~~~~~~~~~~~~~~~~~~\n\n* Removed AdminHttpServer#mkRoutex method. This method was created during the\n  migration away from direct usage of netty http types and is now\n  redundant. ``RB_ID=835083``\n\n* Builds are now only for Java 8 and Scala 2.11. See the\n  `blog post <https://finagle.github.io/blog/2016/04/20/scala-210-and-java7/>`_\n  for details. ``RB_ID=828898``\n\n1.20.0\n------\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Introduce a new lifecycle event `prebindWarmup` for warmup code\n  which needs to run before the service handles traffic. GC has\n  moved from `warmupComplete` to `prebindWarmup`. ``RB_ID=819411``\n\nNew Features\n~~~~~~~~~~~~\n\n* Update to register TwitterServer as library in /admin/registry.json. ``RB_ID=825129``\n* Add a FailFast lint rule for Memcached client. ``RB_ID=808727``\n\n1.19.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* Add AdminHttpServer#boundAddress to expose the bound address of\n  the AdminHttpServer. ``RB_ID=798322``\n\n1.18.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* Add new admin endpoint \"/\" which redirects requests to \"/admin\". ``RB_ID=777247``\n\n1.17.0\n------\n\nNOT RELEASED\n\n1.16.0\n------\n\n1.15.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* Add new admin endpoint \"/admin/lint\" which checks for possible issues with\n  performance or configuration. ``RB_ID=754348``\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* We no longer export a \"scheduler/productivity\" stat because various implementation\n  details made it difficult to report reliably.\n\n1.14.0\n------\n\nDependencies\n~~~~~~~~~~~~\n\n* Converted to finagle-httpx. Projects that depend transitively on\n  finagle-http through twitter-server will need to switch to finagle-httpx.\n  ``RB_ID=741454`` ``RB_ID=740731``\n\n1.13.0\n------\n\n1.12.0\n------\n\n* Enable syntax highlighting in the docs\n\n1.11.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* Introduce AbstractTwitterServer, a Java-friendly version of TwitterServer. RB_ID=661878\n\n1.10.0\n------\n\nNew Features\n~~~~~~~~~~~~\n\n* TwitterServer collects a statically allocated ring of runtime events, which be viewed\n  at /admin/events, and downloaded as JSON with a HTTP client like curl (or by simply\n  omitting the User-Agent header in the request).\n\n* TwitterServer exports runtime configuration data about your service, which can be\n  downloaded as json at /admin/registry.json.\n\nDependencies\n~~~~~~~~~~~~\n\n* Bumped many dependency versions.\n\n1.9.0\n-----\n\nNew Features\n~~~~~~~~~~~~\n\n* Most noticeably, the admin server received a complete UI redesign. All http endpoints are\n  now available via a navigation pane. We provide a simple API for service owners to include\n  ad-hoc admin pages which will be part of the navigation pane. Note, it is still possible to\n  join the admin server\u2019s namespace via the global com.twitter.finagle.http.HttpMuxer.\n\n* When using the twitter Metrics library, the admin server now scrapes your stats to\n  extract a quick summary of how your server is performing. This includes secondly\n  success rates for your server and least performant downstreams. We provide a /admin/metrics\n  endpoint which can watch stats (at secondly granularity) and extract them via http queries.\n\n* More recently, Finagle clients and servers began to retain information about their composition.\n  This is useful in examining the modules and parameters that comprise a specific implementation.\n  We now surface this information in the admin server via /admin/clients/<client_name> and\n  /admin/servers/<server_name>\n\n* TwitterServer now exposes a /admin/registry.json endpoint, which speaks json and exposes the\n  values from util-registry as labels. Most labels are long-lived, and tend to represent something\n  about a process that is true for the entire lifetime, like the version of a library, or what a\n  flag was set to.\n\nDependencies\n~~~~~~~~~~~~\n\n* Remove dependency on mustache for admin server in favor of templating\n  via string interpolation. This is more hygienic for web applications\n  and frameworks built atop twitter-server.\n\n1.8.0\n-----\n\nNew Features\n~~~~~~~~~~~~\n\n* Add the ability to promote objects to old gen before serving\n* Export everything from build.properties at /admin/server_info\n\nRuntime Behavior Changes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Add merge_base merge_base_commit_date and scm_repository to server_info\n* AdminHttpServer now disables tracing\n* Export gauge on eden allocations\n* Improve heuristic for returning html or not in WebHandler\n* Initial redesign of admin pages\n\nBreaking API Changes\n~~~~~~~~~~~~~~~~~~~~\n\n* Remove ServerInfo class: export /admin/server_info directly from build.properties file\n\n1.7.6\n-----\n\n* twitter-server: Add gauge on eden allocations\n* twitter-server: Do not trace the admin http server\n* twitter-server: JvmStats needs to call Allocations.start()\n* twitter-server: Log severely if a flag is read at the wrong time\n* twitter-server: Parameterize IndexHandler on a `patterns: Seq[String]`\n* twitter-server: Proper resource loading in admin pages\n* twitter-server: Redesign of twitter-server admin page\n\n1.7.3\n-----\n\n- Add admin endpoint for per-client configuration\n- Add trace ID to twitter-server logging\n- Create a logging handler for on-the-fly logging updates\n\n1.7.2\n-----\n\n- release finagle v6.18.0\n- release util v6.18.0\n- user guide: Add blurb about filtering out stats\n\n1.7.1\n-----\n\n- Upgrade versions of all dependencies\n- Admin dtab handler: display base dtab\n- Change productivity stat to cpuTime/wallTime\n\n1.7.0\n-----\n\n- Bump finagle to 6.16.1-SNAPSHOT\n- Bump util to 6.16.1-SNAPSHOT\n- Disable admin server stats\n\n1.6.3\n-----\n\n- Define type for statsReceiver explicitly so that it can be overloaded\n- Store gauge references (otherwise only weakly referenced)\n- Enforce close grace period for com.twitter.app.App\n- upgrade finagle/util to 6.15.0\n\n1.6.2\n-----\n\n- Add com.twitter.io.Charsets and replace the use of org.jboss.netty.util.CharsetUtil\n- Fix twitter-server execution test\n\n1.6.1\n-----\n\n- upgrade finagle to 6.13.1\n- upgrade util to 6.13.2\n\n1.6.0\n-----\n\n- upgrade finagle version to 6.13.0\n- Implement application-level shutdown handling in App.\n- Bug-fix: Refresh JVM memory snapshots on stats collection Motivation\n- Bug-fix: set content-length when responding from TwitterHandler\n\n1.5.1\n-----\n\n- update finable to 6.12.1\n- update util to 6.12.1\n\n1.5.0\n-----\n\n- Add logging to TwitterHandlers\n- Report on deadlock conditions in admin/contentions\n- Twitter server handler for dumping the current dtab\n- TwitterHandler: non-root logger\n- update finagle version to 6.12.0\n- update util version to 6.12.0\n\n1.4.1\n-----\n\n- Upgrade finagle to 6.11.1\n- Upgrade util to 6.11.1\n\n1.4.0\n-----\n\n- Remove finagle-stats dependency so that alternate stats packages can be used such as ostrich\n- Add a hooking mechanism and expose an API to install the Dtab using the hooking mechanism\n- Upgrade finagle to 6.10.0\n- Upgrade util to 6.10.0\n\n1.3.1\n-----\n\n- Upgrade finagle to 6.8.1\n- Upgrade util to 6.8.1\n\n1.3.0\n-----\n\n- Upgrade finagle to 6.8.0\n- Upgrade util to 6.8.0\n- Adds a cautious registration to HttpMuxer / adds a default metrics endpoint to twitter-server\n- Docs: Pointed out that you need the finagle-stats jar on your classpath\n- Sync jackson versions in twitter-server\n- Revert ordering of TwitterServer mixins.\n- Mix in Closer by default... again.\n\n1.2.0\n-----\n\n- Support staged names introduced in Finagle\n- Add glog-style log formatting\n- Remove finagle-stats as a dependency\n- Don't stat admin endpoints\n\n1.1.0\n-----\n\n- Add ability to defer /health endpoint registration\n- Add new stats for current memory usage.\n- Change twitter-server admin http server flag and symbol name\n- Enable zipkin\n- Make Logging trait more flexible for easy extension\n- New scheduler \"productivity\" stats, dispatches.\n\n1.0.3\n-----\n\n- bump finagle to 6.5.2\n- bump util to 6.3.8\n\n1.0.2\n-----\n\n- bump finagle to 6.5.1\n- bump util to 6.3.7\n\n1.0.1\n-----\n\n- Initial Release\n", "package com.twitter.server.handler\n\nimport com.twitter.finagle.Service\nimport com.twitter.finagle.http.{Request, Response, Uri}\nimport com.twitter.finagle.stats.{BucketAndCount, HistogramDetail, WithHistogramDetails}\nimport com.twitter.io.Buf\nimport com.twitter.server.util.HtmlUtils.escapeHtml\nimport com.twitter.server.util.HttpUtils.newResponse\nimport com.twitter.server.util.JsonConverter\nimport com.twitter.util.Future\n\nobject HistogramQueryHandler {\n\n  private val ContentTypeJson = \"application/json;charset=UTF-8\"\n  private val ContentTypeHtml = \"text/html;charset=UTF-8\"\n\n  private case class Summary(\n    name: String,\n    count: Long,\n    sum: Long,\n    average: Option[Long],\n    min: Option[Long],\n    max: Option[Long],\n    percentiles: Map[String, Long])\n\n  /** the name and percentile thresholds used for summaries */\n  private val SummaryThresholds = Seq(\n    \"p50\" -> 0.5,\n    \"p90\" -> 0.9,\n    \"p95\" -> 0.95,\n    \"p99\" -> 0.99,\n    \"p999\" -> 0.999,\n    \"p9999\" -> 0.9999\n  )\n\n  /**\n   * Stores histogram bucket and a percentage.\n   * The percentage is either the density or a\n   * cumulative distribution for the bucket\n   */\n  case class BucketAndPercentage(lowerLimit: Long, upperLimit: Long, percentage: Float)\n\n  private[HistogramQueryHandler] def countPoints(counts: Seq[BucketAndCount]): Int =\n    counts.foldLeft(0) { case (acc, v) => acc + v.count }\n\n  // For each key return a percentage\n  private[server] def pdf(counts: Seq[BucketAndCount]): Seq[BucketAndPercentage] = {\n    val count = countPoints(counts)\n    counts.map { v => BucketAndPercentage(v.lowerLimit, v.upperLimit, v.count.toFloat / count) }\n  }\n\n  // For each key return a cumulative percentage\n  private[server] def cdf(counts: Seq[BucketAndCount]): Seq[BucketAndPercentage] = {\n    val count = countPoints(counts)\n    var c = 0\n    counts.map { v: BucketAndCount =>\n      c += v.count\n      BucketAndPercentage(v.lowerLimit, v.upperLimit, c.toFloat / count)\n    }\n  }\n\n  private[HistogramQueryHandler] def deliverData(\n    counts: Map[String, Seq[BucketAndCount]],\n    transform: Seq[BucketAndCount] => Any\n  ): String =\n    // \".toMap\" is important here for scala 2.13 as otherwise it will be a MapView which\n    // doesn't serialize correctly with Jackson\n    JsonConverter.writeToString(counts.mapValues(transform).toMap)\n\n  // Generates html for visualizing histograms\n  private[HistogramQueryHandler] val render: String = {\n    val css =\n      \"\"\"<link type=\"text/css\" href=\"/admin/files/css/histogram-query.css\" rel=\"stylesheet\"/>\"\"\"\n\n    val chart =\n      \"\"\"<div class=\"chart\">\n             <div id=\"curve_chart\" style=\"width: 900px; height: 500px\"></div>\n           </div>\"\"\"\n\n    /** Generates an html table to display key statistics of a histogram */\n    val statsTable = {\n      def entry(id: String, display: String): String = {\n        s\"\"\"<tr>\n                <td style=\"text-align:left\">${escapeHtml(display)}</td>\n                <td style=\"text-align:left\" id=\"$id\"></td>\n              </tr>\"\"\"\n      }\n      s\"\"\"\n          <div id=\"stats\">\n            <table>\n              <thead>\n                <th style=\"text-align:left\" colspan=\"2\">Details</th>\n              </thead>\n              <tbody>\n                ${entry(\"detail_count\", \"Count\")}\n                ${entry(\"detail_sum\", \"Sum\")}\n                ${entry(\"detail_average\", \"Average\")}\n                ${entry(\"detail_min\", \"Min\")}\n                ${entry(\"detail_max\", \"Max\")}\n                ${entry(\"detail_p50\", \"p50\")}\n                ${entry(\"detail_p90\", \"p90\")}\n                ${entry(\"detail_p95\", \"p95\")}\n                ${entry(\"detail_p99\", \"p99\")}\n                ${entry(\"detail_p999\", \"p999\")}\n                ${entry(\"detail_p9999\", \"p9999\")}\n              </tbody>\n            </table>\n          </div>\"\"\"\n    }\n\n    val buttonPanel =\n      \"\"\"<div id=\"option-panel\">\n          <form action=\"post\">\n            <span class=\"option-description\">Type:\n              <a id=\"PDF\" class=\"button-switch button-light-green left-rounded\" title=\"Probability density function\">PDF</a><a id=\"CDF\" class=\"button-switch button-green right-rounded\" title=\"Cumulative distribution function\">CDF</a>\n            </span>\n\n            <span class=\"option-description\">Scale:\n              <a id=\"reg\" class=\"button-switch button-red left-rounded\" title=\"Linear scale\">Reg</a><a id=\"log\" class=\"button-switch button-light-red right-rounded\" title=\"Log scale\">Log</a>\n            </span>\n\n            <span class=\"option-description\">Refresh:\n              <a id=\"refreshOn\" class=\"button-switch button-gray left-rounded\" title=\"Refresh the plot every minute\">On</a><a id=\"refreshOff\" class=\"button-switch button-black right-rounded\">Off</a>\n            </span>\n\n            <span class=\"option-description-last\"><a id=\"download-link\" class=\"button-download button-blue\" title=\"Download bucket counts in json\">Download</a></span>\n          </form>\n        </div>\"\"\"\n\n    val scripts =\n      \"\"\"\n        <script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>\n        <script type=\"text/javascript\" src=\"/admin/files/js/histogram-utils.js\"></script>\n        <script type=\"text/javascript\" src=\"/admin/files/js/histogram-dom.js\"></script>\n        <script type=\"text/javascript\" src=\"/admin/files/js/histogram-main.js\"></script>\"\"\"\n    css + chart + statsTable + buttonPanel + scripts\n  }\n\n  // Generates html for the histogram selection page (/admin/histograms)\n  private[HistogramQueryHandler] def renderFront(keys: Seq[String]): String = {\n    val css =\n      \"\"\"\n      <link type=\"text/css\" href=\"/admin/files/css/metric-query.css\" rel=\"stylesheet\"/>\n      <link type=\"text/css\" href=\"/admin/files/css/histogram-homepage.css\" rel=\"stylesheet\"/>\n      \"\"\"\n    val histogramListing = s\"\"\"\n      <div id=\"metrics-grid\" class=\"row\">\n        <div class=\"col-md-4 snuggle-right\">\n          <ul id=\"metrics\" class=\"list-unstyled\">\n            ${(for (key <- keys.sorted) yield {\n      s\"\"\"<li id=\"${key.replace(\"/\", \"-\")}\"><a id=\"special-$key\">${escapeHtml(key)}</a></li>\"\"\"\n    }).mkString(\"\\n\")}\n          </ul>\n        </div>\n        <div class=\"col-md-8 snuggle-left\">\n          <div style=\"width: 95%; margin: 0 auto;\">\n            <div id=\"metrics-header\">Histograms</div>\n            <ul>\n              <li class=\"metrics-point\">Visualize metric distributions</li>\n              <li class=\"metrics-point\">Download histogram contents</li>\n              <li class=\"metrics-point\">For more, read the\n                <a id=\"doc-link\" href=\"https://twitter.github.io/twitter-server/Features.html#histograms\">docs</a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      \"\"\"\n\n    val scripts = s\"\"\"\n      <script>\n        ${(for (key <- keys.sorted) yield {\n      s\"\"\"document.getElementById(\"special-$key\").setAttribute(\"href\", window.location.href + \"?h=$key&fmt=plot_cdf\");\"\"\"\n    }).mkString(\"\\n\")}\n      </script>\n      \"\"\"\n    css + histogramListing + scripts\n  }\n}\n\n/**\n * A handler which accepts queries via http strings and returns\n * json encoded histogram details\n */\nprivate[server] class HistogramQueryHandler(details: WithHistogramDetails)\n    extends Service[Request, Response] {\n  import HistogramQueryHandler._\n\n  // If possible, access histograms inside statsReceiversLoaded\n  private[this] def histograms: Map[String, HistogramDetail] = details.histogramDetails\n\n  private[this] def jsonResponse(\n    query: String,\n    transform: Seq[BucketAndCount] => String\n  ): Future[Response] =\n    newResponse(\n      contentType = ContentTypeJson,\n      content = {\n        val text = histograms.get(query) match {\n          case Some(h) => transform(h.counts)\n          case None => s\"Key: ${escapeHtml(query)} is not a valid histogram.\"\n        }\n        Buf.Utf8(text)\n      }\n    )\n\n  private[this] def renderHistogramsJson: String =\n    JsonConverter.writeToString(histograms.map {\n      case (key, value) =>\n        (key, value.counts)\n    })\n\n  // needs a special case for the upper bound sentinel.\n  private[this] def midPoint(bc: BucketAndCount): Double =\n    if (bc.upperLimit >= Int.MaxValue) bc.lowerLimit\n    else (bc.upperLimit + bc.lowerLimit) / 2.0\n\n  private[this] def generateSummary(histoName: String): Option[Summary] = {\n    histograms.get(histoName).map { detail =>\n      val bcs = detail.counts.sortBy(_.lowerLimit)\n\n      // first, the basic computations: sum, count, min, max, average\n      val min = bcs.headOption.map(_.lowerLimit)\n      val max = bcs.lastOption.map(_.upperLimit)\n      var sum = 0.0\n      var count = 0L\n      bcs.foreach { bc =>\n        count += bc.count\n        sum += bc.count.toDouble * midPoint(bc)\n      }\n      val average =\n        if (count == 0L) None\n        else Some(sum.toLong / count)\n\n      // note: this is modeled after `c.t.f.stats.BucketedHistogram.percentile`\n      def percentile(total: Long, p: Double): Long = {\n        if (p < 0.0 || p > 1.0)\n          throw new AssertionError(s\"percentile must be within 0.0 to 1.0 inclusive: $p\")\n\n        val target = Math.round(p * total)\n\n        val iter = bcs.iterator\n        var sum = 0L\n        var bc: BucketAndCount = null\n        while (iter.hasNext && sum < target) {\n          bc = iter.next()\n          sum += bc.count\n        }\n        bc match {\n          case null => 0\n          case _ if !iter.hasNext => max.getOrElse(0)\n          case _ => midPoint(bc).toLong\n        }\n      }\n\n      val percentiles: Map[String, Long] = SummaryThresholds.map {\n        case (name, p) =>\n          name -> percentile(count, p)\n      }.toMap\n\n      Summary(\n        name = histoName,\n        count = count,\n        sum = sum.toLong,\n        average = average,\n        min = min,\n        max = max,\n        percentiles = percentiles\n      )\n    }\n  }\n\n  private[this] def renderSummary(summary: Summary): String =\n    JsonConverter.writeToString(summary)\n\n  private[this] def htmlResponse(query: String): Future[Response] =\n    newResponse(\n      contentType = ContentTypeHtml,\n      content = Buf.Utf8 {\n        if (histograms.contains(query))\n          render\n        else\n          s\"Key: ${escapeHtml(query)} is not a valid histogram.\"\n      }\n    )\n\n  /**\n   * Handles requests for all histograms (/admin/histogram.json)\n   * or for a specific histogram (/admin/histogram?h=...)\n   *\n   * For specific histograms the following options are available:\n   *\n   * \"h\": the name of the histogram\n   *    Ex: finagle/timer/deviation_ms\n   *\n   * \"fmt\": the type of format used to display results.\n   *    The formats we support are raw, pdf, and cdf\n   *    raw: histogram bucket counts\n   *      (use to do a custom computation with histogram counts)\n   *    pdf: percentage of total for each bucket\n   *      (use to identify modes of a distribution)\n   *    cdf: cumulative percentage of total for each bucket\n   *      (use to view more quantiles)\n   *\n   * \"log_scale\": whether or not the x-axis increases linearly or exponentially.\n   *    This parameter can be omitted if not querying for plots\n   *\n   * For `histograms.json`, if there is a `summary` parameter,\n   * it will return JSON summarizing the histogram for the given `h` parameter.\n   * {{{\n   * {\n   *   \"name\": \"finagle/timer/deviation_ms\",\n   *   \"summary\": {\n   *     \"count\": 65059,\n   *     \"sum\": 651088,\n   *     \"average\": 10,\n   *     \"min\": 1,\n   *     \"max\": 94,\n   *     \"percentiles\": {\n   *       \"p50\": 10,\n   *       \"p90\": 12,\n   *       \"p95\": 12,\n   *       \"p99\": 13,\n   *       \"p999\": 20,\n   *       \"p9999\": 52,\n   *     }\n   *   }\n   * }\n   * }}}\n   *\n   * If `h` is not found, an empty JSON hash will be returned `{}`.\n   */\n  def apply(req: Request): Future[Response] = {\n    val uri = Uri.fromRequest(req)\n    val path = uri.path\n    val params = uri.params\n\n    path match {\n      case \"/admin/histograms.json\" =>\n        if (!params.contains(\"summary\")) {\n          newResponse(contentType = ContentTypeJson, content = Buf.Utf8(renderHistogramsJson))\n        } else {\n          val summary: Option[Summary] = params.get(\"h\") match {\n            case Some(histoName) => generateSummary(histoName)\n            case _ => None\n          }\n          val text: String = summary match {\n            case Some(s) => renderSummary(s)\n            case None => \"{}\"\n          }\n          newResponse(contentType = ContentTypeJson, content = Buf.Utf8(text))\n        }\n      case \"/admin/histograms\" =>\n        params.get(\"h\") match {\n          case Some(query) =>\n            params.get(\"fmt\") match {\n              case Some(\"plot_pdf\") | Some(\"plot_cdf\") =>\n                htmlResponse(query)\n\n              case Some(\"raw\") =>\n                jsonResponse(\n                  query,\n                  { counts: Seq[BucketAndCount] =>\n                    deliverData(Map(query -> counts), identity)\n                  })\n\n              case Some(\"pdf\") =>\n                jsonResponse(\n                  query,\n                  { counts: Seq[BucketAndCount] =>\n                    deliverData(Map(query -> counts), x => pdf(x))\n                  })\n\n              case Some(\"cdf\") =>\n                jsonResponse(\n                  query,\n                  { counts: Seq[BucketAndCount] =>\n                    deliverData(Map(query -> counts), x => cdf(x))\n                  })\n\n              case _ =>\n                newResponse(\n                  contentType = ContentTypeHtml,\n                  content = Buf.Utf8(\"Please provide a format: fmt = raw | pdf | cdf\")\n                )\n            }\n          case _ =>\n            newResponse(\n              contentType = ContentTypeHtml,\n              content = Buf.Utf8(renderFront(histograms.keySet.toSeq))\n            )\n        }\n      case _ =>\n        newResponse(\n          contentType = ContentTypeHtml,\n          content = Buf.Utf8(\"Invalid endpoint. Did you mean /admin/histograms.json?\")\n        )\n    }\n  }\n}\n"], "filenames": ["CHANGELOG.rst", "server/src/main/scala/com/twitter/server/handler/HistogramQueryHandler.scala"], "buggy_code_start_loc": [8, 201], "buggy_code_end_loc": [8, 284], "fixing_code_start_loc": [9, 201], "fixing_code_end_loc": [12, 284], "type": "CWE-79", "message": "server/handler/HistogramQueryHandler.scala in Twitter TwitterServer (aka twitter-server) before 20.12.0, in some configurations, allows XSS via the /histograms endpoint.", "other": {"cve": {"id": "CVE-2020-35774", "sourceIdentifier": "cve@mitre.org", "published": "2020-12-29T18:15:13.057", "lastModified": "2022-07-19T11:36:38.923", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "server/handler/HistogramQueryHandler.scala in Twitter TwitterServer (aka twitter-server) before 20.12.0, in some configurations, allows XSS via the /histograms endpoint."}, {"lang": "es", "value": "En el archivo server/handler/HistogramQueryHandler.scala en Twitter TwitterServer (tambi\u00e9n se conoce como twitter-server) versiones anteriores a 20.12.0, en algunas configuraciones, permite un ataque de tipo XSS por medio del endpoint /histograms"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:twitter:twitter-server:*:*:*:*:*:*:*:*", "versionEndExcluding": "20.12.0", "matchCriteriaId": "B27517AE-FF60-4A0C-8442-1E56528B7346"}]}]}], "references": [{"url": "https://advisory.checkmarx.net/advisory/CX-2020-4287", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/twitter/twitter-server/commit/e0aeb87e89a6e6c711214ee2de0dd9f6e5f9cb6c", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/twitter/twitter-server/compare/twitter-server-20.10.0...twitter-server-20.12.0", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/twitter/twitter-server/commit/e0aeb87e89a6e6c711214ee2de0dd9f6e5f9cb6c"}}