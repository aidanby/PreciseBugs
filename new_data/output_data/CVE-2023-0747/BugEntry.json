{"buggy_code": ["using System;\nusing System.IO;\nusing BTCPayServer.Abstractions.Contracts;\nusing BTCPayServer.Configuration;\nusing BTCPayServer.Storage.Services;\nusing BTCPayServer.Storage.Services.Providers;\nusing BTCPayServer.Storage.Services.Providers.AzureBlobStorage;\nusing BTCPayServer.Storage.Services.Providers.FileSystemStorage;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.StaticFiles;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.FileProviders;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing NBitcoin.Logging;\n\nnamespace BTCPayServer.Storage\n{\n    public static class StorageExtensions\n    {\n        public static void AddProviderStorage(this IServiceCollection serviceCollection)\n        {\n            serviceCollection.AddSingleton<StoredFileRepository>();\n            serviceCollection.AddSingleton<FileService>();\n            serviceCollection.AddSingleton<IFileService>(provider => provider.GetRequiredService<FileService>());\n            serviceCollection.AddSingleton<IStorageProviderService, AzureBlobStorageFileProviderService>();\n            serviceCollection.AddSingleton<IStorageProviderService, FileSystemFileProviderService>();\n        }\n\n        public static void UseProviderStorage(this IApplicationBuilder builder, IOptions<DataDirectories> datadirs)\n        {\n            try\n            {\n                var dirInfo = Directory.Exists(datadirs.Value.StorageDir)\n                    ? new DirectoryInfo(datadirs.Value.StorageDir)\n                    : Directory.CreateDirectory(datadirs.Value.StorageDir);\n\n                if (!Directory.Exists(datadirs.Value.TempDir))\n                {\n                    Directory.CreateDirectory(datadirs.Value.TempDir);\n                }\n\n                var tmpdirInfo = Directory.Exists(datadirs.Value.TempStorageDir)\n                    ? new DirectoryInfo(datadirs.Value.TempStorageDir)\n                    : Directory.CreateDirectory(datadirs.Value.TempStorageDir);\n\n                builder.UseStaticFiles(new StaticFileOptions\n                {\n                    ServeUnknownFileTypes = true,\n                    RequestPath = new PathString($\"/{FileSystemFileProviderService.LocalStorageDirectoryName}\"),\n                    FileProvider = new PhysicalFileProvider(dirInfo.FullName),\n                    OnPrepareResponse = HandleStaticFileResponse()\n                });\n                builder.UseStaticFiles(new StaticFileOptions\n                {\n                    ServeUnknownFileTypes = true,\n                    RequestPath = new PathString($\"/{FileSystemFileProviderService.LocalStorageDirectoryName}tmp\"),\n                    FileProvider = new TemporaryLocalFileProvider(tmpdirInfo, dirInfo,\n                        builder.ApplicationServices.GetService<StoredFileRepository>()),\n                    OnPrepareResponse = HandleStaticFileResponse()\n                });\n            }\n            catch (Exception e)\n            {\n                Logs.Utils.LogError(e, \"Could not initialize the Local File Storage system (for uploading and storing files locally)\");\n            }\n        }\n\n        private static Action<StaticFileResponseContext> HandleStaticFileResponse()\n        {\n            return context =>\n            {\n                if (context.Context.Request.Query.ContainsKey(\"download\"))\n                {\n                    context.Context.Response.Headers[\"Content-Disposition\"] = \"attachment\";\n                }\n            };\n        }\n    }\n}\n"], "fixing_code": ["using System;\nusing System.IO;\nusing BTCPayServer.Abstractions.Contracts;\nusing BTCPayServer.Configuration;\nusing BTCPayServer.Storage.Services;\nusing BTCPayServer.Storage.Services.Providers;\nusing BTCPayServer.Storage.Services.Providers.AzureBlobStorage;\nusing BTCPayServer.Storage.Services.Providers.FileSystemStorage;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.StaticFiles;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.FileProviders;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing NBitcoin.Logging;\n\nnamespace BTCPayServer.Storage\n{\n    public static class StorageExtensions\n    {\n        public static void AddProviderStorage(this IServiceCollection serviceCollection)\n        {\n            serviceCollection.AddSingleton<StoredFileRepository>();\n            serviceCollection.AddSingleton<FileService>();\n            serviceCollection.AddSingleton<IFileService>(provider => provider.GetRequiredService<FileService>());\n            serviceCollection.AddSingleton<IStorageProviderService, AzureBlobStorageFileProviderService>();\n            serviceCollection.AddSingleton<IStorageProviderService, FileSystemFileProviderService>();\n        }\n\n        public static void UseProviderStorage(this IApplicationBuilder builder, IOptions<DataDirectories> datadirs)\n        {\n            try\n            {\n                var dirInfo = Directory.Exists(datadirs.Value.StorageDir)\n                    ? new DirectoryInfo(datadirs.Value.StorageDir)\n                    : Directory.CreateDirectory(datadirs.Value.StorageDir);\n\n                if (!Directory.Exists(datadirs.Value.TempDir))\n                {\n                    Directory.CreateDirectory(datadirs.Value.TempDir);\n                }\n\n                var tmpdirInfo = Directory.Exists(datadirs.Value.TempStorageDir)\n                    ? new DirectoryInfo(datadirs.Value.TempStorageDir)\n                    : Directory.CreateDirectory(datadirs.Value.TempStorageDir);\n\n                builder.UseStaticFiles(new StaticFileOptions\n                {\n                    ServeUnknownFileTypes = true,\n                    RequestPath = new PathString($\"/{FileSystemFileProviderService.LocalStorageDirectoryName}\"),\n                    FileProvider = new PhysicalFileProvider(dirInfo.FullName),\n                    OnPrepareResponse = HandleStaticFileResponse()\n                });\n                builder.UseStaticFiles(new StaticFileOptions\n                {\n                    ServeUnknownFileTypes = true,\n                    RequestPath = new PathString($\"/{FileSystemFileProviderService.LocalStorageDirectoryName}tmp\"),\n                    FileProvider = new TemporaryLocalFileProvider(tmpdirInfo, dirInfo,\n                        builder.ApplicationServices.GetService<StoredFileRepository>()),\n                    OnPrepareResponse = HandleStaticFileResponse()\n                });\n            }\n            catch (Exception e)\n            {\n                Logs.Utils.LogError(e, \"Could not initialize the Local File Storage system (for uploading and storing files locally)\");\n            }\n        }\n\n        private static Action<StaticFileResponseContext> HandleStaticFileResponse()\n        {\n            return context =>\n            {\n                if (context.Context.Request.Query.ContainsKey(\"download\"))\n                {\n                    context.Context.Response.Headers[\"Content-Disposition\"] = \"attachment\";\n                }\n                context.Context.Response.Headers[\"Content-Security-Policy\"] = \"script-src 'self'\";\n            };\n        }\n    }\n}\n"], "filenames": ["BTCPayServer/Storage/StorageExtensions.cs"], "buggy_code_start_loc": [77], "buggy_code_end_loc": [77], "fixing_code_start_loc": [78], "fixing_code_end_loc": [79], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository btcpayserver/btcpayserver prior to 1.7.6.", "other": {"cve": {"id": "CVE-2023-0747", "sourceIdentifier": "security@huntr.dev", "published": "2023-02-08T14:15:09.697", "lastModified": "2023-02-18T20:35:36.730", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository btcpayserver/btcpayserver prior to 1.7.6."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:btcpayserver:btcpayserver:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.7.6", "matchCriteriaId": "94342CA6-A899-46CD-A11E-DCD2BE344BB9"}]}]}], "references": [{"url": "https://github.com/btcpayserver/btcpayserver/commit/d4e464ad4ef0cbbf61751e70f77865de325dd6cf", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/7830b9b4-af2e-44ef-8b00-ee2491d4e7ff", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/btcpayserver/btcpayserver/commit/d4e464ad4ef0cbbf61751e70f77865de325dd6cf"}}