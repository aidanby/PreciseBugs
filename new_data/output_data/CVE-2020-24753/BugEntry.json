{"buggy_code": ["/* CBOR-to-JSON translation utility */\r\n\r\n#include \"rtjsonsrc/osrtjson.h\"\r\n#include \"rtcborsrc/osrtcbor.h\"\r\n#include \"rtxsrc/rtxCharStr.h\"\r\n#include \"rtxsrc/rtxContext.h\"\r\n#include \"rtxsrc/rtxFile.h\"\r\n#include \"rtxsrc/rtxHexDump.h\"\r\n\r\n#include <stdio.h>\r\n\r\n#ifndef _NO_INT64_SUPPORT\r\n#define OSUINTTYPE OSUINT64\r\n#define OSINTTYPE OSINT64\r\n#define rtCborDecUInt rtCborDecUInt64\r\n#define rtCborDecInt  rtCborDecInt64\r\n#else\r\n#define OSUINTTYPE OSUINT32\r\n#define OSINTTYPE OSINT32\r\n#define rtCborDecUInt rtCborDecUInt32\r\n#define rtCborDecInt  rtCborDecInt32\r\n#endif\r\n\r\nstatic int cborTagNotSupp (OSCTXT* pctxt, OSOCTET tag)\r\n{\r\n   char numbuf[10];\r\n   char errtext[80];\r\n\r\n   rtxUIntToCharStr (tag, numbuf, sizeof(numbuf), 0);\r\n   rtxStrJoin (errtext, sizeof(errtext), \"CBOR tag \", numbuf, 0, 0, 0);\r\n   rtxErrAddStrParm (pctxt, errtext);\r\n\r\n   return RTERR_NOTSUPP;\r\n}\r\n\r\nstatic int cborElemNameToJson (OSCTXT* pCborCtxt, OSCTXT* pJsonCtxt)\r\n{\r\n   char* pElemName = 0;\r\n   OSOCTET ub;\r\n   int ret;\r\n\r\n   /* Read byte from stream */\r\n   ret = rtxReadBytes (pCborCtxt, &ub, 1);\r\n   if (0 != ret) return LOG_RTERR (pCborCtxt, ret);\r\n\r\n   /* Decode element name (note: only string type is currently supported) */\r\n   ret = rtCborDecDynUTF8Str (pCborCtxt, ub, &pElemName);\r\n   if (0 != ret) return LOG_RTERR (pCborCtxt, ret);\r\n\r\n   /* Encode map element name as string */\r\n   ret = rtJsonEncStringValue (pJsonCtxt, (const OSUTF8CHAR*)pElemName);\r\n   rtxMemFreePtr (pCborCtxt, pElemName);\r\n   if (0 != ret) return LOG_RTERR (pJsonCtxt, ret);\r\n\r\n   OSRTSAFEPUTCHAR (pJsonCtxt, ':');\r\n\r\n   return 0;\r\n}\r\n\r\nstatic int cbor2json (OSCTXT* pCborCtxt, OSCTXT* pJsonCtxt)\r\n{\r\n   int ret = 0;\r\n   OSOCTET tag, ub;\r\n\r\n   /* Read byte from stream */\r\n   ret = rtxReadBytes (pCborCtxt, &ub, 1);\r\n   if (0 != ret) return LOG_RTERR (pCborCtxt, ret);\r\n   tag = ub >> 5;\r\n\r\n   /* Switch on tag value */\r\n   switch (tag) {\r\n   case OSRTCBOR_UINT: {\r\n      OSUINTTYPE value;\r\n      ret = rtCborDecUInt (pCborCtxt, ub, &value);\r\n      if (0 != ret) return LOG_RTERR (pCborCtxt, ret);\r\n\r\n      /* Encode JSON */\r\n#ifndef _NO_INT64_SUPPORT\r\n      ret = rtJsonEncUInt64Value (pJsonCtxt, value);\r\n#else\r\n      ret = rtJsonEncUIntValue (pJsonCtxt, value);\r\n#endif\r\n      if (0 != ret) return LOG_RTERR (pJsonCtxt, ret);\r\n      break;\r\n   }\r\n   case OSRTCBOR_NEGINT: {\r\n      OSINTTYPE value;\r\n      ret = rtCborDecInt (pCborCtxt, ub, &value);\r\n      if (0 != ret) return LOG_RTERR (pCborCtxt, ret);\r\n\r\n      /* Encode JSON */\r\n#ifndef _NO_INT64_SUPPORT\r\n      ret = rtJsonEncInt64Value (pJsonCtxt, value);\r\n#else\r\n      ret = rtJsonEncIntValue (pJsonCtxt, value);\r\n#endif\r\n      if (0 != ret) return LOG_RTERR (pJsonCtxt, ret);\r\n      break;\r\n   }\r\n   case OSRTCBOR_BYTESTR: {\r\n      OSDynOctStr64 byteStr;\r\n      ret = rtCborDecDynByteStr (pCborCtxt, ub, &byteStr);\r\n      if (0 != ret) return LOG_RTERR (pCborCtxt, ret);\r\n\r\n      /* Encode JSON */\r\n      ret = rtJsonEncHexStr (pJsonCtxt, byteStr.numocts, byteStr.data);\r\n      rtxMemFreePtr (pCborCtxt, byteStr.data);\r\n      if (0 != ret) return LOG_RTERR (pJsonCtxt, ret);\r\n\r\n      break;\r\n   }\r\n   case OSRTCBOR_UTF8STR: {\r\n      OSUTF8CHAR* utf8str;\r\n      ret = rtCborDecDynUTF8Str (pCborCtxt, ub, (char**)&utf8str);\r\n\r\n      ret = rtJsonEncStringValue (pJsonCtxt, utf8str);\r\n      rtxMemFreePtr (pCborCtxt, utf8str);\r\n      if (0 != ret) return LOG_RTERR (pJsonCtxt, ret);\r\n\r\n      break;\r\n   }\r\n   case OSRTCBOR_ARRAY: \r\n   case OSRTCBOR_MAP: {\r\n      OSOCTET len = ub & 0x1F;\r\n      char startChar = (tag == OSRTCBOR_ARRAY) ? '[' : '{';\r\n      char endChar = (tag == OSRTCBOR_ARRAY) ? ']' : '}';\r\n\r\n      OSRTSAFEPUTCHAR (pJsonCtxt, startChar);\r\n\r\n      if (len == OSRTCBOR_INDEF) {\r\n         OSBOOL first = TRUE;\r\n         for (;;) {\r\n            if (OSRTCBOR_MATCHEOC (pCborCtxt)) {\r\n               pCborCtxt->buffer.byteIndex++;\r\n               break;\r\n            }\r\n\r\n            if (!first) \r\n               OSRTSAFEPUTCHAR (pJsonCtxt, ',');\r\n            else\r\n               first = FALSE;\r\n\r\n            /* If map, decode object name */\r\n            if (tag == OSRTCBOR_MAP) {\r\n               ret = cborElemNameToJson (pCborCtxt, pJsonCtxt);\r\n            }\r\n\r\n            /* Make recursive call */\r\n            if (0 == ret)\r\n               ret = cbor2json (pCborCtxt, pJsonCtxt);\r\n            if (0 != ret) {\r\n               OSCTXT* pctxt = \r\n                  (rtxErrGetErrorCnt(pJsonCtxt) > 0) ? pJsonCtxt : pCborCtxt;\r\n               return LOG_RTERR (pctxt, ret);\r\n            }\r\n         }\r\n      }\r\n      else { /* definite length */\r\n         OSSIZE nitems;\r\n\r\n         /* Decode tag and number of items */\r\n         ret = rtCborDecSize (pCborCtxt, len, &nitems);\r\n         if (0 == ret) {\r\n            OSSIZE i;\r\n\r\n            /* Loop to decode array items */\r\n            for (i = 0; i < nitems; i++) {\r\n               if (0 != i) OSRTSAFEPUTCHAR (pJsonCtxt, ',');\r\n\r\n               /* If map, decode object name */\r\n               if (tag == OSRTCBOR_MAP) {\r\n                  ret = cborElemNameToJson (pCborCtxt, pJsonCtxt);\r\n               }\r\n\r\n               /* Make recursive call */\r\n               if (0 == ret)\r\n                  ret = cbor2json (pCborCtxt, pJsonCtxt);\r\n               if (0 != ret) {\r\n                  OSCTXT* pctxt = \r\n                  (rtxErrGetErrorCnt(pJsonCtxt) > 0) ? pJsonCtxt : pCborCtxt;\r\n                  return LOG_RTERR (pctxt, ret);\r\n               }\r\n            }\r\n         }\r\n      }\r\n      OSRTSAFEPUTCHAR (pJsonCtxt, endChar);\r\n      break;\r\n   }\r\n\r\n   case OSRTCBOR_FLOAT:\r\n      if (tag == OSRTCBOR_FALSEENC || tag == OSRTCBOR_TRUEENC) {\r\n         OSBOOL boolval = (ub == OSRTCBOR_TRUEENC) ? TRUE : FALSE;\r\n         ret = rtJsonEncBoolValue (pJsonCtxt, boolval);\r\n         if (0 != ret) return LOG_RTERR (pJsonCtxt, ret);\r\n      }\r\n      else if (tag == OSRTCBOR_FLT16ENC ||\r\n               tag == OSRTCBOR_FLT32ENC ||\r\n               tag == OSRTCBOR_FLT64ENC) {\r\n         OSDOUBLE fltval;\r\n         ret = rtCborDecFloat (pCborCtxt, ub, &fltval);\r\n         if (0 != ret) return LOG_RTERR (pCborCtxt, ret);\r\n\r\n         /* Encode JSON */\r\n         ret = rtJsonEncDoubleValue (pJsonCtxt, fltval, 0);\r\n         if (0 != ret) return LOG_RTERR (pJsonCtxt, ret);\r\n      }\r\n      else {\r\n         ret = cborTagNotSupp (pCborCtxt, tag);\r\n      }\r\n      break;\r\n\r\n   default:\r\n      ret = cborTagNotSupp (pCborCtxt, tag);\r\n   }\r\n\r\n   return ret;\r\n}\r\n\r\nint main (int argc, char** argv)\r\n{\r\n   OSCTXT      jsonCtxt, cborCtxt;\r\n   OSOCTET*    pMsgBuf = 0;\r\n   size_t      msglen;\r\n   OSBOOL      verbose = FALSE;\r\n   const char* filename = \"message.cbor\";\r\n   const char* outfname = \"message.json\";\r\n   int         ret;\r\n\r\n   /* Process command line arguments */\r\n   if (argc > 1) {\r\n      int i;\r\n      for (i = 1; i < argc; i++) {\r\n         if (!strcmp (argv[i], \"-v\")) verbose = TRUE;\r\n         else if (!strcmp (argv[i], \"-i\")) filename = argv[++i];\r\n         else if (!strcmp (argv[i], \"-o\")) outfname = argv[++i];\r\n         else {\r\n            printf (\"usage: cbor2json [-v] [-i <filename>] [-o filename]\\n\");\r\n            printf (\"   -v  verbose mode: print trace info\\n\");\r\n            printf (\"   -i <filename>  read CBOR msg from <filename>\\n\");\r\n            printf (\"   -o <filename>  write JSON data to <filename>\\n\");\r\n            return 1;\r\n         }\r\n      }\r\n   }\r\n\r\n   /* Initialize context structures */\r\n   ret = rtxInitContext (&jsonCtxt);\r\n   if (ret != 0) {\r\n      rtxErrPrint (&jsonCtxt);\r\n      return ret;\r\n   }\r\n   rtxErrInit();\r\n   /* rtxSetDiag (&jsonCtxt, verbose); */\r\n\r\n   ret = rtxInitContext (&cborCtxt);\r\n   if (ret != 0) {\r\n      rtxErrPrint (&cborCtxt);\r\n      return ret;\r\n   }\r\n   /* rtxSetDiag (&cborCtxt, verbose); */\r\n\r\n   /* Create file input stream */\r\n#if 0\r\n   /* Streaming not supported in open source version\r\n   ret = rtxStreamFileCreateReader (&jsonCtxt, filename);\r\n   */\r\n#else\r\n   /* Read input file into memory buffer */\r\n   ret = rtxFileReadBinary (&cborCtxt, filename, &pMsgBuf, &msglen);\r\n   if (0 == ret) {\r\n      ret = rtxInitContextBuffer (&cborCtxt, pMsgBuf, msglen);\r\n   }\r\n#endif\r\n   if (0 != ret) {\r\n      rtxErrPrint (&jsonCtxt);\r\n      rtxFreeContext (&jsonCtxt);\r\n      rtxFreeContext (&cborCtxt);\r\n      return ret;\r\n   }\r\n\r\n   /* Init JSON output buffer */\r\n   ret = rtxInitContextBuffer (&jsonCtxt, 0, 0);\r\n   if (0 != ret) {\r\n      rtxErrPrint (&jsonCtxt);\r\n      rtxFreeContext (&jsonCtxt);\r\n      rtxFreeContext (&cborCtxt);\r\n      return ret;\r\n   }\r\n\r\n   /* Invoke the translation function */\r\n   ret = cbor2json (&cborCtxt, &jsonCtxt);\r\n\r\n   if (0 == ret && cborCtxt.level != 0) \r\n      ret = LOG_RTERR (&cborCtxt, RTERR_UNBAL);\r\n\r\n   if (0 == ret && 0 != outfname) {\r\n      /* Write encoded JSON data to output file */\r\n      OSRTSAFEPUTCHAR (&jsonCtxt, '\\0');  /* null terminate buffer */\r\n      int fileret = rtxFileWriteText \r\n         (outfname, (const char*)jsonCtxt.buffer.data);\r\n\r\n      if (0 != fileret) {\r\n         printf (\"unable to write message data to '%s', status = %d\\n\", \r\n                 outfname, fileret);\r\n      }\r\n   }\r\n\r\n   if (0 != ret) {\r\n      rtxErrPrint (&jsonCtxt);\r\n      rtxErrPrint (&cborCtxt);\r\n   }\r\n\r\n   rtxFreeContext (&jsonCtxt);\r\n   rtxFreeContext (&cborCtxt);\r\n\r\n   return ret;\r\n}\r\n"], "fixing_code": ["/* CBOR-to-JSON translation utility */\r\n\r\n#include \"rtjsonsrc/osrtjson.h\"\r\n#include \"rtcborsrc/osrtcbor.h\"\r\n#include \"rtxsrc/rtxCharStr.h\"\r\n#include \"rtxsrc/rtxContext.h\"\r\n#include \"rtxsrc/rtxFile.h\"\r\n#include \"rtxsrc/rtxHexDump.h\"\r\n\r\n#include <stdio.h>\r\n\r\n#ifndef _NO_INT64_SUPPORT\r\n#define OSUINTTYPE OSUINT64\r\n#define OSINTTYPE OSINT64\r\n#define rtCborDecUInt rtCborDecUInt64\r\n#define rtCborDecInt  rtCborDecInt64\r\n#else\r\n#define OSUINTTYPE OSUINT32\r\n#define OSINTTYPE OSINT32\r\n#define rtCborDecUInt rtCborDecUInt32\r\n#define rtCborDecInt  rtCborDecInt32\r\n#endif\r\n\r\nstatic int cborTagNotSupp (OSCTXT* pctxt, OSOCTET tag)\r\n{\r\n   char numbuf[10];\r\n   char errtext[80];\r\n\r\n   rtxUIntToCharStr (tag, numbuf, sizeof(numbuf), 0);\r\n   rtxStrJoin (errtext, sizeof(errtext), \"CBOR tag \", numbuf, 0, 0, 0);\r\n   rtxErrAddStrParm (pctxt, errtext);\r\n\r\n   return RTERR_NOTSUPP;\r\n}\r\n\r\nstatic int cborElemNameToJson (OSCTXT* pCborCtxt, OSCTXT* pJsonCtxt)\r\n{\r\n   char* pElemName = 0;\r\n   OSOCTET ub;\r\n   int ret;\r\n\r\n   /* Read byte from stream */\r\n   ret = rtxReadBytes (pCborCtxt, &ub, 1);\r\n   if (0 != ret) return LOG_RTERR (pCborCtxt, ret);\r\n\r\n   /* Decode element name (note: only string type is currently supported) */\r\n   ret = rtCborDecDynUTF8Str (pCborCtxt, ub, &pElemName);\r\n   if (0 != ret) return LOG_RTERR (pCborCtxt, ret);\r\n\r\n   /* Encode map element name as string */\r\n   ret = rtJsonEncStringValue (pJsonCtxt, (const OSUTF8CHAR*)pElemName);\r\n   rtxMemFreePtr (pCborCtxt, pElemName);\r\n   if (0 != ret) return LOG_RTERR (pJsonCtxt, ret);\r\n\r\n   OSRTSAFEPUTCHAR (pJsonCtxt, ':');\r\n\r\n   return 0;\r\n}\r\n\r\nstatic int cbor2json (OSCTXT* pCborCtxt, OSCTXT* pJsonCtxt)\r\n{\r\n   int ret = 0;\r\n   OSOCTET tag, ub;\r\n\r\n   /* Read byte from stream */\r\n   ret = rtxReadBytes (pCborCtxt, &ub, 1);\r\n   if (0 != ret) return LOG_RTERR (pCborCtxt, ret);\r\n   tag = ub >> 5;\r\n\r\n   /* Switch on tag value */\r\n   switch (tag) {\r\n   case OSRTCBOR_UINT: {\r\n      OSUINTTYPE value;\r\n      ret = rtCborDecUInt (pCborCtxt, ub, &value);\r\n      if (0 != ret) return LOG_RTERR (pCborCtxt, ret);\r\n\r\n      /* Encode JSON */\r\n#ifndef _NO_INT64_SUPPORT\r\n      ret = rtJsonEncUInt64Value (pJsonCtxt, value);\r\n#else\r\n      ret = rtJsonEncUIntValue (pJsonCtxt, value);\r\n#endif\r\n      if (0 != ret) return LOG_RTERR (pJsonCtxt, ret);\r\n      break;\r\n   }\r\n   case OSRTCBOR_NEGINT: {\r\n      OSINTTYPE value;\r\n      ret = rtCborDecInt (pCborCtxt, ub, &value);\r\n      if (0 != ret) return LOG_RTERR (pCborCtxt, ret);\r\n\r\n      /* Encode JSON */\r\n#ifndef _NO_INT64_SUPPORT\r\n      ret = rtJsonEncInt64Value (pJsonCtxt, value);\r\n#else\r\n      ret = rtJsonEncIntValue (pJsonCtxt, value);\r\n#endif\r\n      if (0 != ret) return LOG_RTERR (pJsonCtxt, ret);\r\n      break;\r\n   }\r\n   case OSRTCBOR_BYTESTR: {\r\n      OSDynOctStr64 byteStr;\r\n      ret = rtCborDecDynByteStr (pCborCtxt, ub, &byteStr);\r\n      if (0 != ret) return LOG_RTERR (pCborCtxt, ret);\r\n\r\n      /* Encode JSON */\r\n      ret = rtJsonEncHexStr (pJsonCtxt, byteStr.numocts, byteStr.data);\r\n      rtxMemFreePtr (pCborCtxt, byteStr.data);\r\n      if (0 != ret) return LOG_RTERR (pJsonCtxt, ret);\r\n\r\n      break;\r\n   }\r\n   case OSRTCBOR_UTF8STR: {\r\n      OSUTF8CHAR* utf8str;\r\n      ret = rtCborDecDynUTF8Str (pCborCtxt, ub, (char**)&utf8str);\r\n      if (0 != ret) return LOG_RTERR (pCborCtxt, ret);\r\n\r\n      ret = rtJsonEncStringValue (pJsonCtxt, utf8str);\r\n      rtxMemFreePtr (pCborCtxt, utf8str);\r\n      if (0 != ret) return LOG_RTERR (pJsonCtxt, ret);\r\n\r\n      break;\r\n   }\r\n   case OSRTCBOR_ARRAY: \r\n   case OSRTCBOR_MAP: {\r\n      OSOCTET len = ub & 0x1F;\r\n      char startChar = (tag == OSRTCBOR_ARRAY) ? '[' : '{';\r\n      char endChar = (tag == OSRTCBOR_ARRAY) ? ']' : '}';\r\n\r\n      OSRTSAFEPUTCHAR (pJsonCtxt, startChar);\r\n\r\n      if (len == OSRTCBOR_INDEF) {\r\n         OSBOOL first = TRUE;\r\n         for (;;) {\r\n            if (OSRTCBOR_MATCHEOC (pCborCtxt)) {\r\n               pCborCtxt->buffer.byteIndex++;\r\n               break;\r\n            }\r\n\r\n            if (!first) \r\n               OSRTSAFEPUTCHAR (pJsonCtxt, ',');\r\n            else\r\n               first = FALSE;\r\n\r\n            /* If map, decode object name */\r\n            if (tag == OSRTCBOR_MAP) {\r\n               ret = cborElemNameToJson (pCborCtxt, pJsonCtxt);\r\n            }\r\n\r\n            /* Make recursive call */\r\n            if (0 == ret)\r\n               ret = cbor2json (pCborCtxt, pJsonCtxt);\r\n            if (0 != ret) {\r\n               OSCTXT* pctxt = \r\n                  (rtxErrGetErrorCnt(pJsonCtxt) > 0) ? pJsonCtxt : pCborCtxt;\r\n               return LOG_RTERR (pctxt, ret);\r\n            }\r\n         }\r\n      }\r\n      else { /* definite length */\r\n         OSSIZE nitems;\r\n\r\n         /* Decode tag and number of items */\r\n         ret = rtCborDecSize (pCborCtxt, len, &nitems);\r\n         if (0 == ret) {\r\n            OSSIZE i;\r\n\r\n            /* Loop to decode array items */\r\n            for (i = 0; i < nitems; i++) {\r\n               if (0 != i) OSRTSAFEPUTCHAR (pJsonCtxt, ',');\r\n\r\n               /* If map, decode object name */\r\n               if (tag == OSRTCBOR_MAP) {\r\n                  ret = cborElemNameToJson (pCborCtxt, pJsonCtxt);\r\n               }\r\n\r\n               /* Make recursive call */\r\n               if (0 == ret)\r\n                  ret = cbor2json (pCborCtxt, pJsonCtxt);\r\n               if (0 != ret) {\r\n                  OSCTXT* pctxt = \r\n                  (rtxErrGetErrorCnt(pJsonCtxt) > 0) ? pJsonCtxt : pCborCtxt;\r\n                  return LOG_RTERR (pctxt, ret);\r\n               }\r\n            }\r\n         }\r\n      }\r\n      OSRTSAFEPUTCHAR (pJsonCtxt, endChar);\r\n      break;\r\n   }\r\n\r\n   case OSRTCBOR_FLOAT:\r\n      if (tag == OSRTCBOR_FALSEENC || tag == OSRTCBOR_TRUEENC) {\r\n         OSBOOL boolval = (ub == OSRTCBOR_TRUEENC) ? TRUE : FALSE;\r\n         ret = rtJsonEncBoolValue (pJsonCtxt, boolval);\r\n         if (0 != ret) return LOG_RTERR (pJsonCtxt, ret);\r\n      }\r\n      else if (tag == OSRTCBOR_FLT16ENC ||\r\n               tag == OSRTCBOR_FLT32ENC ||\r\n               tag == OSRTCBOR_FLT64ENC) {\r\n         OSDOUBLE fltval;\r\n         ret = rtCborDecFloat (pCborCtxt, ub, &fltval);\r\n         if (0 != ret) return LOG_RTERR (pCborCtxt, ret);\r\n\r\n         /* Encode JSON */\r\n         ret = rtJsonEncDoubleValue (pJsonCtxt, fltval, 0);\r\n         if (0 != ret) return LOG_RTERR (pJsonCtxt, ret);\r\n      }\r\n      else {\r\n         ret = cborTagNotSupp (pCborCtxt, tag);\r\n      }\r\n      break;\r\n\r\n   default:\r\n      ret = cborTagNotSupp (pCborCtxt, tag);\r\n   }\r\n\r\n   return ret;\r\n}\r\n\r\nint main (int argc, char** argv)\r\n{\r\n   OSCTXT      jsonCtxt, cborCtxt;\r\n   OSOCTET*    pMsgBuf = 0;\r\n   size_t      msglen;\r\n   OSBOOL      verbose = FALSE;\r\n   const char* filename = \"message.cbor\";\r\n   const char* outfname = \"message.json\";\r\n   int         ret;\r\n\r\n   /* Process command line arguments */\r\n   if (argc > 1) {\r\n      int i;\r\n      for (i = 1; i < argc; i++) {\r\n         if (!strcmp (argv[i], \"-v\")) verbose = TRUE;\r\n         else if (!strcmp (argv[i], \"-i\")) filename = argv[++i];\r\n         else if (!strcmp (argv[i], \"-o\")) outfname = argv[++i];\r\n         else {\r\n            printf (\"usage: cbor2json [-v] [-i <filename>] [-o filename]\\n\");\r\n            printf (\"   -v  verbose mode: print trace info\\n\");\r\n            printf (\"   -i <filename>  read CBOR msg from <filename>\\n\");\r\n            printf (\"   -o <filename>  write JSON data to <filename>\\n\");\r\n            return 1;\r\n         }\r\n      }\r\n   }\r\n\r\n   /* Initialize context structures */\r\n   ret = rtxInitContext (&jsonCtxt);\r\n   if (ret != 0) {\r\n      rtxErrPrint (&jsonCtxt);\r\n      return ret;\r\n   }\r\n   rtxErrInit();\r\n   /* rtxSetDiag (&jsonCtxt, verbose); */\r\n\r\n   ret = rtxInitContext (&cborCtxt);\r\n   if (ret != 0) {\r\n      rtxErrPrint (&cborCtxt);\r\n      return ret;\r\n   }\r\n   /* rtxSetDiag (&cborCtxt, verbose); */\r\n\r\n   /* Create file input stream */\r\n#if 0\r\n   /* Streaming not supported in open source version\r\n   ret = rtxStreamFileCreateReader (&jsonCtxt, filename);\r\n   */\r\n#else\r\n   /* Read input file into memory buffer */\r\n   ret = rtxFileReadBinary (&cborCtxt, filename, &pMsgBuf, &msglen);\r\n   if (0 == ret) {\r\n      ret = rtxInitContextBuffer (&cborCtxt, pMsgBuf, msglen);\r\n   }\r\n#endif\r\n   if (0 != ret) {\r\n      rtxErrPrint (&jsonCtxt);\r\n      rtxFreeContext (&jsonCtxt);\r\n      rtxFreeContext (&cborCtxt);\r\n      return ret;\r\n   }\r\n\r\n   /* Init JSON output buffer */\r\n   ret = rtxInitContextBuffer (&jsonCtxt, 0, 0);\r\n   if (0 != ret) {\r\n      rtxErrPrint (&jsonCtxt);\r\n      rtxFreeContext (&jsonCtxt);\r\n      rtxFreeContext (&cborCtxt);\r\n      return ret;\r\n   }\r\n\r\n   /* Invoke the translation function */\r\n   ret = cbor2json (&cborCtxt, &jsonCtxt);\r\n\r\n   if (0 == ret && cborCtxt.level != 0) \r\n      ret = LOG_RTERR (&cborCtxt, RTERR_UNBAL);\r\n\r\n   if (0 == ret && 0 != outfname) {\r\n      /* Write encoded JSON data to output file */\r\n      OSRTSAFEPUTCHAR (&jsonCtxt, '\\0');  /* null terminate buffer */\r\n      int fileret = rtxFileWriteText \r\n         (outfname, (const char*)jsonCtxt.buffer.data);\r\n\r\n      if (0 != fileret) {\r\n         printf (\"unable to write message data to '%s', status = %d\\n\", \r\n                 outfname, fileret);\r\n      }\r\n   }\r\n\r\n   if (0 != ret) {\r\n      rtxErrPrint (&jsonCtxt);\r\n      rtxErrPrint (&cborCtxt);\r\n   }\r\n\r\n   rtxFreeContext (&jsonCtxt);\r\n   rtxFreeContext (&cborCtxt);\r\n\r\n   return ret;\r\n}\r\n"], "filenames": ["util/cbor2json.c"], "buggy_code_start_loc": [114], "buggy_code_end_loc": [114], "fixing_code_start_loc": [115], "fixing_code_end_loc": [116], "type": "CWE-755", "message": "A memory corruption vulnerability in Objective Open CBOR Run-time (oocborrt) in versions before 2020-08-12 could allow an attacker to execute code via crafted Concise Binary Object Representation (CBOR) input to the cbor2json decoder. An uncaught error while decoding CBOR Major Type 3 text strings leads to the use of an attacker-controllable uninitialized stack value. This can be used to modify memory, causing a crash or potentially exploitable heap corruption.", "other": {"cve": {"id": "CVE-2020-24753", "sourceIdentifier": "cve@mitre.org", "published": "2020-09-17T18:15:12.320", "lastModified": "2021-07-21T11:39:23.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A memory corruption vulnerability in Objective Open CBOR Run-time (oocborrt) in versions before 2020-08-12 could allow an attacker to execute code via crafted Concise Binary Object Representation (CBOR) input to the cbor2json decoder. An uncaught error while decoding CBOR Major Type 3 text strings leads to the use of an attacker-controllable uninitialized stack value. This can be used to modify memory, causing a crash or potentially exploitable heap corruption."}, {"lang": "es", "value": "Una vulnerabilidad de corrupci\u00f3n de la memoria en Objective Open CBOR Run-time (oocborrt) en versiones anteriores al 12-08-2020, podr\u00eda permitir a un atacante ejecutar c\u00f3digo por medio de la entrada de Concise Binary Object Representation (CBOR) hacia el decodificador cbor2json.&#xa0;Un error no detectado al decodificar cadenas de texto CBOR Major Type 3 conlleva al uso de un valor de pila no inicializado controlable por el atacante.&#xa0;Esto puede ser usado para modificar la memoria, causando un bloqueo o una corrupci\u00f3n de la pila potencialmente explotable"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-755"}, {"lang": "en", "value": "CWE-787"}, {"lang": "en", "value": "CWE-908"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:objective_open_cbor_run-time_project:objective_open_cbor_run-time:*:*:*:*:*:*:*:*", "versionEndExcluding": "2020-08-12", "matchCriteriaId": "05A036E7-88E5-451A-A98B-B22EB94A0C49"}]}]}], "references": [{"url": "https://github.com/objsys/oocborrt/commit/539851c66778f68a244633985f6f8d0df94ea3b3", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://warcollar.com/cve-2020-24753.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/objsys/oocborrt/commit/539851c66778f68a244633985f6f8d0df94ea3b3"}}