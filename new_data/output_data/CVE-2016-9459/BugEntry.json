{"buggy_code": ["<?php\n/**\n * @author Georg Ehrke <georg@owncloud.com>\n * @author Morris Jobke <hey@morrisjobke.de>\n * @author Thomas M\u00fcller <thomas.mueller@tmit.eu>\n *\n * @copyright Copyright (c) 2016, ownCloud, Inc.\n * @license AGPL-3.0\n *\n * This code is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License, version 3,\n * as published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License, version 3,\n * along with this program.  If not, see <http://www.gnu.org/licenses/>\n *\n */\n\nnamespace OC\\Settings\\Controller;\n\nuse OCP\\AppFramework\\Controller;\nuse OCP\\AppFramework\\Http;\nuse OCP\\AppFramework\\Http\\JSONResponse;\nuse OCP\\AppFramework\\Http\\StreamResponse;\nuse OCP\\IL10N;\nuse OCP\\IRequest;\nuse OCP\\IConfig;\n\n/**\n * Class LogSettingsController\n *\n * @package OC\\Settings\\Controller\n */\nclass LogSettingsController extends Controller {\n\t/**\n\t * @var \\OCP\\IConfig\n\t */\n\tprivate $config;\n\n\t/**\n\t * @var \\OCP\\IL10N\n\t */\n\tprivate $l10n;\n\n\t/**\n\t * @param string $appName\n\t * @param IRequest $request\n\t * @param IConfig $config\n\t */\n\tpublic function __construct($appName,\n\t\t\t\t\t\t\t\tIRequest $request,\n\t\t\t\t\t\t\t\tIConfig $config,\n\t\t\t\t\t\t\t\tIL10N $l10n) {\n\t\tparent::__construct($appName, $request);\n\t\t$this->config = $config;\n\t\t$this->l10n = $l10n;\n\t}\n\n\t/**\n\t * set log level for logger\n\t *\n\t * @param int $level\n\t * @return JSONResponse\n\t */\n\tpublic function setLogLevel($level) {\n\t\tif ($level < 0 || $level > 4) {\n\t\t\treturn new JSONResponse([\n\t\t\t\t'message' => (string) $this->l10n->t('log-level out of allowed range'),\n\t\t\t], Http::STATUS_BAD_REQUEST);\n\t\t}\n\n\t\t$this->config->setSystemValue('loglevel', $level);\n\t\treturn new JSONResponse([\n\t\t\t'level' => $level,\n\t\t]);\n\t}\n\n\t/**\n\t * get log entries from logfile\n\t *\n\t * @param int $count\n\t * @param int $offset\n\t * @return JSONResponse\n\t */\n\tpublic function getEntries($count=50, $offset=0) {\n\t\treturn new JSONResponse([\n\t\t\t'data' => \\OC_Log_Owncloud::getEntries($count, $offset),\n\t\t\t'remain' => count(\\OC_Log_Owncloud::getEntries(1, $offset + $count)) !== 0,\n\t\t]);\n\t}\n\n\t/**\n\t * download logfile\n\t *\n\t * @NoCSRFRequired\n\t *\n\t * @return StreamResponse\n\t */\n\tpublic function download() {\n\t\t$resp = new StreamResponse(\\OC_Log_Owncloud::getLogFilePath());\n\t\t$resp->addHeader('Content-Disposition', 'attachment; filename=\"owncloud.log\"');\n\t\treturn $resp;\n\t}\n}\n", "<?php\n/**\n * @author Georg Ehrke\n * @copyright 2014 Georg Ehrke <georg@ownCloud.com>\n *\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\nnamespace Test\\Settings\\Controller;\n\nuse \\OC\\Settings\\Application;\nuse OC\\Settings\\Controller\\LogSettingsController;\n\n/**\n * @package OC\\Settings\\Controller\n */\nclass LogSettingsControllerTest extends \\Test\\TestCase {\n\n\t/** @var \\OCP\\AppFramework\\IAppContainer */\n\tprivate $container;\n\n\t/** @var LogSettingsController */\n\tprivate $logSettingsController;\n\n\tprotected function setUp() {\n\t\t$app = new Application();\n\t\t$this->container = $app->getContainer();\n\t\t$this->container['Config'] = $this->getMockBuilder('\\OCP\\IConfig')\n\t\t\t->disableOriginalConstructor()->getMock();\n\t\t$this->container['AppName'] = 'settings';\n\t\t$this->logSettingsController = $this->container['LogSettingsController'];\n\t}\n\n\t/**\n\t * @dataProvider logLevelData\n\t */\n\tpublic function testSetLogLevel($level, $inRange) {\n\t\tif ($inRange) {\n\t\t\t$this->container['Config']\n\t\t\t\t->expects($this->once())\n\t\t\t\t->method('setSystemValue')\n\t\t\t\t->with('loglevel', $level);\n\t\t}\n\n\t\t$response = $this->logSettingsController->setLogLevel($level)->getData();\n\n\t\tif ($inRange) {\n\t\t\t$expectedResponse = ['level' => $level];\n\t\t} else {\n\t\t\t$expectedResponse = ['message' => 'log-level out of allowed range'];\n\t\t}\n\n\t\t$this->assertSame($expectedResponse, $response);\n\t}\n\n\tpublic function logLevelData() {\n\t\treturn [\n\t\t\t[-1, false],\n\t\t\t[0, true],\n\t\t\t[1, true],\n\t\t\t[2, true],\n\t\t\t[3, true],\n\t\t\t[4, true],\n\t\t\t[5, false],\n\t\t];\n\t}\n\n\tpublic function testDownload() {\n\t\t$response = $this->logSettingsController->download();\n\n\t\t$this->assertInstanceOf('\\OCP\\AppFramework\\Http\\StreamResponse', $response);\n\t}\n}\n"], "fixing_code": ["<?php\n/**\n * @author Georg Ehrke <georg@owncloud.com>\n * @author Morris Jobke <hey@morrisjobke.de>\n * @author Thomas M\u00fcller <thomas.mueller@tmit.eu>\n *\n * @copyright Copyright (c) 2016, ownCloud, Inc.\n * @license AGPL-3.0\n *\n * This code is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License, version 3,\n * as published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License, version 3,\n * along with this program.  If not, see <http://www.gnu.org/licenses/>\n *\n */\n\nnamespace OC\\Settings\\Controller;\n\nuse OCP\\AppFramework\\Controller;\nuse OCP\\AppFramework\\Http;\nuse OCP\\AppFramework\\Http\\JSONResponse;\nuse OCP\\AppFramework\\Http\\StreamResponse;\nuse OCP\\IL10N;\nuse OCP\\IRequest;\nuse OCP\\IConfig;\n\n/**\n * Class LogSettingsController\n *\n * @package OC\\Settings\\Controller\n */\nclass LogSettingsController extends Controller {\n\t/**\n\t * @var \\OCP\\IConfig\n\t */\n\tprivate $config;\n\n\t/**\n\t * @var \\OCP\\IL10N\n\t */\n\tprivate $l10n;\n\n\t/**\n\t * @param string $appName\n\t * @param IRequest $request\n\t * @param IConfig $config\n\t */\n\tpublic function __construct($appName,\n\t\t\t\t\t\t\t\tIRequest $request,\n\t\t\t\t\t\t\t\tIConfig $config,\n\t\t\t\t\t\t\t\tIL10N $l10n) {\n\t\tparent::__construct($appName, $request);\n\t\t$this->config = $config;\n\t\t$this->l10n = $l10n;\n\t}\n\n\t/**\n\t * set log level for logger\n\t *\n\t * @param int $level\n\t * @return JSONResponse\n\t */\n\tpublic function setLogLevel($level) {\n\t\tif ($level < 0 || $level > 4) {\n\t\t\treturn new JSONResponse([\n\t\t\t\t'message' => (string) $this->l10n->t('log-level out of allowed range'),\n\t\t\t], Http::STATUS_BAD_REQUEST);\n\t\t}\n\n\t\t$this->config->setSystemValue('loglevel', $level);\n\t\treturn new JSONResponse([\n\t\t\t'level' => $level,\n\t\t]);\n\t}\n\n\t/**\n\t * get log entries from logfile\n\t *\n\t * @param int $count\n\t * @param int $offset\n\t * @return JSONResponse\n\t */\n\tpublic function getEntries($count=50, $offset=0) {\n\t\treturn new JSONResponse([\n\t\t\t'data' => \\OC_Log_Owncloud::getEntries($count, $offset),\n\t\t\t'remain' => count(\\OC_Log_Owncloud::getEntries(1, $offset + $count)) !== 0,\n\t\t]);\n\t}\n\n\t/**\n\t * download logfile\n\t *\n\t * @NoCSRFRequired\n\t *\n\t * @return StreamResponse\n\t */\n\tpublic function download() {\n\t\t$resp = new StreamResponse(\\OC_Log_Owncloud::getLogFilePath());\n\t\t$resp->addHeader('Content-Type', 'application/octet-stream');\n\t\t$resp->addHeader('Content-Disposition', 'attachment; filename=\"nextcloud.log\"');\n\t\treturn $resp;\n\t}\n}\n", "<?php\n/**\n * @author Georg Ehrke\n * @copyright 2014 Georg Ehrke <georg@ownCloud.com>\n *\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING-README file.\n */\nnamespace Test\\Settings\\Controller;\n\nuse \\OC\\Settings\\Application;\nuse OC\\Settings\\Controller\\LogSettingsController;\nuse OCP\\AppFramework\\Http\\StreamResponse;\n\n/**\n * @package OC\\Settings\\Controller\n */\nclass LogSettingsControllerTest extends \\Test\\TestCase {\n\n\t/** @var \\OCP\\AppFramework\\IAppContainer */\n\tprivate $container;\n\n\t/** @var LogSettingsController */\n\tprivate $logSettingsController;\n\n\tprotected function setUp() {\n\t\t$app = new Application();\n\t\t$this->container = $app->getContainer();\n\t\t$this->container['Config'] = $this->getMockBuilder('\\OCP\\IConfig')\n\t\t\t->disableOriginalConstructor()->getMock();\n\t\t$this->container['AppName'] = 'settings';\n\t\t$this->logSettingsController = $this->container['LogSettingsController'];\n\t}\n\n\t/**\n\t * @dataProvider logLevelData\n\t */\n\tpublic function testSetLogLevel($level, $inRange) {\n\t\tif ($inRange) {\n\t\t\t$this->container['Config']\n\t\t\t\t->expects($this->once())\n\t\t\t\t->method('setSystemValue')\n\t\t\t\t->with('loglevel', $level);\n\t\t}\n\n\t\t$response = $this->logSettingsController->setLogLevel($level)->getData();\n\n\t\tif ($inRange) {\n\t\t\t$expectedResponse = ['level' => $level];\n\t\t} else {\n\t\t\t$expectedResponse = ['message' => 'log-level out of allowed range'];\n\t\t}\n\n\t\t$this->assertSame($expectedResponse, $response);\n\t}\n\n\tpublic function logLevelData() {\n\t\treturn [\n\t\t\t[-1, false],\n\t\t\t[0, true],\n\t\t\t[1, true],\n\t\t\t[2, true],\n\t\t\t[3, true],\n\t\t\t[4, true],\n\t\t\t[5, false],\n\t\t];\n\t}\n\n\tpublic function testDownload() {\n\t\t$response = $this->logSettingsController->download();\n\n\t\t$expected = new StreamResponse(\\OC_Log_Owncloud::getLogFilePath());\n\t\t$expected->addHeader('Content-Type', 'application/octet-stream');\n\t\t$expected->addHeader('Content-Disposition', 'attachment; filename=\"nextcloud.log\"');\n\t\t$this->assertEquals($expected, $response);\n\t}\n}\n"], "filenames": ["settings/controller/logsettingscontroller.php", "tests/settings/controller/logsettingscontrollertest.php"], "buggy_code_start_loc": [106, 13], "buggy_code_end_loc": [107, 73], "fixing_code_start_loc": [106, 14], "fixing_code_end_loc": [108, 77], "type": "CWE-79", "message": "Nextcloud Server before 9.0.52 & ownCloud Server before 9.0.4 are vulnerable to a log pollution vulnerability potentially leading to a local XSS. The download log functionality in the admin screen is delivering the log in JSON format to the end-user. The file was delivered with an attachment disposition forcing the browser to download the document. However, Firefox running on Microsoft Windows would offer the user to open the data in the browser as an HTML document. Thus any injected data in the log would be executed.", "other": {"cve": {"id": "CVE-2016-9459", "sourceIdentifier": "support@hackerone.com", "published": "2017-03-28T02:59:00.730", "lastModified": "2019-10-09T23:20:28.537", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Nextcloud Server before 9.0.52 & ownCloud Server before 9.0.4 are vulnerable to a log pollution vulnerability potentially leading to a local XSS. The download log functionality in the admin screen is delivering the log in JSON format to the end-user. The file was delivered with an attachment disposition forcing the browser to download the document. However, Firefox running on Microsoft Windows would offer the user to open the data in the browser as an HTML document. Thus any injected data in the log would be executed."}, {"lang": "es", "value": "Nextcloud Server en versiones anteriores a 9.0.52 & ownCloud Server en versiones anteriores a 9.0.4 son vulnerables a una vulnerabilidad de contaminaci\u00f3n de registro que potencialmente conduce a una XSS local. La funcionalidad de registro de descarga en la pantalla de administraci\u00f3n proporciona el registro en formato JSON al usuario final. El archivo se entreg\u00f3 con una disposici\u00f3n de adjuntos forzando al navegador a descargar el documento. Sin embargo, Firefox que funciona en Microsoft Windows ofrecer\u00eda al usuario abrir los datos en el navegador como documento HTML. As\u00ed, cualquier dato inyectado en el registro ser\u00eda ejecutado."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "support@hackerone.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-209"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:nextcloud_server:*:*:*:*:*:*:*:*", "versionEndExcluding": "9.0.52", "matchCriteriaId": "DC479D9A-DAEB-42B6-98D7-0A417B34359D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:*:*:*:*:*:*:*:*", "versionEndExcluding": "9.0.4", "matchCriteriaId": "3FAD2663-CE0E-4AB0-90C5-D47124458AAC"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/97284", "source": "support@hackerone.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/nextcloud/server/commit/94975af6db1551c2d23136c2ea22866a5b416070", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/owncloud/core/commit/044ee072a647636b1a17c89265c7233b35371335", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/owncloud/core/commit/b7fa2c5dc945b40bc6ed0a9a0e47c282ebf043e1", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/owncloud/core/commit/efa35d621dc7ff975468e636a5d1c153511296dc", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://hackerone.com/reports/146278", "source": "support@hackerone.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://nextcloud.com/security/advisory/?id=nc-sa-2016-002", "source": "support@hackerone.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://owncloud.org/security/advisory?id=oc-sa-2016-012", "source": "support@hackerone.com", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/nextcloud/server/commit/94975af6db1551c2d23136c2ea22866a5b416070"}}