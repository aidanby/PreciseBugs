{"buggy_code": ["<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expHTMLEditorController\n *\n * @package    Core\n * @subpackage Controllers\n */\n\nclass expHTMLEditorController extends expController\n{\n    protected $manage_permissions = array(\n        'activate' => \"Activate\",\n        'preview'  => \"Preview Editor Toolbars\"\n    );\n    public $requires_login = array(\n        'preview'=>'Preview Editor',\n    );\n\n    static function displayname()\n    {\n        return gt(\"Editors\");\n    }\n\n    static function description()\n    {\n        return gt(\"Mostly for CKEditor\");\n    }\n\n    static function author()\n    {\n        return \"Phillip Ball\";\n    }\n\n    static function hasSources()\n    {\n        return false;\n    }\n\n    static function hasContent()\n    {\n        return false;\n    }\n\n    function __construct($src = null, $params = array())\n    {\n        parent:: __construct($src, $params);\n        if (empty($this->params['editor'])) {\n            $this->params['editor'] = SITE_WYSIWYG_EDITOR;\n        }\n    }\n\n    function manage()\n    {\n        global $db;\n\n        expHistory::set('manageable', $this->params);\n        if (SITE_WYSIWYG_EDITOR == \"FCKeditor\") {\n            flash('error', gt('FCKeditor is deprecated!'));\n            redirect_to(array(\"module\" => \"administration\", \"action\" => \"configure_site\"));\n        }\n\n        // otherwise, on to the show\n        $configs = $db->selectObjects('htmleditor_' . $this->params['editor'], 1);\n\n        assign_to_template(\n            array(\n                'configs' => $configs,\n                'editor' => $this->params['editor']\n            )\n        );\n    }\n\n    function update()\n    {\n        global $db;\n\n        $obj = self::getEditorSettings($this->params['id'], $this->params['editor']);\n        $obj->name = $this->params['name'];\n        $obj->data = stripSlashes($this->params['data']);\n        $obj->skin = $this->params['skin'];\n        $obj->scayt_on = $this->params['scayt_on'];\n        $obj->paste_word = $this->params['paste_word'];\n        $obj->plugins = stripSlashes($this->params['plugins']);\n        $obj->stylesset = stripSlashes($this->params['stylesset']);\n        $obj->formattags = stripSlashes($this->params['formattags']);\n        $obj->fontnames = stripSlashes($this->params['fontnames']);\n        if (empty($this->params['id'])) {\n            $this->params['id'] = $db->insertObject($obj, 'htmleditor_' . $this->params['editor']);\n        } else {\n            $db->updateObject($obj, 'htmleditor_' . $this->params['editor'], null, 'id');\n        }\n        if ($this->params['active']) {\n            $this->activate();\n        }\n        expHistory::returnTo('manageable');\n    }\n\n    function edit()\n    {\n        expHistory::set('editable', $this->params);\n        $tool = self::getEditorSettings(!empty($this->params['id'])?$this->params['id']:null, $this->params['editor']);\n        if ($tool == null) $tool = new stdClass();\n        $tool->data = !empty($tool->data) ? @stripSlashes($tool->data) : '';\n        $tool->plugins = !empty($tool->plugins) ? @stripSlashes($tool->plugins) : '';\n        $tool->stylesset = !empty($tool->stylesset) ? @stripSlashes($tool->stylesset) : '';\n        $tool->formattags = !empty($tool->formattags) ? @stripSlashes($tool->formattags) : '';\n        $tool->fontnames = !empty($tool->fontnames) ? @stripSlashes($tool->fontnames) : '';\n        $skins_dir = opendir(BASE . 'external/editors/' . $this->params['editor'] . '/skins');\n        $skins = array();\n        while (($skin = readdir($skins_dir)) !== false) {\n            if ($skin != '.' && $skin != '..') {\n                $skins[] = $skin;\n            }\n        }\n        assign_to_template(\n            array(\n                'record' => $tool,\n                'skins'  => $skins,\n                'editor' => $this->params['editor']\n            )\n        );\n    }\n\n    function delete()\n    {\n        global $db;\n\n        expHistory::set('editable', $this->params);\n        @$db->delete('htmleditor_' . $this->params['editor'], \"id=\" . $this->params['id']);\n        expHistory::returnTo('manageable');\n    }\n\n    function activate()\n    {\n        global $db;\n\n        $db->toggle('htmleditor_' . $this->params['editor'], \"active\", 'active=1');\n        if ($this->params['id'] != \"default\") {\n            $active = self::getEditorSettings($this->params['id'], $this->params['editor']);\n            $active->active = 1;\n            $db->updateObject($active, 'htmleditor_' . $this->params['editor'], null, 'id');\n        }\n        expHistory::returnTo('manageable');\n    }\n\n    function preview()\n    {\n        if ($this->params['id'] == 0) { // we want the default editor\n            $demo = new stdClass();\n            $demo->id = 0;\n            $demo->name = \"Default\";\n            if ($this->params['editor'] == 'ckeditor') {\n                $demo->skin = 'kama';\n            } elseif ($this->params['editor'] == 'tinymce') {\n                $demo->skin = 'lightgray';\n            }\n        } else {\n            $demo = self::getEditorSettings($this->params['id'], $this->params['editor']);\n        }\n        assign_to_template(\n            array(\n                'demo' => $demo,\n                'editor' => $this->params['editor']\n            )\n        );\n    }\n\n    public static function getEditorSettings($settings_id, $editor)\n    {\n        global $db;\n\n        return @$db->selectObject('htmleditor_' . $editor, \"id=\" . $settings_id);\n    }\n\n    public static function getActiveEditorSettings($editor)\n    {\n        global $db;\n\n        return $db->selectObject('htmleditor_' . $editor, 'active=1');\n    }\n\n}\n\n?>\n", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package    Modules\n */\n\nclass orderController extends expController {\n    protected $manage_permissions = array(\n        'add_order_item'      => 'Add Order Item',\n        'download'      => 'Download Label',\n//        'create_new_order'    => 'Create A New Order',\n//        'createReferenceOrder'=> 'Create Reference Order',\n//        'edit_address'        => 'Edit Address',\n//        'edit_invoice_id'     => 'Edit Invoice Id',\n//        'edit_order_item'     => 'Edit Order Item',\n//        'edit_payment_info'   => 'Edit Payment Info',\n//        'edit_shipping_method'=> 'Edit Shipping Method',\n//        'edit_totals'         => 'Edit Totals',\n//        'email'         => 'Send Email',\n        'quickfinder'=> 'Do a quick order lookup',\n        'save_payment_info'=> 'Save Payment Info',\n        'save_address'=> 'Save Address',\n        'save_order_item'=> 'Save Order Item',\n//        'save_new_order_item'=> 'Save New Order Item',\n        'save_totals'=> 'Save Totals',\n        'save_invoice_id'=> 'Save Invoice Id',\n        'save_shipping_method'=> 'Save Shipping Method',\n        'save_new_order'=> 'Save a new order',\n        'save_reference_order'=> 'Save Reference Order',\n        'set'           => 'Change Status',\n        'showall'             => 'Manage',\n        'show'                => 'View Orders',\n        'update'                => 'update order',\n    );\n    public $requires_login = array(\n        'ordersbyuser'=>'You must be logged in to view past orders',\n    );\n\n    static function displayname() {\n        return gt(\"e-Commerce Order Manager\");\n    }\n\n    static function description() {\n        return gt(\"Use this module to manage the orders from your ecommerce store.\");\n    }\n\n    function showall() {\n        global $db;\n\n        expHistory::set('viewable', $this->params);\n\n        // remove abaondoned carts\n        /*$count = $db->countObjects('orders', 'purchased=0');\n        for($i=0; $i<$count; $i++) {\n            // get the cart\n            $cart = $db->selectObject('orders','purchased=0');\n\n            // check to make sure this isn't an active session\n            $ticket = $db->selectObject('sessionticket', \"ticket='\".$cart->sessionticket_ticket.\"'\");\n            if (empty($ticket)) {\n                // delete all the order items for this cart and their shippingmethods\n                foreach($db->selectObjects('orderitems', 'orders_id='.$cart->id) as $oi) {\n                    $db->delete('shippingmethods', 'id='.$oi->shippingmethods_id);\n                    $db->delete('orderitems', 'orders_id='.$cart->id);\n                }\n\n                // delete the billing methods for this cart.\n                $db->delete('billingmethods', 'orders_id='.$cart->id);\n                $db->delete('orders', 'id='.$cart->id);\n            }\n\n        } */\n\n        // find orders with a \"closed\" status type\n//        $closed_count = 0;\n        if (empty($this->params['showclosed'])) {\n            $closed_status = $db->selectColumn('order_status', 'id', 'treat_as_closed=1');\n            $closed_status = implode(',',$closed_status);\n//            $status_where  = '';\n            $status_where  = ' AND order_status_id NOT IN (' . $closed_status . ')';\n\n//            foreach ($closed_status as $status) {\n//                if (empty($status_where)) {\n//                    $status_where .= ' AND (order_status_id!=' . $status;\n//                } else {\n//                    $status_where .= ' AND order_status_id!=' . $status;\n//                }\n//                $closed_count += $db->countObjects('orders', 'order_status_id=' . $status);\n//            }\n            $closed_count = $db->countObjects('orders', 'order_status_id IN (' . $closed_status . ')');\n        } else {\n            $status_where = '';\n            $closed_count = -1;\n        }\n\n        // build out a SQL query that gets all the data we need and is sortable.\n        $sql = 'SELECT o.*, b.firstname as firstname, b.billing_cost as total, b.transaction_state as paid, b.billingcalculator_id as method, b.middlename as middlename, b.lastname as lastname, os.title as status, ot.title as order_type ';\n        $sql .= 'FROM ' . $db->prefix . 'orders o, ' . $db->prefix . 'billingmethods b, ';\n        $sql .= $db->prefix . 'order_status os, ';\n        $sql .= $db->prefix . 'order_type ot ';\n        $sql .= 'WHERE o.id = b.orders_id AND o.order_status_id = os.id AND o.order_type_id = ot.id AND o.purchased > 0';\n  //FIXME this sql isn't correct???\n//        if (!empty($status_where)) {\n//            $status_where .= ')';\n            $sql .= $status_where;\n//        }\n        if (ECOM_LARGE_DB) {\n            $limit = empty($this->config['limit']) ? 50 : $this->config['limit'];\n        } else {\n            $limit = 0;  // we'll paginate on the page\n        }\n        //eDebug($sql, true);\n        $page = new expPaginator(array(\n            //'model'=>'order',\n            'sql'       => $sql,\n            'order'     => 'purchased',\n            'dir'       => 'DESC',\n            'limit'     => $limit,\n            'page'      => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'=> $this->params['controller'],\n            'action'    => $this->params['action'],\n            'columns'   => array(\n                gt('Customer')      => 'lastname',\n                gt('Inv #')         => 'invoice_id',\n                gt('Total')         => 'total',\n                gt('Payment')       => 'method',\n                gt('Purchased')     => 'purchased',\n                gt('Type')          => 'order_type_id',\n                gt('Status')        => 'order_status_id',\n                gt('Ref')           => 'orig_referrer',\n            )\n        ));\n        //eDebug($page,true);\n        assign_to_template(array(\n            'page'        => $page,\n            'closed_count'=> $closed_count,\n            'new_order'   => order::getDefaultOrderStatus()\n        ));\n    }\n\n    function show() {\n        global $db, $user;\n//eDebug($_REQUEST);\n//eDebug($this->params,true);\n//if (!empty($this->params['printerfriendly'])) $_REQUEST['printerfriendly'] = 1;\n\n        expHistory::set('viewable', $this->params);\n\n        if (!empty($this->params['invoice']) && empty($this->params['id'])) {\n            $ord = new order();\n            $order = $ord->find('first', 'invoice_id=' . $this->params['invoice']);\n            $this->params['id'] = $order->id;\n        } elseif (!empty($this->params['id'])) {\n            $order = new order($this->params['id']);\n        }\n        if (empty($order->id)) {\n            flash('notice', gt('That order does not exist.'));\n            expHistory::back();\n        }\n\n        // We're forcing the location. Global store setting will always have this loc\n//        $storeConfig = new expConfig(expCore::makeLocation(\"ecomconfig\",\"@globalstoresettings\",\"\"));\n\n        $billing         = new billing($this->params['id']);\n        $status_messages = $db->selectObjects('order_status_messages');\n        $order_type      = $order->getOrderType();\n        //eDebug($order->billingmethod[0]->billingtransaction);\n        $order->billingmethod[0]->billingtransaction = array_reverse($order->billingmethod[0]->billingtransaction);\n        if (empty($order->billingmethod[0]->billingtransaction[0]->billingcalculator_id)) {\n            $calc_name = $order->billingmethod[0]->billingcalculator->calculator_name;\n            $order->billingmethod[0]->billingtransaction[0]->billingcalculator = new $calc_name();\n        }\n        //eDebug($order->billingmethod[0]->billingtransaction);\n        if (isset($this->params['printerfriendly']))\n            $pf = $this->params['printerfriendly'];\n        else\n            $pf = 0;\n\n        $to_addresses[] = $order->billingmethod[0]->email;\n//        $s              = array_pop($order->shippingmethods);  //FIXME we don't really want to 'pop' it off the object\n        $s              = reset($order->shippingmethods);\n        if ($s->email != $order->billingmethod[0]->email) $to_addresses[] = $s->email;\n\n        $from_addresses                                        = array();\n        $from_addresses[SMTP_FROMADDRESS]                      = SMTP_FROMADDRESS;\n        $from_addresses[ecomconfig::getConfig('from_address')] = ecomconfig::getConfig('from_address');\n        $from_addresses[$user->email]                          = $user->email;\n        $from_addresses['other']                               = 'Other (enter below)';\n        $from_addresses = array_filter($from_addresses);\n        $from_default = ecomconfig::getConfig('from_address');\n        $from_default = !empty($from_default) ? $from_default : SMTP_FROMADDRESS;\n\n        $email_subject = 'Message from ' . ecomconfig::getConfig('storename') . ' about your order (#' . $order->invoice_id . ')';\n\n        $order->setReferencingIds();\n\n        $css = file_get_contents(BASE . 'framework/modules/ecommerce/assets/css/print-invoice.css');\n\n        assign_to_template(array(\n            'css'            => $css,\n            'pf'             => $pf,\n            'order'          => $order,\n            'order_user'     => new user($order->user_id),\n//            'shipping'       => $order->orderitem[0],  //FIXME what about new orders with no items??\n            'billing'        => $billing,\n            'billinginfo'    => $billing->getBillingInfo(),\n            'messages'       => $status_messages,\n            'order_type'     => $order_type,\n//            'storeConfig'    => $storeConfig->config,\n            'sales_reps'     => order::getSalesReps(),\n            'from_addresses' => $from_addresses,\n            'from_default'   => $from_default,\n            'email_subject'  => $email_subject,\n            'to_addresses'   => implode(',', $to_addresses)\n        ));\n        if ($order->shipping_required) {\n            assign_to_template(array(\n                'shipping'       => $order->orderitem[0],  //FIXME what about new orders with no items??\n            ));\n        }\n    }\n\n    function myOrder() {\n        global $user, $db;\n\n        $order = new order($this->params['id']);\n        if ($order->purchased == 0)\n            flashAndFlow('error', gt('You do not have permission to view this order.'));\n\n        $this->loc->src = \"@globalstoresettings\";\n\n        // We're forcing the location. Global store setting will always have this loc\n//        $storeConfig = new expConfig(expCore::makeLocation(\"ecomconfig\",\"@globalstoresettings\",\"\"));\n\n        //check here for the hash in the params, or session set w/ perms to view...shs = xaf7y0s87d7elshd70 etc\n        //if present, prompt user for the order number and email address on the order\n        //and if they pass, show the order to them. Need to maybe set something in the session then for subsequent\n        //viewing of the order?\n        if ($user->id != $order->user_id) {\n            if ($user->isAdmin()) {\n                redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $this->params['id']));\n            } else {\n                flashAndFlow('error', gt('You do not have permission to view this order.'));\n            }\n        }\n\n        expHistory::set('viewable', $this->params);\n\n        $billing            = new billing($this->params['id']);\n        $status_messages    = $db->selectObjects('order_status_messages');\n        $order_type         = $order->getOrderType();\n        $order->total_items = 0;\n        foreach ($order->orderitem as $item) {\n            $order->total_items += $item->quantity;\n            $order->shipping_city  = $item->shippingmethod->city;\n            $order->shipping_state = $item->shippingmethod->state;\n        }\n        $state                   = new geoRegion($order->shipping_state);\n        $country                 = new geoCountry($state->country_id);\n        $order->shipping_country = $country->iso_code_3letter;\n        $order->shipping_state   = $state->name;\n\n        //eDebug($order,true);\n\n        $order->billingmethod[0]->billingtransaction = array_reverse($order->billingmethod[0]->billingtransaction);\n        if (isset($this->params['printerfriendly'])) $pf = $this->params['printerfriendly'];\n        else $pf = 0;\n        $css = file_get_contents(BASE . 'framework/modules/ecommerce/assets/css/print-invoice.css');\n\n        $order->calculateGrandTotal();\n\n        $trackMe = false;\n        if (isset($this->params['tc']) && $this->params['tc'] == 1) {\n            if (expSession::is_set('orders_tracked')) {\n                $trackingArray = expSession::get('orders_tracked');\n                if (in_array($order->invoice_id, $trackingArray)) {\n                    $trackMe = false;\n                } else {\n                    $trackMe         = true;\n                    $trackingArray[] = $order->invoice_id;\n                    expSession::set('orders_tracked', $trackingArray);\n                }\n            } else {\n                $trackMe         = true;\n                $trackingArray[] = $order->invoice_id;\n                expSession::set('orders_tracked', $trackingArray);\n            }\n        }\n        if (DEVELOPMENT != 0)\n            $trackMe = false;\n        assign_to_template(array(\n            'printerfriendly'=> $pf,\n            'css'            => $css,\n            'order'          => $order,\n            'shipping'       => $order->orderitem[0],\n            'billing'        => $billing,\n            'billinginfo'    => $billing->getBillingInfo(),\n            'order_type'     => $order_type,\n//            'storeConfig'    => $storeConfig->config,\n            'tc'             => $trackMe,\n            'checkout'       => !empty($this->params['tc'])  //FIXME we'll use the tc param for now\n        ));\n\n    }\n\n    function email() {\n        global $template, $user;\n\n        // setup a template suitable for emailing\n        $template = expTemplate::get_template_for_action($this, 'email_invoice', $this->loc);\n        $order    = new order($this->params['id']);\n        $billing  = new billing($this->params['id']);\n//        if ($billing->calculator != null) {\n//            $billinginfo = $billing->calculator->userView(unserialize($billing->billingmethod->billing_options));\n//        } else {\n//            if (empty($opts)) {\n//                $billinginfo = false;\n//            } else {\n//                $billinginfo = gt(\"No Cost\");\n//                if (!empty($opts->payment_due)) {\n//                    $billinginfo .= '<br>'.gt('Payment Due') . ': ' . expCore::getCurrencySymbol() . number_format($opts->payment_due, 2, \".\", \",\");\n//                }\n//            }\n//        }\n        $css = file_get_contents(BASE.'framework/modules/ecommerce/assets/css/print-invoice.css');\n        assign_to_template(array(\n            'css'         => $css,\n            'order'       => $order,\n            'shipping'    => $order->orderitem[0],\n            'billing'     => $billing,\n            'billinginfo' => $billing->getBillingInfo(),\n        ));\n\n        // build the html and text versions of the message\n        $html = $template->render();\n//        $txt  = strip_tags($html);\n\n        // send email invoices to the admins if needed\n        if (ecomconfig::getConfig('email_invoice') == true) {\n            $addresses = explode(',', ecomconfig::getConfig('email_invoice_addresses'));\n            foreach ($addresses as $address) {\n                $mail = new expMail();\n                $from = array(ecomconfig::getConfig('from_address') => ecomconfig::getConfig('from_name'));\n                if (empty($from[0])) $from = SMTP_FROMADDRESS;\n                $mail->quickSend(array(\n                    'html_message'=> $html,\n//                    'text_message'=> $txt,\n                    'text_message'=> expString::html2text($html),\n                    'to'          => trim($address),\n                    'from'        => $from,\n                    'subject'     => 'An order was placed on the ' . ecomconfig::getConfig('storename'),\n                ));\n            }\n        }\n\n        // email the invoice to the user if we need to\n        if (ecomconfig::getConfig('email_invoice_to_user') == true && !empty($user->email)) {\n            $usermsg = \"<p>\" . ecomconfig::getConfig('invoice_msg') . \"<p>\";\n            $usermsg .= $html;\n//            $usermsg .= ecomconfig::getConfig('ecomfooter');\n\n            $mail = new expMail();\n            $from = array(ecomconfig::getConfig('from_address') => ecomconfig::getConfig('from_name'));\n            if (empty($from[0])) $from = SMTP_FROMADDRESS;\n            $mail->quickSend(array(\n                'html_message'=> $usermsg,\n//                'text_message'=> $txt,\n                'text_message'=> expString::html2text($usermsg),\n                'to'          => array(trim($user->email) => trim(user::getUserAttribution($user->id))),\n                //'to'=>$order->billingmethod[0]->email,\n                'from'        => $from,\n                'subject'     => ecomconfig::getConfig('invoice_subject'),\n            ));\n        }\n    }\n\n    function update_shipping() {\n        $order                   = new order($this->params['id']);\n        $this->params['shipped'] = datetimecontrol::parseData('shipped', $this->params);\n        $order->update($this->params);\n        flash('message', gt('Shipping information updated.'));\n        expHistory::back();\n    }\n\n    function getPDF($orders = null) {\n        global $user, $timer;\n\n        $invoice = '<!DOCTYPE HTML><HTML><HEAD>';\n        // the basic styles\n        if (!bs3())\n            $invoice .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.URL_FULL.'external/normalize/normalize.css\" >';\n        if (!bs())\n//            $invoice .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.URL_FULL.'external/normalize/normalize.css\" >';\n        if (bs2())\n            $invoice .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.URL_FULL.'external/bootstrap/css/bootstrap.css\" >';\n        if (bs3())\n            $invoice .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.URL_FULL.'external/bootstrap3/css/bootstrap.css\" >';\n        $invoice .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.URL_FULL.'framework/modules/ecommerce/assets/css/print-invoice.css\">\n        <style>\n            html{background:none;}\n            #store-header{text-align:left;}\n        </style>';\n        $invoice .= '</HEAD><BODY>';\n        if (is_array($orders)) {\n            foreach ($orders as $order) {\n                if ($user->isAdmin()) {\n                    $invoice .= renderAction(array('controller'=> 'order', 'action'=> 'show', 'view'=> 'show_printable', 'id'=> $order['id'], 'printerfriendly'=> '1', 'no_output'=> 'true'));\n                    //eDebug($order['id'] . \": \" . $timer->mark());\n                } else {\n                    $invoice .= renderAction(array('controller'=> 'order', 'action'=> 'myOrder', 'view'=> 'show_printable', 'id'=> $order['id'], 'printerfriendly'=> '1', 'no_output'=> 'true'));\n                }\n                $invoice .= '<p style=\"page-break-before: always;\"></p>';\n            }\n            $invoice = substr($invoice, 0, (strlen($invoice) - 42));\n        } else {\n            if ($user->isAdmin()) {\n                $invoice .= renderAction(array('controller'=> 'order', 'action'=> 'show', 'view'=> 'show_printable', 'id'=> $this->params['id'], 'printerfriendly'=> '1', 'no_output'=> 'true'));\n            } else {\n                $invoice .= renderAction(array('controller'=> 'order', 'action'=> 'myOrder', 'view'=> 'show_printable', 'id'=> $this->params['id'], 'printerfriendly'=> '1', 'no_output'=> 'true'));\n            }\n        }\n\n        $invoice .= \"</BODY></HTML>\";\n        $invoice = mb_convert_encoding($invoice, 'HTML-ENTITIES', \"UTF-8\");\n        // eDebug($invoice);\n        $org_name = str_ireplace(\" \", \"_\", ORGANIZATION_NAME);\n\n        //eDebug(\"Here\",1);\n        // Actually create/output the pdf file\n\n        /**\n         * to do this same thing as below using html2pdf\n         * //FIXME uncomment to implement, comment out above\n        require_once(BASE.'external/html2pdf_v4.03/html2pdf.class.php');\n        $html2pdf = new HTMLTPDF('P', 'LETTER', substr(LOCALE,0,2));\n        $html2pdf->writeHTML($invoice);\n        $html2pdf->Output($org_name . \"_Invoice\" . \".pdf\",HTMLTOPDF_OUTPUT?'D':'');\n        exit();\n         */\n        /**\n         * to do this same thing as below using dompdf\n         * //FIXME uncomment to implement, comment out above\n        require_once(BASE.'external/dompdf/dompdf_config.inc.php');\n        $mypdf = new DOMPDF();\n        $mypdf->load_html($invoice);\n        $mypdf->set_paper('letter','portrait');\n        $mypdf->render();\n        $mypdf->stream($org_name . \"_Invoice\" . \".pdf\",array('Attachment'=>HTMLTOPDF_OUTPUT));\n        exit();\n         */\n        /**\n         * to do this same thing as below using expHtmlToPDF\n         */\n        $mypdf = new expHtmlToPDF('Letter','portrait',$invoice);\n        $mypdf->createpdf('D',$org_name . \"_Invoice\" . \".pdf\");\n        exit();\n\n        if (stristr(PHP_OS, 'Win')) {\n            if (file_exists(HTMLTOPDF_PATH)) {\n                do {\n                    $htmltopdftmp = HTMLTOPDF_PATH_TMP . mt_rand() . '.html';\n                } while (file_exists($htmltopdftmp));\n            }\n            file_put_contents($htmltopdftmp, $invoice);\n\n            exec(HTMLTOPDF_PATH . \" \" . $htmltopdftmp . \" \" . HTMLTOPDF_PATH_TMP . $org_name . \"_Invoice.pdf\");\n            $this->returnFile(HTMLTOPDF_PATH_TMP . $org_name . \"_Invoice.pdf\", $org_name . \"_Invoice.pdf\", \"pdf\");\n            exit();\n        } else {\n\n            //require_once(BASE.'external/tcpdf/config/lang/eng.php');\n            //require_once(BASE.'external/tcpdf/tcpdf.php');\n\n            //----\n            // create new PDF document\n            /*$pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);\n\n// set document information\n$pdf->SetCreator(PDF_CREATOR);\n$pdf->SetAuthor('Nicola Asuni');\n$pdf->SetTitle('TCPDF Example 001');\n$pdf->SetSubject('TCPDF Tutorial');\n$pdf->SetKeywords('TCPDF, PDF, example, test, guide');\n\n// set default header data\npdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, PDF_HEADER_TITLE.' 001', PDF_HEADER_STRING);\n\n// set header and footer fonts\n$pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));\n$pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));\n\n// set default monospaced font\n$pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);\n\n//set margins\n$pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);\n$pdf->SetHeaderMargin(PDF_MARGIN_HEADER);\n$pdf->SetFooterMargin(PDF_MARGIN_FOOTER);\n\n// remove default header/footer\n$pdf->setPrintHeader(false);\n$pdf->setPrintFooter(false);\n\n//set auto page breaks\n$pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);\n\n//set image scale factor\n$pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);\n\n//set some language-dependent strings\n$pdf->setLanguageArray($l);\n\n// ---------------------------------------------------------\n\n// set default font subsetting mode\n//$pdf->setFontSubsetting(true);\n\n// Set font\n// dejavusans is a UTF-8 Unicode font, if you only need to\n// print standard ASCII chars, you can use core fonts like\n// helvetica or times to reduce file size.\n//$pdf->SetFont('helvetica', '', 14, '', true);\n\n// Add a page\n// This method has several options, check the source code documentation for more information.\n$pdf->AddPage();\n//eDebug($invoice,1);\n// Print text using writeHTMLCell()\n//$pdf->writeHTML($w=0, $h=0, $x='', $y='', $invoice, $border=0, $ln=1, $fill=0, $reseth=true, $align='', $autopadding=true);\n$pdf->writeHTML($invoice);\n\n// ---------------------------------------------------------\n\n// Close and output PDF document\n// This method has several options, check the source code documentation for more information.\nob_clean();\n$pdf->Output('example_001.pdf', 'I');\nexit();\n//============================================================+\n// END OF FILE\n//============================================================+\n\n\n            // create new PDF document\n            $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);\n\n            // set document information\n            $pdf->SetCreator(PDF_CREATOR);\n            $pdf->SetAuthor(ORGANIZATION_NAME);\n            $pdf->SetTitle($org_name . \"_Invoice\");\n            $pdf->SetSubject($org_name . \"_Invoice\");\n            // remove default header/footer\n            $pdf->setPrintHeader(false);\n            $pdf->setPrintFooter(false);\n\n            // set default monospaced font\n            $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);\n\n            //set margins\n            $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);\n\n            //set auto page breaks\n            $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);\n            $pdf->writeHTMLCell($w=0, $h=0, $x='', $y='', $invoice, $border=0, $ln=1, $fill=0, $reseth=true, $align='', $autopadding=true);\n            $pdf->Output($org_name . \"_Invoice\" . \".pdf\", 'I');\n            exit();*/\n            eDebug(\"Done rendering invoice html. Starting PDF Generation: \" . $timer->mark());\n            $pdfer = new expHtmlToPDF('Letter', 'Portrait', $invoice);\n//            $pdfer->set_html($invoice);\n//            $pdfer->set_orientation('Portrait');\n//            $pdfer->set_page_size('Letter');\n            $pdfer->set_grayscale(true);\n//            $pdfer->render();\n            eDebug(\"Done rendering PDF \" . $timer->mark());\n//            exit();\n            ob_clean();\n            $pdfer->createpdf('D', $org_name . \"_Invoice\" . \".pdf\");\n            exit();\n        }\n    }\n\n    private function returnFile($file, $name, $mime_type = '') {\n        /*\n            This function takes a path to a file to output ($file),\n            the filename that the browser will see ($name) and\n            the MIME type of the file ($mime_type, optional).\n\n            If you want to do something on download abort/finish,\n            register_shutdown_function('function_name');\n        */\n        if (!is_readable($file)) die('File not found or inaccessible!');\n\n        $size = filesize($file);\n        $name = rawurldecode($name);\n\n        /* Figure out the MIME type (if not specified) */\n        $known_mime_types = array(\n            \"pdf\"  => \"application/pdf\",\n            \"txt\"  => \"text/plain\",\n            \"html\" => \"text/html\",\n            \"htm\"  => \"text/html\",\n            \"exe\"  => \"application/octet-stream\",\n            \"zip\"  => \"application/zip\",\n            \"doc\"  => \"application/msword\",\n            \"xls\"  => \"application/vnd.ms-excel\",\n            \"ppt\"  => \"application/vnd.ms-powerpoint\",\n            \"gif\"  => \"image/gif\",\n            \"png\"  => \"image/png\",\n            \"jpeg\" => \"image/jpg\",\n            \"jpg\"  => \"image/jpg\",\n            \"php\"  => \"text/plain\"\n        );\n\n        if ($mime_type == '') {\n//            $file_extension = strtolower(substr(strrchr($file, \".\"), 1));\n//\n//            if (array_key_exists($file_extension, $known_mime_types)) {\n//                $mime_type = $known_mime_types[$file_extension];\n//            } else {\n//                $mime_type = \"application/force-download\";\n//            }\n            $mime_type = expFile::getMimeType($file);\n        }\n\n        //@ob_end_clean(); //turn off output buffering to decrease cpu usage\n        // required for IE, otherwise Content-Disposition may be ignored\n        if (ini_get('zlib.output_compression'))\n            ini_set('zlib.output_compression', 'Off');\n\n        header('Content-Type: ' . $mime_type);\n        header('Content-Disposition: attachment; filename=\"' . $name . '\"');\n        header('Content-Transfer-Encoding: binary');\n        header('Accept-Ranges: bytes');\n\n        /* The three lines below basically make the download non-cacheable */\n        header('Cache-control: private');\n        header('Pragma: private');\n//        header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');\n        header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n\n        // multipart-download and download resuming support\n        if (isset($_SERVER['HTTP_RANGE'])) {\n            list($a, $range) = explode('=', $_SERVER['HTTP_RANGE'], 2);\n            list($range) = explode(',', $range, 2);\n            list($range, $range_end) = explode('-', $range);\n\n            $range = intval($range);\n\n            $range_end  = (!$range_end) ? $size - 1 : intval($range_end);\n            $new_length = $range_end - $range + 1;\n\n            header('HTTP/1.1 206 Partial Content');\n            header('Content-Length: ' . $new_length);\n            header('Content-Range: bytes ' . ($range - $range_end / $size));\n        } else {\n            $new_length = $size;\n\n            header('Content-Length: ' . $size);\n        }\n\n        /* output the file itself */\n        $chunksize  = 1 * (1024 * 1024); //you may want to change this\n        $bytes_send = 0;\n\n        if ($file = fopen($file, 'r')) {\n            if (isset($_SERVER['HTTP_RANGE'])) fseek($file, $range);\n\n            while (!feof($file) && (!connection_aborted()) && ($bytes_send < $new_length)) {\n                $buffer = fread($file, $chunksize);\n\n                print($buffer);\n                flush();\n\n                $bytes_send += strlen($buffer);\n            }\n\n            fclose($file);\n        } else {\n            die('Error - can not open file.');\n        }\n    }\n\n    function set_order_type() {  //FIXME never used\n//        global $db;\n\n        if (empty($this->params['id'])) expHistory::back();\n\n        // get the order and update the type\n        $order                = new order($this->params['id']);\n        $order->order_type_id = $this->params['order_type_id'];\n        $order->save();\n        flash('message', gt('Invoice #') . $order->invoice_id . ' ' . gt('has been set to') . ' ' . $order->getOrderType());\n        expHistory::back();\n    }\n\n    /**\n     * Change order status and email notification if necessary\n     */\n    function setStatus() {\n        global $db, $template;\n\n        if (empty($this->params['id'])) expHistory::back();\n\n        // get the order and create a new order_Status_change\n        $order = new order($this->params['id']);\n\n        //set order type\n        if (isset($this->params['order_type_id'])) $order->order_type_id = $this->params['order_type_id'];\n\n        //only save the status change if it actually changed to something different\n        if ($order->order_status_id != $this->params['order_status_id']) {\n            if (empty($this->params['order_status_messages'])) {\n                $comment = $this->params['comment'];\n            } else {\n                $comment = $this->params['order_status_messages'];\n            }\n            // save the order status change\n            $change = new order_status_changes();\n            $change->from_status_id = $order->order_status_id;\n            $change->comment        = $comment;\n            $change->to_status_id   = $this->params['order_status_id'];\n            $change->orders_id      = $order->id;\n            $change->save();\n\n            // update the status of the order\n            $order->order_status_id = $this->params['order_status_id'];\n\n            // Save the message for future use if that is what the user wanted.\n            if (!empty($this->params['save_message']) && !empty($this->params['comment'])) {\n                $message       = new stdClass();\n                $message->body = $this->params['comment'];\n                $db->insertObject($message, 'order_status_messages');\n            }\n\n            // email the user if we need to\n            if (!empty($this->params['email_user'])) {\n                $email_addy = $order->billingmethod[0]->email;\n                if (!empty($email_addy)) {\n                    $from_status = $db->selectValue('order_status', 'title', 'id=' . $change->from_status_id);\n                    $to_status   = $db->selectValue('order_status', 'title', 'id=' . $change->to_status_id);\n\n                    if ($order->shippingmethod->carrier == 'UPS') {\n                        $carrierTrackingLink = \"http://wwwapps.ups.com/WebTracking/track?track=yes&trackNums=\";\n                    } elseif ($order->shippingmethod->carrier == 'FedEx') {\n                        $carrierTrackingLink = \"http://www.fedex.com/Tracking?action=track&tracknumbers=\";\n                    } elseif ($order->shippingmethod->carrier == 'USPS') {\n                        $carrierTrackingLink = \"https://tools.usps.com/go/TrackConfirmAction_input?qtc_tLabels1=\";\n                    }\n\n                    assign_to_template(array(\n                        'comment'         => $change->comment,\n                        'to_status'       => $to_status,\n                        'from_status'     => $from_status,\n                        'order'           => $order,\n                        'date'            => date(\"F j, Y, g:i a\"),\n                        'storename'       => ecomconfig::getConfig('storename'),\n                        'include_shipping'=> isset($this->params['include_shipping_info']) ? true : false,\n                        'tracking_link'    => $carrierTrackingLink . $order->shipping_tracking_number,\n                        'carrier'          => $order->shippingmethod->carrier\n                    ));\n\n                    $html = $template->render();\n                    $html .= ecomconfig::getConfig('ecomfooter');\n\n                    $mail = new expMail();\n                    $from = array(ecomconfig::getConfig('from_address') => ecomconfig::getConfig('from_name'));\n                    if (empty($from[0])) $from = SMTP_FROMADDRESS;\n                    $mail->quickSend(array(\n                        'html_message'=> $html,\n//                        'text_message'=> str_replace(\"<br>\", \"\\r\\n\", $template->render()),\n                        'text_message'=> expString::html2text($html),\n                        'to'          => array($email_addy => $order->billingmethod[0]->firstname . ' ' . $order->billingmethod[0]->lastname),\n                        'from'        => $from,\n                        'subject'     => 'The status of your order (#' . $order->invoice_id . ') has been updated on ' . ecomconfig::getConfig('storename') . '.'\n                    ));\n                } else {\n                    flash('error', gt('The email address was NOT send. An email address count not be found for this customer'));\n                }\n            }\n            flash('message', gt('Order Type and/or Status Updated.'));\n        } else {\n            flash('message', gt('Order Type and/or Status was not changed.'));\n        }\n\n        $order->save();\n        expHistory::back();\n    }\n\n    function emailCustomer() {\n        //eDebug($this->params,true);\n        global $db, $template, $user;\n\n        if (empty($this->params['id'])) expHistory::back();\n\n        // get the order\n        $order = new order($this->params['id']);\n\n        if (empty($this->params['order_status_messages'])) {\n            $email_message = $this->params['email_message'];\n        } else {\n            $email_message = $this->params['order_status_messages'];\n        }\n\n        // Save the message for future use if that is what the user wanted.\n        if (!empty($this->params['save_message']) && !empty($this->params['email_message'])) {\n            $message       = new stdClass();\n            $message->body = $this->params['email_message'];\n            $db->insertObject($message, 'order_status_messages');\n        }\n\n        $email_addys = explode(',', $this->params['to_addresses']); //$order->billingmethod[0]->email;\n        //eDebug($email_addy,true);\n        if (!empty($email_addys)) {\n            assign_to_template(array(\n                'message'=> $email_message\n            ));\n            $html = $template->render();\n            if (!empty($this->params['include_invoice'])) {\n                $html .= '<hr><br>';\n                $html .= renderAction(array('controller'=> 'order', 'action'=> 'show', 'view'=> 'email_invoice', 'id'=> $this->params['id'], 'printerfriendly'=> '1', 'no_output'=> 'true'));\n            } else {\n                $html .= ecomconfig::getConfig('ecomfooter');\n            }\n\n            //eDebug($html,true);\n            if (isset($this->params['from_address'])) {\n                if ($this->params['from_address'] == 'other') {\n                    $from = $this->params['other_from_address'];\n                } else {\n                    $from = $this->params['from_address'];\n                }\n            } else {\n                $from = ecomconfig::getConfig('from_address');\n            }\n            if (empty($from[0])) $from = SMTP_FROMADDRESS;\n\n            if (isset($this->params['email_subject'])) {\n                $email_subject = $this->params['email_subject'];\n            } else {\n                $email_subject = gt('Message from') . ' ' . ecomconfig::getConfig('storename') . ' ' . gt('about your order') . ' (#' . $order->invoice_id . ')';\n            }\n\n            $mail = new expMail();\n            //FIXME Unless you need each mail sent separately, you can now set 'to'=>$email_addys and let expMail send a single email to all addresses\n            foreach ($email_addys as $email_addy) {\n                $mail->quickSend(array(\n                    'html_message'=> $html,\n//                    'text_message'=> str_replace(\"<br>\", \"\\r\\n\", $template->render()),\n                    'text_message'=> expString::html2text($html),\n                    'to'          => $email_addy,\n                    'from'        => $from,\n                    'subject'     => $email_subject\n                ));\n            }\n            $emailed_to     = implode(',', $email_addys);\n\n            // manually add/attach an expSimpleNote to the order\n            $note           = new expSimpleNote();\n            $note->body     = \"<strong>[\" . gt('action') . \"]: \" . gt('Emailed message to') . \" \" . $emailed_to . \":</strong>\" . $email_message;\n            $note->approved = 1;\n            $note->name     = $user->firstname . \" \" . $user->lastname;\n            $note->email    = $user->email;\n\n            $note->save();\n            $note->refresh();\n//            $noteObj                   = new stdClass();\n//            $noteObj->expsimplenote_id = $note->id;\n//            $noteObj->content_id       = $order->id;\n//            $noteObj->content_type     = 'order';\n//            $db->insertObject($noteObj, 'content_expSimpleNote');\n            $note->attachNote('order', $order->id);\n\n            //eDebug($note,true);\n        } else {\n            flash('error', gt('The email was NOT sent. An email address was not found for this customer'));\n            expHistory::back();\n        }\n\n        flash('message', gt('Email sent.'));\n        expHistory::back();\n    }\n\n    function ordersbyuser() {\n        global $user;\n\n        // if the user isn't logged in flash an error msg\n        if (!$user->isLoggedIn()) expQueue::flashAndFlow('error', gt('You must be logged in to view past orders.'));\n\n        expHistory::set('viewable', $this->params);\n        $page = new expPaginator(array(\n            'model'     => 'order',  //FIXME we should also be getting the order status name\n            'where'     => 'purchased > 0 AND user_id=' . $user->id,\n            'limit'     => 10,\n            'order'     => 'purchased',\n            'dir'       => 'DESC',\n            'page'      => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'=> $this->params['controller'],\n            'action'    => $this->params['action'],\n            'columns'   => array(\n                gt('Date Purchased')=> 'purchased',\n                gt('Invoice #')     => 'invoice_id',\n            )\n        ));\n        assign_to_template(array(\n            'page'=> $page\n        ));\n\n    }\n\n    function metainfo() {\n        global $router;\n\n        if (empty($router->params['action'])) return false;\n\n        // figure out what metadata to pass back based on the action\n        // we are in.\n        $action   = $router->params['action'];\n        $metainfo = array('title'=>'', 'keywords'=>'', 'description'=>'', 'canonical'=> '', 'noindex' => true, 'nofollow' => true);\n        $storename = ecomconfig::getConfig('storename');\n        switch ($action) {\n            case 'myOrder':\n            case 'show':\n            case 'showByTitle':\n                if (!empty($router->params['id'])) {\n                    $order    = new order($router->params['id']);\n                } elseif (!empty($router->params['invoice'])) {\n                    $order = $this->order->find('first', 'invoice_id=' . $router->params['invoice']);\n                } else {\n                    $order    = $this->order;\n                }\n                $metainfo['title']       = gt('Viewing Order') . ' #' . $order->invoice_id . ' - ' . $storename;\n                $metainfo['keywords']    = empty($order->meta_keywords) ? SITE_KEYWORDS : $order->meta_keywords;\n                $metainfo['description'] = empty($order->meta_description) ? SITE_DESCRIPTION : $order->meta_description;\n//                $metainfo['canonical'] = empty($order->canonical) ? $router->plainPath() : $order->canonical;\n//                $metainfo['noindex'] = empty($order->meta_noindex) ? false : $order->meta_noindex;\n//                $metainfo['nofollow'] = empty($order->meta_nofollow) ? false : $order->meta_nofollow;\n                break;\n            case 'showall':\n            case 'ordersbyuser':\n            default:\n                $metainfo['title']       = gt(\"Order Management\") . \" - \" . $storename;\n                $metainfo['keywords']    = SITE_KEYWORDS;\n                $metainfo['description'] = SITE_DESCRIPTION;\n        }\n\n        return $metainfo;\n    }\n\n    function captureAuthorization() {\n        //eDebug($this->params,true);\n        $order = new order($this->params['id']);\n        /*eDebug($this->params);\n        //eDebug($order,true);*/\n        //eDebug($order,true);\n        //$billing = new billing();\n\n        //eDebug($billing, true);\n        //$billing->calculator = new $calcname($order->billingmethod[0]->billingcalculator_id);\n        $calc         = $order->billingmethod[0]->billingcalculator->calculator;\n        $calc->config = $order->billingmethod[0]->billingcalculator->config;\n\n        //$calc = new $calc-\n        //eDebug($calc,true);\n        if (!method_exists($calc, 'delayed_capture')) {\n            flash('error', gt('The Billing Calculator does not support delayed capture'));\n            expHistory::back();\n        }\n\n        $result = $calc->delayed_capture($order->billingmethod[0], $this->params['capture_amt'], $order);\n\n        if (empty($result->errorCode)) {\n            flash('message', gt('The authorized payment was successfully captured'));\n            expHistory::back();\n\n        } else {\n            flash('error', gt('An error was encountered while capturing the authorized payment.') . '<br /><br />' . $result->message);\n            expHistory::back();\n        }\n    }\n\n    function voidAuthorization() {\n        $order   = new order($this->params['id']);\n        $billing = $order->billingmethod[0];\n\n        $calc         = $order->billingmethod[0]->billingcalculator->calculator;\n        $calc->config = $order->billingmethod[0]->billingcalculator->config;\n\n        if (!method_exists($calc, 'void_transaction')) {\n            flash('error', gt('The Billing Calculator does not support void'));\n            expHistory::back();\n        }\n\n        $result = $calc->void_transaction($order->billingmethod[0], $order);\n\n        if (empty($result->errorCode)) {\n            flash('message', gt('The transaction has been successfully voided'));\n            expHistory::back();\n\n        } else {\n            flash('error', gt('An error was encountered while voiding the authorized payment.') . '<br /><br />' . $result->message);\n            expHistory::back();\n        }\n    }\n\n    function creditTransaction() {\n        $order   = new order($this->params['id']);\n        $billing = new billing($this->params['id']);\n        //eDebug($this->params,true);\n        $result = $billing->calculator->credit_transaction($billing->billingmethod, $this->params['capture_amt'],$order);\n\n        if ($result->errorCode == '0') {\n            flash('message', gt('The transaction has been credited'));\n            expHistory::back();\n\n        } else {\n            flash('error', gt('An error was encountered while capturing the authorized payment.') . '<br /><br />' . $result->message);\n            expHistory::back();\n        }\n    }\n\n    function edit_payment_info() {\n        //$order = new order($this->params['id']);\n        $billing = new billing($this->params['id']);\n        $opts    = expUnserialize($billing->billingmethod->billing_options);  //FIXME already unserialized???\n        //eDebug($billing);\n//        eDebug($opts);\n        assign_to_template(array(\n            'orderid'=> $this->params['id'],\n            'opts'   => $opts,  //FIXME credit card doesn't have a result\n            'billing_cost' => $billing->billingmethod->billing_cost,\n            'transaction_state' => $billing->billingmethod->transaction_state\n        ));\n    }\n\n    function save_payment_info() {\n        //need to save billing methods and billing options\n        //$order = new order($this->params['id']);\n        //eDebug($this->params, true);\n        $res_obj = new stdClass();\n        foreach ($this->params['result'] as $resultKey=> $resultItem) {\n            $res_obj->$resultKey = $resultItem;\n        }\n//        $res     = serialize($res_obj);\n        $billing = new billing($this->params['id']);\n        // eDebug($billing);\n        $billingmethod      = $billing->billingmethod;\n        $billingtransaction = $billingmethod->billingtransaction[0];\n\n        // update billing method\n        $billingmethod->billing_cost           = $this->params['billing_cost'];\n        $billingmethod->transaction_state      = $this->params['transaction_state'];\n        $bmopts                         = expUnserialize($billingmethod->billing_options);\n        $bmopts->result                 = $res_obj;\n        $billingmethod->billing_options = serialize($bmopts);\n//        if (!empty($this->params['result']['payment_status']))\n//            $billingmethod->transaction_state = $this->params['result']['payment_status'];  //FIXME should this be discrete??\n        $billingmethod->save();\n\n        // add new billing transaction\n        $billingtransaction->billing_cost                = $this->params['billing_cost'];\n        $billingtransaction->transaction_state           = $this->params['transaction_state'];\n        $btopts                              = expUnserialize($billingtransaction->billing_options);\n        $btopts->result                      = $res_obj;\n        $billingtransaction->billing_options = serialize($btopts);\n//        if (!empty($this->params['result']['payment_status']))\n//            $billingtransaction->transaction_state = $this->params['result']['payment_status'];\n        $billingtransaction->id = null;  // force a new record by erasing the id, easy method to copy record\n//        $order = new order($this->params['id']);\n//        $billingtransaction->billing_cost = $order->grand_total;  //FIXME should it always be the grand total???\n        $billingtransaction->save();\n\n//        flashAndFlow('message', gt('Payment info updated.'));\n        flash('message', gt('Payment info updated.'));\n        redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $this->params['id']));\n    }\n\n    function edit_shipping_method() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request.  Order invalid.'));\n        $order = new order($this->params['id']);\n        $s     = array_pop($order->shippingmethods);  //FIXME only getting 1st one and then removing it\n        $sm    = new shippingmethod($s->id);\n        //eDebug($sm);\n        assign_to_template(array(\n            'orderid' => $this->params['id'],\n            'shipping'=> $sm\n        ));\n    }\n\n    function save_shipping_method() {\n        if (!isset($this->params['id']) || !isset($this->params['sid']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $sm               = new shippingmethod($this->params['sid']);\n        $sm->option_title = $this->params['shipping_method_title'];\n        $sm->carrier      = $this->params['shipping_method_carrier'];\n        $sm->save();\n        flashAndFlow('message', gt('Shipping method updated.'));\n    }\n\n    function edit_parcel() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $sm = new shippingmethod($this->params['id']);\n        $sm->attachCalculator();  // add calculator object\n        assign_to_template(array(\n            'shipping'=> $sm\n        ));\n    }\n\n    function save_parcel() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        if (!isset($this->params['in_box']) || !isset($this->params['qty'])) {\n            flashAndFlow('notice', gt('Nothing was included in the shipping package!'));\n        } else {\n            $sm = new shippingmethod($this->params['id']);\n            $sm->attachCalculator();\n//            $sm_new = clone($sm);  // prepare for another 'package' if needed since we didn't place everything in this one\n//            $sm_new->id = null;\n//            $sm_new->orderitem = array();\n            //FIXME for now multiple shipping methods will crash ecom with shipping->__construct()\n            foreach ($sm->orderitem as $key => $oi) {\n                if (!array_key_exists($oi->id, $this->params['in_box'])) {\n                    // one of the items by type is not in this package and needs to be moved to another package\n//                    $tmp = 1;\n//                    $sm_new->update();  // we don't need to actually create a new shippingmethod until needed\n//                    $sm->orderitem[$key]->shippingmethods_id = $sm_new->id;\n//                    $sm->orderitem[$key]->update();\n//                    unset($sm->orderitem[$key]);\n                    //NOTE $sm_new->update(); ???\n                } else {\n                    if ($oi->quantity != $this->params['qty'][$oi->id]) {\n                        // one of the items by quantity is not in this package and remaining items need to be moved another package\n//                        $tmp = 1;\n//                        $new_quantity = $oi->quantity - $this->params['qty'][$oi->id];\n//                        $sm->orderitem[$key]->quantity = $this->params['qty'][$oi->id];  // adjust to new quantity\n//                        $sm->orderitem[$key]->update();\n//                        $sm_new->update();  // we don't need to actually create a new shippingmethod until needed\n//                        $oi->id = null;  // create a new orderitem copy\n//                        $oi->shippingmethods_id = $sm_new->id;\n//                        $oi->quantity = $new_quantity;\n//                        $oi->update();\n                        //NOTE $sm_new->update(); ???\n                    }\n                }\n            }\n            // update $sm with the passed $this->params (package data)\n            $sm->update($this->params);  //NOTE will this update assoc orderitems???\n            $msg = $sm->calculator->createLabel($sm);\n            if (!is_string($msg)) {\n                flashAndFlow('message', gt('Shipping package updated.'));\n            } else {\n                expHistory::back();\n            }\n        }\n    }\n\n    function edit_label() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $sm = new shippingmethod($this->params['id']);\n        $sm->attachCalculator();\n        $method = explode(':', $sm->option);\n//FIXME check for existing rate, if not get next cheapest? (based on predefined package?)\n        assign_to_template(array(\n            'shipping'=> $sm,\n            'cost' => $sm->shipping_options['shipment_rates'][$method[0]][$method[1]]['cost']\n        ));\n    }\n\n    function save_label() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $sm = new shippingmethod($this->params['id']);\n        $sm->attachCalculator();\n        $msg = $sm->calculator->buyLabel($sm);\n//        $sm->refresh();  //FIXME updated with new options we may need to take action on like tracking number?\n//        $order->shipping_tracking_number = $sm->shipping_options['shipment_tracking_number'];\n        if (!is_string($msg)) {\n            flashAndFlow('message', gt('Shipping label purchased.'));\n        } else {\n            expHistory::back();\n        }\n    }\n\n    function download_label() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $sm = new shippingmethod($this->params['id']);\n        $sm->attachCalculator();\n        $label = $sm->calculator->getLabel($sm);\n        expHistory::back();\n    }\n\n    function delete_label() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $sm = new shippingmethod($this->params['id']);\n        $sm->attachCalculator();\n        $msg = $sm->calculator->cancelLabel($sm);\n        // also need to cancel the pickup if created/purchased\n        if (!is_string($msg) && ($sm->shipping_options['pickup_status'] == 'created' || $sm->shipping_options['pickup_status'] == 'purchased')) {\n            $msg = $sm->calculator->cancelPickup($sm);\n            if (!is_string($msg)) {\n                flashAndFlow('message', gt('Shipping label and pickup cancelled and refunded.'));\n            }\n        } else {\n            if (!is_string($msg)) {\n                flashAndFlow('message', gt('Shipping label cancelled and refunded.'));\n            }\n        }\n        expHistory::back();\n    }\n\n    function edit_pickup()\n    {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $sm = new shippingmethod($this->params['id']);\n        $sm->attachCalculator();\n        assign_to_template(array(\n            'shipping'=> $sm,\n        ));\n    }\n\n    function edit_pickup2() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $this->params['pickupdate'] = strtotime($this->params['pickupdate']);\n        $this->params['pickupenddate'] = strtotime($this->params['pickupenddate']);\n        $sm = new shippingmethod($this->params['id']);\n        $sm->attachCalculator();\n        $pickup = $sm->calculator->createPickup($sm, $this->params['pickupdate'], $this->params['pickupenddate'], $this->params['instructions']);\n        $sm->refresh();\n        $pickup_rates = array();\n        foreach ($sm->shipping_options['pickup_rates'] as $pu_rate) {\n            $pickup_rates[$pu_rate['id']] = $pu_rate['id'] . ' - ' . expCore::getCurrency($pu_rate['cost']);\n        }\n        assign_to_template(array(\n            'shipping'=> $sm,\n            'rates' => $pickup_rates\n        ));\n    }\n\n    function save_pickup() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $sm = new shippingmethod($this->params['id']);\n        $sm->attachCalculator();\n        //FIXME should we add the params to the $sm->shipping_options, or pass them??\n        $msg = $sm->calculator->buyPickup($sm, $this->params['pickuprate']);\n        if (!is_string($msg)) {\n            flashAndFlow('message', gt('Package pickup ordered.'));\n        } else {\n            expHistory::back();\n        }\n    }\n\n    function delete_pickup() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $sm = new shippingmethod($this->params['id']);\n        $sm->attachCalculator();\n        $msg = $sm->calculator->cancelPickup($sm);\n        if (!is_string($msg)) {\n            flashAndFlow('message', gt('Package pickup cancelled.'));\n        } else {\n            expHistory::back();\n        }\n    }\n\n    function createReferenceOrder() {\n        if (!isset($this->params['id'])) {\n            flashAndFlow('error', gt('Unable to process request. Invalid order number.'));\n//            expHistory::back();\n        }\n        $order = new order($this->params['id']);\n        assign_to_template(array(\n            'order'=> $order\n        ));\n    }\n\n    function save_reference_order() {\n//        global $user;\n\n        //eDebug($this->params,true);\n        $order = new order($this->params['original_orderid']);\n        //eDebug($order,true);\n        //x\n        $newOrder                  = new order();\n        $newOrder->order_status_id = $this->params['order_status_id'];\n        $newOrder->order_type_id   = $this->params['order_type_id'];\n        //$newOrder->order_references = $order->id;\n        $newOrder->reference_id    = $order->id;\n        $newOrder->user_id         = $order->user_id;\n        $newOrder->purchased       = time();\n        $newOrder->updated         = time();\n        $newOrder->invoice_id      = $newOrder->getInvoiceNumber();\n        $newOrder->orderitem       = array();\n        $newOrder->subtotal        = $this->params['subtotal'];\n        $newOrder->total_discounts = $this->params['total_discounts'];\n        $newOrder->tax             = $this->params['tax'];\n        $newOrder->shipping_total  = $this->params['shipping_total'];\n        $newOrder->surcharge_total = $this->params['surcharge_total'];\n\n        if ($this->params['autocalc'] == true) {\n            $newOrder->grand_total = ($newOrder->subtotal - $newOrder->total_discounts) + $newOrder->tax + $newOrder->shipping_total + $newOrder->surcharge_total;\n        } else {\n            $newOrder->grand_total = round($this->params['grand_total'], 2);\n        }\n        $newOrder->save();\n        $newOrder->refresh();\n\n        // save initial order status\n        $change = new order_status_changes();\n//        $change->from_status_id = null;\n        $change->to_status_id   = $newOrder->order_status_id;\n        $change->orders_id      = $newOrder->id;\n        $change->save();\n\n        $tObj                             = new stdClass();\n        $tObj->result                     = new stdClass();\n        $tObj->result->errorCode          = 0;\n        $tObj->result->message            = \"Reference Order Pending\";\n        $tObj->result->PNREF              = \"Pending\";\n        $tObj->result->authorization_code = \"Pending\";\n        $tObj->result->AVSADDR            = \"Pending\";\n        $tObj->result->AVSZIP             = \"Pending\";\n        $tObj->result->CVV2MATCH          = \"Pending\";\n        $tObj->result->traction_type      = \"Pending\";\n        $tObj->result->payment_status     = \"Pending\";\n\n        $newBillingMethod                       = $order->billingmethod[0];\n        $newBillingMethod->id                   = null;\n        $newBillingMethod->orders_id            = $newOrder->id;\n//        $newBillingMethod->billingcalculator_id = 6;\n        $newBillingMethod->billingcalculator_id = billingcalculator::getDefault();\n        $newBillingMethod->billing_cost         = 0;\n        $newBillingMethod->transaction_state    = 'authorization pending';\n        $newBillingMethod->billing_options      = serialize($tObj);\n        $newBillingMethod->save();\n\n        //eDebug(expUnserialize($order->billingmethod[0]->billing_options));\n        //eDebug(expUnserialize($order->billingmethod[0]->billingtransaction[0]->billing_options),true);\n\n        $newBillingTransaction                       = new billingtransaction();\n//        $newBillingTransaction->billingcalculator_id = 6; ///setting to manual/passthru\n        $newBillingTransaction->billingcalculator_id = billingcalculator::getDefault();\n        $newBillingTransaction->billing_cost         = 0;\n        $newBillingTransaction->billingmethods_id    = $newBillingMethod->id;\n        $newBillingTransaction->transaction_state    = 'authorization pending';\n\n        $newBillingTransaction->billing_options = serialize($tObj);\n        $newBillingTransaction->save();\n\n        $sid                              = $order->orderitem[0]->shippingmethods_id;\n        $newShippingMethod                = $order->shippingmethods[$sid];\n        $newShippingMethod->id            = null;\n        $newShippingMethod->shipping_cost = 0;\n        $newShippingMethod->save();\n        $newShippingMethod->refresh();\n\n        foreach ($this->params['oi'] as $oikey=> $oi) {\n            //eDebug($oikey);\n            $newOi                          = new orderitem($oikey);\n            $newOi->id                      = null;\n            $newOi->quantity                = $this->params['quantity'][$oikey];\n            $newOi->orders_id               = $newOrder->id;\n            $newOi->products_name           = $this->params['products_name'][$oikey];\n            $newOi->products_price          = $this->params['products_price'][$oikey];\n            $newOi->products_price_adjusted = $this->params['products_price'][$oikey];\n            //$newOi->products_tax = 0;\n            $newOi->shippingmethods_id = $newShippingMethod->id;\n            $newOi->save();\n        }\n\n        $newOrder->shippingmethod = $newShippingMethod;\n        $newOrder->billingmethod = $newBillingMethod;\n        $newOrder->update();  //FIXME do we need to do this?\n\n        flash('message', gt('Reference Order #') . $newOrder->invoice_id . \" \" . gt(\"created successfully.\"));\n        redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $newOrder->id));\n    }\n\n    function create_new_order() {\n//        $order = new order();\n//        assign_to_template(array(\n//            'order'=> $order\n//        ));\n    }\n\n    function save_new_order() {\n        //eDebug($this->params);\n        /*addresses_id\n        customer_type = 1 //new\n        customer_type = 2 //existing Internal\n        customer_type = 3 //existing external*/\n//        global $user, $db;\n        //eDebug($this->params,true);\n        //$order = new order($this->params['original_orderid']);\n        //eDebug($order,true);\n\n        $newAddy = new address();\n        if ($this->params['customer_type'] == 1) {\n            //blank order\n            $newAddy->save(false);\n        } else if ($this->params['customer_type'] == 2) {\n            //internal customer\n            $newAddy = new address($this->params['addresses_id']);\n        } else if ($this->params['customer_type'] == 3) {\n            //other customer\n            $otherAddy = new external_address($this->params['addresses_id']);\n            $newAddy->user_id      = $otherAddy->user_id;\n            $newAddy->firstname    = $otherAddy->firstname;\n            $newAddy->lastname     = $otherAddy->lastname;\n            $newAddy->organization = $otherAddy->organization;\n            $newAddy->address1     = $otherAddy->address1;\n            $newAddy->address2     = $otherAddy->address2;\n            $newAddy->city         = $otherAddy->city;\n            $newAddy->state        = $otherAddy->state;\n            $newAddy->zip          = $otherAddy->zip;\n            $newAddy->phone        = $otherAddy->phone;\n            $newAddy->email        = $otherAddy->email;\n            $newAddy->save();\n        }\n\n        $newOrder                  = new order();\n        $newOrder->order_status_id = $this->params['order_status_id'];\n        $newOrder->order_type_id   = $this->params['order_type_id'];\n        //$newOrder->order_references = $order->id;\n        $newOrder->reference_id    = 0;\n        $newOrder->user_id         = $newAddy->user_id;\n        $newOrder->purchased       = time();\n        $newOrder->updated         = time();\n        $newOrder->invoice_id      = $newOrder->getInvoiceNumber();\n        $newOrder->orderitem       = array();\n        $newOrder->subtotal        = 0;\n        $newOrder->total_discounts = 0;\n        $newOrder->tax             = 0;\n        $newOrder->shipping_total  = 0;\n        $newOrder->surcharge_total = 0;\n        $newOrder->grand_total     = 0;\n        $newOrder->save();\n        $newOrder->refresh();\n\n        // save initial order status\n        $change = new order_status_changes();\n//        $change->from_status_id = null;\n        $change->to_status_id   = $newOrder->order_status_id;\n        $change->orders_id      = $newOrder->id;\n        $change->save();\n\n        $tObj                             = new stdClass();\n        $tObj->result                     = new stdClass();\n        $tObj->result->errorCode          = 0;\n        $tObj->result->message            = \"Reference Order Pending\";\n        $tObj->result->PNREF              = \"Pending\";\n        $tObj->result->authorization_code = \"Pending\";\n        $tObj->result->AVSADDR            = \"Pending\";\n        $tObj->result->AVSZIP             = \"Pending\";\n        $tObj->result->CVV2MATCH          = \"Pending\";\n        $tObj->result->traction_type      = \"Pending\";\n        $tObj->result->payment_status     = \"Pending\";\n\n        $newBillingMethod                       = new billingmethod();\n        $newBillingMethod->addresses_id         = $newAddy->id;\n        $newBillingMethod->orders_id            = $newOrder->id;\n//        $newBillingMethod->billingcalculator_id = 6;\n        $newBillingMethod->billingcalculator_id = billingcalculator::getDefault();\n        $newBillingMethod->billing_cost         = 0;\n        $newBillingMethod->transaction_state    = 'authorization pending';\n        $newBillingMethod->billing_options      = serialize($tObj);\n        $newBillingMethod->firstname            = $newAddy->firstname;\n        $newBillingMethod->lastname             = $newAddy->lastname;\n        $newBillingMethod->organization         = $newAddy->organization;\n        $newBillingMethod->address1             = $newAddy->address1;\n        $newBillingMethod->address2             = $newAddy->address2;\n        $newBillingMethod->city                 = $newAddy->city;\n        $newBillingMethod->state                = $newAddy->state;\n        $newBillingMethod->zip                  = $newAddy->zip;\n        $newBillingMethod->phone                = $newAddy->phone;\n        $newBillingMethod->email                = $newAddy->email;\n        $newBillingMethod->save();\n\n        //eDebug(expUnserialize($order->billingmethod[0]->billing_options));\n        //eDebug(expUnserialize($order->billingmethod[0]->billingtransaction[0]->billing_options),true);\n\n        $newBillingTransaction                       = new billingtransaction();\n//        $newBillingTransaction->billingcalculator_id = 6; ///setting to manual/passthru\n        $newBillingTransaction->billingcalculator_id = billingcalculator::getDefault();\n        $newBillingTransaction->billing_cost         = 0;\n        $newBillingTransaction->billingmethods_id    = $newBillingMethod->id;\n        $newBillingTransaction->transaction_state    = 'authorization pending';\n        $newBillingTransaction->billing_options      = serialize($tObj);\n        $newBillingTransaction->save();\n\n        $newShippingMethod                        = new shippingmethod();\n        $newShippingMethod->shipping_cost         = 0;\n//        $newShippingMethod->shippingcalculator_id = $db->selectValue('shippingcalculator', 'id', 'is_default=1');\n        $newShippingMethod->shippingcalculator_id = shippingcalculator::getDefault();\n        $newShippingMethod->addresses_id = $newAddy->id;\n        $newShippingMethod->firstname    = $newAddy->firstname;\n        $newShippingMethod->lastname     = $newAddy->lastname;\n        $newShippingMethod->organization = $newAddy->organization;\n        $newShippingMethod->address1     = $newAddy->address1;\n        $newShippingMethod->address2     = $newAddy->address2;\n        $newShippingMethod->city         = $newAddy->city;\n        $newShippingMethod->state        = $newAddy->state;\n        $newShippingMethod->zip          = $newAddy->zip;\n        $newShippingMethod->phone        = $newAddy->phone;\n        $newShippingMethod->email        = $newAddy->email;\n        $newShippingMethod->save();\n        $newShippingMethod->refresh();\n\n        //FIXME add a fake item?\n//        $oi                     = new orderitem();\n//        $oi->orders_id          = $newOrder->id;\n//        $oi->product_id         = 0;\n//        $oi->product_type       = 'product';\n//        $oi->products_name      = \"N/A\";\n//        $oi->products_model     = \"N/A\";\n//        $oi->products_price     = 0;\n//        $oi->shippingmethods_id = $newShippingMethod->id;\n//        $oi->save(false);\n\n        $newOrder->shippingmethod = $newShippingMethod;\n        $newOrder->billingmethod = $newBillingMethod;\n        $newOrder->update();\n\n        flash('message', gt('New Order #') . $newOrder->invoice_id . \" \" . gt(\"created successfully.\"));\n        if (empty($this->params['no_redirect'])) {\n            redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $newOrder->id));\n        } else {\n            return $newOrder->id;\n        }\n    }\n\n    function edit_address() {\n        //if $type = 'b' - business\n        //if $type = 's' - shipping\n        //addresses_id\n        $order = new order($this->params['id']);\n        $same  = false;\n\n        $sm = array_pop($order->shippingmethods);  //FIXME only getting 1st one and then removing it\n        //$bm = array_pop($order->billingmethods);\n\n        //eDebug($sm->addresses_id);\n        //eDebug($order->billingmethod[0]->addresses_id);\n        if ($sm->addresses_id == $order->billingmethod[0]->addresses_id) {\n            $same = true;\n            // echo \"Yes\";\n            //$addy = new address($sm->addresses_id);\n        }\n\n        if ($this->params['type'] == 'b') {\n            $type = 'billing';\n            $addy = new address($order->billingmethod[0]->addresses_id);\n        } else if ($this->params['type'] == 's') {\n            $type = 'shipping';\n            $addy = new address($sm->addresses_id);\n        }\n        /* eDebug($this->params);\n        eDebug($addy);\n        eDebug($order,true);*/\n        $billingmethod = new billingmethod($this->params['id']);\n        //eDebug($billingmethod,true);\n        //$opts = expUnserialize($billing->billingmethod->billing_options);\n        //eDebug($billing);\n        //eDebug($opts);\n        assign_to_template(array(\n            'orderid'=> $this->params['id'],\n            'record' => $addy,\n            'same'   => $same,\n            'type'   => $type\n        ));\n    }\n\n    function save_address() {\n        global $db;\n\n        $order          = new order($this->params['orderid']);\n        $billing        = new billing($this->params['orderid']);\n        $s              = array_pop($order->shippingmethods);  //FIXME only getting 1st one and then removing it\n        $shippingmethod = new shippingmethod($s->id);\n\n        //eDebug($order);\n        //eDebug($this->params,true);\n        //eDebug($shippingmethod);\n        $billingmethod = $billing->billingmethod;\n        /*\n        eDebug($order);\n        eDebug($shippingmethod);\n        eDebug($billingmethod);*/\n\n        if ($this->params['save_option'] == 0) {\n            //update existing\n            //echo \"Update\";\n            $addy = new address($this->params['addyid']);\n        } else if ($this->params['save_option'] == 1) {\n            //create new\n            //echo \"New\";\n            $oldaddy       = new address($this->params['addyid']);\n            $addy          = new address();\n            $addy->user_id = $oldaddy->user_id;\n        }\n\n        //eDebug($addy,true);\n\n        foreach ($this->params['address'] as $key=> $val) {\n            if ($key == 'address_country_id') {\n                $key = 'country';\n            }\n            if ($key == 'address_region_id') {\n                $key = 'state';\n            }\n            $addy->$key = $val;\n            if (isset($billingmethod->$key)) $billingmethod->$key = $val;\n            if (isset($shippingmethod->$key)) $shippingmethod->$key = $val;\n        }\n        $addy->is_billing  = 0;\n        $addy->is_shipping = 0;\n        $addy->save();\n        $addy->refresh();\n\n        if ($this->params['type'] == 'billing' || ($this->params['same'] == true && $this->params['save_option'] == 0)) {\n            //echo \"Billing\";\n            $billingmethod->addresses_id = $addy->id;\n            $billingmethod->save();\n            $addy->is_billing = 1;\n        }\n\n        if ($this->params['type'] == 'shipping' || ($this->params['same'] == true && $this->params['save_option'] == 0)) {\n            //eDebug(\"Shipping\",true);\n            $shippingmethod->addresses_id = $addy->id;\n            $shippingmethod->save();\n            $addy->is_shipping = 1;\n        }\n\n        $addy->save();\n        if ($addy->is_default) $db->setUniqueFlag($addy, 'addresses', 'is_default', 'user_id=' . $addy->user_id);\n\n        //eDebug($shippingmethod,true);\n//        flashAndFlow('message', gt('Address updated.'));\n        flash('message', gt('Address updated.'));\n        redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $this->params['id']));\n    }\n\n    function edit_order_item() {\n        $oi = new orderitem($this->params['id'], true, true);\n        if (empty($oi->id)) {\n            flash('error', gt('Order item doesn\\'t exist.'));\n            expHistory::back();\n        }\n        $oi->user_input_fields = expUnserialize($oi->user_input_fields);\n        $params['options'] = $oi->opts;\n        $params['user_input_fields'] = $oi->user_input_fields;\n        $oi->product           = new product($oi->product->id, true, true);\n        if ($oi->product->parent_id != 0) {\n            $parProd = new product($oi->product->parent_id);\n            //$oi->product->optiongroup = $parProd->optiongroup;\n            $oi->product = $parProd;\n        }\n        //FIXME we don't use selectedOpts?\n//        $oi->selectedOpts = array();\n//        if (!empty($oi->opts)) {\n//            foreach ($oi->opts as $opt) {\n//                $option = new option($opt[0]);\n//                $og     = new optiongroup($option->optiongroup_id);\n//                if (!isset($oi->selectedOpts[$og->id]) || !is_array($oi->selectedOpts[$og->id]))\n//                    $oi->selectedOpts[$og->id] = array($option->id);\n//                else\n//                    array_push($oi->selectedOpts[$og->id], $option->id);\n//            }\n//        }\n        //eDebug($oi->selectedOpts);\n\n        assign_to_template(array(\n            'oi' => $oi,\n            'params' => $params\n        ));\n    }\n\n    function delete_order_item() {\n        $order = new order($this->params['orderid']);\n        if (count($order->orderitem) <= 1) {\n            flash('error', gt('You may not delete the only item on an order.  Please edit this item, or add another item before removing this one.'));\n            expHistory::back();\n        }\n\n        $oi = new orderitem($this->params['id']);\n        $oi->delete();\n\n        $s  = array_pop($order->shippingmethods);  //FIXME only getting 1st one and then removing it\n        $sm = new shippingmethod($s->id);\n\n        $shippingCalc = new shippingcalculator($sm->shippingcalculator_id);\n        $calcName     = $shippingCalc->calculator_name;\n        $calculator   = new $calcName($shippingCalc->id);\n        $pricelist = $calculator->getRates($order);\n\n        foreach ($pricelist as $rate) {\n            if ($rate['id'] == $sm->option) {\n                $sm->shipping_cost = $rate['cost'];\n            }\n        }\n        $sm->save();\n\n        $order->refresh();\n        $order->calculateGrandTotal();\n        $order->save();\n\n//        flashAndFlow('message', gt('Order item removed and order totals updated.'));\n        flash('message', gt('Order item removed and order totals updated.'));\n        if (empty($this->params['no_redirect'])) redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $this->params['orderid']));\n    }\n\n    function save_order_item() {\n        if (!empty($this->params['id'])) {\n            $oi = new orderitem($this->params['id']);\n        } else {\n            $oi = new orderitem($this->params);\n        }\n        //eDebug($this->params);\n\n        /*eDebug($oi);\n        eDebug(expUnserialize($oi->options));\n        eDebug(expUnserialize($oi->user_input_fields),true);*/\n        if (!empty($this->params['products_price'])) $oi->products_price = expUtil::currency_to_float($this->params['products_price']);\n        $oi->quantity       = $this->params['quantity'];\n        if (!empty($this->params['products_name'])) $oi->products_name  = $this->params['products_name'];\n\n        if ($oi->product->parent_id != 0) {\n            $oi->product = new product($oi->product->parent_id, true, false);\n        } else {\n            //reattach the product so we get the option fields and such\n            $oi->product = new product($oi->product->id, true, false);\n        }\n\n        if (isset($this->params['product_status_id'])) {\n            $ps = new product_status($this->params['product_status_id']);\n            $oi->products_status = $ps->title;\n        }\n\n        $options = array();\n        foreach ($oi->product->optiongroup as $og) {\n            $isOptionEmpty = true;\n            if (!empty($this->params['options'][$og->id])) {\n                foreach ($this->params['options'][$og->id] as $opt) {\n                    if (!empty($opt)) $isOptionEmpty = false;\n                }\n            }\n            if (!$isOptionEmpty) {\n                foreach ($this->params['options'][$og->id] as $opt_id) {\n                    $selected_option = new option($opt_id);\n                    $cost            = $selected_option->modtype == '$' ? $selected_option->amount : $this->getBasePrice() * ($selected_option->amount * .01);\n                    $cost            = $selected_option->updown == '+' ? $cost : $cost * -1;\n                    $options[]       = array($selected_option->id, $selected_option->title, $selected_option->modtype, $selected_option->updown, $selected_option->amount);\n                }\n            }\n        }\n\n        eDebug($this->params);\n        //eDebug($oi,true);\n\n        $user_input_info = array();\n        //check user input fields\n        //$this->user_input_fields = expUnserialize($this->user_input_fields);\n        //eDebug($this,true);\n        if (!empty($oi->product->user_input_fields)) foreach ($oi->product->user_input_fields as $uifkey=> $uif) {\n            /*if ($uif['is_required'] || (!$uif['is_required'] && strlen($params['user_input_fields'][$uifkey]) > 0))\n            {\n                if (strlen($params['user_input_fields'][$uifkey]) < $uif['min_length'])\n                {\n                    //flash('error', 'test');\n                    //redirect_to(array('controller'=>cart, 'action'=>'displayForm', 'form'=>'addToCart', 'product_id'=>$this->id, 'product_type'=>$this->product_type));\n                    $params['error'] .= $uif['name'].' field has a minimum requirement of ' . $uif['min_length'] . ' characters.<br/>';\n\n                }else if (strlen($params['user_input_fields'][$uifkey]) > $uif['max_length'] && $uif['max_length'] > 0)\n                {\n                    //flash('error', );\n                    //redirect_to(array('controller'=>cart, 'action'=>'displayForm', 'form'=>'addToCart', 'product_id'=>$this->id, 'product_type'=>$this->product_type));\n                    $params['error'] .= $uif['name'].' field has a maximum requirement of ' . $uif['max_length'] . ' characters.<br/>';\n                }\n            }*/\n            $user_input_info[] = array($uif['name']=> $this->params['user_input_fields'][$uifkey]);\n        }\n        //eDebug($options);\n        //eDebug($user_input_info,true);\n\n        $oi->options           = serialize($options);\n        $oi->user_input_fields = serialize($user_input_info);\n        //eDebug($oi);\n        $oi->save();\n        $oi->refresh();\n        //eDebug($oi,true);\n\n        $order = new order($oi->orders_id);\n        $order->calculateGrandTotal();\n\n        $s = array_pop($order->shippingmethods);  //FIXME only getting 1st one and thenremoving it\n        eDebug($s);\n        $sm = new shippingmethod($s->id);\n\n        $shippingCalc = new shippingcalculator($sm->shippingcalculator_id);\n        $calcName     = $shippingCalc->calculator_name;\n        $calculator   = new $calcName($shippingCalc->id);\n        $pricelist = $calculator->getRates($order);\n\n        foreach ($pricelist as $rate) {\n            if ($rate['id'] == $sm->option) {\n                $sm->shipping_cost = $rate['cost'];\n                break;\n            }\n        }\n        $sm->save();\n        $order->refresh();\n        $order->calculateGrandTotal();\n        //FIXME attempt to update w/ new billing transaction\n//        $bmopts = expUnserialize($order->billingmethod[0]->billing_options);\n//        $bmopts->result->transId = gt('Item edited in order');\n//        $order->billingmethod[0]->update(array('billing_options' => serialize($bmopts), 'transaction_state' => $transaction_state));\n//        $order->billingmethod[0]->billingcalculator->calculator->createBillingTransaction($order->billingmethod[0], number_format($order->grand_total, 2, '.', ''), $bmopts->result, $bmopts->result->payment_status);\n        $order->save();\n\n//        flashAndFlow('message', gt('Order item updated and order totals recalculated.'));\n        flash('message', gt('Order item updated and order totals recalculated.'));\n        if (empty($this->params['no_redirect'])) {\n            redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $this->params['orderid']));\n        } else {\n            return $oi->id;\n        }\n    }\n\n    function add_order_item() {\n//        eDebug($this->params);\n        $product     = new product($this->params['product_id']);\n        $paramsArray = array('orderid'=> $this->params['orderid']);\n        assign_to_template(array(\n            'product'=> $product,\n            'params' => $paramsArray\n        ));\n    }\n\n    function save_new_order_item() {  //FIXME we need to be able to call this from program with $params also, addToOrder\n        //eDebug($this->params,true);\n        //check for multiple product adding\n        $order = new order($this->params['orderid']);\n        if (isset($this->params['prod-quantity'])) {\n            //we are adding multiple children, so we approach a bit different\n            //we'll send over the product_id of the parent, along with id's and quantities of children we're adding\n            foreach ($this->params['prod-quantity'] as $qkey=> &$quantity) {\n                if (in_array($qkey, $this->params['prod-check'])) {\n                    $this->params['children'][$qkey] = $quantity;\n                }\n                if (isset($child)) $this->params['product_id'] = $child->parent_id;\n            }\n        }\n\n        $pt      = $this->params['product_type'];\n        $product = new $pt($this->params['product_id'], true, true); //need true here?\n\n        if ($product->addToCart($this->params, $this->params['orderid'])) {\n            $order->refresh();\n            $order->calculateGrandTotal();\n            //FIXME attempt to update w/ new billing transaction\n//            $bmopts = expUnserialize($order->billingmethod[0]->billing_options);\n//            $bmopts->result->transId = gt('Item added to order');\n//            $order->billingmethod[0]->billingcalculator->calculator->createBillingTransaction($order->billingmethod[0], number_format($order->grand_total, 2, '.', ''), $bmopts->result, $bmopts->result->payment_status);\n            $order->save();\n//            flashAndFlow('message', gt('Product added to order and order totals recalculated.'));\n            flash('message', gt('Product added to order and order totals recalculated.'));\n            redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $this->params['orderid']));\n        }\n        /*else\n        {\n            expHistory::back();\n        }*/\n    }\n\n    function edit_invoice_id() {\n        if (!isset($this->params['id'])) flashAndFlow('error', gt('Unable to process request.  Order invalid.'));\n        $order = new order($this->params['id']);\n        assign_to_template(array(\n            'orderid'   => $this->params['id'],\n            'invoice_id'=> $order->invoice_id\n        ));\n    }\n\n    function save_invoice_id() {\n        if (!isset($this->params['id'])) flashAndFlow('error', gt('Unable to process request.  Order invalid.'));\n        if (empty($this->params['invoice_id']) || !is_numeric($this->params['invoice_id'])) flashAndFlow('error', gt('Unable to process request.  Invoice ID #.'));\n        $order             = new order($this->params['id']);\n        $order->invoice_id = $this->params['invoice_id'];\n        $order->save(false);\n        flashAndFlow('message', gt('Invoice # saved.'));\n    }\n\n    function edit_totals() {\n        //eDebug($this->params);\n        $order = new order($this->params['orderid']);\n        assign_to_template(array(\n//            'orderid'=>$this->params['id'],\n            'order'=> $order\n        ));\n    }\n\n    function save_totals() {\n        //eDebug($this->params);\n        //if(!is_numeric($this->params['subtotal']))\n        $order                  = new order($this->params['orderid']);\n        $order->subtotal        = expUtil::currency_to_float($this->params['subtotal']);\n        $order->total_discounts = expUtil::currency_to_float($this->params['total_discounts']);\n        $order->total           = round($order->subtotal - $order->total_discounts, 2);\n        $order->tax             = expUtil::currency_to_float($this->params['tax']);\n        $order->shipping_total  = expUtil::currency_to_float($this->params['shipping_total']);\n        //note: the shippingmethod record will still reflect the ORIGINAL shipping amount for this order.\n        $order->surcharge_total = expUtil::currency_to_float($this->params['surcharge_total']);\n\n        if ($this->params['autocalc'] == true) {\n            $order->grand_total = round(($order->subtotal - $order->total_discounts) + $order->tax + $order->shipping_total + $order->surcharge_total, 2);\n        } else {\n            $order->grand_total = round(expUtil::currency_to_float($this->params['grand_total']), 2);\n        }\n        //FIXME attempt to update w/ new billing transaction\n//        $bmopts = expUnserialize($order->billingmethod[0]->billing_options);\n//        $bmopts->result->transId = gt('Totals Adjusted');\n//        $order->billingmethod[0]->billingcalculator->calculator->createBillingTransaction($order->billingmethod[0], number_format($order->grand_total, 2, '.', ''), $bmopts->result, $bmopts->result->payment_status);\n        $order->save();\n\n//        flashAndFlow('message', gt('Order totals updated.'));\n        flash('message', gt('Order totals updated.'));\n        redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $this->params['orderid']));\n    }\n\n    function update_sales_reps() {\n        if (!isset($this->params['id'])) {\n            flashAndFlow('error', gt('Unable to process request. Invalid order number.'));\n            //expHistory::back();\n        }\n        $order                 = new order($this->params['id']);\n        $order->sales_rep_1_id = $this->params['sales_rep_1_id'];\n        $order->sales_rep_2_id = $this->params['sales_rep_2_id'];\n        $order->sales_rep_3_id = $this->params['sales_rep_3_id'];\n        $order->save();\n        flashAndFlow('message', gt('Sales reps updated.'));\n    }\n\n    function quickfinder() {\n        global $db;\n\n        $search    = $this->params['ordernum'];\n        $searchInv = intval($search);\n\n        $sql = \"SELECT DISTINCT(o.id), o.invoice_id, FROM_UNIXTIME(o.purchased,'%c/%e/%y %h:%i:%s %p') as purchased_date, b.firstname as bfirst, b.lastname as blast, concat('\".expCore::getCurrencySymbol().\"',format(o.grand_total,2)) as grand_total, os.title as status_title, ot.title as order_type\";\n        $sql .= \" from \" . $db->prefix . \"orders as o \";\n        $sql .= \"INNER JOIN \" . $db->prefix . \"orderitems as oi ON oi.orders_id = o.id \";\n        $sql .= \"INNER JOIN \" . $db->prefix . \"order_type as ot ON ot.id = o.order_type_id \";\n        $sql .= \"INNER JOIN \" . $db->prefix . \"order_status as os ON os.id = o.order_status_id \";\n        $sql .= \"INNER JOIN \" . $db->prefix . \"billingmethods as b ON b.orders_id = o.id \";\n        $sql .= \"INNER JOIN \" . $db->prefix . \"shippingmethods as s ON s.id = oi.shippingmethods_id \";\n\n        $sqlwhere = \"WHERE o.purchased != 0\";\n        if ($searchInv != 0) $sqlwhere .= \" AND (o.invoice_id LIKE '%\" . $searchInv . \"%' OR\";\n        else $sqlwhere .= \" AND (\";\n        $sqlwhere .= \" b.firstname LIKE '%\" . $search . \"%'\";\n        $sqlwhere .= \" OR s.firstname LIKE '%\" . $search . \"%'\";\n        $sqlwhere .= \" OR b.lastname LIKE '%\" . $search . \"%'\";\n        $sqlwhere .= \" OR s.lastname LIKE '%\" . $search . \"%'\";\n        $sqlwhere .= \" OR b.email LIKE '%\" . $search . \"%')\";\n\n        $limit = empty($this->config['limit']) ? 350 : $this->config['limit'];\n        //eDebug($sql . $sqlwhere)  ;\n        $page = new expPaginator(array(\n            'sql'       => $sql . $sqlwhere,\n            'limit'     => $limit,\n            'order'     => 'o.invoice_id',\n            'dir'       => 'DESC',\n            'page'      => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'=> $this->baseclassname,\n            'action'    => $this->params['action'],\n            'columns'   => array(\n                'actupon'           => true,\n                gt('Order #')       => 'invoice_id|controller=order,action=show,showby=id',\n                gt('Purchased Date')=> 'purchased_date',\n                gt('First')         => 'bfirst',\n                gt('Last')          => 'blast',\n                gt('Total')         => 'grand_total',\n                gt('Order Type')    => 'order_type',\n                gt('Status')        => 'status_title'\n            ),\n        ));\n        assign_to_template(array(\n            'page'=> $page,\n            'term'=> $search\n        ));\n\n        //eDebug($this->params);\n        /*$o = new order();\n        $b = new billingmethod();\n        $s = new shippingmethod();\n\n        $search = intval($this->params['ordernum']);\n        if (is_int($oid) && $oid > 0)\n        {\n            $orders = $o->find('all',\"invoice_id LIKE '%\".$oid.\"%'\");\n            if(count($orders == 1))\n            {\n                redirect_to(array('controller'=>'order','action'=>'show','id'=>$order[0]->id));\n            }\n            else\n            {\n                flashAndFlow('message',\"Orders containing \" . $search . \" in the order number not found.\");\n            }\n        }\n        else\n        {\n            //lookup just a customer\n            $bms = $b->find('all', )\n        }*/\n        /*$o = new order();\n        $oid = intval($this->params['ordernum']);\n        if (is_int($oid) && $oid > 0)\n        {\n            $order = $o->find('first','invoice_id='.$oid);\n            if(!empty($order->id))\n            {\n                redirect_to(array('controller'=>'order','action'=>'show','id'=>$order->id));\n            }\n            else\n            {\n                flashAndFlow('message',\"Order #\" . intval($this->params['ordernum']) . \" not found.\");\n            }\n        }\n        else\n        {\n            flashAndFlow('message','Invalid order number.');\n        }*/\n    }\n\n    public function verifyReturnShopper() {\n//        global $user, $order;\n\n        $sessAr = expSession::get('verify_shopper');\n        if (isset($sessAr)) {\n            assign_to_template(array(\n                'firstname'=> $sessAr['firstname'],\n                'cid'=> $sessAr['cid']\n\n            ));\n            /*eDebug(expSession::get('verify_shopper'));\n            eDebug($this->params);\n            eDebug(\"here\");\n            eDebug($user);\n            eDebug($order);*/\n        }\n    }\n\n    public function verifyAndRestoreCart() {\n//        global $user, $order;\n\n        $sessAr = expSession::get('verify_shopper');\n        if (isset($sessAr) && isset($this->params['cid']) && $this->params['cid'] == $sessAr['cid']) {\n            $tmpCart = new order($sessAr['cid']);\n            if (isset($tmpCart->id)) {\n                //eDebug($tmpCart,true);\n                $shippingMethod = $tmpCart->shippingmethod;\n                $billingMethod  = $tmpCart->billingmethod[0];\n\n                if (($this->params['lastname'] == $shippingMethod->lastname || $this->params['lastname'] == $billingMethod->lastname) &&\n                    ($this->params['email'] == $shippingMethod->email || $this->params['email'] == $billingMethod->email) &&\n                    ($this->params['zip_code'] == $shippingMethod->zip || $this->params['zip_code'] == $billingMethod->zip)\n                ) {\n                    //validatio succeed, so restore order, login user and continue on to orig_path\n                    //eDebug(\"Validated\",true);\n                    $sessAr['validated'] = true;\n                    expSession::set('verify_shopper', $sessAr);\n                    redirect_to($sessAr['orig_path']);\n                } else {\n                    //eDebug(\"Validated NOT\",true);\n                    //validation failed, so go back\n                    flash('error', gt(\"We're sorry, but we could not verify your information.  Please try again, or start a new shopping cart.\"));\n                    redirect_to(array('controller'=> 'order', 'action'=> 'verifyReturnShopper', 'id'=> $sessAr['cid']));\n                }\n            } else {\n                flash('error', gt('We were unable to restore the previous order, we apologize for the inconvenience.  Please start a new shopping cart.'));\n                $this->clearCart();\n            }\n        }\n    }\n\n    public static function clearCartCookie() {\n        expSession::un_set('verify_shopper');\n        order::setCartCookie(null);\n    }\n\n    public function clearCart() {\n        global $order;\n\n        $sessAr = expSession::get('verify_shopper');\n        if (isset($sessAr)) {\n            order::setCartCookie($order);\n            $orig_path = $sessAr['orig_path'];\n            expSession::un_set('verify_shopper');\n            redirect_to($orig_path);\n        } else {\n            expHistory::back();\n        }\n    }\n\n    /**\n     * AJAX search for internal (addressController) addresses\n     *\n     */\n    public function search() {\n//        global $db, $user;\n        global $db;\n\n        $sql = \"select DISTINCT(a.id) as id, a.firstname as firstname, a.middlename as middlename, a.lastname as lastname, a.organization as organization, a.email as email \";\n        $sql .= \"from \" . $db->prefix . \"addresses as a \"; //R JOIN \" .\n        //$db->prefix . \"billingmethods as bm ON bm.addresses_id=a.id \";\n        $sql .= \" WHERE match (a.firstname,a.lastname,a.email,a.organization) against ('\" . $this->params['query'] .\n            \"*' IN BOOLEAN MODE) \";\n        $sql .= \"order by match (a.firstname,a.lastname,a.email,a.organization)  against ('\" . $this->params['query'] . \"*' IN BOOLEAN MODE) ASC LIMIT 12\";\n        $res = $db->selectObjectsBySql($sql);\n        foreach ($res as $key=>$record) {\n            $res[$key]->title = $record->firstname . ' ' . $record->lastname;\n        }\n        //eDebug($sql);\n        $ar = new expAjaxReply(200, gt('Here\\'s the items you wanted'), $res);\n        $ar->send();\n    }\n\n    /**\n     * Ajax search for external addresses\n     *\n     */\n    public function search_external() {\n//        global $db, $user;\n        global $db;\n\n        $sql = \"select DISTINCT(a.id) as id, a.source as source, a.firstname as firstname, a.middlename as middlename, a.lastname as lastname, a.organization as organization, a.email as email \";\n        $sql .= \"from \" . $db->prefix . \"external_addresses as a \"; //R JOIN \" .\n        //$db->prefix . \"billingmethods as bm ON bm.addresses_id=a.id \";\n        $sql .= \" WHERE match (a.firstname,a.lastname,a.email,a.organization) against ('\" . $this->params['query'] .\n            \"*' IN BOOLEAN MODE) \";\n        $sql .= \"order by match (a.firstname,a.lastname,a.email,a.organization)  against ('\" . $this->params['query'] . \"*' IN BOOLEAN MODE) ASC LIMIT 12\";\n        $res = $db->selectObjectsBySql($sql);\n        foreach ($res as $key=>$record) {\n            $res[$key]->title = $record->firstname . ' ' . $record->lastname;\n        }\n        //eDebug($sql);\n        $ar = new expAjaxReply(200, gt('Here\\'s the items you wanted'), $res);\n        $ar->send();\n    }\n\n}\n\n?>"], "fixing_code": ["<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expHTMLEditorController\n *\n * @package    Core\n * @subpackage Controllers\n */\n\nclass expHTMLEditorController extends expController\n{\n    protected $manage_permissions = array(\n        'activate' => \"Activate\",\n        'preview'  => \"Preview Editor Toolbars\"\n    );\n    public $requires_login = array(\n        'preview'=>'Preview Editor',\n    );\n\n    static function displayname()\n    {\n        return gt(\"Editors\");\n    }\n\n    static function description()\n    {\n        return gt(\"Mostly for CKEditor\");\n    }\n\n    static function author()\n    {\n        return \"Phillip Ball\";\n    }\n\n    static function hasSources()\n    {\n        return false;\n    }\n\n    static function hasContent()\n    {\n        return false;\n    }\n\n    function __construct($src = null, $params = array())\n    {\n        parent:: __construct($src, $params);\n        if (empty($this->params['editor'])) {\n            $this->params['editor'] = SITE_WYSIWYG_EDITOR;\n        }\n    }\n\n    function manage()\n    {\n        global $db;\n\n        expHistory::set('manageable', $this->params);\n        if (SITE_WYSIWYG_EDITOR == \"FCKeditor\") {\n            flash('error', gt('FCKeditor is deprecated!'));\n            redirect_to(array(\"module\" => \"administration\", \"action\" => \"configure_site\"));\n        }\n\n        // otherwise, on to the show\n        $configs = $db->selectObjects('htmleditor_' . $this->params['editor'], 1);\n\n        assign_to_template(\n            array(\n                'configs' => $configs,\n                'editor' => $this->params['editor']\n            )\n        );\n    }\n\n    function update()\n    {\n        global $db;\n\n        $obj = self::getEditorSettings($this->params['id'], $this->params['editor']);\n        $obj->name = $this->params['name'];\n        $obj->data = stripSlashes($this->params['data']);\n        $obj->skin = $this->params['skin'];\n        $obj->scayt_on = $this->params['scayt_on'];\n        $obj->paste_word = $this->params['paste_word'];\n        $obj->plugins = stripSlashes($this->params['plugins']);\n        $obj->stylesset = stripSlashes($this->params['stylesset']);\n        $obj->formattags = stripSlashes($this->params['formattags']);\n        $obj->fontnames = stripSlashes($this->params['fontnames']);\n        if (empty($this->params['id'])) {\n            $this->params['id'] = $db->insertObject($obj, 'htmleditor_' . $this->params['editor']);\n        } else {\n            $db->updateObject($obj, 'htmleditor_' . $this->params['editor'], null, 'id');\n        }\n        if ($this->params['active']) {\n            $this->activate();\n        }\n        expHistory::returnTo('manageable');\n    }\n\n    function edit()\n    {\n        expHistory::set('editable', $this->params);\n        $tool = self::getEditorSettings(!empty($this->params['id'])?$this->params['id']:null, $this->params['editor']);\n        if ($tool == null) $tool = new stdClass();\n        $tool->data = !empty($tool->data) ? @stripSlashes($tool->data) : '';\n        $tool->plugins = !empty($tool->plugins) ? @stripSlashes($tool->plugins) : '';\n        $tool->stylesset = !empty($tool->stylesset) ? @stripSlashes($tool->stylesset) : '';\n        $tool->formattags = !empty($tool->formattags) ? @stripSlashes($tool->formattags) : '';\n        $tool->fontnames = !empty($tool->fontnames) ? @stripSlashes($tool->fontnames) : '';\n        $skins_dir = opendir(BASE . 'external/editors/' . $this->params['editor'] . '/skins');\n        $skins = array();\n        while (($skin = readdir($skins_dir)) !== false) {\n            if ($skin != '.' && $skin != '..') {\n                $skins[] = $skin;\n            }\n        }\n        assign_to_template(\n            array(\n                'record' => $tool,\n                'skins'  => $skins,\n                'editor' => $this->params['editor']\n            )\n        );\n    }\n\n    function delete()\n    {\n        global $db;\n\n        expHistory::set('editable', $this->params);\n        @$db->delete('htmleditor_' . $this->params['editor'], \"id=\" . $this->params['id']);\n        expHistory::returnTo('manageable');\n    }\n\n    function activate()\n    {\n        global $db;\n\n        $db->toggle('htmleditor_' . $this->params['editor'], \"active\", 'active=1');\n        if ($this->params['id'] != \"default\") {\n            $active = self::getEditorSettings($this->params['id'], $this->params['editor']);\n            $active->active = 1;\n            $db->updateObject($active, 'htmleditor_' . $this->params['editor'], null, 'id');\n        }\n        expHistory::returnTo('manageable');\n    }\n\n    function preview()\n    {\n        if ($this->params['id'] == 0) { // we want the default editor\n            $demo = new stdClass();\n            $demo->id = 0;\n            $demo->name = \"Default\";\n            if ($this->params['editor'] == 'ckeditor') {\n                $demo->skin = 'kama';\n            } elseif ($this->params['editor'] == 'tinymce') {\n                $demo->skin = 'lightgray';\n            }\n        } else {\n            $demo = self::getEditorSettings($this->params['id'], expString::escape($this->params['editor']));\n        }\n        assign_to_template(\n            array(\n                'demo' => $demo,\n                'editor' => $this->params['editor']\n            )\n        );\n    }\n\n    public static function getEditorSettings($settings_id, $editor)\n    {\n        global $db;\n\n        return @$db->selectObject('htmleditor_' . $editor, \"id=\" . $settings_id);\n    }\n\n    public static function getActiveEditorSettings($editor)\n    {\n        global $db;\n\n        return $db->selectObject('htmleditor_' . $editor, 'active=1');\n    }\n\n}\n\n?>\n", "<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package    Modules\n */\n\nclass orderController extends expController {\n    protected $manage_permissions = array(\n        'add_order_item'      => 'Add Order Item',\n        'download'      => 'Download Label',\n//        'create_new_order'    => 'Create A New Order',\n//        'createReferenceOrder'=> 'Create Reference Order',\n//        'edit_address'        => 'Edit Address',\n//        'edit_invoice_id'     => 'Edit Invoice Id',\n//        'edit_order_item'     => 'Edit Order Item',\n//        'edit_payment_info'   => 'Edit Payment Info',\n//        'edit_shipping_method'=> 'Edit Shipping Method',\n//        'edit_totals'         => 'Edit Totals',\n//        'email'         => 'Send Email',\n        'quickfinder'=> 'Do a quick order lookup',\n        'save_payment_info'=> 'Save Payment Info',\n        'save_address'=> 'Save Address',\n        'save_order_item'=> 'Save Order Item',\n//        'save_new_order_item'=> 'Save New Order Item',\n        'save_totals'=> 'Save Totals',\n        'save_invoice_id'=> 'Save Invoice Id',\n        'save_shipping_method'=> 'Save Shipping Method',\n        'save_new_order'=> 'Save a new order',\n        'save_reference_order'=> 'Save Reference Order',\n        'set'           => 'Change Status',\n        'showall'             => 'Manage',\n        'show'                => 'View Orders',\n        'update'                => 'update order',\n    );\n    public $requires_login = array(\n        'ordersbyuser'=>'You must be logged in to view past orders',\n    );\n\n    static function displayname() {\n        return gt(\"e-Commerce Order Manager\");\n    }\n\n    static function description() {\n        return gt(\"Use this module to manage the orders from your ecommerce store.\");\n    }\n\n    function showall() {\n        global $db;\n\n        expHistory::set('viewable', $this->params);\n\n        // remove abaondoned carts\n        /*$count = $db->countObjects('orders', 'purchased=0');\n        for($i=0; $i<$count; $i++) {\n            // get the cart\n            $cart = $db->selectObject('orders','purchased=0');\n\n            // check to make sure this isn't an active session\n            $ticket = $db->selectObject('sessionticket', \"ticket='\".$cart->sessionticket_ticket.\"'\");\n            if (empty($ticket)) {\n                // delete all the order items for this cart and their shippingmethods\n                foreach($db->selectObjects('orderitems', 'orders_id='.$cart->id) as $oi) {\n                    $db->delete('shippingmethods', 'id='.$oi->shippingmethods_id);\n                    $db->delete('orderitems', 'orders_id='.$cart->id);\n                }\n\n                // delete the billing methods for this cart.\n                $db->delete('billingmethods', 'orders_id='.$cart->id);\n                $db->delete('orders', 'id='.$cart->id);\n            }\n\n        } */\n\n        // find orders with a \"closed\" status type\n//        $closed_count = 0;\n        if (empty($this->params['showclosed'])) {\n            $closed_status = $db->selectColumn('order_status', 'id', 'treat_as_closed=1');\n            $closed_status = implode(',',$closed_status);\n//            $status_where  = '';\n            $status_where  = ' AND order_status_id NOT IN (' . $closed_status . ')';\n\n//            foreach ($closed_status as $status) {\n//                if (empty($status_where)) {\n//                    $status_where .= ' AND (order_status_id!=' . $status;\n//                } else {\n//                    $status_where .= ' AND order_status_id!=' . $status;\n//                }\n//                $closed_count += $db->countObjects('orders', 'order_status_id=' . $status);\n//            }\n            $closed_count = $db->countObjects('orders', 'order_status_id IN (' . $closed_status . ')');\n        } else {\n            $status_where = '';\n            $closed_count = -1;\n        }\n\n        // build out a SQL query that gets all the data we need and is sortable.\n        $sql = 'SELECT o.*, b.firstname as firstname, b.billing_cost as total, b.transaction_state as paid, b.billingcalculator_id as method, b.middlename as middlename, b.lastname as lastname, os.title as status, ot.title as order_type ';\n        $sql .= 'FROM ' . $db->prefix . 'orders o, ' . $db->prefix . 'billingmethods b, ';\n        $sql .= $db->prefix . 'order_status os, ';\n        $sql .= $db->prefix . 'order_type ot ';\n        $sql .= 'WHERE o.id = b.orders_id AND o.order_status_id = os.id AND o.order_type_id = ot.id AND o.purchased > 0';\n  //FIXME this sql isn't correct???\n//        if (!empty($status_where)) {\n//            $status_where .= ')';\n            $sql .= $status_where;\n//        }\n        if (ECOM_LARGE_DB) {\n            $limit = empty($this->config['limit']) ? 50 : $this->config['limit'];\n        } else {\n            $limit = 0;  // we'll paginate on the page\n        }\n        //eDebug($sql, true);\n        $page = new expPaginator(array(\n            //'model'=>'order',\n            'sql'       => $sql,\n            'order'     => 'purchased',\n            'dir'       => 'DESC',\n            'limit'     => $limit,\n            'page'      => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'=> $this->params['controller'],\n            'action'    => $this->params['action'],\n            'columns'   => array(\n                gt('Customer')      => 'lastname',\n                gt('Inv #')         => 'invoice_id',\n                gt('Total')         => 'total',\n                gt('Payment')       => 'method',\n                gt('Purchased')     => 'purchased',\n                gt('Type')          => 'order_type_id',\n                gt('Status')        => 'order_status_id',\n                gt('Ref')           => 'orig_referrer',\n            )\n        ));\n        //eDebug($page,true);\n        assign_to_template(array(\n            'page'        => $page,\n            'closed_count'=> $closed_count,\n            'new_order'   => order::getDefaultOrderStatus()\n        ));\n    }\n\n    function show() {\n        global $db, $user;\n//eDebug($_REQUEST);\n//eDebug($this->params,true);\n//if (!empty($this->params['printerfriendly'])) $_REQUEST['printerfriendly'] = 1;\n\n        expHistory::set('viewable', $this->params);\n\n        if (!empty($this->params['invoice']) && empty($this->params['id'])) {\n            $ord = new order();\n            $order = $ord->find('first', 'invoice_id=' . $this->params['invoice']);\n            $this->params['id'] = $order->id;\n        } elseif (!empty($this->params['id'])) {\n            $order = new order($this->params['id']);\n        }\n        if (empty($order->id)) {\n            flash('notice', gt('That order does not exist.'));\n            expHistory::back();\n        }\n\n        // We're forcing the location. Global store setting will always have this loc\n//        $storeConfig = new expConfig(expCore::makeLocation(\"ecomconfig\",\"@globalstoresettings\",\"\"));\n\n        $billing         = new billing($this->params['id']);\n        $status_messages = $db->selectObjects('order_status_messages');\n        $order_type      = $order->getOrderType();\n        //eDebug($order->billingmethod[0]->billingtransaction);\n        $order->billingmethod[0]->billingtransaction = array_reverse($order->billingmethod[0]->billingtransaction);\n        if (empty($order->billingmethod[0]->billingtransaction[0]->billingcalculator_id)) {\n            $calc_name = $order->billingmethod[0]->billingcalculator->calculator_name;\n            $order->billingmethod[0]->billingtransaction[0]->billingcalculator = new $calc_name();\n        }\n        //eDebug($order->billingmethod[0]->billingtransaction);\n        if (isset($this->params['printerfriendly']))\n            $pf = $this->params['printerfriendly'];\n        else\n            $pf = 0;\n\n        $to_addresses[] = $order->billingmethod[0]->email;\n//        $s              = array_pop($order->shippingmethods);  //FIXME we don't really want to 'pop' it off the object\n        $s              = reset($order->shippingmethods);\n        if ($s->email != $order->billingmethod[0]->email) $to_addresses[] = $s->email;\n\n        $from_addresses                                        = array();\n        $from_addresses[SMTP_FROMADDRESS]                      = SMTP_FROMADDRESS;\n        $from_addresses[ecomconfig::getConfig('from_address')] = ecomconfig::getConfig('from_address');\n        $from_addresses[$user->email]                          = $user->email;\n        $from_addresses['other']                               = 'Other (enter below)';\n        $from_addresses = array_filter($from_addresses);\n        $from_default = ecomconfig::getConfig('from_address');\n        $from_default = !empty($from_default) ? $from_default : SMTP_FROMADDRESS;\n\n        $email_subject = 'Message from ' . ecomconfig::getConfig('storename') . ' about your order (#' . $order->invoice_id . ')';\n\n        $order->setReferencingIds();\n\n        $css = file_get_contents(BASE . 'framework/modules/ecommerce/assets/css/print-invoice.css');\n\n        assign_to_template(array(\n            'css'            => $css,\n            'pf'             => $pf,\n            'order'          => $order,\n            'order_user'     => new user($order->user_id),\n//            'shipping'       => $order->orderitem[0],  //FIXME what about new orders with no items??\n            'billing'        => $billing,\n            'billinginfo'    => $billing->getBillingInfo(),\n            'messages'       => $status_messages,\n            'order_type'     => $order_type,\n//            'storeConfig'    => $storeConfig->config,\n            'sales_reps'     => order::getSalesReps(),\n            'from_addresses' => $from_addresses,\n            'from_default'   => $from_default,\n            'email_subject'  => $email_subject,\n            'to_addresses'   => implode(',', $to_addresses)\n        ));\n        if ($order->shipping_required) {\n            assign_to_template(array(\n                'shipping'       => $order->orderitem[0],  //FIXME what about new orders with no items??\n            ));\n        }\n    }\n\n    function myOrder() {\n        global $user, $db;\n\n        $order = new order($this->params['id']);\n        if ($order->purchased == 0)\n            flashAndFlow('error', gt('You do not have permission to view this order.'));\n\n        $this->loc->src = \"@globalstoresettings\";\n\n        // We're forcing the location. Global store setting will always have this loc\n//        $storeConfig = new expConfig(expCore::makeLocation(\"ecomconfig\",\"@globalstoresettings\",\"\"));\n\n        //check here for the hash in the params, or session set w/ perms to view...shs = xaf7y0s87d7elshd70 etc\n        //if present, prompt user for the order number and email address on the order\n        //and if they pass, show the order to them. Need to maybe set something in the session then for subsequent\n        //viewing of the order?\n        if ($user->id != $order->user_id) {\n            if ($user->isAdmin()) {\n                redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $this->params['id']));\n            } else {\n                flashAndFlow('error', gt('You do not have permission to view this order.'));\n            }\n        }\n\n        expHistory::set('viewable', $this->params);\n\n        $billing            = new billing($this->params['id']);\n        $status_messages    = $db->selectObjects('order_status_messages');\n        $order_type         = $order->getOrderType();\n        $order->total_items = 0;\n        foreach ($order->orderitem as $item) {\n            $order->total_items += $item->quantity;\n            $order->shipping_city  = $item->shippingmethod->city;\n            $order->shipping_state = $item->shippingmethod->state;\n        }\n        $state                   = new geoRegion($order->shipping_state);\n        $country                 = new geoCountry($state->country_id);\n        $order->shipping_country = $country->iso_code_3letter;\n        $order->shipping_state   = $state->name;\n\n        //eDebug($order,true);\n\n        $order->billingmethod[0]->billingtransaction = array_reverse($order->billingmethod[0]->billingtransaction);\n        if (isset($this->params['printerfriendly'])) $pf = $this->params['printerfriendly'];\n        else $pf = 0;\n        $css = file_get_contents(BASE . 'framework/modules/ecommerce/assets/css/print-invoice.css');\n\n        $order->calculateGrandTotal();\n\n        $trackMe = false;\n        if (isset($this->params['tc']) && $this->params['tc'] == 1) {\n            if (expSession::is_set('orders_tracked')) {\n                $trackingArray = expSession::get('orders_tracked');\n                if (in_array($order->invoice_id, $trackingArray)) {\n                    $trackMe = false;\n                } else {\n                    $trackMe         = true;\n                    $trackingArray[] = $order->invoice_id;\n                    expSession::set('orders_tracked', $trackingArray);\n                }\n            } else {\n                $trackMe         = true;\n                $trackingArray[] = $order->invoice_id;\n                expSession::set('orders_tracked', $trackingArray);\n            }\n        }\n        if (DEVELOPMENT != 0)\n            $trackMe = false;\n        assign_to_template(array(\n            'printerfriendly'=> $pf,\n            'css'            => $css,\n            'order'          => $order,\n            'shipping'       => $order->orderitem[0],\n            'billing'        => $billing,\n            'billinginfo'    => $billing->getBillingInfo(),\n            'order_type'     => $order_type,\n//            'storeConfig'    => $storeConfig->config,\n            'tc'             => $trackMe,\n            'checkout'       => !empty($this->params['tc'])  //FIXME we'll use the tc param for now\n        ));\n\n    }\n\n    function email() {\n        global $template, $user;\n\n        // setup a template suitable for emailing\n        $template = expTemplate::get_template_for_action($this, 'email_invoice', $this->loc);\n        $order    = new order($this->params['id']);\n        $billing  = new billing($this->params['id']);\n//        if ($billing->calculator != null) {\n//            $billinginfo = $billing->calculator->userView(unserialize($billing->billingmethod->billing_options));\n//        } else {\n//            if (empty($opts)) {\n//                $billinginfo = false;\n//            } else {\n//                $billinginfo = gt(\"No Cost\");\n//                if (!empty($opts->payment_due)) {\n//                    $billinginfo .= '<br>'.gt('Payment Due') . ': ' . expCore::getCurrencySymbol() . number_format($opts->payment_due, 2, \".\", \",\");\n//                }\n//            }\n//        }\n        $css = file_get_contents(BASE.'framework/modules/ecommerce/assets/css/print-invoice.css');\n        assign_to_template(array(\n            'css'         => $css,\n            'order'       => $order,\n            'shipping'    => $order->orderitem[0],\n            'billing'     => $billing,\n            'billinginfo' => $billing->getBillingInfo(),\n        ));\n\n        // build the html and text versions of the message\n        $html = $template->render();\n//        $txt  = strip_tags($html);\n\n        // send email invoices to the admins if needed\n        if (ecomconfig::getConfig('email_invoice') == true) {\n            $addresses = explode(',', ecomconfig::getConfig('email_invoice_addresses'));\n            foreach ($addresses as $address) {\n                $mail = new expMail();\n                $from = array(ecomconfig::getConfig('from_address') => ecomconfig::getConfig('from_name'));\n                if (empty($from[0])) $from = SMTP_FROMADDRESS;\n                $mail->quickSend(array(\n                    'html_message'=> $html,\n//                    'text_message'=> $txt,\n                    'text_message'=> expString::html2text($html),\n                    'to'          => trim($address),\n                    'from'        => $from,\n                    'subject'     => 'An order was placed on the ' . ecomconfig::getConfig('storename'),\n                ));\n            }\n        }\n\n        // email the invoice to the user if we need to\n        if (ecomconfig::getConfig('email_invoice_to_user') == true && !empty($user->email)) {\n            $usermsg = \"<p>\" . ecomconfig::getConfig('invoice_msg') . \"<p>\";\n            $usermsg .= $html;\n//            $usermsg .= ecomconfig::getConfig('ecomfooter');\n\n            $mail = new expMail();\n            $from = array(ecomconfig::getConfig('from_address') => ecomconfig::getConfig('from_name'));\n            if (empty($from[0])) $from = SMTP_FROMADDRESS;\n            $mail->quickSend(array(\n                'html_message'=> $usermsg,\n//                'text_message'=> $txt,\n                'text_message'=> expString::html2text($usermsg),\n                'to'          => array(trim($user->email) => trim(user::getUserAttribution($user->id))),\n                //'to'=>$order->billingmethod[0]->email,\n                'from'        => $from,\n                'subject'     => ecomconfig::getConfig('invoice_subject'),\n            ));\n        }\n    }\n\n    function update_shipping() {\n        $order                   = new order($this->params['id']);\n        $this->params['shipped'] = datetimecontrol::parseData('shipped', $this->params);\n        $order->update($this->params);\n        flash('message', gt('Shipping information updated.'));\n        expHistory::back();\n    }\n\n    function getPDF($orders = null) {\n        global $user, $timer;\n\n        $invoice = '<!DOCTYPE HTML><HTML><HEAD>';\n        // the basic styles\n        if (!bs3())\n            $invoice .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.URL_FULL.'external/normalize/normalize.css\" >';\n        if (!bs())\n//            $invoice .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.URL_FULL.'external/normalize/normalize.css\" >';\n        if (bs2())\n            $invoice .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.URL_FULL.'external/bootstrap/css/bootstrap.css\" >';\n        if (bs3())\n            $invoice .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.URL_FULL.'external/bootstrap3/css/bootstrap.css\" >';\n        $invoice .= '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.URL_FULL.'framework/modules/ecommerce/assets/css/print-invoice.css\">\n        <style>\n            html{background:none;}\n            #store-header{text-align:left;}\n        </style>';\n        $invoice .= '</HEAD><BODY>';\n        if (is_array($orders)) {\n            foreach ($orders as $order) {\n                if ($user->isAdmin()) {\n                    $invoice .= renderAction(array('controller'=> 'order', 'action'=> 'show', 'view'=> 'show_printable', 'id'=> $order['id'], 'printerfriendly'=> '1', 'no_output'=> 'true'));\n                    //eDebug($order['id'] . \": \" . $timer->mark());\n                } else {\n                    $invoice .= renderAction(array('controller'=> 'order', 'action'=> 'myOrder', 'view'=> 'show_printable', 'id'=> $order['id'], 'printerfriendly'=> '1', 'no_output'=> 'true'));\n                }\n                $invoice .= '<p style=\"page-break-before: always;\"></p>';\n            }\n            $invoice = substr($invoice, 0, (strlen($invoice) - 42));\n        } else {\n            if ($user->isAdmin()) {\n                $invoice .= renderAction(array('controller'=> 'order', 'action'=> 'show', 'view'=> 'show_printable', 'id'=> $this->params['id'], 'printerfriendly'=> '1', 'no_output'=> 'true'));\n            } else {\n                $invoice .= renderAction(array('controller'=> 'order', 'action'=> 'myOrder', 'view'=> 'show_printable', 'id'=> $this->params['id'], 'printerfriendly'=> '1', 'no_output'=> 'true'));\n            }\n        }\n\n        $invoice .= \"</BODY></HTML>\";\n        $invoice = mb_convert_encoding($invoice, 'HTML-ENTITIES', \"UTF-8\");\n        // eDebug($invoice);\n        $org_name = str_ireplace(\" \", \"_\", ORGANIZATION_NAME);\n\n        //eDebug(\"Here\",1);\n        // Actually create/output the pdf file\n\n        /**\n         * to do this same thing as below using html2pdf\n         * //FIXME uncomment to implement, comment out above\n        require_once(BASE.'external/html2pdf_v4.03/html2pdf.class.php');\n        $html2pdf = new HTMLTPDF('P', 'LETTER', substr(LOCALE,0,2));\n        $html2pdf->writeHTML($invoice);\n        $html2pdf->Output($org_name . \"_Invoice\" . \".pdf\",HTMLTOPDF_OUTPUT?'D':'');\n        exit();\n         */\n        /**\n         * to do this same thing as below using dompdf\n         * //FIXME uncomment to implement, comment out above\n        require_once(BASE.'external/dompdf/dompdf_config.inc.php');\n        $mypdf = new DOMPDF();\n        $mypdf->load_html($invoice);\n        $mypdf->set_paper('letter','portrait');\n        $mypdf->render();\n        $mypdf->stream($org_name . \"_Invoice\" . \".pdf\",array('Attachment'=>HTMLTOPDF_OUTPUT));\n        exit();\n         */\n        /**\n         * to do this same thing as below using expHtmlToPDF\n         */\n        $mypdf = new expHtmlToPDF('Letter','portrait',$invoice);\n        $mypdf->createpdf('D',$org_name . \"_Invoice\" . \".pdf\");\n        exit();\n\n        if (stristr(PHP_OS, 'Win')) {\n            if (file_exists(HTMLTOPDF_PATH)) {\n                do {\n                    $htmltopdftmp = HTMLTOPDF_PATH_TMP . mt_rand() . '.html';\n                } while (file_exists($htmltopdftmp));\n            }\n            file_put_contents($htmltopdftmp, $invoice);\n\n            exec(HTMLTOPDF_PATH . \" \" . $htmltopdftmp . \" \" . HTMLTOPDF_PATH_TMP . $org_name . \"_Invoice.pdf\");\n            $this->returnFile(HTMLTOPDF_PATH_TMP . $org_name . \"_Invoice.pdf\", $org_name . \"_Invoice.pdf\", \"pdf\");\n            exit();\n        } else {\n\n            //require_once(BASE.'external/tcpdf/config/lang/eng.php');\n            //require_once(BASE.'external/tcpdf/tcpdf.php');\n\n            //----\n            // create new PDF document\n            /*$pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);\n\n// set document information\n$pdf->SetCreator(PDF_CREATOR);\n$pdf->SetAuthor('Nicola Asuni');\n$pdf->SetTitle('TCPDF Example 001');\n$pdf->SetSubject('TCPDF Tutorial');\n$pdf->SetKeywords('TCPDF, PDF, example, test, guide');\n\n// set default header data\npdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, PDF_HEADER_TITLE.' 001', PDF_HEADER_STRING);\n\n// set header and footer fonts\n$pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));\n$pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));\n\n// set default monospaced font\n$pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);\n\n//set margins\n$pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);\n$pdf->SetHeaderMargin(PDF_MARGIN_HEADER);\n$pdf->SetFooterMargin(PDF_MARGIN_FOOTER);\n\n// remove default header/footer\n$pdf->setPrintHeader(false);\n$pdf->setPrintFooter(false);\n\n//set auto page breaks\n$pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);\n\n//set image scale factor\n$pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);\n\n//set some language-dependent strings\n$pdf->setLanguageArray($l);\n\n// ---------------------------------------------------------\n\n// set default font subsetting mode\n//$pdf->setFontSubsetting(true);\n\n// Set font\n// dejavusans is a UTF-8 Unicode font, if you only need to\n// print standard ASCII chars, you can use core fonts like\n// helvetica or times to reduce file size.\n//$pdf->SetFont('helvetica', '', 14, '', true);\n\n// Add a page\n// This method has several options, check the source code documentation for more information.\n$pdf->AddPage();\n//eDebug($invoice,1);\n// Print text using writeHTMLCell()\n//$pdf->writeHTML($w=0, $h=0, $x='', $y='', $invoice, $border=0, $ln=1, $fill=0, $reseth=true, $align='', $autopadding=true);\n$pdf->writeHTML($invoice);\n\n// ---------------------------------------------------------\n\n// Close and output PDF document\n// This method has several options, check the source code documentation for more information.\nob_clean();\n$pdf->Output('example_001.pdf', 'I');\nexit();\n//============================================================+\n// END OF FILE\n//============================================================+\n\n\n            // create new PDF document\n            $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);\n\n            // set document information\n            $pdf->SetCreator(PDF_CREATOR);\n            $pdf->SetAuthor(ORGANIZATION_NAME);\n            $pdf->SetTitle($org_name . \"_Invoice\");\n            $pdf->SetSubject($org_name . \"_Invoice\");\n            // remove default header/footer\n            $pdf->setPrintHeader(false);\n            $pdf->setPrintFooter(false);\n\n            // set default monospaced font\n            $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);\n\n            //set margins\n            $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);\n\n            //set auto page breaks\n            $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);\n            $pdf->writeHTMLCell($w=0, $h=0, $x='', $y='', $invoice, $border=0, $ln=1, $fill=0, $reseth=true, $align='', $autopadding=true);\n            $pdf->Output($org_name . \"_Invoice\" . \".pdf\", 'I');\n            exit();*/\n            eDebug(\"Done rendering invoice html. Starting PDF Generation: \" . $timer->mark());\n            $pdfer = new expHtmlToPDF('Letter', 'Portrait', $invoice);\n//            $pdfer->set_html($invoice);\n//            $pdfer->set_orientation('Portrait');\n//            $pdfer->set_page_size('Letter');\n            $pdfer->set_grayscale(true);\n//            $pdfer->render();\n            eDebug(\"Done rendering PDF \" . $timer->mark());\n//            exit();\n            ob_clean();\n            $pdfer->createpdf('D', $org_name . \"_Invoice\" . \".pdf\");\n            exit();\n        }\n    }\n\n    private function returnFile($file, $name, $mime_type = '') {\n        /*\n            This function takes a path to a file to output ($file),\n            the filename that the browser will see ($name) and\n            the MIME type of the file ($mime_type, optional).\n\n            If you want to do something on download abort/finish,\n            register_shutdown_function('function_name');\n        */\n        if (!is_readable($file)) die('File not found or inaccessible!');\n\n        $size = filesize($file);\n        $name = rawurldecode($name);\n\n        /* Figure out the MIME type (if not specified) */\n        $known_mime_types = array(\n            \"pdf\"  => \"application/pdf\",\n            \"txt\"  => \"text/plain\",\n            \"html\" => \"text/html\",\n            \"htm\"  => \"text/html\",\n            \"exe\"  => \"application/octet-stream\",\n            \"zip\"  => \"application/zip\",\n            \"doc\"  => \"application/msword\",\n            \"xls\"  => \"application/vnd.ms-excel\",\n            \"ppt\"  => \"application/vnd.ms-powerpoint\",\n            \"gif\"  => \"image/gif\",\n            \"png\"  => \"image/png\",\n            \"jpeg\" => \"image/jpg\",\n            \"jpg\"  => \"image/jpg\",\n            \"php\"  => \"text/plain\"\n        );\n\n        if ($mime_type == '') {\n//            $file_extension = strtolower(substr(strrchr($file, \".\"), 1));\n//\n//            if (array_key_exists($file_extension, $known_mime_types)) {\n//                $mime_type = $known_mime_types[$file_extension];\n//            } else {\n//                $mime_type = \"application/force-download\";\n//            }\n            $mime_type = expFile::getMimeType($file);\n        }\n\n        //@ob_end_clean(); //turn off output buffering to decrease cpu usage\n        // required for IE, otherwise Content-Disposition may be ignored\n        if (ini_get('zlib.output_compression'))\n            ini_set('zlib.output_compression', 'Off');\n\n        header('Content-Type: ' . $mime_type);\n        header('Content-Disposition: attachment; filename=\"' . $name . '\"');\n        header('Content-Transfer-Encoding: binary');\n        header('Accept-Ranges: bytes');\n\n        /* The three lines below basically make the download non-cacheable */\n        header('Cache-control: private');\n        header('Pragma: private');\n//        header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');\n        header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT');\n\n        // multipart-download and download resuming support\n        if (isset($_SERVER['HTTP_RANGE'])) {\n            list($a, $range) = explode('=', $_SERVER['HTTP_RANGE'], 2);\n            list($range) = explode(',', $range, 2);\n            list($range, $range_end) = explode('-', $range);\n\n            $range = intval($range);\n\n            $range_end  = (!$range_end) ? $size - 1 : intval($range_end);\n            $new_length = $range_end - $range + 1;\n\n            header('HTTP/1.1 206 Partial Content');\n            header('Content-Length: ' . $new_length);\n            header('Content-Range: bytes ' . ($range - $range_end / $size));\n        } else {\n            $new_length = $size;\n\n            header('Content-Length: ' . $size);\n        }\n\n        /* output the file itself */\n        $chunksize  = 1 * (1024 * 1024); //you may want to change this\n        $bytes_send = 0;\n\n        if ($file = fopen($file, 'r')) {\n            if (isset($_SERVER['HTTP_RANGE'])) fseek($file, $range);\n\n            while (!feof($file) && (!connection_aborted()) && ($bytes_send < $new_length)) {\n                $buffer = fread($file, $chunksize);\n\n                print($buffer);\n                flush();\n\n                $bytes_send += strlen($buffer);\n            }\n\n            fclose($file);\n        } else {\n            die('Error - can not open file.');\n        }\n    }\n\n    function set_order_type() {  //FIXME never used\n//        global $db;\n\n        if (empty($this->params['id'])) expHistory::back();\n\n        // get the order and update the type\n        $order                = new order($this->params['id']);\n        $order->order_type_id = $this->params['order_type_id'];\n        $order->save();\n        flash('message', gt('Invoice #') . $order->invoice_id . ' ' . gt('has been set to') . ' ' . $order->getOrderType());\n        expHistory::back();\n    }\n\n    /**\n     * Change order status and email notification if necessary\n     */\n    function setStatus() {\n        global $db, $template;\n\n        if (empty($this->params['id'])) expHistory::back();\n\n        // get the order and create a new order_Status_change\n        $order = new order($this->params['id']);\n\n        //set order type\n        if (isset($this->params['order_type_id'])) $order->order_type_id = $this->params['order_type_id'];\n\n        //only save the status change if it actually changed to something different\n        if ($order->order_status_id != $this->params['order_status_id']) {\n            if (empty($this->params['order_status_messages'])) {\n                $comment = $this->params['comment'];\n            } else {\n                $comment = $this->params['order_status_messages'];\n            }\n            // save the order status change\n            $change = new order_status_changes();\n            $change->from_status_id = $order->order_status_id;\n            $change->comment        = $comment;\n            $change->to_status_id   = $this->params['order_status_id'];\n            $change->orders_id      = $order->id;\n            $change->save();\n\n            // update the status of the order\n            $order->order_status_id = $this->params['order_status_id'];\n\n            // Save the message for future use if that is what the user wanted.\n            if (!empty($this->params['save_message']) && !empty($this->params['comment'])) {\n                $message       = new stdClass();\n                $message->body = $this->params['comment'];\n                $db->insertObject($message, 'order_status_messages');\n            }\n\n            // email the user if we need to\n            if (!empty($this->params['email_user'])) {\n                $email_addy = $order->billingmethod[0]->email;\n                if (!empty($email_addy)) {\n                    $from_status = $db->selectValue('order_status', 'title', 'id=' . $change->from_status_id);\n                    $to_status   = $db->selectValue('order_status', 'title', 'id=' . $change->to_status_id);\n\n                    if ($order->shippingmethod->carrier == 'UPS') {\n                        $carrierTrackingLink = \"http://wwwapps.ups.com/WebTracking/track?track=yes&trackNums=\";\n                    } elseif ($order->shippingmethod->carrier == 'FedEx') {\n                        $carrierTrackingLink = \"http://www.fedex.com/Tracking?action=track&tracknumbers=\";\n                    } elseif ($order->shippingmethod->carrier == 'USPS') {\n                        $carrierTrackingLink = \"https://tools.usps.com/go/TrackConfirmAction_input?qtc_tLabels1=\";\n                    }\n\n                    assign_to_template(array(\n                        'comment'         => $change->comment,\n                        'to_status'       => $to_status,\n                        'from_status'     => $from_status,\n                        'order'           => $order,\n                        'date'            => date(\"F j, Y, g:i a\"),\n                        'storename'       => ecomconfig::getConfig('storename'),\n                        'include_shipping'=> isset($this->params['include_shipping_info']) ? true : false,\n                        'tracking_link'    => $carrierTrackingLink . $order->shipping_tracking_number,\n                        'carrier'          => $order->shippingmethod->carrier\n                    ));\n\n                    $html = $template->render();\n                    $html .= ecomconfig::getConfig('ecomfooter');\n\n                    $mail = new expMail();\n                    $from = array(ecomconfig::getConfig('from_address') => ecomconfig::getConfig('from_name'));\n                    if (empty($from[0])) $from = SMTP_FROMADDRESS;\n                    $mail->quickSend(array(\n                        'html_message'=> $html,\n//                        'text_message'=> str_replace(\"<br>\", \"\\r\\n\", $template->render()),\n                        'text_message'=> expString::html2text($html),\n                        'to'          => array($email_addy => $order->billingmethod[0]->firstname . ' ' . $order->billingmethod[0]->lastname),\n                        'from'        => $from,\n                        'subject'     => 'The status of your order (#' . $order->invoice_id . ') has been updated on ' . ecomconfig::getConfig('storename') . '.'\n                    ));\n                } else {\n                    flash('error', gt('The email address was NOT send. An email address count not be found for this customer'));\n                }\n            }\n            flash('message', gt('Order Type and/or Status Updated.'));\n        } else {\n            flash('message', gt('Order Type and/or Status was not changed.'));\n        }\n\n        $order->save();\n        expHistory::back();\n    }\n\n    function emailCustomer() {\n        //eDebug($this->params,true);\n        global $db, $template, $user;\n\n        if (empty($this->params['id'])) expHistory::back();\n\n        // get the order\n        $order = new order($this->params['id']);\n\n        if (empty($this->params['order_status_messages'])) {\n            $email_message = $this->params['email_message'];\n        } else {\n            $email_message = $this->params['order_status_messages'];\n        }\n\n        // Save the message for future use if that is what the user wanted.\n        if (!empty($this->params['save_message']) && !empty($this->params['email_message'])) {\n            $message       = new stdClass();\n            $message->body = $this->params['email_message'];\n            $db->insertObject($message, 'order_status_messages');\n        }\n\n        $email_addys = explode(',', $this->params['to_addresses']); //$order->billingmethod[0]->email;\n        //eDebug($email_addy,true);\n        if (!empty($email_addys)) {\n            assign_to_template(array(\n                'message'=> $email_message\n            ));\n            $html = $template->render();\n            if (!empty($this->params['include_invoice'])) {\n                $html .= '<hr><br>';\n                $html .= renderAction(array('controller'=> 'order', 'action'=> 'show', 'view'=> 'email_invoice', 'id'=> $this->params['id'], 'printerfriendly'=> '1', 'no_output'=> 'true'));\n            } else {\n                $html .= ecomconfig::getConfig('ecomfooter');\n            }\n\n            //eDebug($html,true);\n            if (isset($this->params['from_address'])) {\n                if ($this->params['from_address'] == 'other') {\n                    $from = $this->params['other_from_address'];\n                } else {\n                    $from = $this->params['from_address'];\n                }\n            } else {\n                $from = ecomconfig::getConfig('from_address');\n            }\n            if (empty($from[0])) $from = SMTP_FROMADDRESS;\n\n            if (isset($this->params['email_subject'])) {\n                $email_subject = $this->params['email_subject'];\n            } else {\n                $email_subject = gt('Message from') . ' ' . ecomconfig::getConfig('storename') . ' ' . gt('about your order') . ' (#' . $order->invoice_id . ')';\n            }\n\n            $mail = new expMail();\n            //FIXME Unless you need each mail sent separately, you can now set 'to'=>$email_addys and let expMail send a single email to all addresses\n            foreach ($email_addys as $email_addy) {\n                $mail->quickSend(array(\n                    'html_message'=> $html,\n//                    'text_message'=> str_replace(\"<br>\", \"\\r\\n\", $template->render()),\n                    'text_message'=> expString::html2text($html),\n                    'to'          => $email_addy,\n                    'from'        => $from,\n                    'subject'     => $email_subject\n                ));\n            }\n            $emailed_to     = implode(',', $email_addys);\n\n            // manually add/attach an expSimpleNote to the order\n            $note           = new expSimpleNote();\n            $note->body     = \"<strong>[\" . gt('action') . \"]: \" . gt('Emailed message to') . \" \" . $emailed_to . \":</strong>\" . $email_message;\n            $note->approved = 1;\n            $note->name     = $user->firstname . \" \" . $user->lastname;\n            $note->email    = $user->email;\n\n            $note->save();\n            $note->refresh();\n//            $noteObj                   = new stdClass();\n//            $noteObj->expsimplenote_id = $note->id;\n//            $noteObj->content_id       = $order->id;\n//            $noteObj->content_type     = 'order';\n//            $db->insertObject($noteObj, 'content_expSimpleNote');\n            $note->attachNote('order', $order->id);\n\n            //eDebug($note,true);\n        } else {\n            flash('error', gt('The email was NOT sent. An email address was not found for this customer'));\n            expHistory::back();\n        }\n\n        flash('message', gt('Email sent.'));\n        expHistory::back();\n    }\n\n    function ordersbyuser() {\n        global $user;\n\n        // if the user isn't logged in flash an error msg\n        if (!$user->isLoggedIn()) expQueue::flashAndFlow('error', gt('You must be logged in to view past orders.'));\n\n        expHistory::set('viewable', $this->params);\n        $page = new expPaginator(array(\n            'model'     => 'order',  //FIXME we should also be getting the order status name\n            'where'     => 'purchased > 0 AND user_id=' . $user->id,\n            'limit'     => 10,\n            'order'     => 'purchased',\n            'dir'       => 'DESC',\n            'page'      => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'=> $this->params['controller'],\n            'action'    => $this->params['action'],\n            'columns'   => array(\n                gt('Date Purchased')=> 'purchased',\n                gt('Invoice #')     => 'invoice_id',\n            )\n        ));\n        assign_to_template(array(\n            'page'=> $page\n        ));\n\n    }\n\n    function metainfo() {\n        global $router;\n\n        if (empty($router->params['action'])) return false;\n\n        // figure out what metadata to pass back based on the action\n        // we are in.\n        $action   = $router->params['action'];\n        $metainfo = array('title'=>'', 'keywords'=>'', 'description'=>'', 'canonical'=> '', 'noindex' => true, 'nofollow' => true);\n        $storename = ecomconfig::getConfig('storename');\n        switch ($action) {\n            case 'myOrder':\n            case 'show':\n            case 'showByTitle':\n                if (!empty($router->params['id'])) {\n                    $order    = new order($router->params['id']);\n                } elseif (!empty($router->params['invoice'])) {\n                    $order = $this->order->find('first', 'invoice_id=' . $router->params['invoice']);\n                } else {\n                    $order    = $this->order;\n                }\n                $metainfo['title']       = gt('Viewing Order') . ' #' . $order->invoice_id . ' - ' . $storename;\n                $metainfo['keywords']    = empty($order->meta_keywords) ? SITE_KEYWORDS : $order->meta_keywords;\n                $metainfo['description'] = empty($order->meta_description) ? SITE_DESCRIPTION : $order->meta_description;\n//                $metainfo['canonical'] = empty($order->canonical) ? $router->plainPath() : $order->canonical;\n//                $metainfo['noindex'] = empty($order->meta_noindex) ? false : $order->meta_noindex;\n//                $metainfo['nofollow'] = empty($order->meta_nofollow) ? false : $order->meta_nofollow;\n                break;\n            case 'showall':\n            case 'ordersbyuser':\n            default:\n                $metainfo['title']       = gt(\"Order Management\") . \" - \" . $storename;\n                $metainfo['keywords']    = SITE_KEYWORDS;\n                $metainfo['description'] = SITE_DESCRIPTION;\n        }\n\n        return $metainfo;\n    }\n\n    function captureAuthorization() {\n        //eDebug($this->params,true);\n        $order = new order($this->params['id']);\n        /*eDebug($this->params);\n        //eDebug($order,true);*/\n        //eDebug($order,true);\n        //$billing = new billing();\n\n        //eDebug($billing, true);\n        //$billing->calculator = new $calcname($order->billingmethod[0]->billingcalculator_id);\n        $calc         = $order->billingmethod[0]->billingcalculator->calculator;\n        $calc->config = $order->billingmethod[0]->billingcalculator->config;\n\n        //$calc = new $calc-\n        //eDebug($calc,true);\n        if (!method_exists($calc, 'delayed_capture')) {\n            flash('error', gt('The Billing Calculator does not support delayed capture'));\n            expHistory::back();\n        }\n\n        $result = $calc->delayed_capture($order->billingmethod[0], $this->params['capture_amt'], $order);\n\n        if (empty($result->errorCode)) {\n            flash('message', gt('The authorized payment was successfully captured'));\n            expHistory::back();\n\n        } else {\n            flash('error', gt('An error was encountered while capturing the authorized payment.') . '<br /><br />' . $result->message);\n            expHistory::back();\n        }\n    }\n\n    function voidAuthorization() {\n        $order   = new order($this->params['id']);\n        $billing = $order->billingmethod[0];\n\n        $calc         = $order->billingmethod[0]->billingcalculator->calculator;\n        $calc->config = $order->billingmethod[0]->billingcalculator->config;\n\n        if (!method_exists($calc, 'void_transaction')) {\n            flash('error', gt('The Billing Calculator does not support void'));\n            expHistory::back();\n        }\n\n        $result = $calc->void_transaction($order->billingmethod[0], $order);\n\n        if (empty($result->errorCode)) {\n            flash('message', gt('The transaction has been successfully voided'));\n            expHistory::back();\n\n        } else {\n            flash('error', gt('An error was encountered while voiding the authorized payment.') . '<br /><br />' . $result->message);\n            expHistory::back();\n        }\n    }\n\n    function creditTransaction() {\n        $order   = new order($this->params['id']);\n        $billing = new billing($this->params['id']);\n        //eDebug($this->params,true);\n        $result = $billing->calculator->credit_transaction($billing->billingmethod, $this->params['capture_amt'],$order);\n\n        if ($result->errorCode == '0') {\n            flash('message', gt('The transaction has been credited'));\n            expHistory::back();\n\n        } else {\n            flash('error', gt('An error was encountered while capturing the authorized payment.') . '<br /><br />' . $result->message);\n            expHistory::back();\n        }\n    }\n\n    function edit_payment_info() {\n        //$order = new order($this->params['id']);\n        $billing = new billing($this->params['id']);\n        $opts    = expUnserialize($billing->billingmethod->billing_options);  //FIXME already unserialized???\n        //eDebug($billing);\n//        eDebug($opts);\n        assign_to_template(array(\n            'orderid'=> $this->params['id'],\n            'opts'   => $opts,  //FIXME credit card doesn't have a result\n            'billing_cost' => $billing->billingmethod->billing_cost,\n            'transaction_state' => $billing->billingmethod->transaction_state\n        ));\n    }\n\n    function save_payment_info() {\n        //need to save billing methods and billing options\n        //$order = new order($this->params['id']);\n        //eDebug($this->params, true);\n        $res_obj = new stdClass();\n        foreach ($this->params['result'] as $resultKey=> $resultItem) {\n            $res_obj->$resultKey = $resultItem;\n        }\n//        $res     = serialize($res_obj);\n        $billing = new billing($this->params['id']);\n        // eDebug($billing);\n        $billingmethod      = $billing->billingmethod;\n        $billingtransaction = $billingmethod->billingtransaction[0];\n\n        // update billing method\n        $billingmethod->billing_cost           = $this->params['billing_cost'];\n        $billingmethod->transaction_state      = $this->params['transaction_state'];\n        $bmopts                         = expUnserialize($billingmethod->billing_options);\n        $bmopts->result                 = $res_obj;\n        $billingmethod->billing_options = serialize($bmopts);\n//        if (!empty($this->params['result']['payment_status']))\n//            $billingmethod->transaction_state = $this->params['result']['payment_status'];  //FIXME should this be discrete??\n        $billingmethod->save();\n\n        // add new billing transaction\n        $billingtransaction->billing_cost                = $this->params['billing_cost'];\n        $billingtransaction->transaction_state           = $this->params['transaction_state'];\n        $btopts                              = expUnserialize($billingtransaction->billing_options);\n        $btopts->result                      = $res_obj;\n        $billingtransaction->billing_options = serialize($btopts);\n//        if (!empty($this->params['result']['payment_status']))\n//            $billingtransaction->transaction_state = $this->params['result']['payment_status'];\n        $billingtransaction->id = null;  // force a new record by erasing the id, easy method to copy record\n//        $order = new order($this->params['id']);\n//        $billingtransaction->billing_cost = $order->grand_total;  //FIXME should it always be the grand total???\n        $billingtransaction->save();\n\n//        flashAndFlow('message', gt('Payment info updated.'));\n        flash('message', gt('Payment info updated.'));\n        redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $this->params['id']));\n    }\n\n    function edit_shipping_method() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request.  Order invalid.'));\n        $order = new order($this->params['id']);\n        $s     = array_pop($order->shippingmethods);  //FIXME only getting 1st one and then removing it\n        $sm    = new shippingmethod($s->id);\n        //eDebug($sm);\n        assign_to_template(array(\n            'orderid' => $this->params['id'],\n            'shipping'=> $sm\n        ));\n    }\n\n    function save_shipping_method() {\n        if (!isset($this->params['id']) || !isset($this->params['sid']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $sm               = new shippingmethod($this->params['sid']);\n        $sm->option_title = $this->params['shipping_method_title'];\n        $sm->carrier      = $this->params['shipping_method_carrier'];\n        $sm->save();\n        flashAndFlow('message', gt('Shipping method updated.'));\n    }\n\n    function edit_parcel() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $sm = new shippingmethod($this->params['id']);\n        $sm->attachCalculator();  // add calculator object\n        assign_to_template(array(\n            'shipping'=> $sm\n        ));\n    }\n\n    function save_parcel() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        if (!isset($this->params['in_box']) || !isset($this->params['qty'])) {\n            flashAndFlow('notice', gt('Nothing was included in the shipping package!'));\n        } else {\n            $sm = new shippingmethod($this->params['id']);\n            $sm->attachCalculator();\n//            $sm_new = clone($sm);  // prepare for another 'package' if needed since we didn't place everything in this one\n//            $sm_new->id = null;\n//            $sm_new->orderitem = array();\n            //FIXME for now multiple shipping methods will crash ecom with shipping->__construct()\n            foreach ($sm->orderitem as $key => $oi) {\n                if (!array_key_exists($oi->id, $this->params['in_box'])) {\n                    // one of the items by type is not in this package and needs to be moved to another package\n//                    $tmp = 1;\n//                    $sm_new->update();  // we don't need to actually create a new shippingmethod until needed\n//                    $sm->orderitem[$key]->shippingmethods_id = $sm_new->id;\n//                    $sm->orderitem[$key]->update();\n//                    unset($sm->orderitem[$key]);\n                    //NOTE $sm_new->update(); ???\n                } else {\n                    if ($oi->quantity != $this->params['qty'][$oi->id]) {\n                        // one of the items by quantity is not in this package and remaining items need to be moved another package\n//                        $tmp = 1;\n//                        $new_quantity = $oi->quantity - $this->params['qty'][$oi->id];\n//                        $sm->orderitem[$key]->quantity = $this->params['qty'][$oi->id];  // adjust to new quantity\n//                        $sm->orderitem[$key]->update();\n//                        $sm_new->update();  // we don't need to actually create a new shippingmethod until needed\n//                        $oi->id = null;  // create a new orderitem copy\n//                        $oi->shippingmethods_id = $sm_new->id;\n//                        $oi->quantity = $new_quantity;\n//                        $oi->update();\n                        //NOTE $sm_new->update(); ???\n                    }\n                }\n            }\n            // update $sm with the passed $this->params (package data)\n            $sm->update($this->params);  //NOTE will this update assoc orderitems???\n            $msg = $sm->calculator->createLabel($sm);\n            if (!is_string($msg)) {\n                flashAndFlow('message', gt('Shipping package updated.'));\n            } else {\n                expHistory::back();\n            }\n        }\n    }\n\n    function edit_label() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $sm = new shippingmethod($this->params['id']);\n        $sm->attachCalculator();\n        $method = explode(':', $sm->option);\n//FIXME check for existing rate, if not get next cheapest? (based on predefined package?)\n        assign_to_template(array(\n            'shipping'=> $sm,\n            'cost' => $sm->shipping_options['shipment_rates'][$method[0]][$method[1]]['cost']\n        ));\n    }\n\n    function save_label() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $sm = new shippingmethod($this->params['id']);\n        $sm->attachCalculator();\n        $msg = $sm->calculator->buyLabel($sm);\n//        $sm->refresh();  //FIXME updated with new options we may need to take action on like tracking number?\n//        $order->shipping_tracking_number = $sm->shipping_options['shipment_tracking_number'];\n        if (!is_string($msg)) {\n            flashAndFlow('message', gt('Shipping label purchased.'));\n        } else {\n            expHistory::back();\n        }\n    }\n\n    function download_label() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $sm = new shippingmethod($this->params['id']);\n        $sm->attachCalculator();\n        $label = $sm->calculator->getLabel($sm);\n        expHistory::back();\n    }\n\n    function delete_label() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $sm = new shippingmethod($this->params['id']);\n        $sm->attachCalculator();\n        $msg = $sm->calculator->cancelLabel($sm);\n        // also need to cancel the pickup if created/purchased\n        if (!is_string($msg) && ($sm->shipping_options['pickup_status'] == 'created' || $sm->shipping_options['pickup_status'] == 'purchased')) {\n            $msg = $sm->calculator->cancelPickup($sm);\n            if (!is_string($msg)) {\n                flashAndFlow('message', gt('Shipping label and pickup cancelled and refunded.'));\n            }\n        } else {\n            if (!is_string($msg)) {\n                flashAndFlow('message', gt('Shipping label cancelled and refunded.'));\n            }\n        }\n        expHistory::back();\n    }\n\n    function edit_pickup()\n    {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $sm = new shippingmethod($this->params['id']);\n        $sm->attachCalculator();\n        assign_to_template(array(\n            'shipping'=> $sm,\n        ));\n    }\n\n    function edit_pickup2() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $this->params['pickupdate'] = strtotime($this->params['pickupdate']);\n        $this->params['pickupenddate'] = strtotime($this->params['pickupenddate']);\n        $sm = new shippingmethod($this->params['id']);\n        $sm->attachCalculator();\n        $pickup = $sm->calculator->createPickup($sm, $this->params['pickupdate'], $this->params['pickupenddate'], $this->params['instructions']);\n        $sm->refresh();\n        $pickup_rates = array();\n        foreach ($sm->shipping_options['pickup_rates'] as $pu_rate) {\n            $pickup_rates[$pu_rate['id']] = $pu_rate['id'] . ' - ' . expCore::getCurrency($pu_rate['cost']);\n        }\n        assign_to_template(array(\n            'shipping'=> $sm,\n            'rates' => $pickup_rates\n        ));\n    }\n\n    function save_pickup() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $sm = new shippingmethod($this->params['id']);\n        $sm->attachCalculator();\n        //FIXME should we add the params to the $sm->shipping_options, or pass them??\n        $msg = $sm->calculator->buyPickup($sm, $this->params['pickuprate']);\n        if (!is_string($msg)) {\n            flashAndFlow('message', gt('Package pickup ordered.'));\n        } else {\n            expHistory::back();\n        }\n    }\n\n    function delete_pickup() {\n        if (!isset($this->params['id']))\n            flashAndFlow('error', gt('Unable to process request. Order invalid.'));\n        $sm = new shippingmethod($this->params['id']);\n        $sm->attachCalculator();\n        $msg = $sm->calculator->cancelPickup($sm);\n        if (!is_string($msg)) {\n            flashAndFlow('message', gt('Package pickup cancelled.'));\n        } else {\n            expHistory::back();\n        }\n    }\n\n    function createReferenceOrder() {\n        if (!isset($this->params['id'])) {\n            flashAndFlow('error', gt('Unable to process request. Invalid order number.'));\n//            expHistory::back();\n        }\n        $order = new order($this->params['id']);\n        assign_to_template(array(\n            'order'=> $order\n        ));\n    }\n\n    function save_reference_order() {\n//        global $user;\n\n        //eDebug($this->params,true);\n        $order = new order($this->params['original_orderid']);\n        //eDebug($order,true);\n        //x\n        $newOrder                  = new order();\n        $newOrder->order_status_id = $this->params['order_status_id'];\n        $newOrder->order_type_id   = $this->params['order_type_id'];\n        //$newOrder->order_references = $order->id;\n        $newOrder->reference_id    = $order->id;\n        $newOrder->user_id         = $order->user_id;\n        $newOrder->purchased       = time();\n        $newOrder->updated         = time();\n        $newOrder->invoice_id      = $newOrder->getInvoiceNumber();\n        $newOrder->orderitem       = array();\n        $newOrder->subtotal        = $this->params['subtotal'];\n        $newOrder->total_discounts = $this->params['total_discounts'];\n        $newOrder->tax             = $this->params['tax'];\n        $newOrder->shipping_total  = $this->params['shipping_total'];\n        $newOrder->surcharge_total = $this->params['surcharge_total'];\n\n        if ($this->params['autocalc'] == true) {\n            $newOrder->grand_total = ($newOrder->subtotal - $newOrder->total_discounts) + $newOrder->tax + $newOrder->shipping_total + $newOrder->surcharge_total;\n        } else {\n            $newOrder->grand_total = round($this->params['grand_total'], 2);\n        }\n        $newOrder->save();\n        $newOrder->refresh();\n\n        // save initial order status\n        $change = new order_status_changes();\n//        $change->from_status_id = null;\n        $change->to_status_id   = $newOrder->order_status_id;\n        $change->orders_id      = $newOrder->id;\n        $change->save();\n\n        $tObj                             = new stdClass();\n        $tObj->result                     = new stdClass();\n        $tObj->result->errorCode          = 0;\n        $tObj->result->message            = \"Reference Order Pending\";\n        $tObj->result->PNREF              = \"Pending\";\n        $tObj->result->authorization_code = \"Pending\";\n        $tObj->result->AVSADDR            = \"Pending\";\n        $tObj->result->AVSZIP             = \"Pending\";\n        $tObj->result->CVV2MATCH          = \"Pending\";\n        $tObj->result->traction_type      = \"Pending\";\n        $tObj->result->payment_status     = \"Pending\";\n\n        $newBillingMethod                       = $order->billingmethod[0];\n        $newBillingMethod->id                   = null;\n        $newBillingMethod->orders_id            = $newOrder->id;\n//        $newBillingMethod->billingcalculator_id = 6;\n        $newBillingMethod->billingcalculator_id = billingcalculator::getDefault();\n        $newBillingMethod->billing_cost         = 0;\n        $newBillingMethod->transaction_state    = 'authorization pending';\n        $newBillingMethod->billing_options      = serialize($tObj);\n        $newBillingMethod->save();\n\n        //eDebug(expUnserialize($order->billingmethod[0]->billing_options));\n        //eDebug(expUnserialize($order->billingmethod[0]->billingtransaction[0]->billing_options),true);\n\n        $newBillingTransaction                       = new billingtransaction();\n//        $newBillingTransaction->billingcalculator_id = 6; ///setting to manual/passthru\n        $newBillingTransaction->billingcalculator_id = billingcalculator::getDefault();\n        $newBillingTransaction->billing_cost         = 0;\n        $newBillingTransaction->billingmethods_id    = $newBillingMethod->id;\n        $newBillingTransaction->transaction_state    = 'authorization pending';\n\n        $newBillingTransaction->billing_options = serialize($tObj);\n        $newBillingTransaction->save();\n\n        $sid                              = $order->orderitem[0]->shippingmethods_id;\n        $newShippingMethod                = $order->shippingmethods[$sid];\n        $newShippingMethod->id            = null;\n        $newShippingMethod->shipping_cost = 0;\n        $newShippingMethod->save();\n        $newShippingMethod->refresh();\n\n        foreach ($this->params['oi'] as $oikey=> $oi) {\n            //eDebug($oikey);\n            $newOi                          = new orderitem($oikey);\n            $newOi->id                      = null;\n            $newOi->quantity                = $this->params['quantity'][$oikey];\n            $newOi->orders_id               = $newOrder->id;\n            $newOi->products_name           = $this->params['products_name'][$oikey];\n            $newOi->products_price          = $this->params['products_price'][$oikey];\n            $newOi->products_price_adjusted = $this->params['products_price'][$oikey];\n            //$newOi->products_tax = 0;\n            $newOi->shippingmethods_id = $newShippingMethod->id;\n            $newOi->save();\n        }\n\n        $newOrder->shippingmethod = $newShippingMethod;\n        $newOrder->billingmethod = $newBillingMethod;\n        $newOrder->update();  //FIXME do we need to do this?\n\n        flash('message', gt('Reference Order #') . $newOrder->invoice_id . \" \" . gt(\"created successfully.\"));\n        redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $newOrder->id));\n    }\n\n    function create_new_order() {\n//        $order = new order();\n//        assign_to_template(array(\n//            'order'=> $order\n//        ));\n    }\n\n    function save_new_order() {\n        //eDebug($this->params);\n        /*addresses_id\n        customer_type = 1 //new\n        customer_type = 2 //existing Internal\n        customer_type = 3 //existing external*/\n//        global $user, $db;\n        //eDebug($this->params,true);\n        //$order = new order($this->params['original_orderid']);\n        //eDebug($order,true);\n\n        $newAddy = new address();\n        if ($this->params['customer_type'] == 1) {\n            //blank order\n            $newAddy->save(false);\n        } else if ($this->params['customer_type'] == 2) {\n            //internal customer\n            $newAddy = new address($this->params['addresses_id']);\n        } else if ($this->params['customer_type'] == 3) {\n            //other customer\n            $otherAddy = new external_address($this->params['addresses_id']);\n            $newAddy->user_id      = $otherAddy->user_id;\n            $newAddy->firstname    = $otherAddy->firstname;\n            $newAddy->lastname     = $otherAddy->lastname;\n            $newAddy->organization = $otherAddy->organization;\n            $newAddy->address1     = $otherAddy->address1;\n            $newAddy->address2     = $otherAddy->address2;\n            $newAddy->city         = $otherAddy->city;\n            $newAddy->state        = $otherAddy->state;\n            $newAddy->zip          = $otherAddy->zip;\n            $newAddy->phone        = $otherAddy->phone;\n            $newAddy->email        = $otherAddy->email;\n            $newAddy->save();\n        }\n\n        $newOrder                  = new order();\n        $newOrder->order_status_id = $this->params['order_status_id'];\n        $newOrder->order_type_id   = $this->params['order_type_id'];\n        //$newOrder->order_references = $order->id;\n        $newOrder->reference_id    = 0;\n        $newOrder->user_id         = $newAddy->user_id;\n        $newOrder->purchased       = time();\n        $newOrder->updated         = time();\n        $newOrder->invoice_id      = $newOrder->getInvoiceNumber();\n        $newOrder->orderitem       = array();\n        $newOrder->subtotal        = 0;\n        $newOrder->total_discounts = 0;\n        $newOrder->tax             = 0;\n        $newOrder->shipping_total  = 0;\n        $newOrder->surcharge_total = 0;\n        $newOrder->grand_total     = 0;\n        $newOrder->save();\n        $newOrder->refresh();\n\n        // save initial order status\n        $change = new order_status_changes();\n//        $change->from_status_id = null;\n        $change->to_status_id   = $newOrder->order_status_id;\n        $change->orders_id      = $newOrder->id;\n        $change->save();\n\n        $tObj                             = new stdClass();\n        $tObj->result                     = new stdClass();\n        $tObj->result->errorCode          = 0;\n        $tObj->result->message            = \"Reference Order Pending\";\n        $tObj->result->PNREF              = \"Pending\";\n        $tObj->result->authorization_code = \"Pending\";\n        $tObj->result->AVSADDR            = \"Pending\";\n        $tObj->result->AVSZIP             = \"Pending\";\n        $tObj->result->CVV2MATCH          = \"Pending\";\n        $tObj->result->traction_type      = \"Pending\";\n        $tObj->result->payment_status     = \"Pending\";\n\n        $newBillingMethod                       = new billingmethod();\n        $newBillingMethod->addresses_id         = $newAddy->id;\n        $newBillingMethod->orders_id            = $newOrder->id;\n//        $newBillingMethod->billingcalculator_id = 6;\n        $newBillingMethod->billingcalculator_id = billingcalculator::getDefault();\n        $newBillingMethod->billing_cost         = 0;\n        $newBillingMethod->transaction_state    = 'authorization pending';\n        $newBillingMethod->billing_options      = serialize($tObj);\n        $newBillingMethod->firstname            = $newAddy->firstname;\n        $newBillingMethod->lastname             = $newAddy->lastname;\n        $newBillingMethod->organization         = $newAddy->organization;\n        $newBillingMethod->address1             = $newAddy->address1;\n        $newBillingMethod->address2             = $newAddy->address2;\n        $newBillingMethod->city                 = $newAddy->city;\n        $newBillingMethod->state                = $newAddy->state;\n        $newBillingMethod->zip                  = $newAddy->zip;\n        $newBillingMethod->phone                = $newAddy->phone;\n        $newBillingMethod->email                = $newAddy->email;\n        $newBillingMethod->save();\n\n        //eDebug(expUnserialize($order->billingmethod[0]->billing_options));\n        //eDebug(expUnserialize($order->billingmethod[0]->billingtransaction[0]->billing_options),true);\n\n        $newBillingTransaction                       = new billingtransaction();\n//        $newBillingTransaction->billingcalculator_id = 6; ///setting to manual/passthru\n        $newBillingTransaction->billingcalculator_id = billingcalculator::getDefault();\n        $newBillingTransaction->billing_cost         = 0;\n        $newBillingTransaction->billingmethods_id    = $newBillingMethod->id;\n        $newBillingTransaction->transaction_state    = 'authorization pending';\n        $newBillingTransaction->billing_options      = serialize($tObj);\n        $newBillingTransaction->save();\n\n        $newShippingMethod                        = new shippingmethod();\n        $newShippingMethod->shipping_cost         = 0;\n//        $newShippingMethod->shippingcalculator_id = $db->selectValue('shippingcalculator', 'id', 'is_default=1');\n        $newShippingMethod->shippingcalculator_id = shippingcalculator::getDefault();\n        $newShippingMethod->addresses_id = $newAddy->id;\n        $newShippingMethod->firstname    = $newAddy->firstname;\n        $newShippingMethod->lastname     = $newAddy->lastname;\n        $newShippingMethod->organization = $newAddy->organization;\n        $newShippingMethod->address1     = $newAddy->address1;\n        $newShippingMethod->address2     = $newAddy->address2;\n        $newShippingMethod->city         = $newAddy->city;\n        $newShippingMethod->state        = $newAddy->state;\n        $newShippingMethod->zip          = $newAddy->zip;\n        $newShippingMethod->phone        = $newAddy->phone;\n        $newShippingMethod->email        = $newAddy->email;\n        $newShippingMethod->save();\n        $newShippingMethod->refresh();\n\n        //FIXME add a fake item?\n//        $oi                     = new orderitem();\n//        $oi->orders_id          = $newOrder->id;\n//        $oi->product_id         = 0;\n//        $oi->product_type       = 'product';\n//        $oi->products_name      = \"N/A\";\n//        $oi->products_model     = \"N/A\";\n//        $oi->products_price     = 0;\n//        $oi->shippingmethods_id = $newShippingMethod->id;\n//        $oi->save(false);\n\n        $newOrder->shippingmethod = $newShippingMethod;\n        $newOrder->billingmethod = $newBillingMethod;\n        $newOrder->update();\n\n        flash('message', gt('New Order #') . $newOrder->invoice_id . \" \" . gt(\"created successfully.\"));\n        if (empty($this->params['no_redirect'])) {\n            redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $newOrder->id));\n        } else {\n            return $newOrder->id;\n        }\n    }\n\n    function edit_address() {\n        //if $type = 'b' - business\n        //if $type = 's' - shipping\n        //addresses_id\n        $order = new order($this->params['id']);\n        $same  = false;\n\n        $sm = array_pop($order->shippingmethods);  //FIXME only getting 1st one and then removing it\n        //$bm = array_pop($order->billingmethods);\n\n        //eDebug($sm->addresses_id);\n        //eDebug($order->billingmethod[0]->addresses_id);\n        if ($sm->addresses_id == $order->billingmethod[0]->addresses_id) {\n            $same = true;\n            // echo \"Yes\";\n            //$addy = new address($sm->addresses_id);\n        }\n\n        if ($this->params['type'] == 'b') {\n            $type = 'billing';\n            $addy = new address($order->billingmethod[0]->addresses_id);\n        } else if ($this->params['type'] == 's') {\n            $type = 'shipping';\n            $addy = new address($sm->addresses_id);\n        }\n        /* eDebug($this->params);\n        eDebug($addy);\n        eDebug($order,true);*/\n        $billingmethod = new billingmethod($this->params['id']);\n        //eDebug($billingmethod,true);\n        //$opts = expUnserialize($billing->billingmethod->billing_options);\n        //eDebug($billing);\n        //eDebug($opts);\n        assign_to_template(array(\n            'orderid'=> $this->params['id'],\n            'record' => $addy,\n            'same'   => $same,\n            'type'   => $type\n        ));\n    }\n\n    function save_address() {\n        global $db;\n\n        $order          = new order($this->params['orderid']);\n        $billing        = new billing($this->params['orderid']);\n        $s              = array_pop($order->shippingmethods);  //FIXME only getting 1st one and then removing it\n        $shippingmethod = new shippingmethod($s->id);\n\n        //eDebug($order);\n        //eDebug($this->params,true);\n        //eDebug($shippingmethod);\n        $billingmethod = $billing->billingmethod;\n        /*\n        eDebug($order);\n        eDebug($shippingmethod);\n        eDebug($billingmethod);*/\n\n        if ($this->params['save_option'] == 0) {\n            //update existing\n            //echo \"Update\";\n            $addy = new address($this->params['addyid']);\n        } else if ($this->params['save_option'] == 1) {\n            //create new\n            //echo \"New\";\n            $oldaddy       = new address($this->params['addyid']);\n            $addy          = new address();\n            $addy->user_id = $oldaddy->user_id;\n        }\n\n        //eDebug($addy,true);\n\n        foreach ($this->params['address'] as $key=> $val) {\n            if ($key == 'address_country_id') {\n                $key = 'country';\n            }\n            if ($key == 'address_region_id') {\n                $key = 'state';\n            }\n            $addy->$key = $val;\n            if (isset($billingmethod->$key)) $billingmethod->$key = $val;\n            if (isset($shippingmethod->$key)) $shippingmethod->$key = $val;\n        }\n        $addy->is_billing  = 0;\n        $addy->is_shipping = 0;\n        $addy->save();\n        $addy->refresh();\n\n        if ($this->params['type'] == 'billing' || ($this->params['same'] == true && $this->params['save_option'] == 0)) {\n            //echo \"Billing\";\n            $billingmethod->addresses_id = $addy->id;\n            $billingmethod->save();\n            $addy->is_billing = 1;\n        }\n\n        if ($this->params['type'] == 'shipping' || ($this->params['same'] == true && $this->params['save_option'] == 0)) {\n            //eDebug(\"Shipping\",true);\n            $shippingmethod->addresses_id = $addy->id;\n            $shippingmethod->save();\n            $addy->is_shipping = 1;\n        }\n\n        $addy->save();\n        if ($addy->is_default) $db->setUniqueFlag($addy, 'addresses', 'is_default', 'user_id=' . $addy->user_id);\n\n        //eDebug($shippingmethod,true);\n//        flashAndFlow('message', gt('Address updated.'));\n        flash('message', gt('Address updated.'));\n        redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $this->params['id']));\n    }\n\n    function edit_order_item() {\n        $oi = new orderitem($this->params['id'], true, true);\n        if (empty($oi->id)) {\n            flash('error', gt('Order item doesn\\'t exist.'));\n            expHistory::back();\n        }\n        $oi->user_input_fields = expUnserialize($oi->user_input_fields);\n        $params['options'] = $oi->opts;\n        $params['user_input_fields'] = $oi->user_input_fields;\n        $oi->product           = new product($oi->product->id, true, true);\n        if ($oi->product->parent_id != 0) {\n            $parProd = new product($oi->product->parent_id);\n            //$oi->product->optiongroup = $parProd->optiongroup;\n            $oi->product = $parProd;\n        }\n        //FIXME we don't use selectedOpts?\n//        $oi->selectedOpts = array();\n//        if (!empty($oi->opts)) {\n//            foreach ($oi->opts as $opt) {\n//                $option = new option($opt[0]);\n//                $og     = new optiongroup($option->optiongroup_id);\n//                if (!isset($oi->selectedOpts[$og->id]) || !is_array($oi->selectedOpts[$og->id]))\n//                    $oi->selectedOpts[$og->id] = array($option->id);\n//                else\n//                    array_push($oi->selectedOpts[$og->id], $option->id);\n//            }\n//        }\n        //eDebug($oi->selectedOpts);\n\n        assign_to_template(array(\n            'oi' => $oi,\n            'params' => $params\n        ));\n    }\n\n    function delete_order_item() {\n        $order = new order($this->params['orderid']);\n        if (count($order->orderitem) <= 1) {\n            flash('error', gt('You may not delete the only item on an order.  Please edit this item, or add another item before removing this one.'));\n            expHistory::back();\n        }\n\n        $oi = new orderitem($this->params['id']);\n        $oi->delete();\n\n        $s  = array_pop($order->shippingmethods);  //FIXME only getting 1st one and then removing it\n        $sm = new shippingmethod($s->id);\n\n        $shippingCalc = new shippingcalculator($sm->shippingcalculator_id);\n        $calcName     = $shippingCalc->calculator_name;\n        $calculator   = new $calcName($shippingCalc->id);\n        $pricelist = $calculator->getRates($order);\n\n        foreach ($pricelist as $rate) {\n            if ($rate['id'] == $sm->option) {\n                $sm->shipping_cost = $rate['cost'];\n            }\n        }\n        $sm->save();\n\n        $order->refresh();\n        $order->calculateGrandTotal();\n        $order->save();\n\n//        flashAndFlow('message', gt('Order item removed and order totals updated.'));\n        flash('message', gt('Order item removed and order totals updated.'));\n        if (empty($this->params['no_redirect'])) redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $this->params['orderid']));\n    }\n\n    function save_order_item() {\n        if (!empty($this->params['id'])) {\n            $oi = new orderitem($this->params['id']);\n        } else {\n            $oi = new orderitem($this->params);\n        }\n        //eDebug($this->params);\n\n        /*eDebug($oi);\n        eDebug(expUnserialize($oi->options));\n        eDebug(expUnserialize($oi->user_input_fields),true);*/\n        if (!empty($this->params['products_price'])) $oi->products_price = expUtil::currency_to_float($this->params['products_price']);\n        $oi->quantity       = $this->params['quantity'];\n        if (!empty($this->params['products_name'])) $oi->products_name  = $this->params['products_name'];\n\n        if ($oi->product->parent_id != 0) {\n            $oi->product = new product($oi->product->parent_id, true, false);\n        } else {\n            //reattach the product so we get the option fields and such\n            $oi->product = new product($oi->product->id, true, false);\n        }\n\n        if (isset($this->params['product_status_id'])) {\n            $ps = new product_status($this->params['product_status_id']);\n            $oi->products_status = $ps->title;\n        }\n\n        $options = array();\n        foreach ($oi->product->optiongroup as $og) {\n            $isOptionEmpty = true;\n            if (!empty($this->params['options'][$og->id])) {\n                foreach ($this->params['options'][$og->id] as $opt) {\n                    if (!empty($opt)) $isOptionEmpty = false;\n                }\n            }\n            if (!$isOptionEmpty) {\n                foreach ($this->params['options'][$og->id] as $opt_id) {\n                    $selected_option = new option($opt_id);\n                    $cost            = $selected_option->modtype == '$' ? $selected_option->amount : $this->getBasePrice() * ($selected_option->amount * .01);\n                    $cost            = $selected_option->updown == '+' ? $cost : $cost * -1;\n                    $options[]       = array($selected_option->id, $selected_option->title, $selected_option->modtype, $selected_option->updown, $selected_option->amount);\n                }\n            }\n        }\n\n        eDebug($this->params);\n        //eDebug($oi,true);\n\n        $user_input_info = array();\n        //check user input fields\n        //$this->user_input_fields = expUnserialize($this->user_input_fields);\n        //eDebug($this,true);\n        if (!empty($oi->product->user_input_fields)) foreach ($oi->product->user_input_fields as $uifkey=> $uif) {\n            /*if ($uif['is_required'] || (!$uif['is_required'] && strlen($params['user_input_fields'][$uifkey]) > 0))\n            {\n                if (strlen($params['user_input_fields'][$uifkey]) < $uif['min_length'])\n                {\n                    //flash('error', 'test');\n                    //redirect_to(array('controller'=>cart, 'action'=>'displayForm', 'form'=>'addToCart', 'product_id'=>$this->id, 'product_type'=>$this->product_type));\n                    $params['error'] .= $uif['name'].' field has a minimum requirement of ' . $uif['min_length'] . ' characters.<br/>';\n\n                }else if (strlen($params['user_input_fields'][$uifkey]) > $uif['max_length'] && $uif['max_length'] > 0)\n                {\n                    //flash('error', );\n                    //redirect_to(array('controller'=>cart, 'action'=>'displayForm', 'form'=>'addToCart', 'product_id'=>$this->id, 'product_type'=>$this->product_type));\n                    $params['error'] .= $uif['name'].' field has a maximum requirement of ' . $uif['max_length'] . ' characters.<br/>';\n                }\n            }*/\n            $user_input_info[] = array($uif['name']=> $this->params['user_input_fields'][$uifkey]);\n        }\n        //eDebug($options);\n        //eDebug($user_input_info,true);\n\n        $oi->options           = serialize($options);\n        $oi->user_input_fields = serialize($user_input_info);\n        //eDebug($oi);\n        $oi->save();\n        $oi->refresh();\n        //eDebug($oi,true);\n\n        $order = new order($oi->orders_id);\n        $order->calculateGrandTotal();\n\n        $s = array_pop($order->shippingmethods);  //FIXME only getting 1st one and thenremoving it\n        eDebug($s);\n        $sm = new shippingmethod($s->id);\n\n        $shippingCalc = new shippingcalculator($sm->shippingcalculator_id);\n        $calcName     = $shippingCalc->calculator_name;\n        $calculator   = new $calcName($shippingCalc->id);\n        $pricelist = $calculator->getRates($order);\n\n        foreach ($pricelist as $rate) {\n            if ($rate['id'] == $sm->option) {\n                $sm->shipping_cost = $rate['cost'];\n                break;\n            }\n        }\n        $sm->save();\n        $order->refresh();\n        $order->calculateGrandTotal();\n        //FIXME attempt to update w/ new billing transaction\n//        $bmopts = expUnserialize($order->billingmethod[0]->billing_options);\n//        $bmopts->result->transId = gt('Item edited in order');\n//        $order->billingmethod[0]->update(array('billing_options' => serialize($bmopts), 'transaction_state' => $transaction_state));\n//        $order->billingmethod[0]->billingcalculator->calculator->createBillingTransaction($order->billingmethod[0], number_format($order->grand_total, 2, '.', ''), $bmopts->result, $bmopts->result->payment_status);\n        $order->save();\n\n//        flashAndFlow('message', gt('Order item updated and order totals recalculated.'));\n        flash('message', gt('Order item updated and order totals recalculated.'));\n        if (empty($this->params['no_redirect'])) {\n            redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $this->params['orderid']));\n        } else {\n            return $oi->id;\n        }\n    }\n\n    function add_order_item() {\n//        eDebug($this->params);\n        $product     = new product($this->params['product_id']);\n        $paramsArray = array('orderid'=> $this->params['orderid']);\n        assign_to_template(array(\n            'product'=> $product,\n            'params' => $paramsArray\n        ));\n    }\n\n    function save_new_order_item() {  //FIXME we need to be able to call this from program with $params also, addToOrder\n        //eDebug($this->params,true);\n        //check for multiple product adding\n        $order = new order($this->params['orderid']);\n        if (isset($this->params['prod-quantity'])) {\n            //we are adding multiple children, so we approach a bit different\n            //we'll send over the product_id of the parent, along with id's and quantities of children we're adding\n            foreach ($this->params['prod-quantity'] as $qkey=> &$quantity) {\n                if (in_array($qkey, $this->params['prod-check'])) {\n                    $this->params['children'][$qkey] = $quantity;\n                }\n                if (isset($child)) $this->params['product_id'] = $child->parent_id;\n            }\n        }\n\n        $pt      = $this->params['product_type'];\n        $product = new $pt($this->params['product_id'], true, true); //need true here?\n\n        if ($product->addToCart($this->params, $this->params['orderid'])) {\n            $order->refresh();\n            $order->calculateGrandTotal();\n            //FIXME attempt to update w/ new billing transaction\n//            $bmopts = expUnserialize($order->billingmethod[0]->billing_options);\n//            $bmopts->result->transId = gt('Item added to order');\n//            $order->billingmethod[0]->billingcalculator->calculator->createBillingTransaction($order->billingmethod[0], number_format($order->grand_total, 2, '.', ''), $bmopts->result, $bmopts->result->payment_status);\n            $order->save();\n//            flashAndFlow('message', gt('Product added to order and order totals recalculated.'));\n            flash('message', gt('Product added to order and order totals recalculated.'));\n            redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $this->params['orderid']));\n        }\n        /*else\n        {\n            expHistory::back();\n        }*/\n    }\n\n    function edit_invoice_id() {\n        if (!isset($this->params['id'])) flashAndFlow('error', gt('Unable to process request.  Order invalid.'));\n        $order = new order($this->params['id']);\n        assign_to_template(array(\n            'orderid'   => $this->params['id'],\n            'invoice_id'=> $order->invoice_id\n        ));\n    }\n\n    function save_invoice_id() {\n        if (!isset($this->params['id'])) flashAndFlow('error', gt('Unable to process request.  Order invalid.'));\n        if (empty($this->params['invoice_id']) || !is_numeric($this->params['invoice_id'])) flashAndFlow('error', gt('Unable to process request.  Invoice ID #.'));\n        $order             = new order($this->params['id']);\n        $order->invoice_id = $this->params['invoice_id'];\n        $order->save(false);\n        flashAndFlow('message', gt('Invoice # saved.'));\n    }\n\n    function edit_totals() {\n        //eDebug($this->params);\n        $order = new order($this->params['orderid']);\n        assign_to_template(array(\n//            'orderid'=>$this->params['id'],\n            'order'=> $order\n        ));\n    }\n\n    function save_totals() {\n        //eDebug($this->params);\n        //if(!is_numeric($this->params['subtotal']))\n        $order                  = new order($this->params['orderid']);\n        $order->subtotal        = expUtil::currency_to_float($this->params['subtotal']);\n        $order->total_discounts = expUtil::currency_to_float($this->params['total_discounts']);\n        $order->total           = round($order->subtotal - $order->total_discounts, 2);\n        $order->tax             = expUtil::currency_to_float($this->params['tax']);\n        $order->shipping_total  = expUtil::currency_to_float($this->params['shipping_total']);\n        //note: the shippingmethod record will still reflect the ORIGINAL shipping amount for this order.\n        $order->surcharge_total = expUtil::currency_to_float($this->params['surcharge_total']);\n\n        if ($this->params['autocalc'] == true) {\n            $order->grand_total = round(($order->subtotal - $order->total_discounts) + $order->tax + $order->shipping_total + $order->surcharge_total, 2);\n        } else {\n            $order->grand_total = round(expUtil::currency_to_float($this->params['grand_total']), 2);\n        }\n        //FIXME attempt to update w/ new billing transaction\n//        $bmopts = expUnserialize($order->billingmethod[0]->billing_options);\n//        $bmopts->result->transId = gt('Totals Adjusted');\n//        $order->billingmethod[0]->billingcalculator->calculator->createBillingTransaction($order->billingmethod[0], number_format($order->grand_total, 2, '.', ''), $bmopts->result, $bmopts->result->payment_status);\n        $order->save();\n\n//        flashAndFlow('message', gt('Order totals updated.'));\n        flash('message', gt('Order totals updated.'));\n        redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $this->params['orderid']));\n    }\n\n    function update_sales_reps() {\n        if (!isset($this->params['id'])) {\n            flashAndFlow('error', gt('Unable to process request. Invalid order number.'));\n            //expHistory::back();\n        }\n        $order                 = new order($this->params['id']);\n        $order->sales_rep_1_id = $this->params['sales_rep_1_id'];\n        $order->sales_rep_2_id = $this->params['sales_rep_2_id'];\n        $order->sales_rep_3_id = $this->params['sales_rep_3_id'];\n        $order->save();\n        flashAndFlow('message', gt('Sales reps updated.'));\n    }\n\n    function quickfinder() {\n        global $db;\n\n        $search    = $this->params['ordernum'];\n        $searchInv = intval($search);\n\n        $sql = \"SELECT DISTINCT(o.id), o.invoice_id, FROM_UNIXTIME(o.purchased,'%c/%e/%y %h:%i:%s %p') as purchased_date, b.firstname as bfirst, b.lastname as blast, concat('\".expCore::getCurrencySymbol().\"',format(o.grand_total,2)) as grand_total, os.title as status_title, ot.title as order_type\";\n        $sql .= \" from \" . $db->prefix . \"orders as o \";\n        $sql .= \"INNER JOIN \" . $db->prefix . \"orderitems as oi ON oi.orders_id = o.id \";\n        $sql .= \"INNER JOIN \" . $db->prefix . \"order_type as ot ON ot.id = o.order_type_id \";\n        $sql .= \"INNER JOIN \" . $db->prefix . \"order_status as os ON os.id = o.order_status_id \";\n        $sql .= \"INNER JOIN \" . $db->prefix . \"billingmethods as b ON b.orders_id = o.id \";\n        $sql .= \"INNER JOIN \" . $db->prefix . \"shippingmethods as s ON s.id = oi.shippingmethods_id \";\n\n        $sqlwhere = \"WHERE o.purchased != 0\";\n        if ($searchInv != 0) $sqlwhere .= \" AND (o.invoice_id LIKE '%\" . $searchInv . \"%' OR\";\n        else $sqlwhere .= \" AND (\";\n        $sqlwhere .= \" b.firstname LIKE '%\" . $search . \"%'\";\n        $sqlwhere .= \" OR s.firstname LIKE '%\" . $search . \"%'\";\n        $sqlwhere .= \" OR b.lastname LIKE '%\" . $search . \"%'\";\n        $sqlwhere .= \" OR s.lastname LIKE '%\" . $search . \"%'\";\n        $sqlwhere .= \" OR b.email LIKE '%\" . $search . \"%')\";\n\n        $limit = empty($this->config['limit']) ? 350 : $this->config['limit'];\n        //eDebug($sql . $sqlwhere)  ;\n        $page = new expPaginator(array(\n            'sql'       => $sql . $sqlwhere,\n            'limit'     => $limit,\n            'order'     => 'o.invoice_id',\n            'dir'       => 'DESC',\n            'page'      => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'controller'=> $this->baseclassname,\n            'action'    => $this->params['action'],\n            'columns'   => array(\n                'actupon'           => true,\n                gt('Order #')       => 'invoice_id|controller=order,action=show,showby=id',\n                gt('Purchased Date')=> 'purchased_date',\n                gt('First')         => 'bfirst',\n                gt('Last')          => 'blast',\n                gt('Total')         => 'grand_total',\n                gt('Order Type')    => 'order_type',\n                gt('Status')        => 'status_title'\n            ),\n        ));\n        assign_to_template(array(\n            'page'=> $page,\n            'term'=> $search\n        ));\n\n        //eDebug($this->params);\n        /*$o = new order();\n        $b = new billingmethod();\n        $s = new shippingmethod();\n\n        $search = intval($this->params['ordernum']);\n        if (is_int($oid) && $oid > 0)\n        {\n            $orders = $o->find('all',\"invoice_id LIKE '%\".$oid.\"%'\");\n            if(count($orders == 1))\n            {\n                redirect_to(array('controller'=>'order','action'=>'show','id'=>$order[0]->id));\n            }\n            else\n            {\n                flashAndFlow('message',\"Orders containing \" . $search . \" in the order number not found.\");\n            }\n        }\n        else\n        {\n            //lookup just a customer\n            $bms = $b->find('all', )\n        }*/\n        /*$o = new order();\n        $oid = intval($this->params['ordernum']);\n        if (is_int($oid) && $oid > 0)\n        {\n            $order = $o->find('first','invoice_id='.$oid);\n            if(!empty($order->id))\n            {\n                redirect_to(array('controller'=>'order','action'=>'show','id'=>$order->id));\n            }\n            else\n            {\n                flashAndFlow('message',\"Order #\" . intval($this->params['ordernum']) . \" not found.\");\n            }\n        }\n        else\n        {\n            flashAndFlow('message','Invalid order number.');\n        }*/\n    }\n\n    public function verifyReturnShopper() {\n//        global $user, $order;\n\n        $sessAr = expSession::get('verify_shopper');\n        if (isset($sessAr)) {\n            assign_to_template(array(\n                'firstname'=> $sessAr['firstname'],\n                'cid'=> $sessAr['cid']\n\n            ));\n            /*eDebug(expSession::get('verify_shopper'));\n            eDebug($this->params);\n            eDebug(\"here\");\n            eDebug($user);\n            eDebug($order);*/\n        }\n    }\n\n    public function verifyAndRestoreCart() {\n//        global $user, $order;\n\n        $sessAr = expSession::get('verify_shopper');\n        if (isset($sessAr) && isset($this->params['cid']) && $this->params['cid'] == $sessAr['cid']) {\n            $tmpCart = new order($sessAr['cid']);\n            if (isset($tmpCart->id)) {\n                //eDebug($tmpCart,true);\n                $shippingMethod = $tmpCart->shippingmethod;\n                $billingMethod  = $tmpCart->billingmethod[0];\n\n                if (($this->params['lastname'] == $shippingMethod->lastname || $this->params['lastname'] == $billingMethod->lastname) &&\n                    ($this->params['email'] == $shippingMethod->email || $this->params['email'] == $billingMethod->email) &&\n                    ($this->params['zip_code'] == $shippingMethod->zip || $this->params['zip_code'] == $billingMethod->zip)\n                ) {\n                    //validatio succeed, so restore order, login user and continue on to orig_path\n                    //eDebug(\"Validated\",true);\n                    $sessAr['validated'] = true;\n                    expSession::set('verify_shopper', $sessAr);\n                    redirect_to($sessAr['orig_path']);\n                } else {\n                    //eDebug(\"Validated NOT\",true);\n                    //validation failed, so go back\n                    flash('error', gt(\"We're sorry, but we could not verify your information.  Please try again, or start a new shopping cart.\"));\n                    redirect_to(array('controller'=> 'order', 'action'=> 'verifyReturnShopper', 'id'=> $sessAr['cid']));\n                }\n            } else {\n                flash('error', gt('We were unable to restore the previous order, we apologize for the inconvenience.  Please start a new shopping cart.'));\n                $this->clearCart();\n            }\n        }\n    }\n\n    public static function clearCartCookie() {\n        expSession::un_set('verify_shopper');\n        order::setCartCookie(null);\n    }\n\n    public function clearCart() {\n        global $order;\n\n        $sessAr = expSession::get('verify_shopper');\n        if (isset($sessAr)) {\n            order::setCartCookie($order);\n            $orig_path = $sessAr['orig_path'];\n            expSession::un_set('verify_shopper');\n            redirect_to($orig_path);\n        } else {\n            expHistory::back();\n        }\n    }\n\n    /**\n     * AJAX search for internal (addressController) addresses\n     *\n     */\n    public function search() {\n//        global $db, $user;\n        global $db;\n\n        $this->params['query'] = expString::escape($this->params['query']);\n        $sql = \"select DISTINCT(a.id) as id, a.firstname as firstname, a.middlename as middlename, a.lastname as lastname, a.organization as organization, a.email as email \";\n        $sql .= \"from \" . $db->prefix . \"addresses as a \"; //R JOIN \" .\n        //$db->prefix . \"billingmethods as bm ON bm.addresses_id=a.id \";\n        $sql .= \" WHERE match (a.firstname,a.lastname,a.email,a.organization) against ('\" . $this->params['query'] .\n            \"*' IN BOOLEAN MODE) \";\n        $sql .= \"order by match (a.firstname,a.lastname,a.email,a.organization)  against ('\" . $this->params['query'] . \"*' IN BOOLEAN MODE) ASC LIMIT 12\";\n        $res = $db->selectObjectsBySql($sql);\n        foreach ($res as $key=>$record) {\n            $res[$key]->title = $record->firstname . ' ' . $record->lastname;\n        }\n        //eDebug($sql);\n        $ar = new expAjaxReply(200, gt('Here\\'s the items you wanted'), $res);\n        $ar->send();\n    }\n\n    /**\n     * Ajax search for external addresses\n     *\n     */\n    public function search_external() {\n//        global $db, $user;\n        global $db;\n\n        $this->params['query'] = expString::escape($this->params['query']);\n        $sql = \"select DISTINCT(a.id) as id, a.source as source, a.firstname as firstname, a.middlename as middlename, a.lastname as lastname, a.organization as organization, a.email as email \";\n        $sql .= \"from \" . $db->prefix . \"external_addresses as a \"; //R JOIN \" .\n        //$db->prefix . \"billingmethods as bm ON bm.addresses_id=a.id \";\n        $sql .= \" WHERE match (a.firstname,a.lastname,a.email,a.organization) against ('\" . $this->params['query'] .\n            \"*' IN BOOLEAN MODE) \";\n        $sql .= \"order by match (a.firstname,a.lastname,a.email,a.organization)  against ('\" . $this->params['query'] . \"*' IN BOOLEAN MODE) ASC LIMIT 12\";\n        $res = $db->selectObjectsBySql($sql);\n        foreach ($res as $key=>$record) {\n            $res[$key]->title = $record->firstname . ' ' . $record->lastname;\n        }\n        //eDebug($sql);\n        $ar = new expAjaxReply(200, gt('Here\\'s the items you wanted'), $res);\n        $ar->send();\n    }\n\n}\n\n?>"], "filenames": ["framework/modules/core/controllers/expHTMLEditorController.php", "framework/modules/ecommerce/controllers/orderController.php"], "buggy_code_start_loc": [174, 2135], "buggy_code_end_loc": [175, 2158], "fixing_code_start_loc": [174, 2136], "fixing_code_end_loc": [175, 2161], "type": "CWE-200", "message": "In /framework/modules/ecommerce/controllers/orderController.php of Exponent CMS 2.4.0, untrusted input is passed into selectObjectsBySql. The method selectObjectsBySql of class mysqli_database uses the injectProof method to prevent SQL injection, but this filter can be bypassed easily: it only sanitizes user input if there are odd numbers of ' or \" characters. Impact is Information Disclosure.", "other": {"cve": {"id": "CVE-2016-9183", "sourceIdentifier": "cve@mitre.org", "published": "2016-11-04T10:59:02.880", "lastModified": "2016-11-29T18:37:41.207", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In /framework/modules/ecommerce/controllers/orderController.php of Exponent CMS 2.4.0, untrusted input is passed into selectObjectsBySql. The method selectObjectsBySql of class mysqli_database uses the injectProof method to prevent SQL injection, but this filter can be bypassed easily: it only sanitizes user input if there are odd numbers of ' or \" characters. Impact is Information Disclosure."}, {"lang": "es", "value": "En /framework/modules/ecommerce/controllers/orderController.php de Exponent CMS 2.4.0, la entrada no confiable se pasa a selectObjectsBySql. El m\u00e9todo selectObjectsBySql de la clase mysqli_database utiliza el m\u00e9todo injectProof para prevenir la inyecci\u00f3n SQL, pero este filtro puede eludirse f\u00e1cilmente: solo sanea la entrada del usuario si hay n\u00fameros impares de caracteres ' o \". El impacto es Information Disclosure."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:exponentcms:exponent_cms:2.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "CFEAA82F-83B2-49B8-B860-2F18C3C66321"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/94227", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/exponentcms/exponent-cms/commit/3b3557e9f6ba193a4c23c8ce5498fa285dddf3f3", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/exponentcms/exponent-cms/commit/3b3557e9f6ba193a4c23c8ce5498fa285dddf3f3"}}