{"buggy_code": ["<?php\n# MantisBT - A PHP based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * GraphViz API\n *\n * Wrapper classes around GraphViz utilities (dot and neato) for\n * directed and undirected graph generation. These wrappers are enhanced\n * enough just to support relationship_graph_api.php. They don't\n * support subgraphs yet.\n *\n * The original Graphviz package is available at:\n * \t- http://www.graphviz.org/\n * Additional documentation can be found at:\n * \t- http://www.graphviz.org/Documentation.html\n *\n * @package CoreAPI\n * @subpackage GraphVizAPI\n * @author Juliano Ravasi Ferraz <jferraz at users sourceforge net>\n * @copyright Copyright 2002  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n *\n * @uses constant_inc.php\n * @uses utility_api.php\n */\n\nrequire_api( 'constant_inc.php' );\nrequire_api( 'utility_api.php' );\n\n# constant(s) defining the output formats supported by dot and neato.\ndefine( 'GRAPHVIZ_ATTRIBUTED_DOT', 0 );\ndefine( 'GRAPHVIZ_PS', 1 );\ndefine( 'GRAPHVIZ_HPGL', 2 );\ndefine( 'GRAPHVIZ_PCL', 3 );\ndefine( 'GRAPHVIZ_MIF', 4 );\ndefine( 'GRAPHVIZ_PLAIN', 6 );\ndefine( 'GRAPHVIZ_PLAIN_EXT', 7 );\ndefine( 'GRAPHVIZ_GIF', 11 );\ndefine( 'GRAPHVIZ_JPEG', 12 );\ndefine( 'GRAPHVIZ_PNG', 13 );\ndefine( 'GRAPHVIZ_WBMP', 14 );\ndefine( 'GRAPHVIZ_XBM', 15 );\ndefine( 'GRAPHVIZ_ISMAP', 16 );\ndefine( 'GRAPHVIZ_IMAP', 17 );\ndefine( 'GRAPHVIZ_CMAP', 18 );\ndefine( 'GRAPHVIZ_CMAPX', 19 );\ndefine( 'GRAPHVIZ_VRML', 20 );\ndefine( 'GRAPHVIZ_SVG', 25 );\ndefine( 'GRAPHVIZ_SVGZ', 26 );\ndefine( 'GRAPHVIZ_CANONICAL_DOT', 27 );\ndefine( 'GRAPHVIZ_PDF', 28 );\n\n/**\n * Base class for graph creation and manipulation. By default,\n * undirected graphs are generated. For directed graphs, use Digraph\n * class.\n */\nclass Graph {\n\t/**\n\t * Name\n\t */\n\tpublic $name = 'G';\n\n\t/**\n\t * Attributes\n\t */\n\tpublic $attributes = array();\n\n\t/**\n\t * Default node\n\t */\n\tpublic $default_node = null;\n\n\t/**\n\t * Default edge\n\t */\n\tpublic $default_edge = null;\n\n\t/**\n\t * Nodes\n\t */\n\tpublic $nodes = array();\n\n\t/**\n\t * Edges\n\t */\n\tpublic $edges = array();\n\n\t/**\n\t * Graphviz tool\n\t */\n\tpublic $graphviz_tool;\n\n\t/**\n\t * Formats\n\t */\n\tpublic $formats = array(\n\t\t'dot' => array(\n\t\t\t'binary' => false,\n\t\t\t'type' => GRAPHVIZ_ATTRIBUTED_DOT,\n\t\t\t'mime' => 'text/x-graphviz',\n\t\t),\n\t\t'ps' => array(\n\t\t\t'binary' => false,\n\t\t\t'type' => GRAPHVIZ_PS,\n\t\t\t'mime' => 'application/postscript',\n\t\t),\n\t\t'hpgl' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_HPGL,\n\t\t\t'mime' => 'application/vnd.hp-HPGL',\n\t\t),\n\t\t'pcl' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_PCL,\n\t\t\t'mime' => 'application/vnd.hp-PCL',\n\t\t),\n\t\t'mif' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_MIF,\n\t\t\t'mime' => 'application/vnd.mif',\n\t\t),\n\t\t'gif' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_GIF,\n\t\t\t'mime' => 'image/gif',\n\t\t),\n\t\t'jpg' => array(\n\t\t\t'binary' => false,\n\t\t\t'type' => GRAPHVIZ_JPEG,\n\t\t\t'mime' => 'image/jpeg',\n\t\t),\n\t\t'jpeg' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_JPEG,\n\t\t\t'mime' => 'image/jpeg',\n\t\t),\n\t\t'png' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_PNG,\n\t\t\t'mime' => 'image/png',\n\t\t),\n\t\t'wbmp' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_WBMP,\n\t\t\t'mime' => 'image/vnd.wap.wbmp',\n\t\t),\n\t\t'xbm' => array(\n\t\t\t'binary' => false,\n\t\t\t'type' => GRAPHVIZ_XBM,\n\t\t\t'mime' => 'image/x-xbitmap',\n\t\t),\n\t\t'ismap' => array(\n\t\t\t'binary' => false,\n\t\t\t'type' => GRAPHVIZ_ISMAP,\n\t\t\t'mime' => 'text/plain',\n\t\t),\n\t\t'imap' => array(\n\t\t\t'binary' => false,\n\t\t\t'type' => GRAPHVIZ_IMAP,\n\t\t\t'mime' => 'application/x-httpd-imap',\n\t\t),\n\t\t'cmap' => array(\n\t\t\t'binary' => false,\n\t\t\t'type' => GRAPHVIZ_CMAP,\n\t\t\t'mime' => 'text/html',\n\t\t),\n\t\t'cmapx' => array(\n\t\t\t'binary' => false,\n\t\t\t'type' => GRAPHVIZ_CMAPX,\n\t\t\t'mime' => 'application/xhtml+xml',\n\t\t),\n\t\t'vrml' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_VRML,\n\t\t\t'mime' => 'x-world/x-vrml',\n\t\t),\n\t\t'svg' => array(\n\t\t\t'binary' => false,\n\t\t\t'type' => GRAPHVIZ_SVG,\n\t\t\t'mime' => 'image/svg+xml',\n\t\t),\n\t\t'svgz' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_SVGZ,\n\t\t\t'mime' => 'image/svg+xml',\n\t\t),\n\t\t'pdf' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_PDF,\n\t\t\t'mime' => 'application/pdf',\n\t\t),\n\t);\n\n\t/**\n\t * Constructor for Graph objects.\n\t * @param string $p_name       Graph name.\n\t * @param array  $p_attributes Attributes.\n\t * @param string $p_tool       Graph generation tool.\n\t */\n\tfunction __construct( $p_name = 'G', array $p_attributes = array(), $p_tool = 'neato' ) {\n\t\tif( is_string( $p_name ) ) {\n\t\t\t$this->name = $p_name;\n\t\t}\n\n\t\t$this->set_attributes( $p_attributes );\n\n\t\t$this->graphviz_tool = $p_tool;\n\t}\n\n\t/**\n\t * Sets graph attributes.\n\t * @param array $p_attributes Attributes.\n\t * @return void\n\t */\n\tfunction set_attributes( array $p_attributes ) {\n\t\tif( is_array( $p_attributes ) ) {\n\t\t\t$this->attributes = $p_attributes;\n\t\t}\n\t}\n\n\t/**\n\t * Sets default attributes for all nodes of the graph.\n\t * @param array $p_attributes Attributes.\n\t * @return void\n\t */\n\tfunction set_default_node_attr( array $p_attributes ) {\n\t\tif( is_array( $p_attributes ) ) {\n\t\t\t$this->default_node = $p_attributes;\n\t\t}\n\t}\n\n\t/**\n\t * Sets default attributes for all edges of the graph.\n\t * @param array $p_attributes Attributes.\n\t * @return void\n\t */\n\t function set_default_edge_attr( array $p_attributes ) {\n\t\tif( is_array( $p_attributes ) ) {\n\t\t\t$this->default_edge = $p_attributes;\n\t\t}\n\t}\n\n\t/**\n\t * Adds a node to the graph.\n\t * @param string $p_name       Node name.\n\t * @param array  $p_attributes Attributes.\n\t * @return void\n\t */\n\t function add_node( $p_name, array $p_attributes = array() ) {\n\t\tif( is_array( $p_attributes ) ) {\n\t\t\t$this->nodes[$p_name] = $p_attributes;\n\t\t}\n\t}\n\n\t/**\n\t * Adds an edge to the graph.\n\t * @param string $p_src        Source.\n\t * @param string $p_dst        Destination.\n\t * @param array  $p_attributes Attributes.\n\t * @return void\n\t */\n\t function add_edge( $p_src, $p_dst, array $p_attributes = array() ) {\n\t\tif( is_array( $p_attributes ) ) {\n\t\t\t$this->edges[] = array(\n\t\t\t\t'src' => $p_src,\n\t\t\t\t'dst' => $p_dst,\n\t\t\t\t'attributes' => $p_attributes,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Check if an edge is already present.\n\t * @param string $p_src Source.\n\t * @param string $p_dst Destination.\n\t * @return boolean\n\t */\n\tfunction is_edge_present( $p_src, $p_dst ) {\n\t\tforeach( $this->edges as $t_edge ) {\n\t\t\tif( $t_edge['src'] == $p_src && $t_edge['dst'] == $p_dst ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Generates an undirected graph representation (suitable for neato).\n\t * @return void\n\t */\n\tfunction generate() {\n\t\techo 'graph ' . $this->name . ' {' . \"\\n\";\n\n\t\t$this->_print_graph_defaults();\n\n\t\tforeach( $this->nodes as $t_name => $t_attr ) {\n\t\t\t$t_name = '\"' . addcslashes( $t_name, \"\\0..\\37\\\"\\\\\" ) . '\"';\n\t\t\t$t_attr = $this->_build_attribute_list( $t_attr );\n\t\t\techo \"\\t\" . $t_name . ' ' . $t_attr . \";\\n\";\n\t\t}\n\n\t\tforeach( $this->edges as $t_edge ) {\n\t\t\t$t_src = '\"' . addcslashes( $t_edge['src'], \"\\0..\\37\\\"\\\\\" ) . '\"';\n\t\t\t$t_dst = '\"' . addcslashes( $t_edge['dst'], \"\\0..\\37\\\"\\\\\" ) . '\"';\n\t\t\t$t_attr = $t_edge['attributes'];\n\t\t\t$t_attr = $this->_build_attribute_list( $t_attr );\n\t\t\techo \"\\t\" . $t_src . ' -- ' . $t_dst . ' ' . $t_attr . \";\\n\";\n\t\t}\n\n\t\techo \"};\\n\";\n\t}\n\n\t/**\n\t * Outputs a graph image or map in the specified format.\n\t * @param string  $p_format  Graphviz output format.\n\t * @param boolean $p_headers Whether to sent http headers.\n\t * @return void\n\t */\n\tfunction output( $p_format = 'dot', $p_headers = false ) {\n\t\t# Check if it is a recognized format.\n\t\tif( !isset( $this->formats[$p_format] ) ) {\n\t\t\ttrigger_error( ERROR_GENERIC, ERROR );\n\t\t}\n\n\t\t$t_binary = $this->formats[$p_format]['binary'];\n\t\t$t_type = $this->formats[$p_format]['type'];\n\t\t$t_mime = $this->formats[$p_format]['mime'];\n\n\t\t# Send Content-Type header, if requested.\n\t\tif( $p_headers ) {\n\t\t\theader( 'Content-Type: ' . $t_mime );\n\t\t}\n\t\t# Retrieve the source dot document into a buffer\n\t\tob_start();\n\t\t$this->generate();\n\t\t$t_dot_source = ob_get_contents();\n\t\tob_end_clean();\n\n\t\t# Start dot process\n\n\t\t$t_command = $this->graphviz_tool . ' -T' . $p_format;\n\t\t$t_descriptors = array(\n\t\t\t0 => array( 'pipe', 'r', ),\n\t\t\t1 => array( 'pipe', 'w', ),\n\t\t\t2 => array( 'file', 'php://stderr', 'w', ),\n\t\t\t);\n\n\t\t$t_pipes = array();\n\t\t$t_process = proc_open( $t_command, $t_descriptors, $t_pipes );\n\n\t\tif( is_resource( $t_process ) ) {\n\t\t\t# Filter generated output through dot\n\t\t\tfwrite( $t_pipes[0], $t_dot_source );\n\t\t\tfclose( $t_pipes[0] );\n\n\t\t\tif( $p_headers ) {\n\t\t\t\t# Headers were requested, use another output buffer to\n\t\t\t\t# retrieve the size for Content-Length.\n\t\t\t\tob_start();\n\t\t\t\twhile( !feof( $t_pipes[1] ) ) {\n\t\t\t\t\techo fgets( $t_pipes[1], 1024 );\n\t\t\t\t}\n\t\t\t\theader( 'Content-Length: ' . ob_get_length() );\n\t\t\t\tob_end_flush();\n\t\t\t} else {\n\t\t\t\t# No need for headers, send output directly.\n\t\t\t\twhile( !feof( $t_pipes[1] ) ) {\n\t\t\t\t\tprint( fgets( $t_pipes[1], 1024 ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfclose( $t_pipes[1] );\n\t\t\tproc_close( $t_process );\n\t\t}\n\t}\n\n\t/**\n\t * PROTECTED function to build a node or edge attribute list.\n\t * @param array $p_attributes Attributes.\n\t * @return string\n\t */\n\tfunction _build_attribute_list( array $p_attributes ) {\n\t\tif( empty( $p_attributes ) ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$t_result = array();\n\n\t\tforeach( $p_attributes as $t_name => $t_value ) {\n\t\t\tif( !preg_match( '/[a-zA-Z]+/', $t_name ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif( is_string( $t_value ) ) {\n\t\t\t\t$t_value = '\"' . addcslashes( $t_value, \"\\0..\\37\\\"\\\\\" ) . '\"';\n\t\t\t} else if( is_integer( $t_value ) or is_float( $t_value ) ) {\n\t\t\t\t$t_value = (string)$t_value;\n\t\t\t} else {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$t_result[] = $t_name . '=' . $t_value;\n\t\t}\n\n\t\treturn '[ ' . implode( ', ', $t_result ) . ' ]';\n\t}\n\n\t/**\n\t * PROTECTED function to print graph attributes and defaults.\n\t * @return void\n\t */\n\tfunction _print_graph_defaults() {\n\t\tforeach( $this->attributes as $t_name => $t_value ) {\n\t\t\tif( !preg_match( '/[a-zA-Z]+/', $t_name ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif( is_string( $t_value ) ) {\n\t\t\t\t$t_value = '\"' . addcslashes( $t_value, \"\\0..\\37\\\"\\\\\" ) . '\"';\n\t\t\t} else if( is_integer( $t_value ) or is_float( $t_value ) ) {\n\t\t\t\t$t_value = (string)$t_value;\n\t\t\t} else {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\techo \"\\t\" . $t_name . '=' . $t_value . \";\\n\";\n\t\t}\n\n\t\tif( null !== $this->default_node ) {\n\t\t\t$t_attr = $this->_build_attribute_list( $this->default_node );\n\t\t\techo \"\\t\" . 'node ' . $t_attr . \";\\n\";\n\t\t}\n\n\t\tif( null !== $this->default_edge ) {\n\t\t\t$t_attr = $this->_build_attribute_list( $this->default_edge );\n\t\t\techo \"\\t\" . 'edge ' . $t_attr . \";\\n\";\n\t\t}\n\t}\n}\n\n/**\n * Directed graph creation and manipulation.\n */\nclass Digraph extends Graph {\n\t/**\n\t * Constructor for Digraph objects.\n\t * @param string $p_name       Name of the graph.\n\t * @param array  $p_attributes Attributes.\n\t * @param string $p_tool       Graphviz tool.\n\t */\n\tfunction __construct( $p_name = 'G', array $p_attributes = array(), $p_tool = 'dot' ) {\n\t\tparent::__construct( $p_name, $p_attributes, $p_tool );\n\t}\n\n\t/**\n\t * Generates a directed graph representation (suitable for dot).\n\t * @return void\n\t */\n\tfunction generate() {\n\t\techo 'digraph ' . $this->name . ' {' . \"\\n\";\n\n\t\t$this->_print_graph_defaults();\n\n\t\tforeach( $this->nodes as $t_name => $t_attr ) {\n\t\t\t$t_name = '\"' . addcslashes( $t_name, \"\\0..\\37\\\"\\\\\" ) . '\"';\n\t\t\t$t_attr = $this->_build_attribute_list( $t_attr );\n\t\t\techo \"\\t\" . $t_name . ' ' . $t_attr . \";\\n\";\n\t\t}\n\n\t\tforeach( $this->edges as $t_edge ) {\n\t\t\t$t_src = '\"' . addcslashes( $t_edge['src'], \"\\0..\\37\\\"\\\\\" ) . '\"';\n\t\t\t$t_dst = '\"' . addcslashes( $t_edge['dst'], \"\\0..\\37\\\"\\\\\" ) . '\"';\n\t\t\t$t_attr = $t_edge['attributes'];\n\t\t\t$t_attr = $this->_build_attribute_list( $t_attr );\n\t\t\techo \"\\t\" . $t_src . ' -> ' . $t_dst . ' ' . $t_attr . \";\\n\";\n\t\t}\n\n\t\techo \"};\\n\";\n\t}\n}\n"], "fixing_code": ["<?php\n# MantisBT - A PHP based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * GraphViz API\n *\n * Wrapper classes around GraphViz utilities (dot and neato) for\n * directed and undirected graph generation. These wrappers are enhanced\n * enough just to support relationship_graph_api.php. They don't\n * support subgraphs yet.\n *\n * The original Graphviz package is available at:\n * \t- http://www.graphviz.org/\n * Additional documentation can be found at:\n * \t- http://www.graphviz.org/Documentation.html\n *\n * @package CoreAPI\n * @subpackage GraphVizAPI\n * @author Juliano Ravasi Ferraz <jferraz at users sourceforge net>\n * @copyright Copyright 2002  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n *\n * @uses constant_inc.php\n * @uses utility_api.php\n */\n\nrequire_api( 'constant_inc.php' );\nrequire_api( 'utility_api.php' );\n\n# constant(s) defining the output formats supported by dot and neato.\ndefine( 'GRAPHVIZ_ATTRIBUTED_DOT', 0 );\ndefine( 'GRAPHVIZ_PS', 1 );\ndefine( 'GRAPHVIZ_HPGL', 2 );\ndefine( 'GRAPHVIZ_PCL', 3 );\ndefine( 'GRAPHVIZ_MIF', 4 );\ndefine( 'GRAPHVIZ_PLAIN', 6 );\ndefine( 'GRAPHVIZ_PLAIN_EXT', 7 );\ndefine( 'GRAPHVIZ_GIF', 11 );\ndefine( 'GRAPHVIZ_JPEG', 12 );\ndefine( 'GRAPHVIZ_PNG', 13 );\ndefine( 'GRAPHVIZ_WBMP', 14 );\ndefine( 'GRAPHVIZ_XBM', 15 );\ndefine( 'GRAPHVIZ_ISMAP', 16 );\ndefine( 'GRAPHVIZ_IMAP', 17 );\ndefine( 'GRAPHVIZ_CMAP', 18 );\ndefine( 'GRAPHVIZ_CMAPX', 19 );\ndefine( 'GRAPHVIZ_VRML', 20 );\ndefine( 'GRAPHVIZ_SVG', 25 );\ndefine( 'GRAPHVIZ_SVGZ', 26 );\ndefine( 'GRAPHVIZ_CANONICAL_DOT', 27 );\ndefine( 'GRAPHVIZ_PDF', 28 );\n\n/**\n * Base class for graph creation and manipulation. By default,\n * undirected graphs are generated. For directed graphs, use Digraph\n * class.\n */\nclass Graph {\n\t/**\n\t * Name\n\t */\n\tpublic $name = 'G';\n\n\t/**\n\t * Attributes\n\t */\n\tpublic $attributes = array();\n\n\t/**\n\t * Default node\n\t */\n\tpublic $default_node = null;\n\n\t/**\n\t * Default edge\n\t */\n\tpublic $default_edge = null;\n\n\t/**\n\t * Nodes\n\t */\n\tpublic $nodes = array();\n\n\t/**\n\t * Edges\n\t */\n\tpublic $edges = array();\n\n\t/**\n\t * Graphviz tool\n\t */\n\tpublic $graphviz_tool;\n\n\t/**\n\t * Formats\n\t */\n\tpublic $formats = array(\n\t\t'dot' => array(\n\t\t\t'binary' => false,\n\t\t\t'type' => GRAPHVIZ_ATTRIBUTED_DOT,\n\t\t\t'mime' => 'text/x-graphviz',\n\t\t),\n\t\t'ps' => array(\n\t\t\t'binary' => false,\n\t\t\t'type' => GRAPHVIZ_PS,\n\t\t\t'mime' => 'application/postscript',\n\t\t),\n\t\t'hpgl' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_HPGL,\n\t\t\t'mime' => 'application/vnd.hp-HPGL',\n\t\t),\n\t\t'pcl' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_PCL,\n\t\t\t'mime' => 'application/vnd.hp-PCL',\n\t\t),\n\t\t'mif' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_MIF,\n\t\t\t'mime' => 'application/vnd.mif',\n\t\t),\n\t\t'gif' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_GIF,\n\t\t\t'mime' => 'image/gif',\n\t\t),\n\t\t'jpg' => array(\n\t\t\t'binary' => false,\n\t\t\t'type' => GRAPHVIZ_JPEG,\n\t\t\t'mime' => 'image/jpeg',\n\t\t),\n\t\t'jpeg' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_JPEG,\n\t\t\t'mime' => 'image/jpeg',\n\t\t),\n\t\t'png' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_PNG,\n\t\t\t'mime' => 'image/png',\n\t\t),\n\t\t'wbmp' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_WBMP,\n\t\t\t'mime' => 'image/vnd.wap.wbmp',\n\t\t),\n\t\t'xbm' => array(\n\t\t\t'binary' => false,\n\t\t\t'type' => GRAPHVIZ_XBM,\n\t\t\t'mime' => 'image/x-xbitmap',\n\t\t),\n\t\t'ismap' => array(\n\t\t\t'binary' => false,\n\t\t\t'type' => GRAPHVIZ_ISMAP,\n\t\t\t'mime' => 'text/plain',\n\t\t),\n\t\t'imap' => array(\n\t\t\t'binary' => false,\n\t\t\t'type' => GRAPHVIZ_IMAP,\n\t\t\t'mime' => 'application/x-httpd-imap',\n\t\t),\n\t\t'cmap' => array(\n\t\t\t'binary' => false,\n\t\t\t'type' => GRAPHVIZ_CMAP,\n\t\t\t'mime' => 'text/html',\n\t\t),\n\t\t'cmapx' => array(\n\t\t\t'binary' => false,\n\t\t\t'type' => GRAPHVIZ_CMAPX,\n\t\t\t'mime' => 'application/xhtml+xml',\n\t\t),\n\t\t'vrml' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_VRML,\n\t\t\t'mime' => 'x-world/x-vrml',\n\t\t),\n\t\t'svg' => array(\n\t\t\t'binary' => false,\n\t\t\t'type' => GRAPHVIZ_SVG,\n\t\t\t'mime' => 'image/svg+xml',\n\t\t),\n\t\t'svgz' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_SVGZ,\n\t\t\t'mime' => 'image/svg+xml',\n\t\t),\n\t\t'pdf' => array(\n\t\t\t'binary' => true,\n\t\t\t'type' => GRAPHVIZ_PDF,\n\t\t\t'mime' => 'application/pdf',\n\t\t),\n\t);\n\n\t/**\n\t * Constructor for Graph objects.\n\t * @param string $p_name       Graph name.\n\t * @param array  $p_attributes Attributes.\n\t * @param string $p_tool       Graph generation tool.\n\t */\n\tfunction __construct( $p_name = 'G', array $p_attributes = array(), $p_tool = 'neato' ) {\n\t\tif( is_string( $p_name ) ) {\n\t\t\t$this->name = $p_name;\n\t\t}\n\n\t\t$this->set_attributes( $p_attributes );\n\n\t\t$this->graphviz_tool = $p_tool;\n\t}\n\n\t/**\n\t * Sets graph attributes.\n\t * @param array $p_attributes Attributes.\n\t * @return void\n\t */\n\tfunction set_attributes( array $p_attributes ) {\n\t\tif( is_array( $p_attributes ) ) {\n\t\t\t$this->attributes = $p_attributes;\n\t\t}\n\t}\n\n\t/**\n\t * Sets default attributes for all nodes of the graph.\n\t * @param array $p_attributes Attributes.\n\t * @return void\n\t */\n\tfunction set_default_node_attr( array $p_attributes ) {\n\t\tif( is_array( $p_attributes ) ) {\n\t\t\t$this->default_node = $p_attributes;\n\t\t}\n\t}\n\n\t/**\n\t * Sets default attributes for all edges of the graph.\n\t * @param array $p_attributes Attributes.\n\t * @return void\n\t */\n\t function set_default_edge_attr( array $p_attributes ) {\n\t\tif( is_array( $p_attributes ) ) {\n\t\t\t$this->default_edge = $p_attributes;\n\t\t}\n\t}\n\n\t/**\n\t * Adds a node to the graph.\n\t * @param string $p_name       Node name.\n\t * @param array  $p_attributes Attributes.\n\t * @return void\n\t */\n\t function add_node( $p_name, array $p_attributes = array() ) {\n\t\tif( is_array( $p_attributes ) ) {\n\t\t\t$this->nodes[$p_name] = $p_attributes;\n\t\t}\n\t}\n\n\t/**\n\t * Adds an edge to the graph.\n\t * @param string $p_src        Source.\n\t * @param string $p_dst        Destination.\n\t * @param array  $p_attributes Attributes.\n\t * @return void\n\t */\n\t function add_edge( $p_src, $p_dst, array $p_attributes = array() ) {\n\t\tif( is_array( $p_attributes ) ) {\n\t\t\t$this->edges[] = array(\n\t\t\t\t'src' => $p_src,\n\t\t\t\t'dst' => $p_dst,\n\t\t\t\t'attributes' => $p_attributes,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Check if an edge is already present.\n\t * @param string $p_src Source.\n\t * @param string $p_dst Destination.\n\t * @return boolean\n\t */\n\tfunction is_edge_present( $p_src, $p_dst ) {\n\t\tforeach( $this->edges as $t_edge ) {\n\t\t\tif( $t_edge['src'] == $p_src && $t_edge['dst'] == $p_dst ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Generates an undirected graph representation (suitable for neato).\n\t * @return void\n\t */\n\tfunction generate() {\n\t\techo 'graph ' . $this->name . ' {' . \"\\n\";\n\n\t\t$this->_print_graph_defaults();\n\n\t\tforeach( $this->nodes as $t_name => $t_attr ) {\n\t\t\t$t_name = '\"' . addcslashes( $t_name, \"\\0..\\37\\\"\\\\\" ) . '\"';\n\t\t\t$t_attr = $this->_build_attribute_list( $t_attr );\n\t\t\techo \"\\t\" . $t_name . ' ' . $t_attr . \";\\n\";\n\t\t}\n\n\t\tforeach( $this->edges as $t_edge ) {\n\t\t\t$t_src = '\"' . addcslashes( $t_edge['src'], \"\\0..\\37\\\"\\\\\" ) . '\"';\n\t\t\t$t_dst = '\"' . addcslashes( $t_edge['dst'], \"\\0..\\37\\\"\\\\\" ) . '\"';\n\t\t\t$t_attr = $t_edge['attributes'];\n\t\t\t$t_attr = $this->_build_attribute_list( $t_attr );\n\t\t\techo \"\\t\" . $t_src . ' -- ' . $t_dst . ' ' . $t_attr . \";\\n\";\n\t\t}\n\n\t\techo \"};\\n\";\n\t}\n\n\t/**\n\t * Outputs a graph image or map in the specified format.\n\t * @param string  $p_format  Graphviz output format.\n\t * @param boolean $p_headers Whether to sent http headers.\n\t * @return void\n\t */\n\tfunction output( $p_format = 'dot', $p_headers = false ) {\n\t\t# Check if it is a recognized format.\n\t\tif( !isset( $this->formats[$p_format] ) ) {\n\t\t\ttrigger_error( ERROR_GENERIC, ERROR );\n\t\t}\n\n\t\t$t_binary = $this->formats[$p_format]['binary'];\n\t\t$t_type = $this->formats[$p_format]['type'];\n\t\t$t_mime = $this->formats[$p_format]['mime'];\n\n\t\t# Send Content-Type header, if requested.\n\t\tif( $p_headers ) {\n\t\t\theader( 'Content-Type: ' . $t_mime );\n\t\t}\n\t\t# Retrieve the source dot document into a buffer\n\t\tob_start();\n\t\t$this->generate();\n\t\t$t_dot_source = ob_get_contents();\n\t\tob_end_clean();\n\n\t\t# Start dot process\n\n\t\t$t_command = escapeshellcmd( $this->graphviz_tool . ' -T' . $p_format );\n\t\t$t_descriptors = array(\n\t\t\t0 => array( 'pipe', 'r', ),\n\t\t\t1 => array( 'pipe', 'w', ),\n\t\t\t2 => array( 'file', 'php://stderr', 'w', ),\n\t\t\t);\n\n\t\t$t_pipes = array();\n\t\t$t_process = proc_open( $t_command, $t_descriptors, $t_pipes );\n\n\t\tif( is_resource( $t_process ) ) {\n\t\t\t# Filter generated output through dot\n\t\t\tfwrite( $t_pipes[0], $t_dot_source );\n\t\t\tfclose( $t_pipes[0] );\n\n\t\t\tif( $p_headers ) {\n\t\t\t\t# Headers were requested, use another output buffer to\n\t\t\t\t# retrieve the size for Content-Length.\n\t\t\t\tob_start();\n\t\t\t\twhile( !feof( $t_pipes[1] ) ) {\n\t\t\t\t\techo fgets( $t_pipes[1], 1024 );\n\t\t\t\t}\n\t\t\t\theader( 'Content-Length: ' . ob_get_length() );\n\t\t\t\tob_end_flush();\n\t\t\t} else {\n\t\t\t\t# No need for headers, send output directly.\n\t\t\t\twhile( !feof( $t_pipes[1] ) ) {\n\t\t\t\t\tprint( fgets( $t_pipes[1], 1024 ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfclose( $t_pipes[1] );\n\t\t\tproc_close( $t_process );\n\t\t}\n\t}\n\n\t/**\n\t * PROTECTED function to build a node or edge attribute list.\n\t * @param array $p_attributes Attributes.\n\t * @return string\n\t */\n\tfunction _build_attribute_list( array $p_attributes ) {\n\t\tif( empty( $p_attributes ) ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$t_result = array();\n\n\t\tforeach( $p_attributes as $t_name => $t_value ) {\n\t\t\tif( !preg_match( '/[a-zA-Z]+/', $t_name ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif( is_string( $t_value ) ) {\n\t\t\t\t$t_value = '\"' . addcslashes( $t_value, \"\\0..\\37\\\"\\\\\" ) . '\"';\n\t\t\t} else if( is_integer( $t_value ) or is_float( $t_value ) ) {\n\t\t\t\t$t_value = (string)$t_value;\n\t\t\t} else {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$t_result[] = $t_name . '=' . $t_value;\n\t\t}\n\n\t\treturn '[ ' . implode( ', ', $t_result ) . ' ]';\n\t}\n\n\t/**\n\t * PROTECTED function to print graph attributes and defaults.\n\t * @return void\n\t */\n\tfunction _print_graph_defaults() {\n\t\tforeach( $this->attributes as $t_name => $t_value ) {\n\t\t\tif( !preg_match( '/[a-zA-Z]+/', $t_name ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif( is_string( $t_value ) ) {\n\t\t\t\t$t_value = '\"' . addcslashes( $t_value, \"\\0..\\37\\\"\\\\\" ) . '\"';\n\t\t\t} else if( is_integer( $t_value ) or is_float( $t_value ) ) {\n\t\t\t\t$t_value = (string)$t_value;\n\t\t\t} else {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\techo \"\\t\" . $t_name . '=' . $t_value . \";\\n\";\n\t\t}\n\n\t\tif( null !== $this->default_node ) {\n\t\t\t$t_attr = $this->_build_attribute_list( $this->default_node );\n\t\t\techo \"\\t\" . 'node ' . $t_attr . \";\\n\";\n\t\t}\n\n\t\tif( null !== $this->default_edge ) {\n\t\t\t$t_attr = $this->_build_attribute_list( $this->default_edge );\n\t\t\techo \"\\t\" . 'edge ' . $t_attr . \";\\n\";\n\t\t}\n\t}\n}\n\n/**\n * Directed graph creation and manipulation.\n */\nclass Digraph extends Graph {\n\t/**\n\t * Constructor for Digraph objects.\n\t * @param string $p_name       Name of the graph.\n\t * @param array  $p_attributes Attributes.\n\t * @param string $p_tool       Graphviz tool.\n\t */\n\tfunction __construct( $p_name = 'G', array $p_attributes = array(), $p_tool = 'dot' ) {\n\t\tparent::__construct( $p_name, $p_attributes, $p_tool );\n\t}\n\n\t/**\n\t * Generates a directed graph representation (suitable for dot).\n\t * @return void\n\t */\n\tfunction generate() {\n\t\techo 'digraph ' . $this->name . ' {' . \"\\n\";\n\n\t\t$this->_print_graph_defaults();\n\n\t\tforeach( $this->nodes as $t_name => $t_attr ) {\n\t\t\t$t_name = '\"' . addcslashes( $t_name, \"\\0..\\37\\\"\\\\\" ) . '\"';\n\t\t\t$t_attr = $this->_build_attribute_list( $t_attr );\n\t\t\techo \"\\t\" . $t_name . ' ' . $t_attr . \";\\n\";\n\t\t}\n\n\t\tforeach( $this->edges as $t_edge ) {\n\t\t\t$t_src = '\"' . addcslashes( $t_edge['src'], \"\\0..\\37\\\"\\\\\" ) . '\"';\n\t\t\t$t_dst = '\"' . addcslashes( $t_edge['dst'], \"\\0..\\37\\\"\\\\\" ) . '\"';\n\t\t\t$t_attr = $t_edge['attributes'];\n\t\t\t$t_attr = $this->_build_attribute_list( $t_attr );\n\t\t\techo \"\\t\" . $t_src . ' -> ' . $t_dst . ' ' . $t_attr . \";\\n\";\n\t\t}\n\n\t\techo \"};\\n\";\n\t}\n}\n"], "filenames": ["core/graphviz_api.php"], "buggy_code_start_loc": [355], "buggy_code_end_loc": [356], "fixing_code_start_loc": [355], "fixing_code_end_loc": [356], "type": "CWE-78", "message": "MantisBT before 1.3.20 and 2.22.1 allows Post Authentication Command Injection, leading to Remote Code Execution.", "other": {"cve": {"id": "CVE-2019-15715", "sourceIdentifier": "cve@mitre.org", "published": "2019-10-09T20:15:23.207", "lastModified": "2023-01-20T16:34:14.877", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "MantisBT before 1.3.20 and 2.22.1 allows Post Authentication Command Injection, leading to Remote Code Execution."}, {"lang": "es", "value": "MantisBT versiones anteriores a 1.3.20 y 2.22.1, permite la Inyecci\u00f3n de Comandos de Autenticaci\u00f3n Post, lo que conlleva a la Ejecuci\u00f3n de C\u00f3digo Remota."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.0.0", "versionEndExcluding": "1.3.20", "matchCriteriaId": "80B28CB3-6654-4C99-9F71-F00AAA332A3E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "2.22.1", "matchCriteriaId": "E44A680B-3086-4961-BC39-A3AD7BDBB1CB"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/159219/Mantis-Bug-Tracker-2.3.0-Remote-Code-Execution.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/mantisbt/mantisbt/commit/5fb979604d88c630343b3eaf2b435cd41918c501", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/mantisbt/mantisbt/commit/7092573fac31eff41823f13540324db167c8bd52", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/mantisbt/mantisbt/commit/cebfb9acb3686e8904d80bd4bc80720b54ba08e5", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/mantisbt/mantisbt/commit/fc7668c8e45db55fc3a4b991ea99d2b80861a14c", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://mantisbt.org/bugs/changelog_page.php?project=mantisbt", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://mantisbt.org/bugs/view.php?id=26091", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Vendor Advisory"]}, {"url": "https://mantisbt.org/bugs/view.php?id=26162", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/mantisbt/mantisbt/commit/5fb979604d88c630343b3eaf2b435cd41918c501"}}