{"buggy_code": [".idea", "<?php\n\nnamespace vova07\\fileapi\\actions;\n\nuse vova07\\fileapi\\Widget;\nuse yii\\base\\Action;\nuse yii\\base\\DynamicModel;\nuse yii\\base\\InvalidCallException;\nuse yii\\base\\InvalidConfigException;\nuse yii\\helpers\\FileHelper;\nuse yii\\web\\BadRequestHttpException;\nuse yii\\web\\Response;\nuse yii\\web\\UploadedFile;\nuse Yii;\n\n/**\n * UploadAction for images and files.\n *\n * Usage:\n * ```php\n * public function actions()\n * {\n *     return [\n *         'upload' => [\n *             'class' => 'vova07\\fileapi\\actions\\UploadAction',\n *             'path' => '@path/to/files',\n *             'uploadOnlyImage' => false\n *         ]\n *     ];\n * }\n * ```\n */\nclass UploadAction extends Action\n{\n    /**\n     * @var string Path to directory where files will be uploaded\n     */\n    public $path;\n\n    /**\n     * @var string Validator name\n     */\n    public $uploadOnlyImage = true;\n\n    /**\n     * @var string The parameter name for the file form data (the request argument name).\n     */\n    public $paramName = 'file';\n\n    /**\n     * @var boolean If `true` unique filename will be generated automatically\n     */\n    public $unique = true;\n\n    /**\n     * @var array Model validator options\n     */\n    public $validatorOptions = [];\n\n    /**\n     * @var string Model validator name\n     */\n    private $_validator = 'image';\n\n    /**\n     * @inheritdoc\n     */\n    public function init()\n    {\n        if ($this->path === null) {\n            throw new InvalidConfigException('The \"path\" attribute must be set.');\n        } else {\n            $this->path = FileHelper::normalizePath(Yii::getAlias($this->path)) . DIRECTORY_SEPARATOR;\n\n            if (!FileHelper::createDirectory($this->path)) {\n                throw new InvalidCallException(\"Directory specified in 'path' attribute doesn't exist or cannot be created.\");\n            }\n        }\n        if ($this->uploadOnlyImage !== true) {\n            $this->_validator = 'file';\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public function run()\n    {\n        if (Yii::$app->request->isPost) {\n            $file = UploadedFile::getInstanceByName($this->paramName);\n            $model = new DynamicModel(compact('file'));\n            $model->addRule('file', $this->_validator, $this->validatorOptions)->validate();\n\n            if ($model->hasErrors()) {\n                $result = [\n                    'error' => $model->getFirstError('file')\n                ];\n            } else {\n                if ($this->unique === true && $model->file->extension) {\n                    $model->file->name = uniqid() . '.' . $model->file->extension;\n                }\n                if ($model->file->saveAs($this->path . $model->file->name)) {\n                    $result = ['name' => $model->file->name];\n                } else {\n                    $result = ['error' => Widget::t('fileapi', 'ERROR_CAN_NOT_UPLOAD_FILE')];\n                }\n            }\n            Yii::$app->response->format = Response::FORMAT_JSON;\n\n            return $result;\n        } else {\n            throw new BadRequestHttpException('Only POST is allowed');\n        }\n    }\n}\n"], "fixing_code": ["/vendor\n/composer.lock\n", "<?php\n\nnamespace vova07\\fileapi\\actions;\n\nuse vova07\\fileapi\\Widget;\nuse yii\\base\\Action;\nuse yii\\base\\DynamicModel;\nuse yii\\base\\InvalidCallException;\nuse yii\\base\\InvalidConfigException;\nuse yii\\helpers\\FileHelper;\nuse yii\\helpers\\Html;\nuse yii\\web\\BadRequestHttpException;\nuse yii\\web\\Response;\nuse yii\\web\\UploadedFile;\nuse Yii;\n\n/**\n * UploadAction for images and files.\n *\n * Usage:\n * ```php\n * public function actions()\n * {\n *     return [\n *         'upload' => [\n *             'class' => 'vova07\\fileapi\\actions\\UploadAction',\n *             'path' => '@path/to/files',\n *             'uploadOnlyImage' => false\n *         ]\n *     ];\n * }\n * ```\n */\nclass UploadAction extends Action\n{\n    /**\n     * @var string Path to directory where files will be uploaded\n     */\n    public $path;\n\n    /**\n     * @var string Validator name\n     */\n    public $uploadOnlyImage = true;\n\n    /**\n     * @var string The parameter name for the file form data (the request argument name).\n     */\n    public $paramName = 'file';\n\n    /**\n     * @var boolean If `true` unique filename will be generated automatically\n     */\n    public $unique = true;\n\n    /**\n     * @var array Model validator options\n     */\n    public $validatorOptions = [];\n\n    /**\n     * @var string Model validator name\n     */\n    private $_validator = 'image';\n\n    /**\n     * @inheritdoc\n     */\n    public function init()\n    {\n        if ($this->path === null) {\n            throw new InvalidConfigException('The \"path\" attribute must be set.');\n        } else {\n            $this->path = FileHelper::normalizePath(Yii::getAlias($this->path)) . DIRECTORY_SEPARATOR;\n\n            if (!FileHelper::createDirectory($this->path)) {\n                throw new InvalidCallException(\"Directory specified in 'path' attribute doesn't exist or cannot be created.\");\n            }\n        }\n        if ($this->uploadOnlyImage !== true) {\n            $this->_validator = 'file';\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public function run()\n    {\n        if (Yii::$app->request->isPost) {\n            $file = UploadedFile::getInstanceByName($this->paramName);\n            $model = new DynamicModel(compact('file'));\n            $model->addRule('file', $this->_validator, $this->validatorOptions)->validate();\n\n            if ($model->hasErrors()) {\n                $result = [\n                    'error' => Html::encode($model->getFirstError('file')),\n                ];\n            } else {\n                if ($this->unique === true && $model->file->extension) {\n                    $model->file->name = uniqid() . '.' . $model->file->extension;\n                }\n                if ($model->file->saveAs($this->path . $model->file->name)) {\n                    $result = ['name' => $model->file->name];\n                } else {\n                    $result = ['error' => Widget::t('fileapi', 'ERROR_CAN_NOT_UPLOAD_FILE')];\n                }\n            }\n            Yii::$app->response->format = Response::FORMAT_JSON;\n\n            return $result;\n        } else {\n            throw new BadRequestHttpException('Only POST is allowed');\n        }\n    }\n}\n"], "filenames": [".gitignore", "actions/UploadAction.php"], "buggy_code_start_loc": [1, 10], "buggy_code_end_loc": [2, 97], "fixing_code_start_loc": [1, 11], "fixing_code_end_loc": [3, 98], "type": "CWE-79", "message": "** UNSUPPPORTED WHEN ASSIGNED **** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in vova07 Yii2 FileAPI Widget up to 0.1.8. It has been declared as problematic. Affected by this vulnerability is the function run of the file actions/UploadAction.php. The manipulation of the argument file leads to cross site scripting. The attack can be launched remotely. Upgrading to version 0.1.9 is able to address this issue. The name of the patch is c00d1e4fc912257fca1fce66d7a163bdbb4c8222. It is recommended to upgrade the affected component. The identifier VDB-217141 was assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.", "other": {"cve": {"id": "CVE-2017-20158", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-31T11:15:08.587", "lastModified": "2023-01-09T14:50:16.637", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "** UNSUPPPORTED WHEN ASSIGNED **** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in vova07 Yii2 FileAPI Widget up to 0.1.8. It has been declared as problematic. Affected by this vulnerability is the function run of the file actions/UploadAction.php. The manipulation of the argument file leads to cross site scripting. The attack can be launched remotely. Upgrading to version 0.1.9 is able to address this issue. The name of the patch is c00d1e4fc912257fca1fce66d7a163bdbb4c8222. It is recommended to upgrade the affected component. The identifier VDB-217141 was assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:yii2_fileapi_widget_project:yii2_fileapi_widget:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.1.9", "matchCriteriaId": "5EF05758-DF23-40B4-B8CF-94AE43696310"}]}]}], "references": [{"url": "https://github.com/vova07/yii2-fileapi-widget/commit/c00d1e4fc912257fca1fce66d7a163bdbb4c8222", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/vova07/yii2-fileapi-widget/releases/tag/0.1.9", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217141", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217141", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/vova07/yii2-fileapi-widget/commit/c00d1e4fc912257fca1fce66d7a163bdbb4c8222"}}