{"buggy_code": ["/*****************************************************************\n|\n|    AP4 - hdlr Atoms \n|\n|    Copyright 2002-2008 Axiomatic Systems, LLC\n|\n|\n|    This file is part of Bento4/AP4 (MP4 Atom Processing Library).\n|\n|    Unless you have obtained Bento4 under a difference license,\n|    this version of Bento4 is Bento4|GPL.\n|    Bento4|GPL is free software; you can redistribute it and/or modify\n|    it under the terms of the GNU General Public License as published by\n|    the Free Software Foundation; either version 2, or (at your option)\n|    any later version.\n|\n|    Bento4|GPL is distributed in the hope that it will be useful,\n|    but WITHOUT ANY WARRANTY; without even the implied warranty of\n|    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n|    GNU General Public License for more details.\n|\n|    You should have received a copy of the GNU General Public License\n|    along with Bento4|GPL; see the file COPYING.  If not, write to the\n|    Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n|    02111-1307, USA.\n|\n ****************************************************************/\n\n/*----------------------------------------------------------------------\n|   includes\n+---------------------------------------------------------------------*/\n#include \"Ap4HdlrAtom.h\"\n#include \"Ap4AtomFactory.h\"\n#include \"Ap4Utils.h\"\n\n/*----------------------------------------------------------------------\n|   dynamic cast support\n+---------------------------------------------------------------------*/\nAP4_DEFINE_DYNAMIC_CAST_ANCHOR(AP4_HdlrAtom)\n\n/*----------------------------------------------------------------------\n|   AP4_HdlrAtom::Create\n+---------------------------------------------------------------------*/\nAP4_HdlrAtom*\nAP4_HdlrAtom::Create(AP4_Size size, AP4_ByteStream& stream)\n{\n    AP4_UI08 version;\n    AP4_UI32 flags;\n    if (AP4_FAILED(AP4_Atom::ReadFullHeader(stream, version, flags))) return NULL;\n    if (version != 0) return NULL;\n    return new AP4_HdlrAtom(size, version, flags, stream);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_HdlrAtom::AP4_HdlrAtom\n+---------------------------------------------------------------------*/\nAP4_HdlrAtom::AP4_HdlrAtom(AP4_Atom::Type hdlr_type, const char* hdlr_name) :\n    AP4_Atom(AP4_ATOM_TYPE_HDLR, AP4_FULL_ATOM_HEADER_SIZE, 0, 0),\n    m_HandlerType(hdlr_type),\n    m_HandlerName(hdlr_name)\n{\n    m_Size32 += 20+m_HandlerName.GetLength()+1;\n    m_Reserved[0] = m_Reserved[1] = m_Reserved[2] = 0;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_HdlrAtom::AP4_HdlrAtom\n+---------------------------------------------------------------------*/\nAP4_HdlrAtom::AP4_HdlrAtom(AP4_UI32        size, \n                           AP4_UI08        version,\n                           AP4_UI32        flags,\n                           AP4_ByteStream& stream) :\n    AP4_Atom(AP4_ATOM_TYPE_HDLR, size, version, flags)\n{\n    AP4_UI32 predefined;\n    stream.ReadUI32(predefined);\n    stream.ReadUI32(m_HandlerType);\n    stream.ReadUI32(m_Reserved[0]);\n    stream.ReadUI32(m_Reserved[1]);\n    stream.ReadUI32(m_Reserved[2]);\n    \n    // read the name unless it is empty\n    int name_size = size-(AP4_FULL_ATOM_HEADER_SIZE+20);\n    if (name_size == 0) return;\n    char* name = new char[name_size+1];\n    stream.Read(name, name_size);\n    name[name_size] = '\\0'; // force a null termination\n    // handle a special case: the Quicktime files have a pascal\n    // string here, but ISO MP4 files have a C string.\n    // we try to detect a pascal encoding and correct it.\n    if (name[0] == name_size-1) {\n        m_HandlerName = name+1;\n    } else {\n        m_HandlerName = name;\n    }\n    delete[] name;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_HdlrAtom::WriteFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_HdlrAtom::WriteFields(AP4_ByteStream& stream)\n{\n    AP4_Result result;\n\n    // write the data\n    result = stream.WriteUI32(0); // predefined\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteUI32(m_HandlerType);\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteUI32(m_Reserved[0]);\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteUI32(m_Reserved[1]);\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteUI32(m_Reserved[2]);\n    if (AP4_FAILED(result)) return result;\n    AP4_UI08 name_size = (AP4_UI08)m_HandlerName.GetLength();\n    if (AP4_FULL_ATOM_HEADER_SIZE+20+name_size > m_Size32) {\n        name_size = (AP4_UI08)(m_Size32-AP4_FULL_ATOM_HEADER_SIZE+20);\n    }\n    if (name_size) {\n        result = stream.Write(m_HandlerName.GetChars(), name_size);\n        if (AP4_FAILED(result)) return result;\n    }\n\n    // pad with zeros if necessary\n    AP4_Size padding = m_Size32-(AP4_FULL_ATOM_HEADER_SIZE+20+name_size);\n    while (padding--) stream.WriteUI08(0);\n\n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_HdlrAtom::InspectFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_HdlrAtom::InspectFields(AP4_AtomInspector& inspector)\n{\n    char type[5];\n    AP4_FormatFourChars(type, m_HandlerType);\n    inspector.AddField(\"handler_type\", type);\n    inspector.AddField(\"handler_name\", m_HandlerName.GetChars());\n\n    return AP4_SUCCESS;\n}\n"], "fixing_code": ["/*****************************************************************\n|\n|    AP4 - hdlr Atoms \n|\n|    Copyright 2002-2008 Axiomatic Systems, LLC\n|\n|\n|    This file is part of Bento4/AP4 (MP4 Atom Processing Library).\n|\n|    Unless you have obtained Bento4 under a difference license,\n|    this version of Bento4 is Bento4|GPL.\n|    Bento4|GPL is free software; you can redistribute it and/or modify\n|    it under the terms of the GNU General Public License as published by\n|    the Free Software Foundation; either version 2, or (at your option)\n|    any later version.\n|\n|    Bento4|GPL is distributed in the hope that it will be useful,\n|    but WITHOUT ANY WARRANTY; without even the implied warranty of\n|    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n|    GNU General Public License for more details.\n|\n|    You should have received a copy of the GNU General Public License\n|    along with Bento4|GPL; see the file COPYING.  If not, write to the\n|    Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n|    02111-1307, USA.\n|\n ****************************************************************/\n\n/*----------------------------------------------------------------------\n|   includes\n+---------------------------------------------------------------------*/\n#include \"Ap4HdlrAtom.h\"\n#include \"Ap4AtomFactory.h\"\n#include \"Ap4Utils.h\"\n\n/*----------------------------------------------------------------------\n|   dynamic cast support\n+---------------------------------------------------------------------*/\nAP4_DEFINE_DYNAMIC_CAST_ANCHOR(AP4_HdlrAtom)\n\n/*----------------------------------------------------------------------\n|   AP4_HdlrAtom::Create\n+---------------------------------------------------------------------*/\nAP4_HdlrAtom*\nAP4_HdlrAtom::Create(AP4_Size size, AP4_ByteStream& stream)\n{\n    AP4_UI08 version;\n    AP4_UI32 flags;\n    if (AP4_FAILED(AP4_Atom::ReadFullHeader(stream, version, flags))) return NULL;\n    if (version != 0) return NULL;\n    return new AP4_HdlrAtom(size, version, flags, stream);\n}\n\n/*----------------------------------------------------------------------\n|   AP4_HdlrAtom::AP4_HdlrAtom\n+---------------------------------------------------------------------*/\nAP4_HdlrAtom::AP4_HdlrAtom(AP4_Atom::Type hdlr_type, const char* hdlr_name) :\n    AP4_Atom(AP4_ATOM_TYPE_HDLR, AP4_FULL_ATOM_HEADER_SIZE, 0, 0),\n    m_HandlerType(hdlr_type),\n    m_HandlerName(hdlr_name)\n{\n    m_Size32 += 20+m_HandlerName.GetLength()+1;\n    m_Reserved[0] = m_Reserved[1] = m_Reserved[2] = 0;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_HdlrAtom::AP4_HdlrAtom\n+---------------------------------------------------------------------*/\nAP4_HdlrAtom::AP4_HdlrAtom(AP4_UI32        size, \n                           AP4_UI08        version,\n                           AP4_UI32        flags,\n                           AP4_ByteStream& stream) :\n    AP4_Atom(AP4_ATOM_TYPE_HDLR, size, version, flags)\n{\n    AP4_UI32 predefined;\n    stream.ReadUI32(predefined);\n    stream.ReadUI32(m_HandlerType);\n    stream.ReadUI32(m_Reserved[0]);\n    stream.ReadUI32(m_Reserved[1]);\n    stream.ReadUI32(m_Reserved[2]);\n    \n    // read the name unless it is empty\n    if (size < AP4_FULL_ATOM_HEADER_SIZE+20) return;\n    AP4_UI32 name_size = size-(AP4_FULL_ATOM_HEADER_SIZE+20);\n    char* name = new char[name_size+1];\n    if (name == NULL) return;\n    stream.Read(name, name_size);\n    name[name_size] = '\\0'; // force a null termination\n    // handle a special case: the Quicktime files have a pascal\n    // string here, but ISO MP4 files have a C string.\n    // we try to detect a pascal encoding and correct it.\n    if (name[0] == name_size-1) {\n        m_HandlerName = name+1;\n    } else {\n        m_HandlerName = name;\n    }\n    delete[] name;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_HdlrAtom::WriteFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_HdlrAtom::WriteFields(AP4_ByteStream& stream)\n{\n    AP4_Result result;\n\n    // write the data\n    result = stream.WriteUI32(0); // predefined\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteUI32(m_HandlerType);\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteUI32(m_Reserved[0]);\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteUI32(m_Reserved[1]);\n    if (AP4_FAILED(result)) return result;\n    result = stream.WriteUI32(m_Reserved[2]);\n    if (AP4_FAILED(result)) return result;\n    AP4_UI08 name_size = (AP4_UI08)m_HandlerName.GetLength();\n    if (AP4_FULL_ATOM_HEADER_SIZE+20+name_size > m_Size32) {\n        name_size = (AP4_UI08)(m_Size32-AP4_FULL_ATOM_HEADER_SIZE+20);\n    }\n    if (name_size) {\n        result = stream.Write(m_HandlerName.GetChars(), name_size);\n        if (AP4_FAILED(result)) return result;\n    }\n\n    // pad with zeros if necessary\n    AP4_Size padding = m_Size32-(AP4_FULL_ATOM_HEADER_SIZE+20+name_size);\n    while (padding--) stream.WriteUI08(0);\n\n    return AP4_SUCCESS;\n}\n\n/*----------------------------------------------------------------------\n|   AP4_HdlrAtom::InspectFields\n+---------------------------------------------------------------------*/\nAP4_Result\nAP4_HdlrAtom::InspectFields(AP4_AtomInspector& inspector)\n{\n    char type[5];\n    AP4_FormatFourChars(type, m_HandlerType);\n    inspector.AddField(\"handler_type\", type);\n    inspector.AddField(\"handler_name\", m_HandlerName.GetChars());\n\n    return AP4_SUCCESS;\n}\n"], "filenames": ["Source/C++/Core/Ap4HdlrAtom.cpp"], "buggy_code_start_loc": [83], "buggy_code_end_loc": [85], "fixing_code_start_loc": [83], "fixing_code_end_loc": [87], "type": "CWE-476", "message": "A NULL pointer dereference was discovered in the AP4_HdlrAtom class in Bento4 version 1.5.0-617. The vulnerability causes a segmentation fault and application crash in AP4_StdcFileByteStream::ReadPartial in System/StdC/Ap4StdCFileByteStream.cpp, which leads to remote denial of service.", "other": {"cve": {"id": "CVE-2017-14642", "sourceIdentifier": "cve@mitre.org", "published": "2017-09-21T17:29:00.307", "lastModified": "2017-09-28T16:16:37.360", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A NULL pointer dereference was discovered in the AP4_HdlrAtom class in Bento4 version 1.5.0-617. The vulnerability causes a segmentation fault and application crash in AP4_StdcFileByteStream::ReadPartial in System/StdC/Ap4StdCFileByteStream.cpp, which leads to remote denial of service."}, {"lang": "es", "value": "Existe una desreferencia de puntero NULL en la clase AP4_HdlrAtom en Bento4 1.5.0-617. Esta vulnerabilidad causa un error de segmentaci\u00f3n y el cierre inesperado de la aplicaci\u00f3n en AP4_StdcFileByteStream::ReadPartial en System/StdC/Ap4StdCFileByteStream.cpp, lo que da lugar a una denegaci\u00f3n de servicio remota."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-476"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bento4:bento4:1.5.0-617:*:*:*:*:*:*:*", "matchCriteriaId": "E91AC306-5354-4B0C-B481-CBA451648D90"}]}]}], "references": [{"url": "https://blogs.gentoo.org/ago/2017/09/14/bento4-null-pointer-dereference-in-ap4_stdcfilebytestreamreadpartial-ap4stdcfilebytestream-cpp/", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/axiomatic-systems/Bento4/commit/22192de5367fa0cee985917f092be4060b7c00b0", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/axiomatic-systems/Bento4/issues/185", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/axiomatic-systems/Bento4/commit/22192de5367fa0cee985917f092be4060b7c00b0"}}