{"buggy_code": ["<?php\n/*+**********************************************************************************\n * The contents of this file are subject to the vtiger CRM Public License Version 1.0\n * (\"License\"); You may not use this file except in compliance with the License\n * The Original Code is:  vtiger CRM Open Source\n * The Initial Developer of the Original Code is vtiger.\n * Portions created by vtiger are Copyright (C) vtiger.\n * All Rights Reserved.\n ************************************************************************************/\ninclude_once 'config.inc.php';\nrequire_once 'include/logging.php';\nrequire_once 'data/Tracker.php';\nrequire_once 'include/utils/utils.php';\nrequire_once 'include/utils/UserInfoUtil.php';\nrequire_once 'modules/com_vtiger_workflow/VTWorkflowManager.inc';\n$VTIGER_BULK_SAVE_MODE = false; // mass create/import global variable\n\nclass CRMEntity {\n\n\tpublic $ownedby;\n\tpublic $mode;\n\tpublic $id;\n\tpublic $column_fields;\n\tpublic $tab_name;\n\tpublic $tab_name_index;\n\tpublic $table_name;\n\tpublic $table_index;\n\tpublic $fetched_records;\n\tpublic $customFieldTable;\n\tpublic $special_functions;\n\tpublic $importable_fields;\n\tpublic $required_fields;\n\tpublic $sortby_fields;\n\tpublic $list_fields;\n\tpublic $search_fields;\n\tpublic $default_sort_order;\n\tpublic $default_order_by;\n\tpublic $list_link_field;\n\tpublic $list_fields_name;\n\tpublic $linkmodeid = 0;\n\tpublic $linkmodemodule = '';\n\tpublic $DirectImageFieldValues = array();\n\tpublic $HasDirectImageField = false;\n\tpublic $crmentityTable = 'vtiger_crmentity';\n\tpublic $crmentityTableAlias;\n\tpublic $denormalized = false;\n\tpublic $specialModules = array('com_vtiger_workflow');\n\tprotected static $methods = array();\n\tprotected static $dbvalues = array();\n\tprotected static $todvalues = array();\n\tpublic $moduleIcon = array('library' => 'standard', 'containerClass' => 'slds-icon_container slds-icon-standard-recent', 'class' => 'slds-icon', 'icon'=>'entity');\n\n\tpublic function __construct() {\n\t\tglobal $adb;\n\t\t$this_module = get_class($this);\n\t\t$tabid = getTabid($this_module);\n\t\t$result = $adb->pquery('SELECT denormtable FROM vtiger_entityname WHERE tabid=?', array($tabid));\n\t\tif ($result) {\n\t\t\t$this->crmentityTable = $adb->query_result($result, 0, 'denormtable');\n\t\t}\n\t\t$this->denormalized = ($this->crmentityTable!='vtiger_crmentity');\n\t\tif ($this->denormalized) {\n\t\t\tif (($key = array_search('vtiger_crmentity', $this->tab_name)) !== false) {\n\t\t\t\tunset($this->tab_name[$key]);\n\t\t\t}\n\t\t\tunset($this->tab_name_index['vtiger_crmentity']);\n\t\t}\n\t\t$this->crmentityTableAlias = $this->denormalized ? $this->crmentityTable.' as vtiger_crmentity' : 'vtiger_crmentity';\n\t\t$this->column_fields = getColumnFields($this_module);\n\t\t$result = $adb->pquery('SELECT 1 FROM vtiger_field WHERE uitype=69 and tabid=? limit 1', array($tabid));\n\t\t$this->HasDirectImageField = ($result && $adb->num_rows($result)==1);\n\t}\n\n\tpublic static function registerMethod($method) {\n\t\tself::$methods[] = $method;\n\t}\n\n\tpublic function __call($method, $args) {\n\t\tif (in_array($method, self::$methods)) {\n\t\t\t$args[] = $this;\n\t\t\treturn call_user_func_array($method, array_values($args));\n\t\t}\n\t}\n\n\t/**\n\t * Detect if we are in bulk save mode, where some features can be turned-off to improve performance\n\t */\n\tpublic static function isBulkSaveMode() {\n\t\tglobal $VTIGER_BULK_SAVE_MODE;\n\t\treturn isset($VTIGER_BULK_SAVE_MODE) && $VTIGER_BULK_SAVE_MODE;\n\t}\n\n\tpublic static function getInstance($modName) {\n\t\t// File access security check\n\t\tif (!class_exists($modName)) {\n\t\t\tcheckFileAccessForInclusion(\"modules/$modName/$modName.php\");\n\t\t\trequire_once \"modules/$modName/$modName.php\";\n\t\t}\n\t\treturn new $modName();\n\t}\n\n\tpublic function getUUID() {\n\t\t$hcols = array();\n\t\t$hcols['moduletype'] = $this->column_fields['record_module'];\n\t\t$hcols['record_id'] = empty($this->column_fields['record_id']) ? $_REQUEST['currentid'] : $this->column_fields['record_id'];\n\t\t$hcols['creator'] = isset($this->column_fields['created_user_id']) ? getUserEmail($this->column_fields['created_user_id']) : 'email@lost.tld';\n\t\t$hcols['owner'] = isset($this->column_fields['assigned_user_id']) ? getUserEmail($this->column_fields['assigned_user_id']) : 'nouser@module.tld';\n\t\t$hcols['createdtime'] = $this->column_fields['createdtime'];\n\t\treturn sha1(json_encode($hcols));\n\t}\n\n\tpublic static function getUUIDfromCRMID($refval) {\n\t\tglobal $adb;\n\t\t$rs = $adb->pquery('select cbuuid from vtiger_crmobject where crmid=?', array($refval));\n\t\treturn (($rs && $adb->num_rows($rs)>0) ? $rs->fields['cbuuid'] : '');\n\t}\n\n\tpublic static function getUUIDfromWSID($refval) {\n\t\tif (empty($refval)) {\n\t\t\treturn '';\n\t\t}\n\t\t$nocbuuid = array('Users', 'Currency', 'Groups', '');\n\t\tlist($wsid, $crmid) = explode('x', $refval);\n\t\tif (in_array(vtws_getEntityName($wsid), $nocbuuid)) {\n\t\t\treturn '';\n\t\t}\n\t\treturn CRMEntity::getUUIDfromCRMID($crmid);\n\t}\n\n\tpublic static function getCRMIDfromUUID($refval) {\n\t\tglobal $adb;\n\t\tif (empty($refval)) {\n\t\t\treturn '';\n\t\t}\n\t\t$rs = $adb->pquery('select crmid from vtiger_crmobject where cbuuid=?', array($refval));\n\t\treturn (($rs && $adb->num_rows($rs)>0) ? $rs->fields['crmid'] : '');\n\t}\n\n\tpublic static function getWSIDfromUUID($refval) {\n\t\tglobal $adb;\n\t\t$rs = $adb->pquery(\n\t\t\t'select concat(id,\"x\",crmid) as wsid from vtiger_crmobject inner join vtiger_ws_entity on name=setype where cbuuid=?',\n\t\t\tarray($refval)\n\t\t);\n\t\treturn (($rs && $adb->num_rows($rs)>0) ? $rs->fields['wsid'] : '');\n\t}\n\n\tpublic function saveentity($module) {\n\t\tglobal $current_user, $adb;\n\t\tif (property_exists($module, 'HasDirectImageField') && $this->HasDirectImageField && !empty($this->id)) {\n\t\t\t// we have to save these names to delete previous overwritten values in uitype 69 field\n\t\t\t$sql = 'SELECT tablename,columnname FROM vtiger_field WHERE uitype=69 and vtiger_field.tabid = ?';\n\t\t\t$tabid = getTabid($module);\n\t\t\t$result = $adb->pquery($sql, array($tabid));\n\t\t\twhile ($finfo = $adb->fetch_array($result)) {\n\t\t\t\t$mrowrs = $adb->pquery(\n\t\t\t\t\t'select '.$finfo['columnname'].' from '.$finfo['tablename'].' where '.$this->tab_name_index[$finfo['tablename']].'=?',\n\t\t\t\t\tarray($this->id)\n\t\t\t\t);\n\t\t\t\t$this->DirectImageFieldValues[$finfo['columnname']] = $adb->query_result($mrowrs, 0, 0);\n\t\t\t}\n\t\t}\n\t\t$anyValue = false;\n\t\tforeach ($this->column_fields as $value) {\n\t\t\tif (!empty($value)) {\n\t\t\t\t$anyValue = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!$anyValue) {\n\t\t\tdie('<center>' .getTranslatedString('LBL_MANDATORY_FIELD_MISSING').'</center>');\n\t\t}\n\n\t\t$adb->println(\"TRANS saveentity starts $module\");\n\t\t$adb->startTransaction();\n\n\t\tforeach ($this->tab_name as $table_name) {\n\t\t\tif ($table_name == 'vtiger_crmentity') {\n\t\t\t\t$this->insertIntoCrmEntity($module);\n\t\t\t} else {\n\t\t\t\t$this->insertIntoEntityTable($table_name, $module);\n\t\t\t}\n\t\t}\n\n\t\t// If multicurrency module we save the currency and conversion rate\n\t\tif (!empty($this->column_fields['conversion_rate']) && !empty($this->column_fields['currency_id'])) {\n\t\t\t$update_query = 'update '.$this->table_name.' set currency_id=?, conversion_rate=? where '.$this->table_index.'=?';\n\t\t\t$update_params = array($this->column_fields['currency_id'], $this->column_fields['conversion_rate'], $this->id);\n\t\t\t$adb->pquery($update_query, $update_params);\n\t\t}\n\n\t\t//Calling the Module specific save code\n\t\t$this->save_module($module);\n\n\t\t$adb->completeTransaction();\n\t\t$adb->println('TRANS saveentity ends');\n\n\t\t// vtlib customization: Hook provide to enable generic module relation.\n\t\tif (isset($_REQUEST['createmode']) && $_REQUEST['createmode'] == 'link') {\n\t\t\tif (!empty($this->linkmodeid)) {\n\t\t\t\t$for_crmid = vtlib_purify($this->linkmodeid);\n\t\t\t} else {\n\t\t\t\t$for_crmid = vtlib_purify($_REQUEST['return_id']);\n\t\t\t}\n\t\t\tif (!empty($this->linkmodemodule)) {\n\t\t\t\t$for_module = vtlib_purify($this->linkmodemodule);\n\t\t\t} else {\n\t\t\t\t$for_module = vtlib_purify($_REQUEST['return_module']);\n\t\t\t}\n\t\t\t$with_module = $module;\n\t\t\t$with_crmid = $this->id;\n\n\t\t\t$on_focus = CRMEntity::getInstance($for_module);\n\n\t\t\tif ($for_module && $for_crmid && $with_module && $with_crmid) {\n\t\t\t\trelateEntities($on_focus, $for_module, $for_crmid, $with_module, $with_crmid);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function insertIntoAttachment($id, $module, $direct_import = false) {\n\t\tglobal $log, $adb;\n\t\tif (empty($_FILES)) {\n\t\t\treturn;\n\t\t}\n\t\t$log->debug(\"> insertIntoAttachment $id,$module\");\n\t\t$file_saved = false;\n\t\t// get the list of uitype 69 fields so we can set their value\n\t\t$sql = 'SELECT tablename,columnname\n\t\t FROM vtiger_field\n\t\t INNER JOIN vtiger_blocks ON vtiger_blocks.blockid = vtiger_field.block\n\t\t WHERE uitype=69 and vtiger_field.fieldname=? and vtiger_field.tabid = ?\n\t\t ORDER BY vtiger_blocks.sequence,vtiger_field.sequence';\n\t\t$tabid = getTabid($module);\n\t\tforeach ($_FILES as $fileindex => $files) {\n\t\t\tif (!empty($files['name']) && $files['size'] > 0) {\n\t\t\t\tif (!empty($_REQUEST[$fileindex.'_hidden'])) {\n\t\t\t\t\t$files['original_name'] = vtlib_purify($_REQUEST[$fileindex.'_hidden']);\n\t\t\t\t} else {\n\t\t\t\t\t$files['original_name'] = stripslashes($files['name']);\n\t\t\t\t}\n\t\t\t\t$files['original_name'] = str_replace(array('\"',':'), '', $files['original_name']);\n\t\t\t\t$result = $adb->pquery($sql, array($fileindex,$tabid));\n\t\t\t\tif (!$result || $adb->num_rows($result)==0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$tblname = $adb->query_result($result, 0, 'tablename');\n\t\t\t\t$colname = $adb->query_result($result, 0, 'columnname');\n\t\t\t\t$fldname = $fileindex;\n\t\t\t\t// This is to store the existing attachment id so we can delete it when given a new image\n\t\t\t\t$attachmentname = (isset($this->DirectImageFieldValues[$colname]) ? $this->DirectImageFieldValues[$colname] : '');\n\t\t\t\t$old_attachmentrs = $adb->pquery('select vtiger_crmentity.crmid from vtiger_seattachmentsrel\n\t\t\t\t inner join vtiger_crmentity on vtiger_crmentity.crmid=vtiger_seattachmentsrel.attachmentsid\n\t\t\t\t inner join vtiger_attachments on vtiger_crmentity.crmid=vtiger_attachments.attachmentsid\n\t\t\t\t where vtiger_seattachmentsrel.crmid=? and vtiger_attachments.name=?', array($id,$attachmentname));\n\t\t\t\tif ($old_attachmentrs && $adb->num_rows($old_attachmentrs)>0) {\n\t\t\t\t\t$old_attachmentid = $adb->query_result($old_attachmentrs, 0, 'crmid');\n\t\t\t\t} else {\n\t\t\t\t\t$old_attachmentid = 0;\n\t\t\t\t}\n\t\t\t\t$upd = \"update $tblname set $colname=? where \".$this->tab_name_index[$tblname].'=?';\n\t\t\t\t$adb->pquery($upd, array($files['original_name'],$this->id));\n\t\t\t\t$this->column_fields[$fldname] = $files['original_name'];\n\t\t\t\tif (!empty($old_attachmentid)) {\n\t\t\t\t\t$setypers = $adb->pquery('select setype from '.$this->crmentityTable.' where crmid=?', array($old_attachmentid));\n\t\t\t\t\t$setype = $adb->query_result($setypers, 0, 'setype');\n\t\t\t\t\tif ($setype == 'Contacts Image' || $setype == $module.Field_Metadata::ATTACHMENT_ENTITY) {\n\t\t\t\t\t\t$cntrels = $adb->pquery('select count(*) as cnt from vtiger_seattachmentsrel where attachmentsid=?', array($old_attachmentid));\n\t\t\t\t\t\t$numrels = $adb->query_result($cntrels, 0, 'cnt');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$numrels = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$file_saved = $this->uploadAndSaveFile($id, $module, $files, $attachmentname, $direct_import, $fldname);\n\t\t\t\t// Remove the deleted attachments from db\n\t\t\t\tif ($file_saved && !empty($old_attachmentid) && ($setype == 'Contacts Image' || $setype == $module.Field_Metadata::ATTACHMENT_ENTITY)) {\n\t\t\t\t\tif ($numrels == 1) {\n\t\t\t\t\t\t$adb->pquery('delete from vtiger_attachments where attachmentsid=?', array($old_attachmentid));\n\t\t\t\t\t}\n\t\t\t\t\t$adb->pquery('delete from vtiger_seattachmentsrel where crmid = ? and attachmentsid=?', array($id, $old_attachmentid));\n\t\t\t\t}\n\t\t\t} elseif (isset($_REQUEST[$fileindex.'_canvas_image_set']) && $_REQUEST[$fileindex.'_canvas_image_set']==1 && !empty($_REQUEST[$fileindex.'_canvas_image'])) {\n\t\t\t\t$saveasfile = $module . '_' . $fileindex . '_' . date('YmdHis') . '.png';\n\t\t\t\t$fh = fopen('cache/images/'.$saveasfile, 'wb');\n\t\t\t\t$filecontent = $_REQUEST[$fileindex.'_canvas_image'];\n\t\t\t\tif (substr($filecontent, 0, strlen('data:image/png;base64,'))=='data:image/png;base64,') {\n\t\t\t\t\t// Base64 Encoded HTML5 Canvas image\n\t\t\t\t\t$filecontent = str_replace('data:image/png;base64,', '', $filecontent);\n\t\t\t\t\t$filecontent = str_replace(' ', '+', $filecontent);\n\t\t\t\t}\n\t\t\t\tfwrite($fh, base64_decode($filecontent));\n\t\t\t\tfclose($fh);\n\t\t\t\t$fi = array(\n\t\t\t\t\t'name' => $saveasfile,\n\t\t\t\t\t'original_name' => $saveasfile,\n\t\t\t\t\t'type' => 'image/png',\n\t\t\t\t\t'tmp_name' => 'cache/images/' . $saveasfile,\n\t\t\t\t\t'error' => 0,\n\t\t\t\t\t'size' => 0\n\t\t\t\t);\n\t\t\t\t$this->uploadAndSaveFile($id, $module, $fi, '', true, $fileindex);\n\t\t\t\t$result = $adb->pquery($sql, array($fileindex,$tabid));\n\t\t\t\t$tblname = $adb->query_result($result, 0, 'tablename');\n\t\t\t\t$colname = $adb->query_result($result, 0, 'columnname');\n\t\t\t\t$adb->pquery(\"update $tblname set $colname=? where \".$this->tab_name_index[$tblname].'=?', array($saveasfile,$this->id));\n\t\t\t} elseif (empty($files['name']) && $files['size'] == 0) {\n\t\t\t\t$result = $adb->pquery($sql, array($fileindex,$tabid));\n\t\t\t\t$tblname = $adb->query_result($result, 0, 'tablename');\n\t\t\t\t$colname = $adb->query_result($result, 0, 'columnname');\n\t\t\t\tif (empty($_REQUEST[$fileindex.'_hidden'])) {\n\t\t\t\t\t$upd = \"update $tblname set $colname='' where \".$this->tab_name_index[$tblname].'=?';\n\t\t\t\t\t$adb->pquery($upd, array($this->id));\n\t\t\t\t} elseif (!empty($_REQUEST['__cbisduplicatedfromrecordid'])) {\n\t\t\t\t\t$attachmentname = vtlib_purify($_REQUEST[$fileindex.'_hidden']);\n\t\t\t\t\t$attachmentname = str_replace(' ', '_', $attachmentname);\n\t\t\t\t\t$isduplicatedfromrecordid = vtlib_purify($_REQUEST['__cbisduplicatedfromrecordid']);\n\t\t\t\t\t$old_attachmentrs = $adb->pquery('select vtiger_crmentity.crmid from vtiger_seattachmentsrel\n\t\t\t\t\t inner join vtiger_crmentity on vtiger_crmentity.crmid=vtiger_seattachmentsrel.attachmentsid\n\t\t\t\t\t inner join vtiger_attachments on vtiger_crmentity.crmid=vtiger_attachments.attachmentsid\n\t\t\t\t\t where vtiger_seattachmentsrel.crmid=? and vtiger_attachments.name=?', array($isduplicatedfromrecordid,$attachmentname));\n\t\t\t\t\tif ($old_attachmentrs && $adb->num_rows($old_attachmentrs)>0) {\n\t\t\t\t\t\t$old_attachmentid = $adb->query_result($old_attachmentrs, 0, 'crmid');\n\t\t\t\t\t\t$upd = \"update $tblname set $colname=? where \".$this->tab_name_index[$tblname].'=?';\n\t\t\t\t\t\t$adb->pquery($upd, array($attachmentname,$this->id));\n\t\t\t\t\t\t$adb->pquery('insert into vtiger_seattachmentsrel values(?,?)', array($id, $old_attachmentid));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$upd = \"update $tblname set $colname='' where \".$this->tab_name_index[$tblname].'=?';\n\t\t\t\t\t\t$adb->pquery($upd, array($this->id));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$log->debug('< insertIntoAttachment');\n\t}\n\n\t/**\n\t * function used to upload the attachment in the server and save that attachment information in db.\n\t * @param integer entity id to which the file will be uploaded\n\t * @param string the current module name\n\t * @param array contains the file information (name, type, size, tmp_name and error)\n\t * @return boolean true if uploaded, false if the image is not secure or some other error occured\n\t */\n\tpublic function uploadAndSaveFile($id, $module, $file_details, $attachmentname = '', $direct_import = false, $forfield = '') {\n\t\tglobal $log, $adb, $current_user, $upload_badext;\n\t\t$log->debug('> uploadAndSaveFile', [$id, $module, $file_details]);\n\n\t\t$date_var = date('Y-m-d H:i:s');\n\n\t\t//to get the owner id\n\t\t$ownerid = $this->column_fields['assigned_user_id'];\n\t\tif (!isset($ownerid) || $ownerid == '') {\n\t\t\t$ownerid = $current_user->id;\n\t\t}\n\n\t\tif (isset($file_details['original_name']) && $file_details['original_name'] != null) {\n\t\t\t$file_name = $file_details['original_name'];\n\t\t} else {\n\t\t\t$file_name = $file_details['name'];\n\t\t}\n\n\t\t$binFile = sanitizeUploadFileName($file_name, $upload_badext);\n\n\t\t$current_id = $adb->getUniqueID('vtiger_crmentity');\n\n\t\t$filename = ltrim(basename(' ' . $binFile)); //allowed filename like UTF-8 characters\n\t\t$filetype = $file_details['type'];\n\t\t$filetmp_name = $file_details['tmp_name'];\n\n\t\tif (validateImageFile($file_details) == 'true' && !validateImageContents($filetmp_name)) {\n\t\t\t$log->debug('< uploadAndSaveFile: skip save attachment process');\n\t\t\treturn false;\n\t\t}\n\n\t\t//get the file path inwhich folder we want to upload the file\n\t\t$upload_file_path = decideFilePath();\n\n\t\t//upload the file in server\n\t\tif ($direct_import || !is_uploaded_file($filetmp_name)) {\n\t\t\t$upload_status = @copy($filetmp_name, $upload_file_path . $current_id . '_' . $binFile);\n\t\t} else {\n\t\t\t$upload_status = @move_uploaded_file($filetmp_name, $upload_file_path . $current_id . '_' . $binFile);\n\t\t}\n\n\t\tif ($upload_status && !empty($forfield)) {\n\t\t\tunset($_FILES[$forfield]);\n\t\t}\n\n\t\tif ($upload_status) {\n\t\t\t$description_val = empty($this->column_fields['description']) ? '' : $this->column_fields['description'];\n\t\t\tif (($module == 'Contacts' || $module == 'Products') && $forfield=='imagename') {\n\t\t\t\t$sql1 = 'insert into vtiger_crmentity (crmid,smcreatorid,smownerid,setype,description,createdtime,modifiedtime) values(?, ?, ?, ?, ?, ?, ?)';\n\t\t\t\t$params1 = array(\n\t\t\t\t\t$current_id,\n\t\t\t\t\t$current_user->id,\n\t\t\t\t\t$ownerid,\n\t\t\t\t\t$module . ' Image',\n\t\t\t\t\t$description_val,\n\t\t\t\t\t$adb->formatDate($date_var, true),\n\t\t\t\t\t$adb->formatDate($date_var, true)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t$sql1 = 'insert into vtiger_crmentity (crmid,smcreatorid,smownerid,setype,description,createdtime,modifiedtime) values(?, ?, ?, ?, ?, ?, ?)';\n\t\t\t\t$params1 = array(\n\t\t\t\t\t$current_id,\n\t\t\t\t\t$current_user->id,\n\t\t\t\t\t$ownerid,\n\t\t\t\t\t$module . Field_Metadata::ATTACHMENT_ENTITY,\n\t\t\t\t\t$description_val,\n\t\t\t\t\t$adb->formatDate($date_var, true),\n\t\t\t\t\t$adb->formatDate($date_var, true)\n\t\t\t\t);\n\t\t\t}\n\t\t\t$adb->pquery($sql1, $params1);\n\n\t\t\t$sql2 = 'insert into vtiger_attachments(attachmentsid, name, description, type, path) values(?, ?, ?, ?, ?)';\n\t\t\t$params2 = array($current_id, $filename, $description_val, $filetype, $upload_file_path);\n\t\t\t$adb->pquery($sql2, $params2);\n\n\t\t\tif (((isset($_REQUEST['mode']) && $_REQUEST['mode']=='edit') || $this->mode=='edit') && $id!='' && isset($_REQUEST['fileid']) && $_REQUEST['fileid']!='') {\n\t\t\t\t$adb->pquery('delete from vtiger_seattachmentsrel where crmid=? and attachmentsid=?', array($id, vtlib_purify($_REQUEST['fileid'])));\n\t\t\t}\n\t\t\tif ($module == 'Documents') {\n\t\t\t\t$query = 'delete from vtiger_seattachmentsrel where crmid = ?';\n\t\t\t\t$qparams = array($id);\n\t\t\t\t$adb->pquery($query, $qparams);\n\t\t\t}\n\t\t\tif ($module == 'Contacts' || (property_exists($this, 'HasDirectImageField') && $this->HasDirectImageField)) {\n\t\t\t\tif ($module == 'Contacts') {\n\t\t\t\t\t$imageattachment = 'Image';\n\t\t\t\t} else {\n\t\t\t\t\t$imageattachment = 'Attachment';\n\t\t\t\t}\n\t\t\t\t$att_sql = \"select vtiger_seattachmentsrel.attachmentsid from vtiger_seattachmentsrel\n\t\t\t\t inner join vtiger_crmentity on vtiger_crmentity.crmid=vtiger_seattachmentsrel.attachmentsid\n\t\t\t\t inner join vtiger_attachments on vtiger_crmentity.crmid=vtiger_attachments.attachmentsid\n\t\t\t\t where vtiger_crmentity.setype='$module $imageattachment'\n\t\t\t\t  and vtiger_attachments.name=?\n\t\t\t\t  and vtiger_seattachmentsrel.crmid=?\";\n\t\t\t\t$res = $adb->pquery($att_sql, array($attachmentname,$id));\n\t\t\t\t$attachmentsid = $adb->query_result($res, 0, 'attachmentsid');\n\t\t\t\tif ($attachmentsid != '') {\n\t\t\t\t\t$cntrels = $adb->pquery('select count(*) as cnt from vtiger_seattachmentsrel where attachmentsid=?', array($attachmentsid));\n\t\t\t\t\t$numrels = $adb->query_result($cntrels, 0, 'cnt');\n\t\t\t\t\t$adb->pquery('delete from vtiger_seattachmentsrel where crmid=? and attachmentsid=?', array($id, $attachmentsid));\n\t\t\t\t\tif ($numrels == 1) {\n\t\t\t\t\t\t$adb->pquery('delete from vtiger_crmentity where crmid=?', array($attachmentsid));\n\t\t\t\t\t}\n\t\t\t\t\t$adb->pquery('insert into vtiger_seattachmentsrel values(?,?)', array($id, $current_id));\n\t\t\t\t} else {\n\t\t\t\t\t$adb->pquery('insert into vtiger_seattachmentsrel values(?,?)', array($id, $current_id));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$adb->pquery('insert into vtiger_seattachmentsrel values(?,?)', array($id, $current_id));\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\t$log->debug('< uploadAndSaveFile: skip save attachment process');\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/** Function to insert values in the crmentity table for the specified module\n\t * @param string module\n\t */\n\tprivate function insertIntoCrmEntity($module) {\n\t\tglobal $adb, $current_user;\n\t\t$crmvalues = $this->getCrmEntityValues($module);\n\t\t$ownerid = $crmvalues['ownerid'];\n\t\tif ($this->mode == 'edit') {\n\t\t\t$userprivs = $current_user->getPrivileges();\n\t\t\t$tabid = getTabid($module);\n\t\t\t$cbuuidupdate = '';\n\t\t\tif (!empty($this->column_fields['cbuuid'])) {\n\t\t\t\t$cbuuidupdate = $adb->convert2Sql(',cbuuid=?', array($this->column_fields['cbuuid']));\n\t\t\t}\n\t\t\tif ($userprivs->hasGlobalReadPermission()) {\n\t\t\t\t$sql = \"update vtiger_crmentity set smownerid=?,modifiedby=?,description=?,modifiedtime=? $cbuuidupdate where crmid=?\";\n\t\t\t\t$params = array($ownerid, $current_user->id, $crmvalues['description'], $crmvalues['date'], $this->id);\n\t\t\t} else {\n\t\t\t\t$profileList = getCurrentUserProfileList();\n\t\t\t\t$perm_qry = 'SELECT 1\n\t\t\t\t\tFROM vtiger_field\n\t\t\t\t\tINNER JOIN vtiger_profile2field ON vtiger_profile2field.fieldid = vtiger_field.fieldid\n\t\t\t\t\tINNER JOIN vtiger_def_org_field ON vtiger_def_org_field.fieldid = vtiger_field.fieldid\n\t\t\t\t\tWHERE vtiger_field.columnname=? AND vtiger_field.tabid=? AND vtiger_profile2field.visible=0 AND vtiger_profile2field.readonly=0 AND\n\t\t\t\t\t\tvtiger_profile2field.profileid IN (' . generateQuestionMarks($profileList) . \") AND\n\t\t\t\t\t\tvtiger_def_org_field.visible = 0 and vtiger_field.tablename='vtiger_crmentity' AND\n\t\t\t\t\t\tvtiger_field.displaytype in (1,3) and vtiger_field.presence in (0,2);\";\n\t\t\t\t$perm_result = $adb->pquery($perm_qry, array('description', $tabid, $profileList));\n\t\t\t\tif ($adb->num_rows($perm_result)>0) {\n\t\t\t\t\t$sql = \"update vtiger_crmentity set smownerid=?,modifiedby=?,description=?,modifiedtime=? $cbuuidupdate where crmid=?\";\n\t\t\t\t\t$params = array($ownerid, $current_user->id, $crmvalues['description'], $crmvalues['date'], $this->id);\n\t\t\t\t} else {\n\t\t\t\t\t$sql = \"update vtiger_crmentity set smownerid=?,modifiedby=?,modifiedtime=? $cbuuidupdate where crmid=?\";\n\t\t\t\t\t$params = array($ownerid, $current_user->id, $crmvalues['date'], $this->id);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$rdo = $adb->pquery($sql, $params);\n\t\t\tif ($rdo) {\n\t\t\t\t$adb->pquery(\n\t\t\t\t\t\"UPDATE vtiger_crmobject set smownerid=?,modifiedtime=? $cbuuidupdate WHERE crmid=?\",\n\t\t\t\t\tarray($ownerid, $crmvalues['date'], $this->id)\n\t\t\t\t);\n\t\t\t}\n\t\t\t$sql1 = 'delete from vtiger_ownernotify where crmid=?';\n\t\t\t$params1 = array($this->id);\n\t\t\t$adb->pquery($sql1, $params1);\n\t\t\tif ($ownerid != $current_user->id) {\n\t\t\t\t$sql1 = 'insert into vtiger_ownernotify values(?,?,?)';\n\t\t\t\t$params1 = array($this->id, $ownerid, null);\n\t\t\t\t$adb->pquery($sql1, $params1);\n\t\t\t}\n\t\t} else {\n\t\t\t//if this is the create mode and the group allocation is chosen, then do the following\n\t\t\t$current_id = $adb->getUniqueID('vtiger_crmentity');\n\t\t\t$_REQUEST['currentid'] = $current_id;\n\t\t\tif ($current_user->id == '') {\n\t\t\t\t$current_user->id = 0;\n\t\t\t}\n\t\t\t$this->column_fields['record_id'] = $current_id;\n\t\t\t$this->column_fields['record_module'] = $module;\n\t\t\tif (empty($this->column_fields['cbuuid'])) {\n\t\t\t\t$this->column_fields['createdtime'] = $crmvalues['created_date'];\n\t\t\t\t$cbuuid = $this->getUUID();\n\t\t\t} else {\n\t\t\t\t$cbuuid = $this->column_fields['cbuuid'];\n\t\t\t}\n\t\t\t$sql = 'insert into vtiger_crmentity (crmid,smcreatorid,smownerid,setype,description,modifiedby,createdtime,modifiedtime,cbuuid) values(?,?,?,?,?,?,?,?,?)';\n\t\t\t$params = array($current_id, $crmvalues['createdbyuser'], $ownerid, $module, $crmvalues['description'], $current_user->id, $crmvalues['created_date'], $crmvalues['modified_date'], $cbuuid);\n\t\t\t$rdo = $adb->pquery($sql, $params);\n\t\t\tif ($rdo) {\n\t\t\t\t$adb->pquery(\n\t\t\t\t\t'INSERT INTO vtiger_crmobject (crmid,deleted,setype,smownerid,modifiedtime,cbuuid) values (?,0,?,?,?,?)',\n\t\t\t\t\tarray($current_id, $module, $ownerid, $crmvalues['modified_date'], $cbuuid)\n\t\t\t\t);\n\t\t\t}\n\t\t\t$this->id = $current_id;\n\t\t}\n\t}\n\n\tprivate function getCrmEntityValues($module) {\n\t\tglobal $adb, $current_user;\n\t\t$crmvalues = array();\n\t\t$crmvalues['module'] = $module;\n\t\t$crmvalues['date'] = $adb->formatDate(date('Y-m-d H:i:s'), true);\n\t\t$crmvalues['created_date'] = $crmvalues['date'];\n\t\t$crmvalues['createdbyuser'] = $current_user->id;\n\t\tif (self::isBulkSaveMode()) {\n\t\t\tif (!empty($this->column_fields['createdtime'])) {\n\t\t\t\t$crmvalues['created_date'] = $adb->formatDate($this->column_fields['createdtime'], true);\n\t\t\t}\n\t\t\tif (!empty($this->column_fields['creator'])) {\n\t\t\t\t$crmvalues['createdbyuser'] = $this->column_fields['creator'];\n\t\t\t}\n\t\t\t//NOTE : modifiedtime ignored to support vtws_sync API track changes.\n\t\t}\n\t\t$crmvalues['modified_date'] = $crmvalues['date'];\n\n\t\t$ownerid = $this->sanitizeOwnerField($this->column_fields['assigned_user_id']);\n\n\t\t$res = $adb->pquery('select ownedby from vtiger_tab where name=?', array($module));\n\t\t$this->ownedby = $adb->query_result($res, 0, 'ownedby');\n\n\t\tif ($this->ownedby == 1) {\n\t\t\t$ownerid = $current_user->id;\n\t\t}\n\t\tif (empty($ownerid)) {\n\t\t\tif ($this->mode != 'edit') {\n\t\t\t\t$ownerid = $current_user->id;\n\t\t\t} else {\n\t\t\t\t$ownerrs = $adb->pquery('select smownerid from '.$this->crmentityTable.' where crmid=?', array($this->id));\n\t\t\t\t$ownerid = $adb->query_result($ownerrs, 0, 0);\n\t\t\t}\n\t\t}\n\t\t$crmvalues['ownerid'] = $ownerid;\n\t\t$crmvalues['description'] = (empty($this->column_fields['description']) ? '' : $this->column_fields['description']);\n\t\treturn $crmvalues;\n\t}\n\n\tprivate function setCrmEntityValues($values) {\n\t\tglobal $current_user;\n\t\t$this->column_fields['created_user_id'] = $values['createdbyuser'];\n\t\t$this->column_fields['assigned_user_id'] = $this->sanitizeOwnerField($values['ownerid']);\n\t\t$this->column_fields['modifiedby'] = $current_user->id;\n\t\t$this->column_fields['createdtime'] = $values['created_date'];\n\t\t$this->column_fields['modifiedtime'] = $values['modified_date'];\n\t\t$this->column_fields['description'] = $values['description'];\n\t}\n\n\tpublic function sanitizeOwnerField($value, $defaultCurrent = true) {\n\t\tglobal $current_user;\n\t\t$ownerid = (empty($value) && $defaultCurrent) ? $current_user->id : $value;\n\t\tif (strpos($ownerid, 'x')>0) { // we have a WSid\n\t\t\t$usrWSid = vtws_getEntityId('Users');\n\t\t\t$grpWSid = vtws_getEntityId('Groups');\n\t\t\tlist($inputWSid,$ownerid) = explode('x', $ownerid);\n\t\t\tif ($usrWSid!=$inputWSid && $grpWSid!=$inputWSid) {\n\t\t\t\tTerminateExecution::die('Invalid user id!');\n\t\t\t}\n\t\t}\n\t\treturn $ownerid;\n\t}\n\n\t// Function which returns the value based on result type (array / ADODB ResultSet)\n\tprivate function resolve_query_result_value($result, $index, $columnname) {\n\t\tglobal $adb;\n\t\tif (is_array($result)) {\n\t\t\treturn $result[$index][$columnname];\n\t\t} else {\n\t\t\treturn $adb->query_result($result, $index, $columnname);\n\t\t}\n\t}\n\n\t/** Function to insert values in the specifed table for the specified module\n\t * @param string table name\n\t * @param string module\n\t */\n\tprivate function insertIntoEntityTable($table_name, $module) {\n\t\tglobal $log, $current_user, $app_strings, $from_wf, $adb;\n\t\t$log->debug(\"> insertIntoEntityTable $module $table_name\");\n\t\t$insertion_mode = $this->mode;\n\n\t\t//Checking if entry is already present so we have to update\n\t\tif ($insertion_mode == 'edit' && $table_name!='vtiger_invoice_recurring_info') {\n\t\t\t$tablekey = $this->tab_name_index[$table_name];\n\t\t\t// Make selection on the primary key of the module table to check.\n\t\t\t$check_query = \"select $tablekey from $table_name where $tablekey=?\";\n\t\t\t$check_result = $adb->pquery($check_query, array($this->id));\n\n\t\t\t$num_rows = $adb->num_rows($check_result);\n\n\t\t\tif ($num_rows <= 0) {\n\t\t\t\t$insertion_mode = '';\n\t\t\t}\n\t\t\t$creatingdisplay = '';\n\t\t} else {\n\t\t\t$creatingdisplay = ',5';\n\t\t}\n\t\t$this->column_fields['assigned_user_id'] = $this->sanitizeOwnerField($this->column_fields['assigned_user_id']);\n\t\t$selectFields = 'fieldname, columnname, uitype, typeofdata';\n\n\t\t$tabid = getTabid($module);\n\t\t$uniqueFieldsRestriction = 'vtiger_field.fieldid IN (select min(vtiger_field.fieldid) from vtiger_field where vtiger_field.tabid=? GROUP BY vtiger_field.columnname)';\n\t\tif ($insertion_mode == 'edit') {\n\t\t\t$update = array();\n\t\t\t$update_params = array();\n\t\t\t$userprivs = $current_user->getPrivileges();\n\t\t\tif (isset($from_wf) && $from_wf) {\n\t\t\t\t$sql = \"select $selectFields from vtiger_field where $uniqueFieldsRestriction and tablename=? and displaytype in (1,3,4$creatingdisplay) and presence in (0,2)\";\n\t\t\t\t$params = array($tabid, $table_name);\n\t\t\t} elseif ($userprivs->hasGlobalReadPermission()) {\n\t\t\t\t$sql = \"select $selectFields from vtiger_field where $uniqueFieldsRestriction and tablename=? and displaytype in (1,3$creatingdisplay) and presence in (0,2)\";\n\t\t\t\t$params = array($tabid, $table_name);\n\t\t\t} else {\n\t\t\t\t$profileList = getCurrentUserProfileList();\n\t\t\t\tif (count($profileList) > 0) {\n\t\t\t\t\t$sql = \"SELECT distinct $selectFields\n\t\t\t\t\t\tFROM vtiger_field\n\t\t\t\t\t\tINNER JOIN vtiger_profile2field\n\t\t\t\t\t\tON vtiger_profile2field.fieldid = vtiger_field.fieldid\n\t\t\t\t\t\tINNER JOIN vtiger_def_org_field\n\t\t\t\t\t\tON vtiger_def_org_field.fieldid = vtiger_field.fieldid\n\t\t\t\t\t\tWHERE $uniqueFieldsRestriction\n\t\t\t\t\t\tAND vtiger_profile2field.visible = 0 AND vtiger_profile2field.readonly = 0\n\t\t\t\t\t\tAND vtiger_profile2field.profileid IN (\" . generateQuestionMarks($profileList) . \")\n\t\t\t\t\t\tAND vtiger_def_org_field.visible = 0 and vtiger_field.tablename=? and vtiger_field.displaytype in (1,3$creatingdisplay) and vtiger_field.presence in (0,2)\";\n\t\t\t\t\t$params = array($tabid, $profileList, $table_name);\n\t\t\t\t} else {\n\t\t\t\t\t$sql = \"SELECT distinct $selectFields\n\t\t\t\t\t\tFROM vtiger_field\n\t\t\t\t\t\tINNER JOIN vtiger_profile2field\n\t\t\t\t\t\tON vtiger_profile2field.fieldid = vtiger_field.fieldid\n\t\t\t\t\t\tINNER JOIN vtiger_def_org_field\n\t\t\t\t\t\tON vtiger_def_org_field.fieldid = vtiger_field.fieldid\n\t\t\t\t\t\tWHERE $uniqueFieldsRestriction\n\t\t\t\t\t\tAND vtiger_profile2field.visible = 0 AND vtiger_profile2field.readonly = 0\n\t\t\t\t\t\tAND vtiger_def_org_field.visible = 0 and vtiger_field.tablename=? and vtiger_field.displaytype in (1,3$creatingdisplay) and vtiger_field.presence in (0,2)\";\n\t\t\t\t\t$params = array($tabid, $table_name);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$table_index_column = $this->tab_name_index[$table_name];\n\t\t\tif ($table_index_column == 'id' && $table_name == 'vtiger_users') {\n\t\t\t\t$this->id = $adb->getUniqueID('vtiger_users');\n\t\t\t}\n\t\t\tif ($this->denormalized && $table_name == $this->crmentityTable) {\n\t\t\t\t$this->id = $adb->getUniqueID('vtiger_crmentity');\n\t\t\t\t$this->setCrmEntityValues($this->getCrmEntityValues($module));\n\t\t\t}\n\t\t\t$column = array($table_index_column);\n\t\t\t$value = array($this->id);\n\t\t\t$sql = \"select $selectFields from vtiger_field where $uniqueFieldsRestriction and tablename=? and displaytype in (1,3,4$creatingdisplay) and vtiger_field.presence in (0,2)\";\n\t\t\t$params = array($tabid, $table_name);\n\t\t}\n\n\t\t// Attempt to re-use the query-result to avoid reading for every save operation\n\t\tstatic $_privatecache = array();\n\n\t\t$cachekey = md5($insertion_mode . $sql . json_encode($params));\n\n\t\tif (!isset($_privatecache[$cachekey])) {\n\t\t\t$result = $adb->pquery($sql, $params);\n\t\t\t$noofrows = $adb->num_rows($result);\n\n\t\t\tif (CRMEntity::isBulkSaveMode()) {\n\t\t\t\t$cacheresult = array();\n\t\t\t\tfor ($i = 0; $i < $noofrows; ++$i) {\n\t\t\t\t\t$cacheresult[] = $adb->fetch_array($result);\n\t\t\t\t}\n\t\t\t\t$_privatecache[$cachekey] = $cacheresult;\n\t\t\t}\n\t\t} else { // Useful when doing bulk save\n\t\t\t$result = $_privatecache[$cachekey];\n\t\t\t$noofrows = count($result);\n\t\t}\n\n\t\tfor ($i = 0; $i < $noofrows; $i++) {\n\t\t\t$fieldname = $this->resolve_query_result_value($result, $i, 'fieldname');\n\t\t\t$columname = $this->resolve_query_result_value($result, $i, 'columnname');\n\t\t\t$uitype = $this->resolve_query_result_value($result, $i, 'uitype');\n\t\t\t$typeofdata = $this->resolve_query_result_value($result, $i, 'typeofdata');\n\n\t\t\t$typeofdata_array = explode('~', $typeofdata);\n\t\t\t$datatype = $typeofdata_array[0];\n\n\t\t\t$ajaxSave = false;\n\t\t\tif ((isset($_REQUEST['file']) && $_REQUEST['file'] == 'DetailViewAjax' && isset($_REQUEST['ajxaction']) && $_REQUEST['ajxaction'] == 'DETAILVIEW'\n\t\t\t\t&& isset($_REQUEST['fldName']) && $_REQUEST['fldName'] != $fieldname)\n\t\t\t\t|| (isset($_REQUEST['action']) && $_REQUEST['action'] == 'MassEditSave' && !isset($_REQUEST[$fieldname.'_mass_edit_check'])\n\t\t\t\t&& (!isset($_REQUEST['ajxaction']) || $_REQUEST['ajxaction'] != 'Workflow'))\n\t\t\t\t|| (!empty($this->column_fields['__cbws_skipcurdbconv'.$fieldname]) || !empty($this->column_fields['__cbws_skipcurdbconvall']))\n\t\t\t) {\n\t\t\t\t$ajaxSave = true;\n\t\t\t}\n\n\t\t\tif ($uitype == 4 && $insertion_mode != 'edit') {\n\t\t\t\t$fldvalue = '';\n\t\t\t\t// Bulk Save Mode: Avoid generation of module sequence number, take care later.\n\t\t\t\tif (!CRMEntity::isBulkSaveMode()) {\n\t\t\t\t\t$fldvalue = $this->setModuleSeqNumber('increment', $module);\n\t\t\t\t}\n\t\t\t\t$this->column_fields[$fieldname] = $fldvalue;\n\t\t\t}\n\t\t\tif (isset($this->column_fields[$fieldname])) {\n\t\t\t\tif ($uitype == 56) {\n\t\t\t\t\tif ($this->column_fields[$fieldname] === 'on' || $this->column_fields[$fieldname] == 1) {\n\t\t\t\t\t\t$fldvalue = '1';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$fldvalue = '0';\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == 15 || $uitype == 16 || $uitype == 1613 || $uitype == 1614 || $uitype == 1615) {\n\t\t\t\t\tif ($this->column_fields[$fieldname] == $app_strings['LBL_NOT_ACCESSIBLE']) {\n\t\t\t\t\t\t//If the value in the request is Not Accessible for a picklist, the existing value will be replaced instead of Not Accessible value.\n\t\t\t\t\t\t$sql = \"select $columname from $table_name where \" . $this->tab_name_index[$table_name] . '=?';\n\t\t\t\t\t\t$res = $adb->pquery($sql, array($this->id));\n\t\t\t\t\t\t$pick_val = $adb->query_result($res, 0, $columname);\n\t\t\t\t\t\t$fldvalue = $pick_val;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$fldvalue = $this->column_fields[$fieldname];\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == 33 || $uitype == 3313 || $uitype == 3314 || $uitype == 1024 || $uitype == 1025) {\n\t\t\t\t\tif (empty($this->column_fields[$fieldname])) {\n\t\t\t\t\t\t$fldvalue = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!is_array($this->column_fields[$fieldname])) {\n\t\t\t\t\t\t\t$this->column_fields[$fieldname] = array_map('trim', explode('|##|', $this->column_fields[$fieldname]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$sql = 'select columnname,tablename from vtiger_field where tabid=? and fieldname=?';\n\t\t\t\t\t\t$res = $adb->pquery($sql, array($tabid,$fieldname));\n\t\t\t\t\t\t$colj=$adb->query_result($res, 0, 0);\n\t\t\t\t\t\t$tabj = $adb->query_result($res, 0, 1);\n\t\t\t\t\t\t$sql1=\"select $colj from $tabj where \" . $this->tab_name_index[$tabj] . '=?';\n\t\t\t\t\t\t$res = $adb->pquery($sql1, array($this->id));\n\t\t\t\t\t\t$vlera=$adb->query_result($res, 0, $colj);\n\t\t\t\t\t\tif (empty($vlera)) {\n\t\t\t\t\t\t\t$currentvalues = array();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$currentvalues = array_map('trim', explode('|##|', decode_html($vlera)));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$selectedvalues = $this->column_fields[$fieldname];\n\t\t\t\t\t\tif ($uitype == 3313 || $uitype == 3314) {\n\t\t\t\t\t\t\t$uservalues = getAllowedPicklistModules();\n\t\t\t\t\t\t} elseif ($uitype == 1025) {\n\t\t\t\t\t\t\t$uservalues = $currentvalues;\n\t\t\t\t\t\t} elseif ($uitype == 1024) {\n\t\t\t\t\t\t\t$roleid = $current_user->roleid;\n\t\t\t\t\t\t\t$subrole = getRoleSubordinates($roleid);\n\t\t\t\t\t\t\t$uservalues = array_merge($subrole, array($roleid));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$roleid=$current_user->roleid;\n\t\t\t\t\t\t\t$uservalues = getAssignedPicklistValues($fieldname, $roleid, $adb);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$vek=array_unique(array_merge(array_diff($currentvalues, $uservalues), $selectedvalues));\n\t\t\t\t\t\t$fldvalue = implode(Field_Metadata::MULTIPICKLIST_SEPARATOR, $vek);\n\t\t\t\t\t\tif ($uitype == 3313 || $uitype == 3314) {\n\t\t\t\t\t\t\t// this value cannot be over 1010 characters if it has an index, so we cut it at that length always\n\t\t\t\t\t\t\t$fldvaluecut = substr($fldvalue, 0, 1010);\n\t\t\t\t\t\t\tif ($fldvalue!=$fldvaluecut) {\n\t\t\t\t\t\t\t\t$fldvalue = substr($fldvaluecut, 0, strrpos($fldvaluecut, Field_Metadata::MULTIPICKLIST_SEPARATOR));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == 5 || $uitype == 6 || $uitype == 23) {\n\t\t\t\t\t//Added to avoid function call getDBInsertDateValue in ajax save\n\t\t\t\t\tif (isset($current_user->date_format) && !$ajaxSave) {\n\t\t\t\t\t\t$fldvalue = getValidDBInsertDateValue($this->column_fields[$fieldname]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$fldvalue = $this->column_fields[$fieldname];\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == 14 && empty($this->column_fields[$fieldname])) {\n\t\t\t\t\t$fldvalue = null;\n\t\t\t\t} elseif ($uitype == 50) {\n\t\t\t\t\t$timefmt = '';\n\t\t\t\t\tif (!empty($this->column_fields[$fieldname]) && strlen($this->column_fields[$fieldname])>16) {\n\t\t\t\t\t\t$seconds = substr($this->column_fields[$fieldname], -2);\n\t\t\t\t\t\tif (!is_numeric($seconds)) {\n\t\t\t\t\t\t\t$timefmt = $seconds;\n\t\t\t\t\t\t\t$this->column_fields[$fieldname] = substr($this->column_fields[$fieldname], 0, 16);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (isset($current_user->date_format) && !$ajaxSave) {\n\t\t\t\t\t\t$fldvalue = getValidDBInsertDateTimeValue($this->column_fields[$fieldname]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$fldvalue = $this->column_fields[$fieldname];\n\t\t\t\t\t}\n\t\t\t\t\tif (empty($fldvalue)) {\n\t\t\t\t\t\t$fldvalue = null;\n\t\t\t\t\t}\n\t\t\t\t\tif ($fldvalue != null && !$ajaxSave) {\n\t\t\t\t\t\tif (isset($_REQUEST['timefmt_' . $fieldname])) {\n\t\t\t\t\t\t\t$timefmt = vtlib_purify($_REQUEST['timefmt_' . $fieldname]);\n\t\t\t\t\t\t\tunset($_REQUEST['timefmt_' . $fieldname]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$fldvalue = DateTimeField::formatDatebaseTimeString($fldvalue, $timefmt);\n\t\t\t\t\t\t$this->column_fields[$fieldname] = $fldvalue;\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == 26) {\n\t\t\t\t\tif (empty($this->column_fields[$fieldname])) {\n\t\t\t\t\t\t$fldvalue = 1; //the documents will stored in default folder\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$fldvalue = $this->column_fields[$fieldname];\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == 28) {\n\t\t\t\t\tif ($this->column_fields[$fieldname] == null) {\n\t\t\t\t\t\t$fileQuery = $adb->pquery('SELECT filename from vtiger_notes WHERE notesid=?', array($this->id));\n\t\t\t\t\t\t$fldvalue = null;\n\t\t\t\t\t\tif (isset($fileQuery)) {\n\t\t\t\t\t\t\t$rowCount = $adb->num_rows($fileQuery);\n\t\t\t\t\t\t\tif ($rowCount > 0) {\n\t\t\t\t\t\t\t\t$fldvalue = $adb->query_result($fileQuery, 0, 'filename');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$fldvalue = $this->column_fields[$fieldname];\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == 8) {\n\t\t\t\t\t$this->column_fields[$fieldname] = rtrim($this->column_fields[$fieldname], ',');\n\t\t\t\t\t$ids = explode(',', $this->column_fields[$fieldname]);\n\t\t\t\t\t$fldvalue = json_encode($ids);\n\t\t\t\t} elseif ($uitype == 12) {\n\t\t\t\t\t// Bulk Save Mode: Consider the FROM email address as specified, if not lookup\n\t\t\t\t\t$fldvalue = $this->column_fields[$fieldname];\n\t\t\t\t\tif (empty($fldvalue)) {\n\t\t\t\t\t\t$query = 'SELECT email1 FROM vtiger_users WHERE id=?';\n\t\t\t\t\t\t$res = $adb->pquery($query, array($current_user->id));\n\t\t\t\t\t\t$rows = $adb->num_rows($res);\n\t\t\t\t\t\tif ($rows > 0) {\n\t\t\t\t\t\t\t$fldvalue = $adb->query_result($res, 0, 'email1');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} elseif (($uitype == 72 || $uitype == 7 || $uitype == 9) && !$ajaxSave) {\n\t\t\t\t\t// Some of the currency fields like Unit Price, Total, Sub-total and normal numbers do not need currency conversion during save\n\t\t\t\t\t$fldvalue = CurrencyField::convertToDBFormat($this->column_fields[$fieldname], null, true);\n\t\t\t\t\tif ($insertion_mode == 'edit') {\n\t\t\t\t\t\t$fldvalue = $this->adjustCurrencyField($fieldname, $fldvalue, $tabid);\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == 71 && !$ajaxSave) {\n\t\t\t\t\t$fldvalue = CurrencyField::convertToDBFormat($this->column_fields[$fieldname]);\n\t\t\t\t\tif ($insertion_mode == 'edit') {\n\t\t\t\t\t\t$fldvalue = $this->adjustCurrencyField($fieldname, $fldvalue, $tabid);\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == '69m' || $uitype == '69') {\n\t\t\t\t\t$fldvalue = urldecode($this->column_fields[$fieldname]);\n\t\t\t\t} else {\n\t\t\t\t\t$fldvalue = $this->column_fields[$fieldname];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$fldvalue = '';\n\t\t\t}\n\t\t\tif ($fldvalue == '') {\n\t\t\t\t$fldvalue = $this->get_column_value($columname, $fldvalue, $fieldname, $uitype, $datatype);\n\t\t\t}\n\n\t\t\tif ($insertion_mode == 'edit') {\n\t\t\t\tif ($table_name != 'vtiger_ticketcomments' && $uitype != 4) {\n\t\t\t\t\t$update[] = $columname . '=?';\n\t\t\t\t\t$update_params[] = $fldvalue;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$column[] = $columname;\n\t\t\t\t$value[] = $fldvalue;\n\t\t\t}\n\t\t}\n\t\t$mtime = $adb->formatDate(date('Y-m-d H:i:s'), true);\n\t\tif ($this->denormalized && $table_name == $this->crmentityTable) {\n\t\t\tif ($insertion_mode == 'edit') {\n\t\t\t\tif (!empty($this->column_fields['cbuuid'])) {\n\t\t\t\t\t$update[] = 'cbuuid=?';\n\t\t\t\t\t$update_params[] = $this->column_fields['cbuuid'];\n\t\t\t\t}\n\t\t\t\tif (!in_array('modifiedtime=?', $update)) {\n\t\t\t\t\t$update[] = 'modifiedtime=?';\n\t\t\t\t\t$update_params[] = $mtime;\n\t\t\t\t}\n\t\t\t\tif (!in_array('modifiedby=?', $update)) {\n\t\t\t\t\t$update[] = 'modifiedby=?';\n\t\t\t\t\t$update_params[] = $current_user->id;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$_REQUEST['currentid'] = $this->id;\n\t\t\t\t$this->column_fields['record_id'] = $this->id;\n\t\t\t\t$this->column_fields['record_module'] = $module;\n\t\t\t\t$this->column_fields['cbuuid'] = (empty($this->column_fields['cbuuid']) ? $this->getUUID() : $this->column_fields['cbuuid']);\n\t\t\t\tif (!in_array('crmid', $column)) {\n\t\t\t\t\t$column[] = 'crmid';\n\t\t\t\t\t$value[] = $this->id;\n\t\t\t\t}\n\t\t\t\tif (!in_array('setype', $column)) {\n\t\t\t\t\t$column[] = 'setype';\n\t\t\t\t\t$value[] = $module;\n\t\t\t\t}\n\t\t\t\tif (!in_array('cbuuid', $column)) {\n\t\t\t\t\t$column[] = 'cbuuid';\n\t\t\t\t\t$value[] = $this->column_fields['cbuuid'];\n\t\t\t\t}\n\t\t\t\tif (!in_array('createdtime', $column)) {\n\t\t\t\t\t$column[] = 'createdtime';\n\t\t\t\t\t$value[] =$this->column_fields['createdtime'];\n\t\t\t\t}\n\t\t\t\tif (!in_array('modifiedtime', $column)) {\n\t\t\t\t\t$column[] = 'modifiedtime';\n\t\t\t\t\t$value[] =$mtime;\n\t\t\t\t}\n\t\t\t\tif (!in_array('smcreatorid', $column)) {\n\t\t\t\t\t$column[] = 'smcreatorid';\n\t\t\t\t\t$value[] =$this->column_fields['created_user_id'];\n\t\t\t\t}\n\t\t\t\tif (!in_array('modifiedby', $column)) {\n\t\t\t\t\t$column[] = 'modifiedby';\n\t\t\t\t\t$value[] =$current_user->id;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$rdo = true;\n\t\tif ($insertion_mode == 'edit') {\n\t\t\t// If update is empty the query fails\n\t\t\tif (!empty($update)) {\n\t\t\t\t$sql1 = \"update $table_name set \" . implode(',', $update) . ' where ' . $this->tab_name_index[$table_name] . '=?';\n\t\t\t\t$update_params[] = $this->id;\n\t\t\t\t$rdo = $adb->pquery($sql1, $update_params);\n\t\t\t\tif ($rdo) {\n\t\t\t\t\t$adb->pquery(\n\t\t\t\t\t\t'UPDATE vtiger_crmobject set smownerid=?,modifiedtime=? WHERE crmid=?',\n\t\t\t\t\t\tarray($this->column_fields['assigned_user_id'], $mtime, $this->id)\n\t\t\t\t\t);\n\t\t\t\t\tif (!empty($this->column_fields['cbuuid'])) {\n\t\t\t\t\t\t$adb->pquery('UPDATE vtiger_crmobject set cbuuid=? WHERE crmid=?', array($this->column_fields['cbuuid'], $this->id));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$sql1 = \"insert into $table_name(\" . implode(',', $column) . ') values(' . generateQuestionMarks($value) . ')';\n\t\t\t$rdo = $adb->pquery($sql1, $value);\n\t\t\tif ($rdo) {\n\t\t\t\t$this->column_fields['cbuuid'] = (empty($this->column_fields['cbuuid']) ? $this->getUUID() : $this->column_fields['cbuuid']);\n\t\t\t\tif ($table_name == $this->crmentityTable && $this->denormalized) {\n\t\t\t\t\t$adb->pquery(\n\t\t\t\t\t\t'INSERT IGNORE INTO vtiger_crmobject (crmid,deleted,setype,smownerid,modifiedtime,cbuuid) values (?,0,?,?,?,?)',\n\t\t\t\t\t\tarray($this->id, $module, $this->column_fields['assigned_user_id'], $this->column_fields['modifiedtime'], $this->column_fields['cbuuid'])\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($rdo===false) {\n\t\t\t$log->fatal($adb->getErrorMsg());\n\t\t}\n\t}\n\n\t/** Function to retrieve maximum decimal values of currency field on save\n\t * @param string currency field name\n\t * @param float currency value they want to save\n\t * @param integer tabID of the module the field is on\n\t * @return float field value from database with maximum decimals if it is the same as value being saved\n\t */\n\tpublic function adjustCurrencyField($fieldname, $fldvalue, $tabid) {\n\t\tglobal $adb, $log, $current_user;\n\t\t$log->debug(\"> adjustCurrencyField $fieldname,$fldvalue\");\n\t\tif (isset(self::$dbvalues[$fieldname])) {\n\t\t\t$dbvalue = self::$dbvalues[$fieldname];\n\t\t} else {\n\t\t\t$dbvals = $result = array();\n\t\t\tforeach ($this->tab_name_index as $table_name => $index) {\n\t\t\t\t$result = $adb->pquery(\"select * from $table_name where $index=?\", array($this->id));\n\t\t\t\tif ($result && $adb->num_rows($result)>0) {\n\t\t\t\t\t$flds = $adb->fetch_array($result);\n\t\t\t\t\t$dbvals = array_merge($dbvals, $flds);\n\t\t\t\t}\n\t\t\t}\n\t\t\tself::$dbvalues = $dbvals;\n\t\t\t$dbvalue = empty(self::$dbvalues[$fieldname]) ? 0 : self::$dbvalues[$fieldname];\n\t\t\t$fldrs = $adb->pquery(\n\t\t\t\t'select fieldname,typeofdata from vtiger_field where vtiger_field.uitype in (7,9,71,72) and vtiger_field.tabid=?',\n\t\t\t\tarray($tabid)\n\t\t\t);\n\t\t\twhile ($fldinf = $adb->fetch_array($fldrs)) {\n\t\t\t\tself::$todvalues[$fldinf['fieldname']] = $fldinf['typeofdata'];\n\t\t\t}\n\t\t}\n\t\t$typeofdata = self::$todvalues[$fieldname];\n\t\t$decimals = CurrencyField::getDecimalsFromTypeOfData($typeofdata);\n\t\tif (round((float)$dbvalue, min($decimals, $current_user->no_of_currency_decimals))==$fldvalue) {\n\t\t\t$fldvalue = $dbvalue;\n\t\t}\n\t\t$log->debug('< adjustCurrencyField '.$fldvalue);\n\t\treturn $fldvalue;\n\t}\n\n\t/** Function to delete a record in the specifed table\n\t * @param string table name\n\t * The function will delete a record. The id is obtained from the class variable $this->id and the columnname got from $this->tab_name_index[$table_name]\n\t */\n\tpublic function deleteRelation($table_name) {\n\t\tglobal $adb;\n\t\t$check_query = \"select * from $table_name where \" . $this->tab_name_index[$table_name] . '=?';\n\t\t$check_result = $adb->pquery($check_query, array($this->id));\n\t\t$num_rows = $adb->num_rows($check_result);\n\n\t\tif ($num_rows == 1) {\n\t\t\t$del_query = \"DELETE from $table_name where \" . $this->tab_name_index[$table_name] . '=?';\n\t\t\t$adb->pquery($del_query, array($this->id));\n\t\t}\n\t}\n\n\t/** Function to attachment filename of the given entity\n\t * @param integer crm ID\n\t * The function will get the attachmentsid for the given entityid from vtiger_seattachmentsrel table and get the attachmentsname from vtiger_attachments table\n\t * returns the 'filename'\n\t */\n\tpublic function getOldFileName($notesid) {\n\t\tglobal $adb;\n\t\t$result = $adb->pquery('select * from vtiger_seattachmentsrel where crmid=?', array($notesid));\n\t\t$noofrows = $adb->num_rows($result);\n\t\tif ($noofrows != 0) {\n\t\t\t$attachmentid = $adb->query_result($result, 0, 'attachmentsid');\n\t\t}\n\t\tif ($attachmentid != '') {\n\t\t\t$rs = $adb->pquery('select * from vtiger_attachments where attachmentsid=?', array($attachmentid));\n\t\t\t$filename = $adb->query_result($rs, 0, 'name');\n\t\t}\n\t\treturn $filename;\n\t}\n\n\t/** Function to retrieve the information of the given recordid\n\t * @param integer Id\n\t * @param string module\n\t * This function retrieves the information from the database and sets the value in the class column_fields array\n\t */\n\tpublic function retrieve_entity_info($record, $module, $deleted = false, $from_wf = false, $throwexception = false) {\n\t\tglobal $adb, $app_strings, $current_user;\n\t\t$result = array();\n\n\t\t//Here we check if user can see this record.\n\t\tif (!$from_wf && isPermitted($module, 'DetailView', $record) != 'yes') {\n\t\t\t$this->column_fields['record_id'] = $record;\n\t\t\t$this->column_fields['record_module'] = $module;\n\t\t\treturn;\n\t\t}\n\n\t\tforeach ($this->tab_name_index as $table_name => $index) {\n\t\t\t$result[$table_name] = $adb->pquery(\"select * from $table_name where $index=?\", array($record));\n\t\t}\n\t\t$isRecordDeleted = 0;\n\t\tif (!in_array($module, $this->specialModules)) {\n\t\t\t$isRecordDeleted = $adb->query_result($result[$this->crmentityTable], 0, 'deleted');\n\t\t}\n\t\tif ($isRecordDeleted !== 0 && $isRecordDeleted !== '0' && !$deleted) {\n\t\t\tif ($throwexception) {\n\t\t\t\tthrow new InvalidArgumentException($app_strings['LBL_RECORD_DELETE'].\" $module: $record\", 1);\n\t\t\t} else {\n\t\t\t\trequire_once 'Smarty_setup.php';\n\t\t\t\t$smarty = new vtigerCRM_Smarty();\n\t\t\t\t$smarty->assign('APP', $app_strings);\n\t\t\t\t$smarty->assign('OPERATION_MESSAGE', $app_strings['LBL_RECORD_DELETE'].\" $module: $record\");\n\t\t\t\t$smarty->display('modules/Vtiger/OperationNotPermitted.tpl');\n\t\t\t\tdie();\n\t\t\t}\n\t\t}\n\n\t\t/* Block access to empty record */\n\t\tif (isset($this->table_name)) {\n\t\t\t$mod_index_col = $this->tab_name_index[$this->table_name];\n\t\t\tif ($adb->query_result($result[$this->table_name], 0, $mod_index_col) == '') {\n\t\t\t\tif ($throwexception) {\n\t\t\t\t\tthrow new InvalidArgumentException($app_strings['LBL_RECORD_NOT_FOUND'], 1);\n\t\t\t\t} else {\n\t\t\t\t\trequire_once 'Smarty_setup.php';\n\t\t\t\t\t$smarty = new vtigerCRM_Smarty();\n\t\t\t\t\t$smarty->assign('APP', $app_strings);\n\t\t\t\t\t$smarty->assign('OPERATION_MESSAGE', $app_strings['LBL_RECORD_NOT_FOUND']);\n\t\t\t\t\t$smarty->display('modules/Vtiger/OperationNotPermitted.tpl');\n\t\t\t\t\tif (GlobalVariable::getVariable('Debug_Record_Not_Found', false)) {\n\t\t\t\t\t\techo '<div class=\"slds-m-around_x-large\">';\n\t\t\t\t\t\techo 'Looking for ' . $this->table_name . '.' . $mod_index_col . ' in <br>' . print_r($result[$this->table_name]->sql, true);\n\t\t\t\t\t\techo '<pre>';\n\t\t\t\t\t\tdebug_print_backtrace();\n\t\t\t\t\t\techo '</pre></div>';\n\t\t\t\t\t}\n\t\t\t\t\tdie();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Lookup in cache for information\n\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module);\n\n\t\tif ($cachedModuleFields === false) {\n\t\t\t$tabid = getTabid($module);\n\n\t\t\t// Let us pick up all the fields first so that we can cache information\n\t\t\t$sql1 = 'SELECT fieldname, fieldid, fieldlabel, columnname, tablename, uitype, typeofdata, presence, defaultvalue, generatedtype, displaytype FROM vtiger_field WHERE tabid=?';\n\n\t\t\t// NOTE: Need to skip in-active fields which we will be done later.\n\t\t\t$result1 = $adb->pquery($sql1, array($tabid));\n\t\t\t$noofrows = $adb->num_rows($result1);\n\n\t\t\tif ($noofrows) {\n\t\t\t\twhile ($resultrow = $adb->fetch_array($result1)) {\n\t\t\t\t\t// Update information to cache for re-use\n\t\t\t\t\tVTCacheUtils::updateFieldInfo(\n\t\t\t\t\t\t$tabid,\n\t\t\t\t\t\t$resultrow['fieldname'],\n\t\t\t\t\t\t$resultrow['fieldid'],\n\t\t\t\t\t\t$resultrow['fieldlabel'],\n\t\t\t\t\t\t$resultrow['columnname'],\n\t\t\t\t\t\t$resultrow['tablename'],\n\t\t\t\t\t\t$resultrow['uitype'],\n\t\t\t\t\t\t$resultrow['typeofdata'],\n\t\t\t\t\t\t$resultrow['presence'],\n\t\t\t\t\t\t$resultrow['defaultvalue'],\n\t\t\t\t\t\t$resultrow['generatedtype'],\n\t\t\t\t\t\t$resultrow['displaytype']\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Get only active field information\n\t\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module);\n\t\t}\n\n\t\tif ($cachedModuleFields) {\n\t\t\tforeach ($cachedModuleFields as $fieldname => $fieldinfo) {\n\t\t\t\t$fieldcolname = $fieldinfo['columnname'];\n\t\t\t\t$tablename = $fieldinfo['tablename'];\n\t\t\t\t$fieldname = $fieldinfo['fieldname'];\n\t\t\t\t//Here we check if user has permissions to access this field.\n\t\t\t\t//If it is allowed then it will get the actual value, otherwise it gets an empty string.\n\t\t\t\tif ((!isset($from_wf) || !$from_wf) && getFieldVisibilityPermission($module, $current_user->id, $fieldname) != '0') {\n\t\t\t\t\t$this->column_fields[$fieldname] = '';\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// To avoid ADODB execption pick the entries that are in $tablename\n\t\t\t\tif (isset($result[$tablename])) {\n\t\t\t\t\t$fld_value = $adb->query_result($result[$tablename], 0, $fieldcolname);\n\t\t\t\t} else {\n\t\t\t\t\t$adb->println(\"There is no entry for this entity $record ($module) in the table $tablename\");\n\t\t\t\t\t$fld_value = '';\n\t\t\t\t}\n\t\t\t\t$this->column_fields[$fieldname] = $fld_value;\n\t\t\t}\n\t\t}\n\t\tif ($module == 'Users') {\n\t\t\tfor ($i = 0; $i < $noofrows; $i++) {\n\t\t\t\t$fieldcolname = $adb->query_result($result1, $i, 'columnname');\n\t\t\t\t$tablename = $adb->query_result($result1, $i, 'tablename');\n\t\t\t\t$fieldname = $adb->query_result($result1, $i, 'fieldname');\n\t\t\t\t$fld_value = $adb->query_result($result[$tablename], 0, $fieldcolname);\n\t\t\t\t$this->$fieldname = $fld_value;\n\t\t\t}\n\t\t}\n\n\t\t$this->id = $record;\n\t\t$this->column_fields['record_id'] = $record;\n\t\t$this->column_fields['record_module'] = $module;\n\t\tif (!in_array($module, $this->specialModules)) {\n\t\t\t$this->column_fields['cbuuid'] = $adb->query_result($result[$this->crmentityTable], 0, 'cbuuid');\n\t\t}\n\t}\n\n\t/** Function to retrieve the information of the given recordidS\n\t * @param array of CRMIds\n\t * @param string module\n\t * This function retrieves the information from the database and sets the value in the class fetched_records array\n\t */\n\tpublic function retrieve_entities_info($records, $module, $from_wf = false) {\n\t\tglobal $adb, $current_user;\n\t\t$result = array();\n\t\t$this->fetched_records = array();\n\t\tforeach ($this->tab_name_index as $table_name => $index) {\n\t\t\t$result[$table_name] = $adb->pquery(\"select * from $table_name where $index IN (\" . generateQuestionMarks($records) . ') ', $records);\n\t\t}\n\n\t\tif (isset($this->table_name)) {\n\t\t\t$this->tab_name_index[$this->table_name];\n\t\t}\n\n\t\t// Lookup in cache for information\n\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module);\n\n\t\tif ($cachedModuleFields === false) {\n\t\t\t$tabid = getTabid($module);\n\n\t\t\t// Let us pick up all the fields first so that we can cache information\n\t\t\t$sql1 = 'SELECT fieldname, fieldid, fieldlabel, columnname, tablename, uitype, typeofdata, presence, defaultvalue, generatedtype, displaytype FROM vtiger_field WHERE tabid=?';\n\n\t\t\t// NOTE: Need to skip in-active fields which we will be done later.\n\t\t\t$result1 = $adb->pquery($sql1, array($tabid));\n\t\t\t$noofrows = $adb->num_rows($result1);\n\n\t\t\tif ($noofrows) {\n\t\t\t\twhile ($resultrow = $adb->fetch_array($result1)) {\n\t\t\t\t\t// Update information to cache for re-use\n\t\t\t\t\tVTCacheUtils::updateFieldInfo(\n\t\t\t\t\t\t$tabid,\n\t\t\t\t\t\t$resultrow['fieldname'],\n\t\t\t\t\t\t$resultrow['fieldid'],\n\t\t\t\t\t\t$resultrow['fieldlabel'],\n\t\t\t\t\t\t$resultrow['columnname'],\n\t\t\t\t\t\t$resultrow['tablename'],\n\t\t\t\t\t\t$resultrow['uitype'],\n\t\t\t\t\t\t$resultrow['typeofdata'],\n\t\t\t\t\t\t$resultrow['presence'],\n\t\t\t\t\t\t$resultrow['defaultvalue'],\n\t\t\t\t\t\t$resultrow['generatedtype'],\n\t\t\t\t\t\t$resultrow['displaytype']\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Get only active field information\n\t\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module);\n\t\t}\n\n\t\tif ($cachedModuleFields) {\n\t\t\t$cachedIDPermissions = array();\n\t\t\tforeach ($cachedModuleFields as $fieldname => $fieldinfo) {\n\t\t\t\t$fieldcolname = $fieldinfo['columnname'];\n\t\t\t\t$tablename = $fieldinfo['tablename'];\n\t\t\t\t$fieldname = $fieldinfo['fieldname'];\n\t\t\t\t//Here we check if user has permissions to access this field.\n\t\t\t\t//If it is allowed then it will get the actual value, otherwise it gets an empty string.\n\t\t\t\t$setittoempty = false;\n\t\t\t\tif (!$from_wf) {\n\t\t\t\t\t$setittoempty = (getFieldVisibilityPermission($module, $current_user->id, $fieldname) != '0');\n\t\t\t\t}\n\t\t\t\t// To avoid ADODB execption pick the entries that are in $tablename\n\t\t\t\tif (isset($result[$tablename]) && !$setittoempty) {\n\t\t\t\t\tfor ($cn = 0; $cn < $adb->num_rows($result[$tablename]); $cn++) {\n\t\t\t\t\t\tif ($module=='Users') {\n\t\t\t\t\t\t\t$isRecordDeleted = $adb->query_result($result['vtiger_users'], $cn, 'deleted');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$isRecordDeleted = $adb->query_result($result[$this->crmentityTable], $cn, 'deleted');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($isRecordDeleted==0) {\n\t\t\t\t\t\t\tif ($module=='Users') {\n\t\t\t\t\t\t\t\t$tempid = $adb->query_result($result['vtiger_users'], $cn, 'id');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$tempid = $adb->query_result($result[$this->crmentityTable], $cn, 'crmid');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!$from_wf && !isset($cachedIDPermissions[$tempid])) {\n\t\t\t\t\t\t\t\t$cachedIDPermissions[$tempid] = isPermitted($module, 'DetailView', $tempid);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//Here we check if user can see this record.\n\t\t\t\t\t\t\tif (!$from_wf && $cachedIDPermissions[$tempid] != 'yes') {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$fld_value = $adb->query_result($result[$tablename], $cn, $fieldcolname);\n\t\t\t\t\t\t\t$this->fetched_records[$tempid][$fieldname] = $fld_value;\n\t\t\t\t\t\t\tif (!isset($this->fetched_records[$tempid]['record_id'])) {\n\t\t\t\t\t\t\t\t$this->fetched_records[$tempid]['record_id'] = $tempid;\n\t\t\t\t\t\t\t\t$this->fetched_records[$tempid]['record_module'] = $module;\n\t\t\t\t\t\t\t\tif ($module=='Users') {\n\t\t\t\t\t\t\t\t\t$this->fetched_records[$tempid]['cbuuid'] = '';\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$this->fetched_records[$tempid]['cbuuid'] = $adb->query_result($result[$this->crmentityTable], $cn, 'cbuuid');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} elseif (!empty($result[$this->crmentityTable])) {\n\t\t\t\t\tfor ($cn = 0; $cn < $adb->num_rows($result[$this->crmentityTable]); $cn++) {\n\t\t\t\t\t\t$isRecordDeleted = $adb->query_result($result[$this->crmentityTable], $cn, 'deleted');\n\t\t\t\t\t\tif ($isRecordDeleted==0) {\n\t\t\t\t\t\t\t$tempid = $adb->query_result($result[$this->crmentityTable], $cn, 'crmid');\n\t\t\t\t\t\t\tif (!$from_wf && !isset($cachedIDPermissions[$tempid])) {\n\t\t\t\t\t\t\t\t$cachedIDPermissions[$tempid] = isPermitted($module, 'DetailView', $tempid);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//Here we check if user can see this record.\n\t\t\t\t\t\t\tif (!$from_wf && $cachedIDPermissions[$tempid] != 'yes') {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$tempid = $adb->query_result($result[$this->crmentityTable], $cn, 'crmid');\n\t\t\t\t\t\t\t$fld_value = '';\n\t\t\t\t\t\t\t$this->fetched_records[$tempid][$fieldname] = $fld_value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Validate values trying to be saved.\n\t * @param array $_REQUEST input values. Note: column_fields array is already loaded\n\t * @return array\n\t *   saveerror: true if error false if not\n\t *   errormessage: message to return to user if error, empty otherwise\n\t *   error_action: action to redirect to inside the same module in case of error. if redirected to EditView (default action)\n\t *                 all values introduced by the user will be preloaded\n\t *   returnvalues: a urlencoded string of values to send to the receiving page. may be empty\n\t */\n\tpublic function preSaveCheck($request) {\n\t\tlist($request,$void,$saveerror,$errormessage,$error_action,$returnvalues) =\n\t\t\tcbEventHandler::do_filter('corebos.filter.preSaveCheck', array($request,$this,false,'','',''));\n\t\tif (!$saveerror && !empty($_FILES)) {\n\t\t\tforeach ($_FILES as $file_details) {\n\t\t\t\tif (validateImageFile($file_details) == 'true' && !validateImageContents($file_details['tmp_name'])) {\n\t\t\t\t\t$saveerror = true;\n\t\t\t\t\t$errormessage = getTranslatedString('LBL_IMAGESECURITY_ERROR');\n\t\t\t\t\t$error_action = 'EditView';\n\t\t\t\t\t$returnvalues = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn array($saveerror,$errormessage,$error_action,$returnvalues);\n\t}\n\n\t/** Validate record trying to be deleted.\n\t * @return array\n\t *   delerror: true if error false if not\n\t *   errormessage: message to return to user if error, empty otherwise\n\t */\n\tpublic function preDeleteCheck() {\n\t\tlist($void,$delerror,$errormessage) = cbEventHandler::do_filter('corebos.filter.preDeleteCheck', array($this,false,''));\n\t\treturn array($delerror,$errormessage);\n\t}\n\n\t/** Check launched when entering Edit View, called after creating object and loading variables. Will be empty on create\n\t * @param array $_REQUEST input values. Note: column_fields array is already loaded\n\t * @param object smarty template object in order to load variables for output\n\t * @return void\n\t */\n\tpublic function preEditCheck($request, $smarty) {\n\t\tlist($request,$smarty,$void) = cbEventHandler::do_filter('corebos.filter.preEditCheck', array($request,$smarty,$this));\n\t\treturn '';\n\t}\n\n\t/** Check launched when entering full Record View, called after creating object and loading variables.\n\t * @param array $_REQUEST input values. Note: column_fields array is already loaded\n\t * @param object smarty template object in order to load variables for output\n\t * @return void\n\t */\n\tpublic function preViewCheck($request, $smarty) {\n\t\tlist($request,$smarty,$void) = cbEventHandler::do_filter('corebos.filter.preViewCheck', array($request,$smarty,$this));\n\t\treturn '';\n\t}\n\n\t/** Function to saves the values in all the tables mentioned in the class variable $tab_name for the specified module\n\t * @param string module\n\t */\n\tpublic function save($module_name) {\n\t\tglobal $current_user, $adb;\n\t\tif (!empty($_REQUEST['FILTERFIELDSMAP'])) {\n\t\t\t$bmapname = vtlib_purify($_REQUEST['FILTERFIELDSMAP']);\n\t\t\t$cbMapid = GlobalVariable::getVariable('BusinessMapping_'.$bmapname, cbMap::getMapIdByName($bmapname));\n\t\t\tif ($cbMapid) {\n\t\t\t\t$cbMap = cbMap::getMapByID($cbMapid);\n\t\t\t\t$mtype = $cbMap->column_fields['maptype'];\n\t\t\t\t$mdmap = $cbMap->$mtype();\n\t\t\t\t$targetmodule = $mdmap['targetmodule'];\n\t\t\t\t$targetfield = $mdmap['linkfields']['targetfield'];\n\t\t\t\tif ($targetmodule == $module_name) {\n\t\t\t\t\tif ($targetfield != '') {\n\t\t\t\t\t\t$MDCurrentRecord = coreBOS_Session::get('MDCurrentRecord');\n\t\t\t\t\t\t$this->column_fields[$targetfield] = $MDCurrentRecord;\n\t\t\t\t\t}\n\t\t\t\t\tif ($this->mode=='' && $mtype=='MasterDetailLayout' && !empty($mdmap['sortfield'])) {\n\t\t\t\t\t\t$qg = new QueryGenerator($mdmap['targetmodule'], $current_user);\n\t\t\t\t\t\t$qg->setFields([$mdmap['sortfield']]);\n\t\t\t\t\t\t$qg->addReferenceModuleFieldCondition(\n\t\t\t\t\t\t\t$mdmap['originmodule'],\n\t\t\t\t\t\t\t$mdmap['linkfields']['targetfield'],\n\t\t\t\t\t\t\t'id',\n\t\t\t\t\t\t\t$this->column_fields[$mdmap['linkfields']['targetfield']],\n\t\t\t\t\t\t\t'e',\n\t\t\t\t\t\t\tQueryGenerator::$AND\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$sql = $qg->getQuery(); // No conditions\n\t\t\t\t\t\tif (strpos($mdmap['sortfield'], '.')) {\n\t\t\t\t\t\t\t$maxsql = mkMaxQuery($sql, $mdmap['sortfield']);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$ftbl = getTableNameForField($mdmap['targetmodule'], $mdmap['sortfield']);\n\t\t\t\t\t\t\tif ($ftbl=='') {\n\t\t\t\t\t\t\t\t$maxsql = mkMaxQuery($sql, $mdmap['sortfield']);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$maxsql = mkMaxQuery($sql, $ftbl.'.'.$mdmap['sortfield']);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$rs = $adb->query($maxsql);\n\t\t\t\t\t\t$max = (int)$rs->fields['max'];\n\t\t\t\t\t\t$this->column_fields[$mdmap['sortfield']] = $max+1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!empty($mdmap['editfieldnames'])) {\n\t\t\t\t\t\t\t$stillindb = CRMEntity::getInstance($module_name);\n\t\t\t\t\t\t\t$stillindb->retrieve_entity_info($this->id, $module_name, false, true);\n\t\t\t\t\t\t\t$handler = vtws_getModuleHandlerFromName($module_name, $current_user);\n\t\t\t\t\t\t\t$meta = $handler->getMeta();\n\t\t\t\t\t\t\t$stillindb->column_fields = DataTransform::sanitizeRetrieveEntityInfo($stillindb->column_fields, $meta);\n\t\t\t\t\t\t\tforeach ($stillindb->column_fields as $fname => $fvalue) {\n\t\t\t\t\t\t\t\tif (!in_array($fname, $mdmap['editfieldnames'])) {\n\t\t\t\t\t\t\t\t\t$this->column_fields[$fname] = $fvalue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//Check if assigned_user_id is empty for assign the current user.\n\t\tif (empty($this->column_fields['assigned_user_id'])) {\n\t\t\tglobal $current_user;\n\t\t\t$_REQUEST['assigned_user_id'] = $current_user->id;\n\t\t\t$this->column_fields['assigned_user_id'] = $current_user->id;\n\t\t\t$_REQUEST['assigntype'] = 'U';\n\t\t}\n\t\t// get is duplicate from id if present and not set\n\t\tif (empty($this->column_fields['isduplicatedfromrecordid']) && !empty($_REQUEST['__cbisduplicatedfromrecordid'])) {\n\t\t\t$this->column_fields['isduplicatedfromrecordid'] = vtlib_purify($_REQUEST['__cbisduplicatedfromrecordid']);\n\t\t}\n\n\t\t//Event triggering code\n\t\trequire_once 'include/events/include.inc';\n\t\tglobal $adb;\n\n\t\t$em = new VTEventsManager($adb);\n\t\t// Initialize Event trigger cache\n\t\t$em->initTriggerCache();\n\t\t$entityData = VTEntityData::fromCRMEntity($this);\n\n\t\t$em->triggerEvent('vtiger.entity.beforesave.modifiable', $entityData);\n\t\t$em->triggerEvent('vtiger.entity.beforesave', $entityData);\n\t\t$em->triggerEvent('vtiger.entity.beforesave.final', $entityData);\n\t\t//Event triggering code ends\n\t\t//GS Save entity being called with the modulename as parameter\n\t\t$this->saveentity($module_name);\n\n\t\tif (isset($_REQUEST['WizardAction']) && $_REQUEST['WizardAction'] == 'duplicate') {\n\t\t\t$step = vtlib_purify($_REQUEST['WizardStep']) - 1;\n\t\t\tcoreBOS_Settings::setSetting('WizardRecords'.$current_user->id.'^'.$step, $this->id);\n\t\t}\n\n\t\t//Event triggering code\n\t\t$em->triggerEvent('vtiger.entity.aftersave.first', $entityData);\n\t\t$em->triggerEvent('vtiger.entity.aftersave', $entityData);\n\t\t$em->triggerEvent('vtiger.entity.aftersave.final', $entityData);\n\t\t//Event triggering code ends\n\t}\n\n\t/** Mark an item as deleted */\n\tpublic function mark_deleted($id) {\n\t\tglobal $current_user, $adb;\n\t\t$mtime = $adb->formatDate(date('Y-m-d H:i:s'), true);\n\t\t$adb->pquery(\n\t\t\t'UPDATE '.$this->crmentityTable.' set deleted=1,modifiedtime=?,modifiedby=? where crmid=?',\n\t\t\tarray($mtime, $current_user->id, $id),\n\t\t\ttrue,\n\t\t\t'Error marking record deleted: '\n\t\t);\n\t\t$adb->pquery('UPDATE vtiger_crmobject set deleted=1,modifiedtime=? WHERE crmid=?', array($mtime, $id));\n\t}\n\n\t/** Mark an item as undeleted */\n\tpublic function mark_undeleted($id) {\n\t\tglobal $adb;\n\t\t$adb->pquery('UPDATE '.$this->crmentityTable.' set deleted=0 where crmid=?', array($id));\n\t\t$adb->pquery('UPDATE vtiger_crmobject set deleted=0 WHERE crmid=?', array($id));\n\t}\n\n\t// this method is called during an import before inserting a bean\n\t// define an associative array called $special_fields\n\t// the keys are user defined, and don't directly map to the bean's vtiger_fields\n\t// the value is the method name within that bean that will do extra\n\t// processing for that vtiger_field. example: 'full_name'=>'get_names_from_full_name'\n\tpublic function process_special_fields() {\n\t\tforeach ($this->special_functions as $func_name) {\n\t\t\tif (method_exists($this, $func_name)) {\n\t\t\t\t$this->$func_name();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Function to check if the custom field table exists\n\t * @param string table name to check\n\t * @return boolean\n\t */\n\tpublic function checkIfCustomTableExists($tablename) {\n\t\tglobal $adb;\n\t\t$result = $adb->query('select 1 from '.$adb->sql_escape_string($tablename));\n\t\treturn $result && $adb->num_fields($result)>0;\n\t}\n\n\t/**\n\t * function to construct the query to fetch the custom vtiger_fields\n\t * return the query to fetch the custom vtiger_fields\n\t */\n\tpublic function constructCustomQueryAddendum($tablename, $module) {\n\t\tglobal $adb;\n\t\t$tabid = getTabid($module);\n\t\t$sql1 = 'select columnname,fieldlabel from vtiger_field where generatedtype=2 and tabid=? and vtiger_field.presence in (0,2)';\n\t\t$result = $adb->pquery($sql1, array($tabid));\n\t\t$numRows = $adb->num_rows($result);\n\t\t$sql3 = 'select ';\n\t\tfor ($i = 0; $i < $numRows; $i++) {\n\t\t\t$columnName = $adb->query_result($result, $i, 'columnname');\n\t\t\t$fieldlabel = $adb->query_result($result, $i, 'fieldlabel');\n\t\t\t//construct query as below\n\t\t\tif ($i == 0) {\n\t\t\t\t$sql3 .= $tablename . '.' . $columnName . \" '\" . $fieldlabel . \"'\";\n\t\t\t} else {\n\t\t\t\t$sql3 .= ', ' . $tablename . '.' . $columnName . \" '\" . $fieldlabel . \"'\";\n\t\t\t}\n\t\t}\n\t\tif ($numRows > 0) {\n\t\t\t$sql3 = $sql3 . ',';\n\t\t}\n\t\treturn $sql3;\n\t}\n\n\t/**\n\t * Track the viewing of a detail record.\n\t * @param integer user that is viewing the record\n\t * @param string module\n\t * @param integer record ID\n\t */\n\tpublic function track_view($user_id, $current_module, $id = '') {\n\t\t$tracker = new Tracker();\n\t\t$tracker->track_view($user_id, $current_module, $id, '');\n\t}\n\n\t/**\n\t * Function to get the column value of a field when the field value is empty ''\n\t * @param string column name for the field\n\t * @param string input value for the field taken from the User\n\t * @param string name of the Field\n\t * @param string UI type of the field\n\t * @return string column value of the field\n\t */\n\tpublic function get_column_value($columnname, $fldvalue, $fieldname, $uitype, $datatype = '') {\n\t\tglobal $log, $current_user;\n\t\t$log->debug(\"> get_column_value $columnname, $fldvalue, $fieldname, $uitype, $datatype\");\n\t\tif ($uitype==52 && $fldvalue=='') {\n\t\t\treturn $current_user->id;\n\t\t}\n\t\tif (is_uitype($uitype, '_date_') && $fldvalue == '') {\n\t\t\treturn null;\n\t\t}\n\t\tif ($datatype == 'I' || $datatype == 'N' || $datatype == 'NN' || $uitype == 10 || $uitype == 101) {\n\t\t\treturn 0;\n\t\t}\n\t\t$log->debug('< get_column_value');\n\t\treturn $fldvalue;\n\t}\n\n\t/**\n\t * Function to make change to column fields, depending on the current user's accessibility for the fields\n\t */\n\tpublic function apply_field_security() {\n\t\tglobal $current_user, $currentModule;\n\t\tforeach ($this->column_fields as $fieldname => $fieldvalue) {\n\t\t\t$reset_value = false;\n\t\t\tif (getFieldVisibilityPermission($currentModule, $current_user->id, $fieldname) != '0') {\n\t\t\t\t$reset_value = true;\n\t\t\t}\n\t\t\tif ($fieldname == 'record_id' || $fieldname == 'record_module') {\n\t\t\t\t$reset_value = false;\n\t\t\t}\n\t\t\tif ($reset_value) {\n\t\t\t\t$this->column_fields[$fieldname] = '';\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Function which will give the basic query to find duplicates\n\t */\n\tpublic function getDuplicatesQuery($module, $table_cols, $field_values, $ui_type_arr, $select_cols = '') {\n\t\tglobal $current_user, $adb;\n\t\t$customView = new CustomView($module);\n\t\t$viewid = $customView->getViewId($module);\n\t\t$queryGenerator = new QueryGenerator($module, $current_user);\n\t\ttry {\n\t\t\tif ($viewid != '0') {\n\t\t\t\t$queryGenerator->initForCustomViewById($viewid);\n\t\t\t} else {\n\t\t\t\t$queryGenerator->initForDefaultCustomView();\n\t\t\t}\n\t\t\t$list_query = $queryGenerator->getQuery();\n\t\t} catch (Exception $e) {\n\t\t\t$list_query = '';\n\t\t}\n\t\t$fromclause = explode('FROM', $list_query);\n\t\t$list_query = \"SELECT $this->table_name.$this->table_index as id FROM \".$fromclause[1];\n\t\t$tableName = strtolower(\"temp\".$module.$current_user->id);\n\t\t$adb->pquery(\"create temporary table IF NOT EXISTS $tableName (id int primary key) AS \" . $list_query, array());\n\t\t$adb->pquery(\"create temporary table IF NOT EXISTS $tableName\".'2 (id int primary key) AS ' . $list_query, array());\n\n\t\t$select_clause = 'SELECT '. $this->table_name .'.'.$this->table_index .' AS recordid, vtiger_users_last_import.deleted,'.$table_cols;\n\t\t$from_clause = \" FROM $this->table_name\";\n\t\t$from_clausesub = \" FROM $this->table_name\";\n\t\t$from_clause .= ' INNER JOIN '.$this->crmentityTableAlias.\" ON vtiger_crmentity.crmid = $this->table_name.$this->table_index\";\n\t\t$from_clausesub .= ' INNER JOIN '.$this->crmentityTableAlias.\" ON vtiger_crmentity.crmid = $this->table_name.$this->table_index\";\n\t\t// Consider custom table join as well.\n\t\tif (isset($this->customFieldTable)) {\n\t\t\t$from_clause.=' INNER JOIN '.$this->customFieldTable[0].' ON '.$this->customFieldTable[0].'.'.$this->customFieldTable[1].\"=$this->table_name.$this->table_index\";\n\t\t\t$from_clausesub.=' INNER JOIN '.$this->customFieldTable[0].' ON '.$this->customFieldTable[0].'.'.$this->customFieldTable[1].\"=$this->table_name.$this->table_index\";\n\t\t}\n\t\t$from_clause.=' INNER JOIN '.$tableName.' temptab ON temptab.id='.$this->table_name .'.'.$this->table_index;\n\t\t$from_clausesub.=' INNER JOIN '.$tableName.'2 temptab2 ON temptab2.id='.$this->table_name .'.'.$this->table_index;\n\n\t\t$from_clause .= ' LEFT JOIN vtiger_users ON vtiger_users.id='.$this->crmentityTable.'.smownerid\n\t\t\tLEFT JOIN vtiger_groups ON vtiger_groups.groupid='.$this->crmentityTable.'.smownerid';\n\t\t$from_clausesub .= ' LEFT JOIN vtiger_users ON vtiger_users.id='.$this->crmentityTable.'.smownerid\n\t\t\tLEFT JOIN vtiger_groups ON vtiger_groups.groupid='.$this->crmentityTable.'.smownerid';\n\n\t\t$where_clause = ' WHERE '.$this->crmentityTable.'.deleted = 0';\n\t\t$where_clause .= $this->getListViewSecurityParameter($module);\n\n\t\tif (isset($select_cols) && trim($select_cols) != '') {\n\t\t\t$sub_query = \"SELECT $select_cols FROM $this->table_name AS t INNER JOIN \".$this->crmentityTable.\" AS crm ON crm.crmid = t.\".$this->table_index;\n\t\t\t// Consider custom table join as well.\n\t\t\tif (isset($this->customFieldTable)) {\n\t\t\t\t$sub_query .= ' LEFT JOIN '.$this->customFieldTable[0].' tcf ON tcf.'.$this->customFieldTable[1].\" = t.$this->table_index\";\n\t\t\t}\n\t\t\t$sub_query .= \" WHERE crm.deleted=0 GROUP BY $select_cols HAVING COUNT(*)>1\";\n\t\t} else {\n\t\t\t$sub_query = \"SELECT $table_cols $from_clausesub $where_clause GROUP BY $table_cols HAVING COUNT(*)>1\";\n\t\t}\n\n\t\treturn $select_clause . $from_clause .\n\t\t\t' LEFT JOIN vtiger_users_last_import ON vtiger_users_last_import.bean_id=' . $this->table_name .'.'.$this->table_index .\n\t\t\t' INNER JOIN (' . $sub_query . ') AS temp ON '.get_on_clause($field_values, $ui_type_arr, $module) .\n\t\t\t$where_clause .\n\t\t\t\" ORDER BY $table_cols,\". $this->table_name .'.'.$this->table_index .' ASC';\n\t}\n\n\t/**\n\t * Return query to use based on given modulename, fieldname\n\t * Useful to handle specific case handling for Popup\n\t * $srcrecord could be empty\n\t */\n\tpublic function getQueryByModuleField($module, $fieldname, $srcrecord, $query = '') {\n\t\tglobal $adb;\n\t\t$thisModule = get_class($this);\n\t\t$bmapname = $thisModule.'_ListColumns';\n\t\t$cbMapid = GlobalVariable::getVariable('BusinessMapping_'.$bmapname, cbMap::getMapIdByName($bmapname));\n\t\tif ($cbMapid) {\n\t\t\t$cbMap = cbMap::getMapByID($cbMapid);\n\t\t\t$cbMapLC = $cbMap->ListColumns();\n\t\t\t$conditions = $cbMapLC->getConditionsPopup();\n\t\t\tif (!empty($conditions[$fieldname]) && json_decode($conditions[$fieldname]) == null) {\n\t\t\t\treturn $conditions[$fieldname];\n\t\t\t}\n\t\t\tif (!empty($conditions[$fieldname]) || !empty($conditions[$module.'::'.$thisModule])) {\n\t\t\t\t$fields = $cbMapLC->getSearchFieldsName();\n\t\t\t\t$wherepos = stripos($query, ' where ');\n\t\t\t\t$query_body = substr($query, 0, $wherepos);\n\t\t\t\t$workflowScheduler = new WorkFlowScheduler($adb);\n\t\t\t\t$workflow = new Workflow();\n\t\t\t\t$wfvals['module_name'] = $thisModule;\n\t\t\t\t$wfvals['test'] = isset($conditions[$fieldname]) ? $conditions[$fieldname] : $conditions[$module.'::'.$thisModule];\n\t\t\t\t$wfvals['workflow_id'] = 0;\n\t\t\t\t$wfvals['defaultworkflow'] = 0;\n\t\t\t\t$wfvals['summary'] = '';\n\t\t\t\t$wfvals['execution_condition'] = '';\n\t\t\t\t$workflow->setup($wfvals);\n\t\t\t\t$query = $workflowScheduler->getWorkflowQuery($workflow, array_values($fields));\n\t\t\t\t$wherepos = stripos($query, ' where ');\n\t\t\t\t$query_cond = substr($query, $wherepos+7);\n\t\t\t\t$query = $query_body.' where '.$query_cond;\n\t\t\t}\n\t\t}\n\t\treturn $query;\n\t}\n\n\t/**\n\t * Get list view query (send more WHERE clause condition if required)\n\t */\n\tpublic function getListQuery($module, $usewhere = '') {\n\t\tglobal $current_user, $adb;\n\t\t$query = \"SELECT vtiger_crmentity.*, $this->table_name.*\";\n\n\t\t// Keep track of tables joined to avoid duplicates\n\t\t$joinedTables = array();\n\n\t\t// Select Custom Field Table Columns if present\n\t\tif (!empty($this->customFieldTable)) {\n\t\t\t$query .= ', ' . $this->customFieldTable[0] . '.* ';\n\t\t}\n\n\t\t$query .= \" FROM $this->table_name\";\n\t\t$query .= ' INNER JOIN '.$this->crmentityTableAlias.\" ON vtiger_crmentity.crmid = $this->table_name.$this->table_index\";\n\n\t\t$joinedTables[] = $this->table_name;\n\t\t$joinedTables[] = $this->crmentityTable;\n\n\t\t// Consider custom table join as well.\n\t\tif (!empty($this->customFieldTable)) {\n\t\t\t$query.=\" INNER JOIN \".$this->customFieldTable[0].' ON '.$this->customFieldTable[0].'.'.$this->customFieldTable[1].\" = $this->table_name.$this->table_index\";\n\t\t\t$joinedTables[] = $this->customFieldTable[0];\n\t\t}\n\t\t$query .= ' LEFT JOIN vtiger_users ON vtiger_users.id = '.$this->crmentityTable.'.smownerid';\n\t\t$query .= ' LEFT JOIN vtiger_groups ON vtiger_groups.groupid = '.$this->crmentityTable.'.smownerid';\n\n\t\t$joinedTables[] = 'vtiger_users';\n\t\t$joinedTables[] = 'vtiger_groups';\n\n\t\t$linkedModulesQuery = $adb->pquery(\n\t\t\t'SELECT distinct tablename, columnname, relmodule\n\t\t\tFROM vtiger_field\n\t\t\tINNER JOIN vtiger_fieldmodulerel ON vtiger_fieldmodulerel.fieldid = vtiger_field.fieldid'\n\t\t\t.\" WHERE uitype='10' AND vtiger_fieldmodulerel.module=?\",\n\t\t\tarray($module)\n\t\t);\n\t\t$linkedFieldsCount = $adb->num_rows($linkedModulesQuery);\n\n\t\tfor ($i=0; $i<$linkedFieldsCount; $i++) {\n\t\t\t$related_module = $adb->query_result($linkedModulesQuery, $i, 'relmodule');\n\t\t\t$tablename = $adb->query_result($linkedModulesQuery, $i, 'tablename');\n\t\t\t$columnname = $adb->query_result($linkedModulesQuery, $i, 'columnname');\n\n\t\t\t$other = CRMEntity::getInstance($related_module);\n\n\t\t\tif (!in_array($other->table_name, $joinedTables)) {\n\t\t\t\t$query .= \" LEFT JOIN $other->table_name ON $other->table_name.$other->table_index = $tablename.$columnname\";\n\t\t\t\t$joinedTables[] = $other->table_name;\n\t\t\t}\n\t\t}\n\n\t\t$query .= $this->getNonAdminAccessControlQuery($module, $current_user);\n\t\t$query .= ' WHERE '.$this->crmentityTable.'.deleted=0 '.$usewhere;\n\t\treturn $query;\n\t}\n\n\t/**\n\t * Create query to export the records.\n\t */\n\tpublic function create_export_query($where) {\n\t\tglobal $current_user, $adb;\n\t\t$thismodule = $_REQUEST['module'];\n\n\t\tinclude_once 'include/utils/ExportUtils.php';\n\n\t\t//To get the Permitted fields query and the permitted fields list\n\t\t$sql = getPermittedFieldsQuery($thismodule, 'detail_view');\n\n\t\t$fields_list = getFieldsListFromQuery($sql);\n\t\tif ($thismodule=='Faq') {\n\t\t\t$fields_list = str_replace(\",vtiger_faqcomments.comments as 'Add Comment'\", ' ', $fields_list);\n\t\t}\n\t\t$query = \"SELECT $fields_list, vtiger_users.user_name AS user_name\n\t\t\tFROM \".$this->crmentityTableAlias.\" INNER JOIN $this->table_name ON vtiger_crmentity.crmid=$this->table_name.$this->table_index\";\n\n\t\tif (!empty($this->customFieldTable)) {\n\t\t\t$query .= ' INNER JOIN '.$this->customFieldTable[0].' ON '.$this->customFieldTable[0].'.'.$this->customFieldTable[1].\"= $this->table_name.$this->table_index\";\n\t\t}\n\n\t\t$query .= ' LEFT JOIN vtiger_groups ON vtiger_groups.groupid = '.$this->crmentityTable.'.smownerid';\n\t\t$query .= ' LEFT JOIN vtiger_users ON '.$this->crmentityTable.'.smownerid=vtiger_users.id';\n\t\t$query .= ' LEFT JOIN vtiger_users as vtigerCreatedBy ON '.$this->crmentityTable.'.smcreatorid=vtigerCreatedBy.id';\n\n\t\t$linkedModulesQuery = $adb->pquery('SELECT distinct fieldname, tablename, columnname, relmodule FROM vtiger_field' .\n\t\t\t' INNER JOIN vtiger_fieldmodulerel ON vtiger_fieldmodulerel.fieldid = vtiger_field.fieldid' .\n\t\t\t\" WHERE uitype='10' AND vtiger_fieldmodulerel.module=?\", array($thismodule));\n\t\t$linkedFieldsCount = $adb->num_rows($linkedModulesQuery);\n\n\t\t$rel_mods = array();\n\t\t$rel_mods[$this->table_name] = 1;\n\t\tfor ($i=0; $i<$linkedFieldsCount; $i++) {\n\t\t\t$related_module = $adb->query_result($linkedModulesQuery, $i, 'relmodule');\n\t\t\t$columnname = $adb->query_result($linkedModulesQuery, $i, 'columnname');\n\t\t\t$tablename = $adb->query_result($linkedModulesQuery, $i, 'tablename');\n\n\t\t\t$other = CRMEntity::getInstance($related_module);\n\n\t\t\tif (!empty($rel_mods[$other->table_name])) {\n\t\t\t\t$rel_mods[$other->table_name] = $rel_mods[$other->table_name] + 1;\n\t\t\t\t$alias = $other->table_name.$rel_mods[$other->table_name];\n\t\t\t\t$query_append = \"as $alias\";\n\t\t\t} else {\n\t\t\t\t$alias = $other->table_name;\n\t\t\t\t$query_append = '';\n\t\t\t\t$rel_mods[$other->table_name] = 1;\n\t\t\t}\n\n\t\t\t$query .= \" LEFT JOIN $other->table_name $query_append ON $alias.$other->table_index = $tablename.$columnname\";\n\t\t}\n\n\t\tinclude_once 'include/fields/metainformation.php';\n\t\t$tabid = getTabid($thismodule);\n\t\t$result = $adb->pquery('select tablename, fieldname, columnname from vtiger_field where tabid=? and uitype=?', array($tabid, Field_Metadata::UITYPE_ACTIVE_USERS));\n\t\twhile ($row = $adb->fetchByAssoc($result)) {\n\t\t\t$tableName = $row['tablename'];\n\t\t\t$fieldName = $row['fieldname'];\n\t\t\t$columName = $row['columnname'];\n\t\t\t$query .= ' LEFT JOIN vtiger_users as vtiger_users'.$fieldName.' ON vtiger_users'.$fieldName.'.id='.$tableName.'.'.$columName;\n\t\t}\n\t\t$query .= $this->getNonAdminAccessControlQuery($thismodule, $current_user);\n\t\t$where_auto = ' '.$this->crmentityTable.'.deleted=0';\n\n\t\tif ($where != '') {\n\t\t\t$query .= \" WHERE ($where) AND $where_auto\";\n\t\t} else {\n\t\t\t$query .= \" WHERE $where_auto\";\n\t\t}\n\n\t\treturn $query;\n\t}\n\n\t/**\n\t * Initialize this instance for importing.\n\t */\n\tpublic function initImport($module) {\n\t\t$this->initImportableFields($module);\n\t}\n\n\t/**\n\t * Create list query to be shown at the last step of the import.\n\t * Called From: modules/Import/UserLastImport.php\n\t */\n\tpublic function create_import_query($module) {\n\t\tglobal $current_user;\n\t\treturn 'SELECT '.$this->crmentityTable.\".crmid,\n\t\t\t\tcase when (vtiger_users.user_name not like '') then vtiger_users.user_name else vtiger_groups.groupname end as user_name, $this->table_name.*\n\t\t\tFROM $this->table_name\"\n\t\t\t.($this->denormalized ? '' : \"INNER JOIN vtiger_crmentity ON vtiger_crmentity.crmid=$this->table_name.$this->table_index\")\n\t\t\t.'LEFT JOIN vtiger_users_last_import ON vtiger_users_last_import.bean_id='.$this->crmentityTable.'.crmid\n\t\t\tLEFT JOIN vtiger_users ON vtiger_users.id='.$this->crmentityTable.'.smownerid\n\t\t\tLEFT JOIN vtiger_groups ON vtiger_groups.groupid='.$this->crmentityTable.\".smownerid\n\t\t\tWHERE vtiger_users_last_import.assigned_user_id='$current_user->id'\n\t\t\tAND vtiger_users_last_import.bean_type='$module'\n\t\t\tAND vtiger_users_last_import.deleted=0\";\n\t}\n\n\t/**\n\t * Function which will set the assigned user id for import record.\n\t */\n\tpublic function set_import_assigned_user() {\n\t\tglobal $current_user, $adb;\n\t\t$record_user = $this->column_fields['assigned_user_id'];\n\n\t\tif ($record_user != $current_user->id) {\n\t\t\t$sqlresult = $adb->pquery(\n\t\t\t\t'select id from vtiger_users where id = ? union select groupid as id from vtiger_groups where groupid = ?',\n\t\t\t\tarray($record_user, $record_user)\n\t\t\t);\n\t\t\tif ($adb->num_rows($sqlresult)!= 1) {\n\t\t\t\t$this->column_fields['assigned_user_id'] = $current_user->id;\n\t\t\t} else {\n\t\t\t\t$row = $adb->fetchByAssoc($sqlresult, -1, false);\n\t\t\t\tif (isset($row['id']) && $row['id'] != -1) {\n\t\t\t\t\t$this->column_fields['assigned_user_id'] = $row['id'];\n\t\t\t\t} else {\n\t\t\t\t\t$this->column_fields['assigned_user_id'] = $current_user->id;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Function invoked during export of module record value.\n\t */\n\tpublic function transform_export_value($key, $value) {\n\t\tif ($key == 'owner' || $key == 'reports_to_id' || $key == 'comercial') {\n\t\t\treturn getOwnerName($value);\n\t\t}\n\t\treturn $value;\n\t}\n\n\t/**\n\t * Function to initialize the importable fields array, based on the User's accessibility to the fields\n\t */\n\tpublic function initImportableFields($module) {\n\t\tglobal $current_user;\n\t\t$skip_uitypes = array('4'); // uitype 4 is for Mod numbers\n\t\t// Look at cache if the fields information is available.\n\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module);\n\n\t\tif ($cachedModuleFields === false) {\n\t\t\tgetColumnFields($module); // This API will initialize the cache as well\n\t\t\t// We will succeed now due to above function call\n\t\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module);\n\t\t}\n\n\t\t$colf = array();\n\t\tif ($cachedModuleFields) {\n\t\t\tforeach ($cachedModuleFields as $fieldinfo) {\n\t\t\t\t// Skip non-supported fields\n\t\t\t\tif (!in_array($fieldinfo['uitype'], $skip_uitypes)) {\n\t\t\t\t\t$colf[$fieldinfo['fieldname']] = $fieldinfo['uitype'];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tforeach ($colf as $key => $value) {\n\t\t\tif (getFieldVisibilityPermission($module, $current_user->id, $key, 'readwrite') == '0') {\n\t\t\t\t$this->importable_fields[$key] = $value;\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Function to initialize the required fields array for that particular module */\n\tpublic function initRequiredFields($module) {\n\t\tglobal $adb;\n\n\t\t$tabid = getTabId($module);\n\t\t$sql = \"select fieldname from vtiger_field where tabid= ? and typeofdata like '%M%' and uitype not in ('53','70') and vtiger_field.presence in (0,2)\";\n\t\t$result = $adb->pquery($sql, array($tabid));\n\t\t$numRows = $adb->num_rows($result);\n\t\tfor ($i = 0; $i < $numRows; $i++) {\n\t\t\t$fieldName = $adb->query_result($result, $i, 'fieldname');\n\t\t\t$this->required_fields[$fieldName] = 1;\n\t\t}\n\t}\n\n\t/** Function to delete an entity with given Id */\n\tpublic function trash($module, $id) {\n\t\tglobal $current_user, $adb;\n\n\t\t$setype = getSalesEntityType($id);\n\t\tif ($setype != $module && !($module == 'cbCalendar' && $setype == 'Emails')) { // security\n\t\t\treturn false;\n\t\t}\n\t\trequire_once 'include/events/include.inc';\n\t\t$em = new VTEventsManager($adb);\n\n\t\t// Initialize Event trigger cache\n\t\t$em->initTriggerCache();\n\n\t\t$entityData = VTEntityData::fromEntityId($adb, $id);\n\n\t\t$em->triggerEvent('vtiger.entity.beforedelete', $entityData);\n\n\t\t$this->mark_deleted($id);\n\t\t$this->unlinkDependencies($module, $id);\n\n\t\trequire_once 'include/freetag/freetag.class.php';\n\t\t$freetag = new freetag();\n\t\t$freetag->delete_all_object_tags_for_user($current_user->id, $id);\n\n\t\t$sql_recentviewed = 'DELETE FROM vtiger_tracker WHERE user_id = ? AND item_id = ?';\n\t\t$adb->pquery($sql_recentviewed, array($current_user->id, $id));\n\n\t\tif ($em) {\n\t\t\t$entityData->SetDeleted($id);\n\t\t\t$em->triggerEvent('vtiger.entity.afterdelete', $entityData);\n\t\t}\n\t}\n\n\t/** Function to unlink all the dependent entities of the given Entity by Id */\n\tpublic function unlinkDependencies($module, $id) {\n\t\tglobal $adb;\n\t\tif (getSalesEntityType($id)!=$module) { // security\n\t\t\treturn false;\n\t\t}\n\t\t$fieldRes = $adb->pquery('SELECT tabid, tablename, columnname FROM vtiger_field WHERE fieldid IN (\n\t\t\tSELECT fieldid FROM vtiger_fieldmodulerel WHERE relmodule=?)', array($module));\n\t\t$numOfFields = $adb->num_rows($fieldRes);\n\t\tfor ($i = 0; $i < $numOfFields; $i++) {\n\t\t\t$tabId = $adb->query_result($fieldRes, $i, 'tabid');\n\t\t\t$tableName = $adb->query_result($fieldRes, $i, 'tablename');\n\t\t\t$columnName = $adb->query_result($fieldRes, $i, 'columnname');\n\n\t\t\t$relatedModule = vtlib_getModuleNameById($tabId);\n\t\t\t$focusObj = CRMEntity::getInstance($relatedModule);\n\n\t\t\t//Backup Field Relations for the deleted entity\n\t\t\t$relQuery = \"SELECT $focusObj->table_index FROM $tableName WHERE $columnName=?\";\n\t\t\t$relResult = $adb->pquery($relQuery, array($id));\n\t\t\t$numOfRelRecords = $adb->num_rows($relResult);\n\t\t\tif ($numOfRelRecords > 0) {\n\t\t\t\t$recordIdsList = array();\n\t\t\t\tfor ($k = 0; $k < $numOfRelRecords; $k++) {\n\t\t\t\t\t$recordIdsList[] = $adb->query_result($relResult, $k, $focusObj->table_index);\n\t\t\t\t}\n\t\t\t\t$params = array($id, RB_RECORD_UPDATED, $tableName, $columnName, $focusObj->table_index, implode(',', $recordIdsList));\n\t\t\t\t$adb->pquery('INSERT INTO vtiger_relatedlists_rb VALUES (?,?,?,?,?,?)', $params);\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Function to unlink an entity with given Id from another entity */\n\tpublic function unlinkRelationship($id, $return_module, $return_id) {\n\t\tglobal $currentModule, $adb;\n\t\t$data = array();\n\t\t$data['sourceModule'] = getSalesEntityType($id);\n\t\t$data['sourceRecordId'] = $id;\n\t\t$data['destinationModule'] = $return_module;\n\t\t$data['destinationRecordId'] = $return_id;\n\t\tcbEventHandler::do_action('corebos.entity.link.delete', $data);\n\n\t\tdeleteFromCrmEntityRel($id, $return_id);\n\n\t\t$fieldRes = $adb->pquery(\n\t\t\t'SELECT tabid, tablename, columnname FROM vtiger_field WHERE fieldid IN (SELECT fieldid FROM vtiger_fieldmodulerel WHERE module=? AND relmodule=?)',\n\t\t\tarray($currentModule, $return_module)\n\t\t);\n\t\t$numOfFields = $adb->num_rows($fieldRes);\n\t\tfor ($i = 0; $i < $numOfFields; $i++) {\n\t\t\t$tabId = $adb->query_result($fieldRes, $i, 'tabid');\n\t\t\t$tableName = $adb->query_result($fieldRes, $i, 'tablename');\n\t\t\t$columnName = $adb->query_result($fieldRes, $i, 'columnname');\n\n\t\t\t$relatedModule = vtlib_getModuleNameById($tabId);\n\t\t\t$focusObj = CRMEntity::getInstance($relatedModule);\n\n\t\t\t$updateQuery = \"UPDATE $tableName SET $columnName=? WHERE $columnName=? AND $focusObj->table_index=?\";\n\t\t\t$updateParams = array(null, $return_id, $id);\n\t\t\t$adb->pquery($updateQuery, $updateParams);\n\t\t}\n\t\tcbEventHandler::do_action('corebos.entity.link.delete.final', $data);\n\t}\n\n\t/** Function to restore a deleted record of specified module with given crmid\n\t * @param string module name\n\t * @param array list of crmids\n\t */\n\tpublic function restore($module, $id) {\n\t\tglobal $current_user, $adb;\n\n\t\t$adb->println(\"> restore $module, $id\");\n\t\t$adb->startTransaction();\n\n\t\t$date_var = $adb->formatDate(date('Y-m-d H:i:s'), true);\n\t\t$query = 'UPDATE '.$this->crmentityTable.' SET deleted=0,modifiedtime=?,modifiedby=? WHERE crmid = ?';\n\t\t$adb->pquery($query, array($date_var, $current_user->id, $id), true, 'Error restoring records :');\n\t\t$adb->pquery('UPDATE vtiger_crmobject SET deleted=0,modifiedtime=? WHERE crmid=?', array($date_var, $id), true, 'Error restoring records :');\n\t\t//Restore related entities/records\n\t\t$this->restoreRelatedRecords($module, $id);\n\n\t\t//Event triggering code\n\t\trequire_once 'include/events/include.inc';\n\t\t$em = new VTEventsManager($adb);\n\n\t\t// Initialize Event trigger cache\n\t\t$em->initTriggerCache();\n\n\t\t$this->id = $id;\n\t\t$entityData = VTEntityData::fromCRMEntity($this);\n\t\t//Event triggering code\n\t\t$em->triggerEvent('vtiger.entity.afterrestore', $entityData);\n\t\t//Event triggering code ends\n\n\t\t$adb->completeTransaction();\n\t\t$adb->println('< restore');\n\t}\n\n\t/** Function to restore all the related records of a given record by id */\n\tpublic function restoreRelatedRecords($module, $record) {\n\t\tglobal $adb;\n\t\t$result = $adb->pquery('SELECT * FROM vtiger_relatedlists_rb WHERE entityid = ?', array($record));\n\t\t$numRows = $adb->num_rows($result);\n\t\tfor ($i = 0; $i < $numRows; $i++) {\n\t\t\t$action = $adb->query_result($result, $i, 'action');\n\t\t\t$rel_table = $adb->query_result($result, $i, 'rel_table');\n\t\t\t$rel_column = $adb->query_result($result, $i, 'rel_column');\n\t\t\t$ref_column = $adb->query_result($result, $i, 'ref_column');\n\t\t\t$related_crm_ids = $adb->query_result($result, $i, 'related_crm_ids');\n\n\t\t\tif (strtoupper($action) == RB_RECORD_UPDATED) {\n\t\t\t\t$related_ids = explode(',', $related_crm_ids);\n\t\t\t\tif ($rel_table == 'vtiger_crmentity' && $rel_column == 'deleted') {\n\t\t\t\t\t$sql = \"UPDATE $rel_table set $rel_column = 0 WHERE $ref_column IN (\" . generateQuestionMarks($related_ids) . ')';\n\t\t\t\t\t$sql = 'UPDATE vtiger_crmobject set deleted=0 WHERE crmid IN (' . generateQuestionMarks($related_ids) . ')';\n\t\t\t\t\t$adb->pquery($sql, array($related_ids));\n\t\t\t\t} else {\n\t\t\t\t\t$sql = \"UPDATE $rel_table set $rel_column = ? WHERE $rel_column = 0 AND $ref_column IN (\" . generateQuestionMarks($related_ids) . ')';\n\t\t\t\t\t$adb->pquery($sql, array($record, $related_ids));\n\t\t\t\t}\n\t\t\t} elseif (strtoupper($action) == RB_RECORD_DELETED) {\n\t\t\t\tif ($rel_table == 'vtiger_seproductrel') {\n\t\t\t\t\t$sql = \"INSERT INTO $rel_table($rel_column, $ref_column, 'setype') VALUES (?,?,?)\";\n\t\t\t\t\t$adb->pquery($sql, array($record, $related_crm_ids, $module));\n\t\t\t\t} else {\n\t\t\t\t\t$sql = \"INSERT INTO $rel_table($rel_column, $ref_column) VALUES (?,?)\";\n\t\t\t\t\t$adb->pquery($sql, array($record, $related_crm_ids));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//Clean up the the backup data also after restoring\n\t\t$adb->pquery('DELETE FROM vtiger_relatedlists_rb WHERE entityid = ?', array($record));\n\t}\n\n\t/**\n\t * Function to initialize the sortby fields array\n\t */\n\tpublic function initSortByField($module) {\n\t\tglobal $adb, $log;\n\t\t$log->debug('> initSortByField '.$module);\n\t\t// Define the columnname's and uitype's which needs to be excluded\n\t\t$exclude_columns = array('quoteid', 'vendorid', 'access_count');\n\t\t$exclude_uitypes = array();\n\n\t\t$tabid = getTabId($module);\n\t\t$sql = 'SELECT columnname FROM vtiger_field WHERE tabid=? and vtiger_field.presence in (0,2)';\n\t\t$params = array($tabid);\n\t\tif (count($exclude_columns) > 0) {\n\t\t\t$sql .= ' AND columnname NOT IN (' . generateQuestionMarks($exclude_columns) . ')';\n\t\t\t$params[] = $exclude_columns;\n\t\t}\n\t\tif (count($exclude_uitypes) > 0) {\n\t\t\t$sql .= ' AND uitype NOT IN (' . generateQuestionMarks($exclude_uitypes) . ')';\n\t\t\t$params[] = $exclude_uitypes;\n\t\t}\n\t\t$result = $adb->pquery($sql, $params);\n\t\t$num_rows = $adb->num_rows($result);\n\t\tfor ($i = 0; $i < $num_rows; $i++) {\n\t\t\t$columnname = $adb->query_result($result, $i, 'columnname');\n\t\t\tif (!in_array($columnname, $this->sortby_fields)) {\n\t\t\t\t$this->sortby_fields[] = $columnname;\n\t\t\t}\n\t\t}\n\t\tif ($tabid == 21 || $tabid == 22) {\n\t\t\t$this->sortby_fields[] = 'crmid';\n\t\t}\n\t\t$log->debug('< initSortByField');\n\t}\n\n\t/* Function to set the Sequence string and sequence number starting value */\n\tpublic function setModuleSeqNumber($mode, $module, $req_str = '', $req_no = '') {\n\t\tglobal $adb;\n\t\t//when we configure the invoice number in Settings this will be used\n\t\tif ($mode == 'configure' && $req_no != '') {\n\t\t\tlist($mode, $module, $req_str, $req_no, $result, $returnResult) = cbEventHandler::do_filter(\n\t\t\t\t'corebos.filter.ModuleSeqNumber.set',\n\t\t\t\tarray($mode, $module, $req_str, $req_no, '', false)\n\t\t\t);\n\t\t\tif ($returnResult) {\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t\t$check = $adb->pquery('select cur_id from vtiger_modentity_num where semodule=? and prefix=?', array($module, $req_str));\n\t\t\tif ($adb->num_rows($check) == 0) {\n\t\t\t\t$numid = $adb->getUniqueId('vtiger_modentity_num');\n\t\t\t\t$active = $adb->pquery('select num_id from vtiger_modentity_num where semodule=? and active=1', array($module));\n\t\t\t\t$adb->pquery('UPDATE vtiger_modentity_num SET active=0 where num_id=?', array($adb->query_result($active, 0, 'num_id')));\n\n\t\t\t\t$adb->pquery('INSERT into vtiger_modentity_num values(?,?,?,?,?,?)', array($numid, $module, $req_str, $req_no, $req_no, 1));\n\t\t\t\treturn true;\n\t\t\t} elseif ($adb->num_rows($check) != 0) {\n\t\t\t\t$num_check = $adb->query_result($check, 0, 'cur_id');\n\t\t\t\tif ($req_no < $num_check) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\t$adb->pquery('UPDATE vtiger_modentity_num SET active=0 where active=1 and semodule=?', array($module));\n\t\t\t\t\t$adb->pquery('UPDATE vtiger_modentity_num SET cur_id=?, active=1 where prefix=? and semodule=?', array($req_no, $req_str, $module));\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} elseif ($mode == 'increment') {\n\t\t\tlist($mode, $module, $req_str, $req_no, $result, $returnResult) = cbEventHandler::do_filter(\n\t\t\t\t'corebos.filter.ModuleSeqNumber.increment',\n\t\t\t\tarray($mode, $module, $req_str, $req_no, '', false)\n\t\t\t);\n\t\t\tif ($returnResult) {\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t\t//when we save new record we will increment the autonumber field\n\t\t\t$check = $adb->pquery(\n\t\t\t\t\"select prefix, cur_id, concat(repeat('0',greatest(length(cur_id)-length(cur_id+1),0)),cur_id+1) as req_no\n\t\t\t\t\tfrom vtiger_modentity_num where semodule=? and active = 1 FOR UPDATE\",\n\t\t\t\tarray($module)\n\t\t\t);\n\t\t\t$req_no .= $adb->query_result($check, 0, 'req_no');\n\t\t\t$curid = $adb->query_result($check, 0, 'cur_id');\n\t\t\t$adb->pquery('UPDATE vtiger_modentity_num SET cur_id=? where cur_id=? and active=1 AND semodule=?', array($req_no, $curid, $module));\n\t\t\t$prefix = $adb->query_result($check, 0, 'prefix');\n\t\t\t$prev_inv_no = $prefix . $curid;\n\t\t\treturn decode_html($prev_inv_no);\n\t\t}\n\t}\n\n\t/* Function to check if module sequence numbering is configured for the given module or not */\n\tpublic function isModuleSequenceConfigured($module) {\n\t\t$adb = PearDatabase::getInstance();\n\t\t$result = $adb->pquery('SELECT 1 FROM vtiger_modentity_num WHERE semodule = ? AND active = 1', array($module));\n\t\treturn $result && $adb->num_rows($result) > 0;\n\t}\n\n\t/* Function to get the next module sequence number for a given module */\n\tpublic function getModuleSeqInfo($module) {\n\t\tglobal $adb;\n\t\t$check = $adb->pquery('select cur_id,prefix from vtiger_modentity_num where semodule=? and active = 1', array($module));\n\t\t$prefix = $adb->query_result($check, 0, 'prefix');\n\t\t$curid = $adb->query_result($check, 0, 'cur_id');\n\t\treturn array($prefix, $curid);\n\t}\n\n\t/* Function to check if the mod number already exits */\n\tpublic function checkModuleSeqNumber($table, $column, $no) {\n\t\tglobal $adb;\n\t\t$result = $adb->pquery(\n\t\t\t'select ' . $adb->sql_escape_string($column).' from ' . $adb->sql_escape_string($table).' where ' . $adb->sql_escape_string($column) . '=?',\n\t\t\tarray($no)\n\t\t);\n\t\treturn ($adb->num_rows($result) > 0);\n\t}\n\n\tpublic function updateMissingSeqNumber($module) {\n\t\tglobal $log, $adb;\n\t\t$log->debug('> updateMissingSeqNumber');\n\t\tlist($module, $result, $returnResult) = cbEventHandler::do_filter('corebos.filter.ModuleSeqNumber.fillempty', array($module, '', false));\n\t\tif ($returnResult) {\n\t\t\treturn $result;\n\t\t}\n\n\t\tif (!$this->isModuleSequenceConfigured($module)) {\n\t\t\treturn array();\n\t\t}\n\n\t\t$tabid = getTabid($module);\n\t\t$fieldinfo = $adb->pquery('SELECT * FROM vtiger_field WHERE tabid = ? AND uitype = 4', array($tabid));\n\n\t\t$returninfo = array();\n\n\t\tif ($fieldinfo && $adb->num_rows($fieldinfo)) {\n\t\t\t// We assume the following for module sequencing fields\n\t\t\t// 1. There will be only one field per module\n\t\t\t// 2. This field is linked to module base table\n\t\t\t$fld_table = $adb->query_result($fieldinfo, 0, 'tablename');\n\t\t\t$fld_column = $adb->query_result($fieldinfo, 0, 'columnname');\n\n\t\t\tif ($fld_table == $this->table_name) {\n\t\t\t\t$records = $adb->query(\"SELECT $this->table_index AS recordid FROM $this->table_name WHERE $fld_column = '' OR $fld_column is NULL\");\n\n\t\t\t\tif ($records && $adb->num_rows($records)) {\n\t\t\t\t\t$returninfo['totalrecords'] = $adb->num_rows($records);\n\t\t\t\t\t$returninfo['updatedrecords'] = 0;\n\n\t\t\t\t\t$modseqinfo = $this->getModuleSeqInfo($module);\n\t\t\t\t\t$prefix = $modseqinfo[0];\n\t\t\t\t\t$cur_id = $modseqinfo[1];\n\n\t\t\t\t\t$old_cur_id = $cur_id;\n\t\t\t\t\twhile ($recordinfo = $adb->fetch_array($records)) {\n\t\t\t\t\t\t$value = $prefix . $cur_id;\n\t\t\t\t\t\t$adb->pquery(\"UPDATE $fld_table SET $fld_column = ? WHERE $this->table_index = ?\", array($value, $recordinfo['recordid']));\n\t\t\t\t\t\t$strip = strlen($cur_id) - strlen($cur_id + 1);\n\t\t\t\t\t\tif ($strip < 0) {\n\t\t\t\t\t\t\t$strip = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$temp = str_repeat('0', $strip);\n\t\t\t\t\t\t$cur_id = $temp . ($cur_id + 1);\n\t\t\t\t\t\t$returninfo['updatedrecords'] = $returninfo['updatedrecords'] + 1;\n\t\t\t\t\t}\n\t\t\t\t\tif ($old_cur_id != $cur_id) {\n\t\t\t\t\t\t$adb->pquery('UPDATE vtiger_modentity_num set cur_id=? where semodule=? and active=1', array($cur_id, $module));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$log->fatal('Updating Missing Sequence Number FAILED! REASON: Field table and module table mismatching.');\n\t\t\t}\n\t\t}\n\t\treturn $returninfo;\n\t}\n\n\t/* Generic function to get attachments in the related list of a given module */\n\tpublic function get_attachments($id, $cur_tab_id, $rel_tab_id, $actions = false) {\n\t\tglobal $currentModule, $singlepane_view, $adb;\n\t\t$this_module = $currentModule;\n\t\t$related_module = vtlib_getModuleNameById($rel_tab_id);\n\t\t$other = CRMEntity::getInstance($related_module);\n\n\t\t$button = '';\n\t\tif ($actions) {\n\t\t\tif (is_string($actions)) {\n\t\t\t\t$actions = explode(',', strtoupper($actions));\n\t\t\t}\n\t\t\t$wfs = '';\n\t\t\tif (in_array('SELECT', $actions) && isPermitted($related_module, 4, '') == 'yes') {\n\t\t\t\t$wfs = new VTWorkflowManager($adb);\n\t\t\t\t$racbr = $wfs->getRACRuleForRecord($currentModule, $id);\n\t\t\t\tif (!$racbr || $racbr->hasRelatedListPermissionTo('select', $related_module)) {\n\t\t\t\t\t$button .= \"<input title='\" . getTranslatedString('LBL_SELECT') . ' ' . getTranslatedString($related_module, $related_module).\n\t\t\t\t\t\t\"' class='slds-button slds-button_success' type='button' onclick=\\\"return window.open('index.php?module=$related_module&return_module=$currentModule\".\n\t\t\t\t\t\t\"&action=Popup&popuptype=detailview&select=enable&form=EditView&form_submit=false&recordid=$id','test',\".\n\t\t\t\t\t\t\"cbPopupWindowSettings);\\\" value='\" . getTranslatedString('LBL_SELECT') . ' ' .\n\t\t\t\t\t\tgetTranslatedString($related_module, $related_module) . \"'>&nbsp;\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (in_array('ADD', $actions) && isPermitted($related_module, 1, '') == 'yes') {\n\t\t\t\tif ($wfs == '') {\n\t\t\t\t\t$wfs = new VTWorkflowManager($adb);\n\t\t\t\t\t$racbr = $wfs->getRACRuleForRecord($currentModule, $id);\n\t\t\t\t}\n\t\t\t\tif (!$racbr || $racbr->hasRelatedListPermissionTo('create', $related_module)) {\n\t\t\t\t\t$singular_modname = getTranslatedString('SINGLE_' . $related_module, $related_module);\n\t\t\t\t\t$button .= \"<input type='hidden' name='createmode' value='link' />\" .\n\t\t\t\t\t\t\"<input title='\" . getTranslatedString('LBL_ADD_NEW') . \" \" . $singular_modname . \"' class='slds-button slds-button_neutral'\" .\n\t\t\t\t\t\t\" onclick='this.form.action.value=\\\"EditView\\\";this.form.module.value=\\\"$related_module\\\"' type='submit' name='button'\" .\n\t\t\t\t\t\t\" value='\" . getTranslatedString('LBL_ADD_NEW') . \" \" . $singular_modname . \"'>&nbsp;\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// To make the edit or del link actions to return back to same view.\n\t\tif ($singlepane_view == 'true') {\n\t\t\t$returnset = \"&return_module=$this_module&return_action=DetailView&return_id=$id\";\n\t\t} else {\n\t\t\t$returnset = \"&return_module=$this_module&return_action=CallRelatedList&return_id=$id\";\n\t\t}\n\n\t\t$query = \"select case when (vtiger_users.user_name not like '') then vtiger_users.ename else vtiger_groups.groupname end as user_name,'Documents' ActivityType,\n\t\t\t\tvtiger_attachments.type FileType,crm2.modifiedtime lastmodified,vtiger_crmentity.modifiedtime,vtiger_seattachmentsrel.attachmentsid attachmentsid,\n\t\t\t\tvtiger_crmentity.smownerid smownerid, vtiger_notes.notesid crmid,vtiger_notes.notecontent description,vtiger_notes.*\n\t\t\tfrom vtiger_notes\n\t\t\tinner join vtiger_senotesrel on vtiger_senotesrel.notesid=vtiger_notes.notesid\n\t\t\tleft join vtiger_notescf ON vtiger_notescf.notesid=vtiger_notes.notesid\n\t\t\tinner join \".$other->crmentityTableAlias.' on vtiger_crmentity.crmid=vtiger_notes.notesid and vtiger_crmentity.deleted=0\n\t\t\tinner join vtiger_crmobject crm2 on crm2.crmid=vtiger_senotesrel.crmid\n\t\t\tleft join vtiger_groups on vtiger_groups.groupid=vtiger_crmentity.smownerid\n\t\t\tleft join vtiger_seattachmentsrel on vtiger_seattachmentsrel.crmid=vtiger_notes.notesid\n\t\t\tleft join vtiger_attachments on vtiger_seattachmentsrel.attachmentsid=vtiger_attachments.attachmentsid\n\t\t\tleft join vtiger_users on vtiger_crmentity.smownerid=vtiger_users.id\n\t\t\twhere crm2.crmid=' . $id;\n\n\t\t$return_value = GetRelatedList($this_module, $related_module, $other, $query, $button, $returnset);\n\n\t\tif ($return_value == null) {\n\t\t\t$return_value = array();\n\t\t}\n\t\t$return_value['CUSTOM_BUTTON'] = $button;\n\t\treturn $return_value;\n\t}\n\n\t/** Returns a list of the associated emails\n\t * @param integer entity ID\n\t * @return array related emails record\n\t */\n\tpublic function get_emails($id, $cur_tab_id, $rel_tab_id, $actions = false) {\n\t\tglobal $log, $singlepane_view, $currentModule;\n\t\t$log->debug('> get_emails '.$id);\n\t\t$this_module = $currentModule;\n\n\t\t$related_module = vtlib_getModuleNameById($rel_tab_id);\n\t\trequire_once \"modules/$related_module/$related_module.php\";\n\t\t$other = new $related_module();\n\n\t\tif ($singlepane_view == 'true') {\n\t\t\t$returnset = '&return_module='.$this_module.'&return_action=DetailView&return_id='.$id;\n\t\t} else {\n\t\t\t$returnset = '&return_module='.$this_module.'&return_action=CallRelatedList&return_id='.$id;\n\t\t}\n\n\t\t$button = '';\n\t\t$button .= '<input type=\"hidden\" name=\"email_directing_module\"><input type=\"hidden\" name=\"record\">';\n\n\t\tif ($actions) {\n\t\t\tif (is_string($actions)) {\n\t\t\t\t$actions = explode(',', strtoupper($actions));\n\t\t\t}\n\t\t\tif (in_array('SELECT', $actions) && isPermitted($related_module, 4, '') == 'yes') {\n\t\t\t\t$button .= \"<input title='\".getTranslatedString('LBL_SELECT').' '. getTranslatedString($related_module, $related_module).\n\t\t\t\t\t\"' class='slds-button slds-button_success' type='button' onclick=\\\"return window.open('index.php?module=$related_module&return_module=$currentModule\".\n\t\t\t\t\t\"&action=Popup&popuptype=detailview&select=enable&form=EditView&form_submit=false&recordid=$id','test',\".\n\t\t\t\t\t\"cbPopupWindowSettings);\\\" value='\". getTranslatedString('LBL_SELECT'). ' ' .\n\t\t\t\t\tgetTranslatedString($related_module, $related_module) .\"'>&nbsp;\";\n\t\t\t}\n\t\t\tif (in_array('ADD', $actions) && isPermitted($related_module, 1, '') == 'yes') {\n\t\t\t\t$singular_modname = getTranslatedString('SINGLE_' . $related_module, $related_module);\n\t\t\t\t$button .= \"<input title='\". getTranslatedString('LBL_ADD_NEW').' '. $singular_modname.\"' accessyKey='F' class='crmbutton small create' \".\n\t\t\t\t\t\"onclick='fnvshobj(this,\\\"sendmail_cont\\\");sendmail(\\\"$this_module\\\",$id);' type='button' name='button' value='\". getTranslatedString('LBL_ADD_NEW').\n\t\t\t\t\t' '. $singular_modname.\"'></td>\";\n\t\t\t}\n\t\t}\n\n\t\t$query =\"select case when (vtiger_users.user_name not like '') then vtiger_users.ename else vtiger_groups.groupname end as user_name, vtiger_activity.activityid,\n\t\t\t\tvtiger_activity.subject, vtiger_activity.semodule, vtiger_activity.activitytype, vtiger_email_track.access_count, vtiger_activity.date_start,\n\t\t\t\tvtiger_activity.time_start, vtiger_activity.status, vtiger_activity.priority, \".$other->crmentityTable.'.crmid,'.$other->crmentityTable.'.smownerid,'\n\t\t\t\t.$other->crmentityTable.'.modifiedtime, vtiger_users.user_name, vtiger_seactivityrel.crmid as parent_id, vtiger_emaildetails.*\n\t\t\tfrom vtiger_activity\n\t\t\tinner join vtiger_seactivityrel on vtiger_seactivityrel.activityid=vtiger_activity.activityid'\n\t\t\t.' inner join '.$other->crmentityTable.' on '.$other->crmentityTable.'.crmid=vtiger_activity.activityid'\n\t\t\t.' inner join vtiger_emaildetails on vtiger_emaildetails.emailid = vtiger_activity.activityid\n\t\t\tleft join vtiger_email_track on (vtiger_email_track.crmid=vtiger_seactivityrel.crmid AND vtiger_email_track.mailid=vtiger_activity.activityid)\n\t\t\tleft join vtiger_groups on vtiger_groups.groupid='.$other->crmentityTable.'.smownerid\n\t\t\tleft join vtiger_users on vtiger_users.id='.$other->crmentityTable.\".smownerid\n\t\t\twhere vtiger_activity.activitytype='Emails' and \".$other->crmentityTable.'.deleted=0 and vtiger_seactivityrel.crmid='.$id;\n\n\t\t$return_value = GetRelatedList($this_module, $related_module, $other, $query, $button, $returnset);\n\n\t\tif ($return_value == null) {\n\t\t\t$return_value = array();\n\t\t}\n\t\t$return_value['CUSTOM_BUTTON'] = $button;\n\n\t\t$log->debug('< get_emails');\n\t\treturn $return_value;\n\t}\n\n\t/**\n\t * For Record View Notification\n\t */\n\tpublic function isViewed($crmid = false) {\n\t\tif (!$crmid) {\n\t\t\t$crmid = $this->id;\n\t\t}\n\t\tif ($crmid) {\n\t\t\tglobal $adb;\n\t\t\t$result = $adb->pquery('SELECT viewedtime,modifiedtime,smcreatorid,smownerid,modifiedby FROM '.$this->crmentityTable.' WHERE crmid=?', array($crmid));\n\t\t\t$resinfo = $adb->fetch_array($result);\n\n\t\t\t$lastviewed = $resinfo['viewedtime'];\n\t\t\t$modifiedon = $resinfo['modifiedtime'];\n\t\t\t$smownerid = $resinfo['smownerid'];\n\t\t\t$smcreatorid = $resinfo['smcreatorid'];\n\t\t\t$modifiedby = $resinfo['modifiedby'];\n\n\t\t\tif ($modifiedby == '0' && ($smownerid == $smcreatorid)) {\n\t\t\t\t/** When module record is created * */\n\t\t\t\treturn true;\n\t\t\t} elseif ($smownerid == $modifiedby) {\n\t\t\t\t/** Owner and Modifier as same. * */\n\t\t\t\treturn true;\n\t\t\t} elseif ($lastviewed && $modifiedon) {\n\t\t\t\t/** Lastviewed and Modified time is available. */\n\t\t\t\tif ($this->__timediff($modifiedon, $lastviewed) > 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function __timediff($d1, $d2) {\n\t\tlist($t1_1, $t1_2) = explode(' ', $d1);\n\t\tlist($t1_y, $t1_m, $t1_d) = explode('-', $t1_1);\n\t\tlist($t1_h, $t1_i, $t1_s) = explode(':', $t1_2);\n\n\t\t$t1 = mktime($t1_h, $t1_i, $t1_s, $t1_m, $t1_d, $t1_y);\n\n\t\tlist($t2_1, $t2_2) = explode(' ', $d2);\n\t\tlist($t2_y, $t2_m, $t2_d) = explode('-', $t2_1);\n\t\tlist($t2_h, $t2_i, $t2_s) = explode(':', $t2_2);\n\n\t\t$t2 = mktime($t2_h, $t2_i, $t2_s, $t2_m, $t2_d, $t2_y);\n\n\t\tif ($t1 == $t2) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn $t2 - $t1;\n\t}\n\n\tpublic function markAsViewed($userid) {\n\t\tglobal $adb;\n\t\t$adb->pquery('UPDATE '.$this->crmentityTable.' set viewedtime=? WHERE crmid=? AND smownerid=?', array(date('Y-m-d H:i:s', time()), $this->id, $userid));\n\t}\n\n\t/**\n\t * Save the related module record information. Triggered from CRMEntity->saveentity method or updateRelations.php\n\t * @param string This module name\n\t * @param integer This module record number\n\t * @param string Related module name\n\t * @param mixed Integer or Array of related module record number\n\t */\n\tpublic function save_related_module($module, $crmid, $with_module, $with_crmid) {\n\t\tglobal $adb;\n\t\t$with_crmid = (array)$with_crmid;\n\t\tforeach ($with_crmid as $relcrmid) {\n\t\t\tif ($with_module == 'Documents' && $module!='DocumentFolders') {\n\t\t\t\t$checkpresence = $adb->pquery('SELECT 1 FROM vtiger_senotesrel WHERE crmid=? AND notesid=?', array($crmid, $relcrmid));\n\t\t\t\t// Relation already exists? No need to add again\n\t\t\t\tif ($checkpresence && $adb->num_rows($checkpresence)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$adb->pquery('INSERT INTO vtiger_senotesrel(crmid, notesid) VALUES(?,?)', array($crmid, $relcrmid));\n\t\t\t} elseif ($with_module == 'Emails') {\n\t\t\t\t$checkpresence = $adb->pquery('SELECT 1 FROM vtiger_seactivityrel WHERE crmid=? AND activityid=?', array($crmid, $relcrmid));\n\t\t\t\t// Relation already exists? No need to add again\n\t\t\t\tif ($checkpresence && $adb->num_rows($checkpresence)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$adb->pquery('INSERT INTO vtiger_seactivityrel(crmid, activityid) VALUES(?,?)', array($crmid, $relcrmid));\n\t\t\t} else {\n\t\t\t\t$checkpresence = $adb->pquery(\n\t\t\t\t\t'SELECT 1 FROM vtiger_crmentityrel WHERE crmid=? AND module=? AND relcrmid=? AND relmodule=?',\n\t\t\t\t\tarray($crmid, $module, $relcrmid, $with_module)\n\t\t\t\t);\n\t\t\t\t// Relation already exists? No need to add again\n\t\t\t\tif ($checkpresence && $adb->num_rows($checkpresence)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tinsertIntoCrmEntityRel($crmid, $module, $relcrmid, $with_module);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Delete the related module record information. Triggered from updateRelations.php\n\t * @param string This module name\n\t * @param integer This module record number\n\t * @param string Related module name\n\t * @param mixed Integer or Array of related module record number\n\t */\n\tpublic function delete_related_module($module, $crmid, $with_module, $with_crmid) {\n\t\tglobal $adb;\n\t\t$with_crmid = (array)$with_crmid;\n\t\t$data = array();\n\t\t$data['sourceModule'] = $module;\n\t\t$data['sourceRecordId'] = $crmid;\n\t\t$data['destinationModule'] = $with_module;\n\t\tforeach ($with_crmid as $relcrmid) {\n\t\t\t$data['destinationRecordId'] = $relcrmid;\n\t\t\tcbEventHandler::do_action('corebos.entity.link.delete', $data);\n\t\t\tif ($with_module == 'Documents') {\n\t\t\t\t$adb->pquery('DELETE FROM vtiger_senotesrel WHERE crmid=? AND notesid=?', array($crmid, $relcrmid));\n\t\t\t} else {\n\t\t\t\tdeleteFromCrmEntityRel($crmid, $relcrmid);\n\t\t\t}\n\t\t\tcbEventHandler::do_action('corebos.entity.link.delete.final', $data);\n\t\t}\n\t}\n\n\t/**\n\t * Generic function to handle the workflow related list for a module.\n\t */\n\tpublic function getWorkflowRelatedList($id, $cur_tab_id, $rel_tab_id, $actions = false) {\n\t\trequire_once 'modules/com_vtiger_workflow/VTWorkflow.php';\n\t\tglobal $currentModule, $singlepane_view;\n\n\t\t$related_module = 'com_vtiger_workflow';\n\t\t$other = new Workflow();\n\t\tunset($other->list_fields['Tools'], $other->list_fields_name['Tools']);\n\t\t$button = '';\n\t\tif ($actions) {\n\t\t\tif (is_string($actions)) {\n\t\t\t\t$actions = explode(',', strtoupper($actions));\n\t\t\t}\n\t\t\tif (in_array('SELECT', $actions) && isPermitted($related_module, 4, '') == 'yes') {\n\t\t\t\t$button .= \"<input title='\" . getTranslatedString('LBL_SELECT') . ' ' . getTranslatedString($related_module, $related_module).\n\t\t\t\t\t\"' class='slds-button slds-button_success' type='button' onclick=\\\"return window.open('index.php?module=$related_module&return_module=$currentModule\".\n\t\t\t\t\t\"&action=Popup&popuptype=detailview&select=enable&form=EditView&form_submit=false&recordid=$id','test',\".\n\t\t\t\t\t\"cbPopupWindowSettings);\\\" value='\" . getTranslatedString('LBL_SELECT') . ' '.\n\t\t\t\t\tgetTranslatedString($related_module, $related_module) . \"'>&nbsp;\";\n\t\t\t}\n\t\t\tif (in_array('ADD', $actions) && isPermitted($related_module, 1, '') == 'yes') {\n\t\t\t\t$singular_modname = getTranslatedString('SINGLE_' . $related_module, $related_module);\n\t\t\t\t$button .= \"<input type='hidden' name='createmode' value='link' />\" .\n\t\t\t\t\t\"<input title='\" . getTranslatedString('LBL_ADD_NEW') . \" \" . $singular_modname . \"' class='crmbutton small create'\" .\n\t\t\t\t\t\" onclick='this.form.action.value=\\\"workflowlist\\\";this.form.module.value=\\\"$related_module\\\"' type='submit' name='button'\" .\n\t\t\t\t\t\" value='\" . getTranslatedString('LBL_ADD_NEW') . \" \" . $singular_modname . \"'>&nbsp;\";\n\t\t\t}\n\t\t}\n\n\t\t// To make the edit or del link actions to return back to same view.\n\t\tif ($singlepane_view == 'true') {\n\t\t\t$returnset = \"&return_module=$currentModule&return_action=DetailView&return_id=$id\";\n\t\t} else {\n\t\t\t$returnset = \"&return_module=$currentModule&return_action=CallRelatedList&return_id=$id\";\n\t\t}\n\n\t\t$query = 'SELECT *,workflow_id as crmid ';\n\t\t$query .= ' FROM com_vtiger_workflows';\n\t\t$query .= ' INNER JOIN vtiger_crmentityrel ON (vtiger_crmentityrel.relcrmid = workflow_id OR vtiger_crmentityrel.crmid = workflow_id)';\n\t\t$query .= \" WHERE (vtiger_crmentityrel.crmid = $id OR vtiger_crmentityrel.relcrmid = $id)\";\n\n\t\t$return_value = GetRelatedList($currentModule, $related_module, $other, $query, $button, $returnset);\n\n\t\tif ($return_value == null) {\n\t\t\t$return_value = array('header'=>array(),'entries'=>array(),'navigation'=>array('',''));\n\t\t}\n\t\t$return_value['CUSTOM_BUTTON'] = $button;\n\n\t\treturn $return_value;\n\t}\n\n\t/**\n\t * Default (generic) function to handle the related list for the module.\n\t * NOTE: Vtiger_Module::setRelatedList sets reference to this function in vtiger_relatedlists table\n\t * if function name is not explicitly specified.\n\t */\n\tpublic function get_related_list($id, $cur_tab_id, $rel_tab_id, $actions = false) {\n\t\tglobal $currentModule, $singlepane_view, $adb;\n\n\t\t$related_module = vtlib_getModuleNameById($rel_tab_id);\n\t\t$other = CRMEntity::getInstance($related_module);\n\n\t\t$button = '';\n\t\tif ($actions) {\n\t\t\tif (is_string($actions)) {\n\t\t\t\t$actions = explode(',', strtoupper($actions));\n\t\t\t}\n\t\t\t$wfs = '';\n\t\t\tif (in_array('SELECT', $actions) && isPermitted($related_module, 4, '') == 'yes') {\n\t\t\t\t$wfs = new VTWorkflowManager($adb);\n\t\t\t\t$racbr = $wfs->getRACRuleForRecord($currentModule, $id);\n\t\t\t\tif (!$racbr || $racbr->hasRelatedListPermissionTo('select', $related_module)) {\n\t\t\t\t\t$button .= \"<input title='\" . getTranslatedString('LBL_SELECT') . ' ' . getTranslatedString($related_module, $related_module).\n\t\t\t\t\t\t\"' class='slds-button slds-button_success' type='button' onclick=\\\"return window.open('index.php?module=$related_module&return_module=$currentModule\".\n\t\t\t\t\t\t\"&action=Popup&popuptype=detailview&select=enable&form=EditView&form_submit=false&recordid=$id','test',\".\n\t\t\t\t\t\t\"cbPopupWindowSettings);\\\" value='\" . getTranslatedString('LBL_SELECT') . ' '.\n\t\t\t\t\t\tgetTranslatedString($related_module, $related_module) . \"'>&nbsp;\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (in_array('ADD', $actions) && isPermitted($related_module, 1, '') == 'yes') {\n\t\t\t\tif ($wfs == '') {\n\t\t\t\t\t$wfs = new VTWorkflowManager($adb);\n\t\t\t\t\t$racbr = $wfs->getRACRuleForRecord($currentModule, $id);\n\t\t\t\t}\n\t\t\t\tif (!$racbr || $racbr->hasRelatedListPermissionTo('create', $related_module)) {\n\t\t\t\t\t$singular_modname = getTranslatedString('SINGLE_' . $related_module, $related_module);\n\t\t\t\t\t$button .= \"<input type='hidden' name='createmode' value='link' />\" .\n\t\t\t\t\t\t\"<input title='\" . getTranslatedString('LBL_ADD_NEW') . \" \" . $singular_modname . \"' class='slds-button slds-button_neutral'\" .\n\t\t\t\t\t\t\" onclick='this.form.action.value=\\\"EditView\\\";this.form.module.value=\\\"$related_module\\\"' type='submit' name='button'\" .\n\t\t\t\t\t\t\" value='\" . getTranslatedString('LBL_ADD_NEW') . \" \" . $singular_modname . \"'>&nbsp;\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// To make the edit or del link actions to return back to same view.\n\t\tif ($singlepane_view == 'true') {\n\t\t\t$returnset = \"&return_module=$currentModule&return_action=DetailView&return_id=$id\";\n\t\t} else {\n\t\t\t$returnset = \"&return_module=$currentModule&return_action=CallRelatedList&return_id=$id\";\n\t\t}\n\t\tif ($related_module == 'Users') {\n\t\t\t$query = 'SELECT vtiger_users.* ';\n\t\t\t$maintableid = 'vtiger_users.id';\n\t\t\t$q_elsegroupname = '';\n\t\t} else {\n\t\t\t$query = 'SELECT vtiger_crmentity.* ';\n\t\t\t$maintableid = 'vtiger_crmentity.crmid';\n\t\t\t$q_elsegroupname = 'ELSE vtiger_groups.groupname ';\n\t\t}\n\t\t$query .= \", CASE WHEN (vtiger_users.user_name NOT LIKE '') THEN vtiger_users.ename {$q_elsegroupname}END AS user_name\";\n\n\t\t$more_relation = '';\n\t\t// Select Custom Field Table Columns if present\n\t\tif (isset($other->customFieldTable) && empty($other->related_tables[$other->customFieldTable[0]])) {\n\t\t\t$query .= ', '.$other->customFieldTable[0].'.*';\n\t\t\t$more_relation .= ' INNER JOIN '.$other->customFieldTable[0].' ON '.$other->customFieldTable[0].'.'.$other->customFieldTable[1] .\n\t\t\t\t\" = $other->table_name.$other->table_index\";\n\t\t}\n\t\tif (!empty($other->related_tables)) {\n\t\t\tforeach ($other->related_tables as $tname => $relmap) {\n\t\t\t\t$query .= \", $tname.*\";\n\n\t\t\t\t// Setup the default JOIN conditions if not specified\n\t\t\t\tif (empty($relmap[1])) {\n\t\t\t\t\t$relmap[1] = $other->table_name;\n\t\t\t\t}\n\t\t\t\tif (empty($relmap[2])) {\n\t\t\t\t\t$relmap[2] = $relmap[0];\n\t\t\t\t}\n\t\t\t\t$more_relation .= \" LEFT JOIN $tname ON $tname.$relmap[0] = $relmap[1].$relmap[2]\";\n\t\t\t}\n\t\t}\n\t\t$query .= ', '.$other->table_name.'.*';\n\t\t$query .= \" FROM $other->table_name\";\n\t\tif ($related_module != 'Users') {\n\t\t\t$query .= ' INNER JOIN '.$other->crmentityTableAlias.\" ON vtiger_crmentity.crmid=$other->table_name.$other->table_index\";\n\t\t}\n\t\t$query .= ' INNER JOIN vtiger_crmentityreldenorm ON vtiger_crmentityreldenorm.relcrmid='.$maintableid;\n\t\t$query .= $more_relation;\n\t\tif ($related_module != 'Users') {\n\t\t\t$query .= ' LEFT JOIN vtiger_users ON vtiger_users.id = '.$other->crmentityTable.'.smownerid';\n\t\t\t$query .= ' LEFT JOIN vtiger_groups ON vtiger_groups.groupid = '.$other->crmentityTable.'.smownerid';\n\t\t\t$del_table = $other->crmentityTable;\n\t\t} else {\n\t\t\t$del_table = 'vtiger_users';\n\t\t}\n\t\t$query .= \" WHERE {$del_table}.deleted = 0 AND vtiger_crmentityreldenorm.crmid=$id\";\n\n\t\t$return_value = GetRelatedList($currentModule, $related_module, $other, $query, $button, $returnset);\n\n\t\tif ($return_value == null) {\n\t\t\t$return_value = array('header'=>array(),'entries'=>array(),'navigation'=>array('',''));\n\t\t}\n\t\t$return_value['CUSTOM_BUTTON'] = $button;\n\n\t\treturn $return_value;\n\t}\n\n\t/**\n\t * Default (generic) function to handle the dependents list for the module.\n\t * NOTE: UI type '10' is used to stored the references to other modules for a given record.\n\t * These dependent records can be retrieved through this function.\n\t * For eg: A trouble ticket can be related to an Account or a Contact.\n\t * From a given Contact/Account if we need to fetch all such dependent trouble tickets, get_dependents_list function can be used.\n\t */\n\tpublic function get_dependents_list($id, $cur_tab_id, $rel_tab_id, $actions = false, $customactions = '') {\n\t\tglobal $currentModule, $singlepane_view, $current_user, $adb;\n\n\t\t$related_module = vtlib_getModuleNameById($rel_tab_id);\n\t\t$other = CRMEntity::getInstance($related_module);\n\n\t\t$button = '';\n\n\t\t// To make the edit or del link actions to return back to same view.\n\t\tif ($singlepane_view == 'true') {\n\t\t\t$returnset = \"&return_module=$currentModule&return_action=DetailView&return_id=$id\";\n\t\t} else {\n\t\t\t$returnset = \"&return_module=$currentModule&return_action=CallRelatedList&return_id=$id\";\n\t\t}\n\n\t\t$return_value = null;\n\t\t$dependentFieldSql = $adb->pquery(\"SELECT tabid, tablename, fieldname, columnname FROM vtiger_field WHERE uitype='10' AND\"\n\t\t\t.' fieldid IN (SELECT fieldid FROM vtiger_fieldmodulerel WHERE relmodule=? AND module=?)', array($currentModule, $related_module));\n\t\t$numOfFields = $adb->num_rows($dependentFieldSql);\n\n\t\t$relWithSelf = false;\n\t\tif ($numOfFields > 0) {\n\t\t\t$relconds = array();\n\t\t\twhile ($depflds = $adb->fetch_array($dependentFieldSql)) {\n\t\t\t\t$dependentTable = $depflds['tablename'];\n\t\t\t\tif (isset($other->related_tables)) {\n\t\t\t\t\t$otherRelatedTable = (array)$other->related_tables;\n\t\t\t\t} else {\n\t\t\t\t\t$otherRelatedTable = array();\n\t\t\t\t}\n\t\t\t\tif ($dependentTable!=$other->table_name && !in_array($dependentTable, $otherRelatedTable)) {\n\t\t\t\t\t$relidx = isset($other->tab_name_index[$dependentTable]) ? $other->tab_name_index[$dependentTable] : $other->table_index;\n\t\t\t\t\t$other->related_tables[$dependentTable] = array($relidx,$other->table_name,$other->table_index);\n\t\t\t\t}\n\t\t\t\t$dependentColumn = $depflds['columnname'];\n\t\t\t\t$dependentField = $depflds['fieldname'];\n\t\t\t\tif ($this->table_name==$other->table_name) {\n\t\t\t\t\t$thistablename = $this->table_name.'RelSelf';\n\t\t\t\t\t$relWithSelf = true;\n\t\t\t\t} else {\n\t\t\t\t\t$thistablename = $this->table_name;\n\t\t\t\t}\n\t\t\t\t$relconds[] = \"$thistablename.$this->table_index = $dependentTable.$dependentColumn\";\n\t\t\t\t$button .= '<input type=\"hidden\" name=\"' . $dependentField . '\" id=\"' . $dependentColumn . '\" value=\"' . $id . '\">';\n\t\t\t\t$button .= '<input type=\"hidden\" name=\"' . $dependentField . '_type\" id=\"' . $dependentColumn . '_type\" value=\"' . $currentModule . '\">';\n\t\t\t}\n\t\t\t$relationconditions = '('.implode(' or ', $relconds).')';\n\t\t\t$button .= $customactions;\n\t\t\tif ($actions) {\n\t\t\t\tif (is_string($actions)) {\n\t\t\t\t\t$actions = explode(',', strtoupper($actions));\n\t\t\t\t}\n\t\t\t\t$wfs = '';\n\t\t\t\tif (in_array('ADD', $actions) && isPermitted($related_module, 1, '') == 'yes'\n\t\t\t\t\t\t&& getFieldVisibilityPermission($related_module, $current_user->id, $dependentField, 'readwrite') == '0') {\n\t\t\t\t\t$wfs = new VTWorkflowManager($adb);\n\t\t\t\t\t$racbr = $wfs->getRACRuleForRecord($currentModule, $id);\n\t\t\t\t\tif (!$racbr || $racbr->hasRelatedListPermissionTo('create', $related_module)) {\n\t\t\t\t\t\t$singular_modname = getTranslatedString('SINGLE_' . $related_module, $related_module);\n\t\t\t\t\t\t$button .= \"<input title='\" . getTranslatedString('LBL_ADD_NEW').' '.$singular_modname.\"' class='slds-button slds-button_neutral'\"\n\t\t\t\t\t\t\t.\" onclick='this.form.action.value=\\\"EditView\\\";this.form.module.value=\\\"$related_module\\\"' type='submit' name='button'\"\n\t\t\t\t\t\t\t.\" value='\".getTranslatedString('LBL_ADD_NEW').' '.$singular_modname.\"'>&nbsp;\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$joinTabled = [];\n\t\t\t$query = \"SELECT vtiger_crmentity.*, $other->table_name.*\";\n\n\t\t\t$query .= \", CASE WHEN (vtiger_users.user_name NOT LIKE '') THEN vtiger_users.ename ELSE vtiger_groups.groupname END AS user_name\";\n\n\t\t\t$more_relation = '';\n\t\t\tif (isset($other->customFieldTable) && empty($other->related_tables[$other->customFieldTable[0]])) {\n\t\t\t\t$query .= ', '.$other->customFieldTable[0].'.*';\n\t\t\t\t$more_relation .= ' INNER JOIN '.$other->customFieldTable[0].' ON '.$other->customFieldTable[0].'.'.$other->customFieldTable[1] .\n\t\t\t\t\t\" = $other->table_name.$other->table_index\";\n\t\t\t\t$joinTabled[] = $other->customFieldTable[0];\n\t\t\t}\n\t\t\tif (!empty($other->related_tables)) {\n\t\t\t\tforeach ($other->related_tables as $tname => $relmap) {\n\t\t\t\t\t$query .= \", $tname.*\";\n\n\t\t\t\t\t// Setup the default JOIN conditions if not specified\n\t\t\t\t\tif (empty($relmap[1])) {\n\t\t\t\t\t\t$relmap[1] = $other->table_name;\n\t\t\t\t\t}\n\t\t\t\t\tif (empty($relmap[2])) {\n\t\t\t\t\t\t$relmap[2] = $relmap[0];\n\t\t\t\t\t}\n\t\t\t\t\tif (!in_array($tname, $joinTabled)) {\n\t\t\t\t\t\t$more_relation .= \" LEFT JOIN $tname ON $tname.$relmap[0] = $relmap[1].$relmap[2]\";\n\t\t\t\t\t\t$joinTabled[] = $tname;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$query .= \" FROM $other->table_name\";\n\t\t\t$query .= ' INNER JOIN '.$other->crmentityTableAlias.\" ON vtiger_crmentity.crmid = $other->table_name.$other->table_index\";\n\t\t\t$query .= $more_relation;\n\t\t\tif ($relWithSelf) {\n\t\t\t\t$query .= \" INNER JOIN $this->table_name as \".$this->table_name.\"RelSelf ON $relationconditions\";\n\t\t\t} else {\n\t\t\t\tif (!in_array($this->table_name, $joinTabled)) {\n\t\t\t\t\t$query .= \" INNER JOIN $this->table_name ON $relationconditions\";\n\t\t\t\t\t$joinTabled[] = $this->table_name;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$query .= ' LEFT JOIN vtiger_users ON vtiger_users.id = '.$other->crmentityTable.'.smownerid';\n\t\t\t$query .= ' LEFT JOIN vtiger_groups ON vtiger_groups.groupid = '.$other->crmentityTable.'.smownerid';\n\n\t\t\tif ($relWithSelf) {\n\t\t\t\t$query .= ' WHERE '.$other->crmentityTable.'.deleted=0 AND '.$this->table_name.\"RelSelf.$this->table_index = $id\";\n\t\t\t} else {\n\t\t\t\t$query .= \" WHERE \".$other->crmentityTable.\".deleted=0 AND $this->table_name.$this->table_index = $id\";\n\t\t\t}\n\n\t\t\t$return_value = GetRelatedList($currentModule, $related_module, $other, $query, $button, $returnset);\n\t\t}\n\t\tif ($return_value == null) {\n\t\t\t$return_value = array('header'=>array(),'entries'=>array(),'navigation'=>array('',''));\n\t\t}\n\t\t$return_value['CUSTOM_BUTTON'] = $button;\n\n\t\treturn $return_value;\n\t}\n\n\t/** Returns a list of the associated cbCalendar events\n\t * Defined here for backward compatibility with previous calendar system\n\t*/\n\tpublic function get_activities($id, $cur_tab_id, $rel_tab_id, $actions = false) {\n\t\tglobal $currentModule, $app_strings, $singlepane_view, $current_user, $adb;\n\t\t$rel_tab_id = getTabid('cbCalendar');\n\n\t\t$related_module = vtlib_getModuleNameById($rel_tab_id);\n\t\t$other = CRMEntity::getInstance($related_module);\n\n\t\t$button = '';\n\n\t\t// To make the edit or del link actions to return back to same view.\n\t\tif ($singlepane_view == 'true') {\n\t\t\t$returnset = \"&return_module=$currentModule&return_action=DetailView&return_id=$id\";\n\t\t} else {\n\t\t\t$returnset = \"&return_module=$currentModule&return_action=CallRelatedList&return_id=$id\";\n\t\t}\n\n\t\t$return_value = null;\n\t\t$dependentFieldSql = $adb->pquery(\n\t\t\t\"SELECT tabid, tablename, fieldname, columnname FROM vtiger_field WHERE uitype='10' AND fieldid IN (SELECT fieldid FROM vtiger_fieldmodulerel WHERE relmodule=? AND module=?)\",\n\t\t\tarray($currentModule, $related_module)\n\t\t);\n\t\t$numOfFields = $adb->num_rows($dependentFieldSql);\n\n\t\t$relWithSelf = false;\n\t\tif ($numOfFields > 0) {\n\t\t\t$relconds = array();\n\t\t\twhile ($depflds = $adb->fetch_array($dependentFieldSql)) {\n\t\t\t\t$dependentTable = $depflds['tablename'];\n\t\t\t\tif (isset($other->related_tables)) {\n\t\t\t\t\t$otherRelatedTable = (array)$other->related_tables;\n\t\t\t\t} else {\n\t\t\t\t\t$otherRelatedTable = '';\n\t\t\t\t}\n\t\t\t\tif ($dependentTable!=$other->table_name && !in_array($dependentTable, $otherRelatedTable)) {\n\t\t\t\t\t$relidx = isset($other->tab_name_index[$dependentTable]) ? $other->tab_name_index[$dependentTable] : $other->table_index;\n\t\t\t\t\t$other->related_tables[$dependentTable] = array($relidx,$other->table_name,$other->table_index);\n\t\t\t\t}\n\t\t\t\t$dependentColumn = $depflds['columnname'];\n\t\t\t\t$dependentField = $depflds['fieldname'];\n\t\t\t\tif ($this->table_name==$other->table_name) {\n\t\t\t\t\t$thistablename = $this->table_name.'RelSelf';\n\t\t\t\t\t$relWithSelf = true;\n\t\t\t\t} else {\n\t\t\t\t\t$thistablename = $this->table_name;\n\t\t\t\t}\n\t\t\t\t$relconds[] = \"$thistablename.$this->table_index = $dependentTable.$dependentColumn\";\n\t\t\t\t$button .= '<input type=\"hidden\" name=\"' . $dependentColumn . '\" id=\"' . $dependentColumn . '\" value=\"' . $id . '\">';\n\t\t\t\t$button .= '<input type=\"hidden\" name=\"' . $dependentColumn . '_type\" id=\"' . $dependentColumn . '_type\" value=\"' . $currentModule . '\">';\n\t\t\t}\n\t\t\t$relationconditions = '('.implode(' or ', $relconds).')';\n\t\t\t$calStatus = getAssignedPicklistValues('eventstatus', $current_user->roleid, $adb, $app_strings);\n\t\t\t$relid = $adb->run_query_field('select relation_id from vtiger_relatedlists where tabid='.$cur_tab_id.' and related_tabid='.$rel_tab_id, 'relation_id');\n\t\t\t$button .= '<select style=\"max-width: 20%\" name=\"cbcalendar_filter\" class=\"slds-select\" onchange=\"loadRelatedListBlock(\\'module='.$currentModule.'&action='.$currentModule.\n\t\t\t\t'Ajax&file=DetailViewAjax&record='.$id.'&ajxaction=LOADRELATEDLIST&header=Activities&relation_id='.$relid.\n\t\t\t\t'&cbcalendar_filter=\\'+this.options[this.options.selectedIndex].value+\\'&actions=add\\',\\'tbl_'.$currentModule.'_Activities\\',\\''.\n\t\t\t\t$currentModule.'_Activities\\');\"><option value=\"all\">'.getTranslatedString('LBL_ALL').'</option>';\n\t\t\tif (!isset($_REQUEST['cbcalendar_filter'])) {\n\t\t\t\t$_REQUEST['cbcalendar_filter'] = GlobalVariable::getVariable('RelatedList_Activity_DefaultStatusFilter', 'all', $currentModule);\n\t\t\t}\n\t\t\tforeach ($calStatus as $cstatkey => $cstatvalue) {\n\t\t\t\t$button .= '<option value=\"'.$cstatkey.'\" '.\n\t\t\t\t\t($_REQUEST['cbcalendar_filter']==$cstatkey ? 'selected' : '').'>'.$cstatvalue.'</option>';\n\t\t\t}\n\t\t\t$button .= '</select>&nbsp;';\n\t\t\tif ($actions) {\n\t\t\t\tif (is_string($actions)) {\n\t\t\t\t\t$actions = explode(',', strtoupper($actions));\n\t\t\t\t}\n\t\t\t\t$wfs = '';\n\t\t\t\tif (in_array('ADD', $actions) && isPermitted($related_module, 1, '') == 'yes'\n\t\t\t\t\t\t&& getFieldVisibilityPermission($related_module, $current_user->id, $dependentField, 'readwrite') == '0') {\n\t\t\t\t\t$wfs = new VTWorkflowManager($adb);\n\t\t\t\t\t$racbr = $wfs->getRACRuleForRecord($currentModule, $id);\n\t\t\t\t\tif (!$racbr || $racbr->hasRelatedListPermissionTo('create', $related_module)) {\n\t\t\t\t\t\t$singular_modname = getTranslatedString('SINGLE_' . $related_module, $related_module);\n\t\t\t\t\t\t$button .= \"<input title='\" . getTranslatedString('LBL_ADD_NEW') . ' ' . $singular_modname . \"' class='slds-button slds-button_neutral'\" .\n\t\t\t\t\t\t\t\" onclick='this.form.action.value=\\\"EditView\\\";this.form.module.value=\\\"$related_module\\\"' type='submit' name='button'\" .\n\t\t\t\t\t\t\t\" value='\" . getTranslatedString('LBL_ADD_NEW') . ' ' . $singular_modname . \"'>&nbsp;\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$query = \"SELECT vtiger_crmentity.*, $other->table_name.*\";\n\n\t\t\t$query .= \", CASE WHEN (vtiger_users.user_name NOT LIKE '') THEN vtiger_users.ename ELSE vtiger_groups.groupname END AS user_name\";\n\n\t\t\t$more_relation = '';\n\t\t\tif (!empty($other->related_tables)) {\n\t\t\t\tforeach ($other->related_tables as $tname => $relmap) {\n\t\t\t\t\t$query .= \", $tname.*\";\n\n\t\t\t\t\t// Setup the default JOIN conditions if not specified\n\t\t\t\t\tif (empty($relmap[1])) {\n\t\t\t\t\t\t$relmap[1] = $other->table_name;\n\t\t\t\t\t}\n\t\t\t\t\tif (empty($relmap[2])) {\n\t\t\t\t\t\t$relmap[2] = $relmap[0];\n\t\t\t\t\t}\n\t\t\t\t\t$more_relation .= \" LEFT JOIN $tname ON $tname.$relmap[0] = $relmap[1].$relmap[2]\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$query .= \" FROM $other->table_name\";\n\t\t\t$query .= ' INNER JOIN '.$other->crmentityTableAlias.\" ON vtiger_crmentity.crmid = $other->table_name.$other->table_index\";\n\t\t\t$query .= $more_relation;\n\t\t\tif ($relWithSelf) {\n\t\t\t\t$query .= \" INNER JOIN $this->table_name as \".$this->table_name.\"RelSelf ON $relationconditions\";\n\t\t\t} else {\n\t\t\t\t$query .= \" INNER JOIN $this->table_name ON $relationconditions\";\n\t\t\t}\n\t\t\t$query .= ' LEFT JOIN vtiger_users ON vtiger_users.id = '.$other->crmentityTable.'.smownerid';\n\t\t\t$query .= ' LEFT JOIN vtiger_groups ON vtiger_groups.groupid = '.$other->crmentityTable.'.smownerid';\n\n\t\t\tif ($relWithSelf) {\n\t\t\t\t$query .= ' WHERE '.$other->crmentityTable.'.deleted=0 AND '.$this->table_name.\"RelSelf.$this->table_index = $id\";\n\t\t\t} else {\n\t\t\t\t$query .= \" WHERE \".$other->crmentityTable.\".deleted=0 AND $this->table_name.$this->table_index = $id\";\n\t\t\t}\n\t\t\t$query .= \" AND vtiger_activity.activitytype != 'Emails'\";\n\t\t\tif ($_REQUEST['cbcalendar_filter'] != 'all') {\n\t\t\t\t$query .= $adb->convert2Sql(' and vtiger_activity.eventstatus=? ', array(vtlib_purify($_REQUEST['cbcalendar_filter'])));\n\t\t\t}\n\t\t\t$return_value = GetRelatedList($currentModule, $related_module, $other, $query, $button, $returnset);\n\t\t}\n\t\tif ($return_value == null) {\n\t\t\t$return_value = array('header'=>array(),'entries'=>array(),'navigation'=>array('',''));\n\t\t}\n\t\t$return_value['CUSTOM_BUTTON'] = $button;\n\n\t\treturn $return_value;\n\t}\n\n\t/**\n\t * Move the related records of the specified list of id's to the given record.\n\t * @param string This module name\n\t * @param array List of Entity Id's from which related records need to be transfered\n\t * @param integer Id of the the Record to which the related records are to be moved\n\t */\n\tpublic function transferRelatedRecords($module, $transferEntityIds, $entityId) {\n\t\tglobal $adb, $log;\n\t\t$log->debug('> transferRelatedRecords', [$module, $transferEntityIds, $entityId]);\n\t\tinclude_once 'include/utils/duplicate.php';\n\t\t$rel_table_arr = array('Activities'=>'vtiger_seactivityrel');\n\t\t$tbl_field_arr = array('vtiger_seactivityrel'=>'activityid');\n\t\t$entity_tbl_field_arr = array('vtiger_seactivityrel'=>'crmid');\n\t\t$depmods = getUIType10DependentModules($module);\n\t\tunset($depmods['ModComments']);\n\t\tforeach ($depmods as $mod => $details) {\n\t\t\t$rel_table_arr[$mod] = $details['tablename'];\n\t\t\t$modobj = CRMEntity::getInstance($mod);\n\t\t\t$tbl_field_arr[$details['tablename']] = $modobj->tab_name_index[$details['tablename']];\n\t\t\t$entity_tbl_field_arr[$details['tablename']] = $details['columname'];\n\t\t}\n\n\t\tforeach ($transferEntityIds as $transferId) {\n\t\t\tforeach ($rel_table_arr as $rel_table) {\n\t\t\t\t$id_field = $tbl_field_arr[$rel_table];\n\t\t\t\t$entity_id_field = $entity_tbl_field_arr[$rel_table];\n\n\t\t\t\t// IN clause to avoid duplicate entries\n\t\t\t\t$sel_result = $adb->pquery(\n\t\t\t\t\t\"select $id_field from $rel_table where $entity_id_field=? and $id_field not in (select $id_field from $rel_table where $entity_id_field=?)\",\n\t\t\t\t\tarray($transferId,$entityId)\n\t\t\t\t);\n\t\t\t\t$res_cnt = $adb->num_rows($sel_result);\n\t\t\t\tif ($res_cnt > 0) {\n\t\t\t\t\tfor ($i=0; $i<$res_cnt; $i++) {\n\t\t\t\t\t\t$id_field_value = $adb->query_result($sel_result, $i, $id_field);\n\t\t\t\t\t\t$adb->pquery(\n\t\t\t\t\t\t\t\"update $rel_table set $entity_id_field=? where $entity_id_field=? and $id_field=?\",\n\t\t\t\t\t\t\tarray($entityId,$transferId,$id_field_value)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Pick the records related to the entity to be transfered, but do not pick the ones which are already related to the current entity.\n\t\t\t$relatedRecords = $adb->pquery(\n\t\t\t\t'SELECT relcrmid, relmodule FROM vtiger_crmentityrel WHERE crmid=? AND module=?'\n\t\t\t\t\t.' AND relcrmid NOT IN (SELECT relcrmid FROM vtiger_crmentityrel WHERE crmid=? AND module=?)',\n\t\t\t\tarray($transferId, $module, $entityId, $module)\n\t\t\t);\n\t\t\t$numOfRecords = $adb->num_rows($relatedRecords);\n\t\t\tfor ($i = 0; $i < $numOfRecords; $i++) {\n\t\t\t\t$relcrmid = $adb->query_result($relatedRecords, $i, 'relcrmid');\n\t\t\t\t$relmodule = $adb->query_result($relatedRecords, $i, 'relmodule');\n\t\t\t\t$adb->pquery(\n\t\t\t\t\t'UPDATE vtiger_crmentityrel SET crmid=? WHERE relcrmid=? AND relmodule=? AND crmid=? AND module=?',\n\t\t\t\t\tarray($entityId, $relcrmid, $relmodule, $transferId, $module)\n\t\t\t\t);\n\t\t\t\t$adb->pquery(\n\t\t\t\t\t'UPDATE vtiger_crmentityreldenorm SET crmid=? WHERE relcrmid=? AND relmodule=? AND crmid=? AND module=?',\n\t\t\t\t\tarray($entityId, $relcrmid, $relmodule, $transferId, $module)\n\t\t\t\t);\n\t\t\t\t$adb->pquery(\n\t\t\t\t\t'UPDATE vtiger_crmentityreldenorm SET relcrmid=? WHERE crmid=? AND module=? AND relcrmid=? AND relmodule=?',\n\t\t\t\t\tarray($entityId, $relcrmid, $relmodule, $transferId, $module)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Pick the records to which the entity to be transfered is related, but do not pick the ones to which current entity is already related.\n\t\t\t$parentRecords = $adb->pquery(\n\t\t\t\t'SELECT crmid, module FROM vtiger_crmentityrel WHERE relcrmid=? AND relmodule=? AND crmid NOT IN\n\t\t\t\t\t(SELECT crmid FROM vtiger_crmentityrel WHERE relcrmid=? AND relmodule=?)',\n\t\t\t\tarray($transferId, $module, $entityId, $module)\n\t\t\t);\n\t\t\t$numOfRecords = $adb->num_rows($parentRecords);\n\t\t\tfor ($i = 0; $i < $numOfRecords; $i++) {\n\t\t\t\t$parcrmid = $adb->query_result($parentRecords, $i, 'crmid');\n\t\t\t\t$parmodule = $adb->query_result($parentRecords, $i, 'module');\n\t\t\t\t$adb->pquery(\n\t\t\t\t\t'UPDATE vtiger_crmentityrel SET relcrmid=? WHERE crmid=? AND module=? AND relcrmid=? AND relmodule=?',\n\t\t\t\t\tarray($entityId, $parcrmid, $parmodule, $transferId, $module)\n\t\t\t\t);\n\t\t\t\t$adb->pquery(\n\t\t\t\t\t'UPDATE vtiger_crmentityreldenorm SET relcrmid=? WHERE crmid=? AND module=? AND relcrmid=? AND relmodule=?',\n\t\t\t\t\tarray($entityId, $parcrmid, $parmodule, $transferId, $module)\n\t\t\t\t);\n\t\t\t\t$adb->pquery(\n\t\t\t\t\t'UPDATE vtiger_crmentityreldenorm SET crmid=? WHERE relcrmid=? AND relmodule=? AND crmid=? AND module=?',\n\t\t\t\t\tarray($entityId, $parcrmid, $parmodule, $transferId, $module)\n\t\t\t\t);\n\t\t\t}\n\t\t\t$adb->pquery('UPDATE vtiger_modcomments SET related_to = ? WHERE related_to = ?', array($entityId, $transferId));\n\t\t\t$adb->pquery('UPDATE vtiger_senotesrel SET crmid = ? WHERE crmid = ?', array($entityId, $transferId));\n\t\t}\n\t\t$log->debug('< transferRelatedRecords');\n\t}\n\n\t/**\n\t * Function to get the primary query part of a report\n\t * @param string primary module name\n\t * @return string query string formed on fetching the related data for report for primary module\n\t */\n\tpublic function generateReportsQuery($module, $queryPlanner) {\n\t\tglobal $adb;\n\t\t$primary = CRMEntity::getInstance($module);\n\n\t\t$moduletable = $primary->table_name;\n\t\t$moduleindex = $primary->table_index;\n\t\tif (count($primary->customFieldTable)>0) {\n\t\t\t$modulecftable = $primary->customFieldTable[0];\n\t\t\t$modulecfindex = $primary->customFieldTable[1];\n\t\t}\n\t\tif (isset($modulecftable) && $queryPlanner->requireTable($modulecftable)) {\n\t\t\t$cfquery = \"inner join $modulecftable as $modulecftable on $modulecftable.$modulecfindex=$moduletable.$moduleindex\";\n\t\t} else {\n\t\t\t$cfquery = '';\n\t\t}\n\t\t$relquery = '';\n\t\t$matrix = $queryPlanner->newDependencyMatrix();\n\n\t\t$fields_query = $adb->pquery(\n\t\t\t'SELECT vtiger_field.columnname,vtiger_field.tablename,vtiger_field.fieldid\n\t\t\t\tFROM vtiger_field\n\t\t\t\tINNER JOIN vtiger_tab on vtiger_tab.name=?\n\t\t\t\tWHERE vtiger_tab.tabid=vtiger_field.tabid AND vtiger_field.uitype=10 and vtiger_field.presence in (0,2)',\n\t\t\tarray($module)\n\t\t);\n\t\tif ($adb->num_rows($fields_query) > 0) {\n\t\t\tfor ($i = 0; $i < $adb->num_rows($fields_query); $i++) {\n\t\t\t\t$col_name = $adb->query_result($fields_query, $i, 'columnname');\n\t\t\t\t$field_id = $adb->query_result($fields_query, $i, 'fieldid');\n\t\t\t\t$tab_name = $adb->query_result($fields_query, $i, 'tablename');\n\t\t\t\t$ui10_modules_query = $adb->pquery('SELECT relmodule FROM vtiger_fieldmodulerel WHERE fieldid=?', array($field_id));\n\n\t\t\t\tif ($adb->num_rows($ui10_modules_query) > 0) {\n\t\t\t\t\t// Capture the forward table dependencies due to dynamic related-field\n\t\t\t\t\t$crmentityRelModuleFieldTable = \"vtiger_crmentityRel$module$field_id\";\n\n\t\t\t\t\t$crmentityRelModuleFieldTableDeps = array();\n\t\t\t\t\tfor ($j = 0; $j < $adb->num_rows($ui10_modules_query); $j++) {\n\t\t\t\t\t\t$rel_mod = $adb->query_result($ui10_modules_query, $j, 'relmodule');\n\t\t\t\t\t\t$rel_obj = CRMEntity::getInstance($rel_mod);\n\t\t\t\t\t\t$rel_tab_name = $rel_obj->table_name;\n\t\t\t\t\t\t$crmentityRelModuleFieldTableDeps[] = $rel_tab_name . \"Rel$module$field_id\";\n\t\t\t\t\t}\n\t\t\t\t\t$matrix->setDependency($crmentityRelModuleFieldTable, $crmentityRelModuleFieldTableDeps);\n\t\t\t\t\t$matrix->addDependency($tab_name, $crmentityRelModuleFieldTable);\n\n\t\t\t\t\tif ($queryPlanner->requireTable($crmentityRelModuleFieldTable, $matrix)) {\n\t\t\t\t\t\t$relquery.= ' left join '.$this->crmentityTable.\" as $crmentityRelModuleFieldTable on \".\n\t\t\t\t\t\t\t\"$crmentityRelModuleFieldTable.crmid = $tab_name.$col_name and $crmentityRelModuleFieldTable.deleted=0\";\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ($j = 0; $j < $adb->num_rows($ui10_modules_query); $j++) {\n\t\t\t\t\t\t$rel_mod = $adb->query_result($ui10_modules_query, $j, 'relmodule');\n\t\t\t\t\t\t$rel_obj = CRMEntity::getInstance($rel_mod);\n\n\t\t\t\t\t\t$rel_tab_name = $rel_obj->table_name;\n\t\t\t\t\t\t$rel_tab_index = $rel_obj->table_index;\n\n\t\t\t\t\t\t$rel_tab_name_rel_module_table_alias = $rel_tab_name . \"Rel$module$field_id\";\n\n\t\t\t\t\t\tif ($queryPlanner->requireTable($rel_tab_name_rel_module_table_alias)) {\n\t\t\t\t\t\t\t$relquery.= \" left join $rel_tab_name as $rel_tab_name_rel_module_table_alias on \".\n\t\t\t\t\t\t\t\t\"$rel_tab_name_rel_module_table_alias.$rel_tab_index = $crmentityRelModuleFieldTable.crmid\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$query = \"from $moduletable \";\n\t\t$query .= 'inner join '.$this->crmentityTableAlias.\" on vtiger_crmentity.crmid=$moduletable.$moduleindex\";\n\n\t\t// Add the pre-joined custom table query\n\t\t$query .= ' ' . $cfquery;\n\n\t\tif ($queryPlanner->requireTable('vtiger_users'.$module) || $queryPlanner->requireTable('vtiger_groups'.$module)) {\n\t\t\t$query .= \" left join vtiger_users as vtiger_users\" . $module . \" on vtiger_users\" . $module . \".id = \".$this->crmentityTable.\".smownerid\";\n\t\t\t$query .= \" left join vtiger_groups as vtiger_groups\" . $module . \" on vtiger_groups\" . $module . \".groupid = \".$this->crmentityTable.\".smownerid\";\n\t\t}\n\t\tif ($queryPlanner->requireTable('vtiger_lastModifiedBy'.$module)) {\n\t\t\t$query .= \" left join vtiger_users as vtiger_lastModifiedBy\" . $module . \" on vtiger_lastModifiedBy\" . $module . \".id = \".$this->crmentityTable.\".modifiedby\";\n\t\t}\n\t\tif ($queryPlanner->requireTable('vtiger_CreatedBy'.$module)) {\n\t\t\t$query .= \" LEFT JOIN vtiger_users AS vtiger_CreatedBy$module ON vtiger_CreatedBy$module.id=\".$this->crmentityTable.\".smcreatorid\";\n\t\t}\n\t\t$query .= ' left join vtiger_groups on vtiger_groups.groupid = '.$this->crmentityTable.'.smownerid';\n\t\t$query .= ' left join vtiger_users on vtiger_users.id = '.$this->crmentityTable.'.smownerid';\n\n\t\t// Add the pre-joined relation table query\n\t\t$query .= ' ' . $relquery;\n\n\t\t$fields_query = $adb->pquery(\n\t\t\t'SELECT vtiger_field.columnname,vtiger_field.tablename,vtiger_field.fieldid\n\t\t\t\tFROM vtiger_field\n\t\t\t\tINNER JOIN vtiger_tab on vtiger_tab.name = ?\n\t\t\t\tWHERE vtiger_tab.tabid=vtiger_field.tabid AND vtiger_field.uitype = 101 and vtiger_field.presence in (0,2)',\n\t\t\tarray($module)\n\t\t);\n\t\tif ($adb->num_rows($fields_query) > 0) {\n\t\t\tfor ($i = 0; $i < $adb->num_rows($fields_query); $i++) {\n\t\t\t\t$field_id = $adb->query_result($fields_query, $i, 'fieldid');\n\t\t\t\t$usrTable = \"vtiger_usersRel$module$field_id\";\n\t\t\t\tif ($queryPlanner->requireTable($usrTable)) {\n\t\t\t\t\t$col_name = $adb->query_result($fields_query, $i, 'columnname');\n\t\t\t\t\t$tab_name = $adb->query_result($fields_query, $i, 'tablename');\n\t\t\t\t\t$query.= \" left join vtiger_users as $usrTable on $usrTable.id = $tab_name.$col_name\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $query;\n\t}\n\n\t/**\n\t * Function to get the secondary query part of a report\n\t * @param string primary module name\n\t * @param string secondary module name\n\t * @return string query string formed on fetching the related data for report for secondary module\n\t */\n\tpublic function generateReportsSecQuery($module, $secmodule, $queryPlanner, $type = '', $where_condition = '') {\n\t\tglobal $adb;\n\t\t$secondary = CRMEntity::getInstance($secmodule);\n\n\t\t$tablename = $secondary->table_name;\n\t\t$tableindex = $secondary->table_index;\n\t\t$modulecftable = $secondary->customFieldTable[0];\n\t\t$modulecfindex = $secondary->customFieldTable[1];\n\n\t\tif (isset($modulecftable) && $queryPlanner->requireTable($modulecftable)) {\n\t\t\t$cfquery = \"left join $modulecftable as $modulecftable on $modulecftable.$modulecfindex=$tablename.$tableindex\";\n\t\t} else {\n\t\t\t$cfquery = '';\n\t\t}\n\n\t\t$relquery = '';\n\t\t$matrix = $queryPlanner->newDependencyMatrix();\n\n\t\t$fields_query = $adb->pquery(\n\t\t\t'SELECT vtiger_field.columnname,vtiger_field.tablename,vtiger_field.fieldid\n\t\t\t\tFROM vtiger_field\n\t\t\t\tINNER JOIN vtiger_tab on vtiger_tab.name=?\n\t\t\t\tWHERE vtiger_tab.tabid=vtiger_field.tabid AND vtiger_field.uitype=10 and vtiger_field.presence in (0,2)',\n\t\t\tarray($secmodule)\n\t\t);\n\n\t\tif ($adb->num_rows($fields_query) > 0) {\n\t\t\tfor ($i = 0; $i < $adb->num_rows($fields_query); $i++) {\n\t\t\t\t$col_name = $adb->query_result($fields_query, $i, 'columnname');\n\t\t\t\t$field_id = $adb->query_result($fields_query, $i, 'fieldid');\n\t\t\t\t$tab_name = $adb->query_result($fields_query, $i, 'tablename');\n\t\t\t\t$ui10_modules_query = $adb->pquery('SELECT relmodule FROM vtiger_fieldmodulerel WHERE fieldid=?', array($field_id));\n\n\t\t\t\tif ($adb->num_rows($ui10_modules_query) > 0) {\n\t\t\t\t\t// Capture the forward table dependencies due to dynamic related-field\n\t\t\t\t\t$crmentityRelSecModuleTable = \"vtiger_crmentityRel$secmodule$i\";\n\n\t\t\t\t\t$crmentityRelSecModuleTableDeps = array();\n\t\t\t\t\tfor ($j = 0; $j < $adb->num_rows($ui10_modules_query); $j++) {\n\t\t\t\t\t\t$rel_mod = $adb->query_result($ui10_modules_query, $j, 'relmodule');\n\t\t\t\t\t\t$rel_obj = CRMEntity::getInstance($rel_mod);\n\t\t\t\t\t\t$rel_tab_name = $rel_obj->table_name;\n\t\t\t\t\t\t$crmentityRelSecModuleTableDeps[] = $rel_tab_name . \"Rel$secmodule\" . $field_id;\n\t\t\t\t\t}\n\t\t\t\t\t$matrix->setDependency($crmentityRelSecModuleTable, $crmentityRelSecModuleTableDeps);\n\t\t\t\t\t$matrix->addDependency($tab_name, $crmentityRelSecModuleTable);\n\n\t\t\t\t\tif ($queryPlanner->requireTable($crmentityRelSecModuleTable, $matrix)) {\n\t\t\t\t\t\t$relquery .= ' left join '.$this->crmentityTable.\" as $crmentityRelSecModuleTable on \".\n\t\t\t\t\t\t\t\"$crmentityRelSecModuleTable.crmid = $tab_name.$col_name and $crmentityRelSecModuleTable.deleted=0\";\n\t\t\t\t\t}\n\t\t\t\t\tfor ($j = 0; $j < $adb->num_rows($ui10_modules_query); $j++) {\n\t\t\t\t\t\t$rel_mod = $adb->query_result($ui10_modules_query, $j, 'relmodule');\n\t\t\t\t\t\t$rel_obj = CRMEntity::getInstance($rel_mod);\n\t\t\t\t\t\t$rel_tab_name = $rel_obj->table_name;\n\t\t\t\t\t\t$rel_tab_index = $rel_obj->table_index;\n\t\t\t\t\t\t$rel_tab_name_rel_secmodule_table_alias = $rel_tab_name . \"Rel$secmodule\" . $field_id;\n\t\t\t\t\t\tif ($queryPlanner->requireTable($rel_tab_name_rel_secmodule_table_alias)) {\n\t\t\t\t\t\t\t$relquery .= \" left join $rel_tab_name as $rel_tab_name_rel_secmodule_table_alias on \".\n\t\t\t\t\t\t\t\t\"$rel_tab_name_rel_secmodule_table_alias.$rel_tab_index = $crmentityRelSecModuleTable.crmid\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update forward table dependencies\n\t\t$matrix->setDependency(\"vtiger_crmentity$secmodule\", array(\"vtiger_groups$secmodule\", \"vtiger_users$secmodule\", \"vtiger_lastModifiedBy$secmodule\"));\n\t\t$matrix->addDependency($tablename, \"vtiger_crmentity$secmodule\");\n\n\t\tif (!$queryPlanner->requireTable($tablename, $matrix) && !$queryPlanner->requireTable($modulecftable)) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$query = $this->getRelationQuery($module, $secmodule, \"$tablename\", \"$tableindex\", $queryPlanner);\n\n\t\tif ($queryPlanner->requireTable(\"vtiger_crmentity$secmodule\", $matrix)) {\n\t\t\t$query .= ' left join '.$this->crmentityTable.\" as vtiger_crmentity$secmodule on \".\n\t\t\t\t\"vtiger_crmentity$secmodule.crmid = $tablename.$tableindex AND vtiger_crmentity$secmodule.deleted=0\";\n\t\t}\n\n\t\t// Add the pre-joined custom table query\n\t\t$query .= ' '.$cfquery;\n\n\t\tif ($queryPlanner->requireTable(\"vtiger_groups$secmodule\")) {\n\t\t\t$query .= ' left join vtiger_groups as vtiger_groups' . $secmodule . ' on vtiger_groups' . $secmodule . \".groupid = vtiger_crmentity$secmodule.smownerid\";\n\t\t}\n\t\tif ($queryPlanner->requireTable(\"vtiger_users$secmodule\")) {\n\t\t\t$query .= ' left join vtiger_users as vtiger_users' . $secmodule . ' on vtiger_users' . $secmodule . \".id = vtiger_crmentity$secmodule.smownerid\";\n\t\t}\n\t\tif ($queryPlanner->requireTable(\"vtiger_currency_info$secmodule\")) {\n\t\t\t$query .=' left join vtiger_currency_info as vtiger_currency_info' . $secmodule . ' on vtiger_currency_info' . $secmodule . \".id = $tablename.currency_id\";\n\t\t}\n\t\tif ($queryPlanner->requireTable(\"vtiger_lastModifiedBy$secmodule\")) {\n\t\t\t$query .= ' left join vtiger_users as vtiger_lastModifiedBy' . $secmodule . ' on '.\n\t\t\t\t'vtiger_lastModifiedBy' . $secmodule . '.id = vtiger_crmentity' . $secmodule . '.modifiedby';\n\t\t}\n\t\tif ($queryPlanner->requireTable('vtiger_CreatedBy'.$secmodule)) {\n\t\t\t$query .= \" LEFT JOIN vtiger_users AS vtiger_CreatedBy$secmodule ON vtiger_CreatedBy$secmodule.id=\".$this->crmentityTable.\".smcreatorid\";\n\t\t}\n\t\t// Add the pre-joined relation table query\n\t\t$query .= ' ' . $relquery;\n\n\t\treturn $query;\n\t}\n\n\t/**\n\t * Function to get the security query part of a report\n\t * @param string primary module name\n\t * @return string query string formed on fetching the related data for report for security of the module\n\t */\n\tpublic function getListViewSecurityParameter($module) {\n\t\tglobal $current_user;\n\t\tif ($current_user) {\n\t\t\t$userprivs = $current_user->getPrivileges();\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t\t$sec_query = '';\n\t\t$tabid = getTabid($module);\n\t\tif (!$userprivs->hasGlobalReadPermission() && !$userprivs->hasModuleReadSharing($tabid)) {\n\t\t\t$sec_query .= ' and ('.$this->crmentityTable.\".smownerid=$current_user->id or \"\n\t\t\t\t.$this->crmentityTable.\".smownerid in (select vtiger_user2role.userid\n\t\t\t\t\tfrom vtiger_user2role\n\t\t\t\t\tinner join vtiger_role on vtiger_role.roleid=vtiger_user2role.roleid\n\t\t\t\t\twhere vtiger_role.parentrole like '\" . $userprivs->getParentRoleSequence() . \"::%') or \"\n\t\t\t\t.$this->crmentityTable.\".smownerid in (select shareduserid\n\t\t\t\t\tfrom vtiger_tmp_read_user_sharing_per where userid=\" . $current_user->id . ' and tabid=' . $tabid . ') or (';\n\t\t\tif ($userprivs->hasGroups()) {\n\t\t\t\t$sec_query .= ' vtiger_groups.groupid in (' . implode(',', $userprivs->getGroups()) . ') or ';\n\t\t\t}\n\t\t\t$sec_query .= ' vtiger_groups.groupid in (select vtiger_tmp_read_group_sharing_per.sharedgroupid\n\t\t\t\tfrom vtiger_tmp_read_group_sharing_per\n\t\t\t\twhere userid=' . $current_user->id . ' and tabid=' . $tabid . ')))';\n\t\t}\n\t\treturn $sec_query;\n\t}\n\n\t/**\n\t * Function to get the security query part of a report\n\t * @param string $module primary module name\n\t * @return string query formed on fetching the related data for report for security of the module\n\t * @deprecated\n\t */\n\tpublic function getSecListViewSecurityParameter($module) {\n\t\t$tabid = getTabid($module);\n\t\tglobal $current_user;\n\t\tif ($current_user) {\n\t\t\t$userprivs = $current_user->getPrivileges();\n\t\t}\n\t\t$sec_query = \" and (vtiger_crmentity$module.smownerid=$current_user->id or vtiger_crmentity$module.smownerid in \".\n\t\t\t\"(select vtiger_user2role.userid\n\t\t\t\tfrom vtiger_user2role\n\t\t\t\tinner join vtiger_role on vtiger_role.roleid=vtiger_user2role.roleid\n\t\t\t\twhere vtiger_role.parentrole like '\" . $userprivs->getParentRoleSequence() . \"::%') or vtiger_crmentity$module.smownerid in \".\n\t\t\t\t\t\"(select shareduserid from vtiger_tmp_read_user_sharing_per where userid=\" . $current_user->id . ' and tabid=' . $tabid . ') or (';\n\n\t\tif ($userprivs->hasGroups()) {\n\t\t\t$sec_query .= \" vtiger_groups$module.groupid in (\" . implode(',', $userprivs->getGroups()) . ') or ';\n\t\t}\n\t\t$sec_query .= \" vtiger_groups$module.groupid in \".\n\t\t\t'(select vtiger_tmp_read_group_sharing_per.sharedgroupid\n\t\t\t\tfrom vtiger_tmp_read_group_sharing_per\n\t\t\t\twhere userid=' . $current_user->id . ' and tabid=' . $tabid . '))) ';\n\t\treturn $sec_query;\n\t}\n\n\t/**\n\t * Function to get the relation query part of a report\n\t * @param string primary module name\n\t * @param string secondary module name\n\t * @return string query string formed on relating the primary module and secondary module\n\t */\n\tpublic function getRelationQuery($module, $secmodule, $table_name, $column_name, $queryPlanner) {\n\t\tglobal $adb;\n\t\t$tab = getRelationTables($module, $secmodule);\n\n\t\tforeach ($tab as $key => $value) {\n\t\t\t$tables[] = $key;\n\t\t\t$fields[] = $value;\n\t\t}\n\t\t$pritablename = $tables[0];\n\t\t$sectablename = isset($tables[1])?$tables[1]:'';\n\t\t$prifieldname = $fields[0][0];\n\t\t$secfieldname = $fields[0][1];\n\t\t$tmpname = $pritablename . 'tmp' . $secmodule;\n\t\t$condition = '';\n\t\tif (!empty($tables[1]) && !empty($fields[1])) {\n\t\t\t$condvalue = $tables[1] . '.' . $fields[1];\n\t\t\t$condtable = $table_name;\n\t\t\t$condition = \"$condtable.$prifieldname=$condvalue\";\n\t\t} else {\n\t\t\t$condvalue = $table_name . '.' . $column_name;\n\t\t\t$condtable = $pritablename;\n\t\t\t$cntbl = $adb->getColumnNames($condtable);\n\t\t\tif (!in_array($secfieldname, $cntbl)) {\n\t\t\t\t$condtable = $table_name;\n\t\t\t}\n\t\t\t$condition = \"$condtable.$secfieldname=$condvalue\";\n\t\t}\n\t\t$queryPlanner->addTable($condtable);\n\t\t$selectColumns = \"$table_name.*\";\n\n\t\t// Look forward for temporary table usage as defined by the QueryPlanner\n\t\t$secQueryFrom = \" FROM $table_name \";\n\t\t$secQueryFrom .= 'INNER JOIN '.$this->crmentityTableAlias.\" ON vtiger_crmentity.crmid=$table_name.$column_name AND \".$this->crmentityTable.\".deleted=0 \";\n\n\t\t//The relation field exists in custom field . relation field added from layout editor\n\t\tif ($pritablename != $table_name && $secmodule != 'Emails') {\n\t\t\t$modulecftable = $this->customFieldTable[0];\n\t\t\t$modulecfindex = $this->customFieldTable[1];\n\n\t\t\tif (isset($modulecftable)) {\n\t\t\t\t$columns = $adb->getColumnNames($modulecftable);\n\t\t\t\t//remove the primary key since it will conflict with base table column name or else creating temporary table will fail for duplicate columns\n\t\t\t\t//eg : vtiger_potential has potentialid and vtiger_potentialscf has same potentialid\n\t\t\t\tunset($columns[array_search($modulecfindex, $columns)]);\n\t\t\t\tif (!empty($columns)) {\n\t\t\t\t\t$cfSelectString = implode(',', $columns);\n\t\t\t\t\t$selectColumns .= ','.$cfSelectString;\n\t\t\t\t}\n\t\t\t\t$cfquery = \"LEFT JOIN $modulecftable ON $modulecftable.$modulecfindex=$table_name.$column_name\";\n\t\t\t\t$secQueryFrom .= $cfquery;\n\t\t\t}\n\t\t}\n\n\t\t$secQuery = 'SELECT '.$selectColumns.' '.$secQueryFrom;\n\t\t$secQueryTempTableQuery = $queryPlanner->registerTempTable($secQuery, array($column_name, $secfieldname, $prifieldname), $secmodule);\n\n\t\t$query = '';\n\t\tif ($pritablename == 'vtiger_crmentityrel') {\n\t\t\t$condition = \"$table_name.$column_name={$tmpname}.{$prifieldname}\";\n\t\t\t$query = \" left join vtiger_crmentityreldenorm as $tmpname ON $condvalue={$tmpname}.{$secfieldname} \";\n\t\t} elseif (strripos($pritablename, 'rel') === (strlen($pritablename) - 3)) {\n\t\t\t$instance = self::getInstance($module);\n\t\t\t$sectableindex = $instance->tab_name_index[$sectablename];\n\t\t\t$condition = \"$table_name.$column_name=$tmpname.$secfieldname\";\n\t\t\tif ($pritablename === 'vtiger_senotesrel') {\n\t\t\t\t$query = \" left join $pritablename as $tmpname ON ($sectablename.$sectableindex=$tmpname.$prifieldname\n\t\t\t\t\tAND $tmpname.notesid IN (SELECT crmid FROM vtiger_crmobject WHERE setype='Documents' AND deleted = 0))\";\n\t\t\t} else {\n\t\t\t\t$query = \" left join $pritablename as $tmpname ON ($sectablename.$sectableindex=$tmpname.$prifieldname)\";\n\t\t\t}\n\t\t\tif ($secmodule == 'Leads') {\n\t\t\t\t$val_conv = ((isset($_COOKIE['LeadConv']) && $_COOKIE['LeadConv'] == 'true') ? 1 : 0);\n\t\t\t\t$condition .= \" AND $table_name.converted = $val_conv\";\n\t\t\t}\n\t\t}\n\n\t\t$query .= \" left join $secQueryTempTableQuery as $table_name on {$condition}\";\n\t\treturn $query;\n\t}\n\n\t/**\n\t * To keep track of action of field filtering and avoiding doing more than once.\n\t *\n\t * @var boolean\n\t */\n\tpublic $__inactive_fields_filtered = false;\n\n\t/**\n\t * Filter in-active fields based on type\n\t *\n\t * @param string $module\n\t */\n\tpublic function filterInactiveFields($module) {\n\t\tif ($this->__inactive_fields_filtered) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Look for fields that has presence value NOT IN (0,2)\n\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module, array('1'));\n\t\tif ($cachedModuleFields === false) {\n\t\t\t// Initialize the fields calling suitable API\n\t\t\tgetColumnFields($module);\n\t\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module, array('1'));\n\t\t}\n\n\t\t$hiddenFields = array();\n\n\t\tif ($cachedModuleFields) {\n\t\t\tforeach ($cachedModuleFields as $fieldinfo) {\n\t\t\t\t$fieldLabel = $fieldinfo['fieldlabel'];\n\t\t\t\t// NOTE: We should not translate the label to enable field diff based on it down\n\t\t\t\t$fieldName = $fieldinfo['fieldname'];\n\t\t\t\t$tableName = str_replace('vtiger_', '', $fieldinfo['tablename']);\n\t\t\t\t$hiddenFields[$fieldLabel] = array($tableName => $fieldName);\n\t\t\t}\n\t\t}\n\n\t\tif (isset($this->list_fields)) {\n\t\t\t$this->list_fields = array_diff_key($this->list_fields, $hiddenFields);\n\t\t}\n\n\t\tif (isset($this->search_fields)) {\n\t\t\t$this->search_fields = array_diff_key($this->search_fields, $hiddenFields);\n\t\t}\n\n\t\t// To avoid re-initializing everytime.\n\t\t$this->__inactive_fields_filtered = true;\n\t}\n\n\tpublic function buildSearchQueryForFieldTypes($uitypes, $value = false) {\n\t\t$uitypes = (array)$uitypes;\n\t\t$module = get_class($this);\n\n\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module);\n\t\tif ($cachedModuleFields === false) {\n\t\t\tgetColumnFields($module); // This API will initialize the cache as well\n\t\t\t// We will succeed now due to above function call\n\t\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module);\n\t\t}\n\n\t\t$lookuptables = array();\n\t\t$lookupcolumns = array();\n\t\tforeach ($cachedModuleFields as $fieldinfo) {\n\t\t\tif (in_array($fieldinfo['uitype'], $uitypes)) {\n\t\t\t\t$lookuptables[] = $fieldinfo['tablename'];\n\t\t\t\t$lookupcolumns[] = $fieldinfo['columnname'];\n\t\t\t}\n\t\t}\n\n\t\t$entityfields = getEntityField($module);\n\t\t$querycolumnnames = implode(',', $lookupcolumns);\n\t\t$entitycolumnnames = $entityfields['fieldname'];\n\t\t$query = \"select crmid as id, $querycolumnnames, $entitycolumnnames as name \";\n\t\t$query .= \" FROM $this->table_name \";\n\t\t$query .=' INNER JOIN '.$this->crmentityTableAlias.\" ON $this->table_name.$this->table_index = vtiger_crmentity.crmid AND vtiger_crmentity.deleted = 0 \";\n\n\t\t//remove the base table\n\t\t$LookupTable = array_unique($lookuptables);\n\t\t$indexes = array_keys($LookupTable, $this->table_name);\n\t\tif (!empty($indexes)) {\n\t\t\tforeach ($indexes as $index) {\n\t\t\t\tunset($LookupTable[$index]);\n\t\t\t}\n\t\t}\n\t\tforeach ($LookupTable as $tablename) {\n\t\t\t$query .= \" INNER JOIN $tablename on $this->table_name.$this->table_index = $tablename.\" . $this->tab_name_index[$tablename];\n\t\t}\n\t\tif (!empty($lookupcolumns) && $value !== false) {\n\t\t\t$query .=' WHERE ';\n\t\t\t$i = 0;\n\t\t\t$columnCount = count($lookupcolumns);\n\t\t\tforeach ($lookupcolumns as $columnname) {\n\t\t\t\tif (!empty($columnname)) {\n\t\t\t\t\tif ($i == 0 || $i == ($columnCount)) {\n\t\t\t\t\t\t$query .= sprintf(\"%s = '%s'\", $columnname, $value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$query .= sprintf(\" OR %s = '%s'\", $columnname, $value);\n\t\t\t\t\t}\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $query;\n\t}\n\n\t/**\n\t *\n\t * @param string $tableName\n\t * @return string\n\t */\n\tpublic function getJoinClause($tableName) {\n\t\tif (strripos($tableName, 'rel') === (strlen($tableName) - 3)) {\n\t\t\treturn 'LEFT JOIN';\n\t\t} else {\n\t\t\treturn 'INNER JOIN';\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param string module\n\t * @param object Users\n\t * @param string parentRole\n\t * @param string userGroups comma-separated list\n\t */\n\tpublic function getNonAdminAccessQuery($module, $user, $parentRole, $userGroups) {\n\t\t$query = $this->getNonAdminUserAccessQuery($user, $parentRole, $userGroups);\n\t\tif (!empty($module)) {\n\t\t\t$moduleAccessQuery = $this->getNonAdminModuleAccessQuery($module, $user);\n\t\t\tif (!empty($moduleAccessQuery)) {\n\t\t\t\t$query .= \" UNION $moduleAccessQuery\";\n\t\t\t}\n\t\t}\n\t\treturn $query;\n\t}\n\n\t/**\n\t *\n\t * @param object Users\n\t * @param string parentRole\n\t * @param string userGroups comma-separated list\n\t */\n\tpublic function getNonAdminUserAccessQuery($user, $parentRole, $userGroups) {\n\t\t$query = \"(SELECT $user->id as id) UNION (SELECT vtiger_user2role.userid AS userid FROM vtiger_user2role\"\n\t\t\t.\" INNER JOIN vtiger_role ON vtiger_role.roleid=vtiger_user2role.roleid WHERE vtiger_role.parentrole like '$parentRole::%')\";\n\t\tif (count($userGroups) > 0) {\n\t\t\t$query .= ' UNION (SELECT groupid FROM vtiger_groups where groupid in (' . implode(',', $userGroups) . '))';\n\t\t}\n\t\treturn $query;\n\t}\n\n\t/**\n\t *\n\t * @param string module\n\t * @param object Users\n\t */\n\tpublic function getNonAdminModuleAccessQuery($module, $user) {\n\t\t$userprivs = $user->getPrivileges();\n\t\t$tabId = getTabid($module);\n\t\t$sharingRuleInfo = $userprivs->getModuleSharingRules($module, 'read');\n\t\t$query = '';\n\t\tif (!empty($sharingRuleInfo) && (count($sharingRuleInfo['ROLE']) > 0 || count($sharingRuleInfo['GROUP']) > 0)) {\n\t\t\t$query = ' (SELECT shareduserid FROM vtiger_tmp_read_user_sharing_per ' .\n\t\t\t\t\t\"WHERE userid=$user->id AND tabid=$tabId) UNION (SELECT \" .\n\t\t\t\t\t'vtiger_tmp_read_group_sharing_per.sharedgroupid FROM ' .\n\t\t\t\t\t\"vtiger_tmp_read_group_sharing_per WHERE userid=$user->id AND tabid=$tabId)\";\n\t\t}\n\t\treturn $query;\n\t}\n\n\t/** Creates a temporary table with permission IDs\n\t * @param string temporary table name to create\n\t * @param string module name for the permissions\n\t * @param object Users to calculate the permissions for\n\t * @param string parent Role of the user\n\t * @param string user Groups comma-separated list of groups the user belongs to\n\t * @return boolean if temporary table has been created or not\n\t */\n\tprotected function setupTemporaryTable($tableName, $sharedmodule, $user, $parentRole, $userGroups) {\n\t\t$module = null;\n\t\tif (!empty($sharedmodule)) {\n\t\t\t$module = $sharedmodule;\n\t\t}\n\t\t$query = $this->getNonAdminAccessQuery($module, $user, $parentRole, $userGroups);\n\t\t$query = \"create temporary table IF NOT EXISTS $tableName(id int(11) primary key) ignore \" . $query;\n\t\t$db = PearDatabase::getInstance();\n\t\t$result = $db->pquery($query, array());\n\t\treturn is_object($result);\n\t}\n\n\t/**\n\t *\n\t * @param string module name for which query needs to be generated\n\t * @param Users user for which query needs to be generated\n\t * @return string Access control Query for the user\n\t */\n\tpublic function getNonAdminAccessControlQuery($module, $user, $scope = '') {\n\t\tglobal $currentModule;\n\t\t$userprivs = $user->getPrivileges();\n\t\t$query = ' ';\n\t\t$tabId = getTabid($module);\n\t\tif (!$userprivs->hasGlobalReadPermission() && !$userprivs->hasModuleReadSharing($tabId)) {\n\t\t\t$tableName = 'vt_tmp_u' . $user->id;\n\t\t\t$sharingRuleInfo = $userprivs->getModuleSharingRules($module, 'read');\n\t\t\t$sharedModule = null;\n\t\t\tif (!empty($sharingRuleInfo) && (count($sharingRuleInfo['ROLE']) > 0 || count($sharingRuleInfo['GROUP']) > 0)) {\n\t\t\t\t$tableName = $tableName . '_t' . $tabId;\n\t\t\t\t$sharedModule = $module;\n\t\t\t} elseif (!empty($scope)) {\n\t\t\t\t$tableName .= '_t' . $tabId;\n\t\t\t}\n\t\t\tlist($tsSpecialAccessQuery, $typeOfPermissionOverride, $unused1, $unused2, $SpecialPermissionMayHaveDuplicateRows) = cbEventHandler::do_filter(\n\t\t\t\t'corebos.permissions.accessquery',\n\t\t\t\tarray(' ', 'none', $module, $user, true)\n\t\t\t);\n\t\t\tif ($typeOfPermissionOverride=='fullOverride') {\n\t\t\t\t// create the default temporary table in case it is needed\n\t\t\t\t$this->setupTemporaryTable($tableName, $sharedModule, $user, $userprivs->getParentRoleSequence(), $userprivs->getGroups());\n\t\t\t\tVTCacheUtils::updateCachedInformation('SpecialPermissionWithDuplicateRows', $SpecialPermissionMayHaveDuplicateRows);\n\t\t\t\treturn $tsSpecialAccessQuery;\n\t\t\t}\n\t\t\tif ($typeOfPermissionOverride=='none' || trim($tsSpecialAccessQuery)=='') {\n\t\t\t\t$this->setupTemporaryTable($tableName, $sharedModule, $user, $userprivs->getParentRoleSequence(), $userprivs->getGroups());\n\t\t\t\t$query = \" INNER JOIN $tableName $tableName$scope ON $tableName$scope.id = \".$this->crmentityTable.\"$scope.smownerid \";\n\t\t\t} else {\n\t\t\t\tglobal $adb;\n\t\t\t\tVTCacheUtils::updateCachedInformation('SpecialPermissionWithDuplicateRows', $SpecialPermissionMayHaveDuplicateRows);\n\t\t\t\t$tsTableName = \"tsolucio_tmp_u{$user->id}\";\n\t\t\t\tif ($currentModule == 'Reports') {\n\t\t\t\t\t$tsTableName = \"tsolucio_tmp_u{$user->id}\".str_replace('.', '', uniqid($user->id, true));\n\t\t\t\t}\n\t\t\t\t$adb->query(\"drop table if exists {$tsTableName}\");\n\t\t\t\tif ($typeOfPermissionOverride=='addToUserPermission') {\n\t\t\t\t\t$query = $this->getNonAdminAccessQuery($module, $user, $userprivs->getParentRoleSequence(), $userprivs->getGroups());\n\t\t\t\t\t$tsSpecialAccessQuery = \"$query UNION ($tsSpecialAccessQuery) \";\n\t\t\t\t}\n\t\t\t\t$adb->query(\"create temporary table {$tsTableName} (id int primary key) as {$tsSpecialAccessQuery}\");\n\t\t\t\tif ($typeOfPermissionOverride=='addToUserPermission') {\n\t\t\t\t\t$query = \" INNER JOIN {$tsTableName} on ({$tsTableName}.id=vtiger_crmentity$scope.crmid or {$tsTableName}.id = vtiger_crmentity$scope.smownerid) \";\n\t\t\t\t} elseif ($typeOfPermissionOverride=='showTheseRecords') {\n\t\t\t\t\t$query = \" INNER JOIN {$tsTableName} on {$tsTableName}.id=vtiger_crmentity.crmid \";\n\t\t\t\t} elseif ($typeOfPermissionOverride=='SubstractFromUserPermission') {\n\t\t\t\t\t$this->setupTemporaryTable($tableName, $sharedModule, $user, $userprivs->getParentRoleSequence(), $userprivs->getGroups());\n\t\t\t\t\t$query = \" INNER JOIN $tableName $tableName$scope ON $tableName$scope.id = vtiger_crmentity$scope.smownerid \";\n\t\t\t\t\t$query .= \" INNER JOIN {$tsTableName} on {$tsTableName}.id=vtiger_crmentity.crmid \";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $query;\n\t}\n\n\tpublic function listQueryNonAdminChange($query, $scope = '') {\n\t\t//make the module base table as left hand side table for the joins,\n\t\t//as mysql query optimizer puts crmentity on the left side and considerably slow down\n\t\t$query = preg_replace('/\\s+/', ' ', $query);\n\t\tif (strripos($query, ' WHERE ') !== false) {\n\t\t\t$query = str_ireplace(' where ', \" WHERE $this->table_name.$this->table_index>0 AND \", $query);\n\t\t}\n\t\treturn $query;\n\t}\n\n\t/**\n\t * Function to get the relation tables for related modules between module and this module\n\t * @param string secondary module name\n\t * @return array table names and fieldnames storing relations\n\t */\n\tpublic function setRelationTables($secmodule) {\n\t\t$rel_tables = array(\n\t\t\t'Documents' => array('vtiger_senotesrel' => array('crmid', 'notesid'), $this->table_name => $this->table_index),\n\t\t);\n\t\treturn isset($rel_tables[$secmodule]) ? $rel_tables[$secmodule] : '';\n\t}\n\n\t/**\n\t * Function to clear the fields which needs to be saved only once during the Save of the record\n\t * For eg: Comments of HelpDesk should be saved only once during one save of a Trouble Ticket\n\t */\n\tpublic function clearSingletonSaveFields() {\n\t\t// just return here\n\t}\n\n\t/**\n\t * Function to track when a new record is linked to a given record\n\t */\n\tpublic function trackLinkedInfo($module, $crmid, $with_module, $with_crmid) {\n\t\tglobal $current_user;\n\t\t$adb = PearDatabase::getInstance();\n\t\t$currentTime = date('Y-m-d H:i:s');\n\t\t$adb->pquery('UPDATE '.$this->crmentityTable.' SET modifiedtime=?, modifiedby=? WHERE crmid=?', array($currentTime, $current_user->id, $crmid));\n\t}\n\n\t/**\n\t * Function to get sort order\n\t * @return string sortorder string either 'ASC' or 'DESC'\n\t */\n\tpublic function getSortOrder() {\n\t\tglobal $log, $adb;\n\t\t$cmodule = get_class($this);\n\t\t$log->debug('> getSortOrder');\n\t\t$sorder = strtoupper(GlobalVariable::getVariable('Application_ListView_Default_OrderDirection', $this->default_sort_order, $cmodule));\n\t\tif (isset($_REQUEST['sorder'])) {\n\t\t\t$sorder = $adb->sql_escape_string($_REQUEST['sorder']);\n\t\t} elseif (!empty($_SESSION[$cmodule.'_Sort_Order'])) {\n\t\t\t$sorder = $adb->sql_escape_string($_SESSION[$cmodule.'_Sort_Order']);\n\t\t}\n\t\t$log->debug('< getSortOrder');\n\t\treturn $sorder;\n\t}\n\n\t/**\n\t * Function to get order by\n\t * @return string fieldname(eg: 'accountname')\n\t */\n\tpublic function getOrderBy() {\n\t\tglobal $log, $adb;\n\t\t$log->debug('> getOrderBy');\n\t\t$cmodule = get_class($this);\n\t\t$order_by = '';\n\t\t$customView = new CustomView($cmodule);\n\t\t$viewid = $customView->getViewId($cmodule);\n\t\t$cvFields = cbCVManagement::getFieldValuesByCvId($viewid);\n\t\t$sortfieldbyfirst = (empty($cvFields) || empty($cvFields['sortfieldbyfirst']) ? '' : $cvFields['sortfieldbyfirst']);\n\t\tif (GlobalVariable::getVariable('Application_ListView_Default_Sorting', 0, $cmodule)) {\n\t\t\t$order_by = GlobalVariable::getVariable('Application_ListView_Default_OrderField', $this->default_order_by, $cmodule);\n\t\t} elseif (!GlobalVariable::getVariable('Application_ListView_Default_Sorting', 0, $cmodule) && !empty($sortfieldbyfirst)) {\n\t\t\t$order_by = $sortfieldbyfirst;\n\t\t} elseif (!empty($_SESSION[$cmodule.'_Order_By'])) {\n\t\t\t$order_by = $adb->sql_escape_string($_SESSION[$cmodule.'_Order_By']);\n\t\t}\n\n\t\tif (isset($_REQUEST['order_by'])) {\n\t\t\t$order_by = $adb->sql_escape_string($_REQUEST['order_by']);\n\t\t}\n\t\t$log->debug('< getOrderBy');\n\t\treturn $order_by;\n\t}\n\n\t/**\n\t * Function to get all orderbys and sortOrders\n\t * @return array sortArrayList(eg: [{\"orderBy\": \"lastname\", \"sortOrder\": \"ASC\"}, {\"orderBy\": \"firstname\", \"sortOrder\": \"ASC\"}])\n\t */\n\tpublic function getOrderByAndSortOrderList() {\n\t\t$sortArrayList = array();\n\t\t$currentModule = get_class($this);\n\t\t$customView = new CustomView($currentModule);\n\t\t$viewid = $customView->getViewId($currentModule);\n\t\t$order_by = $this->getOrderBy();\n\t\t$sort_order = $this->getSortOrder();\n\t\t$fieldValues = cbCVManagement::getFieldValuesByCvId($viewid);\n\t\t$sortfieldbyfirst = $fieldValues['sortfieldbyfirst'];\n\t\t$sortfieldbysecond = $fieldValues['sortfieldbysecond'];\n\t\tif (!empty($order_by)) {\n\t\t\t$sortArrayList[] = array('orderBy' => $order_by, 'sortOrder' => $sort_order);\n\t\t}\n\t\tif (!empty($sortfieldbysecond) && $order_by == $sortfieldbyfirst) {\n\t\t\t$sortArrayList[] = array('orderBy' => $sortfieldbysecond, 'sortOrder' => $sort_order);\n\t\t}\n\t\treturn $sortArrayList;\n\t}\n\n\t/**\n\t * Function to Listview buttons\n\t * @return array $list_buttons - for module\n\t */\n\tpublic function getListButtons($app_strings) {\n\t\tglobal $currentModule;\n\t\t$list_buttons = array();\n\n\t\tif (isPermitted($currentModule, 'Delete', '') == 'yes') {\n\t\t\t$list_buttons['del'] = $app_strings['LBL_MASS_DELETE'];\n\t\t}\n\t\tif (isPermitted($currentModule, 'EditView', '') == 'yes') {\n\t\t\t$list_buttons['mass_edit'] = $app_strings['LBL_MASS_EDIT'];\n\t\t}\n\t\treturn $list_buttons;\n\t}\n\n\t/**\n\t * Function to track when a record is unlinked to a given record\n\t */\n\tpublic function trackUnLinkedInfo($module, $crmid, $with_module, $with_crmid) {\n\t\tglobal $current_user;\n\t\t$adb = PearDatabase::getInstance();\n\t\t$currentTime = date('Y-m-d H:i:s');\n\t\t$data = array();\n\t\t$data['sourceModule'] = $module;\n\t\t$data['sourceRecordId'] = $crmid;\n\t\t$data['destinationModule'] = $with_module;\n\t\t$data['destinationRecordId'] = $with_crmid;\n\t\tcbEventHandler::do_action('corebos.entity.link.delete.final', $data);\n\t\t$adb->pquery('UPDATE '.$this->crmentityTable.' SET modifiedtime=?, modifiedby=? WHERE crmid=?', array($currentTime, $current_user->id, $crmid));\n\t}\n\n\tpublic function getParentRecords($id, &$parent_records, &$encountered_records, $refField, $currentModule, $tree = false) {\n\t\tglobal $log, $adb, $current_user;\n\t\t$qg = new QueryGenerator($currentModule, $current_user);\n\t\t$qg->setFields(array('*'));\n\t\t$qg->addCondition('id', $id, 'e');\n\t\t$params = array($id);\n\t\t$query = $qg->getQuery();\n\t\t$res = $adb->query($query);\n\t\tif ($adb->num_rows($res) > 0 &&\n\t\t\t$adb->query_result($res, 0, $refField) != '' && $adb->query_result($res, 0, $refField) != 0 &&\n\t\t\t!in_array($adb->query_result($res, 0, $refField), $encountered_records)) {\n\t\t\t$recid = $adb->query_result($res, 0, $refField);\n\t\t\t$encountered_records[] = $recid;\n\t\t\t$this->getParentRecords($recid, $parent_records, $encountered_records, $refField, $currentModule);\n\t\t}\n\t\t$depth = 0;\n\t\t$parent_record_info = array();\n\t\t$immediate_recordid = $adb->query_result($res, 0, $refField);\n\t\tif (isset($parent_records[$immediate_recordid])) {\n\t\t\t$depth = $parent_records[$immediate_recordid]['depth'] + 1;\n\t\t}\n\t\tif (is_array($tree)) {\n\t\t\t$cvtreecolumn = getEntityName($tree[0], $id);\n\t\t\t$parent_record_info[$tree[1]] = $cvtreecolumn[$id];\n\t\t\t$parent_record_info['id'] = $id;\n\t\t\t$parent_record_info['parent'] = $id;\n\t\t\t$parent_record_info['recordid'] = 'parent_'.$id;\n\t\t\t$parent_records[] = $parent_record_info;\n\t\t} else {\n\t\t\t$parent_record_info['depth'] = $depth;\n\t\t\t$parent_records[$id] = $parent_record_info;\n\t\t}\n\t\treturn $parent_records;\n\t}\n\n\tpublic function getChildRecords($id, &$child_records, $depth, $referenceField, $currentModule, $tree = false) {\n\t\tglobal $log, $adb, $current_user;\n\t\t$log->debug('> getChildRecords '.$id);\n\t\t$entity = getEntityField($currentModule);\n\t\t$entityid = $entity['entityid'];\n\t\t$tablename = $entity['tablename'];\n\t\t$crmentityTable = $this->getcrmEntityTableAlias($currentModule);\n\t\t$query = $adb->convert2Sql(\"select {$tablename}.{$entityid} from {$tablename} inner join {$crmentityTable} on {$tablename}.{$entityid} = vtiger_crmentity.crmid where vtiger_crmentity.deleted=0 and {$tablename}.{$referenceField}=? and {$tablename}.{$entityid} > 0\", array($id));\n\t\t$rs = $adb->query($query);\n\t\t$num_rows = $adb->num_rows($rs);\n\t\tif ($num_rows > 0) {\n\t\t\t$depth = $depth + 1;\n\t\t\tfor ($i=0; $i < $adb->num_rows($rs); $i++) {\n\t\t\t\t$recordid = $adb->query_result($rs, $i, 0);\n\t\t\t\tif (array_key_exists($recordid, $child_records)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$child_record_info = array();\n\t\t\t\tif (is_array($tree)) {\n\t\t\t\t\t$cvtreecolumn = getEntityName($tree[0], $recordid);\n\t\t\t\t\t$child_record_info[$tree[1]] = $cvtreecolumn[$recordid];\n\t\t\t\t\t$child_record_info['id'] = $recordid;\n\t\t\t\t\t$child_record_info['parent'] = $id;\n\t\t\t\t\t$child_record_info['recordid'] = 'parent_'.$recordid;\n\t\t\t\t\t$child_records[] = $child_record_info;\n\t\t\t\t} else {\n\t\t\t\t\t$child_record_info['depth'] = $depth;\n\t\t\t\t\t$child_records[$recordid] = $child_record_info;\n\t\t\t\t}\n\t\t\t\t$this->getChildRecords($recordid, $child_records, $depth, $referenceField, $currentModule, $tree);\n\t\t\t}\n\t\t}\n\t\treturn $child_records;\n\t}\n\n\t/**\n\t* Function to get Module hierarchy of the given record\n\t* @param integer recorid\n\t* @return array Module hierarchy in array format\n\t*/\n\tpublic function getHierarchy($id, $currentModule) {\n\t\tglobal $log, $current_user;\n\t\t$log->debug('> getHierarchy '.$id);\n\t\trequire_once 'include/ListView/GridUtils.php';\n\t\t$listview_header = array();\n\t\t$listview_entries = array();\n\t\t$listview_colname = array();\n\t\t$bmapname = $currentModule.'_ListColumns';\n\t\t$cbMapid = GlobalVariable::getVariable('BusinessMapping_'.$bmapname, cbMap::getMapIdByName($bmapname));\n\t\t$linkfield = $this->list_link_field;\n\t\tif ($cbMapid) {\n\t\t\t$cbMap = cbMap::getMapByID($cbMapid);\n\t\t\t$cbMapLC = $cbMap->ListColumns()->getListFieldsFor($currentModule);\n\t\t\t$linkfield = $cbMap->ListColumns()->getListLinkFor($currentModule);\n\t\t\tif (!empty($cbMapLC)) {\n\t\t\t\tunset($this->list_fields_name);\n\t\t\t\tforeach ($cbMapLC as $label => $fields) {\n\t\t\t\t\t$tmp_field = '';\n\t\t\t\t\tforeach ($fields as $fieldname) {\n\t\t\t\t\t\t$tmp_field = $fieldname;\n\t\t\t\t\t}\n\t\t\t\t\t$this->list_fields_name[$label] = $tmp_field;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tforeach ($this->list_fields_name as $fieldname => $colname) {\n\t\t\tif (getFieldVisibilityPermission($currentModule, $current_user->id, $colname) == '0') {\n\t\t\t\t$listview_colname[] = $colname;\n\t\t\t\tif ($colname == 'assigned_user_id') {\n\t\t\t\t\t$colname = 'smownerid';\n\t\t\t\t}\n\t\t\t\t$listview_header[] = array(\n\t\t\t\t\t'name' => $colname,\n\t\t\t\t\t'header' => getTranslatedString($fieldname)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t$referenceField = $this->getSelfRelationField($currentModule);\n\t\t$records_list = array();\n\t\t$encountered_records = array($id);\n\t\tif ($referenceField) {\n\t\t\t$records_list = $this->getParentRecords($id, $records_list, $encountered_records, $referenceField, $currentModule);\n\t\t\t$records_list = $this->getChildRecords($id, $records_list, $records_list[$id]['depth'], $referenceField, $currentModule);\n\t\t}\n\t\tif (isset($records_list) && !empty($records_list)) {\n\t\t\t$entityField = getEntityField($currentModule);\n\t\t\t$entityField = $entityField['fieldname'];\n\t\t\tforeach ($records_list as $recordID => $dep) {\n\t\t\t\t$depth = $dep['depth'];\n\t\t\t\t$fieldsOf = __cb_getfieldsof(array(\n\t\t\t\t\t$recordID, $currentModule, implode(',', $listview_colname)\n\t\t\t\t));\n\t\t\t\tforeach ($fieldsOf as $field => $fieldValue) {\n\t\t\t\t\t$UIType = getUItype($currentModule, $field);\n\t\t\t\t\t$tabid = getTabid($currentModule);\n\t\t\t\t\t$fieldid = getFieldid($tabid, $field);\n\t\t\t\t\t$fieldinfo = array(\n\t\t\t\t\t\t'fieldtype' => 'corebos',\n\t\t\t\t\t\t'fieldinfo' => [\n\t\t\t\t\t\t\t'name' => $field,\n\t\t\t\t\t\t\t'uitype' => $UIType,\n\t\t\t\t\t\t],\n\t\t\t\t\t\t'name' => $field,\n\t\t\t\t\t\t'uitype' => $UIType,\n\t\t\t\t\t\t'fieldid' => $fieldid\n\t\t\t\t\t);\n\t\t\t\t\t$gridVal = getDataGridValue($currentModule, $recordID, $fieldinfo, $fieldValue);\n\t\t\t\t\t$record_depth = str_repeat(' .. ', $depth * 2);\n\t\t\t\t\tif ($entityField == $field) {\n\t\t\t\t\t\t$fieldVal = $record_depth.$gridVal[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$fieldVal = $gridVal[0];\n\t\t\t\t\t\tif ($linkfield == $field) {\n\t\t\t\t\t\t\t$fieldVal = '<a href=\"index.php?module='.$currentModule.'&action=DetailView&record='.$recordID.'\">'.$record_depth.$fieldValue.'</a>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (isset($gridVal[1]) && !empty($gridVal[1])) {\n\t\t\t\t\t\t$target = '';\n\t\t\t\t\t\tif (isset($gridVal[1][0]['mdTarget'])) {\n\t\t\t\t\t\t\t$target = $gridVal[1][0]['mdTarget'];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$fieldVal = '<a href=\"'.$gridVal[1][0]['mdLink'].'\" '.$target.'>'.$fieldVal.'</a>';\n\t\t\t\t\t}\n\t\t\t\t\tif ($field == 'assigned_user_id') {\n\t\t\t\t\t\t$field = 'smownerid';\n\t\t\t\t\t}\n\t\t\t\t\t$fieldsOf[$field] = $fieldVal;\n\t\t\t\t}\n\t\t\t\t$listview_entries[] = $fieldsOf;\n\t\t\t}\n\t\t}\n\t\t$account_hierarchy = array('header'=>$listview_header,'entries'=>$listview_entries);\n\t\t$log->debug('< getHierarchy');\n\t\treturn $account_hierarchy;\n\t}\n\n\tpublic function getSelfRelationField($module) {\n\t\tglobal $log, $adb;\n\t\t$log->debug('> getSelfRelationField');\n\t\t$rs = $adb->pquery('select columnname from vtiger_fieldmodulerel fl left join vtiger_field f on fl.fieldid=f.fieldid where fl.module=? and fl.relmodule=?', array($module, $module));\n\t\tif ($adb->num_rows($rs) == 1) {\n\t\t\treturn $adb->query_result($rs, 0, 0);\n\t\t}\n\t\t$log->debug('< getSelfRelationField');\n\t\treturn false;\n\t}\n\n\tpublic static function getcrmEntityTableAlias($modulename, $isaliasset = false) {\n\t\t$modObj = CRMEntity::getInstance($modulename);\n\t\tif ($isaliasset) {\n\t\t\treturn $modObj->crmentityTable;\n\t\t}\n\t\treturn (($modObj->crmentityTable != 'vtiger_crmentity') ? $modObj->crmentityTable. ' as vtiger_crmentity':'vtiger_crmentity');\n\t}\n\n\tpublic function isDeleted($id) {\n\t\tglobal $adb;\n\t\t$result = $adb->pquery(\"select deleted from $this->crmentityTable where crmid=?\", array(\n\t\t\t$id\n\t\t));\n\t\treturn boolval($adb->query_result($result, 0, 'deleted'));\n\t}\n}\n?>\n", "<?php\n/*+**********************************************************************************\n * The contents of this file are subject to the vtiger CRM Public License Version 1.0\n * (\"License\"); You may not use this file except in compliance with the License\n * The Original Code is:  vtiger CRM Open Source\n * The Initial Developer of the Original Code is vtiger.\n * Portions created by vtiger are Copyright (C) vtiger.\n * All Rights Reserved.\n ************************************************************************************/\nrequire_once 'Smarty_setup.php';\nrequire_once 'modules/Users/Users.php';\nrequire_once 'include/logging.php';\nrequire_once 'include/utils/UserInfoUtil.php';\n$log = LoggerManager::getLogger('index');\n\nglobal $adb;\n$user_name = empty($_REQUEST['userName']) ? '' : vtlib_purify($_REQUEST['userName']);\nif (isset($_REQUEST['status']) && $_REQUEST['status'] != '') {\n\t$_REQUEST['status']= vtlib_purify($_REQUEST['status']);\n} else {\n\t$_REQUEST['status']='Active';\n}\n\nif (isset($_REQUEST['dup_check']) && $_REQUEST['dup_check'] != '') {\n\t$user_query = 'SELECT user_name FROM vtiger_users WHERE user_name =?';\n\t$user_result = $adb->pquery($user_query, array($user_name));\n\t$group_query = 'SELECT groupname FROM vtiger_groups WHERE groupname =?';\n\t$group_result = $adb->pquery($group_query, array($user_name));\n\tif ($adb->num_rows($user_result) > 0) {\n\t\techo $mod_strings['LBL_USERNAME_EXIST'];\n\t\tdie;\n\t} elseif ($adb->num_rows($group_result) > 0) {\n\t\techo $mod_strings['LBL_GROUPNAME_EXIST'];\n\t\tdie;\n\t} else {\n\t\techo 'SUCCESS';\n\t\tdie;\n\t}\n}\nif (!empty($_REQUEST['user_role']) && !is_admin($current_user) && $_REQUEST['user_role'] != $current_user->roleid) {\n\t$log->fatal('SECURITY:Non-Admin user:'. $current_user->id . ' attempted to change user role');\n\t$smarty = new vtigerCRM_Smarty();\n\t$smarty->assign('APP', $app_strings);\n\t$smarty->assign('ERROR_MESSAGE_CLASS', 'cb-alert-danger');\n\t$smarty->assign('ERROR_MESSAGE', 'SECURITY: Non-Admin user attempted to change user role.');\n\t$smarty->display('applicationmessage.tpl');\n\texit;\n}\n\nif ((empty($_SESSION['Users_FORM_TOKEN']) || $_SESSION['Users_FORM_TOKEN']!==(int)$_REQUEST['form_token'])\n\t\t&& $_REQUEST['deleteImage'] != 'true' && $_REQUEST['changepassword'] != 'true'\n\t) {\n\theader('Location: index.php?action=index&module=Users&error_string='.urlencode(getTranslatedString('FORM_TOKEN_EXPIRED', 'Users')));\n\tdie;\n}\n\nif ((isset($_POST['record']) && !is_admin($current_user) && $_POST['record'] != $current_user->id) || (!isset($_POST['record']) && !is_admin($current_user))) {\n\t$smarty = new vtigerCRM_Smarty();\n\t$smarty->assign('APP', $app_strings);\n\t$smarty->assign('ERROR_MESSAGE_CLASS', 'cb-alert-danger');\n\t$smarty->assign('ERROR_MESSAGE', 'Unauthorized access to user administration.');\n\t$smarty->display('applicationmessage.tpl');\n\texit;\n}\n\n$focus = new Users();\nif (isset($_REQUEST['record']) && $_REQUEST['record'] != '') {\n\t$focus->mode='edit';\n\t$focus->id = vtlib_purify($_REQUEST['record']);\n\t$userrs = $adb->pquery('SELECT user_name FROM vtiger_users WHERE id=?', array($focus->id));\n\t$user_name = $adb->query_result($userrs, 0, 0);\n\tif ($current_user->id != $focus->id && in_array($user_name, $cbodBlockedUsers)) {\n\t\theader('Location: index.php?action=index&module=Users&error_string='.urlencode(getTranslatedString('ERR_CANNOTEDITUSER', 'Users')));\n\t\tdie();\n\t}\n} else {\n\t$focus->mode='';\n}\n\nif (isset($_REQUEST['deleteImage']) && $_REQUEST['deleteImage'] == 'true') {\n\t$focus->id = vtlib_purify($_REQUEST['recordid']);\n\t$focus->deleteImage();\n\techo 'SUCCESS';\n\texit;\n}\n\nif (isset($_REQUEST['changepassword']) && $_REQUEST['changepassword'] == 'true') {\n\t$focus->retrieve_entity_info($_REQUEST['record'], 'Users');\n\t$focus->id = vtlib_purify($_REQUEST['record']);\n\tif (isset($_REQUEST['new_password']) && !$focus->change_password(vtlib_purify($_REQUEST['old_password']), vtlib_purify(substr($_REQUEST['new_password'], 0, 1024)))) {\n\t\theader('Location: index.php?action=DetailView&module=Users&record='.$focus->id.'&error_string='.urlencode($focus->error_string));\n\t\texit;\n\t}\n}\n\nif (empty($_REQUEST['changepassword']) || $_REQUEST['changepassword'] != 'true') {\n\tif (strtolower($current_user->is_admin) == 'off' && $current_user->id != $focus->id) {\n\t\t$log->fatal('SECURITY:Non-Admin '. $current_user->id . ' attempted to change settings for user:'. $focus->id);\n\t\theader('Location: index.php?module=Users&action=Logout');\n\t\texit;\n\t}\n\tif (strtolower($current_user->is_admin) == 'off' && isset($_POST['is_admin']) && strtolower($_POST['is_admin']) == 'on') {\n\t\t$log->fatal('SECURITY:Non-Admin '. $current_user->id . ' attempted to change is_admin settings for user:'. $focus->id);\n\t\theader('Location: index.php?module=Users&action=Logout');\n\t\texit;\n\t}\n\n\tif (!isset($_POST['is_admin'])) {\n\t\t$_REQUEST['is_admin'] = 'off';\n\t}\n\t// rearrange the home page and tab\n\tif (!isset($_POST['deleted'])) {\n\t\t$_REQUEST['deleted'] = '0';\n\t}\n\tif (!isset($_POST['homeorder']) || $_POST['homeorder'] == '') {\n\t\t$_REQUEST['homeorder'] = 'ILTI,QLTQ,ALVT,PLVT,CVLVT,HLT,OLV,GRT,OLTSO';\n\t}\n\tif (isset($_REQUEST['internal_mailer']) && $_REQUEST['internal_mailer'] == 'on') {\n\t\t$focus->column_fields['internal_mailer'] = 1;\n\t} else {\n\t\t$focus->column_fields['internal_mailer'] = 0;\n\t}\n\tif (isset($_SESSION['internal_mailer']) && $_SESSION['internal_mailer'] != $focus->column_fields['internal_mailer']) {\n\t\tcoreBOS_Session::set('internal_mailer', $focus->column_fields['internal_mailer']);\n\t}\n\tsetObjectValuesFromRequest($focus);\n\n\tif (empty($focus->column_fields['roleid']) && !empty($_POST['user_role'])) {\n\t\t$focus->column_fields['roleid'] = $_POST['user_role'];\n\t}\n\t$focus->save('Users');\n\n\t$return_id = $focus->id;\n\n\tif (isset($focus->id) && $focus->id != '' && isset($_POST['group_name']) && $_POST['group_name'] != '') {\n\t\tupdateUsers2GroupMapping($_POST['group_name'], $focus->id);\n\t}\n}\nif (isset($_POST['return_module']) && $_POST['return_module'] != '') {\n\t$return_module = vtlib_purify($_REQUEST['return_module']);\n} else {\n\t$return_module = 'Users';\n}\nif (isset($_POST['return_action']) && $_POST['return_action'] != '') {\n\t$return_action = vtlib_purify($_REQUEST['return_action']);\n} else {\n\t$return_action = 'DetailView';\n}\nif (!empty($_REQUEST['return_id'])) {\n\t$return_id = vtlib_purify($_REQUEST['return_id']);\n}\n\n// Check to see if the mode is User Creation and if yes, then sending the email notification to the User with Login details.\n$error_str = '';\nif (isset($_REQUEST['mode']) && $_REQUEST['mode'] == 'create') {\n\tglobal $app_strings, $mod_strings, $default_charset;\n\trequire_once 'modules/Emails/mail.php';\n\t$user_emailid = $focus->column_fields['email1'];\n\n\t$subject = $mod_strings['User Login Details'];\n\t$email_body = $app_strings['MSG_DEAR'].' '. $focus->column_fields['last_name'] .',<br><br>';\n\t$email_body .= $app_strings['LBL_PLEASE_CLICK'] . \" <a href='\" . $site_URL . \"' target='_blank'>\"\n\t\t\t\t. $app_strings['LBL_HERE'] . '</a> ' . $mod_strings['LBL_TO_LOGIN'] . '<br><br>';\n\t$email_body .= $mod_strings['LBL_USER_NAME'] . ' : ' . $focus->column_fields['user_name'] . '<br>';\n\t$email_body .= $mod_strings['LBL_PASSWORD'] . ' : ' . $focus->column_fields['user_password'] . '<br>';\n\t$email_body .= $mod_strings['LBL_ROLE_NAME'] . ' : ' . getRoleName($_POST['user_role']) . '<br>';\n\t$email_body .= '<br>' . $app_strings['MSG_THANKS'] . '<br>' . $current_user->user_name;\n\n\t$HELPDESK_SUPPORT_EMAIL_ID = GlobalVariable::getVariable('HelpDesk_Support_EMail', 'support@your_support_domain.tld', 'HelpDesk');\n\t$HELPDESK_SUPPORT_NAME = GlobalVariable::getVariable('HelpDesk_Support_Name', 'your-support name', 'HelpDesk');\n\t$mail_status = send_mail('Users', $user_emailid, $HELPDESK_SUPPORT_NAME, $HELPDESK_SUPPORT_EMAIL_ID, $subject, $email_body);\n\tif ($mail_status != 1) {\n\t\t$mail_status_str = $user_emailid.'='.$mail_status.'&&&';\n\t\t$error_str = getMailErrorString($mail_status_str);\n\t}\n}\n$location = 'Location: index.php?action='.urlencode(vtlib_purify($return_action)).\n\t'&module='.urlencode(vtlib_purify($return_module)).\n\t'&record='.urlencode(vtlib_purify($return_id));\n\nif ($error_str != '') {\n\t$user = $focus->column_fields['user_name'];\n\t$location .= '&user=' . urlencode($user) . '&' . $error_str;\n}\n\nheader($location);\n?>\n"], "fixing_code": ["<?php\n/*+**********************************************************************************\n * The contents of this file are subject to the vtiger CRM Public License Version 1.0\n * (\"License\"); You may not use this file except in compliance with the License\n * The Original Code is:  vtiger CRM Open Source\n * The Initial Developer of the Original Code is vtiger.\n * Portions created by vtiger are Copyright (C) vtiger.\n * All Rights Reserved.\n ************************************************************************************/\ninclude_once 'config.inc.php';\nrequire_once 'include/logging.php';\nrequire_once 'data/Tracker.php';\nrequire_once 'include/utils/utils.php';\nrequire_once 'include/utils/UserInfoUtil.php';\nrequire_once 'modules/com_vtiger_workflow/VTWorkflowManager.inc';\n$VTIGER_BULK_SAVE_MODE = false; // mass create/import global variable\n\nclass CRMEntity {\n\n\tpublic $ownedby;\n\tpublic $mode;\n\tpublic $id;\n\tpublic $column_fields;\n\tpublic $tab_name;\n\tpublic $tab_name_index;\n\tpublic $table_name;\n\tpublic $table_index;\n\tpublic $fetched_records;\n\tpublic $customFieldTable;\n\tpublic $special_functions;\n\tpublic $importable_fields;\n\tpublic $required_fields;\n\tpublic $sortby_fields;\n\tpublic $list_fields;\n\tpublic $search_fields;\n\tpublic $default_sort_order;\n\tpublic $default_order_by;\n\tpublic $list_link_field;\n\tpublic $list_fields_name;\n\tpublic $linkmodeid = 0;\n\tpublic $linkmodemodule = '';\n\tpublic $DirectImageFieldValues = array();\n\tpublic $HasDirectImageField = false;\n\tpublic $crmentityTable = 'vtiger_crmentity';\n\tpublic $crmentityTableAlias;\n\tpublic $denormalized = false;\n\tpublic $specialModules = array('com_vtiger_workflow');\n\tprotected static $methods = array();\n\tprotected static $dbvalues = array();\n\tprotected static $todvalues = array();\n\tpublic $moduleIcon = array('library' => 'standard', 'containerClass' => 'slds-icon_container slds-icon-standard-recent', 'class' => 'slds-icon', 'icon'=>'entity');\n\n\tpublic function __construct() {\n\t\tglobal $adb;\n\t\t$this_module = get_class($this);\n\t\t$tabid = getTabid($this_module);\n\t\t$result = $adb->pquery('SELECT denormtable FROM vtiger_entityname WHERE tabid=?', array($tabid));\n\t\tif ($result) {\n\t\t\t$this->crmentityTable = $adb->query_result($result, 0, 'denormtable');\n\t\t}\n\t\t$this->denormalized = ($this->crmentityTable!='vtiger_crmentity');\n\t\tif ($this->denormalized) {\n\t\t\tif (($key = array_search('vtiger_crmentity', $this->tab_name)) !== false) {\n\t\t\t\tunset($this->tab_name[$key]);\n\t\t\t}\n\t\t\tunset($this->tab_name_index['vtiger_crmentity']);\n\t\t}\n\t\t$this->crmentityTableAlias = $this->denormalized ? $this->crmentityTable.' as vtiger_crmentity' : 'vtiger_crmentity';\n\t\t$this->column_fields = getColumnFields($this_module);\n\t\t$result = $adb->pquery('SELECT 1 FROM vtiger_field WHERE uitype=69 and tabid=? limit 1', array($tabid));\n\t\t$this->HasDirectImageField = ($result && $adb->num_rows($result)==1);\n\t}\n\n\tpublic static function registerMethod($method) {\n\t\tself::$methods[] = $method;\n\t}\n\n\tpublic function __call($method, $args) {\n\t\tif (in_array($method, self::$methods)) {\n\t\t\t$args[] = $this;\n\t\t\treturn call_user_func_array($method, array_values($args));\n\t\t}\n\t}\n\n\t/**\n\t * Detect if we are in bulk save mode, where some features can be turned-off to improve performance\n\t */\n\tpublic static function isBulkSaveMode() {\n\t\tglobal $VTIGER_BULK_SAVE_MODE;\n\t\treturn isset($VTIGER_BULK_SAVE_MODE) && $VTIGER_BULK_SAVE_MODE;\n\t}\n\n\tpublic static function getInstance($modName) {\n\t\t// File access security check\n\t\tif (!class_exists($modName)) {\n\t\t\tcheckFileAccessForInclusion(\"modules/$modName/$modName.php\");\n\t\t\trequire_once \"modules/$modName/$modName.php\";\n\t\t}\n\t\treturn new $modName();\n\t}\n\n\tpublic function getUUID() {\n\t\t$hcols = array();\n\t\t$hcols['moduletype'] = $this->column_fields['record_module'];\n\t\t$hcols['record_id'] = empty($this->column_fields['record_id']) ? $_REQUEST['currentid'] : $this->column_fields['record_id'];\n\t\t$hcols['creator'] = isset($this->column_fields['created_user_id']) ? getUserEmail($this->column_fields['created_user_id']) : 'email@lost.tld';\n\t\t$hcols['owner'] = isset($this->column_fields['assigned_user_id']) ? getUserEmail($this->column_fields['assigned_user_id']) : 'nouser@module.tld';\n\t\t$hcols['createdtime'] = $this->column_fields['createdtime'];\n\t\treturn sha1(json_encode($hcols));\n\t}\n\n\tpublic static function getUUIDfromCRMID($refval) {\n\t\tglobal $adb;\n\t\t$rs = $adb->pquery('select cbuuid from vtiger_crmobject where crmid=?', array($refval));\n\t\treturn (($rs && $adb->num_rows($rs)>0) ? $rs->fields['cbuuid'] : '');\n\t}\n\n\tpublic static function getUUIDfromWSID($refval) {\n\t\tif (empty($refval)) {\n\t\t\treturn '';\n\t\t}\n\t\t$nocbuuid = array('Users', 'Currency', 'Groups', '');\n\t\tlist($wsid, $crmid) = explode('x', $refval);\n\t\tif (in_array(vtws_getEntityName($wsid), $nocbuuid)) {\n\t\t\treturn '';\n\t\t}\n\t\treturn CRMEntity::getUUIDfromCRMID($crmid);\n\t}\n\n\tpublic static function getCRMIDfromUUID($refval) {\n\t\tglobal $adb;\n\t\tif (empty($refval)) {\n\t\t\treturn '';\n\t\t}\n\t\t$rs = $adb->pquery('select crmid from vtiger_crmobject where cbuuid=?', array($refval));\n\t\treturn (($rs && $adb->num_rows($rs)>0) ? $rs->fields['crmid'] : '');\n\t}\n\n\tpublic static function getWSIDfromUUID($refval) {\n\t\tglobal $adb;\n\t\t$rs = $adb->pquery(\n\t\t\t'select concat(id,\"x\",crmid) as wsid from vtiger_crmobject inner join vtiger_ws_entity on name=setype where cbuuid=?',\n\t\t\tarray($refval)\n\t\t);\n\t\treturn (($rs && $adb->num_rows($rs)>0) ? $rs->fields['wsid'] : '');\n\t}\n\n\tpublic function saveentity($module) {\n\t\tglobal $current_user, $adb;\n\t\tif (property_exists($module, 'HasDirectImageField') && $this->HasDirectImageField && !empty($this->id)) {\n\t\t\t// we have to save these names to delete previous overwritten values in uitype 69 field\n\t\t\t$sql = 'SELECT tablename,columnname FROM vtiger_field WHERE uitype=69 and vtiger_field.tabid = ?';\n\t\t\t$tabid = getTabid($module);\n\t\t\t$result = $adb->pquery($sql, array($tabid));\n\t\t\twhile ($finfo = $adb->fetch_array($result)) {\n\t\t\t\t$mrowrs = $adb->pquery(\n\t\t\t\t\t'select '.$finfo['columnname'].' from '.$finfo['tablename'].' where '.$this->tab_name_index[$finfo['tablename']].'=?',\n\t\t\t\t\tarray($this->id)\n\t\t\t\t);\n\t\t\t\t$this->DirectImageFieldValues[$finfo['columnname']] = $adb->query_result($mrowrs, 0, 0);\n\t\t\t}\n\t\t}\n\t\t$anyValue = false;\n\t\tforeach ($this->column_fields as $value) {\n\t\t\tif (!empty($value)) {\n\t\t\t\t$anyValue = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!$anyValue) {\n\t\t\tdie('<center>' .getTranslatedString('LBL_MANDATORY_FIELD_MISSING').'</center>');\n\t\t}\n\n\t\t$adb->println(\"TRANS saveentity starts $module\");\n\t\t$adb->startTransaction();\n\n\t\tforeach ($this->tab_name as $table_name) {\n\t\t\tif ($table_name == 'vtiger_crmentity') {\n\t\t\t\t$this->insertIntoCrmEntity($module);\n\t\t\t} else {\n\t\t\t\t$this->insertIntoEntityTable($table_name, $module);\n\t\t\t}\n\t\t}\n\n\t\t// If multicurrency module we save the currency and conversion rate\n\t\tif (!empty($this->column_fields['conversion_rate']) && !empty($this->column_fields['currency_id'])) {\n\t\t\t$update_query = 'update '.$this->table_name.' set currency_id=?, conversion_rate=? where '.$this->table_index.'=?';\n\t\t\t$update_params = array($this->column_fields['currency_id'], $this->column_fields['conversion_rate'], $this->id);\n\t\t\t$adb->pquery($update_query, $update_params);\n\t\t}\n\n\t\t//Calling the Module specific save code\n\t\t$this->save_module($module);\n\n\t\t$adb->completeTransaction();\n\t\t$adb->println('TRANS saveentity ends');\n\n\t\t// vtlib customization: Hook provide to enable generic module relation.\n\t\tif (isset($_REQUEST['createmode']) && $_REQUEST['createmode'] == 'link') {\n\t\t\tif (!empty($this->linkmodeid)) {\n\t\t\t\t$for_crmid = vtlib_purify($this->linkmodeid);\n\t\t\t} else {\n\t\t\t\t$for_crmid = vtlib_purify($_REQUEST['return_id']);\n\t\t\t}\n\t\t\tif (!empty($this->linkmodemodule)) {\n\t\t\t\t$for_module = vtlib_purify($this->linkmodemodule);\n\t\t\t} else {\n\t\t\t\t$for_module = vtlib_purify($_REQUEST['return_module']);\n\t\t\t}\n\t\t\t$with_module = $module;\n\t\t\t$with_crmid = $this->id;\n\n\t\t\t$on_focus = CRMEntity::getInstance($for_module);\n\n\t\t\tif ($for_module && $for_crmid && $with_module && $with_crmid) {\n\t\t\t\trelateEntities($on_focus, $for_module, $for_crmid, $with_module, $with_crmid);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function insertIntoAttachment($id, $module, $direct_import = false) {\n\t\tglobal $log, $adb;\n\t\tif (empty($_FILES)) {\n\t\t\treturn;\n\t\t}\n\t\t$log->debug(\"> insertIntoAttachment $id,$module\");\n\t\t$file_saved = false;\n\t\t// get the list of uitype 69 fields so we can set their value\n\t\t$sql = 'SELECT tablename,columnname\n\t\t FROM vtiger_field\n\t\t INNER JOIN vtiger_blocks ON vtiger_blocks.blockid = vtiger_field.block\n\t\t WHERE uitype=69 and vtiger_field.fieldname=? and vtiger_field.tabid = ?\n\t\t ORDER BY vtiger_blocks.sequence,vtiger_field.sequence';\n\t\t$tabid = getTabid($module);\n\t\tforeach ($_FILES as $fileindex => $files) {\n\t\t\tif (!empty($files['name']) && $files['size'] > 0) {\n\t\t\t\tif (!empty($_REQUEST[$fileindex.'_hidden'])) {\n\t\t\t\t\t$files['original_name'] = vtlib_purify($_REQUEST[$fileindex.'_hidden']);\n\t\t\t\t} else {\n\t\t\t\t\t$files['original_name'] = stripslashes($files['name']);\n\t\t\t\t}\n\t\t\t\t$files['original_name'] = str_replace(array('\"',':'), '', $files['original_name']);\n\t\t\t\t$result = $adb->pquery($sql, array($fileindex,$tabid));\n\t\t\t\tif (!$result || $adb->num_rows($result)==0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$tblname = $adb->query_result($result, 0, 'tablename');\n\t\t\t\t$colname = $adb->query_result($result, 0, 'columnname');\n\t\t\t\t$fldname = $fileindex;\n\t\t\t\t// This is to store the existing attachment id so we can delete it when given a new image\n\t\t\t\t$attachmentname = (isset($this->DirectImageFieldValues[$colname]) ? $this->DirectImageFieldValues[$colname] : '');\n\t\t\t\t$old_attachmentrs = $adb->pquery('select vtiger_crmentity.crmid from vtiger_seattachmentsrel\n\t\t\t\t inner join vtiger_crmentity on vtiger_crmentity.crmid=vtiger_seattachmentsrel.attachmentsid\n\t\t\t\t inner join vtiger_attachments on vtiger_crmentity.crmid=vtiger_attachments.attachmentsid\n\t\t\t\t where vtiger_seattachmentsrel.crmid=? and vtiger_attachments.name=?', array($id,$attachmentname));\n\t\t\t\tif ($old_attachmentrs && $adb->num_rows($old_attachmentrs)>0) {\n\t\t\t\t\t$old_attachmentid = $adb->query_result($old_attachmentrs, 0, 'crmid');\n\t\t\t\t} else {\n\t\t\t\t\t$old_attachmentid = 0;\n\t\t\t\t}\n\t\t\t\t$upd = \"update $tblname set $colname=? where \".$this->tab_name_index[$tblname].'=?';\n\t\t\t\t$adb->pquery($upd, array($files['original_name'],$this->id));\n\t\t\t\t$this->column_fields[$fldname] = $files['original_name'];\n\t\t\t\tif (!empty($old_attachmentid)) {\n\t\t\t\t\t$setypers = $adb->pquery('select setype from '.$this->crmentityTable.' where crmid=?', array($old_attachmentid));\n\t\t\t\t\t$setype = $adb->query_result($setypers, 0, 'setype');\n\t\t\t\t\tif ($setype == 'Contacts Image' || $setype == $module.Field_Metadata::ATTACHMENT_ENTITY) {\n\t\t\t\t\t\t$cntrels = $adb->pquery('select count(*) as cnt from vtiger_seattachmentsrel where attachmentsid=?', array($old_attachmentid));\n\t\t\t\t\t\t$numrels = $adb->query_result($cntrels, 0, 'cnt');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$numrels = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$file_saved = $this->uploadAndSaveFile($id, $module, $files, $attachmentname, $direct_import, $fldname);\n\t\t\t\t// Remove the deleted attachments from db\n\t\t\t\tif ($file_saved && !empty($old_attachmentid) && ($setype == 'Contacts Image' || $setype == $module.Field_Metadata::ATTACHMENT_ENTITY)) {\n\t\t\t\t\tif ($numrels == 1) {\n\t\t\t\t\t\t$adb->pquery('delete from vtiger_attachments where attachmentsid=?', array($old_attachmentid));\n\t\t\t\t\t}\n\t\t\t\t\t$adb->pquery('delete from vtiger_seattachmentsrel where crmid = ? and attachmentsid=?', array($id, $old_attachmentid));\n\t\t\t\t}\n\t\t\t} elseif (isset($_REQUEST[$fileindex.'_canvas_image_set']) && $_REQUEST[$fileindex.'_canvas_image_set']==1 && !empty($_REQUEST[$fileindex.'_canvas_image'])) {\n\t\t\t\t$saveasfile = $module . '_' . $fileindex . '_' . date('YmdHis') . '.png';\n\t\t\t\t$fh = fopen('cache/images/'.$saveasfile, 'wb');\n\t\t\t\t$filecontent = $_REQUEST[$fileindex.'_canvas_image'];\n\t\t\t\tif (substr($filecontent, 0, strlen('data:image/png;base64,'))=='data:image/png;base64,') {\n\t\t\t\t\t// Base64 Encoded HTML5 Canvas image\n\t\t\t\t\t$filecontent = str_replace('data:image/png;base64,', '', $filecontent);\n\t\t\t\t\t$filecontent = str_replace(' ', '+', $filecontent);\n\t\t\t\t}\n\t\t\t\tfwrite($fh, base64_decode($filecontent));\n\t\t\t\tfclose($fh);\n\t\t\t\t$fi = array(\n\t\t\t\t\t'name' => $saveasfile,\n\t\t\t\t\t'original_name' => $saveasfile,\n\t\t\t\t\t'type' => 'image/png',\n\t\t\t\t\t'tmp_name' => 'cache/images/' . $saveasfile,\n\t\t\t\t\t'error' => 0,\n\t\t\t\t\t'size' => 0\n\t\t\t\t);\n\t\t\t\t$this->uploadAndSaveFile($id, $module, $fi, '', true, $fileindex);\n\t\t\t\t$result = $adb->pquery($sql, array($fileindex,$tabid));\n\t\t\t\t$tblname = $adb->query_result($result, 0, 'tablename');\n\t\t\t\t$colname = $adb->query_result($result, 0, 'columnname');\n\t\t\t\t$adb->pquery(\"update $tblname set $colname=? where \".$this->tab_name_index[$tblname].'=?', array($saveasfile,$this->id));\n\t\t\t} elseif (empty($files['name']) && $files['size'] == 0) {\n\t\t\t\t$result = $adb->pquery($sql, array($fileindex,$tabid));\n\t\t\t\t$tblname = $adb->query_result($result, 0, 'tablename');\n\t\t\t\t$colname = $adb->query_result($result, 0, 'columnname');\n\t\t\t\tif (empty($_REQUEST[$fileindex.'_hidden'])) {\n\t\t\t\t\t$upd = \"update $tblname set $colname='' where \".$this->tab_name_index[$tblname].'=?';\n\t\t\t\t\t$adb->pquery($upd, array($this->id));\n\t\t\t\t} elseif (!empty($_REQUEST['__cbisduplicatedfromrecordid'])) {\n\t\t\t\t\t$attachmentname = vtlib_purify($_REQUEST[$fileindex.'_hidden']);\n\t\t\t\t\t$attachmentname = str_replace(' ', '_', $attachmentname);\n\t\t\t\t\t$isduplicatedfromrecordid = vtlib_purify($_REQUEST['__cbisduplicatedfromrecordid']);\n\t\t\t\t\t$old_attachmentrs = $adb->pquery('select vtiger_crmentity.crmid from vtiger_seattachmentsrel\n\t\t\t\t\t inner join vtiger_crmentity on vtiger_crmentity.crmid=vtiger_seattachmentsrel.attachmentsid\n\t\t\t\t\t inner join vtiger_attachments on vtiger_crmentity.crmid=vtiger_attachments.attachmentsid\n\t\t\t\t\t where vtiger_seattachmentsrel.crmid=? and vtiger_attachments.name=?', array($isduplicatedfromrecordid,$attachmentname));\n\t\t\t\t\tif ($old_attachmentrs && $adb->num_rows($old_attachmentrs)>0) {\n\t\t\t\t\t\t$old_attachmentid = $adb->query_result($old_attachmentrs, 0, 'crmid');\n\t\t\t\t\t\t$upd = \"update $tblname set $colname=? where \".$this->tab_name_index[$tblname].'=?';\n\t\t\t\t\t\t$adb->pquery($upd, array($attachmentname,$this->id));\n\t\t\t\t\t\t$adb->pquery('insert into vtiger_seattachmentsrel values(?,?)', array($id, $old_attachmentid));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$upd = \"update $tblname set $colname='' where \".$this->tab_name_index[$tblname].'=?';\n\t\t\t\t\t\t$adb->pquery($upd, array($this->id));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$log->debug('< insertIntoAttachment');\n\t}\n\n\t/**\n\t * function used to upload the attachment in the server and save that attachment information in db.\n\t * @param integer entity id to which the file will be uploaded\n\t * @param string the current module name\n\t * @param array contains the file information (name, type, size, tmp_name and error)\n\t * @return boolean true if uploaded, false if the image is not secure or some other error occured\n\t */\n\tpublic function uploadAndSaveFile($id, $module, $file_details, $attachmentname = '', $direct_import = false, $forfield = '') {\n\t\tglobal $log, $adb, $current_user, $upload_badext;\n\t\t$log->debug('> uploadAndSaveFile', [$id, $module, $file_details]);\n\n\t\t$date_var = date('Y-m-d H:i:s');\n\n\t\t//to get the owner id\n\t\t$ownerid = $this->column_fields['assigned_user_id'];\n\t\tif (!isset($ownerid) || $ownerid == '') {\n\t\t\t$ownerid = $current_user->id;\n\t\t}\n\n\t\tif (isset($file_details['original_name']) && $file_details['original_name'] != null) {\n\t\t\t$file_name = $file_details['original_name'];\n\t\t} else {\n\t\t\t$file_name = $file_details['name'];\n\t\t}\n\n\t\t$binFile = sanitizeUploadFileName($file_name, $upload_badext);\n\n\t\t$current_id = $adb->getUniqueID('vtiger_crmentity');\n\n\t\t$filename = ltrim(basename(' ' . $binFile)); //allowed filename like UTF-8 characters\n\t\t$filetype = $file_details['type'];\n\t\t$filetmp_name = $file_details['tmp_name'];\n\n\t\tif (validateImageFile($file_details) == 'true' && !validateImageContents($filetmp_name)) {\n\t\t\t$log->debug('< uploadAndSaveFile: skip save attachment process');\n\t\t\treturn false;\n\t\t}\n\n\t\t//get the file path inwhich folder we want to upload the file\n\t\t$upload_file_path = decideFilePath();\n\n\t\t//upload the file in server\n\t\tif ($direct_import || !is_uploaded_file($filetmp_name)) {\n\t\t\t$upload_status = @copy($filetmp_name, $upload_file_path . $current_id . '_' . $binFile);\n\t\t} else {\n\t\t\t$upload_status = @move_uploaded_file($filetmp_name, $upload_file_path . $current_id . '_' . $binFile);\n\t\t}\n\n\t\tif ($upload_status && !empty($forfield)) {\n\t\t\tunset($_FILES[$forfield]);\n\t\t}\n\n\t\tif ($upload_status) {\n\t\t\t$description_val = empty($this->column_fields['description']) ? '' : $this->column_fields['description'];\n\t\t\tif (($module == 'Contacts' || $module == 'Products') && $forfield=='imagename') {\n\t\t\t\t$sql1 = 'insert into vtiger_crmentity (crmid,smcreatorid,smownerid,setype,description,createdtime,modifiedtime) values(?, ?, ?, ?, ?, ?, ?)';\n\t\t\t\t$params1 = array(\n\t\t\t\t\t$current_id,\n\t\t\t\t\t$current_user->id,\n\t\t\t\t\t$ownerid,\n\t\t\t\t\t$module . ' Image',\n\t\t\t\t\t$description_val,\n\t\t\t\t\t$adb->formatDate($date_var, true),\n\t\t\t\t\t$adb->formatDate($date_var, true)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t$sql1 = 'insert into vtiger_crmentity (crmid,smcreatorid,smownerid,setype,description,createdtime,modifiedtime) values(?, ?, ?, ?, ?, ?, ?)';\n\t\t\t\t$params1 = array(\n\t\t\t\t\t$current_id,\n\t\t\t\t\t$current_user->id,\n\t\t\t\t\t$ownerid,\n\t\t\t\t\t$module . Field_Metadata::ATTACHMENT_ENTITY,\n\t\t\t\t\t$description_val,\n\t\t\t\t\t$adb->formatDate($date_var, true),\n\t\t\t\t\t$adb->formatDate($date_var, true)\n\t\t\t\t);\n\t\t\t}\n\t\t\t$adb->pquery($sql1, $params1);\n\n\t\t\t$sql2 = 'insert into vtiger_attachments(attachmentsid, name, description, type, path) values(?, ?, ?, ?, ?)';\n\t\t\t$params2 = array($current_id, $filename, $description_val, $filetype, $upload_file_path);\n\t\t\t$adb->pquery($sql2, $params2);\n\n\t\t\tif (((isset($_REQUEST['mode']) && $_REQUEST['mode']=='edit') || $this->mode=='edit') && $id!='' && isset($_REQUEST['fileid']) && $_REQUEST['fileid']!='') {\n\t\t\t\t$adb->pquery('delete from vtiger_seattachmentsrel where crmid=? and attachmentsid=?', array($id, vtlib_purify($_REQUEST['fileid'])));\n\t\t\t}\n\t\t\tif ($module == 'Documents') {\n\t\t\t\t$query = 'delete from vtiger_seattachmentsrel where crmid = ?';\n\t\t\t\t$qparams = array($id);\n\t\t\t\t$adb->pquery($query, $qparams);\n\t\t\t}\n\t\t\tif ($module == 'Contacts' || (property_exists($this, 'HasDirectImageField') && $this->HasDirectImageField)) {\n\t\t\t\tif ($module == 'Contacts') {\n\t\t\t\t\t$imageattachment = 'Image';\n\t\t\t\t} else {\n\t\t\t\t\t$imageattachment = 'Attachment';\n\t\t\t\t}\n\t\t\t\t$att_sql = \"select vtiger_seattachmentsrel.attachmentsid from vtiger_seattachmentsrel\n\t\t\t\t inner join vtiger_crmentity on vtiger_crmentity.crmid=vtiger_seattachmentsrel.attachmentsid\n\t\t\t\t inner join vtiger_attachments on vtiger_crmentity.crmid=vtiger_attachments.attachmentsid\n\t\t\t\t where vtiger_crmentity.setype='$module $imageattachment'\n\t\t\t\t  and vtiger_attachments.name=?\n\t\t\t\t  and vtiger_seattachmentsrel.crmid=?\";\n\t\t\t\t$res = $adb->pquery($att_sql, array($attachmentname,$id));\n\t\t\t\t$attachmentsid = $adb->query_result($res, 0, 'attachmentsid');\n\t\t\t\tif ($attachmentsid != '') {\n\t\t\t\t\t$cntrels = $adb->pquery('select count(*) as cnt from vtiger_seattachmentsrel where attachmentsid=?', array($attachmentsid));\n\t\t\t\t\t$numrels = $adb->query_result($cntrels, 0, 'cnt');\n\t\t\t\t\t$adb->pquery('delete from vtiger_seattachmentsrel where crmid=? and attachmentsid=?', array($id, $attachmentsid));\n\t\t\t\t\tif ($numrels == 1) {\n\t\t\t\t\t\t$adb->pquery('delete from vtiger_crmentity where crmid=?', array($attachmentsid));\n\t\t\t\t\t}\n\t\t\t\t\t$adb->pquery('insert into vtiger_seattachmentsrel values(?,?)', array($id, $current_id));\n\t\t\t\t} else {\n\t\t\t\t\t$adb->pquery('insert into vtiger_seattachmentsrel values(?,?)', array($id, $current_id));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$adb->pquery('insert into vtiger_seattachmentsrel values(?,?)', array($id, $current_id));\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\t$log->debug('< uploadAndSaveFile: skip save attachment process');\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/** Function to insert values in the crmentity table for the specified module\n\t * @param string module\n\t */\n\tprivate function insertIntoCrmEntity($module) {\n\t\tglobal $adb, $current_user;\n\t\t$crmvalues = $this->getCrmEntityValues($module);\n\t\t$ownerid = $crmvalues['ownerid'];\n\t\tif ($this->mode == 'edit') {\n\t\t\t$userprivs = $current_user->getPrivileges();\n\t\t\t$tabid = getTabid($module);\n\t\t\t$cbuuidupdate = '';\n\t\t\tif (!empty($this->column_fields['cbuuid'])) {\n\t\t\t\t$cbuuidupdate = $adb->convert2Sql(',cbuuid=?', array($this->column_fields['cbuuid']));\n\t\t\t}\n\t\t\tif ($userprivs->hasGlobalReadPermission()) {\n\t\t\t\t$sql = \"update vtiger_crmentity set smownerid=?,modifiedby=?,description=?,modifiedtime=? $cbuuidupdate where crmid=?\";\n\t\t\t\t$params = array($ownerid, $current_user->id, $crmvalues['description'], $crmvalues['date'], $this->id);\n\t\t\t} else {\n\t\t\t\t$profileList = getCurrentUserProfileList();\n\t\t\t\t$perm_qry = 'SELECT 1\n\t\t\t\t\tFROM vtiger_field\n\t\t\t\t\tINNER JOIN vtiger_profile2field ON vtiger_profile2field.fieldid = vtiger_field.fieldid\n\t\t\t\t\tINNER JOIN vtiger_def_org_field ON vtiger_def_org_field.fieldid = vtiger_field.fieldid\n\t\t\t\t\tWHERE vtiger_field.columnname=? AND vtiger_field.tabid=? AND vtiger_profile2field.visible=0 AND vtiger_profile2field.readonly=0 AND\n\t\t\t\t\t\tvtiger_profile2field.profileid IN (' . generateQuestionMarks($profileList) . \") AND\n\t\t\t\t\t\tvtiger_def_org_field.visible = 0 and vtiger_field.tablename='vtiger_crmentity' AND\n\t\t\t\t\t\tvtiger_field.displaytype in (1,3) and vtiger_field.presence in (0,2);\";\n\t\t\t\t$perm_result = $adb->pquery($perm_qry, array('description', $tabid, $profileList));\n\t\t\t\tif ($adb->num_rows($perm_result)>0) {\n\t\t\t\t\t$sql = \"update vtiger_crmentity set smownerid=?,modifiedby=?,description=?,modifiedtime=? $cbuuidupdate where crmid=?\";\n\t\t\t\t\t$params = array($ownerid, $current_user->id, $crmvalues['description'], $crmvalues['date'], $this->id);\n\t\t\t\t} else {\n\t\t\t\t\t$sql = \"update vtiger_crmentity set smownerid=?,modifiedby=?,modifiedtime=? $cbuuidupdate where crmid=?\";\n\t\t\t\t\t$params = array($ownerid, $current_user->id, $crmvalues['date'], $this->id);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$rdo = $adb->pquery($sql, $params);\n\t\t\tif ($rdo) {\n\t\t\t\t$adb->pquery(\n\t\t\t\t\t\"UPDATE vtiger_crmobject set smownerid=?,modifiedtime=? $cbuuidupdate WHERE crmid=?\",\n\t\t\t\t\tarray($ownerid, $crmvalues['date'], $this->id)\n\t\t\t\t);\n\t\t\t}\n\t\t\t$sql1 = 'delete from vtiger_ownernotify where crmid=?';\n\t\t\t$params1 = array($this->id);\n\t\t\t$adb->pquery($sql1, $params1);\n\t\t\tif ($ownerid != $current_user->id) {\n\t\t\t\t$sql1 = 'insert into vtiger_ownernotify values(?,?,?)';\n\t\t\t\t$params1 = array($this->id, $ownerid, null);\n\t\t\t\t$adb->pquery($sql1, $params1);\n\t\t\t}\n\t\t} else {\n\t\t\t//if this is the create mode and the group allocation is chosen, then do the following\n\t\t\t$current_id = $adb->getUniqueID('vtiger_crmentity');\n\t\t\t$_REQUEST['currentid'] = $current_id;\n\t\t\tif ($current_user->id == '') {\n\t\t\t\t$current_user->id = 0;\n\t\t\t}\n\t\t\t$this->column_fields['record_id'] = $current_id;\n\t\t\t$this->column_fields['record_module'] = $module;\n\t\t\tif (empty($this->column_fields['cbuuid'])) {\n\t\t\t\t$this->column_fields['createdtime'] = $crmvalues['created_date'];\n\t\t\t\t$cbuuid = $this->getUUID();\n\t\t\t} else {\n\t\t\t\t$cbuuid = $this->column_fields['cbuuid'];\n\t\t\t}\n\t\t\t$sql = 'insert into vtiger_crmentity (crmid,smcreatorid,smownerid,setype,description,modifiedby,createdtime,modifiedtime,cbuuid) values(?,?,?,?,?,?,?,?,?)';\n\t\t\t$params = array($current_id, $crmvalues['createdbyuser'], $ownerid, $module, $crmvalues['description'], $current_user->id, $crmvalues['created_date'], $crmvalues['modified_date'], $cbuuid);\n\t\t\t$rdo = $adb->pquery($sql, $params);\n\t\t\tif ($rdo) {\n\t\t\t\t$adb->pquery(\n\t\t\t\t\t'INSERT INTO vtiger_crmobject (crmid,deleted,setype,smownerid,modifiedtime,cbuuid) values (?,0,?,?,?,?)',\n\t\t\t\t\tarray($current_id, $module, $ownerid, $crmvalues['modified_date'], $cbuuid)\n\t\t\t\t);\n\t\t\t}\n\t\t\t$this->id = $current_id;\n\t\t}\n\t}\n\n\tprivate function getCrmEntityValues($module) {\n\t\tglobal $adb, $current_user;\n\t\t$crmvalues = array();\n\t\t$crmvalues['module'] = $module;\n\t\t$crmvalues['date'] = $adb->formatDate(date('Y-m-d H:i:s'), true);\n\t\t$crmvalues['created_date'] = $crmvalues['date'];\n\t\t$crmvalues['createdbyuser'] = $current_user->id;\n\t\tif (self::isBulkSaveMode()) {\n\t\t\tif (!empty($this->column_fields['createdtime'])) {\n\t\t\t\t$crmvalues['created_date'] = $adb->formatDate($this->column_fields['createdtime'], true);\n\t\t\t}\n\t\t\tif (!empty($this->column_fields['creator'])) {\n\t\t\t\t$crmvalues['createdbyuser'] = $this->column_fields['creator'];\n\t\t\t}\n\t\t\t//NOTE : modifiedtime ignored to support vtws_sync API track changes.\n\t\t}\n\t\t$crmvalues['modified_date'] = $crmvalues['date'];\n\n\t\t$ownerid = $this->sanitizeOwnerField($this->column_fields['assigned_user_id']);\n\n\t\t$res = $adb->pquery('select ownedby from vtiger_tab where name=?', array($module));\n\t\t$this->ownedby = $adb->query_result($res, 0, 'ownedby');\n\n\t\tif ($this->ownedby == 1) {\n\t\t\t$ownerid = $current_user->id;\n\t\t}\n\t\tif (empty($ownerid)) {\n\t\t\tif ($this->mode != 'edit') {\n\t\t\t\t$ownerid = $current_user->id;\n\t\t\t} else {\n\t\t\t\t$ownerrs = $adb->pquery('select smownerid from '.$this->crmentityTable.' where crmid=?', array($this->id));\n\t\t\t\t$ownerid = $adb->query_result($ownerrs, 0, 0);\n\t\t\t}\n\t\t}\n\t\t$crmvalues['ownerid'] = $ownerid;\n\t\t$crmvalues['description'] = (empty($this->column_fields['description']) ? '' : $this->column_fields['description']);\n\t\treturn $crmvalues;\n\t}\n\n\tprivate function setCrmEntityValues($values) {\n\t\tglobal $current_user;\n\t\t$this->column_fields['created_user_id'] = $values['createdbyuser'];\n\t\t$this->column_fields['assigned_user_id'] = $this->sanitizeOwnerField($values['ownerid']);\n\t\t$this->column_fields['modifiedby'] = $current_user->id;\n\t\t$this->column_fields['createdtime'] = $values['created_date'];\n\t\t$this->column_fields['modifiedtime'] = $values['modified_date'];\n\t\t$this->column_fields['description'] = $values['description'];\n\t}\n\n\tpublic function sanitizeOwnerField($value, $defaultCurrent = true) {\n\t\tglobal $current_user;\n\t\t$ownerid = (empty($value) && $defaultCurrent) ? $current_user->id : $value;\n\t\tif (strpos($ownerid, 'x')>0) { // we have a WSid\n\t\t\t$usrWSid = vtws_getEntityId('Users');\n\t\t\t$grpWSid = vtws_getEntityId('Groups');\n\t\t\tlist($inputWSid,$ownerid) = explode('x', $ownerid);\n\t\t\tif ($usrWSid!=$inputWSid && $grpWSid!=$inputWSid) {\n\t\t\t\tTerminateExecution::die('Invalid user id!');\n\t\t\t}\n\t\t}\n\t\treturn $ownerid;\n\t}\n\n\t// Function which returns the value based on result type (array / ADODB ResultSet)\n\tprivate function resolve_query_result_value($result, $index, $columnname) {\n\t\tglobal $adb;\n\t\tif (is_array($result)) {\n\t\t\treturn $result[$index][$columnname];\n\t\t} else {\n\t\t\treturn $adb->query_result($result, $index, $columnname);\n\t\t}\n\t}\n\n\t/** Function to insert values in the specifed table for the specified module\n\t * @param string table name\n\t * @param string module\n\t */\n\tprivate function insertIntoEntityTable($table_name, $module) {\n\t\tglobal $log, $current_user, $app_strings, $from_wf, $adb;\n\t\t$log->debug(\"> insertIntoEntityTable $module $table_name\");\n\t\t$insertion_mode = $this->mode;\n\n\t\t//Checking if entry is already present so we have to update\n\t\tif ($insertion_mode == 'edit' && $table_name!='vtiger_invoice_recurring_info') {\n\t\t\t$tablekey = $this->tab_name_index[$table_name];\n\t\t\t// Make selection on the primary key of the module table to check.\n\t\t\t$check_query = \"select $tablekey from $table_name where $tablekey=?\";\n\t\t\t$check_result = $adb->pquery($check_query, array($this->id));\n\n\t\t\t$num_rows = $adb->num_rows($check_result);\n\n\t\t\tif ($num_rows <= 0) {\n\t\t\t\t$insertion_mode = '';\n\t\t\t}\n\t\t\t$creatingdisplay = '';\n\t\t} else {\n\t\t\t$creatingdisplay = ',5';\n\t\t}\n\t\t$this->column_fields['assigned_user_id'] = $this->sanitizeOwnerField($this->column_fields['assigned_user_id']);\n\t\t$selectFields = 'fieldname, columnname, uitype, typeofdata';\n\n\t\t$tabid = getTabid($module);\n\t\t$uniqueFieldsRestriction = 'vtiger_field.fieldid IN (select min(vtiger_field.fieldid) from vtiger_field where vtiger_field.tabid=? GROUP BY vtiger_field.columnname)';\n\t\tif ($insertion_mode == 'edit') {\n\t\t\t$update = array();\n\t\t\t$update_params = array();\n\t\t\t$userprivs = $current_user->getPrivileges();\n\t\t\tif (isset($from_wf) && $from_wf) {\n\t\t\t\t$sql = \"select $selectFields from vtiger_field where $uniqueFieldsRestriction and tablename=? and displaytype in (1,3,4$creatingdisplay) and presence in (0,2)\";\n\t\t\t\t$params = array($tabid, $table_name);\n\t\t\t} elseif ($userprivs->hasGlobalReadPermission()) {\n\t\t\t\t$sql = \"select $selectFields from vtiger_field where $uniqueFieldsRestriction and tablename=? and displaytype in (1,3$creatingdisplay) and presence in (0,2)\";\n\t\t\t\t$params = array($tabid, $table_name);\n\t\t\t} else {\n\t\t\t\t$profileList = getCurrentUserProfileList();\n\t\t\t\tif (count($profileList) > 0) {\n\t\t\t\t\t$sql = \"SELECT distinct $selectFields\n\t\t\t\t\t\tFROM vtiger_field\n\t\t\t\t\t\tINNER JOIN vtiger_profile2field\n\t\t\t\t\t\tON vtiger_profile2field.fieldid = vtiger_field.fieldid\n\t\t\t\t\t\tINNER JOIN vtiger_def_org_field\n\t\t\t\t\t\tON vtiger_def_org_field.fieldid = vtiger_field.fieldid\n\t\t\t\t\t\tWHERE $uniqueFieldsRestriction\n\t\t\t\t\t\tAND vtiger_profile2field.visible = 0 AND vtiger_profile2field.readonly = 0\n\t\t\t\t\t\tAND vtiger_profile2field.profileid IN (\" . generateQuestionMarks($profileList) . \")\n\t\t\t\t\t\tAND vtiger_def_org_field.visible = 0 and vtiger_field.tablename=? and vtiger_field.displaytype in (1,3$creatingdisplay) and vtiger_field.presence in (0,2)\";\n\t\t\t\t\t$params = array($tabid, $profileList, $table_name);\n\t\t\t\t} else {\n\t\t\t\t\t$sql = \"SELECT distinct $selectFields\n\t\t\t\t\t\tFROM vtiger_field\n\t\t\t\t\t\tINNER JOIN vtiger_profile2field\n\t\t\t\t\t\tON vtiger_profile2field.fieldid = vtiger_field.fieldid\n\t\t\t\t\t\tINNER JOIN vtiger_def_org_field\n\t\t\t\t\t\tON vtiger_def_org_field.fieldid = vtiger_field.fieldid\n\t\t\t\t\t\tWHERE $uniqueFieldsRestriction\n\t\t\t\t\t\tAND vtiger_profile2field.visible = 0 AND vtiger_profile2field.readonly = 0\n\t\t\t\t\t\tAND vtiger_def_org_field.visible = 0 and vtiger_field.tablename=? and vtiger_field.displaytype in (1,3$creatingdisplay) and vtiger_field.presence in (0,2)\";\n\t\t\t\t\t$params = array($tabid, $table_name);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$table_index_column = $this->tab_name_index[$table_name];\n\t\t\tif ($table_index_column == 'id' && $table_name == 'vtiger_users') {\n\t\t\t\t$this->id = $adb->getUniqueID('vtiger_users');\n\t\t\t}\n\t\t\tif ($this->denormalized && $table_name == $this->crmentityTable) {\n\t\t\t\t$this->id = $adb->getUniqueID('vtiger_crmentity');\n\t\t\t\t$this->setCrmEntityValues($this->getCrmEntityValues($module));\n\t\t\t}\n\t\t\t$column = array($table_index_column);\n\t\t\t$value = array($this->id);\n\t\t\t$sql = \"select $selectFields from vtiger_field where $uniqueFieldsRestriction and tablename=? and displaytype in (1,3,4$creatingdisplay) and vtiger_field.presence in (0,2)\";\n\t\t\t$params = array($tabid, $table_name);\n\t\t}\n\n\t\t// Attempt to re-use the query-result to avoid reading for every save operation\n\t\tstatic $_privatecache = array();\n\n\t\t$cachekey = md5($insertion_mode . $sql . json_encode($params));\n\n\t\tif (!isset($_privatecache[$cachekey])) {\n\t\t\t$result = $adb->pquery($sql, $params);\n\t\t\t$noofrows = $adb->num_rows($result);\n\n\t\t\tif (CRMEntity::isBulkSaveMode()) {\n\t\t\t\t$cacheresult = array();\n\t\t\t\tfor ($i = 0; $i < $noofrows; ++$i) {\n\t\t\t\t\t$cacheresult[] = $adb->fetch_array($result);\n\t\t\t\t}\n\t\t\t\t$_privatecache[$cachekey] = $cacheresult;\n\t\t\t}\n\t\t} else { // Useful when doing bulk save\n\t\t\t$result = $_privatecache[$cachekey];\n\t\t\t$noofrows = count($result);\n\t\t}\n\n\t\tfor ($i = 0; $i < $noofrows; $i++) {\n\t\t\t$fieldname = $this->resolve_query_result_value($result, $i, 'fieldname');\n\t\t\t$columname = $this->resolve_query_result_value($result, $i, 'columnname');\n\t\t\t$uitype = $this->resolve_query_result_value($result, $i, 'uitype');\n\t\t\t$typeofdata = $this->resolve_query_result_value($result, $i, 'typeofdata');\n\n\t\t\t$typeofdata_array = explode('~', $typeofdata);\n\t\t\t$datatype = $typeofdata_array[0];\n\n\t\t\t$ajaxSave = false;\n\t\t\tif ((isset($_REQUEST['file']) && $_REQUEST['file'] == 'DetailViewAjax' && isset($_REQUEST['ajxaction']) && $_REQUEST['ajxaction'] == 'DETAILVIEW'\n\t\t\t\t&& isset($_REQUEST['fldName']) && $_REQUEST['fldName'] != $fieldname)\n\t\t\t\t|| (isset($_REQUEST['action']) && $_REQUEST['action'] == 'MassEditSave' && !isset($_REQUEST[$fieldname.'_mass_edit_check'])\n\t\t\t\t&& (!isset($_REQUEST['ajxaction']) || $_REQUEST['ajxaction'] != 'Workflow'))\n\t\t\t\t|| (!empty($this->column_fields['__cbws_skipcurdbconv'.$fieldname]) || !empty($this->column_fields['__cbws_skipcurdbconvall']))\n\t\t\t) {\n\t\t\t\t$ajaxSave = true;\n\t\t\t}\n\n\t\t\tif ($uitype == 4 && $insertion_mode != 'edit') {\n\t\t\t\t$fldvalue = '';\n\t\t\t\t// Bulk Save Mode: Avoid generation of module sequence number, take care later.\n\t\t\t\tif (!CRMEntity::isBulkSaveMode()) {\n\t\t\t\t\t$fldvalue = $this->setModuleSeqNumber('increment', $module);\n\t\t\t\t}\n\t\t\t\t$this->column_fields[$fieldname] = $fldvalue;\n\t\t\t}\n\t\t\tif (isset($this->column_fields[$fieldname])) {\n\t\t\t\tif ($uitype == 56) {\n\t\t\t\t\tif ($this->column_fields[$fieldname] === 'on' || $this->column_fields[$fieldname] == 1) {\n\t\t\t\t\t\t$fldvalue = '1';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$fldvalue = '0';\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == 15 || $uitype == 16 || $uitype == 1613 || $uitype == 1614 || $uitype == 1615) {\n\t\t\t\t\tif ($this->column_fields[$fieldname] == $app_strings['LBL_NOT_ACCESSIBLE']) {\n\t\t\t\t\t\t//If the value in the request is Not Accessible for a picklist, the existing value will be replaced instead of Not Accessible value.\n\t\t\t\t\t\t$sql = \"select $columname from $table_name where \" . $this->tab_name_index[$table_name] . '=?';\n\t\t\t\t\t\t$res = $adb->pquery($sql, array($this->id));\n\t\t\t\t\t\t$pick_val = $adb->query_result($res, 0, $columname);\n\t\t\t\t\t\t$fldvalue = $pick_val;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$fldvalue = $this->column_fields[$fieldname];\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == 33 || $uitype == 3313 || $uitype == 3314 || $uitype == 1024 || $uitype == 1025) {\n\t\t\t\t\tif (empty($this->column_fields[$fieldname])) {\n\t\t\t\t\t\t$fldvalue = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!is_array($this->column_fields[$fieldname])) {\n\t\t\t\t\t\t\t$this->column_fields[$fieldname] = array_map('trim', explode('|##|', $this->column_fields[$fieldname]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$sql = 'select columnname,tablename from vtiger_field where tabid=? and fieldname=?';\n\t\t\t\t\t\t$res = $adb->pquery($sql, array($tabid,$fieldname));\n\t\t\t\t\t\t$colj=$adb->query_result($res, 0, 0);\n\t\t\t\t\t\t$tabj = $adb->query_result($res, 0, 1);\n\t\t\t\t\t\t$sql1=\"select $colj from $tabj where \" . $this->tab_name_index[$tabj] . '=?';\n\t\t\t\t\t\t$res = $adb->pquery($sql1, array($this->id));\n\t\t\t\t\t\t$vlera=$adb->query_result($res, 0, $colj);\n\t\t\t\t\t\tif (empty($vlera)) {\n\t\t\t\t\t\t\t$currentvalues = array();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$currentvalues = array_map('trim', explode('|##|', decode_html($vlera)));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$selectedvalues = $this->column_fields[$fieldname];\n\t\t\t\t\t\tif ($uitype == 3313 || $uitype == 3314) {\n\t\t\t\t\t\t\t$uservalues = getAllowedPicklistModules();\n\t\t\t\t\t\t} elseif ($uitype == 1025) {\n\t\t\t\t\t\t\t$uservalues = $currentvalues;\n\t\t\t\t\t\t} elseif ($uitype == 1024) {\n\t\t\t\t\t\t\t$roleid = $current_user->roleid;\n\t\t\t\t\t\t\t$subrole = getRoleSubordinates($roleid);\n\t\t\t\t\t\t\t$uservalues = array_merge($subrole, array($roleid));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$roleid=$current_user->roleid;\n\t\t\t\t\t\t\t$uservalues = getAssignedPicklistValues($fieldname, $roleid, $adb);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$vek=array_unique(array_merge(array_diff($currentvalues, $uservalues), $selectedvalues));\n\t\t\t\t\t\t$fldvalue = implode(Field_Metadata::MULTIPICKLIST_SEPARATOR, $vek);\n\t\t\t\t\t\tif ($uitype == 3313 || $uitype == 3314) {\n\t\t\t\t\t\t\t// this value cannot be over 1010 characters if it has an index, so we cut it at that length always\n\t\t\t\t\t\t\t$fldvaluecut = substr($fldvalue, 0, 1010);\n\t\t\t\t\t\t\tif ($fldvalue!=$fldvaluecut) {\n\t\t\t\t\t\t\t\t$fldvalue = substr($fldvaluecut, 0, strrpos($fldvaluecut, Field_Metadata::MULTIPICKLIST_SEPARATOR));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == 5 || $uitype == 6 || $uitype == 23) {\n\t\t\t\t\t//Added to avoid function call getDBInsertDateValue in ajax save\n\t\t\t\t\tif (isset($current_user->date_format) && !$ajaxSave) {\n\t\t\t\t\t\t$fldvalue = getValidDBInsertDateValue($this->column_fields[$fieldname]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$fldvalue = $this->column_fields[$fieldname];\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == 14 && empty($this->column_fields[$fieldname])) {\n\t\t\t\t\t$fldvalue = null;\n\t\t\t\t} elseif ($uitype == 50) {\n\t\t\t\t\t$timefmt = '';\n\t\t\t\t\tif (!empty($this->column_fields[$fieldname]) && strlen($this->column_fields[$fieldname])>16) {\n\t\t\t\t\t\t$seconds = substr($this->column_fields[$fieldname], -2);\n\t\t\t\t\t\tif (!is_numeric($seconds)) {\n\t\t\t\t\t\t\t$timefmt = $seconds;\n\t\t\t\t\t\t\t$this->column_fields[$fieldname] = substr($this->column_fields[$fieldname], 0, 16);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (isset($current_user->date_format) && !$ajaxSave) {\n\t\t\t\t\t\t$fldvalue = getValidDBInsertDateTimeValue($this->column_fields[$fieldname]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$fldvalue = $this->column_fields[$fieldname];\n\t\t\t\t\t}\n\t\t\t\t\tif (empty($fldvalue)) {\n\t\t\t\t\t\t$fldvalue = null;\n\t\t\t\t\t}\n\t\t\t\t\tif ($fldvalue != null && !$ajaxSave) {\n\t\t\t\t\t\tif (isset($_REQUEST['timefmt_' . $fieldname])) {\n\t\t\t\t\t\t\t$timefmt = vtlib_purify($_REQUEST['timefmt_' . $fieldname]);\n\t\t\t\t\t\t\tunset($_REQUEST['timefmt_' . $fieldname]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$fldvalue = DateTimeField::formatDatebaseTimeString($fldvalue, $timefmt);\n\t\t\t\t\t\t$this->column_fields[$fieldname] = $fldvalue;\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == 26) {\n\t\t\t\t\tif (empty($this->column_fields[$fieldname])) {\n\t\t\t\t\t\t$fldvalue = 1; //the documents will stored in default folder\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$fldvalue = $this->column_fields[$fieldname];\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == 28) {\n\t\t\t\t\tif ($this->column_fields[$fieldname] == null) {\n\t\t\t\t\t\t$fileQuery = $adb->pquery('SELECT filename from vtiger_notes WHERE notesid=?', array($this->id));\n\t\t\t\t\t\t$fldvalue = null;\n\t\t\t\t\t\tif (isset($fileQuery)) {\n\t\t\t\t\t\t\t$rowCount = $adb->num_rows($fileQuery);\n\t\t\t\t\t\t\tif ($rowCount > 0) {\n\t\t\t\t\t\t\t\t$fldvalue = $adb->query_result($fileQuery, 0, 'filename');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$fldvalue = $this->column_fields[$fieldname];\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == 8) {\n\t\t\t\t\t$this->column_fields[$fieldname] = rtrim($this->column_fields[$fieldname], ',');\n\t\t\t\t\t$ids = explode(',', $this->column_fields[$fieldname]);\n\t\t\t\t\t$fldvalue = json_encode($ids);\n\t\t\t\t} elseif ($uitype == 12) {\n\t\t\t\t\t// Bulk Save Mode: Consider the FROM email address as specified, if not lookup\n\t\t\t\t\t$fldvalue = $this->column_fields[$fieldname];\n\t\t\t\t\tif (empty($fldvalue)) {\n\t\t\t\t\t\t$query = 'SELECT email1 FROM vtiger_users WHERE id=?';\n\t\t\t\t\t\t$res = $adb->pquery($query, array($current_user->id));\n\t\t\t\t\t\t$rows = $adb->num_rows($res);\n\t\t\t\t\t\tif ($rows > 0) {\n\t\t\t\t\t\t\t$fldvalue = $adb->query_result($res, 0, 'email1');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == 13) {\n\t\t\t\t\t$fldvalue = filter_var($this->column_fields[$fieldname], FILTER_SANITIZE_EMAIL);\n\t\t\t\t} elseif (($uitype == 72 || $uitype == 7 || $uitype == 9) && !$ajaxSave) {\n\t\t\t\t\t// Some of the currency fields like Unit Price, Total, Sub-total and normal numbers do not need currency conversion during save\n\t\t\t\t\t$fldvalue = CurrencyField::convertToDBFormat($this->column_fields[$fieldname], null, true);\n\t\t\t\t\tif ($insertion_mode == 'edit') {\n\t\t\t\t\t\t$fldvalue = $this->adjustCurrencyField($fieldname, $fldvalue, $tabid);\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == 71 && !$ajaxSave) {\n\t\t\t\t\t$fldvalue = CurrencyField::convertToDBFormat($this->column_fields[$fieldname]);\n\t\t\t\t\tif ($insertion_mode == 'edit') {\n\t\t\t\t\t\t$fldvalue = $this->adjustCurrencyField($fieldname, $fldvalue, $tabid);\n\t\t\t\t\t}\n\t\t\t\t} elseif ($uitype == '69m' || $uitype == '69') {\n\t\t\t\t\t$fldvalue = urldecode($this->column_fields[$fieldname]);\n\t\t\t\t} else {\n\t\t\t\t\t$fldvalue = $this->column_fields[$fieldname];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$fldvalue = '';\n\t\t\t}\n\t\t\tif ($fldvalue == '') {\n\t\t\t\t$fldvalue = $this->get_column_value($columname, $fldvalue, $fieldname, $uitype, $datatype);\n\t\t\t}\n\n\t\t\tif ($insertion_mode == 'edit') {\n\t\t\t\tif ($table_name != 'vtiger_ticketcomments' && $uitype != 4) {\n\t\t\t\t\t$update[] = $columname . '=?';\n\t\t\t\t\t$update_params[] = $fldvalue;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$column[] = $columname;\n\t\t\t\t$value[] = $fldvalue;\n\t\t\t}\n\t\t}\n\t\t$mtime = $adb->formatDate(date('Y-m-d H:i:s'), true);\n\t\tif ($this->denormalized && $table_name == $this->crmentityTable) {\n\t\t\tif ($insertion_mode == 'edit') {\n\t\t\t\tif (!empty($this->column_fields['cbuuid'])) {\n\t\t\t\t\t$update[] = 'cbuuid=?';\n\t\t\t\t\t$update_params[] = $this->column_fields['cbuuid'];\n\t\t\t\t}\n\t\t\t\tif (!in_array('modifiedtime=?', $update)) {\n\t\t\t\t\t$update[] = 'modifiedtime=?';\n\t\t\t\t\t$update_params[] = $mtime;\n\t\t\t\t}\n\t\t\t\tif (!in_array('modifiedby=?', $update)) {\n\t\t\t\t\t$update[] = 'modifiedby=?';\n\t\t\t\t\t$update_params[] = $current_user->id;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$_REQUEST['currentid'] = $this->id;\n\t\t\t\t$this->column_fields['record_id'] = $this->id;\n\t\t\t\t$this->column_fields['record_module'] = $module;\n\t\t\t\t$this->column_fields['cbuuid'] = (empty($this->column_fields['cbuuid']) ? $this->getUUID() : $this->column_fields['cbuuid']);\n\t\t\t\tif (!in_array('crmid', $column)) {\n\t\t\t\t\t$column[] = 'crmid';\n\t\t\t\t\t$value[] = $this->id;\n\t\t\t\t}\n\t\t\t\tif (!in_array('setype', $column)) {\n\t\t\t\t\t$column[] = 'setype';\n\t\t\t\t\t$value[] = $module;\n\t\t\t\t}\n\t\t\t\tif (!in_array('cbuuid', $column)) {\n\t\t\t\t\t$column[] = 'cbuuid';\n\t\t\t\t\t$value[] = $this->column_fields['cbuuid'];\n\t\t\t\t}\n\t\t\t\tif (!in_array('createdtime', $column)) {\n\t\t\t\t\t$column[] = 'createdtime';\n\t\t\t\t\t$value[] =$this->column_fields['createdtime'];\n\t\t\t\t}\n\t\t\t\tif (!in_array('modifiedtime', $column)) {\n\t\t\t\t\t$column[] = 'modifiedtime';\n\t\t\t\t\t$value[] =$mtime;\n\t\t\t\t}\n\t\t\t\tif (!in_array('smcreatorid', $column)) {\n\t\t\t\t\t$column[] = 'smcreatorid';\n\t\t\t\t\t$value[] =$this->column_fields['created_user_id'];\n\t\t\t\t}\n\t\t\t\tif (!in_array('modifiedby', $column)) {\n\t\t\t\t\t$column[] = 'modifiedby';\n\t\t\t\t\t$value[] =$current_user->id;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$rdo = true;\n\t\tif ($insertion_mode == 'edit') {\n\t\t\t// If update is empty the query fails\n\t\t\tif (!empty($update)) {\n\t\t\t\t$sql1 = \"update $table_name set \" . implode(',', $update) . ' where ' . $this->tab_name_index[$table_name] . '=?';\n\t\t\t\t$update_params[] = $this->id;\n\t\t\t\t$rdo = $adb->pquery($sql1, $update_params);\n\t\t\t\tif ($rdo) {\n\t\t\t\t\t$adb->pquery(\n\t\t\t\t\t\t'UPDATE vtiger_crmobject set smownerid=?,modifiedtime=? WHERE crmid=?',\n\t\t\t\t\t\tarray($this->column_fields['assigned_user_id'], $mtime, $this->id)\n\t\t\t\t\t);\n\t\t\t\t\tif (!empty($this->column_fields['cbuuid'])) {\n\t\t\t\t\t\t$adb->pquery('UPDATE vtiger_crmobject set cbuuid=? WHERE crmid=?', array($this->column_fields['cbuuid'], $this->id));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$sql1 = \"insert into $table_name(\" . implode(',', $column) . ') values(' . generateQuestionMarks($value) . ')';\n\t\t\t$rdo = $adb->pquery($sql1, $value);\n\t\t\tif ($rdo) {\n\t\t\t\t$this->column_fields['cbuuid'] = (empty($this->column_fields['cbuuid']) ? $this->getUUID() : $this->column_fields['cbuuid']);\n\t\t\t\tif ($table_name == $this->crmentityTable && $this->denormalized) {\n\t\t\t\t\t$adb->pquery(\n\t\t\t\t\t\t'INSERT IGNORE INTO vtiger_crmobject (crmid,deleted,setype,smownerid,modifiedtime,cbuuid) values (?,0,?,?,?,?)',\n\t\t\t\t\t\tarray($this->id, $module, $this->column_fields['assigned_user_id'], $this->column_fields['modifiedtime'], $this->column_fields['cbuuid'])\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($rdo===false) {\n\t\t\t$log->fatal($adb->getErrorMsg());\n\t\t}\n\t}\n\n\t/** Function to retrieve maximum decimal values of currency field on save\n\t * @param string currency field name\n\t * @param float currency value they want to save\n\t * @param integer tabID of the module the field is on\n\t * @return float field value from database with maximum decimals if it is the same as value being saved\n\t */\n\tpublic function adjustCurrencyField($fieldname, $fldvalue, $tabid) {\n\t\tglobal $adb, $log, $current_user;\n\t\t$log->debug(\"> adjustCurrencyField $fieldname,$fldvalue\");\n\t\tif (isset(self::$dbvalues[$fieldname])) {\n\t\t\t$dbvalue = self::$dbvalues[$fieldname];\n\t\t} else {\n\t\t\t$dbvals = $result = array();\n\t\t\tforeach ($this->tab_name_index as $table_name => $index) {\n\t\t\t\t$result = $adb->pquery(\"select * from $table_name where $index=?\", array($this->id));\n\t\t\t\tif ($result && $adb->num_rows($result)>0) {\n\t\t\t\t\t$flds = $adb->fetch_array($result);\n\t\t\t\t\t$dbvals = array_merge($dbvals, $flds);\n\t\t\t\t}\n\t\t\t}\n\t\t\tself::$dbvalues = $dbvals;\n\t\t\t$dbvalue = empty(self::$dbvalues[$fieldname]) ? 0 : self::$dbvalues[$fieldname];\n\t\t\t$fldrs = $adb->pquery(\n\t\t\t\t'select fieldname,typeofdata from vtiger_field where vtiger_field.uitype in (7,9,71,72) and vtiger_field.tabid=?',\n\t\t\t\tarray($tabid)\n\t\t\t);\n\t\t\twhile ($fldinf = $adb->fetch_array($fldrs)) {\n\t\t\t\tself::$todvalues[$fldinf['fieldname']] = $fldinf['typeofdata'];\n\t\t\t}\n\t\t}\n\t\t$typeofdata = self::$todvalues[$fieldname];\n\t\t$decimals = CurrencyField::getDecimalsFromTypeOfData($typeofdata);\n\t\tif (round((float)$dbvalue, min($decimals, $current_user->no_of_currency_decimals))==$fldvalue) {\n\t\t\t$fldvalue = $dbvalue;\n\t\t}\n\t\t$log->debug('< adjustCurrencyField '.$fldvalue);\n\t\treturn $fldvalue;\n\t}\n\n\t/** Function to delete a record in the specifed table\n\t * @param string table name\n\t * The function will delete a record. The id is obtained from the class variable $this->id and the columnname got from $this->tab_name_index[$table_name]\n\t */\n\tpublic function deleteRelation($table_name) {\n\t\tglobal $adb;\n\t\t$check_query = \"select * from $table_name where \" . $this->tab_name_index[$table_name] . '=?';\n\t\t$check_result = $adb->pquery($check_query, array($this->id));\n\t\t$num_rows = $adb->num_rows($check_result);\n\n\t\tif ($num_rows == 1) {\n\t\t\t$del_query = \"DELETE from $table_name where \" . $this->tab_name_index[$table_name] . '=?';\n\t\t\t$adb->pquery($del_query, array($this->id));\n\t\t}\n\t}\n\n\t/** Function to attachment filename of the given entity\n\t * @param integer crm ID\n\t * The function will get the attachmentsid for the given entityid from vtiger_seattachmentsrel table and get the attachmentsname from vtiger_attachments table\n\t * returns the 'filename'\n\t */\n\tpublic function getOldFileName($notesid) {\n\t\tglobal $adb;\n\t\t$result = $adb->pquery('select * from vtiger_seattachmentsrel where crmid=?', array($notesid));\n\t\t$noofrows = $adb->num_rows($result);\n\t\tif ($noofrows != 0) {\n\t\t\t$attachmentid = $adb->query_result($result, 0, 'attachmentsid');\n\t\t}\n\t\tif ($attachmentid != '') {\n\t\t\t$rs = $adb->pquery('select * from vtiger_attachments where attachmentsid=?', array($attachmentid));\n\t\t\t$filename = $adb->query_result($rs, 0, 'name');\n\t\t}\n\t\treturn $filename;\n\t}\n\n\t/** Function to retrieve the information of the given recordid\n\t * @param integer Id\n\t * @param string module\n\t * This function retrieves the information from the database and sets the value in the class column_fields array\n\t */\n\tpublic function retrieve_entity_info($record, $module, $deleted = false, $from_wf = false, $throwexception = false) {\n\t\tglobal $adb, $app_strings, $current_user;\n\t\t$result = array();\n\n\t\t//Here we check if user can see this record.\n\t\tif (!$from_wf && isPermitted($module, 'DetailView', $record) != 'yes') {\n\t\t\t$this->column_fields['record_id'] = $record;\n\t\t\t$this->column_fields['record_module'] = $module;\n\t\t\treturn;\n\t\t}\n\n\t\tforeach ($this->tab_name_index as $table_name => $index) {\n\t\t\t$result[$table_name] = $adb->pquery(\"select * from $table_name where $index=?\", array($record));\n\t\t}\n\t\t$isRecordDeleted = 0;\n\t\tif (!in_array($module, $this->specialModules)) {\n\t\t\t$isRecordDeleted = $adb->query_result($result[$this->crmentityTable], 0, 'deleted');\n\t\t}\n\t\tif ($isRecordDeleted !== 0 && $isRecordDeleted !== '0' && !$deleted) {\n\t\t\tif ($throwexception) {\n\t\t\t\tthrow new InvalidArgumentException($app_strings['LBL_RECORD_DELETE'].\" $module: $record\", 1);\n\t\t\t} else {\n\t\t\t\trequire_once 'Smarty_setup.php';\n\t\t\t\t$smarty = new vtigerCRM_Smarty();\n\t\t\t\t$smarty->assign('APP', $app_strings);\n\t\t\t\t$smarty->assign('OPERATION_MESSAGE', $app_strings['LBL_RECORD_DELETE'].\" $module: $record\");\n\t\t\t\t$smarty->display('modules/Vtiger/OperationNotPermitted.tpl');\n\t\t\t\tdie();\n\t\t\t}\n\t\t}\n\n\t\t/* Block access to empty record */\n\t\tif (isset($this->table_name)) {\n\t\t\t$mod_index_col = $this->tab_name_index[$this->table_name];\n\t\t\tif ($adb->query_result($result[$this->table_name], 0, $mod_index_col) == '') {\n\t\t\t\tif ($throwexception) {\n\t\t\t\t\tthrow new InvalidArgumentException($app_strings['LBL_RECORD_NOT_FOUND'], 1);\n\t\t\t\t} else {\n\t\t\t\t\trequire_once 'Smarty_setup.php';\n\t\t\t\t\t$smarty = new vtigerCRM_Smarty();\n\t\t\t\t\t$smarty->assign('APP', $app_strings);\n\t\t\t\t\t$smarty->assign('OPERATION_MESSAGE', $app_strings['LBL_RECORD_NOT_FOUND']);\n\t\t\t\t\t$smarty->display('modules/Vtiger/OperationNotPermitted.tpl');\n\t\t\t\t\tif (GlobalVariable::getVariable('Debug_Record_Not_Found', false)) {\n\t\t\t\t\t\techo '<div class=\"slds-m-around_x-large\">';\n\t\t\t\t\t\techo 'Looking for ' . $this->table_name . '.' . $mod_index_col . ' in <br>' . print_r($result[$this->table_name]->sql, true);\n\t\t\t\t\t\techo '<pre>';\n\t\t\t\t\t\tdebug_print_backtrace();\n\t\t\t\t\t\techo '</pre></div>';\n\t\t\t\t\t}\n\t\t\t\t\tdie();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Lookup in cache for information\n\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module);\n\n\t\tif ($cachedModuleFields === false) {\n\t\t\t$tabid = getTabid($module);\n\n\t\t\t// Let us pick up all the fields first so that we can cache information\n\t\t\t$sql1 = 'SELECT fieldname, fieldid, fieldlabel, columnname, tablename, uitype, typeofdata, presence, defaultvalue, generatedtype, displaytype FROM vtiger_field WHERE tabid=?';\n\n\t\t\t// NOTE: Need to skip in-active fields which we will be done later.\n\t\t\t$result1 = $adb->pquery($sql1, array($tabid));\n\t\t\t$noofrows = $adb->num_rows($result1);\n\n\t\t\tif ($noofrows) {\n\t\t\t\twhile ($resultrow = $adb->fetch_array($result1)) {\n\t\t\t\t\t// Update information to cache for re-use\n\t\t\t\t\tVTCacheUtils::updateFieldInfo(\n\t\t\t\t\t\t$tabid,\n\t\t\t\t\t\t$resultrow['fieldname'],\n\t\t\t\t\t\t$resultrow['fieldid'],\n\t\t\t\t\t\t$resultrow['fieldlabel'],\n\t\t\t\t\t\t$resultrow['columnname'],\n\t\t\t\t\t\t$resultrow['tablename'],\n\t\t\t\t\t\t$resultrow['uitype'],\n\t\t\t\t\t\t$resultrow['typeofdata'],\n\t\t\t\t\t\t$resultrow['presence'],\n\t\t\t\t\t\t$resultrow['defaultvalue'],\n\t\t\t\t\t\t$resultrow['generatedtype'],\n\t\t\t\t\t\t$resultrow['displaytype']\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Get only active field information\n\t\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module);\n\t\t}\n\n\t\tif ($cachedModuleFields) {\n\t\t\tforeach ($cachedModuleFields as $fieldname => $fieldinfo) {\n\t\t\t\t$fieldcolname = $fieldinfo['columnname'];\n\t\t\t\t$tablename = $fieldinfo['tablename'];\n\t\t\t\t$fieldname = $fieldinfo['fieldname'];\n\t\t\t\t//Here we check if user has permissions to access this field.\n\t\t\t\t//If it is allowed then it will get the actual value, otherwise it gets an empty string.\n\t\t\t\tif ((!isset($from_wf) || !$from_wf) && getFieldVisibilityPermission($module, $current_user->id, $fieldname) != '0') {\n\t\t\t\t\t$this->column_fields[$fieldname] = '';\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// To avoid ADODB execption pick the entries that are in $tablename\n\t\t\t\tif (isset($result[$tablename])) {\n\t\t\t\t\t$fld_value = $adb->query_result($result[$tablename], 0, $fieldcolname);\n\t\t\t\t} else {\n\t\t\t\t\t$adb->println(\"There is no entry for this entity $record ($module) in the table $tablename\");\n\t\t\t\t\t$fld_value = '';\n\t\t\t\t}\n\t\t\t\t$this->column_fields[$fieldname] = $fld_value;\n\t\t\t}\n\t\t}\n\t\tif ($module == 'Users') {\n\t\t\tfor ($i = 0; $i < $noofrows; $i++) {\n\t\t\t\t$fieldcolname = $adb->query_result($result1, $i, 'columnname');\n\t\t\t\t$tablename = $adb->query_result($result1, $i, 'tablename');\n\t\t\t\t$fieldname = $adb->query_result($result1, $i, 'fieldname');\n\t\t\t\t$fld_value = $adb->query_result($result[$tablename], 0, $fieldcolname);\n\t\t\t\t$this->$fieldname = $fld_value;\n\t\t\t}\n\t\t}\n\n\t\t$this->id = $record;\n\t\t$this->column_fields['record_id'] = $record;\n\t\t$this->column_fields['record_module'] = $module;\n\t\tif (!in_array($module, $this->specialModules)) {\n\t\t\t$this->column_fields['cbuuid'] = $adb->query_result($result[$this->crmentityTable], 0, 'cbuuid');\n\t\t}\n\t}\n\n\t/** Function to retrieve the information of the given recordidS\n\t * @param array of CRMIds\n\t * @param string module\n\t * This function retrieves the information from the database and sets the value in the class fetched_records array\n\t */\n\tpublic function retrieve_entities_info($records, $module, $from_wf = false) {\n\t\tglobal $adb, $current_user;\n\t\t$result = array();\n\t\t$this->fetched_records = array();\n\t\tforeach ($this->tab_name_index as $table_name => $index) {\n\t\t\t$result[$table_name] = $adb->pquery(\"select * from $table_name where $index IN (\" . generateQuestionMarks($records) . ') ', $records);\n\t\t}\n\n\t\tif (isset($this->table_name)) {\n\t\t\t$this->tab_name_index[$this->table_name];\n\t\t}\n\n\t\t// Lookup in cache for information\n\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module);\n\n\t\tif ($cachedModuleFields === false) {\n\t\t\t$tabid = getTabid($module);\n\n\t\t\t// Let us pick up all the fields first so that we can cache information\n\t\t\t$sql1 = 'SELECT fieldname, fieldid, fieldlabel, columnname, tablename, uitype, typeofdata, presence, defaultvalue, generatedtype, displaytype FROM vtiger_field WHERE tabid=?';\n\n\t\t\t// NOTE: Need to skip in-active fields which we will be done later.\n\t\t\t$result1 = $adb->pquery($sql1, array($tabid));\n\t\t\t$noofrows = $adb->num_rows($result1);\n\n\t\t\tif ($noofrows) {\n\t\t\t\twhile ($resultrow = $adb->fetch_array($result1)) {\n\t\t\t\t\t// Update information to cache for re-use\n\t\t\t\t\tVTCacheUtils::updateFieldInfo(\n\t\t\t\t\t\t$tabid,\n\t\t\t\t\t\t$resultrow['fieldname'],\n\t\t\t\t\t\t$resultrow['fieldid'],\n\t\t\t\t\t\t$resultrow['fieldlabel'],\n\t\t\t\t\t\t$resultrow['columnname'],\n\t\t\t\t\t\t$resultrow['tablename'],\n\t\t\t\t\t\t$resultrow['uitype'],\n\t\t\t\t\t\t$resultrow['typeofdata'],\n\t\t\t\t\t\t$resultrow['presence'],\n\t\t\t\t\t\t$resultrow['defaultvalue'],\n\t\t\t\t\t\t$resultrow['generatedtype'],\n\t\t\t\t\t\t$resultrow['displaytype']\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Get only active field information\n\t\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module);\n\t\t}\n\n\t\tif ($cachedModuleFields) {\n\t\t\t$cachedIDPermissions = array();\n\t\t\tforeach ($cachedModuleFields as $fieldname => $fieldinfo) {\n\t\t\t\t$fieldcolname = $fieldinfo['columnname'];\n\t\t\t\t$tablename = $fieldinfo['tablename'];\n\t\t\t\t$fieldname = $fieldinfo['fieldname'];\n\t\t\t\t//Here we check if user has permissions to access this field.\n\t\t\t\t//If it is allowed then it will get the actual value, otherwise it gets an empty string.\n\t\t\t\t$setittoempty = false;\n\t\t\t\tif (!$from_wf) {\n\t\t\t\t\t$setittoempty = (getFieldVisibilityPermission($module, $current_user->id, $fieldname) != '0');\n\t\t\t\t}\n\t\t\t\t// To avoid ADODB execption pick the entries that are in $tablename\n\t\t\t\tif (isset($result[$tablename]) && !$setittoempty) {\n\t\t\t\t\tfor ($cn = 0; $cn < $adb->num_rows($result[$tablename]); $cn++) {\n\t\t\t\t\t\tif ($module=='Users') {\n\t\t\t\t\t\t\t$isRecordDeleted = $adb->query_result($result['vtiger_users'], $cn, 'deleted');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$isRecordDeleted = $adb->query_result($result[$this->crmentityTable], $cn, 'deleted');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ($isRecordDeleted==0) {\n\t\t\t\t\t\t\tif ($module=='Users') {\n\t\t\t\t\t\t\t\t$tempid = $adb->query_result($result['vtiger_users'], $cn, 'id');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$tempid = $adb->query_result($result[$this->crmentityTable], $cn, 'crmid');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!$from_wf && !isset($cachedIDPermissions[$tempid])) {\n\t\t\t\t\t\t\t\t$cachedIDPermissions[$tempid] = isPermitted($module, 'DetailView', $tempid);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//Here we check if user can see this record.\n\t\t\t\t\t\t\tif (!$from_wf && $cachedIDPermissions[$tempid] != 'yes') {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$fld_value = $adb->query_result($result[$tablename], $cn, $fieldcolname);\n\t\t\t\t\t\t\t$this->fetched_records[$tempid][$fieldname] = $fld_value;\n\t\t\t\t\t\t\tif (!isset($this->fetched_records[$tempid]['record_id'])) {\n\t\t\t\t\t\t\t\t$this->fetched_records[$tempid]['record_id'] = $tempid;\n\t\t\t\t\t\t\t\t$this->fetched_records[$tempid]['record_module'] = $module;\n\t\t\t\t\t\t\t\tif ($module=='Users') {\n\t\t\t\t\t\t\t\t\t$this->fetched_records[$tempid]['cbuuid'] = '';\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$this->fetched_records[$tempid]['cbuuid'] = $adb->query_result($result[$this->crmentityTable], $cn, 'cbuuid');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} elseif (!empty($result[$this->crmentityTable])) {\n\t\t\t\t\tfor ($cn = 0; $cn < $adb->num_rows($result[$this->crmentityTable]); $cn++) {\n\t\t\t\t\t\t$isRecordDeleted = $adb->query_result($result[$this->crmentityTable], $cn, 'deleted');\n\t\t\t\t\t\tif ($isRecordDeleted==0) {\n\t\t\t\t\t\t\t$tempid = $adb->query_result($result[$this->crmentityTable], $cn, 'crmid');\n\t\t\t\t\t\t\tif (!$from_wf && !isset($cachedIDPermissions[$tempid])) {\n\t\t\t\t\t\t\t\t$cachedIDPermissions[$tempid] = isPermitted($module, 'DetailView', $tempid);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//Here we check if user can see this record.\n\t\t\t\t\t\t\tif (!$from_wf && $cachedIDPermissions[$tempid] != 'yes') {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$tempid = $adb->query_result($result[$this->crmentityTable], $cn, 'crmid');\n\t\t\t\t\t\t\t$fld_value = '';\n\t\t\t\t\t\t\t$this->fetched_records[$tempid][$fieldname] = $fld_value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Validate values trying to be saved.\n\t * @param array $_REQUEST input values. Note: column_fields array is already loaded\n\t * @return array\n\t *   saveerror: true if error false if not\n\t *   errormessage: message to return to user if error, empty otherwise\n\t *   error_action: action to redirect to inside the same module in case of error. if redirected to EditView (default action)\n\t *                 all values introduced by the user will be preloaded\n\t *   returnvalues: a urlencoded string of values to send to the receiving page. may be empty\n\t */\n\tpublic function preSaveCheck($request) {\n\t\tlist($request,$void,$saveerror,$errormessage,$error_action,$returnvalues) =\n\t\t\tcbEventHandler::do_filter('corebos.filter.preSaveCheck', array($request,$this,false,'','',''));\n\t\tif (!$saveerror && !empty($_FILES)) {\n\t\t\tforeach ($_FILES as $file_details) {\n\t\t\t\tif (validateImageFile($file_details) == 'true' && !validateImageContents($file_details['tmp_name'])) {\n\t\t\t\t\t$saveerror = true;\n\t\t\t\t\t$errormessage = getTranslatedString('LBL_IMAGESECURITY_ERROR');\n\t\t\t\t\t$error_action = 'EditView';\n\t\t\t\t\t$returnvalues = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn array($saveerror,$errormessage,$error_action,$returnvalues);\n\t}\n\n\t/** Validate record trying to be deleted.\n\t * @return array\n\t *   delerror: true if error false if not\n\t *   errormessage: message to return to user if error, empty otherwise\n\t */\n\tpublic function preDeleteCheck() {\n\t\tlist($void,$delerror,$errormessage) = cbEventHandler::do_filter('corebos.filter.preDeleteCheck', array($this,false,''));\n\t\treturn array($delerror,$errormessage);\n\t}\n\n\t/** Check launched when entering Edit View, called after creating object and loading variables. Will be empty on create\n\t * @param array $_REQUEST input values. Note: column_fields array is already loaded\n\t * @param object smarty template object in order to load variables for output\n\t * @return void\n\t */\n\tpublic function preEditCheck($request, $smarty) {\n\t\tlist($request,$smarty,$void) = cbEventHandler::do_filter('corebos.filter.preEditCheck', array($request,$smarty,$this));\n\t\treturn '';\n\t}\n\n\t/** Check launched when entering full Record View, called after creating object and loading variables.\n\t * @param array $_REQUEST input values. Note: column_fields array is already loaded\n\t * @param object smarty template object in order to load variables for output\n\t * @return void\n\t */\n\tpublic function preViewCheck($request, $smarty) {\n\t\tlist($request,$smarty,$void) = cbEventHandler::do_filter('corebos.filter.preViewCheck', array($request,$smarty,$this));\n\t\treturn '';\n\t}\n\n\t/** Function to saves the values in all the tables mentioned in the class variable $tab_name for the specified module\n\t * @param string module\n\t */\n\tpublic function save($module_name) {\n\t\tglobal $current_user, $adb;\n\t\tif (!empty($_REQUEST['FILTERFIELDSMAP'])) {\n\t\t\t$bmapname = vtlib_purify($_REQUEST['FILTERFIELDSMAP']);\n\t\t\t$cbMapid = GlobalVariable::getVariable('BusinessMapping_'.$bmapname, cbMap::getMapIdByName($bmapname));\n\t\t\tif ($cbMapid) {\n\t\t\t\t$cbMap = cbMap::getMapByID($cbMapid);\n\t\t\t\t$mtype = $cbMap->column_fields['maptype'];\n\t\t\t\t$mdmap = $cbMap->$mtype();\n\t\t\t\t$targetmodule = $mdmap['targetmodule'];\n\t\t\t\t$targetfield = $mdmap['linkfields']['targetfield'];\n\t\t\t\tif ($targetmodule == $module_name) {\n\t\t\t\t\tif ($targetfield != '') {\n\t\t\t\t\t\t$MDCurrentRecord = coreBOS_Session::get('MDCurrentRecord');\n\t\t\t\t\t\t$this->column_fields[$targetfield] = $MDCurrentRecord;\n\t\t\t\t\t}\n\t\t\t\t\tif ($this->mode=='' && $mtype=='MasterDetailLayout' && !empty($mdmap['sortfield'])) {\n\t\t\t\t\t\t$qg = new QueryGenerator($mdmap['targetmodule'], $current_user);\n\t\t\t\t\t\t$qg->setFields([$mdmap['sortfield']]);\n\t\t\t\t\t\t$qg->addReferenceModuleFieldCondition(\n\t\t\t\t\t\t\t$mdmap['originmodule'],\n\t\t\t\t\t\t\t$mdmap['linkfields']['targetfield'],\n\t\t\t\t\t\t\t'id',\n\t\t\t\t\t\t\t$this->column_fields[$mdmap['linkfields']['targetfield']],\n\t\t\t\t\t\t\t'e',\n\t\t\t\t\t\t\tQueryGenerator::$AND\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$sql = $qg->getQuery(); // No conditions\n\t\t\t\t\t\tif (strpos($mdmap['sortfield'], '.')) {\n\t\t\t\t\t\t\t$maxsql = mkMaxQuery($sql, $mdmap['sortfield']);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$ftbl = getTableNameForField($mdmap['targetmodule'], $mdmap['sortfield']);\n\t\t\t\t\t\t\tif ($ftbl=='') {\n\t\t\t\t\t\t\t\t$maxsql = mkMaxQuery($sql, $mdmap['sortfield']);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$maxsql = mkMaxQuery($sql, $ftbl.'.'.$mdmap['sortfield']);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$rs = $adb->query($maxsql);\n\t\t\t\t\t\t$max = (int)$rs->fields['max'];\n\t\t\t\t\t\t$this->column_fields[$mdmap['sortfield']] = $max+1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!empty($mdmap['editfieldnames'])) {\n\t\t\t\t\t\t\t$stillindb = CRMEntity::getInstance($module_name);\n\t\t\t\t\t\t\t$stillindb->retrieve_entity_info($this->id, $module_name, false, true);\n\t\t\t\t\t\t\t$handler = vtws_getModuleHandlerFromName($module_name, $current_user);\n\t\t\t\t\t\t\t$meta = $handler->getMeta();\n\t\t\t\t\t\t\t$stillindb->column_fields = DataTransform::sanitizeRetrieveEntityInfo($stillindb->column_fields, $meta);\n\t\t\t\t\t\t\tforeach ($stillindb->column_fields as $fname => $fvalue) {\n\t\t\t\t\t\t\t\tif (!in_array($fname, $mdmap['editfieldnames'])) {\n\t\t\t\t\t\t\t\t\t$this->column_fields[$fname] = $fvalue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//Check if assigned_user_id is empty for assign the current user.\n\t\tif (empty($this->column_fields['assigned_user_id'])) {\n\t\t\tglobal $current_user;\n\t\t\t$_REQUEST['assigned_user_id'] = $current_user->id;\n\t\t\t$this->column_fields['assigned_user_id'] = $current_user->id;\n\t\t\t$_REQUEST['assigntype'] = 'U';\n\t\t}\n\t\t// get is duplicate from id if present and not set\n\t\tif (empty($this->column_fields['isduplicatedfromrecordid']) && !empty($_REQUEST['__cbisduplicatedfromrecordid'])) {\n\t\t\t$this->column_fields['isduplicatedfromrecordid'] = vtlib_purify($_REQUEST['__cbisduplicatedfromrecordid']);\n\t\t}\n\n\t\t//Event triggering code\n\t\trequire_once 'include/events/include.inc';\n\t\tglobal $adb;\n\n\t\t$em = new VTEventsManager($adb);\n\t\t// Initialize Event trigger cache\n\t\t$em->initTriggerCache();\n\t\t$entityData = VTEntityData::fromCRMEntity($this);\n\n\t\t$em->triggerEvent('vtiger.entity.beforesave.modifiable', $entityData);\n\t\t$em->triggerEvent('vtiger.entity.beforesave', $entityData);\n\t\t$em->triggerEvent('vtiger.entity.beforesave.final', $entityData);\n\t\t//Event triggering code ends\n\t\t//GS Save entity being called with the modulename as parameter\n\t\t$this->saveentity($module_name);\n\n\t\tif (isset($_REQUEST['WizardAction']) && $_REQUEST['WizardAction'] == 'duplicate') {\n\t\t\t$step = vtlib_purify($_REQUEST['WizardStep']) - 1;\n\t\t\tcoreBOS_Settings::setSetting('WizardRecords'.$current_user->id.'^'.$step, $this->id);\n\t\t}\n\n\t\t//Event triggering code\n\t\t$em->triggerEvent('vtiger.entity.aftersave.first', $entityData);\n\t\t$em->triggerEvent('vtiger.entity.aftersave', $entityData);\n\t\t$em->triggerEvent('vtiger.entity.aftersave.final', $entityData);\n\t\t//Event triggering code ends\n\t}\n\n\t/** Mark an item as deleted */\n\tpublic function mark_deleted($id) {\n\t\tglobal $current_user, $adb;\n\t\t$mtime = $adb->formatDate(date('Y-m-d H:i:s'), true);\n\t\t$adb->pquery(\n\t\t\t'UPDATE '.$this->crmentityTable.' set deleted=1,modifiedtime=?,modifiedby=? where crmid=?',\n\t\t\tarray($mtime, $current_user->id, $id),\n\t\t\ttrue,\n\t\t\t'Error marking record deleted: '\n\t\t);\n\t\t$adb->pquery('UPDATE vtiger_crmobject set deleted=1,modifiedtime=? WHERE crmid=?', array($mtime, $id));\n\t}\n\n\t/** Mark an item as undeleted */\n\tpublic function mark_undeleted($id) {\n\t\tglobal $adb;\n\t\t$adb->pquery('UPDATE '.$this->crmentityTable.' set deleted=0 where crmid=?', array($id));\n\t\t$adb->pquery('UPDATE vtiger_crmobject set deleted=0 WHERE crmid=?', array($id));\n\t}\n\n\t// this method is called during an import before inserting a bean\n\t// define an associative array called $special_fields\n\t// the keys are user defined, and don't directly map to the bean's vtiger_fields\n\t// the value is the method name within that bean that will do extra\n\t// processing for that vtiger_field. example: 'full_name'=>'get_names_from_full_name'\n\tpublic function process_special_fields() {\n\t\tforeach ($this->special_functions as $func_name) {\n\t\t\tif (method_exists($this, $func_name)) {\n\t\t\t\t$this->$func_name();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Function to check if the custom field table exists\n\t * @param string table name to check\n\t * @return boolean\n\t */\n\tpublic function checkIfCustomTableExists($tablename) {\n\t\tglobal $adb;\n\t\t$result = $adb->query('select 1 from '.$adb->sql_escape_string($tablename));\n\t\treturn $result && $adb->num_fields($result)>0;\n\t}\n\n\t/**\n\t * function to construct the query to fetch the custom vtiger_fields\n\t * return the query to fetch the custom vtiger_fields\n\t */\n\tpublic function constructCustomQueryAddendum($tablename, $module) {\n\t\tglobal $adb;\n\t\t$tabid = getTabid($module);\n\t\t$sql1 = 'select columnname,fieldlabel from vtiger_field where generatedtype=2 and tabid=? and vtiger_field.presence in (0,2)';\n\t\t$result = $adb->pquery($sql1, array($tabid));\n\t\t$numRows = $adb->num_rows($result);\n\t\t$sql3 = 'select ';\n\t\tfor ($i = 0; $i < $numRows; $i++) {\n\t\t\t$columnName = $adb->query_result($result, $i, 'columnname');\n\t\t\t$fieldlabel = $adb->query_result($result, $i, 'fieldlabel');\n\t\t\t//construct query as below\n\t\t\tif ($i == 0) {\n\t\t\t\t$sql3 .= $tablename . '.' . $columnName . \" '\" . $fieldlabel . \"'\";\n\t\t\t} else {\n\t\t\t\t$sql3 .= ', ' . $tablename . '.' . $columnName . \" '\" . $fieldlabel . \"'\";\n\t\t\t}\n\t\t}\n\t\tif ($numRows > 0) {\n\t\t\t$sql3 = $sql3 . ',';\n\t\t}\n\t\treturn $sql3;\n\t}\n\n\t/**\n\t * Track the viewing of a detail record.\n\t * @param integer user that is viewing the record\n\t * @param string module\n\t * @param integer record ID\n\t */\n\tpublic function track_view($user_id, $current_module, $id = '') {\n\t\t$tracker = new Tracker();\n\t\t$tracker->track_view($user_id, $current_module, $id, '');\n\t}\n\n\t/**\n\t * Function to get the column value of a field when the field value is empty ''\n\t * @param string column name for the field\n\t * @param string input value for the field taken from the User\n\t * @param string name of the Field\n\t * @param string UI type of the field\n\t * @return string column value of the field\n\t */\n\tpublic function get_column_value($columnname, $fldvalue, $fieldname, $uitype, $datatype = '') {\n\t\tglobal $log, $current_user;\n\t\t$log->debug(\"> get_column_value $columnname, $fldvalue, $fieldname, $uitype, $datatype\");\n\t\tif ($uitype==52 && $fldvalue=='') {\n\t\t\treturn $current_user->id;\n\t\t}\n\t\tif (is_uitype($uitype, '_date_') && $fldvalue == '') {\n\t\t\treturn null;\n\t\t}\n\t\tif ($datatype == 'I' || $datatype == 'N' || $datatype == 'NN' || $uitype == 10 || $uitype == 101) {\n\t\t\treturn 0;\n\t\t}\n\t\t$log->debug('< get_column_value');\n\t\treturn $fldvalue;\n\t}\n\n\t/**\n\t * Function to make change to column fields, depending on the current user's accessibility for the fields\n\t */\n\tpublic function apply_field_security() {\n\t\tglobal $current_user, $currentModule;\n\t\tforeach ($this->column_fields as $fieldname => $fieldvalue) {\n\t\t\t$reset_value = false;\n\t\t\tif (getFieldVisibilityPermission($currentModule, $current_user->id, $fieldname) != '0') {\n\t\t\t\t$reset_value = true;\n\t\t\t}\n\t\t\tif ($fieldname == 'record_id' || $fieldname == 'record_module') {\n\t\t\t\t$reset_value = false;\n\t\t\t}\n\t\t\tif ($reset_value) {\n\t\t\t\t$this->column_fields[$fieldname] = '';\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Function which will give the basic query to find duplicates\n\t */\n\tpublic function getDuplicatesQuery($module, $table_cols, $field_values, $ui_type_arr, $select_cols = '') {\n\t\tglobal $current_user, $adb;\n\t\t$customView = new CustomView($module);\n\t\t$viewid = $customView->getViewId($module);\n\t\t$queryGenerator = new QueryGenerator($module, $current_user);\n\t\ttry {\n\t\t\tif ($viewid != '0') {\n\t\t\t\t$queryGenerator->initForCustomViewById($viewid);\n\t\t\t} else {\n\t\t\t\t$queryGenerator->initForDefaultCustomView();\n\t\t\t}\n\t\t\t$list_query = $queryGenerator->getQuery();\n\t\t} catch (Exception $e) {\n\t\t\t$list_query = '';\n\t\t}\n\t\t$fromclause = explode('FROM', $list_query);\n\t\t$list_query = \"SELECT $this->table_name.$this->table_index as id FROM \".$fromclause[1];\n\t\t$tableName = strtolower(\"temp\".$module.$current_user->id);\n\t\t$adb->pquery(\"create temporary table IF NOT EXISTS $tableName (id int primary key) AS \" . $list_query, array());\n\t\t$adb->pquery(\"create temporary table IF NOT EXISTS $tableName\".'2 (id int primary key) AS ' . $list_query, array());\n\n\t\t$select_clause = 'SELECT '. $this->table_name .'.'.$this->table_index .' AS recordid, vtiger_users_last_import.deleted,'.$table_cols;\n\t\t$from_clause = \" FROM $this->table_name\";\n\t\t$from_clausesub = \" FROM $this->table_name\";\n\t\t$from_clause .= ' INNER JOIN '.$this->crmentityTableAlias.\" ON vtiger_crmentity.crmid = $this->table_name.$this->table_index\";\n\t\t$from_clausesub .= ' INNER JOIN '.$this->crmentityTableAlias.\" ON vtiger_crmentity.crmid = $this->table_name.$this->table_index\";\n\t\t// Consider custom table join as well.\n\t\tif (isset($this->customFieldTable)) {\n\t\t\t$from_clause.=' INNER JOIN '.$this->customFieldTable[0].' ON '.$this->customFieldTable[0].'.'.$this->customFieldTable[1].\"=$this->table_name.$this->table_index\";\n\t\t\t$from_clausesub.=' INNER JOIN '.$this->customFieldTable[0].' ON '.$this->customFieldTable[0].'.'.$this->customFieldTable[1].\"=$this->table_name.$this->table_index\";\n\t\t}\n\t\t$from_clause.=' INNER JOIN '.$tableName.' temptab ON temptab.id='.$this->table_name .'.'.$this->table_index;\n\t\t$from_clausesub.=' INNER JOIN '.$tableName.'2 temptab2 ON temptab2.id='.$this->table_name .'.'.$this->table_index;\n\n\t\t$from_clause .= ' LEFT JOIN vtiger_users ON vtiger_users.id='.$this->crmentityTable.'.smownerid\n\t\t\tLEFT JOIN vtiger_groups ON vtiger_groups.groupid='.$this->crmentityTable.'.smownerid';\n\t\t$from_clausesub .= ' LEFT JOIN vtiger_users ON vtiger_users.id='.$this->crmentityTable.'.smownerid\n\t\t\tLEFT JOIN vtiger_groups ON vtiger_groups.groupid='.$this->crmentityTable.'.smownerid';\n\n\t\t$where_clause = ' WHERE '.$this->crmentityTable.'.deleted = 0';\n\t\t$where_clause .= $this->getListViewSecurityParameter($module);\n\n\t\tif (isset($select_cols) && trim($select_cols) != '') {\n\t\t\t$sub_query = \"SELECT $select_cols FROM $this->table_name AS t INNER JOIN \".$this->crmentityTable.\" AS crm ON crm.crmid = t.\".$this->table_index;\n\t\t\t// Consider custom table join as well.\n\t\t\tif (isset($this->customFieldTable)) {\n\t\t\t\t$sub_query .= ' LEFT JOIN '.$this->customFieldTable[0].' tcf ON tcf.'.$this->customFieldTable[1].\" = t.$this->table_index\";\n\t\t\t}\n\t\t\t$sub_query .= \" WHERE crm.deleted=0 GROUP BY $select_cols HAVING COUNT(*)>1\";\n\t\t} else {\n\t\t\t$sub_query = \"SELECT $table_cols $from_clausesub $where_clause GROUP BY $table_cols HAVING COUNT(*)>1\";\n\t\t}\n\n\t\treturn $select_clause . $from_clause .\n\t\t\t' LEFT JOIN vtiger_users_last_import ON vtiger_users_last_import.bean_id=' . $this->table_name .'.'.$this->table_index .\n\t\t\t' INNER JOIN (' . $sub_query . ') AS temp ON '.get_on_clause($field_values, $ui_type_arr, $module) .\n\t\t\t$where_clause .\n\t\t\t\" ORDER BY $table_cols,\". $this->table_name .'.'.$this->table_index .' ASC';\n\t}\n\n\t/**\n\t * Return query to use based on given modulename, fieldname\n\t * Useful to handle specific case handling for Popup\n\t * $srcrecord could be empty\n\t */\n\tpublic function getQueryByModuleField($module, $fieldname, $srcrecord, $query = '') {\n\t\tglobal $adb;\n\t\t$thisModule = get_class($this);\n\t\t$bmapname = $thisModule.'_ListColumns';\n\t\t$cbMapid = GlobalVariable::getVariable('BusinessMapping_'.$bmapname, cbMap::getMapIdByName($bmapname));\n\t\tif ($cbMapid) {\n\t\t\t$cbMap = cbMap::getMapByID($cbMapid);\n\t\t\t$cbMapLC = $cbMap->ListColumns();\n\t\t\t$conditions = $cbMapLC->getConditionsPopup();\n\t\t\tif (!empty($conditions[$fieldname]) && json_decode($conditions[$fieldname]) == null) {\n\t\t\t\treturn $conditions[$fieldname];\n\t\t\t}\n\t\t\tif (!empty($conditions[$fieldname]) || !empty($conditions[$module.'::'.$thisModule])) {\n\t\t\t\t$fields = $cbMapLC->getSearchFieldsName();\n\t\t\t\t$wherepos = stripos($query, ' where ');\n\t\t\t\t$query_body = substr($query, 0, $wherepos);\n\t\t\t\t$workflowScheduler = new WorkFlowScheduler($adb);\n\t\t\t\t$workflow = new Workflow();\n\t\t\t\t$wfvals['module_name'] = $thisModule;\n\t\t\t\t$wfvals['test'] = isset($conditions[$fieldname]) ? $conditions[$fieldname] : $conditions[$module.'::'.$thisModule];\n\t\t\t\t$wfvals['workflow_id'] = 0;\n\t\t\t\t$wfvals['defaultworkflow'] = 0;\n\t\t\t\t$wfvals['summary'] = '';\n\t\t\t\t$wfvals['execution_condition'] = '';\n\t\t\t\t$workflow->setup($wfvals);\n\t\t\t\t$query = $workflowScheduler->getWorkflowQuery($workflow, array_values($fields));\n\t\t\t\t$wherepos = stripos($query, ' where ');\n\t\t\t\t$query_cond = substr($query, $wherepos+7);\n\t\t\t\t$query = $query_body.' where '.$query_cond;\n\t\t\t}\n\t\t}\n\t\treturn $query;\n\t}\n\n\t/**\n\t * Get list view query (send more WHERE clause condition if required)\n\t */\n\tpublic function getListQuery($module, $usewhere = '') {\n\t\tglobal $current_user, $adb;\n\t\t$query = \"SELECT vtiger_crmentity.*, $this->table_name.*\";\n\n\t\t// Keep track of tables joined to avoid duplicates\n\t\t$joinedTables = array();\n\n\t\t// Select Custom Field Table Columns if present\n\t\tif (!empty($this->customFieldTable)) {\n\t\t\t$query .= ', ' . $this->customFieldTable[0] . '.* ';\n\t\t}\n\n\t\t$query .= \" FROM $this->table_name\";\n\t\t$query .= ' INNER JOIN '.$this->crmentityTableAlias.\" ON vtiger_crmentity.crmid = $this->table_name.$this->table_index\";\n\n\t\t$joinedTables[] = $this->table_name;\n\t\t$joinedTables[] = $this->crmentityTable;\n\n\t\t// Consider custom table join as well.\n\t\tif (!empty($this->customFieldTable)) {\n\t\t\t$query.=\" INNER JOIN \".$this->customFieldTable[0].' ON '.$this->customFieldTable[0].'.'.$this->customFieldTable[1].\" = $this->table_name.$this->table_index\";\n\t\t\t$joinedTables[] = $this->customFieldTable[0];\n\t\t}\n\t\t$query .= ' LEFT JOIN vtiger_users ON vtiger_users.id = '.$this->crmentityTable.'.smownerid';\n\t\t$query .= ' LEFT JOIN vtiger_groups ON vtiger_groups.groupid = '.$this->crmentityTable.'.smownerid';\n\n\t\t$joinedTables[] = 'vtiger_users';\n\t\t$joinedTables[] = 'vtiger_groups';\n\n\t\t$linkedModulesQuery = $adb->pquery(\n\t\t\t'SELECT distinct tablename, columnname, relmodule\n\t\t\tFROM vtiger_field\n\t\t\tINNER JOIN vtiger_fieldmodulerel ON vtiger_fieldmodulerel.fieldid = vtiger_field.fieldid'\n\t\t\t.\" WHERE uitype='10' AND vtiger_fieldmodulerel.module=?\",\n\t\t\tarray($module)\n\t\t);\n\t\t$linkedFieldsCount = $adb->num_rows($linkedModulesQuery);\n\n\t\tfor ($i=0; $i<$linkedFieldsCount; $i++) {\n\t\t\t$related_module = $adb->query_result($linkedModulesQuery, $i, 'relmodule');\n\t\t\t$tablename = $adb->query_result($linkedModulesQuery, $i, 'tablename');\n\t\t\t$columnname = $adb->query_result($linkedModulesQuery, $i, 'columnname');\n\n\t\t\t$other = CRMEntity::getInstance($related_module);\n\n\t\t\tif (!in_array($other->table_name, $joinedTables)) {\n\t\t\t\t$query .= \" LEFT JOIN $other->table_name ON $other->table_name.$other->table_index = $tablename.$columnname\";\n\t\t\t\t$joinedTables[] = $other->table_name;\n\t\t\t}\n\t\t}\n\n\t\t$query .= $this->getNonAdminAccessControlQuery($module, $current_user);\n\t\t$query .= ' WHERE '.$this->crmentityTable.'.deleted=0 '.$usewhere;\n\t\treturn $query;\n\t}\n\n\t/**\n\t * Create query to export the records.\n\t */\n\tpublic function create_export_query($where) {\n\t\tglobal $current_user, $adb;\n\t\t$thismodule = $_REQUEST['module'];\n\n\t\tinclude_once 'include/utils/ExportUtils.php';\n\n\t\t//To get the Permitted fields query and the permitted fields list\n\t\t$sql = getPermittedFieldsQuery($thismodule, 'detail_view');\n\n\t\t$fields_list = getFieldsListFromQuery($sql);\n\t\tif ($thismodule=='Faq') {\n\t\t\t$fields_list = str_replace(\",vtiger_faqcomments.comments as 'Add Comment'\", ' ', $fields_list);\n\t\t}\n\t\t$query = \"SELECT $fields_list, vtiger_users.user_name AS user_name\n\t\t\tFROM \".$this->crmentityTableAlias.\" INNER JOIN $this->table_name ON vtiger_crmentity.crmid=$this->table_name.$this->table_index\";\n\n\t\tif (!empty($this->customFieldTable)) {\n\t\t\t$query .= ' INNER JOIN '.$this->customFieldTable[0].' ON '.$this->customFieldTable[0].'.'.$this->customFieldTable[1].\"= $this->table_name.$this->table_index\";\n\t\t}\n\n\t\t$query .= ' LEFT JOIN vtiger_groups ON vtiger_groups.groupid = '.$this->crmentityTable.'.smownerid';\n\t\t$query .= ' LEFT JOIN vtiger_users ON '.$this->crmentityTable.'.smownerid=vtiger_users.id';\n\t\t$query .= ' LEFT JOIN vtiger_users as vtigerCreatedBy ON '.$this->crmentityTable.'.smcreatorid=vtigerCreatedBy.id';\n\n\t\t$linkedModulesQuery = $adb->pquery('SELECT distinct fieldname, tablename, columnname, relmodule FROM vtiger_field' .\n\t\t\t' INNER JOIN vtiger_fieldmodulerel ON vtiger_fieldmodulerel.fieldid = vtiger_field.fieldid' .\n\t\t\t\" WHERE uitype='10' AND vtiger_fieldmodulerel.module=?\", array($thismodule));\n\t\t$linkedFieldsCount = $adb->num_rows($linkedModulesQuery);\n\n\t\t$rel_mods = array();\n\t\t$rel_mods[$this->table_name] = 1;\n\t\tfor ($i=0; $i<$linkedFieldsCount; $i++) {\n\t\t\t$related_module = $adb->query_result($linkedModulesQuery, $i, 'relmodule');\n\t\t\t$columnname = $adb->query_result($linkedModulesQuery, $i, 'columnname');\n\t\t\t$tablename = $adb->query_result($linkedModulesQuery, $i, 'tablename');\n\n\t\t\t$other = CRMEntity::getInstance($related_module);\n\n\t\t\tif (!empty($rel_mods[$other->table_name])) {\n\t\t\t\t$rel_mods[$other->table_name] = $rel_mods[$other->table_name] + 1;\n\t\t\t\t$alias = $other->table_name.$rel_mods[$other->table_name];\n\t\t\t\t$query_append = \"as $alias\";\n\t\t\t} else {\n\t\t\t\t$alias = $other->table_name;\n\t\t\t\t$query_append = '';\n\t\t\t\t$rel_mods[$other->table_name] = 1;\n\t\t\t}\n\n\t\t\t$query .= \" LEFT JOIN $other->table_name $query_append ON $alias.$other->table_index = $tablename.$columnname\";\n\t\t}\n\n\t\tinclude_once 'include/fields/metainformation.php';\n\t\t$tabid = getTabid($thismodule);\n\t\t$result = $adb->pquery('select tablename, fieldname, columnname from vtiger_field where tabid=? and uitype=?', array($tabid, Field_Metadata::UITYPE_ACTIVE_USERS));\n\t\twhile ($row = $adb->fetchByAssoc($result)) {\n\t\t\t$tableName = $row['tablename'];\n\t\t\t$fieldName = $row['fieldname'];\n\t\t\t$columName = $row['columnname'];\n\t\t\t$query .= ' LEFT JOIN vtiger_users as vtiger_users'.$fieldName.' ON vtiger_users'.$fieldName.'.id='.$tableName.'.'.$columName;\n\t\t}\n\t\t$query .= $this->getNonAdminAccessControlQuery($thismodule, $current_user);\n\t\t$where_auto = ' '.$this->crmentityTable.'.deleted=0';\n\n\t\tif ($where != '') {\n\t\t\t$query .= \" WHERE ($where) AND $where_auto\";\n\t\t} else {\n\t\t\t$query .= \" WHERE $where_auto\";\n\t\t}\n\n\t\treturn $query;\n\t}\n\n\t/**\n\t * Initialize this instance for importing.\n\t */\n\tpublic function initImport($module) {\n\t\t$this->initImportableFields($module);\n\t}\n\n\t/**\n\t * Create list query to be shown at the last step of the import.\n\t * Called From: modules/Import/UserLastImport.php\n\t */\n\tpublic function create_import_query($module) {\n\t\tglobal $current_user;\n\t\treturn 'SELECT '.$this->crmentityTable.\".crmid,\n\t\t\t\tcase when (vtiger_users.user_name not like '') then vtiger_users.user_name else vtiger_groups.groupname end as user_name, $this->table_name.*\n\t\t\tFROM $this->table_name\"\n\t\t\t.($this->denormalized ? '' : \"INNER JOIN vtiger_crmentity ON vtiger_crmentity.crmid=$this->table_name.$this->table_index\")\n\t\t\t.'LEFT JOIN vtiger_users_last_import ON vtiger_users_last_import.bean_id='.$this->crmentityTable.'.crmid\n\t\t\tLEFT JOIN vtiger_users ON vtiger_users.id='.$this->crmentityTable.'.smownerid\n\t\t\tLEFT JOIN vtiger_groups ON vtiger_groups.groupid='.$this->crmentityTable.\".smownerid\n\t\t\tWHERE vtiger_users_last_import.assigned_user_id='$current_user->id'\n\t\t\tAND vtiger_users_last_import.bean_type='$module'\n\t\t\tAND vtiger_users_last_import.deleted=0\";\n\t}\n\n\t/**\n\t * Function which will set the assigned user id for import record.\n\t */\n\tpublic function set_import_assigned_user() {\n\t\tglobal $current_user, $adb;\n\t\t$record_user = $this->column_fields['assigned_user_id'];\n\n\t\tif ($record_user != $current_user->id) {\n\t\t\t$sqlresult = $adb->pquery(\n\t\t\t\t'select id from vtiger_users where id = ? union select groupid as id from vtiger_groups where groupid = ?',\n\t\t\t\tarray($record_user, $record_user)\n\t\t\t);\n\t\t\tif ($adb->num_rows($sqlresult)!= 1) {\n\t\t\t\t$this->column_fields['assigned_user_id'] = $current_user->id;\n\t\t\t} else {\n\t\t\t\t$row = $adb->fetchByAssoc($sqlresult, -1, false);\n\t\t\t\tif (isset($row['id']) && $row['id'] != -1) {\n\t\t\t\t\t$this->column_fields['assigned_user_id'] = $row['id'];\n\t\t\t\t} else {\n\t\t\t\t\t$this->column_fields['assigned_user_id'] = $current_user->id;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Function invoked during export of module record value.\n\t */\n\tpublic function transform_export_value($key, $value) {\n\t\tif ($key == 'owner' || $key == 'reports_to_id' || $key == 'comercial') {\n\t\t\treturn getOwnerName($value);\n\t\t}\n\t\treturn $value;\n\t}\n\n\t/**\n\t * Function to initialize the importable fields array, based on the User's accessibility to the fields\n\t */\n\tpublic function initImportableFields($module) {\n\t\tglobal $current_user;\n\t\t$skip_uitypes = array('4'); // uitype 4 is for Mod numbers\n\t\t// Look at cache if the fields information is available.\n\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module);\n\n\t\tif ($cachedModuleFields === false) {\n\t\t\tgetColumnFields($module); // This API will initialize the cache as well\n\t\t\t// We will succeed now due to above function call\n\t\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module);\n\t\t}\n\n\t\t$colf = array();\n\t\tif ($cachedModuleFields) {\n\t\t\tforeach ($cachedModuleFields as $fieldinfo) {\n\t\t\t\t// Skip non-supported fields\n\t\t\t\tif (!in_array($fieldinfo['uitype'], $skip_uitypes)) {\n\t\t\t\t\t$colf[$fieldinfo['fieldname']] = $fieldinfo['uitype'];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tforeach ($colf as $key => $value) {\n\t\t\tif (getFieldVisibilityPermission($module, $current_user->id, $key, 'readwrite') == '0') {\n\t\t\t\t$this->importable_fields[$key] = $value;\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Function to initialize the required fields array for that particular module */\n\tpublic function initRequiredFields($module) {\n\t\tglobal $adb;\n\n\t\t$tabid = getTabId($module);\n\t\t$sql = \"select fieldname from vtiger_field where tabid= ? and typeofdata like '%M%' and uitype not in ('53','70') and vtiger_field.presence in (0,2)\";\n\t\t$result = $adb->pquery($sql, array($tabid));\n\t\t$numRows = $adb->num_rows($result);\n\t\tfor ($i = 0; $i < $numRows; $i++) {\n\t\t\t$fieldName = $adb->query_result($result, $i, 'fieldname');\n\t\t\t$this->required_fields[$fieldName] = 1;\n\t\t}\n\t}\n\n\t/** Function to delete an entity with given Id */\n\tpublic function trash($module, $id) {\n\t\tglobal $current_user, $adb;\n\n\t\t$setype = getSalesEntityType($id);\n\t\tif ($setype != $module && !($module == 'cbCalendar' && $setype == 'Emails')) { // security\n\t\t\treturn false;\n\t\t}\n\t\trequire_once 'include/events/include.inc';\n\t\t$em = new VTEventsManager($adb);\n\n\t\t// Initialize Event trigger cache\n\t\t$em->initTriggerCache();\n\n\t\t$entityData = VTEntityData::fromEntityId($adb, $id);\n\n\t\t$em->triggerEvent('vtiger.entity.beforedelete', $entityData);\n\n\t\t$this->mark_deleted($id);\n\t\t$this->unlinkDependencies($module, $id);\n\n\t\trequire_once 'include/freetag/freetag.class.php';\n\t\t$freetag = new freetag();\n\t\t$freetag->delete_all_object_tags_for_user($current_user->id, $id);\n\n\t\t$sql_recentviewed = 'DELETE FROM vtiger_tracker WHERE user_id = ? AND item_id = ?';\n\t\t$adb->pquery($sql_recentviewed, array($current_user->id, $id));\n\n\t\tif ($em) {\n\t\t\t$entityData->SetDeleted($id);\n\t\t\t$em->triggerEvent('vtiger.entity.afterdelete', $entityData);\n\t\t}\n\t}\n\n\t/** Function to unlink all the dependent entities of the given Entity by Id */\n\tpublic function unlinkDependencies($module, $id) {\n\t\tglobal $adb;\n\t\tif (getSalesEntityType($id)!=$module) { // security\n\t\t\treturn false;\n\t\t}\n\t\t$fieldRes = $adb->pquery('SELECT tabid, tablename, columnname FROM vtiger_field WHERE fieldid IN (\n\t\t\tSELECT fieldid FROM vtiger_fieldmodulerel WHERE relmodule=?)', array($module));\n\t\t$numOfFields = $adb->num_rows($fieldRes);\n\t\tfor ($i = 0; $i < $numOfFields; $i++) {\n\t\t\t$tabId = $adb->query_result($fieldRes, $i, 'tabid');\n\t\t\t$tableName = $adb->query_result($fieldRes, $i, 'tablename');\n\t\t\t$columnName = $adb->query_result($fieldRes, $i, 'columnname');\n\n\t\t\t$relatedModule = vtlib_getModuleNameById($tabId);\n\t\t\t$focusObj = CRMEntity::getInstance($relatedModule);\n\n\t\t\t//Backup Field Relations for the deleted entity\n\t\t\t$relQuery = \"SELECT $focusObj->table_index FROM $tableName WHERE $columnName=?\";\n\t\t\t$relResult = $adb->pquery($relQuery, array($id));\n\t\t\t$numOfRelRecords = $adb->num_rows($relResult);\n\t\t\tif ($numOfRelRecords > 0) {\n\t\t\t\t$recordIdsList = array();\n\t\t\t\tfor ($k = 0; $k < $numOfRelRecords; $k++) {\n\t\t\t\t\t$recordIdsList[] = $adb->query_result($relResult, $k, $focusObj->table_index);\n\t\t\t\t}\n\t\t\t\t$params = array($id, RB_RECORD_UPDATED, $tableName, $columnName, $focusObj->table_index, implode(',', $recordIdsList));\n\t\t\t\t$adb->pquery('INSERT INTO vtiger_relatedlists_rb VALUES (?,?,?,?,?,?)', $params);\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Function to unlink an entity with given Id from another entity */\n\tpublic function unlinkRelationship($id, $return_module, $return_id) {\n\t\tglobal $currentModule, $adb;\n\t\t$data = array();\n\t\t$data['sourceModule'] = getSalesEntityType($id);\n\t\t$data['sourceRecordId'] = $id;\n\t\t$data['destinationModule'] = $return_module;\n\t\t$data['destinationRecordId'] = $return_id;\n\t\tcbEventHandler::do_action('corebos.entity.link.delete', $data);\n\n\t\tdeleteFromCrmEntityRel($id, $return_id);\n\n\t\t$fieldRes = $adb->pquery(\n\t\t\t'SELECT tabid, tablename, columnname FROM vtiger_field WHERE fieldid IN (SELECT fieldid FROM vtiger_fieldmodulerel WHERE module=? AND relmodule=?)',\n\t\t\tarray($currentModule, $return_module)\n\t\t);\n\t\t$numOfFields = $adb->num_rows($fieldRes);\n\t\tfor ($i = 0; $i < $numOfFields; $i++) {\n\t\t\t$tabId = $adb->query_result($fieldRes, $i, 'tabid');\n\t\t\t$tableName = $adb->query_result($fieldRes, $i, 'tablename');\n\t\t\t$columnName = $adb->query_result($fieldRes, $i, 'columnname');\n\n\t\t\t$relatedModule = vtlib_getModuleNameById($tabId);\n\t\t\t$focusObj = CRMEntity::getInstance($relatedModule);\n\n\t\t\t$updateQuery = \"UPDATE $tableName SET $columnName=? WHERE $columnName=? AND $focusObj->table_index=?\";\n\t\t\t$updateParams = array(null, $return_id, $id);\n\t\t\t$adb->pquery($updateQuery, $updateParams);\n\t\t}\n\t\tcbEventHandler::do_action('corebos.entity.link.delete.final', $data);\n\t}\n\n\t/** Function to restore a deleted record of specified module with given crmid\n\t * @param string module name\n\t * @param array list of crmids\n\t */\n\tpublic function restore($module, $id) {\n\t\tglobal $current_user, $adb;\n\n\t\t$adb->println(\"> restore $module, $id\");\n\t\t$adb->startTransaction();\n\n\t\t$date_var = $adb->formatDate(date('Y-m-d H:i:s'), true);\n\t\t$query = 'UPDATE '.$this->crmentityTable.' SET deleted=0,modifiedtime=?,modifiedby=? WHERE crmid = ?';\n\t\t$adb->pquery($query, array($date_var, $current_user->id, $id), true, 'Error restoring records :');\n\t\t$adb->pquery('UPDATE vtiger_crmobject SET deleted=0,modifiedtime=? WHERE crmid=?', array($date_var, $id), true, 'Error restoring records :');\n\t\t//Restore related entities/records\n\t\t$this->restoreRelatedRecords($module, $id);\n\n\t\t//Event triggering code\n\t\trequire_once 'include/events/include.inc';\n\t\t$em = new VTEventsManager($adb);\n\n\t\t// Initialize Event trigger cache\n\t\t$em->initTriggerCache();\n\n\t\t$this->id = $id;\n\t\t$entityData = VTEntityData::fromCRMEntity($this);\n\t\t//Event triggering code\n\t\t$em->triggerEvent('vtiger.entity.afterrestore', $entityData);\n\t\t//Event triggering code ends\n\n\t\t$adb->completeTransaction();\n\t\t$adb->println('< restore');\n\t}\n\n\t/** Function to restore all the related records of a given record by id */\n\tpublic function restoreRelatedRecords($module, $record) {\n\t\tglobal $adb;\n\t\t$result = $adb->pquery('SELECT * FROM vtiger_relatedlists_rb WHERE entityid = ?', array($record));\n\t\t$numRows = $adb->num_rows($result);\n\t\tfor ($i = 0; $i < $numRows; $i++) {\n\t\t\t$action = $adb->query_result($result, $i, 'action');\n\t\t\t$rel_table = $adb->query_result($result, $i, 'rel_table');\n\t\t\t$rel_column = $adb->query_result($result, $i, 'rel_column');\n\t\t\t$ref_column = $adb->query_result($result, $i, 'ref_column');\n\t\t\t$related_crm_ids = $adb->query_result($result, $i, 'related_crm_ids');\n\n\t\t\tif (strtoupper($action) == RB_RECORD_UPDATED) {\n\t\t\t\t$related_ids = explode(',', $related_crm_ids);\n\t\t\t\tif ($rel_table == 'vtiger_crmentity' && $rel_column == 'deleted') {\n\t\t\t\t\t$sql = \"UPDATE $rel_table set $rel_column = 0 WHERE $ref_column IN (\" . generateQuestionMarks($related_ids) . ')';\n\t\t\t\t\t$sql = 'UPDATE vtiger_crmobject set deleted=0 WHERE crmid IN (' . generateQuestionMarks($related_ids) . ')';\n\t\t\t\t\t$adb->pquery($sql, array($related_ids));\n\t\t\t\t} else {\n\t\t\t\t\t$sql = \"UPDATE $rel_table set $rel_column = ? WHERE $rel_column = 0 AND $ref_column IN (\" . generateQuestionMarks($related_ids) . ')';\n\t\t\t\t\t$adb->pquery($sql, array($record, $related_ids));\n\t\t\t\t}\n\t\t\t} elseif (strtoupper($action) == RB_RECORD_DELETED) {\n\t\t\t\tif ($rel_table == 'vtiger_seproductrel') {\n\t\t\t\t\t$sql = \"INSERT INTO $rel_table($rel_column, $ref_column, 'setype') VALUES (?,?,?)\";\n\t\t\t\t\t$adb->pquery($sql, array($record, $related_crm_ids, $module));\n\t\t\t\t} else {\n\t\t\t\t\t$sql = \"INSERT INTO $rel_table($rel_column, $ref_column) VALUES (?,?)\";\n\t\t\t\t\t$adb->pquery($sql, array($record, $related_crm_ids));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//Clean up the the backup data also after restoring\n\t\t$adb->pquery('DELETE FROM vtiger_relatedlists_rb WHERE entityid = ?', array($record));\n\t}\n\n\t/**\n\t * Function to initialize the sortby fields array\n\t */\n\tpublic function initSortByField($module) {\n\t\tglobal $adb, $log;\n\t\t$log->debug('> initSortByField '.$module);\n\t\t// Define the columnname's and uitype's which needs to be excluded\n\t\t$exclude_columns = array('quoteid', 'vendorid', 'access_count');\n\t\t$exclude_uitypes = array();\n\n\t\t$tabid = getTabId($module);\n\t\t$sql = 'SELECT columnname FROM vtiger_field WHERE tabid=? and vtiger_field.presence in (0,2)';\n\t\t$params = array($tabid);\n\t\tif (count($exclude_columns) > 0) {\n\t\t\t$sql .= ' AND columnname NOT IN (' . generateQuestionMarks($exclude_columns) . ')';\n\t\t\t$params[] = $exclude_columns;\n\t\t}\n\t\tif (count($exclude_uitypes) > 0) {\n\t\t\t$sql .= ' AND uitype NOT IN (' . generateQuestionMarks($exclude_uitypes) . ')';\n\t\t\t$params[] = $exclude_uitypes;\n\t\t}\n\t\t$result = $adb->pquery($sql, $params);\n\t\t$num_rows = $adb->num_rows($result);\n\t\tfor ($i = 0; $i < $num_rows; $i++) {\n\t\t\t$columnname = $adb->query_result($result, $i, 'columnname');\n\t\t\tif (!in_array($columnname, $this->sortby_fields)) {\n\t\t\t\t$this->sortby_fields[] = $columnname;\n\t\t\t}\n\t\t}\n\t\tif ($tabid == 21 || $tabid == 22) {\n\t\t\t$this->sortby_fields[] = 'crmid';\n\t\t}\n\t\t$log->debug('< initSortByField');\n\t}\n\n\t/* Function to set the Sequence string and sequence number starting value */\n\tpublic function setModuleSeqNumber($mode, $module, $req_str = '', $req_no = '') {\n\t\tglobal $adb;\n\t\t//when we configure the invoice number in Settings this will be used\n\t\tif ($mode == 'configure' && $req_no != '') {\n\t\t\tlist($mode, $module, $req_str, $req_no, $result, $returnResult) = cbEventHandler::do_filter(\n\t\t\t\t'corebos.filter.ModuleSeqNumber.set',\n\t\t\t\tarray($mode, $module, $req_str, $req_no, '', false)\n\t\t\t);\n\t\t\tif ($returnResult) {\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t\t$check = $adb->pquery('select cur_id from vtiger_modentity_num where semodule=? and prefix=?', array($module, $req_str));\n\t\t\tif ($adb->num_rows($check) == 0) {\n\t\t\t\t$numid = $adb->getUniqueId('vtiger_modentity_num');\n\t\t\t\t$active = $adb->pquery('select num_id from vtiger_modentity_num where semodule=? and active=1', array($module));\n\t\t\t\t$adb->pquery('UPDATE vtiger_modentity_num SET active=0 where num_id=?', array($adb->query_result($active, 0, 'num_id')));\n\n\t\t\t\t$adb->pquery('INSERT into vtiger_modentity_num values(?,?,?,?,?,?)', array($numid, $module, $req_str, $req_no, $req_no, 1));\n\t\t\t\treturn true;\n\t\t\t} elseif ($adb->num_rows($check) != 0) {\n\t\t\t\t$num_check = $adb->query_result($check, 0, 'cur_id');\n\t\t\t\tif ($req_no < $num_check) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\t$adb->pquery('UPDATE vtiger_modentity_num SET active=0 where active=1 and semodule=?', array($module));\n\t\t\t\t\t$adb->pquery('UPDATE vtiger_modentity_num SET cur_id=?, active=1 where prefix=? and semodule=?', array($req_no, $req_str, $module));\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} elseif ($mode == 'increment') {\n\t\t\tlist($mode, $module, $req_str, $req_no, $result, $returnResult) = cbEventHandler::do_filter(\n\t\t\t\t'corebos.filter.ModuleSeqNumber.increment',\n\t\t\t\tarray($mode, $module, $req_str, $req_no, '', false)\n\t\t\t);\n\t\t\tif ($returnResult) {\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t\t//when we save new record we will increment the autonumber field\n\t\t\t$check = $adb->pquery(\n\t\t\t\t\"select prefix, cur_id, concat(repeat('0',greatest(length(cur_id)-length(cur_id+1),0)),cur_id+1) as req_no\n\t\t\t\t\tfrom vtiger_modentity_num where semodule=? and active = 1 FOR UPDATE\",\n\t\t\t\tarray($module)\n\t\t\t);\n\t\t\t$req_no .= $adb->query_result($check, 0, 'req_no');\n\t\t\t$curid = $adb->query_result($check, 0, 'cur_id');\n\t\t\t$adb->pquery('UPDATE vtiger_modentity_num SET cur_id=? where cur_id=? and active=1 AND semodule=?', array($req_no, $curid, $module));\n\t\t\t$prefix = $adb->query_result($check, 0, 'prefix');\n\t\t\t$prev_inv_no = $prefix . $curid;\n\t\t\treturn decode_html($prev_inv_no);\n\t\t}\n\t}\n\n\t/* Function to check if module sequence numbering is configured for the given module or not */\n\tpublic function isModuleSequenceConfigured($module) {\n\t\t$adb = PearDatabase::getInstance();\n\t\t$result = $adb->pquery('SELECT 1 FROM vtiger_modentity_num WHERE semodule = ? AND active = 1', array($module));\n\t\treturn $result && $adb->num_rows($result) > 0;\n\t}\n\n\t/* Function to get the next module sequence number for a given module */\n\tpublic function getModuleSeqInfo($module) {\n\t\tglobal $adb;\n\t\t$check = $adb->pquery('select cur_id,prefix from vtiger_modentity_num where semodule=? and active = 1', array($module));\n\t\t$prefix = $adb->query_result($check, 0, 'prefix');\n\t\t$curid = $adb->query_result($check, 0, 'cur_id');\n\t\treturn array($prefix, $curid);\n\t}\n\n\t/* Function to check if the mod number already exits */\n\tpublic function checkModuleSeqNumber($table, $column, $no) {\n\t\tglobal $adb;\n\t\t$result = $adb->pquery(\n\t\t\t'select ' . $adb->sql_escape_string($column).' from ' . $adb->sql_escape_string($table).' where ' . $adb->sql_escape_string($column) . '=?',\n\t\t\tarray($no)\n\t\t);\n\t\treturn ($adb->num_rows($result) > 0);\n\t}\n\n\tpublic function updateMissingSeqNumber($module) {\n\t\tglobal $log, $adb;\n\t\t$log->debug('> updateMissingSeqNumber');\n\t\tlist($module, $result, $returnResult) = cbEventHandler::do_filter('corebos.filter.ModuleSeqNumber.fillempty', array($module, '', false));\n\t\tif ($returnResult) {\n\t\t\treturn $result;\n\t\t}\n\n\t\tif (!$this->isModuleSequenceConfigured($module)) {\n\t\t\treturn array();\n\t\t}\n\n\t\t$tabid = getTabid($module);\n\t\t$fieldinfo = $adb->pquery('SELECT * FROM vtiger_field WHERE tabid = ? AND uitype = 4', array($tabid));\n\n\t\t$returninfo = array();\n\n\t\tif ($fieldinfo && $adb->num_rows($fieldinfo)) {\n\t\t\t// We assume the following for module sequencing fields\n\t\t\t// 1. There will be only one field per module\n\t\t\t// 2. This field is linked to module base table\n\t\t\t$fld_table = $adb->query_result($fieldinfo, 0, 'tablename');\n\t\t\t$fld_column = $adb->query_result($fieldinfo, 0, 'columnname');\n\n\t\t\tif ($fld_table == $this->table_name) {\n\t\t\t\t$records = $adb->query(\"SELECT $this->table_index AS recordid FROM $this->table_name WHERE $fld_column = '' OR $fld_column is NULL\");\n\n\t\t\t\tif ($records && $adb->num_rows($records)) {\n\t\t\t\t\t$returninfo['totalrecords'] = $adb->num_rows($records);\n\t\t\t\t\t$returninfo['updatedrecords'] = 0;\n\n\t\t\t\t\t$modseqinfo = $this->getModuleSeqInfo($module);\n\t\t\t\t\t$prefix = $modseqinfo[0];\n\t\t\t\t\t$cur_id = $modseqinfo[1];\n\n\t\t\t\t\t$old_cur_id = $cur_id;\n\t\t\t\t\twhile ($recordinfo = $adb->fetch_array($records)) {\n\t\t\t\t\t\t$value = $prefix . $cur_id;\n\t\t\t\t\t\t$adb->pquery(\"UPDATE $fld_table SET $fld_column = ? WHERE $this->table_index = ?\", array($value, $recordinfo['recordid']));\n\t\t\t\t\t\t$strip = strlen($cur_id) - strlen($cur_id + 1);\n\t\t\t\t\t\tif ($strip < 0) {\n\t\t\t\t\t\t\t$strip = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$temp = str_repeat('0', $strip);\n\t\t\t\t\t\t$cur_id = $temp . ($cur_id + 1);\n\t\t\t\t\t\t$returninfo['updatedrecords'] = $returninfo['updatedrecords'] + 1;\n\t\t\t\t\t}\n\t\t\t\t\tif ($old_cur_id != $cur_id) {\n\t\t\t\t\t\t$adb->pquery('UPDATE vtiger_modentity_num set cur_id=? where semodule=? and active=1', array($cur_id, $module));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$log->fatal('Updating Missing Sequence Number FAILED! REASON: Field table and module table mismatching.');\n\t\t\t}\n\t\t}\n\t\treturn $returninfo;\n\t}\n\n\t/* Generic function to get attachments in the related list of a given module */\n\tpublic function get_attachments($id, $cur_tab_id, $rel_tab_id, $actions = false) {\n\t\tglobal $currentModule, $singlepane_view, $adb;\n\t\t$this_module = $currentModule;\n\t\t$related_module = vtlib_getModuleNameById($rel_tab_id);\n\t\t$other = CRMEntity::getInstance($related_module);\n\n\t\t$button = '';\n\t\tif ($actions) {\n\t\t\tif (is_string($actions)) {\n\t\t\t\t$actions = explode(',', strtoupper($actions));\n\t\t\t}\n\t\t\t$wfs = '';\n\t\t\tif (in_array('SELECT', $actions) && isPermitted($related_module, 4, '') == 'yes') {\n\t\t\t\t$wfs = new VTWorkflowManager($adb);\n\t\t\t\t$racbr = $wfs->getRACRuleForRecord($currentModule, $id);\n\t\t\t\tif (!$racbr || $racbr->hasRelatedListPermissionTo('select', $related_module)) {\n\t\t\t\t\t$button .= \"<input title='\" . getTranslatedString('LBL_SELECT') . ' ' . getTranslatedString($related_module, $related_module).\n\t\t\t\t\t\t\"' class='slds-button slds-button_success' type='button' onclick=\\\"return window.open('index.php?module=$related_module&return_module=$currentModule\".\n\t\t\t\t\t\t\"&action=Popup&popuptype=detailview&select=enable&form=EditView&form_submit=false&recordid=$id','test',\".\n\t\t\t\t\t\t\"cbPopupWindowSettings);\\\" value='\" . getTranslatedString('LBL_SELECT') . ' ' .\n\t\t\t\t\t\tgetTranslatedString($related_module, $related_module) . \"'>&nbsp;\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (in_array('ADD', $actions) && isPermitted($related_module, 1, '') == 'yes') {\n\t\t\t\tif ($wfs == '') {\n\t\t\t\t\t$wfs = new VTWorkflowManager($adb);\n\t\t\t\t\t$racbr = $wfs->getRACRuleForRecord($currentModule, $id);\n\t\t\t\t}\n\t\t\t\tif (!$racbr || $racbr->hasRelatedListPermissionTo('create', $related_module)) {\n\t\t\t\t\t$singular_modname = getTranslatedString('SINGLE_' . $related_module, $related_module);\n\t\t\t\t\t$button .= \"<input type='hidden' name='createmode' value='link' />\" .\n\t\t\t\t\t\t\"<input title='\" . getTranslatedString('LBL_ADD_NEW') . \" \" . $singular_modname . \"' class='slds-button slds-button_neutral'\" .\n\t\t\t\t\t\t\" onclick='this.form.action.value=\\\"EditView\\\";this.form.module.value=\\\"$related_module\\\"' type='submit' name='button'\" .\n\t\t\t\t\t\t\" value='\" . getTranslatedString('LBL_ADD_NEW') . \" \" . $singular_modname . \"'>&nbsp;\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// To make the edit or del link actions to return back to same view.\n\t\tif ($singlepane_view == 'true') {\n\t\t\t$returnset = \"&return_module=$this_module&return_action=DetailView&return_id=$id\";\n\t\t} else {\n\t\t\t$returnset = \"&return_module=$this_module&return_action=CallRelatedList&return_id=$id\";\n\t\t}\n\n\t\t$query = \"select case when (vtiger_users.user_name not like '') then vtiger_users.ename else vtiger_groups.groupname end as user_name,'Documents' ActivityType,\n\t\t\t\tvtiger_attachments.type FileType,crm2.modifiedtime lastmodified,vtiger_crmentity.modifiedtime,vtiger_seattachmentsrel.attachmentsid attachmentsid,\n\t\t\t\tvtiger_crmentity.smownerid smownerid, vtiger_notes.notesid crmid,vtiger_notes.notecontent description,vtiger_notes.*\n\t\t\tfrom vtiger_notes\n\t\t\tinner join vtiger_senotesrel on vtiger_senotesrel.notesid=vtiger_notes.notesid\n\t\t\tleft join vtiger_notescf ON vtiger_notescf.notesid=vtiger_notes.notesid\n\t\t\tinner join \".$other->crmentityTableAlias.' on vtiger_crmentity.crmid=vtiger_notes.notesid and vtiger_crmentity.deleted=0\n\t\t\tinner join vtiger_crmobject crm2 on crm2.crmid=vtiger_senotesrel.crmid\n\t\t\tleft join vtiger_groups on vtiger_groups.groupid=vtiger_crmentity.smownerid\n\t\t\tleft join vtiger_seattachmentsrel on vtiger_seattachmentsrel.crmid=vtiger_notes.notesid\n\t\t\tleft join vtiger_attachments on vtiger_seattachmentsrel.attachmentsid=vtiger_attachments.attachmentsid\n\t\t\tleft join vtiger_users on vtiger_crmentity.smownerid=vtiger_users.id\n\t\t\twhere crm2.crmid=' . $id;\n\n\t\t$return_value = GetRelatedList($this_module, $related_module, $other, $query, $button, $returnset);\n\n\t\tif ($return_value == null) {\n\t\t\t$return_value = array();\n\t\t}\n\t\t$return_value['CUSTOM_BUTTON'] = $button;\n\t\treturn $return_value;\n\t}\n\n\t/** Returns a list of the associated emails\n\t * @param integer entity ID\n\t * @return array related emails record\n\t */\n\tpublic function get_emails($id, $cur_tab_id, $rel_tab_id, $actions = false) {\n\t\tglobal $log, $singlepane_view, $currentModule;\n\t\t$log->debug('> get_emails '.$id);\n\t\t$this_module = $currentModule;\n\n\t\t$related_module = vtlib_getModuleNameById($rel_tab_id);\n\t\trequire_once \"modules/$related_module/$related_module.php\";\n\t\t$other = new $related_module();\n\n\t\tif ($singlepane_view == 'true') {\n\t\t\t$returnset = '&return_module='.$this_module.'&return_action=DetailView&return_id='.$id;\n\t\t} else {\n\t\t\t$returnset = '&return_module='.$this_module.'&return_action=CallRelatedList&return_id='.$id;\n\t\t}\n\n\t\t$button = '';\n\t\t$button .= '<input type=\"hidden\" name=\"email_directing_module\"><input type=\"hidden\" name=\"record\">';\n\n\t\tif ($actions) {\n\t\t\tif (is_string($actions)) {\n\t\t\t\t$actions = explode(',', strtoupper($actions));\n\t\t\t}\n\t\t\tif (in_array('SELECT', $actions) && isPermitted($related_module, 4, '') == 'yes') {\n\t\t\t\t$button .= \"<input title='\".getTranslatedString('LBL_SELECT').' '. getTranslatedString($related_module, $related_module).\n\t\t\t\t\t\"' class='slds-button slds-button_success' type='button' onclick=\\\"return window.open('index.php?module=$related_module&return_module=$currentModule\".\n\t\t\t\t\t\"&action=Popup&popuptype=detailview&select=enable&form=EditView&form_submit=false&recordid=$id','test',\".\n\t\t\t\t\t\"cbPopupWindowSettings);\\\" value='\". getTranslatedString('LBL_SELECT'). ' ' .\n\t\t\t\t\tgetTranslatedString($related_module, $related_module) .\"'>&nbsp;\";\n\t\t\t}\n\t\t\tif (in_array('ADD', $actions) && isPermitted($related_module, 1, '') == 'yes') {\n\t\t\t\t$singular_modname = getTranslatedString('SINGLE_' . $related_module, $related_module);\n\t\t\t\t$button .= \"<input title='\". getTranslatedString('LBL_ADD_NEW').' '. $singular_modname.\"' accessyKey='F' class='crmbutton small create' \".\n\t\t\t\t\t\"onclick='fnvshobj(this,\\\"sendmail_cont\\\");sendmail(\\\"$this_module\\\",$id);' type='button' name='button' value='\". getTranslatedString('LBL_ADD_NEW').\n\t\t\t\t\t' '. $singular_modname.\"'></td>\";\n\t\t\t}\n\t\t}\n\n\t\t$query =\"select case when (vtiger_users.user_name not like '') then vtiger_users.ename else vtiger_groups.groupname end as user_name, vtiger_activity.activityid,\n\t\t\t\tvtiger_activity.subject, vtiger_activity.semodule, vtiger_activity.activitytype, vtiger_email_track.access_count, vtiger_activity.date_start,\n\t\t\t\tvtiger_activity.time_start, vtiger_activity.status, vtiger_activity.priority, \".$other->crmentityTable.'.crmid,'.$other->crmentityTable.'.smownerid,'\n\t\t\t\t.$other->crmentityTable.'.modifiedtime, vtiger_users.user_name, vtiger_seactivityrel.crmid as parent_id, vtiger_emaildetails.*\n\t\t\tfrom vtiger_activity\n\t\t\tinner join vtiger_seactivityrel on vtiger_seactivityrel.activityid=vtiger_activity.activityid'\n\t\t\t.' inner join '.$other->crmentityTable.' on '.$other->crmentityTable.'.crmid=vtiger_activity.activityid'\n\t\t\t.' inner join vtiger_emaildetails on vtiger_emaildetails.emailid = vtiger_activity.activityid\n\t\t\tleft join vtiger_email_track on (vtiger_email_track.crmid=vtiger_seactivityrel.crmid AND vtiger_email_track.mailid=vtiger_activity.activityid)\n\t\t\tleft join vtiger_groups on vtiger_groups.groupid='.$other->crmentityTable.'.smownerid\n\t\t\tleft join vtiger_users on vtiger_users.id='.$other->crmentityTable.\".smownerid\n\t\t\twhere vtiger_activity.activitytype='Emails' and \".$other->crmentityTable.'.deleted=0 and vtiger_seactivityrel.crmid='.$id;\n\n\t\t$return_value = GetRelatedList($this_module, $related_module, $other, $query, $button, $returnset);\n\n\t\tif ($return_value == null) {\n\t\t\t$return_value = array();\n\t\t}\n\t\t$return_value['CUSTOM_BUTTON'] = $button;\n\n\t\t$log->debug('< get_emails');\n\t\treturn $return_value;\n\t}\n\n\t/**\n\t * For Record View Notification\n\t */\n\tpublic function isViewed($crmid = false) {\n\t\tif (!$crmid) {\n\t\t\t$crmid = $this->id;\n\t\t}\n\t\tif ($crmid) {\n\t\t\tglobal $adb;\n\t\t\t$result = $adb->pquery('SELECT viewedtime,modifiedtime,smcreatorid,smownerid,modifiedby FROM '.$this->crmentityTable.' WHERE crmid=?', array($crmid));\n\t\t\t$resinfo = $adb->fetch_array($result);\n\n\t\t\t$lastviewed = $resinfo['viewedtime'];\n\t\t\t$modifiedon = $resinfo['modifiedtime'];\n\t\t\t$smownerid = $resinfo['smownerid'];\n\t\t\t$smcreatorid = $resinfo['smcreatorid'];\n\t\t\t$modifiedby = $resinfo['modifiedby'];\n\n\t\t\tif ($modifiedby == '0' && ($smownerid == $smcreatorid)) {\n\t\t\t\t/** When module record is created * */\n\t\t\t\treturn true;\n\t\t\t} elseif ($smownerid == $modifiedby) {\n\t\t\t\t/** Owner and Modifier as same. * */\n\t\t\t\treturn true;\n\t\t\t} elseif ($lastviewed && $modifiedon) {\n\t\t\t\t/** Lastviewed and Modified time is available. */\n\t\t\t\tif ($this->__timediff($modifiedon, $lastviewed) > 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function __timediff($d1, $d2) {\n\t\tlist($t1_1, $t1_2) = explode(' ', $d1);\n\t\tlist($t1_y, $t1_m, $t1_d) = explode('-', $t1_1);\n\t\tlist($t1_h, $t1_i, $t1_s) = explode(':', $t1_2);\n\n\t\t$t1 = mktime($t1_h, $t1_i, $t1_s, $t1_m, $t1_d, $t1_y);\n\n\t\tlist($t2_1, $t2_2) = explode(' ', $d2);\n\t\tlist($t2_y, $t2_m, $t2_d) = explode('-', $t2_1);\n\t\tlist($t2_h, $t2_i, $t2_s) = explode(':', $t2_2);\n\n\t\t$t2 = mktime($t2_h, $t2_i, $t2_s, $t2_m, $t2_d, $t2_y);\n\n\t\tif ($t1 == $t2) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn $t2 - $t1;\n\t}\n\n\tpublic function markAsViewed($userid) {\n\t\tglobal $adb;\n\t\t$adb->pquery('UPDATE '.$this->crmentityTable.' set viewedtime=? WHERE crmid=? AND smownerid=?', array(date('Y-m-d H:i:s', time()), $this->id, $userid));\n\t}\n\n\t/**\n\t * Save the related module record information. Triggered from CRMEntity->saveentity method or updateRelations.php\n\t * @param string This module name\n\t * @param integer This module record number\n\t * @param string Related module name\n\t * @param mixed Integer or Array of related module record number\n\t */\n\tpublic function save_related_module($module, $crmid, $with_module, $with_crmid) {\n\t\tglobal $adb;\n\t\t$with_crmid = (array)$with_crmid;\n\t\tforeach ($with_crmid as $relcrmid) {\n\t\t\tif ($with_module == 'Documents' && $module!='DocumentFolders') {\n\t\t\t\t$checkpresence = $adb->pquery('SELECT 1 FROM vtiger_senotesrel WHERE crmid=? AND notesid=?', array($crmid, $relcrmid));\n\t\t\t\t// Relation already exists? No need to add again\n\t\t\t\tif ($checkpresence && $adb->num_rows($checkpresence)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$adb->pquery('INSERT INTO vtiger_senotesrel(crmid, notesid) VALUES(?,?)', array($crmid, $relcrmid));\n\t\t\t} elseif ($with_module == 'Emails') {\n\t\t\t\t$checkpresence = $adb->pquery('SELECT 1 FROM vtiger_seactivityrel WHERE crmid=? AND activityid=?', array($crmid, $relcrmid));\n\t\t\t\t// Relation already exists? No need to add again\n\t\t\t\tif ($checkpresence && $adb->num_rows($checkpresence)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$adb->pquery('INSERT INTO vtiger_seactivityrel(crmid, activityid) VALUES(?,?)', array($crmid, $relcrmid));\n\t\t\t} else {\n\t\t\t\t$checkpresence = $adb->pquery(\n\t\t\t\t\t'SELECT 1 FROM vtiger_crmentityrel WHERE crmid=? AND module=? AND relcrmid=? AND relmodule=?',\n\t\t\t\t\tarray($crmid, $module, $relcrmid, $with_module)\n\t\t\t\t);\n\t\t\t\t// Relation already exists? No need to add again\n\t\t\t\tif ($checkpresence && $adb->num_rows($checkpresence)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tinsertIntoCrmEntityRel($crmid, $module, $relcrmid, $with_module);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Delete the related module record information. Triggered from updateRelations.php\n\t * @param string This module name\n\t * @param integer This module record number\n\t * @param string Related module name\n\t * @param mixed Integer or Array of related module record number\n\t */\n\tpublic function delete_related_module($module, $crmid, $with_module, $with_crmid) {\n\t\tglobal $adb;\n\t\t$with_crmid = (array)$with_crmid;\n\t\t$data = array();\n\t\t$data['sourceModule'] = $module;\n\t\t$data['sourceRecordId'] = $crmid;\n\t\t$data['destinationModule'] = $with_module;\n\t\tforeach ($with_crmid as $relcrmid) {\n\t\t\t$data['destinationRecordId'] = $relcrmid;\n\t\t\tcbEventHandler::do_action('corebos.entity.link.delete', $data);\n\t\t\tif ($with_module == 'Documents') {\n\t\t\t\t$adb->pquery('DELETE FROM vtiger_senotesrel WHERE crmid=? AND notesid=?', array($crmid, $relcrmid));\n\t\t\t} else {\n\t\t\t\tdeleteFromCrmEntityRel($crmid, $relcrmid);\n\t\t\t}\n\t\t\tcbEventHandler::do_action('corebos.entity.link.delete.final', $data);\n\t\t}\n\t}\n\n\t/**\n\t * Generic function to handle the workflow related list for a module.\n\t */\n\tpublic function getWorkflowRelatedList($id, $cur_tab_id, $rel_tab_id, $actions = false) {\n\t\trequire_once 'modules/com_vtiger_workflow/VTWorkflow.php';\n\t\tglobal $currentModule, $singlepane_view;\n\n\t\t$related_module = 'com_vtiger_workflow';\n\t\t$other = new Workflow();\n\t\tunset($other->list_fields['Tools'], $other->list_fields_name['Tools']);\n\t\t$button = '';\n\t\tif ($actions) {\n\t\t\tif (is_string($actions)) {\n\t\t\t\t$actions = explode(',', strtoupper($actions));\n\t\t\t}\n\t\t\tif (in_array('SELECT', $actions) && isPermitted($related_module, 4, '') == 'yes') {\n\t\t\t\t$button .= \"<input title='\" . getTranslatedString('LBL_SELECT') . ' ' . getTranslatedString($related_module, $related_module).\n\t\t\t\t\t\"' class='slds-button slds-button_success' type='button' onclick=\\\"return window.open('index.php?module=$related_module&return_module=$currentModule\".\n\t\t\t\t\t\"&action=Popup&popuptype=detailview&select=enable&form=EditView&form_submit=false&recordid=$id','test',\".\n\t\t\t\t\t\"cbPopupWindowSettings);\\\" value='\" . getTranslatedString('LBL_SELECT') . ' '.\n\t\t\t\t\tgetTranslatedString($related_module, $related_module) . \"'>&nbsp;\";\n\t\t\t}\n\t\t\tif (in_array('ADD', $actions) && isPermitted($related_module, 1, '') == 'yes') {\n\t\t\t\t$singular_modname = getTranslatedString('SINGLE_' . $related_module, $related_module);\n\t\t\t\t$button .= \"<input type='hidden' name='createmode' value='link' />\" .\n\t\t\t\t\t\"<input title='\" . getTranslatedString('LBL_ADD_NEW') . \" \" . $singular_modname . \"' class='crmbutton small create'\" .\n\t\t\t\t\t\" onclick='this.form.action.value=\\\"workflowlist\\\";this.form.module.value=\\\"$related_module\\\"' type='submit' name='button'\" .\n\t\t\t\t\t\" value='\" . getTranslatedString('LBL_ADD_NEW') . \" \" . $singular_modname . \"'>&nbsp;\";\n\t\t\t}\n\t\t}\n\n\t\t// To make the edit or del link actions to return back to same view.\n\t\tif ($singlepane_view == 'true') {\n\t\t\t$returnset = \"&return_module=$currentModule&return_action=DetailView&return_id=$id\";\n\t\t} else {\n\t\t\t$returnset = \"&return_module=$currentModule&return_action=CallRelatedList&return_id=$id\";\n\t\t}\n\n\t\t$query = 'SELECT *,workflow_id as crmid ';\n\t\t$query .= ' FROM com_vtiger_workflows';\n\t\t$query .= ' INNER JOIN vtiger_crmentityrel ON (vtiger_crmentityrel.relcrmid = workflow_id OR vtiger_crmentityrel.crmid = workflow_id)';\n\t\t$query .= \" WHERE (vtiger_crmentityrel.crmid = $id OR vtiger_crmentityrel.relcrmid = $id)\";\n\n\t\t$return_value = GetRelatedList($currentModule, $related_module, $other, $query, $button, $returnset);\n\n\t\tif ($return_value == null) {\n\t\t\t$return_value = array('header'=>array(),'entries'=>array(),'navigation'=>array('',''));\n\t\t}\n\t\t$return_value['CUSTOM_BUTTON'] = $button;\n\n\t\treturn $return_value;\n\t}\n\n\t/**\n\t * Default (generic) function to handle the related list for the module.\n\t * NOTE: Vtiger_Module::setRelatedList sets reference to this function in vtiger_relatedlists table\n\t * if function name is not explicitly specified.\n\t */\n\tpublic function get_related_list($id, $cur_tab_id, $rel_tab_id, $actions = false) {\n\t\tglobal $currentModule, $singlepane_view, $adb;\n\n\t\t$related_module = vtlib_getModuleNameById($rel_tab_id);\n\t\t$other = CRMEntity::getInstance($related_module);\n\n\t\t$button = '';\n\t\tif ($actions) {\n\t\t\tif (is_string($actions)) {\n\t\t\t\t$actions = explode(',', strtoupper($actions));\n\t\t\t}\n\t\t\t$wfs = '';\n\t\t\tif (in_array('SELECT', $actions) && isPermitted($related_module, 4, '') == 'yes') {\n\t\t\t\t$wfs = new VTWorkflowManager($adb);\n\t\t\t\t$racbr = $wfs->getRACRuleForRecord($currentModule, $id);\n\t\t\t\tif (!$racbr || $racbr->hasRelatedListPermissionTo('select', $related_module)) {\n\t\t\t\t\t$button .= \"<input title='\" . getTranslatedString('LBL_SELECT') . ' ' . getTranslatedString($related_module, $related_module).\n\t\t\t\t\t\t\"' class='slds-button slds-button_success' type='button' onclick=\\\"return window.open('index.php?module=$related_module&return_module=$currentModule\".\n\t\t\t\t\t\t\"&action=Popup&popuptype=detailview&select=enable&form=EditView&form_submit=false&recordid=$id','test',\".\n\t\t\t\t\t\t\"cbPopupWindowSettings);\\\" value='\" . getTranslatedString('LBL_SELECT') . ' '.\n\t\t\t\t\t\tgetTranslatedString($related_module, $related_module) . \"'>&nbsp;\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (in_array('ADD', $actions) && isPermitted($related_module, 1, '') == 'yes') {\n\t\t\t\tif ($wfs == '') {\n\t\t\t\t\t$wfs = new VTWorkflowManager($adb);\n\t\t\t\t\t$racbr = $wfs->getRACRuleForRecord($currentModule, $id);\n\t\t\t\t}\n\t\t\t\tif (!$racbr || $racbr->hasRelatedListPermissionTo('create', $related_module)) {\n\t\t\t\t\t$singular_modname = getTranslatedString('SINGLE_' . $related_module, $related_module);\n\t\t\t\t\t$button .= \"<input type='hidden' name='createmode' value='link' />\" .\n\t\t\t\t\t\t\"<input title='\" . getTranslatedString('LBL_ADD_NEW') . \" \" . $singular_modname . \"' class='slds-button slds-button_neutral'\" .\n\t\t\t\t\t\t\" onclick='this.form.action.value=\\\"EditView\\\";this.form.module.value=\\\"$related_module\\\"' type='submit' name='button'\" .\n\t\t\t\t\t\t\" value='\" . getTranslatedString('LBL_ADD_NEW') . \" \" . $singular_modname . \"'>&nbsp;\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// To make the edit or del link actions to return back to same view.\n\t\tif ($singlepane_view == 'true') {\n\t\t\t$returnset = \"&return_module=$currentModule&return_action=DetailView&return_id=$id\";\n\t\t} else {\n\t\t\t$returnset = \"&return_module=$currentModule&return_action=CallRelatedList&return_id=$id\";\n\t\t}\n\t\tif ($related_module == 'Users') {\n\t\t\t$query = 'SELECT vtiger_users.* ';\n\t\t\t$maintableid = 'vtiger_users.id';\n\t\t\t$q_elsegroupname = '';\n\t\t} else {\n\t\t\t$query = 'SELECT vtiger_crmentity.* ';\n\t\t\t$maintableid = 'vtiger_crmentity.crmid';\n\t\t\t$q_elsegroupname = 'ELSE vtiger_groups.groupname ';\n\t\t}\n\t\t$query .= \", CASE WHEN (vtiger_users.user_name NOT LIKE '') THEN vtiger_users.ename {$q_elsegroupname}END AS user_name\";\n\n\t\t$more_relation = '';\n\t\t// Select Custom Field Table Columns if present\n\t\tif (isset($other->customFieldTable) && empty($other->related_tables[$other->customFieldTable[0]])) {\n\t\t\t$query .= ', '.$other->customFieldTable[0].'.*';\n\t\t\t$more_relation .= ' INNER JOIN '.$other->customFieldTable[0].' ON '.$other->customFieldTable[0].'.'.$other->customFieldTable[1] .\n\t\t\t\t\" = $other->table_name.$other->table_index\";\n\t\t}\n\t\tif (!empty($other->related_tables)) {\n\t\t\tforeach ($other->related_tables as $tname => $relmap) {\n\t\t\t\t$query .= \", $tname.*\";\n\n\t\t\t\t// Setup the default JOIN conditions if not specified\n\t\t\t\tif (empty($relmap[1])) {\n\t\t\t\t\t$relmap[1] = $other->table_name;\n\t\t\t\t}\n\t\t\t\tif (empty($relmap[2])) {\n\t\t\t\t\t$relmap[2] = $relmap[0];\n\t\t\t\t}\n\t\t\t\t$more_relation .= \" LEFT JOIN $tname ON $tname.$relmap[0] = $relmap[1].$relmap[2]\";\n\t\t\t}\n\t\t}\n\t\t$query .= ', '.$other->table_name.'.*';\n\t\t$query .= \" FROM $other->table_name\";\n\t\tif ($related_module != 'Users') {\n\t\t\t$query .= ' INNER JOIN '.$other->crmentityTableAlias.\" ON vtiger_crmentity.crmid=$other->table_name.$other->table_index\";\n\t\t}\n\t\t$query .= ' INNER JOIN vtiger_crmentityreldenorm ON vtiger_crmentityreldenorm.relcrmid='.$maintableid;\n\t\t$query .= $more_relation;\n\t\tif ($related_module != 'Users') {\n\t\t\t$query .= ' LEFT JOIN vtiger_users ON vtiger_users.id = '.$other->crmentityTable.'.smownerid';\n\t\t\t$query .= ' LEFT JOIN vtiger_groups ON vtiger_groups.groupid = '.$other->crmentityTable.'.smownerid';\n\t\t\t$del_table = $other->crmentityTable;\n\t\t} else {\n\t\t\t$del_table = 'vtiger_users';\n\t\t}\n\t\t$query .= \" WHERE {$del_table}.deleted = 0 AND vtiger_crmentityreldenorm.crmid=$id\";\n\n\t\t$return_value = GetRelatedList($currentModule, $related_module, $other, $query, $button, $returnset);\n\n\t\tif ($return_value == null) {\n\t\t\t$return_value = array('header'=>array(),'entries'=>array(),'navigation'=>array('',''));\n\t\t}\n\t\t$return_value['CUSTOM_BUTTON'] = $button;\n\n\t\treturn $return_value;\n\t}\n\n\t/**\n\t * Default (generic) function to handle the dependents list for the module.\n\t * NOTE: UI type '10' is used to stored the references to other modules for a given record.\n\t * These dependent records can be retrieved through this function.\n\t * For eg: A trouble ticket can be related to an Account or a Contact.\n\t * From a given Contact/Account if we need to fetch all such dependent trouble tickets, get_dependents_list function can be used.\n\t */\n\tpublic function get_dependents_list($id, $cur_tab_id, $rel_tab_id, $actions = false, $customactions = '') {\n\t\tglobal $currentModule, $singlepane_view, $current_user, $adb;\n\n\t\t$related_module = vtlib_getModuleNameById($rel_tab_id);\n\t\t$other = CRMEntity::getInstance($related_module);\n\n\t\t$button = '';\n\n\t\t// To make the edit or del link actions to return back to same view.\n\t\tif ($singlepane_view == 'true') {\n\t\t\t$returnset = \"&return_module=$currentModule&return_action=DetailView&return_id=$id\";\n\t\t} else {\n\t\t\t$returnset = \"&return_module=$currentModule&return_action=CallRelatedList&return_id=$id\";\n\t\t}\n\n\t\t$return_value = null;\n\t\t$dependentFieldSql = $adb->pquery(\"SELECT tabid, tablename, fieldname, columnname FROM vtiger_field WHERE uitype='10' AND\"\n\t\t\t.' fieldid IN (SELECT fieldid FROM vtiger_fieldmodulerel WHERE relmodule=? AND module=?)', array($currentModule, $related_module));\n\t\t$numOfFields = $adb->num_rows($dependentFieldSql);\n\n\t\t$relWithSelf = false;\n\t\tif ($numOfFields > 0) {\n\t\t\t$relconds = array();\n\t\t\twhile ($depflds = $adb->fetch_array($dependentFieldSql)) {\n\t\t\t\t$dependentTable = $depflds['tablename'];\n\t\t\t\tif (isset($other->related_tables)) {\n\t\t\t\t\t$otherRelatedTable = (array)$other->related_tables;\n\t\t\t\t} else {\n\t\t\t\t\t$otherRelatedTable = array();\n\t\t\t\t}\n\t\t\t\tif ($dependentTable!=$other->table_name && !in_array($dependentTable, $otherRelatedTable)) {\n\t\t\t\t\t$relidx = isset($other->tab_name_index[$dependentTable]) ? $other->tab_name_index[$dependentTable] : $other->table_index;\n\t\t\t\t\t$other->related_tables[$dependentTable] = array($relidx,$other->table_name,$other->table_index);\n\t\t\t\t}\n\t\t\t\t$dependentColumn = $depflds['columnname'];\n\t\t\t\t$dependentField = $depflds['fieldname'];\n\t\t\t\tif ($this->table_name==$other->table_name) {\n\t\t\t\t\t$thistablename = $this->table_name.'RelSelf';\n\t\t\t\t\t$relWithSelf = true;\n\t\t\t\t} else {\n\t\t\t\t\t$thistablename = $this->table_name;\n\t\t\t\t}\n\t\t\t\t$relconds[] = \"$thistablename.$this->table_index = $dependentTable.$dependentColumn\";\n\t\t\t\t$button .= '<input type=\"hidden\" name=\"' . $dependentField . '\" id=\"' . $dependentColumn . '\" value=\"' . $id . '\">';\n\t\t\t\t$button .= '<input type=\"hidden\" name=\"' . $dependentField . '_type\" id=\"' . $dependentColumn . '_type\" value=\"' . $currentModule . '\">';\n\t\t\t}\n\t\t\t$relationconditions = '('.implode(' or ', $relconds).')';\n\t\t\t$button .= $customactions;\n\t\t\tif ($actions) {\n\t\t\t\tif (is_string($actions)) {\n\t\t\t\t\t$actions = explode(',', strtoupper($actions));\n\t\t\t\t}\n\t\t\t\t$wfs = '';\n\t\t\t\tif (in_array('ADD', $actions) && isPermitted($related_module, 1, '') == 'yes'\n\t\t\t\t\t\t&& getFieldVisibilityPermission($related_module, $current_user->id, $dependentField, 'readwrite') == '0') {\n\t\t\t\t\t$wfs = new VTWorkflowManager($adb);\n\t\t\t\t\t$racbr = $wfs->getRACRuleForRecord($currentModule, $id);\n\t\t\t\t\tif (!$racbr || $racbr->hasRelatedListPermissionTo('create', $related_module)) {\n\t\t\t\t\t\t$singular_modname = getTranslatedString('SINGLE_' . $related_module, $related_module);\n\t\t\t\t\t\t$button .= \"<input title='\" . getTranslatedString('LBL_ADD_NEW').' '.$singular_modname.\"' class='slds-button slds-button_neutral'\"\n\t\t\t\t\t\t\t.\" onclick='this.form.action.value=\\\"EditView\\\";this.form.module.value=\\\"$related_module\\\"' type='submit' name='button'\"\n\t\t\t\t\t\t\t.\" value='\".getTranslatedString('LBL_ADD_NEW').' '.$singular_modname.\"'>&nbsp;\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$joinTabled = [];\n\t\t\t$query = \"SELECT vtiger_crmentity.*, $other->table_name.*\";\n\n\t\t\t$query .= \", CASE WHEN (vtiger_users.user_name NOT LIKE '') THEN vtiger_users.ename ELSE vtiger_groups.groupname END AS user_name\";\n\n\t\t\t$more_relation = '';\n\t\t\tif (isset($other->customFieldTable) && empty($other->related_tables[$other->customFieldTable[0]])) {\n\t\t\t\t$query .= ', '.$other->customFieldTable[0].'.*';\n\t\t\t\t$more_relation .= ' INNER JOIN '.$other->customFieldTable[0].' ON '.$other->customFieldTable[0].'.'.$other->customFieldTable[1] .\n\t\t\t\t\t\" = $other->table_name.$other->table_index\";\n\t\t\t\t$joinTabled[] = $other->customFieldTable[0];\n\t\t\t}\n\t\t\tif (!empty($other->related_tables)) {\n\t\t\t\tforeach ($other->related_tables as $tname => $relmap) {\n\t\t\t\t\t$query .= \", $tname.*\";\n\n\t\t\t\t\t// Setup the default JOIN conditions if not specified\n\t\t\t\t\tif (empty($relmap[1])) {\n\t\t\t\t\t\t$relmap[1] = $other->table_name;\n\t\t\t\t\t}\n\t\t\t\t\tif (empty($relmap[2])) {\n\t\t\t\t\t\t$relmap[2] = $relmap[0];\n\t\t\t\t\t}\n\t\t\t\t\tif (!in_array($tname, $joinTabled)) {\n\t\t\t\t\t\t$more_relation .= \" LEFT JOIN $tname ON $tname.$relmap[0] = $relmap[1].$relmap[2]\";\n\t\t\t\t\t\t$joinTabled[] = $tname;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$query .= \" FROM $other->table_name\";\n\t\t\t$query .= ' INNER JOIN '.$other->crmentityTableAlias.\" ON vtiger_crmentity.crmid = $other->table_name.$other->table_index\";\n\t\t\t$query .= $more_relation;\n\t\t\tif ($relWithSelf) {\n\t\t\t\t$query .= \" INNER JOIN $this->table_name as \".$this->table_name.\"RelSelf ON $relationconditions\";\n\t\t\t} else {\n\t\t\t\tif (!in_array($this->table_name, $joinTabled)) {\n\t\t\t\t\t$query .= \" INNER JOIN $this->table_name ON $relationconditions\";\n\t\t\t\t\t$joinTabled[] = $this->table_name;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$query .= ' LEFT JOIN vtiger_users ON vtiger_users.id = '.$other->crmentityTable.'.smownerid';\n\t\t\t$query .= ' LEFT JOIN vtiger_groups ON vtiger_groups.groupid = '.$other->crmentityTable.'.smownerid';\n\n\t\t\tif ($relWithSelf) {\n\t\t\t\t$query .= ' WHERE '.$other->crmentityTable.'.deleted=0 AND '.$this->table_name.\"RelSelf.$this->table_index = $id\";\n\t\t\t} else {\n\t\t\t\t$query .= \" WHERE \".$other->crmentityTable.\".deleted=0 AND $this->table_name.$this->table_index = $id\";\n\t\t\t}\n\n\t\t\t$return_value = GetRelatedList($currentModule, $related_module, $other, $query, $button, $returnset);\n\t\t}\n\t\tif ($return_value == null) {\n\t\t\t$return_value = array('header'=>array(),'entries'=>array(),'navigation'=>array('',''));\n\t\t}\n\t\t$return_value['CUSTOM_BUTTON'] = $button;\n\n\t\treturn $return_value;\n\t}\n\n\t/** Returns a list of the associated cbCalendar events\n\t * Defined here for backward compatibility with previous calendar system\n\t*/\n\tpublic function get_activities($id, $cur_tab_id, $rel_tab_id, $actions = false) {\n\t\tglobal $currentModule, $app_strings, $singlepane_view, $current_user, $adb;\n\t\t$rel_tab_id = getTabid('cbCalendar');\n\n\t\t$related_module = vtlib_getModuleNameById($rel_tab_id);\n\t\t$other = CRMEntity::getInstance($related_module);\n\n\t\t$button = '';\n\n\t\t// To make the edit or del link actions to return back to same view.\n\t\tif ($singlepane_view == 'true') {\n\t\t\t$returnset = \"&return_module=$currentModule&return_action=DetailView&return_id=$id\";\n\t\t} else {\n\t\t\t$returnset = \"&return_module=$currentModule&return_action=CallRelatedList&return_id=$id\";\n\t\t}\n\n\t\t$return_value = null;\n\t\t$dependentFieldSql = $adb->pquery(\n\t\t\t\"SELECT tabid, tablename, fieldname, columnname FROM vtiger_field WHERE uitype='10' AND fieldid IN (SELECT fieldid FROM vtiger_fieldmodulerel WHERE relmodule=? AND module=?)\",\n\t\t\tarray($currentModule, $related_module)\n\t\t);\n\t\t$numOfFields = $adb->num_rows($dependentFieldSql);\n\n\t\t$relWithSelf = false;\n\t\tif ($numOfFields > 0) {\n\t\t\t$relconds = array();\n\t\t\twhile ($depflds = $adb->fetch_array($dependentFieldSql)) {\n\t\t\t\t$dependentTable = $depflds['tablename'];\n\t\t\t\tif (isset($other->related_tables)) {\n\t\t\t\t\t$otherRelatedTable = (array)$other->related_tables;\n\t\t\t\t} else {\n\t\t\t\t\t$otherRelatedTable = '';\n\t\t\t\t}\n\t\t\t\tif ($dependentTable!=$other->table_name && !in_array($dependentTable, $otherRelatedTable)) {\n\t\t\t\t\t$relidx = isset($other->tab_name_index[$dependentTable]) ? $other->tab_name_index[$dependentTable] : $other->table_index;\n\t\t\t\t\t$other->related_tables[$dependentTable] = array($relidx,$other->table_name,$other->table_index);\n\t\t\t\t}\n\t\t\t\t$dependentColumn = $depflds['columnname'];\n\t\t\t\t$dependentField = $depflds['fieldname'];\n\t\t\t\tif ($this->table_name==$other->table_name) {\n\t\t\t\t\t$thistablename = $this->table_name.'RelSelf';\n\t\t\t\t\t$relWithSelf = true;\n\t\t\t\t} else {\n\t\t\t\t\t$thistablename = $this->table_name;\n\t\t\t\t}\n\t\t\t\t$relconds[] = \"$thistablename.$this->table_index = $dependentTable.$dependentColumn\";\n\t\t\t\t$button .= '<input type=\"hidden\" name=\"' . $dependentColumn . '\" id=\"' . $dependentColumn . '\" value=\"' . $id . '\">';\n\t\t\t\t$button .= '<input type=\"hidden\" name=\"' . $dependentColumn . '_type\" id=\"' . $dependentColumn . '_type\" value=\"' . $currentModule . '\">';\n\t\t\t}\n\t\t\t$relationconditions = '('.implode(' or ', $relconds).')';\n\t\t\t$calStatus = getAssignedPicklistValues('eventstatus', $current_user->roleid, $adb, $app_strings);\n\t\t\t$relid = $adb->run_query_field('select relation_id from vtiger_relatedlists where tabid='.$cur_tab_id.' and related_tabid='.$rel_tab_id, 'relation_id');\n\t\t\t$button .= '<select style=\"max-width: 20%\" name=\"cbcalendar_filter\" class=\"slds-select\" onchange=\"loadRelatedListBlock(\\'module='.$currentModule.'&action='.$currentModule.\n\t\t\t\t'Ajax&file=DetailViewAjax&record='.$id.'&ajxaction=LOADRELATEDLIST&header=Activities&relation_id='.$relid.\n\t\t\t\t'&cbcalendar_filter=\\'+this.options[this.options.selectedIndex].value+\\'&actions=add\\',\\'tbl_'.$currentModule.'_Activities\\',\\''.\n\t\t\t\t$currentModule.'_Activities\\');\"><option value=\"all\">'.getTranslatedString('LBL_ALL').'</option>';\n\t\t\tif (!isset($_REQUEST['cbcalendar_filter'])) {\n\t\t\t\t$_REQUEST['cbcalendar_filter'] = GlobalVariable::getVariable('RelatedList_Activity_DefaultStatusFilter', 'all', $currentModule);\n\t\t\t}\n\t\t\tforeach ($calStatus as $cstatkey => $cstatvalue) {\n\t\t\t\t$button .= '<option value=\"'.$cstatkey.'\" '.\n\t\t\t\t\t($_REQUEST['cbcalendar_filter']==$cstatkey ? 'selected' : '').'>'.$cstatvalue.'</option>';\n\t\t\t}\n\t\t\t$button .= '</select>&nbsp;';\n\t\t\tif ($actions) {\n\t\t\t\tif (is_string($actions)) {\n\t\t\t\t\t$actions = explode(',', strtoupper($actions));\n\t\t\t\t}\n\t\t\t\t$wfs = '';\n\t\t\t\tif (in_array('ADD', $actions) && isPermitted($related_module, 1, '') == 'yes'\n\t\t\t\t\t\t&& getFieldVisibilityPermission($related_module, $current_user->id, $dependentField, 'readwrite') == '0') {\n\t\t\t\t\t$wfs = new VTWorkflowManager($adb);\n\t\t\t\t\t$racbr = $wfs->getRACRuleForRecord($currentModule, $id);\n\t\t\t\t\tif (!$racbr || $racbr->hasRelatedListPermissionTo('create', $related_module)) {\n\t\t\t\t\t\t$singular_modname = getTranslatedString('SINGLE_' . $related_module, $related_module);\n\t\t\t\t\t\t$button .= \"<input title='\" . getTranslatedString('LBL_ADD_NEW') . ' ' . $singular_modname . \"' class='slds-button slds-button_neutral'\" .\n\t\t\t\t\t\t\t\" onclick='this.form.action.value=\\\"EditView\\\";this.form.module.value=\\\"$related_module\\\"' type='submit' name='button'\" .\n\t\t\t\t\t\t\t\" value='\" . getTranslatedString('LBL_ADD_NEW') . ' ' . $singular_modname . \"'>&nbsp;\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$query = \"SELECT vtiger_crmentity.*, $other->table_name.*\";\n\n\t\t\t$query .= \", CASE WHEN (vtiger_users.user_name NOT LIKE '') THEN vtiger_users.ename ELSE vtiger_groups.groupname END AS user_name\";\n\n\t\t\t$more_relation = '';\n\t\t\tif (!empty($other->related_tables)) {\n\t\t\t\tforeach ($other->related_tables as $tname => $relmap) {\n\t\t\t\t\t$query .= \", $tname.*\";\n\n\t\t\t\t\t// Setup the default JOIN conditions if not specified\n\t\t\t\t\tif (empty($relmap[1])) {\n\t\t\t\t\t\t$relmap[1] = $other->table_name;\n\t\t\t\t\t}\n\t\t\t\t\tif (empty($relmap[2])) {\n\t\t\t\t\t\t$relmap[2] = $relmap[0];\n\t\t\t\t\t}\n\t\t\t\t\t$more_relation .= \" LEFT JOIN $tname ON $tname.$relmap[0] = $relmap[1].$relmap[2]\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$query .= \" FROM $other->table_name\";\n\t\t\t$query .= ' INNER JOIN '.$other->crmentityTableAlias.\" ON vtiger_crmentity.crmid = $other->table_name.$other->table_index\";\n\t\t\t$query .= $more_relation;\n\t\t\tif ($relWithSelf) {\n\t\t\t\t$query .= \" INNER JOIN $this->table_name as \".$this->table_name.\"RelSelf ON $relationconditions\";\n\t\t\t} else {\n\t\t\t\t$query .= \" INNER JOIN $this->table_name ON $relationconditions\";\n\t\t\t}\n\t\t\t$query .= ' LEFT JOIN vtiger_users ON vtiger_users.id = '.$other->crmentityTable.'.smownerid';\n\t\t\t$query .= ' LEFT JOIN vtiger_groups ON vtiger_groups.groupid = '.$other->crmentityTable.'.smownerid';\n\n\t\t\tif ($relWithSelf) {\n\t\t\t\t$query .= ' WHERE '.$other->crmentityTable.'.deleted=0 AND '.$this->table_name.\"RelSelf.$this->table_index = $id\";\n\t\t\t} else {\n\t\t\t\t$query .= \" WHERE \".$other->crmentityTable.\".deleted=0 AND $this->table_name.$this->table_index = $id\";\n\t\t\t}\n\t\t\t$query .= \" AND vtiger_activity.activitytype != 'Emails'\";\n\t\t\tif ($_REQUEST['cbcalendar_filter'] != 'all') {\n\t\t\t\t$query .= $adb->convert2Sql(' and vtiger_activity.eventstatus=? ', array(vtlib_purify($_REQUEST['cbcalendar_filter'])));\n\t\t\t}\n\t\t\t$return_value = GetRelatedList($currentModule, $related_module, $other, $query, $button, $returnset);\n\t\t}\n\t\tif ($return_value == null) {\n\t\t\t$return_value = array('header'=>array(),'entries'=>array(),'navigation'=>array('',''));\n\t\t}\n\t\t$return_value['CUSTOM_BUTTON'] = $button;\n\n\t\treturn $return_value;\n\t}\n\n\t/**\n\t * Move the related records of the specified list of id's to the given record.\n\t * @param string This module name\n\t * @param array List of Entity Id's from which related records need to be transfered\n\t * @param integer Id of the the Record to which the related records are to be moved\n\t */\n\tpublic function transferRelatedRecords($module, $transferEntityIds, $entityId) {\n\t\tglobal $adb, $log;\n\t\t$log->debug('> transferRelatedRecords', [$module, $transferEntityIds, $entityId]);\n\t\tinclude_once 'include/utils/duplicate.php';\n\t\t$rel_table_arr = array('Activities'=>'vtiger_seactivityrel');\n\t\t$tbl_field_arr = array('vtiger_seactivityrel'=>'activityid');\n\t\t$entity_tbl_field_arr = array('vtiger_seactivityrel'=>'crmid');\n\t\t$depmods = getUIType10DependentModules($module);\n\t\tunset($depmods['ModComments']);\n\t\tforeach ($depmods as $mod => $details) {\n\t\t\t$rel_table_arr[$mod] = $details['tablename'];\n\t\t\t$modobj = CRMEntity::getInstance($mod);\n\t\t\t$tbl_field_arr[$details['tablename']] = $modobj->tab_name_index[$details['tablename']];\n\t\t\t$entity_tbl_field_arr[$details['tablename']] = $details['columname'];\n\t\t}\n\n\t\tforeach ($transferEntityIds as $transferId) {\n\t\t\tforeach ($rel_table_arr as $rel_table) {\n\t\t\t\t$id_field = $tbl_field_arr[$rel_table];\n\t\t\t\t$entity_id_field = $entity_tbl_field_arr[$rel_table];\n\n\t\t\t\t// IN clause to avoid duplicate entries\n\t\t\t\t$sel_result = $adb->pquery(\n\t\t\t\t\t\"select $id_field from $rel_table where $entity_id_field=? and $id_field not in (select $id_field from $rel_table where $entity_id_field=?)\",\n\t\t\t\t\tarray($transferId,$entityId)\n\t\t\t\t);\n\t\t\t\t$res_cnt = $adb->num_rows($sel_result);\n\t\t\t\tif ($res_cnt > 0) {\n\t\t\t\t\tfor ($i=0; $i<$res_cnt; $i++) {\n\t\t\t\t\t\t$id_field_value = $adb->query_result($sel_result, $i, $id_field);\n\t\t\t\t\t\t$adb->pquery(\n\t\t\t\t\t\t\t\"update $rel_table set $entity_id_field=? where $entity_id_field=? and $id_field=?\",\n\t\t\t\t\t\t\tarray($entityId,$transferId,$id_field_value)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Pick the records related to the entity to be transfered, but do not pick the ones which are already related to the current entity.\n\t\t\t$relatedRecords = $adb->pquery(\n\t\t\t\t'SELECT relcrmid, relmodule FROM vtiger_crmentityrel WHERE crmid=? AND module=?'\n\t\t\t\t\t.' AND relcrmid NOT IN (SELECT relcrmid FROM vtiger_crmentityrel WHERE crmid=? AND module=?)',\n\t\t\t\tarray($transferId, $module, $entityId, $module)\n\t\t\t);\n\t\t\t$numOfRecords = $adb->num_rows($relatedRecords);\n\t\t\tfor ($i = 0; $i < $numOfRecords; $i++) {\n\t\t\t\t$relcrmid = $adb->query_result($relatedRecords, $i, 'relcrmid');\n\t\t\t\t$relmodule = $adb->query_result($relatedRecords, $i, 'relmodule');\n\t\t\t\t$adb->pquery(\n\t\t\t\t\t'UPDATE vtiger_crmentityrel SET crmid=? WHERE relcrmid=? AND relmodule=? AND crmid=? AND module=?',\n\t\t\t\t\tarray($entityId, $relcrmid, $relmodule, $transferId, $module)\n\t\t\t\t);\n\t\t\t\t$adb->pquery(\n\t\t\t\t\t'UPDATE vtiger_crmentityreldenorm SET crmid=? WHERE relcrmid=? AND relmodule=? AND crmid=? AND module=?',\n\t\t\t\t\tarray($entityId, $relcrmid, $relmodule, $transferId, $module)\n\t\t\t\t);\n\t\t\t\t$adb->pquery(\n\t\t\t\t\t'UPDATE vtiger_crmentityreldenorm SET relcrmid=? WHERE crmid=? AND module=? AND relcrmid=? AND relmodule=?',\n\t\t\t\t\tarray($entityId, $relcrmid, $relmodule, $transferId, $module)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Pick the records to which the entity to be transfered is related, but do not pick the ones to which current entity is already related.\n\t\t\t$parentRecords = $adb->pquery(\n\t\t\t\t'SELECT crmid, module FROM vtiger_crmentityrel WHERE relcrmid=? AND relmodule=? AND crmid NOT IN\n\t\t\t\t\t(SELECT crmid FROM vtiger_crmentityrel WHERE relcrmid=? AND relmodule=?)',\n\t\t\t\tarray($transferId, $module, $entityId, $module)\n\t\t\t);\n\t\t\t$numOfRecords = $adb->num_rows($parentRecords);\n\t\t\tfor ($i = 0; $i < $numOfRecords; $i++) {\n\t\t\t\t$parcrmid = $adb->query_result($parentRecords, $i, 'crmid');\n\t\t\t\t$parmodule = $adb->query_result($parentRecords, $i, 'module');\n\t\t\t\t$adb->pquery(\n\t\t\t\t\t'UPDATE vtiger_crmentityrel SET relcrmid=? WHERE crmid=? AND module=? AND relcrmid=? AND relmodule=?',\n\t\t\t\t\tarray($entityId, $parcrmid, $parmodule, $transferId, $module)\n\t\t\t\t);\n\t\t\t\t$adb->pquery(\n\t\t\t\t\t'UPDATE vtiger_crmentityreldenorm SET relcrmid=? WHERE crmid=? AND module=? AND relcrmid=? AND relmodule=?',\n\t\t\t\t\tarray($entityId, $parcrmid, $parmodule, $transferId, $module)\n\t\t\t\t);\n\t\t\t\t$adb->pquery(\n\t\t\t\t\t'UPDATE vtiger_crmentityreldenorm SET crmid=? WHERE relcrmid=? AND relmodule=? AND crmid=? AND module=?',\n\t\t\t\t\tarray($entityId, $parcrmid, $parmodule, $transferId, $module)\n\t\t\t\t);\n\t\t\t}\n\t\t\t$adb->pquery('UPDATE vtiger_modcomments SET related_to = ? WHERE related_to = ?', array($entityId, $transferId));\n\t\t\t$adb->pquery('UPDATE vtiger_senotesrel SET crmid = ? WHERE crmid = ?', array($entityId, $transferId));\n\t\t}\n\t\t$log->debug('< transferRelatedRecords');\n\t}\n\n\t/**\n\t * Function to get the primary query part of a report\n\t * @param string primary module name\n\t * @return string query string formed on fetching the related data for report for primary module\n\t */\n\tpublic function generateReportsQuery($module, $queryPlanner) {\n\t\tglobal $adb;\n\t\t$primary = CRMEntity::getInstance($module);\n\n\t\t$moduletable = $primary->table_name;\n\t\t$moduleindex = $primary->table_index;\n\t\tif (count($primary->customFieldTable)>0) {\n\t\t\t$modulecftable = $primary->customFieldTable[0];\n\t\t\t$modulecfindex = $primary->customFieldTable[1];\n\t\t}\n\t\tif (isset($modulecftable) && $queryPlanner->requireTable($modulecftable)) {\n\t\t\t$cfquery = \"inner join $modulecftable as $modulecftable on $modulecftable.$modulecfindex=$moduletable.$moduleindex\";\n\t\t} else {\n\t\t\t$cfquery = '';\n\t\t}\n\t\t$relquery = '';\n\t\t$matrix = $queryPlanner->newDependencyMatrix();\n\n\t\t$fields_query = $adb->pquery(\n\t\t\t'SELECT vtiger_field.columnname,vtiger_field.tablename,vtiger_field.fieldid\n\t\t\t\tFROM vtiger_field\n\t\t\t\tINNER JOIN vtiger_tab on vtiger_tab.name=?\n\t\t\t\tWHERE vtiger_tab.tabid=vtiger_field.tabid AND vtiger_field.uitype=10 and vtiger_field.presence in (0,2)',\n\t\t\tarray($module)\n\t\t);\n\t\tif ($adb->num_rows($fields_query) > 0) {\n\t\t\tfor ($i = 0; $i < $adb->num_rows($fields_query); $i++) {\n\t\t\t\t$col_name = $adb->query_result($fields_query, $i, 'columnname');\n\t\t\t\t$field_id = $adb->query_result($fields_query, $i, 'fieldid');\n\t\t\t\t$tab_name = $adb->query_result($fields_query, $i, 'tablename');\n\t\t\t\t$ui10_modules_query = $adb->pquery('SELECT relmodule FROM vtiger_fieldmodulerel WHERE fieldid=?', array($field_id));\n\n\t\t\t\tif ($adb->num_rows($ui10_modules_query) > 0) {\n\t\t\t\t\t// Capture the forward table dependencies due to dynamic related-field\n\t\t\t\t\t$crmentityRelModuleFieldTable = \"vtiger_crmentityRel$module$field_id\";\n\n\t\t\t\t\t$crmentityRelModuleFieldTableDeps = array();\n\t\t\t\t\tfor ($j = 0; $j < $adb->num_rows($ui10_modules_query); $j++) {\n\t\t\t\t\t\t$rel_mod = $adb->query_result($ui10_modules_query, $j, 'relmodule');\n\t\t\t\t\t\t$rel_obj = CRMEntity::getInstance($rel_mod);\n\t\t\t\t\t\t$rel_tab_name = $rel_obj->table_name;\n\t\t\t\t\t\t$crmentityRelModuleFieldTableDeps[] = $rel_tab_name . \"Rel$module$field_id\";\n\t\t\t\t\t}\n\t\t\t\t\t$matrix->setDependency($crmentityRelModuleFieldTable, $crmentityRelModuleFieldTableDeps);\n\t\t\t\t\t$matrix->addDependency($tab_name, $crmentityRelModuleFieldTable);\n\n\t\t\t\t\tif ($queryPlanner->requireTable($crmentityRelModuleFieldTable, $matrix)) {\n\t\t\t\t\t\t$relquery.= ' left join '.$this->crmentityTable.\" as $crmentityRelModuleFieldTable on \".\n\t\t\t\t\t\t\t\"$crmentityRelModuleFieldTable.crmid = $tab_name.$col_name and $crmentityRelModuleFieldTable.deleted=0\";\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ($j = 0; $j < $adb->num_rows($ui10_modules_query); $j++) {\n\t\t\t\t\t\t$rel_mod = $adb->query_result($ui10_modules_query, $j, 'relmodule');\n\t\t\t\t\t\t$rel_obj = CRMEntity::getInstance($rel_mod);\n\n\t\t\t\t\t\t$rel_tab_name = $rel_obj->table_name;\n\t\t\t\t\t\t$rel_tab_index = $rel_obj->table_index;\n\n\t\t\t\t\t\t$rel_tab_name_rel_module_table_alias = $rel_tab_name . \"Rel$module$field_id\";\n\n\t\t\t\t\t\tif ($queryPlanner->requireTable($rel_tab_name_rel_module_table_alias)) {\n\t\t\t\t\t\t\t$relquery.= \" left join $rel_tab_name as $rel_tab_name_rel_module_table_alias on \".\n\t\t\t\t\t\t\t\t\"$rel_tab_name_rel_module_table_alias.$rel_tab_index = $crmentityRelModuleFieldTable.crmid\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$query = \"from $moduletable \";\n\t\t$query .= 'inner join '.$this->crmentityTableAlias.\" on vtiger_crmentity.crmid=$moduletable.$moduleindex\";\n\n\t\t// Add the pre-joined custom table query\n\t\t$query .= ' ' . $cfquery;\n\n\t\tif ($queryPlanner->requireTable('vtiger_users'.$module) || $queryPlanner->requireTable('vtiger_groups'.$module)) {\n\t\t\t$query .= \" left join vtiger_users as vtiger_users\" . $module . \" on vtiger_users\" . $module . \".id = \".$this->crmentityTable.\".smownerid\";\n\t\t\t$query .= \" left join vtiger_groups as vtiger_groups\" . $module . \" on vtiger_groups\" . $module . \".groupid = \".$this->crmentityTable.\".smownerid\";\n\t\t}\n\t\tif ($queryPlanner->requireTable('vtiger_lastModifiedBy'.$module)) {\n\t\t\t$query .= \" left join vtiger_users as vtiger_lastModifiedBy\" . $module . \" on vtiger_lastModifiedBy\" . $module . \".id = \".$this->crmentityTable.\".modifiedby\";\n\t\t}\n\t\tif ($queryPlanner->requireTable('vtiger_CreatedBy'.$module)) {\n\t\t\t$query .= \" LEFT JOIN vtiger_users AS vtiger_CreatedBy$module ON vtiger_CreatedBy$module.id=\".$this->crmentityTable.\".smcreatorid\";\n\t\t}\n\t\t$query .= ' left join vtiger_groups on vtiger_groups.groupid = '.$this->crmentityTable.'.smownerid';\n\t\t$query .= ' left join vtiger_users on vtiger_users.id = '.$this->crmentityTable.'.smownerid';\n\n\t\t// Add the pre-joined relation table query\n\t\t$query .= ' ' . $relquery;\n\n\t\t$fields_query = $adb->pquery(\n\t\t\t'SELECT vtiger_field.columnname,vtiger_field.tablename,vtiger_field.fieldid\n\t\t\t\tFROM vtiger_field\n\t\t\t\tINNER JOIN vtiger_tab on vtiger_tab.name = ?\n\t\t\t\tWHERE vtiger_tab.tabid=vtiger_field.tabid AND vtiger_field.uitype = 101 and vtiger_field.presence in (0,2)',\n\t\t\tarray($module)\n\t\t);\n\t\tif ($adb->num_rows($fields_query) > 0) {\n\t\t\tfor ($i = 0; $i < $adb->num_rows($fields_query); $i++) {\n\t\t\t\t$field_id = $adb->query_result($fields_query, $i, 'fieldid');\n\t\t\t\t$usrTable = \"vtiger_usersRel$module$field_id\";\n\t\t\t\tif ($queryPlanner->requireTable($usrTable)) {\n\t\t\t\t\t$col_name = $adb->query_result($fields_query, $i, 'columnname');\n\t\t\t\t\t$tab_name = $adb->query_result($fields_query, $i, 'tablename');\n\t\t\t\t\t$query.= \" left join vtiger_users as $usrTable on $usrTable.id = $tab_name.$col_name\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $query;\n\t}\n\n\t/**\n\t * Function to get the secondary query part of a report\n\t * @param string primary module name\n\t * @param string secondary module name\n\t * @return string query string formed on fetching the related data for report for secondary module\n\t */\n\tpublic function generateReportsSecQuery($module, $secmodule, $queryPlanner, $type = '', $where_condition = '') {\n\t\tglobal $adb;\n\t\t$secondary = CRMEntity::getInstance($secmodule);\n\n\t\t$tablename = $secondary->table_name;\n\t\t$tableindex = $secondary->table_index;\n\t\t$modulecftable = $secondary->customFieldTable[0];\n\t\t$modulecfindex = $secondary->customFieldTable[1];\n\n\t\tif (isset($modulecftable) && $queryPlanner->requireTable($modulecftable)) {\n\t\t\t$cfquery = \"left join $modulecftable as $modulecftable on $modulecftable.$modulecfindex=$tablename.$tableindex\";\n\t\t} else {\n\t\t\t$cfquery = '';\n\t\t}\n\n\t\t$relquery = '';\n\t\t$matrix = $queryPlanner->newDependencyMatrix();\n\n\t\t$fields_query = $adb->pquery(\n\t\t\t'SELECT vtiger_field.columnname,vtiger_field.tablename,vtiger_field.fieldid\n\t\t\t\tFROM vtiger_field\n\t\t\t\tINNER JOIN vtiger_tab on vtiger_tab.name=?\n\t\t\t\tWHERE vtiger_tab.tabid=vtiger_field.tabid AND vtiger_field.uitype=10 and vtiger_field.presence in (0,2)',\n\t\t\tarray($secmodule)\n\t\t);\n\n\t\tif ($adb->num_rows($fields_query) > 0) {\n\t\t\tfor ($i = 0; $i < $adb->num_rows($fields_query); $i++) {\n\t\t\t\t$col_name = $adb->query_result($fields_query, $i, 'columnname');\n\t\t\t\t$field_id = $adb->query_result($fields_query, $i, 'fieldid');\n\t\t\t\t$tab_name = $adb->query_result($fields_query, $i, 'tablename');\n\t\t\t\t$ui10_modules_query = $adb->pquery('SELECT relmodule FROM vtiger_fieldmodulerel WHERE fieldid=?', array($field_id));\n\n\t\t\t\tif ($adb->num_rows($ui10_modules_query) > 0) {\n\t\t\t\t\t// Capture the forward table dependencies due to dynamic related-field\n\t\t\t\t\t$crmentityRelSecModuleTable = \"vtiger_crmentityRel$secmodule$i\";\n\n\t\t\t\t\t$crmentityRelSecModuleTableDeps = array();\n\t\t\t\t\tfor ($j = 0; $j < $adb->num_rows($ui10_modules_query); $j++) {\n\t\t\t\t\t\t$rel_mod = $adb->query_result($ui10_modules_query, $j, 'relmodule');\n\t\t\t\t\t\t$rel_obj = CRMEntity::getInstance($rel_mod);\n\t\t\t\t\t\t$rel_tab_name = $rel_obj->table_name;\n\t\t\t\t\t\t$crmentityRelSecModuleTableDeps[] = $rel_tab_name . \"Rel$secmodule\" . $field_id;\n\t\t\t\t\t}\n\t\t\t\t\t$matrix->setDependency($crmentityRelSecModuleTable, $crmentityRelSecModuleTableDeps);\n\t\t\t\t\t$matrix->addDependency($tab_name, $crmentityRelSecModuleTable);\n\n\t\t\t\t\tif ($queryPlanner->requireTable($crmentityRelSecModuleTable, $matrix)) {\n\t\t\t\t\t\t$relquery .= ' left join '.$this->crmentityTable.\" as $crmentityRelSecModuleTable on \".\n\t\t\t\t\t\t\t\"$crmentityRelSecModuleTable.crmid = $tab_name.$col_name and $crmentityRelSecModuleTable.deleted=0\";\n\t\t\t\t\t}\n\t\t\t\t\tfor ($j = 0; $j < $adb->num_rows($ui10_modules_query); $j++) {\n\t\t\t\t\t\t$rel_mod = $adb->query_result($ui10_modules_query, $j, 'relmodule');\n\t\t\t\t\t\t$rel_obj = CRMEntity::getInstance($rel_mod);\n\t\t\t\t\t\t$rel_tab_name = $rel_obj->table_name;\n\t\t\t\t\t\t$rel_tab_index = $rel_obj->table_index;\n\t\t\t\t\t\t$rel_tab_name_rel_secmodule_table_alias = $rel_tab_name . \"Rel$secmodule\" . $field_id;\n\t\t\t\t\t\tif ($queryPlanner->requireTable($rel_tab_name_rel_secmodule_table_alias)) {\n\t\t\t\t\t\t\t$relquery .= \" left join $rel_tab_name as $rel_tab_name_rel_secmodule_table_alias on \".\n\t\t\t\t\t\t\t\t\"$rel_tab_name_rel_secmodule_table_alias.$rel_tab_index = $crmentityRelSecModuleTable.crmid\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update forward table dependencies\n\t\t$matrix->setDependency(\"vtiger_crmentity$secmodule\", array(\"vtiger_groups$secmodule\", \"vtiger_users$secmodule\", \"vtiger_lastModifiedBy$secmodule\"));\n\t\t$matrix->addDependency($tablename, \"vtiger_crmentity$secmodule\");\n\n\t\tif (!$queryPlanner->requireTable($tablename, $matrix) && !$queryPlanner->requireTable($modulecftable)) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$query = $this->getRelationQuery($module, $secmodule, \"$tablename\", \"$tableindex\", $queryPlanner);\n\n\t\tif ($queryPlanner->requireTable(\"vtiger_crmentity$secmodule\", $matrix)) {\n\t\t\t$query .= ' left join '.$this->crmentityTable.\" as vtiger_crmentity$secmodule on \".\n\t\t\t\t\"vtiger_crmentity$secmodule.crmid = $tablename.$tableindex AND vtiger_crmentity$secmodule.deleted=0\";\n\t\t}\n\n\t\t// Add the pre-joined custom table query\n\t\t$query .= ' '.$cfquery;\n\n\t\tif ($queryPlanner->requireTable(\"vtiger_groups$secmodule\")) {\n\t\t\t$query .= ' left join vtiger_groups as vtiger_groups' . $secmodule . ' on vtiger_groups' . $secmodule . \".groupid = vtiger_crmentity$secmodule.smownerid\";\n\t\t}\n\t\tif ($queryPlanner->requireTable(\"vtiger_users$secmodule\")) {\n\t\t\t$query .= ' left join vtiger_users as vtiger_users' . $secmodule . ' on vtiger_users' . $secmodule . \".id = vtiger_crmentity$secmodule.smownerid\";\n\t\t}\n\t\tif ($queryPlanner->requireTable(\"vtiger_currency_info$secmodule\")) {\n\t\t\t$query .=' left join vtiger_currency_info as vtiger_currency_info' . $secmodule . ' on vtiger_currency_info' . $secmodule . \".id = $tablename.currency_id\";\n\t\t}\n\t\tif ($queryPlanner->requireTable(\"vtiger_lastModifiedBy$secmodule\")) {\n\t\t\t$query .= ' left join vtiger_users as vtiger_lastModifiedBy' . $secmodule . ' on '.\n\t\t\t\t'vtiger_lastModifiedBy' . $secmodule . '.id = vtiger_crmentity' . $secmodule . '.modifiedby';\n\t\t}\n\t\tif ($queryPlanner->requireTable('vtiger_CreatedBy'.$secmodule)) {\n\t\t\t$query .= \" LEFT JOIN vtiger_users AS vtiger_CreatedBy$secmodule ON vtiger_CreatedBy$secmodule.id=\".$this->crmentityTable.\".smcreatorid\";\n\t\t}\n\t\t// Add the pre-joined relation table query\n\t\t$query .= ' ' . $relquery;\n\n\t\treturn $query;\n\t}\n\n\t/**\n\t * Function to get the security query part of a report\n\t * @param string primary module name\n\t * @return string query string formed on fetching the related data for report for security of the module\n\t */\n\tpublic function getListViewSecurityParameter($module) {\n\t\tglobal $current_user;\n\t\tif ($current_user) {\n\t\t\t$userprivs = $current_user->getPrivileges();\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t\t$sec_query = '';\n\t\t$tabid = getTabid($module);\n\t\tif (!$userprivs->hasGlobalReadPermission() && !$userprivs->hasModuleReadSharing($tabid)) {\n\t\t\t$sec_query .= ' and ('.$this->crmentityTable.\".smownerid=$current_user->id or \"\n\t\t\t\t.$this->crmentityTable.\".smownerid in (select vtiger_user2role.userid\n\t\t\t\t\tfrom vtiger_user2role\n\t\t\t\t\tinner join vtiger_role on vtiger_role.roleid=vtiger_user2role.roleid\n\t\t\t\t\twhere vtiger_role.parentrole like '\" . $userprivs->getParentRoleSequence() . \"::%') or \"\n\t\t\t\t.$this->crmentityTable.\".smownerid in (select shareduserid\n\t\t\t\t\tfrom vtiger_tmp_read_user_sharing_per where userid=\" . $current_user->id . ' and tabid=' . $tabid . ') or (';\n\t\t\tif ($userprivs->hasGroups()) {\n\t\t\t\t$sec_query .= ' vtiger_groups.groupid in (' . implode(',', $userprivs->getGroups()) . ') or ';\n\t\t\t}\n\t\t\t$sec_query .= ' vtiger_groups.groupid in (select vtiger_tmp_read_group_sharing_per.sharedgroupid\n\t\t\t\tfrom vtiger_tmp_read_group_sharing_per\n\t\t\t\twhere userid=' . $current_user->id . ' and tabid=' . $tabid . ')))';\n\t\t}\n\t\treturn $sec_query;\n\t}\n\n\t/**\n\t * Function to get the security query part of a report\n\t * @param string $module primary module name\n\t * @return string query formed on fetching the related data for report for security of the module\n\t * @deprecated\n\t */\n\tpublic function getSecListViewSecurityParameter($module) {\n\t\t$tabid = getTabid($module);\n\t\tglobal $current_user;\n\t\tif ($current_user) {\n\t\t\t$userprivs = $current_user->getPrivileges();\n\t\t}\n\t\t$sec_query = \" and (vtiger_crmentity$module.smownerid=$current_user->id or vtiger_crmentity$module.smownerid in \".\n\t\t\t\"(select vtiger_user2role.userid\n\t\t\t\tfrom vtiger_user2role\n\t\t\t\tinner join vtiger_role on vtiger_role.roleid=vtiger_user2role.roleid\n\t\t\t\twhere vtiger_role.parentrole like '\" . $userprivs->getParentRoleSequence() . \"::%') or vtiger_crmentity$module.smownerid in \".\n\t\t\t\t\t\"(select shareduserid from vtiger_tmp_read_user_sharing_per where userid=\" . $current_user->id . ' and tabid=' . $tabid . ') or (';\n\n\t\tif ($userprivs->hasGroups()) {\n\t\t\t$sec_query .= \" vtiger_groups$module.groupid in (\" . implode(',', $userprivs->getGroups()) . ') or ';\n\t\t}\n\t\t$sec_query .= \" vtiger_groups$module.groupid in \".\n\t\t\t'(select vtiger_tmp_read_group_sharing_per.sharedgroupid\n\t\t\t\tfrom vtiger_tmp_read_group_sharing_per\n\t\t\t\twhere userid=' . $current_user->id . ' and tabid=' . $tabid . '))) ';\n\t\treturn $sec_query;\n\t}\n\n\t/**\n\t * Function to get the relation query part of a report\n\t * @param string primary module name\n\t * @param string secondary module name\n\t * @return string query string formed on relating the primary module and secondary module\n\t */\n\tpublic function getRelationQuery($module, $secmodule, $table_name, $column_name, $queryPlanner) {\n\t\tglobal $adb;\n\t\t$tab = getRelationTables($module, $secmodule);\n\n\t\tforeach ($tab as $key => $value) {\n\t\t\t$tables[] = $key;\n\t\t\t$fields[] = $value;\n\t\t}\n\t\t$pritablename = $tables[0];\n\t\t$sectablename = isset($tables[1])?$tables[1]:'';\n\t\t$prifieldname = $fields[0][0];\n\t\t$secfieldname = $fields[0][1];\n\t\t$tmpname = $pritablename . 'tmp' . $secmodule;\n\t\t$condition = '';\n\t\tif (!empty($tables[1]) && !empty($fields[1])) {\n\t\t\t$condvalue = $tables[1] . '.' . $fields[1];\n\t\t\t$condtable = $table_name;\n\t\t\t$condition = \"$condtable.$prifieldname=$condvalue\";\n\t\t} else {\n\t\t\t$condvalue = $table_name . '.' . $column_name;\n\t\t\t$condtable = $pritablename;\n\t\t\t$cntbl = $adb->getColumnNames($condtable);\n\t\t\tif (!in_array($secfieldname, $cntbl)) {\n\t\t\t\t$condtable = $table_name;\n\t\t\t}\n\t\t\t$condition = \"$condtable.$secfieldname=$condvalue\";\n\t\t}\n\t\t$queryPlanner->addTable($condtable);\n\t\t$selectColumns = \"$table_name.*\";\n\n\t\t// Look forward for temporary table usage as defined by the QueryPlanner\n\t\t$secQueryFrom = \" FROM $table_name \";\n\t\t$secQueryFrom .= 'INNER JOIN '.$this->crmentityTableAlias.\" ON vtiger_crmentity.crmid=$table_name.$column_name AND \".$this->crmentityTable.\".deleted=0 \";\n\n\t\t//The relation field exists in custom field . relation field added from layout editor\n\t\tif ($pritablename != $table_name && $secmodule != 'Emails') {\n\t\t\t$modulecftable = $this->customFieldTable[0];\n\t\t\t$modulecfindex = $this->customFieldTable[1];\n\n\t\t\tif (isset($modulecftable)) {\n\t\t\t\t$columns = $adb->getColumnNames($modulecftable);\n\t\t\t\t//remove the primary key since it will conflict with base table column name or else creating temporary table will fail for duplicate columns\n\t\t\t\t//eg : vtiger_potential has potentialid and vtiger_potentialscf has same potentialid\n\t\t\t\tunset($columns[array_search($modulecfindex, $columns)]);\n\t\t\t\tif (!empty($columns)) {\n\t\t\t\t\t$cfSelectString = implode(',', $columns);\n\t\t\t\t\t$selectColumns .= ','.$cfSelectString;\n\t\t\t\t}\n\t\t\t\t$cfquery = \"LEFT JOIN $modulecftable ON $modulecftable.$modulecfindex=$table_name.$column_name\";\n\t\t\t\t$secQueryFrom .= $cfquery;\n\t\t\t}\n\t\t}\n\n\t\t$secQuery = 'SELECT '.$selectColumns.' '.$secQueryFrom;\n\t\t$secQueryTempTableQuery = $queryPlanner->registerTempTable($secQuery, array($column_name, $secfieldname, $prifieldname), $secmodule);\n\n\t\t$query = '';\n\t\tif ($pritablename == 'vtiger_crmentityrel') {\n\t\t\t$condition = \"$table_name.$column_name={$tmpname}.{$prifieldname}\";\n\t\t\t$query = \" left join vtiger_crmentityreldenorm as $tmpname ON $condvalue={$tmpname}.{$secfieldname} \";\n\t\t} elseif (strripos($pritablename, 'rel') === (strlen($pritablename) - 3)) {\n\t\t\t$instance = self::getInstance($module);\n\t\t\t$sectableindex = $instance->tab_name_index[$sectablename];\n\t\t\t$condition = \"$table_name.$column_name=$tmpname.$secfieldname\";\n\t\t\tif ($pritablename === 'vtiger_senotesrel') {\n\t\t\t\t$query = \" left join $pritablename as $tmpname ON ($sectablename.$sectableindex=$tmpname.$prifieldname\n\t\t\t\t\tAND $tmpname.notesid IN (SELECT crmid FROM vtiger_crmobject WHERE setype='Documents' AND deleted = 0))\";\n\t\t\t} else {\n\t\t\t\t$query = \" left join $pritablename as $tmpname ON ($sectablename.$sectableindex=$tmpname.$prifieldname)\";\n\t\t\t}\n\t\t\tif ($secmodule == 'Leads') {\n\t\t\t\t$val_conv = ((isset($_COOKIE['LeadConv']) && $_COOKIE['LeadConv'] == 'true') ? 1 : 0);\n\t\t\t\t$condition .= \" AND $table_name.converted = $val_conv\";\n\t\t\t}\n\t\t}\n\n\t\t$query .= \" left join $secQueryTempTableQuery as $table_name on {$condition}\";\n\t\treturn $query;\n\t}\n\n\t/**\n\t * To keep track of action of field filtering and avoiding doing more than once.\n\t *\n\t * @var boolean\n\t */\n\tpublic $__inactive_fields_filtered = false;\n\n\t/**\n\t * Filter in-active fields based on type\n\t *\n\t * @param string $module\n\t */\n\tpublic function filterInactiveFields($module) {\n\t\tif ($this->__inactive_fields_filtered) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Look for fields that has presence value NOT IN (0,2)\n\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module, array('1'));\n\t\tif ($cachedModuleFields === false) {\n\t\t\t// Initialize the fields calling suitable API\n\t\t\tgetColumnFields($module);\n\t\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module, array('1'));\n\t\t}\n\n\t\t$hiddenFields = array();\n\n\t\tif ($cachedModuleFields) {\n\t\t\tforeach ($cachedModuleFields as $fieldinfo) {\n\t\t\t\t$fieldLabel = $fieldinfo['fieldlabel'];\n\t\t\t\t// NOTE: We should not translate the label to enable field diff based on it down\n\t\t\t\t$fieldName = $fieldinfo['fieldname'];\n\t\t\t\t$tableName = str_replace('vtiger_', '', $fieldinfo['tablename']);\n\t\t\t\t$hiddenFields[$fieldLabel] = array($tableName => $fieldName);\n\t\t\t}\n\t\t}\n\n\t\tif (isset($this->list_fields)) {\n\t\t\t$this->list_fields = array_diff_key($this->list_fields, $hiddenFields);\n\t\t}\n\n\t\tif (isset($this->search_fields)) {\n\t\t\t$this->search_fields = array_diff_key($this->search_fields, $hiddenFields);\n\t\t}\n\n\t\t// To avoid re-initializing everytime.\n\t\t$this->__inactive_fields_filtered = true;\n\t}\n\n\tpublic function buildSearchQueryForFieldTypes($uitypes, $value = false) {\n\t\t$uitypes = (array)$uitypes;\n\t\t$module = get_class($this);\n\n\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module);\n\t\tif ($cachedModuleFields === false) {\n\t\t\tgetColumnFields($module); // This API will initialize the cache as well\n\t\t\t// We will succeed now due to above function call\n\t\t\t$cachedModuleFields = VTCacheUtils::lookupFieldInfo_Module($module);\n\t\t}\n\n\t\t$lookuptables = array();\n\t\t$lookupcolumns = array();\n\t\tforeach ($cachedModuleFields as $fieldinfo) {\n\t\t\tif (in_array($fieldinfo['uitype'], $uitypes)) {\n\t\t\t\t$lookuptables[] = $fieldinfo['tablename'];\n\t\t\t\t$lookupcolumns[] = $fieldinfo['columnname'];\n\t\t\t}\n\t\t}\n\n\t\t$entityfields = getEntityField($module);\n\t\t$querycolumnnames = implode(',', $lookupcolumns);\n\t\t$entitycolumnnames = $entityfields['fieldname'];\n\t\t$query = \"select crmid as id, $querycolumnnames, $entitycolumnnames as name \";\n\t\t$query .= \" FROM $this->table_name \";\n\t\t$query .=' INNER JOIN '.$this->crmentityTableAlias.\" ON $this->table_name.$this->table_index = vtiger_crmentity.crmid AND vtiger_crmentity.deleted = 0 \";\n\n\t\t//remove the base table\n\t\t$LookupTable = array_unique($lookuptables);\n\t\t$indexes = array_keys($LookupTable, $this->table_name);\n\t\tif (!empty($indexes)) {\n\t\t\tforeach ($indexes as $index) {\n\t\t\t\tunset($LookupTable[$index]);\n\t\t\t}\n\t\t}\n\t\tforeach ($LookupTable as $tablename) {\n\t\t\t$query .= \" INNER JOIN $tablename on $this->table_name.$this->table_index = $tablename.\" . $this->tab_name_index[$tablename];\n\t\t}\n\t\tif (!empty($lookupcolumns) && $value !== false) {\n\t\t\t$query .=' WHERE ';\n\t\t\t$i = 0;\n\t\t\t$columnCount = count($lookupcolumns);\n\t\t\tforeach ($lookupcolumns as $columnname) {\n\t\t\t\tif (!empty($columnname)) {\n\t\t\t\t\tif ($i == 0 || $i == ($columnCount)) {\n\t\t\t\t\t\t$query .= sprintf(\"%s = '%s'\", $columnname, $value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$query .= sprintf(\" OR %s = '%s'\", $columnname, $value);\n\t\t\t\t\t}\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $query;\n\t}\n\n\t/**\n\t *\n\t * @param string $tableName\n\t * @return string\n\t */\n\tpublic function getJoinClause($tableName) {\n\t\tif (strripos($tableName, 'rel') === (strlen($tableName) - 3)) {\n\t\t\treturn 'LEFT JOIN';\n\t\t} else {\n\t\t\treturn 'INNER JOIN';\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param string module\n\t * @param object Users\n\t * @param string parentRole\n\t * @param string userGroups comma-separated list\n\t */\n\tpublic function getNonAdminAccessQuery($module, $user, $parentRole, $userGroups) {\n\t\t$query = $this->getNonAdminUserAccessQuery($user, $parentRole, $userGroups);\n\t\tif (!empty($module)) {\n\t\t\t$moduleAccessQuery = $this->getNonAdminModuleAccessQuery($module, $user);\n\t\t\tif (!empty($moduleAccessQuery)) {\n\t\t\t\t$query .= \" UNION $moduleAccessQuery\";\n\t\t\t}\n\t\t}\n\t\treturn $query;\n\t}\n\n\t/**\n\t *\n\t * @param object Users\n\t * @param string parentRole\n\t * @param string userGroups comma-separated list\n\t */\n\tpublic function getNonAdminUserAccessQuery($user, $parentRole, $userGroups) {\n\t\t$query = \"(SELECT $user->id as id) UNION (SELECT vtiger_user2role.userid AS userid FROM vtiger_user2role\"\n\t\t\t.\" INNER JOIN vtiger_role ON vtiger_role.roleid=vtiger_user2role.roleid WHERE vtiger_role.parentrole like '$parentRole::%')\";\n\t\tif (count($userGroups) > 0) {\n\t\t\t$query .= ' UNION (SELECT groupid FROM vtiger_groups where groupid in (' . implode(',', $userGroups) . '))';\n\t\t}\n\t\treturn $query;\n\t}\n\n\t/**\n\t *\n\t * @param string module\n\t * @param object Users\n\t */\n\tpublic function getNonAdminModuleAccessQuery($module, $user) {\n\t\t$userprivs = $user->getPrivileges();\n\t\t$tabId = getTabid($module);\n\t\t$sharingRuleInfo = $userprivs->getModuleSharingRules($module, 'read');\n\t\t$query = '';\n\t\tif (!empty($sharingRuleInfo) && (count($sharingRuleInfo['ROLE']) > 0 || count($sharingRuleInfo['GROUP']) > 0)) {\n\t\t\t$query = ' (SELECT shareduserid FROM vtiger_tmp_read_user_sharing_per ' .\n\t\t\t\t\t\"WHERE userid=$user->id AND tabid=$tabId) UNION (SELECT \" .\n\t\t\t\t\t'vtiger_tmp_read_group_sharing_per.sharedgroupid FROM ' .\n\t\t\t\t\t\"vtiger_tmp_read_group_sharing_per WHERE userid=$user->id AND tabid=$tabId)\";\n\t\t}\n\t\treturn $query;\n\t}\n\n\t/** Creates a temporary table with permission IDs\n\t * @param string temporary table name to create\n\t * @param string module name for the permissions\n\t * @param object Users to calculate the permissions for\n\t * @param string parent Role of the user\n\t * @param string user Groups comma-separated list of groups the user belongs to\n\t * @return boolean if temporary table has been created or not\n\t */\n\tprotected function setupTemporaryTable($tableName, $sharedmodule, $user, $parentRole, $userGroups) {\n\t\t$module = null;\n\t\tif (!empty($sharedmodule)) {\n\t\t\t$module = $sharedmodule;\n\t\t}\n\t\t$query = $this->getNonAdminAccessQuery($module, $user, $parentRole, $userGroups);\n\t\t$query = \"create temporary table IF NOT EXISTS $tableName(id int(11) primary key) ignore \" . $query;\n\t\t$db = PearDatabase::getInstance();\n\t\t$result = $db->pquery($query, array());\n\t\treturn is_object($result);\n\t}\n\n\t/**\n\t *\n\t * @param string module name for which query needs to be generated\n\t * @param Users user for which query needs to be generated\n\t * @return string Access control Query for the user\n\t */\n\tpublic function getNonAdminAccessControlQuery($module, $user, $scope = '') {\n\t\tglobal $currentModule;\n\t\t$userprivs = $user->getPrivileges();\n\t\t$query = ' ';\n\t\t$tabId = getTabid($module);\n\t\tif (!$userprivs->hasGlobalReadPermission() && !$userprivs->hasModuleReadSharing($tabId)) {\n\t\t\t$tableName = 'vt_tmp_u' . $user->id;\n\t\t\t$sharingRuleInfo = $userprivs->getModuleSharingRules($module, 'read');\n\t\t\t$sharedModule = null;\n\t\t\tif (!empty($sharingRuleInfo) && (count($sharingRuleInfo['ROLE']) > 0 || count($sharingRuleInfo['GROUP']) > 0)) {\n\t\t\t\t$tableName = $tableName . '_t' . $tabId;\n\t\t\t\t$sharedModule = $module;\n\t\t\t} elseif (!empty($scope)) {\n\t\t\t\t$tableName .= '_t' . $tabId;\n\t\t\t}\n\t\t\tlist($tsSpecialAccessQuery, $typeOfPermissionOverride, $unused1, $unused2, $SpecialPermissionMayHaveDuplicateRows) = cbEventHandler::do_filter(\n\t\t\t\t'corebos.permissions.accessquery',\n\t\t\t\tarray(' ', 'none', $module, $user, true)\n\t\t\t);\n\t\t\tif ($typeOfPermissionOverride=='fullOverride') {\n\t\t\t\t// create the default temporary table in case it is needed\n\t\t\t\t$this->setupTemporaryTable($tableName, $sharedModule, $user, $userprivs->getParentRoleSequence(), $userprivs->getGroups());\n\t\t\t\tVTCacheUtils::updateCachedInformation('SpecialPermissionWithDuplicateRows', $SpecialPermissionMayHaveDuplicateRows);\n\t\t\t\treturn $tsSpecialAccessQuery;\n\t\t\t}\n\t\t\tif ($typeOfPermissionOverride=='none' || trim($tsSpecialAccessQuery)=='') {\n\t\t\t\t$this->setupTemporaryTable($tableName, $sharedModule, $user, $userprivs->getParentRoleSequence(), $userprivs->getGroups());\n\t\t\t\t$query = \" INNER JOIN $tableName $tableName$scope ON $tableName$scope.id = \".$this->crmentityTable.\"$scope.smownerid \";\n\t\t\t} else {\n\t\t\t\tglobal $adb;\n\t\t\t\tVTCacheUtils::updateCachedInformation('SpecialPermissionWithDuplicateRows', $SpecialPermissionMayHaveDuplicateRows);\n\t\t\t\t$tsTableName = \"tsolucio_tmp_u{$user->id}\";\n\t\t\t\tif ($currentModule == 'Reports') {\n\t\t\t\t\t$tsTableName = \"tsolucio_tmp_u{$user->id}\".str_replace('.', '', uniqid($user->id, true));\n\t\t\t\t}\n\t\t\t\t$adb->query(\"drop table if exists {$tsTableName}\");\n\t\t\t\tif ($typeOfPermissionOverride=='addToUserPermission') {\n\t\t\t\t\t$query = $this->getNonAdminAccessQuery($module, $user, $userprivs->getParentRoleSequence(), $userprivs->getGroups());\n\t\t\t\t\t$tsSpecialAccessQuery = \"$query UNION ($tsSpecialAccessQuery) \";\n\t\t\t\t}\n\t\t\t\t$adb->query(\"create temporary table {$tsTableName} (id int primary key) as {$tsSpecialAccessQuery}\");\n\t\t\t\tif ($typeOfPermissionOverride=='addToUserPermission') {\n\t\t\t\t\t$query = \" INNER JOIN {$tsTableName} on ({$tsTableName}.id=vtiger_crmentity$scope.crmid or {$tsTableName}.id = vtiger_crmentity$scope.smownerid) \";\n\t\t\t\t} elseif ($typeOfPermissionOverride=='showTheseRecords') {\n\t\t\t\t\t$query = \" INNER JOIN {$tsTableName} on {$tsTableName}.id=vtiger_crmentity.crmid \";\n\t\t\t\t} elseif ($typeOfPermissionOverride=='SubstractFromUserPermission') {\n\t\t\t\t\t$this->setupTemporaryTable($tableName, $sharedModule, $user, $userprivs->getParentRoleSequence(), $userprivs->getGroups());\n\t\t\t\t\t$query = \" INNER JOIN $tableName $tableName$scope ON $tableName$scope.id = vtiger_crmentity$scope.smownerid \";\n\t\t\t\t\t$query .= \" INNER JOIN {$tsTableName} on {$tsTableName}.id=vtiger_crmentity.crmid \";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $query;\n\t}\n\n\tpublic function listQueryNonAdminChange($query, $scope = '') {\n\t\t//make the module base table as left hand side table for the joins,\n\t\t//as mysql query optimizer puts crmentity on the left side and considerably slow down\n\t\t$query = preg_replace('/\\s+/', ' ', $query);\n\t\tif (strripos($query, ' WHERE ') !== false) {\n\t\t\t$query = str_ireplace(' where ', \" WHERE $this->table_name.$this->table_index>0 AND \", $query);\n\t\t}\n\t\treturn $query;\n\t}\n\n\t/**\n\t * Function to get the relation tables for related modules between module and this module\n\t * @param string secondary module name\n\t * @return array table names and fieldnames storing relations\n\t */\n\tpublic function setRelationTables($secmodule) {\n\t\t$rel_tables = array(\n\t\t\t'Documents' => array('vtiger_senotesrel' => array('crmid', 'notesid'), $this->table_name => $this->table_index),\n\t\t);\n\t\treturn isset($rel_tables[$secmodule]) ? $rel_tables[$secmodule] : '';\n\t}\n\n\t/**\n\t * Function to clear the fields which needs to be saved only once during the Save of the record\n\t * For eg: Comments of HelpDesk should be saved only once during one save of a Trouble Ticket\n\t */\n\tpublic function clearSingletonSaveFields() {\n\t\t// just return here\n\t}\n\n\t/**\n\t * Function to track when a new record is linked to a given record\n\t */\n\tpublic function trackLinkedInfo($module, $crmid, $with_module, $with_crmid) {\n\t\tglobal $current_user;\n\t\t$adb = PearDatabase::getInstance();\n\t\t$currentTime = date('Y-m-d H:i:s');\n\t\t$adb->pquery('UPDATE '.$this->crmentityTable.' SET modifiedtime=?, modifiedby=? WHERE crmid=?', array($currentTime, $current_user->id, $crmid));\n\t}\n\n\t/**\n\t * Function to get sort order\n\t * @return string sortorder string either 'ASC' or 'DESC'\n\t */\n\tpublic function getSortOrder() {\n\t\tglobal $log, $adb;\n\t\t$cmodule = get_class($this);\n\t\t$log->debug('> getSortOrder');\n\t\t$sorder = strtoupper(GlobalVariable::getVariable('Application_ListView_Default_OrderDirection', $this->default_sort_order, $cmodule));\n\t\tif (isset($_REQUEST['sorder'])) {\n\t\t\t$sorder = $adb->sql_escape_string($_REQUEST['sorder']);\n\t\t} elseif (!empty($_SESSION[$cmodule.'_Sort_Order'])) {\n\t\t\t$sorder = $adb->sql_escape_string($_SESSION[$cmodule.'_Sort_Order']);\n\t\t}\n\t\t$log->debug('< getSortOrder');\n\t\treturn $sorder;\n\t}\n\n\t/**\n\t * Function to get order by\n\t * @return string fieldname(eg: 'accountname')\n\t */\n\tpublic function getOrderBy() {\n\t\tglobal $log, $adb;\n\t\t$log->debug('> getOrderBy');\n\t\t$cmodule = get_class($this);\n\t\t$order_by = '';\n\t\t$customView = new CustomView($cmodule);\n\t\t$viewid = $customView->getViewId($cmodule);\n\t\t$cvFields = cbCVManagement::getFieldValuesByCvId($viewid);\n\t\t$sortfieldbyfirst = (empty($cvFields) || empty($cvFields['sortfieldbyfirst']) ? '' : $cvFields['sortfieldbyfirst']);\n\t\tif (GlobalVariable::getVariable('Application_ListView_Default_Sorting', 0, $cmodule)) {\n\t\t\t$order_by = GlobalVariable::getVariable('Application_ListView_Default_OrderField', $this->default_order_by, $cmodule);\n\t\t} elseif (!GlobalVariable::getVariable('Application_ListView_Default_Sorting', 0, $cmodule) && !empty($sortfieldbyfirst)) {\n\t\t\t$order_by = $sortfieldbyfirst;\n\t\t} elseif (!empty($_SESSION[$cmodule.'_Order_By'])) {\n\t\t\t$order_by = $adb->sql_escape_string($_SESSION[$cmodule.'_Order_By']);\n\t\t}\n\n\t\tif (isset($_REQUEST['order_by'])) {\n\t\t\t$order_by = $adb->sql_escape_string($_REQUEST['order_by']);\n\t\t}\n\t\t$log->debug('< getOrderBy');\n\t\treturn $order_by;\n\t}\n\n\t/**\n\t * Function to get all orderbys and sortOrders\n\t * @return array sortArrayList(eg: [{\"orderBy\": \"lastname\", \"sortOrder\": \"ASC\"}, {\"orderBy\": \"firstname\", \"sortOrder\": \"ASC\"}])\n\t */\n\tpublic function getOrderByAndSortOrderList() {\n\t\t$sortArrayList = array();\n\t\t$currentModule = get_class($this);\n\t\t$customView = new CustomView($currentModule);\n\t\t$viewid = $customView->getViewId($currentModule);\n\t\t$order_by = $this->getOrderBy();\n\t\t$sort_order = $this->getSortOrder();\n\t\t$fieldValues = cbCVManagement::getFieldValuesByCvId($viewid);\n\t\t$sortfieldbyfirst = $fieldValues['sortfieldbyfirst'];\n\t\t$sortfieldbysecond = $fieldValues['sortfieldbysecond'];\n\t\tif (!empty($order_by)) {\n\t\t\t$sortArrayList[] = array('orderBy' => $order_by, 'sortOrder' => $sort_order);\n\t\t}\n\t\tif (!empty($sortfieldbysecond) && $order_by == $sortfieldbyfirst) {\n\t\t\t$sortArrayList[] = array('orderBy' => $sortfieldbysecond, 'sortOrder' => $sort_order);\n\t\t}\n\t\treturn $sortArrayList;\n\t}\n\n\t/**\n\t * Function to Listview buttons\n\t * @return array $list_buttons - for module\n\t */\n\tpublic function getListButtons($app_strings) {\n\t\tglobal $currentModule;\n\t\t$list_buttons = array();\n\n\t\tif (isPermitted($currentModule, 'Delete', '') == 'yes') {\n\t\t\t$list_buttons['del'] = $app_strings['LBL_MASS_DELETE'];\n\t\t}\n\t\tif (isPermitted($currentModule, 'EditView', '') == 'yes') {\n\t\t\t$list_buttons['mass_edit'] = $app_strings['LBL_MASS_EDIT'];\n\t\t}\n\t\treturn $list_buttons;\n\t}\n\n\t/**\n\t * Function to track when a record is unlinked to a given record\n\t */\n\tpublic function trackUnLinkedInfo($module, $crmid, $with_module, $with_crmid) {\n\t\tglobal $current_user;\n\t\t$adb = PearDatabase::getInstance();\n\t\t$currentTime = date('Y-m-d H:i:s');\n\t\t$data = array();\n\t\t$data['sourceModule'] = $module;\n\t\t$data['sourceRecordId'] = $crmid;\n\t\t$data['destinationModule'] = $with_module;\n\t\t$data['destinationRecordId'] = $with_crmid;\n\t\tcbEventHandler::do_action('corebos.entity.link.delete.final', $data);\n\t\t$adb->pquery('UPDATE '.$this->crmentityTable.' SET modifiedtime=?, modifiedby=? WHERE crmid=?', array($currentTime, $current_user->id, $crmid));\n\t}\n\n\tpublic function getParentRecords($id, &$parent_records, &$encountered_records, $refField, $currentModule, $tree = false) {\n\t\tglobal $log, $adb, $current_user;\n\t\t$qg = new QueryGenerator($currentModule, $current_user);\n\t\t$qg->setFields(array('*'));\n\t\t$qg->addCondition('id', $id, 'e');\n\t\t$params = array($id);\n\t\t$query = $qg->getQuery();\n\t\t$res = $adb->query($query);\n\t\tif ($adb->num_rows($res) > 0 &&\n\t\t\t$adb->query_result($res, 0, $refField) != '' && $adb->query_result($res, 0, $refField) != 0 &&\n\t\t\t!in_array($adb->query_result($res, 0, $refField), $encountered_records)) {\n\t\t\t$recid = $adb->query_result($res, 0, $refField);\n\t\t\t$encountered_records[] = $recid;\n\t\t\t$this->getParentRecords($recid, $parent_records, $encountered_records, $refField, $currentModule);\n\t\t}\n\t\t$depth = 0;\n\t\t$parent_record_info = array();\n\t\t$immediate_recordid = $adb->query_result($res, 0, $refField);\n\t\tif (isset($parent_records[$immediate_recordid])) {\n\t\t\t$depth = $parent_records[$immediate_recordid]['depth'] + 1;\n\t\t}\n\t\tif (is_array($tree)) {\n\t\t\t$cvtreecolumn = getEntityName($tree[0], $id);\n\t\t\t$parent_record_info[$tree[1]] = $cvtreecolumn[$id];\n\t\t\t$parent_record_info['id'] = $id;\n\t\t\t$parent_record_info['parent'] = $id;\n\t\t\t$parent_record_info['recordid'] = 'parent_'.$id;\n\t\t\t$parent_records[] = $parent_record_info;\n\t\t} else {\n\t\t\t$parent_record_info['depth'] = $depth;\n\t\t\t$parent_records[$id] = $parent_record_info;\n\t\t}\n\t\treturn $parent_records;\n\t}\n\n\tpublic function getChildRecords($id, &$child_records, $depth, $referenceField, $currentModule, $tree = false) {\n\t\tglobal $log, $adb, $current_user;\n\t\t$log->debug('> getChildRecords '.$id);\n\t\t$entity = getEntityField($currentModule);\n\t\t$entityid = $entity['entityid'];\n\t\t$tablename = $entity['tablename'];\n\t\t$crmentityTable = $this->getcrmEntityTableAlias($currentModule);\n\t\t$query = $adb->convert2Sql(\"select {$tablename}.{$entityid} from {$tablename} inner join {$crmentityTable} on {$tablename}.{$entityid} = vtiger_crmentity.crmid where vtiger_crmentity.deleted=0 and {$tablename}.{$referenceField}=? and {$tablename}.{$entityid} > 0\", array($id));\n\t\t$rs = $adb->query($query);\n\t\t$num_rows = $adb->num_rows($rs);\n\t\tif ($num_rows > 0) {\n\t\t\t$depth = $depth + 1;\n\t\t\tfor ($i=0; $i < $adb->num_rows($rs); $i++) {\n\t\t\t\t$recordid = $adb->query_result($rs, $i, 0);\n\t\t\t\tif (array_key_exists($recordid, $child_records)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$child_record_info = array();\n\t\t\t\tif (is_array($tree)) {\n\t\t\t\t\t$cvtreecolumn = getEntityName($tree[0], $recordid);\n\t\t\t\t\t$child_record_info[$tree[1]] = $cvtreecolumn[$recordid];\n\t\t\t\t\t$child_record_info['id'] = $recordid;\n\t\t\t\t\t$child_record_info['parent'] = $id;\n\t\t\t\t\t$child_record_info['recordid'] = 'parent_'.$recordid;\n\t\t\t\t\t$child_records[] = $child_record_info;\n\t\t\t\t} else {\n\t\t\t\t\t$child_record_info['depth'] = $depth;\n\t\t\t\t\t$child_records[$recordid] = $child_record_info;\n\t\t\t\t}\n\t\t\t\t$this->getChildRecords($recordid, $child_records, $depth, $referenceField, $currentModule, $tree);\n\t\t\t}\n\t\t}\n\t\treturn $child_records;\n\t}\n\n\t/**\n\t* Function to get Module hierarchy of the given record\n\t* @param integer recorid\n\t* @return array Module hierarchy in array format\n\t*/\n\tpublic function getHierarchy($id, $currentModule) {\n\t\tglobal $log, $current_user;\n\t\t$log->debug('> getHierarchy '.$id);\n\t\trequire_once 'include/ListView/GridUtils.php';\n\t\t$listview_header = array();\n\t\t$listview_entries = array();\n\t\t$listview_colname = array();\n\t\t$bmapname = $currentModule.'_ListColumns';\n\t\t$cbMapid = GlobalVariable::getVariable('BusinessMapping_'.$bmapname, cbMap::getMapIdByName($bmapname));\n\t\t$linkfield = $this->list_link_field;\n\t\tif ($cbMapid) {\n\t\t\t$cbMap = cbMap::getMapByID($cbMapid);\n\t\t\t$cbMapLC = $cbMap->ListColumns()->getListFieldsFor($currentModule);\n\t\t\t$linkfield = $cbMap->ListColumns()->getListLinkFor($currentModule);\n\t\t\tif (!empty($cbMapLC)) {\n\t\t\t\tunset($this->list_fields_name);\n\t\t\t\tforeach ($cbMapLC as $label => $fields) {\n\t\t\t\t\t$tmp_field = '';\n\t\t\t\t\tforeach ($fields as $fieldname) {\n\t\t\t\t\t\t$tmp_field = $fieldname;\n\t\t\t\t\t}\n\t\t\t\t\t$this->list_fields_name[$label] = $tmp_field;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tforeach ($this->list_fields_name as $fieldname => $colname) {\n\t\t\tif (getFieldVisibilityPermission($currentModule, $current_user->id, $colname) == '0') {\n\t\t\t\t$listview_colname[] = $colname;\n\t\t\t\tif ($colname == 'assigned_user_id') {\n\t\t\t\t\t$colname = 'smownerid';\n\t\t\t\t}\n\t\t\t\t$listview_header[] = array(\n\t\t\t\t\t'name' => $colname,\n\t\t\t\t\t'header' => getTranslatedString($fieldname)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t$referenceField = $this->getSelfRelationField($currentModule);\n\t\t$records_list = array();\n\t\t$encountered_records = array($id);\n\t\tif ($referenceField) {\n\t\t\t$records_list = $this->getParentRecords($id, $records_list, $encountered_records, $referenceField, $currentModule);\n\t\t\t$records_list = $this->getChildRecords($id, $records_list, $records_list[$id]['depth'], $referenceField, $currentModule);\n\t\t}\n\t\tif (isset($records_list) && !empty($records_list)) {\n\t\t\t$entityField = getEntityField($currentModule);\n\t\t\t$entityField = $entityField['fieldname'];\n\t\t\tforeach ($records_list as $recordID => $dep) {\n\t\t\t\t$depth = $dep['depth'];\n\t\t\t\t$fieldsOf = __cb_getfieldsof(array(\n\t\t\t\t\t$recordID, $currentModule, implode(',', $listview_colname)\n\t\t\t\t));\n\t\t\t\tforeach ($fieldsOf as $field => $fieldValue) {\n\t\t\t\t\t$UIType = getUItype($currentModule, $field);\n\t\t\t\t\t$tabid = getTabid($currentModule);\n\t\t\t\t\t$fieldid = getFieldid($tabid, $field);\n\t\t\t\t\t$fieldinfo = array(\n\t\t\t\t\t\t'fieldtype' => 'corebos',\n\t\t\t\t\t\t'fieldinfo' => [\n\t\t\t\t\t\t\t'name' => $field,\n\t\t\t\t\t\t\t'uitype' => $UIType,\n\t\t\t\t\t\t],\n\t\t\t\t\t\t'name' => $field,\n\t\t\t\t\t\t'uitype' => $UIType,\n\t\t\t\t\t\t'fieldid' => $fieldid\n\t\t\t\t\t);\n\t\t\t\t\t$gridVal = getDataGridValue($currentModule, $recordID, $fieldinfo, $fieldValue);\n\t\t\t\t\t$record_depth = str_repeat(' .. ', $depth * 2);\n\t\t\t\t\tif ($entityField == $field) {\n\t\t\t\t\t\t$fieldVal = $record_depth.$gridVal[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$fieldVal = $gridVal[0];\n\t\t\t\t\t\tif ($linkfield == $field) {\n\t\t\t\t\t\t\t$fieldVal = '<a href=\"index.php?module='.$currentModule.'&action=DetailView&record='.$recordID.'\">'.$record_depth.$fieldValue.'</a>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (isset($gridVal[1]) && !empty($gridVal[1])) {\n\t\t\t\t\t\t$target = '';\n\t\t\t\t\t\tif (isset($gridVal[1][0]['mdTarget'])) {\n\t\t\t\t\t\t\t$target = $gridVal[1][0]['mdTarget'];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$fieldVal = '<a href=\"'.$gridVal[1][0]['mdLink'].'\" '.$target.'>'.$fieldVal.'</a>';\n\t\t\t\t\t}\n\t\t\t\t\tif ($field == 'assigned_user_id') {\n\t\t\t\t\t\t$field = 'smownerid';\n\t\t\t\t\t}\n\t\t\t\t\t$fieldsOf[$field] = $fieldVal;\n\t\t\t\t}\n\t\t\t\t$listview_entries[] = $fieldsOf;\n\t\t\t}\n\t\t}\n\t\t$account_hierarchy = array('header'=>$listview_header,'entries'=>$listview_entries);\n\t\t$log->debug('< getHierarchy');\n\t\treturn $account_hierarchy;\n\t}\n\n\tpublic function getSelfRelationField($module) {\n\t\tglobal $log, $adb;\n\t\t$log->debug('> getSelfRelationField');\n\t\t$rs = $adb->pquery('select columnname from vtiger_fieldmodulerel fl left join vtiger_field f on fl.fieldid=f.fieldid where fl.module=? and fl.relmodule=?', array($module, $module));\n\t\tif ($adb->num_rows($rs) == 1) {\n\t\t\treturn $adb->query_result($rs, 0, 0);\n\t\t}\n\t\t$log->debug('< getSelfRelationField');\n\t\treturn false;\n\t}\n\n\tpublic static function getcrmEntityTableAlias($modulename, $isaliasset = false) {\n\t\t$modObj = CRMEntity::getInstance($modulename);\n\t\tif ($isaliasset) {\n\t\t\treturn $modObj->crmentityTable;\n\t\t}\n\t\treturn (($modObj->crmentityTable != 'vtiger_crmentity') ? $modObj->crmentityTable. ' as vtiger_crmentity':'vtiger_crmentity');\n\t}\n\n\tpublic function isDeleted($id) {\n\t\tglobal $adb;\n\t\t$result = $adb->pquery(\"select deleted from $this->crmentityTable where crmid=?\", array(\n\t\t\t$id\n\t\t));\n\t\treturn boolval($adb->query_result($result, 0, 'deleted'));\n\t}\n}\n?>\n", "<?php\n/*+**********************************************************************************\n * The contents of this file are subject to the vtiger CRM Public License Version 1.0\n * (\"License\"); You may not use this file except in compliance with the License\n * The Original Code is:  vtiger CRM Open Source\n * The Initial Developer of the Original Code is vtiger.\n * Portions created by vtiger are Copyright (C) vtiger.\n * All Rights Reserved.\n ************************************************************************************/\nrequire_once 'Smarty_setup.php';\nrequire_once 'modules/Users/Users.php';\nrequire_once 'include/logging.php';\nrequire_once 'include/utils/UserInfoUtil.php';\n$log = LoggerManager::getLogger('index');\n\nglobal $adb;\n$user_name = empty($_REQUEST['userName']) ? '' : vtlib_purify($_REQUEST['userName']);\nif (isset($_REQUEST['status']) && $_REQUEST['status'] != '') {\n\t$_REQUEST['status']= vtlib_purify($_REQUEST['status']);\n} else {\n\t$_REQUEST['status']='Active';\n}\n\nif (isset($_REQUEST['dup_check']) && $_REQUEST['dup_check'] != '') {\n\t$user_query = 'SELECT user_name FROM vtiger_users WHERE user_name =?';\n\t$user_result = $adb->pquery($user_query, array($user_name));\n\t$group_query = 'SELECT groupname FROM vtiger_groups WHERE groupname =?';\n\t$group_result = $adb->pquery($group_query, array($user_name));\n\tif ($adb->num_rows($user_result) > 0) {\n\t\techo $mod_strings['LBL_USERNAME_EXIST'];\n\t\tdie;\n\t} elseif ($adb->num_rows($group_result) > 0) {\n\t\techo $mod_strings['LBL_GROUPNAME_EXIST'];\n\t\tdie;\n\t} else {\n\t\techo 'SUCCESS';\n\t\tdie;\n\t}\n}\nif (!empty($_REQUEST['user_role']) && !is_admin($current_user) && $_REQUEST['user_role'] != $current_user->roleid) {\n\t$log->fatal('SECURITY:Non-Admin user:'. $current_user->id . ' attempted to change user role');\n\t$smarty = new vtigerCRM_Smarty();\n\t$smarty->assign('APP', $app_strings);\n\t$smarty->assign('ERROR_MESSAGE_CLASS', 'cb-alert-danger');\n\t$smarty->assign('ERROR_MESSAGE', 'SECURITY: Non-Admin user attempted to change user role.');\n\t$smarty->display('applicationmessage.tpl');\n\texit;\n}\n\nif ((empty($_SESSION['Users_FORM_TOKEN']) || $_SESSION['Users_FORM_TOKEN']!==(int)$_REQUEST['form_token'])\n\t\t&& $_REQUEST['deleteImage'] != 'true' && $_REQUEST['changepassword'] != 'true'\n\t) {\n\theader('Location: index.php?action=index&module=Users&error_string='.urlencode(getTranslatedString('FORM_TOKEN_EXPIRED', 'Users')));\n\tdie;\n}\n\nif ((isset($_POST['record']) && !is_admin($current_user) && $_POST['record'] != $current_user->id) || (!isset($_POST['record']) && !is_admin($current_user))) {\n\t$smarty = new vtigerCRM_Smarty();\n\t$smarty->assign('APP', $app_strings);\n\t$smarty->assign('ERROR_MESSAGE_CLASS', 'cb-alert-danger');\n\t$smarty->assign('ERROR_MESSAGE', 'Unauthorized access to user administration.');\n\t$smarty->display('applicationmessage.tpl');\n\texit;\n}\n\n$focus = new Users();\nif (isset($_REQUEST['record']) && $_REQUEST['record'] != '') {\n\t$focus->mode='edit';\n\t$focus->id = vtlib_purify($_REQUEST['record']);\n\t$userrs = $adb->pquery('SELECT user_name FROM vtiger_users WHERE id=?', array($focus->id));\n\t$user_name = $adb->query_result($userrs, 0, 0);\n\tif ($current_user->id != $focus->id && in_array($user_name, $cbodBlockedUsers)) {\n\t\theader('Location: index.php?action=index&module=Users&error_string='.urlencode(getTranslatedString('ERR_CANNOTEDITUSER', 'Users')));\n\t\tdie();\n\t}\n} else {\n\t$focus->mode='';\n}\n\nif (isset($_REQUEST['deleteImage']) && $_REQUEST['deleteImage'] == 'true') {\n\t$focus->id = vtlib_purify($_REQUEST['recordid']);\n\t$focus->deleteImage();\n\techo 'SUCCESS';\n\texit;\n}\n\nif (isset($_REQUEST['changepassword']) && $_REQUEST['changepassword'] == 'true') {\n\t$focus->retrieve_entity_info($_REQUEST['record'], 'Users');\n\t$focus->id = vtlib_purify($_REQUEST['record']);\n\tif (isset($_REQUEST['new_password']) && !$focus->change_password(vtlib_purify($_REQUEST['old_password']), vtlib_purify(substr($_REQUEST['new_password'], 0, 1024)))) {\n\t\theader('Location: index.php?action=DetailView&module=Users&record='.$focus->id.'&error_string='.urlencode($focus->error_string));\n\t\texit;\n\t}\n}\n\nif (empty($_REQUEST['changepassword']) || $_REQUEST['changepassword'] != 'true') {\n\tif (strtolower($current_user->is_admin) == 'off' && $current_user->id != $focus->id) {\n\t\t$log->fatal('SECURITY:Non-Admin '. $current_user->id . ' attempted to change settings for user:'. $focus->id);\n\t\theader('Location: index.php?module=Users&action=Logout');\n\t\texit;\n\t}\n\tif (strtolower($current_user->is_admin) == 'off' && isset($_POST['is_admin']) && strtolower($_POST['is_admin']) == 'on') {\n\t\t$log->fatal('SECURITY:Non-Admin '. $current_user->id . ' attempted to change is_admin settings for user:'. $focus->id);\n\t\theader('Location: index.php?module=Users&action=Logout');\n\t\texit;\n\t}\n\n\tif (!isset($_POST['is_admin'])) {\n\t\t$_REQUEST['is_admin'] = 'off';\n\t}\n\t// rearrange the home page and tab\n\tif (!isset($_POST['deleted'])) {\n\t\t$_REQUEST['deleted'] = '0';\n\t}\n\tif (!isset($_POST['homeorder']) || $_POST['homeorder'] == '') {\n\t\t$_REQUEST['homeorder'] = 'ILTI,QLTQ,ALVT,PLVT,CVLVT,HLT,OLV,GRT,OLTSO';\n\t}\n\tif (isset($_REQUEST['internal_mailer']) && $_REQUEST['internal_mailer'] == 'on') {\n\t\t$focus->column_fields['internal_mailer'] = 1;\n\t} else {\n\t\t$focus->column_fields['internal_mailer'] = 0;\n\t}\n\tif (isset($_SESSION['internal_mailer']) && $_SESSION['internal_mailer'] != $focus->column_fields['internal_mailer']) {\n\t\tcoreBOS_Session::set('internal_mailer', $focus->column_fields['internal_mailer']);\n\t}\n\tsetObjectValuesFromRequest($focus);\n\t$focus->column_fields['email1'] = filter_var($focus->column_fields['email1'], FILTER_SANITIZE_EMAIL);\n\t$focus->column_fields['email2'] = filter_var($focus->column_fields['email2'], FILTER_SANITIZE_EMAIL);\n\t$focus->column_fields['secondaryemail'] = filter_var($focus->column_fields['secondaryemail'], FILTER_SANITIZE_EMAIL);\n\n\tif (empty($focus->column_fields['roleid']) && !empty($_POST['user_role'])) {\n\t\t$focus->column_fields['roleid'] = $_POST['user_role'];\n\t}\n\t$focus->save('Users');\n\n\t$return_id = $focus->id;\n\n\tif (isset($focus->id) && $focus->id != '' && isset($_POST['group_name']) && $_POST['group_name'] != '') {\n\t\tupdateUsers2GroupMapping($_POST['group_name'], $focus->id);\n\t}\n}\nif (isset($_POST['return_module']) && $_POST['return_module'] != '') {\n\t$return_module = vtlib_purify($_REQUEST['return_module']);\n} else {\n\t$return_module = 'Users';\n}\nif (isset($_POST['return_action']) && $_POST['return_action'] != '') {\n\t$return_action = vtlib_purify($_REQUEST['return_action']);\n} else {\n\t$return_action = 'DetailView';\n}\nif (!empty($_REQUEST['return_id'])) {\n\t$return_id = vtlib_purify($_REQUEST['return_id']);\n}\n\n// Check to see if the mode is User Creation and if yes, then sending the email notification to the User with Login details.\n$error_str = '';\nif (isset($_REQUEST['mode']) && $_REQUEST['mode'] == 'create') {\n\tglobal $app_strings, $mod_strings, $default_charset;\n\trequire_once 'modules/Emails/mail.php';\n\t$user_emailid = $focus->column_fields['email1'];\n\n\t$subject = $mod_strings['User Login Details'];\n\t$email_body = $app_strings['MSG_DEAR'].' '. $focus->column_fields['last_name'] .',<br><br>';\n\t$email_body .= $app_strings['LBL_PLEASE_CLICK'] . \" <a href='\" . $site_URL . \"' target='_blank'>\"\n\t\t\t\t. $app_strings['LBL_HERE'] . '</a> ' . $mod_strings['LBL_TO_LOGIN'] . '<br><br>';\n\t$email_body .= $mod_strings['LBL_USER_NAME'] . ' : ' . $focus->column_fields['user_name'] . '<br>';\n\t$email_body .= $mod_strings['LBL_PASSWORD'] . ' : ' . $focus->column_fields['user_password'] . '<br>';\n\t$email_body .= $mod_strings['LBL_ROLE_NAME'] . ' : ' . getRoleName($_POST['user_role']) . '<br>';\n\t$email_body .= '<br>' . $app_strings['MSG_THANKS'] . '<br>' . $current_user->user_name;\n\n\t$HELPDESK_SUPPORT_EMAIL_ID = GlobalVariable::getVariable('HelpDesk_Support_EMail', 'support@your_support_domain.tld', 'HelpDesk');\n\t$HELPDESK_SUPPORT_NAME = GlobalVariable::getVariable('HelpDesk_Support_Name', 'your-support name', 'HelpDesk');\n\t$mail_status = send_mail('Users', $user_emailid, $HELPDESK_SUPPORT_NAME, $HELPDESK_SUPPORT_EMAIL_ID, $subject, $email_body);\n\tif ($mail_status != 1) {\n\t\t$mail_status_str = $user_emailid.'='.$mail_status.'&&&';\n\t\t$error_str = getMailErrorString($mail_status_str);\n\t}\n}\n$location = 'Location: index.php?action='.urlencode(vtlib_purify($return_action)).\n\t'&module='.urlencode(vtlib_purify($return_module)).\n\t'&record='.urlencode(vtlib_purify($return_id));\n\nif ($error_str != '') {\n\t$user = $focus->column_fields['user_name'];\n\t$location .= '&user=' . urlencode($user) . '&' . $error_str;\n}\n\nheader($location);\n?>\n"], "filenames": ["data/CRMEntity.php", "modules/Users/Save.php"], "buggy_code_start_loc": [870, 126], "buggy_code_end_loc": [870, 126], "fixing_code_start_loc": [871, 127], "fixing_code_end_loc": [873, 130], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository tsolucio/corebos prior to 8.", "other": {"cve": {"id": "CVE-2023-3070", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-02T17:15:13.450", "lastModified": "2023-06-08T17:42:35.870", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository tsolucio/corebos prior to 8."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:corebos:corebos:*:*:*:*:*:*:*:*", "versionEndExcluding": "8.0", "matchCriteriaId": "2ED1C4A9-9F39-4663-9E1B-6270C9CC2539"}]}]}], "references": [{"url": "https://github.com/tsolucio/corebos/commit/b3a7a26c60117d7859b8d77b57fd5771a038c93a", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/e193068e-0b95-403a-8453-e015241b8f1b", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/tsolucio/corebos/commit/b3a7a26c60117d7859b8d77b57fd5771a038c93a"}}