{"buggy_code": ["<?php\n\n/**\n * Document Template Management Module.\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Rod Roark <rod@sunsetsystems.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @author    Tyler Wrenn <tyler@tylerwrenn.com>\n * @copyright Copyright (c) 2013-2014 Rod Roark <rod@sunsetsystems.com>\n * @copyright Copyright (c) 2018 Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2020 Tyler Wrenn <tyler@tylerwrenn.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nrequire_once('../globals.php');\n\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Crypto\\CryptoGen;\nuse OpenEMR\\Common\\Csrf\\CsrfUtils;\nuse OpenEMR\\Core\\Header;\n\nif (!AclMain::aclCheckCore('admin', 'super')) {\n    die(xlt('Not authorized'));\n}\n\n// Set up crypto object\n$cryptoGen = new CryptoGen();\n\n$form_filename = convert_safe_file_dir_name($_REQUEST['form_filename'] ?? '');\n\n$templatedir = \"$OE_SITE_DIR/documents/doctemplates\";\n\n// If downloading a file, do the download and nothing else.\n// Thus the current browser page should remain displayed.\n//\nif (!empty($_POST['bn_download'])) {\n    //verify csrf\n    if (!CsrfUtils::verifyCsrfToken($_POST[\"csrf_token_form\"])) {\n        CsrfUtils::csrfNotVerified();\n    }\n\n    $templatepath = \"$templatedir/$form_filename\";\n\n    // Place file in variable\n    $fileData = file_get_contents($templatepath);\n\n    // Decrypt file, if applicable\n    if ($cryptoGen->cryptCheckStandard($fileData)) {\n        $fileData = $cryptoGen->decryptStandard($fileData, null, 'database');\n    }\n\n    header('Content-Description: File Transfer');\n    header('Content-Transfer-Encoding: binary');\n    header('Expires: 0');\n    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n    header('Pragma: public');\n    // attachment, not inline\n    header(\"Content-Disposition: attachment; filename=\\\"$form_filename\\\"\");\n    // Note we avoid providing a mime type that suggests opening the file.\n    header(\"Content-Type: application/octet-stream\");\n    header(\"Content-Length: \" . strlen($fileData));\n    echo $fileData;\n    exit;\n}\n\nif (!empty($_POST['bn_delete'])) {\n    //verify csrf\n    if (!CsrfUtils::verifyCsrfToken($_POST[\"csrf_token_form\"])) {\n        CsrfUtils::csrfNotVerified();\n    }\n\n    $templatepath = \"$templatedir/$form_filename\";\n    if (is_file($templatepath)) {\n        unlink($templatepath);\n    }\n}\n\nif (!empty($_POST['bn_upload'])) {\n    //verify csrf\n    if (!CsrfUtils::verifyCsrfToken($_POST[\"csrf_token_form\"])) {\n        CsrfUtils::csrfNotVerified();\n    }\n\n    // Handle uploads.\n    $tmp_name = $_FILES['form_file']['tmp_name'];\n    if (is_uploaded_file($tmp_name) && $_FILES['form_file']['size']) {\n        // Choose the destination path/filename.\n        $form_dest_filename = $_POST['form_dest_filename'];\n        if ($form_dest_filename == '') {\n            $form_dest_filename = $_FILES['form_file']['name'];\n        }\n\n        $form_dest_filename = convert_safe_file_dir_name(basename($form_dest_filename));\n        if ($form_dest_filename == '') {\n            die(xlt('Cannot determine a destination filename'));\n        }\n        $path_parts = pathinfo($form_dest_filename);\n        if (!in_array(strtolower($path_parts['extension']), array('odt', 'txt', 'docx', 'zip'))) {\n            die(text(strtolower($path_parts['extension'])) . ' ' . xlt('filetype is not accepted'));\n        }\n\n        $templatepath = \"$templatedir/$form_dest_filename\";\n        // If the site's template directory does not yet exist, create it.\n        if (!is_dir($templatedir)) {\n            mkdir($templatedir);\n        }\n\n        // If the target file already exists, delete it.\n        if (is_file($templatepath)) {\n            unlink($templatepath);\n        }\n\n        // Place uploaded file in variable.\n        $fileData = file_get_contents($tmp_name);\n\n        // Encrypt uploaded file, if applicable.\n        if ($GLOBALS['drive_encryption']) {\n            $storedData = $cryptoGen->encryptStandard($fileData, null, 'database');\n        } else {\n            $storedData = $fileData;\n        }\n\n        // Store the uploaded file.\n        if (file_put_contents($templatepath, $storedData) === false) {\n            die(xlt('Unable to create') . \" '\" . text($templatepath) . \"'\");\n        }\n    }\n}\n\n?>\n<html>\n   <head>\n      <title><?php echo xlt('Document Template Management'); ?></title>\n      <?php Header::setupHeader(); ?>\n      <style>\n         .dehead {\n           color: var(--black);\n           font-family: sans-serif;\n           font-size: 0.8125rem;\n           font-weight:bold;\n         }\n         .detail {\n           color: var(--black);\n           font-family: sans-serif;\n           font-size: 0.8125rem;\n           font-weight: normal;\n         }\n      </style>\n   </head>\n   <body class=\"body_top\">\n   <div class=\"container\">\n      <form method='post' action='manage_document_templates.php' enctype='multipart/form-data'\n         onsubmit='return top.restoreSession()'>\n         <input type=\"hidden\" name=\"csrf_token_form\" value=\"<?php echo attr(CsrfUtils::collectCsrfToken()); ?>\" />\n            <h2 class=\"text-center\"><?php echo xlt('Document Template Management'); ?></h2>\n            <div class=\"row\">\n            <div class=\"col-6\">\n               <div class=\"mx-auto mt-3\">\n                  <div class=\"card\">\n                     <h5 class=\"card-header\"><?php echo xlt('Upload a Template'); ?></h5>\n                     <div class=\"card-body\">\n                        <div class=\"custom-file\">\n                           <input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"250000000\" />\n                           <input type=\"file\" name=\"form_file\" size=\"40\" class=\"custom-file-input\" id=\"customFile\" />\n                           <label class=\"custom-file-label\" for=\"customFile\"><?php echo xlt('Choose file'); ?></label>\n                        </div>\n                        <div class=\"input-group mt-3\">\n                          <label for=\"form_dest_filename\"><?php echo xlt('Destination Filename'); ?>:</label>\n                          <input type='text' class=\"form-control\" name='form_dest_filename' id='form_dest_filename' size='30' />\n                          <div class=\"input-group-append\">\n                            <input type='submit' class=\"btn btn-primary\" name='bn_upload' value='<?php echo xla('Upload') ?>' />\n                          </div>\n                        </div>\n                     </div>\n                  </div>\n               </div>\n            </div>\n            <div class=\"col-6\">\n               <div class=\"mx-auto mt-3\">\n                  <div class=\"card\">\n                     <h5 class=\"card-header\"><?php echo xlt('Download or Delete a Template'); ?></h5>\n                     <div class=\"card-body\">\n                        <select class=\"form-control\" name='form_filename'>\n                        <?php\n                        // Generate an <option> for each existing file.\n                        if (file_exists($templatedir)) {\n                            $dh = opendir($templatedir);\n                        } else {\n                            $dh = false;\n                        }\n                        if ($dh) {\n                            $templateslist = array();\n                            while (false !== ($sfname = readdir($dh))) {\n                                if (substr($sfname, 0, 1) == '.') {\n                                    continue;\n                                }\n\n                                $templateslist[$sfname] = $sfname;\n                            }\n\n                            closedir($dh);\n                            ksort($templateslist);\n                            foreach ($templateslist as $sfname) {\n                                echo \"    <option value='\" . attr($sfname) . \"'\";\n                                echo \">\" . text($sfname) . \"</option>\\n\";\n                            }\n                        }\n                        ?>\n                        </select>\n                        <div class=\"mt-3\">\n                           <input type='submit' class=\"btn btn-success\" name='bn_download' value='<?php echo xla('Download') ?>' />\n                           <input type='submit' class=\"btn btn-danger\" name='bn_delete' value='<?php echo xla('Delete') ?>' />\n                        </div>\n                     </div>\n                  </div>\n               </div>\n            </div>\n          </div>\n      </form>\n      </div>\n      <script>\n      //dislpay file name\n        $(\".custom-file-input\").on(\"change\", function() {\n        var fileName = $(this).val().split(\"\\\\\").pop();\n        $(this).siblings(\".custom-file-label\").addClass(\"selected\").html(fileName);\n        });\n        </script>\n   </body>\n</html>\n"], "fixing_code": ["<?php\n\n/**\n * Document Template Management Module.\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Rod Roark <rod@sunsetsystems.com>\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @author    Tyler Wrenn <tyler@tylerwrenn.com>\n * @copyright Copyright (c) 2013-2014 Rod Roark <rod@sunsetsystems.com>\n * @copyright Copyright (c) 2018 Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2020 Tyler Wrenn <tyler@tylerwrenn.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nrequire_once('../globals.php');\n\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Crypto\\CryptoGen;\nuse OpenEMR\\Common\\Csrf\\CsrfUtils;\nuse OpenEMR\\Core\\Header;\n\nif (!AclMain::aclCheckCore('admin', 'super')) {\n    die(xlt('Not authorized'));\n}\n\n// Set up crypto object\n$cryptoGen = new CryptoGen();\n\n$form_filename = convert_safe_file_dir_name($_REQUEST['form_filename'] ?? '');\n\n$templatedir = \"$OE_SITE_DIR/documents/doctemplates\";\n\n// If downloading a file, do the download and nothing else.\n// Thus the current browser page should remain displayed.\n//\nif (!empty($_POST['bn_download'])) {\n    //verify csrf\n    if (!CsrfUtils::verifyCsrfToken($_POST[\"csrf_token_form\"])) {\n        CsrfUtils::csrfNotVerified();\n    }\n\n    $templatepath = \"$templatedir/$form_filename\";\n\n    // Place file in variable\n    $fileData = file_get_contents($templatepath);\n\n    // Decrypt file, if applicable\n    if ($cryptoGen->cryptCheckStandard($fileData)) {\n        $fileData = $cryptoGen->decryptStandard($fileData, null, 'database');\n    }\n\n    header('Content-Description: File Transfer');\n    header('Content-Transfer-Encoding: binary');\n    header('Expires: 0');\n    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n    header('Pragma: public');\n    // attachment, not inline\n    header(\"Content-Disposition: attachment; filename=\\\"$form_filename\\\"\");\n    // Note we avoid providing a mime type that suggests opening the file.\n    header(\"Content-Type: application/octet-stream\");\n    header(\"Content-Length: \" . strlen($fileData));\n    echo $fileData;\n    exit;\n}\n\nif (!empty($_POST['bn_delete'])) {\n    //verify csrf\n    if (!CsrfUtils::verifyCsrfToken($_POST[\"csrf_token_form\"])) {\n        CsrfUtils::csrfNotVerified();\n    }\n\n    $templatepath = \"$templatedir/$form_filename\";\n    if (is_file($templatepath)) {\n        unlink($templatepath);\n    }\n}\n\nif (!empty($_POST['bn_upload'])) {\n    //verify csrf\n    if (!CsrfUtils::verifyCsrfToken($_POST[\"csrf_token_form\"])) {\n        CsrfUtils::csrfNotVerified();\n    }\n\n    // Handle uploads.\n    $tmp_name = $_FILES['form_file']['tmp_name'];\n    if (is_uploaded_file($tmp_name) && $_FILES['form_file']['size']) {\n        // Choose the destination path/filename.\n        $form_dest_filename = $_POST['form_dest_filename'];\n        if ($form_dest_filename == '') {\n            $form_dest_filename = $_FILES['form_file']['name'];\n        }\n\n        $form_dest_filename = convert_safe_file_dir_name(basename($form_dest_filename));\n        if ($form_dest_filename == '') {\n            die(xlt('Cannot determine a destination filename'));\n        }\n        $path_parts = pathinfo($form_dest_filename);\n        if (!in_array(strtolower($path_parts['extension']), array('odt', 'txt', 'docx', 'zip'))) {\n            die(text(strtolower($path_parts['extension'])) . ' ' . xlt('filetype is not accepted'));\n        }\n\n        $templatepath = \"$templatedir/$form_dest_filename\";\n        // If the site's template directory does not yet exist, create it.\n        if (!is_dir($templatedir)) {\n            mkdir($templatedir);\n        }\n\n        // If the target file already exists, delete it.\n        if (is_file($templatepath)) {\n            unlink($templatepath);\n        }\n\n        // Place uploaded file in variable.\n        $fileData = file_get_contents($tmp_name);\n\n        // Encrypt uploaded file, if applicable.\n        if ($GLOBALS['drive_encryption']) {\n            $storedData = $cryptoGen->encryptStandard($fileData, null, 'database');\n        } else {\n            $storedData = $fileData;\n        }\n\n        // Store the uploaded file.\n        if (file_put_contents($templatepath, $storedData) === false) {\n            die(xlt('Unable to create') . \" '\" . text($templatepath) . \"'\");\n        }\n    }\n}\n\n?>\n<html>\n   <head>\n      <title><?php echo xlt('Document Template Management'); ?></title>\n      <?php Header::setupHeader(); ?>\n      <style>\n         .dehead {\n           color: var(--black);\n           font-family: sans-serif;\n           font-size: 0.8125rem;\n           font-weight:bold;\n         }\n         .detail {\n           color: var(--black);\n           font-family: sans-serif;\n           font-size: 0.8125rem;\n           font-weight: normal;\n         }\n      </style>\n   </head>\n   <body class=\"body_top\">\n   <div class=\"container\">\n      <form method='post' action='manage_document_templates.php' enctype='multipart/form-data'\n         onsubmit='return top.restoreSession()'>\n         <input type=\"hidden\" name=\"csrf_token_form\" value=\"<?php echo attr(CsrfUtils::collectCsrfToken()); ?>\" />\n            <h2 class=\"text-center\"><?php echo xlt('Document Template Management'); ?></h2>\n            <div class=\"row\">\n            <div class=\"col-6\">\n               <div class=\"mx-auto mt-3\">\n                  <div class=\"card\">\n                     <h5 class=\"card-header\"><?php echo xlt('Upload a Template'); ?></h5>\n                     <div class=\"card-body\">\n                        <div class=\"custom-file\">\n                           <input type=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"250000000\" />\n                           <input type=\"file\" name=\"form_file\" size=\"40\" class=\"custom-file-input\" id=\"customFile\" />\n                           <label class=\"custom-file-label\" for=\"customFile\"><?php echo xlt('Choose file'); ?></label>\n                        </div>\n                        <div class=\"input-group mt-3\">\n                          <label for=\"form_dest_filename\"><?php echo xlt('Destination Filename'); ?>:</label>\n                          <input type='text' class=\"form-control\" name='form_dest_filename' id='form_dest_filename' size='30' />\n                          <div class=\"input-group-append\">\n                            <input type='submit' class=\"btn btn-primary\" name='bn_upload' value='<?php echo xla('Upload') ?>' />\n                          </div>\n                        </div>\n                     </div>\n                  </div>\n               </div>\n            </div>\n            <div class=\"col-6\">\n               <div class=\"mx-auto mt-3\">\n                  <div class=\"card\">\n                     <h5 class=\"card-header\"><?php echo xlt('Download or Delete a Template'); ?></h5>\n                     <div class=\"card-body\">\n                        <select class=\"form-control\" name='form_filename'>\n                        <?php\n                        // Generate an <option> for each existing file.\n                        if (file_exists($templatedir)) {\n                            $dh = opendir($templatedir);\n                        } else {\n                            $dh = false;\n                        }\n                        if ($dh) {\n                            $templateslist = array();\n                            while (false !== ($sfname = readdir($dh))) {\n                                if (substr($sfname, 0, 1) == '.') {\n                                    continue;\n                                }\n\n                                $templateslist[$sfname] = $sfname;\n                            }\n\n                            closedir($dh);\n                            ksort($templateslist);\n                            foreach ($templateslist as $sfname) {\n                                echo \"    <option value='\" . attr($sfname) . \"'\";\n                                echo \">\" . text($sfname) . \"</option>\\n\";\n                            }\n                        }\n                        ?>\n                        </select>\n                        <div class=\"mt-3\">\n                           <input type='submit' class=\"btn btn-success\" name='bn_download' value='<?php echo xla('Download') ?>' />\n                           <input type='submit' class=\"btn btn-danger\" name='bn_delete' value='<?php echo xla('Delete') ?>' />\n                        </div>\n                     </div>\n                  </div>\n               </div>\n            </div>\n          </div>\n      </form>\n      </div>\n      <script>\n      //display file name\n        $(\".custom-file-input\").on(\"change\", function() {\n        var fileName = $(this).val().split(\"\\\\\").pop();\n        $(this).siblings(\".custom-file-label\").addClass(\"selected\").html(jsText(fileName));\n        });\n        </script>\n   </body>\n</html>\n"], "filenames": ["interface/super/manage_document_templates.php"], "buggy_code_start_loc": [224], "buggy_code_end_loc": [228], "fixing_code_start_loc": [224], "fixing_code_end_loc": [228], "type": "CWE-79", "message": "Stored XSS Leads To Session Hijacking in GitHub repository openemr/openemr prior to 6.1.0.1.", "other": {"cve": {"id": "CVE-2022-1458", "sourceIdentifier": "security@huntr.dev", "published": "2022-04-25T10:15:09.637", "lastModified": "2022-05-04T18:39:08.057", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Stored XSS Leads To Session Hijacking in GitHub repository openemr/openemr prior to 6.1.0.1."}, {"lang": "es", "value": "Un ataque de tipo XSS almacenado conlleva a un Secuestro de Sesi\u00f3n en el repositorio de GitHub openemr/openemr versiones anteriores a 6.1.0.1"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open-emr:openemr:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.1.0.1", "matchCriteriaId": "D9EC87FD-D2E4-45C2-B84B-192DC80A2074"}]}]}], "references": [{"url": "https://github.com/openemr/openemr/commit/31f08005e53b17d1bc921d23f7ee774930ad416d", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/78674078-0796-4102-a81e-f699cd6981b0", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openemr/openemr/commit/31f08005e53b17d1bc921d23f7ee774930ad416d"}}