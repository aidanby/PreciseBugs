{"buggy_code": ["package web\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/julienschmidt/httprouter\"\n)\n\n// Socket register a new websocket server at the given path\nfunc (s *Server) Socket(path string, handle SocketHandle, options HandleOptions) {\n\ts.registerSocketEndpoint(\"GET\", path, handle, options)\n}\n\nfunc (s *Server) registerSocketEndpoint(method string, path string, handle SocketHandle, options HandleOptions) {\n\ts.log.Debug(\"Register HTTP %s %s\", method, path)\n\ts.router.Handle(method, path, s.socketHandler(handle, options))\n}\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n}\n\nfunc (s *Server) socketHandler(endpointHandle SocketHandle, options HandleOptions) httprouter.Handle {\n\treturn func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {\n\t\tconn, err := upgrader.Upgrade(w, r, nil)\n\t\tif err != nil {\n\t\t\ts.log.Error(\"Error upgrading client for websocket connection: %s\", err.Error())\n\t\t\treturn\n\t\t}\n\t\tendpointHandle(Request{\n\t\t\tParams: ps,\n\t\t\tlog:    s.log,\n\t\t}, WSConn{\n\t\t\tc: conn,\n\t\t})\n\t\ts.log.Debug(\"HTTP WS Request: ws://%s\", r.RequestURI)\n\t}\n}\n"], "fixing_code": ["package web\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n\t\"github.com/julienschmidt/httprouter\"\n)\n\n// Socket register a new websocket server at the given path\nfunc (s *Server) Socket(path string, handle SocketHandle, options HandleOptions) {\n\ts.registerSocketEndpoint(\"GET\", path, handle, options)\n}\n\nfunc (s *Server) registerSocketEndpoint(method string, path string, handle SocketHandle, options HandleOptions) {\n\ts.log.Debug(\"Register HTTP %s %s\", method, path)\n\ts.router.Handle(method, path, s.socketHandler(handle, options))\n}\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n}\n\nfunc (s *Server) socketHandler(endpointHandle SocketHandle, options HandleOptions) httprouter.Handle {\n\treturn func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {\n\t\tvar userData interface{}\n\n\t\tif options.AuthenticateMethod != nil {\n\t\t\tuserData = options.AuthenticateMethod(r)\n\t\t\tif isUserdataNil(userData) {\n\t\t\t\tif options.UnauthorizedMethod == nil {\n\t\t\t\t\ts.log.Warn(\"Rejected authenticated request\")\n\t\t\t\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\t\t\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\t\t\t\tjson.NewEncoder(w).Encode(Error{401, \"Unauthorized\"})\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\toptions.UnauthorizedMethod(w, r)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tconn, err := upgrader.Upgrade(w, r, nil)\n\t\tif err != nil {\n\t\t\ts.log.Error(\"Error upgrading client for websocket connection: %s\", err.Error())\n\t\t\treturn\n\t\t}\n\t\tendpointHandle(Request{\n\t\t\tParams:   ps,\n\t\t\tUserData: userData,\n\t\t\tlog:      s.log,\n\t\t}, WSConn{\n\t\t\tc: conn,\n\t\t})\n\t\ts.log.Debug(\"HTTP WS Request: ws://%s\", r.RequestURI)\n\t}\n}\n"], "filenames": ["websocket.go"], "buggy_code_start_loc": [3], "buggy_code_end_loc": [35], "fixing_code_start_loc": [4], "fixing_code_end_loc": [55], "type": "CWE-476", "message": "Web Sockets do not execute any AuthenticateMethod methods which may be set, leading to a nil pointer dereference if the returned UserData pointer is assumed to be non-nil, or authentication bypass. This issue only affects WebSockets with an AuthenticateMethod hook. Request handlers that do not explicitly use WebSockets are not vulnerable.", "other": {"cve": {"id": "CVE-2021-4236", "sourceIdentifier": "security@golang.org", "published": "2022-12-27T22:15:12.013", "lastModified": "2023-01-05T04:48:44.317", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Web Sockets do not execute any AuthenticateMethod methods which may be set, leading to a nil pointer dereference if the returned UserData pointer is assumed to be non-nil, or authentication bypass. This issue only affects WebSockets with an AuthenticateMethod hook. Request handlers that do not explicitly use WebSockets are not vulnerable."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-476"}]}, {"source": "security@golang.org", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-400"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:web_project:web:*:*:*:*:*:go:*:*", "versionStartIncluding": "1.4.0", "versionEndExcluding": "1.5.2", "matchCriteriaId": "4F957C53-3F68-4128-B6FA-7685D4949E2B"}]}]}], "references": [{"url": "https://github.com/ecnepsnai/web/commit/5a78f8d5c41ce60dcf9f61aaf47a7a8dc3e0002f", "source": "security@golang.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://pkg.go.dev/vuln/GO-2021-0107", "source": "security@golang.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ecnepsnai/web/commit/5a78f8d5c41ce60dcf9f61aaf47a7a8dc3e0002f"}}