{"buggy_code": ["<?php\n/*********************************************************************\n    class.installer.php\n\n    osTicket Intaller - installs the latest version.\n\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\nrequire_once INCLUDE_DIR.'class.migrater.php';\nrequire_once INCLUDE_DIR.'class.setup.php';\nrequire_once INCLUDE_DIR.'class.i18n.php';\n\nclass Installer extends SetupWizard {\n\n    var $config;\n\n    function __construct($configfile) {\n        $this->config =$configfile;\n        $this->errors=array();\n    }\n\n    function getConfigFile() {\n        return $this->config;\n    }\n\n    function config_exists() {\n        return ($this->getConfigFile() && file_exists($this->getConfigFile()));\n    }\n\n    function config_writable() {\n        return ($this->getConfigFile() && is_writable($this->getConfigFile()));\n    }\n\n    function check_config() {\n        return ($this->config_exists() && $this->config_writable());\n    }\n\n    //XXX: Latest version insall logic...no carry over.\n    function install($vars) {\n\n        $this->errors=$f=array();\n\n        $f['name']          = array('type'=>'string',   'required'=>1, 'error'=>__('Name required'));\n        $f['email']         = array('type'=>'email',    'required'=>1, 'error'=>__('Valid email required'));\n        $f['fname']         = array('type'=>'string',   'required'=>1, 'error'=>__('First name required'));\n        $f['lname']         = array('type'=>'string',   'required'=>1, 'error'=>__('Last name required'));\n        $f['admin_email']   = array('type'=>'email',    'required'=>1, 'error'=>__('Valid email required'));\n        $f['username']      = array('type'=>'username', 'required'=>1, 'error'=>__('Username required'));\n        $f['passwd']        = array('type'=>'string', 'required'=>1, 'error'=>__('Password required'));\n        $f['passwd2']       = array('type'=>'string', 'required'=>1, 'error'=>__('Confirm Password'));\n        $f['prefix']        = array('type'=>'string',   'required'=>1, 'error'=>__('Table prefix required'));\n        $f['dbhost']        = array('type'=>'string',   'required'=>1, 'error'=>__('Host name required'));\n        $f['dbname']        = array('type'=>'string',   'required'=>1, 'error'=>__('Database name required'));\n        $f['dbuser']        = array('type'=>'string',   'required'=>1, 'error'=>__('Username required'));\n        $f['dbpass']        = array('type'=>'string',   'required'=>1, 'error'=>__('Password required'));\n\n        $vars = array_map('trim', $vars);\n\n        if(!Validator::process($f,$vars,$this->errors) && !$this->errors['err'])\n            $this->errors['err'] = sprintf('%s \u2014 %s',\n                __('Missing or invalid data'),\n                __('Correct any errors below and try again'));\n\n\n        //Staff's email can't be same as system emails.\n        if($vars['admin_email'] && $vars['email'] && !strcasecmp($vars['admin_email'],$vars['email']))\n            $this->errors['admin_email']=__('Conflicts with system email above');\n        //Admin's pass confirmation.\n        if(!$this->errors && strcasecmp($vars['passwd'],$vars['passwd2']))\n            $this->errors['passwd2']=__('Passwords do not match');\n\n        //Check table prefix underscore required at the end!\n        if($vars['prefix'] && substr($vars['prefix'], -1)!='_')\n            $this->errors['prefix']=__('Bad prefix. Must have underscore (_) at the end. e.g \\'ost_\\'');\n\n        //Make sure admin username is not very predictable. XXX: feels dirty but necessary\n        if(!$this->errors['username'] && in_array(strtolower($vars['username']),array('admin','admins','username','osticket')))\n            $this->errors['username']=__('Bad username');\n\n        // Support port number specified in the hostname with a colon (:)\n        list($host, $port) = explode(':', $vars['dbhost']);\n        if ($port && is_numeric($port) && ($port < 1 || $port > 65535))\n            $this->errors['db'] = __('Invalid database port number');\n\n        //MYSQL: Connect to the DB and check the version & database (create database if it doesn't exist!)\n        if(!$this->errors) {\n            if(!db_connect($vars['dbhost'],$vars['dbuser'],$vars['dbpass']))\n                $this->errors['db']=sprintf(__('Unable to connect to MySQL server: %s'), db_connect_error());\n            elseif(explode('.', db_version()) < explode('.', $this->getMySQLVersion()))\n                $this->errors['db']=sprintf(__('osTicket requires MySQL %s or later!'),$this->getMySQLVersion());\n            elseif(!db_select_database($vars['dbname']) && !db_create_database($vars['dbname'])) {\n                $this->errors['dbname']=__(\"Database doesn't exist\");\n                $this->errors['db']=__('Unable to create the database.');\n            } elseif(!db_select_database($vars['dbname'])) {\n                $this->errors['dbname']=__('Unable to select the database');\n            } else {\n                //Abort if we have another installation (or table) with same prefix.\n                $sql = 'SELECT * FROM `'.$vars['prefix'].'config` LIMIT 1';\n                if(db_query($sql, false)) {\n                    $this->errors['err'] = __('We have a problem - another installation with same table prefix exists!');\n                    $this->errors['prefix'] = __('Prefix already in-use');\n                } else {\n                    //Try changing charset and collation of the DB - no bigie if we fail.\n                    db_query('ALTER DATABASE '.$vars['dbname'].' DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci', false);\n                }\n            }\n        }\n\n        /*************** We're ready to install ************************/\n        define('ADMIN_EMAIL',$vars['admin_email']); //Needed to report SQL errors during install.\n        define('TABLE_PREFIX',$vars['prefix']); //Table prefix\n        Bootstrap::defineTables(TABLE_PREFIX);\n        Bootstrap::loadCode();\n\n        // Check password against password policy (after loading code)\n        try {\n            PasswordPolicy::checkPassword($vars['passwd'], null);\n        }\n        catch (BadPassword $e) {\n            $this->errors['passwd'] = $e->getMessage();\n        }\n\n        // bailout on errors.\n        if ($this->errors)\n            return false;\n\n\n        $debug = true; // Change it to false to squelch SQL errors.\n\n        //Last minute checks.\n        if(!file_exists($this->getConfigFile()) || !($configFile=file_get_contents($this->getConfigFile())))\n            $this->errors['err']=__('Unable to read config file. Permission denied! (#2)');\n        elseif(!($fp = @fopen($this->getConfigFile(),'r+')))\n            $this->errors['err']=__('Unable to open config file for writing. Permission denied! (#3)');\n\n        else {\n            $streams = DatabaseMigrater::getUpgradeStreams(INCLUDE_DIR.'upgrader/streams/');\n            foreach ($streams as $stream=>$signature) {\n                $schemaFile = INC_DIR.\"streams/$stream/install-mysql.sql\";\n                if (!file_exists($schemaFile) || !($fp2 = fopen($schemaFile, 'rb')))\n                    $this->errors['err'] = sprintf(\n                        __('%s: Internal error occurred - please make sure your download is the latest (#1)'),\n                        $stream);\n                elseif (\n                        // TODO: Make the hash algo configurable in the streams\n                        //       configuration ( core : md5 )\n                        !($hash = md5(fread($fp2, filesize($schemaFile))))\n                        || strcasecmp($signature, $hash))\n                    $this->errors['err'] = sprintf(\n                        __('%s: Unknown or invalid schema signature (%s .. %s)'),\n                        $stream,\n                        $signature, $hash);\n                elseif (!$this->load_sql_file($schemaFile, $vars['prefix'], true, $debug))\n                    $this->errors['err'] = sprintf(\n                        __('%s: Error parsing SQL schema! Get help from developers (#4)'),\n                        $stream);\n            }\n        }\n\n        if ($this->errors)\n            return false;\n\n        // TODO: Use language selected from install worksheet\n        $i18n = new Internationalization($vars['lang_id']);\n        $i18n->loadDefaultData();\n\n        Signal::send('system.install', $this);\n\n        list($sla_id) = Sla::objects()->order_by('id')->values_flat('id')->first();\n        list($dept_id) = Dept::objects()->order_by('id')->values_flat('id')->first();\n        list($role_id) = Role::objects()->order_by('id')->values_flat('id')->first();\n\n        $sql='SELECT `tpl_id` FROM `'.TABLE_PREFIX.'email_template_group` ORDER BY `tpl_id` LIMIT 1';\n        $template_id_1 = db_result(db_query($sql, false));\n\n        // Create admin user.\n        $staff = Staff::create(array(\n            'isactive' => 1,\n            'isadmin' => 1,\n            'max_page_size' => 25,\n            'dept_id' => $dept_id,\n            'role_id' => $role_id,\n            'email' => $vars['admin_email'],\n            'firstname' => $vars['fname'],\n            'lastname' => $vars['lname'],\n            'username' => $vars['username'],\n        ));\n        $staff->updatePerms(array(\n            User::PERM_CREATE,\n            User::PERM_EDIT,\n            User::PERM_DELETE,\n            User::PERM_MANAGE,\n            User::PERM_DIRECTORY,\n            Organization::PERM_CREATE,\n            Organization::PERM_EDIT,\n            Organization::PERM_DELETE,\n            FAQ::PERM_MANAGE,\n            Email::PERM_BANLIST,\n        ));\n        $staff->setPassword($vars['passwd']);\n        if (!$staff->save()) {\n            $this->errors['err'] = __('Unable to create admin user (#6)');\n            return false;\n        }\n\n        // Create default emails!\n        $email = $vars['email'];\n        list(,$domain) = explode('@', $vars['email']);\n        foreach (array(\n            \"Support\" => $email,\n            \"osTicket Alerts\" => \"alerts@$domain\",\n            '' => \"noreply@$domain\",\n        ) as $name => $mailbox) {\n            $mb = Email::create(array(\n                'name' => $name,\n                'email' => $mailbox,\n                'dept_id' => $dept_id,\n            ));\n            $mb->save();\n            if ($mailbox == $email)\n                $support_email_id = $mb->email_id;\n            if ($mailbox == \"alerts@$domain\")\n                $alert_email_id = $mb->email_id;\n        }\n\n        //Create config settings---default settings!\n        $defaults = array(\n            'default_email_id'=>$support_email_id,\n            'alert_email_id'=>$alert_email_id,\n            'default_dept_id'=>$dept_id, 'default_sla_id'=>$sla_id,\n            'default_template_id'=>$template_id_1,\n            'default_timezone' => $vars['timezone'] ?: date_default_timezone_get(),\n            'admin_email'=>$vars['admin_email'],\n            'schema_signature'=>$streams['core'],\n            'helpdesk_url'=>URL,\n            'helpdesk_title'=>$vars['name']\n        );\n\n        $config = new Config('core');\n        if (!$config->updateAll($defaults))\n            $this->errors['err']=__('Unable to create config settings').' (#7)';\n\n        // Set company name\n        require_once(INCLUDE_DIR.'class.company.php');\n        $company = new Company();\n        $company->getForm()->setAnswer('name', $vars['name']);\n        $company->getForm()->save();\n\n        foreach ($streams as $stream => $signature) {\n            if ($stream != 'core') {\n                $config = new Config($stream);\n                if (!$config->update('schema_signature', $signature))\n                    $this->errors['err'] = __('Unable to create config settings').' (#8)';\n\t\t\t\t    }\n\t\t\t  }\n\n        if ($this->errors)\n            return false; //Abort on internal errors.\n\n\n        //Rewrite the config file - MUST be done last to allow for installer recovery.\n        $configFile = strtr($configFile, array(\n            \"define('OSTINSTALLED',FALSE);\" => \"define('OSTINSTALLED',TRUE);\",\n            '%ADMIN-EMAIL' => $vars['admin_email'],\n            '%CONFIG-DBHOST' => $vars['dbhost'],\n            '%CONFIG-DBNAME' => $vars['dbname'],\n            '%CONFIG-DBUSER' => $vars['dbuser'],\n            '%CONFIG-DBPASS' => $vars['dbpass'],\n            '%CONFIG-PREFIX' => $vars['prefix'],\n            '%CONFIG-SIRI' => Misc::randCode(32),\n        ));\n        if (!$fp || !ftruncate($fp,0) || !fwrite($fp,$configFile)) {\n            $this->errors['err']=__('Unable to write to config file. Permission denied! (#5)');\n            return false;\n        }\n        @fclose($fp);\n\n        /************* Make the system happy ***********************/\n        global $cfg;\n        $cfg = new OsticketConfig();\n\n        //Create a ticket to make the system warm and happy.\n        $errors = array();\n        $ticket_vars = $i18n->getTemplate('templates/ticket/installed.yaml')\n            ->getData();\n        $ticket = Ticket::create($ticket_vars, $errors, 'api', false, false);\n\n        if ($ticket\n            && ($org = Organization::objects()->order_by('id')->one())\n        ) {\n            $user = User::lookup($ticket->getOwnerId());\n            $user->setOrganization($org);\n        }\n\n        //TODO: create another personalized ticket and assign to admin??\n\n        //Log a message.\n        $msg=__(\"Congratulations osTicket basic installation completed!\\n\\nThank you for choosing osTicket!\");\n        $sql='INSERT INTO '.TABLE_PREFIX.'syslog SET created=NOW(), updated=NOW(), log_type=\"Debug\" '\n            .', title=\"osTicket installed!\"'\n            .', log='.db_input($msg)\n            .', ip_address='.db_input($_SERVER['REMOTE_ADDR']);\n        db_query($sql, false);\n\n        return true;\n    }\n}\n?>\n"], "fixing_code": ["<?php\n/*********************************************************************\n    class.installer.php\n\n    osTicket Intaller - installs the latest version.\n\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2006-2013 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\nrequire_once INCLUDE_DIR.'class.migrater.php';\nrequire_once INCLUDE_DIR.'class.setup.php';\nrequire_once INCLUDE_DIR.'class.i18n.php';\n\nclass Installer extends SetupWizard {\n\n    var $config;\n\n    function __construct($configfile) {\n        $this->config =$configfile;\n        $this->errors=array();\n    }\n\n    function getConfigFile() {\n        return $this->config;\n    }\n\n    function config_exists() {\n        return ($this->getConfigFile() && file_exists($this->getConfigFile()));\n    }\n\n    function config_writable() {\n        return ($this->getConfigFile() && is_writable($this->getConfigFile()));\n    }\n\n    function check_config() {\n        return ($this->config_exists() && $this->config_writable());\n    }\n\n    //XXX: Latest version insall logic...no carry over.\n    function install($vars) {\n\n        $this->errors=$f=array();\n\n        $f['name']          = array('type'=>'string',   'required'=>1, 'error'=>__('Name required'));\n        $f['email']         = array('type'=>'email',    'required'=>1, 'error'=>__('Valid email required'));\n        $f['fname']         = array('type'=>'string',   'required'=>1, 'error'=>__('First name required'));\n        $f['lname']         = array('type'=>'string',   'required'=>1, 'error'=>__('Last name required'));\n        $f['admin_email']   = array('type'=>'email',    'required'=>1, 'error'=>__('Valid email required'));\n        $f['username']      = array('type'=>'username', 'required'=>1, 'error'=>__('Username required'));\n        $f['passwd']        = array('type'=>'string', 'required'=>1, 'error'=>__('Password required'));\n        $f['passwd2']       = array('type'=>'string', 'required'=>1, 'error'=>__('Confirm Password'));\n        $f['prefix']        = array('type'=>'string',   'required'=>1, 'error'=>__('Table prefix required'));\n        $f['dbhost']        = array('type'=>'string',   'required'=>1, 'error'=>__('Host name required'));\n        $f['dbname']        = array('type'=>'string',   'required'=>1, 'error'=>__('Database name required'));\n        $f['dbuser']        = array('type'=>'string',   'required'=>1, 'error'=>__('Username required'));\n        $f['dbpass']        = array('type'=>'string',   'required'=>1, 'error'=>__('Password required'));\n\n        $vars = array_map('trim', $vars);\n\n        if(!Validator::process($f,$vars,$this->errors) && !$this->errors['err'])\n            $this->errors['err'] = sprintf('%s \u2014 %s',\n                __('Missing or invalid data'),\n                __('Correct any errors below and try again'));\n\n\n        //Staff's email can't be same as system emails.\n        if($vars['admin_email'] && $vars['email'] && !strcasecmp($vars['admin_email'],$vars['email']))\n            $this->errors['admin_email']=__('Conflicts with system email above');\n        //Admin's pass confirmation.\n        if(!$this->errors && strcasecmp($vars['passwd'],$vars['passwd2']))\n            $this->errors['passwd2']=__('Passwords do not match');\n\n        //Check table prefix underscore required at the end!\n        if($vars['prefix'] && substr($vars['prefix'], -1)!='_')\n            $this->errors['prefix']=__('Bad prefix. Must have underscore (_) at the end. e.g \\'ost_\\'');\n\n        //Make sure admin username is not very predictable. XXX: feels dirty but necessary\n        if(!$this->errors['username'] && in_array(strtolower($vars['username']),array('admin','admins','username','osticket')))\n            $this->errors['username']=__('Bad username');\n\n        // Support port number specified in the hostname with a colon (:)\n        list($host, $port) = explode(':', $vars['dbhost']);\n        if ($port && is_numeric($port) && ($port < 1 || $port > 65535))\n            $this->errors['db'] = __('Invalid database port number');\n\n        //MYSQL: Connect to the DB and check the version & database (create database if it doesn't exist!)\n        if(!$this->errors) {\n            if(!db_connect($vars['dbhost'],$vars['dbuser'],$vars['dbpass']))\n                $this->errors['db']=sprintf(__('Unable to connect to MySQL server: %s'), db_connect_error());\n            elseif(explode('.', db_version()) < explode('.', $this->getMySQLVersion()))\n                $this->errors['db']=sprintf(__('osTicket requires MySQL %s or later!'),$this->getMySQLVersion());\n            elseif(!db_select_database($vars['dbname']) && !db_create_database($vars['dbname'])) {\n                $this->errors['dbname']=__(\"Database doesn't exist\");\n                $this->errors['db']=__('Unable to create the database.');\n            } elseif(!db_select_database($vars['dbname'])) {\n                $this->errors['dbname']=__('Unable to select the database');\n            } else {\n                //Abort if we have another installation (or table) with same prefix.\n                $sql = 'SELECT * FROM `'.$vars['prefix'].'config` LIMIT 1';\n                if(db_query($sql, false)) {\n                    $this->errors['err'] = __('We have a problem - another installation with same table prefix exists!');\n                    $this->errors['prefix'] = __('Prefix already in-use');\n                } else {\n                    //Try changing charset and collation of the DB - no bigie if we fail.\n                    db_query('ALTER DATABASE '.$vars['dbname'].' DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci', false);\n                }\n            }\n        }\n\n        /*************** We're ready to install ************************/\n        define('ADMIN_EMAIL',$vars['admin_email']); //Needed to report SQL errors during install.\n        define('TABLE_PREFIX',$vars['prefix']); //Table prefix\n        Bootstrap::defineTables(TABLE_PREFIX);\n        Bootstrap::loadCode();\n\n        // Check password against password policy (after loading code)\n        try {\n            PasswordPolicy::checkPassword($vars['passwd'], null);\n        }\n        catch (BadPassword $e) {\n            $this->errors['passwd'] = $e->getMessage();\n        }\n\n        // bailout on errors.\n        if ($this->errors)\n            return false;\n\n\n        $debug = true; // Change it to false to squelch SQL errors.\n\n        //Last minute checks.\n        if(!file_exists($this->getConfigFile()) || !($configFile=file_get_contents($this->getConfigFile())))\n            $this->errors['err']=__('Unable to read config file. Permission denied! (#2)');\n        elseif(!($fp = @fopen($this->getConfigFile(),'r+')))\n            $this->errors['err']=__('Unable to open config file for writing. Permission denied! (#3)');\n\n        else {\n            $streams = DatabaseMigrater::getUpgradeStreams(INCLUDE_DIR.'upgrader/streams/');\n            foreach ($streams as $stream=>$signature) {\n                $schemaFile = INC_DIR.\"streams/$stream/install-mysql.sql\";\n                if (!file_exists($schemaFile) || !($fp2 = fopen($schemaFile, 'rb')))\n                    $this->errors['err'] = sprintf(\n                        __('%s: Internal error occurred - please make sure your download is the latest (#1)'),\n                        $stream);\n                elseif (\n                        // TODO: Make the hash algo configurable in the streams\n                        //       configuration ( core : md5 )\n                        !($hash = md5(fread($fp2, filesize($schemaFile))))\n                        || strcasecmp($signature, $hash))\n                    $this->errors['err'] = sprintf(\n                        __('%s: Unknown or invalid schema signature (%s .. %s)'),\n                        $stream,\n                        $signature, $hash);\n                elseif (!$this->load_sql_file($schemaFile, $vars['prefix'], true, $debug))\n                    $this->errors['err'] = sprintf(\n                        __('%s: Error parsing SQL schema! Get help from developers (#4)'),\n                        $stream);\n            }\n        }\n\n        if ($this->errors)\n            return false;\n\n        // TODO: Use language selected from install worksheet\n        $i18n = new Internationalization($vars['lang_id']);\n        $i18n->loadDefaultData();\n\n        Signal::send('system.install', $this);\n\n        list($sla_id) = Sla::objects()->order_by('id')->values_flat('id')->first();\n        list($dept_id) = Dept::objects()->order_by('id')->values_flat('id')->first();\n        list($role_id) = Role::objects()->order_by('id')->values_flat('id')->first();\n\n        $sql='SELECT `tpl_id` FROM `'.TABLE_PREFIX.'email_template_group` ORDER BY `tpl_id` LIMIT 1';\n        $template_id_1 = db_result(db_query($sql, false));\n\n        // Create admin user.\n        $staff = Staff::create(array(\n            'isactive' => 1,\n            'isadmin' => 1,\n            'max_page_size' => 25,\n            'dept_id' => $dept_id,\n            'role_id' => $role_id,\n            'email' => $vars['admin_email'],\n            'firstname' => Format::htmlchars($vars['fname']),\n            'lastname' => Format::htmlchars($vars['lname']),\n            'username' => $vars['username'],\n        ));\n        $staff->updatePerms(array(\n            User::PERM_CREATE,\n            User::PERM_EDIT,\n            User::PERM_DELETE,\n            User::PERM_MANAGE,\n            User::PERM_DIRECTORY,\n            Organization::PERM_CREATE,\n            Organization::PERM_EDIT,\n            Organization::PERM_DELETE,\n            FAQ::PERM_MANAGE,\n            Email::PERM_BANLIST,\n        ));\n        $staff->setPassword($vars['passwd']);\n        if (!$staff->save()) {\n            $this->errors['err'] = __('Unable to create admin user (#6)');\n            return false;\n        }\n\n        // Create default emails!\n        $email = $vars['email'];\n        list(,$domain) = explode('@', $vars['email']);\n        foreach (array(\n            \"Support\" => $email,\n            \"osTicket Alerts\" => \"alerts@$domain\",\n            '' => \"noreply@$domain\",\n        ) as $name => $mailbox) {\n            $mb = Email::create(array(\n                'name' => $name,\n                'email' => $mailbox,\n                'dept_id' => $dept_id,\n            ));\n            $mb->save();\n            if ($mailbox == $email)\n                $support_email_id = $mb->email_id;\n            if ($mailbox == \"alerts@$domain\")\n                $alert_email_id = $mb->email_id;\n        }\n\n        //Create config settings---default settings!\n        $defaults = array(\n            'default_email_id'=>$support_email_id,\n            'alert_email_id'=>$alert_email_id,\n            'default_dept_id'=>$dept_id, 'default_sla_id'=>$sla_id,\n            'default_template_id'=>$template_id_1,\n            'default_timezone' => $vars['timezone'] ?: date_default_timezone_get(),\n            'admin_email'=>$vars['admin_email'],\n            'schema_signature'=>$streams['core'],\n            'helpdesk_url'=>URL,\n            'helpdesk_title'=>$vars['name']\n        );\n\n        $config = new Config('core');\n        if (!$config->updateAll($defaults))\n            $this->errors['err']=__('Unable to create config settings').' (#7)';\n\n        // Set company name\n        require_once(INCLUDE_DIR.'class.company.php');\n        $company = new Company();\n        $company->getForm()->setAnswer('name', $vars['name']);\n        $company->getForm()->save();\n\n        foreach ($streams as $stream => $signature) {\n            if ($stream != 'core') {\n                $config = new Config($stream);\n                if (!$config->update('schema_signature', $signature))\n                    $this->errors['err'] = __('Unable to create config settings').' (#8)';\n\t\t\t\t    }\n\t\t\t  }\n\n        if ($this->errors)\n            return false; //Abort on internal errors.\n\n\n        //Rewrite the config file - MUST be done last to allow for installer recovery.\n        $configFile = strtr($configFile, array(\n            \"define('OSTINSTALLED',FALSE);\" => \"define('OSTINSTALLED',TRUE);\",\n            '%ADMIN-EMAIL' => $vars['admin_email'],\n            '%CONFIG-DBHOST' => $vars['dbhost'],\n            '%CONFIG-DBNAME' => $vars['dbname'],\n            '%CONFIG-DBUSER' => $vars['dbuser'],\n            '%CONFIG-DBPASS' => $vars['dbpass'],\n            '%CONFIG-PREFIX' => $vars['prefix'],\n            '%CONFIG-SIRI' => Misc::randCode(32),\n        ));\n        if (!$fp || !ftruncate($fp,0) || !fwrite($fp,$configFile)) {\n            $this->errors['err']=__('Unable to write to config file. Permission denied! (#5)');\n            return false;\n        }\n        @fclose($fp);\n\n        /************* Make the system happy ***********************/\n        global $cfg;\n        $cfg = new OsticketConfig();\n\n        //Create a ticket to make the system warm and happy.\n        $errors = array();\n        $ticket_vars = $i18n->getTemplate('templates/ticket/installed.yaml')\n            ->getData();\n        $ticket = Ticket::create($ticket_vars, $errors, 'api', false, false);\n\n        if ($ticket\n            && ($org = Organization::objects()->order_by('id')->one())\n        ) {\n            $user = User::lookup($ticket->getOwnerId());\n            $user->setOrganization($org);\n        }\n\n        //TODO: create another personalized ticket and assign to admin??\n\n        //Log a message.\n        $msg=__(\"Congratulations osTicket basic installation completed!\\n\\nThank you for choosing osTicket!\");\n        $sql='INSERT INTO '.TABLE_PREFIX.'syslog SET created=NOW(), updated=NOW(), log_type=\"Debug\" '\n            .', title=\"osTicket installed!\"'\n            .', log='.db_input($msg)\n            .', ip_address='.db_input($_SERVER['REMOTE_ADDR']);\n        db_query($sql, false);\n\n        return true;\n    }\n}\n?>\n"], "filenames": ["setup/inc/class.installer.php"], "buggy_code_start_loc": [191], "buggy_code_end_loc": [193], "fixing_code_start_loc": [191], "fixing_code_end_loc": [193], "type": "CWE-79", "message": "An issue was discovered in osTicket before 1.10.7 and 1.12.x before 1.12.1. Stored XSS exists in setup/install.php. It was observed that no input sanitization was provided in the firstname and lastname fields of the application. The insertion of malicious queries in those fields leads to the execution of those queries. This can further lead to cookie stealing or other malicious actions.", "other": {"cve": {"id": "CVE-2019-14750", "sourceIdentifier": "cve@mitre.org", "published": "2019-08-07T17:15:12.557", "lastModified": "2019-08-14T15:15:21.003", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in osTicket before 1.10.7 and 1.12.x before 1.12.1. Stored XSS exists in setup/install.php. It was observed that no input sanitization was provided in the firstname and lastname fields of the application. The insertion of malicious queries in those fields leads to the execution of those queries. This can further lead to cookie stealing or other malicious actions."}, {"lang": "es", "value": "Se detect\u00f3 un problema en osTicket versiones anteriores a 1.10.7 y versiones 1.12.x anteriores a 1.12.1. Se presenta una vulnerabilidad de tipo XSS Almacenado en el archivo setup/install.php. Se observ\u00f3 que no fue proporcionado ning\u00fan saneamiento de entrada en los campos de firstname y lastname. La inserci\u00f3n de consultas maliciosas en esos campos conlleva a la ejecuci\u00f3n de esas consultas. Esto puede conllevar a\u00fan m\u00e1s al robo de cookies u otras acciones maliciosas."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:osticket:osticket:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.10.7", "matchCriteriaId": "2D6B0B54-FE0E-41EB-953D-6A72FFB7B724"}, {"vulnerable": true, "criteria": "cpe:2.3:a:osticket:osticket:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.12", "versionEndExcluding": "1.12.1", "matchCriteriaId": "4874A3A8-A938-4E25-B01A-5366E34B2A28"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/154005/osTicket-1.12-Cross-Site-Scripting.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/osTicket/osTicket/commit/c3ba5b78261e07a883ad8fac28c214486c854e12", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/osTicket/osTicket/releases/tag/v1.10.7", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/osTicket/osTicket/releases/tag/v1.12.1", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/47226", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/osTicket/osTicket/commit/c3ba5b78261e07a883ad8fac28c214486c854e12"}}