{"buggy_code": ["/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * general function, usually for data manipulation pages\n *\n */\n\n/**\n * @var sql_box_locked lock for the sqlbox textarea in the querybox/querywindow\n */\nvar sql_box_locked = false;\n\n/**\n * @var array holds elements which content should only selected once\n */\nvar only_once_elements = new Array();\n\n/**\n * @var   int   ajax_message_count   Number of AJAX messages shown since page load\n */\nvar ajax_message_count = 0;\n\n/**\n * @var codemirror_editor object containing CodeMirror editor\n */\nvar codemirror_editor = false;\n\n/**\n * @var chart_activeTimeouts object active timeouts that refresh the charts. When disabling a realtime chart, this can be used to stop the continuous ajax requests\n */\nvar chart_activeTimeouts = new Object();\n\n/**\n * Returns browser's viewport size, without accounting for scrollbars\n *\n * @param window wnd\n */\nfunction getWindowSize(wnd) {\n    var vp = wnd || window;\n    return {\n        // most browsers || IE6-8 strict || failsafe\n        width: vp.innerWidth || (vp.documentElement !== undefined ? vp.documentElement.clientWidth : false) || $(vp).width(),\n        height: vp.innerHeight || (vp.documentElement !== undefined ? vp.documentElement.clientHeight : false) || $(vp).height()\n    };\n}\n\n/**\n * Make sure that ajax requests will not be cached\n * by appending a random variable to their parameters\n */\n$.ajaxPrefilter(function (options, originalOptions, jqXHR) {\n    var nocache = new Date().getTime() + \"\" + Math.floor(Math.random() * 1000000);\n    if (typeof options.data == \"string\") {\n        options.data += \"&_nocache=\" + nocache;\n    } else if (typeof options.data == \"object\") {\n        options.data = $.extend(originalOptions.data, {'_nocache':nocache});\n    }\n});\n\n/**\n * Add a hidden field to the form to indicate that this will be an\n * Ajax request (only if this hidden field does not exist)\n *\n * @param   object   the form\n */\nfunction PMA_prepareForAjaxRequest($form)\n{\n    if (! $form.find('input:hidden').is('#ajax_request_hidden')) {\n        $form.append('<input type=\"hidden\" id=\"ajax_request_hidden\" name=\"ajax_request\" value=\"true\" />');\n    }\n}\n\n/**\n * Generate a new password and copy it to the password input areas\n *\n * @param   object   the form that holds the password fields\n *\n * @return  boolean  always true\n */\nfunction suggestPassword(passwd_form)\n{\n    // restrict the password to just letters and numbers to avoid problems:\n    // \"editors and viewers regard the password as multiple words and\n    // things like double click no longer work\"\n    var pwchars = \"abcdefhjmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWYXZ\";\n    var passwordlength = 16;    // do we want that to be dynamic?  no, keep it simple :)\n    var passwd = passwd_form.generated_pw;\n    passwd.value = '';\n\n    for ( i = 0; i < passwordlength; i++ ) {\n        passwd.value += pwchars.charAt( Math.floor( Math.random() * pwchars.length ) )\n    }\n    passwd_form.text_pma_pw.value = passwd.value;\n    passwd_form.text_pma_pw2.value = passwd.value;\n    return true;\n}\n\n/**\n * Version string to integer conversion.\n */\nfunction parseVersionString (str)\n{\n    if (typeof(str) != 'string') { return false; }\n    var add = 0;\n    // Parse possible alpha/beta/rc/\n    var state = str.split('-');\n    if (state.length >= 2) {\n        if (state[1].substr(0, 2) == 'rc') {\n            add = - 20 - parseInt(state[1].substr(2));\n        } else if (state[1].substr(0, 4) == 'beta') {\n            add =  - 40 - parseInt(state[1].substr(4));\n        } else if (state[1].substr(0, 5) == 'alpha') {\n            add =  - 60 - parseInt(state[1].substr(5));\n        } else if (state[1].substr(0, 3) == 'dev') {\n            /* We don't handle dev, it's git snapshot */\n            add = 0;\n        }\n    }\n    // Parse version\n    var x = str.split('.');\n    // Use 0 for non existing parts\n    var maj = parseInt(x[0]) || 0;\n    var min = parseInt(x[1]) || 0;\n    var pat = parseInt(x[2]) || 0;\n    var hotfix = parseInt(x[3]) || 0;\n    return  maj * 100000000 + min * 1000000 + pat * 10000 + hotfix * 100 + add;\n}\n\n/**\n * Indicates current available version on main page.\n */\nfunction PMA_current_version()\n{\n    var current = parseVersionString(pmaversion);\n    var latest = parseVersionString(PMA_latest_version);\n    var version_information_message = PMA_messages['strLatestAvailable'] + ' ' + PMA_latest_version;\n    if (latest > current) {\n        var message = $.sprintf(PMA_messages['strNewerVersion'], PMA_latest_version, PMA_latest_date);\n        if (Math.floor(latest / 10000) == Math.floor(current / 10000)) {\n            /* Security update */\n            klass = 'error';\n        } else {\n            klass = 'notice';\n        }\n        $('#maincontainer').after('<div class=\"' + klass + '\">' + message + '</div>');\n    }\n    if (latest == current) {\n        version_information_message = ' (' + PMA_messages['strUpToDate'] + ')';\n    }\n    $('#li_pma_version').append(version_information_message);\n}\n\n/**\n * for libraries/display_change_password.lib.php\n *     libraries/user_password.php\n *\n */\n\nfunction displayPasswordGenerateButton()\n{\n    $('#tr_element_before_generate_password').parent().append('<tr><td>' + PMA_messages['strGeneratePassword'] + '</td><td><input type=\"button\" id=\"button_generate_password\" value=\"' + PMA_messages['strGenerate'] + '\" onclick=\"suggestPassword(this.form)\" /><input type=\"text\" name=\"generated_pw\" id=\"generated_pw\" /></td></tr>');\n    $('#div_element_before_generate_password').parent().append('<div class=\"item\"><label for=\"button_generate_password\">' + PMA_messages['strGeneratePassword'] + ':</label><span class=\"options\"><input type=\"button\" id=\"button_generate_password\" value=\"' + PMA_messages['strGenerate'] + '\" onclick=\"suggestPassword(this.form)\" /></span><input type=\"text\" name=\"generated_pw\" id=\"generated_pw\" /></div>');\n}\n\n/*\n * Adds a date/time picker to an element\n *\n * @param   object  $this_element   a jQuery object pointing to the element\n */\nfunction PMA_addDatepicker($this_element, options)\n{\n    var showTimeOption = false;\n    if ($this_element.is('.datetimefield')) {\n        showTimeOption = true;\n    }\n\n    var defaultOptions = {\n        showOn: 'button',\n        buttonImage: themeCalendarImage, // defined in js/messages.php\n        buttonImageOnly: true,\n        stepMinutes: 1,\n        stepHours: 1,\n        showSecond: true,\n        showTimepicker: showTimeOption,\n        showButtonPanel: false,\n        dateFormat: 'yy-mm-dd', // yy means year with four digits\n        timeFormat: 'hh:mm:ss',\n        altFieldTimeOnly: false,\n        showAnim: '',\n        beforeShow: function(input, inst) {\n            // Remember that we came from the datepicker; this is used\n            // in tbl_change.js by verificationsAfterFieldChange()\n            $this_element.data('comes_from', 'datepicker');\n\n            // Fix wrong timepicker z-index, doesn't work without timeout\n            setTimeout(function() {\n                $('#ui-timepicker-div').css('z-index',$('#ui-datepicker-div').css('z-index'))\n            },0);\n        }\n    };\n\n    $this_element.datetimepicker($.extend(defaultOptions, options));\n}\n\n/**\n * selects the content of a given object, f.e. a textarea\n *\n * @param   object  element     element of which the content will be selected\n * @param   var     lock        variable which holds the lock for this element\n *                              or true, if no lock exists\n * @param   boolean only_once   if true this is only done once\n *                              f.e. only on first focus\n */\nfunction selectContent( element, lock, only_once )\n{\n    if ( only_once && only_once_elements[element.name] ) {\n        return;\n    }\n\n    only_once_elements[element.name] = true;\n\n    if ( lock  ) {\n        return;\n    }\n\n    element.select();\n}\n\n/**\n * Displays a confirmation box before submitting a \"DROP/DELETE/ALTER\" query.\n * This function is called while clicking links\n *\n * @param   object   the link\n * @param   object   the sql query to submit\n *\n * @return  boolean  whether to run the query or not\n */\nfunction confirmLink(theLink, theSqlQuery)\n{\n    // Confirmation is not required in the configuration file\n    // or browser is Opera (crappy js implementation)\n    if (PMA_messages['strDoYouReally'] == '' || typeof(window.opera) != 'undefined') {\n        return true;\n    }\n\n    var is_confirmed = confirm(PMA_messages['strDoYouReally'] + ' :\\n' + theSqlQuery);\n    if (is_confirmed) {\n        if ( $(theLink).hasClass('formLinkSubmit') ) {\n            var name = 'is_js_confirmed';\n            if ($(theLink).attr('href').indexOf('usesubform') != -1) {\n                name = 'subform[' + $(theLink).attr('href').substr('#').match(/usesubform\\[(\\d+)\\]/i)[1] + '][is_js_confirmed]';\n            }\n\n            $(theLink).parents('form').append('<input type=\"hidden\" name=\"' + name + '\" value=\"1\" />');\n        } else if ( typeof(theLink.href) != 'undefined' ) {\n            theLink.href += '&is_js_confirmed=1';\n        } else if ( typeof(theLink.form) != 'undefined' ) {\n            theLink.form.action += '?is_js_confirmed=1';\n        }\n    }\n\n    return is_confirmed;\n} // end of the 'confirmLink()' function\n\n/**\n * Displays an error message if a \"DROP DATABASE\" statement is submitted\n * while it isn't allowed, else confirms a \"DROP/DELETE/ALTER\" query before\n * sumitting it if required.\n * This function is called by the 'checkSqlQuery()' js function.\n *\n * @param   object   the form\n * @param   object   the sql query textarea\n *\n * @return  boolean  whether to run the query or not\n *\n * @see     checkSqlQuery()\n */\nfunction confirmQuery(theForm1, sqlQuery1)\n{\n    // Confirmation is not required in the configuration file\n    if (PMA_messages['strDoYouReally'] == '') {\n        return true;\n    }\n\n    // \"DROP DATABASE\" statement isn't allowed\n    if (PMA_messages['strNoDropDatabases'] != '') {\n        var drop_re = new RegExp('(^|;)\\\\s*DROP\\\\s+(IF EXISTS\\\\s+)?DATABASE\\\\s', 'i');\n        if (drop_re.test(sqlQuery1.value)) {\n            alert(PMA_messages['strNoDropDatabases']);\n            theForm1.reset();\n            sqlQuery1.focus();\n            return false;\n        } // end if\n    } // end if\n\n    // Confirms a \"DROP/DELETE/ALTER/TRUNCATE\" statement\n    //\n    // TODO: find a way (if possible) to use the parser-analyser\n    // for this kind of verification\n    // For now, I just added a ^ to check for the statement at\n    // beginning of expression\n\n    var do_confirm_re_0 = new RegExp('^\\\\s*DROP\\\\s+(IF EXISTS\\\\s+)?(TABLE|DATABASE|PROCEDURE)\\\\s', 'i');\n    var do_confirm_re_1 = new RegExp('^\\\\s*ALTER\\\\s+TABLE\\\\s+((`[^`]+`)|([A-Za-z0-9_$]+))\\\\s+DROP\\\\s', 'i');\n    var do_confirm_re_2 = new RegExp('^\\\\s*DELETE\\\\s+FROM\\\\s', 'i');\n    var do_confirm_re_3 = new RegExp('^\\\\s*TRUNCATE\\\\s', 'i');\n\n    if (do_confirm_re_0.test(sqlQuery1.value)\n        || do_confirm_re_1.test(sqlQuery1.value)\n        || do_confirm_re_2.test(sqlQuery1.value)\n        || do_confirm_re_3.test(sqlQuery1.value)) {\n        var message      = (sqlQuery1.value.length > 100)\n                         ? sqlQuery1.value.substr(0, 100) + '\\n    ...'\n                         : sqlQuery1.value;\n        var is_confirmed = confirm(PMA_messages['strDoYouReally'] + ' :\\n' + message);\n        // statement is confirmed -> update the\n        // \"is_js_confirmed\" form field so the confirm test won't be\n        // run on the server side and allows to submit the form\n        if (is_confirmed) {\n            theForm1.elements['is_js_confirmed'].value = 1;\n            return true;\n        }\n        // statement is rejected -> do not submit the form\n        else {\n            window.focus();\n            sqlQuery1.focus();\n            return false;\n        } // end if (handle confirm box result)\n    } // end if (display confirm box)\n\n    return true;\n} // end of the 'confirmQuery()' function\n\n\n/**\n * Displays a confirmation box before disabling the BLOB repository for a given database.\n * This function is called while clicking links\n *\n * @param   object   the database\n *\n * @return  boolean  whether to disable the repository or not\n */\nfunction confirmDisableRepository(theDB)\n{\n    // Confirmation is not required in the configuration file\n    // or browser is Opera (crappy js implementation)\n    if (PMA_messages['strDoYouReally'] == '' || typeof(window.opera) != 'undefined') {\n        return true;\n    }\n\n    var is_confirmed = confirm(PMA_messages['strBLOBRepositoryDisableStrongWarning'] + '\\n' + PMA_messages['strBLOBRepositoryDisableAreYouSure']);\n\n    return is_confirmed;\n} // end of the 'confirmDisableBLOBRepository()' function\n\n\n/**\n * Displays an error message if the user submitted the sql query form with no\n * sql query, else checks for \"DROP/DELETE/ALTER\" statements\n *\n * @param   object   the form\n *\n * @return  boolean  always false\n *\n * @see     confirmQuery()\n */\nfunction checkSqlQuery(theForm)\n{\n    var sqlQuery = theForm.elements['sql_query'];\n    var isEmpty  = 1;\n\n    var space_re = new RegExp('\\\\s+');\n    if (typeof(theForm.elements['sql_file']) != 'undefined' &&\n            theForm.elements['sql_file'].value.replace(space_re, '') != '') {\n        return true;\n    }\n    if (typeof(theForm.elements['sql_localfile']) != 'undefined' &&\n            theForm.elements['sql_localfile'].value.replace(space_re, '') != '') {\n        return true;\n    }\n    if (isEmpty && typeof(theForm.elements['id_bookmark']) != 'undefined' &&\n            (theForm.elements['id_bookmark'].value != null || theForm.elements['id_bookmark'].value != '') &&\n            theForm.elements['id_bookmark'].selectedIndex != 0\n            ) {\n        return true;\n    }\n    // Checks for \"DROP/DELETE/ALTER\" statements\n    if (sqlQuery.value.replace(space_re, '') != '') {\n        if (confirmQuery(theForm, sqlQuery)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    theForm.reset();\n    isEmpty = 1;\n\n    if (isEmpty) {\n        sqlQuery.select();\n        alert(PMA_messages['strFormEmpty']);\n        sqlQuery.focus();\n        return false;\n    }\n\n    return true;\n} // end of the 'checkSqlQuery()' function\n\n/**\n * Check if a form's element is empty.\n * An element containing only spaces is also considered empty\n *\n * @param   object   the form\n * @param   string   the name of the form field to put the focus on\n *\n * @return  boolean  whether the form field is empty or not\n */\nfunction emptyCheckTheField(theForm, theFieldName)\n{\n    var theField = theForm.elements[theFieldName];\n    var space_re = new RegExp('\\\\s+');\n    return (theField.value.replace(space_re, '') == '') ? 1 : 0;\n} // end of the 'emptyCheckTheField()' function\n\n\n/**\n * Check whether a form field is empty or not\n *\n * @param   object   the form\n * @param   string   the name of the form field to put the focus on\n *\n * @return  boolean  whether the form field is empty or not\n */\nfunction emptyFormElements(theForm, theFieldName)\n{\n    var theField = theForm.elements[theFieldName];\n    var isEmpty = emptyCheckTheField(theForm, theFieldName);\n\n\n    return isEmpty;\n} // end of the 'emptyFormElements()' function\n\n\n/**\n * Ensures a value submitted in a form is numeric and is in a range\n *\n * @param   object   the form\n * @param   string   the name of the form field to check\n * @param   integer  the minimum authorized value\n * @param   integer  the maximum authorized value\n *\n * @return  boolean  whether a valid number has been submitted or not\n */\nfunction checkFormElementInRange(theForm, theFieldName, message, min, max)\n{\n    var theField         = theForm.elements[theFieldName];\n    var val              = parseInt(theField.value);\n\n    if (typeof(min) == 'undefined') {\n        min = 0;\n    }\n    if (typeof(max) == 'undefined') {\n        max = Number.MAX_VALUE;\n    }\n\n    // It's not a number\n    if (isNaN(val)) {\n        theField.select();\n        alert(PMA_messages['strNotNumber']);\n        theField.focus();\n        return false;\n    }\n    // It's a number but it is not between min and max\n    else if (val < min || val > max) {\n        theField.select();\n        alert(message.replace('%d', val));\n        theField.focus();\n        return false;\n    }\n    // It's a valid number\n    else {\n        theField.value = val;\n    }\n    return true;\n\n} // end of the 'checkFormElementInRange()' function\n\n\nfunction checkTableEditForm(theForm, fieldsCnt)\n{\n    // TODO: avoid sending a message if user just wants to add a line\n    // on the form but has not completed at least one field name\n\n    var atLeastOneField = 0;\n    var i, elm, elm2, elm3, val, id;\n\n    for (i=0; i<fieldsCnt; i++)\n    {\n        id = \"#field_\" + i + \"_2\";\n        elm = $(id);\n        val = elm.val()\n        if (val == 'VARCHAR' || val == 'CHAR' || val == 'BIT' || val == 'VARBINARY' || val == 'BINARY') {\n            elm2 = $(\"#field_\" + i + \"_3\");\n            val = parseInt(elm2.val());\n            elm3 = $(\"#field_\" + i + \"_1\");\n            if (isNaN(val) && elm3.val() != \"\") {\n                elm2.select();\n                alert(PMA_messages['strNotNumber']);\n                elm2.focus();\n                return false;\n            }\n        }\n\n        if (atLeastOneField == 0) {\n            id = \"field_\" + i + \"_1\";\n            if (!emptyCheckTheField(theForm, id)) {\n                atLeastOneField = 1;\n            }\n        }\n    }\n    if (atLeastOneField == 0) {\n        var theField = theForm.elements[\"field_0_1\"];\n        alert(PMA_messages['strFormEmpty']);\n        theField.focus();\n        return false;\n    }\n\n    // at least this section is under jQuery\n    if ($(\"input.textfield[name='table']\").val() == \"\") {\n        alert(PMA_messages['strFormEmpty']);\n        $(\"input.textfield[name='table']\").focus();\n        return false;\n    }\n\n\n    return true;\n} // enf of the 'checkTableEditForm()' function\n\n$(document).ready(function() {\n    /**\n     * Row marking in horizontal mode (use \"live\" so that it works also for\n     * next pages reached via AJAX); a tr may have the class noclick to remove\n     * this behavior.\n     */\n    $('table:not(.noclick) tr.odd:not(.noclick), table:not(.noclick) tr.even:not(.noclick)').live('click',function(e) {\n        // do not trigger when clicked on anchor\n        if ($(e.target).is('a, img, a *')) {\n            return;\n        }\n        var $tr = $(this);\n\n        // make the table unselectable (to prevent default highlighting when shift+click)\n        //$tr.parents('table').noSelect();\n\n        if (!e.shiftKey || last_clicked_row == -1) {\n            // usual click\n\n            // XXX: FF fires two click events for <label> (label and checkbox), so we need to handle this differently\n            var $checkbox = $tr.find(':checkbox');\n            if ($checkbox.length) {\n                // checkbox in a row, add or remove class depending on checkbox state\n                var checked = $checkbox.attr('checked');\n                if (!$(e.target).is(':checkbox, label')) {\n                    checked = !checked;\n                    $checkbox.attr('checked', checked);\n                }\n                if (checked) {\n                    $tr.addClass('marked');\n                } else {\n                    $tr.removeClass('marked');\n                }\n                last_click_checked = checked;\n            } else {\n                // normaln data table, just toggle class\n                $tr.toggleClass('marked');\n                last_click_checked = false;\n            }\n\n            // remember the last clicked row\n            last_clicked_row = last_click_checked ? $('tr.odd:not(.noclick), tr.even:not(.noclick)').index(this) : -1;\n            last_shift_clicked_row = -1;\n        } else {\n            // handle the shift click\n            PMA_clearSelection();\n            var start, end;\n\n            // clear last shift click result\n            if (last_shift_clicked_row >= 0) {\n                if (last_shift_clicked_row >= last_clicked_row) {\n                    start = last_clicked_row;\n                    end = last_shift_clicked_row;\n                } else {\n                    start = last_shift_clicked_row;\n                    end = last_clicked_row;\n                }\n                $tr.parent().find('tr.odd:not(.noclick), tr.even:not(.noclick)')\n                    .slice(start, end + 1)\n                    .removeClass('marked')\n                    .find(':checkbox')\n                    .attr('checked', false);\n            }\n\n            // handle new shift click\n            var curr_row = $('tr.odd:not(.noclick), tr.even:not(.noclick)').index(this);\n            if (curr_row >= last_clicked_row) {\n                start = last_clicked_row;\n                end = curr_row;\n            } else {\n                start = curr_row;\n                end = last_clicked_row;\n            }\n            $tr.parent().find('tr.odd:not(.noclick), tr.even:not(.noclick)')\n                .slice(start, end + 1)\n                .addClass('marked')\n                .find(':checkbox')\n                .attr('checked', true);\n\n            // remember the last shift clicked row\n            last_shift_clicked_row = curr_row;\n        }\n    });\n\n    /**\n     * Add a date/time picker to each element that needs it\n     * (only when timepicker.js is loaded)\n     */\n    if ($.timepicker != undefined) {\n        $('.datefield, .datetimefield').each(function() {\n            PMA_addDatepicker($(this));\n            });\n    }\n});\n\n/**\n * True if last click is to check a row.\n */\nvar last_click_checked = false;\n\n/**\n * Zero-based index of last clicked row.\n * Used to handle the shift + click event in the code above.\n */\nvar last_clicked_row = -1;\n\n/**\n * Zero-based index of last shift clicked row.\n */\nvar last_shift_clicked_row = -1;\n\n/**\n * Row highlighting in horizontal mode (use \"live\"\n * so that it works also for pages reached via AJAX)\n */\n/*$(document).ready(function() {\n    $('tr.odd, tr.even').live('hover',function(event) {\n        var $tr = $(this);\n        $tr.toggleClass('hover',event.type=='mouseover');\n        $tr.children().toggleClass('hover',event.type=='mouseover');\n    });\n})*/\n\n/**\n * This array is used to remember mark status of rows in browse mode\n */\nvar marked_row = new Array;\n\n/**\n * marks all rows and selects its first checkbox inside the given element\n * the given element is usaly a table or a div containing the table or tables\n *\n * @param    container    DOM element\n */\nfunction markAllRows( container_id )\n{\n\n    $(\"#\"+container_id).find(\"input:checkbox:enabled\").attr('checked', 'checked')\n    .parents(\"tr\").addClass(\"marked\");\n    return true;\n}\n\n/**\n * marks all rows and selects its first checkbox inside the given element\n * the given element is usaly a table or a div containing the table or tables\n *\n * @param    container    DOM element\n */\nfunction unMarkAllRows( container_id )\n{\n\n    $(\"#\"+container_id).find(\"input:checkbox:enabled\").removeAttr('checked')\n    .parents(\"tr\").removeClass(\"marked\");\n    return true;\n}\n\n/**\n * Checks/unchecks all checkbox in given conainer (f.e. a form, fieldset or div)\n *\n * @param   string   container_id  the container id\n * @param   boolean  state         new value for checkbox (true or false)\n * @return  boolean  always true\n */\nfunction setCheckboxes( container_id, state )\n{\n\n    if(state) {\n        $(\"#\"+container_id).find(\"input:checkbox\").attr('checked', 'checked');\n    }\n    else {\n        $(\"#\"+container_id).find(\"input:checkbox\").removeAttr('checked');\n    }\n\n    return true;\n} // end of the 'setCheckboxes()' function\n\n/**\n  * Checks/unchecks all options of a <select> element\n  *\n  * @param   string   the form name\n  * @param   string   the element name\n  * @param   boolean  whether to check or to uncheck options\n  *\n  * @return  boolean  always true\n  */\nfunction setSelectOptions(the_form, the_select, do_check)\n{\n    $(\"form[name='\"+ the_form +\"'] select[name='\"+the_select+\"']\").find(\"option\").attr('selected', do_check);\n    return true;\n} // end of the 'setSelectOptions()' function\n\n/**\n * Sets current value for query box.\n */\nfunction setQuery(query)\n{\n    if (codemirror_editor) {\n        codemirror_editor.setValue(query);\n    } else {\n        document.sqlform.sql_query.value = query;\n    }\n}\n\n\n/**\n  * Create quick sql statements.\n  *\n  */\nfunction insertQuery(queryType)\n{\n    if (queryType == \"clear\") {\n        setQuery('');\n        return;\n    }\n\n    var myQuery = document.sqlform.sql_query;\n    var query = \"\";\n    var myListBox = document.sqlform.dummy;\n    var table = document.sqlform.table.value;\n\n    if (myListBox.options.length > 0) {\n        sql_box_locked = true;\n        var chaineAj = \"\";\n        var valDis = \"\";\n        var editDis = \"\";\n        var NbSelect = 0;\n        for (var i=0; i < myListBox.options.length; i++) {\n            NbSelect++;\n            if (NbSelect > 1) {\n                chaineAj += \", \";\n                valDis += \",\";\n                editDis += \",\";\n            }\n            chaineAj += myListBox.options[i].value;\n            valDis += \"[value-\" + NbSelect + \"]\";\n            editDis += myListBox.options[i].value + \"=[value-\" + NbSelect + \"]\";\n        }\n        if (queryType == \"selectall\") {\n            query = \"SELECT * FROM `\" + table + \"` WHERE 1\";\n        } else if (queryType == \"select\") {\n            query = \"SELECT \" + chaineAj + \" FROM `\" + table + \"` WHERE 1\";\n        } else if (queryType == \"insert\") {\n               query = \"INSERT INTO `\" + table + \"`(\" + chaineAj + \") VALUES (\" + valDis + \")\";\n        } else if (queryType == \"update\") {\n            query = \"UPDATE `\" + table + \"` SET \" + editDis + \" WHERE 1\";\n        } else if(queryType == \"delete\") {\n            query = \"DELETE FROM `\" + table + \"` WHERE 1\";\n        }\n        setQuery(query);\n        sql_box_locked = false;\n    }\n}\n\n\n/**\n  * Inserts multiple fields.\n  *\n  */\nfunction insertValueQuery()\n{\n    var myQuery = document.sqlform.sql_query;\n    var myListBox = document.sqlform.dummy;\n\n    if(myListBox.options.length > 0) {\n        sql_box_locked = true;\n        var chaineAj = \"\";\n        var NbSelect = 0;\n        for(var i=0; i<myListBox.options.length; i++) {\n            if (myListBox.options[i].selected) {\n                NbSelect++;\n                if (NbSelect > 1) {\n                    chaineAj += \", \";\n                }\n                chaineAj += myListBox.options[i].value;\n            }\n        }\n\n        /* CodeMirror support */\n        if (codemirror_editor) {\n            codemirror_editor.replaceSelection(chaineAj);\n        //IE support\n        } else if (document.selection) {\n            myQuery.focus();\n            sel = document.selection.createRange();\n            sel.text = chaineAj;\n            document.sqlform.insert.focus();\n        }\n        //MOZILLA/NETSCAPE support\n        else if (document.sqlform.sql_query.selectionStart || document.sqlform.sql_query.selectionStart == \"0\") {\n            var startPos = document.sqlform.sql_query.selectionStart;\n            var endPos = document.sqlform.sql_query.selectionEnd;\n            var chaineSql = document.sqlform.sql_query.value;\n\n            myQuery.value = chaineSql.substring(0, startPos) + chaineAj + chaineSql.substring(endPos, chaineSql.length);\n        } else {\n            myQuery.value += chaineAj;\n        }\n        sql_box_locked = false;\n    }\n}\n\n/**\n  * listbox redirection\n  */\nfunction goToUrl(selObj, goToLocation)\n{\n    eval(\"document.location.href = '\" + goToLocation + \"pos=\" + selObj.options[selObj.selectedIndex].value + \"'\");\n}\n\n/**\n  * Refresh the WYSIWYG scratchboard after changes have been made\n  */\nfunction refreshDragOption(e)\n{\n    var elm = $('#' + e);\n    if (elm.css('visibility') == 'visible') {\n        refreshLayout();\n        TableDragInit();\n    }\n}\n\n/**\n  * Refresh/resize the WYSIWYG scratchboard\n  */\nfunction refreshLayout()\n{\n    var elm = $('#pdflayout')\n    var orientation = $('#orientation_opt').val();\n    if($('#paper_opt').length==1){\n        var paper = $('#paper_opt').val();\n    }else{\n        var paper = 'A4';\n    }\n    if (orientation == 'P') {\n        posa = 'x';\n        posb = 'y';\n    } else {\n        posa = 'y';\n        posb = 'x';\n    }\n    elm.css('width', pdfPaperSize(paper, posa) + 'px');\n    elm.css('height', pdfPaperSize(paper, posb) + 'px');\n}\n\n/**\n  * Show/hide the WYSIWYG scratchboard\n  */\nfunction ToggleDragDrop(e)\n{\n    var elm = $('#' + e);\n    if (elm.css('visibility') == 'hidden') {\n        PDFinit(); /* Defined in pdf_pages.php */\n        elm.css('visibility', 'visible');\n        elm.css('display', 'block');\n        $('#showwysiwyg').val('1')\n    } else {\n        elm.css('visibility', 'hidden');\n        elm.css('display', 'none');\n        $('#showwysiwyg').val('0')\n    }\n}\n\n/**\n  * PDF scratchboard: When a position is entered manually, update\n  * the fields inside the scratchboard.\n  */\nfunction dragPlace(no, axis, value)\n{\n    var elm = $('#table_' + no);\n    if (axis == 'x') {\n        elm.css('left', value + 'px');\n    } else {\n        elm.css('top', value + 'px');\n    }\n}\n\n/**\n * Returns paper sizes for a given format\n */\nfunction pdfPaperSize(format, axis)\n{\n    switch (format.toUpperCase()) {\n        case '4A0':\n            if (axis == 'x') return 4767.87; else return 6740.79;\n            break;\n        case '2A0':\n            if (axis == 'x') return 3370.39; else return 4767.87;\n            break;\n        case 'A0':\n            if (axis == 'x') return 2383.94; else return 3370.39;\n            break;\n        case 'A1':\n            if (axis == 'x') return 1683.78; else return 2383.94;\n            break;\n        case 'A2':\n            if (axis == 'x') return 1190.55; else return 1683.78;\n            break;\n        case 'A3':\n            if (axis == 'x') return 841.89; else return 1190.55;\n            break;\n        case 'A4':\n            if (axis == 'x') return 595.28; else return 841.89;\n            break;\n        case 'A5':\n            if (axis == 'x') return 419.53; else return 595.28;\n            break;\n        case 'A6':\n            if (axis == 'x') return 297.64; else return 419.53;\n            break;\n        case 'A7':\n            if (axis == 'x') return 209.76; else return 297.64;\n            break;\n        case 'A8':\n            if (axis == 'x') return 147.40; else return 209.76;\n            break;\n        case 'A9':\n            if (axis == 'x') return 104.88; else return 147.40;\n            break;\n        case 'A10':\n            if (axis == 'x') return 73.70; else return 104.88;\n            break;\n        case 'B0':\n            if (axis == 'x') return 2834.65; else return 4008.19;\n            break;\n        case 'B1':\n            if (axis == 'x') return 2004.09; else return 2834.65;\n            break;\n        case 'B2':\n            if (axis == 'x') return 1417.32; else return 2004.09;\n            break;\n        case 'B3':\n            if (axis == 'x') return 1000.63; else return 1417.32;\n            break;\n        case 'B4':\n            if (axis == 'x') return 708.66; else return 1000.63;\n            break;\n        case 'B5':\n            if (axis == 'x') return 498.90; else return 708.66;\n            break;\n        case 'B6':\n            if (axis == 'x') return 354.33; else return 498.90;\n            break;\n        case 'B7':\n            if (axis == 'x') return 249.45; else return 354.33;\n            break;\n        case 'B8':\n            if (axis == 'x') return 175.75; else return 249.45;\n            break;\n        case 'B9':\n            if (axis == 'x') return 124.72; else return 175.75;\n            break;\n        case 'B10':\n            if (axis == 'x') return 87.87; else return 124.72;\n            break;\n        case 'C0':\n            if (axis == 'x') return 2599.37; else return 3676.54;\n            break;\n        case 'C1':\n            if (axis == 'x') return 1836.85; else return 2599.37;\n            break;\n        case 'C2':\n            if (axis == 'x') return 1298.27; else return 1836.85;\n            break;\n        case 'C3':\n            if (axis == 'x') return 918.43; else return 1298.27;\n            break;\n        case 'C4':\n            if (axis == 'x') return 649.13; else return 918.43;\n            break;\n        case 'C5':\n            if (axis == 'x') return 459.21; else return 649.13;\n            break;\n        case 'C6':\n            if (axis == 'x') return 323.15; else return 459.21;\n            break;\n        case 'C7':\n            if (axis == 'x') return 229.61; else return 323.15;\n            break;\n        case 'C8':\n            if (axis == 'x') return 161.57; else return 229.61;\n            break;\n        case 'C9':\n            if (axis == 'x') return 113.39; else return 161.57;\n            break;\n        case 'C10':\n            if (axis == 'x') return 79.37; else return 113.39;\n            break;\n        case 'RA0':\n            if (axis == 'x') return 2437.80; else return 3458.27;\n            break;\n        case 'RA1':\n            if (axis == 'x') return 1729.13; else return 2437.80;\n            break;\n        case 'RA2':\n            if (axis == 'x') return 1218.90; else return 1729.13;\n            break;\n        case 'RA3':\n            if (axis == 'x') return 864.57; else return 1218.90;\n            break;\n        case 'RA4':\n            if (axis == 'x') return 609.45; else return 864.57;\n            break;\n        case 'SRA0':\n            if (axis == 'x') return 2551.18; else return 3628.35;\n            break;\n        case 'SRA1':\n            if (axis == 'x') return 1814.17; else return 2551.18;\n            break;\n        case 'SRA2':\n            if (axis == 'x') return 1275.59; else return 1814.17;\n            break;\n        case 'SRA3':\n            if (axis == 'x') return 907.09; else return 1275.59;\n            break;\n        case 'SRA4':\n            if (axis == 'x') return 637.80; else return 907.09;\n            break;\n        case 'LETTER':\n            if (axis == 'x') return 612.00; else return 792.00;\n            break;\n        case 'LEGAL':\n            if (axis == 'x') return 612.00; else return 1008.00;\n            break;\n        case 'EXECUTIVE':\n            if (axis == 'x') return 521.86; else return 756.00;\n            break;\n        case 'FOLIO':\n            if (axis == 'x') return 612.00; else return 936.00;\n            break;\n    } // end switch\n\n    return 0;\n}\n\n/**\n * for playing media from the BLOB repository\n *\n * @param   var\n * @param   var     url_params  main purpose is to pass the token\n * @param   var     bs_ref      BLOB repository reference\n * @param   var     m_type      type of BLOB repository media\n * @param   var     w_width     width of popup window\n * @param   var     w_height    height of popup window\n */\nfunction popupBSMedia(url_params, bs_ref, m_type, is_cust_type, w_width, w_height)\n{\n    // if width not specified, use default\n    if (w_width == undefined) {\n        w_width = 640;\n    }\n\n    // if height not specified, use default\n    if (w_height == undefined) {\n        w_height = 480;\n    }\n\n    // open popup window (for displaying video/playing audio)\n    var mediaWin = window.open('bs_play_media.php?' + url_params + '&bs_reference=' + bs_ref + '&media_type=' + m_type + '&custom_type=' + is_cust_type, 'viewBSMedia', 'width=' + w_width + ', height=' + w_height + ', resizable=1, scrollbars=1, status=0');\n}\n\n/**\n * popups a request for changing MIME types for files in the BLOB repository\n *\n * @param   var     db                      database name\n * @param   var     table                   table name\n * @param   var     reference               BLOB repository reference\n * @param   var     current_mime_type       current MIME type associated with BLOB repository reference\n */\nfunction requestMIMETypeChange(db, table, reference, current_mime_type)\n{\n    // no mime type specified, set to default (nothing)\n    if (undefined == current_mime_type) {\n        current_mime_type = \"\";\n    }\n\n    // prompt user for new mime type\n    var new_mime_type = prompt(\"Enter custom MIME type\", current_mime_type);\n\n    // if new mime_type is specified and is not the same as the previous type, request for mime type change\n    if (new_mime_type && new_mime_type != current_mime_type) {\n        changeMIMEType(db, table, reference, new_mime_type);\n    }\n}\n\n/**\n * changes MIME types for files in the BLOB repository\n *\n * @param   var     db              database name\n * @param   var     table           table name\n * @param   var     reference       BLOB repository reference\n * @param   var     mime_type       new MIME type to be associated with BLOB repository reference\n */\nfunction changeMIMEType(db, table, reference, mime_type)\n{\n    // specify url and parameters for jQuery POST\n    var mime_chg_url = 'bs_change_mime_type.php';\n    var params = {bs_db: db, bs_table: table, bs_reference: reference, bs_new_mime_type: mime_type};\n\n    // jQuery POST\n    jQuery.post(mime_chg_url, params);\n}\n\n/**\n * Jquery Coding for inline editing SQL_QUERY\n */\n$(document).ready(function(){\n    $(\".inline_edit_sql\").live('click', function(){\n        if ($('#sql_query_edit').length) {\n            // An inline query editor is already open,\n            // we don't want another copy of it\n            return false;\n        }\n\n        var $form = $(this).prev();\n        var sql_query  = $form.find(\"input[name='sql_query']\").val();\n        var $inner_sql = $(this).parent().prev().find('.inner_sql');\n        var old_text   = $inner_sql.html();\n\n        var new_content = \"<textarea name=\\\"sql_query_edit\\\" id=\\\"sql_query_edit\\\">\" + sql_query + \"</textarea>\\n\";\n        new_content    += \"<input type=\\\"button\\\" class=\\\"btnSave\\\" value=\\\"\" + PMA_messages['strGo'] + \"\\\">\\n\";\n        new_content    += \"<input type=\\\"button\\\" class=\\\"btnDiscard\\\" value=\\\"\" + PMA_messages['strCancel'] + \"\\\">\\n\";\n        $inner_sql.replaceWith(new_content);\n\n        // These settings are duplicated from the .ready()function in functions.js\n        var height = $('#sql_query_edit').css('height');\n        codemirror_editor = CodeMirror.fromTextArea($('textarea[name=\"sql_query_edit\"]')[0], {\n            lineNumbers: true,\n            matchBrackets: true,\n            indentUnit: 4,\n            mode: \"text/x-mysql\",\n            lineWrapping: true\n        });\n        codemirror_editor.getScrollerElement().style.height = height;\n        codemirror_editor.refresh();\n\n        $(\".btnSave\").click(function(){\n            if (codemirror_editor !== undefined) {\n                var sql_query = codemirror_editor.getValue();\n            } else {\n                var sql_query = $(this).prev().val();\n            }\n            var $fake_form = $('<form>', {action: 'import.php', method: 'post'})\n                    .append($form.find(\"input[name=server], input[name=db], input[name=table], input[name=token]\").clone())\n                    .append($('<input>', {type: 'hidden', name: 'show_query', value: 1}))\n                    .append($('<input>', {type: 'hidden', name: 'sql_query', value: sql_query}));\n            $fake_form.appendTo($('body')).submit();\n        });\n        $(\".btnDiscard\").click(function(){\n            $(this).closest(\".sql\").html(\"<span class=\\\"syntax\\\"><span class=\\\"inner_sql\\\">\" + old_text + \"</span></span>\");\n        });\n        return false;\n    });\n\n    $('.sqlbutton').click(function(evt){\n        insertQuery(evt.target.id);\n        return false;\n    });\n\n    $(\"#export_type\").change(function(){\n        if($(\"#export_type\").val()=='svg'){\n            $(\"#show_grid_opt\").attr(\"disabled\",\"disabled\");\n            $(\"#orientation_opt\").attr(\"disabled\",\"disabled\");\n            $(\"#with_doc\").attr(\"disabled\",\"disabled\");\n            $(\"#show_table_dim_opt\").removeAttr(\"disabled\");\n            $(\"#all_table_same_wide\").removeAttr(\"disabled\");\n            $(\"#paper_opt\").removeAttr(\"disabled\",\"disabled\");\n            $(\"#show_color_opt\").removeAttr(\"disabled\",\"disabled\");\n            //$(this).css(\"background-color\",\"yellow\");\n        }else if($(\"#export_type\").val()=='dia'){\n            $(\"#show_grid_opt\").attr(\"disabled\",\"disabled\");\n            $(\"#with_doc\").attr(\"disabled\",\"disabled\");\n            $(\"#show_table_dim_opt\").attr(\"disabled\",\"disabled\");\n            $(\"#all_table_same_wide\").attr(\"disabled\",\"disabled\");\n            $(\"#paper_opt\").removeAttr(\"disabled\",\"disabled\");\n            $(\"#show_color_opt\").removeAttr(\"disabled\",\"disabled\");\n            $(\"#orientation_opt\").removeAttr(\"disabled\",\"disabled\");\n        }else if($(\"#export_type\").val()=='eps'){\n            $(\"#show_grid_opt\").attr(\"disabled\",\"disabled\");\n            $(\"#orientation_opt\").removeAttr(\"disabled\");\n            $(\"#with_doc\").attr(\"disabled\",\"disabled\");\n            $(\"#show_table_dim_opt\").attr(\"disabled\",\"disabled\");\n            $(\"#all_table_same_wide\").attr(\"disabled\",\"disabled\");\n            $(\"#paper_opt\").attr(\"disabled\",\"disabled\");\n            $(\"#show_color_opt\").attr(\"disabled\",\"disabled\");\n\n        }else if($(\"#export_type\").val()=='pdf'){\n            $(\"#show_grid_opt\").removeAttr(\"disabled\");\n            $(\"#orientation_opt\").removeAttr(\"disabled\");\n            $(\"#with_doc\").removeAttr(\"disabled\",\"disabled\");\n            $(\"#show_table_dim_opt\").removeAttr(\"disabled\",\"disabled\");\n            $(\"#all_table_same_wide\").removeAttr(\"disabled\",\"disabled\");\n            $(\"#paper_opt\").removeAttr(\"disabled\",\"disabled\");\n            $(\"#show_color_opt\").removeAttr(\"disabled\",\"disabled\");\n        }else{\n            // nothing\n        }\n    });\n\n    $('#sqlquery').focus().keydown(function (e) {\n        if (e.ctrlKey && e.keyCode == 13) {\n            $(\"#sqlqueryform\").submit();\n        }\n    });\n\n    if ($('#input_username')) {\n        if ($('#input_username').val() == '') {\n            $('#input_username').focus();\n        } else {\n            $('#input_password').focus();\n        }\n    }\n});\n\n/**\n * Show a message on the top of the page for an Ajax request\n *\n * Sample usage:\n *\n * 1) var $msg = PMA_ajaxShowMessage();\n * This will show a message that reads \"Loading...\". Such a message will not\n * disappear automatically and cannot be dismissed by the user. To remove this\n * message either the PMA_ajaxRemoveMessage($msg) function must be called or\n * another message must be show with PMA_ajaxShowMessage() function.\n *\n * 2) var $msg = PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n * This is a special case. The behaviour is same as above,\n * just with a different message\n *\n * 3) var $msg = PMA_ajaxShowMessage('The operation was successful');\n * This will show a message that will disappear automatically and it can also\n * be dismissed by the user.\n *\n * 4) var $msg = PMA_ajaxShowMessage('Some error', false);\n * This will show a message that will not disappear automatically, but it\n * can be dismissed by the user after he has finished reading it.\n *\n * @param   string  message     string containing the message to be shown.\n *                              optional, defaults to 'Loading...'\n * @param   mixed   timeout     number of milliseconds for the message to be visible\n *                              optional, defaults to 5000. If set to 'false', the\n *                              notification will never disappear\n * @return  jQuery object       jQuery Element that holds the message div\n *                              this object can be passed to PMA_ajaxRemoveMessage()\n *                              to remove the notification\n */\nfunction PMA_ajaxShowMessage(message, timeout)\n{\n    /**\n     * @var self_closing Whether the notification will automatically disappear\n     */\n    var self_closing = true;\n    /**\n     * @var dismissable Whether the user will be able to remove\n     *                  the notification by clicking on it\n     */\n    var dismissable = true;\n    // Handle the case when a empty data.message is passed.\n    // We don't want the empty message\n    if (message == '') {\n        return true;\n    } else if (! message) {\n        // If the message is undefined, show the default\n        message = PMA_messages['strLoading'];\n        dismissable = false;\n        self_closing = false;\n    } else if (message == PMA_messages['strProcessingRequest']) {\n        // This is another case where the message should not disappear\n        dismissable = false;\n        self_closing = false;\n    }\n    // Figure out whether (or after how long) to remove the notification\n    if (timeout == undefined) {\n        timeout = 5000;\n    } else if (timeout === false) {\n        self_closing = false;\n    }\n    // Create a parent element for the AJAX messages, if necessary\n    if ($('#loading_parent').length == 0) {\n        $('<div id=\"loading_parent\"></div>')\n        .prependTo(\"body\");\n    }\n    // Update message count to create distinct message elements every time\n    ajax_message_count++;\n    // Remove all old messages, if any\n    $(\".ajax_notification[id^=ajax_message_num]\").remove();\n    /**\n     * @var    $retval    a jQuery object containing the reference\n     *                    to the created AJAX message\n     */\n    var $retval = $(\n            '<span class=\"ajax_notification\" id=\"ajax_message_num_'\n            + ajax_message_count +\n            '\"></span>'\n    )\n    .hide()\n    .appendTo(\"#loading_parent\")\n    .html(message)\n    .fadeIn('medium');\n    // If the notification is self-closing we should create a callback to remove it\n    if (self_closing) {\n        $retval\n        .delay(timeout)\n        .fadeOut('medium', function() {\n            if ($(this).is('.dismissable')) {\n                // Here we should destroy the qtip instance, but\n                // due to a bug in qtip's implementation we can\n                // only hide it without throwing JS errors.\n                $(this).qtip('hide');\n            }\n            // Remove the notification\n            $(this).remove();\n        });\n    }\n    // If the notification is dismissable we need to add the relevant class to it\n    // and add a tooltip so that the users know that it can be removed\n    if (dismissable) {\n        $retval.addClass('dismissable').css('cursor', 'pointer');\n        /**\n         * @var qOpts Options for \"Dismiss notification\" tooltip\n         */\n        var qOpts = {\n            show: {\n                effect: { length: 0 },\n                delay: 0\n            },\n            hide: {\n                effect: { length: 0 },\n                delay: 0\n            }\n        };\n        /**\n         * Add a tooltip to the notification to let the user know that (s)he\n         * can dismiss the ajax notification by clicking on it.\n         */\n        PMA_createqTip($retval, PMA_messages['strDismiss'], qOpts);\n    }\n\n    return $retval;\n}\n\n/**\n * Removes the message shown for an Ajax operation when it's completed\n *\n * @param  jQuery object   jQuery Element that holds the notification\n *\n * @return nothing\n */\nfunction PMA_ajaxRemoveMessage($this_msgbox)\n{\n    if ($this_msgbox != undefined && $this_msgbox instanceof jQuery) {\n        $this_msgbox\n        .stop(true, true)\n        .fadeOut('medium');\n        if ($this_msgbox.is('.dismissable')) {\n            if ($('#no_hint').length < 0) {\n                // Here we should destroy the qtip instance, but\n                // due to a bug in qtip's implementation we can\n                // only hide it without throwing JS errors.\n                $this_msgbox.qtip('hide');\n            }\n        } else {\n            $this_msgbox.remove();\n        }\n    }\n}\n\n$(document).ready(function() {\n    /**\n     * Allows the user to dismiss a notification\n     * created with PMA_ajaxShowMessage()\n     */\n    $('.ajax_notification.dismissable').live('click', function () {\n        PMA_ajaxRemoveMessage($(this));\n    });\n    /**\n     * The below two functions hide the \"Dismiss notification\" tooltip when a user\n     * is hovering a link or button that is inside an ajax message\n     */\n    $('.ajax_notification a, .ajax_notification button, .ajax_notification input')\n    .live('mouseover', function () {\n        $(this).parents('.ajax_notification').qtip('hide');\n    });\n    $('.ajax_notification a, .ajax_notification button, .ajax_notification input')\n    .live('mouseout', function () {\n        $(this).parents('.ajax_notification').qtip('show');\n    });\n});\n\n/**\n * Hides/shows the \"Open in ENUM/SET editor\" message, depending on the data type of the column currently selected\n */\nfunction PMA_showNoticeForEnum(selectElement)\n{\n    var enum_notice_id = selectElement.attr(\"id\").split(\"_\")[1];\n    enum_notice_id += \"_\" + (parseInt(selectElement.attr(\"id\").split(\"_\")[2]) + 1);\n    var selectedType = selectElement.val();\n    if (selectedType == \"ENUM\" || selectedType == \"SET\") {\n        $(\"p[id='enum_notice_\" + enum_notice_id + \"']\").show();\n    } else {\n        $(\"p[id='enum_notice_\" + enum_notice_id + \"']\").hide();\n    }\n}\n\n/**\n * Generates a dialog box to pop up the create_table form\n */\nfunction PMA_createTableDialog( $div, url , target)\n{\n     /**\n      *  @var    button_options  Object that stores the options passed to jQueryUI\n      *                          dialog\n      */\n     var button_options = {};\n     // in the following function we need to use $(this)\n     button_options[PMA_messages['strCancel']] = function() {\n         $(this).closest('.ui-dialog-content').dialog('close').remove();\n     };\n\n     var button_options_error = {};\n     button_options_error[PMA_messages['strOK']] = function() {\n         $(this).closest('.ui-dialog-content').dialog('close').remove();\n     };\n\n     var $msgbox = PMA_ajaxShowMessage();\n\n     $.get(target, url, function(data) {\n      //in the case of an error, show the error message returned.\n         if (data.success != undefined && data.success == false) {\n             $div\n             .append(data.error)\n             .dialog({\n                 height: 230,\n                 width: 900,\n                 open: PMA_verifyColumnsProperties,\n                 buttons : button_options_error\n             })// end dialog options\n             //remove the redundant [Back] link in the error message.\n             .find('fieldset').remove();\n         }\n         else {\n             var size = getWindowSize();\n             var timeout;\n             $div\n             .append(data)\n             .dialog({\n                 dialogClass: 'create-table',\n                 resizable: false,\n                 draggable: false,\n                 modal: true,\n                 stack: false,\n                 position: ['left','top'],\n                 width: size.width-10,\n                 height: size.height-10,\n                 open: function() {\n                     var dialog_id = $(this).attr('id');\n                     $(window).bind('resize.dialog-resizer', function() {\n                         clearTimeout(timeout);\n                         timeout = setTimeout(function() {\n                             var size = getWindowSize();\n                             $('#'+dialog_id).dialog('option', {\n                                 width: size.width-10,\n                                 height: size.height-10\n                             });\n                         }, 50);\n                     });\n\n                     var $wrapper = $('<div>', {'id': 'content-hide'}).hide();\n                     $('body > *:not(.ui-dialog)').wrapAll($wrapper);\n\n                     $(this)\n                         .scrollTop(0) // for Chrome\n                         .closest('.ui-dialog').css({\n                             left: 0,\n                             top: 0\n                         });\n\n                     PMA_verifyColumnsProperties();\n\n                     // move the Cancel button next to the Save button\n                     var $button_pane = $('.ui-dialog-buttonpane');\n                     var $cancel_button = $button_pane.find('.ui-button');\n                     var $save_button  = $('#create_table_form').find(\"input[name='do_save_data']\");\n                     $cancel_button.insertAfter($save_button);\n                     $button_pane.hide();\n                 },\n                 close: function() {\n                     $(window).unbind('resize.dialog-resizer');\n                     $('#content-hide > *').unwrap();\n                     // resize topmenu\n                     menuResize();\n                     menuResize(); // somehow need to call it twice to work\n                 },\n                 buttons: button_options\n             }); // end dialog options\n         }\n        PMA_convertFootnotesToTooltips($div);\n        PMA_ajaxRemoveMessage($msgbox);\n     }); // end $.get()\n\n}\n\n/**\n * Creates a highcharts chart in the given container\n *\n * @param   var     settings    object with highcharts properties that should be applied. (See also http://www.highcharts.com/ref/)\n *                              requires at least settings.chart.renderTo and settings.series to be set.\n *                              In addition there may be an additional property object 'realtime' that allows for realtime charting:\n *                              realtime: {\n *                                  url: adress to get the data from (will always add token, ajax_request=1 and chart_data=1 to the GET request)\n *                                  type: the GET request will also add type=[value of the type property] to the request\n *                                  callback: Callback function that should draw the point, it's called with 4 parameters in this order:\n *                                      - the chart object\n *                                      - the current response value of the GET request, JSON parsed\n *                                      - the previous response value of the GET request, JSON parsed\n *                                      - the number of added points\n *                                  error: Callback function when the get request fails. TODO: Apply callback on timeouts aswell\n *                              }\n *\n * @return  object   The created highcharts instance\n */\nfunction PMA_createChart(passedSettings)\n{\n    var container = passedSettings.chart.renderTo;\n\n    var settings = {\n        chart: {\n            type: 'spline',\n            marginRight: 10,\n            backgroundColor: 'none',\n            events: {\n                /* Live charting support */\n                load: function() {\n                    var thisChart = this;\n                    var lastValue = null, curValue = null;\n                    var numLoadedPoints = 0, otherSum = 0;\n                    var diff;\n\n                    // No realtime updates for graphs that are being exported, and disabled when realtime is not set\n                    // Also don't do live charting if we don't have the server time\n                    if(thisChart.options.chart.forExport == true ||\n                        ! thisChart.options.realtime ||\n                        ! thisChart.options.realtime.callback ||\n                        ! server_time_diff) return;\n\n                    thisChart.options.realtime.timeoutCallBack = function() {\n                        thisChart.options.realtime.postRequest = $.post(\n                            thisChart.options.realtime.url,\n                            thisChart.options.realtime.postData,\n                            function(data) {\n                                try {\n                                    curValue = jQuery.parseJSON(data);\n                                } catch (err) {\n                                    if(thisChart.options.realtime.error)\n                                        thisChart.options.realtime.error(err);\n                                    return;\n                                }\n\n                                if (lastValue==null) {\n                                    diff = curValue.x - thisChart.xAxis[0].getExtremes().max;\n                                } else {\n                                    diff = parseInt(curValue.x - lastValue.x);\n                                }\n\n                                thisChart.xAxis[0].setExtremes(\n                                    thisChart.xAxis[0].getExtremes().min+diff,\n                                    thisChart.xAxis[0].getExtremes().max+diff,\n                                    false\n                                );\n\n                                thisChart.options.realtime.callback(thisChart,curValue,lastValue,numLoadedPoints);\n\n                                lastValue = curValue;\n                                numLoadedPoints++;\n\n                                // Timeout has been cleared => don't start a new timeout\n                                if (chart_activeTimeouts[container] == null) {\n                                    return;\n                                }\n\n                                chart_activeTimeouts[container] = setTimeout(\n                                    thisChart.options.realtime.timeoutCallBack,\n                                    thisChart.options.realtime.refreshRate\n                                );\n                        });\n                    }\n\n                    chart_activeTimeouts[container] = setTimeout(thisChart.options.realtime.timeoutCallBack, 5);\n                }\n            }\n        },\n        plotOptions: {\n            series: {\n                marker: {\n                    radius: 3\n                }\n            }\n        },\n        credits: {\n            enabled:false\n        },\n        xAxis: {\n            type: 'datetime'\n        },\n        yAxis: {\n            min: 0,\n            title: {\n                text: PMA_messages['strTotalCount']\n            },\n            plotLines: [{\n                value: 0,\n                width: 1,\n                color: '#808080'\n            }]\n        },\n        tooltip: {\n            formatter: function() {\n                    return '<b>' + this.series.name +'</b><br/>' +\n                    Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +\n                    Highcharts.numberFormat(this.y, 2);\n            }\n        },\n        exporting: {\n            enabled: true\n        },\n        series: []\n    }\n\n    /* Set/Get realtime chart default values */\n    if(passedSettings.realtime) {\n        if(!passedSettings.realtime.refreshRate) {\n            passedSettings.realtime.refreshRate = 5000;\n        }\n\n        if(!passedSettings.realtime.numMaxPoints) {\n            passedSettings.realtime.numMaxPoints = 30;\n        }\n\n        // Allow custom POST vars to be added\n        passedSettings.realtime.postData = $.extend(false,{ ajax_request: true, chart_data: 1, type: passedSettings.realtime.type },passedSettings.realtime.postData);\n\n        if(server_time_diff) {\n            settings.xAxis.min = new Date().getTime() - server_time_diff - passedSettings.realtime.numMaxPoints * passedSettings.realtime.refreshRate;\n            settings.xAxis.max = new Date().getTime() - server_time_diff + passedSettings.realtime.refreshRate;\n        }\n    }\n\n    // Overwrite/Merge default settings with passedsettings\n    $.extend(true,settings,passedSettings);\n\n    return new Highcharts.Chart(settings);\n}\n\n\n/*\n * Creates a Profiling Chart. Used in server_status_monitor.js\n */\nfunction PMA_createProfilingChart(data, options)\n{\n    return PMA_createChart($.extend(true, {\n        chart: {\n            renderTo: 'profilingchart',\n            type: 'pie'\n        },\n        title: { text:'', margin:0 },\n        series: [{\n            type: 'pie',\n            name: PMA_messages['strQueryExecutionTime'],\n            data: data\n        }],\n        plotOptions: {\n            pie: {\n                allowPointSelect: true,\n                cursor: 'pointer',\n                dataLabels: {\n                    enabled: true,\n                    distance: 35,\n                    formatter: function() {\n                        return '<b>'+ this.point.name +'</b><br/>'+ Highcharts.numberFormat(this.percentage, 2) +' %';\n                   }\n                }\n            }\n        },\n        tooltip: {\n            formatter: function() {\n                return '<b>'+ this.point.name +'</b><br/>'+PMA_prettyProfilingNum(this.y)+'<br/>('+Highcharts.numberFormat(this.percentage, 2) +' %)';\n            }\n        }\n    },options));\n}\n\n/*\n * Creates a Profiling Chart with jqplot. Used in sql.js\n */\nfunction PMA_createProfilingChartJqplot(target, data)\n{\n    return $.jqplot(target, [data],\n        {\n            seriesDefaults: {\n                renderer: $.jqplot.PieRenderer,\n                rendererOptions: {\n                    showDataLabels:  true \n                }\n            },\n            legend: {\n                show: true,\n                location: 'e'\n            },\n            // from http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines#Color_Palette\n            seriesColors: [\n             '#fce94f',\n             '#fcaf3e',\n             '#e9b96e',\n             '#8ae234',\n             '#729fcf',\n             '#ad7fa8',\n             '#ef2929',\n             '#eeeeec',\n             '#888a85',\n             '#c4a000',\n             '#ce5c00',\n             '#8f5902',\n             '#4e9a06',\n             '#204a87',\n             '#5c3566',\n             '#a40000',\n             '#babdb6',\n             '#2e3436'\n            ]\n        }\n    );\n}\n\n/**\n * Formats a profiling duration nicely (in us and ms time). Used in PMA_createProfilingChart() and server_status.js\n *\n * @param   integer     Number to be formatted, should be in the range of microsecond to second\n * @param   integer     Acuracy, how many numbers right to the comma should be\n * @return  string      The formatted number\n */\nfunction PMA_prettyProfilingNum(num, acc)\n{\n    if (!acc) {\n        acc = 2;\n    }\n    acc = Math.pow(10,acc);\n    if (num * 1000 < 0.1) {\n        num = Math.round(acc * (num * 1000 * 1000)) / acc + '\u00b5';\n    } else if (num < 0.1) {\n        num = Math.round(acc * (num * 1000)) / acc + 'm';\n    } else {\n        num = Math.round(acc * num) / acc;\n    }\n\n    return num + 's';\n}\n\n\n/**\n * Formats a SQL Query nicely with newlines and indentation. Depends on Codemirror and MySQL Mode!\n *\n * @param   string      Query to be formatted\n * @return  string      The formatted query\n */\nfunction PMA_SQLPrettyPrint(string)\n{\n    var mode = CodeMirror.getMode({},\"text/x-mysql\");\n    var stream = new CodeMirror.StringStream(string);\n    var state = mode.startState();\n    var token, tokens = [];\n    var output = '';\n    var tabs = function(cnt) {\n        var ret = '';\n        for (var i=0; i<4*cnt; i++)\n            ret += \" \";\n        return ret;\n    };\n\n    // \"root-level\" statements\n    var statements = {\n        'select': ['select', 'from','on','where','having','limit','order by','group by'],\n        'update': ['update', 'set','where'],\n        'insert into': ['insert into', 'values']\n    };\n    // don't put spaces before these tokens\n    var spaceExceptionsBefore = { ';':true, ',': true, '.': true, '(': true };\n    // don't put spaces after these tokens\n    var spaceExceptionsAfter = { '.': true };\n\n    // Populate tokens array\n    var str='';\n    while (! stream.eol()) {\n        stream.start = stream.pos;\n        token = mode.token(stream, state);\n        if(token != null) {\n            tokens.push([token, stream.current().toLowerCase()]);\n        }\n    }\n\n    var currentStatement = tokens[0][1];\n\n    if(! statements[currentStatement]) {\n        return string;\n    }\n    // Holds all currently opened code blocks (statement, function or generic)\n    var blockStack = [];\n    // Holds the type of block from last iteration (the current is in blockStack[0])\n    var previousBlock;\n    // If a new code block is found, newBlock contains its type for one iteration and vice versa for endBlock\n    var newBlock, endBlock;\n    // How much to indent in the current line\n    var indentLevel = 0;\n    // Holds the \"root-level\" statements\n    var statementPart, lastStatementPart = statements[currentStatement][0];\n\n    blockStack.unshift('statement');\n\n    // Iterate through every token and format accordingly\n    for (var i = 0; i < tokens.length; i++) {\n        previousBlock = blockStack[0];\n\n        // New block => push to stack\n        if (tokens[i][1] == '(') {\n            if (i < tokens.length - 1 && tokens[i+1][0] == 'statement-verb') {\n                blockStack.unshift(newBlock = 'statement');\n            } else if (i > 0 && tokens[i-1][0] == 'builtin') {\n                blockStack.unshift(newBlock = 'function');\n            } else {\n                blockStack.unshift(newBlock = 'generic');\n            }\n        } else {\n            newBlock = null;\n        }\n\n        // Block end => pop from stack\n        if (tokens[i][1] == ')') {\n            endBlock = blockStack[0];\n            blockStack.shift();\n        } else {\n            endBlock = null;\n        }\n\n        // A subquery is starting\n        if (i > 0 && newBlock == 'statement') {\n            indentLevel++;\n            output += \"\\n\" + tabs(indentLevel) + tokens[i][1] + ' ' + tokens[i+1][1].toUpperCase() + \"\\n\" + tabs(indentLevel + 1);\n            currentStatement = tokens[i+1][1];\n            i++;\n            continue;\n        }\n\n        // A subquery is ending\n        if (endBlock == 'statement' && indentLevel > 0) {\n            output += \"\\n\" + tabs(indentLevel);\n            indentLevel--;\n        }\n\n        // One less indentation for statement parts (from, where, order by, etc.) and a newline\n        statementPart = statements[currentStatement].indexOf(tokens[i][1]);\n        if (statementPart != -1) {\n            if (i > 0) output += \"\\n\";\n            output += tabs(indentLevel) + tokens[i][1].toUpperCase();\n            output += \"\\n\" + tabs(indentLevel + 1);\n            lastStatementPart = tokens[i][1];\n        }\n        // Normal indentatin and spaces for everything else\n        else {\n            if (! spaceExceptionsBefore[tokens[i][1]]\n               && ! (i > 0 && spaceExceptionsAfter[tokens[i-1][1]])\n               && output.charAt(output.length -1) != ' ' ) {\n                    output += \" \";\n            }\n            if (tokens[i][0] == 'keyword') {\n                output += tokens[i][1].toUpperCase();\n            } else {\n                output += tokens[i][1];\n            }\n        }\n\n        // split columns in select and 'update set' clauses, but only inside statements blocks\n        if (( lastStatementPart == 'select' || lastStatementPart == 'where'  || lastStatementPart == 'set')\n            && tokens[i][1]==',' && blockStack[0] == 'statement') {\n\n            output += \"\\n\" + tabs(indentLevel + 1);\n        }\n\n        // split conditions in where clauses, but only inside statements blocks\n        if (lastStatementPart == 'where'\n            && (tokens[i][1]=='and' || tokens[i][1]=='or' || tokens[i][1]=='xor')) {\n\n            if (blockStack[0] == 'statement') {\n                output += \"\\n\" + tabs(indentLevel + 1);\n            }\n            // Todo: Also split and or blocks in newlines & identation++\n            //if(blockStack[0] == 'generic')\n             //   output += ...\n        }\n    }\n    return output;\n}\n\n/**\n * jQuery function that uses jQueryUI's dialogs to confirm with user. Does not\n *  return a jQuery object yet and hence cannot be chained\n *\n * @param   string      question\n * @param   string      url         URL to be passed to the callbackFn to make\n *                                  an Ajax call to\n * @param   function    callbackFn  callback to execute after user clicks on OK\n */\n\njQuery.fn.PMA_confirm = function(question, url, callbackFn) {\n    if (PMA_messages['strDoYouReally'] == '') {\n        return true;\n    }\n\n    /**\n     *  @var    button_options  Object that stores the options passed to jQueryUI\n     *                          dialog\n     */\n    var button_options = {};\n    button_options[PMA_messages['strOK']] = function(){\n                                                $(this).dialog(\"close\").remove();\n\n                                                if($.isFunction(callbackFn)) {\n                                                    callbackFn.call(this, url);\n                                                }\n                                            };\n    button_options[PMA_messages['strCancel']] = function() {$(this).dialog(\"close\").remove();}\n\n    $('<div id=\"confirm_dialog\"></div>')\n    .prepend(question)\n    .dialog({buttons: button_options});\n};\n\n/**\n * jQuery function to sort a table's body after a new row has been appended to it.\n * Also fixes the even/odd classes of the table rows at the end.\n *\n * @param   string      text_selector   string to select the sortKey's text\n *\n * @return  jQuery Object for chaining purposes\n */\njQuery.fn.PMA_sort_table = function(text_selector) {\n    return this.each(function() {\n\n        /**\n         * @var table_body  Object referring to the table's <tbody> element\n         */\n        var table_body = $(this);\n        /**\n         * @var rows    Object referring to the collection of rows in {@link table_body}\n         */\n        var rows = $(this).find('tr').get();\n\n        //get the text of the field that we will sort by\n        $.each(rows, function(index, row) {\n            row.sortKey = $.trim($(row).find(text_selector).text().toLowerCase());\n        })\n\n        //get the sorted order\n        rows.sort(function(a,b) {\n            if(a.sortKey < b.sortKey) {\n                return -1;\n            }\n            if(a.sortKey > b.sortKey) {\n                return 1;\n            }\n            return 0;\n        })\n\n        //pull out each row from the table and then append it according to it's order\n        $.each(rows, function(index, row) {\n            $(table_body).append(row);\n            row.sortKey = null;\n        })\n\n        //Re-check the classes of each row\n        $(this).find('tr:odd')\n        .removeClass('even').addClass('odd')\n        .end()\n        .find('tr:even')\n        .removeClass('odd').addClass('even');\n    })\n}\n\n/**\n * jQuery coding for 'Create Table'.  Used on db_operations.php,\n * db_structure.php and db_tracking.php (i.e., wherever\n * libraries/display_create_table.lib.php is used)\n *\n * Attach Ajax Event handlers for Create Table\n */\n$(document).ready(function() {\n\n     /**\n     * Attach event handler to the submit action of the create table minimal form\n     * and retrieve the full table form and display it in a dialog\n     */\n    $(\"#create_table_form_minimal.ajax\").live('submit', function(event) {\n        event.preventDefault();\n        $form = $(this);\n        PMA_prepareForAjaxRequest($form);\n\n        /*variables which stores the common attributes*/\n        var url = $form.serialize();\n        var action = $form.attr('action');\n        var $div =  $('<div id=\"create_table_dialog\"></div>');\n\n        /*Calling to the createTableDialog function*/\n        PMA_createTableDialog($div, url, action);\n\n        // empty table name and number of columns from the minimal form\n        $form.find('input[name=table],input[name=num_fields]').val('');\n    });\n\n    /**\n     * Attach event handler for submission of create table form (save)\n     *\n     * @uses    PMA_ajaxShowMessage()\n     * @uses    $.PMA_sort_table()\n     *\n     */\n    // .live() must be called after a selector, see http://api.jquery.com/live\n    $(\"#create_table_form input[name=do_save_data]\").live('click', function(event) {\n        event.preventDefault();\n\n        /**\n         *  @var    the_form    object referring to the create table form\n         */\n        var $form = $(\"#create_table_form\");\n\n        /*\n         * First validate the form; if there is a problem, avoid submitting it\n         *\n         * checkTableEditForm() needs a pure element and not a jQuery object,\n         * this is why we pass $form[0] as a parameter (the jQuery object\n         * is actually an array of DOM elements)\n         */\n\n        if (checkTableEditForm($form[0], $form.find('input[name=orig_num_fields]').val())) {\n            // OK, form passed validation step\n            if ($form.hasClass('ajax')) {\n                PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n                PMA_prepareForAjaxRequest($form);\n                //User wants to submit the form\n                $.post($form.attr('action'), $form.serialize() + \"&do_save_data=\" + $(this).val(), function(data) {\n                    if(data.success == true) {\n                        $('#properties_message')\n                         .removeClass('error')\n                         .html('');\n                        PMA_ajaxShowMessage(data.message);\n                        // Only if the create table dialog (distinct panel) exists\n                        if ($(\"#create_table_dialog\").length > 0) {\n                            $(\"#create_table_dialog\").dialog(\"close\").remove();\n                        }\n\n                        /**\n                         * @var tables_table    Object referring to the <tbody> element that holds the list of tables\n                         */\n                        var tables_table = $(\"#tablesForm\").find(\"tbody\").not(\"#tbl_summary_row\");\n                        // this is the first table created in this db\n                        if (tables_table.length == 0) {\n                            if (window.parent && window.parent.frame_content) {\n                                window.parent.frame_content.location.reload();\n                            }\n                        } else {\n                            /**\n                             * @var curr_last_row   Object referring to the last <tr> element in {@link tables_table}\n                             */\n                            var curr_last_row = $(tables_table).find('tr:last');\n                            /**\n                             * @var curr_last_row_index_string   String containing the index of {@link curr_last_row}\n                             */\n                            var curr_last_row_index_string = $(curr_last_row).find('input:checkbox').attr('id').match(/\\d+/)[0];\n                            /**\n                             * @var curr_last_row_index Index of {@link curr_last_row}\n                             */\n                            var curr_last_row_index = parseFloat(curr_last_row_index_string);\n                            /**\n                             * @var new_last_row_index   Index of the new row to be appended to {@link tables_table}\n                             */\n                            var new_last_row_index = curr_last_row_index + 1;\n                            /**\n                             * @var new_last_row_id String containing the id of the row to be appended to {@link tables_table}\n                             */\n                            var new_last_row_id = 'checkbox_tbl_' + new_last_row_index;\n\n                            data.new_table_string = data.new_table_string.replace(/checkbox_tbl_/, new_last_row_id);\n                            //append to table\n                            $(data.new_table_string)\n                             .appendTo(tables_table);\n\n                            //Sort the table\n                            $(tables_table).PMA_sort_table('th');\n\n                            // Adjust summary row\n                            PMA_adjustTotals();\n                        }\n\n                        //Refresh navigation frame as a new table has been added\n                        if (window.parent && window.parent.frame_navigation) {\n                            window.parent.frame_navigation.location.reload();\n                        }\n                    } else {\n                        $('#properties_message')\n                         .addClass('error')\n                         .html(data.error);\n                        // scroll to the div containing the error message\n                        $('#properties_message')[0].scrollIntoView();\n                    }\n                }) // end $.post()\n            } // end if ($form.hasClass('ajax')\n            else {\n                // non-Ajax submit\n                $form.append('<input type=\"hidden\" name=\"do_save_data\" value=\"save\" />');\n                $form.submit();\n            }\n        } // end if (checkTableEditForm() )\n    }) // end create table form (save)\n\n    /**\n     * Attach event handler for create table form (add fields)\n     *\n     * @uses    PMA_ajaxShowMessage()\n     * @uses    $.PMA_sort_table()\n     * @uses    window.parent.refreshNavigation()\n     *\n     */\n    // .live() must be called after a selector, see http://api.jquery.com/live\n    $(\"#create_table_form.ajax input[name=submit_num_fields]\").live('click', function(event) {\n        event.preventDefault();\n\n        /**\n         *  @var    the_form    object referring to the create table form\n         */\n        var $form = $(\"#create_table_form\");\n\n        var $msgbox = PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n        PMA_prepareForAjaxRequest($form);\n\n        //User wants to add more fields to the table\n        $.post($form.attr('action'), $form.serialize() + \"&submit_num_fields=\" + $(this).val(), function(data) {\n            // if 'create_table_dialog' exists\n            if ($(\"#create_table_dialog\").length > 0) {\n                $(\"#create_table_dialog\").html(data);\n            }\n            // if 'create_table_div' exists\n            if ($(\"#create_table_div\").length > 0) {\n                $(\"#create_table_div\").html(data);\n            }\n            PMA_verifyColumnsProperties();\n            PMA_ajaxRemoveMessage($msgbox);\n        }) //end $.post()\n\n    }) // end create table form (add fields)\n\n}, 'top.frame_content'); //end $(document).ready for 'Create Table'\n\n/**\n * jQuery coding for 'Table operations'.  Used on tbl_operations.php\n * Attach Ajax Event handlers for Table operations\n */\n$(document).ready(function() {\n    /**\n     *Ajax action for submitting the \"Alter table order by\"\n    **/\n    $(\"#alterTableOrderby.ajax\").live('submit', function(event) {\n        event.preventDefault();\n        var $form = $(this);\n\n        PMA_prepareForAjaxRequest($form);\n        /*variables which stores the common attributes*/\n        $.post($form.attr('action'), $form.serialize()+\"&submitorderby=Go\", function(data) {\n            if ($(\"#sqlqueryresults\").length != 0) {\n                $(\"#sqlqueryresults\").remove();\n            }\n            if ($(\"#result_query\").length != 0) {\n                $(\"#result_query\").remove();\n            }\n            if (data.success == true) {\n                PMA_ajaxShowMessage(data.message);\n                $(\"<div id='sqlqueryresults'></div>\").insertAfter(\"#floating_menubar\");\n                $(\"#sqlqueryresults\").html(data.sql_query);\n                $(\"#result_query .notice\").remove();\n                $(\"#result_query\").prepend((data.message));\n            } else {\n                var $temp_div = $(\"<div id='temp_div'></div>\")\n                $temp_div.html(data.error);\n                var $error = $temp_div.find(\"code\").addClass(\"error\");\n                PMA_ajaxShowMessage($error, false);\n            }\n        }) // end $.post()\n    });//end of alterTableOrderby ajax submit\n\n    /**\n     *Ajax action for submitting the \"Copy table\"\n    **/\n    $(\"#copyTable.ajax input[name='submit_copy']\").live('click', function(event) {\n        event.preventDefault();\n        var $form = $(\"#copyTable\");\n        if($form.find(\"input[name='switch_to_new']\").attr('checked')) {\n            $form.append('<input type=\"hidden\" name=\"submit_copy\" value=\"Go\" />');\n            $form.removeClass('ajax');\n            $form.find(\"#ajax_request_hidden\").remove();\n            $form.submit();\n        } else {\n            PMA_prepareForAjaxRequest($form);\n            /*variables which stores the common attributes*/\n            $.post($form.attr('action'), $form.serialize()+\"&submit_copy=Go\", function(data) {\n                if ($(\"#sqlqueryresults\").length != 0) {\n                    $(\"#sqlqueryresults\").remove();\n                }\n                if ($(\"#result_query\").length != 0) {\n                    $(\"#result_query\").remove();\n                }\n                if (data.success == true) {\n                    PMA_ajaxShowMessage(data.message);\n                    $(\"<div id='sqlqueryresults'></div>\").insertAfter(\"#floating_menubar\");\n                    $(\"#sqlqueryresults\").html(data.sql_query);\n                    $(\"#result_query .notice\").remove();\n                    $(\"#result_query\").prepend((data.message));\n                    $(\"#copyTable\").find(\"select[name='target_db'] option\").filterByValue(data.db).attr('selected', 'selected');\n\n                    //Refresh navigation frame when the table is coppied\n                    if (window.parent && window.parent.frame_navigation) {\n                        window.parent.frame_navigation.location.reload();\n                    }\n                } else {\n                    var $temp_div = $(\"<div id='temp_div'></div>\");\n                    $temp_div.html(data.error);\n                    var $error = $temp_div.find(\"code\").addClass(\"error\");\n                    PMA_ajaxShowMessage($error, false);\n                }\n            }) // end $.post()\n        }\n    });//end of copyTable ajax submit\n\n    /**\n     *Ajax events for actions in the \"Table maintenance\"\n    **/\n    $(\"#tbl_maintenance.ajax li a.maintain_action\").live('click', function(event) {\n        event.preventDefault();\n        var $link = $(this);\n        var href = $link.attr(\"href\");\n        href = href.split('?');\n        if ($(\"#sqlqueryresults\").length != 0) {\n            $(\"#sqlqueryresults\").remove();\n        }\n        if ($(\"#result_query\").length != 0) {\n            $(\"#result_query\").remove();\n        }\n        //variables which stores the common attributes\n        $.post(href[0], href[1]+\"&ajax_request=true\", function(data) {\n            if (data.success == undefined) {\n                var $temp_div = $(\"<div id='temp_div'></div>\");\n                $temp_div.html(data);\n                var $success = $temp_div.find(\"#result_query .success\");\n                PMA_ajaxShowMessage($success);\n                $(\"<div id='sqlqueryresults' class='ajax'></div>\").insertAfter(\"#floating_menubar\");\n                $(\"#sqlqueryresults\").html(data);\n                PMA_init_slider();\n                $(\"#sqlqueryresults\").children(\"fieldset\").remove();\n            } else if (data.success == true ) {\n                PMA_ajaxShowMessage(data.message);\n                $(\"<div id='sqlqueryresults' class='ajax'></div>\").insertAfter(\"#floating_menubar\");\n                $(\"#sqlqueryresults\").html(data.sql_query);\n            } else {\n                var $temp_div = $(\"<div id='temp_div'></div>\");\n                $temp_div.html(data.error);\n                var $error = $temp_div.find(\"code\").addClass(\"error\");\n                PMA_ajaxShowMessage($error, false);\n            }\n        }) // end $.post()\n    });//end of table maintanance ajax click\n\n}, 'top.frame_content'); //end $(document).ready for 'Table operations'\n\n\n/**\n * Attach Ajax event handlers for Drop Database. Moved here from db_structure.js\n * as it was also required on db_create.php\n *\n * @uses    $.PMA_confirm()\n * @uses    PMA_ajaxShowMessage()\n * @uses    window.parent.refreshNavigation()\n * @uses    window.parent.refreshMain()\n * @see $cfg['AjaxEnable']\n */\n$(document).ready(function() {\n    $(\"#drop_db_anchor\").live('click', function(event) {\n        event.preventDefault();\n\n        //context is top.frame_content, so we need to use window.parent.db to access the db var\n        /**\n         * @var question    String containing the question to be asked for confirmation\n         */\n        var question = PMA_messages['strDropDatabaseStrongWarning'] + '\\n' + PMA_messages['strDoYouReally'] + ' :\\n' + 'DROP DATABASE ' + escapeHtml(window.parent.db);\n\n        $(this).PMA_confirm(question, $(this).attr('href') ,function(url) {\n\n            PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n            $.get(url, {'is_js_confirmed': '1', 'ajax_request': true}, function(data) {\n                //Database deleted successfully, refresh both the frames\n                window.parent.refreshNavigation();\n                window.parent.refreshMain();\n            }) // end $.get()\n        }); // end $.PMA_confirm()\n    }); //end of Drop Database Ajax action\n}) // end of $(document).ready() for Drop Database\n\n/**\n * Attach Ajax event handlers for 'Create Database'.  Used wherever libraries/\n * display_create_database.lib.php is used, ie main.php and server_databases.php\n *\n * @uses    PMA_ajaxShowMessage()\n * @see $cfg['AjaxEnable']\n */\n$(document).ready(function() {\n\n    $('#create_database_form.ajax').live('submit', function(event) {\n        event.preventDefault();\n\n        $form = $(this);\n\n        PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n        PMA_prepareForAjaxRequest($form);\n\n        $.post($form.attr('action'), $form.serialize(), function(data) {\n            if(data.success == true) {\n                PMA_ajaxShowMessage(data.message);\n\n                //Append database's row to table\n                $(\"#tabledatabases\")\n                .find('tbody')\n                .append(data.new_db_string)\n                .PMA_sort_table('.name')\n                .find('#db_summary_row')\n                .appendTo('#tabledatabases tbody')\n                .removeClass('odd even');\n\n                var $databases_count_object = $('#databases_count');\n                var databases_count = parseInt($databases_count_object.text());\n                $databases_count_object.text(++databases_count);\n                //Refresh navigation frame as a new database has been added\n                if (window.parent && window.parent.frame_navigation) {\n                    window.parent.frame_navigation.location.reload();\n                }\n            }\n            else {\n                PMA_ajaxShowMessage(data.error, false);\n            }\n        }) // end $.post()\n    }) // end $().live()\n})  // end $(document).ready() for Create Database\n\n/**\n * Validates the password field in a form\n *\n * @see     PMA_messages['strPasswordEmpty']\n * @see     PMA_messages['strPasswordNotSame']\n * @param   object   the form\n * @return  boolean  whether the field value is valid or not\n */\nfunction checkPassword(the_form)\n{\n    // Did the user select 'no password'?\n    if (typeof(the_form.elements['nopass']) != 'undefined'\n     && the_form.elements['nopass'][0].checked) {\n        return true;\n    } else if (typeof(the_form.elements['pred_password']) != 'undefined'\n     && (the_form.elements['pred_password'].value == 'none'\n      || the_form.elements['pred_password'].value == 'keep')) {\n        return true;\n    }\n\n    var password = the_form.elements['pma_pw'];\n    var password_repeat = the_form.elements['pma_pw2'];\n    var alert_msg = false;\n\n    if (password.value == '') {\n        alert_msg = PMA_messages['strPasswordEmpty'];\n    } else if (password.value != password_repeat.value) {\n        alert_msg = PMA_messages['strPasswordNotSame'];\n    }\n\n    if (alert_msg) {\n        alert(alert_msg);\n        password.value  = '';\n        password_repeat.value = '';\n        password.focus();\n        return false;\n    }\n\n    return true;\n} // end of the 'checkPassword()' function\n\n/**\n * Attach Ajax event handlers for 'Change Password' on main.php\n */\n$(document).ready(function() {\n\n    /**\n     * Attach Ajax event handler on the change password anchor\n     * @see $cfg['AjaxEnable']\n     */\n    $('#change_password_anchor.dialog_active').live('click',function(event) {\n        event.preventDefault();\n        return false;\n        });\n    $('#change_password_anchor.ajax').live('click', function(event) {\n        event.preventDefault();\n        $(this).removeClass('ajax').addClass('dialog_active');\n        /**\n         * @var button_options  Object containing options to be passed to jQueryUI's dialog\n         */\n        var button_options = {};\n        button_options[PMA_messages['strCancel']] = function() {$(this).dialog('close').remove();}\n        $.get($(this).attr('href'), {'ajax_request': true}, function(data) {\n            $('<div id=\"change_password_dialog\"></div>')\n            .dialog({\n                title: PMA_messages['strChangePassword'],\n                width: 600,\n                close: function(ev,ui) {$(this).remove();},\n                buttons : button_options,\n                beforeClose: function(ev,ui){ $('#change_password_anchor.dialog_active').removeClass('dialog_active').addClass('ajax')}\n            })\n            .append(data);\n            displayPasswordGenerateButton();\n\n            $('#change_password_form').bind('submit', function (e) {\n                e.preventDefault();\n                $(this)\n                    .closest('.ui-dialog')\n                    .find('.ui-dialog-buttonpane .ui-button')\n                    .first()\n                    .click();\n            });\n        }) // end $.get()\n    }) // end handler for change password anchor\n\n    /**\n     * Attach Ajax event handler for Change Password form submission\n     *\n     * @uses    PMA_ajaxShowMessage()\n     * @see $cfg['AjaxEnable']\n     */\n    $(\"#change_password_form.ajax\").find('input[name=change_pw]').live('click', function(event) {\n        event.preventDefault();\n\n        /**\n         * @var the_form    Object referring to the change password form\n         */\n        var the_form = $(\"#change_password_form\");\n\n        if (! checkPassword(the_form[0])) {\n            return false;\n        }\n\n        /**\n         * @var this_value  String containing the value of the submit button.\n         * Need to append this for the change password form on Server Privileges\n         * page to work\n         */\n        var this_value = $(this).val();\n\n        var $msgbox = PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n        $(the_form).append('<input type=\"hidden\" name=\"ajax_request\" value=\"true\" />');\n\n        $.post($(the_form).attr('action'), $(the_form).serialize() + '&change_pw='+ this_value, function(data) {\n            if(data.success == true) {\n                $(\"#floating_menubar\").after(data.sql_query);\n                $(\"#change_password_dialog\").hide().remove();\n                $(\"#edit_user_dialog\").dialog(\"close\").remove();\n                $('#change_password_anchor.dialog_active').removeClass('dialog_active').addClass('ajax');\n                PMA_ajaxRemoveMessage($msgbox);\n            }\n            else {\n                PMA_ajaxShowMessage(data.error, false);\n            }\n        }) // end $.post()\n    }) // end handler for Change Password form submission\n}) // end $(document).ready() for Change Password\n\n/**\n * Toggle the hiding/showing of the \"Open in ENUM/SET editor\" message when\n * the page loads and when the selected data type changes\n */\n$(document).ready(function() {\n    // is called here for normal page loads and also when opening\n    // the Create table dialog\n    PMA_verifyColumnsProperties();\n    //\n    // needs live() to work also in the Create Table dialog\n    $(\"select[class='column_type']\").live('change', function() {\n        PMA_showNoticeForEnum($(this));\n    });\n    $(\".default_type\").live('change', function() {\n        PMA_hideShowDefaultValue($(this));\n    });\n});\n\nfunction PMA_verifyColumnsProperties()\n{\n    $(\"select[class='column_type']\").each(function() {\n        PMA_showNoticeForEnum($(this));\n    });\n    $(\".default_type\").each(function() {\n        PMA_hideShowDefaultValue($(this));\n    });\n}\n\n/**\n * Hides/shows the default value input field, depending on the default type\n */\nfunction PMA_hideShowDefaultValue($default_type)\n{\n    if ($default_type.val() == 'USER_DEFINED') {\n        $default_type.siblings('.default_value').show().focus();\n    } else {\n        $default_type.siblings('.default_value').hide();\n    }\n}\n\n/**\n * @var $enum_editor_dialog An object that points to the jQuery\n *                          dialog of the ENUM/SET editor\n */\nvar $enum_editor_dialog = null;\n/**\n * Opens the ENUM/SET editor and controls its functions\n */\n$(document).ready(function() {\n    $(\"a.open_enum_editor\").live('click', function() {\n        // Get the name of the column that is being edited\n        var colname = $(this).closest('tr').find('input:first').val();\n        // And use it to make up a title for the page\n        if (colname.length < 1) {\n            var title = PMA_messages['enum_newColumnVals'];\n        } else {\n            var title = PMA_messages['enum_columnVals'].replace(\n                /%s/,\n                '\"' + decodeURIComponent(colname) + '\"'\n            );\n        }\n        // Get the values as a string\n        var inputstring = $(this)\n            .closest('td')\n            .find(\"input\")\n            .val();\n        // Escape html entities\n        inputstring = $('<div/>')\n            .text(inputstring)\n            .html();\n        // Parse the values, escaping quotes and\n        // slashes on the fly, into an array\n        //\n        // There is a PHP port of the below parser in enum_editor.php\n        // If you are fixing something here, you need to also update the PHP port.\n        var values = [];\n        var in_string = false;\n        var curr, next, buffer = '';\n        for (var i=0; i<inputstring.length; i++) {\n            curr = inputstring.charAt(i);\n            next = i == inputstring.length ? '' : inputstring.charAt(i+1);\n            if (! in_string && curr == \"'\") {\n                in_string = true;\n            } else if (in_string && curr == \"\\\\\" && next == \"\\\\\") {\n                buffer += \"&#92;\";\n                i++;\n            } else if (in_string && next == \"'\" && (curr == \"'\" || curr == \"\\\\\")) {\n                buffer += \"&#39;\";\n                i++;\n            } else if (in_string && curr == \"'\") {\n                in_string = false;\n                values.push(buffer);\n                buffer = '';\n            } else if (in_string) {\n                 buffer += curr;\n            }\n        }\n        if (buffer.length > 0) {\n            // The leftovers in the buffer are the last value (if any)\n            values.push(buffer);\n        }\n        var fields = '';\n        // If there are no values, maybe the user is about to make a\n        // new list so we add a few for him/her to get started with.\n        if (values.length == 0) {\n            values.push('','','','');\n        }\n        // Add the parsed values to the editor\n        var drop_icon = PMA_getImage('b_drop.png');\n        for (var i=0; i<values.length; i++) {\n            fields += \"<tr><td>\"\n                   + \"<input type='text' value='\" + values[i] + \"'/>\"\n                   + \"</td><td class='drop'>\"\n                   + drop_icon\n                   + \"</td></tr>\";\n        }\n        /**\n         * @var dialog HTML code for the ENUM/SET dialog\n         */\n        var dialog = \"<div id='enum_editor'>\"\n                   + \"<fieldset>\"\n                   + \"<legend>\" + title + \"</legend>\"\n                   + \"<p>\" + PMA_getImage('s_notice.png')\n                   + PMA_messages['enum_hint'] + \"</p>\"\n                   + \"<table class='values'>\" + fields + \"</table>\"\n                   + \"</fieldset><fieldset class='tblFooters'>\"\n                   + \"<table class='add'><tr><td>\"\n                   + \"<div class='slider'></div>\"\n                   + \"</td><td>\"\n                   + \"<form><div><input type='submit' class='add_value' value='\"\n                   + PMA_messages['enum_addValue'].replace(/%d/, 1)\n                   + \"'/></div></form>\"\n                   + \"</td></tr></table>\"\n                   + \"<input type='hidden' value='\" // So we know which column's data is being edited\n                   + $(this).closest('td').find(\"input\").attr(\"id\")\n                   + \"' />\"\n                   + \"</fieldset>\";\n                   + \"</div>\";\n        /**\n         * @var  Defines functions to be called when the buttons in\n         * the buttonOptions jQuery dialog bar are pressed\n         */\n        var buttonOptions = {};\n        buttonOptions[PMA_messages['strGo']] = function () {\n            // When the submit button is clicked,\n            // put the data back into the original form\n            var value_array = new Array();\n            $(this).find(\".values input\").each(function(index, elm) {\n                var val = elm.value.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"''\");\n                value_array.push(\"'\" + val + \"'\");\n            });\n            // get the Length/Values text field where this value belongs\n            var values_id = $(this).find(\"input[type='hidden']\").attr(\"value\");\n            $(\"input[id='\" + values_id + \"']\").attr(\"value\", value_array.join(\",\"));\n            $(this).dialog(\"close\");\n        };\n        buttonOptions[PMA_messages['strClose']] = function () {\n            $(this).dialog(\"close\");\n        };\n        // Show the dialog\n        var width = parseInt(\n            (parseInt($('html').css('font-size'), 10)/13)*340,\n            10\n        );\n        if (! width) {\n            width = 340;\n        }\n        $enum_editor_dialog = $(dialog).dialog({\n            minWidth: width,\n            modal: true,\n            title: PMA_messages['enum_editor'],\n            buttons: buttonOptions,\n            open: function() {\n                // Focus the \"Go\" button after opening the dialog\n                $(this).closest('.ui-dialog').find('.ui-dialog-buttonpane button:first').focus();\n            },\n            close: function() {\n                $(this).remove();\n            }\n        });\n        // slider for choosing how many fields to add\n        $enum_editor_dialog.find(\".slider\").slider({\n            animate: true,\n            range: \"min\",\n            value: 1,\n            min: 1,\n            max: 9,\n            slide: function( event, ui ) {\n                $(this).closest('table').find('input[type=submit]').val(\n                    PMA_messages['enum_addValue'].replace(/%d/, ui.value)\n                );\n            }\n        });\n        // Focus the slider, otherwise it looks nearly transparent\n        $('.ui-slider-handle').addClass('ui-state-focus');\n        return false;\n    });\n\n    // When \"add a new value\" is clicked, append an empty text field\n    $(\"input.add_value\").live('click', function(e) {\n        e.preventDefault();\n        var num_new_rows = $enum_editor_dialog.find(\"div.slider\").slider('value');\n        while (num_new_rows--) {\n            $enum_editor_dialog.find('.values')\n                .append(\n                    \"<tr style='display: none;'><td>\"\n                  + \"<input type='text' />\"\n                  + \"</td><td class='drop'>\"\n                  + PMA_getImage('b_drop.png')\n                  + \"</td></tr>\"\n                )\n                .find('tr:last')\n                .show('fast');\n        }\n    });\n\n    // Removes the specified row from the enum editor\n    $(\"#enum_editor td.drop\").live('click', function() {\n        $(this).closest('tr').hide('fast', function () {\n            $(this).remove();\n        });\n    });\n});\n\n$(document).ready(function(){\n    PMA_convertFootnotesToTooltips();\n});\n\n/**\n * Ensures indexes names are valid according to their type and, for a primary\n * key, lock index name to 'PRIMARY'\n * @param   string   form_id  Variable which parses the form name as\n *                            the input\n * @return  boolean  false    if there is no index form, true else\n */\nfunction checkIndexName(form_id)\n{\n    if ($(\"#\"+form_id).length == 0) {\n        return false;\n    }\n\n    // Gets the elements pointers\n    var $the_idx_name = $(\"#input_index_name\");\n    var $the_idx_type = $(\"#select_index_type\");\n\n    // Index is a primary key\n    if ($the_idx_type.find(\"option:selected\").attr(\"value\") == 'PRIMARY') {\n        $the_idx_name.attr(\"value\", 'PRIMARY');\n        $the_idx_name.attr(\"disabled\", true);\n    }\n\n    // Other cases\n    else {\n        if ($the_idx_name.attr(\"value\") == 'PRIMARY') {\n            $the_idx_name.attr(\"value\",  '');\n        }\n        $the_idx_name.attr(\"disabled\", false);\n    }\n\n    return true;\n} // end of the 'checkIndexName()' function\n\n/**\n * function to convert the footnotes to tooltips\n *\n * @param   jquery-Object   $div    a div jquery object which specifies the\n *                                  domain for searching footnootes. If we\n *                                  ommit this parameter the function searches\n *                                  the footnotes in the whole body\n **/\nfunction PMA_convertFootnotesToTooltips($div)\n{\n    // Hide the footnotes from the footer (which are displayed for\n    // JavaScript-disabled browsers) since the tooltip is sufficient\n\n    if ($div == undefined || ! $div instanceof jQuery || $div.length == 0) {\n        $div = $(\"body\");\n    }\n\n    $footnotes = $div.find(\".footnotes\");\n\n    $footnotes.hide();\n    $footnotes.find('span').each(function() {\n        $(this).children(\"sup\").remove();\n    });\n    // The border and padding must be removed otherwise a thin yellow box remains visible\n    $footnotes.css(\"border\", \"none\");\n    $footnotes.css(\"padding\", \"0px\");\n\n    // Replace the superscripts with the help icon\n    $div.find(\"sup.footnotemarker\").hide();\n    $div.find(\"img.footnotemarker\").show();\n\n    $div.find(\"img.footnotemarker\").each(function() {\n        var img_class = $(this).attr(\"class\");\n        /** img contains two classes, as example \"footnotemarker footnote_1\".\n         *  We split it by second class and take it for the id of span\n        */\n        img_class = img_class.split(\" \");\n        for (i = 0; i < img_class.length; i++) {\n            if (img_class[i].split(\"_\")[0] == \"footnote\") {\n                var span_id = img_class[i].split(\"_\")[1];\n            }\n        }\n        /**\n         * Now we get the #id of the span with span_id variable. As an example if we\n         * initially get the img class as \"footnotemarker footnote_2\", now we get\n         * #2 as the span_id. Using that we can find footnote_2 in footnotes.\n         * */\n        var tooltip_text = $footnotes.find(\"span[id='footnote_\" + span_id + \"']\").html();\n        $(this).qtip({\n            content: tooltip_text,\n            show: { delay: 0 },\n            hide: { delay: 1000 },\n            style: { background: '#ffffcc' }\n        });\n    });\n}\n\n/**\n * This function handles the resizing of the content frame\n * and adjusts the top menu according to the new size of the frame\n */\nfunction menuResize()\n{\n    var $cnt = $('#topmenu');\n    var wmax = $cnt.innerWidth() - 5; // 5 px margin for jumping menu in Chrome\n    var $submenu = $cnt.find('.submenu');\n    var submenu_w = $submenu.outerWidth(true);\n    var $submenu_ul = $submenu.find('ul');\n    var $li = $cnt.find('> li');\n    var $li2 = $submenu_ul.find('li');\n    var more_shown = $li2.length > 0;\n\n    // Calculate the total width used by all the shown tabs\n    var total_len = more_shown ? submenu_w : 0;\n    for (var i = 0; i < $li.length-1; i++) {\n        total_len += $($li[i]).outerWidth(true);\n    }\n\n    // Now hide menu elements that don't fit into the menubar\n    var i = $li.length-1;\n    var hidden = false; // Whether we have hidden any tabs\n    while (total_len >= wmax && --i >= 0) { // Process the tabs backwards\n        hidden = true;\n        var el = $($li[i]);\n        var el_width = el.outerWidth(true);\n        el.data('width', el_width);\n        if (! more_shown) {\n            total_len -= el_width;\n            el.prependTo($submenu_ul);\n            total_len += submenu_w;\n            more_shown = true;\n        } else {\n            total_len -= el_width;\n            el.prependTo($submenu_ul);\n        }\n    }\n\n    // If we didn't hide any tabs, then there might be some space to show some\n    if (! hidden) {\n        // Show menu elements that do fit into the menubar\n        for (var i = 0; i < $li2.length; i++) {\n            total_len += $($li2[i]).data('width');\n            // item fits or (it is the last item\n            // and it would fit if More got removed)\n            if (total_len < wmax\n                || (i == $li2.length - 1 && total_len - submenu_w < wmax)\n            ) {\n                $($li2[i]).insertBefore($submenu);\n            } else {\n                break;\n            }\n        }\n    }\n\n    // Show/hide the \"More\" tab as needed\n    if ($submenu_ul.find('li').length > 0) {\n        $submenu.addClass('shown');\n    } else {\n        $submenu.removeClass('shown');\n    }\n\n    if ($cnt.find('> li').length == 1) {\n        // If there is only the \"More\" tab left, then we need\n        // to align the submenu to the left edge of the tab\n        $submenu_ul.removeClass().addClass('only');\n    } else {\n        // Otherwise we align the submenu to the right edge of the tab\n        $submenu_ul.removeClass().addClass('notonly');\n    }\n\n    if ($submenu.find('.tabactive').length) {\n        $submenu.addClass('active').find('> a').removeClass('tab').addClass('tabactive');\n    } else {\n        $submenu.removeClass('active').find('> a').addClass('tab').removeClass('tabactive');\n    }\n}\n\n$(function() {\n    var topmenu = $('#topmenu');\n    if (topmenu.length == 0) {\n        return;\n    }\n    // create submenu container\n    var link = $('<a />', {href: '#', 'class': 'tab'})\n        .text(PMA_messages['strMore'])\n        .click(function(e) {\n            e.preventDefault();\n        });\n    var img = topmenu.find('li:first-child img');\n    if (img.length) {\n        $(PMA_getImage('b_more.png').toString()).prependTo(link);\n    }\n    var submenu = $('<li />', {'class': 'submenu'})\n        .append(link)\n        .append($('<ul />'))\n        .mouseenter(function() {\n            if ($(this).find('ul .tabactive').length == 0) {\n                $(this).addClass('submenuhover').find('> a').addClass('tabactive');\n            }\n        })\n        .mouseleave(function() {\n            if ($(this).find('ul .tabactive').length == 0) {\n                $(this).removeClass('submenuhover').find('> a').removeClass('tabactive');\n            }\n        });\n    topmenu.append(submenu);\n\n    // populate submenu and register resize event\n    menuResize();\n    $(window).resize(menuResize);\n});\n\n/**\n * Get the row number from the classlist (for example, row_1)\n */\nfunction PMA_getRowNumber(classlist)\n{\n    return parseInt(classlist.split(/\\s+row_/)[1]);\n}\n\n/**\n * Changes status of slider\n */\nfunction PMA_set_status_label($element)\n{\n    var text = $element.css('display') == 'none'\n        ? '+ '\n        : '- ';\n    $element.closest('.slide-wrapper').prev().find('span').text(text);\n}\n\n/**\n * Initializes slider effect.\n */\nfunction PMA_init_slider()\n{\n    $('.pma_auto_slider').each(function() {\n        var $this = $(this);\n\n        if ($this.hasClass('slider_init_done')) {\n            return;\n        }\n        $this.addClass('slider_init_done');\n\n        var $wrapper = $('<div>', {'class': 'slide-wrapper'});\n        $wrapper.toggle($this.is(':visible'));\n        $('<a>', {href: '#'+this.id})\n            .text(this.title)\n            .prepend($('<span>'))\n            .insertBefore($this)\n            .click(function() {\n                var $wrapper = $this.closest('.slide-wrapper');\n                var visible = $this.is(':visible');\n                if (!visible) {\n                    $wrapper.show();\n                }\n                $this[visible ? 'hide' : 'show']('blind', function() {\n                    $wrapper.toggle(!visible);\n                    PMA_set_status_label($this);\n                });\n                return false;\n            });\n        $this.wrap($wrapper);\n        PMA_set_status_label($this);\n    });\n}\n\n/**\n * var  toggleButton  This is a function that creates a toggle\n *                    sliding button given a jQuery reference\n *                    to the correct DOM element\n */\nvar toggleButton = function ($obj) {\n    // In rtl mode the toggle switch is flipped horizontally\n    // so we need to take that into account\n    if ($('.text_direction', $obj).text() == 'ltr') {\n        var right = 'right';\n    } else {\n        var right = 'left';\n    }\n    /**\n     *  var  h  Height of the button, used to scale the\n     *          background image and position the layers\n     */\n    var h = $obj.height();\n    $('img', $obj).height(h);\n    $('table', $obj).css('bottom', h-1);\n    /**\n     *  var  on   Width of the \"ON\" part of the toggle switch\n     *  var  off  Width of the \"OFF\" part of the toggle switch\n     */\n    var on  = $('.toggleOn', $obj).width();\n    var off = $('.toggleOff', $obj).width();\n    // Make the \"ON\" and \"OFF\" parts of the switch the same size\n    // + 2 pixels to avoid overflowed\n    $('.toggleOn > div', $obj).width(Math.max(on, off) + 2);\n    $('.toggleOff > div', $obj).width(Math.max(on, off) + 2);\n    /**\n     *  var  w  Width of the central part of the switch\n     */\n    var w = parseInt(($('img', $obj).height() / 16) * 22, 10);\n    // Resize the central part of the switch on the top\n    // layer to match the background\n    $('table td:nth-child(2) > div', $obj).width(w);\n    /**\n     *  var  imgw    Width of the background image\n     *  var  tblw    Width of the foreground layer\n     *  var  offset  By how many pixels to move the background\n     *               image, so that it matches the top layer\n     */\n    var imgw = $('img', $obj).width();\n    var tblw = $('table', $obj).width();\n    var offset = parseInt(((imgw - tblw) / 2), 10);\n    // Move the background to match the layout of the top layer\n    $obj.find('img').css(right, offset);\n    /**\n     *  var  offw    Outer width of the \"ON\" part of the toggle switch\n     *  var  btnw    Outer width of the central part of the switch\n     */\n    var offw = $('.toggleOff', $obj).outerWidth();\n    var btnw = $('table td:nth-child(2)', $obj).outerWidth();\n    // Resize the main div so that exactly one side of\n    // the switch plus the central part fit into it.\n    $obj.width(offw + btnw + 2);\n    /**\n     *  var  move  How many pixels to move the\n     *             switch by when toggling\n     */\n    var move = $('.toggleOff', $obj).outerWidth();\n    // If the switch is initialized to the\n    // OFF state we need to move it now.\n    if ($('.container', $obj).hasClass('off')) {\n        if (right == 'right') {\n            $('table, img', $obj).animate({'left': '-=' + move + 'px'}, 0);\n        } else {\n            $('table, img', $obj).animate({'left': '+=' + move + 'px'}, 0);\n        }\n    }\n    // Attach an 'onclick' event to the switch\n    $('.container', $obj).click(function () {\n        if ($(this).hasClass('isActive')) {\n            return false;\n        } else {\n            $(this).addClass('isActive');\n        }\n        var $msg = PMA_ajaxShowMessage();\n        var $container = $(this);\n        var callback = $('.callback', this).text();\n        // Perform the actual toggle\n        if ($(this).hasClass('on')) {\n            if (right == 'right') {\n                var operator = '-=';\n            } else {\n                var operator = '+=';\n            }\n            var url = $(this).find('.toggleOff > span').text();\n            var removeClass = 'on';\n            var addClass = 'off';\n        } else {\n            if (right == 'right') {\n                var operator = '+=';\n            } else {\n                var operator = '-=';\n            }\n            var url = $(this).find('.toggleOn > span').text();\n            var removeClass = 'off';\n            var addClass = 'on';\n        }\n        $.post(url, {'ajax_request': true}, function(data) {\n            if(data.success == true) {\n                PMA_ajaxRemoveMessage($msg);\n                $container\n                .removeClass(removeClass)\n                .addClass(addClass)\n                .animate({'left': operator + move + 'px'}, function () {\n                    $container.removeClass('isActive');\n                });\n                eval(callback);\n            } else {\n                PMA_ajaxShowMessage(data.error, false);\n                $container.removeClass('isActive');\n            }\n        });\n    });\n};\n\n/**\n * Initialise all toggle buttons\n */\n$(window).load(function () {\n    $('.toggleAjax').each(function () {\n        $(this)\n        .show()\n        .find('.toggleButton')\n        toggleButton($(this));\n    });\n});\n\n/**\n * Vertical pointer\n */\n$(document).ready(function() {\n    $('.vpointer').live('hover',\n        //handlerInOut\n        function(e) {\n            var $this_td = $(this);\n            var row_num = PMA_getRowNumber($this_td.attr('class'));\n            // for all td of the same vertical row, toggle hover\n            $('.vpointer').filter('.row_' + row_num).toggleClass('hover');\n        }\n        );\n}) // end of $(document).ready() for vertical pointer\n\n$(document).ready(function() {\n    /**\n     * Vertical marker\n     */\n    $('.vmarker').live('click', function(e) {\n        // do not trigger when clicked on anchor\n        if ($(e.target).is('a, img, a *')) {\n            return;\n        }\n\n        var $this_td = $(this);\n        var row_num = PMA_getRowNumber($this_td.attr('class'));\n\n        // XXX: FF fires two click events for <label> (label and checkbox), so we need to handle this differently\n        var $tr = $(this);\n        var $checkbox = $('.vmarker').filter('.row_' + row_num + ':first').find(':checkbox');\n        if ($checkbox.length) {\n            // checkbox in a row, add or remove class depending on checkbox state\n            var checked = $checkbox.attr('checked');\n            if (!$(e.target).is(':checkbox, label')) {\n                checked = !checked;\n                $checkbox.attr('checked', checked);\n            }\n            // for all td of the same vertical row, toggle the marked class\n            if (checked) {\n                $('.vmarker').filter('.row_' + row_num).addClass('marked');\n            } else {\n                $('.vmarker').filter('.row_' + row_num).removeClass('marked');\n            }\n        } else {\n            // normaln data table, just toggle class\n            $('.vmarker').filter('.row_' + row_num).toggleClass('marked');\n        }\n    });\n\n    /**\n     * Reveal visual builder anchor\n     */\n\n    $('#visual_builder_anchor').show();\n\n    /**\n     * Page selector in db Structure (non-AJAX)\n     */\n    $('#tableslistcontainer').find('#pageselector').live('change', function() {\n        $(this).parent(\"form\").submit();\n    });\n\n    /**\n     * Page selector in navi panel (non-AJAX)\n     */\n    $('#navidbpageselector').find('#pageselector').live('change', function() {\n        $(this).parent(\"form\").submit();\n    });\n\n    /**\n     * Page selector in browse_foreigners windows (non-AJAX)\n     */\n    $('#body_browse_foreigners').find('#pageselector').live('change', function() {\n        $(this).closest(\"form\").submit();\n    });\n\n    /**\n     * Load version information asynchronously.\n     */\n    if ($('.jsversioncheck').length > 0) {\n        $.getScript('http://www.phpmyadmin.net/home_page/version.js', PMA_current_version);\n    }\n\n    /**\n     * Slider effect.\n     */\n    PMA_init_slider();\n\n    /**\n     * Enables the text generated by PMA_linkOrButton() to be clickable\n     */\n    $('a[class~=\"formLinkSubmit\"]').live('click',function(e) {\n\n        if($(this).attr('href').indexOf('=') != -1) {\n            var data = $(this).attr('href').substr($(this).attr('href').indexOf('#')+1).split('=',2);\n            $(this).parents('form').append('<input type=\"hidden\" name=\"' + data[0] + '\" value=\"' + data[1] + '\"/>');\n        }\n        $(this).parents('form').submit();\n        return false;\n    });\n\n    $('#update_recent_tables').ready(function() {\n        if (window.parent.frame_navigation != undefined\n            && window.parent.frame_navigation.PMA_reloadRecentTable != undefined)\n        {\n            window.parent.frame_navigation.PMA_reloadRecentTable();\n        }\n    });\n\n}) // end of $(document).ready()\n\n/**\n * Creates a message inside an object with a sliding effect\n *\n * @param   msg    A string containing the text to display\n * @param   $obj   a jQuery object containing the reference\n *                 to the element where to put the message\n *                 This is optional, if no element is\n *                 provided, one will be created below the\n *                 navigation links at the top of the page\n *\n * @return  bool   True on success, false on failure\n */\nfunction PMA_slidingMessage(msg, $obj)\n{\n    if (msg == undefined || msg.length == 0) {\n        // Don't show an empty message\n        return false;\n    }\n    if ($obj == undefined || ! $obj instanceof jQuery || $obj.length == 0) {\n        // If the second argument was not supplied,\n        // we might have to create a new DOM node.\n        if ($('#PMA_slidingMessage').length == 0) {\n            $('#floating_menubar')\n            .after('<span id=\"PMA_slidingMessage\" '\n                 + 'style=\"display: inline-block;\"></span>');\n        }\n        $obj = $('#PMA_slidingMessage');\n    }\n    if ($obj.has('div').length > 0) {\n        // If there already is a message inside the\n        // target object, we must get rid of it\n        $obj\n        .find('div')\n        .first()\n        .fadeOut(function () {\n            $obj\n            .children()\n            .remove();\n            $obj\n            .append('<div style=\"display: none;\">' + msg + '</div>')\n            .animate({\n                height: $obj.find('div').first().height()\n            })\n            .find('div')\n            .first()\n            .fadeIn();\n        });\n    } else {\n        // Object does not already have a message\n        // inside it, so we simply slide it down\n        var h = $obj\n                .width('100%')\n                .html('<div style=\"display: none;\">' + msg + '</div>')\n                .find('div')\n                .first()\n                .height();\n        $obj\n        .find('div')\n        .first()\n        .css('height', 0)\n        .show()\n        .animate({\n                height: h\n            }, function() {\n            // Set the height of the parent\n            // to the height of the child\n            $obj\n            .height(\n                $obj\n                .find('div')\n                .first()\n                .height()\n            );\n        });\n    }\n    return true;\n} // end PMA_slidingMessage()\n\n/**\n * Attach Ajax event handlers for Drop Table.\n *\n * @uses    $.PMA_confirm()\n * @uses    PMA_ajaxShowMessage()\n * @uses    window.parent.refreshNavigation()\n * @uses    window.parent.refreshMain()\n * @see $cfg['AjaxEnable']\n */\n$(document).ready(function() {\n    $(\"#drop_tbl_anchor\").live('click', function(event) {\n        event.preventDefault();\n\n        //context is top.frame_content, so we need to use window.parent.table to access the table var\n        /**\n         * @var question    String containing the question to be asked for confirmation\n         */\n        var question = PMA_messages['strDropTableStrongWarning'] + '\\n' + PMA_messages['strDoYouReally'] + ' :\\n' + 'DROP TABLE ' + escapeHtml(window.parent.table);\n\n        $(this).PMA_confirm(question, $(this).attr('href') ,function(url) {\n\n            PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n            $.get(url, {'is_js_confirmed': '1', 'ajax_request': true}, function(data) {\n                //Database deleted successfully, refresh both the frames\n                window.parent.refreshNavigation();\n                window.parent.refreshMain();\n            }) // end $.get()\n        }); // end $.PMA_confirm()\n    }); //end of Drop Table Ajax action\n}) // end of $(document).ready() for Drop Table\n\n/**\n * Attach Ajax event handlers for Truncate Table.\n *\n * @uses    $.PMA_confirm()\n * @uses    PMA_ajaxShowMessage()\n * @uses    window.parent.refreshNavigation()\n * @uses    window.parent.refreshMain()\n * @see $cfg['AjaxEnable']\n */\n$(document).ready(function() {\n    $(\"#truncate_tbl_anchor.ajax\").live('click', function(event) {\n        event.preventDefault();\n\n      //context is top.frame_content, so we need to use window.parent.table to access the table var\n        /**\n         * @var question    String containing the question to be asked for confirmation\n         */\n        var question = PMA_messages['strTruncateTableStrongWarning'] + '\\n' + PMA_messages['strDoYouReally'] + ' :\\n' + 'TRUNCATE TABLE ' + escapeHtml(window.parent.table);\n\n        $(this).PMA_confirm(question, $(this).attr('href') ,function(url) {\n\n            PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n            $.get(url, {'is_js_confirmed': '1', 'ajax_request': true}, function(data) {\n                if ($(\"#sqlqueryresults\").length != 0) {\n                    $(\"#sqlqueryresults\").remove();\n                }\n                if ($(\"#result_query\").length != 0) {\n                    $(\"#result_query\").remove();\n                }\n                if (data.success == true) {\n                    PMA_ajaxShowMessage(data.message);\n                    $(\"<div id='sqlqueryresults'></div>\").insertAfter(\"#floating_menubar\");\n                    $(\"#sqlqueryresults\").html(data.sql_query);\n                } else {\n                    var $temp_div = $(\"<div id='temp_div'></div>\")\n                    $temp_div.html(data.error);\n                    var $error = $temp_div.find(\"code\").addClass(\"error\");\n                    PMA_ajaxShowMessage($error, false);\n                }\n            }) // end $.get()\n        }); // end $.PMA_confirm()\n    }); //end of Truncate Table Ajax action\n}) // end of $(document).ready() for Truncate Table\n\n/**\n * Attach CodeMirror2 editor to SQL edit area.\n */\n$(document).ready(function() {\n    var elm = $('#sqlquery');\n    if (elm.length > 0 && typeof CodeMirror != 'undefined') {\n        codemirror_editor = CodeMirror.fromTextArea(elm[0], {\n            lineNumbers: true,\n            matchBrackets: true,\n            indentUnit: 4,\n            mode: \"text/x-mysql\",\n            lineWrapping: true\n        });\n    }\n});\n\n/**\n * jQuery plugin to cancel selection in HTML code.\n */\n(function ($) {\n    $.fn.noSelect = function (p) { //no select plugin by Paulo P.Marinas\n        var prevent = (p == null) ? true : p;\n        if (prevent) {\n            return this.each(function () {\n                if ($.browser.msie || $.browser.safari) $(this).bind('selectstart', function () {\n                    return false;\n                });\n                else if ($.browser.mozilla) {\n                    $(this).css('MozUserSelect', 'none');\n                    $('body').trigger('focus');\n                } else if ($.browser.opera) $(this).bind('mousedown', function () {\n                    return false;\n                });\n                else $(this).attr('unselectable', 'on');\n            });\n        } else {\n            return this.each(function () {\n                if ($.browser.msie || $.browser.safari) $(this).unbind('selectstart');\n                else if ($.browser.mozilla) $(this).css('MozUserSelect', 'inherit');\n                else if ($.browser.opera) $(this).unbind('mousedown');\n                else $(this).removeAttr('unselectable', 'on');\n            });\n        }\n    }; //end noSelect\n})(jQuery);\n\n/**\n * jQuery plugin to correctly filter input fields by value, needed\n * because some nasty values may break selector syntax\n */\n(function ($) {\n    $.fn.filterByValue = function (value) {\n        return this.filter(function () {\n            return $(this).val() === value\n        });\n    };\n})(jQuery);\n\n/**\n * Create default PMA tooltip for the element specified. The default appearance\n * can be overriden by specifying optional \"options\" parameter (see qTip options).\n */\nfunction PMA_createqTip($elements, content, options)\n{\n    if ($('#no_hint').length > 0) {\n        return;\n    }\n\n    var o = {\n        content: content,\n        style: {\n            classes: {\n                tooltip: 'normalqTip',\n                content: 'normalqTipContent'\n            },\n            name: 'dark'\n        },\n        position: {\n            target: 'mouse',\n            corner: { target: 'rightMiddle', tooltip: 'leftMiddle' },\n            adjust: { x: 10, y: 20 }\n        },\n        show: {\n            delay: 0,\n            effect: {\n                type: 'grow',\n                length: 150\n            }\n        },\n        hide: {\n            effect: {\n                type: 'grow',\n                length: 200\n            }\n        }\n    }\n\n    $elements.qtip($.extend(true, o, options));\n}\n\n/**\n * Return value of a cell in a table.\n */\nfunction PMA_getCellValue(td) {\n    if ($(td).is('.null')) {\n        return '';\n    } else if (! $(td).is('.to_be_saved') && $(td).data('original_data')) {\n        return $(td).data('original_data');\n    } else {\n        return $(td).text();\n    }\n}\n\n/* Loads a js file, an array may be passed as well */\nloadJavascript=function(file) {\n    if($.isArray(file)) {\n        for(var i=0; i<file.length; i++) {\n            $('head').append('<script type=\"text/javascript\" src=\"'+file[i]+'\"></script>');\n        }\n    } else {\n        $('head').append('<script type=\"text/javascript\" src=\"'+file+'\"></script>');\n    }\n};\n\n$(document).ready(function() {\n    /**\n     * Theme selector.\n     */\n    $('a.themeselect').live('click', function(e) {\n        window.open(\n            e.target,\n            'themes',\n            'left=10,top=20,width=510,height=350,scrollbars=yes,status=yes,resizable=yes'\n            );\n        return false;\n    });\n\n    /**\n     * Automatic form submission on change.\n     */\n    $('.autosubmit').change(function(e) {\n        e.target.form.submit();\n    });\n\n    /**\n     * Theme changer.\n     */\n    $('.take_theme').click(function(e) {\n        var what = this.name;\n        if (window.opener && window.opener.document.forms['setTheme'].elements['set_theme']) {\n            window.opener.document.forms['setTheme'].elements['set_theme'].value = what;\n            window.opener.document.forms['setTheme'].submit();\n            window.close();\n            return false;\n        }\n        return true;\n    });\n});\n\n/**\n * Clear text selection\n */\nfunction PMA_clearSelection() {\n    if(document.selection && document.selection.empty) {\n        document.selection.empty();\n    } else if(window.getSelection) {\n        var sel = window.getSelection();\n        if(sel.empty) sel.empty();\n        if(sel.removeAllRanges) sel.removeAllRanges();\n    }\n}\n\n/**\n * HTML escaping\n */\nfunction escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n}\n\n/**\n * Print button\n */\nfunction printPage()\n{\n    // Do print the page\n    if (typeof(window.print) != 'undefined') {\n        window.print();\n    }\n}\n\n$(document).ready(function() {\n    $('input#print').click(printPage);\n});\n\n/**\n * Makes the breadcrumbs and the menu bar float at the top of the viewport\n */\n$(document).ready(function () {\n    if ($(\"#floating_menubar\").length && $('#PMA_disable_floating_menubar').length == 0) {\n        $(\"#floating_menubar\")\n            .css({\n                'position': 'fixed',\n                'top': 0,\n                'left': 0,\n                'width': '100%',\n                'z-index': 500\n            })\n            .append($('#serverinfo'))\n            .append($('#topmenucontainer'));\n        $('body').css(\n            'padding-top',\n            $('#floating_menubar').outerHeight(true)\n        );\n    }\n});\n\n/**\n * Toggles row colors of a set of 'tr' elements starting from a given element\n *\n * @param $start Starting element\n */\nfunction toggleRowColors($start)\n{\n    for (var $curr_row = $start; $curr_row.length > 0; $curr_row = $curr_row.next()) {\n        if ($curr_row.hasClass('odd')) {\n            $curr_row.removeClass('odd').addClass('even');\n        } else if ($curr_row.hasClass('even')) {\n            $curr_row.removeClass('even').addClass('odd');\n        }\n    }\n}\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n *\n * @package PhpMyAdmin\n */\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\n/**\n *\n */\nif (isset($_REQUEST['GLOBALS']) || isset($_FILES['GLOBALS'])) {\n    die(__(\"GLOBALS overwrite attempt\"));\n}\n\n/**\n * Sends http headers\n */\n$GLOBALS['now'] = gmdate('D, d M Y H:i:s') . ' GMT';\n/* Prevent against ClickJacking by allowing frames only from same origin */\nif (!$GLOBALS['cfg']['AllowThirdPartyFraming']) {\n    header('X-Frame-Options: SAMEORIGIN');\n    header(\"X-Content-Security-Policy: allow 'self'; options inline-script eval-script; frame-ancestors 'self'; img-src 'self' data:; script-src 'self' http://www.phpmyadmin.net\");\n    header(\"X-WebKit-CSP: allow 'self' http://www.phpmyadmin.net; options inline-script eval-script\");\n}\nPMA_no_cache_header();\nif (!defined('IS_TRANSFORMATION_WRAPPER')) {\n    // Define the charset to be used\n    header('Content-Type: text/html; charset=utf-8');\n}\n?>\n"], "fixing_code": ["/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * general function, usually for data manipulation pages\n *\n */\n\n/**\n * @var sql_box_locked lock for the sqlbox textarea in the querybox/querywindow\n */\nvar sql_box_locked = false;\n\n/**\n * @var array holds elements which content should only selected once\n */\nvar only_once_elements = new Array();\n\n/**\n * @var   int   ajax_message_count   Number of AJAX messages shown since page load\n */\nvar ajax_message_count = 0;\n\n/**\n * @var codemirror_editor object containing CodeMirror editor\n */\nvar codemirror_editor = false;\n\n/**\n * @var chart_activeTimeouts object active timeouts that refresh the charts. When disabling a realtime chart, this can be used to stop the continuous ajax requests\n */\nvar chart_activeTimeouts = new Object();\n\n/**\n * Returns browser's viewport size, without accounting for scrollbars\n *\n * @param window wnd\n */\nfunction getWindowSize(wnd) {\n    var vp = wnd || window;\n    return {\n        // most browsers || IE6-8 strict || failsafe\n        width: vp.innerWidth || (vp.documentElement !== undefined ? vp.documentElement.clientWidth : false) || $(vp).width(),\n        height: vp.innerHeight || (vp.documentElement !== undefined ? vp.documentElement.clientHeight : false) || $(vp).height()\n    };\n}\n\n/**\n * Make sure that ajax requests will not be cached\n * by appending a random variable to their parameters\n */\n$.ajaxPrefilter(function (options, originalOptions, jqXHR) {\n    var nocache = new Date().getTime() + \"\" + Math.floor(Math.random() * 1000000);\n    if (typeof options.data == \"string\") {\n        options.data += \"&_nocache=\" + nocache;\n    } else if (typeof options.data == \"object\") {\n        options.data = $.extend(originalOptions.data, {'_nocache':nocache});\n    }\n});\n\n/**\n * Add a hidden field to the form to indicate that this will be an\n * Ajax request (only if this hidden field does not exist)\n *\n * @param   object   the form\n */\nfunction PMA_prepareForAjaxRequest($form)\n{\n    if (! $form.find('input:hidden').is('#ajax_request_hidden')) {\n        $form.append('<input type=\"hidden\" id=\"ajax_request_hidden\" name=\"ajax_request\" value=\"true\" />');\n    }\n}\n\n/**\n * Generate a new password and copy it to the password input areas\n *\n * @param   object   the form that holds the password fields\n *\n * @return  boolean  always true\n */\nfunction suggestPassword(passwd_form)\n{\n    // restrict the password to just letters and numbers to avoid problems:\n    // \"editors and viewers regard the password as multiple words and\n    // things like double click no longer work\"\n    var pwchars = \"abcdefhjmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWYXZ\";\n    var passwordlength = 16;    // do we want that to be dynamic?  no, keep it simple :)\n    var passwd = passwd_form.generated_pw;\n    passwd.value = '';\n\n    for ( i = 0; i < passwordlength; i++ ) {\n        passwd.value += pwchars.charAt( Math.floor( Math.random() * pwchars.length ) )\n    }\n    passwd_form.text_pma_pw.value = passwd.value;\n    passwd_form.text_pma_pw2.value = passwd.value;\n    return true;\n}\n\n/**\n * Version string to integer conversion.\n */\nfunction parseVersionString (str)\n{\n    if (typeof(str) != 'string') { return false; }\n    var add = 0;\n    // Parse possible alpha/beta/rc/\n    var state = str.split('-');\n    if (state.length >= 2) {\n        if (state[1].substr(0, 2) == 'rc') {\n            add = - 20 - parseInt(state[1].substr(2));\n        } else if (state[1].substr(0, 4) == 'beta') {\n            add =  - 40 - parseInt(state[1].substr(4));\n        } else if (state[1].substr(0, 5) == 'alpha') {\n            add =  - 60 - parseInt(state[1].substr(5));\n        } else if (state[1].substr(0, 3) == 'dev') {\n            /* We don't handle dev, it's git snapshot */\n            add = 0;\n        }\n    }\n    // Parse version\n    var x = str.split('.');\n    // Use 0 for non existing parts\n    var maj = parseInt(x[0]) || 0;\n    var min = parseInt(x[1]) || 0;\n    var pat = parseInt(x[2]) || 0;\n    var hotfix = parseInt(x[3]) || 0;\n    return  maj * 100000000 + min * 1000000 + pat * 10000 + hotfix * 100 + add;\n}\n\n/**\n * Indicates current available version on main page.\n */\nfunction PMA_current_version(data)\n{\n    var current = parseVersionString(pmaversion);\n    var latest = parseVersionString(data['version']);\n    var version_information_message = PMA_messages['strLatestAvailable'] + ' ' + data['version'];\n    if (latest > current) {\n        var message = $.sprintf(PMA_messages['strNewerVersion'], data['version'], data['date']);\n        if (Math.floor(latest / 10000) == Math.floor(current / 10000)) {\n            /* Security update */\n            klass = 'error';\n        } else {\n            klass = 'notice';\n        }\n        $('#maincontainer').after('<div class=\"' + klass + '\">' + message + '</div>');\n    }\n    if (latest == current) {\n        version_information_message = ' (' + PMA_messages['strUpToDate'] + ')';\n    }\n    $('#li_pma_version').append(version_information_message);\n}\n\n/**\n * for libraries/display_change_password.lib.php\n *     libraries/user_password.php\n *\n */\n\nfunction displayPasswordGenerateButton()\n{\n    $('#tr_element_before_generate_password').parent().append('<tr><td>' + PMA_messages['strGeneratePassword'] + '</td><td><input type=\"button\" id=\"button_generate_password\" value=\"' + PMA_messages['strGenerate'] + '\" onclick=\"suggestPassword(this.form)\" /><input type=\"text\" name=\"generated_pw\" id=\"generated_pw\" /></td></tr>');\n    $('#div_element_before_generate_password').parent().append('<div class=\"item\"><label for=\"button_generate_password\">' + PMA_messages['strGeneratePassword'] + ':</label><span class=\"options\"><input type=\"button\" id=\"button_generate_password\" value=\"' + PMA_messages['strGenerate'] + '\" onclick=\"suggestPassword(this.form)\" /></span><input type=\"text\" name=\"generated_pw\" id=\"generated_pw\" /></div>');\n}\n\n/*\n * Adds a date/time picker to an element\n *\n * @param   object  $this_element   a jQuery object pointing to the element\n */\nfunction PMA_addDatepicker($this_element, options)\n{\n    var showTimeOption = false;\n    if ($this_element.is('.datetimefield')) {\n        showTimeOption = true;\n    }\n\n    var defaultOptions = {\n        showOn: 'button',\n        buttonImage: themeCalendarImage, // defined in js/messages.php\n        buttonImageOnly: true,\n        stepMinutes: 1,\n        stepHours: 1,\n        showSecond: true,\n        showTimepicker: showTimeOption,\n        showButtonPanel: false,\n        dateFormat: 'yy-mm-dd', // yy means year with four digits\n        timeFormat: 'hh:mm:ss',\n        altFieldTimeOnly: false,\n        showAnim: '',\n        beforeShow: function(input, inst) {\n            // Remember that we came from the datepicker; this is used\n            // in tbl_change.js by verificationsAfterFieldChange()\n            $this_element.data('comes_from', 'datepicker');\n\n            // Fix wrong timepicker z-index, doesn't work without timeout\n            setTimeout(function() {\n                $('#ui-timepicker-div').css('z-index',$('#ui-datepicker-div').css('z-index'))\n            },0);\n        }\n    };\n\n    $this_element.datetimepicker($.extend(defaultOptions, options));\n}\n\n/**\n * selects the content of a given object, f.e. a textarea\n *\n * @param   object  element     element of which the content will be selected\n * @param   var     lock        variable which holds the lock for this element\n *                              or true, if no lock exists\n * @param   boolean only_once   if true this is only done once\n *                              f.e. only on first focus\n */\nfunction selectContent( element, lock, only_once )\n{\n    if ( only_once && only_once_elements[element.name] ) {\n        return;\n    }\n\n    only_once_elements[element.name] = true;\n\n    if ( lock  ) {\n        return;\n    }\n\n    element.select();\n}\n\n/**\n * Displays a confirmation box before submitting a \"DROP/DELETE/ALTER\" query.\n * This function is called while clicking links\n *\n * @param   object   the link\n * @param   object   the sql query to submit\n *\n * @return  boolean  whether to run the query or not\n */\nfunction confirmLink(theLink, theSqlQuery)\n{\n    // Confirmation is not required in the configuration file\n    // or browser is Opera (crappy js implementation)\n    if (PMA_messages['strDoYouReally'] == '' || typeof(window.opera) != 'undefined') {\n        return true;\n    }\n\n    var is_confirmed = confirm(PMA_messages['strDoYouReally'] + ' :\\n' + theSqlQuery);\n    if (is_confirmed) {\n        if ( $(theLink).hasClass('formLinkSubmit') ) {\n            var name = 'is_js_confirmed';\n            if ($(theLink).attr('href').indexOf('usesubform') != -1) {\n                name = 'subform[' + $(theLink).attr('href').substr('#').match(/usesubform\\[(\\d+)\\]/i)[1] + '][is_js_confirmed]';\n            }\n\n            $(theLink).parents('form').append('<input type=\"hidden\" name=\"' + name + '\" value=\"1\" />');\n        } else if ( typeof(theLink.href) != 'undefined' ) {\n            theLink.href += '&is_js_confirmed=1';\n        } else if ( typeof(theLink.form) != 'undefined' ) {\n            theLink.form.action += '?is_js_confirmed=1';\n        }\n    }\n\n    return is_confirmed;\n} // end of the 'confirmLink()' function\n\n/**\n * Displays an error message if a \"DROP DATABASE\" statement is submitted\n * while it isn't allowed, else confirms a \"DROP/DELETE/ALTER\" query before\n * sumitting it if required.\n * This function is called by the 'checkSqlQuery()' js function.\n *\n * @param   object   the form\n * @param   object   the sql query textarea\n *\n * @return  boolean  whether to run the query or not\n *\n * @see     checkSqlQuery()\n */\nfunction confirmQuery(theForm1, sqlQuery1)\n{\n    // Confirmation is not required in the configuration file\n    if (PMA_messages['strDoYouReally'] == '') {\n        return true;\n    }\n\n    // \"DROP DATABASE\" statement isn't allowed\n    if (PMA_messages['strNoDropDatabases'] != '') {\n        var drop_re = new RegExp('(^|;)\\\\s*DROP\\\\s+(IF EXISTS\\\\s+)?DATABASE\\\\s', 'i');\n        if (drop_re.test(sqlQuery1.value)) {\n            alert(PMA_messages['strNoDropDatabases']);\n            theForm1.reset();\n            sqlQuery1.focus();\n            return false;\n        } // end if\n    } // end if\n\n    // Confirms a \"DROP/DELETE/ALTER/TRUNCATE\" statement\n    //\n    // TODO: find a way (if possible) to use the parser-analyser\n    // for this kind of verification\n    // For now, I just added a ^ to check for the statement at\n    // beginning of expression\n\n    var do_confirm_re_0 = new RegExp('^\\\\s*DROP\\\\s+(IF EXISTS\\\\s+)?(TABLE|DATABASE|PROCEDURE)\\\\s', 'i');\n    var do_confirm_re_1 = new RegExp('^\\\\s*ALTER\\\\s+TABLE\\\\s+((`[^`]+`)|([A-Za-z0-9_$]+))\\\\s+DROP\\\\s', 'i');\n    var do_confirm_re_2 = new RegExp('^\\\\s*DELETE\\\\s+FROM\\\\s', 'i');\n    var do_confirm_re_3 = new RegExp('^\\\\s*TRUNCATE\\\\s', 'i');\n\n    if (do_confirm_re_0.test(sqlQuery1.value)\n        || do_confirm_re_1.test(sqlQuery1.value)\n        || do_confirm_re_2.test(sqlQuery1.value)\n        || do_confirm_re_3.test(sqlQuery1.value)) {\n        var message      = (sqlQuery1.value.length > 100)\n                         ? sqlQuery1.value.substr(0, 100) + '\\n    ...'\n                         : sqlQuery1.value;\n        var is_confirmed = confirm(PMA_messages['strDoYouReally'] + ' :\\n' + message);\n        // statement is confirmed -> update the\n        // \"is_js_confirmed\" form field so the confirm test won't be\n        // run on the server side and allows to submit the form\n        if (is_confirmed) {\n            theForm1.elements['is_js_confirmed'].value = 1;\n            return true;\n        }\n        // statement is rejected -> do not submit the form\n        else {\n            window.focus();\n            sqlQuery1.focus();\n            return false;\n        } // end if (handle confirm box result)\n    } // end if (display confirm box)\n\n    return true;\n} // end of the 'confirmQuery()' function\n\n\n/**\n * Displays a confirmation box before disabling the BLOB repository for a given database.\n * This function is called while clicking links\n *\n * @param   object   the database\n *\n * @return  boolean  whether to disable the repository or not\n */\nfunction confirmDisableRepository(theDB)\n{\n    // Confirmation is not required in the configuration file\n    // or browser is Opera (crappy js implementation)\n    if (PMA_messages['strDoYouReally'] == '' || typeof(window.opera) != 'undefined') {\n        return true;\n    }\n\n    var is_confirmed = confirm(PMA_messages['strBLOBRepositoryDisableStrongWarning'] + '\\n' + PMA_messages['strBLOBRepositoryDisableAreYouSure']);\n\n    return is_confirmed;\n} // end of the 'confirmDisableBLOBRepository()' function\n\n\n/**\n * Displays an error message if the user submitted the sql query form with no\n * sql query, else checks for \"DROP/DELETE/ALTER\" statements\n *\n * @param   object   the form\n *\n * @return  boolean  always false\n *\n * @see     confirmQuery()\n */\nfunction checkSqlQuery(theForm)\n{\n    var sqlQuery = theForm.elements['sql_query'];\n    var isEmpty  = 1;\n\n    var space_re = new RegExp('\\\\s+');\n    if (typeof(theForm.elements['sql_file']) != 'undefined' &&\n            theForm.elements['sql_file'].value.replace(space_re, '') != '') {\n        return true;\n    }\n    if (typeof(theForm.elements['sql_localfile']) != 'undefined' &&\n            theForm.elements['sql_localfile'].value.replace(space_re, '') != '') {\n        return true;\n    }\n    if (isEmpty && typeof(theForm.elements['id_bookmark']) != 'undefined' &&\n            (theForm.elements['id_bookmark'].value != null || theForm.elements['id_bookmark'].value != '') &&\n            theForm.elements['id_bookmark'].selectedIndex != 0\n            ) {\n        return true;\n    }\n    // Checks for \"DROP/DELETE/ALTER\" statements\n    if (sqlQuery.value.replace(space_re, '') != '') {\n        if (confirmQuery(theForm, sqlQuery)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    theForm.reset();\n    isEmpty = 1;\n\n    if (isEmpty) {\n        sqlQuery.select();\n        alert(PMA_messages['strFormEmpty']);\n        sqlQuery.focus();\n        return false;\n    }\n\n    return true;\n} // end of the 'checkSqlQuery()' function\n\n/**\n * Check if a form's element is empty.\n * An element containing only spaces is also considered empty\n *\n * @param   object   the form\n * @param   string   the name of the form field to put the focus on\n *\n * @return  boolean  whether the form field is empty or not\n */\nfunction emptyCheckTheField(theForm, theFieldName)\n{\n    var theField = theForm.elements[theFieldName];\n    var space_re = new RegExp('\\\\s+');\n    return (theField.value.replace(space_re, '') == '') ? 1 : 0;\n} // end of the 'emptyCheckTheField()' function\n\n\n/**\n * Check whether a form field is empty or not\n *\n * @param   object   the form\n * @param   string   the name of the form field to put the focus on\n *\n * @return  boolean  whether the form field is empty or not\n */\nfunction emptyFormElements(theForm, theFieldName)\n{\n    var theField = theForm.elements[theFieldName];\n    var isEmpty = emptyCheckTheField(theForm, theFieldName);\n\n\n    return isEmpty;\n} // end of the 'emptyFormElements()' function\n\n\n/**\n * Ensures a value submitted in a form is numeric and is in a range\n *\n * @param   object   the form\n * @param   string   the name of the form field to check\n * @param   integer  the minimum authorized value\n * @param   integer  the maximum authorized value\n *\n * @return  boolean  whether a valid number has been submitted or not\n */\nfunction checkFormElementInRange(theForm, theFieldName, message, min, max)\n{\n    var theField         = theForm.elements[theFieldName];\n    var val              = parseInt(theField.value);\n\n    if (typeof(min) == 'undefined') {\n        min = 0;\n    }\n    if (typeof(max) == 'undefined') {\n        max = Number.MAX_VALUE;\n    }\n\n    // It's not a number\n    if (isNaN(val)) {\n        theField.select();\n        alert(PMA_messages['strNotNumber']);\n        theField.focus();\n        return false;\n    }\n    // It's a number but it is not between min and max\n    else if (val < min || val > max) {\n        theField.select();\n        alert(message.replace('%d', val));\n        theField.focus();\n        return false;\n    }\n    // It's a valid number\n    else {\n        theField.value = val;\n    }\n    return true;\n\n} // end of the 'checkFormElementInRange()' function\n\n\nfunction checkTableEditForm(theForm, fieldsCnt)\n{\n    // TODO: avoid sending a message if user just wants to add a line\n    // on the form but has not completed at least one field name\n\n    var atLeastOneField = 0;\n    var i, elm, elm2, elm3, val, id;\n\n    for (i=0; i<fieldsCnt; i++)\n    {\n        id = \"#field_\" + i + \"_2\";\n        elm = $(id);\n        val = elm.val()\n        if (val == 'VARCHAR' || val == 'CHAR' || val == 'BIT' || val == 'VARBINARY' || val == 'BINARY') {\n            elm2 = $(\"#field_\" + i + \"_3\");\n            val = parseInt(elm2.val());\n            elm3 = $(\"#field_\" + i + \"_1\");\n            if (isNaN(val) && elm3.val() != \"\") {\n                elm2.select();\n                alert(PMA_messages['strNotNumber']);\n                elm2.focus();\n                return false;\n            }\n        }\n\n        if (atLeastOneField == 0) {\n            id = \"field_\" + i + \"_1\";\n            if (!emptyCheckTheField(theForm, id)) {\n                atLeastOneField = 1;\n            }\n        }\n    }\n    if (atLeastOneField == 0) {\n        var theField = theForm.elements[\"field_0_1\"];\n        alert(PMA_messages['strFormEmpty']);\n        theField.focus();\n        return false;\n    }\n\n    // at least this section is under jQuery\n    if ($(\"input.textfield[name='table']\").val() == \"\") {\n        alert(PMA_messages['strFormEmpty']);\n        $(\"input.textfield[name='table']\").focus();\n        return false;\n    }\n\n\n    return true;\n} // enf of the 'checkTableEditForm()' function\n\n$(document).ready(function() {\n    /**\n     * Row marking in horizontal mode (use \"live\" so that it works also for\n     * next pages reached via AJAX); a tr may have the class noclick to remove\n     * this behavior.\n     */\n    $('table:not(.noclick) tr.odd:not(.noclick), table:not(.noclick) tr.even:not(.noclick)').live('click',function(e) {\n        // do not trigger when clicked on anchor\n        if ($(e.target).is('a, img, a *')) {\n            return;\n        }\n        var $tr = $(this);\n\n        // make the table unselectable (to prevent default highlighting when shift+click)\n        //$tr.parents('table').noSelect();\n\n        if (!e.shiftKey || last_clicked_row == -1) {\n            // usual click\n\n            // XXX: FF fires two click events for <label> (label and checkbox), so we need to handle this differently\n            var $checkbox = $tr.find(':checkbox');\n            if ($checkbox.length) {\n                // checkbox in a row, add or remove class depending on checkbox state\n                var checked = $checkbox.attr('checked');\n                if (!$(e.target).is(':checkbox, label')) {\n                    checked = !checked;\n                    $checkbox.attr('checked', checked);\n                }\n                if (checked) {\n                    $tr.addClass('marked');\n                } else {\n                    $tr.removeClass('marked');\n                }\n                last_click_checked = checked;\n            } else {\n                // normaln data table, just toggle class\n                $tr.toggleClass('marked');\n                last_click_checked = false;\n            }\n\n            // remember the last clicked row\n            last_clicked_row = last_click_checked ? $('tr.odd:not(.noclick), tr.even:not(.noclick)').index(this) : -1;\n            last_shift_clicked_row = -1;\n        } else {\n            // handle the shift click\n            PMA_clearSelection();\n            var start, end;\n\n            // clear last shift click result\n            if (last_shift_clicked_row >= 0) {\n                if (last_shift_clicked_row >= last_clicked_row) {\n                    start = last_clicked_row;\n                    end = last_shift_clicked_row;\n                } else {\n                    start = last_shift_clicked_row;\n                    end = last_clicked_row;\n                }\n                $tr.parent().find('tr.odd:not(.noclick), tr.even:not(.noclick)')\n                    .slice(start, end + 1)\n                    .removeClass('marked')\n                    .find(':checkbox')\n                    .attr('checked', false);\n            }\n\n            // handle new shift click\n            var curr_row = $('tr.odd:not(.noclick), tr.even:not(.noclick)').index(this);\n            if (curr_row >= last_clicked_row) {\n                start = last_clicked_row;\n                end = curr_row;\n            } else {\n                start = curr_row;\n                end = last_clicked_row;\n            }\n            $tr.parent().find('tr.odd:not(.noclick), tr.even:not(.noclick)')\n                .slice(start, end + 1)\n                .addClass('marked')\n                .find(':checkbox')\n                .attr('checked', true);\n\n            // remember the last shift clicked row\n            last_shift_clicked_row = curr_row;\n        }\n    });\n\n    /**\n     * Add a date/time picker to each element that needs it\n     * (only when timepicker.js is loaded)\n     */\n    if ($.timepicker != undefined) {\n        $('.datefield, .datetimefield').each(function() {\n            PMA_addDatepicker($(this));\n            });\n    }\n});\n\n/**\n * True if last click is to check a row.\n */\nvar last_click_checked = false;\n\n/**\n * Zero-based index of last clicked row.\n * Used to handle the shift + click event in the code above.\n */\nvar last_clicked_row = -1;\n\n/**\n * Zero-based index of last shift clicked row.\n */\nvar last_shift_clicked_row = -1;\n\n/**\n * Row highlighting in horizontal mode (use \"live\"\n * so that it works also for pages reached via AJAX)\n */\n/*$(document).ready(function() {\n    $('tr.odd, tr.even').live('hover',function(event) {\n        var $tr = $(this);\n        $tr.toggleClass('hover',event.type=='mouseover');\n        $tr.children().toggleClass('hover',event.type=='mouseover');\n    });\n})*/\n\n/**\n * This array is used to remember mark status of rows in browse mode\n */\nvar marked_row = new Array;\n\n/**\n * marks all rows and selects its first checkbox inside the given element\n * the given element is usaly a table or a div containing the table or tables\n *\n * @param    container    DOM element\n */\nfunction markAllRows( container_id )\n{\n\n    $(\"#\"+container_id).find(\"input:checkbox:enabled\").attr('checked', 'checked')\n    .parents(\"tr\").addClass(\"marked\");\n    return true;\n}\n\n/**\n * marks all rows and selects its first checkbox inside the given element\n * the given element is usaly a table or a div containing the table or tables\n *\n * @param    container    DOM element\n */\nfunction unMarkAllRows( container_id )\n{\n\n    $(\"#\"+container_id).find(\"input:checkbox:enabled\").removeAttr('checked')\n    .parents(\"tr\").removeClass(\"marked\");\n    return true;\n}\n\n/**\n * Checks/unchecks all checkbox in given conainer (f.e. a form, fieldset or div)\n *\n * @param   string   container_id  the container id\n * @param   boolean  state         new value for checkbox (true or false)\n * @return  boolean  always true\n */\nfunction setCheckboxes( container_id, state )\n{\n\n    if(state) {\n        $(\"#\"+container_id).find(\"input:checkbox\").attr('checked', 'checked');\n    }\n    else {\n        $(\"#\"+container_id).find(\"input:checkbox\").removeAttr('checked');\n    }\n\n    return true;\n} // end of the 'setCheckboxes()' function\n\n/**\n  * Checks/unchecks all options of a <select> element\n  *\n  * @param   string   the form name\n  * @param   string   the element name\n  * @param   boolean  whether to check or to uncheck options\n  *\n  * @return  boolean  always true\n  */\nfunction setSelectOptions(the_form, the_select, do_check)\n{\n    $(\"form[name='\"+ the_form +\"'] select[name='\"+the_select+\"']\").find(\"option\").attr('selected', do_check);\n    return true;\n} // end of the 'setSelectOptions()' function\n\n/**\n * Sets current value for query box.\n */\nfunction setQuery(query)\n{\n    if (codemirror_editor) {\n        codemirror_editor.setValue(query);\n    } else {\n        document.sqlform.sql_query.value = query;\n    }\n}\n\n\n/**\n  * Create quick sql statements.\n  *\n  */\nfunction insertQuery(queryType)\n{\n    if (queryType == \"clear\") {\n        setQuery('');\n        return;\n    }\n\n    var myQuery = document.sqlform.sql_query;\n    var query = \"\";\n    var myListBox = document.sqlform.dummy;\n    var table = document.sqlform.table.value;\n\n    if (myListBox.options.length > 0) {\n        sql_box_locked = true;\n        var chaineAj = \"\";\n        var valDis = \"\";\n        var editDis = \"\";\n        var NbSelect = 0;\n        for (var i=0; i < myListBox.options.length; i++) {\n            NbSelect++;\n            if (NbSelect > 1) {\n                chaineAj += \", \";\n                valDis += \",\";\n                editDis += \",\";\n            }\n            chaineAj += myListBox.options[i].value;\n            valDis += \"[value-\" + NbSelect + \"]\";\n            editDis += myListBox.options[i].value + \"=[value-\" + NbSelect + \"]\";\n        }\n        if (queryType == \"selectall\") {\n            query = \"SELECT * FROM `\" + table + \"` WHERE 1\";\n        } else if (queryType == \"select\") {\n            query = \"SELECT \" + chaineAj + \" FROM `\" + table + \"` WHERE 1\";\n        } else if (queryType == \"insert\") {\n               query = \"INSERT INTO `\" + table + \"`(\" + chaineAj + \") VALUES (\" + valDis + \")\";\n        } else if (queryType == \"update\") {\n            query = \"UPDATE `\" + table + \"` SET \" + editDis + \" WHERE 1\";\n        } else if(queryType == \"delete\") {\n            query = \"DELETE FROM `\" + table + \"` WHERE 1\";\n        }\n        setQuery(query);\n        sql_box_locked = false;\n    }\n}\n\n\n/**\n  * Inserts multiple fields.\n  *\n  */\nfunction insertValueQuery()\n{\n    var myQuery = document.sqlform.sql_query;\n    var myListBox = document.sqlform.dummy;\n\n    if(myListBox.options.length > 0) {\n        sql_box_locked = true;\n        var chaineAj = \"\";\n        var NbSelect = 0;\n        for(var i=0; i<myListBox.options.length; i++) {\n            if (myListBox.options[i].selected) {\n                NbSelect++;\n                if (NbSelect > 1) {\n                    chaineAj += \", \";\n                }\n                chaineAj += myListBox.options[i].value;\n            }\n        }\n\n        /* CodeMirror support */\n        if (codemirror_editor) {\n            codemirror_editor.replaceSelection(chaineAj);\n        //IE support\n        } else if (document.selection) {\n            myQuery.focus();\n            sel = document.selection.createRange();\n            sel.text = chaineAj;\n            document.sqlform.insert.focus();\n        }\n        //MOZILLA/NETSCAPE support\n        else if (document.sqlform.sql_query.selectionStart || document.sqlform.sql_query.selectionStart == \"0\") {\n            var startPos = document.sqlform.sql_query.selectionStart;\n            var endPos = document.sqlform.sql_query.selectionEnd;\n            var chaineSql = document.sqlform.sql_query.value;\n\n            myQuery.value = chaineSql.substring(0, startPos) + chaineAj + chaineSql.substring(endPos, chaineSql.length);\n        } else {\n            myQuery.value += chaineAj;\n        }\n        sql_box_locked = false;\n    }\n}\n\n/**\n  * listbox redirection\n  */\nfunction goToUrl(selObj, goToLocation)\n{\n    eval(\"document.location.href = '\" + goToLocation + \"pos=\" + selObj.options[selObj.selectedIndex].value + \"'\");\n}\n\n/**\n  * Refresh the WYSIWYG scratchboard after changes have been made\n  */\nfunction refreshDragOption(e)\n{\n    var elm = $('#' + e);\n    if (elm.css('visibility') == 'visible') {\n        refreshLayout();\n        TableDragInit();\n    }\n}\n\n/**\n  * Refresh/resize the WYSIWYG scratchboard\n  */\nfunction refreshLayout()\n{\n    var elm = $('#pdflayout')\n    var orientation = $('#orientation_opt').val();\n    if($('#paper_opt').length==1){\n        var paper = $('#paper_opt').val();\n    }else{\n        var paper = 'A4';\n    }\n    if (orientation == 'P') {\n        posa = 'x';\n        posb = 'y';\n    } else {\n        posa = 'y';\n        posb = 'x';\n    }\n    elm.css('width', pdfPaperSize(paper, posa) + 'px');\n    elm.css('height', pdfPaperSize(paper, posb) + 'px');\n}\n\n/**\n  * Show/hide the WYSIWYG scratchboard\n  */\nfunction ToggleDragDrop(e)\n{\n    var elm = $('#' + e);\n    if (elm.css('visibility') == 'hidden') {\n        PDFinit(); /* Defined in pdf_pages.php */\n        elm.css('visibility', 'visible');\n        elm.css('display', 'block');\n        $('#showwysiwyg').val('1')\n    } else {\n        elm.css('visibility', 'hidden');\n        elm.css('display', 'none');\n        $('#showwysiwyg').val('0')\n    }\n}\n\n/**\n  * PDF scratchboard: When a position is entered manually, update\n  * the fields inside the scratchboard.\n  */\nfunction dragPlace(no, axis, value)\n{\n    var elm = $('#table_' + no);\n    if (axis == 'x') {\n        elm.css('left', value + 'px');\n    } else {\n        elm.css('top', value + 'px');\n    }\n}\n\n/**\n * Returns paper sizes for a given format\n */\nfunction pdfPaperSize(format, axis)\n{\n    switch (format.toUpperCase()) {\n        case '4A0':\n            if (axis == 'x') return 4767.87; else return 6740.79;\n            break;\n        case '2A0':\n            if (axis == 'x') return 3370.39; else return 4767.87;\n            break;\n        case 'A0':\n            if (axis == 'x') return 2383.94; else return 3370.39;\n            break;\n        case 'A1':\n            if (axis == 'x') return 1683.78; else return 2383.94;\n            break;\n        case 'A2':\n            if (axis == 'x') return 1190.55; else return 1683.78;\n            break;\n        case 'A3':\n            if (axis == 'x') return 841.89; else return 1190.55;\n            break;\n        case 'A4':\n            if (axis == 'x') return 595.28; else return 841.89;\n            break;\n        case 'A5':\n            if (axis == 'x') return 419.53; else return 595.28;\n            break;\n        case 'A6':\n            if (axis == 'x') return 297.64; else return 419.53;\n            break;\n        case 'A7':\n            if (axis == 'x') return 209.76; else return 297.64;\n            break;\n        case 'A8':\n            if (axis == 'x') return 147.40; else return 209.76;\n            break;\n        case 'A9':\n            if (axis == 'x') return 104.88; else return 147.40;\n            break;\n        case 'A10':\n            if (axis == 'x') return 73.70; else return 104.88;\n            break;\n        case 'B0':\n            if (axis == 'x') return 2834.65; else return 4008.19;\n            break;\n        case 'B1':\n            if (axis == 'x') return 2004.09; else return 2834.65;\n            break;\n        case 'B2':\n            if (axis == 'x') return 1417.32; else return 2004.09;\n            break;\n        case 'B3':\n            if (axis == 'x') return 1000.63; else return 1417.32;\n            break;\n        case 'B4':\n            if (axis == 'x') return 708.66; else return 1000.63;\n            break;\n        case 'B5':\n            if (axis == 'x') return 498.90; else return 708.66;\n            break;\n        case 'B6':\n            if (axis == 'x') return 354.33; else return 498.90;\n            break;\n        case 'B7':\n            if (axis == 'x') return 249.45; else return 354.33;\n            break;\n        case 'B8':\n            if (axis == 'x') return 175.75; else return 249.45;\n            break;\n        case 'B9':\n            if (axis == 'x') return 124.72; else return 175.75;\n            break;\n        case 'B10':\n            if (axis == 'x') return 87.87; else return 124.72;\n            break;\n        case 'C0':\n            if (axis == 'x') return 2599.37; else return 3676.54;\n            break;\n        case 'C1':\n            if (axis == 'x') return 1836.85; else return 2599.37;\n            break;\n        case 'C2':\n            if (axis == 'x') return 1298.27; else return 1836.85;\n            break;\n        case 'C3':\n            if (axis == 'x') return 918.43; else return 1298.27;\n            break;\n        case 'C4':\n            if (axis == 'x') return 649.13; else return 918.43;\n            break;\n        case 'C5':\n            if (axis == 'x') return 459.21; else return 649.13;\n            break;\n        case 'C6':\n            if (axis == 'x') return 323.15; else return 459.21;\n            break;\n        case 'C7':\n            if (axis == 'x') return 229.61; else return 323.15;\n            break;\n        case 'C8':\n            if (axis == 'x') return 161.57; else return 229.61;\n            break;\n        case 'C9':\n            if (axis == 'x') return 113.39; else return 161.57;\n            break;\n        case 'C10':\n            if (axis == 'x') return 79.37; else return 113.39;\n            break;\n        case 'RA0':\n            if (axis == 'x') return 2437.80; else return 3458.27;\n            break;\n        case 'RA1':\n            if (axis == 'x') return 1729.13; else return 2437.80;\n            break;\n        case 'RA2':\n            if (axis == 'x') return 1218.90; else return 1729.13;\n            break;\n        case 'RA3':\n            if (axis == 'x') return 864.57; else return 1218.90;\n            break;\n        case 'RA4':\n            if (axis == 'x') return 609.45; else return 864.57;\n            break;\n        case 'SRA0':\n            if (axis == 'x') return 2551.18; else return 3628.35;\n            break;\n        case 'SRA1':\n            if (axis == 'x') return 1814.17; else return 2551.18;\n            break;\n        case 'SRA2':\n            if (axis == 'x') return 1275.59; else return 1814.17;\n            break;\n        case 'SRA3':\n            if (axis == 'x') return 907.09; else return 1275.59;\n            break;\n        case 'SRA4':\n            if (axis == 'x') return 637.80; else return 907.09;\n            break;\n        case 'LETTER':\n            if (axis == 'x') return 612.00; else return 792.00;\n            break;\n        case 'LEGAL':\n            if (axis == 'x') return 612.00; else return 1008.00;\n            break;\n        case 'EXECUTIVE':\n            if (axis == 'x') return 521.86; else return 756.00;\n            break;\n        case 'FOLIO':\n            if (axis == 'x') return 612.00; else return 936.00;\n            break;\n    } // end switch\n\n    return 0;\n}\n\n/**\n * for playing media from the BLOB repository\n *\n * @param   var\n * @param   var     url_params  main purpose is to pass the token\n * @param   var     bs_ref      BLOB repository reference\n * @param   var     m_type      type of BLOB repository media\n * @param   var     w_width     width of popup window\n * @param   var     w_height    height of popup window\n */\nfunction popupBSMedia(url_params, bs_ref, m_type, is_cust_type, w_width, w_height)\n{\n    // if width not specified, use default\n    if (w_width == undefined) {\n        w_width = 640;\n    }\n\n    // if height not specified, use default\n    if (w_height == undefined) {\n        w_height = 480;\n    }\n\n    // open popup window (for displaying video/playing audio)\n    var mediaWin = window.open('bs_play_media.php?' + url_params + '&bs_reference=' + bs_ref + '&media_type=' + m_type + '&custom_type=' + is_cust_type, 'viewBSMedia', 'width=' + w_width + ', height=' + w_height + ', resizable=1, scrollbars=1, status=0');\n}\n\n/**\n * popups a request for changing MIME types for files in the BLOB repository\n *\n * @param   var     db                      database name\n * @param   var     table                   table name\n * @param   var     reference               BLOB repository reference\n * @param   var     current_mime_type       current MIME type associated with BLOB repository reference\n */\nfunction requestMIMETypeChange(db, table, reference, current_mime_type)\n{\n    // no mime type specified, set to default (nothing)\n    if (undefined == current_mime_type) {\n        current_mime_type = \"\";\n    }\n\n    // prompt user for new mime type\n    var new_mime_type = prompt(\"Enter custom MIME type\", current_mime_type);\n\n    // if new mime_type is specified and is not the same as the previous type, request for mime type change\n    if (new_mime_type && new_mime_type != current_mime_type) {\n        changeMIMEType(db, table, reference, new_mime_type);\n    }\n}\n\n/**\n * changes MIME types for files in the BLOB repository\n *\n * @param   var     db              database name\n * @param   var     table           table name\n * @param   var     reference       BLOB repository reference\n * @param   var     mime_type       new MIME type to be associated with BLOB repository reference\n */\nfunction changeMIMEType(db, table, reference, mime_type)\n{\n    // specify url and parameters for jQuery POST\n    var mime_chg_url = 'bs_change_mime_type.php';\n    var params = {bs_db: db, bs_table: table, bs_reference: reference, bs_new_mime_type: mime_type};\n\n    // jQuery POST\n    jQuery.post(mime_chg_url, params);\n}\n\n/**\n * Jquery Coding for inline editing SQL_QUERY\n */\n$(document).ready(function(){\n    $(\".inline_edit_sql\").live('click', function(){\n        if ($('#sql_query_edit').length) {\n            // An inline query editor is already open,\n            // we don't want another copy of it\n            return false;\n        }\n\n        var $form = $(this).prev();\n        var sql_query  = $form.find(\"input[name='sql_query']\").val();\n        var $inner_sql = $(this).parent().prev().find('.inner_sql');\n        var old_text   = $inner_sql.html();\n\n        var new_content = \"<textarea name=\\\"sql_query_edit\\\" id=\\\"sql_query_edit\\\">\" + sql_query + \"</textarea>\\n\";\n        new_content    += \"<input type=\\\"button\\\" class=\\\"btnSave\\\" value=\\\"\" + PMA_messages['strGo'] + \"\\\">\\n\";\n        new_content    += \"<input type=\\\"button\\\" class=\\\"btnDiscard\\\" value=\\\"\" + PMA_messages['strCancel'] + \"\\\">\\n\";\n        $inner_sql.replaceWith(new_content);\n\n        // These settings are duplicated from the .ready()function in functions.js\n        var height = $('#sql_query_edit').css('height');\n        codemirror_editor = CodeMirror.fromTextArea($('textarea[name=\"sql_query_edit\"]')[0], {\n            lineNumbers: true,\n            matchBrackets: true,\n            indentUnit: 4,\n            mode: \"text/x-mysql\",\n            lineWrapping: true\n        });\n        codemirror_editor.getScrollerElement().style.height = height;\n        codemirror_editor.refresh();\n\n        $(\".btnSave\").click(function(){\n            if (codemirror_editor !== undefined) {\n                var sql_query = codemirror_editor.getValue();\n            } else {\n                var sql_query = $(this).prev().val();\n            }\n            var $fake_form = $('<form>', {action: 'import.php', method: 'post'})\n                    .append($form.find(\"input[name=server], input[name=db], input[name=table], input[name=token]\").clone())\n                    .append($('<input>', {type: 'hidden', name: 'show_query', value: 1}))\n                    .append($('<input>', {type: 'hidden', name: 'sql_query', value: sql_query}));\n            $fake_form.appendTo($('body')).submit();\n        });\n        $(\".btnDiscard\").click(function(){\n            $(this).closest(\".sql\").html(\"<span class=\\\"syntax\\\"><span class=\\\"inner_sql\\\">\" + old_text + \"</span></span>\");\n        });\n        return false;\n    });\n\n    $('.sqlbutton').click(function(evt){\n        insertQuery(evt.target.id);\n        return false;\n    });\n\n    $(\"#export_type\").change(function(){\n        if($(\"#export_type\").val()=='svg'){\n            $(\"#show_grid_opt\").attr(\"disabled\",\"disabled\");\n            $(\"#orientation_opt\").attr(\"disabled\",\"disabled\");\n            $(\"#with_doc\").attr(\"disabled\",\"disabled\");\n            $(\"#show_table_dim_opt\").removeAttr(\"disabled\");\n            $(\"#all_table_same_wide\").removeAttr(\"disabled\");\n            $(\"#paper_opt\").removeAttr(\"disabled\",\"disabled\");\n            $(\"#show_color_opt\").removeAttr(\"disabled\",\"disabled\");\n            //$(this).css(\"background-color\",\"yellow\");\n        }else if($(\"#export_type\").val()=='dia'){\n            $(\"#show_grid_opt\").attr(\"disabled\",\"disabled\");\n            $(\"#with_doc\").attr(\"disabled\",\"disabled\");\n            $(\"#show_table_dim_opt\").attr(\"disabled\",\"disabled\");\n            $(\"#all_table_same_wide\").attr(\"disabled\",\"disabled\");\n            $(\"#paper_opt\").removeAttr(\"disabled\",\"disabled\");\n            $(\"#show_color_opt\").removeAttr(\"disabled\",\"disabled\");\n            $(\"#orientation_opt\").removeAttr(\"disabled\",\"disabled\");\n        }else if($(\"#export_type\").val()=='eps'){\n            $(\"#show_grid_opt\").attr(\"disabled\",\"disabled\");\n            $(\"#orientation_opt\").removeAttr(\"disabled\");\n            $(\"#with_doc\").attr(\"disabled\",\"disabled\");\n            $(\"#show_table_dim_opt\").attr(\"disabled\",\"disabled\");\n            $(\"#all_table_same_wide\").attr(\"disabled\",\"disabled\");\n            $(\"#paper_opt\").attr(\"disabled\",\"disabled\");\n            $(\"#show_color_opt\").attr(\"disabled\",\"disabled\");\n\n        }else if($(\"#export_type\").val()=='pdf'){\n            $(\"#show_grid_opt\").removeAttr(\"disabled\");\n            $(\"#orientation_opt\").removeAttr(\"disabled\");\n            $(\"#with_doc\").removeAttr(\"disabled\",\"disabled\");\n            $(\"#show_table_dim_opt\").removeAttr(\"disabled\",\"disabled\");\n            $(\"#all_table_same_wide\").removeAttr(\"disabled\",\"disabled\");\n            $(\"#paper_opt\").removeAttr(\"disabled\",\"disabled\");\n            $(\"#show_color_opt\").removeAttr(\"disabled\",\"disabled\");\n        }else{\n            // nothing\n        }\n    });\n\n    $('#sqlquery').focus().keydown(function (e) {\n        if (e.ctrlKey && e.keyCode == 13) {\n            $(\"#sqlqueryform\").submit();\n        }\n    });\n\n    if ($('#input_username')) {\n        if ($('#input_username').val() == '') {\n            $('#input_username').focus();\n        } else {\n            $('#input_password').focus();\n        }\n    }\n});\n\n/**\n * Show a message on the top of the page for an Ajax request\n *\n * Sample usage:\n *\n * 1) var $msg = PMA_ajaxShowMessage();\n * This will show a message that reads \"Loading...\". Such a message will not\n * disappear automatically and cannot be dismissed by the user. To remove this\n * message either the PMA_ajaxRemoveMessage($msg) function must be called or\n * another message must be show with PMA_ajaxShowMessage() function.\n *\n * 2) var $msg = PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n * This is a special case. The behaviour is same as above,\n * just with a different message\n *\n * 3) var $msg = PMA_ajaxShowMessage('The operation was successful');\n * This will show a message that will disappear automatically and it can also\n * be dismissed by the user.\n *\n * 4) var $msg = PMA_ajaxShowMessage('Some error', false);\n * This will show a message that will not disappear automatically, but it\n * can be dismissed by the user after he has finished reading it.\n *\n * @param   string  message     string containing the message to be shown.\n *                              optional, defaults to 'Loading...'\n * @param   mixed   timeout     number of milliseconds for the message to be visible\n *                              optional, defaults to 5000. If set to 'false', the\n *                              notification will never disappear\n * @return  jQuery object       jQuery Element that holds the message div\n *                              this object can be passed to PMA_ajaxRemoveMessage()\n *                              to remove the notification\n */\nfunction PMA_ajaxShowMessage(message, timeout)\n{\n    /**\n     * @var self_closing Whether the notification will automatically disappear\n     */\n    var self_closing = true;\n    /**\n     * @var dismissable Whether the user will be able to remove\n     *                  the notification by clicking on it\n     */\n    var dismissable = true;\n    // Handle the case when a empty data.message is passed.\n    // We don't want the empty message\n    if (message == '') {\n        return true;\n    } else if (! message) {\n        // If the message is undefined, show the default\n        message = PMA_messages['strLoading'];\n        dismissable = false;\n        self_closing = false;\n    } else if (message == PMA_messages['strProcessingRequest']) {\n        // This is another case where the message should not disappear\n        dismissable = false;\n        self_closing = false;\n    }\n    // Figure out whether (or after how long) to remove the notification\n    if (timeout == undefined) {\n        timeout = 5000;\n    } else if (timeout === false) {\n        self_closing = false;\n    }\n    // Create a parent element for the AJAX messages, if necessary\n    if ($('#loading_parent').length == 0) {\n        $('<div id=\"loading_parent\"></div>')\n        .prependTo(\"body\");\n    }\n    // Update message count to create distinct message elements every time\n    ajax_message_count++;\n    // Remove all old messages, if any\n    $(\".ajax_notification[id^=ajax_message_num]\").remove();\n    /**\n     * @var    $retval    a jQuery object containing the reference\n     *                    to the created AJAX message\n     */\n    var $retval = $(\n            '<span class=\"ajax_notification\" id=\"ajax_message_num_'\n            + ajax_message_count +\n            '\"></span>'\n    )\n    .hide()\n    .appendTo(\"#loading_parent\")\n    .html(message)\n    .fadeIn('medium');\n    // If the notification is self-closing we should create a callback to remove it\n    if (self_closing) {\n        $retval\n        .delay(timeout)\n        .fadeOut('medium', function() {\n            if ($(this).is('.dismissable')) {\n                // Here we should destroy the qtip instance, but\n                // due to a bug in qtip's implementation we can\n                // only hide it without throwing JS errors.\n                $(this).qtip('hide');\n            }\n            // Remove the notification\n            $(this).remove();\n        });\n    }\n    // If the notification is dismissable we need to add the relevant class to it\n    // and add a tooltip so that the users know that it can be removed\n    if (dismissable) {\n        $retval.addClass('dismissable').css('cursor', 'pointer');\n        /**\n         * @var qOpts Options for \"Dismiss notification\" tooltip\n         */\n        var qOpts = {\n            show: {\n                effect: { length: 0 },\n                delay: 0\n            },\n            hide: {\n                effect: { length: 0 },\n                delay: 0\n            }\n        };\n        /**\n         * Add a tooltip to the notification to let the user know that (s)he\n         * can dismiss the ajax notification by clicking on it.\n         */\n        PMA_createqTip($retval, PMA_messages['strDismiss'], qOpts);\n    }\n\n    return $retval;\n}\n\n/**\n * Removes the message shown for an Ajax operation when it's completed\n *\n * @param  jQuery object   jQuery Element that holds the notification\n *\n * @return nothing\n */\nfunction PMA_ajaxRemoveMessage($this_msgbox)\n{\n    if ($this_msgbox != undefined && $this_msgbox instanceof jQuery) {\n        $this_msgbox\n        .stop(true, true)\n        .fadeOut('medium');\n        if ($this_msgbox.is('.dismissable')) {\n            if ($('#no_hint').length < 0) {\n                // Here we should destroy the qtip instance, but\n                // due to a bug in qtip's implementation we can\n                // only hide it without throwing JS errors.\n                $this_msgbox.qtip('hide');\n            }\n        } else {\n            $this_msgbox.remove();\n        }\n    }\n}\n\n$(document).ready(function() {\n    /**\n     * Allows the user to dismiss a notification\n     * created with PMA_ajaxShowMessage()\n     */\n    $('.ajax_notification.dismissable').live('click', function () {\n        PMA_ajaxRemoveMessage($(this));\n    });\n    /**\n     * The below two functions hide the \"Dismiss notification\" tooltip when a user\n     * is hovering a link or button that is inside an ajax message\n     */\n    $('.ajax_notification a, .ajax_notification button, .ajax_notification input')\n    .live('mouseover', function () {\n        $(this).parents('.ajax_notification').qtip('hide');\n    });\n    $('.ajax_notification a, .ajax_notification button, .ajax_notification input')\n    .live('mouseout', function () {\n        $(this).parents('.ajax_notification').qtip('show');\n    });\n});\n\n/**\n * Hides/shows the \"Open in ENUM/SET editor\" message, depending on the data type of the column currently selected\n */\nfunction PMA_showNoticeForEnum(selectElement)\n{\n    var enum_notice_id = selectElement.attr(\"id\").split(\"_\")[1];\n    enum_notice_id += \"_\" + (parseInt(selectElement.attr(\"id\").split(\"_\")[2]) + 1);\n    var selectedType = selectElement.val();\n    if (selectedType == \"ENUM\" || selectedType == \"SET\") {\n        $(\"p[id='enum_notice_\" + enum_notice_id + \"']\").show();\n    } else {\n        $(\"p[id='enum_notice_\" + enum_notice_id + \"']\").hide();\n    }\n}\n\n/**\n * Generates a dialog box to pop up the create_table form\n */\nfunction PMA_createTableDialog( $div, url , target)\n{\n     /**\n      *  @var    button_options  Object that stores the options passed to jQueryUI\n      *                          dialog\n      */\n     var button_options = {};\n     // in the following function we need to use $(this)\n     button_options[PMA_messages['strCancel']] = function() {\n         $(this).closest('.ui-dialog-content').dialog('close').remove();\n     };\n\n     var button_options_error = {};\n     button_options_error[PMA_messages['strOK']] = function() {\n         $(this).closest('.ui-dialog-content').dialog('close').remove();\n     };\n\n     var $msgbox = PMA_ajaxShowMessage();\n\n     $.get(target, url, function(data) {\n      //in the case of an error, show the error message returned.\n         if (data.success != undefined && data.success == false) {\n             $div\n             .append(data.error)\n             .dialog({\n                 height: 230,\n                 width: 900,\n                 open: PMA_verifyColumnsProperties,\n                 buttons : button_options_error\n             })// end dialog options\n             //remove the redundant [Back] link in the error message.\n             .find('fieldset').remove();\n         }\n         else {\n             var size = getWindowSize();\n             var timeout;\n             $div\n             .append(data)\n             .dialog({\n                 dialogClass: 'create-table',\n                 resizable: false,\n                 draggable: false,\n                 modal: true,\n                 stack: false,\n                 position: ['left','top'],\n                 width: size.width-10,\n                 height: size.height-10,\n                 open: function() {\n                     var dialog_id = $(this).attr('id');\n                     $(window).bind('resize.dialog-resizer', function() {\n                         clearTimeout(timeout);\n                         timeout = setTimeout(function() {\n                             var size = getWindowSize();\n                             $('#'+dialog_id).dialog('option', {\n                                 width: size.width-10,\n                                 height: size.height-10\n                             });\n                         }, 50);\n                     });\n\n                     var $wrapper = $('<div>', {'id': 'content-hide'}).hide();\n                     $('body > *:not(.ui-dialog)').wrapAll($wrapper);\n\n                     $(this)\n                         .scrollTop(0) // for Chrome\n                         .closest('.ui-dialog').css({\n                             left: 0,\n                             top: 0\n                         });\n\n                     PMA_verifyColumnsProperties();\n\n                     // move the Cancel button next to the Save button\n                     var $button_pane = $('.ui-dialog-buttonpane');\n                     var $cancel_button = $button_pane.find('.ui-button');\n                     var $save_button  = $('#create_table_form').find(\"input[name='do_save_data']\");\n                     $cancel_button.insertAfter($save_button);\n                     $button_pane.hide();\n                 },\n                 close: function() {\n                     $(window).unbind('resize.dialog-resizer');\n                     $('#content-hide > *').unwrap();\n                     // resize topmenu\n                     menuResize();\n                     menuResize(); // somehow need to call it twice to work\n                 },\n                 buttons: button_options\n             }); // end dialog options\n         }\n        PMA_convertFootnotesToTooltips($div);\n        PMA_ajaxRemoveMessage($msgbox);\n     }); // end $.get()\n\n}\n\n/**\n * Creates a highcharts chart in the given container\n *\n * @param   var     settings    object with highcharts properties that should be applied. (See also http://www.highcharts.com/ref/)\n *                              requires at least settings.chart.renderTo and settings.series to be set.\n *                              In addition there may be an additional property object 'realtime' that allows for realtime charting:\n *                              realtime: {\n *                                  url: adress to get the data from (will always add token, ajax_request=1 and chart_data=1 to the GET request)\n *                                  type: the GET request will also add type=[value of the type property] to the request\n *                                  callback: Callback function that should draw the point, it's called with 4 parameters in this order:\n *                                      - the chart object\n *                                      - the current response value of the GET request, JSON parsed\n *                                      - the previous response value of the GET request, JSON parsed\n *                                      - the number of added points\n *                                  error: Callback function when the get request fails. TODO: Apply callback on timeouts aswell\n *                              }\n *\n * @return  object   The created highcharts instance\n */\nfunction PMA_createChart(passedSettings)\n{\n    var container = passedSettings.chart.renderTo;\n\n    var settings = {\n        chart: {\n            type: 'spline',\n            marginRight: 10,\n            backgroundColor: 'none',\n            events: {\n                /* Live charting support */\n                load: function() {\n                    var thisChart = this;\n                    var lastValue = null, curValue = null;\n                    var numLoadedPoints = 0, otherSum = 0;\n                    var diff;\n\n                    // No realtime updates for graphs that are being exported, and disabled when realtime is not set\n                    // Also don't do live charting if we don't have the server time\n                    if(thisChart.options.chart.forExport == true ||\n                        ! thisChart.options.realtime ||\n                        ! thisChart.options.realtime.callback ||\n                        ! server_time_diff) return;\n\n                    thisChart.options.realtime.timeoutCallBack = function() {\n                        thisChart.options.realtime.postRequest = $.post(\n                            thisChart.options.realtime.url,\n                            thisChart.options.realtime.postData,\n                            function(data) {\n                                try {\n                                    curValue = jQuery.parseJSON(data);\n                                } catch (err) {\n                                    if(thisChart.options.realtime.error)\n                                        thisChart.options.realtime.error(err);\n                                    return;\n                                }\n\n                                if (lastValue==null) {\n                                    diff = curValue.x - thisChart.xAxis[0].getExtremes().max;\n                                } else {\n                                    diff = parseInt(curValue.x - lastValue.x);\n                                }\n\n                                thisChart.xAxis[0].setExtremes(\n                                    thisChart.xAxis[0].getExtremes().min+diff,\n                                    thisChart.xAxis[0].getExtremes().max+diff,\n                                    false\n                                );\n\n                                thisChart.options.realtime.callback(thisChart,curValue,lastValue,numLoadedPoints);\n\n                                lastValue = curValue;\n                                numLoadedPoints++;\n\n                                // Timeout has been cleared => don't start a new timeout\n                                if (chart_activeTimeouts[container] == null) {\n                                    return;\n                                }\n\n                                chart_activeTimeouts[container] = setTimeout(\n                                    thisChart.options.realtime.timeoutCallBack,\n                                    thisChart.options.realtime.refreshRate\n                                );\n                        });\n                    }\n\n                    chart_activeTimeouts[container] = setTimeout(thisChart.options.realtime.timeoutCallBack, 5);\n                }\n            }\n        },\n        plotOptions: {\n            series: {\n                marker: {\n                    radius: 3\n                }\n            }\n        },\n        credits: {\n            enabled:false\n        },\n        xAxis: {\n            type: 'datetime'\n        },\n        yAxis: {\n            min: 0,\n            title: {\n                text: PMA_messages['strTotalCount']\n            },\n            plotLines: [{\n                value: 0,\n                width: 1,\n                color: '#808080'\n            }]\n        },\n        tooltip: {\n            formatter: function() {\n                    return '<b>' + this.series.name +'</b><br/>' +\n                    Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +\n                    Highcharts.numberFormat(this.y, 2);\n            }\n        },\n        exporting: {\n            enabled: true\n        },\n        series: []\n    }\n\n    /* Set/Get realtime chart default values */\n    if(passedSettings.realtime) {\n        if(!passedSettings.realtime.refreshRate) {\n            passedSettings.realtime.refreshRate = 5000;\n        }\n\n        if(!passedSettings.realtime.numMaxPoints) {\n            passedSettings.realtime.numMaxPoints = 30;\n        }\n\n        // Allow custom POST vars to be added\n        passedSettings.realtime.postData = $.extend(false,{ ajax_request: true, chart_data: 1, type: passedSettings.realtime.type },passedSettings.realtime.postData);\n\n        if(server_time_diff) {\n            settings.xAxis.min = new Date().getTime() - server_time_diff - passedSettings.realtime.numMaxPoints * passedSettings.realtime.refreshRate;\n            settings.xAxis.max = new Date().getTime() - server_time_diff + passedSettings.realtime.refreshRate;\n        }\n    }\n\n    // Overwrite/Merge default settings with passedsettings\n    $.extend(true,settings,passedSettings);\n\n    return new Highcharts.Chart(settings);\n}\n\n\n/*\n * Creates a Profiling Chart. Used in server_status_monitor.js\n */\nfunction PMA_createProfilingChart(data, options)\n{\n    return PMA_createChart($.extend(true, {\n        chart: {\n            renderTo: 'profilingchart',\n            type: 'pie'\n        },\n        title: { text:'', margin:0 },\n        series: [{\n            type: 'pie',\n            name: PMA_messages['strQueryExecutionTime'],\n            data: data\n        }],\n        plotOptions: {\n            pie: {\n                allowPointSelect: true,\n                cursor: 'pointer',\n                dataLabels: {\n                    enabled: true,\n                    distance: 35,\n                    formatter: function() {\n                        return '<b>'+ this.point.name +'</b><br/>'+ Highcharts.numberFormat(this.percentage, 2) +' %';\n                   }\n                }\n            }\n        },\n        tooltip: {\n            formatter: function() {\n                return '<b>'+ this.point.name +'</b><br/>'+PMA_prettyProfilingNum(this.y)+'<br/>('+Highcharts.numberFormat(this.percentage, 2) +' %)';\n            }\n        }\n    },options));\n}\n\n/*\n * Creates a Profiling Chart with jqplot. Used in sql.js\n */\nfunction PMA_createProfilingChartJqplot(target, data)\n{\n    return $.jqplot(target, [data],\n        {\n            seriesDefaults: {\n                renderer: $.jqplot.PieRenderer,\n                rendererOptions: {\n                    showDataLabels:  true\n                }\n            },\n            legend: {\n                show: true,\n                location: 'e'\n            },\n            // from http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines#Color_Palette\n            seriesColors: [\n             '#fce94f',\n             '#fcaf3e',\n             '#e9b96e',\n             '#8ae234',\n             '#729fcf',\n             '#ad7fa8',\n             '#ef2929',\n             '#eeeeec',\n             '#888a85',\n             '#c4a000',\n             '#ce5c00',\n             '#8f5902',\n             '#4e9a06',\n             '#204a87',\n             '#5c3566',\n             '#a40000',\n             '#babdb6',\n             '#2e3436'\n            ]\n        }\n    );\n}\n\n/**\n * Formats a profiling duration nicely (in us and ms time). Used in PMA_createProfilingChart() and server_status.js\n *\n * @param   integer     Number to be formatted, should be in the range of microsecond to second\n * @param   integer     Acuracy, how many numbers right to the comma should be\n * @return  string      The formatted number\n */\nfunction PMA_prettyProfilingNum(num, acc)\n{\n    if (!acc) {\n        acc = 2;\n    }\n    acc = Math.pow(10,acc);\n    if (num * 1000 < 0.1) {\n        num = Math.round(acc * (num * 1000 * 1000)) / acc + '\u00b5';\n    } else if (num < 0.1) {\n        num = Math.round(acc * (num * 1000)) / acc + 'm';\n    } else {\n        num = Math.round(acc * num) / acc;\n    }\n\n    return num + 's';\n}\n\n\n/**\n * Formats a SQL Query nicely with newlines and indentation. Depends on Codemirror and MySQL Mode!\n *\n * @param   string      Query to be formatted\n * @return  string      The formatted query\n */\nfunction PMA_SQLPrettyPrint(string)\n{\n    var mode = CodeMirror.getMode({},\"text/x-mysql\");\n    var stream = new CodeMirror.StringStream(string);\n    var state = mode.startState();\n    var token, tokens = [];\n    var output = '';\n    var tabs = function(cnt) {\n        var ret = '';\n        for (var i=0; i<4*cnt; i++)\n            ret += \" \";\n        return ret;\n    };\n\n    // \"root-level\" statements\n    var statements = {\n        'select': ['select', 'from','on','where','having','limit','order by','group by'],\n        'update': ['update', 'set','where'],\n        'insert into': ['insert into', 'values']\n    };\n    // don't put spaces before these tokens\n    var spaceExceptionsBefore = { ';':true, ',': true, '.': true, '(': true };\n    // don't put spaces after these tokens\n    var spaceExceptionsAfter = { '.': true };\n\n    // Populate tokens array\n    var str='';\n    while (! stream.eol()) {\n        stream.start = stream.pos;\n        token = mode.token(stream, state);\n        if(token != null) {\n            tokens.push([token, stream.current().toLowerCase()]);\n        }\n    }\n\n    var currentStatement = tokens[0][1];\n\n    if(! statements[currentStatement]) {\n        return string;\n    }\n    // Holds all currently opened code blocks (statement, function or generic)\n    var blockStack = [];\n    // Holds the type of block from last iteration (the current is in blockStack[0])\n    var previousBlock;\n    // If a new code block is found, newBlock contains its type for one iteration and vice versa for endBlock\n    var newBlock, endBlock;\n    // How much to indent in the current line\n    var indentLevel = 0;\n    // Holds the \"root-level\" statements\n    var statementPart, lastStatementPart = statements[currentStatement][0];\n\n    blockStack.unshift('statement');\n\n    // Iterate through every token and format accordingly\n    for (var i = 0; i < tokens.length; i++) {\n        previousBlock = blockStack[0];\n\n        // New block => push to stack\n        if (tokens[i][1] == '(') {\n            if (i < tokens.length - 1 && tokens[i+1][0] == 'statement-verb') {\n                blockStack.unshift(newBlock = 'statement');\n            } else if (i > 0 && tokens[i-1][0] == 'builtin') {\n                blockStack.unshift(newBlock = 'function');\n            } else {\n                blockStack.unshift(newBlock = 'generic');\n            }\n        } else {\n            newBlock = null;\n        }\n\n        // Block end => pop from stack\n        if (tokens[i][1] == ')') {\n            endBlock = blockStack[0];\n            blockStack.shift();\n        } else {\n            endBlock = null;\n        }\n\n        // A subquery is starting\n        if (i > 0 && newBlock == 'statement') {\n            indentLevel++;\n            output += \"\\n\" + tabs(indentLevel) + tokens[i][1] + ' ' + tokens[i+1][1].toUpperCase() + \"\\n\" + tabs(indentLevel + 1);\n            currentStatement = tokens[i+1][1];\n            i++;\n            continue;\n        }\n\n        // A subquery is ending\n        if (endBlock == 'statement' && indentLevel > 0) {\n            output += \"\\n\" + tabs(indentLevel);\n            indentLevel--;\n        }\n\n        // One less indentation for statement parts (from, where, order by, etc.) and a newline\n        statementPart = statements[currentStatement].indexOf(tokens[i][1]);\n        if (statementPart != -1) {\n            if (i > 0) output += \"\\n\";\n            output += tabs(indentLevel) + tokens[i][1].toUpperCase();\n            output += \"\\n\" + tabs(indentLevel + 1);\n            lastStatementPart = tokens[i][1];\n        }\n        // Normal indentatin and spaces for everything else\n        else {\n            if (! spaceExceptionsBefore[tokens[i][1]]\n               && ! (i > 0 && spaceExceptionsAfter[tokens[i-1][1]])\n               && output.charAt(output.length -1) != ' ' ) {\n                    output += \" \";\n            }\n            if (tokens[i][0] == 'keyword') {\n                output += tokens[i][1].toUpperCase();\n            } else {\n                output += tokens[i][1];\n            }\n        }\n\n        // split columns in select and 'update set' clauses, but only inside statements blocks\n        if (( lastStatementPart == 'select' || lastStatementPart == 'where'  || lastStatementPart == 'set')\n            && tokens[i][1]==',' && blockStack[0] == 'statement') {\n\n            output += \"\\n\" + tabs(indentLevel + 1);\n        }\n\n        // split conditions in where clauses, but only inside statements blocks\n        if (lastStatementPart == 'where'\n            && (tokens[i][1]=='and' || tokens[i][1]=='or' || tokens[i][1]=='xor')) {\n\n            if (blockStack[0] == 'statement') {\n                output += \"\\n\" + tabs(indentLevel + 1);\n            }\n            // Todo: Also split and or blocks in newlines & identation++\n            //if(blockStack[0] == 'generic')\n             //   output += ...\n        }\n    }\n    return output;\n}\n\n/**\n * jQuery function that uses jQueryUI's dialogs to confirm with user. Does not\n *  return a jQuery object yet and hence cannot be chained\n *\n * @param   string      question\n * @param   string      url         URL to be passed to the callbackFn to make\n *                                  an Ajax call to\n * @param   function    callbackFn  callback to execute after user clicks on OK\n */\n\njQuery.fn.PMA_confirm = function(question, url, callbackFn) {\n    if (PMA_messages['strDoYouReally'] == '') {\n        return true;\n    }\n\n    /**\n     *  @var    button_options  Object that stores the options passed to jQueryUI\n     *                          dialog\n     */\n    var button_options = {};\n    button_options[PMA_messages['strOK']] = function(){\n                                                $(this).dialog(\"close\").remove();\n\n                                                if($.isFunction(callbackFn)) {\n                                                    callbackFn.call(this, url);\n                                                }\n                                            };\n    button_options[PMA_messages['strCancel']] = function() {$(this).dialog(\"close\").remove();}\n\n    $('<div id=\"confirm_dialog\"></div>')\n    .prepend(question)\n    .dialog({buttons: button_options});\n};\n\n/**\n * jQuery function to sort a table's body after a new row has been appended to it.\n * Also fixes the even/odd classes of the table rows at the end.\n *\n * @param   string      text_selector   string to select the sortKey's text\n *\n * @return  jQuery Object for chaining purposes\n */\njQuery.fn.PMA_sort_table = function(text_selector) {\n    return this.each(function() {\n\n        /**\n         * @var table_body  Object referring to the table's <tbody> element\n         */\n        var table_body = $(this);\n        /**\n         * @var rows    Object referring to the collection of rows in {@link table_body}\n         */\n        var rows = $(this).find('tr').get();\n\n        //get the text of the field that we will sort by\n        $.each(rows, function(index, row) {\n            row.sortKey = $.trim($(row).find(text_selector).text().toLowerCase());\n        })\n\n        //get the sorted order\n        rows.sort(function(a,b) {\n            if(a.sortKey < b.sortKey) {\n                return -1;\n            }\n            if(a.sortKey > b.sortKey) {\n                return 1;\n            }\n            return 0;\n        })\n\n        //pull out each row from the table and then append it according to it's order\n        $.each(rows, function(index, row) {\n            $(table_body).append(row);\n            row.sortKey = null;\n        })\n\n        //Re-check the classes of each row\n        $(this).find('tr:odd')\n        .removeClass('even').addClass('odd')\n        .end()\n        .find('tr:even')\n        .removeClass('odd').addClass('even');\n    })\n}\n\n/**\n * jQuery coding for 'Create Table'.  Used on db_operations.php,\n * db_structure.php and db_tracking.php (i.e., wherever\n * libraries/display_create_table.lib.php is used)\n *\n * Attach Ajax Event handlers for Create Table\n */\n$(document).ready(function() {\n\n     /**\n     * Attach event handler to the submit action of the create table minimal form\n     * and retrieve the full table form and display it in a dialog\n     */\n    $(\"#create_table_form_minimal.ajax\").live('submit', function(event) {\n        event.preventDefault();\n        $form = $(this);\n        PMA_prepareForAjaxRequest($form);\n\n        /*variables which stores the common attributes*/\n        var url = $form.serialize();\n        var action = $form.attr('action');\n        var $div =  $('<div id=\"create_table_dialog\"></div>');\n\n        /*Calling to the createTableDialog function*/\n        PMA_createTableDialog($div, url, action);\n\n        // empty table name and number of columns from the minimal form\n        $form.find('input[name=table],input[name=num_fields]').val('');\n    });\n\n    /**\n     * Attach event handler for submission of create table form (save)\n     *\n     * @uses    PMA_ajaxShowMessage()\n     * @uses    $.PMA_sort_table()\n     *\n     */\n    // .live() must be called after a selector, see http://api.jquery.com/live\n    $(\"#create_table_form input[name=do_save_data]\").live('click', function(event) {\n        event.preventDefault();\n\n        /**\n         *  @var    the_form    object referring to the create table form\n         */\n        var $form = $(\"#create_table_form\");\n\n        /*\n         * First validate the form; if there is a problem, avoid submitting it\n         *\n         * checkTableEditForm() needs a pure element and not a jQuery object,\n         * this is why we pass $form[0] as a parameter (the jQuery object\n         * is actually an array of DOM elements)\n         */\n\n        if (checkTableEditForm($form[0], $form.find('input[name=orig_num_fields]').val())) {\n            // OK, form passed validation step\n            if ($form.hasClass('ajax')) {\n                PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n                PMA_prepareForAjaxRequest($form);\n                //User wants to submit the form\n                $.post($form.attr('action'), $form.serialize() + \"&do_save_data=\" + $(this).val(), function(data) {\n                    if(data.success == true) {\n                        $('#properties_message')\n                         .removeClass('error')\n                         .html('');\n                        PMA_ajaxShowMessage(data.message);\n                        // Only if the create table dialog (distinct panel) exists\n                        if ($(\"#create_table_dialog\").length > 0) {\n                            $(\"#create_table_dialog\").dialog(\"close\").remove();\n                        }\n\n                        /**\n                         * @var tables_table    Object referring to the <tbody> element that holds the list of tables\n                         */\n                        var tables_table = $(\"#tablesForm\").find(\"tbody\").not(\"#tbl_summary_row\");\n                        // this is the first table created in this db\n                        if (tables_table.length == 0) {\n                            if (window.parent && window.parent.frame_content) {\n                                window.parent.frame_content.location.reload();\n                            }\n                        } else {\n                            /**\n                             * @var curr_last_row   Object referring to the last <tr> element in {@link tables_table}\n                             */\n                            var curr_last_row = $(tables_table).find('tr:last');\n                            /**\n                             * @var curr_last_row_index_string   String containing the index of {@link curr_last_row}\n                             */\n                            var curr_last_row_index_string = $(curr_last_row).find('input:checkbox').attr('id').match(/\\d+/)[0];\n                            /**\n                             * @var curr_last_row_index Index of {@link curr_last_row}\n                             */\n                            var curr_last_row_index = parseFloat(curr_last_row_index_string);\n                            /**\n                             * @var new_last_row_index   Index of the new row to be appended to {@link tables_table}\n                             */\n                            var new_last_row_index = curr_last_row_index + 1;\n                            /**\n                             * @var new_last_row_id String containing the id of the row to be appended to {@link tables_table}\n                             */\n                            var new_last_row_id = 'checkbox_tbl_' + new_last_row_index;\n\n                            data.new_table_string = data.new_table_string.replace(/checkbox_tbl_/, new_last_row_id);\n                            //append to table\n                            $(data.new_table_string)\n                             .appendTo(tables_table);\n\n                            //Sort the table\n                            $(tables_table).PMA_sort_table('th');\n\n                            // Adjust summary row\n                            PMA_adjustTotals();\n                        }\n\n                        //Refresh navigation frame as a new table has been added\n                        if (window.parent && window.parent.frame_navigation) {\n                            window.parent.frame_navigation.location.reload();\n                        }\n                    } else {\n                        $('#properties_message')\n                         .addClass('error')\n                         .html(data.error);\n                        // scroll to the div containing the error message\n                        $('#properties_message')[0].scrollIntoView();\n                    }\n                }) // end $.post()\n            } // end if ($form.hasClass('ajax')\n            else {\n                // non-Ajax submit\n                $form.append('<input type=\"hidden\" name=\"do_save_data\" value=\"save\" />');\n                $form.submit();\n            }\n        } // end if (checkTableEditForm() )\n    }) // end create table form (save)\n\n    /**\n     * Attach event handler for create table form (add fields)\n     *\n     * @uses    PMA_ajaxShowMessage()\n     * @uses    $.PMA_sort_table()\n     * @uses    window.parent.refreshNavigation()\n     *\n     */\n    // .live() must be called after a selector, see http://api.jquery.com/live\n    $(\"#create_table_form.ajax input[name=submit_num_fields]\").live('click', function(event) {\n        event.preventDefault();\n\n        /**\n         *  @var    the_form    object referring to the create table form\n         */\n        var $form = $(\"#create_table_form\");\n\n        var $msgbox = PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n        PMA_prepareForAjaxRequest($form);\n\n        //User wants to add more fields to the table\n        $.post($form.attr('action'), $form.serialize() + \"&submit_num_fields=\" + $(this).val(), function(data) {\n            // if 'create_table_dialog' exists\n            if ($(\"#create_table_dialog\").length > 0) {\n                $(\"#create_table_dialog\").html(data);\n            }\n            // if 'create_table_div' exists\n            if ($(\"#create_table_div\").length > 0) {\n                $(\"#create_table_div\").html(data);\n            }\n            PMA_verifyColumnsProperties();\n            PMA_ajaxRemoveMessage($msgbox);\n        }) //end $.post()\n\n    }) // end create table form (add fields)\n\n}, 'top.frame_content'); //end $(document).ready for 'Create Table'\n\n/**\n * jQuery coding for 'Table operations'.  Used on tbl_operations.php\n * Attach Ajax Event handlers for Table operations\n */\n$(document).ready(function() {\n    /**\n     *Ajax action for submitting the \"Alter table order by\"\n    **/\n    $(\"#alterTableOrderby.ajax\").live('submit', function(event) {\n        event.preventDefault();\n        var $form = $(this);\n\n        PMA_prepareForAjaxRequest($form);\n        /*variables which stores the common attributes*/\n        $.post($form.attr('action'), $form.serialize()+\"&submitorderby=Go\", function(data) {\n            if ($(\"#sqlqueryresults\").length != 0) {\n                $(\"#sqlqueryresults\").remove();\n            }\n            if ($(\"#result_query\").length != 0) {\n                $(\"#result_query\").remove();\n            }\n            if (data.success == true) {\n                PMA_ajaxShowMessage(data.message);\n                $(\"<div id='sqlqueryresults'></div>\").insertAfter(\"#floating_menubar\");\n                $(\"#sqlqueryresults\").html(data.sql_query);\n                $(\"#result_query .notice\").remove();\n                $(\"#result_query\").prepend((data.message));\n            } else {\n                var $temp_div = $(\"<div id='temp_div'></div>\")\n                $temp_div.html(data.error);\n                var $error = $temp_div.find(\"code\").addClass(\"error\");\n                PMA_ajaxShowMessage($error, false);\n            }\n        }) // end $.post()\n    });//end of alterTableOrderby ajax submit\n\n    /**\n     *Ajax action for submitting the \"Copy table\"\n    **/\n    $(\"#copyTable.ajax input[name='submit_copy']\").live('click', function(event) {\n        event.preventDefault();\n        var $form = $(\"#copyTable\");\n        if($form.find(\"input[name='switch_to_new']\").attr('checked')) {\n            $form.append('<input type=\"hidden\" name=\"submit_copy\" value=\"Go\" />');\n            $form.removeClass('ajax');\n            $form.find(\"#ajax_request_hidden\").remove();\n            $form.submit();\n        } else {\n            PMA_prepareForAjaxRequest($form);\n            /*variables which stores the common attributes*/\n            $.post($form.attr('action'), $form.serialize()+\"&submit_copy=Go\", function(data) {\n                if ($(\"#sqlqueryresults\").length != 0) {\n                    $(\"#sqlqueryresults\").remove();\n                }\n                if ($(\"#result_query\").length != 0) {\n                    $(\"#result_query\").remove();\n                }\n                if (data.success == true) {\n                    PMA_ajaxShowMessage(data.message);\n                    $(\"<div id='sqlqueryresults'></div>\").insertAfter(\"#floating_menubar\");\n                    $(\"#sqlqueryresults\").html(data.sql_query);\n                    $(\"#result_query .notice\").remove();\n                    $(\"#result_query\").prepend((data.message));\n                    $(\"#copyTable\").find(\"select[name='target_db'] option\").filterByValue(data.db).attr('selected', 'selected');\n\n                    //Refresh navigation frame when the table is coppied\n                    if (window.parent && window.parent.frame_navigation) {\n                        window.parent.frame_navigation.location.reload();\n                    }\n                } else {\n                    var $temp_div = $(\"<div id='temp_div'></div>\");\n                    $temp_div.html(data.error);\n                    var $error = $temp_div.find(\"code\").addClass(\"error\");\n                    PMA_ajaxShowMessage($error, false);\n                }\n            }) // end $.post()\n        }\n    });//end of copyTable ajax submit\n\n    /**\n     *Ajax events for actions in the \"Table maintenance\"\n    **/\n    $(\"#tbl_maintenance.ajax li a.maintain_action\").live('click', function(event) {\n        event.preventDefault();\n        var $link = $(this);\n        var href = $link.attr(\"href\");\n        href = href.split('?');\n        if ($(\"#sqlqueryresults\").length != 0) {\n            $(\"#sqlqueryresults\").remove();\n        }\n        if ($(\"#result_query\").length != 0) {\n            $(\"#result_query\").remove();\n        }\n        //variables which stores the common attributes\n        $.post(href[0], href[1]+\"&ajax_request=true\", function(data) {\n            if (data.success == undefined) {\n                var $temp_div = $(\"<div id='temp_div'></div>\");\n                $temp_div.html(data);\n                var $success = $temp_div.find(\"#result_query .success\");\n                PMA_ajaxShowMessage($success);\n                $(\"<div id='sqlqueryresults' class='ajax'></div>\").insertAfter(\"#floating_menubar\");\n                $(\"#sqlqueryresults\").html(data);\n                PMA_init_slider();\n                $(\"#sqlqueryresults\").children(\"fieldset\").remove();\n            } else if (data.success == true ) {\n                PMA_ajaxShowMessage(data.message);\n                $(\"<div id='sqlqueryresults' class='ajax'></div>\").insertAfter(\"#floating_menubar\");\n                $(\"#sqlqueryresults\").html(data.sql_query);\n            } else {\n                var $temp_div = $(\"<div id='temp_div'></div>\");\n                $temp_div.html(data.error);\n                var $error = $temp_div.find(\"code\").addClass(\"error\");\n                PMA_ajaxShowMessage($error, false);\n            }\n        }) // end $.post()\n    });//end of table maintanance ajax click\n\n}, 'top.frame_content'); //end $(document).ready for 'Table operations'\n\n\n/**\n * Attach Ajax event handlers for Drop Database. Moved here from db_structure.js\n * as it was also required on db_create.php\n *\n * @uses    $.PMA_confirm()\n * @uses    PMA_ajaxShowMessage()\n * @uses    window.parent.refreshNavigation()\n * @uses    window.parent.refreshMain()\n * @see $cfg['AjaxEnable']\n */\n$(document).ready(function() {\n    $(\"#drop_db_anchor\").live('click', function(event) {\n        event.preventDefault();\n\n        //context is top.frame_content, so we need to use window.parent.db to access the db var\n        /**\n         * @var question    String containing the question to be asked for confirmation\n         */\n        var question = PMA_messages['strDropDatabaseStrongWarning'] + '\\n' + PMA_messages['strDoYouReally'] + ' :\\n' + 'DROP DATABASE ' + escapeHtml(window.parent.db);\n\n        $(this).PMA_confirm(question, $(this).attr('href') ,function(url) {\n\n            PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n            $.get(url, {'is_js_confirmed': '1', 'ajax_request': true}, function(data) {\n                //Database deleted successfully, refresh both the frames\n                window.parent.refreshNavigation();\n                window.parent.refreshMain();\n            }) // end $.get()\n        }); // end $.PMA_confirm()\n    }); //end of Drop Database Ajax action\n}) // end of $(document).ready() for Drop Database\n\n/**\n * Attach Ajax event handlers for 'Create Database'.  Used wherever libraries/\n * display_create_database.lib.php is used, ie main.php and server_databases.php\n *\n * @uses    PMA_ajaxShowMessage()\n * @see $cfg['AjaxEnable']\n */\n$(document).ready(function() {\n\n    $('#create_database_form.ajax').live('submit', function(event) {\n        event.preventDefault();\n\n        $form = $(this);\n\n        PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n        PMA_prepareForAjaxRequest($form);\n\n        $.post($form.attr('action'), $form.serialize(), function(data) {\n            if(data.success == true) {\n                PMA_ajaxShowMessage(data.message);\n\n                //Append database's row to table\n                $(\"#tabledatabases\")\n                .find('tbody')\n                .append(data.new_db_string)\n                .PMA_sort_table('.name')\n                .find('#db_summary_row')\n                .appendTo('#tabledatabases tbody')\n                .removeClass('odd even');\n\n                var $databases_count_object = $('#databases_count');\n                var databases_count = parseInt($databases_count_object.text());\n                $databases_count_object.text(++databases_count);\n                //Refresh navigation frame as a new database has been added\n                if (window.parent && window.parent.frame_navigation) {\n                    window.parent.frame_navigation.location.reload();\n                }\n            }\n            else {\n                PMA_ajaxShowMessage(data.error, false);\n            }\n        }) // end $.post()\n    }) // end $().live()\n})  // end $(document).ready() for Create Database\n\n/**\n * Validates the password field in a form\n *\n * @see     PMA_messages['strPasswordEmpty']\n * @see     PMA_messages['strPasswordNotSame']\n * @param   object   the form\n * @return  boolean  whether the field value is valid or not\n */\nfunction checkPassword(the_form)\n{\n    // Did the user select 'no password'?\n    if (typeof(the_form.elements['nopass']) != 'undefined'\n     && the_form.elements['nopass'][0].checked) {\n        return true;\n    } else if (typeof(the_form.elements['pred_password']) != 'undefined'\n     && (the_form.elements['pred_password'].value == 'none'\n      || the_form.elements['pred_password'].value == 'keep')) {\n        return true;\n    }\n\n    var password = the_form.elements['pma_pw'];\n    var password_repeat = the_form.elements['pma_pw2'];\n    var alert_msg = false;\n\n    if (password.value == '') {\n        alert_msg = PMA_messages['strPasswordEmpty'];\n    } else if (password.value != password_repeat.value) {\n        alert_msg = PMA_messages['strPasswordNotSame'];\n    }\n\n    if (alert_msg) {\n        alert(alert_msg);\n        password.value  = '';\n        password_repeat.value = '';\n        password.focus();\n        return false;\n    }\n\n    return true;\n} // end of the 'checkPassword()' function\n\n/**\n * Attach Ajax event handlers for 'Change Password' on main.php\n */\n$(document).ready(function() {\n\n    /**\n     * Attach Ajax event handler on the change password anchor\n     * @see $cfg['AjaxEnable']\n     */\n    $('#change_password_anchor.dialog_active').live('click',function(event) {\n        event.preventDefault();\n        return false;\n        });\n    $('#change_password_anchor.ajax').live('click', function(event) {\n        event.preventDefault();\n        $(this).removeClass('ajax').addClass('dialog_active');\n        /**\n         * @var button_options  Object containing options to be passed to jQueryUI's dialog\n         */\n        var button_options = {};\n        button_options[PMA_messages['strCancel']] = function() {$(this).dialog('close').remove();}\n        $.get($(this).attr('href'), {'ajax_request': true}, function(data) {\n            $('<div id=\"change_password_dialog\"></div>')\n            .dialog({\n                title: PMA_messages['strChangePassword'],\n                width: 600,\n                close: function(ev,ui) {$(this).remove();},\n                buttons : button_options,\n                beforeClose: function(ev,ui){ $('#change_password_anchor.dialog_active').removeClass('dialog_active').addClass('ajax')}\n            })\n            .append(data);\n            displayPasswordGenerateButton();\n\n            $('#change_password_form').bind('submit', function (e) {\n                e.preventDefault();\n                $(this)\n                    .closest('.ui-dialog')\n                    .find('.ui-dialog-buttonpane .ui-button')\n                    .first()\n                    .click();\n            });\n        }) // end $.get()\n    }) // end handler for change password anchor\n\n    /**\n     * Attach Ajax event handler for Change Password form submission\n     *\n     * @uses    PMA_ajaxShowMessage()\n     * @see $cfg['AjaxEnable']\n     */\n    $(\"#change_password_form.ajax\").find('input[name=change_pw]').live('click', function(event) {\n        event.preventDefault();\n\n        /**\n         * @var the_form    Object referring to the change password form\n         */\n        var the_form = $(\"#change_password_form\");\n\n        if (! checkPassword(the_form[0])) {\n            return false;\n        }\n\n        /**\n         * @var this_value  String containing the value of the submit button.\n         * Need to append this for the change password form on Server Privileges\n         * page to work\n         */\n        var this_value = $(this).val();\n\n        var $msgbox = PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n        $(the_form).append('<input type=\"hidden\" name=\"ajax_request\" value=\"true\" />');\n\n        $.post($(the_form).attr('action'), $(the_form).serialize() + '&change_pw='+ this_value, function(data) {\n            if(data.success == true) {\n                $(\"#floating_menubar\").after(data.sql_query);\n                $(\"#change_password_dialog\").hide().remove();\n                $(\"#edit_user_dialog\").dialog(\"close\").remove();\n                $('#change_password_anchor.dialog_active').removeClass('dialog_active').addClass('ajax');\n                PMA_ajaxRemoveMessage($msgbox);\n            }\n            else {\n                PMA_ajaxShowMessage(data.error, false);\n            }\n        }) // end $.post()\n    }) // end handler for Change Password form submission\n}) // end $(document).ready() for Change Password\n\n/**\n * Toggle the hiding/showing of the \"Open in ENUM/SET editor\" message when\n * the page loads and when the selected data type changes\n */\n$(document).ready(function() {\n    // is called here for normal page loads and also when opening\n    // the Create table dialog\n    PMA_verifyColumnsProperties();\n    //\n    // needs live() to work also in the Create Table dialog\n    $(\"select[class='column_type']\").live('change', function() {\n        PMA_showNoticeForEnum($(this));\n    });\n    $(\".default_type\").live('change', function() {\n        PMA_hideShowDefaultValue($(this));\n    });\n});\n\nfunction PMA_verifyColumnsProperties()\n{\n    $(\"select[class='column_type']\").each(function() {\n        PMA_showNoticeForEnum($(this));\n    });\n    $(\".default_type\").each(function() {\n        PMA_hideShowDefaultValue($(this));\n    });\n}\n\n/**\n * Hides/shows the default value input field, depending on the default type\n */\nfunction PMA_hideShowDefaultValue($default_type)\n{\n    if ($default_type.val() == 'USER_DEFINED') {\n        $default_type.siblings('.default_value').show().focus();\n    } else {\n        $default_type.siblings('.default_value').hide();\n    }\n}\n\n/**\n * @var $enum_editor_dialog An object that points to the jQuery\n *                          dialog of the ENUM/SET editor\n */\nvar $enum_editor_dialog = null;\n/**\n * Opens the ENUM/SET editor and controls its functions\n */\n$(document).ready(function() {\n    $(\"a.open_enum_editor\").live('click', function() {\n        // Get the name of the column that is being edited\n        var colname = $(this).closest('tr').find('input:first').val();\n        // And use it to make up a title for the page\n        if (colname.length < 1) {\n            var title = PMA_messages['enum_newColumnVals'];\n        } else {\n            var title = PMA_messages['enum_columnVals'].replace(\n                /%s/,\n                '\"' + decodeURIComponent(colname) + '\"'\n            );\n        }\n        // Get the values as a string\n        var inputstring = $(this)\n            .closest('td')\n            .find(\"input\")\n            .val();\n        // Escape html entities\n        inputstring = $('<div/>')\n            .text(inputstring)\n            .html();\n        // Parse the values, escaping quotes and\n        // slashes on the fly, into an array\n        //\n        // There is a PHP port of the below parser in enum_editor.php\n        // If you are fixing something here, you need to also update the PHP port.\n        var values = [];\n        var in_string = false;\n        var curr, next, buffer = '';\n        for (var i=0; i<inputstring.length; i++) {\n            curr = inputstring.charAt(i);\n            next = i == inputstring.length ? '' : inputstring.charAt(i+1);\n            if (! in_string && curr == \"'\") {\n                in_string = true;\n            } else if (in_string && curr == \"\\\\\" && next == \"\\\\\") {\n                buffer += \"&#92;\";\n                i++;\n            } else if (in_string && next == \"'\" && (curr == \"'\" || curr == \"\\\\\")) {\n                buffer += \"&#39;\";\n                i++;\n            } else if (in_string && curr == \"'\") {\n                in_string = false;\n                values.push(buffer);\n                buffer = '';\n            } else if (in_string) {\n                 buffer += curr;\n            }\n        }\n        if (buffer.length > 0) {\n            // The leftovers in the buffer are the last value (if any)\n            values.push(buffer);\n        }\n        var fields = '';\n        // If there are no values, maybe the user is about to make a\n        // new list so we add a few for him/her to get started with.\n        if (values.length == 0) {\n            values.push('','','','');\n        }\n        // Add the parsed values to the editor\n        var drop_icon = PMA_getImage('b_drop.png');\n        for (var i=0; i<values.length; i++) {\n            fields += \"<tr><td>\"\n                   + \"<input type='text' value='\" + values[i] + \"'/>\"\n                   + \"</td><td class='drop'>\"\n                   + drop_icon\n                   + \"</td></tr>\";\n        }\n        /**\n         * @var dialog HTML code for the ENUM/SET dialog\n         */\n        var dialog = \"<div id='enum_editor'>\"\n                   + \"<fieldset>\"\n                   + \"<legend>\" + title + \"</legend>\"\n                   + \"<p>\" + PMA_getImage('s_notice.png')\n                   + PMA_messages['enum_hint'] + \"</p>\"\n                   + \"<table class='values'>\" + fields + \"</table>\"\n                   + \"</fieldset><fieldset class='tblFooters'>\"\n                   + \"<table class='add'><tr><td>\"\n                   + \"<div class='slider'></div>\"\n                   + \"</td><td>\"\n                   + \"<form><div><input type='submit' class='add_value' value='\"\n                   + PMA_messages['enum_addValue'].replace(/%d/, 1)\n                   + \"'/></div></form>\"\n                   + \"</td></tr></table>\"\n                   + \"<input type='hidden' value='\" // So we know which column's data is being edited\n                   + $(this).closest('td').find(\"input\").attr(\"id\")\n                   + \"' />\"\n                   + \"</fieldset>\";\n                   + \"</div>\";\n        /**\n         * @var  Defines functions to be called when the buttons in\n         * the buttonOptions jQuery dialog bar are pressed\n         */\n        var buttonOptions = {};\n        buttonOptions[PMA_messages['strGo']] = function () {\n            // When the submit button is clicked,\n            // put the data back into the original form\n            var value_array = new Array();\n            $(this).find(\".values input\").each(function(index, elm) {\n                var val = elm.value.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"''\");\n                value_array.push(\"'\" + val + \"'\");\n            });\n            // get the Length/Values text field where this value belongs\n            var values_id = $(this).find(\"input[type='hidden']\").attr(\"value\");\n            $(\"input[id='\" + values_id + \"']\").attr(\"value\", value_array.join(\",\"));\n            $(this).dialog(\"close\");\n        };\n        buttonOptions[PMA_messages['strClose']] = function () {\n            $(this).dialog(\"close\");\n        };\n        // Show the dialog\n        var width = parseInt(\n            (parseInt($('html').css('font-size'), 10)/13)*340,\n            10\n        );\n        if (! width) {\n            width = 340;\n        }\n        $enum_editor_dialog = $(dialog).dialog({\n            minWidth: width,\n            modal: true,\n            title: PMA_messages['enum_editor'],\n            buttons: buttonOptions,\n            open: function() {\n                // Focus the \"Go\" button after opening the dialog\n                $(this).closest('.ui-dialog').find('.ui-dialog-buttonpane button:first').focus();\n            },\n            close: function() {\n                $(this).remove();\n            }\n        });\n        // slider for choosing how many fields to add\n        $enum_editor_dialog.find(\".slider\").slider({\n            animate: true,\n            range: \"min\",\n            value: 1,\n            min: 1,\n            max: 9,\n            slide: function( event, ui ) {\n                $(this).closest('table').find('input[type=submit]').val(\n                    PMA_messages['enum_addValue'].replace(/%d/, ui.value)\n                );\n            }\n        });\n        // Focus the slider, otherwise it looks nearly transparent\n        $('.ui-slider-handle').addClass('ui-state-focus');\n        return false;\n    });\n\n    // When \"add a new value\" is clicked, append an empty text field\n    $(\"input.add_value\").live('click', function(e) {\n        e.preventDefault();\n        var num_new_rows = $enum_editor_dialog.find(\"div.slider\").slider('value');\n        while (num_new_rows--) {\n            $enum_editor_dialog.find('.values')\n                .append(\n                    \"<tr style='display: none;'><td>\"\n                  + \"<input type='text' />\"\n                  + \"</td><td class='drop'>\"\n                  + PMA_getImage('b_drop.png')\n                  + \"</td></tr>\"\n                )\n                .find('tr:last')\n                .show('fast');\n        }\n    });\n\n    // Removes the specified row from the enum editor\n    $(\"#enum_editor td.drop\").live('click', function() {\n        $(this).closest('tr').hide('fast', function () {\n            $(this).remove();\n        });\n    });\n});\n\n$(document).ready(function(){\n    PMA_convertFootnotesToTooltips();\n});\n\n/**\n * Ensures indexes names are valid according to their type and, for a primary\n * key, lock index name to 'PRIMARY'\n * @param   string   form_id  Variable which parses the form name as\n *                            the input\n * @return  boolean  false    if there is no index form, true else\n */\nfunction checkIndexName(form_id)\n{\n    if ($(\"#\"+form_id).length == 0) {\n        return false;\n    }\n\n    // Gets the elements pointers\n    var $the_idx_name = $(\"#input_index_name\");\n    var $the_idx_type = $(\"#select_index_type\");\n\n    // Index is a primary key\n    if ($the_idx_type.find(\"option:selected\").attr(\"value\") == 'PRIMARY') {\n        $the_idx_name.attr(\"value\", 'PRIMARY');\n        $the_idx_name.attr(\"disabled\", true);\n    }\n\n    // Other cases\n    else {\n        if ($the_idx_name.attr(\"value\") == 'PRIMARY') {\n            $the_idx_name.attr(\"value\",  '');\n        }\n        $the_idx_name.attr(\"disabled\", false);\n    }\n\n    return true;\n} // end of the 'checkIndexName()' function\n\n/**\n * function to convert the footnotes to tooltips\n *\n * @param   jquery-Object   $div    a div jquery object which specifies the\n *                                  domain for searching footnootes. If we\n *                                  ommit this parameter the function searches\n *                                  the footnotes in the whole body\n **/\nfunction PMA_convertFootnotesToTooltips($div)\n{\n    // Hide the footnotes from the footer (which are displayed for\n    // JavaScript-disabled browsers) since the tooltip is sufficient\n\n    if ($div == undefined || ! $div instanceof jQuery || $div.length == 0) {\n        $div = $(\"body\");\n    }\n\n    $footnotes = $div.find(\".footnotes\");\n\n    $footnotes.hide();\n    $footnotes.find('span').each(function() {\n        $(this).children(\"sup\").remove();\n    });\n    // The border and padding must be removed otherwise a thin yellow box remains visible\n    $footnotes.css(\"border\", \"none\");\n    $footnotes.css(\"padding\", \"0px\");\n\n    // Replace the superscripts with the help icon\n    $div.find(\"sup.footnotemarker\").hide();\n    $div.find(\"img.footnotemarker\").show();\n\n    $div.find(\"img.footnotemarker\").each(function() {\n        var img_class = $(this).attr(\"class\");\n        /** img contains two classes, as example \"footnotemarker footnote_1\".\n         *  We split it by second class and take it for the id of span\n        */\n        img_class = img_class.split(\" \");\n        for (i = 0; i < img_class.length; i++) {\n            if (img_class[i].split(\"_\")[0] == \"footnote\") {\n                var span_id = img_class[i].split(\"_\")[1];\n            }\n        }\n        /**\n         * Now we get the #id of the span with span_id variable. As an example if we\n         * initially get the img class as \"footnotemarker footnote_2\", now we get\n         * #2 as the span_id. Using that we can find footnote_2 in footnotes.\n         * */\n        var tooltip_text = $footnotes.find(\"span[id='footnote_\" + span_id + \"']\").html();\n        $(this).qtip({\n            content: tooltip_text,\n            show: { delay: 0 },\n            hide: { delay: 1000 },\n            style: { background: '#ffffcc' }\n        });\n    });\n}\n\n/**\n * This function handles the resizing of the content frame\n * and adjusts the top menu according to the new size of the frame\n */\nfunction menuResize()\n{\n    var $cnt = $('#topmenu');\n    var wmax = $cnt.innerWidth() - 5; // 5 px margin for jumping menu in Chrome\n    var $submenu = $cnt.find('.submenu');\n    var submenu_w = $submenu.outerWidth(true);\n    var $submenu_ul = $submenu.find('ul');\n    var $li = $cnt.find('> li');\n    var $li2 = $submenu_ul.find('li');\n    var more_shown = $li2.length > 0;\n\n    // Calculate the total width used by all the shown tabs\n    var total_len = more_shown ? submenu_w : 0;\n    for (var i = 0; i < $li.length-1; i++) {\n        total_len += $($li[i]).outerWidth(true);\n    }\n\n    // Now hide menu elements that don't fit into the menubar\n    var i = $li.length-1;\n    var hidden = false; // Whether we have hidden any tabs\n    while (total_len >= wmax && --i >= 0) { // Process the tabs backwards\n        hidden = true;\n        var el = $($li[i]);\n        var el_width = el.outerWidth(true);\n        el.data('width', el_width);\n        if (! more_shown) {\n            total_len -= el_width;\n            el.prependTo($submenu_ul);\n            total_len += submenu_w;\n            more_shown = true;\n        } else {\n            total_len -= el_width;\n            el.prependTo($submenu_ul);\n        }\n    }\n\n    // If we didn't hide any tabs, then there might be some space to show some\n    if (! hidden) {\n        // Show menu elements that do fit into the menubar\n        for (var i = 0; i < $li2.length; i++) {\n            total_len += $($li2[i]).data('width');\n            // item fits or (it is the last item\n            // and it would fit if More got removed)\n            if (total_len < wmax\n                || (i == $li2.length - 1 && total_len - submenu_w < wmax)\n            ) {\n                $($li2[i]).insertBefore($submenu);\n            } else {\n                break;\n            }\n        }\n    }\n\n    // Show/hide the \"More\" tab as needed\n    if ($submenu_ul.find('li').length > 0) {\n        $submenu.addClass('shown');\n    } else {\n        $submenu.removeClass('shown');\n    }\n\n    if ($cnt.find('> li').length == 1) {\n        // If there is only the \"More\" tab left, then we need\n        // to align the submenu to the left edge of the tab\n        $submenu_ul.removeClass().addClass('only');\n    } else {\n        // Otherwise we align the submenu to the right edge of the tab\n        $submenu_ul.removeClass().addClass('notonly');\n    }\n\n    if ($submenu.find('.tabactive').length) {\n        $submenu.addClass('active').find('> a').removeClass('tab').addClass('tabactive');\n    } else {\n        $submenu.removeClass('active').find('> a').addClass('tab').removeClass('tabactive');\n    }\n}\n\n$(function() {\n    var topmenu = $('#topmenu');\n    if (topmenu.length == 0) {\n        return;\n    }\n    // create submenu container\n    var link = $('<a />', {href: '#', 'class': 'tab'})\n        .text(PMA_messages['strMore'])\n        .click(function(e) {\n            e.preventDefault();\n        });\n    var img = topmenu.find('li:first-child img');\n    if (img.length) {\n        $(PMA_getImage('b_more.png').toString()).prependTo(link);\n    }\n    var submenu = $('<li />', {'class': 'submenu'})\n        .append(link)\n        .append($('<ul />'))\n        .mouseenter(function() {\n            if ($(this).find('ul .tabactive').length == 0) {\n                $(this).addClass('submenuhover').find('> a').addClass('tabactive');\n            }\n        })\n        .mouseleave(function() {\n            if ($(this).find('ul .tabactive').length == 0) {\n                $(this).removeClass('submenuhover').find('> a').removeClass('tabactive');\n            }\n        });\n    topmenu.append(submenu);\n\n    // populate submenu and register resize event\n    menuResize();\n    $(window).resize(menuResize);\n});\n\n/**\n * Get the row number from the classlist (for example, row_1)\n */\nfunction PMA_getRowNumber(classlist)\n{\n    return parseInt(classlist.split(/\\s+row_/)[1]);\n}\n\n/**\n * Changes status of slider\n */\nfunction PMA_set_status_label($element)\n{\n    var text = $element.css('display') == 'none'\n        ? '+ '\n        : '- ';\n    $element.closest('.slide-wrapper').prev().find('span').text(text);\n}\n\n/**\n * Initializes slider effect.\n */\nfunction PMA_init_slider()\n{\n    $('.pma_auto_slider').each(function() {\n        var $this = $(this);\n\n        if ($this.hasClass('slider_init_done')) {\n            return;\n        }\n        $this.addClass('slider_init_done');\n\n        var $wrapper = $('<div>', {'class': 'slide-wrapper'});\n        $wrapper.toggle($this.is(':visible'));\n        $('<a>', {href: '#'+this.id})\n            .text(this.title)\n            .prepend($('<span>'))\n            .insertBefore($this)\n            .click(function() {\n                var $wrapper = $this.closest('.slide-wrapper');\n                var visible = $this.is(':visible');\n                if (!visible) {\n                    $wrapper.show();\n                }\n                $this[visible ? 'hide' : 'show']('blind', function() {\n                    $wrapper.toggle(!visible);\n                    PMA_set_status_label($this);\n                });\n                return false;\n            });\n        $this.wrap($wrapper);\n        PMA_set_status_label($this);\n    });\n}\n\n/**\n * var  toggleButton  This is a function that creates a toggle\n *                    sliding button given a jQuery reference\n *                    to the correct DOM element\n */\nvar toggleButton = function ($obj) {\n    // In rtl mode the toggle switch is flipped horizontally\n    // so we need to take that into account\n    if ($('.text_direction', $obj).text() == 'ltr') {\n        var right = 'right';\n    } else {\n        var right = 'left';\n    }\n    /**\n     *  var  h  Height of the button, used to scale the\n     *          background image and position the layers\n     */\n    var h = $obj.height();\n    $('img', $obj).height(h);\n    $('table', $obj).css('bottom', h-1);\n    /**\n     *  var  on   Width of the \"ON\" part of the toggle switch\n     *  var  off  Width of the \"OFF\" part of the toggle switch\n     */\n    var on  = $('.toggleOn', $obj).width();\n    var off = $('.toggleOff', $obj).width();\n    // Make the \"ON\" and \"OFF\" parts of the switch the same size\n    // + 2 pixels to avoid overflowed\n    $('.toggleOn > div', $obj).width(Math.max(on, off) + 2);\n    $('.toggleOff > div', $obj).width(Math.max(on, off) + 2);\n    /**\n     *  var  w  Width of the central part of the switch\n     */\n    var w = parseInt(($('img', $obj).height() / 16) * 22, 10);\n    // Resize the central part of the switch on the top\n    // layer to match the background\n    $('table td:nth-child(2) > div', $obj).width(w);\n    /**\n     *  var  imgw    Width of the background image\n     *  var  tblw    Width of the foreground layer\n     *  var  offset  By how many pixels to move the background\n     *               image, so that it matches the top layer\n     */\n    var imgw = $('img', $obj).width();\n    var tblw = $('table', $obj).width();\n    var offset = parseInt(((imgw - tblw) / 2), 10);\n    // Move the background to match the layout of the top layer\n    $obj.find('img').css(right, offset);\n    /**\n     *  var  offw    Outer width of the \"ON\" part of the toggle switch\n     *  var  btnw    Outer width of the central part of the switch\n     */\n    var offw = $('.toggleOff', $obj).outerWidth();\n    var btnw = $('table td:nth-child(2)', $obj).outerWidth();\n    // Resize the main div so that exactly one side of\n    // the switch plus the central part fit into it.\n    $obj.width(offw + btnw + 2);\n    /**\n     *  var  move  How many pixels to move the\n     *             switch by when toggling\n     */\n    var move = $('.toggleOff', $obj).outerWidth();\n    // If the switch is initialized to the\n    // OFF state we need to move it now.\n    if ($('.container', $obj).hasClass('off')) {\n        if (right == 'right') {\n            $('table, img', $obj).animate({'left': '-=' + move + 'px'}, 0);\n        } else {\n            $('table, img', $obj).animate({'left': '+=' + move + 'px'}, 0);\n        }\n    }\n    // Attach an 'onclick' event to the switch\n    $('.container', $obj).click(function () {\n        if ($(this).hasClass('isActive')) {\n            return false;\n        } else {\n            $(this).addClass('isActive');\n        }\n        var $msg = PMA_ajaxShowMessage();\n        var $container = $(this);\n        var callback = $('.callback', this).text();\n        // Perform the actual toggle\n        if ($(this).hasClass('on')) {\n            if (right == 'right') {\n                var operator = '-=';\n            } else {\n                var operator = '+=';\n            }\n            var url = $(this).find('.toggleOff > span').text();\n            var removeClass = 'on';\n            var addClass = 'off';\n        } else {\n            if (right == 'right') {\n                var operator = '+=';\n            } else {\n                var operator = '-=';\n            }\n            var url = $(this).find('.toggleOn > span').text();\n            var removeClass = 'off';\n            var addClass = 'on';\n        }\n        $.post(url, {'ajax_request': true}, function(data) {\n            if(data.success == true) {\n                PMA_ajaxRemoveMessage($msg);\n                $container\n                .removeClass(removeClass)\n                .addClass(addClass)\n                .animate({'left': operator + move + 'px'}, function () {\n                    $container.removeClass('isActive');\n                });\n                eval(callback);\n            } else {\n                PMA_ajaxShowMessage(data.error, false);\n                $container.removeClass('isActive');\n            }\n        });\n    });\n};\n\n/**\n * Initialise all toggle buttons\n */\n$(window).load(function () {\n    $('.toggleAjax').each(function () {\n        $(this)\n        .show()\n        .find('.toggleButton')\n        toggleButton($(this));\n    });\n});\n\n/**\n * Vertical pointer\n */\n$(document).ready(function() {\n    $('.vpointer').live('hover',\n        //handlerInOut\n        function(e) {\n            var $this_td = $(this);\n            var row_num = PMA_getRowNumber($this_td.attr('class'));\n            // for all td of the same vertical row, toggle hover\n            $('.vpointer').filter('.row_' + row_num).toggleClass('hover');\n        }\n        );\n}) // end of $(document).ready() for vertical pointer\n\n$(document).ready(function() {\n    /**\n     * Vertical marker\n     */\n    $('.vmarker').live('click', function(e) {\n        // do not trigger when clicked on anchor\n        if ($(e.target).is('a, img, a *')) {\n            return;\n        }\n\n        var $this_td = $(this);\n        var row_num = PMA_getRowNumber($this_td.attr('class'));\n\n        // XXX: FF fires two click events for <label> (label and checkbox), so we need to handle this differently\n        var $tr = $(this);\n        var $checkbox = $('.vmarker').filter('.row_' + row_num + ':first').find(':checkbox');\n        if ($checkbox.length) {\n            // checkbox in a row, add or remove class depending on checkbox state\n            var checked = $checkbox.attr('checked');\n            if (!$(e.target).is(':checkbox, label')) {\n                checked = !checked;\n                $checkbox.attr('checked', checked);\n            }\n            // for all td of the same vertical row, toggle the marked class\n            if (checked) {\n                $('.vmarker').filter('.row_' + row_num).addClass('marked');\n            } else {\n                $('.vmarker').filter('.row_' + row_num).removeClass('marked');\n            }\n        } else {\n            // normaln data table, just toggle class\n            $('.vmarker').filter('.row_' + row_num).toggleClass('marked');\n        }\n    });\n\n    /**\n     * Reveal visual builder anchor\n     */\n\n    $('#visual_builder_anchor').show();\n\n    /**\n     * Page selector in db Structure (non-AJAX)\n     */\n    $('#tableslistcontainer').find('#pageselector').live('change', function() {\n        $(this).parent(\"form\").submit();\n    });\n\n    /**\n     * Page selector in navi panel (non-AJAX)\n     */\n    $('#navidbpageselector').find('#pageselector').live('change', function() {\n        $(this).parent(\"form\").submit();\n    });\n\n    /**\n     * Page selector in browse_foreigners windows (non-AJAX)\n     */\n    $('#body_browse_foreigners').find('#pageselector').live('change', function() {\n        $(this).closest(\"form\").submit();\n    });\n\n    /**\n     * Load version information asynchronously.\n     */\n    if ($('.jsversioncheck').length > 0) {\n        $.getJSON('http://www.phpmyadmin.net/home_page/version.json', {}, PMA_current_version);\n    }\n\n    /**\n     * Slider effect.\n     */\n    PMA_init_slider();\n\n    /**\n     * Enables the text generated by PMA_linkOrButton() to be clickable\n     */\n    $('a[class~=\"formLinkSubmit\"]').live('click',function(e) {\n\n        if($(this).attr('href').indexOf('=') != -1) {\n            var data = $(this).attr('href').substr($(this).attr('href').indexOf('#')+1).split('=',2);\n            $(this).parents('form').append('<input type=\"hidden\" name=\"' + data[0] + '\" value=\"' + data[1] + '\"/>');\n        }\n        $(this).parents('form').submit();\n        return false;\n    });\n\n    $('#update_recent_tables').ready(function() {\n        if (window.parent.frame_navigation != undefined\n            && window.parent.frame_navigation.PMA_reloadRecentTable != undefined)\n        {\n            window.parent.frame_navigation.PMA_reloadRecentTable();\n        }\n    });\n\n}) // end of $(document).ready()\n\n/**\n * Creates a message inside an object with a sliding effect\n *\n * @param   msg    A string containing the text to display\n * @param   $obj   a jQuery object containing the reference\n *                 to the element where to put the message\n *                 This is optional, if no element is\n *                 provided, one will be created below the\n *                 navigation links at the top of the page\n *\n * @return  bool   True on success, false on failure\n */\nfunction PMA_slidingMessage(msg, $obj)\n{\n    if (msg == undefined || msg.length == 0) {\n        // Don't show an empty message\n        return false;\n    }\n    if ($obj == undefined || ! $obj instanceof jQuery || $obj.length == 0) {\n        // If the second argument was not supplied,\n        // we might have to create a new DOM node.\n        if ($('#PMA_slidingMessage').length == 0) {\n            $('#floating_menubar')\n            .after('<span id=\"PMA_slidingMessage\" '\n                 + 'style=\"display: inline-block;\"></span>');\n        }\n        $obj = $('#PMA_slidingMessage');\n    }\n    if ($obj.has('div').length > 0) {\n        // If there already is a message inside the\n        // target object, we must get rid of it\n        $obj\n        .find('div')\n        .first()\n        .fadeOut(function () {\n            $obj\n            .children()\n            .remove();\n            $obj\n            .append('<div style=\"display: none;\">' + msg + '</div>')\n            .animate({\n                height: $obj.find('div').first().height()\n            })\n            .find('div')\n            .first()\n            .fadeIn();\n        });\n    } else {\n        // Object does not already have a message\n        // inside it, so we simply slide it down\n        var h = $obj\n                .width('100%')\n                .html('<div style=\"display: none;\">' + msg + '</div>')\n                .find('div')\n                .first()\n                .height();\n        $obj\n        .find('div')\n        .first()\n        .css('height', 0)\n        .show()\n        .animate({\n                height: h\n            }, function() {\n            // Set the height of the parent\n            // to the height of the child\n            $obj\n            .height(\n                $obj\n                .find('div')\n                .first()\n                .height()\n            );\n        });\n    }\n    return true;\n} // end PMA_slidingMessage()\n\n/**\n * Attach Ajax event handlers for Drop Table.\n *\n * @uses    $.PMA_confirm()\n * @uses    PMA_ajaxShowMessage()\n * @uses    window.parent.refreshNavigation()\n * @uses    window.parent.refreshMain()\n * @see $cfg['AjaxEnable']\n */\n$(document).ready(function() {\n    $(\"#drop_tbl_anchor\").live('click', function(event) {\n        event.preventDefault();\n\n        //context is top.frame_content, so we need to use window.parent.table to access the table var\n        /**\n         * @var question    String containing the question to be asked for confirmation\n         */\n        var question = PMA_messages['strDropTableStrongWarning'] + '\\n' + PMA_messages['strDoYouReally'] + ' :\\n' + 'DROP TABLE ' + escapeHtml(window.parent.table);\n\n        $(this).PMA_confirm(question, $(this).attr('href') ,function(url) {\n\n            PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n            $.get(url, {'is_js_confirmed': '1', 'ajax_request': true}, function(data) {\n                //Database deleted successfully, refresh both the frames\n                window.parent.refreshNavigation();\n                window.parent.refreshMain();\n            }) // end $.get()\n        }); // end $.PMA_confirm()\n    }); //end of Drop Table Ajax action\n}) // end of $(document).ready() for Drop Table\n\n/**\n * Attach Ajax event handlers for Truncate Table.\n *\n * @uses    $.PMA_confirm()\n * @uses    PMA_ajaxShowMessage()\n * @uses    window.parent.refreshNavigation()\n * @uses    window.parent.refreshMain()\n * @see $cfg['AjaxEnable']\n */\n$(document).ready(function() {\n    $(\"#truncate_tbl_anchor.ajax\").live('click', function(event) {\n        event.preventDefault();\n\n      //context is top.frame_content, so we need to use window.parent.table to access the table var\n        /**\n         * @var question    String containing the question to be asked for confirmation\n         */\n        var question = PMA_messages['strTruncateTableStrongWarning'] + '\\n' + PMA_messages['strDoYouReally'] + ' :\\n' + 'TRUNCATE TABLE ' + escapeHtml(window.parent.table);\n\n        $(this).PMA_confirm(question, $(this).attr('href') ,function(url) {\n\n            PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n            $.get(url, {'is_js_confirmed': '1', 'ajax_request': true}, function(data) {\n                if ($(\"#sqlqueryresults\").length != 0) {\n                    $(\"#sqlqueryresults\").remove();\n                }\n                if ($(\"#result_query\").length != 0) {\n                    $(\"#result_query\").remove();\n                }\n                if (data.success == true) {\n                    PMA_ajaxShowMessage(data.message);\n                    $(\"<div id='sqlqueryresults'></div>\").insertAfter(\"#floating_menubar\");\n                    $(\"#sqlqueryresults\").html(data.sql_query);\n                } else {\n                    var $temp_div = $(\"<div id='temp_div'></div>\")\n                    $temp_div.html(data.error);\n                    var $error = $temp_div.find(\"code\").addClass(\"error\");\n                    PMA_ajaxShowMessage($error, false);\n                }\n            }) // end $.get()\n        }); // end $.PMA_confirm()\n    }); //end of Truncate Table Ajax action\n}) // end of $(document).ready() for Truncate Table\n\n/**\n * Attach CodeMirror2 editor to SQL edit area.\n */\n$(document).ready(function() {\n    var elm = $('#sqlquery');\n    if (elm.length > 0 && typeof CodeMirror != 'undefined') {\n        codemirror_editor = CodeMirror.fromTextArea(elm[0], {\n            lineNumbers: true,\n            matchBrackets: true,\n            indentUnit: 4,\n            mode: \"text/x-mysql\",\n            lineWrapping: true\n        });\n    }\n});\n\n/**\n * jQuery plugin to cancel selection in HTML code.\n */\n(function ($) {\n    $.fn.noSelect = function (p) { //no select plugin by Paulo P.Marinas\n        var prevent = (p == null) ? true : p;\n        if (prevent) {\n            return this.each(function () {\n                if ($.browser.msie || $.browser.safari) $(this).bind('selectstart', function () {\n                    return false;\n                });\n                else if ($.browser.mozilla) {\n                    $(this).css('MozUserSelect', 'none');\n                    $('body').trigger('focus');\n                } else if ($.browser.opera) $(this).bind('mousedown', function () {\n                    return false;\n                });\n                else $(this).attr('unselectable', 'on');\n            });\n        } else {\n            return this.each(function () {\n                if ($.browser.msie || $.browser.safari) $(this).unbind('selectstart');\n                else if ($.browser.mozilla) $(this).css('MozUserSelect', 'inherit');\n                else if ($.browser.opera) $(this).unbind('mousedown');\n                else $(this).removeAttr('unselectable', 'on');\n            });\n        }\n    }; //end noSelect\n})(jQuery);\n\n/**\n * jQuery plugin to correctly filter input fields by value, needed\n * because some nasty values may break selector syntax\n */\n(function ($) {\n    $.fn.filterByValue = function (value) {\n        return this.filter(function () {\n            return $(this).val() === value\n        });\n    };\n})(jQuery);\n\n/**\n * Create default PMA tooltip for the element specified. The default appearance\n * can be overriden by specifying optional \"options\" parameter (see qTip options).\n */\nfunction PMA_createqTip($elements, content, options)\n{\n    if ($('#no_hint').length > 0) {\n        return;\n    }\n\n    var o = {\n        content: content,\n        style: {\n            classes: {\n                tooltip: 'normalqTip',\n                content: 'normalqTipContent'\n            },\n            name: 'dark'\n        },\n        position: {\n            target: 'mouse',\n            corner: { target: 'rightMiddle', tooltip: 'leftMiddle' },\n            adjust: { x: 10, y: 20 }\n        },\n        show: {\n            delay: 0,\n            effect: {\n                type: 'grow',\n                length: 150\n            }\n        },\n        hide: {\n            effect: {\n                type: 'grow',\n                length: 200\n            }\n        }\n    }\n\n    $elements.qtip($.extend(true, o, options));\n}\n\n/**\n * Return value of a cell in a table.\n */\nfunction PMA_getCellValue(td) {\n    if ($(td).is('.null')) {\n        return '';\n    } else if (! $(td).is('.to_be_saved') && $(td).data('original_data')) {\n        return $(td).data('original_data');\n    } else {\n        return $(td).text();\n    }\n}\n\n/* Loads a js file, an array may be passed as well */\nloadJavascript=function(file) {\n    if($.isArray(file)) {\n        for(var i=0; i<file.length; i++) {\n            $('head').append('<script type=\"text/javascript\" src=\"'+file[i]+'\"></script>');\n        }\n    } else {\n        $('head').append('<script type=\"text/javascript\" src=\"'+file+'\"></script>');\n    }\n};\n\n$(document).ready(function() {\n    /**\n     * Theme selector.\n     */\n    $('a.themeselect').live('click', function(e) {\n        window.open(\n            e.target,\n            'themes',\n            'left=10,top=20,width=510,height=350,scrollbars=yes,status=yes,resizable=yes'\n            );\n        return false;\n    });\n\n    /**\n     * Automatic form submission on change.\n     */\n    $('.autosubmit').change(function(e) {\n        e.target.form.submit();\n    });\n\n    /**\n     * Theme changer.\n     */\n    $('.take_theme').click(function(e) {\n        var what = this.name;\n        if (window.opener && window.opener.document.forms['setTheme'].elements['set_theme']) {\n            window.opener.document.forms['setTheme'].elements['set_theme'].value = what;\n            window.opener.document.forms['setTheme'].submit();\n            window.close();\n            return false;\n        }\n        return true;\n    });\n});\n\n/**\n * Clear text selection\n */\nfunction PMA_clearSelection() {\n    if(document.selection && document.selection.empty) {\n        document.selection.empty();\n    } else if(window.getSelection) {\n        var sel = window.getSelection();\n        if(sel.empty) sel.empty();\n        if(sel.removeAllRanges) sel.removeAllRanges();\n    }\n}\n\n/**\n * HTML escaping\n */\nfunction escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n}\n\n/**\n * Print button\n */\nfunction printPage()\n{\n    // Do print the page\n    if (typeof(window.print) != 'undefined') {\n        window.print();\n    }\n}\n\n$(document).ready(function() {\n    $('input#print').click(printPage);\n});\n\n/**\n * Makes the breadcrumbs and the menu bar float at the top of the viewport\n */\n$(document).ready(function () {\n    if ($(\"#floating_menubar\").length && $('#PMA_disable_floating_menubar').length == 0) {\n        $(\"#floating_menubar\")\n            .css({\n                'position': 'fixed',\n                'top': 0,\n                'left': 0,\n                'width': '100%',\n                'z-index': 500\n            })\n            .append($('#serverinfo'))\n            .append($('#topmenucontainer'));\n        $('body').css(\n            'padding-top',\n            $('#floating_menubar').outerHeight(true)\n        );\n    }\n});\n\n/**\n * Toggles row colors of a set of 'tr' elements starting from a given element\n *\n * @param $start Starting element\n */\nfunction toggleRowColors($start)\n{\n    for (var $curr_row = $start; $curr_row.length > 0; $curr_row = $curr_row.next()) {\n        if ($curr_row.hasClass('odd')) {\n            $curr_row.removeClass('odd').addClass('even');\n        } else if ($curr_row.hasClass('even')) {\n            $curr_row.removeClass('even').addClass('odd');\n        }\n    }\n}\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n *\n * @package PhpMyAdmin\n */\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\n/**\n *\n */\nif (isset($_REQUEST['GLOBALS']) || isset($_FILES['GLOBALS'])) {\n    die(__(\"GLOBALS overwrite attempt\"));\n}\n\n/**\n * Sends http headers\n */\n$GLOBALS['now'] = gmdate('D, d M Y H:i:s') . ' GMT';\n/* Prevent against ClickJacking by allowing frames only from same origin */\nif (!$GLOBALS['cfg']['AllowThirdPartyFraming']) {\n    header('X-Frame-Options: SAMEORIGIN');\n    header(\"X-Content-Security-Policy: allow 'self' http://www.phpmyadmin.net; options inline-script eval-script; frame-ancestors 'self'; img-src 'self' data:\");\n    header(\"X-WebKit-CSP: allow 'self' http://www.phpmyadmin.net; options inline-script eval-script\");\n}\nPMA_no_cache_header();\nif (!defined('IS_TRANSFORMATION_WRAPPER')) {\n    // Define the charset to be used\n    header('Content-Type: text/html; charset=utf-8');\n}\n?>\n"], "filenames": ["js/functions.js", "libraries/header_http.inc.php"], "buggy_code_start_loc": [131, 25], "buggy_code_end_loc": [3222, 26], "fixing_code_start_loc": [131, 25], "fixing_code_end_loc": [3222, 26], "type": "CWE-79", "message": "phpMyAdmin 3.5.x before 3.5.3 uses JavaScript code that is obtained through an HTTP session to phpmyadmin.net without SSL, which allows man-in-the-middle attackers to conduct cross-site scripting (XSS) attacks by modifying this code.", "other": {"cve": {"id": "CVE-2012-5368", "sourceIdentifier": "cve@mitre.org", "published": "2012-10-25T10:51:29.030", "lastModified": "2013-01-26T04:58:13.150", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "phpMyAdmin 3.5.x before 3.5.3 uses JavaScript code that is obtained through an HTTP session to phpmyadmin.net without SSL, which allows man-in-the-middle attackers to conduct cross-site scripting (XSS) attacks by modifying this code."}, {"lang": "es", "value": "phpMyAdmin v3.5.x antes de v3.5.3 utiliza c\u00f3digo JavaScript que se obtiene a trav\u00e9s de una sesi\u00f3n HTTP para phpmyadmin.net sin SSL, que permite a atacantes man-in-the-middle realizar ataques de ejecuci\u00f3n de secuencias de comandos en sitios cruzados (XSS) mediante la modificaci\u00f3n de este c\u00f3digo."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:3.5.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "2577DB75-9893-4496-B9B8-22F4D7C70D8B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:3.5.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "3BBC76AB-567B-4081-8520-D4BB2211CA91"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:3.5.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "EDFD7186-12C3-4FA6-951E-288063262EAE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:3.5.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "C4E23EA5-8FD8-441A-8CB6-F1E77AA0D73B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:3.5.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "B5FE1328-F2E1-45C8-80ED-0560DAB666EE"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-updates/2012-11/msg00033.html", "source": "cve@mitre.org"}, {"url": "http://www.phpmyadmin.net/home_page/security/PMASA-2012-7.php", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "http://www.securityfocus.com/bid/55939", "source": "cve@mitre.org"}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/50edafc0884aa15d0a1aa178089ac6a1ad2eb18a", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/a547f3d3e2cf36c6a904fa3e053fd8bddd3fbbb0", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/50edafc0884aa15d0a1aa178089ac6a1ad2eb18a"}}