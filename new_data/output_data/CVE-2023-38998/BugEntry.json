{"buggy_code": ["<?php\n\n/*\n * Copyright (C) 2008 Shrew Soft Inc. <mgrooms@shrew.net>\n * Copyright (C) 2007-2008 Scott Ullrich <sullrich@gmail.com>\n * Copyright (C) 2005-2006 Bill Marquette <bill.marquette@gmail.com>\n * Copyright (C) 2006 Paul Taylor <paultaylor@winn-dixie.com>\n * Copyright (C) 2003-2006 Manuel Kasper <mk@neon1.net>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n * AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nrequire_once(\"auth.inc\");\n\n$acl = new OPNsense\\Core\\ACL();\n$priv_list = $acl->getPrivList();\n\nfunction set_language()\n{\n    global $config, $userindex;\n\n    $lang = 'en_US';\n\n    if (!empty($config['system']['language'])) {\n        $lang = $config['system']['language'];\n    }\n\n    if (\n        !empty($_SESSION['Username']) && array_key_exists($_SESSION['Username'], $userindex) &&\n        !empty($config['system']['user'][$userindex[$_SESSION['Username']]]['language'])\n    ) {\n        $lang = $config['system']['user'][$userindex[$_SESSION['Username']]]['language'];\n    }\n\n    $lang_encoding = $lang . '.UTF-8';\n    $textdomain = 'OPNsense';\n\n    putenv('LANG=' . $lang_encoding);\n    textdomain($textdomain);\n    bindtextdomain($textdomain, '/usr/local/share/locale');\n    bind_textdomain_codeset($textdomain, $lang_encoding);\n}\n\n/* DNS ReBinding attack prevention, return true when rebind detected*/\nfunction check_security_dns_rebind()\n{\n    global $config;\n    if (!isset($config['system']['webgui']['nodnsrebindcheck'])) {\n        /* either an IPv6 address with or without an alternate port */\n        if (strstr($_SERVER['HTTP_HOST'], \"]\")) {\n            $http_host_port = explode(\"]\", $_SERVER['HTTP_HOST']);\n            /* v6 address has more parts, drop the last part */\n            if (count($http_host_port) > 1) {\n                array_pop($http_host_port);\n                $http_host = str_replace([\"[\", \"]\"], \"\", implode(\":\", $http_host_port));\n            } else {\n                $http_host = str_replace([\"[\", \"]\"], \"\", implode(\":\", $http_host_port));\n            }\n        } else {\n            $http_host = explode(\":\", $_SERVER['HTTP_HOST']);\n            $http_host = $http_host[0];\n        }\n        $this_host = [\n            $config['system']['hostname'] . \".\" . $config['system']['domain'],\n            $config['system']['hostname'],\n            \"localhost\"\n        ];\n        if (!empty($config['system']['webgui']['althostnames'])) {\n            $this_host = array_merge($this_host, explode(\" \", $config['system']['webgui']['althostnames']));\n        }\n        if (is_ipaddr($http_host) || in_array($_SERVER['SERVER_ADDR'], [\"127.0.0.1\", \"::1\"])) {\n            return false;\n        } elseif (in_array(strtolower($http_host), array_map('strtolower', $this_host))) {\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\n\n/* HTTP referer detection, return true when being forwarded from an unknown referer*/\nfunction check_security_http_referer_enforcement()\n{\n    global $config;\n    if (!isset($config['system']['webgui']['nohttpreferercheck']) && isset($_SERVER['HTTP_REFERER'])) {\n        $referrer_host = str_replace([\"[\", \"]\"], \"\", parse_url($_SERVER['HTTP_REFERER'], PHP_URL_HOST));\n        $this_host = [$config['system']['hostname'] . \".\" . $config['system']['domain'], $config['system']['hostname']];\n        if (!empty($config['system']['webgui']['althostnames'])) {\n            $this_host = array_merge($this_host, explode(\" \", $config['system']['webgui']['althostnames']));\n        }\n        if ($referrer_host) {\n            if (in_array(strtolower($referrer_host), array_map('strtolower', $this_host))) {\n                return false;\n            } elseif (isAuthLocalIP($referrer_host)) {\n                return false;\n            } elseif ($referrer_host == \"127.0.0.1\" || $referrer_host == \"localhost\") {\n                // allow SSH port forwarded connections and links from localhost\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nfunction session_auth()\n{\n    global $config;\n\n    function auth_log($message, $prio = LOG_ERR)\n    {\n        openlog(\"audit\", LOG_ODELAY, LOG_AUTH);\n        log_msg($message, $prio);\n        closelog();\n        reopenlog();\n    }\n\n    if (session_status() == PHP_SESSION_NONE) {\n        // Handle HTTPS httponly and secure flags\n        $currentCookieParams = session_get_cookie_params();\n        session_set_cookie_params(\n            $currentCookieParams[\"lifetime\"],\n            $currentCookieParams[\"path\"],\n            null,\n            ($config['system']['webgui']['protocol'] == \"https\"),\n            true\n        );\n        session_start();\n    }\n\n    // Detect protocol change\n    if (!isset($_POST['login']) && !empty($_SESSION['Username']) && $_SESSION['protocol'] != $config['system']['webgui']['protocol']) {\n        session_write_close();\n        return false;\n    }\n    // check additional security measures\n    if (empty($_SESSION['Username'])) {\n        if (check_security_dns_rebind()) {\n            display_error_form(sprintf(gettext('A potential %sDNS Rebind attack%s has been detected.%sTry to access the router by IP address instead of by hostname. You can disable this check if needed under System: Settings: Administration.'), '<a href=\"http://en.wikipedia.org/wiki/DNS_rebinding\">', '</a>', '<br />'));\n            exit;\n        } elseif (check_security_http_referer_enforcement()) {\n            display_error_form(sprintf(\n                gettext('The HTTP_REFERER \"%s\" does not match the predefined settings. You can disable this check if needed under System: Settings: Administration.'),\n                html_safe($_SERVER['HTTP_REFERER'])\n            ));\n            exit;\n        }\n    }\n\n    /* Validate incoming login request */\n    if (isset($_POST['login']) && !empty($_POST['usernamefld']) && !empty($_POST['passwordfld'])) {\n        $authFactory = new \\OPNsense\\Auth\\AuthenticationFactory();\n        $is_authenticated = $authFactory->authenticate(\"WebGui\", $_POST['usernamefld'], $_POST['passwordfld']);\n\n        if ($is_authenticated) {\n            $authenticator = $authFactory->lastUsedAuth;\n            // Generate a new id to avoid session fixation\n            session_regenerate_id();\n            $_SESSION['Username'] = $authenticator->getUserName($_POST['usernamefld']);\n            $_SESSION['last_access'] = time();\n            $_SESSION['protocol'] = $config['system']['webgui']['protocol'];\n            if ($authenticator != null && $authenticator->shouldChangePassword($_SESSION['Username'], $_POST['passwordfld'])) {\n                $_SESSION['user_shouldChangePassword'] = true;\n            }\n            if (!isset($config['system']['webgui']['quietlogin'])) {\n                auth_log(sprintf(\"Successful login for user '%s' from: %s\", $_POST['usernamefld'], $_SERVER['REMOTE_ADDR']), LOG_NOTICE);\n            }\n            if (!empty($_GET['url'])) {\n                $tmp_url_parts = parse_url($_GET['url']);\n                if ($tmp_url_parts !== false) {\n                    $redir_uri = $tmp_url_parts['path'];\n                    $redir_uri .= !empty($tmp_url_parts['query']) ? \"?\" . $tmp_url_parts['query'] : \"\";\n                    $redir_uri .= !empty($tmp_url_parts['fragment']) ? \"#\" . $tmp_url_parts['fragment'] : \"\";\n                    header(url_safe(\"Location: {$redir_uri}\"));\n                }\n            } elseif (!empty($_SESSION['user_shouldChangePassword'])) {\n                header(\"Location: system_usermanager_passwordmg.php\");\n            } else {\n                if ($_SERVER['REQUEST_URI'] == \"/\") {\n                    // default landing page\n                    $acl = new OPNsense\\Core\\ACL();\n                    $url = $acl->getLandingPage($_SESSION['Username']);\n                    header(url_safe(\"Location: /{$url}\"));\n                } else {\n                    header(url_safe(\"Location: {$_SERVER['REQUEST_URI']}\"));\n                }\n            }\n            exit;\n        } else {\n            auth_log(\"Web GUI authentication error for '{$_POST['usernamefld']}' from {$_SERVER['REMOTE_ADDR']}\");\n        }\n    }\n\n    /* Show login page if they aren't logged in */\n    if (empty($_SESSION['Username'])) {\n        return false;\n    }\n\n    /* If session timeout isn't set, we don't mark sessions stale */\n    if (empty($config['system']['webgui']['session_timeout'])) {\n        /* Default to 4 hour timeout if one is not set */\n        if ($_SESSION['last_access'] < (time() - 14400)) {\n            $_GET['logout'] = true;\n            $_SESSION['Logout'] = true;\n        } else {\n            $_SESSION['last_access'] = time();\n        }\n    } else {\n        /* Check for stale session */\n        if ($_SESSION['last_access'] < (time() - ($config['system']['webgui']['session_timeout'] * 60))) {\n            $_GET['logout'] = true;\n            $_SESSION['Logout'] = true;\n        } else {\n            $_SESSION['last_access'] = time();\n        }\n    }\n\n    /* user hit the logout button */\n    if (isset($_GET['logout'])) {\n        if (isset($_SESSION['Logout'])) {\n            auth_log(sprintf(\"Session timed out for user '%s' from: %s\", $_SESSION['Username'], $_SERVER['REMOTE_ADDR']), LOG_NOTICE);\n        } else {\n            auth_log(sprintf(\"User logged out for user '%s' from: %s\", $_SESSION['Username'], $_SERVER['REMOTE_ADDR']), LOG_NOTICE);\n        }\n\n        /* wipe out $_SESSION */\n        $_SESSION = array();\n\n        if (isset($_COOKIE[session_name()])) {\n            $secure = $config['system']['webgui']['protocol'] == \"https\";\n            setcookie(session_name(), '', time() - 42000, '/', '', $secure, true);\n        }\n\n        /* and destroy it */\n        session_destroy();\n\n        header(url_safe(\"Location: /\"));\n        exit;\n    }\n\n    session_write_close();\n    return true;\n}\n\n/* Authenticate user - exit if failed */\nif (!session_auth()) {\n    set_language();\n    display_login_form(!empty($_POST['usernamefld']) ? gettext('Wrong username or password.') : null);\n    exit;\n}\n\nset_language();\n\n/*\n * redirect to first allowed page if requesting a wrong url\n */\nif ($_SERVER['REQUEST_URI'] == '/') {\n    $page = '/index.php';\n} else {\n    /* reconstruct page uri to use actual script location, mimic realpath() behaviour */\n    $page = $_SERVER['SCRIPT_NAME'];\n    $tmp_uri = parse_url($_SERVER['REQUEST_URI']);\n    if (!empty($tmp_uri['query'])) {\n        $page .= '?' . $tmp_uri['query'];\n    }\n}\nif ($_SESSION['Username'] != 'root' && !$acl->isPageAccessible($_SESSION['Username'], $page)) {\n    if (session_status() == PHP_SESSION_NONE) {\n        session_start();\n    }\n    $page = $acl->getLandingPage($_SESSION['Username']);\n    if (!empty($page)) {\n        $username = empty($_SESSION[\"Username\"]) ? \"(system)\" : $_SESSION['Username'];\n        if (!empty($_SERVER['REMOTE_ADDR'])) {\n            $username .= '@' . $_SERVER['REMOTE_ADDR'];\n        }\n        log_msg(\"{$username} attempted to access {$_SERVER['REQUEST_URI']} but does not have access to that page. Redirecting to {$page}.\");\n        header(url_safe(\"Location: /{$page}\"));\n        exit;\n    } else {\n        display_error_form(gettext('No page assigned to this user! Click here to logout.'));\n        exit;\n    }\n}\n\n/*\n * determine if the user is allowed access to the requested page\n */\nfunction display_error_form($text)\n{\n    $themename = htmlspecialchars(get_current_theme());\n    $product = product::getInstance();\n\n    ?><!doctype html>\n<html lang=\"en\" class=\"no-js\">\n  <head>\n\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\n    <meta name=\"robots\" content=\"noindex, nofollow\" />\n    <meta name=\"keywords\" content=\"\" />\n    <meta name=\"description\" content=\"\" />\n    <meta name=\"copyright\" content=\"\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, minimum-scale=1\" />\n\n    <title><?= gettext('Error') ?> | <?= $product->name() ?></title>\n\n    <link href=\"<?= cache_safe(\"/ui/themes/{$themename}/build/css/main.css\") ?>\" rel=\"stylesheet\">\n    <link href=\"<?= cache_safe(\"/ui/themes/{$themename}/build/images/favicon.png\") ?>\" rel=\"shortcut icon\">\n\n    <script src=\"/ui/js/jquery-3.5.1.min.js\"></script>\n\n  </head>\n  <body class=\"page-login\">\n    <div id=container\">\n      <p>&nbsp;</p>\n      <p style=\"text-align: center;\">\n        <a href=\"/index.php?logout\"><?= $text ?></a>\n      </p>\n    </div>\n  </body>\n</html>\n<?php }\n\nfunction display_login_form($Login_Error)\n{\n    global $config;\n\n    $themename = htmlspecialchars(get_current_theme());\n    $product = product::getInstance();\n\n    setcookie(\"cookie_test\", bin2hex(random_bytes(16)), time() + 3600, '/', '', $config['system']['webgui']['protocol'] == 'https', true);\n    $have_cookies = isset($_COOKIE[\"cookie_test\"]);\n    ?><!doctype html>\n<html lang=\"en\" class=\"no-js\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\n    <meta name=\"robots\" content=\"noindex, nofollow\" />\n    <meta name=\"keywords\" content=\"\" />\n    <meta name=\"description\" content=\"\" />\n    <meta name=\"copyright\" content=\"\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, minimum-scale=1\" />\n\n    <title><?= gettext('Login') ?> | <?= $product->name() ?></title>\n\n    <link href=\"<?= cache_safe(\"/ui/themes/{$themename}/build/css/main.css\") ?>\" rel=\"stylesheet\">\n    <link href=\"<?= cache_safe(\"/ui/themes/{$themename}/build/images/favicon.png\") ?>\" rel=\"shortcut icon\">\n\n    <script src=\"/ui/js/jquery-3.5.1.min.js\"></script>\n\n    <?php if (file_exists(\"/usr/local/opnsense/www/themes/{$themename}/build/js/theme.js\")) : ?>\n    <script src=\"<?= cache_safe(\"/ui/themes/{$themename}/build/js/theme.js\") ?>\"></script>\n    <?php endif ?>\n\n  </head>\n  <body class=\"page-login\">\n\n  <div class=\"container\">\n    <main class=\"login-modal-container\">\n      <header class=\"login-modal-head\" style=\"height:50px;\">\n        <div class=\"navbar-brand\">\n    <?php if (file_exists(\"/usr/local/opnsense/www/themes/{$themename}/build/images/default-logo.svg\")) : ?>\n          <img src=\"<?= cache_safe(\"/ui/themes/{$themename}/build/images/default-logo.svg\") ?>\" height=\"30\" alt=\"logo\" />\n    <?php else : ?>\n          <img src=\"<?= cache_safe(\"/ui/themes/{$themename}/build/images/default-logo.png\") ?>\" height=\"30\" alt=\"logo\" />\n    <?php endif ?>\n        </div>\n      </header>\n\n      <div class=\"login-modal-content\">\n        <div id=\"inputerrors\" class=\"text-danger\"><?= !empty($Login_Error) ? $Login_Error : '&nbsp;' ?></div><br />\n\n            <form class=\"clearfix\" id=\"iform\" name=\"iform\" method=\"post\" autocomplete=\"off\">\n\n        <div class=\"form-group\">\n          <label for=\"usernamefld\"><?=gettext(\"Username:\"); ?></label>\n          <input id=\"usernamefld\" type=\"text\" name=\"usernamefld\" class=\"form-control user\" tabindex=\"1\" autofocus=\"autofocus\" autocapitalize=\"off\" autocorrect=\"off\" />\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"passwordfld\"><?=gettext(\"Password:\"); ?></label>\n          <input id=\"passwordfld\" type=\"password\" name=\"passwordfld\" class=\"form-control pwd\" tabindex=\"2\" />\n        </div>\n\n        <button type=\"submit\" name=\"login\" value=\"1\" class=\"btn btn-primary pull-right\"><?=gettext(\"Login\"); ?></button>\n\n      </form>\n\n      <?php if (!$have_cookies && isset($_POST['login'])) : ?>\n        <br /><br />\n        <span class=\"text-danger\">\n            <?= gettext(\"Your browser must support cookies to login.\"); ?>\n        </span>\n      <?php endif; ?>\n\n          </div>\n\n      </main>\n      <div class=\"login-foot text-center\">\n        <a target=\"_blank\" href=\"<?= $product->website() ?>\"><?= $product->name() ?></a> (c) <?= $product->copyright_years() ?>\n        <a target=\"_blank\" href=\"<?= $product->copyright_url() ?>\"><?= $product->copyright_owner() ?></a>\n      </div>\n\n    </div>\n\n    </body>\n  </html>\n<?php }\n"], "fixing_code": ["<?php\n\n/*\n * Copyright (C) 2008 Shrew Soft Inc. <mgrooms@shrew.net>\n * Copyright (C) 2007-2008 Scott Ullrich <sullrich@gmail.com>\n * Copyright (C) 2005-2006 Bill Marquette <bill.marquette@gmail.com>\n * Copyright (C) 2006 Paul Taylor <paultaylor@winn-dixie.com>\n * Copyright (C) 2003-2006 Manuel Kasper <mk@neon1.net>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n * AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nrequire_once(\"auth.inc\");\n\n$acl = new OPNsense\\Core\\ACL();\n$priv_list = $acl->getPrivList();\n\nfunction set_language()\n{\n    global $config, $userindex;\n\n    $lang = 'en_US';\n\n    if (!empty($config['system']['language'])) {\n        $lang = $config['system']['language'];\n    }\n\n    if (\n        !empty($_SESSION['Username']) && array_key_exists($_SESSION['Username'], $userindex) &&\n        !empty($config['system']['user'][$userindex[$_SESSION['Username']]]['language'])\n    ) {\n        $lang = $config['system']['user'][$userindex[$_SESSION['Username']]]['language'];\n    }\n\n    $lang_encoding = $lang . '.UTF-8';\n    $textdomain = 'OPNsense';\n\n    putenv('LANG=' . $lang_encoding);\n    textdomain($textdomain);\n    bindtextdomain($textdomain, '/usr/local/share/locale');\n    bind_textdomain_codeset($textdomain, $lang_encoding);\n}\n\n/* DNS ReBinding attack prevention, return true when rebind detected*/\nfunction check_security_dns_rebind()\n{\n    global $config;\n    if (!isset($config['system']['webgui']['nodnsrebindcheck'])) {\n        /* either an IPv6 address with or without an alternate port */\n        if (strstr($_SERVER['HTTP_HOST'], \"]\")) {\n            $http_host_port = explode(\"]\", $_SERVER['HTTP_HOST']);\n            /* v6 address has more parts, drop the last part */\n            if (count($http_host_port) > 1) {\n                array_pop($http_host_port);\n                $http_host = str_replace([\"[\", \"]\"], \"\", implode(\":\", $http_host_port));\n            } else {\n                $http_host = str_replace([\"[\", \"]\"], \"\", implode(\":\", $http_host_port));\n            }\n        } else {\n            $http_host = explode(\":\", $_SERVER['HTTP_HOST']);\n            $http_host = $http_host[0];\n        }\n        $this_host = [\n            $config['system']['hostname'] . \".\" . $config['system']['domain'],\n            $config['system']['hostname'],\n            \"localhost\"\n        ];\n        if (!empty($config['system']['webgui']['althostnames'])) {\n            $this_host = array_merge($this_host, explode(\" \", $config['system']['webgui']['althostnames']));\n        }\n        if (is_ipaddr($http_host) || in_array($_SERVER['SERVER_ADDR'], [\"127.0.0.1\", \"::1\"])) {\n            return false;\n        } elseif (in_array(strtolower($http_host), array_map('strtolower', $this_host))) {\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\n\n/* HTTP referer detection, return true when being forwarded from an unknown referer*/\nfunction check_security_http_referer_enforcement()\n{\n    global $config;\n    if (!isset($config['system']['webgui']['nohttpreferercheck']) && isset($_SERVER['HTTP_REFERER'])) {\n        $referrer_host = str_replace([\"[\", \"]\"], \"\", parse_url($_SERVER['HTTP_REFERER'], PHP_URL_HOST));\n        $this_host = [$config['system']['hostname'] . \".\" . $config['system']['domain'], $config['system']['hostname']];\n        if (!empty($config['system']['webgui']['althostnames'])) {\n            $this_host = array_merge($this_host, explode(\" \", $config['system']['webgui']['althostnames']));\n        }\n        if ($referrer_host) {\n            if (in_array(strtolower($referrer_host), array_map('strtolower', $this_host))) {\n                return false;\n            } elseif (isAuthLocalIP($referrer_host)) {\n                return false;\n            } elseif ($referrer_host == \"127.0.0.1\" || $referrer_host == \"localhost\") {\n                // allow SSH port forwarded connections and links from localhost\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nfunction session_auth()\n{\n    global $config;\n\n    function auth_log($message, $prio = LOG_ERR)\n    {\n        openlog(\"audit\", LOG_ODELAY, LOG_AUTH);\n        log_msg($message, $prio);\n        closelog();\n        reopenlog();\n    }\n\n    if (session_status() == PHP_SESSION_NONE) {\n        // Handle HTTPS httponly and secure flags\n        $currentCookieParams = session_get_cookie_params();\n        session_set_cookie_params(\n            $currentCookieParams[\"lifetime\"],\n            $currentCookieParams[\"path\"],\n            null,\n            ($config['system']['webgui']['protocol'] == \"https\"),\n            true\n        );\n        session_start();\n    }\n\n    // Detect protocol change\n    if (!isset($_POST['login']) && !empty($_SESSION['Username']) && $_SESSION['protocol'] != $config['system']['webgui']['protocol']) {\n        session_write_close();\n        return false;\n    }\n    // check additional security measures\n    if (empty($_SESSION['Username'])) {\n        if (check_security_dns_rebind()) {\n            display_error_form(sprintf(gettext('A potential %sDNS Rebind attack%s has been detected.%sTry to access the router by IP address instead of by hostname. You can disable this check if needed under System: Settings: Administration.'), '<a href=\"http://en.wikipedia.org/wiki/DNS_rebinding\">', '</a>', '<br />'));\n            exit;\n        } elseif (check_security_http_referer_enforcement()) {\n            display_error_form(sprintf(\n                gettext('The HTTP_REFERER \"%s\" does not match the predefined settings. You can disable this check if needed under System: Settings: Administration.'),\n                html_safe($_SERVER['HTTP_REFERER'])\n            ));\n            exit;\n        }\n    }\n\n    /* Validate incoming login request */\n    if (isset($_POST['login']) && !empty($_POST['usernamefld']) && !empty($_POST['passwordfld'])) {\n        $authFactory = new \\OPNsense\\Auth\\AuthenticationFactory();\n        $is_authenticated = $authFactory->authenticate(\"WebGui\", $_POST['usernamefld'], $_POST['passwordfld']);\n\n        if ($is_authenticated) {\n            $authenticator = $authFactory->lastUsedAuth;\n            // Generate a new id to avoid session fixation\n            session_regenerate_id();\n            $_SESSION['Username'] = $authenticator->getUserName($_POST['usernamefld']);\n            $_SESSION['last_access'] = time();\n            $_SESSION['protocol'] = $config['system']['webgui']['protocol'];\n            if ($authenticator != null && $authenticator->shouldChangePassword($_SESSION['Username'], $_POST['passwordfld'])) {\n                $_SESSION['user_shouldChangePassword'] = true;\n            }\n            if (!isset($config['system']['webgui']['quietlogin'])) {\n                auth_log(sprintf(\"Successful login for user '%s' from: %s\", $_POST['usernamefld'], $_SERVER['REMOTE_ADDR']), LOG_NOTICE);\n            }\n            if (!empty($_GET['url'])) {\n                $tmp_url_parts = parse_url($_GET['url']);\n                if ($tmp_url_parts !== false) {\n                    $redir_uri = sprintf(\n                        '%s://%s/%s',\n                        isset($_SERVER['HTTPS']) ? 'https' : 'http',\n                        $_SERVER['HTTP_HOST'],\n                        ltrim($tmp_url_parts['path'], '/')\n                    );\n                    $redir_uri .= !empty($tmp_url_parts['query']) ? \"?\" . $tmp_url_parts['query'] : \"\";\n                    $redir_uri .= !empty($tmp_url_parts['fragment']) ? \"#\" . $tmp_url_parts['fragment'] : \"\";\n                    header(url_safe(\"Location: {$redir_uri}\"));\n                }\n            } elseif (!empty($_SESSION['user_shouldChangePassword'])) {\n                header(\"Location: system_usermanager_passwordmg.php\");\n            } else {\n                if ($_SERVER['REQUEST_URI'] == \"/\") {\n                    // default landing page\n                    $acl = new OPNsense\\Core\\ACL();\n                    $url = $acl->getLandingPage($_SESSION['Username']);\n                    header(url_safe(\"Location: /{$url}\"));\n                } else {\n                    header(url_safe(\"Location: {$_SERVER['REQUEST_URI']}\"));\n                }\n            }\n            exit;\n        } else {\n            auth_log(\"Web GUI authentication error for '{$_POST['usernamefld']}' from {$_SERVER['REMOTE_ADDR']}\");\n        }\n    }\n\n    /* Show login page if they aren't logged in */\n    if (empty($_SESSION['Username'])) {\n        return false;\n    }\n\n    /* If session timeout isn't set, we don't mark sessions stale */\n    if (empty($config['system']['webgui']['session_timeout'])) {\n        /* Default to 4 hour timeout if one is not set */\n        if ($_SESSION['last_access'] < (time() - 14400)) {\n            $_GET['logout'] = true;\n            $_SESSION['Logout'] = true;\n        } else {\n            $_SESSION['last_access'] = time();\n        }\n    } else {\n        /* Check for stale session */\n        if ($_SESSION['last_access'] < (time() - ($config['system']['webgui']['session_timeout'] * 60))) {\n            $_GET['logout'] = true;\n            $_SESSION['Logout'] = true;\n        } else {\n            $_SESSION['last_access'] = time();\n        }\n    }\n\n    /* user hit the logout button */\n    if (isset($_GET['logout'])) {\n        if (isset($_SESSION['Logout'])) {\n            auth_log(sprintf(\"Session timed out for user '%s' from: %s\", $_SESSION['Username'], $_SERVER['REMOTE_ADDR']), LOG_NOTICE);\n        } else {\n            auth_log(sprintf(\"User logged out for user '%s' from: %s\", $_SESSION['Username'], $_SERVER['REMOTE_ADDR']), LOG_NOTICE);\n        }\n\n        /* wipe out $_SESSION */\n        $_SESSION = array();\n\n        if (isset($_COOKIE[session_name()])) {\n            $secure = $config['system']['webgui']['protocol'] == \"https\";\n            setcookie(session_name(), '', time() - 42000, '/', '', $secure, true);\n        }\n\n        /* and destroy it */\n        session_destroy();\n\n        header(url_safe(\"Location: /\"));\n        exit;\n    }\n\n    session_write_close();\n    return true;\n}\n\n/* Authenticate user - exit if failed */\nif (!session_auth()) {\n    set_language();\n    display_login_form(!empty($_POST['usernamefld']) ? gettext('Wrong username or password.') : null);\n    exit;\n}\n\nset_language();\n\n/*\n * redirect to first allowed page if requesting a wrong url\n */\nif ($_SERVER['REQUEST_URI'] == '/') {\n    $page = '/index.php';\n} else {\n    /* reconstruct page uri to use actual script location, mimic realpath() behaviour */\n    $page = $_SERVER['SCRIPT_NAME'];\n    $tmp_uri = parse_url($_SERVER['REQUEST_URI']);\n    if (!empty($tmp_uri['query'])) {\n        $page .= '?' . $tmp_uri['query'];\n    }\n}\nif ($_SESSION['Username'] != 'root' && !$acl->isPageAccessible($_SESSION['Username'], $page)) {\n    if (session_status() == PHP_SESSION_NONE) {\n        session_start();\n    }\n    $page = $acl->getLandingPage($_SESSION['Username']);\n    if (!empty($page)) {\n        $username = empty($_SESSION[\"Username\"]) ? \"(system)\" : $_SESSION['Username'];\n        if (!empty($_SERVER['REMOTE_ADDR'])) {\n            $username .= '@' . $_SERVER['REMOTE_ADDR'];\n        }\n        log_msg(\"{$username} attempted to access {$_SERVER['REQUEST_URI']} but does not have access to that page. Redirecting to {$page}.\");\n        header(url_safe(\"Location: /{$page}\"));\n        exit;\n    } else {\n        display_error_form(gettext('No page assigned to this user! Click here to logout.'));\n        exit;\n    }\n}\n\n/*\n * determine if the user is allowed access to the requested page\n */\nfunction display_error_form($text)\n{\n    $themename = htmlspecialchars(get_current_theme());\n    $product = product::getInstance();\n\n    ?><!doctype html>\n<html lang=\"en\" class=\"no-js\">\n  <head>\n\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\n    <meta name=\"robots\" content=\"noindex, nofollow\" />\n    <meta name=\"keywords\" content=\"\" />\n    <meta name=\"description\" content=\"\" />\n    <meta name=\"copyright\" content=\"\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, minimum-scale=1\" />\n\n    <title><?= gettext('Error') ?> | <?= $product->name() ?></title>\n\n    <link href=\"<?= cache_safe(\"/ui/themes/{$themename}/build/css/main.css\") ?>\" rel=\"stylesheet\">\n    <link href=\"<?= cache_safe(\"/ui/themes/{$themename}/build/images/favicon.png\") ?>\" rel=\"shortcut icon\">\n\n    <script src=\"/ui/js/jquery-3.5.1.min.js\"></script>\n\n  </head>\n  <body class=\"page-login\">\n    <div id=container\">\n      <p>&nbsp;</p>\n      <p style=\"text-align: center;\">\n        <a href=\"/index.php?logout\"><?= $text ?></a>\n      </p>\n    </div>\n  </body>\n</html>\n<?php }\n\nfunction display_login_form($Login_Error)\n{\n    global $config;\n\n    $themename = htmlspecialchars(get_current_theme());\n    $product = product::getInstance();\n\n    setcookie(\"cookie_test\", bin2hex(random_bytes(16)), time() + 3600, '/', '', $config['system']['webgui']['protocol'] == 'https', true);\n    $have_cookies = isset($_COOKIE[\"cookie_test\"]);\n    ?><!doctype html>\n<html lang=\"en\" class=\"no-js\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\n    <meta name=\"robots\" content=\"noindex, nofollow\" />\n    <meta name=\"keywords\" content=\"\" />\n    <meta name=\"description\" content=\"\" />\n    <meta name=\"copyright\" content=\"\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, minimum-scale=1\" />\n\n    <title><?= gettext('Login') ?> | <?= $product->name() ?></title>\n\n    <link href=\"<?= cache_safe(\"/ui/themes/{$themename}/build/css/main.css\") ?>\" rel=\"stylesheet\">\n    <link href=\"<?= cache_safe(\"/ui/themes/{$themename}/build/images/favicon.png\") ?>\" rel=\"shortcut icon\">\n\n    <script src=\"/ui/js/jquery-3.5.1.min.js\"></script>\n\n    <?php if (file_exists(\"/usr/local/opnsense/www/themes/{$themename}/build/js/theme.js\")) : ?>\n    <script src=\"<?= cache_safe(\"/ui/themes/{$themename}/build/js/theme.js\") ?>\"></script>\n    <?php endif ?>\n\n  </head>\n  <body class=\"page-login\">\n\n  <div class=\"container\">\n    <main class=\"login-modal-container\">\n      <header class=\"login-modal-head\" style=\"height:50px;\">\n        <div class=\"navbar-brand\">\n    <?php if (file_exists(\"/usr/local/opnsense/www/themes/{$themename}/build/images/default-logo.svg\")) : ?>\n          <img src=\"<?= cache_safe(\"/ui/themes/{$themename}/build/images/default-logo.svg\") ?>\" height=\"30\" alt=\"logo\" />\n    <?php else : ?>\n          <img src=\"<?= cache_safe(\"/ui/themes/{$themename}/build/images/default-logo.png\") ?>\" height=\"30\" alt=\"logo\" />\n    <?php endif ?>\n        </div>\n      </header>\n\n      <div class=\"login-modal-content\">\n        <div id=\"inputerrors\" class=\"text-danger\"><?= !empty($Login_Error) ? $Login_Error : '&nbsp;' ?></div><br />\n\n            <form class=\"clearfix\" id=\"iform\" name=\"iform\" method=\"post\" autocomplete=\"off\">\n\n        <div class=\"form-group\">\n          <label for=\"usernamefld\"><?=gettext(\"Username:\"); ?></label>\n          <input id=\"usernamefld\" type=\"text\" name=\"usernamefld\" class=\"form-control user\" tabindex=\"1\" autofocus=\"autofocus\" autocapitalize=\"off\" autocorrect=\"off\" />\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"passwordfld\"><?=gettext(\"Password:\"); ?></label>\n          <input id=\"passwordfld\" type=\"password\" name=\"passwordfld\" class=\"form-control pwd\" tabindex=\"2\" />\n        </div>\n\n        <button type=\"submit\" name=\"login\" value=\"1\" class=\"btn btn-primary pull-right\"><?=gettext(\"Login\"); ?></button>\n\n      </form>\n\n      <?php if (!$have_cookies && isset($_POST['login'])) : ?>\n        <br /><br />\n        <span class=\"text-danger\">\n            <?= gettext(\"Your browser must support cookies to login.\"); ?>\n        </span>\n      <?php endif; ?>\n\n          </div>\n\n      </main>\n      <div class=\"login-foot text-center\">\n        <a target=\"_blank\" href=\"<?= $product->website() ?>\"><?= $product->name() ?></a> (c) <?= $product->copyright_years() ?>\n        <a target=\"_blank\" href=\"<?= $product->copyright_url() ?>\"><?= $product->copyright_owner() ?></a>\n      </div>\n\n    </div>\n\n    </body>\n  </html>\n<?php }\n"], "filenames": ["src/etc/inc/authgui.inc"], "buggy_code_start_loc": [191], "buggy_code_end_loc": [192], "fixing_code_start_loc": [191], "fixing_code_end_loc": [197], "type": "CWE-601", "message": "An open redirect in the Login page of OPNsense Community Edition before 23.7 and Business Edition before 23.4.2 allows attackers to redirect a victim user to an arbitrary web site via a crafted URL.", "other": {"cve": {"id": "CVE-2023-38998", "sourceIdentifier": "cve@mitre.org", "published": "2023-08-09T19:15:14.660", "lastModified": "2023-10-10T23:15:10.107", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "An open redirect in the Login page of OPNsense Community Edition before 23.7 and Business Edition before 23.4.2 allows attackers to redirect a victim user to an arbitrary web site via a crafted URL."}, {"lang": "es", "value": "Una redirecci\u00f3n abierta en la p\u00e1gina de inicio de sesi\u00f3n de OPNsense Community Edition antes de 23.7 y Business Edition antes de 23.4.2 permite a los atacantes redirigir a un usuario v\u00edctima a un sitio web arbitrario a trav\u00e9s de una URL manipulada.\n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opnsense:opnsense:*:*:*:*:*:*:*:*", "versionEndExcluding": "23.7", "matchCriteriaId": "E4C1BDFF-B6E1-4F82-9957-1FFA069E2EDC"}]}]}], "references": [{"url": "https://github.com/opnsense/core/commit/6bc025af1705dcdd8ef22ff5d4fcb986fa4e45f8", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://logicaltrust.net/blog/2023/08/opnsense.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/opnsense/core/commit/6bc025af1705dcdd8ef22ff5d4fcb986fa4e45f8"}}