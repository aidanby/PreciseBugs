{"buggy_code": ["# frozen_string_literal: true\nrequire 'webrick'\nrequire 'zlib'\nrequire 'erb'\nrequire 'uri'\n\nrequire 'rubygems'\nrequire 'rubygems/rdoc'\n\n##\n# Gem::Server and allows users to serve gems for consumption by\n# `gem --remote-install`.\n#\n# gem_server starts an HTTP server on the given port and serves the following:\n# * \"/\" - Browsing of gem spec files for installed gems\n# * \"/specs.#{Gem.marshal_version}.gz\" - specs name/version/platform index\n# * \"/latest_specs.#{Gem.marshal_version}.gz\" - latest specs\n#   name/version/platform index\n# * \"/quick/\" - Individual gemspecs\n# * \"/gems\" - Direct access to download the installable gems\n# * \"/rdoc?q=\" - Search for installed rdoc documentation\n#\n# == Usage\n#\n#   gem_server = Gem::Server.new Gem.dir, 8089, false\n#   gem_server.run\n#\n#--\n# TODO Refactor into a real WEBrick servlet to remove code duplication.\n\nclass Gem::Server\n\n  attr_reader :spec_dirs\n\n  include ERB::Util\n  include Gem::UserInteraction\n\n  SEARCH = <<-ERB\n      <form class=\"headerSearch\" name=\"headerSearchForm\" method=\"get\" action=\"/rdoc\">\n        <div id=\"search\" style=\"float:right\">\n          <label for=\"q\">Filter/Search</label>\n          <input id=\"q\" type=\"text\" style=\"width:10em\" name=\"q\">\n          <button type=\"submit\" style=\"display:none\"></button>\n        </div>\n      </form>\n  ERB\n\n  DOC_TEMPLATE = <<-'ERB'\n  <?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n  <!DOCTYPE html\n       PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n       \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n  <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n  <head>\n    <title>RubyGems Documentation Index</title>\n    <link rel=\"stylesheet\" href=\"gem-server-rdoc-style.css\" type=\"text/css\" media=\"screen\" />\n  </head>\n  <body>\n    <div id=\"fileHeader\">\n<%= SEARCH %>\n      <h1>RubyGems Documentation Index</h1>\n    </div>\n    <!-- banner header -->\n\n  <div id=\"bodyContent\">\n    <div id=\"contextContent\">\n      <div id=\"description\">\n        <h1>Summary</h1>\n  <p>There are <%=values[\"gem_count\"]%> gems installed:</p>\n  <p>\n  <%= values[\"specs\"].map { |v| \"<a href=\\\"##{u v[\"name\"]}\\\">#{h v[\"name\"]}</a>\" }.join ', ' %>.\n  <h1>Gems</h1>\n\n  <dl>\n  <% values[\"specs\"].each do |spec| %>\n    <dt>\n    <% if spec[\"first_name_entry\"] then %>\n      <a name=\"<%=h spec[\"name\"]%>\"></a>\n    <% end %>\n\n    <b><%=h spec[\"name\"]%> <%=h spec[\"version\"]%></b>\n\n    <% if spec[\"ri_installed\"] || spec[\"rdoc_installed\"] then %>\n      <a href=\"<%=spec[\"doc_path\"]%>\">[rdoc]</a>\n    <% else %>\n      <span title=\"rdoc not installed\">[rdoc]</span>\n    <% end %>\n\n    <% if spec[\"homepage\"] then %>\n      <a href=\"<%=uri_encode spec[\"homepage\"]%>\" title=\"<%=h spec[\"homepage\"]%>\">[www]</a>\n    <% else %>\n      <span title=\"no homepage available\">[www]</span>\n    <% end %>\n\n    <% if spec[\"has_deps\"] then %>\n     - depends on\n      <%= spec[\"dependencies\"].map { |v| \"<a href=\\\"##{u v[\"name\"]}\\\">#{h v[\"name\"]}</a>\" }.join ', ' %>.\n    <% end %>\n    </dt>\n    <dd>\n    <%=spec[\"summary\"]%>\n    <% if spec[\"executables\"] then %>\n      <br/>\n\n      <% if spec[\"only_one_executable\"] then %>\n          Executable is\n      <% else %>\n          Executables are\n      <%end%>\n\n      <%= spec[\"executables\"].map { |v| \"<span class=\\\"context-item-name\\\">#{h v[\"executable\"]}</span>\"}.join ', ' %>.\n\n    <%end%>\n    <br/>\n    <br/>\n    </dd>\n  <% end %>\n  </dl>\n\n      </div>\n     </div>\n    </div>\n  <div id=\"validator-badges\">\n    <p><small><a href=\"http://validator.w3.org/check/referer\">[Validate]</a></small></p>\n  </div>\n  </body>\n  </html>\n  ERB\n\n  # CSS is copy & paste from rdoc-style.css, RDoc V1.0.1 - 20041108\n  RDOC_CSS = <<-CSS\nbody {\n    font-family: Verdana,Arial,Helvetica,sans-serif;\n    font-size:   90%;\n    margin: 0;\n    margin-left: 40px;\n    padding: 0;\n    background: white;\n}\n\nh1,h2,h3,h4 { margin: 0; color: #efefef; background: transparent; }\nh1 { font-size: 150%; }\nh2,h3,h4 { margin-top: 1em; }\n\na { background: #eef; color: #039; text-decoration: none; }\na:hover { background: #039; color: #eef; }\n\n/* Override the base stylesheets Anchor inside a table cell */\ntd > a {\n  background: transparent;\n  color: #039;\n  text-decoration: none;\n}\n\n/* and inside a section title */\n.section-title > a {\n  background: transparent;\n  color: #eee;\n  text-decoration: none;\n}\n\n/* === Structural elements =================================== */\n\ndiv#index {\n    margin: 0;\n    margin-left: -40px;\n    padding: 0;\n    font-size: 90%;\n}\n\n\ndiv#index a {\n    margin-left: 0.7em;\n}\n\ndiv#index .section-bar {\n   margin-left: 0px;\n   padding-left: 0.7em;\n   background: #ccc;\n   font-size: small;\n}\n\n\ndiv#classHeader, div#fileHeader {\n    width: auto;\n    color: white;\n    padding: 0.5em 1.5em 0.5em 1.5em;\n    margin: 0;\n    margin-left: -40px;\n    border-bottom: 3px solid #006;\n}\n\ndiv#classHeader a, div#fileHeader a {\n    background: inherit;\n    color: white;\n}\n\ndiv#classHeader td, div#fileHeader td {\n    background: inherit;\n    color: white;\n}\n\n\ndiv#fileHeader {\n    background: #057;\n}\n\ndiv#classHeader {\n    background: #048;\n}\n\n\n.class-name-in-header {\n  font-size:  180%;\n  font-weight: bold;\n}\n\n\ndiv#bodyContent {\n    padding: 0 1.5em 0 1.5em;\n}\n\ndiv#description {\n    padding: 0.5em 1.5em;\n    background: #efefef;\n    border: 1px dotted #999;\n}\n\ndiv#description h1,h2,h3,h4,h5,h6 {\n    color: #125;;\n    background: transparent;\n}\n\ndiv#validator-badges {\n    text-align: center;\n}\ndiv#validator-badges img { border: 0; }\n\ndiv#copyright {\n    color: #333;\n    background: #efefef;\n    font: 0.75em sans-serif;\n    margin-top: 5em;\n    margin-bottom: 0;\n    padding: 0.5em 2em;\n}\n\n\n/* === Classes =================================== */\n\ntable.header-table {\n    color: white;\n    font-size: small;\n}\n\n.type-note {\n    font-size: small;\n    color: #DEDEDE;\n}\n\n.xxsection-bar {\n    background: #eee;\n    color: #333;\n    padding: 3px;\n}\n\n.section-bar {\n   color: #333;\n   border-bottom: 1px solid #999;\n    margin-left: -20px;\n}\n\n\n.section-title {\n    background: #79a;\n    color: #eee;\n    padding: 3px;\n    margin-top: 2em;\n    margin-left: -30px;\n    border: 1px solid #999;\n}\n\n.top-aligned-row {  vertical-align: top }\n.bottom-aligned-row { vertical-align: bottom }\n\n/* --- Context section classes ----------------------- */\n\n.context-row { }\n.context-item-name { font-family: monospace; font-weight: bold; color: black; }\n.context-item-value { font-size: small; color: #448; }\n.context-item-desc { color: #333; padding-left: 2em; }\n\n/* --- Method classes -------------------------- */\n.method-detail {\n    background: #efefef;\n    padding: 0;\n    margin-top: 0.5em;\n    margin-bottom: 1em;\n    border: 1px dotted #ccc;\n}\n.method-heading {\n  color: black;\n  background: #ccc;\n  border-bottom: 1px solid #666;\n  padding: 0.2em 0.5em 0 0.5em;\n}\n.method-signature { color: black; background: inherit; }\n.method-name { font-weight: bold; }\n.method-args { font-style: italic; }\n.method-description { padding: 0 0.5em 0 0.5em; }\n\n/* --- Source code sections -------------------- */\n\na.source-toggle { font-size: 90%; }\ndiv.method-source-code {\n    background: #262626;\n    color: #ffdead;\n    margin: 1em;\n    padding: 0.5em;\n    border: 1px dashed #999;\n    overflow: hidden;\n}\n\ndiv.method-source-code pre { color: #ffdead; overflow: hidden; }\n\n/* --- Ruby keyword styles --------------------- */\n\n.standalone-code { background: #221111; color: #ffdead; overflow: hidden; }\n\n.ruby-constant  { color: #7fffd4; background: transparent; }\n.ruby-keyword { color: #00ffff; background: transparent; }\n.ruby-ivar    { color: #eedd82; background: transparent; }\n.ruby-operator  { color: #00ffee; background: transparent; }\n.ruby-identifier { color: #ffdead; background: transparent; }\n.ruby-node    { color: #ffa07a; background: transparent; }\n.ruby-comment { color: #b22222; font-weight: bold; background: transparent; }\n.ruby-regexp  { color: #ffa07a; background: transparent; }\n.ruby-value   { color: #7fffd4; background: transparent; }\n  CSS\n\n  RDOC_NO_DOCUMENTATION = <<-'ERB'\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n  <head>\n    <title>Found documentation</title>\n    <link rel=\"stylesheet\" href=\"gem-server-rdoc-style.css\" type=\"text/css\" media=\"screen\" />\n  </head>\n  <body>\n    <div id=\"fileHeader\">\n<%= SEARCH %>\n      <h1>No documentation found</h1>\n    </div>\n\n    <div id=\"bodyContent\">\n      <div id=\"contextContent\">\n        <div id=\"description\">\n          <p>No gems matched <%= h query.inspect %></p>\n\n          <p>\n            Back to <a href=\"/\">complete gem index</a>\n          </p>\n\n        </div>\n      </div>\n    </div>\n    <div id=\"validator-badges\">\n      <p><small><a href=\"http://validator.w3.org/check/referer\">[Validate]</a></small></p>\n    </div>\n  </body>\n</html>\n  ERB\n\n  RDOC_SEARCH_TEMPLATE = <<-'ERB'\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n  <head>\n    <title>Found documentation</title>\n    <link rel=\"stylesheet\" href=\"gem-server-rdoc-style.css\" type=\"text/css\" media=\"screen\" />\n  </head>\n  <body>\n    <div id=\"fileHeader\">\n<%= SEARCH %>\n      <h1>Found documentation</h1>\n    </div>\n    <!-- banner header -->\n\n    <div id=\"bodyContent\">\n      <div id=\"contextContent\">\n        <div id=\"description\">\n          <h1>Summary</h1>\n          <p><%=doc_items.length%> documentation topics found.</p>\n          <h1>Topics</h1>\n\n          <dl>\n          <% doc_items.each do |doc_item| %>\n            <dt>\n              <b><%=doc_item[:name]%></b>\n              <a href=\"<%=u doc_item[:url]%>\">[rdoc]</a>\n            </dt>\n            <dd>\n              <%=h doc_item[:summary]%>\n              <br/>\n              <br/>\n            </dd>\n          <% end %>\n          </dl>\n\n          <p>\n            Back to <a href=\"/\">complete gem index</a>\n          </p>\n\n        </div>\n      </div>\n    </div>\n    <div id=\"validator-badges\">\n      <p><small><a href=\"http://validator.w3.org/check/referer\">[Validate]</a></small></p>\n    </div>\n  </body>\n</html>\n  ERB\n\n  def self.run(options)\n    new(options[:gemdir], options[:port], options[:daemon],\n        options[:launch], options[:addresses]).run\n  end\n\n  def initialize(gem_dirs, port, daemon, launch = nil, addresses = nil)\n    Gem::RDoc.load_rdoc\n    Socket.do_not_reverse_lookup = true\n\n    @gem_dirs  = Array gem_dirs\n    @port      = port\n    @daemon    = daemon\n    @launch    = launch\n    @addresses = addresses\n\n    logger  = WEBrick::Log.new nil, WEBrick::BasicLog::FATAL\n    @server = WEBrick::HTTPServer.new :DoNotListen => true, :Logger => logger\n\n    @spec_dirs = @gem_dirs.map { |gem_dir| File.join gem_dir, 'specifications' }\n    @spec_dirs.reject! { |spec_dir| !File.directory? spec_dir }\n\n    reset_gems\n\n    @have_rdoc_4_plus = nil\n  end\n\n  def add_date res\n    res['date'] = @spec_dirs.map do |spec_dir|\n      File.stat(spec_dir).mtime\n    end.max\n  end\n\n  def uri_encode(str)\n    str.gsub(URI::UNSAFE) do |match|\n      match.each_byte.map { |c| sprintf('%%%02X', c.ord) }.join\n    end\n  end\n\n  def doc_root gem_name\n    if have_rdoc_4_plus? then\n      \"/doc_root/#{u gem_name}/\"\n    else\n      \"/doc_root/#{u gem_name}/rdoc/index.html\"\n    end\n  end\n\n  def have_rdoc_4_plus?\n    @have_rdoc_4_plus ||=\n      Gem::Requirement.new('>= 4.0.0.preview2').satisfied_by? Gem::RDoc.rdoc_version\n  end\n\n  def latest_specs(req, res)\n    reset_gems\n\n    res['content-type'] = 'application/x-gzip'\n\n    add_date res\n\n    latest_specs = Gem::Specification.latest_specs\n\n    specs = latest_specs.sort.map do |spec|\n      platform = spec.original_platform || Gem::Platform::RUBY\n      [spec.name, spec.version, platform]\n    end\n\n    specs = Marshal.dump specs\n\n    if req.path =~ /\\.gz$/ then\n      specs = Gem.gzip specs\n      res['content-type'] = 'application/x-gzip'\n    else\n      res['content-type'] = 'application/octet-stream'\n    end\n\n    if req.request_method == 'HEAD' then\n      res['content-length'] = specs.length\n    else\n      res.body << specs\n    end\n  end\n\n  ##\n  # Creates server sockets based on the addresses option.  If no addresses\n  # were given a server socket for all interfaces is created.\n\n  def listen addresses = @addresses\n    addresses = [nil] unless addresses\n\n    listeners = 0\n\n    addresses.each do |address|\n      begin\n        @server.listen address, @port\n        @server.listeners[listeners..-1].each do |listener|\n          host, port = listener.addr.values_at 2, 1\n          host = \"[#{host}]\" if host =~ /:/ # we don't reverse lookup\n          say \"Server started at http://#{host}:#{port}\"\n        end\n\n        listeners = @server.listeners.length\n      rescue SystemCallError\n        next\n      end\n    end\n\n    if @server.listeners.empty? then\n      say \"Unable to start a server.\"\n      say \"Check for running servers or your --bind and --port arguments\"\n      terminate_interaction 1\n    end\n  end\n\n  def prerelease_specs req, res\n    reset_gems\n\n    res['content-type'] = 'application/x-gzip'\n\n    add_date res\n\n    specs = Gem::Specification.select do |spec|\n      spec.version.prerelease?\n    end.sort.map do |spec|\n      platform = spec.original_platform || Gem::Platform::RUBY\n      [spec.name, spec.version, platform]\n    end\n\n    specs = Marshal.dump specs\n\n    if req.path =~ /\\.gz$/ then\n      specs = Gem.gzip specs\n      res['content-type'] = 'application/x-gzip'\n    else\n      res['content-type'] = 'application/octet-stream'\n    end\n\n    if req.request_method == 'HEAD' then\n      res['content-length'] = specs.length\n    else\n      res.body << specs\n    end\n  end\n\n  def quick(req, res)\n    reset_gems\n\n    res['content-type'] = 'text/plain'\n    add_date res\n\n    case req.request_uri.path\n    when %r|^/quick/(Marshal.#{Regexp.escape Gem.marshal_version}/)?(.*?)\\.gemspec\\.rz$| then\n      marshal_format, full_name = $1, $2\n      specs = Gem::Specification.find_all_by_full_name(full_name)\n\n      selector = full_name.inspect\n\n      if specs.empty? then\n        res.status = 404\n        res.body = \"No gems found matching #{selector}\"\n      elsif specs.length > 1 then\n        res.status = 500\n        res.body = \"Multiple gems found matching #{selector}\"\n      elsif marshal_format then\n        res['content-type'] = 'application/x-deflate'\n        res.body << Gem.deflate(Marshal.dump(specs.first))\n      end\n    else\n      raise WEBrick::HTTPStatus::NotFound, \"`#{req.path}' not found.\"\n    end\n  end\n\n  def root(req, res)\n    reset_gems\n\n    add_date res\n\n    raise WEBrick::HTTPStatus::NotFound, \"`#{req.path}' not found.\" unless\n      req.path == '/'\n\n    specs = []\n    total_file_count = 0\n\n    Gem::Specification.each do |spec|\n      total_file_count += spec.files.size\n      deps = spec.dependencies.map { |dep|\n        {\n          \"name\"    => dep.name,\n          \"type\"    => dep.type,\n          \"version\" => dep.requirement.to_s,\n        }\n      }\n\n      deps = deps.sort_by { |dep| [dep[\"name\"].downcase, dep[\"version\"]] }\n      deps.last[\"is_last\"] = true unless deps.empty?\n\n      # executables\n      executables = spec.executables.sort.collect { |exec| {\"executable\" => exec} }\n      executables = nil if executables.empty?\n      executables.last[\"is_last\"] = true if executables\n\n      specs << {\n        \"authors\"             => spec.authors.sort.join(\", \"),\n        \"date\"                => spec.date.to_s,\n        \"dependencies\"        => deps,\n        \"doc_path\"            => doc_root(spec.full_name),\n        \"executables\"         => executables,\n        \"only_one_executable\" => (executables && executables.size == 1),\n        \"full_name\"           => spec.full_name,\n        \"has_deps\"            => !deps.empty?,\n        \"homepage\"            => spec.homepage,\n        \"name\"                => spec.name,\n        \"rdoc_installed\"      => Gem::RDoc.new(spec).rdoc_installed?,\n        \"ri_installed\"        => Gem::RDoc.new(spec).ri_installed?,\n        \"summary\"             => spec.summary,\n        \"version\"             => spec.version.to_s,\n      }\n    end\n\n    specs << {\n      \"authors\" => \"Chad Fowler, Rich Kilmer, Jim Weirich, Eric Hodel and others\",\n      \"dependencies\" => [],\n      \"doc_path\" => doc_root(\"rubygems-#{Gem::VERSION}\"),\n      \"executables\" => [{\"executable\" => 'gem', \"is_last\" => true}],\n      \"only_one_executable\" => true,\n      \"full_name\" => \"rubygems-#{Gem::VERSION}\",\n      \"has_deps\" => false,\n      \"homepage\" => \"http://guides.rubygems.org/\",\n      \"name\" => 'rubygems',\n      \"ri_installed\" => true,\n      \"summary\" => \"RubyGems itself\",\n      \"version\" => Gem::VERSION,\n    }\n\n    specs = specs.sort_by { |spec| [spec[\"name\"].downcase, spec[\"version\"]] }\n    specs.last[\"is_last\"] = true\n\n    # tag all specs with first_name_entry\n    last_spec = nil\n    specs.each do |spec|\n      is_first = last_spec.nil? || (last_spec[\"name\"].downcase != spec[\"name\"].downcase)\n      spec[\"first_name_entry\"] = is_first\n      last_spec = spec\n    end\n\n    # create page from template\n    template = ERB.new(DOC_TEMPLATE)\n    res['content-type'] = 'text/html'\n\n    values = { \"gem_count\" => specs.size.to_s, \"specs\" => specs,\n               \"total_file_count\" => total_file_count.to_s }\n\n    # suppress 1.9.3dev warning about unused variable\n    values = values\n\n    result = template.result binding\n    res.body = result\n  end\n\n  ##\n  # Can be used for quick navigation to the rdoc documentation.  You can then\n  # define a search shortcut for your browser.  E.g. in Firefox connect\n  # 'shortcut:rdoc' to http://localhost:8808/rdoc?q=%s template. Then you can\n  # directly open the ActionPack documentation by typing 'rdoc actionp'. If\n  # there are multiple hits for the search term, they are presented as a list\n  # with links.\n  #\n  # Search algorithm aims for an intuitive search:\n  # 1. first try to find the gems and documentation folders which name\n  #    starts with the search term\n  # 2. search for entries, that *contain* the search term\n  # 3. show all the gems\n  #\n  # If there is only one search hit, user is immediately redirected to the\n  # documentation for the particular gem, otherwise a list with results is\n  # shown.\n  #\n  # === Additional trick - install documentation for Ruby core\n  #\n  # Note: please adjust paths accordingly use for example 'locate yaml.rb' and\n  # 'gem environment' to identify directories, that are specific for your\n  # local installation\n  #\n  # 1. install Ruby sources\n  #      cd /usr/src\n  #      sudo apt-get source ruby\n  #\n  # 2. generate documentation\n  #      rdoc -o /usr/lib/ruby/gems/1.8/doc/core/rdoc \\\n  #        /usr/lib/ruby/1.8 ruby1.8-1.8.7.72\n  #\n  # By typing 'rdoc core' you can now access the core documentation\n\n  def rdoc(req, res)\n    query = req.query['q']\n    show_rdoc_for_pattern(\"#{query}*\", res) && return\n    show_rdoc_for_pattern(\"*#{query}*\", res) && return\n\n    template = ERB.new RDOC_NO_DOCUMENTATION\n\n    res['content-type'] = 'text/html'\n    res.body = template.result binding\n  end\n\n  ##\n  # Updates the server to use the latest installed gems.\n\n  def reset_gems # :nodoc:\n    Gem::Specification.dirs = @gem_dirs\n  end\n\n  ##\n  # Returns true and prepares http response, if rdoc for the requested gem\n  # name pattern was found.\n  #\n  # The search is based on the file system content, not on the gems metadata.\n  # This allows additional documentation folders like 'core' for the Ruby core\n  # documentation - just put it underneath the main doc folder.\n\n  def show_rdoc_for_pattern(pattern, res)\n    found_gems = Dir.glob(\"{#{@gem_dirs.join ','}}/doc/#{pattern}\").select {|path|\n      File.exist? File.join(path, 'rdoc/index.html')\n    }\n    case found_gems.length\n    when 0\n      return false\n    when 1\n      new_path = File.basename(found_gems[0])\n      res.status = 302\n      res['Location'] = doc_root new_path\n      return true\n    else\n      doc_items = []\n      found_gems.each do |file_name|\n        base_name = File.basename(file_name)\n        doc_items << {\n          :name    => base_name,\n          :url     => doc_root(new_path),\n          :summary => ''\n        }\n      end\n\n      template = ERB.new(RDOC_SEARCH_TEMPLATE)\n      res['content-type'] = 'text/html'\n      result = template.result binding\n      res.body = result\n      return true\n    end\n  end\n\n  def run\n    listen\n\n    WEBrick::Daemon.start if @daemon\n\n    @server.mount_proc \"/specs.#{Gem.marshal_version}\", method(:specs)\n    @server.mount_proc \"/specs.#{Gem.marshal_version}.gz\", method(:specs)\n\n    @server.mount_proc \"/latest_specs.#{Gem.marshal_version}\",\n                       method(:latest_specs)\n    @server.mount_proc \"/latest_specs.#{Gem.marshal_version}.gz\",\n                       method(:latest_specs)\n\n    @server.mount_proc \"/prerelease_specs.#{Gem.marshal_version}\",\n                       method(:prerelease_specs)\n    @server.mount_proc \"/prerelease_specs.#{Gem.marshal_version}.gz\",\n                       method(:prerelease_specs)\n\n    @server.mount_proc \"/quick/\", method(:quick)\n\n    @server.mount_proc(\"/gem-server-rdoc-style.css\") do |req, res|\n      res['content-type'] = 'text/css'\n      add_date res\n      res.body << RDOC_CSS\n    end\n\n    @server.mount_proc \"/\", method(:root)\n\n    @server.mount_proc \"/rdoc\", method(:rdoc)\n\n    file_handlers = {\n      '/gems' => '/cache/',\n    }\n\n    if have_rdoc_4_plus? then\n      @server.mount '/doc_root', RDoc::Servlet, '/doc_root'\n    else\n      file_handlers['/doc_root'] = '/doc/'\n    end\n\n    @gem_dirs.each do |gem_dir|\n      file_handlers.each do |mount_point, mount_dir|\n        @server.mount(mount_point, WEBrick::HTTPServlet::FileHandler,\n                      File.join(gem_dir, mount_dir), true)\n      end\n    end\n\n    trap(\"INT\") { @server.shutdown; exit! }\n    trap(\"TERM\") { @server.shutdown; exit! }\n\n    launch if @launch\n\n    @server.start\n  end\n\n  def specs(req, res)\n    reset_gems\n\n    add_date res\n\n    specs = Gem::Specification.sort_by(&:sort_obj).map do |spec|\n      platform = spec.original_platform || Gem::Platform::RUBY\n      [spec.name, spec.version, platform]\n    end\n\n    specs = Marshal.dump specs\n\n    if req.path =~ /\\.gz$/ then\n      specs = Gem.gzip specs\n      res['content-type'] = 'application/x-gzip'\n    else\n      res['content-type'] = 'application/octet-stream'\n    end\n\n    if req.request_method == 'HEAD' then\n      res['content-length'] = specs.length\n    else\n      res.body << specs\n    end\n  end\n\n  def launch\n    listeners = @server.listeners.map{|l| l.addr[2] }\n\n    # TODO: 0.0.0.0 == any, not localhost.\n    host = listeners.any?{|l| l == '0.0.0.0'} ? 'localhost' : listeners.first\n\n    say \"Launching browser to http://#{host}:#{@port}\"\n\n    system(\"#{@launch} http://#{host}:#{@port}\")\n  end\nend\n"], "fixing_code": ["# frozen_string_literal: true\nrequire 'webrick'\nrequire 'zlib'\nrequire 'erb'\nrequire 'uri'\n\nrequire 'rubygems'\nrequire 'rubygems/rdoc'\n\n##\n# Gem::Server and allows users to serve gems for consumption by\n# `gem --remote-install`.\n#\n# gem_server starts an HTTP server on the given port and serves the following:\n# * \"/\" - Browsing of gem spec files for installed gems\n# * \"/specs.#{Gem.marshal_version}.gz\" - specs name/version/platform index\n# * \"/latest_specs.#{Gem.marshal_version}.gz\" - latest specs\n#   name/version/platform index\n# * \"/quick/\" - Individual gemspecs\n# * \"/gems\" - Direct access to download the installable gems\n# * \"/rdoc?q=\" - Search for installed rdoc documentation\n#\n# == Usage\n#\n#   gem_server = Gem::Server.new Gem.dir, 8089, false\n#   gem_server.run\n#\n#--\n# TODO Refactor into a real WEBrick servlet to remove code duplication.\n\nclass Gem::Server\n\n  attr_reader :spec_dirs\n\n  include ERB::Util\n  include Gem::UserInteraction\n\n  SEARCH = <<-ERB\n      <form class=\"headerSearch\" name=\"headerSearchForm\" method=\"get\" action=\"/rdoc\">\n        <div id=\"search\" style=\"float:right\">\n          <label for=\"q\">Filter/Search</label>\n          <input id=\"q\" type=\"text\" style=\"width:10em\" name=\"q\">\n          <button type=\"submit\" style=\"display:none\"></button>\n        </div>\n      </form>\n  ERB\n\n  DOC_TEMPLATE = <<-'ERB'\n  <?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n  <!DOCTYPE html\n       PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n       \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n  <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n  <head>\n    <title>RubyGems Documentation Index</title>\n    <link rel=\"stylesheet\" href=\"gem-server-rdoc-style.css\" type=\"text/css\" media=\"screen\" />\n  </head>\n  <body>\n    <div id=\"fileHeader\">\n<%= SEARCH %>\n      <h1>RubyGems Documentation Index</h1>\n    </div>\n    <!-- banner header -->\n\n  <div id=\"bodyContent\">\n    <div id=\"contextContent\">\n      <div id=\"description\">\n        <h1>Summary</h1>\n  <p>There are <%=values[\"gem_count\"]%> gems installed:</p>\n  <p>\n  <%= values[\"specs\"].map { |v| \"<a href=\\\"##{u v[\"name\"]}\\\">#{h v[\"name\"]}</a>\" }.join ', ' %>.\n  <h1>Gems</h1>\n\n  <dl>\n  <% values[\"specs\"].each do |spec| %>\n    <dt>\n    <% if spec[\"first_name_entry\"] then %>\n      <a name=\"<%=h spec[\"name\"]%>\"></a>\n    <% end %>\n\n    <b><%=h spec[\"name\"]%> <%=h spec[\"version\"]%></b>\n\n    <% if spec[\"ri_installed\"] || spec[\"rdoc_installed\"] then %>\n      <a href=\"<%=spec[\"doc_path\"]%>\">[rdoc]</a>\n    <% else %>\n      <span title=\"rdoc not installed\">[rdoc]</span>\n    <% end %>\n\n    <% if spec[\"homepage\"] then %>\n      <a href=\"<%=uri_encode spec[\"homepage\"]%>\" title=\"<%=h spec[\"homepage\"]%>\">[www]</a>\n    <% else %>\n      <span title=\"no homepage available\">[www]</span>\n    <% end %>\n\n    <% if spec[\"has_deps\"] then %>\n     - depends on\n      <%= spec[\"dependencies\"].map { |v| \"<a href=\\\"##{u v[\"name\"]}\\\">#{h v[\"name\"]}</a>\" }.join ', ' %>.\n    <% end %>\n    </dt>\n    <dd>\n    <%=spec[\"summary\"]%>\n    <% if spec[\"executables\"] then %>\n      <br/>\n\n      <% if spec[\"only_one_executable\"] then %>\n          Executable is\n      <% else %>\n          Executables are\n      <%end%>\n\n      <%= spec[\"executables\"].map { |v| \"<span class=\\\"context-item-name\\\">#{h v[\"executable\"]}</span>\"}.join ', ' %>.\n\n    <%end%>\n    <br/>\n    <br/>\n    </dd>\n  <% end %>\n  </dl>\n\n      </div>\n     </div>\n    </div>\n  <div id=\"validator-badges\">\n    <p><small><a href=\"http://validator.w3.org/check/referer\">[Validate]</a></small></p>\n  </div>\n  </body>\n  </html>\n  ERB\n\n  # CSS is copy & paste from rdoc-style.css, RDoc V1.0.1 - 20041108\n  RDOC_CSS = <<-CSS\nbody {\n    font-family: Verdana,Arial,Helvetica,sans-serif;\n    font-size:   90%;\n    margin: 0;\n    margin-left: 40px;\n    padding: 0;\n    background: white;\n}\n\nh1,h2,h3,h4 { margin: 0; color: #efefef; background: transparent; }\nh1 { font-size: 150%; }\nh2,h3,h4 { margin-top: 1em; }\n\na { background: #eef; color: #039; text-decoration: none; }\na:hover { background: #039; color: #eef; }\n\n/* Override the base stylesheets Anchor inside a table cell */\ntd > a {\n  background: transparent;\n  color: #039;\n  text-decoration: none;\n}\n\n/* and inside a section title */\n.section-title > a {\n  background: transparent;\n  color: #eee;\n  text-decoration: none;\n}\n\n/* === Structural elements =================================== */\n\ndiv#index {\n    margin: 0;\n    margin-left: -40px;\n    padding: 0;\n    font-size: 90%;\n}\n\n\ndiv#index a {\n    margin-left: 0.7em;\n}\n\ndiv#index .section-bar {\n   margin-left: 0px;\n   padding-left: 0.7em;\n   background: #ccc;\n   font-size: small;\n}\n\n\ndiv#classHeader, div#fileHeader {\n    width: auto;\n    color: white;\n    padding: 0.5em 1.5em 0.5em 1.5em;\n    margin: 0;\n    margin-left: -40px;\n    border-bottom: 3px solid #006;\n}\n\ndiv#classHeader a, div#fileHeader a {\n    background: inherit;\n    color: white;\n}\n\ndiv#classHeader td, div#fileHeader td {\n    background: inherit;\n    color: white;\n}\n\n\ndiv#fileHeader {\n    background: #057;\n}\n\ndiv#classHeader {\n    background: #048;\n}\n\n\n.class-name-in-header {\n  font-size:  180%;\n  font-weight: bold;\n}\n\n\ndiv#bodyContent {\n    padding: 0 1.5em 0 1.5em;\n}\n\ndiv#description {\n    padding: 0.5em 1.5em;\n    background: #efefef;\n    border: 1px dotted #999;\n}\n\ndiv#description h1,h2,h3,h4,h5,h6 {\n    color: #125;;\n    background: transparent;\n}\n\ndiv#validator-badges {\n    text-align: center;\n}\ndiv#validator-badges img { border: 0; }\n\ndiv#copyright {\n    color: #333;\n    background: #efefef;\n    font: 0.75em sans-serif;\n    margin-top: 5em;\n    margin-bottom: 0;\n    padding: 0.5em 2em;\n}\n\n\n/* === Classes =================================== */\n\ntable.header-table {\n    color: white;\n    font-size: small;\n}\n\n.type-note {\n    font-size: small;\n    color: #DEDEDE;\n}\n\n.xxsection-bar {\n    background: #eee;\n    color: #333;\n    padding: 3px;\n}\n\n.section-bar {\n   color: #333;\n   border-bottom: 1px solid #999;\n    margin-left: -20px;\n}\n\n\n.section-title {\n    background: #79a;\n    color: #eee;\n    padding: 3px;\n    margin-top: 2em;\n    margin-left: -30px;\n    border: 1px solid #999;\n}\n\n.top-aligned-row {  vertical-align: top }\n.bottom-aligned-row { vertical-align: bottom }\n\n/* --- Context section classes ----------------------- */\n\n.context-row { }\n.context-item-name { font-family: monospace; font-weight: bold; color: black; }\n.context-item-value { font-size: small; color: #448; }\n.context-item-desc { color: #333; padding-left: 2em; }\n\n/* --- Method classes -------------------------- */\n.method-detail {\n    background: #efefef;\n    padding: 0;\n    margin-top: 0.5em;\n    margin-bottom: 1em;\n    border: 1px dotted #ccc;\n}\n.method-heading {\n  color: black;\n  background: #ccc;\n  border-bottom: 1px solid #666;\n  padding: 0.2em 0.5em 0 0.5em;\n}\n.method-signature { color: black; background: inherit; }\n.method-name { font-weight: bold; }\n.method-args { font-style: italic; }\n.method-description { padding: 0 0.5em 0 0.5em; }\n\n/* --- Source code sections -------------------- */\n\na.source-toggle { font-size: 90%; }\ndiv.method-source-code {\n    background: #262626;\n    color: #ffdead;\n    margin: 1em;\n    padding: 0.5em;\n    border: 1px dashed #999;\n    overflow: hidden;\n}\n\ndiv.method-source-code pre { color: #ffdead; overflow: hidden; }\n\n/* --- Ruby keyword styles --------------------- */\n\n.standalone-code { background: #221111; color: #ffdead; overflow: hidden; }\n\n.ruby-constant  { color: #7fffd4; background: transparent; }\n.ruby-keyword { color: #00ffff; background: transparent; }\n.ruby-ivar    { color: #eedd82; background: transparent; }\n.ruby-operator  { color: #00ffee; background: transparent; }\n.ruby-identifier { color: #ffdead; background: transparent; }\n.ruby-node    { color: #ffa07a; background: transparent; }\n.ruby-comment { color: #b22222; font-weight: bold; background: transparent; }\n.ruby-regexp  { color: #ffa07a; background: transparent; }\n.ruby-value   { color: #7fffd4; background: transparent; }\n  CSS\n\n  RDOC_NO_DOCUMENTATION = <<-'ERB'\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n  <head>\n    <title>Found documentation</title>\n    <link rel=\"stylesheet\" href=\"gem-server-rdoc-style.css\" type=\"text/css\" media=\"screen\" />\n  </head>\n  <body>\n    <div id=\"fileHeader\">\n<%= SEARCH %>\n      <h1>No documentation found</h1>\n    </div>\n\n    <div id=\"bodyContent\">\n      <div id=\"contextContent\">\n        <div id=\"description\">\n          <p>No gems matched <%= h query.inspect %></p>\n\n          <p>\n            Back to <a href=\"/\">complete gem index</a>\n          </p>\n\n        </div>\n      </div>\n    </div>\n    <div id=\"validator-badges\">\n      <p><small><a href=\"http://validator.w3.org/check/referer\">[Validate]</a></small></p>\n    </div>\n  </body>\n</html>\n  ERB\n\n  RDOC_SEARCH_TEMPLATE = <<-'ERB'\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n  <head>\n    <title>Found documentation</title>\n    <link rel=\"stylesheet\" href=\"gem-server-rdoc-style.css\" type=\"text/css\" media=\"screen\" />\n  </head>\n  <body>\n    <div id=\"fileHeader\">\n<%= SEARCH %>\n      <h1>Found documentation</h1>\n    </div>\n    <!-- banner header -->\n\n    <div id=\"bodyContent\">\n      <div id=\"contextContent\">\n        <div id=\"description\">\n          <h1>Summary</h1>\n          <p><%=doc_items.length%> documentation topics found.</p>\n          <h1>Topics</h1>\n\n          <dl>\n          <% doc_items.each do |doc_item| %>\n            <dt>\n              <b><%=doc_item[:name]%></b>\n              <a href=\"<%=u doc_item[:url]%>\">[rdoc]</a>\n            </dt>\n            <dd>\n              <%=h doc_item[:summary]%>\n              <br/>\n              <br/>\n            </dd>\n          <% end %>\n          </dl>\n\n          <p>\n            Back to <a href=\"/\">complete gem index</a>\n          </p>\n\n        </div>\n      </div>\n    </div>\n    <div id=\"validator-badges\">\n      <p><small><a href=\"http://validator.w3.org/check/referer\">[Validate]</a></small></p>\n    </div>\n  </body>\n</html>\n  ERB\n\n  def self.run(options)\n    new(options[:gemdir], options[:port], options[:daemon],\n        options[:launch], options[:addresses]).run\n  end\n\n  def initialize(gem_dirs, port, daemon, launch = nil, addresses = nil)\n    Gem::RDoc.load_rdoc\n    Socket.do_not_reverse_lookup = true\n\n    @gem_dirs  = Array gem_dirs\n    @port      = port\n    @daemon    = daemon\n    @launch    = launch\n    @addresses = addresses\n\n    logger  = WEBrick::Log.new nil, WEBrick::BasicLog::FATAL\n    @server = WEBrick::HTTPServer.new :DoNotListen => true, :Logger => logger\n\n    @spec_dirs = @gem_dirs.map { |gem_dir| File.join gem_dir, 'specifications' }\n    @spec_dirs.reject! { |spec_dir| !File.directory? spec_dir }\n\n    reset_gems\n\n    @have_rdoc_4_plus = nil\n  end\n\n  def add_date res\n    res['date'] = @spec_dirs.map do |spec_dir|\n      File.stat(spec_dir).mtime\n    end.max\n  end\n\n  def uri_encode(str)\n    str.gsub(URI::UNSAFE) do |match|\n      match.each_byte.map { |c| sprintf('%%%02X', c.ord) }.join\n    end\n  end\n\n  def doc_root gem_name\n    if have_rdoc_4_plus? then\n      \"/doc_root/#{u gem_name}/\"\n    else\n      \"/doc_root/#{u gem_name}/rdoc/index.html\"\n    end\n  end\n\n  def have_rdoc_4_plus?\n    @have_rdoc_4_plus ||=\n      Gem::Requirement.new('>= 4.0.0.preview2').satisfied_by? Gem::RDoc.rdoc_version\n  end\n\n  def latest_specs(req, res)\n    reset_gems\n\n    res['content-type'] = 'application/x-gzip'\n\n    add_date res\n\n    latest_specs = Gem::Specification.latest_specs\n\n    specs = latest_specs.sort.map do |spec|\n      platform = spec.original_platform || Gem::Platform::RUBY\n      [spec.name, spec.version, platform]\n    end\n\n    specs = Marshal.dump specs\n\n    if req.path =~ /\\.gz$/ then\n      specs = Gem.gzip specs\n      res['content-type'] = 'application/x-gzip'\n    else\n      res['content-type'] = 'application/octet-stream'\n    end\n\n    if req.request_method == 'HEAD' then\n      res['content-length'] = specs.length\n    else\n      res.body << specs\n    end\n  end\n\n  ##\n  # Creates server sockets based on the addresses option.  If no addresses\n  # were given a server socket for all interfaces is created.\n\n  def listen addresses = @addresses\n    addresses = [nil] unless addresses\n\n    listeners = 0\n\n    addresses.each do |address|\n      begin\n        @server.listen address, @port\n        @server.listeners[listeners..-1].each do |listener|\n          host, port = listener.addr.values_at 2, 1\n          host = \"[#{host}]\" if host =~ /:/ # we don't reverse lookup\n          say \"Server started at http://#{host}:#{port}\"\n        end\n\n        listeners = @server.listeners.length\n      rescue SystemCallError\n        next\n      end\n    end\n\n    if @server.listeners.empty? then\n      say \"Unable to start a server.\"\n      say \"Check for running servers or your --bind and --port arguments\"\n      terminate_interaction 1\n    end\n  end\n\n  def prerelease_specs req, res\n    reset_gems\n\n    res['content-type'] = 'application/x-gzip'\n\n    add_date res\n\n    specs = Gem::Specification.select do |spec|\n      spec.version.prerelease?\n    end.sort.map do |spec|\n      platform = spec.original_platform || Gem::Platform::RUBY\n      [spec.name, spec.version, platform]\n    end\n\n    specs = Marshal.dump specs\n\n    if req.path =~ /\\.gz$/ then\n      specs = Gem.gzip specs\n      res['content-type'] = 'application/x-gzip'\n    else\n      res['content-type'] = 'application/octet-stream'\n    end\n\n    if req.request_method == 'HEAD' then\n      res['content-length'] = specs.length\n    else\n      res.body << specs\n    end\n  end\n\n  def quick(req, res)\n    reset_gems\n\n    res['content-type'] = 'text/plain'\n    add_date res\n\n    case req.request_uri.path\n    when %r|^/quick/(Marshal.#{Regexp.escape Gem.marshal_version}/)?(.*?)\\.gemspec\\.rz$| then\n      marshal_format, full_name = $1, $2\n      specs = Gem::Specification.find_all_by_full_name(full_name)\n\n      selector = full_name.inspect\n\n      if specs.empty? then\n        res.status = 404\n        res.body = \"No gems found matching #{selector}\"\n      elsif specs.length > 1 then\n        res.status = 500\n        res.body = \"Multiple gems found matching #{selector}\"\n      elsif marshal_format then\n        res['content-type'] = 'application/x-deflate'\n        res.body << Gem.deflate(Marshal.dump(specs.first))\n      end\n    else\n      raise WEBrick::HTTPStatus::NotFound, \"`#{req.path}' not found.\"\n    end\n  end\n\n  def root(req, res)\n    reset_gems\n\n    add_date res\n\n    raise WEBrick::HTTPStatus::NotFound, \"`#{req.path}' not found.\" unless\n      req.path == '/'\n\n    specs = []\n    total_file_count = 0\n\n    Gem::Specification.each do |spec|\n      total_file_count += spec.files.size\n      deps = spec.dependencies.map { |dep|\n        {\n          \"name\"    => dep.name,\n          \"type\"    => dep.type,\n          \"version\" => dep.requirement.to_s,\n        }\n      }\n\n      deps = deps.sort_by { |dep| [dep[\"name\"].downcase, dep[\"version\"]] }\n      deps.last[\"is_last\"] = true unless deps.empty?\n\n      # executables\n      executables = spec.executables.sort.collect { |exec| {\"executable\" => exec} }\n      executables = nil if executables.empty?\n      executables.last[\"is_last\"] = true if executables\n\n      specs << {\n        \"authors\"             => spec.authors.sort.join(\", \"),\n        \"date\"                => spec.date.to_s,\n        \"dependencies\"        => deps,\n        \"doc_path\"            => doc_root(spec.full_name),\n        \"executables\"         => executables,\n        \"only_one_executable\" => (executables && executables.size == 1),\n        \"full_name\"           => spec.full_name,\n        \"has_deps\"            => !deps.empty?,\n        \"homepage\"            => (URI.parse(spec.homepage).is_a?(URI::HTTP) || URI.parse(spec.homepage).is_a?(URI::HTTPS)) ? spec.homepage : \".\",\n        \"name\"                => spec.name,\n        \"rdoc_installed\"      => Gem::RDoc.new(spec).rdoc_installed?,\n        \"ri_installed\"        => Gem::RDoc.new(spec).ri_installed?,\n        \"summary\"             => spec.summary,\n        \"version\"             => spec.version.to_s,\n      }\n    end\n\n    specs << {\n      \"authors\" => \"Chad Fowler, Rich Kilmer, Jim Weirich, Eric Hodel and others\",\n      \"dependencies\" => [],\n      \"doc_path\" => doc_root(\"rubygems-#{Gem::VERSION}\"),\n      \"executables\" => [{\"executable\" => 'gem', \"is_last\" => true}],\n      \"only_one_executable\" => true,\n      \"full_name\" => \"rubygems-#{Gem::VERSION}\",\n      \"has_deps\" => false,\n      \"homepage\" => \"http://guides.rubygems.org/\",\n      \"name\" => 'rubygems',\n      \"ri_installed\" => true,\n      \"summary\" => \"RubyGems itself\",\n      \"version\" => Gem::VERSION,\n    }\n\n    specs = specs.sort_by { |spec| [spec[\"name\"].downcase, spec[\"version\"]] }\n    specs.last[\"is_last\"] = true\n\n    # tag all specs with first_name_entry\n    last_spec = nil\n    specs.each do |spec|\n      is_first = last_spec.nil? || (last_spec[\"name\"].downcase != spec[\"name\"].downcase)\n      spec[\"first_name_entry\"] = is_first\n      last_spec = spec\n    end\n\n    # create page from template\n    template = ERB.new(DOC_TEMPLATE)\n    res['content-type'] = 'text/html'\n\n    values = { \"gem_count\" => specs.size.to_s, \"specs\" => specs,\n               \"total_file_count\" => total_file_count.to_s }\n\n    # suppress 1.9.3dev warning about unused variable\n    values = values\n\n    result = template.result binding\n    res.body = result\n  end\n\n  ##\n  # Can be used for quick navigation to the rdoc documentation.  You can then\n  # define a search shortcut for your browser.  E.g. in Firefox connect\n  # 'shortcut:rdoc' to http://localhost:8808/rdoc?q=%s template. Then you can\n  # directly open the ActionPack documentation by typing 'rdoc actionp'. If\n  # there are multiple hits for the search term, they are presented as a list\n  # with links.\n  #\n  # Search algorithm aims for an intuitive search:\n  # 1. first try to find the gems and documentation folders which name\n  #    starts with the search term\n  # 2. search for entries, that *contain* the search term\n  # 3. show all the gems\n  #\n  # If there is only one search hit, user is immediately redirected to the\n  # documentation for the particular gem, otherwise a list with results is\n  # shown.\n  #\n  # === Additional trick - install documentation for Ruby core\n  #\n  # Note: please adjust paths accordingly use for example 'locate yaml.rb' and\n  # 'gem environment' to identify directories, that are specific for your\n  # local installation\n  #\n  # 1. install Ruby sources\n  #      cd /usr/src\n  #      sudo apt-get source ruby\n  #\n  # 2. generate documentation\n  #      rdoc -o /usr/lib/ruby/gems/1.8/doc/core/rdoc \\\n  #        /usr/lib/ruby/1.8 ruby1.8-1.8.7.72\n  #\n  # By typing 'rdoc core' you can now access the core documentation\n\n  def rdoc(req, res)\n    query = req.query['q']\n    show_rdoc_for_pattern(\"#{query}*\", res) && return\n    show_rdoc_for_pattern(\"*#{query}*\", res) && return\n\n    template = ERB.new RDOC_NO_DOCUMENTATION\n\n    res['content-type'] = 'text/html'\n    res.body = template.result binding\n  end\n\n  ##\n  # Updates the server to use the latest installed gems.\n\n  def reset_gems # :nodoc:\n    Gem::Specification.dirs = @gem_dirs\n  end\n\n  ##\n  # Returns true and prepares http response, if rdoc for the requested gem\n  # name pattern was found.\n  #\n  # The search is based on the file system content, not on the gems metadata.\n  # This allows additional documentation folders like 'core' for the Ruby core\n  # documentation - just put it underneath the main doc folder.\n\n  def show_rdoc_for_pattern(pattern, res)\n    found_gems = Dir.glob(\"{#{@gem_dirs.join ','}}/doc/#{pattern}\").select {|path|\n      File.exist? File.join(path, 'rdoc/index.html')\n    }\n    case found_gems.length\n    when 0\n      return false\n    when 1\n      new_path = File.basename(found_gems[0])\n      res.status = 302\n      res['Location'] = doc_root new_path\n      return true\n    else\n      doc_items = []\n      found_gems.each do |file_name|\n        base_name = File.basename(file_name)\n        doc_items << {\n          :name    => base_name,\n          :url     => doc_root(new_path),\n          :summary => ''\n        }\n      end\n\n      template = ERB.new(RDOC_SEARCH_TEMPLATE)\n      res['content-type'] = 'text/html'\n      result = template.result binding\n      res.body = result\n      return true\n    end\n  end\n\n  def run\n    listen\n\n    WEBrick::Daemon.start if @daemon\n\n    @server.mount_proc \"/specs.#{Gem.marshal_version}\", method(:specs)\n    @server.mount_proc \"/specs.#{Gem.marshal_version}.gz\", method(:specs)\n\n    @server.mount_proc \"/latest_specs.#{Gem.marshal_version}\",\n                       method(:latest_specs)\n    @server.mount_proc \"/latest_specs.#{Gem.marshal_version}.gz\",\n                       method(:latest_specs)\n\n    @server.mount_proc \"/prerelease_specs.#{Gem.marshal_version}\",\n                       method(:prerelease_specs)\n    @server.mount_proc \"/prerelease_specs.#{Gem.marshal_version}.gz\",\n                       method(:prerelease_specs)\n\n    @server.mount_proc \"/quick/\", method(:quick)\n\n    @server.mount_proc(\"/gem-server-rdoc-style.css\") do |req, res|\n      res['content-type'] = 'text/css'\n      add_date res\n      res.body << RDOC_CSS\n    end\n\n    @server.mount_proc \"/\", method(:root)\n\n    @server.mount_proc \"/rdoc\", method(:rdoc)\n\n    file_handlers = {\n      '/gems' => '/cache/',\n    }\n\n    if have_rdoc_4_plus? then\n      @server.mount '/doc_root', RDoc::Servlet, '/doc_root'\n    else\n      file_handlers['/doc_root'] = '/doc/'\n    end\n\n    @gem_dirs.each do |gem_dir|\n      file_handlers.each do |mount_point, mount_dir|\n        @server.mount(mount_point, WEBrick::HTTPServlet::FileHandler,\n                      File.join(gem_dir, mount_dir), true)\n      end\n    end\n\n    trap(\"INT\") { @server.shutdown; exit! }\n    trap(\"TERM\") { @server.shutdown; exit! }\n\n    launch if @launch\n\n    @server.start\n  end\n\n  def specs(req, res)\n    reset_gems\n\n    add_date res\n\n    specs = Gem::Specification.sort_by(&:sort_obj).map do |spec|\n      platform = spec.original_platform || Gem::Platform::RUBY\n      [spec.name, spec.version, platform]\n    end\n\n    specs = Marshal.dump specs\n\n    if req.path =~ /\\.gz$/ then\n      specs = Gem.gzip specs\n      res['content-type'] = 'application/x-gzip'\n    else\n      res['content-type'] = 'application/octet-stream'\n    end\n\n    if req.request_method == 'HEAD' then\n      res['content-length'] = specs.length\n    else\n      res.body << specs\n    end\n  end\n\n  def launch\n    listeners = @server.listeners.map{|l| l.addr[2] }\n\n    # TODO: 0.0.0.0 == any, not localhost.\n    host = listeners.any?{|l| l == '0.0.0.0'} ? 'localhost' : listeners.first\n\n    say \"Launching browser to http://#{host}:#{@port}\"\n\n    system(\"#{@launch} http://#{host}:#{@port}\")\n  end\nend\n"], "filenames": ["lib/rubygems/server.rb"], "buggy_code_start_loc": [635], "buggy_code_end_loc": [636], "fixing_code_start_loc": [635], "fixing_code_end_loc": [636], "type": "CWE-79", "message": "RubyGems version Ruby 2.2 series: 2.2.9 and earlier, Ruby 2.3 series: 2.3.6 and earlier, Ruby 2.4 series: 2.4.3 and earlier, Ruby 2.5 series: 2.5.0 and earlier, prior to trunk revision 62422 contains a Cross Site Scripting (XSS) vulnerability in gem server display of homepage attribute that can result in XSS. This attack appear to be exploitable via the victim must browse to a malicious gem on a vulnerable gem server. This vulnerability appears to have been fixed in 2.7.6.", "other": {"cve": {"id": "CVE-2018-1000078", "sourceIdentifier": "cve@mitre.org", "published": "2018-03-13T15:29:00.723", "lastModified": "2019-05-20T13:29:03.883", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "RubyGems version Ruby 2.2 series: 2.2.9 and earlier, Ruby 2.3 series: 2.3.6 and earlier, Ruby 2.4 series: 2.4.3 and earlier, Ruby 2.5 series: 2.5.0 and earlier, prior to trunk revision 62422 contains a Cross Site Scripting (XSS) vulnerability in gem server display of homepage attribute that can result in XSS. This attack appear to be exploitable via the victim must browse to a malicious gem on a vulnerable gem server. This vulnerability appears to have been fixed in 2.7.6."}, {"lang": "es", "value": "Las versiones de RubyGems de la serie Ruby 2.2: 2.2.9 y anteriores, de la serie Ruby 2.3: 2.3.6 y anteriores, de la serie Ruby 2.4: 2.4.3 y anteriores, y de la serie Ruby 2.5: versiones 2.5.0 y anteriores, anteriores a la revisi\u00f3n del trunk 62422 contiene una vulnerabilidad de Cross-Site Scripting (XSS) en la visualizaci\u00f3n del servidor gem del atributo homepage que podr\u00eda resultar en XSS. El ataque parece ser explotable mediante una v\u00edctima que navegue hasta una gema maliciosa en un servidor gem vulnerable. La vulnerabilidad parece haber sido solucionada en la versi\u00f3n 2.7.6."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rubygems:rubygems:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.2.9", "matchCriteriaId": "BEE89FF0-0079-4DF5-ACFC-E1B5415E54F4"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rubygems:rubygems:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.3.6", "matchCriteriaId": "8080FB82-5445-4A17-9ECB-806991906E80"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rubygems:rubygems:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.4.3", "matchCriteriaId": "CCBC38C5-781E-4998-877D-42265F1DBD05"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rubygems:rubygems:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.5.0", "matchCriteriaId": "6ACE6376-2E27-4F56-9315-03367963DB09"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "16F59A04-14CF-49E2-9973-645477EA09DA"}]}]}], "references": [{"url": "http://blog.rubygems.org/2018/02/15/2.7.6-released.html", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2019-07/msg00036.html", "source": "cve@mitre.org"}, {"url": "https://access.redhat.com/errata/RHSA-2018:3729", "source": "cve@mitre.org"}, {"url": "https://access.redhat.com/errata/RHSA-2018:3730", "source": "cve@mitre.org"}, {"url": "https://access.redhat.com/errata/RHSA-2018:3731", "source": "cve@mitre.org"}, {"url": "https://access.redhat.com/errata/RHSA-2019:2028", "source": "cve@mitre.org"}, {"url": "https://access.redhat.com/errata/RHSA-2020:0542", "source": "cve@mitre.org"}, {"url": "https://access.redhat.com/errata/RHSA-2020:0591", "source": "cve@mitre.org"}, {"url": "https://access.redhat.com/errata/RHSA-2020:0663", "source": "cve@mitre.org"}, {"url": "https://github.com/rubygems/rubygems/commit/66a28b9275551384fdab45f3591a82d6b59952cb", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2018/04/msg00000.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2018/04/msg00001.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2018/04/msg00023.html", "source": "cve@mitre.org"}, {"url": "https://lists.debian.org/debian-lts-announce/2018/07/msg00012.html", "source": "cve@mitre.org"}, {"url": "https://lists.debian.org/debian-lts-announce/2019/05/msg00028.html", "source": "cve@mitre.org"}, {"url": "https://usn.ubuntu.com/3621-1/", "source": "cve@mitre.org"}, {"url": "https://www.debian.org/security/2018/dsa-4219", "source": "cve@mitre.org"}, {"url": "https://www.debian.org/security/2018/dsa-4259", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/rubygems/rubygems/commit/66a28b9275551384fdab45f3591a82d6b59952cb"}}