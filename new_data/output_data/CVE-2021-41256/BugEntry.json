{"buggy_code": ["/*\n* Android ownCloud News\n*\n* @author David Luhmer\n* @copyright 2013 David Luhmer david-dev@live.de\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n* License as published by the Free Software Foundation; either\n* version 3 of the License, or any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n*\n* You should have received a copy of the GNU Affero General Public\n* License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*\n*/\n\npackage de.luhmer.owncloudnewsreader;\n\nimport static androidx.annotation.VisibleForTesting.PROTECTED;\nimport static de.luhmer.owncloudnewsreader.LoginDialogActivity.RESULT_LOGIN;\nimport static de.luhmer.owncloudnewsreader.LoginDialogActivity.ShowAlertDialog;\nimport static de.luhmer.owncloudnewsreader.SettingsActivity.PREF_SERVER_SETTINGS;\n\nimport android.Manifest;\nimport android.accounts.Account;\nimport android.accounts.AccountManager;\nimport android.annotation.SuppressLint;\nimport android.app.Activity;\nimport android.content.ContentResolver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.content.pm.PackageManager;\nimport android.content.res.Configuration;\nimport android.graphics.drawable.Drawable;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.SearchView;\nimport android.widget.Toast;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.VisibleForTesting;\nimport androidx.appcompat.app.ActionBarDrawerToggle;\nimport androidx.appcompat.app.AlertDialog;\nimport androidx.browser.customtabs.CustomTabsIntent;\nimport androidx.core.content.ContextCompat;\nimport androidx.core.view.GravityCompat;\nimport androidx.customview.widget.ViewDragHelper;\nimport androidx.fragment.app.DialogFragment;\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentManager;\nimport androidx.fragment.app.FragmentTransaction;\nimport androidx.preference.PreferenceManager;\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\n\nimport com.google.android.material.snackbar.Snackbar;\nimport com.nextcloud.android.sso.AccountImporter;\nimport com.nextcloud.android.sso.api.NextcloudAPI;\nimport com.nextcloud.android.sso.exceptions.AccountImportCancelledException;\nimport com.nextcloud.android.sso.exceptions.NextcloudFilesAppAccountNotFoundException;\nimport com.nextcloud.android.sso.exceptions.NextcloudFilesAppAccountPermissionNotGrantedException;\nimport com.nextcloud.android.sso.exceptions.NextcloudFilesAppNotSupportedException;\nimport com.nextcloud.android.sso.exceptions.NextcloudHttpRequestFailedException;\nimport com.nextcloud.android.sso.exceptions.NoCurrentAccountSelectedException;\nimport com.nextcloud.android.sso.exceptions.SSOException;\nimport com.nextcloud.android.sso.exceptions.TokenMismatchException;\nimport com.nextcloud.android.sso.helper.SingleAccountHelper;\nimport com.nextcloud.android.sso.ui.UiExceptionManager;\nimport com.nostra13.universalimageloader.core.DisplayImageOptions;\nimport com.nostra13.universalimageloader.core.ImageLoader;\nimport com.nostra13.universalimageloader.core.display.CircleBitmapDisplayer;\n\nimport org.greenrobot.eventbus.EventBus;\nimport org.greenrobot.eventbus.Subscribe;\nimport org.greenrobot.eventbus.ThreadMode;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\n\nimport de.luhmer.owncloudnewsreader.ListView.SubscriptionExpandableListAdapter;\nimport de.luhmer.owncloudnewsreader.adapter.NewsListRecyclerAdapter;\nimport de.luhmer.owncloudnewsreader.adapter.RecyclerItemClickListener;\nimport de.luhmer.owncloudnewsreader.adapter.RssItemViewHolder;\nimport de.luhmer.owncloudnewsreader.authentication.AccountGeneral;\nimport de.luhmer.owncloudnewsreader.database.DatabaseConnectionOrm;\nimport de.luhmer.owncloudnewsreader.database.model.Feed;\nimport de.luhmer.owncloudnewsreader.database.model.RssItem;\nimport de.luhmer.owncloudnewsreader.databinding.ActivityNewsreaderBinding;\nimport de.luhmer.owncloudnewsreader.events.podcast.FeedPanelSlideEvent;\nimport de.luhmer.owncloudnewsreader.helper.DatabaseUtils;\nimport de.luhmer.owncloudnewsreader.helper.ThemeChooser;\nimport de.luhmer.owncloudnewsreader.model.OcsUser;\nimport de.luhmer.owncloudnewsreader.reader.nextcloud.RssItemObservable;\nimport de.luhmer.owncloudnewsreader.services.DownloadImagesService;\nimport de.luhmer.owncloudnewsreader.services.DownloadWebPageService;\nimport de.luhmer.owncloudnewsreader.services.OwnCloudSyncService;\nimport de.luhmer.owncloudnewsreader.services.events.SyncFailedEvent;\nimport de.luhmer.owncloudnewsreader.services.events.SyncFinishedEvent;\nimport de.luhmer.owncloudnewsreader.services.events.SyncStartedEvent;\nimport de.luhmer.owncloudnewsreader.ssl.OkHttpSSLClient;\nimport de.luhmer.owncloudnewsreader.view.PodcastSlidingUpPanelLayout;\nimport io.reactivex.Completable;\nimport io.reactivex.android.schedulers.AndroidSchedulers;\nimport io.reactivex.functions.Action;\nimport io.reactivex.schedulers.Schedulers;\nimport io.reactivex.subjects.PublishSubject;\n\n/**\n * An activity representing a list of NewsReader. This activity has different\n * presentations for handset and tablet-size devices.\n * The activity makes heavy use of fragments. The list of items is a\n * {@link NewsReaderListFragment} and the item details (if present) is a\n * {@link NewsReaderDetailFragment}.\n * <p>\n * This activity also implements the required\n * {@link NewsReaderListFragment.Callbacks} interface to listen for item\n * selections.\n */\npublic class NewsReaderListActivity extends PodcastFragmentActivity implements\n\t\t NewsReaderListFragment.Callbacks, RecyclerItemClickListener, SwipeRefreshLayout.OnRefreshListener, SearchView.OnQueryTextListener {\n\n\tprivate static final String TAG = NewsReaderListActivity.class.getCanonicalName();\n\n\tpublic static final String ITEM_ID = \"ITEM_ID\";\n\tpublic static final String TITLE = \"TITLE\";\n\n    public static HashSet<Long> stayUnreadItems = new HashSet<>();\n\n\tprivate MenuItem menuItemDownloadMoreItems;\n\n\t@VisibleForTesting(otherwise = PROTECTED)\n\tpublic ActivityNewsreaderBinding binding;\n\n\t//private ServiceConnection mConnection = null;\n\n\tprivate ActionBarDrawerToggle drawerToggle;\n\tprivate SearchView mSearchView;\n\tprivate String mSearchString;\n\tprivate static final String SEARCH_KEY = \"SEARCH_KEY\";\n\n\tprivate PublishSubject<String> searchPublishSubject;\n\tprivate static final int REQUEST_CODE_PERMISSION_DOWNLOAD_WEB_ARCHIVE = 1;\n\n\tprivate static final String ID_FEED_STRING = \"ID_FEED_STRING\";\n\tprivate static final String IS_FOLDER_BOOLEAN = \"IS_FOLDER_BOOLEAN\";\n\tprivate static final String OPTIONAL_FOLDER_ID = \"OPTIONAL_FOLDER_ID\";\n\tprivate static final String LIST_ADAPTER_TOTAL_COUNT = \"LIST_ADAPTER_TOTAL_COUNT\";\n\tprivate static final String LIST_ADAPTER_PAGE_COUNT = \"LIST_ADAPTER_PAGE_COUNT\";\n\n\t@Inject\n\t@Named(\"sharedPreferencesFileName\")\n\tString sharedPreferencesFileName;\n\n\n\tprivate final View.OnClickListener mSnackbarListener = view -> {\n\t\t//Toast.makeText(getActivity(), \"button 1 pressed\", 3000).show();\n\t\tupdateCurrentRssView();\n\t};\n\n\t@Override\n\tpublic void onPostCreate(Bundle savedInstanceState) {\n\t\tsuper.onPostCreate(savedInstanceState);\n\n\t\tif (drawerToggle != null) {\n\t\t\tdrawerToggle.syncState();\n\t\t}\n\n\t\t// Fragments are not ready when calling the method below in onCreate()\n\t\tupdateButtonLayout();\n\n\t\t//Start auto sync if enabled\n\t\tif (mPrefs.getBoolean(SettingsActivity.CB_SYNCONSTARTUP_STRING, true)) {\n\t\t\tstartSync();\n\t\t}\n\t}\n\n\tprivate boolean isUserLoggedIn() {\n\t\treturn (mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING, null) != null);\n\t}\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\t((NewsReaderApplication) getApplication()).getAppComponent().injectActivity(this);\n\n\t\tSharedPreferences defaultValueSp = getSharedPreferences(PreferenceManager.KEY_HAS_SET_DEFAULT_VALUES, Context.MODE_PRIVATE);\n\t\tif (!defaultValueSp.getBoolean(PreferenceManager.KEY_HAS_SET_DEFAULT_VALUES, false)) {\n\t\t\tPreferenceManager.setDefaultValues(this, sharedPreferencesFileName, Context.MODE_PRIVATE, R.xml.pref_data_sync, true);\n\t\t\tPreferenceManager.setDefaultValues(this, sharedPreferencesFileName, Context.MODE_PRIVATE, R.xml.pref_display, true);\n\t\t\tPreferenceManager.setDefaultValues(this, sharedPreferencesFileName, Context.MODE_PRIVATE, R.xml.pref_general, true);\n\t\t}\n\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tbinding = ActivityNewsreaderBinding.inflate(getLayoutInflater());\n\t\tsetContentView(binding.getRoot());\n\n\t\tsetSupportActionBar(binding.toolbarLayout.toolbar);\n\n\t\tinitAccountManager();\n\n\t\tbinding.toolbarLayout.avatar.setVisibility(View.VISIBLE);\n\t\tbinding.toolbarLayout.avatar.setOnClickListener((v) -> startActivityForResult(new Intent(this, LoginDialogActivity.class), RESULT_LOGIN));\n\n\t\t// Init config --> if nothing is configured start the login dialog.\n\t\tif (!isUserLoggedIn()) {\n\t\t\tstartLoginActivity();\n\t\t}\n\n\n\t\tBundle args = new Bundle();\n\t\tString userName = mPrefs.getString(SettingsActivity.EDT_USERNAME_STRING, null);\n\t\tString url = mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING, null);\n\t\targs.putString(\"accountName\", String.format(\"%s\\n%s\", userName, url));\n\t\tNewsReaderListFragment newsReaderListFragment = new NewsReaderListFragment();\n\t\tnewsReaderListFragment.setArguments(args);\n\t\t// Insert the fragment by replacing any existing fragment\n\t\tFragmentManager fragmentManager = getSupportFragmentManager();\n\t\tfragmentManager.beginTransaction()\n\t\t\t\t.replace(R.id.left_drawer, newsReaderListFragment)\n\t\t\t\t.commit();\n\n\t\tif (binding.drawerLayout != null) {\n\t\t\tdrawerToggle = new ActionBarDrawerToggle(this, binding.drawerLayout, binding.toolbarLayout.toolbar, R.string.news_list_drawer_text, R.string.news_list_drawer_text) {\n\t\t\t\t@Override\n\t\t\t\tpublic void onDrawerClosed(View drawerView) {\n\t\t\t\t\tsuper.onDrawerClosed(drawerView);\n\n\t\t\t\t\tsyncState();\n\t\t\t\t\tEventBus.getDefault().post(new FeedPanelSlideEvent(false));\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onDrawerOpened(View drawerView) {\n\t\t\t\t\tsuper.onDrawerOpened(drawerView);\n\t\t\t\t\treloadCountNumbersOfSlidingPaneAdapter();\n\n\t\t\t\t\tsyncState();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tbinding.drawerLayout.addDrawerListener(drawerToggle);\n\n\t\t\tadjustEdgeSizeOfDrawer();\n\t\t}\n\t\tsetSupportActionBar(binding.toolbarLayout.toolbar);\n\t\tObjects.requireNonNull(getSupportActionBar()).setDisplayShowHomeEnabled(true);\n\t\tif (drawerToggle != null) {\n\t\t\tdrawerToggle.syncState();\n\t\t}\n\n\t\t//AppRater.app_launched(this);\n\t\t//AppRater.rateNow(this);\n\n\t\tif (savedInstanceState == null) { //When the app starts (no orientation change)\n\t\t\tupdateDetailFragment(SubscriptionExpandableListAdapter.SPECIAL_FOLDERS.ALL_UNREAD_ITEMS.getValue(), true, null, true);\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {\n\t\trestoreInstanceState(savedInstanceState);\n\t\tsuper.onRestoreInstanceState(savedInstanceState);\n\t}\n\n\t@Override\n\tprotected void onSaveInstanceState(@NonNull Bundle outState) {\n\t\tsaveInstanceState(outState);\n\t\tsuper.onSaveInstanceState(outState);\n\t}\n\n\tprivate void saveInstanceState(Bundle outState) {\n\t\tNewsReaderDetailFragment ndf = getNewsReaderDetailFragment();\n\t\tif (ndf != null) {\n\t\t\toutState.putLong(OPTIONAL_FOLDER_ID, ndf.getIdFolder());\n\t\t\toutState.putBoolean(IS_FOLDER_BOOLEAN, ndf.getIdFeed() == null);\n\t\t\toutState.putLong(ID_FEED_STRING, ndf.getIdFeed() != null ? ndf.getIdFeed() : ndf.getIdFolder());\n\n\t\t\tNewsListRecyclerAdapter adapter = (NewsListRecyclerAdapter) ndf.getRecyclerView().getAdapter();\n\t\t\tif (adapter != null) {\n\t\t\t\toutState.putInt(LIST_ADAPTER_TOTAL_COUNT, adapter.getTotalItemCount());\n\t\t\t\toutState.putInt(LIST_ADAPTER_PAGE_COUNT, adapter.getCachedPages());\n\t\t\t}\n\t\t}\n\t\tif (mSearchView != null) {\n\t\t\tmSearchString = mSearchView.getQuery().toString();\n\t\t\toutState.putString(SEARCH_KEY, mSearchString);\n        }\n    }\n\n    private void restoreInstanceState(Bundle savedInstanceState) {\n        if (savedInstanceState.containsKey(ID_FEED_STRING) &&\n                savedInstanceState.containsKey(IS_FOLDER_BOOLEAN) &&\n                savedInstanceState.containsKey(OPTIONAL_FOLDER_ID)) {\n\n\t\t\tNewsListRecyclerAdapter adapter = new NewsListRecyclerAdapter(this, getNewsReaderDetailFragment().binding.list, this, mPostDelayHandler, mPrefs);\n\n\t\t\tadapter.setTotalItemCount(savedInstanceState.getInt(LIST_ADAPTER_TOTAL_COUNT));\n\t\t\tadapter.setCachedPages(savedInstanceState.getInt(LIST_ADAPTER_PAGE_COUNT));\n\n\t\t\tgetNewsReaderDetailFragment()\n\t\t\t\t\t.getRecyclerView()\n\t\t\t\t\t.setAdapter(adapter);\n\n\t\t\tupdateDetailFragment(savedInstanceState.getLong(ID_FEED_STRING),\n\t\t\t\t\tsavedInstanceState.getBoolean(IS_FOLDER_BOOLEAN),\n\t\t\t\t\tsavedInstanceState.getLong(OPTIONAL_FOLDER_ID),\n\t\t\t\t\tfalse);\n\t\t}\n\t\tmSearchString = savedInstanceState.getString(SEARCH_KEY, null);\n\t}\n\n\t@Override\n\tpublic void onConfigurationChanged(@NonNull Configuration newConfig) {\n\t\tsuper.onConfigurationChanged(newConfig);\n\t\tif (drawerToggle != null) {\n\t\t\tdrawerToggle.onConfigurationChanged(newConfig);\n\t\t}\n\t}\n\n\t/**\n\t * This method increases the \"pull to open drawer\" area by three.\n\t * This method should be called only once!\n\t */\n\tprivate void adjustEdgeSizeOfDrawer() {\n\t\ttry {\n\t\t\t// increase the size of the drag margin to prevent starting a star swipe when\n\t\t\t// trying to open the drawer.\n\t\t\tField mDragger = Objects.requireNonNull(binding.drawerLayout).getClass().getDeclaredField(\"mLeftDragger\");\n\t\t\tmDragger.setAccessible(true);\n\t\t\tViewDragHelper draggerObj = (ViewDragHelper) mDragger.get(binding.drawerLayout);\n\t\t\tField mEdgeSize = Objects.requireNonNull(draggerObj).getClass().getDeclaredField(\"mEdgeSize\");\n\t\t\tmEdgeSize.setAccessible(true);\n\t\t\tint edge = mEdgeSize.getInt(draggerObj);\n\t\t\tmEdgeSize.setInt(draggerObj, edge * 3);\n\t\t} catch (Exception e) {\n\t\t\tLog.e(TAG, \"Setting edge width of drawer failed..\", e);\n\t\t}\n\t}\n\n\tpublic int getEdgeSizeOfDrawer() {\n\t\ttry {\n\t\t\tField mDragger = Objects.requireNonNull(binding.drawerLayout).getClass().getDeclaredField(\"mLeftDragger\");\n\t\t\tmDragger.setAccessible(true);\n\t\t\tViewDragHelper draggerObj = (ViewDragHelper) mDragger.get(binding.drawerLayout);\n\t\t\tField mEdgeSize = Objects.requireNonNull(draggerObj).getClass().getDeclaredField(\"mEdgeSize\");\n\t\t\tmEdgeSize.setAccessible(true);\n\t\t\treturn mEdgeSize.getInt(draggerObj);\n\t\t} catch (Exception e) {\n\t\t\tLog.e(TAG, \"Failed to get edge size of drawer\", e);\n\t\t}\n\t\treturn 0;\n\t}\n\n\n\t/**\n\t * Check if the account is in the Android Account Manager. If not it will be added automatically\n\t */\n\tprivate void initAccountManager() {\n\t\tAccountManager mAccountManager = AccountManager.get(this);\n\n\t\tboolean isAccountThere = false;\n\t\tAccount[] accounts = mAccountManager.getAccounts();\n\t\tString accountType = AccountGeneral.getAccountType(this);\n\t\tfor (Account account : accounts) {\n\t\t\tif (account.type.intern().equals(accountType)) {\n\t\t\t\tisAccountThere = true;\n\t\t\t}\n\t\t}\n\n\t\t//If the account is not in the Android Account Manager\n\t\tif (!isAccountThere) {\n\t\t\t//Then add the new account\n\t\t\tAccount account = new Account(getString(R.string.app_name), accountType);\n\t\t\tmAccountManager.addAccountExplicitly(account, \"\", new Bundle());\n\n\t\t\tSettingsFragment.setAccountSyncInterval(this, getResources().getInteger(R.integer.default_sync_minutes));\n\t\t}\n\t}\n\n\n\tpublic void reloadCountNumbersOfSlidingPaneAdapter() {\n\t\tNewsReaderListFragment nlf = getSlidingListFragment();\n\t\tif (nlf != null) {\n\t\t\tnlf.ListViewNotifyDataSetChanged();\n\t\t}\n\t}\n\n\tprotected void updateCurrentRssView() {\n\t\tNewsReaderDetailFragment ndf = getNewsReaderDetailFragment();\n\t\tif (ndf != null) {\n\t\t\t//ndf.reloadAdapterFromScratch();\n\t\t\tndf.updateCurrentRssView();\n\t\t}\n\t}\n\n\tpublic void switchToAllUnreadItemsFolder() {\n\t\tupdateDetailFragment(SubscriptionExpandableListAdapter.SPECIAL_FOLDERS.ALL_UNREAD_ITEMS.getValue(), true, null, true);\n\t}\n\n    @Subscribe(threadMode = ThreadMode.MAIN)\n    public void onEventMainThread(SyncFailedEvent event) {\n        Throwable exception = event.exception();\n\n        // If SSOException is wrapped inside another exception, we extract that SSOException\n        if(exception.getCause() != null && exception.getCause() instanceof SSOException) {\n            exception = exception.getCause();\n        }\n\n        if(exception instanceof SSOException){\n            if(exception instanceof NextcloudHttpRequestFailedException && ((NextcloudHttpRequestFailedException) exception).getStatusCode() == 302) {\n                ShowAlertDialog(\n                        getString(R.string.login_dialog_title_error),\n                        getString(R.string.login_dialog_text_news_app_not_installed_on_server,\n                                \"https://github.com/nextcloud/news/blob/master/docs/install.md#installing-from-the-app-store\"),\n                        this);\n            } else if (exception instanceof TokenMismatchException) {\n\t\t\t\tToast.makeText(NewsReaderListActivity.this, \"Token out of sync. Please reauthenticate\", Toast.LENGTH_LONG).show();\n\t\t\t\ttry {\n\t\t\t\t\tSingleAccountHelper.reauthenticateCurrentAccount(this);\n\t\t\t\t} catch (NextcloudFilesAppAccountNotFoundException | NoCurrentAccountSelectedException | NextcloudFilesAppNotSupportedException e) {\n\t\t\t\t\tUiExceptionManager.showDialogForException(this, e);\n\t\t\t\t} catch (NextcloudFilesAppAccountPermissionNotGrantedException e) {\n\t\t\t\t\t// Unable to reauthenticate account just like that..\n\t\t\t\t\tstartLoginActivity();\n\t\t\t\t}\n\t\t\t\t//StartLoginFragment(this);\n\t\t\t} else {\n\t\t\t\tUiExceptionManager.showDialogForException(this, (SSOException) exception);\n\t\t\t\t//UiExceptionManager.showNotificationForException(this, (SSOException) exception);\n\t\t\t}\n        } else {\n            Toast.makeText(NewsReaderListActivity.this, exception.getLocalizedMessage(), Toast.LENGTH_LONG).show();\n        }\n        updateButtonLayout();\n        syncFinishedHandler();\n    }\n\n    @Subscribe(threadMode = ThreadMode.MAIN)\n\tpublic void onEventMainThread(SyncStartedEvent event) {\n\t\tLog.d(TAG, \"onEventMainThread - SyncStartedEvent\");\n\t\tupdateButtonLayout();\n\t}\n\n    @Subscribe(threadMode = ThreadMode.MAIN)\n\tpublic void onEventMainThread(SyncFinishedEvent event) {\n\t\tLog.d(TAG, \"onEventMainThread - SyncFinishedEvent\");\n\t\tupdateButtonLayout();\n\t\tsyncFinishedHandler();\n\t}\n\n\t/**\n\t * @return true if new items count was greater than 0\n\t */\n\tprivate boolean syncFinishedHandler() {\n\t\tNewsReaderListFragment newsReaderListFragment = getSlidingListFragment();\n\t\tnewsReaderListFragment.reloadAdapter();\n\t\tUpdateItemList();\n\t\tupdatePodcastView();\n\n\t\tif(mApi.getNewsAPI() != null) {\n            getSlidingListFragment().startAsyncTaskGetUserInfo();\n        }\n\n\t\tint newItemsCount = mPrefs.getInt(Constants.LAST_UPDATE_NEW_ITEMS_COUNT_STRING, 0);\n\n\t\tif (newItemsCount > 0) {\n\t\t\tint firstVisiblePosition = getNewsReaderDetailFragment().getFirstVisibleScrollPosition();\n\n\t\t\t// Only show the update snackbar if scrollposition is not top.\n\t\t\t// 0 if scrolled all the way up\n\t\t\t// 1 if no items are visible right now (e.g. first sync)\n\t\t\tif (firstVisiblePosition == 0 || firstVisiblePosition == -1) {\n\t\t\t\tupdateCurrentRssView();\n\t\t\t} else {\n\t\t\t\tshowSnackbar(newItemsCount);\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\t// update rss view even if no new items are available\n\t\t\t// If the user just finished reading some articles (e.g. all unread items) - he most\n\t\t\t// likely wants  the read articles to be removed when the sync is finished\n\t\t\tupdateCurrentRssView();\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tNewsReaderListFragment newsReaderListFragment = getSlidingListFragment();\n\t\tif (newsReaderListFragment != null) {\n            newsReaderListFragment.reloadAdapter();\n\t\t\tnewsReaderListFragment.bindUserInfoToUI();\n\t\t}\n        invalidateOptionsMenu();\n\t\tsuper.onResume();\n\t}\n\n\t@Override\n\tprotected PodcastSlidingUpPanelLayout getPodcastSlidingUpPanelLayout() {\n\t\treturn binding.slidingLayout;\n\t}\n\n\t@Override\n\tpublic void onRefresh() {\n\t\tstartSync();\n\t}\n\n\tprivate void showSnackbar(int newItemsCount) {\n\t\tSnackbar snackbar = Snackbar.make(findViewById(R.id.coordinator_layout),\n\t\t\t\tgetResources().getQuantityString(R.plurals.message_bar_new_articles_available, newItemsCount, newItemsCount),\n\t\t\t\tSnackbar.LENGTH_LONG);\n\t\tsnackbar.setAction(getString(R.string.message_bar_reload), mSnackbarListener);\n\t\t//snackbar.setActionTextColor(ContextCompat.getColor(this, R.color.accent_material_dark));\n\t\t// Setting android:TextColor to #000 in the light theme results in black on black\n\t\t// text on the Snackbar, set the text back to white,\n\t\t//TextView textView = snackbar.getView().findViewById(com.google.android.material.R.id.snackbar_text);\n\t\t//textView.setTextColor(Color.WHITE);\n\t\tsnackbar.show();\n\t}\n\n\t/**\n\t * Callback method from {@link NewsReaderListFragment.Callbacks} indicating\n\t * that the item with the given ID was selected.\n\t */\n\t@Override\n\tpublic void onTopItemClicked(long idFeed, boolean isFolder, Long optional_folder_id) {\n\t\tif (binding.drawerLayout != null)\n\t\t\tbinding.drawerLayout.closeDrawer(GravityCompat.START);\n\n\t\tupdateDetailFragment(idFeed, isFolder, optional_folder_id, true);\n\t}\n\n\t@Override\n\tpublic void onChildItemClicked(long idFeed, Long optional_folder_id) {\n\t\tif (binding.drawerLayout != null)\n\t\t\tbinding.drawerLayout.closeDrawer(GravityCompat.START);\n\n\t\tupdateDetailFragment(idFeed, false, optional_folder_id, true);\n\t}\n\n\t@Override\n\tpublic void onTopItemLongClicked(long idFeed, boolean isFolder) {\n\t\tstartDialogFragment(idFeed, isFolder);\n\t}\n\n\t@Override\n\tpublic void onUserInfoUpdated(OcsUser userInfo) {\n\t\tfinal Drawable placeHolder = getDrawable(R.drawable.ic_baseline_account_circle_24);\n\t\tDisplayImageOptions displayImageOptions = new DisplayImageOptions.Builder()\n\t\t\t\t.displayer(new CircleBitmapDisplayer())\n\t\t\t\t.showImageOnLoading(placeHolder)\n\t\t\t\t.showImageForEmptyUri(placeHolder)\n\t\t\t\t.showImageOnFail(placeHolder)\n\t\t\t\t.cacheOnDisk(true)\n\t\t\t\t.cacheInMemory(true)\n\t\t\t\t.build();\n\n\t\tif (userInfo.getId() != null) {\n\t\t\tString mOc_root_path = mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING, null);\n\t\t\tString avatarUrl = mOc_root_path + \"/index.php/avatar/\" + Uri.encode(userInfo.getId()) + \"/64\";\n\t\t\tImageLoader.getInstance().displayImage(avatarUrl, binding.toolbarLayout.avatar, displayImageOptions);\n\t\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n\t\t\t\tbinding.toolbarLayout.avatar.setTooltipText(userInfo.getDisplayName());\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onChildItemLongClicked(long idFeed) {\n\t\tstartDialogFragment(idFeed, false);\n\t}\n\n\tprivate void startDialogFragment(long idFeed, Boolean isFolder) {\n\t\tDatabaseConnectionOrm dbConn = new DatabaseConnectionOrm(getApplicationContext());\n\n\t\tif (!isFolder) {\n\t\t\tString titel = dbConn.getFeedById(idFeed).getFeedTitle();\n\t\t\tString iconurl = dbConn.getFeedById(idFeed).getFaviconUrl();\n\t\t\tString feedurl = dbConn.getFeedById(idFeed).getLink();\n\n\t\t\tFragmentTransaction ft = getSupportFragmentManager().beginTransaction();\n\t\t\tFragment prev = getSupportFragmentManager().findFragmentByTag(\"news_reader_list_dialog\");\n\t\t\tif (prev != null) {\n\t\t\t\tft.remove(prev);\n\t\t\t}\n\t\t\tft.addToBackStack(null);\n\n\t\t\tNewsReaderListDialogFragment fragment = NewsReaderListDialogFragment.newInstance(idFeed, titel, iconurl, feedurl);\n\t\t\tfragment.setActivity(this);\n\t\t\tfragment.show(ft, \"news_reader_list_dialog\");\n\t\t}\n\t}\n\n\n    private NewsReaderDetailFragment updateDetailFragment(long id, Boolean folder, Long optional_folder_id, boolean updateListView) {\n        if(menuItemDownloadMoreItems != null) {\n            menuItemDownloadMoreItems.setEnabled(true);\n        }\n\n        DatabaseConnectionOrm dbConn = new DatabaseConnectionOrm(getApplicationContext());\n\n        Long feedId = null;\n        Long folderId;\n        String title = null;\n\n        if(!folder) {\n            feedId = id;\n            folderId = optional_folder_id;\n            title = dbConn.getFeedById(id).getFeedTitle();\n        } else {\n            folderId = id;\n            int idFolder = (int) id;\n            if(idFolder >= 0) {\n                title = dbConn.getFolderById(id).getLabel();\n            } else if(idFolder == -10) {\n                title = getString(R.string.allUnreadFeeds);\n            } else if(idFolder == -11) {\n                title = getString(R.string.starredFeeds);\n            }\n        }\n\n        NewsReaderDetailFragment fragment = getNewsReaderDetailFragment();\n        fragment.setData(feedId, folderId, title, updateListView);\n        return fragment;\n    }\n\n\n    public void UpdateItemList() {\n\t\ttry {\n\t\t\tNewsReaderDetailFragment nrD = getNewsReaderDetailFragment();\n\t\t\tif (nrD != null && nrD.getRecyclerView() != null) {\n\t\t\t\tnrD.getRecyclerView().getAdapter().notifyDataSetChanged();\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\tex.printStackTrace();\n        }\n    }\n\n\n    public void startSync()\n    {\n\t\tif(mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING, null) == null) {\n            startLoginActivity();\n\t\t} else {\n\t\t\tif (!OwnCloudSyncService.isSyncRunning()) {\n\t\t\t\tmPostDelayHandler.stopRunningPostDelayHandler(); //Stop pending sync handler\n\n\t\t\t\tBundle accBundle = new Bundle();\n\t\t\t\taccBundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL, true);\n\t\t\t\tAccountManager mAccountManager = AccountManager.get(this);\n\t\t\t\tAccount[] accounts = mAccountManager.getAccounts();\n\t\t\t\tfor(Account acc : accounts) {\n\t\t\t\t\tString accountType = AccountGeneral.getAccountType(this);\n\t\t\t\t\tif (acc.type.equals(accountType)) {\n                        ContentResolver.requestSync(acc, accountType, accBundle);\n                    }\n                }\n\t\t\t\t//http://stackoverflow.com/questions/5253858/why-does-contentresolver-requestsync-not-trigger-a-sync\n\t\t\t} else {\n\t\t\t\tupdateButtonLayout();\n\t\t\t}\n\t\t}\n    }\n\n\tpublic void updateButtonLayout()\n    {\n\t\tNewsReaderListFragment newsReaderListFragment = getSlidingListFragment();\n\t\tNewsReaderDetailFragment newsReaderDetailFragment = getNewsReaderDetailFragment();\n\n\t\tif(newsReaderListFragment != null && newsReaderDetailFragment != null) {\n\t\t\tboolean isSyncRunning = OwnCloudSyncService.isSyncRunning();\n\t\t\tnewsReaderListFragment.setRefreshing(isSyncRunning);\n\t\t\tnewsReaderDetailFragment.binding.swipeRefresh.setRefreshing(isSyncRunning);\n\t\t}\n    }\n\n\n\t@Override\n\tpublic boolean onCreateOptionsMenu(Menu menu) {\n\t\t// Inflate the menu; this adds items to the action bar if it is present.\n\t\tgetMenuInflater().inflate(R.menu.news_reader, menu);\n\n\t\tmenuItemDownloadMoreItems = menu.findItem(R.id.menu_downloadMoreItems);\n\n\t\tmenuItemDownloadMoreItems.setEnabled(false);\n\n\t\tMenuItem searchItem = menu.findItem(R.id.menu_search);\n\n        //Set expand listener to close keyboard\n        searchItem.setOnActionExpandListener(new MenuItem.OnActionExpandListener() {\n            @Override\n            public boolean onMenuItemActionExpand(MenuItem item) {\n\t\t\t\treturn true;\n\t\t\t}\n\n            @Override\n            public boolean onMenuItemActionCollapse(MenuItem item) {\n                //onQueryTextChange(\"\"); // Reset search\n                mSearchView.setQuery(\"\", true);\n                clearSearchViewFocus();\n                return true;\n            }\n        });\n\n\t\tmSearchView = (SearchView) menu.findItem(R.id.menu_search).getActionView();\n\t\tmSearchView.setIconifiedByDefault(false);\n\t\tmSearchView.setOnQueryTextListener(this);\n\t\tmSearchView.setOnQueryTextFocusChangeListener((v, hasFocus) -> {\n            if(!hasFocus) {\n                clearSearchViewFocus();\n            }\n        });\n\n        NewsReaderDetailFragment ndf = getNewsReaderDetailFragment();\n        if(ndf != null) {\n            ndf.updateMenuItemsState();\n        }\n\n        updateButtonLayout();\n\n        // focus the SearchView (if search view was active before orientation change)\n        if (mSearchString != null && !mSearchString.isEmpty()) {\n            searchItem.expandActionView();\n            mSearchView.setQuery(mSearchString, true);\n            mSearchView.clearFocus();\n        }\n\n        return true;\n\t}\n\n\tpublic MenuItem getMenuItemDownloadMoreItems() {\n\t\treturn menuItemDownloadMoreItems;\n\t}\n\n\t@Override\n\tpublic void onBackPressed() {\n        if(!handlePodcastBackPressed()) {\n\t\t\tif (binding.drawerLayout != null) {\n\t\t\t\tif (binding.drawerLayout.isDrawerOpen(GravityCompat.START))\n\t\t\t\t\tsuper.onBackPressed();\n\t\t\t\telse\n\t\t\t\t\tbinding.drawerLayout.openDrawer(GravityCompat.START);\n\t\t\t} else {\n\t\t\t\tsuper.onBackPressed();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static final int RESULT_SETTINGS = 15642;\n    public static final int RESULT_ADD_NEW_FEED = 15643;\n\n\t@Override\n\tpublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\n\t\tif (drawerToggle != null && drawerToggle.onOptionsItemSelected(item))\n\t\t\treturn true;\n\n\t\tint itemId = item.getItemId();\n\t\tif (itemId == android.R.id.home) {\n\t\t\tif (handlePodcastBackPressed())\n\t\t\t\treturn true;\n\t\t} else if (itemId == R.id.menu_update) {\n\t\t\tstartSync();\n\t\t} else if (itemId == R.id.menu_StartImageCaching) {\n\t\t\tfinal DatabaseConnectionOrm dbConn = new DatabaseConnectionOrm(this);\n\n\t\t\tlong highestItemId = dbConn.getLowestRssItemIdUnread();\n\n\n\t\t\tIntent data = new Intent();\n\t\t\tdata.putExtra(DownloadImagesService.LAST_ITEM_ID, highestItemId);\n\t\t\tdata.putExtra(DownloadImagesService.DOWNLOAD_MODE_STRING, DownloadImagesService.DownloadMode.PICTURES_ONLY);\n\t\t\tDownloadImagesService.enqueueWork(this, data);\n\t\t} else if (itemId == R.id.menu_CreateDatabaseDump) {\n\t\t\tDatabaseUtils.CopyDatabaseToSdCard(this);\n\n\t\t\tnew AlertDialog.Builder(this)\n\t\t\t\t\t.setMessage(\"Created dump at: \" + DatabaseUtils.GetPath(this))\n\t\t\t\t\t.setNeutralButton(getString(android.R.string.ok), null)\n\t\t\t\t\t.show();\n\t\t} else if (itemId == R.id.menu_markAllAsRead) {\n\t\t\tNewsReaderDetailFragment ndf = getNewsReaderDetailFragment();\n\t\t\tif (ndf != null) {\n\t\t\t\tDatabaseConnectionOrm dbConn2 = new DatabaseConnectionOrm(this);\n\t\t\t\tdbConn2.markAllItemsAsReadForCurrentView();\n\n\t\t\t\treloadCountNumbersOfSlidingPaneAdapter();\n\t\t\t\tndf.refreshCurrentRssView();\n\t\t\t}\n\t\t\treturn true;\n\t\t} else if (itemId == R.id.menu_downloadMoreItems) {\n\t\t\tDownloadMoreItems();\n\t\t\treturn true;\n\t\t} else if (itemId == R.id.menu_search) {\n\t\t\tmSearchView.setIconified(false);\n\t\t\tmSearchView.setFocusable(true);\n\t\t\tmSearchView.requestFocusFromTouch();\n\t\t\treturn true;\n\t\t} else if (itemId == R.id.menu_download_web_archive) {\n\t\t\tcheckAndStartDownloadWebPagesForOfflineReadingPermission();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onOptionsItemSelected(item);\n\t}\n\n\tprivate void checkAndStartDownloadWebPagesForOfflineReadingPermission() {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED &&\n                    checkSelfPermission(Manifest.permission.FOREGROUND_SERVICE) == PackageManager.PERMISSION_GRANTED) {\n                Log.v(\"Permission error\",\"You have permission\");\n                startDownloadWebPagesForOfflineReading();\n            } else {\n                Log.e(\"Permission error\",\"Asking for permission\");\n                requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.FOREGROUND_SERVICE}, REQUEST_CODE_PERMISSION_DOWNLOAD_WEB_ARCHIVE);\n            }\n        } else { //you dont need to worry about these stuff below api level 23\n            Log.v(\"Permission error\",\"You already have the permission\");\n            startDownloadWebPagesForOfflineReading();\n        }\n    }\n\n\tprivate void startDownloadWebPagesForOfflineReading() {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            startForegroundService(new Intent(this, DownloadWebPageService.class));\n        } else {\n            startService(new Intent(this, DownloadWebPageService.class));\n        }\n    }\n\n\tprivate void DownloadMoreItems() {\n\t\tfinal NewsReaderDetailFragment ndf = getNewsReaderDetailFragment();\n\n\t\t// Folder is selected.. download more items for all feeds in this folder\n\t\tif(ndf.getIdFeed() == null) {\n\t\t\tLong idFolder = ndf.getIdFolder();\n\n\t\t\tList<Integer> specialFolders = Arrays.asList(\n\t\t\t\t\tSubscriptionExpandableListAdapter.SPECIAL_FOLDERS.ALL_UNREAD_ITEMS.getValue(),\n\t\t\t\t\tSubscriptionExpandableListAdapter.SPECIAL_FOLDERS.ALL_STARRED_ITEMS.getValue(),\n\t\t\t\t\tSubscriptionExpandableListAdapter.SPECIAL_FOLDERS.ALL_ITEMS.getValue()\n\t\t\t);\n\t\t\t// if a special folder is selected, we can start the sync\n\t\t\tif (specialFolders.contains(idFolder.intValue())) {\n\t\t\t\tstartSync();\n\t\t\t} else {\n\t\t\t\t// Otherwise load more items for that particular folder and all its feeds\n\t\t\t\tDatabaseConnectionOrm dbConn = new DatabaseConnectionOrm(this);\n\t\t\t\tfor (Feed feed : dbConn.getFolderById(idFolder).getFeedList()) {\n\t\t\t\t\tdownloadMoreItemsForFeed(feed.getId());\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Single feed is selected.. download more items\n\t\t\tdownloadMoreItemsForFeed(ndf.getIdFeed());\n\t\t}\n\n\t\tToast.makeText(this, getString(R.string.toast_GettingMoreItems), Toast.LENGTH_SHORT).show();\n\t}\n\n\t@SuppressLint(\"CheckResult\")\n\tprivate void downloadMoreItemsForFeed(final Long feedId) {\n\t\tCompletable.fromAction(new Action() {\n\t\t\t@Override\n\t\t\tpublic void run() throws Exception {\n\t\t\t\tDatabaseConnectionOrm dbConn = new DatabaseConnectionOrm(NewsReaderListActivity.this);\n\t\t\t\tRssItem rssItem = dbConn.getLowestRssItemIdByFeed(feedId);\n\t\t\t\tlong offset = Long.MAX_VALUE;\n\t\t\t\tif(rssItem != null) {\n\t\t\t\t\toffset = rssItem.getId();\n\t\t\t\t}\n\t\t\t\tint type = 0; // the type of the query (Feed: 0, Folder: 1, Starred: 2, All: 3)\n\n\t\t\t\tList<RssItem> buffer = mApi.getNewsAPI().items(100, offset, type, feedId, true, false).execute().body();\n\t\t\t\tRssItemObservable.performDatabaseBatchInsert(dbConn, buffer);\n\t\t\t}\n\t\t})\n\t\t\t\t.subscribeOn(Schedulers.newThread())\n\t\t\t\t.observeOn(AndroidSchedulers.mainThread())\n\t\t\t\t.subscribe(() -> {\n\t\t\t\t\tupdateCurrentRssView();\n\t\t\t\t\tLog.v(TAG, \"Finished Download extra items..\");\n\t\t\t\t}, throwable -> {\n\t\t\t\t\tthrowable.printStackTrace();\n\t\t\t\t\tThrowable e = OkHttpSSLClient.HandleExceptions(throwable);\n\t\t\t\t\tToast.makeText(NewsReaderListActivity.this, getString(R.string.login_dialog_text_something_went_wrong) + \" - \" + e.getMessage(), Toast.LENGTH_SHORT).show();\n\t\t\t\t});\n\t}\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, final Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n\n        if(resultCode == RESULT_OK) {\n            UpdateListView();\n            getSlidingListFragment().ListViewNotifyDataSetChanged();\n        }\n\n\t\tif (requestCode == RESULT_LOGIN) {\n\t\t\tIntent intent = getIntent().putExtra(PREF_SERVER_SETTINGS, true);\n\t\t\tsetResult(RESULT_OK, intent);\n\t\t}\n\n        if(requestCode == RESULT_SETTINGS) {\n        \t// Extra is set if user entered/modified server settings\n        \tif (data == null || data.getBooleanExtra(PREF_SERVER_SETTINGS,false)) {\n\t\t\t\tresetUiAndStartSync();\n\t\t\t} else {\n\t\t\t\t//Update settings of image Loader\n\t\t\t\tmApi.initApi(new NextcloudAPI.ApiConnectedListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onConnected() {\n\t\t\t\t\t\tensureCorrectTheme(data);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onError(Exception ex) {\n\t\t\t\t\t\tensureCorrectTheme(data);\n\t\t\t\t\t\tex.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n        } else if(requestCode == RESULT_ADD_NEW_FEED) {\n            if(data != null) {\n                boolean val = data.getBooleanExtra(NewFeedActivity.ADD_NEW_SUCCESS, false);\n                if (val) {\n                    startSync();\n                }\n            }\n        } else if(requestCode == RESULT_LOGIN) {\n            resetUiAndStartSync();\n        }\n\n\n        try {\n            AccountImporter.onActivityResult(requestCode, resultCode, data, this, account -> {\n                Log.d(TAG, \"accountAccessGranted() called with: account = [\" + account + \"]\");\n                mApi.initApi(new NextcloudAPI.ApiConnectedListener() {\n                    @Override\n                    public void onConnected() {\n                        Log.d(TAG, \"onConnected() called\");\n                    }\n\n                    @Override\n                    public void onError(Exception ex) {\n                        Log.e(TAG, \"onError() called with:\", ex);\n                    }\n                });\n\n            });\n        } catch (AccountImportCancelledException ignored) {\n        }\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n\n        if(grantResults.length > 0 &&  grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n            if(requestCode == REQUEST_CODE_PERMISSION_DOWNLOAD_WEB_ARCHIVE) {\n                startDownloadWebPagesForOfflineReading();\n            } else {\n                Log.d(TAG, \"No action defined here yet..\");\n            }\n        }\n    }\n\n    private void ensureCorrectTheme(Intent data) {\n        String oldListLayout = data.getStringExtra(SettingsActivity.SP_FEED_LIST_LAYOUT);\n        String newListLayout = mPrefs.getString(SettingsActivity.SP_FEED_LIST_LAYOUT,\"0\");\n\n        if (ThemeChooser.themeRequiresRestartOfUI() || !newListLayout.equals(oldListLayout)) {\n            NewsReaderListActivity.this.recreate();\n        } else if (data.hasExtra(SettingsActivity.CACHE_CLEARED)) {\n            resetUiAndStartSync();\n        }\n    }\n\n    @VisibleForTesting\n\tpublic NewsReaderListFragment getSlidingListFragment() {\n\t\treturn ((NewsReaderListFragment) getSupportFragmentManager().findFragmentById(R.id.left_drawer));\n\t}\n\n    @VisibleForTesting\n    public NewsReaderDetailFragment getNewsReaderDetailFragment() {\n\t\t return (NewsReaderDetailFragment) getSupportFragmentManager().findFragmentById(R.id.content_frame);\n\t}\n\n    public void startLoginActivity() {\n        Intent loginIntent = new Intent(this, LoginDialogActivity.class);\n        startActivityForResult(loginIntent, RESULT_LOGIN);\n    }\n\n    private void resetUiAndStartSync() {\n        getSlidingListFragment().reloadAdapter();\n\t\tupdateCurrentRssView();\n\t\tstartSync();\n\t\tgetSlidingListFragment().bindUserInfoToUI();\n\t}\n\n\tprivate void UpdateListView() {\n\t\tgetNewsReaderDetailFragment().notifyDataSetChangedOnAdapter();\n\t}\n\n\t@Override\n\tpublic void onClick(RssItemViewHolder vh, int position) {\n\n\t\tif (mPrefs.getBoolean(SettingsActivity.CB_SKIP_DETAILVIEW_AND_OPEN_BROWSER_DIRECTLY_STRING, false)) {\n\t\t\tString currentUrl = vh.getRssItem().getLink();\n\n\t\t\t//Choose Browser based on user settings\n\t\t\t//modified copy from NewsDetailFragment.java:loadUrl(String url)\n\t\t\tint selectedBrowser = Integer.parseInt(mPrefs.getString(SettingsActivity.SP_DISPLAY_BROWSER, \"0\"));\n\t\t\tif (selectedBrowser == 0) { // Custom Tabs\n\t\t\t\tCustomTabsIntent.Builder builder = new CustomTabsIntent.Builder()\n\t\t\t\t\t\t.setToolbarColor(ContextCompat.getColor(this, R.color.colorPrimary))\n\t\t\t\t\t\t.setShowTitle(true)\n\t\t\t\t\t\t.setStartAnimations(this, R.anim.slide_in_right, R.anim.slide_out_left)\n\t\t\t\t\t\t.setExitAnimations(this, R.anim.slide_in_left, R.anim.slide_out_right)\n\t\t\t\t\t\t.addDefaultShareMenuItem();\n\t\t\t\tbuilder.build().launchUrl(this, Uri.parse(currentUrl));\n\t\t\t} else { //External browser\n\t\t\t\tIntent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(currentUrl));\n\t\t\t\tstartActivity(browserIntent);\n\t\t\t}\n\n\t\t\t((NewsListRecyclerAdapter) getNewsReaderDetailFragment().getRecyclerView().getAdapter()).changeReadStateOfItem(vh, true);\n\t\t} else {\n\t\t\tIntent intentNewsDetailAct = new Intent(this, NewsDetailActivity.class);\n\n\t\t\tintentNewsDetailAct.putExtra(NewsReaderListActivity.ITEM_ID, position);\n\t\t\tintentNewsDetailAct.putExtra(NewsReaderListActivity.TITLE, getNewsReaderDetailFragment().getTitel());\n\t\t\tstartActivityForResult(intentNewsDetailAct, Activity.RESULT_CANCELED);\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onLongClick(RssItemViewHolder vh, int position) {\n\t\tRssItem rssItem = vh.getRssItem();\n\t\tDialogFragment newFragment =\n\t\t\t\tNewsDetailImageDialogFragment.newInstanceUrl(rssItem.getTitle(), rssItem.getLink());\n\t\tFragmentTransaction ft = getSupportFragmentManager().beginTransaction();\n\t\tFragment prev = getSupportFragmentManager().findFragmentByTag(\"menu_fragment_dialog\");\n\t\tif (prev != null) {\n\t\t\tft.remove(prev);\n\t\t}\n\t\tft.addToBackStack(null);\n\t\tnewFragment.show(ft, \"menu_fragment_dialog\");\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic boolean onQueryTextSubmit(String query) {\n\t\tclearSearchViewFocus();\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic boolean onQueryTextChange(String newText) {\n        if (searchPublishSubject == null) {\n            searchPublishSubject = PublishSubject.create();\n            searchPublishSubject\n                    .debounce(400, TimeUnit.MILLISECONDS)\n                    .distinctUntilChanged()\n                    .map(s -> getNewsReaderDetailFragment().performSearch(s))\n                    .subscribeOn(Schedulers.io())\n                    .observeOn(AndroidSchedulers.mainThread())\n                    .subscribeWith(getNewsReaderDetailFragment().searchResultObserver)\n                    .isDisposed();\n\n        }\n        searchPublishSubject.onNext(newText);\n        return true;\n    }\n\n    public void clearSearchViewFocus() {\n        mSearchView.clearFocus();\n    }\n}\n", "/*\n* Android ownCloud News\n*\n* @author David Luhmer\n* @copyright 2013 David Luhmer david-dev@live.de\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n* License as published by the Free Software Foundation; either\n* version 3 of the License, or any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n*\n* You should have received a copy of the GNU Affero General Public\n* License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*\n*/\n\npackage de.luhmer.owncloudnewsreader;\n\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.preference.PreferenceActivity;\nimport android.view.MenuItem;\n\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.appcompat.widget.Toolbar;\n\nimport javax.inject.Inject;\n\nimport de.luhmer.owncloudnewsreader.helper.ThemeChooser;\n\nimport static de.luhmer.owncloudnewsreader.LoginDialogActivity.RESULT_LOGIN;\n\n/**\n* A {@link PreferenceActivity} that presents a set of application settings. On\n* handset devices, settings are presented as a single list. On tablets,\n* settings are split by category, with category headers shown to the left of\n* the list of settings.\n* <p>\n* See <a href=\"http://developer.android.com/design/patterns/settings.html\">\n* Android Design: Settings</a> for design guidelines and the <a\n* href=\"http://developer.android.com/guide/topics/ui/settings.html\">Settings\n* API Guide</a> for more information on developing a Settings UI.\n*/\npublic class SettingsActivity extends AppCompatActivity {\n\n    private static final String TAG = SettingsActivity.class.getCanonicalName();\n\n    /**\n     * Determines whether to always show the simplified settings UI, where\n     * settings are presented in a single list. When false, settings are shown\n     * as a master/detail two-pane view on tablets. When true, a single pane is\n     * shown on tablets.\n     */\n    public static final String EDT_USERNAME_STRING = \"edt_username\";\n    public static final String EDT_PASSWORD_STRING = \"edt_password\";\n    public static final String EDT_OWNCLOUDROOTPATH_STRING = \"edt_owncloudRootPath\";\n    public static final String SW_USE_SINGLE_SIGN_ON = \"sw_use_single_sign_on\";\n    public static final String EDT_CLEAR_CACHE = \"edt_clearCache\";\n\n    //public static final String CB_ALLOWALLSSLCERTIFICATES_STRING = \"cb_AllowAllSSLCertificates\";\n    public static final String CB_SYNCONSTARTUP_STRING = \"cb_AutoSyncOnStart\";\n    public static final String CB_SHOWONLYUNREAD_STRING = \"cb_ShowOnlyUnread\";\n    public static final String CB_NAVIGATE_WITH_VOLUME_BUTTONS_STRING = \"cb_NavigateWithVolumeButtons\";\n\n    public static final String LV_CACHE_IMAGES_OFFLINE_STRING = \"lv_cacheImagesOffline\";\n\n    public static final String CB_MARK_AS_READ_WHILE_SCROLLING_STRING = \"cb_MarkAsReadWhileScrolling\";\n    public static final String CB_SHOW_FAST_ACTIONS = \"cb_ShowFastActions\";\n    public static final String CB_DISABLE_HOSTNAME_VERIFICATION_STRING = \"cb_DisableHostnameVerification\";\n    public static final String CB_SKIP_DETAILVIEW_AND_OPEN_BROWSER_DIRECTLY_STRING = \"cb_openInBrowserDirectly\";\n\n    //public static final String CB_ENABLE_PODCASTS_STRING = \"cb_enablePodcasts\";\n\n    public static final String PREF_SERVER_SETTINGS = \"pref_server_settings\";\n    public static final String PREF_SYNC_SETTINGS = \"pref_sync_settings\";\n    public static final String SYNC_INTERVAL_IN_MINUTES_STRING_DEPRECATED = \"SYNC_INTERVAL_IN_MINUTES_STRING\";\n\n    public static final String SP_APP_THEME = \"sp_app_theme\";\n    public static final String CB_OLED_MODE = \"cb_oled_mode\";\n\n    public static final String SP_FEED_LIST_LAYOUT = \"sp_feed_list_layout\";\n    public static final String SP_FONT_SIZE = \"sp_font_size\";\n\n    public static final String CACHE_CLEARED = \"CACHE_CLEARED\";\n    public static final String SP_MAX_CACHE_SIZE = \"sp_max_cache_size\";\n    public static final String SP_SORT_ORDER = \"sp_sort_order\";\n    public static final String SP_DISPLAY_BROWSER = \"sp_display_browser\";\n    public static final String SP_SEARCH_IN = \"sp_search_in\";\n    public static final String SP_SWIPE_RIGHT_ACTION = \"sp_swipe_right_action\";\n    public static final String SP_SWIPE_LEFT_ACTION = \"sp_swipe_left_action\";\n    public static final String SP_SWIPE_RIGHT_ACTION_DEFAULT = \"1\";\n    public static final String SP_SWIPE_LEFT_ACTION_DEFAULT = \"2\";\n\n    public static final String CB_VERSION = \"cb_version\";\n    public static final String CB_REPORT_ISSUE = \"cb_reportIssue\";\n\n    protected @Inject SharedPreferences mPrefs;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ((NewsReaderApplication) getApplication()).getAppComponent().injectActivity(this);\n\n        ThemeChooser.chooseTheme(this);\n        super.onCreate(savedInstanceState);\n        ThemeChooser.afterOnCreate(this);\n\n        setContentView(R.layout.activity_settings);\n\n        setupActionBar();\n    }\n\n    @Override\n    protected void onPostCreate(Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n\n        getSupportFragmentManager()\n                .beginTransaction()\n                .replace(R.id.container, new SettingsFragment())\n                .commit();\n    }\n\n\n    private void setupActionBar() {\n        Toolbar toolbar = findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        getSupportActionBar().setDisplayShowHomeEnabled(true);\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n        getSupportActionBar().setTitle(R.string.title_activity_settings);\n    }\n\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case android.R.id.home:\n                finish();\n                return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        Intent intent = getIntent();\n        intent.putExtra(\n                SettingsActivity.SP_FEED_LIST_LAYOUT,\n                mPrefs.getString(SettingsActivity.SP_FEED_LIST_LAYOUT, \"0\")\n        );\n        setResult(RESULT_OK,intent);\n    }\n}\n"], "fixing_code": ["/*\n* Android ownCloud News\n*\n* @author David Luhmer\n* @copyright 2013 David Luhmer david-dev@live.de\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n* License as published by the Free Software Foundation; either\n* version 3 of the License, or any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n*\n* You should have received a copy of the GNU Affero General Public\n* License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*\n*/\n\npackage de.luhmer.owncloudnewsreader;\n\nimport static androidx.annotation.VisibleForTesting.PROTECTED;\nimport static de.luhmer.owncloudnewsreader.LoginDialogActivity.RESULT_LOGIN;\nimport static de.luhmer.owncloudnewsreader.LoginDialogActivity.ShowAlertDialog;\nimport static de.luhmer.owncloudnewsreader.SettingsActivity.PREF_SERVER_SETTINGS;\n\nimport android.Manifest;\nimport android.accounts.Account;\nimport android.accounts.AccountManager;\nimport android.annotation.SuppressLint;\nimport android.app.Activity;\nimport android.content.ContentResolver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.content.pm.PackageManager;\nimport android.content.res.Configuration;\nimport android.graphics.drawable.Drawable;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.SearchView;\nimport android.widget.Toast;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.VisibleForTesting;\nimport androidx.appcompat.app.ActionBarDrawerToggle;\nimport androidx.appcompat.app.AlertDialog;\nimport androidx.browser.customtabs.CustomTabsIntent;\nimport androidx.core.content.ContextCompat;\nimport androidx.core.view.GravityCompat;\nimport androidx.customview.widget.ViewDragHelper;\nimport androidx.fragment.app.DialogFragment;\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentManager;\nimport androidx.fragment.app.FragmentTransaction;\nimport androidx.preference.PreferenceManager;\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\n\nimport com.google.android.material.snackbar.Snackbar;\nimport com.nextcloud.android.sso.AccountImporter;\nimport com.nextcloud.android.sso.api.NextcloudAPI;\nimport com.nextcloud.android.sso.exceptions.AccountImportCancelledException;\nimport com.nextcloud.android.sso.exceptions.NextcloudFilesAppAccountNotFoundException;\nimport com.nextcloud.android.sso.exceptions.NextcloudFilesAppAccountPermissionNotGrantedException;\nimport com.nextcloud.android.sso.exceptions.NextcloudFilesAppNotSupportedException;\nimport com.nextcloud.android.sso.exceptions.NextcloudHttpRequestFailedException;\nimport com.nextcloud.android.sso.exceptions.NoCurrentAccountSelectedException;\nimport com.nextcloud.android.sso.exceptions.SSOException;\nimport com.nextcloud.android.sso.exceptions.TokenMismatchException;\nimport com.nextcloud.android.sso.helper.SingleAccountHelper;\nimport com.nextcloud.android.sso.ui.UiExceptionManager;\nimport com.nostra13.universalimageloader.core.DisplayImageOptions;\nimport com.nostra13.universalimageloader.core.ImageLoader;\nimport com.nostra13.universalimageloader.core.display.CircleBitmapDisplayer;\n\nimport org.greenrobot.eventbus.EventBus;\nimport org.greenrobot.eventbus.Subscribe;\nimport org.greenrobot.eventbus.ThreadMode;\n\nimport java.lang.reflect.Field;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\n\nimport de.luhmer.owncloudnewsreader.ListView.SubscriptionExpandableListAdapter;\nimport de.luhmer.owncloudnewsreader.adapter.NewsListRecyclerAdapter;\nimport de.luhmer.owncloudnewsreader.adapter.RecyclerItemClickListener;\nimport de.luhmer.owncloudnewsreader.adapter.RssItemViewHolder;\nimport de.luhmer.owncloudnewsreader.authentication.AccountGeneral;\nimport de.luhmer.owncloudnewsreader.database.DatabaseConnectionOrm;\nimport de.luhmer.owncloudnewsreader.database.model.Feed;\nimport de.luhmer.owncloudnewsreader.database.model.RssItem;\nimport de.luhmer.owncloudnewsreader.databinding.ActivityNewsreaderBinding;\nimport de.luhmer.owncloudnewsreader.events.podcast.FeedPanelSlideEvent;\nimport de.luhmer.owncloudnewsreader.helper.DatabaseUtils;\nimport de.luhmer.owncloudnewsreader.helper.ThemeChooser;\nimport de.luhmer.owncloudnewsreader.model.OcsUser;\nimport de.luhmer.owncloudnewsreader.reader.nextcloud.RssItemObservable;\nimport de.luhmer.owncloudnewsreader.services.DownloadImagesService;\nimport de.luhmer.owncloudnewsreader.services.DownloadWebPageService;\nimport de.luhmer.owncloudnewsreader.services.OwnCloudSyncService;\nimport de.luhmer.owncloudnewsreader.services.events.SyncFailedEvent;\nimport de.luhmer.owncloudnewsreader.services.events.SyncFinishedEvent;\nimport de.luhmer.owncloudnewsreader.services.events.SyncStartedEvent;\nimport de.luhmer.owncloudnewsreader.ssl.OkHttpSSLClient;\nimport de.luhmer.owncloudnewsreader.view.PodcastSlidingUpPanelLayout;\nimport io.reactivex.Completable;\nimport io.reactivex.android.schedulers.AndroidSchedulers;\nimport io.reactivex.functions.Action;\nimport io.reactivex.schedulers.Schedulers;\nimport io.reactivex.subjects.PublishSubject;\n\n/**\n * An activity representing a list of NewsReader. This activity has different\n * presentations for handset and tablet-size devices.\n * The activity makes heavy use of fragments. The list of items is a\n * {@link NewsReaderListFragment} and the item details (if present) is a\n * {@link NewsReaderDetailFragment}.\n * <p>\n * This activity also implements the required\n * {@link NewsReaderListFragment.Callbacks} interface to listen for item\n * selections.\n */\npublic class NewsReaderListActivity extends PodcastFragmentActivity implements\n\t\t NewsReaderListFragment.Callbacks, RecyclerItemClickListener, SwipeRefreshLayout.OnRefreshListener, SearchView.OnQueryTextListener {\n\n\tprivate static final String TAG = NewsReaderListActivity.class.getCanonicalName();\n\n\tpublic static final String ITEM_ID = \"ITEM_ID\";\n\tpublic static final String TITLE = \"TITLE\";\n\n    public static HashSet<Long> stayUnreadItems = new HashSet<>();\n\n\tprivate MenuItem menuItemDownloadMoreItems;\n\n\t@VisibleForTesting(otherwise = PROTECTED)\n\tpublic ActivityNewsreaderBinding binding;\n\n\t//private ServiceConnection mConnection = null;\n\n\tprivate ActionBarDrawerToggle drawerToggle;\n\tprivate SearchView mSearchView;\n\tprivate String mSearchString;\n\tprivate static final String SEARCH_KEY = \"SEARCH_KEY\";\n\n\tprivate PublishSubject<String> searchPublishSubject;\n\tprivate static final int REQUEST_CODE_PERMISSION_DOWNLOAD_WEB_ARCHIVE = 1;\n\n\tprivate static final String ID_FEED_STRING = \"ID_FEED_STRING\";\n\tprivate static final String IS_FOLDER_BOOLEAN = \"IS_FOLDER_BOOLEAN\";\n\tprivate static final String OPTIONAL_FOLDER_ID = \"OPTIONAL_FOLDER_ID\";\n\tprivate static final String LIST_ADAPTER_TOTAL_COUNT = \"LIST_ADAPTER_TOTAL_COUNT\";\n\tprivate static final String LIST_ADAPTER_PAGE_COUNT = \"LIST_ADAPTER_PAGE_COUNT\";\n\n\t@Inject\n\t@Named(\"sharedPreferencesFileName\")\n\tString sharedPreferencesFileName;\n\n\n\tprivate final View.OnClickListener mSnackbarListener = view -> {\n\t\t//Toast.makeText(getActivity(), \"button 1 pressed\", 3000).show();\n\t\tupdateCurrentRssView();\n\t};\n\n\t@Override\n\tpublic void onPostCreate(Bundle savedInstanceState) {\n\t\tsuper.onPostCreate(savedInstanceState);\n\n\t\tif (drawerToggle != null) {\n\t\t\tdrawerToggle.syncState();\n\t\t}\n\n\t\t// Fragments are not ready when calling the method below in onCreate()\n\t\tupdateButtonLayout();\n\n\t\t//Start auto sync if enabled\n\t\tif (mPrefs.getBoolean(SettingsActivity.CB_SYNCONSTARTUP_STRING, true)) {\n\t\t\tstartSync();\n\t\t}\n\t}\n\n\tprivate boolean isUserLoggedIn() {\n\t\treturn (mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING, null) != null);\n\t}\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\t((NewsReaderApplication) getApplication()).getAppComponent().injectActivity(this);\n\n\t\tSharedPreferences defaultValueSp = getSharedPreferences(PreferenceManager.KEY_HAS_SET_DEFAULT_VALUES, Context.MODE_PRIVATE);\n\t\tif (!defaultValueSp.getBoolean(PreferenceManager.KEY_HAS_SET_DEFAULT_VALUES, false)) {\n\t\t\tPreferenceManager.setDefaultValues(this, sharedPreferencesFileName, Context.MODE_PRIVATE, R.xml.pref_data_sync, true);\n\t\t\tPreferenceManager.setDefaultValues(this, sharedPreferencesFileName, Context.MODE_PRIVATE, R.xml.pref_display, true);\n\t\t\tPreferenceManager.setDefaultValues(this, sharedPreferencesFileName, Context.MODE_PRIVATE, R.xml.pref_general, true);\n\t\t}\n\n\t\tsuper.onCreate(savedInstanceState);\n\n\t\tbinding = ActivityNewsreaderBinding.inflate(getLayoutInflater());\n\t\tsetContentView(binding.getRoot());\n\n\t\tsetSupportActionBar(binding.toolbarLayout.toolbar);\n\n\t\tinitAccountManager();\n\n\t\tbinding.toolbarLayout.avatar.setVisibility(View.VISIBLE);\n\t\tbinding.toolbarLayout.avatar.setOnClickListener((v) -> startActivityForResult(new Intent(this, LoginDialogActivity.class), RESULT_LOGIN));\n\n\t\t// Init config --> if nothing is configured start the login dialog.\n\t\tif (!isUserLoggedIn()) {\n\t\t\tstartLoginActivity();\n\t\t}\n\n\n\t\tBundle args = new Bundle();\n\t\tString userName = mPrefs.getString(SettingsActivity.EDT_USERNAME_STRING, null);\n\t\tString url = mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING, null);\n\t\targs.putString(\"accountName\", String.format(\"%s\\n%s\", userName, url));\n\t\tNewsReaderListFragment newsReaderListFragment = new NewsReaderListFragment();\n\t\tnewsReaderListFragment.setArguments(args);\n\t\t// Insert the fragment by replacing any existing fragment\n\t\tFragmentManager fragmentManager = getSupportFragmentManager();\n\t\tfragmentManager.beginTransaction()\n\t\t\t\t.replace(R.id.left_drawer, newsReaderListFragment)\n\t\t\t\t.commit();\n\n\t\tif (binding.drawerLayout != null) {\n\t\t\tdrawerToggle = new ActionBarDrawerToggle(this, binding.drawerLayout, binding.toolbarLayout.toolbar, R.string.news_list_drawer_text, R.string.news_list_drawer_text) {\n\t\t\t\t@Override\n\t\t\t\tpublic void onDrawerClosed(View drawerView) {\n\t\t\t\t\tsuper.onDrawerClosed(drawerView);\n\n\t\t\t\t\tsyncState();\n\t\t\t\t\tEventBus.getDefault().post(new FeedPanelSlideEvent(false));\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onDrawerOpened(View drawerView) {\n\t\t\t\t\tsuper.onDrawerOpened(drawerView);\n\t\t\t\t\treloadCountNumbersOfSlidingPaneAdapter();\n\n\t\t\t\t\tsyncState();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tbinding.drawerLayout.addDrawerListener(drawerToggle);\n\n\t\t\tadjustEdgeSizeOfDrawer();\n\t\t}\n\t\tsetSupportActionBar(binding.toolbarLayout.toolbar);\n\t\tObjects.requireNonNull(getSupportActionBar()).setDisplayShowHomeEnabled(true);\n\t\tif (drawerToggle != null) {\n\t\t\tdrawerToggle.syncState();\n\t\t}\n\n\t\t//AppRater.app_launched(this);\n\t\t//AppRater.rateNow(this);\n\n\t\tif (savedInstanceState == null) { //When the app starts (no orientation change)\n\t\t\tupdateDetailFragment(SubscriptionExpandableListAdapter.SPECIAL_FOLDERS.ALL_UNREAD_ITEMS.getValue(), true, null, true);\n\t\t}\n\t}\n\n\t@Override\n\tprotected void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {\n\t\trestoreInstanceState(savedInstanceState);\n\t\tsuper.onRestoreInstanceState(savedInstanceState);\n\t}\n\n\t@Override\n\tprotected void onSaveInstanceState(@NonNull Bundle outState) {\n\t\tsaveInstanceState(outState);\n\t\tsuper.onSaveInstanceState(outState);\n\t}\n\n\tprivate void saveInstanceState(Bundle outState) {\n\t\tNewsReaderDetailFragment ndf = getNewsReaderDetailFragment();\n\t\tif (ndf != null) {\n\t\t\toutState.putLong(OPTIONAL_FOLDER_ID, ndf.getIdFolder());\n\t\t\toutState.putBoolean(IS_FOLDER_BOOLEAN, ndf.getIdFeed() == null);\n\t\t\toutState.putLong(ID_FEED_STRING, ndf.getIdFeed() != null ? ndf.getIdFeed() : ndf.getIdFolder());\n\n\t\t\tNewsListRecyclerAdapter adapter = (NewsListRecyclerAdapter) ndf.getRecyclerView().getAdapter();\n\t\t\tif (adapter != null) {\n\t\t\t\toutState.putInt(LIST_ADAPTER_TOTAL_COUNT, adapter.getTotalItemCount());\n\t\t\t\toutState.putInt(LIST_ADAPTER_PAGE_COUNT, adapter.getCachedPages());\n\t\t\t}\n\t\t}\n\t\tif (mSearchView != null) {\n\t\t\tmSearchString = mSearchView.getQuery().toString();\n\t\t\toutState.putString(SEARCH_KEY, mSearchString);\n        }\n    }\n\n    private void restoreInstanceState(Bundle savedInstanceState) {\n        if (savedInstanceState.containsKey(ID_FEED_STRING) &&\n                savedInstanceState.containsKey(IS_FOLDER_BOOLEAN) &&\n                savedInstanceState.containsKey(OPTIONAL_FOLDER_ID)) {\n\n\t\t\tNewsListRecyclerAdapter adapter = new NewsListRecyclerAdapter(this, getNewsReaderDetailFragment().binding.list, this, mPostDelayHandler, mPrefs);\n\n\t\t\tadapter.setTotalItemCount(savedInstanceState.getInt(LIST_ADAPTER_TOTAL_COUNT));\n\t\t\tadapter.setCachedPages(savedInstanceState.getInt(LIST_ADAPTER_PAGE_COUNT));\n\n\t\t\tgetNewsReaderDetailFragment()\n\t\t\t\t\t.getRecyclerView()\n\t\t\t\t\t.setAdapter(adapter);\n\n\t\t\tupdateDetailFragment(savedInstanceState.getLong(ID_FEED_STRING),\n\t\t\t\t\tsavedInstanceState.getBoolean(IS_FOLDER_BOOLEAN),\n\t\t\t\t\tsavedInstanceState.getLong(OPTIONAL_FOLDER_ID),\n\t\t\t\t\tfalse);\n\t\t}\n\t\tmSearchString = savedInstanceState.getString(SEARCH_KEY, null);\n\t}\n\n\t@Override\n\tpublic void onConfigurationChanged(@NonNull Configuration newConfig) {\n\t\tsuper.onConfigurationChanged(newConfig);\n\t\tif (drawerToggle != null) {\n\t\t\tdrawerToggle.onConfigurationChanged(newConfig);\n\t\t}\n\t}\n\n\t/**\n\t * This method increases the \"pull to open drawer\" area by three.\n\t * This method should be called only once!\n\t */\n\tprivate void adjustEdgeSizeOfDrawer() {\n\t\ttry {\n\t\t\t// increase the size of the drag margin to prevent starting a star swipe when\n\t\t\t// trying to open the drawer.\n\t\t\tField mDragger = Objects.requireNonNull(binding.drawerLayout).getClass().getDeclaredField(\"mLeftDragger\");\n\t\t\tmDragger.setAccessible(true);\n\t\t\tViewDragHelper draggerObj = (ViewDragHelper) mDragger.get(binding.drawerLayout);\n\t\t\tField mEdgeSize = Objects.requireNonNull(draggerObj).getClass().getDeclaredField(\"mEdgeSize\");\n\t\t\tmEdgeSize.setAccessible(true);\n\t\t\tint edge = mEdgeSize.getInt(draggerObj);\n\t\t\tmEdgeSize.setInt(draggerObj, edge * 3);\n\t\t} catch (Exception e) {\n\t\t\tLog.e(TAG, \"Setting edge width of drawer failed..\", e);\n\t\t}\n\t}\n\n\tpublic int getEdgeSizeOfDrawer() {\n\t\ttry {\n\t\t\tField mDragger = Objects.requireNonNull(binding.drawerLayout).getClass().getDeclaredField(\"mLeftDragger\");\n\t\t\tmDragger.setAccessible(true);\n\t\t\tViewDragHelper draggerObj = (ViewDragHelper) mDragger.get(binding.drawerLayout);\n\t\t\tField mEdgeSize = Objects.requireNonNull(draggerObj).getClass().getDeclaredField(\"mEdgeSize\");\n\t\t\tmEdgeSize.setAccessible(true);\n\t\t\treturn mEdgeSize.getInt(draggerObj);\n\t\t} catch (Exception e) {\n\t\t\tLog.e(TAG, \"Failed to get edge size of drawer\", e);\n\t\t}\n\t\treturn 0;\n\t}\n\n\n\t/**\n\t * Check if the account is in the Android Account Manager. If not it will be added automatically\n\t */\n\tprivate void initAccountManager() {\n\t\tAccountManager mAccountManager = AccountManager.get(this);\n\n\t\tboolean isAccountThere = false;\n\t\tAccount[] accounts = mAccountManager.getAccounts();\n\t\tString accountType = AccountGeneral.getAccountType(this);\n\t\tfor (Account account : accounts) {\n\t\t\tif (account.type.intern().equals(accountType)) {\n\t\t\t\tisAccountThere = true;\n\t\t\t}\n\t\t}\n\n\t\t//If the account is not in the Android Account Manager\n\t\tif (!isAccountThere) {\n\t\t\t//Then add the new account\n\t\t\tAccount account = new Account(getString(R.string.app_name), accountType);\n\t\t\tmAccountManager.addAccountExplicitly(account, \"\", new Bundle());\n\n\t\t\tSettingsFragment.setAccountSyncInterval(this, getResources().getInteger(R.integer.default_sync_minutes));\n\t\t}\n\t}\n\n\n\tpublic void reloadCountNumbersOfSlidingPaneAdapter() {\n\t\tNewsReaderListFragment nlf = getSlidingListFragment();\n\t\tif (nlf != null) {\n\t\t\tnlf.ListViewNotifyDataSetChanged();\n\t\t}\n\t}\n\n\tprotected void updateCurrentRssView() {\n\t\tNewsReaderDetailFragment ndf = getNewsReaderDetailFragment();\n\t\tif (ndf != null) {\n\t\t\t//ndf.reloadAdapterFromScratch();\n\t\t\tndf.updateCurrentRssView();\n\t\t}\n\t}\n\n\tpublic void switchToAllUnreadItemsFolder() {\n\t\tupdateDetailFragment(SubscriptionExpandableListAdapter.SPECIAL_FOLDERS.ALL_UNREAD_ITEMS.getValue(), true, null, true);\n\t}\n\n    @Subscribe(threadMode = ThreadMode.MAIN)\n    public void onEventMainThread(SyncFailedEvent event) {\n        Throwable exception = event.exception();\n\n        // If SSOException is wrapped inside another exception, we extract that SSOException\n        if(exception.getCause() != null && exception.getCause() instanceof SSOException) {\n            exception = exception.getCause();\n        }\n\n        if(exception instanceof SSOException){\n            if(exception instanceof NextcloudHttpRequestFailedException && ((NextcloudHttpRequestFailedException) exception).getStatusCode() == 302) {\n                ShowAlertDialog(\n                        getString(R.string.login_dialog_title_error),\n                        getString(R.string.login_dialog_text_news_app_not_installed_on_server,\n                                \"https://github.com/nextcloud/news/blob/master/docs/install.md#installing-from-the-app-store\"),\n                        this);\n            } else if (exception instanceof TokenMismatchException) {\n\t\t\t\tToast.makeText(NewsReaderListActivity.this, \"Token out of sync. Please reauthenticate\", Toast.LENGTH_LONG).show();\n\t\t\t\ttry {\n\t\t\t\t\tSingleAccountHelper.reauthenticateCurrentAccount(this);\n\t\t\t\t} catch (NextcloudFilesAppAccountNotFoundException | NoCurrentAccountSelectedException | NextcloudFilesAppNotSupportedException e) {\n\t\t\t\t\tUiExceptionManager.showDialogForException(this, e);\n\t\t\t\t} catch (NextcloudFilesAppAccountPermissionNotGrantedException e) {\n\t\t\t\t\t// Unable to reauthenticate account just like that..\n\t\t\t\t\tstartLoginActivity();\n\t\t\t\t}\n\t\t\t\t//StartLoginFragment(this);\n\t\t\t} else {\n\t\t\t\tUiExceptionManager.showDialogForException(this, (SSOException) exception);\n\t\t\t\t//UiExceptionManager.showNotificationForException(this, (SSOException) exception);\n\t\t\t}\n        } else {\n            Toast.makeText(NewsReaderListActivity.this, exception.getLocalizedMessage(), Toast.LENGTH_LONG).show();\n        }\n        updateButtonLayout();\n        syncFinishedHandler();\n    }\n\n    @Subscribe(threadMode = ThreadMode.MAIN)\n\tpublic void onEventMainThread(SyncStartedEvent event) {\n\t\tLog.d(TAG, \"onEventMainThread - SyncStartedEvent\");\n\t\tupdateButtonLayout();\n\t}\n\n    @Subscribe(threadMode = ThreadMode.MAIN)\n\tpublic void onEventMainThread(SyncFinishedEvent event) {\n\t\tLog.d(TAG, \"onEventMainThread - SyncFinishedEvent\");\n\t\tupdateButtonLayout();\n\t\tsyncFinishedHandler();\n\t}\n\n\t/**\n\t * @return true if new items count was greater than 0\n\t */\n\tprivate boolean syncFinishedHandler() {\n\t\tNewsReaderListFragment newsReaderListFragment = getSlidingListFragment();\n\t\tnewsReaderListFragment.reloadAdapter();\n\t\tUpdateItemList();\n\t\tupdatePodcastView();\n\n\t\tif(mApi.getNewsAPI() != null) {\n            getSlidingListFragment().startAsyncTaskGetUserInfo();\n        }\n\n\t\tint newItemsCount = mPrefs.getInt(Constants.LAST_UPDATE_NEW_ITEMS_COUNT_STRING, 0);\n\n\t\tif (newItemsCount > 0) {\n\t\t\tint firstVisiblePosition = getNewsReaderDetailFragment().getFirstVisibleScrollPosition();\n\n\t\t\t// Only show the update snackbar if scrollposition is not top.\n\t\t\t// 0 if scrolled all the way up\n\t\t\t// 1 if no items are visible right now (e.g. first sync)\n\t\t\tif (firstVisiblePosition == 0 || firstVisiblePosition == -1) {\n\t\t\t\tupdateCurrentRssView();\n\t\t\t} else {\n\t\t\t\tshowSnackbar(newItemsCount);\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\t// update rss view even if no new items are available\n\t\t\t// If the user just finished reading some articles (e.g. all unread items) - he most\n\t\t\t// likely wants  the read articles to be removed when the sync is finished\n\t\t\tupdateCurrentRssView();\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tprotected void onResume() {\n\t\tNewsReaderListFragment newsReaderListFragment = getSlidingListFragment();\n\t\tif (newsReaderListFragment != null) {\n            newsReaderListFragment.reloadAdapter();\n\t\t\tnewsReaderListFragment.bindUserInfoToUI();\n\t\t}\n        invalidateOptionsMenu();\n\t\tsuper.onResume();\n\t}\n\n\t@Override\n\tprotected PodcastSlidingUpPanelLayout getPodcastSlidingUpPanelLayout() {\n\t\treturn binding.slidingLayout;\n\t}\n\n\t@Override\n\tpublic void onRefresh() {\n\t\tstartSync();\n\t}\n\n\tprivate void showSnackbar(int newItemsCount) {\n\t\tSnackbar snackbar = Snackbar.make(findViewById(R.id.coordinator_layout),\n\t\t\t\tgetResources().getQuantityString(R.plurals.message_bar_new_articles_available, newItemsCount, newItemsCount),\n\t\t\t\tSnackbar.LENGTH_LONG);\n\t\tsnackbar.setAction(getString(R.string.message_bar_reload), mSnackbarListener);\n\t\t//snackbar.setActionTextColor(ContextCompat.getColor(this, R.color.accent_material_dark));\n\t\t// Setting android:TextColor to #000 in the light theme results in black on black\n\t\t// text on the Snackbar, set the text back to white,\n\t\t//TextView textView = snackbar.getView().findViewById(com.google.android.material.R.id.snackbar_text);\n\t\t//textView.setTextColor(Color.WHITE);\n\t\tsnackbar.show();\n\t}\n\n\t/**\n\t * Callback method from {@link NewsReaderListFragment.Callbacks} indicating\n\t * that the item with the given ID was selected.\n\t */\n\t@Override\n\tpublic void onTopItemClicked(long idFeed, boolean isFolder, Long optional_folder_id) {\n\t\tif (binding.drawerLayout != null)\n\t\t\tbinding.drawerLayout.closeDrawer(GravityCompat.START);\n\n\t\tupdateDetailFragment(idFeed, isFolder, optional_folder_id, true);\n\t}\n\n\t@Override\n\tpublic void onChildItemClicked(long idFeed, Long optional_folder_id) {\n\t\tif (binding.drawerLayout != null)\n\t\t\tbinding.drawerLayout.closeDrawer(GravityCompat.START);\n\n\t\tupdateDetailFragment(idFeed, false, optional_folder_id, true);\n\t}\n\n\t@Override\n\tpublic void onTopItemLongClicked(long idFeed, boolean isFolder) {\n\t\tstartDialogFragment(idFeed, isFolder);\n\t}\n\n\t@Override\n\tpublic void onUserInfoUpdated(OcsUser userInfo) {\n\t\tfinal Drawable placeHolder = getDrawable(R.drawable.ic_baseline_account_circle_24);\n\t\tDisplayImageOptions displayImageOptions = new DisplayImageOptions.Builder()\n\t\t\t\t.displayer(new CircleBitmapDisplayer())\n\t\t\t\t.showImageOnLoading(placeHolder)\n\t\t\t\t.showImageForEmptyUri(placeHolder)\n\t\t\t\t.showImageOnFail(placeHolder)\n\t\t\t\t.cacheOnDisk(true)\n\t\t\t\t.cacheInMemory(true)\n\t\t\t\t.build();\n\n\t\tif (userInfo.getId() != null) {\n\t\t\tString mOc_root_path = mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING, null);\n\t\t\tString avatarUrl = mOc_root_path + \"/index.php/avatar/\" + Uri.encode(userInfo.getId()) + \"/64\";\n\t\t\tImageLoader.getInstance().displayImage(avatarUrl, binding.toolbarLayout.avatar, displayImageOptions);\n\t\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n\t\t\t\tbinding.toolbarLayout.avatar.setTooltipText(userInfo.getDisplayName());\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onChildItemLongClicked(long idFeed) {\n\t\tstartDialogFragment(idFeed, false);\n\t}\n\n\tprivate void startDialogFragment(long idFeed, Boolean isFolder) {\n\t\tDatabaseConnectionOrm dbConn = new DatabaseConnectionOrm(getApplicationContext());\n\n\t\tif (!isFolder) {\n\t\t\tString titel = dbConn.getFeedById(idFeed).getFeedTitle();\n\t\t\tString iconurl = dbConn.getFeedById(idFeed).getFaviconUrl();\n\t\t\tString feedurl = dbConn.getFeedById(idFeed).getLink();\n\n\t\t\tFragmentTransaction ft = getSupportFragmentManager().beginTransaction();\n\t\t\tFragment prev = getSupportFragmentManager().findFragmentByTag(\"news_reader_list_dialog\");\n\t\t\tif (prev != null) {\n\t\t\t\tft.remove(prev);\n\t\t\t}\n\t\t\tft.addToBackStack(null);\n\n\t\t\tNewsReaderListDialogFragment fragment = NewsReaderListDialogFragment.newInstance(idFeed, titel, iconurl, feedurl);\n\t\t\tfragment.setActivity(this);\n\t\t\tfragment.show(ft, \"news_reader_list_dialog\");\n\t\t}\n\t}\n\n\n    private NewsReaderDetailFragment updateDetailFragment(long id, Boolean folder, Long optional_folder_id, boolean updateListView) {\n        if(menuItemDownloadMoreItems != null) {\n            menuItemDownloadMoreItems.setEnabled(true);\n        }\n\n        DatabaseConnectionOrm dbConn = new DatabaseConnectionOrm(getApplicationContext());\n\n        Long feedId = null;\n        Long folderId;\n        String title = null;\n\n        if(!folder) {\n            feedId = id;\n            folderId = optional_folder_id;\n            title = dbConn.getFeedById(id).getFeedTitle();\n        } else {\n            folderId = id;\n            int idFolder = (int) id;\n            if(idFolder >= 0) {\n                title = dbConn.getFolderById(id).getLabel();\n            } else if(idFolder == -10) {\n                title = getString(R.string.allUnreadFeeds);\n            } else if(idFolder == -11) {\n                title = getString(R.string.starredFeeds);\n            }\n        }\n\n        NewsReaderDetailFragment fragment = getNewsReaderDetailFragment();\n        fragment.setData(feedId, folderId, title, updateListView);\n        return fragment;\n    }\n\n\n    public void UpdateItemList() {\n\t\ttry {\n\t\t\tNewsReaderDetailFragment nrD = getNewsReaderDetailFragment();\n\t\t\tif (nrD != null && nrD.getRecyclerView() != null) {\n\t\t\t\tnrD.getRecyclerView().getAdapter().notifyDataSetChanged();\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\tex.printStackTrace();\n        }\n    }\n\n\n    public void startSync()\n    {\n\t\tif(mPrefs.getString(SettingsActivity.EDT_OWNCLOUDROOTPATH_STRING, null) == null) {\n            startLoginActivity();\n\t\t} else {\n\t\t\tif (!OwnCloudSyncService.isSyncRunning()) {\n\t\t\t\tmPostDelayHandler.stopRunningPostDelayHandler(); //Stop pending sync handler\n\n\t\t\t\tBundle accBundle = new Bundle();\n\t\t\t\taccBundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL, true);\n\t\t\t\tAccountManager mAccountManager = AccountManager.get(this);\n\t\t\t\tAccount[] accounts = mAccountManager.getAccounts();\n\t\t\t\tfor(Account acc : accounts) {\n\t\t\t\t\tString accountType = AccountGeneral.getAccountType(this);\n\t\t\t\t\tif (acc.type.equals(accountType)) {\n                        ContentResolver.requestSync(acc, accountType, accBundle);\n                    }\n                }\n\t\t\t\t//http://stackoverflow.com/questions/5253858/why-does-contentresolver-requestsync-not-trigger-a-sync\n\t\t\t} else {\n\t\t\t\tupdateButtonLayout();\n\t\t\t}\n\t\t}\n    }\n\n\tpublic void updateButtonLayout()\n    {\n\t\tNewsReaderListFragment newsReaderListFragment = getSlidingListFragment();\n\t\tNewsReaderDetailFragment newsReaderDetailFragment = getNewsReaderDetailFragment();\n\n\t\tif(newsReaderListFragment != null && newsReaderDetailFragment != null) {\n\t\t\tboolean isSyncRunning = OwnCloudSyncService.isSyncRunning();\n\t\t\tnewsReaderListFragment.setRefreshing(isSyncRunning);\n\t\t\tnewsReaderDetailFragment.binding.swipeRefresh.setRefreshing(isSyncRunning);\n\t\t}\n    }\n\n\n\t@Override\n\tpublic boolean onCreateOptionsMenu(Menu menu) {\n\t\t// Inflate the menu; this adds items to the action bar if it is present.\n\t\tgetMenuInflater().inflate(R.menu.news_reader, menu);\n\n\t\tmenuItemDownloadMoreItems = menu.findItem(R.id.menu_downloadMoreItems);\n\n\t\tmenuItemDownloadMoreItems.setEnabled(false);\n\n\t\tMenuItem searchItem = menu.findItem(R.id.menu_search);\n\n        //Set expand listener to close keyboard\n        searchItem.setOnActionExpandListener(new MenuItem.OnActionExpandListener() {\n            @Override\n            public boolean onMenuItemActionExpand(MenuItem item) {\n\t\t\t\treturn true;\n\t\t\t}\n\n            @Override\n            public boolean onMenuItemActionCollapse(MenuItem item) {\n                //onQueryTextChange(\"\"); // Reset search\n                mSearchView.setQuery(\"\", true);\n                clearSearchViewFocus();\n                return true;\n            }\n        });\n\n\t\tmSearchView = (SearchView) menu.findItem(R.id.menu_search).getActionView();\n\t\tmSearchView.setIconifiedByDefault(false);\n\t\tmSearchView.setOnQueryTextListener(this);\n\t\tmSearchView.setOnQueryTextFocusChangeListener((v, hasFocus) -> {\n            if(!hasFocus) {\n                clearSearchViewFocus();\n            }\n        });\n\n        NewsReaderDetailFragment ndf = getNewsReaderDetailFragment();\n        if(ndf != null) {\n            ndf.updateMenuItemsState();\n        }\n\n        updateButtonLayout();\n\n        // focus the SearchView (if search view was active before orientation change)\n        if (mSearchString != null && !mSearchString.isEmpty()) {\n            searchItem.expandActionView();\n            mSearchView.setQuery(mSearchString, true);\n            mSearchView.clearFocus();\n        }\n\n        return true;\n\t}\n\n\tpublic MenuItem getMenuItemDownloadMoreItems() {\n\t\treturn menuItemDownloadMoreItems;\n\t}\n\n\t@Override\n\tpublic void onBackPressed() {\n        if(!handlePodcastBackPressed()) {\n\t\t\tif (binding.drawerLayout != null) {\n\t\t\t\tif (binding.drawerLayout.isDrawerOpen(GravityCompat.START))\n\t\t\t\t\tsuper.onBackPressed();\n\t\t\t\telse\n\t\t\t\t\tbinding.drawerLayout.openDrawer(GravityCompat.START);\n\t\t\t} else {\n\t\t\t\tsuper.onBackPressed();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static final int RESULT_SETTINGS = 15642;\n    public static final int RESULT_ADD_NEW_FEED = 15643;\n\n\t@Override\n\tpublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\n\t\tif (drawerToggle != null && drawerToggle.onOptionsItemSelected(item))\n\t\t\treturn true;\n\n\t\tint itemId = item.getItemId();\n\t\tif (itemId == android.R.id.home) {\n\t\t\tif (handlePodcastBackPressed())\n\t\t\t\treturn true;\n\t\t} else if (itemId == R.id.menu_update) {\n\t\t\tstartSync();\n\t\t} else if (itemId == R.id.menu_StartImageCaching) {\n\t\t\tfinal DatabaseConnectionOrm dbConn = new DatabaseConnectionOrm(this);\n\n\t\t\tlong highestItemId = dbConn.getLowestRssItemIdUnread();\n\n\n\t\t\tIntent data = new Intent();\n\t\t\tdata.putExtra(DownloadImagesService.LAST_ITEM_ID, highestItemId);\n\t\t\tdata.putExtra(DownloadImagesService.DOWNLOAD_MODE_STRING, DownloadImagesService.DownloadMode.PICTURES_ONLY);\n\t\t\tDownloadImagesService.enqueueWork(this, data);\n\t\t} else if (itemId == R.id.menu_CreateDatabaseDump) {\n\t\t\tDatabaseUtils.CopyDatabaseToSdCard(this);\n\n\t\t\tnew AlertDialog.Builder(this)\n\t\t\t\t\t.setMessage(\"Created dump at: \" + DatabaseUtils.GetPath(this))\n\t\t\t\t\t.setNeutralButton(getString(android.R.string.ok), null)\n\t\t\t\t\t.show();\n\t\t} else if (itemId == R.id.menu_markAllAsRead) {\n\t\t\tNewsReaderDetailFragment ndf = getNewsReaderDetailFragment();\n\t\t\tif (ndf != null) {\n\t\t\t\tDatabaseConnectionOrm dbConn2 = new DatabaseConnectionOrm(this);\n\t\t\t\tdbConn2.markAllItemsAsReadForCurrentView();\n\n\t\t\t\treloadCountNumbersOfSlidingPaneAdapter();\n\t\t\t\tndf.refreshCurrentRssView();\n\t\t\t}\n\t\t\treturn true;\n\t\t} else if (itemId == R.id.menu_downloadMoreItems) {\n\t\t\tDownloadMoreItems();\n\t\t\treturn true;\n\t\t} else if (itemId == R.id.menu_search) {\n\t\t\tmSearchView.setIconified(false);\n\t\t\tmSearchView.setFocusable(true);\n\t\t\tmSearchView.requestFocusFromTouch();\n\t\t\treturn true;\n\t\t} else if (itemId == R.id.menu_download_web_archive) {\n\t\t\tcheckAndStartDownloadWebPagesForOfflineReadingPermission();\n\t\t\treturn true;\n\t\t}\n\t\treturn super.onOptionsItemSelected(item);\n\t}\n\n\tprivate void checkAndStartDownloadWebPagesForOfflineReadingPermission() {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED &&\n                    checkSelfPermission(Manifest.permission.FOREGROUND_SERVICE) == PackageManager.PERMISSION_GRANTED) {\n                Log.v(\"Permission error\",\"You have permission\");\n                startDownloadWebPagesForOfflineReading();\n            } else {\n                Log.e(\"Permission error\",\"Asking for permission\");\n                requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.FOREGROUND_SERVICE}, REQUEST_CODE_PERMISSION_DOWNLOAD_WEB_ARCHIVE);\n            }\n        } else { //you dont need to worry about these stuff below api level 23\n            Log.v(\"Permission error\",\"You already have the permission\");\n            startDownloadWebPagesForOfflineReading();\n        }\n    }\n\n\tprivate void startDownloadWebPagesForOfflineReading() {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            startForegroundService(new Intent(this, DownloadWebPageService.class));\n        } else {\n            startService(new Intent(this, DownloadWebPageService.class));\n        }\n    }\n\n\tprivate void DownloadMoreItems() {\n\t\tfinal NewsReaderDetailFragment ndf = getNewsReaderDetailFragment();\n\n\t\t// Folder is selected.. download more items for all feeds in this folder\n\t\tif(ndf.getIdFeed() == null) {\n\t\t\tLong idFolder = ndf.getIdFolder();\n\n\t\t\tList<Integer> specialFolders = Arrays.asList(\n\t\t\t\t\tSubscriptionExpandableListAdapter.SPECIAL_FOLDERS.ALL_UNREAD_ITEMS.getValue(),\n\t\t\t\t\tSubscriptionExpandableListAdapter.SPECIAL_FOLDERS.ALL_STARRED_ITEMS.getValue(),\n\t\t\t\t\tSubscriptionExpandableListAdapter.SPECIAL_FOLDERS.ALL_ITEMS.getValue()\n\t\t\t);\n\t\t\t// if a special folder is selected, we can start the sync\n\t\t\tif (specialFolders.contains(idFolder.intValue())) {\n\t\t\t\tstartSync();\n\t\t\t} else {\n\t\t\t\t// Otherwise load more items for that particular folder and all its feeds\n\t\t\t\tDatabaseConnectionOrm dbConn = new DatabaseConnectionOrm(this);\n\t\t\t\tfor (Feed feed : dbConn.getFolderById(idFolder).getFeedList()) {\n\t\t\t\t\tdownloadMoreItemsForFeed(feed.getId());\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Single feed is selected.. download more items\n\t\t\tdownloadMoreItemsForFeed(ndf.getIdFeed());\n\t\t}\n\n\t\tToast.makeText(this, getString(R.string.toast_GettingMoreItems), Toast.LENGTH_SHORT).show();\n\t}\n\n\t@SuppressLint(\"CheckResult\")\n\tprivate void downloadMoreItemsForFeed(final Long feedId) {\n\t\tCompletable.fromAction(new Action() {\n\t\t\t@Override\n\t\t\tpublic void run() throws Exception {\n\t\t\t\tDatabaseConnectionOrm dbConn = new DatabaseConnectionOrm(NewsReaderListActivity.this);\n\t\t\t\tRssItem rssItem = dbConn.getLowestRssItemIdByFeed(feedId);\n\t\t\t\tlong offset = Long.MAX_VALUE;\n\t\t\t\tif(rssItem != null) {\n\t\t\t\t\toffset = rssItem.getId();\n\t\t\t\t}\n\t\t\t\tint type = 0; // the type of the query (Feed: 0, Folder: 1, Starred: 2, All: 3)\n\n\t\t\t\tList<RssItem> buffer = mApi.getNewsAPI().items(100, offset, type, feedId, true, false).execute().body();\n\t\t\t\tRssItemObservable.performDatabaseBatchInsert(dbConn, buffer);\n\t\t\t}\n\t\t})\n\t\t\t\t.subscribeOn(Schedulers.newThread())\n\t\t\t\t.observeOn(AndroidSchedulers.mainThread())\n\t\t\t\t.subscribe(() -> {\n\t\t\t\t\tupdateCurrentRssView();\n\t\t\t\t\tLog.v(TAG, \"Finished Download extra items..\");\n\t\t\t\t}, throwable -> {\n\t\t\t\t\tthrowable.printStackTrace();\n\t\t\t\t\tThrowable e = OkHttpSSLClient.HandleExceptions(throwable);\n\t\t\t\t\tToast.makeText(NewsReaderListActivity.this, getString(R.string.login_dialog_text_something_went_wrong) + \" - \" + e.getMessage(), Toast.LENGTH_SHORT).show();\n\t\t\t\t});\n\t}\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, final Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n\n        if(resultCode == RESULT_OK) {\n            UpdateListView();\n            getSlidingListFragment().ListViewNotifyDataSetChanged();\n        }\n\n\t\tif (requestCode == RESULT_LOGIN) {\n\t\t\tIntent intent = getIntent().putExtra(PREF_SERVER_SETTINGS, true);\n\t\t\tsetResult(RESULT_OK, intent);\n\t\t}\n\n        if(requestCode == RESULT_SETTINGS) {\n        \t// Extra is set if user entered/modified server settings\n        \tif (data == null || data.getBooleanExtra(PREF_SERVER_SETTINGS,false)) {\n\t\t\t\tresetUiAndStartSync();\n\t\t\t} else {\n\t\t\t\t//Update settings of image Loader\n\t\t\t\tmApi.initApi(new NextcloudAPI.ApiConnectedListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onConnected() {\n\t\t\t\t\t\tensureCorrectTheme(data);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onError(Exception ex) {\n\t\t\t\t\t\tensureCorrectTheme(data);\n\t\t\t\t\t\tex.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n        } else if(requestCode == RESULT_ADD_NEW_FEED) {\n            if(data != null) {\n                boolean val = data.getBooleanExtra(NewFeedActivity.ADD_NEW_SUCCESS, false);\n                if (val) {\n                    startSync();\n                }\n            }\n        } else if(requestCode == RESULT_LOGIN) {\n            resetUiAndStartSync();\n        }\n\n\n        try {\n            AccountImporter.onActivityResult(requestCode, resultCode, data, this, account -> {\n                Log.d(TAG, \"accountAccessGranted() called with: account = [\" + account + \"]\");\n                mApi.initApi(new NextcloudAPI.ApiConnectedListener() {\n                    @Override\n                    public void onConnected() {\n                        Log.d(TAG, \"onConnected() called\");\n                    }\n\n                    @Override\n                    public void onError(Exception ex) {\n                        Log.e(TAG, \"onError() called with:\", ex);\n                    }\n                });\n\n            });\n        } catch (AccountImportCancelledException ignored) {\n        }\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n\n        if(grantResults.length > 0 &&  grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n            if(requestCode == REQUEST_CODE_PERMISSION_DOWNLOAD_WEB_ARCHIVE) {\n                startDownloadWebPagesForOfflineReading();\n            } else {\n                Log.d(TAG, \"No action defined here yet..\");\n            }\n        }\n    }\n\n    private void ensureCorrectTheme(Intent data) {\n        String oldListLayout = data.getStringExtra(SettingsActivity.AI_FEED_LIST_LAYOUT);\n\t\tString newListLayout = mPrefs.getString(SettingsActivity.SP_FEED_LIST_LAYOUT, \"0\");\n\n        if (ThemeChooser.themeRequiresRestartOfUI() || !newListLayout.equals(oldListLayout)) {\n            NewsReaderListActivity.this.recreate();\n        } else if (data.hasExtra(SettingsActivity.CACHE_CLEARED)) {\n            resetUiAndStartSync();\n        }\n    }\n\n    @VisibleForTesting\n\tpublic NewsReaderListFragment getSlidingListFragment() {\n\t\treturn ((NewsReaderListFragment) getSupportFragmentManager().findFragmentById(R.id.left_drawer));\n\t}\n\n    @VisibleForTesting\n    public NewsReaderDetailFragment getNewsReaderDetailFragment() {\n\t\t return (NewsReaderDetailFragment) getSupportFragmentManager().findFragmentById(R.id.content_frame);\n\t}\n\n    public void startLoginActivity() {\n        Intent loginIntent = new Intent(this, LoginDialogActivity.class);\n        startActivityForResult(loginIntent, RESULT_LOGIN);\n    }\n\n    private void resetUiAndStartSync() {\n        getSlidingListFragment().reloadAdapter();\n\t\tupdateCurrentRssView();\n\t\tstartSync();\n\t\tgetSlidingListFragment().bindUserInfoToUI();\n\t}\n\n\tprivate void UpdateListView() {\n\t\tgetNewsReaderDetailFragment().notifyDataSetChangedOnAdapter();\n\t}\n\n\t@Override\n\tpublic void onClick(RssItemViewHolder vh, int position) {\n\n\t\tif (mPrefs.getBoolean(SettingsActivity.CB_SKIP_DETAILVIEW_AND_OPEN_BROWSER_DIRECTLY_STRING, false)) {\n\t\t\tString currentUrl = vh.getRssItem().getLink();\n\n\t\t\t//Choose Browser based on user settings\n\t\t\t//modified copy from NewsDetailFragment.java:loadUrl(String url)\n\t\t\tint selectedBrowser = Integer.parseInt(mPrefs.getString(SettingsActivity.SP_DISPLAY_BROWSER, \"0\"));\n\t\t\tif (selectedBrowser == 0) { // Custom Tabs\n\t\t\t\tCustomTabsIntent.Builder builder = new CustomTabsIntent.Builder()\n\t\t\t\t\t\t.setToolbarColor(ContextCompat.getColor(this, R.color.colorPrimary))\n\t\t\t\t\t\t.setShowTitle(true)\n\t\t\t\t\t\t.setStartAnimations(this, R.anim.slide_in_right, R.anim.slide_out_left)\n\t\t\t\t\t\t.setExitAnimations(this, R.anim.slide_in_left, R.anim.slide_out_right)\n\t\t\t\t\t\t.addDefaultShareMenuItem();\n\t\t\t\tbuilder.build().launchUrl(this, Uri.parse(currentUrl));\n\t\t\t} else { //External browser\n\t\t\t\tIntent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(currentUrl));\n\t\t\t\tstartActivity(browserIntent);\n\t\t\t}\n\n\t\t\t((NewsListRecyclerAdapter) getNewsReaderDetailFragment().getRecyclerView().getAdapter()).changeReadStateOfItem(vh, true);\n\t\t} else {\n\t\t\tIntent intentNewsDetailAct = new Intent(this, NewsDetailActivity.class);\n\n\t\t\tintentNewsDetailAct.putExtra(NewsReaderListActivity.ITEM_ID, position);\n\t\t\tintentNewsDetailAct.putExtra(NewsReaderListActivity.TITLE, getNewsReaderDetailFragment().getTitel());\n\t\t\tstartActivityForResult(intentNewsDetailAct, Activity.RESULT_CANCELED);\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean onLongClick(RssItemViewHolder vh, int position) {\n\t\tRssItem rssItem = vh.getRssItem();\n\t\tDialogFragment newFragment =\n\t\t\t\tNewsDetailImageDialogFragment.newInstanceUrl(rssItem.getTitle(), rssItem.getLink());\n\t\tFragmentTransaction ft = getSupportFragmentManager().beginTransaction();\n\t\tFragment prev = getSupportFragmentManager().findFragmentByTag(\"menu_fragment_dialog\");\n\t\tif (prev != null) {\n\t\t\tft.remove(prev);\n\t\t}\n\t\tft.addToBackStack(null);\n\t\tnewFragment.show(ft, \"menu_fragment_dialog\");\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic boolean onQueryTextSubmit(String query) {\n\t\tclearSearchViewFocus();\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic boolean onQueryTextChange(String newText) {\n        if (searchPublishSubject == null) {\n            searchPublishSubject = PublishSubject.create();\n            searchPublishSubject\n                    .debounce(400, TimeUnit.MILLISECONDS)\n                    .distinctUntilChanged()\n                    .map(s -> getNewsReaderDetailFragment().performSearch(s))\n                    .subscribeOn(Schedulers.io())\n                    .observeOn(AndroidSchedulers.mainThread())\n                    .subscribeWith(getNewsReaderDetailFragment().searchResultObserver)\n                    .isDisposed();\n\n        }\n        searchPublishSubject.onNext(newText);\n        return true;\n    }\n\n    public void clearSearchViewFocus() {\n        mSearchView.clearFocus();\n    }\n}\n", "/*\n* Android ownCloud News\n*\n* @author David Luhmer\n* @copyright 2013 David Luhmer david-dev@live.de\n*\n* This library is free software; you can redistribute it and/or\n* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n* License as published by the Free Software Foundation; either\n* version 3 of the License, or any later version.\n*\n* This library is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n*\n* You should have received a copy of the GNU Affero General Public\n* License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*\n*/\n\npackage de.luhmer.owncloudnewsreader;\n\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.preference.PreferenceActivity;\nimport android.view.MenuItem;\n\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.appcompat.widget.Toolbar;\n\nimport javax.inject.Inject;\n\nimport de.luhmer.owncloudnewsreader.helper.ThemeChooser;\n\n/**\n* A {@link PreferenceActivity} that presents a set of application settings. On\n* handset devices, settings are presented as a single list. On tablets,\n* settings are split by category, with category headers shown to the left of\n* the list of settings.\n* <p>\n* See <a href=\"http://developer.android.com/design/patterns/settings.html\">\n* Android Design: Settings</a> for design guidelines and the <a\n* href=\"http://developer.android.com/guide/topics/ui/settings.html\">Settings\n* API Guide</a> for more information on developing a Settings UI.\n*/\npublic class SettingsActivity extends AppCompatActivity {\n\n    private static final String TAG = SettingsActivity.class.getCanonicalName();\n\n    /**\n     * Determines whether to always show the simplified settings UI, where\n     * settings are presented in a single list. When false, settings are shown\n     * as a master/detail two-pane view on tablets. When true, a single pane is\n     * shown on tablets.\n     */\n    public static final String EDT_USERNAME_STRING = \"edt_username\";\n    public static final String EDT_PASSWORD_STRING = \"edt_password\";\n    public static final String EDT_OWNCLOUDROOTPATH_STRING = \"edt_owncloudRootPath\";\n    public static final String SW_USE_SINGLE_SIGN_ON = \"sw_use_single_sign_on\";\n    public static final String EDT_CLEAR_CACHE = \"edt_clearCache\";\n\n    //public static final String CB_ALLOWALLSSLCERTIFICATES_STRING = \"cb_AllowAllSSLCertificates\";\n    public static final String CB_SYNCONSTARTUP_STRING = \"cb_AutoSyncOnStart\";\n    public static final String CB_SHOWONLYUNREAD_STRING = \"cb_ShowOnlyUnread\";\n    public static final String CB_NAVIGATE_WITH_VOLUME_BUTTONS_STRING = \"cb_NavigateWithVolumeButtons\";\n\n    public static final String LV_CACHE_IMAGES_OFFLINE_STRING = \"lv_cacheImagesOffline\";\n\n    public static final String CB_MARK_AS_READ_WHILE_SCROLLING_STRING = \"cb_MarkAsReadWhileScrolling\";\n    public static final String CB_SHOW_FAST_ACTIONS = \"cb_ShowFastActions\";\n    public static final String CB_DISABLE_HOSTNAME_VERIFICATION_STRING = \"cb_DisableHostnameVerification\";\n    public static final String CB_SKIP_DETAILVIEW_AND_OPEN_BROWSER_DIRECTLY_STRING = \"cb_openInBrowserDirectly\";\n\n    //public static final String CB_ENABLE_PODCASTS_STRING = \"cb_enablePodcasts\";\n\n    public static final String PREF_SERVER_SETTINGS = \"pref_server_settings\";\n    public static final String PREF_SYNC_SETTINGS = \"pref_sync_settings\";\n    public static final String SYNC_INTERVAL_IN_MINUTES_STRING_DEPRECATED = \"SYNC_INTERVAL_IN_MINUTES_STRING\";\n\n    public static final String SP_APP_THEME = \"sp_app_theme\";\n    public static final String CB_OLED_MODE = \"cb_oled_mode\";\n\n    public static final String SP_FEED_LIST_LAYOUT = \"sp_feed_list_layout\"; // used for shared prefs\n    public static final String AI_FEED_LIST_LAYOUT = \"ai_feed_list_layout\"; // used for intents\n    public static final String SP_FONT_SIZE = \"sp_font_size\";\n\n    public static final String CACHE_CLEARED = \"CACHE_CLEARED\";\n    public static final String SP_MAX_CACHE_SIZE = \"sp_max_cache_size\";\n    public static final String SP_SORT_ORDER = \"sp_sort_order\";\n    public static final String SP_DISPLAY_BROWSER = \"sp_display_browser\";\n    public static final String SP_SEARCH_IN = \"sp_search_in\";\n    public static final String SP_SWIPE_RIGHT_ACTION = \"sp_swipe_right_action\";\n    public static final String SP_SWIPE_LEFT_ACTION = \"sp_swipe_left_action\";\n    public static final String SP_SWIPE_RIGHT_ACTION_DEFAULT = \"1\";\n    public static final String SP_SWIPE_LEFT_ACTION_DEFAULT = \"2\";\n\n    public static final String CB_VERSION = \"cb_version\";\n    public static final String CB_REPORT_ISSUE = \"cb_reportIssue\";\n\n    protected @Inject SharedPreferences mPrefs;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ((NewsReaderApplication) getApplication()).getAppComponent().injectActivity(this);\n\n        ThemeChooser.chooseTheme(this);\n        super.onCreate(savedInstanceState);\n        ThemeChooser.afterOnCreate(this);\n\n        setContentView(R.layout.activity_settings);\n\n        setupActionBar();\n    }\n\n    @Override\n    protected void onPostCreate(Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n\n        getSupportFragmentManager()\n                .beginTransaction()\n                .replace(R.id.container, new SettingsFragment())\n                .commit();\n    }\n\n\n    private void setupActionBar() {\n        Toolbar toolbar = findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        getSupportActionBar().setDisplayShowHomeEnabled(true);\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n        getSupportActionBar().setTitle(R.string.title_activity_settings);\n    }\n\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case android.R.id.home:\n                finish();\n                return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n\n        // Fix GHSL-2021-1033\n        Intent intent = new Intent();\n        String feedListLayout = mPrefs.getString(SettingsActivity.SP_FEED_LIST_LAYOUT, \"0\");\n        intent.putExtra(SettingsActivity.AI_FEED_LIST_LAYOUT, feedListLayout);\n        setResult(RESULT_OK, intent);\n    }\n}\n"], "filenames": ["News-Android-App/src/main/java/de/luhmer/owncloudnewsreader/NewsReaderListActivity.java", "News-Android-App/src/main/java/de/luhmer/owncloudnewsreader/SettingsActivity.java"], "buggy_code_start_loc": [984, 36], "buggy_code_end_loc": [986, 157], "fixing_code_start_loc": [984, 35], "fixing_code_end_loc": [986, 156], "type": "CWE-829", "message": "nextcloud news-android is an Android client for the Nextcloud news/feed reader app. In affected versions the Nextcloud News for Android app has a security issue by which a malicious application installed on the same device can send it an arbitrary Intent that gets reflected back, unintentionally giving read and write access to non-exported Content Providers in Nextcloud News for Android. Users should upgrade to version 0.9.9.63 or higher as soon as possible.", "other": {"cve": {"id": "CVE-2021-41256", "sourceIdentifier": "security-advisories@github.com", "published": "2021-11-30T21:15:08.227", "lastModified": "2021-12-02T18:33:00.330", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "nextcloud news-android is an Android client for the Nextcloud news/feed reader app. In affected versions the Nextcloud News for Android app has a security issue by which a malicious application installed on the same device can send it an arbitrary Intent that gets reflected back, unintentionally giving read and write access to non-exported Content Providers in Nextcloud News for Android. Users should upgrade to version 0.9.9.63 or higher as soon as possible."}, {"lang": "es", "value": "nextcloud news-android es un cliente Android para la aplicaci\u00f3n de lectura de noticias/feeds Nextcloud. En las versiones afectadas, la aplicaci\u00f3n Nextcloud News para Android presenta un problema de seguridad por el que una aplicaci\u00f3n maliciosa instalada en el mismo dispositivo puede enviarle una intenci\u00f3n arbitraria que es reflejada, dando involuntariamente acceso de lectura y escritura a proveedores de contenido no exportados en Nextcloud News para Android. Los usuarios deben actualizar a versi\u00f3n 0.9.9.63 o superior lo antes posible"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:H/UI:R/S:U/C:H/I:H/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.6, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-829"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:news:*:*:*:*:*:android:*:*", "versionEndExcluding": "0.9.9.63", "matchCriteriaId": "6AE66228-EB01-42B8-B8BF-82D96439C696"}]}]}], "references": [{"url": "https://github.com/nextcloud/news-android/blob/master/security/GHSL-2021-1033_Nextcloud_News_for_Android.md", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/nextcloud/news-android/commit/05449cb666059af7de2302df9d5c02997a23df85", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/nextcloud/news-android/security/advisories/GHSA-2q9v-q3cc-h9f3", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/nextcloud/news-android/commit/05449cb666059af7de2302df9d5c02997a23df85"}}