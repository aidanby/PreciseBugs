{"buggy_code": ["<?php\n/**\n * @property \\modelMenu $model_menu\n */\nclass actionAdminMenuTreeAjax extends cmsAction {\n\n    public function run() {\n\n        if (!$this->request->isAjax()) {\n            return cmsCore::error404();\n        }\n\n        $id = $this->request->get('id', '');\n\n        if (!$id || !preg_match('/^([0-9\\.]+)$/i', $id)) {\n            return cmsCore::error404();\n        }\n\n        list ($menu_id, $parent_id) = explode('.', $id);\n\n        $items = $this->model_menu->getMenuItems($menu_id, $parent_id);\n\n        $tree_nodes = [];\n\n        if ($items) {\n            foreach ($items as $item) {\n                $tree_nodes[] = [\n                    'title'  => $item['title'],\n                    'key'    => \"{$menu_id}.{$item['id']}\",\n                    'isLazy' => ($item['childs_count'] > 0)\n                ];\n            }\n        }\n\n        return $this->cms_template->renderJSON($tree_nodes);\n    }\n\n}\n", "<?php\n/**\n * @property \\modelTags $model\n */\nclass actionTagsAutocomplete extends cmsAction {\n\n    public function run() {\n\n        if (!$this->request->isAjax()) {\n            return cmsCore::error404();\n        }\n\n        $result = [];\n\n        $term = $this->request->get('term', '');\n        if (!$term) {\n            return $this->cms_template->renderJSON($result);\n        }\n\n        $tags = $this->model->filterLike('tag', \"%{$term}%\")->\n                select(\"(LEFT(`tag`, \" . mb_strlen($term) . \") = '{$term}')\", 'tag_order')->\n                orderByList([\n                    ['by' => 'tag_order', 'to' => 'desc', 'strict' => true],\n                    ['by' => 'tag', 'to' => 'asc']\n                ])->\n                getTags();\n\n        if ($tags) {\n            foreach ($tags as $tag) {\n                $result[] = [\n                    'id'    => $tag['id'],\n                    'label' => $tag['tag'],\n                    'value' => $tag['tag']\n                ];\n            }\n        }\n\n        return $this->cms_template->renderJSON($result);\n    }\n\n}\n", "<?php\n\ndefine('GUEST_GROUP_ID', 1);\ndefine('DEF_GROUP_ID', 3);\n#[\\AllowDynamicProperties]\nclass cmsUser {\n\n    const USER_ONLINE_INTERVAL      = 180;\n    const AUTH_TOKEN_EXPIRATION_INT = 8640000; // 100 \u0434\u043d\u0435\u0439\n\n    private static $instance;\n    private static $_ip;\n    public static $auth_token;\n    private static $cached_online = [];\n\n    public $id = 0;\n    public $email;\n    public $password;\n    public $nickname;\n    public $date_log;\n    public $is_admin   = 0;\n    public $is_logged  = false;\n    public $friends    = [];\n    public $subscribes = [];\n\n    public static function getInstance() {\n        if (self::$instance === null) {\n            self::$instance = new self;\n        }\n        return self::$instance;\n    }\n\n    public static function get($key) {\n        return isset(self::getInstance()->$key) ? self::getInstance()->$key : null;\n    }\n\n    public static function getIp() {\n\n        if (self::$_ip === null) {\n\n            $config = cmsConfig::getInstance();\n\n            self::$_ip = isset($_SERVER[$config->detect_ip_key]) ? $_SERVER[$config->detect_ip_key] : '127.0.0.1';\n\n            if (!filter_var(self::$_ip, FILTER_VALIDATE_IP)) {\n                self::$_ip = '127.0.0.1';\n            }\n        }\n\n        return self::$_ip;\n    }\n\n    public static function setIp($ip) {\n        self::$_ip = $ip;\n\n    }\n\n    public function __construct() {\n\n        $this->groups   = [GUEST_GROUP_ID];\n        $this->ip       = self::getIp();\n        $this->date_log = date('Y-m-d H:i:s');\n\n        if(PHP_SAPI === 'cli') {\n            return;\n        }\n\n        if (self::isSessionSet('user:id')) {\n\n            // \u0443\u0436\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\n            $this->id = self::sessionGet('user:id');\n\n        } elseif (self::hasCookie('auth')) {\n\n            // \u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u043a\u0443\u043a\u0438\u0441\u0443\n            $this->id = self::autoLogin(self::getCookie('auth'));\n        }\n\n        if (!$this->id) {\n            $this->id = cmsEventsManager::hook('user_auto_login', 0);\n        }\n\n        //\n        // \u0435\u0441\u043b\u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0431\u0430\u0437\u044b\n        //\n        if ($this->id) {\n            $this->loadAuthUser($this->id);\n        } else {\n\n            // \u0434\u043b\u044f \u043d\u0435\u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u0430\u0432\u0438\u043c \u0434\u0430\u0442\u0443 \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f\n            $_date_log = self::getCookie('guest_date_log', 'integer');\n            if (!$_date_log) {\n                $_date_log = time();\n            }\n\n            if (!self::isSessionSet('user:date_log') || ((time() - self::USER_ONLINE_INTERVAL) >= $_date_log)) {\n\n                self::setCookie('guest_date_log', time(), 31536000);\n\n                if (!self::isSessionSet('user:date_log')) {\n                    self::sessionSet('user:date_log', $_date_log);\n                }\n            }\n\n            $this->date_log = date('Y-m-d H:i:s', self::sessionGet('user:date_log'));\n        }\n    }\n\n    public static function restrictSessionToIp($ip = false) {\n\n        if (!$ip) { $ip = self::getIp(); }\n\n        if (!self::isSessionSet('user_ip')) {\n\n            self::sessionSet('user_ip', $ip);\n\n            $octets    = explode('.', $ip);\n            $end_okets = end($octets);\n\n            self::sessionSet('user_net', rtrim($ip, $end_okets));\n        }\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f \u043b\u0438 ip \u0430\u0434\u0440\u0435\u0441 \u0441\u0435\u0441\u0441\u0438\u0438\n     * @param boolean $strict \u0415\u0441\u043b\u0438 true, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0446\u0435\u043b\u044b\u0439 ip \u0430\u0434\u0440\u0435\u0441, \u0438\u043d\u0430\u0447\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e \u043f\u043e\u0434\u0441\u0435\u0442\u0438\n     * @return boolean\n     */\n    public function checkSpoofingSession($strict = false) {\n\n        if (!$strict) {\n            return strpos($this->ip, self::sessionGet('user_net')) === 0;\n        }\n\n        return $this->ip == self::sessionGet('user_ip');\n    }\n\n    /**\n     * \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n     * @param integer $user_id id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0435\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e\n     * @return array\n     */\n    public function loadAuthUser($user_id) {\n\n        $config = cmsConfig::getInstance();\n        $model  = cmsCore::getModel('users');\n\n        $model->filterIsNull('is_deleted');\n\n        $user = $model->getUser($user_id);\n\n        if (!$user) {\n            self::logout();\n            return [];\n        }\n\n        $user = cmsEventsManager::hook('user_preloaded', $user);\n\n        if (!$user) {\n            self::logout();\n            return [];\n        }\n\n        $model->startTransaction();\n\n        // \u0435\u0441\u043b\u0438 \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u0438\u0437\u0438\u0442\u0430 \u0435\u0449\u0435 \u043d\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0430 \u0432 \u0441\u0435\u0441\u0441\u0438\u0438,\n        // \u0437\u043d\u0430\u0447\u0438\u0442 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u044b\u043b\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e\n        // \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0434\u0430\u0442\u0443 \u0432 \u0441\u0435\u0441\u0441\u0438\u0438 \u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u043c \u0432 \u0431\u0430\u0437\u0435\n        if (!self::isSessionSet('user:date_log') || ((time() - self::USER_ONLINE_INTERVAL) >= strtotime($user['date_log']))) {\n\n            if (!self::isSessionSet('user:date_log')) {\n                self::sessionSet('user:date_log', $user['date_log']);\n            }\n\n            $model->updateUserDateLog($user_id);\n        }\n\n        // \u0441\u043e\u0437\u0434\u0430\u0435\u043c online-\u0441\u0435\u0441\u0441\u0438\u044e\n        $model->insertOrUpdate('sessions_online', ['user_id' => $user_id], ['date_created' => null]);\n\n        $model->endTransaction(true);\n\n        // \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0431\u0430\u0437\u044b\n        foreach ($user as $field => $value) {\n            $this->{$field} = $value;\n        }\n\n        // \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u0432\u0430\u0442\u0430\u0440\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\n        // \u043a \u043f\u0443\u0442\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0430\u0432\u0430\u0442\u0430\u0440\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0443\u0442\u044c \u043a\u043e\u0440\u043d\u044f\n        $this->avatar = cmsModel::yamlToArray($this->avatar);\n        if ($this->avatar) {\n            foreach ($this->avatar as $size => $path) {\n                $this->avatar[$size] = $config->upload_host . '/' . $path;\n            }\n        }\n\n        // \u043a\u0435\u0448\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u0440\u0443\u0437\u0435\u0439 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e\n        $this->recacheFriends();\n\n        // \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u043f\u043e\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b\n        // \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0438 \u0441\u0435\u0441\u0441\u0438\u0438\n        $this->date_log  = self::sessionGet('user:date_log');\n        $this->perms     = self::getPermissions($user['groups']);\n        $this->is_logged = true;\n\n        return cmsEventsManager::hook('user_loaded', $user);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function setUserSession($user, $last_ip = false) {\n\n        self::sessionSet('user', [\n            'id'          => $user['id'],\n            'slug'        => $user['slug'],\n            '2fa'         => !empty($user['2fa']),\n            'is_old_auth' => !empty($user['is_old_auth']),\n            'groups'      => $user['groups'],\n            'time_zone'   => $user['time_zone'],\n            'perms'       => isset($user['permissions']) ? $user['permissions'] : self::getPermissions($user['groups']),\n            'is_admin'    => $user['is_admin']\n        ]);\n\n        self::restrictSessionToIp($last_ip);\n    }\n\n    /**\n     * \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u043a\u0443\u043a\u0438\u0441\u0443\n     * @param str $auth_token\n     */\n    public static function autoLogin($auth_token) {\n\n        if (!preg_match('/^[0-9a-z]{128}$/i', $auth_token)) {\n            return 0;\n        }\n\n        $model = cmsCore::getModel('users');\n\n        $user = $model->joinInner('{users}_auth_tokens', 'au', 'au.user_id = i.id')->\n                filterEqual('au.auth_token', $auth_token)->\n                filterIsNull('is_deleted')->select('au.date_auth')->getUser();\n\n        if (!$user || $user['is_locked']) {\n            return 0;\n        }\n        // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0435 \u0438\u0441\u0442\u0435\u043a \u043b\u0438 \u0441\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430\n        if ((time() - strtotime($user['date_log'])) > self::AUTH_TOKEN_EXPIRATION_INT) {\n            $model->deleteAuthToken($auth_token);\n            return 0;\n        }\n\n        $model->startTransaction();\n\n        // \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u0442\u0443 \u0442\u043e\u043a\u0435\u043d\u0430\n        $model->filterEqual('auth_token', $auth_token)->updateFiltered('{users}_auth_tokens', [\n            'date_log' => null\n        ], true);\n\n        $model->updateUserIp($user['id']);\n\n        $model->endTransaction(true);\n\n        $user = cmsEventsManager::hook('user_login', $user);\n\n        self::setUserSession($user, $user['ip']);\n\n        return intval($user['id']);\n    }\n\n    /**\n     * \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n     *\n     * @param string $email\n     * @param string $password\n     * @param boolean $remember\n     * @param boolean $complete_login\n     * @return integer|array\n     */\n    public static function login($email, $password, $remember = false, $complete_login = true) {\n\n        if (!$email || !$password) {\n            return 0;\n        }\n\n        $model = cmsCore::getModel('users');\n\n        $user = $model->getUserByAuth($email, $password);\n\n        if (!$user) {\n            $user = cmsEventsManager::hook('user_auth_error', ['email' => $email, 'password' => $password]);\n        }\n\n        if (empty($user['id'])) {\n            return 0;\n        }\n\n        $user = cmsEventsManager::hook('user_login', $user);\n\n        $user['permissions'] = self::getPermissions($user['groups']);\n\n        if ($complete_login) {\n\n            self::loginComplete($user, $remember);\n\n            return intval($user['id']);\n        }\n\n        return $user;\n    }\n\n    /**\n     * \u0417\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044f \u0441\u0435\u0441\u0441\u0438\u044e\n     * \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n     *\n     * @param array $user\n     * @param boolean $remember\n     * @return boolean\n     */\n    public static function loginComplete($user, $remember = false) {\n\n        self::setUserSession($user);\n\n        $model = cmsCore::getModel('users');\n\n        if ($remember) {\n\n            $auth_token = hash('sha512', string_random(32, $user['email']));\n\n            self::setCookie('auth', $auth_token, self::AUTH_TOKEN_EXPIRATION_INT);\n\n            $model->setAuthToken($user['id'], $auth_token);\n\n            $model->deleteExpiredToken($user['id'], self::AUTH_TOKEN_EXPIRATION_INT);\n\n            self::$auth_token = $auth_token;\n        }\n\n        $model->updateUserIp($user['id']);\n\n        self::getInstance()->id = $user['id'];\n        self::getInstance()->is_logged = true;\n\n        return true;\n    }\n\n    /**\n     * \u0412\u044b\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n     */\n    public static function logout() {\n\n        $model = cmsCore::getModel('users');\n\n        $userSession = self::sessionGet('user');\n\n        if (!empty($userSession['id'])) {\n\n            $model->updateUserDateLog($userSession['id']);\n\n            $model->filterEqual('user_id', $userSession['id'])->deleteFiltered('sessions_online');\n\n            cmsEventsManager::hook('user_logout', $userSession);\n        }\n\n        if (self::hasCookie('auth')) {\n\n            $auth_cookie = self::getCookie('auth');\n\n            if (preg_match('/^[0-9a-z]{128}$/i', $auth_cookie)) {\n                $model->deleteAuthToken($auth_cookie);\n            }\n\n            self::unsetCookie('auth');\n        }\n\n        // \u0435\u0441\u043b\u0438 login \u0438 logout \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445\n        // \u043e\u0434\u043d\u043e\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b\n        if (self::$auth_token) {\n            $model->deleteAuthToken(self::$auth_token);\n            self::$auth_token = null;\n        }\n\n        self::sessionUnset('user');\n\n        return true;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function userIsOnline($user_id) {\n\n        if (isset(self::$cached_online[$user_id])) {\n            return self::$cached_online[$user_id];\n        }\n\n        self::$cached_online[$user_id] = false;\n\n        $model = new cmsModel();\n\n        $date_created = $model->filterEqual('user_id', $user_id)->getFieldFiltered('sessions_online', 'date_created');\n\n        if ($date_created && (time() - self::USER_ONLINE_INTERVAL) < strtotime($date_created)) {\n            self::$cached_online[$user_id] = true;\n        }\n\n        return self::$cached_online[$user_id];\n    }\n\n    public static function isLogged() {\n        return self::getInstance()->is_logged;\n    }\n\n    public static function isAdmin() {\n        return self::getInstance()->is_admin;\n    }\n\n    public static function goLogin($back_url = '') {\n        if (!$back_url) {\n            $back_url = str_replace(\"\\r\\n\", '', $_SERVER['REQUEST_URI']);\n        }\n        header('Location:' . href_to('auth', 'login') . '?' . http_build_query(['back' => $back_url]));\n        exit;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function setSessionSavePath($save_handler, $path) {\n\n        if (!$path) { return false; }\n\n        if (ini_set('session.save_handler', $save_handler) === false) {\n            return false;\n        }\n\n        if ($save_handler === 'files') {\n\n            if (!is_dir($path)) {\n                if (!mkdir($path, 0755, true)) {\n                    return false;\n                }\n            }\n\n            if (!is_writable($path)) {\n                return false;\n            }\n        }\n\n        session_save_path($path);\n\n        return true;\n    }\n\n    /**\n     * \u0421\u0442\u0440\u0430\u0442\u0443\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e PHP\n     * \u0438 \u043c\u0435\u043d\u044f\u0435\u0442 \u0442\u0430\u0439\u043c\u0437\u043e\u043d\u0443, \u0435\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d\u0430 \u0443 \u044e\u0437\u0435\u0440\u0430\n     *\n     * @param cmsConfig $config\n     */\n    public static function sessionStart(cmsConfig $config) {\n\n        // \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e \u0441\u0435\u0441\u0441\u0438\u0439\n        self::setSessionSavePath($config->session_save_handler, $config->session_save_path);\n\n        session_name($config->session_name);\n\n        $cookie_domain = null;\n\n        if ($config->cookie_domain) {\n            $cookie_domain = '.' . $config->cookie_domain;\n        }\n\n        session_set_cookie_params(0, '/;SameSite=Lax', $cookie_domain, cmsConfig::isSecureProtocol(), true);\n\n        session_start();\n\n        // \u0442\u0430\u0439\u043c\u0437\u043e\u043d\u0430 \u0441\u0435\u0441\u0441\u0438\u0438\n        $session_time_zone = self::sessionGet('user:time_zone');\n\n        // \u0435\u0441\u043b\u0438 \u0442\u0430\u0439\u043c\u0437\u043e\u043d\u0430 \u0432 \u0441\u0435\u0441\u0441\u0438\u0438 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0439\n        if ($session_time_zone && $session_time_zone !== $config->time_zone) {\n            $config->set('time_zone', $session_time_zone);\n        }\n    }\n\n    public static function sessionSet($key, $value) {\n\n        if (strpos($key, ':') === false) {\n            $_SESSION[$key] = $value;\n        } else {\n            list($key, $subkey) = explode(':', $key);\n            $_SESSION[$key][$subkey] = $value;\n        }\n\n    }\n\n    public static function sessionPush($key, $value) {\n        $_SESSION[$key][] = $value;\n    }\n\n    public static function sessionGet($key, $is_clean = false) {\n\n        if (!self::isSessionSet($key)) {\n            return false;\n        }\n\n        if (strpos($key, ':') === false) {\n            $value = $_SESSION[$key];\n        } else {\n            list($key, $subkey) = explode(':', $key);\n            $value = $_SESSION[$key][$subkey];\n        }\n\n        if ($is_clean) {\n            self::sessionUnset($key);\n        }\n\n        return $value;\n    }\n\n    public static function isSessionSet($key) {\n        if (strpos($key, ':') === false) {\n            return isset($_SESSION[$key]);\n        } else {\n            list($key, $subkey) = explode(':', $key);\n            return isset($_SESSION[$key][$subkey]);\n        }\n    }\n\n    public static function sessionUnset($key) {\n        if (strpos($key, ':') === false) {\n            unset($_SESSION[$key]);\n        } else {\n            list($key, $subkey) = explode(':', $key);\n            unset($_SESSION[$key][$subkey]);\n        }\n    }\n\n    public static function sessionClear() {\n        $_SESSION = [];\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043a\u0443\u043a\u0438\n     * @param string $key \u0418\u043c\u044f \u043a\u0443\u043a\u0438\u0441\u0430\n     * @param string $value \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n     * @param int $time \u0412\u0440\u0435\u043c\u044f \u0436\u0438\u0437\u043d\u0438, \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445\n     * @param string $path \u041f\u0443\u0442\u044c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435\n     * @param bool $http_only \u041a\u0443\u043a\u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432\n     * @param string $domain \u0414\u043e\u043c\u0435\u043d \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f. \u043f\u0443\u0441\u0442\u043e - \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u0439\n     * */\n    public static function setCookie($key, $value, $time = 3600, $path = '/', $http_only = true, $domain = '') {\n\n        $cookie_domain = cmsConfig::get('cookie_domain');\n\n        if (!$domain && $cookie_domain) {\n            $domain = $cookie_domain;\n        }\n\n        if (PHP_VERSION_ID < 70300) {\n            return setcookie('icms[' . $key . ']', $value, time() + $time, $path, $domain, false, $http_only);\n        } else {\n            return setcookie('icms[' . $key . ']', $value, [\n                'expires'  => time() + $time,\n                'path'     => $path,\n                'domain'   => $domain,\n                'samesite' => 'Lax',\n                'secure'   => false,\n                'httponly' => $http_only\n            ]);\n        }\n    }\n\n    public static function setCookiePublic($key, $value, $time = 3600, $path = '/') {\n        return self::setCookie($key, $value, $time, $path, false);\n    }\n\n    public static function unsetCookie($key, $path = '/', $domain = null) {\n        return self::setCookie($key, '', -3600, $path, true, $domain);\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043a\u0443\u043a\u0438\u0441\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n     *\n     * @param string $key \u0418\u043c\u044f \u043a\u0443\u043a\u0438\u0441\u0430\n     * @param string $var_type \u0422\u0438\u043f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e string\n     * @param callable $callback\n     * @return mixed\n     */\n    public static function getCookie($key, $var_type = 'string', $callback = false) {\n\n        if (isset($_COOKIE['icms'][$key])) {\n\n            $cookie = $_COOKIE['icms'][$key];\n\n            if ($var_type !== null) {\n                @settype($cookie, $var_type);\n            }\n\n            if (is_callable($callback)) {\n                $cookie = call_user_func_array($callback, array($cookie));\n            }\n\n            return $cookie;\n        } else {\n            return false;\n        }\n    }\n\n    public static function hasCookie($key) {\n        return isset($_COOKIE['icms'][$key]);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function getSetUPS($key) {\n        return cmsCore::getModel('users')->getSetUPS($key);\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0435\u0433\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438\n     * User Personal Setting\n     *\n     * @param str       $key        \u041a\u043b\u044e\u0447 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a\n     * @param str|array $data       \u0414\u0430\u043d\u043d\u044b\u0435\n     * @param int       $user_id    \u0418\u0434 \u044e\u0437\u0435\u0440\u0430\n     * @return bool\n     */\n    public static function setUPS($key, $data, $user_id = null) {\n\n        if (empty($key) || (!$user_id && !($user_id = self::getInstance()->id))) {\n            return false;\n        }\n\n        return (bool) cmsCore::getModel('users')->setUPS($key, $data, $user_id);\n    }\n\n    public static function getUPS($key, $user_id = null) {\n\n        if (empty($key) || (!$user_id && !($user_id = self::getInstance()->id))) {\n            return false;\n        }\n\n        return cmsCore::getModel('users')->getUPS($key, $user_id);\n    }\n\n    public static function getUPSActual($key, $data, $user_id = null) {\n\n        if (empty($key) || (!$user_id && !($user_id = self::getInstance()->id))) {\n            return false;\n        }\n\n        $umodel = cmsCore::getModel('users');\n\n        $old = $umodel->getUPS($key, $user_id);\n        if (!$data) {\n            return $old;\n        }\n        if ($old !== $data) {\n            $umodel->setUPS($key, $data, $user_id);\n        }\n\n        return $data;\n    }\n\n    public static function deleteUPS($key, $user_id = null) {\n\n        if (empty($key) || (!$user_id && !($user_id = self::getInstance()->id))) {\n            return false;\n        }\n\n        return cmsCore::getModel('users')->deleteUPS($key, $user_id);\n    }\n\n    public static function deleteUPSlist($key) {\n        return cmsCore::getModel('users')->deleteUPS($key);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function addSessionMessage($message, $class = 'info', $is_keep = false) {\n        self::sessionPush('core_message', ['class' => $class, 'text' => $message, 'is_keep' => $is_keep]);\n    }\n\n    public static function getSessionMessages($is_clear = true) {\n\n        if (self::isSessionSet('core_message')) {\n            $messages = self::sessionGet('core_message');\n        } else {\n            $messages = false;\n        }\n        if ($is_clear) {\n            self::clearSessionMessages();\n        }\n\n        return $messages;\n    }\n\n    public static function clearSessionMessages() {\n        self::sessionUnset('core_message');\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function getPermissions($groups) {\n        return cmsPermissions::getUserPermissions($groups);\n    }\n\n    public static function getPermissionValue($subject, $permission) {\n\n        $user = self::getInstance();\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n\n        return $user->perms[$subject][$permission];\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function isDenied($subject, $permission, $value = true, $is_admin_strict = false) {\n\n        $user = self::getInstance();\n\n        if (!$is_admin_strict) {\n            if ($user->is_admin) {\n                return false;\n            }\n        }\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n\n        return $user->perms[$subject][$permission] == $value;\n    }\n\n    public static function isAllowed($subject, $permission, $value = true, $is_admin_strict = false) {\n\n        $user = self::getInstance();\n\n        if (!$is_admin_strict) {\n            if ($user->is_admin) {\n                return true;\n            }\n        }\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n        if ($user->perms[$subject][$permission] != $value) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static function isPermittedLimitReached($subject, $permission, $current_value = 0, $is_admin_strict = false) {\n\n        $user = self::getInstance();\n\n        if (!$is_admin_strict) {\n            if ($user->is_admin) {\n                return false;\n            }\n        }\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n        if ((int) $current_value >= $user->perms[$subject][$permission]) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public static function isPermittedLimitHigher($subject, $permission, $current_value = 0, $is_admin_strict = false) {\n\n        $user = self::getInstance();\n\n        if (!$is_admin_strict) {\n            if ($user->is_admin) {\n                return false;\n            }\n        }\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n        if ((int) $current_value < $user->perms[$subject][$permission]) {\n            return true;\n        }\n\n        return false;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0447\u043b\u0435\u043d\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0433\u0440\u0443\u043f\u043f\u0435\n     * @param int $group_id ID \u0433\u0440\u0443\u043f\u043f\u044b\n     * @return boolean\n     */\n    public function isInGroup($group_id) {\n        return in_array($group_id, $this->groups);\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0447\u043b\u0435\u043d\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043b\u044e\u0431\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430\n     * @param array $groups \u0421\u043f\u0438\u0441\u043e\u043a ID \u0433\u0440\u0443\u043f\u043f\n     * @return boolean\n     */\n    public function isInGroups($groups) {\n        return self::isUserInGroups($this->groups, $groups);\n    }\n\n    public static function isUserInGroups($user_groups, $groups) {\n\n        if (empty($groups) || in_array(0, $groups)) {\n            return true;\n        }\n\n        foreach ($groups as $group_id) {\n            if(in_array($group_id, $user_groups)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function isPrivacyAllowed($profile, $option, $strict = false) {\n\n        if ($this->is_admin && !$strict) {\n            return true;\n        }\n\n        if ($profile['id'] == $this->id) {\n            return true;\n        }\n\n        if (!$profile || !$option) {\n            return false;\n        }\n\n        $options = $profile['privacy_options'];\n\n        if (!isset($options[$option])) {\n            return true;\n        }\n\n        if ($options[$option] === 'anyone') {\n            return true;\n        }\n\n        if ($options[$option] === 'friends' && $this->isFriend($profile['id'])) {\n            return true;\n        }\n\n        return false;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function recacheFriends() {\n\n        $friends = cmsCore::getModel('users')->getFriendsIds($this->id);\n\n        $this->friends    = $friends['friends'];\n        $this->subscribes = $friends['subscribes'];\n\n        return $this;\n    }\n\n    public function isFriend($friend_id, $type = 'friends') {\n\n        if (!$friend_id || !$this->id) {\n            return false;\n        }\n\n        if ($friend_id == $this->id) {\n            return true;\n        }\n\n        if (empty($this->{$type})) {\n            return false;\n        }\n\n        return in_array($friend_id, $this->{$type});\n    }\n\n    public function isSubscribe($friend_id) {\n        return $this->isFriend($friend_id, 'subscribes');\n    }\n\n    public function hasFriends() {\n        return !empty($this->friends);\n    }\n\n    public function hasSubscribes() {\n        return !empty($this->subscribes);\n    }\n\n}\n", "<?php\n\nclass fieldString extends cmsFormField {\n\n    public $title       = LANG_PARSER_STRING;\n    public $sql         = 'varchar({max_length}) NULL DEFAULT NULL';\n    public $filter_type = 'str';\n    public $var_type    = 'string';\n    public $type        = 'text';\n\n    public function getOptions() {\n        return [\n            new fieldNumber('min_length', [\n                'title'   => LANG_PARSER_TEXT_MIN_LEN,\n                'default' => 0\n            ]),\n            new fieldNumber('max_length', [\n                'title'   => LANG_PARSER_TEXT_MAX_LEN,\n                'default' => 255,\n                'rules'   => [\n                    ['min', 1]\n                ]\n            ]),\n            new fieldString('placeholder', [\n                'title' => LANG_PARSER_PLACEHOLDER\n            ]),\n            new fieldCheckbox('use_inputmask', [\n                'title' => LANG_PARSER_USE_INPUTMASK\n            ]),\n            new fieldString('inputmask_str', [\n                'title'          => LANG_PARSER_INPUTMASK,\n                'hint'           => LANG_PARSER_INPUTMASK_HINT,\n                'visible_depend' => ['options:use_inputmask' => ['show' => ['1']]],\n            ]),\n            new fieldCheckbox('show_symbol_count', [\n                'title' => LANG_PARSER_SHOW_SYMBOL_COUNT\n            ]),\n            new fieldList('in_filter_as', [\n                'title' => LANG_PARSER_STRING_DISPLAY_VARIANT,\n                'hint'  => '<a href=\"#\" onclick=\"return fieldStringLoadDefault(\\'' . cmsTemplate::getInstance()->href_to('ctypes', ['field_string_ajax', $this->name]) . '\\')\" class=\"ajaxlink\">' . LANG_PARSER_STRING_ENTER_DEFAULT . '</a>',\n                'items' => [\n                    'input'    => LANG_PARSER_STRING,\n                    'select'   => LANG_PARSER_STRING_SELECT,\n                    'checkbox' => LANG_PARSER_STRING_CHECKBOX\n                ]\n            ]),\n            new fieldNumber('teaser_len', [\n                'title'           => LANG_PARSER_HTML_TEASER_LEN,\n                'hint'            => LANG_PARSER_HTML_TEASER_LEN_HINT,\n                'extended_option' => true\n            ]),\n            new fieldCheckbox('is_autolink', [\n                'title'           => LANG_PARSER_LIST_IS_AUTOLINK,\n                'hint'            => LANG_PARSER_LIST_IS_AUTOLINK_HINT . LANG_PARSER_LIST_IS_AUTOLINK_FILTER,\n                'default'         => false,\n                'extended_option' => true\n            ])\n        ];\n    }\n\n    public function getRules() {\n\n        if ($this->getOption('min_length')) {\n            $this->rules[] = ['min_length', $this->getOption('min_length')];\n        }\n\n        if ($this->getOption('max_length')) {\n            $this->rules[] = ['max_length', $this->getOption('max_length')];\n        }\n\n        return $this->rules;\n    }\n\n    public function parseTeaser($value) {\n\n        if (is_empty_value($value)) {\n            return '';\n        }\n\n        if (!empty($this->item['is_private_item'])) {\n            return '<p class=\"private_field_hint text-muted\">' . $this->item['private_item_hint'] . '</p>';\n        }\n\n        $max_len = $this->getOption('teaser_len', 0);\n\n        if ($max_len) {\n            $value = string_short($value, $max_len);\n            return $value;\n        }\n\n        return parent::parseTeaser($value);\n    }\n\n    public function parse($value) {\n\n        if (is_empty_value($value)) {\n            return '';\n        }\n\n        if ($this->getOption('is_autolink')) {\n            return html_search_bar($value, href_to($this->item['ctype_name']) . '?' . $this->name . '=', 'string_autolink ' . $this->item['ctype_name'] . '_string_autolink');\n        }\n\n        return html($value, false);\n    }\n\n    public function applyFilter($model, $value) {\n\n        switch ($this->getOption('in_filter_as')) {\n\n            case 'select':\n                return $model->filterEqual($this->name, $value);\n\n            case 'checkbox':\n                if ($value) { // \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0438 \u0431\u0435\u0437 \u044d\u0442\u043e\u0433\u043e\n                    return $model->filterNotNull($this->name);\n                }\n\n            default:\n                return $model->filterLike($this->name, '%' . $value . '%');\n        }\n\n        return $model;\n    }\n\n    public function getFilterInput($value) {\n        if ($this->getOption('in_filter_as') === 'select') {\n            $this->data['items'] = ['' => ''];\n            if ($this->hasDefaultValue()) {\n                $this->data['items'] += string_explode_list($this->getDefaultValue(), true);\n            }\n        }\n        return parent::getFilterInput($value);\n    }\n\n    public function store($value, $is_submitted, $old_value = null) {\n\n        if (is_empty_value($value)) {\n            return '';\n        }\n\n        if ($this->getProperty('is_clean_disable') === true) {\n            return trim($value, \" \\0\");\n        }\n\n        return trim(strip_tags($value), \" \\0\");\n    }\n\n    public function storeFilter($value) {\n        return $this->store($value, false);\n    }\n\n    public function getStringValue($value) {\n        return $value;\n    }\n\n    public function getInput($value) {\n\n        $this->data['type']         = $this->getProperty('is_password') ? 'password' : $this->getProperty('type');\n        $this->data['autocomplete'] = $this->getProperty('autocomplete');\n        $this->data['attributes']   = $this->getProperty('attributes') ?: ['autocomplete' => 'off'];\n\n        if ($this->data['autocomplete']) {\n            if (empty($this->data['autocomplete']['data'])) {\n                $this->data['autocomplete']['data'] = false;\n            }\n            if (empty($this->data['autocomplete']['url'])) {\n                $this->data['autocomplete']['url'] = false;\n            }\n            if (empty($this->data['autocomplete']['multiple_separator'])) {\n                $this->data['autocomplete']['multiple_separator'] = ', ';\n            }\n        }\n\n        $this->data['attributes']['placeholder'] = $this->data['attributes']['placeholder'] ?? $this->getOption('placeholder', false);\n        $this->data['attributes']['id'] = $this->id;\n        $this->data['attributes']['required'] = (array_search(['required'], $this->getRules()) !== false);\n\n        return parent::getInput($value);\n    }\n\n}\n", "<?php\n/**\n * \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u043d\u043b\u0430\u0439\u043d\u043e\u0432\u0443\u044e svg \u0438\u043a\u043e\u043d\u043a\u0443\n * @staticvar string $template_path\n * @param string $file \u0418\u043c\u044f \u0444\u0430\u0439\u043b\u0430 SVG \u0441\u043f\u0440\u0430\u0439\u0442\u0430 \u0432 templates/NAME/images/icons/\n * @param string $name \u0418\u043c\u044f \u0438\u043a\u043e\u043d\u043a\u0438\n * @param integer $size \u0420\u0430\u0437\u043c\u0435\u0440\n * @param boolean $print \u041f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u0438\u043b\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443\n */\nfunction html_svg_icon($file, $name, $size = 16, $print = true){\n    static $template_path = [];\n    if(!isset($template_path[$file])){\n        $template_path[$file] = cmsTemplate::getInstance()->getTemplateFilePath('images/icons/'.$file.'.svg', true);\n    }\n\t$icon = '<svg class=\"icms-svg-icon w-'.$size.'\" fill=\"currentColor\"><use href=\"'.$template_path[$file].'#'.$name.'\"></use></svg>';\n    if($print){\n        echo $icon;\n    } else {\n        return $icon;\n    }\n}\n/**\n * \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0442\u0435\u0433 <a>\n * @param string $title \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\n * @param string $href \u0421\u0441\u044b\u043b\u043a\u0430\n */\nfunction html_link($title, $href){\n\techo '<a href=\"'.html($href, false).'\">'.html($title, false).'</a>';\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0430\u043d\u0435\u043b\u044c \u0441\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c\u0438\n *\n * @param integer $page \u0422\u0435\u043a\u0443\u0449\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\n * @param integer $perpage \u0417\u0430\u043f\u0438\u0441\u0435\u0439 \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\n * @param integer $total \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n * @param string|array $base_uri \u0411\u0430\u0437\u043e\u0432\u044b\u0439 URL, \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u043c \u0438\u0437 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 first \u0438 base\n * @param array $query \u041c\u0430\u0441\u0441\u0438\u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n * @param string $page_param_name \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b\n * @return string\n */\nfunction html_pagebar($page, $perpage, $total, $base_uri = false, $query = [], $page_param_name = 'page') {\n\n    if (!$total || $total <= $perpage){ return ''; }\n\n    $paginator = new cmsPaginator($total, $perpage, $page, $base_uri, $query);\n\n    if($page_param_name){\n        $paginator->setPageParamName($page_param_name);\n    }\n\n    return $paginator->getRendered();\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u0433 <input>\n *\n * @param string $type \u0422\u0438\u043f \u043f\u043e\u043b\u044f\n * @param string $name \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n * @param string $value \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n * @param array $attributes \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0442\u0435\u0433\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435=>\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n * @return string\n */\nfunction html_input($type = 'text', $name = '', $value = '', $attributes = []) {\n\n    if ($type === 'password') {\n        $attributes['autocomplete'] = 'off';\n    }\n    $attributes['type']  = $type;\n    $attributes['name']  = $name;\n    $attributes['value'] = $value;\n\n    return html_tag_short('input', $attributes, 'input form-control');\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u0433 <input type=\"file\">\n *\n * @param string $name \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n * @param array $attributes \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0442\u0435\u0433\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435=>\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n * @return string\n */\nfunction html_file_input($name, $attributes = []) {\n\n    $attributes['type'] = 'file';\n    $attributes['name'] = $name;\n\n    return html_tag_short('input', $attributes, 'file-input form-control-file');\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u0433 <textarea>\n *\n * @param string $name \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n * @param string $value \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n * @param array $attributes \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0442\u0435\u0433\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435=>\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n * @return string\n */\nfunction html_textarea($name = '', $value = '', $attributes = []) {\n    $attr_str = html_attr_str($attributes);\n    $class    = 'textarea';\n    if (isset($attributes['class'])) {\n        $class .= ' ' . $attributes['class'];\n    }\n    return '<textarea name=\"' . $name . '\" class=\"form-control ' . $class . '\" ' . $attr_str . '>' . html($value, false) . '</textarea>';\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u0433 <input type=\"checkbox\">\n *\n * @param string $name \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n * @param boolean $checked \u0412\u043a\u043b\u044e\u0447\u0435\u043d/\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\n * @param mixed $value \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n * @param array $attributes \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0442\u0435\u0433\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435=>\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n * @return string\n */\nfunction html_checkbox($name, $checked = false, $value = 1, $attributes = []) {\n\n    if ($checked) {\n        $attributes['checked'] = true;\n    }\n\n    $attributes['type']  = 'checkbox';\n    $attributes['name']  = $name;\n    $attributes['value'] = $value;\n\n    return html_tag_short('input', $attributes, 'input-checkbox form-check-input');\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u0433 <input type=\"radio\">\n *\n * @param string $name \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n * @param boolean $checked \u0412\u043a\u043b\u044e\u0447\u0435\u043d/\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\n * @param mixed $value \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n * @param array $attributes \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0442\u0435\u0433\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435=>\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n * @return string\n */\nfunction html_radio($name, $checked = false, $value = 1, $attributes = []) {\n\n    if ($checked) {\n        $attributes['checked'] = 'checked';\n    }\n\n    $attributes['type']  = 'radio';\n    $attributes['name']  = $name;\n    $attributes['value'] = $value;\n\n    return html_tag_short('input', $attributes, 'input-radio form-check-input');\n}\n\n/**\n * \u041f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u043e\u0442\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0434\u0430\u0442\u0443\n *\n * @param boolean|string $date \u0414\u0430\u0442\u0430\n * @param boolean $is_time \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432\u0440\u0435\u043c\u044f?\n * @return string\n */\nfunction html_date($date = false, $is_time = false) {\n    $timestamp   = $date ? strtotime($date) : time();\n    $date_format = cmsConfig::get('date_format');\n    $date        = '<time datetime=\"' . date('c', $timestamp) . '\">' . htmlspecialchars(($date_format == 'd F Y') ? string_date_format($timestamp) : date($date_format, $timestamp)) . '</time>';\n    if ($is_time) {\n        $date .= ' <span class=\"time\">' . date('H:i', $timestamp) . '</span>';\n    }\n    return $date;\n}\n\n/**\n * \u041f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u044f \u043e\u0442 \u0434\u0430\u0442\u044b\n *\n * @param boolean|string $date \u0414\u0430\u0442\u0430\n * @return string\n */\nfunction html_time($date = false) {\n    $timestamp = $date ? strtotime($date) : time();\n    return date('H:i', $timestamp);\n}\n\n/**\n * \u041f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u043e\u0442\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0434\u0430\u0442\u0443 \u0438 \u0432\u0440\u0435\u043c\u044f\n *\n * @param boolean|string $date \u0414\u0430\u0442\u0430\n * @return string\n */\nfunction html_date_time($date = false) {\n    return html_date($date, true);\n}\n\n/**\n * \u041f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u043f\u043e\u043b\u0435 \u0432\u044b\u0431\u043e\u0440\u0430 \u0434\u0430\u0442\u044b\n *\n * @param string $name \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n * @param string $value \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n * @param array $attributes \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0442\u0435\u0433\u0430 input\n * @param array $datepicker \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b datepicker\n * @return string\n */\nfunction html_datepicker($name = '', $value = '', $attributes = [], $datepicker = []) {\n    if (isset($attributes['id'])) {\n        $id = $attributes['id'];\n        unset($attributes['id']);\n    } else {\n        $id = $name;\n    }\n    $attributes['autocomplete'] = 'off';\n    $datepicker_default = [\n        'showStatus' => true,\n        'changeYear' => true,\n        'yearRange'  => '1976:' . date('Y', strtotime('+5 year')),\n        'dateFormat' => cmsConfig::get('date_format_js')\n    ];\n    if ($datepicker) {\n        $datepicker_default = array_merge($datepicker_default, $datepicker);\n    }\n    $class = 'form-control date-input';\n    if (isset($attributes['class'])) {\n        $class .= ' ' . $attributes['class'];\n    }\n    $attr_str = html_attr_str($attributes);\n    $html     = '<input type=\"text\" placeholder=\"' . LANG_SELECT . '\" name=\"' . $name . '\" value=\"' . htmlspecialchars($value) . '\" class=\"' . $class . '\"  id=\"' . $id . '\" ' . $attr_str . '/>';\n    $script   = '<script>';\n    $script   .= '$(function(){ var datepicker_params = ' . json_encode($datepicker_default) . ';datepicker_params.onSelect = function(dateText,inst){$(\"#' . $id . '\").trigger(\"input\");icms.events.run(\"icms_datepicker_selected_' . $name . '\", inst);};datepicker_params.beforeShow = function(input,inst){icms.events.run(\"icms_datepicker_before_show_' . $name . '\", inst);};$(\"#' . $id . '\").datepicker(datepicker_params);});';\n    $script   .= '</script>';\n    if (cmsCore::getInstance()->request->isAjax()) {\n        $html .= $script;\n    } else {\n        cmsTemplate::getInstance()->addBottom($script);\n    }\n    return $html;\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043d\u043e\u043f\u043a\u0443 \"\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c\" type=\"submit\"\n *\n * @param string $caption \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043a\u043d\u043e\u043f\u043a\u0438\n * @param string $name \u0418\u043c\u044f (name)\n * @param array $attributes \u041c\u0430\u0441\u0441\u0438\u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n * @return string\n */\nfunction html_submit($caption = LANG_SUBMIT, $name = 'submit', $attributes = []) {\n\n    $attributes['type'] = 'submit';\n\n    $class = 'button-submit btn-primary';\n\n    $attributes['class'] = !empty($attributes['class']) ? $attributes['class'].' '.$class : $class;\n\n    return html_button($caption, $name, '', $attributes);\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 html-\u043a\u043e\u0434 \u043a\u043d\u043e\u043f\u043a\u0438\n *\n * @param str $caption \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\n * @param str $name \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u043e\u043f\u043a\u0438\n * @param str $onclick \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442\u0430 onclick (javascript)\n * @return string\n */\nfunction html_button($caption, $name, $onclick = '', $attributes = []) {\n\n    if (!isset($attributes['type'])) { $attributes['type'] = 'button'; }\n\n    $value = $caption;\n    if(isset($attributes['value'])){\n        $value = $attributes['value'];\n        unset($attributes['value']);\n    }\n\n    $attr_str = html_attr_str($attributes);\n\n    $class = 'button btn';\n\n    if (!empty($attributes['class'])) { $class .= ' '.$attributes['class']; }\n    else { $class .= ' btn-secondary'; }\n\n\treturn '<button value=\"'.html($value, false).'\" class=\"'.$class.'\" name=\"'.$name.'\" onclick=\"'.html($onclick, false).'\" '.$attr_str.'><span>'.html($caption, false).'</span></button>';\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u0433 <img> \u0430\u0432\u0430\u0442\u0430\u0440\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n *\n * @param array|yaml $avatars \u0412\u0441\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0430\u0432\u0430\u0442\u0430\u0440\u0430\n * @param string $size_preset \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0435\u0441\u0435\u0442\u0430\n * @param string $alt \u0417\u0430\u043c\u0435\u0449\u0430\u044e\u0449\u0438\u0439 \u0442\u0435\u043a\u0441\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n * @param bool $is_html_empty_avatar \u0412\u043c\u0435\u0441\u0442\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0446\u0432\u0435\u0442\u043d\u043e\u0439 \u0431\u043b\u043e\u043a \u0441 \u0431\u0443\u043a\u0432\u043e\u0439\n * @return string\n */\nfunction html_avatar_image($avatars, $size_preset = 'small', $alt = '', $is_html_empty_avatar = false) {\n\n    $src = html_avatar_image_src($avatars, $size_preset);\n\n    $img = '<img class=\"img-fluid\" src=\"' . $src . '\" alt=\"' . html($alt, false) . '\" title=\"' . html($alt, false) . '\" />';\n\n    if (empty($avatars) && !empty($alt) && $is_html_empty_avatar) {\n\n        $iparams = get_image_block_param_by_title($alt);\n\n        $img = '<div class=\"default_avatar\" style=\"' . $iparams['style'] . '\" data-letter=\"' . htmlspecialchars(mb_substr($alt, 0, 1)) . '\">' . $img . '</div>';\n    }\n\n    return $img;\n}\n\nfunction html_avatar_image_empty($title, $class = ''){\n\n    $iparams = get_image_block_param_by_title($title);\n\n    return '<span class=\"icms-profile-avatar__default '.$class.'\" style=\"'.$iparams['style'].'\"><svg fill=\"currentColor\" viewBox=\"0 0 28 21\"><text x=\"50%\" y=\"50%\" dominant-baseline=\"central\" text-anchor=\"middle\">'.mb_strtoupper(htmlspecialchars(mb_substr($title, 0, 1))).'</text></svg></span>';\n}\n\nfunction get_image_block_param_by_title($title) {\n\n    static $image_block_params = null;\n    if(isset($image_block_params[$title])){\n        return $image_block_params[$title];\n    }\n\n    $bg_color = substr(dechex(crc32($title)), 0, 6);\n\n    // \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u043e\u043d\u0442\u0440\u0430\u0441\u0442\u043d\u044b\u0439 \u0446\u0432\u0435\u0442 \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0430\n    $r = max( hexdec( substr($bg_color, 0, 2) ), 90);\n    $g = max( hexdec( substr($bg_color, 2, 2) ), 90);\n    $b = max( hexdec( substr($bg_color, 4, 2) ), 90);\n    $yiq = (($r*299)+($g*587)+($b*114)) / 1000;\n    $txt_color = ($yiq >= 140) ? 'black' : 'white';\n\n    $image_block_params[$title] = array(\n        'style' => \"background-color: rgba({$r}, {$g}, {$b}, .9); color: {$txt_color};\"\n    );\n\n    return $image_block_params[$title];\n\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u0433 <img>\n *\n * @param array|yaml $image \u0412\u0441\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n * @param string $size_preset \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0435\u0441\u0435\u0442\u0430\n * @param string $alt \u0417\u0430\u043c\u0435\u0449\u0430\u044e\u0449\u0438\u0439 \u0442\u0435\u043a\u0441\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n * @param array $attributes \u041c\u0430\u0441\u0441\u0438\u0432 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0442\u0435\u0433\u0430\n * @return string\n */\nfunction html_image($image, $size_preset = 'small', $alt = '', $attributes = []) {\n\n    if (is_array($size_preset)) {\n        list($small_preset, $modal_preset) = $size_preset;\n    } else {\n        $small_preset = $size_preset;\n        $modal_preset = false;\n    }\n\n    $src = html_image_src($image, $small_preset, true);\n    if (!$src) {\n        return '';\n    }\n\n    $title = html((isset($attributes['title']) ? $attributes['title'] : $alt), false);\n    unset($attributes['title']);\n\n    $attr_str = html_attr_str($attributes);\n    $class    = isset($attributes['class']) ? $attributes['class'] : '';\n\n    $image_html = '<img src=\"' . $src . '\" title=\"' . $title . '\" alt=\"' . html($alt, false) . '\" ' . $attr_str . ' class=\"img-fluid ' . $class . '\" />';\n\n    if ($modal_preset) {\n        $modal_src = html_image_src($image, $modal_preset, true);\n        if ($modal_src) {\n            return '<a title=\"' . $title . '\" class=\"ajax-modal modal_image hover_image\" href=\"' . $modal_src . '\">' . $image_html . '</a>';\n        }\n    }\n\n    return $image_html;\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 HTML \u0431\u043b\u043e\u043a gif \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n *\n * @param array|yaml $image \u0412\u0441\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n * @param string $size_preset \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0435\u0441\u0435\u0442\u0430\n * @param string $alt \u0417\u0430\u043c\u0435\u0449\u0430\u044e\u0449\u0438\u0439 \u0442\u0435\u043a\u0441\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n * @param array $attributes \u041c\u0430\u0441\u0441\u0438\u0432 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0442\u0435\u0433\u0430\n * @return string\n */\nfunction html_gif_image($image, $size_preset = 'small', $alt = '', $attributes = []) {\n\n    if (is_array($size_preset)) {\n        list($small_preset, $modal_preset) = $size_preset;\n    } else {\n        $small_preset = $size_preset;\n        $modal_preset = false;\n    }\n\n    $class = isset($attributes['class']) ? $attributes['class'] : '';\n    if ($small_preset == 'micro') {\n        $class .= ' micro_image';\n    }\n\n    $original_src = html_image_src($image, $modal_preset ?: 'original', true);\n    $preview_src  = html_image_src($image, $small_preset, true);\n\n    if (!$preview_src) {\n        return '';\n    }\n\n    return '<a class=\"ajax-modal gif_image ' . $class . '\" href=\"' . $original_src . '\" ' . html_attr_str($attributes) . '>\n                <span class=\"background_overlay\"></span>\n                <span class=\"image_label\">gif</span>\n                <img class=\"img-fluid\" src=\"' . $preview_src . '\" alt=\"' . html($alt, false) . '\" />\n            </a>';\n}\n\n/**\n * \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u043f\u0446\u0438\u0439\n *\n * @param string $name \u0418\u043c\u044f \u0441\u043f\u0438\u0441\u043a\u0430\n * @param array $items \u041c\u0430\u0441\u0441\u0438\u0432 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430 (\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 => \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a)\n * @param string|array $selected \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e(\u044b\u0445) \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n * @param array $attributes \u041c\u0430\u0441\u0441\u0438\u0432 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0442\u0435\u0433\u0430\n * @return string HTML\n */\nfunction html_select($name, $items, $selected = '', $attributes = []) {\n\n    $name = isset($attributes['multiple']) ? $name . '[]' : $name;\n\n    $attr_str = html_attr_str($attributes);\n    $class    = isset($attributes['class']) ? $attributes['class'] : '';\n    $html     = '<select class=\"form-control ' . $class . '\" name=\"' . $name . '\" ' . $attr_str . '>' . \"\\n\";\n\n    $optgroup = false;\n\n    if (is_array($selected) && $selected) {\n        foreach ($selected as $k => $v) {\n            if (is_numeric($v)) {\n                $selected[$k] = (int) $v;\n            }\n        }\n    }\n\n    if ($items && is_array($items)) {\n        foreach ($items as $value => $title) {\n\n            if (is_array($title)) {\n                if ($optgroup !== false) {\n                    $html     .= \"\\t\" . '</optgroup>' . \"\\n\";\n                    $optgroup = false;\n                }\n                $optgroup = true;\n                $html     .= \"\\t\" . '<optgroup label=\"' . htmlspecialchars($title[0]) . '\">' . \"\\n\";\n                continue;\n            }\n\n            if (is_array($selected)) {\n                $sel = in_array($value, $selected, true) ? 'selected' : '';\n            } else {\n                $sel = ((string) $selected === (string) $value) ? 'selected' : '';\n            }\n\n            $html .= \"\\t\" . '<option' . (!$title ? ' label=\"' . LANG_ALL . '\"' : '') . ' value=\"' . htmlspecialchars($value) . '\" ' . $sel . '>' . htmlspecialchars($title) . '</option>' . \"\\n\";\n        }\n    }\n\n    if ($optgroup !== false) {\n        $html .= \"\\t\" . '</optgroup>' . \"\\n\";\n    }\n\n    $html .= '</select>' . \"\\n\";\n\n    return $html;\n}\n\n/**\n * \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u043f\u0446\u0438\u0439 \u0441 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0432\u044b\u0431\u043e\u0440\u043e\u043c\n *\n * @param string $name \u0418\u043c\u044f \u0441\u043f\u0438\u0441\u043a\u0430\n * @param array $items \u041c\u0430\u0441\u0441\u0438\u0432 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430 (\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 => \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a)\n * @param string $selected \u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n * @param array $attributes \u041c\u0430\u0441\u0441\u0438\u0432 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0442\u0435\u0433\u0430\n * @return string\n */\nfunction html_select_multiple($name, $items, $selected = [], $attributes = [], $is_tree = false) {\n\n    $attr_str    = html_attr_str($attributes);\n    $class       = isset($attributes['class']) ? $attributes['class'] : '';\n    $html        = '<div class=\"input_checkbox_list ' . $class . '\" ' . $attr_str . '>' . \"\\n\";\n    $start_level = false;\n\n    if (is_array($selected) && $selected) {\n        foreach ($selected as $k => $v) {\n            if (is_numeric($v)) {\n                $selected[$k] = (int) $v;\n            }\n        }\n    }\n    foreach ($items as $value => $title) {\n\n        $checked = is_array($selected) && in_array($value, $selected, true);\n\n        if ($is_tree) {\n\n            $level = mb_strlen(str_replace(' ', '', $title)) - mb_strlen(ltrim(str_replace(' ', '', $title), '-'));\n\n            if ($start_level === false) {\n                $start_level = $level;\n            }\n\n            $level -= $start_level;\n\n            $title = ltrim($title, '- ');\n\n            $html .= \"\\t\" . '<label class=\"form-check form-check-block\" ' . ($level > 0 ? 'style=\"margin-left:' . ($level * 0.75) . 'rem\"' : '') . '>' .\n                    html_checkbox($name . '[]', $checked, $value) . ' ' .\n                    '<span>' . htmlspecialchars($title) . '</span></label>' . \"\\n\";\n        } else {\n\n            $html .= \"\\t\" . '<label class=\"form-check form-check-inline\">' .\n                    html_checkbox($name . '[]', $checked, $value) . ' ' .\n                    '<span>' . htmlspecialchars($title) . '</span></label>' . \"\\n\";\n        }\n    }\n    $html .= '</div>' . \"\\n\";\n\n    return $html;\n}\n\n/**\n * \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0435\u0440\u0435\u0432\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u0432 \u0432\u0438\u0434\u0435 \u043a\u043e\u043c\u0431\u043e-\u0431\u043e\u043a\u0441\u0430\n *\n * @param array $tree \u041c\u0430\u0441\u0441\u0438\u0432 \u0441 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0434\u0435\u0440\u0435\u0432\u0430 NS\n * @param int $selected_id ID \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n * @return string\n */\nfunction html_category_list($tree, $selected_id = 0) {\n    $html = '<select name=\"category_id\" id=\"category_id\" class=\"combobox form-control\">' . \"\\n\";\n    foreach ($tree as $cat) {\n        $padding = str_repeat('---', $cat['ns_level']) . ' ';\n        if ($selected_id == $cat['id']) {\n            $selected = 'selected';\n        } else {\n            $selected = '';\n        }\n        $html .= \"\\t\" . '<option value=\"' . $cat['id'] . '\" ' . $selected . '>' . $padding . ' ' . htmlspecialchars($cat['title']) . '</option>' . \"\\n\";\n    }\n    $html .= '</select>' . \"\\n\";\n    return $html;\n}\n\n/**\n * \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0434\u0432\u0435 \u0440\u0430\u0434\u0438\u043e-\u043a\u043d\u043e\u043f\u043a\u0438 \u0412\u041a\u041b \u0438 \u0412\u042b\u041a\u041b\n *\n * @param string $name\n * @param bool $active\n * @return string\n */\nfunction html_switch($name, $active) {\n    $html = '';\n    $html .= '<label><input type=\"radio\" name=\"' . $name . '\" value=\"1\" ' . ($active ? 'checked' : '') . '/> ' . LANG_ON . \"</label> \\n\";\n    $html .= '<label><input type=\"radio\" name=\"' . $name . '\" value=\"0\" ' . (!$active ? 'checked' : '') . '/> ' . LANG_OFF . \"</label> \\n\";\n    return $html;\n}\n\nfunction html_back_button() {\n    return '<div class=\"back_button\"><a href=\"javascript:window.history.go(-1);\">' . LANG_BACK . '</a></div>';\n}\n\nfunction html_bool_span($value, $condition, $classes = ['negative badge badge-danger', 'positive badge badge-success']){\n    if ($condition){\n        return '<span class=\"'.$classes[1].'\">' . $value . '</span>';\n    } else {\n        return '<span class=\"'.$classes[0].'\">' . $value . '</span>';\n    }\n}\n\n/**\n * \u0421\u0442\u0440\u043e\u0438\u0442 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u0441\u043f\u0438\u0441\u043e\u043a UL \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n *\n * @author acmol\n * @param array $array\n * @return string\n */\nfunction html_array_to_list($array) {\n\n    $html = '<ul>';\n\n    foreach ($array as $key => $elem) {\n\n        if (!is_array($elem)) {\n            $html .= '<li>' . $elem . '</li>';\n        } else {\n            $html .= '<li class=\"folder\">' . $key . ' ' . html_array_to_list($elem) . '</li>';\n        }\n    }\n\n    $html .= '</ul>';\n\n    return $html;\n}\n\nfunction html_search_bar($list, $href, $link_class = '', $glue = ', ') {\n\n    if (!$list) {\n        return '';\n    }\n\n    if (!is_array($list)) {\n        $list = explode(',', $list);\n    }\n\n    // RFC2396 \u0434\u043b\u044f \u0441\u043b\u0435\u0448\u0435\u0439 \u0432 \u0443\u0440\u043b\u0430\u0445\n    $encode_slashes = mb_strpos($href, '?') === false;\n\n    foreach ($list as $id => $letter) {\n\n        $letter = trim($letter);\n        $name = $letter;\n\n        if($encode_slashes){\n            $letter = string_urlencode($letter);\n        } else {\n            $letter = urlencode($letter);\n        }\n\n        $list[$id] = '<a class=\"' . $link_class . '\" href=\"' . $href . $letter . '\">' . html($name, false) . '</a>';\n    }\n\n    return implode($glue, $list);\n}\n\nfunction html_tags_bar($tags, $prefix = '', $class = 'tags_bar_link', $glue = ', ') {\n    return html_search_bar($tags, href_to('tags') . '/' . ($prefix ? $prefix . '/' : ''), $class, $glue);\n}\n", "<?php $this->addTplJSNameFromContext('jquery-cookie'); ?>\n<?php $this->addTplJSNameFromContext('form-translate'); ?>\n<?php if ((!isset($attributes['toolbar']) || $attributes['toolbar']) && $this->isToolbar() && empty($attributes['hide_toolbar'])){ ?>\n    <?php $this->toolbar('menu-toolbar'); ?>\n<?php } ?>\n\n<form id=\"<?php html($attributes['form_id']); ?>\" action=\"<?php echo $attributes['action']; ?>\"\n      method=\"<?php echo $attributes['method']; ?>\"\n      class=\"<?php html($attributes['form_class']); ?><?php if ($this->controller->request->isAjax()){ ?> ajax-form<?php } ?>\"\n      enctype=\"multipart/form-data\"\n      accept-charset=\"utf-8\">\n\n    <?php echo html_csrf_token(); ?>\n\n    <?php echo $attributes['prepend_html']; ?>\n\n    <div class=\"<?php if($form->is_tabbed){ ?>tabs-menu mb-3 <?php } else { ?><?php if(count($form->getStructure()) > 1) { ?> without-tabs <?php } ?> card mb-0 <?php } ?>form-tabs\">\n\n        <?php if($form->is_tabbed){ ?>\n            <ul class=\"nav nav-tabs flex-wrap\">\n                <?php foreach($form->getStructure() as $fieldset_id => $fieldset){ ?>\n                    <?php if (empty($fieldset['is_empty']) && empty($fieldset['childs'])) { continue; } ?>\n                    <li class=\"nav-item\">\n                        <?php if($active_tab === false){ $active_tab = (string)$fieldset_id; } ?>\n                        <a class=\"nav-link<?php if($active_tab === (string)$fieldset_id){ ?> active<?php } ?><?php if(!empty($fieldset['parent']['list'])){ ?> icms-form-tab__demand<?php } ?>\" <?php if(!empty($fieldset['parent']['list'])){ ?>data-parent=\"<?php echo str_replace(':', '_', $fieldset['parent']['list']); ?>\" data-parent_url=\"<?php echo $fieldset['parent']['url']; ?>\"<?php } ?> href=\"#tab-<?php echo $fieldset_id; ?>\" data-toggle=\"tab\" data-fieldset_id=\"<?php echo $fieldset_id; ?>\">\n                            <?php echo $fieldset['title']; ?>\n                        </a>\n                    </li>\n                <?php } ?>\n            </ul>\n            <div class=\"tab-content\">\n        <?php } else { ?>\n             <div class=\"card-body\">\n        <?php } ?>\n\n        <?php include $this->getTemplateFileName('assets/ui/form_fields'); ?>\n\n        </div>\n\n    </div>\n\n    <?php if(!empty($attributes['hook'])){ ?>\n\n        <?php $param = empty($attributes['hook']['param']) ? false : $attributes['hook']['param'];  ?>\n        <?php $hooks_html = cmsEventsManager::hookAll($attributes['hook']['event'], $param); ?>\n        <?php if ($hooks_html) { echo html_each($hooks_html); } ?>\n\n    <?php } ?>\n\n    <?php echo $attributes['append_html']; ?>\n\n    <div class=\"buttons <?php if (!$this->controller->request->isAjax()){ ?>my-3<?php } ?>\">\n        <?php if ($attributes['submit']['show']) { ?>\n            <?php echo html_submit($attributes['submit']['title'], 'submit', $attributes['submit']); ?>\n        <?php } ?>\n        <?php if(isset($attributes['buttons'])){ ?>\n            <?php foreach ($attributes['buttons'] as $button) { ?>\n                <?php if (!empty($button['hide'])) { continue; } ?>\n                <?php echo html_button(\n                        $button['title'],\n                        $button['name'],\n                        (isset($button['onclick']) ? $button['onclick'] : ''),\n                        (isset($button['attributes']) ? $button['attributes'] : array())\n                    ); ?>\n            <?php } ?>\n        <?php } ?>\n        <?php if ($attributes['cancel']['show']) { echo html_button($attributes['cancel']['title'], 'cancel', \"location.href='{$attributes['cancel']['href']}'\", array('class'=>'btn-secondary button-cancel')); } ?>\n    </div>\n\n</form>\n<?php ob_start(); ?>\n<script>\n    <?php echo $this->getLangJS('LANG_CH1','LANG_CH2','LANG_CH10', 'LANG_ISLEFT', 'LANG_SUBMIT_NOT_SAVE', 'LANG_TRANSLATE'); ?>\n    icms.translate.url = '<?php echo href_to('languages', 'tr'); ?>';\n    $(function (){\n        <?php if ($form->show_unsave_notice){ ?>\n            icms.forms.initUnsaveNotice();\n        <?php } ?>\n        icms.forms.initCollapsedFieldset();\n        icms.forms.initFormHelpers();\n    <?php if (!empty($attributes['is_ajax'])){ ?>\n        $('#<?php echo $attributes['form_id']; ?>').on('submit', function (){\n            return icms.forms.submitAjax(this, <?php echo !empty($attributes['params']) ? json_encode($attributes['params']) : 'undefined'; ?>);\n        });\n    <?php } ?>\n        icms.forms.initFieldsetChildList('<?php echo $attributes['form_id']; ?>');\n    <?php if ($form->is_tabbed){ ?>\n        $('#<?php echo $attributes['form_id']; ?> a[data-toggle=\"tab\"]').on('shown.bs.tab', function (event) {\n            $.cookie('icms[<?php echo $cookie_tab_key; ?>]', $(this).data('fieldset_id'));\n        });\n    <?php } ?>\n    });\n</script>\n<?php $this->addBottom(ob_get_clean()); ?>\n", "<?php if ($this->isToolbar()){ ?>\n    <?php $this->toolbar('menu-toolbar'); ?>\n<?php } ?>\n\n<form action=\"<?php echo $submit_url; ?>\" method=\"post\">\n\n    <div class=\"datagrid_wrapper perms_grid table-responsive dataTables_wrapper dt-bootstrap4\">\n        <table id=\"datagrid\" class=\"datagrid table table-striped table-bordered dataTable bg-white\">\n            <thead>\n                <tr>\n                    <th><?php echo LANG_PERM_RULE; ?></th>\n                    <?php foreach($groups as $group){ ?>\n                        <th class=\"center\"><?php echo $group['title']; ?></th>\n                    <?php } ?>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"filter table-align-middle\">\n                    <td class=\"p-2\">\n                        <?php echo html_input('search', 'filter_perm_rule', '', ['id'=>'filter_perm_rule', 'class' => 'form-control-sm']); ?>\n                    </td>\n                    <?php foreach($groups as $group){ ?>\n                        <td class=\"p-2\"></td>\n                    <?php } ?>\n                </tr>\n                <?php foreach($rules as $rule){ ?>\n                    <tr class=\"icms-perms-rule__list\">\n                        <td class=\"align-middle\">\n                            <?php echo $rule['title']; ?>\n                            <?php if(!empty($rule['title_hint'])){ ?>\n                                <div class=\"hint text-muted small\"><?php echo $rule['title_hint']; ?></div>\n                            <?php } ?>\n                        </td>\n\n                        <?php foreach($groups as $group){ ?>\n\n                            <?php if($group['id'] == GUEST_GROUP_ID && empty($rule['show_for_guest_group'])){ ?>\n                                <td class=\"center\"></td>\n                            <?php continue; } ?>\n\n                            <?php\n                                $default =  isset($values[$rule['id']][$group['id']]) ?\n                                            $values[$rule['id']][$group['id']] :\n                                            null;\n                            ?>\n\n                            <td class=\"center align-middle text-center\" data-label=\"<?php html($group['title']); ?>\">\n                                <?php if ($rule['type'] == 'flag'){ ?>\n                                    <label class=\"switch switch-pill switch-primary m-0 align-middle\">\n                                        <?php echo html_checkbox(\"value[{$rule['id']}][{$group['id']}]\", $default, 1, array('class' => 'switch-input')); ?>\n                                        <span class=\"switch-slider\"></span>\n                                    </label>\n                                <?php } ?>\n                                <?php if ($rule['type'] == 'list'){ ?>\n                                    <?php echo html_select(\"value[{$rule['id']}][{$group['id']}]\", $rule['options'], $default); ?>\n                                <?php } ?>\n                                <?php if ($rule['type'] == 'number'){ ?>\n                                    <?php echo html_input('text', \"value[{$rule['id']}][{$group['id']}]\", $default, array('class'=>'input-number')); ?>\n                                <?php } ?>\n                            </td>\n\n                        <?php } ?>\n\n                    </tr>\n                <?php } ?>\n            </tbody>\n        </table>\n    </div>\n\n    <div class=\"buttons my-3\">\n        <?php echo html_submit(LANG_SAVE); ?>\n    </div>\n\n</form>\n<?php ob_start(); ?>\n<script>\n    <?php echo $this->getLangJS('LANG_SUBMIT_NOT_SAVE'); ?>\n    $(function (){\n        icms.forms.initUnsaveNotice();\n        $('#filter_perm_rule').on('input', function () {\n            var rex = new RegExp($(this).val(), 'i');\n            $('.icms-perms-rule__list').hide();\n            $('.icms-perms-rule__list').filter(function () {\n                return rex.test($(this).text());\n            }).show();\n        });\n    });\n</script>\n<?php $this->addBottom(ob_get_clean()); ?>\n", "<?php\n\n    $this->addTplJSName([\n        'datatree'\n    ]);\n    $this->addTplCSSName('datatree');\n\n    $this->setPageTitle(LANG_CP_SECTION_MENU);\n\n    $this->addBreadcrumb(LANG_CP_SECTION_MENU, $this->href_to('menu'));\n    // \u0442\u0443\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u043f\u0443\u043d\u043a\u0442 \u0434\u0435\u0440\u0435\u0432\u0430\n    $this->addBreadcrumb('', $this->href_to('menu').'?last');\n\n    $this->addMenuItem('breadcrumb-menu', [\n        'title' => LANG_HELP,\n        'url'   => LANG_HELP_URL_MENU,\n        'options' => [\n            'target' => '_blank',\n            'icon' => 'question-circle'\n        ]\n    ]);\n?>\n\n<div class=\"row align-items-stretch mb-4\">\n    <div class=\"col-auto quickview-wrapper\" id=\"left-quickview\">\n        <a class=\"quickview-toggle close\" data-toggle=\"quickview\" data-toggle-element=\"#left-quickview\" href=\"#\"><span>\u00d7</span></a>\n        <div id=\"datatree\" class=\"card-body bg-white h-100 pt-3\">\n            <ul id=\"treeData\" class=\"skeleton-tree\">\n                <?php foreach ($menus as $id => $menu) { ?>\n                    <li id=\"<?php echo $menu['id'];?>.0\" class=\"lazy folder\">\n                        <?php echo $menu['title']; ?>\n                    </li>\n                <?php } ?>\n            </ul>\n        </div>\n    </div>\n    <div class=\"col\">\n        <?php echo $grid_html; ?>\n    </div>\n</div>\n\n<script>\n    icms.events.on('datagrid_mounted', function(app){\n        let is_init = false;\n        $(\"#datatree\").dynatree({\n            onPostInit: function(isReloading, isError){\n                let path = $.cookie('icms[menu_tree_path]');\n                if (!path) { path = '/1.0'; }\n                this.loadKeyPath(path, function(node, status){\n                    if(status === 'loaded') {\n                        node.expand();\n                    } else if(status === 'ok') {\n                        node.activate();\n                        node.expand();\n                    }\n                });\n            },\n            onActivate: function(node){\n                if (is_init) {\n                    icms.datagrid.setURL(\"<?php echo $this->href_to('menu'); ?>/\" + node.data.key);\n                    icms.datagrid.loadRows();\n                }\n                is_init = true;\n                node.expand();\n                $.cookie('icms[menu_tree_path]', node.getKeyPath(), {expires: 7, path: '/'});\n                let key = node.data.key.split('.');\n                $('.cp_toolbar .add_item a').attr('href', \"<?php echo $this->href_to('menu', ['item_add']); ?>/\" + key[0] + \"/\" + key[1]);\n                $('.cp_toolbar .edit_menu a').attr('href', \"<?php echo $this->href_to('menu', ['edit']); ?>/\" + key[0]);\n                $('.cp_toolbar .delete_menu a').attr('href', \"<?php echo $this->href_to('menu', ['delete']); ?>/\" + key[0] + '?csrf_token='+icms.forms.getCsrfToken());\n                $('.breadcrumb-item.active').html(node.data.title);\n            },\n            onLazyRead: function(node){\n                node.appendAjax({\n                    url: \"<?php echo $this->href_to('menu', ['tree_ajax']); ?>\",\n                    data: {\n                        id: node.data.key\n                    }\n                });\n            }\n        });\n    });\n</script>", "<div class=\"modal_padding\">\n    <h3><?php echo $confirm_title; ?></h3>\n    <form action=\"<?php echo $confirm_action; ?>\" method=\"post\" onsubmit=\"$(this).find('.button-submit').addClass('disabled is-busy');\">\n        <?php echo html_csrf_token(); ?>\n        <?php echo html_input('hidden', 'back', $this->controller->request->get('back', '')); ?>\n        <?php echo html_submit(LANG_CONFIRM); ?>\n        <?php echo html_button(LANG_CANCEL, 'cancel', 'icms.modal.close()'); ?>\n    </form>\n</div>", "<?php $user = cmsUser::getInstance(); ?>\n<?php $form_id = isset($form_id) ? $form_id : md5(microtime(true)); ?>\n<?php if (!isset($is_expanded)){ $is_expanded = false; } unset($filters['user_id']); ?>\n<?php $form_url = is_array($page_url) ? $page_url['base'] : $page_url; $form_url_sep = strpos($form_url, '?') === false ? '?' : '&'; ?>\n<div class=\"filter-panel gui-panel <?php echo $css_prefix;?>-filter\">\n    <div class=\"filter-link\" <?php if($filters || $is_expanded){ ?>style=\"display:none\"<?php } ?>>\n        <a href=\"javascript:toggleFilter()\"><span><?php echo LANG_SHOW_FILTER; ?></span></a>\n    </div>\n    <div class=\"filter-container\" <?php if(!$filters && !$is_expanded){ ?>style=\"display:none\"<?php } ?>>\n\t\t<div class=\"filter-close\">\n            <a href=\"javascript:toggleFilter();\"><span><?php echo LANG_CLOSE; ?></span></a>\n        </div>\n        <form action=\"<?php echo $form_url; ?>\" method=\"get\" id=\"<?php echo $form_id; ?>\" accept-charset=\"utf-8\">\n            <?php echo html_input('hidden', 'page', 1); ?>\n            <?php if(!empty($ext_hidden_params)){ ?>\n                <?php foreach($ext_hidden_params as $fname => $fvalue){ ?>\n                    <?php echo html_input('hidden', $fname, $fvalue); ?>\n                    <?php if($filters){ $filters[$fname] = $fvalue; } ?>\n                <?php } ?>\n            <?php } ?>\n            <div class=\"fields\">\n                <?php $fields_count = 0; ?>\n                <?php foreach($fields as $name => $field){ ?>\n                    <?php if (!$field['is_in_filter']){ continue; } ?>\n                    <?php if (!empty($field['filter_view']) && !$user->isInGroups($field['filter_view'])) { continue; } ?>\n                    <?php $value = isset($filters[$name]) ? $filters[$name] : null; ?>\n                    <?php $output = $field['handler']->getFilterInput($value); ?>\n                    <?php if (!$output){ continue; } ?>\n                    <?php $fields_count++; ?>\n                    <div class=\"field ft_<?php echo $field['type']; ?> f_<?php echo $field['name']; ?>\">\n                        <div class=\"title\"><?php echo $field['title']; ?></div>\n                        <div class=\"value\">\n                            <?php echo $output; ?>\n                        </div>\n                    </div>\n                <?php } ?>\n                <?php if (!empty($props)){ ?>\n                    <?php foreach($props as $prop){ ?>\n                        <?php\n                            if (!$prop['is_in_filter']){ continue; }\n                            $fields_count++;\n                            $prop['handler']->setName(\"p{$prop['id']}\");\n                            $value = isset($filters[\"p{$prop['id']}\"]) ? $filters[\"p{$prop['id']}\"] : null;\n                        ?>\n                        <div class=\"field ft_<?php echo $prop['type']; ?> f_prop_<?php echo $prop['id']; ?>\">\n                            <div class=\"title\"><?php echo $prop['title']; ?></div>\n                            <div class=\"value\">\n                                <?php echo $prop['handler']->getFilterInput($value); ?>\n                            </div>\n                        </div>\n                    <?php } ?>\n                <?php } ?>\n            </div>\n            <?php if ($fields_count) { ?>\n                <div class=\"spinner filter_loader\"><div class=\"bounce1\"></div><div class=\"bounce2\"></div><div class=\"bounce3\"></div></div>\n                <div class=\"buttons\">\n                    <?php echo html_submit(LANG_FILTER_APPLY); ?>\n                    <?php if (count($filters)){ ?>\n                        <div class=\"link\">\n                            <a class=\"cancel_filter_link\" href=\"<?php echo ((is_array($page_url) && !empty($page_url['cancel'])) ? $page_url['cancel'] : $form_url); ?>\">\n                                <?php echo LANG_CANCEL; ?>\n                            </a>\n                        </div>\n                        <div class=\"link\">\n                            <?php\n                            if(!empty($page_url['filter_link'])){\n                                $filter_url = $page_url['filter_link'];\n                            } else {\n                                $filter_url = $form_url.$form_url_sep.http_build_query($filters);\n                            }\n                            ?>\n                            # <a href=\"<?php echo $filter_url; ?>\">\n                                <?php echo LANG_FILTER_URL; ?>\n                            </a>\n                        </div>\n                        <?php\n                            $hooks_html = cmsEventsManager::hookAll('content_filter_buttons_html', array($css_prefix, $form_url, $filters));\n                            if ($hooks_html) { echo html_each($hooks_html); }\n                        ?>\n                    <?php } ?>\n                </div>\n            <?php } ?>\n        </form>\n    </div>\n</div>\n<script>\n    <?php echo $this->getLangJS('LANG_CH1','LANG_CH2','LANG_CH10', 'LANG_ISLEFT', 'LANG_SUBMIT_NOT_SAVE'); ?>\n    $(function (){\n        <?php if (!$fields_count) { ?>\n            $('.filter-panel.groups-filter').hide();\n        <?php } ?>\n        icms.forms.initFilterForm('#<?php echo $form_id; ?>');\n    });\n</script>", "<?php $this->addTplJSNameFromContext('jquery-cookie'); ?>\n<?php if ((!isset($attributes['toolbar']) || $attributes['toolbar']) && $this->isToolbar() && empty($attributes['hide_toolbar'])){ ?>\n    <div class=\"cp_toolbar\">\n        <?php $this->toolbar(); ?>\n    </div>\n<?php } ?>\n\n<form id=\"<?php html($attributes['form_id']); ?>\" action=\"<?php echo $attributes['action']; ?>\"\n      method=\"<?php echo $attributes['method']; ?>\"\n      <?php if ($this->controller->request->isAjax()){ ?>\n        class=\"modal\"\n      <?php } ?>\n      enctype=\"multipart/form-data\"\n      accept-charset=\"utf-8\">\n\n    <?php echo html_csrf_token(); ?>\n\n    <?php echo $attributes['prepend_html']; ?>\n\n    <div class=\"<?php if($form->is_tabbed){ ?>tabs-menu <?php } ?>form-tabs\">\n\n        <?php if($form->is_tabbed){ ?>\n            <ul class=\"tabbed\">\n                <?php foreach($form->getStructure() as $fieldset_id => $fieldset){ ?>\n                    <?php if (empty($fieldset['is_empty']) && empty($fieldset['childs'])) { continue; } ?>\n                    <li>\n                        <a class=\"<?php if(!empty($fieldset['parent']['list'])){ ?>icms-form-tab__demand<?php } ?>\" <?php if(!empty($fieldset['parent']['list'])){ ?>data-parent=\"<?php echo str_replace(':', '_', $fieldset['parent']['list']); ?>\" data-parent_url=\"<?php echo $fieldset['parent']['url']; ?>\"<?php } ?> href=\"#tab-<?php echo $fieldset_id; ?>\">\n                            <?php echo $fieldset['title']; ?>\n                        </a>\n                    </li>\n                <?php } ?>\n            </ul>\n        <?php } ?>\n\n        <?php include 'form_fields.tpl.php'; ?>\n\n    </div>\n\n    <?php if(!empty($attributes['hook'])){ ?>\n\n        <?php $param = empty($attributes['hook']['param']) ? false : $attributes['hook']['param'];  ?>\n        <?php $hooks_html = cmsEventsManager::hookAll($attributes['hook']['event'], $param); ?>\n        <?php if ($hooks_html) { echo html_each($hooks_html); } ?>\n\n    <?php } ?>\n\n    <?php echo $attributes['append_html']; ?>\n\n    <div class=\"buttons\">\n        <?php if ($attributes['submit']['show']) { ?>\n            <?php echo html_submit($attributes['submit']['title'], 'submit', $attributes['submit']); ?>\n        <?php } ?>\n        <?php if(isset($attributes['buttons'])){ ?>\n            <?php foreach ($attributes['buttons'] as $button) { ?>\n                <?php if (!empty($button['hide'])) { continue; } ?>\n                <?php echo html_button(\n                        $button['title'],\n                        $button['name'],\n                        (isset($button['onclick']) ? $button['onclick'] : ''),\n                        (isset($button['attributes']) ? $button['attributes'] : array())\n                    ); ?>\n            <?php } ?>\n        <?php } ?>\n        <?php if ($attributes['cancel']['show']) { echo html_button($attributes['cancel']['title'], 'cancel', \"location.href='{$attributes['cancel']['href']}'\", array('class'=>'button-cancel')); } ?>\n    </div>\n\n</form>\n<?php ob_start(); ?>\n<script>\n    <?php echo $this->getLangJS('LANG_CH1','LANG_CH2','LANG_CH10', 'LANG_ISLEFT', 'LANG_SUBMIT_NOT_SAVE'); ?>\n    $(function (){\n    <?php if ($form->show_unsave_notice){ ?>\n        icms.forms.initUnsaveNotice();\n    <?php } ?>\n    <?php if ($form->is_tabbed){ ?>\n        initTabs('#<?php echo $attributes['form_id']; ?>');\n    <?php } ?>\n        $('.is_collapsed legend').on('click', function (){\n            var _fieldset = $(this).closest('.is_collapsed');\n            $(_fieldset).toggleClass('is_collapse do_expand');\n            $.cookie('icms[fieldset_state]['+$(_fieldset).attr('id')+']', $(_fieldset).hasClass('do_expand'));\n        });\n        $('.is_collapsed').each(function (){\n            if($(this).find('.field_error').length > 0 || $.cookie('icms[fieldset_state]['+$(this).attr('id')+']') === 'true'){\n                $(this).addClass('do_expand').removeClass('is_collapse'); return;\n            }\n        });\n    <?php if (!empty($attributes['is_ajax'])){ ?>\n        $('#<?php echo $attributes['form_id']; ?>').on('submit', function (){\n            return icms.forms.submitAjax(this, <?php echo !empty($attributes['params']) ? json_encode($attributes['params']) : 'undefined'; ?>);\n        });\n    <?php } ?>\n        icms.forms.initFieldsetChildList('<?php echo $attributes['form_id']; ?>');\n    });\n</script>\n<?php $this->addBottom(ob_get_clean()); ?>", "<?php if (!empty($this->menus['toolbar'])){ ?>\n<div class=\"cp_toolbar\">\n    <?php $this->toolbar(); ?>\n</div>\n<?php } ?>\n\n\n<form action=\"<?php echo $submit_url; ?>\" method=\"post\">\n\n    <div class=\"datagrid_wrapper perms_grid\">\n        <table id=\"datagrid\" class=\"datagrid\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n            <thead>\n                <tr>\n                    <th><?php echo LANG_PERM_RULE; ?></th>\n                    <?php foreach($groups as $group){ ?>\n                        <th class=\"center\"><?php echo $group['title']; ?></th>\n                    <?php } ?>\n                </tr>\n            </thead>\n            <tbody>\n                <?php foreach($rules as $rule){ ?>\n                    <tr>\n                        <td>\n                            <div>\n                            <?php echo $rule['title']; ?>\n                            <?php if(!empty($rule['title_hint'])){ ?>\n                                <div class=\"hint\"><?php echo $rule['title_hint']; ?></div>\n                            <?php } ?>\n                            </div>\n                        </td>\n\n                        <?php foreach($groups as $group){ ?>\n\n                            <?php if($group['id'] == GUEST_GROUP_ID && empty($rule['show_for_guest_group'])){ ?>\n                                <td class=\"center\"></td>\n                            <?php continue; } ?>\n\n                            <?php\n                                $default =  isset($values[$rule['id']][$group['id']]) ?\n                                            $values[$rule['id']][$group['id']] :\n                                            null;\n                            ?>\n\n                            <td class=\"center\" data-label=\"<?php html($group['title']); ?>\">\n                                <?php if ($rule['type'] == 'flag'){ ?>\n                                    <?php echo html_checkbox(\"value[{$rule['id']}][{$group['id']}]\", $default); ?>\n                                <?php } ?>\n                                <?php if ($rule['type'] == 'list'){ ?>\n                                    <?php echo html_select(\"value[{$rule['id']}][{$group['id']}]\", $rule['options'], $default); ?>\n                                <?php } ?>\n                                <?php if ($rule['type'] == 'number'){ ?>\n                                    <?php echo html_input('text', \"value[{$rule['id']}][{$group['id']}]\", $default, array('class'=>'input-number')); ?>\n                                <?php } ?>\n                            </td>\n\n                        <?php } ?>\n\n                    </tr>\n                <?php } ?>\n            </tbody>\n        </table>\n    </div>\n\n    <div class=\"buttons\">\n        <?php echo html_submit(LANG_SAVE); ?>\n    </div>\n\n</form>", "<?php\n$user = cmsUser::getInstance();\n$form_id = isset($form_id) ? $form_id : md5(microtime(true));\nif (!isset($is_expanded)){ $is_expanded = false; } unset($filters['user_id']);\n$form_url = is_array($page_url) ? $page_url['base'] : $page_url;\n$form_url_sep = strpos($form_url, '?') === false ? '?' : '&';\n?>\n\n<div class=\"icms-filter-panel gui-panel my-3 <?php echo $css_prefix;?>-filter\">\n\n    <button class=\"icms-filter-link__open btn btn-block btn-light text-left <?php if($filters || $is_expanded){ ?>d-none<?php } ?>\">\n        <?php html_svg_icon('solid', 'filter'); ?> <span><?php echo LANG_SHOW_FILTER; ?></span>\n    </button>\n\n    <div class=\"icms-filter-container p-3 bg-light position-relative <?php if(!$filters && !$is_expanded){ ?>d-none<?php } ?>\">\n        <button type=\"button\" class=\"close position-absolute icms-filter-link__close\" title=\"<?php echo LANG_CLOSE; ?>\">\n            <span>&times;</span>\n        </button>\n        <form action=\"<?php echo $form_url; ?>\" method=\"get\" id=\"<?php echo $form_id; ?>\" accept-charset=\"utf-8\">\n            <?php echo html_input('hidden', 'page', 1); ?>\n            <?php if(!empty($ext_hidden_params)){ ?>\n                <?php foreach($ext_hidden_params as $fname => $fvalue){ ?>\n                    <?php echo html_input('hidden', $fname, $fvalue); ?>\n                    <?php if($filters){ $filters[$fname] = $fvalue; } ?>\n                <?php } ?>\n            <?php } ?>\n            <div class=\"fields form-row\">\n                <?php $fields_count = 0; ?>\n                <?php foreach($fields as $name => $field){ ?>\n                    <?php if (!$field['is_in_filter']){ continue; } ?>\n                    <?php if (!empty($field['filter_view']) && !$user->isInGroups($field['filter_view'])) { continue; } ?>\n                    <?php $value = isset($filters[$name]) ? $filters[$name] : null; ?>\n                    <?php $output = $field['handler']->getFilterInput($value); ?>\n                    <?php if (!$output){ continue; } ?>\n                    <?php $fields_count++; ?>\n                    <div class=\"form-group col-md-6 field ft_<?php echo $field['type']; ?> f_<?php echo $field['name']; ?>\">\n                        <label class=\"font-weight-bold\"><?php echo $field['title']; ?></label>\n                        <?php echo $output; ?>\n                    </div>\n                <?php } ?>\n                <?php if (!empty($props)){ ?>\n                    <?php foreach($props as $prop){ ?>\n                        <?php\n                            if (!$prop['is_in_filter']){ continue; }\n                            $fields_count++;\n                            $prop['handler']->setName(\"p{$prop['id']}\");\n                            $value = isset($filters[\"p{$prop['id']}\"]) ? $filters[\"p{$prop['id']}\"] : null;\n                        ?>\n                        <div class=\"form-group col-md-6 field ft_<?php echo $prop['type']; ?> f_prop_<?php echo $prop['id']; ?>\">\n                            <label class=\"font-weight-bold\"><?php echo $prop['title']; ?></label>\n                            <?php echo $prop['handler']->getFilterInput($value); ?>\n                        </div>\n                    <?php } ?>\n                <?php } ?>\n            </div>\n\n            <?php if ($fields_count) { ?>\n                <div class=\"buttons d-flex flex-column flex-md-row\">\n                    <?php echo html_submit(LANG_FILTER_APPLY); ?>\n                    <?php if (count($filters)){ ?>\n                        <a class=\"btn btn-secondary cancel_filter_link my-2 my-md-0 mx-md-2\" href=\"<?php echo ((is_array($page_url) && !empty($page_url['cancel'])) ? $page_url['cancel'] : $form_url); ?>\">\n                            <?php echo LANG_CANCEL; ?>\n                        </a>\n                        <?php\n                        if(!empty($page_url['filter_link'])){\n                            $filter_url = $page_url['filter_link'];\n                        } else {\n                            $filter_url = $form_url.$form_url_sep.http_build_query($filters);\n                        }\n                        ?>\n                        <a class=\"btn btn-link\" href=\"<?php echo $filter_url; ?>\">\n                            # <?php echo LANG_FILTER_URL; ?>\n                        </a>\n                        <?php\n                            $hooks_html = cmsEventsManager::hookAll('content_filter_buttons_html', array($css_prefix, $form_url, $filters));\n                            if ($hooks_html) { ?>\n                                <div class=\"mt-2 mt-md-0 ml-md-auto\">\n                                    <?php echo html_each($hooks_html); ?>\n                                </div>\n                        <?php } ?>\n                    <?php } ?>\n                </div>\n            <?php } ?>\n        </form>\n    </div>\n</div>\n<?php ob_start(); ?>\n<script>\n    <?php echo $this->getLangJS('LANG_CH1','LANG_CH2','LANG_CH10', 'LANG_ISLEFT', 'LANG_SUBMIT_NOT_SAVE'); ?>\n    $(function (){\n        <?php if (!$fields_count) { ?>\n            $('.icms-filter-panel.groups-filter').hide();\n        <?php } ?>\n        icms.forms.initFilterForm('#<?php echo $form_id; ?>');\n    });\n</script>\n<?php $this->addBottom(ob_get_clean()); ?>", "<?php $this->addTplJSNameFromContext('jquery-cookie'); ?>\n<?php if ((!isset($attributes['toolbar']) || $attributes['toolbar']) && $this->isToolbar() && empty($attributes['hide_toolbar'])){ ?>\n    <?php $this->toolbar('menu-toolbar'); ?>\n<?php } ?>\n\n<form id=\"<?php html($attributes['form_id']); ?>\" action=\"<?php echo $attributes['action']; ?>\"\n      method=\"<?php echo $attributes['method']; ?>\"\n      class=\"<?php html($attributes['form_class']); ?><?php if ($this->controller->request->isAjax()){ ?> ajax-form<?php } ?>\"\n      enctype=\"multipart/form-data\"\n      accept-charset=\"utf-8\">\n\n    <?php echo html_csrf_token(); ?>\n\n    <?php echo $attributes['prepend_html']; ?>\n\n    <div class=\"<?php if($form->is_tabbed){ ?>tabs-menu mb-3 <?php } else { ?><?php if(count($form->getStructure()) > 1) { ?> without-tabs <?php } ?> <?php } ?>form-tabs\">\n\n        <?php if($form->is_tabbed){ ?>\n            <ul class=\"nav nav-tabs flex-wrap\" role=\"tablist\">\n                <?php foreach($form->getStructure() as $fieldset_id => $fieldset){ ?>\n                    <?php if (empty($fieldset['is_empty']) && empty($fieldset['childs'])) { continue; } ?>\n                    <li class=\"nav-item\">\n                        <?php if($active_tab === false){ $active_tab = $fieldset_id; } ?>\n                        <a class=\"nav-link<?php if($active_tab === $fieldset_id){ ?> active<?php } ?><?php if(!empty($fieldset['parent']['list'])){ ?> icms-form-tab__demand<?php } ?>\" <?php if(!empty($fieldset['parent']['list'])){ ?>data-parent=\"<?php echo str_replace(':', '_', $fieldset['parent']['list']); ?>\" data-parent_url=\"<?php echo $fieldset['parent']['url']; ?>\"<?php } ?> href=\"#tab-<?php echo $fieldset_id; ?>\" data-toggle=\"tab\" role=\"tab\">\n                            <?php echo $fieldset['title']; ?>\n                        </a>\n                    </li>\n                <?php } ?>\n            </ul>\n            <div class=\"tab-content\">\n        <?php } else { ?>\n             <div class=\"icms-form-body\">\n        <?php } ?>\n\n        <?php include 'form_fields.tpl.php'; ?>\n\n        </div>\n\n    </div>\n\n    <?php if(!empty($attributes['hook'])){ ?>\n\n        <?php $param = empty($attributes['hook']['param']) ? false : $attributes['hook']['param'];  ?>\n        <?php $hooks_html = cmsEventsManager::hookAll($attributes['hook']['event'], $param); ?>\n        <?php if ($hooks_html) { echo html_each($hooks_html); } ?>\n\n    <?php } ?>\n\n    <?php echo $attributes['append_html']; ?>\n\n    <div class=\"buttons <?php if (!$this->controller->request->isAjax()){ ?>mt-3 mt-md-4<?php } ?>\">\n        <?php if ($attributes['submit']['show']) { unset($attributes['submit']['show']); ?>\n            <?php echo html_submit($attributes['submit']['title'], 'submit', $attributes['submit']); ?>\n        <?php } ?>\n        <?php if ($attributes['cancel']['show']) { echo html_button($attributes['cancel']['title'], 'cancel', \"location.href='{$attributes['cancel']['href']}'\", ['class'=>'btn-secondary button-cancel']); } ?>\n        <?php if(!empty($attributes['buttons'])){ ?>\n\n            <?php $many_buttons = count($attributes['buttons']) > 1; ?>\n\n            <?php if($many_buttons){ ?>\n                <div class=\"dropdown d-inline-block dropup\">\n                    <button class=\"btn btn-secondary\" type=\"button\" data-toggle=\"dropdown\" data-display=\"static\">\n                        <?php html_svg_icon('solid', 'ellipsis-h'); ?>\n                    </button>\n                    <div class=\"dropdown-menu dropdown-menu-right dropdown-menu-md-left\">\n            <?php } ?>\n\n            <?php foreach ($attributes['buttons'] as $button) {\n\n                if (!empty($button['hide'])) { continue; }\n\n                if ($many_buttons){\n                    $button['attributes']['class'] = isset($button['attributes']['class']) ? $button['attributes']['class'] .= ' dropdown-item' : 'dropdown-item';\n                }\n\n                echo html_button(\n                    $button['title'],\n                    $button['name'],\n                    (isset($button['onclick']) ? $button['onclick'] : ''),\n                    (isset($button['attributes']) ? $button['attributes'] : [])\n                );\n            } ?>\n\n            <?php if($many_buttons){ ?>\n                    </div>\n                </div>\n            <?php } ?>\n\n        <?php } ?>\n    </div>\n\n</form>\n<?php ob_start(); ?>\n<script>\n    <?php echo $this->getLangJS('LANG_CH1','LANG_CH2','LANG_CH10', 'LANG_ISLEFT', 'LANG_SUBMIT_NOT_SAVE'); ?>\n    $(function (){\n        <?php if ($form->show_unsave_notice){ ?>\n            icms.forms.initUnsaveNotice();\n        <?php } ?>\n        icms.forms.initCollapsedFieldset();\n        icms.forms.initFormHelpers();\n    <?php if (!empty($attributes['is_ajax'])){ ?>\n        $('#<?php echo $attributes['form_id']; ?>').on('submit', function (){\n            return icms.forms.submitAjax(this, <?php echo !empty($attributes['params']) ? json_encode($attributes['params']) : 'undefined'; ?>);\n        });\n    <?php } ?>\n        icms.forms.initFieldsetChildList('<?php echo $attributes['form_id']; ?>');\n    });\n</script>\n<?php $this->addBottom(ob_get_clean()); ?>\n"], "fixing_code": ["<?php\n/**\n * @property \\modelMenu $model_menu\n */\nclass actionAdminMenuTreeAjax extends cmsAction {\n\n    public function run() {\n\n        if (!$this->request->isAjax()) {\n            return cmsCore::error404();\n        }\n\n        $id = $this->request->get('id', '');\n\n        if (!$id || !preg_match('/^([0-9\\.]+)$/i', $id)) {\n            return cmsCore::error404();\n        }\n\n        list ($menu_id, $parent_id) = explode('.', $id);\n\n        $items = $this->model_menu->getMenuItems($menu_id, $parent_id);\n\n        $tree_nodes = [];\n\n        if ($items) {\n            foreach ($items as $item) {\n                $tree_nodes[] = [\n                    'title'  => html($item['title'], false),\n                    'key'    => \"{$menu_id}.{$item['id']}\",\n                    'isLazy' => ($item['childs_count'] > 0)\n                ];\n            }\n        }\n\n        return $this->cms_template->renderJSON($tree_nodes);\n    }\n\n}\n", "<?php\n/**\n * @property \\modelTags $model\n */\nclass actionTagsAutocomplete extends cmsAction {\n\n    public function run() {\n\n        if (!$this->request->isAjax()) {\n            return cmsCore::error404();\n        }\n\n        $result = [];\n\n        $term = strip_tags($this->request->get('term', ''));\n        if (!$term) {\n            return $this->cms_template->renderJSON($result);\n        }\n\n        $tags = $this->model->filterLike('tag', \"%{$term}%\")->\n                select(\"(LEFT(`tag`, \" . mb_strlen($term) . \") = '\".$this->model->db->escape($term).\"')\", 'tag_order')->\n                orderByList([\n                    ['by' => 'tag_order', 'to' => 'desc', 'strict' => true],\n                    ['by' => 'tag', 'to' => 'asc']\n                ])->\n                getTags();\n\n        if ($tags) {\n            foreach ($tags as $tag) {\n                $result[] = [\n                    'id'    => $tag['id'],\n                    'label' => $tag['tag'],\n                    'value' => $tag['tag']\n                ];\n            }\n        }\n\n        return $this->cms_template->renderJSON($result);\n    }\n\n}\n", "<?php\n\ndefine('GUEST_GROUP_ID', 1);\ndefine('DEF_GROUP_ID', 3);\n#[\\AllowDynamicProperties]\nclass cmsUser {\n\n    const USER_ONLINE_INTERVAL      = 180;\n    const AUTH_TOKEN_EXPIRATION_INT = 8640000; // 100 \u0434\u043d\u0435\u0439\n\n    private static $instance;\n    private static $_ip;\n    public static $auth_token;\n    private static $cached_online = [];\n\n    public $id = 0;\n    public $email;\n    public $password;\n    public $nickname;\n    public $date_log;\n    public $is_admin   = 0;\n    public $is_logged  = false;\n    public $friends    = [];\n    public $subscribes = [];\n\n    public static function getInstance() {\n        if (self::$instance === null) {\n            self::$instance = new self;\n        }\n        return self::$instance;\n    }\n\n    public static function get($key) {\n        return isset(self::getInstance()->$key) ? self::getInstance()->$key : null;\n    }\n\n    public static function getIp() {\n\n        if (self::$_ip === null) {\n\n            $config = cmsConfig::getInstance();\n\n            self::$_ip = isset($_SERVER[$config->detect_ip_key]) ? $_SERVER[$config->detect_ip_key] : '127.0.0.1';\n\n            if (!filter_var(self::$_ip, FILTER_VALIDATE_IP)) {\n                self::$_ip = '127.0.0.1';\n            }\n        }\n\n        return self::$_ip;\n    }\n\n    public static function setIp($ip) {\n        self::$_ip = $ip;\n\n    }\n\n    public function __construct() {\n\n        $this->groups   = [GUEST_GROUP_ID];\n        $this->ip       = self::getIp();\n        $this->date_log = date('Y-m-d H:i:s');\n\n        if(PHP_SAPI === 'cli') {\n            return;\n        }\n\n        if (self::isSessionSet('user:id')) {\n\n            // \u0443\u0436\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\n            $this->id = self::sessionGet('user:id');\n\n        } elseif (self::hasCookie('auth')) {\n\n            // \u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u043a\u0443\u043a\u0438\u0441\u0443\n            $this->id = self::autoLogin(self::getCookie('auth'));\n        }\n\n        if (!$this->id) {\n            $this->id = cmsEventsManager::hook('user_auto_login', 0);\n        }\n\n        //\n        // \u0435\u0441\u043b\u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0431\u0430\u0437\u044b\n        //\n        if ($this->id) {\n            $this->loadAuthUser($this->id);\n        } else {\n\n            // \u0434\u043b\u044f \u043d\u0435\u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u0430\u0432\u0438\u043c \u0434\u0430\u0442\u0443 \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f\n            $_date_log = self::getCookie('guest_date_log', 'integer');\n            if (!$_date_log) {\n                $_date_log = time();\n            }\n\n            if (!self::isSessionSet('user:date_log') || ((time() - self::USER_ONLINE_INTERVAL) >= $_date_log)) {\n\n                self::setCookie('guest_date_log', time(), 31536000);\n\n                if (!self::isSessionSet('user:date_log')) {\n                    self::sessionSet('user:date_log', $_date_log);\n                }\n            }\n\n            $this->date_log = date('Y-m-d H:i:s', self::sessionGet('user:date_log'));\n        }\n    }\n\n    public static function restrictSessionToIp($ip = false) {\n\n        if (!$ip) { $ip = self::getIp(); }\n\n        if (!self::isSessionSet('user_ip')) {\n\n            self::sessionSet('user_ip', $ip);\n\n            $octets    = explode('.', $ip);\n            $end_okets = end($octets);\n\n            self::sessionSet('user_net', rtrim($ip, $end_okets));\n        }\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f \u043b\u0438 ip \u0430\u0434\u0440\u0435\u0441 \u0441\u0435\u0441\u0441\u0438\u0438\n     * @param boolean $strict \u0415\u0441\u043b\u0438 true, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0446\u0435\u043b\u044b\u0439 ip \u0430\u0434\u0440\u0435\u0441, \u0438\u043d\u0430\u0447\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e \u043f\u043e\u0434\u0441\u0435\u0442\u0438\n     * @return boolean\n     */\n    public function checkSpoofingSession($strict = false) {\n\n        if (!$strict) {\n            return strpos($this->ip, self::sessionGet('user_net')) === 0;\n        }\n\n        return $this->ip == self::sessionGet('user_ip');\n    }\n\n    /**\n     * \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n     * @param integer $user_id id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0435\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e\n     * @return array\n     */\n    public function loadAuthUser($user_id) {\n\n        $config = cmsConfig::getInstance();\n        $model  = cmsCore::getModel('users');\n\n        $model->filterIsNull('is_deleted');\n\n        $user = $model->getUser($user_id);\n\n        if (!$user) {\n            self::logout();\n            return [];\n        }\n\n        $user = cmsEventsManager::hook('user_preloaded', $user);\n\n        if (!$user) {\n            self::logout();\n            return [];\n        }\n\n        $model->startTransaction();\n\n        // \u0435\u0441\u043b\u0438 \u0434\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u0438\u0437\u0438\u0442\u0430 \u0435\u0449\u0435 \u043d\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0430 \u0432 \u0441\u0435\u0441\u0441\u0438\u0438,\n        // \u0437\u043d\u0430\u0447\u0438\u0442 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u044b\u043b\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e\n        // \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0434\u0430\u0442\u0443 \u0432 \u0441\u0435\u0441\u0441\u0438\u0438 \u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u043c \u0432 \u0431\u0430\u0437\u0435\n        if (!self::isSessionSet('user:date_log') || ((time() - self::USER_ONLINE_INTERVAL) >= strtotime($user['date_log']))) {\n\n            if (!self::isSessionSet('user:date_log')) {\n                self::sessionSet('user:date_log', $user['date_log']);\n            }\n\n            $model->updateUserDateLog($user_id);\n        }\n\n        // \u0441\u043e\u0437\u0434\u0430\u0435\u043c online-\u0441\u0435\u0441\u0441\u0438\u044e\n        $model->insertOrUpdate('sessions_online', ['user_id' => $user_id], ['date_created' => null]);\n\n        $model->endTransaction(true);\n\n        // \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 \u0431\u0430\u0437\u044b\n        foreach ($user as $field => $value) {\n            $this->{$field} = $value;\n        }\n\n        // \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u0432\u0430\u0442\u0430\u0440\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\n        // \u043a \u043f\u0443\u0442\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0430\u0432\u0430\u0442\u0430\u0440\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0443\u0442\u044c \u043a\u043e\u0440\u043d\u044f\n        $this->avatar = cmsModel::yamlToArray($this->avatar);\n        if ($this->avatar) {\n            foreach ($this->avatar as $size => $path) {\n                $this->avatar[$size] = $config->upload_host . '/' . $path;\n            }\n        }\n\n        // \u043a\u0435\u0448\u0438\u0440\u0443\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u0440\u0443\u0437\u0435\u0439 \u0432 \u0441\u0435\u0441\u0441\u0438\u044e\n        $this->recacheFriends();\n\n        // \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u043f\u043e\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b\n        // \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0438 \u0441\u0435\u0441\u0441\u0438\u0438\n        $this->date_log  = self::sessionGet('user:date_log');\n        $this->perms     = self::getPermissions($user['groups']);\n        $this->is_logged = true;\n\n        return cmsEventsManager::hook('user_loaded', $user);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function setUserSession($user, $last_ip = false) {\n\n        self::sessionSet('user', [\n            'id'          => $user['id'],\n            'slug'        => $user['slug'],\n            '2fa'         => !empty($user['2fa']),\n            'is_old_auth' => !empty($user['is_old_auth']),\n            'groups'      => $user['groups'],\n            'time_zone'   => $user['time_zone'],\n            'perms'       => isset($user['permissions']) ? $user['permissions'] : self::getPermissions($user['groups']),\n            'is_admin'    => $user['is_admin']\n        ]);\n\n        self::restrictSessionToIp($last_ip);\n    }\n\n    /**\n     * \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u043a\u0443\u043a\u0438\u0441\u0443\n     * @param str $auth_token\n     */\n    public static function autoLogin($auth_token) {\n\n        if (!preg_match('/^[0-9a-z]{128}$/i', $auth_token)) {\n            return 0;\n        }\n\n        $model = cmsCore::getModel('users');\n\n        $user = $model->joinInner('{users}_auth_tokens', 'au', 'au.user_id = i.id')->\n                filterEqual('au.auth_token', $auth_token)->\n                filterIsNull('is_deleted')->select('au.date_auth')->getUser();\n\n        if (!$user || $user['is_locked']) {\n            return 0;\n        }\n        // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0435 \u0438\u0441\u0442\u0435\u043a \u043b\u0438 \u0441\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430\n        if ((time() - strtotime($user['date_log'])) > self::AUTH_TOKEN_EXPIRATION_INT) {\n            $model->deleteAuthToken($auth_token);\n            return 0;\n        }\n\n        $model->startTransaction();\n\n        // \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u0442\u0443 \u0442\u043e\u043a\u0435\u043d\u0430\n        $model->filterEqual('auth_token', $auth_token)->updateFiltered('{users}_auth_tokens', [\n            'date_log' => null\n        ], true);\n\n        $model->updateUserIp($user['id']);\n\n        $model->endTransaction(true);\n\n        $user = cmsEventsManager::hook('user_login', $user);\n\n        self::setUserSession($user, $user['ip']);\n\n        return intval($user['id']);\n    }\n\n    /**\n     * \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n     *\n     * @param string $email\n     * @param string $password\n     * @param boolean $remember\n     * @param boolean $complete_login\n     * @return integer|array\n     */\n    public static function login($email, $password, $remember = false, $complete_login = true, $model = null) {\n\n        if (!$email || !$password) {\n            return 0;\n        }\n\n        if($model === null) {\n            $model = cmsCore::getModel('users');\n        }\n\n        $user = $model->getUserByAuth($email, $password);\n\n        if (!$user) {\n            $user = cmsEventsManager::hook('user_auth_error', ['email' => $email, 'password' => $password]);\n        }\n\n        if (empty($user['id'])) {\n            return 0;\n        }\n\n        $user = cmsEventsManager::hook('user_login', $user);\n\n        $user['permissions'] = self::getPermissions($user['groups']);\n\n        if ($complete_login) {\n\n            self::loginComplete($user, $remember);\n\n            return intval($user['id']);\n        }\n\n        return $user;\n    }\n\n    /**\n     * \u0417\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044f \u0441\u0435\u0441\u0441\u0438\u044e\n     * \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n     *\n     * @param array $user\n     * @param boolean $remember\n     * @return boolean\n     */\n    public static function loginComplete($user, $remember = false) {\n\n        self::setUserSession($user);\n\n        $model = cmsCore::getModel('users');\n\n        if ($remember) {\n\n            $auth_token = hash('sha512', string_random(32, $user['email']));\n\n            self::setCookie('auth', $auth_token, self::AUTH_TOKEN_EXPIRATION_INT);\n\n            $model->setAuthToken($user['id'], $auth_token);\n\n            $model->deleteExpiredToken($user['id'], self::AUTH_TOKEN_EXPIRATION_INT);\n\n            self::$auth_token = $auth_token;\n        }\n\n        $model->updateUserIp($user['id']);\n\n        self::getInstance()->id = $user['id'];\n        self::getInstance()->is_logged = true;\n\n        return true;\n    }\n\n    /**\n     * \u0412\u044b\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n     */\n    public static function logout() {\n\n        $model = cmsCore::getModel('users');\n\n        $userSession = self::sessionGet('user');\n\n        if (!empty($userSession['id'])) {\n\n            $model->updateUserDateLog($userSession['id']);\n\n            $model->filterEqual('user_id', $userSession['id'])->deleteFiltered('sessions_online');\n\n            cmsEventsManager::hook('user_logout', $userSession);\n        }\n\n        if (self::hasCookie('auth')) {\n\n            $auth_cookie = self::getCookie('auth');\n\n            if (preg_match('/^[0-9a-z]{128}$/i', $auth_cookie)) {\n                $model->deleteAuthToken($auth_cookie);\n            }\n\n            self::unsetCookie('auth');\n        }\n\n        // \u0435\u0441\u043b\u0438 login \u0438 logout \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445\n        // \u043e\u0434\u043d\u043e\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b\n        if (self::$auth_token) {\n            $model->deleteAuthToken(self::$auth_token);\n            self::$auth_token = null;\n        }\n\n        self::sessionUnset('user');\n\n        return true;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function userIsOnline($user_id) {\n\n        if (isset(self::$cached_online[$user_id])) {\n            return self::$cached_online[$user_id];\n        }\n\n        self::$cached_online[$user_id] = false;\n\n        $model = new cmsModel();\n\n        $date_created = $model->filterEqual('user_id', $user_id)->getFieldFiltered('sessions_online', 'date_created');\n\n        if ($date_created && (time() - self::USER_ONLINE_INTERVAL) < strtotime($date_created)) {\n            self::$cached_online[$user_id] = true;\n        }\n\n        return self::$cached_online[$user_id];\n    }\n\n    public static function isLogged() {\n        return self::getInstance()->is_logged;\n    }\n\n    public static function isAdmin() {\n        return self::getInstance()->is_admin;\n    }\n\n    public static function goLogin($back_url = '') {\n        if (!$back_url) {\n            $back_url = str_replace(\"\\r\\n\", '', $_SERVER['REQUEST_URI']);\n        }\n        header('Location:' . href_to('auth', 'login') . '?' . http_build_query(['back' => $back_url]));\n        exit;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function setSessionSavePath($save_handler, $path) {\n\n        if (!$path) { return false; }\n\n        if (ini_set('session.save_handler', $save_handler) === false) {\n            return false;\n        }\n\n        if ($save_handler === 'files') {\n\n            if (!is_dir($path)) {\n                if (!mkdir($path, 0755, true)) {\n                    return false;\n                }\n            }\n\n            if (!is_writable($path)) {\n                return false;\n            }\n        }\n\n        session_save_path($path);\n\n        return true;\n    }\n\n    /**\n     * \u0421\u0442\u0440\u0430\u0442\u0443\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e PHP\n     * \u0438 \u043c\u0435\u043d\u044f\u0435\u0442 \u0442\u0430\u0439\u043c\u0437\u043e\u043d\u0443, \u0435\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d\u0430 \u0443 \u044e\u0437\u0435\u0440\u0430\n     *\n     * @param cmsConfig $config\n     */\n    public static function sessionStart(cmsConfig $config) {\n\n        // \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e \u0441\u0435\u0441\u0441\u0438\u0439\n        self::setSessionSavePath($config->session_save_handler, $config->session_save_path);\n\n        session_name($config->session_name);\n\n        $cookie_domain = null;\n\n        if ($config->cookie_domain) {\n            $cookie_domain = '.' . $config->cookie_domain;\n        }\n\n        session_set_cookie_params(0, '/;SameSite=Lax', $cookie_domain, cmsConfig::isSecureProtocol(), true);\n\n        session_start();\n\n        // \u0442\u0430\u0439\u043c\u0437\u043e\u043d\u0430 \u0441\u0435\u0441\u0441\u0438\u0438\n        $session_time_zone = self::sessionGet('user:time_zone');\n\n        // \u0435\u0441\u043b\u0438 \u0442\u0430\u0439\u043c\u0437\u043e\u043d\u0430 \u0432 \u0441\u0435\u0441\u0441\u0438\u0438 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0439\n        if ($session_time_zone && $session_time_zone !== $config->time_zone) {\n            $config->set('time_zone', $session_time_zone);\n        }\n    }\n\n    public static function sessionSet($key, $value) {\n\n        if (strpos($key, ':') === false) {\n            $_SESSION[$key] = $value;\n        } else {\n            list($key, $subkey) = explode(':', $key);\n            $_SESSION[$key][$subkey] = $value;\n        }\n\n    }\n\n    public static function sessionPush($key, $value) {\n        $_SESSION[$key][] = $value;\n    }\n\n    public static function sessionGet($key, $is_clean = false) {\n\n        if (!self::isSessionSet($key)) {\n            return false;\n        }\n\n        if (strpos($key, ':') === false) {\n            $value = $_SESSION[$key];\n        } else {\n            list($key, $subkey) = explode(':', $key);\n            $value = $_SESSION[$key][$subkey];\n        }\n\n        if ($is_clean) {\n            self::sessionUnset($key);\n        }\n\n        return $value;\n    }\n\n    public static function isSessionSet($key) {\n        if (strpos($key, ':') === false) {\n            return isset($_SESSION[$key]);\n        } else {\n            list($key, $subkey) = explode(':', $key);\n            return isset($_SESSION[$key][$subkey]);\n        }\n    }\n\n    public static function sessionUnset($key) {\n        if (strpos($key, ':') === false) {\n            unset($_SESSION[$key]);\n        } else {\n            list($key, $subkey) = explode(':', $key);\n            unset($_SESSION[$key][$subkey]);\n        }\n    }\n\n    public static function sessionClear() {\n        $_SESSION = [];\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043a\u0443\u043a\u0438\n     * @param string $key \u0418\u043c\u044f \u043a\u0443\u043a\u0438\u0441\u0430\n     * @param string $value \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n     * @param int $time \u0412\u0440\u0435\u043c\u044f \u0436\u0438\u0437\u043d\u0438, \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445\n     * @param string $path \u041f\u0443\u0442\u044c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435\n     * @param bool $http_only \u041a\u0443\u043a\u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432\n     * @param string $domain \u0414\u043e\u043c\u0435\u043d \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f. \u043f\u0443\u0441\u0442\u043e - \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u0439\n     * */\n    public static function setCookie($key, $value, $time = 3600, $path = '/', $http_only = true, $domain = '') {\n\n        $cookie_domain = cmsConfig::get('cookie_domain');\n\n        if (!$domain && $cookie_domain) {\n            $domain = $cookie_domain;\n        }\n\n        if (PHP_VERSION_ID < 70300) {\n            return setcookie('icms[' . $key . ']', $value, time() + $time, $path, $domain, false, $http_only);\n        } else {\n            return setcookie('icms[' . $key . ']', $value, [\n                'expires'  => time() + $time,\n                'path'     => $path,\n                'domain'   => $domain,\n                'samesite' => 'Lax',\n                'secure'   => false,\n                'httponly' => $http_only\n            ]);\n        }\n    }\n\n    public static function setCookiePublic($key, $value, $time = 3600, $path = '/') {\n        return self::setCookie($key, $value, $time, $path, false);\n    }\n\n    public static function unsetCookie($key, $path = '/', $domain = null) {\n        return self::setCookie($key, '', -3600, $path, true, $domain);\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043a\u0443\u043a\u0438\u0441\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n     *\n     * @param string $key \u0418\u043c\u044f \u043a\u0443\u043a\u0438\u0441\u0430\n     * @param string $var_type \u0422\u0438\u043f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e string\n     * @param callable $callback\n     * @return mixed\n     */\n    public static function getCookie($key, $var_type = 'string', $callback = false) {\n\n        if (isset($_COOKIE['icms'][$key])) {\n\n            $cookie = $_COOKIE['icms'][$key];\n\n            if ($var_type !== null) {\n                @settype($cookie, $var_type);\n            }\n\n            if (is_callable($callback)) {\n                $cookie = call_user_func_array($callback, array($cookie));\n            }\n\n            return $cookie;\n        } else {\n            return false;\n        }\n    }\n\n    public static function hasCookie($key) {\n        return isset($_COOKIE['icms'][$key]);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function getSetUPS($key) {\n        return cmsCore::getModel('users')->getSetUPS($key);\n    }\n\n    /**\n     * \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0435\u0433\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438\n     * User Personal Setting\n     *\n     * @param str       $key        \u041a\u043b\u044e\u0447 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a\n     * @param str|array $data       \u0414\u0430\u043d\u043d\u044b\u0435\n     * @param int       $user_id    \u0418\u0434 \u044e\u0437\u0435\u0440\u0430\n     * @return bool\n     */\n    public static function setUPS($key, $data, $user_id = null) {\n\n        if (empty($key) || (!$user_id && !($user_id = self::getInstance()->id))) {\n            return false;\n        }\n\n        return (bool) cmsCore::getModel('users')->setUPS($key, $data, $user_id);\n    }\n\n    public static function getUPS($key, $user_id = null) {\n\n        if (empty($key) || (!$user_id && !($user_id = self::getInstance()->id))) {\n            return false;\n        }\n\n        return cmsCore::getModel('users')->getUPS($key, $user_id);\n    }\n\n    public static function getUPSActual($key, $data, $user_id = null) {\n\n        if (empty($key) || (!$user_id && !($user_id = self::getInstance()->id))) {\n            return false;\n        }\n\n        $umodel = cmsCore::getModel('users');\n\n        $old = $umodel->getUPS($key, $user_id);\n        if (!$data) {\n            return $old;\n        }\n        if ($old !== $data) {\n            $umodel->setUPS($key, $data, $user_id);\n        }\n\n        return $data;\n    }\n\n    public static function deleteUPS($key, $user_id = null) {\n\n        if (empty($key) || (!$user_id && !($user_id = self::getInstance()->id))) {\n            return false;\n        }\n\n        return cmsCore::getModel('users')->deleteUPS($key, $user_id);\n    }\n\n    public static function deleteUPSlist($key) {\n        return cmsCore::getModel('users')->deleteUPS($key);\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function addSessionMessage($message, $class = 'info', $is_keep = false) {\n        self::sessionPush('core_message', ['class' => $class, 'text' => $message, 'is_keep' => $is_keep]);\n    }\n\n    public static function getSessionMessages($is_clear = true) {\n\n        if (self::isSessionSet('core_message')) {\n            $messages = self::sessionGet('core_message');\n        } else {\n            $messages = false;\n        }\n        if ($is_clear) {\n            self::clearSessionMessages();\n        }\n\n        return $messages;\n    }\n\n    public static function clearSessionMessages() {\n        self::sessionUnset('core_message');\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function getPermissions($groups) {\n        return cmsPermissions::getUserPermissions($groups);\n    }\n\n    public static function getPermissionValue($subject, $permission) {\n\n        $user = self::getInstance();\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n\n        return $user->perms[$subject][$permission];\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public static function isDenied($subject, $permission, $value = true, $is_admin_strict = false) {\n\n        $user = self::getInstance();\n\n        if (!$is_admin_strict) {\n            if ($user->is_admin) {\n                return false;\n            }\n        }\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n\n        return $user->perms[$subject][$permission] == $value;\n    }\n\n    public static function isAllowed($subject, $permission, $value = true, $is_admin_strict = false) {\n\n        $user = self::getInstance();\n\n        if (!$is_admin_strict) {\n            if ($user->is_admin) {\n                return true;\n            }\n        }\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n        if ($user->perms[$subject][$permission] != $value) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static function isPermittedLimitReached($subject, $permission, $current_value = 0, $is_admin_strict = false) {\n\n        $user = self::getInstance();\n\n        if (!$is_admin_strict) {\n            if ($user->is_admin) {\n                return false;\n            }\n        }\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n        if ((int) $current_value >= $user->perms[$subject][$permission]) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public static function isPermittedLimitHigher($subject, $permission, $current_value = 0, $is_admin_strict = false) {\n\n        $user = self::getInstance();\n\n        if (!$is_admin_strict) {\n            if ($user->is_admin) {\n                return false;\n            }\n        }\n\n        if (!isset($user->perms[$subject])) {\n            return false;\n        }\n        if (!isset($user->perms[$subject][$permission])) {\n            return false;\n        }\n        if ((int) $current_value < $user->perms[$subject][$permission]) {\n            return true;\n        }\n\n        return false;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0447\u043b\u0435\u043d\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0433\u0440\u0443\u043f\u043f\u0435\n     * @param int $group_id ID \u0433\u0440\u0443\u043f\u043f\u044b\n     * @return boolean\n     */\n    public function isInGroup($group_id) {\n        return in_array($group_id, $this->groups);\n    }\n\n    /**\n     * \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0447\u043b\u0435\u043d\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043b\u044e\u0431\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430\n     * @param array $groups \u0421\u043f\u0438\u0441\u043e\u043a ID \u0433\u0440\u0443\u043f\u043f\n     * @return boolean\n     */\n    public function isInGroups($groups) {\n        return self::isUserInGroups($this->groups, $groups);\n    }\n\n    public static function isUserInGroups($user_groups, $groups) {\n\n        if (empty($groups) || in_array(0, $groups)) {\n            return true;\n        }\n\n        foreach ($groups as $group_id) {\n            if(in_array($group_id, $user_groups)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function isPrivacyAllowed($profile, $option, $strict = false) {\n\n        if ($this->is_admin && !$strict) {\n            return true;\n        }\n\n        if ($profile['id'] == $this->id) {\n            return true;\n        }\n\n        if (!$profile || !$option) {\n            return false;\n        }\n\n        $options = $profile['privacy_options'];\n\n        if (!isset($options[$option])) {\n            return true;\n        }\n\n        if ($options[$option] === 'anyone') {\n            return true;\n        }\n\n        if ($options[$option] === 'friends' && $this->isFriend($profile['id'])) {\n            return true;\n        }\n\n        return false;\n    }\n\n//============================================================================//\n//============================================================================//\n\n    public function recacheFriends() {\n\n        $friends = cmsCore::getModel('users')->getFriendsIds($this->id);\n\n        $this->friends    = $friends['friends'];\n        $this->subscribes = $friends['subscribes'];\n\n        return $this;\n    }\n\n    public function isFriend($friend_id, $type = 'friends') {\n\n        if (!$friend_id || !$this->id) {\n            return false;\n        }\n\n        if ($friend_id == $this->id) {\n            return true;\n        }\n\n        if (empty($this->{$type})) {\n            return false;\n        }\n\n        return in_array($friend_id, $this->{$type});\n    }\n\n    public function isSubscribe($friend_id) {\n        return $this->isFriend($friend_id, 'subscribes');\n    }\n\n    public function hasFriends() {\n        return !empty($this->friends);\n    }\n\n    public function hasSubscribes() {\n        return !empty($this->subscribes);\n    }\n\n}\n", "<?php\n\nclass fieldString extends cmsFormField {\n\n    public $title       = LANG_PARSER_STRING;\n    public $sql         = 'varchar({max_length}) NULL DEFAULT NULL';\n    public $filter_type = 'str';\n    public $var_type    = 'string';\n    public $type        = 'text';\n\n    public function getOptions() {\n        return [\n            new fieldNumber('min_length', [\n                'title'   => LANG_PARSER_TEXT_MIN_LEN,\n                'default' => 0\n            ]),\n            new fieldNumber('max_length', [\n                'title'   => LANG_PARSER_TEXT_MAX_LEN,\n                'default' => 255,\n                'rules'   => [\n                    ['min', 1]\n                ]\n            ]),\n            new fieldString('placeholder', [\n                'title' => LANG_PARSER_PLACEHOLDER\n            ]),\n            new fieldCheckbox('use_inputmask', [\n                'title' => LANG_PARSER_USE_INPUTMASK\n            ]),\n            new fieldString('inputmask_str', [\n                'title'          => LANG_PARSER_INPUTMASK,\n                'hint'           => LANG_PARSER_INPUTMASK_HINT,\n                'visible_depend' => ['options:use_inputmask' => ['show' => ['1']]],\n            ]),\n            new fieldCheckbox('show_symbol_count', [\n                'title' => LANG_PARSER_SHOW_SYMBOL_COUNT\n            ]),\n            new fieldList('in_filter_as', [\n                'title' => LANG_PARSER_STRING_DISPLAY_VARIANT,\n                'hint'  => '<a href=\"#\" onclick=\"return fieldStringLoadDefault(\\'' . cmsTemplate::getInstance()->href_to('ctypes', ['field_string_ajax', $this->name]) . '\\')\" class=\"ajaxlink\">' . LANG_PARSER_STRING_ENTER_DEFAULT . '</a>',\n                'items' => [\n                    'input'    => LANG_PARSER_STRING,\n                    'select'   => LANG_PARSER_STRING_SELECT,\n                    'checkbox' => LANG_PARSER_STRING_CHECKBOX\n                ]\n            ]),\n            new fieldNumber('teaser_len', [\n                'title'           => LANG_PARSER_HTML_TEASER_LEN,\n                'hint'            => LANG_PARSER_HTML_TEASER_LEN_HINT,\n                'extended_option' => true\n            ]),\n            new fieldCheckbox('is_autolink', [\n                'title'           => LANG_PARSER_LIST_IS_AUTOLINK,\n                'hint'            => LANG_PARSER_LIST_IS_AUTOLINK_HINT . LANG_PARSER_LIST_IS_AUTOLINK_FILTER,\n                'default'         => false,\n                'extended_option' => true\n            ])\n        ];\n    }\n\n    public function getRules() {\n\n        if ($this->getOption('min_length')) {\n            $this->rules[] = ['min_length', $this->getOption('min_length')];\n        }\n\n        if ($this->getOption('max_length')) {\n            $this->rules[] = ['max_length', $this->getOption('max_length')];\n        }\n\n        return $this->rules;\n    }\n\n    public function parseTeaser($value) {\n\n        if (is_empty_value($value)) {\n            return '';\n        }\n\n        if (!empty($this->item['is_private_item'])) {\n            return '<p class=\"private_field_hint text-muted\">' . $this->item['private_item_hint'] . '</p>';\n        }\n\n        $max_len = $this->getOption('teaser_len', 0);\n\n        if ($max_len) {\n            $value = string_short($value, $max_len);\n            return $value;\n        }\n\n        return parent::parseTeaser($value);\n    }\n\n    public function parse($value) {\n\n        if (is_empty_value($value)) {\n            return '';\n        }\n\n        if ($this->getOption('is_autolink')) {\n            return html_search_bar($value, href_to($this->item['ctype_name']) . '?' . $this->name . '=', 'string_autolink ' . $this->item['ctype_name'] . '_string_autolink');\n        }\n\n        return html($value, false);\n    }\n\n    public function applyFilter($model, $value) {\n\n        switch ($this->getOption('in_filter_as')) {\n\n            case 'select':\n                return $model->filterEqual($this->name, $value);\n\n            case 'checkbox':\n                if ($value) { // \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0438 \u0431\u0435\u0437 \u044d\u0442\u043e\u0433\u043e\n                    return $model->filterNotNull($this->name);\n                }\n\n            default:\n                return $model->filterLike($this->name, '%' . $value . '%');\n        }\n\n        return $model;\n    }\n\n    public function getFilterInput($value) {\n        if ($this->getOption('in_filter_as') === 'select') {\n            $this->data['items'] = ['' => ''];\n            if ($this->hasDefaultValue()) {\n                $this->data['items'] += string_explode_list($this->getDefaultValue(), true);\n            }\n        }\n        return parent::getFilterInput($value);\n    }\n\n    public function store($value, $is_submitted, $old_value = null) {\n\n        if (is_empty_value($value)) {\n            return '';\n        }\n\n        if ($this->getProperty('is_clean_disable') === true) {\n\n            // \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u044b HTML \u0442\u0435\u0433\u0438, - \u043f\u0440\u043e\u0433\u043e\u043d\u044f\u0435\u043c \u0447\u0435\u0440\u0435\u0437 \u0442\u0438\u043f\u043e\u0433\u0440\u0430\u0444\n            $value = cmsEventsManager::hook('html_filter', [\n                'text'                => $value,\n                'is_auto_br'          => false,\n                'build_smiles'        => false,\n                'build_redirect_link' => false\n            ]);\n\n            return trim($value, \" \\0\");\n        }\n\n        return trim(strip_tags($value), \" \\0\");\n    }\n\n    public function storeFilter($value) {\n        return $this->store($value, false);\n    }\n\n    public function getStringValue($value) {\n        return $value;\n    }\n\n    public function getInput($value) {\n\n        $this->data['type']         = $this->getProperty('is_password') ? 'password' : $this->getProperty('type');\n        $this->data['autocomplete'] = $this->getProperty('autocomplete');\n        $this->data['attributes']   = $this->getProperty('attributes') ?: ['autocomplete' => 'off'];\n\n        if ($this->data['autocomplete']) {\n            if (empty($this->data['autocomplete']['data'])) {\n                $this->data['autocomplete']['data'] = false;\n            }\n            if (empty($this->data['autocomplete']['url'])) {\n                $this->data['autocomplete']['url'] = false;\n            }\n            if (empty($this->data['autocomplete']['multiple_separator'])) {\n                $this->data['autocomplete']['multiple_separator'] = ', ';\n            }\n        }\n\n        $this->data['attributes']['placeholder'] = $this->data['attributes']['placeholder'] ?? $this->getOption('placeholder', false);\n        $this->data['attributes']['id'] = $this->id;\n        $this->data['attributes']['required'] = (array_search(['required'], $this->getRules()) !== false);\n\n        return parent::getInput($value);\n    }\n\n}\n", "<?php\n/**\n * \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u043d\u043b\u0430\u0439\u043d\u043e\u0432\u0443\u044e svg \u0438\u043a\u043e\u043d\u043a\u0443\n * @staticvar string $template_path\n * @param string $file \u0418\u043c\u044f \u0444\u0430\u0439\u043b\u0430 SVG \u0441\u043f\u0440\u0430\u0439\u0442\u0430 \u0432 templates/NAME/images/icons/\n * @param string $name \u0418\u043c\u044f \u0438\u043a\u043e\u043d\u043a\u0438\n * @param integer $size \u0420\u0430\u0437\u043c\u0435\u0440\n * @param boolean $print \u041f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u0438\u043b\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443\n */\nfunction html_svg_icon($file, $name, $size = 16, $print = true){\n    static $template_path = [];\n    if(!isset($template_path[$file])){\n        $template_path[$file] = cmsTemplate::getInstance()->getTemplateFilePath('images/icons/'.$file.'.svg', true);\n    }\n\t$icon = '<svg class=\"icms-svg-icon w-'.$size.'\" fill=\"currentColor\"><use href=\"'.$template_path[$file].'#'.$name.'\"></use></svg>';\n    if($print){\n        echo $icon;\n    } else {\n        return $icon;\n    }\n}\n/**\n * \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0442\u0435\u0433 <a>\n * @param string $title \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\n * @param string $href \u0421\u0441\u044b\u043b\u043a\u0430\n */\nfunction html_link($title, $href){\n\techo '<a href=\"'.html($href, false).'\">'.html($title, false).'</a>';\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0430\u043d\u0435\u043b\u044c \u0441\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c\u0438\n *\n * @param integer $page \u0422\u0435\u043a\u0443\u0449\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\n * @param integer $perpage \u0417\u0430\u043f\u0438\u0441\u0435\u0439 \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\n * @param integer $total \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439\n * @param string|array $base_uri \u0411\u0430\u0437\u043e\u0432\u044b\u0439 URL, \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u043c \u0438\u0437 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 first \u0438 base\n * @param array $query \u041c\u0430\u0441\u0441\u0438\u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n * @param string $page_param_name \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b\n * @return string\n */\nfunction html_pagebar($page, $perpage, $total, $base_uri = false, $query = [], $page_param_name = 'page') {\n\n    if (!$total || $total <= $perpage){ return ''; }\n\n    $paginator = new cmsPaginator($total, $perpage, $page, $base_uri, $query);\n\n    if($page_param_name){\n        $paginator->setPageParamName($page_param_name);\n    }\n\n    return $paginator->getRendered();\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u0433 <input>\n *\n * @param string $type \u0422\u0438\u043f \u043f\u043e\u043b\u044f\n * @param string $name \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n * @param string $value \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n * @param array $attributes \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0442\u0435\u0433\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435=>\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n * @return string\n */\nfunction html_input($type = 'text', $name = '', $value = '', $attributes = []) {\n\n    if ($type === 'password' && empty($attributes['autocomplete'])) {\n        $attributes['autocomplete'] = 'off';\n    }\n    $attributes['type']  = $type;\n    $attributes['name']  = $name;\n    $attributes['value'] = $value;\n\n    return html_tag_short('input', $attributes, 'input form-control');\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u0433 <input type=\"file\">\n *\n * @param string $name \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n * @param array $attributes \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0442\u0435\u0433\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435=>\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n * @return string\n */\nfunction html_file_input($name, $attributes = []) {\n\n    $attributes['type'] = 'file';\n    $attributes['name'] = $name;\n\n    return html_tag_short('input', $attributes, 'file-input form-control-file');\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u0433 <textarea>\n *\n * @param string $name \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n * @param string $value \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n * @param array $attributes \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0442\u0435\u0433\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435=>\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n * @return string\n */\nfunction html_textarea($name = '', $value = '', $attributes = []) {\n    $attr_str = html_attr_str($attributes);\n    $class    = 'textarea';\n    if (isset($attributes['class'])) {\n        $class .= ' ' . $attributes['class'];\n    }\n    return '<textarea name=\"' . $name . '\" class=\"form-control ' . $class . '\" ' . $attr_str . '>' . html($value, false) . '</textarea>';\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u0433 <input type=\"checkbox\">\n *\n * @param string $name \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n * @param boolean $checked \u0412\u043a\u043b\u044e\u0447\u0435\u043d/\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\n * @param mixed $value \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n * @param array $attributes \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0442\u0435\u0433\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435=>\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n * @return string\n */\nfunction html_checkbox($name, $checked = false, $value = 1, $attributes = []) {\n\n    if ($checked) {\n        $attributes['checked'] = true;\n    }\n\n    $attributes['type']  = 'checkbox';\n    $attributes['name']  = $name;\n    $attributes['value'] = $value;\n\n    return html_tag_short('input', $attributes, 'input-checkbox form-check-input');\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u0433 <input type=\"radio\">\n *\n * @param string $name \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n * @param boolean $checked \u0412\u043a\u043b\u044e\u0447\u0435\u043d/\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\n * @param mixed $value \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n * @param array $attributes \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0442\u0435\u0433\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435=>\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n * @return string\n */\nfunction html_radio($name, $checked = false, $value = 1, $attributes = []) {\n\n    if ($checked) {\n        $attributes['checked'] = 'checked';\n    }\n\n    $attributes['type']  = 'radio';\n    $attributes['name']  = $name;\n    $attributes['value'] = $value;\n\n    return html_tag_short('input', $attributes, 'input-radio form-check-input');\n}\n\n/**\n * \u041f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u043e\u0442\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0434\u0430\u0442\u0443\n *\n * @param boolean|string $date \u0414\u0430\u0442\u0430\n * @param boolean $is_time \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432\u0440\u0435\u043c\u044f?\n * @return string\n */\nfunction html_date($date = false, $is_time = false) {\n    $timestamp   = $date ? strtotime($date) : time();\n    $date_format = cmsConfig::get('date_format');\n    $date        = '<time datetime=\"' . date('c', $timestamp) . '\">' . htmlspecialchars(($date_format == 'd F Y') ? string_date_format($timestamp) : date($date_format, $timestamp)) . '</time>';\n    if ($is_time) {\n        $date .= ' <span class=\"time\">' . date('H:i', $timestamp) . '</span>';\n    }\n    return $date;\n}\n\n/**\n * \u041f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u044f \u043e\u0442 \u0434\u0430\u0442\u044b\n *\n * @param boolean|string $date \u0414\u0430\u0442\u0430\n * @return string\n */\nfunction html_time($date = false) {\n    $timestamp = $date ? strtotime($date) : time();\n    return date('H:i', $timestamp);\n}\n\n/**\n * \u041f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u043e\u0442\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0434\u0430\u0442\u0443 \u0438 \u0432\u0440\u0435\u043c\u044f\n *\n * @param boolean|string $date \u0414\u0430\u0442\u0430\n * @return string\n */\nfunction html_date_time($date = false) {\n    return html_date($date, true);\n}\n\n/**\n * \u041f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u043f\u043e\u043b\u0435 \u0432\u044b\u0431\u043e\u0440\u0430 \u0434\u0430\u0442\u044b\n *\n * @param string $name \u0418\u043c\u044f \u043f\u043e\u043b\u044f\n * @param string $value \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n * @param array $attributes \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0442\u0435\u0433\u0430 input\n * @param array $datepicker \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b datepicker\n * @return string\n */\nfunction html_datepicker($name = '', $value = '', $attributes = [], $datepicker = []) {\n    if (isset($attributes['id'])) {\n        $id = $attributes['id'];\n        unset($attributes['id']);\n    } else {\n        $id = $name;\n    }\n    $attributes['autocomplete'] = 'off';\n    $datepicker_default = [\n        'showStatus' => true,\n        'changeYear' => true,\n        'yearRange'  => '1976:' . date('Y', strtotime('+5 year')),\n        'dateFormat' => cmsConfig::get('date_format_js')\n    ];\n    if ($datepicker) {\n        $datepicker_default = array_merge($datepicker_default, $datepicker);\n    }\n    $class = 'form-control date-input';\n    if (isset($attributes['class'])) {\n        $class .= ' ' . $attributes['class'];\n    }\n    $attr_str = html_attr_str($attributes);\n    $html     = '<input type=\"text\" placeholder=\"' . LANG_SELECT . '\" name=\"' . $name . '\" value=\"' . htmlspecialchars($value) . '\" class=\"' . $class . '\"  id=\"' . $id . '\" ' . $attr_str . '/>';\n    $script   = '<script>';\n    $script   .= '$(function(){ var datepicker_params = ' . json_encode($datepicker_default) . ';datepicker_params.onSelect = function(dateText,inst){$(\"#' . $id . '\").trigger(\"input\");icms.events.run(\"icms_datepicker_selected_' . $name . '\", inst);};datepicker_params.beforeShow = function(input,inst){icms.events.run(\"icms_datepicker_before_show_' . $name . '\", inst);};$(\"#' . $id . '\").datepicker(datepicker_params);});';\n    $script   .= '</script>';\n    if (cmsCore::getInstance()->request->isAjax()) {\n        $html .= $script;\n    } else {\n        cmsTemplate::getInstance()->addBottom($script);\n    }\n    return $html;\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043d\u043e\u043f\u043a\u0443 \"\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c\" type=\"submit\"\n *\n * @param string $caption \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043a\u043d\u043e\u043f\u043a\u0438\n * @param string $name \u0418\u043c\u044f (name)\n * @param array $attributes \u041c\u0430\u0441\u0441\u0438\u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n * @return string\n */\nfunction html_submit($caption = LANG_SUBMIT, $name = 'submit', $attributes = []) {\n\n    $attributes['type'] = 'submit';\n\n    $class = 'button-submit btn-primary';\n\n    $attributes['class'] = !empty($attributes['class']) ? $attributes['class'].' '.$class : $class;\n\n    return html_button($caption, $name, '', $attributes);\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 html-\u043a\u043e\u0434 \u043a\u043d\u043e\u043f\u043a\u0438\n *\n * @param str $caption \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\n * @param str $name \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u043e\u043f\u043a\u0438\n * @param str $onclick \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442\u0430 onclick (javascript)\n * @return string\n */\nfunction html_button($caption, $name, $onclick = '', $attributes = []) {\n\n    if (!isset($attributes['type'])) { $attributes['type'] = 'button'; }\n\n    $value = $caption;\n    if(isset($attributes['value'])){\n        $value = $attributes['value'];\n        unset($attributes['value']);\n    }\n\n    $attr_str = html_attr_str($attributes);\n\n    $class = 'button btn';\n\n    if (!empty($attributes['class'])) { $class .= ' '.$attributes['class']; }\n    else { $class .= ' btn-secondary'; }\n\n\treturn '<button value=\"'.html($value, false).'\" class=\"'.$class.'\" name=\"'.$name.'\" onclick=\"'.html($onclick, false).'\" '.$attr_str.'><span>'.html($caption, false).'</span></button>';\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u0433 <img> \u0430\u0432\u0430\u0442\u0430\u0440\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n *\n * @param array|yaml $avatars \u0412\u0441\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0430\u0432\u0430\u0442\u0430\u0440\u0430\n * @param string $size_preset \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0435\u0441\u0435\u0442\u0430\n * @param string $alt \u0417\u0430\u043c\u0435\u0449\u0430\u044e\u0449\u0438\u0439 \u0442\u0435\u043a\u0441\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n * @param bool $is_html_empty_avatar \u0412\u043c\u0435\u0441\u0442\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0446\u0432\u0435\u0442\u043d\u043e\u0439 \u0431\u043b\u043e\u043a \u0441 \u0431\u0443\u043a\u0432\u043e\u0439\n * @return string\n */\nfunction html_avatar_image($avatars, $size_preset = 'small', $alt = '', $is_html_empty_avatar = false) {\n\n    $src = html_avatar_image_src($avatars, $size_preset);\n\n    $img = '<img class=\"img-fluid\" src=\"' . $src . '\" alt=\"' . html($alt, false) . '\" title=\"' . html($alt, false) . '\" />';\n\n    if (empty($avatars) && !empty($alt) && $is_html_empty_avatar) {\n\n        $iparams = get_image_block_param_by_title($alt);\n\n        $img = '<div class=\"default_avatar\" style=\"' . $iparams['style'] . '\" data-letter=\"' . htmlspecialchars(mb_substr($alt, 0, 1)) . '\">' . $img . '</div>';\n    }\n\n    return $img;\n}\n\nfunction html_avatar_image_empty($title, $class = ''){\n\n    $iparams = get_image_block_param_by_title($title);\n\n    return '<span class=\"icms-profile-avatar__default '.$class.'\" style=\"'.$iparams['style'].'\"><svg fill=\"currentColor\" viewBox=\"0 0 28 21\"><text x=\"50%\" y=\"50%\" dominant-baseline=\"central\" text-anchor=\"middle\">'.mb_strtoupper(htmlspecialchars(mb_substr($title, 0, 1))).'</text></svg></span>';\n}\n\nfunction get_image_block_param_by_title($title) {\n\n    static $image_block_params = null;\n    if(isset($image_block_params[$title])){\n        return $image_block_params[$title];\n    }\n\n    $bg_color = substr(dechex(crc32($title)), 0, 6);\n\n    // \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u043e\u043d\u0442\u0440\u0430\u0441\u0442\u043d\u044b\u0439 \u0446\u0432\u0435\u0442 \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u0430\n    $r = max( hexdec( substr($bg_color, 0, 2) ), 90);\n    $g = max( hexdec( substr($bg_color, 2, 2) ), 90);\n    $b = max( hexdec( substr($bg_color, 4, 2) ), 90);\n    $yiq = (($r*299)+($g*587)+($b*114)) / 1000;\n    $txt_color = ($yiq >= 140) ? 'black' : 'white';\n\n    $image_block_params[$title] = array(\n        'style' => \"background-color: rgba({$r}, {$g}, {$b}, .9); color: {$txt_color};\"\n    );\n\n    return $image_block_params[$title];\n\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u0435\u0433 <img>\n *\n * @param array|yaml $image \u0412\u0441\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n * @param string $size_preset \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0435\u0441\u0435\u0442\u0430\n * @param string $alt \u0417\u0430\u043c\u0435\u0449\u0430\u044e\u0449\u0438\u0439 \u0442\u0435\u043a\u0441\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n * @param array $attributes \u041c\u0430\u0441\u0441\u0438\u0432 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0442\u0435\u0433\u0430\n * @return string\n */\nfunction html_image($image, $size_preset = 'small', $alt = '', $attributes = []) {\n\n    if (is_array($size_preset)) {\n        list($small_preset, $modal_preset) = $size_preset;\n    } else {\n        $small_preset = $size_preset;\n        $modal_preset = false;\n    }\n\n    $src = html_image_src($image, $small_preset, true);\n    if (!$src) {\n        return '';\n    }\n\n    $title = html((isset($attributes['title']) ? $attributes['title'] : $alt), false);\n    unset($attributes['title']);\n\n    $attr_str = html_attr_str($attributes);\n    $class    = isset($attributes['class']) ? $attributes['class'] : '';\n\n    $image_html = '<img src=\"' . $src . '\" title=\"' . $title . '\" alt=\"' . html($alt, false) . '\" ' . $attr_str . ' class=\"img-fluid ' . $class . '\" />';\n\n    if ($modal_preset) {\n        $modal_src = html_image_src($image, $modal_preset, true);\n        if ($modal_src) {\n            return '<a title=\"' . $title . '\" class=\"ajax-modal modal_image hover_image\" href=\"' . $modal_src . '\">' . $image_html . '</a>';\n        }\n    }\n\n    return $image_html;\n}\n\n/**\n * \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 HTML \u0431\u043b\u043e\u043a gif \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n *\n * @param array|yaml $image \u0412\u0441\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n * @param string $size_preset \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0435\u0441\u0435\u0442\u0430\n * @param string $alt \u0417\u0430\u043c\u0435\u0449\u0430\u044e\u0449\u0438\u0439 \u0442\u0435\u043a\u0441\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n * @param array $attributes \u041c\u0430\u0441\u0441\u0438\u0432 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0442\u0435\u0433\u0430\n * @return string\n */\nfunction html_gif_image($image, $size_preset = 'small', $alt = '', $attributes = []) {\n\n    if (is_array($size_preset)) {\n        list($small_preset, $modal_preset) = $size_preset;\n    } else {\n        $small_preset = $size_preset;\n        $modal_preset = false;\n    }\n\n    $class = isset($attributes['class']) ? $attributes['class'] : '';\n    if ($small_preset == 'micro') {\n        $class .= ' micro_image';\n    }\n\n    $original_src = html_image_src($image, $modal_preset ?: 'original', true);\n    $preview_src  = html_image_src($image, $small_preset, true);\n\n    if (!$preview_src) {\n        return '';\n    }\n\n    return '<a class=\"ajax-modal gif_image ' . $class . '\" href=\"' . $original_src . '\" ' . html_attr_str($attributes) . '>\n                <span class=\"background_overlay\"></span>\n                <span class=\"image_label\">gif</span>\n                <img class=\"img-fluid\" src=\"' . $preview_src . '\" alt=\"' . html($alt, false) . '\" />\n            </a>';\n}\n\n/**\n * \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u043f\u0446\u0438\u0439\n *\n * @param string $name \u0418\u043c\u044f \u0441\u043f\u0438\u0441\u043a\u0430\n * @param array $items \u041c\u0430\u0441\u0441\u0438\u0432 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430 (\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 => \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a)\n * @param string|array $selected \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e(\u044b\u0445) \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n * @param array $attributes \u041c\u0430\u0441\u0441\u0438\u0432 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0442\u0435\u0433\u0430\n * @return string HTML\n */\nfunction html_select($name, $items, $selected = '', $attributes = []) {\n\n    $name = isset($attributes['multiple']) ? $name . '[]' : $name;\n\n    $attr_str = html_attr_str($attributes);\n    $class    = isset($attributes['class']) ? $attributes['class'] : '';\n    $html     = '<select class=\"form-control ' . $class . '\" name=\"' . $name . '\" ' . $attr_str . '>' . \"\\n\";\n\n    $optgroup = false;\n\n    if (is_array($selected) && $selected) {\n        foreach ($selected as $k => $v) {\n            if (is_numeric($v)) {\n                $selected[$k] = (int) $v;\n            }\n        }\n    }\n\n    if ($items && is_array($items)) {\n        foreach ($items as $value => $title) {\n\n            if (is_array($title)) {\n                if ($optgroup !== false) {\n                    $html     .= \"\\t\" . '</optgroup>' . \"\\n\";\n                    $optgroup = false;\n                }\n                $optgroup = true;\n                $html     .= \"\\t\" . '<optgroup label=\"' . htmlspecialchars($title[0]) . '\">' . \"\\n\";\n                continue;\n            }\n\n            if (is_array($selected)) {\n                $sel = in_array($value, $selected, true) ? 'selected' : '';\n            } else {\n                $sel = ((string) $selected === (string) $value) ? 'selected' : '';\n            }\n\n            $html .= \"\\t\" . '<option' . (!$title ? ' label=\"' . LANG_ALL . '\"' : '') . ' value=\"' . htmlspecialchars($value) . '\" ' . $sel . '>' . htmlspecialchars($title) . '</option>' . \"\\n\";\n        }\n    }\n\n    if ($optgroup !== false) {\n        $html .= \"\\t\" . '</optgroup>' . \"\\n\";\n    }\n\n    $html .= '</select>' . \"\\n\";\n\n    return $html;\n}\n\n/**\n * \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u043f\u0446\u0438\u0439 \u0441 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0432\u044b\u0431\u043e\u0440\u043e\u043c\n *\n * @param string $name \u0418\u043c\u044f \u0441\u043f\u0438\u0441\u043a\u0430\n * @param array $items \u041c\u0430\u0441\u0441\u0438\u0432 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430 (\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 => \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a)\n * @param string $selected \u041c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n * @param array $attributes \u041c\u0430\u0441\u0441\u0438\u0432 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0442\u0435\u0433\u0430\n * @return string\n */\nfunction html_select_multiple($name, $items, $selected = [], $attributes = [], $is_tree = false) {\n\n    $attr_str    = html_attr_str($attributes);\n    $class       = isset($attributes['class']) ? $attributes['class'] : '';\n    $html        = '<div class=\"input_checkbox_list ' . $class . '\" ' . $attr_str . '>' . \"\\n\";\n    $start_level = false;\n\n    if (is_array($selected) && $selected) {\n        foreach ($selected as $k => $v) {\n            if (is_numeric($v)) {\n                $selected[$k] = (int) $v;\n            }\n        }\n    }\n    foreach ($items as $value => $title) {\n\n        $checked = is_array($selected) && in_array($value, $selected, true);\n\n        if ($is_tree) {\n\n            $level = mb_strlen(str_replace(' ', '', $title)) - mb_strlen(ltrim(str_replace(' ', '', $title), '-'));\n\n            if ($start_level === false) {\n                $start_level = $level;\n            }\n\n            $level -= $start_level;\n\n            $title = ltrim($title, '- ');\n\n            $html .= \"\\t\" . '<label class=\"form-check form-check-block\" ' . ($level > 0 ? 'style=\"margin-left:' . ($level * 0.75) . 'rem\"' : '') . '>' .\n                    html_checkbox($name . '[]', $checked, $value) . ' ' .\n                    '<span>' . htmlspecialchars($title) . '</span></label>' . \"\\n\";\n        } else {\n\n            $html .= \"\\t\" . '<label class=\"form-check form-check-inline\">' .\n                    html_checkbox($name . '[]', $checked, $value) . ' ' .\n                    '<span>' . htmlspecialchars($title) . '</span></label>' . \"\\n\";\n        }\n    }\n    $html .= '</div>' . \"\\n\";\n\n    return $html;\n}\n\n/**\n * \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0435\u0440\u0435\u0432\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u0432 \u0432\u0438\u0434\u0435 \u043a\u043e\u043c\u0431\u043e-\u0431\u043e\u043a\u0441\u0430\n *\n * @param array $tree \u041c\u0430\u0441\u0441\u0438\u0432 \u0441 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0434\u0435\u0440\u0435\u0432\u0430 NS\n * @param int $selected_id ID \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n * @return string\n */\nfunction html_category_list($tree, $selected_id = 0) {\n    $html = '<select name=\"category_id\" id=\"category_id\" class=\"combobox form-control\">' . \"\\n\";\n    foreach ($tree as $cat) {\n        $padding = str_repeat('---', $cat['ns_level']) . ' ';\n        if ($selected_id == $cat['id']) {\n            $selected = 'selected';\n        } else {\n            $selected = '';\n        }\n        $html .= \"\\t\" . '<option value=\"' . $cat['id'] . '\" ' . $selected . '>' . $padding . ' ' . htmlspecialchars($cat['title']) . '</option>' . \"\\n\";\n    }\n    $html .= '</select>' . \"\\n\";\n    return $html;\n}\n\n/**\n * \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0434\u0432\u0435 \u0440\u0430\u0434\u0438\u043e-\u043a\u043d\u043e\u043f\u043a\u0438 \u0412\u041a\u041b \u0438 \u0412\u042b\u041a\u041b\n *\n * @param string $name\n * @param bool $active\n * @return string\n */\nfunction html_switch($name, $active) {\n    $html = '';\n    $html .= '<label><input type=\"radio\" name=\"' . $name . '\" value=\"1\" ' . ($active ? 'checked' : '') . '/> ' . LANG_ON . \"</label> \\n\";\n    $html .= '<label><input type=\"radio\" name=\"' . $name . '\" value=\"0\" ' . (!$active ? 'checked' : '') . '/> ' . LANG_OFF . \"</label> \\n\";\n    return $html;\n}\n\nfunction html_back_button() {\n    return '<div class=\"back_button\"><a href=\"javascript:window.history.go(-1);\">' . LANG_BACK . '</a></div>';\n}\n\nfunction html_bool_span($value, $condition, $classes = ['negative badge badge-danger', 'positive badge badge-success']){\n    if ($condition){\n        return '<span class=\"'.$classes[1].'\">' . $value . '</span>';\n    } else {\n        return '<span class=\"'.$classes[0].'\">' . $value . '</span>';\n    }\n}\n\n/**\n * \u0421\u0442\u0440\u043e\u0438\u0442 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u0441\u043f\u0438\u0441\u043e\u043a UL \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n *\n * @author acmol\n * @param array $array\n * @return string\n */\nfunction html_array_to_list($array) {\n\n    $html = '<ul>';\n\n    foreach ($array as $key => $elem) {\n\n        if (!is_array($elem)) {\n            $html .= '<li>' . $elem . '</li>';\n        } else {\n            $html .= '<li class=\"folder\">' . $key . ' ' . html_array_to_list($elem) . '</li>';\n        }\n    }\n\n    $html .= '</ul>';\n\n    return $html;\n}\n\nfunction html_search_bar($list, $href, $link_class = '', $glue = ', ') {\n\n    if (!$list) {\n        return '';\n    }\n\n    if (!is_array($list)) {\n        $list = explode(',', $list);\n    }\n\n    // RFC2396 \u0434\u043b\u044f \u0441\u043b\u0435\u0448\u0435\u0439 \u0432 \u0443\u0440\u043b\u0430\u0445\n    $encode_slashes = mb_strpos($href, '?') === false;\n\n    foreach ($list as $id => $letter) {\n\n        $letter = trim($letter);\n        $name = $letter;\n\n        if($encode_slashes){\n            $letter = string_urlencode($letter);\n        } else {\n            $letter = urlencode($letter);\n        }\n\n        $list[$id] = '<a class=\"' . $link_class . '\" href=\"' . $href . $letter . '\">' . html($name, false) . '</a>';\n    }\n\n    return implode($glue, $list);\n}\n\nfunction html_tags_bar($tags, $prefix = '', $class = 'tags_bar_link', $glue = ', ') {\n    return html_search_bar($tags, href_to('tags') . '/' . ($prefix ? $prefix . '/' : ''), $class, $glue);\n}\n", "<?php $this->addTplJSNameFromContext('jquery-cookie'); ?>\n<?php $this->addTplJSNameFromContext('form-translate'); ?>\n<?php if ((!isset($attributes['toolbar']) || $attributes['toolbar']) && $this->isToolbar() && empty($attributes['hide_toolbar'])){ ?>\n    <?php $this->toolbar('menu-toolbar'); ?>\n<?php } ?>\n\n<form id=\"<?php html($attributes['form_id']); ?>\" action=\"<?php html($attributes['action']); ?>\"\n      method=\"<?php echo $attributes['method']; ?>\"\n      class=\"<?php html($attributes['form_class']); ?><?php if ($this->controller->request->isAjax()){ ?> ajax-form<?php } ?>\"\n      enctype=\"multipart/form-data\"\n      accept-charset=\"utf-8\">\n\n    <?php echo html_csrf_token(); ?>\n\n    <?php echo $attributes['prepend_html']; ?>\n\n    <div class=\"<?php if($form->is_tabbed){ ?>tabs-menu mb-3 <?php } else { ?><?php if(count($form->getStructure()) > 1) { ?> without-tabs <?php } ?> card mb-0 <?php } ?>form-tabs\">\n\n        <?php if($form->is_tabbed){ ?>\n            <ul class=\"nav nav-tabs flex-wrap\">\n                <?php foreach($form->getStructure() as $fieldset_id => $fieldset){ ?>\n                    <?php if (empty($fieldset['is_empty']) && empty($fieldset['childs'])) { continue; } ?>\n                    <li class=\"nav-item\">\n                        <?php if($active_tab === false){ $active_tab = (string)$fieldset_id; } ?>\n                        <a class=\"nav-link<?php if($active_tab === (string)$fieldset_id){ ?> active<?php } ?><?php if(!empty($fieldset['parent']['list'])){ ?> icms-form-tab__demand<?php } ?>\" <?php if(!empty($fieldset['parent']['list'])){ ?>data-parent=\"<?php echo str_replace(':', '_', $fieldset['parent']['list']); ?>\" data-parent_url=\"<?php echo $fieldset['parent']['url']; ?>\"<?php } ?> href=\"#tab-<?php echo $fieldset_id; ?>\" data-toggle=\"tab\" data-fieldset_id=\"<?php echo $fieldset_id; ?>\">\n                            <?php echo $fieldset['title']; ?>\n                        </a>\n                    </li>\n                <?php } ?>\n            </ul>\n            <div class=\"tab-content\">\n        <?php } else { ?>\n             <div class=\"card-body\">\n        <?php } ?>\n\n        <?php include $this->getTemplateFileName('assets/ui/form_fields'); ?>\n\n        </div>\n\n    </div>\n\n    <?php if(!empty($attributes['hook'])){ ?>\n\n        <?php $param = empty($attributes['hook']['param']) ? false : $attributes['hook']['param'];  ?>\n        <?php $hooks_html = cmsEventsManager::hookAll($attributes['hook']['event'], $param); ?>\n        <?php if ($hooks_html) { echo html_each($hooks_html); } ?>\n\n    <?php } ?>\n\n    <?php echo $attributes['append_html']; ?>\n\n    <div class=\"buttons <?php if (!$this->controller->request->isAjax()){ ?>my-3<?php } ?>\">\n        <?php if ($attributes['submit']['show']) { ?>\n            <?php echo html_submit($attributes['submit']['title'], 'submit', $attributes['submit']); ?>\n        <?php } ?>\n        <?php if(isset($attributes['buttons'])){ ?>\n            <?php foreach ($attributes['buttons'] as $button) { ?>\n                <?php if (!empty($button['hide'])) { continue; } ?>\n                <?php echo html_button(\n                        $button['title'],\n                        $button['name'],\n                        (isset($button['onclick']) ? $button['onclick'] : ''),\n                        (isset($button['attributes']) ? $button['attributes'] : array())\n                    ); ?>\n            <?php } ?>\n        <?php } ?>\n        <?php if ($attributes['cancel']['show']) { echo html_button($attributes['cancel']['title'], 'cancel', \"location.href='{$attributes['cancel']['href']}'\", array('class'=>'btn-secondary button-cancel')); } ?>\n    </div>\n\n</form>\n<?php ob_start(); ?>\n<script>\n    <?php echo $this->getLangJS('LANG_CH1','LANG_CH2','LANG_CH10', 'LANG_ISLEFT', 'LANG_SUBMIT_NOT_SAVE', 'LANG_TRANSLATE'); ?>\n    icms.translate.url = '<?php echo href_to('languages', 'tr'); ?>';\n    $(function (){\n        <?php if ($form->show_unsave_notice){ ?>\n            icms.forms.initUnsaveNotice();\n        <?php } ?>\n        icms.forms.initCollapsedFieldset();\n        icms.forms.initFormHelpers();\n    <?php if (!empty($attributes['is_ajax'])){ ?>\n        $('#<?php echo $attributes['form_id']; ?>').on('submit', function (){\n            return icms.forms.submitAjax(this, <?php echo !empty($attributes['params']) ? json_encode($attributes['params']) : 'undefined'; ?>);\n        });\n    <?php } ?>\n        icms.forms.initFieldsetChildList('<?php echo $attributes['form_id']; ?>');\n    <?php if ($form->is_tabbed){ ?>\n        $('#<?php echo $attributes['form_id']; ?> a[data-toggle=\"tab\"]').on('shown.bs.tab', function (event) {\n            $.cookie('icms[<?php echo $cookie_tab_key; ?>]', $(this).data('fieldset_id'));\n        });\n    <?php } ?>\n    });\n</script>\n<?php $this->addBottom(ob_get_clean()); ?>\n", "<?php if ($this->isToolbar()){ ?>\n    <?php $this->toolbar('menu-toolbar'); ?>\n<?php } ?>\n\n<form action=\"<?php html($submit_url); ?>\" method=\"post\">\n\n    <div class=\"datagrid_wrapper perms_grid table-responsive dataTables_wrapper dt-bootstrap4\">\n        <table id=\"datagrid\" class=\"datagrid table table-striped table-bordered dataTable bg-white\">\n            <thead>\n                <tr>\n                    <th><?php echo LANG_PERM_RULE; ?></th>\n                    <?php foreach($groups as $group){ ?>\n                        <th class=\"center\"><?php echo $group['title']; ?></th>\n                    <?php } ?>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"filter table-align-middle\">\n                    <td class=\"p-2\">\n                        <?php echo html_input('search', 'filter_perm_rule', '', ['id'=>'filter_perm_rule', 'class' => 'form-control-sm']); ?>\n                    </td>\n                    <?php foreach($groups as $group){ ?>\n                        <td class=\"p-2\"></td>\n                    <?php } ?>\n                </tr>\n                <?php foreach($rules as $rule){ ?>\n                    <tr class=\"icms-perms-rule__list\">\n                        <td class=\"align-middle\">\n                            <?php echo $rule['title']; ?>\n                            <?php if(!empty($rule['title_hint'])){ ?>\n                                <div class=\"hint text-muted small\"><?php echo $rule['title_hint']; ?></div>\n                            <?php } ?>\n                        </td>\n\n                        <?php foreach($groups as $group){ ?>\n\n                            <?php if($group['id'] == GUEST_GROUP_ID && empty($rule['show_for_guest_group'])){ ?>\n                                <td class=\"center\"></td>\n                            <?php continue; } ?>\n\n                            <?php\n                                $default =  isset($values[$rule['id']][$group['id']]) ?\n                                            $values[$rule['id']][$group['id']] :\n                                            null;\n                            ?>\n\n                            <td class=\"center align-middle text-center\" data-label=\"<?php html($group['title']); ?>\">\n                                <?php if ($rule['type'] == 'flag'){ ?>\n                                    <label class=\"switch switch-pill switch-primary m-0 align-middle\">\n                                        <?php echo html_checkbox(\"value[{$rule['id']}][{$group['id']}]\", $default, 1, array('class' => 'switch-input')); ?>\n                                        <span class=\"switch-slider\"></span>\n                                    </label>\n                                <?php } ?>\n                                <?php if ($rule['type'] == 'list'){ ?>\n                                    <?php echo html_select(\"value[{$rule['id']}][{$group['id']}]\", $rule['options'], $default); ?>\n                                <?php } ?>\n                                <?php if ($rule['type'] == 'number'){ ?>\n                                    <?php echo html_input('text', \"value[{$rule['id']}][{$group['id']}]\", $default, array('class'=>'input-number')); ?>\n                                <?php } ?>\n                            </td>\n\n                        <?php } ?>\n\n                    </tr>\n                <?php } ?>\n            </tbody>\n        </table>\n    </div>\n\n    <div class=\"buttons my-3\">\n        <?php echo html_submit(LANG_SAVE); ?>\n    </div>\n\n</form>\n<?php ob_start(); ?>\n<script>\n    <?php echo $this->getLangJS('LANG_SUBMIT_NOT_SAVE'); ?>\n    $(function (){\n        icms.forms.initUnsaveNotice();\n        $('#filter_perm_rule').on('input', function () {\n            var rex = new RegExp($(this).val(), 'i');\n            $('.icms-perms-rule__list').hide();\n            $('.icms-perms-rule__list').filter(function () {\n                return rex.test($(this).text());\n            }).show();\n        });\n    });\n</script>\n<?php $this->addBottom(ob_get_clean()); ?>\n", "<?php\n\n    $this->addTplJSName([\n        'datatree'\n    ]);\n    $this->addTplCSSName('datatree');\n\n    $this->setPageTitle(LANG_CP_SECTION_MENU);\n\n    $this->addBreadcrumb(LANG_CP_SECTION_MENU, $this->href_to('menu'));\n    // \u0442\u0443\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u043f\u0443\u043d\u043a\u0442 \u0434\u0435\u0440\u0435\u0432\u0430\n    $this->addBreadcrumb('', $this->href_to('menu').'?last');\n\n    $this->addMenuItem('breadcrumb-menu', [\n        'title' => LANG_HELP,\n        'url'   => LANG_HELP_URL_MENU,\n        'options' => [\n            'target' => '_blank',\n            'icon' => 'question-circle'\n        ]\n    ]);\n?>\n\n<div class=\"row align-items-stretch mb-4\">\n    <div class=\"col-auto quickview-wrapper\" id=\"left-quickview\">\n        <a class=\"quickview-toggle close\" data-toggle=\"quickview\" data-toggle-element=\"#left-quickview\" href=\"#\"><span>\u00d7</span></a>\n        <div id=\"datatree\" class=\"card-body bg-white h-100 pt-3\">\n            <ul id=\"treeData\" class=\"skeleton-tree\">\n                <?php foreach ($menus as $id => $menu) { ?>\n                    <li id=\"<?php echo $menu['id'];?>.0\" class=\"lazy folder\">\n                        <?php html($menu['title']); ?>\n                    </li>\n                <?php } ?>\n            </ul>\n        </div>\n    </div>\n    <div class=\"col\">\n        <?php echo $grid_html; ?>\n    </div>\n</div>\n\n<script>\n    icms.events.on('datagrid_mounted', function(app){\n        let is_init = false;\n        $(\"#datatree\").dynatree({\n            onPostInit: function(isReloading, isError){\n                let path = $.cookie('icms[menu_tree_path]');\n                if (!path) { path = '/1.0'; }\n                this.loadKeyPath(path, function(node, status){\n                    if(status === 'loaded') {\n                        node.expand();\n                    } else if(status === 'ok') {\n                        node.activate();\n                        node.expand();\n                    }\n                });\n            },\n            onActivate: function(node){\n                if (is_init) {\n                    icms.datagrid.setURL(\"<?php echo $this->href_to('menu'); ?>/\" + node.data.key);\n                    icms.datagrid.loadRows();\n                }\n                is_init = true;\n                node.expand();\n                $.cookie('icms[menu_tree_path]', node.getKeyPath(), {expires: 7, path: '/'});\n                let key = node.data.key.split('.');\n                $('.cp_toolbar .add_item a').attr('href', \"<?php echo $this->href_to('menu', ['item_add']); ?>/\" + key[0] + \"/\" + key[1]);\n                $('.cp_toolbar .edit_menu a').attr('href', \"<?php echo $this->href_to('menu', ['edit']); ?>/\" + key[0]);\n                $('.cp_toolbar .delete_menu a').attr('href', \"<?php echo $this->href_to('menu', ['delete']); ?>/\" + key[0] + '?csrf_token='+icms.forms.getCsrfToken());\n                $('.breadcrumb-item.active').html(node.data.title);\n            },\n            onLazyRead: function(node){\n                node.appendAjax({\n                    url: \"<?php echo $this->href_to('menu', ['tree_ajax']); ?>\",\n                    data: {\n                        id: node.data.key\n                    }\n                });\n            }\n        });\n    });\n</script>", "<div class=\"modal_padding\">\n    <h3><?php echo $confirm_title; ?></h3>\n    <form action=\"<?php html($confirm_action); ?>\" method=\"post\" onsubmit=\"$(this).find('.button-submit').addClass('disabled is-busy');\">\n        <?php echo html_csrf_token(); ?>\n        <?php echo html_input('hidden', 'back', $this->controller->request->get('back', '')); ?>\n        <?php echo html_submit(LANG_CONFIRM); ?>\n        <?php echo html_button(LANG_CANCEL, 'cancel', 'icms.modal.close()'); ?>\n    </form>\n</div>", "<?php $user = cmsUser::getInstance(); ?>\n<?php $form_id = isset($form_id) ? $form_id : md5(microtime(true)); ?>\n<?php if (!isset($is_expanded)){ $is_expanded = false; } unset($filters['user_id']); ?>\n<?php $form_url = is_array($page_url) ? $page_url['base'] : $page_url; $form_url_sep = strpos($form_url, '?') === false ? '?' : '&'; ?>\n<div class=\"filter-panel gui-panel <?php echo $css_prefix;?>-filter\">\n    <div class=\"filter-link\" <?php if($filters || $is_expanded){ ?>style=\"display:none\"<?php } ?>>\n        <a href=\"javascript:toggleFilter()\"><span><?php echo LANG_SHOW_FILTER; ?></span></a>\n    </div>\n    <div class=\"filter-container\" <?php if(!$filters && !$is_expanded){ ?>style=\"display:none\"<?php } ?>>\n\t\t<div class=\"filter-close\">\n            <a href=\"javascript:toggleFilter();\"><span><?php echo LANG_CLOSE; ?></span></a>\n        </div>\n        <form action=\"<?php html($form_url); ?>\" method=\"get\" id=\"<?php echo $form_id; ?>\" accept-charset=\"utf-8\">\n            <?php echo html_input('hidden', 'page', 1); ?>\n            <?php if(!empty($ext_hidden_params)){ ?>\n                <?php foreach($ext_hidden_params as $fname => $fvalue){ ?>\n                    <?php echo html_input('hidden', $fname, $fvalue); ?>\n                    <?php if($filters){ $filters[$fname] = $fvalue; } ?>\n                <?php } ?>\n            <?php } ?>\n            <div class=\"fields\">\n                <?php $fields_count = 0; ?>\n                <?php foreach($fields as $name => $field){ ?>\n                    <?php if (!$field['is_in_filter']){ continue; } ?>\n                    <?php if (!empty($field['filter_view']) && !$user->isInGroups($field['filter_view'])) { continue; } ?>\n                    <?php $value = isset($filters[$name]) ? $filters[$name] : null; ?>\n                    <?php $output = $field['handler']->getFilterInput($value); ?>\n                    <?php if (!$output){ continue; } ?>\n                    <?php $fields_count++; ?>\n                    <div class=\"field ft_<?php echo $field['type']; ?> f_<?php echo $field['name']; ?>\">\n                        <div class=\"title\"><?php echo $field['title']; ?></div>\n                        <div class=\"value\">\n                            <?php echo $output; ?>\n                        </div>\n                    </div>\n                <?php } ?>\n                <?php if (!empty($props)){ ?>\n                    <?php foreach($props as $prop){ ?>\n                        <?php\n                            if (!$prop['is_in_filter']){ continue; }\n                            $fields_count++;\n                            $prop['handler']->setName(\"p{$prop['id']}\");\n                            $value = isset($filters[\"p{$prop['id']}\"]) ? $filters[\"p{$prop['id']}\"] : null;\n                        ?>\n                        <div class=\"field ft_<?php echo $prop['type']; ?> f_prop_<?php echo $prop['id']; ?>\">\n                            <div class=\"title\"><?php echo $prop['title']; ?></div>\n                            <div class=\"value\">\n                                <?php echo $prop['handler']->getFilterInput($value); ?>\n                            </div>\n                        </div>\n                    <?php } ?>\n                <?php } ?>\n            </div>\n            <?php if ($fields_count) { ?>\n                <div class=\"spinner filter_loader\"><div class=\"bounce1\"></div><div class=\"bounce2\"></div><div class=\"bounce3\"></div></div>\n                <div class=\"buttons\">\n                    <?php echo html_submit(LANG_FILTER_APPLY); ?>\n                    <?php if (count($filters)){ ?>\n                        <div class=\"link\">\n                            <a class=\"cancel_filter_link\" href=\"<?php echo ((is_array($page_url) && !empty($page_url['cancel'])) ? $page_url['cancel'] : $form_url); ?>\">\n                                <?php echo LANG_CANCEL; ?>\n                            </a>\n                        </div>\n                        <div class=\"link\">\n                            <?php\n                            if(!empty($page_url['filter_link'])){\n                                $filter_url = $page_url['filter_link'];\n                            } else {\n                                $filter_url = $form_url.$form_url_sep.http_build_query($filters);\n                            }\n                            ?>\n                            # <a href=\"<?php echo $filter_url; ?>\">\n                                <?php echo LANG_FILTER_URL; ?>\n                            </a>\n                        </div>\n                        <?php\n                            $hooks_html = cmsEventsManager::hookAll('content_filter_buttons_html', array($css_prefix, $form_url, $filters));\n                            if ($hooks_html) { echo html_each($hooks_html); }\n                        ?>\n                    <?php } ?>\n                </div>\n            <?php } ?>\n        </form>\n    </div>\n</div>\n<script>\n    <?php echo $this->getLangJS('LANG_CH1','LANG_CH2','LANG_CH10', 'LANG_ISLEFT', 'LANG_SUBMIT_NOT_SAVE'); ?>\n    $(function (){\n        <?php if (!$fields_count) { ?>\n            $('.filter-panel.groups-filter').hide();\n        <?php } ?>\n        icms.forms.initFilterForm('#<?php echo $form_id; ?>');\n    });\n</script>", "<?php $this->addTplJSNameFromContext('jquery-cookie'); ?>\n<?php if ((!isset($attributes['toolbar']) || $attributes['toolbar']) && $this->isToolbar() && empty($attributes['hide_toolbar'])){ ?>\n    <div class=\"cp_toolbar\">\n        <?php $this->toolbar(); ?>\n    </div>\n<?php } ?>\n\n<form id=\"<?php html($attributes['form_id']); ?>\" action=\"<?php html($attributes['action']); ?>\"\n      method=\"<?php echo $attributes['method']; ?>\"\n      <?php if ($this->controller->request->isAjax()){ ?>\n        class=\"modal\"\n      <?php } ?>\n      enctype=\"multipart/form-data\"\n      accept-charset=\"utf-8\">\n\n    <?php echo html_csrf_token(); ?>\n\n    <?php echo $attributes['prepend_html']; ?>\n\n    <div class=\"<?php if($form->is_tabbed){ ?>tabs-menu <?php } ?>form-tabs\">\n\n        <?php if($form->is_tabbed){ ?>\n            <ul class=\"tabbed\">\n                <?php foreach($form->getStructure() as $fieldset_id => $fieldset){ ?>\n                    <?php if (empty($fieldset['is_empty']) && empty($fieldset['childs'])) { continue; } ?>\n                    <li>\n                        <a class=\"<?php if(!empty($fieldset['parent']['list'])){ ?>icms-form-tab__demand<?php } ?>\" <?php if(!empty($fieldset['parent']['list'])){ ?>data-parent=\"<?php echo str_replace(':', '_', $fieldset['parent']['list']); ?>\" data-parent_url=\"<?php echo $fieldset['parent']['url']; ?>\"<?php } ?> href=\"#tab-<?php echo $fieldset_id; ?>\">\n                            <?php echo $fieldset['title']; ?>\n                        </a>\n                    </li>\n                <?php } ?>\n            </ul>\n        <?php } ?>\n\n        <?php include 'form_fields.tpl.php'; ?>\n\n    </div>\n\n    <?php if(!empty($attributes['hook'])){ ?>\n\n        <?php $param = empty($attributes['hook']['param']) ? false : $attributes['hook']['param'];  ?>\n        <?php $hooks_html = cmsEventsManager::hookAll($attributes['hook']['event'], $param); ?>\n        <?php if ($hooks_html) { echo html_each($hooks_html); } ?>\n\n    <?php } ?>\n\n    <?php echo $attributes['append_html']; ?>\n\n    <div class=\"buttons\">\n        <?php if ($attributes['submit']['show']) { ?>\n            <?php echo html_submit($attributes['submit']['title'], 'submit', $attributes['submit']); ?>\n        <?php } ?>\n        <?php if(isset($attributes['buttons'])){ ?>\n            <?php foreach ($attributes['buttons'] as $button) { ?>\n                <?php if (!empty($button['hide'])) { continue; } ?>\n                <?php echo html_button(\n                        $button['title'],\n                        $button['name'],\n                        (isset($button['onclick']) ? $button['onclick'] : ''),\n                        (isset($button['attributes']) ? $button['attributes'] : array())\n                    ); ?>\n            <?php } ?>\n        <?php } ?>\n        <?php if ($attributes['cancel']['show']) { echo html_button($attributes['cancel']['title'], 'cancel', \"location.href='{$attributes['cancel']['href']}'\", array('class'=>'button-cancel')); } ?>\n    </div>\n\n</form>\n<?php ob_start(); ?>\n<script>\n    <?php echo $this->getLangJS('LANG_CH1','LANG_CH2','LANG_CH10', 'LANG_ISLEFT', 'LANG_SUBMIT_NOT_SAVE'); ?>\n    $(function (){\n    <?php if ($form->show_unsave_notice){ ?>\n        icms.forms.initUnsaveNotice();\n    <?php } ?>\n    <?php if ($form->is_tabbed){ ?>\n        initTabs('#<?php echo $attributes['form_id']; ?>');\n    <?php } ?>\n        $('.is_collapsed legend').on('click', function (){\n            var _fieldset = $(this).closest('.is_collapsed');\n            $(_fieldset).toggleClass('is_collapse do_expand');\n            $.cookie('icms[fieldset_state]['+$(_fieldset).attr('id')+']', $(_fieldset).hasClass('do_expand'));\n        });\n        $('.is_collapsed').each(function (){\n            if($(this).find('.field_error').length > 0 || $.cookie('icms[fieldset_state]['+$(this).attr('id')+']') === 'true'){\n                $(this).addClass('do_expand').removeClass('is_collapse'); return;\n            }\n        });\n    <?php if (!empty($attributes['is_ajax'])){ ?>\n        $('#<?php echo $attributes['form_id']; ?>').on('submit', function (){\n            return icms.forms.submitAjax(this, <?php echo !empty($attributes['params']) ? json_encode($attributes['params']) : 'undefined'; ?>);\n        });\n    <?php } ?>\n        icms.forms.initFieldsetChildList('<?php echo $attributes['form_id']; ?>');\n    });\n</script>\n<?php $this->addBottom(ob_get_clean()); ?>", "<?php if (!empty($this->menus['toolbar'])){ ?>\n<div class=\"cp_toolbar\">\n    <?php $this->toolbar(); ?>\n</div>\n<?php } ?>\n\n\n<form action=\"<?php html($submit_url); ?>\" method=\"post\">\n\n    <div class=\"datagrid_wrapper perms_grid\">\n        <table id=\"datagrid\" class=\"datagrid\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n            <thead>\n                <tr>\n                    <th><?php echo LANG_PERM_RULE; ?></th>\n                    <?php foreach($groups as $group){ ?>\n                        <th class=\"center\"><?php echo $group['title']; ?></th>\n                    <?php } ?>\n                </tr>\n            </thead>\n            <tbody>\n                <?php foreach($rules as $rule){ ?>\n                    <tr>\n                        <td>\n                            <div>\n                            <?php echo $rule['title']; ?>\n                            <?php if(!empty($rule['title_hint'])){ ?>\n                                <div class=\"hint\"><?php echo $rule['title_hint']; ?></div>\n                            <?php } ?>\n                            </div>\n                        </td>\n\n                        <?php foreach($groups as $group){ ?>\n\n                            <?php if($group['id'] == GUEST_GROUP_ID && empty($rule['show_for_guest_group'])){ ?>\n                                <td class=\"center\"></td>\n                            <?php continue; } ?>\n\n                            <?php\n                                $default =  isset($values[$rule['id']][$group['id']]) ?\n                                            $values[$rule['id']][$group['id']] :\n                                            null;\n                            ?>\n\n                            <td class=\"center\" data-label=\"<?php html($group['title']); ?>\">\n                                <?php if ($rule['type'] == 'flag'){ ?>\n                                    <?php echo html_checkbox(\"value[{$rule['id']}][{$group['id']}]\", $default); ?>\n                                <?php } ?>\n                                <?php if ($rule['type'] == 'list'){ ?>\n                                    <?php echo html_select(\"value[{$rule['id']}][{$group['id']}]\", $rule['options'], $default); ?>\n                                <?php } ?>\n                                <?php if ($rule['type'] == 'number'){ ?>\n                                    <?php echo html_input('text', \"value[{$rule['id']}][{$group['id']}]\", $default, array('class'=>'input-number')); ?>\n                                <?php } ?>\n                            </td>\n\n                        <?php } ?>\n\n                    </tr>\n                <?php } ?>\n            </tbody>\n        </table>\n    </div>\n\n    <div class=\"buttons\">\n        <?php echo html_submit(LANG_SAVE); ?>\n    </div>\n\n</form>", "<?php\n$user = cmsUser::getInstance();\n$form_id = isset($form_id) ? $form_id : md5(microtime(true));\nif (!isset($is_expanded)){ $is_expanded = false; } unset($filters['user_id']);\n$form_url = is_array($page_url) ? $page_url['base'] : $page_url;\n$form_url_sep = strpos($form_url, '?') === false ? '?' : '&';\n?>\n\n<div class=\"icms-filter-panel gui-panel my-3 <?php echo $css_prefix;?>-filter\">\n\n    <button class=\"icms-filter-link__open btn btn-block btn-light text-left <?php if($filters || $is_expanded){ ?>d-none<?php } ?>\">\n        <?php html_svg_icon('solid', 'filter'); ?> <span><?php echo LANG_SHOW_FILTER; ?></span>\n    </button>\n\n    <div class=\"icms-filter-container p-3 bg-light position-relative <?php if(!$filters && !$is_expanded){ ?>d-none<?php } ?>\">\n        <button type=\"button\" class=\"close position-absolute icms-filter-link__close\" title=\"<?php echo LANG_CLOSE; ?>\">\n            <span>&times;</span>\n        </button>\n        <form action=\"<?php html($form_url); ?>\" method=\"get\" id=\"<?php html($form_id); ?>\" accept-charset=\"utf-8\">\n            <?php echo html_input('hidden', 'page', 1); ?>\n            <?php if(!empty($ext_hidden_params)){ ?>\n                <?php foreach($ext_hidden_params as $fname => $fvalue){ ?>\n                    <?php echo html_input('hidden', $fname, $fvalue); ?>\n                    <?php if($filters){ $filters[$fname] = $fvalue; } ?>\n                <?php } ?>\n            <?php } ?>\n            <div class=\"fields form-row\">\n                <?php $fields_count = 0; ?>\n                <?php foreach($fields as $name => $field){ ?>\n                    <?php if (!$field['is_in_filter']){ continue; } ?>\n                    <?php if (!empty($field['filter_view']) && !$user->isInGroups($field['filter_view'])) { continue; } ?>\n                    <?php $value = isset($filters[$name]) ? $filters[$name] : null; ?>\n                    <?php $output = $field['handler']->getFilterInput($value); ?>\n                    <?php if (!$output){ continue; } ?>\n                    <?php $fields_count++; ?>\n                    <div class=\"form-group col-md-6 field ft_<?php echo $field['type']; ?> f_<?php echo $field['name']; ?>\">\n                        <label class=\"font-weight-bold\"><?php echo $field['title']; ?></label>\n                        <?php echo $output; ?>\n                    </div>\n                <?php } ?>\n                <?php if (!empty($props)){ ?>\n                    <?php foreach($props as $prop){ ?>\n                        <?php\n                            if (!$prop['is_in_filter']){ continue; }\n                            $fields_count++;\n                            $prop['handler']->setName(\"p{$prop['id']}\");\n                            $value = isset($filters[\"p{$prop['id']}\"]) ? $filters[\"p{$prop['id']}\"] : null;\n                        ?>\n                        <div class=\"form-group col-md-6 field ft_<?php echo $prop['type']; ?> f_prop_<?php echo $prop['id']; ?>\">\n                            <label class=\"font-weight-bold\"><?php echo $prop['title']; ?></label>\n                            <?php echo $prop['handler']->getFilterInput($value); ?>\n                        </div>\n                    <?php } ?>\n                <?php } ?>\n            </div>\n\n            <?php if ($fields_count) { ?>\n                <div class=\"buttons d-flex flex-column flex-md-row\">\n                    <?php echo html_submit(LANG_FILTER_APPLY); ?>\n                    <?php if (count($filters)){ ?>\n                        <a class=\"btn btn-secondary cancel_filter_link my-2 my-md-0 mx-md-2\" href=\"<?php echo ((is_array($page_url) && !empty($page_url['cancel'])) ? $page_url['cancel'] : $form_url); ?>\">\n                            <?php echo LANG_CANCEL; ?>\n                        </a>\n                        <?php\n                        if(!empty($page_url['filter_link'])){\n                            $filter_url = $page_url['filter_link'];\n                        } else {\n                            $filter_url = $form_url.$form_url_sep.http_build_query($filters);\n                        }\n                        ?>\n                        <a class=\"btn btn-link\" href=\"<?php echo $filter_url; ?>\">\n                            # <?php echo LANG_FILTER_URL; ?>\n                        </a>\n                        <?php\n                            $hooks_html = cmsEventsManager::hookAll('content_filter_buttons_html', array($css_prefix, $form_url, $filters));\n                            if ($hooks_html) { ?>\n                                <div class=\"mt-2 mt-md-0 ml-md-auto\">\n                                    <?php echo html_each($hooks_html); ?>\n                                </div>\n                        <?php } ?>\n                    <?php } ?>\n                </div>\n            <?php } ?>\n        </form>\n    </div>\n</div>\n<?php ob_start(); ?>\n<script>\n    <?php echo $this->getLangJS('LANG_CH1','LANG_CH2','LANG_CH10', 'LANG_ISLEFT', 'LANG_SUBMIT_NOT_SAVE'); ?>\n    $(function (){\n        <?php if (!$fields_count) { ?>\n            $('.icms-filter-panel.groups-filter').hide();\n        <?php } ?>\n        icms.forms.initFilterForm('#<?php echo $form_id; ?>');\n    });\n</script>\n<?php $this->addBottom(ob_get_clean()); ?>", "<?php $this->addTplJSNameFromContext('jquery-cookie'); ?>\n<?php if ((!isset($attributes['toolbar']) || $attributes['toolbar']) && $this->isToolbar() && empty($attributes['hide_toolbar'])){ ?>\n    <?php $this->toolbar('menu-toolbar'); ?>\n<?php } ?>\n\n<form id=\"<?php html($attributes['form_id']); ?>\" action=\"<?php html($attributes['action']); ?>\"\n      method=\"<?php echo $attributes['method']; ?>\"\n      class=\"<?php html($attributes['form_class']); ?><?php if ($this->controller->request->isAjax()){ ?> ajax-form<?php } ?>\"\n      enctype=\"multipart/form-data\"\n      accept-charset=\"utf-8\">\n\n    <?php echo html_csrf_token(); ?>\n\n    <?php echo $attributes['prepend_html']; ?>\n\n    <div class=\"<?php if($form->is_tabbed){ ?>tabs-menu mb-3 <?php } else { ?><?php if(count($form->getStructure()) > 1) { ?> without-tabs <?php } ?> <?php } ?>form-tabs\">\n\n        <?php if($form->is_tabbed){ ?>\n            <ul class=\"nav nav-tabs flex-wrap\" role=\"tablist\">\n                <?php foreach($form->getStructure() as $fieldset_id => $fieldset){ ?>\n                    <?php if (empty($fieldset['is_empty']) && empty($fieldset['childs'])) { continue; } ?>\n                    <li class=\"nav-item\">\n                        <?php if($active_tab === false){ $active_tab = $fieldset_id; } ?>\n                        <a class=\"nav-link<?php if($active_tab === $fieldset_id){ ?> active<?php } ?><?php if(!empty($fieldset['parent']['list'])){ ?> icms-form-tab__demand<?php } ?>\" <?php if(!empty($fieldset['parent']['list'])){ ?>data-parent=\"<?php echo str_replace(':', '_', $fieldset['parent']['list']); ?>\" data-parent_url=\"<?php echo $fieldset['parent']['url']; ?>\"<?php } ?> href=\"#tab-<?php echo $fieldset_id; ?>\" data-toggle=\"tab\" role=\"tab\">\n                            <?php echo $fieldset['title']; ?>\n                        </a>\n                    </li>\n                <?php } ?>\n            </ul>\n            <div class=\"tab-content\">\n        <?php } else { ?>\n             <div class=\"icms-form-body\">\n        <?php } ?>\n\n        <?php include 'form_fields.tpl.php'; ?>\n\n        </div>\n\n    </div>\n\n    <?php if(!empty($attributes['hook'])){ ?>\n\n        <?php $param = empty($attributes['hook']['param']) ? false : $attributes['hook']['param'];  ?>\n        <?php $hooks_html = cmsEventsManager::hookAll($attributes['hook']['event'], $param); ?>\n        <?php if ($hooks_html) { echo html_each($hooks_html); } ?>\n\n    <?php } ?>\n\n    <?php echo $attributes['append_html']; ?>\n\n    <div class=\"buttons <?php if (!$this->controller->request->isAjax()){ ?>mt-3 mt-md-4<?php } ?>\">\n        <?php if ($attributes['submit']['show']) { unset($attributes['submit']['show']); ?>\n            <?php echo html_submit($attributes['submit']['title'], 'submit', $attributes['submit']); ?>\n        <?php } ?>\n        <?php if ($attributes['cancel']['show']) { echo html_button($attributes['cancel']['title'], 'cancel', \"location.href='{$attributes['cancel']['href']}'\", ['class'=>'btn-secondary button-cancel']); } ?>\n        <?php if(!empty($attributes['buttons'])){ ?>\n\n            <?php $many_buttons = count($attributes['buttons']) > 1; ?>\n\n            <?php if($many_buttons){ ?>\n                <div class=\"dropdown d-inline-block dropup\">\n                    <button class=\"btn btn-secondary\" type=\"button\" data-toggle=\"dropdown\" data-display=\"static\">\n                        <?php html_svg_icon('solid', 'ellipsis-h'); ?>\n                    </button>\n                    <div class=\"dropdown-menu dropdown-menu-right dropdown-menu-md-left\">\n            <?php } ?>\n\n            <?php foreach ($attributes['buttons'] as $button) {\n\n                if (!empty($button['hide'])) { continue; }\n\n                if ($many_buttons){\n                    $button['attributes']['class'] = isset($button['attributes']['class']) ? $button['attributes']['class'] .= ' dropdown-item' : 'dropdown-item';\n                }\n\n                echo html_button(\n                    $button['title'],\n                    $button['name'],\n                    (isset($button['onclick']) ? $button['onclick'] : ''),\n                    (isset($button['attributes']) ? $button['attributes'] : [])\n                );\n            } ?>\n\n            <?php if($many_buttons){ ?>\n                    </div>\n                </div>\n            <?php } ?>\n\n        <?php } ?>\n    </div>\n\n</form>\n<?php ob_start(); ?>\n<script>\n    <?php echo $this->getLangJS('LANG_CH1','LANG_CH2','LANG_CH10', 'LANG_ISLEFT', 'LANG_SUBMIT_NOT_SAVE'); ?>\n    $(function (){\n        <?php if ($form->show_unsave_notice){ ?>\n            icms.forms.initUnsaveNotice();\n        <?php } ?>\n        icms.forms.initCollapsedFieldset();\n        icms.forms.initFormHelpers();\n    <?php if (!empty($attributes['is_ajax'])){ ?>\n        $('#<?php echo $attributes['form_id']; ?>').on('submit', function (){\n            return icms.forms.submitAjax(this, <?php echo !empty($attributes['params']) ? json_encode($attributes['params']) : 'undefined'; ?>);\n        });\n    <?php } ?>\n        icms.forms.initFieldsetChildList('<?php echo $attributes['form_id']; ?>');\n    });\n</script>\n<?php $this->addBottom(ob_get_clean()); ?>\n"], "filenames": ["system/controllers/admin/actions/menu_tree_ajax.php", "system/controllers/tags/actions/autocomplete.php", "system/core/user.php", "system/fields/string.php", "system/libs/template.helper.php", "templates/admincoreui/assets/ui/form.tpl.php", "templates/admincoreui/assets/ui/grid-perms.tpl.php", "templates/admincoreui/controllers/admin/menu.tpl.php", "templates/default/assets/ui/confirm.tpl.php", "templates/default/assets/ui/filter-panel.tpl.php", "templates/default/assets/ui/form.tpl.php", "templates/default/assets/ui/grid-perms.tpl.php", "templates/modern/assets/ui/filter-panel.tpl.php", "templates/modern/assets/ui/form.tpl.php"], "buggy_code_start_loc": [28, 15, 280, 142, 66, 7, 5, 31, 3, 13, 8, 8, 19, 6], "buggy_code_end_loc": [29, 22, 287, 142, 67, 8, 6, 32, 4, 14, 9, 9, 20, 7], "fixing_code_start_loc": [28, 15, 280, 143, 66, 7, 5, 31, 3, 13, 8, 8, 19, 6], "fixing_code_end_loc": [29, 22, 289, 152, 67, 8, 6, 32, 4, 14, 9, 9, 20, 7], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository instantsoft/icms2 prior to 2.16.1-git.", "other": {"cve": {"id": "CVE-2023-4187", "sourceIdentifier": "security@huntr.dev", "published": "2023-08-05T18:15:18.233", "lastModified": "2023-08-09T17:58:37.840", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository instantsoft/icms2 prior to 2.16.1-git."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 0.9, "impactScore": 2.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:instantcms:instantcms:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.16.1", "matchCriteriaId": "56EF3F9B-6CDB-4568-AF80-EEF6D72B72F6"}]}]}], "references": [{"url": "https://github.com/instantsoft/icms2/commit/1dbc3e6c8fbf5d2dc551cb27fad0de3584dee40f", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/14941381-b669-4756-94fc-cce172472f8b", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/instantsoft/icms2/commit/1dbc3e6c8fbf5d2dc551cb27fad0de3584dee40f"}}