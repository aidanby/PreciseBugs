{"buggy_code": ["/**********************************************************************\n  regext.c -  Oniguruma (regular expression library)\n**********************************************************************/\n/*-\n * Copyright (c) 2002-2019  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n */\n\n#include \"regint.h\"\n\nstatic void\nconv_ext0be32(const UChar* s, const UChar* end, UChar* conv)\n{\n  while (s < end) {\n    *conv++ = '\\0';\n    *conv++ = '\\0';\n    *conv++ = '\\0';\n    *conv++ = *s++;\n  }\n}\n\nstatic void\nconv_ext0le32(const UChar* s, const UChar* end, UChar* conv)\n{\n  while (s < end) {\n    *conv++ = *s++;\n    *conv++ = '\\0';\n    *conv++ = '\\0';\n    *conv++ = '\\0';\n  }\n}\n\nstatic void\nconv_ext0be(const UChar* s, const UChar* end, UChar* conv)\n{\n  while (s < end) {\n    *conv++ = '\\0';\n    *conv++ = *s++;\n  }\n}\n\nstatic void\nconv_ext0le(const UChar* s, const UChar* end, UChar* conv)\n{\n  while (s < end) {\n    *conv++ = *s++;\n    *conv++ = '\\0';\n  }\n}\n\nstatic void\nconv_swap4bytes(const UChar* s, const UChar* end, UChar* conv)\n{\n  while (s < end) {\n    *conv++ = s[3];\n    *conv++ = s[2];\n    *conv++ = s[1];\n    *conv++ = s[0];\n    s += 4;\n  }\n}\n\nstatic void\nconv_swap2bytes(const UChar* s, const UChar* end, UChar* conv)\n{\n  while (s < end) {\n    *conv++ = s[1];\n    *conv++ = s[0];\n    s += 2;\n  }\n}\n\nstatic int\nconv_encoding(OnigEncoding from, OnigEncoding to, const UChar* s, const UChar* end,\n              UChar** conv, UChar** conv_end)\n{\n  int len = (int )(end - s);\n\n  if (to == ONIG_ENCODING_UTF16_BE) {\n    if (from == ONIG_ENCODING_ASCII || from == ONIG_ENCODING_ISO_8859_1) {\n      *conv = (UChar* )xmalloc(len * 2);\n      CHECK_NULL_RETURN_MEMERR(*conv);\n      *conv_end = *conv + (len * 2);\n      conv_ext0be(s, end, *conv);\n      return 0;\n    }\n    else if (from == ONIG_ENCODING_UTF16_LE) {\n    swap16:\n      *conv = (UChar* )xmalloc(len);\n      CHECK_NULL_RETURN_MEMERR(*conv);\n      *conv_end = *conv + len;\n      conv_swap2bytes(s, end, *conv);\n      return 0;\n    }\n  }\n  else if (to == ONIG_ENCODING_UTF16_LE) {\n    if (from == ONIG_ENCODING_ASCII || from == ONIG_ENCODING_ISO_8859_1) {\n      *conv = (UChar* )xmalloc(len * 2);\n      CHECK_NULL_RETURN_MEMERR(*conv);\n      *conv_end = *conv + (len * 2);\n      conv_ext0le(s, end, *conv);\n      return 0;\n    }\n    else if (from == ONIG_ENCODING_UTF16_BE) {\n      goto swap16;\n    }\n  }\n  if (to == ONIG_ENCODING_UTF32_BE) {\n    if (from == ONIG_ENCODING_ASCII || from == ONIG_ENCODING_ISO_8859_1) {\n      *conv = (UChar* )xmalloc(len * 4);\n      CHECK_NULL_RETURN_MEMERR(*conv);\n      *conv_end = *conv + (len * 4);\n      conv_ext0be32(s, end, *conv);\n      return 0;\n    }\n    else if (from == ONIG_ENCODING_UTF32_LE) {\n    swap32:\n      *conv = (UChar* )xmalloc(len);\n      CHECK_NULL_RETURN_MEMERR(*conv);\n      *conv_end = *conv + len;\n      conv_swap4bytes(s, end, *conv);\n      return 0;\n    }\n  }\n  else if (to == ONIG_ENCODING_UTF32_LE) {\n    if (from == ONIG_ENCODING_ASCII || from == ONIG_ENCODING_ISO_8859_1) {\n      *conv = (UChar* )xmalloc(len * 4);\n      CHECK_NULL_RETURN_MEMERR(*conv);\n      *conv_end = *conv + (len * 4);\n      conv_ext0le32(s, end, *conv);\n      return 0;\n    }\n    else if (from == ONIG_ENCODING_UTF32_BE) {\n      goto swap32;\n    }\n  }\n\n  return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION;\n}\n\nextern int\nonig_new_deluxe(regex_t** reg, const UChar* pattern, const UChar* pattern_end,\n                OnigCompileInfo* ci, OnigErrorInfo* einfo)\n{\n  int r;\n  UChar *cpat, *cpat_end;\n\n  if (IS_NOT_NULL(einfo)) einfo->par = (UChar* )NULL;\n\n  if (ci->pattern_enc != ci->target_enc) {\n    r = conv_encoding(ci->pattern_enc, ci->target_enc, pattern, pattern_end,\n                      &cpat, &cpat_end);\n    if (r != 0) return r;\n  }\n  else {\n    cpat     = (UChar* )pattern;\n    cpat_end = (UChar* )pattern_end;\n  }\n\n  *reg = (regex_t* )xmalloc(sizeof(regex_t));\n  if (IS_NULL(*reg)) {\n    r = ONIGERR_MEMORY;\n    goto err2;\n  }\n\n  r = onig_reg_init(*reg, ci->option, ci->case_fold_flag, ci->target_enc,\n                    ci->syntax);\n  if (r != 0) goto err;\n\n  r = onig_compile(*reg, cpat, cpat_end, einfo);\n  if (r != 0) {\n  err:\n    onig_free(*reg);\n    *reg = NULL;\n  }\n\n err2:\n  if (cpat != pattern) xfree(cpat);\n\n  return r;\n}\n"], "fixing_code": ["/**********************************************************************\n  regext.c -  Oniguruma (regular expression library)\n**********************************************************************/\n/*-\n * Copyright (c) 2002-2019  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n */\n\n#include \"regint.h\"\n\n#if 0\nstatic void\nconv_ext0be32(const UChar* s, const UChar* end, UChar* conv)\n{\n  while (s < end) {\n    *conv++ = '\\0';\n    *conv++ = '\\0';\n    *conv++ = '\\0';\n    *conv++ = *s++;\n  }\n}\n\nstatic void\nconv_ext0le32(const UChar* s, const UChar* end, UChar* conv)\n{\n  while (s < end) {\n    *conv++ = *s++;\n    *conv++ = '\\0';\n    *conv++ = '\\0';\n    *conv++ = '\\0';\n  }\n}\n\nstatic void\nconv_ext0be(const UChar* s, const UChar* end, UChar* conv)\n{\n  while (s < end) {\n    *conv++ = '\\0';\n    *conv++ = *s++;\n  }\n}\n\nstatic void\nconv_ext0le(const UChar* s, const UChar* end, UChar* conv)\n{\n  while (s < end) {\n    *conv++ = *s++;\n    *conv++ = '\\0';\n  }\n}\n\nstatic void\nconv_swap4bytes(const UChar* s, const UChar* end, UChar* conv)\n{\n  while (s < end) {\n    *conv++ = s[3];\n    *conv++ = s[2];\n    *conv++ = s[1];\n    *conv++ = s[0];\n    s += 4;\n  }\n}\n\nstatic void\nconv_swap2bytes(const UChar* s, const UChar* end, UChar* conv)\n{\n  while (s < end) {\n    *conv++ = s[1];\n    *conv++ = s[0];\n    s += 2;\n  }\n}\n\nstatic int\nconv_encoding(OnigEncoding from, OnigEncoding to, const UChar* s, const UChar* end,\n              UChar** conv, UChar** conv_end)\n{\n  int len = (int )(end - s);\n\n  if (to == ONIG_ENCODING_UTF16_BE) {\n    if (from == ONIG_ENCODING_ASCII || from == ONIG_ENCODING_ISO_8859_1) {\n      *conv = (UChar* )xmalloc(len * 2);\n      CHECK_NULL_RETURN_MEMERR(*conv);\n      *conv_end = *conv + (len * 2);\n      conv_ext0be(s, end, *conv);\n      return 0;\n    }\n    else if (from == ONIG_ENCODING_UTF16_LE) {\n    swap16:\n      *conv = (UChar* )xmalloc(len);\n      CHECK_NULL_RETURN_MEMERR(*conv);\n      *conv_end = *conv + len;\n      conv_swap2bytes(s, end, *conv);\n      return 0;\n    }\n  }\n  else if (to == ONIG_ENCODING_UTF16_LE) {\n    if (from == ONIG_ENCODING_ASCII || from == ONIG_ENCODING_ISO_8859_1) {\n      *conv = (UChar* )xmalloc(len * 2);\n      CHECK_NULL_RETURN_MEMERR(*conv);\n      *conv_end = *conv + (len * 2);\n      conv_ext0le(s, end, *conv);\n      return 0;\n    }\n    else if (from == ONIG_ENCODING_UTF16_BE) {\n      goto swap16;\n    }\n  }\n  if (to == ONIG_ENCODING_UTF32_BE) {\n    if (from == ONIG_ENCODING_ASCII || from == ONIG_ENCODING_ISO_8859_1) {\n      *conv = (UChar* )xmalloc(len * 4);\n      CHECK_NULL_RETURN_MEMERR(*conv);\n      *conv_end = *conv + (len * 4);\n      conv_ext0be32(s, end, *conv);\n      return 0;\n    }\n    else if (from == ONIG_ENCODING_UTF32_LE) {\n    swap32:\n      *conv = (UChar* )xmalloc(len);\n      CHECK_NULL_RETURN_MEMERR(*conv);\n      *conv_end = *conv + len;\n      conv_swap4bytes(s, end, *conv);\n      return 0;\n    }\n  }\n  else if (to == ONIG_ENCODING_UTF32_LE) {\n    if (from == ONIG_ENCODING_ASCII || from == ONIG_ENCODING_ISO_8859_1) {\n      *conv = (UChar* )xmalloc(len * 4);\n      CHECK_NULL_RETURN_MEMERR(*conv);\n      *conv_end = *conv + (len * 4);\n      conv_ext0le32(s, end, *conv);\n      return 0;\n    }\n    else if (from == ONIG_ENCODING_UTF32_BE) {\n      goto swap32;\n    }\n  }\n\n  return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION;\n}\n#endif\n\nextern int\nonig_new_deluxe(regex_t** reg, const UChar* pattern, const UChar* pattern_end,\n                OnigCompileInfo* ci, OnigErrorInfo* einfo)\n{\n  int r;\n  UChar *cpat, *cpat_end;\n\n  if (IS_NOT_NULL(einfo)) einfo->par = (UChar* )NULL;\n\n  if (ci->pattern_enc != ci->target_enc) {\n    return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION;\n  }\n  else {\n    cpat     = (UChar* )pattern;\n    cpat_end = (UChar* )pattern_end;\n  }\n\n  *reg = (regex_t* )xmalloc(sizeof(regex_t));\n  if (IS_NULL(*reg)) {\n    r = ONIGERR_MEMORY;\n    goto err2;\n  }\n\n  r = onig_reg_init(*reg, ci->option, ci->case_fold_flag, ci->target_enc,\n                    ci->syntax);\n  if (r != 0) goto err;\n\n  r = onig_compile(*reg, cpat, cpat_end, einfo);\n  if (r != 0) {\n  err:\n    onig_free(*reg);\n    *reg = NULL;\n  }\n\n err2:\n  if (cpat != pattern) xfree(cpat);\n\n  return r;\n}\n"], "filenames": ["src/regext.c"], "buggy_code_start_loc": [31], "buggy_code_end_loc": [175], "fixing_code_start_loc": [32], "fixing_code_end_loc": [175], "type": "CWE-416", "message": "A use-after-free in onig_new_deluxe() in regext.c in Oniguruma 6.9.2 allows attackers to potentially cause information disclosure, denial of service, or possibly code execution by providing a crafted regular expression. The attacker provides a pair of a regex pattern and a string, with a multi-byte encoding that gets handled by onig_new_deluxe(). Oniguruma issues often affect Ruby, as well as common optional libraries for PHP and Rust.", "other": {"cve": {"id": "CVE-2019-13224", "sourceIdentifier": "cve@mitre.org", "published": "2019-07-10T14:15:11.607", "lastModified": "2022-07-20T16:33:12.850", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A use-after-free in onig_new_deluxe() in regext.c in Oniguruma 6.9.2 allows attackers to potentially cause information disclosure, denial of service, or possibly code execution by providing a crafted regular expression. The attacker provides a pair of a regex pattern and a string, with a multi-byte encoding that gets handled by onig_new_deluxe(). Oniguruma issues often affect Ruby, as well as common optional libraries for PHP and Rust."}, {"lang": "es", "value": "Un uso de memoria previamente liberada en la funci\u00f3n onig_new_deluxe() en el archivo regext.c en Oniguruma versi\u00f3n 6.9.2, permite a los atacantes causar divulgaci\u00f3n de informaci\u00f3n, denegaci\u00f3n de servicio o posiblemente ejecuci\u00f3n de c\u00f3digo al proporcionar una expresi\u00f3n regular dise\u00f1ada. El atacante provee un par patrones de expresi\u00f3n regular y una cadena, con una codificaci\u00f3n de m\u00faltiples bytes que se maneja con la funci\u00f3n onig_new_deluxe(). Los problemas de Oniguruma con frecuencia afectan a Ruby, as\u00ed como a bibliotecas opcionales y comunes para PHP y Rust."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-416"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:oniguruma_project:oniguruma:6.9.2:-:*:*:*:*:*:*", "matchCriteriaId": "E22B1C2B-F272-4F96-9B84-09CDA15AA5D7"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:php:php:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.1.0", "versionEndExcluding": "7.1.32", "matchCriteriaId": "7DB7C9CA-3BCD-45C7-A7E7-9D6AA45E672E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:php:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.2.0", "versionEndExcluding": "7.2.23", "matchCriteriaId": "9064EC35-3CC6-49E3-BC18-5E79542FBB01"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:php:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.3.0", "versionEndExcluding": "7.3.9", "matchCriteriaId": "FF45BAB9-21F7-4234-88EA-2768D2FF5768"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:29:*:*:*:*:*:*:*", "matchCriteriaId": "D100F7CE-FC64-4CC6-852A-6136D72DA419"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:30:*:*:*:*:*:*:*", "matchCriteriaId": "97A4B8DF-58DA-4AB6-A1F9-331B36409BA3"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:12.04:*:*:*:-:*:*:*", "matchCriteriaId": "CB66DB75-2B16-4EBF-9B93-CE49D8086E41"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:14.04:*:*:*:esm:*:*:*", "matchCriteriaId": "815D70A8-47D3-459C-A32C-9FEACA0659D1"}]}]}], "references": [{"url": "https://github.com/kkos/oniguruma/commit/0f7f61ed1b7b697e283e37bd2d731d0bd57adb55", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2019/07/msg00013.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JWCPDTZOIUKGMFAD5NAKUB7FPJFAIQN5/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/SNL26OZSQRVLEO6JRNUVIMZTICXBNEQW/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/201911-03", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://support.f5.com/csp/article/K00103182", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://support.f5.com/csp/article/K00103182?utm_source=f5support&amp;utm_medium=RSS", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/4088-1/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kkos/oniguruma/commit/0f7f61ed1b7b697e283e37bd2d731d0bd57adb55"}}