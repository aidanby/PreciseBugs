{"buggy_code": ["<?php\n/**\n* Created by PhpStorm.\n * User: Bojidar\n* Date: 10/7/2020\n* Time: 5:50 PM\n*/\n\nuse Illuminate\\Support\\Facades\\App;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('api/users/export_my_data', function (\\Illuminate\\Http\\Request $request) {\n\n    if (!is_logged()) {\n        return array('error' => 'You must be logged');\n    }\n\n    $userId = (int) $request->all()['user_id'];\n\n    $allowToExport = false;\n    if ($userId == user_id()) {\n        $allowToExport = true;\n    } else if (is_admin()) {\n        $allowToExport = true;\n    }\n\n    if ($allowToExport == false) {\n        return array('error' => 'You are now allowed to export this information.');\n    }\n\n    $exportFromTables = [];\n    $prefix = mw()->database_manager->get_prefix();\n    $tablesList = mw()->database_manager->get_tables_list(true);\n    foreach ($tablesList as $table) {\n        $table = str_replace($prefix, false, $table);\n        $columns  = Schema::getColumnListing($table);\n        if (in_array('created_by', $columns)) {\n            $exportFromTables[] = $table;\n        }\n    }\n\n    $exportData = [];\n    foreach ($exportFromTables as $exportFromTable) {\n        $getData = \\Illuminate\\Support\\Facades\\DB::table($exportFromTable)->where('created_by', $userId)->get();\n        if (!empty($getData)) {\n            $exportData[$exportFromTable] = $getData->toArray();\n        }\n    }\n\n    $json = new \\MicroweberPackages\\Export\\Formats\\JsonExport($exportData);\n    $getJson = $json->start();\n\n    if (isset($getJson['files'][0]['filepath'])) {\n        return response()->download($getJson['files'][0]['filepath'])->deleteFileAfterSend(true);\n    }\n\n})->name('api.users.export_my_data');\n\n// Admin web\nRoute::prefix(mw_admin_prefix_url())->middleware(['admin'])->namespace('\\MicroweberPackages\\User\\Http\\Controllers')->group(function () {\n    Route::get('login', 'UserLoginController@index')->name('admin.login')->middleware(['allowed_ips']);\n});\n\n\n\n// OLD API SAVE USER\nRoute::post('api/save_user', function (Request $request) {\n    if (!defined('MW_API_CALL')) {\n        define('MW_API_CALL', true);\n    }\n    if(!is_logged()){\n        App::abort(403, 'Unauthorized action.');\n    }\n\n    $input = Input::all();\n\n    return save_user($input);\n})->middleware(['api']);\n\nRoute::post('api/delete_user', function (Request $request) {\n    if (!defined('MW_API_CALL')) {\n        define('MW_API_CALL', true);\n    }\n    if(!is_admin()){\n        App::abort(403, 'Unauthorized action.');\n    }\n    $input = Input::all();\n    return delete_user($input);\n})->middleware(['api']);\n\nRoute::name('api.user.')\n    ->prefix('api/user')\n    ->middleware([\n        'api.public',\n      //  \\MicroweberPackages\\App\\Http\\Middleware\\VerifyCsrfToken::class,\n        \\MicroweberPackages\\App\\Http\\Middleware\\XSS::class\n    ])\n    ->namespace('\\MicroweberPackages\\User\\Http\\Controllers')\n    ->group(function () {\n\n    Route::post('login', 'UserLoginController@login')->name('login')->middleware(['allowed_ips','throttle:60,1']);\n    Route::any('logout', 'UserLoginController@logout')->name('logout')->excludedMiddleware(\n        \\MicroweberPackages\\App\\Http\\Middleware\\XSS::class\n    );\n    Route::post('register', 'UserRegisterController@register')->name('register')->middleware(['allowed_ips']);\n\n    Route::post('/forgot-password', 'UserForgotPasswordController@send')\n        ->middleware(['throttle:3,1'])\n        ->name('password.email');\n    Route::post('/reset-password', 'UserForgotPasswordController@update')->name('password.update');\n\n    Route::post('/profile-update', 'UserProfileController@update')->name('profile.update');\n\n});\n\nRoute::name('api.')\n    ->prefix('api')\n    ->middleware([\n        'api',\n      //  \\MicroweberPackages\\App\\Http\\Middleware\\VerifyCsrfToken::class,\n        \\MicroweberPackages\\App\\Http\\Middleware\\XSS::class\n    ])\n    ->namespace('\\MicroweberPackages\\User\\Http\\Controllers\\Api')\n    ->group(function () {\n\n        Route::get('/logout', '\\MicroweberPackages\\User\\Http\\Controllers\\UserLogoutController@index')->name('api.logout')\n            ->middleware([\n                \\MicroweberPackages\\App\\Http\\Middleware\\VerifyCsrfToken::class,\n                \\MicroweberPackages\\App\\Http\\Middleware\\SameSiteRefererMiddleware::class\n            ])\n            ->excludedMiddleware(\n           'api'\n        );;\n\n        Route::apiResource('user', 'UserApiController');\n    });\n"], "fixing_code": ["<?php\n/**\n* Created by PhpStorm.\n * User: Bojidar\n* Date: 10/7/2020\n* Time: 5:50 PM\n*/\n\nuse Illuminate\\Support\\Facades\\App;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('api/users/export_my_data', function (\\Illuminate\\Http\\Request $request) {\n\n    if (!is_logged()) {\n        return array('error' => 'You must be logged');\n    }\n\n    $userId = (int) $request->all()['user_id'];\n\n    $allowToExport = false;\n    if ($userId == user_id()) {\n        $allowToExport = true;\n    } else if (is_admin()) {\n        $allowToExport = true;\n    }\n\n    if ($allowToExport == false) {\n        return array('error' => 'You are now allowed to export this information.');\n    }\n\n    $exportFromTables = [];\n    $prefix = mw()->database_manager->get_prefix();\n    $tablesList = mw()->database_manager->get_tables_list(true);\n    foreach ($tablesList as $table) {\n        $table = str_replace($prefix, false, $table);\n        $columns  = Schema::getColumnListing($table);\n        if (in_array('created_by', $columns)) {\n            $exportFromTables[] = $table;\n        }\n    }\n\n    $exportData = [];\n    foreach ($exportFromTables as $exportFromTable) {\n        $getData = \\Illuminate\\Support\\Facades\\DB::table($exportFromTable)->where('created_by', $userId)->get();\n        if (!empty($getData)) {\n            $exportData[$exportFromTable] = $getData->toArray();\n        }\n    }\n\n    $json = new \\MicroweberPackages\\Export\\Formats\\JsonExport($exportData);\n    $getJson = $json->start();\n\n    if (isset($getJson['files'][0]['filepath'])) {\n        return response()->download($getJson['files'][0]['filepath'])->deleteFileAfterSend(true);\n    }\n\n})->name('api.users.export_my_data');\n\n// Admin web\nRoute::prefix(mw_admin_prefix_url())->middleware(['admin'])->namespace('\\MicroweberPackages\\User\\Http\\Controllers')->group(function () {\n    Route::get('login', 'UserLoginController@index')->name('admin.login')->middleware(['allowed_ips']);\n});\n\n\n\n// OLD API SAVE USER\nRoute::post('api/save_user', function (Request $request) {\n    if (!defined('MW_API_CALL')) {\n        define('MW_API_CALL', true);\n    }\n    if(!is_logged()){\n        App::abort(403, 'Unauthorized action.');\n    }\n\n    $input = Input::all();\n\n    return save_user($input);\n})->middleware(['api']);\n\nRoute::post('api/delete_user', function (Request $request) {\n    if (!defined('MW_API_CALL')) {\n        define('MW_API_CALL', true);\n    }\n    if(!is_admin()){\n        App::abort(403, 'Unauthorized action.');\n    }\n    $input = Input::all();\n    return delete_user($input);\n})->middleware(['api']);\n\nRoute::name('api.user.')\n    ->prefix('api/user')\n    ->middleware([\n        'api.public',\n      //  \\MicroweberPackages\\App\\Http\\Middleware\\VerifyCsrfToken::class,\n        \\MicroweberPackages\\App\\Http\\Middleware\\XSS::class\n    ])\n    ->namespace('\\MicroweberPackages\\User\\Http\\Controllers')\n    ->group(function () {\n\n    Route::post('login', 'UserLoginController@login')->name('login')->middleware(['allowed_ips','throttle:60,1']);\n    Route::any('logout', 'UserLoginController@logout')->name('logout')->excludedMiddleware(\n        \\MicroweberPackages\\App\\Http\\Middleware\\XSS::class\n    );\n    Route::post('register', 'UserRegisterController@register')->name('register')->middleware(['allowed_ips']);\n\n    Route::post('/forgot-password', 'UserForgotPasswordController@send')\n        ->middleware(['throttle:3,1'])\n        ->name('password.email');\n    Route::post('/reset-password', 'UserForgotPasswordController@update')->name('password.update');\n\n    Route::post('/profile-update', 'UserProfileController@update')->name('profile.update');\n\n});\n\nRoute::name('api.')\n    ->prefix('api')\n    ->middleware([\n        'api',\n      //  \\MicroweberPackages\\App\\Http\\Middleware\\VerifyCsrfToken::class,\n        \\MicroweberPackages\\App\\Http\\Middleware\\XSS::class\n    ])\n    ->namespace('\\MicroweberPackages\\User\\Http\\Controllers\\Api')\n    ->group(function () {\n\n        Route::get('/logout', '\\MicroweberPackages\\User\\Http\\Controllers\\UserLogoutController@index')->name('api.logout')\n            ->middleware([\n                \\MicroweberPackages\\App\\Http\\Middleware\\VerifyCsrfToken::class,\n                \\MicroweberPackages\\App\\Http\\Middleware\\SameSiteRefererMiddleware::class\n            ])\n            ->excludedMiddleware(\n           'api'\n        );;\n\n        Route::apiResource('user', 'UserApiController')->middleware(['admin']);\n    });\n"], "filenames": ["src/MicroweberPackages/User/routes/api.php"], "buggy_code_start_loc": [135], "buggy_code_end_loc": [136], "fixing_code_start_loc": [135], "fixing_code_end_loc": [136], "type": "CWE-269", "message": "Improper Privilege Management in GitHub repository microweber/microweber prior to 1.3.4.", "other": {"cve": {"id": "CVE-2023-2240", "sourceIdentifier": "security@huntr.dev", "published": "2023-04-22T01:15:08.147", "lastModified": "2023-05-02T17:39:02.753", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Privilege Management in GitHub repository microweber/microweber prior to 1.3.4."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3.4", "matchCriteriaId": "E503E14E-D4EE-4F4C-8431-DE2EB7A58ABA"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/f43d5b767ad5814fc5f84bbaf0b77996262f3a4b", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/8f595559-7b4b-4b00-954c-7a627766e203", "source": "security@huntr.dev", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/f43d5b767ad5814fc5f84bbaf0b77996262f3a4b"}}