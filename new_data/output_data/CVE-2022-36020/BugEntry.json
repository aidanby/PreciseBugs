{"buggy_code": ["{\n\t\"name\": \"typo3/html-sanitizer\",\n\t\"description\": \"HTML sanitizer aiming to provide XSS-safe markup based on explicitly allowed tags, attributes and values.\",\n\t\"type\": \"library\",\n\t\"license\": \"MIT\",\n\t\"authors\": [\n\t\t{\n\t\t\t\"name\": \"Oliver Hader\",\n\t\t\t\"email\": \"oliver@typo3.org\"\n\t\t}\n\t],\n\t\"extra\": {\n\t\t\"branch-alias\": {\n\t\t\t\"dev-main\": \"2.x-dev\"\n\t\t}\n\t},\n\t\"require\": {\n\t\t\"ext-dom\": \"*\",\n\t\t\"masterminds/html5\": \"^2.7\",\n\t\t\"php\": \"^7.2 || ^8.0\",\n\t\t\"psr/log\": \"^1.0 || ^2.0 || ^3.0\"\n\t},\n\t\"require-dev\": {\n\t\t\"phpunit/phpunit\": \"^8.5\"\n\t},\n\t\"scripts\": {\n\t\t\"test\": \"phpunit\"\n\t},\n\t\"autoload\": {\n\t\t\"psr-4\": {\n\t\t\t\"TYPO3\\\\HtmlSanitizer\\\\\": \"src/\"\n\t\t}\n\t},\n\t\"autoload-dev\": {\n\t\t\"psr-4\": {\n\t\t\t\"TYPO3\\\\HtmlSanitizer\\\\Tests\\\\\": \"tests/\"\n\t\t}\n\t}\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Tests;\n\nuse PHPUnit\\Framework\\TestCase;\nuse TYPO3\\HtmlSanitizer\\Behavior;\nuse TYPO3\\HtmlSanitizer\\Sanitizer;\nuse TYPO3\\HtmlSanitizer\\Visitor\\CommonVisitor;\n\nclass ScenarioTest extends TestCase\n{\n    public static function tagFlagsAreProcessedDataProvider(): array\n    {\n        return [\n            [\n                Behavior\\Tag::ALLOW_CHILDREN + Behavior\\Tag::PURGE_WITHOUT_CHILDREN,\n                implode(\"\\n\", [\n                    '<div></div><div data-test=\"test\"></div>',\n                    '<div>test</div><div data-test=\"test\">test</div>',\n                    '<div><!-- --></div><div data-test=\"test\"><!-- --></div>',\n                    '<div><!-- test --></div><div data-test=\"test\"><!-- test --></div>',\n                    '<div><i></i></div><div data-test=\"test\"><i></i></div>',\n                ]),\n                implode(\"\\n\", [\n                    '',\n                    '<div>test</div><div data-test=\"test\">test</div>',\n                    '<div><!-- --></div><div data-test=\"test\"><!-- --></div>',\n                    '<div><!-- test --></div><div data-test=\"test\"><!-- test --></div>',\n                    '<div><i></i></div><div data-test=\"test\"><i></i></div>',\n                ]),\n            ],\n            [\n                Behavior\\Tag::ALLOW_CHILDREN + Behavior\\Tag::PURGE_WITHOUT_CHILDREN,\n                implode(\"\\n\", [\n                    '<script></script><script data-test=\"test\"></script>',\n                    '<script>test</script><script data-test=\"test\">test</script>',\n                    '<script><!-- --></script><script data-test=\"test\"><!-- --></script>',\n                    '<script><!-- test --></script><script data-test=\"test\"><!-- test --></script>',\n                ]),\n                implode(\"\\n\", [\n                    '',\n                    '<script>test</script><script data-test=\"test\">test</script>',\n                    '<script><!-- --></script><script data-test=\"test\"><!-- --></script>',\n                    '<script><!-- test --></script><script data-test=\"test\"><!-- test --></script>',\n                ]),\n            ],\n        ];\n    }\n\n    /**\n     * @test\n     * @dataProvider tagFlagsAreProcessedDataProvider\n     */\n    public function tagFlagsAreProcessed(int $flags, string $payload, string $expectation): void\n    {\n        $behavior = (new Behavior())\n            ->withFlags(Behavior::ENCODE_INVALID_TAG + Behavior::REMOVE_UNEXPECTED_CHILDREN)\n            ->withName('scenario-test')\n            ->withTags(\n                (new Behavior\\Tag('i')), // just used as DOM child element\n                (new Behavior\\Tag('div', $flags))->addAttrs((new Behavior\\Attr('data-test'))),\n                (new Behavior\\Tag('script', $flags))->addAttrs((new Behavior\\Attr('data-test')))\n            );\n\n        $sanitizer = new Sanitizer(\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    /**\n     * @test\n     */\n    public function isJsonLdScriptAllowed(): void\n    {\n        $payload = implode(\"\\n\" , [\n            // tag will be removed due to `PURGE_WITHOUT_ATTRS`\n            '1:<script>alert(1)</script>',\n            // `type` attr will be removed -> no attrs -> tag will be removed due to `PURGE_WITHOUT_ATTRS`\n            '2:<script type=\"application/javascript\">alert(2)</script>',\n            // `type` attr will be removed -> no attrs -> tag will be removed due to `PURGE_WITHOUT_ATTRS`\n            '3:<script type=\"application/ecmascript\">alert(3)</script>',\n            // @todo not sanitized by `PURGE_WITHOUT_ATTRS` -> `type` attr value needs to be mandatory\n            '4:<script id=\"identifier\">alert(1)</script>',\n            // @todo not sanitized by `PURGE_WITHOUT_ATTRS` -> `type` attr value needs to be mandatory\n            '5:<script id=\"identifier\" type=\"application/javascript\">alert(2)</script>',\n            // tag will be removed due to `PURGE_WITHOUT_CHILDREN`\n            '6:<script type=\"application/ld+json\"></script>',\n            // rest is keep, since `type` attr value matches and child content is given\n            '7:<script type=\"application/ld+json\">alert(4)</script>',\n            '8:<script type=\"application/ld+json\">{\"@id\": \"https://github.com/TYPO3/html-sanitizer\"}</script>',\n        ]);\n        $expectation = implode(\"\\n\" , [\n            '1:',\n            '2:',\n            '3:',\n            '4:<script id=\"identifier\">alert(1)</script>',\n            '5:<script id=\"identifier\">alert(2)</script>',\n            '6:',\n            '7:<script type=\"application/ld+json\">alert(4)</script>',\n            '8:<script type=\"application/ld+json\">{\"@id\": \"https://github.com/TYPO3/html-sanitizer\"}</script>',\n        ]);\n\n        $behavior = (new Behavior())\n            ->withFlags(Behavior::ENCODE_INVALID_TAG + Behavior::REMOVE_UNEXPECTED_CHILDREN)\n            ->withName('scenario-test')\n            ->withTags(\n                (new Behavior\\Tag(\n                    'script',\n                    Behavior\\Tag::PURGE_WITHOUT_ATTRS + Behavior\\Tag::PURGE_WITHOUT_CHILDREN + Behavior\\Tag::ALLOW_CHILDREN\n                ))->addAttrs(\n                    (new Behavior\\Attr('id')),\n                    (new Behavior\\Attr('type'))\n                        ->addValues(new Behavior\\DatasetAttrValue('application/ld+json'))\n                )\n            );\n\n        $sanitizer = new Sanitizer(\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n}\n"], "fixing_code": ["{\n\t\"name\": \"typo3/html-sanitizer\",\n\t\"description\": \"HTML sanitizer aiming to provide XSS-safe markup based on explicitly allowed tags, attributes and values.\",\n\t\"type\": \"library\",\n\t\"license\": \"MIT\",\n\t\"authors\": [\n\t\t{\n\t\t\t\"name\": \"Oliver Hader\",\n\t\t\t\"email\": \"oliver@typo3.org\"\n\t\t}\n\t],\n\t\"extra\": {\n\t\t\"branch-alias\": {\n\t\t\t\"dev-main\": \"2.x-dev\"\n\t\t}\n\t},\n\t\"require\": {\n\t\t\"ext-dom\": \"*\",\n\t\t\"masterminds/html5\": \"^2.7.6\",\n\t\t\"php\": \"^7.2 || ^8.0\",\n\t\t\"psr/log\": \"^1.0 || ^2.0 || ^3.0\"\n\t},\n\t\"require-dev\": {\n\t\t\"phpunit/phpunit\": \"^8.5\"\n\t},\n\t\"scripts\": {\n\t\t\"test\": \"phpunit\"\n\t},\n\t\"autoload\": {\n\t\t\"psr-4\": {\n\t\t\t\"TYPO3\\\\HtmlSanitizer\\\\\": \"src/\"\n\t\t}\n\t},\n\t\"autoload-dev\": {\n\t\t\"psr-4\": {\n\t\t\t\"TYPO3\\\\HtmlSanitizer\\\\Tests\\\\\": \"tests/\"\n\t\t}\n\t}\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Tests;\n\nuse PHPUnit\\Framework\\TestCase;\nuse TYPO3\\HtmlSanitizer\\Behavior;\nuse TYPO3\\HtmlSanitizer\\Sanitizer;\nuse TYPO3\\HtmlSanitizer\\Visitor\\CommonVisitor;\n\nclass ScenarioTest extends TestCase\n{\n    public static function allTagsAreRemovedOnMissingDeclarationDataProvider(): array\n    {\n        return [\n            ['<div class=\"content\">value</div><span class=\"content\">value</span>', ''],\n            ['<!--any--><div class=\"content\">value</div>', '<!--any-->'],\n            ['<!--any--!><div class=\"content\">value</div>', '<!--any-->'],\n        ];\n    }\n\n    /**\n     * @test\n     * @dataProvider allTagsAreRemovedOnMissingDeclarationDataProvider\n     */\n    public function allTagsAreRemovedOnMissingDeclaration(string $payload, string $expectation): void\n    {\n        $behavior = new Behavior();\n        $sanitizer = new Sanitizer(\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    public static function tagFlagsAreProcessedDataProvider(): array\n    {\n        return [\n            [\n                Behavior\\Tag::ALLOW_CHILDREN + Behavior\\Tag::PURGE_WITHOUT_CHILDREN,\n                implode(\"\\n\", [\n                    '<div></div><div data-test=\"test\"></div>',\n                    '<div>test</div><div data-test=\"test\">test</div>',\n                    '<div><!-- --></div><div data-test=\"test\"><!-- --></div>',\n                    '<div><!-- test --></div><div data-test=\"test\"><!-- test --></div>',\n                    '<div><i></i></div><div data-test=\"test\"><i></i></div>',\n                ]),\n                implode(\"\\n\", [\n                    '',\n                    '<div>test</div><div data-test=\"test\">test</div>',\n                    '<div><!-- --></div><div data-test=\"test\"><!-- --></div>',\n                    '<div><!-- test --></div><div data-test=\"test\"><!-- test --></div>',\n                    '<div><i></i></div><div data-test=\"test\"><i></i></div>',\n                ]),\n            ],\n            [\n                Behavior\\Tag::ALLOW_CHILDREN + Behavior\\Tag::PURGE_WITHOUT_CHILDREN,\n                implode(\"\\n\", [\n                    '<script></script><script data-test=\"test\"></script>',\n                    '<script>test</script><script data-test=\"test\">test</script>',\n                    '<script><!-- --></script><script data-test=\"test\"><!-- --></script>',\n                    '<script><!-- test --></script><script data-test=\"test\"><!-- test --></script>',\n                ]),\n                implode(\"\\n\", [\n                    '',\n                    '<script>test</script><script data-test=\"test\">test</script>',\n                    '<script><!-- --></script><script data-test=\"test\"><!-- --></script>',\n                    '<script><!-- test --></script><script data-test=\"test\"><!-- test --></script>',\n                ]),\n            ],\n        ];\n    }\n\n    /**\n     * @test\n     * @dataProvider tagFlagsAreProcessedDataProvider\n     */\n    public function tagFlagsAreProcessed(int $flags, string $payload, string $expectation): void\n    {\n        $behavior = (new Behavior())\n            ->withFlags(Behavior::ENCODE_INVALID_TAG + Behavior::REMOVE_UNEXPECTED_CHILDREN)\n            ->withName('scenario-test')\n            ->withTags(\n                (new Behavior\\Tag('i')), // just used as DOM child element\n                (new Behavior\\Tag('div', $flags))->addAttrs((new Behavior\\Attr('data-test'))),\n                (new Behavior\\Tag('script', $flags))->addAttrs((new Behavior\\Attr('data-test')))\n            );\n\n        $sanitizer = new Sanitizer(\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n\n    /**\n     * @test\n     */\n    public function isJsonLdScriptAllowed(): void\n    {\n        $payload = implode(\"\\n\" , [\n            // tag will be removed due to `PURGE_WITHOUT_ATTRS`\n            '1:<script>alert(1)</script>',\n            // `type` attr will be removed -> no attrs -> tag will be removed due to `PURGE_WITHOUT_ATTRS`\n            '2:<script type=\"application/javascript\">alert(2)</script>',\n            // `type` attr will be removed -> no attrs -> tag will be removed due to `PURGE_WITHOUT_ATTRS`\n            '3:<script type=\"application/ecmascript\">alert(3)</script>',\n            // @todo not sanitized by `PURGE_WITHOUT_ATTRS` -> `type` attr value needs to be mandatory\n            '4:<script id=\"identifier\">alert(1)</script>',\n            // @todo not sanitized by `PURGE_WITHOUT_ATTRS` -> `type` attr value needs to be mandatory\n            '5:<script id=\"identifier\" type=\"application/javascript\">alert(2)</script>',\n            // tag will be removed due to `PURGE_WITHOUT_CHILDREN`\n            '6:<script type=\"application/ld+json\"></script>',\n            // rest is keep, since `type` attr value matches and child content is given\n            '7:<script type=\"application/ld+json\">alert(4)</script>',\n            '8:<script type=\"application/ld+json\">{\"@id\": \"https://github.com/TYPO3/html-sanitizer\"}</script>',\n        ]);\n        $expectation = implode(\"\\n\" , [\n            '1:',\n            '2:',\n            '3:',\n            '4:<script id=\"identifier\">alert(1)</script>',\n            '5:<script id=\"identifier\">alert(2)</script>',\n            '6:',\n            '7:<script type=\"application/ld+json\">alert(4)</script>',\n            '8:<script type=\"application/ld+json\">{\"@id\": \"https://github.com/TYPO3/html-sanitizer\"}</script>',\n        ]);\n\n        $behavior = (new Behavior())\n            ->withFlags(Behavior::ENCODE_INVALID_TAG + Behavior::REMOVE_UNEXPECTED_CHILDREN)\n            ->withName('scenario-test')\n            ->withTags(\n                (new Behavior\\Tag(\n                    'script',\n                    Behavior\\Tag::PURGE_WITHOUT_ATTRS + Behavior\\Tag::PURGE_WITHOUT_CHILDREN + Behavior\\Tag::ALLOW_CHILDREN\n                ))->addAttrs(\n                    (new Behavior\\Attr('id')),\n                    (new Behavior\\Attr('type'))\n                        ->addValues(new Behavior\\DatasetAttrValue('application/ld+json'))\n                )\n            );\n\n        $sanitizer = new Sanitizer(\n            new CommonVisitor($behavior)\n        );\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n}\n"], "filenames": ["composer.json", "tests/ScenarioTest.php"], "buggy_code_start_loc": [19, 23], "buggy_code_end_loc": [20, 23], "fixing_code_start_loc": [19, 24], "fixing_code_end_loc": [20, 46], "type": "CWE-79", "message": "The typo3/html-sanitizer package is an HTML sanitizer, written in PHP, aiming to provide XSS-safe markup based on explicitly allowed tags, attributes and values. Due to a parsing issue in the upstream package `masterminds/html5`, malicious markup used in a sequence with special HTML comments cannot be filtered and sanitized. This allows for a bypass of the cross-site scripting mechanism of `typo3/html-sanitizer`. This issue has been addressed in versions 1.0.7 and 2.0.16 of the `typo3/html-sanitizer` package. Users are advised to upgrade. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-36020", "sourceIdentifier": "security-advisories@github.com", "published": "2022-09-13T17:15:08.250", "lastModified": "2022-09-16T02:36:36.757", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The typo3/html-sanitizer package is an HTML sanitizer, written in PHP, aiming to provide XSS-safe markup based on explicitly allowed tags, attributes and values. Due to a parsing issue in the upstream package `masterminds/html5`, malicious markup used in a sequence with special HTML comments cannot be filtered and sanitized. This allows for a bypass of the cross-site scripting mechanism of `typo3/html-sanitizer`. This issue has been addressed in versions 1.0.7 and 2.0.16 of the `typo3/html-sanitizer` package. Users are advised to upgrade. There are no known workarounds for this issue."}, {"lang": "es", "value": "El paquete typo3/html-sanitizer es un saneador de HTML, escrito en PHP, cuyo objetivo es proporcionar un marcado seguro contra ataques de tipo XSS basado en etiquetas, atributos y valores expl\u00edcitamente permitidos. Debido a un problema de an\u00e1lisis en el paquete upstream \"masterminds/html5\", el marcado malicioso usado en una secuencia con comentarios HTML especiales no puede ser filtrado y saneado. Esto permite omitir el mecanismo de tipo cross-site scripting de \"typo3/html-sanitizer\". Este problema ha sido abordado en versiones 1.0.7 y 2.0.16 del paquete \"typo3/html-sanitizer\". Es recomendado a usuarios actualizar. No se presentan mitigaciones conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:typo3:html_sanitizer:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.0.0", "versionEndExcluding": "1.0.7", "matchCriteriaId": "18546B22-C9E8-4ED2-BA5D-0E49560F74FF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:html_sanitizer:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "2.0.16", "matchCriteriaId": "3D409E3E-7553-4BB9-9984-08CED758D516"}]}]}], "references": [{"url": "https://github.com/TYPO3/html-sanitizer/commit/60bfdc7f9b394d0236e16ee4cea8372a7defa493", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/TYPO3/html-sanitizer/security/advisories/GHSA-47m6-46mj-p235", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://packagist.org/packages/masterminds/html5", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://packagist.org/packages/typo3/html-sanitizer", "source": "security-advisories@github.com", "tags": ["Product", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/TYPO3/html-sanitizer/commit/60bfdc7f9b394d0236e16ee4cea8372a7defa493"}}