{"buggy_code": ["/*\n * DNxHD/VC-3 parser\n * Copyright (c) 2008 Baptiste Coudurier <baptiste.coudurier@free.fr>\n *\n * This file is part of FFmpeg.\n *\n * FFmpeg is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * FFmpeg is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with FFmpeg; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n */\n\n/**\n * @file\n * DNxHD/VC-3 parser\n */\n\n#include \"parser.h\"\n#include \"dnxhddata.h\"\n\ntypedef struct {\n    ParseContext pc;\n    int cur_byte;\n    int remaining;\n    int w, h;\n} DNXHDParserContext;\n\nstatic int dnxhd_get_hr_frame_size(int cid, int w, int h)\n{\n    int result, i = ff_dnxhd_get_cid_table(cid);\n\n    if (i < 0)\n        return i;\n\n    result = ((h + 15) / 16) * ((w + 15) / 16) * ff_dnxhd_cid_table[i].packet_scale.num / ff_dnxhd_cid_table[i].packet_scale.den;\n    result = (result + 2048) / 4096 * 4096;\n\n    return FFMAX(result, 8192);\n}\n\nstatic int dnxhd_find_frame_end(DNXHDParserContext *dctx,\n                                const uint8_t *buf, int buf_size)\n{\n    ParseContext *pc = &dctx->pc;\n    uint64_t state = pc->state64;\n    int pic_found = pc->frame_start_found;\n    int i = 0;\n\n    if (!pic_found) {\n        for (i = 0; i < buf_size; i++) {\n            state = (state << 8) | buf[i];\n            if (ff_dnxhd_check_header_prefix(state & 0xffffffffff00LL) != 0) {\n                i++;\n                pic_found = 1;\n                dctx->cur_byte = 0;\n                dctx->remaining = 0;\n                break;\n            }\n        }\n    }\n\n    if (pic_found && !dctx->remaining) {\n        if (!buf_size) /* EOF considered as end of frame */\n            return 0;\n        for (; i < buf_size; i++) {\n            dctx->cur_byte++;\n            state = (state << 8) | buf[i];\n\n            if (dctx->cur_byte == 24) {\n                dctx->h = (state >> 32) & 0xFFFF;\n            } else if (dctx->cur_byte == 26) {\n                dctx->w = (state >> 32) & 0xFFFF;\n            } else if (dctx->cur_byte == 42) {\n                int cid = (state >> 32) & 0xFFFFFFFF;\n\n                if (cid <= 0)\n                    continue;\n\n                dctx->remaining = avpriv_dnxhd_get_frame_size(cid);\n                if (dctx->remaining <= 0) {\n                    dctx->remaining = dnxhd_get_hr_frame_size(cid, dctx->w, dctx->h);\n                    if (dctx->remaining <= 0)\n                        return dctx->remaining;\n                }\n                if (buf_size - i + 47 >= dctx->remaining) {\n                    int remaining = dctx->remaining;\n\n                    pc->frame_start_found = 0;\n                    pc->state64 = -1;\n                    dctx->cur_byte = 0;\n                    dctx->remaining = 0;\n                    return remaining;\n                } else {\n                    dctx->remaining -= buf_size;\n                }\n            }\n        }\n    } else if (pic_found) {\n        if (dctx->remaining > buf_size) {\n            dctx->remaining -= buf_size;\n        } else {\n            int remaining = dctx->remaining;\n\n            pc->frame_start_found = 0;\n            pc->state64 = -1;\n            dctx->cur_byte = 0;\n            dctx->remaining = 0;\n            return remaining;\n        }\n    }\n    pc->frame_start_found = pic_found;\n    pc->state64 = state;\n    return END_NOT_FOUND;\n}\n\nstatic int dnxhd_parse(AVCodecParserContext *s,\n                       AVCodecContext *avctx,\n                       const uint8_t **poutbuf, int *poutbuf_size,\n                       const uint8_t *buf, int buf_size)\n{\n    DNXHDParserContext *dctx = s->priv_data;\n    ParseContext *pc = &dctx->pc;\n    int next;\n\n    if (s->flags & PARSER_FLAG_COMPLETE_FRAMES) {\n        next = buf_size;\n    } else {\n        next = dnxhd_find_frame_end(dctx, buf, buf_size);\n        if (ff_combine_frame(pc, next, &buf, &buf_size) < 0) {\n            *poutbuf      = NULL;\n            *poutbuf_size = 0;\n            return buf_size;\n        }\n    }\n    *poutbuf      = buf;\n    *poutbuf_size = buf_size;\n    return next;\n}\n\nAVCodecParser ff_dnxhd_parser = {\n    .codec_ids      = { AV_CODEC_ID_DNXHD },\n    .priv_data_size = sizeof(DNXHDParserContext),\n    .parser_parse   = dnxhd_parse,\n    .parser_close   = ff_parse_close,\n};\n"], "fixing_code": ["/*\n * DNxHD/VC-3 parser\n * Copyright (c) 2008 Baptiste Coudurier <baptiste.coudurier@free.fr>\n *\n * This file is part of FFmpeg.\n *\n * FFmpeg is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * FFmpeg is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with FFmpeg; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n */\n\n/**\n * @file\n * DNxHD/VC-3 parser\n */\n\n#include \"parser.h\"\n#include \"dnxhddata.h\"\n\ntypedef struct {\n    ParseContext pc;\n    int cur_byte;\n    int remaining;\n    int w, h;\n} DNXHDParserContext;\n\nstatic int dnxhd_get_hr_frame_size(int cid, int w, int h)\n{\n    int result, i = ff_dnxhd_get_cid_table(cid);\n\n    if (i < 0)\n        return i;\n\n    result = ((h + 15) / 16) * ((w + 15) / 16) * ff_dnxhd_cid_table[i].packet_scale.num / ff_dnxhd_cid_table[i].packet_scale.den;\n    result = (result + 2048) / 4096 * 4096;\n\n    return FFMAX(result, 8192);\n}\n\nstatic int dnxhd_find_frame_end(DNXHDParserContext *dctx,\n                                const uint8_t *buf, int buf_size)\n{\n    ParseContext *pc = &dctx->pc;\n    uint64_t state = pc->state64;\n    int pic_found = pc->frame_start_found;\n    int i = 0;\n\n    if (!pic_found) {\n        for (i = 0; i < buf_size; i++) {\n            state = (state << 8) | buf[i];\n            if (ff_dnxhd_check_header_prefix(state & 0xffffffffff00LL) != 0) {\n                i++;\n                pic_found = 1;\n                dctx->cur_byte = 0;\n                dctx->remaining = 0;\n                break;\n            }\n        }\n    }\n\n    if (pic_found && !dctx->remaining) {\n        if (!buf_size) /* EOF considered as end of frame */\n            return 0;\n        for (; i < buf_size; i++) {\n            dctx->cur_byte++;\n            state = (state << 8) | buf[i];\n\n            if (dctx->cur_byte == 24) {\n                dctx->h = (state >> 32) & 0xFFFF;\n            } else if (dctx->cur_byte == 26) {\n                dctx->w = (state >> 32) & 0xFFFF;\n            } else if (dctx->cur_byte == 42) {\n                int cid = (state >> 32) & 0xFFFFFFFF;\n                int remaining;\n\n                if (cid <= 0)\n                    continue;\n\n                remaining = avpriv_dnxhd_get_frame_size(cid);\n                if (remaining <= 0) {\n                    remaining = dnxhd_get_hr_frame_size(cid, dctx->w, dctx->h);\n                    if (remaining <= 0)\n                        continue;\n                }\n                dctx->remaining = remaining;\n                if (buf_size - i + 47 >= dctx->remaining) {\n                    int remaining = dctx->remaining;\n\n                    pc->frame_start_found = 0;\n                    pc->state64 = -1;\n                    dctx->cur_byte = 0;\n                    dctx->remaining = 0;\n                    return remaining;\n                } else {\n                    dctx->remaining -= buf_size;\n                }\n            }\n        }\n    } else if (pic_found) {\n        if (dctx->remaining > buf_size) {\n            dctx->remaining -= buf_size;\n        } else {\n            int remaining = dctx->remaining;\n\n            pc->frame_start_found = 0;\n            pc->state64 = -1;\n            dctx->cur_byte = 0;\n            dctx->remaining = 0;\n            return remaining;\n        }\n    }\n    pc->frame_start_found = pic_found;\n    pc->state64 = state;\n    return END_NOT_FOUND;\n}\n\nstatic int dnxhd_parse(AVCodecParserContext *s,\n                       AVCodecContext *avctx,\n                       const uint8_t **poutbuf, int *poutbuf_size,\n                       const uint8_t *buf, int buf_size)\n{\n    DNXHDParserContext *dctx = s->priv_data;\n    ParseContext *pc = &dctx->pc;\n    int next;\n\n    if (s->flags & PARSER_FLAG_COMPLETE_FRAMES) {\n        next = buf_size;\n    } else {\n        next = dnxhd_find_frame_end(dctx, buf, buf_size);\n        if (ff_combine_frame(pc, next, &buf, &buf_size) < 0) {\n            *poutbuf      = NULL;\n            *poutbuf_size = 0;\n            return buf_size;\n        }\n    }\n    *poutbuf      = buf;\n    *poutbuf_size = buf_size;\n    return next;\n}\n\nAVCodecParser ff_dnxhd_parser = {\n    .codec_ids      = { AV_CODEC_ID_DNXHD },\n    .priv_data_size = sizeof(DNXHDParserContext),\n    .parser_parse   = dnxhd_parse,\n    .parser_close   = ff_parse_close,\n};\n"], "filenames": ["libavcodec/dnxhd_parser.c"], "buggy_code_start_loc": [83], "buggy_code_end_loc": [93], "fixing_code_start_loc": [84], "fixing_code_end_loc": [96], "type": "CWE-476", "message": "The dnxhd decoder in FFmpeg before 3.2.6, and 3.3.x before 3.3.3 allows remote attackers to cause a denial of service (NULL pointer dereference) via a crafted mov file.", "other": {"cve": {"id": "CVE-2017-9608", "sourceIdentifier": "cve@mitre.org", "published": "2017-12-27T19:29:00.723", "lastModified": "2018-01-17T16:41:30.107", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The dnxhd decoder in FFmpeg before 3.2.6, and 3.3.x before 3.3.3 allows remote attackers to cause a denial of service (NULL pointer dereference) via a crafted mov file."}, {"lang": "es", "value": "El decodificador dnxhd en FFmpeg, en versiones anteriores a la 3.2.6 y versiones 3.3.x anteriores a la 3.3.3, permite que atacantes remotos provoquen una denegaci\u00f3n de servicio (desreferencia de puntero NULL) mediante un archivo mov manipulado."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-476"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.2.6", "matchCriteriaId": "79E6BF1B-8118-4FE5-A59D-A44F74222822"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.3", "versionEndExcluding": "3.3.3", "matchCriteriaId": "BE5FCA41-BE51-4901-B83E-CC9717EC3560"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2017/08/14/1", "source": "cve@mitre.org", "tags": ["Mailing List"]}, {"url": "http://www.openwall.com/lists/oss-security/2017/08/15/8", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/100348", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/FFmpeg/FFmpeg/commit/0a709e2a10b8288a0cc383547924ecfe285cef89", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/FFmpeg/FFmpeg/commit/31c1c0b46a7021802c3d1d18039fca30dba5a14e", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/FFmpeg/FFmpeg/commit/611b35627488a8d0763e75c25ee0875c5b7987dd", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://www.debian.org/security/2017/dsa-3957", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/FFmpeg/FFmpeg/commit/0a709e2a10b8288a0cc383547924ecfe285cef89"}}