{"buggy_code": ["<?php\n\n/*\n * This file is part of Contao.\n *\n * (c) Leo Feyer\n *\n * @license LGPL-3.0-or-later\n */\n\nnamespace Contao;\n\nuse Contao\\CoreBundle\\Exception\\NoLayoutSpecifiedException;\nuse Contao\\CoreBundle\\Framework\\ContaoFramework;\nuse Contao\\CoreBundle\\Routing\\ResponseContext\\HtmlHeadBag\\HtmlHeadBag;\nuse Contao\\CoreBundle\\Routing\\ResponseContext\\JsonLd\\JsonLdManager;\nuse Contao\\CoreBundle\\Routing\\ResponseContext\\ResponseContext;\nuse Contao\\CoreBundle\\Util\\LocaleUtil;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Provide methods to handle a regular front end page.\n */\n#[\\AllowDynamicProperties]\nclass PageRegular extends Frontend\n{\n\t/**\n\t * @var ResponseContext\n\t */\n\tprotected $responseContext;\n\n\t/**\n\t * Generate a regular page\n\t *\n\t * @param PageModel $objPage\n\t * @param boolean   $blnCheckRequest\n\t *\n\t * @deprecated Deprecated since Contao 4.9, to be removed in Contao 5; use\n\t *             the PageRegular::getResponse() method instead\n\t */\n\tpublic function generate($objPage, $blnCheckRequest=false)\n\t{\n\t\ttrigger_deprecation('contao/core-bundle', '4.9', 'Using PageRegular::generate() has been deprecated in Contao 4.9 and will be removed in Contao 5.0. Use the PageRegular::getResponse() method instead.');\n\n\t\t$this->prepare($objPage);\n\n\t\t$this->Template->output($blnCheckRequest);\n\t}\n\n\t/**\n\t * Return a response object\n\t *\n\t * @param PageModel $objPage\n\t * @param boolean   $blnCheckRequest\n\t *\n\t * @return Response\n\t */\n\tpublic function getResponse($objPage, $blnCheckRequest=false)\n\t{\n\t\t$this->prepare($objPage);\n\n\t\t$response = $this->Template->getResponse($blnCheckRequest);\n\n\t\t// Finalize the response context so it cannot be used anymore\n\t\tSystem::getContainer()->get('contao.routing.response_context_accessor')->finalizeCurrentContext($response);\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Generate a regular page\n\t *\n\t * @param PageModel $objPage\n\t *\n\t * @internal Do not call this method in your code. It will be made private in Contao 5.0.\n\t */\n\tprotected function prepare($objPage)\n\t{\n\t\t$GLOBALS['TL_KEYWORDS'] = '';\n\t\t$GLOBALS['TL_LANGUAGE'] = LocaleUtil::formatAsLanguageTag($objPage->language);\n\n\t\t$locale = LocaleUtil::formatAsLocale($objPage->language);\n\n\t\t$container = System::getContainer();\n\t\t$container->get('translator')->setLocale($locale);\n\n\t\t$request = $container->get('request_stack')->getCurrentRequest();\n\t\t$request->setLocale($locale);\n\n\t\t$this->responseContext = $container->get('contao.routing.response_context_factory')->createContaoWebpageResponseContext($objPage);\n\t\t$blnShowUnpublished = $container->get('contao.security.token_checker')->isPreviewMode();\n\n\t\tSystem::loadLanguageFile('default');\n\n\t\t// Static URLs\n\t\t$this->setStaticUrls();\n\n\t\t// Get the page layout\n\t\t$objLayout = $this->getPageLayout($objPage);\n\n\t\t/** @var ThemeModel $objTheme */\n\t\t$objTheme = $objLayout->getRelated('pid');\n\n\t\t// Set the default image densities\n\t\t$container->get('contao.image.picture_factory')->setDefaultDensities($objLayout->defaultImageDensities);\n\t\t$container->get('contao.image.preview_factory')->setDefaultDensities($objLayout->defaultImageDensities);\n\n\t\t// Store the layout ID\n\t\t$objPage->layoutId = $objLayout->id;\n\n\t\t// Set the layout template and template group\n\t\t$objPage->template = $objLayout->template ?: 'fe_page';\n\t\t$objPage->templateGroup = $objTheme->templates ?? null;\n\n\t\t// Minify the markup\n\t\t$objPage->minifyMarkup = $objLayout->minifyMarkup;\n\n\t\t// Initialize the template\n\t\t$this->createTemplate($objPage, $objLayout);\n\n\t\t// Initialize modules and sections\n\t\t$arrCustomSections = array();\n\t\t$arrSections = array('header', 'left', 'right', 'main', 'footer');\n\t\t$arrModules = StringUtil::deserialize($objLayout->modules);\n\t\t$arrModuleIds = array();\n\n\t\t// Filter the disabled modules\n\t\tforeach ($arrModules as $module)\n\t\t{\n\t\t\tif ($module['enable'] ?? null)\n\t\t\t{\n\t\t\t\t$arrModuleIds[] = (int) $module['mod'];\n\t\t\t}\n\t\t}\n\n\t\t// Get all modules in a single DB query\n\t\t$objModules = ModuleModel::findMultipleByIds($arrModuleIds);\n\n\t\tif ($objModules !== null || \\in_array(0, $arrModuleIds, true))\n\t\t{\n\t\t\t$arrMapper = array();\n\n\t\t\t// Create a mapper array in case a module is included more than once (see #4849)\n\t\t\tif ($objModules !== null)\n\t\t\t{\n\t\t\t\twhile ($objModules->next())\n\t\t\t\t{\n\t\t\t\t\t$arrMapper[$objModules->id] = $objModules->current();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tforeach ($arrModules as $arrModule)\n\t\t\t{\n\t\t\t\t// Disabled module\n\t\t\t\tif (!$blnShowUnpublished && !($arrModule['enable'] ?? null))\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Replace the module ID with the module model\n\t\t\t\tif ($arrModule['mod'] > 0 && isset($arrMapper[$arrModule['mod']]))\n\t\t\t\t{\n\t\t\t\t\t$arrModule['mod'] = $arrMapper[$arrModule['mod']];\n\t\t\t\t}\n\n\t\t\t\t// Generate the modules\n\t\t\t\tif (\\in_array($arrModule['col'], $arrSections))\n\t\t\t\t{\n\t\t\t\t\t// Filter active sections (see #3273)\n\t\t\t\t\tif ($objLayout->rows != '2rwh' && $objLayout->rows != '3rw' && $arrModule['col'] == 'header')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($objLayout->cols != '2cll' && $objLayout->cols != '3cl' && $arrModule['col'] == 'left')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($objLayout->cols != '2clr' && $objLayout->cols != '3cl' && $arrModule['col'] == 'right')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($objLayout->rows != '2rwf' && $objLayout->rows != '3rw' && $arrModule['col'] == 'footer')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->Template->{$arrModule['col']} .= $this->getFrontendModule($arrModule['mod'], $arrModule['col']);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (!isset($arrCustomSections[$arrModule['col']]))\n\t\t\t\t\t{\n\t\t\t\t\t\t$arrCustomSections[$arrModule['col']] = '';\n\t\t\t\t\t}\n\n\t\t\t\t\t$arrCustomSections[$arrModule['col']] .= $this->getFrontendModule($arrModule['mod'], $arrModule['col']);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$this->Template->sections = $arrCustomSections;\n\n\t\t// Mark RTL languages (see #7171, #3360)\n\t\tif ((\\ResourceBundle::create($locale, 'ICUDATA', true)['layout']['characters'] ?? null) == 'right-to-left')\n\t\t{\n\t\t\t$this->Template->isRTL = true;\n\t\t}\n\n\t\t// HOOK: modify the page or layout object\n\t\tif (isset($GLOBALS['TL_HOOKS']['generatePage']) && \\is_array($GLOBALS['TL_HOOKS']['generatePage']))\n\t\t{\n\t\t\tforeach ($GLOBALS['TL_HOOKS']['generatePage'] as $callback)\n\t\t\t{\n\t\t\t\t$this->import($callback[0]);\n\t\t\t\t$this->{$callback[0]}->{$callback[1]}($objPage, $objLayout, $this);\n\t\t\t}\n\t\t}\n\n\t\t$headBag = $this->responseContext->get(HtmlHeadBag::class);\n\n\t\t// Set the page title and description AFTER the modules have been generated\n\t\t$this->Template->mainTitle = $objPage->rootPageTitle;\n\t\t$this->Template->pageTitle = htmlspecialchars($headBag->getTitle());\n\n\t\t// Remove shy-entities (see #2709)\n\t\t$this->Template->mainTitle = str_replace('[-]', '', $this->Template->mainTitle);\n\t\t$this->Template->pageTitle = str_replace('[-]', '', $this->Template->pageTitle);\n\n\t\t// Meta robots tag\n\t\t$this->Template->robots = $headBag->getMetaRobots();\n\n\t\t// Canonical\n\t\tif ($objPage->enableCanonical)\n\t\t{\n\t\t\t$this->Template->canonical = $headBag->getCanonicalUriForRequest($request);\n\t\t}\n\n\t\t// Fall back to the default title tag\n\t\tif (!$objLayout->titleTag)\n\t\t{\n\t\t\t$objLayout->titleTag = '{{page::pageTitle}} - {{page::rootPageTitle}}';\n\t\t}\n\n\t\t// Assign the title and description\n\t\t$this->Template->title = strip_tags(System::getContainer()->get('contao.insert_tag.parser')->replaceInline($objLayout->titleTag));\n\t\t$this->Template->description = htmlspecialchars($headBag->getMetaDescription());\n\n\t\t// Body onload and body classes\n\t\t$this->Template->onload = trim($objLayout->onload);\n\t\t$this->Template->class = trim($objLayout->cssClass . ' ' . $objPage->cssClass);\n\n\t\t// Execute AFTER the modules have been generated and create footer scripts first\n\t\t$this->createFooterScripts($objLayout, $objPage);\n\t\t$this->createHeaderScripts($objPage, $objLayout);\n\t}\n\n\t/**\n\t * Get a page layout and return it as database result object\n\t *\n\t * @param PageModel $objPage\n\t *\n\t * @return LayoutModel\n\t */\n\tprotected function getPageLayout($objPage)\n\t{\n\t\t$objLayout = LayoutModel::findByPk($objPage->layout);\n\n\t\t// Die if there is no layout\n\t\tif (null === $objLayout)\n\t\t{\n\t\t\tSystem::getContainer()->get('monolog.logger.contao.error')->error('Could not find layout ID \"' . $objPage->layout . '\"');\n\n\t\t\tthrow new NoLayoutSpecifiedException('No layout specified');\n\t\t}\n\n\t\t$objPage->hasJQuery = $objLayout->addJQuery;\n\t\t$objPage->hasMooTools = $objLayout->addMooTools;\n\n\t\t// HOOK: modify the page or layout object (see #4736)\n\t\tif (isset($GLOBALS['TL_HOOKS']['getPageLayout']) && \\is_array($GLOBALS['TL_HOOKS']['getPageLayout']))\n\t\t{\n\t\t\tforeach ($GLOBALS['TL_HOOKS']['getPageLayout'] as $callback)\n\t\t\t{\n\t\t\t\t$this->import($callback[0]);\n\t\t\t\t$this->{$callback[0]}->{$callback[1]}($objPage, $objLayout, $this);\n\t\t\t}\n\t\t}\n\n\t\treturn $objLayout;\n\t}\n\n\t/**\n\t * Create a new template\n\t *\n\t * @param PageModel   $objPage\n\t * @param LayoutModel $objLayout\n\t */\n\tprotected function createTemplate($objPage, $objLayout)\n\t{\n\t\t$this->Template = new FrontendTemplate($objPage->template);\n\t\t$this->Template->viewport = '';\n\t\t$this->Template->framework = '';\n\n\t\t$arrFramework = StringUtil::deserialize($objLayout->framework);\n\n\t\t// Generate the CSS framework\n\t\tif (\\is_array($arrFramework) && \\in_array('layout.css', $arrFramework))\n\t\t{\n\t\t\t$strFramework = '';\n\n\t\t\tif (\\in_array('responsive.css', $arrFramework))\n\t\t\t{\n\t\t\t\t$this->Template->viewport = '<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">' . \"\\n\";\n\t\t\t}\n\n\t\t\t// Wrapper\n\t\t\tif ($objLayout->static)\n\t\t\t{\n\t\t\t\t$arrSize = StringUtil::deserialize($objLayout->width);\n\n\t\t\t\tif (isset($arrSize['value']) && $arrSize['value'] && $arrSize['value'] >= 0)\n\t\t\t\t{\n\t\t\t\t\t$arrMargin = array('left'=>'0 auto 0 0', 'center'=>'0 auto', 'right'=>'0 0 0 auto');\n\t\t\t\t\t$strFramework .= sprintf('#wrapper{width:%s;margin:%s}', $arrSize['value'] . $arrSize['unit'], $arrMargin[$objLayout->align]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Header\n\t\t\tif ($objLayout->rows == '2rwh' || $objLayout->rows == '3rw')\n\t\t\t{\n\t\t\t\t$arrSize = StringUtil::deserialize($objLayout->headerHeight);\n\n\t\t\t\tif (isset($arrSize['value']) && $arrSize['value'] && $arrSize['value'] >= 0)\n\t\t\t\t{\n\t\t\t\t\t$strFramework .= sprintf('#header{height:%s}', $arrSize['value'] . $arrSize['unit']);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$strContainer = '';\n\n\t\t\t// Left column\n\t\t\tif ($objLayout->cols == '2cll' || $objLayout->cols == '3cl')\n\t\t\t{\n\t\t\t\t$arrSize = StringUtil::deserialize($objLayout->widthLeft);\n\n\t\t\t\tif (isset($arrSize['value']) && $arrSize['value'] && $arrSize['value'] >= 0)\n\t\t\t\t{\n\t\t\t\t\t$strFramework .= sprintf('#left{width:%s;right:%s}', $arrSize['value'] . $arrSize['unit'], $arrSize['value'] . $arrSize['unit']);\n\t\t\t\t\t$strContainer .= sprintf('padding-left:%s;', $arrSize['value'] . $arrSize['unit']);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Right column\n\t\t\tif ($objLayout->cols == '2clr' || $objLayout->cols == '3cl')\n\t\t\t{\n\t\t\t\t$arrSize = StringUtil::deserialize($objLayout->widthRight);\n\n\t\t\t\tif (isset($arrSize['value']) && $arrSize['value'] && $arrSize['value'] >= 0)\n\t\t\t\t{\n\t\t\t\t\t$strFramework .= sprintf('#right{width:%s}', $arrSize['value'] . $arrSize['unit']);\n\t\t\t\t\t$strContainer .= sprintf('padding-right:%s;', $arrSize['value'] . $arrSize['unit']);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Main column\n\t\t\tif ($strContainer)\n\t\t\t{\n\t\t\t\t$strFramework .= sprintf('#container{%s}', substr($strContainer, 0, -1));\n\t\t\t}\n\n\t\t\t// Footer\n\t\t\tif ($objLayout->rows == '2rwf' || $objLayout->rows == '3rw')\n\t\t\t{\n\t\t\t\t$arrSize = StringUtil::deserialize($objLayout->footerHeight);\n\n\t\t\t\tif (isset($arrSize['value']) && $arrSize['value'] && $arrSize['value'] >= 0)\n\t\t\t\t{\n\t\t\t\t\t$strFramework .= sprintf('#footer{height:%s}', $arrSize['value'] . $arrSize['unit']);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add the layout specific CSS\n\t\t\tif ($strFramework)\n\t\t\t{\n\t\t\t\t$this->Template->framework = Template::generateInlineStyle($strFramework) . \"\\n\";\n\t\t\t}\n\t\t}\n\n\t\t// Overwrite the viewport tag (see #6251)\n\t\tif ($objLayout->viewport)\n\t\t{\n\t\t\t$this->Template->viewport = '<meta name=\"viewport\" content=\"' . $objLayout->viewport . '\">' . \"\\n\";\n\t\t}\n\n\t\t$this->Template->mooScripts = '';\n\n\t\t// Make sure TL_JAVASCRIPT exists (see #4890)\n\t\tif (isset($GLOBALS['TL_JAVASCRIPT']) && \\is_array($GLOBALS['TL_JAVASCRIPT']))\n\t\t{\n\t\t\t$arrAppendJs = $GLOBALS['TL_JAVASCRIPT'];\n\t\t\t$GLOBALS['TL_JAVASCRIPT'] = array();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$arrAppendJs = array();\n\t\t\t$GLOBALS['TL_JAVASCRIPT'] = array();\n\t\t}\n\n\t\t// jQuery scripts\n\t\tif ($objLayout->addJQuery)\n\t\t{\n\t\t\t$GLOBALS['TL_JAVASCRIPT'][] = 'assets/jquery/js/jquery.min.js|static';\n\t\t}\n\n\t\t// MooTools scripts\n\t\tif ($objLayout->addMooTools)\n\t\t{\n\t\t\t$GLOBALS['TL_JAVASCRIPT'][] = 'assets/mootools/js/mootools.min.js|static';\n\t\t}\n\n\t\t// Check whether TL_APPEND_JS exists (see #4890)\n\t\tif (!empty($arrAppendJs))\n\t\t{\n\t\t\t$GLOBALS['TL_JAVASCRIPT'] = array_merge($GLOBALS['TL_JAVASCRIPT'], $arrAppendJs);\n\t\t}\n\n\t\t// Initialize the sections\n\t\t$this->Template->header = '';\n\t\t$this->Template->left = '';\n\t\t$this->Template->main = '';\n\t\t$this->Template->right = '';\n\t\t$this->Template->footer = '';\n\n\t\t// Initialize the custom layout sections\n\t\t$this->Template->sections = array();\n\t\t$this->Template->positions = array();\n\n\t\tif ($objLayout->sections)\n\t\t{\n\t\t\t$arrPositions = array();\n\t\t\t$arrSections = StringUtil::deserialize($objLayout->sections);\n\n\t\t\tif (!empty($arrSections) && \\is_array($arrSections))\n\t\t\t{\n\t\t\t\tforeach ($arrSections as $v)\n\t\t\t\t{\n\t\t\t\t\t$arrPositions[$v['position']][$v['id']] = $v;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->Template->positions = $arrPositions;\n\t\t}\n\n\t\t// Add the check_cookies image and the request token script if needed\n\t\tif ($objPage->alwaysLoadFromCache)\n\t\t{\n\t\t\t$GLOBALS['TL_BODY'][] = sprintf('<img src=\"%s\" width=\"1\" height=\"1\" class=\"invisible\" alt aria-hidden=\"true\" onload=\"this.parentNode.removeChild(this)\">', System::getContainer()->get('router')->generate('contao_frontend_check_cookies'));\n\t\t\t$GLOBALS['TL_BODY'][] = sprintf('<script src=\"%s\" async></script>', System::getContainer()->get('router')->generate('contao_frontend_request_token_script'));\n\t\t}\n\n\t\t// Default settings\n\t\t$this->Template->layout = $objLayout;\n\t\t$this->Template->language = $GLOBALS['TL_LANGUAGE'];\n\t\t$this->Template->charset = System::getContainer()->getParameter('kernel.charset');\n\t\t$this->Template->base = Environment::get('base');\n\t\t$this->Template->isRTL = false;\n\t}\n\n\t/**\n\t * Create all header scripts\n\t *\n\t * @param PageModel   $objPage\n\t * @param LayoutModel $objLayout\n\t */\n\tprotected function createHeaderScripts($objPage, $objLayout)\n\t{\n\t\t$strStyleSheets = '';\n\t\t$strCcStyleSheets = '';\n\t\t$arrStyleSheets = StringUtil::deserialize($objLayout->stylesheet);\n\t\t$arrFramework = StringUtil::deserialize($objLayout->framework);\n\n\t\t// Add the Contao CSS framework style sheets\n\t\tif (\\is_array($arrFramework))\n\t\t{\n\t\t\tforeach ($arrFramework as $strFile)\n\t\t\t{\n\t\t\t\tif ($strFile != 'tinymce.css')\n\t\t\t\t{\n\t\t\t\t\t$GLOBALS['TL_FRAMEWORK_CSS'][] = 'assets/contao/css/' . basename($strFile, '.css') . '.min.css';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Make sure TL_USER_CSS is set\n\t\tif (!isset($GLOBALS['TL_USER_CSS']) || !\\is_array($GLOBALS['TL_USER_CSS']))\n\t\t{\n\t\t\t$GLOBALS['TL_USER_CSS'] = array();\n\t\t}\n\n\t\t// User style sheets\n\t\tif (\\is_array($arrStyleSheets) && isset($arrStyleSheets[0]))\n\t\t{\n\t\t\t$objStylesheets = StyleSheetModel::findByIds($arrStyleSheets);\n\n\t\t\tif ($objStylesheets !== null)\n\t\t\t{\n\t\t\t\twhile ($objStylesheets->next())\n\t\t\t\t{\n\t\t\t\t\t$media = implode(',', StringUtil::deserialize($objStylesheets->media));\n\n\t\t\t\t\t// Overwrite the media type with a custom media query\n\t\t\t\t\tif ($objStylesheets->mediaQuery)\n\t\t\t\t\t{\n\t\t\t\t\t\t$media = $objStylesheets->mediaQuery;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Style sheets with a CC or a combination of font-face and media-type != all cannot be aggregated (see #5216)\n\t\t\t\t\tif ($objStylesheets->cc || ($objStylesheets->hasFontFace && $media != 'all'))\n\t\t\t\t\t{\n\t\t\t\t\t\t$strStyleSheet = '';\n\n\t\t\t\t\t\t// External style sheet\n\t\t\t\t\t\tif ($objStylesheets->type == 'external')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$objFile = FilesModel::findByPk($objStylesheets->singleSRC);\n\n\t\t\t\t\t\t\tif ($objFile !== null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$strStyleSheet = Template::generateStyleTag(Controller::addFilesUrlTo($objFile->path), $media, null);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$strStyleSheet = Template::generateStyleTag(Controller::addAssetsUrlTo('assets/css/' . $objStylesheets->name . '.css'), $media, max($objStylesheets->tstamp, $objStylesheets->tstamp2, $objStylesheets->tstamp3));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ($objStylesheets->cc)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$strStyleSheet = '<!--[' . $objStylesheets->cc . ']>' . $strStyleSheet . '<![endif]-->';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$strCcStyleSheets .= $strStyleSheet . \"\\n\";\n\t\t\t\t\t}\n\t\t\t\t\telseif ($objStylesheets->type == 'external')\n\t\t\t\t\t{\n\t\t\t\t\t\t$objFile = FilesModel::findByPk($objStylesheets->singleSRC);\n\n\t\t\t\t\t\tif ($objFile !== null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$GLOBALS['TL_USER_CSS'][] = $objFile->path . '|' . $media . '|static';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$GLOBALS['TL_USER_CSS'][] = 'assets/css/' . $objStylesheets->name . '.css|' . $media . '|static|' . max($objStylesheets->tstamp, $objStylesheets->tstamp2, $objStylesheets->tstamp3);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$arrExternal = StringUtil::deserialize($objLayout->external);\n\n\t\t// External style sheets\n\t\tif (!empty($arrExternal) && \\is_array($arrExternal))\n\t\t{\n\t\t\t// Get the file entries from the database\n\t\t\t$objFiles = FilesModel::findMultipleByUuids($arrExternal);\n\t\t\t$projectDir = System::getContainer()->getParameter('kernel.project_dir');\n\n\t\t\tif ($objFiles !== null)\n\t\t\t{\n\t\t\t\t$arrFiles = array();\n\n\t\t\t\twhile ($objFiles->next())\n\t\t\t\t{\n\t\t\t\t\tif (file_exists($projectDir . '/' . $objFiles->path))\n\t\t\t\t\t{\n\t\t\t\t\t\t$arrFiles[] = $objFiles->path . '|static';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Inject the external style sheets before or after the internal ones (see #6937)\n\t\t\t\tif ($objLayout->loadingOrder == 'external_first')\n\t\t\t\t{\n\t\t\t\t\tarray_splice($GLOBALS['TL_USER_CSS'], 0, 0, $arrFiles);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tarray_splice($GLOBALS['TL_USER_CSS'], \\count($GLOBALS['TL_USER_CSS']), 0, $arrFiles);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$nonce = ContaoFramework::getNonce();\n\n\t\t// Add a placeholder for dynamic style sheets (see #4203)\n\t\t$strStyleSheets .= \"[[TL_CSS_$nonce]]\";\n\n\t\t// Always add conditional style sheets at the end\n\t\t$strStyleSheets .= $strCcStyleSheets;\n\n\t\t// Add a placeholder for dynamic <head> tags (see #4203)\n\t\t$strHeadTags = \"[[TL_HEAD_$nonce]]\";\n\n\t\t// Add the analytics scripts\n\t\tif ($objLayout->analytics)\n\t\t{\n\t\t\t$arrAnalytics = StringUtil::deserialize($objLayout->analytics, true);\n\n\t\t\tforeach ($arrAnalytics as $strTemplate)\n\t\t\t{\n\t\t\t\tif ($strTemplate)\n\t\t\t\t{\n\t\t\t\t\t$objTemplate = new FrontendTemplate($strTemplate);\n\t\t\t\t\t$strHeadTags .= $objTemplate->parse();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the user <head> tags\n\t\tif ($strHead = trim($objLayout->head ?? ''))\n\t\t{\n\t\t\t$strHeadTags .= $strHead . \"\\n\";\n\t\t}\n\n\t\t$this->Template->stylesheets = $strStyleSheets;\n\t\t$this->Template->head = $strHeadTags;\n\t}\n\n\t/**\n\t * Create all footer scripts\n\t *\n\t * @param LayoutModel $objLayout\n\t * @param PageModel   $objPage\n\t *\n\t * @todo Change the method signature to ($objPage, $objLayout) in Contao 5.0\n\t */\n\tprotected function createFooterScripts($objLayout, $objPage = null)\n\t{\n\t\t$strScripts = '';\n\t\t$nonce = ContaoFramework::getNonce();\n\n\t\t// jQuery\n\t\tif ($objLayout->addJQuery)\n\t\t{\n\t\t\t$arrJquery = StringUtil::deserialize($objLayout->jquery, true);\n\n\t\t\tforeach ($arrJquery as $strTemplate)\n\t\t\t{\n\t\t\t\tif ($strTemplate)\n\t\t\t\t{\n\t\t\t\t\t$objTemplate = new FrontendTemplate($strTemplate);\n\t\t\t\t\t$strScripts .= $objTemplate->parse();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add a placeholder for dynamic scripts (see #4203)\n\t\t\t$strScripts .= \"[[TL_JQUERY_$nonce]]\";\n\t\t}\n\n\t\t// MooTools\n\t\tif ($objLayout->addMooTools)\n\t\t{\n\t\t\t$arrMootools = StringUtil::deserialize($objLayout->mootools, true);\n\n\t\t\tforeach ($arrMootools as $strTemplate)\n\t\t\t{\n\t\t\t\tif ($strTemplate)\n\t\t\t\t{\n\t\t\t\t\t$objTemplate = new FrontendTemplate($strTemplate);\n\t\t\t\t\t$strScripts .= $objTemplate->parse();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add a placeholder for dynamic scripts (see #4203)\n\t\t\t$strScripts .= \"[[TL_MOOTOOLS_$nonce]]\";\n\t\t}\n\n\t\t// Add the framework-agnostic JavaScripts\n\t\tif ($objLayout->scripts)\n\t\t{\n\t\t\t$arrScripts = StringUtil::deserialize($objLayout->scripts, true);\n\n\t\t\tforeach ($arrScripts as $strTemplate)\n\t\t\t{\n\t\t\t\tif ($strTemplate)\n\t\t\t\t{\n\t\t\t\t\t$objTemplate = new FrontendTemplate($strTemplate);\n\t\t\t\t\t$strScripts .= $objTemplate->parse();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add a placeholder for dynamic scripts (see #4203, #5583)\n\t\t$strScripts .= \"[[TL_BODY_$nonce]]\";\n\n\t\t// Add the external JavaScripts\n\t\t$arrExternalJs = StringUtil::deserialize($objLayout->externalJs);\n\n\t\t// Get the file entries from the database\n\t\t$objFiles = FilesModel::findMultipleByUuids($arrExternalJs);\n\t\t$projectDir = System::getContainer()->getParameter('kernel.project_dir');\n\n\t\tif ($objFiles !== null)\n\t\t{\n\t\t\twhile ($objFiles->next())\n\t\t\t{\n\t\t\t\tif (file_exists($projectDir . '/' . $objFiles->path))\n\t\t\t\t{\n\t\t\t\t\t$strScripts .= Template::generateScriptTag($objFiles->path, false, null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the custom JavaScript\n\t\tif ($objLayout->script)\n\t\t{\n\t\t\t$strScripts .= \"\\n\" . trim($objLayout->script) . \"\\n\";\n\t\t}\n\n\t\t$this->Template->mootools = $strScripts;\n\n\t\t$this->Template->jsonLdScripts = function ()\n\t\t{\n\t\t\tif (!$this->responseContext->isInitialized(JsonLdManager::class))\n\t\t\t{\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t/** @var JsonLdManager $jsonLdManager */\n\t\t\t$jsonLdManager = $this->responseContext->get(JsonLdManager::class);\n\n\t\t\treturn $jsonLdManager->collectFinalScriptFromGraphs();\n\t\t};\n\t}\n}\n\nclass_alias(PageRegular::class, 'PageRegular');\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of Contao.\n *\n * (c) Leo Feyer\n *\n * @license LGPL-3.0-or-later\n */\n\nnamespace Contao;\n\nuse Contao\\CoreBundle\\Exception\\NoLayoutSpecifiedException;\nuse Contao\\CoreBundle\\Framework\\ContaoFramework;\nuse Contao\\CoreBundle\\Routing\\ResponseContext\\HtmlHeadBag\\HtmlHeadBag;\nuse Contao\\CoreBundle\\Routing\\ResponseContext\\JsonLd\\JsonLdManager;\nuse Contao\\CoreBundle\\Routing\\ResponseContext\\ResponseContext;\nuse Contao\\CoreBundle\\Util\\LocaleUtil;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Provide methods to handle a regular front end page.\n */\n#[\\AllowDynamicProperties]\nclass PageRegular extends Frontend\n{\n\t/**\n\t * @var ResponseContext\n\t */\n\tprotected $responseContext;\n\n\t/**\n\t * Generate a regular page\n\t *\n\t * @param PageModel $objPage\n\t * @param boolean   $blnCheckRequest\n\t *\n\t * @deprecated Deprecated since Contao 4.9, to be removed in Contao 5; use\n\t *             the PageRegular::getResponse() method instead\n\t */\n\tpublic function generate($objPage, $blnCheckRequest=false)\n\t{\n\t\ttrigger_deprecation('contao/core-bundle', '4.9', 'Using PageRegular::generate() has been deprecated in Contao 4.9 and will be removed in Contao 5.0. Use the PageRegular::getResponse() method instead.');\n\n\t\t$this->prepare($objPage);\n\n\t\t$this->Template->output($blnCheckRequest);\n\t}\n\n\t/**\n\t * Return a response object\n\t *\n\t * @param PageModel $objPage\n\t * @param boolean   $blnCheckRequest\n\t *\n\t * @return Response\n\t */\n\tpublic function getResponse($objPage, $blnCheckRequest=false)\n\t{\n\t\t$this->prepare($objPage);\n\n\t\t$response = $this->Template->getResponse($blnCheckRequest);\n\n\t\t// Finalize the response context so it cannot be used anymore\n\t\tSystem::getContainer()->get('contao.routing.response_context_accessor')->finalizeCurrentContext($response);\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Generate a regular page\n\t *\n\t * @param PageModel $objPage\n\t *\n\t * @internal Do not call this method in your code. It will be made private in Contao 5.0.\n\t */\n\tprotected function prepare($objPage)\n\t{\n\t\t$GLOBALS['TL_KEYWORDS'] = '';\n\t\t$GLOBALS['TL_LANGUAGE'] = LocaleUtil::formatAsLanguageTag($objPage->language);\n\n\t\t$locale = LocaleUtil::formatAsLocale($objPage->language);\n\n\t\t$container = System::getContainer();\n\t\t$container->get('translator')->setLocale($locale);\n\n\t\t$request = $container->get('request_stack')->getCurrentRequest();\n\t\t$request->setLocale($locale);\n\n\t\t$this->responseContext = $container->get('contao.routing.response_context_factory')->createContaoWebpageResponseContext($objPage);\n\t\t$blnShowUnpublished = $container->get('contao.security.token_checker')->isPreviewMode();\n\n\t\tSystem::loadLanguageFile('default');\n\n\t\t// Static URLs\n\t\t$this->setStaticUrls();\n\n\t\t// Get the page layout\n\t\t$objLayout = $this->getPageLayout($objPage);\n\n\t\t/** @var ThemeModel $objTheme */\n\t\t$objTheme = $objLayout->getRelated('pid');\n\n\t\t// Set the default image densities\n\t\t$container->get('contao.image.picture_factory')->setDefaultDensities($objLayout->defaultImageDensities);\n\t\t$container->get('contao.image.preview_factory')->setDefaultDensities($objLayout->defaultImageDensities);\n\n\t\t// Store the layout ID\n\t\t$objPage->layoutId = $objLayout->id;\n\n\t\t// Set the layout template and template group\n\t\t$objPage->template = $objLayout->template ?: 'fe_page';\n\t\t$objPage->templateGroup = $objTheme->templates ?? null;\n\n\t\t// Minify the markup\n\t\t$objPage->minifyMarkup = $objLayout->minifyMarkup;\n\n\t\t// Initialize the template\n\t\t$this->createTemplate($objPage, $objLayout);\n\n\t\t// Initialize modules and sections\n\t\t$arrCustomSections = array();\n\t\t$arrSections = array('header', 'left', 'right', 'main', 'footer');\n\t\t$arrModules = StringUtil::deserialize($objLayout->modules);\n\t\t$arrModuleIds = array();\n\n\t\t// Filter the disabled modules\n\t\tforeach ($arrModules as $module)\n\t\t{\n\t\t\tif ($module['enable'] ?? null)\n\t\t\t{\n\t\t\t\t$arrModuleIds[] = (int) $module['mod'];\n\t\t\t}\n\t\t}\n\n\t\t// Get all modules in a single DB query\n\t\t$objModules = ModuleModel::findMultipleByIds($arrModuleIds);\n\n\t\tif ($objModules !== null || \\in_array(0, $arrModuleIds, true))\n\t\t{\n\t\t\t$arrMapper = array();\n\n\t\t\t// Create a mapper array in case a module is included more than once (see #4849)\n\t\t\tif ($objModules !== null)\n\t\t\t{\n\t\t\t\twhile ($objModules->next())\n\t\t\t\t{\n\t\t\t\t\t$arrMapper[$objModules->id] = $objModules->current();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tforeach ($arrModules as $arrModule)\n\t\t\t{\n\t\t\t\t// Disabled module\n\t\t\t\tif (!$blnShowUnpublished && !($arrModule['enable'] ?? null))\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Replace the module ID with the module model\n\t\t\t\tif ($arrModule['mod'] > 0 && isset($arrMapper[$arrModule['mod']]))\n\t\t\t\t{\n\t\t\t\t\t$arrModule['mod'] = $arrMapper[$arrModule['mod']];\n\t\t\t\t}\n\n\t\t\t\t// Generate the modules\n\t\t\t\tif (\\in_array($arrModule['col'], $arrSections))\n\t\t\t\t{\n\t\t\t\t\t// Filter active sections (see #3273)\n\t\t\t\t\tif ($objLayout->rows != '2rwh' && $objLayout->rows != '3rw' && $arrModule['col'] == 'header')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($objLayout->cols != '2cll' && $objLayout->cols != '3cl' && $arrModule['col'] == 'left')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($objLayout->cols != '2clr' && $objLayout->cols != '3cl' && $arrModule['col'] == 'right')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($objLayout->rows != '2rwf' && $objLayout->rows != '3rw' && $arrModule['col'] == 'footer')\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->Template->{$arrModule['col']} .= $this->getFrontendModule($arrModule['mod'], $arrModule['col']);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (!isset($arrCustomSections[$arrModule['col']]))\n\t\t\t\t\t{\n\t\t\t\t\t\t$arrCustomSections[$arrModule['col']] = '';\n\t\t\t\t\t}\n\n\t\t\t\t\t$arrCustomSections[$arrModule['col']] .= $this->getFrontendModule($arrModule['mod'], $arrModule['col']);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$this->Template->sections = $arrCustomSections;\n\n\t\t// Mark RTL languages (see #7171, #3360)\n\t\tif ((\\ResourceBundle::create($locale, 'ICUDATA', true)['layout']['characters'] ?? null) == 'right-to-left')\n\t\t{\n\t\t\t$this->Template->isRTL = true;\n\t\t}\n\n\t\t// HOOK: modify the page or layout object\n\t\tif (isset($GLOBALS['TL_HOOKS']['generatePage']) && \\is_array($GLOBALS['TL_HOOKS']['generatePage']))\n\t\t{\n\t\t\tforeach ($GLOBALS['TL_HOOKS']['generatePage'] as $callback)\n\t\t\t{\n\t\t\t\t$this->import($callback[0]);\n\t\t\t\t$this->{$callback[0]}->{$callback[1]}($objPage, $objLayout, $this);\n\t\t\t}\n\t\t}\n\n\t\t$headBag = $this->responseContext->get(HtmlHeadBag::class);\n\n\t\t// Set the page title and description AFTER the modules have been generated\n\t\t$this->Template->mainTitle = $objPage->rootPageTitle;\n\t\t$this->Template->pageTitle = htmlspecialchars($headBag->getTitle());\n\n\t\t// Remove shy-entities (see #2709)\n\t\t$this->Template->mainTitle = str_replace('[-]', '', $this->Template->mainTitle);\n\t\t$this->Template->pageTitle = str_replace('[-]', '', $this->Template->pageTitle);\n\n\t\t// Meta robots tag\n\t\t$this->Template->robots = htmlspecialchars($headBag->getMetaRobots());\n\n\t\t// Canonical\n\t\tif ($objPage->enableCanonical)\n\t\t{\n\t\t\t$this->Template->canonical = htmlspecialchars($headBag->getCanonicalUriForRequest($request));\n\t\t}\n\n\t\t// Fall back to the default title tag\n\t\tif (!$objLayout->titleTag)\n\t\t{\n\t\t\t$objLayout->titleTag = '{{page::pageTitle}} - {{page::rootPageTitle}}';\n\t\t}\n\n\t\t// Assign the title and description\n\t\t$this->Template->title = strip_tags(System::getContainer()->get('contao.insert_tag.parser')->replaceInline($objLayout->titleTag));\n\t\t$this->Template->description = htmlspecialchars($headBag->getMetaDescription());\n\n\t\t// Body onload and body classes\n\t\t$this->Template->onload = trim($objLayout->onload);\n\t\t$this->Template->class = trim($objLayout->cssClass . ' ' . $objPage->cssClass);\n\n\t\t// Execute AFTER the modules have been generated and create footer scripts first\n\t\t$this->createFooterScripts($objLayout, $objPage);\n\t\t$this->createHeaderScripts($objPage, $objLayout);\n\t}\n\n\t/**\n\t * Get a page layout and return it as database result object\n\t *\n\t * @param PageModel $objPage\n\t *\n\t * @return LayoutModel\n\t */\n\tprotected function getPageLayout($objPage)\n\t{\n\t\t$objLayout = LayoutModel::findByPk($objPage->layout);\n\n\t\t// Die if there is no layout\n\t\tif (null === $objLayout)\n\t\t{\n\t\t\tSystem::getContainer()->get('monolog.logger.contao.error')->error('Could not find layout ID \"' . $objPage->layout . '\"');\n\n\t\t\tthrow new NoLayoutSpecifiedException('No layout specified');\n\t\t}\n\n\t\t$objPage->hasJQuery = $objLayout->addJQuery;\n\t\t$objPage->hasMooTools = $objLayout->addMooTools;\n\n\t\t// HOOK: modify the page or layout object (see #4736)\n\t\tif (isset($GLOBALS['TL_HOOKS']['getPageLayout']) && \\is_array($GLOBALS['TL_HOOKS']['getPageLayout']))\n\t\t{\n\t\t\tforeach ($GLOBALS['TL_HOOKS']['getPageLayout'] as $callback)\n\t\t\t{\n\t\t\t\t$this->import($callback[0]);\n\t\t\t\t$this->{$callback[0]}->{$callback[1]}($objPage, $objLayout, $this);\n\t\t\t}\n\t\t}\n\n\t\treturn $objLayout;\n\t}\n\n\t/**\n\t * Create a new template\n\t *\n\t * @param PageModel   $objPage\n\t * @param LayoutModel $objLayout\n\t */\n\tprotected function createTemplate($objPage, $objLayout)\n\t{\n\t\t$this->Template = new FrontendTemplate($objPage->template);\n\t\t$this->Template->viewport = '';\n\t\t$this->Template->framework = '';\n\n\t\t$arrFramework = StringUtil::deserialize($objLayout->framework);\n\n\t\t// Generate the CSS framework\n\t\tif (\\is_array($arrFramework) && \\in_array('layout.css', $arrFramework))\n\t\t{\n\t\t\t$strFramework = '';\n\n\t\t\tif (\\in_array('responsive.css', $arrFramework))\n\t\t\t{\n\t\t\t\t$this->Template->viewport = '<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">' . \"\\n\";\n\t\t\t}\n\n\t\t\t// Wrapper\n\t\t\tif ($objLayout->static)\n\t\t\t{\n\t\t\t\t$arrSize = StringUtil::deserialize($objLayout->width);\n\n\t\t\t\tif (isset($arrSize['value']) && $arrSize['value'] && $arrSize['value'] >= 0)\n\t\t\t\t{\n\t\t\t\t\t$arrMargin = array('left'=>'0 auto 0 0', 'center'=>'0 auto', 'right'=>'0 0 0 auto');\n\t\t\t\t\t$strFramework .= sprintf('#wrapper{width:%s;margin:%s}', $arrSize['value'] . $arrSize['unit'], $arrMargin[$objLayout->align]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Header\n\t\t\tif ($objLayout->rows == '2rwh' || $objLayout->rows == '3rw')\n\t\t\t{\n\t\t\t\t$arrSize = StringUtil::deserialize($objLayout->headerHeight);\n\n\t\t\t\tif (isset($arrSize['value']) && $arrSize['value'] && $arrSize['value'] >= 0)\n\t\t\t\t{\n\t\t\t\t\t$strFramework .= sprintf('#header{height:%s}', $arrSize['value'] . $arrSize['unit']);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$strContainer = '';\n\n\t\t\t// Left column\n\t\t\tif ($objLayout->cols == '2cll' || $objLayout->cols == '3cl')\n\t\t\t{\n\t\t\t\t$arrSize = StringUtil::deserialize($objLayout->widthLeft);\n\n\t\t\t\tif (isset($arrSize['value']) && $arrSize['value'] && $arrSize['value'] >= 0)\n\t\t\t\t{\n\t\t\t\t\t$strFramework .= sprintf('#left{width:%s;right:%s}', $arrSize['value'] . $arrSize['unit'], $arrSize['value'] . $arrSize['unit']);\n\t\t\t\t\t$strContainer .= sprintf('padding-left:%s;', $arrSize['value'] . $arrSize['unit']);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Right column\n\t\t\tif ($objLayout->cols == '2clr' || $objLayout->cols == '3cl')\n\t\t\t{\n\t\t\t\t$arrSize = StringUtil::deserialize($objLayout->widthRight);\n\n\t\t\t\tif (isset($arrSize['value']) && $arrSize['value'] && $arrSize['value'] >= 0)\n\t\t\t\t{\n\t\t\t\t\t$strFramework .= sprintf('#right{width:%s}', $arrSize['value'] . $arrSize['unit']);\n\t\t\t\t\t$strContainer .= sprintf('padding-right:%s;', $arrSize['value'] . $arrSize['unit']);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Main column\n\t\t\tif ($strContainer)\n\t\t\t{\n\t\t\t\t$strFramework .= sprintf('#container{%s}', substr($strContainer, 0, -1));\n\t\t\t}\n\n\t\t\t// Footer\n\t\t\tif ($objLayout->rows == '2rwf' || $objLayout->rows == '3rw')\n\t\t\t{\n\t\t\t\t$arrSize = StringUtil::deserialize($objLayout->footerHeight);\n\n\t\t\t\tif (isset($arrSize['value']) && $arrSize['value'] && $arrSize['value'] >= 0)\n\t\t\t\t{\n\t\t\t\t\t$strFramework .= sprintf('#footer{height:%s}', $arrSize['value'] . $arrSize['unit']);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add the layout specific CSS\n\t\t\tif ($strFramework)\n\t\t\t{\n\t\t\t\t$this->Template->framework = Template::generateInlineStyle($strFramework) . \"\\n\";\n\t\t\t}\n\t\t}\n\n\t\t// Overwrite the viewport tag (see #6251)\n\t\tif ($objLayout->viewport)\n\t\t{\n\t\t\t$this->Template->viewport = '<meta name=\"viewport\" content=\"' . $objLayout->viewport . '\">' . \"\\n\";\n\t\t}\n\n\t\t$this->Template->mooScripts = '';\n\n\t\t// Make sure TL_JAVASCRIPT exists (see #4890)\n\t\tif (isset($GLOBALS['TL_JAVASCRIPT']) && \\is_array($GLOBALS['TL_JAVASCRIPT']))\n\t\t{\n\t\t\t$arrAppendJs = $GLOBALS['TL_JAVASCRIPT'];\n\t\t\t$GLOBALS['TL_JAVASCRIPT'] = array();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$arrAppendJs = array();\n\t\t\t$GLOBALS['TL_JAVASCRIPT'] = array();\n\t\t}\n\n\t\t// jQuery scripts\n\t\tif ($objLayout->addJQuery)\n\t\t{\n\t\t\t$GLOBALS['TL_JAVASCRIPT'][] = 'assets/jquery/js/jquery.min.js|static';\n\t\t}\n\n\t\t// MooTools scripts\n\t\tif ($objLayout->addMooTools)\n\t\t{\n\t\t\t$GLOBALS['TL_JAVASCRIPT'][] = 'assets/mootools/js/mootools.min.js|static';\n\t\t}\n\n\t\t// Check whether TL_APPEND_JS exists (see #4890)\n\t\tif (!empty($arrAppendJs))\n\t\t{\n\t\t\t$GLOBALS['TL_JAVASCRIPT'] = array_merge($GLOBALS['TL_JAVASCRIPT'], $arrAppendJs);\n\t\t}\n\n\t\t// Initialize the sections\n\t\t$this->Template->header = '';\n\t\t$this->Template->left = '';\n\t\t$this->Template->main = '';\n\t\t$this->Template->right = '';\n\t\t$this->Template->footer = '';\n\n\t\t// Initialize the custom layout sections\n\t\t$this->Template->sections = array();\n\t\t$this->Template->positions = array();\n\n\t\tif ($objLayout->sections)\n\t\t{\n\t\t\t$arrPositions = array();\n\t\t\t$arrSections = StringUtil::deserialize($objLayout->sections);\n\n\t\t\tif (!empty($arrSections) && \\is_array($arrSections))\n\t\t\t{\n\t\t\t\tforeach ($arrSections as $v)\n\t\t\t\t{\n\t\t\t\t\t$arrPositions[$v['position']][$v['id']] = $v;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->Template->positions = $arrPositions;\n\t\t}\n\n\t\t// Add the check_cookies image and the request token script if needed\n\t\tif ($objPage->alwaysLoadFromCache)\n\t\t{\n\t\t\t$GLOBALS['TL_BODY'][] = sprintf('<img src=\"%s\" width=\"1\" height=\"1\" class=\"invisible\" alt aria-hidden=\"true\" onload=\"this.parentNode.removeChild(this)\">', System::getContainer()->get('router')->generate('contao_frontend_check_cookies'));\n\t\t\t$GLOBALS['TL_BODY'][] = sprintf('<script src=\"%s\" async></script>', System::getContainer()->get('router')->generate('contao_frontend_request_token_script'));\n\t\t}\n\n\t\t// Default settings\n\t\t$this->Template->layout = $objLayout;\n\t\t$this->Template->language = $GLOBALS['TL_LANGUAGE'];\n\t\t$this->Template->charset = System::getContainer()->getParameter('kernel.charset');\n\t\t$this->Template->base = Environment::get('base');\n\t\t$this->Template->isRTL = false;\n\t}\n\n\t/**\n\t * Create all header scripts\n\t *\n\t * @param PageModel   $objPage\n\t * @param LayoutModel $objLayout\n\t */\n\tprotected function createHeaderScripts($objPage, $objLayout)\n\t{\n\t\t$strStyleSheets = '';\n\t\t$strCcStyleSheets = '';\n\t\t$arrStyleSheets = StringUtil::deserialize($objLayout->stylesheet);\n\t\t$arrFramework = StringUtil::deserialize($objLayout->framework);\n\n\t\t// Add the Contao CSS framework style sheets\n\t\tif (\\is_array($arrFramework))\n\t\t{\n\t\t\tforeach ($arrFramework as $strFile)\n\t\t\t{\n\t\t\t\tif ($strFile != 'tinymce.css')\n\t\t\t\t{\n\t\t\t\t\t$GLOBALS['TL_FRAMEWORK_CSS'][] = 'assets/contao/css/' . basename($strFile, '.css') . '.min.css';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Make sure TL_USER_CSS is set\n\t\tif (!isset($GLOBALS['TL_USER_CSS']) || !\\is_array($GLOBALS['TL_USER_CSS']))\n\t\t{\n\t\t\t$GLOBALS['TL_USER_CSS'] = array();\n\t\t}\n\n\t\t// User style sheets\n\t\tif (\\is_array($arrStyleSheets) && isset($arrStyleSheets[0]))\n\t\t{\n\t\t\t$objStylesheets = StyleSheetModel::findByIds($arrStyleSheets);\n\n\t\t\tif ($objStylesheets !== null)\n\t\t\t{\n\t\t\t\twhile ($objStylesheets->next())\n\t\t\t\t{\n\t\t\t\t\t$media = implode(',', StringUtil::deserialize($objStylesheets->media));\n\n\t\t\t\t\t// Overwrite the media type with a custom media query\n\t\t\t\t\tif ($objStylesheets->mediaQuery)\n\t\t\t\t\t{\n\t\t\t\t\t\t$media = $objStylesheets->mediaQuery;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Style sheets with a CC or a combination of font-face and media-type != all cannot be aggregated (see #5216)\n\t\t\t\t\tif ($objStylesheets->cc || ($objStylesheets->hasFontFace && $media != 'all'))\n\t\t\t\t\t{\n\t\t\t\t\t\t$strStyleSheet = '';\n\n\t\t\t\t\t\t// External style sheet\n\t\t\t\t\t\tif ($objStylesheets->type == 'external')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$objFile = FilesModel::findByPk($objStylesheets->singleSRC);\n\n\t\t\t\t\t\t\tif ($objFile !== null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$strStyleSheet = Template::generateStyleTag(Controller::addFilesUrlTo($objFile->path), $media, null);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$strStyleSheet = Template::generateStyleTag(Controller::addAssetsUrlTo('assets/css/' . $objStylesheets->name . '.css'), $media, max($objStylesheets->tstamp, $objStylesheets->tstamp2, $objStylesheets->tstamp3));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ($objStylesheets->cc)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$strStyleSheet = '<!--[' . $objStylesheets->cc . ']>' . $strStyleSheet . '<![endif]-->';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$strCcStyleSheets .= $strStyleSheet . \"\\n\";\n\t\t\t\t\t}\n\t\t\t\t\telseif ($objStylesheets->type == 'external')\n\t\t\t\t\t{\n\t\t\t\t\t\t$objFile = FilesModel::findByPk($objStylesheets->singleSRC);\n\n\t\t\t\t\t\tif ($objFile !== null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$GLOBALS['TL_USER_CSS'][] = $objFile->path . '|' . $media . '|static';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$GLOBALS['TL_USER_CSS'][] = 'assets/css/' . $objStylesheets->name . '.css|' . $media . '|static|' . max($objStylesheets->tstamp, $objStylesheets->tstamp2, $objStylesheets->tstamp3);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$arrExternal = StringUtil::deserialize($objLayout->external);\n\n\t\t// External style sheets\n\t\tif (!empty($arrExternal) && \\is_array($arrExternal))\n\t\t{\n\t\t\t// Get the file entries from the database\n\t\t\t$objFiles = FilesModel::findMultipleByUuids($arrExternal);\n\t\t\t$projectDir = System::getContainer()->getParameter('kernel.project_dir');\n\n\t\t\tif ($objFiles !== null)\n\t\t\t{\n\t\t\t\t$arrFiles = array();\n\n\t\t\t\twhile ($objFiles->next())\n\t\t\t\t{\n\t\t\t\t\tif (file_exists($projectDir . '/' . $objFiles->path))\n\t\t\t\t\t{\n\t\t\t\t\t\t$arrFiles[] = $objFiles->path . '|static';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Inject the external style sheets before or after the internal ones (see #6937)\n\t\t\t\tif ($objLayout->loadingOrder == 'external_first')\n\t\t\t\t{\n\t\t\t\t\tarray_splice($GLOBALS['TL_USER_CSS'], 0, 0, $arrFiles);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tarray_splice($GLOBALS['TL_USER_CSS'], \\count($GLOBALS['TL_USER_CSS']), 0, $arrFiles);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$nonce = ContaoFramework::getNonce();\n\n\t\t// Add a placeholder for dynamic style sheets (see #4203)\n\t\t$strStyleSheets .= \"[[TL_CSS_$nonce]]\";\n\n\t\t// Always add conditional style sheets at the end\n\t\t$strStyleSheets .= $strCcStyleSheets;\n\n\t\t// Add a placeholder for dynamic <head> tags (see #4203)\n\t\t$strHeadTags = \"[[TL_HEAD_$nonce]]\";\n\n\t\t// Add the analytics scripts\n\t\tif ($objLayout->analytics)\n\t\t{\n\t\t\t$arrAnalytics = StringUtil::deserialize($objLayout->analytics, true);\n\n\t\t\tforeach ($arrAnalytics as $strTemplate)\n\t\t\t{\n\t\t\t\tif ($strTemplate)\n\t\t\t\t{\n\t\t\t\t\t$objTemplate = new FrontendTemplate($strTemplate);\n\t\t\t\t\t$strHeadTags .= $objTemplate->parse();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the user <head> tags\n\t\tif ($strHead = trim($objLayout->head ?? ''))\n\t\t{\n\t\t\t$strHeadTags .= $strHead . \"\\n\";\n\t\t}\n\n\t\t$this->Template->stylesheets = $strStyleSheets;\n\t\t$this->Template->head = $strHeadTags;\n\t}\n\n\t/**\n\t * Create all footer scripts\n\t *\n\t * @param LayoutModel $objLayout\n\t * @param PageModel   $objPage\n\t *\n\t * @todo Change the method signature to ($objPage, $objLayout) in Contao 5.0\n\t */\n\tprotected function createFooterScripts($objLayout, $objPage = null)\n\t{\n\t\t$strScripts = '';\n\t\t$nonce = ContaoFramework::getNonce();\n\n\t\t// jQuery\n\t\tif ($objLayout->addJQuery)\n\t\t{\n\t\t\t$arrJquery = StringUtil::deserialize($objLayout->jquery, true);\n\n\t\t\tforeach ($arrJquery as $strTemplate)\n\t\t\t{\n\t\t\t\tif ($strTemplate)\n\t\t\t\t{\n\t\t\t\t\t$objTemplate = new FrontendTemplate($strTemplate);\n\t\t\t\t\t$strScripts .= $objTemplate->parse();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add a placeholder for dynamic scripts (see #4203)\n\t\t\t$strScripts .= \"[[TL_JQUERY_$nonce]]\";\n\t\t}\n\n\t\t// MooTools\n\t\tif ($objLayout->addMooTools)\n\t\t{\n\t\t\t$arrMootools = StringUtil::deserialize($objLayout->mootools, true);\n\n\t\t\tforeach ($arrMootools as $strTemplate)\n\t\t\t{\n\t\t\t\tif ($strTemplate)\n\t\t\t\t{\n\t\t\t\t\t$objTemplate = new FrontendTemplate($strTemplate);\n\t\t\t\t\t$strScripts .= $objTemplate->parse();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add a placeholder for dynamic scripts (see #4203)\n\t\t\t$strScripts .= \"[[TL_MOOTOOLS_$nonce]]\";\n\t\t}\n\n\t\t// Add the framework-agnostic JavaScripts\n\t\tif ($objLayout->scripts)\n\t\t{\n\t\t\t$arrScripts = StringUtil::deserialize($objLayout->scripts, true);\n\n\t\t\tforeach ($arrScripts as $strTemplate)\n\t\t\t{\n\t\t\t\tif ($strTemplate)\n\t\t\t\t{\n\t\t\t\t\t$objTemplate = new FrontendTemplate($strTemplate);\n\t\t\t\t\t$strScripts .= $objTemplate->parse();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add a placeholder for dynamic scripts (see #4203, #5583)\n\t\t$strScripts .= \"[[TL_BODY_$nonce]]\";\n\n\t\t// Add the external JavaScripts\n\t\t$arrExternalJs = StringUtil::deserialize($objLayout->externalJs);\n\n\t\t// Get the file entries from the database\n\t\t$objFiles = FilesModel::findMultipleByUuids($arrExternalJs);\n\t\t$projectDir = System::getContainer()->getParameter('kernel.project_dir');\n\n\t\tif ($objFiles !== null)\n\t\t{\n\t\t\twhile ($objFiles->next())\n\t\t\t{\n\t\t\t\tif (file_exists($projectDir . '/' . $objFiles->path))\n\t\t\t\t{\n\t\t\t\t\t$strScripts .= Template::generateScriptTag($objFiles->path, false, null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the custom JavaScript\n\t\tif ($objLayout->script)\n\t\t{\n\t\t\t$strScripts .= \"\\n\" . trim($objLayout->script) . \"\\n\";\n\t\t}\n\n\t\t$this->Template->mootools = $strScripts;\n\n\t\t$this->Template->jsonLdScripts = function ()\n\t\t{\n\t\t\tif (!$this->responseContext->isInitialized(JsonLdManager::class))\n\t\t\t{\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t/** @var JsonLdManager $jsonLdManager */\n\t\t\t$jsonLdManager = $this->responseContext->get(JsonLdManager::class);\n\n\t\t\treturn $jsonLdManager->collectFinalScriptFromGraphs();\n\t\t};\n\t}\n}\n\nclass_alias(PageRegular::class, 'PageRegular');\n"], "filenames": ["core-bundle/src/Resources/contao/pages/PageRegular.php"], "buggy_code_start_loc": [233], "buggy_code_end_loc": [239], "fixing_code_start_loc": [233], "fixing_code_end_loc": [239], "type": "CWE-79", "message": "Contao is a powerful open source CMS that allows you to create professional websites and scalable web applications. In versions of Contao prior to 4.13.3 it is possible to inject code into the canonical tag. As a workaround users may disable canonical tags in the root page settings.", "other": {"cve": {"id": "CVE-2022-24899", "sourceIdentifier": "security-advisories@github.com", "published": "2022-05-06T00:15:07.757", "lastModified": "2022-05-13T19:34:09.817", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Contao is a powerful open source CMS that allows you to create professional websites and scalable web applications. In versions of Contao prior to 4.13.3 it is possible to inject code into the canonical tag. As a workaround users may disable canonical tags in the root page settings."}, {"lang": "es", "value": "Contao es un potente CMS de c\u00f3digo abierto que permite crear sitios web profesionales y aplicaciones web escalables. En las versiones de Contao anteriores a 4.13.3 es posible inyectar c\u00f3digo en la etiqueta can\u00f3nica. Como medida de mitigaci\u00f3n, los usuarios pueden deshabilitar las etiquetas can\u00f3nicas en la configuraci\u00f3n de la p\u00e1gina root"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:contao:contao:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.13.0", "versionEndIncluding": "4.13.2", "matchCriteriaId": "3C0C3045-3E49-4FAB-AFA4-43D72F3FC346"}]}]}], "references": [{"url": "https://contao.org/en/security-advisories/cross-site-scripting-via-canonical-url.html", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/contao/contao/commit/199206849a87ddd0fa5cf674eb3c58292fd8366c", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/contao/contao/security/advisories/GHSA-m8x6-6r63-qvj2", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/contao/contao/commit/199206849a87ddd0fa5cf674eb3c58292fd8366c"}}