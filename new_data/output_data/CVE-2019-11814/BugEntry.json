{"buggy_code": ["String.prototype.ucfirst = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}\n\nif (!String.prototype.startsWith) {\n  String.prototype.startsWith = function(searchString, position) {\n    position = position || 0;\n    return this.indexOf(searchString, position) === position;\n  };\n}\n\nfunction stringToRGB(str){\n    var hash = 0;\n    if (str.length == 0) return hash;\n    for (i = 0; i < str.length; i++) {\n        hash = ((hash<<5)-hash) + str.charCodeAt(i);\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    var c = (hash & 0x00FFFFFF)\n        .toString(16)\n        .toUpperCase();\n\n    return \"#\" + \"00000\".substring(0, 6 - c.length) + c;\n}\n\nfunction deleteObject(type, action, id, event) {\n    var destination = 'attributes';\n    var alternateDestinations = ['shadow_attributes', 'template_elements', 'taxonomies', 'galaxy_clusters', 'objects', 'object_references'];\n    if (alternateDestinations.indexOf(type) > -1) destination = type;\n    else destination = type;\n    url = \"/\" + destination + \"/\" + action + \"/\" + id;\n    $.get(url, function(data) {\n        openPopup(\"#confirmation_box\");\n        $(\"#confirmation_box\").html(data);\n    });\n}\n\nfunction quickDeleteSighting(id, rawId, context) {\n    url = \"/sightings/quickDelete/\" + id + \"/\" + rawId + \"/\" + context;\n    $.get(url, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction fetchAddSightingForm(type, attribute_id, page, onvalue) {\n    var url = \"/sightings/quickAdd/\" + attribute_id + \"/\" + type;\n    if (onvalue) {\n        url = url + \"/1\";\n    } else {\n        url = url + \"/0\";\n    }\n    $.get(url, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction flexibleAddSighting(clicked, type, attribute_id, event_id, value, page, placement) {\n    $clicked = $(clicked);\n    var html = '<div>'\n        + '<button class=\"btn btn-primary\" onclick=\"addSighting(\\'' + type + '\\', \\'' + attribute_id + '\\', \\'' + event_id + '\\', \\'' + page + '\\')\">This attribute</button>'\n        + '<button class=\"btn btn-primary\" style=\"margin-left:5px;\" onclick=\"fetchAddSightingForm(\\'' + type + '\\', \\'' + attribute_id + '\\', \\'' + page + '\\', true)\">Global value</button>'\n        + '</div>';\n    openPopover(clicked, html, true, placement);\n}\n\nfunction publishPopup(id, type) {\n    var action = \"alert\";\n    if (type == \"publish\") action = \"publish\";\n    if (type == \"unpublish\") action = \"unpublish\";\n    var destination = 'attributes';\n    $.get( \"/events/\" + action + \"/\" + id, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction delegatePopup(id) {\n    simplePopup(\"/event_delegations/delegateEvent/\" + id);\n}\n\nfunction genericPopup(url, popupTarget, callback) {\n    $.get(url, function(data) {\n        $(popupTarget).html(data);\n        $(popupTarget).fadeIn();\n        left = ($(window).width() / 2) - ($(popupTarget).width() / 2);\n        $(popupTarget).css({'left': left + 'px'});\n        $(\"#gray_out\").fadeIn();\n        if (callback !== undefined) {\n            callback();\n        }\n    });\n}\n\nfunction screenshotPopup(url, title) {\n    if (!url.startsWith('data:image/')) {\n        url = url.slice(0, -1);\n    }\n    popupHtml = '<it class=\"fa fa-spin fa-spinner\" style=\"font-size: xx-large; color: white; position: fixed; left: 50%; top: 50%;\"></it>'\n    popupHtml += '<img class=\"screenshot_box-content hidden\" src=\"' + url + '\" id=\"screenshot-image\" title=\"' + title + '\" alt=\"' + title + '\" onload=\"$(this).show(); $(this).parent().find(\\'.fa-spinner\\').remove();\"/>';\n    popupHtml += '<div class=\"close-icon useCursorPointer\" onClick=\"closeScreenshot();\"></div>';\n    if (!url.startsWith('data:image/')) {\n        popupHtml += '<a class=\"close-icon useCursorPointer fa fa-expand\" style=\"right: 20px; background: black; color: white; text-decoration: none;\" target=\"_blank\" href=\"' + url + '\" ></a>';\n    }\n    popupHtml += '<div style=\"height: 20px;\"></div>'; // see bottom of image for large one\n    $('#screenshot_box').html(popupHtml);\n    $('#screenshot_box').css({\n        display: 'block',\n        top: (document.documentElement.scrollTop + 100) + 'px'\n    });\n    $(\"#gray_out\").fadeIn();\n}\n\nfunction submitPublish(id, type) {\n    $(\"#PromptForm\").submit();\n}\n\nfunction editTemplateElement(type, id) {\n    simplePopup(\"/template_elements/edit/\" + type + \"/\" + id);\n}\n\nfunction cancelPrompt(isolated) {\n    if (isolated == undefined) {\n        $(\"#gray_out\").fadeOut();\n    }\n    $(\"#confirmation_box\").fadeOut();\n    $(\"#confirmation_box\").empty();\n    $('.have-a-popover').popover('destroy');\n}\n\nfunction submitDeletion(context_id, action, type, id) {\n    var context = 'event';\n    if (type == 'template_elements') context = 'template';\n    var formData = $('#PromptForm').serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            if (type == 'eventGraph') {\n                showMessage('success', 'Network has been deleted');\n                reset_graph_history();\n            } else {\n                updateIndex(context_id, context);\n                handleGenericAjaxResponse(data);\n            }\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/\" + type + \"/\" + action + \"/\" + id,\n    });\n}\n\nfunction removeSighting(caller) {\n    var id = $(caller).data('id');\n    var rawid = $(caller).data('rawid');\n    var context = $(caller).data('context');\n    if (context != 'attribute') {\n        context = 'event';\n    }\n    var formData = $('#PromptForm').serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data);\n            var org = \"/\" + $('#org_id').text();\n            updateIndex(id, 'event');\n            $.get( \"/sightings/listSightings/\" + rawid + \"/\" + context + org, function(data) {\n                $(\"#sightingsData\").html(data);\n            });\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/sightings/quickDelete/\" + id + \"/\" + rawid + \"/\" + context,\n    });\n}\n\nfunction toggleSetting(e, setting, id) {\n    e.preventDefault();\n    e.stopPropagation();\n    switch (setting) {\n    case 'warninglist_enable':\n        formID = '#WarninglistIndexForm';\n        dataDiv = '#WarninglistData';\n        replacementForm = '/warninglists/getToggleField/';\n        searchString = 'enabled';\n        break;\n    case 'favourite_tag':\n        formID = '#FavouriteTagIndexForm';\n        dataDiv = '#FavouriteTagData';\n        replacementForm = '/favourite_tags/getToggleField/';\n        searchString = 'Adding';\n        break;\n    case 'activate_object_template':\n        formID = '#ObjectTemplateIndexForm';\n        dataDiv = '#ObjectTemplateData';\n        replacementForm = '/ObjectTemplates/getToggleField/';\n        searchString = 'activated';\n        break;\n    case 'noticelist_enable':\n        formID = '#NoticelistIndexForm';\n        dataDiv = '#NoticelistData';\n        replacementForm = '/noticelists/getToggleField/';\n        searchString = 'enabled';\n        break;\n    }\n    $(dataDiv).val(id);\n    var formData = $(formID).serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            var result = data;\n            if (result.success) {\n                var setting = false;\n                if (result.success.indexOf(searchString) > -1) setting = true;\n                $('#checkBox_' + id).prop('checked', setting);\n            }\n            handleGenericAjaxResponse(data);\n        },\n        complete:function() {\n            $.get(replacementForm, function(data) {\n                $('#hiddenFormDiv').html(data);\n            });\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        error:function() {\n            handleGenericAjaxResponse({'saved':false, 'errors':['Request failed due to an unexpected error.']});\n        },\n        type:\"post\",\n        cache: false,\n        url: $(formID).attr('action'),\n    });\n}\n\nfunction initiatePasswordReset(id) {\n    $.get( \"/users/initiatePasswordReset/\" + id, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction submitPasswordReset(id) {\n    var formData = $('#PromptForm').serialize();\n    var url = \"/users/initiatePasswordReset/\" + id;\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data);\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:url,\n    });\n}\n\nfunction submitMessageForm(url, form, target) {\n    if (!$('#PostMessage').val()) {\n        showMessage(\"fail\", \"Cannot submit empty message.\");\n    } else {\n        submitGenericForm(url, form, target);\n    }\n}\n\nfunction submitGenericForm(url, form, target) {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: $('#' + form).serialize(),\n        success:function (data, textStatus) {\n            $('#top').html(data);\n            showMessage(\"success\", \"Message added.\");\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"post\",\n        cache: false,\n        url:url,\n    });\n}\n\nfunction acceptObject(type, id, event) {\n    name = '#ShadowAttribute_' + id + '_accept';\n    var formData = $(name).serialize();\n    $.ajax({\n        data: formData,\n        success:function (data, textStatus) {\n            updateIndex(event, 'event');\n            eventUnpublish();\n            handleGenericAjaxResponse(data);\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/shadow_attributes/accept/\" + id,\n    });\n}\n\nfunction toggleCorrelation(id, skip_reload) {\n    if (typeof skip_reload === \"undefined\") {\n        skip_reload = false;\n    }\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: $('#PromptForm').serialize(),\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data, skip_reload);\n            $(\"#correlation_toggle_\" + id).prop('checked', !$(\"#correlation_toggle_\" + id).is(':checked'));\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:'/attributes/toggleCorrelation/' + id,\n    });\n}\n\nfunction toggleToIDS(id, skip_reload) {\n    if (typeof skip_reload === \"undefined\") {\n        skip_reload = false;\n    }\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: $('#PromptForm').serialize(),\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data, skip_reload);\n            $(\"#toids_toggle_\" + id).prop('checked', !$(\"#toids_toggle_\" + id).is(':checked'));\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:'/attributes/editField/' + id ,\n    });\n}\n\nfunction eventUnpublish() {\n    $('.publishButtons').show();\n    $('.exportButtons').hide();\n    $('.published').hide();\n    $('.notPublished').show();\n}\n\nfunction updateIndex(id, context, newPage) {\n    if (typeof newPage !== 'undefined') page = newPage;\n    var url, div;\n    if (context == 'event') {\n        if (typeof currentUri == 'undefined') {\n            location.reload();\n            return true;\n        }\n        url = currentUri;\n        div = \"#attributes_div\";\n    }\n    if (context == 'template') {\n        url = \"/template_elements/index/\" + id;\n        div = \"#templateElements\";\n    }\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(div).html(data);\n            if (typeof genericPopupCallback !== \"undefined\") {\n                genericPopupCallback(\"success\");\n            } else {\n                console.log(\"genericPopupCallback function not defined\");\n            }\n        },\n        url: url,\n    });\n}\n\nfunction updateAttributeFieldOnSuccess(name, type, id, field, event) {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            if (field != 'timestamp') {\n                $(\".loading\").show();\n            }\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            if (field != 'timestamp') {\n                $(\".loading\").hide();\n                $(name + '_solid').html(data);\n                $(name + '_placeholder').empty();\n                $(name + '_solid').show();\n            } else {\n                $('#' + type + '_' + id + '_' + 'timestamp_solid').html(data);\n            }\n        },\n        url:\"/attributes/fetchViewValue/\" + id + \"/\" + field,\n    });\n}\n\nfunction activateField(type, id, field, event) {\n    resetForms();\n    if (type == 'denyForm') return;\n    var objectType = 'attributes';\n    if (type == 'ShadowAttribute') {\n        objectType = 'shadow_attributes';\n    }\n    var name = '#' + type + '_' + id + '_' + field;\n    var container_name = '#Attribute_' + id + '_' + field;\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(container_name + '_placeholder').html(data);\n            postActivationScripts(name, type, id, field, event);\n        },\n        url:\"/\" + objectType + \"/fetchEditForm/\" + id + \"/\" + field,\n    });\n}\n\n\nfunction submitQuickTag(form) {\n    $('#' + form).submit();\n}\n\n//if someone clicks an inactive field, replace it with the hidden form field. Also, focus it and bind a focusout event, so that it gets saved if the user clicks away.\n//If a user presses enter, submit the form\nfunction postActivationScripts(name, type, id, field, event) {\n    $(name + '_field').focus();\n    inputFieldButtonActive(name + '_field');\n    if (field == 'value' || field == 'comment') {\n        autoresize($(name + '_field')[0]);\n        $(name + '_field').on('keyup', function () {\n            autoresize(this);\n        });\n    }\n    $(name + '_form').submit(function(e){\n        e.preventDefault();\n        submitForm(type, id, field, event);\n        return false;\n    });\n\n    $(name + '_form').bind(\"focusout\", function() {\n        inputFieldButtonPassive(name + '_field');\n    });\n\n    $(name + '_form').bind(\"focusin\", function(){\n        inputFieldButtonActive(name + '_field');\n    });\n\n    $(name + '_form').bind(\"keydown\", function(e) {\n        if (e.ctrlKey && (e.keyCode == 13 || e.keyCode == 10)) {\n            submitForm(type, id, field, event);\n        }\n    });\n    $(name + '_field').closest('.inline-input-container').children('.inline-input-accept').bind('click', function() {\n        submitForm(type, id, field, event);\n    });\n\n    $(name + '_field').closest('.inline-input-container').children('.inline-input-decline').bind('click', function() {\n        resetForms();\n    });\n\n    $(name + '_solid').hide();\n}\n\nfunction quickEditHover(td, type, id, field, event) {\n    var $td = $(td);\n    $td.find('#quickEditButton').remove(); // clean all similar if exist\n    var $div = $('<div id=\"quickEditButton\"></div>');\n    $div.addClass('quick-edit-row-div');\n    var $span = $('<span></span>');\n    $span.addClass('fa-as-icon fa fa-edit');\n    $span.css('font-size', '12px');\n    $div.append($span);\n    $td.find(\"[id*=_solid]\").append($div);\n\n    $span.click(function() {\n        activateField(type, id, field, event);\n    });\n\n    $td.off('mouseleave').on('mouseleave', function() {\n        $div.remove();\n    });\n}\n\nfunction addSighting(type, attribute_id, event_id, page) {\n    $('#Sighting_' + attribute_id + '_type').val(type);\n    $.ajax({\n        data: $('#Sighting_' + attribute_id).closest(\"form\").serialize(),\n        cache: false,\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data);\n            var result = data;\n            if (result.saved == true) {\n                $('.sightingsCounter').each(function( counter ) {\n                    $(this).html(parseInt($(this).html()) + 1);\n                });\n                if (typeof currentUri == 'undefined') {\n                    location.reload();\n                } else {\n                    updateIndex(event_id, 'event');\n                }\n            }\n        },\n        error:function() {\n            showMessage('fail', 'Request failed for an unknown reason.');\n            updateIndex(context, 'event');\n        },\n        type:\"post\",\n        url:\"/sightings/add/\" + attribute_id\n    });\n}\n\nfunction resetForms() {\n    $('.inline-field-solid').show();\n    $('.inline-field-placeholder').empty();\n}\n\nfunction inputFieldButtonActive(selector) {\n    $(selector).closest('.inline-input-container').children('.inline-input-accept').removeClass('inline-input-passive').addClass('inline-input-active');\n    $(selector).closest('.inline-input-container').children('.inline-input-decline').removeClass('inline-input-passive').addClass('inline-input-active');\n}\n\nfunction inputFieldButtonPassive(selector) {\n    $(selector).closest('.inline-input-container').children('.inline-input-accept').addClass('inline-input-passive').removeClass('inline-input-active');\n    $(selector).closest('.inline-input-container').children('.inline-input-daecline').addClass('inline-input-passive').removeClass('inline-input-active');\n}\n\nfunction autoresize(textarea) {\n    textarea.style.height = '20px';\n    textarea.style.height = (textarea.scrollHeight) + 'px';\n}\n\n// submit the form - this can be triggered by unfocusing the activated form field or by submitting the form (hitting enter)\n// after the form is submitted, intercept the response and act on it\nfunction submitForm(type, id, field, context) {\n    var object_type = 'attributes';\n    var action = \"editField\";\n    var name = '#' + type + '_' + id + '_' + field;\n    if (type == 'ShadowAttribute') {\n        object_type = 'shadow_attributes';\n    }\n    $.ajax({\n        data: $(name + '_field').closest(\"form\").serialize(),\n        cache: false,\n        success:function (data, textStatus) {\n            handleAjaxEditResponse(data, name, type, id, field, context);\n        },\n        error:function() {\n            showMessage('fail', 'Request failed for an unknown reason.');\n            updateIndex(context, 'event');\n        },\n        type:\"post\",\n        url:\"/\" + object_type + \"/\" + action + \"/\" + id\n    });\n    $(name + '_field').unbind(\"keyup\");\n    $(name + '_form').unbind(\"focusout\");\n    return false;\n};\n\nfunction quickSubmitTagForm(selected_tag_ids, addData) {\n    var event_id = addData.id;\n    var formData = fetchFormDataAjax(\"/events/addTag/\" + event_id);\n    $('#temp').html(formData);\n    $('#EventTag').val(JSON.stringify(selected_tag_ids));\n    $.ajax({\n        data: $('#EventAddTagForm').serialize(),\n        cache: false,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            loadEventTags(event_id);\n            loadGalaxies(event_id, 'event');\n            handleGenericAjaxResponse(data);\n        },\n        error:function() {\n            showMessage('fail', 'Could not add tag.');\n            loadEventTags(event_id);\n            loadGalaxies(event_id, 'event');\n        },\n        complete:function() {\n            $('#temp').empty();\n            $(\"#popover_form\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n            $(\".loading\").hide();\n        },\n        type:\"post\",\n        url:\"/events/addTag/\" + event_id\n    });\n    $('#temp').remove();\n    return false;\n}\n\nfunction quickSubmitAttributeTagForm(selected_tag_ids, addData) {\n    var attribute_id = addData.id;\n    var formData = fetchFormDataAjax(\"/attributes/addTag/\" + attribute_id);\n    $('#temp').html(formData);\n    $('#AttributeTag').val(JSON.stringify(selected_tag_ids));\n    if (attribute_id == 'selected') {\n        $('#AttributeAttributeIds').val(getSelected());\n    }\n    $.ajax({\n        data: $('#AttributeAddTagForm').serialize(),\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            if (attribute_id == 'selected') {\n                updateIndex(0, 'event');\n            } else {\n                loadAttributeTags(attribute_id);\n                loadGalaxies(attribute_id, 'attribute');\n            }\n            handleGenericAjaxResponse(data);\n        },\n        error:function() {\n            showMessage('fail', 'Could not add tag.');\n            loadAttributeTags(attribute_id);\n            loadGalaxies(attribute_id, 'attribute');\n        },\n        complete:function() {\n            $(\"#popover_form\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n            $(\".loading\").hide();\n        },\n        type:\"post\",\n        url:\"/attributes/addTag/\" + attribute_id\n    });\n    $('#temp').remove();\n    return false;\n}\n\nfunction quickSubmitTagCollectionTagForm(selected_tag_ids, addData) {\n    var tag_collection_id = addData.id;\n    var formData = fetchFormDataAjax(\"/tag_collections/addTag/\" + tag_collection_id);\n    $('#temp').html(formData);\n    $('#TagCollectionTag').val(JSON.stringify(selected_tag_ids));\n    $.ajax({\n        data: $('#TagCollectionAddTagForm').serialize(),\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data);\n            refreshTagCollectionRow(tag_collection_id);\n        },\n        error:function() {\n            showMessage('fail', 'Could not add tag.');\n            loadTagCollectionTags(tag_collection_id);\n        },\n        complete:function() {\n            $(\"#popover_form\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n            $(\".loading\").hide();\n        },\n        type:\"post\",\n        url:\"/tag_collections/addTag/\" + tag_collection_id\n    });\n    $('#temp').remove();\n    return false;\n}\n\nfunction refreshTagCollectionRow(tag_collection_id) {\n    $.ajax({\n        type:\"get\",\n        url:\"/tag_collections/getRow/\" + tag_collection_id,\n        error:function() {\n            showMessage('fail', 'Could not fetch updates to the modified row.');\n        },\n        success: function (data, textStatus) {\n            $('[data-row-id=\"' + tag_collection_id + '\"]').replaceWith(data);\n        }\n    });\n\n}\n\nfunction handleAjaxEditResponse(data, name, type, id, field, event) {\n    responseArray = data;\n    if (type == 'Attribute') {\n        if (responseArray.saved) {\n            showMessage('success', responseArray.success);\n            updateAttributeFieldOnSuccess(name, type, id, field, event);\n            updateAttributeFieldOnSuccess(name, type, id, 'timestamp', event);\n            eventUnpublish();\n        } else {\n            showMessage('fail', 'Validation failed: ' + responseArray.errors.value);\n            updateAttributeFieldOnSuccess(name, type, id, field, event);\n        }\n    }\n    if (type == 'ShadowAttribute') {\n        updateIndex(event, 'event');\n    }\n    if (responseArray.hasOwnProperty('check_publish')) {\n        checkAndSetPublishedInfo();\n    }\n}\n\nfunction handleGenericAjaxResponse(data, skip_reload) {\n    if (typeof skip_reload === \"undefined\") {\n        skip_reload = false;\n    }\n    if (typeof data == 'string') {\n        responseArray = JSON.parse(data);\n    } else {\n        responseArray = data;\n    }\n\n    // remove remaining popovers\n    cancelPrompt();\n    // in case the origin node has been deleted (e.g. tags)\n    $('.popover').remove();\n\n    if (responseArray.saved) {\n        showMessage('success', responseArray.success);\n        if (responseArray.hasOwnProperty('check_publish')) {\n            checkAndSetPublishedInfo(skip_reload);\n        }\n        return true;\n    } else {\n        showMessage('fail', responseArray.errors);\n        return false;\n    }\n}\n\nfunction toggleAllAttributeCheckboxes() {\n    if ($(\".select_all\").is(\":checked\")) {\n        $(\".select_attribute\").prop(\"checked\", true);\n        $(\".select_proposal\").prop(\"checked\", true);\n    } else {\n        $(\".select_attribute\").prop(\"checked\", false);\n        $(\".select_proposal\").prop(\"checked\", false);\n    }\n}\n\nfunction toggleAllCheckboxes() {\n    if ($(\".select_all\").is(\":checked\")) {\n        $(\".select\").prop(\"checked\", true);\n    } else {\n        $(\".select\").prop(\"checked\", false);\n    }\n}\n\nfunction toggleAllTaxonomyCheckboxes() {\n    if ($(\".select_all\").is(\":checked\")) {\n        $(\".select_taxonomy\").prop(\"checked\", true);\n    } else {\n        $(\".select_taxonomy\").prop(\"checked\", false);\n    }\n}\n\nfunction attributeListAnyAttributeCheckBoxesChecked() {\n    if ($('.select_attribute:checked').length > 0) $('.mass-select').removeClass('hidden');\n    else $('.mass-select').addClass('hidden');\n}\n\nfunction listCheckboxesChecked() {\n    if ($('.select:checked').length > 0) $('.mass-select').removeClass('hidden');\n    else $('.mass-select').addClass('hidden');\n}\n\nfunction attributeListAnyProposalCheckBoxesChecked() {\n    if ($('.select_proposal:checked').length > 0) $('.mass-proposal-select').removeClass('hidden');\n    else $('.mass-proposal-select').addClass('hidden');\n}\n\nfunction taxonomyListAnyCheckBoxesChecked() {\n    if ($('.select_taxonomy:checked').length > 0) $('.mass-select').show();\n    else $('.mass-select').hide();\n}\n\nfunction multiSelectDeleteEvents() {\n    var selected = [];\n    $(\".select\").each(function() {\n        if ($(this).is(\":checked\")) {\n            var temp = $(this).data(\"id\");\n            if (temp != null) {\n                selected.push(temp);\n            }\n        }\n    });\n    $.get(\"/events/delete/\" + JSON.stringify(selected), function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction multiSelectToggleFeeds(on, cache) {\n    var selected = [];\n    $(\".select\").each(function() {\n        if ($(this).is(\":checked\")) {\n            var temp = $(this).data(\"id\");\n            if (temp != null) {\n                selected.push(temp);\n            }\n        }\n    });\n    $.get(\"/feeds/toggleSelected/\" + on + \"/\" + cache + \"/\" + JSON.stringify(selected), function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction multiSelectAction(event, context) {\n    var settings = {\n            deleteAttributes: {\n                confirmation: \"Are you sure you want to delete all selected attributes?\",\n                controller: \"attributes\",\n                camelCase: \"Attribute\",\n                alias: \"attribute\",\n                action: \"delete\"\n            },\n            acceptProposals: {\n                confirmation: \"Are you sure you want to accept all selected proposals?\",\n                controller: \"shadow_attributes\",\n                camelCase: \"ShadowAttribute\",\n                alias: \"proposal\",\n                action: \"accept\"\n            },\n            discardProposals: {\n                confirmation: \"Are you sure you want to discard all selected proposals?\",\n                controller: \"shadow_attributes\",\n                camelCase: \"ShadowAttribute\",\n                alias: \"proposal\",\n                action: \"discard\"\n            },\n    };\n    var answer = confirm(\"Are you sure you want to \" + settings[context][\"action\"] + \" all selected \" + settings[context][\"alias\"] + \"s?\");\n    if (answer) {\n        var selected = [];\n        $(\".select_\" + settings[context][\"alias\"]).each(function() {\n            if ($(this).is(\":checked\")) {\n                var temp= $(this).data(\"id\");\n                selected.push(temp);\n            }\n        });\n        $('#' + settings[context][\"camelCase\"] + 'Ids' + settings[context][\"action\"].ucfirst()).attr('value', JSON.stringify(selected));\n        var formData = $('#' + settings[context][\"action\"] + '_selected').serialize();\n        if (context == 'deleteAttributes') {\n            var url = $('#delete_selected').attr('action');\n            console.log(url);\n        } else {\n            var url = \"/\" + settings[context][\"controller\"] + \"/\" + settings[context][\"action\"] + \"Selected/\" + event;\n        }\n        $.ajax({\n            data: formData,\n            cache: false,\n            type:\"POST\",\n            url: url,\n            success:function (data, textStatus) {\n                updateIndex(event, 'event');\n                var result = handleGenericAjaxResponse(data);\n                if (settings[context][\"action\"] != \"discard\" && result == true) eventUnpublish();\n            },\n        });\n    }\n    return false;\n}\n\nfunction editSelectedAttributes(event) {\n    var selectedAttributeIds = getSelected();\n    simplePopup(\"/attributes/editSelected/\" + event + \"/\" + selectedAttributeIds);\n}\n\nfunction addSelectedTaxonomies(taxonomy) {\n    $.get(\"/taxonomies/taxonomyMassConfirmation/\"+taxonomy, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction hideSelectedTags(taxonomy) {\n\t$.get(\"/taxonomies/taxonomyMassHide/\"+taxonomy, function(data) {\n\t\t$(\"#confirmation_box\").html(data);\n\t\topenPopup(\"#confirmation_box\");\n\t});\n}\n\nfunction unhideSelectedTags(taxonomy) {\n\t$.get(\"/taxonomies/taxonomyMassUnhide/\"+taxonomy, function(data) {\n\t\t$(\"#confirmation_box\").html(data);\n\t\topenPopup(\"#confirmation_box\");\n\t});\n}\n\nfunction submitMassTaxonomyTag() {\n    $('#PromptForm').submit();\n}\n\nfunction submitMassEventDelete() {\n    $('#PromptForm').trigger('submit');\n    event.preventDefault();\n}\n\nfunction getSelected() {\n    var selected = [];\n    $(\".select_attribute\").each(function() {\n        if ($(this).is(\":checked\")) {\n            var test = $(this).data(\"id\");\n            selected.push(test);\n        }\n    });\n    return JSON.stringify(selected);\n}\n\nfunction getSelectedTaxonomyNames() {\n    var selected = [];\n    $(\".select_taxonomy\").each(function() {\n        if ($(this).is(\":checked\")) {\n            var row = $(this).data(\"id\");\n            var temp = $('#tag_' + row).html();\n            temp = $(\"<div/>\").html(temp).text();\n            selected.push(temp);\n        }\n    });\n    $('#TaxonomyNameList').val(JSON.stringify(selected));\n}\n\nfunction loadEventTags(id) {\n    $.ajax({\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".eventTagContainer\").html(data);\n        },\n        url:\"/tags/showEventTag/\" + id,\n    });\n}\n\nfunction loadGalaxies(id, scope) {\n    $.ajax({\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            if (scope == 'event') {\n                $(\"#galaxies_div\").html(data);\n            } else if (scope == 'attribute') {\n                $(\"#attribute_\" + id + \"_galaxy\").html(data);\n            }\n        },\n        url:\"/galaxies/showGalaxies/\" + id + \"/\" + scope,\n    });\n}\n\nfunction loadTagCollectionTags(id) {\n    $.ajax({\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".tagCollectionTagContainer\").html(data);\n        },\n        url:\"/tags/showEventTag/\" + id,\n    });\n}\n\nfunction removeEventTag(event, tag) {\n    var answer = confirm(\"Are you sure you want to remove this tag from the event?\");\n    if (answer) {\n        var formData = $('#removeTag_' + tag).serialize();\n        $.ajax({\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n            },\n            data: formData,\n            type:\"POST\",\n            cache: false,\n            url:\"/events/removeTag/\" + event + '/' + tag,\n            success:function (data, textStatus) {\n                loadEventTags(event);\n                handleGenericAjaxResponse(data);\n            },\n            complete:function() {\n                $(\".loading\").hide();\n            }\n        });\n    }\n    return false;\n}\n\nfunction loadAttributeTags(id) {\n    $.ajax({\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\"#Attribute_\"+id+\"_tr .attributeTagContainer\").html(data);\n        },\n        url:\"/tags/showAttributeTag/\" + id\n    });\n}\n\nfunction removeObjectTagPopup(clicked, context, object, tag) {\n    $.get( \"/\" + context + \"s/removeTag/\" + object + '/' + tag, function(data) {\n        openPopover(clicked, data);\n    });\n}\n\nfunction removeObjectTag(context, object, tag) {\n    var formData = $('#PromptForm').serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        type:\"POST\",\n        cache: false,\n        url:\"/\" + context.toLowerCase() + \"s/removeTag/\" + object + '/' + tag,\n        success:function (data, textStatus) {\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n            if (context == 'Attribute') {\n                loadAttributeTags(object);\n            } else if (context == 'tag_collection') {\n                refreshTagCollectionRow(object);\n            } else {\n                loadEventTags(object);\n            }\n            handleGenericAjaxResponse(data);\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        }\n    });\n    return false;\n}\n\nfunction redirectAddObject(templateId, additionalData) {\n    var eventId = additionalData['event_id'];\n    window.location = '/objects/add/' + eventId + '/' + templateId;\n}\n\nfunction clickCreateButton(event, type) {\n    var destination = 'attributes';\n    if (type == 'Proposal') destination = 'shadow_attributes';\n    simplePopup(\"/\" + destination + \"/add/\" + event);\n}\n\nfunction submitPopoverForm(context_id, referer, update_context_id) {\n    var url = null;\n    var context = 'event';\n    var contextNamingConvention = 'Attribute';\n    var closePopover = true;\n    switch (referer) {\n        case 'add':\n            url = \"/attributes/add/\" + context_id;\n            break;\n        case 'edit':\n            url = \"/attributes/edit/\" + context_id;\n            break;\n        case 'propose':\n            url = \"/shadow_attributes/add/\" + context_id;\n            break;\n        case 'massEdit':\n            url = \"/attributes/editSelected/\" + context_id;\n            break;\n        case 'addTextElement':\n            url = \"/templateElements/add/text/\" + context_id;\n            context = 'template';\n            contextNamingConvention = 'TemplateElementText';\n            break;\n        case 'editTextElement':\n            url = \"/templateElements/edit/text/\" + context_id;\n            context = 'template';\n            context_id = update_context_id;\n            contextNamingConvention = 'TemplateElementText';\n            break;\n        case 'addAttributeElement':\n            url = \"/templateElements/add/attribute/\" + context_id;\n            context = 'template';\n            contextNamingConvention = 'TemplateElementAttribute';\n            break;\n        case 'editAttributeElement':\n            url = \"/templateElements/edit/attribute/\" + context_id;\n            context = 'template';\n            context_id = update_context_id;\n            contextNamingConvention = 'TemplateElementAttribute';\n            break;\n        case 'addFileElement':\n            url = \"/templateElements/add/file/\" + context_id;\n            context = 'template';\n            contextNamingConvention = 'TemplateElementFile';\n            break;\n        case 'editFileElement':\n            url = \"/templateElements/edit/file/\" + context_id;\n            context = 'template';\n            context_id = update_context_id;\n            contextNamingConvention = 'TemplateElementFile';\n            break;\n        case 'replaceAttributes':\n            url = \"/attributes/attributeReplace/\" + context_id;\n            break;\n        case 'addSighting':\n            url = \"/sightings/add/\" + context_id;\n            closePopover = false;\n            break;\n        case 'addObjectReference':\n            url = \"/objectReferences/add/\" + context_id;\n            break;\n    }\n    if (url !== null) {\n        $.ajax({\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n                if (closePopover) {\n                    $(\"#gray_out\").fadeOut();\n                    $(\"#popover_form\").fadeOut();\n                }\n            },\n            data: $(\"#submitButton\").closest(\"form\").serialize(),\n            success:function (data, textStatus) {\n                var result;\n                if (closePopover) {\n                    result = handleAjaxPopoverResponse(data, context_id, url, referer, context, contextNamingConvention);\n                }\n                if (referer == 'addSighting') {\n                    updateIndex(update_context_id, 'event');\n                    $.get( \"/sightings/listSightings/\" + id + \"/attribute\", function(data) {\n                        $(\"#sightingsData\").html(data);\n                    });\n                    $('.sightingsToggle').removeClass('btn-primary');\n                    $('.sightingsToggle').addClass('btn-inverse');\n                    $('#sightingsListAllToggle').removeClass('btn-inverse');\n                    $('#sightingsListAllToggle').addClass('btn-primary');\n                }\n                if (context == 'event' && (referer == 'add' || referer == 'massEdit' || referer == 'replaceAttributes' || referer == 'addObjectReference')) eventUnpublish();\n                $(\".loading\").hide();\n            },\n            type:\"post\",\n            url:url\n        });\n    }\n\n    return false;\n};\n\nfunction handleAjaxPopoverResponse(response, context_id, url, referer, context, contextNamingConvention) {\n    responseArray = response;\n    var message = null;\n    var result = \"fail\";\n    if (responseArray.saved) {\n        updateIndex(context_id, context);\n        if (responseArray.success) {\n            showMessage(\"success\", responseArray.success);\n            result = \"success\";\n        }\n        if (responseArray.errors) {\n            showMessage(\"fail\", responseArray.errors);\n        }\n    } else {\n        var savedArray = saveValuesForPersistance();\n        $.ajax({\n            async:true,\n            dataType:\"html\",\n            success:function (data, textStatus) {\n                $(\"#popover_form\").html(data);\n                openPopup(\"#popover_form\");\n                var error_context = context.charAt(0).toUpperCase() + context.slice(1);\n                handleValidationErrors(responseArray.errors, context, contextNamingConvention);\n                result = \"success\";\n                if (!$.isEmptyObject(responseArray)) {\n                    result = \"fail\";\n                    $(\"#formWarning\").show();\n                    $(\"#formWarning\").html('The object(s) could not be saved. Please, try again.');\n                }\n                recoverValuesFromPersistance(savedArray);\n                $(\".loading\").hide();\n            },\n            url:url\n        });\n    }\n    return result;\n}\n\n//before we update the form (in case the action failed), we want to retrieve the data from every field, so that we can set the fields in the new form that we fetch\nfunction saveValuesForPersistance() {\n    var formPersistanceArray = new Array();\n    for (i = 0; i < fieldsArray.length; i++) {\n        formPersistanceArray[fieldsArray[i]] = $('#' + fieldsArray[i]).val();\n    }\n    return formPersistanceArray;\n}\n\nfunction recoverValuesFromPersistance(formPersistanceArray) {\n    for (i = 0; i < fieldsArray.length; i++) {\n        $('#' + fieldsArray[i]).val(formPersistanceArray[fieldsArray[i]]);\n    }\n}\n\nfunction handleValidationErrors(responseArray, context, contextNamingConvention) {\n    for (var k in responseArray) {\n        var elementName = k.charAt(0).toUpperCase() + k.slice(1);\n        $(\"#\" + contextNamingConvention + elementName).parent().addClass(\"error\");\n        $(\"#\" + contextNamingConvention + elementName).parent().append(\"<div class=\\\"error-message\\\">\" + responseArray[k] + \"</div>\");\n    }\n}\n\nfunction toggleHistogramType(type, old) {\n    var done = false;\n    old.forEach(function(entry) {\n        if (type == entry) {\n            done = true;\n            old.splice(old.indexOf(entry), 1);\n        }\n    });\n    if (done == false) old.push(type);\n    updateHistogram(JSON.stringify(old));\n}\n\nfunction updateHistogram(selected) {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(\"#histogram\").html(data);\n        },\n        url:\"/users/histogram/\" + selected,\n    });\n}\n\nfunction showMessage(success, message, context) {\n    if (typeof context !== \"undefined\") {\n        $(\"#ajax_\" + success, window.parent.document).html(message);\n        var duration = 1000 + (message.length * 40);\n        $(\"#ajax_\" + success + \"_container\", window.parent.document).fadeIn(\"slow\");\n        $(\"#ajax_\" + success + \"_container\", window.parent.document).delay(duration).fadeOut(\"slow\");\n    }\n    $(\"#ajax_\" + success).html(message);\n    var duration = 1000 + (message.length * 40);\n    $(\"#ajax_\" + success + \"_container\").fadeIn(\"slow\");\n    $(\"#ajax_\" + success + \"_container\").delay(duration).fadeOut(\"slow\");\n}\n\nfunction cancelPopoverForm(id) {\n    $(\"#gray_out\").fadeOut();\n    $(\"#popover_form\").fadeOut();\n    $(\"#popover_form_large\").fadeOut();\n    $(\"#screenshot_box\").fadeOut();\n    $(\"#popover_box\").fadeOut();\n    $(\"#confirmation_box\").fadeOut();\n    $('#gray_out').fadeOut();\n    $('#popover_form').fadeOut();\n    if (id !== undefined && id !== '') {\n        $(id).fadeOut();\n    }\n}\n\nfunction activateTagField() {\n    $(\"#addTagButton\").hide();\n    $(\"#addTagField\").show();\n}\n\nfunction tagFieldChange() {\n    if ($(\"#addTagField :selected\").val() > 0) {\n        var selected_id = $(\"#addTagField :selected\").val();\n        var selected_text = $(\"#addTagField :selected\").text();\n        if ($.inArray(selected_id, selectedTags)==-1) {\n            selectedTags.push(selected_id);\n            appendTemplateTag(selected_id);\n        }\n    }\n    $(\"#addTagButton\").show();\n    $(\"#addTagField\").hide();\n}\n\nfunction appendTemplateTag(selected_id) {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(\"#tags\").append(data);\n        },\n        url:\"/tags/viewTag/\" + selected_id,\n    });\n    updateSelectedTags();\n}\n\nfunction addAllTags(tagArray) {\n    parsedTagArray = JSON.parse(tagArray);\n    parsedTagArray.forEach(function(tag) {\n        appendTemplateTag(tag);\n    });\n}\n\nfunction removeTemplateTag(id, name) {\n    selectedTags.forEach(function(tag) {\n        if (tag == id) {\n            var index = selectedTags.indexOf(id);\n            if (index > -1) {\n                selectedTags.splice(index, 1);\n                updateSelectedTags();\n            }\n        }\n    });\n    $('#tag_bubble_' + id).remove();\n}\n\nfunction updateSelectedTags() {\n    $('#hiddenTags').attr(\"value\", JSON.stringify(selectedTags));\n}\n\nfunction saveElementSorting(order) {\n    $.ajax({\n        data: order,\n        dataType:\"json\",\n        contentType: \"application/json\",\n        cache: false,\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data);\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/templates/saveElementSorting/\",\n    });\n}\n\nfunction templateAddElementClicked(id) {\n    simplePopup(\"/template_elements/templateElementAddChoices/\" + id);\n}\n\nfunction templateAddElement(type, id) {\n    simplePopup(\"/template_elements/add/\" + type + \"/\" + id);\n}\n\nfunction templateUpdateAvailableTypes() {\n    $(\"#innerTypes\").empty();\n    var type = $(\"#TemplateElementAttributeType option:selected\").text();\n    var complex = $('#TemplateElementAttributeComplex:checked').val();\n    if (complex && type != 'Select Type') {\n        currentTypes.forEach(function(entry) {\n            $(\"#innerTypes\").append(\"<div class=\\\"templateTypeBox\\\" id=\\\"\" + entry + \"TypeBox\\\">\" + entry + \"</div>\");\n        });\n        $('#outerTypes').show();\n    }\n    else $('#outerTypes').hide();\n}\n\nfunction populateTemplateTypeDropdown() {\n    var cat = $(\"#TemplateElementAttributeCategory option:selected\").text();\n    currentTypes = [];\n    if (cat == 'Select Category') {\n        $('#TemplateElementAttributeType').html(\"<option>Select Type</option>\");\n    } else {\n        var complex = $('#TemplateElementAttributeComplex:checked').val();\n        if (cat in typeGroupCategoryMapping) {\n            $('#TemplateElementAttributeType').html(\"<option>Select Type</option>\");\n            typeGroupCategoryMapping[cat].forEach(function(entry) {\n                $('#TemplateElementAttributeType').append(\"<option>\" + entry + \"</option>\");\n            });\n        } else {\n            complex = false;\n        }\n        if (!complex) {\n            $('#TemplateElementAttributeType').html(\"<option>Select Type</option>\");\n            categoryTypes[cat].forEach(function(entry) {\n                $('#TemplateElementAttributeType').append(\"<option>\" + entry + \"</option>\");\n            });\n        }\n    }\n}\n\nfunction templateElementAttributeTypeChange() {\n    var complex = $('#TemplateElementAttributeComplex:checked').val();\n    var type = $(\"#TemplateElementAttributeType option:selected\").text();\n    currentTypes = [];\n    if (type != 'Select Type') {\n        if (complex) {\n            complexTypes[type][\"types\"].forEach(function(entry) {\n                currentTypes.push(entry);\n            });\n        } else {\n            currentTypes.push(type);\n        }\n    } else {\n        currentTypes = [];\n    }\n    $(\"#typeJSON\").html(JSON.stringify(currentTypes));\n    templateUpdateAvailableTypes();\n}\n\nfunction templateElementAttributeCategoryChange(category) {\n    if (category in typeGroupCategoryMapping) {\n        $('#complexToggle').show();\n    } else {\n        $('#complexToggle').hide();\n    }\n    if (category != 'Select Type') {\n        populateTemplateTypeDropdown();\n    }\n    templateUpdateAvailableTypes();\n}\n\nfunction templateElementFileCategoryChange(category) {\n    if (category == '') {\n        $(\"#TemplateElementFileMalware\")[0].disabled = true;\n        $(\"#TemplateElementFileMalware\")[0].checked = false;\n    } else {\n        if (categoryArray[category].length == 2) {\n            $(\"#TemplateElementFileMalware\")[0].disabled = false;\n            $(\"#TemplateElementFileMalware\")[0].checked = true;\n        } else {\n            $(\"#TemplateElementFileMalware\")[0].disabled = true;\n            if (categoryArray[category] == 'attachment') $(\"#TemplateElementFileMalware\")[0].checked = false;\n            else $(\"#TemplateElementFileMalware\")[0].checked = true;\n        }\n    }\n}\n\nfunction openPopup(id) {\n    var window_height = $(window).height();\n    var popup_height = $(id).height();\n    if (window_height < popup_height) {\n        $(id).css(\"top\", 50);\n        $(id).css(\"height\", window_height);\n        $(id).addClass('vertical-scroll');\n    } else {\n        if (window_height > (300 + popup_height)) {\n            var top_offset = ((window_height - popup_height) / 2) - 150;\n        } else {\n            var top_offset = (window_height - popup_height) / 2;\n        }\n        $(id).css(\"top\", top_offset + 'px');\n    }\n    $(\"#gray_out\").fadeIn();\n    $(id).fadeIn();\n}\n\nfunction openPopover(clicked, data, hover, placement) {\n    hover = hover === undefined ? false : hover;\n    placement = placement === undefined ? 'right' : placement;\n    /* popup handling */\n    var $clicked = $(clicked);\n    var randomId = $clicked.attr('data-dismissid') !== undefined ? $clicked.attr('data-dismissid') : Math.random().toString(36).substr(2,9); // used to recover the button that triggered the popover (so that we can destroy the popover)\n    var loadingHtml = '<div style=\"height: 75px; width: 75px;\"><div class=\"spinner\"></div><div class=\"loadingText\">Loading</div></div>';\n    $clicked.attr('data-dismissid', randomId);\n    var closeButtonHtml = '<button type=\"button\" class=\"close\" style=\"margin-left: 5px;\" onclick=\"$(&apos;[data-dismissid=&quot;' + randomId + '&quot;]&apos;).popover(\\'destroy\\');\">\u00d7</button>';\n\n    if (!$clicked.data('popover')) {\n        $clicked.addClass('have-a-popover');\n        var popoverOptions = {\n            html: true,\n            placement: placement,\n            trigger: 'manual',\n            content: loadingHtml,\n            container: 'body',\n            template: '<div class=\"popover\" role=\"tooltip\" data-dismissid=\"' + randomId + '\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"><div class=\"data-content\"></div></div></div>'\n        };\n        $clicked.popover(popoverOptions)\n        .on('shown.bs.popover', function(event) {\n            var $this = $(this);\n            var title = $this.attr('title');\n            var popover = $('div.popover[data-dismissid=\"' + randomId + '\"]');\n            title = title === \"\" ? $this.attr('data-original-title') : title;\n\n            if (title === \"\") {\n                title = \"&nbsp;\";\n                // adjust popover position (title was empty)\n                var top = popover.offset().top;\n                popover.css('top', (top-17) + 'px');\n            }\n            var popoverTitle = popover.find('h3.popover-title');\n            popoverTitle.html(title + closeButtonHtml);\n        })\n        .on('keydown.volatilePopover', function(e) {\n            if(e.keyCode == 27) { // ESC\n                $(this).popover('destroy');\n                $(this).off('keydown.volatilePopover');\n            }\n        });\n\n        if (hover) {\n            $clicked.on('mouseenter', function() {\n                var _this = this;\n                $clicked.popover('show');\n                $(\".popover\").on(\"mouseleave\", function() { // close popover when leaving it\n                    $(_this).popover('hide');\n                });\n            })\n            .on('mouseleave', function() { // close popover if button not hovered (timeout)\n                var _this = this;\n                setTimeout(function() {\n                    if ($('.popover:hover').length == 0 && !$(_this).is(\":hover\")) {\n                        $(_this).popover('hide');\n                    }\n                },\n                300);\n            });\n        } else {\n            $clicked.popover('show');\n        }\n\n    } else {\n        // $clicked.popover('show');\n    }\n    var popover = $clicked.data('popover');\n\n    if (data === undefined) {\n        return popover\n    } else if (popover.options.content !== data) {\n        popover.options.content =  data;\n        $clicked.popover('show');\n        return popover;\n    }\n}\n\nfunction getMatrixPopup(scope, scope_id, galaxy_id) {\n    cancelPopoverForm();\n    getPopup(scope_id + '/' + galaxy_id + '/' + scope, 'events', 'viewGalaxyMatrix', '', '#popover_form_large');\n}\n\nfunction getPopup(id, context, target, admin, popupType) {\n    $(\"#gray_out\").fadeIn();\n    var url = \"\";\n    if (typeof admin !== 'undefined' && admin != '') url+= \"/admin\";\n    if (context != '') {\n        url += \"/\" + context;\n    }\n    if (target != '') url += \"/\" + target;\n    if (id != '') url += \"/\" + id;\n    if (popupType == '' || typeof popupType == 'undefined') popupType = '#popover_form';\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        async: true,\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(popupType).html(data);\n            openPopup(popupType);\n        },\n        error:function() {\n            $(\".loading\").hide();\n            $(\"#gray_out\").fadeOut();\n            showMessage('fail', 'Something went wrong - the queried function returned an exception. Contact your administrator for further details (the exception has been logged).');\n        },\n        url: url\n    });\n}\n\n// Same as getPopup function but create a popover to populate first\nfunction popoverPopup(clicked, id, context, target, admin) {\n    var url = \"\";\n    if (typeof admin !== 'undefined' && admin != '') url+= \"/admin\";\n    if (context != '') {\n        url += \"/\" + context;\n    }\n    if (target != '') url += \"/\" + target;\n    if (id != '') url += \"/\" + id;\n    var popover = openPopover(clicked, undefined);\n    $clicked = $(clicked);\n\n    // actual request //\n    $.ajax({\n        dataType:\"html\",\n        async: true,\n        cache: false,\n        success:function (data, textStatus) {\n            if (popover.options.content !== data) {\n                popover.options.content =  data;\n                $clicked.popover('show');\n            }\n        },\n        error:function() {\n            popover.options.content =  '<div class=\"alert alert-error\" style=\"margin-bottom: 0px;\">Something went wrong - the queried function returned an exception. Contact your administrator for further details (the exception has been logged).</div>';\n            $clicked.popover('show');\n        },\n        url: url\n    });\n}\n\n// create a confirm popover on the clicked html node.\nfunction popoverConfirm(clicked) {\n    var $clicked = $(clicked);\n    var popoverContent = '<div>';\n        popoverContent += '<button id=\"popoverConfirmOK\" class=\"btn btn-primary\" onclick=submitPopover(this)>Yes</button>';\n        popoverContent += '<button class=\"btn btn-inverse\" style=\"float: right;\" onclick=cancelPrompt()>Cancel</button>';\n    popoverContent += '</div>';\n    openPopover($clicked, popoverContent);\n    $(\"#popoverConfirmOK\")\n    .focus()\n    .bind(\"keydown\", function(e) {\n        if (e.ctrlKey && (e.keyCode == 13 || e.keyCode == 10)) {\n            $(this).click();\n        }\n        if(e.keyCode == 27) { // ESC\n            $clicked.popover('destroy');\n        }\n    });\n}\n\nfunction submitPopover(clicked) {\n    var $clicked = $(clicked);\n    var $form = $clicked.closest('form');\n    if ($form.length === 0) { // popover container is body, submit from original node\n        var dismissid = $clicked.closest('div.popover').attr('data-dismissid');\n        $form = $('[data-dismissid=\"' + dismissid + '\"]').closest('form');\n    }\n    $form.submit();\n}\n\nfunction simplePopup(url) {\n    $(\"#gray_out\").fadeIn();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        async: true,\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(\"#popover_form\").html(data);\n            openPopup(\"#popover_form\");\n        },\n        error:function(xhr) {\n            $(\".loading\").hide();\n            $(\"#gray_out\").fadeOut();\n            if (xhr.status == 403) {\n                showMessage('fail', 'Not allowed.');\n            } else if (xhr.status == 404) {\n                showMessage('fail', 'Resource not found.');\n            } else {\n                showMessage('fail', 'Something went wrong - the queried function returned an exception. Contact your administrator for further details (the exception has been logged).');\n            }\n        },\n        url: url,\n    });\n}\n\nfunction choicePopup(legend, list) {\n    var popupHtml = '<div class=\"popover_choice\">';\n    popupHtml += '<legend>Select Object Category</legend>';\n        popupHtml += '<div class=\"popover_choice_main\" id =\"popover_choice_main\">';\n            popupHtml += '<table style=\"width:100%;\" id=\"MainTable\">';\n                popupHtml += '<tbody>';\n                    list.forEach(function(item) {\n                        popupHtml += '<tr style=\"border-bottom:1px solid black;\" class=\"templateChoiceButton\">';\n                            popupHtml += '<td role=\"button\" tabindex=\"0\" aria-label=\"All meta-categories\" title=\"'+item.text+'\" style=\"padding-left:10px;padding-right:10px; text-align:center;width:100%;\" onClick=\"'+item.onclick+';\">'+item.text+'</td>';\n                        popupHtml += '</tr>';\n                    });\n                popupHtml += '</tbody>';\n            popupHtml += '</table>';\n        popupHtml += '</div>';\n        popupHtml += '<div role=\"button\" tabindex=\"0\" aria-label=\"Cancel\" title=\"Cancel\" class=\"templateChoiceButton templateChoiceButtonLast\" onClick=\"cancelPopoverForm();\">Cancel</div>';\n    popupHtml += '</div>';\n\n    $(\"#popover_form\").html(popupHtml);\n    openPopup(\"#popover_form\");\n}\n\nfunction resizePopoverBody() {\n    var bodyheight = $(window).height();\n    bodyheight = 3 * bodyheight / 4 - 150;\n    $(\"#popover_choice_main\").css({\"max-height\": bodyheight});\n}\n\nfunction populateTemplateHiddenFileDiv(files) {\n    $('#TemplateFileArray').val(JSON.stringify(files));\n}\n\nfunction populateTemplateFileBubbles() {\n    var fileObjectArray = JSON.parse($('#TemplateFileArray').val());\n    fileObjectArray.forEach(function(entry) {\n        templateAddFileBubble(entry.element_id, false, entry.filename, entry.tmp_name, 'yes');\n    });\n}\n\nfunction templateFileHiddenAdd(files, element_id, batch) {\n    var fileArray = $.parseJSON($('#TemplateFileArray', window.parent.document).val());\n    var contained = false;\n    for (var j=0; j< files.length; j++) {\n        for (var i=0; i< fileArray.length; i++) {\n            if (fileArray[i].filename == files[j].filename) {\n                contained = true;\n            }\n            if (batch == 'no' && fileArray[i].element_id == element_id) {\n                templateDeleteFileBubble(fileArray[i].filename, fileArray[i].tmp_name, fileArray[i].element_id, 'iframe', batch);\n                contained = false;\n                var removeId = i;\n            }\n        }\n        if (batch == 'no') fileArray.splice(removeId, 1);\n        if (contained == false) {\n            fileArray.push(files[j]);\n            templateAddFileBubble(element_id, true, files[j].filename, files[j].tmp_name, batch);\n            $('#TemplateFileArray', window.parent.document).val(JSON.stringify(fileArray));\n        }\n    }\n}\n\nfunction htmlEncode(value){\n    return $('<div/>').text(value).html();\n}\n\nfunction templateAddFileBubble(element_id, iframe, filename, tmp_name, batch) {\n    filename = htmlEncode(filename);\n    tmp_name = htmlEncode(tmp_name);\n    if (batch == 'no') {\n        if (iframe == true) {\n            $('#filenames_' + element_id, window.parent.document).html('<div id =\"' + tmp_name + '_container\" class =\"template_file_box_container\"><span class=\"tagFirstHalf template_file_box\">' + filename + '</span><span onClick=\"templateDeleteFileBubble(\\'' + filename + '\\', \\'' + tmp_name + '\\', \\'' + element_id + '\\', \\'normal\\', \\'no\\');\" class=\"tagSecondHalf useCursorPointer\">x</span></div>');\n        } else {\n            $('#filenames_' + element_id).html('<div id =\"' + tmp_name + '_container\" class =\"template_file_box_container\"><span class=\"tagFirstHalf template_file_box\">' + filename + '</span><span onClick=\"templateDeleteFileBubble(\\'' + filename + '\\', \\'' + tmp_name + '\\', \\'' + element_id + '\\', \\'normal\\', \\'no\\');\" class=\"tagSecondHalf useCursorPointer\">x</span></div>');\n        }\n    } else {\n        if (iframe == true) {\n            $('#filenames_' + element_id, window.parent.document).append('<div id =\"' + tmp_name + '_container\" class =\"template_file_box_container\"><span class=\"tagFirstHalf template_file_box\">' + filename + '</span><span onClick=\"templateDeleteFileBubble(\\'' + filename + '\\', \\'' + tmp_name + '\\', \\'' + element_id + '\\', \\'normal\\', \\'yes\\');\" class=\"tagSecondHalf useCursorPointer\">x</span></div>');\n        } else {\n            $('#filenames_' + element_id).append('<div id =\"' + tmp_name + '_container\" class =\"template_file_box_container\"><span class=\"tagFirstHalf template_file_box\">' + filename + '</span><span onClick=\"templateDeleteFileBubble(\\'' + filename + '\\', \\'' + tmp_name + '\\', \\'' + element_id + '\\', \\'normal\\', \\'yes\\');\" class=\"tagSecondHalf useCursorPointer\">x</span></div>');\n        }\n    }\n}\n\nfunction templateDeleteFileBubble(filename, tmp_name, element_id, context, batch) {\n    $(\".loading\").show();\n    $.ajax({\n        type:\"post\",\n        cache: false,\n        url:\"/templates/deleteTemporaryFile/\" + tmp_name,\n    });\n    var c = this;\n    if (context == 'iframe') {\n        $('#' + tmp_name + '_container', window.parent.document).remove();\n        var oldArray = JSON.parse($('#TemplateFileArray', window.parent.document).val());\n    } else {\n        $('#' + tmp_name + '_container').remove();\n        var oldArray = JSON.parse($('#TemplateFileArray').val());\n    }\n    var newArray = [];\n    oldArray.forEach(function(entry) {\n        if (batch == 'no') {\n            if (entry.element_id != element_id) {\n                newArray.push(entry);\n            }\n        } else {\n            if (entry.tmp_name != tmp_name) {\n                newArray.push(entry);\n            }\n        }\n    });\n    if (batch == 'no') {\n        $('#fileUploadButton_' + element_id, $('#iframe_' + element_id).contents()).html('Upload File');\n    }\n    if (context == 'iframe') {\n        $('#TemplateFileArray', window.parent.document).val(JSON.stringify(newArray));\n    } else {\n        $('#TemplateFileArray').val(JSON.stringify(newArray));\n    }\n    $(\".loading\").hide();\n}\n\nfunction templateFileUploadTriggerBrowse(id) {\n    $('#upload_' + id + '_file').click();\n}\n\nfunction freetextRemoveRow(id, event_id) {\n    $('#row_' + id).hide();\n    $('#Attribute' + id + 'Save').attr(\"value\", \"0\");\n    if ($(\".freetext_row:visible\").length == 0) {\n        window.location = \"/events/\" + event_id;\n    }\n}\n\nfunction indexEvaluateFiltering() {\n    if (filterContext == \"event\") {\n        if (filtering.published != 2) {\n            $('#value_published').html(publishedOptions[filtering.published]);\n        } else {\n            $('#value_published').html(\"\");\n        }\n        if (filtering.hasproposal != 2) {\n            $('#value_hasproposal').html(publishedOptions[filtering.hasproposal]);\n        } else {\n            $('#value_hasproposal').html(\"\");\n        }\n        if (filtering.date.from != null) {\n            var text = \"\";\n            if (filtering.date.from != \"\") text = \"From: \" + $('<span>').text(filtering.date.from).html();\n            if (filtering.date.until != \"\") {\n                if (text != \"\") text += \" \";\n                text += \"Until: \" + $('<span>').text(filtering.date.until).html();\n            }\n        }\n        $('#value_date').html(text);\n        for (var i = 0; i < simpleFilters.length; i++) {\n            indexEvaluateSimpleFiltering(simpleFilters[i]);\n        }\n        indexRuleChange();\n    } else {\n        for (var i = 0; i < differentFilters.length; i++) {\n            if (filtering[differentFilters[i]] != \"\") {\n                var text = \"\";\n                if (filtering[differentFilters[i]] == 1) text = \"Yes\";\n                else if (filtering[differentFilters[i]] == 0) text = \"No\";\n                $('#value_' + differentFilters[i]).text(text);\n            } else {\n                $('#value_' + differentFilters[i]).text(\"\");\n            }\n        }\n        for (var i = 0; i < simpleFilters.length; i++) {\n            indexEvaluateSimpleFiltering(simpleFilters[i]);\n        }\n    }\n    indexSetTableVisibility();\n    indexSetRowVisibility();\n    $('#generatedURLContent').text(indexCreateFilters());\n}\n\nfunction quickFilter(passedArgs, url) {\n    if(!passedArgs){\n        var passedArgs = [];\n    }\n    if( $('#quickFilterField').val().trim().length > 0){\n        passedArgs[\"searchall\"] = $('#quickFilterField').val().trim();\n        for (var key in passedArgs) {\n            if (key !== 'page') {\n                url += \"/\" + key + \":\" + passedArgs[key];\n            }\n        }\n    }\n    window.location.href=url;\n}\n\nfunction runIndexFilter(element) {\n    var dataFields = $(element).data();\n    for (var k in $(element).data()) {\n        if (k in passedArgsArray) {\n            delete(passedArgsArray[k]);\n        } else {\n            passedArgsArray[k] = dataFields[k];\n        }\n    }\n    url = here;\n    for (var key in passedArgsArray) {\n        url += \"/\" + key + \":\" + passedArgsArray[key];\n    }\n    window.location.href = url;\n}\n\nfunction runIndexQuickFilter(preserveParams) {\n    if (!passedArgsArray) {\n        var passedArgsArray = [];\n    }\n    var searchKey = 'searchall';\n    if ($('#quickFilterField').data('searchkey')) {\n        searchKey = $('#quickFilterField').data('searchkey');\n    }\n    if ( $('#quickFilterField').val().trim().length > 0){\n        passedArgsArray[searchKey] = $('#quickFilterField').val().trim();\n    }\n    url = here;\n    if (typeof preserveParams !== \"undefined\") {\n        url += preserveParams;\n    }\n    for (var key in passedArgsArray) {\n        if (key !== 'page') {\n            url += \"/\" + key + \":\" + passedArgsArray[key];\n        }\n    }\n    window.location.href = url;\n}\n\nfunction executeFilter(passedArgs, url) {\n    for (var key in passedArgs) url += \"/\" + key + \":\" + passedArgs[key];\n    window.location.href=url;\n}\n\nfunction quickFilterTaxonomy(taxonomy_id, passedArgs) {\n    var url = \"/taxonomies/view/\" + taxonomy_id + \"/filter:\" + $('#quickFilterField').val();\n    window.location.href=url;\n}\n\nfunction quickFilterRemoteEvents(passedArgs, id) {\n    passedArgs[\"searchall\"] = $('#quickFilterField').val();\n    var url = \"/servers/previewIndex/\" + id;\n    for (var key in passedArgs) {\n        url += \"/\" + key + \":\" + passedArgs[key];\n    }\n    window.location.href=url;\n}\n\nfunction remoteIndexApplyFilters() {\n    var url = actionUrl + '/' + $(\"#EventFilter\").val();\n    window.location.href = url;\n}\n\nfunction indexApplyFilters() {\n    var url = indexCreateFilters();\n    window.location.href = url;\n}\n\nfunction indexCreateFilters() {\n    text = \"\";\n    if (filterContext == 'event') {\n        if (filtering.published != \"2\") {\n            text += \"searchpublished:\" + filtering.published;\n        }\n        if (filtering.hasproposal != \"2\") {\n            if (text != \"\") text += \"/\";\n            text += \"searchhasproposal:\" + filtering.hasproposal;\n        }\n    } else {\n        for (var i = 0; i < differentFilters.length; i++) {\n            if (filtering[differentFilters[i]]) {\n                if (text != \"\") text += \"/\";\n                text += \"search\" + differentFilters[i] + \":\" + filtering[differentFilters[i]];\n            }\n        }\n    }\n    for (var i = 0; i < simpleFilters.length; i++) {\n        text = indexBuildArray(simpleFilters[i], text);\n    }\n    if (filterContext == 'event') {\n        if (filtering.date.from) {\n            if (text != \"\") text += \"/\";\n            text += \"searchDatefrom:\" + filtering.date.from;\n        }\n        if (filtering.date.until) {\n            if (text != \"\") text += \"/\";\n            text += \"searchDateuntil:\" + filtering.date.until;\n        }\n        return baseurl + '/events/index/' + text;\n    } else {\n        return baseurl + '/admin/users/index/' + text;\n    }\n}\n\nfunction indexBuildArray(type, text) {\n    temp = \"\";\n    if (text != \"\") temp += \"/\";\n    temp += \"search\" + type + \":\";\n    if (filtering[type].NOT.length == 0 && filtering[type].OR.length == 0) return text;\n    var swap = filtering[type].OR.length;\n    var temp_array = filtering[type].OR.concat(filtering[type].NOT);\n    for (var i = 0; i < temp_array.length; i++) {\n        if (i > 0) temp += \"|\";\n        if (i >= swap) temp +=\"!\";\n        temp += temp_array[i];\n    }\n    text += temp;\n    return text;\n}\n\nfunction indexSetRowVisibility() {\n    for (var i = 0; i < allFields.length; i++) {\n        if ($(\"#value_\" + allFields[i]).text().trim() != \"\") {\n            $(\"#row_\" + allFields[i]).show();\n        } else {\n            $(\"#row_\" + allFields[i]).hide();\n        }\n    }\n}\n\nfunction indexEvaluateSimpleFiltering(field) {\n    text = \"\";\n    if (filtering[field].OR.length == 0 && filtering[field].NOT.length == 0) {\n        $('#value_' + field).html(text);\n        return false;\n    }\n    if (filtering[field].OR.length !=0) {\n        for (var i = 0; i < filtering[field].OR.length; i++) {\n            if (i > 0) text += '<span class=\"green bold\"> OR </span>';\n            if (typedFields.indexOf(field) == -1) {\n                text += $('<span>').text(filtering[field].OR[i]).html();\n            } else {\n                for (var j = 0; j < typeArray[field].length; j++) {\n                    if (typeArray[field][j].id == filtering[field].OR[i]) {\n                        text += $('<span>').text(typeArray[field][j].value).html();\n                    }\n                }\n            }\n        }\n    }\n    if (filtering[field].NOT.length !=0) {\n        for (var i = 0; i < filtering[field].NOT.length; i++) {\n            if (i == 0) {\n                if (text != \"\") text += '<span class=\"red bold\"> AND NOT </span>';\n                else text += '<span class=\"red bold\">NOT </span>';\n            } else text += '<span class=\"red bold\"> AND NOT </span>';\n            if (typedFields.indexOf(field) == -1) {\n                text += $('<span>').text(filtering[field].NOT[i]).html();\n            } else {\n                for (var j = 0; j < typeArray[field].length; j++) {\n                    if (typeArray[field][j].id == filtering[field].NOT[i]) {\n                        text += $('<span>').text(typeArray[field][j].value).html();\n                    }\n                }\n            }\n        }\n    }\n    $('#value_' + field).html(text);\n}\n\nfunction indexAddRule(param) {\n    var found = false;\n    if (filterContext == 'event') {\n        if (param.data.param1 == \"date\") {\n            var val1 = escape($('#EventSearch' + param.data.param1 + 'from').val());\n            var val2 = escape($('#EventSearch' + param.data.param1 + 'until').val());\n            if (val1 != \"\") filtering.date.from = val1;\n            if (val2 != \"\") filtering.date.until = val2;\n        } else if (param.data.param1 == \"published\") {\n            var value = escape($('#EventSearchpublished').val());\n            if (value != \"\") filtering.published = value;\n        } else if (param.data.param1 == \"hasproposal\") {\n            var value = escape($('#EventSearchhasproposal').val());\n            if (value != \"\") filtering.hasproposal = value;\n        } else {\n            var value = escape($('#EventSearch' + param.data.param1).val());\n            var operator = operators[escape($('#EventSearchbool').val())];\n            if (value != \"\" && filtering[param.data.param1][operator].indexOf(value) < 0) filtering[param.data.param1][operator].push(value);\n        }\n    } else if (filterContext == 'user') {\n        if (differentFilters.indexOf(param.data.param1) != -1) {\n            var value = escape($('#UserSearch' + param.data.param1).val());\n            if (value != \"\") filtering[param.data.param1] = value;\n        } else {\n            var value = escape($('#UserSearch' + param.data.param1).val());\n            var operator = operators[escape($('#UserSearchbool').val())];\n            if (value != \"\" && filtering[param.data.param1][operator].indexOf(value) < 0) filtering[param.data.param1][operator].push(value);\n        }\n    }\n    indexEvaluateFiltering();\n}\n\nfunction indexSetTableVisibility() {\n    var visible = false;\n    if ($(\"[id^='value_']\").text().trim()!=\"\" && $(\"[id^='value_']\").text().trim()!=\"-1\") {\n        visible = true;\n    }\n    if (visible == true) $('#FilterplaceholderTable').hide();\n    else $('#FilterplaceholderTable').show();\n}\n\nfunction indexRuleChange() {\n    var context = filterContext.charAt(0).toUpperCase() + filterContext.slice(1);\n    $('[id^=' + context + 'Search]').hide();\n    var rule = $('#' + context + 'Rule').val();\n    var fieldName = '#' + context + 'Search' + rule;\n    if (fieldName == '#' + context + 'Searchdate') {\n        $(fieldName + 'from').show();\n        $(fieldName + 'until').show();\n    } else {\n        $(fieldName).show();\n    }\n    if (simpleFilters.indexOf(rule) != -1) {\n        $('#' + context + 'Searchbool').show();\n    } else $('#' + context + 'Searchbool').hide();\n\n    $('#addRuleButton').show();\n    $('#addRuleButton').unbind(\"click\");\n    $('#addRuleButton').click({param1: rule}, indexAddRule);\n}\n\nfunction indexFilterClearRow(field) {\n    $('#value_' + field).html(\"\");\n    $('#row_' + field).hide();\n    if (field == \"date\") {\n        filtering.date.from = \"\";\n        filtering.date.until = \"\";\n    } else if (field == \"published\") {\n        filtering.published = 2;\n    } else if (field == \"hasproposal\") {\n        filtering.hasproposal = 2;\n    } else if (differentFilters.indexOf(field) != -1) {\n        filtering[field] = \"\";\n    } else {\n        filtering[field].NOT = [];\n        filtering[field].OR = [];\n    }\n    indexSetTableVisibility();\n    indexEvaluateFiltering();\n}\n\n\nfunction restrictEventViewPagination() {\n    var showPages = new Array();\n    var start;\n    var end;\n    var i;\n\n    if (page < 6) {\n        start = 1;\n        if (count - page < 6) {\n            end = count;\n        } else {\n            end = page + (9 - (page - start));\n        }\n    } else if (count - page < 6) {\n        end = count;\n        start = count - 10;\n    } else {\n        start = page-5;\n        end = page+5;\n    }\n\n    if (start > 2) {\n        $(\"#apage\" + start).parent().before(\"<li><a href id='aExpandLeft'>...</a></li>\");\n        $(\"#aExpandLeft\").click(function() {expandPagination(0, 0); return false;});\n        $(\"#bpage\" + start).parent().before(\"<li><a href id='bExpandLeft'>...</a></li>\");\n        $(\"#bExpandLeft\").click(function() {expandPagination(1, 0); return false;})\n    }\n\n    if (end < (count - 1)) {\n        $(\"#apage\" + end).parent().after(\"<li><a href id='aExpandRight'>...</a></li>\");\n        $(\"#aExpandRight\").click(function() {expandPagination(0, 1); return false;});\n        $(\"#bpage\" + end).parent().after(\"<li><a href id='bExpandRight'>...</a></li>\");\n        $(\"#bExpandRight\").click(function() {expandPagination(1, 1); return false;})\n    }\n\n    for (i = 1; i < (count+1); i++) {\n        if (i != 1 && i != count && (i < start || i > end)) {\n            $(\"#apage\" + i).hide();\n            $(\"#bpage\" + i).hide();\n        }\n    }\n}\n\nfunction expandPagination(bottom, right) {\n    var i;\n    var prefix = \"a\";\n    if (bottom == 1) prefix = \"b\";\n    var start = 1;\n    var end = page;\n    if (right == 1) {\n        start = page;\n        end = count;\n        $(\"#\" + prefix + \"ExpandRight\").remove();\n    } else $(\"#\" + prefix + \"ExpandLeft\").remove();\n    for (i = start; i < end; i++) {\n        $(\"#\" + prefix + \"page\" + i).show();\n    }\n}\n\nfunction getSubGroupFromSetting(setting) {\n    var temp = setting.split('.');\n    if (temp[0] == \"Plugin\") {\n        temp = temp[1];\n        if (temp.indexOf('_') > -1) {\n            temp = temp.split('_');\n            return temp[0];\n        }\n    }\n    return 'general';\n}\n\nfunction serverSettingsActivateField(setting, id) {\n    resetForms();\n    $('.inline-field-placeholder').hide();\n    var fieldName = \"#setting_\" + getSubGroupFromSetting(setting) + \"_\" + id;\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(fieldName + \"_placeholder\").html(data);\n            $(fieldName + \"_solid\").hide();\n            $(fieldName + \"_placeholder\").show();\n            serverSettingsPostActivationScripts(fieldName, setting, id);\n        },\n        url:\"/servers/serverSettingsEdit/\" + setting + \"/\" + id,\n    });\n}\n\nfunction serverSettingsPostActivationScripts(name, setting, id) {\n    $(name + '_field').focus();\n    inputFieldButtonActive(name + '_field');\n\n    $(name + '_form').submit(function(e){\n        e.preventDefault();\n        serverSettingSubmitForm(name, setting, id);\n        return false;\n    });\n\n    $(name + '_form').bind(\"focusout\", function() {\n        inputFieldButtonPassive(name + '_field');\n    });\n\n    $(name + '_form').bind(\"focusin\", function(){\n        inputFieldButtonActive(name + '_field');\n    });\n\n    $(name + '_form').bind(\"keydown\", function(e) {\n        if (e.ctrlKey && (e.keyCode == 13 || e.keyCode == 10)) {\n            serverSettingSubmitForm(name, setting, id);\n        }\n    });\n    $(name + '_field').closest('.inline-input-container').children('.inline-input-accept').bind('click', function() {\n        serverSettingSubmitForm(name, setting, id);\n    });\n    $(name + '_field').closest('.inline-input-container').children('.inline-input-decline').bind('click', function() {\n        resetForms();\n        $('.inline-field-placeholder').hide();\n    });\n\n    $(name + '_solid').hide();\n}\n\nfunction serverSettingSubmitForm(name, setting, id) {\n    subGroup = getSubGroupFromSetting(setting);\n    var formData = $(name + '_field').closest(\"form\").serialize();\n    $.ajax({\n        data: formData,\n        cache: false,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            $.ajax({\n                type:\"get\",\n                url:\"/servers/serverSettingsReloadSetting/\" + setting + \"/\" + id,\n                success:function (data2, textStatus2) {\n                    $('#' + subGroup + \"_\" + id + '_row').replaceWith(data2);\n                    $(\".loading\").hide();\n                },\n                error:function() {\n                    showMessage('fail', 'Could not refresh the table.');\n                }\n            });\n        },\n        error:function() {\n            showMessage('fail', 'Request failed for an unknown reason.');\n            resetForms();\n            $('.inline-field-placeholder').hide();\n        },\n        type:\"post\",\n        url:\"/servers/serverSettingsEdit/\" + setting + \"/\" + id + \"/\" + 1\n    });\n    $(name + '_field').unbind(\"keyup\");\n    $(name + '_form').unbind(\"focusout\");\n    return false;\n}\n\nfunction updateOrgCreateImageField(string) {\n    string = escape(string);\n    $.ajax({\n        url:'/img/orgs/' + string + '.png',\n        type:'HEAD',\n        error:\n            function(){\n                $('#logoDiv').html('No image uploaded for this identifier');\n            },\n        success:\n            function(){\n                $('#logoDiv').html('<img src=\"/img/orgs/' + string + '.png\" style=\"width:24px;height:24px;\"></img>');\n            }\n    });\n}\n\nfunction generateOrgUUID() {\n    $.ajax({\n        url:'/admin/organisations/generateuuid.json',\n        success:\n            function( data ){\n                $('#OrganisationUuid').val(data.uuid);\n            }\n    });\n}\n\n\nfunction sharingGroupIndexMembersCollapse(id) {\n    $('#' + id + '_down').show();\n    $('#' + id + '_up').hide();\n}\n\nfunction sharingGroupIndexMembersExpand(id) {\n    $('#' + id + '_down').hide();\n    $('#' + id + '_up').show();\n}\n\nfunction popoverStartup() {\n    $('[data-toggle=\"popover\"]').popover({\n        animation: true,\n        html: true,\n    }).click(function(e) {\n        $(e.target).popover('show');\n        $('[data-toggle=\"popover\"]').not(e.target).popover('hide');\n    });\n    $(document).click(function (e) {\n        if (!$('[data-toggle=\"popover\"]').is(e.target)) {\n            $('[data-toggle=\"popover\"]').popover('hide');\n        }\n    });\n}\n\nfunction changeFreetextImportFrom() {\n    $('#changeTo').find('option').remove();\n    options[$('#changeFrom').val()].forEach(function(element) {\n        $('#changeTo').append('<option value=\"' + element + '\">' + element + '</option>');\n    });\n}\n\nfunction changeFreetextImportCommentExecute() {\n    $('.freetextCommentField').val($('#changeComments').val());\n}\n\nfunction changeFreetextImportExecute() {\n    var from = $('#changeFrom').val();\n    var to = $('#changeTo').val();\n    $('.typeToggle').each(function() {\n        if ($( this ).val() == from) {\n            if (selectContainsOption(\"#\" + $(this).attr('id'), to)) $( this ).val(to);\n        }\n    });\n}\n\nfunction selectContainsOption(selectid, value) {\n    var exists = false;\n    $(selectid + ' option').each(function(){\n        if (this.value == value) {\n            exists = true;\n            return false;\n        }\n    });\n    return exists;\n}\n\nfunction exportChoiceSelect(e) {\n    if ($(e.target).is(\"input\")) {\n        return false;\n    }\n    var url = $(e.target).parent().data(\"export-url\");\n    var elementId = $(e.target).parent().data(\"export-key\");\n    var checkbox = $(e.target).parent().data(\"export-checkbox\");\n    if (checkbox == 1) {\n        if ($('#' + elementId + '_toggle').prop('checked')) {\n            url = $('#' + elementId + '_set').html();\n        }\n    }\n    document.location.href = url;\n}\n\nfunction importChoiceSelect(url, elementId, ajax) {\n    if (ajax == 'false') {\n        document.location.href = url;\n    } else {\n        simplePopup(url);\n    }\n}\n\nfunction freetextImportResultsSubmit(id, count) {\n    var attributeArray = [];\n    var temp;\n    for (i = 0; i < count; i++) {\n        if ($('#Attribute' + i + 'Save').val() == 1) {\n            temp = {\n                value:$('#Attribute' + i + 'Value').val(),\n                category:$('#Attribute' + i + 'Category').val(),\n                type:$('#Attribute' + i + 'Type').val(),\n                to_ids:$('#Attribute' + i + 'To_ids')[0].checked,\n                disable_correlation:$('#Attribute' + i + 'Disable_correlation')[0].checked,\n                comment:$('#Attribute' + i + 'Comment').val(),\n                distribution:$('#Attribute' + i + 'Distribution').val(),\n                sharing_group_id:$('#Attribute' + i + 'SharingGroupId').val(),\n                data:$('#Attribute' + i + 'Data').val(),\n                data_is_handled:$('#Attribute' + i + 'DataIsHandled').val(),\n                tags:$('#Attribute' + i + 'Tags').val()\n            }\n            attributeArray[attributeArray.length] = temp;\n        }\n    };\n    $(\"#AttributeJsonObject\").val(JSON.stringify(attributeArray));\n    var formData = $(\".mainForm\").serialize();\n    $.ajax({\n        type: \"post\",\n        cache: false,\n        url: \"/events/saveFreeText/\" + id,\n        data: formData,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            window.location = '/events/view/' + id;\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n    });\n}\n\nfunction moduleResultsSubmit(id) {\n    var data_collected = {};\n    var temp;\n    if ($('.MISPObjects').length) {\n        var objects = [];\n        $(\".MISPObject\").each(function(o) {\n            var object_uuid = $(this).find('.ObjectUUID').text();\n            temp = {\n                uuid: object_uuid,\n                name: $(this).find('.ObjectName').text(),\n                meta_category: $(this).find('.ObjectMetaCategory').text(),\n                distribution: $(this).find('.ObjectDistribution').val(),\n                sharing_group_id: $(this).find('.ObjectSharingGroup').val()\n            }\n            if ($(this).has('.ObjectID').length) {\n                temp['id'] = $(this).find('.ObjectID').text();\n            }\n            if ($(this).has('.ObjectReferences').length) {\n                var references = [];\n                $(this).find('.ObjectReference').each(function() {\n                    var reference = {\n                        object_uuid: object_uuid,\n                        referenced_uuid: $(this).find('.ReferencedUUID').text(),\n                        relationhip_type: $(this).find('.Relationship').text()\n                    };\n                    references.push(reference);\n                });\n                temp['ObjectReference'] = references;\n            }\n            if ($(this).find('.ObjectAttributes').length) {\n                var object_attributes = [];\n                $(this).find('.ObjectAttribute').each(function(a) {\n                    attribute = {\n                        category: $(this).find('.AttributeCategory').text(),\n                        type: $(this).find('.AttributeType').text(),\n                        value: $(this).find('.AttributeValue').text(),\n                        uuid: $(this).find('.AttributeUuid').text(),\n                        to_ids: $(this).find('.AttributeToIds')[0].checked,\n                        disable_correlation: $(this).find('.AttributeDisableCorrelation')[0].checked,\n                        comment: $(this).find('.AttributeComment').val(),\n                        distribution: $(this).find('.AttributeDistribution').val(),\n                        sharing_group_id: $(this).find('.AttributeSharingGroup').val()\n                    }\n                    object_attributes.push(attribute);\n                });\n                temp['Attribute'] = object_attributes;\n            }\n            objects.push(temp);\n        });\n        data_collected['Object'] = objects;\n    }\n    if ($('.MISPAttributes').length) {\n        var attributes = [];\n        $('.MISPAttribute').each(function(a) {\n            temp = {\n                category: $(this).find('.AttributeCategory').text(),\n                type: $(this).find('.AttributeType').text(),\n                value: $(this).find('.AttributeValue').text(),\n                uuid: $(this).find('.AttributeUuid').text(),\n                to_ids: $(this).find('.AttributeToIds')[0].checked,\n                disable_correlation: $(this).find('.AttributeDisableCorrelation')[0].checked,\n                comment: $(this).find('.AttributeComment').val(),\n                distribution: $(this).find('.AttributeDistribution').val(),\n                sharing_group_id: $(this).find('.AttributeSharingGroup').val()\n            }\n            attributes.push(temp);\n        });\n        data_collected['Attribute'] = attributes;\n    }\n    $.ajax({\n        type: \"post\",\n        cache: false,\n        url: \"/events/handleModuleResults/\" + id,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            window.location = '/events/view/' + id;\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        }\n    });\n}\n\nfunction objectTemplateViewContent(context, id) {\n    var url = \"/objectTemplateElements/viewElements/\" + id + \"/\" + context;\n    $.ajax({\n            url: url,\n            type:'GET',\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n            error: function(){\n                $('#ajaxContent').html('An error has occured, please reload the page.');\n            },\n            success: function(response){\n                $('#ajaxContent').html(response);\n            },\n        complete: function() {\n            $(\".loading\").hide();\n        },\n    });\n\n}\n\nfunction organisationViewContent(context, id) {\n    organisationViewButtonHighlight(context);\n    var action = \"/organisations/landingpage/\";\n    if (context == 'members') {\n        action = \"/admin/users/index/searchorg:\";\n    }\n    if (context == 'events') {\n        action = \"/events/index/searchorg:\";\n    }\n    $.ajax({\n        url: action + id,\n        type:'GET',\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        error: function(){\n            $('#ajaxContent').html('An error has occured, please reload the page.');\n        },\n        success: function(response){\n            $('#ajaxContent').html(response);\n        },\n        complete: function() {\n            $(\".loading\").hide();\n        },\n    });\n}\n\nfunction organisationViewButtonHighlight(context) {\n    $(\".orgViewButtonActive\").hide();\n    $(\".orgViewButton\").show();\n    $(\"#button_\" + context).hide();\n    $(\"#button_\" + context + \"_active\").show();\n}\n\nfunction simpleTabPage(page) {\n    $(\".progress_tab\").removeClass(\"btn-primary\").addClass(\"btn-inverse\");\n    $(\"#page\" + page + \"_tab\").removeClass(\"btn-inverse\").addClass(\"btn-primary\");\n    $(\".tabContent\").hide();\n    $(\"#page\" + page + \"_content\").show();\n    if (page == lastPage) simpleTabPageLast();\n}\n\nfunction simpleTabPageLast() {\n    var summaryorgs = summaryextendorgs = remotesummaryorgs = remotesummaryextendorgs = summaryservers = \"\";\n    var orgcounter = extendcounter = remoteorgcounter = remoteextendcounter = servercounter = 0;\n    var sgname = \"[Sharing group name not set!]\";\n    if ($('#SharingGroupName').val()) sgname = $('#SharingGroupName').val();\n    var sgreleasability = \"[Sharing group releasability not set!]\";\n    if ($('#SharingGroupReleasability').val()) sgreleasability = $('#SharingGroupReleasability').val();\n    $('#summarytitle').text(sgname);\n    $('#summaryreleasable').text(sgreleasability);\n    organisations.forEach(function(organisation){\n        if (organisation.type == 'local') {\n            if (orgcounter > 0) summaryorgs += \", \";\n            summaryorgs += organisation.name;\n            if (organisation.extend == true) {\n                if (extendcounter > 0) summaryextendorgs += \", \"\n                summaryextendorgs += organisation.name;\n                extendcounter++;\n            }\n            orgcounter++;\n        } else {\n            if (remoteorgcounter > 0) remotesummaryorgs += \", \";\n            remotesummaryorgs += organisation.name;\n            if (organisation.extend == true) {\n                if (remoteextendcounter > 0) remotesummaryextendorgs += \", \"\n                remotesummaryextendorgs += organisation.name;\n                remoteextendcounter++;\n            }\n            remoteorgcounter++;\n        }\n    });\n    if (orgcounter == 0) $('#localText').hide();\n    if (remoteorgcounter == 0) $('#externalText').hide();\n    if (extendcounter == 0) summaryextendorgs = \"nobody\";\n    if (remoteextendcounter == 0) remotesummaryextendorgs = \"nobody\";\n    servers.forEach(function(server){\n        if (servercounter > 0) summaryservers += \", \";\n        if (server.id != 0) {\n            summaryservers += server.name;\n            if (extendcounter == 0) summaryextendorgs = \"none\";\n            servercounter++;\n        }\n        if (server.id == 0 && server.all_orgs == true) summaryorgs = \"all organisations on this instance\";\n    });\n    if ($('#SharingGroupRoaming').is(\":checked\")) {\n        summaryservers = \"any interconnected instances linked by an eligible organisation.\";\n    } else {\n        if (servercounter == 0) {\n            summaryservers = \"data marked with this sharing group will not be pushed.\";\n        }\n    }\n    $('#summarylocal').text(summaryorgs);\n    $('#summarylocalextend').text(summaryextendorgs);\n    $('#summaryexternal').text(remotesummaryorgs);\n    $('#summaryexternalextend').text(remotesummaryextendorgs);\n    $('#summaryservers').text(summaryservers);\n}\n\nfunction sharingGroupPopulateOrganisations() {\n    $('input[id=SharingGroupOrganisations]').val(JSON.stringify(organisations));\n    $('.orgRow').remove();\n    var id = 0;\n    var html = '';\n    organisations.forEach(function(org) {\n        html = '<tr id=\"orgRow' + id + '\" class=\"orgRow\">';\n        html += '<td class=\"short\">' + org.type + '&nbsp;</td>';\n        html += '<td>' + $('<div>').text(org.name).html() + '&nbsp;</td>';\n        html += '<td>' + org.uuid + '&nbsp;</td>';\n        html += '<td class=\"short\" style=\"text-align:center;\">';\n        if (org.removable == 1) {\n            html += '<input id=\"orgExtend' + id + '\" type=\"checkbox\" onClick=\"sharingGroupExtendOrg(' + id + ')\" ';\n            if (org.extend) html+= 'checked';\n            html += '></input>';\n        } else {\n            html += '<span class=\"icon-ok\"></span>'\n        }\n        html +='</td>';\n        html += '<td class=\"actions short\">';\n        if (org.removable == 1) html += '<span class=\"icon-trash\" onClick=\"sharingGroupRemoveOrganisation(' + id + ')\"></span>';\n        html += '&nbsp;</td></tr>';\n        $('#organisations_table tr:last').after(html);\n        id++;\n    });\n}\n\nfunction sharingGroupPopulateServers() {\n    $('input[id=SharingGroupServers]').val(JSON.stringify(servers));\n    $('.serverRow').remove();\n    var id = 0;\n    var html = '';\n    servers.forEach(function(server) {\n        html = '<tr id=\"serverRow' + id + '\" class=\"serverRow\">';\n        html += '<td>' + server.name + '&nbsp;</td>';\n        html += '<td>' + server.url + '&nbsp;</td>';\n        html += '<td>';\n        html += '<input id=\"serverAddOrgs' + id + '\" type=\"checkbox\" onClick=\"sharingGroupServerAddOrgs(' + id + ')\" ';\n        if (server.all_orgs) html += 'checked';\n        html += '></input>';\n        html +='</td>';\n        html += '<td class=\"actions short\">';\n        if (server.removable == 1) html += '<span class=\"icon-trash\" onClick=\"sharingGroupRemoveServer(' + id + ')\"></span>';\n        html += '&nbsp;</td></tr>';\n        $('#servers_table tr:last').after(html);\n        id++;\n    });\n}\n\nfunction sharingGroupExtendOrg(id) {\n    organisations[id].extend = $('#orgExtend' + id).is(\":checked\");\n}\n\nfunction sharingGroupServerAddOrgs(id) {\n    servers[id].all_orgs = $('#serverAddOrgs' + id).is(\":checked\");\n}\n\nfunction sharingGroupPopulateUsers() {\n    $('input[id=SharingGroupServers]').val(JSON.stringify(organisations));\n}\n\nfunction sharingGroupAdd(context, type) {\n    if (context == 'organisation') {\n        var jsonids = JSON.stringify(orgids);\n        url = '/organisations/fetchOrgsForSG/' + jsonids + '/' + type\n    } else if (context == 'server') {\n        var jsonids = JSON.stringify(serverids);\n        url = '/servers/fetchServersForSG/' + jsonids\n    }\n    $(\"#gray_out\").fadeIn();\n    simplePopup(url);\n}\n\nfunction sharingGroupRemoveOrganisation(id) {\n    organisations.splice(id, 1);\n    orgids.splice(id, 1);\n    sharingGroupPopulateOrganisations();\n}\n\nfunction sharingGroupRemoveServer(id) {\n    servers.splice(id, 1);\n    serverids.splice(id, 1);\n    sharingGroupPopulateServers();\n}\n\nfunction submitPicklistValues(context, local) {\n    if (context == 'org') {\n        var localType = 'local';\n        if (local == 0) localType = 'remote';\n        $(\"#rightValues  option\").each(function() {\n            if (orgids.indexOf($(this).val()) == -1) {\n                organisations.push({\n                        id: $(this).val(),\n                        type: localType,\n                        name: $(this).text(),\n                        extend: false,\n                        uuid: '',\n                        removable: 1\n                });\n            }\n            orgids.push($(this).val());\n            sharingGroupPopulateOrganisations();\n        });\n    } else if (context == 'server') {\n        $(\"#rightValues  option\").each(function() {\n            if (serverids.indexOf($(this).val()) == -1) {\n                servers.push({\n                        id: $(this).val(),\n                        name: $(this).text(),\n                        url: $(this).attr(\"data-url\"),\n                        all_orgs: false,\n                        removable: 1\n                });\n            }\n            serverids.push($(this).val());\n            sharingGroupPopulateServers();\n        });\n    }\n    $(\"#gray_out\").fadeOut();\n    $(\"#popover_form\").fadeOut();\n}\n\nfunction cancelPicklistValues() {\n    $(\"#popover_form\").fadeOut();\n    $(\"#gray_out\").fadeOut();\n}\n\nfunction sgSubmitForm(action) {\n    var ajax = {\n            'organisations': organisations,\n            'servers': servers,\n            'sharingGroup': {\n                'name': $('#SharingGroupName').val(),\n                'releasability': $('#SharingGroupReleasability').val(),\n                'description': $('#SharingGroupDescription').val(),\n                'active': $('#SharingGroupActive').is(\":checked\"),\n                'roaming': $('#SharingGroupRoaming').is(\":checked\"),\n            }\n    };\n    $('#SharingGroupJson').val(JSON.stringify(ajax));\n    var formName = \"#SharingGroup\" + action + \"Form\";\n    $(formName).submit();\n}\n\nfunction serverSubmitForm(action) {\n    var ajax = {};\n    switch ($('#ServerOrganisationType').val()) {\n    case '0':\n        ajax = {\n            'id': $('#ServerLocal').val()\n        };\n        break;\n    case '1':\n        ajax = {\n            'id': $('#ServerExternal').val()\n        };\n        break;\n    case '2':\n        ajax = {\n            'name': $('#ServerExternalName').val(),\n            'uuid': $('#ServerExternalUuid').val()\n        };\n        break;\n    }\n\n    $('#ServerJson').val(JSON.stringify(ajax));\n    var formName = \"#Server\" + action + \"Form\";\n    $(formName).submit();\n}\n\nfunction serverOrgTypeChange() {\n    $(\".hiddenField\").hide();\n    switch ($('#ServerOrganisationType').val()) {\n        case '0':\n            $(\"#ServerLocalContainer\").show();\n            break;\n        case '1':\n            $(\"#ServerExternalContainer\").show();\n            break;\n        case '2':\n            $(\"#ServerExternalUuidContainer\").show();\n            $(\"#ServerExternalNameContainer\").show();\n            break;\n    }\n}\n\nfunction sharingGroupPopulateFromJson() {\n    var jsonparsed = JSON.parse($('#SharingGroupJson').val());\n    organisations = jsonparsed.organisations;\n    servers = jsonparsed.servers;\n    if (jsonparsed.sharingGroup.active == 1) {\n        $(\"#SharingGroupActive\").prop(\"checked\", true);\n    }\n    if (jsonparsed.sharingGroup.roaming == 1) {\n        $(\"#SharingGroupRoaming\").prop(\"checked\", true);\n        $('#serverList').show();\n    }\n    $('#SharingGroupName').attr('value', jsonparsed.sharingGroup.name);\n    $('#SharingGroupReleasability').attr('value', jsonparsed.sharingGroup.releasability);\n    $('#SharingGroupDescription').text(jsonparsed.sharingGroup.description);\n}\n\nfunction testConnection(id) {\n    $.ajax({\n        url: '/servers/testConnection/' + id,\n        type:'GET',\n        beforeSend: function (XMLHttpRequest) {\n            $(\"#connection_test_\" + id).html('Running test...');\n        },\n        error: function(){\n            $(\"#connection_test_\" + id).html('Internal error.');\n        },\n        success: function(response){\n            var result = response;\n            switch (result.status) {\n            case 1:\n                status_message = \"OK\";\n                compatibility = \"Compatible\";\n                compatibility_colour = \"green\";\n                colours = {'local': 'class=\"green\"', 'remote': 'class=\"green\"', 'status': 'class=\"green\"'};\n                issue_colour = \"red\";\n                if (result.mismatch == \"hotfix\") issue_colour = \"orange\";\n                if (result.newer == \"local\") {\n                    colours.remote = 'class=\"' + issue_colour + '\"';\n                    if (result.mismatch == \"minor\") {\n                        compatibility = \"Pull only\";\n                        compatibility_colour = \"orange\";\n                    } else if (result.mismatch == \"major\") {\n                        compatibility = \"Incompatible\";\n                        compatibility_colour = \"red\";\n                    }\n                } else if (result.newer == \"remote\") {\n                    colours.local = 'class=\"' + issue_colour + '\"';\n                    if (result.mismatch != \"hotfix\") {\n                        compatibility = \"Incompatible\";\n                        compatibility_colour = \"red\";\n                    }\n                }\n                if (result.mismatch != false) {\n                    if (result.newer == \"remote\") status_message = \"Local instance outdated, update!\";\n                    else status_message = \"Remote outdated, notify admin!\"\n                    colours.status = 'class=\"' + issue_colour + '\"';\n                }\n                if (result.post != false) {\n                    var post_colour = \"red\";\n                    if (result.post == 1) {\n                        post_colour = \"green\";\n                        post_result = \"Received sent package\";\n                    } else if (result.post == 8) {\n                        post_result = \"Could not POST message\";\n                    } else if (result.post == 9) {\n                        post_result = \"Invalid body\";\n                    } else if (result.post == 10) {\n                        post_result = \"Invalid headers\";\n                    } else {\n                        post_colour = \"orange\";\n                        post_result = \"Remote too old for this test\";\n                    }\n                }\n                resultDiv = '<div>Local version: <span ' + colours.local + '>' + result.local_version + '</span><br />';\n                resultDiv += '<div>Remote version: <span ' + colours.remote + '>' + result.version + '</span><br />';\n                resultDiv += '<div>Status: <span ' + colours.status + '>' + status_message + '</span><br />';\n                resultDiv += '<div>Compatiblity: <span class=\"' + compatibility_colour + '\">' + compatibility + '</span><br />';\n                resultDiv += '<div>POST test: <span class=\"' + post_colour + '\">' + post_result + '</span><br />';\n                $(\"#connection_test_\" + id).html(resultDiv);\n                //$(\"#connection_test_\" + id).html('<span class=\"green bold\" title=\"Connection established, correct response received.\">OK</span>');\n                break;\n            case 2:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"There seems to be a connection issue. Make sure that the entered URL is correct and that the certificates are in order.\">Server unreachable</span>');\n                break;\n            case 3:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"The server returned an unexpected result. Make sure that the provided URL (or certificate if it applies) are correct.\">Unexpected error</span>');\n                break;\n            case 4:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"Authentication failed due to incorrect authentication key or insufficient privileges on the remote instance.\">Authentication failed</span>');\n                break;\n            case 5:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"Authentication failed because the sync user is expected to change passwords. Log into the remote MISP to rectify this.\">Password change required</span>');\n                break;\n            case 6:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"Authentication failed because the sync user on the remote has not accepted the terms of use. Log into the remote MISP to rectify this.\">Terms not accepted</span>');\n                break;\n            case 7:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"The user account on the remote instance is not a sync user.\">Remote user not a sync user</span>');\n                break;\n            }\n        }\n    })\n}\n\nfunction pgpChoiceSelect(uri) {\n    $(\"#popover_form\").fadeOut();\n    $(\"#gray_out\").fadeOut();\n    $.ajax({\n        type: \"get\",\n        url: \"https://pgp.circl.lu\" + uri,\n        success: function (data) {\n            var result = data.split(\"<pre>\")[1].split(\"</pre>\")[0];\n            $(\"#UserGpgkey\").val(result);\n            showMessage('success', \"Key found!\");\n        },\n        error: function (data, textStatus, errorThrown) {\n            showMessage('fail', textStatus + \": \" + errorThrown);\n            $(\".loading\").hide();\n            $(\"#gray_out\").fadeOut();\n        }\n    });\n}\n\nfunction lookupPGPKey(emailFieldName) {\n    simplePopup(\"/users/fetchPGPKey/\" + $('#' + emailFieldName).val());\n}\n\nfunction zeroMQServerAction(action) {\n    $.ajax({\n        type: \"get\",\n        url: \"/servers/\" + action + \"ZeroMQServer/\",\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success: function (data) {\n            $(\".loading\").hide();\n            if (action !== 'status') {\n                window.location.reload();\n            } else {\n                $(\"#confirmation_box\").html(data);\n                openPopup(\"#confirmation_box\");\n            }\n        },\n        error: function (data, textStatus, errorThrown) {\n            showMessage('fail', textStatus + \": \" + errorThrown);\n        }\n    });\n}\n\nfunction convertServerFilterRules(rules) {\n    validOptions.forEach(function (type) {\n        container = \"#\"+ modelContext + type.ucfirst() + \"Rules\";\n        if ($(container).val() != '' && $(container).val() != '[]') rules[type] = JSON.parse($(container).val());\n        else {rules[type] = {\"tags\": {\"OR\": [], \"NOT\": []}, \"orgs\": {\"OR\": [], \"NOT\": []}}};\n    });\n    serverRuleUpdate();\n    return rules;\n}\n\nfunction serverRuleUpdate() {\n    var statusOptions = [\"OR\", \"NOT\"];\n    validOptions.forEach(function(type) {\n        validFields.forEach(function(field) {\n            if (type === 'push') {\n                var indexedList = {};\n                window[field].forEach(function(item) {\n                    indexedList[item.id] = item.name;\n                });\n            }\n            statusOptions.forEach(function(status) {\n                if (rules[type][field][status].length > 0) {\n                    $('#' + type + '_' + field + '_' + status).show();\n                    var t = '';\n                    rules[type][field][status].forEach(function(item) {\n                        if (t.length > 0) t += ', ';\n                        if (type === 'pull') t += item;\n                        else t += indexedList[item];\n                    });\n                    $('#' + type + '_' + field + '_' + status + '_text').text(t);\n                } else {\n                    $('#' + type + '_' + field + '_' + status).hide();\n                }\n            });\n        });\n    });\n    serverRuleGenerateJSON();\n}\n\nfunction serverRuleFormActivate(type) {\n    if (type != 'pull' && type != 'push') return false;\n    $('.server_rule_popover').hide();\n    $('#gray_out').fadeIn();\n    $('#server_' + type + '_rule_popover').show();\n}\n\nfunction serverRuleCancel() {\n    $(\"#gray_out\").fadeOut();\n    $(\".server_rule_popover\").fadeOut();\n}\n\nfunction serverRuleGenerateJSON() {\n    validOptions.forEach(function(type) {\n        if ($('#Server' + type.ucfirst() + \"Rules\").length) {\n            $('#Server' + type.ucfirst() + \"Rules\").val(JSON.stringify(rules[type]));\n        } else {\n            $('#Feed' + type.ucfirst() + \"Rules\").val(JSON.stringify(rules[type]));\n        }\n    });\n}\n\nfunction serverRulePopulateTagPicklist() {\n    var fields = [\"tags\", \"orgs\"];\n    var target = \"\";\n    fields.forEach(function(field) {\n        target = \"\";\n        window[field].forEach(function(element) {\n            if ($.inArray(element.id, rules[\"push\"][field][\"OR\"]) != -1) target = \"#\" + field + \"pushLeftValues\";\n            else if ($.inArray(element.id, rules[\"push\"][field][\"NOT\"]) != -1) target = \"#\" + field + \"pushRightValues\";\n            else target = \"#\" + field + \"pushMiddleValues\";\n            $(target).append($('<option/>', {\n                value: element.id,\n                text : element.name\n            }));\n        });\n        target = \"#\" + field + \"pullLeftValues\";\n        rules[\"pull\"][field][\"OR\"].forEach(function(t) {\n            $(target).append($('<option/>', {\n                value: t,\n                text : t\n            }));\n        });\n        target = \"#\" + field + \"pullRightValues\";\n        rules[\"pull\"][field][\"NOT\"].forEach(function(t) {\n            $(target).append($('<option/>', {\n                value: t,\n                text : t\n            }));\n        });\n    });\n}\n\nfunction submitServerRulePopulateTagPicklistValues(context) {\n    validFields.forEach(function(field) {\n        rules[context][field][\"OR\"] = [];\n        $(\"#\" + field + context + \"LeftValues option\").each(function() {\n            rules[context][field][\"OR\"].push($(this).val());\n        });\n        rules[context][field][\"NOT\"] = [];\n        $(\"#\" + field + context + \"RightValues option\").each(function() {\n            rules[context][field][\"NOT\"].push($(this).val());\n        });\n    });\n\n    $('#server_' + context + '_rule_popover').fadeOut();\n    $('#gray_out').fadeOut();\n    serverRuleUpdate();\n}\n\n// type = pull/push, field = tags/orgs, from = Left/Middle/Right, to = Left/Middle/Right\nfunction serverRuleMoveFilter(type, field, from, to) {\n    var opposites = {\"Left\": \"Right\", \"Right\": \"Left\"};\n    // first fetch the value\n    var value = \"\";\n    if (type == \"pull\" && from == \"Middle\") {\n        var doInsert = true;\n        value = $(\"#\" + field + type + \"NewValue\").val();\n        if (value.length !== 0 && value.trim()) {\n            $(\"#\" + field + type + to + \"Values\" + \" option\").each(function() {\n                if (value == $(this).val()) doInsert = false;\n            });\n            $(\"#\" + field + type + opposites[to] + \"Values\" + \" option\").each(function() {\n                if (value == $(this).val()) $(this).remove();\n            });\n            if (doInsert) {\n                $(\"#\" + field + type + to + \"Values\").append($('<option/>', {\n                    value: value,\n                    text : value\n                }));\n            }\n        }\n        $(\"#\" + field + type + \"NewValue\").val('');\n    } else {\n        $(\"#\" + field + type + from + \"Values option:selected\").each(function () {\n            if (type != \"pull\" || to != \"Middle\") {\n                value = $(this).val();\n                text = $(this).text();\n                $(\"#\" + field + type + to + \"Values\").append($('<option/>', {\n                    value: value,\n                    text : text\n                }));\n            }\n            $(this).remove();\n        });\n    }\n}\n\nfunction syncUserSelected() {\n    if ($('#UserRoleId :selected').val() in syncRoles) {\n        $('#syncServers').show();\n    } else {\n        $('#syncServers').hide();\n    }\n}\n\nfunction filterAttributes(filter, id) {\n    url = \"/events/viewEventAttributes/\" + id;\n    if(filter === 'value'){\n        filter = $('#quickFilterField').val().trim();\n        url += filter.length > 0 ? \"/searchFor:\" + filter : \"\";\n    } else if(filter !== 'all') {\n        url += \"/attributeFilter:\" + filter\n        filter = $('#quickFilterField').val().trim();\n        url += filter.length > 0 ? \"/searchFor:\" + filter : \"\";\n    }\n    if (deleted) url += '/deleted:true';\n    $.ajax({\n        type:\"get\",\n        url:url,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data) {\n            $(\"#attributes_div\").html(data);\n            $(\".loading\").hide();\n        },\n        error:function() {\n            showMessage('fail', 'Something went wrong - could not fetch attributes.');\n        }\n    });\n}\n\nfunction pivotObjectReferences(url, uuid) {\n    url += '/focus:' + uuid;\n    $.ajax({\n        type:\"get\",\n        url:url,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data) {\n            $(\"#attributes_div\").html(data);\n            $(\".loading\").hide();\n        },\n        error:function() {\n            showMessage('fail', 'Something went wrong - could not fetch attributes.');\n        }\n    });\n}\n\nfunction toggleBoolFilter(url, param) {\n    if (querybuilderTool === undefined) {\n        triggerEventFilteringTool(true); // allows to fetch rules\n    }\n    var rules = querybuilderTool.getRules({ skip_empty: true, allow_invalid: true });\n    var res = cleanRules(rules);\n    Object.keys(res).forEach(function(k) {\n        if (url.indexOf(k) > -1) { // delete url rule (will be replaced by query builder value later on)\n            var replace = '\\/' + k + \".+/?\";\n            var re = new RegExp(replace,\"i\");\n            url = url.replace(re, '');\n        }\n    });\n\n    if (res[param] !== undefined) { // allow toggle for `deleted`.\n        res[param] = res[param] == '0' ? '2' : '0';\n    } else {\n        res[param] = '0';\n    }\n\n    url += buildFilterURL(res);\n    url = url.replace(/view\\//i, 'viewEventAttributes/');\n\n    $.ajax({\n        type:\"get\",\n        url:url,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data) {\n            $(\"#attributes_div\").html(data);\n            querybuilderTool = undefined;\n            $(\".loading\").hide();\n        },\n        error:function() {\n            showMessage('fail', 'Something went wrong - could not fetch attributes.');\n        }\n    });\n}\n\nfunction mergeOrganisationUpdate() {\n    var orgTypeOptions = ['local', 'external'];\n    var orgTypeSelects = ['OrganisationOrgsLocal', 'OrganisationOrgsExternal'];\n    var orgTypeId = $('#OrganisationTargetType').val();\n    var orgType = orgTypeSelects[orgTypeId];\n    var orgID = $('#' + orgTypeSelects[orgTypeId]).val();\n    console.log(orgTypeSelects[orgTypeId]);\n    console.log(orgID);\n    org = orgArray[orgTypeOptions[orgTypeId]][orgID]['Organisation'];\n    console.log(org);\n    $('#org_id').text(org['id']);\n    $('#org_name').text(org['name']);\n    $('#org_uuid').text(org['uuid']);\n    $('#org_local').text(orgTypeOptions[$('#OrganisationTargetType').val()]);\n}\n\nfunction mergeOrganisationTypeToggle() {\n    if ($('#OrganisationTargetType').val() == 0) {\n        $('#orgsLocal').show();\n        $('#orgsExternal').hide();\n    } else {\n        $('#orgsLocal').hide();\n        $('#orgsExternal').show();\n    }\n}\n\nfunction feedDistributionChange() {\n    if ($('#FeedDistribution').val() == 4) $('#SGContainer').show();\n    else $('#SGContainer').hide();\n}\n\nfunction checkUserPasswordEnabled() {\n    if ($('#UserEnablePassword').is(':checked')) {\n        $('#PasswordDiv').show();\n    } else {\n        $('#PasswordDiv').hide();\n    }\n}\n\nfunction checkUserExternalAuth() {\n    if ($('#UserExternalAuthRequired').is(':checked')) {\n        $('#externalAuthDiv').show();\n        $('#passwordDivDiv').hide();\n    } else {\n        $('#externalAuthDiv').hide();\n        $('#passwordDivDiv').show();\n    }\n}\n\nfunction toggleSettingSubGroup(group) {\n    $('.subGroup_' + group).toggle();\n}\n\nfunction runHoverLookup(type, id) {\n    $.ajax({\n        success:function (html) {\n            ajaxResults[\"hover\"][type + \"_\" + id] = html;\n            var element = $('#' + type + '_' + id + '_container');\n            element.popover({\n                title: attributeHoverTitle(id, type),\n                content: html,\n                placement: attributeHoverPlacement(element),\n                html: true,\n                trigger: 'manual',\n                container: 'body'\n            }).popover('show');\n            $('#' + currentPopover).popover('destroy');\n            currentPopover = type + '_' + id + '_container'\n        },\n        cache: false,\n        url:\"/attributes/hoverEnrichment/\" + id,\n    });\n}\n\n$(\".cortex-json\").click(function() {\n    var cortex_data = $(this).data('cortex-json');\n    cortex_data = htmlEncode(JSON.stringify(cortex_data, null, 2));\n    var popupHtml = '<pre class=\"simplepre\">' + cortex_data + '</pre>';\n    popupHtml += '<div class=\"close-icon useCursorPointer\" onClick=\"closeScreenshot();\"></div>';\n\n});\n\n// add the same as below for click popup\n$(document).on( \"click\", \".eventViewAttributePopup\", function() {\n    $('#popover_box').empty();\n    type = $(this).attr('data-object-type');\n    id = $(this).attr('data-object-id');\n    if (!(type + \"_\" + id in ajaxResults[\"persistent\"])) {\n        $.ajax({\n            success:function (html) {\n                ajaxResults[\"persistent\"][type + \"_\" + id] = html;\n            },\n            async: false,\n            cache: false,\n            url:\"/attributes/hoverEnrichment/\" + id + \"/1\",\n        });\n    }\n    if (type + \"_\" + id in ajaxResults[\"persistent\"]) {\n        var enrichment_popover = ajaxResults[\"persistent\"][type + \"_\" + id];\n        enrichment_popover += '<div class=\"close-icon useCursorPointer popup-close-icon\" onClick=\"closeScreenshot();\"></div>';\n        $('#popover_box').html('<div class=\"screenshot_content\">' + enrichment_popover + '</div>');\n        $('#popover_box').show();\n        $(\"#gray_out\").fadeIn();\n        $('#popover_box').css({'padding': '5px'});\n        $('#popover_box').css( \"maxWidth\", ( $( window ).width() * 0.9 | 0 ) + \"px\" );\n        $('#popover_box').css( \"maxHeight\", ( $( window ).width() - 300 | 0 ) + \"px\" );\n        $('#popover_box').css( \"overflow-y\", \"auto\");\n\n        var left = ($(window).width() / 2) - ($('#popover_box').width() / 2);\n        $('#popover_box').css({'left': left + 'px'});\n    }\n    $('#' + currentPopover).popover('destroy');\n});\n\nfunction flashErrorPopover() {\n    $('#popover_form').css( \"minWidth\", \"200px\");\n    $('#popover_form').html($('#flashErrorMessage').html());\n    $('#popover_form').show();\n    var left = ($(window).width() / 2) - ($('#popover_form').width() / 2);\n    $('#popover_form').css({'left': left + 'px'});\n    $(\"#gray_out\").fadeIn();\n}\n\nfunction attributeHoverTitle(id, type) {\n  return `<span>Lookup results:</span>\n\t\t<i class=\"fa fa-search-plus useCursorPointer eventViewAttributePopup\"\n\t\t\t\tstyle=\"float: right;\"\n\t\t\t\tdata-object-id=\"${id}\"\n\t\t\t\tdata-object-type=\"${type}\">\n\t</i>`;\n}\n\nfunction attributeHoverPlacement(element) {\n  var offset = element.offset(),\n    topOffset = offset.top - $(window).scrollTop(),\n    left = offset.left - $(window).scrollLeft(),\n    viewportHeight = window.innerHeight,\n    viewportWidth = window.innerWidth,\n    horiz = 0.5 * viewportWidth - left,\n    horizPlacement = horiz > 0 ? 'right' : 'left',\n    popoverMaxHeight = .75 * viewportHeight;\n\n  // default to top placement\n  var placement = topOffset - popoverMaxHeight > 0 ? 'top' : horizPlacement;\n\n  // more space on bottom\n  if (topOffset < .5 * viewportHeight) {\n    // will popup fit on bottom\n    placement = popoverMaxHeight < topOffset ? 'bottom' : horizPlacement;\n  }\n\n  return placement;\n}\n\n$('body').on('click', function (e) {\n  $('[data-toggle=popover]').each(function () {\n    // hide any open popovers when the anywhere else in the body is clicked\n    if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {\n      $('#' + currentPopover).popover('destroy');\n    }\n  });\n});\n\nfunction serverOwnerOrganisationChange(host_org_id) {\n    if ($('#ServerOrganisationType').val() == \"0\" && $('#ServerLocal').val() == host_org_id) {\n        $('#InternalDiv').show();\n    } else {\n        $('#ServerInternal').prop(\"checked\", false);\n        $('#InternalDiv').hide();\n    }\n}\n\nfunction requestAPIAccess() {\n    url = \"/users/request_API/\";\n    $.ajax({\n        type:\"get\",\n        url:url,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data) {\n            $(\".loading\").hide();\n            handleGenericAjaxResponse(data);\n        },\n        error:function() {\n            showMessage('fail', 'Something went wrong - could not request API access.');\n        }\n    });\n}\n\nfunction initPopoverContent(context) {\n    for (var property in formInfoFields) {\n        if (formInfoFields.hasOwnProperty(property)) {\n            $('#' + property + 'InfoPopover').popover(\"destroy\").popover({\n                placement: 'right',\n                html: 'true',\n                trigger: 'hover',\n                content: getFormInfoContent(property, '#' + context + formInfoFields[property])\n            });\n        }\n    }\n}\n\nfunction getFormInfoContent(property, field) {\n    var content = window[property + 'FormInfoValues'][$(field).val()];\n    if (content === undefined || content === null) {\n        return 'N/A';\n    }\n    return content;\n}\n\nfunction formCategoryChanged(id) {\n    // fill in the types\n    var options = $('#' + id +'Type').prop('options');\n    $('option', $('#' + id +'Type')).remove();\n    $.each(category_type_mapping[$('#' + id +'Category').val()], function(val, text) {\n        options[options.length] = new Option(text, val);\n    });\n    // enable the form element\n    $('#AttributeType').prop('disabled', false);\n}\n\nfunction malwareCheckboxSetter(context) {\n    idDiv = \"#\" + context + \"Category\" +'Div';\n    var value = $(\"#\" + context + \"Category\").val();  // get the selected value\n    // set the malware checkbox if the category is in the zip types\n    $(\"#\" + context + \"Malware\").prop('checked', formZipTypeValues[value] == \"true\");\n}\n\nfunction feedFormUpdate() {\n    $('.optionalField').hide();\n    switch($('#FeedSourceFormat').val()) {\n        case 'freetext':\n            $('#TargetDiv').show();\n            $('#OverrideIdsDiv').show();\n            $('#PublishDiv').show();\n            if ($('#FeedTarget').val() != 0) {\n                $('#TargetEventDiv').show();\n                $('#DeltaMergeDiv').show();\n            }\n            $('#settingsCommonExcluderegexDiv').show();\n            break;\n        case 'csv':\n            $('#TargetDiv').show();\n            $('#OverrideIdsDiv').show();\n            $('#PublishDiv').show();\n            if ($('#FeedTarget').val() != 0) {\n                $('#TargetEventDiv').show();\n                $('#DeltaMergeDiv').show();\n            }\n            $('#settingsCsvValueDiv').show();\n            $('#settingsCsvDelimiterDiv').show();\n            $('#settingsCommonExcluderegexDiv').show();\n            break;\n    }\n    if ($('#FeedInputSource').val() == 'local') {\n        $('#DeleteLocalFileDiv').show();\n        $('#HeadersDiv').hide();\n    } else {\n        $('#DeleteLocalFileDiv').hide();\n        $('#HeadersDiv').show();\n    }\n}\n\nfunction setContextFields() {\n    if (showContext) {\n        $('.context').show();\n        $('#show_context').addClass(\"attribute_filter_text_active\");\n        $('#show_context').removeClass(\"attribute_filter_text\");\n    } else {\n        $('.context').hide();\n        $('#show_context').addClass(\"attribute_filter_text\");\n        $('#show_context').removeClass(\"attribute_filter_text_active\");\n    }\n}\n\nfunction toggleContextFields() {\n    if (!showContext) {\n        showContext = true;\n    } else {\n        showContext = false;\n    }\n    setContextFields();\n}\n\nfunction checkOrphanedAttributes() {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            var color = 'red';\n            var text = ' (Removal recommended)';\n            if (data == '0') {\n                color = 'green';\n                text = ' (OK)';\n            }\n            $(\"#orphanedAttributeCount\").html('<span class=\"' + color + '\">' + data + text + '</span>');\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"get\",\n        cache: false,\n        url: \"/attributes/checkOrphanedAttributes/\",\n    });\n}\n\nfunction checkAttachments() {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            var color = 'red';\n            var text = ' (Bad links detected)';\n            if (data !== undefined && data.trim() == '0') {\n                color = 'green';\n                text = ' (OK)';\n            }\n            $(\"#orphanedFileCount\").html('<span class=\"' + color + '\">' + data + text + '</span>');\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"get\",\n        cache: false,\n        url: \"/attributes/checkAttachments/\",\n    });\n}\n\nfunction loadTagTreemap() {\n    $.ajax({\n        async:true,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            $(\".treemapdiv\").html(data);\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"get\",\n        cache: false,\n        url: \"/users/tagStatisticsGraph\",\n    });\n}\n\nfunction loadSightingsData(timestamp) {\n    url = \"/sightings/toplist\";\n    if (timestamp != undefined) {\n        url = url + '/' + timestamp;\n    }\n    $.ajax({\n        async:true,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            $(\".sightingsdiv\").html(data);\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"get\",\n        cache: false,\n        url: url,\n    });\n}\n\nfunction quickEditEvent(id, field) {\n    $.ajax({\n        async:true,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            $(\"#\" + field + \"Field\").html(data);\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"get\",\n        cache: false,\n        url: \"/events/quickEdit/\" + id + \"/\" + field,\n    });\n}\n\nfunction selectAllInbetween(last, current) {\n    if (last === false || last == current) return false;\n    var from = $('#' + last).parent().parent().index();\n    var to = $('#' + current).parent().parent().index();\n    if (to < from) {\n        var temp = from;\n        from = to;\n        to = temp;\n    }\n    $('.select_proposal, .select_attribute').each(function () {\n        if ($('#' + this.id).parent().parent().index() >= from && $('#' + this.id).parent().parent().index() <= to) {\n            $(this).prop('checked', true);\n        }\n    });\n}\n\n$('.galaxy-toggle-button').click(function() {\n    var element = $(this).data('toggle-type');\n    if ($(this).children('span').hasClass('icon-minus')) {\n        $(this).children('span').addClass('icon-plus');\n        $(this).children('span').removeClass('icon-minus');\n        $('#' + element + '_div').hide();\n    } else {\n        $(this).children('span').removeClass('icon-plus');\n        $(this).children('span').addClass('icon-minus');\n        $('#' + element + '_div').show();\n    }\n});\n\n\nfunction addGalaxyListener(id) {\n    var target_type = $(id).data('target-type');\n    var target_id = $(id).data('target-id');\n    popoverPopup(id, target_id + '/' + target_type, 'galaxies', 'selectGalaxyNamespace');\n}\n\nfunction quickSubmitGalaxyForm(cluster_ids, additionalData) {\n    var target_id = additionalData['target_id'];\n    var scope = additionalData['target_type'];\n    var formData = fetchFormDataAjax(\"/galaxies/attachMultipleClusters/\" + target_id + \"/\" + scope);\n    console.log(formData);\n    $('#temp').html(formData);\n    $('#GalaxyTargetIds').val(JSON.stringify(cluster_ids));\n    if (target_id == 'selected') {\n        $('#AttributeAttributeIds').val(getSelected());\n    }\n    $.ajax({\n        data: $('#GalaxyAttachMultipleClustersForm').serialize(),\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            if (target_id === 'selected') {\n                location.reload();\n            } else {\n                if (scope == 'tag_collection') {\n                    location.reload();\n                } else {\n                    loadGalaxies(target_id, scope);\n                    handleGenericAjaxResponse(data);\n                }\n            }\n        },\n        error:function() {\n            showMessage('fail', 'Could not add cluster.');\n            loadGalaxies(target_id, scope);\n        },\n        complete:function() {\n            $(\"#popover_form\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n            $(\".loading\").hide();\n        },\n        type:\"post\",\n        url: \"/galaxies/attachMultipleClusters/\" + target_id + \"/\" + scope\n    });\n    $('#temp').remove();\n    return false;\n}\n\nfunction checkAndSetPublishedInfo(skip_reload) {\n    if (typeof skip_reload === \"undefined\") {\n        skip_reload = false;\n    }\n    var id = $('#hiddenSideMenuData').data('event-id');\n    if (id !== 'undefined' && !skip_reload) {\n        $.get( \"/events/checkPublishedStatus/\" + id, function(data) {\n            if (data == 1) {\n                $('.published').removeClass('hidden');\n                $('.not-published').addClass('hidden');\n            } else {\n                $('.published').addClass('hidden');\n                $('.not-published').removeClass('hidden');\n            }\n        });\n    }\n}\n\n$(document).keyup(function(e){\n    if (e.keyCode === 27) {\n    $(\"#gray_out\").fadeOut();\n        $(\"#popover_form\").fadeOut();\n        $(\"#popover_form_large\").fadeOut();\n        $(\"#screenshot_box\").fadeOut();\n        $(\"#popover_box\").fadeOut();\n        $(\"#confirmation_box\").fadeOut();\n        $(\".loading\").hide();\n        resetForms();\n    }\n});\n\nfunction closeScreenshot() {\n    $(\"#screenshot_box\").fadeOut();\n    $(\"#gray_out\").fadeOut();\n}\n\nfunction loadSightingGraph(id, scope) {\n    $.get( \"/sightings/viewSightings/\" + id + \"/\" + scope, function(data) {\n        $(\"#sightingsData\").html(data);\n    });\n}\n\nfunction checkRolePerms() {\n    if ($(\"#RolePermission\").val() == '0' || $(\"#RolePermission\").val() == '1') {\n        $('.readonlydisabled').prop('checked', false);\n        $('.readonlydisabled').hide();\n    } else {\n        $('.readonlydisabled').show();\n        $('.permFlags').show();\n    }\n    if ($(\"#RolePermSiteAdmin\").prop('checked')) {\n        $('.checkbox').prop('checked', true);\n    }\n}\n\nfunction updateMISP() {\n    $.get( \"/servers/update\", function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction submitMISPUpdate() {\n    var formData = $('#PromptForm').serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            $('#gitResult').text(data);\n            $('#gitResult').removeClass('hidden');\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/servers/update\",\n    });\n}\n\nfunction submitSubmoduleUpdate(clicked) {\n    var $clicked = $(clicked);\n    var submodule_path = $clicked.data('submodule');\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $clicked.removeClass('fa-download');\n            $clicked.addClass('fa-spin fa-spinner');\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (formHTML, textStatus) {\n            var $form = $(formHTML);\n            $('body').append($form);\n            var formData = $form.serialize();\n            $.ajax({\n                data: formData,\n                success:function (data, textStatus) {\n                    if (data.status) {\n                        var job_sent = data.job_sent !== undefined ? data.job_sent : false;\n                        var sync_result = data.sync_result !== undefined ? data.sync_result : '';\n                        updateSubModulesStatus(data.output, job_sent, sync_result);\n                    } else {\n                        showMessage('error', 'Something went wrong');\n                        $('#submoduleGitResultDiv').show();\n                        $('#submoduleGitResult').removeClass('green').addClass('red').text(data.output);\n                    }\n                },\n                error: function (data) {\n                    showMessage('error', 'Something went wrong');\n                    $('#submoduleGitResultDiv').show();\n                    $('#submoduleGitResult').removeClass('green').addClass('red').text(data.output);\n                },\n                complete:function() {\n                    $clicked.removeClass('fa-spin fa-spinner');\n                    $clicked.addClass('fa-download');\n                    $form.remove();\n                },\n                type:\"post\",\n                cache: false,\n                url:$form.attr('action'),\n            });\n        },\n        url:'/servers/getSubmoduleQuickUpdateForm/' + (submodule_path !== undefined ? btoa(submodule_path) : ''),\n    });\n}\n\n// Show $(id) if the enable parameter evaluates to true. Hide it otherwise\nfunction checkAndEnable(id, enable) {\n    if (enable) {\n        $(id).show();\n    } else {\n        $(id).hide();\n    }\n}\n\n// Show and enable checkbox $(id) if the enable parameter evaluates to true. Hide and disable it otherwise.\nfunction checkAndEnableCheckbox(id, enable) {\n    if (enable) {\n        $(id).removeAttr(\"disabled\");\n        $(id).prop('checked', true);\n    } else {\n        $(id).prop('checked', false);\n        $(id).attr(\"disabled\", true);\n    }\n}\n\nfunction enableDisableObjectRows(rows) {\n    rows.forEach(function(i) {\n        if ($(\"#Attribute\" + i + \"ValueSelect\").length != 0) {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", true);\n        } else if ($(\"#Attribute\" + i + \"Attachment\").length != 0) {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(\"#Attribute\" + i + \"Attachment\").val() != \"\");\n        } else {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(\"#Attribute\" + i + \"Value\").val() != \"\");\n        }\n        $(\"#Attribute\" + i + \"Value\").bind('input propertychange', function() {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(this).val() != \"\");\n        });\n        $(\"#Attribute\" + i + \"Attachment\").on('change', function() {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(\"#Attribute\" + i + \"Attachment\").val() != \"\");\n        });\n    });\n}\n\nfunction objectReferenceInput() {\n    var types = [\"Attribute\", \"Object\"];\n    var $targetSelect = $('[data-targetselect=\"targetSelect\"]');\n    for (var type in types) {\n        for (var k in targetEvent[types[type]]) {\n            if (targetEvent[types[type]][k]['uuid'] == $('#ObjectReferenceReferencedUuid').val()) {\n                $targetSelect.val($('#ObjectReferenceReferencedUuid').val());\n                changeObjectReferenceSelectOption($('#ObjectReferenceReferencedUuid').val(), {type: types[type]});\n                $targetSelect.trigger('chosen:updated');\n            }\n        }\n    }\n}\n\nfunction objectReferenceCheckForCustomRelationship() {\n    var relationship_type_field = $('#ObjectReferenceRelationshipTypeSelect option:selected');\n    var relationship_type = $(relationship_type_field).val();\n    if (relationship_type == 'custom') {\n        $('#ObjectReferenceRelationshipType').parent().removeClass('hidden');\n    } else {\n        $('#ObjectReferenceRelationshipType').parent().addClass('hidden');\n    }\n}\n\nfunction add_basic_auth() {\n    var headers = $('#FeedHeaders').val().split(\"\\n\");\n    $('#FeedHeaders').val(\"\");\n    headers.forEach(function(header) {\n        header = header.trim();\n        if (header != \"\") {\n            header = header.split(\":\");\n            var key = header.shift();\n            var value = header.join(\":\");\n            if (key != 'Authorization') {\n                $('#FeedHeaders').val($('#FeedHeaders').val() + key.trim() + \":\" + value.trim() + \"\\n\");\n            }\n        }\n    });\n    var basicAuth = $('#BasicAuthUsername').val().trim() + ':' + $('#BasicAuthPassword').val().trim();\n    $('#FeedHeaders').val($('#FeedHeaders').val() + \"Authorization: Basic \" + btoa(basicAuth) + \"\\n\");\n    $('#basicAuthFormEnable').show();\n    $('#basicAuthForm').hide();\n}\n\nfunction changeObjectReferenceSelectOption(selected, additionalData) {\n    var uuid = selected;\n    var type = additionalData.type;\n    $('#ObjectReferenceReferencedUuid').val(uuid);\n    if (type == \"Attribute\") {\n        $('#targetData').html(\"\");\n        for (var k in targetEvent[type][uuid]) {\n            if ($.inArray(k, ['uuid', 'category', 'type', 'value', 'to_ids']) !== -1) {\n                $('#targetData').append('<div><span id=\"' + uuid + '_' + k + '_key\" class=\"bold\"></span>: <span id=\"' + uuid + '_' + k + '_data\"></span></div>');\n                $('#' + uuid + '_' + k + '_key').text(k);\n                $('#' + uuid + '_' + k + '_data').text(targetEvent[type][uuid][k]);\n            }\n        }\n    } else {\n        $('#targetData').html(\"\");\n        for (var k in targetEvent[type][uuid]) {\n            if (k == 'Attribute') {\n                $('#targetData').append('<br /><div><span id=\"header\" class=\"bold\">Attributes:</span>');\n                for (attribute in targetEvent[type][uuid]['Attribute']) {\n                    for (k2 in targetEvent[type][uuid]['Attribute'][attribute]) {\n                        if ($.inArray(k2, ['category', 'type', 'value', 'to_ids']) !== -1) {\n                            $('#targetData').append('<div class=\"indent\"><span id=\"' + targetEvent[type][uuid]['Attribute'][attribute]['uuid'] + '_' + k2 + '_key\" class=\"bold\"></span>: <span id=\"' + targetEvent[type][uuid]['Attribute'][attribute]['uuid'] + '_' + k2 + '_data\"></span></div>');\n                            $('#' + targetEvent[type][uuid]['Attribute'][attribute]['uuid'] + '_' + k2 + '_key').text(k2);\n                            $('#' + targetEvent[type][uuid]['Attribute'][attribute]['uuid'] + '_' + k2 + '_data').text(targetEvent[type][uuid]['Attribute'][attribute][k2]);\n                        }\n                    }\n                    $('#targetData').append('<br />');\n                }\n            } else {\n                if ($.inArray(k, ['name', 'uuid', 'meta-category']) !== -1) {\n                    $('#targetData').append('<div><span id=\"' + uuid + '_' + k + '_key\" class=\"bold\"></span>: <span id=\"' + uuid + '_' + k + '_data\"></span></div>');\n                    $('#' + uuid + '_' + k + '_key').text(k);\n                    $('#' + uuid + '_' + k + '_data').text(targetEvent[type][uuid][k]);\n                }\n            }\n        }\n    }\n}\n\nfunction previewEventBasedOnUuids() {\n    var currentValue = $(\"#EventExtendsUuid\").val();\n    if (currentValue == '') {\n        $('#extended_event_preview').hide();\n    } else {\n        $.ajax({\n            url: \"/events/getEventInfoById/\" + currentValue,\n            type: \"get\",\n            error: function() {\n                $('#extended_event_preview').hide();\n            },\n            success: function(data) {\n                $('#extended_event_preview').show();\n                $('#extended_event_preview').html(data);\n            }\n        });\n    }\n}\n\nfunction checkNoticeList(type) {\n    var fields_to_check = {\n        \"attribute\": [\"category\", \"type\"]\n    }\n    var warnings = [];\n    $('#notice_message').html('<h4>Notices:</h4>');\n    $('#notice_message').hide();\n    fields_to_check[type].forEach(function(field_name) {\n        if (field_name in notice_list_triggers) {\n            var field_value = $('#' + type.ucfirst() + field_name.ucfirst()).val();\n            if (field_value in notice_list_triggers[field_name]) {\n                notice_list_triggers[field_name][field_value].forEach(function(notice) {\n                    $('#notice_message').show();\n                    $('#notice_message').append(\n                        $('<div/>')\n                            .append($('<span/>').text('['))\n                            .append($('<a/>', {href: '/noticelists/view/' + notice['list_id'], class:'bold'}).text(notice['list_name']))\n                            .append($('<span/>').text(']: '))\n                            .append($('<span/>').text(notice['message']['en']))\n                    );\n                });\n            }\n        }\n    });\n\n}\n\n$(document).ready(function() {\n    $('#quickFilterField').bind(\"enterKey\",function(e){\n        $('#quickFilterButton').trigger(\"click\");\n    });\n    $('#quickFilterField').keyup(function(e){\n        if(e.keyCode == 13)\n        {\n            $('#quickFilterButton').trigger(\"click\");\n        }\n    });\n    $(\".eventViewAttributeHover\").mouseenter(function() {\n        $('#' + currentPopover).popover('destroy');\n        var type = $(this).attr('data-object-type');\n        var id = $(this).attr('data-object-id');\n\n        if (type + \"_\" + id in ajaxResults[\"hover\"]) {\n            var element = $('#' + type + '_' + id + '_container');\n            element.popover({\n                title: attributeHoverTitle(id, type),\n                content: ajaxResults[\"hover\"][type + \"_\" + id],\n                placement: attributeHoverPlacement(element),\n                html: true,\n                trigger: 'manual',\n                container: 'body'\n            }).popover('show');\n            currentPopover = type + '_' + id + '_container';\n        } else {\n          timer = setTimeout(function () {\n              runHoverLookup(type, id)\n            },\n            500\n          );\n        }\n    }).mouseout(function() {\n        clearTimeout(timer);\n    });\n    $(\".queryPopover\").click(function() {\n        url = $(this).data('url');\n        id = $(this).data('id');\n        $.get(url + '/' + id, function(data) {\n            $('#popover_form').html(data);\n            openPopup('#popover_form');\n        });\n    });\n    $('.servers_default_role_checkbox').click(function() {\n        var id = $(this).data(\"id\");\n        var state = $(this).is(\":checked\");\n        $(\".servers_default_role_checkbox\").not(this).attr('checked', false);\n        $.ajax({\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n            },\n            success:function (data, textStatus) {\n                handleGenericAjaxResponse(data);\n            },\n            complete:function() {\n                $(\".loading\").hide();\n            },\n            type:\"get\",\n            cache: false,\n            url: '/admin/roles/set_default/' + (state ? id : \"\"),\n        });\n    });\n    // clicking on an element with this class will select all of its contents in a\n    // single click\n    $('.quickSelect').click(function() {\n        var range = document.createRange();\n        var selection = window.getSelection();\n        range.selectNodeContents(this);\n        selection.removeAllRanges();\n        selection.addRange(range);\n    });\n    $(\".cortex-json\").click(function() {\n        var cortex_data = $(this).data('cortex-json');\n        cortex_data = htmlEncode(JSON.stringify(cortex_data, null, 2));\n        var popupHtml = '<pre class=\"simplepre\">' + cortex_data + '</pre>';\n        popupHtml += '<div class=\"close-icon useCursorPointer\" onClick=\"closeScreenshot();\"></div>';\n        $('#popover_box').html(popupHtml);\n        $('#popover_box').show();\n        $('#popover_box').css({'padding': '5px'});\n        left = ($(window).width() / 2) - ($('#popover_box').width() / 2);\n        if (($('#popover_box').height() + 250) > $(window).height()) {\n            $('#popover_box').height($(window).height() - 250);\n            $('#popover_box').css(\"overflow-y\", \"scroll\");\n            $('#popover_box').css(\"overflow-x\", \"hidden\");\n        }\n        $('#popover_box').css({'left': left + 'px'});\n        $(\"#gray_out\").fadeIn();\n    });\n    $('.add_object_attribute_row').click(function() {\n        var template_id = $(this).data('template-id');\n        var object_relation = $(this).data('object-relation');\n        var k = $('#last-row').data('last-row');\n        var k = k+1;\n        $('#last-row').data('last-row', k);\n        url = \"/objects/get_row/\" + template_id + \"/\" + object_relation + \"/\" + k;\n        $.get(url, function(data) {\n            $('#row_' + object_relation + '_expand').before($(data).fadeIn()).html();\n        });\n    });\n    $('.quickToggleCheckbox').toggle(function() {\n        var url = $(this).data('checkbox-url');\n    });\n    $(\".correlation-expand-button\").on(\"click\", function() {\n        $(this).parent().children(\".correlation-expanded-area\").show();\n        $(this).parent().children(\".correlation-collapse-button\").show();\n        $(this).hide();\n    });\n    $(\".correlation-collapse-button\").on(\"click\", function() {\n        $(this).parent().children(\".correlation-expanded-area\").hide();\n        $(this).parent().children(\".correlation-expand-button\").show();\n        $(this).hide();\n    });\n});\n\nfunction queryEventLock(event_id, user_org_id) {\n    if (tabIsActive) {\n        $.ajax({\n            url: \"/events/checkLocks/\" + event_id,\n            type: \"get\",\n            success: function(data, statusText, xhr) {\n                 if (xhr.status == 200) {\n                     if ($('#event_lock_warning').length != 0) {\n                         $('#event_lock_warning').remove();\n                     }\n                     if (data != '') {\n                         $('#main-view-container').append(data);\n                     }\n                 }\n            }\n        });\n    }\n    setTimeout(function() { queryEventLock(event_id, user_org_id); }, 5000);\n}\n\nfunction checkIfLoggedIn() {\n    if (tabIsActive) {\n        $.get(\"/users/checkIfLoggedIn.json\", function(data) {\n            if (data.slice(-2) !== 'OK') {\n                window.location.replace(baseurl + \"/users/login\");\n            }\n        });\n    }\n    setTimeout(function() { checkIfLoggedIn(); }, 5000);\n}\n\nfunction insertRawRestResponse() {\n    $('#rest-response-container').append('<pre id=\"raw-response-container\" />');\n    $('#raw-response-container').text($('#rest-response-hidden-container').text());\n}\n\nfunction insertHTMLRestResponse() {\n    $('#rest-response-container').append('<div id=\"html-response-container\" style=\"border: 1px solid blue; padding:5px;\" />');\n    $('#html-response-container').html($('#rest-response-hidden-container').text());\n}\n\nfunction insertJSONRestResponse() {\n    $('#rest-response-container').append('<p id=\"json-response-container\" style=\"border: 1px solid blue; padding:5px;\" />');\n    var parsedJson = syntaxHighlightJson($('#rest-response-hidden-container').text());\n    $('#json-response-container').html(parsedJson);\n}\n\nfunction syntaxHighlightJson(json, indent) {\n    if (indent === undefined) {\n        indent = 2;\n    }\n    if (typeof json == 'string') {\n        json = JSON.parse(json);\n    }\n    json = JSON.stringify(json, undefined, 2);\n    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/(?:\\r\\n|\\r|\\n)/g, '<br>').replace(/ /g, '&nbsp;');\n    return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n            var cls = 'json_number';\n            if (/^\"/.test(match)) {\n                    if (/:$/.test(match)) {\n                            cls = 'json_key';\n                    } else {\n                            cls = 'json_string';\n                    }\n            } else if (/true|false/.test(match)) {\n                    cls = 'json_boolean';\n            } else if (/null/.test(match)) {\n                    cls = 'json_null';\n            }\n            return '<span class=\"' + cls + '\">' + match + '</span>';\n    });\n}\n\nfunction liveFilter() {\n    var lookupString = $('#liveFilterField').val();\n    if (lookupString == '') {\n        $('.live_filter_target').each(function() {\n            $(this).parent().show();\n        });\n    } else {\n        $('.live_filter_target').each(function() {\n            $(this).parent().hide();\n        });\n        $('.live_filter_target').each(function() {\n            if ($(this).text().indexOf(lookupString) >= 0) {\n                $(this).parent().show();\n            }\n        });\n    }\n}\n\nfunction sparklineBar(elemId, data, lineCount) {\n    data = d3.csv.parse(data);\n    var y_max = 0;\n    data.forEach(function(e) {\n        e = parseInt(e.val);\n        y_max = e > y_max ? e : y_max;\n    });\n    var WIDTH      = 50;\n    var HEIGHT     = 25;\n    var DATA_COUNT = lineCount;\n    var BAR_WIDTH  = (WIDTH - DATA_COUNT) / DATA_COUNT;\n    var x    = d3.scale.linear().domain([0, DATA_COUNT]).range([0, WIDTH]);\n    var y    = d3.scale.linear().domain([0, y_max]).range([0, HEIGHT]);\n\n    var distributionGraphBarTooltip = d3.select(\"body\").append(\"div\")\n        .attr(\"class\", \"distributionGraphBarTooltip\")\n        .style(\"opacity\", 0);\n\n    var svg = d3.select(elemId).append('svg')\n      .attr('width', WIDTH)\n      .attr('height', HEIGHT)\n      .append('g');\n    svg.selectAll('.bar').data(data)\n      .enter()\n      .append('g')\n        .attr('title', function(d, i) { return d.scope + ': ' + d.val })\n        .attr('class', 'DGbar')\n      .append('rect')\n        .attr('class', 'bar')\n        .attr('x', function(d, i) { return x(i); })\n        .attr('y', function(d, i) { return HEIGHT - y(d.val); })\n        .attr('width', BAR_WIDTH)\n        .attr('height', function(d, i) { return y(d.val); })\n        .attr('fill', '#3465a4');\n\n        $('.DGbar').tooltip({container: 'body'});\n}\n\nfunction generic_picker_move(scope, direction) {\n    if (direction === 'right') {\n        $('#' + scope + 'Left option:selected').remove().appendTo('#' + scope + 'Right');\n    } else {\n        $('#' + scope + 'Right option:selected').remove().appendTo('#' + scope + 'Left');\n    }\n}\n\n\nfunction submit_feed_overlap_tool(feedId) {\n    var result = {\"Feed\": [], \"Server\": []};\n    $('#FeedLeft').children().each(function() {\n        result.Feed.push($(this).val());\n    });\n    $('#ServerLeft').children().each(function() {\n        result.Server.push($(this).val());\n    });\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: result,\n        success:function (data, textStatus) {\n            if (!isNaN(data)) {\n                $('#feed_coverage_bar').text(data + '%');\n                $('#feed_coverage_bar').css('width', data + '%');\n            } else {\n                handleGenericAjaxResponse({'saved':false, 'errors':['Something went wrong. Received response not in the expected format.']});\n            }\n        },\n        error:function() {\n            handleGenericAjaxResponse({'saved':false, 'errors':['Could not complete the requested action.']});\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/feeds/feedCoverage/\" + feedId,\n    });\n}\n\nfunction changeTaxonomyRequiredState(checkbox) {\n    var checkbox_state = $(checkbox).is(\":checked\");\n    var taxonomy_id = $(checkbox).data('taxonomy-id');\n    var formData = fetchFormDataAjax('/taxonomies/toggleRequired/' + taxonomy_id);\n    $.ajax({\n        data: $(formData).serialize(),\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse({'saved':true, 'success':['Taxonomy\\'s required state toggled.']});\n        },\n        error:function() {\n            $(checkbox).prop('checked', !$(checkbox).prop('checked'));\n            handleGenericAjaxResponse({'saved':false, 'errors':['Could not toggle the required state of the taxonomy.']});\n        },\n        async:\"false\",\n        type:\"post\",\n        cache: false,\n        url: '/taxonomies/toggleRequired/' + taxonomy_id,\n    });\n    formData = false;\n}\n\nfunction fetchFormDataAjax(url) {\n    var formData = false;\n    $.ajax({\n        data: '[]',\n        success:function (data, textStatus) {\n            formData = data;\n        },\n        error:function() {\n            handleGenericAjaxResponse({'saved':false, 'errors':['Request failed due to an unexpected error.']});\n        },\n        async: false,\n        type:\"get\",\n        cache: false,\n        url: url\n    });\n    return formData;\n}\n\n(function(){\n    \"use strict\";\n    $(\".datepicker\").datepicker({\n        format: 'yyyy-mm-dd',\n    });\n}());\n"], "fixing_code": ["String.prototype.ucfirst = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}\n\nif (!String.prototype.startsWith) {\n  String.prototype.startsWith = function(searchString, position) {\n    position = position || 0;\n    return this.indexOf(searchString, position) === position;\n  };\n}\n\nfunction stringToRGB(str){\n    var hash = 0;\n    if (str.length == 0) return hash;\n    for (i = 0; i < str.length; i++) {\n        hash = ((hash<<5)-hash) + str.charCodeAt(i);\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    var c = (hash & 0x00FFFFFF)\n        .toString(16)\n        .toUpperCase();\n\n    return \"#\" + \"00000\".substring(0, 6 - c.length) + c;\n}\n\nfunction deleteObject(type, action, id, event) {\n    var destination = 'attributes';\n    var alternateDestinations = ['shadow_attributes', 'template_elements', 'taxonomies', 'galaxy_clusters', 'objects', 'object_references'];\n    if (alternateDestinations.indexOf(type) > -1) destination = type;\n    else destination = type;\n    url = \"/\" + destination + \"/\" + action + \"/\" + id;\n    $.get(url, function(data) {\n        openPopup(\"#confirmation_box\");\n        $(\"#confirmation_box\").html(data);\n    });\n}\n\nfunction quickDeleteSighting(id, rawId, context) {\n    url = \"/sightings/quickDelete/\" + id + \"/\" + rawId + \"/\" + context;\n    $.get(url, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction fetchAddSightingForm(type, attribute_id, page, onvalue) {\n    var url = \"/sightings/quickAdd/\" + attribute_id + \"/\" + type;\n    if (onvalue) {\n        url = url + \"/1\";\n    } else {\n        url = url + \"/0\";\n    }\n    $.get(url, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction flexibleAddSighting(clicked, type, attribute_id, event_id, value, page, placement) {\n    $clicked = $(clicked);\n    var html = '<div>'\n        + '<button class=\"btn btn-primary\" onclick=\"addSighting(\\'' + type + '\\', \\'' + attribute_id + '\\', \\'' + event_id + '\\', \\'' + page + '\\')\">This attribute</button>'\n        + '<button class=\"btn btn-primary\" style=\"margin-left:5px;\" onclick=\"fetchAddSightingForm(\\'' + type + '\\', \\'' + attribute_id + '\\', \\'' + page + '\\', true)\">Global value</button>'\n        + '</div>';\n    openPopover(clicked, html, true, placement);\n}\n\nfunction publishPopup(id, type) {\n    var action = \"alert\";\n    if (type == \"publish\") action = \"publish\";\n    if (type == \"unpublish\") action = \"unpublish\";\n    var destination = 'attributes';\n    $.get( \"/events/\" + action + \"/\" + id, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction delegatePopup(id) {\n    simplePopup(\"/event_delegations/delegateEvent/\" + id);\n}\n\nfunction genericPopup(url, popupTarget, callback) {\n    $.get(url, function(data) {\n        $(popupTarget).html(data);\n        $(popupTarget).fadeIn();\n        left = ($(window).width() / 2) - ($(popupTarget).width() / 2);\n        $(popupTarget).css({'left': left + 'px'});\n        $(\"#gray_out\").fadeIn();\n        if (callback !== undefined) {\n            callback();\n        }\n    });\n}\n\nfunction screenshotPopup(url, title) {\n    if (!url.startsWith('data:image/')) {\n        url = url.slice(0, -1);\n    }\n    popupHtml = '<it class=\"fa fa-spin fa-spinner\" style=\"font-size: xx-large; color: white; position: fixed; left: 50%; top: 50%;\"></it>';\n    url = $('<div>').text(url).html();\n    title = $('<div>').text(title).html();\n    popupHtml += '<img class=\"screenshot_box-content hidden\" src=\"' + url + '\" id=\"screenshot-image\" title=\"' + title + '\" alt=\"' + title + '\" onload=\"$(this).show(); $(this).parent().find(\\'.fa-spinner\\').remove();\"/>';\n    popupHtml += '<div class=\"close-icon useCursorPointer\" onClick=\"closeScreenshot();\"></div>';\n    if (!url.startsWith('data:image/')) {\n        popupHtml += '<a class=\"close-icon useCursorPointer fa fa-expand\" style=\"right: 20px; background: black; color: white; text-decoration: none;\" target=\"_blank\" href=\"' + url + '\" ></a>';\n    }\n    popupHtml += '<div style=\"height: 20px;\"></div>'; // see bottom of image for large one\n    $('#screenshot_box').html(popupHtml);\n    $('#screenshot_box').css({\n        display: 'block',\n        top: (document.documentElement.scrollTop + 100) + 'px'\n    });\n    $(\"#gray_out\").fadeIn();\n}\n\nfunction submitPublish(id, type) {\n    $(\"#PromptForm\").submit();\n}\n\nfunction editTemplateElement(type, id) {\n    simplePopup(\"/template_elements/edit/\" + type + \"/\" + id);\n}\n\nfunction cancelPrompt(isolated) {\n    if (isolated == undefined) {\n        $(\"#gray_out\").fadeOut();\n    }\n    $(\"#confirmation_box\").fadeOut();\n    $(\"#confirmation_box\").empty();\n    $('.have-a-popover').popover('destroy');\n}\n\nfunction submitDeletion(context_id, action, type, id) {\n    var context = 'event';\n    if (type == 'template_elements') context = 'template';\n    var formData = $('#PromptForm').serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            if (type == 'eventGraph') {\n                showMessage('success', 'Network has been deleted');\n                reset_graph_history();\n            } else {\n                updateIndex(context_id, context);\n                handleGenericAjaxResponse(data);\n            }\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/\" + type + \"/\" + action + \"/\" + id,\n    });\n}\n\nfunction removeSighting(caller) {\n    var id = $(caller).data('id');\n    var rawid = $(caller).data('rawid');\n    var context = $(caller).data('context');\n    if (context != 'attribute') {\n        context = 'event';\n    }\n    var formData = $('#PromptForm').serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data);\n            var org = \"/\" + $('#org_id').text();\n            updateIndex(id, 'event');\n            $.get( \"/sightings/listSightings/\" + rawid + \"/\" + context + org, function(data) {\n                $(\"#sightingsData\").html(data);\n            });\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/sightings/quickDelete/\" + id + \"/\" + rawid + \"/\" + context,\n    });\n}\n\nfunction toggleSetting(e, setting, id) {\n    e.preventDefault();\n    e.stopPropagation();\n    switch (setting) {\n    case 'warninglist_enable':\n        formID = '#WarninglistIndexForm';\n        dataDiv = '#WarninglistData';\n        replacementForm = '/warninglists/getToggleField/';\n        searchString = 'enabled';\n        break;\n    case 'favourite_tag':\n        formID = '#FavouriteTagIndexForm';\n        dataDiv = '#FavouriteTagData';\n        replacementForm = '/favourite_tags/getToggleField/';\n        searchString = 'Adding';\n        break;\n    case 'activate_object_template':\n        formID = '#ObjectTemplateIndexForm';\n        dataDiv = '#ObjectTemplateData';\n        replacementForm = '/ObjectTemplates/getToggleField/';\n        searchString = 'activated';\n        break;\n    case 'noticelist_enable':\n        formID = '#NoticelistIndexForm';\n        dataDiv = '#NoticelistData';\n        replacementForm = '/noticelists/getToggleField/';\n        searchString = 'enabled';\n        break;\n    }\n    $(dataDiv).val(id);\n    var formData = $(formID).serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            var result = data;\n            if (result.success) {\n                var setting = false;\n                if (result.success.indexOf(searchString) > -1) setting = true;\n                $('#checkBox_' + id).prop('checked', setting);\n            }\n            handleGenericAjaxResponse(data);\n        },\n        complete:function() {\n            $.get(replacementForm, function(data) {\n                $('#hiddenFormDiv').html(data);\n            });\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        error:function() {\n            handleGenericAjaxResponse({'saved':false, 'errors':['Request failed due to an unexpected error.']});\n        },\n        type:\"post\",\n        cache: false,\n        url: $(formID).attr('action'),\n    });\n}\n\nfunction initiatePasswordReset(id) {\n    $.get( \"/users/initiatePasswordReset/\" + id, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction submitPasswordReset(id) {\n    var formData = $('#PromptForm').serialize();\n    var url = \"/users/initiatePasswordReset/\" + id;\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data);\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:url,\n    });\n}\n\nfunction submitMessageForm(url, form, target) {\n    if (!$('#PostMessage').val()) {\n        showMessage(\"fail\", \"Cannot submit empty message.\");\n    } else {\n        submitGenericForm(url, form, target);\n    }\n}\n\nfunction submitGenericForm(url, form, target) {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: $('#' + form).serialize(),\n        success:function (data, textStatus) {\n            $('#top').html(data);\n            showMessage(\"success\", \"Message added.\");\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"post\",\n        cache: false,\n        url:url,\n    });\n}\n\nfunction acceptObject(type, id, event) {\n    name = '#ShadowAttribute_' + id + '_accept';\n    var formData = $(name).serialize();\n    $.ajax({\n        data: formData,\n        success:function (data, textStatus) {\n            updateIndex(event, 'event');\n            eventUnpublish();\n            handleGenericAjaxResponse(data);\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/shadow_attributes/accept/\" + id,\n    });\n}\n\nfunction toggleCorrelation(id, skip_reload) {\n    if (typeof skip_reload === \"undefined\") {\n        skip_reload = false;\n    }\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: $('#PromptForm').serialize(),\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data, skip_reload);\n            $(\"#correlation_toggle_\" + id).prop('checked', !$(\"#correlation_toggle_\" + id).is(':checked'));\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:'/attributes/toggleCorrelation/' + id,\n    });\n}\n\nfunction toggleToIDS(id, skip_reload) {\n    if (typeof skip_reload === \"undefined\") {\n        skip_reload = false;\n    }\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: $('#PromptForm').serialize(),\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data, skip_reload);\n            $(\"#toids_toggle_\" + id).prop('checked', !$(\"#toids_toggle_\" + id).is(':checked'));\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:'/attributes/editField/' + id ,\n    });\n}\n\nfunction eventUnpublish() {\n    $('.publishButtons').show();\n    $('.exportButtons').hide();\n    $('.published').hide();\n    $('.notPublished').show();\n}\n\nfunction updateIndex(id, context, newPage) {\n    if (typeof newPage !== 'undefined') page = newPage;\n    var url, div;\n    if (context == 'event') {\n        if (typeof currentUri == 'undefined') {\n            location.reload();\n            return true;\n        }\n        url = currentUri;\n        div = \"#attributes_div\";\n    }\n    if (context == 'template') {\n        url = \"/template_elements/index/\" + id;\n        div = \"#templateElements\";\n    }\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(div).html(data);\n            if (typeof genericPopupCallback !== \"undefined\") {\n                genericPopupCallback(\"success\");\n            } else {\n                console.log(\"genericPopupCallback function not defined\");\n            }\n        },\n        url: url,\n    });\n}\n\nfunction updateAttributeFieldOnSuccess(name, type, id, field, event) {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            if (field != 'timestamp') {\n                $(\".loading\").show();\n            }\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            if (field != 'timestamp') {\n                $(\".loading\").hide();\n                $(name + '_solid').html(data);\n                $(name + '_placeholder').empty();\n                $(name + '_solid').show();\n            } else {\n                $('#' + type + '_' + id + '_' + 'timestamp_solid').html(data);\n            }\n        },\n        url:\"/attributes/fetchViewValue/\" + id + \"/\" + field,\n    });\n}\n\nfunction activateField(type, id, field, event) {\n    resetForms();\n    if (type == 'denyForm') return;\n    var objectType = 'attributes';\n    if (type == 'ShadowAttribute') {\n        objectType = 'shadow_attributes';\n    }\n    var name = '#' + type + '_' + id + '_' + field;\n    var container_name = '#Attribute_' + id + '_' + field;\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(container_name + '_placeholder').html(data);\n            postActivationScripts(name, type, id, field, event);\n        },\n        url:\"/\" + objectType + \"/fetchEditForm/\" + id + \"/\" + field,\n    });\n}\n\n\nfunction submitQuickTag(form) {\n    $('#' + form).submit();\n}\n\n//if someone clicks an inactive field, replace it with the hidden form field. Also, focus it and bind a focusout event, so that it gets saved if the user clicks away.\n//If a user presses enter, submit the form\nfunction postActivationScripts(name, type, id, field, event) {\n    $(name + '_field').focus();\n    inputFieldButtonActive(name + '_field');\n    if (field == 'value' || field == 'comment') {\n        autoresize($(name + '_field')[0]);\n        $(name + '_field').on('keyup', function () {\n            autoresize(this);\n        });\n    }\n    $(name + '_form').submit(function(e){\n        e.preventDefault();\n        submitForm(type, id, field, event);\n        return false;\n    });\n\n    $(name + '_form').bind(\"focusout\", function() {\n        inputFieldButtonPassive(name + '_field');\n    });\n\n    $(name + '_form').bind(\"focusin\", function(){\n        inputFieldButtonActive(name + '_field');\n    });\n\n    $(name + '_form').bind(\"keydown\", function(e) {\n        if (e.ctrlKey && (e.keyCode == 13 || e.keyCode == 10)) {\n            submitForm(type, id, field, event);\n        }\n    });\n    $(name + '_field').closest('.inline-input-container').children('.inline-input-accept').bind('click', function() {\n        submitForm(type, id, field, event);\n    });\n\n    $(name + '_field').closest('.inline-input-container').children('.inline-input-decline').bind('click', function() {\n        resetForms();\n    });\n\n    $(name + '_solid').hide();\n}\n\nfunction quickEditHover(td, type, id, field, event) {\n    var $td = $(td);\n    $td.find('#quickEditButton').remove(); // clean all similar if exist\n    var $div = $('<div id=\"quickEditButton\"></div>');\n    $div.addClass('quick-edit-row-div');\n    var $span = $('<span></span>');\n    $span.addClass('fa-as-icon fa fa-edit');\n    $span.css('font-size', '12px');\n    $div.append($span);\n    $td.find(\"[id*=_solid]\").append($div);\n\n    $span.click(function() {\n        activateField(type, id, field, event);\n    });\n\n    $td.off('mouseleave').on('mouseleave', function() {\n        $div.remove();\n    });\n}\n\nfunction addSighting(type, attribute_id, event_id, page) {\n    $('#Sighting_' + attribute_id + '_type').val(type);\n    $.ajax({\n        data: $('#Sighting_' + attribute_id).closest(\"form\").serialize(),\n        cache: false,\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data);\n            var result = data;\n            if (result.saved == true) {\n                $('.sightingsCounter').each(function( counter ) {\n                    $(this).html(parseInt($(this).html()) + 1);\n                });\n                if (typeof currentUri == 'undefined') {\n                    location.reload();\n                } else {\n                    updateIndex(event_id, 'event');\n                }\n            }\n        },\n        error:function() {\n            showMessage('fail', 'Request failed for an unknown reason.');\n            updateIndex(context, 'event');\n        },\n        type:\"post\",\n        url:\"/sightings/add/\" + attribute_id\n    });\n}\n\nfunction resetForms() {\n    $('.inline-field-solid').show();\n    $('.inline-field-placeholder').empty();\n}\n\nfunction inputFieldButtonActive(selector) {\n    $(selector).closest('.inline-input-container').children('.inline-input-accept').removeClass('inline-input-passive').addClass('inline-input-active');\n    $(selector).closest('.inline-input-container').children('.inline-input-decline').removeClass('inline-input-passive').addClass('inline-input-active');\n}\n\nfunction inputFieldButtonPassive(selector) {\n    $(selector).closest('.inline-input-container').children('.inline-input-accept').addClass('inline-input-passive').removeClass('inline-input-active');\n    $(selector).closest('.inline-input-container').children('.inline-input-daecline').addClass('inline-input-passive').removeClass('inline-input-active');\n}\n\nfunction autoresize(textarea) {\n    textarea.style.height = '20px';\n    textarea.style.height = (textarea.scrollHeight) + 'px';\n}\n\n// submit the form - this can be triggered by unfocusing the activated form field or by submitting the form (hitting enter)\n// after the form is submitted, intercept the response and act on it\nfunction submitForm(type, id, field, context) {\n    var object_type = 'attributes';\n    var action = \"editField\";\n    var name = '#' + type + '_' + id + '_' + field;\n    if (type == 'ShadowAttribute') {\n        object_type = 'shadow_attributes';\n    }\n    $.ajax({\n        data: $(name + '_field').closest(\"form\").serialize(),\n        cache: false,\n        success:function (data, textStatus) {\n            handleAjaxEditResponse(data, name, type, id, field, context);\n        },\n        error:function() {\n            showMessage('fail', 'Request failed for an unknown reason.');\n            updateIndex(context, 'event');\n        },\n        type:\"post\",\n        url:\"/\" + object_type + \"/\" + action + \"/\" + id\n    });\n    $(name + '_field').unbind(\"keyup\");\n    $(name + '_form').unbind(\"focusout\");\n    return false;\n};\n\nfunction quickSubmitTagForm(selected_tag_ids, addData) {\n    var event_id = addData.id;\n    var formData = fetchFormDataAjax(\"/events/addTag/\" + event_id);\n    $('#temp').html(formData);\n    $('#EventTag').val(JSON.stringify(selected_tag_ids));\n    $.ajax({\n        data: $('#EventAddTagForm').serialize(),\n        cache: false,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            loadEventTags(event_id);\n            loadGalaxies(event_id, 'event');\n            handleGenericAjaxResponse(data);\n        },\n        error:function() {\n            showMessage('fail', 'Could not add tag.');\n            loadEventTags(event_id);\n            loadGalaxies(event_id, 'event');\n        },\n        complete:function() {\n            $('#temp').empty();\n            $(\"#popover_form\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n            $(\".loading\").hide();\n        },\n        type:\"post\",\n        url:\"/events/addTag/\" + event_id\n    });\n    $('#temp').remove();\n    return false;\n}\n\nfunction quickSubmitAttributeTagForm(selected_tag_ids, addData) {\n    var attribute_id = addData.id;\n    var formData = fetchFormDataAjax(\"/attributes/addTag/\" + attribute_id);\n    $('#temp').html(formData);\n    $('#AttributeTag').val(JSON.stringify(selected_tag_ids));\n    if (attribute_id == 'selected') {\n        $('#AttributeAttributeIds').val(getSelected());\n    }\n    $.ajax({\n        data: $('#AttributeAddTagForm').serialize(),\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            if (attribute_id == 'selected') {\n                updateIndex(0, 'event');\n            } else {\n                loadAttributeTags(attribute_id);\n                loadGalaxies(attribute_id, 'attribute');\n            }\n            handleGenericAjaxResponse(data);\n        },\n        error:function() {\n            showMessage('fail', 'Could not add tag.');\n            loadAttributeTags(attribute_id);\n            loadGalaxies(attribute_id, 'attribute');\n        },\n        complete:function() {\n            $(\"#popover_form\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n            $(\".loading\").hide();\n        },\n        type:\"post\",\n        url:\"/attributes/addTag/\" + attribute_id\n    });\n    $('#temp').remove();\n    return false;\n}\n\nfunction quickSubmitTagCollectionTagForm(selected_tag_ids, addData) {\n    var tag_collection_id = addData.id;\n    var formData = fetchFormDataAjax(\"/tag_collections/addTag/\" + tag_collection_id);\n    $('#temp').html(formData);\n    $('#TagCollectionTag').val(JSON.stringify(selected_tag_ids));\n    $.ajax({\n        data: $('#TagCollectionAddTagForm').serialize(),\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data);\n            refreshTagCollectionRow(tag_collection_id);\n        },\n        error:function() {\n            showMessage('fail', 'Could not add tag.');\n            loadTagCollectionTags(tag_collection_id);\n        },\n        complete:function() {\n            $(\"#popover_form\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n            $(\".loading\").hide();\n        },\n        type:\"post\",\n        url:\"/tag_collections/addTag/\" + tag_collection_id\n    });\n    $('#temp').remove();\n    return false;\n}\n\nfunction refreshTagCollectionRow(tag_collection_id) {\n    $.ajax({\n        type:\"get\",\n        url:\"/tag_collections/getRow/\" + tag_collection_id,\n        error:function() {\n            showMessage('fail', 'Could not fetch updates to the modified row.');\n        },\n        success: function (data, textStatus) {\n            $('[data-row-id=\"' + tag_collection_id + '\"]').replaceWith(data);\n        }\n    });\n\n}\n\nfunction handleAjaxEditResponse(data, name, type, id, field, event) {\n    responseArray = data;\n    if (type == 'Attribute') {\n        if (responseArray.saved) {\n            showMessage('success', responseArray.success);\n            updateAttributeFieldOnSuccess(name, type, id, field, event);\n            updateAttributeFieldOnSuccess(name, type, id, 'timestamp', event);\n            eventUnpublish();\n        } else {\n            showMessage('fail', 'Validation failed: ' + responseArray.errors.value);\n            updateAttributeFieldOnSuccess(name, type, id, field, event);\n        }\n    }\n    if (type == 'ShadowAttribute') {\n        updateIndex(event, 'event');\n    }\n    if (responseArray.hasOwnProperty('check_publish')) {\n        checkAndSetPublishedInfo();\n    }\n}\n\nfunction handleGenericAjaxResponse(data, skip_reload) {\n    if (typeof skip_reload === \"undefined\") {\n        skip_reload = false;\n    }\n    if (typeof data == 'string') {\n        responseArray = JSON.parse(data);\n    } else {\n        responseArray = data;\n    }\n\n    // remove remaining popovers\n    cancelPrompt();\n    // in case the origin node has been deleted (e.g. tags)\n    $('.popover').remove();\n\n    if (responseArray.saved) {\n        showMessage('success', responseArray.success);\n        if (responseArray.hasOwnProperty('check_publish')) {\n            checkAndSetPublishedInfo(skip_reload);\n        }\n        return true;\n    } else {\n        showMessage('fail', responseArray.errors);\n        return false;\n    }\n}\n\nfunction toggleAllAttributeCheckboxes() {\n    if ($(\".select_all\").is(\":checked\")) {\n        $(\".select_attribute\").prop(\"checked\", true);\n        $(\".select_proposal\").prop(\"checked\", true);\n    } else {\n        $(\".select_attribute\").prop(\"checked\", false);\n        $(\".select_proposal\").prop(\"checked\", false);\n    }\n}\n\nfunction toggleAllCheckboxes() {\n    if ($(\".select_all\").is(\":checked\")) {\n        $(\".select\").prop(\"checked\", true);\n    } else {\n        $(\".select\").prop(\"checked\", false);\n    }\n}\n\nfunction toggleAllTaxonomyCheckboxes() {\n    if ($(\".select_all\").is(\":checked\")) {\n        $(\".select_taxonomy\").prop(\"checked\", true);\n    } else {\n        $(\".select_taxonomy\").prop(\"checked\", false);\n    }\n}\n\nfunction attributeListAnyAttributeCheckBoxesChecked() {\n    if ($('.select_attribute:checked').length > 0) $('.mass-select').removeClass('hidden');\n    else $('.mass-select').addClass('hidden');\n}\n\nfunction listCheckboxesChecked() {\n    if ($('.select:checked').length > 0) $('.mass-select').removeClass('hidden');\n    else $('.mass-select').addClass('hidden');\n}\n\nfunction attributeListAnyProposalCheckBoxesChecked() {\n    if ($('.select_proposal:checked').length > 0) $('.mass-proposal-select').removeClass('hidden');\n    else $('.mass-proposal-select').addClass('hidden');\n}\n\nfunction taxonomyListAnyCheckBoxesChecked() {\n    if ($('.select_taxonomy:checked').length > 0) $('.mass-select').show();\n    else $('.mass-select').hide();\n}\n\nfunction multiSelectDeleteEvents() {\n    var selected = [];\n    $(\".select\").each(function() {\n        if ($(this).is(\":checked\")) {\n            var temp = $(this).data(\"id\");\n            if (temp != null) {\n                selected.push(temp);\n            }\n        }\n    });\n    $.get(\"/events/delete/\" + JSON.stringify(selected), function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction multiSelectToggleFeeds(on, cache) {\n    var selected = [];\n    $(\".select\").each(function() {\n        if ($(this).is(\":checked\")) {\n            var temp = $(this).data(\"id\");\n            if (temp != null) {\n                selected.push(temp);\n            }\n        }\n    });\n    $.get(\"/feeds/toggleSelected/\" + on + \"/\" + cache + \"/\" + JSON.stringify(selected), function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction multiSelectAction(event, context) {\n    var settings = {\n            deleteAttributes: {\n                confirmation: \"Are you sure you want to delete all selected attributes?\",\n                controller: \"attributes\",\n                camelCase: \"Attribute\",\n                alias: \"attribute\",\n                action: \"delete\"\n            },\n            acceptProposals: {\n                confirmation: \"Are you sure you want to accept all selected proposals?\",\n                controller: \"shadow_attributes\",\n                camelCase: \"ShadowAttribute\",\n                alias: \"proposal\",\n                action: \"accept\"\n            },\n            discardProposals: {\n                confirmation: \"Are you sure you want to discard all selected proposals?\",\n                controller: \"shadow_attributes\",\n                camelCase: \"ShadowAttribute\",\n                alias: \"proposal\",\n                action: \"discard\"\n            },\n    };\n    var answer = confirm(\"Are you sure you want to \" + settings[context][\"action\"] + \" all selected \" + settings[context][\"alias\"] + \"s?\");\n    if (answer) {\n        var selected = [];\n        $(\".select_\" + settings[context][\"alias\"]).each(function() {\n            if ($(this).is(\":checked\")) {\n                var temp= $(this).data(\"id\");\n                selected.push(temp);\n            }\n        });\n        $('#' + settings[context][\"camelCase\"] + 'Ids' + settings[context][\"action\"].ucfirst()).attr('value', JSON.stringify(selected));\n        var formData = $('#' + settings[context][\"action\"] + '_selected').serialize();\n        if (context == 'deleteAttributes') {\n            var url = $('#delete_selected').attr('action');\n            console.log(url);\n        } else {\n            var url = \"/\" + settings[context][\"controller\"] + \"/\" + settings[context][\"action\"] + \"Selected/\" + event;\n        }\n        $.ajax({\n            data: formData,\n            cache: false,\n            type:\"POST\",\n            url: url,\n            success:function (data, textStatus) {\n                updateIndex(event, 'event');\n                var result = handleGenericAjaxResponse(data);\n                if (settings[context][\"action\"] != \"discard\" && result == true) eventUnpublish();\n            },\n        });\n    }\n    return false;\n}\n\nfunction editSelectedAttributes(event) {\n    var selectedAttributeIds = getSelected();\n    simplePopup(\"/attributes/editSelected/\" + event + \"/\" + selectedAttributeIds);\n}\n\nfunction addSelectedTaxonomies(taxonomy) {\n    $.get(\"/taxonomies/taxonomyMassConfirmation/\"+taxonomy, function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction hideSelectedTags(taxonomy) {\n\t$.get(\"/taxonomies/taxonomyMassHide/\"+taxonomy, function(data) {\n\t\t$(\"#confirmation_box\").html(data);\n\t\topenPopup(\"#confirmation_box\");\n\t});\n}\n\nfunction unhideSelectedTags(taxonomy) {\n\t$.get(\"/taxonomies/taxonomyMassUnhide/\"+taxonomy, function(data) {\n\t\t$(\"#confirmation_box\").html(data);\n\t\topenPopup(\"#confirmation_box\");\n\t});\n}\n\nfunction submitMassTaxonomyTag() {\n    $('#PromptForm').submit();\n}\n\nfunction submitMassEventDelete() {\n    $('#PromptForm').trigger('submit');\n    event.preventDefault();\n}\n\nfunction getSelected() {\n    var selected = [];\n    $(\".select_attribute\").each(function() {\n        if ($(this).is(\":checked\")) {\n            var test = $(this).data(\"id\");\n            selected.push(test);\n        }\n    });\n    return JSON.stringify(selected);\n}\n\nfunction getSelectedTaxonomyNames() {\n    var selected = [];\n    $(\".select_taxonomy\").each(function() {\n        if ($(this).is(\":checked\")) {\n            var row = $(this).data(\"id\");\n            var temp = $('#tag_' + row).html();\n            temp = $(\"<div/>\").html(temp).text();\n            selected.push(temp);\n        }\n    });\n    $('#TaxonomyNameList').val(JSON.stringify(selected));\n}\n\nfunction loadEventTags(id) {\n    $.ajax({\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".eventTagContainer\").html(data);\n        },\n        url:\"/tags/showEventTag/\" + id,\n    });\n}\n\nfunction loadGalaxies(id, scope) {\n    $.ajax({\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            if (scope == 'event') {\n                $(\"#galaxies_div\").html(data);\n            } else if (scope == 'attribute') {\n                $(\"#attribute_\" + id + \"_galaxy\").html(data);\n            }\n        },\n        url:\"/galaxies/showGalaxies/\" + id + \"/\" + scope,\n    });\n}\n\nfunction loadTagCollectionTags(id) {\n    $.ajax({\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".tagCollectionTagContainer\").html(data);\n        },\n        url:\"/tags/showEventTag/\" + id,\n    });\n}\n\nfunction removeEventTag(event, tag) {\n    var answer = confirm(\"Are you sure you want to remove this tag from the event?\");\n    if (answer) {\n        var formData = $('#removeTag_' + tag).serialize();\n        $.ajax({\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n            },\n            data: formData,\n            type:\"POST\",\n            cache: false,\n            url:\"/events/removeTag/\" + event + '/' + tag,\n            success:function (data, textStatus) {\n                loadEventTags(event);\n                handleGenericAjaxResponse(data);\n            },\n            complete:function() {\n                $(\".loading\").hide();\n            }\n        });\n    }\n    return false;\n}\n\nfunction loadAttributeTags(id) {\n    $.ajax({\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\"#Attribute_\"+id+\"_tr .attributeTagContainer\").html(data);\n        },\n        url:\"/tags/showAttributeTag/\" + id\n    });\n}\n\nfunction removeObjectTagPopup(clicked, context, object, tag) {\n    $.get( \"/\" + context + \"s/removeTag/\" + object + '/' + tag, function(data) {\n        openPopover(clicked, data);\n    });\n}\n\nfunction removeObjectTag(context, object, tag) {\n    var formData = $('#PromptForm').serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        type:\"POST\",\n        cache: false,\n        url:\"/\" + context.toLowerCase() + \"s/removeTag/\" + object + '/' + tag,\n        success:function (data, textStatus) {\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n            if (context == 'Attribute') {\n                loadAttributeTags(object);\n            } else if (context == 'tag_collection') {\n                refreshTagCollectionRow(object);\n            } else {\n                loadEventTags(object);\n            }\n            handleGenericAjaxResponse(data);\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        }\n    });\n    return false;\n}\n\nfunction redirectAddObject(templateId, additionalData) {\n    var eventId = additionalData['event_id'];\n    window.location = '/objects/add/' + eventId + '/' + templateId;\n}\n\nfunction clickCreateButton(event, type) {\n    var destination = 'attributes';\n    if (type == 'Proposal') destination = 'shadow_attributes';\n    simplePopup(\"/\" + destination + \"/add/\" + event);\n}\n\nfunction submitPopoverForm(context_id, referer, update_context_id) {\n    var url = null;\n    var context = 'event';\n    var contextNamingConvention = 'Attribute';\n    var closePopover = true;\n    switch (referer) {\n        case 'add':\n            url = \"/attributes/add/\" + context_id;\n            break;\n        case 'edit':\n            url = \"/attributes/edit/\" + context_id;\n            break;\n        case 'propose':\n            url = \"/shadow_attributes/add/\" + context_id;\n            break;\n        case 'massEdit':\n            url = \"/attributes/editSelected/\" + context_id;\n            break;\n        case 'addTextElement':\n            url = \"/templateElements/add/text/\" + context_id;\n            context = 'template';\n            contextNamingConvention = 'TemplateElementText';\n            break;\n        case 'editTextElement':\n            url = \"/templateElements/edit/text/\" + context_id;\n            context = 'template';\n            context_id = update_context_id;\n            contextNamingConvention = 'TemplateElementText';\n            break;\n        case 'addAttributeElement':\n            url = \"/templateElements/add/attribute/\" + context_id;\n            context = 'template';\n            contextNamingConvention = 'TemplateElementAttribute';\n            break;\n        case 'editAttributeElement':\n            url = \"/templateElements/edit/attribute/\" + context_id;\n            context = 'template';\n            context_id = update_context_id;\n            contextNamingConvention = 'TemplateElementAttribute';\n            break;\n        case 'addFileElement':\n            url = \"/templateElements/add/file/\" + context_id;\n            context = 'template';\n            contextNamingConvention = 'TemplateElementFile';\n            break;\n        case 'editFileElement':\n            url = \"/templateElements/edit/file/\" + context_id;\n            context = 'template';\n            context_id = update_context_id;\n            contextNamingConvention = 'TemplateElementFile';\n            break;\n        case 'replaceAttributes':\n            url = \"/attributes/attributeReplace/\" + context_id;\n            break;\n        case 'addSighting':\n            url = \"/sightings/add/\" + context_id;\n            closePopover = false;\n            break;\n        case 'addObjectReference':\n            url = \"/objectReferences/add/\" + context_id;\n            break;\n    }\n    if (url !== null) {\n        $.ajax({\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n                if (closePopover) {\n                    $(\"#gray_out\").fadeOut();\n                    $(\"#popover_form\").fadeOut();\n                }\n            },\n            data: $(\"#submitButton\").closest(\"form\").serialize(),\n            success:function (data, textStatus) {\n                var result;\n                if (closePopover) {\n                    result = handleAjaxPopoverResponse(data, context_id, url, referer, context, contextNamingConvention);\n                }\n                if (referer == 'addSighting') {\n                    updateIndex(update_context_id, 'event');\n                    $.get( \"/sightings/listSightings/\" + id + \"/attribute\", function(data) {\n                        $(\"#sightingsData\").html(data);\n                    });\n                    $('.sightingsToggle').removeClass('btn-primary');\n                    $('.sightingsToggle').addClass('btn-inverse');\n                    $('#sightingsListAllToggle').removeClass('btn-inverse');\n                    $('#sightingsListAllToggle').addClass('btn-primary');\n                }\n                if (context == 'event' && (referer == 'add' || referer == 'massEdit' || referer == 'replaceAttributes' || referer == 'addObjectReference')) eventUnpublish();\n                $(\".loading\").hide();\n            },\n            type:\"post\",\n            url:url\n        });\n    }\n\n    return false;\n};\n\nfunction handleAjaxPopoverResponse(response, context_id, url, referer, context, contextNamingConvention) {\n    responseArray = response;\n    var message = null;\n    var result = \"fail\";\n    if (responseArray.saved) {\n        updateIndex(context_id, context);\n        if (responseArray.success) {\n            showMessage(\"success\", responseArray.success);\n            result = \"success\";\n        }\n        if (responseArray.errors) {\n            showMessage(\"fail\", responseArray.errors);\n        }\n    } else {\n        var savedArray = saveValuesForPersistance();\n        $.ajax({\n            async:true,\n            dataType:\"html\",\n            success:function (data, textStatus) {\n                $(\"#popover_form\").html(data);\n                openPopup(\"#popover_form\");\n                var error_context = context.charAt(0).toUpperCase() + context.slice(1);\n                handleValidationErrors(responseArray.errors, context, contextNamingConvention);\n                result = \"success\";\n                if (!$.isEmptyObject(responseArray)) {\n                    result = \"fail\";\n                    $(\"#formWarning\").show();\n                    $(\"#formWarning\").html('The object(s) could not be saved. Please, try again.');\n                }\n                recoverValuesFromPersistance(savedArray);\n                $(\".loading\").hide();\n            },\n            url:url\n        });\n    }\n    return result;\n}\n\n//before we update the form (in case the action failed), we want to retrieve the data from every field, so that we can set the fields in the new form that we fetch\nfunction saveValuesForPersistance() {\n    var formPersistanceArray = new Array();\n    for (i = 0; i < fieldsArray.length; i++) {\n        formPersistanceArray[fieldsArray[i]] = $('#' + fieldsArray[i]).val();\n    }\n    return formPersistanceArray;\n}\n\nfunction recoverValuesFromPersistance(formPersistanceArray) {\n    for (i = 0; i < fieldsArray.length; i++) {\n        $('#' + fieldsArray[i]).val(formPersistanceArray[fieldsArray[i]]);\n    }\n}\n\nfunction handleValidationErrors(responseArray, context, contextNamingConvention) {\n    for (var k in responseArray) {\n        var elementName = k.charAt(0).toUpperCase() + k.slice(1);\n        $(\"#\" + contextNamingConvention + elementName).parent().addClass(\"error\");\n        $(\"#\" + contextNamingConvention + elementName).parent().append(\"<div class=\\\"error-message\\\">\" + responseArray[k] + \"</div>\");\n    }\n}\n\nfunction toggleHistogramType(type, old) {\n    var done = false;\n    old.forEach(function(entry) {\n        if (type == entry) {\n            done = true;\n            old.splice(old.indexOf(entry), 1);\n        }\n    });\n    if (done == false) old.push(type);\n    updateHistogram(JSON.stringify(old));\n}\n\nfunction updateHistogram(selected) {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(\"#histogram\").html(data);\n        },\n        url:\"/users/histogram/\" + selected,\n    });\n}\n\nfunction showMessage(success, message, context) {\n    if (typeof context !== \"undefined\") {\n        $(\"#ajax_\" + success, window.parent.document).html(message);\n        var duration = 1000 + (message.length * 40);\n        $(\"#ajax_\" + success + \"_container\", window.parent.document).fadeIn(\"slow\");\n        $(\"#ajax_\" + success + \"_container\", window.parent.document).delay(duration).fadeOut(\"slow\");\n    }\n    $(\"#ajax_\" + success).html(message);\n    var duration = 1000 + (message.length * 40);\n    $(\"#ajax_\" + success + \"_container\").fadeIn(\"slow\");\n    $(\"#ajax_\" + success + \"_container\").delay(duration).fadeOut(\"slow\");\n}\n\nfunction cancelPopoverForm(id) {\n    $(\"#gray_out\").fadeOut();\n    $(\"#popover_form\").fadeOut();\n    $(\"#popover_form_large\").fadeOut();\n    $(\"#screenshot_box\").fadeOut();\n    $(\"#popover_box\").fadeOut();\n    $(\"#confirmation_box\").fadeOut();\n    $('#gray_out').fadeOut();\n    $('#popover_form').fadeOut();\n    if (id !== undefined && id !== '') {\n        $(id).fadeOut();\n    }\n}\n\nfunction activateTagField() {\n    $(\"#addTagButton\").hide();\n    $(\"#addTagField\").show();\n}\n\nfunction tagFieldChange() {\n    if ($(\"#addTagField :selected\").val() > 0) {\n        var selected_id = $(\"#addTagField :selected\").val();\n        var selected_text = $(\"#addTagField :selected\").text();\n        if ($.inArray(selected_id, selectedTags)==-1) {\n            selectedTags.push(selected_id);\n            appendTemplateTag(selected_id);\n        }\n    }\n    $(\"#addTagButton\").show();\n    $(\"#addTagField\").hide();\n}\n\nfunction appendTemplateTag(selected_id) {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(\"#tags\").append(data);\n        },\n        url:\"/tags/viewTag/\" + selected_id,\n    });\n    updateSelectedTags();\n}\n\nfunction addAllTags(tagArray) {\n    parsedTagArray = JSON.parse(tagArray);\n    parsedTagArray.forEach(function(tag) {\n        appendTemplateTag(tag);\n    });\n}\n\nfunction removeTemplateTag(id, name) {\n    selectedTags.forEach(function(tag) {\n        if (tag == id) {\n            var index = selectedTags.indexOf(id);\n            if (index > -1) {\n                selectedTags.splice(index, 1);\n                updateSelectedTags();\n            }\n        }\n    });\n    $('#tag_bubble_' + id).remove();\n}\n\nfunction updateSelectedTags() {\n    $('#hiddenTags').attr(\"value\", JSON.stringify(selectedTags));\n}\n\nfunction saveElementSorting(order) {\n    $.ajax({\n        data: order,\n        dataType:\"json\",\n        contentType: \"application/json\",\n        cache: false,\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse(data);\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/templates/saveElementSorting/\",\n    });\n}\n\nfunction templateAddElementClicked(id) {\n    simplePopup(\"/template_elements/templateElementAddChoices/\" + id);\n}\n\nfunction templateAddElement(type, id) {\n    simplePopup(\"/template_elements/add/\" + type + \"/\" + id);\n}\n\nfunction templateUpdateAvailableTypes() {\n    $(\"#innerTypes\").empty();\n    var type = $(\"#TemplateElementAttributeType option:selected\").text();\n    var complex = $('#TemplateElementAttributeComplex:checked').val();\n    if (complex && type != 'Select Type') {\n        currentTypes.forEach(function(entry) {\n            $(\"#innerTypes\").append(\"<div class=\\\"templateTypeBox\\\" id=\\\"\" + entry + \"TypeBox\\\">\" + entry + \"</div>\");\n        });\n        $('#outerTypes').show();\n    }\n    else $('#outerTypes').hide();\n}\n\nfunction populateTemplateTypeDropdown() {\n    var cat = $(\"#TemplateElementAttributeCategory option:selected\").text();\n    currentTypes = [];\n    if (cat == 'Select Category') {\n        $('#TemplateElementAttributeType').html(\"<option>Select Type</option>\");\n    } else {\n        var complex = $('#TemplateElementAttributeComplex:checked').val();\n        if (cat in typeGroupCategoryMapping) {\n            $('#TemplateElementAttributeType').html(\"<option>Select Type</option>\");\n            typeGroupCategoryMapping[cat].forEach(function(entry) {\n                $('#TemplateElementAttributeType').append(\"<option>\" + entry + \"</option>\");\n            });\n        } else {\n            complex = false;\n        }\n        if (!complex) {\n            $('#TemplateElementAttributeType').html(\"<option>Select Type</option>\");\n            categoryTypes[cat].forEach(function(entry) {\n                $('#TemplateElementAttributeType').append(\"<option>\" + entry + \"</option>\");\n            });\n        }\n    }\n}\n\nfunction templateElementAttributeTypeChange() {\n    var complex = $('#TemplateElementAttributeComplex:checked').val();\n    var type = $(\"#TemplateElementAttributeType option:selected\").text();\n    currentTypes = [];\n    if (type != 'Select Type') {\n        if (complex) {\n            complexTypes[type][\"types\"].forEach(function(entry) {\n                currentTypes.push(entry);\n            });\n        } else {\n            currentTypes.push(type);\n        }\n    } else {\n        currentTypes = [];\n    }\n    $(\"#typeJSON\").html(JSON.stringify(currentTypes));\n    templateUpdateAvailableTypes();\n}\n\nfunction templateElementAttributeCategoryChange(category) {\n    if (category in typeGroupCategoryMapping) {\n        $('#complexToggle').show();\n    } else {\n        $('#complexToggle').hide();\n    }\n    if (category != 'Select Type') {\n        populateTemplateTypeDropdown();\n    }\n    templateUpdateAvailableTypes();\n}\n\nfunction templateElementFileCategoryChange(category) {\n    if (category == '') {\n        $(\"#TemplateElementFileMalware\")[0].disabled = true;\n        $(\"#TemplateElementFileMalware\")[0].checked = false;\n    } else {\n        if (categoryArray[category].length == 2) {\n            $(\"#TemplateElementFileMalware\")[0].disabled = false;\n            $(\"#TemplateElementFileMalware\")[0].checked = true;\n        } else {\n            $(\"#TemplateElementFileMalware\")[0].disabled = true;\n            if (categoryArray[category] == 'attachment') $(\"#TemplateElementFileMalware\")[0].checked = false;\n            else $(\"#TemplateElementFileMalware\")[0].checked = true;\n        }\n    }\n}\n\nfunction openPopup(id) {\n    var window_height = $(window).height();\n    var popup_height = $(id).height();\n    if (window_height < popup_height) {\n        $(id).css(\"top\", 50);\n        $(id).css(\"height\", window_height);\n        $(id).addClass('vertical-scroll');\n    } else {\n        if (window_height > (300 + popup_height)) {\n            var top_offset = ((window_height - popup_height) / 2) - 150;\n        } else {\n            var top_offset = (window_height - popup_height) / 2;\n        }\n        $(id).css(\"top\", top_offset + 'px');\n    }\n    $(\"#gray_out\").fadeIn();\n    $(id).fadeIn();\n}\n\nfunction openPopover(clicked, data, hover, placement) {\n    hover = hover === undefined ? false : hover;\n    placement = placement === undefined ? 'right' : placement;\n    /* popup handling */\n    var $clicked = $(clicked);\n    var randomId = $clicked.attr('data-dismissid') !== undefined ? $clicked.attr('data-dismissid') : Math.random().toString(36).substr(2,9); // used to recover the button that triggered the popover (so that we can destroy the popover)\n    var loadingHtml = '<div style=\"height: 75px; width: 75px;\"><div class=\"spinner\"></div><div class=\"loadingText\">Loading</div></div>';\n    $clicked.attr('data-dismissid', randomId);\n    var closeButtonHtml = '<button type=\"button\" class=\"close\" style=\"margin-left: 5px;\" onclick=\"$(&apos;[data-dismissid=&quot;' + randomId + '&quot;]&apos;).popover(\\'destroy\\');\">\u00d7</button>';\n\n    if (!$clicked.data('popover')) {\n        $clicked.addClass('have-a-popover');\n        var popoverOptions = {\n            html: true,\n            placement: placement,\n            trigger: 'manual',\n            content: loadingHtml,\n            container: 'body',\n            template: '<div class=\"popover\" role=\"tooltip\" data-dismissid=\"' + randomId + '\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"><div class=\"data-content\"></div></div></div>'\n        };\n        $clicked.popover(popoverOptions)\n        .on('shown.bs.popover', function(event) {\n            var $this = $(this);\n            var title = $this.attr('title');\n            var popover = $('div.popover[data-dismissid=\"' + randomId + '\"]');\n            title = title === \"\" ? $this.attr('data-original-title') : title;\n\n            if (title === \"\") {\n                title = \"&nbsp;\";\n                // adjust popover position (title was empty)\n                var top = popover.offset().top;\n                popover.css('top', (top-17) + 'px');\n            }\n            var popoverTitle = popover.find('h3.popover-title');\n            popoverTitle.html(title + closeButtonHtml);\n        })\n        .on('keydown.volatilePopover', function(e) {\n            if(e.keyCode == 27) { // ESC\n                $(this).popover('destroy');\n                $(this).off('keydown.volatilePopover');\n            }\n        });\n\n        if (hover) {\n            $clicked.on('mouseenter', function() {\n                var _this = this;\n                $clicked.popover('show');\n                $(\".popover\").on(\"mouseleave\", function() { // close popover when leaving it\n                    $(_this).popover('hide');\n                });\n            })\n            .on('mouseleave', function() { // close popover if button not hovered (timeout)\n                var _this = this;\n                setTimeout(function() {\n                    if ($('.popover:hover').length == 0 && !$(_this).is(\":hover\")) {\n                        $(_this).popover('hide');\n                    }\n                },\n                300);\n            });\n        } else {\n            $clicked.popover('show');\n        }\n\n    } else {\n        // $clicked.popover('show');\n    }\n    var popover = $clicked.data('popover');\n\n    if (data === undefined) {\n        return popover\n    } else if (popover.options.content !== data) {\n        popover.options.content =  data;\n        $clicked.popover('show');\n        return popover;\n    }\n}\n\nfunction getMatrixPopup(scope, scope_id, galaxy_id) {\n    cancelPopoverForm();\n    getPopup(scope_id + '/' + galaxy_id + '/' + scope, 'events', 'viewGalaxyMatrix', '', '#popover_form_large');\n}\n\nfunction getPopup(id, context, target, admin, popupType) {\n    $(\"#gray_out\").fadeIn();\n    var url = \"\";\n    if (typeof admin !== 'undefined' && admin != '') url+= \"/admin\";\n    if (context != '') {\n        url += \"/\" + context;\n    }\n    if (target != '') url += \"/\" + target;\n    if (id != '') url += \"/\" + id;\n    if (popupType == '' || typeof popupType == 'undefined') popupType = '#popover_form';\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        async: true,\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(popupType).html(data);\n            openPopup(popupType);\n        },\n        error:function() {\n            $(\".loading\").hide();\n            $(\"#gray_out\").fadeOut();\n            showMessage('fail', 'Something went wrong - the queried function returned an exception. Contact your administrator for further details (the exception has been logged).');\n        },\n        url: url\n    });\n}\n\n// Same as getPopup function but create a popover to populate first\nfunction popoverPopup(clicked, id, context, target, admin) {\n    var url = \"\";\n    if (typeof admin !== 'undefined' && admin != '') url+= \"/admin\";\n    if (context != '') {\n        url += \"/\" + context;\n    }\n    if (target != '') url += \"/\" + target;\n    if (id != '') url += \"/\" + id;\n    var popover = openPopover(clicked, undefined);\n    $clicked = $(clicked);\n\n    // actual request //\n    $.ajax({\n        dataType:\"html\",\n        async: true,\n        cache: false,\n        success:function (data, textStatus) {\n            if (popover.options.content !== data) {\n                popover.options.content =  data;\n                $clicked.popover('show');\n            }\n        },\n        error:function() {\n            popover.options.content =  '<div class=\"alert alert-error\" style=\"margin-bottom: 0px;\">Something went wrong - the queried function returned an exception. Contact your administrator for further details (the exception has been logged).</div>';\n            $clicked.popover('show');\n        },\n        url: url\n    });\n}\n\n// create a confirm popover on the clicked html node.\nfunction popoverConfirm(clicked) {\n    var $clicked = $(clicked);\n    var popoverContent = '<div>';\n        popoverContent += '<button id=\"popoverConfirmOK\" class=\"btn btn-primary\" onclick=submitPopover(this)>Yes</button>';\n        popoverContent += '<button class=\"btn btn-inverse\" style=\"float: right;\" onclick=cancelPrompt()>Cancel</button>';\n    popoverContent += '</div>';\n    openPopover($clicked, popoverContent);\n    $(\"#popoverConfirmOK\")\n    .focus()\n    .bind(\"keydown\", function(e) {\n        if (e.ctrlKey && (e.keyCode == 13 || e.keyCode == 10)) {\n            $(this).click();\n        }\n        if(e.keyCode == 27) { // ESC\n            $clicked.popover('destroy');\n        }\n    });\n}\n\nfunction submitPopover(clicked) {\n    var $clicked = $(clicked);\n    var $form = $clicked.closest('form');\n    if ($form.length === 0) { // popover container is body, submit from original node\n        var dismissid = $clicked.closest('div.popover').attr('data-dismissid');\n        $form = $('[data-dismissid=\"' + dismissid + '\"]').closest('form');\n    }\n    $form.submit();\n}\n\nfunction simplePopup(url) {\n    $(\"#gray_out\").fadeIn();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        async: true,\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(\"#popover_form\").html(data);\n            openPopup(\"#popover_form\");\n        },\n        error:function(xhr) {\n            $(\".loading\").hide();\n            $(\"#gray_out\").fadeOut();\n            if (xhr.status == 403) {\n                showMessage('fail', 'Not allowed.');\n            } else if (xhr.status == 404) {\n                showMessage('fail', 'Resource not found.');\n            } else {\n                showMessage('fail', 'Something went wrong - the queried function returned an exception. Contact your administrator for further details (the exception has been logged).');\n            }\n        },\n        url: url,\n    });\n}\n\nfunction choicePopup(legend, list) {\n    var popupHtml = '<div class=\"popover_choice\">';\n    popupHtml += '<legend>Select Object Category</legend>';\n        popupHtml += '<div class=\"popover_choice_main\" id =\"popover_choice_main\">';\n            popupHtml += '<table style=\"width:100%;\" id=\"MainTable\">';\n                popupHtml += '<tbody>';\n                    list.forEach(function(item) {\n                        popupHtml += '<tr style=\"border-bottom:1px solid black;\" class=\"templateChoiceButton\">';\n                            popupHtml += '<td role=\"button\" tabindex=\"0\" aria-label=\"All meta-categories\" title=\"'+item.text+'\" style=\"padding-left:10px;padding-right:10px; text-align:center;width:100%;\" onClick=\"'+item.onclick+';\">'+item.text+'</td>';\n                        popupHtml += '</tr>';\n                    });\n                popupHtml += '</tbody>';\n            popupHtml += '</table>';\n        popupHtml += '</div>';\n        popupHtml += '<div role=\"button\" tabindex=\"0\" aria-label=\"Cancel\" title=\"Cancel\" class=\"templateChoiceButton templateChoiceButtonLast\" onClick=\"cancelPopoverForm();\">Cancel</div>';\n    popupHtml += '</div>';\n\n    $(\"#popover_form\").html(popupHtml);\n    openPopup(\"#popover_form\");\n}\n\nfunction resizePopoverBody() {\n    var bodyheight = $(window).height();\n    bodyheight = 3 * bodyheight / 4 - 150;\n    $(\"#popover_choice_main\").css({\"max-height\": bodyheight});\n}\n\nfunction populateTemplateHiddenFileDiv(files) {\n    $('#TemplateFileArray').val(JSON.stringify(files));\n}\n\nfunction populateTemplateFileBubbles() {\n    var fileObjectArray = JSON.parse($('#TemplateFileArray').val());\n    fileObjectArray.forEach(function(entry) {\n        templateAddFileBubble(entry.element_id, false, entry.filename, entry.tmp_name, 'yes');\n    });\n}\n\nfunction templateFileHiddenAdd(files, element_id, batch) {\n    var fileArray = $.parseJSON($('#TemplateFileArray', window.parent.document).val());\n    var contained = false;\n    for (var j=0; j< files.length; j++) {\n        for (var i=0; i< fileArray.length; i++) {\n            if (fileArray[i].filename == files[j].filename) {\n                contained = true;\n            }\n            if (batch == 'no' && fileArray[i].element_id == element_id) {\n                templateDeleteFileBubble(fileArray[i].filename, fileArray[i].tmp_name, fileArray[i].element_id, 'iframe', batch);\n                contained = false;\n                var removeId = i;\n            }\n        }\n        if (batch == 'no') fileArray.splice(removeId, 1);\n        if (contained == false) {\n            fileArray.push(files[j]);\n            templateAddFileBubble(element_id, true, files[j].filename, files[j].tmp_name, batch);\n            $('#TemplateFileArray', window.parent.document).val(JSON.stringify(fileArray));\n        }\n    }\n}\n\nfunction htmlEncode(value){\n    return $('<div/>').text(value).html();\n}\n\nfunction templateAddFileBubble(element_id, iframe, filename, tmp_name, batch) {\n    filename = htmlEncode(filename);\n    tmp_name = htmlEncode(tmp_name);\n    if (batch == 'no') {\n        if (iframe == true) {\n            $('#filenames_' + element_id, window.parent.document).html('<div id =\"' + tmp_name + '_container\" class =\"template_file_box_container\"><span class=\"tagFirstHalf template_file_box\">' + filename + '</span><span onClick=\"templateDeleteFileBubble(\\'' + filename + '\\', \\'' + tmp_name + '\\', \\'' + element_id + '\\', \\'normal\\', \\'no\\');\" class=\"tagSecondHalf useCursorPointer\">x</span></div>');\n        } else {\n            $('#filenames_' + element_id).html('<div id =\"' + tmp_name + '_container\" class =\"template_file_box_container\"><span class=\"tagFirstHalf template_file_box\">' + filename + '</span><span onClick=\"templateDeleteFileBubble(\\'' + filename + '\\', \\'' + tmp_name + '\\', \\'' + element_id + '\\', \\'normal\\', \\'no\\');\" class=\"tagSecondHalf useCursorPointer\">x</span></div>');\n        }\n    } else {\n        if (iframe == true) {\n            $('#filenames_' + element_id, window.parent.document).append('<div id =\"' + tmp_name + '_container\" class =\"template_file_box_container\"><span class=\"tagFirstHalf template_file_box\">' + filename + '</span><span onClick=\"templateDeleteFileBubble(\\'' + filename + '\\', \\'' + tmp_name + '\\', \\'' + element_id + '\\', \\'normal\\', \\'yes\\');\" class=\"tagSecondHalf useCursorPointer\">x</span></div>');\n        } else {\n            $('#filenames_' + element_id).append('<div id =\"' + tmp_name + '_container\" class =\"template_file_box_container\"><span class=\"tagFirstHalf template_file_box\">' + filename + '</span><span onClick=\"templateDeleteFileBubble(\\'' + filename + '\\', \\'' + tmp_name + '\\', \\'' + element_id + '\\', \\'normal\\', \\'yes\\');\" class=\"tagSecondHalf useCursorPointer\">x</span></div>');\n        }\n    }\n}\n\nfunction templateDeleteFileBubble(filename, tmp_name, element_id, context, batch) {\n    $(\".loading\").show();\n    $.ajax({\n        type:\"post\",\n        cache: false,\n        url:\"/templates/deleteTemporaryFile/\" + tmp_name,\n    });\n    var c = this;\n    if (context == 'iframe') {\n        $('#' + tmp_name + '_container', window.parent.document).remove();\n        var oldArray = JSON.parse($('#TemplateFileArray', window.parent.document).val());\n    } else {\n        $('#' + tmp_name + '_container').remove();\n        var oldArray = JSON.parse($('#TemplateFileArray').val());\n    }\n    var newArray = [];\n    oldArray.forEach(function(entry) {\n        if (batch == 'no') {\n            if (entry.element_id != element_id) {\n                newArray.push(entry);\n            }\n        } else {\n            if (entry.tmp_name != tmp_name) {\n                newArray.push(entry);\n            }\n        }\n    });\n    if (batch == 'no') {\n        $('#fileUploadButton_' + element_id, $('#iframe_' + element_id).contents()).html('Upload File');\n    }\n    if (context == 'iframe') {\n        $('#TemplateFileArray', window.parent.document).val(JSON.stringify(newArray));\n    } else {\n        $('#TemplateFileArray').val(JSON.stringify(newArray));\n    }\n    $(\".loading\").hide();\n}\n\nfunction templateFileUploadTriggerBrowse(id) {\n    $('#upload_' + id + '_file').click();\n}\n\nfunction freetextRemoveRow(id, event_id) {\n    $('#row_' + id).hide();\n    $('#Attribute' + id + 'Save').attr(\"value\", \"0\");\n    if ($(\".freetext_row:visible\").length == 0) {\n        window.location = \"/events/\" + event_id;\n    }\n}\n\nfunction indexEvaluateFiltering() {\n    if (filterContext == \"event\") {\n        if (filtering.published != 2) {\n            $('#value_published').html(publishedOptions[filtering.published]);\n        } else {\n            $('#value_published').html(\"\");\n        }\n        if (filtering.hasproposal != 2) {\n            $('#value_hasproposal').html(publishedOptions[filtering.hasproposal]);\n        } else {\n            $('#value_hasproposal').html(\"\");\n        }\n        if (filtering.date.from != null) {\n            var text = \"\";\n            if (filtering.date.from != \"\") text = \"From: \" + $('<span>').text(filtering.date.from).html();\n            if (filtering.date.until != \"\") {\n                if (text != \"\") text += \" \";\n                text += \"Until: \" + $('<span>').text(filtering.date.until).html();\n            }\n        }\n        $('#value_date').html(text);\n        for (var i = 0; i < simpleFilters.length; i++) {\n            indexEvaluateSimpleFiltering(simpleFilters[i]);\n        }\n        indexRuleChange();\n    } else {\n        for (var i = 0; i < differentFilters.length; i++) {\n            if (filtering[differentFilters[i]] != \"\") {\n                var text = \"\";\n                if (filtering[differentFilters[i]] == 1) text = \"Yes\";\n                else if (filtering[differentFilters[i]] == 0) text = \"No\";\n                $('#value_' + differentFilters[i]).text(text);\n            } else {\n                $('#value_' + differentFilters[i]).text(\"\");\n            }\n        }\n        for (var i = 0; i < simpleFilters.length; i++) {\n            indexEvaluateSimpleFiltering(simpleFilters[i]);\n        }\n    }\n    indexSetTableVisibility();\n    indexSetRowVisibility();\n    $('#generatedURLContent').text(indexCreateFilters());\n}\n\nfunction quickFilter(passedArgs, url) {\n    if(!passedArgs){\n        var passedArgs = [];\n    }\n    if( $('#quickFilterField').val().trim().length > 0){\n        passedArgs[\"searchall\"] = $('#quickFilterField').val().trim();\n        for (var key in passedArgs) {\n            if (key !== 'page') {\n                url += \"/\" + key + \":\" + passedArgs[key];\n            }\n        }\n    }\n    window.location.href=url;\n}\n\nfunction runIndexFilter(element) {\n    var dataFields = $(element).data();\n    for (var k in $(element).data()) {\n        if (k in passedArgsArray) {\n            delete(passedArgsArray[k]);\n        } else {\n            passedArgsArray[k] = dataFields[k];\n        }\n    }\n    url = here;\n    for (var key in passedArgsArray) {\n        url += \"/\" + key + \":\" + passedArgsArray[key];\n    }\n    window.location.href = url;\n}\n\nfunction runIndexQuickFilter(preserveParams) {\n    if (!passedArgsArray) {\n        var passedArgsArray = [];\n    }\n    var searchKey = 'searchall';\n    if ($('#quickFilterField').data('searchkey')) {\n        searchKey = $('#quickFilterField').data('searchkey');\n    }\n    if ( $('#quickFilterField').val().trim().length > 0){\n        passedArgsArray[searchKey] = $('#quickFilterField').val().trim();\n    }\n    url = here;\n    if (typeof preserveParams !== \"undefined\") {\n        url += preserveParams;\n    }\n    for (var key in passedArgsArray) {\n        if (key !== 'page') {\n            url += \"/\" + key + \":\" + passedArgsArray[key];\n        }\n    }\n    window.location.href = url;\n}\n\nfunction executeFilter(passedArgs, url) {\n    for (var key in passedArgs) url += \"/\" + key + \":\" + passedArgs[key];\n    window.location.href=url;\n}\n\nfunction quickFilterTaxonomy(taxonomy_id, passedArgs) {\n    var url = \"/taxonomies/view/\" + taxonomy_id + \"/filter:\" + $('#quickFilterField').val();\n    window.location.href=url;\n}\n\nfunction quickFilterRemoteEvents(passedArgs, id) {\n    passedArgs[\"searchall\"] = $('#quickFilterField').val();\n    var url = \"/servers/previewIndex/\" + id;\n    for (var key in passedArgs) {\n        url += \"/\" + key + \":\" + passedArgs[key];\n    }\n    window.location.href=url;\n}\n\nfunction remoteIndexApplyFilters() {\n    var url = actionUrl + '/' + $(\"#EventFilter\").val();\n    window.location.href = url;\n}\n\nfunction indexApplyFilters() {\n    var url = indexCreateFilters();\n    window.location.href = url;\n}\n\nfunction indexCreateFilters() {\n    text = \"\";\n    if (filterContext == 'event') {\n        if (filtering.published != \"2\") {\n            text += \"searchpublished:\" + filtering.published;\n        }\n        if (filtering.hasproposal != \"2\") {\n            if (text != \"\") text += \"/\";\n            text += \"searchhasproposal:\" + filtering.hasproposal;\n        }\n    } else {\n        for (var i = 0; i < differentFilters.length; i++) {\n            if (filtering[differentFilters[i]]) {\n                if (text != \"\") text += \"/\";\n                text += \"search\" + differentFilters[i] + \":\" + filtering[differentFilters[i]];\n            }\n        }\n    }\n    for (var i = 0; i < simpleFilters.length; i++) {\n        text = indexBuildArray(simpleFilters[i], text);\n    }\n    if (filterContext == 'event') {\n        if (filtering.date.from) {\n            if (text != \"\") text += \"/\";\n            text += \"searchDatefrom:\" + filtering.date.from;\n        }\n        if (filtering.date.until) {\n            if (text != \"\") text += \"/\";\n            text += \"searchDateuntil:\" + filtering.date.until;\n        }\n        return baseurl + '/events/index/' + text;\n    } else {\n        return baseurl + '/admin/users/index/' + text;\n    }\n}\n\nfunction indexBuildArray(type, text) {\n    temp = \"\";\n    if (text != \"\") temp += \"/\";\n    temp += \"search\" + type + \":\";\n    if (filtering[type].NOT.length == 0 && filtering[type].OR.length == 0) return text;\n    var swap = filtering[type].OR.length;\n    var temp_array = filtering[type].OR.concat(filtering[type].NOT);\n    for (var i = 0; i < temp_array.length; i++) {\n        if (i > 0) temp += \"|\";\n        if (i >= swap) temp +=\"!\";\n        temp += temp_array[i];\n    }\n    text += temp;\n    return text;\n}\n\nfunction indexSetRowVisibility() {\n    for (var i = 0; i < allFields.length; i++) {\n        if ($(\"#value_\" + allFields[i]).text().trim() != \"\") {\n            $(\"#row_\" + allFields[i]).show();\n        } else {\n            $(\"#row_\" + allFields[i]).hide();\n        }\n    }\n}\n\nfunction indexEvaluateSimpleFiltering(field) {\n    text = \"\";\n    if (filtering[field].OR.length == 0 && filtering[field].NOT.length == 0) {\n        $('#value_' + field).html(text);\n        return false;\n    }\n    if (filtering[field].OR.length !=0) {\n        for (var i = 0; i < filtering[field].OR.length; i++) {\n            if (i > 0) text += '<span class=\"green bold\"> OR </span>';\n            if (typedFields.indexOf(field) == -1) {\n                text += $('<span>').text(filtering[field].OR[i]).html();\n            } else {\n                for (var j = 0; j < typeArray[field].length; j++) {\n                    if (typeArray[field][j].id == filtering[field].OR[i]) {\n                        text += $('<span>').text(typeArray[field][j].value).html();\n                    }\n                }\n            }\n        }\n    }\n    if (filtering[field].NOT.length !=0) {\n        for (var i = 0; i < filtering[field].NOT.length; i++) {\n            if (i == 0) {\n                if (text != \"\") text += '<span class=\"red bold\"> AND NOT </span>';\n                else text += '<span class=\"red bold\">NOT </span>';\n            } else text += '<span class=\"red bold\"> AND NOT </span>';\n            if (typedFields.indexOf(field) == -1) {\n                text += $('<span>').text(filtering[field].NOT[i]).html();\n            } else {\n                for (var j = 0; j < typeArray[field].length; j++) {\n                    if (typeArray[field][j].id == filtering[field].NOT[i]) {\n                        text += $('<span>').text(typeArray[field][j].value).html();\n                    }\n                }\n            }\n        }\n    }\n    $('#value_' + field).html(text);\n}\n\nfunction indexAddRule(param) {\n    var found = false;\n    if (filterContext == 'event') {\n        if (param.data.param1 == \"date\") {\n            var val1 = escape($('#EventSearch' + param.data.param1 + 'from').val());\n            var val2 = escape($('#EventSearch' + param.data.param1 + 'until').val());\n            if (val1 != \"\") filtering.date.from = val1;\n            if (val2 != \"\") filtering.date.until = val2;\n        } else if (param.data.param1 == \"published\") {\n            var value = escape($('#EventSearchpublished').val());\n            if (value != \"\") filtering.published = value;\n        } else if (param.data.param1 == \"hasproposal\") {\n            var value = escape($('#EventSearchhasproposal').val());\n            if (value != \"\") filtering.hasproposal = value;\n        } else {\n            var value = escape($('#EventSearch' + param.data.param1).val());\n            var operator = operators[escape($('#EventSearchbool').val())];\n            if (value != \"\" && filtering[param.data.param1][operator].indexOf(value) < 0) filtering[param.data.param1][operator].push(value);\n        }\n    } else if (filterContext == 'user') {\n        if (differentFilters.indexOf(param.data.param1) != -1) {\n            var value = escape($('#UserSearch' + param.data.param1).val());\n            if (value != \"\") filtering[param.data.param1] = value;\n        } else {\n            var value = escape($('#UserSearch' + param.data.param1).val());\n            var operator = operators[escape($('#UserSearchbool').val())];\n            if (value != \"\" && filtering[param.data.param1][operator].indexOf(value) < 0) filtering[param.data.param1][operator].push(value);\n        }\n    }\n    indexEvaluateFiltering();\n}\n\nfunction indexSetTableVisibility() {\n    var visible = false;\n    if ($(\"[id^='value_']\").text().trim()!=\"\" && $(\"[id^='value_']\").text().trim()!=\"-1\") {\n        visible = true;\n    }\n    if (visible == true) $('#FilterplaceholderTable').hide();\n    else $('#FilterplaceholderTable').show();\n}\n\nfunction indexRuleChange() {\n    var context = filterContext.charAt(0).toUpperCase() + filterContext.slice(1);\n    $('[id^=' + context + 'Search]').hide();\n    var rule = $('#' + context + 'Rule').val();\n    var fieldName = '#' + context + 'Search' + rule;\n    if (fieldName == '#' + context + 'Searchdate') {\n        $(fieldName + 'from').show();\n        $(fieldName + 'until').show();\n    } else {\n        $(fieldName).show();\n    }\n    if (simpleFilters.indexOf(rule) != -1) {\n        $('#' + context + 'Searchbool').show();\n    } else $('#' + context + 'Searchbool').hide();\n\n    $('#addRuleButton').show();\n    $('#addRuleButton').unbind(\"click\");\n    $('#addRuleButton').click({param1: rule}, indexAddRule);\n}\n\nfunction indexFilterClearRow(field) {\n    $('#value_' + field).html(\"\");\n    $('#row_' + field).hide();\n    if (field == \"date\") {\n        filtering.date.from = \"\";\n        filtering.date.until = \"\";\n    } else if (field == \"published\") {\n        filtering.published = 2;\n    } else if (field == \"hasproposal\") {\n        filtering.hasproposal = 2;\n    } else if (differentFilters.indexOf(field) != -1) {\n        filtering[field] = \"\";\n    } else {\n        filtering[field].NOT = [];\n        filtering[field].OR = [];\n    }\n    indexSetTableVisibility();\n    indexEvaluateFiltering();\n}\n\n\nfunction restrictEventViewPagination() {\n    var showPages = new Array();\n    var start;\n    var end;\n    var i;\n\n    if (page < 6) {\n        start = 1;\n        if (count - page < 6) {\n            end = count;\n        } else {\n            end = page + (9 - (page - start));\n        }\n    } else if (count - page < 6) {\n        end = count;\n        start = count - 10;\n    } else {\n        start = page-5;\n        end = page+5;\n    }\n\n    if (start > 2) {\n        $(\"#apage\" + start).parent().before(\"<li><a href id='aExpandLeft'>...</a></li>\");\n        $(\"#aExpandLeft\").click(function() {expandPagination(0, 0); return false;});\n        $(\"#bpage\" + start).parent().before(\"<li><a href id='bExpandLeft'>...</a></li>\");\n        $(\"#bExpandLeft\").click(function() {expandPagination(1, 0); return false;})\n    }\n\n    if (end < (count - 1)) {\n        $(\"#apage\" + end).parent().after(\"<li><a href id='aExpandRight'>...</a></li>\");\n        $(\"#aExpandRight\").click(function() {expandPagination(0, 1); return false;});\n        $(\"#bpage\" + end).parent().after(\"<li><a href id='bExpandRight'>...</a></li>\");\n        $(\"#bExpandRight\").click(function() {expandPagination(1, 1); return false;})\n    }\n\n    for (i = 1; i < (count+1); i++) {\n        if (i != 1 && i != count && (i < start || i > end)) {\n            $(\"#apage\" + i).hide();\n            $(\"#bpage\" + i).hide();\n        }\n    }\n}\n\nfunction expandPagination(bottom, right) {\n    var i;\n    var prefix = \"a\";\n    if (bottom == 1) prefix = \"b\";\n    var start = 1;\n    var end = page;\n    if (right == 1) {\n        start = page;\n        end = count;\n        $(\"#\" + prefix + \"ExpandRight\").remove();\n    } else $(\"#\" + prefix + \"ExpandLeft\").remove();\n    for (i = start; i < end; i++) {\n        $(\"#\" + prefix + \"page\" + i).show();\n    }\n}\n\nfunction getSubGroupFromSetting(setting) {\n    var temp = setting.split('.');\n    if (temp[0] == \"Plugin\") {\n        temp = temp[1];\n        if (temp.indexOf('_') > -1) {\n            temp = temp.split('_');\n            return temp[0];\n        }\n    }\n    return 'general';\n}\n\nfunction serverSettingsActivateField(setting, id) {\n    resetForms();\n    $('.inline-field-placeholder').hide();\n    var fieldName = \"#setting_\" + getSubGroupFromSetting(setting) + \"_\" + id;\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (data, textStatus) {\n            $(\".loading\").hide();\n            $(fieldName + \"_placeholder\").html(data);\n            $(fieldName + \"_solid\").hide();\n            $(fieldName + \"_placeholder\").show();\n            serverSettingsPostActivationScripts(fieldName, setting, id);\n        },\n        url:\"/servers/serverSettingsEdit/\" + setting + \"/\" + id,\n    });\n}\n\nfunction serverSettingsPostActivationScripts(name, setting, id) {\n    $(name + '_field').focus();\n    inputFieldButtonActive(name + '_field');\n\n    $(name + '_form').submit(function(e){\n        e.preventDefault();\n        serverSettingSubmitForm(name, setting, id);\n        return false;\n    });\n\n    $(name + '_form').bind(\"focusout\", function() {\n        inputFieldButtonPassive(name + '_field');\n    });\n\n    $(name + '_form').bind(\"focusin\", function(){\n        inputFieldButtonActive(name + '_field');\n    });\n\n    $(name + '_form').bind(\"keydown\", function(e) {\n        if (e.ctrlKey && (e.keyCode == 13 || e.keyCode == 10)) {\n            serverSettingSubmitForm(name, setting, id);\n        }\n    });\n    $(name + '_field').closest('.inline-input-container').children('.inline-input-accept').bind('click', function() {\n        serverSettingSubmitForm(name, setting, id);\n    });\n    $(name + '_field').closest('.inline-input-container').children('.inline-input-decline').bind('click', function() {\n        resetForms();\n        $('.inline-field-placeholder').hide();\n    });\n\n    $(name + '_solid').hide();\n}\n\nfunction serverSettingSubmitForm(name, setting, id) {\n    subGroup = getSubGroupFromSetting(setting);\n    var formData = $(name + '_field').closest(\"form\").serialize();\n    $.ajax({\n        data: formData,\n        cache: false,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            $.ajax({\n                type:\"get\",\n                url:\"/servers/serverSettingsReloadSetting/\" + setting + \"/\" + id,\n                success:function (data2, textStatus2) {\n                    $('#' + subGroup + \"_\" + id + '_row').replaceWith(data2);\n                    $(\".loading\").hide();\n                },\n                error:function() {\n                    showMessage('fail', 'Could not refresh the table.');\n                }\n            });\n        },\n        error:function() {\n            showMessage('fail', 'Request failed for an unknown reason.');\n            resetForms();\n            $('.inline-field-placeholder').hide();\n        },\n        type:\"post\",\n        url:\"/servers/serverSettingsEdit/\" + setting + \"/\" + id + \"/\" + 1\n    });\n    $(name + '_field').unbind(\"keyup\");\n    $(name + '_form').unbind(\"focusout\");\n    return false;\n}\n\nfunction updateOrgCreateImageField(string) {\n    string = escape(string);\n    $.ajax({\n        url:'/img/orgs/' + string + '.png',\n        type:'HEAD',\n        error:\n            function(){\n                $('#logoDiv').html('No image uploaded for this identifier');\n            },\n        success:\n            function(){\n                $('#logoDiv').html('<img src=\"/img/orgs/' + string + '.png\" style=\"width:24px;height:24px;\"></img>');\n            }\n    });\n}\n\nfunction generateOrgUUID() {\n    $.ajax({\n        url:'/admin/organisations/generateuuid.json',\n        success:\n            function( data ){\n                $('#OrganisationUuid').val(data.uuid);\n            }\n    });\n}\n\n\nfunction sharingGroupIndexMembersCollapse(id) {\n    $('#' + id + '_down').show();\n    $('#' + id + '_up').hide();\n}\n\nfunction sharingGroupIndexMembersExpand(id) {\n    $('#' + id + '_down').hide();\n    $('#' + id + '_up').show();\n}\n\nfunction popoverStartup() {\n    $('[data-toggle=\"popover\"]').popover({\n        animation: true,\n        html: true,\n    }).click(function(e) {\n        $(e.target).popover('show');\n        $('[data-toggle=\"popover\"]').not(e.target).popover('hide');\n    });\n    $(document).click(function (e) {\n        if (!$('[data-toggle=\"popover\"]').is(e.target)) {\n            $('[data-toggle=\"popover\"]').popover('hide');\n        }\n    });\n}\n\nfunction changeFreetextImportFrom() {\n    $('#changeTo').find('option').remove();\n    options[$('#changeFrom').val()].forEach(function(element) {\n        $('#changeTo').append('<option value=\"' + element + '\">' + element + '</option>');\n    });\n}\n\nfunction changeFreetextImportCommentExecute() {\n    $('.freetextCommentField').val($('#changeComments').val());\n}\n\nfunction changeFreetextImportExecute() {\n    var from = $('#changeFrom').val();\n    var to = $('#changeTo').val();\n    $('.typeToggle').each(function() {\n        if ($( this ).val() == from) {\n            if (selectContainsOption(\"#\" + $(this).attr('id'), to)) $( this ).val(to);\n        }\n    });\n}\n\nfunction selectContainsOption(selectid, value) {\n    var exists = false;\n    $(selectid + ' option').each(function(){\n        if (this.value == value) {\n            exists = true;\n            return false;\n        }\n    });\n    return exists;\n}\n\nfunction exportChoiceSelect(e) {\n    if ($(e.target).is(\"input\")) {\n        return false;\n    }\n    var url = $(e.target).parent().data(\"export-url\");\n    var elementId = $(e.target).parent().data(\"export-key\");\n    var checkbox = $(e.target).parent().data(\"export-checkbox\");\n    if (checkbox == 1) {\n        if ($('#' + elementId + '_toggle').prop('checked')) {\n            url = $('#' + elementId + '_set').html();\n        }\n    }\n    document.location.href = url;\n}\n\nfunction importChoiceSelect(url, elementId, ajax) {\n    if (ajax == 'false') {\n        document.location.href = url;\n    } else {\n        simplePopup(url);\n    }\n}\n\nfunction freetextImportResultsSubmit(id, count) {\n    var attributeArray = [];\n    var temp;\n    for (i = 0; i < count; i++) {\n        if ($('#Attribute' + i + 'Save').val() == 1) {\n            temp = {\n                value:$('#Attribute' + i + 'Value').val(),\n                category:$('#Attribute' + i + 'Category').val(),\n                type:$('#Attribute' + i + 'Type').val(),\n                to_ids:$('#Attribute' + i + 'To_ids')[0].checked,\n                disable_correlation:$('#Attribute' + i + 'Disable_correlation')[0].checked,\n                comment:$('#Attribute' + i + 'Comment').val(),\n                distribution:$('#Attribute' + i + 'Distribution').val(),\n                sharing_group_id:$('#Attribute' + i + 'SharingGroupId').val(),\n                data:$('#Attribute' + i + 'Data').val(),\n                data_is_handled:$('#Attribute' + i + 'DataIsHandled').val(),\n                tags:$('#Attribute' + i + 'Tags').val()\n            }\n            attributeArray[attributeArray.length] = temp;\n        }\n    };\n    $(\"#AttributeJsonObject\").val(JSON.stringify(attributeArray));\n    var formData = $(\".mainForm\").serialize();\n    $.ajax({\n        type: \"post\",\n        cache: false,\n        url: \"/events/saveFreeText/\" + id,\n        data: formData,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            window.location = '/events/view/' + id;\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n    });\n}\n\nfunction moduleResultsSubmit(id) {\n    var data_collected = {};\n    var temp;\n    if ($('.MISPObjects').length) {\n        var objects = [];\n        $(\".MISPObject\").each(function(o) {\n            var object_uuid = $(this).find('.ObjectUUID').text();\n            temp = {\n                uuid: object_uuid,\n                name: $(this).find('.ObjectName').text(),\n                meta_category: $(this).find('.ObjectMetaCategory').text(),\n                distribution: $(this).find('.ObjectDistribution').val(),\n                sharing_group_id: $(this).find('.ObjectSharingGroup').val()\n            }\n            if ($(this).has('.ObjectID').length) {\n                temp['id'] = $(this).find('.ObjectID').text();\n            }\n            if ($(this).has('.ObjectReferences').length) {\n                var references = [];\n                $(this).find('.ObjectReference').each(function() {\n                    var reference = {\n                        object_uuid: object_uuid,\n                        referenced_uuid: $(this).find('.ReferencedUUID').text(),\n                        relationhip_type: $(this).find('.Relationship').text()\n                    };\n                    references.push(reference);\n                });\n                temp['ObjectReference'] = references;\n            }\n            if ($(this).find('.ObjectAttributes').length) {\n                var object_attributes = [];\n                $(this).find('.ObjectAttribute').each(function(a) {\n                    attribute = {\n                        category: $(this).find('.AttributeCategory').text(),\n                        type: $(this).find('.AttributeType').text(),\n                        value: $(this).find('.AttributeValue').text(),\n                        uuid: $(this).find('.AttributeUuid').text(),\n                        to_ids: $(this).find('.AttributeToIds')[0].checked,\n                        disable_correlation: $(this).find('.AttributeDisableCorrelation')[0].checked,\n                        comment: $(this).find('.AttributeComment').val(),\n                        distribution: $(this).find('.AttributeDistribution').val(),\n                        sharing_group_id: $(this).find('.AttributeSharingGroup').val()\n                    }\n                    object_attributes.push(attribute);\n                });\n                temp['Attribute'] = object_attributes;\n            }\n            objects.push(temp);\n        });\n        data_collected['Object'] = objects;\n    }\n    if ($('.MISPAttributes').length) {\n        var attributes = [];\n        $('.MISPAttribute').each(function(a) {\n            temp = {\n                category: $(this).find('.AttributeCategory').text(),\n                type: $(this).find('.AttributeType').text(),\n                value: $(this).find('.AttributeValue').text(),\n                uuid: $(this).find('.AttributeUuid').text(),\n                to_ids: $(this).find('.AttributeToIds')[0].checked,\n                disable_correlation: $(this).find('.AttributeDisableCorrelation')[0].checked,\n                comment: $(this).find('.AttributeComment').val(),\n                distribution: $(this).find('.AttributeDistribution').val(),\n                sharing_group_id: $(this).find('.AttributeSharingGroup').val()\n            }\n            attributes.push(temp);\n        });\n        data_collected['Attribute'] = attributes;\n    }\n    $.ajax({\n        type: \"post\",\n        cache: false,\n        url: \"/events/handleModuleResults/\" + id,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            window.location = '/events/view/' + id;\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        }\n    });\n}\n\nfunction objectTemplateViewContent(context, id) {\n    var url = \"/objectTemplateElements/viewElements/\" + id + \"/\" + context;\n    $.ajax({\n            url: url,\n            type:'GET',\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n            error: function(){\n                $('#ajaxContent').html('An error has occured, please reload the page.');\n            },\n            success: function(response){\n                $('#ajaxContent').html(response);\n            },\n        complete: function() {\n            $(\".loading\").hide();\n        },\n    });\n\n}\n\nfunction organisationViewContent(context, id) {\n    organisationViewButtonHighlight(context);\n    var action = \"/organisations/landingpage/\";\n    if (context == 'members') {\n        action = \"/admin/users/index/searchorg:\";\n    }\n    if (context == 'events') {\n        action = \"/events/index/searchorg:\";\n    }\n    $.ajax({\n        url: action + id,\n        type:'GET',\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        error: function(){\n            $('#ajaxContent').html('An error has occured, please reload the page.');\n        },\n        success: function(response){\n            $('#ajaxContent').html(response);\n        },\n        complete: function() {\n            $(\".loading\").hide();\n        },\n    });\n}\n\nfunction organisationViewButtonHighlight(context) {\n    $(\".orgViewButtonActive\").hide();\n    $(\".orgViewButton\").show();\n    $(\"#button_\" + context).hide();\n    $(\"#button_\" + context + \"_active\").show();\n}\n\nfunction simpleTabPage(page) {\n    $(\".progress_tab\").removeClass(\"btn-primary\").addClass(\"btn-inverse\");\n    $(\"#page\" + page + \"_tab\").removeClass(\"btn-inverse\").addClass(\"btn-primary\");\n    $(\".tabContent\").hide();\n    $(\"#page\" + page + \"_content\").show();\n    if (page == lastPage) simpleTabPageLast();\n}\n\nfunction simpleTabPageLast() {\n    var summaryorgs = summaryextendorgs = remotesummaryorgs = remotesummaryextendorgs = summaryservers = \"\";\n    var orgcounter = extendcounter = remoteorgcounter = remoteextendcounter = servercounter = 0;\n    var sgname = \"[Sharing group name not set!]\";\n    if ($('#SharingGroupName').val()) sgname = $('#SharingGroupName').val();\n    var sgreleasability = \"[Sharing group releasability not set!]\";\n    if ($('#SharingGroupReleasability').val()) sgreleasability = $('#SharingGroupReleasability').val();\n    $('#summarytitle').text(sgname);\n    $('#summaryreleasable').text(sgreleasability);\n    organisations.forEach(function(organisation){\n        if (organisation.type == 'local') {\n            if (orgcounter > 0) summaryorgs += \", \";\n            summaryorgs += organisation.name;\n            if (organisation.extend == true) {\n                if (extendcounter > 0) summaryextendorgs += \", \"\n                summaryextendorgs += organisation.name;\n                extendcounter++;\n            }\n            orgcounter++;\n        } else {\n            if (remoteorgcounter > 0) remotesummaryorgs += \", \";\n            remotesummaryorgs += organisation.name;\n            if (organisation.extend == true) {\n                if (remoteextendcounter > 0) remotesummaryextendorgs += \", \"\n                remotesummaryextendorgs += organisation.name;\n                remoteextendcounter++;\n            }\n            remoteorgcounter++;\n        }\n    });\n    if (orgcounter == 0) $('#localText').hide();\n    if (remoteorgcounter == 0) $('#externalText').hide();\n    if (extendcounter == 0) summaryextendorgs = \"nobody\";\n    if (remoteextendcounter == 0) remotesummaryextendorgs = \"nobody\";\n    servers.forEach(function(server){\n        if (servercounter > 0) summaryservers += \", \";\n        if (server.id != 0) {\n            summaryservers += server.name;\n            if (extendcounter == 0) summaryextendorgs = \"none\";\n            servercounter++;\n        }\n        if (server.id == 0 && server.all_orgs == true) summaryorgs = \"all organisations on this instance\";\n    });\n    if ($('#SharingGroupRoaming').is(\":checked\")) {\n        summaryservers = \"any interconnected instances linked by an eligible organisation.\";\n    } else {\n        if (servercounter == 0) {\n            summaryservers = \"data marked with this sharing group will not be pushed.\";\n        }\n    }\n    $('#summarylocal').text(summaryorgs);\n    $('#summarylocalextend').text(summaryextendorgs);\n    $('#summaryexternal').text(remotesummaryorgs);\n    $('#summaryexternalextend').text(remotesummaryextendorgs);\n    $('#summaryservers').text(summaryservers);\n}\n\nfunction sharingGroupPopulateOrganisations() {\n    $('input[id=SharingGroupOrganisations]').val(JSON.stringify(organisations));\n    $('.orgRow').remove();\n    var id = 0;\n    var html = '';\n    organisations.forEach(function(org) {\n        html = '<tr id=\"orgRow' + id + '\" class=\"orgRow\">';\n        html += '<td class=\"short\">' + org.type + '&nbsp;</td>';\n        html += '<td>' + $('<div>').text(org.name).html() + '&nbsp;</td>';\n        html += '<td>' + org.uuid + '&nbsp;</td>';\n        html += '<td class=\"short\" style=\"text-align:center;\">';\n        if (org.removable == 1) {\n            html += '<input id=\"orgExtend' + id + '\" type=\"checkbox\" onClick=\"sharingGroupExtendOrg(' + id + ')\" ';\n            if (org.extend) html+= 'checked';\n            html += '></input>';\n        } else {\n            html += '<span class=\"icon-ok\"></span>'\n        }\n        html +='</td>';\n        html += '<td class=\"actions short\">';\n        if (org.removable == 1) html += '<span class=\"icon-trash\" onClick=\"sharingGroupRemoveOrganisation(' + id + ')\"></span>';\n        html += '&nbsp;</td></tr>';\n        $('#organisations_table tr:last').after(html);\n        id++;\n    });\n}\n\nfunction sharingGroupPopulateServers() {\n    $('input[id=SharingGroupServers]').val(JSON.stringify(servers));\n    $('.serverRow').remove();\n    var id = 0;\n    var html = '';\n    servers.forEach(function(server) {\n        html = '<tr id=\"serverRow' + id + '\" class=\"serverRow\">';\n        html += '<td>' + server.name + '&nbsp;</td>';\n        html += '<td>' + server.url + '&nbsp;</td>';\n        html += '<td>';\n        html += '<input id=\"serverAddOrgs' + id + '\" type=\"checkbox\" onClick=\"sharingGroupServerAddOrgs(' + id + ')\" ';\n        if (server.all_orgs) html += 'checked';\n        html += '></input>';\n        html +='</td>';\n        html += '<td class=\"actions short\">';\n        if (server.removable == 1) html += '<span class=\"icon-trash\" onClick=\"sharingGroupRemoveServer(' + id + ')\"></span>';\n        html += '&nbsp;</td></tr>';\n        $('#servers_table tr:last').after(html);\n        id++;\n    });\n}\n\nfunction sharingGroupExtendOrg(id) {\n    organisations[id].extend = $('#orgExtend' + id).is(\":checked\");\n}\n\nfunction sharingGroupServerAddOrgs(id) {\n    servers[id].all_orgs = $('#serverAddOrgs' + id).is(\":checked\");\n}\n\nfunction sharingGroupPopulateUsers() {\n    $('input[id=SharingGroupServers]').val(JSON.stringify(organisations));\n}\n\nfunction sharingGroupAdd(context, type) {\n    if (context == 'organisation') {\n        var jsonids = JSON.stringify(orgids);\n        url = '/organisations/fetchOrgsForSG/' + jsonids + '/' + type\n    } else if (context == 'server') {\n        var jsonids = JSON.stringify(serverids);\n        url = '/servers/fetchServersForSG/' + jsonids\n    }\n    $(\"#gray_out\").fadeIn();\n    simplePopup(url);\n}\n\nfunction sharingGroupRemoveOrganisation(id) {\n    organisations.splice(id, 1);\n    orgids.splice(id, 1);\n    sharingGroupPopulateOrganisations();\n}\n\nfunction sharingGroupRemoveServer(id) {\n    servers.splice(id, 1);\n    serverids.splice(id, 1);\n    sharingGroupPopulateServers();\n}\n\nfunction submitPicklistValues(context, local) {\n    if (context == 'org') {\n        var localType = 'local';\n        if (local == 0) localType = 'remote';\n        $(\"#rightValues  option\").each(function() {\n            if (orgids.indexOf($(this).val()) == -1) {\n                organisations.push({\n                        id: $(this).val(),\n                        type: localType,\n                        name: $(this).text(),\n                        extend: false,\n                        uuid: '',\n                        removable: 1\n                });\n            }\n            orgids.push($(this).val());\n            sharingGroupPopulateOrganisations();\n        });\n    } else if (context == 'server') {\n        $(\"#rightValues  option\").each(function() {\n            if (serverids.indexOf($(this).val()) == -1) {\n                servers.push({\n                        id: $(this).val(),\n                        name: $(this).text(),\n                        url: $(this).attr(\"data-url\"),\n                        all_orgs: false,\n                        removable: 1\n                });\n            }\n            serverids.push($(this).val());\n            sharingGroupPopulateServers();\n        });\n    }\n    $(\"#gray_out\").fadeOut();\n    $(\"#popover_form\").fadeOut();\n}\n\nfunction cancelPicklistValues() {\n    $(\"#popover_form\").fadeOut();\n    $(\"#gray_out\").fadeOut();\n}\n\nfunction sgSubmitForm(action) {\n    var ajax = {\n            'organisations': organisations,\n            'servers': servers,\n            'sharingGroup': {\n                'name': $('#SharingGroupName').val(),\n                'releasability': $('#SharingGroupReleasability').val(),\n                'description': $('#SharingGroupDescription').val(),\n                'active': $('#SharingGroupActive').is(\":checked\"),\n                'roaming': $('#SharingGroupRoaming').is(\":checked\"),\n            }\n    };\n    $('#SharingGroupJson').val(JSON.stringify(ajax));\n    var formName = \"#SharingGroup\" + action + \"Form\";\n    $(formName).submit();\n}\n\nfunction serverSubmitForm(action) {\n    var ajax = {};\n    switch ($('#ServerOrganisationType').val()) {\n    case '0':\n        ajax = {\n            'id': $('#ServerLocal').val()\n        };\n        break;\n    case '1':\n        ajax = {\n            'id': $('#ServerExternal').val()\n        };\n        break;\n    case '2':\n        ajax = {\n            'name': $('#ServerExternalName').val(),\n            'uuid': $('#ServerExternalUuid').val()\n        };\n        break;\n    }\n\n    $('#ServerJson').val(JSON.stringify(ajax));\n    var formName = \"#Server\" + action + \"Form\";\n    $(formName).submit();\n}\n\nfunction serverOrgTypeChange() {\n    $(\".hiddenField\").hide();\n    switch ($('#ServerOrganisationType').val()) {\n        case '0':\n            $(\"#ServerLocalContainer\").show();\n            break;\n        case '1':\n            $(\"#ServerExternalContainer\").show();\n            break;\n        case '2':\n            $(\"#ServerExternalUuidContainer\").show();\n            $(\"#ServerExternalNameContainer\").show();\n            break;\n    }\n}\n\nfunction sharingGroupPopulateFromJson() {\n    var jsonparsed = JSON.parse($('#SharingGroupJson').val());\n    organisations = jsonparsed.organisations;\n    servers = jsonparsed.servers;\n    if (jsonparsed.sharingGroup.active == 1) {\n        $(\"#SharingGroupActive\").prop(\"checked\", true);\n    }\n    if (jsonparsed.sharingGroup.roaming == 1) {\n        $(\"#SharingGroupRoaming\").prop(\"checked\", true);\n        $('#serverList').show();\n    }\n    $('#SharingGroupName').attr('value', jsonparsed.sharingGroup.name);\n    $('#SharingGroupReleasability').attr('value', jsonparsed.sharingGroup.releasability);\n    $('#SharingGroupDescription').text(jsonparsed.sharingGroup.description);\n}\n\nfunction testConnection(id) {\n    $.ajax({\n        url: '/servers/testConnection/' + id,\n        type:'GET',\n        beforeSend: function (XMLHttpRequest) {\n            $(\"#connection_test_\" + id).html('Running test...');\n        },\n        error: function(){\n            $(\"#connection_test_\" + id).html('Internal error.');\n        },\n        success: function(response){\n            var result = response;\n            switch (result.status) {\n            case 1:\n                status_message = \"OK\";\n                compatibility = \"Compatible\";\n                compatibility_colour = \"green\";\n                colours = {'local': 'class=\"green\"', 'remote': 'class=\"green\"', 'status': 'class=\"green\"'};\n                issue_colour = \"red\";\n                if (result.mismatch == \"hotfix\") issue_colour = \"orange\";\n                if (result.newer == \"local\") {\n                    colours.remote = 'class=\"' + issue_colour + '\"';\n                    if (result.mismatch == \"minor\") {\n                        compatibility = \"Pull only\";\n                        compatibility_colour = \"orange\";\n                    } else if (result.mismatch == \"major\") {\n                        compatibility = \"Incompatible\";\n                        compatibility_colour = \"red\";\n                    }\n                } else if (result.newer == \"remote\") {\n                    colours.local = 'class=\"' + issue_colour + '\"';\n                    if (result.mismatch != \"hotfix\") {\n                        compatibility = \"Incompatible\";\n                        compatibility_colour = \"red\";\n                    }\n                }\n                if (result.mismatch != false) {\n                    if (result.newer == \"remote\") status_message = \"Local instance outdated, update!\";\n                    else status_message = \"Remote outdated, notify admin!\"\n                    colours.status = 'class=\"' + issue_colour + '\"';\n                }\n                if (result.post != false) {\n                    var post_colour = \"red\";\n                    if (result.post == 1) {\n                        post_colour = \"green\";\n                        post_result = \"Received sent package\";\n                    } else if (result.post == 8) {\n                        post_result = \"Could not POST message\";\n                    } else if (result.post == 9) {\n                        post_result = \"Invalid body\";\n                    } else if (result.post == 10) {\n                        post_result = \"Invalid headers\";\n                    } else {\n                        post_colour = \"orange\";\n                        post_result = \"Remote too old for this test\";\n                    }\n                }\n                resultDiv = '<div>Local version: <span ' + colours.local + '>' + result.local_version + '</span><br />';\n                resultDiv += '<div>Remote version: <span ' + colours.remote + '>' + result.version + '</span><br />';\n                resultDiv += '<div>Status: <span ' + colours.status + '>' + status_message + '</span><br />';\n                resultDiv += '<div>Compatiblity: <span class=\"' + compatibility_colour + '\">' + compatibility + '</span><br />';\n                resultDiv += '<div>POST test: <span class=\"' + post_colour + '\">' + post_result + '</span><br />';\n                $(\"#connection_test_\" + id).html(resultDiv);\n                //$(\"#connection_test_\" + id).html('<span class=\"green bold\" title=\"Connection established, correct response received.\">OK</span>');\n                break;\n            case 2:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"There seems to be a connection issue. Make sure that the entered URL is correct and that the certificates are in order.\">Server unreachable</span>');\n                break;\n            case 3:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"The server returned an unexpected result. Make sure that the provided URL (or certificate if it applies) are correct.\">Unexpected error</span>');\n                break;\n            case 4:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"Authentication failed due to incorrect authentication key or insufficient privileges on the remote instance.\">Authentication failed</span>');\n                break;\n            case 5:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"Authentication failed because the sync user is expected to change passwords. Log into the remote MISP to rectify this.\">Password change required</span>');\n                break;\n            case 6:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"Authentication failed because the sync user on the remote has not accepted the terms of use. Log into the remote MISP to rectify this.\">Terms not accepted</span>');\n                break;\n            case 7:\n                $(\"#connection_test_\" + id).html('<span class=\"red bold\" title=\"The user account on the remote instance is not a sync user.\">Remote user not a sync user</span>');\n                break;\n            }\n        }\n    })\n}\n\nfunction pgpChoiceSelect(uri) {\n    $(\"#popover_form\").fadeOut();\n    $(\"#gray_out\").fadeOut();\n    $.ajax({\n        type: \"get\",\n        url: \"https://pgp.circl.lu\" + uri,\n        success: function (data) {\n            var result = data.split(\"<pre>\")[1].split(\"</pre>\")[0];\n            $(\"#UserGpgkey\").val(result);\n            showMessage('success', \"Key found!\");\n        },\n        error: function (data, textStatus, errorThrown) {\n            showMessage('fail', textStatus + \": \" + errorThrown);\n            $(\".loading\").hide();\n            $(\"#gray_out\").fadeOut();\n        }\n    });\n}\n\nfunction lookupPGPKey(emailFieldName) {\n    simplePopup(\"/users/fetchPGPKey/\" + $('#' + emailFieldName).val());\n}\n\nfunction zeroMQServerAction(action) {\n    $.ajax({\n        type: \"get\",\n        url: \"/servers/\" + action + \"ZeroMQServer/\",\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success: function (data) {\n            $(\".loading\").hide();\n            if (action !== 'status') {\n                window.location.reload();\n            } else {\n                $(\"#confirmation_box\").html(data);\n                openPopup(\"#confirmation_box\");\n            }\n        },\n        error: function (data, textStatus, errorThrown) {\n            showMessage('fail', textStatus + \": \" + errorThrown);\n        }\n    });\n}\n\nfunction convertServerFilterRules(rules) {\n    validOptions.forEach(function (type) {\n        container = \"#\"+ modelContext + type.ucfirst() + \"Rules\";\n        if ($(container).val() != '' && $(container).val() != '[]') rules[type] = JSON.parse($(container).val());\n        else {rules[type] = {\"tags\": {\"OR\": [], \"NOT\": []}, \"orgs\": {\"OR\": [], \"NOT\": []}}};\n    });\n    serverRuleUpdate();\n    return rules;\n}\n\nfunction serverRuleUpdate() {\n    var statusOptions = [\"OR\", \"NOT\"];\n    validOptions.forEach(function(type) {\n        validFields.forEach(function(field) {\n            if (type === 'push') {\n                var indexedList = {};\n                window[field].forEach(function(item) {\n                    indexedList[item.id] = item.name;\n                });\n            }\n            statusOptions.forEach(function(status) {\n                if (rules[type][field][status].length > 0) {\n                    $('#' + type + '_' + field + '_' + status).show();\n                    var t = '';\n                    rules[type][field][status].forEach(function(item) {\n                        if (t.length > 0) t += ', ';\n                        if (type === 'pull') t += item;\n                        else t += indexedList[item];\n                    });\n                    $('#' + type + '_' + field + '_' + status + '_text').text(t);\n                } else {\n                    $('#' + type + '_' + field + '_' + status).hide();\n                }\n            });\n        });\n    });\n    serverRuleGenerateJSON();\n}\n\nfunction serverRuleFormActivate(type) {\n    if (type != 'pull' && type != 'push') return false;\n    $('.server_rule_popover').hide();\n    $('#gray_out').fadeIn();\n    $('#server_' + type + '_rule_popover').show();\n}\n\nfunction serverRuleCancel() {\n    $(\"#gray_out\").fadeOut();\n    $(\".server_rule_popover\").fadeOut();\n}\n\nfunction serverRuleGenerateJSON() {\n    validOptions.forEach(function(type) {\n        if ($('#Server' + type.ucfirst() + \"Rules\").length) {\n            $('#Server' + type.ucfirst() + \"Rules\").val(JSON.stringify(rules[type]));\n        } else {\n            $('#Feed' + type.ucfirst() + \"Rules\").val(JSON.stringify(rules[type]));\n        }\n    });\n}\n\nfunction serverRulePopulateTagPicklist() {\n    var fields = [\"tags\", \"orgs\"];\n    var target = \"\";\n    fields.forEach(function(field) {\n        target = \"\";\n        window[field].forEach(function(element) {\n            if ($.inArray(element.id, rules[\"push\"][field][\"OR\"]) != -1) target = \"#\" + field + \"pushLeftValues\";\n            else if ($.inArray(element.id, rules[\"push\"][field][\"NOT\"]) != -1) target = \"#\" + field + \"pushRightValues\";\n            else target = \"#\" + field + \"pushMiddleValues\";\n            $(target).append($('<option/>', {\n                value: element.id,\n                text : element.name\n            }));\n        });\n        target = \"#\" + field + \"pullLeftValues\";\n        rules[\"pull\"][field][\"OR\"].forEach(function(t) {\n            $(target).append($('<option/>', {\n                value: t,\n                text : t\n            }));\n        });\n        target = \"#\" + field + \"pullRightValues\";\n        rules[\"pull\"][field][\"NOT\"].forEach(function(t) {\n            $(target).append($('<option/>', {\n                value: t,\n                text : t\n            }));\n        });\n    });\n}\n\nfunction submitServerRulePopulateTagPicklistValues(context) {\n    validFields.forEach(function(field) {\n        rules[context][field][\"OR\"] = [];\n        $(\"#\" + field + context + \"LeftValues option\").each(function() {\n            rules[context][field][\"OR\"].push($(this).val());\n        });\n        rules[context][field][\"NOT\"] = [];\n        $(\"#\" + field + context + \"RightValues option\").each(function() {\n            rules[context][field][\"NOT\"].push($(this).val());\n        });\n    });\n\n    $('#server_' + context + '_rule_popover').fadeOut();\n    $('#gray_out').fadeOut();\n    serverRuleUpdate();\n}\n\n// type = pull/push, field = tags/orgs, from = Left/Middle/Right, to = Left/Middle/Right\nfunction serverRuleMoveFilter(type, field, from, to) {\n    var opposites = {\"Left\": \"Right\", \"Right\": \"Left\"};\n    // first fetch the value\n    var value = \"\";\n    if (type == \"pull\" && from == \"Middle\") {\n        var doInsert = true;\n        value = $(\"#\" + field + type + \"NewValue\").val();\n        if (value.length !== 0 && value.trim()) {\n            $(\"#\" + field + type + to + \"Values\" + \" option\").each(function() {\n                if (value == $(this).val()) doInsert = false;\n            });\n            $(\"#\" + field + type + opposites[to] + \"Values\" + \" option\").each(function() {\n                if (value == $(this).val()) $(this).remove();\n            });\n            if (doInsert) {\n                $(\"#\" + field + type + to + \"Values\").append($('<option/>', {\n                    value: value,\n                    text : value\n                }));\n            }\n        }\n        $(\"#\" + field + type + \"NewValue\").val('');\n    } else {\n        $(\"#\" + field + type + from + \"Values option:selected\").each(function () {\n            if (type != \"pull\" || to != \"Middle\") {\n                value = $(this).val();\n                text = $(this).text();\n                $(\"#\" + field + type + to + \"Values\").append($('<option/>', {\n                    value: value,\n                    text : text\n                }));\n            }\n            $(this).remove();\n        });\n    }\n}\n\nfunction syncUserSelected() {\n    if ($('#UserRoleId :selected').val() in syncRoles) {\n        $('#syncServers').show();\n    } else {\n        $('#syncServers').hide();\n    }\n}\n\nfunction filterAttributes(filter, id) {\n    url = \"/events/viewEventAttributes/\" + id;\n    if(filter === 'value'){\n        filter = $('#quickFilterField').val().trim();\n        url += filter.length > 0 ? \"/searchFor:\" + filter : \"\";\n    } else if(filter !== 'all') {\n        url += \"/attributeFilter:\" + filter\n        filter = $('#quickFilterField').val().trim();\n        url += filter.length > 0 ? \"/searchFor:\" + filter : \"\";\n    }\n    if (deleted) url += '/deleted:true';\n    $.ajax({\n        type:\"get\",\n        url:url,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data) {\n            $(\"#attributes_div\").html(data);\n            $(\".loading\").hide();\n        },\n        error:function() {\n            showMessage('fail', 'Something went wrong - could not fetch attributes.');\n        }\n    });\n}\n\nfunction pivotObjectReferences(url, uuid) {\n    url += '/focus:' + uuid;\n    $.ajax({\n        type:\"get\",\n        url:url,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data) {\n            $(\"#attributes_div\").html(data);\n            $(\".loading\").hide();\n        },\n        error:function() {\n            showMessage('fail', 'Something went wrong - could not fetch attributes.');\n        }\n    });\n}\n\nfunction toggleBoolFilter(url, param) {\n    if (querybuilderTool === undefined) {\n        triggerEventFilteringTool(true); // allows to fetch rules\n    }\n    var rules = querybuilderTool.getRules({ skip_empty: true, allow_invalid: true });\n    var res = cleanRules(rules);\n    Object.keys(res).forEach(function(k) {\n        if (url.indexOf(k) > -1) { // delete url rule (will be replaced by query builder value later on)\n            var replace = '\\/' + k + \".+/?\";\n            var re = new RegExp(replace,\"i\");\n            url = url.replace(re, '');\n        }\n    });\n\n    if (res[param] !== undefined) { // allow toggle for `deleted`.\n        res[param] = res[param] == '0' ? '2' : '0';\n    } else {\n        res[param] = '0';\n    }\n\n    url += buildFilterURL(res);\n    url = url.replace(/view\\//i, 'viewEventAttributes/');\n\n    $.ajax({\n        type:\"get\",\n        url:url,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data) {\n            $(\"#attributes_div\").html(data);\n            querybuilderTool = undefined;\n            $(\".loading\").hide();\n        },\n        error:function() {\n            showMessage('fail', 'Something went wrong - could not fetch attributes.');\n        }\n    });\n}\n\nfunction mergeOrganisationUpdate() {\n    var orgTypeOptions = ['local', 'external'];\n    var orgTypeSelects = ['OrganisationOrgsLocal', 'OrganisationOrgsExternal'];\n    var orgTypeId = $('#OrganisationTargetType').val();\n    var orgType = orgTypeSelects[orgTypeId];\n    var orgID = $('#' + orgTypeSelects[orgTypeId]).val();\n    console.log(orgTypeSelects[orgTypeId]);\n    console.log(orgID);\n    org = orgArray[orgTypeOptions[orgTypeId]][orgID]['Organisation'];\n    console.log(org);\n    $('#org_id').text(org['id']);\n    $('#org_name').text(org['name']);\n    $('#org_uuid').text(org['uuid']);\n    $('#org_local').text(orgTypeOptions[$('#OrganisationTargetType').val()]);\n}\n\nfunction mergeOrganisationTypeToggle() {\n    if ($('#OrganisationTargetType').val() == 0) {\n        $('#orgsLocal').show();\n        $('#orgsExternal').hide();\n    } else {\n        $('#orgsLocal').hide();\n        $('#orgsExternal').show();\n    }\n}\n\nfunction feedDistributionChange() {\n    if ($('#FeedDistribution').val() == 4) $('#SGContainer').show();\n    else $('#SGContainer').hide();\n}\n\nfunction checkUserPasswordEnabled() {\n    if ($('#UserEnablePassword').is(':checked')) {\n        $('#PasswordDiv').show();\n    } else {\n        $('#PasswordDiv').hide();\n    }\n}\n\nfunction checkUserExternalAuth() {\n    if ($('#UserExternalAuthRequired').is(':checked')) {\n        $('#externalAuthDiv').show();\n        $('#passwordDivDiv').hide();\n    } else {\n        $('#externalAuthDiv').hide();\n        $('#passwordDivDiv').show();\n    }\n}\n\nfunction toggleSettingSubGroup(group) {\n    $('.subGroup_' + group).toggle();\n}\n\nfunction runHoverLookup(type, id) {\n    $.ajax({\n        success:function (html) {\n            ajaxResults[\"hover\"][type + \"_\" + id] = html;\n            var element = $('#' + type + '_' + id + '_container');\n            element.popover({\n                title: attributeHoverTitle(id, type),\n                content: html,\n                placement: attributeHoverPlacement(element),\n                html: true,\n                trigger: 'manual',\n                container: 'body'\n            }).popover('show');\n            $('#' + currentPopover).popover('destroy');\n            currentPopover = type + '_' + id + '_container'\n        },\n        cache: false,\n        url:\"/attributes/hoverEnrichment/\" + id,\n    });\n}\n\n$(\".cortex-json\").click(function() {\n    var cortex_data = $(this).data('cortex-json');\n    cortex_data = htmlEncode(JSON.stringify(cortex_data, null, 2));\n    var popupHtml = '<pre class=\"simplepre\">' + cortex_data + '</pre>';\n    popupHtml += '<div class=\"close-icon useCursorPointer\" onClick=\"closeScreenshot();\"></div>';\n\n});\n\n// add the same as below for click popup\n$(document).on( \"click\", \".eventViewAttributePopup\", function() {\n    $('#popover_box').empty();\n    type = $(this).attr('data-object-type');\n    id = $(this).attr('data-object-id');\n    if (!(type + \"_\" + id in ajaxResults[\"persistent\"])) {\n        $.ajax({\n            success:function (html) {\n                ajaxResults[\"persistent\"][type + \"_\" + id] = html;\n            },\n            async: false,\n            cache: false,\n            url:\"/attributes/hoverEnrichment/\" + id + \"/1\",\n        });\n    }\n    if (type + \"_\" + id in ajaxResults[\"persistent\"]) {\n        var enrichment_popover = ajaxResults[\"persistent\"][type + \"_\" + id];\n        enrichment_popover += '<div class=\"close-icon useCursorPointer popup-close-icon\" onClick=\"closeScreenshot();\"></div>';\n        $('#popover_box').html('<div class=\"screenshot_content\">' + enrichment_popover + '</div>');\n        $('#popover_box').show();\n        $(\"#gray_out\").fadeIn();\n        $('#popover_box').css({'padding': '5px'});\n        $('#popover_box').css( \"maxWidth\", ( $( window ).width() * 0.9 | 0 ) + \"px\" );\n        $('#popover_box').css( \"maxHeight\", ( $( window ).width() - 300 | 0 ) + \"px\" );\n        $('#popover_box').css( \"overflow-y\", \"auto\");\n\n        var left = ($(window).width() / 2) - ($('#popover_box').width() / 2);\n        $('#popover_box').css({'left': left + 'px'});\n    }\n    $('#' + currentPopover).popover('destroy');\n});\n\nfunction flashErrorPopover() {\n    $('#popover_form').css( \"minWidth\", \"200px\");\n    $('#popover_form').html($('#flashErrorMessage').html());\n    $('#popover_form').show();\n    var left = ($(window).width() / 2) - ($('#popover_form').width() / 2);\n    $('#popover_form').css({'left': left + 'px'});\n    $(\"#gray_out\").fadeIn();\n}\n\nfunction attributeHoverTitle(id, type) {\n  return `<span>Lookup results:</span>\n\t\t<i class=\"fa fa-search-plus useCursorPointer eventViewAttributePopup\"\n\t\t\t\tstyle=\"float: right;\"\n\t\t\t\tdata-object-id=\"${id}\"\n\t\t\t\tdata-object-type=\"${type}\">\n\t</i>`;\n}\n\nfunction attributeHoverPlacement(element) {\n  var offset = element.offset(),\n    topOffset = offset.top - $(window).scrollTop(),\n    left = offset.left - $(window).scrollLeft(),\n    viewportHeight = window.innerHeight,\n    viewportWidth = window.innerWidth,\n    horiz = 0.5 * viewportWidth - left,\n    horizPlacement = horiz > 0 ? 'right' : 'left',\n    popoverMaxHeight = .75 * viewportHeight;\n\n  // default to top placement\n  var placement = topOffset - popoverMaxHeight > 0 ? 'top' : horizPlacement;\n\n  // more space on bottom\n  if (topOffset < .5 * viewportHeight) {\n    // will popup fit on bottom\n    placement = popoverMaxHeight < topOffset ? 'bottom' : horizPlacement;\n  }\n\n  return placement;\n}\n\n$('body').on('click', function (e) {\n  $('[data-toggle=popover]').each(function () {\n    // hide any open popovers when the anywhere else in the body is clicked\n    if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {\n      $('#' + currentPopover).popover('destroy');\n    }\n  });\n});\n\nfunction serverOwnerOrganisationChange(host_org_id) {\n    if ($('#ServerOrganisationType').val() == \"0\" && $('#ServerLocal').val() == host_org_id) {\n        $('#InternalDiv').show();\n    } else {\n        $('#ServerInternal').prop(\"checked\", false);\n        $('#InternalDiv').hide();\n    }\n}\n\nfunction requestAPIAccess() {\n    url = \"/users/request_API/\";\n    $.ajax({\n        type:\"get\",\n        url:url,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data) {\n            $(\".loading\").hide();\n            handleGenericAjaxResponse(data);\n        },\n        error:function() {\n            showMessage('fail', 'Something went wrong - could not request API access.');\n        }\n    });\n}\n\nfunction initPopoverContent(context) {\n    for (var property in formInfoFields) {\n        if (formInfoFields.hasOwnProperty(property)) {\n            $('#' + property + 'InfoPopover').popover(\"destroy\").popover({\n                placement: 'right',\n                html: 'true',\n                trigger: 'hover',\n                content: getFormInfoContent(property, '#' + context + formInfoFields[property])\n            });\n        }\n    }\n}\n\nfunction getFormInfoContent(property, field) {\n    var content = window[property + 'FormInfoValues'][$(field).val()];\n    if (content === undefined || content === null) {\n        return 'N/A';\n    }\n    return content;\n}\n\nfunction formCategoryChanged(id) {\n    // fill in the types\n    var options = $('#' + id +'Type').prop('options');\n    $('option', $('#' + id +'Type')).remove();\n    $.each(category_type_mapping[$('#' + id +'Category').val()], function(val, text) {\n        options[options.length] = new Option(text, val);\n    });\n    // enable the form element\n    $('#AttributeType').prop('disabled', false);\n}\n\nfunction malwareCheckboxSetter(context) {\n    idDiv = \"#\" + context + \"Category\" +'Div';\n    var value = $(\"#\" + context + \"Category\").val();  // get the selected value\n    // set the malware checkbox if the category is in the zip types\n    $(\"#\" + context + \"Malware\").prop('checked', formZipTypeValues[value] == \"true\");\n}\n\nfunction feedFormUpdate() {\n    $('.optionalField').hide();\n    switch($('#FeedSourceFormat').val()) {\n        case 'freetext':\n            $('#TargetDiv').show();\n            $('#OverrideIdsDiv').show();\n            $('#PublishDiv').show();\n            if ($('#FeedTarget').val() != 0) {\n                $('#TargetEventDiv').show();\n                $('#DeltaMergeDiv').show();\n            }\n            $('#settingsCommonExcluderegexDiv').show();\n            break;\n        case 'csv':\n            $('#TargetDiv').show();\n            $('#OverrideIdsDiv').show();\n            $('#PublishDiv').show();\n            if ($('#FeedTarget').val() != 0) {\n                $('#TargetEventDiv').show();\n                $('#DeltaMergeDiv').show();\n            }\n            $('#settingsCsvValueDiv').show();\n            $('#settingsCsvDelimiterDiv').show();\n            $('#settingsCommonExcluderegexDiv').show();\n            break;\n    }\n    if ($('#FeedInputSource').val() == 'local') {\n        $('#DeleteLocalFileDiv').show();\n        $('#HeadersDiv').hide();\n    } else {\n        $('#DeleteLocalFileDiv').hide();\n        $('#HeadersDiv').show();\n    }\n}\n\nfunction setContextFields() {\n    if (showContext) {\n        $('.context').show();\n        $('#show_context').addClass(\"attribute_filter_text_active\");\n        $('#show_context').removeClass(\"attribute_filter_text\");\n    } else {\n        $('.context').hide();\n        $('#show_context').addClass(\"attribute_filter_text\");\n        $('#show_context').removeClass(\"attribute_filter_text_active\");\n    }\n}\n\nfunction toggleContextFields() {\n    if (!showContext) {\n        showContext = true;\n    } else {\n        showContext = false;\n    }\n    setContextFields();\n}\n\nfunction checkOrphanedAttributes() {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            var color = 'red';\n            var text = ' (Removal recommended)';\n            if (data == '0') {\n                color = 'green';\n                text = ' (OK)';\n            }\n            $(\"#orphanedAttributeCount\").html('<span class=\"' + color + '\">' + data + text + '</span>');\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"get\",\n        cache: false,\n        url: \"/attributes/checkOrphanedAttributes/\",\n    });\n}\n\nfunction checkAttachments() {\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            var color = 'red';\n            var text = ' (Bad links detected)';\n            if (data !== undefined && data.trim() == '0') {\n                color = 'green';\n                text = ' (OK)';\n            }\n            $(\"#orphanedFileCount\").html('<span class=\"' + color + '\">' + data + text + '</span>');\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"get\",\n        cache: false,\n        url: \"/attributes/checkAttachments/\",\n    });\n}\n\nfunction loadTagTreemap() {\n    $.ajax({\n        async:true,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            $(\".treemapdiv\").html(data);\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"get\",\n        cache: false,\n        url: \"/users/tagStatisticsGraph\",\n    });\n}\n\nfunction loadSightingsData(timestamp) {\n    url = \"/sightings/toplist\";\n    if (timestamp != undefined) {\n        url = url + '/' + timestamp;\n    }\n    $.ajax({\n        async:true,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            $(\".sightingsdiv\").html(data);\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"get\",\n        cache: false,\n        url: url,\n    });\n}\n\nfunction quickEditEvent(id, field) {\n    $.ajax({\n        async:true,\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            $(\"#\" + field + \"Field\").html(data);\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"get\",\n        cache: false,\n        url: \"/events/quickEdit/\" + id + \"/\" + field,\n    });\n}\n\nfunction selectAllInbetween(last, current) {\n    if (last === false || last == current) return false;\n    var from = $('#' + last).parent().parent().index();\n    var to = $('#' + current).parent().parent().index();\n    if (to < from) {\n        var temp = from;\n        from = to;\n        to = temp;\n    }\n    $('.select_proposal, .select_attribute').each(function () {\n        if ($('#' + this.id).parent().parent().index() >= from && $('#' + this.id).parent().parent().index() <= to) {\n            $(this).prop('checked', true);\n        }\n    });\n}\n\n$('.galaxy-toggle-button').click(function() {\n    var element = $(this).data('toggle-type');\n    if ($(this).children('span').hasClass('icon-minus')) {\n        $(this).children('span').addClass('icon-plus');\n        $(this).children('span').removeClass('icon-minus');\n        $('#' + element + '_div').hide();\n    } else {\n        $(this).children('span').removeClass('icon-plus');\n        $(this).children('span').addClass('icon-minus');\n        $('#' + element + '_div').show();\n    }\n});\n\n\nfunction addGalaxyListener(id) {\n    var target_type = $(id).data('target-type');\n    var target_id = $(id).data('target-id');\n    popoverPopup(id, target_id + '/' + target_type, 'galaxies', 'selectGalaxyNamespace');\n}\n\nfunction quickSubmitGalaxyForm(cluster_ids, additionalData) {\n    var target_id = additionalData['target_id'];\n    var scope = additionalData['target_type'];\n    var formData = fetchFormDataAjax(\"/galaxies/attachMultipleClusters/\" + target_id + \"/\" + scope);\n    console.log(formData);\n    $('#temp').html(formData);\n    $('#GalaxyTargetIds').val(JSON.stringify(cluster_ids));\n    if (target_id == 'selected') {\n        $('#AttributeAttributeIds').val(getSelected());\n    }\n    $.ajax({\n        data: $('#GalaxyAttachMultipleClustersForm').serialize(),\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        success:function (data, textStatus) {\n            if (target_id === 'selected') {\n                location.reload();\n            } else {\n                if (scope == 'tag_collection') {\n                    location.reload();\n                } else {\n                    loadGalaxies(target_id, scope);\n                    handleGenericAjaxResponse(data);\n                }\n            }\n        },\n        error:function() {\n            showMessage('fail', 'Could not add cluster.');\n            loadGalaxies(target_id, scope);\n        },\n        complete:function() {\n            $(\"#popover_form\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n            $(\".loading\").hide();\n        },\n        type:\"post\",\n        url: \"/galaxies/attachMultipleClusters/\" + target_id + \"/\" + scope\n    });\n    $('#temp').remove();\n    return false;\n}\n\nfunction checkAndSetPublishedInfo(skip_reload) {\n    if (typeof skip_reload === \"undefined\") {\n        skip_reload = false;\n    }\n    var id = $('#hiddenSideMenuData').data('event-id');\n    if (id !== 'undefined' && !skip_reload) {\n        $.get( \"/events/checkPublishedStatus/\" + id, function(data) {\n            if (data == 1) {\n                $('.published').removeClass('hidden');\n                $('.not-published').addClass('hidden');\n            } else {\n                $('.published').addClass('hidden');\n                $('.not-published').removeClass('hidden');\n            }\n        });\n    }\n}\n\n$(document).keyup(function(e){\n    if (e.keyCode === 27) {\n    $(\"#gray_out\").fadeOut();\n        $(\"#popover_form\").fadeOut();\n        $(\"#popover_form_large\").fadeOut();\n        $(\"#screenshot_box\").fadeOut();\n        $(\"#popover_box\").fadeOut();\n        $(\"#confirmation_box\").fadeOut();\n        $(\".loading\").hide();\n        resetForms();\n    }\n});\n\nfunction closeScreenshot() {\n    $(\"#screenshot_box\").fadeOut();\n    $(\"#gray_out\").fadeOut();\n}\n\nfunction loadSightingGraph(id, scope) {\n    $.get( \"/sightings/viewSightings/\" + id + \"/\" + scope, function(data) {\n        $(\"#sightingsData\").html(data);\n    });\n}\n\nfunction checkRolePerms() {\n    if ($(\"#RolePermission\").val() == '0' || $(\"#RolePermission\").val() == '1') {\n        $('.readonlydisabled').prop('checked', false);\n        $('.readonlydisabled').hide();\n    } else {\n        $('.readonlydisabled').show();\n        $('.permFlags').show();\n    }\n    if ($(\"#RolePermSiteAdmin\").prop('checked')) {\n        $('.checkbox').prop('checked', true);\n    }\n}\n\nfunction updateMISP() {\n    $.get( \"/servers/update\", function(data) {\n        $(\"#confirmation_box\").html(data);\n        openPopup(\"#confirmation_box\");\n    });\n}\n\nfunction submitMISPUpdate() {\n    var formData = $('#PromptForm').serialize();\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: formData,\n        success:function (data, textStatus) {\n            $('#gitResult').text(data);\n            $('#gitResult').removeClass('hidden');\n        },\n        complete:function() {\n            $(\".loading\").hide();\n            $(\"#confirmation_box\").fadeOut();\n            $(\"#gray_out\").fadeOut();\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/servers/update\",\n    });\n}\n\nfunction submitSubmoduleUpdate(clicked) {\n    var $clicked = $(clicked);\n    var submodule_path = $clicked.data('submodule');\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $clicked.removeClass('fa-download');\n            $clicked.addClass('fa-spin fa-spinner');\n        },\n        dataType:\"html\",\n        cache: false,\n        success:function (formHTML, textStatus) {\n            var $form = $(formHTML);\n            $('body').append($form);\n            var formData = $form.serialize();\n            $.ajax({\n                data: formData,\n                success:function (data, textStatus) {\n                    if (data.status) {\n                        var job_sent = data.job_sent !== undefined ? data.job_sent : false;\n                        var sync_result = data.sync_result !== undefined ? data.sync_result : '';\n                        updateSubModulesStatus(data.output, job_sent, sync_result);\n                    } else {\n                        showMessage('error', 'Something went wrong');\n                        $('#submoduleGitResultDiv').show();\n                        $('#submoduleGitResult').removeClass('green').addClass('red').text(data.output);\n                    }\n                },\n                error: function (data) {\n                    showMessage('error', 'Something went wrong');\n                    $('#submoduleGitResultDiv').show();\n                    $('#submoduleGitResult').removeClass('green').addClass('red').text(data.output);\n                },\n                complete:function() {\n                    $clicked.removeClass('fa-spin fa-spinner');\n                    $clicked.addClass('fa-download');\n                    $form.remove();\n                },\n                type:\"post\",\n                cache: false,\n                url:$form.attr('action'),\n            });\n        },\n        url:'/servers/getSubmoduleQuickUpdateForm/' + (submodule_path !== undefined ? btoa(submodule_path) : ''),\n    });\n}\n\n// Show $(id) if the enable parameter evaluates to true. Hide it otherwise\nfunction checkAndEnable(id, enable) {\n    if (enable) {\n        $(id).show();\n    } else {\n        $(id).hide();\n    }\n}\n\n// Show and enable checkbox $(id) if the enable parameter evaluates to true. Hide and disable it otherwise.\nfunction checkAndEnableCheckbox(id, enable) {\n    if (enable) {\n        $(id).removeAttr(\"disabled\");\n        $(id).prop('checked', true);\n    } else {\n        $(id).prop('checked', false);\n        $(id).attr(\"disabled\", true);\n    }\n}\n\nfunction enableDisableObjectRows(rows) {\n    rows.forEach(function(i) {\n        if ($(\"#Attribute\" + i + \"ValueSelect\").length != 0) {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", true);\n        } else if ($(\"#Attribute\" + i + \"Attachment\").length != 0) {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(\"#Attribute\" + i + \"Attachment\").val() != \"\");\n        } else {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(\"#Attribute\" + i + \"Value\").val() != \"\");\n        }\n        $(\"#Attribute\" + i + \"Value\").bind('input propertychange', function() {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(this).val() != \"\");\n        });\n        $(\"#Attribute\" + i + \"Attachment\").on('change', function() {\n            checkAndEnableCheckbox(\"#Attribute\" + i + \"Save\", $(\"#Attribute\" + i + \"Attachment\").val() != \"\");\n        });\n    });\n}\n\nfunction objectReferenceInput() {\n    var types = [\"Attribute\", \"Object\"];\n    var $targetSelect = $('[data-targetselect=\"targetSelect\"]');\n    for (var type in types) {\n        for (var k in targetEvent[types[type]]) {\n            if (targetEvent[types[type]][k]['uuid'] == $('#ObjectReferenceReferencedUuid').val()) {\n                $targetSelect.val($('#ObjectReferenceReferencedUuid').val());\n                changeObjectReferenceSelectOption($('#ObjectReferenceReferencedUuid').val(), {type: types[type]});\n                $targetSelect.trigger('chosen:updated');\n            }\n        }\n    }\n}\n\nfunction objectReferenceCheckForCustomRelationship() {\n    var relationship_type_field = $('#ObjectReferenceRelationshipTypeSelect option:selected');\n    var relationship_type = $(relationship_type_field).val();\n    if (relationship_type == 'custom') {\n        $('#ObjectReferenceRelationshipType').parent().removeClass('hidden');\n    } else {\n        $('#ObjectReferenceRelationshipType').parent().addClass('hidden');\n    }\n}\n\nfunction add_basic_auth() {\n    var headers = $('#FeedHeaders').val().split(\"\\n\");\n    $('#FeedHeaders').val(\"\");\n    headers.forEach(function(header) {\n        header = header.trim();\n        if (header != \"\") {\n            header = header.split(\":\");\n            var key = header.shift();\n            var value = header.join(\":\");\n            if (key != 'Authorization') {\n                $('#FeedHeaders').val($('#FeedHeaders').val() + key.trim() + \":\" + value.trim() + \"\\n\");\n            }\n        }\n    });\n    var basicAuth = $('#BasicAuthUsername').val().trim() + ':' + $('#BasicAuthPassword').val().trim();\n    $('#FeedHeaders').val($('#FeedHeaders').val() + \"Authorization: Basic \" + btoa(basicAuth) + \"\\n\");\n    $('#basicAuthFormEnable').show();\n    $('#basicAuthForm').hide();\n}\n\nfunction changeObjectReferenceSelectOption(selected, additionalData) {\n    var uuid = selected;\n    var type = additionalData.type;\n    $('#ObjectReferenceReferencedUuid').val(uuid);\n    if (type == \"Attribute\") {\n        $('#targetData').html(\"\");\n        for (var k in targetEvent[type][uuid]) {\n            if ($.inArray(k, ['uuid', 'category', 'type', 'value', 'to_ids']) !== -1) {\n                $('#targetData').append('<div><span id=\"' + uuid + '_' + k + '_key\" class=\"bold\"></span>: <span id=\"' + uuid + '_' + k + '_data\"></span></div>');\n                $('#' + uuid + '_' + k + '_key').text(k);\n                $('#' + uuid + '_' + k + '_data').text(targetEvent[type][uuid][k]);\n            }\n        }\n    } else {\n        $('#targetData').html(\"\");\n        for (var k in targetEvent[type][uuid]) {\n            if (k == 'Attribute') {\n                $('#targetData').append('<br /><div><span id=\"header\" class=\"bold\">Attributes:</span>');\n                for (attribute in targetEvent[type][uuid]['Attribute']) {\n                    for (k2 in targetEvent[type][uuid]['Attribute'][attribute]) {\n                        if ($.inArray(k2, ['category', 'type', 'value', 'to_ids']) !== -1) {\n                            $('#targetData').append('<div class=\"indent\"><span id=\"' + targetEvent[type][uuid]['Attribute'][attribute]['uuid'] + '_' + k2 + '_key\" class=\"bold\"></span>: <span id=\"' + targetEvent[type][uuid]['Attribute'][attribute]['uuid'] + '_' + k2 + '_data\"></span></div>');\n                            $('#' + targetEvent[type][uuid]['Attribute'][attribute]['uuid'] + '_' + k2 + '_key').text(k2);\n                            $('#' + targetEvent[type][uuid]['Attribute'][attribute]['uuid'] + '_' + k2 + '_data').text(targetEvent[type][uuid]['Attribute'][attribute][k2]);\n                        }\n                    }\n                    $('#targetData').append('<br />');\n                }\n            } else {\n                if ($.inArray(k, ['name', 'uuid', 'meta-category']) !== -1) {\n                    $('#targetData').append('<div><span id=\"' + uuid + '_' + k + '_key\" class=\"bold\"></span>: <span id=\"' + uuid + '_' + k + '_data\"></span></div>');\n                    $('#' + uuid + '_' + k + '_key').text(k);\n                    $('#' + uuid + '_' + k + '_data').text(targetEvent[type][uuid][k]);\n                }\n            }\n        }\n    }\n}\n\nfunction previewEventBasedOnUuids() {\n    var currentValue = $(\"#EventExtendsUuid\").val();\n    if (currentValue == '') {\n        $('#extended_event_preview').hide();\n    } else {\n        $.ajax({\n            url: \"/events/getEventInfoById/\" + currentValue,\n            type: \"get\",\n            error: function() {\n                $('#extended_event_preview').hide();\n            },\n            success: function(data) {\n                $('#extended_event_preview').show();\n                $('#extended_event_preview').html(data);\n            }\n        });\n    }\n}\n\nfunction checkNoticeList(type) {\n    var fields_to_check = {\n        \"attribute\": [\"category\", \"type\"]\n    }\n    var warnings = [];\n    $('#notice_message').html('<h4>Notices:</h4>');\n    $('#notice_message').hide();\n    fields_to_check[type].forEach(function(field_name) {\n        if (field_name in notice_list_triggers) {\n            var field_value = $('#' + type.ucfirst() + field_name.ucfirst()).val();\n            if (field_value in notice_list_triggers[field_name]) {\n                notice_list_triggers[field_name][field_value].forEach(function(notice) {\n                    $('#notice_message').show();\n                    $('#notice_message').append(\n                        $('<div/>')\n                            .append($('<span/>').text('['))\n                            .append($('<a/>', {href: '/noticelists/view/' + notice['list_id'], class:'bold'}).text(notice['list_name']))\n                            .append($('<span/>').text(']: '))\n                            .append($('<span/>').text(notice['message']['en']))\n                    );\n                });\n            }\n        }\n    });\n\n}\n\n$(document).ready(function() {\n    $('#quickFilterField').bind(\"enterKey\",function(e){\n        $('#quickFilterButton').trigger(\"click\");\n    });\n    $('#quickFilterField').keyup(function(e){\n        if(e.keyCode == 13)\n        {\n            $('#quickFilterButton').trigger(\"click\");\n        }\n    });\n    $(\".eventViewAttributeHover\").mouseenter(function() {\n        $('#' + currentPopover).popover('destroy');\n        var type = $(this).attr('data-object-type');\n        var id = $(this).attr('data-object-id');\n\n        if (type + \"_\" + id in ajaxResults[\"hover\"]) {\n            var element = $('#' + type + '_' + id + '_container');\n            element.popover({\n                title: attributeHoverTitle(id, type),\n                content: ajaxResults[\"hover\"][type + \"_\" + id],\n                placement: attributeHoverPlacement(element),\n                html: true,\n                trigger: 'manual',\n                container: 'body'\n            }).popover('show');\n            currentPopover = type + '_' + id + '_container';\n        } else {\n          timer = setTimeout(function () {\n              runHoverLookup(type, id)\n            },\n            500\n          );\n        }\n    }).mouseout(function() {\n        clearTimeout(timer);\n    });\n    $(\".queryPopover\").click(function() {\n        url = $(this).data('url');\n        id = $(this).data('id');\n        $.get(url + '/' + id, function(data) {\n            $('#popover_form').html(data);\n            openPopup('#popover_form');\n        });\n    });\n    $('.servers_default_role_checkbox').click(function() {\n        var id = $(this).data(\"id\");\n        var state = $(this).is(\":checked\");\n        $(\".servers_default_role_checkbox\").not(this).attr('checked', false);\n        $.ajax({\n            beforeSend: function (XMLHttpRequest) {\n                $(\".loading\").show();\n            },\n            success:function (data, textStatus) {\n                handleGenericAjaxResponse(data);\n            },\n            complete:function() {\n                $(\".loading\").hide();\n            },\n            type:\"get\",\n            cache: false,\n            url: '/admin/roles/set_default/' + (state ? id : \"\"),\n        });\n    });\n    // clicking on an element with this class will select all of its contents in a\n    // single click\n    $('.quickSelect').click(function() {\n        var range = document.createRange();\n        var selection = window.getSelection();\n        range.selectNodeContents(this);\n        selection.removeAllRanges();\n        selection.addRange(range);\n    });\n    $(\".cortex-json\").click(function() {\n        var cortex_data = $(this).data('cortex-json');\n        cortex_data = htmlEncode(JSON.stringify(cortex_data, null, 2));\n        var popupHtml = '<pre class=\"simplepre\">' + cortex_data + '</pre>';\n        popupHtml += '<div class=\"close-icon useCursorPointer\" onClick=\"closeScreenshot();\"></div>';\n        $('#popover_box').html(popupHtml);\n        $('#popover_box').show();\n        $('#popover_box').css({'padding': '5px'});\n        left = ($(window).width() / 2) - ($('#popover_box').width() / 2);\n        if (($('#popover_box').height() + 250) > $(window).height()) {\n            $('#popover_box').height($(window).height() - 250);\n            $('#popover_box').css(\"overflow-y\", \"scroll\");\n            $('#popover_box').css(\"overflow-x\", \"hidden\");\n        }\n        $('#popover_box').css({'left': left + 'px'});\n        $(\"#gray_out\").fadeIn();\n    });\n    $('.add_object_attribute_row').click(function() {\n        var template_id = $(this).data('template-id');\n        var object_relation = $(this).data('object-relation');\n        var k = $('#last-row').data('last-row');\n        var k = k+1;\n        $('#last-row').data('last-row', k);\n        url = \"/objects/get_row/\" + template_id + \"/\" + object_relation + \"/\" + k;\n        $.get(url, function(data) {\n            $('#row_' + object_relation + '_expand').before($(data).fadeIn()).html();\n        });\n    });\n    $('.quickToggleCheckbox').toggle(function() {\n        var url = $(this).data('checkbox-url');\n    });\n    $(\".correlation-expand-button\").on(\"click\", function() {\n        $(this).parent().children(\".correlation-expanded-area\").show();\n        $(this).parent().children(\".correlation-collapse-button\").show();\n        $(this).hide();\n    });\n    $(\".correlation-collapse-button\").on(\"click\", function() {\n        $(this).parent().children(\".correlation-expanded-area\").hide();\n        $(this).parent().children(\".correlation-expand-button\").show();\n        $(this).hide();\n    });\n});\n\nfunction queryEventLock(event_id, user_org_id) {\n    if (tabIsActive) {\n        $.ajax({\n            url: \"/events/checkLocks/\" + event_id,\n            type: \"get\",\n            success: function(data, statusText, xhr) {\n                 if (xhr.status == 200) {\n                     if ($('#event_lock_warning').length != 0) {\n                         $('#event_lock_warning').remove();\n                     }\n                     if (data != '') {\n                         $('#main-view-container').append(data);\n                     }\n                 }\n            }\n        });\n    }\n    setTimeout(function() { queryEventLock(event_id, user_org_id); }, 5000);\n}\n\nfunction checkIfLoggedIn() {\n    if (tabIsActive) {\n        $.get(\"/users/checkIfLoggedIn.json\", function(data) {\n            if (data.slice(-2) !== 'OK') {\n                window.location.replace(baseurl + \"/users/login\");\n            }\n        });\n    }\n    setTimeout(function() { checkIfLoggedIn(); }, 5000);\n}\n\nfunction insertRawRestResponse() {\n    $('#rest-response-container').append('<pre id=\"raw-response-container\" />');\n    $('#raw-response-container').text($('#rest-response-hidden-container').text());\n}\n\nfunction insertHTMLRestResponse() {\n    $('#rest-response-container').append('<div id=\"html-response-container\" style=\"border: 1px solid blue; padding:5px;\" />');\n    $('#html-response-container').html($('#rest-response-hidden-container').text());\n}\n\nfunction insertJSONRestResponse() {\n    $('#rest-response-container').append('<p id=\"json-response-container\" style=\"border: 1px solid blue; padding:5px;\" />');\n    var parsedJson = syntaxHighlightJson($('#rest-response-hidden-container').text());\n    $('#json-response-container').html(parsedJson);\n}\n\nfunction syntaxHighlightJson(json, indent) {\n    if (indent === undefined) {\n        indent = 2;\n    }\n    if (typeof json == 'string') {\n        json = JSON.parse(json);\n    }\n    json = JSON.stringify(json, undefined, 2);\n    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/(?:\\r\\n|\\r|\\n)/g, '<br>').replace(/ /g, '&nbsp;');\n    return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n            var cls = 'json_number';\n            if (/^\"/.test(match)) {\n                    if (/:$/.test(match)) {\n                            cls = 'json_key';\n                    } else {\n                            cls = 'json_string';\n                    }\n            } else if (/true|false/.test(match)) {\n                    cls = 'json_boolean';\n            } else if (/null/.test(match)) {\n                    cls = 'json_null';\n            }\n            return '<span class=\"' + cls + '\">' + match + '</span>';\n    });\n}\n\nfunction liveFilter() {\n    var lookupString = $('#liveFilterField').val();\n    if (lookupString == '') {\n        $('.live_filter_target').each(function() {\n            $(this).parent().show();\n        });\n    } else {\n        $('.live_filter_target').each(function() {\n            $(this).parent().hide();\n        });\n        $('.live_filter_target').each(function() {\n            if ($(this).text().indexOf(lookupString) >= 0) {\n                $(this).parent().show();\n            }\n        });\n    }\n}\n\nfunction sparklineBar(elemId, data, lineCount) {\n    data = d3.csv.parse(data);\n    var y_max = 0;\n    data.forEach(function(e) {\n        e = parseInt(e.val);\n        y_max = e > y_max ? e : y_max;\n    });\n    var WIDTH      = 50;\n    var HEIGHT     = 25;\n    var DATA_COUNT = lineCount;\n    var BAR_WIDTH  = (WIDTH - DATA_COUNT) / DATA_COUNT;\n    var x    = d3.scale.linear().domain([0, DATA_COUNT]).range([0, WIDTH]);\n    var y    = d3.scale.linear().domain([0, y_max]).range([0, HEIGHT]);\n\n    var distributionGraphBarTooltip = d3.select(\"body\").append(\"div\")\n        .attr(\"class\", \"distributionGraphBarTooltip\")\n        .style(\"opacity\", 0);\n\n    var svg = d3.select(elemId).append('svg')\n      .attr('width', WIDTH)\n      .attr('height', HEIGHT)\n      .append('g');\n    svg.selectAll('.bar').data(data)\n      .enter()\n      .append('g')\n        .attr('title', function(d, i) { return d.scope + ': ' + d.val })\n        .attr('class', 'DGbar')\n      .append('rect')\n        .attr('class', 'bar')\n        .attr('x', function(d, i) { return x(i); })\n        .attr('y', function(d, i) { return HEIGHT - y(d.val); })\n        .attr('width', BAR_WIDTH)\n        .attr('height', function(d, i) { return y(d.val); })\n        .attr('fill', '#3465a4');\n\n        $('.DGbar').tooltip({container: 'body'});\n}\n\nfunction generic_picker_move(scope, direction) {\n    if (direction === 'right') {\n        $('#' + scope + 'Left option:selected').remove().appendTo('#' + scope + 'Right');\n    } else {\n        $('#' + scope + 'Right option:selected').remove().appendTo('#' + scope + 'Left');\n    }\n}\n\n\nfunction submit_feed_overlap_tool(feedId) {\n    var result = {\"Feed\": [], \"Server\": []};\n    $('#FeedLeft').children().each(function() {\n        result.Feed.push($(this).val());\n    });\n    $('#ServerLeft').children().each(function() {\n        result.Server.push($(this).val());\n    });\n    $.ajax({\n        beforeSend: function (XMLHttpRequest) {\n            $(\".loading\").show();\n        },\n        data: result,\n        success:function (data, textStatus) {\n            if (!isNaN(data)) {\n                $('#feed_coverage_bar').text(data + '%');\n                $('#feed_coverage_bar').css('width', data + '%');\n            } else {\n                handleGenericAjaxResponse({'saved':false, 'errors':['Something went wrong. Received response not in the expected format.']});\n            }\n        },\n        error:function() {\n            handleGenericAjaxResponse({'saved':false, 'errors':['Could not complete the requested action.']});\n        },\n        complete:function() {\n            $(\".loading\").hide();\n        },\n        type:\"post\",\n        cache: false,\n        url:\"/feeds/feedCoverage/\" + feedId,\n    });\n}\n\nfunction changeTaxonomyRequiredState(checkbox) {\n    var checkbox_state = $(checkbox).is(\":checked\");\n    var taxonomy_id = $(checkbox).data('taxonomy-id');\n    var formData = fetchFormDataAjax('/taxonomies/toggleRequired/' + taxonomy_id);\n    $.ajax({\n        data: $(formData).serialize(),\n        success:function (data, textStatus) {\n            handleGenericAjaxResponse({'saved':true, 'success':['Taxonomy\\'s required state toggled.']});\n        },\n        error:function() {\n            $(checkbox).prop('checked', !$(checkbox).prop('checked'));\n            handleGenericAjaxResponse({'saved':false, 'errors':['Could not toggle the required state of the taxonomy.']});\n        },\n        async:\"false\",\n        type:\"post\",\n        cache: false,\n        url: '/taxonomies/toggleRequired/' + taxonomy_id,\n    });\n    formData = false;\n}\n\nfunction fetchFormDataAjax(url) {\n    var formData = false;\n    $.ajax({\n        data: '[]',\n        success:function (data, textStatus) {\n            formData = data;\n        },\n        error:function() {\n            handleGenericAjaxResponse({'saved':false, 'errors':['Request failed due to an unexpected error.']});\n        },\n        async: false,\n        type:\"get\",\n        cache: false,\n        url: url\n    });\n    return formData;\n}\n\n(function(){\n    \"use strict\";\n    $(\".datepicker\").datepicker({\n        format: 'yyyy-mm-dd',\n    });\n}());\n"], "filenames": ["app/webroot/js/misp.js"], "buggy_code_start_loc": [100], "buggy_code_end_loc": [101], "fixing_code_start_loc": [100], "fixing_code_end_loc": [103], "type": "CWE-79", "message": "An issue was discovered in app/webroot/js/misp.js in MISP before 2.4.107. There is persistent XSS via image names in titles, as demonstrated by a screenshot.", "other": {"cve": {"id": "CVE-2019-11814", "sourceIdentifier": "cve@mitre.org", "published": "2019-05-08T13:29:00.487", "lastModified": "2019-05-08T15:31:11.220", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in app/webroot/js/misp.js in MISP before 2.4.107. There is persistent XSS via image names in titles, as demonstrated by a screenshot."}, {"lang": "es", "value": "Se descubri\u00f3 un problema en app/webroot/js/misp.js en el PSIM versiones anteriores a 2.4.107. Hay XSS persistente a trav\u00e9s de los nombres de las im\u00e1genes en los t\u00edtulos, como lo demuestra una captura de pantalla."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.107", "matchCriteriaId": "5596C0F2-50CF-4002-8C21-160B338A7896"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/62f15433e42fb92e45bd57dd6fc0c0bf53deb6fc", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/62f15433e42fb92e45bd57dd6fc0c0bf53deb6fc"}}