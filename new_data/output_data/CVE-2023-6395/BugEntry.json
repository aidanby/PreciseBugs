{"buggy_code": ["# -*- coding: utf-8 -*-\n# vim:expandtab:autoindent:tabstop=4:shiftwidth=4:filetype=python:textwidth=0:\n\nfrom collections.abc import MutableMapping\nfrom jinja2 import sandbox\n\n\n# pylint: disable=no-member,unsupported-assignment-operation\nclass TemplatedDictionary(MutableMapping):\n    \"\"\" Dictionary where __getitem__() is run through Jinja2 template \"\"\"\n    def __init__(self, *args, alias_spec=None, **kwargs):\n        '''\n        Use the object dict.\n\n        Optional parameter 'alias_spec' is dictionary of form:\n        {'aliased_to': ['alias_one', 'alias_two', ...], ...}\n        When specified, and one of the aliases is accessed - the\n        'aliased_to' config option is returned.\n        '''\n        self.__dict__.update(*args, **kwargs)\n\n        self.sandbox = sandbox.SandboxedEnvironment(keep_trailing_newline=True)\n\n        self._aliases = {}\n        if alias_spec:\n            for aliased_to, aliases in alias_spec.items():\n                for alias in aliases:\n                    self._aliases[alias] = aliased_to\n\n    # The next five methods are requirements of the ABC.\n    def __setitem__(self, key, value):\n        key = self._aliases.get(key, key)\n        self.__dict__[key] = value\n\n    def __getitem__(self, key):\n        key = self._aliases.get(key, key)\n        if '__jinja_expand' in self.__dict__ and self.__dict__['__jinja_expand']:\n            return self.__render_value(self.__dict__[key])\n        return self.__dict__[key]\n\n    def __delitem__(self, key):\n        del self.__dict__[key]\n\n    def __iter__(self):\n        return iter(self.__dict__)\n\n    def __len__(self):\n        return len(self.__dict__)\n\n    # The final two methods aren't required, but nice to have\n    def __str__(self):\n        '''returns simple dict representation of the mapping'''\n        return str(self.__dict__)\n\n    def __repr__(self):\n        '''echoes class, id, & reproducible representation in the REPL'''\n        return '{}, TemplatedDictionary({})'.format(super(TemplatedDictionary, self).__repr__(),\n                                                    self.__dict__)\n\n    def copy(self):\n        return TemplatedDictionary(self.__dict__)\n\n    def __render_value(self, value):\n        if isinstance(value, str):\n            return self.__render_string(value)\n        elif isinstance(value, list):\n            # we cannot use list comprehension here, as we need to NOT modify the list (pointer to list)\n            # and we need to modifiy only individual values in the list\n            # If we would create new list, we cannot assign to it, which often happens in configs (e.g. plugins)\n            for i in range(len(value)):  # pylint: disable=consider-using-enumerate\n                value[i] = self.__render_value(value[i])\n            return value\n        elif isinstance(value, dict):\n            # we cannot use list comprehension here, same reasoning as for `list` above\n            for k in value.keys():\n                value[k] = self.__render_value(value[k])\n            return value\n        else:\n            return value\n\n    def __render_string(self, value):\n        orig = last = value\n        max_recursion = self.__dict__.get('jinja_max_recursion', 5)\n        for _ in range(max_recursion):\n            value = _to_native(self.sandbox.from_string(value).render(self.__dict__, func=lambda:None))\n            if value == last:\n                return value\n            last = value\n        raise ValueError(\"too deep jinja re-evaluation on '{}'\".format(orig))\n\n\ndef _to_text(obj, arg_encoding='utf-8', errors='strict', nonstring='strict'):\n    if isinstance(obj, str):\n        return obj\n    elif isinstance(obj, bytes):\n        return obj.decode(arg_encoding, errors)\n    else:\n        if nonstring == 'strict':\n            raise TypeError('First argument must be a string')\n        raise ValueError('nonstring must be one of: [\"strict\",]')\n\n\n_to_native = _to_text\n"], "fixing_code": ["# -*- coding: utf-8 -*-\n# vim:expandtab:autoindent:tabstop=4:shiftwidth=4:filetype=python:textwidth=0:\n\nfrom collections.abc import MutableMapping\nfrom jinja2 import sandbox\n\nSANDBOX = sandbox.SandboxedEnvironment(keep_trailing_newline=True)\n\n# pylint: disable=no-member,unsupported-assignment-operation\nclass TemplatedDictionary(MutableMapping):\n    \"\"\" Dictionary where __getitem__() is run through Jinja2 template \"\"\"\n    def __init__(self, *args, alias_spec=None, **kwargs):\n        '''\n        Use the object dict.\n\n        Optional parameter 'alias_spec' is dictionary of form:\n        {'aliased_to': ['alias_one', 'alias_two', ...], ...}\n        When specified, and one of the aliases is accessed - the\n        'aliased_to' config option is returned.\n        '''\n        self.__dict__.update(*args, **kwargs)\n\n        self._aliases = {}\n        if alias_spec:\n            for aliased_to, aliases in alias_spec.items():\n                for alias in aliases:\n                    self._aliases[alias] = aliased_to\n\n    # The next five methods are requirements of the ABC.\n    def __setitem__(self, key, value):\n        key = self._aliases.get(key, key)\n        self.__dict__[key] = value\n\n    def __getitem__(self, key):\n        key = self._aliases.get(key, key)\n        if '__jinja_expand' in self.__dict__ and self.__dict__['__jinja_expand']:\n            return self.__render_value(self.__dict__[key])\n        return self.__dict__[key]\n\n    def __delitem__(self, key):\n        del self.__dict__[key]\n\n    def __iter__(self):\n        return iter(self.__dict__)\n\n    def __len__(self):\n        return len(self.__dict__)\n\n    # The final two methods aren't required, but nice to have\n    def __str__(self):\n        '''returns simple dict representation of the mapping'''\n        return str(self.__dict__)\n\n    def __repr__(self):\n        '''echoes class, id, & reproducible representation in the REPL'''\n        return '{}, TemplatedDictionary({})'.format(super(TemplatedDictionary, self).__repr__(),\n                                                    self.__dict__)\n\n    def copy(self):\n        return TemplatedDictionary(self.__dict__)\n\n    def __render_value(self, value):\n        if isinstance(value, str):\n            return self.__render_string(value)\n        elif isinstance(value, list):\n            # we cannot use list comprehension here, as we need to NOT modify the list (pointer to list)\n            # and we need to modifiy only individual values in the list\n            # If we would create new list, we cannot assign to it, which often happens in configs (e.g. plugins)\n            for i in range(len(value)):  # pylint: disable=consider-using-enumerate\n                value[i] = self.__render_value(value[i])\n            return value\n        elif isinstance(value, dict):\n            # we cannot use list comprehension here, same reasoning as for `list` above\n            for k in value.keys():\n                value[k] = self.__render_value(value[k])\n            return value\n        else:\n            return value\n\n    def __render_string(self, value):\n        orig = last = value\n        max_recursion = self.__dict__.get('jinja_max_recursion', 5)\n        for _ in range(max_recursion):\n            value = _to_native(SANDBOX.from_string(value).render(self.__dict__, func=lambda:None))\n            if value == last:\n                return value\n            last = value\n        raise ValueError(\"too deep jinja re-evaluation on '{}'\".format(orig))\n\n\ndef _to_text(obj, arg_encoding='utf-8', errors='strict', nonstring='strict'):\n    if isinstance(obj, str):\n        return obj\n    elif isinstance(obj, bytes):\n        return obj.decode(arg_encoding, errors)\n    else:\n        if nonstring == 'strict':\n            raise TypeError('First argument must be a string')\n        raise ValueError('nonstring must be one of: [\"strict\",]')\n\n\n_to_native = _to_text\n"], "filenames": ["templated_dictionary/__init__.py"], "buggy_code_start_loc": [6], "buggy_code_end_loc": [86], "fixing_code_start_loc": [7], "fixing_code_end_loc": [85], "type": "NVD-CWE-noinfo", "message": "The Mock software contains a vulnerability wherein an attacker could potentially exploit privilege escalation, enabling the execution of arbitrary code with root user privileges. This weakness stems from the absence of proper sandboxing during the expansion and execution of Jinja2 templates, which may be included in certain configuration parameters. While the Mock documentation advises treating users added to the mock group as privileged, certain build systems invoking mock on behalf of users might inadvertently permit less privileged users to define configuration tags. These tags could then be passed as parameters to mock during execution, potentially leading to the utilization of Jinja2 templates for remote privilege escalation and the execution of arbitrary code as the root user on the build server.", "other": {"cve": {"id": "CVE-2023-6395", "sourceIdentifier": "secalert@redhat.com", "published": "2024-01-16T15:15:08.657", "lastModified": "2024-02-09T02:15:08.047", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The Mock software contains a vulnerability wherein an attacker could potentially exploit privilege escalation, enabling the execution of arbitrary code with root user privileges. This weakness stems from the absence of proper sandboxing during the expansion and execution of Jinja2 templates, which may be included in certain configuration parameters. While the Mock documentation advises treating users added to the mock group as privileged, certain build systems invoking mock on behalf of users might inadvertently permit less privileged users to define configuration tags. These tags could then be passed as parameters to mock during execution, potentially leading to the utilization of Jinja2 templates for remote privilege escalation and the execution of arbitrary code as the root user on the build server."}, {"lang": "es", "value": "El software Mock contiene una vulnerabilidad en la que un atacante podr\u00eda explotar la escalada de privilegios, permitiendo la ejecuci\u00f3n de c\u00f3digo arbitrario con privilegios de usuario root. Esta debilidad se debe a la ausencia de una sandbox adecuada durante la expansi\u00f3n y ejecuci\u00f3n de las plantillas de Jinja2, que pueden incluirse en ciertos par\u00e1metros de configuraci\u00f3n. Si bien la documentaci\u00f3n de Mock recomienda tratar a los usuarios agregados al grupo simulado como privilegiados, ciertos sistemas de compilaci\u00f3n que invocan simulacros en nombre de los usuarios podr\u00edan permitir sin darse cuenta que usuarios con menos privilegios definan etiquetas de configuraci\u00f3n. Luego, estas etiquetas podr\u00edan pasarse como par\u00e1metros para simular durante la ejecuci\u00f3n, lo que podr\u00eda llevar a la utilizaci\u00f3n de plantillas Jinja2 para la escalada remota de privilegios y la ejecuci\u00f3n de c\u00f3digo arbitrario como usuario ra\u00edz en el servidor de compilaci\u00f3n."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "secalert@redhat.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "secalert@redhat.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rpm-software-management:mock:-:*:*:*:*:*:*:*", "matchCriteriaId": "8A69BF0B-E00C-4F4B-8E0B-765B82A5560A"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fedoraproject:extra_packages_for_enterprise_linux:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "3D9C7598-4BB4-442A-86DF-EEDE041A4CC7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:fedoraproject:extra_packages_for_enterprise_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "BB176AC3-3CDA-4DDA-9089-C67B2F73AA62"}, {"vulnerable": true, "criteria": "cpe:2.3:a:fedoraproject:extra_packages_for_enterprise_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "3C30C1AC-01E4-4D7C-B03A-8EEEF3FC8C2F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:38:*:*:*:*:*:*:*", "matchCriteriaId": "CC559B26-5DFC-4B7A-A27C-B77DE755DFF9"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:39:*:*:*:*:*:*:*", "matchCriteriaId": "B8EDB836-4E6A-4B71-B9B2-AA3E03E0F646"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2024/01/16/1", "source": "secalert@redhat.com", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2024/01/16/3", "source": "secalert@redhat.com", "tags": ["Exploit", "Mailing List", "Third Party Advisory"]}, {"url": "https://access.redhat.com/security/cve/CVE-2023-6395", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=2252206", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/xsuchy/templated-dictionary/commit/0740bd0ca8d487301881541028977d120f8b8933", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "https://github.com/xsuchy/templated-dictionary/commit/bcd90f0dafa365575c4b101e6f5d98c4ef4e4b69", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/62SP2BJC2AFLFJJAEHPGZ3ZINTBTI7AN/", "source": "secalert@redhat.com"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/NBFYREAJH4T7GXXQZ4GJEREN4Q3AHS3K/", "source": "secalert@redhat.com"}]}, "github_commit_url": "https://github.com/xsuchy/templated-dictionary/commit/0740bd0ca8d487301881541028977d120f8b8933"}}