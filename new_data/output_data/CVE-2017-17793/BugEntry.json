{"buggy_code": ["<?php\n# *** LICENSE ***\n# This file is part of BlogoText.\n# https://github.com/BlogoText/blogotext/\n#\n# 2006      Frederic Nassar.\n# 2010-2016 Timo Van Neerden.\n# 2016-.... Micka\u00ebl Schoentgen and the community.\n#\n# BlogoText is free software.\n# You can redistribute it under the terms of the MIT / X11 Licence.\n# *** LICENSE ***\n\nrequire_once 'inc/boot.php';\n\n/**\n *\n */\nfunction validate_form_maintenance()\n{\n    $errors = array();\n    $token = (string)filter_input(INPUT_POST, 'token');\n    if (!$token) {\n        $token = (string)filter_input(INPUT_GET, 'token');\n    }\n\n    if (!check_token($token)) {\n        $errors[] = $GLOBALS['lang']['err_wrong_token'];\n    }\n    return $errors;\n}\n\n/**\n *\n */\nfunction select_yes_no($name, $default, $label)\n{\n    $choice = array(\n        $GLOBALS['lang']['non'],\n        $GLOBALS['lang']['oui']\n    );\n    $form = '<label for=\"'.$name.'\" >'.$label.'</label>';\n    $form .= '<select id=\"'.$name.'\" name=\"'.$name.'\">' ;\n    foreach ($choice as $option => $label) {\n        $form .= '<option value=\"'.htmlentities($option).'\"'.(($option == $default) ? ' selected=\"selected\" ' : '').'>'.htmlentities($label).'</option>';\n    }\n    $form .= '</select>';\n    return $form;\n}\n\n/**\n * Rebuild file database file.\n */\nfunction rebuilt_file_db()\n{\n    $idir = rm_dots_dir(scandir(DIR_IMAGES));\n    // Scans also subdir of img/* (in one single array of paths)\n    foreach ($idir as $i => $e) {\n        $subelem = DIR_IMAGES.$e;\n        if (is_dir($subelem)) {\n            unset($idir[$i]);\n            $subidir = rm_dots_dir(scandir($subelem));\n            foreach ($subidir as $im) {\n                $idir[] = $e.'/'.$im;\n            }\n        }\n    }\n\n    $fdir = rm_dots_dir(scandir(DIR_DOCUMENTS));\n\n    // Remove thumbnails from the list\n    $idir = array_filter($idir, function ($file) {\n        return !(preg_match('#(-thb\\.jpg|index.php)$#', $file));\n    });\n\n    $filesDisk = array_merge($idir, $fdir);\n    $filesDtb = $filesDtbId = array();\n\n    // Purge inexistant files on the disk\n    foreach ($GLOBALS['liste_fichiers'] as $id => $file) {\n        if (!in_array($file['bt_path'].$file['bt_filename'], $filesDisk)) {\n            unset($GLOBALS['liste_fichiers'][$id]);\n        }\n        $filesDtb[] = $file['bt_path'].$file['bt_filename'];\n        $filesDtbId[] = $file['bt_id'];\n    }\n\n    // Add new pictures present on the disk but not in the DTB\n    foreach ($idir as $file) {\n        $filepath = DIR_IMAGES.$file;\n        if (!in_array($file, $filesDtb)) {\n            $time = filemtime($filepath);\n            $id = date('YmdHis', $time);\n            // Check the ID existance, if present we change it (to the past)\n            while (array_key_exists($id, $filesDtbId)) {\n                $time--;\n                $id = date('YmdHis', $time);\n            }\n            $filesDtbId[] = $id;\n\n            $ext = strtolower(pathinfo($filepath, PATHINFO_EXTENSION));\n            $newImg = array(\n                'bt_id' => $id,\n                'bt_type' => 'image',\n                'bt_fileext' => $ext,\n                'bt_filesize' => filesize($filepath),\n                'bt_filename' => $file,\n                'bt_content' => '',\n                'bt_wiki_content' => '',\n                'bt_dossier' => 'default',\n                'bt_checksum' => sha1_file($filepath),\n                'bt_statut' => 0,\n                'bt_path' => (preg_match('#^/[0-9a-f]{2}/#', $file)) ? substr($file, 0, 3) : '',\n            );\n            list($newImg['bt_dim_w'], $newImg['bt_dim_h']) = getimagesize($filepath);\n            $GLOBALS['liste_fichiers'][] = $newImg;\n        }\n        create_thumbnail($filepath);\n    }\n\n    // Same process for files into files/*\n    foreach ($fdir as $file) {\n        if (!in_array($file, $filesDtb)) {\n            $filepath = DIR_DOCUMENTS.$file;\n            $time = filemtime($filepath);\n            $id = date('YmdHis', $time);\n            while (array_key_exists($id, $filesDtbId)) {\n                $time--;\n                $id = date('YmdHis', $time);\n            }\n            $filesDtbId[] = $id;\n\n            $ext = strtolower(pathinfo($filepath, PATHINFO_EXTENSION));\n            $newFile = array(\n                'bt_id' => $id,\n                'bt_type' => guess_file_type($ext),\n                'bt_fileext' => $ext,\n                'bt_filesize' => filesize($filepath),\n                'bt_filename' => $file,\n                'bt_content' => '',\n                'bt_wiki_content' => '',\n                'bt_dossier' => 'default',\n                'bt_checksum' => sha1_file($filepath),\n                'bt_statut' => 0,\n                'bt_path' => '',\n            );\n            $GLOBALS['liste_fichiers'][] = $newFile;\n        }\n    }\n    $GLOBALS['liste_fichiers'] = tri_selon_sous_cle($GLOBALS['liste_fichiers'], 'bt_id');\n    create_file_dtb(FILES_DB, $GLOBALS['liste_fichiers']);\n}\n\n/*\n * Generate favorites HTML file.\n */\nfunction create_html_favs($numberOfLinks)\n{\n    $path = 'backup-links-'.date('Ymd-His').'.html';\n    $limit = (!empty($numberOfLinks)) ? 'LIMIT 0, '.$numberOfLinks : '';\n    $sql = '\n        SELECT *\n          FROM links\n         ORDER BY bt_id DESC '.\n         $limit;\n    $list = liste_elements($sql, array(), 'links');\n\n    $html = '<!DOCTYPE NETSCAPE-Bookmark-file-1><META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=UTF-8\">';\n    $html .= '<!--This is an automatically generated file. Do Not Edit! -->';\n    $html .= '<TITLE>BlogoText links export '.date('Y-M-D').'</TITLE><H1>BlogoText links export</H1>';\n    foreach ($list as $link) {\n        $dec = decode_id($link['bt_id']);\n        $timestamp = mktime($dec['heure'], $dec['minutes'], $dec['secondes'], $dec['mois'], $dec['jour'], $dec['annee']);  // HISMDY : wtf!\n        $html .= '<DT><A HREF=\"'.$link['bt_link'].'\" ADD_DATE=\"'.$timestamp.'\" PRIVATE=\"'.abs(1 - $link['bt_statut']).'\" TAGS=\"'.$link['bt_tags'].'\">'.$link['bt_title'].'</A>';\n        $html .= '<DD>'.strip_tags($link['bt_wiki_content']);\n    }\n    return (file_put_contents(DIR_BACKUP.$path, $html, LOCK_EX) === false) ? false : URL_BACKUP.$path;\n}\n\n/*\n * liste une table (ex: les commentaires) et compare avec un tableau de commentaires trouv\u00e9es dans l\u2019archive\n * Retourne deux tableau : un avec les \u00e9l\u00e9ments pr\u00e9sents dans la base, et un avec les \u00e9l\u00e9ments absents de la base\n */\nfunction diff_trouve_base($table, $arrFind)\n{\n    $arrBasic = $arrAbsent = array();\n    $req = $GLOBALS['db_handle']->prepare('SELECT bt_id FROM '.$table);\n    $req->execute();\n    while ($ligne = $req->fetch()) {\n        $arrBasic[] = $ligne['bt_id'];\n    }\n\n    // remplit les deux tableaux, pour chaque \u00e9l\u00e9ment trouv\u00e9 dans l\u2019archive, en fonction de ceux d\u00e9j\u00e0 dans la base\n    foreach ($arrFind as $element) {\n        if (!in_array($element['bt_id'], $arrBasic)) {\n            $arrAbsent[] = $element;\n        }\n    }\n    return $arrAbsent;\n}\n\n/**\n * Issert big arrays of data in DB.\n */\nfunction insert_table_links($tableau)\n{\n    $arrDiff = diff_trouve_base('links', $tableau);\n    $return = count($arrDiff);\n    $GLOBALS['db_handle']->beginTransaction();\n    foreach ($arrDiff as $f) {\n        $query = '\n            INSERT INTO links (bt_type, bt_id, bt_link, bt_content, bt_wiki_content, bt_statut, bt_title, bt_tags)\n                 VALUES (?, ?, ?, ?, ?, ?, ?, ?)';\n        $req = $GLOBALS['db_handle']->prepare($query);\n        $req->execute(array($f['bt_type'], $f['bt_id'], $f['bt_link'], $f['bt_content'], $f['bt_wiki_content'], $f['bt_statut'], $f['bt_title'], $f['bt_tags']));\n    }\n    $GLOBALS['db_handle']->commit();\n    return $return;\n}\n\n/**\n *\n */\nfunction insert_table_articles($tableau)\n{\n    $arrDiff = diff_trouve_base('articles', $tableau);\n    $return = count($arrDiff);\n    $GLOBALS['db_handle']->beginTransaction();\n    foreach ($arrDiff as $art) {\n        $query = '\n            INSERT INTO articles (bt_type, bt_id, bt_date, bt_title, bt_abstract, bt_notes, bt_link, bt_content, bt_wiki_content, bt_tags, bt_keywords, bt_nb_comments, bt_allow_comments, bt_statut)\n                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';\n        $req = $GLOBALS['db_handle']->prepare($query);\n        $req->execute(array( $art['bt_type'], $art['bt_id'], $art['bt_date'], $art['bt_title'], $art['bt_abstract'], $art['bt_notes'], $art['bt_link'], $art['bt_content'], $art['bt_wiki_content'], ((isset($art['bt_tags'])) ? $art['bt_tags'] : $art['bt_categories']), $art['bt_keywords'], $art['bt_nb_comments'], $art['bt_allow_comments'], $art['bt_statut'] ));\n    }\n    $GLOBALS['db_handle']->commit();\n    return $return;\n}\n\n/**\n *\n */\nfunction insert_table_commentaires($tableau)\n{\n    $arrDiff = diff_trouve_base('commentaires', $tableau);\n    $return = count($arrDiff);\n    $GLOBALS['db_handle']->beginTransaction();\n    foreach ($arrDiff as $com) {\n        $query = '\n            INSERT INTO commentaires (bt_type, bt_id, bt_article_id, bt_content, bt_wiki_content, bt_author, bt_link, bt_webpage, bt_email, bt_subscribe, bt_statut)\n                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';\n        $req = $GLOBALS['db_handle']->prepare($query);\n        $req->execute(array($com['bt_type'], $com['bt_id'], $com['bt_article_id'], $com['bt_content'], $com['bt_wiki_content'], $com['bt_author'], $com['bt_link'], $com['bt_webpage'], $com['bt_email'], $com['bt_subscribe'], $com['bt_statut']));\n    }\n    $GLOBALS['db_handle']->commit();\n    return $return;\n}\n\n/**\n * recompte les commentaires aux articles\n */\nfunction recompte_commentaires()\n{\n    if (DBMS == 'sqlite') {\n        $query = '\n            UPDATE articles\n               SET bt_nb_comments = COALESCE((SELECT count(a.bt_id)\n                                                FROM articles a\n                                               INNER JOIN commentaires c\n                                                       ON c.bt_article_id = a.bt_id\n                                               WHERE articles.bt_id = a.bt_id\n                                                     AND c.bt_statut = 1\n                                               GROUP BY a.bt_id), 0)';\n    } elseif (DBMS == 'mysql') {\n        $query = '\n            UPDATE articles\n               SET bt_nb_comments = COALESCE((SELECT count(articles.bt_id)\n                                                FROM commentaires\n                                               WHERE commentaires.bt_article_id = articles.bt_id), 0)';\n    }\n    $req = $GLOBALS['db_handle']->prepare($query);\n    $req->execute();\n}\n\n/**\n * importe un fichier json qui est au format de blogotext\n */\nfunction importer_json($json)\n{\n    $data = json_decode($json, true);\n    $return = array();\n    // importer les liens\n    if (!empty($data['liens'])) {\n        $return['links'] = insert_table_links($data['liens']);\n    }\n    // importer les articles\n    if (!empty($data['articles'])) {\n        $return['articles'] = insert_table_articles($data['articles']);\n    }\n    // importer les commentaires\n    if (!empty($data['commentaires'])) {\n        $return['commentaires'] = insert_table_commentaires($data['commentaires']);\n    }\n    // recompter les commentaires\n    if (!empty($data['commentaires']) or !empty($data['articles'])) {\n        recompte_commentaires();\n    }\n    return $return;\n}\n\n/**\n * ajoute tous les dossiers du tableau $dossiers dans une archive zip\n */\nfunction addFolder2zip($zip, $folder)\n{\n    $ignore = array('.', '..', '.htaccess', 'index.php', '.gitignore');\n    if ($handle = opendir($folder)) {\n        while ($entry = readdir($handle)) {\n            $file = $folder.'/'.$entry;\n            if (!in_array($entry, $ignore) && is_readable($file)) {\n                if (is_dir($file)) {\n                    addFolder2zip($zip, $file);\n                    continue;\n                }\n\n                // Zip!\n                $filename = str_replace(array(BT_ROOT, '//'), array('', '/'), $file);\n                $zip->addFile($file, $filename);\n            }\n        }\n        closedir($handle);\n    }\n}\n\n/**\n *\n */\nfunction creer_fichier_zip($folders)\n{\n    $zipfile = 'archive_site-'.date('Ymd').'-'.substr(md5(rand(10, 99)), 3, 5).'.zip';\n    $zip = new ZipArchive;\n    if ($zip->open(DIR_BACKUP.$zipfile, ZipArchive::CREATE) === true) {\n        foreach ($folders as $folder) {\n            addFolder2zip($zip, $folder);\n        }\n        $zip->close();\n        if (is_file(DIR_BACKUP.$zipfile)) {\n            return URL_BACKUP.$zipfile;\n        }\n    }\n    return false;\n}\n\n/**\n * fabrique le fichier json (tr\u00e8s simple en fait)\n */\nfunction creer_fichier_json($arrData)\n{\n    $path = 'backup-data-'.date('Ymd-His').'.json';\n    return (file_put_contents(DIR_BACKUP.$path, json_encode($arrData), LOCK_EX) === false) ? false : URL_BACKUP.$path;\n}\n\n/**\n * Cr\u00e9e la liste des RSS et met tout \u00e7a dans un fichier OPML\n */\nfunction creer_fichier_opml()\n{\n    $path = 'backup-data-'.date('Ymd-His').'.opml';\n    // sort feeds by folder\n    $folders = array();\n    foreach ($GLOBALS['liste_flux'] as $i => $feed) {\n        $folders[$feed['folder']][] = $feed;\n    }\n    ksort($folders);\n\n    $html  = '<?xml version=\"1.0\" encoding=\"utf-8\"?>'.\"\\n\";\n    $html .= '<opml version=\"1.0\">'.\"\\n\";\n    $html .= '<head>'.\"\\n\";\n    $html .= '<title>Newsfeeds '.BLOGOTEXT_NAME.' '.BLOGOTEXT_VERSION.' on '.date('Y/m/d').'</title>'.\"\\n\";\n    $html .= '</head>'.\"\\n\";\n    $html .= '<body>'.\"\\n\";\n\n    function esc($str)\n    {\n        return htmlspecialchars($str, ENT_QUOTES, 'UTF-8');\n    }\n\n    foreach ($folders as $i => $folder) {\n        $outline = '';\n        foreach ($folder as $feed) {\n            $outline .= (($i) ? \"\\t\" : '').'<outline text=\"'.esc($feed['title']).'\" title=\"'.esc($feed['title']).'\" type=\"rss\" xmlUrl=\"'.esc($feed['link']).'\" />'.\"\\n\";\n        }\n        if ($i != '') {\n            $html .= '<outline text=\"'.esc($i).'\" title=\"'.esc($i).'\" >'.\"\\n\";\n            $html .= $outline;\n            $html .= '</outline>'.\"\\n\";\n        } else {\n            $html .= $outline;\n        }\n    }\n\n    $html .= '</body>'.\"\\n\".'</opml>'.\"\\n\";\n\n    return (file_put_contents(DIR_BACKUP.$path, $html, LOCK_EX) === false) ? false : URL_BACKUP.$path;\n}\n\n/**\n * converti un fichier au format xml de wordpress en un tableau (sans enregistrer le fichier bt)\n */\nfunction importer_wordpress($xml)\n{\n    /* transforms some HTML elements to BlogoText's BBCode */\n    function reverse_wiki($texte)\n    {\n        $tofind = array(\n            array('#<blockquote>(.*)</blockquote>#s', '[quote]$1[/quote]'),\n            array('#<code>(.*)</code>#s', '[code]$1[/code]'),\n            array('#<a href=\"(.*)\">(.*)</a>#', '[$2|$1]'),\n            array('#<strong>(.*)</strong>#', '[b]$1[/b]'),\n            array('#<em>(.*)</em>#', '[i]$1[/i]'),\n            array('#<u>(.*)</u>#', '[u]$1[/u]')\n        );\n        for ($i = 0, $length = sizeof($tofind); $i < $length; ++$i) {\n            $texte = preg_replace($tofind[$i][0], $tofind[$i][1], $texte);\n        }\n        return $texte;\n    }\n\n    /* Transforms BlogoText's BBCode tags to HTML elements. */\n    function wiki($texte)\n    {\n        $texte = ' '.$texte;\n        $tofind = array(\n            array('#\\[quote\\](.+?)\\[/quote\\]#s', '<blockquote>$1</blockquote>'),\n            array('#\\[code\\](.+?)\\[/code\\]#s', '<code>$1</code>'),\n            array('`\\[([^[]+)\\|([^[]+)\\]`', '<a href=\"$2\">$1</a>'),\n            array('`\\[b\\](.*?)\\[/b\\]`s', '<span style=\"font-weight: bold;\">$1</span>'),\n            array('`\\[i\\](.*?)\\[/i\\]`s', '<span style=\"font-style: italic;\">$1</span>'),\n            array('`\\[u\\](.*?)\\[/u\\]`s', '<span style=\"text-decoration: underline;\">$1</span>')\n        );\n        for ($i = 0, $length = sizeof($tofind); $i < $length; ++$i) {\n            $texte = preg_replace($tofind[$i][0], $tofind[$i][1], $texte);\n        }\n        return $texte;\n    }\n\n    $xml = simplexml_load_string($xml);\n    $xml = $xml->channel;\n\n    $data = array('liens' => null, 'articles' => null, 'commentaires' => null);\n\n    foreach ($xml->item as $value) {\n        $newPost = array();\n        $newPost['bt_type'] = 'article';\n        $newPost['bt_date'] = date('YmdHis', strtotime($value->pubDate));\n        $newPost['bt_id'] = $newPost['bt_date'];\n        $newPost['bt_title'] = (string) $value[0]->title;\n        $newPost['bt_notes'] = '';\n        $newPost['bt_link'] = (string) $value[0]->link;\n        $newPost['bt_wiki_content'] = reverse_wiki($value->children('content', true)->encoded);\n        $newPost['bt_content'] = wiki($newPost['bt_wiki_content']);\n        $newPost['bt_abstract'] = '';\n        // get categories\n        $newPost['bt_tags'] = '';\n        foreach ($value->category as $tag) {\n            $newPost['bt_tags'] .= (string) $tag.',';\n        }\n        $newPost['bt_tags'] = trim($newPost['bt_tags'], ',');\n        $newPost['bt_keywords'] = '';\n        $newPost['bt_nb_comments'] = 0;\n        $newPost['bt_allow_comments'] = (int) $value->children('wp', true)->comment_status == 'open';\n        $newPost['bt_statut'] = (int) $value->children(\"wp\", true)->status == 'publish';\n        // parse comments\n        foreach ($value->children('wp', true)->comment as $comment) {\n            $newComment = array();\n            $newComment['bt_author'] = (string) $comment[0]->comment_author;\n            $newComment['bt_link'] = '';\n            $newComment['bt_webpage'] = (string) $comment[0]->comment_author_url;\n            $newComment['bt_email'] = (string) $comment[0]->comment_author_email;\n            $newComment['bt_subscribe'] = 0;\n            $newComment['bt_type'] = 'comment';\n            $newComment['bt_id'] = date('YmdHis', strtotime($comment->comment_date));\n            $newComment['bt_article_id'] = $newPost['bt_id'];\n            $newComment['bt_wiki_content'] = reverse_wiki($comment->comment_content);\n            $newComment['bt_content'] = '<p>'.wiki($newComment['bt_wiki_content']).'</p>';\n            $newComment['bt_statut'] = (int) $comment->comment_approved;\n            $data['commentaires'][] = $newComment;\n        }\n        $data['articles'][] = $newPost;\n    }\n\n    $return = array();\n    // importer les articles\n    if (!empty($data['articles'])) {\n        $return['articles'] = insert_table_articles($data['articles']);\n    }\n    // importer les commentaires\n    if (!empty($data['commentaires'])) {\n        $return['commentaires'] = insert_table_commentaires($data['commentaires']);\n    }\n    // recompter les commentaires\n    if (!empty($data['commentaires']) or !empty($data['articles'])) {\n        recompte_commentaires();\n    }\n\n    return $return;\n}\n\n/**\n * Parse et importe un fichier de liste de flux OPML\n */\nfunction importer_opml($opmlContent)\n{\n    $GLOBALS['array_new'] = array();\n\n    function parseOpmlRecursive($xmlObj)\n    {\n        // si c\u2019est un sous dossier avec d\u2019autres flux \u00e0 l\u2019int\u00e9rieur : note le nom du dossier\n        $folder = $xmlObj->attributes()->text;\n        foreach ($xmlObj->children() as $child) {\n            if (!empty($child['xmlUrl'])) {\n                $url = (string)$child['xmlUrl'];\n                $title = (!empty($child['text'])) ? (string) $child['text'] : (string) $child['title'];\n                $GLOBALS['array_new'][$url] = array(\n                    'link' => $url,\n                    'title' => ucfirst($title),\n                    'favicon' => 'style/rss-feed-icon.png',\n                    'checksum' => 0,\n                    'time' => 0,\n                    'folder' => (string) $folder,\n                    'iserror' => 0,\n                );\n            }\n            parseOpmlRecursive($child);\n        }\n    }\n    $opmlFile = new SimpleXMLElement($opmlContent);\n    parseOpmlRecursive($opmlFile->body);\n\n    $oldLen = count($GLOBALS['liste_flux']);\n    $GLOBALS['liste_flux'] = array_reverse(tri_selon_sous_cle($GLOBALS['liste_flux'], 'title'));\n    $GLOBALS['liste_flux'] = array_merge($GLOBALS['array_new'], $GLOBALS['liste_flux']);\n    create_file_dtb(FEEDS_DB, $GLOBALS['liste_flux']);\n\n    return (count($GLOBALS['liste_flux']) - $oldLen);\n}\n\n/**\n * Parse and import HTML bookmarks (netscape/Firefox bookmarks export)\n */\nfunction parse_html($content)\n{\n    $arrOut = array();\n    // Netscape bookmark file (Firefox).\n    if (strcmp(substr($content, 0, strlen('<!DOCTYPE NETSCAPE-Bookmark-file-1>')), '<!DOCTYPE NETSCAPE-Bookmark-file-1>') === 0) {\n        // This format is supported by all browsers (except IE, of course), also delicious, diigo and others.\n        $arrId = array();\n        $allDtTags = explode('<DT>', $content);\n        foreach ($allDtTags as $dt) {\n            $link = array('bt_id' => '', 'bt_title' => '', 'bt_link' => '', 'bt_content' => '', 'bt_wiki_content' => '', 'bt_tags' => '', 'bt_statut' => 1, 'bt_type' => 'link');\n            $d = explode('<DD>', $dt);\n            if (strcmp(substr($d[0], 0, strlen('<A ')), '<A ') === 0) {\n                $link['bt_content'] = (isset($d[1])) ? html_entity_decode(trim($d[1]), ENT_QUOTES, 'utf-8') : '';  // Get description (optional)\n                $link['bt_wiki_content'] = $link['bt_content'];\n                preg_match('!<A .*?>(.*?)</A>!i', $d[0], $matches);\n                $link['bt_title'] = (isset($matches[1])) ? trim($matches[1]) : '';  // Get title\n                $link['bt_title'] = html_entity_decode($link['bt_title'], ENT_QUOTES, 'utf-8');\n                preg_match_all('# ([A-Z_]+)=\\\"(.*?)\"#i', $dt, $matches, PREG_SET_ORDER); // Get all other attributes\n                $rawAddDate = 0;\n                foreach ($matches as $m) {\n                    $attr = $m[1];\n                    $value = $m[2];\n                    if ($attr == 'HREF') {\n                        $link['bt_link'] = html_entity_decode($value, ENT_QUOTES, 'utf-8');\n                    } elseif ($attr == 'ADD_DATE') {\n                        $rawAddDate = intval($value);\n                    } elseif ($attr == 'PRIVATE') {\n                        $link['bt_statut'] = ($value == 1) ? 0 : 1;\n                    } // value=1 =>> statut=0 (it\u2019s reversed)\n                    elseif ($attr == 'TAGS') {\n                        $link['bt_tags'] = str_replace('  ', ' ', str_replace(',', ', ', html_entity_decode($value, ENT_QUOTES, 'utf-8')));\n                    }\n                }\n                if ($link['bt_link'] != '') {\n                    $rawAddDate = (empty($rawAddDate)) ? time() : $rawAddDate; // In case of shitty bookmark file with no ADD_DATE\n                    while (in_array(date('YmdHis', $rawAddDate), $arrId)) {\n                        $rawAddDate--; // avoids duplicate IDs\n                    }\n                    $arrId[] = $link['bt_id'] = date('YmdHis', $rawAddDate); // converts date to YmdHis format\n                    $arrOut[] = $link;\n                }\n            }\n        }\n    }\n    return $arrOut;\n}\n\n\n/**\n * process\n */\n\n$GLOBALS['liste_fichiers'] = open_serialzd_file(FILES_DB);\n$GLOBALS['liste_flux'] = open_serialzd_file(FEEDS_DB);\n\n\n/**\n * echo\n */\n\necho tpl_get_html_head($GLOBALS['lang']['titre_maintenance']);\n\necho '<div id=\"header\">';\n    echo '<div id=\"top\">';\n    tpl_show_msg();\n    echo tpl_show_topnav('preferences.php', $GLOBALS['lang']['titre_maintenance']);\n    echo '</div>';\necho '</div>';\n\necho '<div id=\"axe\">';\necho '<div id=\"page\">';\n\n// cr\u00e9ation du dossier des backups\ncreate_folder(DIR_BACKUP, 0);\n\n\n/*\n * Affiches les formulaires qui demandent quoi faire. (!isset($do))\n * Font le traitement dans les autres cas.\n*/\n\n// no $do nor $file : ask what to do\necho '<div id=\"maintenance-form\">';\nif (!isset($_GET['do']) and !isset($_FILES['file'])) {\n    $token = new_token();\n    $nbs = array(10 => 10, 20 => 20, 50 => 50, 100 => 100, 200 => 200, 500 => 500, -1 => $GLOBALS['lang']['pref_all']);\n\n    echo '<form action=\"maintenance.php\" method=\"get\" class=\"bordered-formbloc\" id=\"form_todo\">';\n    echo '<label for=\"select_todo\">'.$GLOBALS['lang']['maintenance_ask_do_what'].' </label>';\n    echo '<select id=\"select_todo\" name=\"select_todo\" onchange=\"switch_form(this.value)\">';\n    echo '<option selected disabled hidden value=\"\"></option>';\n    echo '<option value=\"form_export\">'.$GLOBALS['lang']['maintenance_export'].'</option>';\n    echo '<option value=\"form_import\">'.$GLOBALS['lang']['maintenance_import'].'</option>';\n    echo '<option value=\"form_optimi\">'.$GLOBALS['lang']['maintenance_optim'].'</option>';\n    echo '</select>';\n    echo '</form>';\n\n    // Form export\n    echo '<form action=\"maintenance.php\" onsubmit=\"hide_forms(\\'exp-format\\')\" method=\"get\" class=\"bordered-formbloc\" id=\"form_export\">';\n    // choose export what ?\n        echo '<fieldset>';\n        echo '<legend class=\"legend-backup\">'.$GLOBALS['lang']['maintenance_export'].'</legend>';\n        echo '<p><label for=\"json\">'.$GLOBALS['lang']['bak_export_json'].'</label>'.\n            '<input type=\"radio\" name=\"exp-format\" value=\"json\" id=\"json\" onchange=\"switch_export_type(\\'e_json\\')\" /></p>';\n        echo '<p><label for=\"html\">'.$GLOBALS['lang']['bak_export_netscape'].'</label>'.\n            '<input type=\"radio\" name=\"exp-format\" value=\"html\" id=\"html\" onchange=\"switch_export_type(\\'e_html\\')\" /></p>';\n        echo '<p><label for=\"zip\">'.$GLOBALS['lang']['bak_export_zip'].'</label>'.\n            '<input type=\"radio\" name=\"exp-format\" value=\"zip\"  id=\"zip\"  onchange=\"switch_export_type(\\'e_zip\\')\"  /></p>';\n        echo '<p><label for=\"opml\">'.$GLOBALS['lang']['bak_export_opml'].'</label>'.\n            '<input type=\"radio\" name=\"exp-format\" value=\"opml\"  id=\"opml\"  onchange=\"switch_export_type(\\'e_opml\\')\"  /></p>';\n        echo '</fieldset>';\n        // export in JSON.\n        echo '<fieldset id=\"e_json\">';\n        echo '<legend class=\"legend-backup\">'.$GLOBALS['lang']['maintenance_incl_quoi'].'</legend>';\n        echo '<p>'.select_yes_no('incl-artic', 0, $GLOBALS['lang']['bak_articles_do']).form_select_no_label('nb-artic', $nbs, 50).'</p>';\n        echo '<p>'.select_yes_no('incl-comms', 0, $GLOBALS['lang']['bak_comments_do']).'</p>';\n        echo '<p>'.select_yes_no('incl-links', 0, $GLOBALS['lang']['bak_links_do']).form_select_no_label('nb-links', $nbs, 50).'</p>';\n        echo '</fieldset>';\n        // export links in html\n        echo '<fieldset id=\"e_html\">';\n        echo '<legend class=\"legend-backup\">'.$GLOBALS['lang']['bak_combien_linx'].'</legend>';\n        echo '<p>'.form_select('nb-links2', $nbs, 50, $GLOBALS['lang']['bak_combien_linx']).'</p>';\n        echo '</fieldset>';\n        // export data in zip\n        echo '<fieldset id=\"e_zip\">';\n        echo '<legend class=\"legend-backup\">'.$GLOBALS['lang']['maintenance_incl_quoi'].'</legend>';\n    if (DBMS == 'sqlite') {\n        echo '<p>'.select_yes_no('incl-sqlit', 0, $GLOBALS['lang']['bak_incl_sqlit']).'</p>';\n    }\n        echo '<p>'.select_yes_no('incl-files', 0, $GLOBALS['lang']['bak_incl_files']).'</p>';\n        echo '<p>'.select_yes_no('incl-confi', 0, $GLOBALS['lang']['bak_incl_confi']).'</p>';\n        echo '<p>'.select_yes_no('incl-theme', 0, $GLOBALS['lang']['bak_incl_theme']).'</p>';\n        echo '</fieldset>';\n        echo '<p class=\"submit-bttns\">';\n        echo '<button class=\"submit button-cancel\" type=\"button\" onclick=\"annuler(\\'maintenance.php\\');\">'.$GLOBALS['lang']['annuler'].'</button>';\n        echo '<button class=\"submit button-submit\" type=\"submit\" name=\"do\" value=\"export\">'.$GLOBALS['lang']['valider'].'</button>';\n        echo '</p>';\n        echo hidden_input('token', $token);\n    echo '</form>';\n\n    // Form import\n    $importformats = array(\n        'jsonbak' => $GLOBALS['lang']['bak_import_btjson'],\n        'xmlwp' => $GLOBALS['lang']['bak_import_wordpress'],\n        'htmllinks' => $GLOBALS['lang']['bak_import_netscape'],\n        'rssopml' => $GLOBALS['lang']['bak_import_rssopml'] );\n    echo '<form action=\"maintenance.php\" method=\"post\" enctype=\"multipart/form-data\" class=\"bordered-formbloc\" id=\"form_import\">';\n        echo '<fieldset class=\"pref valid-center\">';\n        echo '<legend class=\"legend-backup\">'.$GLOBALS['lang']['maintenance_import'].'</legend>';\n        echo '<p>'.form_select_no_label('imp-format', $importformats, 'jsonbak');\n        echo '<input type=\"file\" name=\"file\" id=\"file\" class=\"text\" /></p>';\n        echo '</fieldset>';\n        echo '<p class=\"submit-bttns\">';\n        echo '<button class=\"submit button-cancel\" type=\"button\" onclick=\"annuler(\\'maintenance.php\\');\">'.$GLOBALS['lang']['annuler'].'</button>';\n        echo '<button class=\"submit button-submit\" type=\"submit\" name=\"valider\">'.$GLOBALS['lang']['valider'].'</button>';\n        echo '</p>';\n\n        echo hidden_input('token', $token);\n    echo '</form>';\n\n    // Form optimi\n    echo '<form action=\"maintenance.php\" method=\"get\" class=\"bordered-formbloc\" id=\"form_optimi\">';\n        echo '<fieldset class=\"pref valid-center\">';\n        echo '<legend class=\"legend-sweep\">'.$GLOBALS['lang']['maintenance_optim'].'</legend>';\n\n        echo '<p>'.select_yes_no('opti-file', 0, $GLOBALS['lang']['bak_opti_miniature']).'</p>';\n    if (DBMS == 'sqlite') {\n        echo '<p>'.select_yes_no('opti-vacu', 0, $GLOBALS['lang']['bak_opti_vacuum']).'</p>';\n    } else {\n        echo hidden_input('opti-vacu', 0);\n    }\n        echo '<p>'.select_yes_no('opti-comm', 0, $GLOBALS['lang']['bak_opti_recountcomm']).'</p>';\n\n        echo '<p>'.select_yes_no('opti-rss', 0, $GLOBALS['lang']['bak_opti_supprreadrss']).'</p>';\n\n        echo '</fieldset>';\n        echo '<p class=\"submit-bttns\">';\n        echo '<button class=\"submit button-cancel\" type=\"button\" onclick=\"annuler(\\'maintenance.php\\');\">'.$GLOBALS['lang']['annuler'].'</button>';\n        echo '<button class=\"submit button-submit\" type=\"submit\" name=\"do\" value=\"optim\">'.$GLOBALS['lang']['valider'].'</button>';\n        echo '</p>';\n        echo hidden_input('token', $token);\n    echo '</form>';\n\n// either $do or $file\n// $do\n} else {\n    // v\u00e9rifie Token\n    if ($errorsForm = validate_form_maintenance()) {\n        echo '<div class=\"bordered-formbloc\">';\n        echo '<fieldset class=\"pref valid-center\">';\n        echo '<legend class=\"legend-backup\">'.$GLOBALS['lang']['bak_restor_done'].'</legend>';\n        echo erreurs($errorsForm);\n        echo '<p class=\"submit-bttns\"><button class=\"submit button-submit\" type=\"button\" onclick=\"annuler(\\'maintenance.php\\')\">'.$GLOBALS['lang']['valider'].'</button></p>';\n        echo '</fieldset>';\n        echo '</div>';\n    } else {\n        // token : ok, go on !\n        if (isset($_GET['do'])) {\n            if ($_GET['do'] == 'export') {\n                $format = (!empty($_GET['exp-format'])) ? $_GET['exp-format'] : '';\n                // Export in JSON file\n                if ($format == 'json') {\n                    $arrData = array('articles' => array(), 'liens' => array(), 'commentaires' => array());\n                    // list links (nth last)\n                    if ($_GET['incl-links'] == 1) {\n                        $nb = htmlspecialchars($_GET['nb-links']);\n                        $limit = (is_numeric($nb) and $nb != -1 ) ? 'LIMIT 0, ?' : '';\n                        $array = (empty($limit)) ? array() : array($nb);\n                        $sql = '\n                            SELECT *\n                              FROM links\n                             ORDER BY bt_id DESC '.\n                             $limit;\n                        $arrData['liens'] = liste_elements($sql, $array, 'links');\n                    }\n                    // get articles (nth last)\n                    if ($_GET['incl-artic'] == 1) {\n                        $nb = htmlspecialchars($_GET['nb-artic']);\n                        $limit = (is_numeric($nb) and $nb != -1 ) ? 'LIMIT 0, ?' : '';\n                        $array = (empty($limit)) ? array() : array($nb);\n                        $sql = '\n                            SELECT *\n                              FROM articles\n                             ORDER BY bt_id DESC '.\n                             $limit;\n                        $arrData['articles'] = liste_elements($sql, $array, 'articles');\n                        // get list of comments (comments that belong to selected articles only)\n                        if ($_GET['incl-comms'] == 1) {\n                            foreach ($arrData['articles'] as $article) {\n                                $sql = '\n                                    SELECT c.*, a.bt_title\n                                      FROM commentaires AS c, articles AS a\n                                     WHERE c.bt_article_id = ?\n                                           AND c.bt_article_id = a.bt_id';\n                                $comments = liste_elements($sql, array($article['bt_id']), 'commentaires');\n                                if (!empty($comments)) {\n                                    $arrData['commentaires'] = array_merge($arrData['commentaires'], $comments);\n                                }\n                            }\n                        }\n                    }\n                    $file_archive = creer_fichier_json($arrData);\n\n                // Export links in HTML format\n                } elseif ($format == 'html') {\n                    $nb = htmlspecialchars($_GET['nb-links2']);\n                    $limit = (is_numeric($nb) and $nb != -1 ) ? $nb : '';\n                    $file_archive = create_html_favs($limit);\n\n                // Export a ZIP archive\n                } elseif ($format == 'zip') {\n                    $dossiers = array();\n                    $sqlite = (!empty($_GET['incl-sqlit'])) ? $_GET['incl-sqlit'] + 0 : 0;\n                    if ($sqlite == 1) {\n                        $dossiers[] = DIR_DATABASES;\n                    }\n                    if ($_GET['incl-files'] == 1) {\n                        $dossiers[] = DIR_DOCUMENTS;\n                        $dossiers[] = DIR_IMAGES;\n                    }\n                    if ($_GET['incl-confi'] == 1) {\n                        $dossiers[] = DIR_CONFIG;\n                    }\n                    if ($_GET['incl-theme'] == 1) {\n                        $dossiers[] = DIR_THEMES;\n                    }\n                    $file_archive = creer_fichier_zip($dossiers);\n\n                // Export a OPML rss lsit\n                } elseif ($format == 'opml') {\n                    $file_archive = creer_fichier_opml();\n                } else {\n                    echo 'nothing to do';\n                }\n\n                // affiche le formulaire de t\u00e9l\u00e9chargement et de validation.\n                if (!empty($file_archive)) {\n                    echo '<form action=\"maintenance.php\" method=\"get\" class=\"bordered-formbloc\">';\n                    echo '<fieldset class=\"pref valid-center\">';\n                    echo '<legend class=\"legend-backup\">'.$GLOBALS['lang']['bak_succes_save'].'</legend>';\n\n                    echo '<p><a href=\"'.$file_archive.'\" download>'.$GLOBALS['lang']['bak_dl_fichier'].'</a></p>';\n                    echo '<p class=\"submit-bttns\"><button class=\"submit button-submit\" type=\"submit\">'.$GLOBALS['lang']['valider'].'</button></p>';\n                    echo '</fieldset>';\n                    echo '</form>';\n                }\n            } elseif ($_GET['do'] == 'optim') {\n                    // recount files DB\n                if ($_GET['opti-file'] == 1) {\n                    rebuilt_file_db();\n                }\n                    // vacuum SQLite DB\n                if ($_GET['opti-vacu'] == 1) {\n                    try {\n                        $req = $GLOBALS['db_handle']->prepare('VACUUM');\n                        $req->execute();\n                    } catch (Exception $e) {\n                        die('Erreur 1429 vacuum : '.$e->getMessage());\n                    }\n                }\n                    // recount comms/articles\n                if ($_GET['opti-comm'] == 1) {\n                    recompte_commentaires();\n                }\n                    // delete old RSS entries\n                if ($_GET['opti-rss'] == 1) {\n                    try {\n                        $req = $GLOBALS['db_handle']->prepare('DELETE FROM rss WHERE bt_statut = 0');\n                        $req->execute(array());\n                    } catch (Exception $e) {\n                        die('Erreur : 7873 : rss delete old entries : '.$e->getMessage());\n                    }\n                }\n                    echo '<form action=\"maintenance.php\" method=\"get\" class=\"bordered-formbloc\">';\n                    echo '<fieldset class=\"pref valid-center\">';\n                    echo '<legend class=\"legend-backup\">'.$GLOBALS['lang']['bak_optim_done'].'</legend>';\n                    echo '<p class=\"submit-bttns\"><button class=\"submit button-submit\" type=\"submit\">'.$GLOBALS['lang']['valider'].'</button></p>';\n                    echo '</fieldset>';\n                    echo '</form>';\n            } else {\n                echo 'nothing to do.';\n            }\n\n        // $file\n        } elseif (isset($_POST['valider']) and !empty($_FILES['file']['tmp_name'])) {\n                $message = array();\n            switch ($_POST['imp-format']) {\n                case 'jsonbak':\n                    $json = file_get_contents($_FILES['file']['tmp_name']);\n                    $message = importer_json($json);\n                    break;\n                case 'htmllinks':\n                    $html = file_get_contents($_FILES['file']['tmp_name']);\n                    $message['links'] = insert_table_links(parse_html($html));\n                    break;\n                case 'xmlwp':\n                    $xml = file_get_contents($_FILES['file']['tmp_name']);\n                    $message = importer_wordpress($xml);\n                    break;\n                case 'rssopml':\n                    $xml = file_get_contents($_FILES['file']['tmp_name']);\n                    $message['feeds'] = importer_opml($xml);\n                    break;\n                default:\n                    die('nothing');\n                break;\n            }\n            if (!empty($message)) {\n                echo '<form action=\"maintenance.php\" method=\"get\" class=\"bordered-formbloc\">';\n                echo '<fieldset class=\"pref valid-center\">';\n                echo '<legend class=\"legend-backup\">'.$GLOBALS['lang']['bak_restor_done'].'</legend>';\n                echo '<ul>';\n                foreach ($message as $type => $nb) {\n                    echo '<li>'.$GLOBALS['lang']['label_'.$type].' : '.$nb.'</li>';\n                }\n                echo '</ul>';\n                echo '<p class=\"submit-bttns\"><button class=\"submit button-submit\" type=\"submit\">'.$GLOBALS['lang']['valider'].'</button></p>';\n                echo '</fieldset>';\n                echo '</form>';\n            }\n        } else {\n            echo 'nothing to do.';\n        }\n    }\n}\n\necho '</div>';\n\necho <<<EOS\n<script src=\"style/javascript.js\"></script>\n<script>\n    var ia = document.getElementById(\"incl-artic\");\n    if (ia) ia.addEventListener(\"change\", function() {\n        document.getElementById(\"nb-artic\").style.display = (ia.value == 1 ? \"inline-block\" : \"none\");\n    });\n\n    var il = document.getElementById(\"incl-links\");\n    if (il) il.addEventListener(\"change\", function() {\n        document.getElementById(\"nb-links\").style.display = (il.value == 1 ? \"inline-block\" : \"none\");\n    });\n</script>\nEOS;\n\necho tpl_get_footer($begin);\n"], "fixing_code": ["<?php\n# *** LICENSE ***\n# This file is part of BlogoText.\n# https://github.com/BlogoText/blogotext/\n#\n# 2006      Frederic Nassar.\n# 2010-2016 Timo Van Neerden.\n# 2016-.... Micka\u00ebl Schoentgen and the community.\n#\n# BlogoText is free software.\n# You can redistribute it under the terms of the MIT / X11 Licence.\n# *** LICENSE ***\n\nrequire_once 'inc/boot.php';\n\n/**\n *\n */\nfunction validate_form_maintenance()\n{\n    $errors = array();\n    $token = (string)filter_input(INPUT_POST, 'token');\n    if (!$token) {\n        $token = (string)filter_input(INPUT_GET, 'token');\n    }\n\n    if (!check_token($token)) {\n        $errors[] = $GLOBALS['lang']['err_wrong_token'];\n    }\n    return $errors;\n}\n\n/**\n *\n */\nfunction select_yes_no($name, $default, $label)\n{\n    $choice = array(\n        $GLOBALS['lang']['non'],\n        $GLOBALS['lang']['oui']\n    );\n    $form = '<label for=\"'.$name.'\" >'.$label.'</label>';\n    $form .= '<select id=\"'.$name.'\" name=\"'.$name.'\">' ;\n    foreach ($choice as $option => $label) {\n        $form .= '<option value=\"'.htmlentities($option).'\"'.(($option == $default) ? ' selected=\"selected\" ' : '').'>'.htmlentities($label).'</option>';\n    }\n    $form .= '</select>';\n    return $form;\n}\n\n/**\n * Rebuild file database file.\n */\nfunction rebuilt_file_db()\n{\n    $idir = rm_dots_dir(scandir(DIR_IMAGES));\n    // Scans also subdir of img/* (in one single array of paths)\n    foreach ($idir as $i => $e) {\n        $subelem = DIR_IMAGES.$e;\n        if (is_dir($subelem)) {\n            unset($idir[$i]);\n            $subidir = rm_dots_dir(scandir($subelem));\n            foreach ($subidir as $im) {\n                $idir[] = $e.'/'.$im;\n            }\n        }\n    }\n\n    $fdir = rm_dots_dir(scandir(DIR_DOCUMENTS));\n\n    // Remove thumbnails from the list\n    $idir = array_filter($idir, function ($file) {\n        return !(preg_match('#(-thb\\.jpg|index.php)$#', $file));\n    });\n\n    $filesDisk = array_merge($idir, $fdir);\n    $filesDtb = $filesDtbId = array();\n\n    // Purge inexistant files on the disk\n    foreach ($GLOBALS['liste_fichiers'] as $id => $file) {\n        if (!in_array($file['bt_path'].$file['bt_filename'], $filesDisk)) {\n            unset($GLOBALS['liste_fichiers'][$id]);\n        }\n        $filesDtb[] = $file['bt_path'].$file['bt_filename'];\n        $filesDtbId[] = $file['bt_id'];\n    }\n\n    // Add new pictures present on the disk but not in the DTB\n    foreach ($idir as $file) {\n        $filepath = DIR_IMAGES.$file;\n        if (!in_array($file, $filesDtb)) {\n            $time = filemtime($filepath);\n            $id = date('YmdHis', $time);\n            // Check the ID existance, if present we change it (to the past)\n            while (array_key_exists($id, $filesDtbId)) {\n                $time--;\n                $id = date('YmdHis', $time);\n            }\n            $filesDtbId[] = $id;\n\n            $ext = strtolower(pathinfo($filepath, PATHINFO_EXTENSION));\n            $newImg = array(\n                'bt_id' => $id,\n                'bt_type' => 'image',\n                'bt_fileext' => $ext,\n                'bt_filesize' => filesize($filepath),\n                'bt_filename' => $file,\n                'bt_content' => '',\n                'bt_wiki_content' => '',\n                'bt_dossier' => 'default',\n                'bt_checksum' => sha1_file($filepath),\n                'bt_statut' => 0,\n                'bt_path' => (preg_match('#^/[0-9a-f]{2}/#', $file)) ? substr($file, 0, 3) : '',\n            );\n            list($newImg['bt_dim_w'], $newImg['bt_dim_h']) = getimagesize($filepath);\n            $GLOBALS['liste_fichiers'][] = $newImg;\n        }\n        create_thumbnail($filepath);\n    }\n\n    // Same process for files into files/*\n    foreach ($fdir as $file) {\n        if (!in_array($file, $filesDtb)) {\n            $filepath = DIR_DOCUMENTS.$file;\n            $time = filemtime($filepath);\n            $id = date('YmdHis', $time);\n            while (array_key_exists($id, $filesDtbId)) {\n                $time--;\n                $id = date('YmdHis', $time);\n            }\n            $filesDtbId[] = $id;\n\n            $ext = strtolower(pathinfo($filepath, PATHINFO_EXTENSION));\n            $newFile = array(\n                'bt_id' => $id,\n                'bt_type' => guess_file_type($ext),\n                'bt_fileext' => $ext,\n                'bt_filesize' => filesize($filepath),\n                'bt_filename' => $file,\n                'bt_content' => '',\n                'bt_wiki_content' => '',\n                'bt_dossier' => 'default',\n                'bt_checksum' => sha1_file($filepath),\n                'bt_statut' => 0,\n                'bt_path' => '',\n            );\n            $GLOBALS['liste_fichiers'][] = $newFile;\n        }\n    }\n    $GLOBALS['liste_fichiers'] = tri_selon_sous_cle($GLOBALS['liste_fichiers'], 'bt_id');\n    create_file_dtb(FILES_DB, $GLOBALS['liste_fichiers']);\n}\n\n/*\n * Generate favorites HTML file.\n */\nfunction create_html_favs($numberOfLinks)\n{\n    $path = 'backup-links-'.date('Ymd-His').'.html';\n    $limit = (!empty($numberOfLinks)) ? 'LIMIT 0, '.$numberOfLinks : '';\n    $sql = '\n        SELECT *\n          FROM links\n         ORDER BY bt_id DESC '.\n         $limit;\n    $list = liste_elements($sql, array(), 'links');\n\n    $html = '<!DOCTYPE NETSCAPE-Bookmark-file-1><META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=UTF-8\">';\n    $html .= '<!--This is an automatically generated file. Do Not Edit! -->';\n    $html .= '<TITLE>BlogoText links export '.date('Y-M-D').'</TITLE><H1>BlogoText links export</H1>';\n    foreach ($list as $link) {\n        $dec = decode_id($link['bt_id']);\n        $timestamp = mktime($dec['heure'], $dec['minutes'], $dec['secondes'], $dec['mois'], $dec['jour'], $dec['annee']);  // HISMDY : wtf!\n        $html .= '<DT><A HREF=\"'.$link['bt_link'].'\" ADD_DATE=\"'.$timestamp.'\" PRIVATE=\"'.abs(1 - $link['bt_statut']).'\" TAGS=\"'.$link['bt_tags'].'\">'.$link['bt_title'].'</A>';\n        $html .= '<DD>'.strip_tags($link['bt_wiki_content']);\n    }\n    return (file_put_contents(DIR_BACKUP.$path, $html, LOCK_EX) === false) ? false : URL_BACKUP.$path;\n}\n\n/*\n * liste une table (ex: les commentaires) et compare avec un tableau de commentaires trouv\u00e9es dans l\u2019archive\n * Retourne deux tableau : un avec les \u00e9l\u00e9ments pr\u00e9sents dans la base, et un avec les \u00e9l\u00e9ments absents de la base\n */\nfunction diff_trouve_base($table, $arrFind)\n{\n    $arrBasic = $arrAbsent = array();\n    $req = $GLOBALS['db_handle']->prepare('SELECT bt_id FROM '.$table);\n    $req->execute();\n    while ($ligne = $req->fetch()) {\n        $arrBasic[] = $ligne['bt_id'];\n    }\n\n    // remplit les deux tableaux, pour chaque \u00e9l\u00e9ment trouv\u00e9 dans l\u2019archive, en fonction de ceux d\u00e9j\u00e0 dans la base\n    foreach ($arrFind as $element) {\n        if (!in_array($element['bt_id'], $arrBasic)) {\n            $arrAbsent[] = $element;\n        }\n    }\n    return $arrAbsent;\n}\n\n/**\n * Issert big arrays of data in DB.\n */\nfunction insert_table_links($tableau)\n{\n    $arrDiff = diff_trouve_base('links', $tableau);\n    $return = count($arrDiff);\n    $GLOBALS['db_handle']->beginTransaction();\n    foreach ($arrDiff as $f) {\n        $query = '\n            INSERT INTO links (bt_type, bt_id, bt_link, bt_content, bt_wiki_content, bt_statut, bt_title, bt_tags)\n                 VALUES (?, ?, ?, ?, ?, ?, ?, ?)';\n        $req = $GLOBALS['db_handle']->prepare($query);\n        $req->execute(array($f['bt_type'], $f['bt_id'], $f['bt_link'], $f['bt_content'], $f['bt_wiki_content'], $f['bt_statut'], $f['bt_title'], $f['bt_tags']));\n    }\n    $GLOBALS['db_handle']->commit();\n    return $return;\n}\n\n/**\n *\n */\nfunction insert_table_articles($tableau)\n{\n    $arrDiff = diff_trouve_base('articles', $tableau);\n    $return = count($arrDiff);\n    $GLOBALS['db_handle']->beginTransaction();\n    foreach ($arrDiff as $art) {\n        $query = '\n            INSERT INTO articles (bt_type, bt_id, bt_date, bt_title, bt_abstract, bt_notes, bt_link, bt_content, bt_wiki_content, bt_tags, bt_keywords, bt_nb_comments, bt_allow_comments, bt_statut)\n                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';\n        $req = $GLOBALS['db_handle']->prepare($query);\n        $req->execute(array( $art['bt_type'], $art['bt_id'], $art['bt_date'], $art['bt_title'], $art['bt_abstract'], $art['bt_notes'], $art['bt_link'], $art['bt_content'], $art['bt_wiki_content'], ((isset($art['bt_tags'])) ? $art['bt_tags'] : $art['bt_categories']), $art['bt_keywords'], $art['bt_nb_comments'], $art['bt_allow_comments'], $art['bt_statut'] ));\n    }\n    $GLOBALS['db_handle']->commit();\n    return $return;\n}\n\n/**\n *\n */\nfunction insert_table_commentaires($tableau)\n{\n    $arrDiff = diff_trouve_base('commentaires', $tableau);\n    $return = count($arrDiff);\n    $GLOBALS['db_handle']->beginTransaction();\n    foreach ($arrDiff as $com) {\n        $query = '\n            INSERT INTO commentaires (bt_type, bt_id, bt_article_id, bt_content, bt_wiki_content, bt_author, bt_link, bt_webpage, bt_email, bt_subscribe, bt_statut)\n                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';\n        $req = $GLOBALS['db_handle']->prepare($query);\n        $req->execute(array($com['bt_type'], $com['bt_id'], $com['bt_article_id'], $com['bt_content'], $com['bt_wiki_content'], $com['bt_author'], $com['bt_link'], $com['bt_webpage'], $com['bt_email'], $com['bt_subscribe'], $com['bt_statut']));\n    }\n    $GLOBALS['db_handle']->commit();\n    return $return;\n}\n\n/**\n * recompte les commentaires aux articles\n */\nfunction recompte_commentaires()\n{\n    if (DBMS == 'sqlite') {\n        $query = '\n            UPDATE articles\n               SET bt_nb_comments = COALESCE((SELECT count(a.bt_id)\n                                                FROM articles a\n                                               INNER JOIN commentaires c\n                                                       ON c.bt_article_id = a.bt_id\n                                               WHERE articles.bt_id = a.bt_id\n                                                     AND c.bt_statut = 1\n                                               GROUP BY a.bt_id), 0)';\n    } elseif (DBMS == 'mysql') {\n        $query = '\n            UPDATE articles\n               SET bt_nb_comments = COALESCE((SELECT count(articles.bt_id)\n                                                FROM commentaires\n                                               WHERE commentaires.bt_article_id = articles.bt_id), 0)';\n    }\n    $req = $GLOBALS['db_handle']->prepare($query);\n    $req->execute();\n}\n\n/**\n * importe un fichier json qui est au format de blogotext\n */\nfunction importer_json($json)\n{\n    $data = json_decode($json, true);\n    $return = array();\n    // importer les liens\n    if (!empty($data['liens'])) {\n        $return['links'] = insert_table_links($data['liens']);\n    }\n    // importer les articles\n    if (!empty($data['articles'])) {\n        $return['articles'] = insert_table_articles($data['articles']);\n    }\n    // importer les commentaires\n    if (!empty($data['commentaires'])) {\n        $return['commentaires'] = insert_table_commentaires($data['commentaires']);\n    }\n    // recompter les commentaires\n    if (!empty($data['commentaires']) or !empty($data['articles'])) {\n        recompte_commentaires();\n    }\n    return $return;\n}\n\n/**\n * ajoute tous les dossiers du tableau $dossiers dans une archive zip\n */\nfunction addFolder2zip($zip, $folder)\n{\n    $ignore = array('.', '..', '.htaccess', 'index.php', '.gitignore');\n    if ($handle = opendir($folder)) {\n        while ($entry = readdir($handle)) {\n            $file = $folder.'/'.$entry;\n            if (!in_array($entry, $ignore) && is_readable($file)) {\n                if (is_dir($file)) {\n                    addFolder2zip($zip, $file);\n                    continue;\n                }\n\n                // Zip!\n                $filename = str_replace(array(BT_ROOT, '//'), array('', '/'), $file);\n                $zip->addFile($file, $filename);\n            }\n        }\n        closedir($handle);\n    }\n}\n\n/**\n *\n */\nfunction creer_fichier_zip($folders)\n{\n    // fix on windows server, file can be found using \"archiv~1.zip\" as file name in URL\n    // $zipfile = 'archive_site-'.date('Ymd').'-'.substr(md5(rand(10, 99)), 3, 5).'.zip';\n    $zipfile = substr(md5(rand(10, 99)), 3, 5).'-archive_site-'.date('Ymd').'.zip';\n    $zip = new ZipArchive;\n    if ($zip->open(DIR_BACKUP.$zipfile, ZipArchive::CREATE) === true) {\n        foreach ($folders as $folder) {\n            addFolder2zip($zip, $folder);\n        }\n        $zip->close();\n        if (is_file(DIR_BACKUP.$zipfile)) {\n            return URL_BACKUP.$zipfile;\n        }\n    }\n    return false;\n}\n\n/**\n * fabrique le fichier json (tr\u00e8s simple en fait)\n */\nfunction creer_fichier_json($arrData)\n{\n    $path = 'backup-data-'.date('Ymd-His').'.json';\n    return (file_put_contents(DIR_BACKUP.$path, json_encode($arrData), LOCK_EX) === false) ? false : URL_BACKUP.$path;\n}\n\n/**\n * Cr\u00e9e la liste des RSS et met tout \u00e7a dans un fichier OPML\n */\nfunction creer_fichier_opml()\n{\n    $path = 'backup-data-'.date('Ymd-His').'.opml';\n    // sort feeds by folder\n    $folders = array();\n    foreach ($GLOBALS['liste_flux'] as $i => $feed) {\n        $folders[$feed['folder']][] = $feed;\n    }\n    ksort($folders);\n\n    $html  = '<?xml version=\"1.0\" encoding=\"utf-8\"?>'.\"\\n\";\n    $html .= '<opml version=\"1.0\">'.\"\\n\";\n    $html .= '<head>'.\"\\n\";\n    $html .= '<title>Newsfeeds '.BLOGOTEXT_NAME.' '.BLOGOTEXT_VERSION.' on '.date('Y/m/d').'</title>'.\"\\n\";\n    $html .= '</head>'.\"\\n\";\n    $html .= '<body>'.\"\\n\";\n\n    function esc($str)\n    {\n        return htmlspecialchars($str, ENT_QUOTES, 'UTF-8');\n    }\n\n    foreach ($folders as $i => $folder) {\n        $outline = '';\n        foreach ($folder as $feed) {\n            $outline .= (($i) ? \"\\t\" : '').'<outline text=\"'.esc($feed['title']).'\" title=\"'.esc($feed['title']).'\" type=\"rss\" xmlUrl=\"'.esc($feed['link']).'\" />'.\"\\n\";\n        }\n        if ($i != '') {\n            $html .= '<outline text=\"'.esc($i).'\" title=\"'.esc($i).'\" >'.\"\\n\";\n            $html .= $outline;\n            $html .= '</outline>'.\"\\n\";\n        } else {\n            $html .= $outline;\n        }\n    }\n\n    $html .= '</body>'.\"\\n\".'</opml>'.\"\\n\";\n\n    return (file_put_contents(DIR_BACKUP.$path, $html, LOCK_EX) === false) ? false : URL_BACKUP.$path;\n}\n\n/**\n * converti un fichier au format xml de wordpress en un tableau (sans enregistrer le fichier bt)\n */\nfunction importer_wordpress($xml)\n{\n    /* transforms some HTML elements to BlogoText's BBCode */\n    function reverse_wiki($texte)\n    {\n        $tofind = array(\n            array('#<blockquote>(.*)</blockquote>#s', '[quote]$1[/quote]'),\n            array('#<code>(.*)</code>#s', '[code]$1[/code]'),\n            array('#<a href=\"(.*)\">(.*)</a>#', '[$2|$1]'),\n            array('#<strong>(.*)</strong>#', '[b]$1[/b]'),\n            array('#<em>(.*)</em>#', '[i]$1[/i]'),\n            array('#<u>(.*)</u>#', '[u]$1[/u]')\n        );\n        for ($i = 0, $length = sizeof($tofind); $i < $length; ++$i) {\n            $texte = preg_replace($tofind[$i][0], $tofind[$i][1], $texte);\n        }\n        return $texte;\n    }\n\n    /* Transforms BlogoText's BBCode tags to HTML elements. */\n    function wiki($texte)\n    {\n        $texte = ' '.$texte;\n        $tofind = array(\n            array('#\\[quote\\](.+?)\\[/quote\\]#s', '<blockquote>$1</blockquote>'),\n            array('#\\[code\\](.+?)\\[/code\\]#s', '<code>$1</code>'),\n            array('`\\[([^[]+)\\|([^[]+)\\]`', '<a href=\"$2\">$1</a>'),\n            array('`\\[b\\](.*?)\\[/b\\]`s', '<span style=\"font-weight: bold;\">$1</span>'),\n            array('`\\[i\\](.*?)\\[/i\\]`s', '<span style=\"font-style: italic;\">$1</span>'),\n            array('`\\[u\\](.*?)\\[/u\\]`s', '<span style=\"text-decoration: underline;\">$1</span>')\n        );\n        for ($i = 0, $length = sizeof($tofind); $i < $length; ++$i) {\n            $texte = preg_replace($tofind[$i][0], $tofind[$i][1], $texte);\n        }\n        return $texte;\n    }\n\n    $xml = simplexml_load_string($xml);\n    $xml = $xml->channel;\n\n    $data = array('liens' => null, 'articles' => null, 'commentaires' => null);\n\n    foreach ($xml->item as $value) {\n        $newPost = array();\n        $newPost['bt_type'] = 'article';\n        $newPost['bt_date'] = date('YmdHis', strtotime($value->pubDate));\n        $newPost['bt_id'] = $newPost['bt_date'];\n        $newPost['bt_title'] = (string) $value[0]->title;\n        $newPost['bt_notes'] = '';\n        $newPost['bt_link'] = (string) $value[0]->link;\n        $newPost['bt_wiki_content'] = reverse_wiki($value->children('content', true)->encoded);\n        $newPost['bt_content'] = wiki($newPost['bt_wiki_content']);\n        $newPost['bt_abstract'] = '';\n        // get categories\n        $newPost['bt_tags'] = '';\n        foreach ($value->category as $tag) {\n            $newPost['bt_tags'] .= (string) $tag.',';\n        }\n        $newPost['bt_tags'] = trim($newPost['bt_tags'], ',');\n        $newPost['bt_keywords'] = '';\n        $newPost['bt_nb_comments'] = 0;\n        $newPost['bt_allow_comments'] = (int) $value->children('wp', true)->comment_status == 'open';\n        $newPost['bt_statut'] = (int) $value->children(\"wp\", true)->status == 'publish';\n        // parse comments\n        foreach ($value->children('wp', true)->comment as $comment) {\n            $newComment = array();\n            $newComment['bt_author'] = (string) $comment[0]->comment_author;\n            $newComment['bt_link'] = '';\n            $newComment['bt_webpage'] = (string) $comment[0]->comment_author_url;\n            $newComment['bt_email'] = (string) $comment[0]->comment_author_email;\n            $newComment['bt_subscribe'] = 0;\n            $newComment['bt_type'] = 'comment';\n            $newComment['bt_id'] = date('YmdHis', strtotime($comment->comment_date));\n            $newComment['bt_article_id'] = $newPost['bt_id'];\n            $newComment['bt_wiki_content'] = reverse_wiki($comment->comment_content);\n            $newComment['bt_content'] = '<p>'.wiki($newComment['bt_wiki_content']).'</p>';\n            $newComment['bt_statut'] = (int) $comment->comment_approved;\n            $data['commentaires'][] = $newComment;\n        }\n        $data['articles'][] = $newPost;\n    }\n\n    $return = array();\n    // importer les articles\n    if (!empty($data['articles'])) {\n        $return['articles'] = insert_table_articles($data['articles']);\n    }\n    // importer les commentaires\n    if (!empty($data['commentaires'])) {\n        $return['commentaires'] = insert_table_commentaires($data['commentaires']);\n    }\n    // recompter les commentaires\n    if (!empty($data['commentaires']) or !empty($data['articles'])) {\n        recompte_commentaires();\n    }\n\n    return $return;\n}\n\n/**\n * Parse et importe un fichier de liste de flux OPML\n */\nfunction importer_opml($opmlContent)\n{\n    $GLOBALS['array_new'] = array();\n\n    function parseOpmlRecursive($xmlObj)\n    {\n        // si c\u2019est un sous dossier avec d\u2019autres flux \u00e0 l\u2019int\u00e9rieur : note le nom du dossier\n        $folder = $xmlObj->attributes()->text;\n        foreach ($xmlObj->children() as $child) {\n            if (!empty($child['xmlUrl'])) {\n                $url = (string)$child['xmlUrl'];\n                $title = (!empty($child['text'])) ? (string) $child['text'] : (string) $child['title'];\n                $GLOBALS['array_new'][$url] = array(\n                    'link' => $url,\n                    'title' => ucfirst($title),\n                    'favicon' => 'style/rss-feed-icon.png',\n                    'checksum' => 0,\n                    'time' => 0,\n                    'folder' => (string) $folder,\n                    'iserror' => 0,\n                );\n            }\n            parseOpmlRecursive($child);\n        }\n    }\n    $opmlFile = new SimpleXMLElement($opmlContent);\n    parseOpmlRecursive($opmlFile->body);\n\n    $oldLen = count($GLOBALS['liste_flux']);\n    $GLOBALS['liste_flux'] = array_reverse(tri_selon_sous_cle($GLOBALS['liste_flux'], 'title'));\n    $GLOBALS['liste_flux'] = array_merge($GLOBALS['array_new'], $GLOBALS['liste_flux']);\n    create_file_dtb(FEEDS_DB, $GLOBALS['liste_flux']);\n\n    return (count($GLOBALS['liste_flux']) - $oldLen);\n}\n\n/**\n * Parse and import HTML bookmarks (netscape/Firefox bookmarks export)\n */\nfunction parse_html($content)\n{\n    $arrOut = array();\n    // Netscape bookmark file (Firefox).\n    if (strcmp(substr($content, 0, strlen('<!DOCTYPE NETSCAPE-Bookmark-file-1>')), '<!DOCTYPE NETSCAPE-Bookmark-file-1>') === 0) {\n        // This format is supported by all browsers (except IE, of course), also delicious, diigo and others.\n        $arrId = array();\n        $allDtTags = explode('<DT>', $content);\n        foreach ($allDtTags as $dt) {\n            $link = array('bt_id' => '', 'bt_title' => '', 'bt_link' => '', 'bt_content' => '', 'bt_wiki_content' => '', 'bt_tags' => '', 'bt_statut' => 1, 'bt_type' => 'link');\n            $d = explode('<DD>', $dt);\n            if (strcmp(substr($d[0], 0, strlen('<A ')), '<A ') === 0) {\n                $link['bt_content'] = (isset($d[1])) ? html_entity_decode(trim($d[1]), ENT_QUOTES, 'utf-8') : '';  // Get description (optional)\n                $link['bt_wiki_content'] = $link['bt_content'];\n                preg_match('!<A .*?>(.*?)</A>!i', $d[0], $matches);\n                $link['bt_title'] = (isset($matches[1])) ? trim($matches[1]) : '';  // Get title\n                $link['bt_title'] = html_entity_decode($link['bt_title'], ENT_QUOTES, 'utf-8');\n                preg_match_all('# ([A-Z_]+)=\\\"(.*?)\"#i', $dt, $matches, PREG_SET_ORDER); // Get all other attributes\n                $rawAddDate = 0;\n                foreach ($matches as $m) {\n                    $attr = $m[1];\n                    $value = $m[2];\n                    if ($attr == 'HREF') {\n                        $link['bt_link'] = html_entity_decode($value, ENT_QUOTES, 'utf-8');\n                    } elseif ($attr == 'ADD_DATE') {\n                        $rawAddDate = intval($value);\n                    } elseif ($attr == 'PRIVATE') {\n                        $link['bt_statut'] = ($value == 1) ? 0 : 1;\n                    } // value=1 =>> statut=0 (it\u2019s reversed)\n                    elseif ($attr == 'TAGS') {\n                        $link['bt_tags'] = str_replace('  ', ' ', str_replace(',', ', ', html_entity_decode($value, ENT_QUOTES, 'utf-8')));\n                    }\n                }\n                if ($link['bt_link'] != '') {\n                    $rawAddDate = (empty($rawAddDate)) ? time() : $rawAddDate; // In case of shitty bookmark file with no ADD_DATE\n                    while (in_array(date('YmdHis', $rawAddDate), $arrId)) {\n                        $rawAddDate--; // avoids duplicate IDs\n                    }\n                    $arrId[] = $link['bt_id'] = date('YmdHis', $rawAddDate); // converts date to YmdHis format\n                    $arrOut[] = $link;\n                }\n            }\n        }\n    }\n    return $arrOut;\n}\n\n\n/**\n * process\n */\n\n$GLOBALS['liste_fichiers'] = open_serialzd_file(FILES_DB);\n$GLOBALS['liste_flux'] = open_serialzd_file(FEEDS_DB);\n\n\n/**\n * echo\n */\n\necho tpl_get_html_head($GLOBALS['lang']['titre_maintenance']);\n\necho '<div id=\"header\">';\n    echo '<div id=\"top\">';\n    tpl_show_msg();\n    echo tpl_show_topnav('preferences.php', $GLOBALS['lang']['titre_maintenance']);\n    echo '</div>';\necho '</div>';\n\necho '<div id=\"axe\">';\necho '<div id=\"page\">';\n\n// cr\u00e9ation du dossier des backups\ncreate_folder(DIR_BACKUP, 0);\n\n\n/*\n * Affiches les formulaires qui demandent quoi faire. (!isset($do))\n * Font le traitement dans les autres cas.\n*/\n\n// no $do nor $file : ask what to do\necho '<div id=\"maintenance-form\">';\nif (!isset($_GET['do']) and !isset($_FILES['file'])) {\n    $token = new_token();\n    $nbs = array(10 => 10, 20 => 20, 50 => 50, 100 => 100, 200 => 200, 500 => 500, -1 => $GLOBALS['lang']['pref_all']);\n\n    echo '<form action=\"maintenance.php\" method=\"get\" class=\"bordered-formbloc\" id=\"form_todo\">';\n    echo '<label for=\"select_todo\">'.$GLOBALS['lang']['maintenance_ask_do_what'].' </label>';\n    echo '<select id=\"select_todo\" name=\"select_todo\" onchange=\"switch_form(this.value)\">';\n    echo '<option selected disabled hidden value=\"\"></option>';\n    echo '<option value=\"form_export\">'.$GLOBALS['lang']['maintenance_export'].'</option>';\n    echo '<option value=\"form_import\">'.$GLOBALS['lang']['maintenance_import'].'</option>';\n    echo '<option value=\"form_optimi\">'.$GLOBALS['lang']['maintenance_optim'].'</option>';\n    echo '</select>';\n    echo '</form>';\n\n    // Form export\n    echo '<form action=\"maintenance.php\" onsubmit=\"hide_forms(\\'exp-format\\')\" method=\"get\" class=\"bordered-formbloc\" id=\"form_export\">';\n    // choose export what ?\n        echo '<fieldset>';\n        echo '<legend class=\"legend-backup\">'.$GLOBALS['lang']['maintenance_export'].'</legend>';\n        echo '<p><label for=\"json\">'.$GLOBALS['lang']['bak_export_json'].'</label>'.\n            '<input type=\"radio\" name=\"exp-format\" value=\"json\" id=\"json\" onchange=\"switch_export_type(\\'e_json\\')\" /></p>';\n        echo '<p><label for=\"html\">'.$GLOBALS['lang']['bak_export_netscape'].'</label>'.\n            '<input type=\"radio\" name=\"exp-format\" value=\"html\" id=\"html\" onchange=\"switch_export_type(\\'e_html\\')\" /></p>';\n        echo '<p><label for=\"zip\">'.$GLOBALS['lang']['bak_export_zip'].'</label>'.\n            '<input type=\"radio\" name=\"exp-format\" value=\"zip\"  id=\"zip\"  onchange=\"switch_export_type(\\'e_zip\\')\"  /></p>';\n        echo '<p><label for=\"opml\">'.$GLOBALS['lang']['bak_export_opml'].'</label>'.\n            '<input type=\"radio\" name=\"exp-format\" value=\"opml\"  id=\"opml\"  onchange=\"switch_export_type(\\'e_opml\\')\"  /></p>';\n        echo '</fieldset>';\n        // export in JSON.\n        echo '<fieldset id=\"e_json\">';\n        echo '<legend class=\"legend-backup\">'.$GLOBALS['lang']['maintenance_incl_quoi'].'</legend>';\n        echo '<p>'.select_yes_no('incl-artic', 0, $GLOBALS['lang']['bak_articles_do']).form_select_no_label('nb-artic', $nbs, 50).'</p>';\n        echo '<p>'.select_yes_no('incl-comms', 0, $GLOBALS['lang']['bak_comments_do']).'</p>';\n        echo '<p>'.select_yes_no('incl-links', 0, $GLOBALS['lang']['bak_links_do']).form_select_no_label('nb-links', $nbs, 50).'</p>';\n        echo '</fieldset>';\n        // export links in html\n        echo '<fieldset id=\"e_html\">';\n        echo '<legend class=\"legend-backup\">'.$GLOBALS['lang']['bak_combien_linx'].'</legend>';\n        echo '<p>'.form_select('nb-links2', $nbs, 50, $GLOBALS['lang']['bak_combien_linx']).'</p>';\n        echo '</fieldset>';\n        // export data in zip\n        echo '<fieldset id=\"e_zip\">';\n        echo '<legend class=\"legend-backup\">'.$GLOBALS['lang']['maintenance_incl_quoi'].'</legend>';\n    if (DBMS == 'sqlite') {\n        echo '<p>'.select_yes_no('incl-sqlit', 0, $GLOBALS['lang']['bak_incl_sqlit']).'</p>';\n    }\n        echo '<p>'.select_yes_no('incl-files', 0, $GLOBALS['lang']['bak_incl_files']).'</p>';\n        echo '<p>'.select_yes_no('incl-confi', 0, $GLOBALS['lang']['bak_incl_confi']).'</p>';\n        echo '<p>'.select_yes_no('incl-theme', 0, $GLOBALS['lang']['bak_incl_theme']).'</p>';\n        echo '</fieldset>';\n        echo '<p class=\"submit-bttns\">';\n        echo '<button class=\"submit button-cancel\" type=\"button\" onclick=\"annuler(\\'maintenance.php\\');\">'.$GLOBALS['lang']['annuler'].'</button>';\n        echo '<button class=\"submit button-submit\" type=\"submit\" name=\"do\" value=\"export\">'.$GLOBALS['lang']['valider'].'</button>';\n        echo '</p>';\n        echo hidden_input('token', $token);\n    echo '</form>';\n\n    // Form import\n    $importformats = array(\n        'jsonbak' => $GLOBALS['lang']['bak_import_btjson'],\n        'xmlwp' => $GLOBALS['lang']['bak_import_wordpress'],\n        'htmllinks' => $GLOBALS['lang']['bak_import_netscape'],\n        'rssopml' => $GLOBALS['lang']['bak_import_rssopml'] );\n    echo '<form action=\"maintenance.php\" method=\"post\" enctype=\"multipart/form-data\" class=\"bordered-formbloc\" id=\"form_import\">';\n        echo '<fieldset class=\"pref valid-center\">';\n        echo '<legend class=\"legend-backup\">'.$GLOBALS['lang']['maintenance_import'].'</legend>';\n        echo '<p>'.form_select_no_label('imp-format', $importformats, 'jsonbak');\n        echo '<input type=\"file\" name=\"file\" id=\"file\" class=\"text\" /></p>';\n        echo '</fieldset>';\n        echo '<p class=\"submit-bttns\">';\n        echo '<button class=\"submit button-cancel\" type=\"button\" onclick=\"annuler(\\'maintenance.php\\');\">'.$GLOBALS['lang']['annuler'].'</button>';\n        echo '<button class=\"submit button-submit\" type=\"submit\" name=\"valider\">'.$GLOBALS['lang']['valider'].'</button>';\n        echo '</p>';\n\n        echo hidden_input('token', $token);\n    echo '</form>';\n\n    // Form optimi\n    echo '<form action=\"maintenance.php\" method=\"get\" class=\"bordered-formbloc\" id=\"form_optimi\">';\n        echo '<fieldset class=\"pref valid-center\">';\n        echo '<legend class=\"legend-sweep\">'.$GLOBALS['lang']['maintenance_optim'].'</legend>';\n\n        echo '<p>'.select_yes_no('opti-file', 0, $GLOBALS['lang']['bak_opti_miniature']).'</p>';\n    if (DBMS == 'sqlite') {\n        echo '<p>'.select_yes_no('opti-vacu', 0, $GLOBALS['lang']['bak_opti_vacuum']).'</p>';\n    } else {\n        echo hidden_input('opti-vacu', 0);\n    }\n        echo '<p>'.select_yes_no('opti-comm', 0, $GLOBALS['lang']['bak_opti_recountcomm']).'</p>';\n\n        echo '<p>'.select_yes_no('opti-rss', 0, $GLOBALS['lang']['bak_opti_supprreadrss']).'</p>';\n\n        echo '</fieldset>';\n        echo '<p class=\"submit-bttns\">';\n        echo '<button class=\"submit button-cancel\" type=\"button\" onclick=\"annuler(\\'maintenance.php\\');\">'.$GLOBALS['lang']['annuler'].'</button>';\n        echo '<button class=\"submit button-submit\" type=\"submit\" name=\"do\" value=\"optim\">'.$GLOBALS['lang']['valider'].'</button>';\n        echo '</p>';\n        echo hidden_input('token', $token);\n    echo '</form>';\n\n// either $do or $file\n// $do\n} else {\n    // v\u00e9rifie Token\n    if ($errorsForm = validate_form_maintenance()) {\n        echo '<div class=\"bordered-formbloc\">';\n        echo '<fieldset class=\"pref valid-center\">';\n        echo '<legend class=\"legend-backup\">'.$GLOBALS['lang']['bak_restor_done'].'</legend>';\n        echo erreurs($errorsForm);\n        echo '<p class=\"submit-bttns\"><button class=\"submit button-submit\" type=\"button\" onclick=\"annuler(\\'maintenance.php\\')\">'.$GLOBALS['lang']['valider'].'</button></p>';\n        echo '</fieldset>';\n        echo '</div>';\n    } else {\n        // token : ok, go on !\n        if (isset($_GET['do'])) {\n            if ($_GET['do'] == 'export') {\n                $format = (!empty($_GET['exp-format'])) ? $_GET['exp-format'] : '';\n                // Export in JSON file\n                if ($format == 'json') {\n                    $arrData = array('articles' => array(), 'liens' => array(), 'commentaires' => array());\n                    // list links (nth last)\n                    if ($_GET['incl-links'] == 1) {\n                        $nb = htmlspecialchars($_GET['nb-links']);\n                        $limit = (is_numeric($nb) and $nb != -1 ) ? 'LIMIT 0, ?' : '';\n                        $array = (empty($limit)) ? array() : array($nb);\n                        $sql = '\n                            SELECT *\n                              FROM links\n                             ORDER BY bt_id DESC '.\n                             $limit;\n                        $arrData['liens'] = liste_elements($sql, $array, 'links');\n                    }\n                    // get articles (nth last)\n                    if ($_GET['incl-artic'] == 1) {\n                        $nb = htmlspecialchars($_GET['nb-artic']);\n                        $limit = (is_numeric($nb) and $nb != -1 ) ? 'LIMIT 0, ?' : '';\n                        $array = (empty($limit)) ? array() : array($nb);\n                        $sql = '\n                            SELECT *\n                              FROM articles\n                             ORDER BY bt_id DESC '.\n                             $limit;\n                        $arrData['articles'] = liste_elements($sql, $array, 'articles');\n                        // get list of comments (comments that belong to selected articles only)\n                        if ($_GET['incl-comms'] == 1) {\n                            foreach ($arrData['articles'] as $article) {\n                                $sql = '\n                                    SELECT c.*, a.bt_title\n                                      FROM commentaires AS c, articles AS a\n                                     WHERE c.bt_article_id = ?\n                                           AND c.bt_article_id = a.bt_id';\n                                $comments = liste_elements($sql, array($article['bt_id']), 'commentaires');\n                                if (!empty($comments)) {\n                                    $arrData['commentaires'] = array_merge($arrData['commentaires'], $comments);\n                                }\n                            }\n                        }\n                    }\n                    $file_archive = creer_fichier_json($arrData);\n\n                // Export links in HTML format\n                } elseif ($format == 'html') {\n                    $nb = htmlspecialchars($_GET['nb-links2']);\n                    $limit = (is_numeric($nb) and $nb != -1 ) ? $nb : '';\n                    $file_archive = create_html_favs($limit);\n\n                // Export a ZIP archive\n                } elseif ($format == 'zip') {\n                    $dossiers = array();\n                    $sqlite = (!empty($_GET['incl-sqlit'])) ? $_GET['incl-sqlit'] + 0 : 0;\n                    if ($sqlite == 1) {\n                        $dossiers[] = DIR_DATABASES;\n                    }\n                    if ($_GET['incl-files'] == 1) {\n                        $dossiers[] = DIR_DOCUMENTS;\n                        $dossiers[] = DIR_IMAGES;\n                    }\n                    if ($_GET['incl-confi'] == 1) {\n                        $dossiers[] = DIR_CONFIG;\n                    }\n                    if ($_GET['incl-theme'] == 1) {\n                        $dossiers[] = DIR_THEMES;\n                    }\n                    $file_archive = creer_fichier_zip($dossiers);\n\n                // Export a OPML rss lsit\n                } elseif ($format == 'opml') {\n                    $file_archive = creer_fichier_opml();\n                } else {\n                    echo 'nothing to do';\n                }\n\n                // affiche le formulaire de t\u00e9l\u00e9chargement et de validation.\n                if (!empty($file_archive)) {\n                    echo '<form action=\"maintenance.php\" method=\"get\" class=\"bordered-formbloc\">';\n                    echo '<fieldset class=\"pref valid-center\">';\n                    echo '<legend class=\"legend-backup\">'.$GLOBALS['lang']['bak_succes_save'].'</legend>';\n\n                    echo '<p><a href=\"'.$file_archive.'\" download>'.$GLOBALS['lang']['bak_dl_fichier'].'</a></p>';\n                    echo '<p class=\"submit-bttns\"><button class=\"submit button-submit\" type=\"submit\">'.$GLOBALS['lang']['valider'].'</button></p>';\n                    echo '</fieldset>';\n                    echo '</form>';\n                }\n            } elseif ($_GET['do'] == 'optim') {\n                    // recount files DB\n                if ($_GET['opti-file'] == 1) {\n                    rebuilt_file_db();\n                }\n                    // vacuum SQLite DB\n                if ($_GET['opti-vacu'] == 1) {\n                    try {\n                        $req = $GLOBALS['db_handle']->prepare('VACUUM');\n                        $req->execute();\n                    } catch (Exception $e) {\n                        die('Erreur 1429 vacuum : '.$e->getMessage());\n                    }\n                }\n                    // recount comms/articles\n                if ($_GET['opti-comm'] == 1) {\n                    recompte_commentaires();\n                }\n                    // delete old RSS entries\n                if ($_GET['opti-rss'] == 1) {\n                    try {\n                        $req = $GLOBALS['db_handle']->prepare('DELETE FROM rss WHERE bt_statut = 0');\n                        $req->execute(array());\n                    } catch (Exception $e) {\n                        die('Erreur : 7873 : rss delete old entries : '.$e->getMessage());\n                    }\n                }\n                    echo '<form action=\"maintenance.php\" method=\"get\" class=\"bordered-formbloc\">';\n                    echo '<fieldset class=\"pref valid-center\">';\n                    echo '<legend class=\"legend-backup\">'.$GLOBALS['lang']['bak_optim_done'].'</legend>';\n                    echo '<p class=\"submit-bttns\"><button class=\"submit button-submit\" type=\"submit\">'.$GLOBALS['lang']['valider'].'</button></p>';\n                    echo '</fieldset>';\n                    echo '</form>';\n            } else {\n                echo 'nothing to do.';\n            }\n\n        // $file\n        } elseif (isset($_POST['valider']) and !empty($_FILES['file']['tmp_name'])) {\n                $message = array();\n            switch ($_POST['imp-format']) {\n                case 'jsonbak':\n                    $json = file_get_contents($_FILES['file']['tmp_name']);\n                    $message = importer_json($json);\n                    break;\n                case 'htmllinks':\n                    $html = file_get_contents($_FILES['file']['tmp_name']);\n                    $message['links'] = insert_table_links(parse_html($html));\n                    break;\n                case 'xmlwp':\n                    $xml = file_get_contents($_FILES['file']['tmp_name']);\n                    $message = importer_wordpress($xml);\n                    break;\n                case 'rssopml':\n                    $xml = file_get_contents($_FILES['file']['tmp_name']);\n                    $message['feeds'] = importer_opml($xml);\n                    break;\n                default:\n                    die('nothing');\n                break;\n            }\n            if (!empty($message)) {\n                echo '<form action=\"maintenance.php\" method=\"get\" class=\"bordered-formbloc\">';\n                echo '<fieldset class=\"pref valid-center\">';\n                echo '<legend class=\"legend-backup\">'.$GLOBALS['lang']['bak_restor_done'].'</legend>';\n                echo '<ul>';\n                foreach ($message as $type => $nb) {\n                    echo '<li>'.$GLOBALS['lang']['label_'.$type].' : '.$nb.'</li>';\n                }\n                echo '</ul>';\n                echo '<p class=\"submit-bttns\"><button class=\"submit button-submit\" type=\"submit\">'.$GLOBALS['lang']['valider'].'</button></p>';\n                echo '</fieldset>';\n                echo '</form>';\n            }\n        } else {\n            echo 'nothing to do.';\n        }\n    }\n}\n\necho '</div>';\n\necho <<<EOS\n<script src=\"style/javascript.js\"></script>\n<script>\n    var ia = document.getElementById(\"incl-artic\");\n    if (ia) ia.addEventListener(\"change\", function() {\n        document.getElementById(\"nb-artic\").style.display = (ia.value == 1 ? \"inline-block\" : \"none\");\n    });\n\n    var il = document.getElementById(\"incl-links\");\n    if (il) il.addEventListener(\"change\", function() {\n        document.getElementById(\"nb-links\").style.display = (il.value == 1 ? \"inline-block\" : \"none\");\n    });\n</script>\nEOS;\n\necho tpl_get_footer($begin);\n"], "filenames": ["admin/maintenance.php"], "buggy_code_start_loc": [340], "buggy_code_end_loc": [341], "fixing_code_start_loc": [340], "fixing_code_end_loc": [343], "type": "CWE-200", "message": "Information Disclosure vulnerability in creer_fichier_zip in admin/maintenance.php in BlogoText through 3.7.6 allows remote attackers to defeat a filename-randomization protection mechanism, and read backup archives on Windows servers, by providing the archiv~1.zip name (aka an 8.3 filename).", "other": {"cve": {"id": "CVE-2017-17793", "sourceIdentifier": "cve@mitre.org", "published": "2017-12-20T09:29:01.693", "lastModified": "2018-01-12T14:36:00.830", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Information Disclosure vulnerability in creer_fichier_zip in admin/maintenance.php in BlogoText through 3.7.6 allows remote attackers to defeat a filename-randomization protection mechanism, and read backup archives on Windows servers, by providing the archiv~1.zip name (aka an 8.3 filename)."}, {"lang": "es", "value": "Vulnerabilidad de divulgaci\u00f3n de informaci\u00f3n en creer_fichier_zip en admin/maintenance.php en BlogoText hasta la versi\u00f3n 3.7.6 permite a los atacantes remotos evadir un mecanismo de protecci\u00f3n de aleatorizaci\u00f3n de nombres de archivo y leer archivos de copia de seguridad en servidores Windows, proporcionando el nombre archiv~1.zip (tambi\u00e9n conocido como un nombre de archivo 8.3)."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:blogotext_project:blogotext:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.7.6", "matchCriteriaId": "D0375519-1423-42DC-BFF4-8250FEDDF0E8"}]}]}], "references": [{"url": "https://github.com/BlogoText/blogotext/commit/101dc1d37010a1d877d6961ed2f32d089c708e91", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/BlogoText/blogotext/issues/345", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/BlogoText/blogotext/commit/101dc1d37010a1d877d6961ed2f32d089c708e91"}}