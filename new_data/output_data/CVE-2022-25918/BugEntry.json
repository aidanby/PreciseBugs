{"buggy_code": ["# Security Policy\n\n## Supported Versions\n\nThe table below shows which versions of _Shescape_ are currently supported with\nsecurity updates.\n\n| Version | Supported | End-of-life |\n| ------: | :-------- | :---------- |\n|   1.x.x | Yes       | -           |\n|   0.x.x | No        | 2021-02-01  |\n\n## Reporting a Vulnerability\n\nThe maintainers of this project take security bugs very seriously. We appreciate\nyour efforts to responsibly disclose your findings. Due to the non-funded and\nopen-source nature of this project, we take a best-efforts approach when it\ncomes to engaging with (security) reports.\n\nTo report a security issue in a supported version of the project, send an email\nto [security@ericcornelissen.dev] and include the terms \"SECURITY\" and\n\"shescape\" in the subject line. Please do not open a regular issue or Pull\nRequest in the public repository.\n\nIf you found a security bug in an unsupported version of the project, please\nreport this publicly. For example, as a regular issue in the public repository.\n\n## Advisories\n\n| ID               | Date       | Affected versions | Patched versions |\n| :--------------- | :--------- | :---------------- | :--------------- |\n| `CVE-2021-21384` | 2021-03-19 | `<1.1.3`          | `1.1.3`          |\n| `CVE-2022-24725` | 2022-03-03 | `>=1.4.0 <1.5.1`  | `1.5.1`          |\n| `CVE-2022-31179` | 2022-07-26 | `<1.5.8`          | `1.5.8`          |\n| `CVE-2022-31180` | 2022-07-26 | `>=1.4.0 <1.5.8`  | `1.5.8`          |\n| `CVE-2022-36064` | 2022-08-29 | `>=1.5.1 <1.5.10` | `1.5.10`         |\n\n## Acknowledgments\n\nWe would like to publicly thank the following reporters:\n\n- _None yet_\n\n[security@ericcornelissen.dev]: mailto:security@ericcornelissen.dev?subject=SECURITY%20%28shescape%29\n", "/**\n * @overview Provides functionality specifically for Unix systems.\n * @license MPL-2.0\n */\n\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nimport which from \"which\";\n\n/**\n * The name of the Bourne-again shell (Bash) binary.\n *\n * @constant\n * @type {string}\n */\nconst binBash = \"bash\";\n\n/**\n * The name of the Debian Almquist shell (Dash) binary.\n *\n * @constant\n * @type {string}\n */\nconst binDash = \"dash\";\n\n/**\n * The name of the Z shell (Zsh) binary.\n *\n * @constant\n * @type {string}\n */\nconst binZsh = \"zsh\";\n\n/**\n * Escapes a shell argument for use in Bash(-like shells).\n *\n * @param {string} arg The argument to escape.\n * @param {boolean} interpolation Is interpolation enabled.\n * @param {boolean} quoted Is `arg` being quoted.\n * @returns {string} The escaped argument.\n */\nfunction escapeArgBash(arg, interpolation, quoted) {\n  let result = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");\n\n  if (interpolation) {\n    result = result\n      .replace(/\\\\/gu, \"\\\\\\\\\")\n      .replace(/\\n/gu, \" \")\n      .replace(/(^|\\s)([#~])/gu, \"$1\\\\$2\")\n      .replace(/([\"$&'()*;<>?`|])/gu, \"\\\\$1\")\n      .replace(/(?<!\\{)\\{+(?=(?:[^{][^,.]*)?[,.][^}]*\\})/gu, (curlyBraces) =>\n        curlyBraces.replace(/\\{/gu, \"\\\\{\")\n      )\n      .replace(/(?<=[:=])(~)(?=[\\s+\\-/0:=]|$)/gu, \"\\\\$1\");\n  } else if (quoted) {\n    result = result.replace(/'/gu, `'\\\\''`);\n  }\n\n  result = result.replace(/\\r(?!\\n)/gu, \"\");\n\n  return result;\n}\n\n/**\n * Escapes a shell argument for use in Dash.\n *\n * @param {string} arg The argument to escape.\n * @param {boolean} interpolation Is interpolation enabled.\n * @param {boolean} quoted Is `arg` being quoted.\n * @returns {string} The escaped argument.\n */\nfunction escapeArgDash(arg, interpolation, quoted) {\n  let result = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");\n\n  if (interpolation) {\n    result = result\n      .replace(/\\\\/gu, \"\\\\\\\\\")\n      .replace(/\\n/gu, \" \")\n      .replace(/(^|\\s)([#~])/gu, \"$1\\\\$2\")\n      .replace(/([\"$&'()*;<>?`|])/gu, \"\\\\$1\");\n  } else if (quoted) {\n    result = result.replace(/'/gu, `'\\\\''`);\n  }\n\n  result = result.replace(/\\r(?!\\n)/gu, \"\");\n\n  return result;\n}\n\n/**\n * Escapes a shell argument for use in Zsh.\n *\n * @param {string} arg The argument to escape.\n * @param {boolean} interpolation Is interpolation enabled.\n * @param {boolean} quoted Is `arg` being quoted.\n * @returns {string} The escaped argument.\n */\nfunction escapeArgZsh(arg, interpolation, quoted) {\n  let result = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");\n\n  if (interpolation) {\n    result = result\n      .replace(/\\\\/gu, \"\\\\\\\\\")\n      .replace(/\\n/gu, \" \")\n      .replace(/(^|\\s)([#=~])/gu, \"$1\\\\$2\")\n      .replace(/([\"$&'()*;<>?[\\]`{|}])/gu, \"\\\\$1\");\n  } else if (quoted) {\n    result = result.replace(/'/gu, `'\\\\''`);\n  }\n\n  result = result.replace(/\\r(?!\\n)/gu, \"\");\n\n  return result;\n}\n\n/**\n * Quotes an argument for use in a Unix shell.\n *\n * @param {string} arg The argument to quote.\n * @returns {string} The quoted argument.\n */\nfunction quoteArg(arg) {\n  return `'${arg}'`;\n}\n\n/**\n * Returns the basename of a directory or file path on a Unix system.\n *\n * @param {string} fullPath A Unix-style directory or file path.\n * @returns {string} The basename of `fullPath`.\n */\nfunction getBasename(fullPath) {\n  return path.basename(fullPath);\n}\n\n/**\n * Returns the default shell for Unix systems.\n *\n * For more information, see `options.shell` in:\n * https://nodejs.org/api/child_process.html#child_processexeccommand-options-callback.\n *\n * @returns {string} The default shell.\n */\nexport function getDefaultShell() {\n  return \"/bin/sh\";\n}\n\n/**\n * Returns a function to escape arguments for use in a particular shell.\n *\n * @param {string} shellName The name of a Unix shell.\n * @returns {Function?} A function to escape arguments for use in the shell.\n */\nexport function getEscapeFunction(shellName) {\n  switch (shellName) {\n    case binBash:\n      return escapeArgBash;\n    case binDash:\n      return escapeArgDash;\n    case binZsh:\n      return escapeArgZsh;\n    default:\n      return null;\n  }\n}\n\n/**\n * Returns a function to quote arguments for use in a particular shell.\n *\n * @param {string} shellName The name of a Unix shell.\n * @returns {Function?} A function to quote arguments for use in the shell.\n */\nexport function getQuoteFunction(shellName) {\n  switch (shellName) {\n    case binBash:\n    case binDash:\n    case binZsh:\n      return quoteArg;\n    default:\n      return null;\n  }\n}\n\n/**\n * Determines the name of the shell identified by a file path or file name.\n *\n * @param {object} args The arguments for this function.\n * @param {string} args.shell The name or path of the shell.\n * @param {object} deps The dependencies for this function.\n * @param {Function} deps.resolveExecutable Resolve the path to an executable.\n * @returns {string} The shell name.\n */\nexport function getShellName({ shell }, { resolveExecutable }) {\n  shell = resolveExecutable(\n    { executable: shell },\n    { exists: fs.existsSync, readlink: fs.readlinkSync, which: which.sync }\n  );\n\n  const shellName = getBasename(shell);\n  if (getEscapeFunction(shellName) === null) {\n    return binBash;\n  }\n\n  return shellName;\n}\n", "/**\n * @overview Provides fixtures for testing Unix specific functionality.\n * @license MPL-2.0\n */\n\nimport { binBash, binDash, binZsh } from \"../_constants.cjs\";\n\nexport const escape = {\n  [binBash]: {\n    \"sample strings\": [\n      {\n        input: \"foobar\",\n        expected: { interpolation: \"foobar\", noInterpolation: \"foobar\" },\n      },\n      {\n        input: \"Hello world\",\n        expected: {\n          interpolation: \"Hello world\",\n          noInterpolation: \"Hello world\",\n        },\n      },\n    ],\n    \"<null> (\\\\0)\": [\n      {\n        input: \"a\\x00b\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\x00b\\x00c\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"a\\x00\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"\\x00a\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<backspace> ('\\\\b')\": [\n      {\n        input: \"a\\bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\bb\\bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\b\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<character tabulation> (\\\\t)\": [\n      {\n        input: \"a\\tb\",\n        expected: { interpolation: \"a\\tb\", noInterpolation: \"a\\tb\" },\n      },\n      {\n        input: \"a\\tb\\tc\",\n        expected: { interpolation: \"a\\tb\\tc\", noInterpolation: \"a\\tb\\tc\" },\n      },\n      {\n        input: \"a\\t\",\n        expected: { interpolation: \"a\\t\", noInterpolation: \"a\\t\" },\n      },\n      {\n        input: \"\\ta\",\n        expected: { interpolation: \"\\ta\", noInterpolation: \"\\ta\" },\n      },\n    ],\n    \"<end of line> ('\\\\n')\": [\n      {\n        input: \"a\\nb\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a\\nb\" },\n      },\n      {\n        input: \"a\\nb\\nc\",\n        expected: { interpolation: \"a b c\", noInterpolation: \"a\\nb\\nc\" },\n      },\n      {\n        input: \"a\\n\",\n        expected: { interpolation: \"a \", noInterpolation: \"a\\n\" },\n      },\n      {\n        input: \"\\na\",\n        expected: { interpolation: \" a\", noInterpolation: \"\\na\" },\n      },\n    ],\n    \"<line tabulation> (\\\\v)\": [\n      {\n        input: \"a\\vb\",\n        expected: { interpolation: \"a\\vb\", noInterpolation: \"a\\vb\" },\n      },\n      {\n        input: \"a\\vb\\vc\",\n        expected: { interpolation: \"a\\vb\\vc\", noInterpolation: \"a\\vb\\vc\" },\n      },\n      {\n        input: \"a\\v\",\n        expected: { interpolation: \"a\\v\", noInterpolation: \"a\\v\" },\n      },\n      {\n        input: \"\\va\",\n        expected: { interpolation: \"\\va\", noInterpolation: \"\\va\" },\n      },\n    ],\n    \"<form feed> (\\\\f)\": [\n      {\n        input: \"a\\fb\",\n        expected: { interpolation: \"a\\fb\", noInterpolation: \"a\\fb\" },\n      },\n      {\n        input: \"a\\fb\\fc\",\n        expected: { interpolation: \"a\\fb\\fc\", noInterpolation: \"a\\fb\\fc\" },\n      },\n      {\n        input: \"a\\f\",\n        expected: { interpolation: \"a\\f\", noInterpolation: \"a\\f\" },\n      },\n      {\n        input: \"\\fa\",\n        expected: { interpolation: \"\\fa\", noInterpolation: \"\\fa\" },\n      },\n    ],\n    \"<carriage return> ('\\\\r')\": [\n      {\n        input: \"a\\rb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\rb\\rc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\ra\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\r\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\r\\nb\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a\\r\\nb\" },\n      },\n    ],\n    \"<escape> ('\\\\u001B')\": [\n      {\n        input: \"a\\u001Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u001Bb\\u001Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u001Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u001B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<space> (' ')\": [\n      {\n        input: \"a b\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a b\" },\n      },\n      {\n        input: \"a b c\",\n        expected: { interpolation: \"a b c\", noInterpolation: \"a b c\" },\n      },\n      {\n        input: \"a \",\n        expected: { interpolation: \"a \", noInterpolation: \"a \" },\n      },\n      {\n        input: \" a\",\n        expected: { interpolation: \" a\", noInterpolation: \" a\" },\n      },\n    ],\n    \"<next line> (\\\\u0085)\": [\n      {\n        input: \"a\\u0085b\",\n        expected: {\n          interpolation: \"a\\u0085b\",\n          noInterpolation: \"a\\u0085b\",\n        },\n      },\n      {\n        input: \"a\\u0085b\\u0085c\",\n        expected: {\n          interpolation: \"a\\u0085b\\u0085c\",\n          noInterpolation: \"a\\u0085b\\u0085c\",\n        },\n      },\n      {\n        input: \"a\\u0085\",\n        expected: {\n          interpolation: \"a\\u0085\",\n          noInterpolation: \"a\\u0085\",\n        },\n      },\n      {\n        input: \"\\u0085a\",\n        expected: {\n          interpolation: \"\\u0085a\",\n          noInterpolation: \"\\u0085a\",\n        },\n      },\n    ],\n    \"<control sequence introducer> ('\\\\u009B')\": [\n      {\n        input: \"a\\u009Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u009Bb\\u009Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u009Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u009B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<no break space> (\\\\u00A0)\": [\n      {\n        input: \"a\\u00A0b\",\n        expected: {\n          interpolation: \"a\\u00A0b\",\n          noInterpolation: \"a\\u00A0b\",\n        },\n      },\n      {\n        input: \"a\\u00A0b\\u00A0c\",\n        expected: {\n          interpolation: \"a\\u00A0b\\u00A0c\",\n          noInterpolation: \"a\\u00A0b\\u00A0c\",\n        },\n      },\n      {\n        input: \"a\\u00A0\",\n        expected: {\n          interpolation: \"a\\u00A0\",\n          noInterpolation: \"a\\u00A0\",\n        },\n      },\n      {\n        input: \"\\u00A0a\",\n        expected: {\n          interpolation: \"\\u00A0a\",\n          noInterpolation: \"\\u00A0a\",\n        },\n      },\n    ],\n    \"<en quad> (\\\\u2000)\": [\n      {\n        input: \"a\\u2000b\",\n        expected: {\n          interpolation: \"a\\u2000b\",\n          noInterpolation: \"a\\u2000b\",\n        },\n      },\n      {\n        input: \"a\\u2000b\\u2000c\",\n        expected: {\n          interpolation: \"a\\u2000b\\u2000c\",\n          noInterpolation: \"a\\u2000b\\u2000c\",\n        },\n      },\n      {\n        input: \"a\\u2000\",\n        expected: {\n          interpolation: \"a\\u2000\",\n          noInterpolation: \"a\\u2000\",\n        },\n      },\n      {\n        input: \"\\u2000a\",\n        expected: {\n          interpolation: \"\\u2000a\",\n          noInterpolation: \"\\u2000a\",\n        },\n      },\n    ],\n    \"<em quad> (\\\\u2001)\": [\n      {\n        input: \"a\\u2001b\",\n        expected: {\n          interpolation: \"a\\u2001b\",\n          noInterpolation: \"a\\u2001b\",\n        },\n      },\n      {\n        input: \"a\\u2001b\\u2001c\",\n        expected: {\n          interpolation: \"a\\u2001b\\u2001c\",\n          noInterpolation: \"a\\u2001b\\u2001c\",\n        },\n      },\n      {\n        input: \"a\\u2001\",\n        expected: {\n          interpolation: \"a\\u2001\",\n          noInterpolation: \"a\\u2001\",\n        },\n      },\n      {\n        input: \"\\u2001a\",\n        expected: {\n          interpolation: \"\\u2001a\",\n          noInterpolation: \"\\u2001a\",\n        },\n      },\n    ],\n    \"<en space> (\\\\u2002)\": [\n      {\n        input: \"a\\u2002b\",\n        expected: {\n          interpolation: \"a\\u2002b\",\n          noInterpolation: \"a\\u2002b\",\n        },\n      },\n      {\n        input: \"a\\u2002b\\u2002c\",\n        expected: {\n          interpolation: \"a\\u2002b\\u2002c\",\n          noInterpolation: \"a\\u2002b\\u2002c\",\n        },\n      },\n      {\n        input: \"a\\u2002\",\n        expected: {\n          interpolation: \"a\\u2002\",\n          noInterpolation: \"a\\u2002\",\n        },\n      },\n      {\n        input: \"\\u2002a\",\n        expected: {\n          interpolation: \"\\u2002a\",\n          noInterpolation: \"\\u2002a\",\n        },\n      },\n    ],\n    \"<em space> (\\\\u2003)\": [\n      {\n        input: \"a\\u2003b\",\n        expected: {\n          interpolation: \"a\\u2003b\",\n          noInterpolation: \"a\\u2003b\",\n        },\n      },\n      {\n        input: \"a\\u2003b\\u2003c\",\n        expected: {\n          interpolation: \"a\\u2003b\\u2003c\",\n          noInterpolation: \"a\\u2003b\\u2003c\",\n        },\n      },\n      {\n        input: \"a\\u2003\",\n        expected: {\n          interpolation: \"a\\u2003\",\n          noInterpolation: \"a\\u2003\",\n        },\n      },\n      {\n        input: \"\\u2003a\",\n        expected: {\n          interpolation: \"\\u2003a\",\n          noInterpolation: \"\\u2003a\",\n        },\n      },\n    ],\n    \"<three-per-em space> (\\\\u2004)\": [\n      {\n        input: \"a\\u2004b\",\n        expected: {\n          interpolation: \"a\\u2004b\",\n          noInterpolation: \"a\\u2004b\",\n        },\n      },\n      {\n        input: \"a\\u2004b\\u2004c\",\n        expected: {\n          interpolation: \"a\\u2004b\\u2004c\",\n          noInterpolation: \"a\\u2004b\\u2004c\",\n        },\n      },\n      {\n        input: \"a\\u2004\",\n        expected: {\n          interpolation: \"a\\u2004\",\n          noInterpolation: \"a\\u2004\",\n        },\n      },\n      {\n        input: \"\\u2004a\",\n        expected: {\n          interpolation: \"\\u2004a\",\n          noInterpolation: \"\\u2004a\",\n        },\n      },\n    ],\n    \"<four-per-em space> (\\\\u2005)\": [\n      {\n        input: \"a\\u2005b\",\n        expected: {\n          interpolation: \"a\\u2005b\",\n          noInterpolation: \"a\\u2005b\",\n        },\n      },\n      {\n        input: \"a\\u2005b\\u2005c\",\n        expected: {\n          interpolation: \"a\\u2005b\\u2005c\",\n          noInterpolation: \"a\\u2005b\\u2005c\",\n        },\n      },\n      {\n        input: \"a\\u2005\",\n        expected: {\n          interpolation: \"a\\u2005\",\n          noInterpolation: \"a\\u2005\",\n        },\n      },\n      {\n        input: \"\\u2005a\",\n        expected: {\n          interpolation: \"\\u2005a\",\n          noInterpolation: \"\\u2005a\",\n        },\n      },\n    ],\n    \"<six-per-em space> (\\\\u2006)\": [\n      {\n        input: \"a\\u2006b\",\n        expected: {\n          interpolation: \"a\\u2006b\",\n          noInterpolation: \"a\\u2006b\",\n        },\n      },\n      {\n        input: \"a\\u2006b\\u2006c\",\n        expected: {\n          interpolation: \"a\\u2006b\\u2006c\",\n          noInterpolation: \"a\\u2006b\\u2006c\",\n        },\n      },\n      {\n        input: \"a\\u2006\",\n        expected: {\n          interpolation: \"a\\u2006\",\n          noInterpolation: \"a\\u2006\",\n        },\n      },\n      {\n        input: \"\\u2006a\",\n        expected: {\n          interpolation: \"\\u2006a\",\n          noInterpolation: \"\\u2006a\",\n        },\n      },\n    ],\n    \"<figure space> (\\\\u2007)\": [\n      {\n        input: \"a\\u2007b\",\n        expected: {\n          interpolation: \"a\\u2007b\",\n          noInterpolation: \"a\\u2007b\",\n        },\n      },\n      {\n        input: \"a\\u2007b\\u2007c\",\n        expected: {\n          interpolation: \"a\\u2007b\\u2007c\",\n          noInterpolation: \"a\\u2007b\\u2007c\",\n        },\n      },\n      {\n        input: \"a\\u2007\",\n        expected: {\n          interpolation: \"a\\u2007\",\n          noInterpolation: \"a\\u2007\",\n        },\n      },\n      {\n        input: \"\\u2007a\",\n        expected: {\n          interpolation: \"\\u2007a\",\n          noInterpolation: \"\\u2007a\",\n        },\n      },\n    ],\n    \"<punctuation space> (\\\\u2008)\": [\n      {\n        input: \"a\\u2008b\",\n        expected: {\n          interpolation: \"a\\u2008b\",\n          noInterpolation: \"a\\u2008b\",\n        },\n      },\n      {\n        input: \"a\\u2008b\\u2008c\",\n        expected: {\n          interpolation: \"a\\u2008b\\u2008c\",\n          noInterpolation: \"a\\u2008b\\u2008c\",\n        },\n      },\n      {\n        input: \"a\\u2008\",\n        expected: {\n          interpolation: \"a\\u2008\",\n          noInterpolation: \"a\\u2008\",\n        },\n      },\n      {\n        input: \"\\u2008a\",\n        expected: {\n          interpolation: \"\\u2008a\",\n          noInterpolation: \"\\u2008a\",\n        },\n      },\n    ],\n    \"<thin space> (\\\\u2009)\": [\n      {\n        input: \"a\\u2009b\",\n        expected: {\n          interpolation: \"a\\u2009b\",\n          noInterpolation: \"a\\u2009b\",\n        },\n      },\n      {\n        input: \"a\\u2009b\\u2009c\",\n        expected: {\n          interpolation: \"a\\u2009b\\u2009c\",\n          noInterpolation: \"a\\u2009b\\u2009c\",\n        },\n      },\n      {\n        input: \"a\\u2009\",\n        expected: {\n          interpolation: \"a\\u2009\",\n          noInterpolation: \"a\\u2009\",\n        },\n      },\n      {\n        input: \"\\u2009a\",\n        expected: {\n          interpolation: \"\\u2009a\",\n          noInterpolation: \"\\u2009a\",\n        },\n      },\n    ],\n    \"<hair space> (\\\\u200A)\": [\n      {\n        input: \"a\\u200Ab\",\n        expected: {\n          interpolation: \"a\\u200Ab\",\n          noInterpolation: \"a\\u200Ab\",\n        },\n      },\n      {\n        input: \"a\\u200Ab\\u200Ac\",\n        expected: {\n          interpolation: \"a\\u200Ab\\u200Ac\",\n          noInterpolation: \"a\\u200Ab\\u200Ac\",\n        },\n      },\n      {\n        input: \"a\\u200A\",\n        expected: {\n          interpolation: \"a\\u200A\",\n          noInterpolation: \"a\\u200A\",\n        },\n      },\n      {\n        input: \"\\u200Aa\",\n        expected: {\n          interpolation: \"\\u200Aa\",\n          noInterpolation: \"\\u200Aa\",\n        },\n      },\n    ],\n    \"<line separator> (\\\\u2028)\": [\n      {\n        input: \"a\\u2028b\",\n        expected: {\n          interpolation: \"a\\u2028b\",\n          noInterpolation: \"a\\u2028b\",\n        },\n      },\n      {\n        input: \"a\\u2028b\\u2028c\",\n        expected: {\n          interpolation: \"a\\u2028b\\u2028c\",\n          noInterpolation: \"a\\u2028b\\u2028c\",\n        },\n      },\n      {\n        input: \"a\\u2028\",\n        expected: {\n          interpolation: \"a\\u2028\",\n          noInterpolation: \"a\\u2028\",\n        },\n      },\n      {\n        input: \"\\u2028a\",\n        expected: {\n          interpolation: \"\\u2028a\",\n          noInterpolation: \"\\u2028a\",\n        },\n      },\n    ],\n    \"<paragraph separator> (\\\\u2029)\": [\n      {\n        input: \"a\\u2029b\",\n        expected: {\n          interpolation: \"a\\u2029b\",\n          noInterpolation: \"a\\u2029b\",\n        },\n      },\n      {\n        input: \"a\\u2029b\\u2029c\",\n        expected: {\n          interpolation: \"a\\u2029b\\u2029c\",\n          noInterpolation: \"a\\u2029b\\u2029c\",\n        },\n      },\n      {\n        input: \"a\\u2029\",\n        expected: {\n          interpolation: \"a\\u2029\",\n          noInterpolation: \"a\\u2029\",\n        },\n      },\n      {\n        input: \"\\u2029a\",\n        expected: {\n          interpolation: \"\\u2029a\",\n          noInterpolation: \"\\u2029a\",\n        },\n      },\n    ],\n    \"<narrow no-break space> (\\\\u202F)\": [\n      {\n        input: \"a\\u202Fb\",\n        expected: {\n          interpolation: \"a\\u202Fb\",\n          noInterpolation: \"a\\u202Fb\",\n        },\n      },\n      {\n        input: \"a\\u202Fb\\u202Fc\",\n        expected: {\n          interpolation: \"a\\u202Fb\\u202Fc\",\n          noInterpolation: \"a\\u202Fb\\u202Fc\",\n        },\n      },\n      {\n        input: \"a\\u202F\",\n        expected: {\n          interpolation: \"a\\u202F\",\n          noInterpolation: \"a\\u202F\",\n        },\n      },\n      {\n        input: \"\\u202Fa\",\n        expected: {\n          interpolation: \"\\u202Fa\",\n          noInterpolation: \"\\u202Fa\",\n        },\n      },\n    ],\n    \"<medium mathematical space> (\\\\u205F)\": [\n      {\n        input: \"a\\u205Fb\",\n        expected: {\n          interpolation: \"a\\u205Fb\",\n          noInterpolation: \"a\\u205Fb\",\n        },\n      },\n      {\n        input: \"a\\u205Fb\\u205Fc\",\n        expected: {\n          interpolation: \"a\\u205Fb\\u205Fc\",\n          noInterpolation: \"a\\u205Fb\\u205Fc\",\n        },\n      },\n      {\n        input: \"a\\u205F\",\n        expected: {\n          interpolation: \"a\\u205F\",\n          noInterpolation: \"a\\u205F\",\n        },\n      },\n      {\n        input: \"\\u205Fa\",\n        expected: {\n          interpolation: \"\\u205Fa\",\n          noInterpolation: \"\\u205Fa\",\n        },\n      },\n    ],\n    \"<ideographic space> (\\\\u3000)\": [\n      {\n        input: \"a\\u3000b\",\n        expected: {\n          interpolation: \"a\\u3000b\",\n          noInterpolation: \"a\\u3000b\",\n        },\n      },\n      {\n        input: \"a\\u3000b\\u3000c\",\n        expected: {\n          interpolation: \"a\\u3000b\\u3000c\",\n          noInterpolation: \"a\\u3000b\\u3000c\",\n        },\n      },\n      {\n        input: \"a\\u3000\",\n        expected: {\n          interpolation: \"a\\u3000\",\n          noInterpolation: \"a\\u3000\",\n        },\n      },\n      {\n        input: \"\\u3000a\",\n        expected: {\n          interpolation: \"\\u3000a\",\n          noInterpolation: \"\\u3000a\",\n        },\n      },\n    ],\n    \"<zero width no-break space> (\\\\uFEFF)\": [\n      {\n        input: \"a\\uFEFFb\",\n        expected: {\n          interpolation: \"a\\uFEFFb\",\n          noInterpolation: \"a\\uFEFFb\",\n        },\n      },\n      {\n        input: \"a\\uFEFFb\\uFEFFc\",\n        expected: {\n          interpolation: \"a\\uFEFFb\\uFEFFc\",\n          noInterpolation: \"a\\uFEFFb\\uFEFFc\",\n        },\n      },\n      {\n        input: \"a\\uFEFF\",\n        expected: {\n          interpolation: \"a\\uFEFF\",\n          noInterpolation: \"a\\uFEFF\",\n        },\n      },\n      {\n        input: \"\\uFEFFa\",\n        expected: {\n          interpolation: \"\\uFEFFa\",\n          noInterpolation: \"\\uFEFFa\",\n        },\n      },\n    ],\n    'single quotes (\"\\'\")': [\n      {\n        input: \"a'b\",\n        expected: {\n          interpolation: \"a\\\\'b\",\n          noInterpolation: \"a'b\",\n          quoted: \"a'\\\\''b\",\n        },\n      },\n      {\n        input: \"a'b'c\",\n        expected: {\n          interpolation: \"a\\\\'b\\\\'c\",\n          noInterpolation: \"a'b'c\",\n          quoted: \"a'\\\\''b'\\\\''c\",\n        },\n      },\n    ],\n    \"double quotes ('\\\"')\": [\n      {\n        input: 'a\"b',\n        expected: { interpolation: 'a\\\\\"b', noInterpolation: 'a\"b' },\n      },\n      {\n        input: 'a\"b\"c',\n        expected: { interpolation: 'a\\\\\"b\\\\\"c', noInterpolation: 'a\"b\"c' },\n      },\n    ],\n    \"backticks (')\": [\n      {\n        input: \"a`b\",\n        expected: { interpolation: \"a\\\\`b\", noInterpolation: \"a`b\" },\n      },\n      {\n        input: \"a`b`c\",\n        expected: { interpolation: \"a\\\\`b\\\\`c\", noInterpolation: \"a`b`c\" },\n      },\n    ],\n    \"tildes ('~')\": [\n      {\n        input: \"~a\",\n        expected: { interpolation: \"\\\\~a\", noInterpolation: \"~a\" },\n      },\n      {\n        input: \"~a~b\",\n        expected: { interpolation: \"\\\\~a~b\", noInterpolation: \"~a~b\" },\n      },\n      {\n        input: \"a~b\",\n        expected: { interpolation: \"a~b\", noInterpolation: \"a~b\" },\n      },\n      {\n        input: \"a~b~c\",\n        expected: { interpolation: \"a~b~c\", noInterpolation: \"a~b~c\" },\n      },\n      {\n        input: \"a~b=\",\n        expected: { interpolation: \"a~b=\", noInterpolation: \"a~b=\" },\n      },\n      {\n        input: \"a=~\",\n        expected: { interpolation: \"a=\\\\~\", noInterpolation: \"a=~\" },\n      },\n      {\n        input: \"a~b=~\",\n        expected: { interpolation: \"a~b=\\\\~\", noInterpolation: \"a~b=~\" },\n      },\n      {\n        input: \"a=b~\",\n        expected: { interpolation: \"a=b~\", noInterpolation: \"a=b~\" },\n      },\n      {\n        input: \"a=~b\",\n        expected: { interpolation: \"a=~b\", noInterpolation: \"a=~b\" },\n      },\n      {\n        input: \"a=:~\",\n        expected: { interpolation: \"a=:\\\\~\", noInterpolation: \"a=:~\" },\n      },\n      {\n        input: \"a=b:~\",\n        expected: { interpolation: \"a=b:\\\\~\", noInterpolation: \"a=b:~\" },\n      },\n      {\n        input: \"a=~:\",\n        expected: { interpolation: \"a=\\\\~:\", noInterpolation: \"a=~:\" },\n      },\n      {\n        input: \"a=~:b\",\n        expected: { interpolation: \"a=\\\\~:b\", noInterpolation: \"a=~:b\" },\n      },\n      {\n        input: \"a=~:~\",\n        expected: { interpolation: \"a=\\\\~:\\\\~\", noInterpolation: \"a=~:~\" },\n      },\n      {\n        input: \"a=~:~:~\",\n        expected: {\n          interpolation: \"a=\\\\~:\\\\~:\\\\~\",\n          noInterpolation: \"a=~:~:~\",\n        },\n      },\n      {\n        input: \"a=:~:\",\n        expected: { interpolation: \"a=:\\\\~:\", noInterpolation: \"a=:~:\" },\n      },\n      {\n        input: \"a=:~:b\",\n        expected: { interpolation: \"a=:\\\\~:b\", noInterpolation: \"a=:~:b\" },\n      },\n      {\n        input: \"a=b:~:\",\n        expected: { interpolation: \"a=b:\\\\~:\", noInterpolation: \"a=b:~:\" },\n      },\n      {\n        input: \"a=:b:~\",\n        expected: { interpolation: \"a=:b:\\\\~\", noInterpolation: \"a=:b:~\" },\n      },\n      {\n        input: \"a=\\r:~:\",\n        expected: { interpolation: \"a=:\\\\~:\", noInterpolation: \"a=:~:\" },\n      },\n      {\n        input: \"a=\\u2028:~:\",\n        expected: {\n          interpolation: \"a=\\u2028:\\\\~:\",\n          noInterpolation: \"a=\\u2028:~:\",\n        },\n      },\n      {\n        input: \"a=\\u2029:~:\",\n        expected: {\n          interpolation: \"a=\\u2029:\\\\~:\",\n          noInterpolation: \"a=\\u2029:~:\",\n        },\n      },\n      {\n        input: \"a=b:~:c\",\n        expected: { interpolation: \"a=b:\\\\~:c\", noInterpolation: \"a=b:~:c\" },\n      },\n      {\n        input: \"a=~=\",\n        expected: { interpolation: \"a=\\\\~=\", noInterpolation: \"a=~=\" },\n      },\n      {\n        input: \"a=~-\",\n        expected: { interpolation: \"a=\\\\~-\", noInterpolation: \"a=~-\" },\n      },\n      {\n        input: \"a=~+\",\n        expected: { interpolation: \"a=\\\\~+\", noInterpolation: \"a=~+\" },\n      },\n      {\n        input: \"a=~/\",\n        expected: { interpolation: \"a=\\\\~/\", noInterpolation: \"a=~/\" },\n      },\n      {\n        input: \"a=~0\",\n        expected: { interpolation: \"a=\\\\~0\", noInterpolation: \"a=~0\" },\n      },\n      {\n        input: \"a=~ \",\n        expected: { interpolation: \"a=\\\\~ \", noInterpolation: \"a=~ \" },\n      },\n      {\n        input: \"a ~b\",\n        expected: { interpolation: \"a \\\\~b\", noInterpolation: \"a ~b\" },\n      },\n      {\n        input: \"a\t~b\",\n        expected: { interpolation: \"a\t\\\\~b\", noInterpolation: \"a\t~b\" },\n      },\n    ],\n    \"hashtags ('#')\": [\n      {\n        input: \"#a\",\n        expected: { interpolation: \"\\\\#a\", noInterpolation: \"#a\" },\n      },\n      {\n        input: \"#a#b\",\n        expected: { interpolation: \"\\\\#a#b\", noInterpolation: \"#a#b\" },\n      },\n      {\n        input: \"a#b\",\n        expected: { interpolation: \"a#b\", noInterpolation: \"a#b\" },\n      },\n      {\n        input: \"a#b#c\",\n        expected: { interpolation: \"a#b#c\", noInterpolation: \"a#b#c\" },\n      },\n      {\n        input: \"a #b\",\n        expected: { interpolation: \"a \\\\#b\", noInterpolation: \"a #b\" },\n      },\n      {\n        input: \"a\t#b\",\n        expected: { interpolation: \"a\t\\\\#b\", noInterpolation: \"a\t#b\" },\n      },\n    ],\n    \"dollar signs ('$')\": [\n      {\n        input: \"a$b\",\n        expected: { interpolation: \"a\\\\$b\", noInterpolation: \"a$b\" },\n      },\n      {\n        input: \"a$b$c\",\n        expected: { interpolation: \"a\\\\$b\\\\$c\", noInterpolation: \"a$b$c\" },\n      },\n    ],\n    \"ampersands ('&')\": [\n      {\n        input: \"a&b\",\n        expected: { interpolation: \"a\\\\&b\", noInterpolation: \"a&b\" },\n      },\n      {\n        input: \"a&b&c\",\n        expected: { interpolation: \"a\\\\&b\\\\&c\", noInterpolation: \"a&b&c\" },\n      },\n    ],\n    \"asterisks ('*')\": [\n      {\n        input: \"a*b\",\n        expected: { interpolation: \"a\\\\*b\", noInterpolation: \"a*b\" },\n      },\n      {\n        input: \"a*b*c\",\n        expected: { interpolation: \"a\\\\*b\\\\*c\", noInterpolation: \"a*b*c\" },\n      },\n    ],\n    \"equals ('=')\": [\n      {\n        input: \"=a\",\n        expected: { interpolation: \"=a\", noInterpolation: \"=a\" },\n      },\n      {\n        input: \"=a=b\",\n        expected: { interpolation: \"=a=b\", noInterpolation: \"=a=b\" },\n      },\n      {\n        input: \"a=b\",\n        expected: { interpolation: \"a=b\", noInterpolation: \"a=b\" },\n      },\n      {\n        input: \"a=b=c\",\n        expected: { interpolation: \"a=b=c\", noInterpolation: \"a=b=c\" },\n      },\n    ],\n    \"backslashes ('\\\\')\": [\n      {\n        input: \"a\\\\b\",\n        expected: { interpolation: \"a\\\\\\\\b\", noInterpolation: \"a\\\\b\" },\n      },\n      {\n        input: \"a\\\\b\\\\c\",\n        expected: { interpolation: \"a\\\\\\\\b\\\\\\\\c\", noInterpolation: \"a\\\\b\\\\c\" },\n      },\n    ],\n    \"pipes ('|')\": [\n      {\n        input: \"a|b\",\n        expected: { interpolation: \"a\\\\|b\", noInterpolation: \"a|b\" },\n      },\n      {\n        input: \"a|b|c\",\n        expected: { interpolation: \"a\\\\|b\\\\|c\", noInterpolation: \"a|b|c\" },\n      },\n    ],\n    \"semicolons (';')\": [\n      {\n        input: \"a;b\",\n        expected: { interpolation: \"a\\\\;b\", noInterpolation: \"a;b\" },\n      },\n      {\n        input: \"a;b;c\",\n        expected: { interpolation: \"a\\\\;b\\\\;c\", noInterpolation: \"a;b;c\" },\n      },\n    ],\n    \"question marks ('?')\": [\n      {\n        input: \"a?b\",\n        expected: { interpolation: \"a\\\\?b\", noInterpolation: \"a?b\" },\n      },\n      {\n        input: \"a?b?c\",\n        expected: { interpolation: \"a\\\\?b\\\\?c\", noInterpolation: \"a?b?c\" },\n      },\n    ],\n    \"parentheses ('(', ')')\": [\n      {\n        input: \"a(b\",\n        expected: { interpolation: \"a\\\\(b\", noInterpolation: \"a(b\" },\n      },\n      {\n        input: \"a)b\",\n        expected: { interpolation: \"a\\\\)b\", noInterpolation: \"a)b\" },\n      },\n      {\n        input: \"a(b(c\",\n        expected: { interpolation: \"a\\\\(b\\\\(c\", noInterpolation: \"a(b(c\" },\n      },\n      {\n        input: \"a)b)c\",\n        expected: { interpolation: \"a\\\\)b\\\\)c\", noInterpolation: \"a)b)c\" },\n      },\n      {\n        input: \"a(b)c\",\n        expected: { interpolation: \"a\\\\(b\\\\)c\", noInterpolation: \"a(b)c\" },\n      },\n      {\n        input: \"a(b,c)d\",\n        expected: { interpolation: \"a\\\\(b,c\\\\)d\", noInterpolation: \"a(b,c)d\" },\n      },\n    ],\n    \"square brackets ('[', ']')\": [\n      {\n        input: \"a[b\",\n        expected: { interpolation: \"a[b\", noInterpolation: \"a[b\" },\n      },\n      {\n        input: \"a]b\",\n        expected: { interpolation: \"a]b\", noInterpolation: \"a]b\" },\n      },\n      {\n        input: \"a[b[c\",\n        expected: { interpolation: \"a[b[c\", noInterpolation: \"a[b[c\" },\n      },\n      {\n        input: \"a]b]c\",\n        expected: { interpolation: \"a]b]c\", noInterpolation: \"a]b]c\" },\n      },\n      {\n        input: \"a[b]c\",\n        expected: { interpolation: \"a[b]c\", noInterpolation: \"a[b]c\" },\n      },\n      {\n        input: \"a[b,c]d\",\n        expected: { interpolation: \"a[b,c]d\", noInterpolation: \"a[b,c]d\" },\n      },\n    ],\n    \"curly brackets ('{', '}')\": [\n      {\n        input: \"a{b\",\n        expected: { interpolation: \"a{b\", noInterpolation: \"a{b\" },\n      },\n      {\n        input: \"a}b\",\n        expected: { interpolation: \"a}b\", noInterpolation: \"a}b\" },\n      },\n      {\n        input: \"a{b{c\",\n        expected: { interpolation: \"a{b{c\", noInterpolation: \"a{b{c\" },\n      },\n      {\n        input: \"a}b}c\",\n        expected: { interpolation: \"a}b}c\", noInterpolation: \"a}b}c\" },\n      },\n      {\n        input: \"a{b}c\",\n        expected: { interpolation: \"a{b}c\", noInterpolation: \"a{b}c\" },\n      },\n      {\n        input: \"a{b,c}d\",\n        expected: { interpolation: \"a\\\\{b,c}d\", noInterpolation: \"a{b,c}d\" },\n      },\n      {\n        input: \"a{,b}c\",\n        expected: { interpolation: \"a\\\\{,b}c\", noInterpolation: \"a{,b}c\" },\n      },\n      {\n        input: \"a{b,}c\",\n        expected: { interpolation: \"a\\\\{b,}c\", noInterpolation: \"a{b,}c\" },\n      },\n      {\n        input: \"a{bc,de}f\",\n        expected: {\n          interpolation: \"a\\\\{bc,de}f\",\n          noInterpolation: \"a{bc,de}f\",\n        },\n      },\n      {\n        input: \"a{b,{c,d},e}f\",\n        expected: {\n          interpolation: \"a\\\\{b,\\\\{c,d},e}f\",\n          noInterpolation: \"a{b,{c,d},e}f\",\n        },\n      },\n      {\n        input: \"a{0..2}b\",\n        expected: { interpolation: \"a\\\\{0..2}b\", noInterpolation: \"a{0..2}b\" },\n      },\n      {\n        input: \"a{\\u000Db,c}d\",\n        expected: {\n          interpolation: \"a\\\\{b,c}d\",\n          noInterpolation: \"a{b,c}d\",\n        },\n      },\n      {\n        input: \"a{\\u2028b,c}d\",\n        expected: {\n          interpolation: \"a\\\\{\\u2028b,c}d\",\n          noInterpolation: \"a{\\u2028b,c}d\",\n        },\n      },\n      {\n        input: \"a{\\u2029b,c}d\",\n        expected: {\n          interpolation: \"a\\\\{\\u2029b,c}d\",\n          noInterpolation: \"a{\\u2029b,c}d\",\n        },\n      },\n      {\n        input: \"a{b,c\\u000D}d\",\n        expected: {\n          interpolation: \"a\\\\{b,c}d\",\n          noInterpolation: \"a{b,c}d\",\n        },\n      },\n      {\n        input: \"a{b,c\\u2028}d\",\n        expected: {\n          interpolation: \"a\\\\{b,c\\u2028}d\",\n          noInterpolation: \"a{b,c\\u2028}d\",\n        },\n      },\n      {\n        input: \"a{b,c\\u2029}d\",\n        expected: {\n          interpolation: \"a\\\\{b,c\\u2029}d\",\n          noInterpolation: \"a{b,c\\u2029}d\",\n        },\n      },\n      {\n        input: \"a{\\u000D0..2}b\",\n        expected: {\n          interpolation: \"a\\\\{0..2}b\",\n          noInterpolation: \"a{0..2}b\",\n        },\n      },\n      {\n        input: \"a{\\u20280..2}b\",\n        expected: {\n          interpolation: \"a\\\\{\\u20280..2}b\",\n          noInterpolation: \"a{\\u20280..2}b\",\n        },\n      },\n      {\n        input: \"a{\\u20290..2}b\",\n        expected: {\n          interpolation: \"a\\\\{\\u20290..2}b\",\n          noInterpolation: \"a{\\u20290..2}b\",\n        },\n      },\n      {\n        input: \"a{0..2\\u000D}b\",\n        expected: {\n          interpolation: \"a\\\\{0..2}b\",\n          noInterpolation: \"a{0..2}b\",\n        },\n      },\n      {\n        input: \"a{0..2\\u2028}b\",\n        expected: {\n          interpolation: \"a\\\\{0..2\\u2028}b\",\n          noInterpolation: \"a{0..2\\u2028}b\",\n        },\n      },\n      {\n        input: \"a{0..2\\u2029}b\",\n        expected: {\n          interpolation: \"a\\\\{0..2\\u2029}b\",\n          noInterpolation: \"a{0..2\\u2029}b\",\n        },\n      },\n      {\n        input: \"a{{b,c}\",\n        expected: { interpolation: \"a\\\\{\\\\{b,c}\", noInterpolation: \"a{{b,c}\" },\n      },\n      {\n        input: \"a{b{c,d}\",\n        expected: {\n          interpolation: \"a\\\\{b\\\\{c,d}\",\n          noInterpolation: \"a{b{c,d}\",\n        },\n      },\n    ],\n    \"angle brackets ('<', '>')\": [\n      {\n        input: \"a<b\",\n        expected: { interpolation: \"a\\\\<b\", noInterpolation: \"a<b\" },\n      },\n      {\n        input: \"a>b\",\n        expected: { interpolation: \"a\\\\>b\", noInterpolation: \"a>b\" },\n      },\n      {\n        input: \"a<b<c\",\n        expected: { interpolation: \"a\\\\<b\\\\<c\", noInterpolation: \"a<b<c\" },\n      },\n      {\n        input: \"a>b>c\",\n        expected: { interpolation: \"a\\\\>b\\\\>c\", noInterpolation: \"a>b>c\" },\n      },\n      {\n        input: \"a<b>c\",\n        expected: { interpolation: \"a\\\\<b\\\\>c\", noInterpolation: \"a<b>c\" },\n      },\n    ],\n  },\n  [binDash]: {\n    \"sample strings\": [\n      {\n        input: \"foobar\",\n        expected: { interpolation: \"foobar\", noInterpolation: \"foobar\" },\n      },\n      {\n        input: \"Hello world\",\n        expected: {\n          interpolation: \"Hello world\",\n          noInterpolation: \"Hello world\",\n        },\n      },\n    ],\n    \"<null> (\\\\0)\": [\n      {\n        input: \"a\\x00b\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\x00b\\x00c\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n    ],\n    \"<backspace> ('\\\\b')\": [\n      {\n        input: \"a\\bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\bb\\bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\b\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<character tabulation> (\\\\t)\": [\n      {\n        input: \"a\\tb\",\n        expected: { interpolation: \"a\\tb\", noInterpolation: \"a\\tb\" },\n      },\n      {\n        input: \"a\\tb\\tc\",\n        expected: { interpolation: \"a\\tb\\tc\", noInterpolation: \"a\\tb\\tc\" },\n      },\n      {\n        input: \"a\\t\",\n        expected: { interpolation: \"a\\t\", noInterpolation: \"a\\t\" },\n      },\n      {\n        input: \"\\ta\",\n        expected: { interpolation: \"\\ta\", noInterpolation: \"\\ta\" },\n      },\n    ],\n    \"<end of line> ('\\\\n')\": [\n      {\n        input: \"a\\nb\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a\\nb\" },\n      },\n      {\n        input: \"a\\nb\\nc\",\n        expected: { interpolation: \"a b c\", noInterpolation: \"a\\nb\\nc\" },\n      },\n      {\n        input: \"a\\n\",\n        expected: { interpolation: \"a \", noInterpolation: \"a\\n\" },\n      },\n      {\n        input: \"\\na\",\n        expected: { interpolation: \" a\", noInterpolation: \"\\na\" },\n      },\n    ],\n    \"<line tabulation> (\\\\v)\": [\n      {\n        input: \"a\\vb\",\n        expected: { interpolation: \"a\\vb\", noInterpolation: \"a\\vb\" },\n      },\n      {\n        input: \"a\\vb\\vc\",\n        expected: { interpolation: \"a\\vb\\vc\", noInterpolation: \"a\\vb\\vc\" },\n      },\n      {\n        input: \"a\\v\",\n        expected: { interpolation: \"a\\v\", noInterpolation: \"a\\v\" },\n      },\n      {\n        input: \"\\va\",\n        expected: { interpolation: \"\\va\", noInterpolation: \"\\va\" },\n      },\n    ],\n    \"<form feed> (\\\\f)\": [\n      {\n        input: \"a\\fb\",\n        expected: { interpolation: \"a\\fb\", noInterpolation: \"a\\fb\" },\n      },\n      {\n        input: \"a\\fb\\fc\",\n        expected: { interpolation: \"a\\fb\\fc\", noInterpolation: \"a\\fb\\fc\" },\n      },\n      {\n        input: \"a\\f\",\n        expected: { interpolation: \"a\\f\", noInterpolation: \"a\\f\" },\n      },\n      {\n        input: \"\\fa\",\n        expected: { interpolation: \"\\fa\", noInterpolation: \"\\fa\" },\n      },\n    ],\n    \"<carriage return> ('\\\\r')\": [\n      {\n        input: \"a\\rb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\rb\\rc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\ra\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\r\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\r\\nb\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a\\r\\nb\" },\n      },\n    ],\n    \"<escape> ('\\\\u001B')\": [\n      {\n        input: \"a\\u001Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u001Bb\\u001Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u001Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u001B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<space> (' ')\": [\n      {\n        input: \"a b\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a b\" },\n      },\n      {\n        input: \"a b c\",\n        expected: { interpolation: \"a b c\", noInterpolation: \"a b c\" },\n      },\n      {\n        input: \"a \",\n        expected: { interpolation: \"a \", noInterpolation: \"a \" },\n      },\n      {\n        input: \" a\",\n        expected: { interpolation: \" a\", noInterpolation: \" a\" },\n      },\n    ],\n    \"<next line> (\\\\u0085)\": [\n      {\n        input: \"a\\u0085b\",\n        expected: {\n          interpolation: \"a\\u0085b\",\n          noInterpolation: \"a\\u0085b\",\n        },\n      },\n      {\n        input: \"a\\u0085b\\u0085c\",\n        expected: {\n          interpolation: \"a\\u0085b\\u0085c\",\n          noInterpolation: \"a\\u0085b\\u0085c\",\n        },\n      },\n      {\n        input: \"a\\u0085\",\n        expected: {\n          interpolation: \"a\\u0085\",\n          noInterpolation: \"a\\u0085\",\n        },\n      },\n      {\n        input: \"\\u0085a\",\n        expected: {\n          interpolation: \"\\u0085a\",\n          noInterpolation: \"\\u0085a\",\n        },\n      },\n    ],\n    \"<control sequence introducer> ('\\\\u009B')\": [\n      {\n        input: \"a\\u009Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u009Bb\\u009Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u009Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u009B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<no break space> (\\\\u00A0)\": [\n      {\n        input: \"a\\u00A0b\",\n        expected: {\n          interpolation: \"a\\u00A0b\",\n          noInterpolation: \"a\\u00A0b\",\n        },\n      },\n      {\n        input: \"a\\u00A0b\\u00A0c\",\n        expected: {\n          interpolation: \"a\\u00A0b\\u00A0c\",\n          noInterpolation: \"a\\u00A0b\\u00A0c\",\n        },\n      },\n      {\n        input: \"a\\u00A0\",\n        expected: {\n          interpolation: \"a\\u00A0\",\n          noInterpolation: \"a\\u00A0\",\n        },\n      },\n      {\n        input: \"\\u00A0a\",\n        expected: {\n          interpolation: \"\\u00A0a\",\n          noInterpolation: \"\\u00A0a\",\n        },\n      },\n    ],\n    \"<en quad> (\\\\u2000)\": [\n      {\n        input: \"a\\u2000b\",\n        expected: {\n          interpolation: \"a\\u2000b\",\n          noInterpolation: \"a\\u2000b\",\n        },\n      },\n      {\n        input: \"a\\u2000b\\u2000c\",\n        expected: {\n          interpolation: \"a\\u2000b\\u2000c\",\n          noInterpolation: \"a\\u2000b\\u2000c\",\n        },\n      },\n      {\n        input: \"a\\u2000\",\n        expected: {\n          interpolation: \"a\\u2000\",\n          noInterpolation: \"a\\u2000\",\n        },\n      },\n      {\n        input: \"\\u2000a\",\n        expected: {\n          interpolation: \"\\u2000a\",\n          noInterpolation: \"\\u2000a\",\n        },\n      },\n    ],\n    \"<em quad> (\\\\u2001)\": [\n      {\n        input: \"a\\u2001b\",\n        expected: {\n          interpolation: \"a\\u2001b\",\n          noInterpolation: \"a\\u2001b\",\n        },\n      },\n      {\n        input: \"a\\u2001b\\u2001c\",\n        expected: {\n          interpolation: \"a\\u2001b\\u2001c\",\n          noInterpolation: \"a\\u2001b\\u2001c\",\n        },\n      },\n      {\n        input: \"a\\u2001\",\n        expected: {\n          interpolation: \"a\\u2001\",\n          noInterpolation: \"a\\u2001\",\n        },\n      },\n      {\n        input: \"\\u2001a\",\n        expected: {\n          interpolation: \"\\u2001a\",\n          noInterpolation: \"\\u2001a\",\n        },\n      },\n    ],\n    \"<en space> (\\\\u2002)\": [\n      {\n        input: \"a\\u2002b\",\n        expected: {\n          interpolation: \"a\\u2002b\",\n          noInterpolation: \"a\\u2002b\",\n        },\n      },\n      {\n        input: \"a\\u2002b\\u2002c\",\n        expected: {\n          interpolation: \"a\\u2002b\\u2002c\",\n          noInterpolation: \"a\\u2002b\\u2002c\",\n        },\n      },\n      {\n        input: \"a\\u2002\",\n        expected: {\n          interpolation: \"a\\u2002\",\n          noInterpolation: \"a\\u2002\",\n        },\n      },\n      {\n        input: \"\\u2002a\",\n        expected: {\n          interpolation: \"\\u2002a\",\n          noInterpolation: \"\\u2002a\",\n        },\n      },\n    ],\n    \"<em space> (\\\\u2003)\": [\n      {\n        input: \"a\\u2003b\",\n        expected: {\n          interpolation: \"a\\u2003b\",\n          noInterpolation: \"a\\u2003b\",\n        },\n      },\n      {\n        input: \"a\\u2003b\\u2003c\",\n        expected: {\n          interpolation: \"a\\u2003b\\u2003c\",\n          noInterpolation: \"a\\u2003b\\u2003c\",\n        },\n      },\n      {\n        input: \"a\\u2003\",\n        expected: {\n          interpolation: \"a\\u2003\",\n          noInterpolation: \"a\\u2003\",\n        },\n      },\n      {\n        input: \"\\u2003a\",\n        expected: {\n          interpolation: \"\\u2003a\",\n          noInterpolation: \"\\u2003a\",\n        },\n      },\n    ],\n    \"<three-per-em space> (\\\\u2004)\": [\n      {\n        input: \"a\\u2004b\",\n        expected: {\n          interpolation: \"a\\u2004b\",\n          noInterpolation: \"a\\u2004b\",\n        },\n      },\n      {\n        input: \"a\\u2004b\\u2004c\",\n        expected: {\n          interpolation: \"a\\u2004b\\u2004c\",\n          noInterpolation: \"a\\u2004b\\u2004c\",\n        },\n      },\n      {\n        input: \"a\\u2004\",\n        expected: {\n          interpolation: \"a\\u2004\",\n          noInterpolation: \"a\\u2004\",\n        },\n      },\n      {\n        input: \"\\u2004a\",\n        expected: {\n          interpolation: \"\\u2004a\",\n          noInterpolation: \"\\u2004a\",\n        },\n      },\n    ],\n    \"<four-per-em space> (\\\\u2005)\": [\n      {\n        input: \"a\\u2005b\",\n        expected: {\n          interpolation: \"a\\u2005b\",\n          noInterpolation: \"a\\u2005b\",\n        },\n      },\n      {\n        input: \"a\\u2005b\\u2005c\",\n        expected: {\n          interpolation: \"a\\u2005b\\u2005c\",\n          noInterpolation: \"a\\u2005b\\u2005c\",\n        },\n      },\n      {\n        input: \"a\\u2005\",\n        expected: {\n          interpolation: \"a\\u2005\",\n          noInterpolation: \"a\\u2005\",\n        },\n      },\n      {\n        input: \"\\u2005a\",\n        expected: {\n          interpolation: \"\\u2005a\",\n          noInterpolation: \"\\u2005a\",\n        },\n      },\n    ],\n    \"<six-per-em space> (\\\\u2006)\": [\n      {\n        input: \"a\\u2006b\",\n        expected: {\n          interpolation: \"a\\u2006b\",\n          noInterpolation: \"a\\u2006b\",\n        },\n      },\n      {\n        input: \"a\\u2006b\\u2006c\",\n        expected: {\n          interpolation: \"a\\u2006b\\u2006c\",\n          noInterpolation: \"a\\u2006b\\u2006c\",\n        },\n      },\n      {\n        input: \"a\\u2006\",\n        expected: {\n          interpolation: \"a\\u2006\",\n          noInterpolation: \"a\\u2006\",\n        },\n      },\n      {\n        input: \"\\u2006a\",\n        expected: {\n          interpolation: \"\\u2006a\",\n          noInterpolation: \"\\u2006a\",\n        },\n      },\n    ],\n    \"<figure space> (\\\\u2007)\": [\n      {\n        input: \"a\\u2007b\",\n        expected: {\n          interpolation: \"a\\u2007b\",\n          noInterpolation: \"a\\u2007b\",\n        },\n      },\n      {\n        input: \"a\\u2007b\\u2007c\",\n        expected: {\n          interpolation: \"a\\u2007b\\u2007c\",\n          noInterpolation: \"a\\u2007b\\u2007c\",\n        },\n      },\n      {\n        input: \"a\\u2007\",\n        expected: {\n          interpolation: \"a\\u2007\",\n          noInterpolation: \"a\\u2007\",\n        },\n      },\n      {\n        input: \"\\u2007a\",\n        expected: {\n          interpolation: \"\\u2007a\",\n          noInterpolation: \"\\u2007a\",\n        },\n      },\n    ],\n    \"<punctuation space> (\\\\u2008)\": [\n      {\n        input: \"a\\u2008b\",\n        expected: {\n          interpolation: \"a\\u2008b\",\n          noInterpolation: \"a\\u2008b\",\n        },\n      },\n      {\n        input: \"a\\u2008b\\u2008c\",\n        expected: {\n          interpolation: \"a\\u2008b\\u2008c\",\n          noInterpolation: \"a\\u2008b\\u2008c\",\n        },\n      },\n      {\n        input: \"a\\u2008\",\n        expected: {\n          interpolation: \"a\\u2008\",\n          noInterpolation: \"a\\u2008\",\n        },\n      },\n      {\n        input: \"\\u2008a\",\n        expected: {\n          interpolation: \"\\u2008a\",\n          noInterpolation: \"\\u2008a\",\n        },\n      },\n    ],\n    \"<thin space> (\\\\u2009)\": [\n      {\n        input: \"a\\u2009b\",\n        expected: {\n          interpolation: \"a\\u2009b\",\n          noInterpolation: \"a\\u2009b\",\n        },\n      },\n      {\n        input: \"a\\u2009b\\u2009c\",\n        expected: {\n          interpolation: \"a\\u2009b\\u2009c\",\n          noInterpolation: \"a\\u2009b\\u2009c\",\n        },\n      },\n      {\n        input: \"a\\u2009\",\n        expected: {\n          interpolation: \"a\\u2009\",\n          noInterpolation: \"a\\u2009\",\n        },\n      },\n      {\n        input: \"\\u2009a\",\n        expected: {\n          interpolation: \"\\u2009a\",\n          noInterpolation: \"\\u2009a\",\n        },\n      },\n    ],\n    \"<hair space> (\\\\u200A)\": [\n      {\n        input: \"a\\u200Ab\",\n        expected: {\n          interpolation: \"a\\u200Ab\",\n          noInterpolation: \"a\\u200Ab\",\n        },\n      },\n      {\n        input: \"a\\u200Ab\\u200Ac\",\n        expected: {\n          interpolation: \"a\\u200Ab\\u200Ac\",\n          noInterpolation: \"a\\u200Ab\\u200Ac\",\n        },\n      },\n      {\n        input: \"a\\u200A\",\n        expected: {\n          interpolation: \"a\\u200A\",\n          noInterpolation: \"a\\u200A\",\n        },\n      },\n      {\n        input: \"\\u200Aa\",\n        expected: {\n          interpolation: \"\\u200Aa\",\n          noInterpolation: \"\\u200Aa\",\n        },\n      },\n    ],\n    \"<line separator> (\\\\u2028)\": [\n      {\n        input: \"a\\u2028b\",\n        expected: {\n          interpolation: \"a\\u2028b\",\n          noInterpolation: \"a\\u2028b\",\n        },\n      },\n      {\n        input: \"a\\u2028b\\u2028c\",\n        expected: {\n          interpolation: \"a\\u2028b\\u2028c\",\n          noInterpolation: \"a\\u2028b\\u2028c\",\n        },\n      },\n      {\n        input: \"a\\u2028\",\n        expected: {\n          interpolation: \"a\\u2028\",\n          noInterpolation: \"a\\u2028\",\n        },\n      },\n      {\n        input: \"\\u2028a\",\n        expected: {\n          interpolation: \"\\u2028a\",\n          noInterpolation: \"\\u2028a\",\n        },\n      },\n    ],\n    \"<paragraph separator> (\\\\u2029)\": [\n      {\n        input: \"a\\u2029b\",\n        expected: {\n          interpolation: \"a\\u2029b\",\n          noInterpolation: \"a\\u2029b\",\n        },\n      },\n      {\n        input: \"a\\u2029b\\u2029c\",\n        expected: {\n          interpolation: \"a\\u2029b\\u2029c\",\n          noInterpolation: \"a\\u2029b\\u2029c\",\n        },\n      },\n      {\n        input: \"a\\u2029\",\n        expected: {\n          interpolation: \"a\\u2029\",\n          noInterpolation: \"a\\u2029\",\n        },\n      },\n      {\n        input: \"\\u2029a\",\n        expected: {\n          interpolation: \"\\u2029a\",\n          noInterpolation: \"\\u2029a\",\n        },\n      },\n    ],\n    \"<narrow no-break space> (\\\\u202F)\": [\n      {\n        input: \"a\\u202Fb\",\n        expected: {\n          interpolation: \"a\\u202Fb\",\n          noInterpolation: \"a\\u202Fb\",\n        },\n      },\n      {\n        input: \"a\\u202Fb\\u202Fc\",\n        expected: {\n          interpolation: \"a\\u202Fb\\u202Fc\",\n          noInterpolation: \"a\\u202Fb\\u202Fc\",\n        },\n      },\n      {\n        input: \"a\\u202F\",\n        expected: {\n          interpolation: \"a\\u202F\",\n          noInterpolation: \"a\\u202F\",\n        },\n      },\n      {\n        input: \"\\u202Fa\",\n        expected: {\n          interpolation: \"\\u202Fa\",\n          noInterpolation: \"\\u202Fa\",\n        },\n      },\n    ],\n    \"<medium mathematical space> (\\\\u205F)\": [\n      {\n        input: \"a\\u205Fb\",\n        expected: {\n          interpolation: \"a\\u205Fb\",\n          noInterpolation: \"a\\u205Fb\",\n        },\n      },\n      {\n        input: \"a\\u205Fb\\u205Fc\",\n        expected: {\n          interpolation: \"a\\u205Fb\\u205Fc\",\n          noInterpolation: \"a\\u205Fb\\u205Fc\",\n        },\n      },\n      {\n        input: \"a\\u205F\",\n        expected: {\n          interpolation: \"a\\u205F\",\n          noInterpolation: \"a\\u205F\",\n        },\n      },\n      {\n        input: \"\\u205Fa\",\n        expected: {\n          interpolation: \"\\u205Fa\",\n          noInterpolation: \"\\u205Fa\",\n        },\n      },\n    ],\n    \"<ideographic space> (\\\\u3000)\": [\n      {\n        input: \"a\\u3000b\",\n        expected: {\n          interpolation: \"a\\u3000b\",\n          noInterpolation: \"a\\u3000b\",\n        },\n      },\n      {\n        input: \"a\\u3000b\\u3000c\",\n        expected: {\n          interpolation: \"a\\u3000b\\u3000c\",\n          noInterpolation: \"a\\u3000b\\u3000c\",\n        },\n      },\n      {\n        input: \"a\\u3000\",\n        expected: {\n          interpolation: \"a\\u3000\",\n          noInterpolation: \"a\\u3000\",\n        },\n      },\n      {\n        input: \"\\u3000a\",\n        expected: {\n          interpolation: \"\\u3000a\",\n          noInterpolation: \"\\u3000a\",\n        },\n      },\n    ],\n    \"<zero width no-break space> (\\\\uFEFF)\": [\n      {\n        input: \"a\\uFEFFb\",\n        expected: {\n          interpolation: \"a\\uFEFFb\",\n          noInterpolation: \"a\\uFEFFb\",\n        },\n      },\n      {\n        input: \"a\\uFEFFb\\uFEFFc\",\n        expected: {\n          interpolation: \"a\\uFEFFb\\uFEFFc\",\n          noInterpolation: \"a\\uFEFFb\\uFEFFc\",\n        },\n      },\n      {\n        input: \"a\\uFEFF\",\n        expected: {\n          interpolation: \"a\\uFEFF\",\n          noInterpolation: \"a\\uFEFF\",\n        },\n      },\n      {\n        input: \"\\uFEFFa\",\n        expected: {\n          interpolation: \"\\uFEFFa\",\n          noInterpolation: \"\\uFEFFa\",\n        },\n      },\n    ],\n    'single quotes (\"\\'\")': [\n      {\n        input: \"a'b\",\n        expected: {\n          interpolation: \"a\\\\'b\",\n          noInterpolation: \"a'b\",\n          quoted: \"a'\\\\''b\",\n        },\n      },\n      {\n        input: \"a'b'c\",\n        expected: {\n          interpolation: \"a\\\\'b\\\\'c\",\n          noInterpolation: \"a'b'c\",\n          quoted: \"a'\\\\''b'\\\\''c\",\n        },\n      },\n    ],\n    \"double quotes ('\\\"')\": [\n      {\n        input: 'a\"b',\n        expected: { interpolation: 'a\\\\\"b', noInterpolation: 'a\"b' },\n      },\n      {\n        input: 'a\"b\"c',\n        expected: { interpolation: 'a\\\\\"b\\\\\"c', noInterpolation: 'a\"b\"c' },\n      },\n    ],\n    \"backticks (')\": [\n      {\n        input: \"a`b\",\n        expected: { interpolation: \"a\\\\`b\", noInterpolation: \"a`b\" },\n      },\n      {\n        input: \"a`b`c\",\n        expected: { interpolation: \"a\\\\`b\\\\`c\", noInterpolation: \"a`b`c\" },\n      },\n    ],\n    \"tildes ('~')\": [\n      {\n        input: \"~a\",\n        expected: { interpolation: \"\\\\~a\", noInterpolation: \"~a\" },\n      },\n      {\n        input: \"~a~b\",\n        expected: { interpolation: \"\\\\~a~b\", noInterpolation: \"~a~b\" },\n      },\n      {\n        input: \"a~b\",\n        expected: { interpolation: \"a~b\", noInterpolation: \"a~b\" },\n      },\n      {\n        input: \"a~b~c\",\n        expected: { interpolation: \"a~b~c\", noInterpolation: \"a~b~c\" },\n      },\n      {\n        input: \"a~b=\",\n        expected: { interpolation: \"a~b=\", noInterpolation: \"a~b=\" },\n      },\n      {\n        input: \"a=~\",\n        expected: { interpolation: \"a=~\", noInterpolation: \"a=~\" },\n      },\n      {\n        input: \"a~b=~\",\n        expected: { interpolation: \"a~b=~\", noInterpolation: \"a~b=~\" },\n      },\n      {\n        input: \"a=b~\",\n        expected: { interpolation: \"a=b~\", noInterpolation: \"a=b~\" },\n      },\n      {\n        input: \"a=~b\",\n        expected: { interpolation: \"a=~b\", noInterpolation: \"a=~b\" },\n      },\n      {\n        input: \"a=:~\",\n        expected: { interpolation: \"a=:~\", noInterpolation: \"a=:~\" },\n      },\n      {\n        input: \"a=b:~\",\n        expected: { interpolation: \"a=b:~\", noInterpolation: \"a=b:~\" },\n      },\n      {\n        input: \"a=~:\",\n        expected: { interpolation: \"a=~:\", noInterpolation: \"a=~:\" },\n      },\n      {\n        input: \"a=~:b\",\n        expected: { interpolation: \"a=~:b\", noInterpolation: \"a=~:b\" },\n      },\n      {\n        input: \"a=~:~\",\n        expected: { interpolation: \"a=~:~\", noInterpolation: \"a=~:~\" },\n      },\n      {\n        input: \"a=:~:\",\n        expected: { interpolation: \"a=:~:\", noInterpolation: \"a=:~:\" },\n      },\n      {\n        input: \"a=:~:b\",\n        expected: { interpolation: \"a=:~:b\", noInterpolation: \"a=:~:b\" },\n      },\n      {\n        input: \"a=b:~:\",\n        expected: { interpolation: \"a=b:~:\", noInterpolation: \"a=b:~:\" },\n      },\n      {\n        input: \"a=b:~:c\",\n        expected: { interpolation: \"a=b:~:c\", noInterpolation: \"a=b:~:c\" },\n      },\n      {\n        input: \"a=~=\",\n        expected: { interpolation: \"a=~=\", noInterpolation: \"a=~=\" },\n      },\n      {\n        input: \"a=~-\",\n        expected: { interpolation: \"a=~-\", noInterpolation: \"a=~-\" },\n      },\n      {\n        input: \"a=~+\",\n        expected: { interpolation: \"a=~+\", noInterpolation: \"a=~+\" },\n      },\n      {\n        input: \"a=~/\",\n        expected: { interpolation: \"a=~/\", noInterpolation: \"a=~/\" },\n      },\n      {\n        input: \"a=~0\",\n        expected: { interpolation: \"a=~0\", noInterpolation: \"a=~0\" },\n      },\n      {\n        input: \"a=~ \",\n        expected: { interpolation: \"a=~ \", noInterpolation: \"a=~ \" },\n      },\n      {\n        input: \"a ~b\",\n        expected: { interpolation: \"a \\\\~b\", noInterpolation: \"a ~b\" },\n      },\n      {\n        input: \"a\t~b\",\n        expected: { interpolation: \"a\t\\\\~b\", noInterpolation: \"a\t~b\" },\n      },\n    ],\n    \"hashtags ('#')\": [\n      {\n        input: \"#a\",\n        expected: { interpolation: \"\\\\#a\", noInterpolation: \"#a\" },\n      },\n      {\n        input: \"#a#b\",\n        expected: { interpolation: \"\\\\#a#b\", noInterpolation: \"#a#b\" },\n      },\n      {\n        input: \"a#b\",\n        expected: { interpolation: \"a#b\", noInterpolation: \"a#b\" },\n      },\n      {\n        input: \"a#b#c\",\n        expected: { interpolation: \"a#b#c\", noInterpolation: \"a#b#c\" },\n      },\n      {\n        input: \"a #b\",\n        expected: { interpolation: \"a \\\\#b\", noInterpolation: \"a #b\" },\n      },\n      {\n        input: \"a\t#b\",\n        expected: { interpolation: \"a\t\\\\#b\", noInterpolation: \"a\t#b\" },\n      },\n    ],\n    \"dollar signs ('$')\": [\n      {\n        input: \"a$b\",\n        expected: { interpolation: \"a\\\\$b\", noInterpolation: \"a$b\" },\n      },\n      {\n        input: \"a$b$c\",\n        expected: { interpolation: \"a\\\\$b\\\\$c\", noInterpolation: \"a$b$c\" },\n      },\n    ],\n    \"ampersands ('&')\": [\n      {\n        input: \"a&b\",\n        expected: { interpolation: \"a\\\\&b\", noInterpolation: \"a&b\" },\n      },\n      {\n        input: \"a&b&c\",\n        expected: { interpolation: \"a\\\\&b\\\\&c\", noInterpolation: \"a&b&c\" },\n      },\n    ],\n    \"asterisks ('*')\": [\n      {\n        input: \"a*b\",\n        expected: { interpolation: \"a\\\\*b\", noInterpolation: \"a*b\" },\n      },\n      {\n        input: \"a*b*c\",\n        expected: { interpolation: \"a\\\\*b\\\\*c\", noInterpolation: \"a*b*c\" },\n      },\n    ],\n    \"equals ('=')\": [\n      {\n        input: \"=a\",\n        expected: { interpolation: \"=a\", noInterpolation: \"=a\" },\n      },\n      {\n        input: \"=a=b\",\n        expected: { interpolation: \"=a=b\", noInterpolation: \"=a=b\" },\n      },\n      {\n        input: \"a=b\",\n        expected: { interpolation: \"a=b\", noInterpolation: \"a=b\" },\n      },\n      {\n        input: \"a=b=c\",\n        expected: { interpolation: \"a=b=c\", noInterpolation: \"a=b=c\" },\n      },\n    ],\n    \"backslashes ('\\\\')\": [\n      {\n        input: \"a\\\\b\",\n        expected: { interpolation: \"a\\\\\\\\b\", noInterpolation: \"a\\\\b\" },\n      },\n      {\n        input: \"a\\\\b\\\\c\",\n        expected: { interpolation: \"a\\\\\\\\b\\\\\\\\c\", noInterpolation: \"a\\\\b\\\\c\" },\n      },\n    ],\n    \"pipes ('|')\": [\n      {\n        input: \"a|b\",\n        expected: { interpolation: \"a\\\\|b\", noInterpolation: \"a|b\" },\n      },\n      {\n        input: \"a|b|c\",\n        expected: { interpolation: \"a\\\\|b\\\\|c\", noInterpolation: \"a|b|c\" },\n      },\n    ],\n    \"semicolons (';')\": [\n      {\n        input: \"a;b\",\n        expected: { interpolation: \"a\\\\;b\", noInterpolation: \"a;b\" },\n      },\n      {\n        input: \"a;b;c\",\n        expected: { interpolation: \"a\\\\;b\\\\;c\", noInterpolation: \"a;b;c\" },\n      },\n    ],\n    \"question marks ('?')\": [\n      {\n        input: \"a?b\",\n        expected: { interpolation: \"a\\\\?b\", noInterpolation: \"a?b\" },\n      },\n      {\n        input: \"a?b?c\",\n        expected: { interpolation: \"a\\\\?b\\\\?c\", noInterpolation: \"a?b?c\" },\n      },\n    ],\n    \"parentheses ('(', ')')\": [\n      {\n        input: \"a(b\",\n        expected: { interpolation: \"a\\\\(b\", noInterpolation: \"a(b\" },\n      },\n      {\n        input: \"a)b\",\n        expected: { interpolation: \"a\\\\)b\", noInterpolation: \"a)b\" },\n      },\n      {\n        input: \"a(b(c\",\n        expected: { interpolation: \"a\\\\(b\\\\(c\", noInterpolation: \"a(b(c\" },\n      },\n      {\n        input: \"a)b)c\",\n        expected: { interpolation: \"a\\\\)b\\\\)c\", noInterpolation: \"a)b)c\" },\n      },\n      {\n        input: \"a(b)c\",\n        expected: { interpolation: \"a\\\\(b\\\\)c\", noInterpolation: \"a(b)c\" },\n      },\n      {\n        input: \"a(b,c)d\",\n        expected: { interpolation: \"a\\\\(b,c\\\\)d\", noInterpolation: \"a(b,c)d\" },\n      },\n    ],\n    \"square brackets ('[', ']')\": [\n      {\n        input: \"a[b\",\n        expected: { interpolation: \"a[b\", noInterpolation: \"a[b\" },\n      },\n      {\n        input: \"a]b\",\n        expected: { interpolation: \"a]b\", noInterpolation: \"a]b\" },\n      },\n      {\n        input: \"a[b[c\",\n        expected: { interpolation: \"a[b[c\", noInterpolation: \"a[b[c\" },\n      },\n      {\n        input: \"a]b]c\",\n        expected: { interpolation: \"a]b]c\", noInterpolation: \"a]b]c\" },\n      },\n      {\n        input: \"a[b]c\",\n        expected: { interpolation: \"a[b]c\", noInterpolation: \"a[b]c\" },\n      },\n      {\n        input: \"a[b,c]d\",\n        expected: { interpolation: \"a[b,c]d\", noInterpolation: \"a[b,c]d\" },\n      },\n    ],\n    \"curly brackets ('{', '}')\": [\n      {\n        input: \"a{b\",\n        expected: { interpolation: \"a{b\", noInterpolation: \"a{b\" },\n      },\n      {\n        input: \"a}b\",\n        expected: { interpolation: \"a}b\", noInterpolation: \"a}b\" },\n      },\n      {\n        input: \"a{b{c\",\n        expected: { interpolation: \"a{b{c\", noInterpolation: \"a{b{c\" },\n      },\n      {\n        input: \"a}b}c\",\n        expected: { interpolation: \"a}b}c\", noInterpolation: \"a}b}c\" },\n      },\n      {\n        input: \"a{b}c\",\n        expected: { interpolation: \"a{b}c\", noInterpolation: \"a{b}c\" },\n      },\n      {\n        input: \"a{b,c}d\",\n        expected: { interpolation: \"a{b,c}d\", noInterpolation: \"a{b,c}d\" },\n      },\n      {\n        input: \"a{,b}c\",\n        expected: { interpolation: \"a{,b}c\", noInterpolation: \"a{,b}c\" },\n      },\n      {\n        input: \"a{b,}c\",\n        expected: { interpolation: \"a{b,}c\", noInterpolation: \"a{b,}c\" },\n      },\n      {\n        input: \"a{bc,de}f\",\n        expected: {\n          interpolation: \"a{bc,de}f\",\n          noInterpolation: \"a{bc,de}f\",\n        },\n      },\n      {\n        input: \"a{b,{c,d},e}f\",\n        expected: {\n          interpolation: \"a{b,{c,d},e}f\",\n          noInterpolation: \"a{b,{c,d},e}f\",\n        },\n      },\n      {\n        input: \"a{0..2}b\",\n        expected: { interpolation: \"a{0..2}b\", noInterpolation: \"a{0..2}b\" },\n      },\n      {\n        input: \"a{\\u000Db,c}d\",\n        expected: {\n          interpolation: \"a{b,c}d\",\n          noInterpolation: \"a{b,c}d\",\n        },\n      },\n      {\n        input: \"a{\\u2028b,c}d\",\n        expected: {\n          interpolation: \"a{\\u2028b,c}d\",\n          noInterpolation: \"a{\\u2028b,c}d\",\n        },\n      },\n      {\n        input: \"a{\\u2029b,c}d\",\n        expected: {\n          interpolation: \"a{\\u2029b,c}d\",\n          noInterpolation: \"a{\\u2029b,c}d\",\n        },\n      },\n      {\n        input: \"a{b,c\\u000D}d\",\n        expected: {\n          interpolation: \"a{b,c}d\",\n          noInterpolation: \"a{b,c}d\",\n        },\n      },\n      {\n        input: \"a{b,c\\u2028}d\",\n        expected: {\n          interpolation: \"a{b,c\\u2028}d\",\n          noInterpolation: \"a{b,c\\u2028}d\",\n        },\n      },\n      {\n        input: \"a{b,c\\u2029}d\",\n        expected: {\n          interpolation: \"a{b,c\\u2029}d\",\n          noInterpolation: \"a{b,c\\u2029}d\",\n        },\n      },\n      {\n        input: \"a{\\u000D0..2}b\",\n        expected: {\n          interpolation: \"a{0..2}b\",\n          noInterpolation: \"a{0..2}b\",\n        },\n      },\n      {\n        input: \"a{\\u20280..2}b\",\n        expected: {\n          interpolation: \"a{\\u20280..2}b\",\n          noInterpolation: \"a{\\u20280..2}b\",\n        },\n      },\n      {\n        input: \"a{\\u20290..2}b\",\n        expected: {\n          interpolation: \"a{\\u20290..2}b\",\n          noInterpolation: \"a{\\u20290..2}b\",\n        },\n      },\n      {\n        input: \"a{0..2\\u000D}b\",\n        expected: {\n          interpolation: \"a{0..2}b\",\n          noInterpolation: \"a{0..2}b\",\n        },\n      },\n      {\n        input: \"a{0..2\\u2028}b\",\n        expected: {\n          interpolation: \"a{0..2\\u2028}b\",\n          noInterpolation: \"a{0..2\\u2028}b\",\n        },\n      },\n      {\n        input: \"a{0..2\\u2029}b\",\n        expected: {\n          interpolation: \"a{0..2\\u2029}b\",\n          noInterpolation: \"a{0..2\\u2029}b\",\n        },\n      },\n    ],\n    \"angle brackets ('<', '>')\": [\n      {\n        input: \"a<b\",\n        expected: { interpolation: \"a\\\\<b\", noInterpolation: \"a<b\" },\n      },\n      {\n        input: \"a>b\",\n        expected: { interpolation: \"a\\\\>b\", noInterpolation: \"a>b\" },\n      },\n      {\n        input: \"a<b<c\",\n        expected: { interpolation: \"a\\\\<b\\\\<c\", noInterpolation: \"a<b<c\" },\n      },\n      {\n        input: \"a>b>c\",\n        expected: { interpolation: \"a\\\\>b\\\\>c\", noInterpolation: \"a>b>c\" },\n      },\n      {\n        input: \"a<b>c\",\n        expected: { interpolation: \"a\\\\<b\\\\>c\", noInterpolation: \"a<b>c\" },\n      },\n    ],\n  },\n  [binZsh]: {\n    \"sample strings\": [\n      {\n        input: \"foobar\",\n        expected: { interpolation: \"foobar\", noInterpolation: \"foobar\" },\n      },\n      {\n        input: \"Hello world\",\n        expected: {\n          interpolation: \"Hello world\",\n          noInterpolation: \"Hello world\",\n        },\n      },\n    ],\n    \"<null> (\\\\0)\": [\n      {\n        input: \"a\\x00b\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\x00b\\x00c\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n    ],\n    \"<backspace> ('\\\\b')\": [\n      {\n        input: \"a\\bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\bb\\bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\b\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<character tabulation> (\\\\t)\": [\n      {\n        input: \"a\\tb\",\n        expected: { interpolation: \"a\\tb\", noInterpolation: \"a\\tb\" },\n      },\n      {\n        input: \"a\\tb\\tc\",\n        expected: { interpolation: \"a\\tb\\tc\", noInterpolation: \"a\\tb\\tc\" },\n      },\n      {\n        input: \"a\\t\",\n        expected: { interpolation: \"a\\t\", noInterpolation: \"a\\t\" },\n      },\n      {\n        input: \"\\ta\",\n        expected: { interpolation: \"\\ta\", noInterpolation: \"\\ta\" },\n      },\n    ],\n    \"<end of line> ('\\\\n')\": [\n      {\n        input: \"a\\nb\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a\\nb\" },\n      },\n      {\n        input: \"a\\nb\\nc\",\n        expected: { interpolation: \"a b c\", noInterpolation: \"a\\nb\\nc\" },\n      },\n      {\n        input: \"a\\n\",\n        expected: { interpolation: \"a \", noInterpolation: \"a\\n\" },\n      },\n      {\n        input: \"\\na\",\n        expected: { interpolation: \" a\", noInterpolation: \"\\na\" },\n      },\n    ],\n    \"<line tabulation> (\\\\v)\": [\n      {\n        input: \"a\\vb\",\n        expected: { interpolation: \"a\\vb\", noInterpolation: \"a\\vb\" },\n      },\n      {\n        input: \"a\\vb\\vc\",\n        expected: { interpolation: \"a\\vb\\vc\", noInterpolation: \"a\\vb\\vc\" },\n      },\n      {\n        input: \"a\\v\",\n        expected: { interpolation: \"a\\v\", noInterpolation: \"a\\v\" },\n      },\n      {\n        input: \"\\va\",\n        expected: { interpolation: \"\\va\", noInterpolation: \"\\va\" },\n      },\n    ],\n    \"<form feed> (\\\\f)\": [\n      {\n        input: \"a\\fb\",\n        expected: { interpolation: \"a\\fb\", noInterpolation: \"a\\fb\" },\n      },\n      {\n        input: \"a\\fb\\fc\",\n        expected: { interpolation: \"a\\fb\\fc\", noInterpolation: \"a\\fb\\fc\" },\n      },\n      {\n        input: \"a\\f\",\n        expected: { interpolation: \"a\\f\", noInterpolation: \"a\\f\" },\n      },\n      {\n        input: \"\\fa\",\n        expected: { interpolation: \"\\fa\", noInterpolation: \"\\fa\" },\n      },\n    ],\n    \"<carriage return> ('\\\\r')\": [\n      {\n        input: \"a\\rb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\rb\\rc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\ra\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\r\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\r\\nb\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a\\r\\nb\" },\n      },\n    ],\n    \"<escape> ('\\\\u001B')\": [\n      {\n        input: \"a\\u001Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u001Bb\\u001Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u001Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u001B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<space> (' ')\": [\n      {\n        input: \"a b\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a b\" },\n      },\n      {\n        input: \"a b c\",\n        expected: { interpolation: \"a b c\", noInterpolation: \"a b c\" },\n      },\n      {\n        input: \"a \",\n        expected: { interpolation: \"a \", noInterpolation: \"a \" },\n      },\n      {\n        input: \" a\",\n        expected: { interpolation: \" a\", noInterpolation: \" a\" },\n      },\n    ],\n    \"<next line> (\\\\u0085)\": [\n      {\n        input: \"a\\u0085b\",\n        expected: {\n          interpolation: \"a\\u0085b\",\n          noInterpolation: \"a\\u0085b\",\n        },\n      },\n      {\n        input: \"a\\u0085b\\u0085c\",\n        expected: {\n          interpolation: \"a\\u0085b\\u0085c\",\n          noInterpolation: \"a\\u0085b\\u0085c\",\n        },\n      },\n      {\n        input: \"a\\u0085\",\n        expected: {\n          interpolation: \"a\\u0085\",\n          noInterpolation: \"a\\u0085\",\n        },\n      },\n      {\n        input: \"\\u0085a\",\n        expected: {\n          interpolation: \"\\u0085a\",\n          noInterpolation: \"\\u0085a\",\n        },\n      },\n    ],\n    \"<control sequence introducer> ('\\\\u009B')\": [\n      {\n        input: \"a\\u009Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u009Bb\\u009Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u009Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u009B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<no break space> (\\\\u00A0)\": [\n      {\n        input: \"a\\u00A0b\",\n        expected: {\n          interpolation: \"a\\u00A0b\",\n          noInterpolation: \"a\\u00A0b\",\n        },\n      },\n      {\n        input: \"a\\u00A0b\\u00A0c\",\n        expected: {\n          interpolation: \"a\\u00A0b\\u00A0c\",\n          noInterpolation: \"a\\u00A0b\\u00A0c\",\n        },\n      },\n      {\n        input: \"a\\u00A0\",\n        expected: {\n          interpolation: \"a\\u00A0\",\n          noInterpolation: \"a\\u00A0\",\n        },\n      },\n      {\n        input: \"\\u00A0a\",\n        expected: {\n          interpolation: \"\\u00A0a\",\n          noInterpolation: \"\\u00A0a\",\n        },\n      },\n    ],\n    \"<en quad> (\\\\u2000)\": [\n      {\n        input: \"a\\u2000b\",\n        expected: {\n          interpolation: \"a\\u2000b\",\n          noInterpolation: \"a\\u2000b\",\n        },\n      },\n      {\n        input: \"a\\u2000b\\u2000c\",\n        expected: {\n          interpolation: \"a\\u2000b\\u2000c\",\n          noInterpolation: \"a\\u2000b\\u2000c\",\n        },\n      },\n      {\n        input: \"a\\u2000\",\n        expected: {\n          interpolation: \"a\\u2000\",\n          noInterpolation: \"a\\u2000\",\n        },\n      },\n      {\n        input: \"\\u2000a\",\n        expected: {\n          interpolation: \"\\u2000a\",\n          noInterpolation: \"\\u2000a\",\n        },\n      },\n    ],\n    \"<em quad> (\\\\u2001)\": [\n      {\n        input: \"a\\u2001b\",\n        expected: {\n          interpolation: \"a\\u2001b\",\n          noInterpolation: \"a\\u2001b\",\n        },\n      },\n      {\n        input: \"a\\u2001b\\u2001c\",\n        expected: {\n          interpolation: \"a\\u2001b\\u2001c\",\n          noInterpolation: \"a\\u2001b\\u2001c\",\n        },\n      },\n      {\n        input: \"a\\u2001\",\n        expected: {\n          interpolation: \"a\\u2001\",\n          noInterpolation: \"a\\u2001\",\n        },\n      },\n      {\n        input: \"\\u2001a\",\n        expected: {\n          interpolation: \"\\u2001a\",\n          noInterpolation: \"\\u2001a\",\n        },\n      },\n    ],\n    \"<en space> (\\\\u2002)\": [\n      {\n        input: \"a\\u2002b\",\n        expected: {\n          interpolation: \"a\\u2002b\",\n          noInterpolation: \"a\\u2002b\",\n        },\n      },\n      {\n        input: \"a\\u2002b\\u2002c\",\n        expected: {\n          interpolation: \"a\\u2002b\\u2002c\",\n          noInterpolation: \"a\\u2002b\\u2002c\",\n        },\n      },\n      {\n        input: \"a\\u2002\",\n        expected: {\n          interpolation: \"a\\u2002\",\n          noInterpolation: \"a\\u2002\",\n        },\n      },\n      {\n        input: \"\\u2002a\",\n        expected: {\n          interpolation: \"\\u2002a\",\n          noInterpolation: \"\\u2002a\",\n        },\n      },\n    ],\n    \"<em space> (\\\\u2003)\": [\n      {\n        input: \"a\\u2003b\",\n        expected: {\n          interpolation: \"a\\u2003b\",\n          noInterpolation: \"a\\u2003b\",\n        },\n      },\n      {\n        input: \"a\\u2003b\\u2003c\",\n        expected: {\n          interpolation: \"a\\u2003b\\u2003c\",\n          noInterpolation: \"a\\u2003b\\u2003c\",\n        },\n      },\n      {\n        input: \"a\\u2003\",\n        expected: {\n          interpolation: \"a\\u2003\",\n          noInterpolation: \"a\\u2003\",\n        },\n      },\n      {\n        input: \"\\u2003a\",\n        expected: {\n          interpolation: \"\\u2003a\",\n          noInterpolation: \"\\u2003a\",\n        },\n      },\n    ],\n    \"<three-per-em space> (\\\\u2004)\": [\n      {\n        input: \"a\\u2004b\",\n        expected: {\n          interpolation: \"a\\u2004b\",\n          noInterpolation: \"a\\u2004b\",\n        },\n      },\n      {\n        input: \"a\\u2004b\\u2004c\",\n        expected: {\n          interpolation: \"a\\u2004b\\u2004c\",\n          noInterpolation: \"a\\u2004b\\u2004c\",\n        },\n      },\n      {\n        input: \"a\\u2004\",\n        expected: {\n          interpolation: \"a\\u2004\",\n          noInterpolation: \"a\\u2004\",\n        },\n      },\n      {\n        input: \"\\u2004a\",\n        expected: {\n          interpolation: \"\\u2004a\",\n          noInterpolation: \"\\u2004a\",\n        },\n      },\n    ],\n    \"<four-per-em space> (\\\\u2005)\": [\n      {\n        input: \"a\\u2005b\",\n        expected: {\n          interpolation: \"a\\u2005b\",\n          noInterpolation: \"a\\u2005b\",\n        },\n      },\n      {\n        input: \"a\\u2005b\\u2005c\",\n        expected: {\n          interpolation: \"a\\u2005b\\u2005c\",\n          noInterpolation: \"a\\u2005b\\u2005c\",\n        },\n      },\n      {\n        input: \"a\\u2005\",\n        expected: {\n          interpolation: \"a\\u2005\",\n          noInterpolation: \"a\\u2005\",\n        },\n      },\n      {\n        input: \"\\u2005a\",\n        expected: {\n          interpolation: \"\\u2005a\",\n          noInterpolation: \"\\u2005a\",\n        },\n      },\n    ],\n    \"<six-per-em space> (\\\\u2006)\": [\n      {\n        input: \"a\\u2006b\",\n        expected: {\n          interpolation: \"a\\u2006b\",\n          noInterpolation: \"a\\u2006b\",\n        },\n      },\n      {\n        input: \"a\\u2006b\\u2006c\",\n        expected: {\n          interpolation: \"a\\u2006b\\u2006c\",\n          noInterpolation: \"a\\u2006b\\u2006c\",\n        },\n      },\n      {\n        input: \"a\\u2006\",\n        expected: {\n          interpolation: \"a\\u2006\",\n          noInterpolation: \"a\\u2006\",\n        },\n      },\n      {\n        input: \"\\u2006a\",\n        expected: {\n          interpolation: \"\\u2006a\",\n          noInterpolation: \"\\u2006a\",\n        },\n      },\n    ],\n    \"<figure space> (\\\\u2007)\": [\n      {\n        input: \"a\\u2007b\",\n        expected: {\n          interpolation: \"a\\u2007b\",\n          noInterpolation: \"a\\u2007b\",\n        },\n      },\n      {\n        input: \"a\\u2007b\\u2007c\",\n        expected: {\n          interpolation: \"a\\u2007b\\u2007c\",\n          noInterpolation: \"a\\u2007b\\u2007c\",\n        },\n      },\n      {\n        input: \"a\\u2007\",\n        expected: {\n          interpolation: \"a\\u2007\",\n          noInterpolation: \"a\\u2007\",\n        },\n      },\n      {\n        input: \"\\u2007a\",\n        expected: {\n          interpolation: \"\\u2007a\",\n          noInterpolation: \"\\u2007a\",\n        },\n      },\n    ],\n    \"<punctuation space> (\\\\u2008)\": [\n      {\n        input: \"a\\u2008b\",\n        expected: {\n          interpolation: \"a\\u2008b\",\n          noInterpolation: \"a\\u2008b\",\n        },\n      },\n      {\n        input: \"a\\u2008b\\u2008c\",\n        expected: {\n          interpolation: \"a\\u2008b\\u2008c\",\n          noInterpolation: \"a\\u2008b\\u2008c\",\n        },\n      },\n      {\n        input: \"a\\u2008\",\n        expected: {\n          interpolation: \"a\\u2008\",\n          noInterpolation: \"a\\u2008\",\n        },\n      },\n      {\n        input: \"\\u2008a\",\n        expected: {\n          interpolation: \"\\u2008a\",\n          noInterpolation: \"\\u2008a\",\n        },\n      },\n    ],\n    \"<thin space> (\\\\u2009)\": [\n      {\n        input: \"a\\u2009b\",\n        expected: {\n          interpolation: \"a\\u2009b\",\n          noInterpolation: \"a\\u2009b\",\n        },\n      },\n      {\n        input: \"a\\u2009b\\u2009c\",\n        expected: {\n          interpolation: \"a\\u2009b\\u2009c\",\n          noInterpolation: \"a\\u2009b\\u2009c\",\n        },\n      },\n      {\n        input: \"a\\u2009\",\n        expected: {\n          interpolation: \"a\\u2009\",\n          noInterpolation: \"a\\u2009\",\n        },\n      },\n      {\n        input: \"\\u2009a\",\n        expected: {\n          interpolation: \"\\u2009a\",\n          noInterpolation: \"\\u2009a\",\n        },\n      },\n    ],\n    \"<hair space> (\\\\u200A)\": [\n      {\n        input: \"a\\u200Ab\",\n        expected: {\n          interpolation: \"a\\u200Ab\",\n          noInterpolation: \"a\\u200Ab\",\n        },\n      },\n      {\n        input: \"a\\u200Ab\\u200Ac\",\n        expected: {\n          interpolation: \"a\\u200Ab\\u200Ac\",\n          noInterpolation: \"a\\u200Ab\\u200Ac\",\n        },\n      },\n      {\n        input: \"a\\u200A\",\n        expected: {\n          interpolation: \"a\\u200A\",\n          noInterpolation: \"a\\u200A\",\n        },\n      },\n      {\n        input: \"\\u200Aa\",\n        expected: {\n          interpolation: \"\\u200Aa\",\n          noInterpolation: \"\\u200Aa\",\n        },\n      },\n    ],\n    \"<line separator> (\\\\u2028)\": [\n      {\n        input: \"a\\u2028b\",\n        expected: {\n          interpolation: \"a\\u2028b\",\n          noInterpolation: \"a\\u2028b\",\n        },\n      },\n      {\n        input: \"a\\u2028b\\u2028c\",\n        expected: {\n          interpolation: \"a\\u2028b\\u2028c\",\n          noInterpolation: \"a\\u2028b\\u2028c\",\n        },\n      },\n      {\n        input: \"a\\u2028\",\n        expected: {\n          interpolation: \"a\\u2028\",\n          noInterpolation: \"a\\u2028\",\n        },\n      },\n      {\n        input: \"\\u2028a\",\n        expected: {\n          interpolation: \"\\u2028a\",\n          noInterpolation: \"\\u2028a\",\n        },\n      },\n    ],\n    \"<paragraph separator> (\\\\u2029)\": [\n      {\n        input: \"a\\u2029b\",\n        expected: {\n          interpolation: \"a\\u2029b\",\n          noInterpolation: \"a\\u2029b\",\n        },\n      },\n      {\n        input: \"a\\u2029b\\u2029c\",\n        expected: {\n          interpolation: \"a\\u2029b\\u2029c\",\n          noInterpolation: \"a\\u2029b\\u2029c\",\n        },\n      },\n      {\n        input: \"a\\u2029\",\n        expected: {\n          interpolation: \"a\\u2029\",\n          noInterpolation: \"a\\u2029\",\n        },\n      },\n      {\n        input: \"\\u2029a\",\n        expected: {\n          interpolation: \"\\u2029a\",\n          noInterpolation: \"\\u2029a\",\n        },\n      },\n    ],\n    \"<narrow no-break space> (\\\\u202F)\": [\n      {\n        input: \"a\\u202Fb\",\n        expected: {\n          interpolation: \"a\\u202Fb\",\n          noInterpolation: \"a\\u202Fb\",\n        },\n      },\n      {\n        input: \"a\\u202Fb\\u202Fc\",\n        expected: {\n          interpolation: \"a\\u202Fb\\u202Fc\",\n          noInterpolation: \"a\\u202Fb\\u202Fc\",\n        },\n      },\n      {\n        input: \"a\\u202F\",\n        expected: {\n          interpolation: \"a\\u202F\",\n          noInterpolation: \"a\\u202F\",\n        },\n      },\n      {\n        input: \"\\u202Fa\",\n        expected: {\n          interpolation: \"\\u202Fa\",\n          noInterpolation: \"\\u202Fa\",\n        },\n      },\n    ],\n    \"<medium mathematical space> (\\\\u205F)\": [\n      {\n        input: \"a\\u205Fb\",\n        expected: {\n          interpolation: \"a\\u205Fb\",\n          noInterpolation: \"a\\u205Fb\",\n        },\n      },\n      {\n        input: \"a\\u205Fb\\u205Fc\",\n        expected: {\n          interpolation: \"a\\u205Fb\\u205Fc\",\n          noInterpolation: \"a\\u205Fb\\u205Fc\",\n        },\n      },\n      {\n        input: \"a\\u205F\",\n        expected: {\n          interpolation: \"a\\u205F\",\n          noInterpolation: \"a\\u205F\",\n        },\n      },\n      {\n        input: \"\\u205Fa\",\n        expected: {\n          interpolation: \"\\u205Fa\",\n          noInterpolation: \"\\u205Fa\",\n        },\n      },\n    ],\n    \"<ideographic space> (\\\\u3000)\": [\n      {\n        input: \"a\\u3000b\",\n        expected: {\n          interpolation: \"a\\u3000b\",\n          noInterpolation: \"a\\u3000b\",\n        },\n      },\n      {\n        input: \"a\\u3000b\\u3000c\",\n        expected: {\n          interpolation: \"a\\u3000b\\u3000c\",\n          noInterpolation: \"a\\u3000b\\u3000c\",\n        },\n      },\n      {\n        input: \"a\\u3000\",\n        expected: {\n          interpolation: \"a\\u3000\",\n          noInterpolation: \"a\\u3000\",\n        },\n      },\n      {\n        input: \"\\u3000a\",\n        expected: {\n          interpolation: \"\\u3000a\",\n          noInterpolation: \"\\u3000a\",\n        },\n      },\n    ],\n    \"<zero width no-break space> (\\\\uFEFF)\": [\n      {\n        input: \"a\\uFEFFb\",\n        expected: {\n          interpolation: \"a\\uFEFFb\",\n          noInterpolation: \"a\\uFEFFb\",\n        },\n      },\n      {\n        input: \"a\\uFEFFb\\uFEFFc\",\n        expected: {\n          interpolation: \"a\\uFEFFb\\uFEFFc\",\n          noInterpolation: \"a\\uFEFFb\\uFEFFc\",\n        },\n      },\n      {\n        input: \"a\\uFEFF\",\n        expected: {\n          interpolation: \"a\\uFEFF\",\n          noInterpolation: \"a\\uFEFF\",\n        },\n      },\n      {\n        input: \"\\uFEFFa\",\n        expected: {\n          interpolation: \"\\uFEFFa\",\n          noInterpolation: \"\\uFEFFa\",\n        },\n      },\n    ],\n    'single quotes (\"\\'\")': [\n      {\n        input: \"a'b\",\n        expected: {\n          interpolation: \"a\\\\'b\",\n          noInterpolation: \"a'b\",\n          quoted: \"a'\\\\''b\",\n        },\n      },\n      {\n        input: \"a'b'c\",\n        expected: {\n          interpolation: \"a\\\\'b\\\\'c\",\n          noInterpolation: \"a'b'c\",\n          quoted: \"a'\\\\''b'\\\\''c\",\n        },\n      },\n    ],\n    \"double quotes ('\\\"')\": [\n      {\n        input: 'a\"b',\n        expected: { interpolation: 'a\\\\\"b', noInterpolation: 'a\"b' },\n      },\n      {\n        input: 'a\"b\"c',\n        expected: { interpolation: 'a\\\\\"b\\\\\"c', noInterpolation: 'a\"b\"c' },\n      },\n    ],\n    \"backticks (')\": [\n      {\n        input: \"a`b\",\n        expected: { interpolation: \"a\\\\`b\", noInterpolation: \"a`b\" },\n      },\n      {\n        input: \"a`b`c\",\n        expected: { interpolation: \"a\\\\`b\\\\`c\", noInterpolation: \"a`b`c\" },\n      },\n    ],\n    \"tildes ('~')\": [\n      {\n        input: \"~a\",\n        expected: { interpolation: \"\\\\~a\", noInterpolation: \"~a\" },\n      },\n      {\n        input: \"~a~b\",\n        expected: { interpolation: \"\\\\~a~b\", noInterpolation: \"~a~b\" },\n      },\n      {\n        input: \"a~b\",\n        expected: { interpolation: \"a~b\", noInterpolation: \"a~b\" },\n      },\n      {\n        input: \"a~b~c\",\n        expected: { interpolation: \"a~b~c\", noInterpolation: \"a~b~c\" },\n      },\n      {\n        input: \"a ~b\",\n        expected: { interpolation: \"a \\\\~b\", noInterpolation: \"a ~b\" },\n      },\n      {\n        input: \"a\t~b\",\n        expected: { interpolation: \"a\t\\\\~b\", noInterpolation: \"a\t~b\" },\n      },\n    ],\n    \"hashtags ('#')\": [\n      {\n        input: \"#a\",\n        expected: { interpolation: \"\\\\#a\", noInterpolation: \"#a\" },\n      },\n      {\n        input: \"#a#b\",\n        expected: { interpolation: \"\\\\#a#b\", noInterpolation: \"#a#b\" },\n      },\n      {\n        input: \"a#b\",\n        expected: { interpolation: \"a#b\", noInterpolation: \"a#b\" },\n      },\n      {\n        input: \"a#b#c\",\n        expected: { interpolation: \"a#b#c\", noInterpolation: \"a#b#c\" },\n      },\n      {\n        input: \"a #b\",\n        expected: { interpolation: \"a \\\\#b\", noInterpolation: \"a #b\" },\n      },\n      {\n        input: \"a\t#b\",\n        expected: { interpolation: \"a\t\\\\#b\", noInterpolation: \"a\t#b\" },\n      },\n    ],\n    \"dollar signs ('$')\": [\n      {\n        input: \"a$b\",\n        expected: { interpolation: \"a\\\\$b\", noInterpolation: \"a$b\" },\n      },\n      {\n        input: \"a$b$c\",\n        expected: { interpolation: \"a\\\\$b\\\\$c\", noInterpolation: \"a$b$c\" },\n      },\n    ],\n    \"ampersands ('&')\": [\n      {\n        input: \"a&b\",\n        expected: { interpolation: \"a\\\\&b\", noInterpolation: \"a&b\" },\n      },\n      {\n        input: \"a&b&c\",\n        expected: { interpolation: \"a\\\\&b\\\\&c\", noInterpolation: \"a&b&c\" },\n      },\n    ],\n    \"asterisks ('*')\": [\n      {\n        input: \"a*b\",\n        expected: { interpolation: \"a\\\\*b\", noInterpolation: \"a*b\" },\n      },\n      {\n        input: \"a*b*c\",\n        expected: { interpolation: \"a\\\\*b\\\\*c\", noInterpolation: \"a*b*c\" },\n      },\n    ],\n    \"equals ('=')\": [\n      {\n        input: \"=a\",\n        expected: { interpolation: \"\\\\=a\", noInterpolation: \"=a\" },\n      },\n      {\n        input: \"=a=b\",\n        expected: { interpolation: \"\\\\=a=b\", noInterpolation: \"=a=b\" },\n      },\n      {\n        input: \"a=b\",\n        expected: { interpolation: \"a=b\", noInterpolation: \"a=b\" },\n      },\n      {\n        input: \"a=b=c\",\n        expected: { interpolation: \"a=b=c\", noInterpolation: \"a=b=c\" },\n      },\n      {\n        input: \"a =b\",\n        expected: { interpolation: \"a \\\\=b\", noInterpolation: \"a =b\" },\n      },\n      {\n        input: \"a\t=b\",\n        expected: { interpolation: \"a\t\\\\=b\", noInterpolation: \"a\t=b\" },\n      },\n    ],\n    \"backslashes ('\\\\')\": [\n      {\n        input: \"a\\\\b\",\n        expected: { interpolation: \"a\\\\\\\\b\", noInterpolation: \"a\\\\b\" },\n      },\n      {\n        input: \"a\\\\b\\\\c\",\n        expected: { interpolation: \"a\\\\\\\\b\\\\\\\\c\", noInterpolation: \"a\\\\b\\\\c\" },\n      },\n    ],\n    \"pipes ('|')\": [\n      {\n        input: \"a|b\",\n        expected: { interpolation: \"a\\\\|b\", noInterpolation: \"a|b\" },\n      },\n      {\n        input: \"a|b|c\",\n        expected: { interpolation: \"a\\\\|b\\\\|c\", noInterpolation: \"a|b|c\" },\n      },\n    ],\n    \"semicolons (';')\": [\n      {\n        input: \"a;b\",\n        expected: { interpolation: \"a\\\\;b\", noInterpolation: \"a;b\" },\n      },\n      {\n        input: \"a;b;c\",\n        expected: { interpolation: \"a\\\\;b\\\\;c\", noInterpolation: \"a;b;c\" },\n      },\n    ],\n    \"question marks ('?')\": [\n      {\n        input: \"a?b\",\n        expected: { interpolation: \"a\\\\?b\", noInterpolation: \"a?b\" },\n      },\n      {\n        input: \"a?b?c\",\n        expected: { interpolation: \"a\\\\?b\\\\?c\", noInterpolation: \"a?b?c\" },\n      },\n    ],\n    \"parentheses ('(', ')')\": [\n      {\n        input: \"a(b\",\n        expected: { interpolation: \"a\\\\(b\", noInterpolation: \"a(b\" },\n      },\n      {\n        input: \"a)b\",\n        expected: { interpolation: \"a\\\\)b\", noInterpolation: \"a)b\" },\n      },\n      {\n        input: \"a(b(c\",\n        expected: { interpolation: \"a\\\\(b\\\\(c\", noInterpolation: \"a(b(c\" },\n      },\n      {\n        input: \"a)b)c\",\n        expected: { interpolation: \"a\\\\)b\\\\)c\", noInterpolation: \"a)b)c\" },\n      },\n      {\n        input: \"a(b)c\",\n        expected: { interpolation: \"a\\\\(b\\\\)c\", noInterpolation: \"a(b)c\" },\n      },\n      {\n        input: \"a(b,c)d\",\n        expected: { interpolation: \"a\\\\(b,c\\\\)d\", noInterpolation: \"a(b,c)d\" },\n      },\n    ],\n    \"square brackets ('[', ']')\": [\n      {\n        input: \"a[b\",\n        expected: { interpolation: \"a\\\\[b\", noInterpolation: \"a[b\" },\n      },\n      {\n        input: \"a]b\",\n        expected: { interpolation: \"a\\\\]b\", noInterpolation: \"a]b\" },\n      },\n      {\n        input: \"a[b[c\",\n        expected: { interpolation: \"a\\\\[b\\\\[c\", noInterpolation: \"a[b[c\" },\n      },\n      {\n        input: \"a]b]c\",\n        expected: { interpolation: \"a\\\\]b\\\\]c\", noInterpolation: \"a]b]c\" },\n      },\n      {\n        input: \"a[b]c\",\n        expected: { interpolation: \"a\\\\[b\\\\]c\", noInterpolation: \"a[b]c\" },\n      },\n      {\n        input: \"a[b,c]d\",\n        expected: { interpolation: \"a\\\\[b,c\\\\]d\", noInterpolation: \"a[b,c]d\" },\n      },\n    ],\n    \"curly brackets ('{', '}')\": [\n      {\n        input: \"a{b\",\n        expected: { interpolation: \"a\\\\{b\", noInterpolation: \"a{b\" },\n      },\n      {\n        input: \"a}b\",\n        expected: { interpolation: \"a\\\\}b\", noInterpolation: \"a}b\" },\n      },\n      {\n        input: \"a{b{c\",\n        expected: { interpolation: \"a\\\\{b\\\\{c\", noInterpolation: \"a{b{c\" },\n      },\n      {\n        input: \"a}b}c\",\n        expected: { interpolation: \"a\\\\}b\\\\}c\", noInterpolation: \"a}b}c\" },\n      },\n      {\n        input: \"a{b}c\",\n        expected: { interpolation: \"a\\\\{b\\\\}c\", noInterpolation: \"a{b}c\" },\n      },\n      {\n        input: \"a{b,c}d\",\n        expected: { interpolation: \"a\\\\{b,c\\\\}d\", noInterpolation: \"a{b,c}d\" },\n      },\n      {\n        input: \"a{b,{c,d},e}f\",\n        expected: {\n          interpolation: \"a\\\\{b,\\\\{c,d\\\\},e\\\\}f\",\n          noInterpolation: \"a{b,{c,d},e}f\",\n        },\n      },\n      {\n        input: \"a{0..2}b\",\n        expected: {\n          interpolation: \"a\\\\{0..2\\\\}b\",\n          noInterpolation: \"a{0..2}b\",\n        },\n      },\n    ],\n    \"angle brackets ('<', '>')\": [\n      {\n        input: \"a<b\",\n        expected: { interpolation: \"a\\\\<b\", noInterpolation: \"a<b\" },\n      },\n      {\n        input: \"a>b\",\n        expected: { interpolation: \"a\\\\>b\", noInterpolation: \"a>b\" },\n      },\n      {\n        input: \"a<b<c\",\n        expected: { interpolation: \"a\\\\<b\\\\<c\", noInterpolation: \"a<b<c\" },\n      },\n      {\n        input: \"a>b>c\",\n        expected: { interpolation: \"a\\\\>b\\\\>c\", noInterpolation: \"a>b>c\" },\n      },\n      {\n        input: \"a<b>c\",\n        expected: { interpolation: \"a\\\\<b\\\\>c\", noInterpolation: \"a<b>c\" },\n      },\n    ],\n  },\n};\n\nexport const quote = {\n  [binDash]: {\n    \"sample strings\": [\n      {\n        input: \"a\",\n        expected: { escaped: \"'a'\", notEscaped: \"'a'\" },\n      },\n    ],\n  },\n  [binBash]: {\n    \"sample strings\": [\n      {\n        input: \"a\",\n        expected: { escaped: \"'a'\", notEscaped: \"'a'\" },\n      },\n    ],\n  },\n  [binZsh]: {\n    \"sample strings\": [\n      {\n        input: \"a\",\n        expected: { escaped: \"'a'\", notEscaped: \"'a'\" },\n      },\n    ],\n  },\n};\n", "/**\n * @overview Contains unit tests for the escaping functionality on Unix systems.\n * @license Unlicense\n */\n\nimport test from \"ava\";\n\nimport { fixtures, macros } from \"./_.js\";\n\nimport * as unix from \"../../../src/unix.js\";\n\nObject.entries(fixtures.escape).forEach(([shellName, scenarios]) => {\n  const cases = Object.values(scenarios).flat();\n\n  cases.forEach(({ input, expected }) => {\n    test(macros.escape, {\n      expected: expected.noInterpolation,\n      input,\n      interpolation: false,\n      platform: unix,\n      quoted: false,\n      shellName,\n    });\n  });\n\n  cases.forEach(({ input, expected }) => {\n    test(macros.escape, {\n      expected: expected.interpolation,\n      input,\n      interpolation: true,\n      platform: unix,\n      quoted: false,\n      shellName,\n    });\n  });\n\n  cases.forEach(({ input, expected }) => {\n    test(macros.escape, {\n      expected: expected.quoted || expected.noInterpolation,\n      input,\n      interpolation: false,\n      platform: unix,\n      quoted: true,\n      shellName,\n    });\n  });\n});\n\ntest(macros.unsupportedShell, { fn: unix.getEscapeFunction });\n"], "fixing_code": ["# Security Policy\n\n## Supported Versions\n\nThe table below shows which versions of _Shescape_ are currently supported with\nsecurity updates.\n\n| Version | Supported | End-of-life |\n| ------: | :-------- | :---------- |\n|   1.x.x | Yes       | -           |\n|   0.x.x | No        | 2021-02-01  |\n\n## Reporting a Vulnerability\n\nThe maintainers of this project take security bugs very seriously. We appreciate\nyour efforts to responsibly disclose your findings. Due to the non-funded and\nopen-source nature of this project, we take a best-efforts approach when it\ncomes to engaging with (security) reports.\n\nTo report a security issue in a supported version of the project, send an email\nto [security@ericcornelissen.dev] and include the terms \"SECURITY\" and\n\"shescape\" in the subject line. Please do not open a regular issue or Pull\nRequest in the public repository.\n\nIf you found a security bug in an unsupported version of the project, please\nreport this publicly. For example, as a regular issue in the public repository.\n\n## Advisories\n\n| ID                    | Date       | Affected versions | Patched versions |\n| :-------------------- | :--------- | :---------------- | :--------------- |\n| `CVE-2021-21384`      | 2021-03-19 | `<1.1.3`          | `1.1.3`          |\n| `CVE-2022-24725`      | 2022-03-03 | `>=1.4.0 <1.5.1`  | `1.5.1`          |\n| `CVE-2022-31179`      | 2022-07-26 | `<1.5.8`          | `1.5.8`          |\n| `CVE-2022-31180`      | 2022-07-26 | `>=1.4.0 <1.5.8`  | `1.5.8`          |\n| `CVE-2022-36064`      | 2022-08-29 | `>=1.5.1 <1.5.10` | `1.5.10`         |\n| `GHSA-cr84-xvw4-qx3c` | 2022-10-25 | `>=1.5.10 <1.6.1` | `1.6.1`          |\n\n## Acknowledgments\n\nWe would like to publicly thank the following reporters:\n\n- Elliot Ward ([@mowzk]) from [Snyk]\n\n[@mowzk]: https://github.com/mowzk\n[security@ericcornelissen.dev]: mailto:security@ericcornelissen.dev?subject=SECURITY%20%28shescape%29\n[snyk]: https://snyk.io/\n", "/**\n * @overview Provides functionality specifically for Unix systems.\n * @license MPL-2.0\n */\n\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nimport which from \"which\";\n\n/**\n * The name of the Bourne-again shell (Bash) binary.\n *\n * @constant\n * @type {string}\n */\nconst binBash = \"bash\";\n\n/**\n * The name of the Debian Almquist shell (Dash) binary.\n *\n * @constant\n * @type {string}\n */\nconst binDash = \"dash\";\n\n/**\n * The name of the Z shell (Zsh) binary.\n *\n * @constant\n * @type {string}\n */\nconst binZsh = \"zsh\";\n\n/**\n * Escapes a shell argument for use in Bash(-like shells).\n *\n * @param {string} arg The argument to escape.\n * @param {boolean} interpolation Is interpolation enabled.\n * @param {boolean} quoted Is `arg` being quoted.\n * @returns {string} The escaped argument.\n */\nfunction escapeArgBash(arg, interpolation, quoted) {\n  let result = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");\n\n  if (interpolation) {\n    result = result\n      .replace(/\\\\/gu, \"\\\\\\\\\")\n      .replace(/\\n/gu, \" \")\n      .replace(/(^|\\s)([#~])/gu, \"$1\\\\$2\")\n      .replace(/([\"$&'()*;<>?`{|])/gu, \"\\\\$1\")\n      .replace(/(?<=[:=])(~)(?=[\\s+\\-/0:=]|$)/gu, \"\\\\$1\");\n  } else if (quoted) {\n    result = result.replace(/'/gu, `'\\\\''`);\n  }\n\n  result = result.replace(/\\r(?!\\n)/gu, \"\");\n\n  return result;\n}\n\n/**\n * Escapes a shell argument for use in Dash.\n *\n * @param {string} arg The argument to escape.\n * @param {boolean} interpolation Is interpolation enabled.\n * @param {boolean} quoted Is `arg` being quoted.\n * @returns {string} The escaped argument.\n */\nfunction escapeArgDash(arg, interpolation, quoted) {\n  let result = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");\n\n  if (interpolation) {\n    result = result\n      .replace(/\\\\/gu, \"\\\\\\\\\")\n      .replace(/\\n/gu, \" \")\n      .replace(/(^|\\s)([#~])/gu, \"$1\\\\$2\")\n      .replace(/([\"$&'()*;<>?`|])/gu, \"\\\\$1\");\n  } else if (quoted) {\n    result = result.replace(/'/gu, `'\\\\''`);\n  }\n\n  result = result.replace(/\\r(?!\\n)/gu, \"\");\n\n  return result;\n}\n\n/**\n * Escapes a shell argument for use in Zsh.\n *\n * @param {string} arg The argument to escape.\n * @param {boolean} interpolation Is interpolation enabled.\n * @param {boolean} quoted Is `arg` being quoted.\n * @returns {string} The escaped argument.\n */\nfunction escapeArgZsh(arg, interpolation, quoted) {\n  let result = arg.replace(/[\\0\\u0008\\u001B\\u009B]/gu, \"\");\n\n  if (interpolation) {\n    result = result\n      .replace(/\\\\/gu, \"\\\\\\\\\")\n      .replace(/\\n/gu, \" \")\n      .replace(/(^|\\s)([#=~])/gu, \"$1\\\\$2\")\n      .replace(/([\"$&'()*;<>?[\\]`{|}])/gu, \"\\\\$1\");\n  } else if (quoted) {\n    result = result.replace(/'/gu, `'\\\\''`);\n  }\n\n  result = result.replace(/\\r(?!\\n)/gu, \"\");\n\n  return result;\n}\n\n/**\n * Quotes an argument for use in a Unix shell.\n *\n * @param {string} arg The argument to quote.\n * @returns {string} The quoted argument.\n */\nfunction quoteArg(arg) {\n  return `'${arg}'`;\n}\n\n/**\n * Returns the basename of a directory or file path on a Unix system.\n *\n * @param {string} fullPath A Unix-style directory or file path.\n * @returns {string} The basename of `fullPath`.\n */\nfunction getBasename(fullPath) {\n  return path.basename(fullPath);\n}\n\n/**\n * Returns the default shell for Unix systems.\n *\n * For more information, see `options.shell` in:\n * https://nodejs.org/api/child_process.html#child_processexeccommand-options-callback.\n *\n * @returns {string} The default shell.\n */\nexport function getDefaultShell() {\n  return \"/bin/sh\";\n}\n\n/**\n * Returns a function to escape arguments for use in a particular shell.\n *\n * @param {string} shellName The name of a Unix shell.\n * @returns {Function?} A function to escape arguments for use in the shell.\n */\nexport function getEscapeFunction(shellName) {\n  switch (shellName) {\n    case binBash:\n      return escapeArgBash;\n    case binDash:\n      return escapeArgDash;\n    case binZsh:\n      return escapeArgZsh;\n    default:\n      return null;\n  }\n}\n\n/**\n * Returns a function to quote arguments for use in a particular shell.\n *\n * @param {string} shellName The name of a Unix shell.\n * @returns {Function?} A function to quote arguments for use in the shell.\n */\nexport function getQuoteFunction(shellName) {\n  switch (shellName) {\n    case binBash:\n    case binDash:\n    case binZsh:\n      return quoteArg;\n    default:\n      return null;\n  }\n}\n\n/**\n * Determines the name of the shell identified by a file path or file name.\n *\n * @param {object} args The arguments for this function.\n * @param {string} args.shell The name or path of the shell.\n * @param {object} deps The dependencies for this function.\n * @param {Function} deps.resolveExecutable Resolve the path to an executable.\n * @returns {string} The shell name.\n */\nexport function getShellName({ shell }, { resolveExecutable }) {\n  shell = resolveExecutable(\n    { executable: shell },\n    { exists: fs.existsSync, readlink: fs.readlinkSync, which: which.sync }\n  );\n\n  const shellName = getBasename(shell);\n  if (getEscapeFunction(shellName) === null) {\n    return binBash;\n  }\n\n  return shellName;\n}\n", "/**\n * @overview Provides fixtures for testing Unix specific functionality.\n * @license MPL-2.0\n */\n\nimport { binBash, binDash, binZsh } from \"../_constants.cjs\";\n\nexport const escape = {\n  [binBash]: {\n    \"sample strings\": [\n      {\n        input: \"foobar\",\n        expected: { interpolation: \"foobar\", noInterpolation: \"foobar\" },\n      },\n      {\n        input: \"Hello world\",\n        expected: {\n          interpolation: \"Hello world\",\n          noInterpolation: \"Hello world\",\n        },\n      },\n    ],\n    \"<null> (\\\\0)\": [\n      {\n        input: \"a\\x00b\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\x00b\\x00c\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"a\\x00\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"\\x00a\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<backspace> ('\\\\b')\": [\n      {\n        input: \"a\\bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\bb\\bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\b\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<character tabulation> (\\\\t)\": [\n      {\n        input: \"a\\tb\",\n        expected: { interpolation: \"a\\tb\", noInterpolation: \"a\\tb\" },\n      },\n      {\n        input: \"a\\tb\\tc\",\n        expected: { interpolation: \"a\\tb\\tc\", noInterpolation: \"a\\tb\\tc\" },\n      },\n      {\n        input: \"a\\t\",\n        expected: { interpolation: \"a\\t\", noInterpolation: \"a\\t\" },\n      },\n      {\n        input: \"\\ta\",\n        expected: { interpolation: \"\\ta\", noInterpolation: \"\\ta\" },\n      },\n    ],\n    \"<end of line> ('\\\\n')\": [\n      {\n        input: \"a\\nb\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a\\nb\" },\n      },\n      {\n        input: \"a\\nb\\nc\",\n        expected: { interpolation: \"a b c\", noInterpolation: \"a\\nb\\nc\" },\n      },\n      {\n        input: \"a\\n\",\n        expected: { interpolation: \"a \", noInterpolation: \"a\\n\" },\n      },\n      {\n        input: \"\\na\",\n        expected: { interpolation: \" a\", noInterpolation: \"\\na\" },\n      },\n    ],\n    \"<line tabulation> (\\\\v)\": [\n      {\n        input: \"a\\vb\",\n        expected: { interpolation: \"a\\vb\", noInterpolation: \"a\\vb\" },\n      },\n      {\n        input: \"a\\vb\\vc\",\n        expected: { interpolation: \"a\\vb\\vc\", noInterpolation: \"a\\vb\\vc\" },\n      },\n      {\n        input: \"a\\v\",\n        expected: { interpolation: \"a\\v\", noInterpolation: \"a\\v\" },\n      },\n      {\n        input: \"\\va\",\n        expected: { interpolation: \"\\va\", noInterpolation: \"\\va\" },\n      },\n    ],\n    \"<form feed> (\\\\f)\": [\n      {\n        input: \"a\\fb\",\n        expected: { interpolation: \"a\\fb\", noInterpolation: \"a\\fb\" },\n      },\n      {\n        input: \"a\\fb\\fc\",\n        expected: { interpolation: \"a\\fb\\fc\", noInterpolation: \"a\\fb\\fc\" },\n      },\n      {\n        input: \"a\\f\",\n        expected: { interpolation: \"a\\f\", noInterpolation: \"a\\f\" },\n      },\n      {\n        input: \"\\fa\",\n        expected: { interpolation: \"\\fa\", noInterpolation: \"\\fa\" },\n      },\n    ],\n    \"<carriage return> ('\\\\r')\": [\n      {\n        input: \"a\\rb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\rb\\rc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\ra\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\r\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\r\\nb\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a\\r\\nb\" },\n      },\n    ],\n    \"<escape> ('\\\\u001B')\": [\n      {\n        input: \"a\\u001Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u001Bb\\u001Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u001Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u001B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<space> (' ')\": [\n      {\n        input: \"a b\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a b\" },\n      },\n      {\n        input: \"a b c\",\n        expected: { interpolation: \"a b c\", noInterpolation: \"a b c\" },\n      },\n      {\n        input: \"a \",\n        expected: { interpolation: \"a \", noInterpolation: \"a \" },\n      },\n      {\n        input: \" a\",\n        expected: { interpolation: \" a\", noInterpolation: \" a\" },\n      },\n    ],\n    \"<next line> (\\\\u0085)\": [\n      {\n        input: \"a\\u0085b\",\n        expected: {\n          interpolation: \"a\\u0085b\",\n          noInterpolation: \"a\\u0085b\",\n        },\n      },\n      {\n        input: \"a\\u0085b\\u0085c\",\n        expected: {\n          interpolation: \"a\\u0085b\\u0085c\",\n          noInterpolation: \"a\\u0085b\\u0085c\",\n        },\n      },\n      {\n        input: \"a\\u0085\",\n        expected: {\n          interpolation: \"a\\u0085\",\n          noInterpolation: \"a\\u0085\",\n        },\n      },\n      {\n        input: \"\\u0085a\",\n        expected: {\n          interpolation: \"\\u0085a\",\n          noInterpolation: \"\\u0085a\",\n        },\n      },\n    ],\n    \"<control sequence introducer> ('\\\\u009B')\": [\n      {\n        input: \"a\\u009Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u009Bb\\u009Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u009Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u009B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<no break space> (\\\\u00A0)\": [\n      {\n        input: \"a\\u00A0b\",\n        expected: {\n          interpolation: \"a\\u00A0b\",\n          noInterpolation: \"a\\u00A0b\",\n        },\n      },\n      {\n        input: \"a\\u00A0b\\u00A0c\",\n        expected: {\n          interpolation: \"a\\u00A0b\\u00A0c\",\n          noInterpolation: \"a\\u00A0b\\u00A0c\",\n        },\n      },\n      {\n        input: \"a\\u00A0\",\n        expected: {\n          interpolation: \"a\\u00A0\",\n          noInterpolation: \"a\\u00A0\",\n        },\n      },\n      {\n        input: \"\\u00A0a\",\n        expected: {\n          interpolation: \"\\u00A0a\",\n          noInterpolation: \"\\u00A0a\",\n        },\n      },\n    ],\n    \"<en quad> (\\\\u2000)\": [\n      {\n        input: \"a\\u2000b\",\n        expected: {\n          interpolation: \"a\\u2000b\",\n          noInterpolation: \"a\\u2000b\",\n        },\n      },\n      {\n        input: \"a\\u2000b\\u2000c\",\n        expected: {\n          interpolation: \"a\\u2000b\\u2000c\",\n          noInterpolation: \"a\\u2000b\\u2000c\",\n        },\n      },\n      {\n        input: \"a\\u2000\",\n        expected: {\n          interpolation: \"a\\u2000\",\n          noInterpolation: \"a\\u2000\",\n        },\n      },\n      {\n        input: \"\\u2000a\",\n        expected: {\n          interpolation: \"\\u2000a\",\n          noInterpolation: \"\\u2000a\",\n        },\n      },\n    ],\n    \"<em quad> (\\\\u2001)\": [\n      {\n        input: \"a\\u2001b\",\n        expected: {\n          interpolation: \"a\\u2001b\",\n          noInterpolation: \"a\\u2001b\",\n        },\n      },\n      {\n        input: \"a\\u2001b\\u2001c\",\n        expected: {\n          interpolation: \"a\\u2001b\\u2001c\",\n          noInterpolation: \"a\\u2001b\\u2001c\",\n        },\n      },\n      {\n        input: \"a\\u2001\",\n        expected: {\n          interpolation: \"a\\u2001\",\n          noInterpolation: \"a\\u2001\",\n        },\n      },\n      {\n        input: \"\\u2001a\",\n        expected: {\n          interpolation: \"\\u2001a\",\n          noInterpolation: \"\\u2001a\",\n        },\n      },\n    ],\n    \"<en space> (\\\\u2002)\": [\n      {\n        input: \"a\\u2002b\",\n        expected: {\n          interpolation: \"a\\u2002b\",\n          noInterpolation: \"a\\u2002b\",\n        },\n      },\n      {\n        input: \"a\\u2002b\\u2002c\",\n        expected: {\n          interpolation: \"a\\u2002b\\u2002c\",\n          noInterpolation: \"a\\u2002b\\u2002c\",\n        },\n      },\n      {\n        input: \"a\\u2002\",\n        expected: {\n          interpolation: \"a\\u2002\",\n          noInterpolation: \"a\\u2002\",\n        },\n      },\n      {\n        input: \"\\u2002a\",\n        expected: {\n          interpolation: \"\\u2002a\",\n          noInterpolation: \"\\u2002a\",\n        },\n      },\n    ],\n    \"<em space> (\\\\u2003)\": [\n      {\n        input: \"a\\u2003b\",\n        expected: {\n          interpolation: \"a\\u2003b\",\n          noInterpolation: \"a\\u2003b\",\n        },\n      },\n      {\n        input: \"a\\u2003b\\u2003c\",\n        expected: {\n          interpolation: \"a\\u2003b\\u2003c\",\n          noInterpolation: \"a\\u2003b\\u2003c\",\n        },\n      },\n      {\n        input: \"a\\u2003\",\n        expected: {\n          interpolation: \"a\\u2003\",\n          noInterpolation: \"a\\u2003\",\n        },\n      },\n      {\n        input: \"\\u2003a\",\n        expected: {\n          interpolation: \"\\u2003a\",\n          noInterpolation: \"\\u2003a\",\n        },\n      },\n    ],\n    \"<three-per-em space> (\\\\u2004)\": [\n      {\n        input: \"a\\u2004b\",\n        expected: {\n          interpolation: \"a\\u2004b\",\n          noInterpolation: \"a\\u2004b\",\n        },\n      },\n      {\n        input: \"a\\u2004b\\u2004c\",\n        expected: {\n          interpolation: \"a\\u2004b\\u2004c\",\n          noInterpolation: \"a\\u2004b\\u2004c\",\n        },\n      },\n      {\n        input: \"a\\u2004\",\n        expected: {\n          interpolation: \"a\\u2004\",\n          noInterpolation: \"a\\u2004\",\n        },\n      },\n      {\n        input: \"\\u2004a\",\n        expected: {\n          interpolation: \"\\u2004a\",\n          noInterpolation: \"\\u2004a\",\n        },\n      },\n    ],\n    \"<four-per-em space> (\\\\u2005)\": [\n      {\n        input: \"a\\u2005b\",\n        expected: {\n          interpolation: \"a\\u2005b\",\n          noInterpolation: \"a\\u2005b\",\n        },\n      },\n      {\n        input: \"a\\u2005b\\u2005c\",\n        expected: {\n          interpolation: \"a\\u2005b\\u2005c\",\n          noInterpolation: \"a\\u2005b\\u2005c\",\n        },\n      },\n      {\n        input: \"a\\u2005\",\n        expected: {\n          interpolation: \"a\\u2005\",\n          noInterpolation: \"a\\u2005\",\n        },\n      },\n      {\n        input: \"\\u2005a\",\n        expected: {\n          interpolation: \"\\u2005a\",\n          noInterpolation: \"\\u2005a\",\n        },\n      },\n    ],\n    \"<six-per-em space> (\\\\u2006)\": [\n      {\n        input: \"a\\u2006b\",\n        expected: {\n          interpolation: \"a\\u2006b\",\n          noInterpolation: \"a\\u2006b\",\n        },\n      },\n      {\n        input: \"a\\u2006b\\u2006c\",\n        expected: {\n          interpolation: \"a\\u2006b\\u2006c\",\n          noInterpolation: \"a\\u2006b\\u2006c\",\n        },\n      },\n      {\n        input: \"a\\u2006\",\n        expected: {\n          interpolation: \"a\\u2006\",\n          noInterpolation: \"a\\u2006\",\n        },\n      },\n      {\n        input: \"\\u2006a\",\n        expected: {\n          interpolation: \"\\u2006a\",\n          noInterpolation: \"\\u2006a\",\n        },\n      },\n    ],\n    \"<figure space> (\\\\u2007)\": [\n      {\n        input: \"a\\u2007b\",\n        expected: {\n          interpolation: \"a\\u2007b\",\n          noInterpolation: \"a\\u2007b\",\n        },\n      },\n      {\n        input: \"a\\u2007b\\u2007c\",\n        expected: {\n          interpolation: \"a\\u2007b\\u2007c\",\n          noInterpolation: \"a\\u2007b\\u2007c\",\n        },\n      },\n      {\n        input: \"a\\u2007\",\n        expected: {\n          interpolation: \"a\\u2007\",\n          noInterpolation: \"a\\u2007\",\n        },\n      },\n      {\n        input: \"\\u2007a\",\n        expected: {\n          interpolation: \"\\u2007a\",\n          noInterpolation: \"\\u2007a\",\n        },\n      },\n    ],\n    \"<punctuation space> (\\\\u2008)\": [\n      {\n        input: \"a\\u2008b\",\n        expected: {\n          interpolation: \"a\\u2008b\",\n          noInterpolation: \"a\\u2008b\",\n        },\n      },\n      {\n        input: \"a\\u2008b\\u2008c\",\n        expected: {\n          interpolation: \"a\\u2008b\\u2008c\",\n          noInterpolation: \"a\\u2008b\\u2008c\",\n        },\n      },\n      {\n        input: \"a\\u2008\",\n        expected: {\n          interpolation: \"a\\u2008\",\n          noInterpolation: \"a\\u2008\",\n        },\n      },\n      {\n        input: \"\\u2008a\",\n        expected: {\n          interpolation: \"\\u2008a\",\n          noInterpolation: \"\\u2008a\",\n        },\n      },\n    ],\n    \"<thin space> (\\\\u2009)\": [\n      {\n        input: \"a\\u2009b\",\n        expected: {\n          interpolation: \"a\\u2009b\",\n          noInterpolation: \"a\\u2009b\",\n        },\n      },\n      {\n        input: \"a\\u2009b\\u2009c\",\n        expected: {\n          interpolation: \"a\\u2009b\\u2009c\",\n          noInterpolation: \"a\\u2009b\\u2009c\",\n        },\n      },\n      {\n        input: \"a\\u2009\",\n        expected: {\n          interpolation: \"a\\u2009\",\n          noInterpolation: \"a\\u2009\",\n        },\n      },\n      {\n        input: \"\\u2009a\",\n        expected: {\n          interpolation: \"\\u2009a\",\n          noInterpolation: \"\\u2009a\",\n        },\n      },\n    ],\n    \"<hair space> (\\\\u200A)\": [\n      {\n        input: \"a\\u200Ab\",\n        expected: {\n          interpolation: \"a\\u200Ab\",\n          noInterpolation: \"a\\u200Ab\",\n        },\n      },\n      {\n        input: \"a\\u200Ab\\u200Ac\",\n        expected: {\n          interpolation: \"a\\u200Ab\\u200Ac\",\n          noInterpolation: \"a\\u200Ab\\u200Ac\",\n        },\n      },\n      {\n        input: \"a\\u200A\",\n        expected: {\n          interpolation: \"a\\u200A\",\n          noInterpolation: \"a\\u200A\",\n        },\n      },\n      {\n        input: \"\\u200Aa\",\n        expected: {\n          interpolation: \"\\u200Aa\",\n          noInterpolation: \"\\u200Aa\",\n        },\n      },\n    ],\n    \"<line separator> (\\\\u2028)\": [\n      {\n        input: \"a\\u2028b\",\n        expected: {\n          interpolation: \"a\\u2028b\",\n          noInterpolation: \"a\\u2028b\",\n        },\n      },\n      {\n        input: \"a\\u2028b\\u2028c\",\n        expected: {\n          interpolation: \"a\\u2028b\\u2028c\",\n          noInterpolation: \"a\\u2028b\\u2028c\",\n        },\n      },\n      {\n        input: \"a\\u2028\",\n        expected: {\n          interpolation: \"a\\u2028\",\n          noInterpolation: \"a\\u2028\",\n        },\n      },\n      {\n        input: \"\\u2028a\",\n        expected: {\n          interpolation: \"\\u2028a\",\n          noInterpolation: \"\\u2028a\",\n        },\n      },\n    ],\n    \"<paragraph separator> (\\\\u2029)\": [\n      {\n        input: \"a\\u2029b\",\n        expected: {\n          interpolation: \"a\\u2029b\",\n          noInterpolation: \"a\\u2029b\",\n        },\n      },\n      {\n        input: \"a\\u2029b\\u2029c\",\n        expected: {\n          interpolation: \"a\\u2029b\\u2029c\",\n          noInterpolation: \"a\\u2029b\\u2029c\",\n        },\n      },\n      {\n        input: \"a\\u2029\",\n        expected: {\n          interpolation: \"a\\u2029\",\n          noInterpolation: \"a\\u2029\",\n        },\n      },\n      {\n        input: \"\\u2029a\",\n        expected: {\n          interpolation: \"\\u2029a\",\n          noInterpolation: \"\\u2029a\",\n        },\n      },\n    ],\n    \"<narrow no-break space> (\\\\u202F)\": [\n      {\n        input: \"a\\u202Fb\",\n        expected: {\n          interpolation: \"a\\u202Fb\",\n          noInterpolation: \"a\\u202Fb\",\n        },\n      },\n      {\n        input: \"a\\u202Fb\\u202Fc\",\n        expected: {\n          interpolation: \"a\\u202Fb\\u202Fc\",\n          noInterpolation: \"a\\u202Fb\\u202Fc\",\n        },\n      },\n      {\n        input: \"a\\u202F\",\n        expected: {\n          interpolation: \"a\\u202F\",\n          noInterpolation: \"a\\u202F\",\n        },\n      },\n      {\n        input: \"\\u202Fa\",\n        expected: {\n          interpolation: \"\\u202Fa\",\n          noInterpolation: \"\\u202Fa\",\n        },\n      },\n    ],\n    \"<medium mathematical space> (\\\\u205F)\": [\n      {\n        input: \"a\\u205Fb\",\n        expected: {\n          interpolation: \"a\\u205Fb\",\n          noInterpolation: \"a\\u205Fb\",\n        },\n      },\n      {\n        input: \"a\\u205Fb\\u205Fc\",\n        expected: {\n          interpolation: \"a\\u205Fb\\u205Fc\",\n          noInterpolation: \"a\\u205Fb\\u205Fc\",\n        },\n      },\n      {\n        input: \"a\\u205F\",\n        expected: {\n          interpolation: \"a\\u205F\",\n          noInterpolation: \"a\\u205F\",\n        },\n      },\n      {\n        input: \"\\u205Fa\",\n        expected: {\n          interpolation: \"\\u205Fa\",\n          noInterpolation: \"\\u205Fa\",\n        },\n      },\n    ],\n    \"<ideographic space> (\\\\u3000)\": [\n      {\n        input: \"a\\u3000b\",\n        expected: {\n          interpolation: \"a\\u3000b\",\n          noInterpolation: \"a\\u3000b\",\n        },\n      },\n      {\n        input: \"a\\u3000b\\u3000c\",\n        expected: {\n          interpolation: \"a\\u3000b\\u3000c\",\n          noInterpolation: \"a\\u3000b\\u3000c\",\n        },\n      },\n      {\n        input: \"a\\u3000\",\n        expected: {\n          interpolation: \"a\\u3000\",\n          noInterpolation: \"a\\u3000\",\n        },\n      },\n      {\n        input: \"\\u3000a\",\n        expected: {\n          interpolation: \"\\u3000a\",\n          noInterpolation: \"\\u3000a\",\n        },\n      },\n    ],\n    \"<zero width no-break space> (\\\\uFEFF)\": [\n      {\n        input: \"a\\uFEFFb\",\n        expected: {\n          interpolation: \"a\\uFEFFb\",\n          noInterpolation: \"a\\uFEFFb\",\n        },\n      },\n      {\n        input: \"a\\uFEFFb\\uFEFFc\",\n        expected: {\n          interpolation: \"a\\uFEFFb\\uFEFFc\",\n          noInterpolation: \"a\\uFEFFb\\uFEFFc\",\n        },\n      },\n      {\n        input: \"a\\uFEFF\",\n        expected: {\n          interpolation: \"a\\uFEFF\",\n          noInterpolation: \"a\\uFEFF\",\n        },\n      },\n      {\n        input: \"\\uFEFFa\",\n        expected: {\n          interpolation: \"\\uFEFFa\",\n          noInterpolation: \"\\uFEFFa\",\n        },\n      },\n    ],\n    'single quotes (\"\\'\")': [\n      {\n        input: \"a'b\",\n        expected: {\n          interpolation: \"a\\\\'b\",\n          noInterpolation: \"a'b\",\n          quoted: \"a'\\\\''b\",\n        },\n      },\n      {\n        input: \"a'b'c\",\n        expected: {\n          interpolation: \"a\\\\'b\\\\'c\",\n          noInterpolation: \"a'b'c\",\n          quoted: \"a'\\\\''b'\\\\''c\",\n        },\n      },\n    ],\n    \"double quotes ('\\\"')\": [\n      {\n        input: 'a\"b',\n        expected: { interpolation: 'a\\\\\"b', noInterpolation: 'a\"b' },\n      },\n      {\n        input: 'a\"b\"c',\n        expected: { interpolation: 'a\\\\\"b\\\\\"c', noInterpolation: 'a\"b\"c' },\n      },\n    ],\n    \"backticks (')\": [\n      {\n        input: \"a`b\",\n        expected: { interpolation: \"a\\\\`b\", noInterpolation: \"a`b\" },\n      },\n      {\n        input: \"a`b`c\",\n        expected: { interpolation: \"a\\\\`b\\\\`c\", noInterpolation: \"a`b`c\" },\n      },\n    ],\n    \"tildes ('~')\": [\n      {\n        input: \"~a\",\n        expected: { interpolation: \"\\\\~a\", noInterpolation: \"~a\" },\n      },\n      {\n        input: \"~a~b\",\n        expected: { interpolation: \"\\\\~a~b\", noInterpolation: \"~a~b\" },\n      },\n      {\n        input: \"a~b\",\n        expected: { interpolation: \"a~b\", noInterpolation: \"a~b\" },\n      },\n      {\n        input: \"a~b~c\",\n        expected: { interpolation: \"a~b~c\", noInterpolation: \"a~b~c\" },\n      },\n      {\n        input: \"a~b=\",\n        expected: { interpolation: \"a~b=\", noInterpolation: \"a~b=\" },\n      },\n      {\n        input: \"a=~\",\n        expected: { interpolation: \"a=\\\\~\", noInterpolation: \"a=~\" },\n      },\n      {\n        input: \"a~b=~\",\n        expected: { interpolation: \"a~b=\\\\~\", noInterpolation: \"a~b=~\" },\n      },\n      {\n        input: \"a=b~\",\n        expected: { interpolation: \"a=b~\", noInterpolation: \"a=b~\" },\n      },\n      {\n        input: \"a=~b\",\n        expected: { interpolation: \"a=~b\", noInterpolation: \"a=~b\" },\n      },\n      {\n        input: \"a=:~\",\n        expected: { interpolation: \"a=:\\\\~\", noInterpolation: \"a=:~\" },\n      },\n      {\n        input: \"a=b:~\",\n        expected: { interpolation: \"a=b:\\\\~\", noInterpolation: \"a=b:~\" },\n      },\n      {\n        input: \"a=~:\",\n        expected: { interpolation: \"a=\\\\~:\", noInterpolation: \"a=~:\" },\n      },\n      {\n        input: \"a=~:b\",\n        expected: { interpolation: \"a=\\\\~:b\", noInterpolation: \"a=~:b\" },\n      },\n      {\n        input: \"a=~:~\",\n        expected: { interpolation: \"a=\\\\~:\\\\~\", noInterpolation: \"a=~:~\" },\n      },\n      {\n        input: \"a=~:~:~\",\n        expected: {\n          interpolation: \"a=\\\\~:\\\\~:\\\\~\",\n          noInterpolation: \"a=~:~:~\",\n        },\n      },\n      {\n        input: \"a=:~:\",\n        expected: { interpolation: \"a=:\\\\~:\", noInterpolation: \"a=:~:\" },\n      },\n      {\n        input: \"a=:~:b\",\n        expected: { interpolation: \"a=:\\\\~:b\", noInterpolation: \"a=:~:b\" },\n      },\n      {\n        input: \"a=b:~:\",\n        expected: { interpolation: \"a=b:\\\\~:\", noInterpolation: \"a=b:~:\" },\n      },\n      {\n        input: \"a=:b:~\",\n        expected: { interpolation: \"a=:b:\\\\~\", noInterpolation: \"a=:b:~\" },\n      },\n      {\n        input: \"a=\\r:~:\",\n        expected: { interpolation: \"a=:\\\\~:\", noInterpolation: \"a=:~:\" },\n      },\n      {\n        input: \"a=\\u2028:~:\",\n        expected: {\n          interpolation: \"a=\\u2028:\\\\~:\",\n          noInterpolation: \"a=\\u2028:~:\",\n        },\n      },\n      {\n        input: \"a=\\u2029:~:\",\n        expected: {\n          interpolation: \"a=\\u2029:\\\\~:\",\n          noInterpolation: \"a=\\u2029:~:\",\n        },\n      },\n      {\n        input: \"a=b:~:c\",\n        expected: { interpolation: \"a=b:\\\\~:c\", noInterpolation: \"a=b:~:c\" },\n      },\n      {\n        input: \"a=~=\",\n        expected: { interpolation: \"a=\\\\~=\", noInterpolation: \"a=~=\" },\n      },\n      {\n        input: \"a=~-\",\n        expected: { interpolation: \"a=\\\\~-\", noInterpolation: \"a=~-\" },\n      },\n      {\n        input: \"a=~+\",\n        expected: { interpolation: \"a=\\\\~+\", noInterpolation: \"a=~+\" },\n      },\n      {\n        input: \"a=~/\",\n        expected: { interpolation: \"a=\\\\~/\", noInterpolation: \"a=~/\" },\n      },\n      {\n        input: \"a=~0\",\n        expected: { interpolation: \"a=\\\\~0\", noInterpolation: \"a=~0\" },\n      },\n      {\n        input: \"a=~ \",\n        expected: { interpolation: \"a=\\\\~ \", noInterpolation: \"a=~ \" },\n      },\n      {\n        input: \"a ~b\",\n        expected: { interpolation: \"a \\\\~b\", noInterpolation: \"a ~b\" },\n      },\n      {\n        input: \"a\t~b\",\n        expected: { interpolation: \"a\t\\\\~b\", noInterpolation: \"a\t~b\" },\n      },\n    ],\n    \"hashtags ('#')\": [\n      {\n        input: \"#a\",\n        expected: { interpolation: \"\\\\#a\", noInterpolation: \"#a\" },\n      },\n      {\n        input: \"#a#b\",\n        expected: { interpolation: \"\\\\#a#b\", noInterpolation: \"#a#b\" },\n      },\n      {\n        input: \"a#b\",\n        expected: { interpolation: \"a#b\", noInterpolation: \"a#b\" },\n      },\n      {\n        input: \"a#b#c\",\n        expected: { interpolation: \"a#b#c\", noInterpolation: \"a#b#c\" },\n      },\n      {\n        input: \"a #b\",\n        expected: { interpolation: \"a \\\\#b\", noInterpolation: \"a #b\" },\n      },\n      {\n        input: \"a\t#b\",\n        expected: { interpolation: \"a\t\\\\#b\", noInterpolation: \"a\t#b\" },\n      },\n    ],\n    \"dollar signs ('$')\": [\n      {\n        input: \"a$b\",\n        expected: { interpolation: \"a\\\\$b\", noInterpolation: \"a$b\" },\n      },\n      {\n        input: \"a$b$c\",\n        expected: { interpolation: \"a\\\\$b\\\\$c\", noInterpolation: \"a$b$c\" },\n      },\n    ],\n    \"ampersands ('&')\": [\n      {\n        input: \"a&b\",\n        expected: { interpolation: \"a\\\\&b\", noInterpolation: \"a&b\" },\n      },\n      {\n        input: \"a&b&c\",\n        expected: { interpolation: \"a\\\\&b\\\\&c\", noInterpolation: \"a&b&c\" },\n      },\n    ],\n    \"asterisks ('*')\": [\n      {\n        input: \"a*b\",\n        expected: { interpolation: \"a\\\\*b\", noInterpolation: \"a*b\" },\n      },\n      {\n        input: \"a*b*c\",\n        expected: { interpolation: \"a\\\\*b\\\\*c\", noInterpolation: \"a*b*c\" },\n      },\n    ],\n    \"equals ('=')\": [\n      {\n        input: \"=a\",\n        expected: { interpolation: \"=a\", noInterpolation: \"=a\" },\n      },\n      {\n        input: \"=a=b\",\n        expected: { interpolation: \"=a=b\", noInterpolation: \"=a=b\" },\n      },\n      {\n        input: \"a=b\",\n        expected: { interpolation: \"a=b\", noInterpolation: \"a=b\" },\n      },\n      {\n        input: \"a=b=c\",\n        expected: { interpolation: \"a=b=c\", noInterpolation: \"a=b=c\" },\n      },\n    ],\n    \"backslashes ('\\\\')\": [\n      {\n        input: \"a\\\\b\",\n        expected: { interpolation: \"a\\\\\\\\b\", noInterpolation: \"a\\\\b\" },\n      },\n      {\n        input: \"a\\\\b\\\\c\",\n        expected: { interpolation: \"a\\\\\\\\b\\\\\\\\c\", noInterpolation: \"a\\\\b\\\\c\" },\n      },\n    ],\n    \"pipes ('|')\": [\n      {\n        input: \"a|b\",\n        expected: { interpolation: \"a\\\\|b\", noInterpolation: \"a|b\" },\n      },\n      {\n        input: \"a|b|c\",\n        expected: { interpolation: \"a\\\\|b\\\\|c\", noInterpolation: \"a|b|c\" },\n      },\n    ],\n    \"semicolons (';')\": [\n      {\n        input: \"a;b\",\n        expected: { interpolation: \"a\\\\;b\", noInterpolation: \"a;b\" },\n      },\n      {\n        input: \"a;b;c\",\n        expected: { interpolation: \"a\\\\;b\\\\;c\", noInterpolation: \"a;b;c\" },\n      },\n    ],\n    \"question marks ('?')\": [\n      {\n        input: \"a?b\",\n        expected: { interpolation: \"a\\\\?b\", noInterpolation: \"a?b\" },\n      },\n      {\n        input: \"a?b?c\",\n        expected: { interpolation: \"a\\\\?b\\\\?c\", noInterpolation: \"a?b?c\" },\n      },\n    ],\n    \"parentheses ('(', ')')\": [\n      {\n        input: \"a(b\",\n        expected: { interpolation: \"a\\\\(b\", noInterpolation: \"a(b\" },\n      },\n      {\n        input: \"a)b\",\n        expected: { interpolation: \"a\\\\)b\", noInterpolation: \"a)b\" },\n      },\n      {\n        input: \"a(b(c\",\n        expected: { interpolation: \"a\\\\(b\\\\(c\", noInterpolation: \"a(b(c\" },\n      },\n      {\n        input: \"a)b)c\",\n        expected: { interpolation: \"a\\\\)b\\\\)c\", noInterpolation: \"a)b)c\" },\n      },\n      {\n        input: \"a(b)c\",\n        expected: { interpolation: \"a\\\\(b\\\\)c\", noInterpolation: \"a(b)c\" },\n      },\n      {\n        input: \"a(b,c)d\",\n        expected: { interpolation: \"a\\\\(b,c\\\\)d\", noInterpolation: \"a(b,c)d\" },\n      },\n    ],\n    \"square brackets ('[', ']')\": [\n      {\n        input: \"a[b\",\n        expected: { interpolation: \"a[b\", noInterpolation: \"a[b\" },\n      },\n      {\n        input: \"a]b\",\n        expected: { interpolation: \"a]b\", noInterpolation: \"a]b\" },\n      },\n      {\n        input: \"a[b[c\",\n        expected: { interpolation: \"a[b[c\", noInterpolation: \"a[b[c\" },\n      },\n      {\n        input: \"a]b]c\",\n        expected: { interpolation: \"a]b]c\", noInterpolation: \"a]b]c\" },\n      },\n      {\n        input: \"a[b]c\",\n        expected: { interpolation: \"a[b]c\", noInterpolation: \"a[b]c\" },\n      },\n      {\n        input: \"a[b,c]d\",\n        expected: { interpolation: \"a[b,c]d\", noInterpolation: \"a[b,c]d\" },\n      },\n    ],\n    \"curly brackets ('{', '}')\": [\n      {\n        input: \"a{b\",\n        expected: { interpolation: \"a\\\\{b\", noInterpolation: \"a{b\" },\n      },\n      {\n        input: \"a}b\",\n        expected: { interpolation: \"a}b\", noInterpolation: \"a}b\" },\n      },\n      {\n        input: \"a{b{c\",\n        expected: { interpolation: \"a\\\\{b\\\\{c\", noInterpolation: \"a{b{c\" },\n      },\n      {\n        input: \"a}b}c\",\n        expected: { interpolation: \"a}b}c\", noInterpolation: \"a}b}c\" },\n      },\n      {\n        input: \"a{b}c\",\n        expected: { interpolation: \"a\\\\{b}c\", noInterpolation: \"a{b}c\" },\n      },\n      {\n        input: \"a{b,c}d\",\n        expected: { interpolation: \"a\\\\{b,c}d\", noInterpolation: \"a{b,c}d\" },\n      },\n      {\n        input: \"a{,b}c\",\n        expected: { interpolation: \"a\\\\{,b}c\", noInterpolation: \"a{,b}c\" },\n      },\n      {\n        input: \"a{b,}c\",\n        expected: { interpolation: \"a\\\\{b,}c\", noInterpolation: \"a{b,}c\" },\n      },\n      {\n        input: \"a{bc,de}f\",\n        expected: {\n          interpolation: \"a\\\\{bc,de}f\",\n          noInterpolation: \"a{bc,de}f\",\n        },\n      },\n      {\n        input: \"a{b,{c,d},e}f\",\n        expected: {\n          interpolation: \"a\\\\{b,\\\\{c,d},e}f\",\n          noInterpolation: \"a{b,{c,d},e}f\",\n        },\n      },\n      {\n        input: \"a{0..2}b\",\n        expected: { interpolation: \"a\\\\{0..2}b\", noInterpolation: \"a{0..2}b\" },\n      },\n      {\n        input: \"a{\\u000Db,c}d\",\n        expected: {\n          interpolation: \"a\\\\{b,c}d\",\n          noInterpolation: \"a{b,c}d\",\n        },\n      },\n      {\n        input: \"a{\\u2028b,c}d\",\n        expected: {\n          interpolation: \"a\\\\{\\u2028b,c}d\",\n          noInterpolation: \"a{\\u2028b,c}d\",\n        },\n      },\n      {\n        input: \"a{\\u2029b,c}d\",\n        expected: {\n          interpolation: \"a\\\\{\\u2029b,c}d\",\n          noInterpolation: \"a{\\u2029b,c}d\",\n        },\n      },\n      {\n        input: \"a{b,c\\u000D}d\",\n        expected: {\n          interpolation: \"a\\\\{b,c}d\",\n          noInterpolation: \"a{b,c}d\",\n        },\n      },\n      {\n        input: \"a{b,c\\u2028}d\",\n        expected: {\n          interpolation: \"a\\\\{b,c\\u2028}d\",\n          noInterpolation: \"a{b,c\\u2028}d\",\n        },\n      },\n      {\n        input: \"a{b,c\\u2029}d\",\n        expected: {\n          interpolation: \"a\\\\{b,c\\u2029}d\",\n          noInterpolation: \"a{b,c\\u2029}d\",\n        },\n      },\n      {\n        input: \"a{\\u000D0..2}b\",\n        expected: {\n          interpolation: \"a\\\\{0..2}b\",\n          noInterpolation: \"a{0..2}b\",\n        },\n      },\n      {\n        input: \"a{\\u20280..2}b\",\n        expected: {\n          interpolation: \"a\\\\{\\u20280..2}b\",\n          noInterpolation: \"a{\\u20280..2}b\",\n        },\n      },\n      {\n        input: \"a{\\u20290..2}b\",\n        expected: {\n          interpolation: \"a\\\\{\\u20290..2}b\",\n          noInterpolation: \"a{\\u20290..2}b\",\n        },\n      },\n      {\n        input: \"a{0..2\\u000D}b\",\n        expected: {\n          interpolation: \"a\\\\{0..2}b\",\n          noInterpolation: \"a{0..2}b\",\n        },\n      },\n      {\n        input: \"a{0..2\\u2028}b\",\n        expected: {\n          interpolation: \"a\\\\{0..2\\u2028}b\",\n          noInterpolation: \"a{0..2\\u2028}b\",\n        },\n      },\n      {\n        input: \"a{0..2\\u2029}b\",\n        expected: {\n          interpolation: \"a\\\\{0..2\\u2029}b\",\n          noInterpolation: \"a{0..2\\u2029}b\",\n        },\n      },\n      {\n        input: \"a{{b,c}\",\n        expected: { interpolation: \"a\\\\{\\\\{b,c}\", noInterpolation: \"a{{b,c}\" },\n      },\n      {\n        input: \"a{b{c,d}\",\n        expected: {\n          interpolation: \"a\\\\{b\\\\{c,d}\",\n          noInterpolation: \"a{b{c,d}\",\n        },\n      },\n    ],\n    \"angle brackets ('<', '>')\": [\n      {\n        input: \"a<b\",\n        expected: { interpolation: \"a\\\\<b\", noInterpolation: \"a<b\" },\n      },\n      {\n        input: \"a>b\",\n        expected: { interpolation: \"a\\\\>b\", noInterpolation: \"a>b\" },\n      },\n      {\n        input: \"a<b<c\",\n        expected: { interpolation: \"a\\\\<b\\\\<c\", noInterpolation: \"a<b<c\" },\n      },\n      {\n        input: \"a>b>c\",\n        expected: { interpolation: \"a\\\\>b\\\\>c\", noInterpolation: \"a>b>c\" },\n      },\n      {\n        input: \"a<b>c\",\n        expected: { interpolation: \"a\\\\<b\\\\>c\", noInterpolation: \"a<b>c\" },\n      },\n    ],\n  },\n  [binDash]: {\n    \"sample strings\": [\n      {\n        input: \"foobar\",\n        expected: { interpolation: \"foobar\", noInterpolation: \"foobar\" },\n      },\n      {\n        input: \"Hello world\",\n        expected: {\n          interpolation: \"Hello world\",\n          noInterpolation: \"Hello world\",\n        },\n      },\n    ],\n    \"<null> (\\\\0)\": [\n      {\n        input: \"a\\x00b\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\x00b\\x00c\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n    ],\n    \"<backspace> ('\\\\b')\": [\n      {\n        input: \"a\\bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\bb\\bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\b\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<character tabulation> (\\\\t)\": [\n      {\n        input: \"a\\tb\",\n        expected: { interpolation: \"a\\tb\", noInterpolation: \"a\\tb\" },\n      },\n      {\n        input: \"a\\tb\\tc\",\n        expected: { interpolation: \"a\\tb\\tc\", noInterpolation: \"a\\tb\\tc\" },\n      },\n      {\n        input: \"a\\t\",\n        expected: { interpolation: \"a\\t\", noInterpolation: \"a\\t\" },\n      },\n      {\n        input: \"\\ta\",\n        expected: { interpolation: \"\\ta\", noInterpolation: \"\\ta\" },\n      },\n    ],\n    \"<end of line> ('\\\\n')\": [\n      {\n        input: \"a\\nb\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a\\nb\" },\n      },\n      {\n        input: \"a\\nb\\nc\",\n        expected: { interpolation: \"a b c\", noInterpolation: \"a\\nb\\nc\" },\n      },\n      {\n        input: \"a\\n\",\n        expected: { interpolation: \"a \", noInterpolation: \"a\\n\" },\n      },\n      {\n        input: \"\\na\",\n        expected: { interpolation: \" a\", noInterpolation: \"\\na\" },\n      },\n    ],\n    \"<line tabulation> (\\\\v)\": [\n      {\n        input: \"a\\vb\",\n        expected: { interpolation: \"a\\vb\", noInterpolation: \"a\\vb\" },\n      },\n      {\n        input: \"a\\vb\\vc\",\n        expected: { interpolation: \"a\\vb\\vc\", noInterpolation: \"a\\vb\\vc\" },\n      },\n      {\n        input: \"a\\v\",\n        expected: { interpolation: \"a\\v\", noInterpolation: \"a\\v\" },\n      },\n      {\n        input: \"\\va\",\n        expected: { interpolation: \"\\va\", noInterpolation: \"\\va\" },\n      },\n    ],\n    \"<form feed> (\\\\f)\": [\n      {\n        input: \"a\\fb\",\n        expected: { interpolation: \"a\\fb\", noInterpolation: \"a\\fb\" },\n      },\n      {\n        input: \"a\\fb\\fc\",\n        expected: { interpolation: \"a\\fb\\fc\", noInterpolation: \"a\\fb\\fc\" },\n      },\n      {\n        input: \"a\\f\",\n        expected: { interpolation: \"a\\f\", noInterpolation: \"a\\f\" },\n      },\n      {\n        input: \"\\fa\",\n        expected: { interpolation: \"\\fa\", noInterpolation: \"\\fa\" },\n      },\n    ],\n    \"<carriage return> ('\\\\r')\": [\n      {\n        input: \"a\\rb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\rb\\rc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\ra\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\r\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\r\\nb\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a\\r\\nb\" },\n      },\n    ],\n    \"<escape> ('\\\\u001B')\": [\n      {\n        input: \"a\\u001Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u001Bb\\u001Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u001Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u001B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<space> (' ')\": [\n      {\n        input: \"a b\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a b\" },\n      },\n      {\n        input: \"a b c\",\n        expected: { interpolation: \"a b c\", noInterpolation: \"a b c\" },\n      },\n      {\n        input: \"a \",\n        expected: { interpolation: \"a \", noInterpolation: \"a \" },\n      },\n      {\n        input: \" a\",\n        expected: { interpolation: \" a\", noInterpolation: \" a\" },\n      },\n    ],\n    \"<next line> (\\\\u0085)\": [\n      {\n        input: \"a\\u0085b\",\n        expected: {\n          interpolation: \"a\\u0085b\",\n          noInterpolation: \"a\\u0085b\",\n        },\n      },\n      {\n        input: \"a\\u0085b\\u0085c\",\n        expected: {\n          interpolation: \"a\\u0085b\\u0085c\",\n          noInterpolation: \"a\\u0085b\\u0085c\",\n        },\n      },\n      {\n        input: \"a\\u0085\",\n        expected: {\n          interpolation: \"a\\u0085\",\n          noInterpolation: \"a\\u0085\",\n        },\n      },\n      {\n        input: \"\\u0085a\",\n        expected: {\n          interpolation: \"\\u0085a\",\n          noInterpolation: \"\\u0085a\",\n        },\n      },\n    ],\n    \"<control sequence introducer> ('\\\\u009B')\": [\n      {\n        input: \"a\\u009Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u009Bb\\u009Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u009Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u009B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<no break space> (\\\\u00A0)\": [\n      {\n        input: \"a\\u00A0b\",\n        expected: {\n          interpolation: \"a\\u00A0b\",\n          noInterpolation: \"a\\u00A0b\",\n        },\n      },\n      {\n        input: \"a\\u00A0b\\u00A0c\",\n        expected: {\n          interpolation: \"a\\u00A0b\\u00A0c\",\n          noInterpolation: \"a\\u00A0b\\u00A0c\",\n        },\n      },\n      {\n        input: \"a\\u00A0\",\n        expected: {\n          interpolation: \"a\\u00A0\",\n          noInterpolation: \"a\\u00A0\",\n        },\n      },\n      {\n        input: \"\\u00A0a\",\n        expected: {\n          interpolation: \"\\u00A0a\",\n          noInterpolation: \"\\u00A0a\",\n        },\n      },\n    ],\n    \"<en quad> (\\\\u2000)\": [\n      {\n        input: \"a\\u2000b\",\n        expected: {\n          interpolation: \"a\\u2000b\",\n          noInterpolation: \"a\\u2000b\",\n        },\n      },\n      {\n        input: \"a\\u2000b\\u2000c\",\n        expected: {\n          interpolation: \"a\\u2000b\\u2000c\",\n          noInterpolation: \"a\\u2000b\\u2000c\",\n        },\n      },\n      {\n        input: \"a\\u2000\",\n        expected: {\n          interpolation: \"a\\u2000\",\n          noInterpolation: \"a\\u2000\",\n        },\n      },\n      {\n        input: \"\\u2000a\",\n        expected: {\n          interpolation: \"\\u2000a\",\n          noInterpolation: \"\\u2000a\",\n        },\n      },\n    ],\n    \"<em quad> (\\\\u2001)\": [\n      {\n        input: \"a\\u2001b\",\n        expected: {\n          interpolation: \"a\\u2001b\",\n          noInterpolation: \"a\\u2001b\",\n        },\n      },\n      {\n        input: \"a\\u2001b\\u2001c\",\n        expected: {\n          interpolation: \"a\\u2001b\\u2001c\",\n          noInterpolation: \"a\\u2001b\\u2001c\",\n        },\n      },\n      {\n        input: \"a\\u2001\",\n        expected: {\n          interpolation: \"a\\u2001\",\n          noInterpolation: \"a\\u2001\",\n        },\n      },\n      {\n        input: \"\\u2001a\",\n        expected: {\n          interpolation: \"\\u2001a\",\n          noInterpolation: \"\\u2001a\",\n        },\n      },\n    ],\n    \"<en space> (\\\\u2002)\": [\n      {\n        input: \"a\\u2002b\",\n        expected: {\n          interpolation: \"a\\u2002b\",\n          noInterpolation: \"a\\u2002b\",\n        },\n      },\n      {\n        input: \"a\\u2002b\\u2002c\",\n        expected: {\n          interpolation: \"a\\u2002b\\u2002c\",\n          noInterpolation: \"a\\u2002b\\u2002c\",\n        },\n      },\n      {\n        input: \"a\\u2002\",\n        expected: {\n          interpolation: \"a\\u2002\",\n          noInterpolation: \"a\\u2002\",\n        },\n      },\n      {\n        input: \"\\u2002a\",\n        expected: {\n          interpolation: \"\\u2002a\",\n          noInterpolation: \"\\u2002a\",\n        },\n      },\n    ],\n    \"<em space> (\\\\u2003)\": [\n      {\n        input: \"a\\u2003b\",\n        expected: {\n          interpolation: \"a\\u2003b\",\n          noInterpolation: \"a\\u2003b\",\n        },\n      },\n      {\n        input: \"a\\u2003b\\u2003c\",\n        expected: {\n          interpolation: \"a\\u2003b\\u2003c\",\n          noInterpolation: \"a\\u2003b\\u2003c\",\n        },\n      },\n      {\n        input: \"a\\u2003\",\n        expected: {\n          interpolation: \"a\\u2003\",\n          noInterpolation: \"a\\u2003\",\n        },\n      },\n      {\n        input: \"\\u2003a\",\n        expected: {\n          interpolation: \"\\u2003a\",\n          noInterpolation: \"\\u2003a\",\n        },\n      },\n    ],\n    \"<three-per-em space> (\\\\u2004)\": [\n      {\n        input: \"a\\u2004b\",\n        expected: {\n          interpolation: \"a\\u2004b\",\n          noInterpolation: \"a\\u2004b\",\n        },\n      },\n      {\n        input: \"a\\u2004b\\u2004c\",\n        expected: {\n          interpolation: \"a\\u2004b\\u2004c\",\n          noInterpolation: \"a\\u2004b\\u2004c\",\n        },\n      },\n      {\n        input: \"a\\u2004\",\n        expected: {\n          interpolation: \"a\\u2004\",\n          noInterpolation: \"a\\u2004\",\n        },\n      },\n      {\n        input: \"\\u2004a\",\n        expected: {\n          interpolation: \"\\u2004a\",\n          noInterpolation: \"\\u2004a\",\n        },\n      },\n    ],\n    \"<four-per-em space> (\\\\u2005)\": [\n      {\n        input: \"a\\u2005b\",\n        expected: {\n          interpolation: \"a\\u2005b\",\n          noInterpolation: \"a\\u2005b\",\n        },\n      },\n      {\n        input: \"a\\u2005b\\u2005c\",\n        expected: {\n          interpolation: \"a\\u2005b\\u2005c\",\n          noInterpolation: \"a\\u2005b\\u2005c\",\n        },\n      },\n      {\n        input: \"a\\u2005\",\n        expected: {\n          interpolation: \"a\\u2005\",\n          noInterpolation: \"a\\u2005\",\n        },\n      },\n      {\n        input: \"\\u2005a\",\n        expected: {\n          interpolation: \"\\u2005a\",\n          noInterpolation: \"\\u2005a\",\n        },\n      },\n    ],\n    \"<six-per-em space> (\\\\u2006)\": [\n      {\n        input: \"a\\u2006b\",\n        expected: {\n          interpolation: \"a\\u2006b\",\n          noInterpolation: \"a\\u2006b\",\n        },\n      },\n      {\n        input: \"a\\u2006b\\u2006c\",\n        expected: {\n          interpolation: \"a\\u2006b\\u2006c\",\n          noInterpolation: \"a\\u2006b\\u2006c\",\n        },\n      },\n      {\n        input: \"a\\u2006\",\n        expected: {\n          interpolation: \"a\\u2006\",\n          noInterpolation: \"a\\u2006\",\n        },\n      },\n      {\n        input: \"\\u2006a\",\n        expected: {\n          interpolation: \"\\u2006a\",\n          noInterpolation: \"\\u2006a\",\n        },\n      },\n    ],\n    \"<figure space> (\\\\u2007)\": [\n      {\n        input: \"a\\u2007b\",\n        expected: {\n          interpolation: \"a\\u2007b\",\n          noInterpolation: \"a\\u2007b\",\n        },\n      },\n      {\n        input: \"a\\u2007b\\u2007c\",\n        expected: {\n          interpolation: \"a\\u2007b\\u2007c\",\n          noInterpolation: \"a\\u2007b\\u2007c\",\n        },\n      },\n      {\n        input: \"a\\u2007\",\n        expected: {\n          interpolation: \"a\\u2007\",\n          noInterpolation: \"a\\u2007\",\n        },\n      },\n      {\n        input: \"\\u2007a\",\n        expected: {\n          interpolation: \"\\u2007a\",\n          noInterpolation: \"\\u2007a\",\n        },\n      },\n    ],\n    \"<punctuation space> (\\\\u2008)\": [\n      {\n        input: \"a\\u2008b\",\n        expected: {\n          interpolation: \"a\\u2008b\",\n          noInterpolation: \"a\\u2008b\",\n        },\n      },\n      {\n        input: \"a\\u2008b\\u2008c\",\n        expected: {\n          interpolation: \"a\\u2008b\\u2008c\",\n          noInterpolation: \"a\\u2008b\\u2008c\",\n        },\n      },\n      {\n        input: \"a\\u2008\",\n        expected: {\n          interpolation: \"a\\u2008\",\n          noInterpolation: \"a\\u2008\",\n        },\n      },\n      {\n        input: \"\\u2008a\",\n        expected: {\n          interpolation: \"\\u2008a\",\n          noInterpolation: \"\\u2008a\",\n        },\n      },\n    ],\n    \"<thin space> (\\\\u2009)\": [\n      {\n        input: \"a\\u2009b\",\n        expected: {\n          interpolation: \"a\\u2009b\",\n          noInterpolation: \"a\\u2009b\",\n        },\n      },\n      {\n        input: \"a\\u2009b\\u2009c\",\n        expected: {\n          interpolation: \"a\\u2009b\\u2009c\",\n          noInterpolation: \"a\\u2009b\\u2009c\",\n        },\n      },\n      {\n        input: \"a\\u2009\",\n        expected: {\n          interpolation: \"a\\u2009\",\n          noInterpolation: \"a\\u2009\",\n        },\n      },\n      {\n        input: \"\\u2009a\",\n        expected: {\n          interpolation: \"\\u2009a\",\n          noInterpolation: \"\\u2009a\",\n        },\n      },\n    ],\n    \"<hair space> (\\\\u200A)\": [\n      {\n        input: \"a\\u200Ab\",\n        expected: {\n          interpolation: \"a\\u200Ab\",\n          noInterpolation: \"a\\u200Ab\",\n        },\n      },\n      {\n        input: \"a\\u200Ab\\u200Ac\",\n        expected: {\n          interpolation: \"a\\u200Ab\\u200Ac\",\n          noInterpolation: \"a\\u200Ab\\u200Ac\",\n        },\n      },\n      {\n        input: \"a\\u200A\",\n        expected: {\n          interpolation: \"a\\u200A\",\n          noInterpolation: \"a\\u200A\",\n        },\n      },\n      {\n        input: \"\\u200Aa\",\n        expected: {\n          interpolation: \"\\u200Aa\",\n          noInterpolation: \"\\u200Aa\",\n        },\n      },\n    ],\n    \"<line separator> (\\\\u2028)\": [\n      {\n        input: \"a\\u2028b\",\n        expected: {\n          interpolation: \"a\\u2028b\",\n          noInterpolation: \"a\\u2028b\",\n        },\n      },\n      {\n        input: \"a\\u2028b\\u2028c\",\n        expected: {\n          interpolation: \"a\\u2028b\\u2028c\",\n          noInterpolation: \"a\\u2028b\\u2028c\",\n        },\n      },\n      {\n        input: \"a\\u2028\",\n        expected: {\n          interpolation: \"a\\u2028\",\n          noInterpolation: \"a\\u2028\",\n        },\n      },\n      {\n        input: \"\\u2028a\",\n        expected: {\n          interpolation: \"\\u2028a\",\n          noInterpolation: \"\\u2028a\",\n        },\n      },\n    ],\n    \"<paragraph separator> (\\\\u2029)\": [\n      {\n        input: \"a\\u2029b\",\n        expected: {\n          interpolation: \"a\\u2029b\",\n          noInterpolation: \"a\\u2029b\",\n        },\n      },\n      {\n        input: \"a\\u2029b\\u2029c\",\n        expected: {\n          interpolation: \"a\\u2029b\\u2029c\",\n          noInterpolation: \"a\\u2029b\\u2029c\",\n        },\n      },\n      {\n        input: \"a\\u2029\",\n        expected: {\n          interpolation: \"a\\u2029\",\n          noInterpolation: \"a\\u2029\",\n        },\n      },\n      {\n        input: \"\\u2029a\",\n        expected: {\n          interpolation: \"\\u2029a\",\n          noInterpolation: \"\\u2029a\",\n        },\n      },\n    ],\n    \"<narrow no-break space> (\\\\u202F)\": [\n      {\n        input: \"a\\u202Fb\",\n        expected: {\n          interpolation: \"a\\u202Fb\",\n          noInterpolation: \"a\\u202Fb\",\n        },\n      },\n      {\n        input: \"a\\u202Fb\\u202Fc\",\n        expected: {\n          interpolation: \"a\\u202Fb\\u202Fc\",\n          noInterpolation: \"a\\u202Fb\\u202Fc\",\n        },\n      },\n      {\n        input: \"a\\u202F\",\n        expected: {\n          interpolation: \"a\\u202F\",\n          noInterpolation: \"a\\u202F\",\n        },\n      },\n      {\n        input: \"\\u202Fa\",\n        expected: {\n          interpolation: \"\\u202Fa\",\n          noInterpolation: \"\\u202Fa\",\n        },\n      },\n    ],\n    \"<medium mathematical space> (\\\\u205F)\": [\n      {\n        input: \"a\\u205Fb\",\n        expected: {\n          interpolation: \"a\\u205Fb\",\n          noInterpolation: \"a\\u205Fb\",\n        },\n      },\n      {\n        input: \"a\\u205Fb\\u205Fc\",\n        expected: {\n          interpolation: \"a\\u205Fb\\u205Fc\",\n          noInterpolation: \"a\\u205Fb\\u205Fc\",\n        },\n      },\n      {\n        input: \"a\\u205F\",\n        expected: {\n          interpolation: \"a\\u205F\",\n          noInterpolation: \"a\\u205F\",\n        },\n      },\n      {\n        input: \"\\u205Fa\",\n        expected: {\n          interpolation: \"\\u205Fa\",\n          noInterpolation: \"\\u205Fa\",\n        },\n      },\n    ],\n    \"<ideographic space> (\\\\u3000)\": [\n      {\n        input: \"a\\u3000b\",\n        expected: {\n          interpolation: \"a\\u3000b\",\n          noInterpolation: \"a\\u3000b\",\n        },\n      },\n      {\n        input: \"a\\u3000b\\u3000c\",\n        expected: {\n          interpolation: \"a\\u3000b\\u3000c\",\n          noInterpolation: \"a\\u3000b\\u3000c\",\n        },\n      },\n      {\n        input: \"a\\u3000\",\n        expected: {\n          interpolation: \"a\\u3000\",\n          noInterpolation: \"a\\u3000\",\n        },\n      },\n      {\n        input: \"\\u3000a\",\n        expected: {\n          interpolation: \"\\u3000a\",\n          noInterpolation: \"\\u3000a\",\n        },\n      },\n    ],\n    \"<zero width no-break space> (\\\\uFEFF)\": [\n      {\n        input: \"a\\uFEFFb\",\n        expected: {\n          interpolation: \"a\\uFEFFb\",\n          noInterpolation: \"a\\uFEFFb\",\n        },\n      },\n      {\n        input: \"a\\uFEFFb\\uFEFFc\",\n        expected: {\n          interpolation: \"a\\uFEFFb\\uFEFFc\",\n          noInterpolation: \"a\\uFEFFb\\uFEFFc\",\n        },\n      },\n      {\n        input: \"a\\uFEFF\",\n        expected: {\n          interpolation: \"a\\uFEFF\",\n          noInterpolation: \"a\\uFEFF\",\n        },\n      },\n      {\n        input: \"\\uFEFFa\",\n        expected: {\n          interpolation: \"\\uFEFFa\",\n          noInterpolation: \"\\uFEFFa\",\n        },\n      },\n    ],\n    'single quotes (\"\\'\")': [\n      {\n        input: \"a'b\",\n        expected: {\n          interpolation: \"a\\\\'b\",\n          noInterpolation: \"a'b\",\n          quoted: \"a'\\\\''b\",\n        },\n      },\n      {\n        input: \"a'b'c\",\n        expected: {\n          interpolation: \"a\\\\'b\\\\'c\",\n          noInterpolation: \"a'b'c\",\n          quoted: \"a'\\\\''b'\\\\''c\",\n        },\n      },\n    ],\n    \"double quotes ('\\\"')\": [\n      {\n        input: 'a\"b',\n        expected: { interpolation: 'a\\\\\"b', noInterpolation: 'a\"b' },\n      },\n      {\n        input: 'a\"b\"c',\n        expected: { interpolation: 'a\\\\\"b\\\\\"c', noInterpolation: 'a\"b\"c' },\n      },\n    ],\n    \"backticks (')\": [\n      {\n        input: \"a`b\",\n        expected: { interpolation: \"a\\\\`b\", noInterpolation: \"a`b\" },\n      },\n      {\n        input: \"a`b`c\",\n        expected: { interpolation: \"a\\\\`b\\\\`c\", noInterpolation: \"a`b`c\" },\n      },\n    ],\n    \"tildes ('~')\": [\n      {\n        input: \"~a\",\n        expected: { interpolation: \"\\\\~a\", noInterpolation: \"~a\" },\n      },\n      {\n        input: \"~a~b\",\n        expected: { interpolation: \"\\\\~a~b\", noInterpolation: \"~a~b\" },\n      },\n      {\n        input: \"a~b\",\n        expected: { interpolation: \"a~b\", noInterpolation: \"a~b\" },\n      },\n      {\n        input: \"a~b~c\",\n        expected: { interpolation: \"a~b~c\", noInterpolation: \"a~b~c\" },\n      },\n      {\n        input: \"a~b=\",\n        expected: { interpolation: \"a~b=\", noInterpolation: \"a~b=\" },\n      },\n      {\n        input: \"a=~\",\n        expected: { interpolation: \"a=~\", noInterpolation: \"a=~\" },\n      },\n      {\n        input: \"a~b=~\",\n        expected: { interpolation: \"a~b=~\", noInterpolation: \"a~b=~\" },\n      },\n      {\n        input: \"a=b~\",\n        expected: { interpolation: \"a=b~\", noInterpolation: \"a=b~\" },\n      },\n      {\n        input: \"a=~b\",\n        expected: { interpolation: \"a=~b\", noInterpolation: \"a=~b\" },\n      },\n      {\n        input: \"a=:~\",\n        expected: { interpolation: \"a=:~\", noInterpolation: \"a=:~\" },\n      },\n      {\n        input: \"a=b:~\",\n        expected: { interpolation: \"a=b:~\", noInterpolation: \"a=b:~\" },\n      },\n      {\n        input: \"a=~:\",\n        expected: { interpolation: \"a=~:\", noInterpolation: \"a=~:\" },\n      },\n      {\n        input: \"a=~:b\",\n        expected: { interpolation: \"a=~:b\", noInterpolation: \"a=~:b\" },\n      },\n      {\n        input: \"a=~:~\",\n        expected: { interpolation: \"a=~:~\", noInterpolation: \"a=~:~\" },\n      },\n      {\n        input: \"a=:~:\",\n        expected: { interpolation: \"a=:~:\", noInterpolation: \"a=:~:\" },\n      },\n      {\n        input: \"a=:~:b\",\n        expected: { interpolation: \"a=:~:b\", noInterpolation: \"a=:~:b\" },\n      },\n      {\n        input: \"a=b:~:\",\n        expected: { interpolation: \"a=b:~:\", noInterpolation: \"a=b:~:\" },\n      },\n      {\n        input: \"a=b:~:c\",\n        expected: { interpolation: \"a=b:~:c\", noInterpolation: \"a=b:~:c\" },\n      },\n      {\n        input: \"a=~=\",\n        expected: { interpolation: \"a=~=\", noInterpolation: \"a=~=\" },\n      },\n      {\n        input: \"a=~-\",\n        expected: { interpolation: \"a=~-\", noInterpolation: \"a=~-\" },\n      },\n      {\n        input: \"a=~+\",\n        expected: { interpolation: \"a=~+\", noInterpolation: \"a=~+\" },\n      },\n      {\n        input: \"a=~/\",\n        expected: { interpolation: \"a=~/\", noInterpolation: \"a=~/\" },\n      },\n      {\n        input: \"a=~0\",\n        expected: { interpolation: \"a=~0\", noInterpolation: \"a=~0\" },\n      },\n      {\n        input: \"a=~ \",\n        expected: { interpolation: \"a=~ \", noInterpolation: \"a=~ \" },\n      },\n      {\n        input: \"a ~b\",\n        expected: { interpolation: \"a \\\\~b\", noInterpolation: \"a ~b\" },\n      },\n      {\n        input: \"a\t~b\",\n        expected: { interpolation: \"a\t\\\\~b\", noInterpolation: \"a\t~b\" },\n      },\n    ],\n    \"hashtags ('#')\": [\n      {\n        input: \"#a\",\n        expected: { interpolation: \"\\\\#a\", noInterpolation: \"#a\" },\n      },\n      {\n        input: \"#a#b\",\n        expected: { interpolation: \"\\\\#a#b\", noInterpolation: \"#a#b\" },\n      },\n      {\n        input: \"a#b\",\n        expected: { interpolation: \"a#b\", noInterpolation: \"a#b\" },\n      },\n      {\n        input: \"a#b#c\",\n        expected: { interpolation: \"a#b#c\", noInterpolation: \"a#b#c\" },\n      },\n      {\n        input: \"a #b\",\n        expected: { interpolation: \"a \\\\#b\", noInterpolation: \"a #b\" },\n      },\n      {\n        input: \"a\t#b\",\n        expected: { interpolation: \"a\t\\\\#b\", noInterpolation: \"a\t#b\" },\n      },\n    ],\n    \"dollar signs ('$')\": [\n      {\n        input: \"a$b\",\n        expected: { interpolation: \"a\\\\$b\", noInterpolation: \"a$b\" },\n      },\n      {\n        input: \"a$b$c\",\n        expected: { interpolation: \"a\\\\$b\\\\$c\", noInterpolation: \"a$b$c\" },\n      },\n    ],\n    \"ampersands ('&')\": [\n      {\n        input: \"a&b\",\n        expected: { interpolation: \"a\\\\&b\", noInterpolation: \"a&b\" },\n      },\n      {\n        input: \"a&b&c\",\n        expected: { interpolation: \"a\\\\&b\\\\&c\", noInterpolation: \"a&b&c\" },\n      },\n    ],\n    \"asterisks ('*')\": [\n      {\n        input: \"a*b\",\n        expected: { interpolation: \"a\\\\*b\", noInterpolation: \"a*b\" },\n      },\n      {\n        input: \"a*b*c\",\n        expected: { interpolation: \"a\\\\*b\\\\*c\", noInterpolation: \"a*b*c\" },\n      },\n    ],\n    \"equals ('=')\": [\n      {\n        input: \"=a\",\n        expected: { interpolation: \"=a\", noInterpolation: \"=a\" },\n      },\n      {\n        input: \"=a=b\",\n        expected: { interpolation: \"=a=b\", noInterpolation: \"=a=b\" },\n      },\n      {\n        input: \"a=b\",\n        expected: { interpolation: \"a=b\", noInterpolation: \"a=b\" },\n      },\n      {\n        input: \"a=b=c\",\n        expected: { interpolation: \"a=b=c\", noInterpolation: \"a=b=c\" },\n      },\n    ],\n    \"backslashes ('\\\\')\": [\n      {\n        input: \"a\\\\b\",\n        expected: { interpolation: \"a\\\\\\\\b\", noInterpolation: \"a\\\\b\" },\n      },\n      {\n        input: \"a\\\\b\\\\c\",\n        expected: { interpolation: \"a\\\\\\\\b\\\\\\\\c\", noInterpolation: \"a\\\\b\\\\c\" },\n      },\n    ],\n    \"pipes ('|')\": [\n      {\n        input: \"a|b\",\n        expected: { interpolation: \"a\\\\|b\", noInterpolation: \"a|b\" },\n      },\n      {\n        input: \"a|b|c\",\n        expected: { interpolation: \"a\\\\|b\\\\|c\", noInterpolation: \"a|b|c\" },\n      },\n    ],\n    \"semicolons (';')\": [\n      {\n        input: \"a;b\",\n        expected: { interpolation: \"a\\\\;b\", noInterpolation: \"a;b\" },\n      },\n      {\n        input: \"a;b;c\",\n        expected: { interpolation: \"a\\\\;b\\\\;c\", noInterpolation: \"a;b;c\" },\n      },\n    ],\n    \"question marks ('?')\": [\n      {\n        input: \"a?b\",\n        expected: { interpolation: \"a\\\\?b\", noInterpolation: \"a?b\" },\n      },\n      {\n        input: \"a?b?c\",\n        expected: { interpolation: \"a\\\\?b\\\\?c\", noInterpolation: \"a?b?c\" },\n      },\n    ],\n    \"parentheses ('(', ')')\": [\n      {\n        input: \"a(b\",\n        expected: { interpolation: \"a\\\\(b\", noInterpolation: \"a(b\" },\n      },\n      {\n        input: \"a)b\",\n        expected: { interpolation: \"a\\\\)b\", noInterpolation: \"a)b\" },\n      },\n      {\n        input: \"a(b(c\",\n        expected: { interpolation: \"a\\\\(b\\\\(c\", noInterpolation: \"a(b(c\" },\n      },\n      {\n        input: \"a)b)c\",\n        expected: { interpolation: \"a\\\\)b\\\\)c\", noInterpolation: \"a)b)c\" },\n      },\n      {\n        input: \"a(b)c\",\n        expected: { interpolation: \"a\\\\(b\\\\)c\", noInterpolation: \"a(b)c\" },\n      },\n      {\n        input: \"a(b,c)d\",\n        expected: { interpolation: \"a\\\\(b,c\\\\)d\", noInterpolation: \"a(b,c)d\" },\n      },\n    ],\n    \"square brackets ('[', ']')\": [\n      {\n        input: \"a[b\",\n        expected: { interpolation: \"a[b\", noInterpolation: \"a[b\" },\n      },\n      {\n        input: \"a]b\",\n        expected: { interpolation: \"a]b\", noInterpolation: \"a]b\" },\n      },\n      {\n        input: \"a[b[c\",\n        expected: { interpolation: \"a[b[c\", noInterpolation: \"a[b[c\" },\n      },\n      {\n        input: \"a]b]c\",\n        expected: { interpolation: \"a]b]c\", noInterpolation: \"a]b]c\" },\n      },\n      {\n        input: \"a[b]c\",\n        expected: { interpolation: \"a[b]c\", noInterpolation: \"a[b]c\" },\n      },\n      {\n        input: \"a[b,c]d\",\n        expected: { interpolation: \"a[b,c]d\", noInterpolation: \"a[b,c]d\" },\n      },\n    ],\n    \"curly brackets ('{', '}')\": [\n      {\n        input: \"a{b\",\n        expected: { interpolation: \"a{b\", noInterpolation: \"a{b\" },\n      },\n      {\n        input: \"a}b\",\n        expected: { interpolation: \"a}b\", noInterpolation: \"a}b\" },\n      },\n      {\n        input: \"a{b{c\",\n        expected: { interpolation: \"a{b{c\", noInterpolation: \"a{b{c\" },\n      },\n      {\n        input: \"a}b}c\",\n        expected: { interpolation: \"a}b}c\", noInterpolation: \"a}b}c\" },\n      },\n      {\n        input: \"a{b}c\",\n        expected: { interpolation: \"a{b}c\", noInterpolation: \"a{b}c\" },\n      },\n      {\n        input: \"a{b,c}d\",\n        expected: { interpolation: \"a{b,c}d\", noInterpolation: \"a{b,c}d\" },\n      },\n      {\n        input: \"a{,b}c\",\n        expected: { interpolation: \"a{,b}c\", noInterpolation: \"a{,b}c\" },\n      },\n      {\n        input: \"a{b,}c\",\n        expected: { interpolation: \"a{b,}c\", noInterpolation: \"a{b,}c\" },\n      },\n      {\n        input: \"a{bc,de}f\",\n        expected: {\n          interpolation: \"a{bc,de}f\",\n          noInterpolation: \"a{bc,de}f\",\n        },\n      },\n      {\n        input: \"a{b,{c,d},e}f\",\n        expected: {\n          interpolation: \"a{b,{c,d},e}f\",\n          noInterpolation: \"a{b,{c,d},e}f\",\n        },\n      },\n      {\n        input: \"a{0..2}b\",\n        expected: { interpolation: \"a{0..2}b\", noInterpolation: \"a{0..2}b\" },\n      },\n      {\n        input: \"a{\\u000Db,c}d\",\n        expected: {\n          interpolation: \"a{b,c}d\",\n          noInterpolation: \"a{b,c}d\",\n        },\n      },\n      {\n        input: \"a{\\u2028b,c}d\",\n        expected: {\n          interpolation: \"a{\\u2028b,c}d\",\n          noInterpolation: \"a{\\u2028b,c}d\",\n        },\n      },\n      {\n        input: \"a{\\u2029b,c}d\",\n        expected: {\n          interpolation: \"a{\\u2029b,c}d\",\n          noInterpolation: \"a{\\u2029b,c}d\",\n        },\n      },\n      {\n        input: \"a{b,c\\u000D}d\",\n        expected: {\n          interpolation: \"a{b,c}d\",\n          noInterpolation: \"a{b,c}d\",\n        },\n      },\n      {\n        input: \"a{b,c\\u2028}d\",\n        expected: {\n          interpolation: \"a{b,c\\u2028}d\",\n          noInterpolation: \"a{b,c\\u2028}d\",\n        },\n      },\n      {\n        input: \"a{b,c\\u2029}d\",\n        expected: {\n          interpolation: \"a{b,c\\u2029}d\",\n          noInterpolation: \"a{b,c\\u2029}d\",\n        },\n      },\n      {\n        input: \"a{\\u000D0..2}b\",\n        expected: {\n          interpolation: \"a{0..2}b\",\n          noInterpolation: \"a{0..2}b\",\n        },\n      },\n      {\n        input: \"a{\\u20280..2}b\",\n        expected: {\n          interpolation: \"a{\\u20280..2}b\",\n          noInterpolation: \"a{\\u20280..2}b\",\n        },\n      },\n      {\n        input: \"a{\\u20290..2}b\",\n        expected: {\n          interpolation: \"a{\\u20290..2}b\",\n          noInterpolation: \"a{\\u20290..2}b\",\n        },\n      },\n      {\n        input: \"a{0..2\\u000D}b\",\n        expected: {\n          interpolation: \"a{0..2}b\",\n          noInterpolation: \"a{0..2}b\",\n        },\n      },\n      {\n        input: \"a{0..2\\u2028}b\",\n        expected: {\n          interpolation: \"a{0..2\\u2028}b\",\n          noInterpolation: \"a{0..2\\u2028}b\",\n        },\n      },\n      {\n        input: \"a{0..2\\u2029}b\",\n        expected: {\n          interpolation: \"a{0..2\\u2029}b\",\n          noInterpolation: \"a{0..2\\u2029}b\",\n        },\n      },\n    ],\n    \"angle brackets ('<', '>')\": [\n      {\n        input: \"a<b\",\n        expected: { interpolation: \"a\\\\<b\", noInterpolation: \"a<b\" },\n      },\n      {\n        input: \"a>b\",\n        expected: { interpolation: \"a\\\\>b\", noInterpolation: \"a>b\" },\n      },\n      {\n        input: \"a<b<c\",\n        expected: { interpolation: \"a\\\\<b\\\\<c\", noInterpolation: \"a<b<c\" },\n      },\n      {\n        input: \"a>b>c\",\n        expected: { interpolation: \"a\\\\>b\\\\>c\", noInterpolation: \"a>b>c\" },\n      },\n      {\n        input: \"a<b>c\",\n        expected: { interpolation: \"a\\\\<b\\\\>c\", noInterpolation: \"a<b>c\" },\n      },\n    ],\n  },\n  [binZsh]: {\n    \"sample strings\": [\n      {\n        input: \"foobar\",\n        expected: { interpolation: \"foobar\", noInterpolation: \"foobar\" },\n      },\n      {\n        input: \"Hello world\",\n        expected: {\n          interpolation: \"Hello world\",\n          noInterpolation: \"Hello world\",\n        },\n      },\n    ],\n    \"<null> (\\\\0)\": [\n      {\n        input: \"a\\x00b\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\x00b\\x00c\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n    ],\n    \"<backspace> ('\\\\b')\": [\n      {\n        input: \"a\\bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\bb\\bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\b\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<character tabulation> (\\\\t)\": [\n      {\n        input: \"a\\tb\",\n        expected: { interpolation: \"a\\tb\", noInterpolation: \"a\\tb\" },\n      },\n      {\n        input: \"a\\tb\\tc\",\n        expected: { interpolation: \"a\\tb\\tc\", noInterpolation: \"a\\tb\\tc\" },\n      },\n      {\n        input: \"a\\t\",\n        expected: { interpolation: \"a\\t\", noInterpolation: \"a\\t\" },\n      },\n      {\n        input: \"\\ta\",\n        expected: { interpolation: \"\\ta\", noInterpolation: \"\\ta\" },\n      },\n    ],\n    \"<end of line> ('\\\\n')\": [\n      {\n        input: \"a\\nb\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a\\nb\" },\n      },\n      {\n        input: \"a\\nb\\nc\",\n        expected: { interpolation: \"a b c\", noInterpolation: \"a\\nb\\nc\" },\n      },\n      {\n        input: \"a\\n\",\n        expected: { interpolation: \"a \", noInterpolation: \"a\\n\" },\n      },\n      {\n        input: \"\\na\",\n        expected: { interpolation: \" a\", noInterpolation: \"\\na\" },\n      },\n    ],\n    \"<line tabulation> (\\\\v)\": [\n      {\n        input: \"a\\vb\",\n        expected: { interpolation: \"a\\vb\", noInterpolation: \"a\\vb\" },\n      },\n      {\n        input: \"a\\vb\\vc\",\n        expected: { interpolation: \"a\\vb\\vc\", noInterpolation: \"a\\vb\\vc\" },\n      },\n      {\n        input: \"a\\v\",\n        expected: { interpolation: \"a\\v\", noInterpolation: \"a\\v\" },\n      },\n      {\n        input: \"\\va\",\n        expected: { interpolation: \"\\va\", noInterpolation: \"\\va\" },\n      },\n    ],\n    \"<form feed> (\\\\f)\": [\n      {\n        input: \"a\\fb\",\n        expected: { interpolation: \"a\\fb\", noInterpolation: \"a\\fb\" },\n      },\n      {\n        input: \"a\\fb\\fc\",\n        expected: { interpolation: \"a\\fb\\fc\", noInterpolation: \"a\\fb\\fc\" },\n      },\n      {\n        input: \"a\\f\",\n        expected: { interpolation: \"a\\f\", noInterpolation: \"a\\f\" },\n      },\n      {\n        input: \"\\fa\",\n        expected: { interpolation: \"\\fa\", noInterpolation: \"\\fa\" },\n      },\n    ],\n    \"<carriage return> ('\\\\r')\": [\n      {\n        input: \"a\\rb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\rb\\rc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\ra\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\r\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\r\\nb\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a\\r\\nb\" },\n      },\n    ],\n    \"<escape> ('\\\\u001B')\": [\n      {\n        input: \"a\\u001Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u001Bb\\u001Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u001Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u001B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<space> (' ')\": [\n      {\n        input: \"a b\",\n        expected: { interpolation: \"a b\", noInterpolation: \"a b\" },\n      },\n      {\n        input: \"a b c\",\n        expected: { interpolation: \"a b c\", noInterpolation: \"a b c\" },\n      },\n      {\n        input: \"a \",\n        expected: { interpolation: \"a \", noInterpolation: \"a \" },\n      },\n      {\n        input: \" a\",\n        expected: { interpolation: \" a\", noInterpolation: \" a\" },\n      },\n    ],\n    \"<next line> (\\\\u0085)\": [\n      {\n        input: \"a\\u0085b\",\n        expected: {\n          interpolation: \"a\\u0085b\",\n          noInterpolation: \"a\\u0085b\",\n        },\n      },\n      {\n        input: \"a\\u0085b\\u0085c\",\n        expected: {\n          interpolation: \"a\\u0085b\\u0085c\",\n          noInterpolation: \"a\\u0085b\\u0085c\",\n        },\n      },\n      {\n        input: \"a\\u0085\",\n        expected: {\n          interpolation: \"a\\u0085\",\n          noInterpolation: \"a\\u0085\",\n        },\n      },\n      {\n        input: \"\\u0085a\",\n        expected: {\n          interpolation: \"\\u0085a\",\n          noInterpolation: \"\\u0085a\",\n        },\n      },\n    ],\n    \"<control sequence introducer> ('\\\\u009B')\": [\n      {\n        input: \"a\\u009Bb\",\n        expected: { interpolation: \"ab\", noInterpolation: \"ab\" },\n      },\n      {\n        input: \"a\\u009Bb\\u009Bc\",\n        expected: { interpolation: \"abc\", noInterpolation: \"abc\" },\n      },\n      {\n        input: \"\\u009Ba\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n      {\n        input: \"a\\u009B\",\n        expected: { interpolation: \"a\", noInterpolation: \"a\" },\n      },\n    ],\n    \"<no break space> (\\\\u00A0)\": [\n      {\n        input: \"a\\u00A0b\",\n        expected: {\n          interpolation: \"a\\u00A0b\",\n          noInterpolation: \"a\\u00A0b\",\n        },\n      },\n      {\n        input: \"a\\u00A0b\\u00A0c\",\n        expected: {\n          interpolation: \"a\\u00A0b\\u00A0c\",\n          noInterpolation: \"a\\u00A0b\\u00A0c\",\n        },\n      },\n      {\n        input: \"a\\u00A0\",\n        expected: {\n          interpolation: \"a\\u00A0\",\n          noInterpolation: \"a\\u00A0\",\n        },\n      },\n      {\n        input: \"\\u00A0a\",\n        expected: {\n          interpolation: \"\\u00A0a\",\n          noInterpolation: \"\\u00A0a\",\n        },\n      },\n    ],\n    \"<en quad> (\\\\u2000)\": [\n      {\n        input: \"a\\u2000b\",\n        expected: {\n          interpolation: \"a\\u2000b\",\n          noInterpolation: \"a\\u2000b\",\n        },\n      },\n      {\n        input: \"a\\u2000b\\u2000c\",\n        expected: {\n          interpolation: \"a\\u2000b\\u2000c\",\n          noInterpolation: \"a\\u2000b\\u2000c\",\n        },\n      },\n      {\n        input: \"a\\u2000\",\n        expected: {\n          interpolation: \"a\\u2000\",\n          noInterpolation: \"a\\u2000\",\n        },\n      },\n      {\n        input: \"\\u2000a\",\n        expected: {\n          interpolation: \"\\u2000a\",\n          noInterpolation: \"\\u2000a\",\n        },\n      },\n    ],\n    \"<em quad> (\\\\u2001)\": [\n      {\n        input: \"a\\u2001b\",\n        expected: {\n          interpolation: \"a\\u2001b\",\n          noInterpolation: \"a\\u2001b\",\n        },\n      },\n      {\n        input: \"a\\u2001b\\u2001c\",\n        expected: {\n          interpolation: \"a\\u2001b\\u2001c\",\n          noInterpolation: \"a\\u2001b\\u2001c\",\n        },\n      },\n      {\n        input: \"a\\u2001\",\n        expected: {\n          interpolation: \"a\\u2001\",\n          noInterpolation: \"a\\u2001\",\n        },\n      },\n      {\n        input: \"\\u2001a\",\n        expected: {\n          interpolation: \"\\u2001a\",\n          noInterpolation: \"\\u2001a\",\n        },\n      },\n    ],\n    \"<en space> (\\\\u2002)\": [\n      {\n        input: \"a\\u2002b\",\n        expected: {\n          interpolation: \"a\\u2002b\",\n          noInterpolation: \"a\\u2002b\",\n        },\n      },\n      {\n        input: \"a\\u2002b\\u2002c\",\n        expected: {\n          interpolation: \"a\\u2002b\\u2002c\",\n          noInterpolation: \"a\\u2002b\\u2002c\",\n        },\n      },\n      {\n        input: \"a\\u2002\",\n        expected: {\n          interpolation: \"a\\u2002\",\n          noInterpolation: \"a\\u2002\",\n        },\n      },\n      {\n        input: \"\\u2002a\",\n        expected: {\n          interpolation: \"\\u2002a\",\n          noInterpolation: \"\\u2002a\",\n        },\n      },\n    ],\n    \"<em space> (\\\\u2003)\": [\n      {\n        input: \"a\\u2003b\",\n        expected: {\n          interpolation: \"a\\u2003b\",\n          noInterpolation: \"a\\u2003b\",\n        },\n      },\n      {\n        input: \"a\\u2003b\\u2003c\",\n        expected: {\n          interpolation: \"a\\u2003b\\u2003c\",\n          noInterpolation: \"a\\u2003b\\u2003c\",\n        },\n      },\n      {\n        input: \"a\\u2003\",\n        expected: {\n          interpolation: \"a\\u2003\",\n          noInterpolation: \"a\\u2003\",\n        },\n      },\n      {\n        input: \"\\u2003a\",\n        expected: {\n          interpolation: \"\\u2003a\",\n          noInterpolation: \"\\u2003a\",\n        },\n      },\n    ],\n    \"<three-per-em space> (\\\\u2004)\": [\n      {\n        input: \"a\\u2004b\",\n        expected: {\n          interpolation: \"a\\u2004b\",\n          noInterpolation: \"a\\u2004b\",\n        },\n      },\n      {\n        input: \"a\\u2004b\\u2004c\",\n        expected: {\n          interpolation: \"a\\u2004b\\u2004c\",\n          noInterpolation: \"a\\u2004b\\u2004c\",\n        },\n      },\n      {\n        input: \"a\\u2004\",\n        expected: {\n          interpolation: \"a\\u2004\",\n          noInterpolation: \"a\\u2004\",\n        },\n      },\n      {\n        input: \"\\u2004a\",\n        expected: {\n          interpolation: \"\\u2004a\",\n          noInterpolation: \"\\u2004a\",\n        },\n      },\n    ],\n    \"<four-per-em space> (\\\\u2005)\": [\n      {\n        input: \"a\\u2005b\",\n        expected: {\n          interpolation: \"a\\u2005b\",\n          noInterpolation: \"a\\u2005b\",\n        },\n      },\n      {\n        input: \"a\\u2005b\\u2005c\",\n        expected: {\n          interpolation: \"a\\u2005b\\u2005c\",\n          noInterpolation: \"a\\u2005b\\u2005c\",\n        },\n      },\n      {\n        input: \"a\\u2005\",\n        expected: {\n          interpolation: \"a\\u2005\",\n          noInterpolation: \"a\\u2005\",\n        },\n      },\n      {\n        input: \"\\u2005a\",\n        expected: {\n          interpolation: \"\\u2005a\",\n          noInterpolation: \"\\u2005a\",\n        },\n      },\n    ],\n    \"<six-per-em space> (\\\\u2006)\": [\n      {\n        input: \"a\\u2006b\",\n        expected: {\n          interpolation: \"a\\u2006b\",\n          noInterpolation: \"a\\u2006b\",\n        },\n      },\n      {\n        input: \"a\\u2006b\\u2006c\",\n        expected: {\n          interpolation: \"a\\u2006b\\u2006c\",\n          noInterpolation: \"a\\u2006b\\u2006c\",\n        },\n      },\n      {\n        input: \"a\\u2006\",\n        expected: {\n          interpolation: \"a\\u2006\",\n          noInterpolation: \"a\\u2006\",\n        },\n      },\n      {\n        input: \"\\u2006a\",\n        expected: {\n          interpolation: \"\\u2006a\",\n          noInterpolation: \"\\u2006a\",\n        },\n      },\n    ],\n    \"<figure space> (\\\\u2007)\": [\n      {\n        input: \"a\\u2007b\",\n        expected: {\n          interpolation: \"a\\u2007b\",\n          noInterpolation: \"a\\u2007b\",\n        },\n      },\n      {\n        input: \"a\\u2007b\\u2007c\",\n        expected: {\n          interpolation: \"a\\u2007b\\u2007c\",\n          noInterpolation: \"a\\u2007b\\u2007c\",\n        },\n      },\n      {\n        input: \"a\\u2007\",\n        expected: {\n          interpolation: \"a\\u2007\",\n          noInterpolation: \"a\\u2007\",\n        },\n      },\n      {\n        input: \"\\u2007a\",\n        expected: {\n          interpolation: \"\\u2007a\",\n          noInterpolation: \"\\u2007a\",\n        },\n      },\n    ],\n    \"<punctuation space> (\\\\u2008)\": [\n      {\n        input: \"a\\u2008b\",\n        expected: {\n          interpolation: \"a\\u2008b\",\n          noInterpolation: \"a\\u2008b\",\n        },\n      },\n      {\n        input: \"a\\u2008b\\u2008c\",\n        expected: {\n          interpolation: \"a\\u2008b\\u2008c\",\n          noInterpolation: \"a\\u2008b\\u2008c\",\n        },\n      },\n      {\n        input: \"a\\u2008\",\n        expected: {\n          interpolation: \"a\\u2008\",\n          noInterpolation: \"a\\u2008\",\n        },\n      },\n      {\n        input: \"\\u2008a\",\n        expected: {\n          interpolation: \"\\u2008a\",\n          noInterpolation: \"\\u2008a\",\n        },\n      },\n    ],\n    \"<thin space> (\\\\u2009)\": [\n      {\n        input: \"a\\u2009b\",\n        expected: {\n          interpolation: \"a\\u2009b\",\n          noInterpolation: \"a\\u2009b\",\n        },\n      },\n      {\n        input: \"a\\u2009b\\u2009c\",\n        expected: {\n          interpolation: \"a\\u2009b\\u2009c\",\n          noInterpolation: \"a\\u2009b\\u2009c\",\n        },\n      },\n      {\n        input: \"a\\u2009\",\n        expected: {\n          interpolation: \"a\\u2009\",\n          noInterpolation: \"a\\u2009\",\n        },\n      },\n      {\n        input: \"\\u2009a\",\n        expected: {\n          interpolation: \"\\u2009a\",\n          noInterpolation: \"\\u2009a\",\n        },\n      },\n    ],\n    \"<hair space> (\\\\u200A)\": [\n      {\n        input: \"a\\u200Ab\",\n        expected: {\n          interpolation: \"a\\u200Ab\",\n          noInterpolation: \"a\\u200Ab\",\n        },\n      },\n      {\n        input: \"a\\u200Ab\\u200Ac\",\n        expected: {\n          interpolation: \"a\\u200Ab\\u200Ac\",\n          noInterpolation: \"a\\u200Ab\\u200Ac\",\n        },\n      },\n      {\n        input: \"a\\u200A\",\n        expected: {\n          interpolation: \"a\\u200A\",\n          noInterpolation: \"a\\u200A\",\n        },\n      },\n      {\n        input: \"\\u200Aa\",\n        expected: {\n          interpolation: \"\\u200Aa\",\n          noInterpolation: \"\\u200Aa\",\n        },\n      },\n    ],\n    \"<line separator> (\\\\u2028)\": [\n      {\n        input: \"a\\u2028b\",\n        expected: {\n          interpolation: \"a\\u2028b\",\n          noInterpolation: \"a\\u2028b\",\n        },\n      },\n      {\n        input: \"a\\u2028b\\u2028c\",\n        expected: {\n          interpolation: \"a\\u2028b\\u2028c\",\n          noInterpolation: \"a\\u2028b\\u2028c\",\n        },\n      },\n      {\n        input: \"a\\u2028\",\n        expected: {\n          interpolation: \"a\\u2028\",\n          noInterpolation: \"a\\u2028\",\n        },\n      },\n      {\n        input: \"\\u2028a\",\n        expected: {\n          interpolation: \"\\u2028a\",\n          noInterpolation: \"\\u2028a\",\n        },\n      },\n    ],\n    \"<paragraph separator> (\\\\u2029)\": [\n      {\n        input: \"a\\u2029b\",\n        expected: {\n          interpolation: \"a\\u2029b\",\n          noInterpolation: \"a\\u2029b\",\n        },\n      },\n      {\n        input: \"a\\u2029b\\u2029c\",\n        expected: {\n          interpolation: \"a\\u2029b\\u2029c\",\n          noInterpolation: \"a\\u2029b\\u2029c\",\n        },\n      },\n      {\n        input: \"a\\u2029\",\n        expected: {\n          interpolation: \"a\\u2029\",\n          noInterpolation: \"a\\u2029\",\n        },\n      },\n      {\n        input: \"\\u2029a\",\n        expected: {\n          interpolation: \"\\u2029a\",\n          noInterpolation: \"\\u2029a\",\n        },\n      },\n    ],\n    \"<narrow no-break space> (\\\\u202F)\": [\n      {\n        input: \"a\\u202Fb\",\n        expected: {\n          interpolation: \"a\\u202Fb\",\n          noInterpolation: \"a\\u202Fb\",\n        },\n      },\n      {\n        input: \"a\\u202Fb\\u202Fc\",\n        expected: {\n          interpolation: \"a\\u202Fb\\u202Fc\",\n          noInterpolation: \"a\\u202Fb\\u202Fc\",\n        },\n      },\n      {\n        input: \"a\\u202F\",\n        expected: {\n          interpolation: \"a\\u202F\",\n          noInterpolation: \"a\\u202F\",\n        },\n      },\n      {\n        input: \"\\u202Fa\",\n        expected: {\n          interpolation: \"\\u202Fa\",\n          noInterpolation: \"\\u202Fa\",\n        },\n      },\n    ],\n    \"<medium mathematical space> (\\\\u205F)\": [\n      {\n        input: \"a\\u205Fb\",\n        expected: {\n          interpolation: \"a\\u205Fb\",\n          noInterpolation: \"a\\u205Fb\",\n        },\n      },\n      {\n        input: \"a\\u205Fb\\u205Fc\",\n        expected: {\n          interpolation: \"a\\u205Fb\\u205Fc\",\n          noInterpolation: \"a\\u205Fb\\u205Fc\",\n        },\n      },\n      {\n        input: \"a\\u205F\",\n        expected: {\n          interpolation: \"a\\u205F\",\n          noInterpolation: \"a\\u205F\",\n        },\n      },\n      {\n        input: \"\\u205Fa\",\n        expected: {\n          interpolation: \"\\u205Fa\",\n          noInterpolation: \"\\u205Fa\",\n        },\n      },\n    ],\n    \"<ideographic space> (\\\\u3000)\": [\n      {\n        input: \"a\\u3000b\",\n        expected: {\n          interpolation: \"a\\u3000b\",\n          noInterpolation: \"a\\u3000b\",\n        },\n      },\n      {\n        input: \"a\\u3000b\\u3000c\",\n        expected: {\n          interpolation: \"a\\u3000b\\u3000c\",\n          noInterpolation: \"a\\u3000b\\u3000c\",\n        },\n      },\n      {\n        input: \"a\\u3000\",\n        expected: {\n          interpolation: \"a\\u3000\",\n          noInterpolation: \"a\\u3000\",\n        },\n      },\n      {\n        input: \"\\u3000a\",\n        expected: {\n          interpolation: \"\\u3000a\",\n          noInterpolation: \"\\u3000a\",\n        },\n      },\n    ],\n    \"<zero width no-break space> (\\\\uFEFF)\": [\n      {\n        input: \"a\\uFEFFb\",\n        expected: {\n          interpolation: \"a\\uFEFFb\",\n          noInterpolation: \"a\\uFEFFb\",\n        },\n      },\n      {\n        input: \"a\\uFEFFb\\uFEFFc\",\n        expected: {\n          interpolation: \"a\\uFEFFb\\uFEFFc\",\n          noInterpolation: \"a\\uFEFFb\\uFEFFc\",\n        },\n      },\n      {\n        input: \"a\\uFEFF\",\n        expected: {\n          interpolation: \"a\\uFEFF\",\n          noInterpolation: \"a\\uFEFF\",\n        },\n      },\n      {\n        input: \"\\uFEFFa\",\n        expected: {\n          interpolation: \"\\uFEFFa\",\n          noInterpolation: \"\\uFEFFa\",\n        },\n      },\n    ],\n    'single quotes (\"\\'\")': [\n      {\n        input: \"a'b\",\n        expected: {\n          interpolation: \"a\\\\'b\",\n          noInterpolation: \"a'b\",\n          quoted: \"a'\\\\''b\",\n        },\n      },\n      {\n        input: \"a'b'c\",\n        expected: {\n          interpolation: \"a\\\\'b\\\\'c\",\n          noInterpolation: \"a'b'c\",\n          quoted: \"a'\\\\''b'\\\\''c\",\n        },\n      },\n    ],\n    \"double quotes ('\\\"')\": [\n      {\n        input: 'a\"b',\n        expected: { interpolation: 'a\\\\\"b', noInterpolation: 'a\"b' },\n      },\n      {\n        input: 'a\"b\"c',\n        expected: { interpolation: 'a\\\\\"b\\\\\"c', noInterpolation: 'a\"b\"c' },\n      },\n    ],\n    \"backticks (')\": [\n      {\n        input: \"a`b\",\n        expected: { interpolation: \"a\\\\`b\", noInterpolation: \"a`b\" },\n      },\n      {\n        input: \"a`b`c\",\n        expected: { interpolation: \"a\\\\`b\\\\`c\", noInterpolation: \"a`b`c\" },\n      },\n    ],\n    \"tildes ('~')\": [\n      {\n        input: \"~a\",\n        expected: { interpolation: \"\\\\~a\", noInterpolation: \"~a\" },\n      },\n      {\n        input: \"~a~b\",\n        expected: { interpolation: \"\\\\~a~b\", noInterpolation: \"~a~b\" },\n      },\n      {\n        input: \"a~b\",\n        expected: { interpolation: \"a~b\", noInterpolation: \"a~b\" },\n      },\n      {\n        input: \"a~b~c\",\n        expected: { interpolation: \"a~b~c\", noInterpolation: \"a~b~c\" },\n      },\n      {\n        input: \"a ~b\",\n        expected: { interpolation: \"a \\\\~b\", noInterpolation: \"a ~b\" },\n      },\n      {\n        input: \"a\t~b\",\n        expected: { interpolation: \"a\t\\\\~b\", noInterpolation: \"a\t~b\" },\n      },\n    ],\n    \"hashtags ('#')\": [\n      {\n        input: \"#a\",\n        expected: { interpolation: \"\\\\#a\", noInterpolation: \"#a\" },\n      },\n      {\n        input: \"#a#b\",\n        expected: { interpolation: \"\\\\#a#b\", noInterpolation: \"#a#b\" },\n      },\n      {\n        input: \"a#b\",\n        expected: { interpolation: \"a#b\", noInterpolation: \"a#b\" },\n      },\n      {\n        input: \"a#b#c\",\n        expected: { interpolation: \"a#b#c\", noInterpolation: \"a#b#c\" },\n      },\n      {\n        input: \"a #b\",\n        expected: { interpolation: \"a \\\\#b\", noInterpolation: \"a #b\" },\n      },\n      {\n        input: \"a\t#b\",\n        expected: { interpolation: \"a\t\\\\#b\", noInterpolation: \"a\t#b\" },\n      },\n    ],\n    \"dollar signs ('$')\": [\n      {\n        input: \"a$b\",\n        expected: { interpolation: \"a\\\\$b\", noInterpolation: \"a$b\" },\n      },\n      {\n        input: \"a$b$c\",\n        expected: { interpolation: \"a\\\\$b\\\\$c\", noInterpolation: \"a$b$c\" },\n      },\n    ],\n    \"ampersands ('&')\": [\n      {\n        input: \"a&b\",\n        expected: { interpolation: \"a\\\\&b\", noInterpolation: \"a&b\" },\n      },\n      {\n        input: \"a&b&c\",\n        expected: { interpolation: \"a\\\\&b\\\\&c\", noInterpolation: \"a&b&c\" },\n      },\n    ],\n    \"asterisks ('*')\": [\n      {\n        input: \"a*b\",\n        expected: { interpolation: \"a\\\\*b\", noInterpolation: \"a*b\" },\n      },\n      {\n        input: \"a*b*c\",\n        expected: { interpolation: \"a\\\\*b\\\\*c\", noInterpolation: \"a*b*c\" },\n      },\n    ],\n    \"equals ('=')\": [\n      {\n        input: \"=a\",\n        expected: { interpolation: \"\\\\=a\", noInterpolation: \"=a\" },\n      },\n      {\n        input: \"=a=b\",\n        expected: { interpolation: \"\\\\=a=b\", noInterpolation: \"=a=b\" },\n      },\n      {\n        input: \"a=b\",\n        expected: { interpolation: \"a=b\", noInterpolation: \"a=b\" },\n      },\n      {\n        input: \"a=b=c\",\n        expected: { interpolation: \"a=b=c\", noInterpolation: \"a=b=c\" },\n      },\n      {\n        input: \"a =b\",\n        expected: { interpolation: \"a \\\\=b\", noInterpolation: \"a =b\" },\n      },\n      {\n        input: \"a\t=b\",\n        expected: { interpolation: \"a\t\\\\=b\", noInterpolation: \"a\t=b\" },\n      },\n    ],\n    \"backslashes ('\\\\')\": [\n      {\n        input: \"a\\\\b\",\n        expected: { interpolation: \"a\\\\\\\\b\", noInterpolation: \"a\\\\b\" },\n      },\n      {\n        input: \"a\\\\b\\\\c\",\n        expected: { interpolation: \"a\\\\\\\\b\\\\\\\\c\", noInterpolation: \"a\\\\b\\\\c\" },\n      },\n    ],\n    \"pipes ('|')\": [\n      {\n        input: \"a|b\",\n        expected: { interpolation: \"a\\\\|b\", noInterpolation: \"a|b\" },\n      },\n      {\n        input: \"a|b|c\",\n        expected: { interpolation: \"a\\\\|b\\\\|c\", noInterpolation: \"a|b|c\" },\n      },\n    ],\n    \"semicolons (';')\": [\n      {\n        input: \"a;b\",\n        expected: { interpolation: \"a\\\\;b\", noInterpolation: \"a;b\" },\n      },\n      {\n        input: \"a;b;c\",\n        expected: { interpolation: \"a\\\\;b\\\\;c\", noInterpolation: \"a;b;c\" },\n      },\n    ],\n    \"question marks ('?')\": [\n      {\n        input: \"a?b\",\n        expected: { interpolation: \"a\\\\?b\", noInterpolation: \"a?b\" },\n      },\n      {\n        input: \"a?b?c\",\n        expected: { interpolation: \"a\\\\?b\\\\?c\", noInterpolation: \"a?b?c\" },\n      },\n    ],\n    \"parentheses ('(', ')')\": [\n      {\n        input: \"a(b\",\n        expected: { interpolation: \"a\\\\(b\", noInterpolation: \"a(b\" },\n      },\n      {\n        input: \"a)b\",\n        expected: { interpolation: \"a\\\\)b\", noInterpolation: \"a)b\" },\n      },\n      {\n        input: \"a(b(c\",\n        expected: { interpolation: \"a\\\\(b\\\\(c\", noInterpolation: \"a(b(c\" },\n      },\n      {\n        input: \"a)b)c\",\n        expected: { interpolation: \"a\\\\)b\\\\)c\", noInterpolation: \"a)b)c\" },\n      },\n      {\n        input: \"a(b)c\",\n        expected: { interpolation: \"a\\\\(b\\\\)c\", noInterpolation: \"a(b)c\" },\n      },\n      {\n        input: \"a(b,c)d\",\n        expected: { interpolation: \"a\\\\(b,c\\\\)d\", noInterpolation: \"a(b,c)d\" },\n      },\n    ],\n    \"square brackets ('[', ']')\": [\n      {\n        input: \"a[b\",\n        expected: { interpolation: \"a\\\\[b\", noInterpolation: \"a[b\" },\n      },\n      {\n        input: \"a]b\",\n        expected: { interpolation: \"a\\\\]b\", noInterpolation: \"a]b\" },\n      },\n      {\n        input: \"a[b[c\",\n        expected: { interpolation: \"a\\\\[b\\\\[c\", noInterpolation: \"a[b[c\" },\n      },\n      {\n        input: \"a]b]c\",\n        expected: { interpolation: \"a\\\\]b\\\\]c\", noInterpolation: \"a]b]c\" },\n      },\n      {\n        input: \"a[b]c\",\n        expected: { interpolation: \"a\\\\[b\\\\]c\", noInterpolation: \"a[b]c\" },\n      },\n      {\n        input: \"a[b,c]d\",\n        expected: { interpolation: \"a\\\\[b,c\\\\]d\", noInterpolation: \"a[b,c]d\" },\n      },\n    ],\n    \"curly brackets ('{', '}')\": [\n      {\n        input: \"a{b\",\n        expected: { interpolation: \"a\\\\{b\", noInterpolation: \"a{b\" },\n      },\n      {\n        input: \"a}b\",\n        expected: { interpolation: \"a\\\\}b\", noInterpolation: \"a}b\" },\n      },\n      {\n        input: \"a{b{c\",\n        expected: { interpolation: \"a\\\\{b\\\\{c\", noInterpolation: \"a{b{c\" },\n      },\n      {\n        input: \"a}b}c\",\n        expected: { interpolation: \"a\\\\}b\\\\}c\", noInterpolation: \"a}b}c\" },\n      },\n      {\n        input: \"a{b}c\",\n        expected: { interpolation: \"a\\\\{b\\\\}c\", noInterpolation: \"a{b}c\" },\n      },\n      {\n        input: \"a{b,c}d\",\n        expected: { interpolation: \"a\\\\{b,c\\\\}d\", noInterpolation: \"a{b,c}d\" },\n      },\n      {\n        input: \"a{b,{c,d},e}f\",\n        expected: {\n          interpolation: \"a\\\\{b,\\\\{c,d\\\\},e\\\\}f\",\n          noInterpolation: \"a{b,{c,d},e}f\",\n        },\n      },\n      {\n        input: \"a{0..2}b\",\n        expected: {\n          interpolation: \"a\\\\{0..2\\\\}b\",\n          noInterpolation: \"a{0..2}b\",\n        },\n      },\n    ],\n    \"angle brackets ('<', '>')\": [\n      {\n        input: \"a<b\",\n        expected: { interpolation: \"a\\\\<b\", noInterpolation: \"a<b\" },\n      },\n      {\n        input: \"a>b\",\n        expected: { interpolation: \"a\\\\>b\", noInterpolation: \"a>b\" },\n      },\n      {\n        input: \"a<b<c\",\n        expected: { interpolation: \"a\\\\<b\\\\<c\", noInterpolation: \"a<b<c\" },\n      },\n      {\n        input: \"a>b>c\",\n        expected: { interpolation: \"a\\\\>b\\\\>c\", noInterpolation: \"a>b>c\" },\n      },\n      {\n        input: \"a<b>c\",\n        expected: { interpolation: \"a\\\\<b\\\\>c\", noInterpolation: \"a<b>c\" },\n      },\n    ],\n  },\n};\n\nexport const quote = {\n  [binDash]: {\n    \"sample strings\": [\n      {\n        input: \"a\",\n        expected: { escaped: \"'a'\", notEscaped: \"'a'\" },\n      },\n    ],\n  },\n  [binBash]: {\n    \"sample strings\": [\n      {\n        input: \"a\",\n        expected: { escaped: \"'a'\", notEscaped: \"'a'\" },\n      },\n    ],\n  },\n  [binZsh]: {\n    \"sample strings\": [\n      {\n        input: \"a\",\n        expected: { escaped: \"'a'\", notEscaped: \"'a'\" },\n      },\n    ],\n  },\n};\n\nexport const redos = () => [\n  // CVE-2022-36064\n  `foo${\"{\".repeat(150_000)}bar`,\n  `=${\":\".repeat(150_000)}foobar`,\n  `{${\",\".repeat(150_000)}`,\n\n  // No identifier (yet)\n  \"{,\".repeat(150_000),\n];\n", "/**\n * @overview Contains unit tests for the escaping functionality on Unix systems.\n * @license Unlicense\n */\n\nimport test from \"ava\";\n\nimport { fixtures, macros } from \"./_.js\";\n\nimport * as unix from \"../../../src/unix.js\";\n\nObject.entries(fixtures.escape).forEach(([shellName, scenarios]) => {\n  const cases = Object.values(scenarios).flat();\n\n  cases.forEach(({ input, expected }) => {\n    test(macros.escape, {\n      expected: expected.noInterpolation,\n      input,\n      interpolation: false,\n      platform: unix,\n      quoted: false,\n      shellName,\n    });\n  });\n\n  cases.forEach(({ input, expected }) => {\n    test(macros.escape, {\n      expected: expected.interpolation,\n      input,\n      interpolation: true,\n      platform: unix,\n      quoted: false,\n      shellName,\n    });\n  });\n\n  cases.forEach(({ input, expected }) => {\n    test(macros.escape, {\n      expected: expected.quoted || expected.noInterpolation,\n      input,\n      interpolation: false,\n      platform: unix,\n      quoted: true,\n      shellName,\n    });\n  });\n});\n\nfixtures.redos().forEach((s, i) => {\n  test(`bash, ReDoS #${i}`, (t) => {\n    const escape = unix.getEscapeFunction(\"bash\");\n    escape(s, true, false);\n    t.pass();\n  });\n\n  test(`dash, ReDoS #${i}`, (t) => {\n    const escape = unix.getEscapeFunction(\"dash\");\n    escape(s, true, false);\n    t.pass();\n  });\n\n  test(`zsh, ReDoS #${i}`, (t) => {\n    const escape = unix.getEscapeFunction(\"zsh\");\n    escape(s, true, false);\n    t.pass();\n  });\n});\n\ntest(macros.unsupportedShell, { fn: unix.getEscapeFunction });\n"], "filenames": ["SECURITY.md", "src/unix.js", "test/fixtures/unix.js", "test/unit/unix/escape.test.js"], "buggy_code_start_loc": [30, 51, 1119, 48], "buggy_code_end_loc": [44, 55, 3603, 48], "fixing_code_start_loc": [30, 51, 1119, 49], "fixing_code_end_loc": [48, 52, 3614, 69], "type": "NVD-CWE-Other", "message": "The package shescape from 1.5.10 and before 1.6.1 are vulnerable to Regular Expression Denial of Service (ReDoS) via the escape function in index.js, due to the usage of insecure regex in the escapeArgBash function.", "other": {"cve": {"id": "CVE-2022-25918", "sourceIdentifier": "report@snyk.io", "published": "2022-10-27T10:15:10.637", "lastModified": "2022-10-28T19:41:34.380", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The package shescape from 1.5.10 and before 1.6.1 are vulnerable to Regular Expression Denial of Service (ReDoS) via the escape function in index.js, due to the usage of insecure regex in the escapeArgBash function."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:shescape_project:shescape:1.5.10:*:*:*:*:node.js:*:*", "matchCriteriaId": "E6E1007D-812B-4128-B5A4-8CE84383AC9B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:shescape_project:shescape:1.6.0:*:*:*:*:node.js:*:*", "matchCriteriaId": "F6B4C0B9-40E8-4ACF-A161-61713D23CA91"}]}]}], "references": [{"url": "https://github.com/ericcornelissen/shescape/blob/main/src/unix.js%23L52", "source": "report@snyk.io", "tags": ["Broken Link"]}, {"url": "https://github.com/ericcornelissen/shescape/commit/552e8eab56861720b1d4e5474fb65741643358f9", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ericcornelissen/shescape/releases/tag/v1.6.1", "source": "report@snyk.io", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://security.snyk.io/vuln/SNYK-JS-SHESCAPE-3061108", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ericcornelissen/shescape/commit/552e8eab56861720b1d4e5474fb65741643358f9"}}