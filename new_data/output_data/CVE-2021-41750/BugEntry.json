{"buggy_code": ["<?php\n/**\n * SEOmatic plugin for Craft CMS 3.x\n *\n * A turnkey SEO implementation for Craft CMS that is comprehensive, powerful,\n * and flexible\n *\n * @link      https://nystudio107.com\n * @copyright Copyright (c) 2017 nystudio107\n */\n\nnamespace nystudio107\\seomatic\\controllers;\n\nuse nystudio107\\seomatic\\helpers\\UrlHelper;\nuse nystudio107\\seomatic\\Seomatic;\n\nuse Craft;\nuse craft\\elements\\Asset;\nuse craft\\helpers\\FileHelper;\nuse craft\\helpers\\Assets as AssetsHelper;\nuse craft\\web\\Controller;\n\nuse yii\\web\\NotFoundHttpException;\nuse yii\\web\\HttpException;\nuse yii\\web\\Response;\nuse yii\\web\\ServerErrorHttpException;\n\n/**\n * @author    nystudio107\n * @package   Seomatic\n * @since     3.0.0\n */\nclass FileController extends Controller\n{\n    // Properties\n    // =========================================================================\n\n    /**\n     * @inheritdoc\n     */\n    protected $allowAnonymous = [\n        'seo-file-link',\n    ];\n\n    // Public Methods\n    // =========================================================================\n\n    /**\n     * @inheritDoc\n     */\n    public function beforeAction($action)\n    {\n        if (!Seomatic::$settings->enableSeoFileLinkEndpoint) {\n            $this->allowAnonymous = false;\n        }\n\n        return parent::beforeAction($action);\n    }\n\n    /**\n     * Allow setting the X-Robots-Tag and Link headers on static files as per:\n     * https://moz.com/blog/how-to-advanced-relcanonical-http-headers\n     *\n     * @param        $url\n     * @param string $robots\n     * @param string $canonical\n     * @param bool   $inline\n     * @param string $fileName\n     *\n     * @return Response|\\yii\\console\\Response\n     * @throws HttpException\n     * @throws NotFoundHttpException\n     */\n    public function actionSeoFileLink($url, $robots = '', $canonical = '', $inline = true, $fileName = '')\n    {\n        $url = base64_decode($url);\n        $robots = base64_decode($robots);\n        $canonical = base64_decode($canonical);\n        $url = UrlHelper::absoluteUrlWithProtocol($url);\n        $contents = file_get_contents($url);\n        $response = Craft::$app->getResponse();\n        if ($contents) {\n            // Add the X-Robots-Tag header\n            if (!empty($robots)) {\n                $headerValue = $robots;\n                $response->headers->add('X-Robots-Tag', $headerValue);\n            }\n            // Add the Link header\n            if (!empty($canonical)) {\n                $headerValue = '<'.$canonical.'>; rel=\"canonical\"';\n                $response->headers->add('Link', $headerValue);\n            }\n            // Ensure the file type is allowed\n            // ref: https://craftcms.com/docs/3.x/config/config-settings.html#allowedfileextensions\n            $allowedExtensions = Craft::$app->getConfig()->getGeneral()->allowedFileExtensions;\n            if (($ext = pathinfo($fileName, PATHINFO_EXTENSION)) !== '') {\n                $ext = strtolower($ext);\n            }\n            if ($ext === '' || !in_array($ext, $allowedExtensions, true)) {\n                throw new ServerErrorHttpException(Craft::t('seomatic', 'File format not allowed.'));\n            }\n            // Send the file as a stream, so it can exist anywhere\n            $response->sendContentAsFile(\n                $contents,\n                $fileName,\n                [\n                    'inline' => $inline,\n                    'mimeType' => FileHelper::getMimeTypeByExtension($fileName)\n                ]\n            );\n        } else {\n            throw new NotFoundHttpException(Craft::t('seomatic', 'File not found.'));\n        }\n\n        return $response;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * SEOmatic plugin for Craft CMS 3.x\n *\n * A turnkey SEO implementation for Craft CMS that is comprehensive, powerful,\n * and flexible\n *\n * @link      https://nystudio107.com\n * @copyright Copyright (c) 2017 nystudio107\n */\n\nnamespace nystudio107\\seomatic\\controllers;\n\nuse nystudio107\\seomatic\\helpers\\UrlHelper;\nuse nystudio107\\seomatic\\Seomatic;\n\nuse Craft;\nuse craft\\elements\\Asset;\nuse craft\\helpers\\FileHelper;\nuse craft\\helpers\\Assets as AssetsHelper;\nuse craft\\web\\Controller;\n\nuse yii\\web\\NotFoundHttpException;\nuse yii\\web\\HttpException;\nuse yii\\web\\Response;\nuse yii\\web\\ServerErrorHttpException;\n\n/**\n * @author    nystudio107\n * @package   Seomatic\n * @since     3.0.0\n */\nclass FileController extends Controller\n{\n    // Properties\n    // =========================================================================\n\n    /**\n     * @inheritdoc\n     */\n    protected $allowAnonymous = [\n        'seo-file-link',\n    ];\n\n    // Public Methods\n    // =========================================================================\n\n    /**\n     * @inheritDoc\n     */\n    public function beforeAction($action)\n    {\n        if (!Seomatic::$settings->enableSeoFileLinkEndpoint) {\n            $this->allowAnonymous = false;\n        }\n\n        return parent::beforeAction($action);\n    }\n\n    /**\n     * Allow setting the X-Robots-Tag and Link headers on static files as per:\n     * https://moz.com/blog/how-to-advanced-relcanonical-http-headers\n     *\n     * @param        $url\n     * @param string $robots\n     * @param string $canonical\n     * @param bool   $inline\n     * @param string $fileName\n     *\n     * @return Response|\\yii\\console\\Response\n     * @throws HttpException\n     * @throws NotFoundHttpException\n     */\n    public function actionSeoFileLink($url, $robots = '', $canonical = '', $inline = true, $fileName = '')\n    {\n        $url = base64_decode($url);\n        $robots = base64_decode($robots);\n        $canonical = base64_decode($canonical);\n        $url = UrlHelper::absoluteUrlWithProtocol($url);\n        $contents = file_get_contents($url);\n        $response = Craft::$app->getResponse();\n        if ($contents) {\n            // Add the X-Robots-Tag header\n            if (!empty($robots)) {\n                $headerValue = $robots;\n                $response->headers->add('X-Robots-Tag', $headerValue);\n            }\n            // Add the Link header\n            if (!empty($canonical)) {\n                $headerValue = '<'.$canonical.'>; rel=\"canonical\"';\n                $response->headers->add('Link', $headerValue);\n            }\n            // Ensure the file type is allowed\n            // ref: https://craftcms.com/docs/3.x/config/config-settings.html#allowedfileextensions\n            $allowedExtensions = Craft::$app->getConfig()->getGeneral()->allowedFileExtensions;\n            if (($ext = pathinfo($fileName, PATHINFO_EXTENSION)) !== '') {\n                $ext = strtolower($ext);\n            }\n            if ($ext === '' || $ext === 'svg' || !in_array($ext, $allowedExtensions, true)) {\n                throw new ServerErrorHttpException(Craft::t('seomatic', 'File format not allowed.'));\n            }\n            // Send the file as a stream, so it can exist anywhere\n            $response->sendContentAsFile(\n                $contents,\n                $fileName,\n                [\n                    'inline' => $inline,\n                    'mimeType' => FileHelper::getMimeTypeByExtension($fileName)\n                ]\n            );\n        } else {\n            throw new NotFoundHttpException(Craft::t('seomatic', 'File not found.'));\n        }\n\n        return $response;\n    }\n}\n"], "filenames": ["src/controllers/FileController.php"], "buggy_code_start_loc": [99], "buggy_code_end_loc": [100], "fixing_code_start_loc": [99], "fixing_code_end_loc": [100], "type": "CWE-79", "message": "A cross-site scripting (XSS) vulnerability in the SEOmatic plugin 3.4.10 for Craft CMS 3 allows remote attackers to inject arbitrary web script via a GET to /index.php?action=seomatic/file/seo-file-link with url parameter containing the base64 encoded URL of a malicious web page / file and fileName parameter containing an arbitrary filename with the intended content-type to be rendered in the user's browser as the extension.", "other": {"cve": {"id": "CVE-2021-41750", "sourceIdentifier": "cve@mitre.org", "published": "2022-06-12T12:15:07.910", "lastModified": "2022-06-17T19:03:49.893", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A cross-site scripting (XSS) vulnerability in the SEOmatic plugin 3.4.10 for Craft CMS 3 allows remote attackers to inject arbitrary web script via a GET to /index.php?action=seomatic/file/seo-file-link with url parameter containing the base64 encoded URL of a malicious web page / file and fileName parameter containing an arbitrary filename with the intended content-type to be rendered in the user's browser as the extension."}, {"lang": "es", "value": "Una vulnerabilidad de tipo cross-site scripting (XSS) en el plugin SEOmatic 3.4.10 para Craft CMS 3 permite a atacantes remotos inyectar un script web arbitrario por medio de un GET a /index.php?action=seomatic/file/seo-file-link con el par\u00e1metro url que contiene la URL codificada en base64 de una p\u00e1gina web/archivo maliciosa y el par\u00e1metro fileName que contiene un nombre de archivo arbitrario con el tipo de contenido previsto para ser renderizado en el navegador del usuario como la extensi\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nystudio107:seomatic:3.4.10:*:*:*:*:craft_cms:*:*", "matchCriteriaId": "44C12252-9CDA-49DD-8ED0-FDAA170D7F69"}]}]}], "references": [{"url": "https://github.com/nystudio107/craft-seomatic/blob/develop/CHANGELOG.md", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/nystudio107/craft-seomatic/commit/4e46b792ce973ac0c652fb330055f41aca1981c8", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/nystudio107/craft-seomatic/commit/5f2cdc7c39e0a4bfb60d2f84131508f0a87b2873", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/nystudio107/craft-seomatic/commit/4e46b792ce973ac0c652fb330055f41aca1981c8"}}