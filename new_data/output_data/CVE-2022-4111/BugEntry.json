{"buggy_code": ["import { Body, Controller, Post, Patch, UseGuards, UseInterceptors, UploadedFile } from '@nestjs/common';\nimport { Express } from 'express';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { JwtAuthGuard } from 'src/modules/auth/jwt-auth.guard';\nimport { PasswordRevalidateGuard } from 'src/modules/auth/password-revalidate.guard';\nimport { UsersService } from 'src/services/users.service';\nimport { User } from 'src/decorators/user.decorator';\nimport { UpdateUserDto } from '@dto/user.dto';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private usersService: UsersService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Patch('update')\n  async update(@User() user, @Body() updateUserDto: UpdateUserDto) {\n    const { first_name: firstName, last_name: lastName } = updateUserDto;\n    await this.usersService.update(user.id, { firstName, lastName });\n    await user.reload();\n    return {\n      first_name: user.firstName,\n      last_name: user.lastName,\n    };\n  }\n\n  @Post('avatar')\n  @UseGuards(JwtAuthGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  async addAvatar(@User() user, @UploadedFile() file: Express.Multer.File) {\n    return this.usersService.addAvatar(user.id, file.buffer, file.originalname);\n  }\n\n  @UseGuards(JwtAuthGuard, PasswordRevalidateGuard)\n  @Patch('change_password')\n  async changePassword(@User() user, @Body('newPassword') newPassword) {\n    return await this.usersService.update(user.id, {\n      password: newPassword,\n    });\n  }\n}\n"], "fixing_code": ["import {\n  Body,\n  Controller,\n  Post,\n  Patch,\n  UseGuards,\n  UseInterceptors,\n  UploadedFile,\n  BadRequestException,\n} from '@nestjs/common';\nimport { Express } from 'express';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { JwtAuthGuard } from 'src/modules/auth/jwt-auth.guard';\nimport { PasswordRevalidateGuard } from 'src/modules/auth/password-revalidate.guard';\nimport { UsersService } from 'src/services/users.service';\nimport { User } from 'src/decorators/user.decorator';\nimport { UpdateUserDto } from '@dto/user.dto';\n\nconst MAX_AVATAR_FILE_SIZE = 1024 * 1024 * 2; // 2MB\n\n@Controller('users')\nexport class UsersController {\n  constructor(private usersService: UsersService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Patch('update')\n  async update(@User() user, @Body() updateUserDto: UpdateUserDto) {\n    const { first_name: firstName, last_name: lastName } = updateUserDto;\n    await this.usersService.update(user.id, { firstName, lastName });\n    await user.reload();\n    return {\n      first_name: user.firstName,\n      last_name: user.lastName,\n    };\n  }\n\n  @Post('avatar')\n  @UseGuards(JwtAuthGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  async addAvatar(@User() user, @UploadedFile() file: Express.Multer.File) {\n    // TODO: use ParseFilePipe to validate file size from nestjs v9\n    if (file.size > MAX_AVATAR_FILE_SIZE) {\n      throw new BadRequestException('File size is greater than 2MB');\n    }\n    return this.usersService.addAvatar(user.id, file.buffer, file.originalname);\n  }\n\n  @UseGuards(JwtAuthGuard, PasswordRevalidateGuard)\n  @Patch('change_password')\n  async changePassword(@User() user, @Body('newPassword') newPassword) {\n    return await this.usersService.update(user.id, {\n      password: newPassword,\n    });\n  }\n}\n"], "filenames": ["server/src/controllers/users.controller.ts"], "buggy_code_start_loc": [1], "buggy_code_end_loc": [29], "fixing_code_start_loc": [1], "fixing_code_end_loc": [45], "type": "CWE-400", "message": "Unrestricted file size limit can lead to DoS in tooljet/tooljet <1.27 by allowing a logged in attacker to upload profile pictures over 2MB.", "other": {"cve": {"id": "CVE-2022-4111", "sourceIdentifier": "security@huntr.dev", "published": "2022-11-22T03:15:14.207", "lastModified": "2022-11-26T03:28:17.230", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Unrestricted file size limit can lead to DoS in tooljet/tooljet <1.27 by allowing a logged in attacker to upload profile pictures over 2MB."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-400"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-400"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tooljet:tooljet:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.27.0", "matchCriteriaId": "EC03BAA0-16E2-4FD0-A3EA-A056FE281062"}]}]}], "references": [{"url": "https://github.com/tooljet/tooljet/commit/01cd3f0464747973ec329e9fb1ea12743d3235cc", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/5596d072-66d2-4361-8cac-101c9c781c3d", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tooljet/tooljet/commit/01cd3f0464747973ec329e9fb1ea12743d3235cc"}}