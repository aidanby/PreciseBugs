{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.document.printpages.pdfpreview\");\npimcore.document.printpages.pdfpreview = Class.create({\n\n    initialize: function(page) {\n        this.page = page;\n    },\n\n    getLayout: function () {\n\n        if (this.layout == null) {\n\n            var details = [];\n\n            // Generate PDF Panel\n            this.publishedWarning = new Ext.form.Label({\n                text: t(\"web2print_only_published\"),\n                style: \"color: red\",\n                hidden: this.page.data.published\n            });\n\n            this.generateButton = new Ext.Button({\n                text: t(\"web2print_generate_pdf\"),\n                iconCls: \"pimcore_material_icon_pdf pimcore_material_icon\",\n                style: \"float: right;  margin-top: 10px\",\n                disabled: !this.page.data.published,\n                handler: this.generatePdf.bind(this)\n            });\n            this.generateForm = new Ext.form.FormPanel({\n                autoHeight: true,\n                border: false,\n                items: [this.getProcessingOptionsGrid(), this.publishedWarning, this.generateButton]\n            });\n\n            this.progressBar = Ext.create('Ext.ProgressBar', {\n                style: \"margin-bottom: 10px\"\n            });\n\n            this.statusUpdateBox = Ext.create('Ext.Panel', {\n                autoHeight: true,\n                border: false,\n                hidden: true,\n                items: [this.progressBar, {\n                    xtype: 'button',\n                    style: \"float: right;\",\n                    text: t(\"web2print_cancel_pdf_creation\"),\n                    iconCls: \"pimcore_icon_cancel\",\n                    handler: function() {\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_document_printpage_cancelgeneration'),\n                            method: 'DELETE',\n                            params: {id: this.page.id},\n                            success: function(response) {\n                                var result = Ext.decode(response.responseText);\n                                if(!result.success) {\n                                    pimcore.helpers.showNotification(t('web2print_cancel_generation'), t('web2print_cancel_generation_error'), \"error\");\n                                }\n                            }.bind(this)\n                        });\n                    }.bind(this)\n                }]\n            });\n            details.push({\n                title: t(\"web2print_generate_pdf\"),\n                expandable: true,\n                bodyStyle: \"padding: 10px;\",\n                border: true,\n                items: [\n                    this.generateForm, this.statusUpdateBox\n                ]\n            });\n\n            //Download PDF Panel\n            this.downloadButton = new Ext.Button({\n                text: t(\"web2print_download_pdf\"),\n                iconCls: \"pimcore_icon_download\",\n                style: \"float: right; margin-top: 10px\",\n                handler: function () {\n                    var date = new Date();\n                    var url = Routing.generate('pimcore_admin_document_printpage_pdfdownload', {id: this.page.id, download: 1, time: date.getTime()});\n                    pimcore.helpers.download(url);\n                }.bind(this)\n            });\n            this.generatedDateField = new Ext.form.TextField({\n                readOnly: true,\n                width: \"100%\",\n                name: \"last-generated\",\n                fieldLabel: t(\"web2print_last-generated\"),\n                value: \"\"\n            });\n            this.generateMessageField = new Ext.form.TextArea({\n                readOnly: true,\n                height: 100,\n                width: \"100%\",\n                name: \"last-generate-message\",\n                fieldLabel: t(\"web2print_last-generate-message\"),\n                value: \"\"\n            });\n            this.dirtyLabel = new Ext.form.Label({\n                text: t(\"web2print_documents_changed\"),\n                style: \"color: red\",\n                hidden: true\n            });\n            details.push(new Ext.form.FormPanel({\n                title: t(\"web2print_download_pdf\"),\n                bodyStyle: \"padding: 10px;\",\n                style: \"padding-top: 10px\",\n                border: true,\n                items: [this.generatedDateField, this.generateMessageField, this.dirtyLabel, this.downloadButton]\n            }));\n\n\n            this.iframeName = 'document_pdfpreview_iframe_' + this.page.id;\n\n            this.layout = new Ext.Panel({\n                title: t('web2print_preview_pdf'),\n                layout: \"border\",\n                autoScroll: false,\n                iconCls: \"pimcore_material_icon_pdf pimcore_material_icon\",\n                items: [{\n                    region: \"center\",\n                    hideMode: \"offsets\",\n                    bodyCls: \"pimcore_overflow_scrolling pimcore_preview_body\",\n                    forceLayout: true,\n                    autoScroll: true,\n                    border: false,\n                    scrollable: false,\n                    html: '<iframe src=\"about:blank\" width=\"100%\" frameborder=\"0\" id=\"' + this.iframeName + '\" name=\"' + this.iframeName + '\"></iframe>'\n                },{\n                    region: \"west\",\n                    width: 350,\n                    items: details,\n                    style: \"padding-right: 10px\",\n                    bodyStyle: \"padding: 10px\",\n                    autoScroll: true\n                }]\n            });\n\n            this.layout.on(\"resize\", this.onLayoutResize.bind(this));\n            this.layout.on(\"activate\", this.refresh.bind(this));\n            this.layout.on(\"afterrender\", function () {\n                Ext.get(this.iframeName).on('load', function() {\n                    // this is to hide the mask if edit/startup.js isn't executed (eg. in case an error is shown)\n                    // otherwise edit/startup.js will disable the loading mask\n                    if(!this[\"frame\"]) {\n                        this.loadMask.hide();\n                    }\n                }.bind(this));\n\n                this.loadMask = new Ext.LoadMask({\n                    target: this.layout,\n                    msg: t(\"please_wait\")\n                });\n\n                this.loadMask.show();\n            }.bind(this));\n        }\n\n        return this.layout;\n    },\n\n    getProcessingOptionsGrid: function() {\n\n        this.processingOptionsStore = new Ext.data.JsonStore({\n            proxy: {\n                url: Routing.generate('pimcore_admin_document_printcontainer_getprocessingoptions'),\n                type: 'ajax',\n                reader: {\n                    type: 'json',\n                    rootProperty: \"options\",\n                    idProperty: 'name'\n                },\n                extraParams: { id: this.page.id }\n            },\n            fields: ['name','label','type','value','default','values'],\n            autoDestroy: true,\n            autoLoad: true,\n            listeners: {\n                load: function() {\n                    if(this.processingOptionsStore.count() > 0) {\n                        this.processingOptionsGrid.show();\n                    }\n                }.bind(this)\n            },\n            sortInfo:{field: 'name', direction: \"ASC\"}\n        });\n\n        this.processingOptionsGrid = Ext.create('Ext.grid.Panel', {\n            style: \"padding-bottom: 10px\",\n            autoScroll: true,\n            bodyCls: \"pimcore_editable_grid\",\n            autoHeight: true,\n            trackMouseOver: true,\n            hidden: true,\n            store: this.processingOptionsStore,\n            clicksToEdit: 1,\n            viewConfig: {\n                markDirty: false\n            },\n            plugins: [\n                Ext.create('Ext.grid.plugin.CellEditing', {\n                    clicksToEdit: 1,\n                    listeners: {\n                        beforeedit: function(editor, context, eOpts) {\n                            editor.editors.each(function (e) {\n                                try {\n                                    // complete edit, so the value is stored when hopping around with TAB\n                                    e.completeEdit();\n                                    Ext.destroy(e);\n                                } catch (exception) {\n                                    // garbage collector was faster\n                                    // already destroyed\n                                }\n                            });\n\n                            editor.editors.clear();\n                        }\n                    }\n                })\n            ],\n            columnLines: true,\n            stripeRows: true,\n            columns: [\n                {\n                    text: t(\"name\"),\n                    dataIndex: 'label',\n                    editable: false,\n                    width: 120,\n                    renderer: function(value) {\n                        return t(\"web2print_\" + value, value);\n                    },\n                    sortable: true\n                },\n                {\n                    flex: 1,\n                    text: t(\"value\"),\n                    dataIndex: 'value',\n                    getEditor: this.getCellEditor.bind(this),\n                    editable: true,\n                    renderer: this.getCellRenderer.bind(this),\n                    listeners: {\n                        \"mousedown\": this.cellMousedown.bind(this)\n                    }\n                }\n            ]\n        });\n\n        return this.processingOptionsGrid;\n    },\n\n    getCellRenderer: function (value, metaData, record, rowIndex, colIndex, store) {\n        var data = record.data;\n        var type = data.type;\n\n        if (type == \"bool\") {\n            if (value) {\n                return '<div style=\"text-align: left\"><div role=\"button\" class=\"x-grid-checkcolumn x-grid-checkcolumn-checked\" style=\"\"></div></div>';\n            } else {\n                return '<div style=\"text-align: left\"><div role=\"button\" class=\"x-grid-checkcolumn\" style=\"\"></div></div>';\n            }\n        }\n\n        if (type == \"select\") {\n            return t(\"web2print_\" + value, value);\n        }\n\n        return value;\n    },\n\n    cellMousedown: function (grid, cell, rowIndex, cellIndex, e) {\n        var store = grid.getStore();\n        var record = store.getAt(rowIndex);\n\n        var data = record.data;\n        var type = data.type;\n\n        if (type == \"bool\") {\n            record.set(\"data\", !data.data);\n            record.set(\"value\", !data.value);\n        }\n    },\n\n    getCellEditor: function (record) {\n\n        var data = record.data;\n\n        var type = data.type;\n        var property;\n\n        if (type == \"text\") {\n            property = new Ext.form.TextField();\n        }\n        else if (type == \"bool\") {\n            //nothing needed there\n        }\n        else if (type == \"select\") {\n            var values = data.values;\n            var storeValues = [];\n            for(var i=0; i < values.length; i++) {\n                storeValues.push([values[i], t(\"web2print_\" + values[i], values[i])]);\n            }\n\n            property = new Ext.form.ComboBox({\n                triggerAction: 'all',\n                editable: false,\n                mode: 'local',\n                // typeAhead: true,\n                lazyRender: true,\n                store: new Ext.data.ArrayStore({\n                    fields: [\"id\", \"value\"],\n                    data: storeValues\n                }),\n                valueField: \"id\",\n                displayField: \"value\"\n            });\n        }\n\n\n        return property;\n    },\n\n    generatePdf: function() {\n\n        var params = this.generateForm.getForm().getFieldValues();\n\n        this.processingOptionsStore.each(function(rec) {\n            params[rec.data.name] = rec.data.value;\n        });\n        params.id = this.page.id;\n\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_document_printpage_startpdfgeneration'),\n            method: 'POST',\n            jsonData: params,\n            success: function(response) {\n                result = Ext.decode(response.responseText);\n                if(result.success) {\n                    this.checkForActiveGenerateProcess();\n                }\n            }.bind(this)\n        });\n    },\n\n\n    onLayoutResize: function (el, width, height, rWidth, rHeight) {\n        this.setLayoutFrameDimensions(width, height);\n    },\n\n    setLayoutFrameDimensions: function (width, height) {\n        Ext.get(this.iframeName).setStyle({\n            height: (height) + \"px\"\n        });\n    },\n\n    iFrameLoaded: function () {\n        if(this.loadMask){\n            this.loadMask.hide();\n        }\n    },\n\n    loadCurrentPreview: function () {\n        var date = new Date();\n        var url = Routing.generate('pimcore_admin_document_printpage_pdfdownload', {id: this.page.id, time: date.getTime()});\n\n        try {\n            Ext.get(this.iframeName).dom.src = url;\n        }\n        catch (e) {\n            console.log(e);\n        }\n    },\n\n    refresh: function () {\n        if(!this.loaded)  {\n            this.checkPdfDirtyState();\n            this.checkForActiveGenerateProcess();\n            this.loaded = true;\n        }\n    },\n\n    checkForActiveGenerateProcess: function() {\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_document_printpage_activegenerateprocess'),\n            method: 'POST',\n            params: {id: this.page.id},\n            success: function(response) {\n                var result = Ext.decode(response.responseText);\n                if(result.activeGenerateProcess) {\n                    this.generateForm.hide();\n                    this.statusUpdateBox.show();\n\n                    if(result.statusUpdate) {\n                        var text = result.statusUpdate.status + \"% (\" + t(\"web2print_\" + result.statusUpdate.statusUpdate, result.statusUpdate.statusUpdate) + \")\";\n                        this.progressBar.updateProgress(result.statusUpdate.status / 100, text);\n                    }\n\n                    window.setTimeout(function() {\n                        this.checkForActiveGenerateProcess();\n                    }.bind(this), 2000);\n                } else {\n                    this.generateForm.show();\n                    this.statusUpdateBox.hide();\n\n                    this.downloadButton.setDisabled(!result.downloadAvailable);\n\n                    this.generatedDateField.setValue(result.date);\n                    this.generateMessageField.setValue(result.message);\n\n                    if(result.downloadAvailable) {\n                        this.loadCurrentPreview();\n                    }\n                    this.iFrameLoaded();\n                    this.checkPdfDirtyState();\n                }\n            }.bind(this)\n        });\n    },\n\n    checkPdfDirtyState: function() {\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_document_printpage_checkpdfdirty'),\n            params: {id: this.page.id},\n            success: function(response) {\n                result = Ext.decode(response.responseText);\n                if(result.pdfDirty) {\n                    this.dirtyLabel.setVisible(true);\n                } else {\n                    this.dirtyLabel.setVisible(false);\n                }\n            }.bind(this)\n        });\n    },\n\n\n    enableGenerateButton: function(enable) {\n        if(enable) {\n            this.generateButton.enable();\n            this.publishedWarning.hide();\n        } else {\n            this.generateButton.disable();\n            this.publishedWarning.show();\n        }\n    }\n\n});\n"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.document.printpages.pdfpreview\");\npimcore.document.printpages.pdfpreview = Class.create({\n\n    initialize: function(page) {\n        this.page = page;\n    },\n\n    getLayout: function () {\n\n        if (this.layout == null) {\n\n            var details = [];\n\n            // Generate PDF Panel\n            this.publishedWarning = new Ext.form.Label({\n                text: t(\"web2print_only_published\"),\n                style: \"color: red\",\n                hidden: this.page.data.published\n            });\n\n            this.generateButton = new Ext.Button({\n                text: t(\"web2print_generate_pdf\"),\n                iconCls: \"pimcore_material_icon_pdf pimcore_material_icon\",\n                style: \"float: right;  margin-top: 10px\",\n                disabled: !this.page.data.published,\n                handler: this.generatePdf.bind(this)\n            });\n            this.generateForm = new Ext.form.FormPanel({\n                autoHeight: true,\n                border: false,\n                items: [this.getProcessingOptionsGrid(), this.publishedWarning, this.generateButton]\n            });\n\n            this.progressBar = Ext.create('Ext.ProgressBar', {\n                style: \"margin-bottom: 10px\"\n            });\n\n            this.statusUpdateBox = Ext.create('Ext.Panel', {\n                autoHeight: true,\n                border: false,\n                hidden: true,\n                items: [this.progressBar, {\n                    xtype: 'button',\n                    style: \"float: right;\",\n                    text: t(\"web2print_cancel_pdf_creation\"),\n                    iconCls: \"pimcore_icon_cancel\",\n                    handler: function() {\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_document_printpage_cancelgeneration'),\n                            method: 'DELETE',\n                            params: {id: this.page.id},\n                            success: function(response) {\n                                var result = Ext.decode(response.responseText);\n                                if(!result.success) {\n                                    pimcore.helpers.showNotification(t('web2print_cancel_generation'), t('web2print_cancel_generation_error'), \"error\");\n                                }\n                            }.bind(this)\n                        });\n                    }.bind(this)\n                }]\n            });\n            details.push({\n                title: t(\"web2print_generate_pdf\"),\n                expandable: true,\n                bodyStyle: \"padding: 10px;\",\n                border: true,\n                items: [\n                    this.generateForm, this.statusUpdateBox\n                ]\n            });\n\n            //Download PDF Panel\n            this.downloadButton = new Ext.Button({\n                text: t(\"web2print_download_pdf\"),\n                iconCls: \"pimcore_icon_download\",\n                style: \"float: right; margin-top: 10px\",\n                handler: function () {\n                    var date = new Date();\n                    var url = Routing.generate('pimcore_admin_document_printpage_pdfdownload', {id: this.page.id, download: 1, time: date.getTime()});\n                    pimcore.helpers.download(url);\n                }.bind(this)\n            });\n            this.generatedDateField = new Ext.form.TextField({\n                readOnly: true,\n                width: \"100%\",\n                name: \"last-generated\",\n                fieldLabel: t(\"web2print_last-generated\"),\n                value: \"\"\n            });\n            this.generateMessageField = new Ext.form.TextArea({\n                readOnly: true,\n                height: 100,\n                width: \"100%\",\n                name: \"last-generate-message\",\n                fieldLabel: t(\"web2print_last-generate-message\"),\n                value: \"\"\n            });\n            this.dirtyLabel = new Ext.form.Label({\n                text: t(\"web2print_documents_changed\"),\n                style: \"color: red\",\n                hidden: true\n            });\n            details.push(new Ext.form.FormPanel({\n                title: t(\"web2print_download_pdf\"),\n                bodyStyle: \"padding: 10px;\",\n                style: \"padding-top: 10px\",\n                border: true,\n                items: [this.generatedDateField, this.generateMessageField, this.dirtyLabel, this.downloadButton]\n            }));\n\n\n            this.iframeName = 'document_pdfpreview_iframe_' + this.page.id;\n\n            this.layout = new Ext.Panel({\n                title: t('web2print_preview_pdf'),\n                layout: \"border\",\n                autoScroll: false,\n                iconCls: \"pimcore_material_icon_pdf pimcore_material_icon\",\n                items: [{\n                    region: \"center\",\n                    hideMode: \"offsets\",\n                    bodyCls: \"pimcore_overflow_scrolling pimcore_preview_body\",\n                    forceLayout: true,\n                    autoScroll: true,\n                    border: false,\n                    scrollable: false,\n                    html: '<iframe src=\"about:blank\" width=\"100%\" frameborder=\"0\" id=\"' + this.iframeName + '\" name=\"' + this.iframeName + '\"></iframe>'\n                },{\n                    region: \"west\",\n                    width: 350,\n                    items: details,\n                    style: \"padding-right: 10px\",\n                    bodyStyle: \"padding: 10px\",\n                    autoScroll: true\n                }]\n            });\n\n            this.layout.on(\"resize\", this.onLayoutResize.bind(this));\n            this.layout.on(\"activate\", this.refresh.bind(this));\n            this.layout.on(\"afterrender\", function () {\n                Ext.get(this.iframeName).on('load', function() {\n                    // this is to hide the mask if edit/startup.js isn't executed (eg. in case an error is shown)\n                    // otherwise edit/startup.js will disable the loading mask\n                    if(!this[\"frame\"]) {\n                        this.loadMask.hide();\n                    }\n                }.bind(this));\n\n                this.loadMask = new Ext.LoadMask({\n                    target: this.layout,\n                    msg: t(\"please_wait\")\n                });\n\n                this.loadMask.show();\n            }.bind(this));\n        }\n\n        return this.layout;\n    },\n\n    getProcessingOptionsGrid: function() {\n\n        this.processingOptionsStore = new Ext.data.JsonStore({\n            proxy: {\n                url: Routing.generate('pimcore_admin_document_printcontainer_getprocessingoptions'),\n                type: 'ajax',\n                reader: {\n                    type: 'json',\n                    rootProperty: \"options\",\n                    idProperty: 'name'\n                },\n                extraParams: { id: this.page.id }\n            },\n            fields: ['name','label','type','value','default','values'],\n            autoDestroy: true,\n            autoLoad: true,\n            listeners: {\n                load: function() {\n                    if(this.processingOptionsStore.count() > 0) {\n                        this.processingOptionsGrid.show();\n                    }\n                }.bind(this)\n            },\n            sortInfo:{field: 'name', direction: \"ASC\"}\n        });\n\n        this.processingOptionsGrid = Ext.create('Ext.grid.Panel', {\n            style: \"padding-bottom: 10px\",\n            autoScroll: true,\n            bodyCls: \"pimcore_editable_grid\",\n            autoHeight: true,\n            trackMouseOver: true,\n            hidden: true,\n            store: this.processingOptionsStore,\n            clicksToEdit: 1,\n            viewConfig: {\n                markDirty: false\n            },\n            plugins: [\n                Ext.create('Ext.grid.plugin.CellEditing', {\n                    clicksToEdit: 1,\n                    listeners: {\n                        beforeedit: function(editor, context, eOpts) {\n                            editor.editors.each(function (e) {\n                                try {\n                                    // complete edit, so the value is stored when hopping around with TAB\n                                    e.completeEdit();\n                                    Ext.destroy(e);\n                                } catch (exception) {\n                                    // garbage collector was faster\n                                    // already destroyed\n                                }\n                            });\n\n                            editor.editors.clear();\n                        }\n                    }\n                })\n            ],\n            columnLines: true,\n            stripeRows: true,\n            columns: [\n                {\n                    text: t(\"name\"),\n                    dataIndex: 'label',\n                    editable: false,\n                    width: 120,\n                    renderer: function(value) {\n                        return t(\"web2print_\" + value, value);\n                    },\n                    sortable: true\n                },\n                {\n                    flex: 1,\n                    text: t(\"value\"),\n                    dataIndex: 'value',\n                    getEditor: this.getCellEditor.bind(this),\n                    editable: true,\n                    renderer: this.getCellRenderer.bind(this),\n                    listeners: {\n                        \"mousedown\": this.cellMousedown.bind(this)\n                    }\n                }\n            ]\n        });\n\n        return this.processingOptionsGrid;\n    },\n\n    getCellRenderer: function (value, metaData, record, rowIndex, colIndex, store) {\n        var data = record.data;\n        var type = data.type;\n\n        if (type === \"text\") {\n            return Ext.util.Format.htmlEncode(value);\n        }\n\n        if (type === \"bool\") {\n            return '<div style=\"text-align: left\"><div role=\"button\" class=\"x-grid-checkcolumn' + (value ? ' x-grid-checkcolumn-checked' : '') + '\" style=\"\"></div></div>';\n        }\n\n        if (type === \"select\") {\n            return t(\"web2print_\" + value, value);\n        }\n\n        return value;\n    },\n\n    cellMousedown: function (grid, cell, rowIndex, cellIndex, e) {\n        var store = grid.getStore();\n        var record = store.getAt(rowIndex);\n\n        var data = record.data;\n        var type = data.type;\n\n        if (type == \"bool\") {\n            record.set(\"data\", !data.data);\n            record.set(\"value\", !data.value);\n        }\n    },\n\n    getCellEditor: function (record) {\n\n        var data = record.data;\n\n        var type = data.type;\n        var property;\n\n        if (type == \"text\") {\n            property = new Ext.form.TextField();\n        }\n        else if (type == \"bool\") {\n            //nothing needed there\n        }\n        else if (type == \"select\") {\n            var values = data.values;\n            var storeValues = [];\n            for(var i=0; i < values.length; i++) {\n                storeValues.push([values[i], t(\"web2print_\" + values[i], values[i])]);\n            }\n\n            property = new Ext.form.ComboBox({\n                triggerAction: 'all',\n                editable: false,\n                mode: 'local',\n                // typeAhead: true,\n                lazyRender: true,\n                store: new Ext.data.ArrayStore({\n                    fields: [\"id\", \"value\"],\n                    data: storeValues\n                }),\n                valueField: \"id\",\n                displayField: \"value\"\n            });\n        }\n\n\n        return property;\n    },\n\n    generatePdf: function() {\n\n        var params = this.generateForm.getForm().getFieldValues();\n\n        this.processingOptionsStore.each(function(rec) {\n            params[rec.data.name] = rec.data.value;\n        });\n        params.id = this.page.id;\n\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_document_printpage_startpdfgeneration'),\n            method: 'POST',\n            jsonData: params,\n            success: function(response) {\n                result = Ext.decode(response.responseText);\n                if(result.success) {\n                    this.checkForActiveGenerateProcess();\n                }\n            }.bind(this)\n        });\n    },\n\n\n    onLayoutResize: function (el, width, height, rWidth, rHeight) {\n        this.setLayoutFrameDimensions(width, height);\n    },\n\n    setLayoutFrameDimensions: function (width, height) {\n        Ext.get(this.iframeName).setStyle({\n            height: (height) + \"px\"\n        });\n    },\n\n    iFrameLoaded: function () {\n        if(this.loadMask){\n            this.loadMask.hide();\n        }\n    },\n\n    loadCurrentPreview: function () {\n        var date = new Date();\n        var url = Routing.generate('pimcore_admin_document_printpage_pdfdownload', {id: this.page.id, time: date.getTime()});\n\n        try {\n            Ext.get(this.iframeName).dom.src = url;\n        }\n        catch (e) {\n            console.log(e);\n        }\n    },\n\n    refresh: function () {\n        if(!this.loaded)  {\n            this.checkPdfDirtyState();\n            this.checkForActiveGenerateProcess();\n            this.loaded = true;\n        }\n    },\n\n    checkForActiveGenerateProcess: function() {\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_document_printpage_activegenerateprocess'),\n            method: 'POST',\n            params: {id: this.page.id},\n            success: function(response) {\n                var result = Ext.decode(response.responseText);\n                if(result.activeGenerateProcess) {\n                    this.generateForm.hide();\n                    this.statusUpdateBox.show();\n\n                    if(result.statusUpdate) {\n                        var text = result.statusUpdate.status + \"% (\" + t(\"web2print_\" + result.statusUpdate.statusUpdate, result.statusUpdate.statusUpdate) + \")\";\n                        this.progressBar.updateProgress(result.statusUpdate.status / 100, text);\n                    }\n\n                    window.setTimeout(function() {\n                        this.checkForActiveGenerateProcess();\n                    }.bind(this), 2000);\n                } else {\n                    this.generateForm.show();\n                    this.statusUpdateBox.hide();\n\n                    this.downloadButton.setDisabled(!result.downloadAvailable);\n\n                    this.generatedDateField.setValue(result.date);\n                    this.generateMessageField.setValue(result.message);\n\n                    if(result.downloadAvailable) {\n                        this.loadCurrentPreview();\n                    }\n                    this.iFrameLoaded();\n                    this.checkPdfDirtyState();\n                }\n            }.bind(this)\n        });\n    },\n\n    checkPdfDirtyState: function() {\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_document_printpage_checkpdfdirty'),\n            params: {id: this.page.id},\n            success: function(response) {\n                result = Ext.decode(response.responseText);\n                if(result.pdfDirty) {\n                    this.dirtyLabel.setVisible(true);\n                } else {\n                    this.dirtyLabel.setVisible(false);\n                }\n            }.bind(this)\n        });\n    },\n\n\n    enableGenerateButton: function(enable) {\n        if(enable) {\n            this.generateButton.enable();\n            this.publishedWarning.hide();\n        } else {\n            this.generateButton.disable();\n            this.publishedWarning.show();\n        }\n    }\n\n});\n"], "filenames": ["bundles/AdminBundle/Resources/public/js/pimcore/document/printpages/pdf_preview.js"], "buggy_code_start_loc": [267], "buggy_code_end_loc": [276], "fixing_code_start_loc": [267], "fixing_code_end_loc": [276], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.19.", "other": {"cve": {"id": "CVE-2023-1286", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-09T11:15:10.147", "lastModified": "2023-03-15T13:27:37.937", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.19."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:H/UI:R/S:U/C:N/I:L/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.6, "impactScore": 4.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.19", "matchCriteriaId": "9F355AEC-329F-43D1-A3D7-44C2481A1999"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/82cca7f4a7560b160336cce2610481098ca52c18", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/31d97442-3f87-439f-83f0-1c7862ef0c7c", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/82cca7f4a7560b160336cce2610481098ca52c18"}}