{"buggy_code": ["<?php\n\n/**\n * Message and Reminder Center UI\n *\n * @Package OpenEMR\n * @link http://www.open-emr.org\n * @author OpenEMR Support LLC\n * @author Roberto Vasquez <robertogagliotta@gmail.com>\n * @author Rod Roark <rod@sunsetsystems.com>\n * @author Brady Miller <brady.g.miller@gmail.com>\n * @author Ray Magauran <magauran@medfetch.com>\n * @author Tyler Wrenn <tyler@tylerwrenn.com>\n * @copyright Copyright (c) 2010 OpenEMR Support LLC\n * @copyright Copyright (c) 2017 MedEXBank.com\n * @copyright Copyright (c) 2018-2019 Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2020 Tyler Wrenn <tyler@tylerwrenn.com>\n * @license https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nrequire_once(\"../../globals.php\");\nrequire_once(\"$srcdir/pnotes.inc\");\nrequire_once(\"$srcdir/patient.inc\");\nrequire_once(\"$srcdir/options.inc.php\");\nrequire_once(\"$srcdir/gprelations.inc.php\");\nrequire_once \"$srcdir/user.inc\";\nrequire_once(\"$srcdir/MedEx/API.php\");\n\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Csrf\\CsrfUtils;\nuse OpenEMR\\Common\\Logging\\EventAuditLogger;\nuse OpenEMR\\Core\\Header;\nuse OpenEMR\\OeUI\\OemrUI;\n\n//Gets validation rules from Page Validation list.\n$collectthis = collectValidationPageRules(\"/interface/main/messages/messages.php\");\nif (empty($collectthis)) {\n    $collectthis = \"{}\";\n} else {\n    $collectthis = json_sanitize($collectthis[array_keys($collectthis)[0]][\"rules\"]);\n}\n\n$MedEx = new MedExApi\\MedEx('MedExBank.com');\n\nif ($GLOBALS['medex_enable'] == '1') {\n    if ($_REQUEST['SMS_bot']) {\n        $result = $MedEx->login('');\n        $MedEx->display->SMS_bot($result);\n        exit();\n    }\n    $logged_in = $MedEx->login();\n} else {\n    $logged_in = null;\n}\n\n$setting_bootstrap_submenu = prevSetting('', 'setting_bootstrap_submenu', 'setting_bootstrap_submenu', ' ');\n//use $uspfx as the first variable for page/script specific user settings instead of '' (which is like a global but you have to request it).\n$uspfx = substr(__FILE__, strlen($webserver_root)) . '.';\n$rcb_selectors = prevSetting($uspfx, 'rcb_selectors', 'rcb_selectors', 'block');\n$rcb_facility = prevSetting($uspfx, 'form_facility', 'form_facility', '');\n$rcb_provider = prevSetting($uspfx, 'form_provider', 'form_provider', $_SESSION['authUserID']);\n\nif (\n    (array_key_exists('setting_bootstrap_submenu', $_POST)) ||\n    (array_key_exists('rcb_selectors', $_POST))\n) {\n    // These are not form elements. We only ever change them via ajax, so exit now.\n    exit();\n}\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <?php\n    //validation library\n    $use_validate_js = 1;\n    require_once($GLOBALS['srcdir'] . \"/validation/validation_script.js.php\");\n    ?>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"description\" content=\"MedEx Bank\" />\n    <meta name=\"author\" content=\"OpenEMR: MedExBank\" />\n    <?php Header::setupHeader(['datetime-picker', 'opener', 'moment', 'select2']); ?>\n    <link rel=\"stylesheet\" href=\"<?php echo $webroot; ?>/interface/main/messages/css/reminder_style.css?v=<?php echo $v_js_includes; ?>\">\n\n    <script>\n        var xljs1 = '<?php echo xla('Preferences updated successfully'); ?>';\n        var format_date_moment_js = '<?php echo attr(DateFormatRead(\"validateJS\")); ?>';\n        <?php require_once \"$srcdir/restoreSession.php\"; ?>\n    </script>\n\n    <script src=\"<?php echo $GLOBALS['web_root']; ?>/interface/main/messages/js/reminder_appts.js?v=<?php echo $v_js_includes; ?>\"></script>\n    <style>\n        @media only screen and (max-width: 768px) {\n            [class*=\"col-\"] {\n                width: 100%;\n                text-align: left !important;\n            }\n\n            .icon-bar {\n                background-color: var(--danger);\n            }\n        }\n    </style>\n\n<?php\nif (($GLOBALS['medex_enable'] == '1') && (empty($_REQUEST['nomenu'])) && ($GLOBALS['disable_rcb'] != '1')) {\n    $MedEx->display->navigation($logged_in);\n    echo \"<br /><br /><br />\";\n}\n\nif (!empty($_REQUEST['go'])) { ?>\n    <?php\n    if (($_REQUEST['go'] == \"setup\") && (!$logged_in)) {\n        echo \"<title>\" . xlt('MedEx Setup') . \"</title>\";\n        $stage = $_REQUEST['stage'];\n        if (!is_numeric($stage)) {\n            echo \"<br /><span class='title'>$stage \" . xlt('Warning') . \": \" . xlt('This is not a valid request') . \".</span>\";\n        } else {\n            $MedEx->setup->MedExBank($stage);\n        }\n    } elseif ($_REQUEST['go'] == \"addRecall\") {\n        echo \"<title>\" . xlt('New Recall') . \"</title>\";\n        $MedEx->display->display_add_recall();\n    } elseif ($_REQUEST['go'] == 'Recalls') {\n        echo \"<title>\" . xlt('Recall Board') . \"</title>\";\n        $MedEx->display->display_recalls($logged_in);\n    } elseif ((($_REQUEST['go'] == \"setup\") || ($_REQUEST['go'] == 'Preferences')) && ($logged_in)) {\n        echo \"<title>MedEx: \" . xlt('Preferences') . \"</title>\";\n        $MedEx->display->preferences();\n    } elseif ($_REQUEST['go'] == 'icons') {\n        echo \"<title>MedEx: \" . xlt('Icons') . \"&#x24B8;</title>\";\n        $MedEx->display->icon_template();\n    } elseif ($_REQUEST['go'] == 'SMS_bot') {\n        echo \"<title>MedEx: SMS Bot&#x24B8;</title>\";\n        $MedEx->display->SMS_bot($logged_in);\n        exit;\n    } else {\n        echo \"<title>\" . xlt('MedEx Setup') . \"</title>\";\n        echo xlt('Warning: Navigation error. Please refresh this page.');\n    }\n} else {\n    //original message.php stuff\n\n    if ($GLOBALS['enable_help'] == 1) {\n        $help_icon = '<a class=\"float-right oe-help-redirect\" data-target=\"#myModal\" data-toggle=\"modal\" href=\"#\" id=\"help-href\" name=\"help-href\" style=\"color: var(--gray)\" title=\"' . xla(\"Click to view Help\") . '\"><i class=\"fa fa-question-circle\" aria-hidden=\"true\"></i></a>';\n    } elseif ($GLOBALS['enable_help'] == 2) {\n        $help_icon = '<a class=\"float-right oe-help-redirect\" data-target=\"#myModal\" data-toggle=\"modal\" href=\"#\" id=\"help-href\" name=\"help-href\" style=\"color: var(--gray300) !important\" title=\"' . xla(\"To enable help - Go to  Administration > Globals > Features > Enable Help Modal\") . '\"><i class=\"fa fa-question-circle\" aria-hidden=\"true\"></i></a>';\n    } elseif ($GLOBALS['enable_help'] == 0) {\n         $help_icon = '';\n    }\n    $heading_caption = xlt('Messages') . ', ' . xlt('Reminders');\n    if ($GLOBALS['disable_rcb'] != '1') {\n        $heading_caption .= ', ' . xlt('Recalls');\n    }\n\n    $arrOeUiSettings = array(\n        'heading_title' => $heading_caption,\n        'include_patient_name' => false,// use only in appropriate pages\n        'expandable' => false,\n        'expandable_files' => array(\"\"),//all file names need suffix _xpd\n        'action' => \"\",//conceal, reveal, search, reset, link or back\n        'action_title' => \"\",\n        'action_href' => \"\",//only for actions - reset, link or back\n        'show_help_icon' => true,\n        'help_file_name' => \"message_center_help.php\"\n    );\n    $oemr_ui = new OemrUI($arrOeUiSettings);\n\n    echo \"<title>\" .  xlt('Message Center') . \"</title>\";\n    ?>\n</head>\n<body class='body_top'>\n    <div id=\"container_div\" class=\"<?php echo attr($oemr_ui->oeContainer()); ?>\">\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"clearfix\">\n                    <?php echo  $oemr_ui->pageHeading() . \"\\r\\n\"; ?>\n                </div>\n            </div>\n        </div>\n        <div class=\"container-fluid mb-3\">\n            <ul class=\"nav nav-pills\">\n                <li class=\"nav-item\" id='li-mess'>\n                    <a href='#' class=\"active nav-link font-weight-bold\" id='messages-li'><?php echo xlt('Messages'); ?></a>\n                </li>\n                <li class=\"nav-item\" id='li-remi'>\n                    <a href='#' id='reminders-li' class=\"nav-link font-weight-bold\"><?php echo xlt('Reminders'); ?></a>\n                </li>\n                <?php if ($GLOBALS['disable_rcb'] != '1') { ?>\n                <li class=\"nav-item\" id='li-reca'>\n                    <a href='#' id='recalls-li' class=\"nav-link font-weight-bold\"><?php echo xlt('Recalls'); ?></a>\n                </li>\n                <?php }?>\n                <?php if ($logged_in) { ?>\n                <li class=\"nav-item\" id='li-sms'>\n                    <a href='#' id='sms-li' class=\"nav-link font-weight-bold\"><?php echo xlt('SMS Zone'); ?></a>\n                </li>\n                <?php }?>\n            </ul>\n        </div>\n        <div class=\"row\" id=\"messages-div\">\n            <div class=\"col-sm-12\">\n                <div class=\"jumbotron jumbotron-fluid py-3\">\n                    <div class=\"col-sm-12 col-md-12 col-lg-12\">\n                        <?php\n                        // Check to see if the user has Admin rights, and if so, allow access to See All.\n                        $showall = isset($_GET['show_all']) ? $_GET['show_all'] : \"\";\n                        if ($showall == \"yes\") {\n                            $show_all = $showall;\n                        } else {\n                            $show_all = \"no\";\n                        }\n                        // Collect active variable and applicable html code for links\n                        $form_active = (isset($_REQUEST['form_active']) ? $_REQUEST['form_active'] : false);\n                        $form_inactive = (isset($_REQUEST['form_inactive']) ? $_REQUEST['form_inactive'] : false);\n                        if ($form_active) {\n                            $active = '1';\n                            $activity_string_html = 'form_active=1';\n                        } elseif ($form_inactive) {\n                            $active = '0';\n                            $activity_string_html = 'form_inactive=1';\n                        } else {\n                            $active = 'all';\n                            $activity_string_html = '';\n                        }\n                        //collect the task setting\n                        $task = isset($_REQUEST['task']) ? $_REQUEST['task'] : \"\";\n                        if (AclMain::aclCheckCore('admin', 'super')) {\n                            if ($show_all == 'yes') {\n                                $showall = \"yes\";\n                                $lnkvar = \"messages.php?show_all=no&\" . $activity_string_html;\n                                $lnkattributes = \"name='Just Mine' onclick='top.restoreSession()'\";\n                                $otherstuff = \"<i id='just-mine-tooltip' class='fa fa-user fa-lg text-body' aria-hidden='true'></i>\";\n                                $messages = xl('All Messages');\n                            } else {\n                                $showall = \"no\";\n                                $lnkvar = \"messages.php?show_all=yes&\" . $activity_string_html;\n                                $lnkattributes = \"name='See All' onclick='top.restoreSession()'\";\n                                $otherstuff = \"<i id='see-all-tooltip' class='fa fa-users fa-lg text-body' aria-hidden='true'></i>\";\n                                $messages = xl('My Messages');\n                            }\n                        } else {\n                            $messages = xlt('My Messages');\n                        }\n                        ?>\n                        <div class=\"oe-margin-b-20\">\n                            <span class=\"title\"><?php echo text($messages); ?></span>\n                            <a class='more' href=\"<?php echo $lnkvar ?? ''; ?>\" <?php echo $lnkattributes ?? ''; ?>><?php echo $otherstuff ?? ''; ?></a>\n                        </div>\n                        <div class=\"oe-margin-b-10\">\n                            <?php\n                            //show the activity links\n                            if (empty($task) || $task == \"add\" || $task == \"delete\") { ?>\n                                    <?php if ($active == \"all\") { ?>\n                                <span class=\"font-weight-bold\"><?php echo xlt('All Messages'); ?></span>\n                                    <?php } else { ?>\n                                <a href=\"messages.php\" class=\"link btn btn-secondary\" onclick=\"top.restoreSession()\"><?php echo xlt('Show All'); ?></a>\n                                    <?php } ?>\n                                    |\n                                    <?php if ($active == '1') { ?>\n                                <span class=\"font-weight-bold\"><?php echo xlt('Active Messages'); ?></span>\n                                    <?php } else { ?>\n                                <a href=\"messages.php?form_active=1\" class=\"link btn btn-secondary\" onclick=\"top.restoreSession()\"><?php echo xlt('Show Active'); ?></a>\n                                    <?php } ?>\n                                    |\n                                    <?php if ($active == '0') { ?>\n                                <span class=\"font-weight-bold\"><?php echo xlt('Inactive Messages'); ?></span>\n                                    <?php } else { ?>\n                                <a href=\"messages.php?form_inactive=1\" class=\"link btn btn-secondary\" onclick=\"top.restoreSession()\"><?php echo xlt('Show Inactive'); ?></a>\n                                    <?php } ?>\n                            <?php } ?>\n                        </div>\n                        <?php\n                        $note = '';\n                        $noteid = '';\n                        $title = '';\n                        $form_message_status = '';\n                        $reply_to = '';\n                        $patientname = '';\n                        switch ($task) {\n                            case \"add\":\n                                // Add a new message for a specific patient; the message is documented in Patient Notes.\n                                // Add a new message; it's treated as a new note in Patient Notes.\n                                $note = $_POST['note'];\n                                $noteid = $_POST['noteid'];\n                                $form_note_type = $_POST['form_note_type'];\n                                $form_message_status = $_POST['form_message_status'];\n                                $reply_to = explode(';', rtrim($_POST['reply_to'], ';'));\n                                $assigned_to_list = explode(';', $_POST['assigned_to']);\n                                $datetime = isset($_POST['form_datetime']) ? DateTimeToYYYYMMDDHHMMSS($_POST['form_datetime']) : '';\n                                foreach ($assigned_to_list as $assigned_to) {\n                                    if ($noteid && $assigned_to != '-patient-') {\n                                        updatePnote($noteid, $note, $form_note_type, $assigned_to, $form_message_status, $datetime);\n                                        $noteid = '';\n                                    } else {\n                                        if ($noteid && $assigned_to == '-patient-') {\n                                            // When $assigned_to == '-patient-' we don't update the current note, but\n                                            // instead create a new one with the current note's body prepended and\n                                            // attributed to the patient.  This seems to be all for the patient portal.\n                                            $row = getPnoteById($noteid);\n                                            if (!$row) {\n                                                die(\"getPnoteById() did not find id '\" . text($noteid) . \"'\");\n                                            }\n                                            $pres = sqlQuery(\"SELECT lname, fname \" .\n                                                \"FROM patient_data WHERE pid = ?\", array($reply_to[0]));\n                                            $patientname = $pres['lname'] . \", \" . $pres['fname'];\n                                            $note .= \"\\n\\n$patientname on \" . $row['date'] . \" wrote:\\n\\n\";\n                                            $note .= $row['body'];\n                                        }\n                                        // There's no note ID, and/or it's assigned to the patient.\n                                        // In these cases a new note is created.\n                                        foreach ($reply_to as $patient) {\n                                            addPnote($patient, $note, $userauthorized, '1', $form_note_type, $assigned_to, $datetime, $form_message_status);\n                                        }\n                                    }\n                                }\n                                break;\n                            case \"savePatient\":\n                            case \"save\":\n                                // Update alert.\n                                $noteid = $_POST['noteid'];\n                                $form_message_status = $_POST['form_message_status'];\n                                $reply_to = $_POST['reply_to'];\n                                if ($task == \"save\") {\n                                    updatePnoteMessageStatus($noteid, $form_message_status);\n                                } else {\n                                    updatePnotePatient($noteid, $reply_to);\n                                }\n                                $task = \"edit\";\n                                $note = $_POST['note'];\n                                $title = $_POST['form_note_type'];\n                                $reply_to = $_POST['reply_to'];\n                                break;\n                            case \"edit\":\n                                if ($noteid == \"\") {\n                                    $noteid = $_GET['noteid'];\n                                }\n                                // Update the message if it already exists; it's appended to an existing note in Patient Notes.\n                                $result = getPnoteById($noteid);\n                                if ($result) {\n                                    if ($title == \"\") {\n                                        $title = $result['title'];\n                                    }\n                                    $body = $result['body'];\n                                    // if our reply-to is 0 it breaks multi patient select and other functionality\n                                    // this most likely didn't break before due to php implicit type conversion of 0 to \"\"\n                                    if ($reply_to == \"\" && $result['pid'] != 0) {\n                                        $reply_to = $result['pid'];\n                                    }\n                                    $form_message_status = $result['message_status'];\n                                    $datetime = $result['date'];\n                                }\n                                break;\n                            case \"delete\":\n                                // Delete selected message(s) from the Messages box (only).\n                                $delete_id = $_POST['delete_id'];\n                                for ($i = 0; $i < count($delete_id); $i++) {\n                                    deletePnote($delete_id[$i]);\n                                    EventAuditLogger::instance()->newEvent(\"delete\", $_SESSION['authUser'], $_SESSION['authProvider'], 1, \"pnotes: id \" . $delete_id[$i]);\n                                }\n                                break;\n                        }\n                        // This is for sorting the records.\n                        $sort = array(\"users.lname\", \"patient_data.lname\", \"pnotes.title\", \"pnotes.date\", \"pnotes.message_status\");\n                        $sortby = (isset($_REQUEST['sortby']) && ($_REQUEST['sortby'] != \"\")) ? $_REQUEST['sortby'] : $sort[3];\n                        $sortorder = (isset($_REQUEST['sortorder']) && ($_REQUEST['sortorder'] != \"\")) ? $_REQUEST['sortorder'] : \"desc\";\n                        $begin = isset($_REQUEST['begin']) ? $_REQUEST['begin'] : 0;\n\n                        if ($task == \"addnew\" or $task == \"edit\") {\n                            // Display the Messages page layout.\n                            echo \"<form name='form_patient' id='new_note'\n                                    class='form-horizontal'\n                                    action=\\\"messages.php?showall=\" . attr_url($showall) . \"&sortby=\" . attr_url($sortby) . \"&sortorder=\" . attr_url($sortorder) . \"&begin=\" . attr_url($begin) . \"&$activity_string_html\\\"\n                                    method='post'>\n                                    <input type='hidden' name='noteid' id='noteid' value='\" . attr($noteid) . \"' />\n                                    <input type='hidden' name='task' id='task' value='add' />\";\n                            if ($task == \"addnew\") {\n                                $message_legend = xl('Create New Message');\n                                $onclick = \"onclick=multi_sel_patient()\";\n                            } elseif ($task == \"edit\") {\n                                $message_legend = xl('Add To Existing Message');\n                                $onclick = \"\";\n                            }\n\n                            ?>\n                            <div class='col-md-12'>\n                                <div class=\"jumbotron jumbotron-fluid py-3\">\n                                    <h4><?php echo text($message_legend); ?></h4>\n                                    <div class=\"row\">\n                                        <div class=\"col-12 oe-custom-line\">\n                                            <div class=\"row\">\n                                                <div class=\"col-6 col-md-3\">\n                                                    <label for=\"form_note_type\"><?php echo xlt('Type'); ?>:</label>\n                                                    <?php\n                                                    if ($title == \"\") {\n                                                        $title = \"Unassigned\";\n                                                    }\n                                                    // Added 6/2009 by BM to incorporate the patient notes into the list_options listings.\n                                                    generate_form_field(array('data_type' => 1, 'field_id' => 'note_type', 'list_id' => 'note_type', 'empty_title' => 'SKIP', 'order_by' => 'title', 'class' => 'form-control'), $title);\n                                                    ?>\n                                                </div>\n                                                <div class=\"col-6 col-md-3\">\n                                                    <label for=\"form_message_status\"><?php echo xlt('Status'); ?>:</label>\n                                                    <?php\n                                                    if ($form_message_status == \"\") {\n                                                        $form_message_status = 'New';\n                                                    }\n                                                    generate_form_field(array('data_type' => 1, 'field_id' => 'message_status', 'list_id' => 'message_status', 'empty_title' => 'SKIP', 'order_by' => 'title', 'class' => 'form-control'), $form_message_status); ?>\n                                                </div>\n                                                <div class=\"col-6 col-md-4\">\n                                                    <?php\n                                                    if ($task != \"addnew\" && $result['pid'] != 0) { ?>\n                                                        <a class=\"patLink\" onclick=\"goPid('<?php echo attr(addslashes($result['pid'])); ?>')\" title='<?php echo xla('Click me to Open Patient Dashboard') ?>'><?php echo xlt('Patient'); ?>:</a><label for=\"form_patient\">&nbsp</label>\n                                                        <?php\n                                                    } else { ?>\n                                                        <span class='font-weight-bold <?php echo($task == \"addnew\" ? \"text-danger\" : \"\") ?>'><?php echo xlt('Patient'); ?>:</span></a><label for=\"form_patient\"></label>\n                                                        <?php\n                                                    }\n\n                                                    if ($reply_to) {\n                                                        $prow = sqlQuery(\"SELECT lname, fname,pid, pubpid, DOB  \" .\n                                                            \"FROM patient_data WHERE pid = ?\", array($reply_to));\n                                                        $patientname = $prow['lname'] . \", \" . $prow['fname'];\n                                                    }\n                                                    if ($task == \"addnew\" || $result['pid'] == 0) {\n                                                        $cursor = \"oe-cursor-add\";\n                                                        $background = \"oe-patient-background\";\n                                                    } elseif ($task == \"edit\") {\n                                                        $cursor = \"oe-cursor-stop\";\n                                                        $background = '';\n                                                    }\n                                                    ?>\n                                                    <input type='text' id='form_patient' name='form_patient' class='form-control <?php echo $cursor . \" \" . $background;?>' onclick=\"multi_sel_patient()\" placeholder='<?php echo xla(\"Click to add patient\"); ?>' value='<?php echo attr($patientname); ?>' readonly />\n                                                    <input type='hidden' class=\"form-control\" name='reply_to' id='reply_to' value='<?php echo attr($reply_to); ?>'/>\n                                                </div>\n                                                <div class=\"col-6 col-md-2 d-flex flex-wrap\">\n                                                    <?php\n                                                    if ($task == \"addnew\" || $result['pid'] == 0) {\n                                                        echo \"<label class='oe-empty-label' for='clear_patients'></label>\";\n                                                        echo '<button type=\"button\" id=\"clear_patients\"  class=\"btn btn-secondary btn-undo float-left flip\" value=\"' . xla('Clear') . '\">' . xlt(\"Clear\") . '</button>';\n                                                    } ?>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"row\">\n                                        <div class=\"col-12 oe-custom-line\">\n                                            <div class=\"row\">\n                                                <?php if ($GLOBALS['messages_due_date']) { ?>\n                                                <div class=\"col-6 col-sm-2\">\n                                                    <label for=\"form_note_type\"><?php echo xlt('Due date'); ?>:</label>\n                                                    <?php generate_form_field(array('data_type' => 4, 'field_id' => 'datetime', 'edit_options' => 'F'), empty($datetime) ? date('Y-m-d H:i') : $datetime) ?>\n                                                </div>\n                                                <?php } ?>\n                                                <div class=\"col-6 col-sm-4 d-flex align-items-end flex-wrap\">\n                                                    <label for=\"assigned_to_text\"><?php echo xlt('To{{Destination}}'); ?>:</label>\n                                                    <input type='text' name='assigned_to_text' class='form-control oe-cursor-stop' id='assigned_to_text' readonly='readonly' value='' placeholder='<?php echo xla(\"SELECT Users FROM The Dropdown LIST\"); ?>' />\n                                                    <input type='hidden' name='assigned_to' id='assigned_to' />\n                                                </div>\n                                                <div class=\"col-6 col-sm-4\">\n                                                    <label class=\"oe-empty-label\" for=\"users\"></label>\n                                                    <select name='users' id='users' class='form-control' onchange='addtolist(this);'>\n                                                        <?php\n                                                        echo \"<option value='--'\";\n                                                        echo \">\" . xlt('Select User');\n                                                        echo \"</option>\\n\";\n                                                        $ures = sqlStatement(\"SELECT username, fname, lname FROM users \" .\n                                                            \"WHERE username != '' AND active = 1 AND \" .\n                                                            \"( info IS NULL OR info NOT LIKE '%Inactive%' ) \" .\n                                                            \"ORDER BY lname, fname\");\n                                                        while ($urow = sqlFetchArray($ures)) {\n                                                            echo \"    <option value='\" . attr($urow['username']) . \"'\";\n                                                            echo \">\" . text($urow['lname']);\n                                                            if ($urow['fname']) {\n                                                                echo \", \" . text($urow['fname']);\n                                                            }\n                                                            echo \"</option>\\n\";\n                                                        }\n                                                        ?>\n                                                    </select>\n                                                </div>\n                                                <div class=\"col-6 col-sm-2  d-flex align-items-end flex-wrap\">\n                                                    <label class=\"oe-empty-label\" for=\"users\"></label>\n                                                    <button type=\"button\" name=\"clear_user\" id=\"clear_user\" class=\"btn btn-secondary btn-undo float-left flip\" value=\"<?php echo xla('Clear'); ?>\"><?php echo xlt('Clear'); ?></button>\n                                                </div>\n                                            </div>\n                                        <div class='col-12 oe-margin-t-3'>\n                                        <?php\n                                        if ($noteid) {\n                                            include \"templates/linked_documents.php\";\n\n                                            // Get the related procedure order IDs if any.\n                                            $tmp = sqlStatement(\n                                                \"SELECT id1 FROM gprelations WHERE \" .\n                                                \"type1 = ? AND type2 = ? AND id2 = ?\",\n                                                array('2', '6', $noteid)\n                                            );\n                                            if (sqlNumRows($tmp)) {\n                                                echo \" <tr>\\n\";\n                                                echo \"  <td class='text'><span class='font-weight-bold'>\" . xlt('Linked procedure order') . \":</span>\\n\";\n                                                while ($gprow = sqlFetchArray($tmp)) {\n                                                    echo \"   <a href='\";\n                                                    echo $GLOBALS['webroot'] . \"/interface/orders/single_order_results.php?orderid=\";\n                                                    echo attr_url($gprow['id1']);\n                                                    echo \"' target='_blank' onclick='top.restoreSession()'>\";\n                                                    echo text($gprow['id1']);\n                                                    echo \"</a>\\n\";\n                                                }\n                                                echo \"  </td>\\n\";\n                                                echo \" </tr>\\n\";\n                                            }\n                                        }\n                                        ?>\n                                    </div>\n                                    </div>\n                                    <!-- <div class=\"row\"> -->\n                                        <div class='col-12'>\n                                            <?php\n\n                                            if ($noteid) {\n                                                $body = preg_replace('/(:\\d{2}\\s\\()' . $result['pid'] . '(\\sto\\s)/', '${1}' . $patientname . '${2}', $body);\n                                                $body = preg_replace('/(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}\\s\\([^)(]+\\s)(to)(\\s[^)(]+\\))/', '${1}' . xl('to{{Destination}}') . '${3}', $body);\n                                                $body = pnoteConvertLinks(nl2br(text(oeFormatPatientNote($body))));\n                                                echo \"<div style='height: 120px; resize: vertical;' class='border overflow-auto text oe-margin-t-3 p-2 mb-2 w-100'>\" . $body . \"</div>\";\n                                            }\n\n                                            ?>\n                                            <textarea name='note' id='note' class='form-control oe-margin-t-3 p-1' rows=\"5\"><?php echo nl2br(text($note)); ?></textarea>\n                                        </div>\n                                        <div class=\"col-12 position-override oe-margin-t-10\">\n                                            <?php if ($noteid) { ?>\n                                                <!-- This is for displaying an existing note. -->\n                                                <button type=\"button\" class=\"btn btn-primary btn-send-msg\" id=\"newnote\" value=\"<?php echo xla('Send message'); ?>\"><?php echo xlt('Send message'); ?></button>\n                                                <button type=\"button\" class=\"btn btn-primary btn-print\" id=\"printnote\" value=\"<?php echo xla('Print message'); ?>\"><?php echo xlt('Print message'); ?></button>\n                                                <button type=\"button\" class=\"btn btn-secondary btn-cancel\" id=\"cancel\" value=\"<?php echo xla('Cancel'); ?>\"><?php echo xlt('Cancel'); ?></button>\n                                            <?php } else { ?>\n                                                <!-- This is for displaying a new note. -->\n                                                <button type=\"button\" class=\"btn btn-primary btn-send-msg\" id=\"newnote\" value=\"<?php echo xla('Send message'); ?>\"><?php echo xlt('Send message'); ?></button>\n                                                <button type=\"button\" class=\"btn btn-cancel btn-secondary\" id=\"cancel\" value=\"<?php echo xla('Cancel'); ?>\"><?php echo xlt('Cancel'); ?></button>\n                                            <?php }\n                                            ?>\n                                        </div>\n                                    <!-- </div> -->\n                                </div>\n                                </div>\n                            </form>\n                            <?php\n                        } else {\n                            for ($i = 0; $i < count($sort); $i++) {\n                                $sortlink[$i] = \"<a  class='arrowhead' href=\\\"messages.php?show_all=\" . attr($showall) . \"&sortby=\" . attr($sort[$i]) . \"&sortorder=asc&$activity_string_html\\\" onclick=\\\"top.restoreSession()\\\" alt=\\\"\" . xla('Sort Up') . \"\\\"><i class='fa fa-sort-down fa-lg' aria-hidden='true'></i></a>\";\n                            }\n                            for ($i = 0; $i < count($sort); $i++) {\n                                if ($sortby == $sort[$i]) {\n                                    switch ($sortorder) {\n                                        case \"asc\":\n                                            $sortlink[$i] = \"<a class='arrowhead' href=\\\"messages.php?show_all=\" . attr($showall) . \"&sortby=\" . attr($sortby) . \"&sortorder=desc&$activity_string_html\\\" onclick=\\\"top.restoreSession()\\\" alt=\\\"\" . xla('Sort Up') . \"\\\"><i class='fa fa-sort-up fa-lg' aria-hidden='true'></i></a>\";\n                                            break;\n                                        case \"desc\":\n                                            $sortlink[$i] = \"<a class='arrowhead' href=\\\"messages.php?show_all=\" . attr($showall) . \"&sortby=\" . attr($sortby) . \"&sortorder=asc&$activity_string_html\\\" onclick=\\\"top.restoreSession()\\\"  alt=\\\"\" . xla('Sort Down') . \"\\\"><i class='fa fa-sort-down fa-lg' aria-hidden='true'></i></a>\";\n                                            break;\n                                    } break;\n                                }\n                            }\n                            // Manage page numbering and display beneath the Messages table.\n                            $listnumber = 25;\n                            $total = getPnotesByUser($active, $show_all, $_SESSION['authUser'], true);\n                            if ($begin == \"\" or $begin == 0) {\n                                $begin = 0;\n                            }\n                            $prev = $begin - $listnumber;\n                            $next = $begin + $listnumber;\n                            $start = $begin + 1;\n                            $end = $listnumber + $start - 1;\n\n                            $chevron_icon_left = $_SESSION['language_direction'] == 'ltr' ? 'fa-chevron-circle-left' : 'fa-chevron-circle-right';\n                            $chevron_icon_right = $_SESSION['language_direction'] == 'ltr' ? 'fa-chevron-circle-right' : 'fa-chevron-circle-left';\n\n                            if ($end >= $total) {\n                                $end = $total;\n                            }\n                            if ($end < $start) {\n                                $start = 0;\n                            }\n                            if ($prev >= 0) {\n                                $prevlink = \"<a href=\\\"messages.php?show_all=\" . attr($showall) . \"&sortby=\" . attr($sortby) . \"&sortorder=\" . attr($sortorder) . \"&begin=\" . attr($prev) . \"&$activity_string_html\\\" onclick=\\\"top.restoreSession()\\\"><i class=\\\"fa \" . $chevron_icon_left . \" chevron_color\\\" aria-hidden=\\\"true\\\"></i></a>\";\n                            } else {\n                                $prevlink = \"<i class=\\\"fa \" . $chevron_icon_left . \" text-muted\\\" aria-hidden=\\\"true\\\" title=\\\"\" . xla(\"On first page\") . \"\\\"></i>\";\n                            }\n\n                            if ($next < $total) {\n                                $nextlink = \"<a href=\\\"messages.php?show_all=\" . attr($showall) . \"&sortby=\" . attr($sortby) . \"&sortorder=\" . attr($sortorder) . \"&begin=\" . attr($next) . \"&$activity_string_html\\\" onclick=\\\"top.restoreSession()\\\"><i class=\\\"fa . $chevron_icon_right . chevron_color\\\" aria-hidden=\\\"true\\\"></i></a>\";\n                            } else {\n                                $nextlink = \"<i class=\\\"fa \" . $chevron_icon_right . \" text-muted\\\" aria-hidden=\\\"true\\\" title=\\\"\" . xla(\"On first page\") . \"\\\"></i>\";\n                            }\n                            // Display the Messages table header.\n                            echo \"\n                                <table class=\\\"w-100\\\">\n                                    <tr>\n                                        <td>\n                                            <form name='MessageList' id='MessageList' action=\\\"messages.php?showall=\" . attr($showall) . \"&sortby=\" . attr($sortby) . \"&sortorder=\" . attr($sortorder) . \"&begin=\" . attr($begin) . \"&$activity_string_html\\\" method='post'>\n                                                <table class='table table-sm table-hover w-100'>\n                                                    <input type='hidden' name='task' value='delete' />\n                                                    <thead class='table-primary'>\n                                                      <tr height='24'>\n                                                          <th align='center' width='25'><input type='checkbox' id='checkAll' onclick='selectAll()'></th>\n                                                          <th width='20%' class='font-weight-bold'>&nbsp;\" . xlt('From') . \" $sortlink[0]</th>\n                                                          <th width='20%' class='font-weight-bold'>&nbsp;\" . xlt('Patient') . \" $sortlink[1]</th>\n                                                          <th class='font-weight-bold'>&nbsp;\" . xlt('Type') . \" $sortlink[2]</th>\n                                                          <th width='15%' class='font-weight-bold'>&nbsp;\" . xlt($GLOBALS['messages_due_date'] ? 'Due date' : 'Date') . \" $sortlink[3]</th>\n                                                          <th width='15%' class='font-weight-bold'>&nbsp;\" . xlt('Status') . \" $sortlink[4]</th>\n                                                      </tr>\n                                                    </thead>\";\n                            // Display the Messages table body.\n                            $count = 0;\n                            $result = getPnotesByUser($active, $show_all, $_SESSION['authUser'], false, $sortby, $sortorder, $begin, $listnumber);\n                            while ($myrow = sqlFetchArray($result)) {\n                                $name = $myrow['user'];\n                                $name = $myrow['users_lname'];\n                                if ($myrow['users_fname']) {\n                                    $name .= \", \" . $myrow['users_fname'];\n                                }\n                                $patient = $myrow['pid'];\n                                if ($patient > 0) {\n                                    $patient = $myrow['patient_data_lname'];\n                                    if ($myrow['patient_data_fname']) {\n                                        $patient .= \", \" . $myrow['patient_data_fname'];\n                                    }\n                                } else {\n                                    $patient = \"* \" . xl('Patient must be set manually') . \" *\";\n                                }\n                                $count++;\n                                echo \"\n                                    <tr id=\\\"row\" . attr($count) . \"\\\" height='24'>\n                                        <td align='center'>\n                                            <input type='checkbox' id=\\\"check\" . attr($count) . \"\\\" name=\\\"delete_id[]\\\" value=\\\"\" .\n                                            attr($myrow['id']) . \"\\\" onclick=\\\"if(this.checked==true){ selectRow('row\" . attr(addslashes($count)) . \"'); }else{ deselectRow('row\" . attr(addslashes($count)) . \"'); }\\\"></td>\n                                        <td>\n                                            <div>\" . text($name) . \"</div>\n                                        </td>\n                                        <td>\n                                            <div><a href=\\\"messages.php?showall=\" . attr_url($showall) . \"&sortby=\" . attr_url($sortby) . \"&sortorder=\" . attr_url($sortorder) . \"&begin=\" . attr_url($begin) . \"&task=edit&noteid=\" .\n                                            attr_url($myrow['id']) . \"&$activity_string_html\\\" onclick=\\\"top.restoreSession()\\\">\" .\n                                            text($patient) . \"</a></div>\n                                        </td>\n                                        <td>\n                                            <div>\" .\n                                                xlt($myrow['title']) . \"</div>\n                                        <td>\n                                            <div>\" . text(oeFormatDateTime($myrow['date'])) . \"</div>\n                                        </td>\n                                        <td>\n                                            <div>\" . text(getListItemTitle('message_status', $myrow['message_status'])) . \"</div>\n                                        </td>\n                                    </tr>\";\n                            }\n                            // Display the Messages table footer.\n\n                            echo \"  </table>\n                                            </form>\n                                            <div class='row oe-margin-t-10'>\n\n                                                <div class=\\\"col-12 col-md-12 col-lg-12\\\"><a href=\\\"messages.php?showall=\" . attr_url($showall) . \"&sortby=\" . attr_url($sortby) . \"&sortorder=\" . attr_url($sortorder) . \"&begin=\" . attr_url($begin) . \"&task=addnew&$activity_string_html\\\" class=\\\"btn btn-primary btn-add\\\" onclick=\\\"top.restoreSession()\\\">\" .\n                                                xlt('Add New{{Message}}') . \"</a> &nbsp; <a href=\\\"javascript:confirmDeleteSelected()\\\" class=\\\"btn btn-danger btn-delete\\\" onclick=\\\"top.restoreSession()\\\">\" .\n                                                xlt('Delete') . \"</a>\";\n\n                            if ($GLOBALS['phimail_enable']) {\n                                echo \"&nbsp; <a href='trusted-messages.php' onclick='top.restoreSession()' class='btn btn-secondary btn-mail'>\" . xlt(\"Compose Trusted Direct Message\") . \"</a>\";\n                                echo \"&nbsp; <button class='btn btn-secondary btn-refresh trusted-messages-force-check'>\" . xlt(\"Check New Trusted Messages\") . \"</button>\";\n                            }\n                            echo \"\n                                                <div  class=\\\"text-right\\\">$prevlink &nbsp; \" . text($end) . \" \" . xlt('of') . \" \" . text($total) . \" &nbsp; $nextlink</div>\n                                                </div>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                </table>\n                                <br />\";\n                            ?>\n\n                            <script>\n                                // This is to confirm delete action.\n                                function confirmDeleteSelected() {\n                                        var int_checked = 0;\n                                        var elem = document.forms.namedItem(\"MessageList\").getElementsByTagName(\"input\");\n\n                                        for (i=0; i < elem.length; i++){\n                                            if(elem[i].checked == true){\n                                                int_checked = ++int_checked;\n                                            }\n                                        }\n                                        if (int_checked > 0){\n                                            if (confirm(\"<?php echo xls('Do you really want to delete the selection?'); ?>\")) {\n                                                document.MessageList.submit();\n                                            }\n                                        } else {\n                                            alert(\"<?php echo xls('Please select message(s) to delete'); ?>\");\n                                        }\n                                    }\n\n\n                                // This is to allow selection of all items in Messages table for deletion.\n                                function selectAll() {\n                                    if (document.getElementById(\"checkAll\").checked === true) {\n                                        document.getElementById(\"checkAll\").checked = true;<?php\n                                        for ($i = 1; $i <= $count; $i++) {\n                                            echo \"document.getElementById(\\\"check$i\\\").checked=true; document.getElementById(\\\"row$i\\\").style.background='var(--gray200)';  \";\n                                        } ?>\n                                    } else {\n                                        document.getElementById(\"checkAll\").checked = false;<?php\n                                        for ($i = 1; $i <= $count; $i++) {\n                                            echo \"document.getElementById(\\\"check$i\\\").checked=false; document.getElementById(\\\"row$i\\\").style.background='var(--light)';  \";\n                                        } ?>\n                                    }\n                                }\n\n                                // The two functions below are for managing row styles in Messages table.\n                                function selectRow(row) {\n                                    document.getElementById(row).style.background = \"var(--gray200)\";\n                                }\n\n                                function deselectRow(row) {\n                                    document.getElementById(row).style.background = \"var(--light)\";\n                                }\n                            </script>\n                            <?php\n                        }\n                        ?>\n                    </div>\n                </div>\n            </div>\n        </div><!--end of messages div-->\n        <div class=\"row oe-display\" id=\"reminders-div\">\n            <div class=\"col-sm-12\">\n                <div class=\"jumbotron jumbotron-fluid py-3\">\n                    <div class=\"col-sm-12 col-md-12 col-lg-12\">\n                        <div class=\"oe-margin-b-10\">\n                            <span class=\"title\"><?php echo xlt('Reminders'); ?></span>\n                        </div>\n                        <?php\n                        // TajEmo Work by CB 2012/01/11 02:51:25 PM adding dated reminders\n                        // I am asuming that at this point security checks have been performed\n                        //require_once '../dated_reminders/dated_reminders.php';\n                        require_once '../dated_reminders/dated_reminders.php';\n                        ?>\n                    </div>\n                </div>\n            </div>\n        </div><!--end of reminders div-->\n        <div class=\"row oe-display\" id=\"recalls-div\">\n            <div class=\"col-sm-12\">\n                <div class=\"jumbotron jumbotron-fluid py-3\">\n                    <?php if ($GLOBALS['disable_rcb'] != '1') { ?>\n                    <div class=\"col-sm-6 col-md-6 col-lg-6\">\n                        <div class=\"dr_container\">\n                            <span class=\"title\"><?php echo xlt('Recalls'); ?></span>\n                            <br/><br/>\n                            <button class=\"btn btn-primary btn-add\" onclick=\"goReminderRecall('addRecall');\"><?php echo xlt('New Recall'); ?></button>\n                            <a class=\"btn btn-secondary btn-transmit\" onclick=\"goReminderRecall('Recalls');\"><span><?php echo xlt('Recall Board'); ?></span></a>\n                            &nbsp;\n                        </div>\n                    </div>\n                    <?php } ?>\n                </div>\n            </div>\n        </div><!--end of recalls div-->\n        <div class=\"row oe-display\" id=\"sms-div\">\n            <div class=\"col-sm-12\">\n                <div class=\"jumbotron jumbotron-fluid py-3\">\n                    <?php if ($logged_in) { ?>\n                    <div class=\"col-sm-4 col-md-4 col-lg-4\">\n                        <span class=\"title\"><?php echo xlt('SMS Zone'); ?></span>\n                        <br/><br/>\n                        <form id=\"smsForm\" class=\"input-group\">\n                            <select id=\"SMS_patient\" type=\"text\" class=\"form-control m-0 w-100\" placeholder=\"<?php echo xla(\"Patient Name\"); ?>\" > </select>\n                            <span class=\"input-group-addon\" onclick=\"SMS_direct();\"><i class=\"fas fa-phone\"></i></span>\n                            <input type=\"hidden\" id=\"sms_pid\" />\n                            <input type=\"hidden\" id=\"sms_mobile\" value=\"\" />\n                            <input type=\"hidden\" id=\"sms_allow\" value=\"\" />\n                        </form>\n                    </div>\n                    <?php } ?>\n                </div>\n            </div>\n        </div><!--end of sms div-->\n    </div><!--end of container div-->\n    <?php $oemr_ui->oeBelowContainerDiv();?>\n    <?php\n    //home of the help modal ;)\n    //$GLOBALS['enable_help'] = 0; // Please comment out line if you want help modal to function on this page\n    if ($GLOBALS['enable_help'] == 1) {\n        echo \"<script>var helpFile = 'message_center_help.php'</script>\";\n        //help_modal.php lives in interface, set path accordingly\n        require \"../../help_modal.php\";\n    }\n    ?>\n    <script>\n        var collectvalidation = <?php echo $collectthis; ?>;\n\n        $(function () {\n            var webRoot = <?php echo js_escape($GLOBALS['web_root']); ?>;\n            $(\"#reminders-div\").hide();\n            $(\"#recalls-div\").hide();\n            $(\"#sms-div\").hide();\n            $(\"#messages-li\").click(function(){\n                $(\"#messages-div\").show(250);\n                $(\"#reminders-div\").hide(250);\n                $(\"#recalls-div\").hide(250);\n                $(\"#sms-div\").hide(250);\n                $(\"#messages-li\").addClass(\"active\");\n                $(\"#reminders-li\").removeClass(\"active\");\n                $(\"#recalls-li\").removeClass(\"active\");\n                $(\"#sms-li\").removeClass(\"active\");\n\n            });\n            $(\"#reminders-li\").click(function(){\n                $(\"#messages-div\").hide(250);\n                $(\"#reminders-div\").show(250);\n                $(\"#recalls-div\").hide(250);\n                $(\"#sms-div\").hide(250);\n                $(\"#reminders-li\").addClass(\"active\");\n                $(\"#messages-li\").removeClass(\"active\");\n                $(\"#recalls-li\").removeClass(\"active\");\n                $(\"#sms-li\").removeClass(\"active\");\n            });\n            $(\"#recalls-li\").click(function(){\n                $(\"#messages-div\").hide(250);\n                $(\"#reminders-div\").hide(250);\n                $(\"#recalls-div\").show(250);\n                $(\"#sms-div\").hide(250);\n                $(\"#reminders-li\").removeClass(\"active\");\n                $(\"#messages-li\").removeClass(\"active\");\n                $(\"#recalls-li\").addClass(\"active\");\n                $(\"#sms-li\").removeClass(\"active\");\n            });\n            $(\"#sms-li\").click(function(){\n                $(\"#messages-div\").hide(250);\n                $(\"#reminders-div\").hide(250);\n                $(\"#recalls-div\").hide(250);\n                $(\"#sms-div\").show(250);\n                $(\"#reminders-li\").removeClass(\"active\");\n                $(\"#messages-li\").removeClass(\"active\");\n                $(\"#recalls-li\").removeClass(\"active\");\n                $(\"#sms-li\").addClass(\"active\");\n            });\n\n            $('.datetimepicker').datetimepicker({\n                <?php $datetimepicker_timepicker = true; ?>\n                <?php $datetimepicker_showseconds = false; ?>\n                <?php $datetimepicker_formatInput = true; ?>\n                <?php require($GLOBALS['srcdir'] . '/js/xl/jquery-datetimepicker-2-5-4.js.php'); ?>\n                ,minDate : 0 //only future\n            })\n\n            <?php if ($GLOBALS['phimail_enable']) : ?>\n            $('.trusted-messages-force-check').click(function() {\n                window.top.restoreSession();\n                request = new FormData;\n                request.append(\"ajax\", \"1\");\n                request.append(\"csrf_token_form\", <?php echo js_escape(CsrfUtils::collectCsrfToken()); ?>);\n                request.append(\"background_service\", \"phimail\");\n                request.append(\"background_force\", \"1\");\n                fetch(webRoot + \"/library/ajax/execute_background_services.php\", {\n                    method: 'POST',\n                    credentials: 'same-origin',\n                    body: request\n                }).then((response) => {\n                    if (response.status !== 200) {\n                        console.log('Background Service refresh failed. Status Code: ' + response.status);\n                    } else {\n                        // we've refreshed give them time to reload the page\n                        setTimeout(function() {\n                            window.location.reload();\n                        }, 500);\n                    }\n                }).catch(function(error) {\n                    console.log('Background Service refresh failed: ', error);\n                    alert(window.xl(\"Check new messages failed. Check the server logs for more information.\"));\n                });\n            });\n            <?php endif; ?>\n\n        });\n        $(function () {\n            $( \"ul.navbar-nav\" ).children().click(function(){\n                $(\".collapse\").collapse('hide');\n            });\n        });\n        $(function () {\n            $('#see-all-tooltip').attr({\"title\": <?php echo xlj('Click to show messages for all users'); ?>, \"data-toggle\":\"tooltip\", \"data-placement\":\"bottom\"}).tooltip();\n            $('#just-mine-tooltip').attr({\"title\": <?php echo xlj('Click to show messages for only the current user'); ?>, \"data-toggle\":\"tooltip\", \"data-placement\":\"bottom\"}).tooltip();\n        });\n        $(function () {\n            var f = $(\"#smsForm\");\n            $(\"#SMS_patient\").select2({\n                ajax: {\n                    url: \"save.php\",\n                    dataType: 'json',\n                    data: function(params) {\n                        return {\n                        go: \"sms_search\",\n                        term: params.term\n                        };\n                    },\n                    processResults: function(data) {\n                        return  {\n                            results: $.map(data, function(item, index) {\n                                return {\n                                    text: item.value,\n                                    id: index,\n                                    value: item.Label + ' ' + item.mobile,\n                                    pid: item.pid,\n                                    mobile: item.mobile,\n                                    allow: item.allow\n                                }\n                            })\n                        };\n                    },\n                    cache: true\n                }\n            })\n\n            $('#SMS_patient').on('select2:select', function (e) {\n                        e.preventDefault();\n                        $(\"#SMS_patient\").val(e.params.data.value);\n                        $(\"#sms_pid\").val(e.params.data.pid);\n                        $(\"#sms_mobile\").val(e.params.data.mobile);\n                        $(\"#sms_allow\").val(e.params.data.allow);\n            });\n        })\n\n        $(function () {\n\n            $(\"#newnote\").click(function (event) {\n                NewNote(event);\n            });\n\n            $(\"#printnote\").click(function () {\n                PrintNote();\n            });\n\n            var obj = $(\"#form_message_status\");\n            obj.onchange = function () {\n                SaveNote();\n            };\n\n            $(\"#cancel\").click(function () {\n                CancelNote();\n            });\n\n            $(\"#form_patient\").focus();\n\n            //clear button in messages\n            $(\"#clear_user\").click(function(){\n                $(\"#assigned_to_text\").val(\"<?php echo xls('Select Users From The Dropdown List'); ?>\");\n                $(\"#assigned_to\").val(\"\");\n                $(\"#users\").val(\"--\");\n            });\n\n            //clear inputs of patients\n            $(\"#clear_patients\").click(function(){\n                $(\"#reply_to\").val(\"\");\n                $(\"#form_patient\").val(\"\");\n            });\n        });\n\n        var NewNote = function (event) {\n            top.restoreSession();\n            if(document.getElementById(\"form_message_status\").value !== 'Done'){\n                collectvalidation.assigned_to = {\n                    presence: {message: \"<?php echo xls('Recipient required unless status is Done'); ?>\"}\n                }\n            }\n            else{\n                delete collectvalidation.assigned_to;\n            }\n\n            $('#newnote').attr('disabled', true);\n\n            var submit = submitme(1, event, 'new_note', collectvalidation);\n            if(!submit){\n                $('#newnote').attr('disabled', false);\n            }\n            else {\n                $(\"#new_note\").submit();\n            }\n        };\n        var PrintNote = function () {\n            <?php if ($noteid) { ?>\n            top.restoreSession();\n            window.open('../../patient_file/summary/pnotes_print.php?noteid=' + <?php echo js_url($noteid); ?>, '_blank', 'resizable=1,scrollbars=1,width=600,height=500');\n            <?php } ?>\n\n        };\n\n        var SaveNote = function () {\n            <?php if ($noteid) { ?>\n            top.restoreSession();\n            $(\"#task\").val(\"save\");\n            $(\"#new_note\").submit();\n            <?php } ?>\n        };\n\n        var CancelNote = function () {\n            top.restoreSession();\n            $(\"#task\").val(\"\");\n            $(\"#new_note\").submit();\n        };\n\n        // This is for callback by the find-patient popup.\n        function setpatient(pid, lname, fname, dob) {\n            var f = document.getElementById('new_note');\n            f.form_patient.value += lname + ', ' + fname + '; ';\n            f.reply_to.value += pid + ';';\n            <?php if ($noteid) { ?>\n            //used when direct messaging service inserts a pnote with indeterminate patient\n            //to allow the user to assign the message to a patient.\n            top.restoreSession();\n            $(\"#task\").val(\"savePatient\");\n            $(\"#new_note\").submit();\n            <?php } ?>\n        }\n\n        // This is for callback by the multi_patients_finder popup.\n        function setMultiPatients(patientsList) {\n            var f = document.getElementById('new_note');\n            f.form_patient.value='';\n            f.reply_to.value='';\n            $.each(patientsList, function (key, patient) {\n                f.form_patient.value += patient.lname + ', ' + patient.fname + '; ';\n                f.reply_to.value += patient.pid + ';';\n            })\n\n            <?php if ($noteid) { ?>\n            //used when direct messaging service inserts a pnote with indeterminate patient\n            //to allow the user to assign the message to a patient.\n            top.restoreSession();\n            $(\"#task\").val(\"savePatient\");\n            $(\"#new_note\").submit();\n            <?php } ?>\n        }\n\n        // This invokes the find-patient popup.\n        function sel_patient() {\n            dlgopen('../../main/calendar/find_patient_popup.php', '_blank', 625, 400);\n        }\n\n        function multi_sel_patient() {\n            $('#reply_to').trigger('click');\n            var url = '../../main/finder/multi_patients_finder.php'\n            // for edit selected list\n            if ($('#reply_to').val() !== '') {\n                url = url + '?patients=' + $('#reply_to').val() + '&csrf_token_form=<?php echo attr_url(CsrfUtils::collectCsrfToken()); ?>';\n            }\n            dlgopen(url, '_blank', 625, 400);\n        }\n\n        function addtolist(sel) {\n            $('#assigned_to').trigger(\"click\");\n            var itemtext = document.getElementById('assigned_to_text');\n            var item = document.getElementById('assigned_to');\n            if (sel.value !== '--') {\n                if (item.value) {\n                    if (item.value.indexOf(sel.value) === -1) {\n                        itemtext.value = itemtext.value + ' ; ' + sel.options[sel.selectedIndex].text;\n                        item.value = item.value + ';' + sel.value;\n                    }\n                } else {\n                    itemtext.value = sel.options[sel.selectedIndex].text;\n                    item.value = sel.value;\n                }\n            }\n        }\n\n        function SMS_direct() {\n            var pid = $(\"#sms_pid\").val();\n            var m = $(\"#sms_mobile\").val();\n            var allow = $(\"#sms_allow\").val();\n            if ((pid === '') || (m === '')) {\n                alert('<?php echo xls(\"MedEx needs a valid mobile number to send SMS messages...\"); ?>');\n            } else if (allow === 'NO') {\n                alert('<?php echo xls(\"This patient does not allow SMS messaging!\"); ?>');\n            } else {\n                top.restoreSession();\n                window.open('messages.php?nomenu=1&go=SMS_bot&pid=' + encodeURIComponent(pid) + '&m=' + encodeURIComponent(m), 'SMS_bot', 'width=370,height=600,resizable=0');\n            }\n        }\n    </script>\n    <?php\n}\n?>\n</body>\n</html>\n", "<?php\n\n/**\n * /interface/main/messages/save.php\n *\n * @package MedEx\n * @link    http://www.MedExBank.com\n * @author  MedEx <support@MedExBank.com>\n * @copyright Copyright (c) 2017 MedEx <support@MedExBank.com>\n * @license https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nrequire_once \"../../globals.php\";\nrequire_once \"$srcdir/lists.inc\";\nrequire_once \"$srcdir/forms.inc\";\nrequire_once \"$srcdir/patient.inc\";\nrequire_once \"$srcdir/MedEx/API.php\";\n\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Session\\SessionUtil;\n\n$MedEx = new MedExApi\\MedEx('MedExBank.com');\nif ($_REQUEST['go'] == 'sms_search') {\n    $param = \"%\" . $_GET['term'] . \"%\";\n    $query = \"SELECT * FROM patient_data WHERE fname LIKE ? OR lname LIKE ?\";\n    $result = sqlStatement($query, array($param, $param));\n    while ($frow = sqlFetchArray($result)) {\n        $data['Label']  = 'Name';\n        $data['value']  = text($frow['fname'] . \" \" . $frow['lname']);\n        $data['pid']    = text($frow['pid']);\n        $data['mobile'] = text($frow['phone_cell']);\n        $data['allow']  = text($frow['hipaa_allowsms']);\n        $sql = \"SELECT * FROM `medex_outgoing` where msg_pid=? ORDER BY `medex_outgoing`.`msg_uid` DESC LIMIT 1\";\n        $data['sql'] = $sql;\n        $result2 = sqlQuery($sql, array($frow['pid']));\n        $data['msg_last_updated'] = $result2['msg_date'];\n        $data['medex_uid'] = $result2['medex_uid'];\n        $results[] = $data;\n    }\n\n    echo json_encode($results);\n    exit;\n}\n//you need admin privileges to update this.\nif ($_REQUEST['go'] == 'Preferences') {\n    if (AclMain::aclCheckCore('admin', 'super')) {\n        $sql = \"UPDATE `medex_prefs` SET `ME_facilities`=?,`ME_providers`=?,`ME_hipaa_default_override`=?,\n\t\t\t`PHONE_country_code`=? ,`MSGS_default_yes`=?,\n\t\t\t`POSTCARDS_local`=?,`POSTCARDS_remote`=?,\n\t\t\t`LABELS_local`=?,`LABELS_choice`=?,\n\t\t\t`combine_time`=?, postcard_top=?\";\n\n        $facilities = implode(\"|\", $_REQUEST['facilities']);\n        $providers = implode(\"|\", $_REQUEST['providers']);\n        $HIPAA = ($_REQUEST['ME_hipaa_default_override'] ? $_REQUEST['ME_hipaa_default_override'] : '');\n        $MSGS = ($_REQUEST['MSGS_default_yes'] ? $_REQUEST['MSGS_default_yes'] : '');\n        $country_code = ($_REQUEST['PHONE_country_code'] ? $_REQUEST['PHONE_country_code'] : '1');\n\n        $myValues = array($facilities, $providers, $HIPAA, $country_code, $MSGS, $_REQUEST['POSTCARDS_local'], $_REQUEST['POSTCARDS_remote'], $_REQUEST['LABELS_local'], $_REQUEST['chart_label_type'], $_REQUEST['combine_time'], $_REQUEST['postcard_top']);\n\n        $_GLOBALS['chart_label_type'] = $_REQUEST['chart_label_type'];\n        sqlStatement('UPDATE `globals` SET gl_value = ? WHERE gl_name LIKE \"chart_label_type\" ', array($_REQUEST['chart_label_type']));\n\n        $query = \"UPDATE `background_services` SET `active`='1',`execute_interval`=?, `require_once`='/library/MedEx/MedEx_background.php' WHERE `name`='MedEx'\";\n        sqlQuery($query, array($_POST['execute_interval']));\n\n        $result['output'] = sqlQuery($sql, $myValues);\n        if ($result['output'] == false) {\n            $result['success'] = \"medex_prefs updated\";\n        }\n        $result = $MedEx->login('1');\n        echo json_encode($result);\n    }\n    exit;\n}\nif ($_REQUEST['MedEx'] == \"start\") {\n    if (AclMain::aclCheckCore('admin', 'super')) {\n        $query = \"SELECT * FROM users WHERE id = ?\";\n        $user_data = sqlQuery($query, array($_SESSION['authUserID']));\n        $query = \"SELECT * FROM facility WHERE primary_business_entity='1' LIMIT 1\";\n        $facility = sqlFetchArray(sqlStatement($query));\n\n        $data['firstname'] = $user_data['fname'];\n        $data['lastname'] = $user_data['lname'];\n        $data['username'] = $_SESSION['authUser'];\n        $data['password'] = $_REQUEST['new_password'];\n        $data['email'] = $_REQUEST['new_email'];\n        $data['telephone'] = $facility['phone'];\n        $data['fax'] = $facility['fax'];\n        $data['company'] = $facility['name'];\n        $data['address_1'] = $facility['street'];\n        $data['city'] = $facility['city'];\n        $data['state'] = $facility['state'];\n        $data['postcode'] = $facility['postal_code'];\n        $data['country'] = $facility['country_code'];\n        $data['sender_name'] = $user_data['fname'] . \" \" . $user_data['lname'];\n        $data['sender_email'] = $facility['email'];\n        $data['callerid'] = $facility['phone'];\n        $data['MedEx'] = \"1\";\n        $data['ipaddress'] = $_SERVER['REMOTE_ADDR'];\n\n        $prefix = 'http://';\n        if ($_SERVER[\"SSL_TLS_SNI\"]) {\n            $prefix = \"https://\";\n        }\n        $data['website_url'] = $prefix . $_SERVER['HTTP_HOST'] . $web_root;\n        $practice_logo = \"$OE_SITE_DIR/images/practice_logo.gif\";\n        if (!file_exists($practice_logo)) {\n            $data['logo_url'] = $prefix . $_SERVER['HTTP_HOST'] . $web_root . \"/sites/\" . $_SESSION[\"site_id\"] . \"/images/practice_logo.gif\";\n        } else {\n            $data['logo_url'] = $prefix . $_SERVER['HTTP_HOST'] . $GLOBALS['images_static_relative'] . \"/menu-logo.png\";\n        }\n        $response = $MedEx->setup->autoReg($data);\n        if (($response['API_key'] > '') && ($response['customer_id'] > '')) {\n            sqlQuery(\"DELETE FROM medex_prefs\");\n            $runQuery = \"SELECT * FROM facility ORDER BY name\";\n            $fetch = sqlStatement($runQuery);\n            while ($frow = sqlFetchArray($fetch)) {\n                $facilities[] = $frow['id'];\n            }\n            $runQuery = \"SELECT * FROM users WHERE username != '' AND active = '1' AND authorized = '1'\";\n            $prove = sqlStatement($runQuery);\n            while ($prow = sqlFetchArray($prove)) {\n                $providers[] = $prow['id'];\n            }\n            $facilities = implode(\"|\", $facilities);\n            $providers = implode(\"|\", $providers);\n            $sqlINSERT = \"INSERT INTO `medex_prefs` (\n\t\t\t\t\t\t\t\tMedEx_id,ME_api_key,ME_username,\n\t\t\t\t\t\t\t\tME_facilities,ME_providers,ME_hipaa_default_override,MSGS_default_yes,\n\t\t\t\t\t\t\t\tPHONE_country_code,LABELS_local,LABELS_choice)\n\t\t\t\t\t\t\tVALUES (?,?,?,?,?,?,?,?,?,?)\";\n            sqlStatement($sqlINSERT, array($response['customer_id'], $response['API_key'], $_POST['new_email'], $facilities, $providers, \"1\", \"1\", \"1\", \"1\", \"5160\"));\n            $query = \"UPDATE `background_services` SET `active`='1',`execute_interval`='5', `require_once`='/library/MedEx/MedEx_background.php' WHERE `name`='MedEx'\";\n            sqlQuery($query);\n            $info = $MedEx->login('2');\n\n            if ($info['token']) {\n                $info['show'] = xlt(\"Sign-up successful for\") . \" \" . $data['company'] . \".<br />\" . xlt(\"Proceeding to Preferences\") . \".<br />\" . xlt(\"If this page does not refresh, reload the Messages page manually\") . \".<br />\";\n                //get js to reroute user to preferences.\n                echo json_encode($info);\n            }\n        } else {\n            $response_prob = array();\n            $response_prob['show'] = xlt(\"We ran into some problems connecting your EHR to the MedEx servers\") . \".<br >\n\t\t\t\t\" . xlt('Most often this is due to a Username/Password mismatch') . \"<br />\"\n                . xlt('Run Setup again or contact support for assistance') .\n                \" <a href='https://medexbank.com/cart/upload/'>MedEx Bank</a>.<br />\";\n            echo json_encode($response_prob);\n            sqlQuery(\"UPDATE `background_services` SET `active`='0' WHERE `name`='MedEx'\");\n        }\n        //then redirect user to preferences with a success message!\n    } else {\n        echo xlt(\"Sorry you are not privileged enough. Enrollment is limited to Adminstrator accounts.\");\n    }\n    exit;\n}\n\nif (($_REQUEST['pid']) && ($_REQUEST['action'] == \"new_recall\")) {\n    $query = \"SELECT * FROM patient_data WHERE pid=?\";\n    $result = sqlQuery($query, array($_REQUEST['pid']));\n    $result['age'] = $MedEx->events->getAge($result['DOB']);\n    // uuid is binary and will break json_encode in binary form (not needed, so will remove it from $result array)\n    unset($result['uuid']);\n\n    /**\n     *  Did the clinician create a PLAN at the last visit?\n     *  To do an in office test, and get paid for it,\n     *  we must have an order (and a report of the findings).\n     *  If the practice is using the eye form then uncomment the 5 lines below.\n     *  It provides the PLAN and orders for next visit.\n     *  As forms mature, there should be a uniform way to find the PLAN?\n     *  And when that day comes we'll put it here...\n     *  The other option is to use Visit Categories here.  Maybe both?  Consensus?\n     */\n    $query = \"SELECT ORDER_DETAILS FROM form_eye_mag_orders WHERE pid=? AND ORDER_DATE_PLACED < NOW() ORDER BY ORDER_DATE_PLACED DESC LIMIT 1\";\n    $result2 = sqlQuery($query, array($_REQUEST['pid']));\n    if (!empty($result2)) {\n        $result['PLAN'] = $result2['ORDER_DETAILS'];\n    }\n\n    $query = \"SELECT * FROM openemr_postcalendar_events WHERE pc_pid =? ORDER BY pc_eventDate DESC LIMIT 1\";\n    $result2 = sqlQuery($query, array($_REQUEST['pid']));\n    if ($result2) { //if they were never actually scheduled this would be blank\n        $result['DOLV']     = oeFormatShortDate($result2['pc_eventDate']);\n        $result['provider'] = $result2['pc_aid'];\n        $result['facility'] = $result2['pc_facility'];\n    }\n    /**\n     * Is there an existing Recall in place already????\n     * If so we need to use that info...\n     */\n    $query = \"SELECT * from medex_recalls where r_pid=?\";\n    $result3 = sqlQuery($query, array($_REQUEST['pid']));\n    if ($result3) {\n        $result['recall_date']  = $result3['r_eventDate'];\n        $result['PLAN']         = $result3['r_reason'];\n        $result['facility']     = $result3['r_facility'];\n        $result['provider']     = $result3['r_provider'];\n    }\n    echo json_encode($result);\n    exit;\n}\n\nif (($_REQUEST['action'] == 'addRecall') || ($_REQUEST['add_new'])) {\n    $result = $MedEx->events->save_recall($_REQUEST);\n    echo json_encode('saved');\n    exit;\n}\n\nif (($_REQUEST['action'] == 'delete_Recall') && ($_REQUEST['pid'])) {\n    $MedEx->events->delete_recall();\n    echo json_encode('deleted');\n    exit;\n}\n\n// Clear the pidList session whenever this page is loaded.\n// $_SESSION['pidList'] will hold array of patient ids\n// which is then used to print 'postcards' and 'Address Labels'\n// Thanks Terry!\nSessionUtil::unsetSession('pidList');\n$pid_list = array();\n\nif ($_REQUEST['action'] == \"process\") {\n    $new_pid = json_decode($_POST['parameter'], true);\n    $new_pc_eid = json_decode($_POST['pc_eid'], true);\n\n    if (($_POST['item'] == \"phone\") || (($_POST['item'] == \"notes\") && ($_POST['msg_notes'] > ''))) {\n        $sql = \"INSERT INTO medex_outgoing (msg_pc_eid, msg_type, msg_reply, msg_extra_text) VALUES (?,?,?,?)\";\n        sqlQuery($sql, array('recall_' . $new_pid[0], $_POST['item'], $_SESSION['authUserID'], $_POST['msg_notes']));\n        return \"done\";\n    }\n    $pc_eidList = json_decode($_POST['pc_eid'], true);\n    $pidList = json_decode($_POST['parameter'], true);\n    $sessionSetArray['pc_eidList'] = $pc_eidList[0];\n    $sessionSetArray['pidList'] = $pidList;\n    SessionUtil::setSession($sessionSetArray);\n\n    if ($_POST['item'] == \"postcards\") {\n        foreach ($pidList as $pid) {\n            $sql = \"INSERT INTO medex_outgoing (msg_pc_eid, msg_type, msg_reply, msg_extra_text) VALUES (?,?,?,?)\";\n            sqlQuery($sql, array('recall_' . $pid, $_POST['item'], $_SESSION['authUserID'], 'Postcard printed locally'));\n        }\n    }\n    if ($_POST['item'] == \"labels\") {\n        foreach ($pidList as $pid) {\n            $sql = \"INSERT INTO medex_outgoing (msg_pc_eid, msg_type, msg_reply, msg_extra_text) VALUES (?,?,?,?) ON DUPLICATE KEY UPDATE msg_extra_text='Label repeat'\";\n            sqlQuery($sql, array('recall_' . $pid, $_POST['item'], $_SESSION['authUserID'], 'Label printed locally'));\n        }\n    }\n    echo json_encode($pidList);\n    exit;\n}\nif ($_REQUEST['go'] == \"Messages\") {\n    if ($_REQUEST['msg_id']) {\n        $result = updateMessage($_REQUEST['msg_id']);\n        echo json_encode($result);\n        exit;\n    }\n}\nexit;\n", "<?php\n\n/**\n *  Front Payment CC and Terminal Readers support.\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2021 Jerry Padgett <sjpadgett@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n$ignoreAuth = false;\nrequire_once(__DIR__ . \"/../globals.php\");\n\nuse OpenEMR\\Billing\\PaymentGateway;\nuse OpenEMR\\Common\\Crypto\\CryptoGen;\nuse Stripe\\Customer;\nuse Stripe\\PaymentIntent;\nuse Stripe\\Stripe;\nuse Stripe\\Terminal\\ConnectionToken;\nuse Stripe\\Terminal\\Location;\n\nif ($_POST['mode'] == 'AuthorizeNet') {\n    $form_pid = $_POST['form_pid'];\n    $pay = new PaymentGateway(\"AuthorizeNetApi_Api\");\n    $transaction['amount'] = $_POST['payment'];\n    $transaction['currency'] = \"USD\";\n    $transaction['opaqueDataDescriptor'] = $_POST['dataDescriptor'];\n    $transaction['opaqueDataValue'] = $_POST['dataValue'];\n    try {\n        $response = $pay->submitPaymentToken($transaction);\n        if (is_string($response)) {\n            echo $response;\n            exit();\n        }\n        $r = $response->getParsedData();\n        $cc = array();\n        $cc[\"cardHolderName\"] = $_POST[\"cardHolderName\"];\n        $cc['status'] = $response->isSuccessful() ? \"ok\" : \"failed\";\n        $cc['authCode'] = $r->transactionResponse->authCode;\n        $cc['transId'] = $r->transactionResponse->transId;\n        $cc['cardNumber'] = $r->transactionResponse->accountNumber;\n        $cc['cc_type'] = $r->transactionResponse->accountType;\n        $cc['zip'] = $_POST[\"zip\"];\n        $ccaudit = json_encode($cc);\n    } catch (\\Exception $ex) {\n        return $ex->getMessage();\n    }\n\n    if (!$response->isSuccessful()) {\n        echo $response->getMessage();\n        exit();\n    }\n\n    echo $ccaudit;\n    exit();\n}\n\nif ($_POST['mode'] == 'Stripe') {\n    $pd = sqlQuery(\"SELECT \" .\n        \"p.fname, p.mname, p.lname, p.pubpid, p.pid, i.copay \" .\n        \"FROM patient_data AS p \" .\n        \"LEFT OUTER JOIN insurance_data AS i ON \" .\n        \"i.pid = p.pid AND i.type = 'primary' \" .\n        \"WHERE p.pid = ? ORDER BY i.date DESC LIMIT 1\", array($pid));\n    $pay = new PaymentGateway(\"Stripe\");\n    $transaction['amount'] = $_POST['payment'];\n    $transaction['currency'] = \"USD\";\n    $transaction['token'] = $_POST['stripeToken'];\n    $transaction['description'] = $pd['lname'] . ' ' . $pd['fname'] . ' ' . $pd['mname'];\n    $transaction['metadata'] = [\n        'Patient' => $pd['lname'] . ' ' . $pd['fname'] . ' ' . $pd['mname'],\n        'MRN' => $pd['pubpid'],\n        'Invoice Items (date encounter)' => $_POST['encs'],\n        'Invoice Total' => $transaction['amount']\n    ];\n    try {\n        $response = $pay->submitPaymentToken($transaction);\n        if (is_string($response)) {\n            echo $response;\n            exit();\n        }\n        $r = $response->getSource();\n        $cc = array();\n        $cc[\"cardHolderName\"] = $_POST[\"cardHolderName\"];\n        $cc['status'] = $response->isSuccessful() ? \"ok\" : \"failed\";\n        $cc['authCode'] = $r['fingerprint'];\n        $cc['transId'] = $response->getTransactionReference();\n        $cc['cardNumber'] = \"******** \" . $r['last4'];\n        $cc['cc_type'] = $r['brand'];\n        $cc['zip'] = $r->address_zip;\n        $ccaudit = json_encode($cc);\n    } catch (\\Exception $ex) {\n        echo $ex->getMessage();\n    }\n\n    if (!$response->isSuccessful()) {\n        echo $response;\n        exit();\n    }\n\n    echo $ccaudit;\n    exit();\n}\n\nif ($_GET['mode'] == 'terminal_token') {\n    $cryptoGen = new CryptoGen();\n    $apiKey = $cryptoGen->decryptStandard($GLOBALS['gateway_api_key']);\n    Stripe::setApiKey($apiKey);\n\n    header('Content-Type: application/json');\n\n    try {\n        $connectionToken = ConnectionToken::create();\n        echo json_encode(array('secret' => $connectionToken->secret), JSON_THROW_ON_ERROR);\n    } catch (\\Exception $e) {\n        http_response_code(500);\n        echo json_encode(['error' => $e->getMessage()], JSON_THROW_ON_ERROR);\n    }\n}\nif ($_GET['mode'] == 'cancel_intent') {\n    $cryptoGen = new CryptoGen();\n    $apiKey = $cryptoGen->decryptStandard($GLOBALS['gateway_api_key']);\n    Stripe::setApiKey($apiKey);\n\n    header('Content-Type: application/json');\n\n    try {\n        $json_str = file_get_contents('php://input');\n        $json_obj = json_decode($json_str);\n\n        $intent = PaymentIntent::retrieve($json_obj->id);\n        $rtn = $intent->cancel();\n\n        echo json_encode(['status' => (string)$rtn->status]);\n    } catch (\\Exception $e) {\n        http_response_code(500);\n        echo json_encode(['error' => $e->getMessage()]);\n    }\n}\n\nif ($_GET['mode'] == 'terminal_capture') {\n    $cryptoGen = new CryptoGen();\n    $apiKey = $cryptoGen->decryptStandard($GLOBALS['gateway_api_key']);\n    Stripe::setApiKey($apiKey);\n\n    header('Content-Type: application/json');\n\n    try {\n        // retrieve JSON from POST body\n        $json_str = file_get_contents('php://input');\n        $json_obj = json_decode($json_str);\n\n        $intent = PaymentIntent::retrieve($json_obj->id);\n        $intent = $intent->capture();\n\n        echo json_encode($intent);\n    } catch (\\Exception $e) {\n        http_response_code(500);\n        echo json_encode(['error' => $e->getMessage()], JSON_THROW_ON_ERROR);\n    }\n}\n\nif ($_GET['mode'] == 'terminal_create') {\n    $cryptoGen = new CryptoGen();\n    $apiKey = $cryptoGen->decryptStandard($GLOBALS['gateway_api_key']);\n    Stripe::setApiKey($apiKey);\n\n    header('Content-Type: application/json');\n\n    try {\n        $json_str = file_get_contents('php://input');\n        $json_obj = json_decode($json_str);\n        $pd = sqlQuery(\"SELECT \" .\n            \"p.fname, p.mname, p.lname, p.pubpid,p.pid, p.email, i.copay \" .\n            \"FROM patient_data AS p \" .\n            \"LEFT OUTER JOIN insurance_data AS i ON \" .\n            \"i.pid = p.pid AND i.type = 'primary' \" .\n            \"WHERE p.pid = ? ORDER BY i.date DESC LIMIT 1\", array($pid));\n\n        $intent = PaymentIntent::create([\n            'amount' => $json_obj->amount,\n            'currency' => 'usd',\n            'payment_method_types' => ['card_present'],\n            'capture_method' => 'manual',\n            'description' => $pd['lname'] . ' ' . $pd['fname'] . ' ' . $pd['mname'],\n            'metadata' => [\n                'Patient' => $pd['lname'] . ' ' . $pd['fname'] . ' ' . $pd['mname'],\n                'MRN' => $pd['pubpid'],\n                'Invoice Items (date encounter)' => $json_obj->encs,\n                'Invoice Total' => number_format(($json_obj->amount / 100), 2, '.', '')\n                ]\n        ]);\n        echo json_encode(array('client_secret' => $intent->client_secret), JSON_THROW_ON_ERROR);\n    } catch (\\Exception $e) {\n        http_response_code(500);\n        echo json_encode(['error' => $e->getMessage()], JSON_THROW_ON_ERROR);\n    }\n}\n", "<?php\n\n// +-----------------------------------------------------------------------+\n// | Copyright (c) 2002-2003, Richard Heyes, Harald Radi                        |\n// | All rights reserved.                                                  |\n// |                                                                       |\n// | Redistribution and use in source and binary forms, with or without    |\n// | modification, are permitted provided that the following conditions    |\n// | are met:                                                              |\n// |                                                                       |\n// | o Redistributions of source code must retain the above copyright      |\n// |   notice, this list of conditions and the following disclaimer.       |\n// | o Redistributions in binary form must reproduce the above copyright   |\n// |   notice, this list of conditions and the following disclaimer in the |\n// |   documentation and/or other materials provided with the distribution.|\n// | o The names of the authors may not be used to endorse or promote      |\n// |   products derived from this software without specific prior written  |\n// |   permission.                                                         |\n// |                                                                       |\n// | THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS   |\n// | \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT     |\n// | LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR |\n// | A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  |\n// | OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, |\n// | SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT      |\n// | LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, |\n// | DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY |\n// | THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT   |\n// | (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE |\n// | OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  |\n// |                                                                       |\n// +-----------------------------------------------------------------------+\n// | Author: Richard Heyes <richard@phpguru.org>                           |\n// |         Harald Radi <harald.radi@nme.at>                              |\n// +-----------------------------------------------------------------------+\n//\n// $Id$\n\n/**\n* HTML_TreeMenu Class\n*\n* A simple couple of PHP classes and some not so simple\n* Jabbascript which produces a tree menu. In IE this menu\n* is dynamic, with branches being collapsable. In IE5+ the\n* status of the collapsed/open branches persists across page\n* refreshes.In any other browser the tree is static. Code is\n* based on work of Harald Radi.\n*\n* Usage.\n*\n* After installing the package, copy the example php script to\n* your servers document root. Also place the TreeMenu.js and the\n* images folder in the same place. Running the script should\n* then produce the tree.\n*\n* Thanks go to Chip Chapin (http://www.chipchapin.com) for many\n* excellent ideas and improvements.\n*\n* @author  Richard Heyes <richard@php.net>\n* @author  Harald Radi <harald.radi@nme.at>\n* @access  public\n* @package HTML_TreeMenu\n*/\n\nclass HTML_TreeMenu\n{\n    /**\n    * Indexed array of subnodes\n    * @var array\n    */\n    var $items;\n\n    /**\n    * Constructor\n    *\n    * @access public\n    */\n    function __construct()\n    {\n        // Not much to do here :(\n    }\n\n    /**\n    * This function adds an item to the the tree.\n    *\n    * @access public\n    * @param  object $node The node to add. This object should be\n    *                      a HTML_TreeNode object.\n    * @return object       Returns a reference to the new node inside\n    *                      the tree.\n    */\n    function &addItem(&$node)\n    {\n        $this->items[] = &$node;\n        return $this->items[count($this->items) - 1];\n    }\n\n    /**\n    * Import method for creating HTML_TreeMenu objects/structures\n    * out of existing tree objects/structures. Currently supported\n    * are Wolfram Kriesings' PEAR Tree class, and Richard Heyes' (me!)\n    * Tree class (available here: http://www.phpguru.org/). This\n    * method is intended to be used statically, eg:\n    * $treeMenu = &HTML_TreeMenu::createFromStructure($myTreeStructureObj);\n    *\n    * @param  array  $params   An array of parameters that determine\n    *                          how the import happens. This can consist of:\n    *                            structure   => The tree structure\n    *                            type        => The type of the structure, currently\n    *                                           can be either 'heyes' or 'kriesing'\n    *                            nodeOptions => Default options for each node\n    *\n    * @return object           The resulting HTML_TreeMenu object\n    */\n    function createFromStructure($params)\n    {\n        if (!isset($params['nodeOptions'])) {\n            $params['nodeOptions'] = array();\n        }\n\n        switch (@$params['type']) {\n\n            /**\n            * Wolfram Kriesings' PEAR Tree class\n            */\n            case 'kriesing':\n                $className = strtolower(get_class($params['structure']->dataSourceClass));\n                $isXMLStruct = strpos($className, '_xml') !== false ? true : false;\n\n                // Get the entire tree, the $nodes are sorted like in the tree view\n                // from top to bottom, so we can easily put them in the nodes\n                $nodes = $params['structure']->getNode();\n\n                // Make a new menu and fill it with the values from the tree\n                $treeMenu  = new HTML_TreeMenu();\n                $curNode[0] = &$treeMenu;   // we need the current node as the reference to the\n\n                foreach ($nodes as $aNode) {\n                    $events = array();\n                    $data = array();\n\n                    // In an XML, all the attributes are saved in an array, but since they might be\n                    // used as the parameters, we simply extract them here if we handle an XML-structure\n                    if ($isXMLStruct && sizeof($aNode['attributes'])) {\n                        foreach ($aNode['attributes'] as $key => $val) {\n                            if (!$aNode[$key]) { // dont overwrite existing values\n                                $aNode[$key] = $val;\n                            }\n                        }\n                    }\n\n                    // Process all the data that are saved in $aNode and put them in the data and/or events array\n                    foreach ($aNode as $key => $val) {\n                        if (!is_array($val)) {\n                            // Dont get the recursive data in here! they are always arrays\n                            if (substr($key, 0, 2) == 'on') {  // get the events\n                                $events[$key] = $val;\n                            }\n\n                            // I put it in data too, so in case an options starts with 'on' its also passed to the node ... not too cool i know\n                            $data[$key] = $val;\n                        }\n                    }\n\n                    // Normally the text is in 'name' in the Tree class, so we check both but 'text' is used if found\n                    $data['text'] = $aNode['text'] ? $aNode['text'] : $aNode['name'];\n\n                    // Add the item to the proper node\n                    $thisNode = &$curNode[$aNode['level']]->addItem(new HTML_TreeNode($data, $events));\n                    $curNode[$aNode['level'] + 1] = &$thisNode;\n                }\n                break;\n\n            /**\n            * Richard Heyes' (me!) second (array based) Tree class\n            */\n            case 'heyes_array':\n                // Need to create a HTML_TreeMenu object ?\n                if (!isset($params['treeMenu'])) {\n                    $treeMenu = new HTML_TreeMenu();\n                    $parentID = 0;\n                } else {\n                    $treeMenu = &$params['treeMenu'];\n                    $parentID = $params['parentID'];\n                }\n\n                // Loop thru the trees nodes\n                foreach ($params['structure']->getChildren($parentID) as $nodeID) {\n                    $data = $params['structure']->getData($nodeID);\n                    $parentNode = &$treeMenu->addItem(new HTML_TreeNode(array_merge($params['nodeOptions'], $data)));\n\n                    // Recurse ?\n                    if ($params['structure']->hasChildren($nodeID)) {\n                        $recurseParams['type']        = 'heyes_array';\n                        $recurseParams['parentID']    = $nodeID;\n                        $recurseParams['nodeOptions'] = $params['nodeOptions'];\n                        $recurseParams['structure']   = &$params['structure'];\n                        $recurseParams['treeMenu']    = &$parentNode;\n                        HTML_TreeMenu::createFromStructure($recurseParams);\n                    }\n                }\n                break;\n\n            /**\n            * Richard Heyes' (me!) original OO based Tree class\n            */\n            case 'heyes':\n            default:\n                // Need to create a HTML_TreeMenu object ?\n                if (!isset($params['treeMenu'])) {\n                    $treeMenu = new HTML_TreeMenu();\n                } else {\n                    $treeMenu = &$params['treeMenu'];\n                }\n\n                // Loop thru the trees nodes\n                foreach ($params['structure']->nodes->nodes as $node) {\n                    $tag = $node->getTag();\n                    $parentNode = &$treeMenu->addItem(new HTML_TreeNode(array_merge($params['nodeOptions'], $tag)));\n\n                    // Recurse ?\n                    if (!empty($node->nodes->nodes)) {\n                        $recurseParams['structure']   = $node;\n                        $recurseParams['nodeOptions'] = $params['nodeOptions'];\n                        $recurseParams['treeMenu']    = &$parentNode;\n                        HTML_TreeMenu::createFromStructure($recurseParams);\n                    }\n                }\n                break;\n        }\n\n        return $treeMenu;\n    }\n\n    /**\n    * Creates a treeMenu from XML. The structure of your XML should be\n    * like so:\n    *\n    * <treemenu>\n    *     <node text=\"First node\" icon=\"folder.gif\" expandedIcon=\"folder-expanded.gif\" />\n    *     <node text=\"Second node\" icon=\"folder.gif\" expandedIcon=\"folder-expanded.gif\">\n    *         <node text=\"Sub node\" icon=\"folder.gif\" expandedIcon=\"folder-expanded.gif\" />\n    *     </node>\n    *     <node text=\"Third node\" icon=\"folder.gif\" expandedIcon=\"folder-expanded.gif\">\n    * </treemenu>\n    *\n    * Any of the options you can supply to the HTML_TreeNode constructor can be supplied as\n    * attributes to the <node> tag. If there are no subnodes for a particular node, you can\n    * use the XML shortcut <node ... /> instead of <node ... ></node>. The $xml argument can\n    * be either the XML as a string, or an pre-created XML_Tree object. Also, this method\n    * REQUIRES my own Tree class to work (http://phpguru.org/tree.html). If this has not\n    * been include()ed or require()ed this method will die().\n    *\n    * @param  mixed  $xml  This can be either a string containing the XML, or an XML_Tree object\n    *                      (the PEAR::XML_Tree package).\n    * @return object       The HTML_TreeMenu object\n    */\n    function createFromXML($xml)\n    {\n        if (!class_exists('Tree')) {\n            die('Could not find Tree class');\n        }\n\n        // Supplied $xml is a string\n        if (is_string($xml)) {\n            require_once('XML/Tree.php');\n            $xmlTree = new XML_Tree();\n            $xmlTree->getTreeFromString($xml);\n\n        // Supplied $xml is an XML_Tree object\n        } else {\n            $xmlTree = $xml;\n        }\n\n        // Now process the XML_Tree object, setting the XML attributes\n        // to be the tag data (with out the XML tag name or contents).\n        $treeStructure = Tree::createFromXMLTree($xmlTree, true);\n        $treeStructure->nodes->traverse(create_function('&$node', '$tagData = $node->getTag(); $node->setTag($tagData[\"attributes\"]);'));\n\n\n        return HTML_TreeMenu::createFromStructure(array('structure' => $treeStructure));\n    }\n} // HTML_TreeMenu\n\n\n/**\n* HTML_TreeNode class\n*\n* This class is supplementary to the above and provides a way to\n* add nodes to the tree. A node can have other nodes added to it.\n*\n* @author  Richard Heyes <richard@php.net>\n* @author  Harald Radi <harald.radi@nme.at>\n* @access  public\n* @package HTML_TreeMenu\n*/\nclass HTML_TreeNode\n{\n    /**\n    * The text for this node.\n    * @var string\n    */\n    var $text;\n\n    /**\n    * The link for this node.\n    * @var string\n    */\n    var $link;\n\n    /**\n    * The icon for this node.\n    * @var string\n    */\n    var $icon;\n\n    /**\n    * The icon to show when expanded for this node.\n    * @var string\n    */\n    var $expandedIcon;\n\n    /**\n    * The css class for this node\n    * @var string\n    */\n    var $cssClass;\n\n    /**\n    * The link target for this node\n    * @var string\n    */\n    var $linkTarget;\n\n    /**\n    * Indexed array of subnodes\n    * @var array\n    */\n    var $items;\n\n    /**\n    * Whether this node is expanded or not\n    * @var bool\n    */\n    var $expanded;\n\n    /**\n    * Whether this node is dynamic or not\n    * @var bool\n    */\n    var $isDynamic;\n\n    /**\n    * Should this node be made visible?\n    * @var bool\n    */\n    var $ensureVisible;\n\n    /**\n    * The parent node. Null if top level\n    * @var object\n    */\n    var $parent;\n\n    /**\n    * Unique ID of this node\n    * @var int\n    */\n    //commented out because it was causing Documents page to not show\n   //because of this redeclaration of $parent.  I do not know what the\n  // author's intention was in using this name twice or if it was a mistake\n    //var $parent;\n\n    /**\n    * Javascript event handlers;\n    * @var array\n    */\n    var $events;\n\n    var $id;\n\n    /**\n    * Constructor\n    *\n    * @access public\n    * @param  array $options An array of options which you can pass to change\n    *                        the way this node looks/acts. This can consist of:\n    *                         o text          The title of the node, defaults to blank\n    *                         o link          The link for the node, defaults to blank\n    *                         o icon          The icon for the node, defaults to blank\n    *                         o expandedIcon  The icon to show when the node is expanded\n    *                         o cssClass      The CSS class for this node, defaults to blank\n    *                         o expanded      The default expanded status of this node, defaults to false\n    *                                         This doesn't affect non dynamic presentation types\n    *                         o linkTarget    Target for the links. Defaults to linkTarget of the\n    *                                         HTML_TreeMenu_Presentation.\n    *                         o isDynamic     If this node is dynamic or not. Only affects\n    *                                         certain presentation types.\n    *                         o ensureVisible If true this node will be made visible despite the expanded\n    *                                         settings, and client side persistence. Will not affect\n    *                                         some presentation styles, such as Listbox. Default is false\n    * @param  array $events An array of javascript events and the corresponding event handlers.\n    *                       Additionally to the standard javascript events you can specify handlers\n    *                       for the 'onexpand', 'oncollapse' and 'ontoggle' events which will be fired\n    *                       whenever a node is collapsed and/or expanded.\n    */\n    function __construct($options = array(), $events = array())\n    {\n        $this->text          = '';\n        $this->link          = '';\n        $this->icon          = '';\n        $this->expandedIcon  = '';\n        $this->cssClass      = '';\n        $this->expanded      = false;\n        $this->isDynamic     = true;\n        $this->ensureVisible = false;\n        $this->linkTarget    = null;\n        $this->id            = null;\n\n        $this->parent        = null;\n        $this->events        = $events;\n\n        foreach ($options as $option => $value) {\n            $this->$option = $value;\n        }\n    }\n\n    /**\n    * Allows setting of various parameters after the initial\n    * constructor call. Possible options you can set are:\n    *  o text\n    *  o link\n    *  o icon\n    *  o cssClass\n    *  o expanded\n    *  o isDynamic\n    *  o ensureVisible\n    * ie The same options as in the constructor\n    *\n    * @access public\n    * @param  string $option Option to set\n    * @param  string $value  Value to set the option to\n    */\n    function setOption($option, $value)\n    {\n        $this->$option = $value;\n    }\n\n    /**\n    * Adds a new subnode to this node.\n    *\n    * @access public\n    * @param  object $node The new node\n    */\n    function &addItem(&$node)\n    {\n        $node->parent  = &$this;\n        $this->items[] = &$node;\n\n        /**\n        * If the subnode has ensureVisible set it needs\n        * to be handled, and all parents set accordingly.\n        */\n        if ($node->ensureVisible) {\n            $this->_ensureVisible();\n        }\n\n        return $this->items[count($this->items) - 1];\n    }\n\n    /**\n    * Private function to handle ensureVisible stuff\n    *\n    * @access private\n    */\n    function _ensureVisible()\n    {\n        $this->ensureVisible = true;\n        $this->expanded      = true;\n\n        if (!is_null($this->parent)) {\n            $this->parent->_ensureVisible();\n        }\n    }\n} // HTML_TreeNode\n\n\n/**\n* HTML_TreeMenu_Presentation class\n*\n* Base class for other presentation classes to\n* inherit from.\n*/\nclass HTML_TreeMenu_Presentation\n{\n    /**\n    * The TreeMenu structure\n    * @var object\n    */\n    var $menu;\n\n    /**\n    * Base constructor simply sets the menu object\n    *\n    * @param object $structure The menu structure\n    */\n    function __construct(&$structure)\n    {\n        $this->menu = &$structure;\n    }\n\n    /**\n    * Prints the HTML generated by the toHTML() method.\n    * toHTML() must therefore be defined by the derived\n    * class.\n    *\n    * @access public\n    * @param  array  Options to set. Any options taken by\n    *                the presentation class can be specified\n    *                here.\n    */\n    function printMenu($options = array())\n    {\n        foreach ($options as $option => $value) {\n            $this->$option = $value;\n        }\n\n        echo $this->toHTML();\n    }\n}\n\n\n/**\n* HTML_TreeMenu_DHTML class\n*\n* This class is a presentation class for the tree structure\n* created using the TreeMenu/TreeNode. It presents the\n* traditional tree, static for browsers that can't handle\n* the DHTML.\n*/\nclass HTML_TreeMenu_DHTML extends HTML_TreeMenu_Presentation\n{\n    /**\n    * Dynamic status of the treemenu. If true (default) this has no effect. If\n    * false it will override all dynamic status vars and set the menu to be\n    * fully expanded an non-dynamic.\n    */\n    var $isDynamic;\n\n    /**\n    * Path to the images\n    * @var string\n    */\n    var $images;\n\n    /**\n    * Target for the links generated\n    * @var string\n    */\n    var $linkTarget;\n\n    /**\n    * Whether to use clientside persistence or not\n    * @var bool\n    */\n    var $userPersistence;\n\n    /**\n    * The default CSS class for the nodes\n    */\n    var $defaultClass;\n\n    /**\n    * Whether to skip first level branch images\n    * @var bool\n    */\n    var $noTopLevelImages;\n\n    var $maxDepth;\n    var $usePersistence;\n\n    /**\n    * Constructor, takes the tree structure as\n    * an argument and an array of options which\n    * can consist of:\n    *  o images            -  The path to the images folder. Defaults to \"images\"\n    *  o linkTarget        -  The target for the link. Defaults to \"_self\"\n    *  o defaultClass      -  The default CSS class to apply to a node. Default is none.\n    *  o usePersistence    -  Whether to use clientside persistence. This persistence\n    *                         is achieved using cookies. Default is true.\n    *  o noTopLevelImages  -  Whether to skip displaying the first level of images if\n    *                         there is multiple top level branches.\n    *  o maxDepth          -  The maximum depth of indentation. Useful for ensuring\n    *                         deeply nested trees don't go way off to the right of your\n    *                         page etc. Defaults to no limit.\n    *\n    * And also a boolean for whether the entire tree is dynamic or not.\n    * This overrides any perNode dynamic settings.\n    *\n    * @param object $structure The menu structure\n    * @param array  $options   Array of options\n    * @param bool   $isDynamic Whether the tree is dynamic or not\n    */\n    function __construct(&$structure, $options = array(), $isDynamic = true)\n    {\n        parent::__construct($structure);\n        $this->isDynamic = $isDynamic;\n\n        // Defaults\n        $this->images           = 'public/images';\n        $this->maxDepth         = 0;        // No limit\n        $this->linkTarget       = '_self';\n        $this->defaultClass     = '';\n        $this->usePersistence   = true;\n        $this->noTopLevelImages = false;\n\n        foreach ($options as $option => $value) {\n            $this->$option = $value;\n        }\n    }\n\n    /**\n    * Returns the HTML for the menu. This method can be\n    * used instead of printMenu() to use the menu system\n    * with a template system.\n    *\n    * @access public\n    * @return string The HTML for the menu\n    */\n    function toHTML()\n    {\n        static $count = 0;\n        $menuObj     = 'objTreeMenu_' . ++$count;\n\n        $html  = \"\\n\";\n        $html .= '<script>' . \"\\n\\t\";\n        $html .= sprintf(\n            '%s = new TreeMenu(\"%s\", \"%s\", \"%s\", \"%s\", %s, %s);',\n            $menuObj,\n            $this->images,\n            $menuObj,\n            $this->linkTarget,\n            $this->defaultClass,\n            $this->usePersistence ? 'true' : 'false',\n            $this->noTopLevelImages ? 'true' : 'false'\n        );\n\n        $html .= \"\\n\";\n\n        /**\n        * Loop through subnodes\n        */\n        if (isset($this->menu->items)) {\n            for ($i = 0; $i < count($this->menu->items); $i++) {\n                $html .= $this->_nodeToHTML($this->menu->items[$i], $menuObj);\n            }\n        }\n\n        $html .= sprintf(\"\\n\\t%s.drawMenu();\", $menuObj);\n        $html .= sprintf(\"\\n\\t%s.writeOutput();\", $menuObj);\n\n        if ($this->usePersistence && $this->isDynamic) {\n            $html .= sprintf(\"\\n\\t%s.resetBranches();\", $menuObj);\n        }\n\n        $html .= \"\\n</script>\";\n\n        return $html;\n    }\n\n    /**\n    * Prints a node of the menu\n    *\n    * @access private\n    */\n    function _nodeToHTML($nodeObj, $prefix, $return = 'newNode', $currentDepth = 0, $maxDepthPrefix = null)\n    {\n        $prefix = empty($maxDepthPrefix) ? $prefix : $maxDepthPrefix;\n\n        $expanded  = $this->isDynamic ? ($nodeObj->expanded  ? 'true' : 'false') : 'true';\n        $isDynamic = $this->isDynamic ? ($nodeObj->isDynamic ? 'true' : 'false') : 'false';\n        $html = sprintf(\n            \"\\t %s = %s.addItem(new TreeNode('%s', %s, %s, %s, %s, '%s', '%s', %s));\\n\",\n            $return,\n            $prefix,\n            attr($nodeObj->text),\n            !empty($nodeObj->icon) ? \"'\" . $nodeObj->icon . \"'\" : 'null',\n            !empty($nodeObj->link) ? \"'\" . attr($nodeObj->link) . \"'\" : 'null',\n            $expanded,\n            $isDynamic,\n            $nodeObj->cssClass,\n            $nodeObj->linkTarget,\n            !empty($nodeObj->expandedIcon) ? \"'\" . $nodeObj->expandedIcon . \"'\" : 'null'\n        );\n\n        foreach ($nodeObj->events as $event => $handler) {\n            $html .= sprintf(\n                \"\\t %s.setEvent('%s', '%s');\\n\",\n                $return,\n                $event,\n                str_replace(array(\"\\r\", \"\\n\", \"'\"), array('\\r', '\\n', \"\\'\"), $handler)\n            );\n        }\n\n        if ($this->maxDepth > 0 and $currentDepth == $this->maxDepth) {\n            $maxDepthPrefix = $prefix;\n        }\n\n        /**\n        * Loop through subnodes\n        */\n        if (!empty($nodeObj->items)) {\n            for ($i = 0; $i < count($nodeObj->items); $i++) {\n                $html .= $this->_nodeToHTML($nodeObj->items[$i], $return, $return . '_' . ($i + 1), $currentDepth + 1, $maxDepthPrefix);\n            }\n        }\n\n        return $html;\n    }\n} // End class HTML_TreeMenu_DHTML\n\n\n/**\n* HTML_TreeMenu_Listbox class\n*\n* This class presents the menu as a listbox\n*/\nclass HTML_TreeMenu_Listbox extends HTML_TreeMenu_Presentation\n{\n    /**\n    * The text that is displayed in the first option\n    * @var string\n    */\n    var $promoText;\n\n    /**\n    * The character used for indentation\n    * @var string\n    */\n    var $indentChar;\n\n    /**\n    * How many of the indent chars to use\n    * per indentation level\n    * @var integer\n    */\n    var $indentNum;\n\n    /**\n    * Target for the links generated\n    * @var string\n    */\n    var $linkTarget;\n\n    var $submitText;\n\n    /**\n    * Constructor\n    *\n    * @param object $structure The menu structure\n    * @param array  $options   Options whic affect the display of the listbox.\n    *                          These can consist of:\n    *                           o promoText  The text that appears at the the top of the listbox\n    *                                        Defaults to \"Select...\"\n    *                           o indentChar The character to use for indenting the nodes\n    *                                        Defaults to \"&nbsp;\"\n    *                           o indentNum  How many of the indentChars to use per indentation level\n    *                                        Defaults to 2\n    *                           o linkTarget Target for the links. Defaults to \"_self\"\n    *                           o submitText Text for the submit button. Defaults to \"Go\"\n    */\n    function __construct($structure, $options = array())\n    {\n        parent::__construct($structure);\n\n        $this->promoText  = null;\n        $this->indentChar = '&nbsp;';\n        $this->indentNum  = 2;\n        $this->linkTarget = '_self';\n        $this->submitText = 'Go';\n\n        foreach ($options as $option => $value) {\n            $this->$option = $value;\n        }\n    }\n\n    /**\n    * Returns the HTML generated\n    */\n    function toHTML()\n    {\n        static $count = 0;\n        $nodeHTML = '';\n\n        /**\n        * Loop through subnodes\n        */\n        if (isset($this->menu->items)) {\n            for ($i = 0; $i < count($this->menu->items); $i++) {\n                $nodeHTML .= $this->_nodeToHTML($this->menu->items[$i]);\n            }\n        }\n\n        if ($this->promoText) {\n            return sprintf('<option value=\"\">%s</option>%s', text($this->promoText ?? ''), $nodeHTML);\n        } else {\n            return $nodeHTML;\n        }\n    }\n\n    /**\n    * Returns HTML for a single node\n    *\n    * @access private\n    */\n    function _nodeToHTML($node, $prefix = '')\n    {\n        $html = sprintf('<option value=\"%s\">%s%s</option>', attr($node->id), $prefix, text($node->text));\n\n        /**\n        * Loop through subnodes\n        */\n        if (isset($node->items)) {\n            for ($i = 0; $i < count($node->items); $i++) {\n                $html .= $this->_nodeToHTML($node->items[$i], $prefix . str_repeat($this->indentChar, $this->indentNum));\n            }\n        }\n\n        return $html;\n    }\n} // End class HTML_TreeMenu_Listbox\n"], "fixing_code": ["<?php\n\n/**\n * Message and Reminder Center UI\n *\n * @Package OpenEMR\n * @link http://www.open-emr.org\n * @author OpenEMR Support LLC\n * @author Roberto Vasquez <robertogagliotta@gmail.com>\n * @author Rod Roark <rod@sunsetsystems.com>\n * @author Brady Miller <brady.g.miller@gmail.com>\n * @author Ray Magauran <magauran@medfetch.com>\n * @author Tyler Wrenn <tyler@tylerwrenn.com>\n * @copyright Copyright (c) 2010 OpenEMR Support LLC\n * @copyright Copyright (c) 2017 MedEXBank.com\n * @copyright Copyright (c) 2018-2019 Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2020 Tyler Wrenn <tyler@tylerwrenn.com>\n * @license https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nrequire_once(\"../../globals.php\");\nrequire_once(\"$srcdir/pnotes.inc\");\nrequire_once(\"$srcdir/patient.inc\");\nrequire_once(\"$srcdir/options.inc.php\");\nrequire_once(\"$srcdir/gprelations.inc.php\");\nrequire_once \"$srcdir/user.inc\";\nrequire_once(\"$srcdir/MedEx/API.php\");\n\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Csrf\\CsrfUtils;\nuse OpenEMR\\Common\\Logging\\EventAuditLogger;\nuse OpenEMR\\Core\\Header;\nuse OpenEMR\\OeUI\\OemrUI;\n\n//Gets validation rules from Page Validation list.\n$collectthis = collectValidationPageRules(\"/interface/main/messages/messages.php\");\nif (empty($collectthis)) {\n    $collectthis = \"{}\";\n} else {\n    $collectthis = json_sanitize($collectthis[array_keys($collectthis)[0]][\"rules\"]);\n}\n\n$MedEx = new MedExApi\\MedEx('MedExBank.com');\n\nif ($GLOBALS['medex_enable'] == '1') {\n    if ($_REQUEST['SMS_bot']) {\n        $result = $MedEx->login('');\n        $MedEx->display->SMS_bot($result);\n        exit();\n    }\n    $logged_in = $MedEx->login();\n} else {\n    $logged_in = null;\n}\n\n$setting_bootstrap_submenu = prevSetting('', 'setting_bootstrap_submenu', 'setting_bootstrap_submenu', ' ');\n//use $uspfx as the first variable for page/script specific user settings instead of '' (which is like a global but you have to request it).\n$uspfx = substr(__FILE__, strlen($webserver_root)) . '.';\n$rcb_selectors = prevSetting($uspfx, 'rcb_selectors', 'rcb_selectors', 'block');\n$rcb_facility = prevSetting($uspfx, 'form_facility', 'form_facility', '');\n$rcb_provider = prevSetting($uspfx, 'form_provider', 'form_provider', $_SESSION['authUserID']);\n\nif (\n    (array_key_exists('setting_bootstrap_submenu', $_POST)) ||\n    (array_key_exists('rcb_selectors', $_POST))\n) {\n    // These are not form elements. We only ever change them via ajax, so exit now.\n    exit();\n}\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <?php\n    //validation library\n    $use_validate_js = 1;\n    require_once($GLOBALS['srcdir'] . \"/validation/validation_script.js.php\");\n    ?>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"description\" content=\"MedEx Bank\" />\n    <meta name=\"author\" content=\"OpenEMR: MedExBank\" />\n    <?php Header::setupHeader(['datetime-picker', 'opener', 'moment', 'select2']); ?>\n    <link rel=\"stylesheet\" href=\"<?php echo $webroot; ?>/interface/main/messages/css/reminder_style.css?v=<?php echo $v_js_includes; ?>\">\n\n    <script>\n        var xljs1 = '<?php echo xla('Preferences updated successfully'); ?>';\n        var format_date_moment_js = '<?php echo attr(DateFormatRead(\"validateJS\")); ?>';\n        <?php require_once \"$srcdir/restoreSession.php\"; ?>\n    </script>\n\n    <script src=\"<?php echo $GLOBALS['web_root']; ?>/interface/main/messages/js/reminder_appts.js?v=<?php echo $v_js_includes; ?>\"></script>\n    <style>\n        @media only screen and (max-width: 768px) {\n            [class*=\"col-\"] {\n                width: 100%;\n                text-align: left !important;\n            }\n\n            .icon-bar {\n                background-color: var(--danger);\n            }\n        }\n    </style>\n\n<?php\nif (($GLOBALS['medex_enable'] == '1') && (empty($_REQUEST['nomenu'])) && ($GLOBALS['disable_rcb'] != '1')) {\n    $MedEx->display->navigation($logged_in);\n    echo \"<br /><br /><br />\";\n}\n\nif (!empty($_REQUEST['go'])) { ?>\n    <?php\n    if (($_REQUEST['go'] == \"setup\") && (!$logged_in)) {\n        echo \"<title>\" . xlt('MedEx Setup') . \"</title>\";\n        $stage = $_REQUEST['stage'];\n        if (!is_numeric($stage)) {\n            echo \"<br /><span class='title'>\" . text($stage) . \" \" . xlt('Warning') . \": \" . xlt('This is not a valid request') . \".</span>\";\n        } else {\n            $MedEx->setup->MedExBank($stage);\n        }\n    } elseif ($_REQUEST['go'] == \"addRecall\") {\n        echo \"<title>\" . xlt('New Recall') . \"</title>\";\n        $MedEx->display->display_add_recall();\n    } elseif ($_REQUEST['go'] == 'Recalls') {\n        echo \"<title>\" . xlt('Recall Board') . \"</title>\";\n        $MedEx->display->display_recalls($logged_in);\n    } elseif ((($_REQUEST['go'] == \"setup\") || ($_REQUEST['go'] == 'Preferences')) && ($logged_in)) {\n        echo \"<title>MedEx: \" . xlt('Preferences') . \"</title>\";\n        $MedEx->display->preferences();\n    } elseif ($_REQUEST['go'] == 'icons') {\n        echo \"<title>MedEx: \" . xlt('Icons') . \"&#x24B8;</title>\";\n        $MedEx->display->icon_template();\n    } elseif ($_REQUEST['go'] == 'SMS_bot') {\n        echo \"<title>MedEx: SMS Bot&#x24B8;</title>\";\n        $MedEx->display->SMS_bot($logged_in);\n        exit;\n    } else {\n        echo \"<title>\" . xlt('MedEx Setup') . \"</title>\";\n        echo xlt('Warning: Navigation error. Please refresh this page.');\n    }\n} else {\n    //original message.php stuff\n\n    if ($GLOBALS['enable_help'] == 1) {\n        $help_icon = '<a class=\"float-right oe-help-redirect\" data-target=\"#myModal\" data-toggle=\"modal\" href=\"#\" id=\"help-href\" name=\"help-href\" style=\"color: var(--gray)\" title=\"' . xla(\"Click to view Help\") . '\"><i class=\"fa fa-question-circle\" aria-hidden=\"true\"></i></a>';\n    } elseif ($GLOBALS['enable_help'] == 2) {\n        $help_icon = '<a class=\"float-right oe-help-redirect\" data-target=\"#myModal\" data-toggle=\"modal\" href=\"#\" id=\"help-href\" name=\"help-href\" style=\"color: var(--gray300) !important\" title=\"' . xla(\"To enable help - Go to  Administration > Globals > Features > Enable Help Modal\") . '\"><i class=\"fa fa-question-circle\" aria-hidden=\"true\"></i></a>';\n    } elseif ($GLOBALS['enable_help'] == 0) {\n         $help_icon = '';\n    }\n    $heading_caption = xlt('Messages') . ', ' . xlt('Reminders');\n    if ($GLOBALS['disable_rcb'] != '1') {\n        $heading_caption .= ', ' . xlt('Recalls');\n    }\n\n    $arrOeUiSettings = array(\n        'heading_title' => $heading_caption,\n        'include_patient_name' => false,// use only in appropriate pages\n        'expandable' => false,\n        'expandable_files' => array(\"\"),//all file names need suffix _xpd\n        'action' => \"\",//conceal, reveal, search, reset, link or back\n        'action_title' => \"\",\n        'action_href' => \"\",//only for actions - reset, link or back\n        'show_help_icon' => true,\n        'help_file_name' => \"message_center_help.php\"\n    );\n    $oemr_ui = new OemrUI($arrOeUiSettings);\n\n    echo \"<title>\" .  xlt('Message Center') . \"</title>\";\n    ?>\n</head>\n<body class='body_top'>\n    <div id=\"container_div\" class=\"<?php echo attr($oemr_ui->oeContainer()); ?>\">\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"clearfix\">\n                    <?php echo  $oemr_ui->pageHeading() . \"\\r\\n\"; ?>\n                </div>\n            </div>\n        </div>\n        <div class=\"container-fluid mb-3\">\n            <ul class=\"nav nav-pills\">\n                <li class=\"nav-item\" id='li-mess'>\n                    <a href='#' class=\"active nav-link font-weight-bold\" id='messages-li'><?php echo xlt('Messages'); ?></a>\n                </li>\n                <li class=\"nav-item\" id='li-remi'>\n                    <a href='#' id='reminders-li' class=\"nav-link font-weight-bold\"><?php echo xlt('Reminders'); ?></a>\n                </li>\n                <?php if ($GLOBALS['disable_rcb'] != '1') { ?>\n                <li class=\"nav-item\" id='li-reca'>\n                    <a href='#' id='recalls-li' class=\"nav-link font-weight-bold\"><?php echo xlt('Recalls'); ?></a>\n                </li>\n                <?php }?>\n                <?php if ($logged_in) { ?>\n                <li class=\"nav-item\" id='li-sms'>\n                    <a href='#' id='sms-li' class=\"nav-link font-weight-bold\"><?php echo xlt('SMS Zone'); ?></a>\n                </li>\n                <?php }?>\n            </ul>\n        </div>\n        <div class=\"row\" id=\"messages-div\">\n            <div class=\"col-sm-12\">\n                <div class=\"jumbotron jumbotron-fluid py-3\">\n                    <div class=\"col-sm-12 col-md-12 col-lg-12\">\n                        <?php\n                        // Check to see if the user has Admin rights, and if so, allow access to See All.\n                        $showall = isset($_GET['show_all']) ? $_GET['show_all'] : \"\";\n                        if ($showall == \"yes\") {\n                            $show_all = $showall;\n                        } else {\n                            $show_all = \"no\";\n                        }\n                        // Collect active variable and applicable html code for links\n                        $form_active = (isset($_REQUEST['form_active']) ? $_REQUEST['form_active'] : false);\n                        $form_inactive = (isset($_REQUEST['form_inactive']) ? $_REQUEST['form_inactive'] : false);\n                        if ($form_active) {\n                            $active = '1';\n                            $activity_string_html = 'form_active=1';\n                        } elseif ($form_inactive) {\n                            $active = '0';\n                            $activity_string_html = 'form_inactive=1';\n                        } else {\n                            $active = 'all';\n                            $activity_string_html = '';\n                        }\n                        //collect the task setting\n                        $task = isset($_REQUEST['task']) ? $_REQUEST['task'] : \"\";\n                        if (AclMain::aclCheckCore('admin', 'super')) {\n                            if ($show_all == 'yes') {\n                                $showall = \"yes\";\n                                $lnkvar = \"messages.php?show_all=no&\" . $activity_string_html;\n                                $lnkattributes = \"name='Just Mine' onclick='top.restoreSession()'\";\n                                $otherstuff = \"<i id='just-mine-tooltip' class='fa fa-user fa-lg text-body' aria-hidden='true'></i>\";\n                                $messages = xl('All Messages');\n                            } else {\n                                $showall = \"no\";\n                                $lnkvar = \"messages.php?show_all=yes&\" . $activity_string_html;\n                                $lnkattributes = \"name='See All' onclick='top.restoreSession()'\";\n                                $otherstuff = \"<i id='see-all-tooltip' class='fa fa-users fa-lg text-body' aria-hidden='true'></i>\";\n                                $messages = xl('My Messages');\n                            }\n                        } else {\n                            $messages = xlt('My Messages');\n                        }\n                        ?>\n                        <div class=\"oe-margin-b-20\">\n                            <span class=\"title\"><?php echo text($messages); ?></span>\n                            <a class='more' href=\"<?php echo $lnkvar ?? ''; ?>\" <?php echo $lnkattributes ?? ''; ?>><?php echo $otherstuff ?? ''; ?></a>\n                        </div>\n                        <div class=\"oe-margin-b-10\">\n                            <?php\n                            //show the activity links\n                            if (empty($task) || $task == \"add\" || $task == \"delete\") { ?>\n                                    <?php if ($active == \"all\") { ?>\n                                <span class=\"font-weight-bold\"><?php echo xlt('All Messages'); ?></span>\n                                    <?php } else { ?>\n                                <a href=\"messages.php\" class=\"link btn btn-secondary\" onclick=\"top.restoreSession()\"><?php echo xlt('Show All'); ?></a>\n                                    <?php } ?>\n                                    |\n                                    <?php if ($active == '1') { ?>\n                                <span class=\"font-weight-bold\"><?php echo xlt('Active Messages'); ?></span>\n                                    <?php } else { ?>\n                                <a href=\"messages.php?form_active=1\" class=\"link btn btn-secondary\" onclick=\"top.restoreSession()\"><?php echo xlt('Show Active'); ?></a>\n                                    <?php } ?>\n                                    |\n                                    <?php if ($active == '0') { ?>\n                                <span class=\"font-weight-bold\"><?php echo xlt('Inactive Messages'); ?></span>\n                                    <?php } else { ?>\n                                <a href=\"messages.php?form_inactive=1\" class=\"link btn btn-secondary\" onclick=\"top.restoreSession()\"><?php echo xlt('Show Inactive'); ?></a>\n                                    <?php } ?>\n                            <?php } ?>\n                        </div>\n                        <?php\n                        $note = '';\n                        $noteid = '';\n                        $title = '';\n                        $form_message_status = '';\n                        $reply_to = '';\n                        $patientname = '';\n                        switch ($task) {\n                            case \"add\":\n                                // Add a new message for a specific patient; the message is documented in Patient Notes.\n                                // Add a new message; it's treated as a new note in Patient Notes.\n                                $note = $_POST['note'];\n                                $noteid = $_POST['noteid'];\n                                $form_note_type = $_POST['form_note_type'];\n                                $form_message_status = $_POST['form_message_status'];\n                                $reply_to = explode(';', rtrim($_POST['reply_to'], ';'));\n                                $assigned_to_list = explode(';', $_POST['assigned_to']);\n                                $datetime = isset($_POST['form_datetime']) ? DateTimeToYYYYMMDDHHMMSS($_POST['form_datetime']) : '';\n                                foreach ($assigned_to_list as $assigned_to) {\n                                    if ($noteid && $assigned_to != '-patient-') {\n                                        updatePnote($noteid, $note, $form_note_type, $assigned_to, $form_message_status, $datetime);\n                                        $noteid = '';\n                                    } else {\n                                        if ($noteid && $assigned_to == '-patient-') {\n                                            // When $assigned_to == '-patient-' we don't update the current note, but\n                                            // instead create a new one with the current note's body prepended and\n                                            // attributed to the patient.  This seems to be all for the patient portal.\n                                            $row = getPnoteById($noteid);\n                                            if (!$row) {\n                                                die(\"getPnoteById() did not find id '\" . text($noteid) . \"'\");\n                                            }\n                                            $pres = sqlQuery(\"SELECT lname, fname \" .\n                                                \"FROM patient_data WHERE pid = ?\", array($reply_to[0]));\n                                            $patientname = $pres['lname'] . \", \" . $pres['fname'];\n                                            $note .= \"\\n\\n$patientname on \" . $row['date'] . \" wrote:\\n\\n\";\n                                            $note .= $row['body'];\n                                        }\n                                        // There's no note ID, and/or it's assigned to the patient.\n                                        // In these cases a new note is created.\n                                        foreach ($reply_to as $patient) {\n                                            addPnote($patient, $note, $userauthorized, '1', $form_note_type, $assigned_to, $datetime, $form_message_status);\n                                        }\n                                    }\n                                }\n                                break;\n                            case \"savePatient\":\n                            case \"save\":\n                                // Update alert.\n                                $noteid = $_POST['noteid'];\n                                $form_message_status = $_POST['form_message_status'];\n                                $reply_to = $_POST['reply_to'];\n                                if ($task == \"save\") {\n                                    updatePnoteMessageStatus($noteid, $form_message_status);\n                                } else {\n                                    updatePnotePatient($noteid, $reply_to);\n                                }\n                                $task = \"edit\";\n                                $note = $_POST['note'];\n                                $title = $_POST['form_note_type'];\n                                $reply_to = $_POST['reply_to'];\n                                break;\n                            case \"edit\":\n                                if ($noteid == \"\") {\n                                    $noteid = $_GET['noteid'];\n                                }\n                                // Update the message if it already exists; it's appended to an existing note in Patient Notes.\n                                $result = getPnoteById($noteid);\n                                if ($result) {\n                                    if ($title == \"\") {\n                                        $title = $result['title'];\n                                    }\n                                    $body = $result['body'];\n                                    // if our reply-to is 0 it breaks multi patient select and other functionality\n                                    // this most likely didn't break before due to php implicit type conversion of 0 to \"\"\n                                    if ($reply_to == \"\" && $result['pid'] != 0) {\n                                        $reply_to = $result['pid'];\n                                    }\n                                    $form_message_status = $result['message_status'];\n                                    $datetime = $result['date'];\n                                }\n                                break;\n                            case \"delete\":\n                                // Delete selected message(s) from the Messages box (only).\n                                $delete_id = $_POST['delete_id'];\n                                for ($i = 0; $i < count($delete_id); $i++) {\n                                    deletePnote($delete_id[$i]);\n                                    EventAuditLogger::instance()->newEvent(\"delete\", $_SESSION['authUser'], $_SESSION['authProvider'], 1, \"pnotes: id \" . $delete_id[$i]);\n                                }\n                                break;\n                        }\n                        // This is for sorting the records.\n                        $sort = array(\"users.lname\", \"patient_data.lname\", \"pnotes.title\", \"pnotes.date\", \"pnotes.message_status\");\n                        $sortby = (isset($_REQUEST['sortby']) && ($_REQUEST['sortby'] != \"\")) ? $_REQUEST['sortby'] : $sort[3];\n                        $sortorder = (isset($_REQUEST['sortorder']) && ($_REQUEST['sortorder'] != \"\")) ? $_REQUEST['sortorder'] : \"desc\";\n                        $begin = isset($_REQUEST['begin']) ? $_REQUEST['begin'] : 0;\n\n                        if ($task == \"addnew\" or $task == \"edit\") {\n                            // Display the Messages page layout.\n                            echo \"<form name='form_patient' id='new_note'\n                                    class='form-horizontal'\n                                    action=\\\"messages.php?showall=\" . attr_url($showall) . \"&sortby=\" . attr_url($sortby) . \"&sortorder=\" . attr_url($sortorder) . \"&begin=\" . attr_url($begin) . \"&$activity_string_html\\\"\n                                    method='post'>\n                                    <input type='hidden' name='noteid' id='noteid' value='\" . attr($noteid) . \"' />\n                                    <input type='hidden' name='task' id='task' value='add' />\";\n                            if ($task == \"addnew\") {\n                                $message_legend = xl('Create New Message');\n                                $onclick = \"onclick=multi_sel_patient()\";\n                            } elseif ($task == \"edit\") {\n                                $message_legend = xl('Add To Existing Message');\n                                $onclick = \"\";\n                            }\n\n                            ?>\n                            <div class='col-md-12'>\n                                <div class=\"jumbotron jumbotron-fluid py-3\">\n                                    <h4><?php echo text($message_legend); ?></h4>\n                                    <div class=\"row\">\n                                        <div class=\"col-12 oe-custom-line\">\n                                            <div class=\"row\">\n                                                <div class=\"col-6 col-md-3\">\n                                                    <label for=\"form_note_type\"><?php echo xlt('Type'); ?>:</label>\n                                                    <?php\n                                                    if ($title == \"\") {\n                                                        $title = \"Unassigned\";\n                                                    }\n                                                    // Added 6/2009 by BM to incorporate the patient notes into the list_options listings.\n                                                    generate_form_field(array('data_type' => 1, 'field_id' => 'note_type', 'list_id' => 'note_type', 'empty_title' => 'SKIP', 'order_by' => 'title', 'class' => 'form-control'), $title);\n                                                    ?>\n                                                </div>\n                                                <div class=\"col-6 col-md-3\">\n                                                    <label for=\"form_message_status\"><?php echo xlt('Status'); ?>:</label>\n                                                    <?php\n                                                    if ($form_message_status == \"\") {\n                                                        $form_message_status = 'New';\n                                                    }\n                                                    generate_form_field(array('data_type' => 1, 'field_id' => 'message_status', 'list_id' => 'message_status', 'empty_title' => 'SKIP', 'order_by' => 'title', 'class' => 'form-control'), $form_message_status); ?>\n                                                </div>\n                                                <div class=\"col-6 col-md-4\">\n                                                    <?php\n                                                    if ($task != \"addnew\" && $result['pid'] != 0) { ?>\n                                                        <a class=\"patLink\" onclick=\"goPid('<?php echo attr(addslashes($result['pid'])); ?>')\" title='<?php echo xla('Click me to Open Patient Dashboard') ?>'><?php echo xlt('Patient'); ?>:</a><label for=\"form_patient\">&nbsp</label>\n                                                        <?php\n                                                    } else { ?>\n                                                        <span class='font-weight-bold <?php echo($task == \"addnew\" ? \"text-danger\" : \"\") ?>'><?php echo xlt('Patient'); ?>:</span></a><label for=\"form_patient\"></label>\n                                                        <?php\n                                                    }\n\n                                                    if ($reply_to) {\n                                                        $prow = sqlQuery(\"SELECT lname, fname,pid, pubpid, DOB  \" .\n                                                            \"FROM patient_data WHERE pid = ?\", array($reply_to));\n                                                        $patientname = $prow['lname'] . \", \" . $prow['fname'];\n                                                    }\n                                                    if ($task == \"addnew\" || $result['pid'] == 0) {\n                                                        $cursor = \"oe-cursor-add\";\n                                                        $background = \"oe-patient-background\";\n                                                    } elseif ($task == \"edit\") {\n                                                        $cursor = \"oe-cursor-stop\";\n                                                        $background = '';\n                                                    }\n                                                    ?>\n                                                    <input type='text' id='form_patient' name='form_patient' class='form-control <?php echo $cursor . \" \" . $background;?>' onclick=\"multi_sel_patient()\" placeholder='<?php echo xla(\"Click to add patient\"); ?>' value='<?php echo attr($patientname); ?>' readonly />\n                                                    <input type='hidden' class=\"form-control\" name='reply_to' id='reply_to' value='<?php echo attr($reply_to); ?>'/>\n                                                </div>\n                                                <div class=\"col-6 col-md-2 d-flex flex-wrap\">\n                                                    <?php\n                                                    if ($task == \"addnew\" || $result['pid'] == 0) {\n                                                        echo \"<label class='oe-empty-label' for='clear_patients'></label>\";\n                                                        echo '<button type=\"button\" id=\"clear_patients\"  class=\"btn btn-secondary btn-undo float-left flip\" value=\"' . xla('Clear') . '\">' . xlt(\"Clear\") . '</button>';\n                                                    } ?>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div class=\"row\">\n                                        <div class=\"col-12 oe-custom-line\">\n                                            <div class=\"row\">\n                                                <?php if ($GLOBALS['messages_due_date']) { ?>\n                                                <div class=\"col-6 col-sm-2\">\n                                                    <label for=\"form_note_type\"><?php echo xlt('Due date'); ?>:</label>\n                                                    <?php generate_form_field(array('data_type' => 4, 'field_id' => 'datetime', 'edit_options' => 'F'), empty($datetime) ? date('Y-m-d H:i') : $datetime) ?>\n                                                </div>\n                                                <?php } ?>\n                                                <div class=\"col-6 col-sm-4 d-flex align-items-end flex-wrap\">\n                                                    <label for=\"assigned_to_text\"><?php echo xlt('To{{Destination}}'); ?>:</label>\n                                                    <input type='text' name='assigned_to_text' class='form-control oe-cursor-stop' id='assigned_to_text' readonly='readonly' value='' placeholder='<?php echo xla(\"SELECT Users FROM The Dropdown LIST\"); ?>' />\n                                                    <input type='hidden' name='assigned_to' id='assigned_to' />\n                                                </div>\n                                                <div class=\"col-6 col-sm-4\">\n                                                    <label class=\"oe-empty-label\" for=\"users\"></label>\n                                                    <select name='users' id='users' class='form-control' onchange='addtolist(this);'>\n                                                        <?php\n                                                        echo \"<option value='--'\";\n                                                        echo \">\" . xlt('Select User');\n                                                        echo \"</option>\\n\";\n                                                        $ures = sqlStatement(\"SELECT username, fname, lname FROM users \" .\n                                                            \"WHERE username != '' AND active = 1 AND \" .\n                                                            \"( info IS NULL OR info NOT LIKE '%Inactive%' ) \" .\n                                                            \"ORDER BY lname, fname\");\n                                                        while ($urow = sqlFetchArray($ures)) {\n                                                            echo \"    <option value='\" . attr($urow['username']) . \"'\";\n                                                            echo \">\" . text($urow['lname']);\n                                                            if ($urow['fname']) {\n                                                                echo \", \" . text($urow['fname']);\n                                                            }\n                                                            echo \"</option>\\n\";\n                                                        }\n                                                        ?>\n                                                    </select>\n                                                </div>\n                                                <div class=\"col-6 col-sm-2  d-flex align-items-end flex-wrap\">\n                                                    <label class=\"oe-empty-label\" for=\"users\"></label>\n                                                    <button type=\"button\" name=\"clear_user\" id=\"clear_user\" class=\"btn btn-secondary btn-undo float-left flip\" value=\"<?php echo xla('Clear'); ?>\"><?php echo xlt('Clear'); ?></button>\n                                                </div>\n                                            </div>\n                                        <div class='col-12 oe-margin-t-3'>\n                                        <?php\n                                        if ($noteid) {\n                                            include \"templates/linked_documents.php\";\n\n                                            // Get the related procedure order IDs if any.\n                                            $tmp = sqlStatement(\n                                                \"SELECT id1 FROM gprelations WHERE \" .\n                                                \"type1 = ? AND type2 = ? AND id2 = ?\",\n                                                array('2', '6', $noteid)\n                                            );\n                                            if (sqlNumRows($tmp)) {\n                                                echo \" <tr>\\n\";\n                                                echo \"  <td class='text'><span class='font-weight-bold'>\" . xlt('Linked procedure order') . \":</span>\\n\";\n                                                while ($gprow = sqlFetchArray($tmp)) {\n                                                    echo \"   <a href='\";\n                                                    echo $GLOBALS['webroot'] . \"/interface/orders/single_order_results.php?orderid=\";\n                                                    echo attr_url($gprow['id1']);\n                                                    echo \"' target='_blank' onclick='top.restoreSession()'>\";\n                                                    echo text($gprow['id1']);\n                                                    echo \"</a>\\n\";\n                                                }\n                                                echo \"  </td>\\n\";\n                                                echo \" </tr>\\n\";\n                                            }\n                                        }\n                                        ?>\n                                    </div>\n                                    </div>\n                                    <!-- <div class=\"row\"> -->\n                                        <div class='col-12'>\n                                            <?php\n\n                                            if ($noteid) {\n                                                $body = preg_replace('/(:\\d{2}\\s\\()' . $result['pid'] . '(\\sto\\s)/', '${1}' . $patientname . '${2}', $body);\n                                                $body = preg_replace('/(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}\\s\\([^)(]+\\s)(to)(\\s[^)(]+\\))/', '${1}' . xl('to{{Destination}}') . '${3}', $body);\n                                                $body = pnoteConvertLinks(nl2br(text(oeFormatPatientNote($body))));\n                                                echo \"<div style='height: 120px; resize: vertical;' class='border overflow-auto text oe-margin-t-3 p-2 mb-2 w-100'>\" . $body . \"</div>\";\n                                            }\n\n                                            ?>\n                                            <textarea name='note' id='note' class='form-control oe-margin-t-3 p-1' rows=\"5\"><?php echo nl2br(text($note)); ?></textarea>\n                                        </div>\n                                        <div class=\"col-12 position-override oe-margin-t-10\">\n                                            <?php if ($noteid) { ?>\n                                                <!-- This is for displaying an existing note. -->\n                                                <button type=\"button\" class=\"btn btn-primary btn-send-msg\" id=\"newnote\" value=\"<?php echo xla('Send message'); ?>\"><?php echo xlt('Send message'); ?></button>\n                                                <button type=\"button\" class=\"btn btn-primary btn-print\" id=\"printnote\" value=\"<?php echo xla('Print message'); ?>\"><?php echo xlt('Print message'); ?></button>\n                                                <button type=\"button\" class=\"btn btn-secondary btn-cancel\" id=\"cancel\" value=\"<?php echo xla('Cancel'); ?>\"><?php echo xlt('Cancel'); ?></button>\n                                            <?php } else { ?>\n                                                <!-- This is for displaying a new note. -->\n                                                <button type=\"button\" class=\"btn btn-primary btn-send-msg\" id=\"newnote\" value=\"<?php echo xla('Send message'); ?>\"><?php echo xlt('Send message'); ?></button>\n                                                <button type=\"button\" class=\"btn btn-cancel btn-secondary\" id=\"cancel\" value=\"<?php echo xla('Cancel'); ?>\"><?php echo xlt('Cancel'); ?></button>\n                                            <?php }\n                                            ?>\n                                        </div>\n                                    <!-- </div> -->\n                                </div>\n                                </div>\n                            </form>\n                            <?php\n                        } else {\n                            for ($i = 0; $i < count($sort); $i++) {\n                                $sortlink[$i] = \"<a  class='arrowhead' href=\\\"messages.php?show_all=\" . attr($showall) . \"&sortby=\" . attr($sort[$i]) . \"&sortorder=asc&$activity_string_html\\\" onclick=\\\"top.restoreSession()\\\" alt=\\\"\" . xla('Sort Up') . \"\\\"><i class='fa fa-sort-down fa-lg' aria-hidden='true'></i></a>\";\n                            }\n                            for ($i = 0; $i < count($sort); $i++) {\n                                if ($sortby == $sort[$i]) {\n                                    switch ($sortorder) {\n                                        case \"asc\":\n                                            $sortlink[$i] = \"<a class='arrowhead' href=\\\"messages.php?show_all=\" . attr($showall) . \"&sortby=\" . attr($sortby) . \"&sortorder=desc&$activity_string_html\\\" onclick=\\\"top.restoreSession()\\\" alt=\\\"\" . xla('Sort Up') . \"\\\"><i class='fa fa-sort-up fa-lg' aria-hidden='true'></i></a>\";\n                                            break;\n                                        case \"desc\":\n                                            $sortlink[$i] = \"<a class='arrowhead' href=\\\"messages.php?show_all=\" . attr($showall) . \"&sortby=\" . attr($sortby) . \"&sortorder=asc&$activity_string_html\\\" onclick=\\\"top.restoreSession()\\\"  alt=\\\"\" . xla('Sort Down') . \"\\\"><i class='fa fa-sort-down fa-lg' aria-hidden='true'></i></a>\";\n                                            break;\n                                    } break;\n                                }\n                            }\n                            // Manage page numbering and display beneath the Messages table.\n                            $listnumber = 25;\n                            $total = getPnotesByUser($active, $show_all, $_SESSION['authUser'], true);\n                            if ($begin == \"\" or $begin == 0) {\n                                $begin = 0;\n                            }\n                            $prev = $begin - $listnumber;\n                            $next = $begin + $listnumber;\n                            $start = $begin + 1;\n                            $end = $listnumber + $start - 1;\n\n                            $chevron_icon_left = $_SESSION['language_direction'] == 'ltr' ? 'fa-chevron-circle-left' : 'fa-chevron-circle-right';\n                            $chevron_icon_right = $_SESSION['language_direction'] == 'ltr' ? 'fa-chevron-circle-right' : 'fa-chevron-circle-left';\n\n                            if ($end >= $total) {\n                                $end = $total;\n                            }\n                            if ($end < $start) {\n                                $start = 0;\n                            }\n                            if ($prev >= 0) {\n                                $prevlink = \"<a href=\\\"messages.php?show_all=\" . attr($showall) . \"&sortby=\" . attr($sortby) . \"&sortorder=\" . attr($sortorder) . \"&begin=\" . attr($prev) . \"&$activity_string_html\\\" onclick=\\\"top.restoreSession()\\\"><i class=\\\"fa \" . $chevron_icon_left . \" chevron_color\\\" aria-hidden=\\\"true\\\"></i></a>\";\n                            } else {\n                                $prevlink = \"<i class=\\\"fa \" . $chevron_icon_left . \" text-muted\\\" aria-hidden=\\\"true\\\" title=\\\"\" . xla(\"On first page\") . \"\\\"></i>\";\n                            }\n\n                            if ($next < $total) {\n                                $nextlink = \"<a href=\\\"messages.php?show_all=\" . attr($showall) . \"&sortby=\" . attr($sortby) . \"&sortorder=\" . attr($sortorder) . \"&begin=\" . attr($next) . \"&$activity_string_html\\\" onclick=\\\"top.restoreSession()\\\"><i class=\\\"fa . $chevron_icon_right . chevron_color\\\" aria-hidden=\\\"true\\\"></i></a>\";\n                            } else {\n                                $nextlink = \"<i class=\\\"fa \" . $chevron_icon_right . \" text-muted\\\" aria-hidden=\\\"true\\\" title=\\\"\" . xla(\"On first page\") . \"\\\"></i>\";\n                            }\n                            // Display the Messages table header.\n                            echo \"\n                                <table class=\\\"w-100\\\">\n                                    <tr>\n                                        <td>\n                                            <form name='MessageList' id='MessageList' action=\\\"messages.php?showall=\" . attr($showall) . \"&sortby=\" . attr($sortby) . \"&sortorder=\" . attr($sortorder) . \"&begin=\" . attr($begin) . \"&$activity_string_html\\\" method='post'>\n                                                <table class='table table-sm table-hover w-100'>\n                                                    <input type='hidden' name='task' value='delete' />\n                                                    <thead class='table-primary'>\n                                                      <tr height='24'>\n                                                          <th align='center' width='25'><input type='checkbox' id='checkAll' onclick='selectAll()'></th>\n                                                          <th width='20%' class='font-weight-bold'>&nbsp;\" . xlt('From') . \" $sortlink[0]</th>\n                                                          <th width='20%' class='font-weight-bold'>&nbsp;\" . xlt('Patient') . \" $sortlink[1]</th>\n                                                          <th class='font-weight-bold'>&nbsp;\" . xlt('Type') . \" $sortlink[2]</th>\n                                                          <th width='15%' class='font-weight-bold'>&nbsp;\" . xlt($GLOBALS['messages_due_date'] ? 'Due date' : 'Date') . \" $sortlink[3]</th>\n                                                          <th width='15%' class='font-weight-bold'>&nbsp;\" . xlt('Status') . \" $sortlink[4]</th>\n                                                      </tr>\n                                                    </thead>\";\n                            // Display the Messages table body.\n                            $count = 0;\n                            $result = getPnotesByUser($active, $show_all, $_SESSION['authUser'], false, $sortby, $sortorder, $begin, $listnumber);\n                            while ($myrow = sqlFetchArray($result)) {\n                                $name = $myrow['user'];\n                                $name = $myrow['users_lname'];\n                                if ($myrow['users_fname']) {\n                                    $name .= \", \" . $myrow['users_fname'];\n                                }\n                                $patient = $myrow['pid'];\n                                if ($patient > 0) {\n                                    $patient = $myrow['patient_data_lname'];\n                                    if ($myrow['patient_data_fname']) {\n                                        $patient .= \", \" . $myrow['patient_data_fname'];\n                                    }\n                                } else {\n                                    $patient = \"* \" . xl('Patient must be set manually') . \" *\";\n                                }\n                                $count++;\n                                echo \"\n                                    <tr id=\\\"row\" . attr($count) . \"\\\" height='24'>\n                                        <td align='center'>\n                                            <input type='checkbox' id=\\\"check\" . attr($count) . \"\\\" name=\\\"delete_id[]\\\" value=\\\"\" .\n                                            attr($myrow['id']) . \"\\\" onclick=\\\"if(this.checked==true){ selectRow('row\" . attr(addslashes($count)) . \"'); }else{ deselectRow('row\" . attr(addslashes($count)) . \"'); }\\\"></td>\n                                        <td>\n                                            <div>\" . text($name) . \"</div>\n                                        </td>\n                                        <td>\n                                            <div><a href=\\\"messages.php?showall=\" . attr_url($showall) . \"&sortby=\" . attr_url($sortby) . \"&sortorder=\" . attr_url($sortorder) . \"&begin=\" . attr_url($begin) . \"&task=edit&noteid=\" .\n                                            attr_url($myrow['id']) . \"&$activity_string_html\\\" onclick=\\\"top.restoreSession()\\\">\" .\n                                            text($patient) . \"</a></div>\n                                        </td>\n                                        <td>\n                                            <div>\" .\n                                                xlt($myrow['title']) . \"</div>\n                                        <td>\n                                            <div>\" . text(oeFormatDateTime($myrow['date'])) . \"</div>\n                                        </td>\n                                        <td>\n                                            <div>\" . text(getListItemTitle('message_status', $myrow['message_status'])) . \"</div>\n                                        </td>\n                                    </tr>\";\n                            }\n                            // Display the Messages table footer.\n\n                            echo \"  </table>\n                                            </form>\n                                            <div class='row oe-margin-t-10'>\n\n                                                <div class=\\\"col-12 col-md-12 col-lg-12\\\"><a href=\\\"messages.php?showall=\" . attr_url($showall) . \"&sortby=\" . attr_url($sortby) . \"&sortorder=\" . attr_url($sortorder) . \"&begin=\" . attr_url($begin) . \"&task=addnew&$activity_string_html\\\" class=\\\"btn btn-primary btn-add\\\" onclick=\\\"top.restoreSession()\\\">\" .\n                                                xlt('Add New{{Message}}') . \"</a> &nbsp; <a href=\\\"javascript:confirmDeleteSelected()\\\" class=\\\"btn btn-danger btn-delete\\\" onclick=\\\"top.restoreSession()\\\">\" .\n                                                xlt('Delete') . \"</a>\";\n\n                            if ($GLOBALS['phimail_enable']) {\n                                echo \"&nbsp; <a href='trusted-messages.php' onclick='top.restoreSession()' class='btn btn-secondary btn-mail'>\" . xlt(\"Compose Trusted Direct Message\") . \"</a>\";\n                                echo \"&nbsp; <button class='btn btn-secondary btn-refresh trusted-messages-force-check'>\" . xlt(\"Check New Trusted Messages\") . \"</button>\";\n                            }\n                            echo \"\n                                                <div  class=\\\"text-right\\\">$prevlink &nbsp; \" . text($end) . \" \" . xlt('of') . \" \" . text($total) . \" &nbsp; $nextlink</div>\n                                                </div>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                </table>\n                                <br />\";\n                            ?>\n\n                            <script>\n                                // This is to confirm delete action.\n                                function confirmDeleteSelected() {\n                                        var int_checked = 0;\n                                        var elem = document.forms.namedItem(\"MessageList\").getElementsByTagName(\"input\");\n\n                                        for (i=0; i < elem.length; i++){\n                                            if(elem[i].checked == true){\n                                                int_checked = ++int_checked;\n                                            }\n                                        }\n                                        if (int_checked > 0){\n                                            if (confirm(\"<?php echo xls('Do you really want to delete the selection?'); ?>\")) {\n                                                document.MessageList.submit();\n                                            }\n                                        } else {\n                                            alert(\"<?php echo xls('Please select message(s) to delete'); ?>\");\n                                        }\n                                    }\n\n\n                                // This is to allow selection of all items in Messages table for deletion.\n                                function selectAll() {\n                                    if (document.getElementById(\"checkAll\").checked === true) {\n                                        document.getElementById(\"checkAll\").checked = true;<?php\n                                        for ($i = 1; $i <= $count; $i++) {\n                                            echo \"document.getElementById(\\\"check$i\\\").checked=true; document.getElementById(\\\"row$i\\\").style.background='var(--gray200)';  \";\n                                        } ?>\n                                    } else {\n                                        document.getElementById(\"checkAll\").checked = false;<?php\n                                        for ($i = 1; $i <= $count; $i++) {\n                                            echo \"document.getElementById(\\\"check$i\\\").checked=false; document.getElementById(\\\"row$i\\\").style.background='var(--light)';  \";\n                                        } ?>\n                                    }\n                                }\n\n                                // The two functions below are for managing row styles in Messages table.\n                                function selectRow(row) {\n                                    document.getElementById(row).style.background = \"var(--gray200)\";\n                                }\n\n                                function deselectRow(row) {\n                                    document.getElementById(row).style.background = \"var(--light)\";\n                                }\n                            </script>\n                            <?php\n                        }\n                        ?>\n                    </div>\n                </div>\n            </div>\n        </div><!--end of messages div-->\n        <div class=\"row oe-display\" id=\"reminders-div\">\n            <div class=\"col-sm-12\">\n                <div class=\"jumbotron jumbotron-fluid py-3\">\n                    <div class=\"col-sm-12 col-md-12 col-lg-12\">\n                        <div class=\"oe-margin-b-10\">\n                            <span class=\"title\"><?php echo xlt('Reminders'); ?></span>\n                        </div>\n                        <?php\n                        // TajEmo Work by CB 2012/01/11 02:51:25 PM adding dated reminders\n                        // I am asuming that at this point security checks have been performed\n                        //require_once '../dated_reminders/dated_reminders.php';\n                        require_once '../dated_reminders/dated_reminders.php';\n                        ?>\n                    </div>\n                </div>\n            </div>\n        </div><!--end of reminders div-->\n        <div class=\"row oe-display\" id=\"recalls-div\">\n            <div class=\"col-sm-12\">\n                <div class=\"jumbotron jumbotron-fluid py-3\">\n                    <?php if ($GLOBALS['disable_rcb'] != '1') { ?>\n                    <div class=\"col-sm-6 col-md-6 col-lg-6\">\n                        <div class=\"dr_container\">\n                            <span class=\"title\"><?php echo xlt('Recalls'); ?></span>\n                            <br/><br/>\n                            <button class=\"btn btn-primary btn-add\" onclick=\"goReminderRecall('addRecall');\"><?php echo xlt('New Recall'); ?></button>\n                            <a class=\"btn btn-secondary btn-transmit\" onclick=\"goReminderRecall('Recalls');\"><span><?php echo xlt('Recall Board'); ?></span></a>\n                            &nbsp;\n                        </div>\n                    </div>\n                    <?php } ?>\n                </div>\n            </div>\n        </div><!--end of recalls div-->\n        <div class=\"row oe-display\" id=\"sms-div\">\n            <div class=\"col-sm-12\">\n                <div class=\"jumbotron jumbotron-fluid py-3\">\n                    <?php if ($logged_in) { ?>\n                    <div class=\"col-sm-4 col-md-4 col-lg-4\">\n                        <span class=\"title\"><?php echo xlt('SMS Zone'); ?></span>\n                        <br/><br/>\n                        <form id=\"smsForm\" class=\"input-group\">\n                            <select id=\"SMS_patient\" type=\"text\" class=\"form-control m-0 w-100\" placeholder=\"<?php echo xla(\"Patient Name\"); ?>\" > </select>\n                            <span class=\"input-group-addon\" onclick=\"SMS_direct();\"><i class=\"fas fa-phone\"></i></span>\n                            <input type=\"hidden\" id=\"sms_pid\" />\n                            <input type=\"hidden\" id=\"sms_mobile\" value=\"\" />\n                            <input type=\"hidden\" id=\"sms_allow\" value=\"\" />\n                        </form>\n                    </div>\n                    <?php } ?>\n                </div>\n            </div>\n        </div><!--end of sms div-->\n    </div><!--end of container div-->\n    <?php $oemr_ui->oeBelowContainerDiv();?>\n    <?php\n    //home of the help modal ;)\n    //$GLOBALS['enable_help'] = 0; // Please comment out line if you want help modal to function on this page\n    if ($GLOBALS['enable_help'] == 1) {\n        echo \"<script>var helpFile = 'message_center_help.php'</script>\";\n        //help_modal.php lives in interface, set path accordingly\n        require \"../../help_modal.php\";\n    }\n    ?>\n    <script>\n        var collectvalidation = <?php echo $collectthis; ?>;\n\n        $(function () {\n            var webRoot = <?php echo js_escape($GLOBALS['web_root']); ?>;\n            $(\"#reminders-div\").hide();\n            $(\"#recalls-div\").hide();\n            $(\"#sms-div\").hide();\n            $(\"#messages-li\").click(function(){\n                $(\"#messages-div\").show(250);\n                $(\"#reminders-div\").hide(250);\n                $(\"#recalls-div\").hide(250);\n                $(\"#sms-div\").hide(250);\n                $(\"#messages-li\").addClass(\"active\");\n                $(\"#reminders-li\").removeClass(\"active\");\n                $(\"#recalls-li\").removeClass(\"active\");\n                $(\"#sms-li\").removeClass(\"active\");\n\n            });\n            $(\"#reminders-li\").click(function(){\n                $(\"#messages-div\").hide(250);\n                $(\"#reminders-div\").show(250);\n                $(\"#recalls-div\").hide(250);\n                $(\"#sms-div\").hide(250);\n                $(\"#reminders-li\").addClass(\"active\");\n                $(\"#messages-li\").removeClass(\"active\");\n                $(\"#recalls-li\").removeClass(\"active\");\n                $(\"#sms-li\").removeClass(\"active\");\n            });\n            $(\"#recalls-li\").click(function(){\n                $(\"#messages-div\").hide(250);\n                $(\"#reminders-div\").hide(250);\n                $(\"#recalls-div\").show(250);\n                $(\"#sms-div\").hide(250);\n                $(\"#reminders-li\").removeClass(\"active\");\n                $(\"#messages-li\").removeClass(\"active\");\n                $(\"#recalls-li\").addClass(\"active\");\n                $(\"#sms-li\").removeClass(\"active\");\n            });\n            $(\"#sms-li\").click(function(){\n                $(\"#messages-div\").hide(250);\n                $(\"#reminders-div\").hide(250);\n                $(\"#recalls-div\").hide(250);\n                $(\"#sms-div\").show(250);\n                $(\"#reminders-li\").removeClass(\"active\");\n                $(\"#messages-li\").removeClass(\"active\");\n                $(\"#recalls-li\").removeClass(\"active\");\n                $(\"#sms-li\").addClass(\"active\");\n            });\n\n            $('.datetimepicker').datetimepicker({\n                <?php $datetimepicker_timepicker = true; ?>\n                <?php $datetimepicker_showseconds = false; ?>\n                <?php $datetimepicker_formatInput = true; ?>\n                <?php require($GLOBALS['srcdir'] . '/js/xl/jquery-datetimepicker-2-5-4.js.php'); ?>\n                ,minDate : 0 //only future\n            })\n\n            <?php if ($GLOBALS['phimail_enable']) : ?>\n            $('.trusted-messages-force-check').click(function() {\n                window.top.restoreSession();\n                request = new FormData;\n                request.append(\"ajax\", \"1\");\n                request.append(\"csrf_token_form\", <?php echo js_escape(CsrfUtils::collectCsrfToken()); ?>);\n                request.append(\"background_service\", \"phimail\");\n                request.append(\"background_force\", \"1\");\n                fetch(webRoot + \"/library/ajax/execute_background_services.php\", {\n                    method: 'POST',\n                    credentials: 'same-origin',\n                    body: request\n                }).then((response) => {\n                    if (response.status !== 200) {\n                        console.log('Background Service refresh failed. Status Code: ' + response.status);\n                    } else {\n                        // we've refreshed give them time to reload the page\n                        setTimeout(function() {\n                            window.location.reload();\n                        }, 500);\n                    }\n                }).catch(function(error) {\n                    console.log('Background Service refresh failed: ', error);\n                    alert(window.xl(\"Check new messages failed. Check the server logs for more information.\"));\n                });\n            });\n            <?php endif; ?>\n\n        });\n        $(function () {\n            $( \"ul.navbar-nav\" ).children().click(function(){\n                $(\".collapse\").collapse('hide');\n            });\n        });\n        $(function () {\n            $('#see-all-tooltip').attr({\"title\": <?php echo xlj('Click to show messages for all users'); ?>, \"data-toggle\":\"tooltip\", \"data-placement\":\"bottom\"}).tooltip();\n            $('#just-mine-tooltip').attr({\"title\": <?php echo xlj('Click to show messages for only the current user'); ?>, \"data-toggle\":\"tooltip\", \"data-placement\":\"bottom\"}).tooltip();\n        });\n        $(function () {\n            var f = $(\"#smsForm\");\n            $(\"#SMS_patient\").select2({\n                ajax: {\n                    url: \"save.php\",\n                    dataType: 'json',\n                    data: function(params) {\n                        return {\n                        go: \"sms_search\",\n                        term: params.term\n                        };\n                    },\n                    processResults: function(data) {\n                        return  {\n                            results: $.map(data, function(item, index) {\n                                return {\n                                    text: item.value,\n                                    id: index,\n                                    value: item.Label + ' ' + item.mobile,\n                                    pid: item.pid,\n                                    mobile: item.mobile,\n                                    allow: item.allow\n                                }\n                            })\n                        };\n                    },\n                    cache: true\n                }\n            })\n\n            $('#SMS_patient').on('select2:select', function (e) {\n                        e.preventDefault();\n                        $(\"#SMS_patient\").val(e.params.data.value);\n                        $(\"#sms_pid\").val(e.params.data.pid);\n                        $(\"#sms_mobile\").val(e.params.data.mobile);\n                        $(\"#sms_allow\").val(e.params.data.allow);\n            });\n        })\n\n        $(function () {\n\n            $(\"#newnote\").click(function (event) {\n                NewNote(event);\n            });\n\n            $(\"#printnote\").click(function () {\n                PrintNote();\n            });\n\n            var obj = $(\"#form_message_status\");\n            obj.onchange = function () {\n                SaveNote();\n            };\n\n            $(\"#cancel\").click(function () {\n                CancelNote();\n            });\n\n            $(\"#form_patient\").focus();\n\n            //clear button in messages\n            $(\"#clear_user\").click(function(){\n                $(\"#assigned_to_text\").val(\"<?php echo xls('Select Users From The Dropdown List'); ?>\");\n                $(\"#assigned_to\").val(\"\");\n                $(\"#users\").val(\"--\");\n            });\n\n            //clear inputs of patients\n            $(\"#clear_patients\").click(function(){\n                $(\"#reply_to\").val(\"\");\n                $(\"#form_patient\").val(\"\");\n            });\n        });\n\n        var NewNote = function (event) {\n            top.restoreSession();\n            if(document.getElementById(\"form_message_status\").value !== 'Done'){\n                collectvalidation.assigned_to = {\n                    presence: {message: \"<?php echo xls('Recipient required unless status is Done'); ?>\"}\n                }\n            }\n            else{\n                delete collectvalidation.assigned_to;\n            }\n\n            $('#newnote').attr('disabled', true);\n\n            var submit = submitme(1, event, 'new_note', collectvalidation);\n            if(!submit){\n                $('#newnote').attr('disabled', false);\n            }\n            else {\n                $(\"#new_note\").submit();\n            }\n        };\n        var PrintNote = function () {\n            <?php if ($noteid) { ?>\n            top.restoreSession();\n            window.open('../../patient_file/summary/pnotes_print.php?noteid=' + <?php echo js_url($noteid); ?>, '_blank', 'resizable=1,scrollbars=1,width=600,height=500');\n            <?php } ?>\n\n        };\n\n        var SaveNote = function () {\n            <?php if ($noteid) { ?>\n            top.restoreSession();\n            $(\"#task\").val(\"save\");\n            $(\"#new_note\").submit();\n            <?php } ?>\n        };\n\n        var CancelNote = function () {\n            top.restoreSession();\n            $(\"#task\").val(\"\");\n            $(\"#new_note\").submit();\n        };\n\n        // This is for callback by the find-patient popup.\n        function setpatient(pid, lname, fname, dob) {\n            var f = document.getElementById('new_note');\n            f.form_patient.value += lname + ', ' + fname + '; ';\n            f.reply_to.value += pid + ';';\n            <?php if ($noteid) { ?>\n            //used when direct messaging service inserts a pnote with indeterminate patient\n            //to allow the user to assign the message to a patient.\n            top.restoreSession();\n            $(\"#task\").val(\"savePatient\");\n            $(\"#new_note\").submit();\n            <?php } ?>\n        }\n\n        // This is for callback by the multi_patients_finder popup.\n        function setMultiPatients(patientsList) {\n            var f = document.getElementById('new_note');\n            f.form_patient.value='';\n            f.reply_to.value='';\n            $.each(patientsList, function (key, patient) {\n                f.form_patient.value += patient.lname + ', ' + patient.fname + '; ';\n                f.reply_to.value += patient.pid + ';';\n            })\n\n            <?php if ($noteid) { ?>\n            //used when direct messaging service inserts a pnote with indeterminate patient\n            //to allow the user to assign the message to a patient.\n            top.restoreSession();\n            $(\"#task\").val(\"savePatient\");\n            $(\"#new_note\").submit();\n            <?php } ?>\n        }\n\n        // This invokes the find-patient popup.\n        function sel_patient() {\n            dlgopen('../../main/calendar/find_patient_popup.php', '_blank', 625, 400);\n        }\n\n        function multi_sel_patient() {\n            $('#reply_to').trigger('click');\n            var url = '../../main/finder/multi_patients_finder.php'\n            // for edit selected list\n            if ($('#reply_to').val() !== '') {\n                url = url + '?patients=' + $('#reply_to').val() + '&csrf_token_form=<?php echo attr_url(CsrfUtils::collectCsrfToken()); ?>';\n            }\n            dlgopen(url, '_blank', 625, 400);\n        }\n\n        function addtolist(sel) {\n            $('#assigned_to').trigger(\"click\");\n            var itemtext = document.getElementById('assigned_to_text');\n            var item = document.getElementById('assigned_to');\n            if (sel.value !== '--') {\n                if (item.value) {\n                    if (item.value.indexOf(sel.value) === -1) {\n                        itemtext.value = itemtext.value + ' ; ' + sel.options[sel.selectedIndex].text;\n                        item.value = item.value + ';' + sel.value;\n                    }\n                } else {\n                    itemtext.value = sel.options[sel.selectedIndex].text;\n                    item.value = sel.value;\n                }\n            }\n        }\n\n        function SMS_direct() {\n            var pid = $(\"#sms_pid\").val();\n            var m = $(\"#sms_mobile\").val();\n            var allow = $(\"#sms_allow\").val();\n            if ((pid === '') || (m === '')) {\n                alert('<?php echo xls(\"MedEx needs a valid mobile number to send SMS messages...\"); ?>');\n            } else if (allow === 'NO') {\n                alert('<?php echo xls(\"This patient does not allow SMS messaging!\"); ?>');\n            } else {\n                top.restoreSession();\n                window.open('messages.php?nomenu=1&go=SMS_bot&pid=' + encodeURIComponent(pid) + '&m=' + encodeURIComponent(m), 'SMS_bot', 'width=370,height=600,resizable=0');\n            }\n        }\n    </script>\n    <?php\n}\n?>\n</body>\n</html>\n", "<?php\n\n/**\n * /interface/main/messages/save.php\n *\n * @package MedEx\n * @link    http://www.MedExBank.com\n * @author  MedEx <support@MedExBank.com>\n * @copyright Copyright (c) 2017 MedEx <support@MedExBank.com>\n * @license https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nrequire_once \"../../globals.php\";\nrequire_once \"$srcdir/lists.inc\";\nrequire_once \"$srcdir/forms.inc\";\nrequire_once \"$srcdir/patient.inc\";\nrequire_once \"$srcdir/MedEx/API.php\";\n\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Session\\SessionUtil;\n\n$MedEx = new MedExApi\\MedEx('MedExBank.com');\nif ($_REQUEST['go'] == 'sms_search') {\n    $param = \"%\" . $_GET['term'] . \"%\";\n    $query = \"SELECT * FROM patient_data WHERE fname LIKE ? OR lname LIKE ?\";\n    $result = sqlStatement($query, array($param, $param));\n    while ($frow = sqlFetchArray($result)) {\n        $data['Label']  = 'Name';\n        $data['value']  = text($frow['fname'] . \" \" . $frow['lname']);\n        $data['pid']    = text($frow['pid']);\n        $data['mobile'] = text($frow['phone_cell']);\n        $data['allow']  = text($frow['hipaa_allowsms']);\n        $sql = \"SELECT * FROM `medex_outgoing` where msg_pid=? ORDER BY `medex_outgoing`.`msg_uid` DESC LIMIT 1\";\n        $data['sql'] = $sql;\n        $result2 = sqlQuery($sql, array($frow['pid']));\n        $data['msg_last_updated'] = $result2['msg_date'];\n        $data['medex_uid'] = $result2['medex_uid'];\n        $results[] = $data;\n    }\n\n    echo json_encode($results);\n    exit;\n}\n//you need admin privileges to update this.\nif ($_REQUEST['go'] == 'Preferences') {\n    if (AclMain::aclCheckCore('admin', 'super')) {\n        $sql = \"UPDATE `medex_prefs` SET `ME_facilities`=?,`ME_providers`=?,`ME_hipaa_default_override`=?,\n\t\t\t`PHONE_country_code`=? ,`MSGS_default_yes`=?,\n\t\t\t`POSTCARDS_local`=?,`POSTCARDS_remote`=?,\n\t\t\t`LABELS_local`=?,`LABELS_choice`=?,\n\t\t\t`combine_time`=?, postcard_top=?\";\n\n        $facilities = implode(\"|\", $_REQUEST['facilities']);\n        $providers = implode(\"|\", $_REQUEST['providers']);\n        $HIPAA = ($_REQUEST['ME_hipaa_default_override'] ? $_REQUEST['ME_hipaa_default_override'] : '');\n        $MSGS = ($_REQUEST['MSGS_default_yes'] ? $_REQUEST['MSGS_default_yes'] : '');\n        $country_code = ($_REQUEST['PHONE_country_code'] ? $_REQUEST['PHONE_country_code'] : '1');\n\n        $myValues = array($facilities, $providers, $HIPAA, $country_code, $MSGS, $_REQUEST['POSTCARDS_local'], $_REQUEST['POSTCARDS_remote'], $_REQUEST['LABELS_local'], $_REQUEST['chart_label_type'], $_REQUEST['combine_time'], $_REQUEST['postcard_top']);\n\n        $_GLOBALS['chart_label_type'] = $_REQUEST['chart_label_type'];\n        sqlStatement('UPDATE `globals` SET gl_value = ? WHERE gl_name LIKE \"chart_label_type\" ', array($_REQUEST['chart_label_type']));\n\n        $query = \"UPDATE `background_services` SET `active`='1',`execute_interval`=?, `require_once`='/library/MedEx/MedEx_background.php' WHERE `name`='MedEx'\";\n        sqlQuery($query, array($_POST['execute_interval']));\n\n        $result['output'] = sqlQuery($sql, $myValues);\n        if ($result['output'] == false) {\n            $result['success'] = \"medex_prefs updated\";\n        }\n        $result = $MedEx->login('1');\n        echo json_encode($result);\n    }\n    exit;\n}\nif ($_REQUEST['MedEx'] == \"start\") {\n    if (AclMain::aclCheckCore('admin', 'super')) {\n        $query = \"SELECT * FROM users WHERE id = ?\";\n        $user_data = sqlQuery($query, array($_SESSION['authUserID']));\n        $query = \"SELECT * FROM facility WHERE primary_business_entity='1' LIMIT 1\";\n        $facility = sqlFetchArray(sqlStatement($query));\n\n        $data['firstname'] = $user_data['fname'];\n        $data['lastname'] = $user_data['lname'];\n        $data['username'] = $_SESSION['authUser'];\n        $data['password'] = $_REQUEST['new_password'];\n        $data['email'] = $_REQUEST['new_email'];\n        $data['telephone'] = $facility['phone'];\n        $data['fax'] = $facility['fax'];\n        $data['company'] = $facility['name'];\n        $data['address_1'] = $facility['street'];\n        $data['city'] = $facility['city'];\n        $data['state'] = $facility['state'];\n        $data['postcode'] = $facility['postal_code'];\n        $data['country'] = $facility['country_code'];\n        $data['sender_name'] = $user_data['fname'] . \" \" . $user_data['lname'];\n        $data['sender_email'] = $facility['email'];\n        $data['callerid'] = $facility['phone'];\n        $data['MedEx'] = \"1\";\n        $data['ipaddress'] = $_SERVER['REMOTE_ADDR'];\n\n        $prefix = 'http://';\n        if ($_SERVER[\"SSL_TLS_SNI\"]) {\n            $prefix = \"https://\";\n        }\n        $data['website_url'] = $prefix . $_SERVER['HTTP_HOST'] . $web_root;\n        $practice_logo = \"$OE_SITE_DIR/images/practice_logo.gif\";\n        if (!file_exists($practice_logo)) {\n            $data['logo_url'] = $prefix . $_SERVER['HTTP_HOST'] . $web_root . \"/sites/\" . $_SESSION[\"site_id\"] . \"/images/practice_logo.gif\";\n        } else {\n            $data['logo_url'] = $prefix . $_SERVER['HTTP_HOST'] . $GLOBALS['images_static_relative'] . \"/menu-logo.png\";\n        }\n        $response = $MedEx->setup->autoReg($data);\n        if (($response['API_key'] > '') && ($response['customer_id'] > '')) {\n            sqlQuery(\"DELETE FROM medex_prefs\");\n            $runQuery = \"SELECT * FROM facility ORDER BY name\";\n            $fetch = sqlStatement($runQuery);\n            while ($frow = sqlFetchArray($fetch)) {\n                $facilities[] = $frow['id'];\n            }\n            $runQuery = \"SELECT * FROM users WHERE username != '' AND active = '1' AND authorized = '1'\";\n            $prove = sqlStatement($runQuery);\n            while ($prow = sqlFetchArray($prove)) {\n                $providers[] = $prow['id'];\n            }\n            $facilities = implode(\"|\", $facilities);\n            $providers = implode(\"|\", $providers);\n            $sqlINSERT = \"INSERT INTO `medex_prefs` (\n\t\t\t\t\t\t\t\tMedEx_id,ME_api_key,ME_username,\n\t\t\t\t\t\t\t\tME_facilities,ME_providers,ME_hipaa_default_override,MSGS_default_yes,\n\t\t\t\t\t\t\t\tPHONE_country_code,LABELS_local,LABELS_choice)\n\t\t\t\t\t\t\tVALUES (?,?,?,?,?,?,?,?,?,?)\";\n            sqlStatement($sqlINSERT, array($response['customer_id'], $response['API_key'], $_POST['new_email'], $facilities, $providers, \"1\", \"1\", \"1\", \"1\", \"5160\"));\n            $query = \"UPDATE `background_services` SET `active`='1',`execute_interval`='5', `require_once`='/library/MedEx/MedEx_background.php' WHERE `name`='MedEx'\";\n            sqlQuery($query);\n            $info = $MedEx->login('2');\n\n            if ($info['token']) {\n                $info['show'] = xlt(\"Sign-up successful for\") . \" \" . $data['company'] . \".<br />\" . xlt(\"Proceeding to Preferences\") . \".<br />\" . xlt(\"If this page does not refresh, reload the Messages page manually\") . \".<br />\";\n                //get js to reroute user to preferences.\n                echo json_encode($info);\n            }\n        } else {\n            $response_prob = array();\n            $response_prob['show'] = xlt(\"We ran into some problems connecting your EHR to the MedEx servers\") . \".<br >\n\t\t\t\t\" . xlt('Most often this is due to a Username/Password mismatch') . \"<br />\"\n                . xlt('Run Setup again or contact support for assistance') .\n                \" <a href='https://medexbank.com/cart/upload/'>MedEx Bank</a>.<br />\";\n            echo json_encode($response_prob);\n            sqlQuery(\"UPDATE `background_services` SET `active`='0' WHERE `name`='MedEx'\");\n        }\n        //then redirect user to preferences with a success message!\n    } else {\n        echo xlt(\"Sorry you are not privileged enough. Enrollment is limited to Adminstrator accounts.\");\n    }\n    exit;\n}\n\nif (($_REQUEST['pid']) && ($_REQUEST['action'] == \"new_recall\")) {\n    $query = \"SELECT * FROM patient_data WHERE pid=?\";\n    $result = sqlQuery($query, array($_REQUEST['pid']));\n    $result['age'] = $MedEx->events->getAge($result['DOB']);\n    // uuid is binary and will break json_encode in binary form (not needed, so will remove it from $result array)\n    unset($result['uuid']);\n\n    /**\n     *  Did the clinician create a PLAN at the last visit?\n     *  To do an in office test, and get paid for it,\n     *  we must have an order (and a report of the findings).\n     *  If the practice is using the eye form then uncomment the 5 lines below.\n     *  It provides the PLAN and orders for next visit.\n     *  As forms mature, there should be a uniform way to find the PLAN?\n     *  And when that day comes we'll put it here...\n     *  The other option is to use Visit Categories here.  Maybe both?  Consensus?\n     */\n    $query = \"SELECT ORDER_DETAILS FROM form_eye_mag_orders WHERE pid=? AND ORDER_DATE_PLACED < NOW() ORDER BY ORDER_DATE_PLACED DESC LIMIT 1\";\n    $result2 = sqlQuery($query, array($_REQUEST['pid']));\n    if (!empty($result2)) {\n        $result['PLAN'] = $result2['ORDER_DETAILS'];\n    }\n\n    $query = \"SELECT * FROM openemr_postcalendar_events WHERE pc_pid =? ORDER BY pc_eventDate DESC LIMIT 1\";\n    $result2 = sqlQuery($query, array($_REQUEST['pid']));\n    if ($result2) { //if they were never actually scheduled this would be blank\n        $result['DOLV']     = oeFormatShortDate($result2['pc_eventDate']);\n        $result['provider'] = $result2['pc_aid'];\n        $result['facility'] = $result2['pc_facility'];\n    }\n    /**\n     * Is there an existing Recall in place already????\n     * If so we need to use that info...\n     */\n    $query = \"SELECT * from medex_recalls where r_pid=?\";\n    $result3 = sqlQuery($query, array($_REQUEST['pid']));\n    if ($result3) {\n        $result['recall_date']  = $result3['r_eventDate'];\n        $result['PLAN']         = $result3['r_reason'];\n        $result['facility']     = $result3['r_facility'];\n        $result['provider']     = $result3['r_provider'];\n    }\n    echo json_encode($result);\n    exit;\n}\n\nif (($_REQUEST['action'] == 'addRecall') || ($_REQUEST['add_new'])) {\n    $result = $MedEx->events->save_recall($_REQUEST);\n    echo json_encode('saved');\n    exit;\n}\n\nif (($_REQUEST['action'] == 'delete_Recall') && ($_REQUEST['pid'])) {\n    $MedEx->events->delete_recall();\n    echo json_encode('deleted');\n    exit;\n}\n\n// Clear the pidList session whenever this page is loaded.\n// $_SESSION['pidList'] will hold array of patient ids\n// which is then used to print 'postcards' and 'Address Labels'\n// Thanks Terry!\nSessionUtil::unsetSession('pidList');\n$pid_list = array();\n\nif ($_REQUEST['action'] == \"process\") {\n    $new_pid = json_decode($_POST['parameter'], true);\n    $new_pc_eid = json_decode($_POST['pc_eid'], true);\n\n    if (($_POST['item'] == \"phone\") || (($_POST['item'] == \"notes\") && ($_POST['msg_notes'] > ''))) {\n        $sql = \"INSERT INTO medex_outgoing (msg_pc_eid, msg_type, msg_reply, msg_extra_text) VALUES (?,?,?,?)\";\n        sqlQuery($sql, array('recall_' . $new_pid[0], $_POST['item'], $_SESSION['authUserID'], $_POST['msg_notes']));\n        return \"done\";\n    }\n    $pc_eidList = json_decode($_POST['pc_eid'], true);\n    $pidList = json_decode($_POST['parameter'], true);\n    $sessionSetArray['pc_eidList'] = $pc_eidList[0];\n    $sessionSetArray['pidList'] = $pidList;\n    SessionUtil::setSession($sessionSetArray);\n\n    if ($_POST['item'] == \"postcards\") {\n        foreach ($pidList as $pid) {\n            $sql = \"INSERT INTO medex_outgoing (msg_pc_eid, msg_type, msg_reply, msg_extra_text) VALUES (?,?,?,?)\";\n            sqlQuery($sql, array('recall_' . $pid, $_POST['item'], $_SESSION['authUserID'], 'Postcard printed locally'));\n        }\n    }\n    if ($_POST['item'] == \"labels\") {\n        foreach ($pidList as $pid) {\n            $sql = \"INSERT INTO medex_outgoing (msg_pc_eid, msg_type, msg_reply, msg_extra_text) VALUES (?,?,?,?) ON DUPLICATE KEY UPDATE msg_extra_text='Label repeat'\";\n            sqlQuery($sql, array('recall_' . $pid, $_POST['item'], $_SESSION['authUserID'], 'Label printed locally'));\n        }\n    }\n    echo text(json_encode($pidList));\n    exit;\n}\nif ($_REQUEST['go'] == \"Messages\") {\n    if ($_REQUEST['msg_id']) {\n        $result = updateMessage($_REQUEST['msg_id']);\n        echo json_encode($result);\n        exit;\n    }\n}\nexit;\n", "<?php\n\n/**\n *  Front Payment CC and Terminal Readers support.\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2021 Jerry Padgett <sjpadgett@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n$ignoreAuth = false;\nrequire_once(__DIR__ . \"/../globals.php\");\n\nuse OpenEMR\\Billing\\PaymentGateway;\nuse OpenEMR\\Common\\Crypto\\CryptoGen;\nuse Stripe\\Customer;\nuse Stripe\\PaymentIntent;\nuse Stripe\\Stripe;\nuse Stripe\\Terminal\\ConnectionToken;\nuse Stripe\\Terminal\\Location;\n\nif ($_POST['mode'] == 'AuthorizeNet') {\n    $form_pid = $_POST['form_pid'];\n    $pay = new PaymentGateway(\"AuthorizeNetApi_Api\");\n    $transaction['amount'] = $_POST['payment'];\n    $transaction['currency'] = \"USD\";\n    $transaction['opaqueDataDescriptor'] = $_POST['dataDescriptor'];\n    $transaction['opaqueDataValue'] = $_POST['dataValue'];\n    try {\n        $response = $pay->submitPaymentToken($transaction);\n        if (is_string($response)) {\n            echo $response;\n            exit();\n        }\n        $r = $response->getParsedData();\n        $cc = array();\n        $cc[\"cardHolderName\"] = $_POST[\"cardHolderName\"];\n        $cc['status'] = $response->isSuccessful() ? \"ok\" : \"failed\";\n        $cc['authCode'] = $r->transactionResponse->authCode;\n        $cc['transId'] = $r->transactionResponse->transId;\n        $cc['cardNumber'] = $r->transactionResponse->accountNumber;\n        $cc['cc_type'] = $r->transactionResponse->accountType;\n        $cc['zip'] = $_POST[\"zip\"];\n        $ccaudit = json_encode($cc);\n    } catch (\\Exception $ex) {\n        return $ex->getMessage();\n    }\n\n    if (!$response->isSuccessful()) {\n        echo $response->getMessage();\n        exit();\n    }\n\n    echo text($ccaudit);\n    exit();\n}\n\nif ($_POST['mode'] == 'Stripe') {\n    $pd = sqlQuery(\"SELECT \" .\n        \"p.fname, p.mname, p.lname, p.pubpid, p.pid, i.copay \" .\n        \"FROM patient_data AS p \" .\n        \"LEFT OUTER JOIN insurance_data AS i ON \" .\n        \"i.pid = p.pid AND i.type = 'primary' \" .\n        \"WHERE p.pid = ? ORDER BY i.date DESC LIMIT 1\", array($pid));\n    $pay = new PaymentGateway(\"Stripe\");\n    $transaction['amount'] = $_POST['payment'];\n    $transaction['currency'] = \"USD\";\n    $transaction['token'] = $_POST['stripeToken'];\n    $transaction['description'] = $pd['lname'] . ' ' . $pd['fname'] . ' ' . $pd['mname'];\n    $transaction['metadata'] = [\n        'Patient' => $pd['lname'] . ' ' . $pd['fname'] . ' ' . $pd['mname'],\n        'MRN' => $pd['pubpid'],\n        'Invoice Items (date encounter)' => $_POST['encs'],\n        'Invoice Total' => $transaction['amount']\n    ];\n    try {\n        $response = $pay->submitPaymentToken($transaction);\n        if (is_string($response)) {\n            echo $response;\n            exit();\n        }\n        $r = $response->getSource();\n        $cc = array();\n        $cc[\"cardHolderName\"] = $_POST[\"cardHolderName\"];\n        $cc['status'] = $response->isSuccessful() ? \"ok\" : \"failed\";\n        $cc['authCode'] = $r['fingerprint'];\n        $cc['transId'] = $response->getTransactionReference();\n        $cc['cardNumber'] = \"******** \" . $r['last4'];\n        $cc['cc_type'] = $r['brand'];\n        $cc['zip'] = $r->address_zip;\n        $ccaudit = json_encode($cc);\n    } catch (\\Exception $ex) {\n        echo $ex->getMessage();\n    }\n\n    if (!$response->isSuccessful()) {\n        echo $response;\n        exit();\n    }\n\n    echo $ccaudit;\n    exit();\n}\n\nif ($_GET['mode'] == 'terminal_token') {\n    $cryptoGen = new CryptoGen();\n    $apiKey = $cryptoGen->decryptStandard($GLOBALS['gateway_api_key']);\n    Stripe::setApiKey($apiKey);\n\n    header('Content-Type: application/json');\n\n    try {\n        $connectionToken = ConnectionToken::create();\n        echo json_encode(array('secret' => $connectionToken->secret), JSON_THROW_ON_ERROR);\n    } catch (\\Exception $e) {\n        http_response_code(500);\n        echo json_encode(['error' => $e->getMessage()], JSON_THROW_ON_ERROR);\n    }\n}\nif ($_GET['mode'] == 'cancel_intent') {\n    $cryptoGen = new CryptoGen();\n    $apiKey = $cryptoGen->decryptStandard($GLOBALS['gateway_api_key']);\n    Stripe::setApiKey($apiKey);\n\n    header('Content-Type: application/json');\n\n    try {\n        $json_str = file_get_contents('php://input');\n        $json_obj = json_decode($json_str);\n\n        $intent = PaymentIntent::retrieve($json_obj->id);\n        $rtn = $intent->cancel();\n\n        echo json_encode(['status' => (string)$rtn->status]);\n    } catch (\\Exception $e) {\n        http_response_code(500);\n        echo json_encode(['error' => $e->getMessage()]);\n    }\n}\n\nif ($_GET['mode'] == 'terminal_capture') {\n    $cryptoGen = new CryptoGen();\n    $apiKey = $cryptoGen->decryptStandard($GLOBALS['gateway_api_key']);\n    Stripe::setApiKey($apiKey);\n\n    header('Content-Type: application/json');\n\n    try {\n        // retrieve JSON from POST body\n        $json_str = file_get_contents('php://input');\n        $json_obj = json_decode($json_str);\n\n        $intent = PaymentIntent::retrieve($json_obj->id);\n        $intent = $intent->capture();\n\n        echo json_encode($intent);\n    } catch (\\Exception $e) {\n        http_response_code(500);\n        echo json_encode(['error' => $e->getMessage()], JSON_THROW_ON_ERROR);\n    }\n}\n\nif ($_GET['mode'] == 'terminal_create') {\n    $cryptoGen = new CryptoGen();\n    $apiKey = $cryptoGen->decryptStandard($GLOBALS['gateway_api_key']);\n    Stripe::setApiKey($apiKey);\n\n    header('Content-Type: application/json');\n\n    try {\n        $json_str = file_get_contents('php://input');\n        $json_obj = json_decode($json_str);\n        $pd = sqlQuery(\"SELECT \" .\n            \"p.fname, p.mname, p.lname, p.pubpid,p.pid, p.email, i.copay \" .\n            \"FROM patient_data AS p \" .\n            \"LEFT OUTER JOIN insurance_data AS i ON \" .\n            \"i.pid = p.pid AND i.type = 'primary' \" .\n            \"WHERE p.pid = ? ORDER BY i.date DESC LIMIT 1\", array($pid));\n\n        $intent = PaymentIntent::create([\n            'amount' => $json_obj->amount,\n            'currency' => 'usd',\n            'payment_method_types' => ['card_present'],\n            'capture_method' => 'manual',\n            'description' => $pd['lname'] . ' ' . $pd['fname'] . ' ' . $pd['mname'],\n            'metadata' => [\n                'Patient' => $pd['lname'] . ' ' . $pd['fname'] . ' ' . $pd['mname'],\n                'MRN' => $pd['pubpid'],\n                'Invoice Items (date encounter)' => $json_obj->encs,\n                'Invoice Total' => number_format(($json_obj->amount / 100), 2, '.', '')\n                ]\n        ]);\n        echo json_encode(array('client_secret' => $intent->client_secret), JSON_THROW_ON_ERROR);\n    } catch (\\Exception $e) {\n        http_response_code(500);\n        echo json_encode(['error' => $e->getMessage()], JSON_THROW_ON_ERROR);\n    }\n}\n", "<?php\n\n// +-----------------------------------------------------------------------+\n// | Copyright (c) 2002-2003, Richard Heyes, Harald Radi                        |\n// | All rights reserved.                                                  |\n// |                                                                       |\n// | Redistribution and use in source and binary forms, with or without    |\n// | modification, are permitted provided that the following conditions    |\n// | are met:                                                              |\n// |                                                                       |\n// | o Redistributions of source code must retain the above copyright      |\n// |   notice, this list of conditions and the following disclaimer.       |\n// | o Redistributions in binary form must reproduce the above copyright   |\n// |   notice, this list of conditions and the following disclaimer in the |\n// |   documentation and/or other materials provided with the distribution.|\n// | o The names of the authors may not be used to endorse or promote      |\n// |   products derived from this software without specific prior written  |\n// |   permission.                                                         |\n// |                                                                       |\n// | THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS   |\n// | \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT     |\n// | LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR |\n// | A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  |\n// | OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, |\n// | SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT      |\n// | LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, |\n// | DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY |\n// | THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT   |\n// | (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE |\n// | OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  |\n// |                                                                       |\n// +-----------------------------------------------------------------------+\n// | Author: Richard Heyes <richard@phpguru.org>                           |\n// |         Harald Radi <harald.radi@nme.at>                              |\n// +-----------------------------------------------------------------------+\n//\n// $Id$\n\n/**\n* HTML_TreeMenu Class\n*\n* A simple couple of PHP classes and some not so simple\n* Jabbascript which produces a tree menu. In IE this menu\n* is dynamic, with branches being collapsable. In IE5+ the\n* status of the collapsed/open branches persists across page\n* refreshes.In any other browser the tree is static. Code is\n* based on work of Harald Radi.\n*\n* Usage.\n*\n* After installing the package, copy the example php script to\n* your servers document root. Also place the TreeMenu.js and the\n* images folder in the same place. Running the script should\n* then produce the tree.\n*\n* Thanks go to Chip Chapin (http://www.chipchapin.com) for many\n* excellent ideas and improvements.\n*\n* @author  Richard Heyes <richard@php.net>\n* @author  Harald Radi <harald.radi@nme.at>\n* @access  public\n* @package HTML_TreeMenu\n*/\n\nclass HTML_TreeMenu\n{\n    /**\n    * Indexed array of subnodes\n    * @var array\n    */\n    var $items;\n\n    /**\n    * Constructor\n    *\n    * @access public\n    */\n    function __construct()\n    {\n        // Not much to do here :(\n    }\n\n    /**\n    * This function adds an item to the the tree.\n    *\n    * @access public\n    * @param  object $node The node to add. This object should be\n    *                      a HTML_TreeNode object.\n    * @return object       Returns a reference to the new node inside\n    *                      the tree.\n    */\n    function &addItem(&$node)\n    {\n        $this->items[] = &$node;\n        return $this->items[count($this->items) - 1];\n    }\n\n    /**\n    * Import method for creating HTML_TreeMenu objects/structures\n    * out of existing tree objects/structures. Currently supported\n    * are Wolfram Kriesings' PEAR Tree class, and Richard Heyes' (me!)\n    * Tree class (available here: http://www.phpguru.org/). This\n    * method is intended to be used statically, eg:\n    * $treeMenu = &HTML_TreeMenu::createFromStructure($myTreeStructureObj);\n    *\n    * @param  array  $params   An array of parameters that determine\n    *                          how the import happens. This can consist of:\n    *                            structure   => The tree structure\n    *                            type        => The type of the structure, currently\n    *                                           can be either 'heyes' or 'kriesing'\n    *                            nodeOptions => Default options for each node\n    *\n    * @return object           The resulting HTML_TreeMenu object\n    */\n    function createFromStructure($params)\n    {\n        if (!isset($params['nodeOptions'])) {\n            $params['nodeOptions'] = array();\n        }\n\n        switch (@$params['type']) {\n\n            /**\n            * Wolfram Kriesings' PEAR Tree class\n            */\n            case 'kriesing':\n                $className = strtolower(get_class($params['structure']->dataSourceClass));\n                $isXMLStruct = strpos($className, '_xml') !== false ? true : false;\n\n                // Get the entire tree, the $nodes are sorted like in the tree view\n                // from top to bottom, so we can easily put them in the nodes\n                $nodes = $params['structure']->getNode();\n\n                // Make a new menu and fill it with the values from the tree\n                $treeMenu  = new HTML_TreeMenu();\n                $curNode[0] = &$treeMenu;   // we need the current node as the reference to the\n\n                foreach ($nodes as $aNode) {\n                    $events = array();\n                    $data = array();\n\n                    // In an XML, all the attributes are saved in an array, but since they might be\n                    // used as the parameters, we simply extract them here if we handle an XML-structure\n                    if ($isXMLStruct && sizeof($aNode['attributes'])) {\n                        foreach ($aNode['attributes'] as $key => $val) {\n                            if (!$aNode[$key]) { // dont overwrite existing values\n                                $aNode[$key] = $val;\n                            }\n                        }\n                    }\n\n                    // Process all the data that are saved in $aNode and put them in the data and/or events array\n                    foreach ($aNode as $key => $val) {\n                        if (!is_array($val)) {\n                            // Dont get the recursive data in here! they are always arrays\n                            if (substr($key, 0, 2) == 'on') {  // get the events\n                                $events[$key] = $val;\n                            }\n\n                            // I put it in data too, so in case an options starts with 'on' its also passed to the node ... not too cool i know\n                            $data[$key] = $val;\n                        }\n                    }\n\n                    // Normally the text is in 'name' in the Tree class, so we check both but 'text' is used if found\n                    $data['text'] = $aNode['text'] ? $aNode['text'] : $aNode['name'];\n\n                    // Add the item to the proper node\n                    $thisNode = &$curNode[$aNode['level']]->addItem(new HTML_TreeNode($data, $events));\n                    $curNode[$aNode['level'] + 1] = &$thisNode;\n                }\n                break;\n\n            /**\n            * Richard Heyes' (me!) second (array based) Tree class\n            */\n            case 'heyes_array':\n                // Need to create a HTML_TreeMenu object ?\n                if (!isset($params['treeMenu'])) {\n                    $treeMenu = new HTML_TreeMenu();\n                    $parentID = 0;\n                } else {\n                    $treeMenu = &$params['treeMenu'];\n                    $parentID = $params['parentID'];\n                }\n\n                // Loop thru the trees nodes\n                foreach ($params['structure']->getChildren($parentID) as $nodeID) {\n                    $data = $params['structure']->getData($nodeID);\n                    $parentNode = &$treeMenu->addItem(new HTML_TreeNode(array_merge($params['nodeOptions'], $data)));\n\n                    // Recurse ?\n                    if ($params['structure']->hasChildren($nodeID)) {\n                        $recurseParams['type']        = 'heyes_array';\n                        $recurseParams['parentID']    = $nodeID;\n                        $recurseParams['nodeOptions'] = $params['nodeOptions'];\n                        $recurseParams['structure']   = &$params['structure'];\n                        $recurseParams['treeMenu']    = &$parentNode;\n                        HTML_TreeMenu::createFromStructure($recurseParams);\n                    }\n                }\n                break;\n\n            /**\n            * Richard Heyes' (me!) original OO based Tree class\n            */\n            case 'heyes':\n            default:\n                // Need to create a HTML_TreeMenu object ?\n                if (!isset($params['treeMenu'])) {\n                    $treeMenu = new HTML_TreeMenu();\n                } else {\n                    $treeMenu = &$params['treeMenu'];\n                }\n\n                // Loop thru the trees nodes\n                foreach ($params['structure']->nodes->nodes as $node) {\n                    $tag = $node->getTag();\n                    $parentNode = &$treeMenu->addItem(new HTML_TreeNode(array_merge($params['nodeOptions'], $tag)));\n\n                    // Recurse ?\n                    if (!empty($node->nodes->nodes)) {\n                        $recurseParams['structure']   = $node;\n                        $recurseParams['nodeOptions'] = $params['nodeOptions'];\n                        $recurseParams['treeMenu']    = &$parentNode;\n                        HTML_TreeMenu::createFromStructure($recurseParams);\n                    }\n                }\n                break;\n        }\n\n        return $treeMenu;\n    }\n\n    /**\n    * Creates a treeMenu from XML. The structure of your XML should be\n    * like so:\n    *\n    * <treemenu>\n    *     <node text=\"First node\" icon=\"folder.gif\" expandedIcon=\"folder-expanded.gif\" />\n    *     <node text=\"Second node\" icon=\"folder.gif\" expandedIcon=\"folder-expanded.gif\">\n    *         <node text=\"Sub node\" icon=\"folder.gif\" expandedIcon=\"folder-expanded.gif\" />\n    *     </node>\n    *     <node text=\"Third node\" icon=\"folder.gif\" expandedIcon=\"folder-expanded.gif\">\n    * </treemenu>\n    *\n    * Any of the options you can supply to the HTML_TreeNode constructor can be supplied as\n    * attributes to the <node> tag. If there are no subnodes for a particular node, you can\n    * use the XML shortcut <node ... /> instead of <node ... ></node>. The $xml argument can\n    * be either the XML as a string, or an pre-created XML_Tree object. Also, this method\n    * REQUIRES my own Tree class to work (http://phpguru.org/tree.html). If this has not\n    * been include()ed or require()ed this method will die().\n    *\n    * @param  mixed  $xml  This can be either a string containing the XML, or an XML_Tree object\n    *                      (the PEAR::XML_Tree package).\n    * @return object       The HTML_TreeMenu object\n    */\n    function createFromXML($xml)\n    {\n        if (!class_exists('Tree')) {\n            die('Could not find Tree class');\n        }\n\n        // Supplied $xml is a string\n        if (is_string($xml)) {\n            require_once('XML/Tree.php');\n            $xmlTree = new XML_Tree();\n            $xmlTree->getTreeFromString($xml);\n\n        // Supplied $xml is an XML_Tree object\n        } else {\n            $xmlTree = $xml;\n        }\n\n        // Now process the XML_Tree object, setting the XML attributes\n        // to be the tag data (with out the XML tag name or contents).\n        $treeStructure = Tree::createFromXMLTree($xmlTree, true);\n        $treeStructure->nodes->traverse(create_function('&$node', '$tagData = $node->getTag(); $node->setTag($tagData[\"attributes\"]);'));\n\n\n        return HTML_TreeMenu::createFromStructure(array('structure' => $treeStructure));\n    }\n} // HTML_TreeMenu\n\n\n/**\n* HTML_TreeNode class\n*\n* This class is supplementary to the above and provides a way to\n* add nodes to the tree. A node can have other nodes added to it.\n*\n* @author  Richard Heyes <richard@php.net>\n* @author  Harald Radi <harald.radi@nme.at>\n* @access  public\n* @package HTML_TreeMenu\n*/\nclass HTML_TreeNode\n{\n    /**\n    * The text for this node.\n    * @var string\n    */\n    var $text;\n\n    /**\n    * The link for this node.\n    * @var string\n    */\n    var $link;\n\n    /**\n    * The icon for this node.\n    * @var string\n    */\n    var $icon;\n\n    /**\n    * The icon to show when expanded for this node.\n    * @var string\n    */\n    var $expandedIcon;\n\n    /**\n    * The css class for this node\n    * @var string\n    */\n    var $cssClass;\n\n    /**\n    * The link target for this node\n    * @var string\n    */\n    var $linkTarget;\n\n    /**\n    * Indexed array of subnodes\n    * @var array\n    */\n    var $items;\n\n    /**\n    * Whether this node is expanded or not\n    * @var bool\n    */\n    var $expanded;\n\n    /**\n    * Whether this node is dynamic or not\n    * @var bool\n    */\n    var $isDynamic;\n\n    /**\n    * Should this node be made visible?\n    * @var bool\n    */\n    var $ensureVisible;\n\n    /**\n    * The parent node. Null if top level\n    * @var object\n    */\n    var $parent;\n\n    /**\n    * Unique ID of this node\n    * @var int\n    */\n    //commented out because it was causing Documents page to not show\n   //because of this redeclaration of $parent.  I do not know what the\n  // author's intention was in using this name twice or if it was a mistake\n    //var $parent;\n\n    /**\n    * Javascript event handlers;\n    * @var array\n    */\n    var $events;\n\n    var $id;\n\n    /**\n    * Constructor\n    *\n    * @access public\n    * @param  array $options An array of options which you can pass to change\n    *                        the way this node looks/acts. This can consist of:\n    *                         o text          The title of the node, defaults to blank\n    *                         o link          The link for the node, defaults to blank\n    *                         o icon          The icon for the node, defaults to blank\n    *                         o expandedIcon  The icon to show when the node is expanded\n    *                         o cssClass      The CSS class for this node, defaults to blank\n    *                         o expanded      The default expanded status of this node, defaults to false\n    *                                         This doesn't affect non dynamic presentation types\n    *                         o linkTarget    Target for the links. Defaults to linkTarget of the\n    *                                         HTML_TreeMenu_Presentation.\n    *                         o isDynamic     If this node is dynamic or not. Only affects\n    *                                         certain presentation types.\n    *                         o ensureVisible If true this node will be made visible despite the expanded\n    *                                         settings, and client side persistence. Will not affect\n    *                                         some presentation styles, such as Listbox. Default is false\n    * @param  array $events An array of javascript events and the corresponding event handlers.\n    *                       Additionally to the standard javascript events you can specify handlers\n    *                       for the 'onexpand', 'oncollapse' and 'ontoggle' events which will be fired\n    *                       whenever a node is collapsed and/or expanded.\n    */\n    function __construct($options = array(), $events = array())\n    {\n        $this->text          = '';\n        $this->link          = '';\n        $this->icon          = '';\n        $this->expandedIcon  = '';\n        $this->cssClass      = '';\n        $this->expanded      = false;\n        $this->isDynamic     = true;\n        $this->ensureVisible = false;\n        $this->linkTarget    = null;\n        $this->id            = null;\n\n        $this->parent        = null;\n        $this->events        = $events;\n\n        foreach ($options as $option => $value) {\n            $this->$option = $value;\n        }\n    }\n\n    /**\n    * Allows setting of various parameters after the initial\n    * constructor call. Possible options you can set are:\n    *  o text\n    *  o link\n    *  o icon\n    *  o cssClass\n    *  o expanded\n    *  o isDynamic\n    *  o ensureVisible\n    * ie The same options as in the constructor\n    *\n    * @access public\n    * @param  string $option Option to set\n    * @param  string $value  Value to set the option to\n    */\n    function setOption($option, $value)\n    {\n        $this->$option = $value;\n    }\n\n    /**\n    * Adds a new subnode to this node.\n    *\n    * @access public\n    * @param  object $node The new node\n    */\n    function &addItem(&$node)\n    {\n        $node->parent  = &$this;\n        $this->items[] = &$node;\n\n        /**\n        * If the subnode has ensureVisible set it needs\n        * to be handled, and all parents set accordingly.\n        */\n        if ($node->ensureVisible) {\n            $this->_ensureVisible();\n        }\n\n        return $this->items[count($this->items) - 1];\n    }\n\n    /**\n    * Private function to handle ensureVisible stuff\n    *\n    * @access private\n    */\n    function _ensureVisible()\n    {\n        $this->ensureVisible = true;\n        $this->expanded      = true;\n\n        if (!is_null($this->parent)) {\n            $this->parent->_ensureVisible();\n        }\n    }\n} // HTML_TreeNode\n\n\n/**\n* HTML_TreeMenu_Presentation class\n*\n* Base class for other presentation classes to\n* inherit from.\n*/\nclass HTML_TreeMenu_Presentation\n{\n    /**\n    * The TreeMenu structure\n    * @var object\n    */\n    var $menu;\n\n    /**\n    * Base constructor simply sets the menu object\n    *\n    * @param object $structure The menu structure\n    */\n    function __construct(&$structure)\n    {\n        $this->menu = &$structure;\n    }\n\n    /**\n    * Prints the HTML generated by the toHTML() method.\n    * toHTML() must therefore be defined by the derived\n    * class.\n    *\n    * @access public\n    * @param  array  Options to set. Any options taken by\n    *                the presentation class can be specified\n    *                here.\n    */\n    function printMenu($options = array())\n    {\n        foreach ($options as $option => $value) {\n            $this->$option = $value;\n        }\n\n        echo $this->toHTML();\n    }\n}\n\n\n/**\n* HTML_TreeMenu_DHTML class\n*\n* This class is a presentation class for the tree structure\n* created using the TreeMenu/TreeNode. It presents the\n* traditional tree, static for browsers that can't handle\n* the DHTML.\n*/\nclass HTML_TreeMenu_DHTML extends HTML_TreeMenu_Presentation\n{\n    /**\n    * Dynamic status of the treemenu. If true (default) this has no effect. If\n    * false it will override all dynamic status vars and set the menu to be\n    * fully expanded an non-dynamic.\n    */\n    var $isDynamic;\n\n    /**\n    * Path to the images\n    * @var string\n    */\n    var $images;\n\n    /**\n    * Target for the links generated\n    * @var string\n    */\n    var $linkTarget;\n\n    /**\n    * Whether to use clientside persistence or not\n    * @var bool\n    */\n    var $userPersistence;\n\n    /**\n    * The default CSS class for the nodes\n    */\n    var $defaultClass;\n\n    /**\n    * Whether to skip first level branch images\n    * @var bool\n    */\n    var $noTopLevelImages;\n\n    var $maxDepth;\n    var $usePersistence;\n\n    /**\n    * Constructor, takes the tree structure as\n    * an argument and an array of options which\n    * can consist of:\n    *  o images            -  The path to the images folder. Defaults to \"images\"\n    *  o linkTarget        -  The target for the link. Defaults to \"_self\"\n    *  o defaultClass      -  The default CSS class to apply to a node. Default is none.\n    *  o usePersistence    -  Whether to use clientside persistence. This persistence\n    *                         is achieved using cookies. Default is true.\n    *  o noTopLevelImages  -  Whether to skip displaying the first level of images if\n    *                         there is multiple top level branches.\n    *  o maxDepth          -  The maximum depth of indentation. Useful for ensuring\n    *                         deeply nested trees don't go way off to the right of your\n    *                         page etc. Defaults to no limit.\n    *\n    * And also a boolean for whether the entire tree is dynamic or not.\n    * This overrides any perNode dynamic settings.\n    *\n    * @param object $structure The menu structure\n    * @param array  $options   Array of options\n    * @param bool   $isDynamic Whether the tree is dynamic or not\n    */\n    function __construct(&$structure, $options = array(), $isDynamic = true)\n    {\n        parent::__construct($structure);\n        $this->isDynamic = $isDynamic;\n\n        // Defaults\n        $this->images           = 'public/images';\n        $this->maxDepth         = 0;        // No limit\n        $this->linkTarget       = '_self';\n        $this->defaultClass     = '';\n        $this->usePersistence   = true;\n        $this->noTopLevelImages = false;\n\n        foreach ($options as $option => $value) {\n            $this->$option = $value;\n        }\n    }\n\n    /**\n    * Returns the HTML for the menu. This method can be\n    * used instead of printMenu() to use the menu system\n    * with a template system.\n    *\n    * @access public\n    * @return string The HTML for the menu\n    */\n    function toHTML()\n    {\n        static $count = 0;\n        $menuObj     = 'objTreeMenu_' . ++$count;\n\n        $html  = \"\\n\";\n        $html .= '<script>' . \"\\n\\t\";\n        $html .= sprintf(\n            '%s = new TreeMenu(\"%s\", \"%s\", \"%s\", \"%s\", %s, %s);',\n            $menuObj,\n            $this->images,\n            $menuObj,\n            $this->linkTarget,\n            $this->defaultClass,\n            $this->usePersistence ? 'true' : 'false',\n            $this->noTopLevelImages ? 'true' : 'false'\n        );\n\n        $html .= \"\\n\";\n\n        /**\n        * Loop through subnodes\n        */\n        if (isset($this->menu->items)) {\n            for ($i = 0; $i < count($this->menu->items); $i++) {\n                $html .= $this->_nodeToHTML($this->menu->items[$i], $menuObj);\n            }\n        }\n\n        $html .= sprintf(\"\\n\\t%s.drawMenu();\", $menuObj);\n        $html .= sprintf(\"\\n\\t%s.writeOutput();\", $menuObj);\n\n        if ($this->usePersistence && $this->isDynamic) {\n            $html .= sprintf(\"\\n\\t%s.resetBranches();\", $menuObj);\n        }\n\n        $html .= \"\\n</script>\";\n\n        return $html;\n    }\n\n    /**\n    * Prints a node of the menu\n    *\n    * @access private\n    */\n    function _nodeToHTML($nodeObj, $prefix, $return = 'newNode', $currentDepth = 0, $maxDepthPrefix = null)\n    {\n        $prefix = empty($maxDepthPrefix) ? $prefix : $maxDepthPrefix;\n\n        $expanded  = $this->isDynamic ? ($nodeObj->expanded  ? 'true' : 'false') : 'true';\n        $isDynamic = $this->isDynamic ? ($nodeObj->isDynamic ? 'true' : 'false') : 'false';\n        $html = sprintf(\n            \"\\t %s = %s.addItem(new TreeNode(jsAttr(%s), jsAttr(%s), jsAttr(%s), %s, %s, '%s', '%s', jsAttr(%s)));\\n\",\n            $return,\n            $prefix,\n            js_escape($nodeObj->text),\n            !empty($nodeObj->icon) ?  js_escape($nodeObj->icon) : 'null',\n            !empty($nodeObj->link) ? js_escape($nodeObj->link) : 'null',\n            $expanded,\n            $isDynamic,\n            $nodeObj->cssClass,\n            $nodeObj->linkTarget,\n            !empty($nodeObj->expandedIcon) ? js_escape($nodeObj->expandedIcon) : 'null'\n        );\n\n        foreach ($nodeObj->events as $event => $handler) {\n            $html .= sprintf(\n                \"\\t %s.setEvent('%s', '%s');\\n\",\n                $return,\n                $event,\n                str_replace(array(\"\\r\", \"\\n\", \"'\"), array('\\r', '\\n', \"\\'\"), $handler)\n            );\n        }\n\n        if ($this->maxDepth > 0 and $currentDepth == $this->maxDepth) {\n            $maxDepthPrefix = $prefix;\n        }\n\n        /**\n        * Loop through subnodes\n        */\n        if (!empty($nodeObj->items)) {\n            for ($i = 0; $i < count($nodeObj->items); $i++) {\n                $html .= $this->_nodeToHTML($nodeObj->items[$i], $return, $return . '_' . ($i + 1), $currentDepth + 1, $maxDepthPrefix);\n            }\n        }\n\n        return $html;\n    }\n} // End class HTML_TreeMenu_DHTML\n\n\n/**\n* HTML_TreeMenu_Listbox class\n*\n* This class presents the menu as a listbox\n*/\nclass HTML_TreeMenu_Listbox extends HTML_TreeMenu_Presentation\n{\n    /**\n    * The text that is displayed in the first option\n    * @var string\n    */\n    var $promoText;\n\n    /**\n    * The character used for indentation\n    * @var string\n    */\n    var $indentChar;\n\n    /**\n    * How many of the indent chars to use\n    * per indentation level\n    * @var integer\n    */\n    var $indentNum;\n\n    /**\n    * Target for the links generated\n    * @var string\n    */\n    var $linkTarget;\n\n    var $submitText;\n\n    /**\n    * Constructor\n    *\n    * @param object $structure The menu structure\n    * @param array  $options   Options whic affect the display of the listbox.\n    *                          These can consist of:\n    *                           o promoText  The text that appears at the the top of the listbox\n    *                                        Defaults to \"Select...\"\n    *                           o indentChar The character to use for indenting the nodes\n    *                                        Defaults to \"&nbsp;\"\n    *                           o indentNum  How many of the indentChars to use per indentation level\n    *                                        Defaults to 2\n    *                           o linkTarget Target for the links. Defaults to \"_self\"\n    *                           o submitText Text for the submit button. Defaults to \"Go\"\n    */\n    function __construct($structure, $options = array())\n    {\n        parent::__construct($structure);\n\n        $this->promoText  = null;\n        $this->indentChar = '&nbsp;';\n        $this->indentNum  = 2;\n        $this->linkTarget = '_self';\n        $this->submitText = 'Go';\n\n        foreach ($options as $option => $value) {\n            $this->$option = $value;\n        }\n    }\n\n    /**\n    * Returns the HTML generated\n    */\n    function toHTML()\n    {\n        static $count = 0;\n        $nodeHTML = '';\n\n        /**\n        * Loop through subnodes\n        */\n        if (isset($this->menu->items)) {\n            for ($i = 0; $i < count($this->menu->items); $i++) {\n                $nodeHTML .= $this->_nodeToHTML($this->menu->items[$i]);\n            }\n        }\n\n        if ($this->promoText) {\n            return sprintf('<option value=\"\">%s</option>%s', text($this->promoText ?? ''), $nodeHTML);\n        } else {\n            return $nodeHTML;\n        }\n    }\n\n    /**\n    * Returns HTML for a single node\n    *\n    * @access private\n    */\n    function _nodeToHTML($node, $prefix = '')\n    {\n        $html = sprintf('<option value=\"%s\">%s%s</option>', attr($node->id), $prefix, text($node->text));\n\n        /**\n        * Loop through subnodes\n        */\n        if (isset($node->items)) {\n            for ($i = 0; $i < count($node->items); $i++) {\n                $html .= $this->_nodeToHTML($node->items[$i], $prefix . str_repeat($this->indentChar, $this->indentNum));\n            }\n        }\n\n        return $html;\n    }\n} // End class HTML_TreeMenu_Listbox\n"], "filenames": ["interface/main/messages/messages.php", "interface/main/messages/save.php", "interface/patient_file/front_payment_cc.php", "library/classes/TreeMenu.php"], "buggy_code_start_loc": [118, 251, 56, 683], "buggy_code_end_loc": [119, 252, 57, 694], "fixing_code_start_loc": [118, 251, 56, 683], "fixing_code_end_loc": [119, 252, 57, 694], "type": "CWE-20", "message": "Improper Input Validation in GitHub repository openemr/openemr prior to 7.0.0.2.", "other": {"cve": {"id": "CVE-2022-4504", "sourceIdentifier": "security@huntr.dev", "published": "2022-12-15T01:15:11.023", "lastModified": "2022-12-16T15:10:43.220", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Input Validation in GitHub repository openemr/openemr prior to 7.0.0.2."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open-emr:openemr:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.0.0.2", "matchCriteriaId": "C397DED6-5350-43A0-B65D-FB92E8587CED"}]}]}], "references": [{"url": "https://github.com/openemr/openemr/commit/37d7ed4855763fc588485f05b2e9cc0944f71879", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/f50538cb-99d3-411d-bd1a-5f36d1fa9f5d", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openemr/openemr/commit/37d7ed4855763fc588485f05b2e9cc0944f71879"}}