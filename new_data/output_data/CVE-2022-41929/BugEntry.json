{"buggy_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.api;\n\nimport java.text.MessageFormat;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.xwiki.model.EntityType;\nimport org.xwiki.model.reference.DocumentReferenceResolver;\nimport org.xwiki.model.reference.EntityReference;\n\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.objects.BaseObject;\nimport com.xpn.xwiki.objects.classes.PasswordClass;\nimport com.xpn.xwiki.user.api.XWikiUser;\nimport com.xpn.xwiki.util.Programming;\nimport com.xpn.xwiki.web.Utils;\n\n/**\n * Scriptable API for easy handling of users. For the moment this API is very limited, containing only one method. In\n * the future it should be extended to provide useful methods for working with users.\n *\n * @version $Id$\n * @since 1.0\n */\npublic class User extends Api\n{\n    /** Logging helper object. */\n    protected static final Logger LOGGER = LoggerFactory.getLogger(User.class);\n\n    /** User class reference. */\n    private static final EntityReference USERCLASS_REFERENCE = new EntityReference(\"XWikiUsers\", EntityType.DOCUMENT,\n        new EntityReference(\"XWiki\", EntityType.SPACE));\n\n    /** Reference resolver. */\n    private static final DocumentReferenceResolver<String> REFERENCE_RESOLVER = Utils.getComponent(\n        DocumentReferenceResolver.TYPE_STRING, \"currentmixed\");\n\n    /** The wrapped XWikiUser object. */\n    private XWikiUser user;\n\n    /**\n     * Constructs a wrapper for the given protected XWikiUser object.\n     *\n     * @param user The XWikiUser object that should be wrapper.\n     * @param context The current {@link XWikiContext context}.\n     */\n    public User(XWikiUser user, XWikiContext context)\n    {\n        super(context);\n        this.user = user;\n    }\n\n    /**\n     * Expose the wrapped XWikiUser object. Requires programming rights.\n     *\n     * @return The wrapped XWikiUser object, or {@code null} if the user does not have programming rights.\n     */\n    @Programming\n    public XWikiUser getUser()\n    {\n        if (hasProgrammingRights()) {\n            return this.user;\n        }\n        return null;\n    }\n\n    /**\n     * Set the disabled status of a user.\n     * @param disabledStatus true to disable an user, false to enable it back.\n     * @since 11.7RC1\n     */\n    public void setDisabledStatus(boolean disabledStatus)\n    {\n        this.user.setDisabled(disabledStatus, getXWikiContext());\n    }\n\n    /**\n     * @return {@code true} if the user is disabled, false if it is enabled.\n     * @since 11.8RC1\n     */\n    public boolean isDisabled()\n    {\n        return this.user.isDisabled(getXWikiContext());\n    }\n\n    /**\n     * Check if the user belongs to a group or not. This method only check direct membership (no recursive checking) in\n     * the current wiki.\n     *\n     * @param groupName The group to check.\n     * @return {@code true} if the user does belong to the specified group, false otherwise or if an exception occurs.\n     */\n    public boolean isUserInGroup(String groupName)\n    {\n        boolean result = false;\n        try {\n            if (this.user == null) {\n                LOGGER.warn(\"User considered not part of group [{}] since user is null\", groupName);\n            } else {\n                result = this.user.isUserInGroup(groupName, getXWikiContext());\n            }\n        } catch (Exception ex) {\n            LOGGER.warn(new MessageFormat(\"Unhandled exception while checking if user {0}\"\n                + \" belongs to group {1}\").format(new java.lang.Object[] { this.user, groupName }), ex);\n        }\n        return result;\n    }\n\n    /**\n     * <p>\n     * See if the user is global (i.e. registered in the main wiki) or local to a virtual wiki.\n     * </p>\n     * <p>\n     * This method is not public, as the underlying implementation is not fully functional\n     * </p>\n     *\n     * @return {@code true} if the user is global, false otherwise or if an exception occurs.\n     */\n    protected boolean isMain()\n    {\n        return this.user.isMain();\n    }\n\n    /**\n     * API to retrieve the e-mail address of this user. This e-mail address is taken from the user profile. If the user\n     * hasn't changed his profile, then this is the e-mail address he filled in the registration form.\n     *\n     * @return The e-mail address from the user profile, or {@code null} if there is an error retrieving the email.\n     * @since 1.1.3\n     * @since 1.2.2\n     * @since 1.3M2\n     */\n    public String getEmail()\n    {\n        XWikiDocument userDoc;\n        try {\n            userDoc = getXWikiContext().getWiki().getDocument(this.user.getUser(), getXWikiContext());\n            BaseObject obj = userDoc.getObject(\"XWiki.XWikiUsers\");\n            return obj.getStringValue(\"email\");\n        } catch (Exception e) {\n            // APIs should never throw errors, as velocity cannot catch them, and scripts should be\n            // as robust as possible. Instead, the code using this should know that null means there\n            // was an error, if it really needs to report these exceptions.\n            return null;\n        }\n    }\n\n    /**\n     * Check if the password passed as argument is the user password. This method is used when a user wants to change\n     * its password. To make sure that it wouldn't be used to perform brute force attacks, we ensure that this is only\n     * used to check the current user password on its profile page.\n     *\n     * @param password Password submitted.\n     * @return true if password is really the user password.\n     * @throws XWikiException error if authorization denied.\n     */\n    public boolean checkPassword(String password) throws XWikiException\n    {\n        EntityReference userReference = REFERENCE_RESOLVER.resolve(this.user.getUser());\n        EntityReference docReference = getXWikiContext().getDoc().getDocumentReference();\n        if (userReference.equals(getXWikiContext().getUserReference()) && userReference.equals(docReference)) {\n            try {\n                boolean result = false;\n\n                XWikiDocument userDoc = getXWikiContext().getWiki().getDocument(userReference, getXWikiContext());\n                BaseObject obj = userDoc.getXObject(USERCLASS_REFERENCE);\n                // We only allow empty password from users having a XWikiUsers object.\n                if (obj != null) {\n                    final String stored = obj.getStringValue(\"password\");\n                    result = new PasswordClass().getEquivalentPassword(stored, password).equals(stored);\n                }\n\n                return result;\n            } catch (Throwable e) {\n                LOGGER.error(\"Failed to check password\", e);\n                return false;\n            }\n        } else {\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"You cannot use this method for checking another user password.\", null);\n        }\n    }\n\n}\n"], "fixing_code": ["/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage com.xpn.xwiki.api;\n\nimport java.text.MessageFormat;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.xwiki.model.EntityType;\nimport org.xwiki.model.reference.DocumentReferenceResolver;\nimport org.xwiki.model.reference.EntityReference;\n\nimport com.xpn.xwiki.XWikiContext;\nimport com.xpn.xwiki.XWikiException;\nimport com.xpn.xwiki.doc.XWikiDocument;\nimport com.xpn.xwiki.objects.BaseObject;\nimport com.xpn.xwiki.objects.classes.PasswordClass;\nimport com.xpn.xwiki.user.api.XWikiUser;\nimport com.xpn.xwiki.util.Programming;\nimport com.xpn.xwiki.web.Utils;\n\n/**\n * Scriptable API for easy handling of users. For the moment this API is very limited, containing only one method. In\n * the future it should be extended to provide useful methods for working with users.\n *\n * @version $Id$\n * @since 1.0\n */\npublic class User extends Api\n{\n    /** Logging helper object. */\n    protected static final Logger LOGGER = LoggerFactory.getLogger(User.class);\n\n    /** User class reference. */\n    private static final EntityReference USERCLASS_REFERENCE = new EntityReference(\"XWikiUsers\", EntityType.DOCUMENT,\n        new EntityReference(\"XWiki\", EntityType.SPACE));\n\n    /** Reference resolver. */\n    private static final DocumentReferenceResolver<String> REFERENCE_RESOLVER = Utils.getComponent(\n        DocumentReferenceResolver.TYPE_STRING, \"currentmixed\");\n\n    /** The wrapped XWikiUser object. */\n    private XWikiUser user;\n\n    /**\n     * Constructs a wrapper for the given protected XWikiUser object.\n     *\n     * @param user The XWikiUser object that should be wrapper.\n     * @param context The current {@link XWikiContext context}.\n     */\n    public User(XWikiUser user, XWikiContext context)\n    {\n        super(context);\n        this.user = user;\n    }\n\n    /**\n     * Expose the wrapped XWikiUser object. Requires programming rights.\n     *\n     * @return The wrapped XWikiUser object, or {@code null} if the user does not have programming rights.\n     */\n    @Programming\n    public XWikiUser getUser()\n    {\n        if (hasProgrammingRights()) {\n            return this.user;\n        }\n        return null;\n    }\n\n    /**\n     * Set the disabled status of a user.\n     * @param disabledStatus true to disable an user, false to enable it back.\n     * @since 11.7RC1\n     */\n    public void setDisabledStatus(boolean disabledStatus)\n    {\n        if (hasAdminRights()) {\n            this.user.setDisabled(disabledStatus, getXWikiContext());\n        }\n    }\n\n    /**\n     * @return {@code true} if the user is disabled, false if it is enabled.\n     * @since 11.8RC1\n     */\n    public boolean isDisabled()\n    {\n        return this.user.isDisabled(getXWikiContext());\n    }\n\n    /**\n     * Check if the user belongs to a group or not. This method only check direct membership (no recursive checking) in\n     * the current wiki.\n     *\n     * @param groupName The group to check.\n     * @return {@code true} if the user does belong to the specified group, false otherwise or if an exception occurs.\n     */\n    public boolean isUserInGroup(String groupName)\n    {\n        boolean result = false;\n        try {\n            if (this.user == null) {\n                LOGGER.warn(\"User considered not part of group [{}] since user is null\", groupName);\n            } else {\n                result = this.user.isUserInGroup(groupName, getXWikiContext());\n            }\n        } catch (Exception ex) {\n            LOGGER.warn(new MessageFormat(\"Unhandled exception while checking if user {0}\"\n                + \" belongs to group {1}\").format(new java.lang.Object[] { this.user, groupName }), ex);\n        }\n        return result;\n    }\n\n    /**\n     * <p>\n     * See if the user is global (i.e. registered in the main wiki) or local to a virtual wiki.\n     * </p>\n     * <p>\n     * This method is not public, as the underlying implementation is not fully functional\n     * </p>\n     *\n     * @return {@code true} if the user is global, false otherwise or if an exception occurs.\n     */\n    protected boolean isMain()\n    {\n        return this.user.isMain();\n    }\n\n    /**\n     * API to retrieve the e-mail address of this user. This e-mail address is taken from the user profile. If the user\n     * hasn't changed his profile, then this is the e-mail address he filled in the registration form.\n     *\n     * @return The e-mail address from the user profile, or {@code null} if there is an error retrieving the email.\n     * @since 1.1.3\n     * @since 1.2.2\n     * @since 1.3M2\n     */\n    public String getEmail()\n    {\n        XWikiDocument userDoc;\n        try {\n            userDoc = getXWikiContext().getWiki().getDocument(this.user.getUser(), getXWikiContext());\n            BaseObject obj = userDoc.getObject(\"XWiki.XWikiUsers\");\n            return obj.getStringValue(\"email\");\n        } catch (Exception e) {\n            // APIs should never throw errors, as velocity cannot catch them, and scripts should be\n            // as robust as possible. Instead, the code using this should know that null means there\n            // was an error, if it really needs to report these exceptions.\n            return null;\n        }\n    }\n\n    /**\n     * Check if the password passed as argument is the user password. This method is used when a user wants to change\n     * its password. To make sure that it wouldn't be used to perform brute force attacks, we ensure that this is only\n     * used to check the current user password on its profile page.\n     *\n     * @param password Password submitted.\n     * @return true if password is really the user password.\n     * @throws XWikiException error if authorization denied.\n     */\n    public boolean checkPassword(String password) throws XWikiException\n    {\n        EntityReference userReference = REFERENCE_RESOLVER.resolve(this.user.getUser());\n        EntityReference docReference = getXWikiContext().getDoc().getDocumentReference();\n        if (userReference.equals(getXWikiContext().getUserReference()) && userReference.equals(docReference)) {\n            try {\n                boolean result = false;\n\n                XWikiDocument userDoc = getXWikiContext().getWiki().getDocument(userReference, getXWikiContext());\n                BaseObject obj = userDoc.getXObject(USERCLASS_REFERENCE);\n                // We only allow empty password from users having a XWikiUsers object.\n                if (obj != null) {\n                    final String stored = obj.getStringValue(\"password\");\n                    result = new PasswordClass().getEquivalentPassword(stored, password).equals(stored);\n                }\n\n                return result;\n            } catch (Throwable e) {\n                LOGGER.error(\"Failed to check password\", e);\n                return false;\n            }\n        } else {\n            throw new XWikiException(XWikiException.MODULE_XWIKI_ACCESS, XWikiException.ERROR_XWIKI_ACCESS_DENIED,\n                \"You cannot use this method for checking another user password.\", null);\n        }\n    }\n\n}\n"], "filenames": ["xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/api/User.java"], "buggy_code_start_loc": [95], "buggy_code_end_loc": [96], "fixing_code_start_loc": [95], "fixing_code_end_loc": [98], "type": "CWE-862", "message": "org.xwiki.platform:xwiki-platform-oldcore is missing authorization in User#setDisabledStatus, which may allow an incorrectly authorized user with only Script rights to enable or disable a user. This operation is meant to only be available for users with admin rights. This problem has been patched in XWiki 13.10.7, 14.4.2 and 14.5RC1.", "other": {"cve": {"id": "CVE-2022-41929", "sourceIdentifier": "security-advisories@github.com", "published": "2022-11-23T19:15:12.717", "lastModified": "2022-11-30T16:48:03.483", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "org.xwiki.platform:xwiki-platform-oldcore is missing authorization in User#setDisabledStatus, which may allow an incorrectly authorized user with only Script rights to enable or disable a user. This operation is meant to only be available for users with admin rights. This problem has been patched in XWiki 13.10.7, 14.4.2 and 14.5RC1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 4.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 4.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.6}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartExcluding": "11.7", "versionEndExcluding": "13.10.7", "matchCriteriaId": "F896F48E-02B7-4864-852F-3F55628F76CB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:undefined", "versionStartExcluding": "14.0.0", "versionEndExcluding": "14.4.2", "matchCriteriaId": "FE0B06D1-6795-4344-A7E0-1551D9656E95"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:11.7:rc1:*:*:*:*:*:*", "matchCriteriaId": "FD1FFF2F-09E7-42B5-BD0D-A05BF1149229"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:14.4.3:*:*:*:*:*:*:*", "matchCriteriaId": "C9646DA8-7C5A-458E-975C-A67099D43047"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:14.4.4:*:*:*:*:*:*:*", "matchCriteriaId": "CDAB9E27-2E41-44EA-BBCB-8015B22272B7"}]}]}], "references": [{"url": "https://github.com/xwiki/xwiki-platform/commit/0b732f2ef0224e2aaf10e2e1ef48dbd3fb6e10cd", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-2gj2-vj98-j2qq", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-19804", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-platform/commit/0b732f2ef0224e2aaf10e2e1ef48dbd3fb6e10cd"}}