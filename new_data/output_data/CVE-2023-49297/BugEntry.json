{"buggy_code": ["from yaml import load\nfrom yaml import YAMLError\n\ntry:\n    from yaml import CLoader as Loader\nexcept ImportError:\n    from yaml import Loader\n\nSETTINGS_FILE = \"settings.yaml\"\nSETTINGS_STRUCT = {\n    \"client_config_backend\": {\n        \"type\": str,\n        \"required\": True,\n        \"default\": \"file\",\n        \"dependency\": [\n            {\"value\": \"file\", \"attribute\": [\"client_config_file\"]},\n            {\"value\": \"settings\", \"attribute\": [\"client_config\"]},\n            {\"value\": \"service\", \"attribute\": [\"service_config\"]},\n        ],\n    },\n    \"save_credentials\": {\n        \"type\": bool,\n        \"required\": True,\n        \"default\": False,\n        \"dependency\": [\n            {\"value\": True, \"attribute\": [\"save_credentials_backend\"]}\n        ],\n    },\n    \"get_refresh_token\": {\"type\": bool, \"required\": False, \"default\": False},\n    \"client_config_file\": {\n        \"type\": str,\n        \"required\": False,\n        \"default\": \"client_secrets.json\",\n    },\n    \"save_credentials_backend\": {\n        \"type\": str,\n        \"required\": False,\n        \"dependency\": [\n            {\"value\": \"file\", \"attribute\": [\"save_credentials_file\"]},\n            {\"value\": \"dictionary\", \"attribute\": [\"save_credentials_dict\"]},\n            {\"value\": \"dictionary\", \"attribute\": [\"save_credentials_key\"]},\n        ],\n    },\n    \"client_config\": {\n        \"type\": dict,\n        \"required\": False,\n        \"struct\": {\n            \"client_id\": {\"type\": str, \"required\": True},\n            \"client_secret\": {\"type\": str, \"required\": True},\n            \"auth_uri\": {\n                \"type\": str,\n                \"required\": True,\n                \"default\": \"https://accounts.google.com/o/oauth2/auth\",\n            },\n            \"token_uri\": {\n                \"type\": str,\n                \"required\": True,\n                \"default\": \"https://accounts.google.com/o/oauth2/token\",\n            },\n            \"redirect_uri\": {\n                \"type\": str,\n                \"required\": True,\n                \"default\": \"urn:ietf:wg:oauth:2.0:oob\",\n            },\n            \"revoke_uri\": {\"type\": str, \"required\": True, \"default\": None},\n        },\n    },\n    \"service_config\": {\n        \"type\": dict,\n        \"required\": False,\n        \"struct\": {\n            \"client_user_email\": {\n                \"type\": str,\n                \"required\": True,\n                \"default\": None,\n            },\n            \"client_service_email\": {\"type\": str, \"required\": False},\n            \"client_pkcs12_file_path\": {\"type\": str, \"required\": False},\n            \"client_json_file_path\": {\"type\": str, \"required\": False},\n            \"client_json_dict\": {\n                \"type\": dict,\n                \"required\": False,\n                \"struct\": {},\n            },\n            \"client_json\": {\"type\": str, \"required\": False},\n        },\n    },\n    \"oauth_scope\": {\n        \"type\": list,\n        \"required\": True,\n        \"struct\": str,\n        \"default\": [\"https://www.googleapis.com/auth/drive\"],\n    },\n    \"save_credentials_file\": {\"type\": str, \"required\": False},\n    \"save_credentials_dict\": {\"type\": dict, \"required\": False, \"struct\": {}},\n    \"save_credentials_key\": {\"type\": str, \"required\": False},\n}\n\n\nclass SettingsError(IOError):\n    \"\"\"Error while loading/saving settings\"\"\"\n\n\nclass InvalidConfigError(IOError):\n    \"\"\"Error trying to read client configuration.\"\"\"\n\n\ndef LoadSettingsFile(filename=SETTINGS_FILE):\n    \"\"\"Loads settings file in yaml format given file name.\n\n    :param filename: path for settings file. 'settings.yaml' by default.\n    :type filename: str.\n    :raises: SettingsError\n    \"\"\"\n    try:\n        with open(filename) as stream:\n            data = load(stream, Loader=Loader)\n    except (YAMLError, OSError) as e:\n        raise SettingsError(e)\n    return data\n\n\ndef ValidateSettings(data):\n    \"\"\"Validates if current settings is valid.\n\n    :param data: dictionary containing all settings.\n    :type data: dict.\n    :raises: InvalidConfigError\n    \"\"\"\n    _ValidateSettingsStruct(data, SETTINGS_STRUCT)\n\n\ndef _ValidateSettingsStruct(data, struct):\n    \"\"\"Validates if provided data fits provided structure.\n\n    :param data: dictionary containing settings.\n    :type data: dict.\n    :param struct: dictionary containing structure information of settings.\n    :type struct: dict.\n    :raises: InvalidConfigError\n    \"\"\"\n    # Validate required elements of the setting.\n    for key in struct:\n        if struct[key][\"required\"]:\n            _ValidateSettingsElement(data, struct, key)\n\n\ndef _ValidateSettingsElement(data, struct, key):\n    \"\"\"Validates if provided element of settings data fits provided structure.\n\n    :param data: dictionary containing settings.\n    :type data: dict.\n    :param struct: dictionary containing structure information of settings.\n    :type struct: dict.\n    :param key: key of the settings element to validate.\n    :type key: str.\n    :raises: InvalidConfigError\n    \"\"\"\n    # Check if data exists. If not, check if default value exists.\n    value = data.get(key)\n    data_type = struct[key][\"type\"]\n    if value is None:\n        try:\n            default = struct[key][\"default\"]\n        except KeyError:\n            raise InvalidConfigError(\"Missing required setting %s\" % key)\n        else:\n            data[key] = default\n    # If data exists, Check type of the data\n    elif not isinstance(value, data_type):\n        raise InvalidConfigError(f\"Setting {key} should be type {data_type}\")\n    # If type of this data is dict, check if structure of the data is valid.\n    if data_type is dict:\n        _ValidateSettingsStruct(data[key], struct[key][\"struct\"])\n    # If type of this data is list, check if all values in the list is valid.\n    elif data_type is list:\n        for element in data[key]:\n            if not isinstance(element, struct[key][\"struct\"]):\n                raise InvalidConfigError(\n                    \"Setting %s should be list of %s\"\n                    % (key, struct[key][\"struct\"])\n                )\n    # Check dependency of this attribute.\n    dependencies = struct[key].get(\"dependency\")\n    if dependencies:\n        for dependency in dependencies:\n            if value == dependency[\"value\"]:\n                for reqkey in dependency[\"attribute\"]:\n                    _ValidateSettingsElement(data, struct, reqkey)\n"], "fixing_code": ["from yaml import load\nfrom yaml import YAMLError\n\ntry:\n    from yaml import CSafeLoader as SafeLoader\nexcept ImportError:\n    from yaml import SafeLoader\n\nSETTINGS_FILE = \"settings.yaml\"\nSETTINGS_STRUCT = {\n    \"client_config_backend\": {\n        \"type\": str,\n        \"required\": True,\n        \"default\": \"file\",\n        \"dependency\": [\n            {\"value\": \"file\", \"attribute\": [\"client_config_file\"]},\n            {\"value\": \"settings\", \"attribute\": [\"client_config\"]},\n            {\"value\": \"service\", \"attribute\": [\"service_config\"]},\n        ],\n    },\n    \"save_credentials\": {\n        \"type\": bool,\n        \"required\": True,\n        \"default\": False,\n        \"dependency\": [\n            {\"value\": True, \"attribute\": [\"save_credentials_backend\"]}\n        ],\n    },\n    \"get_refresh_token\": {\"type\": bool, \"required\": False, \"default\": False},\n    \"client_config_file\": {\n        \"type\": str,\n        \"required\": False,\n        \"default\": \"client_secrets.json\",\n    },\n    \"save_credentials_backend\": {\n        \"type\": str,\n        \"required\": False,\n        \"dependency\": [\n            {\"value\": \"file\", \"attribute\": [\"save_credentials_file\"]},\n            {\"value\": \"dictionary\", \"attribute\": [\"save_credentials_dict\"]},\n            {\"value\": \"dictionary\", \"attribute\": [\"save_credentials_key\"]},\n        ],\n    },\n    \"client_config\": {\n        \"type\": dict,\n        \"required\": False,\n        \"struct\": {\n            \"client_id\": {\"type\": str, \"required\": True},\n            \"client_secret\": {\"type\": str, \"required\": True},\n            \"auth_uri\": {\n                \"type\": str,\n                \"required\": True,\n                \"default\": \"https://accounts.google.com/o/oauth2/auth\",\n            },\n            \"token_uri\": {\n                \"type\": str,\n                \"required\": True,\n                \"default\": \"https://accounts.google.com/o/oauth2/token\",\n            },\n            \"redirect_uri\": {\n                \"type\": str,\n                \"required\": True,\n                \"default\": \"urn:ietf:wg:oauth:2.0:oob\",\n            },\n            \"revoke_uri\": {\"type\": str, \"required\": True, \"default\": None},\n        },\n    },\n    \"service_config\": {\n        \"type\": dict,\n        \"required\": False,\n        \"struct\": {\n            \"client_user_email\": {\n                \"type\": str,\n                \"required\": True,\n                \"default\": None,\n            },\n            \"client_service_email\": {\"type\": str, \"required\": False},\n            \"client_pkcs12_file_path\": {\"type\": str, \"required\": False},\n            \"client_json_file_path\": {\"type\": str, \"required\": False},\n            \"client_json_dict\": {\n                \"type\": dict,\n                \"required\": False,\n                \"struct\": {},\n            },\n            \"client_json\": {\"type\": str, \"required\": False},\n        },\n    },\n    \"oauth_scope\": {\n        \"type\": list,\n        \"required\": True,\n        \"struct\": str,\n        \"default\": [\"https://www.googleapis.com/auth/drive\"],\n    },\n    \"save_credentials_file\": {\"type\": str, \"required\": False},\n    \"save_credentials_dict\": {\"type\": dict, \"required\": False, \"struct\": {}},\n    \"save_credentials_key\": {\"type\": str, \"required\": False},\n}\n\n\nclass SettingsError(IOError):\n    \"\"\"Error while loading/saving settings\"\"\"\n\n\nclass InvalidConfigError(IOError):\n    \"\"\"Error trying to read client configuration.\"\"\"\n\n\ndef LoadSettingsFile(filename=SETTINGS_FILE):\n    \"\"\"Loads settings file in yaml format given file name.\n\n    :param filename: path for settings file. 'settings.yaml' by default.\n    :type filename: str.\n    :raises: SettingsError\n    \"\"\"\n    try:\n        with open(filename) as stream:\n            data = load(stream, Loader=SafeLoader)\n    except (YAMLError, OSError) as e:\n        raise SettingsError(e)\n    return data\n\n\ndef ValidateSettings(data):\n    \"\"\"Validates if current settings is valid.\n\n    :param data: dictionary containing all settings.\n    :type data: dict.\n    :raises: InvalidConfigError\n    \"\"\"\n    _ValidateSettingsStruct(data, SETTINGS_STRUCT)\n\n\ndef _ValidateSettingsStruct(data, struct):\n    \"\"\"Validates if provided data fits provided structure.\n\n    :param data: dictionary containing settings.\n    :type data: dict.\n    :param struct: dictionary containing structure information of settings.\n    :type struct: dict.\n    :raises: InvalidConfigError\n    \"\"\"\n    # Validate required elements of the setting.\n    for key in struct:\n        if struct[key][\"required\"]:\n            _ValidateSettingsElement(data, struct, key)\n\n\ndef _ValidateSettingsElement(data, struct, key):\n    \"\"\"Validates if provided element of settings data fits provided structure.\n\n    :param data: dictionary containing settings.\n    :type data: dict.\n    :param struct: dictionary containing structure information of settings.\n    :type struct: dict.\n    :param key: key of the settings element to validate.\n    :type key: str.\n    :raises: InvalidConfigError\n    \"\"\"\n    # Check if data exists. If not, check if default value exists.\n    value = data.get(key)\n    data_type = struct[key][\"type\"]\n    if value is None:\n        try:\n            default = struct[key][\"default\"]\n        except KeyError:\n            raise InvalidConfigError(\"Missing required setting %s\" % key)\n        else:\n            data[key] = default\n    # If data exists, Check type of the data\n    elif not isinstance(value, data_type):\n        raise InvalidConfigError(f\"Setting {key} should be type {data_type}\")\n    # If type of this data is dict, check if structure of the data is valid.\n    if data_type is dict:\n        _ValidateSettingsStruct(data[key], struct[key][\"struct\"])\n    # If type of this data is list, check if all values in the list is valid.\n    elif data_type is list:\n        for element in data[key]:\n            if not isinstance(element, struct[key][\"struct\"]):\n                raise InvalidConfigError(\n                    \"Setting %s should be list of %s\"\n                    % (key, struct[key][\"struct\"])\n                )\n    # Check dependency of this attribute.\n    dependencies = struct[key].get(\"dependency\")\n    if dependencies:\n        for dependency in dependencies:\n            if value == dependency[\"value\"]:\n                for reqkey in dependency[\"attribute\"]:\n                    _ValidateSettingsElement(data, struct, reqkey)\n"], "filenames": ["pydrive2/settings.py"], "buggy_code_start_loc": [5], "buggy_code_end_loc": [118], "fixing_code_start_loc": [5], "fixing_code_end_loc": [118], "type": "CWE-502", "message": "PyDrive2 is a wrapper library of google-api-python-client that simplifies many common Google Drive API V2 tasks. Unsafe YAML deserilization will result in arbitrary code execution. A maliciously crafted YAML file can cause arbitrary code execution if PyDrive2 is run in the same directory as it, or if it is loaded in via `LoadSettingsFile`. This is a deserilization attack that will affect any user who initializes GoogleAuth from this package while a malicious yaml file is present in the same directory. This vulnerability does not require the file to be directly loaded through the code, only present. This issue has been addressed in commit `c57355dc` which is included in release version `1.16.2`. Users are advised to upgrade. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2023-49297", "sourceIdentifier": "security-advisories@github.com", "published": "2023-12-05T21:15:07.460", "lastModified": "2023-12-16T02:15:07.680", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "PyDrive2 is a wrapper library of google-api-python-client that simplifies many common Google Drive API V2 tasks. Unsafe YAML deserilization will result in arbitrary code execution. A maliciously crafted YAML file can cause arbitrary code execution if PyDrive2 is run in the same directory as it, or if it is loaded in via `LoadSettingsFile`. This is a deserilization attack that will affect any user who initializes GoogleAuth from this package while a malicious yaml file is present in the same directory. This vulnerability does not require the file to be directly loaded through the code, only present. This issue has been addressed in commit `c57355dc` which is included in release version `1.16.2`. Users are advised to upgrade. There are no known workarounds for this vulnerability."}, {"lang": "es", "value": "PyDrive2 es una librer\u00eda contenedora de google-api-python-client que simplifica muchas tareas comunes de la API V2 de Google Drive. La deserilizaci\u00f3n insegura de YAML dar\u00e1 como resultado la ejecuci\u00f3n de c\u00f3digo arbitrario. Un archivo YAML creado con fines malintencionados puede provocar la ejecuci\u00f3n de c\u00f3digo arbitrario si PyDrive2 se ejecuta en el mismo directorio que \u00e9l o si se carga a trav\u00e9s de `LoadSettingsFile`. Este es un ataque de deserilizaci\u00f3n que afectar\u00e1 a cualquier usuario que inicialice GoogleAuth desde este paquete mientras hay un archivo yaml malicioso presente en el mismo directorio. Esta vulnerabilidad no requiere que el archivo se cargue directamente a trav\u00e9s del c\u00f3digo, solo est\u00e1 presente. Este problema se solucion\u00f3 en el commit \"c57355dc\" que se incluye en la versi\u00f3n \"1.16.2\". Se recomienda a los usuarios que actualicen. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.3, "baseSeverity": "LOW"}, "exploitabilityScore": 1.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-502"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:iterative:pydrive2:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.16.2", "matchCriteriaId": "53E86B23-9C4F-4FB7-BE8F-49052254EBBC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:iterative:pydrive2:1.17.0:*:*:*:*:*:*:*", "matchCriteriaId": "DA838A52-5ADC-43BC-B0DC-41C95E7F18B2"}]}]}], "references": [{"url": "https://github.com/iterative/PyDrive2/commit/c57355dc2033ad90b7050d681b2c3ba548ff0004", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/iterative/PyDrive2/security/advisories/GHSA-v5f6-hjmf-9mc5", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/CYR5SJKOFSSXFV3E3D2SLXBUBA5WMJJG/", "source": "security-advisories@github.com"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/K34YWTDKBAYWZPOAKBYDM72WIFL5CAYW/", "source": "security-advisories@github.com"}]}, "github_commit_url": "https://github.com/iterative/PyDrive2/commit/c57355dc2033ad90b7050d681b2c3ba548ff0004"}}