{"buggy_code": ["/*\n * Copyright (c) 2014, salesforce.com, inc.\n * All rights reserved.\n * Redistribution and use of this software in source and binary forms, with or\n * without modification, are permitted provided that the following conditions\n * are met:\n * - Redistributions of source code must retain the above copyright notice, this\n * list of conditions and the following disclaimer.\n * - Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n * - Neither the name of salesforce.com, inc. nor the names of its contributors\n * may be used to endorse or promote products derived from this software without\n * specific prior written permission of salesforce.com, inc.\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nusing System;\n\nnamespace Salesforce.SDK.SmartStore.Store\n{\n    public class QuerySpec\n    {\n        public enum SmartQueryType\n        {\n            Smart,\n            Exact,\n            Range,\n            Like\n        };\n\n        public enum SqlOrder\n        {\n            ASC,\n            DESC\n        };\n\n        private const string SelectCount = \"SELECT count(*) \";\n        private const string Select = \"SELECT \";\n        private const string From = \"FROM \";\n        private const string Where = \"WHERE \";\n        private const string OrderBy = \"ORDER BY \";\n\n        public readonly string BeginKey;\n        public readonly string CountSmartSql;\n        public readonly string EndKey;\n        public readonly string LikeKey;\n        public readonly string MatchKey;\n        public readonly SqlOrder Order;\n        public readonly int PageSize;\n        public readonly string Path;\n        public readonly SmartQueryType QueryType;\n        public readonly string SmartSql;\n        public readonly string SoupName;\n\n        private QuerySpec(string soupName, string path, SmartQueryType queryType, string matchKey, string beginKey,\n            string endKey, string likeKey, SqlOrder order, int pageSize)\n        {\n            SoupName = soupName;\n            Path = path;\n            QueryType = queryType;\n            MatchKey = matchKey;\n            BeginKey = beginKey;\n            EndKey = endKey;\n            LikeKey = likeKey;\n            Order = order;\n            PageSize = pageSize;\n            SmartSql = ComputeSmartSql();\n            CountSmartSql = ComputeCountSql();\n        }\n\n        private QuerySpec(string smartSql, int pageSize)\n        {\n            QueryType = SmartQueryType.Smart;\n            SmartSql = smartSql;\n            CountSmartSql = ComputeCountSql(smartSql);\n            PageSize = pageSize;\n            SoupName = null;\n            Path = null;\n            MatchKey = null;\n            BeginKey = null;\n            EndKey = null;\n            LikeKey = null;\n        }\n\n        public static QuerySpec BuildAllQuerySpec(string soupName, string path, SqlOrder order, int pageSize)\n        {\n            return BuildRangeQuerySpec(soupName, path, null, null, order, pageSize);\n        }\n\n        public static QuerySpec BuildExactQuerySpec(string soupName, string path, string exactMatchKey, int pageSize)\n        {\n            return new QuerySpec(soupName, path, SmartQueryType.Exact, exactMatchKey, null, null, null, SqlOrder.ASC,\n                pageSize);\n        }\n\n        public static QuerySpec BuildRangeQuerySpec(string soupName, string path, string beginKey, string endKey,\n            SqlOrder order, int pageSize)\n        {\n            return new QuerySpec(soupName, path, SmartQueryType.Range, null, beginKey, endKey, null, order, pageSize);\n        }\n\n        public static QuerySpec BuildLikeQuerySpec(string soupName, string path, string likeKey, SqlOrder order,\n            int pageSize)\n        {\n            return new QuerySpec(soupName, path, SmartQueryType.Like, null, null, null, likeKey, order, pageSize);\n        }\n\n        public static QuerySpec BuildSmartQuerySpec(string smartSql, int pageSize)\n        {\n            return new QuerySpec(smartSql, pageSize);\n        }\n\n        private string ComputeSmartSql()\n        {\n            string selectClause = ComputeSelectClause();\n            string fromClause = ComputeFromClause();\n            string whereClause = ComputeWhereClause();\n            string orderClause = ComputeOrderClause();\n            return selectClause + fromClause + whereClause + orderClause;\n        }\n\n        /// <summary>\n        ///     Compute countSmartSql for exact/like/range queries\n        /// </summary>\n        /// <returns></returns>\n        private String ComputeCountSql()\n        {\n            string fromClause = ComputeFromClause();\n            string whereClause = ComputeWhereClause();\n            return SelectCount + fromClause + whereClause;\n        }\n\n        /// <summary>\n        ///     Compute countSmartSql for smart queries\n        /// </summary>\n        /// <param name=\"smartSql\"></param>\n        /// <returns></returns>\n        private string ComputeCountSql(string smartSql)\n        {\n            int fromLocation = smartSql.ToLower().IndexOf(\" from \", StringComparison.CurrentCultureIgnoreCase);\n            return SelectCount + smartSql.Substring(fromLocation);\n        }\n\n        /// <summary>\n        /// </summary>\n        /// <returns>select clause for exact/like/range queries</returns>\n        private string ComputeSelectClause()\n        {\n            return Select + ComputeFieldReference(SmartStore.Soup) + \" \";\n        }\n\n        /// <summary>\n        /// </summary>\n        /// <returns>from clause for exact/like/range queries</returns>\n        private string ComputeFromClause()\n        {\n            return From + ComputeSoupReference() + \" \";\n        }\n\n        /// <summary>\n        /// </summary>\n        /// <returns>where clause for exact/like/range queries</returns>\n        private string ComputeWhereClause()\n        {\n            if (Path == null) return \"\";\n\n            string field = ComputeFieldReference(Path);\n            string pred = \"\";\n            switch (QueryType)\n            {\n                case SmartQueryType.Exact:\n                    pred = field + \" = ? \";\n                    break;\n                case SmartQueryType.Like:\n                    pred = field + \" LIKE ? \";\n                    break;\n                case SmartQueryType.Range:\n                    if (BeginKey == null && EndKey == null)\n                    {\n                        break;\n                    }\n                    if (EndKey == null)\n                    {\n                        pred = field + \" >= ? \";\n                        break;\n                    }\n                    if (BeginKey == null)\n                    {\n                        pred = field + \" <= ? \";\n                        break;\n                    }\n                    pred = field + \" >= ?  AND \" + field + \" <= ? \";\n                    break;\n                default:\n                    throw new SmartStoreException(\"Fell through switch: \" + QueryType);\n            }\n            return (pred.Equals(\"\") ? \"\" : Where + pred);\n        }\n\n        /// <summary>\n        /// </summary>\n        /// <returns>order clause for exact/like/range queries</returns>\n        private String ComputeOrderClause()\n        {\n            if (Path == null) return \"\";\n\n            return OrderBy + ComputeFieldReference(Path) + \" \" + Order + \" \";\n        }\n\n        /// <summary>\n        /// </summary>\n        /// <returns>soup reference for smart sql query</returns>\n        private String ComputeSoupReference()\n        {\n            return \"{\" + SoupName + \"}\";\n        }\n\n\n        /// <summary>\n        /// </summary>\n        /// <param name=\"field\"></param>\n        /// <returns>field reference for smart sql query</returns>\n        private String ComputeFieldReference(String field)\n        {\n            return \"{\" + SoupName + \":\" + field + \"}\";\n        }\n\n        /// <summary>\n        /// </summary>\n        /// <returns>args going with the sql predicate returned by getKeyPredicate</returns>\n        public String[] getArgs()\n        {\n            switch (QueryType)\n            {\n                case SmartQueryType.Exact:\n                    return new[] {MatchKey};\n                case SmartQueryType.Like:\n                    return new[] {LikeKey};\n                case SmartQueryType.Range:\n                    if (BeginKey == null && EndKey == null)\n                        return null;\n                    if (EndKey == null)\n                        return new[] {BeginKey};\n                    if (BeginKey == null)\n                        return new[] {EndKey};\n                    return new[] {BeginKey, EndKey};\n                case SmartQueryType.Smart:\n                    return null;\n                default:\n                    throw new SmartStoreException(\"Fell through switch: \" + QueryType);\n            }\n        }\n    }\n}"], "fixing_code": ["/*\n * Copyright (c) 2014, salesforce.com, inc.\n * All rights reserved.\n * Redistribution and use of this software in source and binary forms, with or\n * without modification, are permitted provided that the following conditions\n * are met:\n * - Redistributions of source code must retain the above copyright notice, this\n * list of conditions and the following disclaimer.\n * - Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n * - Neither the name of salesforce.com, inc. nor the names of its contributors\n * may be used to endorse or promote products derived from this software without\n * specific prior written permission of salesforce.com, inc.\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nusing System;\n\nnamespace Salesforce.SDK.SmartStore.Store\n{\n    public class QuerySpec\n    {\n        public enum SmartQueryType\n        {\n            Smart,\n            Exact,\n            Range,\n            Like\n        };\n\n        public enum SqlOrder\n        {\n            ASC,\n            DESC\n        };\n\n        private const string Select = \"SELECT \";\n        private const string From = \"FROM \";\n        private const string Where = \"WHERE \";\n        private const string OrderBy = \"ORDER BY \";\n\n        private const string SelectCount = \"SELECT count(*) \";\n        private const string SelectCountFrom = SelectCount + \"FROM ({0})\";\n\n\n        public readonly string BeginKey;\n        public readonly string CountSmartSql;\n        public readonly string EndKey;\n        public readonly string LikeKey;\n        public readonly string MatchKey;\n        public readonly SqlOrder Order;\n        public readonly int PageSize;\n        public readonly string Path;\n        public readonly SmartQueryType QueryType;\n        public readonly string SmartSql;\n        public readonly string SoupName;\n\n        private QuerySpec(string soupName, string path, SmartQueryType queryType, string matchKey, string beginKey,\n            string endKey, string likeKey, SqlOrder order, int pageSize)\n        {\n            SoupName = soupName;\n            Path = path;\n            QueryType = queryType;\n            MatchKey = matchKey;\n            BeginKey = beginKey;\n            EndKey = endKey;\n            LikeKey = likeKey;\n            Order = order;\n            PageSize = pageSize;\n            SmartSql = ComputeSmartSql();\n            CountSmartSql = ComputeCountSql();\n        }\n\n        private QuerySpec(string smartSql, int pageSize)\n        {\n            QueryType = SmartQueryType.Smart;\n            SmartSql = smartSql;\n            CountSmartSql = ComputeCountSql(smartSql);\n            PageSize = pageSize;\n            SoupName = null;\n            Path = null;\n            MatchKey = null;\n            BeginKey = null;\n            EndKey = null;\n            LikeKey = null;\n        }\n\n        public static QuerySpec BuildAllQuerySpec(string soupName, string path, SqlOrder order, int pageSize)\n        {\n            return BuildRangeQuerySpec(soupName, path, null, null, order, pageSize);\n        }\n\n        public static QuerySpec BuildExactQuerySpec(string soupName, string path, string exactMatchKey, int pageSize)\n        {\n            return new QuerySpec(soupName, path, SmartQueryType.Exact, exactMatchKey, null, null, null, SqlOrder.ASC,\n                pageSize);\n        }\n\n        public static QuerySpec BuildRangeQuerySpec(string soupName, string path, string beginKey, string endKey,\n            SqlOrder order, int pageSize)\n        {\n            return new QuerySpec(soupName, path, SmartQueryType.Range, null, beginKey, endKey, null, order, pageSize);\n        }\n\n        public static QuerySpec BuildLikeQuerySpec(string soupName, string path, string likeKey, SqlOrder order,\n            int pageSize)\n        {\n            return new QuerySpec(soupName, path, SmartQueryType.Like, null, null, null, likeKey, order, pageSize);\n        }\n\n        public static QuerySpec BuildSmartQuerySpec(string smartSql, int pageSize)\n        {\n            return new QuerySpec(smartSql, pageSize);\n        }\n\n        private string ComputeSmartSql()\n        {\n            string selectClause = ComputeSelectClause();\n            string fromClause = ComputeFromClause();\n            string whereClause = ComputeWhereClause();\n            string orderClause = ComputeOrderClause();\n            return selectClause + fromClause + whereClause + orderClause;\n        }\n\n        /// <summary>\n        ///     Compute countSmartSql for exact/like/range queries\n        /// </summary>\n        /// <returns></returns>\n        private String ComputeCountSql()\n        {\n            string fromClause = ComputeFromClause();\n            string whereClause = ComputeWhereClause();\n            return SelectCount + fromClause + whereClause;\n        }\n\n        /// <summary>\n        ///     Compute countSmartSql for smart queries\n        /// </summary>\n        /// <param name=\"smartSql\"></param>\n        /// <returns></returns>\n        private string ComputeCountSql(string smartSql)\n        {\n            return string.Format(SelectCountFrom, smartSql);\n        }\n\n        /// <summary>\n        /// </summary>\n        /// <returns>select clause for exact/like/range queries</returns>\n        private string ComputeSelectClause()\n        {\n            return Select + ComputeFieldReference(SmartStore.Soup) + \" \";\n        }\n\n        /// <summary>\n        /// </summary>\n        /// <returns>from clause for exact/like/range queries</returns>\n        private string ComputeFromClause()\n        {\n            return From + ComputeSoupReference() + \" \";\n        }\n\n        /// <summary>\n        /// </summary>\n        /// <returns>where clause for exact/like/range queries</returns>\n        private string ComputeWhereClause()\n        {\n            if (Path == null) return \"\";\n\n            string field = ComputeFieldReference(Path);\n            string pred = \"\";\n            switch (QueryType)\n            {\n                case SmartQueryType.Exact:\n                    pred = field + \" = ? \";\n                    break;\n                case SmartQueryType.Like:\n                    pred = field + \" LIKE ? \";\n                    break;\n                case SmartQueryType.Range:\n                    if (BeginKey == null && EndKey == null)\n                    {\n                        break;\n                    }\n                    if (EndKey == null)\n                    {\n                        pred = field + \" >= ? \";\n                        break;\n                    }\n                    if (BeginKey == null)\n                    {\n                        pred = field + \" <= ? \";\n                        break;\n                    }\n                    pred = field + \" >= ?  AND \" + field + \" <= ? \";\n                    break;\n                default:\n                    throw new SmartStoreException(\"Fell through switch: \" + QueryType);\n            }\n            return (pred.Equals(\"\") ? \"\" : Where + pred);\n        }\n\n        /// <summary>\n        /// </summary>\n        /// <returns>order clause for exact/like/range queries</returns>\n        private String ComputeOrderClause()\n        {\n            if (Path == null) return \"\";\n\n            return OrderBy + ComputeFieldReference(Path) + \" \" + Order + \" \";\n        }\n\n        /// <summary>\n        /// </summary>\n        /// <returns>soup reference for smart sql query</returns>\n        private String ComputeSoupReference()\n        {\n            return \"{\" + SoupName + \"}\";\n        }\n\n\n        /// <summary>\n        /// </summary>\n        /// <param name=\"field\"></param>\n        /// <returns>field reference for smart sql query</returns>\n        private String ComputeFieldReference(String field)\n        {\n            return \"{\" + SoupName + \":\" + field + \"}\";\n        }\n\n        /// <summary>\n        /// </summary>\n        /// <returns>args going with the sql predicate returned by getKeyPredicate</returns>\n        public String[] getArgs()\n        {\n            switch (QueryType)\n            {\n                case SmartQueryType.Exact:\n                    return new[] {MatchKey};\n                case SmartQueryType.Like:\n                    return new[] {LikeKey};\n                case SmartQueryType.Range:\n                    if (BeginKey == null && EndKey == null)\n                        return null;\n                    if (EndKey == null)\n                        return new[] {BeginKey};\n                    if (BeginKey == null)\n                        return new[] {EndKey};\n                    return new[] {BeginKey, EndKey};\n                case SmartQueryType.Smart:\n                    return null;\n                default:\n                    throw new SmartStoreException(\"Fell through switch: \" + QueryType);\n            }\n        }\n    }\n}"], "filenames": ["SalesforceSDK/SmartStore/Store/QuerySpec.cs"], "buggy_code_start_loc": [48], "buggy_code_end_loc": [153], "fixing_code_start_loc": [47], "fixing_code_end_loc": [155], "type": "CWE-89", "message": "** UNSUPPPORTED WHEN ASSIGNED **** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in forcedotcom SalesforceMobileSDK-Windows up to 4.x. It has been rated as critical. This issue affects the function ComputeCountSql of the file SalesforceSDK/SmartStore/Store/QuerySpec.cs. The manipulation leads to sql injection. Upgrading to version 5.0.0 is able to address this issue. The name of the patch is 83b3e91e0c1e84873a6d3ca3c5887eb5b4f5a3d8. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-217619. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.", "other": {"cve": {"id": "CVE-2016-15012", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-07T13:15:09.530", "lastModified": "2023-01-12T19:00:37.500", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "** UNSUPPPORTED WHEN ASSIGNED **** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in forcedotcom SalesforceMobileSDK-Windows up to 4.x. It has been rated as critical. This issue affects the function ComputeCountSql of the file SalesforceSDK/SmartStore/Store/QuerySpec.cs. The manipulation leads to sql injection. Upgrading to version 5.0.0 is able to address this issue. The name of the patch is 83b3e91e0c1e84873a6d3ca3c5887eb5b4f5a3d8. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-217619. NOTE: This vulnerability only affects products that are no longer supported by the maintainer."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:salesforce:mobile_software_development_kit:*:*:*:*:*:windows:*:*", "versionEndExcluding": "5.0.0", "matchCriteriaId": "8E100174-3CB8-4DC3-8592-458066A3927C"}]}]}], "references": [{"url": "https://github.com/forcedotcom/SalesforceMobileSDK-Windows/commit/83b3e91e0c1e84873a6d3ca3c5887eb5b4f5a3d8", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/forcedotcom/SalesforceMobileSDK-Windows/releases/tag/v5.0.0", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217619", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217619", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/forcedotcom/SalesforceMobileSDK-Windows/commit/83b3e91e0c1e84873a6d3ca3c5887eb5b4f5a3d8"}}