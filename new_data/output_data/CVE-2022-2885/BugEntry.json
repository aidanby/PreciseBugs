{"buggy_code": ["<?php\n\nreturn [\n\t'appVersion' => '6.3.427',\n\t'patchVersion' => '2022.08.12',\n\t'lib_roundcube' => '0.3.0',\n];\n", "<?php\n/* +***********************************************************************************\n * The contents of this file are subject to the vtiger CRM Public License Version 1.0\n * (\"License\"); You may not use this file except in compliance with the License\n * The Original Code is:  vtiger CRM Open Source\n * The Initial Developer of the Original Code is vtiger.\n * Portions created by vtiger are Copyright (C) vtiger.\n * All Rights Reserved.\n * *********************************************************************************** */\n\n// for rss caching\nFeed::$cacheDir = 'cache/rss_cache';\n\nclass Rss_Record_Model extends Vtiger_Record_Model\n{\n\t/**\n\t * Function to get the id of the Record.\n\t *\n\t * @return int - Report Id\n\t */\n\tpublic function getId()\n\t{\n\t\treturn $this->get('rssid');\n\t}\n\n\t/**\n\t * Function to set the id of the Record.\n\t *\n\t * @param int $value - id value\n\t *\n\t * @return Rss_Record_Model - current instance\n\t */\n\tpublic function setId($value)\n\t{\n\t\treturn $this->set('rssid', $value);\n\t}\n\n\t/**\n\t * Function to get the Name of the record.\n\t *\n\t * @return string - Entity Name of the record\n\t */\n\tpublic function getName(): string\n\t{\n\t\treturn \\App\\Purifier::encodeHtml($this->get('rsstitle'));\n\t}\n\n\t/**\n\t * Function to get Rss fetched object.\n\t *\n\t * @return <object> - Rss Object\n\t */\n\tpublic function getRssObject()\n\t{\n\t\treturn $this->get('rss');\n\t}\n\n\t/**\n\t * Function to set Rss Object.\n\t *\n\t * @param <object> $rss - rss fetched object\n\t */\n\tpublic function setRssObject($rss)\n\t{\n\t\treturn $this->set('rss', $rss->item);\n\t}\n\n\t/**\n\t * Function to set Rss values.\n\t *\n\t * @param <object> $rss - Rss fetched object\n\t */\n\tpublic function setRssValues($rss)\n\t{\n\t\t$this->set('rsstitle', \\App\\Purifier::purifyByType((string) $rss->title, 'Text'));\n\t\t$this->set('url', $rss->link);\n\t}\n\n\t/**\n\t * Function to save the record.\n\t *\n\t * @param string $url\n\t */\n\tpublic function saveRecord($url)\n\t{\n\t\t$title = $this->getName();\n\t\tif ('' === $title) {\n\t\t\t$title = $url;\n\t\t}\n\t\t$db = \\App\\Db::getInstance();\n\t\t$insert = $db->createCommand()->insert('vtiger_rss', ['rssurl' => $url, 'rsstitle' => $title])->execute();\n\n\t\tif ($insert) {\n\t\t\t$id = $db->getLastInsertID('vtiger_rss_rssid_seq');\n\t\t\t$this->setId($id);\n\n\t\t\treturn $id;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Function to delete a record.\n\t */\n\tpublic function delete()\n\t{\n\t\t\\App\\Db::getInstance()->createCommand()->delete('vtiger_rss', ['rssid' => $this->getId()])->execute();\n\t}\n\n\t/**\n\t * Function to make a record default for an rss record.\n\t */\n\tpublic function makeDefault()\n\t{\n\t\t$recordId = $this->getId();\n\t\t$dbCommand = \\App\\Db::getInstance()->createCommand();\n\t\t$dbCommand->update('vtiger_rss', ['starred' => 0])->execute();\n\t\t$dbCommand->update('vtiger_rss', ['starred' => 1], ['rssid' => $recordId])->execute();\n\t}\n\n\t/**\n\t * Function to get record instance by using id and moduleName.\n\t *\n\t * @param int    $recordId\n\t * @param string $qualifiedModuleName\n\t *\n\t * @return Rss_Record_Model RecordModel\n\t */\n\tpublic static function getInstanceById($recordId, $qualifiedModuleName = null)\n\t{\n\t\t$rowData = (new \\App\\Db\\Query())->from('vtiger_rss')->where(['rssid' => $recordId])->one();\n\n\t\tif ($rowData) {\n\t\t\t$recordModel = new self();\n\t\t\t$recordModel->setData($rowData);\n\t\t\t$recordModel->setModule($qualifiedModuleName);\n\t\t\t$rss = Feed::loadRss($recordModel->get('rssurl'));\n\t\t\t$recordModel->setSenderInfo($rss->item);\n\t\t\t$recordModel->setRssValues($rss);\n\t\t\t$recordModel->setRssObject($rss);\n\n\t\t\treturn $recordModel;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Function to set the sender address to the record.\n\t *\n\t * @param array $rssItems\n\t *\n\t * @return array $items\n\t */\n\tpublic function setSenderInfo(&$rssItems)\n\t{\n\t\tforeach ($rssItems as $item) {\n\t\t\t$item->sender = $this->getName();\n\t\t}\n\t}\n\n\t/**\n\t * Function to get clean record instance by using moduleName.\n\t *\n\t * @param string $qualifiedModuleName\n\t *\n\t * @return Rss_Record_Model\n\t */\n\tpublic static function getCleanInstance($qualifiedModuleName)\n\t{\n\t\t$recordModel = new self();\n\n\t\treturn $recordModel->setModule($qualifiedModuleName);\n\t}\n\n\t/**\n\t * Function to validate the rss url.\n\t *\n\t * @param string $url\n\t *\n\t * @return bool\n\t */\n\tpublic function validateRssUrl($url)\n\t{\n\t\ttry {\n\t\t\t$rss = Feed::loadRss($url);\n\t\t\tif ($rss) {\n\t\t\t\t$this->setRssValues($rss);\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (FeedException $ex) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Function to get the default rss.\n\t */\n\tpublic function getDefaultRss()\n\t{\n\t\t$recordId = (new \\App\\Db\\Query())->select(['rssid'])->from('vtiger_rss')->where(['starred' => 1])->scalar();\n\t\tif ($recordId) {\n\t\t\t$this->setId($recordId);\n\t\t} else {\n\t\t\t$recordId = (new \\App\\Db\\Query())->select(['rssid'])->from('vtiger_rss')->scalar();\n\t\t\t$this->setId($recordId);\n\t\t}\n\t}\n}\n"], "fixing_code": ["<?php\n\nreturn [\n\t'appVersion' => '6.3.428',\n\t'patchVersion' => '2022.08.13',\n\t'lib_roundcube' => '0.3.0',\n];\n", "<?php\n/* +***********************************************************************************\n * The contents of this file are subject to the vtiger CRM Public License Version 1.0\n * (\"License\"); You may not use this file except in compliance with the License\n * The Original Code is:  vtiger CRM Open Source\n * The Initial Developer of the Original Code is vtiger.\n * Portions created by vtiger are Copyright (C) vtiger.\n * All Rights Reserved.\n * *********************************************************************************** */\n\n// for rss caching\nFeed::$cacheDir = 'cache/rss_cache';\n\nclass Rss_Record_Model extends Vtiger_Record_Model\n{\n\t/**\n\t * Function to get the id of the Record.\n\t *\n\t * @return int - Report Id\n\t */\n\tpublic function getId()\n\t{\n\t\treturn $this->get('rssid');\n\t}\n\n\t/**\n\t * Function to set the id of the Record.\n\t *\n\t * @param int $value - id value\n\t *\n\t * @return Rss_Record_Model - current instance\n\t */\n\tpublic function setId($value)\n\t{\n\t\treturn $this->set('rssid', $value);\n\t}\n\n\t/**\n\t * Function to get the Name of the record.\n\t *\n\t * @return string - Entity Name of the record\n\t */\n\tpublic function getName(): string\n\t{\n\t\treturn \\App\\Purifier::encodeHtml($this->get('rsstitle'));\n\t}\n\n\t/**\n\t * Function to get Rss fetched object.\n\t *\n\t * @return <object> - Rss Object\n\t */\n\tpublic function getRssObject()\n\t{\n\t\treturn $this->get('rss');\n\t}\n\n\t/**\n\t * Function to set Rss Object.\n\t *\n\t * @param <object> $rss - rss fetched object\n\t */\n\tpublic function setRssObject($rss)\n\t{\n\t\treturn $this->set('rss', $rss->item);\n\t}\n\n\t/**\n\t * Function to set Rss values.\n\t *\n\t * @param <object> $rss - Rss fetched object\n\t */\n\tpublic function setRssValues($rss)\n\t{\n\t\t$this->set('rsstitle', \\App\\Purifier::purifyByType((string) $rss->title, 'Text'));\n\t\t$this->set('url', \\App\\Purifier::purifyByType((string) $rss->link, 'Text'));\n\t}\n\n\t/**\n\t * Function to save the record.\n\t *\n\t * @param string $url\n\t */\n\tpublic function saveRecord($url)\n\t{\n\t\t$title = $this->getName();\n\t\tif ('' === $title) {\n\t\t\t$title = $url;\n\t\t}\n\t\t$db = \\App\\Db::getInstance();\n\t\t$insert = $db->createCommand()->insert('vtiger_rss', ['rssurl' => $url, 'rsstitle' => $title])->execute();\n\n\t\tif ($insert) {\n\t\t\t$id = $db->getLastInsertID('vtiger_rss_rssid_seq');\n\t\t\t$this->setId($id);\n\n\t\t\treturn $id;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Function to delete a record.\n\t */\n\tpublic function delete()\n\t{\n\t\t\\App\\Db::getInstance()->createCommand()->delete('vtiger_rss', ['rssid' => $this->getId()])->execute();\n\t}\n\n\t/**\n\t * Function to make a record default for an rss record.\n\t */\n\tpublic function makeDefault()\n\t{\n\t\t$recordId = $this->getId();\n\t\t$dbCommand = \\App\\Db::getInstance()->createCommand();\n\t\t$dbCommand->update('vtiger_rss', ['starred' => 0])->execute();\n\t\t$dbCommand->update('vtiger_rss', ['starred' => 1], ['rssid' => $recordId])->execute();\n\t}\n\n\t/**\n\t * Function to get record instance by using id and moduleName.\n\t *\n\t * @param int    $recordId\n\t * @param string $qualifiedModuleName\n\t *\n\t * @return Rss_Record_Model RecordModel\n\t */\n\tpublic static function getInstanceById($recordId, $qualifiedModuleName = null)\n\t{\n\t\t$rowData = (new \\App\\Db\\Query())->from('vtiger_rss')->where(['rssid' => $recordId])->one();\n\n\t\tif ($rowData) {\n\t\t\t$recordModel = new self();\n\t\t\t$recordModel->setData($rowData);\n\t\t\t$recordModel->setModule($qualifiedModuleName);\n\t\t\t$rss = Feed::loadRss($recordModel->get('rssurl'));\n\t\t\t$recordModel->setSenderInfo($rss->item);\n\t\t\t$recordModel->setRssValues($rss);\n\t\t\t$recordModel->setRssObject($rss);\n\n\t\t\treturn $recordModel;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Function to set the sender address to the record.\n\t *\n\t * @param array $rssItems\n\t *\n\t * @return array $items\n\t */\n\tpublic function setSenderInfo(&$rssItems)\n\t{\n\t\tforeach ($rssItems as $item) {\n\t\t\t$item->sender = $this->getName();\n\t\t}\n\t}\n\n\t/**\n\t * Function to get clean record instance by using moduleName.\n\t *\n\t * @param string $qualifiedModuleName\n\t *\n\t * @return Rss_Record_Model\n\t */\n\tpublic static function getCleanInstance($qualifiedModuleName)\n\t{\n\t\t$recordModel = new self();\n\n\t\treturn $recordModel->setModule($qualifiedModuleName);\n\t}\n\n\t/**\n\t * Function to validate the rss url.\n\t *\n\t * @param string $url\n\t *\n\t * @return bool\n\t */\n\tpublic function validateRssUrl($url)\n\t{\n\t\ttry {\n\t\t\t$rss = Feed::loadRss($url);\n\t\t\tif ($rss) {\n\t\t\t\t$this->setRssValues($rss);\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (FeedException $ex) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Function to get the default rss.\n\t */\n\tpublic function getDefaultRss()\n\t{\n\t\t$recordId = (new \\App\\Db\\Query())->select(['rssid'])->from('vtiger_rss')->where(['starred' => 1])->scalar();\n\t\tif ($recordId) {\n\t\t\t$this->setId($recordId);\n\t\t} else {\n\t\t\t$recordId = (new \\App\\Db\\Query())->select(['rssid'])->from('vtiger_rss')->scalar();\n\t\t\t$this->setId($recordId);\n\t\t}\n\t}\n}\n"], "filenames": ["config/version.php", "modules/Rss/models/Record.php"], "buggy_code_start_loc": [4, 76], "buggy_code_end_loc": [6, 77], "fixing_code_start_loc": [4, 76], "fixing_code_end_loc": [6, 77], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository yetiforcecompany/yetiforcecrm prior to 6.4.0.", "other": {"cve": {"id": "CVE-2022-2885", "sourceIdentifier": "security@huntr.dev", "published": "2022-08-21T08:15:19.733", "lastModified": "2022-08-23T16:10:57.843", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository yetiforcecompany/yetiforcecrm prior to 6.4.0."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Almacenado en el repositorio GitHub yetiforcecompany/yetiforcecrm versiones anteriores a 6.4.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:H/PR:H/UI:N/S:C/C:H/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.8, "impactScore": 5.3}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:yetiforce:yetiforce_customer_relationship_management:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.4.0", "matchCriteriaId": "73B90905-4F4C-4C18-809E-376665A41EAD"}]}]}], "references": [{"url": "https://github.com/yetiforcecompany/yetiforcecrm/commit/a9ad9ee089b575855b9e5e202b4990a15811e8d2", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/edeed309-be07-4373-b15e-2d1eb415eb89", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/yetiforcecompany/yetiforcecrm/commit/a9ad9ee089b575855b9e5e202b4990a15811e8d2"}}