{"buggy_code": ["<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Security\\Core\\Tests\\Validator\\Constraints;\n\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface;\nuse Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactoryInterface;\nuse Symfony\\Component\\Security\\Core\\Encoder\\PasswordEncoderInterface;\nuse Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPassword;\nuse Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator;\nuse Symfony\\Component\\Validator\\Tests\\Constraints\\AbstractConstraintValidatorTest;\n\n/**\n * @author Bernhard Schussek <bschussek@gmail.com>\n */\nabstract class UserPasswordValidatorTest extends AbstractConstraintValidatorTest\n{\n    const PASSWORD = 's3Cr3t';\n\n    const SALT = '^S4lt$';\n\n    /**\n     * @var TokenStorageInterface\n     */\n    protected $tokenStorage;\n\n    /**\n     * @var PasswordEncoderInterface\n     */\n    protected $encoder;\n\n    /**\n     * @var EncoderFactoryInterface\n     */\n    protected $encoderFactory;\n\n    protected function createValidator()\n    {\n        return new UserPasswordValidator($this->tokenStorage, $this->encoderFactory);\n    }\n\n    protected function setUp()\n    {\n        $user = $this->createUser();\n        $this->tokenStorage = $this->createTokenStorage($user);\n        $this->encoder = $this->createPasswordEncoder();\n        $this->encoderFactory = $this->createEncoderFactory($this->encoder);\n\n        parent::setUp();\n    }\n\n    public function testPasswordIsValid()\n    {\n        $constraint = new UserPassword(array(\n            'message' => 'myMessage',\n        ));\n\n        $this->encoder->expects($this->once())\n            ->method('isPasswordValid')\n            ->with(static::PASSWORD, 'secret', static::SALT)\n            ->will($this->returnValue(true));\n\n        $this->validator->validate('secret', $constraint);\n\n        $this->assertNoViolation();\n    }\n\n    public function testPasswordIsNotValid()\n    {\n        $constraint = new UserPassword(array(\n            'message' => 'myMessage',\n        ));\n\n        $this->encoder->expects($this->once())\n            ->method('isPasswordValid')\n            ->with(static::PASSWORD, 'secret', static::SALT)\n            ->will($this->returnValue(false));\n\n        $this->validator->validate('secret', $constraint);\n\n        $this->buildViolation('myMessage')\n            ->assertRaised();\n    }\n\n    /**\n     * @expectedException \\Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException\n     */\n    public function testUserIsNotValid()\n    {\n        $user = $this->getMockBuilder('Foo\\Bar\\User')->getMock();\n\n        $this->tokenStorage = $this->createTokenStorage($user);\n        $this->validator = $this->createValidator();\n        $this->validator->initialize($this->context);\n\n        $this->validator->validate('secret', new UserPassword());\n    }\n\n    protected function createUser()\n    {\n        $mock = $this->getMockBuilder('Symfony\\Component\\Security\\Core\\User\\UserInterface')->getMock();\n\n        $mock\n            ->expects($this->any())\n            ->method('getPassword')\n            ->will($this->returnValue(static::PASSWORD))\n        ;\n\n        $mock\n            ->expects($this->any())\n            ->method('getSalt')\n            ->will($this->returnValue(static::SALT))\n        ;\n\n        return $mock;\n    }\n\n    protected function createPasswordEncoder($isPasswordValid = true)\n    {\n        return $this->getMockBuilder('Symfony\\Component\\Security\\Core\\Encoder\\PasswordEncoderInterface')->getMock();\n    }\n\n    protected function createEncoderFactory($encoder = null)\n    {\n        $mock = $this->getMockBuilder('Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactoryInterface')->getMock();\n\n        $mock\n            ->expects($this->any())\n            ->method('getEncoder')\n            ->will($this->returnValue($encoder))\n        ;\n\n        return $mock;\n    }\n\n    protected function createTokenStorage($user = null)\n    {\n        $token = $this->createAuthenticationToken($user);\n\n        $mock = $this->getMockBuilder('Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface')->getMock();\n        $mock\n            ->expects($this->any())\n            ->method('getToken')\n            ->will($this->returnValue($token))\n        ;\n\n        return $mock;\n    }\n\n    protected function createAuthenticationToken($user = null)\n    {\n        $mock = $this->getMockBuilder('Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface')->getMock();\n        $mock\n            ->expects($this->any())\n            ->method('getUser')\n            ->will($this->returnValue($user))\n        ;\n\n        return $mock;\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Security\\Core\\Validator\\Constraints;\n\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nuse Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactoryInterface;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface;\nuse Symfony\\Component\\Validator\\Constraint;\nuse Symfony\\Component\\Validator\\ConstraintValidator;\nuse Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException;\nuse Symfony\\Component\\Validator\\Exception\\UnexpectedTypeException;\n\nclass UserPasswordValidator extends ConstraintValidator\n{\n    private $tokenStorage;\n    private $encoderFactory;\n\n    public function __construct(TokenStorageInterface $tokenStorage, EncoderFactoryInterface $encoderFactory)\n    {\n        $this->tokenStorage = $tokenStorage;\n        $this->encoderFactory = $encoderFactory;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function validate($password, Constraint $constraint)\n    {\n        if (!$constraint instanceof UserPassword) {\n            throw new UnexpectedTypeException($constraint, __NAMESPACE__.'\\UserPassword');\n        }\n\n        if (null === $password || '' === $password) {\n            return;\n        }\n\n        $user = $this->tokenStorage->getToken()->getUser();\n\n        if (!$user instanceof UserInterface) {\n            throw new ConstraintDefinitionException('The User object must implement the UserInterface interface.');\n        }\n\n        $encoder = $this->encoderFactory->getEncoder($user);\n\n        if (!$encoder->isPasswordValid($user->getPassword(), $password, $user->getSalt())) {\n            $this->context->addViolation($constraint->message);\n        }\n    }\n}\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Security\\Core\\Tests\\Validator\\Constraints;\n\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface;\nuse Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactoryInterface;\nuse Symfony\\Component\\Security\\Core\\Encoder\\PasswordEncoderInterface;\nuse Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPassword;\nuse Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator;\nuse Symfony\\Component\\Validator\\Tests\\Constraints\\AbstractConstraintValidatorTest;\n\n/**\n * @author Bernhard Schussek <bschussek@gmail.com>\n */\nabstract class UserPasswordValidatorTest extends AbstractConstraintValidatorTest\n{\n    const PASSWORD = 's3Cr3t';\n\n    const SALT = '^S4lt$';\n\n    /**\n     * @var TokenStorageInterface\n     */\n    protected $tokenStorage;\n\n    /**\n     * @var PasswordEncoderInterface\n     */\n    protected $encoder;\n\n    /**\n     * @var EncoderFactoryInterface\n     */\n    protected $encoderFactory;\n\n    protected function createValidator()\n    {\n        return new UserPasswordValidator($this->tokenStorage, $this->encoderFactory);\n    }\n\n    protected function setUp()\n    {\n        $user = $this->createUser();\n        $this->tokenStorage = $this->createTokenStorage($user);\n        $this->encoder = $this->createPasswordEncoder();\n        $this->encoderFactory = $this->createEncoderFactory($this->encoder);\n\n        parent::setUp();\n    }\n\n    public function testPasswordIsValid()\n    {\n        $constraint = new UserPassword(array(\n            'message' => 'myMessage',\n        ));\n\n        $this->encoder->expects($this->once())\n            ->method('isPasswordValid')\n            ->with(static::PASSWORD, 'secret', static::SALT)\n            ->will($this->returnValue(true));\n\n        $this->validator->validate('secret', $constraint);\n\n        $this->assertNoViolation();\n    }\n\n    public function testPasswordIsNotValid()\n    {\n        $constraint = new UserPassword(array(\n            'message' => 'myMessage',\n        ));\n\n        $this->encoder->expects($this->once())\n            ->method('isPasswordValid')\n            ->with(static::PASSWORD, 'secret', static::SALT)\n            ->will($this->returnValue(false));\n\n        $this->validator->validate('secret', $constraint);\n\n        $this->buildViolation('myMessage')\n            ->assertRaised();\n    }\n\n    /**\n     * @dataProvider emptyPasswordData\n     */\n    public function testEmptyPasswordsAreNotValid($password)\n    {\n        $constraint = new UserPassword(array(\n            'message' => 'myMessage',\n        ));\n\n        $this->validator->validate($password, $constraint);\n\n        $this->buildViolation('myMessage')\n            ->assertRaised();\n    }\n\n    public function emptyPasswordData()\n    {\n        return array(\n            array(null),\n            array(''),\n        );\n    }\n\n    /**\n     * @expectedException \\Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException\n     */\n    public function testUserIsNotValid()\n    {\n        $user = $this->getMockBuilder('Foo\\Bar\\User')->getMock();\n\n        $this->tokenStorage = $this->createTokenStorage($user);\n        $this->validator = $this->createValidator();\n        $this->validator->initialize($this->context);\n\n        $this->validator->validate('secret', new UserPassword());\n    }\n\n    protected function createUser()\n    {\n        $mock = $this->getMockBuilder('Symfony\\Component\\Security\\Core\\User\\UserInterface')->getMock();\n\n        $mock\n            ->expects($this->any())\n            ->method('getPassword')\n            ->will($this->returnValue(static::PASSWORD))\n        ;\n\n        $mock\n            ->expects($this->any())\n            ->method('getSalt')\n            ->will($this->returnValue(static::SALT))\n        ;\n\n        return $mock;\n    }\n\n    protected function createPasswordEncoder($isPasswordValid = true)\n    {\n        return $this->getMockBuilder('Symfony\\Component\\Security\\Core\\Encoder\\PasswordEncoderInterface')->getMock();\n    }\n\n    protected function createEncoderFactory($encoder = null)\n    {\n        $mock = $this->getMockBuilder('Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactoryInterface')->getMock();\n\n        $mock\n            ->expects($this->any())\n            ->method('getEncoder')\n            ->will($this->returnValue($encoder))\n        ;\n\n        return $mock;\n    }\n\n    protected function createTokenStorage($user = null)\n    {\n        $token = $this->createAuthenticationToken($user);\n\n        $mock = $this->getMockBuilder('Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface')->getMock();\n        $mock\n            ->expects($this->any())\n            ->method('getToken')\n            ->will($this->returnValue($token))\n        ;\n\n        return $mock;\n    }\n\n    protected function createAuthenticationToken($user = null)\n    {\n        $mock = $this->getMockBuilder('Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface')->getMock();\n        $mock\n            ->expects($this->any())\n            ->method('getUser')\n            ->will($this->returnValue($user))\n        ;\n\n        return $mock;\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\Security\\Core\\Validator\\Constraints;\n\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nuse Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactoryInterface;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface;\nuse Symfony\\Component\\Validator\\Constraint;\nuse Symfony\\Component\\Validator\\ConstraintValidator;\nuse Symfony\\Component\\Validator\\Exception\\ConstraintDefinitionException;\nuse Symfony\\Component\\Validator\\Exception\\UnexpectedTypeException;\n\nclass UserPasswordValidator extends ConstraintValidator\n{\n    private $tokenStorage;\n    private $encoderFactory;\n\n    public function __construct(TokenStorageInterface $tokenStorage, EncoderFactoryInterface $encoderFactory)\n    {\n        $this->tokenStorage = $tokenStorage;\n        $this->encoderFactory = $encoderFactory;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function validate($password, Constraint $constraint)\n    {\n        if (!$constraint instanceof UserPassword) {\n            throw new UnexpectedTypeException($constraint, __NAMESPACE__.'\\UserPassword');\n        }\n\n        if (null === $password || '' === $password) {\n            $this->context->addViolation($constraint->message);\n\n            return;\n        }\n\n        $user = $this->tokenStorage->getToken()->getUser();\n\n        if (!$user instanceof UserInterface) {\n            throw new ConstraintDefinitionException('The User object must implement the UserInterface interface.');\n        }\n\n        $encoder = $this->encoderFactory->getEncoder($user);\n\n        if (!$encoder->isPasswordValid($user->getPassword(), $password, $user->getSalt())) {\n            $this->context->addViolation($constraint->message);\n        }\n    }\n}\n"], "filenames": ["src/Symfony/Component/Security/Core/Tests/Validator/Constraints/UserPasswordValidatorTest.php", "src/Symfony/Component/Security/Core/Validator/Constraints/UserPasswordValidator.php"], "buggy_code_start_loc": [93, 42], "buggy_code_end_loc": [93, 42], "fixing_code_start_loc": [94, 43], "fixing_code_end_loc": [117, 45], "type": "CWE-284", "message": "Certain Symfony products are affected by: Incorrect Access Control. This affects Symfony 2.7.30 and Symfony 2.8.23 and Symfony 3.2.10 and Symfony 3.3.3. The type of exploitation is: remote. The component is: Password validator.", "other": {"cve": {"id": "CVE-2017-11365", "sourceIdentifier": "cve@mitre.org", "published": "2019-05-23T18:29:00.373", "lastModified": "2019-05-24T19:35:57.117", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Certain Symfony products are affected by: Incorrect Access Control. This affects Symfony 2.7.30 and Symfony 2.8.23 and Symfony 3.2.10 and Symfony 3.3.3. The type of exploitation is: remote. The component is: Password validator."}, {"lang": "es", "value": "Ciertos productos de Symfony se ven afectados por: Control de Acceso Incorrecto. Esto afecta a Symfony versi\u00f3n 2.7.30 y Symfony versi\u00f3n 2.8.23 y Symfony versi\u00f3n 3.2.10 y Symfony versi\u00f3n 3.3.3. El tipo de explotaci\u00f3n es: remota. El componente es: validador de contrase\u00f1a."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sensiolabs:symfony:2.7.30:*:*:*:*:*:*:*", "matchCriteriaId": "6568EAFA-31AB-4A0F-880B-F6663FBE3286"}, {"vulnerable": true, "criteria": "cpe:2.3:a:sensiolabs:symfony:2.8.23:*:*:*:*:*:*:*", "matchCriteriaId": "03E38D99-9CE1-4CEE-A635-8CE9E14AE010"}, {"vulnerable": true, "criteria": "cpe:2.3:a:sensiolabs:symfony:3.2.10:*:*:*:*:*:*:*", "matchCriteriaId": "62DDF7CB-FAB7-4536-BA76-6CD826202CE6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:sensiolabs:symfony:3.3.3:*:*:*:*:*:*:*", "matchCriteriaId": "C12A2186-9B0C-4E44-A788-02A0C9B03BE2"}]}]}], "references": [{"url": "https://github.com/symfony/symfony/commit/878198cefae028386c6dc800ccbf18f2b9cbff3f", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/symfony/symfony/pull/23507", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/symfony/symfony/commit/878198cefae028386c6dc800ccbf18f2b9cbff3f"}}