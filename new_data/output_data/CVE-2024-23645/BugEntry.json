{"buggy_code": ["<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2024 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Stat\\Data\\Location\\StatDataClosed;\nuse Glpi\\Stat\\Data\\Location\\StatDataLate;\nuse Glpi\\Stat\\Data\\Location\\StatDataOpened;\nuse Glpi\\Stat\\Data\\Location\\StatDataOpenSatisfaction;\nuse Glpi\\Stat\\Data\\Location\\StatDataSolved;\n\n/** @var array $CFG_GLPI */\nglobal $CFG_GLPI;\n\ninclude('../inc/includes.php');\n\nHtml::header(__('Statistics'), '', \"helpdesk\", \"stat\");\n\nSession::checkRight(\"statistic\", READ);\n\n\nif (empty($_GET[\"showgraph\"])) {\n    $_GET[\"showgraph\"] = 0;\n}\n\nif (empty($_GET[\"date1\"]) && empty($_GET[\"date2\"])) {\n    $year          = date(\"Y\") - 1;\n    $_GET[\"date1\"] = date(\"Y-m-d\", mktime(1, 0, 0, date(\"m\"), date(\"d\"), $year));\n    $_GET[\"date2\"] = date(\"Y-m-d\");\n}\n\nif (\n    !empty($_GET[\"date1\"])\n    && !empty($_GET[\"date2\"])\n    && (strcmp($_GET[\"date2\"], $_GET[\"date1\"]) < 0)\n) {\n    $tmp           = $_GET[\"date1\"];\n    $_GET[\"date1\"] = $_GET[\"date2\"];\n    $_GET[\"date2\"] = $tmp;\n}\n\nif (!isset($_GET[\"start\"])) {\n    $_GET[\"start\"] = 0;\n}\n// Why this test ?? For me it's doing nothing\nif (isset($_GET[\"dropdown\"])) {\n    $_GET[\"dropdown\"] = $_GET[\"dropdown\"];\n}\n\nif (empty($_GET[\"dropdown\"])) {\n    $_GET[\"dropdown\"] = \"ComputerType\";\n}\n\nif (!isset($_GET['itemtype'])) {\n    $_GET['itemtype'] = 'Ticket';\n}\n\n$stat = new Stat();\nStat::title();\n\necho \"<form method='get' name='form' action='stat.location.php'>\";\n// keep it first param\necho \"<input type='hidden' name='itemtype' value='\" . $_GET['itemtype'] . \"'>\";\n\necho \"<table class='tab_cadre_fixe' ><tr class='tab_bg_2'><td rowspan='2' width='30%'>\";\n$values = [_n('Dropdown', 'Dropdowns', Session::getPluralNumber()) => ['ComputerType'    => _n('Type', 'Types', 1),\n    'ComputerModel'   => _n('Model', 'Models', 1),\n    'OperatingSystem' => OperatingSystem::getTypeName(1),\n    'Location'        => Location::getTypeName(1)\n],\n];\n$devices = Dropdown::getDeviceItemTypes();\nforeach ($devices as $label => $dp) {\n    foreach ($dp as $i => $name) {\n        $values[$label][$i] = $name;\n    }\n}\n\nDropdown::showFromArray('dropdown', $values, ['value' => $_GET[\"dropdown\"]]);\n\necho \"</td>\";\n\necho \"<td class='right'>\" . __('Start date') . \"</td><td>\";\nHtml::showDateField(\"date1\", ['value' => $_GET[\"date1\"]]);\necho \"</td>\";\necho \"<td class='right'>\" . __('Show graphics') . \"</td>\";\necho \"<td rowspan='2' class='center'>\";\necho \"<input type='submit' class='btn btn-primary' name='submit' value='\" . __s('Display report') . \"'></td></tr>\";\n\necho \"<tr class='tab_bg_2'><td class='right'>\" . __('End date') . \"</td><td>\";\nHtml::showDateField(\"date2\", ['value' => $_GET[\"date2\"]]);\necho \"</td><td class='center'>\";\nDropdown::showYesNo('showgraph', $_GET['showgraph']);\necho \"</td>\";\necho \"</tr>\";\necho \"</table>\";\n// form using GET method : CRSF not needed\necho \"</form>\";\n\nif (\n    empty($_GET[\"dropdown\"])\n    || !($item = getItemForItemtype($_GET[\"dropdown\"]))\n) {\n   // Do nothing\n    Html::footer();\n    exit();\n}\n\n\nif (!($item instanceof CommonDevice)) {\n   // echo \"Dropdown\";\n    $type = \"comp_champ\";\n\n    $val = Stat::getItems($_GET['itemtype'], $_GET[\"date1\"], $_GET[\"date2\"], $_GET[\"dropdown\"]);\n    $params = ['type'     => $type,\n        'dropdown' => $_GET[\"dropdown\"],\n        'date1'    => $_GET[\"date1\"],\n        'date2'    => $_GET[\"date2\"],\n        'start'    => $_GET[\"start\"]\n    ];\n} else {\n   //   echo \"Device\";\n    $type  = \"device\";\n\n    $val = Stat::getItems($_GET['itemtype'], $_GET[\"date1\"], $_GET[\"date2\"], $_GET[\"dropdown\"]);\n    $params = ['type'     => $type,\n        'dropdown' => $_GET[\"dropdown\"],\n        'date1'    => $_GET[\"date1\"],\n        'date2'    => $_GET[\"date2\"],\n        'start'    => $_GET[\"start\"]\n    ];\n}\n\nHtml::printPager(\n    $_GET['start'],\n    count($val),\n    $CFG_GLPI['root_doc'] . '/front/stat.location.php',\n    \"date1=\" . $_GET[\"date1\"] . \"&amp;date2=\" . $_GET[\"date2\"] .\n                     \"&amp;itemtype=\" . $_GET['itemtype'] . \"&amp;dropdown=\" . $_GET[\"dropdown\"],\n    'Stat',\n    $params\n);\n\nif (!$_GET['showgraph']) {\n    Stat::showTable(\n        $_GET['itemtype'],\n        $type,\n        $_GET[\"date1\"],\n        $_GET[\"date2\"],\n        $_GET['start'],\n        $val,\n        $_GET[\"dropdown\"]\n    );\n} else {\n    $data_params = [\n        'itemtype' => $_GET['itemtype'],\n        'type'     => $type,\n        'date1'    => $_GET['date1'],\n        'date2'    => $_GET['date2'],\n        'start'    => $_GET['start'],\n        'val'      => $val,\n        'value2' => $_GET['dropdown'],\n    ];\n\n    $stat->displayPieGraphFromData(new StatDataOpened($data_params));\n    $stat->displayPieGraphFromData(new StatDataSolved($data_params));\n    $stat->displayPieGraphFromData(new StatDataLate($data_params));\n    $stat->displayPieGraphFromData(new StatDataClosed($data_params));\n    $stat->displayPieGraphFromData(new StatDataOpenSatisfaction($data_params));\n}\n\nHtml::footer();\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2024 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Stat\\Data\\Location\\StatDataClosed;\nuse Glpi\\Stat\\Data\\Location\\StatDataLate;\nuse Glpi\\Stat\\Data\\Location\\StatDataOpened;\nuse Glpi\\Stat\\Data\\Location\\StatDataOpenSatisfaction;\nuse Glpi\\Stat\\Data\\Location\\StatDataSolved;\n\n/** @var array $CFG_GLPI */\nglobal $CFG_GLPI;\n\ninclude('../inc/includes.php');\n\nHtml::header(__('Statistics'), '', \"helpdesk\", \"stat\");\n\nSession::checkRight(\"statistic\", READ);\n\nif (!$item = getItemForItemtype($_GET['itemtype'])) {\n    exit;\n}\n\nif (empty($_GET[\"type\"])) {\n    $_GET[\"type\"] = \"user\";\n}\n\nif (empty($_GET[\"showgraph\"])) {\n    $_GET[\"showgraph\"] = 0;\n}\n\nif (empty($_GET[\"value2\"])) {\n    $_GET[\"value2\"] = 0;\n}\n\nif (empty($_GET[\"date1\"]) && empty($_GET[\"date2\"])) {\n    $year              = date(\"Y\") - 1;\n    $_GET[\"date1\"] = date(\"Y-m-d\", mktime(1, 0, 0, date(\"m\"), date(\"d\"), $year));\n    $_GET[\"date2\"] = date(\"Y-m-d\");\n}\n\nif (\n    !empty($_GET[\"date1\"])\n    && !empty($_GET[\"date2\"])\n    && (strcmp($_GET[\"date2\"], $_GET[\"date1\"]) < 0)\n) {\n    $tmp           = $_GET[\"date1\"];\n    $_GET[\"date1\"] = $_GET[\"date2\"];\n    $_GET[\"date2\"] = $tmp;\n}\n\nif (!isset($_GET[\"start\"])) {\n    $_GET[\"start\"] = 0;\n}\n\n$stat = new Stat();\nStat::title();\n\n$requester = ['user'               => ['title' => _n('Requester', 'Requesters', 1)],\n    'users_id_recipient' => ['title' => __('Writer')],\n    'group'              => ['title' => Group::getTypeName(1)],\n    'group_tree'         => ['title' => __('Group tree')],\n    'usertitles_id'      => ['title' => _x('person', 'Title')],\n    'usercategories_id'  => ['title' => _n('Category', 'Categories', 1)]\n];\n\n$caract    = ['itilcategories_id'   => ['title' => _n('Category', 'Categories', 1)],\n    'itilcategories_tree' => ['title' => __('Category tree')],\n    'urgency'             => ['title' => __('Urgency')],\n    'impact'              => ['title' => __('Impact')],\n    'priority'            => ['title' => __('Priority')],\n    'solutiontypes_id'    => ['title' => SolutionType::getTypeName(1)]\n];\n\nif ($_GET['itemtype'] == 'Ticket') {\n    $caract['type']            = ['title' => _n('Type', 'Types', 1)];\n    $caract['requesttypes_id'] = ['title' => RequestType::getTypeName(1)];\n    $caract['locations_id']    = ['title' => Location::getTypeName(1)];\n    $caract['locations_tree']  = ['title' => __('Location tree')];\n}\n\n\n$items = [_n('Requester', 'Requesters', 1)       => $requester,\n    __('Characteristics') => $caract,\n    __('Assigned to')     => ['technicien'\n                                                   => ['title' => __('Technician as assigned')],\n        'technicien_followup'\n                                                   => ['title' => __('Technician in tasks')],\n        'groups_id_assign'\n                                                   => ['title' => Group::getTypeName(1)],\n        'groups_tree_assign'\n                                                   => ['title' => __('Group tree')],\n        'suppliers_id_assign'\n                                                   => ['title' => Supplier::getTypeName(1)]\n    ]\n];\n\n$values = [];\nforeach ($items as $label => $tab) {\n    foreach ($tab as $key => $val) {\n        $values[$label][$key] = $val['title'];\n    }\n}\n\necho \"<div class='center'><form method='get' name='form' action='stat.tracking.php'>\";\n// Keep it first param\necho \"<input type='hidden' name='itemtype' value=\\\"\" . $_GET[\"itemtype\"] . \"\\\">\";\n\necho \"<table class='tab_cadre_fixe'>\";\necho \"<tr class='tab_bg_2'><td rowspan='2' class='center' width='30%'>\";\nDropdown::showFromArray('type', $values, ['value' => $_GET['type']]);\necho \"</td>\";\necho \"<td class='right'>\" . __('Start date') . \"</td><td>\";\nHtml::showDateField(\"date1\", ['value' => $_GET[\"date1\"]]);\necho \"</td>\";\necho \"<td class='right'>\" . __('Show graphics') . \"</td>\";\necho \"<td rowspan='2' class='center'>\";\necho \"<input type='submit' class='btn btn-primary' name='submit' value=\\\"\" . __s('Display report') . \"\\\"></td>\" .\n     \"</tr>\";\n\necho \"<tr class='tab_bg_2'><td class='right'>\" . __('End date') . \"</td><td>\";\nHtml::showDateField(\"date2\", ['value' => $_GET[\"date2\"]]);\necho \"</td><td class='center'>\";\necho \"<input type='hidden' name='value2' value='\" . $_GET[\"value2\"] . \"'>\";\nDropdown::showYesNo('showgraph', $_GET['showgraph']);\necho \"</td></tr>\";\necho \"</table>\";\n// form using GET method : CRSF not needed\necho \"</form>\";\necho \"</div>\";\n\n$val    = Stat::getItems(\n    $_GET[\"itemtype\"],\n    $_GET[\"date1\"],\n    $_GET[\"date2\"],\n    $_GET[\"type\"],\n    $_GET[\"value2\"]\n);\n$params = ['type'   => $_GET[\"type\"],\n    'date1'  => $_GET[\"date1\"],\n    'date2'  => $_GET[\"date2\"],\n    'value2' => $_GET[\"value2\"],\n    'start'  => $_GET[\"start\"]\n];\n\nHtml::printPager(\n    $_GET['start'],\n    count($val),\n    $CFG_GLPI['root_doc'] . '/front/stat.tracking.php',\n    \"date1=\" . $_GET[\"date1\"] . \"&amp;date2=\" . $_GET[\"date2\"] . \"&amp;type=\" . $_GET[\"type\"] .\n                    \"&amp;showgraph=\" . $_GET[\"showgraph\"] . \"&amp;itemtype=\" . $_GET[\"itemtype\"] .\n                    \"&amp;value2=\" . $_GET['value2'],\n    'Stat',\n    $params\n);\n\nif (!$_GET['showgraph']) {\n    Stat::showTable(\n        $_GET[\"itemtype\"],\n        $_GET[\"type\"],\n        $_GET[\"date1\"],\n        $_GET[\"date2\"],\n        $_GET['start'],\n        $val,\n        $_GET['value2']\n    );\n} else {\n    $data = Stat::getData(\n        $_GET[\"itemtype\"],\n        $_GET[\"type\"],\n        $_GET[\"date1\"],\n        $_GET[\"date2\"],\n        $_GET['start'],\n        $val,\n        $_GET['value2']\n    );\n\n    $data_params = [\n        'itemtype' => $_GET['itemtype'],\n        'type'     => $_GET[\"type\"],\n        'date1'    => $_GET['date1'],\n        'date2'    => $_GET['date2'],\n        'start'    => $_GET['start'],\n        'val'      => $val,\n        'value2'   => $_GET['value2'],\n    ];\n\n    $stat->displayPieGraphFromData(new StatDataOpened($data_params));\n    $stat->displayPieGraphFromData(new StatDataSolved($data_params));\n    $stat->displayPieGraphFromData(new StatDataLate($data_params));\n    $stat->displayPieGraphFromData(new StatDataClosed($data_params));\n\n    if ($_GET['itemtype'] == 'Ticket') {\n        $stat->displayPieGraphFromData(new StatDataOpenSatisfaction($data_params));\n    }\n}\n\nHtml::footer();\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2024 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Stat\\StatData;\n\n/**\n *  Stat class\n **/\nclass Stat extends CommonGLPI\n{\n    public static $rightname = 'statistic';\n\n    public static $cache = [];\n\n    public static function getTypeName($nb = 0)\n    {\n        return __('Statistics');\n    }\n\n\n    /**\n     * @see CommonGLPI::getMenuShorcut()\n     *\n     * @since 0.85\n     **/\n    public static function getMenuShorcut()\n    {\n        return 'a';\n    }\n\n\n    /**\n     * @param $itemtype\n     * @param $date1\n     * @param $date2\n     * @param $type\n     * @param $parent    (default 0)\n     **/\n    public static function getItems($itemtype, $date1, $date2, $type, $parent = 0)\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        if (!$item = getItemForItemtype($itemtype)) {\n            return;\n        }\n        $val  = [];\n\n        switch ($type) {\n            case \"technicien\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedTechBetween($date1, $date2);\n                break;\n\n            case \"technicien_followup\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedTechTaskBetween($date1, $date2);\n                break;\n\n            case \"suppliers_id_assign\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedSupplierBetween($date1, $date2);\n                break;\n\n            case \"user\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedAuthorBetween($date1, $date2);\n                break;\n\n            case \"users_id_recipient\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedRecipientBetween($date1, $date2);\n                break;\n\n            case 'group_tree':\n            case 'groups_tree_assign':\n               // Get all groups\n                $is_field = ($type == 'group_tree') ? 'is_requester' : 'is_assign';\n                $iterator = $DB->request([\n                    'SELECT' => ['id', 'name'],\n                    'FROM'   => 'glpi_groups',\n                    'WHERE'  => [\n                        'OR'  => [\n                            'id'        => $parent,\n                            'groups_id' => $parent\n                        ],\n                        $is_field   => 1\n                    ] + getEntitiesRestrictCriteria(\"glpi_groups\", '', '', true),\n                    'ORDER'  => 'completename'\n                ]);\n\n                $val    = [];\n                foreach ($iterator as $line) {\n                     $val[] = [\n                         'id'     => $line['id'],\n                         'link'   => $line['name']\n                     ];\n                }\n                break;\n\n            case \"itilcategories_tree\":\n            case \"itilcategories_id\":\n                $is_tree = $type == 'itilcategories_tree';\n               // Get all ticket categories for tree merge management\n                $criteria = [\n                    'SELECT'    => [\n                        'glpi_itilcategories.id',\n                        'glpi_itilcategories.' . ($is_tree ? 'name' : 'completename') . ' AS category'\n                    ],\n                    'DISTINCT'  => true,\n                    'FROM'      => 'glpi_itilcategories',\n                    'WHERE'     => getEntitiesRestrictCriteria('glpi_itilcategories', '', '', true),\n                    'ORDERBY'   => 'completename'\n                ];\n\n                if ($is_tree) {\n                    $criteria['WHERE']['OR'] = [\n                        'id'                 => $parent,\n                        'itilcategories_id'  => $parent\n                    ];\n                }\n\n                $iterator = $DB->request($criteria);\n\n                $val    = [];\n                foreach ($iterator as $line) {\n                    $val[] = [\n                        'id'     => $line['id'],\n                        'link'   => $line['category']\n                    ];\n                }\n                break;\n\n            case 'locations_tree':\n            case 'locations_id':\n                $is_tree = $type == 'locations_tree';\n               // Get all locations for tree merge management\n                $criteria = [\n                    'SELECT'    => [\n                        'glpi_locations.id',\n                        'glpi_locations.' . ($is_tree ? 'name' : 'completename') . ' AS location'\n                    ],\n                    'DISTINCT'  => true,\n                    'FROM'      => 'glpi_locations',\n                    'WHERE'     => getEntitiesRestrictCriteria('glpi_locations', '', '', true),\n                    'ORDERBY'   => 'completename'\n                ];\n\n                if ($is_tree) {\n                    $criteria['WHERE']['OR'] = [\n                        'id'           => $parent,\n                        'locations_id' => $parent\n                    ];\n                }\n\n                $iterator = $DB->request($criteria);\n\n                $val    = [];\n                foreach ($iterator as $line) {\n                    $val[] = [\n                        'id'     => $line['id'],\n                        'link'   => $line['location']\n                    ];\n                }\n                break;\n\n            case \"type\":\n                $types = $item->getTypes();\n                $val   = [];\n                foreach ($types as $id => $v) {\n                    $tmp['id']   = $id;\n                    $tmp['link'] = $v;\n                    $val[]       = $tmp;\n                }\n                break;\n\n            case \"group\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedGroupBetween($date1, $date2);\n                break;\n\n            case \"groups_id_assign\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedAssignGroupBetween($date1, $date2);\n                break;\n\n            case \"priority\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedPriorityBetween($date1, $date2);\n                break;\n\n            case \"urgency\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedUrgencyBetween($date1, $date2);\n                break;\n\n            case \"impact\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedImpactBetween($date1, $date2);\n                break;\n\n            case \"requesttypes_id\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedRequestTypeBetween($date1, $date2);\n                break;\n\n            case \"solutiontypes_id\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedSolutionTypeBetween($date1, $date2);\n                break;\n\n            case \"usertitles_id\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedUserTitleOrTypeBetween($date1, $date2, true);\n                break;\n\n            case \"usercategories_id\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedUserTitleOrTypeBetween($date1, $date2, false);\n                break;\n\n           // DEVICE CASE\n            default:\n                if (\n                    ($item = getItemForItemtype($type))\n                    && ($item instanceof CommonDevice)\n                ) {\n                    $device_table = $item->getTable();\n\n                   //select devices IDs (table row)\n                    $iterator = $DB->request([\n                        'SELECT' => [\n                            'id',\n                            'designation'\n                        ],\n                        'FROM'   => $device_table,\n                        'ORDER'  => 'designation'\n                    ]);\n\n                    foreach ($iterator as $line) {\n                          $val[] = [\n                              'id'     => $line['id'],\n                              'link'   => $line['designation']\n                          ];\n                    }\n                } else {\n                   // Dropdown case for computers\n                    $field = \"name\";\n                    $table = getTableForItemType($type);\n                    if (\n                        ($item = getItemForItemtype($type))\n                        && ($item instanceof CommonTreeDropdown)\n                    ) {\n                        $field = \"completename\";\n                    }\n\n                    $criteria = [\n                        'FROM'   => $table,\n                        'ORDER'  => $field\n                    ];\n\n                    if ($item->isEntityAssign()) {\n                        $criteria['ORDER'] = ['entities_id', $field];\n                        $criteria['WHERE'] = getEntitiesRestrictCriteria($table);\n                    }\n\n                    $iterator = $DB->request($criteria);\n\n                    $val    = [];\n                    foreach ($iterator as $line) {\n                        $val[] = [\n                            'id'     => $line['id'],\n                            'link'   => $line[$field]\n                        ];\n                    }\n                }\n        }\n        return $val;\n    }\n\n\n    /**\n     * @param $itemtype\n     * @param $type\n     * @param $date1\n     * @param $date2\n     * @param $start\n     * @param $value     array\n     * @param $value2             (default '')\n     **/\n    public static function getData($itemtype, $type, $date1, $date2, $start, array $value, $value2 = \"\")\n    {\n        $hash = md5(serialize(func_get_args()));\n\n       // Single query cache to avoid recalculating data multiple times\n       // Needed as multiple stats rely on partial data returneds by this function\n       // Can be removed once we improve this code by spliting each data calculations\n       // into separate functions that can be called independently\n        if (isset(self::$cache[$hash])) {\n            return self::$cache[$hash];\n        }\n\n        $export_data = [];\n\n        if (is_array($value)) {\n            $end_display = $start + $_SESSION['glpilist_limit'];\n            $numrows     = count($value);\n\n            for ($i = $start; $i < $numrows && $i < ($end_display); $i++) {\n               //le nombre d'intervention - the number of intervention\n                $opened    = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_total\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                $nb_opened = array_sum($opened);\n                $export_data['opened'][$value[$i]['link']] = $nb_opened;\n\n               //le nombre d'intervention resolues - the number of solved intervention\n                $solved    = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_solved\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                $nb_solved = array_sum($solved);\n                $export_data['solved'][$value[$i]['link']] = $nb_solved;\n\n               //le nombre d'intervention resolues - the number of solved late intervention\n                $late      = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_solved_late\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                $nb_late   = array_sum($late);\n                $export_data['late'][$value[$i]['link']] = $nb_late;\n\n               //le nombre d'intervention closes - the number of closed intervention\n                $closed    = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_closed\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                $nb_closed = array_sum($closed);\n                $export_data['closed'][$value[$i]['link']] = $nb_closed;\n\n                if ($itemtype == 'Ticket') {\n                     //open satisfaction\n                     $opensatisfaction    = self::constructEntryValues(\n                         $itemtype,\n                         \"inter_opensatisfaction\",\n                         $date1,\n                         $date2,\n                         $type,\n                         $value[$i][\"id\"],\n                         $value2\n                     );\n                       $nb_opensatisfaction = array_sum($opensatisfaction);\n                       $export_data['opensatisfaction'][$value[$i]['link']] = $nb_opensatisfaction;\n                }\n            }\n        }\n\n        self::$cache[$hash] = $export_data;\n        return $export_data;\n    }\n\n\n    /**\n     * @param $itemtype\n     * @param $type\n     * @param $date1\n     * @param $date2\n     * @param $start\n     * @param $value     array\n     * @param $value2          (default '')\n     *\n     * @since 0.85 (before show with same parameters)\n     **/\n    public static function showTable($itemtype, $type, $date1, $date2, $start, array $value, $value2 = \"\")\n    {\n        /** @var array $CFG_GLPI */\n        global $CFG_GLPI;\n\n       // Set display type for export if define\n        $output_type = Search::HTML_OUTPUT;\n        if (isset($_GET[\"display_type\"])) {\n            $output_type = $_GET[\"display_type\"];\n        }\n\n        if ($output_type == Search::HTML_OUTPUT) { // HTML display\n            echo \"<div class ='center'>\";\n        }\n\n        if (is_array($value)) {\n            $end_display = $start + $_SESSION['glpilist_limit'];\n            $numrows     = count($value);\n\n            if (isset($_GET['export_all'])) {\n                $start       = 0;\n                $end_display = $numrows;\n            }\n\n            $nbcols = 8;\n            if ($output_type != Search::HTML_OUTPUT) { // not HTML display\n                $nbcols--;\n            }\n\n            echo Search::showHeader($output_type, $end_display - $start + 1, $nbcols);\n            $subname = '';\n            switch ($type) {\n                case 'group_tree':\n                case 'groups_tree_assign':\n                    $subname = Dropdown::getDropdownName('glpi_groups', $value2);\n                    break;\n\n                case 'itilcategories_tree':\n                    $subname = Dropdown::getDropdownName('glpi_itilcategories', $value2);\n                    break;\n\n                case 'locations_tree':\n                    $subname = Dropdown::getDropdownName('glpi_locations', $value2);\n                    break;\n            }\n\n            if ($output_type == Search::HTML_OUTPUT) { // HTML display\n                echo Search::showNewLine($output_type);\n                $header_num = 1;\n\n                if (\n                    ($output_type == Search::HTML_OUTPUT)\n                    && strstr($type, '_tree')\n                    && $value2\n                ) {\n                   // HTML display\n                    $link = $_SERVER['PHP_SELF'] .\n                       \"?date1=$date1&amp;date2=$date2&amp;itemtype=$itemtype&amp;type=$type\" .\n                       \"&amp;value2=0\";\n                    $link = \"<a href='$link'>\" . __('Back') . \"</a>\";\n                    echo Search::showHeaderItem($output_type, $link, $header_num);\n                } else {\n                    echo Search::showHeaderItem($output_type, \"&nbsp;\", $header_num);\n                }\n                echo Search::showHeaderItem($output_type, '', $header_num);\n\n                echo Search::showHeaderItem(\n                    $output_type,\n                    _x('quantity', 'Number'),\n                    $header_num,\n                    '',\n                    0,\n                    '',\n                    \"colspan='4'\"\n                );\n                if ($itemtype == 'Ticket') {\n                     echo Search::showHeaderItem(\n                         $output_type,\n                         __('Satisfaction'),\n                         $header_num,\n                         '',\n                         0,\n                         '',\n                         \"colspan='3'\"\n                     );\n                }\n                echo Search::showHeaderItem(\n                    $output_type,\n                    __('Average time'),\n                    $header_num,\n                    '',\n                    0,\n                    '',\n                    $itemtype == 'Ticket' ? \"colspan='3'\" : \"colspan='2'\"\n                );\n                echo Search::showHeaderItem(\n                    $output_type,\n                    __('Real duration of treatment of the ticket'),\n                    $header_num,\n                    '',\n                    0,\n                    '',\n                    \"colspan='2'\"\n                );\n            }\n\n            echo Search::showNewLine($output_type);\n            $header_num    = 1;\n            echo Search::showHeaderItem($output_type, $subname, $header_num);\n\n            if ($output_type == Search::HTML_OUTPUT) { // HTML display\n                echo Search::showHeaderItem($output_type, \"\", $header_num);\n            }\n            if ($output_type != Search::HTML_OUTPUT) {\n                echo Search::showHeaderItem($output_type, __('Number of opened tickets'), $header_num);\n                echo Search::showHeaderItem($output_type, __('Number of solved tickets'), $header_num);\n                echo Search::showHeaderItem($output_type, __('Number of late tickets'), $header_num);\n                echo Search::showHeaderItem($output_type, __('Number of closed tickets'), $header_num);\n            } else {\n                echo Search::showHeaderItem($output_type, _nx('ticket', 'Opened', 'Opened', Session::getPluralNumber()), $header_num);\n                echo Search::showHeaderItem(\n                    $output_type,\n                    _nx('ticket', 'Solved', 'Solved', Session::getPluralNumber()),\n                    $header_num\n                );\n                echo Search::showHeaderItem($output_type, __('Late'), $header_num);\n                echo Search::showHeaderItem($output_type, __('Closed'), $header_num);\n            }\n\n            if ($itemtype == 'Ticket') {\n                if ($output_type != Search::HTML_OUTPUT) {\n                    echo Search::showHeaderItem(\n                        $output_type,\n                        __('Number of opened satisfaction survey'),\n                        $header_num\n                    );\n                    echo Search::showHeaderItem(\n                        $output_type,\n                        __('Number of answered satisfaction survey'),\n                        $header_num\n                    );\n                    echo Search::showHeaderItem(\n                        $output_type,\n                        __('Average satisfaction'),\n                        $header_num\n                    );\n                } else {\n                    echo Search::showHeaderItem(\n                        $output_type,\n                        _nx('survey', 'Opened', 'Opened', Session::getPluralNumber()),\n                        $header_num\n                    );\n                    echo Search::showHeaderItem(\n                        $output_type,\n                        _nx('survey', 'Answered', 'Answered', Session::getPluralNumber()),\n                        $header_num\n                    );\n                    echo Search::showHeaderItem($output_type, __('Average'), $header_num);\n                }\n            }\n\n            if ($output_type != Search::HTML_OUTPUT) {\n                if ($itemtype == 'Ticket') {\n                    echo Search::showHeaderItem(\n                        $output_type,\n                        __('Average time to take into account'),\n                        $header_num\n                    );\n                }\n                echo Search::showHeaderItem($output_type, __('Average time to resolution'), $header_num);\n                echo Search::showHeaderItem($output_type, __('Average time to closure'), $header_num);\n            } else {\n                if ($itemtype == 'Ticket') {\n                    echo Search::showHeaderItem($output_type, __('Take into account'), $header_num);\n                }\n                echo Search::showHeaderItem($output_type, __('Resolution'), $header_num);\n                echo Search::showHeaderItem($output_type, __('Closure'), $header_num);\n            }\n\n            if ($output_type != Search::HTML_OUTPUT) {\n                echo Search::showHeaderItem(\n                    $output_type,\n                    __('Average real duration of treatment of the ticket'),\n                    $header_num\n                );\n                echo Search::showHeaderItem(\n                    $output_type,\n                    __('Total real duration of treatment of the ticket'),\n                    $header_num\n                );\n            } else {\n                echo Search::showHeaderItem($output_type, __('Average'), $header_num);\n                echo Search::showHeaderItem($output_type, __('Total duration'), $header_num);\n            }\n           // End Line for column headers\n            echo Search::showEndLine($output_type);\n            $row_num = 1;\n\n            for ($i = $start; ($i < $numrows) && ($i < $end_display); $i++) {\n                $row_num++;\n                $item_num = 1;\n                echo Search::showNewLine($output_type, $i % 2);\n                if (\n                    ($output_type == Search::HTML_OUTPUT)\n                    && strstr($type, '_tree')\n                    && ($value[$i]['id'] != $value2)\n                ) {\n                   // HTML display\n                    $link = $_SERVER['PHP_SELF'] .\n                       \"?date1=$date1&amp;date2=$date2&amp;itemtype=$itemtype&amp;type=$type\" .\n                       \"&amp;value2=\" . $value[$i]['id'];\n                    $link = \"<a href='$link'>\" . $value[$i]['link'] . \"</a>\";\n                    echo Search::showItem($output_type, $link, $item_num, $row_num);\n                } else {\n                    echo Search::showItem($output_type, $value[$i]['link'], $item_num, $row_num);\n                }\n\n                if ($output_type == Search::HTML_OUTPUT) { // HTML display\n                    $link = \"\";\n                    if ($value[$i]['id'] > 0) {\n                        $link = \"<a href='stat.graph.php?id=\" . $value[$i]['id'] .\n                            \"&amp;date1=$date1&amp;date2=$date2&amp;itemtype=$itemtype&amp;type=$type\" .\n                            (!empty($value2) ? \"&amp;champ=$value2\" : \"\") . \"'>\" .\n                          \"<img src='\" . $CFG_GLPI[\"root_doc\"] . \"/pics/stats_item.png' alt=''>\" .\n                          \"</a>\";\n                    }\n                    echo Search::showItem($output_type, $link, $item_num, $row_num);\n                }\n\n               //le nombre d'intervention - the number of intervention\n                $opened    = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_total\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                $nb_opened = array_sum($opened);\n                echo Search::showItem($output_type, $nb_opened, $item_num, $row_num);\n\n               //le nombre d'intervention resolues - the number of solved intervention\n                $solved    = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_solved\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                $nb_solved = array_sum($solved);\n                echo Search::showItem($output_type, $nb_solved, $item_num, $row_num);\n\n               //le nombre d'intervention resolues - the number of solved intervention\n                $solved_late    = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_solved_late\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                $nb_solved_late = array_sum($solved_late);\n                echo Search::showItem($output_type, $nb_solved_late, $item_num, $row_num);\n\n               //le nombre d'intervention closes - the number of closed intervention\n                $closed    = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_closed\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                $nb_closed = array_sum($closed);\n\n                echo Search::showItem($output_type, $nb_closed, $item_num, $row_num);\n\n                if ($itemtype == 'Ticket') {\n                     //Satisfaction open\n                     $opensatisfaction    = self::constructEntryValues(\n                         $itemtype,\n                         \"inter_opensatisfaction\",\n                         $date1,\n                         $date2,\n                         $type,\n                         $value[$i][\"id\"],\n                         $value2\n                     );\n                     $nb_opensatisfaction = array_sum($opensatisfaction);\n                     echo Search::showItem($output_type, $nb_opensatisfaction, $item_num, $row_num);\n\n                     //Satisfaction answer\n                     $answersatisfaction    = self::constructEntryValues(\n                         $itemtype,\n                         \"inter_answersatisfaction\",\n                         $date1,\n                         $date2,\n                         $type,\n                         $value[$i][\"id\"],\n                         $value2\n                     );\n                    $nb_answersatisfaction = array_sum($answersatisfaction);\n                    echo Search::showItem($output_type, $nb_answersatisfaction, $item_num, $row_num);\n\n                    //Satisfaction rate\n                    $satisfaction = self::constructEntryValues(\n                        $itemtype,\n                        \"inter_avgsatisfaction\",\n                        $date1,\n                        $date2,\n                        $type,\n                        $value[$i][\"id\"],\n                        $value2\n                    );\n                    foreach (array_keys($satisfaction) as $key2) {\n                          $satisfaction[$key2] *= $answersatisfaction[$key2];\n                    }\n                    if ($nb_answersatisfaction > 0) {\n                        $avgsatisfaction = round(array_sum($satisfaction) / $nb_answersatisfaction, 1);\n                        if ($output_type == Search::HTML_OUTPUT) {\n                            $avgsatisfaction = TicketSatisfaction::displaySatisfaction($avgsatisfaction);\n                        }\n                    } else {\n                        $avgsatisfaction = '&nbsp;';\n                    }\n                    echo Search::showItem($output_type, $avgsatisfaction, $item_num, $row_num);\n\n                    //Le temps moyen de prise en compte du ticket - The average time to take a ticket into account\n                    $data = self::constructEntryValues(\n                        $itemtype,\n                        \"inter_avgtakeaccount\",\n                        $date1,\n                        $date2,\n                        $type,\n                        $value[$i][\"id\"],\n                        $value2\n                    );\n                    foreach (array_keys($data) as $key2) {\n                          $data[$key2] *= $solved[$key2];\n                    }\n\n                    if ($nb_solved > 0) {\n                        $timedisplay = array_sum($data) / $nb_solved;\n                    } else {\n                        $timedisplay = 0;\n                    }\n\n                    if (\n                        ($output_type == Search::HTML_OUTPUT)\n                        || ($output_type == Search::PDF_OUTPUT_LANDSCAPE)\n                        || ($output_type == Search::PDF_OUTPUT_PORTRAIT)\n                    ) {\n                        $timedisplay = Html::timestampToString($timedisplay, 0, false);\n                    } else if ($output_type == Search::CSV_OUTPUT) {\n                        $timedisplay = Html::timestampToCsvString($timedisplay);\n                    }\n                    echo Search::showItem($output_type, $timedisplay, $item_num, $row_num);\n                }\n\n              //Le temps moyen de resolution - The average time to resolv\n                $data = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_avgsolvedtime\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                foreach (array_keys($data) as $key2) {\n                    $data[$key2] = round($data[$key2] * $solved[$key2]);\n                }\n\n                if ($nb_solved > 0) {\n                    $timedisplay = array_sum($data) / $nb_solved;\n                } else {\n                    $timedisplay = 0;\n                }\n                if (\n                    ($output_type == Search::HTML_OUTPUT)\n                    || ($output_type == Search::PDF_OUTPUT_LANDSCAPE)\n                    || ($output_type == Search::PDF_OUTPUT_PORTRAIT)\n                ) {\n                    $timedisplay = Html::timestampToString($timedisplay, 0, false);\n                } else if ($output_type == Search::CSV_OUTPUT) {\n                    $timedisplay = Html::timestampToCsvString($timedisplay);\n                }\n                echo Search::showItem($output_type, $timedisplay, $item_num, $row_num);\n\n              //Le temps moyen de cloture - The average time to close\n                $data = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_avgclosedtime\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                foreach (array_keys($data) as $key2) {\n                    $data[$key2] = round($data[$key2] * $solved[$key2]);\n                }\n\n                if ($nb_closed > 0) {\n                    $timedisplay = array_sum($data) / $nb_closed;\n                } else {\n                    $timedisplay = 0;\n                }\n                if (\n                    ($output_type == Search::HTML_OUTPUT)\n                    || ($output_type == Search::PDF_OUTPUT_LANDSCAPE)\n                    || ($output_type == Search::PDF_OUTPUT_PORTRAIT)\n                ) {\n                    $timedisplay = Html::timestampToString($timedisplay, 0, false);\n                } else if ($output_type == Search::CSV_OUTPUT) {\n                    $timedisplay = Html::timestampToCsvString($timedisplay);\n                }\n                echo Search::showItem($output_type, $timedisplay, $item_num, $row_num);\n\n              //the number of solved interventions with a duration time\n                $solved_with_actiontime = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_solved_with_actiontime\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                $nb_solved_with_actiontime = array_sum($solved_with_actiontime);\n\n              //Le temps moyen de l'intervention reelle - The average actiontime to resolv\n                $data = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_avgactiontime\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                foreach (array_keys($data) as $key2) {\n                    if (isset($solved_with_actiontime[$key2])) {\n                        $data[$key2] *= $solved_with_actiontime[$key2];\n                    } else {\n                        $data[$key2] *= 0;\n                    }\n                }\n                $total_actiontime = array_sum($data);\n\n                if ($nb_solved_with_actiontime > 0) {\n                    $timedisplay = $total_actiontime / $nb_solved_with_actiontime;\n                } else {\n                    $timedisplay = 0;\n                }\n\n                if (\n                    ($output_type == Search::HTML_OUTPUT)\n                    || ($output_type == Search::PDF_OUTPUT_LANDSCAPE)\n                    || ($output_type == Search::PDF_OUTPUT_PORTRAIT)\n                ) {\n                    $timedisplay = Html::timestampToString($timedisplay, 0, false);\n                } else if ($output_type == Search::CSV_OUTPUT) {\n                    $timedisplay = Html::timestampToCsvString($timedisplay);\n                }\n                echo Search::showItem($output_type, $timedisplay, $item_num, $row_num);\n              //Le temps total de l'intervention reelle - The total actiontime to resolv\n                $timedisplay = $total_actiontime;\n\n                if (\n                    ($output_type == Search::HTML_OUTPUT)\n                    || ($output_type == Search::PDF_OUTPUT_LANDSCAPE)\n                    || ($output_type == Search::PDF_OUTPUT_PORTRAIT)\n                ) {\n                    $timedisplay = Html::timestampToString($timedisplay, 0, false);\n                } else if ($output_type == Search::CSV_OUTPUT) {\n                    $timedisplay = Html::timestampToCsvString($timedisplay);\n                }\n                echo Search::showItem($output_type, $timedisplay, $item_num, $row_num);\n\n                echo Search::showEndLine($output_type);\n            }\n          // Display footer\n            echo Search::showFooter($output_type, '', $numrows);\n        } else {\n            echo __('No statistics are available');\n        }\n\n        if ($output_type == Search::HTML_OUTPUT) { // HTML display\n            echo \"</div>\";\n        }\n    }\n\n\n    /**\n     * @param $itemtype\n     * @param $type\n     * @param $begin              (default '')\n     * @param $end                (default '')\n     * @param $param              (default '')\n     * @param $value              (default '')\n     * @param $value2             (default '')\n     * @param $add_criteria          (default [''])\n     */\n    public static function constructEntryValues(\n        $itemtype,\n        $type,\n        $begin = \"\",\n        $end = \"\",\n        $param = \"\",\n        $value = \"\",\n        $value2 = \"\",\n        array $add_criteria = []\n    ) {\n        $DB = \\DBConnection::getReadConnection();\n\n        if (!$item = getItemForItemtype($itemtype)) {\n            return;\n        }\n        /** @var CommonITILObject $item */\n        $table          = $item->getTable();\n        $fkfield        = $item->getForeignKeyField();\n\n        if (!($userlinkclass = getItemForItemtype($item->userlinkclass))) {\n            return;\n        }\n        $userlinktable  = $userlinkclass->getTable();\n        if (!$grouplinkclass = getItemForItemtype($item->grouplinkclass)) {\n            return;\n        }\n        $grouplinktable = $grouplinkclass->getTable();\n\n        if (!($supplierlinkclass = getItemForItemtype($item->supplierlinkclass))) {\n            return;\n        }\n        $supplierlinktable = $supplierlinkclass->getTable();\n\n        $tasktable      = getTableForItemType($item->getType() . 'Task');\n\n        $closed_status  = $item->getClosedStatusArray();\n        $solved_status  = array_merge($closed_status, $item->getSolvedStatusArray());\n\n        $criteria = [];\n        $WHERE = [];\n        if ($item->maybeDeleted()) {\n            $WHERE[\"$table.is_deleted\"] = 0;\n        }\n        $WHERE += getEntitiesRestrictCriteria($table);\n        $LEFTJOIN          = [];\n        $INNERJOIN         = [];\n        $LEFTJOINUSER      = [\n            $userlinktable => [\n                'ON' => [\n                    $userlinktable => $fkfield,\n                    $table         => 'id'\n                ]\n            ]\n        ];\n        $LEFTJOINGROUP    = [\n            $grouplinktable => [\n                'ON' => [\n                    $grouplinktable   => $fkfield,\n                    $table            => 'id'\n                ]\n            ]\n        ];\n        $LEFTJOINSUPPLIER = [\n            $supplierlinktable => [\n                'ON' => [\n                    $supplierlinktable   => $fkfield,\n                    $table               => 'id'\n                ]\n            ]\n        ];\n\n        switch ($param) {\n            case \"technicien\":\n                $LEFTJOIN = $LEFTJOINUSER;\n                $WHERE[\"$userlinktable.users_id\"] = $value;\n                $WHERE[\"$userlinktable.type\"] = CommonITILActor::ASSIGN;\n                break;\n\n            case \"technicien_followup\":\n                $WHERE[\"$tasktable.users_id\"] = $value;\n                $LEFTJOIN = [\n                    $tasktable => [\n                        'ON' => [\n                            $tasktable  => $fkfield,\n                            $table      => 'id'\n                        ]\n                    ]\n                ];\n                break;\n\n            case \"user\":\n                $LEFTJOIN = $LEFTJOINUSER;\n                $WHERE[\"$userlinktable.users_id\"] = $value;\n                $WHERE[\"$userlinktable.type\"] = CommonITILActor::REQUESTER;\n                break;\n\n            case \"usertitles_id\":\n                $LEFTJOIN  = $LEFTJOINUSER;\n                $LEFTJOIN['glpi_users'] = [\n                    'ON' => [\n                        $userlinktable => 'users_id',\n                        'glpi_users'   => 'id'\n                    ]\n                ];\n                $WHERE[\"glpi_users.usertitles_id\"] = $value;\n                $WHERE[\"$userlinktable.type\"] = CommonITILActor::REQUESTER;\n                break;\n\n            case \"usercategories_id\":\n                $LEFTJOIN  = $LEFTJOINUSER;\n                $LEFTJOIN['glpi_users'] = [\n                    'ON' => [\n                        $userlinktable => 'users_id',\n                        'glpi_users'   => 'id'\n                    ]\n                ];\n                $WHERE[\"glpi_users.usercategories_id\"] = $value;\n                $WHERE[\"$userlinktable.type\"] = CommonITILActor::REQUESTER;\n                break;\n\n            case \"itilcategories_tree\":\n                if ($value == $value2) {\n                    $categories = [$value];\n                } else {\n                    $categories = getSonsOf(\"glpi_itilcategories\", $value);\n                }\n                $WHERE[\"$table.itilcategories_id\"] = $categories;\n                break;\n\n            case 'locations_tree':\n                if ($value == $value2) {\n                    $locations = [$value];\n                } else {\n                    $locations = getSonsOf('glpi_locations', $value);\n                }\n                $WHERE[\"$table.locations_id\"] = $locations;\n                break;\n\n            case 'group_tree':\n            case 'groups_tree_assign':\n                $grptype = (($param == 'group_tree') ? CommonITILActor::REQUESTER\n                                                 : CommonITILActor::ASSIGN);\n                if ($value == $value2) {\n                     $groups = [$value];\n                } else {\n                    $groups = getSonsOf(\"glpi_groups\", $value);\n                }\n\n                $LEFTJOIN  = $LEFTJOINGROUP;\n                $WHERE[\"$grouplinktable.groups_id\"] = $groups;\n                $WHERE[\"$grouplinktable.type\"] = $grptype;\n                break;\n\n            case \"group\":\n                $LEFTJOIN = $LEFTJOINGROUP;\n                $WHERE[\"$grouplinktable.groups_id\"] = $value;\n                $WHERE[\"$grouplinktable.type\"] = CommonITILActor::REQUESTER;\n                break;\n\n            case \"groups_id_assign\":\n                $LEFTJOIN = $LEFTJOINGROUP;\n                $WHERE[\"$grouplinktable.groups_id\"] = $value;\n                $WHERE[\"$grouplinktable.type\"] = CommonITILActor::ASSIGN;\n                break;\n\n            case \"suppliers_id_assign\":\n                $LEFTJOIN = $LEFTJOINSUPPLIER;\n                $WHERE[\"$supplierlinktable.suppliers_id\"] = $value;\n                $WHERE[\"$supplierlinktable.type\"] = CommonITILActor::ASSIGN;\n                break;\n\n            case \"requesttypes_id\":\n            case \"urgency\":\n            case \"impact\":\n            case \"priority\":\n            case \"users_id_recipient\":\n            case \"type\":\n            case \"itilcategories_id\":\n            case 'locations_id':\n                $WHERE[\"$table.$param\"] = $value;\n                break;\n\n            case \"solutiontypes_id\":\n                $LEFTJOIN = [\n                    'glpi_itilsolutions' => [\n                        'ON' => [\n                            'glpi_itilsolutions'   => 'items_id',\n                            'glpi_tickets'               => 'id', [\n                                'AND' => [\n                                    'glpi_itilsolutions.itemtype' => 'Ticket'\n                                ]\n                            ]\n                        ]\n                    ]\n                ];\n                $WHERE[\"glpi_itilsolutions.$param\"] = $value;\n                break;\n\n            case \"device\":\n                $devtable = getTableForItemType('Item_' . $value2);\n                $fkname   = getForeignKeyFieldForTable(getTableForItemType($value2));\n               //select computers IDs that are using this device;\n                $linkedtable = $table;\n                if ($itemtype == 'Ticket') {\n                    $linkedtable = 'glpi_items_tickets';\n                    $LEFTJOIN = [\n                        'glpi_items_tickets' => [\n                            'ON' => [\n                                'glpi_items_tickets' => 'tickets_id',\n                                'glpi_tickets'       => 'id', [\n                                    'AND' => [\n                                        \"$linkedtable.itemtype\" => 'Computer'\n                                    ]\n                                ]\n                            ]\n                        ]\n                    ];\n                }\n                $INNERJOIN = [\n                    'glpi_computers'  => [\n                        'ON' => [\n                            'glpi_computers'  => 'id',\n                            $linkedtable      => 'items_id'\n                        ]\n                    ],\n                    $devtable         => [\n                        'ON' => [\n                            'glpi_computers'  => 'id',\n                            $devtable         => 'items_id', [\n                                'AND' => [\n                                    \"$devtable.itemtype\" => Computer::class,\n                                    \"$devtable.$fkname\"  => $value\n                                ]\n                            ]\n                        ]\n                    ]\n                ];\n\n                $WHERE[\"glpi_computers.is_template\"] = 0;\n                break;\n\n            case \"comp_champ\":\n                $ftable   = getTableForItemType($value2);\n                $champ    = getForeignKeyFieldForTable($ftable);\n                $linkedtable = $table;\n                if ($itemtype == 'Ticket') {\n                    $linkedtable = 'glpi_items_tickets';\n                    $LEFTJOIN = [\n                        'glpi_items_tickets' => [\n                            'ON' => [\n                                'glpi_items_tickets' => 'tickets_id',\n                                'glpi_tickets'       => 'id', [\n                                    'AND' => [\n                                        \"$linkedtable.itemtype\" => 'Computer'\n                                    ]\n                                ]\n                            ]\n                        ]\n                    ];\n                }\n                $INNERJOIN = [\n                    'glpi_computers' => [\n                        'ON' => [\n                            'glpi_computers'  => 'id',\n                            $linkedtable      => 'items_id'\n                        ]\n                    ]\n                ];\n\n                $WHERE[\"glpi_computers.is_template\"] = 0;\n                if (substr($champ, 0, strlen('operatingsystem')) === 'operatingsystem') {\n                    $INNERJOIN['glpi_items_operatingsystems'] = [\n                        'ON' => [\n                            'glpi_computers'              => 'id',\n                            'glpi_items_operatingsystems' => 'items_id', [\n                                'AND' => [\n                                    \"glpi_items_operatingsystems.itemtype\" => 'Computer'\n                                ]\n                            ]\n                        ]\n                    ];\n                    $WHERE[\"glpi_items_operatingsystems.$champ\"] = $value;\n                } else {\n                    $WHERE[\"glpi_computers.$champ\"] = $value;\n                }\n                break;\n        }\n\n        switch ($type) {\n            case \"inter_total\":\n                $WHERE[] = getDateCriteria(\"$table.date\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.date\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'COUNT DISTINCT' => \"$table.id AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.date\"\n                ];\n                break;\n\n            case \"inter_solved\":\n                $WHERE[\"$table.status\"] = $solved_status;\n                $WHERE[] = ['NOT' => [\"$table.solvedate\" => null]];\n                $WHERE[] = getDateCriteria(\"$table.solvedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.solvedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'COUNT DISTINCT'  => \"$table.id AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.solvedate\"\n                ];\n                break;\n\n            case \"inter_solved_late\":\n                $WHERE[\"$table.status\"] = $solved_status;\n                $WHERE[] = [\n                    'NOT' => [\n                        \"$table.solvedate\"         => null,\n                        \"$table.time_to_resolve\"   => null\n                    ]\n                ];\n                $WHERE[] = getDateCriteria(\"$table.solvedate\", $begin, $end);\n                $WHERE[] = new QueryExpression(\"$table.solvedate > $table.time_to_resolve\");\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.solvedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'COUNT DISTINCT'  => \"$table.id AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.solvedate\"\n                ];\n                break;\n\n            case \"inter_closed\":\n                $WHERE[\"$table.status\"] = $closed_status;\n                $WHERE[] = ['NOT' => [\"$table.closedate\" => null]];\n                $WHERE[] = getDateCriteria(\"$table.closedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.closedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'COUNT DISTINCT'  => \"$table.id AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.closedate\"\n                ];\n                break;\n\n            case \"inter_solved_with_actiontime\":\n                $WHERE[\"$table.status\"] = $solved_status;\n                $WHERE[\"$table.actiontime\"] = ['>', 0];\n                $WHERE[] = ['NOT' => [\"$table.solvedate\" => null]];\n                $WHERE[] = getDateCriteria(\"$table.solvedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.solvedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'COUNT DISTINCT'  => \"$table.id AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.solvedate\"\n                ];\n                break;\n\n            case \"inter_avgsolvedtime\":\n                $WHERE[\"$table.status\"] = $solved_status;\n                $WHERE[] = ['NOT' => [\"$table.solvedate\" => null]];\n                $WHERE[] = getDateCriteria(\"$table.solvedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.solvedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'AVG' => \"solve_delay_stat AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.solvedate\"\n                ];\n                break;\n\n            case \"inter_avgclosedtime\":\n                $WHERE[\"$table.status\"] = $closed_status;\n                $WHERE[] = ['NOT' => [\"$table.closedate\" => null]];\n                $WHERE[] = getDateCriteria(\"$table.closedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.closedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'AVG'  => \"close_delay_stat AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.closedate\"\n                ];\n                break;\n\n            case \"inter_avgactiontime\":\n                if ($param == \"technicien_followup\") {\n                    $actiontime_table = $tasktable;\n                } else {\n                    $actiontime_table = $table;\n                }\n                $WHERE[\"$actiontime_table.actiontime\"] = ['>', 0];\n                $WHERE[] = getDateCriteria(\"$table.solvedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.solvedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'AVG'  => \"$actiontime_table.actiontime AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.solvedate\"\n                ];\n                break;\n\n            case \"inter_avgtakeaccount\":\n                $WHERE[\"$table.status\"] = $solved_status;\n                $WHERE[] = ['NOT' => [\"$table.solvedate\" => null]];\n                $WHERE[] = getDateCriteria(\"$table.solvedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.solvedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'AVG'  => \"$table.takeintoaccount_delay_stat AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.solvedate\"\n                ];\n                break;\n\n            case \"inter_opensatisfaction\":\n                $WHERE[\"$table.status\"] = $closed_status;\n                $WHERE[] = ['NOT' => [\"$table.closedate\" => null]];\n                $WHERE[] = getDateCriteria(\"$table.closedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.closedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $INNERJOIN['glpi_ticketsatisfactions'] = [\n                    'ON' => [\n                        'glpi_ticketsatisfactions' => 'tickets_id',\n                        $table                     => 'id'\n                    ]\n                ];\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'COUNT DISTINCT'  => \"$table.id AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.closedate\"\n                ];\n                break;\n\n            case \"inter_answersatisfaction\":\n                $WHERE[\"$table.status\"] = $closed_status;\n                $WHERE[] = [\n                    ['NOT' => [\"$table.closedate\" => null]],\n                    ['NOT' => [\"glpi_ticketsatisfactions.date_answered\"  => null]],\n                ];\n\n                $WHERE[] = getDateCriteria(\"$table.closedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.closedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $INNERJOIN['glpi_ticketsatisfactions'] = [\n                    'ON' => [\n                        'glpi_ticketsatisfactions' => 'tickets_id',\n                        $table                     => 'id'\n                    ]\n                ];\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'COUNT DISTINCT'  => \"$table.id AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.closedate\"\n                ];\n                break;\n\n            case \"inter_avgsatisfaction\":\n                $WHERE[\"$table.status\"] = $closed_status;\n                $WHERE[] = [\n                    'NOT' => [\n                        \"$table.closedate\" => null,\n                        \"glpi_ticketsatisfactions.date_answered\" => null\n                    ]\n                ];\n                $WHERE[] = getDateCriteria(\"$table.closedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.closedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $INNERJOIN['glpi_ticketsatisfactions'] = [\n                    'ON' => [\n                        'glpi_ticketsatisfactions' => 'tickets_id',\n                        $table                     => 'id'\n                    ]\n                ];\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'AVG'  => \"glpi_ticketsatisfactions.satisfaction AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.closedate\"\n                ];\n                break;\n        }\n\n        if (count($LEFTJOIN)) {\n            $criteria['LEFT JOIN'] = $LEFTJOIN;\n        }\n\n        if (count($INNERJOIN)) {\n            $criteria['INNER JOIN'] = $INNERJOIN;\n        }\n\n        $entrees = [];\n        if (!count($criteria)) {\n            return [];\n        }\n\n        if (count($add_criteria)) {\n            $criteria = array_merge_recursive($criteria, $add_criteria);\n        }\n\n        $iterator = $DB->request($criteria);\n        foreach ($iterator as $row) {\n            $date             = $row['date_unix'];\n           //$visites = round($row['total_visites']);\n            $entrees[\"$date\"] = $row['total_visites'];\n        }\n\n        $end_time   = strtotime(date(\"Y-m\", strtotime($end)) . \"-01\");\n        $begin_time = strtotime(date(\"Y-m\", strtotime($begin)) . \"-01\");\n\n        $current = $begin_time;\n\n        while ($current <= $end_time) {\n            $curentry = date(\"Y-m\", $current);\n            if (!isset($entrees[\"$curentry\"])) {\n                $entrees[\"$curentry\"] = 0;\n            }\n            $month   = date(\"m\", $current);\n            $year    = date(\"Y\", $current);\n            $current = mktime(0, 0, 0, intval($month) + 1, 1, intval($year));\n        }\n        ksort($entrees);\n\n        return $entrees;\n    }\n\n    /**\n     * @param string $target\n     * @param string $date1\n     * @param string $date2\n     * @param int $start\n     **/\n    public static function showItems($target, $date1, $date2, $start)\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        $view_entities = Session::isMultiEntitiesMode();\n\n        if ($view_entities) {\n            $entities = getAllDataFromTable('glpi_entities');\n        }\n\n        $output_type = Search::HTML_OUTPUT;\n        if (isset($_GET[\"display_type\"])) {\n            $output_type = $_GET[\"display_type\"];\n        }\n        if (empty($date2)) {\n            $date2 = date(\"Y-m-d\");\n        }\n        $date2 .= \" 23:59:59\";\n\n       // 1 an par defaut\n        if (empty($date1)) {\n            $date1 = date(\"Y-m-d\", mktime(0, 0, 0, date(\"m\"), date(\"d\"), date(\"Y\") - 1));\n        }\n        $date1 .= \" 00:00:00\";\n\n        $iterator = $DB->request([\n            'SELECT' => [\n                'glpi_items_tickets.itemtype',\n                'glpi_items_tickets.items_id',\n                'COUNT'  => '* AS NB'\n            ],\n            'FROM'   => 'glpi_tickets',\n            'LEFT JOIN' => [\n                'glpi_items_tickets' => [\n                    'ON' => [\n                        'glpi_items_tickets' => 'tickets_id',\n                        'glpi_tickets'       => 'id'\n                    ]\n                ]\n            ],\n            'WHERE'  => [\n                'date'                        => ['<=', $date2],\n                'glpi_tickets.date'           => ['>=', $date1],\n                'glpi_items_tickets.itemtype' => ['<>', ''],\n                'glpi_items_tickets.items_id' => ['>', 0]\n            ] + getEntitiesRestrictCriteria('glpi_tickets'),\n            'GROUP'  => [\n                'glpi_items_tickets.itemtype',\n                'glpi_items_tickets.items_id'\n            ],\n            'ORDER'  => 'NB DESC'\n        ]);\n        $numrows = count($iterator);\n\n        if ($numrows > 0) {\n            if ($output_type == Search::HTML_OUTPUT) {\n                Html::printPager(\n                    $start,\n                    $numrows,\n                    $target,\n                    \"date1=\" . $date1 . \"&amp;date2=\" . $date2 .\n                                 \"&amp;type=hardwares&amp;start=$start\",\n                    'Stat'\n                );\n                echo \"<div class='center'>\";\n            }\n\n            $end_display = $start + $_SESSION['glpilist_limit'];\n            if (isset($_GET['export_all'])) {\n                $end_display = $numrows;\n            }\n            echo Search::showHeader($output_type, $end_display - $start + 1, 2, 1);\n            $header_num = 1;\n            echo Search::showNewLine($output_type);\n            echo Search::showHeaderItem($output_type, _n('Associated element', 'Associated elements', Session::getPluralNumber()), $header_num);\n            if ($view_entities) {\n                echo Search::showHeaderItem($output_type, Entity::getTypeName(1), $header_num);\n            }\n            echo Search::showHeaderItem($output_type, __('Number of tickets'), $header_num);\n            echo Search::showEndLine($output_type);\n\n            $i = $start;\n            if (isset($_GET['export_all'])) {\n                $start = 0;\n            }\n\n            $i = $start;\n            foreach ($iterator as $data) {\n                $item_num = 1;\n               // Get data and increment loop variables\n                if (!($item = getItemForItemtype($data[\"itemtype\"]))) {\n                    continue;\n                }\n                if ($item->getFromDB($data[\"items_id\"])) {\n                    echo Search::showNewLine($output_type, $i % 2);\n                    echo Search::showItem(\n                        $output_type,\n                        sprintf(\n                            __('%1$s - %2$s'),\n                            $item->getTypeName(),\n                            $item->getLink()\n                        ),\n                        $item_num,\n                        $i - $start + 1,\n                        \"class='center'\" . \" \" . ($item->isDeleted() ? \" class='deleted' \"\n                        : \"\")\n                    );\n                    if ($view_entities) {\n                          $ent = $item->getEntityID();\n                          $ent = $entities[$ent]['completename'];\n                          echo Search::showItem(\n                              $output_type,\n                              $ent,\n                              $item_num,\n                              $i - $start + 1,\n                              \"class='center'\" . \" \" . ($item->isDeleted() ? \" class='deleted' \"\n                              : \"\")\n                          );\n                    }\n                    echo Search::showItem(\n                        $output_type,\n                        $data[\"NB\"],\n                        $item_num,\n                        $i - $start + 1,\n                        \"class='center'\" . \" \" . ($item->isDeleted() ? \" class='deleted' \"\n                        : \"\")\n                    );\n                }\n\n                $i++;\n                if ($i == $end_display) {\n                    break;\n                }\n            }\n\n            echo Search::showFooter($output_type);\n            if ($output_type == Search::HTML_OUTPUT) {\n                echo \"</div>\";\n            }\n        }\n    }\n\n\n    /**\n     * @since 0.84\n     **/\n    public static function title()\n    {\n        /**\n         * @var array $CFG_GLPI\n         * @var array $PLUGIN_HOOKS\n         */\n        global $CFG_GLPI, $PLUGIN_HOOKS;\n\n        $opt_list[\"Ticket\"]                             = __('Tickets');\n\n        $stat_list = [];\n\n        $stat_list[\"Ticket\"][\"Ticket_Global\"][\"name\"]   = __('Global');\n        $stat_list[\"Ticket\"][\"Ticket_Global\"][\"file\"]   = \"stat.global.php?itemtype=Ticket\";\n        $stat_list[\"Ticket\"][\"Ticket_Ticket\"][\"name\"]   = __('By ticket');\n        $stat_list[\"Ticket\"][\"Ticket_Ticket\"][\"file\"]   = \"stat.tracking.php?itemtype=Ticket\";\n        $stat_list[\"Ticket\"][\"Ticket_Location\"][\"name\"] = __('By hardware characteristics');\n        $stat_list[\"Ticket\"][\"Ticket_Location\"][\"file\"] = \"stat.location.php?itemtype=Ticket\";\n        $stat_list[\"Ticket\"][\"Ticket_Item\"][\"name\"]     = __('By hardware');\n        $stat_list[\"Ticket\"][\"Ticket_Item\"][\"file\"]     = \"stat.item.php\";\n\n        if (Problem::canView()) {\n            $opt_list[\"Problem\"]                               = Problem::getTypeName(Session::getPluralNumber());\n\n            $stat_list[\"Problem\"][\"Problem_Global\"][\"name\"]    = __('Global');\n            $stat_list[\"Problem\"][\"Problem_Global\"][\"file\"]    = \"stat.global.php?itemtype=Problem\";\n            $stat_list[\"Problem\"][\"Problem_Problem\"][\"name\"]   = __('By problem');\n            $stat_list[\"Problem\"][\"Problem_Problem\"][\"file\"]   = \"stat.tracking.php?itemtype=Problem\";\n        }\n\n        if (Change::canView()) {\n            $opt_list[\"Change\"]                             = _n('Change', 'Changes', Session::getPluralNumber());\n\n            $stat_list[\"Change\"][\"Change_Global\"][\"name\"]   = __('Global');\n            $stat_list[\"Change\"][\"Change_Global\"][\"file\"]   = \"stat.global.php?itemtype=Change\";\n            $stat_list[\"Change\"][\"Change_Change\"][\"name\"]   = __('By change');\n            $stat_list[\"Change\"][\"Change_Change\"][\"file\"]   = \"stat.tracking.php?itemtype=Change\";\n        }\n\n       //Affichage du tableau de presentation des stats\n        echo \"<table class='tab_cadre_fixe'>\";\n        echo \"<tr><th colspan='2'>\" . __('Select statistics to be displayed') . \"</th></tr>\";\n        echo \"<tr class='tab_bg_1'><td class='center'>\";\n\n        $values   = [$CFG_GLPI[\"root_doc\"] . '/front/stat.php' => Dropdown::EMPTY_VALUE];\n\n        $selected = -1;\n        foreach ($opt_list as $opt => $group) {\n            foreach ($stat_list[$opt] as $data) {\n                $name    = $data['name'];\n                $file    = $data['file'];\n                $key                  = $CFG_GLPI[\"root_doc\"] . \"/front/\" . $file;\n                $values[$group][$key] = $name;\n                if (stripos($_SERVER['REQUEST_URI'], $key) !== false) {\n                    $selected = $key;\n                }\n            }\n        }\n\n       // Manage plugins\n        $names    = [];\n        $optgroup = [];\n        if (isset($PLUGIN_HOOKS[\"stats\"]) && is_array($PLUGIN_HOOKS[\"stats\"])) {\n            foreach ($PLUGIN_HOOKS[\"stats\"] as $plug => $pages) {\n                if (!Plugin::isPluginActive($plug)) {\n                    continue;\n                }\n                if (is_array($pages) && count($pages)) {\n                    foreach ($pages as $page => $name) {\n                        $names[Plugin::getWebDir($plug, false) . '/' . $page] = [\"name\" => $name,\n                            \"plug\" => $plug\n                        ];\n                        $optgroup[$plug] = Plugin::getInfo($plug, 'name');\n                    }\n                }\n            }\n            asort($names);\n        }\n\n        foreach ($optgroup as $opt => $title) {\n            $group = $title;\n            foreach ($names as $key => $val) {\n                if ($opt == $val[\"plug\"]) {\n                    $file                  = $CFG_GLPI[\"root_doc\"] . \"/\" . $key;\n                    $values[$group][$file] = $val[\"name\"];\n                    if (stripos($_SERVER['REQUEST_URI'], $file) !== false) {\n                        $selected = $file;\n                    }\n                }\n            }\n        }\n\n        Dropdown::showFromArray(\n            'statmenu',\n            $values,\n            ['on_change' => \"window.location.href=this.options[this.selectedIndex].value\",\n                'value'     => $selected\n            ]\n        );\n        echo \"</td>\";\n        echo \"</tr>\";\n        echo \"</table>\";\n    }\n\n\n    /**\n     * @since 0.85\n     **/\n    public function getRights($interface = 'central')\n    {\n\n        $values[READ] = __('Read');\n        return $values;\n    }\n\n    /**\n     * Call displayLineGraph with arguments from a StatData object\n     */\n    public function displayLineGraphFromData(StatData $stat_data)\n    {\n        if ($stat_data->isEmpty()) {\n            return;\n        }\n\n        $this->displayLineGraph(\n            $stat_data->getTitle(),\n            $stat_data->getLabels(),\n            $stat_data->getSeries(),\n            $stat_data->getOptions(),\n            true,\n            $stat_data->getCsvLink()\n        );\n    }\n\n    /**\n     * Display line graph\n     *\n     * @param string   $title  Graph title\n     * @param string[] $labels Labels to display\n     * @param array    $series Series data. An array of the form:\n     *                 [\n     *                    ['name' => 'a name', 'data' => []],\n     *                    ['name' => 'another name', 'data' => []]\n     *                 ]\n     * @param array    $options  Options\n     * @param boolean  $display  Whether to display directly; defauts to true\n     * @param string   $csv_link Link to download the dataset as csv\n     *\n     * @return void\n     */\n    public function displayLineGraph(\n        $title,\n        $labels,\n        $series,\n        $options = null,\n        $display = true,\n        ?string $csv_link = null\n    ) {\n        $param = [\n            'width'   => 900,\n            'height'  => 300,\n            'tooltip' => true,\n            'legend'  => true,\n            'animate' => true,\n            'csv'     => true\n        ];\n\n        if (is_array($options) && count($options)) {\n            foreach ($options as $key => $val) {\n                $param[$key] = $val;\n            }\n        }\n\n        $slug = str_replace('-', '_', Toolbox::slugify($title));\n        $this->checkEmptyLabels($labels);\n        $out = \"<h2 class='center'>$title\";\n        if ($param['csv'] && $csv_link) {\n            $out .= \" <a href='$csv_link' title='\" . __s('CSV') . \"' class='pointer fa fa-file-alt export-stat'><span class='sr-only'>\" . __('CSV') . \"</span></a>\";\n        }\n        $out .= \"</h2>\";\n        $out .= \"<div id='$slug' class='chart'></div>\";\n        Html::requireJs('charts');\n        $out .= \"<script type='text/javascript'>\n                  $(function() {\n                     var chart_$slug = new Chartist.Line('#$slug', {\n                        labels: ['\" . implode('\\', \\'', Toolbox::addslashes_deep($labels))  . \"'],\n                        series: [\";\n\n        $first = true;\n        foreach ($series as $serie) {\n            if ($first === true) {\n                $first = false;\n            } else {\n                $out .= \",\\n\";\n            }\n            $serieData = implode(', ', $serie['data']);\n            if (isset($serie['name'])) {\n                $serieLabel = Toolbox::addslashes_deep($serie['name']);\n                $out .= \"{'name': '$serieLabel', 'data': [$serieData]}\";\n            } else {\n                $out .= \"[$serieData]\";\n            }\n        }\n\n        $out .= \"\n                        ]\n                     }, {\n                        low: 0,\n                        showArea: true,\n                        width: '{$param['width']}',\n                        height: '{$param['height']}',\n                        fullWidth: true,\n                        lineSmooth: Chartist.Interpolation.simple({\n                           divisor: 10,\n                           fillHoles: false\n                        }),\n                        axisX: {\n                           labelOffset: {\n                              x: -\" . mb_strlen($labels[0]) * 7  . \"\n                           }\n                        }\";\n\n        if ($param['legend'] === true || $param['tooltip'] === true) {\n            $out .= \", plugins: [\";\n            if ($param['legend'] === true) {\n                $out .= \"Chartist.plugins.legend()\";\n            }\n            if ($param['tooltip'] === true) {\n                $out .= ($param['legend'] === true ? ',' : '') . \"Chartist.plugins.tooltip()\";\n            }\n            $out .= \"]\";\n        }\n\n        $out .= \"});\";\n\n        if ($param['animate'] === true) {\n                  $out .= \"\n                     chart_$slug.on('draw', function(data) {\n                        if(data.type === 'line' || data.type === 'area') {\n                           data.element.animate({\n                              d: {\n                                 begin: 300 * data.index,\n                                 dur: 500,\n                                 from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n                                 to: data.path.clone().stringify(),\n                                 easing: Chartist.Svg.Easing.easeOutQuint\n                              }\n                           });\n                        }\n                     });\n                  });\";\n        }\n        $out .= \"</script>\";\n\n        if ($display) {\n            echo $out;\n            return;\n        }\n        return $out;\n    }\n\n    /**\n     * Call displayPieGraph with arguments from a StatData object\n     */\n    public function displayPieGraphFromData(StatData $stat_data)\n    {\n        if ($stat_data->isEmpty()) {\n            return;\n        }\n\n        $this->displayPieGraph(\n            $stat_data->getTitle(),\n            $stat_data->getLabels(),\n            $stat_data->getSeries(),\n            $stat_data->getOptions(),\n            true,\n            $stat_data->getCsvLink()\n        );\n    }\n\n    /**\n     * Display pie graph\n     *\n     * @param string   $title  Graph title\n     * @param string[] $labels Labels to display\n     * @param array    $series Series data. An array of the form:\n     *                 [\n     *                    ['name' => 'a name', 'data' => []],\n     *                    ['name' => 'another name', 'data' => []]\n     *                 ]\n     * @param array    $options  Options\n     * @param boolean  $display  Whether to display directly; defauts to true\n     * @param string   $csv_link Link to download the dataset as csv\n     *\n     * @return void\n     */\n    public function displayPieGraph(\n        $title,\n        $labels,\n        $series,\n        $options = [],\n        $display = true,\n        ?string $csv_link = null\n    ) {\n        $param = [\n            'csv'     => true\n        ];\n\n        if (is_array($options) && count($options)) {\n            foreach ($options as $key => $val) {\n                $param[$key] = $val;\n            }\n        }\n\n        $slug = str_replace('-', '_', Toolbox::slugify($title));\n        $this->checkEmptyLabels($labels);\n        $out = \"<h2 class='center'>$title\";\n        if ($param['csv']) {\n            $options['title'] = $title;\n\n            if ($csv_link) {\n                $out .= \" <a href='$csv_link' title='\" . __s('CSV') . \"' class='pointer fa fa-file-alt export-stat'><span class='sr-only'>\" . __('CSV') . \"</span></a>\";\n            }\n        }\n        $out .= \"</h2>\";\n        $out .= \"<div id='$slug' class='chart'></div>\";\n        $out .= \"<script type='text/javascript'>\n                  $(function() {\n                     var $slug = new Chartist.Pie('#$slug', {\n                        labels: ['\" . implode('\\', \\'', Toolbox::addslashes_deep($labels))  . \"'],\n                        series: [\";\n\n        $first = true;\n        foreach ($series as $serie) {\n            if ($first === true) {\n                $first = false;\n            } else {\n                $out .= \",\\n\";\n            }\n\n            $serieLabel = Toolbox::addslashes_deep($serie['name']);\n            $serieData = $serie['data'];\n            $out .= \"{'meta': '$serieLabel', 'value': '$serieData'}\";\n        }\n\n        $out .= \"\n                        ]\n                     }, {\n                        donut: true,\n                        showLabel: false,\n                        height: 300,\n                        width: 300,\n                        plugins: [\n                           Chartist.plugins.legend(),\n                           Chartist.plugins.tooltip()\n                        ]\n                     });\n\n                     $slug.on('draw', function(data) {\n                        if(data.type === 'slice') {\n                           // Get the total path length in order to use for dash array animation\n                           var pathLength = data.element._node.getTotalLength();\n\n                           // Set a dasharray that matches the path length as prerequisite to animate dashoffset\n                           data.element.attr({\n                              'stroke-dasharray': pathLength + 'px ' + pathLength + 'px'\n                           });\n\n                           // Create animation definition while also assigning an ID to the animation for later sync usage\n                           var animationDefinition = {\n                              'stroke-dashoffset': {\n                                 id: 'anim' + data.index,\n                                 dur: 300,\n                                 from: -pathLength + 'px',\n                                 to:  '0px',\n                                 easing: Chartist.Svg.Easing.easeOutQuint,\n                                 // We need to use `fill: 'freeze'` otherwise our animation will fall back to initial (not visible)\n                                 fill: 'freeze'\n                              }\n                           };\n\n                           // We need to set an initial value before the animation starts as we are not in guided mode which would do that for us\n                           data.element.attr({\n                              'stroke-dashoffset': -pathLength + 'px'\n                           });\n\n                           // We can't use guided mode as the animations need to rely on setting begin manually\n                           // See http://gionkunz.github.io/chartist-js/api-documentation.html#chartistsvg-function-animate\n                           data.element.animate(animationDefinition, false);\n                        }\n                     });\n                  });\n              </script>\";\n\n        if ($display) {\n            echo $out;\n            return;\n        }\n        return $out;\n    }\n\n    /**\n     * Display search form\n     *\n     * @param string  $itemtype Item type\n     * @param string  $date1    First date\n     * @param string  $date2    Second date\n     * @param boolean $display  Whether to display directly; defauts to true\n     *\n     * @return void|string\n     */\n    public function displaySearchForm($itemtype, $date1, $date2, $display = true)\n    {\n        $out = \"<form method='get' name='form' action='stat.global.php'><div class='center'>\";\n       // Keep it at first parameter\n        $out .= \"<input type='hidden' name='itemtype' value='$itemtype'>\";\n\n        $out .= \"<table class='tab_cadre'>\";\n        $out .= \"<tr class='tab_bg_2'><td class='right'>\" . __('Start date') . \"</td><td>\";\n        $out .= Html::showDateField(\n            'date1',\n            [\n                'value'   => $date1,\n                'display' => false\n            ]\n        );\n        $out .= \"</td><td rowspan='2' class='center'>\";\n        $out .= \"<input type='submit' class='btn btn-primary' value='\" . __s('Display report') . \"'></td></tr>\";\n\n        $out .= \"<tr class='tab_bg_2'><td class='right'>\" . __('End date') . \"</td><td>\";\n        $out .= Html::showDateField(\n            'date2',\n            [\n                'value'   => $date2,\n                'display' => false\n            ]\n        );\n        $out .= \"</td></tr>\";\n        $out .= \"</table></div>\";\n       // form using GET method : CRSF not needed\n        $out .= Html::closeForm(false);\n\n        if ($display) {\n            echo $out;\n            return;\n        }\n        return $out;\n    }\n\n    /**\n     * Check and replace empty labels\n     *\n     * @param array $labels Labels\n     *\n     * @return void\n     */\n    private function checkEmptyLabels(&$labels)\n    {\n        foreach ($labels as &$label) {\n            if (empty($label)) {\n                $label = '-';\n            }\n        }\n    }\n\n    public static function getIcon()\n    {\n        return \"ti ti-chart-pie\";\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2024 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Stat\\Data\\Location\\StatDataClosed;\nuse Glpi\\Stat\\Data\\Location\\StatDataLate;\nuse Glpi\\Stat\\Data\\Location\\StatDataOpened;\nuse Glpi\\Stat\\Data\\Location\\StatDataOpenSatisfaction;\nuse Glpi\\Stat\\Data\\Location\\StatDataSolved;\n\n/** @var array $CFG_GLPI */\nglobal $CFG_GLPI;\n\ninclude('../inc/includes.php');\n\nHtml::header(__('Statistics'), '', \"helpdesk\", \"stat\");\n\nSession::checkRight(\"statistic\", READ);\n\n\nif (empty($_GET[\"showgraph\"])) {\n    $_GET[\"showgraph\"] = 0;\n}\n\nif (empty($_GET[\"date1\"]) && empty($_GET[\"date2\"])) {\n    $year          = date(\"Y\") - 1;\n    $_GET[\"date1\"] = date(\"Y-m-d\", mktime(1, 0, 0, date(\"m\"), date(\"d\"), $year));\n    $_GET[\"date2\"] = date(\"Y-m-d\");\n}\n\nif (\n    !empty($_GET[\"date1\"])\n    && !empty($_GET[\"date2\"])\n    && (strcmp($_GET[\"date2\"], $_GET[\"date1\"]) < 0)\n) {\n    $tmp           = $_GET[\"date1\"];\n    $_GET[\"date1\"] = $_GET[\"date2\"];\n    $_GET[\"date2\"] = $tmp;\n}\n\nif (!isset($_GET[\"start\"])) {\n    $_GET[\"start\"] = 0;\n}\n// Why this test ?? For me it's doing nothing\nif (isset($_GET[\"dropdown\"])) {\n    $_GET[\"dropdown\"] = $_GET[\"dropdown\"];\n}\n\nif (empty($_GET[\"dropdown\"])) {\n    $_GET[\"dropdown\"] = \"ComputerType\";\n}\n\nif (!isset($_GET['itemtype'])) {\n    $_GET['itemtype'] = 'Ticket';\n}\n\n$stat = new Stat();\nStat::title();\n\necho \"<form method='get' name='form' action='stat.location.php'>\";\n// keep it first param\necho \"<input type='hidden' name='itemtype' value='\" . $_GET['itemtype'] . \"'>\";\n\necho \"<table class='tab_cadre_fixe' ><tr class='tab_bg_2'><td rowspan='2' width='30%'>\";\n$values = [_n('Dropdown', 'Dropdowns', Session::getPluralNumber()) => ['ComputerType'    => _n('Type', 'Types', 1),\n    'ComputerModel'   => _n('Model', 'Models', 1),\n    'OperatingSystem' => OperatingSystem::getTypeName(1),\n    'Location'        => Location::getTypeName(1)\n],\n];\n$devices = Dropdown::getDeviceItemTypes();\nforeach ($devices as $label => $dp) {\n    foreach ($dp as $i => $name) {\n        $values[$label][$i] = $name;\n    }\n}\n\nDropdown::showFromArray('dropdown', $values, ['value' => $_GET[\"dropdown\"]]);\n\necho \"</td>\";\n\necho \"<td class='right'>\" . __('Start date') . \"</td><td>\";\nHtml::showDateField(\"date1\", ['value' => $_GET[\"date1\"]]);\necho \"</td>\";\necho \"<td class='right'>\" . __('Show graphics') . \"</td>\";\necho \"<td rowspan='2' class='center'>\";\necho \"<input type='submit' class='btn btn-primary' name='submit' value='\" . __s('Display report') . \"'></td></tr>\";\n\necho \"<tr class='tab_bg_2'><td class='right'>\" . __('End date') . \"</td><td>\";\nHtml::showDateField(\"date2\", ['value' => $_GET[\"date2\"]]);\necho \"</td><td class='center'>\";\nDropdown::showYesNo('showgraph', $_GET['showgraph']);\necho \"</td>\";\necho \"</tr>\";\necho \"</table>\";\n// form using GET method : CRSF not needed\necho \"</form>\";\n\nif (\n    empty($_GET[\"dropdown\"])\n    || !($item = getItemForItemtype($_GET[\"dropdown\"]))\n) {\n   // Do nothing\n    Html::footer();\n    exit();\n}\n\n\nif (!($item instanceof CommonDevice)) {\n   // echo \"Dropdown\";\n    $type = \"comp_champ\";\n\n    $val = Stat::getItems($_GET['itemtype'], $_GET[\"date1\"], $_GET[\"date2\"], $_GET[\"dropdown\"]);\n    $params = ['type'     => $type,\n        'dropdown' => $_GET[\"dropdown\"],\n        'date1'    => $_GET[\"date1\"],\n        'date2'    => $_GET[\"date2\"],\n        'start'    => $_GET[\"start\"]\n    ];\n} else {\n   //   echo \"Device\";\n    $type  = \"device\";\n\n    $val = Stat::getItems($_GET['itemtype'], $_GET[\"date1\"], $_GET[\"date2\"], $_GET[\"dropdown\"]);\n    $params = ['type'     => $type,\n        'dropdown' => $_GET[\"dropdown\"],\n        'date1'    => $_GET[\"date1\"],\n        'date2'    => $_GET[\"date2\"],\n        'start'    => $_GET[\"start\"]\n    ];\n}\n\nHtml::printPager(\n    $_GET['start'],\n    count($val),\n    $CFG_GLPI['root_doc'] . '/front/stat.location.php',\n    Toolbox::append_params(\n        [\n            'date1'    => $_GET['date1'],\n            'date2'    => $_GET['date2'],\n            'itemtype' => $_GET['itemtype'],\n            'dropdown' => $_GET['dropdown'],\n        ],\n        '&amp;'\n    ),\n    'Stat',\n    $params\n);\n\nif (!$_GET['showgraph']) {\n    Stat::showTable(\n        $_GET['itemtype'],\n        $type,\n        $_GET[\"date1\"],\n        $_GET[\"date2\"],\n        $_GET['start'],\n        $val,\n        $_GET[\"dropdown\"]\n    );\n} else {\n    $data_params = [\n        'itemtype' => $_GET['itemtype'],\n        'type'     => $type,\n        'date1'    => $_GET['date1'],\n        'date2'    => $_GET['date2'],\n        'start'    => $_GET['start'],\n        'val'      => $val,\n        'value2' => $_GET['dropdown'],\n    ];\n\n    $stat->displayPieGraphFromData(new StatDataOpened($data_params));\n    $stat->displayPieGraphFromData(new StatDataSolved($data_params));\n    $stat->displayPieGraphFromData(new StatDataLate($data_params));\n    $stat->displayPieGraphFromData(new StatDataClosed($data_params));\n    $stat->displayPieGraphFromData(new StatDataOpenSatisfaction($data_params));\n}\n\nHtml::footer();\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2024 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Stat\\Data\\Location\\StatDataClosed;\nuse Glpi\\Stat\\Data\\Location\\StatDataLate;\nuse Glpi\\Stat\\Data\\Location\\StatDataOpened;\nuse Glpi\\Stat\\Data\\Location\\StatDataOpenSatisfaction;\nuse Glpi\\Stat\\Data\\Location\\StatDataSolved;\n\n/** @var array $CFG_GLPI */\nglobal $CFG_GLPI;\n\ninclude('../inc/includes.php');\n\nHtml::header(__('Statistics'), '', \"helpdesk\", \"stat\");\n\nSession::checkRight(\"statistic\", READ);\n\nif (!$item = getItemForItemtype($_GET['itemtype'])) {\n    exit;\n}\n\nif (empty($_GET[\"type\"])) {\n    $_GET[\"type\"] = \"user\";\n}\n\nif (empty($_GET[\"showgraph\"])) {\n    $_GET[\"showgraph\"] = 0;\n}\n\nif (empty($_GET[\"value2\"])) {\n    $_GET[\"value2\"] = 0;\n}\n\nif (empty($_GET[\"date1\"]) && empty($_GET[\"date2\"])) {\n    $year              = date(\"Y\") - 1;\n    $_GET[\"date1\"] = date(\"Y-m-d\", mktime(1, 0, 0, date(\"m\"), date(\"d\"), $year));\n    $_GET[\"date2\"] = date(\"Y-m-d\");\n}\n\nif (\n    !empty($_GET[\"date1\"])\n    && !empty($_GET[\"date2\"])\n    && (strcmp($_GET[\"date2\"], $_GET[\"date1\"]) < 0)\n) {\n    $tmp           = $_GET[\"date1\"];\n    $_GET[\"date1\"] = $_GET[\"date2\"];\n    $_GET[\"date2\"] = $tmp;\n}\n\nif (!isset($_GET[\"start\"])) {\n    $_GET[\"start\"] = 0;\n}\n\n$stat = new Stat();\nStat::title();\n\n$requester = ['user'               => ['title' => _n('Requester', 'Requesters', 1)],\n    'users_id_recipient' => ['title' => __('Writer')],\n    'group'              => ['title' => Group::getTypeName(1)],\n    'group_tree'         => ['title' => __('Group tree')],\n    'usertitles_id'      => ['title' => _x('person', 'Title')],\n    'usercategories_id'  => ['title' => _n('Category', 'Categories', 1)]\n];\n\n$caract    = ['itilcategories_id'   => ['title' => _n('Category', 'Categories', 1)],\n    'itilcategories_tree' => ['title' => __('Category tree')],\n    'urgency'             => ['title' => __('Urgency')],\n    'impact'              => ['title' => __('Impact')],\n    'priority'            => ['title' => __('Priority')],\n    'solutiontypes_id'    => ['title' => SolutionType::getTypeName(1)]\n];\n\nif ($_GET['itemtype'] == 'Ticket') {\n    $caract['type']            = ['title' => _n('Type', 'Types', 1)];\n    $caract['requesttypes_id'] = ['title' => RequestType::getTypeName(1)];\n    $caract['locations_id']    = ['title' => Location::getTypeName(1)];\n    $caract['locations_tree']  = ['title' => __('Location tree')];\n}\n\n\n$items = [_n('Requester', 'Requesters', 1)       => $requester,\n    __('Characteristics') => $caract,\n    __('Assigned to')     => ['technicien'\n                                                   => ['title' => __('Technician as assigned')],\n        'technicien_followup'\n                                                   => ['title' => __('Technician in tasks')],\n        'groups_id_assign'\n                                                   => ['title' => Group::getTypeName(1)],\n        'groups_tree_assign'\n                                                   => ['title' => __('Group tree')],\n        'suppliers_id_assign'\n                                                   => ['title' => Supplier::getTypeName(1)]\n    ]\n];\n\n$values = [];\nforeach ($items as $label => $tab) {\n    foreach ($tab as $key => $val) {\n        $values[$label][$key] = $val['title'];\n    }\n}\n\necho \"<div class='center'><form method='get' name='form' action='stat.tracking.php'>\";\n// Keep it first param\necho \"<input type='hidden' name='itemtype' value=\\\"\" . $_GET[\"itemtype\"] . \"\\\">\";\n\necho \"<table class='tab_cadre_fixe'>\";\necho \"<tr class='tab_bg_2'><td rowspan='2' class='center' width='30%'>\";\nDropdown::showFromArray('type', $values, ['value' => $_GET['type']]);\necho \"</td>\";\necho \"<td class='right'>\" . __('Start date') . \"</td><td>\";\nHtml::showDateField(\"date1\", ['value' => $_GET[\"date1\"]]);\necho \"</td>\";\necho \"<td class='right'>\" . __('Show graphics') . \"</td>\";\necho \"<td rowspan='2' class='center'>\";\necho \"<input type='submit' class='btn btn-primary' name='submit' value=\\\"\" . __s('Display report') . \"\\\"></td>\" .\n     \"</tr>\";\n\necho \"<tr class='tab_bg_2'><td class='right'>\" . __('End date') . \"</td><td>\";\nHtml::showDateField(\"date2\", ['value' => $_GET[\"date2\"]]);\necho \"</td><td class='center'>\";\necho \"<input type='hidden' name='value2' value='\" . $_GET[\"value2\"] . \"'>\";\nDropdown::showYesNo('showgraph', $_GET['showgraph']);\necho \"</td></tr>\";\necho \"</table>\";\n// form using GET method : CRSF not needed\necho \"</form>\";\necho \"</div>\";\n\n$val    = Stat::getItems(\n    $_GET[\"itemtype\"],\n    $_GET[\"date1\"],\n    $_GET[\"date2\"],\n    $_GET[\"type\"],\n    $_GET[\"value2\"]\n);\n$params = ['type'   => $_GET[\"type\"],\n    'date1'  => $_GET[\"date1\"],\n    'date2'  => $_GET[\"date2\"],\n    'value2' => $_GET[\"value2\"],\n    'start'  => $_GET[\"start\"]\n];\n\nHtml::printPager(\n    $_GET['start'],\n    count($val),\n    $CFG_GLPI['root_doc'] . '/front/stat.tracking.php',\n    Toolbox::append_params(\n        [\n            'date1'     => $_GET['date1'],\n            'date2'     => $_GET['date2'],\n            'type'      => $_GET['type'],\n            'showgraph' => $_GET['showgraph'],\n            'itemtype'  => $_GET['itemtype'],\n            'value2'    => $_GET['value2'],\n        ],\n        '&amp;'\n    ),\n    'Stat',\n    $params\n);\n\nif (!$_GET['showgraph']) {\n    Stat::showTable(\n        $_GET[\"itemtype\"],\n        $_GET[\"type\"],\n        $_GET[\"date1\"],\n        $_GET[\"date2\"],\n        $_GET['start'],\n        $val,\n        $_GET['value2']\n    );\n} else {\n    $data = Stat::getData(\n        $_GET[\"itemtype\"],\n        $_GET[\"type\"],\n        $_GET[\"date1\"],\n        $_GET[\"date2\"],\n        $_GET['start'],\n        $val,\n        $_GET['value2']\n    );\n\n    $data_params = [\n        'itemtype' => $_GET['itemtype'],\n        'type'     => $_GET[\"type\"],\n        'date1'    => $_GET['date1'],\n        'date2'    => $_GET['date2'],\n        'start'    => $_GET['start'],\n        'val'      => $val,\n        'value2'   => $_GET['value2'],\n    ];\n\n    $stat->displayPieGraphFromData(new StatDataOpened($data_params));\n    $stat->displayPieGraphFromData(new StatDataSolved($data_params));\n    $stat->displayPieGraphFromData(new StatDataLate($data_params));\n    $stat->displayPieGraphFromData(new StatDataClosed($data_params));\n\n    if ($_GET['itemtype'] == 'Ticket') {\n        $stat->displayPieGraphFromData(new StatDataOpenSatisfaction($data_params));\n    }\n}\n\nHtml::footer();\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2024 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Stat\\StatData;\n\n/**\n *  Stat class\n **/\nclass Stat extends CommonGLPI\n{\n    public static $rightname = 'statistic';\n\n    public static $cache = [];\n\n    public static function getTypeName($nb = 0)\n    {\n        return __('Statistics');\n    }\n\n\n    /**\n     * @see CommonGLPI::getMenuShorcut()\n     *\n     * @since 0.85\n     **/\n    public static function getMenuShorcut()\n    {\n        return 'a';\n    }\n\n\n    /**\n     * @param $itemtype\n     * @param $date1\n     * @param $date2\n     * @param $type\n     * @param $parent    (default 0)\n     **/\n    public static function getItems($itemtype, $date1, $date2, $type, $parent = 0)\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        if (!$item = getItemForItemtype($itemtype)) {\n            return;\n        }\n        $val  = [];\n\n        switch ($type) {\n            case \"technicien\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedTechBetween($date1, $date2);\n                break;\n\n            case \"technicien_followup\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedTechTaskBetween($date1, $date2);\n                break;\n\n            case \"suppliers_id_assign\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedSupplierBetween($date1, $date2);\n                break;\n\n            case \"user\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedAuthorBetween($date1, $date2);\n                break;\n\n            case \"users_id_recipient\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedRecipientBetween($date1, $date2);\n                break;\n\n            case 'group_tree':\n            case 'groups_tree_assign':\n               // Get all groups\n                $is_field = ($type == 'group_tree') ? 'is_requester' : 'is_assign';\n                $iterator = $DB->request([\n                    'SELECT' => ['id', 'name'],\n                    'FROM'   => 'glpi_groups',\n                    'WHERE'  => [\n                        'OR'  => [\n                            'id'        => $parent,\n                            'groups_id' => $parent\n                        ],\n                        $is_field   => 1\n                    ] + getEntitiesRestrictCriteria(\"glpi_groups\", '', '', true),\n                    'ORDER'  => 'completename'\n                ]);\n\n                $val    = [];\n                foreach ($iterator as $line) {\n                     $val[] = [\n                         'id'     => $line['id'],\n                         'link'   => $line['name']\n                     ];\n                }\n                break;\n\n            case \"itilcategories_tree\":\n            case \"itilcategories_id\":\n                $is_tree = $type == 'itilcategories_tree';\n               // Get all ticket categories for tree merge management\n                $criteria = [\n                    'SELECT'    => [\n                        'glpi_itilcategories.id',\n                        'glpi_itilcategories.' . ($is_tree ? 'name' : 'completename') . ' AS category'\n                    ],\n                    'DISTINCT'  => true,\n                    'FROM'      => 'glpi_itilcategories',\n                    'WHERE'     => getEntitiesRestrictCriteria('glpi_itilcategories', '', '', true),\n                    'ORDERBY'   => 'completename'\n                ];\n\n                if ($is_tree) {\n                    $criteria['WHERE']['OR'] = [\n                        'id'                 => $parent,\n                        'itilcategories_id'  => $parent\n                    ];\n                }\n\n                $iterator = $DB->request($criteria);\n\n                $val    = [];\n                foreach ($iterator as $line) {\n                    $val[] = [\n                        'id'     => $line['id'],\n                        'link'   => $line['category']\n                    ];\n                }\n                break;\n\n            case 'locations_tree':\n            case 'locations_id':\n                $is_tree = $type == 'locations_tree';\n               // Get all locations for tree merge management\n                $criteria = [\n                    'SELECT'    => [\n                        'glpi_locations.id',\n                        'glpi_locations.' . ($is_tree ? 'name' : 'completename') . ' AS location'\n                    ],\n                    'DISTINCT'  => true,\n                    'FROM'      => 'glpi_locations',\n                    'WHERE'     => getEntitiesRestrictCriteria('glpi_locations', '', '', true),\n                    'ORDERBY'   => 'completename'\n                ];\n\n                if ($is_tree) {\n                    $criteria['WHERE']['OR'] = [\n                        'id'           => $parent,\n                        'locations_id' => $parent\n                    ];\n                }\n\n                $iterator = $DB->request($criteria);\n\n                $val    = [];\n                foreach ($iterator as $line) {\n                    $val[] = [\n                        'id'     => $line['id'],\n                        'link'   => $line['location']\n                    ];\n                }\n                break;\n\n            case \"type\":\n                $types = $item->getTypes();\n                $val   = [];\n                foreach ($types as $id => $v) {\n                    $tmp['id']   = $id;\n                    $tmp['link'] = $v;\n                    $val[]       = $tmp;\n                }\n                break;\n\n            case \"group\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedGroupBetween($date1, $date2);\n                break;\n\n            case \"groups_id_assign\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedAssignGroupBetween($date1, $date2);\n                break;\n\n            case \"priority\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedPriorityBetween($date1, $date2);\n                break;\n\n            case \"urgency\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedUrgencyBetween($date1, $date2);\n                break;\n\n            case \"impact\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedImpactBetween($date1, $date2);\n                break;\n\n            case \"requesttypes_id\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedRequestTypeBetween($date1, $date2);\n                break;\n\n            case \"solutiontypes_id\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedSolutionTypeBetween($date1, $date2);\n                break;\n\n            case \"usertitles_id\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedUserTitleOrTypeBetween($date1, $date2, true);\n                break;\n\n            case \"usercategories_id\":\n                /** @var CommonITILObject $item */\n                $val = $item->getUsedUserTitleOrTypeBetween($date1, $date2, false);\n                break;\n\n           // DEVICE CASE\n            default:\n                if (\n                    ($item = getItemForItemtype($type))\n                    && ($item instanceof CommonDevice)\n                ) {\n                    $device_table = $item->getTable();\n\n                   //select devices IDs (table row)\n                    $iterator = $DB->request([\n                        'SELECT' => [\n                            'id',\n                            'designation'\n                        ],\n                        'FROM'   => $device_table,\n                        'ORDER'  => 'designation'\n                    ]);\n\n                    foreach ($iterator as $line) {\n                          $val[] = [\n                              'id'     => $line['id'],\n                              'link'   => $line['designation']\n                          ];\n                    }\n                } else {\n                   // Dropdown case for computers\n                    $field = \"name\";\n                    $table = getTableForItemType($type);\n                    if (\n                        ($item = getItemForItemtype($type))\n                        && ($item instanceof CommonTreeDropdown)\n                    ) {\n                        $field = \"completename\";\n                    }\n\n                    $criteria = [\n                        'FROM'   => $table,\n                        'ORDER'  => $field\n                    ];\n\n                    if ($item->isEntityAssign()) {\n                        $criteria['ORDER'] = ['entities_id', $field];\n                        $criteria['WHERE'] = getEntitiesRestrictCriteria($table);\n                    }\n\n                    $iterator = $DB->request($criteria);\n\n                    $val    = [];\n                    foreach ($iterator as $line) {\n                        $val[] = [\n                            'id'     => $line['id'],\n                            'link'   => $line[$field]\n                        ];\n                    }\n                }\n        }\n        return $val;\n    }\n\n\n    /**\n     * @param $itemtype\n     * @param $type\n     * @param $date1\n     * @param $date2\n     * @param $start\n     * @param $value     array\n     * @param $value2             (default '')\n     **/\n    public static function getData($itemtype, $type, $date1, $date2, $start, array $value, $value2 = \"\")\n    {\n        $hash = md5(serialize(func_get_args()));\n\n       // Single query cache to avoid recalculating data multiple times\n       // Needed as multiple stats rely on partial data returneds by this function\n       // Can be removed once we improve this code by spliting each data calculations\n       // into separate functions that can be called independently\n        if (isset(self::$cache[$hash])) {\n            return self::$cache[$hash];\n        }\n\n        $export_data = [];\n\n        if (is_array($value)) {\n            $end_display = $start + $_SESSION['glpilist_limit'];\n            $numrows     = count($value);\n\n            for ($i = $start; $i < $numrows && $i < ($end_display); $i++) {\n               //le nombre d'intervention - the number of intervention\n                $opened    = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_total\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                $nb_opened = array_sum($opened);\n                $export_data['opened'][$value[$i]['link']] = $nb_opened;\n\n               //le nombre d'intervention resolues - the number of solved intervention\n                $solved    = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_solved\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                $nb_solved = array_sum($solved);\n                $export_data['solved'][$value[$i]['link']] = $nb_solved;\n\n               //le nombre d'intervention resolues - the number of solved late intervention\n                $late      = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_solved_late\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                $nb_late   = array_sum($late);\n                $export_data['late'][$value[$i]['link']] = $nb_late;\n\n               //le nombre d'intervention closes - the number of closed intervention\n                $closed    = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_closed\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                $nb_closed = array_sum($closed);\n                $export_data['closed'][$value[$i]['link']] = $nb_closed;\n\n                if ($itemtype == 'Ticket') {\n                     //open satisfaction\n                     $opensatisfaction    = self::constructEntryValues(\n                         $itemtype,\n                         \"inter_opensatisfaction\",\n                         $date1,\n                         $date2,\n                         $type,\n                         $value[$i][\"id\"],\n                         $value2\n                     );\n                       $nb_opensatisfaction = array_sum($opensatisfaction);\n                       $export_data['opensatisfaction'][$value[$i]['link']] = $nb_opensatisfaction;\n                }\n            }\n        }\n\n        self::$cache[$hash] = $export_data;\n        return $export_data;\n    }\n\n\n    /**\n     * @param $itemtype\n     * @param $type\n     * @param $date1\n     * @param $date2\n     * @param $start\n     * @param $value     array\n     * @param $value2          (default '')\n     *\n     * @since 0.85 (before show with same parameters)\n     **/\n    public static function showTable($itemtype, $type, $date1, $date2, $start, array $value, $value2 = \"\")\n    {\n        /** @var array $CFG_GLPI */\n        global $CFG_GLPI;\n\n       // Set display type for export if define\n        $output_type = Search::HTML_OUTPUT;\n        if (isset($_GET[\"display_type\"])) {\n            $output_type = $_GET[\"display_type\"];\n        }\n\n        if ($output_type == Search::HTML_OUTPUT) { // HTML display\n            echo \"<div class ='center'>\";\n        }\n\n        if (is_array($value)) {\n            $end_display = $start + $_SESSION['glpilist_limit'];\n            $numrows     = count($value);\n\n            if (isset($_GET['export_all'])) {\n                $start       = 0;\n                $end_display = $numrows;\n            }\n\n            $nbcols = 8;\n            if ($output_type != Search::HTML_OUTPUT) { // not HTML display\n                $nbcols--;\n            }\n\n            echo Search::showHeader($output_type, $end_display - $start + 1, $nbcols);\n            $subname = '';\n            switch ($type) {\n                case 'group_tree':\n                case 'groups_tree_assign':\n                    $subname = Dropdown::getDropdownName('glpi_groups', $value2);\n                    break;\n\n                case 'itilcategories_tree':\n                    $subname = Dropdown::getDropdownName('glpi_itilcategories', $value2);\n                    break;\n\n                case 'locations_tree':\n                    $subname = Dropdown::getDropdownName('glpi_locations', $value2);\n                    break;\n            }\n\n            if ($output_type == Search::HTML_OUTPUT) { // HTML display\n                echo Search::showNewLine($output_type);\n                $header_num = 1;\n\n                if (\n                    ($output_type == Search::HTML_OUTPUT)\n                    && strstr($type, '_tree')\n                    && $value2\n                ) {\n                    // HTML display\n                    $url = $_SERVER['PHP_SELF'] . '?' . Toolbox::append_params(\n                        [\n                            'date1'    => $date1,\n                            'date2'    => $date2,\n                            'itemtype' => $itemtype,\n                            'type'     => $type,\n                            'value2'   => 0,\n                        ],\n                        '&amp;'\n                    );\n                    $link = \"<a href='$url'>\" . __('Back') . \"</a>\";\n                    echo Search::showHeaderItem($output_type, $link, $header_num);\n                } else {\n                    echo Search::showHeaderItem($output_type, \"&nbsp;\", $header_num);\n                }\n                echo Search::showHeaderItem($output_type, '', $header_num);\n\n                echo Search::showHeaderItem(\n                    $output_type,\n                    _x('quantity', 'Number'),\n                    $header_num,\n                    '',\n                    0,\n                    '',\n                    \"colspan='4'\"\n                );\n                if ($itemtype == 'Ticket') {\n                     echo Search::showHeaderItem(\n                         $output_type,\n                         __('Satisfaction'),\n                         $header_num,\n                         '',\n                         0,\n                         '',\n                         \"colspan='3'\"\n                     );\n                }\n                echo Search::showHeaderItem(\n                    $output_type,\n                    __('Average time'),\n                    $header_num,\n                    '',\n                    0,\n                    '',\n                    $itemtype == 'Ticket' ? \"colspan='3'\" : \"colspan='2'\"\n                );\n                echo Search::showHeaderItem(\n                    $output_type,\n                    __('Real duration of treatment of the ticket'),\n                    $header_num,\n                    '',\n                    0,\n                    '',\n                    \"colspan='2'\"\n                );\n            }\n\n            echo Search::showNewLine($output_type);\n            $header_num    = 1;\n            echo Search::showHeaderItem($output_type, $subname, $header_num);\n\n            if ($output_type == Search::HTML_OUTPUT) { // HTML display\n                echo Search::showHeaderItem($output_type, \"\", $header_num);\n            }\n            if ($output_type != Search::HTML_OUTPUT) {\n                echo Search::showHeaderItem($output_type, __('Number of opened tickets'), $header_num);\n                echo Search::showHeaderItem($output_type, __('Number of solved tickets'), $header_num);\n                echo Search::showHeaderItem($output_type, __('Number of late tickets'), $header_num);\n                echo Search::showHeaderItem($output_type, __('Number of closed tickets'), $header_num);\n            } else {\n                echo Search::showHeaderItem($output_type, _nx('ticket', 'Opened', 'Opened', Session::getPluralNumber()), $header_num);\n                echo Search::showHeaderItem(\n                    $output_type,\n                    _nx('ticket', 'Solved', 'Solved', Session::getPluralNumber()),\n                    $header_num\n                );\n                echo Search::showHeaderItem($output_type, __('Late'), $header_num);\n                echo Search::showHeaderItem($output_type, __('Closed'), $header_num);\n            }\n\n            if ($itemtype == 'Ticket') {\n                if ($output_type != Search::HTML_OUTPUT) {\n                    echo Search::showHeaderItem(\n                        $output_type,\n                        __('Number of opened satisfaction survey'),\n                        $header_num\n                    );\n                    echo Search::showHeaderItem(\n                        $output_type,\n                        __('Number of answered satisfaction survey'),\n                        $header_num\n                    );\n                    echo Search::showHeaderItem(\n                        $output_type,\n                        __('Average satisfaction'),\n                        $header_num\n                    );\n                } else {\n                    echo Search::showHeaderItem(\n                        $output_type,\n                        _nx('survey', 'Opened', 'Opened', Session::getPluralNumber()),\n                        $header_num\n                    );\n                    echo Search::showHeaderItem(\n                        $output_type,\n                        _nx('survey', 'Answered', 'Answered', Session::getPluralNumber()),\n                        $header_num\n                    );\n                    echo Search::showHeaderItem($output_type, __('Average'), $header_num);\n                }\n            }\n\n            if ($output_type != Search::HTML_OUTPUT) {\n                if ($itemtype == 'Ticket') {\n                    echo Search::showHeaderItem(\n                        $output_type,\n                        __('Average time to take into account'),\n                        $header_num\n                    );\n                }\n                echo Search::showHeaderItem($output_type, __('Average time to resolution'), $header_num);\n                echo Search::showHeaderItem($output_type, __('Average time to closure'), $header_num);\n            } else {\n                if ($itemtype == 'Ticket') {\n                    echo Search::showHeaderItem($output_type, __('Take into account'), $header_num);\n                }\n                echo Search::showHeaderItem($output_type, __('Resolution'), $header_num);\n                echo Search::showHeaderItem($output_type, __('Closure'), $header_num);\n            }\n\n            if ($output_type != Search::HTML_OUTPUT) {\n                echo Search::showHeaderItem(\n                    $output_type,\n                    __('Average real duration of treatment of the ticket'),\n                    $header_num\n                );\n                echo Search::showHeaderItem(\n                    $output_type,\n                    __('Total real duration of treatment of the ticket'),\n                    $header_num\n                );\n            } else {\n                echo Search::showHeaderItem($output_type, __('Average'), $header_num);\n                echo Search::showHeaderItem($output_type, __('Total duration'), $header_num);\n            }\n           // End Line for column headers\n            echo Search::showEndLine($output_type);\n            $row_num = 1;\n\n            for ($i = $start; ($i < $numrows) && ($i < $end_display); $i++) {\n                $row_num++;\n                $item_num = 1;\n                echo Search::showNewLine($output_type, $i % 2);\n                if (\n                    ($output_type == Search::HTML_OUTPUT)\n                    && strstr($type, '_tree')\n                    && ($value[$i]['id'] != $value2)\n                ) {\n                    // HTML display\n                    $url = $_SERVER['PHP_SELF'] . '?' . Toolbox::append_params(\n                        [\n                            'date1'    => $date1,\n                            'date2'    => $date2,\n                            'itemtype' => $itemtype,\n                            'type'     => $type,\n                            'value2'  => $value[$i]['id'],\n                        ],\n                        '&amp;'\n                    );\n                    $link = \"<a href='$url'>\" . $value[$i]['link'] . \"</a>\";\n                    echo Search::showItem($output_type, $link, $item_num, $row_num);\n                } else {\n                    echo Search::showItem($output_type, $value[$i]['link'], $item_num, $row_num);\n                }\n\n                if ($output_type == Search::HTML_OUTPUT) { // HTML display\n                    $link = \"\";\n                    if ($value[$i]['id'] > 0) {\n                        $url = 'stat.graph.php?' . Toolbox::append_params(\n                            [\n                                'date1'    => $date1,\n                                'date2'    => $date2,\n                                'itemtype' => $itemtype,\n                                'type'     => $type,\n                                'champ'    => $value2,\n                            ],\n                            '&amp;'\n                        );\n                        $link = \"<a href='$url'>\" .\n                          \"<img src='\" . $CFG_GLPI[\"root_doc\"] . \"/pics/stats_item.png' alt=''>\" .\n                          \"</a>\";\n                    }\n                    echo Search::showItem($output_type, $link, $item_num, $row_num);\n                }\n\n               //le nombre d'intervention - the number of intervention\n                $opened    = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_total\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                $nb_opened = array_sum($opened);\n                echo Search::showItem($output_type, $nb_opened, $item_num, $row_num);\n\n               //le nombre d'intervention resolues - the number of solved intervention\n                $solved    = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_solved\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                $nb_solved = array_sum($solved);\n                echo Search::showItem($output_type, $nb_solved, $item_num, $row_num);\n\n               //le nombre d'intervention resolues - the number of solved intervention\n                $solved_late    = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_solved_late\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                $nb_solved_late = array_sum($solved_late);\n                echo Search::showItem($output_type, $nb_solved_late, $item_num, $row_num);\n\n               //le nombre d'intervention closes - the number of closed intervention\n                $closed    = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_closed\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                $nb_closed = array_sum($closed);\n\n                echo Search::showItem($output_type, $nb_closed, $item_num, $row_num);\n\n                if ($itemtype == 'Ticket') {\n                     //Satisfaction open\n                     $opensatisfaction    = self::constructEntryValues(\n                         $itemtype,\n                         \"inter_opensatisfaction\",\n                         $date1,\n                         $date2,\n                         $type,\n                         $value[$i][\"id\"],\n                         $value2\n                     );\n                     $nb_opensatisfaction = array_sum($opensatisfaction);\n                     echo Search::showItem($output_type, $nb_opensatisfaction, $item_num, $row_num);\n\n                     //Satisfaction answer\n                     $answersatisfaction    = self::constructEntryValues(\n                         $itemtype,\n                         \"inter_answersatisfaction\",\n                         $date1,\n                         $date2,\n                         $type,\n                         $value[$i][\"id\"],\n                         $value2\n                     );\n                    $nb_answersatisfaction = array_sum($answersatisfaction);\n                    echo Search::showItem($output_type, $nb_answersatisfaction, $item_num, $row_num);\n\n                    //Satisfaction rate\n                    $satisfaction = self::constructEntryValues(\n                        $itemtype,\n                        \"inter_avgsatisfaction\",\n                        $date1,\n                        $date2,\n                        $type,\n                        $value[$i][\"id\"],\n                        $value2\n                    );\n                    foreach (array_keys($satisfaction) as $key2) {\n                          $satisfaction[$key2] *= $answersatisfaction[$key2];\n                    }\n                    if ($nb_answersatisfaction > 0) {\n                        $avgsatisfaction = round(array_sum($satisfaction) / $nb_answersatisfaction, 1);\n                        if ($output_type == Search::HTML_OUTPUT) {\n                            $avgsatisfaction = TicketSatisfaction::displaySatisfaction($avgsatisfaction);\n                        }\n                    } else {\n                        $avgsatisfaction = '&nbsp;';\n                    }\n                    echo Search::showItem($output_type, $avgsatisfaction, $item_num, $row_num);\n\n                    //Le temps moyen de prise en compte du ticket - The average time to take a ticket into account\n                    $data = self::constructEntryValues(\n                        $itemtype,\n                        \"inter_avgtakeaccount\",\n                        $date1,\n                        $date2,\n                        $type,\n                        $value[$i][\"id\"],\n                        $value2\n                    );\n                    foreach (array_keys($data) as $key2) {\n                          $data[$key2] *= $solved[$key2];\n                    }\n\n                    if ($nb_solved > 0) {\n                        $timedisplay = array_sum($data) / $nb_solved;\n                    } else {\n                        $timedisplay = 0;\n                    }\n\n                    if (\n                        ($output_type == Search::HTML_OUTPUT)\n                        || ($output_type == Search::PDF_OUTPUT_LANDSCAPE)\n                        || ($output_type == Search::PDF_OUTPUT_PORTRAIT)\n                    ) {\n                        $timedisplay = Html::timestampToString($timedisplay, 0, false);\n                    } else if ($output_type == Search::CSV_OUTPUT) {\n                        $timedisplay = Html::timestampToCsvString($timedisplay);\n                    }\n                    echo Search::showItem($output_type, $timedisplay, $item_num, $row_num);\n                }\n\n              //Le temps moyen de resolution - The average time to resolv\n                $data = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_avgsolvedtime\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                foreach (array_keys($data) as $key2) {\n                    $data[$key2] = round($data[$key2] * $solved[$key2]);\n                }\n\n                if ($nb_solved > 0) {\n                    $timedisplay = array_sum($data) / $nb_solved;\n                } else {\n                    $timedisplay = 0;\n                }\n                if (\n                    ($output_type == Search::HTML_OUTPUT)\n                    || ($output_type == Search::PDF_OUTPUT_LANDSCAPE)\n                    || ($output_type == Search::PDF_OUTPUT_PORTRAIT)\n                ) {\n                    $timedisplay = Html::timestampToString($timedisplay, 0, false);\n                } else if ($output_type == Search::CSV_OUTPUT) {\n                    $timedisplay = Html::timestampToCsvString($timedisplay);\n                }\n                echo Search::showItem($output_type, $timedisplay, $item_num, $row_num);\n\n              //Le temps moyen de cloture - The average time to close\n                $data = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_avgclosedtime\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                foreach (array_keys($data) as $key2) {\n                    $data[$key2] = round($data[$key2] * $solved[$key2]);\n                }\n\n                if ($nb_closed > 0) {\n                    $timedisplay = array_sum($data) / $nb_closed;\n                } else {\n                    $timedisplay = 0;\n                }\n                if (\n                    ($output_type == Search::HTML_OUTPUT)\n                    || ($output_type == Search::PDF_OUTPUT_LANDSCAPE)\n                    || ($output_type == Search::PDF_OUTPUT_PORTRAIT)\n                ) {\n                    $timedisplay = Html::timestampToString($timedisplay, 0, false);\n                } else if ($output_type == Search::CSV_OUTPUT) {\n                    $timedisplay = Html::timestampToCsvString($timedisplay);\n                }\n                echo Search::showItem($output_type, $timedisplay, $item_num, $row_num);\n\n              //the number of solved interventions with a duration time\n                $solved_with_actiontime = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_solved_with_actiontime\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                $nb_solved_with_actiontime = array_sum($solved_with_actiontime);\n\n              //Le temps moyen de l'intervention reelle - The average actiontime to resolv\n                $data = self::constructEntryValues(\n                    $itemtype,\n                    \"inter_avgactiontime\",\n                    $date1,\n                    $date2,\n                    $type,\n                    $value[$i][\"id\"],\n                    $value2\n                );\n                foreach (array_keys($data) as $key2) {\n                    if (isset($solved_with_actiontime[$key2])) {\n                        $data[$key2] *= $solved_with_actiontime[$key2];\n                    } else {\n                        $data[$key2] *= 0;\n                    }\n                }\n                $total_actiontime = array_sum($data);\n\n                if ($nb_solved_with_actiontime > 0) {\n                    $timedisplay = $total_actiontime / $nb_solved_with_actiontime;\n                } else {\n                    $timedisplay = 0;\n                }\n\n                if (\n                    ($output_type == Search::HTML_OUTPUT)\n                    || ($output_type == Search::PDF_OUTPUT_LANDSCAPE)\n                    || ($output_type == Search::PDF_OUTPUT_PORTRAIT)\n                ) {\n                    $timedisplay = Html::timestampToString($timedisplay, 0, false);\n                } else if ($output_type == Search::CSV_OUTPUT) {\n                    $timedisplay = Html::timestampToCsvString($timedisplay);\n                }\n                echo Search::showItem($output_type, $timedisplay, $item_num, $row_num);\n              //Le temps total de l'intervention reelle - The total actiontime to resolv\n                $timedisplay = $total_actiontime;\n\n                if (\n                    ($output_type == Search::HTML_OUTPUT)\n                    || ($output_type == Search::PDF_OUTPUT_LANDSCAPE)\n                    || ($output_type == Search::PDF_OUTPUT_PORTRAIT)\n                ) {\n                    $timedisplay = Html::timestampToString($timedisplay, 0, false);\n                } else if ($output_type == Search::CSV_OUTPUT) {\n                    $timedisplay = Html::timestampToCsvString($timedisplay);\n                }\n                echo Search::showItem($output_type, $timedisplay, $item_num, $row_num);\n\n                echo Search::showEndLine($output_type);\n            }\n          // Display footer\n            echo Search::showFooter($output_type, '', $numrows);\n        } else {\n            echo __('No statistics are available');\n        }\n\n        if ($output_type == Search::HTML_OUTPUT) { // HTML display\n            echo \"</div>\";\n        }\n    }\n\n\n    /**\n     * @param $itemtype\n     * @param $type\n     * @param $begin              (default '')\n     * @param $end                (default '')\n     * @param $param              (default '')\n     * @param $value              (default '')\n     * @param $value2             (default '')\n     * @param $add_criteria          (default [''])\n     */\n    public static function constructEntryValues(\n        $itemtype,\n        $type,\n        $begin = \"\",\n        $end = \"\",\n        $param = \"\",\n        $value = \"\",\n        $value2 = \"\",\n        array $add_criteria = []\n    ) {\n        $DB = \\DBConnection::getReadConnection();\n\n        if (!$item = getItemForItemtype($itemtype)) {\n            return;\n        }\n        /** @var CommonITILObject $item */\n        $table          = $item->getTable();\n        $fkfield        = $item->getForeignKeyField();\n\n        if (!($userlinkclass = getItemForItemtype($item->userlinkclass))) {\n            return;\n        }\n        $userlinktable  = $userlinkclass->getTable();\n        if (!$grouplinkclass = getItemForItemtype($item->grouplinkclass)) {\n            return;\n        }\n        $grouplinktable = $grouplinkclass->getTable();\n\n        if (!($supplierlinkclass = getItemForItemtype($item->supplierlinkclass))) {\n            return;\n        }\n        $supplierlinktable = $supplierlinkclass->getTable();\n\n        $tasktable      = getTableForItemType($item->getType() . 'Task');\n\n        $closed_status  = $item->getClosedStatusArray();\n        $solved_status  = array_merge($closed_status, $item->getSolvedStatusArray());\n\n        $criteria = [];\n        $WHERE = [];\n        if ($item->maybeDeleted()) {\n            $WHERE[\"$table.is_deleted\"] = 0;\n        }\n        $WHERE += getEntitiesRestrictCriteria($table);\n        $LEFTJOIN          = [];\n        $INNERJOIN         = [];\n        $LEFTJOINUSER      = [\n            $userlinktable => [\n                'ON' => [\n                    $userlinktable => $fkfield,\n                    $table         => 'id'\n                ]\n            ]\n        ];\n        $LEFTJOINGROUP    = [\n            $grouplinktable => [\n                'ON' => [\n                    $grouplinktable   => $fkfield,\n                    $table            => 'id'\n                ]\n            ]\n        ];\n        $LEFTJOINSUPPLIER = [\n            $supplierlinktable => [\n                'ON' => [\n                    $supplierlinktable   => $fkfield,\n                    $table               => 'id'\n                ]\n            ]\n        ];\n\n        switch ($param) {\n            case \"technicien\":\n                $LEFTJOIN = $LEFTJOINUSER;\n                $WHERE[\"$userlinktable.users_id\"] = $value;\n                $WHERE[\"$userlinktable.type\"] = CommonITILActor::ASSIGN;\n                break;\n\n            case \"technicien_followup\":\n                $WHERE[\"$tasktable.users_id\"] = $value;\n                $LEFTJOIN = [\n                    $tasktable => [\n                        'ON' => [\n                            $tasktable  => $fkfield,\n                            $table      => 'id'\n                        ]\n                    ]\n                ];\n                break;\n\n            case \"user\":\n                $LEFTJOIN = $LEFTJOINUSER;\n                $WHERE[\"$userlinktable.users_id\"] = $value;\n                $WHERE[\"$userlinktable.type\"] = CommonITILActor::REQUESTER;\n                break;\n\n            case \"usertitles_id\":\n                $LEFTJOIN  = $LEFTJOINUSER;\n                $LEFTJOIN['glpi_users'] = [\n                    'ON' => [\n                        $userlinktable => 'users_id',\n                        'glpi_users'   => 'id'\n                    ]\n                ];\n                $WHERE[\"glpi_users.usertitles_id\"] = $value;\n                $WHERE[\"$userlinktable.type\"] = CommonITILActor::REQUESTER;\n                break;\n\n            case \"usercategories_id\":\n                $LEFTJOIN  = $LEFTJOINUSER;\n                $LEFTJOIN['glpi_users'] = [\n                    'ON' => [\n                        $userlinktable => 'users_id',\n                        'glpi_users'   => 'id'\n                    ]\n                ];\n                $WHERE[\"glpi_users.usercategories_id\"] = $value;\n                $WHERE[\"$userlinktable.type\"] = CommonITILActor::REQUESTER;\n                break;\n\n            case \"itilcategories_tree\":\n                if ($value == $value2) {\n                    $categories = [$value];\n                } else {\n                    $categories = getSonsOf(\"glpi_itilcategories\", $value);\n                }\n                $WHERE[\"$table.itilcategories_id\"] = $categories;\n                break;\n\n            case 'locations_tree':\n                if ($value == $value2) {\n                    $locations = [$value];\n                } else {\n                    $locations = getSonsOf('glpi_locations', $value);\n                }\n                $WHERE[\"$table.locations_id\"] = $locations;\n                break;\n\n            case 'group_tree':\n            case 'groups_tree_assign':\n                $grptype = (($param == 'group_tree') ? CommonITILActor::REQUESTER\n                                                 : CommonITILActor::ASSIGN);\n                if ($value == $value2) {\n                     $groups = [$value];\n                } else {\n                    $groups = getSonsOf(\"glpi_groups\", $value);\n                }\n\n                $LEFTJOIN  = $LEFTJOINGROUP;\n                $WHERE[\"$grouplinktable.groups_id\"] = $groups;\n                $WHERE[\"$grouplinktable.type\"] = $grptype;\n                break;\n\n            case \"group\":\n                $LEFTJOIN = $LEFTJOINGROUP;\n                $WHERE[\"$grouplinktable.groups_id\"] = $value;\n                $WHERE[\"$grouplinktable.type\"] = CommonITILActor::REQUESTER;\n                break;\n\n            case \"groups_id_assign\":\n                $LEFTJOIN = $LEFTJOINGROUP;\n                $WHERE[\"$grouplinktable.groups_id\"] = $value;\n                $WHERE[\"$grouplinktable.type\"] = CommonITILActor::ASSIGN;\n                break;\n\n            case \"suppliers_id_assign\":\n                $LEFTJOIN = $LEFTJOINSUPPLIER;\n                $WHERE[\"$supplierlinktable.suppliers_id\"] = $value;\n                $WHERE[\"$supplierlinktable.type\"] = CommonITILActor::ASSIGN;\n                break;\n\n            case \"requesttypes_id\":\n            case \"urgency\":\n            case \"impact\":\n            case \"priority\":\n            case \"users_id_recipient\":\n            case \"type\":\n            case \"itilcategories_id\":\n            case 'locations_id':\n                $WHERE[\"$table.$param\"] = $value;\n                break;\n\n            case \"solutiontypes_id\":\n                $LEFTJOIN = [\n                    'glpi_itilsolutions' => [\n                        'ON' => [\n                            'glpi_itilsolutions'   => 'items_id',\n                            'glpi_tickets'               => 'id', [\n                                'AND' => [\n                                    'glpi_itilsolutions.itemtype' => 'Ticket'\n                                ]\n                            ]\n                        ]\n                    ]\n                ];\n                $WHERE[\"glpi_itilsolutions.$param\"] = $value;\n                break;\n\n            case \"device\":\n                $devtable = getTableForItemType('Item_' . $value2);\n                $fkname   = getForeignKeyFieldForTable(getTableForItemType($value2));\n               //select computers IDs that are using this device;\n                $linkedtable = $table;\n                if ($itemtype == 'Ticket') {\n                    $linkedtable = 'glpi_items_tickets';\n                    $LEFTJOIN = [\n                        'glpi_items_tickets' => [\n                            'ON' => [\n                                'glpi_items_tickets' => 'tickets_id',\n                                'glpi_tickets'       => 'id', [\n                                    'AND' => [\n                                        \"$linkedtable.itemtype\" => 'Computer'\n                                    ]\n                                ]\n                            ]\n                        ]\n                    ];\n                }\n                $INNERJOIN = [\n                    'glpi_computers'  => [\n                        'ON' => [\n                            'glpi_computers'  => 'id',\n                            $linkedtable      => 'items_id'\n                        ]\n                    ],\n                    $devtable         => [\n                        'ON' => [\n                            'glpi_computers'  => 'id',\n                            $devtable         => 'items_id', [\n                                'AND' => [\n                                    \"$devtable.itemtype\" => Computer::class,\n                                    \"$devtable.$fkname\"  => $value\n                                ]\n                            ]\n                        ]\n                    ]\n                ];\n\n                $WHERE[\"glpi_computers.is_template\"] = 0;\n                break;\n\n            case \"comp_champ\":\n                $ftable   = getTableForItemType($value2);\n                $champ    = getForeignKeyFieldForTable($ftable);\n                $linkedtable = $table;\n                if ($itemtype == 'Ticket') {\n                    $linkedtable = 'glpi_items_tickets';\n                    $LEFTJOIN = [\n                        'glpi_items_tickets' => [\n                            'ON' => [\n                                'glpi_items_tickets' => 'tickets_id',\n                                'glpi_tickets'       => 'id', [\n                                    'AND' => [\n                                        \"$linkedtable.itemtype\" => 'Computer'\n                                    ]\n                                ]\n                            ]\n                        ]\n                    ];\n                }\n                $INNERJOIN = [\n                    'glpi_computers' => [\n                        'ON' => [\n                            'glpi_computers'  => 'id',\n                            $linkedtable      => 'items_id'\n                        ]\n                    ]\n                ];\n\n                $WHERE[\"glpi_computers.is_template\"] = 0;\n                if (substr($champ, 0, strlen('operatingsystem')) === 'operatingsystem') {\n                    $INNERJOIN['glpi_items_operatingsystems'] = [\n                        'ON' => [\n                            'glpi_computers'              => 'id',\n                            'glpi_items_operatingsystems' => 'items_id', [\n                                'AND' => [\n                                    \"glpi_items_operatingsystems.itemtype\" => 'Computer'\n                                ]\n                            ]\n                        ]\n                    ];\n                    $WHERE[\"glpi_items_operatingsystems.$champ\"] = $value;\n                } else {\n                    $WHERE[\"glpi_computers.$champ\"] = $value;\n                }\n                break;\n        }\n\n        switch ($type) {\n            case \"inter_total\":\n                $WHERE[] = getDateCriteria(\"$table.date\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.date\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'COUNT DISTINCT' => \"$table.id AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.date\"\n                ];\n                break;\n\n            case \"inter_solved\":\n                $WHERE[\"$table.status\"] = $solved_status;\n                $WHERE[] = ['NOT' => [\"$table.solvedate\" => null]];\n                $WHERE[] = getDateCriteria(\"$table.solvedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.solvedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'COUNT DISTINCT'  => \"$table.id AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.solvedate\"\n                ];\n                break;\n\n            case \"inter_solved_late\":\n                $WHERE[\"$table.status\"] = $solved_status;\n                $WHERE[] = [\n                    'NOT' => [\n                        \"$table.solvedate\"         => null,\n                        \"$table.time_to_resolve\"   => null\n                    ]\n                ];\n                $WHERE[] = getDateCriteria(\"$table.solvedate\", $begin, $end);\n                $WHERE[] = new QueryExpression(\"$table.solvedate > $table.time_to_resolve\");\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.solvedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'COUNT DISTINCT'  => \"$table.id AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.solvedate\"\n                ];\n                break;\n\n            case \"inter_closed\":\n                $WHERE[\"$table.status\"] = $closed_status;\n                $WHERE[] = ['NOT' => [\"$table.closedate\" => null]];\n                $WHERE[] = getDateCriteria(\"$table.closedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.closedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'COUNT DISTINCT'  => \"$table.id AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.closedate\"\n                ];\n                break;\n\n            case \"inter_solved_with_actiontime\":\n                $WHERE[\"$table.status\"] = $solved_status;\n                $WHERE[\"$table.actiontime\"] = ['>', 0];\n                $WHERE[] = ['NOT' => [\"$table.solvedate\" => null]];\n                $WHERE[] = getDateCriteria(\"$table.solvedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.solvedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'COUNT DISTINCT'  => \"$table.id AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.solvedate\"\n                ];\n                break;\n\n            case \"inter_avgsolvedtime\":\n                $WHERE[\"$table.status\"] = $solved_status;\n                $WHERE[] = ['NOT' => [\"$table.solvedate\" => null]];\n                $WHERE[] = getDateCriteria(\"$table.solvedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.solvedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'AVG' => \"solve_delay_stat AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.solvedate\"\n                ];\n                break;\n\n            case \"inter_avgclosedtime\":\n                $WHERE[\"$table.status\"] = $closed_status;\n                $WHERE[] = ['NOT' => [\"$table.closedate\" => null]];\n                $WHERE[] = getDateCriteria(\"$table.closedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.closedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'AVG'  => \"close_delay_stat AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.closedate\"\n                ];\n                break;\n\n            case \"inter_avgactiontime\":\n                if ($param == \"technicien_followup\") {\n                    $actiontime_table = $tasktable;\n                } else {\n                    $actiontime_table = $table;\n                }\n                $WHERE[\"$actiontime_table.actiontime\"] = ['>', 0];\n                $WHERE[] = getDateCriteria(\"$table.solvedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.solvedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'AVG'  => \"$actiontime_table.actiontime AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.solvedate\"\n                ];\n                break;\n\n            case \"inter_avgtakeaccount\":\n                $WHERE[\"$table.status\"] = $solved_status;\n                $WHERE[] = ['NOT' => [\"$table.solvedate\" => null]];\n                $WHERE[] = getDateCriteria(\"$table.solvedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.solvedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'AVG'  => \"$table.takeintoaccount_delay_stat AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.solvedate\"\n                ];\n                break;\n\n            case \"inter_opensatisfaction\":\n                $WHERE[\"$table.status\"] = $closed_status;\n                $WHERE[] = ['NOT' => [\"$table.closedate\" => null]];\n                $WHERE[] = getDateCriteria(\"$table.closedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.closedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $INNERJOIN['glpi_ticketsatisfactions'] = [\n                    'ON' => [\n                        'glpi_ticketsatisfactions' => 'tickets_id',\n                        $table                     => 'id'\n                    ]\n                ];\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'COUNT DISTINCT'  => \"$table.id AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.closedate\"\n                ];\n                break;\n\n            case \"inter_answersatisfaction\":\n                $WHERE[\"$table.status\"] = $closed_status;\n                $WHERE[] = [\n                    ['NOT' => [\"$table.closedate\" => null]],\n                    ['NOT' => [\"glpi_ticketsatisfactions.date_answered\"  => null]],\n                ];\n\n                $WHERE[] = getDateCriteria(\"$table.closedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.closedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $INNERJOIN['glpi_ticketsatisfactions'] = [\n                    'ON' => [\n                        'glpi_ticketsatisfactions' => 'tickets_id',\n                        $table                     => 'id'\n                    ]\n                ];\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'COUNT DISTINCT'  => \"$table.id AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.closedate\"\n                ];\n                break;\n\n            case \"inter_avgsatisfaction\":\n                $WHERE[\"$table.status\"] = $closed_status;\n                $WHERE[] = [\n                    'NOT' => [\n                        \"$table.closedate\" => null,\n                        \"glpi_ticketsatisfactions.date_answered\" => null\n                    ]\n                ];\n                $WHERE[] = getDateCriteria(\"$table.closedate\", $begin, $end);\n\n                $date_unix = new QueryExpression(\n                    \"FROM_UNIXTIME(UNIX_TIMESTAMP(\" . $DB->quoteName(\"$table.closedate\") . \"),'%Y-%m') AS \" . $DB->quoteName('date_unix')\n                );\n\n                $INNERJOIN['glpi_ticketsatisfactions'] = [\n                    'ON' => [\n                        'glpi_ticketsatisfactions' => 'tickets_id',\n                        $table                     => 'id'\n                    ]\n                ];\n\n                $criteria = [\n                    'SELECT'    => [\n                        $date_unix,\n                        'AVG'  => \"glpi_ticketsatisfactions.satisfaction AS total_visites\"\n                    ],\n                    'FROM'      => $table,\n                    'WHERE'     => $WHERE,\n                    'GROUPBY'   => 'date_unix',\n                    'ORDERBY'   => \"$table.closedate\"\n                ];\n                break;\n        }\n\n        if (count($LEFTJOIN)) {\n            $criteria['LEFT JOIN'] = $LEFTJOIN;\n        }\n\n        if (count($INNERJOIN)) {\n            $criteria['INNER JOIN'] = $INNERJOIN;\n        }\n\n        $entrees = [];\n        if (!count($criteria)) {\n            return [];\n        }\n\n        if (count($add_criteria)) {\n            $criteria = array_merge_recursive($criteria, $add_criteria);\n        }\n\n        $iterator = $DB->request($criteria);\n        foreach ($iterator as $row) {\n            $date             = $row['date_unix'];\n           //$visites = round($row['total_visites']);\n            $entrees[\"$date\"] = $row['total_visites'];\n        }\n\n        $end_time   = strtotime(date(\"Y-m\", strtotime($end)) . \"-01\");\n        $begin_time = strtotime(date(\"Y-m\", strtotime($begin)) . \"-01\");\n\n        $current = $begin_time;\n\n        while ($current <= $end_time) {\n            $curentry = date(\"Y-m\", $current);\n            if (!isset($entrees[\"$curentry\"])) {\n                $entrees[\"$curentry\"] = 0;\n            }\n            $month   = date(\"m\", $current);\n            $year    = date(\"Y\", $current);\n            $current = mktime(0, 0, 0, intval($month) + 1, 1, intval($year));\n        }\n        ksort($entrees);\n\n        return $entrees;\n    }\n\n    /**\n     * @param string $target\n     * @param string $date1\n     * @param string $date2\n     * @param int $start\n     **/\n    public static function showItems($target, $date1, $date2, $start)\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        $view_entities = Session::isMultiEntitiesMode();\n\n        if ($view_entities) {\n            $entities = getAllDataFromTable('glpi_entities');\n        }\n\n        $output_type = Search::HTML_OUTPUT;\n        if (isset($_GET[\"display_type\"])) {\n            $output_type = $_GET[\"display_type\"];\n        }\n        if (empty($date2)) {\n            $date2 = date(\"Y-m-d\");\n        }\n        $date2 .= \" 23:59:59\";\n\n       // 1 an par defaut\n        if (empty($date1)) {\n            $date1 = date(\"Y-m-d\", mktime(0, 0, 0, date(\"m\"), date(\"d\"), date(\"Y\") - 1));\n        }\n        $date1 .= \" 00:00:00\";\n\n        $iterator = $DB->request([\n            'SELECT' => [\n                'glpi_items_tickets.itemtype',\n                'glpi_items_tickets.items_id',\n                'COUNT'  => '* AS NB'\n            ],\n            'FROM'   => 'glpi_tickets',\n            'LEFT JOIN' => [\n                'glpi_items_tickets' => [\n                    'ON' => [\n                        'glpi_items_tickets' => 'tickets_id',\n                        'glpi_tickets'       => 'id'\n                    ]\n                ]\n            ],\n            'WHERE'  => [\n                'date'                        => ['<=', $date2],\n                'glpi_tickets.date'           => ['>=', $date1],\n                'glpi_items_tickets.itemtype' => ['<>', ''],\n                'glpi_items_tickets.items_id' => ['>', 0]\n            ] + getEntitiesRestrictCriteria('glpi_tickets'),\n            'GROUP'  => [\n                'glpi_items_tickets.itemtype',\n                'glpi_items_tickets.items_id'\n            ],\n            'ORDER'  => 'NB DESC'\n        ]);\n        $numrows = count($iterator);\n\n        if ($numrows > 0) {\n            if ($output_type == Search::HTML_OUTPUT) {\n                Html::printPager(\n                    $start,\n                    $numrows,\n                    $target,\n                    Toolbox::append_params(\n                        [\n                            'date1'     => $date1,\n                            'date2'     => $date2,\n                            'type'      => 'hardwares',\n                            'start'     => $start,\n                        ],\n                        '&amp;'\n                    ),\n                    'Stat'\n                );\n                echo \"<div class='center'>\";\n            }\n\n            $end_display = $start + $_SESSION['glpilist_limit'];\n            if (isset($_GET['export_all'])) {\n                $end_display = $numrows;\n            }\n            echo Search::showHeader($output_type, $end_display - $start + 1, 2, 1);\n            $header_num = 1;\n            echo Search::showNewLine($output_type);\n            echo Search::showHeaderItem($output_type, _n('Associated element', 'Associated elements', Session::getPluralNumber()), $header_num);\n            if ($view_entities) {\n                echo Search::showHeaderItem($output_type, Entity::getTypeName(1), $header_num);\n            }\n            echo Search::showHeaderItem($output_type, __('Number of tickets'), $header_num);\n            echo Search::showEndLine($output_type);\n\n            $i = $start;\n            if (isset($_GET['export_all'])) {\n                $start = 0;\n            }\n\n            $i = $start;\n            foreach ($iterator as $data) {\n                $item_num = 1;\n               // Get data and increment loop variables\n                if (!($item = getItemForItemtype($data[\"itemtype\"]))) {\n                    continue;\n                }\n                if ($item->getFromDB($data[\"items_id\"])) {\n                    echo Search::showNewLine($output_type, $i % 2);\n                    echo Search::showItem(\n                        $output_type,\n                        sprintf(\n                            __('%1$s - %2$s'),\n                            $item->getTypeName(),\n                            $item->getLink()\n                        ),\n                        $item_num,\n                        $i - $start + 1,\n                        \"class='center'\" . \" \" . ($item->isDeleted() ? \" class='deleted' \"\n                        : \"\")\n                    );\n                    if ($view_entities) {\n                          $ent = $item->getEntityID();\n                          $ent = $entities[$ent]['completename'];\n                          echo Search::showItem(\n                              $output_type,\n                              $ent,\n                              $item_num,\n                              $i - $start + 1,\n                              \"class='center'\" . \" \" . ($item->isDeleted() ? \" class='deleted' \"\n                              : \"\")\n                          );\n                    }\n                    echo Search::showItem(\n                        $output_type,\n                        $data[\"NB\"],\n                        $item_num,\n                        $i - $start + 1,\n                        \"class='center'\" . \" \" . ($item->isDeleted() ? \" class='deleted' \"\n                        : \"\")\n                    );\n                }\n\n                $i++;\n                if ($i == $end_display) {\n                    break;\n                }\n            }\n\n            echo Search::showFooter($output_type);\n            if ($output_type == Search::HTML_OUTPUT) {\n                echo \"</div>\";\n            }\n        }\n    }\n\n\n    /**\n     * @since 0.84\n     **/\n    public static function title()\n    {\n        /**\n         * @var array $CFG_GLPI\n         * @var array $PLUGIN_HOOKS\n         */\n        global $CFG_GLPI, $PLUGIN_HOOKS;\n\n        $opt_list[\"Ticket\"]                             = __('Tickets');\n\n        $stat_list = [];\n\n        $stat_list[\"Ticket\"][\"Ticket_Global\"][\"name\"]   = __('Global');\n        $stat_list[\"Ticket\"][\"Ticket_Global\"][\"file\"]   = \"stat.global.php?itemtype=Ticket\";\n        $stat_list[\"Ticket\"][\"Ticket_Ticket\"][\"name\"]   = __('By ticket');\n        $stat_list[\"Ticket\"][\"Ticket_Ticket\"][\"file\"]   = \"stat.tracking.php?itemtype=Ticket\";\n        $stat_list[\"Ticket\"][\"Ticket_Location\"][\"name\"] = __('By hardware characteristics');\n        $stat_list[\"Ticket\"][\"Ticket_Location\"][\"file\"] = \"stat.location.php?itemtype=Ticket\";\n        $stat_list[\"Ticket\"][\"Ticket_Item\"][\"name\"]     = __('By hardware');\n        $stat_list[\"Ticket\"][\"Ticket_Item\"][\"file\"]     = \"stat.item.php\";\n\n        if (Problem::canView()) {\n            $opt_list[\"Problem\"]                               = Problem::getTypeName(Session::getPluralNumber());\n\n            $stat_list[\"Problem\"][\"Problem_Global\"][\"name\"]    = __('Global');\n            $stat_list[\"Problem\"][\"Problem_Global\"][\"file\"]    = \"stat.global.php?itemtype=Problem\";\n            $stat_list[\"Problem\"][\"Problem_Problem\"][\"name\"]   = __('By problem');\n            $stat_list[\"Problem\"][\"Problem_Problem\"][\"file\"]   = \"stat.tracking.php?itemtype=Problem\";\n        }\n\n        if (Change::canView()) {\n            $opt_list[\"Change\"]                             = _n('Change', 'Changes', Session::getPluralNumber());\n\n            $stat_list[\"Change\"][\"Change_Global\"][\"name\"]   = __('Global');\n            $stat_list[\"Change\"][\"Change_Global\"][\"file\"]   = \"stat.global.php?itemtype=Change\";\n            $stat_list[\"Change\"][\"Change_Change\"][\"name\"]   = __('By change');\n            $stat_list[\"Change\"][\"Change_Change\"][\"file\"]   = \"stat.tracking.php?itemtype=Change\";\n        }\n\n       //Affichage du tableau de presentation des stats\n        echo \"<table class='tab_cadre_fixe'>\";\n        echo \"<tr><th colspan='2'>\" . __('Select statistics to be displayed') . \"</th></tr>\";\n        echo \"<tr class='tab_bg_1'><td class='center'>\";\n\n        $values   = [$CFG_GLPI[\"root_doc\"] . '/front/stat.php' => Dropdown::EMPTY_VALUE];\n\n        $selected = -1;\n        foreach ($opt_list as $opt => $group) {\n            foreach ($stat_list[$opt] as $data) {\n                $name    = $data['name'];\n                $file    = $data['file'];\n                $key                  = $CFG_GLPI[\"root_doc\"] . \"/front/\" . $file;\n                $values[$group][$key] = $name;\n                if (stripos($_SERVER['REQUEST_URI'], $key) !== false) {\n                    $selected = $key;\n                }\n            }\n        }\n\n       // Manage plugins\n        $names    = [];\n        $optgroup = [];\n        if (isset($PLUGIN_HOOKS[\"stats\"]) && is_array($PLUGIN_HOOKS[\"stats\"])) {\n            foreach ($PLUGIN_HOOKS[\"stats\"] as $plug => $pages) {\n                if (!Plugin::isPluginActive($plug)) {\n                    continue;\n                }\n                if (is_array($pages) && count($pages)) {\n                    foreach ($pages as $page => $name) {\n                        $names[Plugin::getWebDir($plug, false) . '/' . $page] = [\"name\" => $name,\n                            \"plug\" => $plug\n                        ];\n                        $optgroup[$plug] = Plugin::getInfo($plug, 'name');\n                    }\n                }\n            }\n            asort($names);\n        }\n\n        foreach ($optgroup as $opt => $title) {\n            $group = $title;\n            foreach ($names as $key => $val) {\n                if ($opt == $val[\"plug\"]) {\n                    $file                  = $CFG_GLPI[\"root_doc\"] . \"/\" . $key;\n                    $values[$group][$file] = $val[\"name\"];\n                    if (stripos($_SERVER['REQUEST_URI'], $file) !== false) {\n                        $selected = $file;\n                    }\n                }\n            }\n        }\n\n        Dropdown::showFromArray(\n            'statmenu',\n            $values,\n            ['on_change' => \"window.location.href=this.options[this.selectedIndex].value\",\n                'value'     => $selected\n            ]\n        );\n        echo \"</td>\";\n        echo \"</tr>\";\n        echo \"</table>\";\n    }\n\n\n    /**\n     * @since 0.85\n     **/\n    public function getRights($interface = 'central')\n    {\n\n        $values[READ] = __('Read');\n        return $values;\n    }\n\n    /**\n     * Call displayLineGraph with arguments from a StatData object\n     */\n    public function displayLineGraphFromData(StatData $stat_data)\n    {\n        if ($stat_data->isEmpty()) {\n            return;\n        }\n\n        $this->displayLineGraph(\n            $stat_data->getTitle(),\n            $stat_data->getLabels(),\n            $stat_data->getSeries(),\n            $stat_data->getOptions(),\n            true,\n            $stat_data->getCsvLink()\n        );\n    }\n\n    /**\n     * Display line graph\n     *\n     * @param string   $title  Graph title\n     * @param string[] $labels Labels to display\n     * @param array    $series Series data. An array of the form:\n     *                 [\n     *                    ['name' => 'a name', 'data' => []],\n     *                    ['name' => 'another name', 'data' => []]\n     *                 ]\n     * @param array    $options  Options\n     * @param boolean  $display  Whether to display directly; defauts to true\n     * @param string   $csv_link Link to download the dataset as csv\n     *\n     * @return void\n     */\n    public function displayLineGraph(\n        $title,\n        $labels,\n        $series,\n        $options = null,\n        $display = true,\n        ?string $csv_link = null\n    ) {\n        $param = [\n            'width'   => 900,\n            'height'  => 300,\n            'tooltip' => true,\n            'legend'  => true,\n            'animate' => true,\n            'csv'     => true\n        ];\n\n        if (is_array($options) && count($options)) {\n            foreach ($options as $key => $val) {\n                $param[$key] = $val;\n            }\n        }\n\n        $slug = str_replace('-', '_', Toolbox::slugify($title));\n        $this->checkEmptyLabels($labels);\n        $out = \"<h2 class='center'>$title\";\n        if ($param['csv'] && $csv_link) {\n            $out .= \" <a href='$csv_link' title='\" . __s('CSV') . \"' class='pointer fa fa-file-alt export-stat'><span class='sr-only'>\" . __('CSV') . \"</span></a>\";\n        }\n        $out .= \"</h2>\";\n        $out .= \"<div id='$slug' class='chart'></div>\";\n        Html::requireJs('charts');\n        $out .= \"<script type='text/javascript'>\n                  $(function() {\n                     var chart_$slug = new Chartist.Line('#$slug', {\n                        labels: ['\" . implode('\\', \\'', Toolbox::addslashes_deep($labels))  . \"'],\n                        series: [\";\n\n        $first = true;\n        foreach ($series as $serie) {\n            if ($first === true) {\n                $first = false;\n            } else {\n                $out .= \",\\n\";\n            }\n            $serieData = implode(', ', $serie['data']);\n            if (isset($serie['name'])) {\n                $serieLabel = Toolbox::addslashes_deep($serie['name']);\n                $out .= \"{'name': '$serieLabel', 'data': [$serieData]}\";\n            } else {\n                $out .= \"[$serieData]\";\n            }\n        }\n\n        $out .= \"\n                        ]\n                     }, {\n                        low: 0,\n                        showArea: true,\n                        width: '{$param['width']}',\n                        height: '{$param['height']}',\n                        fullWidth: true,\n                        lineSmooth: Chartist.Interpolation.simple({\n                           divisor: 10,\n                           fillHoles: false\n                        }),\n                        axisX: {\n                           labelOffset: {\n                              x: -\" . mb_strlen($labels[0]) * 7  . \"\n                           }\n                        }\";\n\n        if ($param['legend'] === true || $param['tooltip'] === true) {\n            $out .= \", plugins: [\";\n            if ($param['legend'] === true) {\n                $out .= \"Chartist.plugins.legend()\";\n            }\n            if ($param['tooltip'] === true) {\n                $out .= ($param['legend'] === true ? ',' : '') . \"Chartist.plugins.tooltip()\";\n            }\n            $out .= \"]\";\n        }\n\n        $out .= \"});\";\n\n        if ($param['animate'] === true) {\n                  $out .= \"\n                     chart_$slug.on('draw', function(data) {\n                        if(data.type === 'line' || data.type === 'area') {\n                           data.element.animate({\n                              d: {\n                                 begin: 300 * data.index,\n                                 dur: 500,\n                                 from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n                                 to: data.path.clone().stringify(),\n                                 easing: Chartist.Svg.Easing.easeOutQuint\n                              }\n                           });\n                        }\n                     });\n                  });\";\n        }\n        $out .= \"</script>\";\n\n        if ($display) {\n            echo $out;\n            return;\n        }\n        return $out;\n    }\n\n    /**\n     * Call displayPieGraph with arguments from a StatData object\n     */\n    public function displayPieGraphFromData(StatData $stat_data)\n    {\n        if ($stat_data->isEmpty()) {\n            return;\n        }\n\n        $this->displayPieGraph(\n            $stat_data->getTitle(),\n            $stat_data->getLabels(),\n            $stat_data->getSeries(),\n            $stat_data->getOptions(),\n            true,\n            $stat_data->getCsvLink()\n        );\n    }\n\n    /**\n     * Display pie graph\n     *\n     * @param string   $title  Graph title\n     * @param string[] $labels Labels to display\n     * @param array    $series Series data. An array of the form:\n     *                 [\n     *                    ['name' => 'a name', 'data' => []],\n     *                    ['name' => 'another name', 'data' => []]\n     *                 ]\n     * @param array    $options  Options\n     * @param boolean  $display  Whether to display directly; defauts to true\n     * @param string   $csv_link Link to download the dataset as csv\n     *\n     * @return void\n     */\n    public function displayPieGraph(\n        $title,\n        $labels,\n        $series,\n        $options = [],\n        $display = true,\n        ?string $csv_link = null\n    ) {\n        $param = [\n            'csv'     => true\n        ];\n\n        if (is_array($options) && count($options)) {\n            foreach ($options as $key => $val) {\n                $param[$key] = $val;\n            }\n        }\n\n        $slug = str_replace('-', '_', Toolbox::slugify($title));\n        $this->checkEmptyLabels($labels);\n        $out = \"<h2 class='center'>$title\";\n        if ($param['csv']) {\n            $options['title'] = $title;\n\n            if ($csv_link) {\n                $out .= \" <a href='$csv_link' title='\" . __s('CSV') . \"' class='pointer fa fa-file-alt export-stat'><span class='sr-only'>\" . __('CSV') . \"</span></a>\";\n            }\n        }\n        $out .= \"</h2>\";\n        $out .= \"<div id='$slug' class='chart'></div>\";\n        $out .= \"<script type='text/javascript'>\n                  $(function() {\n                     var $slug = new Chartist.Pie('#$slug', {\n                        labels: ['\" . implode('\\', \\'', Toolbox::addslashes_deep($labels))  . \"'],\n                        series: [\";\n\n        $first = true;\n        foreach ($series as $serie) {\n            if ($first === true) {\n                $first = false;\n            } else {\n                $out .= \",\\n\";\n            }\n\n            $serieLabel = Toolbox::addslashes_deep($serie['name']);\n            $serieData = $serie['data'];\n            $out .= \"{'meta': '$serieLabel', 'value': '$serieData'}\";\n        }\n\n        $out .= \"\n                        ]\n                     }, {\n                        donut: true,\n                        showLabel: false,\n                        height: 300,\n                        width: 300,\n                        plugins: [\n                           Chartist.plugins.legend(),\n                           Chartist.plugins.tooltip()\n                        ]\n                     });\n\n                     $slug.on('draw', function(data) {\n                        if(data.type === 'slice') {\n                           // Get the total path length in order to use for dash array animation\n                           var pathLength = data.element._node.getTotalLength();\n\n                           // Set a dasharray that matches the path length as prerequisite to animate dashoffset\n                           data.element.attr({\n                              'stroke-dasharray': pathLength + 'px ' + pathLength + 'px'\n                           });\n\n                           // Create animation definition while also assigning an ID to the animation for later sync usage\n                           var animationDefinition = {\n                              'stroke-dashoffset': {\n                                 id: 'anim' + data.index,\n                                 dur: 300,\n                                 from: -pathLength + 'px',\n                                 to:  '0px',\n                                 easing: Chartist.Svg.Easing.easeOutQuint,\n                                 // We need to use `fill: 'freeze'` otherwise our animation will fall back to initial (not visible)\n                                 fill: 'freeze'\n                              }\n                           };\n\n                           // We need to set an initial value before the animation starts as we are not in guided mode which would do that for us\n                           data.element.attr({\n                              'stroke-dashoffset': -pathLength + 'px'\n                           });\n\n                           // We can't use guided mode as the animations need to rely on setting begin manually\n                           // See http://gionkunz.github.io/chartist-js/api-documentation.html#chartistsvg-function-animate\n                           data.element.animate(animationDefinition, false);\n                        }\n                     });\n                  });\n              </script>\";\n\n        if ($display) {\n            echo $out;\n            return;\n        }\n        return $out;\n    }\n\n    /**\n     * Display search form\n     *\n     * @param string  $itemtype Item type\n     * @param string  $date1    First date\n     * @param string  $date2    Second date\n     * @param boolean $display  Whether to display directly; defauts to true\n     *\n     * @return void|string\n     */\n    public function displaySearchForm($itemtype, $date1, $date2, $display = true)\n    {\n        $out = \"<form method='get' name='form' action='stat.global.php'><div class='center'>\";\n       // Keep it at first parameter\n        $out .= \"<input type='hidden' name='itemtype' value='$itemtype'>\";\n\n        $out .= \"<table class='tab_cadre'>\";\n        $out .= \"<tr class='tab_bg_2'><td class='right'>\" . __('Start date') . \"</td><td>\";\n        $out .= Html::showDateField(\n            'date1',\n            [\n                'value'   => $date1,\n                'display' => false\n            ]\n        );\n        $out .= \"</td><td rowspan='2' class='center'>\";\n        $out .= \"<input type='submit' class='btn btn-primary' value='\" . __s('Display report') . \"'></td></tr>\";\n\n        $out .= \"<tr class='tab_bg_2'><td class='right'>\" . __('End date') . \"</td><td>\";\n        $out .= Html::showDateField(\n            'date2',\n            [\n                'value'   => $date2,\n                'display' => false\n            ]\n        );\n        $out .= \"</td></tr>\";\n        $out .= \"</table></div>\";\n       // form using GET method : CRSF not needed\n        $out .= Html::closeForm(false);\n\n        if ($display) {\n            echo $out;\n            return;\n        }\n        return $out;\n    }\n\n    /**\n     * Check and replace empty labels\n     *\n     * @param array $labels Labels\n     *\n     * @return void\n     */\n    private function checkEmptyLabels(&$labels)\n    {\n        foreach ($labels as &$label) {\n            if (empty($label)) {\n                $label = '-';\n            }\n        }\n    }\n\n    public static function getIcon()\n    {\n        return \"ti ti-chart-pie\";\n    }\n}\n"], "filenames": ["front/stat.location.php", "front/stat.tracking.php", "src/Stat.php"], "buggy_code_start_loc": [168, 181, 482], "buggy_code_end_loc": [170, 184, 1629], "fixing_code_start_loc": [168, 181, 482], "fixing_code_end_loc": [177, 192, 1658], "type": "CWE-79", "message": "GLPI is a Free Asset and IT Management Software package. A malicious URL can be used to execute XSS on reports pages.  Upgrade to 10.0.12.\n", "other": {"cve": {"id": "CVE-2024-23645", "sourceIdentifier": "security-advisories@github.com", "published": "2024-02-01T18:15:53.823", "lastModified": "2024-02-07T20:54:52.320", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "GLPI is a Free Asset and IT Management Software package. A malicious URL can be used to execute XSS on reports pages.  Upgrade to 10.0.12.\n"}, {"lang": "es", "value": "GLPI es un paquete gratuito de software de gesti\u00f3n de TI y activos. Se puede utilizar una URL maliciosa para ejecutar XSS en p\u00e1ginas de informes. Actualice a 10.0.12."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:*:*:*:*:*:*:*:*", "versionStartIncluding": "0.65", "versionEndExcluding": "10.0.12", "matchCriteriaId": "4B64C3DC-2155-4110-A908-505197FCE549"}]}]}], "references": [{"url": "https://github.com/glpi-project/glpi/commit/6cf265936c4f6edf7dea7c78b12e46d75b94d9b0", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/glpi-project/glpi/commit/fc1f6da9d158933b870ff374ed3a50ae98dcef4a", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/glpi-project/glpi/releases/tag/10.0.12", "source": "security-advisories@github.com", "tags": ["Patch", "Release Notes"]}, {"url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-2gj5-qpff-ff3x", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/glpi-project/glpi/commit/6cf265936c4f6edf7dea7c78b12e46d75b94d9b0"}}