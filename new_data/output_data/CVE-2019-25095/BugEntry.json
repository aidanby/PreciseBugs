{"buggy_code": ["#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# vim:set expandtab tabstop=4 shiftwidth=4:\n#\n# The MIT License (MIT)\n# ldapCherry\n# Copyright (c) 2014 Carpentier Pierre-Francois\n\n# Generic imports\nimport sys\nimport re\nimport traceback\nimport json\nimport logging\nimport logging.handlers\nfrom operator import itemgetter\nfrom socket import error as socket_error\nimport base64\nimport cgi\n\nfrom exceptions import *\nfrom ldapcherry.lclogging import *\nfrom ldapcherry.roles import Roles\nfrom ldapcherry.attributes import Attributes\n\n# Cherrypy http framework imports\nimport cherrypy\nfrom cherrypy.lib.httputil import parse_query_string\n\n# Mako template engines imports\nfrom mako.template import Template\nfrom mako import lookup\nfrom mako import exceptions\nfrom sets import Set\n\nSESSION_KEY = '_cp_username'\n\n\nclass LdapCherry(object):\n\n    def _handle_exception(self, e):\n        if hasattr(e, 'log'):\n            cherrypy.log.error(\n                msg=e.log,\n                severity=logging.ERROR\n            )\n        else:\n            cherrypy.log.error(\n                msg=\"uncaught exception: [%(e)s]\" % {'e': str(e)},\n                severity=logging.ERROR\n            )\n        # log the traceback as 'debug'\n        cherrypy.log.error(\n            msg='',\n            severity=logging.DEBUG,\n            traceback=True\n            )\n\n    def _escape_list(self, data):\n        ret = []\n        for i in data:\n            ret.append(cgi.escape(i, True))\n        return ret\n\n    def _escape_dict(self, data):\n        for d in data:\n            if isinstance(data[d], list):\n                data[d] = self._escape_list(data[d])\n            elif isinstance(data[d], dict):\n                data[d] = self._escape_dict(data[d])\n            elif isinstance(data[d], Set):\n                data[d] = Set(self._escape_list(data[d]))\n            else:\n                data[d] = cgi.escape(data[d], True)\n        return data\n\n    def _escape(self, data, dtype):\n        if data is None:\n            return None\n        elif dtype == 'search_list':\n            for d in data:\n                data[d] = self._escape_dict(data[d])\n        elif dtype == 'attr_list':\n            data = self._escape_dict(data)\n        elif dtype == 'lonely_groups':\n            data = self._escape_dict(data)\n        return data\n\n    def _get_param(self, section, key, config, default=None):\n        \"\"\" Get configuration parameter \"key\" from config\n        @str section: the section of the config file\n        @str key: the key to get\n        @dict config: the configuration (dictionnary)\n        @str default: the default value if parameter \"key\" is not present\n        @rtype: str (value of config['key'] if present default otherwith\n        \"\"\"\n        if section in config and key in config[section]:\n            return config[section][key]\n        if default is not None:\n            return default\n        else:\n            raise MissingParameter(section, key)\n\n    def _get_groups(self, username):\n        \"\"\" Get groups of a user\n        @str username: name of the user\n        @rtype: dict, format { '<backend>': [<list of groups>] }\n        \"\"\"\n        ret = {}\n        for b in self.backends:\n            ret[b] = self.backends[b].get_groups(username)\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' groups: \" + str(ret),\n            severity=logging.DEBUG,\n        )\n        return ret\n\n    def _get_roles(self, username):\n        \"\"\" Get roles of a user\n        @str username: name of the user\n        @rtype: dict, format { 'roles': [<list of roles>],\n            'unusedgroups': [<list of groups not matching roles>] }\n        \"\"\"\n        groups = self._get_groups(username)\n        user_roles = self.roles.get_roles(groups)\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' roles: \" + str(user_roles),\n            severity=logging.DEBUG,\n        )\n        return user_roles\n\n    def _is_admin(self, username):\n        \"\"\" Check if a user is an ldapcherry administrator\n        @str username: name of the user\n        @rtype: bool, True if administrator, False otherwise\n        \"\"\"\n        roles = self._get_roles(username)\n        return self.roles.is_admin(roles['roles'])\n\n    def _check_backends(self):\n        \"\"\" Check that every backend in roles and attributes\n        is declared in main configuration\n        \"\"\"\n        backends = self.backends_params.keys()\n        for b in self.roles.get_backends():\n            if b not in backends:\n                raise MissingBackend(b)\n        for b in self.roles.get_backends():\n            if b not in backends:\n                raise MissingBackend(b)\n\n    def _init_backends(self, config):\n        \"\"\" Init all backends\n        @dict: configuration of ldapcherry\n        \"\"\"\n        self.backends_params = {}\n        self.backends = {}\n        self.backends_display_names = {}\n        for entry in config['backends']:\n            # split at the first dot\n            backend, sep, param = entry.partition('.')\n            value = config['backends'][entry]\n            if backend not in self.backends_params:\n                self.backends_params[backend] = {}\n            self.backends_params[backend][param] = value\n        for backend in self.backends_params:\n            # get the backend display_name\n            try:\n                self.backends_display_names[backend] = \\\n                    self.backends_params[backend]['display_name']\n            except:\n                self.backends_display_names[backend] = backend\n                self.backends_params[backend]['display_name'] = backend\n            params = self.backends_params[backend]\n            # Loading the backend module\n            try:\n                module = params['module']\n            except Exception as e:\n                raise MissingParameter('backends', backend + '.module')\n            try:\n                bc = __import__(module, globals(), locals(), ['Backend'], -1)\n            except Exception as e:\n                self._handle_exception(e)\n                raise BackendModuleLoadingFail(module)\n            try:\n                attrslist = self.attributes.get_backend_attributes(backend)\n                key = self.attributes.get_backend_key(backend)\n                self.backends[backend] = bc.Backend(\n                    params,\n                    cherrypy.log,\n                    backend,\n                    attrslist,\n                    key,\n                    )\n            except MissingParameter as e:\n                raise\n            except Exception as e:\n                self._handle_exception(e)\n                raise BackendModuleInitFail(module)\n\n    def _init_custom_js(self, config):\n        self.custom_js = []\n        if '/custom' not in config:\n            return\n        directory = self._get_param(\n            '/custom',\n            'tools.staticdir.dir',\n            config,\n            )\n        for file in os.listdir(directory):\n            if file.endswith(\".js\"):\n                self.custom_js.append(file)\n\n    def _init_ppolicy(self, config):\n        module = self._get_param(\n            'ppolicy',\n            'ppolicy.module',\n            config,\n            'ldapcherry.ppolicy'\n        )\n        try:\n            pp = __import__(module, globals(), locals(), ['PPolicy'], -1)\n        except:\n            raise BackendModuleLoadingFail(module)\n        if 'ppolicy' in config:\n            ppcfg = config['ppolicy']\n        else:\n            ppcfg = {}\n        self.ppolicy = pp.PPolicy(ppcfg, cherrypy.log)\n\n    def _init_auth(self, config):\n        \"\"\" Init authentication\n        @dict: configuration of ldapcherry\n        \"\"\"\n        self.auth_mode = self._get_param('auth', 'auth.mode', config)\n        if self.auth_mode in ['and', 'or', 'none']:\n            pass\n        elif self.auth_mode == 'custom':\n            # load custom auth module\n            auth_module = self._get_param('auth', 'auth.module', config)\n            auth = __import__(auth_module, globals(), locals(), ['Auth'], -1)\n            self.auth = auth.Auth(config['auth'], cherrypy.log)\n        else:\n            raise WrongParamValue(\n                'auth.mode',\n                'auth',\n                ['and', 'or', 'none', 'custom'],\n                )\n\n        self.roles_file = self._get_param('roles', 'roles.file', config)\n        cherrypy.log.error(\n            msg=\"loading roles file '%(file)s'\" % {'file': self.roles_file},\n            severity=logging.DEBUG\n        )\n        self.roles = Roles(self.roles_file)\n\n    def _set_access_log(self, config, level):\n        \"\"\" Configure access logs\n        \"\"\"\n        access_handler = self._get_param(\n            'global',\n            'log.access_handler',\n            config,\n            'syslog',\n            )\n\n        # log format for syslog\n        syslog_formatter = logging.Formatter(\n            \"ldapcherry[%(process)d]: %(message)s\"\n            )\n\n        # replace access log handler by a syslog handler\n        if access_handler == 'syslog':\n            cherrypy.log.access_log.handlers = []\n            handler = logging.handlers.SysLogHandler(\n                address='/dev/log',\n                facility='user',\n                )\n            handler.setFormatter(syslog_formatter)\n            cherrypy.log.access_log.addHandler(handler)\n\n        # if file, we keep the default\n        elif access_handler == 'file':\n            pass\n\n        # replace access log handler by a null handler\n        elif access_handler == 'none':\n            cherrypy.log.access_log.handlers = []\n            handler = logging.NullHandler()\n            cherrypy.log.access_log.addHandler(handler)\n\n        # set log level\n        cherrypy.log.access_log.setLevel(level)\n\n    def _set_error_log(self, config, level, debug=False):\n        \"\"\" Configure error logs\n        \"\"\"\n        error_handler = self._get_param(\n            'global',\n            'log.error_handler',\n            config,\n            'syslog'\n            )\n\n        # log format for syslog\n        syslog_formatter = logging.Formatter(\n            \"ldapcherry[%(process)d]: %(message)s\",\n            )\n\n        # replacing the error handler by a syslog handler\n        if error_handler == 'syslog':\n            cherrypy.log.error_log.handlers = []\n\n            # redefining log.error method because cherrypy does weird\n            # things like adding the date inside the message\n            # or adding space even if context is empty\n            # (by the way, what's the use of \"context\"?)\n            cherrypy.log.error = syslog_error\n\n            handler = logging.handlers.SysLogHandler(\n                address='/dev/log',\n                facility='user',\n                )\n            handler.setFormatter(syslog_formatter)\n            cherrypy.log.error_log.addHandler(handler)\n\n        # if file, we keep the default\n        elif error_handler == 'file':\n            pass\n\n        # replacing the error handler by a null handler\n        elif error_handler == 'none':\n            cherrypy.log.error_log.handlers = []\n            handler = logging.NullHandler()\n            cherrypy.log.error_log.addHandler(handler)\n\n        # set log level\n        cherrypy.log.error_log.setLevel(level)\n\n        if debug:\n            handler = logging.StreamHandler(sys.stderr)\n            handler.setLevel(logging.DEBUG)\n            cherrypy.log.error_log.addHandler(handler)\n            cherrypy.log.error_log.setLevel(logging.DEBUG)\n\n    def _auth(self, user, password):\n        \"\"\" authenticate a user\n        @str user: login of the user\n        @str password: password of the user\n        @rtype: dict, {'connected': <boolean, True if connection succeded>,\n            'isadmin': <True if user is ldapcherry administrator>}\n        \"\"\"\n        if self.auth_mode == 'none':\n            return {'connected': True, 'isadmin': True}\n        elif self.auth_mode == 'and':\n            ret1 = True\n            for b in self.backends:\n                ret1 = self.backends[b].auth(user, password) and ret1\n        elif self.auth_mode == 'or':\n            ret1 = False\n            for b in self.backends:\n                ret1 = self.backends[b].auth(user, password) or ret1\n        elif self.auth_mode == 'custom':\n            ret1 = self.auth.auth(user, password)\n        else:\n            raise Exception()\n        if not ret1:\n            return {'connected': False, 'isadmin': False}\n        else:\n            isadmin = self._is_admin(user)\n            return {'connected': True, 'isadmin': isadmin}\n\n    def _load_templates(self, config):\n        \"\"\" load templates\n        @dict: configuration of ldapcherry\n        \"\"\"\n        # definition of the template directory\n        self.template_dir = self._get_param(\n            'resources',\n            'templates.dir',\n            config\n            )\n        cherrypy.log.error(\n            msg=\"loading templates from dir '%(dir)s'\" %\n                {'dir': self.template_dir},\n            severity=logging.DEBUG\n        )\n        # preload templates\n        self.temp_lookup = lookup.TemplateLookup(\n            directories=self.template_dir, input_encoding='utf-8'\n            )\n        # load each template\n        self.temp = {}\n        for t in ('index.tmpl', 'error.tmpl', 'login.tmpl', '404.tmpl',\n                  'searchadmin.tmpl', 'searchuser.tmpl', 'adduser.tmpl',\n                  'roles.tmpl', 'groups.tmpl', 'form.tmpl', 'selfmodify.tmpl',\n                  'modify.tmpl', 'service_unavailable.tmpl'\n                  ):\n            self.temp[t] = self.temp_lookup.get_template(t)\n\n    def reload(self, config=None, debug=False):\n        \"\"\" load/reload configuration\n        @dict: configuration of ldapcherry\n        \"\"\"\n        try:\n            # log configuration handling\n            # get log level\n            # (if not in configuration file, log level is set to debug)\n            level = get_loglevel(\n                self._get_param(\n                    'global',\n                    'log.level',\n                    config,\n                    'debug',\n                    )\n                )\n            # configure access log\n            self._set_access_log(config, level)\n            # configure error log\n            self._set_error_log(config, level, debug)\n\n            # load template files\n            self._load_templates(config)\n\n            # loading the auth configuration\n            self._init_auth(config)\n\n            # Loading the attributes\n            self.attributes_file = \\\n                self._get_param('attributes', 'attributes.file', config)\n            cherrypy.log.error(\n                msg=\"loading attributes file '%(file)s'\" %\n                    {'file': self.attributes_file},\n                severity=logging.DEBUG\n            )\n\n            self.notifications = {}\n\n            self.attributes = Attributes(self.attributes_file)\n\n            cherrypy.log.error(\n                msg=\"init directories backends\",\n                severity=logging.DEBUG\n            )\n            self._init_backends(config)\n            self._check_backends()\n\n            # loading the ppolicy\n            self._init_ppolicy(config)\n\n            # loading custom javascript\n            self._init_custom_js(config)\n\n            cherrypy.log.error(\n                msg=\"application started\",\n                severity=logging.INFO\n            )\n\n        except Exception as e:\n            self._handle_exception(e)\n            cherrypy.log.error(\n                msg=\"application failed to start\",\n                severity=logging.ERROR\n            )\n            exit(1)\n\n    def _add_notification(self, message):\n        \"\"\" add a notification in the notification queue of a user\n        \"\"\"\n        sess = cherrypy.session\n        username = sess.get(SESSION_KEY, None)\n        if username not in self.notifications:\n            self.notifications[username] = []\n        self.notifications[username].append(message)\n\n    def _empty_notification(self):\n        \"\"\" empty and return list of message notification\n        \"\"\"\n        sess = cherrypy.session\n        username = sess.get(SESSION_KEY, None)\n        if username in self.notifications:\n            ret = self.notifications[username]\n        else:\n            ret = []\n        self.notifications[username] = []\n        return ret\n\n    def _merge_user_attrs(self, attrs_backend, attrs_out, backend_name):\n        \"\"\" merge attributes from one backend search to the attributes dict\n        output\n\n        \"\"\"\n        for attr in attrs_backend:\n            if attr in self.attributes.backend_attributes[backend_name]:\n                attrid = self.attributes.backend_attributes[backend_name][attr]\n                if attrid not in attrs_out:\n                    attrs_out[attrid] = attrs_backend[attr]\n\n    def _search(self, searchstring):\n        \"\"\" search users\n        @str searchstring: search string\n        @rtype: dict, {<user>: {<attr>: <value>}}\n        \"\"\"\n        if searchstring is None:\n            return {}\n        ret = {}\n        for b in self.backends:\n            tmp = self.backends[b].search(searchstring)\n            for u in tmp:\n                if u not in ret:\n                    ret[u] = {}\n                self._merge_user_attrs(tmp[u], ret[u], b)\n        return ret\n\n    def _get_user(self, username):\n        \"\"\" get user attributes\n        @str username: user to get\n        @rtype: dict, {<attr>: <value>}\n        \"\"\"\n        if username is None:\n            return {}\n        ret = {}\n        for b in self.backends:\n            try:\n                tmp = self.backends[b].get_user(username)\n            except UserDoesntExist as e:\n                self._handle_exception(e)\n                tmp = {}\n            self._merge_user_attrs(tmp, ret, b)\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' attributes \" + str(ret),\n            severity=logging.DEBUG\n        )\n        return ret\n\n    def _parse_params(self, params):\n        \"\"\" get user attributes\n        @dict params: form parameters\n        @rtype: dict, {<type>: {<attr>: <value>}}\n        \"\"\"\n        ret = {'attrs': {}, 'roles': {}, 'groups': {}}\n        for p in params:\n            # each form attributes is prefixed with type, ex: attr.uidNumber\n            # separate this prefix from the attribute name\n            p_type, sep, param = p.partition('.')\n            if p_type == 'attr':\n                ret['attrs'][param] = params[p]\n            elif p_type == 'role':\n                ret['roles'][param] = params[p]\n            elif p_type == 'group':\n                # with groups there is a second prefix\n                # corresponding to the backend\n                backend, sep, value = param.partition('.')\n                if backend not in ret['groups']:\n                    ret['groups'][backend] = []\n                ret['groups'][backend].append(value)\n        return ret\n\n    def _check_admin(self):\n        \"\"\" check in the session database if current user\n        is an ldapcherry administrator\n        @rtype: boolean, True if administrator, False otherwise\n        \"\"\"\n        if self.auth_mode == 'none':\n            return True\n        return cherrypy.session['isadmin']\n\n    def _check_session(self):\n        if self.auth_mode == 'none':\n            return 'anonymous'\n        return cherrypy.session.get(SESSION_KEY)\n\n    def _check_auth(self, must_admin, redir_login=True):\n        \"\"\" check if a user is autheticated and, optionnaly an administrator\n        if user not authentifaced -> redirection to login page (with base64\n            of the originaly requested page (redirection after login)\n        if user authenticated, not admin and must_admin enabled -> 403 error\n        @boolean must_admin: flag \"user must be an administrator to access\n            this page\"\n        @rtype str: login of the user\n        \"\"\"\n        if self.auth_mode == 'none':\n            return 'anonymous'\n        username = self._check_session()\n\n        if cherrypy.request.query_string == '':\n            qs = ''\n        else:\n            qs = '?' + cherrypy.request.query_string\n        # base64 of the requested URL\n        b64requrl = base64.b64encode(cherrypy.url() + qs)\n        if not username:\n            # return to login page (with base64 of the url in query string\n            if redir_login:\n                raise cherrypy.HTTPRedirect(\n                    \"/signin?url=%(url)s\" % {'url': b64requrl},\n                    )\n            else:\n                raise cherrypy.HTTPError(\n                    \"403 Forbidden\",\n                    \"You must be logged in to access this ressource.\",\n                    )\n\n        if 'connected' not in cherrypy.session \\\n                or not cherrypy.session['connected']:\n            if redir_login:\n                raise cherrypy.HTTPRedirect(\n                    \"/signin?url=%(url)s\" % {'url': b64requrl},\n                    )\n            else:\n                raise cherrypy.HTTPError(\n                    \"403 Forbidden\",\n                    \"You must be logged in to access this ressource.\",\n                    )\n\n        if cherrypy.session['connected'] and \\\n                not cherrypy.session['isadmin']:\n            if must_admin:\n                # user is not an administrator, so he gets 403 Forbidden\n                raise cherrypy.HTTPError(\n                    \"403 Forbidden\",\n                    \"You are not allowed to access this resource.\",\n                    )\n            else:\n                return username\n\n        if cherrypy.session['connected'] and \\\n                cherrypy.session['isadmin']:\n            return username\n        else:\n            if redir_login:\n                raise cherrypy.HTTPRedirect(\n                    \"/signin?url=%(url)s\" % {'url': b64requrl},\n                    )\n            else:\n                raise cherrypy.HTTPError(\n                    \"403 Forbidden\",\n                    \"You must be logged in to access this ressource.\",\n                    )\n\n    def _adduser(self, params):\n        cherrypy.log.error(\n            msg=\"add user form attributes: \" + str(params),\n            severity=logging.DEBUG\n        )\n        badd = {}\n\n        for attr in self.attributes.get_attributes():\n            if self.attributes.attributes[attr]['type'] == 'password':\n                pwd1 = attr + '1'\n                pwd2 = attr + '2'\n                if params['attrs'][pwd1] != params['attrs'][pwd2]:\n                    raise PasswordMissMatch()\n                if not self._checkppolicy(params['attrs'][pwd1])['match']:\n                    raise PPolicyError()\n                params['attrs'][attr] = params['attrs'][pwd1]\n            if attr in params['attrs']:\n                self.attributes.check_attr(attr, params['attrs'][attr])\n                backends = self.attributes.get_backends_attributes(attr)\n                for b in backends:\n                    if b not in badd:\n                        badd[b] = {}\n                    badd[b][backends[b]] = params['attrs'][attr]\n        added = False\n        for b in badd:\n            try:\n                self.backends[b].add_user(badd[b])\n                added = True\n            except UserAlreadyExists as e:\n                self._add_notification(\n                    'User already exists in backend \"' + b + '\"'\n                    )\n        if not added:\n            raise e\n\n        key = self.attributes.get_key()\n        username = params['attrs'][key]\n        sess = cherrypy.session\n        admin = sess.get(SESSION_KEY, 'unknown')\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' added by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' attributes: \" + str(badd),\n            severity=logging.DEBUG\n        )\n\n        roles = []\n        for r in self.roles.get_allroles():\n            if r in params['roles']:\n                roles.append(r)\n        groups = self.roles.get_groups(roles)\n        for b in groups:\n            self.backends[b].add_to_groups(username, Set(groups[b]))\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' made member of \" +\n                str(roles) + \" by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' groups: \" + str(groups),\n            severity=logging.DEBUG\n        )\n\n    def _modify_attrs(self, params, attr_list, username):\n        badd = {}\n        for attr in attr_list:\n            if self.attributes.attributes[attr]['type'] == 'password':\n                pwd1 = attr + '1'\n                pwd2 = attr + '2'\n                if pwd1 in params['attrs']:\n                    if params['attrs'][pwd1] != params['attrs'][pwd2]:\n                        raise PasswordMissMatch()\n                    if params['attrs'][pwd1] != '' and \\\n                            not self._checkppolicy(\n                                params['attrs'][pwd1]\n                                )['match']:\n                        raise PPolicyError()\n                    params['attrs'][attr] = params['attrs'][pwd1]\n            if attr in params['attrs'] and params['attrs'][attr] != '':\n                self.attributes.check_attr(attr, params['attrs'][attr])\n                backends = self.attributes.get_backends_attributes(attr)\n                for b in backends:\n                    if b not in badd:\n                        badd[b] = {}\n                    badd[b][backends[b]] = params['attrs'][attr]\n        for b in badd:\n            try:\n                self.backends[b].set_attrs(username, badd[b])\n            except UserDoesntExist as e:\n                self._add_notification(\n                    'User does not exist in backend \"' + b + '\"'\n                    )\n\n        return badd\n\n    def _selfmodify(self, params):\n        cherrypy.log.error(\n            msg=\"modify user form attributes: \" + str(params),\n            severity=logging.DEBUG\n        )\n        sess = cherrypy.session\n        username = sess.get(SESSION_KEY, None)\n        badd = self._modify_attrs(\n            params,\n            self.attributes.get_selfattributes(),\n            username,\n            )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' modified his attributes\",\n            severity=logging.INFO\n        )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' attributes: \" + str(badd),\n            severity=logging.DEBUG\n        )\n\n    def _modify(self, params):\n        cherrypy.log.error(\n            msg=\"modify user form attributes: \" + str(params),\n            severity=logging.DEBUG\n        )\n        key = self.attributes.get_key()\n        username = params['attrs'][key]\n\n        badd = self._modify_attrs(\n            params,\n            self.attributes.get_attributes(),\n            username\n            )\n\n        sess = cherrypy.session\n        admin = sess.get(SESSION_KEY, 'unknown')\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' modified by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' attributes: \" + str(badd),\n            severity=logging.DEBUG\n        )\n\n        tmp = self._get_roles(username)\n        roles_current = tmp['roles']\n        lonely_groups = tmp['unusedgroups']\n        roles_member = []\n        roles_not_member = []\n\n        groups_keep = {}\n        groups_remove = {}\n\n        for b in lonely_groups:\n            for g in lonely_groups[b]:\n                if b in params['groups'] and g in params['groups'][b]:\n                    if b not in groups_keep:\n                        groups_keep[b] = []\n                    groups_keep[b].append(g)\n\n                else:\n                    if b not in groups_remove:\n                        groups_remove[b] = []\n                    groups_remove[b].append(g)\n\n        for r in self.roles.get_allroles():\n            if r in params['roles']:\n                roles_member.append(r)\n            else:\n                roles_not_member.append(r)\n\n        groups_current = self.roles.get_groups(roles_current)\n        groups_rm = self.roles.get_groups(roles_not_member)\n        groups_add = self.roles.get_groups(roles_member)\n\n        for b in groups_add:\n            for g in [groups_add, groups_keep,\n                      groups_current, lonely_groups]:\n                if b not in g:\n                    g[b] = []\n            tmp = \\\n                Set(groups_add[b]) - \\\n                Set(groups_keep[b]) - \\\n                Set(groups_current[b]) - \\\n                Set(lonely_groups[b])\n            cherrypy.log.error(\n                msg=\"user '\" + username + \"' added to groups: \" +\n                    str(list(tmp)) + \" in backend '\" + b + \"'\",\n                severity=logging.DEBUG\n            )\n            self.backends[b].add_to_groups(username, tmp)\n        for b in groups_rm:\n            for g in [groups_remove, groups_rm, groups_add,\n                      groups_keep, groups_current, lonely_groups]:\n                if b not in g:\n                    g[b] = []\n            tmp = \\\n                (\n                    (Set(groups_rm[b]) | Set(groups_remove[b])) -\n                    (Set(groups_keep[b]) | Set(groups_add[b]))\n                ) & \\\n                (\n                    Set(groups_current[b]) | Set(lonely_groups[b])\n                )\n            cherrypy.log.error(\n                msg=\"user '\" + username + \"' removed from groups: \" +\n                    str(list(tmp)) + \" in backend '\" + b + \"'\",\n                severity=logging.DEBUG\n            )\n            self.backends[b].del_from_groups(username, tmp)\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' made member of \" +\n                str(roles_member) + \" by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n\n    def _deleteuser(self, username):\n        sess = cherrypy.session\n        admin = sess.get(SESSION_KEY, 'unknown')\n\n        for b in self.backends:\n            try:\n                self.backends[b].del_user(username)\n            except UserDoesntExist as e:\n                cherrypy.log.error(\n                    msg=\"User '\" + username +\n                        \"' didn't exist in backend '\" + b + \"'\",\n                    severity=logging.INFO\n                )\n            cherrypy.log.error(\n                msg=\"user '\" + username + \"' deleted from backend '\" + b + \"'\",\n                severity=logging.DEBUG\n            )\n\n        cherrypy.log.error(\n            msg=\"User '\" + username + \"' deleted by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n\n    def _checkppolicy(self, password):\n        return self.ppolicy.check(password)\n\n    @cherrypy.expose\n    @exception_decorator\n    def signin(self, url=None):\n        \"\"\"simple signin page\n        \"\"\"\n        return self.temp['login.tmpl'].render(url=url)\n\n    @cherrypy.expose\n    @exception_decorator\n    def login(self, login, password, url=None):\n        \"\"\"login page\n        \"\"\"\n        auth = self._auth(login, password)\n        cherrypy.session['isadmin'] = auth['isadmin']\n        cherrypy.session['connected'] = auth['connected']\n\n        if auth['connected']:\n            if auth['isadmin']:\n                message = \\\n                    \"login success for user '%(user)s' as administrator\" % {\n                        'user': login\n                    }\n            else:\n                message = \\\n                    \"login success for user '%(user)s' as normal user\" % {\n                        'user': login\n                    }\n            cherrypy.log.error(\n                msg=message,\n                severity=logging.INFO\n            )\n            cherrypy.session[SESSION_KEY] = cherrypy.request.login = login\n            if url is None:\n                redirect = \"/\"\n            else:\n                redirect = base64.b64decode(url)\n            raise cherrypy.HTTPRedirect(redirect)\n        else:\n            message = \"login failed for user '%(user)s'\" % {\n                'user': login\n            }\n            cherrypy.log.error(\n                msg=message,\n                severity=logging.WARNING\n            )\n            if url is None:\n                qs = ''\n            else:\n                qs = '?url=' + url\n            raise cherrypy.HTTPRedirect(\"/signin\" + qs)\n\n    @cherrypy.expose\n    @exception_decorator\n    def logout(self):\n        \"\"\" logout page\n        \"\"\"\n        sess = cherrypy.session\n        username = sess.get(SESSION_KEY, None)\n        sess[SESSION_KEY] = None\n        if username:\n            cherrypy.request.login = None\n\n        cherrypy.log.error(\n            msg=\"user '%(user)s' logout\" % {'user': username},\n            severity=logging.INFO\n        )\n        raise cherrypy.HTTPRedirect(\"/signin\")\n\n    @cherrypy.expose\n    @exception_decorator\n    def index(self):\n        \"\"\"main page rendering\n        \"\"\"\n        self._check_auth(must_admin=False)\n        is_admin = self._check_admin()\n        sess = cherrypy.session\n        user = sess.get(SESSION_KEY, None)\n        if self.auth_mode == 'none':\n            user_attrs = None\n        else:\n            user_attrs = self._get_user(user)\n        attrs_list = self.attributes.get_search_attributes()\n        return self.temp['index.tmpl'].render(\n            is_admin=is_admin,\n            attrs_list=attrs_list,\n            searchresult=self._escape(user_attrs, 'attr_list'),\n            notifications=self._empty_notification(),\n            )\n\n    @cherrypy.expose\n    @exception_decorator\n    def searchuser(self, searchstring=None):\n        \"\"\" search user page \"\"\"\n        self._check_auth(must_admin=False)\n        is_admin = self._check_admin()\n        if searchstring is not None and len(searchstring) > 2:\n            res = self._search(searchstring)\n        else:\n            res = None\n        attrs_list = self.attributes.get_search_attributes()\n        return self.temp['searchuser.tmpl'].render(\n            searchresult=self._escape(res, 'search_list'),\n            attrs_list=attrs_list,\n            is_admin=is_admin,\n            custom_js=self.custom_js,\n            notifications=self._empty_notification(),\n            )\n\n    @cherrypy.expose\n    @exception_decorator\n    def checkppolicy(self, **params):\n        \"\"\" search user page \"\"\"\n        self._check_auth(must_admin=False, redir_login=False)\n        keys = params.keys()\n        if len(keys) != 1:\n            cherrypy.response.status = 400\n            return \"bad argument\"\n        password = params[keys[0]]\n        is_admin = self._check_admin()\n        ret = self._checkppolicy(password)\n        if ret['match']:\n            cherrypy.response.status = 200\n        else:\n            cherrypy.response.status = 200\n        return json.dumps(ret, separators=(',', ':'))\n\n    @cherrypy.expose\n    @exception_decorator\n    def searchadmin(self, searchstring=None):\n        \"\"\" search user page \"\"\"\n        self._check_auth(must_admin=True)\n        is_admin = self._check_admin()\n        if searchstring is not None:\n            res = self._search(searchstring)\n        else:\n            res = None\n        attrs_list = self.attributes.get_search_attributes()\n        return self.temp['searchadmin.tmpl'].render(\n            searchresult=self._escape(res, 'search_list'),\n            attrs_list=attrs_list,\n            is_admin=is_admin,\n            custom_js=self.custom_js,\n            notifications=self._empty_notification(),\n            )\n\n    @cherrypy.expose\n    @exception_decorator\n    def adduser(self, **params):\n        \"\"\" add user page \"\"\"\n        self._check_auth(must_admin=True)\n        is_admin = self._check_admin()\n\n        if cherrypy.request.method.upper() == 'POST':\n            params = self._parse_params(params)\n            self._adduser(params)\n            self._add_notification(\"User added\")\n\n        graph = {}\n        for r in self.roles.graph:\n            s = list(self.roles.graph[r]['sub_roles'])\n            p = list(self.roles.graph[r]['parent_roles'])\n            graph[r] = {'sub_roles': s, 'parent_roles': p}\n        graph_js = json.dumps(graph, separators=(',', ':'))\n        display_names = {}\n        for r in self.roles.flatten:\n            display_names[r] = self.roles.flatten[r]['display_name']\n        roles_js = json.dumps(display_names, separators=(',', ':'))\n        try:\n            form = self.temp['form.tmpl'].render(\n                attributes=self.attributes.attributes,\n                values=None,\n                modify=False,\n                autofill=True\n                )\n            roles = self.temp['roles.tmpl'].render(\n                roles=self.roles.flatten,\n                graph=self.roles.graph,\n                graph_js=graph_js,\n                roles_js=roles_js,\n                current_roles=None,\n                )\n            return self.temp['adduser.tmpl'].render(\n                form=form,\n                roles=roles,\n                is_admin=is_admin,\n                custom_js=self.custom_js,\n                notifications=self._empty_notification(),\n                )\n        except NameError:\n            raise TemplateRenderError(\n                    exceptions.text_error_template().render()\n                    )\n\n    @cherrypy.expose\n    @exception_decorator\n    def delete(self, user):\n        \"\"\" remove user page \"\"\"\n        self._check_auth(must_admin=True)\n        is_admin = self._check_admin()\n        try:\n            referer = cherrypy.request.headers['Referer']\n        except:\n            referer = '/'\n        self._deleteuser(user)\n        self._add_notification('User Deleted')\n        raise cherrypy.HTTPRedirect(referer)\n\n    @cherrypy.expose\n    @exception_decorator\n    def modify(self, user=None, **params):\n        \"\"\" modify user page \"\"\"\n        self._check_auth(must_admin=True)\n        is_admin = self._check_admin()\n\n        if cherrypy.request.method.upper() == 'POST':\n            params = self._parse_params(params)\n            self._modify(params)\n            self._add_notification(\"User modified\")\n            try:\n                referer = cherrypy.request.headers['Referer']\n            except:\n                referer = '/'\n            raise cherrypy.HTTPRedirect(referer)\n\n        graph = {}\n        for r in self.roles.graph:\n            s = list(self.roles.graph[r]['sub_roles'])\n            p = list(self.roles.graph[r]['parent_roles'])\n            graph[r] = {'sub_roles': s, 'parent_roles': p}\n        graph_js = json.dumps(graph, separators=(',', ':'))\n        display_names = {}\n        for r in self.roles.flatten:\n            display_names[r] = self.roles.flatten[r]['display_name']\n\n        if user is None:\n            cherrypy.response.status = 400\n            return self.temp['error.tmpl'].render(\n                is_admin=is_admin,\n                alert='warning',\n                message=\"No user requested\"\n                )\n\n        user_attrs = self._get_user(user)\n        if user_attrs == {}:\n            cherrypy.response.status = 400\n            return self.temp['error.tmpl'].render(\n                is_admin=is_admin,\n                alert='warning',\n                message=\"User '\" + user + \"' does not exist\"\n                )\n        tmp = self._get_roles(user)\n        user_roles = tmp['roles']\n        standalone_groups = tmp['unusedgroups']\n        roles_js = json.dumps(display_names, separators=(',', ':'))\n        key = self.attributes.get_key()\n\n        try:\n            form = self.temp['form.tmpl'].render(\n                attributes=self.attributes.attributes,\n                values=self._escape(user_attrs, 'attr_list'),\n                modify=True,\n                keyattr=key,\n                autofill=False\n                )\n\n            roles = self.temp['roles.tmpl'].render(\n                roles=self.roles.flatten,\n                graph=self.roles.graph,\n                graph_js=graph_js,\n                roles_js=roles_js,\n                current_roles=user_roles,\n            )\n\n            glued_template = self.temp['modify.tmpl'].render(\n                form=form,\n                roles=roles,\n                is_admin=is_admin,\n                standalone_groups=self._escape(\n                    standalone_groups,\n                    'lonely_groups'\n                    ),\n                backends_display_names=self.backends_display_names,\n                custom_js=self.custom_js,\n                notifications=self._empty_notification(),\n            )\n        except NameError:\n            raise TemplateRenderError(\n                    exceptions.text_error_template().render()\n                    )\n\n        return glued_template\n\n    @cherrypy.expose\n    @exception_decorator\n    def default(self, attr='', **params):\n        cherrypy.response.status = 404\n        self._check_auth(must_admin=False)\n        is_admin = self._check_admin()\n        return self.temp['404.tmpl'].render(\n            is_admin=is_admin,\n            notifications=self._empty_notification(),\n            )\n\n    @cherrypy.expose\n    @exception_decorator\n    def selfmodify(self, **params):\n        \"\"\" self modify user page \"\"\"\n        self._check_auth(must_admin=False)\n        is_admin = self._check_admin()\n        sess = cherrypy.session\n        user = sess.get(SESSION_KEY, None)\n        if self.auth_mode == 'none':\n            return self.temp['error.tmpl'].render(\n                is_admin=is_admin,\n                alert='warning',\n                message=\"Not accessible with authentication disabled.\"\n                )\n        if cherrypy.request.method.upper() == 'POST':\n            params = self._parse_params(params)\n            self._selfmodify(params)\n            self._add_notification(\n                \"Self modification done\"\n            )\n        user_attrs = self._get_user(user)\n\n        try:\n            if user_attrs == {}:\n                return self.temp['error.tmpl'].render(\n                    is_admin=is_admin,\n                    alert='warning',\n                    message=\"User doesn't exist\"\n                    )\n\n            form = self.temp['form.tmpl'].render(\n                attributes=self.attributes.get_selfattributes(),\n                values=self._escape(user_attrs, 'attr_list'),\n                modify=True,\n                autofill=False\n                )\n            return self.temp['selfmodify.tmpl'].render(\n                form=form,\n                is_admin=is_admin,\n                notifications=self._empty_notification(),\n                )\n        except NameError:\n            raise TemplateRenderError(\n                    exceptions.text_error_template().render()\n                    )\n", "## -*- coding: utf-8 -*-\n<%inherit file=\"navbar.tmpl\"/>\n    <%block name=\"core\">\n    <div class=\"row clearfix top-buffer bottom-buffer\">\n        <div class=\"col-md-2 column\">\n        </div>\n        <div class=\"col-md-12 column\">\n            <div class=\"well well-sm\">\n              <form method='POST' autocomplete=\"off\" action='/adduser' role=\"form\" class=\"form-signin\" id=form>\n              <fieldset>\n              <legend>Fill new user's attributes:</legend>\n              ${form}\n              </fieldset>\n              <fieldset>\n              <legend>Enable/Disable user's roles:</legend>\n              ${roles}\n              </fieldset>\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                  <button class=\"btn btn-default green\" type=\"submit\">\n                  <span class=\"glyphicon glyphicon-plus-sign\"></span> Add User</button>\n                </div>\n              </div>\n              </form>\n              <script type=\"text/javascript\" src=\"/static/js/ppolicy.js\"></script>\n            </div>\n        </div>\n        <div class=\"col-md-2 column\">\n        </div>\n    </div>\n</%block>\n", "## -*- coding: utf-8 -*-\n<%inherit file=\"base.tmpl\"/>\n<%block name=\"core\">\n    <div class=\"row clearfix\" style=\"margin-top:30px\">\n        <div class=\"col-md-4 column\"></div>\n        <div class=\"col-md-4 column well\">\n<%\nif url is None:\n    qs=''\nelse:\n    qs='?url=' + url\n%>\n            <form method='POST' action='/login${qs}' role=\"form\" class=\"form-signin\">\n              <div class=\"form-group\">\n              <h2 class=\"form-signin-heading\">Please sign in</h2>\n                <div class=\"input-group\">\n                    <span class=\"input-group-addon glyphicon glyphicon-user\"></span>\n                    <input type=\"text\" class=\"form-control\" name=\"login\" placeholder=\"Login\" required autofocus>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                    <span class=\"input-group-addon glyphicon glyphicon-lock\"></span>\n                    <input type=\"password\" class=\"form-control\" name=\"password\" placeholder=\"Password\" required>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                  <button class=\"btn btn-default blue\" type=\"submit\"><span class=\"glyphicon glyphicon-off\"></span> Sign in</button>\n                </div>\n              </div>\n            </form>\n        </div>\n        <div class=\"col-md-4 column\"></div>\n    </div>\n</%block>\n", "## -*- coding: utf-8 -*-\n<%inherit file=\"navbar.tmpl\"/>\n    <%block name=\"core\">\n    <div class=\"row clearfix top-buffer bottom-buffer\">\n        <div class=\"col-md-2 column\">\n        </div>\n        <div class=\"col-md-12 column\">\n            <div class=\"well well-sm\">\n              <form method='POST' action='/modify' role=\"form\" class=\"form-signin\" id=\"form\">\n              <fieldset>\n              <legend>Modify user's attributes:</legend>\n              ${form}\n              </fieldset>\n              <fieldset>\n              <legend>Enable/Disable user's roles:</legend>\n              ${roles}\n              </fieldset>\n              % if len(standalone_groups) != 0:\n              <fieldset>\n              <legend>Delete user's individual groups:</legend>\n              <table id=\"RecordTable\" class=\"table table-hover table-condensed tablesorter\">\n              <thead>\n              <tr>\n                  <th class=\"sorter-false\">\n                      Backend\n                  </th>\n                  <th class=\"sorter-false\">\n                      Group \n                  </th>\n                  <th class=\"sorter-false\">\n                      Enable/Disable\n                  </th>\n              </tr>\n              </thead>\n              <tbody>\n              % for backend in standalone_groups:\n                  % for group in standalone_groups[backend]:\n                  <tr>\n                    <td>\n                    ${backends_display_names[backend]}\n                    </td>\n                    <td>\n                    ${group}\n                    </td>\n                    <td>\n                    <input data-on-color=\"success\" data-off-color=\"danger\" data-on-text=\"Enabled\" \n                           data-off-text=\"Disabled\" data-handle-width=\"75\" type=\"checkbox\" \n                           name=\"group.${backend}.${group}\" data-size=\"mini\" id=\"group.${backend}.${group}\" checked>\n                    <script>$(\"[name='group.${backend}.${group}']\").bootstrapSwitch();</script>\n                    </td>\n                  </tr>\n                  % endfor\n              % endfor\n              </tbody>\n              </table>\n              </fieldset>\n              % endif\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                  <button class=\"btn btn-default blue\" type=\"submit\">\n                  <span class=\"glyphicon glyphicon-cog\"></span> Modify User</button>\n                </div>\n              </div>\n              </form>\n              <script type=\"text/javascript\" src=\"/static/js/ppolicy.js\"></script>\n            </div>\n        </div>\n        <div class=\"col-md-2 column\">\n        </div>\n    </div>\n</%block>\n", "## -*- coding: utf-8 -*-\n<%inherit file=\"navbar.tmpl\"/>\n<%block name=\"core\">\n    <div class=\"row clearfix top-buffer bottom-buffer\">\n        <div class=\"col-md-2 column\">\n        </div>\n        <div class=\"col-md-12 column\">\n            <div class=\"well well-sm\">\n              <form method='POST' action='/selfmodify' autocomplete=\"off\" role=\"form\" class=\"form-signin\" id=\"form\">\n              <legend>Modify your attributes:</legend>\n              ${form}\n              </fieldset>\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                    <button type=\"submit\" class=\"btn btn-default blue\">\n                    <span class=\"glyphicon glyphicon-cog\"></span> Modify</button>\n                </div>\n              </div>\n              </form>\n              <script type=\"text/javascript\" src=\"/static/js/ppolicy.js\"></script>\n            </div>\n        </div>\n        <div class=\"col-md-2 column\">\n        </div>\n    </div>\n</%block>\n"], "fixing_code": ["#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# vim:set expandtab tabstop=4 shiftwidth=4:\n#\n# The MIT License (MIT)\n# ldapCherry\n# Copyright (c) 2014 Carpentier Pierre-Francois\n\n# Generic imports\nimport sys\nimport re\nimport traceback\nimport json\nimport logging\nimport logging.handlers\nfrom operator import itemgetter\nfrom socket import error as socket_error\nimport urllib\nimport cgi\n\nfrom exceptions import *\nfrom ldapcherry.lclogging import *\nfrom ldapcherry.roles import Roles\nfrom ldapcherry.attributes import Attributes\n\n# Cherrypy http framework imports\nimport cherrypy\nfrom cherrypy.lib.httputil import parse_query_string\n\n# Mako template engines imports\nfrom mako.template import Template\nfrom mako import lookup\nfrom mako import exceptions\nfrom sets import Set\n\nSESSION_KEY = '_cp_username'\n\n\nclass LdapCherry(object):\n\n    def _handle_exception(self, e):\n        if hasattr(e, 'log'):\n            cherrypy.log.error(\n                msg=e.log,\n                severity=logging.ERROR\n            )\n        else:\n            cherrypy.log.error(\n                msg=\"uncaught exception: [%(e)s]\" % {'e': str(e)},\n                severity=logging.ERROR\n            )\n        # log the traceback as 'debug'\n        cherrypy.log.error(\n            msg='',\n            severity=logging.DEBUG,\n            traceback=True\n            )\n\n    def _escape_list(self, data):\n        ret = []\n        for i in data:\n            ret.append(cgi.escape(i, True))\n        return ret\n\n    def _escape_dict(self, data):\n        for d in data:\n            if isinstance(data[d], list):\n                data[d] = self._escape_list(data[d])\n            elif isinstance(data[d], dict):\n                data[d] = self._escape_dict(data[d])\n            elif isinstance(data[d], Set):\n                data[d] = Set(self._escape_list(data[d]))\n            else:\n                data[d] = cgi.escape(data[d], True)\n        return data\n\n    def _escape(self, data, dtype):\n        if data is None:\n            return None\n        elif dtype == 'search_list':\n            for d in data:\n                data[d] = self._escape_dict(data[d])\n        elif dtype == 'attr_list':\n            data = self._escape_dict(data)\n        elif dtype == 'lonely_groups':\n            data = self._escape_dict(data)\n        return data\n\n    def _get_param(self, section, key, config, default=None):\n        \"\"\" Get configuration parameter \"key\" from config\n        @str section: the section of the config file\n        @str key: the key to get\n        @dict config: the configuration (dictionnary)\n        @str default: the default value if parameter \"key\" is not present\n        @rtype: str (value of config['key'] if present default otherwith\n        \"\"\"\n        if section in config and key in config[section]:\n            return config[section][key]\n        if default is not None:\n            return default\n        else:\n            raise MissingParameter(section, key)\n\n    def _get_groups(self, username):\n        \"\"\" Get groups of a user\n        @str username: name of the user\n        @rtype: dict, format { '<backend>': [<list of groups>] }\n        \"\"\"\n        ret = {}\n        for b in self.backends:\n            ret[b] = self.backends[b].get_groups(username)\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' groups: \" + str(ret),\n            severity=logging.DEBUG,\n        )\n        return ret\n\n    def _get_roles(self, username):\n        \"\"\" Get roles of a user\n        @str username: name of the user\n        @rtype: dict, format { 'roles': [<list of roles>],\n            'unusedgroups': [<list of groups not matching roles>] }\n        \"\"\"\n        groups = self._get_groups(username)\n        user_roles = self.roles.get_roles(groups)\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' roles: \" + str(user_roles),\n            severity=logging.DEBUG,\n        )\n        return user_roles\n\n    def _is_admin(self, username):\n        \"\"\" Check if a user is an ldapcherry administrator\n        @str username: name of the user\n        @rtype: bool, True if administrator, False otherwise\n        \"\"\"\n        roles = self._get_roles(username)\n        return self.roles.is_admin(roles['roles'])\n\n    def _check_backends(self):\n        \"\"\" Check that every backend in roles and attributes\n        is declared in main configuration\n        \"\"\"\n        backends = self.backends_params.keys()\n        for b in self.roles.get_backends():\n            if b not in backends:\n                raise MissingBackend(b)\n        for b in self.roles.get_backends():\n            if b not in backends:\n                raise MissingBackend(b)\n\n    def _init_backends(self, config):\n        \"\"\" Init all backends\n        @dict: configuration of ldapcherry\n        \"\"\"\n        self.backends_params = {}\n        self.backends = {}\n        self.backends_display_names = {}\n        for entry in config['backends']:\n            # split at the first dot\n            backend, sep, param = entry.partition('.')\n            value = config['backends'][entry]\n            if backend not in self.backends_params:\n                self.backends_params[backend] = {}\n            self.backends_params[backend][param] = value\n        for backend in self.backends_params:\n            # get the backend display_name\n            try:\n                self.backends_display_names[backend] = \\\n                    self.backends_params[backend]['display_name']\n            except:\n                self.backends_display_names[backend] = backend\n                self.backends_params[backend]['display_name'] = backend\n            params = self.backends_params[backend]\n            # Loading the backend module\n            try:\n                module = params['module']\n            except Exception as e:\n                raise MissingParameter('backends', backend + '.module')\n            try:\n                bc = __import__(module, globals(), locals(), ['Backend'], -1)\n            except Exception as e:\n                self._handle_exception(e)\n                raise BackendModuleLoadingFail(module)\n            try:\n                attrslist = self.attributes.get_backend_attributes(backend)\n                key = self.attributes.get_backend_key(backend)\n                self.backends[backend] = bc.Backend(\n                    params,\n                    cherrypy.log,\n                    backend,\n                    attrslist,\n                    key,\n                    )\n            except MissingParameter as e:\n                raise\n            except Exception as e:\n                self._handle_exception(e)\n                raise BackendModuleInitFail(module)\n\n    def _init_custom_js(self, config):\n        self.custom_js = []\n        if '/custom' not in config:\n            return\n        directory = self._get_param(\n            '/custom',\n            'tools.staticdir.dir',\n            config,\n            )\n        for file in os.listdir(directory):\n            if file.endswith(\".js\"):\n                self.custom_js.append(file)\n\n    def _init_ppolicy(self, config):\n        module = self._get_param(\n            'ppolicy',\n            'ppolicy.module',\n            config,\n            'ldapcherry.ppolicy'\n        )\n        try:\n            pp = __import__(module, globals(), locals(), ['PPolicy'], -1)\n        except:\n            raise BackendModuleLoadingFail(module)\n        if 'ppolicy' in config:\n            ppcfg = config['ppolicy']\n        else:\n            ppcfg = {}\n        self.ppolicy = pp.PPolicy(ppcfg, cherrypy.log)\n\n    def _init_auth(self, config):\n        \"\"\" Init authentication\n        @dict: configuration of ldapcherry\n        \"\"\"\n        self.auth_mode = self._get_param('auth', 'auth.mode', config)\n        if self.auth_mode in ['and', 'or', 'none']:\n            pass\n        elif self.auth_mode == 'custom':\n            # load custom auth module\n            auth_module = self._get_param('auth', 'auth.module', config)\n            auth = __import__(auth_module, globals(), locals(), ['Auth'], -1)\n            self.auth = auth.Auth(config['auth'], cherrypy.log)\n        else:\n            raise WrongParamValue(\n                'auth.mode',\n                'auth',\n                ['and', 'or', 'none', 'custom'],\n                )\n\n        self.roles_file = self._get_param('roles', 'roles.file', config)\n        cherrypy.log.error(\n            msg=\"loading roles file '%(file)s'\" % {'file': self.roles_file},\n            severity=logging.DEBUG\n        )\n        self.roles = Roles(self.roles_file)\n\n    def _set_access_log(self, config, level):\n        \"\"\" Configure access logs\n        \"\"\"\n        access_handler = self._get_param(\n            'global',\n            'log.access_handler',\n            config,\n            'syslog',\n            )\n\n        # log format for syslog\n        syslog_formatter = logging.Formatter(\n            \"ldapcherry[%(process)d]: %(message)s\"\n            )\n\n        # replace access log handler by a syslog handler\n        if access_handler == 'syslog':\n            cherrypy.log.access_log.handlers = []\n            handler = logging.handlers.SysLogHandler(\n                address='/dev/log',\n                facility='user',\n                )\n            handler.setFormatter(syslog_formatter)\n            cherrypy.log.access_log.addHandler(handler)\n\n        # if file, we keep the default\n        elif access_handler == 'file':\n            pass\n\n        # replace access log handler by a null handler\n        elif access_handler == 'none':\n            cherrypy.log.access_log.handlers = []\n            handler = logging.NullHandler()\n            cherrypy.log.access_log.addHandler(handler)\n\n        # set log level\n        cherrypy.log.access_log.setLevel(level)\n\n    def _set_error_log(self, config, level, debug=False):\n        \"\"\" Configure error logs\n        \"\"\"\n        error_handler = self._get_param(\n            'global',\n            'log.error_handler',\n            config,\n            'syslog'\n            )\n\n        # log format for syslog\n        syslog_formatter = logging.Formatter(\n            \"ldapcherry[%(process)d]: %(message)s\",\n            )\n\n        # replacing the error handler by a syslog handler\n        if error_handler == 'syslog':\n            cherrypy.log.error_log.handlers = []\n\n            # redefining log.error method because cherrypy does weird\n            # things like adding the date inside the message\n            # or adding space even if context is empty\n            # (by the way, what's the use of \"context\"?)\n            cherrypy.log.error = syslog_error\n\n            handler = logging.handlers.SysLogHandler(\n                address='/dev/log',\n                facility='user',\n                )\n            handler.setFormatter(syslog_formatter)\n            cherrypy.log.error_log.addHandler(handler)\n\n        # if file, we keep the default\n        elif error_handler == 'file':\n            pass\n\n        # replacing the error handler by a null handler\n        elif error_handler == 'none':\n            cherrypy.log.error_log.handlers = []\n            handler = logging.NullHandler()\n            cherrypy.log.error_log.addHandler(handler)\n\n        # set log level\n        cherrypy.log.error_log.setLevel(level)\n\n        if debug:\n            handler = logging.StreamHandler(sys.stderr)\n            handler.setLevel(logging.DEBUG)\n            cherrypy.log.error_log.addHandler(handler)\n            cherrypy.log.error_log.setLevel(logging.DEBUG)\n\n    def _auth(self, user, password):\n        \"\"\" authenticate a user\n        @str user: login of the user\n        @str password: password of the user\n        @rtype: dict, {'connected': <boolean, True if connection succeded>,\n            'isadmin': <True if user is ldapcherry administrator>}\n        \"\"\"\n        if self.auth_mode == 'none':\n            return {'connected': True, 'isadmin': True}\n        elif self.auth_mode == 'and':\n            ret1 = True\n            for b in self.backends:\n                ret1 = self.backends[b].auth(user, password) and ret1\n        elif self.auth_mode == 'or':\n            ret1 = False\n            for b in self.backends:\n                ret1 = self.backends[b].auth(user, password) or ret1\n        elif self.auth_mode == 'custom':\n            ret1 = self.auth.auth(user, password)\n        else:\n            raise Exception()\n        if not ret1:\n            return {'connected': False, 'isadmin': False}\n        else:\n            isadmin = self._is_admin(user)\n            return {'connected': True, 'isadmin': isadmin}\n\n    def _load_templates(self, config):\n        \"\"\" load templates\n        @dict: configuration of ldapcherry\n        \"\"\"\n        # definition of the template directory\n        self.template_dir = self._get_param(\n            'resources',\n            'templates.dir',\n            config\n            )\n        cherrypy.log.error(\n            msg=\"loading templates from dir '%(dir)s'\" %\n                {'dir': self.template_dir},\n            severity=logging.DEBUG\n        )\n        # preload templates\n        self.temp_lookup = lookup.TemplateLookup(\n            directories=self.template_dir, input_encoding='utf-8',\n            default_filters=['unicode', 'h']\n            )\n        # load each template\n        self.temp = {}\n        for t in ('index.tmpl', 'error.tmpl', 'login.tmpl', '404.tmpl',\n                  'searchadmin.tmpl', 'searchuser.tmpl', 'adduser.tmpl',\n                  'roles.tmpl', 'groups.tmpl', 'form.tmpl', 'selfmodify.tmpl',\n                  'modify.tmpl', 'service_unavailable.tmpl'\n                  ):\n            self.temp[t] = self.temp_lookup.get_template(t)\n\n    def reload(self, config=None, debug=False):\n        \"\"\" load/reload configuration\n        @dict: configuration of ldapcherry\n        \"\"\"\n        try:\n            # log configuration handling\n            # get log level\n            # (if not in configuration file, log level is set to debug)\n            level = get_loglevel(\n                self._get_param(\n                    'global',\n                    'log.level',\n                    config,\n                    'debug',\n                    )\n                )\n            # configure access log\n            self._set_access_log(config, level)\n            # configure error log\n            self._set_error_log(config, level, debug)\n\n            # load template files\n            self._load_templates(config)\n\n            # loading the auth configuration\n            self._init_auth(config)\n\n            # Loading the attributes\n            self.attributes_file = \\\n                self._get_param('attributes', 'attributes.file', config)\n            cherrypy.log.error(\n                msg=\"loading attributes file '%(file)s'\" %\n                    {'file': self.attributes_file},\n                severity=logging.DEBUG\n            )\n\n            self.notifications = {}\n\n            self.attributes = Attributes(self.attributes_file)\n\n            cherrypy.log.error(\n                msg=\"init directories backends\",\n                severity=logging.DEBUG\n            )\n            self._init_backends(config)\n            self._check_backends()\n\n            # loading the ppolicy\n            self._init_ppolicy(config)\n\n            # loading custom javascript\n            self._init_custom_js(config)\n\n            cherrypy.log.error(\n                msg=\"application started\",\n                severity=logging.INFO\n            )\n\n        except Exception as e:\n            self._handle_exception(e)\n            cherrypy.log.error(\n                msg=\"application failed to start\",\n                severity=logging.ERROR\n            )\n            exit(1)\n\n    def _add_notification(self, message):\n        \"\"\" add a notification in the notification queue of a user\n        \"\"\"\n        sess = cherrypy.session\n        username = sess.get(SESSION_KEY, None)\n        if username not in self.notifications:\n            self.notifications[username] = []\n        self.notifications[username].append(message)\n\n    def _empty_notification(self):\n        \"\"\" empty and return list of message notification\n        \"\"\"\n        sess = cherrypy.session\n        username = sess.get(SESSION_KEY, None)\n        if username in self.notifications:\n            ret = self.notifications[username]\n        else:\n            ret = []\n        self.notifications[username] = []\n        return ret\n\n    def _merge_user_attrs(self, attrs_backend, attrs_out, backend_name):\n        \"\"\" merge attributes from one backend search to the attributes dict\n        output\n\n        \"\"\"\n        for attr in attrs_backend:\n            if attr in self.attributes.backend_attributes[backend_name]:\n                attrid = self.attributes.backend_attributes[backend_name][attr]\n                if attrid not in attrs_out:\n                    attrs_out[attrid] = attrs_backend[attr]\n\n    def _search(self, searchstring):\n        \"\"\" search users\n        @str searchstring: search string\n        @rtype: dict, {<user>: {<attr>: <value>}}\n        \"\"\"\n        if searchstring is None:\n            return {}\n        ret = {}\n        for b in self.backends:\n            tmp = self.backends[b].search(searchstring)\n            for u in tmp:\n                if u not in ret:\n                    ret[u] = {}\n                self._merge_user_attrs(tmp[u], ret[u], b)\n        return ret\n\n    def _get_user(self, username):\n        \"\"\" get user attributes\n        @str username: user to get\n        @rtype: dict, {<attr>: <value>}\n        \"\"\"\n        if username is None:\n            return {}\n        ret = {}\n        for b in self.backends:\n            try:\n                tmp = self.backends[b].get_user(username)\n            except UserDoesntExist as e:\n                self._handle_exception(e)\n                tmp = {}\n            self._merge_user_attrs(tmp, ret, b)\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' attributes \" + str(ret),\n            severity=logging.DEBUG\n        )\n        return ret\n\n    def _parse_params(self, params):\n        \"\"\" get user attributes\n        @dict params: form parameters\n        @rtype: dict, {<type>: {<attr>: <value>}}\n        \"\"\"\n        ret = {'attrs': {}, 'roles': {}, 'groups': {}}\n        for p in params:\n            # each form attributes is prefixed with type, ex: attr.uidNumber\n            # separate this prefix from the attribute name\n            p_type, sep, param = p.partition('.')\n            if p_type == 'attr':\n                ret['attrs'][param] = params[p]\n            elif p_type == 'role':\n                ret['roles'][param] = params[p]\n            elif p_type == 'group':\n                # with groups there is a second prefix\n                # corresponding to the backend\n                backend, sep, value = param.partition('.')\n                if backend not in ret['groups']:\n                    ret['groups'][backend] = []\n                ret['groups'][backend].append(value)\n        return ret\n\n    def _check_admin(self):\n        \"\"\" check in the session database if current user\n        is an ldapcherry administrator\n        @rtype: boolean, True if administrator, False otherwise\n        \"\"\"\n        if self.auth_mode == 'none':\n            return True\n        return cherrypy.session['isadmin']\n\n    def _check_session(self):\n        if self.auth_mode == 'none':\n            return 'anonymous'\n        return cherrypy.session.get(SESSION_KEY)\n\n    def _check_auth(self, must_admin, redir_login=True):\n        \"\"\" check if a user is autheticated and, optionnaly an administrator\n        if user not authenticated -> redirect to login page (with escaped URL\n            of the originaly requested page (redirection after login)\n        if user authenticated, not admin and must_admin enabled -> 403 error\n        @boolean must_admin: flag \"user must be an administrator to access\n            this page\"\n        @rtype str: login of the user\n        \"\"\"\n        if self.auth_mode == 'none':\n            return 'anonymous'\n        username = self._check_session()\n\n        if cherrypy.request.query_string == '':\n            qs = ''\n        else:\n            qs = '?' + cherrypy.request.query_string\n        # Escaped version of the requested URL\n        quoted_requrl = urllib.quote_plus(cherrypy.url() + qs)\n        if not username:\n            # return to login page (with quoted url in query string)\n            if redir_login:\n                raise cherrypy.HTTPRedirect(\n                    \"/signin?url=%(url)s\" % {'url': quoted_requrl},\n                    )\n            else:\n                raise cherrypy.HTTPError(\n                    \"403 Forbidden\",\n                    \"You must be logged in to access this ressource.\",\n                    )\n\n        if 'connected' not in cherrypy.session \\\n                or not cherrypy.session['connected']:\n            if redir_login:\n                raise cherrypy.HTTPRedirect(\n                    \"/signin?url=%(url)s\" % {'url': quoted_requrl},\n                    )\n            else:\n                raise cherrypy.HTTPError(\n                    \"403 Forbidden\",\n                    \"You must be logged in to access this ressource.\",\n                    )\n\n        if cherrypy.session['connected'] and \\\n                not cherrypy.session['isadmin']:\n            if must_admin:\n                # user is not an administrator, so he gets 403 Forbidden\n                raise cherrypy.HTTPError(\n                    \"403 Forbidden\",\n                    \"You are not allowed to access this resource.\",\n                    )\n            else:\n                return username\n\n        if cherrypy.session['connected'] and \\\n                cherrypy.session['isadmin']:\n            return username\n        else:\n            if redir_login:\n                raise cherrypy.HTTPRedirect(\n                    \"/signin?url=%(url)s\" % {'url': quoted_requrl},\n                    )\n            else:\n                raise cherrypy.HTTPError(\n                    \"403 Forbidden\",\n                    \"You must be logged in to access this ressource.\",\n                    )\n\n    def _adduser(self, params):\n        cherrypy.log.error(\n            msg=\"add user form attributes: \" + str(params),\n            severity=logging.DEBUG\n        )\n        badd = {}\n\n        for attr in self.attributes.get_attributes():\n            if self.attributes.attributes[attr]['type'] == 'password':\n                pwd1 = attr + '1'\n                pwd2 = attr + '2'\n                if params['attrs'][pwd1] != params['attrs'][pwd2]:\n                    raise PasswordMissMatch()\n                if not self._checkppolicy(params['attrs'][pwd1])['match']:\n                    raise PPolicyError()\n                params['attrs'][attr] = params['attrs'][pwd1]\n            if attr in params['attrs']:\n                self.attributes.check_attr(attr, params['attrs'][attr])\n                backends = self.attributes.get_backends_attributes(attr)\n                for b in backends:\n                    if b not in badd:\n                        badd[b] = {}\n                    badd[b][backends[b]] = params['attrs'][attr]\n        added = False\n        for b in badd:\n            try:\n                self.backends[b].add_user(badd[b])\n                added = True\n            except UserAlreadyExists as e:\n                self._add_notification(\n                    'User already exists in backend \"' + b + '\"'\n                    )\n        if not added:\n            raise e\n\n        key = self.attributes.get_key()\n        username = params['attrs'][key]\n        sess = cherrypy.session\n        admin = sess.get(SESSION_KEY, 'unknown')\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' added by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' attributes: \" + str(badd),\n            severity=logging.DEBUG\n        )\n\n        roles = []\n        for r in self.roles.get_allroles():\n            if r in params['roles']:\n                roles.append(r)\n        groups = self.roles.get_groups(roles)\n        for b in groups:\n            self.backends[b].add_to_groups(username, Set(groups[b]))\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' made member of \" +\n                str(roles) + \" by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' groups: \" + str(groups),\n            severity=logging.DEBUG\n        )\n\n    def _modify_attrs(self, params, attr_list, username):\n        badd = {}\n        for attr in attr_list:\n            if self.attributes.attributes[attr]['type'] == 'password':\n                pwd1 = attr + '1'\n                pwd2 = attr + '2'\n                if pwd1 in params['attrs']:\n                    if params['attrs'][pwd1] != params['attrs'][pwd2]:\n                        raise PasswordMissMatch()\n                    if params['attrs'][pwd1] != '' and \\\n                            not self._checkppolicy(\n                                params['attrs'][pwd1]\n                                )['match']:\n                        raise PPolicyError()\n                    params['attrs'][attr] = params['attrs'][pwd1]\n            if attr in params['attrs'] and params['attrs'][attr] != '':\n                self.attributes.check_attr(attr, params['attrs'][attr])\n                backends = self.attributes.get_backends_attributes(attr)\n                for b in backends:\n                    if b not in badd:\n                        badd[b] = {}\n                    badd[b][backends[b]] = params['attrs'][attr]\n        for b in badd:\n            try:\n                self.backends[b].set_attrs(username, badd[b])\n            except UserDoesntExist as e:\n                self._add_notification(\n                    'User does not exist in backend \"' + b + '\"'\n                    )\n\n        return badd\n\n    def _selfmodify(self, params):\n        cherrypy.log.error(\n            msg=\"modify user form attributes: \" + str(params),\n            severity=logging.DEBUG\n        )\n        sess = cherrypy.session\n        username = sess.get(SESSION_KEY, None)\n        badd = self._modify_attrs(\n            params,\n            self.attributes.get_selfattributes(),\n            username,\n            )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' modified his attributes\",\n            severity=logging.INFO\n        )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' attributes: \" + str(badd),\n            severity=logging.DEBUG\n        )\n\n    def _modify(self, params):\n        cherrypy.log.error(\n            msg=\"modify user form attributes: \" + str(params),\n            severity=logging.DEBUG\n        )\n        key = self.attributes.get_key()\n        username = params['attrs'][key]\n\n        badd = self._modify_attrs(\n            params,\n            self.attributes.get_attributes(),\n            username\n            )\n\n        sess = cherrypy.session\n        admin = sess.get(SESSION_KEY, 'unknown')\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' modified by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' attributes: \" + str(badd),\n            severity=logging.DEBUG\n        )\n\n        tmp = self._get_roles(username)\n        roles_current = tmp['roles']\n        lonely_groups = tmp['unusedgroups']\n        roles_member = []\n        roles_not_member = []\n\n        groups_keep = {}\n        groups_remove = {}\n\n        for b in lonely_groups:\n            for g in lonely_groups[b]:\n                if b in params['groups'] and g in params['groups'][b]:\n                    if b not in groups_keep:\n                        groups_keep[b] = []\n                    groups_keep[b].append(g)\n\n                else:\n                    if b not in groups_remove:\n                        groups_remove[b] = []\n                    groups_remove[b].append(g)\n\n        for r in self.roles.get_allroles():\n            if r in params['roles']:\n                roles_member.append(r)\n            else:\n                roles_not_member.append(r)\n\n        groups_current = self.roles.get_groups(roles_current)\n        groups_rm = self.roles.get_groups(roles_not_member)\n        groups_add = self.roles.get_groups(roles_member)\n\n        for b in groups_add:\n            for g in [groups_add, groups_keep,\n                      groups_current, lonely_groups]:\n                if b not in g:\n                    g[b] = []\n            tmp = \\\n                Set(groups_add[b]) - \\\n                Set(groups_keep[b]) - \\\n                Set(groups_current[b]) - \\\n                Set(lonely_groups[b])\n            cherrypy.log.error(\n                msg=\"user '\" + username + \"' added to groups: \" +\n                    str(list(tmp)) + \" in backend '\" + b + \"'\",\n                severity=logging.DEBUG\n            )\n            self.backends[b].add_to_groups(username, tmp)\n        for b in groups_rm:\n            for g in [groups_remove, groups_rm, groups_add,\n                      groups_keep, groups_current, lonely_groups]:\n                if b not in g:\n                    g[b] = []\n            tmp = \\\n                (\n                    (Set(groups_rm[b]) | Set(groups_remove[b])) -\n                    (Set(groups_keep[b]) | Set(groups_add[b]))\n                ) & \\\n                (\n                    Set(groups_current[b]) | Set(lonely_groups[b])\n                )\n            cherrypy.log.error(\n                msg=\"user '\" + username + \"' removed from groups: \" +\n                    str(list(tmp)) + \" in backend '\" + b + \"'\",\n                severity=logging.DEBUG\n            )\n            self.backends[b].del_from_groups(username, tmp)\n\n        cherrypy.log.error(\n            msg=\"user '\" + username + \"' made member of \" +\n                str(roles_member) + \" by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n\n    def _deleteuser(self, username):\n        sess = cherrypy.session\n        admin = sess.get(SESSION_KEY, 'unknown')\n\n        for b in self.backends:\n            try:\n                self.backends[b].del_user(username)\n            except UserDoesntExist as e:\n                cherrypy.log.error(\n                    msg=\"User '\" + username +\n                        \"' didn't exist in backend '\" + b + \"'\",\n                    severity=logging.INFO\n                )\n            cherrypy.log.error(\n                msg=\"user '\" + username + \"' deleted from backend '\" + b + \"'\",\n                severity=logging.DEBUG\n            )\n\n        cherrypy.log.error(\n            msg=\"User '\" + username + \"' deleted by '\" + admin + \"'\",\n            severity=logging.INFO\n        )\n\n    def _checkppolicy(self, password):\n        return self.ppolicy.check(password)\n\n    @cherrypy.expose\n    @exception_decorator\n    def signin(self, url=None):\n        \"\"\"simple signin page\n        \"\"\"\n        return self.temp['login.tmpl'].render(url=url)\n\n    @cherrypy.expose\n    @exception_decorator\n    def login(self, login, password, url=None):\n        \"\"\"login page\n        \"\"\"\n        auth = self._auth(login, password)\n        cherrypy.session['isadmin'] = auth['isadmin']\n        cherrypy.session['connected'] = auth['connected']\n\n        if auth['connected']:\n            if auth['isadmin']:\n                message = \\\n                    \"login success for user '%(user)s' as administrator\" % {\n                        'user': login\n                    }\n            else:\n                message = \\\n                    \"login success for user '%(user)s' as normal user\" % {\n                        'user': login\n                    }\n            cherrypy.log.error(\n                msg=message,\n                severity=logging.INFO\n            )\n            cherrypy.session[SESSION_KEY] = cherrypy.request.login = login\n            if url is None:\n                redirect = \"/\"\n            else:\n                redirect = url\n            raise cherrypy.HTTPRedirect(redirect)\n        else:\n            message = \"login failed for user '%(user)s'\" % {\n                'user': login\n            }\n            cherrypy.log.error(\n                msg=message,\n                severity=logging.WARNING\n            )\n            if url is None:\n                qs = ''\n            else:\n                qs = '?url=' + urllib.quote_plus(url)\n            raise cherrypy.HTTPRedirect(\"/signin\" + qs)\n\n    @cherrypy.expose\n    @exception_decorator\n    def logout(self):\n        \"\"\" logout page\n        \"\"\"\n        sess = cherrypy.session\n        username = sess.get(SESSION_KEY, None)\n        sess[SESSION_KEY] = None\n        if username:\n            cherrypy.request.login = None\n\n        cherrypy.log.error(\n            msg=\"user '%(user)s' logout\" % {'user': username},\n            severity=logging.INFO\n        )\n        raise cherrypy.HTTPRedirect(\"/signin\")\n\n    @cherrypy.expose\n    @exception_decorator\n    def index(self):\n        \"\"\"main page rendering\n        \"\"\"\n        self._check_auth(must_admin=False)\n        is_admin = self._check_admin()\n        sess = cherrypy.session\n        user = sess.get(SESSION_KEY, None)\n        if self.auth_mode == 'none':\n            user_attrs = None\n        else:\n            user_attrs = self._get_user(user)\n        attrs_list = self.attributes.get_search_attributes()\n        return self.temp['index.tmpl'].render(\n            is_admin=is_admin,\n            attrs_list=attrs_list,\n            searchresult=self._escape(user_attrs, 'attr_list'),\n            notifications=self._empty_notification(),\n            )\n\n    @cherrypy.expose\n    @exception_decorator\n    def searchuser(self, searchstring=None):\n        \"\"\" search user page \"\"\"\n        self._check_auth(must_admin=False)\n        is_admin = self._check_admin()\n        if searchstring is not None and len(searchstring) > 2:\n            res = self._search(searchstring)\n        else:\n            res = None\n        attrs_list = self.attributes.get_search_attributes()\n        return self.temp['searchuser.tmpl'].render(\n            searchresult=self._escape(res, 'search_list'),\n            attrs_list=attrs_list,\n            is_admin=is_admin,\n            custom_js=self.custom_js,\n            notifications=self._empty_notification(),\n            )\n\n    @cherrypy.expose\n    @exception_decorator\n    def checkppolicy(self, **params):\n        \"\"\" search user page \"\"\"\n        self._check_auth(must_admin=False, redir_login=False)\n        keys = params.keys()\n        if len(keys) != 1:\n            cherrypy.response.status = 400\n            return \"bad argument\"\n        password = params[keys[0]]\n        is_admin = self._check_admin()\n        ret = self._checkppolicy(password)\n        if ret['match']:\n            cherrypy.response.status = 200\n        else:\n            cherrypy.response.status = 200\n        return json.dumps(ret, separators=(',', ':'))\n\n    @cherrypy.expose\n    @exception_decorator\n    def searchadmin(self, searchstring=None):\n        \"\"\" search user page \"\"\"\n        self._check_auth(must_admin=True)\n        is_admin = self._check_admin()\n        if searchstring is not None:\n            res = self._search(searchstring)\n        else:\n            res = None\n        attrs_list = self.attributes.get_search_attributes()\n        return self.temp['searchadmin.tmpl'].render(\n            searchresult=self._escape(res, 'search_list'),\n            attrs_list=attrs_list,\n            is_admin=is_admin,\n            custom_js=self.custom_js,\n            notifications=self._empty_notification(),\n            )\n\n    @cherrypy.expose\n    @exception_decorator\n    def adduser(self, **params):\n        \"\"\" add user page \"\"\"\n        self._check_auth(must_admin=True)\n        is_admin = self._check_admin()\n\n        if cherrypy.request.method.upper() == 'POST':\n            params = self._parse_params(params)\n            self._adduser(params)\n            self._add_notification(\"User added\")\n\n        graph = {}\n        for r in self.roles.graph:\n            s = list(self.roles.graph[r]['sub_roles'])\n            p = list(self.roles.graph[r]['parent_roles'])\n            graph[r] = {'sub_roles': s, 'parent_roles': p}\n        graph_js = json.dumps(graph, separators=(',', ':'))\n        display_names = {}\n        for r in self.roles.flatten:\n            display_names[r] = self.roles.flatten[r]['display_name']\n        roles_js = json.dumps(display_names, separators=(',', ':'))\n        try:\n            form = self.temp['form.tmpl'].render(\n                attributes=self.attributes.attributes,\n                values=None,\n                modify=False,\n                autofill=True\n                )\n            roles = self.temp['roles.tmpl'].render(\n                roles=self.roles.flatten,\n                graph=self.roles.graph,\n                graph_js=graph_js,\n                roles_js=roles_js,\n                current_roles=None,\n                )\n            return self.temp['adduser.tmpl'].render(\n                form=form,\n                roles=roles,\n                is_admin=is_admin,\n                custom_js=self.custom_js,\n                notifications=self._empty_notification(),\n                )\n        except NameError:\n            raise TemplateRenderError(\n                    exceptions.text_error_template().render()\n                    )\n\n    @cherrypy.expose\n    @exception_decorator\n    def delete(self, user):\n        \"\"\" remove user page \"\"\"\n        self._check_auth(must_admin=True)\n        is_admin = self._check_admin()\n        try:\n            referer = cherrypy.request.headers['Referer']\n        except:\n            referer = '/'\n        self._deleteuser(user)\n        self._add_notification('User Deleted')\n        raise cherrypy.HTTPRedirect(referer)\n\n    @cherrypy.expose\n    @exception_decorator\n    def modify(self, user=None, **params):\n        \"\"\" modify user page \"\"\"\n        self._check_auth(must_admin=True)\n        is_admin = self._check_admin()\n\n        if cherrypy.request.method.upper() == 'POST':\n            params = self._parse_params(params)\n            self._modify(params)\n            self._add_notification(\"User modified\")\n            try:\n                referer = cherrypy.request.headers['Referer']\n            except:\n                referer = '/'\n            raise cherrypy.HTTPRedirect(referer)\n\n        graph = {}\n        for r in self.roles.graph:\n            s = list(self.roles.graph[r]['sub_roles'])\n            p = list(self.roles.graph[r]['parent_roles'])\n            graph[r] = {'sub_roles': s, 'parent_roles': p}\n        graph_js = json.dumps(graph, separators=(',', ':'))\n        display_names = {}\n        for r in self.roles.flatten:\n            display_names[r] = self.roles.flatten[r]['display_name']\n\n        if user is None:\n            cherrypy.response.status = 400\n            return self.temp['error.tmpl'].render(\n                is_admin=is_admin,\n                alert='warning',\n                message=\"No user requested\"\n                )\n\n        user_attrs = self._get_user(user)\n        if user_attrs == {}:\n            cherrypy.response.status = 400\n            return self.temp['error.tmpl'].render(\n                is_admin=is_admin,\n                alert='warning',\n                message=\"User '\" + user + \"' does not exist\"\n                )\n        tmp = self._get_roles(user)\n        user_roles = tmp['roles']\n        standalone_groups = tmp['unusedgroups']\n        roles_js = json.dumps(display_names, separators=(',', ':'))\n        key = self.attributes.get_key()\n\n        try:\n            form = self.temp['form.tmpl'].render(\n                attributes=self.attributes.attributes,\n                values=self._escape(user_attrs, 'attr_list'),\n                modify=True,\n                keyattr=key,\n                autofill=False\n                )\n\n            roles = self.temp['roles.tmpl'].render(\n                roles=self.roles.flatten,\n                graph=self.roles.graph,\n                graph_js=graph_js,\n                roles_js=roles_js,\n                current_roles=user_roles,\n            )\n\n            glued_template = self.temp['modify.tmpl'].render(\n                form=form,\n                roles=roles,\n                is_admin=is_admin,\n                standalone_groups=self._escape(\n                    standalone_groups,\n                    'lonely_groups'\n                    ),\n                backends_display_names=self.backends_display_names,\n                custom_js=self.custom_js,\n                notifications=self._empty_notification(),\n            )\n        except NameError:\n            raise TemplateRenderError(\n                    exceptions.text_error_template().render()\n                    )\n\n        return glued_template\n\n    @cherrypy.expose\n    @exception_decorator\n    def default(self, attr='', **params):\n        cherrypy.response.status = 404\n        self._check_auth(must_admin=False)\n        is_admin = self._check_admin()\n        return self.temp['404.tmpl'].render(\n            is_admin=is_admin,\n            notifications=self._empty_notification(),\n            )\n\n    @cherrypy.expose\n    @exception_decorator\n    def selfmodify(self, **params):\n        \"\"\" self modify user page \"\"\"\n        self._check_auth(must_admin=False)\n        is_admin = self._check_admin()\n        sess = cherrypy.session\n        user = sess.get(SESSION_KEY, None)\n        if self.auth_mode == 'none':\n            return self.temp['error.tmpl'].render(\n                is_admin=is_admin,\n                alert='warning',\n                message=\"Not accessible with authentication disabled.\"\n                )\n        if cherrypy.request.method.upper() == 'POST':\n            params = self._parse_params(params)\n            self._selfmodify(params)\n            self._add_notification(\n                \"Self modification done\"\n            )\n        user_attrs = self._get_user(user)\n\n        try:\n            if user_attrs == {}:\n                return self.temp['error.tmpl'].render(\n                    is_admin=is_admin,\n                    alert='warning',\n                    message=\"User doesn't exist\"\n                    )\n\n            form = self.temp['form.tmpl'].render(\n                attributes=self.attributes.get_selfattributes(),\n                values=self._escape(user_attrs, 'attr_list'),\n                modify=True,\n                autofill=False\n                )\n            return self.temp['selfmodify.tmpl'].render(\n                form=form,\n                is_admin=is_admin,\n                notifications=self._empty_notification(),\n                )\n        except NameError:\n            raise TemplateRenderError(\n                    exceptions.text_error_template().render()\n                    )\n", "## -*- coding: utf-8 -*-\n<%inherit file=\"navbar.tmpl\"/>\n    <%block name=\"core\">\n    <div class=\"row clearfix top-buffer bottom-buffer\">\n        <div class=\"col-md-2 column\">\n        </div>\n        <div class=\"col-md-12 column\">\n            <div class=\"well well-sm\">\n              <form method='POST' autocomplete=\"off\" action='/adduser' role=\"form\" class=\"form-signin\" id=form>\n              <fieldset>\n              <legend>Fill new user's attributes:</legend>\n              ${form | n}\n              </fieldset>\n              <fieldset>\n              <legend>Enable/Disable user's roles:</legend>\n              ${roles | n}\n              </fieldset>\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                  <button class=\"btn btn-default green\" type=\"submit\">\n                  <span class=\"glyphicon glyphicon-plus-sign\"></span> Add User</button>\n                </div>\n              </div>\n              </form>\n              <script type=\"text/javascript\" src=\"/static/js/ppolicy.js\"></script>\n            </div>\n        </div>\n        <div class=\"col-md-2 column\">\n        </div>\n    </div>\n</%block>\n", "## -*- coding: utf-8 -*-\n<%inherit file=\"base.tmpl\"/>\n<%block name=\"core\">\n    <div class=\"row clearfix\" style=\"margin-top:30px\">\n        <div class=\"col-md-4 column\"></div>\n        <div class=\"col-md-4 column well\">\n            <form method='POST' role=\"form\" class=\"form-signin\"\n% if url:\n                action='login?url=${url | u}'\n% else:\n                action='login'\n% endif\n            >\n              <div class=\"form-group\">\n              <h2 class=\"form-signin-heading\">Please sign in</h2>\n                <div class=\"input-group\">\n                    <span class=\"input-group-addon glyphicon glyphicon-user\"></span>\n                    <input type=\"text\" class=\"form-control\" name=\"login\" placeholder=\"Login\" required autofocus>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                    <span class=\"input-group-addon glyphicon glyphicon-lock\"></span>\n                    <input type=\"password\" class=\"form-control\" name=\"password\" placeholder=\"Password\" required>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                  <button class=\"btn btn-default blue\" type=\"submit\"><span class=\"glyphicon glyphicon-off\"></span> Sign in</button>\n                </div>\n              </div>\n            </form>\n        </div>\n        <div class=\"col-md-4 column\"></div>\n    </div>\n</%block>\n", "## -*- coding: utf-8 -*-\n<%inherit file=\"navbar.tmpl\"/>\n    <%block name=\"core\">\n    <div class=\"row clearfix top-buffer bottom-buffer\">\n        <div class=\"col-md-2 column\">\n        </div>\n        <div class=\"col-md-12 column\">\n            <div class=\"well well-sm\">\n              <form method='POST' action='/modify' role=\"form\" class=\"form-signin\" id=\"form\">\n              <fieldset>\n              <legend>Modify user's attributes:</legend>\n              ${form | n}\n              </fieldset>\n              <fieldset>\n              <legend>Enable/Disable user's roles:</legend>\n              ${roles | n}\n              </fieldset>\n              % if len(standalone_groups) != 0:\n              <fieldset>\n              <legend>Delete user's individual groups:</legend>\n              <table id=\"RecordTable\" class=\"table table-hover table-condensed tablesorter\">\n              <thead>\n              <tr>\n                  <th class=\"sorter-false\">\n                      Backend\n                  </th>\n                  <th class=\"sorter-false\">\n                      Group \n                  </th>\n                  <th class=\"sorter-false\">\n                      Enable/Disable\n                  </th>\n              </tr>\n              </thead>\n              <tbody>\n              % for backend in standalone_groups:\n                  % for group in standalone_groups[backend]:\n                  <tr>\n                    <td>\n                    ${backends_display_names[backend]}\n                    </td>\n                    <td>\n                    ${group}\n                    </td>\n                    <td>\n                    <input data-on-color=\"success\" data-off-color=\"danger\" data-on-text=\"Enabled\" \n                           data-off-text=\"Disabled\" data-handle-width=\"75\" type=\"checkbox\" \n                           name=\"group.${backend}.${group}\" data-size=\"mini\" id=\"group.${backend}.${group}\" checked>\n                    <script>$(\"[name='group.${backend}.${group}']\").bootstrapSwitch();</script>\n                    </td>\n                  </tr>\n                  % endfor\n              % endfor\n              </tbody>\n              </table>\n              </fieldset>\n              % endif\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                  <button class=\"btn btn-default blue\" type=\"submit\">\n                  <span class=\"glyphicon glyphicon-cog\"></span> Modify User</button>\n                </div>\n              </div>\n              </form>\n              <script type=\"text/javascript\" src=\"/static/js/ppolicy.js\"></script>\n            </div>\n        </div>\n        <div class=\"col-md-2 column\">\n        </div>\n    </div>\n</%block>\n", "## -*- coding: utf-8 -*-\n<%inherit file=\"navbar.tmpl\"/>\n<%block name=\"core\">\n    <div class=\"row clearfix top-buffer bottom-buffer\">\n        <div class=\"col-md-2 column\">\n        </div>\n        <div class=\"col-md-12 column\">\n            <div class=\"well well-sm\">\n              <form method='POST' action='/selfmodify' autocomplete=\"off\" role=\"form\" class=\"form-signin\" id=\"form\">\n              <legend>Modify your attributes:</legend>\n              ${form | n}\n              </fieldset>\n              <div class=\"form-group\">\n                <div class=\"input-group\">\n                    <button type=\"submit\" class=\"btn btn-default blue\">\n                    <span class=\"glyphicon glyphicon-cog\"></span> Modify</button>\n                </div>\n              </div>\n              </form>\n              <script type=\"text/javascript\" src=\"/static/js/ppolicy.js\"></script>\n            </div>\n        </div>\n        <div class=\"col-md-2 column\">\n        </div>\n    </div>\n</%block>\n"], "filenames": ["ldapcherry/__init__.py", "resources/templates/adduser.tmpl", "resources/templates/login.tmpl", "resources/templates/modify.tmpl", "resources/templates/selfmodify.tmpl"], "buggy_code_start_loc": [18, 12, 7, 12, 11], "buggy_code_end_loc": [936, 17, 14, 17, 12], "fixing_code_start_loc": [18, 12, 7, 12, 11], "fixing_code_end_loc": [937, 17, 14, 17, 12], "type": "CWE-79", "message": "A vulnerability, which was classified as problematic, was found in kakwa LdapCherry up to 0.x. Affected is an unknown function of the component URL Handler. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 1.0.0 is able to address this issue. The name of the patch is 6f98076281e9452fdb1adcd1bcbb70a6f968ade9. It is recommended to upgrade the affected component. VDB-217434 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2019-25095", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-05T08:15:08.273", "lastModified": "2023-01-11T17:44:57.200", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, was found in kakwa LdapCherry up to 0.x. Affected is an unknown function of the component URL Handler. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 1.0.0 is able to address this issue. The name of the patch is 6f98076281e9452fdb1adcd1bcbb70a6f968ade9. It is recommended to upgrade the affected component. VDB-217434 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ldapcherry_project:ldapcherry:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.0", "matchCriteriaId": "3C1E988C-2520-4E89-AC58-28DB2E01538F"}]}]}], "references": [{"url": "https://github.com/kakwa/ldapcherry/commit/6f98076281e9452fdb1adcd1bcbb70a6f968ade9", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/kakwa/ldapcherry/pull/16", "source": "cna@vuldb.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/kakwa/ldapcherry/releases/tag/1.0.0", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217434", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217434", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kakwa/ldapcherry/commit/6f98076281e9452fdb1adcd1bcbb70a6f968ade9"}}