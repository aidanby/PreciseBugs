{"buggy_code": ["<?php\n// +----------------------------------------------------------------------+\n// | Anuko Time Tracker\n// +----------------------------------------------------------------------+\n// | Copyright (c) Anuko International Ltd. (https://www.anuko.com)\n// +----------------------------------------------------------------------+\n// | LIBERAL FREEWARE LICENSE: This source code document may be used\n// | by anyone for any purpose, and freely redistributed alone or in\n// | combination with other software, provided that the license is obeyed.\n// |\n// | There are only two ways to violate the license:\n// |\n// | 1. To redistribute this code in source form, with the copyright\n// |    notice or license removed or altered. (Distributing in compiled\n// |    forms without embedded copyright notices is permitted).\n// |\n// | 2. To redistribute modified versions of this code in *any* form\n// |    that bears insufficient indications that the modifications are\n// |    not the work of the original author(s).\n// |\n// | This license applies to this document only, not any other software\n// | that it may be combined with.\n// |\n// +----------------------------------------------------------------------+\n// | Contributors:\n// | https://www.anuko.com/time_tracker/credits.htm\n// +----------------------------------------------------------------------+\n\n// import() function loads a class.\nfunction import($class_name) {\n  $libs = array(\n    dirname($_SERVER[\"SCRIPT_FILENAME\"]),\n    LIBRARY_DIR\n  );\n\n\t    $pos = strpos($class_name, \".\");\n        if (!($pos === false)) {\n            $peaces = explode(\".\", $class_name);\n            $p = \"\";\n            for ($i=0; $i<count($peaces)-1; $i++) {\n                $p = $p . \"/\" . $peaces[$i];\n            }\n\t\t\t$libs = array_merge(array(LIBRARY_DIR . $p),$libs);\n            $class_name = $peaces[count($peaces)-1];\n        }\n\n\t\t$filename = $class_name . '.class.php';\n\n\t\tforeach($libs as $lib) {\n\t\t\t$inc_filename = $lib . '/' . $filename;\n\t\t\tif (file_exists($inc_filename)) {\n\t\t\t\t\trequire_once($inc_filename);\n\t\t\t\t\treturn $class_name;\n\t\t\t}\n\t\t}\n\n\t\tprint '<br><b>load_class: error loading file \"'.$filename.'\"</b>';\n\t\tdie();\n}\n\n\t// The mu_sort function is used to sort a multi-dimensional array.\n\t// It looks like the code example is taken from the PHP manual http://ca2.php.net/manual/en/function.sort.php\n\tfunction mu_sort($array, $key_sort) {\n\t\t$n = 0;\n\t\tif (!is_array($array) || count($array)==0)\n\t\t\treturn array();\n\n\t\t$key_sorta = explode(\",\", $key_sort);\n\t\t$keys = array_keys($array[0]);\n\n\t\tfor($m=0; $m < count($key_sorta); $m++) {\n\t\t\t$nkeys[$m] = trim($key_sorta[$m]);\n\t\t}\n\t\t$n += count($key_sorta);\n\n\t\tfor($i=0; $i < count($keys); $i++) {\n\t\t\tif(!in_array($keys[$i], $key_sorta)) {\n\t\t\t\t$nkeys[$n] = $keys[$i];\n\t\t\t\t$n += \"1\";\n\t\t\t}\n\t\t}\n\n\t\tfor($u=0;$u<count($array); $u++) {\n\t\t\t$arr = $array[$u];\n\t\t\tfor($s=0; $s<count($nkeys); $s++) {\n\t\t\t\t$k = $nkeys[$s];\n\t\t\t\t$output[$u][$k] = $array[$u][$k];\n\t\t\t}\n\t\t}\n\t\tsort($output);\n\t\treturn $output;\n\t}\n\n\t/**\n\t * return float type\n\t *\n\t * @param unknown $value\n\t * @return unknown\n\t */\n\tfunction toFloat($value) {\n\t\tif (isset($value) && (strlen($value) > 0)) {\n\t\t\t$value = str_replace(\",\",\".\",$value);\n\t\t\treturn floatval($value);\n\t\t}\n\t\treturn null;\n\t}\n\n\tfunction stripslashes_deep($value) {\n\t    $value = is_array($value) ?\n                array_map('stripslashes_deep', $value) :\n                stripslashes($value);\n    \treturn $value;\n\t}\n\n\tfunction &getConnection() {\n        if (!isset($GLOBALS[\"_MDB2_CONNECTION\"])) {\n\n        \trequire_once('MDB2.php');\n\n        \t$mdb2 = MDB2::connect(DSN);\n\t\t\tif (is_a($mdb2, 'PEAR_Error')) {\n    \t\t\tdie($mdb2->getMessage());\n\t\t\t}\n\n\t\t\t$mdb2->setFetchMode(MDB2_FETCHMODE_ASSOC);\n\t\t\t\n   \t\t\t$GLOBALS[\"_MDB2_CONNECTION\"] = $mdb2;\n    \t}\n      \treturn $GLOBALS[\"_MDB2_CONNECTION\"];\n\t}\n\n\n// time_to_decimal converts a time string such as 1:15 to its decimal representation such as 1.25 or 1,25.\nfunction time_to_decimal($val) {\n  global $user;\n  $parts = explode(':', $val); // parts[0] is hours, parts[1] is minutes.\n\n  $minutePercent = round($parts[1]*100/60); // Integer value (0-98) of percent of minutes portion in the hour.\n  if($minutePercent < 10) $minutePercent = '0'.$minutePercent; // Pad small values with a 0 to always have 2 digits.\n\n  $decimalTime = $parts[0].$user->decimal_mark.$minutePercent; // Construct decimal representation of time value.\n\n  return $decimalTime;\n}\n\nfunction magic_quotes_off()\n{\n  $_POST = array_map('stripslashes_deep', $_POST);\n  $_GET = array_map('stripslashes_deep', $_GET);\n  $_COOKIE = array_map('stripslashes_deep', $_COOKIE);\n}\n\n// check_extension checks whether a required PHP extension is loaded and dies if not so.\nfunction check_extension($ext)\n{\n  if (!extension_loaded($ext))\n    die(\"PHP extension '{$ext}' is required but is not loaded. Read Time Tracker Install Guide for help.\");\n}\n\n// isTrue is a helper function to return correct false for older config.php values defined as a string 'false'.\nfunction isTrue($val)\n{\n  return (defined($val) && constant($val) === true);\n}\n\n// ttValidString is used to check user input to validate a string.\nfunction ttValidString($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0 && !$emptyValid)\n    return false;\n    \n  // String must not be XSS evil (to insert JavaScript).\n  if (stristr($val, '<script>') || stristr($val, '<script '))\n    return false;\n    \n  return true;    \n}\n\n// ttValidCss is used to check user input for custom css.\nfunction ttValidCss($val)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return true;\n\n  // String must not contain any tags.\n  if (stristr($val, '<'))\n    return false;\n\n  // Security note: the above may not be enough.\n  // Currently it is unclear how vulnerable we are assuming custom css is available only to a logged on user\n  // (one custom css per group).\n  // However, if abuse occurs or when the issue is better understood, we may have to rewrite this function,\n  // perhaps by specifying what exactly we allow to style.\n  return true;\n}\n\n// ttValidTemplateText is used to check template-based user input.\n// When templates are used, required input parts must be filled by user.\n// We identify these parts by 3 \"stop sign\" emojis (aka \"octagonal sign\" U+1F6D1).\nfunction ttValidTemplateText($val)\n{\n  $valid = strpos($val, '\ud83d\uded1\ud83d\uded1\ud83d\uded1') === false; // no 3 \"stop sign\" emojis in a row.\n  return $valid;\n}\n\n// ttValidEmail is used to check user input to validate an email string.\nfunction ttValidEmail($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n  \t\n  // String must not be XSS evil (to insert JavaScript).\n  if (stristr($val, '<script>') || stristr($val, '<script '))\n    return false;\n    \n  // Validate a single email address. TODO: improve for compliancy with RFC.\n  if (!preg_match(\"/^[_a-zA-Z\\d\\'-\\.]+@([_a-zA-Z\\d\\-]+(\\.[_a-zA-Z\\d\\-]+)+)$/\", $val))\n    return false;\n  \n  return true;    \n}\n\n// ttValidEmailList is used to check user input to validate an email string.\nfunction ttValidEmailList($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n  \t\n  // String must not be XSS evil (to insert JavaScript).\n  if (stristr($val, '<script>') || stristr($val, '<script '))\n    return false;\n    \n  // Validates a list of email addresses separated by a comma with optional spaces.\n  if (!preg_match(\"/^[_a-zA-Z\\d\\'-\\.]+@([_a-zA-Z\\d\\-]+(\\.[_a-zA-Z\\d\\-]+)+)(,\\s*[_a-zA-Z\\d\\'-\\.]+@([_a-zA-Z\\d\\-]+(\\.[_a-zA-Z\\d\\-]+)+))*$/\", $val))\n    return false;\n    \n  return true;\n}\n\n// ttValidFloat is used to check user input to validate a float value.\nfunction ttValidFloat($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n    \n  global $user;\n  $decimal = $user->getDecimalMark();\n\t\n  if (!preg_match('/^-?[0-9'.$decimal.']+$/', $val))\n    return false;\n    \n  return true;    \n}\n\n// ttValidDate is used to check user input to validate a date.\nfunction ttValidDate($val)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return false;\n\n  // This should accept a string in format 'YYYY-MM-DD', 'MM/DD/YYYY', 'DD-MM-YYYY', 'DD.MM.YYYY', or 'DD.MM.YYYY whatever'.\n  if (!preg_match('/^\\d\\d\\d\\d-\\d\\d-\\d\\d$/', $val) &&\n    !preg_match('/^\\d\\d\\/\\d\\d\\/\\d\\d\\d\\d$/', $val) &&\n    !preg_match('/^\\d\\d\\-\\d\\d\\-\\d\\d\\d\\d$/', $val) &&\n    !preg_match('/^\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d$/', $val) &&\n    !preg_match('/^\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d .+$/', $val))\n    return false;\n    \n  return true;    \n}\n\n// ttValidInteger is used to check user input to validate an integer.\nfunction ttValidInteger($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n    \n  if (!preg_match('/^[0-9]+$/', $val))\n    return false;\n\n  return true;\n}\n\n// ttValidCronSpec is used to check user input to validate cron specification.\nfunction ttValidCronSpec($val)\n{\n  // This code is adapted from http://stackoverflow.com/questions/235504/validating-crontab-entries-w-php\n  $numbers= array(\n     'min'=>'[0-5]?\\d',\n     'hour'=>'[01]?\\d|2[0-3]',\n     'day'=>'0?[1-9]|[12]\\d|3[01]',\n     'month'=>'[1-9]|1[012]',\n     'dow'=>'[0-7]'\n  );\n\n  foreach($numbers as $field=>$number) {\n    $range= \"($number)(-($number)(\\/\\d+)?)?\";\n    $field_re[$field]= \"\\*(\\/\\d+)?|$range(,$range)*\";\n  }\n\n  $field_re['month'].='|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec';\n  $field_re['dow'].='|mon|tue|wed|thu|fri|sat|sun';\n\n  $fields_re= '('.join(')\\s+(', $field_re).')';\n\n  /*\n  $replacements= '@reboot|@yearly|@annually|@monthly|@weekly|@daily|@midnight|@hourly';\n\n  $regexp = '^\\s*('.\n                '$'.\n                '|#'.\n                '|\\w+\\s*='.\n                \"|$fields_re\\s+\\S\".\n                \"|($replacements)\\s+\\S\".\n            ')';\n   */\n  // The above block from the link did not work for me.\n\n  // But this works.\n  $regexp = '/^'.$fields_re.'$/';\n\t\n  if (!preg_match($regexp, $val))\n    return false;\n\n  return true;\n}\n\n// ttValidCondition is used to check user input to validate a notification condition.\nfunction ttValidCondition($val, $emptyValid = true)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n\n  // String must not be XSS evil (to insert JavaScript).\n  if (stristr($val, '<script>') || stristr($val, '<script '))\n    return false;\n\n  if (!preg_match(\"/^count\\s?(=|[<>]=?|<>)\\s?\\d+$/\", $val) &&\n      !preg_match(\"/^hours\\s?(=|[<>]=?|<>)\\s?\\d+$/\", $val))\n    return false;\n\n  return true;\n}\n\n// ttValidIP is used to check user input to validate a comma-separated\n// list of IP subnet \"prefixes\", for example 192.168.0 (note: no .* in the end).\n// We keep regexp checks here simple - they are not precise.\n// For example, IPv4-mapped IPv6 addresses will fail. This may need to be fixed.\nfunction ttValidIP($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0 && $emptyValid)\n    return true;\n\n  $subnets = explode(',', $val);\n  foreach ($subnets as $subnet) {\n    $ipv4 = preg_match('/^\\d\\d?\\d?(\\.\\d\\d?\\d?){0,3}\\.?$/', $subnet); // Not precise check.\n    $ipv6 = preg_match('/^([0-9a-fA-F]{4})(:[0-9a-fA-F]{4}){0,7}$/', $subnet); // Not precise check.\n    if (!$ipv4 && !$ipv6)\n      return false;\n  }\n  return true;\n}\n\n// ttValidHolidays is used to check user input to validate holidays spec.\n// To keep things simple, the format is a comma-separated list of dates:\n// ****-01-01,****-12-31,2019-04-20\n// The above means Jan 1 and Dec 31 are holidays in all years, while Apr 20 is only in 2019.\nfunction ttValidHolidays($val)\n{\n  $val = trim($val);\n  if (strlen($val) == 0) return true;\n\n  $dates = explode(',', $val);\n  foreach ($dates as $date) {\n    if (!preg_match('/^[\\d*]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$/', $date))\n      return false;\n  }\n  return true;\n}\n\n// ttAccessAllowed checks whether user is allowed access to a particular page.\n// It is used as an initial check on all publicly available pages\n// (except login.php, register.php, and others where we don't have to check).\nfunction ttAccessAllowed($required_right)\n{\n  global $auth;\n  global $user;\n\n  // Redirect to login page if user is not authenticated.\n  if (!$auth->isAuthenticated()) {\n    header('Location: login.php');\n    exit();\n  }\n\n  // Check IP restriction, if set.\n  if ($user->allow_ip && !$user->can('override_allow_ip')) {\n    $access_allowed = false;\n    $user_ip = $_SERVER['REMOTE_ADDR'];\n    $allowed_ip_array = explode(',', $user->allow_ip);\n    foreach ($allowed_ip_array as $allowed_ip) {\n      $len = strlen($allowed_ip);\n      if (substr($user_ip, 0, $len) === $allowed_ip) { // startsWith check.\n         $access_allowed = true;\n         break;\n      }\n    }\n    if (!$access_allowed) return false;\n  }\n\n  // Check if user has the right.\n  if (in_array($required_right, $user->rights)) {\n    import('ttUserHelper');\n    ttUserHelper::updateLastAccess();\n    return true;\n  }\n\n  return false;\n}\n\n// ttStartsWith functions checks if a string starts with a given substring.\nfunction ttStartsWith($string, $startString)\n{\n    $len = strlen($startString);\n    return (substr($string, 0, $len) === $startString);\n}\n\n// ttEndsWith functions checks if a string ends with a given substring.\nfunction ttEndsWith($string, $endString)\n{\n    $len = strlen($endString);\n    if ($len == 0) return true;\n    return (substr($string, -$len) === $endString);\n}\n\n// ttDateToUserFormat converts a date from database format to user format.\nfunction ttDateToUserFormat($date)\n{\n  global $user;\n  $o_date = new DateAndTime(DB_DATEFORMAT, $date);\n  return $o_date->toString($user->date_format);\n}\n\n// ttRandomString generates a random alphanumeric string.\nfunction ttRandomString($length = 32) {\n  $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  $charactersLength = strlen($characters);\n  $randomString = '';\n  for ($i = 0; $i < $length; $i++) {\n    $randomString .= $characters[rand(0, $charactersLength - 1)];\n  }\n  return $randomString;\n}\n", "<?php\n// +----------------------------------------------------------------------+\n// | Anuko Time Tracker\n// +----------------------------------------------------------------------+\n// | Copyright (c) Anuko International Ltd. (https://www.anuko.com)\n// +----------------------------------------------------------------------+\n// | LIBERAL FREEWARE LICENSE: This source code document may be used\n// | by anyone for any purpose, and freely redistributed alone or in\n// | combination with other software, provided that the license is obeyed.\n// |\n// | There are only two ways to violate the license:\n// |\n// | 1. To redistribute this code in source form, with the copyright\n// |    notice or license removed or altered. (Distributing in compiled\n// |    forms without embedded copyright notices is permitted).\n// |\n// | 2. To redistribute modified versions of this code in *any* form\n// |    that bears insufficient indications that the modifications are\n// |    not the work of the original author(s).\n// |\n// | This license applies to this document only, not any other software\n// | that it may be combined with.\n// |\n// +----------------------------------------------------------------------+\n// | Contributors:\n// | https://www.anuko.com/time_tracker/credits.htm\n// +----------------------------------------------------------------------+\n\n// Report all errors except E_NOTICE and E_STRICT.\n// Ignoring E_STRICT is here because PEAR 1.9.4 that we use is not E_STRICT compliant.\nif (!defined('E_STRICT')) define('E_STRICT', 2048);\n// if (!defined('E_DEPRECATED')) define('E_DEPRECATED', 8192);\nerror_reporting(E_ALL & ~E_NOTICE & ~E_STRICT); // & ~E_DEPRECATED);\n// E_ALL tends to change as PHP evloves, therefore we use & here instead of exclusive OR (^).\n\n// Disable displaying errors on screen.\nini_set('display_errors', 'Off');\n\n// require_once('init_auth.php');\ndefine(\"APP_VERSION\", \"1.19.23.5324\");\ndefine(\"APP_DIR\", dirname(__FILE__));\ndefine(\"LIBRARY_DIR\", APP_DIR.\"/WEB-INF/lib\");\ndefine(\"TEMPLATE_DIR\", APP_DIR.\"/WEB-INF/templates\");\n// Date format for database and URI parameters.\ndefine('DB_DATEFORMAT', '%Y-%m-%d');\ndefine('MAX_RANK', 512); // Max user rank.\n\nrequire_once(LIBRARY_DIR.'/common.lib.php');\n\n// Require the configuration file with application settings.\nif (!file_exists(APP_DIR.\"/WEB-INF/config.php\")) die (\"WEB-INF/config.php file does not exist.\");\nrequire_once(\"WEB-INF/config.php\");\n// Check whether DSN is defined.\nif (!defined(\"DSN\")) {\n  die (\"DSN value is not defined. Check your config.php file.\");\n}\n\n// Depending on DSN, require either mysqli or mysql extensions.\nif (strrpos(DSN, 'mysqli://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysqli'); // DSN starts with mysqli:// - require mysqli extension.\n}\nif (strrpos(DSN, 'mysql://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysql');  // DSN starts with mysql:// - require mysql extension.\n}\n\n// Require other extensions.\ncheck_extension('mbstring');\n\n// If auth params are not defined (in config.php) - initialize with an empty array.\nif (!isset($GLOBALS['AUTH_MODULE_PARAMS']) || !is_array($GLOBALS['AUTH_MODULE_PARAMS']))\n  $GLOBALS['AUTH_MODULE_PARAMS'] = array();\n\n// Smarty initialization.\nimport('smarty.Smarty');\n$smarty = new Smarty;\n$smarty->use_sub_dirs = false;\n$smarty->template_dir = TEMPLATE_DIR;\n$smarty->compile_dir  = TEMPLATE_DIR.'_c';\n\n// Note: these 3 settings below used to be in .htaccess file. Moved them here to eliminate \"error 500\" problems\n// with some shared hostings that do not have AllowOverride Options or AllowOverride All in their apache configurations.\n// Change http cache expiration time to 1 minute.\nsession_cache_expire(1);\n\n$phpsessid_ttl = defined('PHPSESSID_TTL') ? PHPSESSID_TTL : 60*60*24;\n// Set lifetime for garbage collection.\nini_set('session.gc_maxlifetime', $phpsessid_ttl);\n// Set PHP session path, if defined to avoid garbage collection interference from other scripts.\nif (defined('PHP_SESSION_PATH') && realpath(PHP_SESSION_PATH)) {\n  ini_set('session.save_path', realpath(PHP_SESSION_PATH));\n  ini_set('session.gc_probability', 1);\n}\n\n// \"tt_\" prefix is to avoid sharing session with other PHP apps that do not name session.\nif (!defined('SESSION_COOKIE_NAME')) define('SESSION_COOKIE_NAME', 'tt_PHPSESSID');\nif (!defined('LOGIN_COOKIE_NAME')) define('LOGIN_COOKIE_NAME', 'tt_login');\n\n// Set session cookie lifetime.\nsession_set_cookie_params($phpsessid_ttl);\nif (isset($_COOKIE[SESSION_COOKIE_NAME])) {\n  // Extend PHP session cookie lifetime by PHPSESSID_TTL (if defined, otherwise 24 hours) \n  // so that users don't have to re-login during this period from now. \n  setcookie(SESSION_COOKIE_NAME, $_COOKIE[SESSION_COOKIE_NAME],  time() + $phpsessid_ttl, '/');\n}\n\n// Start or resume PHP session.\nsession_name(SESSION_COOKIE_NAME);\n@session_start();\n\n// Authorization.\nimport('Auth');\n$auth = Auth::factory(AUTH_MODULE, $GLOBALS['AUTH_MODULE_PARAMS']);\n\n// Some defines we'll need.\n//\ndefine('RESOURCE_DIR', APP_DIR.'/WEB-INF/resources');\ndefine('COOKIE_EXPIRE', 60*60*24*30); // Cookies expire in 30 days.\n\n// Status values for projects, users, etc.\ndefine('ACTIVE', 1);\ndefine('INACTIVE', 0);\n// define('DELETED', -1); // DELETED items should have a NULL status. This allows us to have duplicate NULL status entries with existing indexes.\n\n// Definitions for tracking mode types.\ndefine('MODE_TIME', 0); // Tracking time only. There are no projects or tasks.\ndefine('MODE_PROJECTS', 1); // Tracking time per projects. There are no tasks.\ndefine('MODE_PROJECTS_AND_TASKS', 2); // Tracking time for projects and tasks.\n\n// Definitions of types for time records.\ndefine('TYPE_ALL', 0); // Time record can be specified with either duration or start and finish times.\ndefine('TYPE_START_FINISH', 1); // Time record has start and finish times.\ndefine('TYPE_DURATION', 2); // Time record has only duration, no start and finish times.\n\ndefine('CHARSET', 'utf-8');\n\ndate_default_timezone_set(@date_default_timezone_get());\n\n// Strip auto-inserted extra slashes when magic_quotes ON for PHP versions prior to 5.4.0.\nif (get_magic_quotes_gpc())\n  magic_quotes_off();\n\n// Initialize global objects that are needed for the application.\nimport('html.HttpRequest');\n$request = new ttHttpRequest();\n\nimport('form.ActionErrors');\n$err = new ActionErrors(); // Error messages for user.\n$msg = new ActionErrors(); // Notification messages (not errrors) for user.\n\n// Create an instance of ttUser class. This gets us most of user details.\nimport('ttUser');\n$user = new ttUser(null, $auth->getUserId());\nif ($user->custom_logo) {\n  $smarty->assign('custom_logo', 'img/'.$user->group_id.'.png');\n  $smarty->assign('mobile_custom_logo', '../img/'.$user->group_id.'.png');\n}\n$smarty->assign('user', $user);\n\n// Localization.\nimport('I18n');\n$i18n = new I18n();\n\n// Determine the language to use.\n$lang = $user->lang;\nif (!$lang) {\n  if (defined('LANG_DEFAULT'))\n    $lang = LANG_DEFAULT;\n\n  // If we still do not have the language get it from the browser.\n  if (!$lang) {\n    $lang = $i18n->getBrowserLanguage();\n\n    // Finally - English is the default.\n    if (!$lang) {\n      $lang = 'en';\n    }\n  }\n}\n\n// Load i18n file.\n$i18n->load($lang);\n\n// Assign things for smarty to use in template files.\n$smarty->assign('i18n', $i18n->keys);\n$smarty->assign('err', $err);\n$smarty->assign('msg', $msg);\n\n// TODO: move this code out of here to the files that use it.\n\n// We use js/strftime.js to print dates in JavaScript (in DateField controls).\n// One of our date formats (%d.%m.%Y %a) prints a localized short weekday name (%a).\n// The init_js_date_locale function iniitializes Date.ext.locales array in js/strftime.js for our language\n// so that we could print localized short weekday names.\n//\n// JavaScript usage (see http://hacks.bluesmoon.info/strftime/localisation.html).\n//\n// var d = new Date();\n// d.locale = \"fr\";           // Remember to initialize locale.\n// d.strftime(\"%d.%m.%Y %a\"); // This will output a localized %a as in \"31.05.2013 Ven\"\n\n// Initialize date locale for JavaScript.\ninit_js_date_locale();\n\nfunction init_js_date_locale()\n{\n  global $i18n, $smarty;\n  $lang = $i18n->lang;\n\n  $days = $i18n->weekdayNames;\n  $short_day_names = array();\n  foreach($days as $k => $v) {\n    $short_day_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n\n  /*\n  $months = $i18n->monthNames;\n  $short_month_names = array();\n  foreach ($months as $k => $v) {\n    $short_month_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      A: ['\" . join(\"', '\", $days) . \"'],\n      b: ['\" . join(\"', '\", $short_month_names) . \"'],\n      B: ['\" . join(\"', '\", $months) . \"'],\n      c: '%a %d %b %Y %T %Z',\n      p: ['', ''],\n      P: ['', ''],\n      x: '%Y-%m-%d',\n      X: '%T'\n    };\"; */\n  // We use %a in one of date formats. Therefore, simplified code here (instead of the above block).\n  // %p is also used on the Profile page in 12-hour time format example. Note that %p is not localized.\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      p: ['AM', 'PM']\n    };\";\n  $smarty->assign('js_date_locale', $js);\n}\n", "<?php\n// +----------------------------------------------------------------------+\n// | Anuko Time Tracker\n// +----------------------------------------------------------------------+\n// | Copyright (c) Anuko International Ltd. (https://www.anuko.com)\n// +----------------------------------------------------------------------+\n// | LIBERAL FREEWARE LICENSE: This source code document may be used\n// | by anyone for any purpose, and freely redistributed alone or in\n// | combination with other software, provided that the license is obeyed.\n// |\n// | There are only two ways to violate the license:\n// |\n// | 1. To redistribute this code in source form, with the copyright\n// |    notice or license removed or altered. (Distributing in compiled\n// |    forms without embedded copyright notices is permitted).\n// |\n// | 2. To redistribute modified versions of this code in *any* form\n// |    that bears insufficient indications that the modifications are\n// |    not the work of the original author(s).\n// |\n// | This license applies to this document only, not any other software\n// | that it may be combined with.\n// |\n// +----------------------------------------------------------------------+\n// | Contributors:\n// | https://www.anuko.com/time_tracker/credits.htm\n// +----------------------------------------------------------------------+\n\nrequire_once('initialize.php');\nimport('form.Form');\nimport('form.ActionForm');\nimport('ttReportHelper');\n\n// Access checks.\nif (!(ttAccessAllowed('view_own_reports') || ttAccessAllowed('view_reports') || ttAccessAllowed('view_all_reports')  || ttAccessAllowed('view_client_reports'))) {\n  header('Location: access_denied.php');\n  exit();\n}\n// End of access checks.\n\n// Use custom fields plugin if it is enabled.\nif ($user->isPluginEnabled('cf')) {\n  require_once('plugins/CustomFields.class.php');\n  $custom_fields = new CustomFields();\n}\n\n// Report settings are stored in session bean before we get here.\n$bean = new ActionForm('reportBean', new Form('reportForm'), $request);\n\n// This file handles 2 types of export to a file:\n// 1) xml\n// 2) csv\n// Export to pdf is handled separately in topdf.php.\n$type = $request->getParameter('type');\n\n// Also, there are 2 variations of report: totals only, or normal. Totals only means that the report\n// is grouped by (either date, user, client, project, or task) and user only needs to see subtotals by group.\n$totals_only = $bean->getAttribute('chtotalsonly');\n\n// Obtain items.\n$options = ttReportHelper::getReportOptions($bean);\nif ($totals_only)\n  $subtotals = ttReportHelper::getSubtotals($options);\nelse\n  $items = ttReportHelper::getItems($options);\n\n// Build a string to use as filename for the files being downloaded.\n$filename = strtolower($i18n->get('title.report')).'_'.$bean->mValues['start_date'].'_'.$bean->mValues['end_date'];\n\nheader('Pragma: public'); // This is needed for IE8 to download files over https.\nheader('Content-Type: text/html; charset=utf-8');\nheader('Last-Modified: '.gmdate('D, d M Y H:i:s').' GMT');\nheader('Cache-Control: no-store, no-cache, must-revalidate');\nheader('Cache-Control: post-check=0, pre-check=0', false);\nheader('Cache-Control: private', false);\n\n// Handle 2 cases of possible exports individually.\n\n// 1) entries exported to xml\nif ('xml' == $type) {\n  header('Content-Type: application/xml');\n  header('Content-Disposition: attachment; filename=\"'.$filename.'.xml\"');\n\n  print \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\";\n  print \"<rows>\\n\";\n\n  if ($totals_only) {\n    // Totals only report.\n    $group_by_tag = ttReportHelper::makeGroupByXmlTag($options);\n\n    // Print subtotals.\n    foreach ($subtotals as $subtotal) {\n      print \"<row>\\n\";\n      print \"\\t<\".$group_by_tag.\"><![CDATA[\".$subtotal['name'].\"]]></\".$group_by_tag.\">\\n\";\n      if ($bean->getAttribute('chduration')) {\n        $val = $subtotal['time'];\n        if($val && isTrue('EXPORT_DECIMAL_DURATION'))\n          $val = time_to_decimal($val);\n        print \"\\t<duration><![CDATA[\".$val.\"]]></duration>\\n\";\n      }\n      if ($bean->getAttribute('chunits')) {\n        print \"\\t<units><![CDATA[\".$subtotal['units'].\"]]></units>\\n\";\n      }\n      if ($bean->getAttribute('chcost')) {\n        print \"\\t<cost><![CDATA[\";\n        if ($user->can('manage_invoices') || $user->isClient())\n          print $subtotal['cost'];\n        else\n          print $subtotal['expenses'];\n        print \"]]></cost>\\n\";\n      }\n      print \"</row>\\n\";\n    }\n  } else {\n    // Normal report.\n    foreach ($items as $item) {\n      print \"<row>\\n\";\n\n      print \"\\t<date><![CDATA[\".$item['date'].\"]]></date>\\n\";\n      if ($user->can('view_reports') || $user->can('view_all_reports') || $user->isClient()) print \"\\t<user><![CDATA[\".$item['user'].\"]]></user>\\n\";\n      // User custom fields.\n      if ($custom_fields && $custom_fields->userFields) {\n        foreach ($custom_fields->userFields as $userField) {\n          $field_name = 'user_field_'.$userField['id'];\n          $checkbox_control_name = 'show_'.$field_name;\n          if ($bean->getAttribute($checkbox_control_name)) print \"\\t<$field_name><![CDATA[\".$item[$field_name].\"]]></$field_name>\\n\";\n        }\n      }\n      if ($bean->getAttribute('chclient')) print \"\\t<client><![CDATA[\".$item['client'].\"]]></client>\\n\";\n      if ($bean->getAttribute('chproject')) print \"\\t<project><![CDATA[\".$item['project'].\"]]></project>\\n\";\n      if ($bean->getAttribute('chtask')) print \"\\t<task><![CDATA[\".$item['task'].\"]]></task>\\n\";\n      // Time custom fields.\n      if ($custom_fields && $custom_fields->timeFields) {\n        foreach ($custom_fields->timeFields as $timeField) {\n          $field_name = 'time_field_'.$timeField['id'];\n          $checkbox_control_name = 'show_'.$field_name;\n          if ($bean->getAttribute($checkbox_control_name)) print \"\\t<$field_name><![CDATA[\".$item[$field_name].\"]]></$field_name>\\n\";\n        }\n      }\n      if ($bean->getAttribute('chstart')) print \"\\t<start><![CDATA[\".$item['start'].\"]]></start>\\n\";\n      if ($bean->getAttribute('chfinish')) print \"\\t<finish><![CDATA[\".$item['finish'].\"]]></finish>\\n\";\n      if ($bean->getAttribute('chduration')) {\n        $duration = $item['duration'];\n        if($duration && isTrue('EXPORT_DECIMAL_DURATION'))\n          $duration = time_to_decimal($duration);\n          print \"\\t<duration><![CDATA[\".$duration.\"]]></duration>\\n\";\n      }\n      if ($bean->getAttribute('chunits')) print \"\\t<units><![CDATA[\".$item['units'].\"]]></units>\\n\";\n      if ($bean->getAttribute('chnote')) print \"\\t<note><![CDATA[\".$item['note'].\"]]></note>\\n\";\n      if ($bean->getAttribute('chcost')) {\n        print \"\\t<cost><![CDATA[\";\n        if ($user->can('manage_invoices') || $user->isClient())\n          print $item['cost'];\n        else\n          print $item['expense'];\n        print \"]]></cost>\\n\";\n      }\n      if ($bean->getAttribute('chapproved')) print \"\\t<approved><![CDATA[\".$item['approved'].\"]]></approved>\\n\";\n      if ($bean->getAttribute('chpaid')) print \"\\t<paid><![CDATA[\".$item['paid'].\"]]></paid>\\n\";\n      if ($bean->getAttribute('chip')) {\n        $ip = $item['modified'] ? $item['modified_ip'].' '.$item['modified'] : $item['created_ip'].' '.$item['created'];\n        print \"\\t<ip><![CDATA[\".$ip.\"]]></ip>\\n\";\n      }\n      if ($bean->getAttribute('chinvoice')) print \"\\t<invoice><![CDATA[\".$item['invoice'].\"]]></invoice>\\n\";\n      if ($bean->getAttribute('chtimesheet')) print \"\\t<timesheet><![CDATA[\".$item['timesheet_name'].\"]]></timesheet>\\n\";\n\n      print \"</row>\\n\";\n    }\n  }\n\n  print \"</rows>\";\n}\n\n// 2) entries exported to csv\nif ('csv' == $type) {\n  header('Content-Type: application/csv');\n  header('Content-Disposition: attachment; filename=\"'.$filename.'.csv\"');\n\n  // Print UTF8 BOM first to identify encoding.\n  $bom = chr(239).chr(187).chr(191); // 0xEF 0xBB 0xBF in the beginning of the file is UTF8 BOM.\n  print $bom; // Without this Excel does not display UTF8 characters properly.\n\n  if ($totals_only) {\n    // Totals only report.\n    $group_by_header = ttReportHelper::makeGroupByHeader($options);\n\n    // Print headers.\n    print '\"'.$group_by_header.'\"';\n    if ($bean->getAttribute('chduration')) print ',\"'.$i18n->get('label.duration').'\"';\n    if ($bean->getAttribute('chunits')) print ',\"'.$i18n->get('label.work_units_short').'\"';\n    if ($bean->getAttribute('chcost')) print ',\"'.$i18n->get('label.cost').'\"';\n    print \"\\n\";\n\n    // Print subtotals.\n    foreach ($subtotals as $subtotal) {\n      print '\"'.$subtotal['name'].'\"';\n      if ($bean->getAttribute('chduration')) {\n        $val = $subtotal['time'];\n        if($val && isTrue('EXPORT_DECIMAL_DURATION'))\n          $val = time_to_decimal($val);\n        print ',\"'.$val.'\"';\n      }\n      if ($bean->getAttribute('chunits')) print ',\"'.$subtotal['units'].'\"';\n      if ($bean->getAttribute('chcost')) {\n        if ($user->can('manage_invoices') || $user->isClient())\n          print ',\"'.$subtotal['cost'].'\"';\n        else\n          print ',\"'.$subtotal['expenses'].'\"';\n      }\n      print \"\\n\";\n    }\n  } else {\n    // Normal report. Print headers.\n    print '\"'.$i18n->get('label.date').'\"';\n    if ($user->can('view_reports') || $user->can('view_all_reports') || $user->isClient()) print ',\"'.$i18n->get('label.user').'\"';\n    // User custom field labels.\n    if ($custom_fields && $custom_fields->userFields) {\n      foreach ($custom_fields->userFields as $userField) {\n        $field_name = 'user_field_'.$userField['id'];\n        $checkbox_control_name = 'show_'.$field_name;\n        if ($bean->getAttribute($checkbox_control_name)) print ',\"'.str_replace('\"','\"\"',$userField['label']).'\"';\n      }\n    }\n    if ($bean->getAttribute('chclient')) print ',\"'.$i18n->get('label.client').'\"';\n    if ($bean->getAttribute('chproject')) print ',\"'.$i18n->get('label.project').'\"';\n    if ($bean->getAttribute('chtask')) print ',\"'.$i18n->get('label.task').'\"';\n    // Time custom field labels.\n    if ($custom_fields && $custom_fields->timeFields) {\n      foreach ($custom_fields->timeFields as $timeField) {\n        $field_name = 'time_field_'.$timeField['id'];\n        $checkbox_control_name = 'show_'.$field_name;\n        if ($bean->getAttribute($checkbox_control_name)) print ',\"'.str_replace('\"','\"\"',$timeField['label']).'\"';\n      }\n    }\n    if ($bean->getAttribute('chstart')) print ',\"'.$i18n->get('label.start').'\"';\n    if ($bean->getAttribute('chfinish')) print ',\"'.$i18n->get('label.finish').'\"';\n    if ($bean->getAttribute('chduration')) print ',\"'.$i18n->get('label.duration').'\"';\n    if ($bean->getAttribute('chunits')) print ',\"'.$i18n->get('label.work_units_short').'\"';\n    if ($bean->getAttribute('chnote')) print ',\"'.$i18n->get('label.note').'\"';\n    if ($bean->getAttribute('chcost')) print ',\"'.$i18n->get('label.cost').'\"';\n    if ($bean->getAttribute('chapproved')) print ',\"'.$i18n->get('label.approved').'\"';\n    if ($bean->getAttribute('chpaid')) print ',\"'.$i18n->get('label.paid').'\"';\n    if ($bean->getAttribute('chip')) print ',\"'.$i18n->get('label.ip').'\"';\n    if ($bean->getAttribute('chinvoice')) print ',\"'.$i18n->get('label.invoice').'\"';\n    if ($bean->getAttribute('chtimesheet')) print ',\"'.$i18n->get('label.timesheet').'\"';\n    print \"\\n\";\n\n    // Print items.\n    foreach ($items as $item) {\n      print '\"'.$item['date'].'\"';\n      if ($user->can('view_reports') || $user->can('view_all_reports') || $user->isClient()) print ',\"'.str_replace('\"','\"\"',$item['user']).'\"';\n      // User custom fields.\n      if ($custom_fields && $custom_fields->userFields) {\n        foreach ($custom_fields->userFields as $userField) {\n          $field_name = 'user_field_'.$userField['id'];\n          $checkbox_control_name = 'show_'.$field_name;\n          if ($bean->getAttribute($checkbox_control_name)) print ',\"'.str_replace('\"','\"\"',$item[$field_name]).'\"';\n        }\n      }\n      if ($bean->getAttribute('chclient')) print ',\"'.str_replace('\"','\"\"',$item['client']).'\"';\n      if ($bean->getAttribute('chproject')) print ',\"'.str_replace('\"','\"\"',$item['project']).'\"';\n      if ($bean->getAttribute('chtask')) print ',\"'.str_replace('\"','\"\"',$item['task']).'\"';\n      // Time custom fields.\n      if ($custom_fields && $custom_fields->timeFields) {\n        foreach ($custom_fields->timeFields as $timeField) {\n          $field_name = 'time_field_'.$timeField['id'];\n          $checkbox_control_name = 'show_'.$field_name;\n          if ($bean->getAttribute($checkbox_control_name)) print ',\"'.str_replace('\"','\"\"',$item[$field_name]).'\"';\n        }\n      }\n      if ($bean->getAttribute('chstart')) print ',\"'.$item['start'].'\"';\n      if ($bean->getAttribute('chfinish')) print ',\"'.$item['finish'].'\"';\n      if ($bean->getAttribute('chduration')) {\n        $val = $item['duration'];\n        if($val && isTrue('EXPORT_DECIMAL_DURATION'))\n          $val = time_to_decimal($val);\n        print ',\"'.$val.'\"';\n      }\n      if ($bean->getAttribute('chunits')) print ',\"'.$item['units'].'\"';\n      if ($bean->getAttribute('chnote')) print ',\"'.str_replace('\"','\"\"',$item['note']).'\"';\n      if ($bean->getAttribute('chcost')) {\n        if ($user->can('manage_invoices') || $user->isClient())\n          print ',\"'.$item['cost'].'\"';\n        else\n          print ',\"'.$item['expense'].'\"';\n      }\n      if ($bean->getAttribute('chapproved')) print ',\"'.$item['approved'].'\"';\n      if ($bean->getAttribute('chpaid')) print ',\"'.$item['paid'].'\"';\n      if ($bean->getAttribute('chip')) {\n        $ip = $item['modified'] ? $item['modified_ip'].' '.$item['modified'] : $item['created_ip'].' '.$item['created'];\n        print ',\"'.$ip.'\"';\n      }\n      if ($bean->getAttribute('chinvoice')) print ',\"'.str_replace('\"','\"\"',$item['invoice']).'\"';\n      if ($bean->getAttribute('chtimesheet')) print ',\"'.str_replace('\"','\"\"',$item['timesheet_name']).'\"';\n      print \"\\n\";\n    }\n  }\n}\n"], "fixing_code": ["<?php\n// +----------------------------------------------------------------------+\n// | Anuko Time Tracker\n// +----------------------------------------------------------------------+\n// | Copyright (c) Anuko International Ltd. (https://www.anuko.com)\n// +----------------------------------------------------------------------+\n// | LIBERAL FREEWARE LICENSE: This source code document may be used\n// | by anyone for any purpose, and freely redistributed alone or in\n// | combination with other software, provided that the license is obeyed.\n// |\n// | There are only two ways to violate the license:\n// |\n// | 1. To redistribute this code in source form, with the copyright\n// |    notice or license removed or altered. (Distributing in compiled\n// |    forms without embedded copyright notices is permitted).\n// |\n// | 2. To redistribute modified versions of this code in *any* form\n// |    that bears insufficient indications that the modifications are\n// |    not the work of the original author(s).\n// |\n// | This license applies to this document only, not any other software\n// | that it may be combined with.\n// |\n// +----------------------------------------------------------------------+\n// | Contributors:\n// | https://www.anuko.com/time_tracker/credits.htm\n// +----------------------------------------------------------------------+\n\n// import() function loads a class.\nfunction import($class_name) {\n  $libs = array(\n    dirname($_SERVER[\"SCRIPT_FILENAME\"]),\n    LIBRARY_DIR\n  );\n\n\t    $pos = strpos($class_name, \".\");\n        if (!($pos === false)) {\n            $peaces = explode(\".\", $class_name);\n            $p = \"\";\n            for ($i=0; $i<count($peaces)-1; $i++) {\n                $p = $p . \"/\" . $peaces[$i];\n            }\n\t\t\t$libs = array_merge(array(LIBRARY_DIR . $p),$libs);\n            $class_name = $peaces[count($peaces)-1];\n        }\n\n\t\t$filename = $class_name . '.class.php';\n\n\t\tforeach($libs as $lib) {\n\t\t\t$inc_filename = $lib . '/' . $filename;\n\t\t\tif (file_exists($inc_filename)) {\n\t\t\t\t\trequire_once($inc_filename);\n\t\t\t\t\treturn $class_name;\n\t\t\t}\n\t\t}\n\n\t\tprint '<br><b>load_class: error loading file \"'.$filename.'\"</b>';\n\t\tdie();\n}\n\n\t// The mu_sort function is used to sort a multi-dimensional array.\n\t// It looks like the code example is taken from the PHP manual http://ca2.php.net/manual/en/function.sort.php\n\tfunction mu_sort($array, $key_sort) {\n\t\t$n = 0;\n\t\tif (!is_array($array) || count($array)==0)\n\t\t\treturn array();\n\n\t\t$key_sorta = explode(\",\", $key_sort);\n\t\t$keys = array_keys($array[0]);\n\n\t\tfor($m=0; $m < count($key_sorta); $m++) {\n\t\t\t$nkeys[$m] = trim($key_sorta[$m]);\n\t\t}\n\t\t$n += count($key_sorta);\n\n\t\tfor($i=0; $i < count($keys); $i++) {\n\t\t\tif(!in_array($keys[$i], $key_sorta)) {\n\t\t\t\t$nkeys[$n] = $keys[$i];\n\t\t\t\t$n += \"1\";\n\t\t\t}\n\t\t}\n\n\t\tfor($u=0;$u<count($array); $u++) {\n\t\t\t$arr = $array[$u];\n\t\t\tfor($s=0; $s<count($nkeys); $s++) {\n\t\t\t\t$k = $nkeys[$s];\n\t\t\t\t$output[$u][$k] = $array[$u][$k];\n\t\t\t}\n\t\t}\n\t\tsort($output);\n\t\treturn $output;\n\t}\n\n\t/**\n\t * return float type\n\t *\n\t * @param unknown $value\n\t * @return unknown\n\t */\n\tfunction toFloat($value) {\n\t\tif (isset($value) && (strlen($value) > 0)) {\n\t\t\t$value = str_replace(\",\",\".\",$value);\n\t\t\treturn floatval($value);\n\t\t}\n\t\treturn null;\n\t}\n\n\tfunction stripslashes_deep($value) {\n\t    $value = is_array($value) ?\n                array_map('stripslashes_deep', $value) :\n                stripslashes($value);\n    \treturn $value;\n\t}\n\n\tfunction &getConnection() {\n        if (!isset($GLOBALS[\"_MDB2_CONNECTION\"])) {\n\n        \trequire_once('MDB2.php');\n\n        \t$mdb2 = MDB2::connect(DSN);\n\t\t\tif (is_a($mdb2, 'PEAR_Error')) {\n    \t\t\tdie($mdb2->getMessage());\n\t\t\t}\n\n\t\t\t$mdb2->setFetchMode(MDB2_FETCHMODE_ASSOC);\n\t\t\t\n   \t\t\t$GLOBALS[\"_MDB2_CONNECTION\"] = $mdb2;\n    \t}\n      \treturn $GLOBALS[\"_MDB2_CONNECTION\"];\n\t}\n\n\n// time_to_decimal converts a time string such as 1:15 to its decimal representation such as 1.25 or 1,25.\nfunction time_to_decimal($val) {\n  global $user;\n  $parts = explode(':', $val); // parts[0] is hours, parts[1] is minutes.\n\n  $minutePercent = round($parts[1]*100/60); // Integer value (0-98) of percent of minutes portion in the hour.\n  if($minutePercent < 10) $minutePercent = '0'.$minutePercent; // Pad small values with a 0 to always have 2 digits.\n\n  $decimalTime = $parts[0].$user->decimal_mark.$minutePercent; // Construct decimal representation of time value.\n\n  return $decimalTime;\n}\n\nfunction magic_quotes_off()\n{\n  $_POST = array_map('stripslashes_deep', $_POST);\n  $_GET = array_map('stripslashes_deep', $_GET);\n  $_COOKIE = array_map('stripslashes_deep', $_COOKIE);\n}\n\n// check_extension checks whether a required PHP extension is loaded and dies if not so.\nfunction check_extension($ext)\n{\n  if (!extension_loaded($ext))\n    die(\"PHP extension '{$ext}' is required but is not loaded. Read Time Tracker Install Guide for help.\");\n}\n\n// isTrue is a helper function to return correct false for older config.php values defined as a string 'false'.\nfunction isTrue($val)\n{\n  return (defined($val) && constant($val) === true);\n}\n\n// ttValidString is used to check user input to validate a string.\nfunction ttValidString($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0 && !$emptyValid)\n    return false;\n    \n  // String must not be XSS evil (to insert JavaScript).\n  if (stristr($val, '<script>') || stristr($val, '<script '))\n    return false;\n    \n  return true;    \n}\n\n// ttValidCss is used to check user input for custom css.\nfunction ttValidCss($val)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return true;\n\n  // String must not contain any tags.\n  if (stristr($val, '<'))\n    return false;\n\n  // Security note: the above may not be enough.\n  // Currently it is unclear how vulnerable we are assuming custom css is available only to a logged on user\n  // (one custom css per group).\n  // However, if abuse occurs or when the issue is better understood, we may have to rewrite this function,\n  // perhaps by specifying what exactly we allow to style.\n  return true;\n}\n\n// ttValidTemplateText is used to check template-based user input.\n// When templates are used, required input parts must be filled by user.\n// We identify these parts by 3 \"stop sign\" emojis (aka \"octagonal sign\" U+1F6D1).\nfunction ttValidTemplateText($val)\n{\n  $valid = strpos($val, '\ud83d\uded1\ud83d\uded1\ud83d\uded1') === false; // no 3 \"stop sign\" emojis in a row.\n  return $valid;\n}\n\n// ttValidEmail is used to check user input to validate an email string.\nfunction ttValidEmail($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n  \t\n  // String must not be XSS evil (to insert JavaScript).\n  if (stristr($val, '<script>') || stristr($val, '<script '))\n    return false;\n    \n  // Validate a single email address. TODO: improve for compliancy with RFC.\n  if (!preg_match(\"/^[_a-zA-Z\\d\\'-\\.]+@([_a-zA-Z\\d\\-]+(\\.[_a-zA-Z\\d\\-]+)+)$/\", $val))\n    return false;\n  \n  return true;    \n}\n\n// ttValidEmailList is used to check user input to validate an email string.\nfunction ttValidEmailList($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n  \t\n  // String must not be XSS evil (to insert JavaScript).\n  if (stristr($val, '<script>') || stristr($val, '<script '))\n    return false;\n    \n  // Validates a list of email addresses separated by a comma with optional spaces.\n  if (!preg_match(\"/^[_a-zA-Z\\d\\'-\\.]+@([_a-zA-Z\\d\\-]+(\\.[_a-zA-Z\\d\\-]+)+)(,\\s*[_a-zA-Z\\d\\'-\\.]+@([_a-zA-Z\\d\\-]+(\\.[_a-zA-Z\\d\\-]+)+))*$/\", $val))\n    return false;\n    \n  return true;\n}\n\n// ttValidFloat is used to check user input to validate a float value.\nfunction ttValidFloat($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n    \n  global $user;\n  $decimal = $user->getDecimalMark();\n\t\n  if (!preg_match('/^-?[0-9'.$decimal.']+$/', $val))\n    return false;\n    \n  return true;    \n}\n\n// ttValidDate is used to check user input to validate a date.\nfunction ttValidDate($val)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return false;\n\n  // This should accept a string in format 'YYYY-MM-DD', 'MM/DD/YYYY', 'DD-MM-YYYY', 'DD.MM.YYYY', or 'DD.MM.YYYY whatever'.\n  if (!preg_match('/^\\d\\d\\d\\d-\\d\\d-\\d\\d$/', $val) &&\n    !preg_match('/^\\d\\d\\/\\d\\d\\/\\d\\d\\d\\d$/', $val) &&\n    !preg_match('/^\\d\\d\\-\\d\\d\\-\\d\\d\\d\\d$/', $val) &&\n    !preg_match('/^\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d$/', $val) &&\n    !preg_match('/^\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d .+$/', $val))\n    return false;\n    \n  return true;    \n}\n\n// ttValidInteger is used to check user input to validate an integer.\nfunction ttValidInteger($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n    \n  if (!preg_match('/^[0-9]+$/', $val))\n    return false;\n\n  return true;\n}\n\n// ttValidCronSpec is used to check user input to validate cron specification.\nfunction ttValidCronSpec($val)\n{\n  // This code is adapted from http://stackoverflow.com/questions/235504/validating-crontab-entries-w-php\n  $numbers= array(\n     'min'=>'[0-5]?\\d',\n     'hour'=>'[01]?\\d|2[0-3]',\n     'day'=>'0?[1-9]|[12]\\d|3[01]',\n     'month'=>'[1-9]|1[012]',\n     'dow'=>'[0-7]'\n  );\n\n  foreach($numbers as $field=>$number) {\n    $range= \"($number)(-($number)(\\/\\d+)?)?\";\n    $field_re[$field]= \"\\*(\\/\\d+)?|$range(,$range)*\";\n  }\n\n  $field_re['month'].='|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec';\n  $field_re['dow'].='|mon|tue|wed|thu|fri|sat|sun';\n\n  $fields_re= '('.join(')\\s+(', $field_re).')';\n\n  /*\n  $replacements= '@reboot|@yearly|@annually|@monthly|@weekly|@daily|@midnight|@hourly';\n\n  $regexp = '^\\s*('.\n                '$'.\n                '|#'.\n                '|\\w+\\s*='.\n                \"|$fields_re\\s+\\S\".\n                \"|($replacements)\\s+\\S\".\n            ')';\n   */\n  // The above block from the link did not work for me.\n\n  // But this works.\n  $regexp = '/^'.$fields_re.'$/';\n\t\n  if (!preg_match($regexp, $val))\n    return false;\n\n  return true;\n}\n\n// ttValidCondition is used to check user input to validate a notification condition.\nfunction ttValidCondition($val, $emptyValid = true)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n\n  // String must not be XSS evil (to insert JavaScript).\n  if (stristr($val, '<script>') || stristr($val, '<script '))\n    return false;\n\n  if (!preg_match(\"/^count\\s?(=|[<>]=?|<>)\\s?\\d+$/\", $val) &&\n      !preg_match(\"/^hours\\s?(=|[<>]=?|<>)\\s?\\d+$/\", $val))\n    return false;\n\n  return true;\n}\n\n// ttValidIP is used to check user input to validate a comma-separated\n// list of IP subnet \"prefixes\", for example 192.168.0 (note: no .* in the end).\n// We keep regexp checks here simple - they are not precise.\n// For example, IPv4-mapped IPv6 addresses will fail. This may need to be fixed.\nfunction ttValidIP($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0 && $emptyValid)\n    return true;\n\n  $subnets = explode(',', $val);\n  foreach ($subnets as $subnet) {\n    $ipv4 = preg_match('/^\\d\\d?\\d?(\\.\\d\\d?\\d?){0,3}\\.?$/', $subnet); // Not precise check.\n    $ipv6 = preg_match('/^([0-9a-fA-F]{4})(:[0-9a-fA-F]{4}){0,7}$/', $subnet); // Not precise check.\n    if (!$ipv4 && !$ipv6)\n      return false;\n  }\n  return true;\n}\n\n// ttValidHolidays is used to check user input to validate holidays spec.\n// To keep things simple, the format is a comma-separated list of dates:\n// ****-01-01,****-12-31,2019-04-20\n// The above means Jan 1 and Dec 31 are holidays in all years, while Apr 20 is only in 2019.\nfunction ttValidHolidays($val)\n{\n  $val = trim($val);\n  if (strlen($val) == 0) return true;\n\n  $dates = explode(',', $val);\n  foreach ($dates as $date) {\n    if (!preg_match('/^[\\d*]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$/', $date))\n      return false;\n  }\n  return true;\n}\n\n// ttAccessAllowed checks whether user is allowed access to a particular page.\n// It is used as an initial check on all publicly available pages\n// (except login.php, register.php, and others where we don't have to check).\nfunction ttAccessAllowed($required_right)\n{\n  global $auth;\n  global $user;\n\n  // Redirect to login page if user is not authenticated.\n  if (!$auth->isAuthenticated()) {\n    header('Location: login.php');\n    exit();\n  }\n\n  // Check IP restriction, if set.\n  if ($user->allow_ip && !$user->can('override_allow_ip')) {\n    $access_allowed = false;\n    $user_ip = $_SERVER['REMOTE_ADDR'];\n    $allowed_ip_array = explode(',', $user->allow_ip);\n    foreach ($allowed_ip_array as $allowed_ip) {\n      $len = strlen($allowed_ip);\n      if (substr($user_ip, 0, $len) === $allowed_ip) { // startsWith check.\n         $access_allowed = true;\n         break;\n      }\n    }\n    if (!$access_allowed) return false;\n  }\n\n  // Check if user has the right.\n  if (in_array($required_right, $user->rights)) {\n    import('ttUserHelper');\n    ttUserHelper::updateLastAccess();\n    return true;\n  }\n\n  return false;\n}\n\n// ttStartsWith functions checks if a string starts with a given substring.\nfunction ttStartsWith($string, $startString)\n{\n    $len = strlen($startString);\n    return (substr($string, 0, $len) === $startString);\n}\n\n// ttEndsWith functions checks if a string ends with a given substring.\nfunction ttEndsWith($string, $endString)\n{\n    $len = strlen($endString);\n    if ($len == 0) return true;\n    return (substr($string, -$len) === $endString);\n}\n\n// ttDateToUserFormat converts a date from database format to user format.\nfunction ttDateToUserFormat($date)\n{\n  global $user;\n  $o_date = new DateAndTime(DB_DATEFORMAT, $date);\n  return $o_date->toString($user->date_format);\n}\n\n// ttRandomString generates a random alphanumeric string.\nfunction ttRandomString($length = 32) {\n  $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  $charactersLength = strlen($characters);\n  $randomString = '';\n  for ($i = 0; $i < $length; $i++) {\n    $randomString .= $characters[rand(0, $charactersLength - 1)];\n  }\n  return $randomString;\n}\n\n// ttNeutralizeForCsv neutralizes user input for export to CSV files\n// by removing =, +, -, and @ characters from the beginning of cell values.\n// This mitigates a risk of CSV injection, see https://owasp.org/www-community/attacks/CSV_Injection\n// Additionally, it replaces each quote character with a double quote.\nfunction ttNeutralizeForCsv($val) {\n  $result = ltrim($val, '=+-@');\n  return str_replace('\"', '\"\"', $result);\n}\n", "<?php\n// +----------------------------------------------------------------------+\n// | Anuko Time Tracker\n// +----------------------------------------------------------------------+\n// | Copyright (c) Anuko International Ltd. (https://www.anuko.com)\n// +----------------------------------------------------------------------+\n// | LIBERAL FREEWARE LICENSE: This source code document may be used\n// | by anyone for any purpose, and freely redistributed alone or in\n// | combination with other software, provided that the license is obeyed.\n// |\n// | There are only two ways to violate the license:\n// |\n// | 1. To redistribute this code in source form, with the copyright\n// |    notice or license removed or altered. (Distributing in compiled\n// |    forms without embedded copyright notices is permitted).\n// |\n// | 2. To redistribute modified versions of this code in *any* form\n// |    that bears insufficient indications that the modifications are\n// |    not the work of the original author(s).\n// |\n// | This license applies to this document only, not any other software\n// | that it may be combined with.\n// |\n// +----------------------------------------------------------------------+\n// | Contributors:\n// | https://www.anuko.com/time_tracker/credits.htm\n// +----------------------------------------------------------------------+\n\n// Report all errors except E_NOTICE and E_STRICT.\n// Ignoring E_STRICT is here because PEAR 1.9.4 that we use is not E_STRICT compliant.\nif (!defined('E_STRICT')) define('E_STRICT', 2048);\n// if (!defined('E_DEPRECATED')) define('E_DEPRECATED', 8192);\nerror_reporting(E_ALL & ~E_NOTICE & ~E_STRICT); // & ~E_DEPRECATED);\n// E_ALL tends to change as PHP evloves, therefore we use & here instead of exclusive OR (^).\n\n// Disable displaying errors on screen.\nini_set('display_errors', 'Off');\n\n// require_once('init_auth.php');\ndefine(\"APP_VERSION\", \"1.19.23.5325\");\ndefine(\"APP_DIR\", dirname(__FILE__));\ndefine(\"LIBRARY_DIR\", APP_DIR.\"/WEB-INF/lib\");\ndefine(\"TEMPLATE_DIR\", APP_DIR.\"/WEB-INF/templates\");\n// Date format for database and URI parameters.\ndefine('DB_DATEFORMAT', '%Y-%m-%d');\ndefine('MAX_RANK', 512); // Max user rank.\n\nrequire_once(LIBRARY_DIR.'/common.lib.php');\n\n// Require the configuration file with application settings.\nif (!file_exists(APP_DIR.\"/WEB-INF/config.php\")) die (\"WEB-INF/config.php file does not exist.\");\nrequire_once(\"WEB-INF/config.php\");\n// Check whether DSN is defined.\nif (!defined(\"DSN\")) {\n  die (\"DSN value is not defined. Check your config.php file.\");\n}\n\n// Depending on DSN, require either mysqli or mysql extensions.\nif (strrpos(DSN, 'mysqli://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysqli'); // DSN starts with mysqli:// - require mysqli extension.\n}\nif (strrpos(DSN, 'mysql://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysql');  // DSN starts with mysql:// - require mysql extension.\n}\n\n// Require other extensions.\ncheck_extension('mbstring');\n\n// If auth params are not defined (in config.php) - initialize with an empty array.\nif (!isset($GLOBALS['AUTH_MODULE_PARAMS']) || !is_array($GLOBALS['AUTH_MODULE_PARAMS']))\n  $GLOBALS['AUTH_MODULE_PARAMS'] = array();\n\n// Smarty initialization.\nimport('smarty.Smarty');\n$smarty = new Smarty;\n$smarty->use_sub_dirs = false;\n$smarty->template_dir = TEMPLATE_DIR;\n$smarty->compile_dir  = TEMPLATE_DIR.'_c';\n\n// Note: these 3 settings below used to be in .htaccess file. Moved them here to eliminate \"error 500\" problems\n// with some shared hostings that do not have AllowOverride Options or AllowOverride All in their apache configurations.\n// Change http cache expiration time to 1 minute.\nsession_cache_expire(1);\n\n$phpsessid_ttl = defined('PHPSESSID_TTL') ? PHPSESSID_TTL : 60*60*24;\n// Set lifetime for garbage collection.\nini_set('session.gc_maxlifetime', $phpsessid_ttl);\n// Set PHP session path, if defined to avoid garbage collection interference from other scripts.\nif (defined('PHP_SESSION_PATH') && realpath(PHP_SESSION_PATH)) {\n  ini_set('session.save_path', realpath(PHP_SESSION_PATH));\n  ini_set('session.gc_probability', 1);\n}\n\n// \"tt_\" prefix is to avoid sharing session with other PHP apps that do not name session.\nif (!defined('SESSION_COOKIE_NAME')) define('SESSION_COOKIE_NAME', 'tt_PHPSESSID');\nif (!defined('LOGIN_COOKIE_NAME')) define('LOGIN_COOKIE_NAME', 'tt_login');\n\n// Set session cookie lifetime.\nsession_set_cookie_params($phpsessid_ttl);\nif (isset($_COOKIE[SESSION_COOKIE_NAME])) {\n  // Extend PHP session cookie lifetime by PHPSESSID_TTL (if defined, otherwise 24 hours) \n  // so that users don't have to re-login during this period from now. \n  setcookie(SESSION_COOKIE_NAME, $_COOKIE[SESSION_COOKIE_NAME],  time() + $phpsessid_ttl, '/');\n}\n\n// Start or resume PHP session.\nsession_name(SESSION_COOKIE_NAME);\n@session_start();\n\n// Authorization.\nimport('Auth');\n$auth = Auth::factory(AUTH_MODULE, $GLOBALS['AUTH_MODULE_PARAMS']);\n\n// Some defines we'll need.\n//\ndefine('RESOURCE_DIR', APP_DIR.'/WEB-INF/resources');\ndefine('COOKIE_EXPIRE', 60*60*24*30); // Cookies expire in 30 days.\n\n// Status values for projects, users, etc.\ndefine('ACTIVE', 1);\ndefine('INACTIVE', 0);\n// define('DELETED', -1); // DELETED items should have a NULL status. This allows us to have duplicate NULL status entries with existing indexes.\n\n// Definitions for tracking mode types.\ndefine('MODE_TIME', 0); // Tracking time only. There are no projects or tasks.\ndefine('MODE_PROJECTS', 1); // Tracking time per projects. There are no tasks.\ndefine('MODE_PROJECTS_AND_TASKS', 2); // Tracking time for projects and tasks.\n\n// Definitions of types for time records.\ndefine('TYPE_ALL', 0); // Time record can be specified with either duration or start and finish times.\ndefine('TYPE_START_FINISH', 1); // Time record has start and finish times.\ndefine('TYPE_DURATION', 2); // Time record has only duration, no start and finish times.\n\ndefine('CHARSET', 'utf-8');\n\ndate_default_timezone_set(@date_default_timezone_get());\n\n// Strip auto-inserted extra slashes when magic_quotes ON for PHP versions prior to 5.4.0.\nif (get_magic_quotes_gpc())\n  magic_quotes_off();\n\n// Initialize global objects that are needed for the application.\nimport('html.HttpRequest');\n$request = new ttHttpRequest();\n\nimport('form.ActionErrors');\n$err = new ActionErrors(); // Error messages for user.\n$msg = new ActionErrors(); // Notification messages (not errrors) for user.\n\n// Create an instance of ttUser class. This gets us most of user details.\nimport('ttUser');\n$user = new ttUser(null, $auth->getUserId());\nif ($user->custom_logo) {\n  $smarty->assign('custom_logo', 'img/'.$user->group_id.'.png');\n  $smarty->assign('mobile_custom_logo', '../img/'.$user->group_id.'.png');\n}\n$smarty->assign('user', $user);\n\n// Localization.\nimport('I18n');\n$i18n = new I18n();\n\n// Determine the language to use.\n$lang = $user->lang;\nif (!$lang) {\n  if (defined('LANG_DEFAULT'))\n    $lang = LANG_DEFAULT;\n\n  // If we still do not have the language get it from the browser.\n  if (!$lang) {\n    $lang = $i18n->getBrowserLanguage();\n\n    // Finally - English is the default.\n    if (!$lang) {\n      $lang = 'en';\n    }\n  }\n}\n\n// Load i18n file.\n$i18n->load($lang);\n\n// Assign things for smarty to use in template files.\n$smarty->assign('i18n', $i18n->keys);\n$smarty->assign('err', $err);\n$smarty->assign('msg', $msg);\n\n// TODO: move this code out of here to the files that use it.\n\n// We use js/strftime.js to print dates in JavaScript (in DateField controls).\n// One of our date formats (%d.%m.%Y %a) prints a localized short weekday name (%a).\n// The init_js_date_locale function iniitializes Date.ext.locales array in js/strftime.js for our language\n// so that we could print localized short weekday names.\n//\n// JavaScript usage (see http://hacks.bluesmoon.info/strftime/localisation.html).\n//\n// var d = new Date();\n// d.locale = \"fr\";           // Remember to initialize locale.\n// d.strftime(\"%d.%m.%Y %a\"); // This will output a localized %a as in \"31.05.2013 Ven\"\n\n// Initialize date locale for JavaScript.\ninit_js_date_locale();\n\nfunction init_js_date_locale()\n{\n  global $i18n, $smarty;\n  $lang = $i18n->lang;\n\n  $days = $i18n->weekdayNames;\n  $short_day_names = array();\n  foreach($days as $k => $v) {\n    $short_day_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n\n  /*\n  $months = $i18n->monthNames;\n  $short_month_names = array();\n  foreach ($months as $k => $v) {\n    $short_month_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      A: ['\" . join(\"', '\", $days) . \"'],\n      b: ['\" . join(\"', '\", $short_month_names) . \"'],\n      B: ['\" . join(\"', '\", $months) . \"'],\n      c: '%a %d %b %Y %T %Z',\n      p: ['', ''],\n      P: ['', ''],\n      x: '%Y-%m-%d',\n      X: '%T'\n    };\"; */\n  // We use %a in one of date formats. Therefore, simplified code here (instead of the above block).\n  // %p is also used on the Profile page in 12-hour time format example. Note that %p is not localized.\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      p: ['AM', 'PM']\n    };\";\n  $smarty->assign('js_date_locale', $js);\n}\n", "<?php\n// +----------------------------------------------------------------------+\n// | Anuko Time Tracker\n// +----------------------------------------------------------------------+\n// | Copyright (c) Anuko International Ltd. (https://www.anuko.com)\n// +----------------------------------------------------------------------+\n// | LIBERAL FREEWARE LICENSE: This source code document may be used\n// | by anyone for any purpose, and freely redistributed alone or in\n// | combination with other software, provided that the license is obeyed.\n// |\n// | There are only two ways to violate the license:\n// |\n// | 1. To redistribute this code in source form, with the copyright\n// |    notice or license removed or altered. (Distributing in compiled\n// |    forms without embedded copyright notices is permitted).\n// |\n// | 2. To redistribute modified versions of this code in *any* form\n// |    that bears insufficient indications that the modifications are\n// |    not the work of the original author(s).\n// |\n// | This license applies to this document only, not any other software\n// | that it may be combined with.\n// |\n// +----------------------------------------------------------------------+\n// | Contributors:\n// | https://www.anuko.com/time_tracker/credits.htm\n// +----------------------------------------------------------------------+\n\nrequire_once('initialize.php');\nimport('form.Form');\nimport('form.ActionForm');\nimport('ttReportHelper');\n\n// Access checks.\nif (!(ttAccessAllowed('view_own_reports') || ttAccessAllowed('view_reports') || ttAccessAllowed('view_all_reports')  || ttAccessAllowed('view_client_reports'))) {\n  header('Location: access_denied.php');\n  exit();\n}\n// End of access checks.\n\n// Use custom fields plugin if it is enabled.\nif ($user->isPluginEnabled('cf')) {\n  require_once('plugins/CustomFields.class.php');\n  $custom_fields = new CustomFields();\n}\n\n// Report settings are stored in session bean before we get here.\n$bean = new ActionForm('reportBean', new Form('reportForm'), $request);\n\n// This file handles 2 types of export to a file:\n// 1) xml\n// 2) csv\n// Export to pdf is handled separately in topdf.php.\n$type = $request->getParameter('type');\n\n// Also, there are 2 variations of report: totals only, or normal. Totals only means that the report\n// is grouped by (either date, user, client, project, or task) and user only needs to see subtotals by group.\n$totals_only = $bean->getAttribute('chtotalsonly');\n\n// Obtain items.\n$options = ttReportHelper::getReportOptions($bean);\nif ($totals_only)\n  $subtotals = ttReportHelper::getSubtotals($options);\nelse\n  $items = ttReportHelper::getItems($options);\n\n// Build a string to use as filename for the files being downloaded.\n$filename = strtolower($i18n->get('title.report')).'_'.$bean->mValues['start_date'].'_'.$bean->mValues['end_date'];\n\nheader('Pragma: public'); // This is needed for IE8 to download files over https.\nheader('Content-Type: text/html; charset=utf-8');\nheader('Last-Modified: '.gmdate('D, d M Y H:i:s').' GMT');\nheader('Cache-Control: no-store, no-cache, must-revalidate');\nheader('Cache-Control: post-check=0, pre-check=0', false);\nheader('Cache-Control: private', false);\n\n// Handle 2 cases of possible exports individually.\n\n// 1) entries exported to xml\nif ('xml' == $type) {\n  header('Content-Type: application/xml');\n  header('Content-Disposition: attachment; filename=\"'.$filename.'.xml\"');\n\n  print \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\";\n  print \"<rows>\\n\";\n\n  if ($totals_only) {\n    // Totals only report.\n    $group_by_tag = ttReportHelper::makeGroupByXmlTag($options);\n\n    // Print subtotals.\n    foreach ($subtotals as $subtotal) {\n      print \"<row>\\n\";\n      print \"\\t<\".$group_by_tag.\"><![CDATA[\".$subtotal['name'].\"]]></\".$group_by_tag.\">\\n\";\n      if ($bean->getAttribute('chduration')) {\n        $val = $subtotal['time'];\n        if($val && isTrue('EXPORT_DECIMAL_DURATION'))\n          $val = time_to_decimal($val);\n        print \"\\t<duration><![CDATA[\".$val.\"]]></duration>\\n\";\n      }\n      if ($bean->getAttribute('chunits')) {\n        print \"\\t<units><![CDATA[\".$subtotal['units'].\"]]></units>\\n\";\n      }\n      if ($bean->getAttribute('chcost')) {\n        print \"\\t<cost><![CDATA[\";\n        if ($user->can('manage_invoices') || $user->isClient())\n          print $subtotal['cost'];\n        else\n          print $subtotal['expenses'];\n        print \"]]></cost>\\n\";\n      }\n      print \"</row>\\n\";\n    }\n  } else {\n    // Normal report.\n    foreach ($items as $item) {\n      print \"<row>\\n\";\n\n      print \"\\t<date><![CDATA[\".$item['date'].\"]]></date>\\n\";\n      if ($user->can('view_reports') || $user->can('view_all_reports') || $user->isClient()) print \"\\t<user><![CDATA[\".$item['user'].\"]]></user>\\n\";\n      // User custom fields.\n      if ($custom_fields && $custom_fields->userFields) {\n        foreach ($custom_fields->userFields as $userField) {\n          $field_name = 'user_field_'.$userField['id'];\n          $checkbox_control_name = 'show_'.$field_name;\n          if ($bean->getAttribute($checkbox_control_name)) print \"\\t<$field_name><![CDATA[\".$item[$field_name].\"]]></$field_name>\\n\";\n        }\n      }\n      if ($bean->getAttribute('chclient')) print \"\\t<client><![CDATA[\".$item['client'].\"]]></client>\\n\";\n      if ($bean->getAttribute('chproject')) print \"\\t<project><![CDATA[\".$item['project'].\"]]></project>\\n\";\n      if ($bean->getAttribute('chtask')) print \"\\t<task><![CDATA[\".$item['task'].\"]]></task>\\n\";\n      // Time custom fields.\n      if ($custom_fields && $custom_fields->timeFields) {\n        foreach ($custom_fields->timeFields as $timeField) {\n          $field_name = 'time_field_'.$timeField['id'];\n          $checkbox_control_name = 'show_'.$field_name;\n          if ($bean->getAttribute($checkbox_control_name)) print \"\\t<$field_name><![CDATA[\".$item[$field_name].\"]]></$field_name>\\n\";\n        }\n      }\n      if ($bean->getAttribute('chstart')) print \"\\t<start><![CDATA[\".$item['start'].\"]]></start>\\n\";\n      if ($bean->getAttribute('chfinish')) print \"\\t<finish><![CDATA[\".$item['finish'].\"]]></finish>\\n\";\n      if ($bean->getAttribute('chduration')) {\n        $duration = $item['duration'];\n        if($duration && isTrue('EXPORT_DECIMAL_DURATION'))\n          $duration = time_to_decimal($duration);\n          print \"\\t<duration><![CDATA[\".$duration.\"]]></duration>\\n\";\n      }\n      if ($bean->getAttribute('chunits')) print \"\\t<units><![CDATA[\".$item['units'].\"]]></units>\\n\";\n      if ($bean->getAttribute('chnote')) print \"\\t<note><![CDATA[\".$item['note'].\"]]></note>\\n\";\n      if ($bean->getAttribute('chcost')) {\n        print \"\\t<cost><![CDATA[\";\n        if ($user->can('manage_invoices') || $user->isClient())\n          print $item['cost'];\n        else\n          print $item['expense'];\n        print \"]]></cost>\\n\";\n      }\n      if ($bean->getAttribute('chapproved')) print \"\\t<approved><![CDATA[\".$item['approved'].\"]]></approved>\\n\";\n      if ($bean->getAttribute('chpaid')) print \"\\t<paid><![CDATA[\".$item['paid'].\"]]></paid>\\n\";\n      if ($bean->getAttribute('chip')) {\n        $ip = $item['modified'] ? $item['modified_ip'].' '.$item['modified'] : $item['created_ip'].' '.$item['created'];\n        print \"\\t<ip><![CDATA[\".$ip.\"]]></ip>\\n\";\n      }\n      if ($bean->getAttribute('chinvoice')) print \"\\t<invoice><![CDATA[\".$item['invoice'].\"]]></invoice>\\n\";\n      if ($bean->getAttribute('chtimesheet')) print \"\\t<timesheet><![CDATA[\".$item['timesheet_name'].\"]]></timesheet>\\n\";\n\n      print \"</row>\\n\";\n    }\n  }\n\n  print \"</rows>\";\n}\n\n// 2) entries exported to csv\nif ('csv' == $type) {\n  header('Content-Type: application/csv');\n  header('Content-Disposition: attachment; filename=\"'.$filename.'.csv\"');\n\n  // Print UTF8 BOM first to identify encoding.\n  $bom = chr(239).chr(187).chr(191); // 0xEF 0xBB 0xBF in the beginning of the file is UTF8 BOM.\n  print $bom; // Without this Excel does not display UTF8 characters properly.\n\n  if ($totals_only) {\n    // Totals only report.\n    $group_by_header = ttReportHelper::makeGroupByHeader($options);\n\n    // Print headers.\n    print '\"'.$group_by_header.'\"';\n    if ($bean->getAttribute('chduration')) print ',\"'.$i18n->get('label.duration').'\"';\n    if ($bean->getAttribute('chunits')) print ',\"'.$i18n->get('label.work_units_short').'\"';\n    if ($bean->getAttribute('chcost')) print ',\"'.$i18n->get('label.cost').'\"';\n    print \"\\n\";\n\n    // Print subtotals.\n    foreach ($subtotals as $subtotal) {\n      print '\"'.$subtotal['name'].'\"';\n      if ($bean->getAttribute('chduration')) {\n        $val = $subtotal['time'];\n        if($val && isTrue('EXPORT_DECIMAL_DURATION'))\n          $val = time_to_decimal($val);\n        print ',\"'.$val.'\"';\n      }\n      if ($bean->getAttribute('chunits')) print ',\"'.$subtotal['units'].'\"';\n      if ($bean->getAttribute('chcost')) {\n        if ($user->can('manage_invoices') || $user->isClient())\n          print ',\"'.$subtotal['cost'].'\"';\n        else\n          print ',\"'.$subtotal['expenses'].'\"';\n      }\n      print \"\\n\";\n    }\n  } else {\n    // Normal report. Print headers.\n    print '\"'.$i18n->get('label.date').'\"';\n    if ($user->can('view_reports') || $user->can('view_all_reports') || $user->isClient()) print ',\"'.$i18n->get('label.user').'\"';\n    // User custom field labels.\n    if ($custom_fields && $custom_fields->userFields) {\n      foreach ($custom_fields->userFields as $userField) {\n        $field_name = 'user_field_'.$userField['id'];\n        $checkbox_control_name = 'show_'.$field_name;\n        if ($bean->getAttribute($checkbox_control_name)) print ',\"'.ttNeutralizeForCsv($userField['label']).'\"';\n      }\n    }\n    if ($bean->getAttribute('chclient')) print ',\"'.$i18n->get('label.client').'\"';\n    if ($bean->getAttribute('chproject')) print ',\"'.$i18n->get('label.project').'\"';\n    if ($bean->getAttribute('chtask')) print ',\"'.$i18n->get('label.task').'\"';\n    // Time custom field labels.\n    if ($custom_fields && $custom_fields->timeFields) {\n      foreach ($custom_fields->timeFields as $timeField) {\n        $field_name = 'time_field_'.$timeField['id'];\n        $checkbox_control_name = 'show_'.$field_name;\n        if ($bean->getAttribute($checkbox_control_name)) print ',\"'.ttNeutralizeForCsv($timeField['label']).'\"';\n      }\n    }\n    if ($bean->getAttribute('chstart')) print ',\"'.$i18n->get('label.start').'\"';\n    if ($bean->getAttribute('chfinish')) print ',\"'.$i18n->get('label.finish').'\"';\n    if ($bean->getAttribute('chduration')) print ',\"'.$i18n->get('label.duration').'\"';\n    if ($bean->getAttribute('chunits')) print ',\"'.$i18n->get('label.work_units_short').'\"';\n    if ($bean->getAttribute('chnote')) print ',\"'.$i18n->get('label.note').'\"';\n    if ($bean->getAttribute('chcost')) print ',\"'.$i18n->get('label.cost').'\"';\n    if ($bean->getAttribute('chapproved')) print ',\"'.$i18n->get('label.approved').'\"';\n    if ($bean->getAttribute('chpaid')) print ',\"'.$i18n->get('label.paid').'\"';\n    if ($bean->getAttribute('chip')) print ',\"'.$i18n->get('label.ip').'\"';\n    if ($bean->getAttribute('chinvoice')) print ',\"'.$i18n->get('label.invoice').'\"';\n    if ($bean->getAttribute('chtimesheet')) print ',\"'.$i18n->get('label.timesheet').'\"';\n    print \"\\n\";\n\n    // Print items.\n    foreach ($items as $item) {\n      print '\"'.$item['date'].'\"';\n      if ($user->can('view_reports') || $user->can('view_all_reports') || $user->isClient()) print ',\"'.ttNeutralizeForCsv($item['user']).'\"';\n      // User custom fields.\n      if ($custom_fields && $custom_fields->userFields) {\n        foreach ($custom_fields->userFields as $userField) {\n          $field_name = 'user_field_'.$userField['id'];\n          $checkbox_control_name = 'show_'.$field_name;\n          if ($bean->getAttribute($checkbox_control_name)) print ',\"'.ttNeutralizeForCsv($item[$field_name]).'\"';\n        }\n      }\n      if ($bean->getAttribute('chclient')) print ',\"'.ttNeutralizeForCsv($item['client']).'\"';\n      if ($bean->getAttribute('chproject')) print ',\"'.ttNeutralizeForCsv($item['project']).'\"';\n      if ($bean->getAttribute('chtask')) print ',\"'.ttNeutralizeForCsv($item['task']).'\"';\n      // Time custom fields.\n      if ($custom_fields && $custom_fields->timeFields) {\n        foreach ($custom_fields->timeFields as $timeField) {\n          $field_name = 'time_field_'.$timeField['id'];\n          $checkbox_control_name = 'show_'.$field_name;\n          if ($bean->getAttribute($checkbox_control_name)) print ',\"'.ttNeutralizeForCsv($item[$field_name]).'\"';\n        }\n      }\n      if ($bean->getAttribute('chstart')) print ',\"'.$item['start'].'\"';\n      if ($bean->getAttribute('chfinish')) print ',\"'.$item['finish'].'\"';\n      if ($bean->getAttribute('chduration')) {\n        $val = $item['duration'];\n        if($val && isTrue('EXPORT_DECIMAL_DURATION'))\n          $val = time_to_decimal($val);\n        print ',\"'.$val.'\"';\n      }\n      if ($bean->getAttribute('chunits')) print ',\"'.$item['units'].'\"';\n      if ($bean->getAttribute('chnote')) print ',\"'.ttNeutralizeForCsv($item['note']).'\"';\n      if ($bean->getAttribute('chcost')) {\n        if ($user->can('manage_invoices') || $user->isClient())\n          print ',\"'.$item['cost'].'\"';\n        else\n          print ',\"'.$item['expense'].'\"';\n      }\n      if ($bean->getAttribute('chapproved')) print ',\"'.$item['approved'].'\"';\n      if ($bean->getAttribute('chpaid')) print ',\"'.$item['paid'].'\"';\n      if ($bean->getAttribute('chip')) {\n        $ip = $item['modified'] ? $item['modified_ip'].' '.$item['modified'] : $item['created_ip'].' '.$item['created'];\n        print ',\"'.$ip.'\"';\n      }\n      if ($bean->getAttribute('chinvoice')) print ',\"'.ttNeutralizeForCsv($item['invoice']).'\"';\n      if ($bean->getAttribute('chtimesheet')) print ',\"'.ttNeutralizeForCsv($item['timesheet_name']).'\"';\n      print \"\\n\";\n    }\n  }\n}\n"], "filenames": ["WEB-INF/lib/common.lib.php", "initialize.php", "tofile.php"], "buggy_code_start_loc": [461, 40, 221], "buggy_code_end_loc": [461, 41, 295], "fixing_code_start_loc": [462, 40, 221], "fixing_code_end_loc": [471, 41, 295], "type": "CWE-1236", "message": "In Anuko Time Tracker before verion 1.19.23.5325, due to not properly filtered user input a CSV export of a report could contain cells that are treated as formulas by spreadsheet software (for example, when a cell value starts with an equal sign). This is fixed in version 1.19.23.5325.", "other": {"cve": {"id": "CVE-2020-15255", "sourceIdentifier": "security-advisories@github.com", "published": "2020-10-16T17:15:12.137", "lastModified": "2021-11-18T16:17:37.940", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Anuko Time Tracker before verion 1.19.23.5325, due to not properly filtered user input a CSV export of a report could contain cells that are treated as formulas by spreadsheet software (for example, when a cell value starts with an equal sign). This is fixed in version 1.19.23.5325."}, {"lang": "es", "value": "En Anuko Time Tracker versiones anteriores a 1.19.23.5325, debido a que la entrada del usuario no se filtr\u00f3 apropiadamente, una exportaci\u00f3n CSV de un reporte podr\u00eda contener celdas que son tratadas como f\u00f3rmulas por el software de hoja de c\u00e1lculo (por ejemplo, cuando el valor de una celda comienza con un signo igual).&#xa0;Esto es corregido en la versi\u00f3n 1.19.23.5325"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.3, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1236"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:anuko:time_tracker:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.19.23.5325", "matchCriteriaId": "04BA29E2-737C-443F-8C79-BC188084CE6F"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/159996/Anuko-Time-Tracker-1.19.23.5325-CSV-Injection.html", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/anuko/timetracker/commit/d9472904361495f318c9d0294ffd28acaaeae42f", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/anuko/timetracker/security/advisories/GHSA-prjf-9mgh-8fpv", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/49027", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/anuko/timetracker/commit/d9472904361495f318c9d0294ffd28acaaeae42f"}}