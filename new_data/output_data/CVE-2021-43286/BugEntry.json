{"buggy_code": ["/*\n * Copyright 2021 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.util.command;\n\nimport com.thoughtworks.go.config.ConfigAttributeValue;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.client.utils.URIBuilder;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.regex.Pattern;\n\nimport static com.thoughtworks.go.util.ExceptionUtils.bombIfNull;\nimport static org.apache.commons.lang3.StringUtils.isBlank;\n\n@ConfigAttributeValue(fieldName = \"url\")\npublic class UrlArgument extends CommandArgument {\n    private static final String URL_DUMB_VALIDATION_REGEX = \"^[a-zA-Z0-9/].*\";\n    private static final Pattern pattern = Pattern.compile(URL_DUMB_VALIDATION_REGEX);\n\n    protected String url;\n\n    public UrlArgument(String url) {\n        bombIfNull(url, \"Url cannot be null.\");\n        this.url = url;\n    }\n\n    @Override\n    public String originalArgument() {\n        return url;\n    }\n\n    //TODO: Change this later to use URIBuilder\n    @Override\n    public String forDisplay() {\n        try {\n            URI uri = new URI(sanitizeUrl());\n            if (uri.getUserInfo() != null) {\n                uri = new URI(uri.getScheme(), clean(uri.getScheme(), uri.getUserInfo()), uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment());\n            }\n            return uri.toString();\n        } catch (URISyntaxException e) {\n            return url;\n        }\n    }\n\n    private String clean(String scheme, String userInfo) {\n        if (userInfo.contains(\":\")) {\n            return userInfo.replaceFirst(\":.*\", \":******\");\n        } else if (\"ssh\".equals(scheme) || \"svn+ssh\".equals(scheme)) {\n            return userInfo;\n        }\n        return \"******\";\n    }\n\n    @Override\n    public String forCommandLine() {\n        return this.url;\n    }\n\n    protected String sanitizeUrl() {\n        return this.url;\n    }\n\n\n    public static UrlArgument create(String url) {\n        return new UrlArgument(url);\n    }\n\n    @Override\n    public String replaceSecretInfo(String line) {\n        if (StringUtils.isBlank(line)) {\n            return line;\n        }\n\n        if (isBlank(this.url)) {\n            return line;\n        }\n\n        try {\n            final URIBuilder uriBuilder = new URIBuilder(this.url).setPath(null).setCustomQuery(null).setFragment(null);\n            final UrlUserInfo urlUserInfo = new UrlUserInfo(uriBuilder.getUserInfo());\n            if (uriBuilder.getUserInfo() != null) {\n                line = line.replace(uriBuilder.getUserInfo(), urlUserInfo.maskedUserInfo());\n            }\n        } catch (URISyntaxException e) {\n            //Ignore as url is not according to URI specs\n        }\n\n        return line;\n    }\n\n    @Override\n    public boolean equal(CommandArgument that) {\n        //BUG #3276 - on windows svn info includes a password in svn+ssh\n        if (url.startsWith(\"svn+ssh\")) {\n            return this.originalArgument().equals(that.originalArgument());\n        }\n        return cleanPath(this).equals(cleanPath(that));\n    }\n\n    private String cleanPath(CommandArgument commandArgument) {\n        String path = commandArgument.originalArgument();\n        if (path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n        return path;\n    }\n\n    public String withoutCredentials() {\n        try {\n            return new URIBuilder(this.sanitizeUrl()).setUserInfo(null).build().toString();\n        } catch (URISyntaxException e) {\n            return url;\n        }\n    }\n\n    public boolean isValidURLOrLocalPath() {\n        return pattern.matcher(url).matches();\n    }\n}\n", "/*\n * Copyright 2021 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.git;\n\nimport com.thoughtworks.go.config.*;\nimport com.thoughtworks.go.config.materials.*;\nimport com.thoughtworks.go.domain.materials.MaterialConfig;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.ReflectionUtil;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.thoughtworks.go.helper.MaterialConfigsMother.git;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass GitMaterialConfigTest {\n    @Test\n    void shouldBePasswordAwareMaterial() {\n        assertTrue(PasswordAwareMaterial.class.isAssignableFrom(GitMaterialConfig.class));\n    }\n\n    @Test\n    void shouldSetConfigAttributes() {\n        GitMaterialConfig gitMaterialConfig = git(\"\");\n\n        Map<String, String> map = new HashMap<>();\n        map.put(GitMaterialConfig.URL, \"url\");\n        map.put(GitMaterialConfig.BRANCH, \"some-branch\");\n        map.put(GitMaterialConfig.SHALLOW_CLONE, \"true\");\n        map.put(ScmMaterialConfig.FOLDER, \"folder\");\n        map.put(ScmMaterialConfig.AUTO_UPDATE, null);\n        map.put(ScmMaterialConfig.FILTER, \"/root,/**/*.help\");\n        map.put(AbstractMaterialConfig.MATERIAL_NAME, \"material-name\");\n\n        gitMaterialConfig.setConfigAttributes(map);\n\n        assertEquals(\"url\", gitMaterialConfig.getUrl());\n        assertEquals(\"folder\", gitMaterialConfig.getFolder());\n        assertEquals(\"some-branch\", gitMaterialConfig.getBranch());\n        assertEquals(new CaseInsensitiveString(\"material-name\"), gitMaterialConfig.getName());\n        assertFalse(gitMaterialConfig.isAutoUpdate());\n        assertTrue(gitMaterialConfig.isShallowClone());\n        assertEquals(new Filter(new IgnoredFiles(\"/root\"), new IgnoredFiles(\"/**/*.help\")), gitMaterialConfig.filter());\n    }\n\n    @Test\n    void setConfigAttributes_shouldUpdatePasswordWhenPasswordChangedBooleanChanged() throws Exception {\n        GitMaterialConfig gitMaterialConfig = git(\"\");\n        Map<String, String> map = new HashMap<>();\n        map.put(GitMaterialConfig.PASSWORD, \"secret\");\n        map.put(GitMaterialConfig.PASSWORD_CHANGED, \"1\");\n\n        gitMaterialConfig.setConfigAttributes(map);\n        assertNull(ReflectionUtil.getField(gitMaterialConfig, \"password\"));\n        assertEquals(\"secret\", gitMaterialConfig.getPassword());\n        assertEquals(new GoCipher().encrypt(\"secret\"), gitMaterialConfig.getEncryptedPassword());\n\n        //Dont change\n        map.put(GitMaterialConfig.PASSWORD, \"Hehehe\");\n        map.put(GitMaterialConfig.PASSWORD_CHANGED, \"0\");\n        gitMaterialConfig.setConfigAttributes(map);\n\n        assertNull(ReflectionUtil.getField(gitMaterialConfig, \"password\"));\n        assertEquals(\"secret\", gitMaterialConfig.getPassword());\n        assertEquals(new GoCipher().encrypt(\"secret\"), gitMaterialConfig.getEncryptedPassword());\n\n        map.put(GitMaterialConfig.PASSWORD, \"\");\n        map.put(GitMaterialConfig.PASSWORD_CHANGED, \"1\");\n        gitMaterialConfig.setConfigAttributes(map);\n\n        assertNull(gitMaterialConfig.getPassword());\n        assertNull(gitMaterialConfig.getEncryptedPassword());\n    }\n\n    @Test\n    void byDefaultShallowCloneShouldBeOff() {\n        assertFalse(git(\"http://url\", \"foo\").isShallowClone());\n        assertFalse(git(\"http://url\", \"foo\", false).isShallowClone());\n        assertFalse(git(\"http://url\", \"foo\", null).isShallowClone());\n        assertTrue(git(\"http://url\", \"foo\", true).isShallowClone());\n    }\n\n    @Test\n    void shouldReturnIfAttributeMapIsNull() {\n        GitMaterialConfig gitMaterialConfig = git(\"\");\n        gitMaterialConfig.setConfigAttributes(null);\n        assertEquals(git(\"\"), gitMaterialConfig);\n    }\n\n    @Test\n    void shouldReturnTheUrl() {\n        String url = \"git@github.com/my/repo\";\n        GitMaterialConfig config = git(url);\n\n        assertEquals(url, config.getUrl());\n    }\n\n    @Test\n    void shouldReturnNullIfUrlForMaterialNotSpecified() {\n        GitMaterialConfig config = git();\n\n        assertNull(config.getUrl());\n    }\n\n    @Test\n    void shouldSetUrlForAMaterial() {\n        String url = \"git@github.com/my/repo\";\n        GitMaterialConfig config = git();\n\n        config.setUrl(url);\n\n        assertEquals(url, config.getUrl());\n    }\n\n    @Test\n    void shouldHandleNullWhenSettingUrlForAMaterial() {\n        GitMaterialConfig config = git();\n\n        config.setUrl(null);\n\n        assertNull(config.getUrl());\n    }\n\n    @Test\n    void shouldHandleNullUrlAtTheTimeOfGitMaterialConfigCreation() {\n        GitMaterialConfig config = git(null);\n\n        assertNull(config.getUrl());\n    }\n\n    @Test\n    void shouldHandleNullBranchWhileSettingConfigAttributes() {\n        GitMaterialConfig gitMaterialConfig = git(\"http://url\", \"foo\");\n        gitMaterialConfig.setConfigAttributes(Collections.singletonMap(GitMaterialConfig.BRANCH, null));\n        assertEquals(\"master\", gitMaterialConfig.getBranch());\n    }\n\n    @Test\n    void shouldHandleEmptyBranchWhileSettingConfigAttributes() {\n        GitMaterialConfig gitMaterialConfig = git(\"http://url\", \"foo\");\n        gitMaterialConfig.setConfigAttributes(Collections.singletonMap(GitMaterialConfig.BRANCH, \"     \"));\n        assertEquals(\"master\", gitMaterialConfig.getBranch());\n    }\n\n    @Nested\n    class Validate {\n        @Test\n        void allowsBlankBranch() {\n            assertFalse(validating(git(\"/my/repo\", null)).errors().present());\n            assertFalse(validating(git(\"/my/repo\", \"\")).errors().present());\n            assertFalse(validating(git(\"/my/repo\", \" \")).errors().present());\n        }\n\n        @Test\n        void rejectsBranchWithWildcard() {\n            assertEquals(\"Branch names may not contain '*'\", validating(git(\"/foo\", \"branch-*\")).\n                    errors().on(GitMaterialConfig.BRANCH));\n        }\n\n        @Test\n        void rejectsMalformedRefSpec() {\n            assertEquals(\"Refspec is missing a source ref\",\n                    String.join(\";\", validating(git(\"/foo\", \":a\")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n\n            assertEquals(\"Refspec is missing a source ref\",\n                    String.join(\";\", validating(git(\"/foo\", \"   :b\")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n\n            assertEquals(\"Refspec is missing a destination ref\",\n                    String.join(\";\", validating(git(\"/foo\", \"refs/foo: \")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n\n            assertEquals(\"Refspec is missing a destination ref\",\n                    String.join(\";\", validating(git(\"/foo\", \"refs/bar:\")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n\n            assertEquals(\"Refspec is missing a source ref;Refspec is missing a destination ref\",\n                    String.join(\";\", validating(git(\"/foo\", \":\")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n\n            assertEquals(\"Refspec is missing a source ref;Refspec is missing a destination ref\",\n                    String.join(\";\", validating(git(\"/foo\", \" : \")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n\n            assertEquals(\"Refspec source must be an absolute ref (must start with `refs/`)\",\n                    String.join(\";\", validating(git(\"/foo\", \"a:b\")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n\n            assertEquals(\"Refspecs may not contain wildcards; source and destination refs must be exact\",\n                    String.join(\";\", validating(git(\"/foo\", \"refs/heads/*:my-branch\")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n\n            assertEquals(\"Refspecs may not contain wildcards; source and destination refs must be exact\",\n                    String.join(\";\", validating(git(\"/foo\", \"refs/heads/foo:branches/*\")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n\n            assertEquals(\"Refspecs may not contain wildcards; source and destination refs must be exact\",\n                    String.join(\";\", validating(git(\"/foo\", \"refs/heads/*:branches/*\")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n        }\n\n        @Test\n        void acceptsValidRefSpecs() {\n            assertTrue(validating(git(\"/foo\", \"refs/pull/123/head:pr-123\")).errors().isEmpty());\n            assertTrue(validating(git(\"/foo\", \"refs/pull/123/head:refs/my-prs/123\")).errors().isEmpty());\n        }\n\n        @Test\n        void shouldEnsureUrlIsNotBlank() {\n            assertEquals(\"URL cannot be blank\", validating(git(\"\")).errors().on(GitMaterialConfig.URL));\n        }\n\n        @Test\n        void shouldEnsureUserNameIsNotProvidedInBothUrlAsWellAsAttributes() {\n            GitMaterialConfig gitMaterialConfig = git(\"http://bob:pass@example.com\");\n            gitMaterialConfig.setUserName(\"user\");\n\n            assertEquals(\"Ambiguous credentials, must be provided either in URL or as attributes.\", validating(gitMaterialConfig).errors().on(GitMaterialConfig.URL));\n        }\n\n        @Test\n        void shouldEnsurePasswordIsNotProvidedInBothUrlAsWellAsAttributes() {\n            GitMaterialConfig gitMaterialConfig = git(\"http://bob:pass@example.com\");\n            gitMaterialConfig.setPassword(\"pass\");\n\n            assertEquals(\"Ambiguous credentials, must be provided either in URL or as attributes.\", validating(gitMaterialConfig).errors().on(GitMaterialConfig.URL));\n        }\n\n        @Test\n        void shouldIgnoreInvalidUrlForCredentialValidation() {\n            GitMaterialConfig gitMaterialConfig = git(\"http://bob:pass@example.com##dobule-hash-is-invalid-in-url\");\n            gitMaterialConfig.setUserName(\"user\");\n            gitMaterialConfig.setPassword(\"password\");\n\n            assertFalse(validating(gitMaterialConfig).errors().containsKey(GitMaterialConfig.URL));\n        }\n\n        @Test\n        void shouldBeValidWhenCredentialsAreProvidedOnlyInUrl() {\n            assertFalse(validating(git(\"http://bob:pass@example.com\")).errors().containsKey(GitMaterialConfig.URL));\n        }\n\n        @Test\n        void shouldBeValidWhenCredentialsAreProvidedOnlyAsAttributes() {\n            GitMaterialConfig gitMaterialConfig = git(\"http://example.com\");\n            gitMaterialConfig.setUserName(\"bob\");\n            gitMaterialConfig.setPassword(\"badger\");\n\n            assertFalse(validating(gitMaterialConfig).errors().containsKey(GitMaterialConfig.URL));\n        }\n\n        @Test\n        void rejectsObviouslyWrongURL() {\n            assertTrue(validating(git(\"-url-not-starting-with-an-alphanumeric-character\")).errors().containsKey(GitMaterialConfig.URL));\n            assertTrue(validating(git(\"_url-not-starting-with-an-alphanumeric-character\")).errors().containsKey(GitMaterialConfig.URL));\n            assertTrue(validating(git(\"@url-not-starting-with-an-alphanumeric-character\")).errors().containsKey(GitMaterialConfig.URL));\n\n            assertFalse(validating(git(\"url-starting-with-an-alphanumeric-character\")).errors().containsKey(GitMaterialConfig.URL));\n        }\n\n        private GitMaterialConfig validating(GitMaterialConfig git) {\n            git.validate(new ConfigSaveValidationContext(null));\n            return git;\n        }\n    }\n\n    @Nested\n    class ValidateTree {\n        @Test\n        void shouldCallValidate() {\n            final MaterialConfig materialConfig = spy(git(\"https://example.repo\"));\n            final ValidationContext validationContext = mockValidationContextForSecretParams();\n\n            materialConfig.validateTree(validationContext);\n\n            verify(materialConfig).validate(validationContext);\n        }\n\n        @Test\n        void shouldFailIfEncryptedPasswordIsIncorrect() {\n            GitMaterialConfig gitMaterialConfig = git(\"http://example.com\");\n            gitMaterialConfig.setEncryptedPassword(\"encryptedPassword\");\n\n            final boolean validationResult = gitMaterialConfig.validateTree(new ConfigSaveValidationContext(null));\n\n            assertFalse(validationResult);\n            assertEquals(\"Encrypted password value for GitMaterial with url 'http://example.com' is \" +\n                            \"invalid. This usually happens when the cipher text is modified to have an invalid value.\",\n                    gitMaterialConfig.errors().on(\"encryptedPassword\"));\n        }\n    }\n\n    @Nested\n    class Equals {\n        @Test\n        void shouldBeEqualIfObjectsHaveSameUrlBranchAndSubModuleFolder() {\n            final GitMaterialConfig material_1 = git(\"http://example.com\", \"master\");\n            material_1.setUserName(\"bob\");\n            material_1.setSubmoduleFolder(\"/var/lib/git\");\n\n            final GitMaterialConfig material_2 = git(\"http://example.com\", \"master\");\n            material_2.setUserName(\"alice\");\n            material_2.setSubmoduleFolder(\"/var/lib/git\");\n\n            assertTrue(material_1.equals(material_2));\n        }\n    }\n\n    @Nested\n    class Fingerprint {\n        @Test\n        void shouldGenerateFingerprintForGivenMaterialUrlAndBranch() {\n            GitMaterialConfig gitMaterialConfig = git(\"https://bob:pass@github.com/gocd\", \"feature\");\n\n            assertEquals(\"755da7fb7415c8674bdf5f8a4ba48fc3e071e5de429b1308ccf8949d215bdb08\", gitMaterialConfig.getFingerprint());\n        }\n    }\n\n    private ValidationContext mockValidationContextForSecretParams(SecretConfig... secretConfigs) {\n        final ValidationContext validationContext = mock(ValidationContext.class);\n        final CruiseConfig cruiseConfig = mock(CruiseConfig.class);\n        when(validationContext.getCruiseConfig()).thenReturn(cruiseConfig);\n        when(cruiseConfig.getSecretConfigs()).thenReturn(new SecretConfigs(secretConfigs));\n        return validationContext;\n    }\n}\n", "/*\n * Copyright 2021 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.mercurial;\n\nimport com.thoughtworks.go.config.*;\nimport com.thoughtworks.go.config.materials.*;\nimport com.thoughtworks.go.domain.materials.MaterialConfig;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.ReflectionUtil;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.thoughtworks.go.config.materials.AbstractMaterialConfig.MATERIAL_NAME;\nimport static com.thoughtworks.go.config.materials.ScmMaterialConfig.FOLDER;\nimport static com.thoughtworks.go.config.materials.ScmMaterialConfig.URL;\nimport static com.thoughtworks.go.helper.MaterialConfigsMother.git;\nimport static com.thoughtworks.go.helper.MaterialConfigsMother.hg;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\nclass HgMaterialConfigTest {\n    private HgMaterialConfig hgMaterialConfig;\n\n    @BeforeEach\n    void setUp() {\n        hgMaterialConfig = hg(\"\", null);\n    }\n\n    @Test\n    void shouldBePasswordAwareMaterial() {\n        assertThat(hgMaterialConfig).isInstanceOf(PasswordAwareMaterial.class);\n    }\n\n    @Test\n    void shouldSetConfigAttributes() {\n        HgMaterialConfig hgMaterialConfig = hg(\"\", null);\n\n        Map<String, String> map = new HashMap<>();\n        map.put(HgMaterialConfig.URL, \"url\");\n        map.put(ScmMaterialConfig.FOLDER, \"folder\");\n        map.put(ScmMaterialConfig.AUTO_UPDATE, \"0\");\n        map.put(ScmMaterialConfig.FILTER, \"/root,/**/*.help\");\n        map.put(AbstractMaterialConfig.MATERIAL_NAME, \"material-name\");\n\n        hgMaterialConfig.setConfigAttributes(map);\n\n        assertThat(hgMaterialConfig.getUrl()).isEqualTo(\"url\");\n        assertThat(hgMaterialConfig.getFolder()).isEqualTo(\"folder\");\n        assertThat(hgMaterialConfig.getName()).isEqualTo(new CaseInsensitiveString(\"material-name\"));\n        assertThat(hgMaterialConfig.isAutoUpdate()).isFalse();\n        assertThat(hgMaterialConfig.filter()).isEqualTo(new Filter(new IgnoredFiles(\"/root\"), new IgnoredFiles(\"/**/*.help\")));\n    }\n\n    @Test\n    void setConfigAttributes_shouldUpdatePasswordWhenPasswordChangedBooleanChanged() throws Exception {\n        HgMaterialConfig hgMaterialConfig = hg();\n        Map<String, String> map = new HashMap<>();\n        map.put(HgMaterialConfig.PASSWORD, \"secret\");\n        map.put(HgMaterialConfig.PASSWORD_CHANGED, \"1\");\n\n        hgMaterialConfig.setConfigAttributes(map);\n        assertThat(ReflectionUtil.getField(hgMaterialConfig, \"password\")).isNull();\n        assertThat(hgMaterialConfig.getPassword()).isEqualTo(\"secret\");\n        assertThat(hgMaterialConfig.getEncryptedPassword()).isEqualTo(new GoCipher().encrypt(\"secret\"));\n\n        //Dont change\n        map.put(HgMaterialConfig.PASSWORD, \"Hehehe\");\n        map.put(HgMaterialConfig.PASSWORD_CHANGED, \"0\");\n        hgMaterialConfig.setConfigAttributes(map);\n\n        assertThat(ReflectionUtil.getField(hgMaterialConfig, \"password\")).isNull();\n        assertThat(hgMaterialConfig.getPassword()).isEqualTo(\"secret\");\n        assertThat(hgMaterialConfig.getEncryptedPassword()).isEqualTo(new GoCipher().encrypt(\"secret\"));\n\n        map.put(HgMaterialConfig.PASSWORD, \"\");\n        map.put(HgMaterialConfig.PASSWORD_CHANGED, \"1\");\n        hgMaterialConfig.setConfigAttributes(map);\n\n        assertThat(hgMaterialConfig.getPassword()).isNull();\n        assertThat(hgMaterialConfig.getEncryptedPassword()).isNull();\n    }\n\n\n    @Test\n    void validate_shouldEnsureUrlIsNotBlank() {\n        HgMaterialConfig hgMaterialConfig = hg(\"\", null);\n        hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n        assertThat(hgMaterialConfig.errors().on(HgMaterialConfig.URL)).isEqualTo(\"URL cannot be blank\");\n    }\n\n    @Test\n    void shouldReturnIfAttributeMapIsNull() {\n        HgMaterialConfig hgMaterialConfig = hg(\"\", null);\n\n        hgMaterialConfig.setConfigAttributes(null);\n\n        assertThat(hgMaterialConfig).isEqualTo(hg(\"\", null));\n    }\n\n    @Test\n    void shouldReturnTheUrl() {\n        String url = \"git@github.com/my/repo\";\n        HgMaterialConfig config = hg(url, null);\n\n        assertThat(config.getUrl()).isEqualTo(url);\n    }\n\n    @Test\n    void shouldReturnNullIfUrlForMaterialNotSpecified() {\n        HgMaterialConfig config = hg();\n\n        assertThat(config.getUrl()).isNull();\n    }\n\n    @Test\n    void shouldSetUrlForAMaterial() {\n        String url = \"git@github.com/my/repo\";\n        HgMaterialConfig config = hg();\n\n        config.setUrl(url);\n\n        assertThat(config.getUrl()).isEqualTo(url);\n    }\n\n    @Test\n    void shouldHandleNullWhenSettingUrlForAMaterial() {\n        HgMaterialConfig config = hg();\n\n        config.setUrl(null);\n\n        assertThat(config.getUrl()).isNull();\n    }\n\n    @Nested\n    class Equals {\n        @Test\n        void shouldBeEqualIfObjectsHaveSameUrlBranch() {\n            final HgMaterialConfig material_1 = hg(\"http://example.com\", \"master\");\n            material_1.setUserName(\"bob\");\n            material_1.setBranchAttribute(\"feature\");\n\n            final HgMaterialConfig material_2 = hg(\"http://example.com\", \"master\");\n            material_2.setUserName(\"alice\");\n            material_2.setBranchAttribute(\"feature\");\n\n            assertThat(material_1.equals(material_2)).isTrue();\n        }\n    }\n\n    @Nested\n    class Fingerprint {\n        @Test\n        void shouldGenerateFingerprintForGivenMaterialUrl() {\n            HgMaterialConfig hgMaterialConfig = hg(\"https://bob:pass@github.com/gocd#feature\", \"dest\");\n\n            assertThat(hgMaterialConfig.getFingerprint()).isEqualTo(\"d84d91f37da0367a9bd89fff0d48638f5c1bf993d637735ec26f13c21c23da19\");\n        }\n\n        @Test\n        void shouldConsiderBranchWhileGeneratingFingerprint_IfBranchSpecifiedAsAnAttribute() {\n            HgMaterialConfig hgMaterialConfig = hg(\"https://bob:pass@github.com/gocd\", \"dest\");\n            hgMaterialConfig.setBranchAttribute(\"feature\");\n\n            assertThat(hgMaterialConfig.getFingerprint()).isEqualTo(\"db13278ed2b804fc5664361103bcea3d7f5106879683085caed4311aa4d2f888\");\n        }\n\n        @Test\n        void branchInUrlShouldGenerateFingerprintWhichIsOtherFromBranchInAttribute() {\n            HgMaterialConfig hgMaterialConfigWithBranchInUrl = hg(\"https://github.com/gocd#feature\", \"dest\");\n\n            HgMaterialConfig hgMaterialConfigWithBranchAsAttribute = hg(\"https://github.com/gocd\", \"dest\");\n            hgMaterialConfigWithBranchAsAttribute.setBranchAttribute(\"feature\");\n\n            assertThat(hgMaterialConfigWithBranchInUrl.getFingerprint())\n                    .isNotEqualTo(hgMaterialConfigWithBranchAsAttribute.getFingerprint());\n        }\n    }\n\n    @Nested\n    class validate {\n        @Test\n        void shouldEnsureUrlIsNotBlank() {\n            hgMaterialConfig.setUrl(\"\");\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(hgMaterialConfig.errors().on(ScmMaterialConfig.URL)).isEqualTo(\"URL cannot be blank\");\n        }\n\n        @Test\n        void shouldEnsureUrlIsNotNull() {\n            hgMaterialConfig.setUrl(null);\n\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(hgMaterialConfig.errors().on(URL)).isEqualTo(\"URL cannot be blank\");\n        }\n\n        @Test\n        void shouldEnsureMaterialNameIsValid() {\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n            assertThat(hgMaterialConfig.errors().on(MATERIAL_NAME)).isNull();\n\n            hgMaterialConfig.setName(new CaseInsensitiveString(\".bad-name-with-dot\"));\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n            assertThat(hgMaterialConfig.errors().on(MATERIAL_NAME)).isEqualTo(\"Invalid material name '.bad-name-with-dot'. This must be alphanumeric and can contain underscores, hyphens and periods (however, it cannot start with a period). The maximum allowed length is 255 characters.\");\n        }\n\n        @Test\n        void shouldEnsureDestFilePathIsValid() {\n            hgMaterialConfig.setConfigAttributes(Collections.singletonMap(FOLDER, \"../a\"));\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n            assertThat(hgMaterialConfig.errors().on(FOLDER)).isEqualTo(\"Dest folder '../a' is not valid. It must be a sub-directory of the working folder.\");\n        }\n\n        @Test\n        void shouldEnsureUserNameIsNotProvidedInBothUrlAsWellAsAttributes() {\n            HgMaterialConfig hgMaterialConfig = hg(\"http://bob:pass@example.com\", null);\n            hgMaterialConfig.setUserName(\"user\");\n\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(hgMaterialConfig.errors().on(HgMaterialConfig.URL)).isEqualTo(\"Ambiguous credentials, must be provided either in URL or as attributes.\");\n        }\n\n        @Test\n        void shouldEnsurePasswordIsNotProvidedInBothUrlAsWellAsAttributes() {\n            HgMaterialConfig hgMaterialConfig = hg(\"http://bob:pass@example.com\", null);\n            hgMaterialConfig.setPassword(\"pass\");\n\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(hgMaterialConfig.errors().on(HgMaterialConfig.URL)).isEqualTo(\"Ambiguous credentials, must be provided either in URL or as attributes.\");\n        }\n\n        @Test\n        void shouldIgnoreInvalidUrlForCredentialValidation() {\n            HgMaterialConfig hgMaterialConfig = hg(\"http://bob:pass@example.com##dobule-hash-is-invalid-in-url\", null);\n            hgMaterialConfig.setUserName(\"user\");\n            hgMaterialConfig.setPassword(\"password\");\n\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(hgMaterialConfig.errors().on(HgMaterialConfig.URL)).isNull();\n        }\n\n        @Test\n        void shouldBeValidWhenCredentialsAreProvidedOnlyInUrl() {\n            HgMaterialConfig hgMaterialConfig = hg(\"http://bob:pass@example.com\", null);\n\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(hgMaterialConfig.errors().on(HgMaterialConfig.URL)).isNull();\n        }\n\n        @Test\n        void shouldBeValidWhenCredentialsAreProvidedOnlyAsAttributes() {\n            HgMaterialConfig hgMaterialConfig = hg(\"http://example.com\", null);\n            hgMaterialConfig.setUserName(\"bob\");\n            hgMaterialConfig.setPassword(\"badger\");\n\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(hgMaterialConfig.errors().on(HgMaterialConfig.URL)).isNull();\n        }\n\n        @Test\n        void shouldEnsureBranchIsNotProvidedInBothUrlAsWellAsAttributes() {\n            HgMaterialConfig hgMaterialConfig = hg(\"http://bob:pass@example.com#some-branch\", null);\n            hgMaterialConfig.setBranchAttribute(\"branch-in-attribute\");\n\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(hgMaterialConfig.errors().on(HgMaterialConfig.URL)).isEqualTo(\"Ambiguous branch, must be provided either in URL or as an attribute.\");\n        }\n\n        @Test\n        void rejectsObviouslyWrongURL() {\n            assertTrue(validating(hg(\"-url-not-starting-with-an-alphanumeric-character\", \"folder\")).errors().containsKey(HgMaterialConfig.URL));\n            assertTrue(validating(hg(\"_url-not-starting-with-an-alphanumeric-character\", \"folder\")).errors().containsKey(HgMaterialConfig.URL));\n            assertTrue(validating(hg(\"@url-not-starting-with-an-alphanumeric-character\", \"folder\")).errors().containsKey(HgMaterialConfig.URL));\n\n            assertFalse(validating(hg(\"url-starting-with-an-alphanumeric-character\", \"folder\")).errors().containsKey(HgMaterialConfig.URL));\n        }\n\n        private HgMaterialConfig validating(HgMaterialConfig hg) {\n            hg.validate(new ConfigSaveValidationContext(null));\n            return hg;\n        }\n    }\n\n    @Nested\n    class ValidateTree {\n        @Test\n        void shouldCallValidate() {\n            final MaterialConfig materialConfig = spy(hg(\"https://example.repo\", null));\n            final ValidationContext validationContext = mockValidationContextForSecretParams();\n\n            materialConfig.validateTree(validationContext);\n\n            verify(materialConfig).validate(validationContext);\n        }\n\n        @Test\n        void shouldFailIfEncryptedPasswordIsIncorrect() {\n            HgMaterialConfig hgMaterialConfig = hg(\"http://example.com\", null);\n            hgMaterialConfig.setEncryptedPassword(\"encryptedPassword\");\n\n            final boolean validationResult = hgMaterialConfig.validateTree(new ConfigSaveValidationContext(null));\n\n            assertThat(validationResult).isFalse();\n            assertThat(hgMaterialConfig.errors().on(\"encryptedPassword\"))\n                    .isEqualTo(\"Encrypted password value for HgMaterial with url 'http://example.com' is invalid. This usually happens when the cipher text is modified to have an invalid value.\");\n        }\n    }\n\n    private ValidationContext mockValidationContextForSecretParams(SecretConfig... secretConfigs) {\n        final ValidationContext validationContext = mock(ValidationContext.class);\n        final CruiseConfig cruiseConfig = mock(CruiseConfig.class);\n        when(validationContext.getCruiseConfig()).thenReturn(cruiseConfig);\n        when(cruiseConfig.getSecretConfigs()).thenReturn(new SecretConfigs(secretConfigs));\n        return validationContext;\n    }\n}\n", "/*\n * Copyright 2021 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.svn;\n\nimport com.thoughtworks.go.config.*;\nimport com.thoughtworks.go.config.materials.AbstractMaterialConfig;\nimport com.thoughtworks.go.config.materials.Filter;\nimport com.thoughtworks.go.config.materials.IgnoredFiles;\nimport com.thoughtworks.go.config.materials.ScmMaterialConfig;\nimport com.thoughtworks.go.config.materials.git.GitMaterialConfig;\nimport com.thoughtworks.go.domain.materials.MaterialConfig;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.ReflectionUtil;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.thoughtworks.go.helper.MaterialConfigsMother.svn;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\nclass SvnMaterialConfigTest {\n    private SvnMaterialConfig svnMaterialConfig;\n\n    @BeforeEach\n    void setUp() {\n        svnMaterialConfig = svn();\n    }\n\n    @Test\n    void shouldSetConfigAttributes() {\n        SvnMaterialConfig svnMaterialConfig = svn(\"\", \"\", \"\", false);\n\n        Map<String, String> map = new HashMap<>();\n        map.put(SvnMaterialConfig.URL, \"url\");\n        map.put(SvnMaterialConfig.USERNAME, \"username\");\n        map.put(SvnMaterialConfig.CHECK_EXTERNALS, \"true\");\n        map.put(ScmMaterialConfig.FOLDER, \"folder\");\n        map.put(ScmMaterialConfig.AUTO_UPDATE, \"0\");\n        map.put(ScmMaterialConfig.FILTER, \"/root,/**/*.help\");\n        map.put(AbstractMaterialConfig.MATERIAL_NAME, \"material-name\");\n\n        svnMaterialConfig.setConfigAttributes(map);\n\n        assertThat(svnMaterialConfig.getUrl()).isEqualTo(\"url\");\n        assertThat(svnMaterialConfig.getUserName()).isEqualTo(\"username\");\n        assertThat(svnMaterialConfig.isCheckExternals()).isTrue();\n        assertThat(svnMaterialConfig.getFolder()).isEqualTo(\"folder\");\n        assertThat(svnMaterialConfig.getName()).isEqualTo(new CaseInsensitiveString(\"material-name\"));\n        assertThat(svnMaterialConfig.isAutoUpdate()).isFalse();\n        assertThat(svnMaterialConfig.filter()).isEqualTo(new Filter(new IgnoredFiles(\"/root\"), new IgnoredFiles(\"/**/*.help\")));\n    }\n\n    @Test\n    void setConfigAttributes_shouldUpdatePasswordWhenPasswordChangedBooleanChanged() throws Exception {\n        SvnMaterialConfig svnMaterial = svn(\"\", \"\", \"notSoSecret\", false);\n        Map<String, String> map = new HashMap<>();\n        map.put(SvnMaterialConfig.PASSWORD, \"secret\");\n        map.put(SvnMaterialConfig.PASSWORD_CHANGED, \"1\");\n\n        svnMaterial.setConfigAttributes(map);\n        assertThat(ReflectionUtil.getField(svnMaterial, \"password\")).isNull();\n        assertThat(svnMaterial.getPassword()).isEqualTo(\"secret\");\n        assertThat(svnMaterial.getEncryptedPassword()).isEqualTo(new GoCipher().encrypt(\"secret\"));\n\n        //Dont change\n        map.put(SvnMaterialConfig.PASSWORD, \"Hehehe\");\n        map.put(SvnMaterialConfig.PASSWORD_CHANGED, \"0\");\n        svnMaterial.setConfigAttributes(map);\n\n        assertThat(ReflectionUtil.getField(svnMaterial, \"password\")).isNull();\n        assertThat(svnMaterial.getPassword()).isEqualTo(\"secret\");\n        assertThat(svnMaterial.getEncryptedPassword()).isEqualTo(new GoCipher().encrypt(\"secret\"));\n\n        map.put(SvnMaterialConfig.PASSWORD, \"\");\n        map.put(SvnMaterialConfig.PASSWORD_CHANGED, \"1\");\n        svnMaterial.setConfigAttributes(map);\n\n        assertThat(svnMaterial.getPassword()).isNull();\n        assertThat(svnMaterial.getEncryptedPassword()).isNull();\n    }\n\n    @Test\n    void shouldReturnTheUrl() {\n        String url = \"git@github.com/my/repo\";\n        SvnMaterialConfig config = svn();\n        config.setUrl(url);\n\n        assertThat(config.getUrl()).isEqualTo(url);\n    }\n\n    @Test\n    void shouldReturnNullIfUrlForMaterialNotSpecified() {\n        SvnMaterialConfig config = svn();\n\n        assertThat(config.getUrl()).isNull();\n    }\n\n    @Test\n    void shouldHandleNullWhenSettingUrlForAMaterial() {\n        SvnMaterialConfig config = svn();\n\n        config.setUrl(null);\n\n        assertThat(config.getUrl()).isNull();\n    }\n\n    @Nested\n    class ValidateURL {\n        @Test\n        void shouldEnsureUrlIsNotBlank() {\n            svnMaterialConfig.setUrl(\"\");\n\n            svnMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(svnMaterialConfig.errors().on(GitMaterialConfig.URL)).isEqualTo(\"URL cannot be blank\");\n        }\n\n        @Test\n        void shouldEnsureUrlIsNotNull() {\n            svnMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(svnMaterialConfig.errors().on(SvnMaterialConfig.URL)).isEqualTo(\"URL cannot be blank\");\n        }\n\n        @Test\n        void shouldEnsureMaterialNameIsValid() {\n            svnMaterialConfig.validate(new ConfigSaveValidationContext(null));\n            assertThat(svnMaterialConfig.errors().on(SvnMaterialConfig.MATERIAL_NAME)).isNull();\n\n            svnMaterialConfig.setName(new CaseInsensitiveString(\".bad-name-with-dot\"));\n            svnMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(svnMaterialConfig.errors().on(SvnMaterialConfig.MATERIAL_NAME)).isEqualTo(\"Invalid material name '.bad-name-with-dot'. This must be alphanumeric and can contain underscores, hyphens and periods (however, it cannot start with a period). The maximum allowed length is 255 characters.\");\n        }\n\n        @Test\n        void shouldEnsureDestFilePathIsValid() {\n            svnMaterialConfig.setConfigAttributes(Collections.singletonMap(ScmMaterialConfig.FOLDER, \"../a\"));\n            svnMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(svnMaterialConfig.errors().on(SvnMaterialConfig.FOLDER)).isEqualTo(\"Dest folder '../a' is not valid. It must be a sub-directory of the working folder.\");\n        }\n\n        @Test\n        void rejectsObviouslyWrongURL() {\n            assertTrue(validating(svn(\"-url-not-starting-with-an-alphanumeric-character\", false)).errors().containsKey(SvnMaterialConfig.URL));\n            assertTrue(validating(svn(\"_url-not-starting-with-an-alphanumeric-character\", false)).errors().containsKey(SvnMaterialConfig.URL));\n            assertTrue(validating(svn(\"@url-not-starting-with-an-alphanumeric-character\", false)).errors().containsKey(SvnMaterialConfig.URL));\n\n            assertFalse(validating(svn(\"url-starting-with-an-alphanumeric-character\", false)).errors().containsKey(SvnMaterialConfig.URL));\n        }\n\n        private SvnMaterialConfig validating(SvnMaterialConfig svn) {\n            svn.validate(new ConfigSaveValidationContext(null));\n            return svn;\n        }\n    }\n\n    @Nested\n    class ValidateTree {\n        @BeforeEach\n        void setUp() {\n            svnMaterialConfig.setUrl(\"foo/bar\");\n        }\n\n        @Test\n        void shouldCallValidate() {\n            final MaterialConfig materialConfig = spy(svnMaterialConfig);\n            final ValidationContext validationContext = mockValidationContextForSecretParams();\n\n            materialConfig.validateTree(validationContext);\n\n            verify(materialConfig).validate(validationContext);\n        }\n\n        @Test\n        void shouldFailIfEncryptedPasswordIsIncorrect() {\n            svnMaterialConfig.setEncryptedPassword(\"encryptedPassword\");\n\n            final boolean validationResult = svnMaterialConfig.validateTree(new ConfigSaveValidationContext(null));\n\n            assertThat(validationResult).isFalse();\n            assertThat(svnMaterialConfig.errors().on(\"encryptedPassword\")).isEqualTo(\"Encrypted password value for SvnMaterial with url 'foo/bar' is invalid. This usually happens when the cipher text is modified to have an invalid value.\");\n        }\n\n        @Test\n        void shouldPassIfPasswordIsNotSpecifiedAsSecretParams() {\n            svnMaterialConfig.setPassword(\"badger\");\n\n            assertThat(svnMaterialConfig.validateTree(null)).isTrue();\n            assertThat(svnMaterialConfig.errors().getAll()).isEmpty();\n        }\n    }\n\n    private ValidationContext mockValidationContextForSecretParams(SecretConfig... secretConfigs) {\n        final ValidationContext validationContext = mock(ValidationContext.class);\n        final CruiseConfig cruiseConfig = mock(CruiseConfig.class);\n        when(validationContext.getCruiseConfig()).thenReturn(cruiseConfig);\n        when(cruiseConfig.getSecretConfigs()).thenReturn(new SecretConfigs(secretConfigs));\n        return validationContext;\n    }\n}\n", "/*\n * Copyright 2021 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.tfs;\n\nimport com.thoughtworks.go.config.*;\nimport com.thoughtworks.go.config.materials.Filter;\nimport com.thoughtworks.go.config.materials.IgnoredFiles;\nimport com.thoughtworks.go.config.materials.ScmMaterialConfig;\nimport com.thoughtworks.go.domain.materials.MaterialConfig;\nimport com.thoughtworks.go.security.CryptoException;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.ReflectionUtil;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.thoughtworks.go.config.materials.AbstractMaterialConfig.MATERIAL_NAME;\nimport static com.thoughtworks.go.config.materials.ScmMaterialConfig.FOLDER;\nimport static com.thoughtworks.go.config.materials.ScmMaterialConfig.URL;\nimport static com.thoughtworks.go.helper.MaterialConfigsMother.tfs;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.fail;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\nclass TfsMaterialConfigTest {\n    private TfsMaterialConfig tfsMaterialConfig;\n\n    @BeforeEach\n    void setUp() {\n        tfsMaterialConfig = tfs(new GoCipher(), null, \"loser\", \"some_domain\", \"passwd\", \"walk_this_path\");\n    }\n\n    @Test\n    void shouldSetConfigAttributes() {\n        TfsMaterialConfig tfsMaterialConfig = tfs(new GoCipher(), new UrlArgument(\"http://10.4.4.101:8080/tfs/Sample\"), \"loser\", \"some_domain\", \"passwd\", \"walk_this_path\");\n\n        Map<String, String> map = new HashMap<>();\n        map.put(URL, \"http://foo:8080/tfs/HelloWorld\");\n        map.put(ScmMaterialConfig.USERNAME, \"boozer\");\n        map.put(ScmMaterialConfig.PASSWORD, \"secret\");\n        map.put(FOLDER, \"folder\");\n        map.put(ScmMaterialConfig.AUTO_UPDATE, \"0\");\n        map.put(ScmMaterialConfig.FILTER, \"/root,/**/*.help\");\n        map.put(MATERIAL_NAME, \"my-tfs-material-name\");\n        map.put(TfsMaterialConfig.PROJECT_PATH, \"/useless/project\");\n        map.put(TfsMaterialConfig.DOMAIN, \"CORPORATE\");\n\n        tfsMaterialConfig.setConfigAttributes(map);\n        TfsMaterialConfig newTfsMaterialConfig = tfs(new GoCipher(), new UrlArgument(\"http://foo:8080/tfs/HelloWorld\"), \"boozer\", \"CORPORATE\", \"secret\", \"/useless/project\");\n        newTfsMaterialConfig.setName(new CaseInsensitiveString(\"my-tfs-material-name\"));\n        newTfsMaterialConfig.setFolder(\"folder\");\n\n        assertThat(tfsMaterialConfig).isEqualTo(newTfsMaterialConfig);\n        assertThat(tfsMaterialConfig.getPassword()).isEqualTo(\"passwd\");\n        assertThat(tfsMaterialConfig.isAutoUpdate()).isFalse();\n        assertThat(tfsMaterialConfig.getDomain()).isEqualTo(\"CORPORATE\");\n\n        assertThat(tfsMaterialConfig.getName()).isEqualTo(new CaseInsensitiveString(\"my-tfs-material-name\"));\n        assertThat(tfsMaterialConfig.filter()).isEqualTo(new Filter(new IgnoredFiles(\"/root\"), new IgnoredFiles(\"/**/*.help\")));\n    }\n\n    @Test\n    void shouldDefaultDomainToEmptyStringWhenNothingIsSet() {\n        TfsMaterialConfig tfsMaterialConfig = tfs();\n        assertThat(tfsMaterialConfig.getDomain()).isEqualTo(\"\");\n    }\n\n    @Test\n    void setConfigAttributes_shouldUpdatePasswordWhenPasswordChangedBooleanChanged() throws Exception {\n        TfsMaterialConfig tfsMaterialConfig = tfs(new GoCipher(), new UrlArgument(\"http://10.4.4.101:8080/tfs/Sample\"), \"loser\", \"CORPORATE\", \"passwd\", \"walk_this_path\");\n        Map<String, String> map = new HashMap<>();\n        map.put(TfsMaterialConfig.PASSWORD, \"secret\");\n        map.put(TfsMaterialConfig.PASSWORD_CHANGED, \"1\");\n\n        tfsMaterialConfig.setConfigAttributes(map);\n\n        tfsMaterialConfig.setConfigAttributes(map);\n        assertThat(ReflectionUtil.getField(tfsMaterialConfig, \"password\")).isNull();\n        assertThat(tfsMaterialConfig.getPassword()).isEqualTo(\"secret\");\n        assertThat(tfsMaterialConfig.getEncryptedPassword()).isEqualTo(new GoCipher().encrypt(\"secret\"));\n\n        //Dont change\n        map.put(TfsMaterialConfig.PASSWORD, \"Hehehe\");\n        map.put(TfsMaterialConfig.PASSWORD_CHANGED, \"0\");\n        tfsMaterialConfig.setConfigAttributes(map);\n\n        assertThat(ReflectionUtil.getField(tfsMaterialConfig, \"password\")).isNull();\n        assertThat(tfsMaterialConfig.getPassword()).isEqualTo(\"secret\");\n        assertThat(tfsMaterialConfig.getEncryptedPassword()).isEqualTo(new GoCipher().encrypt(\"secret\"));\n\n        map.put(TfsMaterialConfig.PASSWORD, \"\");\n        map.put(TfsMaterialConfig.PASSWORD_CHANGED, \"1\");\n        tfsMaterialConfig.setConfigAttributes(map);\n\n        assertThat(tfsMaterialConfig.getPassword()).isNull();\n        assertThat(tfsMaterialConfig.getEncryptedPassword()).isNull();\n    }\n\n    @Nested\n    class Validate {\n\n        @Test\n        void shouldEnsureMandatoryFieldsAreNotBlank() {\n            TfsMaterialConfig tfsMaterialConfig = tfs(new GoCipher(), new UrlArgument(\"\"), \"\", \"CORPORATE\", \"\", \"\");\n\n            tfsMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(tfsMaterialConfig.errors().on(URL)).isEqualTo(\"URL cannot be blank\");\n            assertThat(tfsMaterialConfig.errors().on(TfsMaterialConfig.USERNAME)).isEqualTo(\"Username cannot be blank\");\n            assertThat(tfsMaterialConfig.errors().on(TfsMaterialConfig.PROJECT_PATH)).isEqualTo(\"Project Path cannot be blank\");\n        }\n\n        @Test\n        void shouldEnsureMaterialNameIsValid() {\n            TfsMaterialConfig tfsMaterialConfig = tfs(new GoCipher(), new UrlArgument(\"http://10.4.4.101:8080/tfs/Sample\"), \"loser\", \"CORPORATE\", \"passwd\", \"walk_this_path\");\n\n            tfsMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(tfsMaterialConfig.errors().on(MATERIAL_NAME)).isNull();\n            tfsMaterialConfig.setName(new CaseInsensitiveString(\".bad-name-with-dot\"));\n            tfsMaterialConfig.validate(new ConfigSaveValidationContext(null));\n            assertThat(tfsMaterialConfig.errors().on(MATERIAL_NAME)).isEqualTo(\"Invalid material name '.bad-name-with-dot'. This must be alphanumeric and can contain underscores, hyphens and periods (however, it cannot start with a period). The maximum allowed length is 255 characters.\");\n        }\n\n        @Test\n        void shouldEnsureDestFilePathIsValid() {\n            TfsMaterialConfig tfsMaterialConfig = tfs(new GoCipher(), new UrlArgument(\"http://10.4.4.101:8080/tfs/Sample\"), \"loser\", \"CORPORATE\", \"passwd\", \"walk_this_path\");\n            tfsMaterialConfig.setConfigAttributes(Collections.singletonMap(FOLDER, \"../a\"));\n\n            tfsMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(tfsMaterialConfig.errors().on(FOLDER)).isEqualTo(\"Dest folder '../a' is not valid. It must be a sub-directory of the working folder.\");\n        }\n\n        @Test\n        void shouldEnsureUrlIsNotBlank() {\n            tfsMaterialConfig.setUrl(\"\");\n            tfsMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(tfsMaterialConfig.errors().on(ScmMaterialConfig.URL)).isEqualTo(\"URL cannot be blank\");\n        }\n\n        @Test\n        void shouldEnsureUrlIsNotNull() {\n            tfsMaterialConfig.setUrl(null);\n\n            tfsMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(tfsMaterialConfig.errors().on(URL)).isEqualTo(\"URL cannot be blank\");\n        }\n\n        @Test\n        void rejectsObviouslyWrongURL() {\n            assertTrue(validating(tfs(\"-url-not-starting-with-an-alphanumeric-character\")).errors().containsKey(TfsMaterialConfig.URL));\n            assertTrue(validating(tfs(\"_url-not-starting-with-an-alphanumeric-character\")).errors().containsKey(TfsMaterialConfig.URL));\n            assertTrue(validating(tfs(\"@url-not-starting-with-an-alphanumeric-character\")).errors().containsKey(TfsMaterialConfig.URL));\n\n            assertFalse(validating(tfs(\"url-starting-with-an-alphanumeric-character\")).errors().containsKey(TfsMaterialConfig.URL));\n        }\n\n        private TfsMaterialConfig validating(TfsMaterialConfig tfs) {\n            tfs.validate(new ConfigSaveValidationContext(null));\n            return tfs;\n        }\n    }\n\n    @Test\n    void shouldEncryptTfsPasswordAndMarkPasswordAsNull() throws Exception {\n        TfsMaterialConfig materialConfig = tfs(null, new UrlArgument(\"http://10.4.4.101:8080/tfs/Sample\"), \"loser\", \"CORPORATE\", \"password\", \"walk_this_path\");\n        materialConfig.ensureEncrypted();\n\n        Object passwordFieldValue = ReflectionUtil.getField(materialConfig, \"password\");\n        assertThat(passwordFieldValue).isNull();\n        assertThat(materialConfig.getPassword()).isEqualTo(\"password\");\n        assertThat(materialConfig.getEncryptedPassword()).isEqualTo(new GoCipher().encrypt(\"password\"));\n    }\n\n    @Test\n    void shouldDecryptTfsPassword() throws Exception {\n        String encryptedPassword = new GoCipher().encrypt(\"plain-text-password\");\n        TfsMaterialConfig materialConfig = tfs(null, new UrlArgument(\"http://10.4.4.101:8080/tfs/Sample\"), \"loser\", \"CORPORATE\", \"secret\", \"walk_this_path\");\n        ReflectionUtil.setField(materialConfig, \"encryptedPassword\", encryptedPassword);\n\n        materialConfig.ensureEncrypted();\n        assertThat(materialConfig.getPassword()).isEqualTo(\"plain-text-password\");\n    }\n\n    @Test\n    void shouldNotDecryptTfsPasswordIfPasswordIsNotNull() throws Exception {\n        GoCipher mockGoCipher = mock(GoCipher.class);\n        when(mockGoCipher.encrypt(\"password\")).thenReturn(\"encrypted\");\n        when(mockGoCipher.decrypt(\"encrypted\")).thenReturn(\"password\");\n\n        TfsMaterialConfig materialConfig = tfs(mockGoCipher, new UrlArgument(\"http://10.4.4.101:8080/tfs/Sample\"), \"loser\", \"CORPORATE\", \"password\", \"walk_this_path\");\n        materialConfig.ensureEncrypted();\n        when(mockGoCipher.encrypt(\"new_password\")).thenReturn(\"new_encrypted\");\n        materialConfig.setPassword(\"new_password\");\n        when(mockGoCipher.decrypt(\"new_encrypted\")).thenReturn(\"new_password\");\n\n        assertThat(materialConfig.getPassword()).isEqualTo(\"new_password\");\n    }\n\n    @Test\n    void shouldErrorOutIfDecryptionFails() throws CryptoException {\n        GoCipher mockGoCipher = mock(GoCipher.class);\n        String fakeCipherText = \"fake cipher text\";\n        when(mockGoCipher.decrypt(fakeCipherText)).thenThrow(new CryptoException(\"exception\"));\n        TfsMaterialConfig materialConfig = tfs(mockGoCipher, new UrlArgument(\"http://10.4.4.101:8080/tfs/Sample\"), \"loser\", \"CORPORATE\", \"passwd\", \"walk_this_path\");\n        ReflectionUtil.setField(materialConfig, \"encryptedPassword\", fakeCipherText);\n        try {\n            materialConfig.getPassword();\n            fail(\"Should have thrown up\");\n        } catch (Exception e) {\n            assertThat(e.getMessage()).isEqualTo(\"Could not decrypt the password to get the real password\");\n        }\n    }\n\n    @Test\n    void shouldReturnTheUrl() {\n        String url = \"git@github.com/my/repo\";\n        TfsMaterialConfig config = tfs();\n\n        config.setUrl(url);\n\n        assertThat(config.getUrl()).isEqualTo(url);\n    }\n\n    @Test\n    void shouldReturnNullIfUrlForMaterialNotSpecified() {\n        TfsMaterialConfig config = tfs();\n\n        assertThat(config.getUrl()).isNull();\n    }\n\n    @Test\n    void shouldHandleNullWhenSettingUrlForAMaterial() {\n        TfsMaterialConfig config = tfs();\n\n        config.setUrl(null);\n\n        assertThat(config.getUrl()).isNull();\n    }\n\n    @Nested\n    class ValidateTree {\n        @BeforeEach\n        void setUp() {\n            tfsMaterialConfig.setUrl(\"/foo/bar\");\n        }\n\n        @Test\n        void shouldCallValidate() {\n            final MaterialConfig materialConfig = spy(tfsMaterialConfig);\n            final ValidationContext validationContext = mockValidationContextForSecretParams();\n\n            materialConfig.validateTree(validationContext);\n\n            verify(materialConfig).validate(validationContext);\n        }\n\n        @Test\n        void shouldFailIfEncryptedPasswordIsIncorrect() {\n            tfsMaterialConfig.setEncryptedPassword(\"encryptedPassword\");\n\n            final boolean validationResult = tfsMaterialConfig.validateTree(new ConfigSaveValidationContext(null));\n\n            assertThat(validationResult).isFalse();\n            assertThat(tfsMaterialConfig.errors().on(\"encryptedPassword\")).isEqualTo(\"Encrypted password value for TfsMaterial with url '/foo/bar' is invalid. This usually happens when the cipher text is modified to have an invalid value.\");\n        }\n\n        @Test\n        void shouldPassIfPasswordIsNotSpecifiedAsSecretParams() {\n            tfsMaterialConfig.setPassword(\"badger\");\n\n            assertThat(tfsMaterialConfig.validateTree(null)).isTrue();\n            assertThat(tfsMaterialConfig.errors().getAll()).isEmpty();\n        }\n    }\n\n    private ValidationContext mockValidationContextForSecretParams(SecretConfig... secretConfigs) {\n        final ValidationContext validationContext = mock(ValidationContext.class);\n        final CruiseConfig cruiseConfig = mock(CruiseConfig.class);\n        when(validationContext.getCruiseConfig()).thenReturn(cruiseConfig);\n        when(cruiseConfig.getSecretConfigs()).thenReturn(new SecretConfigs(secretConfigs));\n        return validationContext;\n    }\n}\n"], "fixing_code": ["/*\n * Copyright 2021 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.util.command;\n\nimport com.thoughtworks.go.config.ConfigAttributeValue;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.client.utils.URIBuilder;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.regex.Pattern;\n\nimport static com.thoughtworks.go.util.ExceptionUtils.bombIfNull;\nimport static org.apache.commons.lang3.StringUtils.isBlank;\n\n@ConfigAttributeValue(fieldName = \"url\")\npublic class UrlArgument extends CommandArgument {\n    private static final String URL_DUMB_VALIDATION_REGEX = \"^[a-zA-Z0-9/#].*\";\n    private static final Pattern pattern = Pattern.compile(URL_DUMB_VALIDATION_REGEX);\n\n    protected String url;\n\n    public UrlArgument(String url) {\n        bombIfNull(url, \"Url cannot be null.\");\n        this.url = url;\n    }\n\n    @Override\n    public String originalArgument() {\n        return url;\n    }\n\n    //TODO: Change this later to use URIBuilder\n    @Override\n    public String forDisplay() {\n        try {\n            URI uri = new URI(sanitizeUrl());\n            if (uri.getUserInfo() != null) {\n                uri = new URI(uri.getScheme(), clean(uri.getScheme(), uri.getUserInfo()), uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment());\n            }\n            return uri.toString();\n        } catch (URISyntaxException e) {\n            return url;\n        }\n    }\n\n    private String clean(String scheme, String userInfo) {\n        if (userInfo.contains(\":\")) {\n            return userInfo.replaceFirst(\":.*\", \":******\");\n        } else if (\"ssh\".equals(scheme) || \"svn+ssh\".equals(scheme)) {\n            return userInfo;\n        }\n        return \"******\";\n    }\n\n    @Override\n    public String forCommandLine() {\n        return this.url;\n    }\n\n    protected String sanitizeUrl() {\n        return this.url;\n    }\n\n\n    public static UrlArgument create(String url) {\n        return new UrlArgument(url);\n    }\n\n    @Override\n    public String replaceSecretInfo(String line) {\n        if (StringUtils.isBlank(line)) {\n            return line;\n        }\n\n        if (isBlank(this.url)) {\n            return line;\n        }\n\n        try {\n            final URIBuilder uriBuilder = new URIBuilder(this.url).setPath(null).setCustomQuery(null).setFragment(null);\n            final UrlUserInfo urlUserInfo = new UrlUserInfo(uriBuilder.getUserInfo());\n            if (uriBuilder.getUserInfo() != null) {\n                line = line.replace(uriBuilder.getUserInfo(), urlUserInfo.maskedUserInfo());\n            }\n        } catch (URISyntaxException e) {\n            //Ignore as url is not according to URI specs\n        }\n\n        return line;\n    }\n\n    @Override\n    public boolean equal(CommandArgument that) {\n        //BUG #3276 - on windows svn info includes a password in svn+ssh\n        if (url.startsWith(\"svn+ssh\")) {\n            return this.originalArgument().equals(that.originalArgument());\n        }\n        return cleanPath(this).equals(cleanPath(that));\n    }\n\n    private String cleanPath(CommandArgument commandArgument) {\n        String path = commandArgument.originalArgument();\n        if (path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n        return path;\n    }\n\n    public String withoutCredentials() {\n        try {\n            return new URIBuilder(this.sanitizeUrl()).setUserInfo(null).build().toString();\n        } catch (URISyntaxException e) {\n            return url;\n        }\n    }\n\n    public boolean isValidURLOrLocalPath() {\n        return pattern.matcher(url).matches();\n    }\n}\n", "/*\n * Copyright 2021 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.git;\n\nimport com.thoughtworks.go.config.*;\nimport com.thoughtworks.go.config.materials.*;\nimport com.thoughtworks.go.domain.materials.MaterialConfig;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.ReflectionUtil;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.thoughtworks.go.helper.MaterialConfigsMother.git;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass GitMaterialConfigTest {\n    @Test\n    void shouldBePasswordAwareMaterial() {\n        assertTrue(PasswordAwareMaterial.class.isAssignableFrom(GitMaterialConfig.class));\n    }\n\n    @Test\n    void shouldSetConfigAttributes() {\n        GitMaterialConfig gitMaterialConfig = git(\"\");\n\n        Map<String, String> map = new HashMap<>();\n        map.put(GitMaterialConfig.URL, \"url\");\n        map.put(GitMaterialConfig.BRANCH, \"some-branch\");\n        map.put(GitMaterialConfig.SHALLOW_CLONE, \"true\");\n        map.put(ScmMaterialConfig.FOLDER, \"folder\");\n        map.put(ScmMaterialConfig.AUTO_UPDATE, null);\n        map.put(ScmMaterialConfig.FILTER, \"/root,/**/*.help\");\n        map.put(AbstractMaterialConfig.MATERIAL_NAME, \"material-name\");\n\n        gitMaterialConfig.setConfigAttributes(map);\n\n        assertEquals(\"url\", gitMaterialConfig.getUrl());\n        assertEquals(\"folder\", gitMaterialConfig.getFolder());\n        assertEquals(\"some-branch\", gitMaterialConfig.getBranch());\n        assertEquals(new CaseInsensitiveString(\"material-name\"), gitMaterialConfig.getName());\n        assertFalse(gitMaterialConfig.isAutoUpdate());\n        assertTrue(gitMaterialConfig.isShallowClone());\n        assertEquals(new Filter(new IgnoredFiles(\"/root\"), new IgnoredFiles(\"/**/*.help\")), gitMaterialConfig.filter());\n    }\n\n    @Test\n    void setConfigAttributes_shouldUpdatePasswordWhenPasswordChangedBooleanChanged() throws Exception {\n        GitMaterialConfig gitMaterialConfig = git(\"\");\n        Map<String, String> map = new HashMap<>();\n        map.put(GitMaterialConfig.PASSWORD, \"secret\");\n        map.put(GitMaterialConfig.PASSWORD_CHANGED, \"1\");\n\n        gitMaterialConfig.setConfigAttributes(map);\n        assertNull(ReflectionUtil.getField(gitMaterialConfig, \"password\"));\n        assertEquals(\"secret\", gitMaterialConfig.getPassword());\n        assertEquals(new GoCipher().encrypt(\"secret\"), gitMaterialConfig.getEncryptedPassword());\n\n        //Dont change\n        map.put(GitMaterialConfig.PASSWORD, \"Hehehe\");\n        map.put(GitMaterialConfig.PASSWORD_CHANGED, \"0\");\n        gitMaterialConfig.setConfigAttributes(map);\n\n        assertNull(ReflectionUtil.getField(gitMaterialConfig, \"password\"));\n        assertEquals(\"secret\", gitMaterialConfig.getPassword());\n        assertEquals(new GoCipher().encrypt(\"secret\"), gitMaterialConfig.getEncryptedPassword());\n\n        map.put(GitMaterialConfig.PASSWORD, \"\");\n        map.put(GitMaterialConfig.PASSWORD_CHANGED, \"1\");\n        gitMaterialConfig.setConfigAttributes(map);\n\n        assertNull(gitMaterialConfig.getPassword());\n        assertNull(gitMaterialConfig.getEncryptedPassword());\n    }\n\n    @Test\n    void byDefaultShallowCloneShouldBeOff() {\n        assertFalse(git(\"http://url\", \"foo\").isShallowClone());\n        assertFalse(git(\"http://url\", \"foo\", false).isShallowClone());\n        assertFalse(git(\"http://url\", \"foo\", null).isShallowClone());\n        assertTrue(git(\"http://url\", \"foo\", true).isShallowClone());\n    }\n\n    @Test\n    void shouldReturnIfAttributeMapIsNull() {\n        GitMaterialConfig gitMaterialConfig = git(\"\");\n        gitMaterialConfig.setConfigAttributes(null);\n        assertEquals(git(\"\"), gitMaterialConfig);\n    }\n\n    @Test\n    void shouldReturnTheUrl() {\n        String url = \"git@github.com/my/repo\";\n        GitMaterialConfig config = git(url);\n\n        assertEquals(url, config.getUrl());\n    }\n\n    @Test\n    void shouldReturnNullIfUrlForMaterialNotSpecified() {\n        GitMaterialConfig config = git();\n\n        assertNull(config.getUrl());\n    }\n\n    @Test\n    void shouldSetUrlForAMaterial() {\n        String url = \"git@github.com/my/repo\";\n        GitMaterialConfig config = git();\n\n        config.setUrl(url);\n\n        assertEquals(url, config.getUrl());\n    }\n\n    @Test\n    void shouldHandleNullWhenSettingUrlForAMaterial() {\n        GitMaterialConfig config = git();\n\n        config.setUrl(null);\n\n        assertNull(config.getUrl());\n    }\n\n    @Test\n    void shouldHandleNullUrlAtTheTimeOfGitMaterialConfigCreation() {\n        GitMaterialConfig config = git(null);\n\n        assertNull(config.getUrl());\n    }\n\n    @Test\n    void shouldHandleNullBranchWhileSettingConfigAttributes() {\n        GitMaterialConfig gitMaterialConfig = git(\"http://url\", \"foo\");\n        gitMaterialConfig.setConfigAttributes(Collections.singletonMap(GitMaterialConfig.BRANCH, null));\n        assertEquals(\"master\", gitMaterialConfig.getBranch());\n    }\n\n    @Test\n    void shouldHandleEmptyBranchWhileSettingConfigAttributes() {\n        GitMaterialConfig gitMaterialConfig = git(\"http://url\", \"foo\");\n        gitMaterialConfig.setConfigAttributes(Collections.singletonMap(GitMaterialConfig.BRANCH, \"     \"));\n        assertEquals(\"master\", gitMaterialConfig.getBranch());\n    }\n\n    @Nested\n    class Validate {\n        @Test\n        void allowsBlankBranch() {\n            assertFalse(validating(git(\"/my/repo\", null)).errors().present());\n            assertFalse(validating(git(\"/my/repo\", \"\")).errors().present());\n            assertFalse(validating(git(\"/my/repo\", \" \")).errors().present());\n        }\n\n        @Test\n        void rejectsBranchWithWildcard() {\n            assertEquals(\"Branch names may not contain '*'\", validating(git(\"/foo\", \"branch-*\")).\n                    errors().on(GitMaterialConfig.BRANCH));\n        }\n\n        @Test\n        void rejectsMalformedRefSpec() {\n            assertEquals(\"Refspec is missing a source ref\",\n                    String.join(\";\", validating(git(\"/foo\", \":a\")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n\n            assertEquals(\"Refspec is missing a source ref\",\n                    String.join(\";\", validating(git(\"/foo\", \"   :b\")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n\n            assertEquals(\"Refspec is missing a destination ref\",\n                    String.join(\";\", validating(git(\"/foo\", \"refs/foo: \")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n\n            assertEquals(\"Refspec is missing a destination ref\",\n                    String.join(\";\", validating(git(\"/foo\", \"refs/bar:\")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n\n            assertEquals(\"Refspec is missing a source ref;Refspec is missing a destination ref\",\n                    String.join(\";\", validating(git(\"/foo\", \":\")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n\n            assertEquals(\"Refspec is missing a source ref;Refspec is missing a destination ref\",\n                    String.join(\";\", validating(git(\"/foo\", \" : \")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n\n            assertEquals(\"Refspec source must be an absolute ref (must start with `refs/`)\",\n                    String.join(\";\", validating(git(\"/foo\", \"a:b\")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n\n            assertEquals(\"Refspecs may not contain wildcards; source and destination refs must be exact\",\n                    String.join(\";\", validating(git(\"/foo\", \"refs/heads/*:my-branch\")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n\n            assertEquals(\"Refspecs may not contain wildcards; source and destination refs must be exact\",\n                    String.join(\";\", validating(git(\"/foo\", \"refs/heads/foo:branches/*\")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n\n            assertEquals(\"Refspecs may not contain wildcards; source and destination refs must be exact\",\n                    String.join(\";\", validating(git(\"/foo\", \"refs/heads/*:branches/*\")).errors().\n                            getAllOn(GitMaterialConfig.BRANCH)));\n        }\n\n        @Test\n        void acceptsValidRefSpecs() {\n            assertTrue(validating(git(\"/foo\", \"refs/pull/123/head:pr-123\")).errors().isEmpty());\n            assertTrue(validating(git(\"/foo\", \"refs/pull/123/head:refs/my-prs/123\")).errors().isEmpty());\n        }\n\n        @Test\n        void shouldEnsureUrlIsNotBlank() {\n            assertEquals(\"URL cannot be blank\", validating(git(\"\")).errors().on(GitMaterialConfig.URL));\n        }\n\n        @Test\n        void shouldEnsureUserNameIsNotProvidedInBothUrlAsWellAsAttributes() {\n            GitMaterialConfig gitMaterialConfig = git(\"http://bob:pass@example.com\");\n            gitMaterialConfig.setUserName(\"user\");\n\n            assertEquals(\"Ambiguous credentials, must be provided either in URL or as attributes.\", validating(gitMaterialConfig).errors().on(GitMaterialConfig.URL));\n        }\n\n        @Test\n        void shouldEnsurePasswordIsNotProvidedInBothUrlAsWellAsAttributes() {\n            GitMaterialConfig gitMaterialConfig = git(\"http://bob:pass@example.com\");\n            gitMaterialConfig.setPassword(\"pass\");\n\n            assertEquals(\"Ambiguous credentials, must be provided either in URL or as attributes.\", validating(gitMaterialConfig).errors().on(GitMaterialConfig.URL));\n        }\n\n        @Test\n        void shouldIgnoreInvalidUrlForCredentialValidation() {\n            GitMaterialConfig gitMaterialConfig = git(\"http://bob:pass@example.com##dobule-hash-is-invalid-in-url\");\n            gitMaterialConfig.setUserName(\"user\");\n            gitMaterialConfig.setPassword(\"password\");\n\n            assertFalse(validating(gitMaterialConfig).errors().containsKey(GitMaterialConfig.URL));\n        }\n\n        @Test\n        void shouldBeValidWhenCredentialsAreProvidedOnlyInUrl() {\n            assertFalse(validating(git(\"http://bob:pass@example.com\")).errors().containsKey(GitMaterialConfig.URL));\n        }\n\n        @Test\n        void shouldBeValidWhenCredentialsAreProvidedOnlyAsAttributes() {\n            GitMaterialConfig gitMaterialConfig = git(\"http://example.com\");\n            gitMaterialConfig.setUserName(\"bob\");\n            gitMaterialConfig.setPassword(\"badger\");\n\n            assertFalse(validating(gitMaterialConfig).errors().containsKey(GitMaterialConfig.URL));\n        }\n\n        @Test\n        void rejectsObviouslyWrongURL() {\n            assertTrue(validating(git(\"-url-not-starting-with-an-alphanumeric-character\")).errors().containsKey(GitMaterialConfig.URL));\n            assertTrue(validating(git(\"_url-not-starting-with-an-alphanumeric-character\")).errors().containsKey(GitMaterialConfig.URL));\n            assertTrue(validating(git(\"@url-not-starting-with-an-alphanumeric-character\")).errors().containsKey(GitMaterialConfig.URL));\n\n            assertFalse(validating(git(\"url-starting-with-an-alphanumeric-character\")).errors().containsKey(GitMaterialConfig.URL));\n            assertFalse(validating(git(\"#{url}\")).errors().containsKey(GitMaterialConfig.URL));\n        }\n\n        private GitMaterialConfig validating(GitMaterialConfig git) {\n            git.validate(new ConfigSaveValidationContext(null));\n            return git;\n        }\n    }\n\n    @Nested\n    class ValidateTree {\n        @Test\n        void shouldCallValidate() {\n            final MaterialConfig materialConfig = spy(git(\"https://example.repo\"));\n            final ValidationContext validationContext = mockValidationContextForSecretParams();\n\n            materialConfig.validateTree(validationContext);\n\n            verify(materialConfig).validate(validationContext);\n        }\n\n        @Test\n        void shouldFailIfEncryptedPasswordIsIncorrect() {\n            GitMaterialConfig gitMaterialConfig = git(\"http://example.com\");\n            gitMaterialConfig.setEncryptedPassword(\"encryptedPassword\");\n\n            final boolean validationResult = gitMaterialConfig.validateTree(new ConfigSaveValidationContext(null));\n\n            assertFalse(validationResult);\n            assertEquals(\"Encrypted password value for GitMaterial with url 'http://example.com' is \" +\n                            \"invalid. This usually happens when the cipher text is modified to have an invalid value.\",\n                    gitMaterialConfig.errors().on(\"encryptedPassword\"));\n        }\n    }\n\n    @Nested\n    class Equals {\n        @Test\n        void shouldBeEqualIfObjectsHaveSameUrlBranchAndSubModuleFolder() {\n            final GitMaterialConfig material_1 = git(\"http://example.com\", \"master\");\n            material_1.setUserName(\"bob\");\n            material_1.setSubmoduleFolder(\"/var/lib/git\");\n\n            final GitMaterialConfig material_2 = git(\"http://example.com\", \"master\");\n            material_2.setUserName(\"alice\");\n            material_2.setSubmoduleFolder(\"/var/lib/git\");\n\n            assertTrue(material_1.equals(material_2));\n        }\n    }\n\n    @Nested\n    class Fingerprint {\n        @Test\n        void shouldGenerateFingerprintForGivenMaterialUrlAndBranch() {\n            GitMaterialConfig gitMaterialConfig = git(\"https://bob:pass@github.com/gocd\", \"feature\");\n\n            assertEquals(\"755da7fb7415c8674bdf5f8a4ba48fc3e071e5de429b1308ccf8949d215bdb08\", gitMaterialConfig.getFingerprint());\n        }\n    }\n\n    private ValidationContext mockValidationContextForSecretParams(SecretConfig... secretConfigs) {\n        final ValidationContext validationContext = mock(ValidationContext.class);\n        final CruiseConfig cruiseConfig = mock(CruiseConfig.class);\n        when(validationContext.getCruiseConfig()).thenReturn(cruiseConfig);\n        when(cruiseConfig.getSecretConfigs()).thenReturn(new SecretConfigs(secretConfigs));\n        return validationContext;\n    }\n}\n", "/*\n * Copyright 2021 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.mercurial;\n\nimport com.thoughtworks.go.config.*;\nimport com.thoughtworks.go.config.materials.*;\nimport com.thoughtworks.go.domain.materials.MaterialConfig;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.ReflectionUtil;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.thoughtworks.go.config.materials.AbstractMaterialConfig.MATERIAL_NAME;\nimport static com.thoughtworks.go.config.materials.ScmMaterialConfig.FOLDER;\nimport static com.thoughtworks.go.config.materials.ScmMaterialConfig.URL;\nimport static com.thoughtworks.go.helper.MaterialConfigsMother.git;\nimport static com.thoughtworks.go.helper.MaterialConfigsMother.hg;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\nclass HgMaterialConfigTest {\n    private HgMaterialConfig hgMaterialConfig;\n\n    @BeforeEach\n    void setUp() {\n        hgMaterialConfig = hg(\"\", null);\n    }\n\n    @Test\n    void shouldBePasswordAwareMaterial() {\n        assertThat(hgMaterialConfig).isInstanceOf(PasswordAwareMaterial.class);\n    }\n\n    @Test\n    void shouldSetConfigAttributes() {\n        HgMaterialConfig hgMaterialConfig = hg(\"\", null);\n\n        Map<String, String> map = new HashMap<>();\n        map.put(HgMaterialConfig.URL, \"url\");\n        map.put(ScmMaterialConfig.FOLDER, \"folder\");\n        map.put(ScmMaterialConfig.AUTO_UPDATE, \"0\");\n        map.put(ScmMaterialConfig.FILTER, \"/root,/**/*.help\");\n        map.put(AbstractMaterialConfig.MATERIAL_NAME, \"material-name\");\n\n        hgMaterialConfig.setConfigAttributes(map);\n\n        assertThat(hgMaterialConfig.getUrl()).isEqualTo(\"url\");\n        assertThat(hgMaterialConfig.getFolder()).isEqualTo(\"folder\");\n        assertThat(hgMaterialConfig.getName()).isEqualTo(new CaseInsensitiveString(\"material-name\"));\n        assertThat(hgMaterialConfig.isAutoUpdate()).isFalse();\n        assertThat(hgMaterialConfig.filter()).isEqualTo(new Filter(new IgnoredFiles(\"/root\"), new IgnoredFiles(\"/**/*.help\")));\n    }\n\n    @Test\n    void setConfigAttributes_shouldUpdatePasswordWhenPasswordChangedBooleanChanged() throws Exception {\n        HgMaterialConfig hgMaterialConfig = hg();\n        Map<String, String> map = new HashMap<>();\n        map.put(HgMaterialConfig.PASSWORD, \"secret\");\n        map.put(HgMaterialConfig.PASSWORD_CHANGED, \"1\");\n\n        hgMaterialConfig.setConfigAttributes(map);\n        assertThat(ReflectionUtil.getField(hgMaterialConfig, \"password\")).isNull();\n        assertThat(hgMaterialConfig.getPassword()).isEqualTo(\"secret\");\n        assertThat(hgMaterialConfig.getEncryptedPassword()).isEqualTo(new GoCipher().encrypt(\"secret\"));\n\n        //Dont change\n        map.put(HgMaterialConfig.PASSWORD, \"Hehehe\");\n        map.put(HgMaterialConfig.PASSWORD_CHANGED, \"0\");\n        hgMaterialConfig.setConfigAttributes(map);\n\n        assertThat(ReflectionUtil.getField(hgMaterialConfig, \"password\")).isNull();\n        assertThat(hgMaterialConfig.getPassword()).isEqualTo(\"secret\");\n        assertThat(hgMaterialConfig.getEncryptedPassword()).isEqualTo(new GoCipher().encrypt(\"secret\"));\n\n        map.put(HgMaterialConfig.PASSWORD, \"\");\n        map.put(HgMaterialConfig.PASSWORD_CHANGED, \"1\");\n        hgMaterialConfig.setConfigAttributes(map);\n\n        assertThat(hgMaterialConfig.getPassword()).isNull();\n        assertThat(hgMaterialConfig.getEncryptedPassword()).isNull();\n    }\n\n\n    @Test\n    void validate_shouldEnsureUrlIsNotBlank() {\n        HgMaterialConfig hgMaterialConfig = hg(\"\", null);\n        hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n        assertThat(hgMaterialConfig.errors().on(HgMaterialConfig.URL)).isEqualTo(\"URL cannot be blank\");\n    }\n\n    @Test\n    void shouldReturnIfAttributeMapIsNull() {\n        HgMaterialConfig hgMaterialConfig = hg(\"\", null);\n\n        hgMaterialConfig.setConfigAttributes(null);\n\n        assertThat(hgMaterialConfig).isEqualTo(hg(\"\", null));\n    }\n\n    @Test\n    void shouldReturnTheUrl() {\n        String url = \"git@github.com/my/repo\";\n        HgMaterialConfig config = hg(url, null);\n\n        assertThat(config.getUrl()).isEqualTo(url);\n    }\n\n    @Test\n    void shouldReturnNullIfUrlForMaterialNotSpecified() {\n        HgMaterialConfig config = hg();\n\n        assertThat(config.getUrl()).isNull();\n    }\n\n    @Test\n    void shouldSetUrlForAMaterial() {\n        String url = \"git@github.com/my/repo\";\n        HgMaterialConfig config = hg();\n\n        config.setUrl(url);\n\n        assertThat(config.getUrl()).isEqualTo(url);\n    }\n\n    @Test\n    void shouldHandleNullWhenSettingUrlForAMaterial() {\n        HgMaterialConfig config = hg();\n\n        config.setUrl(null);\n\n        assertThat(config.getUrl()).isNull();\n    }\n\n    @Nested\n    class Equals {\n        @Test\n        void shouldBeEqualIfObjectsHaveSameUrlBranch() {\n            final HgMaterialConfig material_1 = hg(\"http://example.com\", \"master\");\n            material_1.setUserName(\"bob\");\n            material_1.setBranchAttribute(\"feature\");\n\n            final HgMaterialConfig material_2 = hg(\"http://example.com\", \"master\");\n            material_2.setUserName(\"alice\");\n            material_2.setBranchAttribute(\"feature\");\n\n            assertThat(material_1.equals(material_2)).isTrue();\n        }\n    }\n\n    @Nested\n    class Fingerprint {\n        @Test\n        void shouldGenerateFingerprintForGivenMaterialUrl() {\n            HgMaterialConfig hgMaterialConfig = hg(\"https://bob:pass@github.com/gocd#feature\", \"dest\");\n\n            assertThat(hgMaterialConfig.getFingerprint()).isEqualTo(\"d84d91f37da0367a9bd89fff0d48638f5c1bf993d637735ec26f13c21c23da19\");\n        }\n\n        @Test\n        void shouldConsiderBranchWhileGeneratingFingerprint_IfBranchSpecifiedAsAnAttribute() {\n            HgMaterialConfig hgMaterialConfig = hg(\"https://bob:pass@github.com/gocd\", \"dest\");\n            hgMaterialConfig.setBranchAttribute(\"feature\");\n\n            assertThat(hgMaterialConfig.getFingerprint()).isEqualTo(\"db13278ed2b804fc5664361103bcea3d7f5106879683085caed4311aa4d2f888\");\n        }\n\n        @Test\n        void branchInUrlShouldGenerateFingerprintWhichIsOtherFromBranchInAttribute() {\n            HgMaterialConfig hgMaterialConfigWithBranchInUrl = hg(\"https://github.com/gocd#feature\", \"dest\");\n\n            HgMaterialConfig hgMaterialConfigWithBranchAsAttribute = hg(\"https://github.com/gocd\", \"dest\");\n            hgMaterialConfigWithBranchAsAttribute.setBranchAttribute(\"feature\");\n\n            assertThat(hgMaterialConfigWithBranchInUrl.getFingerprint())\n                    .isNotEqualTo(hgMaterialConfigWithBranchAsAttribute.getFingerprint());\n        }\n    }\n\n    @Nested\n    class validate {\n        @Test\n        void shouldEnsureUrlIsNotBlank() {\n            hgMaterialConfig.setUrl(\"\");\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(hgMaterialConfig.errors().on(ScmMaterialConfig.URL)).isEqualTo(\"URL cannot be blank\");\n        }\n\n        @Test\n        void shouldEnsureUrlIsNotNull() {\n            hgMaterialConfig.setUrl(null);\n\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(hgMaterialConfig.errors().on(URL)).isEqualTo(\"URL cannot be blank\");\n        }\n\n        @Test\n        void shouldEnsureMaterialNameIsValid() {\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n            assertThat(hgMaterialConfig.errors().on(MATERIAL_NAME)).isNull();\n\n            hgMaterialConfig.setName(new CaseInsensitiveString(\".bad-name-with-dot\"));\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n            assertThat(hgMaterialConfig.errors().on(MATERIAL_NAME)).isEqualTo(\"Invalid material name '.bad-name-with-dot'. This must be alphanumeric and can contain underscores, hyphens and periods (however, it cannot start with a period). The maximum allowed length is 255 characters.\");\n        }\n\n        @Test\n        void shouldEnsureDestFilePathIsValid() {\n            hgMaterialConfig.setConfigAttributes(Collections.singletonMap(FOLDER, \"../a\"));\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n            assertThat(hgMaterialConfig.errors().on(FOLDER)).isEqualTo(\"Dest folder '../a' is not valid. It must be a sub-directory of the working folder.\");\n        }\n\n        @Test\n        void shouldEnsureUserNameIsNotProvidedInBothUrlAsWellAsAttributes() {\n            HgMaterialConfig hgMaterialConfig = hg(\"http://bob:pass@example.com\", null);\n            hgMaterialConfig.setUserName(\"user\");\n\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(hgMaterialConfig.errors().on(HgMaterialConfig.URL)).isEqualTo(\"Ambiguous credentials, must be provided either in URL or as attributes.\");\n        }\n\n        @Test\n        void shouldEnsurePasswordIsNotProvidedInBothUrlAsWellAsAttributes() {\n            HgMaterialConfig hgMaterialConfig = hg(\"http://bob:pass@example.com\", null);\n            hgMaterialConfig.setPassword(\"pass\");\n\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(hgMaterialConfig.errors().on(HgMaterialConfig.URL)).isEqualTo(\"Ambiguous credentials, must be provided either in URL or as attributes.\");\n        }\n\n        @Test\n        void shouldIgnoreInvalidUrlForCredentialValidation() {\n            HgMaterialConfig hgMaterialConfig = hg(\"http://bob:pass@example.com##dobule-hash-is-invalid-in-url\", null);\n            hgMaterialConfig.setUserName(\"user\");\n            hgMaterialConfig.setPassword(\"password\");\n\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(hgMaterialConfig.errors().on(HgMaterialConfig.URL)).isNull();\n        }\n\n        @Test\n        void shouldBeValidWhenCredentialsAreProvidedOnlyInUrl() {\n            HgMaterialConfig hgMaterialConfig = hg(\"http://bob:pass@example.com\", null);\n\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(hgMaterialConfig.errors().on(HgMaterialConfig.URL)).isNull();\n        }\n\n        @Test\n        void shouldBeValidWhenCredentialsAreProvidedOnlyAsAttributes() {\n            HgMaterialConfig hgMaterialConfig = hg(\"http://example.com\", null);\n            hgMaterialConfig.setUserName(\"bob\");\n            hgMaterialConfig.setPassword(\"badger\");\n\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(hgMaterialConfig.errors().on(HgMaterialConfig.URL)).isNull();\n        }\n\n        @Test\n        void shouldEnsureBranchIsNotProvidedInBothUrlAsWellAsAttributes() {\n            HgMaterialConfig hgMaterialConfig = hg(\"http://bob:pass@example.com#some-branch\", null);\n            hgMaterialConfig.setBranchAttribute(\"branch-in-attribute\");\n\n            hgMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(hgMaterialConfig.errors().on(HgMaterialConfig.URL)).isEqualTo(\"Ambiguous branch, must be provided either in URL or as an attribute.\");\n        }\n\n        @Test\n        void rejectsObviouslyWrongURL() {\n            assertTrue(validating(hg(\"-url-not-starting-with-an-alphanumeric-character\", \"folder\")).errors().containsKey(HgMaterialConfig.URL));\n            assertTrue(validating(hg(\"_url-not-starting-with-an-alphanumeric-character\", \"folder\")).errors().containsKey(HgMaterialConfig.URL));\n            assertTrue(validating(hg(\"@url-not-starting-with-an-alphanumeric-character\", \"folder\")).errors().containsKey(HgMaterialConfig.URL));\n\n            assertFalse(validating(hg(\"url-starting-with-an-alphanumeric-character\", \"folder\")).errors().containsKey(HgMaterialConfig.URL));\n            assertFalse(validating(hg(\"#{url}\", \"folder\")).errors().containsKey(HgMaterialConfig.URL));\n        }\n\n        private HgMaterialConfig validating(HgMaterialConfig hg) {\n            hg.validate(new ConfigSaveValidationContext(null));\n            return hg;\n        }\n    }\n\n    @Nested\n    class ValidateTree {\n        @Test\n        void shouldCallValidate() {\n            final MaterialConfig materialConfig = spy(hg(\"https://example.repo\", null));\n            final ValidationContext validationContext = mockValidationContextForSecretParams();\n\n            materialConfig.validateTree(validationContext);\n\n            verify(materialConfig).validate(validationContext);\n        }\n\n        @Test\n        void shouldFailIfEncryptedPasswordIsIncorrect() {\n            HgMaterialConfig hgMaterialConfig = hg(\"http://example.com\", null);\n            hgMaterialConfig.setEncryptedPassword(\"encryptedPassword\");\n\n            final boolean validationResult = hgMaterialConfig.validateTree(new ConfigSaveValidationContext(null));\n\n            assertThat(validationResult).isFalse();\n            assertThat(hgMaterialConfig.errors().on(\"encryptedPassword\"))\n                    .isEqualTo(\"Encrypted password value for HgMaterial with url 'http://example.com' is invalid. This usually happens when the cipher text is modified to have an invalid value.\");\n        }\n    }\n\n    private ValidationContext mockValidationContextForSecretParams(SecretConfig... secretConfigs) {\n        final ValidationContext validationContext = mock(ValidationContext.class);\n        final CruiseConfig cruiseConfig = mock(CruiseConfig.class);\n        when(validationContext.getCruiseConfig()).thenReturn(cruiseConfig);\n        when(cruiseConfig.getSecretConfigs()).thenReturn(new SecretConfigs(secretConfigs));\n        return validationContext;\n    }\n}\n", "/*\n * Copyright 2021 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.svn;\n\nimport com.thoughtworks.go.config.*;\nimport com.thoughtworks.go.config.materials.AbstractMaterialConfig;\nimport com.thoughtworks.go.config.materials.Filter;\nimport com.thoughtworks.go.config.materials.IgnoredFiles;\nimport com.thoughtworks.go.config.materials.ScmMaterialConfig;\nimport com.thoughtworks.go.config.materials.git.GitMaterialConfig;\nimport com.thoughtworks.go.domain.materials.MaterialConfig;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.ReflectionUtil;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.thoughtworks.go.helper.MaterialConfigsMother.svn;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\nclass SvnMaterialConfigTest {\n    private SvnMaterialConfig svnMaterialConfig;\n\n    @BeforeEach\n    void setUp() {\n        svnMaterialConfig = svn();\n    }\n\n    @Test\n    void shouldSetConfigAttributes() {\n        SvnMaterialConfig svnMaterialConfig = svn(\"\", \"\", \"\", false);\n\n        Map<String, String> map = new HashMap<>();\n        map.put(SvnMaterialConfig.URL, \"url\");\n        map.put(SvnMaterialConfig.USERNAME, \"username\");\n        map.put(SvnMaterialConfig.CHECK_EXTERNALS, \"true\");\n        map.put(ScmMaterialConfig.FOLDER, \"folder\");\n        map.put(ScmMaterialConfig.AUTO_UPDATE, \"0\");\n        map.put(ScmMaterialConfig.FILTER, \"/root,/**/*.help\");\n        map.put(AbstractMaterialConfig.MATERIAL_NAME, \"material-name\");\n\n        svnMaterialConfig.setConfigAttributes(map);\n\n        assertThat(svnMaterialConfig.getUrl()).isEqualTo(\"url\");\n        assertThat(svnMaterialConfig.getUserName()).isEqualTo(\"username\");\n        assertThat(svnMaterialConfig.isCheckExternals()).isTrue();\n        assertThat(svnMaterialConfig.getFolder()).isEqualTo(\"folder\");\n        assertThat(svnMaterialConfig.getName()).isEqualTo(new CaseInsensitiveString(\"material-name\"));\n        assertThat(svnMaterialConfig.isAutoUpdate()).isFalse();\n        assertThat(svnMaterialConfig.filter()).isEqualTo(new Filter(new IgnoredFiles(\"/root\"), new IgnoredFiles(\"/**/*.help\")));\n    }\n\n    @Test\n    void setConfigAttributes_shouldUpdatePasswordWhenPasswordChangedBooleanChanged() throws Exception {\n        SvnMaterialConfig svnMaterial = svn(\"\", \"\", \"notSoSecret\", false);\n        Map<String, String> map = new HashMap<>();\n        map.put(SvnMaterialConfig.PASSWORD, \"secret\");\n        map.put(SvnMaterialConfig.PASSWORD_CHANGED, \"1\");\n\n        svnMaterial.setConfigAttributes(map);\n        assertThat(ReflectionUtil.getField(svnMaterial, \"password\")).isNull();\n        assertThat(svnMaterial.getPassword()).isEqualTo(\"secret\");\n        assertThat(svnMaterial.getEncryptedPassword()).isEqualTo(new GoCipher().encrypt(\"secret\"));\n\n        //Dont change\n        map.put(SvnMaterialConfig.PASSWORD, \"Hehehe\");\n        map.put(SvnMaterialConfig.PASSWORD_CHANGED, \"0\");\n        svnMaterial.setConfigAttributes(map);\n\n        assertThat(ReflectionUtil.getField(svnMaterial, \"password\")).isNull();\n        assertThat(svnMaterial.getPassword()).isEqualTo(\"secret\");\n        assertThat(svnMaterial.getEncryptedPassword()).isEqualTo(new GoCipher().encrypt(\"secret\"));\n\n        map.put(SvnMaterialConfig.PASSWORD, \"\");\n        map.put(SvnMaterialConfig.PASSWORD_CHANGED, \"1\");\n        svnMaterial.setConfigAttributes(map);\n\n        assertThat(svnMaterial.getPassword()).isNull();\n        assertThat(svnMaterial.getEncryptedPassword()).isNull();\n    }\n\n    @Test\n    void shouldReturnTheUrl() {\n        String url = \"git@github.com/my/repo\";\n        SvnMaterialConfig config = svn();\n        config.setUrl(url);\n\n        assertThat(config.getUrl()).isEqualTo(url);\n    }\n\n    @Test\n    void shouldReturnNullIfUrlForMaterialNotSpecified() {\n        SvnMaterialConfig config = svn();\n\n        assertThat(config.getUrl()).isNull();\n    }\n\n    @Test\n    void shouldHandleNullWhenSettingUrlForAMaterial() {\n        SvnMaterialConfig config = svn();\n\n        config.setUrl(null);\n\n        assertThat(config.getUrl()).isNull();\n    }\n\n    @Nested\n    class ValidateURL {\n        @Test\n        void shouldEnsureUrlIsNotBlank() {\n            svnMaterialConfig.setUrl(\"\");\n\n            svnMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(svnMaterialConfig.errors().on(GitMaterialConfig.URL)).isEqualTo(\"URL cannot be blank\");\n        }\n\n        @Test\n        void shouldEnsureUrlIsNotNull() {\n            svnMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(svnMaterialConfig.errors().on(SvnMaterialConfig.URL)).isEqualTo(\"URL cannot be blank\");\n        }\n\n        @Test\n        void shouldEnsureMaterialNameIsValid() {\n            svnMaterialConfig.validate(new ConfigSaveValidationContext(null));\n            assertThat(svnMaterialConfig.errors().on(SvnMaterialConfig.MATERIAL_NAME)).isNull();\n\n            svnMaterialConfig.setName(new CaseInsensitiveString(\".bad-name-with-dot\"));\n            svnMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(svnMaterialConfig.errors().on(SvnMaterialConfig.MATERIAL_NAME)).isEqualTo(\"Invalid material name '.bad-name-with-dot'. This must be alphanumeric and can contain underscores, hyphens and periods (however, it cannot start with a period). The maximum allowed length is 255 characters.\");\n        }\n\n        @Test\n        void shouldEnsureDestFilePathIsValid() {\n            svnMaterialConfig.setConfigAttributes(Collections.singletonMap(ScmMaterialConfig.FOLDER, \"../a\"));\n            svnMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(svnMaterialConfig.errors().on(SvnMaterialConfig.FOLDER)).isEqualTo(\"Dest folder '../a' is not valid. It must be a sub-directory of the working folder.\");\n        }\n\n        @Test\n        void rejectsObviouslyWrongURL() {\n            assertTrue(validating(svn(\"-url-not-starting-with-an-alphanumeric-character\", false)).errors().containsKey(SvnMaterialConfig.URL));\n            assertTrue(validating(svn(\"_url-not-starting-with-an-alphanumeric-character\", false)).errors().containsKey(SvnMaterialConfig.URL));\n            assertTrue(validating(svn(\"@url-not-starting-with-an-alphanumeric-character\", false)).errors().containsKey(SvnMaterialConfig.URL));\n\n            assertFalse(validating(svn(\"url-starting-with-an-alphanumeric-character\", false)).errors().containsKey(SvnMaterialConfig.URL));\n            assertFalse(validating(svn(\"#{url}\", false)).errors().containsKey(SvnMaterialConfig.URL));\n        }\n\n        private SvnMaterialConfig validating(SvnMaterialConfig svn) {\n            svn.validate(new ConfigSaveValidationContext(null));\n            return svn;\n        }\n    }\n\n    @Nested\n    class ValidateTree {\n        @BeforeEach\n        void setUp() {\n            svnMaterialConfig.setUrl(\"foo/bar\");\n        }\n\n        @Test\n        void shouldCallValidate() {\n            final MaterialConfig materialConfig = spy(svnMaterialConfig);\n            final ValidationContext validationContext = mockValidationContextForSecretParams();\n\n            materialConfig.validateTree(validationContext);\n\n            verify(materialConfig).validate(validationContext);\n        }\n\n        @Test\n        void shouldFailIfEncryptedPasswordIsIncorrect() {\n            svnMaterialConfig.setEncryptedPassword(\"encryptedPassword\");\n\n            final boolean validationResult = svnMaterialConfig.validateTree(new ConfigSaveValidationContext(null));\n\n            assertThat(validationResult).isFalse();\n            assertThat(svnMaterialConfig.errors().on(\"encryptedPassword\")).isEqualTo(\"Encrypted password value for SvnMaterial with url 'foo/bar' is invalid. This usually happens when the cipher text is modified to have an invalid value.\");\n        }\n\n        @Test\n        void shouldPassIfPasswordIsNotSpecifiedAsSecretParams() {\n            svnMaterialConfig.setPassword(\"badger\");\n\n            assertThat(svnMaterialConfig.validateTree(null)).isTrue();\n            assertThat(svnMaterialConfig.errors().getAll()).isEmpty();\n        }\n    }\n\n    private ValidationContext mockValidationContextForSecretParams(SecretConfig... secretConfigs) {\n        final ValidationContext validationContext = mock(ValidationContext.class);\n        final CruiseConfig cruiseConfig = mock(CruiseConfig.class);\n        when(validationContext.getCruiseConfig()).thenReturn(cruiseConfig);\n        when(cruiseConfig.getSecretConfigs()).thenReturn(new SecretConfigs(secretConfigs));\n        return validationContext;\n    }\n}\n", "/*\n * Copyright 2021 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.tfs;\n\nimport com.thoughtworks.go.config.*;\nimport com.thoughtworks.go.config.materials.Filter;\nimport com.thoughtworks.go.config.materials.IgnoredFiles;\nimport com.thoughtworks.go.config.materials.ScmMaterialConfig;\nimport com.thoughtworks.go.domain.materials.MaterialConfig;\nimport com.thoughtworks.go.security.CryptoException;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.ReflectionUtil;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.thoughtworks.go.config.materials.AbstractMaterialConfig.MATERIAL_NAME;\nimport static com.thoughtworks.go.config.materials.ScmMaterialConfig.FOLDER;\nimport static com.thoughtworks.go.config.materials.ScmMaterialConfig.URL;\nimport static com.thoughtworks.go.helper.MaterialConfigsMother.tfs;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.fail;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\nclass TfsMaterialConfigTest {\n    private TfsMaterialConfig tfsMaterialConfig;\n\n    @BeforeEach\n    void setUp() {\n        tfsMaterialConfig = tfs(new GoCipher(), null, \"loser\", \"some_domain\", \"passwd\", \"walk_this_path\");\n    }\n\n    @Test\n    void shouldSetConfigAttributes() {\n        TfsMaterialConfig tfsMaterialConfig = tfs(new GoCipher(), new UrlArgument(\"http://10.4.4.101:8080/tfs/Sample\"), \"loser\", \"some_domain\", \"passwd\", \"walk_this_path\");\n\n        Map<String, String> map = new HashMap<>();\n        map.put(URL, \"http://foo:8080/tfs/HelloWorld\");\n        map.put(ScmMaterialConfig.USERNAME, \"boozer\");\n        map.put(ScmMaterialConfig.PASSWORD, \"secret\");\n        map.put(FOLDER, \"folder\");\n        map.put(ScmMaterialConfig.AUTO_UPDATE, \"0\");\n        map.put(ScmMaterialConfig.FILTER, \"/root,/**/*.help\");\n        map.put(MATERIAL_NAME, \"my-tfs-material-name\");\n        map.put(TfsMaterialConfig.PROJECT_PATH, \"/useless/project\");\n        map.put(TfsMaterialConfig.DOMAIN, \"CORPORATE\");\n\n        tfsMaterialConfig.setConfigAttributes(map);\n        TfsMaterialConfig newTfsMaterialConfig = tfs(new GoCipher(), new UrlArgument(\"http://foo:8080/tfs/HelloWorld\"), \"boozer\", \"CORPORATE\", \"secret\", \"/useless/project\");\n        newTfsMaterialConfig.setName(new CaseInsensitiveString(\"my-tfs-material-name\"));\n        newTfsMaterialConfig.setFolder(\"folder\");\n\n        assertThat(tfsMaterialConfig).isEqualTo(newTfsMaterialConfig);\n        assertThat(tfsMaterialConfig.getPassword()).isEqualTo(\"passwd\");\n        assertThat(tfsMaterialConfig.isAutoUpdate()).isFalse();\n        assertThat(tfsMaterialConfig.getDomain()).isEqualTo(\"CORPORATE\");\n\n        assertThat(tfsMaterialConfig.getName()).isEqualTo(new CaseInsensitiveString(\"my-tfs-material-name\"));\n        assertThat(tfsMaterialConfig.filter()).isEqualTo(new Filter(new IgnoredFiles(\"/root\"), new IgnoredFiles(\"/**/*.help\")));\n    }\n\n    @Test\n    void shouldDefaultDomainToEmptyStringWhenNothingIsSet() {\n        TfsMaterialConfig tfsMaterialConfig = tfs();\n        assertThat(tfsMaterialConfig.getDomain()).isEqualTo(\"\");\n    }\n\n    @Test\n    void setConfigAttributes_shouldUpdatePasswordWhenPasswordChangedBooleanChanged() throws Exception {\n        TfsMaterialConfig tfsMaterialConfig = tfs(new GoCipher(), new UrlArgument(\"http://10.4.4.101:8080/tfs/Sample\"), \"loser\", \"CORPORATE\", \"passwd\", \"walk_this_path\");\n        Map<String, String> map = new HashMap<>();\n        map.put(TfsMaterialConfig.PASSWORD, \"secret\");\n        map.put(TfsMaterialConfig.PASSWORD_CHANGED, \"1\");\n\n        tfsMaterialConfig.setConfigAttributes(map);\n\n        tfsMaterialConfig.setConfigAttributes(map);\n        assertThat(ReflectionUtil.getField(tfsMaterialConfig, \"password\")).isNull();\n        assertThat(tfsMaterialConfig.getPassword()).isEqualTo(\"secret\");\n        assertThat(tfsMaterialConfig.getEncryptedPassword()).isEqualTo(new GoCipher().encrypt(\"secret\"));\n\n        //Dont change\n        map.put(TfsMaterialConfig.PASSWORD, \"Hehehe\");\n        map.put(TfsMaterialConfig.PASSWORD_CHANGED, \"0\");\n        tfsMaterialConfig.setConfigAttributes(map);\n\n        assertThat(ReflectionUtil.getField(tfsMaterialConfig, \"password\")).isNull();\n        assertThat(tfsMaterialConfig.getPassword()).isEqualTo(\"secret\");\n        assertThat(tfsMaterialConfig.getEncryptedPassword()).isEqualTo(new GoCipher().encrypt(\"secret\"));\n\n        map.put(TfsMaterialConfig.PASSWORD, \"\");\n        map.put(TfsMaterialConfig.PASSWORD_CHANGED, \"1\");\n        tfsMaterialConfig.setConfigAttributes(map);\n\n        assertThat(tfsMaterialConfig.getPassword()).isNull();\n        assertThat(tfsMaterialConfig.getEncryptedPassword()).isNull();\n    }\n\n    @Nested\n    class Validate {\n\n        @Test\n        void shouldEnsureMandatoryFieldsAreNotBlank() {\n            TfsMaterialConfig tfsMaterialConfig = tfs(new GoCipher(), new UrlArgument(\"\"), \"\", \"CORPORATE\", \"\", \"\");\n\n            tfsMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(tfsMaterialConfig.errors().on(URL)).isEqualTo(\"URL cannot be blank\");\n            assertThat(tfsMaterialConfig.errors().on(TfsMaterialConfig.USERNAME)).isEqualTo(\"Username cannot be blank\");\n            assertThat(tfsMaterialConfig.errors().on(TfsMaterialConfig.PROJECT_PATH)).isEqualTo(\"Project Path cannot be blank\");\n        }\n\n        @Test\n        void shouldEnsureMaterialNameIsValid() {\n            TfsMaterialConfig tfsMaterialConfig = tfs(new GoCipher(), new UrlArgument(\"http://10.4.4.101:8080/tfs/Sample\"), \"loser\", \"CORPORATE\", \"passwd\", \"walk_this_path\");\n\n            tfsMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(tfsMaterialConfig.errors().on(MATERIAL_NAME)).isNull();\n            tfsMaterialConfig.setName(new CaseInsensitiveString(\".bad-name-with-dot\"));\n            tfsMaterialConfig.validate(new ConfigSaveValidationContext(null));\n            assertThat(tfsMaterialConfig.errors().on(MATERIAL_NAME)).isEqualTo(\"Invalid material name '.bad-name-with-dot'. This must be alphanumeric and can contain underscores, hyphens and periods (however, it cannot start with a period). The maximum allowed length is 255 characters.\");\n        }\n\n        @Test\n        void shouldEnsureDestFilePathIsValid() {\n            TfsMaterialConfig tfsMaterialConfig = tfs(new GoCipher(), new UrlArgument(\"http://10.4.4.101:8080/tfs/Sample\"), \"loser\", \"CORPORATE\", \"passwd\", \"walk_this_path\");\n            tfsMaterialConfig.setConfigAttributes(Collections.singletonMap(FOLDER, \"../a\"));\n\n            tfsMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(tfsMaterialConfig.errors().on(FOLDER)).isEqualTo(\"Dest folder '../a' is not valid. It must be a sub-directory of the working folder.\");\n        }\n\n        @Test\n        void shouldEnsureUrlIsNotBlank() {\n            tfsMaterialConfig.setUrl(\"\");\n            tfsMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(tfsMaterialConfig.errors().on(ScmMaterialConfig.URL)).isEqualTo(\"URL cannot be blank\");\n        }\n\n        @Test\n        void shouldEnsureUrlIsNotNull() {\n            tfsMaterialConfig.setUrl(null);\n\n            tfsMaterialConfig.validate(new ConfigSaveValidationContext(null));\n\n            assertThat(tfsMaterialConfig.errors().on(URL)).isEqualTo(\"URL cannot be blank\");\n        }\n\n        @Test\n        void rejectsObviouslyWrongURL() {\n            assertTrue(validating(tfs(\"-url-not-starting-with-an-alphanumeric-character\")).errors().containsKey(TfsMaterialConfig.URL));\n            assertTrue(validating(tfs(\"_url-not-starting-with-an-alphanumeric-character\")).errors().containsKey(TfsMaterialConfig.URL));\n            assertTrue(validating(tfs(\"@url-not-starting-with-an-alphanumeric-character\")).errors().containsKey(TfsMaterialConfig.URL));\n\n            assertFalse(validating(tfs(\"url-starting-with-an-alphanumeric-character\")).errors().containsKey(TfsMaterialConfig.URL));\n            assertFalse(validating(tfs(\"#{url}\")).errors().containsKey(TfsMaterialConfig.URL));\n        }\n\n        private TfsMaterialConfig validating(TfsMaterialConfig tfs) {\n            tfs.validate(new ConfigSaveValidationContext(null));\n            return tfs;\n        }\n    }\n\n    @Test\n    void shouldEncryptTfsPasswordAndMarkPasswordAsNull() throws Exception {\n        TfsMaterialConfig materialConfig = tfs(null, new UrlArgument(\"http://10.4.4.101:8080/tfs/Sample\"), \"loser\", \"CORPORATE\", \"password\", \"walk_this_path\");\n        materialConfig.ensureEncrypted();\n\n        Object passwordFieldValue = ReflectionUtil.getField(materialConfig, \"password\");\n        assertThat(passwordFieldValue).isNull();\n        assertThat(materialConfig.getPassword()).isEqualTo(\"password\");\n        assertThat(materialConfig.getEncryptedPassword()).isEqualTo(new GoCipher().encrypt(\"password\"));\n    }\n\n    @Test\n    void shouldDecryptTfsPassword() throws Exception {\n        String encryptedPassword = new GoCipher().encrypt(\"plain-text-password\");\n        TfsMaterialConfig materialConfig = tfs(null, new UrlArgument(\"http://10.4.4.101:8080/tfs/Sample\"), \"loser\", \"CORPORATE\", \"secret\", \"walk_this_path\");\n        ReflectionUtil.setField(materialConfig, \"encryptedPassword\", encryptedPassword);\n\n        materialConfig.ensureEncrypted();\n        assertThat(materialConfig.getPassword()).isEqualTo(\"plain-text-password\");\n    }\n\n    @Test\n    void shouldNotDecryptTfsPasswordIfPasswordIsNotNull() throws Exception {\n        GoCipher mockGoCipher = mock(GoCipher.class);\n        when(mockGoCipher.encrypt(\"password\")).thenReturn(\"encrypted\");\n        when(mockGoCipher.decrypt(\"encrypted\")).thenReturn(\"password\");\n\n        TfsMaterialConfig materialConfig = tfs(mockGoCipher, new UrlArgument(\"http://10.4.4.101:8080/tfs/Sample\"), \"loser\", \"CORPORATE\", \"password\", \"walk_this_path\");\n        materialConfig.ensureEncrypted();\n        when(mockGoCipher.encrypt(\"new_password\")).thenReturn(\"new_encrypted\");\n        materialConfig.setPassword(\"new_password\");\n        when(mockGoCipher.decrypt(\"new_encrypted\")).thenReturn(\"new_password\");\n\n        assertThat(materialConfig.getPassword()).isEqualTo(\"new_password\");\n    }\n\n    @Test\n    void shouldErrorOutIfDecryptionFails() throws CryptoException {\n        GoCipher mockGoCipher = mock(GoCipher.class);\n        String fakeCipherText = \"fake cipher text\";\n        when(mockGoCipher.decrypt(fakeCipherText)).thenThrow(new CryptoException(\"exception\"));\n        TfsMaterialConfig materialConfig = tfs(mockGoCipher, new UrlArgument(\"http://10.4.4.101:8080/tfs/Sample\"), \"loser\", \"CORPORATE\", \"passwd\", \"walk_this_path\");\n        ReflectionUtil.setField(materialConfig, \"encryptedPassword\", fakeCipherText);\n        try {\n            materialConfig.getPassword();\n            fail(\"Should have thrown up\");\n        } catch (Exception e) {\n            assertThat(e.getMessage()).isEqualTo(\"Could not decrypt the password to get the real password\");\n        }\n    }\n\n    @Test\n    void shouldReturnTheUrl() {\n        String url = \"git@github.com/my/repo\";\n        TfsMaterialConfig config = tfs();\n\n        config.setUrl(url);\n\n        assertThat(config.getUrl()).isEqualTo(url);\n    }\n\n    @Test\n    void shouldReturnNullIfUrlForMaterialNotSpecified() {\n        TfsMaterialConfig config = tfs();\n\n        assertThat(config.getUrl()).isNull();\n    }\n\n    @Test\n    void shouldHandleNullWhenSettingUrlForAMaterial() {\n        TfsMaterialConfig config = tfs();\n\n        config.setUrl(null);\n\n        assertThat(config.getUrl()).isNull();\n    }\n\n    @Nested\n    class ValidateTree {\n        @BeforeEach\n        void setUp() {\n            tfsMaterialConfig.setUrl(\"/foo/bar\");\n        }\n\n        @Test\n        void shouldCallValidate() {\n            final MaterialConfig materialConfig = spy(tfsMaterialConfig);\n            final ValidationContext validationContext = mockValidationContextForSecretParams();\n\n            materialConfig.validateTree(validationContext);\n\n            verify(materialConfig).validate(validationContext);\n        }\n\n        @Test\n        void shouldFailIfEncryptedPasswordIsIncorrect() {\n            tfsMaterialConfig.setEncryptedPassword(\"encryptedPassword\");\n\n            final boolean validationResult = tfsMaterialConfig.validateTree(new ConfigSaveValidationContext(null));\n\n            assertThat(validationResult).isFalse();\n            assertThat(tfsMaterialConfig.errors().on(\"encryptedPassword\")).isEqualTo(\"Encrypted password value for TfsMaterial with url '/foo/bar' is invalid. This usually happens when the cipher text is modified to have an invalid value.\");\n        }\n\n        @Test\n        void shouldPassIfPasswordIsNotSpecifiedAsSecretParams() {\n            tfsMaterialConfig.setPassword(\"badger\");\n\n            assertThat(tfsMaterialConfig.validateTree(null)).isTrue();\n            assertThat(tfsMaterialConfig.errors().getAll()).isEmpty();\n        }\n    }\n\n    private ValidationContext mockValidationContextForSecretParams(SecretConfig... secretConfigs) {\n        final ValidationContext validationContext = mock(ValidationContext.class);\n        final CruiseConfig cruiseConfig = mock(CruiseConfig.class);\n        when(validationContext.getCruiseConfig()).thenReturn(cruiseConfig);\n        when(cruiseConfig.getSecretConfigs()).thenReturn(new SecretConfigs(secretConfigs));\n        return validationContext;\n    }\n}\n"], "filenames": ["config/config-api/src/main/java/com/thoughtworks/go/util/command/UrlArgument.java", "config/config-api/src/test/java/com/thoughtworks/go/config/materials/git/GitMaterialConfigTest.java", "config/config-api/src/test/java/com/thoughtworks/go/config/materials/mercurial/HgMaterialConfigTest.java", "config/config-api/src/test/java/com/thoughtworks/go/config/materials/svn/SvnMaterialConfigTest.java", "config/config-api/src/test/java/com/thoughtworks/go/config/materials/tfs/TfsMaterialConfigTest.java"], "buggy_code_start_loc": [31, 277, 302, 170, 178], "buggy_code_end_loc": [32, 277, 302, 170, 178], "fixing_code_start_loc": [31, 278, 303, 171, 179], "fixing_code_end_loc": [32, 279, 304, 172, 180], "type": "CWE-77", "message": "An issue was discovered in ThoughtWorks GoCD before 21.3.0. An attacker with privileges to create a new pipeline on a GoCD server can abuse a command-line injection in the Git URL \"Test Connection\" feature to execute arbitrary code.", "other": {"cve": {"id": "CVE-2021-43286", "sourceIdentifier": "cve@mitre.org", "published": "2022-04-14T13:15:11.417", "lastModified": "2022-04-21T20:39:21.970", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in ThoughtWorks GoCD before 21.3.0. An attacker with privileges to create a new pipeline on a GoCD server can abuse a command-line injection in the Git URL \"Test Connection\" feature to execute arbitrary code."}, {"lang": "es", "value": "Se ha detectado un problema en ThoughtWorks GoCD versiones anteriores a 21.3.0. Un atacante con privilegios para crear un nuevo pipeline en un servidor GoCD puede abusar de una inyecci\u00f3n de l\u00ednea de comandos en la funci\u00f3n \"Test Connection\" de Git URL para ejecutar c\u00f3digo arbitrario"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:thoughtworks:gocd:*:*:*:*:*:*:*:*", "versionEndExcluding": "21.3.0", "matchCriteriaId": "96C28DAA-9A8B-46E3-9443-656B378A26D8"}]}]}], "references": [{"url": "https://blog.sonarsource.com/gocd-vulnerability-chain", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/gocd/gocd/commit/2b77b533abcbb79c8fc758dec9984305dc1ade42", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/gocd/gocd/commit/6fa9fb7a7c91e760f1adc2593acdd50f2d78676b", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.gocd.org/releases/#21-3-0", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Release Notes", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/gocd/gocd/commit/2b77b533abcbb79c8fc758dec9984305dc1ade42"}}