{"buggy_code": ["<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2021 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\ninclude ('../inc/includes.php');\nheader(\"Content-Type: text/html; charset=UTF-8\");\nHtml::header_nocache();\n\nSession::checkLoginUser();\n\n// Read parameters\n$context  = $_POST['context'] ?? '';\n$itemtype = $_POST[\"itemtype\"] ?? '';\n\n// Check for required params\nif (empty($itemtype)) {\n   http_response_code(400);\n   Toolbox::logWarning(\"Bad request: itemtype cannot be empty\");\n   die;\n}\n\n// Check if itemtype is valid in the given context\nif ($context == \"impact\") {\n   $isValidItemtype = Impact::isEnabled($itemtype);\n} else {\n   $isValidItemtype = CommonITILObject::isPossibleToAssignType($itemtype);\n}\n\n// Make a select box\nif ($isValidItemtype) {\n   $table = getTableForItemType($itemtype);\n\n   $rand = mt_rand();\n   if (isset($_POST[\"rand\"])) {\n      $rand = $_POST[\"rand\"];\n   }\n\n   // Message for post-only\n   if (!isset($_POST[\"admin\"]) || ($_POST[\"admin\"] == 0)) {\n      echo \"<br>\".__('Enter the first letters (user, item name, serial or asset number)');\n   }\n   echo \"<br>\";\n   $field_id = Html::cleanId(\"dropdown_\".$_POST['myname'].$rand);\n   $p = [\n      'itemtype'            => $itemtype,\n      'entity_restrict'     => $_POST['entity_restrict'],\n      'table'               => $table,\n      'multiple'            => $_POST[\"multiple\"],\n      'myname'              => $_POST[\"myname\"],\n      'rand'                => $_POST[\"rand\"],\n      '_idor_token'         => Session::getNewIDORToken($itemtype),\n   ];\n\n   if (isset($_POST[\"used\"]) && !empty($_POST[\"used\"])) {\n      if (isset($_POST[\"used\"][$itemtype])) {\n         $p[\"used\"] = $_POST[\"used\"][$itemtype];\n      }\n   }\n\n   // Add context if defined\n   if (!empty($context)) {\n      $p[\"context\"] = $context;\n   }\n\n   echo Html::jsAjaxDropdown($_POST['myname'], $field_id,\n                             $CFG_GLPI['root_doc'].\"/ajax/getDropdownFindNum.php\",\n                             $p);\n\n   // Auto update summary of active or just solved tickets\n   $params = ['items_id' => '__VALUE__',\n                   'itemtype' => $_POST['itemtype']];\n   Ajax::updateItemOnSelectEvent($field_id, \"item_ticket_selection_information$rand\",\n                                 $CFG_GLPI[\"root_doc\"].\"/ajax/ticketiteminformation.php\",\n                                 $params);\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2021 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access this file directly\");\n}\n\n/**\n * Computer_Item Class\n *\n * Relation between Computer and Items (monitor, printer, phone, peripheral only)\n**/\nclass Computer_Item extends CommonDBRelation{\n\n   // From CommonDBRelation\n   static public $itemtype_1          = 'Computer';\n   static public $items_id_1          = 'computers_id';\n\n   static public $itemtype_2          = 'itemtype';\n   static public $items_id_2          = 'items_id';\n   static public $checkItem_2_Rights  = self::HAVE_VIEW_RIGHT_ON_ITEM;\n\n\n   function getForbiddenStandardMassiveAction() {\n\n      $forbidden   = parent::getForbiddenStandardMassiveAction();\n      $forbidden[] = 'update';\n      return $forbidden;\n   }\n\n\n   /**\n    * Count connection for a Computer and an itemtype\n    *\n    * @since 0.84\n    *\n    * @param $comp   Computer object\n    * @param $item   CommonDBTM object\n    *\n    * @return integer: count\n   **/\n   static function countForAll(Computer $comp, CommonDBTM $item) {\n\n      return countElementsInTable('glpi_computers_items',\n                                  ['computers_id' => $comp->getField('id'),\n                                   'itemtype'     => $item->getType(),\n                                   'items_id'     => $item->getField('id')]);\n   }\n\n\n   function prepareInputForAdd($input) {\n      global $CFG_GLPI;\n\n      $item = static::getItemFromArray(static::$itemtype_2, static::$items_id_2, $input);\n      if (!($item instanceof CommonDBTM)\n          || (($item->getField('is_global') == 0)\n              && ($this->countForItem($item) > 0))) {\n         return false;\n      }\n\n      $comp = static::getItemFromArray(static::$itemtype_1, static::$items_id_1, $input);\n      if (!($comp instanceof Computer)\n          || (self::countForAll($comp, $item) >0)) {\n         // no duplicates\n         return false;\n      }\n\n      if (!$item->getField('is_global')) {\n         // Autoupdate some fields - should be in post_addItem (here to avoid more DB access)\n         $updates = [];\n\n         if ($CFG_GLPI[\"is_location_autoupdate\"]\n             && ($comp->fields['locations_id'] != $item->getField('locations_id'))) {\n\n            $updates['locations_id'] = addslashes($comp->fields['locations_id']);\n            Session::addMessageAfterRedirect(\n                  __('Location updated. The connected items have been moved in the same location.'),\n                                             true);\n         }\n         if (($CFG_GLPI[\"is_user_autoupdate\"]\n              && ($comp->fields['users_id'] != $item->getField('users_id')))\n             || ($CFG_GLPI[\"is_group_autoupdate\"]\n                 && ($comp->fields['groups_id'] != $item->getField('groups_id')))) {\n\n            if ($CFG_GLPI[\"is_user_autoupdate\"]) {\n               $updates['users_id'] = $comp->fields['users_id'];\n            }\n            if ($CFG_GLPI[\"is_group_autoupdate\"]) {\n               $updates['groups_id'] = $comp->fields['groups_id'];\n            }\n            Session::addMessageAfterRedirect(\n               __('User or group updated. The connected items have been moved in the same values.'),\n                                             true);\n         }\n\n         if ($CFG_GLPI[\"is_contact_autoupdate\"]\n             && (($comp->fields['contact'] != $item->getField('contact'))\n                 || ($comp->fields['contact_num'] != $item->getField('contact_num')))) {\n\n            $updates['contact']     = addslashes($comp->fields['contact']);\n            $updates['contact_num'] = addslashes($comp->fields['contact_num']);\n            Session::addMessageAfterRedirect(\n               __('Alternate username updated. The connected items have been updated using this alternate username.'),\n                                             true);\n         }\n\n         if (($CFG_GLPI[\"state_autoupdate_mode\"] < 0)\n             && ($comp->fields['states_id'] != $item->getField('states_id'))) {\n\n            $updates['states_id'] = $comp->fields['states_id'];\n            Session::addMessageAfterRedirect(\n                     __('Status updated. The connected items have been updated using this status.'),\n                                             true);\n         }\n\n         if (($CFG_GLPI[\"state_autoupdate_mode\"] > 0)\n             && ($item->getField('states_id') != $CFG_GLPI[\"state_autoupdate_mode\"])) {\n\n            $updates['states_id'] = $CFG_GLPI[\"state_autoupdate_mode\"];\n         }\n\n         if (count($updates)) {\n            $updates['id'] = $input['items_id'];\n            $history = true;\n            if (isset($input['_no_history']) && $input['_no_history']) {\n               $history = false;\n            }\n            $item->update($updates, $history);\n         }\n      }\n      return parent::prepareInputForAdd($input);\n   }\n\n\n   function cleanDBonPurge() {\n      global $CFG_GLPI;\n\n      if (!isset($this->input['_no_auto_action'])) {\n         //Get the computer name\n         $computer = new Computer();\n         $computer->getFromDB($this->fields['computers_id']);\n\n         //Get device fields\n         if ($device = getItemForItemtype($this->fields['itemtype'])) {\n            if ($device->getFromDB($this->fields['items_id'])) {\n\n               if (!$device->getField('is_global')) {\n                  $updates = [];\n                  if ($CFG_GLPI[\"is_location_autoclean\"] && $device->isField('locations_id')) {\n                     $updates['locations_id'] = 0;\n                  }\n                  if ($CFG_GLPI[\"is_user_autoclean\"] && $device->isField('users_id')) {\n                     $updates['users_id'] = 0;\n                  }\n                  if ($CFG_GLPI[\"is_group_autoclean\"] && $device->isField('groups_id')) {\n                     $updates['groups_id'] = 0;\n                  }\n                  if ($CFG_GLPI[\"is_contact_autoclean\"] && $device->isField('contact')) {\n                     $updates['contact'] = \"\";\n                  }\n                  if ($CFG_GLPI[\"is_contact_autoclean\"] && $device->isField('contact_num')) {\n                     $updates['contact_num'] = \"\";\n                  }\n                  if (($CFG_GLPI[\"state_autoclean_mode\"] < 0)\n                      && $device->isField('states_id')) {\n                     $updates['states_id'] = 0;\n                  }\n\n                  if (($CFG_GLPI[\"state_autoclean_mode\"] > 0)\n                      && $device->isField('states_id')\n                      && ($device->getField('states_id') != $CFG_GLPI[\"state_autoclean_mode\"])) {\n\n                     $updates['states_id'] = $CFG_GLPI[\"state_autoclean_mode\"];\n                  }\n\n                  if (count($updates)) {\n                     $updates['id'] = $this->fields['items_id'];\n                     $device->update($updates);\n                  }\n               }\n            }\n         }\n      }\n   }\n\n\n   static function getMassiveActionsForItemtype(array &$actions, $itemtype, $is_deleted = 0,\n                                                CommonDBTM $checkitem = null) {\n\n      $action_prefix = __CLASS__.MassiveAction::CLASS_ACTION_SEPARATOR;\n      $specificities = self::getRelationMassiveActionsSpecificities();\n\n      if (in_array($itemtype, $specificities['itemtypes'])) {\n         $actions[$action_prefix.'add']    = \"<i class='ma-icon fas fa-plug'></i>\".\n                                             _x('button', 'Connect');\n         $actions[$action_prefix.'remove'] = _x('button', 'Disconnect');\n      }\n      parent::getMassiveActionsForItemtype($actions, $itemtype, $is_deleted, $checkitem);\n   }\n\n\n   static function getRelationMassiveActionsSpecificities() {\n\n      $specificities              = parent::getRelationMassiveActionsSpecificities();\n\n      $specificities['itemtypes'] = ['Monitor', 'Peripheral', 'Phone', 'Printer'];\n\n      $specificities['select_items_options_2']['entity_restrict'] = $_SESSION['glpiactive_entity'];\n      $specificities['select_items_options_2']['onlyglobal']      = true;\n\n      $specificities['only_remove_all_at_once']                   = true;\n\n      // Set the labels for add_item and remove_item\n      $specificities['button_labels']['add']                      = _sx('button', 'Connect');\n      $specificities['button_labels']['remove']                   = _sx('button', 'Disconnect');\n\n      return $specificities;\n   }\n\n\n   /**\n   * Disconnect an item to its computer\n   *\n   * @param $item    CommonDBTM object: the Monitor/Phone/Peripheral/Printer\n   *\n   * @return boolean : action succeeded\n   */\n   function disconnectForItem(CommonDBTM $item) {\n      global $DB;\n\n      if ($item->getField('id')) {\n         $iterator = $DB->request([\n            'SELECT' => ['id'],\n            'FROM'   => $this->getTable(),\n            'WHERE'  => [\n               'itemtype'  => $item->getType(),\n               'items_id'  => $item->getID()\n            ]\n         ]);\n\n         if (count($iterator) > 0) {\n            $ok = true;\n            while ($data = $iterator->next()) {\n               if ($this->can($data[\"id\"], UPDATE)) {\n                  $ok &= $this->delete($data);\n               }\n            }\n            return $ok;\n         }\n      }\n      return false;\n   }\n\n\n   /**\n    *\n    * Print the form for computers or templates connections to printers, screens or peripherals\n    *\n    * @param Computer $comp         Computer object\n    * @param boolean  $withtemplate Template or basic item (default 0)\n    *\n    * @return void\n   **/\n   static function showForComputer(Computer $comp, $withtemplate = 0) {\n      global $CFG_GLPI;\n\n      $ID      = $comp->fields['id'];\n      $canedit = $comp->canEdit($ID);\n      $rand    = mt_rand();\n\n      $datas = [];\n      $used  = [];\n      foreach ($CFG_GLPI[\"directconnect_types\"] as $itemtype) {\n         $item = new $itemtype();\n         if ($item->canView()) {\n            $iterator = self::getTypeItems($ID, $itemtype);\n\n            while ($data = $iterator->next()) {\n               $data['assoc_itemtype'] = $itemtype;\n               $datas[]           = $data;\n               $used[$itemtype][] = $data['id'];\n            }\n         }\n      }\n      $number = count($datas);\n\n      if ($canedit\n          && !(!empty($withtemplate) && ($withtemplate == 2))) {\n         echo \"<div class='firstbloc'>\";\n         echo \"<form name='computeritem_form$rand' id='computeritem_form$rand' method='post'\n                action='\".Toolbox::getItemTypeFormURL(__CLASS__).\"'>\";\n\n         echo \"<table class='tab_cadre_fixe'>\";\n         echo \"<tr class='tab_bg_2'><th colspan='2'>\".__('Connect an item').\"</th></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\";\n         if (!empty($withtemplate)) {\n            echo \"<input type='hidden' name='_no_history' value='1'>\";\n         }\n         self::dropdownAllConnect('Computer', \"items_id\", $comp->fields[\"entities_id\"],\n                                  $withtemplate, $used);\n         echo \"</td><td class='center' width='20%'>\";\n         echo \"<input type='submit' name='add' value=\\\"\"._sx('button', 'Connect').\"\\\" class='submit'>\";\n         echo \"<input type='hidden' name='computers_id' value='\".$comp->fields['id'].\"'>\";\n         echo \"</td></tr>\";\n         echo \"</table>\";\n         Html::closeForm();\n         echo \"</div>\";\n      }\n\n      if ($number) {\n         echo \"<div class='spaced'>\";\n         if ($canedit) {\n            Html::openMassiveActionsForm('mass'.__CLASS__.$rand);\n            $massiveactionparams\n               = ['num_displayed'\n                           => min($_SESSION['glpilist_limit'], $number),\n                       'specific_actions'\n                           => ['purge' => _x('button', 'Disconnect')],\n                       'container'\n                           => 'mass'.__CLASS__.$rand];\n            Html::showMassiveActions($massiveactionparams);\n         }\n         echo \"<table class='tab_cadre_fixehov'>\";\n         $header_begin  = \"<tr>\";\n         $header_top    = '';\n         $header_bottom = '';\n         $header_end    = '';\n\n         if ($canedit) {\n            $header_top    .= \"<th width='10'>\".Html::getCheckAllAsCheckbox('mass'.__CLASS__.$rand);\n            $header_top    .= \"</th>\";\n            $header_bottom .= \"<th width='10'>\".Html::getCheckAllAsCheckbox('mass'.__CLASS__.$rand);\n            $header_bottom .=  \"</th>\";\n         }\n\n         $header_end .= \"<th>\"._n('Type', 'Types', 1).\"</th>\";\n         $header_end .= \"<th>\".__('Name').\"</th>\";\n         if (Plugin::haveImport()) {\n            $header_end .= \"<th>\".__('Automatic inventory').\"</th>\";\n         }\n         $header_end .= \"<th>\".Entity::getTypeName(1).\"</th>\";\n         $header_end .= \"<th>\".__('Serial number').\"</th>\";\n         $header_end .= \"<th>\".__('Inventory number').\"</th>\";\n         $header_end .= \"</tr>\";\n         echo $header_begin.$header_top.$header_end;\n\n         foreach ($datas as $data) {\n            $linkname = $data[\"name\"];\n            $itemtype = $data['assoc_itemtype'];\n            if ($_SESSION[\"glpiis_ids_visible\"] || empty($data[\"name\"])) {\n               $linkname = sprintf(__('%1$s (%2$s)'), $linkname, $data[\"id\"]);\n            }\n            $link = $itemtype::getFormURLWithID($data[\"id\"]);\n            $name = \"<a href=\\\"\".$link.\"\\\">\".$linkname.\"</a>\";\n\n            echo \"<tr class='tab_bg_1'>\";\n\n            if ($canedit) {\n               echo \"<td width='10'>\";\n               Html::showMassiveActionCheckBox(__CLASS__, $data[\"linkid\"]);\n               echo \"</td>\";\n            }\n            echo \"<td>\".$data['assoc_itemtype']::getTypeName(1).\"</td>\";\n            echo \"<td \".\n                  ((isset($data['is_deleted']) && $data['is_deleted'])?\"class='tab_bg_2_2'\":\"\").\n                 \">\".$name.\"</td>\";\n            if (Plugin::haveImport()) {\n               $dynamic_field = static::getTable() . '_is_dynamic';\n               echo \"<td>\".Dropdown::getYesNo($data[$dynamic_field]).\"</td>\";\n            }\n            echo \"<td>\".Dropdown::getDropdownName(\"glpi_entities\",\n                                                               $data['entities_id']);\n            echo \"</td>\";\n            echo \"<td>\".\n                   (isset($data[\"serial\"])? \"\".$data[\"serial\"].\"\" :\"-\").\"</td>\";\n            echo \"<td>\".\n                   (isset($data[\"otherserial\"])? \"\".$data[\"otherserial\"].\"\" :\"-\").\"</td>\";\n            echo \"</tr>\";\n         }\n         echo $header_begin.$header_bottom.$header_end;\n\n         echo \"</table>\";\n         if ($canedit && $number) {\n            $massiveactionparams['ontop'] = false;\n            Html::showMassiveActions($massiveactionparams);\n            Html::closeForm();\n         }\n         echo \"</div>\";\n      }\n   }\n\n\n   /**\n    * Prints a direct connection to a computer\n    *\n    * @param $item                     CommonDBTM object: the Monitor/Phone/Peripheral/Printer\n    * @param $withtemplate    integer  withtemplate param (default 0)\n    *\n    * @return void\n   **/\n   static function showForItem(CommonDBTM $item, $withtemplate = 0) {\n      // Prints a direct connection to a computer\n      global $DB;\n\n      $comp   = new Computer();\n      $ID     = $item->getField('id');\n\n      if (!$item->can($ID, READ)) {\n         return;\n      }\n      $canedit = $item->canEdit($ID);\n      $rand    = mt_rand();\n\n      // Is global connection ?\n      $global  = $item->getField('is_global');\n\n      $used    = [];\n      $compids = [];\n      $dynamic = [];\n      $result = $DB->request(\n         [\n            'SELECT' => ['id', 'computers_id', 'is_dynamic'],\n            'FROM'   => self::getTable(),\n            'WHERE'  => [\n               'itemtype'   => $item->getType(),\n               'items_id'   => $ID,\n               'is_deleted' => 0,\n            ]\n         ]\n      );\n      foreach ($result as $data) {\n         $compids[$data['id']] = $data['computers_id'];\n         $dynamic[$data['id']] = $data['is_dynamic'];\n         $used['Computer'][]   = $data['computers_id'];\n      }\n      $number = count($compids);\n      if ($canedit\n          && ($global || !$number)\n          && !(!empty($withtemplate) && ($withtemplate == 2))) {\n         echo \"<div class='firstbloc'>\";\n         echo \"<form name='computeritem_form$rand' id='computeritem_form$rand' method='post'\n                action='\".Toolbox::getItemTypeFormURL(__CLASS__).\"'>\";\n\n         echo \"<table class='tab_cadre_fixe'>\";\n         echo \"<tr class='tab_bg_2'><th colspan='2'>\".__('Connect a computer').\"</th></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td class='right'>\";\n         echo \"<input type='hidden' name='items_id' value='$ID'>\";\n         echo \"<input type='hidden' name='itemtype' value='\".$item->getType().\"'>\";\n         if ($item->isRecursive()) {\n            self::dropdownConnect('Computer', $item->getType(), \"computers_id\",\n                                  getSonsOf(\"glpi_entities\", $item->getEntityID()), 0, $used);\n         } else {\n            self::dropdownConnect('Computer', $item->getType(), \"computers_id\",\n                                  $item->getEntityID(), 0, $used);\n         }\n         echo \"</td><td class='center'>\";\n         echo \"<input type='submit' name='add' value=\\\"\"._sx('button', 'Connect').\"\\\" class='submit'>\";\n         echo \"</td></tr>\";\n         echo \"</table>\";\n         Html::closeForm();\n         echo \"</div>\";\n      }\n\n      echo \"<div class='spaced'>\";\n      if ($canedit && $number) {\n         Html::openMassiveActionsForm('mass'.__CLASS__.$rand);\n         $massiveactionparams\n            = ['num_displayed'\n                        => min($_SESSION['glpilist_limit'], $number),\n                    'specific_actions'\n                        => ['purge' => _x('button', 'Disconnect')],\n                    'container'\n                        => 'mass'.__CLASS__.$rand];\n         Html::showMassiveActions($massiveactionparams);\n      }\n      echo \"<table class='tab_cadre_fixehov'>\";\n\n      if ($number > 0) {\n         $header_begin  = \"<tr>\";\n         $header_top    = '';\n         $header_bottom = '';\n         $header_end    = '';\n\n         if ($canedit) {\n            $header_top    .= \"<th width='10'>\".Html::getCheckAllAsCheckbox('mass'.__CLASS__.$rand);\n            $header_top    .= \"</th>\";\n            $header_bottom .= \"<th width='10'>\".Html::getCheckAllAsCheckbox('mass'.__CLASS__.$rand);\n            $header_bottom .= \"</th>\";\n         }\n\n         $header_end .= \"<th>\".__('Name').\"</th>\";\n         if (Plugin::haveImport()) {\n            $header_end .= \"<th>\".__('Automatic inventory').\"</th>\";\n         }\n         $header_end .= \"<th>\".Entity::getTypeName(1).\"</th>\";\n         $header_end .= \"<th>\".__('Serial number').\"</th>\";\n         $header_end .= \"<th>\".__('Inventory number').\"</th>\";\n         $header_end .= \"</tr>\";\n         echo $header_begin.$header_top.$header_end;\n\n         foreach ($compids as $key => $compid) {\n            $comp->getFromDB($compid);\n\n            echo \"<tr class='tab_bg_1'>\";\n\n            if ($canedit) {\n               echo \"<td width='10'>\";\n               Html::showMassiveActionCheckBox(__CLASS__, $key);\n               echo \"</td>\";\n            }\n            echo \"<td \".\n                  ($comp->getField('is_deleted')?\"class='tab_bg_2_2'\":\"\").\n                 \">\".$comp->getLink().\"</td>\";\n            if (Plugin::haveImport()) {\n               echo \"<td>\".Dropdown::getYesNo($dynamic[$key]).\"</td>\";\n            }\n            echo \"<td class='center'>\".Dropdown::getDropdownName(\"glpi_entities\",\n                                                               $comp->getField('entities_id'));\n            echo \"</td>\";\n            echo \"<td class='center'>\".$comp->getField('serial').\"</td>\";\n            echo \"<td class='center'>\".$comp->getField('otherserial').\"</td>\";\n            echo \"</tr>\";\n         }\n         echo $header_begin.$header_bottom.$header_end;\n      } else {\n         echo \"<tr><td class='tab_bg_1 b'><i>\".__('Not connected').\"</i>\";\n         echo \"</td></tr>\";\n      }\n\n      echo \"</table>\";\n      if ($canedit && $number) {\n         $massiveactionparams['ontop'] = false;\n         Html::showMassiveActions($massiveactionparams);\n         Html::closeForm();\n      }\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Unglobalize an item : duplicate item and connections\n    *\n    * @param $item   CommonDBTM object to unglobalize\n   **/\n   static function unglobalizeItem(CommonDBTM $item) {\n      global $DB;\n\n      // Update item to unit management :\n      if ($item->getField('is_global')) {\n         $input = ['id'        => $item->fields['id'],\n                        'is_global' => 0];\n         $item->update($input);\n\n         // Get connect_wire for this connection\n         $iterator = $DB->request([\n            'SELECT' => ['id'],\n            'FROM'   => self::getTable(),\n            'WHERE'  => [\n               'items_id'  => $item->getID(),\n               'itemtype'  => $item->getType()\n            ]\n         ]);\n\n         $first = true;\n         while ($data = $iterator->next()) {\n            if ($first) {\n               $first = false;\n               unset($input['id']);\n               $conn = new self();\n            } else {\n               $temp = clone $item;\n               unset($temp->fields['id']);\n               if ($newID=$temp->add($temp->fields)) {\n                  $conn->update(['id'       => $data['id'],\n                                 'items_id' => $newID]);\n               }\n            }\n         }\n      }\n   }\n\n\n   /**\n   * Make a select box for connections\n   *\n   * @since 0.84\n   *\n   * @param string            $fromtype        from where the connection is\n   * @param string            $myname          select name\n   * @param integer|integer[] $entity_restrict Restrict to a defined entity (default = -1)\n   * @param boolean           $onlyglobal      display only global devices (used for templates) (default 0)\n   * @param integer[]         $used            Already used items ID: not to display in dropdown\n   *\n   * @return integer Random generated number used for select box ID (select box HTML is printed)\n   */\n   static function dropdownAllConnect($fromtype, $myname, $entity_restrict = -1,\n                                      $onlyglobal = 0, $used = []) {\n      global $CFG_GLPI;\n\n      $rand = mt_rand();\n\n      $options               = [];\n      $options['checkright'] = true;\n      $options['name']       = 'itemtype';\n\n      $rand = Dropdown::showItemType($CFG_GLPI['directconnect_types'], $options);\n      if ($rand) {\n         $params = ['itemtype'        => '__VALUE__',\n                         'fromtype'        => $fromtype,\n                         'value'           => 0,\n                         'myname'          => $myname,\n                         'onlyglobal'      => $onlyglobal,\n                         'entity_restrict' => $entity_restrict,\n                         'used'            => $used];\n\n         if ($onlyglobal) {\n            $params['condition'] = ['is_global' => 1];\n         }\n         Ajax::updateItemOnSelectEvent(\"dropdown_itemtype$rand\", \"show_$myname$rand\",\n                                       $CFG_GLPI[\"root_doc\"].\"/ajax/dropdownConnect.php\", $params);\n\n         echo \"<br><div id='show_$myname$rand'>&nbsp;</div>\\n\";\n      }\n      return $rand;\n\n   }\n\n\n   /**\n   * Make a select box for connections\n   *\n   * @param string            $itemtype        type to connect\n   * @param string            $fromtype        from where the connection is\n   * @param string            $myname          select name\n   * @param integer|integer[] $entity_restrict Restrict to a defined entity (default = -1)\n   * @param boolean           $onlyglobal      display only global devices (used for templates) (default 0)\n   * @param integer[]         $used            Already used items ID: not to display in dropdown\n   *\n   * @return integer Random generated number used for select box ID (select box HTML is printed)\n   */\n   static function dropdownConnect($itemtype, $fromtype, $myname, $entity_restrict = -1,\n                                   $onlyglobal = 0, $used = []) {\n      global $CFG_GLPI;\n\n      $rand     = mt_rand();\n\n      $field_id = Html::cleanId(\"dropdown_\".$myname.$rand);\n      $param    = [\n         'entity_restrict' => $entity_restrict,\n         'fromtype'        => $fromtype,\n         'itemtype'        => $itemtype,\n         'onlyglobal'      => $onlyglobal,\n         'used'            => $used,\n         '_idor_token'     => Session::getNewIDORToken($itemtype),\n      ];\n\n      echo Html::jsAjaxDropdown($myname, $field_id,\n                                $CFG_GLPI['root_doc'].\"/ajax/getDropdownConnect.php\",\n                                $param);\n\n      return $rand;\n   }\n\n\n   function getTabNameForItem(CommonGLPI $item, $withtemplate = 0) {\n\n      // can exists for Template\n      if ($item->can($item->getField('id'), READ)) {\n         $nb = 0;\n         switch ($item->getType()) {\n            case 'Phone' :\n            case 'Printer' :\n            case 'Peripheral' :\n            case 'Monitor' :\n               if (Computer::canView()) {\n                  if ($_SESSION['glpishow_count_on_tabs']) {\n                     $nb = self::countForItem($item);\n                  }\n                  return self::createTabEntry(_n('Connection', 'Connections', Session::getPluralNumber()),\n                                              $nb);\n               }\n               break;\n\n            case 'Computer' :\n               if (Phone::canView()\n                   || Printer::canView()\n                   || Peripheral::canView()\n                   || Monitor::canView()) {\n                  if ($_SESSION['glpishow_count_on_tabs']) {\n                     $nb = self::countForMainItem($item);\n                  }\n                  return self::createTabEntry(_n('Connection', 'Connections', Session::getPluralNumber()),\n                                              $nb);\n               }\n               break;\n         }\n      }\n      return '';\n   }\n\n\n   static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0) {\n\n      switch ($item->getType()) {\n         case 'Phone' :\n         case 'Printer' :\n         case 'Peripheral' :\n         case 'Monitor' :\n            self::showForItem($item, $withtemplate);\n            return true;\n\n         case 'Computer' :\n            self::showForComputer($item, $withtemplate);\n            return true;\n      }\n   }\n\n\n   /**\n    * Duplicate connected items to computer from an item template to its clone\n    *\n    * @deprecated 9.5\n    * @since 0.84\n    *\n    * @param integer $oldid ID of the item to clone\n    * @param integer $newid ID of the item cloned\n   **/\n   static function cloneComputer($oldid, $newid) {\n      global $DB;\n\n      Toolbox::deprecated('Use clone');\n      $iterator = $DB->request([\n         'FROM'   => self::getTable(),\n         'WHERE'  => ['computers_id' => $oldid]\n      ]);\n\n      while ($data = $iterator->next()) {\n         $conn = new Computer_Item();\n         $conn->add(['computers_id' => $newid,\n                     'itemtype'     => $data[\"itemtype\"],\n                     'items_id'     => $data[\"items_id\"]]);\n      }\n   }\n\n\n   /**\n    * Duplicate connected items to item from an item template to its clone\n    *\n    * @deprecated 9.5\n    * @since 0.83.3\n    *\n    * @param string  $itemtype type of the item to clone\n    * @param integer $oldid    ID of the item to clone\n    * @param integer $newid    ID of the item cloned\n   **/\n   static function cloneItem($itemtype, $oldid, $newid) {\n      global $DB;\n\n      Toolbox::deprecated('Use clone');\n      $iterator = $DB->request([\n         'FROM'   => self::getTable(),\n         'WHERE'  => [\n            'itemtype'  => $itemtype,\n            'items_id'  => $oldid\n         ]\n      ]);\n\n      while ($data = $iterator->next()) {\n         $conn = new self();\n         $conn->add(['computers_id' => $data[\"computers_id\"],\n                     'itemtype'     => $data[\"itemtype\"],\n                     'items_id'     => $newid]);\n      }\n   }\n\n\n   /**\n    * @since 9.1.7\n    *\n    * @param CommonDBTM $item     item linked to the computer to check\n    * @param integer[]  $entities entities to check\n    *\n    * @return boolean\n   **/\n   static function canUnrecursSpecif(CommonDBTM $item, $entities) {\n      global $DB;\n\n      // RELATION : computers -> items\n      $iterator = $DB->request([\n         'SELECT' => [\n            'itemtype',\n            new \\QueryExpression('GROUP_CONCAT(DISTINCT '.$DB->quoteName('items_id').') AS ids'),\n            'computers_id'\n         ],\n         'FROM'   => self::getTable(),\n         'WHERE'  => [\n            'itemtype'  => $item->getType(),\n            'items_id'  => $item->fields['id']\n         ],\n         'GROUP'  => 'itemtype'\n      ]);\n\n      while ($data = $iterator->next()) {\n         if (countElementsInTable(\"glpi_computers\",\n                                    ['id' => $data[\"computers_id\"],\n                                    'NOT' => ['entities_id' => $entities]]) > 0) {\n            return false;\n         }\n      }\n      return true;\n   }\n\n\n   protected static function getListForItemParams(CommonDBTM $item, $noent = false) {\n      $params = parent::getListForItemParams($item, $noent);\n      $params['WHERE'][self::getTable() . '.is_deleted'] = 0;\n      return $params;\n   }\n\n   /**\n    * Get SELECT param for getTypeItemsQueryParams\n    *\n    * @param CommonDBTM $item\n    *\n    * @return array\n    */\n   public static function getTypeItemsQueryParams_Select(CommonDBTM $item): array {\n      $table = static::getTable();\n      $select = parent::getTypeItemsQueryParams_Select($item);\n      $select[] = \"$table.is_dynamic AS {$table}_is_dynamic\";\n\n      return $select;\n   }\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2021 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access this file directly\");\n}\n\nclass Dropdown {\n\n   //Empty value displayed in a dropdown\n   const EMPTY_VALUE = '-----';\n\n   /**\n    * Print out an HTML \"<select>\" for a dropdown with preselected value\n    *\n    * @param string $itemtype  itemtype used for create dropdown\n    * @param array  $options   array of possible options:\n    *    - name                 : string / name of the select (default is depending itemtype)\n    *    - value                : integer / preselected value (default -1)\n    *    - comments             : boolean / is the comments displayed near the dropdown (default true)\n    *    - toadd                : array / array of specific values to add at the begining\n    *    - entity               : integer or array / restrict to a defined entity or array of entities\n    *                                                (default -1 : no restriction)\n    *    - entity_sons          : boolean / if entity restrict specified auto select its sons\n    *                                       only available if entity is a single value not an array\n    *                                       (default false)\n    *    - toupdate             : array / Update a specific item on select change on dropdown\n    *                                     (need value_fieldname, to_update,\n    *                                      url (see Ajax::updateItemOnSelectEvent for information)\n    *                                      and may have moreparams)\n    *    - used                 : array / Already used items ID: not to display in dropdown\n    *                                    (default empty)\n    *    - on_change            : string / value to transmit to \"onChange\"\n    *    - rand                 : integer / already computed rand value\n    *    - condition            : array / aditional SQL condition to limit display\n    *    - displaywith          : array / array of field to display with request\n    *    - emptylabel           : Empty choice's label (default self::EMPTY_VALUE)\n    *    - display_emptychoice  : Display emptychoice ? (default true)\n    *    - display              : boolean / display or get string (default true)\n    *    - width                : specific width needed (default auto adaptive)\n    *    - permit_select_parent : boolean / for tree dropdown permit to see parent items\n    *                                       not available by default (default false)\n    *    - specific_tags        : array of HTML5 tags to add the the field\n    *    - url                  : url of the ajax php code which should return the json data to show in\n    *                                       the dropdown\n    *\n    * @return boolean : false if error and random id if OK\n    *\n    * @since 9.5.0 Usage of string in condition option is removed\n   **/\n   static function show($itemtype, $options = []) {\n      global $CFG_GLPI;\n\n      if ($itemtype && !($item = getItemForItemtype($itemtype))) {\n         return false;\n      }\n\n      $table = $item->getTable();\n\n      $params['name']                 = $item->getForeignKeyField();\n      $params['value']                = (($itemtype == 'Entity') ? $_SESSION['glpiactive_entity'] : '');\n      $params['comments']             = true;\n      $params['entity']               = -1;\n      $params['entity_sons']          = false;\n      $params['toupdate']             = '';\n      $params['width']                = '';\n      $params['used']                 = [];\n      $params['toadd']                = [];\n      $params['on_change']            = '';\n      $params['condition']            = [];\n      $params['rand']                 = mt_rand();\n      $params['displaywith']          = [];\n      //Parameters about choice 0\n      //Empty choice's label\n      $params['emptylabel']           = self::EMPTY_VALUE;\n      //Display emptychoice ?\n      $params['display_emptychoice']  = ($itemtype != 'Entity');\n      $params['placeholder']          = '';\n      $params['display']              = true;\n      $params['permit_select_parent'] = false;\n      $params['addicon']              = true;\n      $params['specific_tags']        = [];\n      $params['url']                  = $CFG_GLPI['root_doc'].\"/ajax/getDropdownValue.php\";\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $params[$key] = $val;\n         }\n      }\n      $output       = '';\n      $name         = $params['emptylabel'];\n      $comment      = \"\";\n\n      // Check default value for dropdown : need to be a numeric (or null)\n      if ($params['value'] !== null\n          && ((strlen($params['value']) == 0) || !is_numeric($params['value']) && $params['value'] != 'mygroups')) {\n         $params['value'] = 0;\n      }\n\n      if (isset($params['toadd'][$params['value']])) {\n         $name = $params['toadd'][$params['value']];\n      } else if (($params['value'] > 0)\n                 || (($itemtype == \"Entity\")\n                     && ($params['value'] >= 0))) {\n         $tmpname = self::getDropdownName($table, $params['value'], 1);\n\n         if ($tmpname[\"name\"] != \"&nbsp;\") {\n            $name    = $tmpname[\"name\"];\n            $comment = $tmpname[\"comment\"];\n         }\n      }\n\n      // Manage entity_sons\n      if (!($params['entity'] < 0)\n          && $params['entity_sons']) {\n         if (is_array($params['entity'])) {\n            // translation not needed - only for debug\n            $output .= \"entity_sons options is not available with entity option as array\";\n         } else {\n            $params['entity'] = getSonsOf('glpi_entities', $params['entity']);\n         }\n      }\n\n      $field_id = Html::cleanId(\"dropdown_\".$params['name'].$params['rand']);\n\n      // Manage condition\n      if (!empty($params['condition'])) {\n         // Put condition in session and replace it by its key\n         // This is made to prevent passing to many parameters when calling the ajax script\n         $params['condition'] = static::addNewCondition($params['condition']);\n      }\n\n      if (!$item instanceof CommonTreeDropdown) {\n         $name = Toolbox::unclean_cross_side_scripting_deep($name);\n      }\n      $p = ['value'                => $params['value'],\n            'valuename'            => $name,\n            'width'                => $params['width'],\n            'itemtype'             => $itemtype,\n            'display_emptychoice'  => $params['display_emptychoice'],\n            'placeholder'          => $params['placeholder'],\n            'displaywith'          => $params['displaywith'],\n            'emptylabel'           => $params['emptylabel'],\n            'condition'            => $params['condition'],\n            'used'                 => $params['used'],\n            'toadd'                => $params['toadd'],\n            'entity_restrict'      => (is_array($params['entity']) ? json_encode(array_values($params['entity'])) : $params['entity']),\n            'on_change'            => $params['on_change'],\n            'permit_select_parent' => $params['permit_select_parent'],\n            'specific_tags'        => $params['specific_tags'],\n            '_idor_token'          => Session::getNewIDORToken($itemtype),\n      ];\n\n      $output = \"<span class='no-wrap'>\";\n      $output.= Html::jsAjaxDropdown($params['name'], $field_id,\n                                     $params['url'],\n                                     $p);\n      // Display comment\n      if ($params['comments']) {\n         $comment_id      = Html::cleanId(\"comment_\".$params['name'].$params['rand']);\n         $link_id         = Html::cleanId(\"comment_link_\".$params['name'].$params['rand']);\n         $kblink_id       = Html::cleanId(\"kb_link_\".$params['name'].$params['rand']);\n         $options_tooltip = ['contentid' => $comment_id,\n                                  'linkid'    => $link_id,\n                                  'display'   => false];\n\n         if ($item->canView()) {\n            if ($params['value']\n                 && $item->getFromDB($params['value'])\n                 && $item->canViewItem()) {\n               $options_tooltip['link']       = $item->getLinkURL();\n            } else {\n               $options_tooltip['link']       = $item->getSearchURL();\n            }\n         }\n\n         if (empty($comment)) {\n            $comment = Toolbox::ucfirst(\n               sprintf(\n                  __('Show %1$s'),\n                  $item::getTypeName(Session::getPluralNumber())\n               )\n            );\n         }\n         $output .= \"&nbsp;\".Html::showToolTip($comment, $options_tooltip);\n\n         if (($item instanceof CommonDropdown)\n             && $item->canCreate()\n             && !isset($_REQUEST['_in_modal'])\n             && $params['addicon']) {\n\n               $output .= \"<span class='fa fa-plus-circle pointer' title=\\\"\".__s('Add').\"\\\"\n                            onClick=\\\"\".Html::jsGetElementbyID('add_'.$field_id).\".dialog('open');\\\"\n                           ><span class='sr-only'>\" . __s('Add') . \"</span></span>\";\n               $output .= Ajax::createIframeModalWindow('add_'.$field_id,\n                                                        $item->getFormURL(),\n                                                        ['display' => false]);\n         }\n\n         // Display specific Links\n         if ($itemtype == \"Supplier\") {\n            if ($item->getFromDB($params['value'])) {\n               $output .= $item->getLinks();\n            }\n         }\n\n         if ($itemtype == 'Location') {\n            $output .= \"<span class='fa fa-globe-americas pointer' title='\".__s('Display on map').\"' onclick='showMapForLocation(this)' data-fid='$field_id'></span>\";\n         }\n\n         $paramscomment = [\n            'value'       => '__VALUE__',\n            'itemtype'    => $itemtype,\n            '_idor_token' => Session::getNewIDORToken($itemtype)\n         ];\n         if ($item->isField('knowbaseitemcategories_id')\n             && Session::haveRight('knowbase', READ)) {\n\n            if (method_exists($item, 'getLinks')) {\n               $output .= \"<span id='$kblink_id'>\";\n               $output .= '&nbsp;'.$item->getLinks();\n               $output .= \"</span>\";\n               $paramscomment['withlink'] = $kblink_id;\n               $output .= Ajax::updateItemOnSelectEvent($field_id, $kblink_id,\n                                                        $CFG_GLPI[\"root_doc\"].\"/ajax/kblink.php\",\n                                                        $paramscomment, false);\n            }\n         }\n\n         if ($item->canView()) {\n            $paramscomment['withlink'] = $link_id;\n         }\n\n         $output .= Ajax::updateItemOnSelectEvent($field_id, $comment_id,\n                                                  $CFG_GLPI[\"root_doc\"].\"/ajax/comments.php\",\n                                                  $paramscomment, false);\n      }\n      $output .= Ajax::commonDropdownUpdateItem($params, false);\n      $output .= \"</span>\";\n      if ($params['display']) {\n         echo $output;\n         return $params['rand'];\n      }\n      return $output;\n   }\n\n\n   /**\n    * Add new condition\n    *\n    * @todo should not use session to pass query parameters...\n    *\n    * @param array $condition Condition to add\n    *\n    * @return string\n    */\n   static function addNewCondition(array $condition) {\n      $sha1 = sha1(serialize($condition));\n      $_SESSION['glpicondition'][$sha1] = $condition;\n      return $sha1;\n   }\n\n   /**\n    * Get the value of a dropdown\n    *\n    * Returns the value of the dropdown from $table with ID $id.\n    *\n    * @param string  $table        the dropdown table from witch we want values on the select\n    * @param integer $id           id of the element to get\n    * @param boolean $withcomment  give array with name and comment (default 0)\n    * @param boolean $translate    (true by default)\n    * @param boolean $tooltip      (true by default) returns a tooltip, else returns only 'comment'\n    *\n    * @return string the value of the dropdown or &nbsp; if not exists\n   **/\n   static function getDropdownName($table, $id, $withcomment = 0, $translate = true, $tooltip = true) {\n      global $DB;\n\n      $dft_retval = \"&nbsp;\";\n\n      $item = getItemForItemtype(getItemTypeForTable($table));\n\n      if (!is_object($item)) {\n         return $dft_retval;\n      }\n\n      if ($item instanceof CommonTreeDropdown) {\n         return getTreeValueCompleteName($table, $id, $withcomment, $translate, $tooltip);\n      }\n\n      $name    = \"\";\n      $comment = \"\";\n\n      if ($id) {\n         $SELECTNAME    = new \\QueryExpression(\"'' AS \". $DB->quoteName('transname'));\n         $SELECTCOMMENT = new \\QueryExpression(\"'' AS \" . $DB->quoteName('transcomment'));\n         $JOIN          = [];\n         $JOINS         = [];\n         if ($translate) {\n            if (Session::haveTranslations(getItemTypeForTable($table), 'name')) {\n               $SELECTNAME = 'namet.value AS transname';\n               $JOINS['glpi_dropdowntranslations AS namet'] = [\n                  'ON' => [\n                     'namet'  => 'items_id',\n                     $table   => 'id', [\n                        'AND' => [\n                           'namet.itemtype'  => getItemTypeForTable($table),\n                           'namet.language'  => $_SESSION['glpilanguage'],\n                           'namet.field'     => 'name'\n                        ]\n                     ]\n                  ]\n               ];\n            }\n            if (Session::haveTranslations(getItemTypeForTable($table), 'comment')) {\n               $SELECTCOMMENT = 'namec.value AS transcomment';\n               $JOINS['glpi_dropdowntranslations AS namec'] = [\n                  'ON' => [\n                     'namec'  => 'items_id',\n                     $table   => 'id', [\n                        'AND' => [\n                           'namec.itemtype'  => getItemTypeForTable($table),\n                           'namec.language'  => $_SESSION['glpilanguage'],\n                           'namec.field'     => 'comment'\n                        ]\n                     ]\n                  ]\n               ];\n            }\n\n            if (count($JOINS)) {\n               $JOIN = ['LEFT JOIN' => $JOINS];\n            }\n         }\n\n         $criteria = [\n            'SELECT' => [\n               \"$table.*\",\n               $SELECTNAME,\n               $SELECTCOMMENT\n            ],\n            'FROM'   => $table,\n            'WHERE'  => [\"$table.id\" => $id]\n         ] + $JOIN;\n         $iterator = $DB->request($criteria);\n\n         /// TODO review comment management...\n         /// TODO getDropdownName need to return only name\n         /// When needed to use comment use class instead : getComments function\n         /// GetName of class already give Name !!\n         /// TODO CommonDBTM : review getComments to be recursive and add informations from class hierarchy\n         /// getUserName have the same system : clean it too\n         /// Need to study the problem\n         if (count($iterator)) {\n            $data = $iterator->next();\n            if ($translate && !empty($data['transname'])) {\n               $name = $data['transname'];\n            } else {\n               $name = $data[$item->getNameField()];\n            }\n            if (isset($data[\"comment\"])) {\n               if ($translate && !empty($data['transcomment'])) {\n                  $comment = $data['transcomment'];\n               } else {\n                  $comment = $data[\"comment\"];\n               }\n            }\n\n            switch ($table) {\n               case \"glpi_computers\" :\n                  if (empty($name)) {\n                     $name = \"($id)\";\n                  }\n                  break;\n\n               case \"glpi_contacts\" :\n                  //TRANS: %1$s is the name, %2$s is the firstname\n                  $name = sprintf(__('%1$s %2$s'), $name, $data[\"firstname\"]);\n                  if ($tooltip) {\n                     if (!empty($data[\"phone\"])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'), \"<span class='b'>\".Phone::getTypeName(1),\n                                                   \"</span>\".$data['phone']);\n                     }\n                     if (!empty($data[\"phone2\"])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'),\n                                                   \"<span class='b'>\".__('Phone 2'),\n                                                   \"</span>\".$data['phone2']);\n                     }\n                     if (!empty($data[\"mobile\"])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'),\n                                                   \"<span class='b'>\".__('Mobile phone'),\n                                                   \"</span>\".$data['mobile']);\n                     }\n                     if (!empty($data[\"fax\"])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'), \"<span class='b'>\".__('Fax'),\n                                                   \"</span>\".$data['fax']);\n                     }\n                     if (!empty($data[\"email\"])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'), \"<span class='b'>\"._n('Email', 'Emails', 1),\n                                                   \"</span>\".$data['email']);\n                     }\n                  }\n                  break;\n\n               case \"glpi_suppliers\" :\n                  if ($tooltip) {\n                     if (!empty($data[\"phonenumber\"])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'), \"<span class='b'>\".Phone::getTypeName(1),\n                                                   \"</span>\".$data['phonenumber']);\n                     }\n                     if (!empty($data[\"fax\"])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'), \"<span class='b'>\".__('Fax'),\n                                                   \"</span>\".$data['fax']);\n                     }\n                     if (!empty($data[\"email\"])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'), \"<span class='b'>\"._n('Email', 'Emails', 1),\n                                                   \"</span>\".$data['email']);\n                     }\n                  }\n                  break;\n\n               case \"glpi_netpoints\" :\n                  $name = sprintf(__('%1$s (%2$s)'), $name,\n                                    self::getDropdownName(\"glpi_locations\",\n                                                         $data[\"locations_id\"], false, $translate));\n                  break;\n\n               case \"glpi_budgets\" :\n                  if ($tooltip) {\n                     if (!empty($data['locations_id'])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'),\n                                                   \"<span class='b'>\".Location::getTypeName(1).\"</span>\",\n                                                   self::getDropdownName(\"glpi_locations\",\n                                                                           $data[\"locations_id\"],\n                                                                           false, $translate));\n\n                     }\n                     if (!empty($data['budgettypes_id'])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'), \"<span class='b'>\"._n('Type', 'Types', 1).\"</span>\",\n                                       self::getDropdownName(\"glpi_budgettypes\",\n                                                            $data[\"budgettypes_id\"], false, $translate));\n\n                     }\n                     if (!empty($data['begin_date'])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'),\n                                                   \"<span class='b'>\".__('Start date').\"</span>\",\n                                                   Html::convDateTime($data[\"begin_date\"]));\n\n                     }\n                     if (!empty($data['end_date'])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'),\n                                                   \"<span class='b'>\".__('End date').\"</span>\",\n                                                   Html::convDateTime($data[\"end_date\"]));\n                     }\n                  }\n            }\n         }\n      }\n\n      if (empty($name)) {\n         $name = $dft_retval;\n      }\n\n      if ($withcomment) {\n         return [\n            'name'      => $name,\n            'comment'   => $comment\n         ];\n      }\n\n      return $name;\n   }\n\n\n   /**\n    * Get values of a dropdown for a list of item\n    *\n    * @param string    $table  the dropdown table from witch we want values on the select\n    * @param integer[] $ids    array containing the ids to get\n    *\n    * @return array containing the value of the dropdown or &nbsp; if not exists\n   **/\n   static function getDropdownArrayNames($table, $ids) {\n      global $DB;\n\n      $tabs = [];\n\n      if (count($ids)) {\n         $itemtype = getItemTypeForTable($table);\n         if ($item = getItemForItemtype($itemtype)) {\n            $field    = 'name';\n            if ($item instanceof CommonTreeDropdown) {\n               $field = 'completename';\n            }\n\n            $iterator = $DB->request([\n               'SELECT' => ['id', $field],\n               'FROM'   => $table,\n               'WHERE'  => ['id' => $ids]\n            ]);\n\n            while ($data = $iterator->next()) {\n               $tabs[$data['id']] = $data[$field];\n            }\n         }\n      }\n      return $tabs;\n   }\n\n\n   /**\n    * Make a select box for device type\n    *\n    * @param string   $name     name of the select box\n    * @param string[] $types    array of types to display\n    * @param array    $options  Parameters which could be used in options array :\n    *    - value               : integer / preselected value (default '')\n    *    - used                : array / Already used items ID: not to display in dropdown (default empty)\n    *    - emptylabel          : Empty choice's label (default self::EMPTY_VALUE)\n    *    - display             : boolean if false get string\n    *    - width               : specific width needed (default not set)\n    *    - emptylabel          : empty label if empty displayed (default self::EMPTY_VALUE)\n    *    - display_emptychoice : display empty choice (default false)\n    *\n    * @return integer|string\n    *    integer if option display=true (random part of elements id)\n    *    string if option display=false (HTML code)\n   **/\n   static function showItemTypes($name, $types = [], $options = []) {\n      $params['value']               = '';\n      $params['used']                = [];\n      $params['emptylabel']          = self::EMPTY_VALUE;\n      $params['display']             = true;\n      $params['width']               = '80%';\n      $params['display_emptychoice'] = true;\n      $params['rand']         = mt_rand();\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $params[$key] = $val;\n         }\n      }\n\n      $values = [];\n      if (count($types)) {\n         foreach ($types as $type) {\n            if ($item = getItemForItemtype($type)) {\n               $values[$type] = $item->getTypeName(1);\n            }\n         }\n      }\n      asort($values);\n      return self::showFromArray($name, $values,\n                                 $params);\n   }\n\n\n   /**\n    * Make a select box for device type\n    *\n    * @param string $name          name of the select box\n    * @param string $itemtype_ref  itemtype reference where to search in itemtype field\n    * @param array  $options       array of possible options:\n    *        - may be value (default value) / field (used field to search itemtype)\n    *\n    * @return integer|string\n    *    integer if option display=true (random part of elements id)\n    *    string if option display=false (HTML code)\n   **/\n   static function dropdownUsedItemTypes($name, $itemtype_ref, $options = []) {\n      global $DB;\n\n      $p['value'] = 0;\n      $p['field'] = 'itemtype';\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $p[$key] = $val;\n         }\n      }\n\n      $iterator = $DB->request([\n         'SELECT'          => $p['field'],\n         'DISTINCT'        => true,\n         'FROM'            => getTableForItemType($itemtype_ref)\n      ]);\n\n      $tabs = [];\n      while ($data = $iterator->next()) {\n         $tabs[$data[$p['field']]] = $data[$p['field']];\n      }\n      return self::showItemTypes($name, $tabs, ['value' => $p['value']]);\n   }\n\n\n   /**\n    * Make a select box for icons\n    *\n    * @param string  $myname      the name of the HTML select\n    * @param mixed   $value       the preselected value we want\n    * @param string  $store_path  path where icons are stored\n    * @param boolean $display     display of get string ? (true by default)\n    *\n    *\n    * @return void|string\n    *    void if param display=true\n    *    string if param display=false (HTML code)\n   **/\n   static function dropdownIcons($myname, $value, $store_path, $display = true) {\n\n      $output = '';\n      if (is_dir($store_path)) {\n         if ($dh = opendir($store_path)) {\n            $files = [];\n\n            while (($file = readdir($dh)) !== false) {\n               $files[] = $file;\n            }\n\n            closedir($dh);\n            sort($files);\n\n            foreach ($files as $file) {\n               if (preg_match(\"/\\.png$/i\", $file)) {\n                  $values[$file] = $file;\n               }\n            }\n            Dropdown::showFromArray($myname, $values,\n                                    ['value'               => $value,\n                                          'display_emptychoice' => true]);\n\n         } else {\n            //TRANS: %s is the store path\n            printf(__('Error reading directory %s'), $store_path);\n         }\n\n      } else {\n         //TRANS: %s is the store path\n         printf(__('Error: %s is not a directory'), $store_path);\n      }\n      if ($display) {\n         echo $output;\n      } else {\n         return $output;\n      }\n   }\n\n\n   /**\n    * Dropdown for GMT selection\n    *\n    * @param string $name   select name\n    * @param mixed  $value  default value (default '')\n   **/\n   static function showGMT($name, $value = '') {\n\n      $elements = [-12, -11, -10, -9, -8, -7, -6, -5, -4, -3.5, -3, -2, -1, 0,\n                        '+1', '+2', '+3', '+3.5', '+4', '+4.5', '+5', '+5.5', '+6', '+6.5', '+7',\n                        '+8', '+9', '+9.5', '+10', '+11', '+12', '+13'];\n\n      $values = [];\n      foreach ($elements as $element) {\n         if ($element != 0) {\n            $values[$element*HOUR_TIMESTAMP] = sprintf(__('%1$s %2$s'), __('GMT'),\n                                                       sprintf(_n('%s hour', '%s hours', $element),\n                                                               $element));\n         } else {\n            $display_value                   = __('GMT');\n            $values[$element*HOUR_TIMESTAMP] = __('GMT');\n         }\n      }\n      Dropdown::showFromArray($name, $values, ['value' => $value]);\n   }\n\n\n   /**\n    * Make a select box for a boolean choice (Yes/No) or display a checkbox. Add a\n    * 'use_checkbox' = true to the $params array to display a checkbox instead a select box\n    *\n    * @param string  $name         select name\n    * @param mixed   $value        preselected value. (default 0)\n    * @param integer $restrict_to  allows to display only yes or no in the dropdown (default -1)\n    * @param array   $params       Array of optional options (passed to showFromArray)\n    *\n    * @return integer|string\n    *    integer if option display=true (random part of elements id)\n    *    string if option display=false (HTML code)\n   **/\n   static function showYesNo($name, $value = 0, $restrict_to = -1, $params = []) {\n\n      if (!array_key_exists ('use_checkbox', $params)) {\n         // TODO: switch to true when Html::showCheckbox() is validated\n         $params['use_checkbox'] = false;\n      }\n      if ($params['use_checkbox']) {\n\n         if (!empty($params['rand'])) {\n            $rand = $params['rand'];\n         } else {\n            $rand = mt_rand();\n         }\n\n         $options = ['name' => $name,\n                          'id'   => Html::cleanId(\"dropdown_\".$name.$rand)];\n\n         switch ($restrict_to) {\n            case 0 :\n               $options['checked']  = false;\n               $options['readonly'] = true;\n               break;\n\n            case 1 :\n               $options['checked']  = true;\n               $options['readonly'] = true;\n               break;\n\n            default :\n               $options['checked']  = ($value ? 1 : 0);\n               $options['readonly'] = false;\n               break;\n         }\n\n         $output = Html::getCheckbox($options);\n         if (!isset($params['display']) || $params['display'] == 'true') {\n            echo $output;\n            return $rand;\n         } else {\n            return $output;\n         }\n      }\n\n      if ($restrict_to != 0) {\n         $options[0] = __('No');\n      }\n\n      if ($restrict_to != 1) {\n         $options[1] = __('Yes');\n      }\n\n      $params['value'] = $value;\n      $params['width'] = \"65px\";\n      return self::showFromArray($name, $options, $params);\n   }\n\n\n   /**\n    * Get Yes No string\n    *\n    * @param mixed $value Yes No value\n    *\n    * @return string\n   **/\n   static function getYesNo($value) {\n\n      if ($value) {\n         return __('Yes');\n      }\n      return __('No');\n   }\n\n\n   /**\n    * Get the Device list name the user is allowed to edit\n    *\n    * @return array (group of dropdown) of array (itemtype => localized name)\n   **/\n   static function getDeviceItemTypes() {\n      static $optgroup = null;\n\n      if (!Session::haveRight('device', READ)) {\n         return [];\n      }\n\n      if (is_null($optgroup)) {\n         $devices = [];\n         foreach (CommonDevice::getDeviceTypes() as $device_type) {\n            $devices[$device_type] = $device_type::getTypeName(Session::getPluralNumber());\n         }\n         asort($devices);\n         $optgroup = [_n('Component', 'Components', Session::getPluralNumber()) => $devices];\n      }\n      return $optgroup;\n   }\n\n\n   /**\n    * Get the dropdown list name the user is allowed to edit\n    *\n    * @return array (group of dropdown) of array (itemtype => localized name)\n   **/\n   static function getStandardDropdownItemTypes() {\n      static $optgroup = null;\n\n      if (is_null($optgroup)) {\n         $optgroup = [\n             __('Common') => [\n                 'Location' => null,\n                 'State' => null,\n                 'Manufacturer' => null,\n                 'Blacklist' => null,\n                 'BlacklistedMailContent' => null\n             ],\n\n             __('Assistance') => [\n                 'ITILCategory' => null,\n                 'TaskCategory' => null,\n                 'TaskTemplate' => null,\n                 'SolutionType' => null,\n                 'SolutionTemplate' => null,\n                 'RequestType' => null,\n                 'ITILFollowupTemplate' => null,\n                 'ProjectState' => null,\n                 'ProjectType' => null,\n                 'ProjectTaskType' => null,\n                 'ProjectTaskTemplate' => null,\n                 'PlanningExternalEventTemplate' => null,\n                 'PlanningEventCategory' => null,\n             ],\n\n             _n('Type', 'Types', Session::getPluralNumber()) => [\n                 'ComputerType' => null,\n                 'NetworkEquipmentType' => null,\n                 'PrinterType' => null,\n                 'MonitorType' => null,\n                 'PeripheralType' => null,\n                 'PhoneType' => null,\n                 'SoftwareLicenseType' => null,\n                 'CartridgeItemType' => null,\n                 'ConsumableItemType' => null,\n                 'ContractType' => null,\n                 'ContactType' => null,\n                 'DeviceGenericType' => null,\n                 'DeviceSensorType' => null,\n                 'DeviceMemoryType' => null,\n                 'SupplierType' => null,\n                 'InterfaceType' => null,\n                 'DeviceCaseType' => null,\n                 'PhonePowerSupply' => null,\n                 'Filesystem' => null,\n                 'CertificateType' => null,\n                 'BudgetType' => null,\n                 'DeviceSimcardType' => null,\n                 'LineType' => null,\n                 'RackType' => null,\n                 'PDUType' => null,\n                 'PassiveDCEquipmentType' => null,\n                 'ClusterType' => null,\n             ],\n\n             _n('Model', 'Models', 1) => [\n                 'ComputerModel' => null,\n                 'NetworkEquipmentModel' => null,\n                 'PrinterModel' => null,\n                 'MonitorModel' => null,\n                 'PeripheralModel' => null,\n                 'PhoneModel' => null,\n\n                  // Devices models :\n                  'DeviceCaseModel' => null,\n                  'DeviceControlModel' => null,\n                  'DeviceDriveModel' => null,\n                  'DeviceGenericModel' => null,\n                  'DeviceGraphicCardModel' => null,\n                  'DeviceHardDriveModel' => null,\n                  'DeviceMemoryModel' => null,\n                  'DeviceMotherBoardModel' => null,\n                  'DeviceNetworkCardModel' => null,\n                  'DevicePciModel' => null,\n                  'DevicePowerSupplyModel' => null,\n                  'DeviceProcessorModel' => null,\n                  'DeviceSoundCardModel' => null,\n                  'DeviceSensorModel' => null,\n                  'RackModel' => null,\n                  'EnclosureModel' => null,\n                  'PDUModel' => null,\n                  'PassiveDCEquipmentModel' => null,\n             ],\n\n             _n('Virtual machine', 'Virtual machines', Session::getPluralNumber()) => [\n                 'VirtualMachineType' => null,\n                 'VirtualMachineSystem' => null,\n                 'VirtualMachineState' => null\n             ],\n\n             __('Management') => [\n                 'DocumentCategory' => null,\n                 'DocumentType' => null,\n                 'BusinessCriticity' => null\n             ],\n\n             __('Tools') => [\n                 'KnowbaseItemCategory' => null\n             ],\n\n             _n('Calendar', 'Calendars', 1) => [\n                 'Calendar' => null,\n                 'Holiday' => null\n             ],\n\n             OperatingSystem::getTypeName(Session::getPluralNumber()) => [\n                 'OperatingSystem' => null,\n                 'OperatingSystemVersion' => null,\n                 'OperatingSystemServicePack' => null,\n                 'OperatingSystemArchitecture' => null,\n                 'OperatingSystemEdition' => null,\n                 'OperatingSystemKernel' => null,\n                 'OperatingSystemKernelVersion' => null,\n                 'AutoUpdateSystem' => null\n             ],\n\n             __('Networking') => [\n                 'NetworkInterface' => null,\n                 'Netpoint' => null,\n                 'Network' => null,\n                 'Vlan' => null,\n                 'LineOperator' => null,\n                 'DomainType' => null,\n                 'DomainRelation' => null,\n                 'DomainRecordType' => null\n             ],\n\n             __('Internet') => [\n                 'IPNetwork' => null,\n                 'FQDN' => null,\n                 'WifiNetwork' => null,\n                 'NetworkName' => null\n             ],\n\n             _n('Software', 'Software', 1) => [\n                'SoftwareCategory' => null\n             ],\n\n             User::getTypeName(1) => [\n                 'UserTitle' => null,\n                 'UserCategory' => null\n             ],\n\n             __('Authorizations assignment rules') => [\n                'RuleRightParameter' => null\n             ],\n\n             __('Fields unicity') => [\n                'Fieldblacklist' => null\n             ],\n\n             __('External authentications') => [\n                'SsoVariable' => null\n             ],\n             __('Power management') => [\n               'Plug' => null\n             ],\n             __('Appliances') => [\n               'ApplianceType' => null,\n               'ApplianceEnvironment' => null\n             ]\n\n         ]; //end $opt\n\n         $plugdrop = Plugin::getDropdowns();\n\n         if (count($plugdrop)) {\n            $optgroup = array_merge($optgroup, $plugdrop);\n         }\n\n         foreach ($optgroup as $label => &$dp) {\n            foreach ($dp as $key => &$val) {\n               if ($tmp = getItemForItemtype($key)) {\n                  if (!$tmp->canView()) {\n                     unset($optgroup[$label][$key]);\n                  } else if ($val === null) {\n                     $val = $key::getTypeName(Session::getPluralNumber());\n                  }\n               } else {\n                  unset($optgroup[$label][$key]);\n               }\n            }\n\n            if (count($optgroup[$label]) == 0) {\n               unset($optgroup[$label]);\n            }\n         }\n      }\n      return $optgroup;\n   }\n\n\n   /**\n    * Display a menu to select a itemtype which open the search form\n    *\n    * @param $title     string   title to display\n    * @param $optgroup  array    (group of dropdown) of array (itemtype => localized name)\n    * @param $value     string   URL of selected current value (default '')\n   **/\n   static function showItemTypeMenu($title, $optgroup, $value = '') {\n\n      echo \"<table class='tab_cadre' width='50%'>\";\n      echo \"<tr class='tab_bg_1'><td class='b'>&nbsp;\".$title.\"&nbsp; \";\n      $selected = '';\n\n      foreach ($optgroup as $label => $dp) {\n         foreach ($dp as $key => $val) {\n            $search = $key::getSearchURL();\n\n            if (basename($search) == basename($value)) {\n               $selected = $search;\n            }\n            $values[$label][$search] = $val;\n         }\n      }\n      Dropdown::showFromArray('dpmenu', $values,\n                              ['on_change'\n                                       => \"var _value = this.options[this.selectedIndex].value; if (_value != 0) {window.location.href=_value;}\",\n                                    'value'               => $selected,\n                                    'display_emptychoice' => true]);\n\n      echo \"</td></tr>\";\n      echo \"</table><br>\";\n   }\n\n\n   /**\n    * Display a list to select a itemtype with link to search form\n    *\n    * @param $optgroup array (group of dropdown) of array (itemtype => localized name)\n    */\n   static function showItemTypeList($optgroup) {\n\n      echo \"<div id='list_nav'>\";\n      $nb = 0;\n      foreach ($optgroup as $label => $dp) {\n         $nb += count($dp);\n      }\n      $step = ($nb > 15 ? ($nb/3) : $nb);\n      echo \"<table class='tab_glpi'><tr class='top'><td width='33%' class='center'>\";\n      echo \"<table class='tab_cadre'>\";\n      $i = 1;\n\n      foreach ($optgroup as $label => $dp) {\n         echo \"<tr><th>$label</th></tr>\\n\";\n\n         foreach ($dp as $key => $val) {\n            $class=\"class='tab_bg_4'\";\n            if (($itemtype = getItemForItemtype($key))\n                && $itemtype->isEntityAssign()) {\n               $class=\"class='tab_bg_2'\";\n            }\n            echo \"<tr $class><td><a href='\".$key::getSearchURL().\"'>\";\n            echo \"$val</a></td></tr>\\n\";\n            $i++;\n         }\n\n         if (($i >= $step) && ($i < $nb)) {\n            echo \"</table></td><td width='25'>&nbsp;</td><td><table class='tab_cadre'>\";\n            $step += $step;\n         }\n      }\n      echo \"</table></td></tr></table></div>\";\n   }\n\n\n   /**\n    * Dropdown available languages\n    *\n    * @param string $myname   select name\n    * @param array  $options  array of additionnal options:\n    *    - display_emptychoice : allow selection of no language\n    *    - emptylabel          : specific string to empty label if display_emptychoice is true\n   **/\n   static function showLanguages($myname, $options = []) {\n      $values = [];\n      if (isset($options['display_emptychoice']) && ($options['display_emptychoice'])) {\n         if (isset($options['emptylabel'])) {\n            $values[''] = $options['emptylabel'];\n         } else {\n            $values[''] = self::EMPTY_VALUE;\n         }\n         unset($options['display_emptychoice']);\n      }\n\n      $values = array_merge($values, self::getLanguages());\n      return self::showFromArray($myname, $values, $options);\n   }\n\n   /**\n    * Get available languages\n    *\n    * @since 9.5.0\n    *\n    * @return array\n    */\n   public static function getLanguages() {\n      global $CFG_GLPI;\n\n      $languages = [];\n      foreach ($CFG_GLPI[\"languages\"] as $key => $val) {\n         if (isset($val[1]) && is_file(GLPI_ROOT .\"/locales/\".$val[1])) {\n            $languages[$key] = $val[0];\n         }\n      }\n\n      return $languages;\n   }\n\n\n   /**\n    * @since 0.84\n    *\n    * @param $value\n   **/\n   static function getLanguageName($value) {\n      global $CFG_GLPI;\n\n      if (isset($CFG_GLPI[\"languages\"][$value][0])) {\n         return $CFG_GLPI[\"languages\"][$value][0];\n      }\n      return $value;\n   }\n\n\n   /**\n    * Print a select with hours\n    *\n    * Print a select named $name with hours options and selected value $value\n    *\n    *@param $name             string   HTML select name\n    *@param $options array of options :\n    *     - value              default value (default '')\n    *     - limit_planning     limit planning to the configuration range (default false)\n    *     - display   boolean  if false get string\n    *     - width              specific width needed (default auto adaptive)\n    *     - step               step time (defaut config GLPI)\n    *\n    * @since 0.85 update prototype\n    *\n    * @return integer|string\n    *    integer if option display=true (random part of elements id)\n    *    string if option display=false (HTML code)\n    **/\n   static function showHours($name, $options = []) {\n      global $CFG_GLPI;\n\n      $p['value']          = '';\n      $p['limit_planning'] = false;\n      $p['display']        = true;\n      $p['width']          = '';\n      $p['step']           = $CFG_GLPI[\"time_step\"];\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $p[$key] = $val;\n         }\n      }\n\n      $begin = 0;\n      $end   = 24;\n      // Check if the $step is Ok for the $value field\n      $split = explode(\":\", $p['value']);\n\n      // Valid value XX:YY ou XX:YY:ZZ\n      if ((count($split) == 2) || (count($split) == 3)) {\n         $min = $split[1];\n\n         // Problem\n         if (($min%$p['step']) != 0) {\n            // set minimum step\n            $p['step'] = 5;\n         }\n      }\n\n      if ($p['limit_planning']) {\n         $plan_begin = explode(\":\", $CFG_GLPI[\"planning_begin\"]);\n         $plan_end   = explode(\":\", $CFG_GLPI[\"planning_end\"]);\n         $begin      = (int) $plan_begin[0];\n         $end        = (int) $plan_end[0];\n      }\n\n      $values   = [];\n      $selected = '';\n\n      for ($i=$begin; $i<$end; $i++) {\n         if ($i < 10) {\n            $tmp = \"0\".$i;\n         } else {\n            $tmp = $i;\n         }\n\n         for ($j=0; $j<60; $j+=$p['step']) {\n            if ($j < 10) {\n               $val = $tmp.\":0$j\";\n            } else {\n               $val = $tmp.\":$j\";\n            }\n            $values[$val] = $val;\n            if (($p['value'] == $val.\":00\") || ($p['value'] == $val)) {\n               $selected = $val;\n            }\n         }\n      }\n      // Last item\n      $val = $end.\":00\";\n      $values[$val] = $val;\n      if (($p['value'] == $val.\":00\") || ($p['value'] == $val)) {\n         $selected = $val;\n      }\n      $p['value'] = $selected;\n      return Dropdown::showFromArray($name, $values, $p);\n   }\n\n\n   /**\n    * show a dropdown to selec a type\n    *\n    * @since 0.83\n    *\n    * @param array|string $types    Types used (default \"state_types\") (default '')\n    * @param array        $options  Array of optional options\n    *        name, value, rand, emptylabel, display_emptychoice, on_change, plural, checkright\n    *       - toupdate            : array / Update a specific item on select change on dropdown\n    *                                    (need value_fieldname, to_update,\n    *                                     url (see Ajax::updateItemOnSelectEvent for information)\n    *                                     and may have moreparams)\n    *\n    * @return integer rand for select id\n   **/\n   static function showItemType($types = '', $options = []) {\n      global $CFG_GLPI;\n\n      $params['name']                = 'itemtype';\n      $params['value']               = '';\n      $params['rand']                = mt_rand();\n      $params['on_change']           = '';\n      $params['plural']              = false;\n      //Parameters about choice 0\n      //Empty choice's label\n      $params['emptylabel']          = self::EMPTY_VALUE;\n      //Display emptychoice ?\n      $params['display_emptychoice'] = true;\n      $params['checkright']          = false;\n      $params['toupdate']            = '';\n      $params['display']             = true;\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $params[$key] = $val;\n         }\n      }\n\n      if (!is_array($types)) {\n         $types = $CFG_GLPI[\"state_types\"];\n      }\n      $options = [];\n\n      foreach ($types as $type) {\n         if ($item = getItemForItemtype($type)) {\n            if ($params['checkright'] && !$item->canView()) {\n               continue;\n            }\n            $options[$type] = $item->getTypeName($params['plural'] ? 2 : 1);\n         }\n      }\n      asort($options);\n\n      if (count($options)) {\n         return Dropdown::showFromArray($params['name'], $options, [\n            'value'               => $params['value'],\n            'on_change'           => $params['on_change'],\n            'toupdate'            => $params['toupdate'],\n            'display_emptychoice' => $params['display_emptychoice'],\n            'emptylabel'          => $params['emptylabel'],\n            'display'             => $params['display'],\n            'rand'                => $params['rand'],\n         ]);\n      }\n      return 0;\n   }\n\n\n   /**\n    * Make a select box for all items\n    *\n    * @since 0.85\n    *\n    * @param $options array:\n    *   - itemtype_name        : the name of the field containing the itemtype (default 'itemtype')\n    *   - items_id_name        : the name of the field containing the id of the selected item\n    *                            (default 'items_id')\n    *   - itemtypes            : all possible types to search for (default: $CFG_GLPI[\"state_types\"])\n    *   - default_itemtype     : the default itemtype to select (don't define if you don't\n    *                            need a default) (defaut 0)\n    *    - entity_restrict     : restrict entity in searching items (default -1)\n    *    - onlyglobal          : don't match item that don't have `is_global` == 1 (false by default)\n    *    - checkright          : check to see if we can \"view\" the itemtype (false by default)\n    *    - showItemSpecificity : given an item, the AJAX file to open if there is special\n    *                            treatment. For instance, select a Item_Device* for CommonDevice\n    *    - emptylabel          : Empty choice's label (default self::EMPTY_VALUE)\n    *    - used                : array / Already used items ID: not to display in dropdown (default empty)\n    *    - display             : true : display directly, false return the html\n    *\n    * @return integer randomized value used to generate HTML IDs\n   **/\n   static function showSelectItemFromItemtypes(array $options = []) {\n      global $CFG_GLPI;\n\n      $params = [];\n      $params['itemtype_name']       = 'itemtype';\n      $params['items_id_name']       = 'items_id';\n      $params['itemtypes']           = '';\n      $params['default_itemtype']    = 0;\n      $params['entity_restrict']     = -1;\n      $params['onlyglobal']          = false;\n      $params['checkright']          = false;\n      $params['showItemSpecificity'] = '';\n      $params['emptylabel']          = self::EMPTY_VALUE;\n      $params['used']                = [];\n      $params['display']             = true;\n      $params['rand']                = mt_rand();\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $params[$key] = $val;\n         }\n      }\n\n      $select = self::showItemType($params['itemtypes'], [\n         'checkright' => $params['checkright'],\n         'name'       => $params['itemtype_name'],\n         'emptylabel' => $params['emptylabel'],\n         'display'    => $params['display'],\n         'rand'       => $params['rand'],\n      ]);\n\n      $p_ajax = [\n         'idtable'             => '__VALUE__',\n         'name'                => $params['items_id_name'],\n         'entity_restrict'     => $params['entity_restrict'],\n         'showItemSpecificity' => $params['showItemSpecificity'],\n         'rand'                => $params['rand']\n      ];\n\n      // manage condition\n      if ($params['onlyglobal']) {\n         $p_ajax['condition'] = static::addNewCondition(['is_global' => 1]);\n      }\n      if ($params['used']) {\n         $p_ajax['used'] = $params['used'];\n      }\n\n      $field_id = Html::cleanId(\"dropdown_\".$params['itemtype_name'].$params['rand']);\n      $show_id  = Html::cleanId(\"show_\".$params['items_id_name'].$params['rand']);\n\n      $ajax = Ajax::updateItemOnSelectEvent(\n         $field_id,\n         $show_id,\n         $CFG_GLPI[\"root_doc\"].\"/ajax/dropdownAllItems.php\",\n         $p_ajax,\n         $params['display']\n      );\n\n      $out = \"\";\n      if (!$params['display']) {\n         $out.= $select.$ajax;\n      }\n\n      $out.= \"<br><span id='$show_id'>&nbsp;</span>\\n\";\n\n      // We check $options as the caller will set $options['default_itemtype'] only if it needs a\n      // default itemtype and the default value can be '' thus empty won't be valid !\n      if (array_key_exists ('default_itemtype', $options)) {\n         $out.= \"<script type='text/javascript' >\\n\";\n         $out.= \"$(function() {\";\n         $out.= Html::jsSetDropdownValue($field_id, $params['default_itemtype']);\n         $out.= \"});</script>\\n\";\n\n         $p_ajax[\"idtable\"] = $params['default_itemtype'];\n         $ajax2 = Ajax::updateItem(\n            $show_id,\n            $CFG_GLPI[\"root_doc\"]. \"/ajax/dropdownAllItems.php\",\n            $p_ajax,\n            \"\",\n            $params['display']\n         );\n\n         if (!$params['display']) {\n            $out.= $ajax2;\n         }\n      }\n\n      if ($params['display']) {\n         echo $out;\n         return $params['rand'];\n      }\n\n      return $out;\n   }\n\n\n   /**\n    * Dropdown numbers\n    *\n    * @since 0.84\n    *\n    * @param string $myname   select name\n    * @param array  $options  array of additionnal options :\n    *     - value              default value (default 0)\n    *     - rand               random value\n    *     - min                min value (default 0)\n    *     - max                max value (default 100)\n    *     - step               step used (default 1)\n    *     - toadd     array    of values to add at the beginning\n    *     - unit      string   unit to used\n    *     - display   boolean  if false get string\n    *     - width              specific width needed (default 80%)\n    *     - on_change string / value to transmit to \"onChange\"\n    *     - used      array / Already used items ID: not to display in dropdown (default empty)\n   **/\n   static function showNumber($myname, $options = []) {\n      global $CFG_GLPI;\n\n      $p = [\n         'value'           => 0,\n         'rand'            => mt_rand(),\n         'min'             => 0,\n         'max'             => 100,\n         'step'            => 1,\n         'toadd'           => [],\n         'unit'            => '',\n         'display'         => true,\n         'width'           => '',\n         'on_change'       => '',\n         'used'            => [],\n         'specific_tags'   => [],\n      ];\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $p[$key] = $val;\n         }\n      }\n      if (($p['value'] < $p['min']) && !isset($p['toadd'][$p['value']])) {\n         $min = $p['min'];\n\n         while (isset($p['used'][$min])) {\n            ++$min;\n         }\n         $p['value'] = $min;\n      }\n\n      $field_id = Html::cleanId(\"dropdown_\".$myname.$p['rand']);\n      if (!isset($p['toadd'][$p['value']])) {\n         $valuename = self::getValueWithUnit($p['value'], $p['unit']);\n      } else {\n         $valuename = $p['toadd'][$p['value']];\n      }\n      $param = ['value'               => $p['value'],\n                     'valuename'           => $valuename,\n                     'width'               => $p['width'],\n                     'on_change'           => $p['on_change'],\n                     'used'                => $p['used'],\n                     'unit'                => $p['unit'],\n                     'min'                 => $p['min'],\n                     'max'                 => $p['max'],\n                     'step'                => $p['step'],\n                     'toadd'               => $p['toadd'],\n                     'specific_tags'       => $p['specific_tags']];\n\n      $out   = Html::jsAjaxDropdown($myname, $field_id,\n                                    $CFG_GLPI['root_doc'].\"/ajax/getDropdownNumber.php\",\n                                    $param);\n\n      if ($p['display']) {\n         echo $out;\n         return $p['rand'];\n      }\n      return $out;\n   }\n\n\n   /**\n    * Get value with unit / Automatic management of standar unit (year, month, %, ...)\n    *\n    * @since 0.84\n    *\n    * @param $value   integer   number of item\n    * @param $unit    string    of unit (maybe year, month, day, hour, % for standard management)\n   **/\n   static function getValueWithUnit($value, $unit) {\n\n      if (strlen($unit) == 0) {\n         return $value;\n      }\n\n      switch ($unit) {\n         case 'year' :\n            //TRANS: %d is a number of years\n            return sprintf(_n('%d year', '%d years', $value), $value);\n\n         case 'month' :\n            //TRANS: %d is a number of months\n            return sprintf(_n('%d month', '%d months', $value), $value);\n\n         case 'day' :\n            //TRANS: %d is a number of days\n            return sprintf(_n('%d day', '%d days', $value), $value);\n\n         case 'hour' :\n            //TRANS: %d is a number of hours\n            return sprintf(_n('%d hour', '%d hours', $value), $value);\n\n         case 'minute' :\n            //TRANS: %d is a number of minutes\n            return sprintf(_n('%d minute', '%d minutes', $value), $value);\n\n         case 'second' :\n            //TRANS: %d is a number of seconds\n            return sprintf(_n('%d second', '%d seconds', $value), $value);\n\n         case 'millisecond' :\n            //TRANS: %d is a number of milliseconds\n            return sprintf(_n('%d millisecond', '%d milliseconds', $value), $value);\n\n         case 'auto':\n               $value = str_replace([' ', '&nbsp;'], ['', ''], $value); // unformat value\n               return Toolbox::getSize($value*1024*1024);\n\n         case '%' :\n            return sprintf(__('%d%%'), $value);\n\n         default :\n            return sprintf(__('%1$s %2$s'), $value, $unit);\n      }\n   }\n\n\n   /**\n    * Dropdown integers\n    *\n    * @since 0.83\n    *\n    * @param string $myname   select name\n    * @param array  $options  array of options\n    *    - value           : default value\n    *    - min             : min value : default 0\n    *    - max             : max value : default DAY_TIMESTAMP\n    *    - value           : default value\n    *    - addfirstminutes : add first minutes before first step (default false)\n    *    - toadd           : array of values to add\n    *    - inhours         : only show timestamp in hours not in days\n    *    - display         : boolean / display or return string\n    *    - width           : string / display width of the item\n   **/\n   static function showTimeStamp($myname, $options = []) {\n      global $CFG_GLPI;\n\n      $params['value']               = 0;\n      $params['rand']                = mt_rand();\n      $params['min']                 = 0;\n      $params['max']                 = DAY_TIMESTAMP;\n      $params['step']                = $CFG_GLPI[\"time_step\"]*MINUTE_TIMESTAMP;\n      $params['emptylabel']          = self::EMPTY_VALUE;\n      $params['addfirstminutes']     = false;\n      $params['toadd']               = [];\n      $params['inhours']             = false;\n      $params['display']             = true;\n      $params['display_emptychoice'] = true;\n      $params['width']               = '80%';\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $params[$key] = $val;\n         }\n      }\n\n      // Manage min :\n      $params['min'] = floor($params['min']/$params['step'])*$params['step'];\n\n      if ($params['min'] == 0) {\n         $params['min'] = $params['step'];\n      }\n\n      $params['max'] = max($params['value'], $params['max']);\n\n      // Floor with MINUTE_TIMESTAMP for rounded purpose\n      if (empty($params['value'])) {\n         $params['value'] = 0;\n      }\n      if (($params['value'] < max($params['min'], 10*MINUTE_TIMESTAMP))\n          && $params['addfirstminutes']) {\n         $params['value'] = floor(($params['value'])/MINUTE_TIMESTAMP)*MINUTE_TIMESTAMP;\n      } else if (!in_array($params['value'], $params['toadd'])) {\n         // Round to a valid step except if value is already valid (defined in values to add)\n         $params['value'] = floor(($params['value'])/$params['step'])*$params['step'];\n      }\n\n      $values = [];\n\n      if ($params['value']) {\n         $values[$params['value']] = '';\n      }\n\n      if ($params['addfirstminutes']) {\n         $max = max($params['min'], 10*MINUTE_TIMESTAMP);\n         for ($i=MINUTE_TIMESTAMP; $i < $max; $i+=MINUTE_TIMESTAMP) {\n            $values[$i] = '';\n         }\n      }\n\n      for ($i = $params['min']; $i <= $params['max']; $i+=$params['step']) {\n         $values[$i] = '';\n      }\n\n      if (count($params['toadd'])) {\n         foreach ($params['toadd'] as $key) {\n            $values[$key] = '';\n         }\n         ksort($values);\n      }\n\n      foreach ($values as $i => $val) {\n         if (empty($val)) {\n            if ($params['inhours']) {\n               $day  = 0;\n               $hour = floor($i/HOUR_TIMESTAMP);\n            } else {\n               $day  = floor($i/DAY_TIMESTAMP);\n               $hour = floor(($i%DAY_TIMESTAMP)/HOUR_TIMESTAMP);\n            }\n            $minute     = floor(($i%HOUR_TIMESTAMP)/MINUTE_TIMESTAMP);\n            if ($minute === '0') {\n               $minute = '00';\n            }\n            $values[$i] = '';\n            if ($day > 0) {\n               if (($hour > 0) || ($minute > 0)) {\n                  if ($minute < 10) {\n                     $minute = '0'.$minute;\n                  }\n\n                  //TRANS: %1$d is the number of days, %2$d the number of hours,\n                  //       %3$s the number of minutes : display 1 day 3h15\n                  $values[$i] = sprintf(_n('%1$d day %2$dh%3$s', '%1$d days %2$dh%3$s', $day),\n                                       $day, $hour, $minute);\n               } else {\n                  $values[$i] = sprintf(_n('%d day', '%d days', $day), $day);\n               }\n\n            } else if ($hour > 0 || $minute > 0) {\n               if ($minute < 10) {\n                  $minute = '0'.$minute;\n               }\n\n               //TRANS: %1$d the number of hours, %2$s the number of minutes : display 3h15\n               $values[$i] = sprintf(__('%1$dh%2$s'), $hour, $minute);\n            }\n         }\n      }\n      return Dropdown::showFromArray($myname, $values,\n                                     ['value'                => $params['value'],\n                                            'display'             => $params['display'],\n                                            'width'               => $params['width'],\n                                            'display_emptychoice' => $params['display_emptychoice'],\n                                            'rand'                => $params['rand'],\n                                            'emptylabel'          => $params['emptylabel']]);\n   }\n\n\n   /**\n    * Toggle view in LDAP user import/synchro between no restriction and date restriction\n    *\n    * @param $enabled (default 0)\n   **/\n   static function showAdvanceDateRestrictionSwitch($enabled = 0) {\n      global $CFG_GLPI;\n\n      $rand = mt_rand();\n      $url  = $CFG_GLPI[\"root_doc\"].\"/ajax/ldapdaterestriction.php\";\n      echo \"<script type='text/javascript' >\\n\";\n      echo \"function activateRestriction() {\\n\";\n         $params = ['enabled'=> 1];\n         Ajax::updateItemJsCode('date_restriction', $url, $params);\n      echo \"};\";\n\n      echo \"function deactivateRestriction() {\\n\";\n         $params = ['enabled' => 0];\n         Ajax::updateItemJsCode('date_restriction', $url, $params);\n      echo \"};\";\n      echo \"</script>\";\n\n      echo \"</table>\";\n      echo \"<span id='date_restriction'>\";\n      $_POST['enabled'] = $enabled;\n      include (GLPI_ROOT.\"/ajax/ldapdaterestriction.php\");\n      echo \"</span>\\n\";\n      return $rand;\n   }\n\n\n   /**\n    * Dropdown of values in an array\n    *\n    * @param string $name      select name\n    * @param array  $elements  array of elements to display\n    * @param array  $options   array of possible options:\n    *    - value               : integer / preselected value (default 0)\n    *    - used                : array / Already used items ID: not to display in dropdown (default empty)\n    *    - readonly            : boolean / used as a readonly item (default false)\n    *    - on_change           : string / value to transmit to \"onChange\"\n    *    - multiple            : boolean / can select several values (default false)\n    *    - size                : integer / number of rows for the select (default = 1)\n    *    - display             : boolean / display or return string\n    *    - other               : boolean or string if not false, then we can use an \"other\" value\n    *                            if it is a string, then the default value will be this string\n    *    - rand                : specific rand if needed (default is generated one)\n    *    - width               : specific width needed (default not set)\n    *    - emptylabel          : empty label if empty displayed (default self::EMPTY_VALUE)\n    *    - display_emptychoice : display empty choice, cannot be used when \"multiple\" option set to true (default false)\n    *    - class               : class attributes to add\n    *    - tooltip             : string / message to add as tooltip on the dropdown (default '')\n    *    - option_tooltips     : array / message to add as tooltip on the dropdown options. Use the same keys as for the $elements parameter, but none is mandotary. Missing keys will just be ignored and no tooltip will be added. To add a tooltip on an option group, is the '__optgroup_label' key inside the array describing option tooltips : 'optgroupname1' => array('__optgroup_label' => 'tooltip for option group') (default empty)\n    *    - noselect2           : if true, don't use select2 lib\n    *\n    * Permit to use optgroup defining items in arrays\n    * array('optgroupname'  => array('key1' => 'val1',\n    *                                'key2' => 'val2'),\n    *       'optgroupname2' => array('key3' => 'val3',\n    *                                'key4' => 'val4'))\n    *\n    * @return integer|string\n    *    integer if option display=true (random part of elements id)\n    *    string if option display=false (HTML code)\n   **/\n   static function showFromArray($name, array $elements, $options = []) {\n\n      $param['value']               = '';\n      $param['values']              = [''];\n      $param['class']               = '';\n      $param['tooltip']             = '';\n      $param['option_tooltips']     = [];\n      $param['used']                = [];\n      $param['readonly']            = false;\n      $param['on_change']           = '';\n      $param['width']               = '';\n      $param['multiple']            = false;\n      $param['size']                = 1;\n      $param['display']             = true;\n      $param['other']               = false;\n      $param['rand']                = mt_rand();\n      $param['emptylabel']          = self::EMPTY_VALUE;\n      $param['display_emptychoice'] = false;\n      $param['disabled']            = false;\n      $param['noselect2']           = false;\n\n      if (is_array($options) && count($options)) {\n         if (isset($options['value']) && strlen($options['value'])) {\n            $options['values'] = [$options['value']];\n            unset($options['value']);\n         }\n         foreach ($options as $key => $val) {\n            $param[$key] = $val;\n         }\n      }\n\n      if ($param['other'] !== false) {\n         $other_select_option = $name . '_other_value';\n         $param['on_change'] .= \"displayOtherSelectOptions(this, \\\"$other_select_option\\\");\";\n\n         // If $param['other'] is a string, then we must highlight \"other\" option\n         if (is_string($param['other'])) {\n            if (!$param[\"multiple\"]) {\n               $param['values'] = [$other_select_option];\n            } else {\n               $param['values'][] = $other_select_option;\n            }\n         }\n      }\n\n      $param['option_tooltips'] = Html::entities_deep($param['option_tooltips']);\n\n      if ($param[\"display_emptychoice\"] && !$param[\"multiple\"]) {\n         $elements = [ 0 => $param['emptylabel'] ] + $elements;\n      }\n\n      if ($param[\"multiple\"]) {\n         $field_name = $name.\"[]\";\n      } else {\n         $field_name = $name;\n      }\n\n      $output = '';\n      // readonly mode\n      $field_id = Html::cleanId(\"dropdown_\".$name.$param['rand']);\n      if ($param['readonly']) {\n         $to_display = [];\n         foreach ($param['values'] as $value) {\n            $output .= \"<input type='hidden' name='$field_name' value='$value'>\";\n            if (isset($elements[$value])) {\n               $to_display[] = $elements[$value];\n            }\n         }\n         $output .= implode('<br>', $to_display);\n      } else {\n\n         $output  .= \"<select name='$field_name' id='$field_id'\";\n\n         if ($param['tooltip']) {\n            $output .= ' title=\"'.Html::entities_deep($param['tooltip']).'\"';\n         }\n\n         if ($param['class']) {\n            $output .= ' class=\"'.Html::entities_deep($param['class']).'\"';\n         }\n\n         if (!empty($param[\"on_change\"])) {\n            $output .= \" onChange='\".$param[\"on_change\"].\"'\";\n         }\n\n         if ((is_int($param[\"size\"])) && ($param[\"size\"] > 0)) {\n            $output .= \" size='\".$param[\"size\"].\"'\";\n         }\n\n         if ($param[\"multiple\"]) {\n            $output .= \" multiple\";\n         }\n\n         if ($param[\"disabled\"]) {\n            $output .= \" disabled='disabled'\";\n         }\n\n         $output .= '>';\n         $max_option_size = 0;\n         foreach ($elements as $key => $val) {\n            // optgroup management\n            if (is_array($val)) {\n               $opt_goup = Html::entities_deep($key);\n               if ($max_option_size < strlen($opt_goup)) {\n                  $max_option_size = strlen($opt_goup);\n               }\n\n               $output .= \"<optgroup label=\\\"$opt_goup\\\"\";\n               $optgroup_tooltips = false;\n               if (isset($param['option_tooltips'][$key])) {\n                  if (is_array($param['option_tooltips'][$key])) {\n                     if (isset($param['option_tooltips'][$key]['__optgroup_label'])) {\n                        $output .= ' title=\"'.$param['option_tooltips'][$key]['__optgroup_label'].'\"';\n                     }\n                     $optgroup_tooltips = $param['option_tooltips'][$key];\n                  } else {\n                     $output .= ' title=\"'.$param['option_tooltips'][$key].'\"';\n                  }\n               }\n               $output .= \">\";\n\n               foreach ($val as $key2 => $val2) {\n                  if (!isset($param['used'][$key2])) {\n                     $output .= \"<option value='\".$key2.\"'\";\n                     // Do not use in_array : trouble with 0 and empty value\n                     foreach ($param['values'] as $value) {\n                        if (strcmp($key2, $value) === 0) {\n                           $output .= \" selected\";\n                           break;\n                        }\n                     }\n                     if ($optgroup_tooltips && isset($optgroup_tooltips[$key2])) {\n                        $output .= ' title=\"'.$optgroup_tooltips[$key2].'\"';\n                     }\n                     $output .= \">\" .  $val2 . \"</option>\";\n                     if ($max_option_size < strlen($val2)) {\n                        $max_option_size = strlen($val2);\n                     }\n                  }\n               }\n               $output .= \"</optgroup>\";\n            } else {\n               if (!isset($param['used'][$key])) {\n                  $output .= \"<option value='\".Html::entities_deep($key).\"'\";\n                  // Do not use in_array : trouble with 0 and empty value\n                  foreach ($param['values'] as $value) {\n                     if (strcmp($key, $value)===0) {\n                        $output .= \" selected\";\n                        break;\n                     }\n                  }\n                  if (isset($param['option_tooltips'][$key])) {\n                     $output .= ' title=\"'.$param['option_tooltips'][$key].'\"';\n                  }\n                  $output .= \">\" .$val . \"</option>\";\n                  if ($max_option_size < strlen($val)) {\n                     $max_option_size = strlen($val);\n                  }\n               }\n            }\n         }\n\n         if ($param['other'] !== false) {\n            $output .= \"<option value='$other_select_option'\";\n            if (is_string($param['other'])) {\n               $output .= \" selected\";\n            }\n            $output .= \">\".__('Other...').\"</option>\";\n         }\n\n         $output .= \"</select>\";\n         if ($param['other'] !== false) {\n            $output .= \"<input name='$other_select_option' id='$other_select_option' type='text'\";\n            if (is_string($param['other'])) {\n               $output .= \" value=\\\"\" . $param['other'] . \"\\\"\";\n            } else {\n               $output .= \" style=\\\"display: none\\\"\";\n            }\n            $output .= \">\";\n         }\n      }\n\n      if (!$param['noselect2']) {\n         // Width set on select\n         $output .= Html::jsAdaptDropdown($field_id, ['width' => $param[\"width\"]]);\n      }\n\n      if ($param[\"multiple\"]) {\n         // Hack for All / None because select2 does not provide it\n         $select   = __('All');\n         $deselect = __('None');\n         $output  .= \"<div class='invisible' id='selectallbuttons_$field_id'>\";\n         $output  .= \"<div class='select2-actionable-menu'>\";\n         $output  .= \"<a class='vsubmit' \".\n                      \"onclick=\\\"selectAll('$field_id');$('#$field_id').select2('close');\\\">$select\".\n                     \"</a> \";\n         $output  .= \"<a class='vsubmit floatright' onclick=\\\"deselectAll('$field_id');\\\">$deselect\".\n                     \"</a>\";\n         $output  .= \"</div></div>\";\n\n         $js = \"\n         var multichecksappend$field_id = false;\n         $('#$field_id').on('select2:open', function(e) {\n            if (!multichecksappend$field_id) {\n               $('#select2-$field_id-results').parent().append($('#selectallbuttons_$field_id').html());\n               multichecksappend$field_id = true;\n            }\n         });\";\n         $output .= Html::scriptBlock($js);\n      }\n      $output .= Ajax::commonDropdownUpdateItem($param, false);\n\n      if ($param['display']) {\n         echo $output;\n         return $param['rand'];\n      }\n      return $output;\n   }\n\n\n   /**\n    * Dropdown for global item management\n    *\n    * @param integer $ID           item ID\n    * @param array   attrs   array which contains the extra paramters\n    *\n    * Parameters can be :\n    * - target target for actions\n    * - withtemplate template or basic computer\n    * - value value of global state\n    * - management_restrict global management restrict mode\n   **/\n   static function showGlobalSwitch($ID, $attrs = []) {\n      $params['management_restrict'] = 0;\n      $params['value']               = 0;\n      $params['name']                = 'is_global';\n      $params['target']              = '';\n\n      foreach ($attrs as $key => $value) {\n         if ($value != '') {\n            $params[$key] = $value;\n         }\n      }\n\n      if ($params['value']\n          && empty($params['withtemplate'])) {\n         echo __('Global management');\n\n         if ($params['management_restrict'] == 2) {\n            echo \"&nbsp;\";\n            Html::showSimpleForm($params['target'], 'unglobalize', __('Use unitary management'),\n                                 ['id' => $ID], '', '',\n                                 [__('Do you really want to use unitary management for this item?'),\n                                       __('Duplicate the element as many times as there are connections')]);\n            echo \"&nbsp;\";\n\n            echo \"<span class='fa fa-info pointer'\".\n                 \" title=\\\"\".__s('Duplicate the element as many times as there are connections').\n                 \"\\\"><span class='sr-only'>\". __s('Duplicate the element as many times as there are connections') . \"</span></span>\";\n         }\n\n      } else {\n         if ($params['management_restrict'] == 2) {\n            $rand = mt_rand();\n            $values = [MANAGEMENT_UNITARY => __('Unit management'),\n                            MANAGEMENT_GLOBAL  => __('Global management')];\n            Dropdown::showFromArray($params['name'], $values, ['value' => $params['value']]);\n         } else {\n            // Templates edition\n            if (!empty($params['withtemplate'])) {\n               echo \"<input type='hidden' name='is_global' value='\".\n                      $params['management_restrict'].\"'>\";\n               echo (!$params['management_restrict']?__('Unit management') :__('Global management'));\n            } else {\n               echo (!$params['value']?__('Unit management'):__('Global management'));\n            }\n         }\n      }\n   }\n\n\n   /**\n    * Import a dropdown - check if already exists\n    *\n    * @param string $itemtype  name of the class\n    * @param array  $input     of value to import\n    *\n    * @return boolean|integer ID of the new item or false on error\n   **/\n   static function import($itemtype, $input) {\n\n      if (!($item = getItemForItemtype($itemtype))) {\n         return false;\n      }\n      return $item->import($input);\n   }\n\n\n   /**\n    * Import a value in a dropdown table.\n    *\n    * This import a new dropdown if it doesn't exist - Play dictionnary if needed\n    *\n    * @param string  $itemtype         name of the class\n    * @param string  $value            Value of the new dropdown.\n    * @param integer $entities_id       entity in case of specific dropdown\n    * @param array   $external_params\n    * @param string  $comment\n    * @param boolean $add              if true, add it if not found. if false, just check if exists\n    *\n    * @return integer : dropdown id.\n   **/\n   static function importExternal($itemtype, $value, $entities_id = -1, $external_params = [],\n                                  $comment = '', $add = true) {\n\n      if (!($item = getItemForItemtype($itemtype))) {\n         return false;\n      }\n      return $item->importExternal($value, $entities_id, $external_params, $comment, $add);\n   }\n\n   /**\n    * Get the label associated with a management type\n    *\n    * @param integer value the type of management (default 0)\n    *\n    * @return string the label corresponding to it, or \"\"\n   **/\n   static function getGlobalSwitch($value = 0) {\n\n      switch ($value) {\n         case 0 :\n            return __('Unit management');\n\n         case 1 :\n            return __('Global management');\n\n         default :\n            return \"\";\n      }\n   }\n\n\n   /**\n    * show dropdown for output format\n    *\n    * @since 0.83\n   **/\n   static function showOutputFormat() {\n      $values[Search::PDF_OUTPUT_LANDSCAPE]     = __('Current page in landscape PDF');\n      $values[Search::PDF_OUTPUT_PORTRAIT]      = __('Current page in portrait PDF');\n      $values[Search::SYLK_OUTPUT]              = __('Current page in SLK');\n      $values[Search::CSV_OUTPUT]               = __('Current page in CSV');\n      $values['-'.Search::PDF_OUTPUT_LANDSCAPE] = __('All pages in landscape PDF');\n      $values['-'.Search::PDF_OUTPUT_PORTRAIT]  = __('All pages in portrait PDF');\n      $values['-'.Search::SYLK_OUTPUT]          = __('All pages in SLK');\n      $values['-'.Search::CSV_OUTPUT]           = __('All pages in CSV');\n\n      Dropdown::showFromArray('display_type', $values);\n      echo \"<button type='submit' name='export' class='unstyled pointer' \".\n             \" title=\\\"\" . _sx('button', 'Export') . \"\\\">\" .\n             \"<i class='far fa-save'></i><span class='sr-only'>\"._sx('button', 'Export').\"<span>\";\n   }\n\n\n   /**\n    * show dropdown to select list limit\n    *\n    * @since 0.83\n    *\n    * @param string $onchange  Optional, for ajax (default '')\n   **/\n   static function showListLimit($onchange = '', $display = true) {\n      global $CFG_GLPI;\n\n      if (isset($_SESSION['glpilist_limit'])) {\n         $list_limit = $_SESSION['glpilist_limit'];\n      } else {\n         $list_limit = $CFG_GLPI['list_limit'];\n      }\n\n      $values = [];\n\n      for ($i=5; $i<20; $i+=5) {\n         $values[$i] = $i;\n      }\n      for ($i=20; $i<50; $i+=10) {\n         $values[$i] = $i;\n      }\n      for ($i=50; $i<250; $i+=50) {\n         $values[$i] = $i;\n      }\n      for ($i=250; $i<1000; $i+=250) {\n         $values[$i] = $i;\n      }\n      for ($i=1000; $i<5000; $i+=1000) {\n         $values[$i] = $i;\n      }\n      for ($i=5000; $i<=10000; $i+=5000) {\n         $values[$i] = $i;\n      }\n      $values[9999999] = 9999999;\n      // Propose max input vars -10\n      $max             = Toolbox::get_max_input_vars();\n      if ($max > 10) {\n         $values[$max-10] = $max-10;\n      }\n      ksort($values);\n      return self::showFromArray('glpilist_limit', $values,\n                                 ['on_change' => $onchange,\n                                       'value'     => $list_limit,\n                                       'display'   => $display]);\n   }\n\n   /**\n    * Get dropdown value\n    *\n    * @param array   $post Posted values\n    * @param boolean $json Encode to JSON, default to true\n    *\n    * @return string|array\n    */\n   public static function getDropdownValue($post, $json = true) {\n      global $DB, $CFG_GLPI;\n\n      if (isset($post[\"entity_restrict\"])\n         && !is_array($post[\"entity_restrict\"])\n         && (substr($post[\"entity_restrict\"], 0, 1) === '[')\n         && (substr($post[\"entity_restrict\"], -1) === ']')) {\n         $decoded = Toolbox::jsonDecode($post['entity_restrict']);\n         $entities = [];\n         if (is_array($decoded)) {\n            foreach ($decoded as $value) {\n               $entities[] = (int)$value;\n            }\n         }\n         $post[\"entity_restrict\"] = $entities;\n      }\n      if (isset($post['entity_restrict']) && 'default' === $post['entity_restrict']) {\n         $post['entity_restrict'] = $_SESSION['glpiactiveentities'];\n      }\n\n      // check if asked itemtype is the one originaly requested by the form\n      if (!Session::validateIDOR($post)) {\n         return;\n      }\n\n      // Security\n      if (!($item = getItemForItemtype($post['itemtype']))) {\n         return;\n      }\n\n      $table = $item->getTable();\n      $datas = [];\n\n      $displaywith = false;\n      if (isset($post['displaywith'])) {\n         if (is_array($post['displaywith']) && count($post['displaywith'])) {\n            $table = getTableForItemType($post['itemtype']);\n            foreach ($post['displaywith'] as $key => $value) {\n               if (!$DB->fieldExists($table, $value)) {\n                  unset($post['displaywith'][$key]);\n               }\n            }\n            if (count($post['displaywith'])) {\n               $displaywith = true;\n            }\n         }\n      }\n\n      if (!isset($post['permit_select_parent'])) {\n         $post['permit_select_parent'] = false;\n      }\n\n      if (isset($post['condition']) && !empty($post['condition']) && !is_array($post['condition'])) {\n         // Retreive conditions from SESSION using its key\n         $key = $post['condition'];\n         if (isset($_SESSION['glpicondition']) && isset($_SESSION['glpicondition'][$key])) {\n            $post['condition'] = $_SESSION['glpicondition'][$key];\n         } else {\n            $post['condition'] = [];\n         }\n      }\n\n      if (!isset($post['emptylabel']) || ($post['emptylabel'] == '')) {\n         $post['emptylabel'] = Dropdown::EMPTY_VALUE;\n      }\n\n      $where = [];\n\n      if ($item->maybeDeleted()) {\n         $where[\"$table.is_deleted\"] = 0;\n      }\n      if ($item->maybeTemplate()) {\n         $where[\"$table.is_template\"] = 0;\n      }\n\n      if (!isset($post['page'])) {\n         $post['page']       = 1;\n         $post['page_limit'] = $CFG_GLPI['dropdown_max'];\n      }\n\n      $start = intval(($post['page']-1)*$post['page_limit']);\n      $limit = intval($post['page_limit']);\n\n      if (isset($post['used'])) {\n         $used = $post['used'];\n\n         if (count($used)) {\n            $where['NOT'] = [\"$table.id\" => $used];\n         }\n      }\n\n      if (isset($post['toadd'])) {\n         $toadd = $post['toadd'];\n      } else {\n         $toadd = [];\n      }\n\n      if (isset($post['condition']) && ($post['condition'] != '')) {\n         $where = array_merge($where, $post['condition']);\n      }\n\n      $one_item = -1;\n      if (isset($post['_one_id'])) {\n         $one_item = $post['_one_id'];\n      }\n\n      // Count real items returned\n      $count = 0;\n\n      if ($item instanceof CommonTreeDropdown) {\n         if ($one_item >= 0) {\n            $where[\"$table.id\"] = $one_item;\n         } else {\n            if (!empty($post['searchText'])) {\n               $search = Search::makeTextSearchValue($post['searchText']);\n\n               $swhere = [\n                  \"$table.completename\" => ['LIKE', $search],\n               ];\n               if (Session::haveTranslations($post['itemtype'], 'completename')) {\n                  $swhere[\"namet.value\"] = ['LIKE', $search];\n               }\n\n               if ($_SESSION['glpiis_ids_visible']\n                   && is_numeric($post['searchText']) && (int)$post['searchText'] == $post['searchText']) {\n                  $swhere[$table . '.' . $item->getIndexName()] = ['LIKE', \"%{$post['searchText']}%\"];\n               }\n\n               // search also in displaywith columns\n               if ($displaywith && count($post['displaywith'])) {\n                  foreach ($post['displaywith'] as $with) {\n                     $swhere[\"$table.$with\"] = ['LIKE', $search];\n                  }\n               }\n\n               $where[] = ['OR' => $swhere];\n            }\n         }\n\n         $multi = false;\n\n         // Manage multiple Entities dropdowns\n         $order = [\"$table.completename\"];\n\n         // No multi if get one item\n         if ($item->isEntityAssign()) {\n            $recur = $item->maybeRecursive();\n\n            // Entities are not really recursive : do not display parents\n            if ($post['itemtype'] == 'Entity') {\n               $recur = false;\n            }\n\n            if (isset($post[\"entity_restrict\"]) && !($post[\"entity_restrict\"] < 0)) {\n               $where = $where + getEntitiesRestrictCriteria(\n                  $table,\n                  '',\n                  $post[\"entity_restrict\"],\n                  $recur\n               );\n\n               if (is_array($post[\"entity_restrict\"]) && (count($post[\"entity_restrict\"]) > 1)) {\n                  $multi = true;\n               }\n            } else {\n               // If private item do not use entity\n               if (!$item->maybePrivate()) {\n                  $where = $where + getEntitiesRestrictCriteria($table, '', '', $recur);\n\n                  if (count($_SESSION['glpiactiveentities']) > 1) {\n                     $multi = true;\n                  }\n               } else {\n                  $multi = false;\n               }\n            }\n\n            // Force recursive items to multi entity view\n            if ($recur) {\n               $multi = true;\n            }\n\n            // no multi view for entitites\n            if ($post['itemtype'] == \"Entity\") {\n               $multi = false;\n            }\n\n            if ($multi) {\n               array_unshift($order, \"$table.entities_id\");\n            }\n         }\n\n         $addselect = [];\n         $ljoin = [];\n         if (Session::haveTranslations($post['itemtype'], 'completename')) {\n            $addselect[] = \"namet.value AS transcompletename\";\n            $ljoin['glpi_dropdowntranslations AS namet'] = [\n               'ON' => [\n                  'namet'  => 'items_id',\n                  $table   => 'id', [\n                     'AND' => [\n                        'namet.itemtype'  => $post['itemtype'],\n                        'namet.language'  => $_SESSION['glpilanguage'],\n                        'namet.field'     => 'completename'\n                     ]\n                  ]\n               ]\n            ];\n         }\n         if (Session::haveTranslations($post['itemtype'], 'name')) {\n            $addselect[] = \"namet2.value AS transname\";\n            $ljoin['glpi_dropdowntranslations AS namet2'] = [\n               'ON' => [\n                  'namet2' => 'items_id',\n                  $table   => 'id', [\n                     'AND' => [\n                        'namet2.itemtype' => $post['itemtype'],\n                        'namet2.language' => $_SESSION['glpilanguage'],\n                        'namet2.field'    => 'name'\n                     ]\n                  ]\n               ]\n            ];\n         }\n         if (Session::haveTranslations($post['itemtype'], 'comment')) {\n            $addselect[] = \"commentt.value AS transcomment\";\n            $ljoin['glpi_dropdowntranslations AS commentt'] = [\n               'ON' => [\n                  'commentt'  => 'items_id',\n                  $table      => 'id', [\n                     'AND' => [\n                        'commentt.itemtype'  => $post['itemtype'],\n                        'commentt.language'  => $_SESSION['glpilanguage'],\n                        'commentt.field'     => 'comment'\n                     ]\n                  ]\n               ]\n            ];\n         }\n\n         if ($start > 0 && $multi) {\n            //we want to load last entry of previous page\n            //(and therefore one more result) to check if\n            //entity name must be displayed again\n            --$start;\n            ++$limit;\n         }\n\n         $criteria = [\n            'SELECT' => array_merge([\"$table.*\"], $addselect),\n            'FROM'   => $table,\n            'WHERE'  => $where,\n            'ORDER'  => $order,\n            'START'  => $start,\n            'LIMIT'  => $limit\n         ];\n         if (count($ljoin)) {\n            $criteria['LEFT JOIN'] = $ljoin;\n         }\n         $iterator = $DB->request($criteria);\n\n         // Empty search text : display first\n         if ($post['page'] == 1 && empty($post['searchText'])) {\n            if ($post['display_emptychoice']) {\n               $datas[] = [\n                  'id' => 0,\n                  'text' => $post['emptylabel']\n               ];\n            }\n         }\n\n         if ($post['page'] == 1) {\n            if (count($toadd)) {\n               foreach ($toadd as $key => $val) {\n                  $datas[] = [\n                     'id' => $key,\n                     'text' => stripslashes($val)\n                  ];\n               }\n            }\n         }\n         $last_level_displayed = [];\n         $datastoadd           = [];\n\n         // Ignore first item for all pages except first page\n         $firstitem = (($post['page'] > 1));\n         if (count($iterator)) {\n            $prev             = -1;\n            $firstitem_entity = -1;\n\n            while ($data = $iterator->next()) {\n               $ID    = $data['id'];\n               $level = $data['level'];\n\n               if (isset($data['transname']) && !empty($data['transname'])) {\n                  $outputval = $data['transname'];\n               } else {\n                  $outputval = $data['name'];\n               }\n\n               if ($multi\n                  && ($data[\"entities_id\"] != $prev)) {\n                  // Do not do it for first item for next page load\n                  if (!$firstitem) {\n                     if ($prev >= 0) {\n                        if (count($datastoadd)) {\n                           $datas[] = [\n                              'text' => Dropdown::getDropdownName(\"glpi_entities\", $prev),\n                              'children' => $datastoadd\n                           ];\n                        }\n                     }\n                  }\n                  $prev = $data[\"entities_id\"];\n                  if ($firstitem) {\n                     $firstitem_entity = $prev;\n                  }\n                  // Reset last level displayed :\n                  $datastoadd = [];\n               }\n\n               if ($_SESSION['glpiuse_flat_dropdowntree']) {\n                  if (isset($data['transcompletename']) && !empty($data['transcompletename'])) {\n                     $outputval = $data['transcompletename'];\n                  } else {\n                     $outputval = $data['completename'];\n                  }\n                  $level = 0;\n               } else { // Need to check if parent is the good one\n                        // Do not do if only get one item\n                  if (($level > 1)) {\n                     // Last parent is not the good one need to display arbo\n                     if (!isset($last_level_displayed[$level-1])\n                        || ($last_level_displayed[$level-1] != $data[$item->getForeignKeyField()])) {\n\n                        $work_level    = $level-1;\n                        $work_parentID = $data[$item->getForeignKeyField()];\n                        $parent_datas  = [];\n                        do {\n                           // Get parent\n                           if ($item->getFromDB($work_parentID)) {\n                              // Do not do for first item for next page load\n                              if (!$firstitem) {\n                                 $title = $item->fields['completename'];\n\n                                 $selection_text = $title;\n\n                                 if (isset($item->fields[\"comment\"])) {\n                                    $addcomment\n                                    = DropdownTranslation::getTranslatedValue($ID, $post['itemtype'],\n                                                                              'comment',\n                                                                              $_SESSION['glpilanguage'],\n                                                                              $item->fields['comment']);\n                                    $title = sprintf(__('%1$s - %2$s'), $title, $addcomment);\n                                 }\n                                 $output2 = DropdownTranslation::getTranslatedValue($item->fields['id'],\n                                                                                    $post['itemtype'],\n                                                                                    'name',\n                                                                                    $_SESSION['glpilanguage'],\n                                                                                    $item->fields['name']);\n\n                                 $temp = ['id'       => $work_parentID,\n                                             'text'     => $output2,\n                                             'level'    => (int)$work_level,\n                                             'disabled' => true];\n                                 if ($post['permit_select_parent']) {\n                                    $temp['title'] = $title;\n                                    $temp['selection_text'] = $selection_text;\n                                    unset($temp['disabled']);\n                                 }\n                                 array_unshift($parent_datas, $temp);\n                              }\n                              $last_level_displayed[$work_level] = $item->fields['id'];\n                              $work_level--;\n                              $work_parentID = $item->fields[$item->getForeignKeyField()];\n\n                           } else { // Error getting item : stop\n                              $work_level = -1;\n                           }\n\n                        } while (($work_level >= 1)\n                                 && (!isset($last_level_displayed[$work_level])\n                                    || ($last_level_displayed[$work_level] != $work_parentID)));\n                        // Add parents\n                        foreach ($parent_datas as $val) {\n                           $datastoadd[] = $val;\n                        }\n                     }\n                  }\n                  $last_level_displayed[$level] = $data['id'];\n               }\n\n               // Do not do for first item for next page load\n               if (!$firstitem) {\n                  if ($_SESSION[\"glpiis_ids_visible\"]\n                     || (Toolbox::strlen($outputval) == 0)) {\n                     $outputval = sprintf(__('%1$s (%2$s)'), $outputval, $ID);\n                  }\n\n                  if (isset($data['transcompletename']) && !empty($data['transcompletename'])) {\n                     $title = $data['transcompletename'];\n                  } else {\n                     $title = $data['completename'];\n                  }\n\n                  $selection_text = $title;\n\n                  if (isset($data[\"comment\"])) {\n                     if (isset($data['transcomment']) && !empty($data['transcomment'])) {\n                        $addcomment = $data['transcomment'];\n                     } else {\n                        $addcomment = $data['comment'];\n                     }\n                     $title = sprintf(__('%1$s - %2$s'), $title, $addcomment);\n                  }\n                  $datastoadd[] = [\n                     'id' => $ID,\n                     'text' => $outputval,\n                     'level' => (int)$level,\n                     'title' => $title,\n                     'selection_text' => $selection_text\n                  ];\n                  $count++;\n               }\n               $firstitem = false;\n            }\n         }\n\n         if ($multi) {\n            if (count($datastoadd)) {\n               // On paging mode do not add entity information each time\n               if ($prev == $firstitem_entity) {\n                  $datas = array_merge($datas, $datastoadd);\n               } else {\n                  $datas[] = [\n                     'text' => Dropdown::getDropdownName(\"glpi_entities\", $prev),\n                     'children' => $datastoadd\n                  ];\n               }\n            }\n         } else {\n            if (count($datastoadd)) {\n               $datas = array_merge($datas, $datastoadd);\n            }\n         }\n      } else { // Not a dropdowntree\n         $multi = false;\n         // No multi if get one item\n         if ($item->isEntityAssign()) {\n            $multi = $item->maybeRecursive();\n\n            if (isset($post[\"entity_restrict\"]) && !($post[\"entity_restrict\"] < 0)) {\n               $where = $where + getEntitiesRestrictCriteria(\n                  $table,\n                  \"entities_id\",\n                  $post[\"entity_restrict\"],\n                  $multi\n               );\n\n               if (is_array($post[\"entity_restrict\"]) && (count($post[\"entity_restrict\"]) > 1)) {\n                  $multi = true;\n               }\n\n            } else {\n               // Do not use entity if may be private\n               if (!$item->maybePrivate()) {\n                  $where = $where + getEntitiesRestrictCriteria($table, '', '', $multi);\n\n                  if (count($_SESSION['glpiactiveentities'])>1) {\n                     $multi = true;\n                  }\n               } else {\n                  $multi = false;\n               }\n            }\n         }\n\n         $field = \"name\";\n         if ($item instanceof CommonDevice) {\n            $field = \"designation\";\n         } else if ($item instanceof Item_Devices) {\n            $field = \"itemtype\";\n         }\n\n         if (!empty($post['searchText'])) {\n            $search = Search::makeTextSearchValue($post['searchText']);\n            $orwhere = [\"$table.$field\" => ['LIKE', $search]];\n\n            if ($_SESSION['glpiis_ids_visible']\n                && is_numeric($post['searchText']) && (int)$post['searchText'] == $post['searchText']) {\n               $orwhere[$table . '.' . $item->getIndexName()] = ['LIKE', \"%{$post['searchText']}%\"];\n            }\n\n            if ($item instanceof CommonDCModelDropdown) {\n               $orwhere[$table . '.product_number'] = ['LIKE', $search];\n            }\n\n            if (Session::haveTranslations($post['itemtype'], $field)) {\n               $orwhere['namet.value'] = ['LIKE', $search];\n            }\n            if ($post['itemtype'] == \"SoftwareLicense\") {\n               $orwhere['glpi_softwares.name'] = ['LIKE', $search];\n            }\n\n            // search also in displaywith columns\n            if ($displaywith && count($post['displaywith'])) {\n               foreach ($post['displaywith'] as $with) {\n                  $orwhere[\"$table.$with\"] = ['LIKE', $search];\n               }\n            }\n\n            $where[] = ['OR' => $orwhere];\n         }\n         $addselect = [];\n         $ljoin = [];\n         if (Session::haveTranslations($post['itemtype'], $field)) {\n            $addselect[] = \"namet.value AS transname\";\n            $ljoin['glpi_dropdowntranslations AS namet'] = [\n               'ON' => [\n                  'namet'  => 'items_id',\n                  $table   => 'id', [\n                     'AND' => [\n                        'namet.itemtype'  => $post['itemtype'],\n                        'namet.language'  => $_SESSION['glpilanguage'],\n                        'namet.field'     => $field\n                     ]\n                  ]\n               ]\n            ];\n         }\n         if (Session::haveTranslations($post['itemtype'], 'comment')) {\n            $addselect[] = \"commentt.value AS transcomment\";\n            $ljoin['glpi_dropdowntranslations AS commentt'] = [\n               'ON' => [\n                  'commentt'  => 'items_id',\n                  $table      => 'id', [\n                     'AND' => [\n                        'commentt.itemtype'  => $post['itemtype'],\n                        'commentt.language'  => $_SESSION['glpilanguage'],\n                        'commentt.field'     => 'comment'\n                     ]\n                  ]\n               ]\n            ];\n         }\n\n         $criteria = [];\n         switch ($post['itemtype']) {\n            case \"Contact\" :\n               $criteria = [\n                  'SELECT' => [\n                     \"$table.entities_id\",\n                     new \\QueryExpression(\n                        \"CONCAT(IFNULL(\" . $DB->quoteName('name') . \",''),' ',IFNULL(\" .\n                        $DB->quoteName('firstname') . \",'')) AS \" . $DB->quoteName($field)\n                     ),\n                     \"$table.comment\",\n                     \"$table.id\"\n                  ],\n                  'FROM'   => $table\n               ];\n               break;\n\n            case \"SoftwareLicense\" :\n               $criteria = [\n                  'SELECT' => [\n                     \"$table.*\",\n                     new \\QueryExpression(\"CONCAT(glpi_softwares.name,' - ',glpi_softwarelicenses.name) AS $field\")\n                  ],\n                  'FROM'   => $table,\n                  'LEFT JOIN' => [\n                     'glpi_softwares'  => [\n                        'ON' => [\n                           'glpi_softwarelicenses' => 'softwares_id',\n                           'glpi_softwares'        => 'id'\n                        ]\n                     ]\n                  ]\n               ];\n               break;\n\n            case \"Profile\" :\n               $criteria = [\n                  'SELECT'          => \"$table.*\",\n                  'DISTINCT'        => true,\n                  'FROM'            => $table,\n                  'LEFT JOIN'       => [\n                     'glpi_profilerights' => [\n                        'ON' => [\n                           'glpi_profilerights' => 'profiles_id',\n                           $table               => 'id'\n                        ]\n                     ]\n                  ]\n               ];\n               break;\n\n            case KnowbaseItem::getType():\n               $criteria = [\n                  'SELECT' => array_merge([\"$table.*\"], $addselect),\n                  'DISTINCT'        => true,\n                  'FROM'            => $table\n               ];\n               if (count($ljoin)) {\n                  $criteria['LEFT JOIN'] = $ljoin;\n               }\n\n               $visibility = KnowbaseItem::getVisibilityCriteria();\n               if (count($visibility['LEFT JOIN'])) {\n                  $criteria['LEFT JOIN'] = array_merge(\n                     (isset($criteria['LEFT JOIN']) ? $criteria['LEFT JOIN'] : []),\n                     $visibility['LEFT JOIN']\n                  );\n                  //Do not use where??\n                  /*if (isset($visibility['WHERE'])) {\n                     $where = $visibility['WHERE'];\n                  }*/\n               }\n               break;\n\n            case Project::getType():\n               $visibility = Project::getVisibilityCriteria();\n               if (count($visibility['LEFT JOIN'])) {\n                  $ljoin = array_merge($ljoin, $visibility['LEFT JOIN']);\n                  if (isset($visibility['WHERE'])) {\n                     $where[] = $visibility['WHERE'];\n                  }\n               }\n               //no break to reach default case.\n\n            default :\n               $criteria = [\n                  'SELECT' => array_merge([\"$table.*\"], $addselect),\n                  'FROM'   => $table\n               ];\n               if (count($ljoin)) {\n                  $criteria['LEFT JOIN'] = $ljoin;\n               }\n         }\n\n         $criteria = array_merge(\n            $criteria, [\n               'WHERE'  => $where,\n               'START'  => $start,\n               'LIMIT'  => $limit\n            ]\n         );\n\n         if ($multi) {\n            $criteria['ORDERBY'] = [\"$table.entities_id\", \"$table.$field\"];\n         } else {\n            $criteria['ORDERBY'] = [\"$table.$field\"];\n         }\n\n         $iterator = $DB->request($criteria);\n\n         // Display first if no search\n         if ($post['page'] == 1 && empty($post['searchText'])) {\n            if (!isset($post['display_emptychoice']) || $post['display_emptychoice']) {\n               $datas[] = [\n                  'id' => 0,\n                  'text' => $post[\"emptylabel\"]\n               ];\n            }\n         }\n         if ($post['page'] == 1) {\n            if (count($toadd)) {\n               foreach ($toadd as $key => $val) {\n                  $datas[] = [\n                     'id' => $key,\n                     'text' => stripslashes($val)\n                  ];\n               }\n            }\n         }\n\n         $datastoadd = [];\n\n         if (count($iterator)) {\n            $prev = -1;\n\n            while ($data = $iterator->next()) {\n               if ($multi\n                  && ($data[\"entities_id\"] != $prev)) {\n                  if ($prev >= 0) {\n                     if (count($datastoadd)) {\n                        $datas[] = [\n                           'text' => Dropdown::getDropdownName(\"glpi_entities\", $prev),\n                           'children' => $datastoadd\n                        ];\n                     }\n                  }\n                  $prev       = $data[\"entities_id\"];\n                  $datastoadd = [];\n               }\n\n               if (isset($data['transname']) && !empty($data['transname'])) {\n                  $outputval = $data['transname'];\n               } else if ($field == 'itemtype' && class_exists($data['itemtype'])) {\n                  $tmpitem = new $data[$field]();\n                  if ($tmpitem->getFromDB($data['items_id'])) {\n                     $outputval = sprintf(__('%1$s - %2$s'), $tmpitem->getTypeName(), $tmpitem->getName());\n                  } else {\n                     $outputval = $tmpitem->getTypeName();\n                  }\n               } else if ($item instanceof CommonDCModelDropdown) {\n                  $outputval =sprintf(__('%1$s - %2$s'), $data[$field], $data['product_number']);\n               } else {\n                  $outputval = $data[$field];\n               }\n\n               $ID         = $data['id'];\n               $addcomment = \"\";\n               $title      = $outputval;\n               if (isset($data[\"comment\"])) {\n                  if (isset($data['transcomment']) && !empty($data['transcomment'])) {\n                     $addcomment .= $data['transcomment'];\n                  } else {\n                     $addcomment .= $data[\"comment\"];\n                  }\n\n                  $title = sprintf(__('%1$s - %2$s'), $title, $addcomment);\n               }\n               if ($_SESSION[\"glpiis_ids_visible\"]\n                  || (strlen($outputval) == 0)) {\n                  //TRANS: %1$s is the name, %2$s the ID\n                  $outputval = sprintf(__('%1$s (%2$s)'), $outputval, $ID);\n               }\n               if ($displaywith) {\n                  foreach ($post['displaywith'] as $key) {\n                     if (isset($data[$key])) {\n                        $withoutput = $data[$key];\n                        if (isForeignKeyField($key)) {\n                           $withoutput = Dropdown::getDropdownName(getTableNameForForeignKeyField($key),\n                                                                  $data[$key]);\n                        }\n                        if ((strlen($withoutput) > 0) && ($withoutput != '&nbsp;')) {\n                           $outputval = sprintf(__('%1$s - %2$s'), $outputval, $withoutput);\n                        }\n                     }\n                  }\n               }\n               $datastoadd[] = [\n                  'id' => $ID,\n                  'text' => $outputval,\n                  'title' => $title\n               ];\n               $count++;\n            }\n            if ($multi) {\n               if (count($datastoadd)) {\n                  $datas[] = [\n                     'text' => Dropdown::getDropdownName(\"glpi_entities\", $prev),\n                     'children' => $datastoadd\n                  ];\n               }\n            } else {\n               if (count($datastoadd)) {\n                  $datas = array_merge($datas, $datastoadd);\n               }\n            }\n         }\n      }\n\n      $ret['results'] = Toolbox::unclean_cross_side_scripting_deep($datas);\n      $ret['count']   = $count;\n\n      return ($json === true) ? json_encode($ret) : $ret;\n   }\n\n   /**\n    * Get dropdown connect\n    *\n    * @param array   $post Posted values\n    * @param boolean $json Encode to JSON, default to true\n    *\n    * @return string|array\n    */\n   public static function getDropdownConnect($post, $json = true) {\n      global $DB, $CFG_GLPI;\n\n      // check if asked itemtype is the one originaly requested by the form\n      if (!Session::validateIDOR($post)) {\n         return;\n      }\n\n      if (!isset($post['fromtype']) || !($fromitem = getItemForItemtype($post['fromtype']))) {\n         return;\n      }\n\n      $fromitem->checkGlobal(UPDATE);\n      $used = [];\n      if (isset( $post[\"used\"])) {\n         $used = $post[\"used\"];\n\n         if (isset($used[$post['itemtype']])) {\n            $used = $used[$post['itemtype']];\n         } else {\n            $used = [];\n         }\n      }\n\n      // Make a select box\n      $table = getTableForItemType($post[\"itemtype\"]);\n      if (!$item = getItemForItemtype($post['itemtype'])) {\n         return;\n      }\n\n      $where = [];\n\n      if ($item->maybeDeleted()) {\n         $where[\"$table.is_deleted\"] = 0;\n      }\n      if ($item->maybeTemplate()) {\n         $where[\"$table.is_template\"] = 0;\n      }\n\n      if (isset($post['searchText']) && (strlen($post['searchText']) > 0)) {\n         $search = Search::makeTextSearchValue($post['searchText']);\n         $where['OR'] = [\n            \"$table.name\"        => ['LIKE', $search],\n            \"$table.otherserial\" => ['LIKE', $search],\n            \"$table.serial\"      => ['LIKE', $search]\n         ];\n      }\n\n      $multi = $item->maybeRecursive();\n\n      if (isset($post[\"entity_restrict\"]) && !($post[\"entity_restrict\"] < 0)) {\n         $where = $where + getEntitiesRestrictCriteria($table, '', $post[\"entity_restrict\"], $multi);\n         if (is_array($post[\"entity_restrict\"]) && (count($post[\"entity_restrict\"]) > 1)) {\n            $multi = true;\n         }\n\n      } else {\n         $where = $where + getEntitiesRestrictCriteria($table, '', $_SESSION['glpiactiveentities'], $multi);\n         if (count($_SESSION['glpiactiveentities']) > 1) {\n            $multi = true;\n         }\n      }\n\n      if (!isset($post['page'])) {\n         $post['page']       = 1;\n         $post['page_limit'] = $CFG_GLPI['dropdown_max'];\n      }\n\n      $start = intval(($post['page']-1)*$post['page_limit']);\n      $limit = intval($post['page_limit']);\n\n      if (!isset($post['onlyglobal'])) {\n         $post['onlyglobal'] = false;\n      }\n\n      if ($post[\"onlyglobal\"]\n         && ($post[\"itemtype\"] != 'Computer')) {\n         $where[\"$table.is_global\"] = 1;\n      } else {\n         $where_used = [];\n         if (!empty($used)) {\n            $where_used[] = ['NOT' => [\"$table.id\" => $used]];\n         }\n\n         if ($post[\"itemtype\"] == 'Computer') {\n            $where = $where + $where_used;\n         } else {\n            $where[] = [\n               'OR' => [\n                  [\n                     'glpi_computers_items.id'  => null\n                  ] + $where_used,\n                  \"$table.is_global\"            => 1\n               ]\n            ];\n         }\n      }\n\n      $criteria = [\n         'SELECT'          => [\n            \"$table.id\",\n            \"$table.name AS name\",\n            \"$table.serial AS serial\",\n            \"$table.otherserial AS otherserial\",\n            \"$table.entities_id AS entities_id\"\n         ],\n         'DISTINCT'        => true,\n         'FROM'            => $table,\n         'WHERE'           => $where,\n         'ORDERBY'         => ['entities_id', 'name ASC'],\n         'LIMIT'           => $limit,\n         'START'           => $start\n      ];\n\n      if (($post[\"itemtype\"] != 'Computer') && !$post[\"onlyglobal\"]) {\n         $criteria['LEFT JOIN'] = [\n            'glpi_computers_items'  => [\n               'ON' => [\n                  $table                  => 'id',\n                  'glpi_computers_items'  => 'items_id', [\n                     'AND' => [\n                        'glpi_computers_items.itemtype'  => $post['itemtype']\n                     ]\n                  ]\n               ]\n            ]\n         ];\n      }\n\n      $iterator = $DB->request($criteria);\n\n      $results = [];\n      // Display first if no search\n      if (empty($post['searchText'])) {\n         $results[] = [\n            'id' => 0,\n            'text' => Dropdown::EMPTY_VALUE\n         ];\n      }\n      if (count($iterator)) {\n         $prev       = -1;\n         $datatoadd = [];\n\n         while ($data = $iterator->next()) {\n            if ($multi && ($data[\"entities_id\"] != $prev)) {\n               if (count($datatoadd)) {\n                  $results[] = [\n                     'text' => Dropdown::getDropdownName(\"glpi_entities\", $prev),\n                     'children' => $datatoadd\n                  ];\n               }\n               $prev = $data[\"entities_id\"];\n               // Reset last level displayed :\n               $datatoadd = [];\n            }\n            $output = $data['name'];\n            $ID     = $data['id'];\n\n            if ($_SESSION[\"glpiis_ids_visible\"]\n               || empty($output)) {\n               $output = sprintf(__('%1$s (%2$s)'), $output, $ID);\n            }\n            if (!empty($data['serial'])) {\n               $output = sprintf(__('%1$s - %2$s'), $output, $data[\"serial\"]);\n            }\n            if (!empty($data['otherserial'])) {\n               $output = sprintf(__('%1$s - %2$s'), $output, $data[\"otherserial\"]);\n            }\n            $datatoadd[] = [\n               'id' => $ID,\n               'text' => $output\n            ];\n         }\n\n         if ($multi) {\n            if (count($datatoadd)) {\n               $results[] = [\n                  'text' => Dropdown::getDropdownName(\"glpi_entities\", $prev),\n                  'children' => $datatoadd\n               ];\n            }\n         } else {\n            if (count($datatoadd)) {\n               $results = array_merge($results, $datatoadd);\n            }\n         }\n      }\n\n      $ret['results'] = $results;\n      return ($json === true) ? json_encode($ret) : $ret;\n   }\n\n   /**\n    * Get dropdown find num\n    *\n    * @param array   $post Posted values\n    * @param boolean $json Encode to JSON, default to true\n    *\n    * @return string|array\n    */\n   public static function getDropdownFindNum($post, $json = true) {\n      global $DB, $CFG_GLPI;\n\n      // Security\n      if (!$DB->tableExists($post['table'])) {\n         return;\n      }\n\n      $itemtypeisplugin = isPluginItemType($post['itemtype']);\n\n      // check if asked itemtype is the one originaly requested by the form\n      if (!Session::validateIDOR($post)) {\n         return;\n      }\n\n      if (!$item = getItemForItemtype($post['itemtype'])) {\n         return;\n      }\n\n      $where = [];\n      if (isset($post['used']) && !empty($post['used'])) {\n         $where['NOT'] = ['id' => $post['used']];\n      }\n\n      if ($item->maybeDeleted()) {\n         $where['is_deleted'] = 0;\n      }\n\n      if ($item->maybeTemplate()) {\n         $where['is_template'] = 0;\n      }\n\n      if (isset($_POST['searchText']) && (strlen($post['searchText']) > 0)) {\n         $search = ['LIKE', Search::makeTextSearchValue($post['searchText'])];\n         $orwhere =[\n            'name'   => $search,\n            'id'     => $post['searchText']\n         ];\n\n         if ($DB->fieldExists($post['table'], \"contact\")) {\n            $orwhere['contact'] = $search;\n         }\n         if ($DB->fieldExists($post['table'], \"serial\")) {\n            $orwhere['serial'] = $search;\n         }\n         if ($DB->fieldExists($post['table'], \"otherserial\")) {\n            $orwhere['otherserial'] = $search;\n         }\n         $where[] = ['OR' => $orwhere];\n      }\n\n      // If software or plugins : filter to display only the objects that are allowed to be visible in Helpdesk\n      $filterHelpdesk = in_array($post['itemtype'], $CFG_GLPI[\"helpdesk_visible_types\"]);\n\n      if (isset($post['context'])\n         && $post['context'] == \"impact\"\n         && Impact::isEnabled($post['itemtype'])\n      ) {\n         $filterHelpdesk = false;\n      }\n\n      if ($filterHelpdesk) {\n         $where['is_helpdesk_visible'] = 1;\n      }\n\n      if ($item->isEntityAssign()) {\n         if (isset($post[\"entity_restrict\"]) && ($post[\"entity_restrict\"] >= 0)) {\n            $entity = $post[\"entity_restrict\"];\n         } else {\n            $entity = '';\n         }\n\n         // allow opening ticket on recursive object (printer, software, ...)\n         $recursive = $item->maybeRecursive();\n         $where     = $where + getEntitiesRestrictCriteria($post['table'], '', $entity, $recursive);\n      }\n\n      if (!isset($post['page'])) {\n         $post['page']       = 1;\n         $post['page_limit'] = $CFG_GLPI['dropdown_max'];\n      }\n\n      $start = intval(($post['page']-1)*$post['page_limit']);\n      $limit = intval($post['page_limit']);\n\n      $iterator = $DB->request([\n         'FROM'   => $post['table'],\n         'WHERE'  => $where,\n         'ORDER'  => $item->getNameField(),\n         'LIMIT'  => $limit,\n         'START'  => $start\n      ]);\n\n      $results = [];\n\n      // Display first if no search\n      if ($post['page'] == 1 && empty($post['searchText'])) {\n         $results[] = [\n            'id' => 0,\n            'text' => Dropdown::EMPTY_VALUE\n         ];\n      }\n      $count = 0;\n      if (count($iterator)) {\n         while ($data = $iterator->next()) {\n            $output = $data[$item->getNameField()];\n\n            if (isset($data['contact']) && !empty($data['contact'])) {\n               $output = sprintf(__('%1$s - %2$s'), $output, $data['contact']);\n            }\n            if (isset($data['serial']) && !empty($data['serial'])) {\n               $output = sprintf(__('%1$s - %2$s'), $output, $data['serial']);\n            }\n            if (isset($data['otherserial']) && !empty($data['otherserial'])) {\n               $output = sprintf(__('%1$s - %2$s'), $output, $data['otherserial']);\n            }\n\n            if (empty($output)\n               || $_SESSION['glpiis_ids_visible']) {\n               $output = sprintf(__('%1$s (%2$s)'), $output, $data['id']);\n            }\n\n            $results[] = [\n               'id' => $data['id'],\n               'text' => $output\n            ];\n            $count++;\n         }\n      }\n\n      $ret['count']   = $count;\n      $ret['results'] = $results;\n\n      return ($json === true) ? json_encode($ret) : $ret;\n   }\n\n   /**\n    * Get dropdown netpoint\n    *\n    * @param array   $post Posted values\n    * @param boolean $json Encode to JSON, default to true\n    *\n    * @return string|array\n    */\n   public static function getDropdownNetpoint($post, $json = true) {\n      global $DB, $CFG_GLPI;\n\n      // Make a select box with preselected values\n      $results           = [];\n      $location_restrict = false;\n\n      if (!isset($post['page'])) {\n         $post['page']       = 1;\n         $post['page_limit'] = $CFG_GLPI['dropdown_max'];\n      }\n\n      $start = intval(($post['page']-1)*$post['page_limit']);\n      $limit = intval($post['page_limit']);\n\n      $criteria = [\n         'SELECT'    => [\n            'glpi_netpoints.comment AS comment',\n            'glpi_netpoints.id',\n            'glpi_netpoints.name AS netpname',\n            'glpi_locations.completename AS loc'\n         ],\n         'FROM'      => 'glpi_netpoints',\n         'LEFT JOIN' => [\n            'glpi_locations'  => [\n               'ON' => [\n                  'glpi_netpoints'  => 'locations_id',\n                  'glpi_locations'  => 'id'\n               ]\n            ]\n         ],\n         'WHERE'     => [],\n         'ORDERBY'   => [\n            'glpi_locations.completename',\n            'glpi_netpoints.name'\n         ],\n         'START'     => $start,\n         'LIMIT'     => $limit\n      ];\n\n      if (!(isset($post[\"devtype\"])\n            && ($post[\"devtype\"] != 'NetworkEquipment')\n            && isset($post[\"locations_id\"])\n            && ($post[\"locations_id\"] > 0))) {\n\n         if (isset($post[\"entity_restrict\"]) && ($post[\"entity_restrict\"] >= 0)) {\n            $criteria['WHERE']['glpi_netpoints.entities_id'] = $post['entity_restrict'];\n         } else {\n            $criteria['WHERE'] = $criteria['WHERE'] + getEntitiesRestrictCriteria('glpi_locations');\n         }\n      }\n\n      if (isset($post['searchText']) && strlen($post['searchText']) > 0) {\n         $criteria['WHERE']['OR'] = [\n            'glpi_netpoints.name'         => ['LIKE', Search::makeTextSearchValue($post['searchText'])],\n            'glpi_locations.completename' => ['LIKE', Search::makeTextSearchValue($post['searchText'])]\n         ];\n      }\n\n      if (isset($post[\"devtype\"]) && !empty($post[\"devtype\"])) {\n         $criteria['LEFT JOIN']['glpi_networkportethernets'] = [\n            'ON' => [\n               'glpi_networkportethernets'   => 'netpoints_id',\n               'glpi_netpoints'              => 'id'\n            ]\n         ];\n\n         $extra_and = [];\n         if ($post[\"devtype\"] == 'NetworkEquipment') {\n            $extra_and['glpi_networkports.itemtype'] = 'NetworkEquipment';\n         } else {\n            $extra_and['NOT'] = ['glpi_networkports.itemtype' => 'NetworkEquipment'];\n            if (isset($post[\"locations_id\"]) && ($post[\"locations_id\"] >= 0)) {\n               $location_restrict = true;\n               $criteria['WHERE']['glpi_netpoints.locations_id'] = $post['locations_id'];\n            }\n         }\n\n         $criteria['LEFT JOIN']['glpi_networkports'] = [\n            'ON' => [\n               'glpi_networkportethernets'   => 'id',\n               'glpi_networkports'           => 'id', [\n                  'AND' => [\n                     'glpi_networkports.instantiation_type'    => 'NetworkPortEthernet',\n                  ] + $extra_and\n               ]\n            ]\n         ];\n         $criteria['WHERE']['glpi_networkportethernets.netpoints_id'] = null;\n      } else if (isset($post[\"locations_id\"]) && ($post[\"locations_id\"] >= 0)) {\n         $location_restrict = true;\n         $criteria['WHERE']['glpi_netpoints.locations_id'] = $post['locations_id'];\n      }\n\n      $iterator = $DB->request($criteria);\n\n      // Display first if no search\n      if (empty($post['searchText'])) {\n         if ($post['page'] == 1) {\n            $results[] = [\n               'id' => 0,\n               'text' => Dropdown::EMPTY_VALUE\n            ];\n         }\n      }\n\n      $count = 0;\n      if (count($iterator)) {\n         while ($data = $iterator->next()) {\n            $output     = $data['netpname'];\n            $loc        = $data['loc'];\n            $ID         = $data['id'];\n            $title      = $output;\n            if (isset($data[\"comment\"])) {\n               //TRANS: %1$s is the location, %2$s is the comment\n               $title = sprintf(__('%1$s - %2$s'), $title, $loc);\n               $title = sprintf(__('%1$s - %2$s'), $title, $data[\"comment\"]);\n            }\n            if (!$location_restrict) {\n               $output = sprintf(__('%1$s (%2$s)'), $output, $loc);\n            }\n\n            $results[] = [\n               'id' => $ID,\n               'text' => $output,\n               'title' => $title\n            ];\n            $count++;\n         }\n      }\n\n      $ret['count']   = $count;\n      $ret['results'] = $results;\n\n      return ($json === true) ? json_encode($ret) : $ret;\n   }\n\n   /**\n    * Get dropdown number\n    *\n    * @param array   $post Posted values\n    * @param boolean $json Encode to JSON, default to true\n    *\n    * @return string|array\n    */\n   public static function getDropdownNumber($post, $json = true) {\n      global $CFG_GLPI;\n\n      $used = [];\n\n      if (isset($post['used'])) {\n         $used = $post['used'];\n      }\n\n      if (!isset($post['value'])) {\n         $post['value'] = 0;\n      }\n\n      if (!isset($post['page'])) {\n         $post['page']       = 1;\n         $post['page_limit'] = $CFG_GLPI['dropdown_max'];\n      }\n\n      if (isset($post['toadd'])) {\n         $toadd = $post['toadd'];\n      } else {\n         $toadd = [];\n      }\n\n      $data = [];\n      // Count real items returned\n      $count = 0;\n\n      if ($post['page'] == 1) {\n         if (count($toadd)) {\n            foreach ($toadd as $key => $val) {\n               $data[] = ['id' => $key,\n                  'text' => (string)stripslashes($val)];\n            }\n         }\n      }\n\n      $values = [];\n\n      if (!isset($post['min'])) {\n         $post['min'] = 1;\n      }\n\n      if (!isset($post['step'])) {\n         $post['step'] = 1;\n      }\n\n      if (!isset($post['max'])) {\n         //limit max entries to avoid loop issues\n         $post['max'] = $CFG_GLPI['dropdown_max'] * $post['step'];\n      }\n\n      for ($i=$post['min']; $i<=$post['max']; $i+=$post['step']) {\n         if (!empty($post['searchText']) && strstr($i, $post['searchText']) || empty($post['searchText'])) {\n            if (!in_array($i, $used)) {\n               $values[\"$i\"] = $i;\n            }\n         }\n      }\n\n      if (count($values)) {\n         $start  = ($post['page']-1)*$post['page_limit'];\n         $tosend = array_splice($values, $start, $post['page_limit']);\n         foreach ($tosend as $i) {\n            $txt = $i;\n            if (isset($post['unit'])) {\n               $txt = Dropdown::getValueWithUnit($i, $post['unit']);\n            }\n            $data[] = ['id' => $i,\n               'text' => (string)$txt];\n            $count++;\n         }\n\n      } else {\n         if (!isset($toadd[-1])) {\n            $value = -1;\n            if (isset($post['min']) && $value < $post['min']) {\n               $value = $post['min'];\n            } else if (isset($post['max']) && $value > $post['max']) {\n               $value = $post['max'];\n            }\n\n            if (isset($post['unit'])) {\n               $txt = Dropdown::getValueWithUnit($value, $post['unit']);\n            }\n            $data[] = [\n               'id' => $value,\n               'text' => (string)stripslashes($txt)\n            ];\n            $count++;\n         }\n      }\n\n      $ret['results'] = $data;\n      $ret['count']   = $count;\n\n      return ($json === true) ? json_encode($ret) : $ret;\n   }\n\n   /**\n    * Get dropdown users\n    *\n    * @param array   $post Posted values\n    * @param boolean $json Encode to JSON, default to true\n    *\n    * @return string|array\n    */\n   public static function getDropdownUsers($post, $json = true) {\n      global $CFG_GLPI;\n\n      // check if asked itemtype is the one originaly requested by the form\n      if (!Session::validateIDOR($post + ['itemtype' => 'User', 'right' => ($post['right'] ?? \"\")])) {\n         return;\n      }\n\n      if (!isset($post['right'])) {\n         $post['right'] = \"all\";\n      }\n\n      // Default view : Nobody\n      if (!isset($post['all'])) {\n         $post['all'] = 0;\n      }\n\n      $used = [];\n\n      if (isset($post['used'])) {\n         $used = $post['used'];\n      }\n\n      if (!isset($post['value'])) {\n         $post['value'] = 0;\n      }\n\n      if (!isset($post['page'])) {\n         $post['page']       = 1;\n         $post['page_limit'] = $CFG_GLPI['dropdown_max'];\n      }\n\n      $entity_restrict = -1;\n      if (isset($post['entity_restrict'])) {\n         $entity_restrict = Toolbox::jsonDecode($post['entity_restrict']);\n      }\n\n      $start  = intval(($post['page']-1)*$post['page_limit']);\n      $searchText = (isset($post['searchText']) ? $post['searchText'] : null);\n      $inactive_deleted = isset($post['inactive_deleted']) ? $post['inactive_deleted'] : 0;\n      $result = User::getSqlSearchResult(\n         false,\n         $post['right'],\n         $entity_restrict,\n         $post['value'],\n         $used,\n         $searchText,\n         $start,\n         (int)$post['page_limit'],\n         $inactive_deleted\n      );\n\n      $users = [];\n\n      // Count real items returned\n      $count = 0;\n      if (count($result)) {\n         while ($data = $result->next()) {\n            $users[$data[\"id\"]] = formatUserName($data[\"id\"], $data[\"name\"], $data[\"realname\"],\n                                                $data[\"firstname\"]);\n            $logins[$data[\"id\"]] = $data[\"name\"];\n         }\n      }\n\n      $results = [];\n\n      // Display first if empty search\n      if ($post['page'] == 1 && empty($post['searchText'])) {\n         if ($post['all'] == 0) {\n            $results[] = [\n               'id' => 0,\n               'text' => Dropdown::EMPTY_VALUE\n            ];\n         } else if ($post['all'] == 1) {\n            $results[] = [\n               'id' => 0,\n               'text' => __('All')\n            ];\n         }\n      }\n\n      if (count($users)) {\n         foreach ($users as $ID => $output) {\n            $title = sprintf(__('%1$s - %2$s'), $output, $logins[$ID]);\n\n            $results[] = [\n               'id' => $ID,\n               'text' => $output,\n               'title' => $title\n            ];\n            $count++;\n         }\n      }\n\n      $ret['results'] = $results;\n      $ret['count']   = $count;\n\n      return ($json === true) ? json_encode($ret) : $ret;\n   }\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2021 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access this file directly\");\n}\n\nuse Sabre\\VObject;\nuse Glpi\\Exception\\ForgetPasswordException;\nuse Glpi\\Exception\\PasswordTooWeakException;\n\nclass User extends CommonDBTM {\n\n   // From CommonDBTM\n   public $dohistory         = true;\n   public $history_blacklist = ['date_mod', 'date_sync', 'last_login',\n                                     'publicbookmarkorder', 'privatebookmarkorder'];\n\n   // NAME FIRSTNAME ORDER TYPE\n   const REALNAME_BEFORE   = 0;\n   const FIRSTNAME_BEFORE  = 1;\n\n   const IMPORTEXTAUTHUSERS  = 1024;\n   const READAUTHENT         = 2048;\n   const UPDATEAUTHENT       = 4096;\n\n   static $rightname = 'user';\n\n   static $undisclosedFields = [\n      'password',\n      'personal_token',\n      'api_token',\n      'cookie_token',\n   ];\n\n   private $entities = null;\n\n\n   static function getTypeName($nb = 0) {\n      return _n('User', 'Users', $nb);\n   }\n\n   static function getMenuShorcut() {\n      return 'u';\n   }\n\n   static function getAdditionalMenuOptions() {\n\n      if (Session::haveRight('user', self::IMPORTEXTAUTHUSERS)) {\n         return [\n            'ldap' => [\n               'title' => AuthLDAP::getTypeName(Session::getPluralNumber()),\n               'page'  => '/front/ldap.php',\n            ],\n         ];\n      }\n      return false;\n   }\n\n\n   function canViewItem() {\n      if (Session::canViewAllEntities()\n          || Session::haveAccessToOneOfEntities($this->getEntities())) {\n         return true;\n      }\n      return false;\n   }\n\n\n   function canCreateItem() {\n\n      // Will be created from form, with selected entity/profile\n      if (isset($this->input['_profiles_id']) && ($this->input['_profiles_id'] > 0)\n          && Profile::currentUserHaveMoreRightThan([$this->input['_profiles_id']])\n          && isset($this->input['_entities_id'])\n          && Session::haveAccessToEntity($this->input['_entities_id'])) {\n         return true;\n      }\n      // Will be created with default value\n      if (Session::haveAccessToEntity(0) // Access to root entity (required when no default profile)\n          || (Profile::getDefault() > 0)) {\n         return true;\n      }\n\n      if (($_SESSION['glpiactive_entity'] > 0)\n          && (Profile::getDefault() == 0)) {\n         echo \"<div class='tab_cadre_fixe warning'>\".\n                __('You must define a default profile to create a new user').\"</div>\";\n      }\n\n      return false;\n   }\n\n\n   function canUpdateItem() {\n\n      $entities = Profile_User::getUserEntities($this->fields['id'], false);\n      if (Session::canViewAllEntities()\n          || Session::haveAccessToOneOfEntities($entities)) {\n         return true;\n      }\n      return false;\n   }\n\n\n   function canDeleteItem() {\n      if (Session::canViewAllEntities()\n          || Session::haveAccessToAllOfEntities($this->getEntities())) {\n         return true;\n      }\n      return false;\n   }\n\n\n   function canPurgeItem() {\n      return $this->canDeleteItem();\n   }\n\n\n   function isEntityAssign() {\n      // glpi_users.entities_id is only a pref.\n      return false;\n   }\n\n\n   /**\n    * Compute preferences for the current user mixing config and user data.\n    *\n    * @return void\n    */\n   function computePreferences() {\n      global $CFG_GLPI;\n\n      if (isset($this->fields['id'])) {\n         foreach ($CFG_GLPI['user_pref_field'] as $f) {\n            if (is_null($this->fields[$f])) {\n               $this->fields[$f] = $CFG_GLPI[$f];\n            }\n         }\n      }\n      /// Specific case for show_count_on_tabs : global config can forbid\n      if ($CFG_GLPI['show_count_on_tabs'] == -1) {\n         $this->fields['show_count_on_tabs'] = 0;\n      }\n   }\n\n\n   /**\n    * Load minimal session for user.\n    *\n    * @param integer $entities_id  Entity to use\n    * @param boolean $is_recursive Whether to load entities recursivly or not\n    *\n    * @return void\n    *\n    * @since 0.83.7\n    */\n   function loadMinimalSession($entities_id, $is_recursive) {\n      global $CFG_GLPI;\n\n      if (isset($this->fields['id']) && !isset($_SESSION[\"glpiID\"])) {\n         Session::destroy();\n         Session::start();\n         $_SESSION[\"glpiID\"]                      = $this->fields['id'];\n         $_SESSION[\"glpi_use_mode\"]               = Session::NORMAL_MODE;\n         Session::loadEntity($entities_id, $is_recursive);\n         $this->computePreferences();\n         foreach ($CFG_GLPI['user_pref_field'] as $field) {\n            if (isset($this->fields[$field])) {\n               $_SESSION[\"glpi$field\"] = $this->fields[$field];\n            }\n         }\n         Session::loadGroups();\n         Session::loadLanguage();\n      }\n   }\n\n\n   function getTabNameForItem(CommonGLPI $item, $withtemplate = 0) {\n\n      switch ($item->getType()) {\n         case __CLASS__ :\n            $ong    = [];\n            $ong[1] = __('Used items');\n            $ong[2] = __('Managed items');\n            return $ong;\n\n         case 'Preference' :\n            return __('Main');\n      }\n      return '';\n   }\n\n\n   static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0) {\n      global $CFG_GLPI;\n\n      switch ($item->getType()) {\n         case __CLASS__ :\n            $item->showItems($tabnum==2);\n            return true;\n\n         case 'Preference' :\n            $user = new self();\n            $user->showMyForm($CFG_GLPI['root_doc'].\"/front/preference.php\",\n                              Session::getLoginUserID());\n            return true;\n      }\n      return false;\n   }\n\n\n   function defineTabs($options = []) {\n\n      $ong = [];\n      $this->addDefaultFormTab($ong);\n      $this->addImpactTab($ong, $options);\n      $this->addStandardTab('Profile_User', $ong, $options);\n      $this->addStandardTab('Group_User', $ong, $options);\n      $this->addStandardTab('Config', $ong, $options);\n      $this->addStandardTab(__CLASS__, $ong, $options);\n      $this->addStandardTab('Ticket', $ong, $options);\n      $this->addStandardTab('Item_Problem', $ong, $options);\n      $this->addStandardTab('Change_Item', $ong, $options);\n      $this->addStandardTab('Document_Item', $ong, $options);\n      $this->addStandardTab('Reservation', $ong, $options);\n      $this->addStandardTab('Auth', $ong, $options);\n      $this->addStandardTab('Link', $ong, $options);\n      $this->addStandardTab('Certificate_Item', $ong, $options);\n      $this->addStandardTab('Log', $ong, $options);\n\n      return $ong;\n   }\n\n\n   function post_getEmpty() {\n      global $CFG_GLPI;\n\n      $this->fields[\"is_active\"] = 1;\n      if (isset($CFG_GLPI[\"language\"])) {\n         $this->fields['language'] = $CFG_GLPI[\"language\"];\n      } else {\n         $this->fields['language'] = \"en_GB\";\n      }\n   }\n\n\n   function pre_deleteItem() {\n      global $DB;\n\n      $entities = $this->getEntities();\n      $view_all = Session::canViewAllEntities();\n      // Have right on all entities ?\n      $all      = true;\n      if (!$view_all) {\n         foreach ($entities as $ent) {\n            if (!Session::haveAccessToEntity($ent)) {\n               $all = false;\n            }\n         }\n      }\n      if ($all) { // Mark as deleted\n         return true;\n      }\n      // only delete profile\n      foreach ($entities as $ent) {\n         if (Session::haveAccessToEntity($ent)) {\n            $all   = false;\n            $DB->delete(\n               'glpi_profiles_users', [\n                  'users_id'     => $this->fields['id'],\n                  'entities_id'  => $ent\n               ]\n            );\n         }\n         return false;\n      }\n   }\n\n\n   function cleanDBonPurge() {\n\n      global $DB;\n\n      // ObjectLock does not extends CommonDBConnexity\n      $ol = new ObjectLock();\n      $ol->deleteByCriteria(['users_id' => $this->fields['id']]);\n\n      // Reminder does not extends CommonDBConnexity\n      $r = new Reminder();\n      $r->deleteByCriteria(['users_id' => $this->fields['id']]);\n\n      // Delete private bookmark\n      $ss = new SavedSearch();\n      $ss->deleteByCriteria(\n         [\n            'users_id'   => $this->fields['id'],\n            'is_private' => 1,\n         ]\n      );\n\n      // Set no user to public bookmark\n      $DB->update(\n         SavedSearch::getTable(), [\n            'users_id' => 0\n         ], [\n            'users_id' => $this->fields['id']\n         ]\n      );\n\n      // Set no user to consumables\n      $DB->update(\n         'glpi_consumables', [\n            'items_id' => 0,\n            'itemtype' => 'NULL',\n            'date_out' => 'NULL'\n         ], [\n            'items_id' => $this->fields['id'],\n            'itemtype' => 'User'\n         ]\n      );\n\n      $this->deleteChildrenAndRelationsFromDb(\n         [\n            Certificate_Item::class,\n            Change_User::class,\n            Group_User::class,\n            KnowbaseItem_User::class,\n            Problem_User::class,\n            Profile_User::class,\n            ProjectTaskTeam::class,\n            ProjectTeam::class,\n            Reminder_User::class,\n            RSSFeed_User::class,\n            SavedSearch_User::class,\n            Ticket_User::class,\n            UserEmail::class,\n         ]\n      );\n\n      if ($this->fields['id'] > 0) { // Security\n         // DisplayPreference does not extends CommonDBConnexity\n         $dp = new DisplayPreference();\n         $dp->deleteByCriteria(['users_id' => $this->fields['id']]);\n      }\n\n      $this->dropPictureFiles($this->fields['picture']);\n\n      // Ticket rules use various _users_id_*\n      Rule::cleanForItemAction($this, '_users_id%');\n      Rule::cleanForItemCriteria($this, '_users_id%');\n\n      // Alert does not extends CommonDBConnexity\n      $alert = new Alert();\n      $alert->cleanDBonItemDelete($this->getType(), $this->fields['id']);\n   }\n\n\n   /**\n    * Retrieve a user from the database using its login.\n    *\n    * @param string $name Login of the user\n    *\n    * @return boolean\n    */\n   function getFromDBbyName($name) {\n      return $this->getFromDBByCrit(['name' => $name]);\n   }\n\n   /**\n    * Retrieve a user from the database using its login.\n    *\n    * @param string  $name     Login of the user\n    * @param integer $authtype Auth type (see Auth constants)\n    * @param integer $auths_id ID of auth server\n    *\n    * @return boolean\n    */\n   function getFromDBbyNameAndAuth($name, $authtype, $auths_id) {\n      return $this->getFromDBByCrit([\n         'name'     => $name,\n         'authtype' => $authtype,\n         'auths_id' => $auths_id\n         ]);\n   }\n\n   /**\n    * Retrieve a user from the database using value of the sync field.\n    *\n    * @param string $value Value of the sync field\n    *\n    * @return boolean\n    */\n   function getFromDBbySyncField($value) {\n      return $this->getFromDBByCrit(['sync_field' => $value]);\n   }\n\n   /**\n    * Retrieve a user from the database using it's dn.\n    *\n    * @since 0.84\n    *\n    * @param string $user_dn dn of the user\n    *\n    * @return boolean\n    */\n   function getFromDBbyDn($user_dn) {\n      return $this->getFromDBByCrit(['user_dn' => $user_dn]);\n   }\n\n\n   /**\n    * Retrieve a user from the database using its email.\n    *\n    * @since 9.3 Can pass condition as a parameter\n    *\n    * @param string $email     user email\n    * @param array  $condition add condition\n    *\n    * @return boolean\n    */\n   function getFromDBbyEmail($email, $condition = []) {\n      global $DB;\n\n      $crit = [\n         'SELECT'    => $this->getTable() . '.id',\n         'FROM'      => $this->getTable(),\n         'LEFT JOIN'  => [\n            'glpi_useremails' => [\n               'FKEY' => [\n                  $this->getTable() => 'id',\n                  'glpi_useremails' => 'users_id'\n               ]\n            ]\n         ],\n         'WHERE'     => ['glpi_useremails.email' => $email] + $condition\n      ];\n\n      $iter = $DB->request($crit);\n      if ($iter->numrows()==1) {\n         $row = $iter->next();\n         return $this->getFromDB($row['id']);\n      }\n      return false;\n   }\n\n\n   /**\n    * Get the default email of the user.\n    *\n    * @return string\n    */\n   function getDefaultEmail() {\n\n      if (!isset($this->fields['id'])) {\n         return '';\n      }\n\n      return UserEmail::getDefaultForUser($this->fields['id']);\n   }\n\n\n   /**\n    * Get all emails of the user.\n    *\n    * @return string[]\n    */\n   function getAllEmails() {\n\n      if (!isset($this->fields['id'])) {\n         return [];\n      }\n      return UserEmail::getAllForUser($this->fields['id']);\n   }\n\n\n   /**\n    * Check if the email is attached to the current user.\n    *\n    * @param string $email\n    *\n    * @return boolean\n    */\n   function isEmail($email) {\n\n      if (!isset($this->fields['id'])) {\n         return false;\n      }\n      return UserEmail::isEmailForUser($this->fields['id'], $email);\n   }\n\n\n   /**\n    * Retrieve a user from the database using its personal token.\n    *\n    * @param string $token user token\n    * @param string $field the field storing the token\n    *\n    * @return boolean\n    */\n   function getFromDBbyToken($token, $field = 'personal_token') {\n      $fields = ['personal_token', 'api_token'];\n      if (!in_array($field, $fields)) {\n         Toolbox::logWarning('User::getFromDBbyToken() can only be called with $field parameter with theses values: \\'' . implode('\\', \\'', $fields) . '\\'');\n         return false;\n      }\n\n      return $this->getFromDBByCrit([$this->getTable() . \".$field\" => $token]);\n   }\n\n\n   function prepareInputForAdd($input) {\n      global $DB;\n\n      if (isset($input['_stop_import'])) {\n         return false;\n      }\n\n      if (!Auth::isValidLogin(stripslashes($input['name']))) {\n         Session::addMessageAfterRedirect(__('The login is not valid. Unable to add the user.'),\n                                          false, ERROR);\n         return false;\n      }\n\n      // avoid xss (picture field is autogenerated)\n      if (isset($input['picture'])) {\n         $input['picture'] = 'NULL';\n      }\n\n      if (!isset($input[\"authtype\"])) {\n         $input[\"authtype\"] = Auth::DB_GLPI;\n      }\n\n      if (!isset($input[\"auths_id\"])) {\n         $input[\"auths_id\"] = 0;\n      }\n\n      // Check if user does not exists\n      $iterator = $DB->request([\n         'FROM'   => $this->getTable(),\n         'WHERE'  => [\n            'name'      => $input['name'],\n            'authtype'  => $input['authtype'],\n            'auths_id'  => $input['auths_id']\n         ],\n         'LIMIT'  => 1\n      ]);\n\n      if (count($iterator)) {\n         Session::addMessageAfterRedirect(__('Unable to add. The user already exists.'),\n                                          false, ERROR);\n         return false;\n      }\n\n      if (isset($input[\"password2\"])) {\n         if (empty($input[\"password\"])) {\n            unset ($input[\"password\"]);\n\n         } else {\n            if ($input[\"password\"] == $input[\"password2\"]) {\n               if (Config::validatePassword($input[\"password\"])) {\n                  $input[\"password\"]\n                     = Auth::getPasswordHash(Toolbox::unclean_cross_side_scripting_deep(stripslashes($input[\"password\"])));\n\n                  $input['password_last_update'] = $_SESSION['glpi_currenttime'];\n               } else {\n                  unset($input[\"password\"]);\n               }\n               unset($input[\"password2\"]);\n            } else {\n               Session::addMessageAfterRedirect(__('Error: the two passwords do not match'),\n                                                false, ERROR);\n               return false;\n            }\n         }\n      }\n\n      if (isset($input[\"_extauth\"])) {\n         $input[\"password\"] = \"\";\n      }\n\n      // Force DB default values : not really needed\n      if (!isset($input[\"is_active\"])) {\n         $input[\"is_active\"] = 1;\n      }\n\n      if (!isset($input[\"is_deleted\"])) {\n         $input[\"is_deleted\"] = 0;\n      }\n\n      if (!isset($input[\"entities_id\"])) {\n         $input[\"entities_id\"] = 0;\n      }\n\n      if (!isset($input[\"profiles_id\"])) {\n         $input[\"profiles_id\"] = 0;\n      }\n\n      return $input;\n   }\n\n   public function prepareInputForClone($input) {\n      if (isset($input['name'])) {\n         $suffix = 1;\n         $possibleName = $input['name'].$suffix;\n         while ($this->getFromDBbyName($possibleName)) {\n            $suffix++;\n            $possibleName = $input['name'].$suffix;\n         }\n         $input['name'] = $possibleName;\n      }\n      return $input;\n   }\n\n\n   function post_addItem() {\n\n      $this->updateUserEmails();\n      $this->syncLdapGroups();\n      $this->syncDynamicEmails();\n\n      $this->applyGroupsRules();\n      $rulesplayed = $this->applyRightRules();\n      $picture     = $this->syncLdapPhoto();\n\n      //add picture in user fields\n      if (!empty($picture)) {\n         $this->update(['id'      => $this->fields['id'],\n                             'picture' => $picture]);\n      }\n\n      // Add default profile\n      if (!$rulesplayed) {\n         $affectation = [];\n         if (isset($this->input['_profiles_id']) && $this->input['_profiles_id']\n            && Profile::currentUserHaveMoreRightThan([$this->input['_profiles_id']])\n            ) {\n            $profile                   = $this->input['_profiles_id'];\n            // Choosen in form, so not dynamic\n            $affectation['is_dynamic'] = 0;\n         } else {\n            $profile                   = Profile::getDefault();\n            // Default right as dynamic. If dynamic rights are set it will disappear.\n            $affectation['is_dynamic'] = 1;\n            $affectation['is_default_profile'] = 1;\n         }\n\n         if ($profile) {\n            if (isset($this->input[\"_entities_id\"])) {\n               // entities_id (user's pref) always set in prepareInputForAdd\n               // use _entities_id for default right\n               $affectation[\"entities_id\"] = $this->input[\"_entities_id\"];\n\n            } else if (isset($_SESSION['glpiactive_entity'])) {\n               $affectation[\"entities_id\"] = $_SESSION['glpiactive_entity'];\n\n            } else {\n               $affectation[\"entities_id\"] = 0;\n            }\n            if (isset($this->input[\"_is_recursive\"])) {\n               $affectation[\"is_recursive\"] = $this->input[\"_is_recursive\"];\n            } else {\n               $affectation[\"is_recursive\"] = 0;\n            }\n\n            $affectation[\"profiles_id\"]  = $profile;\n            $affectation[\"users_id\"]     = $this->fields[\"id\"];\n            $right                       = new Profile_User();\n            $right->add($affectation);\n         }\n      }\n   }\n\n\n   function prepareInputForUpdate($input) {\n      global $CFG_GLPI;\n\n      // avoid xss (picture name is autogenerated when uploading/synchronising the picture)\n      unset($input['picture']);\n\n      //picture manually uploaded by user\n      if (isset($input[\"_blank_picture\"]) && $input[\"_blank_picture\"]) {\n         self::dropPictureFiles($this->fields['picture']);\n         $input['picture'] = 'NULL';\n      } else {\n         $newPicture = false;\n         if (!isAPI()) {\n            if (isset($input[\"_picture\"][0]) && !empty($input[\"_picture\"][0])) {\n               $input[\"_picture\"] = $input[\"_picture\"][0];\n            }\n         }\n         if (isset($input[\"_picture\"]) && !empty($input[\"_picture\"])) {\n            $newPicture = true;\n         }\n         if ($newPicture) {\n            $fullpath = GLPI_TMP_DIR.\"/\".$input[\"_picture\"];\n            if (Toolbox::getMime($fullpath, 'image')) {\n               // Unlink old picture (clean on changing format)\n               self::dropPictureFiles($this->fields['picture']);\n               // Move uploaded file\n               $filename     = uniqid($this->fields['id'].'_');\n               $sub          = substr($filename, -2); /* 2 hex digit */\n\n               // output images with possible transparency to png, other to jpg\n               $extension = strtolower(pathinfo($fullpath, PATHINFO_EXTENSION));\n               $extension = in_array($extension, ['png', 'gif'])\n                  ? 'png'\n                  : 'jpg';\n\n               @mkdir(GLPI_PICTURE_DIR . \"/$sub\");\n               $picture_path = GLPI_PICTURE_DIR  . \"/$sub/${filename}.$extension\";\n               self::dropPictureFiles(\"$sub/${filename}.$extension\");\n\n               if (Document::isImage($fullpath)\n                   && Document::renameForce($fullpath, $picture_path)) {\n                  Session::addMessageAfterRedirect(__('The file is valid. Upload is successful.'));\n                  // For display\n                  $input['picture'] = \"$sub/${filename}.$extension\";\n\n                  //prepare a thumbnail\n                  $thumb_path = GLPI_PICTURE_DIR . \"/$sub/${filename}_min.$extension\";\n                  Toolbox::resizePicture($picture_path, $thumb_path);\n               } else {\n                  Session::addMessageAfterRedirect(__('Potential upload attack or file too large. Moving temporary file failed.'),\n                        false, ERROR);\n               }\n            } else {\n               Session::addMessageAfterRedirect(__('The file is not an image file.'),\n                     false, ERROR);\n            }\n         } else {\n            //ldap jpegphoto synchronisation.\n            $picture = $this->syncLdapPhoto();\n            if (!empty($picture)) {\n               $input['picture'] = $picture;\n            }\n         }\n      }\n\n      if (isset($input[\"password2\"])) {\n         // Empty : do not update\n         if (empty($input[\"password\"])) {\n            unset($input[\"password\"]);\n\n         } else {\n            if ($input[\"password\"] == $input[\"password2\"]) {\n               // Check right : my password of user with lesser rights\n               if (isset($input['id'])\n                   && !Auth::checkPassword($input['password'], $this->fields['password']) // Validate that password is not same as previous\n                   && Config::validatePassword($input[\"password\"])\n                   && (($input['id'] == Session::getLoginUserID())\n                       || $this->currentUserHaveMoreRightThan($input['id'])\n                       // Permit to change password with token and email\n                       || (($input['password_forget_token'] == $this->fields['password_forget_token'])\n                           && (abs(strtotime($_SESSION[\"glpi_currenttime\"])\n                               -strtotime($this->fields['password_forget_token_date'])) < DAY_TIMESTAMP)\n                           && $this->isEmail($input['email'])))) {\n                  $input[\"password\"]\n                     = Auth::getPasswordHash(Toolbox::unclean_cross_side_scripting_deep(stripslashes($input[\"password\"])));\n\n                  $input['password_last_update'] = $_SESSION[\"glpi_currenttime\"];\n               } else {\n                  unset($input[\"password\"]);\n               }\n               unset($input[\"password2\"]);\n\n            } else {\n               Session::addMessageAfterRedirect(__('Error: the two passwords do not match'),\n                                                false, ERROR);\n               return false;\n            }\n         }\n\n      } else if (isset($input[\"password\"])) { // From login\n         unset($input[\"password\"]);\n      }\n\n      // blank password when authtype changes\n      if (isset($input[\"authtype\"])\n          && $input[\"authtype\"] != Auth::DB_GLPI\n          && $input[\"authtype\"] != $this->getField('authtype')) {\n         $input[\"password\"] = \"\";\n      }\n\n      // Update User in the database\n      if (!isset($input[\"id\"])\n          && isset($input[\"name\"])) {\n         if ($this->getFromDBbyName($input[\"name\"])) {\n            $input[\"id\"] = $this->fields[\"id\"];\n         }\n      }\n\n      if (isset($input[\"entities_id\"])\n          && (Session::getLoginUserID() == $input['id'])) {\n         $_SESSION[\"glpidefault_entity\"] = $input[\"entities_id\"];\n      }\n\n      // Security on default profile update\n      if (isset($input['profiles_id'])) {\n         if (!in_array($input['profiles_id'], Profile_User::getUserProfiles($input['id']))) {\n            unset($input['profiles_id']);\n         }\n      }\n\n      // Security on default entity  update\n      if (isset($input['entities_id'])) {\n         if (!in_array($input['entities_id'], Profile_User::getUserEntities($input['id']))) {\n            unset($input['entities_id']);\n         }\n      }\n\n      // Security on default group  update\n      if (isset($input['groups_id'])\n         && !Group_User::isUserInGroup($input['id'], $input['groups_id'])) {\n            unset($input['groups_id']);\n      }\n\n      if (isset($input['_reset_personal_token'])\n          && $input['_reset_personal_token']) {\n         $input['personal_token']      = self::getUniqueToken('personal_token');\n         $input['personal_token_date'] = $_SESSION['glpi_currenttime'];\n      }\n\n      if (isset($input['_reset_api_token'])\n          && $input['_reset_api_token']) {\n         $input['api_token']      = self::getUniqueToken('api_token');\n         $input['api_token_date'] = $_SESSION['glpi_currenttime'];\n      }\n\n      // Manage preferences fields\n      if (Session::getLoginUserID() == $input['id']) {\n         if (isset($input['use_mode'])\n             && ($_SESSION['glpi_use_mode'] !=  $input['use_mode'])) {\n            $_SESSION['glpi_use_mode'] = $input['use_mode'];\n            unset($_SESSION['glpimenu']); // Force menu regeneration\n            //Session::loadLanguage();\n         }\n      }\n\n      foreach ($CFG_GLPI['user_pref_field'] as $f) {\n         if (isset($input[$f])) {\n            if (Session::getLoginUserID() == $input['id']) {\n               if ($_SESSION[\"glpi$f\"] != $input[$f]) {\n                  $_SESSION[\"glpi$f\"] = $input[$f];\n                  // reinit translations\n                  if ($f == 'language') {\n                     $_SESSION['glpi_dropdowntranslations'] = DropdownTranslation::getAvailableTranslations($_SESSION[\"glpilanguage\"]);\n                     unset($_SESSION['glpimenu']);\n                  }\n               }\n            }\n            if ($input[$f] == $CFG_GLPI[$f]) {\n               $input[$f] = \"NULL\";\n            }\n         }\n      }\n\n      if (isset($input['language']) && GLPI_DEMO_MODE) {\n         unset($input['language']);\n      }\n\n      if (array_key_exists('timezone', $input) && empty($input['timezone'])) {\n         $input['timezone'] = 'NULL';\n      }\n\n      return $input;\n   }\n\n\n   function post_updateItem($history = 1) {\n      //handle timezone change for current user\n      if ($this->fields['id'] == Session::getLoginUserID()) {\n         if (null == $this->fields['timezone'] || 'null' === strtolower($this->fields['timezone'])) {\n            unset($_SESSION['glpi_tz']);\n         } else {\n            $_SESSION['glpi_tz'] = $this->fields['timezone'];\n         }\n      }\n\n      $this->updateUserEmails();\n      $this->syncLdapGroups();\n      $this->syncDynamicEmails();\n      $this->applyGroupsRules();\n      $this->applyRightRules();\n\n      if (in_array('password', $this->updates)) {\n         $alert = new Alert();\n         $alert->deleteByCriteria(\n            [\n               'itemtype' => $this->getType(),\n               'items_id' => $this->fields['id'],\n            ],\n            true\n         );\n      }\n   }\n\n\n\n   /**\n    * Apply rules to determine dynamic rights of the user.\n    *\n    * @return boolean true if rules are applied, false otherwise\n    */\n   function applyRightRules() {\n\n      $return = false;\n\n      if (isset($this->fields['_ruleright_process'])\n          || isset($this->input['_ruleright_process'])) {\n\n         $dynamic_profiles = Profile_User::getForUser($this->fields[\"id\"], true);\n\n         if (isset($this->fields[\"id\"])\n             && ($this->fields[\"id\"] > 0)\n             && isset($this->input[\"_ldap_rules\"])\n             && count($this->input[\"_ldap_rules\"])) {\n\n            //and add/update/delete only if it's necessary !\n            if (isset($this->input[\"_ldap_rules\"][\"rules_entities_rights\"])) {\n               $entities_rules = $this->input[\"_ldap_rules\"][\"rules_entities_rights\"];\n            } else {\n               $entities_rules = [];\n            }\n\n            if (isset($this->input[\"_ldap_rules\"][\"rules_entities\"])) {\n               $entities = $this->input[\"_ldap_rules\"][\"rules_entities\"];\n            } else {\n               $entities = [];\n            }\n\n            if (isset($this->input[\"_ldap_rules\"][\"rules_rights\"])) {\n               $rights = $this->input[\"_ldap_rules\"][\"rules_rights\"];\n            } else {\n               $rights = [];\n            }\n\n            $retrieved_dynamic_profiles = [];\n\n            //For each affectation -> write it in DB\n            foreach ($entities_rules as $entity) {\n               //Multiple entities assignation\n               if (is_array($entity[0])) {\n                  foreach ($entity[0] as $ent) {\n                     $retrieved_dynamic_profiles[] = [\n                        'entities_id'  => $ent,\n                        'profiles_id'  => $entity[1],\n                        'is_recursive' => $entity[2],\n                        'users_id'     => $this->fields['id'],\n                        'is_dynamic'   => 1,\n                     ];\n                  }\n               } else {\n                  $retrieved_dynamic_profiles[] = [\n                     'entities_id'  => $entity[0],\n                     'profiles_id'  => $entity[1],\n                     'is_recursive' => $entity[2],\n                     'users_id'     => $this->fields['id'],\n                     'is_dynamic'   => 1,\n                  ];\n               }\n            }\n\n            if ((count($entities) > 0)\n                && (count($rights) == 0)) {\n               if ($def_prof = Profile::getDefault()) {\n                  $rights[] = $def_prof;\n               }\n            }\n\n            if ((count($rights) > 0)\n                && (count($entities) > 0)) {\n               foreach ($rights as $right) {\n                  foreach ($entities as $entity) {\n                     $retrieved_dynamic_profiles[] = [\n                        'entities_id'  => $entity[0],\n                        'profiles_id'  => $right,\n                        'is_recursive' => $entity[1],\n                        'users_id'     => $this->fields['id'],\n                        'is_dynamic'   => 1,\n                     ];\n                  }\n               }\n            }\n\n            // Compare retrived profiles to existing ones : clean arrays to do purge and add\n            if (count($retrieved_dynamic_profiles)) {\n               foreach ($retrieved_dynamic_profiles as $keyretr => $retr_profile) {\n                  $found = false;\n\n                  foreach ($dynamic_profiles as $keydb => $db_profile) {\n                     // Found existing profile : unset values in array\n                     if (!$found\n                         && ($db_profile['entities_id']  == $retr_profile['entities_id'])\n                         && ($db_profile['profiles_id']  == $retr_profile['profiles_id'])\n                         && ($db_profile['is_recursive'] == $retr_profile['is_recursive'])) {\n\n                        unset($retrieved_dynamic_profiles[$keyretr]);\n                        unset($dynamic_profiles[$keydb]);\n                     }\n                  }\n               }\n            }\n\n            // Add new dynamic profiles\n            if (count($retrieved_dynamic_profiles)) {\n               $right = new Profile_User();\n               foreach ($retrieved_dynamic_profiles as $keyretr => $retr_profile) {\n                  $right->add($retr_profile);\n               }\n            }\n\n            //Unset all the temporary tables\n            unset($this->input[\"_ldap_rules\"]);\n\n            $return = true;\n         } else if (count($dynamic_profiles) == 1) {\n            $dynamic_profile = reset($dynamic_profiles);\n\n            // If no rule applied and only one dynamic profile found, check if\n            // it is the default profile\n            if ($dynamic_profile['is_default_profile'] == true) {\n               $default_profile = Profile::getDefault();\n\n               // Remove from to be deleted list\n               $dynamic_profiles = [];\n\n               // Update profile if need to match the current default profile\n               if ($dynamic_profile['profiles_id'] !== $default_profile) {\n                  $pu = new Profile_User();\n                  $dynamic_profile['profiles_id'] = $default_profile;\n                  $pu->add($dynamic_profile);\n                  $pu->delete([\n                     'id' => $dynamic_profile['id']\n                  ]);\n               }\n            }\n         }\n\n         // Delete old dynamic profiles\n         if (count($dynamic_profiles)) {\n            $right = new Profile_User();\n            foreach ($dynamic_profiles as $keydb => $db_profile) {\n               $right->delete($db_profile);\n            }\n         }\n\n      }\n      return $return;\n   }\n\n\n   /**\n    * Synchronise LDAP group of the user.\n    *\n    * @return void\n    */\n   function syncLdapGroups() {\n      global $DB;\n\n      // input[\"_groups\"] not set when update from user.form or preference\n      if (isset($this->fields[\"authtype\"])\n          && isset($this->input[\"_groups\"])\n          && (($this->fields[\"authtype\"] == Auth::LDAP)\n              || Auth::isAlternateAuth($this->fields['authtype']))) {\n\n         if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n            $authtype = Auth::getMethodsByID($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n\n            if (count($authtype)) {\n               // Clean groups\n               $this->input[\"_groups\"] = array_unique ($this->input[\"_groups\"]);\n\n               // Delete not available groups like to LDAP\n               $iterator = $DB->request([\n                  'SELECT'    => [\n                     'glpi_groups_users.id',\n                     'glpi_groups_users.groups_id',\n                     'glpi_groups_users.is_dynamic'\n                  ],\n                  'FROM'      => 'glpi_groups_users',\n                  'LEFT JOIN' => [\n                     'glpi_groups'  => [\n                        'FKEY'   => [\n                           'glpi_groups_users'  => 'groups_id',\n                           'glpi_groups'        => 'id'\n                        ]\n                     ]\n                  ],\n                  'WHERE'     => [\n                     'glpi_groups_users.users_id' => $this->fields['id']\n                  ]\n               ]);\n\n               $groupuser = new Group_User();\n               while ($data =  $iterator->next()) {\n\n                  if (in_array($data[\"groups_id\"], $this->input[\"_groups\"])) {\n                     // Delete found item in order not to add it again\n                     unset($this->input[\"_groups\"][array_search($data[\"groups_id\"],\n                           $this->input[\"_groups\"])]);\n\n                  } else if ($data['is_dynamic']) {\n                     $groupuser->delete(['id' => $data[\"id\"]]);\n                  }\n               }\n\n               //If the user needs to be added to one group or more\n               if (count($this->input[\"_groups\"]) > 0) {\n                  foreach ($this->input[\"_groups\"] as $group) {\n                     $groupuser->add(['users_id'   => $this->fields[\"id\"],\n                                           'groups_id'  => $group,\n                                           'is_dynamic' => 1]);\n                  }\n                  unset ($this->input[\"_groups\"]);\n               }\n            }\n         }\n      }\n   }\n\n\n   /**\n    * Synchronize picture (photo) of the user.\n    *\n    * @since 0.85\n    *\n    * @return string|boolean Filename to be stored in user picture field, false if no picture found\n    */\n   function syncLdapPhoto() {\n\n      if (isset($this->fields[\"authtype\"])\n          && (($this->fields[\"authtype\"] == Auth::LDAP)\n               || ($this->fields[\"authtype\"] == Auth::NOT_YET_AUTHENTIFIED\n                   && !empty($this->fields[\"auths_id\"]))\n               || Auth::isAlternateAuth($this->fields['authtype']))) {\n\n         if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n            $config_ldap = new AuthLDAP();\n            $ds          = false;\n\n            //connect ldap server\n            if ($config_ldap->getFromDB($this->fields['auths_id'])) {\n               $ds = $config_ldap->connect();\n            }\n\n            if ($ds) {\n               //get picture fields\n               $picture_field = $config_ldap->fields['picture_field'];\n               if (empty($picture_field)) {\n                  return false;\n               }\n\n               //get picture content in ldap\n               $info = AuthLDAP::getUserByDn($ds, $this->fields['user_dn'],\n                                             [$picture_field], false);\n\n               //getUserByDn returns an array. If the picture is empty,\n               //$info[$picture_field][0] is null\n               if (!isset($info[$picture_field][0]) || empty($info[$picture_field][0])) {\n                  return \"\";\n               }\n               //prepare paths\n               $img       = array_pop($info[$picture_field]);\n               $filename  = uniqid($this->fields['id'].'_');\n               $sub       = substr($filename, -2); /* 2 hex digit */\n               $file      = GLPI_PICTURE_DIR . \"/$sub/${filename}.jpg\";\n\n               if (array_key_exists('picture', $this->fields)) {\n                  $oldfile = GLPI_PICTURE_DIR . \"/\" . $this->fields[\"picture\"];\n               } else {\n                  $oldfile = null;\n               }\n\n               // update picture if not exist or changed\n               if (empty($this->fields[\"picture\"])\n                   || !file_exists($oldfile)\n                   || sha1_file($oldfile) !== sha1($img)) {\n                  if (!is_dir(GLPI_PICTURE_DIR . \"/$sub\")) {\n                     mkdir(GLPI_PICTURE_DIR . \"/$sub\");\n                  }\n\n                  //save picture\n                  $outjpeg = fopen($file, 'wb');\n                  fwrite($outjpeg, $img);\n                  fclose ($outjpeg);\n\n                  //save thumbnail\n                  $thumb = GLPI_PICTURE_DIR . \"/$sub/${filename}_min.jpg\";\n                  Toolbox::resizePicture($file, $thumb);\n\n                  return \"$sub/${filename}.jpg\";\n               }\n               return $this->fields[\"picture\"];\n            }\n         }\n      }\n\n      return false;\n   }\n\n\n   /**\n    * Update emails of the user.\n    * Uses _useremails set from UI, not _emails set from LDAP.\n    *\n    * @return void\n    */\n   function updateUserEmails() {\n      // Update emails  (use _useremails set from UI, not _emails set from LDAP)\n\n      $userUpdated = false;\n\n      if (isset($this->input['_useremails']) && count($this->input['_useremails'])) {\n         $useremail = new UserEmail();\n         foreach ($this->input['_useremails'] as $id => $email) {\n            $email = trim($email);\n\n            // existing email\n            if ($id > 0) {\n               $params = ['id' => $id];\n\n               // empty email : delete\n               if (strlen($email) == 0) {\n                  $deleted = $useremail->delete($params);\n                  $userUpdated = $userUpdated || $deleted;\n\n               } else { // Update email\n                  $params['email'] = $email;\n                  $params['is_default'] = $this->input['_default_email'] == $id ? 1 : 0;\n\n                  $existingUserEmail = new UserEmail();\n                  $existingUserEmail->getFromDB($id);\n                  if ($params['email'] == $existingUserEmail->fields['email']\n                      && $params['is_default'] == $existingUserEmail->fields['is_default']) {\n                     // Do not update if email has not changed\n                     continue;\n                  }\n\n                  $updated = $useremail->update($params);\n                  $userUpdated = $userUpdated || $updated;\n               }\n\n            } else { // New email\n               $email_input = ['email'    => $email,\n                               'users_id' => $this->fields['id']];\n               if (isset($this->input['_default_email'])\n                   && ($this->input['_default_email'] == $id)) {\n                  $email_input['is_default'] = 1;\n               } else {\n                  $email_input['is_default'] = 0;\n               }\n               $added = $useremail->add($email_input);\n               $userUpdated = $userUpdated || $added;\n            }\n         }\n      }\n\n      if ($userUpdated) {\n         // calling $this->update() here leads to loss in $this->input\n         $user = new User();\n         $user->update(['id' => $this->fields['id'], 'date_mod' => $_SESSION['glpi_currenttime']]);\n      }\n   }\n\n\n   /**\n    * Synchronise Dynamics emails of the user.\n    * Uses _emails (set from getFromLDAP), not _usermails set from UI.\n    *\n    * @return void\n    */\n   function syncDynamicEmails() {\n      global $DB;\n\n      $userUpdated = false;\n\n      // input[\"_emails\"] not set when update from user.form or preference\n      if (isset($this->fields[\"authtype\"])\n          && isset($this->input[\"_emails\"])\n          && (($this->fields[\"authtype\"] == Auth::LDAP)\n              || Auth::isAlternateAuth($this->fields['authtype'])\n              || ($this->fields[\"authtype\"] == Auth::MAIL))) {\n\n         if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n            $authtype = Auth::getMethodsByID($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n\n            if (count($authtype)\n                || $this->fields[\"authtype\"] == Auth::EXTERNAL) {\n               // Clean emails\n               // Do a case insensitive comparison as it seems that some LDAP servers\n               // may return same email with different case sensitivity.\n               $unique_emails = [];\n               foreach ($this->input[\"_emails\"] as $email) {\n                  if (!in_array(strtolower($email), array_map('strtolower', $unique_emails))) {\n                     $unique_emails[] = $email;\n                  }\n               }\n               $this->input[\"_emails\"] = $unique_emails;\n\n               // Delete not available groups like to LDAP\n               $iterator = $DB->request([\n                  'SELECT' => [\n                     'id',\n                     'users_id',\n                     'email',\n                     'is_dynamic'\n                  ],\n                  'FROM'   => 'glpi_useremails',\n                  'WHERE'  => ['users_id' => $this->fields['id']]\n               ]);\n\n               $useremail = new UserEmail();\n               while ($data = $iterator->next()) {\n                  // Do a case insensitive comparison as email may be stored with a different case\n                  $i = array_search(strtolower($data[\"email\"]), array_map('strtolower', $this->input[\"_emails\"]));\n                  if ($i !== false) {\n                     // Delete found item in order not to add it again\n                     unset($this->input[\"_emails\"][$i]);\n                  } else if ($data['is_dynamic']) {\n                     // Delete not found email\n                     $deleted = $useremail->delete(['id' => $data[\"id\"]]);\n                     $userUpdated = $userUpdated || $deleted;\n                  }\n               }\n\n               //If the email need to be added\n               if (count($this->input[\"_emails\"]) > 0) {\n                  foreach ($this->input[\"_emails\"] as $email) {\n                     $added = $useremail->add(['users_id'   => $this->fields[\"id\"],\n                                               'email'      => $email,\n                                               'is_dynamic' => 1]);\n                     $userUpdated = $userUpdated || $added;\n                  }\n                  unset ($this->input[\"_emails\"]);\n               }\n            }\n         }\n      }\n\n      if ($userUpdated) {\n         // calling $this->update() here leads to loss in $this->input\n         $user = new User();\n         $user->update(['id' => $this->fields['id'], 'date_mod' => $_SESSION['glpi_currenttime']]);\n      }\n   }\n\n   protected function computeFriendlyName() {\n      global $CFG_GLPI;\n\n      if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n         //computeFriendlyName should not add ID\n         $bkp_conf = $CFG_GLPI['is_ids_visible'];\n         $CFG_GLPI['is_ids_visible'] = 0;\n         $bkp_sessconf = (isset($_SESSION['glpiis_ids_visible']) ? $_SESSION[\"glpiis_ids_visible\"] : 0);\n         $_SESSION[\"glpiis_ids_visible\"] = 0;\n         $name = formatUserName($this->fields[\"id\"],\n                               $this->fields[\"name\"],\n                               (isset($this->fields[\"realname\"]) ? $this->fields[\"realname\"] : ''),\n                               (isset($this->fields[\"firstname\"]) ? $this->fields[\"firstname\"] : ''));\n\n         $CFG_GLPI['is_ids_visible'] = $bkp_conf;\n         $_SESSION[\"glpiis_ids_visible\"] = $bkp_sessconf;\n         return $name;\n      }\n      return '';\n   }\n\n\n   /**\n    * Function that tries to load the user membership from LDAP\n    * by searching in the attributes of the User.\n    *\n    * @param resource $ldap_connection LDAP connection\n    * @param array    $ldap_method     LDAP method\n    * @param string   $userdn          Basedn of the user\n    * @param string   $login           User login\n    *\n    * @return string|boolean Basedn of the user / false if not found\n    */\n   private function getFromLDAPGroupVirtual($ldap_connection, array $ldap_method, $userdn, $login) {\n      global $DB;\n\n      // Search in DB the ldap_field we need to search for in LDAP\n      $iterator = $DB->request([\n         'SELECT'          => 'ldap_field',\n         'DISTINCT'        => true,\n         'FROM'            => 'glpi_groups',\n         'WHERE'           => ['NOT' => ['ldap_field' => '']],\n         'ORDER'           => 'ldap_field'\n      ]);\n      $group_fields = [];\n\n      while ($data = $iterator->next()) {\n         $group_fields[] = Toolbox::strtolower($data[\"ldap_field\"]);\n      }\n      if (count($group_fields)) {\n         //Need to sort the array because edirectory don't like it!\n         sort($group_fields);\n\n         // If the groups must be retrieve from the ldap user object\n         $sr = @ ldap_read($ldap_connection, $userdn, \"objectClass=*\", $group_fields);\n         $v  = AuthLDAP::get_entries_clean($ldap_connection, $sr);\n\n         for ($i=0; $i < $v['count']; $i++) {\n            //Try to find is DN in present and needed: if yes, then extract only the OU from it\n            if ((($ldap_method[\"group_field\"] == 'dn') || in_array('ou', $group_fields))\n                && isset($v[$i]['dn'])) {\n\n               $v[$i]['ou'] = [];\n               for ($tmp=$v[$i]['dn']; count($tmptab = explode(',', $tmp, 2))==2; $tmp=$tmptab[1]) {\n                  $v[$i]['ou'][] = $tmptab[1];\n               }\n\n               // Search in DB for group with ldap_group_dn\n               if (($ldap_method[\"group_field\"] == 'dn')\n                   && (count($v[$i]['ou']) > 0)) {\n                  $group_iterator = $DB->request([\n                     'SELECT' => 'id',\n                     'FROM'   => 'glpi_groups',\n                     'WHERE'  => ['ldap_group_dn' => Toolbox::addslashes_deep($v[$i]['ou'])]\n                  ]);\n\n                  while ($group = $group_iterator->next()) {\n                     $this->fields[\"_groups\"][] = $group['id'];\n                  }\n               }\n\n               // searching with ldap_field='OU' and ldap_value is also possible\n               $v[$i]['ou']['count'] = count($v[$i]['ou']);\n            }\n\n            // For each attribute retrieve from LDAP, search in the DB\n            foreach ($group_fields as $field) {\n               if (isset($v[$i][$field])\n                   && isset($v[$i][$field]['count'])\n                   && ($v[$i][$field]['count'] > 0)) {\n\n                  unset($v[$i][$field]['count']);\n                  $lgroups = [];\n                  foreach (Toolbox::addslashes_deep($v[$i][$field]) as $lgroup) {\n                     $lgroups[] = [\n                        new \\QueryExpression($DB::quoteValue($lgroup).\n                                             \" LIKE \".\n                                             $DB::quoteName('ldap_value'))\n                     ];\n                  }\n                  $group_iterator = $DB->request([\n                     'SELECT' => 'id',\n                     'FROM'   => 'glpi_groups',\n                     'WHERE'  => [\n                        'ldap_field' => $field,\n                        'OR'         => $lgroups\n                     ]\n                  ]);\n\n                  while ($group = $group_iterator->next()) {\n                     $this->fields[\"_groups\"][] = $group['id'];\n                  }\n               }\n            }\n         } // for each ldapresult\n      } // count($group_fields)\n   }\n\n\n   /**\n    * Function that tries to load the user membership from LDAP\n    * by searching in the attributes of the Groups.\n    *\n    * @param resource $ldap_connection    LDAP connection\n    * @param array    $ldap_method        LDAP method\n    * @param string   $userdn             Basedn of the user\n    * @param string   $login              User login\n    *\n    * @return boolean true if search is applicable, false otherwise\n    */\n   private function getFromLDAPGroupDiscret($ldap_connection, array $ldap_method, $userdn, $login) {\n      global $DB;\n\n      // No group_member_field : unable to get group\n      if (empty($ldap_method[\"group_member_field\"])) {\n         return false;\n      }\n\n      if ($ldap_method[\"use_dn\"]) {\n         $user_tmp = $userdn;\n      } else {\n         //Don't add $ldap_method[\"login_field\"].\"=\", because sometimes it may not work (for example with posixGroup)\n         $user_tmp = $login;\n      }\n\n      $v = $this->ldap_get_user_groups($ldap_connection, $ldap_method[\"basedn\"],\n                                       $user_tmp,\n                                       $ldap_method[\"group_condition\"],\n                                       $ldap_method[\"group_member_field\"],\n                                       $ldap_method[\"use_dn\"],\n                                       $ldap_method[\"login_field\"]);\n      foreach ($v as $result) {\n         if (isset($result[$ldap_method[\"group_member_field\"]])\n             && is_array($result[$ldap_method[\"group_member_field\"]])\n             && (count($result[$ldap_method[\"group_member_field\"]]) > 0)) {\n\n             $iterator = $DB->request([\n               'SELECT' => 'id',\n               'FROM'   => 'glpi_groups',\n               'WHERE'  => ['ldap_group_dn' => Toolbox::addslashes_deep($result[$ldap_method[\"group_member_field\"]])]\n             ]);\n\n            while ($group = $iterator->next()) {\n               $this->fields[\"_groups\"][] = $group['id'];\n            }\n         }\n      }\n      return true;\n   }\n\n\n   /**\n    * Function that tries to load the user informations from LDAP.\n    *\n    * @param resource $ldap_connection LDAP connection\n    * @param array    $ldap_method     LDAP method\n    * @param string   $userdn          Basedn of the user\n    * @param string   $login           User Login\n    * @param boolean  $import          true for import, false for update\n    *\n    * @return boolean true if found / false if not\n    */\n   function getFromLDAP($ldap_connection, array $ldap_method, $userdn, $login, $import = true) {\n      global $DB, $CFG_GLPI;\n\n      // we prevent some delay...\n      if (empty($ldap_method[\"host\"])) {\n         return false;\n      }\n\n      if (is_resource($ldap_connection)) {\n         //Set all the search fields\n         $this->fields['password'] = \"\";\n\n         $fields  = AuthLDAP::getSyncFields($ldap_method);\n\n         //Hook to allow plugin to request more attributes from ldap\n         $fields = Plugin::doHookFunction(\"retrieve_more_field_from_ldap\", $fields);\n\n         $fields  = array_filter($fields);\n         $f       = self::getLdapFieldNames($fields);\n\n         $sr      = @ ldap_read($ldap_connection, $userdn, \"objectClass=*\", $f);\n         $v       = AuthLDAP::get_entries_clean($ldap_connection, $sr);\n\n         if (!is_array($v)\n             || ( count($v) == 0)\n             || empty($v[0][$fields['name']][0])) {\n            return false;\n         }\n\n         //Store user's dn\n         $this->fields['user_dn']    = addslashes($userdn);\n         //Store date_sync\n         $this->fields['date_sync']  = $_SESSION['glpi_currenttime'];\n         // Empty array to ensure than syncDynamicEmails will be done\n         $this->fields[\"_emails\"]    = [];\n         // force authtype as we retrieve this user by ldap (we could have login with SSO)\n         $this->fields[\"authtype\"] = Auth::LDAP;\n\n         foreach ($fields as $k => $e) {\n            $val = AuthLDAP::getFieldValue(\n               [$e => self::getLdapFieldValue($e, $v)],\n               $e\n            );\n            if (empty($val)) {\n               switch ($k) {\n                  case \"language\" :\n                     // Not set value : managed but user class\n                     break;\n\n                  case \"usertitles_id\" :\n                  case \"usercategories_id\" :\n                  case 'locations_id' :\n                  case 'users_id_supervisor' :\n                     $this->fields[$k] = 0;\n                     break;\n\n                  default :\n                     $this->fields[$k] = \"\";\n               }\n\n            } else {\n               $val = Toolbox::addslashes_deep($val);\n               switch ($k) {\n                  case \"email1\" :\n                  case \"email2\" :\n                  case \"email3\" :\n                  case \"email4\" :\n                     // Manage multivaluable fields\n                     if (!empty($v[0][$e])) {\n                        foreach ($v[0][$e] as $km => $m) {\n                           if (!preg_match('/count/', $km)) {\n                              $this->fields[\"_emails\"][] = addslashes($m);\n                           }\n                        }\n                        // Only get them once if duplicated\n                        $this->fields[\"_emails\"] = array_unique($this->fields[\"_emails\"]);\n                     }\n                     break;\n\n                  case \"language\" :\n                     $language = Config::getLanguage($val);\n                     if ($language != '') {\n                        $this->fields[$k] = $language;\n                     }\n                     break;\n\n                  case \"usertitles_id\" :\n                     $this->fields[$k] = Dropdown::importExternal('UserTitle', $val);\n                     break;\n\n                  case 'locations_id' :\n                     // use import to build the location tree\n                     $this->fields[$k] = Dropdown::import('Location',\n                                                          ['completename' => $val,\n                                                           'entities_id'  => 0,\n                                                           'is_recursive' => 1]);\n                    break;\n\n                  case \"usercategories_id\" :\n                     $this->fields[$k] = Dropdown::importExternal('UserCategory', $val);\n                     break;\n\n                  case 'users_id_supervisor':\n                     $this->fields[$k] = self::getIdByField('user_dn', $val, false);\n                     break;\n\n                  default :\n                     $this->fields[$k] = $val;\n               }\n            }\n         }\n\n         // Empty array to ensure than syncLdapGroups will be done\n         $this->fields[\"_groups\"] = [];\n\n         ///The groups are retrieved by looking into an ldap user object\n         if (($ldap_method[\"group_search_type\"] == 0)\n             || ($ldap_method[\"group_search_type\"] == 2)) {\n            $this->getFromLDAPGroupVirtual($ldap_connection, $ldap_method, $userdn, $login);\n         }\n\n         ///The groups are retrived by looking into an ldap group object\n         if (($ldap_method[\"group_search_type\"] == 1)\n             || ($ldap_method[\"group_search_type\"] == 2)) {\n            $this->getFromLDAPGroupDiscret($ldap_connection, $ldap_method, $userdn, $login);\n         }\n\n         ///Only process rules if working on the master database\n         if (!$DB->isSlave()) {\n            //Instanciate the affectation's rule\n            $rule = new RuleRightCollection();\n\n            //Process affectation rules :\n            //we don't care about the function's return because all\n            //the datas are stored in session temporary\n            if (isset($this->fields[\"_groups\"])) {\n               $groups = $this->fields[\"_groups\"];\n            } else {\n               $groups = [];\n            }\n\n            $this->fields = $rule->processAllRules($groups, Toolbox::stripslashes_deep($this->fields), [\n               'type'        => Auth::LDAP,\n               'ldap_server' => $ldap_method[\"id\"],\n               'connection'  => $ldap_connection,\n               'userdn'      => $userdn,\n               'login'       => $this->fields['name'],\n               'mail_email'  => $this->fields['_emails']\n            ]);\n\n            $this->fields['_ruleright_process'] = true;\n\n            //If rule  action is ignore import\n            if ($import\n                && isset($this->fields[\"_stop_import\"])) {\n               return false;\n            }\n            //or no rights found & do not import users with no rights\n            if ($import\n                && !$CFG_GLPI[\"use_noright_users_add\"]) {\n               $ok = false;\n               if (isset($this->fields[\"_ldap_rules\"])\n                   && count($this->fields[\"_ldap_rules\"])) {\n                  if (isset($this->fields[\"_ldap_rules\"][\"rules_entities_rights\"])\n                      && count($this->fields[\"_ldap_rules\"][\"rules_entities_rights\"])) {\n                     $ok = true;\n                  }\n                  if (!$ok) {\n                     $entity_count = 0;\n                     $right_count  = 0;\n                     if (Profile::getDefault()) {\n                        $right_count++;\n                     }\n                     if (isset($this->fields[\"_ldap_rules\"][\"rules_entities\"])) {\n                        $entity_count += count($this->fields[\"_ldap_rules\"][\"rules_entities\"]);\n                     }\n                     if (isset($this->input[\"_ldap_rules\"][\"rules_rights\"])) {\n                        $right_count += count($this->fields[\"_ldap_rules\"][\"rules_rights\"]);\n                     }\n                     if ($entity_count && $right_count) {\n                        $ok = true;\n                     }\n                  }\n               }\n               if (!$ok) {\n                  $this->fields[\"_stop_import\"] = true;\n                  return false;\n               }\n            }\n\n            // Add ldap result to data send to the hook\n            $this->fields['_ldap_result'] = $v;\n            $this->fields['_ldap_conn']   = $ldap_connection;\n            //Hook to retrieve more information for ldap\n            $this->fields = Plugin::doHookFunction(\"retrieve_more_data_from_ldap\", $this->fields);\n            unset($this->fields['_ldap_result']);\n         }\n         return true;\n      }\n      return false;\n\n   } // getFromLDAP()\n\n\n   /**\n    * Get all groups a user belongs to.\n    *\n    * @param resource $ds                 ldap connection\n    * @param string   $ldap_base_dn       Basedn used\n    * @param string   $user_dn            Basedn of the user\n    * @param string   $group_condition    group search condition\n    * @param string   $group_member_field group field member in a user object\n    * @param boolean  $use_dn             search dn of user ($login_field=$user_dn) in group_member_field\n    * @param string   $login_field        user login field\n    *\n    * @return array Groups of the user located in [0][$group_member_field] in returned array\n    */\n   function ldap_get_user_groups($ds, $ldap_base_dn, $user_dn, $group_condition,\n                                 $group_member_field, $use_dn, $login_field) {\n\n      $groups     = [];\n      $listgroups = [];\n\n      //User dn may contain ( or ), need to espace it!\n      $user_dn = str_replace([\"(\", \")\", \"\\,\", \"\\+\"], [\"\\(\", \"\\)\", \"\\\\\\,\", \"\\\\\\+\"],\n                             $user_dn);\n\n      //Only retrive cn and member attributes from groups\n      $attrs = ['dn'];\n\n      if (!$use_dn) {\n         $filter = \"(& $group_condition (|($group_member_field=$user_dn)\n                                          ($group_member_field=$login_field=$user_dn)))\";\n      } else {\n         $filter = \"(& $group_condition ($group_member_field=$user_dn))\";\n      }\n\n      //Perform the search\n      $filter = Toolbox::unclean_cross_side_scripting_deep($filter);\n      $sr     = ldap_search($ds, $ldap_base_dn, $filter, $attrs);\n\n      //Get the result of the search as an array\n      $info = AuthLDAP::get_entries_clean($ds, $sr);\n      //Browse all the groups\n      $info_count = count($info);\n      for ($i = 0; $i < $info_count; $i++) {\n         //Get the cn of the group and add it to the list of groups\n         if (isset($info[$i][\"dn\"]) && ($info[$i][\"dn\"] != '')) {\n            $listgroups[$i] = $info[$i][\"dn\"];\n         }\n      }\n\n      //Create an array with the list of groups of the user\n      $groups[0][$group_member_field] = $listgroups;\n      //Return the groups of the user\n      return $groups;\n   }\n\n\n   /**\n    * Function that tries to load the user informations from IMAP.\n    *\n    * @param array  $mail_method  mail method description array\n    * @param string $name         login of the user\n    *\n    * @return boolean true if method is applicable, false otherwise\n    */\n   function getFromIMAP(array $mail_method, $name) {\n      global $DB;\n\n      // we prevent some delay..\n      if (empty($mail_method[\"host\"])) {\n         return false;\n      }\n\n      // some defaults...\n      $this->fields['password']  = \"\";\n      // Empty array to ensure than syncDynamicEmails will be done\n      $this->fields[\"_emails\"]   = [];\n      $email                     = '';\n      if (strpos($name, \"@\")) {\n         $email = $name;\n      } else {\n         $email = $name . \"@\" . $mail_method[\"host\"];\n      }\n      $this->fields[\"_emails\"][] = $email;\n\n      $this->fields['name']      = $name;\n      //Store date_sync\n      $this->fields['date_sync'] = $_SESSION['glpi_currenttime'];\n      // force authtype as we retrieve this user by imap (we could have login with SSO)\n      $this->fields[\"authtype\"] = Auth::MAIL;\n\n      if (!$DB->isSlave()) {\n         //Instanciate the affectation's rule\n         $rule = new RuleRightCollection();\n\n         //Process affectation rules :\n         //we don't care about the function's return because all the datas are stored in session temporary\n         if (isset($this->fields[\"_groups\"])) {\n            $groups = $this->fields[\"_groups\"];\n         } else {\n            $groups = [];\n         }\n         $this->fields = $rule->processAllRules($groups, Toolbox::stripslashes_deep($this->fields), [\n            'type'        => Auth::MAIL,\n            'mail_server' => $mail_method[\"id\"],\n            'login'       => $name,\n            'email'       => $email]\n         );\n         $this->fields['_ruleright_process'] = true;\n      }\n      return true;\n   }\n\n\n   /**\n    * Function that tries to load the user informations from the SSO server.\n    *\n    * @since 0.84\n    *\n    * @return boolean true if method is applicable, false otherwise\n    */\n   function getFromSSO() {\n      global $DB, $CFG_GLPI;\n\n      $a_field = [];\n      foreach ($CFG_GLPI as $key=>$value) {\n         if (!is_array($value) && !empty($value)\n             && strstr($key, \"_ssofield\")) {\n            $key = str_replace('_ssofield', '', $key);\n            $a_field[$key] = $value;\n         }\n      }\n\n      if (count($a_field) == 0) {\n         return true;\n      }\n      $this->fields['_ruleright_process'] = true;\n      foreach ($a_field as $field=>$value) {\n         if (!isset($_SERVER[$value])\n             || empty($_SERVER[$value])) {\n\n            switch ($field) {\n               case \"title\" :\n                  $this->fields['usertitles_id'] = 0;\n                  break;\n\n               case \"category\" :\n                  $this->fields['usercategories_id'] = 0;\n                  break;\n\n               default :\n                  $this->fields[$field] = \"\";\n            }\n\n         } else {\n            switch ($field) {\n               case \"email1\" :\n               case \"email2\" :\n               case \"email3\" :\n               case \"email4\" :\n                  // Manage multivaluable fields\n                  if (!preg_match('/count/', $_SERVER[$value])) {\n                     $this->fields[\"_emails\"][] = addslashes($_SERVER[$value]);\n                  }\n                  // Only get them once if duplicated\n                  $this->fields[\"_emails\"] = array_unique($this->fields[\"_emails\"]);\n                  break;\n\n               case \"language\" :\n                  $language = Config::getLanguage($_SERVER[$value]);\n                  if ($language != '') {\n                     $this->fields[$field] = $language;\n                  }\n                  break;\n\n               case \"title\" :\n                  $this->fields['usertitles_id']\n                        = Dropdown::importExternal('UserTitle', addslashes($_SERVER[$value]));\n                  break;\n\n               case \"category\" :\n                  $this->fields['usercategories_id']\n                        = Dropdown::importExternal('UserCategory', addslashes($_SERVER[$value]));\n                  break;\n\n               default :\n                  $this->fields[$field] = $_SERVER[$value];\n                  break;\n\n            }\n         }\n      }\n       ///Only process rules if working on the master database\n      if (!$DB->isSlave()) {\n         //Instanciate the affectation's rule\n         $rule = new RuleRightCollection();\n\n         $this->fields = $rule->processAllRules([], Toolbox::stripslashes_deep($this->fields), [\n            'type'   => Auth::EXTERNAL,\n            'email'  => $this->fields[\"_emails\"],\n            'login'  => $this->fields[\"name\"]\n         ]);\n\n         //If rule  action is ignore import\n         if (isset($this->fields[\"_stop_import\"])) {\n            return false;\n         }\n      }\n      return true;\n   }\n\n\n   /**\n    * Blank passwords field of a user in the DB.\n    * Needed for external auth users.\n    *\n    * @return void\n    */\n   function blankPassword() {\n      global $DB;\n\n      if (!empty($this->fields[\"name\"])) {\n         $DB->update(\n            $this->getTable(), [\n               'password' => ''\n            ], [\n               'name' => $this->fields['name']\n            ]\n         );\n      }\n   }\n\n\n   /**\n    * Print a good title for user pages.\n    *\n    * @return void\n    */\n   function title() {\n      global $CFG_GLPI;\n\n      $buttons = [];\n      $title   = self::getTypeName(Session::getPluralNumber());\n\n      if (static::canCreate()) {\n         $buttons[\"user.form.php\"] = __('Add user...');\n         $title                    = \"\";\n\n         if (Auth::useAuthExt()\n             && Session::haveRight(\"user\", self::IMPORTEXTAUTHUSERS)) {\n            // This requires write access because don't use entity config.\n            $buttons[\"user.form.php?new=1&amp;ext_auth=1\"] = __('... From an external source');\n         }\n      }\n      if (Session::haveRight(\"user\", self::IMPORTEXTAUTHUSERS)\n         && (static::canCreate() || static::canUpdate())) {\n         if (AuthLDAP::useAuthLdap()) {\n            $buttons[\"ldap.php\"] = __('LDAP directory link');\n         }\n      }\n      Html::displayTitle($CFG_GLPI[\"root_doc\"] . \"/pics/users.png\", self::getTypeName(Session::getPluralNumber()), $title,\n                         $buttons);\n   }\n\n\n   /**\n    * Check if current user have more right than the specified one.\n    *\n    * @param integer $ID ID of the user\n    *\n    * @return boolean\n    */\n   function currentUserHaveMoreRightThan($ID) {\n\n      $user_prof = Profile_User::getUserProfiles($ID);\n      return Profile::currentUserHaveMoreRightThan($user_prof);\n   }\n\n\n   /**\n    * Print the user form.\n    *\n    * @param integer $ID    ID of the user\n    * @param array $options Options\n    *     - string   target        Form target\n    *     - boolean  withtemplate  Template or basic item\n    *\n    * @return boolean true if user found, false otherwise\n    */\n   function showForm($ID, array $options = []) {\n      global $CFG_GLPI, $DB;\n\n      // Affiche un formulaire User\n      if (($ID != Session::getLoginUserID()) && !self::canView()) {\n         return false;\n      }\n\n      $this->initForm($ID, $options);\n\n      $ismyself = $ID == Session::getLoginUserID();\n      $higherrights = $this->currentUserHaveMoreRightThan($ID);\n      if ($ID) {\n         $caneditpassword = $higherrights || ($ismyself && Session::haveRight('password_update', 1));\n      } else {\n         // can edit on creation form\n         $caneditpassword = true;\n      }\n\n      $extauth = !(($this->fields[\"authtype\"] == Auth::DB_GLPI)\n                   || (($this->fields[\"authtype\"] == Auth::NOT_YET_AUTHENTIFIED)\n                       && !empty($this->fields[\"password\"])));\n\n      $formtitle = $this->getTypeName(1);\n\n      if ($ID > 0) {\n         $formtitle .= \"<a class='pointer far fa-address-card fa-lg' target='_blank' href='\".\n                       User::getFormURLWithID($ID).\"&amp;getvcard=1' title='\".__s('Download user VCard').\n                       \"'><span class='sr-only'>\". __('Vcard').\"</span></a>\";\n         if (Session::canImpersonate($ID)) {\n            $formtitle .= '<button type=\"button\" class=\"pointer btn-linkstyled btn-impersonate\" name=\"impersonate\" value=\"1\">'\n               . '<i class=\"fas fa-user-secret fa-lg\" title=\"' . __s('Impersonate') . '\"></i> '\n               . '<span class=\"sr-only\">' . __s('Impersonate') . '</span>'\n               . '</button>';\n\n            // \"impersonate\" button type is set to \"button\" on form display to prevent it to be used\n            // by default (as it is the first found in current form) when pressing \"enter\" key.\n            // When clicking it, switch to \"submit\" type to make it submit current user form.\n            $impersonate_js = <<<JAVASCRIPT\n               (function($) {\n                  $('button[type=\"button\"][name=\"impersonate\"]').click(\n                     function () {\n                        $(this).attr('type', 'submit');\n                     }\n                  );\n               })(jQuery);\nJAVASCRIPT;\n            $formtitle .= Html::scriptBlock($impersonate_js);\n         }\n      }\n\n      $options['formtitle']   = $formtitle;\n      $options['formoptions'] = ($options['formoptions'] ?? '') . \" enctype='multipart/form-data'\";\n      $this->showFormHeader($options);\n      $rand = mt_rand();\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td><label for='name'>\" . __('Login') . \"</label></td>\";\n      if ($this->fields[\"name\"] == \"\" ||\n          !empty($this->fields[\"password\"])\n          || ($this->fields[\"authtype\"] == Auth::DB_GLPI)) {\n         //display login field for new records, or if this is not external auth\n         echo \"<td><input name='name' id='name' value=\\\"\" . $this->fields[\"name\"] . \"\\\"></td>\";\n      } else {\n         echo \"<td class='b'>\" . $this->fields[\"name\"];\n         echo \"<input type='hidden' name='name' value=\\\"\" . $this->fields[\"name\"] . \"\\\"></td>\";\n      }\n\n      if (!empty($this->fields[\"name\"])) {\n         echo \"<td rowspan='7'>\" . __('Picture') . \"</td>\";\n         echo \"<td rowspan='7'>\";\n         echo \"<div class='user_picture_border_small' id='picture$rand'>\";\n         echo \"<img class='user_picture_small' alt=\\\"\".__s('Picture').\"\\\" src='\".\n                User::getThumbnailURLForPicture($this->fields['picture']).\"'>\";\n         // echo \"<img src='\".self::getURLForPicture($this->fields[\"picture\"]).\"' class='user_picture'/>\";\n         echo \"</div>\";\n         $full_picture = \"<div class='user_picture_border'>\";\n         $full_picture .= \"<img class='user_picture' alt=\\\"\".__s('Picture').\"\\\" src='\".\n                            User::getURLForPicture($this->fields['picture']).\"'>\";\n         $full_picture .= \"</div>\";\n\n         Html::showTooltip($full_picture, ['applyto' => \"picture$rand\"]);\n         echo Html::file(['name' => 'picture', 'display' => false, 'onlyimages' => true]);\n         echo \"<input type='checkbox' name='_blank_picture'>&nbsp;\".__('Clear');\n         echo \"</td>\";\n      } else {\n         echo \"<td rowspan='7'></td>\";\n         echo \"<td rowspan='7'></td>\";\n      }\n      echo \"</tr>\";\n\n      //If it's an external auth, check if the sync_field must be displayed\n      if ($extauth\n         && $this->fields['auths_id']\n            && AuthLDAP::isSyncFieldConfigured($this->fields['auths_id'])) {\n         $syncrand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_sync_field$syncrand'>\" . __('Synchronization field') . \"</label></td><td>\";\n         if (self::canUpdate()\n             && (!$extauth || empty($ID))) {\n                Html::autocompletionTextField($this, \"sync_field\", ['rand' => $syncrand]);\n         } else {\n            if (empty($this->fields['sync_field'])) {\n               echo Dropdown::EMPTY_VALUE;\n            } else {\n               echo $this->fields['sync_field'];\n            }\n         }\n         echo \"</td></tr>\";\n      } else {\n         echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n      }\n\n      $surnamerand = mt_rand();\n      echo \"<tr class='tab_bg_1'><td><label for='textfield_realname$surnamerand'>\" . __('Surname') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"realname\", ['rand' => $surnamerand]);\n      echo \"</td></tr>\";\n\n      $firstnamerand = mt_rand();\n      echo \"<tr class='tab_bg_1'><td><label for='textfield_firstname$firstnamerand'>\" . __('First name') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"firstname\", ['rand' => $firstnamerand]);\n      echo \"</td></tr>\";\n\n      //do some rights verification\n      if (self::canUpdate()\n          && (!$extauth || empty($ID))\n          && $caneditpassword) {\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td><label for='password'>\" . __('Password').\"</label></td>\";\n         echo \"<td><input id='password' type='password' name='password' value='' size='20'\n                    autocomplete='new-password' onkeyup=\\\"return passwordCheck();\\\"></td>\";\n\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td><label for='password2'>\" . __('Password confirmation') . \"</label></td>\";\n         echo \"<td><input type='password' id='password2' name='password2' value='' size='20' autocomplete='new-password'>\";\n         echo \"</td></tr>\";\n\n         if ($CFG_GLPI[\"use_password_security\"]) {\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td rowspan='2'>\";\n            echo __('Password security policy');\n            echo \"</td>\";\n            echo \"<td rowspan='2'>\";\n            Config::displayPasswordSecurityChecks();\n            echo \"</td>\";\n            echo \"</tr>\";\n         }\n\n      } else {\n         echo \"<tr class='tab_bg_1'><td></td><td></td></tr>\";\n         echo \"<tr class='tab_bg_1'><td></td><td></td></tr>\";\n      }\n\n      $tz_warning = '';\n      $tz_available = $DB->areTimezonesAvailable($tz_warning);\n      if ($tz_available || Session::haveRight(\"config\", READ)) {\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td><label for='timezone'>\".__('Time zone').\"</label></td><td>\";\n         if ($tz_available) {\n            $timezones = $DB->getTimezones();\n            Dropdown::showFromArray(\n               'timezone',\n               $timezones, [\n                  'value'                 => $this->fields[\"timezone\"],\n                  'display_emptychoice'   => true\n               ]\n            );\n         } else if (Session::haveRight(\"config\", READ)) {\n            // Display a warning but only if user is more or less an admin\n            echo \"<img src=\\\"{$CFG_GLPI['root_doc']}/pics/warning_min.png\\\">\";\n            echo $tz_warning;\n         }\n         echo \"</td></tr>\";\n      }\n\n      echo \"<tr class='tab_bg_1'>\";\n      if (!GLPI_DEMO_MODE) {\n         $activerand = mt_rand();\n         echo \"<td><label for='dropdown_is_active$activerand'>\".__('Active').\"</label></td><td>\";\n         Dropdown::showYesNo('is_active', $this->fields['is_active'], -1, ['rand' => $activerand]);\n         echo \"</td>\";\n      } else {\n         echo \"<td colspan='2'></td>\";\n      }\n      echo \"<td>\" . _n('Email', 'Emails', Session::getPluralNumber());\n      UserEmail::showAddEmailButton($this);\n      echo \"</td><td>\";\n      UserEmail::showForUser($this);\n      echo \"</td>\";\n      echo \"</tr>\";\n\n      if (!GLPI_DEMO_MODE) {\n         $sincerand = mt_rand();\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td><label for='showdate$sincerand'>\".__('Valid since').\"</label></td><td>\";\n         Html::showDateTimeField(\"begin_date\", ['value'       => $this->fields[\"begin_date\"],\n                                                'rand'        => $sincerand,\n                                                'maybeempty'  => true]);\n         echo \"</td>\";\n\n         $untilrand = mt_rand();\n         echo \"<td><label for='showdate$untilrand'>\".__('Valid until').\"</label></td><td>\";\n         Html::showDateTimeField(\"end_date\", ['value'       => $this->fields[\"end_date\"],\n                                              'rand'        => $untilrand,\n                                              'maybeempty'  => true]);\n         echo \"</td></tr>\";\n      }\n\n      $phonerand = mt_rand();\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td><label for='textfield_phone$phonerand'>\" .  Phone::getTypeName(1) . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"phone\", ['rand' => $phonerand]);\n      echo \"</td>\";\n      //Authentications information : auth method used and server used\n      //don't display is creation of a new user'\n      if (!empty($ID)) {\n         if (Session::haveRight(self::$rightname, self::READAUTHENT)) {\n            echo \"<td>\" . __('Authentication') . \"</td><td>\";\n            echo Auth::getMethodName($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n            if (!empty($this->fields[\"date_sync\"])) {\n               //TRANS: %s is the date of last sync\n               echo '<br>'.sprintf(__('Last synchronization on %s'),\n                                   Html::convDateTime($this->fields[\"date_sync\"]));\n            }\n            if (!empty($this->fields[\"user_dn\"])) {\n               //TRANS: %s is the user dn\n               echo '<br>'.sprintf(__('%1$s: %2$s'), __('User DN'), $this->fields[\"user_dn\"]);\n            }\n            if ($this->fields['is_deleted_ldap']) {\n               echo '<br>'.__('User missing in LDAP directory');\n            }\n\n            echo \"</td>\";\n         } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n         }\n      } else {\n         echo \"<td colspan='2'><input type='hidden' name='authtype' value='1'></td>\";\n      }\n\n      echo \"</tr>\";\n\n      $mobilerand = mt_rand();\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td><label for='textfield_mobile$mobilerand'>\" . __('Mobile phone') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"mobile\", ['rand' => $mobilerand]);\n      echo \"</td>\";\n      $catrand = mt_rand();\n      echo \"<td><label for='dropdown_usercategories_id$catrand'>\" . __('Category') . \"</label></td><td>\";\n      UserCategory::dropdown(['value' => $this->fields[\"usercategories_id\"], 'rand' => $catrand]);\n      echo \"</td></tr>\";\n\n      $phone2rand = mt_rand();\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td><label for='textfield_phone2$phone2rand'>\" .  __('Phone 2') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"phone2\", ['rand' => $phone2rand]);\n      echo \"</td>\";\n      echo \"<td rowspan='4' class='middle'><label for='comment'>\" . __('Comments') . \"</label></td>\";\n      echo \"<td class='center middle' rowspan='4'>\";\n      echo \"<textarea cols='45' rows='6' id='comment' name='comment' >\".$this->fields[\"comment\"].\"</textarea>\";\n      echo \"</td></tr>\";\n\n      $admnumrand = mt_rand();\n      echo \"<tr class='tab_bg_1'><td><label for='textfield_registration_number$admnumrand'>\" . __('Administrative number') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"registration_number\", ['rand' => $admnumrand]);\n      echo \"</td></tr>\";\n\n      $titlerand = mt_rand();\n      echo \"<tr class='tab_bg_1'><td><label for='dropdown_usertitles_id$titlerand'>\" . _x('person', 'Title') . \"</label></td><td>\";\n      UserTitle::dropdown(['value' => $this->fields[\"usertitles_id\"], 'rand' => $titlerand]);\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      if (!empty($ID)) {\n         $locrand = mt_rand();\n         echo \"<td><label for='dropdown_locations_id$locrand'>\" . Location::getTypeName(1) . \"</label></td><td>\";\n         $entities = $this->getEntities();\n         if (count($entities) <= 0) {\n            $entities = -1;\n         }\n         Location::dropdown(['value'  => $this->fields[\"locations_id\"],\n                             'rand'   => $locrand,\n                             'entity' => $entities]);\n         echo \"</td>\";\n      }\n      echo \"</tr>\";\n\n      if (empty($ID)) {\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<th colspan='2'>\"._n('Authorization', 'Authorizations', 1).\"</th>\";\n         $recurrand = mt_rand();\n         echo \"<td><label for='dropdown__is_recursive$recurrand'>\" .  __('Recursive') . \"</label></td><td>\";\n         Dropdown::showYesNo(\"_is_recursive\", 0, -1, ['rand' => $recurrand]);\n         echo \"</td></tr>\";\n         $profilerand = mt_rand();\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td><label for='dropdown__profiles_id$profilerand'>\" .  Profile::getTypeName(1) . \"</label></td><td>\";\n         Profile::dropdownUnder(['name'  => '_profiles_id',\n                                 'rand'  => $profilerand,\n                                 'value' => Profile::getDefault()]);\n\n         $entrand = mt_rand();\n         echo \"</td><td><label for='dropdown__entities_id$entrand'>\" .  Entity::getTypeName(1) . \"</label></td><td>\";\n         Entity::dropdown(['name'                => '_entities_id',\n                           'display_emptychoice' => false,\n                           'rand'                => $entrand,\n                           'entity'              => $_SESSION['glpiactiveentities']]);\n         echo \"</td></tr>\";\n      } else {\n         if ($higherrights || $ismyself) {\n            $profilerand = mt_rand();\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='dropdown_profiles_id$profilerand'>\" .  __('Default profile') . \"</label></td><td>\";\n\n            $options   = Dropdown::getDropdownArrayNames('glpi_profiles',\n                                                         Profile_User::getUserProfiles($this->fields['id']));\n\n            Dropdown::showFromArray(\"profiles_id\", $options,\n                                    ['value'               => $this->fields[\"profiles_id\"],\n                                     'rand'                => $profilerand,\n                                     'display_emptychoice' => true]);\n         }\n         if ($higherrights) {\n            $entrand = mt_rand();\n            echo \"</td><td><label for='dropdown_entities_id$entrand'>\" .  __('Default entity') . \"</label></td><td>\";\n            $entities = $this->getEntities();\n            Entity::dropdown(['value'  => $this->fields[\"entities_id\"],\n                              'rand'   => $entrand,\n                              'entity' => $entities]);\n            echo \"</td></tr>\";\n\n            $grouprand = mt_rand();\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='dropdown_profiles_id$grouprand'>\" .  __('Default group') . \"</label></td><td>\";\n\n            $options = [];\n            foreach (Group_User::getUserGroups($this->fields['id']) as $group) {\n               $options[$group['id']] = $group['completename'];\n            }\n\n            Dropdown::showFromArray(\"groups_id\", $options,\n                                    ['value'               => $this->fields[\"groups_id\"],\n                                     'rand'                => $grouprand,\n                                     'display_emptychoice' => true]);\n\n            echo \"</td>\";\n            $userrand = mt_rand();\n            echo \"<td><label for='dropdown_users_id_supervisor_$userrand'>\" .  __('Responsible') . \"</label></td><td>\";\n\n            User::dropdown(['name'   => 'users_id_supervisor',\n                            'value'  => $this->fields[\"users_id_supervisor\"],\n                            'rand'   => $userrand,\n                            'entity' => $_SESSION[\"glpiactive_entity\"],\n                            'right'  => 'all']);\n            echo \"</td></tr>\";\n         }\n\n         if ($this->can($ID, UPDATE)) {\n            echo \"<tr class='tab_bg_1'><th colspan='4'>\". __('Remote access keys') .\"</th></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td>\";\n            echo __(\"Personal token\");\n            echo \"</td><td colspan='2'>\";\n\n            if (!empty($this->fields[\"personal_token\"])) {\n               echo \"<div class='copy_to_clipboard_wrapper'>\";\n               echo Html::input('_personal_token', [\n                                    'value'    => $this->fields[\"personal_token\"],\n                                    'style'    => 'width:90%'\n                                ]);\n               echo \"</div>\";\n               echo \"(\".sprintf(__('generated on %s'),\n                                   Html::convDateTime($this->fields[\"personal_token_date\"])).\")\";\n            }\n            echo \"</td><td>\";\n            Html::showCheckbox(['name'  => '_reset_personal_token',\n                                'title' => __('Regenerate')]);\n            echo \"&nbsp;&nbsp;\".__('Regenerate');\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td>\";\n            echo __(\"API token\");\n            echo \"</td><td colspan='2'>\";\n            if (!empty($this->fields[\"api_token\"])) {\n               echo \"<div class='copy_to_clipboard_wrapper'>\";\n               echo Html::input('_api_token', [\n                                    'value'    => $this->fields[\"api_token\"],\n                                    'style'    => 'width:90%'\n                                ]);\n               echo \"</div>\";\n               echo \"(\".sprintf(__('generated on %s'),\n                                   Html::convDateTime($this->fields[\"api_token_date\"])).\")\";\n            }\n            echo \"</td><td>\";\n            Html::showCheckbox(['name'  => '_reset_api_token',\n                                'title' => __('Regenerate')]);\n            echo \"&nbsp;&nbsp;\".__('Regenerate');\n            echo \"</td></tr>\";\n         }\n\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td colspan='2' class='center'>\";\n         if ($this->fields[\"last_login\"]) {\n            printf(__('Last login on %s'), Html::convDateTime($this->fields[\"last_login\"]));\n         }\n         echo \"</td><td colspan='2'class='center'>\";\n\n         echo \"</td></tr>\";\n      }\n\n      $this->showFormButtons($options);\n\n      return true;\n   }\n\n\n   /** Print the user personnal information for check.\n    *\n    * @param integer $userid ID of the user\n    *\n    * @return void|boolean false if user is not the current user, otherwise print form\n    *\n    * @since 0.84\n    */\n   static function showPersonalInformation($userid) {\n      global $CFG_GLPI;\n\n      $user = new self();\n      if (!$user->can($userid, READ)\n          && ($userid != Session::getLoginUserID())) {\n         return false;\n      }\n      echo \"<table class='tab_glpi left' width='100%'>\";\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='b' width='20%'>\";\n      echo __('Name');\n      echo \"</td><td width='30%'>\";\n      echo getUserName($userid);\n      echo \"</td>\";\n      echo \"<td class='b'  width='20%'>\";\n      echo Phone::getTypeName(1);\n      echo \"</td><td width='30%'>\";\n      echo $user->getField('phone');\n      echo \"</td>\";\n      echo \"</tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='b'>\";\n      echo __('Phone 2');\n      echo \"</td><td>\";\n      echo $user->getField('phone2');\n      echo \"</td>\";\n      echo \"<td class='b'>\";\n      echo __('Mobile phone');\n      echo \"</td><td>\";\n      echo $user->getField('mobile');\n      echo \"</td>\";\n      echo \"</tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='b'>\";\n      echo _n('Email', 'Emails', 1);\n      echo \"</td><td>\";\n      echo $user->getDefaultEmail();\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='b'>\";\n      echo Location::getTypeName(1);\n      echo \"</td><td>\";\n      echo Dropdown::getDropdownName('glpi_locations', $user->getField('locations_id'));\n      echo \"</td>\";\n      echo \"<td colspan='2' class='center'>\";\n      if ($userid == Session::getLoginUserID()) {\n         echo \"<a href='\".$CFG_GLPI['root_doc'].\"/front/preference.php' class='vsubmit'>\".\n               __('Edit').\"</a>\";\n      } else {\n         echo \"&nbsp;\";\n      }\n      echo \"</td>\";\n      echo \"</tr>\";\n      echo \"</table>\";\n   }\n\n\n   /**\n    * Print the user preference form.\n    *\n    * @param string  $target Form target\n    * @param integer $ID     ID of the user\n    *\n    * @return boolean true if user found, false otherwise\n    */\n   function showMyForm($target, $ID) {\n      global $CFG_GLPI, $DB;\n\n      // Affiche un formulaire User\n      if (($ID != Session::getLoginUserID())\n          && !$this->currentUserHaveMoreRightThan($ID)) {\n         return false;\n      }\n      if ($this->getFromDB($ID)) {\n         $rand     = mt_rand();\n         $authtype = $this->getAuthMethodsByID();\n\n         $extauth  = !(($this->fields[\"authtype\"] == Auth::DB_GLPI)\n                       || (($this->fields[\"authtype\"] == Auth::NOT_YET_AUTHENTIFIED)\n                           && !empty($this->fields[\"password\"])));\n\n         // No autocopletion :\n         $save_autocompletion                 = $CFG_GLPI[\"use_ajax_autocompletion\"];\n         $CFG_GLPI[\"use_ajax_autocompletion\"] = false;\n\n         echo \"<div class='center'>\";\n         echo \"<form method='post' name='user_manager' enctype='multipart/form-data' action='\".$target.\"' autocomplete='off'>\";\n         echo \"<table class='tab_cadre_fixe'>\";\n         echo \"<tr><th colspan='4'>\".sprintf(__('%1$s: %2$s'), __('Login'), $this->fields[\"name\"]);\n         echo \"<input type='hidden' name='name' value='\" . $this->fields[\"name\"] . \"'>\";\n         echo \"<input type='hidden' name='id' value='\" . $this->fields[\"id\"] . \"'>\";\n         echo \"</th></tr>\";\n\n         $surnamerand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_realname$surnamerand'>\" . __('Surname') . \"</label></td><td>\";\n\n         if ($extauth\n             && isset($authtype['realname_field'])\n             && !empty($authtype['realname_field'])) {\n\n            echo $this->fields[\"realname\"];\n         } else {\n            Html::autocompletionTextField($this, \"realname\", ['rand' => $surnamerand]);\n         }\n         echo \"</td>\";\n\n         if (!empty($this->fields[\"name\"])) {\n            echo \"<td rowspan='7'>\" . __('Picture') . \"</td>\";\n            echo \"<td rowspan='7'>\";\n            echo \"<div class='user_picture_border_small' id='picture$rand'>\";\n            echo \"<img class='user_picture_small' alt=\\\"\".__s('Picture').\"\\\" src='\".\n                   User::getThumbnailURLForPicture($this->fields['picture']).\"'>\";\n            echo \"</div>\";\n            $full_picture  = \"<div class='user_picture_border'>\";\n            $full_picture .= \"<img class='user_picture' alt=\\\"\".__s('Picture').\"\\\" src='\".\n                              User::getURLForPicture($this->fields['picture']).\"'>\";\n            $full_picture .= \"</div>\";\n\n            Html::showTooltip($full_picture, ['applyto' => \"picture$rand\"]);\n            echo Html::file(['name' => 'picture', 'display' => false, 'onlyimages' => true]);\n\n            echo \"&nbsp;\";\n            Html::showCheckbox(['name' => '_blank_picture', 'title' => __('Clear')]);\n            echo \"&nbsp;\".__('Clear');\n\n            echo \"</td>\";\n            echo \"</tr>\";\n         }\n\n         $firstnamerand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_firstname$firstnamerand'>\" . __('First name') . \"</label></td><td>\";\n         if ($extauth\n             && isset($authtype['firstname_field'])\n             && !empty($authtype['firstname_field'])) {\n\n            echo $this->fields[\"firstname\"];\n         } else {\n            Html::autocompletionTextField($this, \"firstname\", ['rand' => $firstnamerand]);\n         }\n         echo \"</td></tr>\";\n\n         if ($extauth\n            && $this->fields['auths_id']\n               && AuthLDAP::isSyncFieldConfigured($this->fields['auths_id'])) {\n            echo \"<tr class='tab_bg_1'><td>\" . __('Synchronization field') . \"</td><td>\";\n            if (empty($this->fields['sync_field'])) {\n               echo Dropdown::EMPTY_VALUE;\n            } else {\n               echo $this->fields['sync_field'];\n            }\n            echo \"</td></tr>\";\n         } else {\n            echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n         }\n\n         echo \"<tr class='tab_bg_1'>\";\n\n         if (!GLPI_DEMO_MODE) {\n            $langrand = mt_rand();\n            echo \"<td><label for='dropdown_language$langrand'>\" . __('Language') . \"</label></td><td>\";\n            // Language is stored as null in DB if value is same as the global config.\n            $language = $this->fields[\"language\"];\n            if (null === $this->fields[\"language\"]) {\n               $language = $CFG_GLPI['language'];\n            }\n            Dropdown::showLanguages(\n               \"language\",\n               [\n                  'rand'  => $langrand,\n                  'value' => $language,\n               ]\n            );\n            echo \"</td>\";\n         } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n         }\n         echo \"</tr>\";\n\n         //do some rights verification\n         if (!$extauth\n             && Session::haveRight(\"password_update\", \"1\")) {\n\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='password'>\" . __('Password') . \"</label></td>\";\n            echo \"<td><input id='password' type='password' name='password' value='' size='30' autocomplete='new-password' onkeyup=\\\"return passwordCheck();\\\">\";\n            echo \"</td>\";\n            echo \"</tr>\";\n\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='password2'>\" . __('Password confirmation') . \"</label></td>\";\n            echo \"<td><input type='password' name='password2' id='password2' value='' size='30' autocomplete='new-password'>\";\n            echo \"</td></tr>\";\n\n            if ($CFG_GLPI[\"use_password_security\"]) {\n               echo \"<tr class='tab_bg_1'>\";\n               echo \"<td rowspan='2'>\";\n               echo __('Password security policy');\n               echo \"</td>\";\n               echo \"<td rowspan='2'>\";\n               Config::displayPasswordSecurityChecks();\n               echo \"</td>\";\n               echo \"</tr>\";\n            }\n         } else {\n            echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n            echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n            echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n         }\n\n         $tz_warning = '';\n         $tz_available = $DB->areTimezonesAvailable($tz_warning);\n         if ($tz_available || Session::haveRight(\"config\", READ)) {\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='timezone'>\".__('Time zone').\"</label></td><td>\";\n            if ($tz_available) {\n               $timezones = $DB->getTimezones();\n               Dropdown::showFromArray(\n                  'timezone',\n                  $timezones, [\n                     'value'                 => $this->fields[\"timezone\"],\n                     'display_emptychoice'   => true\n                  ]\n               );\n            } else if (Session::haveRight(\"config\", READ)) {\n               // Display a warning but only if user is more or less an admin\n               echo \"<img src=\\\"{$CFG_GLPI['root_doc']}/pics/warning_min.png\\\">\";\n               echo $tz_warning;\n            }\n            echo \"</td>\";\n            if ($extauth\n                || !Session::haveRight(\"password_update\", \"1\")) {\n               echo \"<td colspan='2'></td>\";\n            }\n            echo \"</tr>\";\n         }\n\n         $phonerand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_phone$phonerand'>\" .  Phone::getTypeName(1) . \"</label></td><td>\";\n\n         if ($extauth\n             && isset($authtype['phone_field']) && !empty($authtype['phone_field'])) {\n            echo $this->fields[\"phone\"];\n         } else {\n            Html::autocompletionTextField($this, \"phone\", ['rand' => $phonerand]);\n         }\n         echo \"</td>\";\n         echo \"<td class='top'>\" . _n('Email', 'Emails', Session::getPluralNumber());\n         UserEmail::showAddEmailButton($this);\n         echo \"</td><td>\";\n         UserEmail::showForUser($this);\n         echo \"</td>\";\n         echo \"</tr>\";\n\n         $mobilerand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_mobile$mobilerand'>\" . __('Mobile phone') . \"</label></td><td>\";\n\n         if ($extauth\n             && isset($authtype['mobile_field']) && !empty($authtype['mobile_field'])) {\n            echo $this->fields[\"mobile\"];\n         } else {\n            Html::autocompletionTextField($this, \"mobile\", ['rand' => $mobilerand]);\n         }\n         echo \"</td>\";\n\n         if (count($_SESSION['glpiprofiles']) >1) {\n            $profilerand = mt_rand();\n            echo \"<td><label for='dropdown_profiles_id$profilerand'>\" . __('Default profile') . \"</label></td><td>\";\n\n            $options = Dropdown::getDropdownArrayNames('glpi_profiles',\n                                                       Profile_User::getUserProfiles($this->fields['id']));\n            Dropdown::showFromArray(\"profiles_id\", $options,\n                                    ['value'               => $this->fields[\"profiles_id\"],\n                                     'rand'                => $profilerand,\n                                     'display_emptychoice' => true]);\n            echo \"</td>\";\n\n         } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n         }\n         echo \"</tr>\";\n\n         $phone2rand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_phone2$phone2rand'>\" .  __('Phone 2') . \"</label></td><td>\";\n\n         if ($extauth\n             && isset($authtype['phone2_field']) && !empty($authtype['phone2_field'])) {\n            echo $this->fields[\"phone2\"];\n         } else {\n            Html::autocompletionTextField($this, \"phone2\", ['rand' => $phone2rand]);\n         }\n         echo \"</td>\";\n\n         $entities = $this->getEntities();\n         if (!GLPI_DEMO_MODE\n             && (count($_SESSION['glpiactiveentities']) > 1)) {\n            $entrand = mt_rand();\n            echo \"<td><label for='dropdown_entities_id$entrand'>\" . __('Default entity') . \"</td><td>\";\n            Entity::dropdown(['value'  => $this->fields['entities_id'],\n                              'rand'   => $entrand,\n                              'entity' => $entities]);\n         } else {\n            echo \"<td colspan='2'>&nbsp;\";\n         }\n         echo \"</td></tr>\";\n\n         $admnumrand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_registration_number$admnumrand'>\" . __('Administrative number') . \"</label></td><td>\";\n         if ($extauth\n             && isset($authtype['registration_number_field']) && !empty($authtype['registration_number_field'])) {\n            echo $this->fields[\"registration_number\"];\n         } else {\n            Html::autocompletionTextField($this, \"registration_number\", ['rand' => $admnumrand]);\n         }\n         echo \"</td><td colspan='2'></td></tr>\";\n\n         $locrand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='dropdown_locations_id$locrand'>\" . Location::getTypeName(1) . \"</label></td><td>\";\n         Location::dropdown(['value'  => $this->fields['locations_id'],\n                             'rand'   => $locrand,\n                             'entity' => $entities]);\n\n         if (Config::canUpdate()) {\n            $moderand = mt_rand();\n            echo \"<td><label for='dropdown_use_mode$moderand'>\" . __('Use GLPI in mode') . \"</label></td><td>\";\n            $modes = [\n               Session::NORMAL_MODE => __('Normal'),\n               Session::DEBUG_MODE  => __('Debug'),\n            ];\n            Dropdown::showFromArray('use_mode', $modes, ['value' => $this->fields[\"use_mode\"], 'rand' => $moderand]);\n         } else {\n            echo \"<td colspan='2'>&nbsp;\";\n         }\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><th colspan='4'>\". __('Remote access keys') .\"</th></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\";\n         echo __(\"Personal token\");\n         echo \"</td><td colspan='2'>\";\n\n         if (!empty($this->fields[\"personal_token\"])) {\n            echo \"<div class='copy_to_clipboard_wrapper'>\";\n            echo Html::input('_personal_token', [\n                                 'value'    => $this->fields[\"personal_token\"],\n                                 'style'    => 'width:90%'\n                             ]);\n            echo \"</div>\";\n            echo \"(\".sprintf(__('generated on %s'),\n                                Html::convDateTime($this->fields[\"personal_token_date\"])).\")\";\n         }\n         echo \"</td><td>\";\n         Html::showCheckbox(['name'  => '_reset_personal_token',\n                             'title' => __('Regenerate')]);\n         echo \"&nbsp;&nbsp;\".__('Regenerate');\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\";\n         echo __(\"API token\");\n         echo \"</td><td colspan='2'>\";\n         if (!empty($this->fields[\"api_token\"])) {\n            echo \"<div class='copy_to_clipboard_wrapper'>\";\n            echo Html::input('_api_token', [\n                                 'value'    => $this->fields[\"api_token\"],\n                                 'style'    => 'width:90%'\n                             ]);\n            echo \"</div>\";\n            echo \"(\".sprintf(__('generated on %s'),\n                                Html::convDateTime($this->fields[\"api_token_date\"])).\")\";\n         }\n         echo \"</td><td>\";\n         Html::showCheckbox(['name'  => '_reset_api_token',\n                             'title' => __('Regenerate')]);\n         echo \"&nbsp;&nbsp;\".__('Regenerate');\n         echo \"</td></tr>\";\n\n         echo \"<tr><td class='tab_bg_2 center' colspan='4'>\";\n         echo \"<input type='submit' name='update' value=\\\"\"._sx('button', 'Save').\"\\\" class='submit'>\";\n         echo \"</td></tr>\";\n\n         echo \"</table>\";\n         Html::closeForm();\n         echo \"</div>\";\n         $CFG_GLPI[\"use_ajax_autocompletion\"] = $save_autocompletion;\n         return true;\n      }\n      return false;\n   }\n\n\n   /**\n    * Get all the authentication method parameters for the current user.\n    *\n    * @return array\n    */\n   function getAuthMethodsByID() {\n      return Auth::getMethodsByID($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n   }\n\n\n   function pre_updateInDB() {\n      global $DB;\n\n      if (($key = array_search('name', $this->updates)) !== false) {\n         /// Check if user does not exists\n         $iterator = $DB->request([\n            'FROM'   => $this->getTable(),\n            'WHERE'  => [\n               'name'   => $this->input['name'],\n               'id'     => ['<>', $this->input['id']]\n            ]\n         ]);\n\n         if (count($iterator)) {\n            //To display a message\n            $this->fields['name'] = $this->oldvalues['name'];\n            unset($this->updates[$key]);\n            unset($this->oldvalues['name']);\n            Session::addMessageAfterRedirect(__('Unable to update login. A user already exists.'),\n                                             false, ERROR);\n         }\n\n         if (!Auth::isValidLogin(stripslashes($this->input['name']))) {\n            $this->fields['name'] = $this->oldvalues['name'];\n            unset($this->updates[$key]);\n            unset($this->oldvalues['name']);\n            Session::addMessageAfterRedirect(__('The login is not valid. Unable to update login.'),\n                                             false, ERROR);\n         }\n\n      }\n\n      // ## Security system except for login update:\n      //\n      // An **external** (ldap, mail) user without User::UPDATE right\n      // should not be able to update its own fields\n      // (for example, fields concerned by ldap synchronisation)\n      // except on login action (which triggers synchronisation).\n      if (Session::getLoginUserID() === (int)$this->input['id']\n          && !Session::haveRight(\"user\", UPDATE)\n          && !strpos($_SERVER['PHP_SELF'], \"/front/login.php\")\n          && isset($this->fields[\"authtype\"])) {\n\n         // extauth ldap case\n         if ($_SESSION[\"glpiextauth\"]\n             && ($this->fields[\"authtype\"] == Auth::LDAP\n                 || Auth::isAlternateAuth($this->fields[\"authtype\"]))) {\n\n            $authtype = Auth::getMethodsByID($this->fields[\"authtype\"],\n                                             $this->fields[\"auths_id\"]);\n            if (count($authtype)) {\n               $fields = AuthLDAP::getSyncFields($authtype);\n               foreach ($fields as $key => $val) {\n                  if (!empty($val)\n                        && (($key2 = array_search($key, $this->updates)) !== false)) {\n\n                     unset ($this->updates[$key2]);\n                     unset($this->oldvalues[$key]);\n\n                  }\n               }\n            }\n         }\n\n         if (($key = array_search(\"is_active\", $this->updates)) !== false) {\n            unset ($this->updates[$key]);\n            unset($this->oldvalues['is_active']);\n         }\n\n         if (($key = array_search(\"comment\", $this->updates)) !== false) {\n            unset ($this->updates[$key]);\n            unset($this->oldvalues['comment']);\n         }\n      }\n   }\n\n   function getSpecificMassiveActions($checkitem = null) {\n\n      $isadmin = static::canUpdate();\n      $actions = parent::getSpecificMassiveActions($checkitem);\n      if ($isadmin) {\n         $actions['Group_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'add']\n                                                         = \"<i class='ma-icon fas fa-users'></i>\".\n                                                           __('Associate to a group');\n         $actions['Group_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'remove']\n                                                         = __('Dissociate from a group');\n         $actions['Profile_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'add']\n                                                         = \"<i class='ma-icon fas fa-user-shield'></i>\".\n                                                           __('Associate to a profile');\n         $actions['Profile_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'remove']\n                                                         = __('Dissociate from a profile');\n         $actions['Group_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'change_group_user']\n                                                         = \"<i class='ma-icon fas fa-users-cog'></i>\".\n                                                           __(\"Move to group\");\n      }\n\n      if (Session::haveRight(self::$rightname, self::UPDATEAUTHENT)) {\n         $prefix                                    = __CLASS__.MassiveAction::CLASS_ACTION_SEPARATOR;\n         $actions[$prefix.'change_authtype']        = \"<i class='ma-icon fas fa-user-cog'></i>\".\n                                                      _x('button', 'Change the authentication method');\n         $actions[$prefix.'force_user_ldap_update'] = \"<i class='ma-icon fas fa-sync'></i>\".\n                                                      __('Force synchronization');\n      }\n      return $actions;\n   }\n\n   static function showMassiveActionsSubForm(MassiveAction $ma) {\n      global $CFG_GLPI;\n\n      switch ($ma->getAction()) {\n         case 'change_authtype' :\n            $rand             = Auth::dropdown(['name' => 'authtype']);\n            $paramsmassaction = ['authtype' => '__VALUE__'];\n            Ajax::updateItemOnSelectEvent(\"dropdown_authtype$rand\", \"show_massiveaction_field\",\n                                          $CFG_GLPI[\"root_doc\"].\n                                             \"/ajax/dropdownMassiveActionAuthMethods.php\",\n                                          $paramsmassaction);\n            echo \"<span id='show_massiveaction_field'><br><br>\";\n            echo Html::submit(_x('button', 'Post'), ['name' => 'massiveaction']).\"</span>\";\n            return true;\n      }\n      return parent::showMassiveActionsSubForm($ma);\n   }\n\n   static function processMassiveActionsForOneItemtype(MassiveAction $ma, CommonDBTM $item,\n                                                       array $ids) {\n\n      switch ($ma->getAction()) {\n         case 'force_user_ldap_update' :\n            foreach ($ids as $id) {\n               if ($item->can($id, UPDATE)) {\n                  if (($item->fields[\"authtype\"] == Auth::LDAP)\n                      || ($item->fields[\"authtype\"] == Auth::EXTERNAL)) {\n                     if (AuthLDAP::forceOneUserSynchronization($item, false)) {\n                        $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_OK);\n                     } else {\n                        $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_KO);\n                        $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n                     }\n                  } else {\n                     $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_KO);\n                     $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n                  }\n               } else {\n                  $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_NORIGHT);\n                  $ma->addMessage($item->getErrorMessage(ERROR_RIGHT));\n               }\n            }\n            return;\n\n         case 'change_authtype' :\n            $input = $ma->getInput();\n            if (!isset($input[\"authtype\"])\n                || !isset($input[\"auths_id\"])) {\n               $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_KO);\n               $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n               return;\n            }\n            if (Session::haveRight(self::$rightname, self::UPDATEAUTHENT)) {\n               if (User::changeAuthMethod($ids, $input[\"authtype\"], $input[\"auths_id\"])) {\n                  $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_OK);\n               } else {\n                  $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_KO);\n               }\n            } else {\n               $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_NORIGHT);\n               $ma->addMessage($item->getErrorMessage(ERROR_RIGHT));\n            }\n            return;\n      }\n      parent::processMassiveActionsForOneItemtype($ma, $item, $ids);\n   }\n\n\n   function rawSearchOptions() {\n      // forcegroup by on name set force group by for all items\n      $tab = [];\n\n      $tab[] = [\n         'id'                 => 'common',\n         'name'               => __('Characteristics')\n      ];\n\n      $tab[] = [\n         'id'                 => '1',\n         'table'              => $this->getTable(),\n         'field'              => 'name',\n         'name'               => __('Login'),\n         'datatype'           => 'itemlink',\n         'forcegroupby'       => true,\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '2',\n         'table'              => $this->getTable(),\n         'field'              => 'id',\n         'name'               => __('ID'),\n         'massiveaction'      => false,\n         'datatype'           => 'number'\n      ];\n\n      $tab[] = [\n         'id'                 => '34',\n         'table'              => $this->getTable(),\n         'field'              => 'realname',\n         'name'               => __('Last name'),\n         'datatype'           => 'string',\n         'autocomplete'       => true,\n      ];\n\n      $tab[] = [\n         'id'                 => '9',\n         'table'              => $this->getTable(),\n         'field'              => 'firstname',\n         'name'               => __('First name'),\n         'datatype'           => 'string',\n         'autocomplete'       => true,\n      ];\n\n      $tab[] = [\n         'id'                 => '5',\n         'table'              => 'glpi_useremails',\n         'field'              => 'email',\n         'name'               => _n('Email', 'Emails', Session::getPluralNumber()),\n         'datatype'           => 'email',\n         'joinparams'         => [\n            'jointype'           => 'child'\n         ],\n         'forcegroupby'       => true,\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '150',\n         'table'              => $this->getTable(),\n         'field'              => 'picture',\n         'name'               => __('Picture'),\n         'datatype'           => 'specific',\n         'nosearch'           => true,\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '28',\n         'table'              => $this->getTable(),\n         'field'              => 'sync_field',\n         'name'               => __('Synchronization field'),\n         'massiveaction'      => false,\n         'datatype'           => 'string',\n         'autocomplete'       => true,\n      ];\n\n      $tab = array_merge($tab, Location::rawSearchOptionsToAdd());\n\n      $tab[] = [\n         'id'                 => '8',\n         'table'              => $this->getTable(),\n         'field'              => 'is_active',\n         'name'               => __('Active'),\n         'datatype'           => 'bool'\n      ];\n\n      $tab[] = [\n         'id'                 => '6',\n         'table'              => $this->getTable(),\n         'field'              => 'phone',\n         'name'               => Phone::getTypeName(1),\n         'datatype'           => 'string',\n         'autocomplete'       => true,\n      ];\n\n      $tab[] = [\n         'id'                 => '10',\n         'table'              => $this->getTable(),\n         'field'              => 'phone2',\n         'name'               => __('Phone 2'),\n         'datatype'           => 'string',\n         'autocomplete'       => true,\n      ];\n\n      $tab[] = [\n         'id'                 => '11',\n         'table'              => $this->getTable(),\n         'field'              => 'mobile',\n         'name'               => __('Mobile phone'),\n         'datatype'           => 'string',\n         'autocomplete'       => true,\n      ];\n\n      $tab[] = [\n         'id'                 => '13',\n         'table'              => 'glpi_groups',\n         'field'              => 'completename',\n         'name'               => Group::getTypeName(Session::getPluralNumber()),\n         'forcegroupby'       => true,\n         'datatype'           => 'itemlink',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_groups_users',\n               'joinparams'         => [\n                  'jointype'           => 'child'\n               ]\n            ]\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '14',\n         'table'              => $this->getTable(),\n         'field'              => 'last_login',\n         'name'               => __('Last login'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '15',\n         'table'              => $this->getTable(),\n         'field'              => 'authtype',\n         'name'               => __('Authentication'),\n         'massiveaction'      => false,\n         'datatype'           => 'specific',\n         'searchtype'         => 'equals',\n         'additionalfields'   => [\n            '0'                  => 'auths_id'\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '30',\n         'table'              => 'glpi_authldaps',\n         'field'              => 'name',\n         'linkfield'          => 'auths_id',\n         'name'               => __('LDAP directory for authentication'),\n         'massiveaction'      => false,\n         'joinparams'         => [\n             'condition'          => 'AND REFTABLE.`authtype` = ' . Auth::LDAP\n         ],\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '31',\n         'table'              => 'glpi_authmails',\n         'field'              => 'name',\n         'linkfield'          => 'auths_id',\n         'name'               => __('Email server for authentication'),\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'condition'          => 'AND REFTABLE.`authtype` = ' . Auth::MAIL\n         ],\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '16',\n         'table'              => $this->getTable(),\n         'field'              => 'comment',\n         'name'               => __('Comments'),\n         'datatype'           => 'text'\n      ];\n\n      $tab[] = [\n         'id'                 => '17',\n         'table'              => $this->getTable(),\n         'field'              => 'language',\n         'name'               => __('Language'),\n         'datatype'           => 'language',\n         'display_emptychoice' => true,\n         'emptylabel'         => 'Default value'\n      ];\n\n      $tab[] = [\n         'id'                 => '19',\n         'table'              => $this->getTable(),\n         'field'              => 'date_mod',\n         'name'               => __('Last update'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '121',\n         'table'              => $this->getTable(),\n         'field'              => 'date_creation',\n         'name'               => __('Creation date'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '20',\n         'table'              => 'glpi_profiles',\n         'field'              => 'name',\n         'name'               => sprintf(__('%1$s (%2$s)'), Profile::getTypeName(Session::getPluralNumber()),\n                                                 Entity::getTypeName(1)),\n         'forcegroupby'       => true,\n         'massiveaction'      => false,\n         'datatype'           => 'dropdown',\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_profiles_users',\n               'joinparams'         => [\n                  'jointype'           => 'child'\n               ]\n            ]\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '21',\n         'table'              => $this->getTable(),\n         'field'              => 'user_dn',\n         'name'               => __('User DN'),\n         'massiveaction'      => false,\n         'datatype'           => 'text'\n      ];\n\n      $tab[] = [\n         'id'                 => '22',\n         'table'              => $this->getTable(),\n         'field'              => 'registration_number',\n         'name'               => __('Administrative number'),\n         'datatype'           => 'string',\n         'autocomplete'       => true,\n      ];\n\n      $tab[] = [\n         'id'                 => '23',\n         'table'              => $this->getTable(),\n         'field'              => 'date_sync',\n         'datatype'           => 'datetime',\n         'name'               => __('Last synchronization'),\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '24',\n         'table'              => $this->getTable(),\n         'field'              => 'is_deleted_ldap',\n         'name'               => __('Deleted user in LDAP directory'),\n         'datatype'           => 'bool',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '80',\n         'table'              => 'glpi_entities',\n         'linkfield'          => 'entities_id',\n         'field'              => 'completename',\n         'name'               => sprintf(__('%1$s (%2$s)'), Entity::getTypeName(Session::getPluralNumber()),\n                                                 Profile::getTypeName(1)),\n         'forcegroupby'       => true,\n         'datatype'           => 'dropdown',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_profiles_users',\n               'joinparams'         => [\n                  'jointype'           => 'child'\n               ]\n            ]\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '81',\n         'table'              => 'glpi_usertitles',\n         'field'              => 'name',\n         'name'               => __('Title'),\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '82',\n         'table'              => 'glpi_usercategories',\n         'field'              => 'name',\n         'name'               => __('Category'),\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '79',\n         'table'              => 'glpi_profiles',\n         'field'              => 'name',\n         'name'               => __('Default profile'),\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '77',\n         'table'              => 'glpi_entities',\n         'field'              => 'name',\n         'massiveaction'      => true,\n         'name'               => __('Default entity'),\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '62',\n         'table'              => $this->getTable(),\n         'field'              => 'begin_date',\n         'name'               => __('Begin date'),\n         'datatype'           => 'datetime'\n      ];\n\n      $tab[] = [\n         'id'                 => '63',\n         'table'              => $this->getTable(),\n         'field'              => 'end_date',\n         'name'               => __('End date'),\n         'datatype'           => 'datetime'\n      ];\n\n      $tab[] = [\n         'id'                 => '60',\n         'table'              => 'glpi_tickets',\n         'field'              => 'id',\n         'name'               => __('Number of tickets as requester'),\n         'forcegroupby'       => true,\n         'usehaving'          => true,\n         'datatype'           => 'count',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_tickets_users',\n               'joinparams'         => [\n                  'jointype'           => 'child',\n                  'condition'          => 'AND NEWTABLE.`type` = ' . CommonITILActor::REQUESTER\n               ]\n            ]\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '61',\n         'table'              => 'glpi_tickets',\n         'field'              => 'id',\n         'name'               => __('Number of written tickets'),\n         'forcegroupby'       => true,\n         'usehaving'          => true,\n         'datatype'           => 'count',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'jointype'           => 'child',\n            'linkfield'          => 'users_id_recipient'\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '64',\n         'table'              => 'glpi_tickets',\n         'field'              => 'id',\n         'name'               => __('Number of assigned tickets'),\n         'forcegroupby'       => true,\n         'usehaving'          => true,\n         'datatype'           => 'count',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_tickets_users',\n               'joinparams'         => [\n                  'jointype'           => 'child',\n                  'condition'          => 'AND NEWTABLE.`type` = '.CommonITILActor::ASSIGN\n               ]\n            ]\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '99',\n         'table'              => 'glpi_users',\n         'field'              => 'name',\n         'linkfield'          => 'users_id_supervisor',\n         'name'               => __('Responsible'),\n         'datatype'           => 'dropdown',\n         'massiveaction'      => false,\n      ];\n\n      // add objectlock search options\n      $tab = array_merge($tab, ObjectLock::rawSearchOptionsToAdd(get_class($this)));\n\n      return $tab;\n   }\n\n   static function getSpecificValueToDisplay($field, $values, array $options = []) {\n\n      if (!is_array($values)) {\n         $values = [$field => $values];\n      }\n      switch ($field) {\n         case 'authtype':\n            $auths_id = 0;\n            if (isset($values['auths_id']) && !empty($values['auths_id'])) {\n               $auths_id = $values['auths_id'];\n            }\n            return Auth::getMethodName($values[$field], $auths_id);\n         case 'picture':\n            if (isset($options['html']) && $options['html']) {\n               return Html::image(self::getThumbnailURLForPicture($values['picture']),\n                                  ['class' => 'user_picture_small', 'alt' => __('Picture')]);\n            }\n      }\n      return parent::getSpecificValueToDisplay($field, $values, $options);\n   }\n\n   static function getSpecificValueToSelect($field, $name = '', $values = '', array $options = []) {\n\n      if (!is_array($values)) {\n         $values = [$field => $values];\n      }\n      $options['display'] = false;\n      switch ($field) {\n         case 'authtype' :\n            $options['name'] = $name;\n            $options['value'] = $values[$field];\n            return Auth::dropdown($options);\n      }\n      return parent::getSpecificValueToSelect($field, $name, $values, $options);\n   }\n\n\n   /**\n    * Get all groups where the current user have delegating.\n    *\n    * @since 0.83\n    *\n    * @param integer|string $entities_id ID of the entity to restrict\n    *\n    * @return integer[]\n    */\n   static function getDelegateGroupsForUser($entities_id = '') {\n      global $DB;\n\n      $iterator = $DB->request([\n         'SELECT'          => 'glpi_groups_users.groups_id',\n         'DISTINCT'        => true,\n         'FROM'            => 'glpi_groups_users',\n         'INNER JOIN'      => [\n            'glpi_groups'  => [\n               'FKEY'   => [\n                  'glpi_groups_users'  => 'groups_id',\n                  'glpi_groups'        => 'id'\n               ]\n            ]\n         ],\n         'WHERE'           => [\n            'glpi_groups_users.users_id'        => Session::getLoginUserID(),\n            'glpi_groups_users.is_userdelegate' => 1\n         ] + getEntitiesRestrictCriteria('glpi_groups', '', $entities_id, 1)\n      ]);\n\n      $groups = [];\n      while ($data = $iterator->next()) {\n         $groups[$data['groups_id']] = $data['groups_id'];\n      }\n      return $groups;\n   }\n\n\n   /**\n    * Execute the query to select box with all glpi users where select key = name\n    *\n    * Internaly used by showGroup_Users, dropdownUsers and ajax/getDropdownUsers.php\n    *\n    * @param boolean         $count            true if execute an count(*) (true by default)\n    * @param string|string[] $right            limit user who have specific right (default 'all')\n    * @param integer         $entity_restrict  Restrict to a defined entity (default -1)\n    * @param integer         $value            default value (default 0)\n    * @param integer[]       $used             Already used items ID: not to display in dropdown\n    * @param string          $search           pattern (default '')\n    * @param integer         $start            start LIMIT value (default 0)\n    * @param integer         $limit            limit LIMIT value (default -1 no limit)\n    * @param boolean         $inactive_deleted true to retreive also inactive or deleted users\n    *\n    * @return mysqli_result|boolean\n    */\n   static function getSqlSearchResult ($count = true, $right = \"all\", $entity_restrict = -1, $value = 0,\n                                       array $used = [], $search = '', $start = 0, $limit = -1,\n                                       $inactive_deleted = 0) {\n      global $DB;\n\n      // No entity define : use active ones\n      if ($entity_restrict < 0) {\n         $entity_restrict = $_SESSION[\"glpiactiveentities\"];\n      }\n\n      $joinprofile      = false;\n      $joinprofileright = false;\n      $WHERE = [];\n\n      switch ($right) {\n         case \"interface\" :\n            $joinprofile = true;\n            $WHERE = [\n               'glpi_profiles.interface' => 'central'\n            ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1);\n            break;\n\n         case \"id\" :\n            $WHERE = ['glpi_users.id' => Session::getLoginUserID()];\n            break;\n\n         case \"delegate\" :\n            $groups = self::getDelegateGroupsForUser($entity_restrict);\n            $users  = [];\n            if (count($groups)) {\n               $iterator = $DB->request([\n                  'SELECT'    => 'glpi_users.id',\n                  'FROM'      => 'glpi_groups_users',\n                  'LEFT JOIN' => [\n                     'glpi_users'   => [\n                        'FKEY'   => [\n                           'glpi_groups_users'  => 'users_id',\n                           'glpi_users'         => 'id'\n                        ]\n                     ]\n                  ],\n                  'WHERE'     => [\n                     'glpi_groups_users.groups_id' => $groups,\n                     'glpi_groups_users.users_id'  => ['<>', Session::getLoginUserID()]\n                  ]\n               ]);\n               while ($data = $iterator->next()) {\n                     $users[$data[\"id\"]] = $data[\"id\"];\n               }\n            }\n            // Add me to users list for central\n            if (Session::getCurrentInterface() == 'central') {\n               $users[Session::getLoginUserID()] = Session::getLoginUserID();\n            }\n\n            if (count($users)) {\n               $WHERE = ['glpi_users.id' => $users];\n            }\n            break;\n\n         case \"groups\" :\n            $groups = [];\n            if (isset($_SESSION['glpigroups'])) {\n               $groups = $_SESSION['glpigroups'];\n            }\n            $users  = [];\n            if (count($groups)) {\n               $iterator = $DB->request([\n                  'SELECT'    => 'glpi_users.id',\n                  'FROM'      => 'glpi_groups_users',\n                  'LEFT JOIN' => [\n                     'glpi_users'   => [\n                        'FKEY'   => [\n                           'glpi_groups_users'  => 'users_id',\n                           'glpi_users'         => 'id'\n                        ]\n                     ]\n                  ],\n                  'WHERE'     => [\n                     'glpi_groups_users.groups_id' => $groups,\n                     'glpi_groups_users.users_id'  => ['<>', Session::getLoginUserID()]\n                  ]\n               ]);\n               while ($data = $iterator->next()) {\n                  $users[$data[\"id\"]] = $data[\"id\"];\n               }\n            }\n            // Add me to users list for central\n            if (Session::getCurrentInterface() == 'central') {\n               $users[Session::getLoginUserID()] = Session::getLoginUserID();\n            }\n\n            if (count($users)) {\n               $WHERE = ['glpi_users.id' => $users];\n            }\n\n            break;\n\n         case \"all\" :\n            $WHERE = [\n               'glpi_users.id' => ['>', 0],\n               'OR' => [\n                  'glpi_profiles_users.entities_id' => null\n               ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n            ];\n            break;\n\n         default :\n            $joinprofile = true;\n            $joinprofileright = true;\n            if (!is_array($right)) {\n               $right = [$right];\n            }\n            $forcecentral = true;\n\n            $ORWHERE = [];\n            foreach ($right as $r) {\n               switch ($r) {\n                  case  'own_ticket' :\n                     $ORWHERE[] = [\n                        [\n                           'glpi_profilerights.name'     => 'ticket',\n                           'glpi_profilerights.rights'   => ['&', Ticket::OWN]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     break;\n\n                  case 'create_ticket_validate' :\n                     $ORWHERE[] = [\n                        [\n                           'glpi_profilerights.name'  => 'ticketvalidation',\n                           'OR'                       => [\n                              ['glpi_profilerights.rights'   => ['&', TicketValidation::CREATEREQUEST]],\n                              ['glpi_profilerights.rights'   => ['&', TicketValidation::CREATEINCIDENT]]\n                           ]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     $forcecentral = false;\n                     break;\n\n                  case 'validate_request' :\n                     $ORWHERE[] = [\n                        [\n                           'glpi_profilerights.name'     => 'ticketvalidation',\n                           'glpi_profilerights.rights'   => ['&', TicketValidation::VALIDATEREQUEST]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     $forcecentral = false;\n                     break;\n\n                  case 'validate_incident' :\n                     $ORWHERE[] = [\n                        [\n                           'glpi_profilerights.name'     => 'ticketvalidation',\n                           'glpi_profilerights.rights'   => ['&', TicketValidation::VALIDATEINCIDENT]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     $forcecentral = false;\n                     break;\n\n                  case 'validate' :\n                     $ORWHERE[] = [\n                        [\n                           'glpi_profilerights.name'     => 'changevalidation',\n                           'glpi_profilerights.rights'   => ['&', ChangeValidation::VALIDATE]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     break;\n\n                  case 'create_validate' :\n                     $ORWHERE[] = [\n                        [\n                           'glpi_profilerights.name'     => 'changevalidation',\n                           'glpi_profilerights.rights'   => ['&', ChangeValidation::CREATE]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     break;\n\n                  case 'see_project' :\n                     $ORWHERE[] = [\n                        [\n                           'glpi_profilerights.name'     => 'project',\n                           'glpi_profilerights.rights'   => ['&', Project::READMY]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     break;\n\n                  case 'faq' :\n                     $ORWHERE[] = [\n                        [\n                           'glpi_profilerights.name'     => 'knowbase',\n                           'glpi_profilerights.rights'   => ['&', KnowbaseItem::READFAQ]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n\n                  default :\n                     // Check read or active for rights\n                     $ORWHERE[] = [\n                        [\n                           'glpi_profilerights.name'     => $r,\n                           'glpi_profilerights.rights'   => [\n                              '&',\n                              READ | CREATE | UPDATE | DELETE | PURGE\n                           ]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n               }\n               if (in_array($r, Profile::$helpdesk_rights)) {\n                  $forcecentral = false;\n               }\n            }\n\n            if (count($ORWHERE)) {\n               $WHERE[] = ['OR' => $ORWHERE];\n            }\n\n            if ($forcecentral) {\n               $WHERE['glpi_profiles.interface'] = 'central';\n            }\n      }\n\n      if (!$inactive_deleted) {\n         $WHERE = array_merge(\n            $WHERE, [\n               'glpi_users.is_deleted' => 0,\n               'glpi_users.is_active'  => 1,\n               [\n                  'OR' => [\n                     ['glpi_users.begin_date' => null],\n                     ['glpi_users.begin_date' => ['<', new QueryExpression('NOW()')]]\n                  ]\n               ],\n               [\n                  'OR' => [\n                     ['glpi_users.end_date' => null],\n                     ['glpi_users.end_date' => ['>', new QueryExpression('NOW()')]]\n                  ]\n               ]\n\n            ]\n         );\n      }\n\n      if ((is_numeric($value) && $value)\n          || count($used)) {\n\n         $WHERE[] = [\n            'NOT' => [\n               'glpi_users.id' => $used\n            ]\n         ];\n      }\n\n      $criteria = [\n         'FROM'            => 'glpi_users',\n         'LEFT JOIN'       => [\n            'glpi_useremails'       => [\n               'ON' => [\n                  'glpi_useremails' => 'users_id',\n                  'glpi_users'      => 'id'\n               ]\n            ],\n            'glpi_profiles_users'   => [\n               'ON' => [\n                  'glpi_profiles_users'   => 'users_id',\n                  'glpi_users'            => 'id'\n               ]\n            ]\n         ]\n      ];\n      if ($count) {\n         $criteria['SELECT'] = ['COUNT' => 'glpi_users.id AS CPT'];\n         $criteria['DISTINCT'] = true;\n      } else {\n         $criteria['SELECT'] = 'glpi_users.*';\n         $criteria['DISTINCT'] = true;\n      }\n\n      if ($joinprofile) {\n         $criteria['LEFT JOIN']['glpi_profiles'] = [\n            'ON' => [\n               'glpi_profiles_users'   => 'profiles_id',\n               'glpi_profiles'         => 'id'\n            ]\n         ];\n         if ($joinprofileright) {\n            $criteria['LEFT JOIN']['glpi_profilerights'] = [\n               'ON' => [\n                  'glpi_profilerights' => 'profiles_id',\n                  'glpi_profiles'      => 'id'\n               ]\n            ];\n         }\n      }\n\n      if (!$count) {\n         if ((strlen($search) > 0)) {\n            $txt_search = Search::makeTextSearchValue($search);\n\n            $firstname_field = $DB->quoteName(self::getTableField('firstname'));\n            $realname_field = $DB->quoteName(self::getTableField('realname'));\n            $fields = $_SESSION[\"glpinames_format\"] == self::FIRSTNAME_BEFORE\n               ? [$firstname_field, $realname_field]\n               : [$realname_field, $firstname_field];\n\n            $concat = new \\QueryExpression(\n               'CONCAT(' . implode(',' . $DB->quoteValue(' ') . ',', $fields) . ')'\n               . ' LIKE ' . $DB->quoteValue($txt_search)\n            );\n            $WHERE[] = [\n               'OR' => [\n                  'glpi_users.name'       => ['LIKE', $txt_search],\n                  'glpi_users.realname'   => ['LIKE', $txt_search],\n                  'glpi_users.firstname'  => ['LIKE', $txt_search],\n                  'glpi_users.phone'      => ['LIKE', $txt_search],\n                  'glpi_useremails.email' => ['LIKE', $txt_search],\n                  $concat\n               ]\n            ];\n         }\n\n         if ($_SESSION[\"glpinames_format\"] == self::FIRSTNAME_BEFORE) {\n            $criteria['ORDERBY'] = [\n               'glpi_users.firstname',\n               'glpi_users.realname',\n               'glpi_users.name'\n            ];\n         } else {\n            $criteria['ORDERBY'] = [\n               'glpi_users.realname',\n               'glpi_users.firstname',\n               'glpi_users.name'\n            ];\n         }\n\n         if ($limit > 0) {\n            $criteria['LIMIT'] = $limit;\n            $criteria['START'] = $start;\n         }\n      }\n      $criteria['WHERE'] = $WHERE;\n      return $DB->request($criteria);\n   }\n\n\n   /**\n    * Make a select box with all glpi users where select key = name\n    *\n    * @param $options array of possible options:\n    *    - name             : string / name of the select (default is users_id)\n    *    - value\n    *    - values           : in case of select[multiple], pass the array of multiple values\n    *    - right            : string / limit user who have specific right :\n    *                             id -> only current user (default case);\n    *                             interface -> central;\n    *                             all -> all users;\n    *                             specific right like Ticket::READALL, CREATE.... (is array passed one of all passed right is needed)\n    *    - comments         : boolean / is the comments displayed near the dropdown (default true)\n    *    - entity           : integer or array / restrict to a defined entity or array of entities\n    *                          (default -1 : no restriction)\n    *    - entity_sons      : boolean / if entity restrict specified auto select its sons\n    *                          only available if entity is a single value not an array(default false)\n    *    - all              : Nobody or All display for none selected\n    *                             all=0 (default) -> Nobody\n    *                             all=1 -> All\n    *                             all=-1-> nothing\n    *    - rand             : integer / already computed rand value\n    *    - toupdate         : array / Update a specific item on select change on dropdown\n    *                          (need value_fieldname, to_update, url\n    *                          (see Ajax::updateItemOnSelectEvent for information)\n    *                          and may have moreparams)\n    *    - used             : array / Already used items ID: not to display in dropdown (default empty)\n    *    - ldap_import\n    *    - on_change        : string / value to transmit to \"onChange\"\n    *    - display          : boolean / display or get string (default true)\n    *    - width            : specific width needed (default 80%)\n    *    - specific_tags    : array of HTML5 tags to add to the field\n    *    - url              : url of the ajax php code which should return the json data to show in\n    *                         the dropdown (default /ajax/getDropdownUsers.php)\n    *    - inactive_deleted : retreive also inactive or deleted users\n    *\n    * @return integer|string Random value if displayed, string otherwise\n    */\n   static function dropdown($options = []) {\n      global $CFG_GLPI;\n\n      // Default values\n      $p = [\n         'name'                => 'users_id',\n         'value'               => '',\n         'values'              => [],\n         'right'               => 'id',\n         'all'                 => 0,\n         'display_emptychoice' => true,\n         'placeholder'         => '',\n         'on_change'           => '',\n         'comments'            => 1,\n         'width'               => '80%',\n         'entity'              => -1,\n         'entity_sons'         => false,\n         'used'                => [],\n         'ldap_import'         => false,\n         'toupdate'            => '',\n         'rand'                => mt_rand(),\n         'display'             => true,\n         '_user_index'         => 0,\n         'specific_tags'       => [],\n         'url'                 => $CFG_GLPI['root_doc'] . \"/ajax/getDropdownUsers.php\",\n         'inactive_deleted'    => 0,\n      ];\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $p[$key] = $val;\n         }\n      }\n\n      // check default value (in case of multiple observers)\n      if (is_array($p['value'])) {\n         $p['value'] = $p['value'][$p['_user_index']] ?? 0;\n      }\n\n      // Check default value for dropdown : need to be a numeric\n      if ((strlen($p['value']) == 0) || !is_numeric($p['value'])) {\n         $p['value'] = 0;\n      }\n\n      $output = '';\n      if (!($p['entity'] < 0) && $p['entity_sons']) {\n         if (is_array($p['entity'])) {\n            $output .= \"entity_sons options is not available with array of entity\";\n         } else {\n            $p['entity'] = getSonsOf('glpi_entities', $p['entity']);\n         }\n      }\n\n      // Make a select box with all glpi users\n      $user = getUserName($p['value'], 2);\n\n      $view_users = self::canView();\n\n      if (!empty($p['value']) && ($p['value'] > 0)) {\n          $default = $user[\"name\"];\n      } else {\n         if ($p['all']) {\n            $default = __('All');\n         } else {\n            $default = Dropdown::EMPTY_VALUE;\n         }\n      }\n\n      // get multiple values name\n      $valuesnames = [];\n      foreach ($p['values'] as $value) {\n         if (!empty($value) && ($value > 0)) {\n            $user = getUserName($value, 2);\n            $valuesnames[] = $user[\"name\"];\n         }\n      }\n\n      $field_id = Html::cleanId(\"dropdown_\" . $p['name'] . $p['rand']);\n      $param    = [\n         'value'               => $p['value'],\n         'values'              => $p['values'],\n         'valuename'           => $default,\n         'valuesnames'         => $valuesnames,\n         'width'               => $p['width'],\n         'all'                 => $p['all'],\n         'display_emptychoice' => $p['display_emptychoice'],\n         'placeholder'         => $p['placeholder'],\n         'right'               => $p['right'],\n         'on_change'           => $p['on_change'],\n         'used'                => $p['used'],\n         'inactive_deleted'    => $p['inactive_deleted'],\n         'entity_restrict'     => (is_array($p['entity']) ? json_encode(array_values($p['entity'])) : $p['entity']),\n         'specific_tags'       => $p['specific_tags'],\n         '_idor_token'         => Session::getNewIDORToken(__CLASS__, ['right' => $p['right']]),\n      ];\n\n      $output   = Html::jsAjaxDropdown($p['name'], $field_id,\n                                       $p['url'],\n                                       $param);\n\n      // Display comment\n      if ($p['comments']) {\n         $comment_id = Html::cleanId(\"comment_\".$p['name'].$p['rand']);\n         $link_id = Html::cleanId(\"comment_link_\".$p[\"name\"].$p['rand']);\n         if (!$view_users) {\n            $user[\"link\"] = '';\n         } else if (empty($user[\"link\"])) {\n            $user[\"link\"] = $CFG_GLPI['root_doc'].\"/front/user.php\";\n         }\n\n         if (empty($user['comment'])) {\n            $user['comment'] = Toolbox::ucfirst(\n               sprintf(\n                  __('Show %1$s'),\n                  self::getTypeName(Session::getPluralNumber())\n               )\n            );\n         }\n         $output .= \"&nbsp;\".Html::showToolTip($user[\"comment\"],\n                                      ['contentid' => $comment_id,\n                                            'display'   => false,\n                                            'link'      => $user[\"link\"],\n                                            'linkid'    => $link_id]);\n\n         $paramscomment = [\n            'value'    => '__VALUE__',\n            'itemtype' => User::getType()\n         ];\n\n         if ($view_users) {\n            $paramscomment['withlink'] = $link_id;\n         }\n         $output .= Ajax::updateItemOnSelectEvent($field_id, $comment_id,\n                                                  $CFG_GLPI[\"root_doc\"].\"/ajax/comments.php\",\n                                                  $paramscomment, false);\n      }\n      $output .= Ajax::commonDropdownUpdateItem($p, false);\n\n      if (Session::haveRight('user', self::IMPORTEXTAUTHUSERS)\n          && $p['ldap_import']\n          && Entity::isEntityDirectoryConfigured($_SESSION['glpiactive_entity'])) {\n\n         $output .= \"<span title=\\\"\".__s('Import a user').\"\\\" class='fa fa-plus pointer'\".\n                     \" onClick=\\\"\".Html::jsGetElementbyID('userimport'.$p['rand']).\".dialog('open');\\\">\n                     <span class='sr-only'>\" . __s('Import a user') . \"</span></span>\";\n         $output .= Ajax::createIframeModalWindow('userimport'.$p['rand'],\n                                                  $CFG_GLPI[\"root_doc\"].\n                                                      \"/front/ldap.import.php?entity=\".\n                                                      $_SESSION['glpiactive_entity'],\n                                                  ['title'   => __('Import a user'),\n                                                        'display' => false]);\n      }\n\n      if ($p['display']) {\n         echo $output;\n         return $p['rand'];\n      }\n      return $output;\n   }\n\n\n   /**\n    * Show simple add user form for external auth.\n    *\n    * @return void|boolean false if user does not have rights to import users from external sources,\n    *    print form otherwise\n    */\n   static function showAddExtAuthForm() {\n\n      if (!Session::haveRight(\"user\", self::IMPORTEXTAUTHUSERS)) {\n         return false;\n      }\n\n      echo \"<div class='center'>\\n\";\n      echo \"<form method='post' action='\".Toolbox::getItemTypeFormURL('User').\"'>\\n\";\n\n      echo \"<table class='tab_cadre'>\\n\";\n      echo \"<tr><th colspan='4'>\".__('Automatically add a user of an external source').\"</th></tr>\\n\";\n\n      echo \"<tr class='tab_bg_1'><td>\".__('Login').\"</td>\\n\";\n      echo \"<td><input type='text' name='login'></td></tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='tab_bg_2 center' colspan='2'>\\n\";\n      echo \"<input type='submit' name='add_ext_auth_ldap' value=\\\"\".__s('Import from directories').\"\\\"\n             class='submit'>\\n\";\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='tab_bg_2 center' colspan='2'>\\n\";\n      echo \"<input type='submit' name='add_ext_auth_simple' value=\\\"\".__s('Import from other sources').\"\\\"\n             class='submit'>\\n\";\n      echo \"</td></tr>\\n\";\n\n      echo \"</table>\";\n      Html::closeForm();\n      echo \"</div>\\n\";\n   }\n\n\n   /**\n    * Change auth method for given users.\n    *\n    * @param integer[] $IDs      IDs of users\n    * @param integer   $authtype Auth type (see Auth constants)\n    * @param integer   $server   ID of auth server\n    *\n    * @return boolean\n    */\n   static function changeAuthMethod(array $IDs = [], $authtype = 1, $server = -1) {\n      global $DB;\n\n      if (!Session::haveRight(self::$rightname, self::UPDATEAUTHENT)) {\n         return false;\n      }\n\n      if (!empty($IDs)\n          && in_array($authtype, [Auth::DB_GLPI, Auth::LDAP, Auth::MAIL, Auth::EXTERNAL])) {\n\n         $result = $DB->update(\n            self::getTable(), [\n               'authtype'        => $authtype,\n               'auths_id'        => $server,\n               'password'        => '',\n               'is_deleted_ldap' => 0\n            ], [\n               'id' => $IDs\n            ]\n         );\n         if ($result) {\n            foreach ($IDs as $ID) {\n               $changes = [\n                  0,\n                  '',\n                  addslashes(\n                     sprintf(\n                        __('%1$s: %2$s'),\n                        __('Update authentification method to'),\n                        Auth::getMethodName($authtype, $server)\n                     )\n                  )\n               ];\n               Log::history($ID, __CLASS__, $changes, '', Log::HISTORY_LOG_SIMPLE_MESSAGE);\n            }\n\n            return true;\n         }\n      }\n      return false;\n   }\n\n\n   /**\n    * Generate vcard for the current user.\n    *\n    * @return void\n    */\n   function generateVcard() {\n\n      // prepare properties for the Vcard\n      if (!empty($this->fields[\"realname\"])\n          || !empty($this->fields[\"firstname\"])) {\n         $name = [$this->fields[\"realname\"], $this->fields[\"firstname\"], \"\", \"\", \"\"];\n      } else {\n         $name = [$this->fields[\"name\"], \"\", \"\", \"\", \"\"];\n      }\n\n      // create vcard\n      $vcard = new VObject\\Component\\VCard([\n         'N'     => $name,\n         'EMAIL' => $this->getDefaultEmail(),\n         'NOTE'  => $this->fields[\"comment\"],\n      ]);\n      $vcard->add('TEL', $this->fields[\"phone\"], ['type' => 'PREF;WORK;VOICE']);\n      $vcard->add('TEL', $this->fields[\"phone2\"], ['type' => 'HOME;VOICE']);\n      $vcard->add('TEL', $this->fields[\"mobile\"], ['type' => 'WORK;CELL']);\n\n      // send the  VCard\n      $output   = $vcard->serialize();\n      $filename = implode(\"_\", array_filter($name)).\".vcf\";\n\n      @header(\"Content-Disposition: attachment; filename=\\\"$filename\\\"\");\n      @header(\"Content-Length: \".Toolbox::strlen($output));\n      @header(\"Connection: close\");\n      @header(\"content-type: text/x-vcard; charset=UTF-8\");\n\n      echo $output;\n   }\n\n\n   /**\n    * Show items of the current user.\n    *\n    * @param boolean $tech false to display items owned by user, true to display items managed by user\n    *\n    * @return void\n    */\n   function showItems($tech) {\n      global $DB, $CFG_GLPI;\n\n      $ID = $this->getField('id');\n\n      if ($tech) {\n         $type_user   = $CFG_GLPI['linkuser_tech_types'];\n         $type_group  = $CFG_GLPI['linkgroup_tech_types'];\n         $field_user  = 'users_id_tech';\n         $field_group = 'groups_id_tech';\n      } else {\n         $type_user   = $CFG_GLPI['linkuser_types'];\n         $type_group  = $CFG_GLPI['linkgroup_types'];\n         $field_user  = 'users_id';\n         $field_group = 'groups_id';\n      }\n\n      $group_where = \"\";\n      $groups      = [];\n\n      $iterator = $DB->request([\n         'SELECT'    => [\n            'glpi_groups_users.groups_id',\n            'glpi_groups.name'\n         ],\n         'FROM'      => 'glpi_groups_users',\n         'LEFT JOIN' => [\n            'glpi_groups' => [\n               'FKEY' => [\n                  'glpi_groups_users'  => 'groups_id',\n                  'glpi_groups'        => 'id'\n               ]\n            ]\n         ],\n         'WHERE'     => ['glpi_groups_users.users_id' => $ID]\n      ]);\n      $number = count($iterator);\n\n      $group_where = [];\n      while ($data = $iterator->next()) {\n         $group_where[$field_group][] = $data['groups_id'];\n         $groups[$data[\"groups_id\"]] = $data[\"name\"];\n      }\n\n      echo \"<div class='spaced'><table class='tab_cadre_fixehov'>\";\n      $header = \"<tr><th>\"._n('Type', 'Types', 1).\"</th>\";\n      $header .= \"<th>\".Entity::getTypeName(1).\"</th>\";\n      $header .= \"<th>\".__('Name').\"</th>\";\n      $header .= \"<th>\".__('Serial number').\"</th>\";\n      $header .= \"<th>\".__('Inventory number').\"</th>\";\n      $header .= \"<th>\".__('Status').\"</th>\";\n      $header .= \"<th>&nbsp;</th></tr>\";\n      echo $header;\n\n      foreach ($type_user as $itemtype) {\n         if (!($item = getItemForItemtype($itemtype))) {\n            continue;\n         }\n         if ($item->canView()) {\n            $itemtable = getTableForItemType($itemtype);\n            $iterator_params = [\n               'FROM'   => $itemtable,\n               'WHERE'  => [$field_user => $ID]\n            ];\n\n            if ($item->maybeTemplate()) {\n               $iterator_params['WHERE']['is_template'] = 0;\n            }\n            if ($item->maybeDeleted()) {\n               $iterator_params['WHERE']['is_deleted'] = 0;\n            }\n\n            $item_iterator = $DB->request($iterator_params);\n\n            $type_name = $item->getTypeName();\n\n            while ($data = $item_iterator->next()) {\n               $cansee = $item->can($data[\"id\"], READ);\n               $link   = $data[\"name\"];\n               if ($cansee) {\n                  $link_item = $item::getFormURLWithID($data['id']);\n                  if ($_SESSION[\"glpiis_ids_visible\"] || empty($link)) {\n                     $link = sprintf(__('%1$s (%2$s)'), $link, $data[\"id\"]);\n                  }\n                  $link = \"<a href='\".$link_item.\"'>\".$link.\"</a>\";\n               }\n               $linktype = \"\";\n               if ($data[$field_user] == $ID) {\n                  $linktype = self::getTypeName(1);\n               }\n               echo \"<tr class='tab_bg_1'><td class='center'>$type_name</td>\";\n               echo \"<td class='center'>\".Dropdown::getDropdownName(\"glpi_entities\",\n                                                                     $data[\"entities_id\"]).\"</td>\";\n               echo \"<td class='center'>$link</td>\";\n               echo \"<td class='center'>\";\n               if (isset($data[\"serial\"]) && !empty($data[\"serial\"])) {\n                  echo $data[\"serial\"];\n               } else {\n                  echo '&nbsp;';\n               }\n               echo \"</td><td class='center'>\";\n               if (isset($data[\"otherserial\"]) && !empty($data[\"otherserial\"])) {\n                  echo $data[\"otherserial\"];\n               } else {\n                  echo '&nbsp;';\n               }\n               echo \"</td><td class='center'>\";\n               if (isset($data[\"states_id\"])) {\n                  echo Dropdown::getDropdownName(\"glpi_states\", $data['states_id']);\n               } else {\n                  echo '&nbsp;';\n               }\n\n               echo \"</td><td class='center'>$linktype</td></tr>\";\n            }\n         }\n      }\n      if ($number) {\n         echo $header;\n      }\n      echo \"</table></div>\";\n\n      if (count($group_where)) {\n         echo \"<div class='spaced'><table class='tab_cadre_fixehov'>\";\n         $header = \"<tr>\".\n               \"<th>\"._n('Type', 'Types', 1).\"</th>\".\n               \"<th>\".Entity::getTypeName(1).\"</th>\".\n               \"<th>\".__('Name').\"</th>\".\n               \"<th>\".__('Serial number').\"</th>\".\n               \"<th>\".__('Inventory number').\"</th>\".\n               \"<th>\".__('Status').\"</th>\".\n               \"<th>&nbsp;</th></tr>\";\n         echo $header;\n         $nb = 0;\n         foreach ($type_group as $itemtype) {\n            if (!($item = getItemForItemtype($itemtype))) {\n               continue;\n            }\n            if ($item->canView() && $item->isField($field_group)) {\n               $itemtable = getTableForItemType($itemtype);\n               $iterator_params = [\n                  'FROM'   => $itemtable,\n                  'WHERE'  => ['OR' => $group_where]\n               ];\n\n               if ($item->maybeTemplate()) {\n                  $iterator_params['WHERE']['is_template'] = 0;\n               }\n               if ($item->maybeDeleted()) {\n                  $iterator_params['WHERE']['is_deleted'] = 0;\n               }\n\n               $group_iterator = $DB->request($iterator_params);\n\n               $type_name = $item->getTypeName();\n\n               while ($data = $group_iterator->next()) {\n                  $nb++;\n                  $cansee = $item->can($data[\"id\"], READ);\n                  $link   = $data[\"name\"];\n                  if ($cansee) {\n                     $link_item = $item::getFormURLWithID($data['id']);\n                     if ($_SESSION[\"glpiis_ids_visible\"] || empty($link)) {\n                        $link = sprintf(__('%1$s (%2$s)'), $link, $data[\"id\"]);\n                     }\n                     $link = \"<a href='\".$link_item.\"'>\".$link.\"</a>\";\n                  }\n                  $linktype = \"\";\n                  if (isset($groups[$data[$field_group]])) {\n                     $linktype = sprintf(__('%1$s = %2$s'), Group::getTypeName(1),\n                                          $groups[$data[$field_group]]);\n                  }\n                  echo \"<tr class='tab_bg_1'><td class='center'>$type_name</td>\";\n                  echo \"<td class='center'>\".Dropdown::getDropdownName(\"glpi_entities\",\n                                                                        $data[\"entities_id\"]);\n                  echo \"</td><td class='center'>$link</td>\";\n                  echo \"<td class='center'>\";\n                  if (isset($data[\"serial\"]) && !empty($data[\"serial\"])) {\n                     echo $data[\"serial\"];\n                  } else {\n                     echo '&nbsp;';\n                  }\n                  echo \"</td><td class='center'>\";\n                  if (isset($data[\"otherserial\"]) && !empty($data[\"otherserial\"])) {\n                     echo $data[\"otherserial\"];\n                  } else {\n                     echo '&nbsp;';\n                  }\n                  echo \"</td><td class='center'>\";\n                  if (isset($data[\"states_id\"])) {\n                     echo Dropdown::getDropdownName(\"glpi_states\", $data['states_id']);\n                  } else {\n                     echo '&nbsp;';\n                  }\n\n                  echo \"</td><td class='center'>$linktype</td></tr>\";\n               }\n            }\n         }\n         if ($nb) {\n            echo $header;\n         }\n         echo \"</table></div>\";\n      }\n   }\n\n\n   /**\n    * Get user by email, importing it from LDAP if not existing.\n    *\n    * @param string $email\n    *\n    * @return integer ID of user, 0 if not found nor imported\n    */\n   static function getOrImportByEmail($email = '') {\n      global $DB, $CFG_GLPI;\n\n      $iterator = $DB->request([\n         'SELECT'    => 'users_id AS id',\n         'FROM'      => 'glpi_useremails',\n         'LEFT JOIN' => [\n            'glpi_users' => [\n               'FKEY' => [\n                  'glpi_useremails' => 'users_id',\n                  'glpi_users'      => 'id'\n               ]\n            ]\n         ],\n         'WHERE'     => [\n            'glpi_useremails.email' => $DB->escape(stripslashes($email))\n         ],\n         'ORDER'     => ['glpi_users.is_active DESC', 'is_deleted ASC']\n      ]);\n\n      //User still exists in DB\n      if (count($iterator)) {\n         $result = $iterator->next();\n         return $result['id'];\n      } else {\n         if ($CFG_GLPI[\"is_users_auto_add\"]) {\n            //Get all ldap servers with email field configured\n            $ldaps = AuthLDAP::getServersWithImportByEmailActive();\n            //Try to find the user by his email on each ldap server\n\n            foreach ($ldaps as $ldap) {\n               $params = [\n                  'method' => AuthLDAP::IDENTIFIER_EMAIL,\n                  'value'  => $email,\n               ];\n               $res = AuthLDAP::ldapImportUserByServerId($params,\n                                                         AuthLDAP::ACTION_IMPORT,\n                                                         $ldap);\n\n               if (isset($res['id'])) {\n                  return $res['id'];\n               }\n            }\n         }\n      }\n      return 0;\n   }\n\n\n   /**\n    * Handle user deleted in LDAP using configured policy.\n    *\n    * @param integer $users_id\n    *\n    * @return void\n    */\n   static function manageDeletedUserInLdap($users_id) {\n      global $CFG_GLPI;\n\n      //The only case where users_id can be null if when a user has been imported into GLPI\n      //it's dn still exists, but doesn't match the connection filter anymore\n      //In this case, do not try to process the user\n      if (!$users_id) {\n         return;\n      }\n\n      //User is present in DB but not in the directory : it's been deleted in LDAP\n      $tmp = [\n         'id'              => $users_id,\n         'is_deleted_ldap' => 1,\n      ];\n      $myuser = new self();\n      $myuser->getFromDB($users_id);\n\n      //User is already considered as delete from ldap\n      if ($myuser->fields['is_deleted_ldap'] == 1) {\n         return;\n      }\n\n      switch ($CFG_GLPI['user_deleted_ldap']) {\n         //DO nothing\n         default :\n         case AuthLDAP::DELETED_USER_PRESERVE:\n            $myuser->update($tmp);\n            break;\n\n         //Put user in trashbin\n         case AuthLDAP::DELETED_USER_DELETE:\n            $myuser->delete($tmp);\n            break;\n\n         //Delete all user dynamic habilitations and groups\n         case AuthLDAP::DELETED_USER_WITHDRAWDYNINFO:\n            Profile_User::deleteRights($users_id, true);\n            Group_User::deleteGroups($users_id, true);\n            $myuser->update($tmp);\n            break;\n\n         //Deactivate the user\n         case AuthLDAP::DELETED_USER_DISABLE:\n            $tmp['is_active'] = 0;\n            $myuser->update($tmp);\n            break;\n\n         //Deactivate the user+ Delete all user dynamic habilitations and groups\n         case AuthLDAP::DELETED_USER_DISABLEANDWITHDRAWDYNINFO:\n            $tmp['is_active'] = 0;\n            $myuser->update($tmp);\n            Profile_User::deleteRights($users_id, true);\n            Group_User::deleteGroups($users_id, true);\n            break;\n\n      }\n      /*\n      $changes[0] = '0';\n      $changes[1] = '';\n      $changes[2] = __('Deleted user in LDAP directory');\n      Log::history($users_id, 'User', $changes, 0, Log::HISTORY_LOG_SIMPLE_MESSAGE);*/\n   }\n\n   /**\n    * Get user ID from its name.\n    *\n    * @param string $name User name\n    *\n    * @return integer\n    */\n   static function getIdByName($name) {\n      return self::getIdByField('name', $name);\n   }\n\n\n   /**\n    * Get user ID from a field\n    *\n    * @since 0.84\n    *\n    * @param string $field Field name\n    * @param string $value Field value\n    *\n    * @return integer\n    */\n   static function getIdByField($field, $value, $escape = true) {\n      global $DB;\n\n      if ($escape) {\n         $value = addslashes($value);\n      }\n\n      $iterator = $DB->request([\n         'SELECT' => 'id',\n         'FROM'   => self::getTable(),\n         'WHERE'  => [$field => $value]\n      ]);\n\n      if (count($iterator) == 1) {\n         $row = $iterator->next();\n         return (int)$row['id'];\n      }\n      return false;\n   }\n\n\n   /**\n    * Show password update form for current user.\n    *\n    * @param array $error_messages\n    *\n    * @return void\n    */\n   public function showPasswordUpdateForm(array $error_messages = []) {\n      global $CFG_GLPI;\n\n      echo '<form method=\"post\" action=\"' . $CFG_GLPI['root_doc'] . '/front/updatepassword.php\">';\n      echo '<table class=\"tab_cadre\">';\n      echo '<tr><th colspan=\"2\">' . __('Password update') . '</th></tr>';\n\n      if (Session::mustChangePassword()) {\n         echo '<tr class=\"tab_bg_2 center\">';\n         echo '<td colspan=\"2\" class=\"red b\">';\n         echo __('Your password has expired. You must change it to be able to login.');\n         echo '</td>';\n         echo '</tr>';\n      }\n\n      echo '<tr class=\"tab_bg_1\">';\n      echo '<td>';\n      echo __('Login');\n      echo '</td>';\n      echo '<td>';\n      echo '<input type=\"text\" name=\"name\" value=\"' . $this->fields['name'] . '\" readonly=\"readonly\" />';\n      echo '</td>';\n      echo '</tr>';\n\n      echo '<tr class=\"tab_bg_1\">';\n      echo '<td>';\n      echo '<label for=\"current_password\">' . __('Current password') . '</label>';\n      echo '</td>';\n      echo '<td>';\n      echo '<input type=\"password\" id=\"current_password\" name=\"current_password\" />';\n      echo '</td>';\n      echo '</tr>';\n\n      echo '<tr class=\"tab_bg_1\">';\n      echo '<td>';\n      echo '<label for=\"password\">' . __('New password') . '</label>';\n      echo '</td>';\n      echo '<td>';\n      echo '<input type=\"password\" id=\"password\" name=\"password\" autocomplete=\"new-password\" onkeyup=\"return passwordCheck();\" />';\n      echo '</td>';\n      echo '</tr>';\n\n      echo '<tr class=\"tab_bg_1\">';\n      echo '<td>';\n      echo '<label for=\"password2\">' . __('New password confirmation') . '</label>';\n      echo '</td>';\n      echo '<td>';\n      echo '<input type=\"password\" id=\"password2\" name=\"password2\" autocomplete=\"new-password\" />';\n      echo '</td>';\n      echo '</tr>';\n\n      if ($CFG_GLPI['use_password_security']) {\n         echo '<tr class=\"tab_bg_1\">';\n         echo '<td>' . __('Password security policy') . '</td>';\n         echo '<td>';\n         Config::displayPasswordSecurityChecks();\n         echo '</td>';\n         echo '</tr>';\n      }\n\n      echo '<tr class=\"tab_bg_2 center\">';\n      echo '<td colspan=\"2\">';\n      echo '<input type=\"submit\" name=\"update\" value=\"' . __s('Save') . '\" class=\"submit\" />';\n      echo '</td>';\n      echo '</tr>';\n\n      if (!empty($error_messages)) {\n         echo '<tr class=\"tab_bg_2 center\">';\n         echo '<td colspan=\"2\" class=\"red b\">';\n         echo implode('<br/>', $error_messages);\n         echo '</td>';\n         echo '</tr>';\n      }\n\n      echo '</table>';\n      Html::closeForm();\n   }\n\n\n   /**\n    * Show new password form of password recovery process.\n    *\n    * @param $token\n    *\n    * @return void\n    */\n   static function showPasswordForgetChangeForm($token) {\n      global $CFG_GLPI, $DB;\n\n      // Verif token.\n      $token_ok = false;\n      $iterator = $DB->request([\n         'FROM'   => self::getTable(),\n         'WHERE'  => [\n            'password_forget_token'       => $token,\n            new \\QueryExpression('NOW() < ADDDATE(' . $DB->quoteName('password_forget_token_date') . ', INTERVAL 1 DAY)')\n         ]\n      ]);\n\n      if (count($iterator) == 1) {\n         $token_ok = true;\n      }\n      echo \"<div class='center'>\";\n\n      if ($token_ok) {\n         echo \"<form method='post' name='forgetpassword' action='\".$CFG_GLPI['root_doc'].\n                \"/front/lostpassword.php'>\";\n         echo \"<table class='tab_cadre'>\";\n         echo \"<tr><th colspan='2'>\" . __('Forgotten password?').\"</th></tr>\";\n\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td colspan='2'>\". __('Please confirm your email address and enter your new password.').\n              \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\" . _n('Email', 'Emails', 1).\"</td>\";\n         echo \"<td><input type='text' name='email' value='' size='60'></td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\" . __('Password').\"</td>\";\n         echo \"<td><input id='password' type='password' name='password' value='' size='20'\n                    autocomplete='new-password' onkeyup=\\\"return passwordCheck();\\\">\";\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\" . __('Password confirmation').\"</td>\";\n         echo \"<td><input type='password' name='password2' value='' size='20' autocomplete='new-password'>\";\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\".__('Password security policy').\"</td>\";\n         echo \"<td>\";\n         Config::displayPasswordSecurityChecks();\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_2 center'><td colspan='2'>\";\n         echo \"<input type='hidden' name='password_forget_token' value='$token'>\";\n         echo \"<input type='submit' name='update' value=\\\"\".__s('Save').\"\\\" class='submit'>\";\n         echo \"</td></tr>\";\n\n         echo \"</table>\";\n         Html::closeForm();\n\n      } else {\n         echo __('Your password reset request has expired or is invalid. Please renew it.');\n      }\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Show request form of password recovery process.\n    *\n    * @return void\n    */\n   static function showPasswordForgetRequestForm() {\n      global $CFG_GLPI;\n\n      echo \"<div class='center'>\";\n      echo \"<form method='post' name='forgetpassword' action='\".$CFG_GLPI['root_doc'].\n             \"/front/lostpassword.php'>\";\n      echo \"<table class='tab_cadre'>\";\n      echo \"<tr><th colspan='2'>\" . __('Forgotten password?').\"</th></tr>\";\n\n      echo \"<tr class='tab_bg_1'><td colspan='2'>\" .\n            __('Please enter your email address. An email will be sent to you and you will be able to choose a new password.').\n           \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_2 center'>\";\n      echo \"<td><input type='text' size='60' name='email' value=''></td>\";\n      echo \"<td><input type='submit' name='update' value=\\\"\".__s('Save').\"\\\" class='submit'>\";\n      echo \"</td></tr>\";\n\n      echo \"</table>\";\n      Html::closeForm();\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Handle password recovery form submission.\n    *\n    * @param array $input\n    *\n    * @throws ForgetPasswordException when requirements are not met\n    *\n    * @return boolean true if password successfully changed, false otherwise\n    */\n   public function updateForgottenPassword(array $input) {\n      $condition = [\n         'glpi_users.is_active'  => 1,\n         'glpi_users.is_deleted' => 0, [\n            'OR' => [\n               ['glpi_users.begin_date' => null],\n               ['glpi_users.begin_date' => ['<', new QueryExpression('NOW()')]]\n            ],\n         ], [\n            'OR'  => [\n               ['glpi_users.end_date'   => null],\n               ['glpi_users.end_date'   => ['>', new QueryExpression('NOW()')]]\n            ]\n         ]\n      ];\n      if ($this->getFromDBbyEmail($input['email'], $condition)) {\n         if (($this->fields[\"authtype\"] == Auth::DB_GLPI)\n             || !Auth::useAuthExt()) {\n\n            if (($input['password_forget_token'] == $this->fields['password_forget_token'])\n                && (abs(strtotime($_SESSION[\"glpi_currenttime\"])\n                        -strtotime($this->fields['password_forget_token_date'])) < DAY_TIMESTAMP)) {\n\n               $input['id'] = $this->fields['id'];\n               Config::validatePassword($input[\"password\"], false); // Throws exception if password is invalid\n               if (!$this->update($input)) {\n                  return false;\n               }\n               $input2 = [\n                  'password_forget_token'      => '',\n                  'password_forget_token_date' => 'NULL',\n                  'id'                         => $this->fields['id']\n               ];\n               $this->update($input2);\n               return true;\n\n            } else {\n               throw new ForgetPasswordException(__('Your password reset request has expired or is invalid. Please renew it.'));\n            }\n\n         } else {\n            throw new ForgetPasswordException(__(\"The authentication method configuration doesn't allow you to change your password.\"));\n         }\n\n      } else {\n         throw new ForgetPasswordException(__('Email address not found.'));\n      }\n\n      return false;\n   }\n\n\n   /**\n    * Displays password recovery result.\n    *\n    * @param array $input\n    *\n    * @return void\n    */\n   public function showUpdateForgottenPassword(array $input) {\n      global $CFG_GLPI;\n\n      echo \"<div class='center'>\";\n      try {\n         if (!$this->updateForgottenPassword($input)) {\n            Html::displayMessageAfterRedirect();\n         } else {\n            echo __('Reset password successful.');\n         }\n      } catch (ForgetPasswordException $e) {\n         echo $e->getMessage();\n      } catch (PasswordTooWeakException $e) {\n         // Force display on error\n         foreach ($e->getMessages() as $message) {\n            Session::addMessageAfterRedirect($message);\n         }\n         Html::displayMessageAfterRedirect();\n      }\n\n      echo \"<br>\";\n      echo \"<a href=\\\"\".$CFG_GLPI['root_doc'].\"/index.php\\\">\".__s('Back').\"</a>\";\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Send password recovery for a user and display result message.\n    *\n    * @param string $email email of the user\n    *\n    * @return void\n    */\n   public function showForgetPassword($email) {\n\n      echo \"<div class='center'>\";\n      try {\n         $this->forgetPassword($email);\n      } catch (ForgetPasswordException $e) {\n         echo $e->getMessage();\n         return;\n      }\n      echo __('An email has been sent to your email address. The email contains information for reset your password.');\n   }\n\n   /**\n    * Send password recovery email for a user.\n    *\n    * @param string $email\n    *\n    * @throws ForgetPasswordException when requirements are not met\n    *\n    * @return boolean true if notification successfully created, false if user not found\n    */\n   public function forgetPassword($email) {\n      $condition = [\n         'glpi_users.is_active'  => 1,\n         'glpi_users.is_deleted' => 0, [\n            'OR' => [\n               ['glpi_users.begin_date' => null],\n               ['glpi_users.begin_date' => ['<', new QueryExpression('NOW()')]]\n            ],\n         ], [\n            'OR'  => [\n               ['glpi_users.end_date'   => null],\n               ['glpi_users.end_date'   => ['>', new QueryExpression('NOW()')]]\n            ]\n         ]\n      ];\n\n      if ($this->getFromDBbyEmail($email, $condition)) {\n\n         // Send token if auth DB or not external auth defined\n         if (($this->fields[\"authtype\"] == Auth::DB_GLPI)\n             || !Auth::useAuthExt()) {\n\n            if (NotificationMailing::isUserAddressValid($email)) {\n               $input = [\n                  'password_forget_token'      => sha1(Toolbox::getRandomString(30)),\n                  'password_forget_token_date' => $_SESSION[\"glpi_currenttime\"],\n                  'id'                         => $this->fields['id'],\n               ];\n               $this->update($input);\n               // Notication on root entity (glpi_users.entities_id is only a pref)\n               NotificationEvent::raiseEvent('passwordforget', $this, ['entities_id' => 0]);\n               QueuedNotification::forceSendFor($this->getType(), $this->fields['id']);\n               return true;\n            } else {\n               throw new ForgetPasswordException(__('Invalid email address'));\n            }\n\n         } else {\n            throw new ForgetPasswordException(__(\"The authentication method configuration doesn't allow you to change your password.\"));\n         }\n\n      }\n\n      throw new ForgetPasswordException(__('Email address not found.'));\n   }\n\n\n   /**\n    * Display information from LDAP server for user.\n    *\n    * @return void\n    */\n   private function showLdapDebug() {\n\n      if ($this->fields['authtype'] != Auth::LDAP) {\n         return false;\n      }\n      echo \"<div class='spaced'>\";\n      echo \"<table class='tab_cadre_fixe'>\";\n      echo \"<tr><th colspan='4'>\".AuthLDAP::getTypeName(1).\"</th></tr>\";\n\n      echo \"<tr class='tab_bg_2'><td>\".__('User DN').\"</td>\";\n      echo \"<td>\".$this->fields['user_dn'].\"</td></tr>\\n\";\n\n      if ($this->fields['user_dn']) {\n         echo \"<tr class='tab_bg_2'><td>\".__('User information').\"</td><td>\";\n         $config_ldap = new AuthLDAP();\n         $ds          = false;\n\n         if ($config_ldap->getFromDB($this->fields['auths_id'])) {\n            $ds = $config_ldap->connect();\n         }\n\n         if ($ds) {\n            $info = AuthLDAP::getUserByDn($ds, $this->fields['user_dn'],\n                                          ['*', 'createTimeStamp', 'modifyTimestamp']);\n            if (is_array($info)) {\n               Html::printCleanArray($info);\n            } else {\n               echo __('No item to display');\n            }\n\n         } else {\n            echo __('Connection failed');\n         }\n\n         echo \"</td></tr>\\n\";\n      }\n\n      echo \"</table></div>\";\n   }\n\n\n   /**\n    * Display debug information for current object.\n    *\n    * @return void\n    */\n   function showDebug() {\n\n      NotificationEvent::debugEvent($this);\n      $this->showLdapDebug();\n   }\n\n   function getUnicityFieldsToDisplayInErrorMessage() {\n\n      return ['id'          => __('ID'),\n                   'entities_id' => Entity::getTypeName(1)];\n   }\n\n\n   function getUnallowedFieldsForUnicity() {\n\n      return array_merge(parent::getUnallowedFieldsForUnicity(),\n                         ['auths_id', 'date_sync', 'entities_id', 'last_login', 'profiles_id']);\n   }\n\n\n   /**\n    * Get a unique generated token.\n    *\n    * @param string $field Field storing the token\n    *\n    * @return string\n    */\n   static function getUniqueToken($field = 'personal_token') {\n      global $DB;\n\n      $ok = false;\n      do {\n         $key    = Toolbox::getRandomString(40);\n         $row = $DB->request([\n            'COUNT'  => 'cpt',\n            'FROM'   => self::getTable(),\n            'WHERE'  => [$field => $key]\n         ])->next();\n\n         if ($row['cpt'] == 0) {\n            return $key;\n         }\n      } while (!$ok);\n\n   }\n\n\n   /**\n    * Get token of a user. If not exists generate it.\n    *\n    * @param integer $ID    User ID\n    * @param string  $field Field storing the token\n    *\n    * @return string|boolean User token, false if user does not exist\n    */\n   static function getToken($ID, $field = 'personal_token') {\n\n      $user = new self();\n      if ($user->getFromDB($ID)) {\n         return $user->getAuthToken($field);\n      }\n\n      return false;\n   }\n\n   /**\n    * Get token of a user. If it does not exists  then generate it.\n    *\n    * @since 9.4\n    *\n    * @param string $field the field storing the token\n    * @param boolean $force_new force generation of a new token\n    *\n    * @return string|false token or false in case of error\n    */\n   public function getAuthToken($field = 'personal_token', $force_new = false) {\n      global $CFG_GLPI;\n\n      if ($this->isNewItem()) {\n         return false;\n      }\n\n      // check date validity for cookie token\n      $outdated = false;\n      if ($field === 'cookie_token') {\n         $date_create = new DateTime($this->fields[$field.\"_date\"]);\n         $date_expir  = $date_create->add(new DateInterval('PT'.$CFG_GLPI[\"login_remember_time\"].'S'));\n\n         if ($date_expir < new DateTime()) {\n            $outdated = true;\n         }\n      }\n\n      // token exists, is not oudated, and we may use it\n      if (!empty($this->fields[$field]) && !$force_new && !$outdated) {\n         return $this->fields[$field];\n      }\n\n      // else get a new token\n      $token = self::getUniqueToken($field);\n\n      // for cookie token, we need to store it hashed\n      $hash = $token;\n      if ($field === 'cookie_token') {\n         $hash = Auth::getPasswordHash($token);\n      }\n\n      // save this token in db\n      $this->update(['id'             => $this->getID(),\n                     $field           => $hash,\n                     $field . \"_date\" => $_SESSION['glpi_currenttime']]);\n\n      return $token;\n   }\n\n\n   /**\n    * Get name of users using default passwords\n    *\n    * @return string[]\n    */\n   static function checkDefaultPasswords() {\n      global $DB;\n\n      $passwords = ['glpi'      => 'glpi',\n                         'tech'      => 'tech',\n                         'normal'    => 'normal',\n                         'post-only' => 'postonly'];\n      $default_password_set = [];\n\n      $crit = ['FIELDS'     => ['name', 'password'],\n                    'is_active'  => 1,\n                    'is_deleted' => 0,\n                    'name'       => array_keys($passwords)];\n\n      foreach ($DB->request('glpi_users', $crit) as $data) {\n         if (Auth::checkPassword($passwords[strtolower($data['name'])], $data['password'])) {\n            $default_password_set[] = $data['name'];\n         }\n      }\n\n      return $default_password_set;\n   }\n\n\n   /**\n    * Get picture URL from picture field.\n    *\n    * @since 0.85\n    *\n    * @param string $picture Picture field value\n    *\n    * @return string\n    */\n   static function getURLForPicture($picture) {\n      global $CFG_GLPI;\n\n      $url = Toolbox::getPictureUrl($picture);\n      if (null !== $url) {\n         return $url;\n      }\n\n      return $CFG_GLPI[\"root_doc\"].\"/pics/picture.png\";\n   }\n\n\n   /**\n    * Get thumbnail URL from picture field.\n    *\n    * @since 0.85\n    *\n    * @param string $picture Picture field value\n    *\n    * @return string\n    */\n   static function getThumbnailURLForPicture($picture) {\n      global $CFG_GLPI;\n\n      // prevent xss\n      $picture = Html::cleanInputText($picture);\n\n      if (!empty($picture)) {\n         $tmp = explode(\".\", $picture);\n         if (count($tmp) ==2) {\n            return $CFG_GLPI[\"root_doc\"].\"/front/document.send.php?file=_pictures/\".$tmp[0].\n                   \"_min.\".$tmp[1];\n         }\n         return $CFG_GLPI[\"root_doc\"].\"/pics/picture_min.png\";\n      }\n      return $CFG_GLPI[\"root_doc\"].\"/pics/picture_min.png\";\n\n   }\n\n\n   /**\n    * Drop existing files for user picture.\n    *\n    * @since 0.85\n    *\n    * @param string $picture Picture field value\n    *\n    * @return void\n    */\n   static function dropPictureFiles($picture) {\n\n      if (!empty($picture)) {\n         // unlink main file\n         if (file_exists(GLPI_PICTURE_DIR.\"/$picture\")) {\n            @unlink(GLPI_PICTURE_DIR.\"/$picture\");\n         }\n         // unlink Thunmnail\n         $tmp = explode(\".\", $picture);\n         if (count($tmp) == 2) {\n            if (file_exists(GLPI_PICTURE_DIR.\"/\".$tmp[0].\"_min.\".$tmp[1])) {\n               @unlink(GLPI_PICTURE_DIR.\"/\".$tmp[0].\"_min.\".$tmp[1]);\n            }\n         }\n      }\n   }\n\n   function getRights($interface = 'central') {\n\n      $values = parent::getRights();\n      //TRANS: short for : Add users from an external source\n      $values[self::IMPORTEXTAUTHUSERS] = ['short' => __('Add external'),\n                                                'long'  => __('Add users from an external source')];\n       //TRANS: short for : Read method for user authentication and synchronization\n      $values[self::READAUTHENT]        = ['short' => __('Read auth'),\n                                                'long'  => __('Read user authentication and synchronization method')];\n      //TRANS: short for : Update method for user authentication and synchronization\n      $values[self::UPDATEAUTHENT]      = ['short' => __('Update auth and sync'),\n                                                'long'  => __('Update method for user authentication and synchronization')];\n\n      return $values;\n   }\n\n\n   /**\n    * Retrieve the list of LDAP field names from a list of fields\n    * allow pattern substitution, e.g. %{name}.\n    *\n    * @since 9.1\n    *\n    * @param string[] $map array of fields\n    *\n    * @return string[]\n    */\n   private static function getLdapFieldNames(array $map) {\n\n      $ret =  [];\n      foreach ($map as $v) {\n         /** @var array $reg */\n         if (preg_match_all('/%{(.*)}/U', $v, $reg)) {\n            // e.g. \"%{country} > %{city} > %{site}\"\n            foreach ($reg [1] as $f) {\n               $ret [] = $f;\n            }\n         } else {\n            // single field name\n            $ret [] = $v;\n         }\n      }\n      return $ret;\n   }\n\n\n   /**\n    * Retrieve the value of a fields from a LDAP result applying needed substitution of %{value}.\n    *\n    * @since 9.1\n    *\n    * @param string $map String with field format\n    * @param array  $res LDAP result\n    *\n    * @return string\n    */\n   private static function getLdapFieldValue($map, array $res) {\n\n      $map = Toolbox::unclean_cross_side_scripting_deep($map);\n      $ret = preg_replace_callback('/%{(.*)}/U',\n                                    function ($matches) use ($res) {\n                                       return (isset($res[0][$matches[1]][0]) ? $res[0][$matches[1]][0] : '');\n                                    }, $map );\n\n      return $ret == $map ? (isset($res[0][$map][0]) ? $res[0][$map][0] : '') : $ret;\n   }\n\n   /**\n    * Get/Print the switch language form.\n    *\n    * @param boolean $display Whether to display or return output\n    * @param array   $options Options\n    *    - string   value       Selected language value\n    *    - boolean  showbutton  Whether to display or not submit button\n    *\n    * @return void|string Nothing if displayed, string to display otherwise\n    */\n   function showSwitchLangForm($display = true, array $options = []) {\n\n      $params = [\n         'value'        => $_SESSION[\"glpilanguage\"],\n         'display'      => false,\n         'showbutton'   => true\n      ];\n\n      foreach ($options as $key => $value) {\n         $params[$key] = $value;\n      }\n\n      $out = '';\n      $out .= \"<form method='post' name='switchlang' action='\".User::getFormURL().\"' autocomplete='off'>\";\n      $out .= \"<p class='center'>\";\n      $out .= Dropdown::showLanguages(\"language\", $params);\n      if ($params['showbutton'] === true) {\n         $out .= \"&nbsp;<input type='submit' name='update' value=\\\"\"._sx('button', 'Save').\"\\\" class='submit'>\";\n      }\n      $out .= \"</p>\";\n      $out .= Html::closeForm(false);\n\n      if ($display === true) {\n         echo $out;\n      } else {\n         return $out;\n      }\n   }\n\n   /**\n    * Get list of entities ids for current user.\n    *\n    * @return integer[]\n    */\n   private function getEntities() {\n      //get user entities\n      if ($this->entities == null) {\n         $this->entities = Profile_User::getUserEntities($this->fields['id'], true);\n      }\n      return $this->entities;\n   }\n\n\n   /**\n    * Give cron information.\n    *\n    * @param string $name Task's name\n    *\n    * @return array\n    */\n   public static function cronInfo(string $name): array {\n\n      $info = [];\n      switch ($name) {\n         case 'passwordexpiration':\n            $info = [\n               'description' => __('Handle users passwords expiration policy'),\n               'parameter'   => __('Maximum expiration notifications to send at once'),\n            ];\n            break;\n      }\n      return $info;\n   }\n\n   /**\n    * Cron that notify users about when their password expire and deactivate their account\n    * depending on password expiration policy.\n    *\n    * @param CronTask $task\n    *\n    * @return integer\n    */\n   public static function cronPasswordExpiration(CronTask $task) {\n      global $CFG_GLPI, $DB;\n\n      $expiration_delay   = (int)$CFG_GLPI['password_expiration_delay'];\n      $notice_time        = (int)$CFG_GLPI['password_expiration_notice'];\n      $notification_limit = (int)$task->fields['param'];\n      $lock_delay         = (int)$CFG_GLPI['password_expiration_lock_delay'];\n\n      if (-1 === $expiration_delay || (-1 === $notice_time && -1 === $lock_delay)) {\n         // Nothing to do if passwords does not expire\n         // or if password expires without notice and with no lock delay\n         return 0;\n      }\n\n      // Notify users about expiration of their password.\n      $to_notify_count = 0;\n      if (-1 !== $notice_time) {\n         $notification_request = [\n            'FROM'      => self::getTable(),\n            'LEFT JOIN' => [\n               Alert::getTable() => [\n                  'ON' => [\n                     Alert::getTable() => 'items_id',\n                     self::getTable()  => 'id',\n                     [\n                        'AND' => [\n                           Alert::getTableField('itemtype') => self::getType(),\n                        ]\n                     ],\n                  ]\n               ]\n            ],\n            'WHERE'     => [\n               self::getTableField('is_deleted') => 0,\n               self::getTableField('is_active')  => 1,\n               self::getTableField('authtype')   => Auth::DB_GLPI,\n               new QueryExpression(\n                  sprintf(\n                     'NOW() > ADDDATE(%s, INTERVAL %s DAY)',\n                     $DB->quoteName(self::getTableField('password_last_update')),\n                     $expiration_delay - $notice_time\n                  )\n               ),\n               // Get only users that has not yet been notified within last day\n               'OR'                              => [\n                  [Alert::getTableField('date') => null],\n                  [Alert::getTableField('date') => ['<', new QueryExpression('CURRENT_TIMESTAMP() - INTERVAL 1 day')]],\n               ],\n            ],\n         ];\n\n         $to_notify_count_request = array_merge(\n            $notification_request,\n            [\n               'COUNT'  => 'cpt',\n            ]\n         );\n         $to_notify_count = $DB->request($to_notify_count_request)->next()['cpt'];\n\n         $notification_data_request  = array_merge(\n            $notification_request,\n            [\n               'SELECT'    => [\n                  self::getTableField('id as user_id'),\n                  Alert::getTableField('id as alert_id'),\n               ],\n               'LIMIT'     => $notification_limit,\n            ]\n         );\n         $notification_data_iterator = $DB->request($notification_data_request);\n\n         foreach ($notification_data_iterator as $notification_data) {\n            $user_id  = $notification_data['user_id'];\n            $alert_id = $notification_data['alert_id'];\n\n            $user = new User();\n            $user->getFromDB($user_id);\n\n            $is_notification_send = NotificationEvent::raiseEvent(\n               'passwordexpires',\n               $user,\n               ['entities_id' => 0] // Notication on root entity (glpi_users.entities_id is only a pref)\n            );\n            if (!$is_notification_send) {\n               continue;\n            }\n\n            $task->addVolume(1);\n\n            $alert = new Alert();\n\n            // Delete existing alert if any\n            if (null !== $alert_id) {\n               $alert->delete(['id' => $alert_id]);\n            }\n\n            // Add an alert to not warn user for at least one day\n            $alert->add(\n               [\n                  'itemtype' => 'User',\n                  'items_id' => $user_id,\n                  'type'     => Alert::NOTICE,\n               ]\n            );\n         }\n      }\n\n      // Disable users if their password has expire for too long.\n      if (-1 !== $lock_delay) {\n         $DB->update(\n            self::getTable(),\n            [\n               'is_active'         => 0,\n               'cookie_token'      => null,\n               'cookie_token_date' => null,\n            ],\n            [\n               'is_deleted' => 0,\n               'is_active'  => 1,\n               'authtype'   => Auth::DB_GLPI,\n               new QueryExpression(\n                  sprintf(\n                     'NOW() > ADDDATE(ADDDATE(%s, INTERVAL %d DAY), INTERVAL %s DAY)',\n                     $DB->quoteName(self::getTableField('password_last_update')),\n                     $expiration_delay,\n                     $lock_delay\n                  )\n               ),\n            ]\n         );\n      }\n\n      return -1 !== $notice_time && $to_notify_count > $notification_limit\n         ? -1 // -1 for partial process (remaining notifications to send)\n         : 1; // 1 for fully process\n   }\n\n   /**\n    * Get password expiration time.\n    *\n    * @return null|int Password expiration time, or null if expiration mechanism is not active.\n    */\n   public function getPasswordExpirationTime() {\n      global $CFG_GLPI;\n\n      if (!array_key_exists('id', $this->fields) || $this->fields['id'] < 1) {\n         return null;\n      }\n\n      $expiration_delay = (int)$CFG_GLPI['password_expiration_delay'];\n\n      if (-1 === $expiration_delay) {\n         return null;\n      }\n\n      return strtotime(\n         '+ ' . $expiration_delay . ' days',\n         strtotime($this->fields['password_last_update'])\n      );\n   }\n\n   /**\n    * Check if password should be changed (if it expires soon).\n    *\n    * @return boolean\n    */\n   public function shouldChangePassword() {\n      global $CFG_GLPI;\n\n      if ($this->hasPasswordExpired()) {\n         return true; // too late to change password, but returning false would not be logical here\n      }\n\n      $expiration_time = $this->getPasswordExpirationTime();\n      if (null === $expiration_time) {\n         return false;\n      }\n\n      $notice_delay    = (int)$CFG_GLPI['password_expiration_notice'];\n      if (-1 === $notice_delay) {\n         return false;\n      }\n\n      $notice_time = strtotime('- ' . $notice_delay . ' days', $expiration_time);\n\n      return $notice_time < time();\n   }\n\n   /**\n    * Check if password expired.\n    *\n    * @return boolean\n    */\n   public function hasPasswordExpired() {\n\n      $expiration_time = $this->getPasswordExpirationTime();\n      if (null === $expiration_time) {\n         return false;\n      }\n\n      return $expiration_time < time();\n   }\n\n   public static function getFriendlyNameSearchCriteria(string $filter): array {\n      $table     = self::getTable();\n      $login     = DBmysql::quoteName(\"$table.name\");\n      $firstname = DBmysql::quoteName(\"$table.firstname\");\n      $lastname  = DBmysql::quoteName(\"$table.realname\");\n\n      $filter = strtolower($filter);\n      $filter_no_spaces = str_replace(\" \", \"\", $filter);\n\n      return [\n         'OR' => [\n            ['RAW' => [\"LOWER($login)\" => ['LIKE', \"%$filter%\"]]],\n            ['RAW' => [\"LOWER(REPLACE(CONCAT($firstname, $lastname), ' ', ''))\" => ['LIKE', \"%$filter_no_spaces%\"]]],\n            ['RAW' => [\"LOWER(REPLACE(CONCAT($lastname, $firstname), ' ', ''))\" => ['LIKE', \"%$filter_no_spaces%\"]]],\n         ]\n      ];\n   }\n\n   public static function getFriendlyNameFields(string $alias = \"name\") {\n      $config = Config::getConfigurationValues('core');\n      if ($config['names_format'] == User::FIRSTNAME_BEFORE) {\n         $first = \"firstname\";\n         $second = \"realname\";\n      } else {\n         $first = \"realname\";\n         $second = \"firstname\";\n      }\n\n      $table  = self::getTable();\n      $first  = DB::quoteName(\"$table.$first\");\n      $second = DB::quoteName(\"$table.$second\");\n      $alias  = DB::quoteName($alias);\n      $name   = DB::quoteName(self::getNameField());\n\n      return new QueryExpression(\"IF(\n            $first <> '' && $second <> '',\n            CONCAT($first, ' ', $second),\n            $name\n         ) AS $alias\"\n      );\n   }\n\n   static function getIcon() {\n      return \"fas fa-user\";\n   }\n\n   /**\n    * Add groups stored in \"_ldap_rules/groups_id\" special input\n    */\n   public function applyGroupsRules() {\n      if (!isset($this->input[\"_ldap_rules\"]['groups_id'])) {\n         return;\n      }\n\n      $group_ids = array_unique($this->input[\"_ldap_rules\"]['groups_id']);\n      foreach ($group_ids as $group_id) {\n         $group_user = new Group_User();\n\n         $data = [\n            'groups_id' => $group_id,\n            'users_id'  => $this->getId()\n         ];\n\n         if (!$group_user->getFromDBByCrit($data)) {\n            $group_user->add($data);\n         }\n\n      }\n   }\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2021 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n*/\n\nnamespace tests\\units;\n\nuse \\DbTestCase;\n\n/* Test for inc/dropdown.class.php */\n\nclass Dropdown extends DbTestCase {\n\n   public function testShowLanguages() {\n\n      $opt = [ 'display_emptychoice' => true, 'display' => false ];\n      $out = \\Dropdown::showLanguages('dropfoo', $opt);\n      $this->string($out)\n         ->contains(\"name='dropfoo'\")\n         ->contains(\"value='' selected\")\n         ->notContains(\"value='0'\")\n         ->contains(\"value='fr_FR'\");\n\n      $opt = ['display' => false, 'value' => 'cs_CZ', 'rand' => '1234'];\n      $out = \\Dropdown::showLanguages('language', $opt);\n      $this->string($out)\n         ->notContains(\"value=''\")\n         ->notContains(\"value='0'\")\n         ->contains(\"name='language' id='dropdown_language1234\")\n         ->contains(\"value='cs_CZ' selected\")\n         ->contains(\"value='fr_FR'\");\n   }\n\n   public function dataTestImport() {\n      return [\n            // input,             name,  message\n            [ [ ],                '',    'missing name'],\n            [ [ 'name' => ''],    '',    'empty name'],\n            [ [ 'name' => ' '],   '',    'space name'],\n            [ [ 'name' => ' a '], 'a',   'simple name'],\n            [ [ 'name' => 'foo'], 'foo', 'simple name'],\n      ];\n   }\n\n   /**\n    * @dataProvider dataTestImport\n    */\n   public function testImport($input, $result, $msg) {\n      $id = \\Dropdown::import('UserTitle', $input);\n      if ($result) {\n         $this->integer((int)$id)->isGreaterThan(0);\n         $ut = new \\UserTitle();\n         $this->boolean($ut->getFromDB($id))->isTrue();\n         $this->string($ut->getField('name'))->isIdenticalTo($result);\n      } else {\n         $this->integer((int)$id)->isLessThan(0);\n      }\n   }\n\n   public function dataTestTreeImport() {\n      return [\n            // input,                                  name,    completename, message\n            [ [ ],                                     '',      '',           'missing name'],\n            [ [ 'name' => ''],                          '',     '',           'empty name'],\n            [ [ 'name' => ' '],                         '',     '',           'space name'],\n            [ [ 'name' => ' a '],                       'a',    'a',          'simple name'],\n            [ [ 'name' => 'foo'],                       'foo',  'foo',        'simple name'],\n            [ [ 'completename' => 'foo > bar'],         'bar',  'foo > bar',  'two names'],\n            [ [ 'completename' => ' '],                 '',     '',           'only space'],\n            [ [ 'completename' => '>'],                 '',     '',           'only >'],\n            [ [ 'completename' => ' > '],               '',     '',           'only > and spaces'],\n            [ [ 'completename' => 'foo>bar'],           'bar',  'foo > bar',  'two names with no space'],\n            [ [ 'completename' => '>foo>>bar>'],        'bar',  'foo > bar',  'two names with additional >'],\n            [ [ 'completename' => ' foo >   > bar > '], 'bar',  'foo > bar',  'two names with garbage'],\n      ];\n   }\n\n   /**\n    * @dataProvider dataTestTreeImport\n    */\n   public function testTreeImport($input, $result, $complete, $msg) {\n      $input['entities_id'] = getItemByTypeName('Entity', '_test_root_entity', true);\n      $id = \\Dropdown::import('Location', $input);\n      if ($result) {\n         $this->integer((int)$id, $msg)->isGreaterThan(0);\n         $ut = new \\Location();\n         $this->boolean($ut->getFromDB($id))->isTrue();\n         $this->string($ut->getField('name'))->isIdenticalTo($result);\n         $this->string($ut->getField('completename'))->isIdenticalTo($complete);\n      } else {\n         $this->integer((int)$id)->isLessThanOrEqualTo(0);\n      }\n   }\n\n   public function testGetDropdownName() {\n      global $CFG_GLPI;\n\n      $ret = \\Dropdown::getDropdownName('not_a_known_table', 1);\n      $this->string($ret)->isIdenticalTo('&nbsp;');\n\n      $cat = getItemByTypeName('TaskCategory', '_cat_1');\n\n      $subCat = getItemByTypeName('TaskCategory', '_subcat_1');\n\n      // basic test returns string only\n      $expected = $cat->fields['name'].\" > \".$subCat->fields['name'];\n      $ret = \\Dropdown::getDropdownName('glpi_taskcategories', $subCat->getID());\n      $this->string($ret)->isIdenticalTo($expected);\n\n      // test of return with comments\n      $expected = ['name'    => $cat->fields['name'].\" > \".$subCat->fields['name'],\n                        'comment' => \"<span class='b'>Complete name</span>: \".$cat->fields['name'].\" > \"\n                                    .$subCat->fields['name'].\"<br><span class='b'>&nbsp;Comments&nbsp;</span>\"\n                                    .$subCat->fields['comment']];\n      $ret = \\Dropdown::getDropdownName( 'glpi_taskcategories', $subCat->getID(), true );\n      $this->array($ret)->isIdenticalTo($expected);\n\n      // test of return without $tooltip\n      $expected = ['name'    => $cat->fields['name'].\" > \".$subCat->fields['name'],\n                        'comment' => $subCat->fields['comment']];\n      $ret = \\Dropdown::getDropdownName( 'glpi_taskcategories', $subCat->getID(), true, true, false );\n      $this->array($ret)->isIdenticalTo($expected);\n\n      // test of return with translations\n      $CFG_GLPI['translate_dropdowns'] = 1;\n      $_SESSION[\"glpilanguage\"] = \\Session::loadLanguage( 'fr_FR' );\n      $_SESSION['glpi_dropdowntranslations'] = \\DropdownTranslation::getAvailableTranslations($_SESSION[\"glpilanguage\"]);\n      $expected = ['name'    => 'FR - _cat_1 > FR - _subcat_1',\n                        'comment' => 'FR - Commentaire pour sous-cat\u00e9gorie _subcat_1'];\n      $ret = \\Dropdown::getDropdownName( 'glpi_taskcategories', $subCat->getID(), true, true, false );\n      // switch back to default language\n      $_SESSION[\"glpilanguage\"] = \\Session::loadLanguage('en_GB');\n      $this->array($ret)->isIdenticalTo($expected);\n\n      ////////////////////////////////\n      // test for other dropdown types\n      ////////////////////////////////\n\n      ///////////\n      // Computer\n      $computer = getItemByTypeName( 'Computer', '_test_pc01' );\n      $ret = \\Dropdown::getDropdownName( 'glpi_computers', $computer->getID());\n      $this->string($ret)->isIdenticalTo($computer->getName());\n\n      $expected = ['name'    => $computer->getName(),\n                        'comment' => $computer->fields['comment']];\n      $ret = \\Dropdown::getDropdownName( 'glpi_computers', $computer->getID(), true);\n      $this->array($ret)->isIdenticalTo($expected);\n\n      //////////\n      // Contact\n      $contact = getItemByTypeName( 'Contact', '_contact01_name' );\n      $expected = $contact->getName();\n      $ret = \\Dropdown::getDropdownName( 'glpi_contacts', $contact->getID());\n      $this->string($ret)->isIdenticalTo($expected);\n\n      // test of return with comments\n      $expected = ['name'    => $contact->getName(),\n                        'comment' => \"Comment for contact _contact01_name<br><span class='b'>\".\n                                    \"Phone: </span>0123456789<br><span class='b'>Phone 2: </span>0123456788<br><span class='b'>\".\n                                    \"Mobile phone: </span>0623456789<br><span class='b'>Fax: </span>0123456787<br>\".\n                                    \"<span class='b'>Email: </span>_contact01_firstname._contact01_name@glpi.com\"];\n      $ret = \\Dropdown::getDropdownName( 'glpi_contacts', $contact->getID(), true );\n      $this->array($ret)->isIdenticalTo($expected);\n\n      // test of return without $tooltip\n      $expected = ['name'    => $contact->getName(),\n                        'comment' => $contact->fields['comment']];\n      $ret = \\Dropdown::getDropdownName( 'glpi_contacts', $contact->getID(), true, true, false );\n      $this->array($ret)->isIdenticalTo($expected);\n\n      ///////////\n      // Supplier\n      $supplier = getItemByTypeName( 'Supplier', '_suplier01_name' );\n      $expected = $supplier->getName();\n      $ret = \\Dropdown::getDropdownName( 'glpi_suppliers', $supplier->getID());\n      $this->string($ret)->isIdenticalTo($expected);\n\n      // test of return with comments\n      $expected = ['name'    => $supplier->getName(),\n                        'comment' => \"Comment for supplier _suplier01_name<br><span class='b'>Phone: </span>0123456789<br>\".\n                                     \"<span class='b'>Fax: </span>0123456787<br><span class='b'>Email: </span>info@_supplier01_name.com\"];\n      $ret = \\Dropdown::getDropdownName( 'glpi_suppliers', $supplier->getID(), true );\n      $this->array($ret)->isIdenticalTo($expected);\n\n      // test of return without $tooltip\n      $expected = ['name'    => $supplier->getName(),\n                        'comment' => $supplier->fields['comment']];\n      $ret = \\Dropdown::getDropdownName( 'glpi_suppliers', $supplier->getID(), true, true, false );\n      $this->array($ret)->isIdenticalTo($expected);\n\n      ///////////\n      // Netpoint\n      $netpoint = getItemByTypeName( 'Netpoint', '_netpoint01' );\n      $location = getItemByTypeName( 'Location', '_location01' );\n      $expected = $netpoint->getName().\" (\".$location->getName().\")\";\n      $ret = \\Dropdown::getDropdownName( 'glpi_netpoints', $netpoint->getID());\n      $this->string($ret)->isIdenticalTo($expected);\n\n      // test of return with comments\n      $expected = ['name'    => $expected,\n                        'comment' => \"Comment for netpoint _netpoint01\"];\n      $ret = \\Dropdown::getDropdownName( 'glpi_netpoints', $netpoint->getID(), true );\n      $this->array($ret)->isIdenticalTo($expected);\n\n      // test of return without $tooltip\n      $ret = \\Dropdown::getDropdownName( 'glpi_netpoints', $netpoint->getID(), true, true, false );\n      $this->array($ret)->isIdenticalTo($expected);\n\n      ///////////\n      // Budget\n      $budget = getItemByTypeName( 'Budget', '_budget01' );\n      $expected = $budget->getName();\n      $ret = \\Dropdown::getDropdownName( 'glpi_budgets', $budget->getID());\n      $this->string($ret)->isIdenticalTo($expected);\n\n      // test of return with comments\n      $expected = ['name'    =>  $budget->getName(),\n                        'comment' => \"Comment for budget _budget01<br><span class='b'>Location</span>: \".\n                                       \"_location01<br><span class='b'>Type</span>: _budgettype01<br><span class='b'>\".\n                                       \"Start date</span>: 2016-10-18 <br><span class='b'>End date</span>: 2016-12-31 \"];\n      $ret = \\Dropdown::getDropdownName( 'glpi_budgets', $budget->getID(), true );\n      $this->array($ret)->isIdenticalTo($expected);\n\n      // test of return without $tooltip\n      $expected = ['name'    => $budget->getName(),\n                        'comment' => $budget->fields['comment']];\n      $ret = \\Dropdown::getDropdownName( 'glpi_budgets', $budget->getID(), true, true, false );\n      $this->array($ret)->isIdenticalTo($expected);\n   }\n\n   public function testGetDropdownNetpoint() {\n      $netpoint = getItemByTypeName( 'Netpoint', '_netpoint01' );\n      $location = getItemByTypeName( 'Location', '_location01' );\n      $ret = \\Dropdown::getDropdownNetpoint([], false);\n      $this->array($ret)->hasKeys(['count', 'results'])->integer['count']->isIdenticalTo(1);\n      $this->array($ret['results'])->isIdenticalTo([\n         [\n            'id'     => 0,\n            'text'   => '-----'\n         ], [\n            'id'     => $netpoint->fields['id'],\n            'text'   => $netpoint->getName() . ' (' . $location->getName() . ')',\n            'title'  =>  $netpoint->getName() . ' - ' . $location->getName() . ' - ' . $netpoint->fields['comment']\n         ]\n      ]);\n   }\n\n   public function dataGetValueWithUnit() {\n      return [\n            [1,         'auto',        '1024 Kio'],\n            [1025,      'auto',        '1 Gio'],\n            ['1 025',   'auto',        '1 Gio'],\n            [1,         'year',        '1 year'],\n            [2,         'year',        '2 years'],\n            [3,         '%',           '3%'],\n            ['foo',     'bar',         'foo bar'],\n            [1,         'month',       '1 month'],\n            [2,         'month',       '2 months'],\n            ['any',     '',            'any'],\n            [1,         'day',         '1 day'],\n            [2,         'day',         '2 days'],\n            [1,         'hour',        '1 hour'],\n            [2,         'hour',        '2 hours'],\n            [1,         'minute',      '1 minute'],\n            [2,         'minute',      '2 minutes'],\n            [1,         'second',      '1 second'],\n            [2,         'second',      '2 seconds'],\n            [1,         'millisecond', '1 millisecond'],\n            [2,         'millisecond', '2 milliseconds'],\n      ];\n   }\n\n   /**\n    * @dataProvider dataGetValueWithUnit\n    */\n   public function testGetValueWithUnit($input, $unit, $expected) {\n      $this->string(\\Dropdown::getValueWithUnit($input, $unit))->isIdenticalTo($expected);\n   }\n\n   protected function getDropdownValueProvider() {\n      return [\n         [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'TaskCategory'\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'text'      => 'Root entity',\n                     'children'  => [\n                        0 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_cat_1', true),\n                           'text'           => '_cat_1',\n                           'level'          => 1,\n                           'title'          => '_cat_1 - Comment for category _cat_1',\n                           'selection_text' => '_cat_1',\n                        ],\n                        1 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_subcat_1', true),\n                           'text'           => '_subcat_1',\n                           'level'          => 2,\n                           'title'          => '_cat_1 > _subcat_1 - Comment for sub-category _subcat_1',\n                           'selection_text' => '_cat_1 > _subcat_1',\n                        ]\n                     ]\n                  ]\n               ],\n               'count' => 2\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'TaskCategory',\n               'searchText'            => 'subcat'\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'text'      => 'Root entity',\n                     'children'  => [\n                        0 => [\n                           'id'     => getItemByTypeName('TaskCategory', '_cat_1', true),\n                           'text'   => '_cat_1',\n                           'level'  => 1,\n                           'disabled' => true\n                        ],\n                        1 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_subcat_1', true),\n                           'text'           => '_subcat_1',\n                           'level'          => 2,\n                           'title'          => '_cat_1 > _subcat_1 - Comment for sub-category _subcat_1',\n                           'selection_text' => '_cat_1 > _subcat_1',\n                        ]\n                     ]\n                  ]\n               ],\n               'count' => 1\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 1,\n               'emptylabel'            => 'EEEEEE',\n               'itemtype'              => 'TaskCategory'\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'id'        => 0,\n                     'text'      => 'EEEEEE'\n                  ],\n                  1 => [\n                     'text'      => 'Root entity',\n                     'children'  => [\n                        0 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_cat_1', true),\n                           'text'           => '_cat_1',\n                           'level'          => 1,\n                           'title'          => '_cat_1 - Comment for category _cat_1',\n                           'selection_text' => '_cat_1',\n                        ],\n                        1 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_subcat_1', true),\n                           'text'           => '_subcat_1',\n                           'level'          => 2,\n                           'title'          => '_cat_1 > _subcat_1 - Comment for sub-category _subcat_1',\n                           'selection_text' => '_cat_1 > _subcat_1',\n                        ]\n                     ]\n                  ]\n               ],\n               'count' => 2\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'TaskCategory',\n               'used'                  => [getItemByTypeName('TaskCategory', '_cat_1', true)]\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'text'      => 'Root entity',\n                     'children'  => [\n                        0 => [\n                           'id'     => getItemByTypeName('TaskCategory', '_cat_1', true),\n                           'text'   => '_cat_1',\n                           'level'  => 1,\n                           'disabled' => true\n                        ],\n                        1 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_subcat_1', true),\n                           'text'           => '_subcat_1',\n                           'level'          => 2,\n                           'title'          => '_cat_1 > _subcat_1 - Comment for sub-category _subcat_1',\n                           'selection_text' => '_cat_1 > _subcat_1',\n                        ]\n                     ]\n                  ]\n               ],\n               'count' => 1\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'Computer',\n               'entity_restrict'       => getItemByTypeName('Entity', '_test_child_2', true)\n            ],\n            'expected'  => [\n               'results'   => [\n                  0 => [\n                     'text'      => 'Root entity > _test_root_entity > _test_child_2',\n                     'children'  => [\n                        0 => [\n                           'id'     => getItemByTypeName('Computer', '_test_pc21', true),\n                           'text'   => '_test_pc21',\n                           'title'  => '_test_pc21',\n                        ],\n                        1 => [\n                           'id'     => getItemByTypeName('Computer', '_test_pc22', true),\n                           'text'   => '_test_pc22',\n                           'title'  => '_test_pc22',\n                        ]\n                     ]\n                  ]\n               ],\n               'count'     => 2\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'Computer',\n               'entity_restrict'       => '[' . getItemByTypeName('Entity', '_test_child_2', true) .']'\n            ],\n            'expected'  => [\n               'results'   => [\n                  0 => [\n                     'text'      => 'Root entity > _test_root_entity > _test_child_2',\n                     'children'  => [\n                        0 => [\n                           'id'     => getItemByTypeName('Computer', '_test_pc21', true),\n                           'text'   => '_test_pc21',\n                           'title'  => '_test_pc21',\n                        ],\n                        1 => [\n                           'id'     => getItemByTypeName('Computer', '_test_pc22', true),\n                           'text'   => '_test_pc22',\n                           'title'  => '_test_pc22',\n                        ]\n                     ]\n                  ]\n               ],\n               'count'     => 2\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'Computer',\n               'entity_restrict'       => getItemByTypeName('Entity', '_test_child_2', true),\n               'searchText'            => '22'\n            ],\n            'expected'  => [\n               'results'   => [\n                  0 => [\n                     'text'      => 'Root entity > _test_root_entity > _test_child_2',\n                     'children'  => [\n                        0 => [\n                           'id'     => getItemByTypeName('Computer', '_test_pc22', true),\n                           'text'   => '_test_pc22',\n                           'title'  => '_test_pc22',\n                        ]\n                     ]\n                  ]\n               ],\n               'count'     => 1\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'TaskCategory',\n               'searchText'            => 'subcat',\n               'toadd'                 => ['key' => 'value']\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'id'     => 'key',\n                     'text'   => 'value'\n                  ],\n                  1 => [\n                     'text'      => 'Root entity',\n                     'children'  => [\n                        0 => [\n                           'id'     => getItemByTypeName('TaskCategory', '_cat_1', true),\n                           'text'   => '_cat_1',\n                           'level'  => 1,\n                           'disabled' => true\n                        ],\n                        1 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_subcat_1', true),\n                           'text'           => '_subcat_1',\n                           'level'          => 2,\n                           'title'          => '_cat_1 > _subcat_1 - Comment for sub-category _subcat_1',\n                           'selection_text' => '_cat_1 > _subcat_1',\n                        ]\n                     ]\n                  ]\n               ],\n               'count' => 1\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'TaskCategory',\n               'searchText'            => 'subcat'\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'text'      => 'Root entity',\n                     'children'  => [\n                        0 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_subcat_1', true),\n                           'text'           => '_cat_1 > _subcat_1',\n                           'level'          => 0,\n                           'title'          => '_cat_1 > _subcat_1 - Comment for sub-category _subcat_1',\n                           'selection_text' => '_cat_1 > _subcat_1',\n                        ]\n                     ]\n                  ]\n               ],\n               'count' => 1\n            ],\n            'session_params' => [\n               'glpiuse_flat_dropdowntree' => true\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'TaskCategory'\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'text'      => 'Root entity',\n                     'children'  => [\n                        0 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_cat_1', true),\n                           'text'           => '_cat_1',\n                           'level'          => 0,\n                           'title'          => '_cat_1 - Comment for category _cat_1',\n                           'selection_text' => '_cat_1',\n                        ],\n                        1 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_subcat_1', true),\n                           'text'           => '_cat_1 > _subcat_1',\n                           'level'          => 0,\n                           'title'          => '_cat_1 > _subcat_1 - Comment for sub-category _subcat_1',\n                           'selection_text' => '_cat_1 > _subcat_1',\n                        ]\n                     ]\n                  ]\n               ],\n               'count' => 2\n            ],\n            'session_params' => [\n               'glpiuse_flat_dropdowntree' => true\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'TaskCategory',\n               'searchText'            => 'subcat',\n               'permit_select_parent'  => true\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'text'      => 'Root entity',\n                     'children'  => [\n                        0 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_cat_1', true),\n                           'text'           => '_cat_1',\n                           'level'          => 1,\n                           'title'          => '_cat_1 - Comment for category _cat_1',\n                           'selection_text' => '_cat_1',\n                        ],\n                        1 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_subcat_1', true),\n                           'text'           => '_subcat_1',\n                           'level'          => 2,\n                           'title'          => '_cat_1 > _subcat_1 - Comment for sub-category _subcat_1',\n                           'selection_text' => '_cat_1 > _subcat_1',\n                        ]\n                     ]\n                  ]\n               ],\n               'count' => 1\n            ]\n         ], [\n            // search using id on CommonTreeDropdown but without \"glpiis_ids_visible\" set to true -> no results\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'TaskCategory',\n               'searchText'            => getItemByTypeName('TaskCategory', '_subcat_1', true),\n            ],\n            'expected'  => [\n               'results' => [\n               ],\n               'count' => 0\n            ],\n            'session_params' => [\n               'glpiis_ids_visible' => false\n            ]\n         ], [\n            // search using id on CommonTreeDropdown with \"glpiis_ids_visible\" set to true -> results\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'TaskCategory',\n               'searchText'            => getItemByTypeName('TaskCategory', '_subcat_1', true),\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'text'      => 'Root entity',\n                     'children'  => [\n                        0 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_cat_1', true),\n                           'text'           => '_cat_1',\n                           'level'          => 1,\n                           'disabled'       => true\n                        ],\n                        1 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_subcat_1', true),\n                           'text'           => '_subcat_1 (' . getItemByTypeName('TaskCategory', '_subcat_1', true) . ')',\n                           'level'          => 2,\n                           'title'          => '_cat_1 > _subcat_1 - Comment for sub-category _subcat_1',\n                           'selection_text' => '_cat_1 > _subcat_1',\n                        ]\n                     ]\n                  ]\n               ],\n               'count' => 1\n            ],\n            'session_params' => [\n               'glpiis_ids_visible' => true\n            ]\n         ], [\n            // search using id on \"not a CommonTreeDropdown\" but without \"glpiis_ids_visible\" set to true -> no results\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'DocumentType',\n               'searchText'            => getItemByTypeName('DocumentType', 'markdown', true),\n            ],\n            'expected'  => [\n               'results' => [\n               ],\n               'count' => 0\n            ],\n            'session_params' => [\n               'glpiis_ids_visible' => false\n            ]\n         ], [\n            // search using id on \"not a CommonTreeDropdown\" with \"glpiis_ids_visible\" set to true -> results\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'DocumentType',\n               'searchText'            => getItemByTypeName('DocumentType', 'markdown', true),\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'id'             => getItemByTypeName('DocumentType', 'markdown', true),\n                     'text'           => 'markdown (' . getItemByTypeName('DocumentType', 'markdown', true) . ')',\n                     'title'          => 'markdown',\n                  ]\n               ],\n               'count' => 1\n            ],\n            'session_params' => [\n               'glpiis_ids_visible' => true\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice' => 0,\n               'itemtype'            => 'ComputerModel',\n            ],\n            'expected'  => [\n               'results'   => [\n                  [\n                     'id'     => getItemByTypeName('ComputerModel', '_test_computermodel_1', true),\n                     'text'   => '_test_computermodel_1 - CMP_ADEAF5E1',\n                     'title'  => '_test_computermodel_1 - CMP_ADEAF5E1',\n                  ],\n                  [\n                     'id'     => getItemByTypeName('ComputerModel', '_test_computermodel_2', true),\n                     'text'   => '_test_computermodel_2 - CMP_567AEC68',\n                     'title'  => '_test_computermodel_2 - CMP_567AEC68',\n                  ]\n               ],\n               'count'     => 2\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice' => 0,\n               'itemtype'            => 'ComputerModel',\n               'searchText'          => 'CMP_56',\n            ],\n            'expected'  => [\n               'results'   => [\n                  [\n                     'id'     => getItemByTypeName('ComputerModel', '_test_computermodel_2', true),\n                     'text'   => '_test_computermodel_2 - CMP_567AEC68',\n                     'title'  => '_test_computermodel_2 - CMP_567AEC68',\n                  ]\n               ],\n               'count'     => 1\n            ]\n         ],\n      ];\n   }\n\n   /**\n    * @dataProvider getDropdownValueProvider\n    */\n   public function testGetDropdownValue($params, $expected, $session_params = []) {\n      $this->login();\n\n      $bkp_params = [];\n      //set session params if any\n      if (count($session_params)) {\n         foreach ($session_params as $param => $value) {\n            if (isset($_SESSION[$param])) {\n               $bkp_params[$param] = $_SESSION[$param];\n            }\n            $_SESSION[$param] = $value;\n         }\n      }\n\n      $params['_idor_token'] = \\Session::getNewIDORToken($params['itemtype'] ?? '');\n\n      $result = \\Dropdown::getDropdownValue($params, false);\n\n      //reset session params before executing test\n      if (count($session_params)) {\n         foreach ($session_params as $param => $value) {\n            if (isset($bkp_params[$param])) {\n               $_SESSION[$param] = $bkp_params[$param];\n            } else {\n               unset($_SESSION[$param]);\n            }\n         }\n      }\n\n      $this->array($result)->isIdenticalTo($expected);\n   }\n\n   protected function getDropdownConnectProvider() {\n      return [\n         [\n            'params'    => [\n               'fromtype'  => 'Computer',\n               'itemtype'  => 'Printer'\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'id' => 0,\n                     'text' => '-----',\n                  ],\n                  1 => [\n                     'text' => 'Root entity > _test_root_entity',\n                     'children' => [\n                        0 => [\n                           'id'     => getItemByTypeName('Printer', '_test_printer_all', true),\n                           'text'   => '_test_printer_all',\n                        ],\n                        1 => [\n                           'id'     => getItemByTypeName('Printer', '_test_printer_ent0', true),\n                           'text'   => '_test_printer_ent0',\n                        ]\n                     ]\n                  ],\n                  2 => [\n                     'text' => 'Root entity > _test_root_entity > _test_child_1',\n                     'children' => [\n                        0 => [\n                           'id'     => getItemByTypeName('Printer', '_test_printer_ent1', true),\n                           'text'   => '_test_printer_ent1',\n                        ]\n                     ]\n                  ],\n                  3 => [\n                     'text' => 'Root entity > _test_root_entity > _test_child_2',\n                     'children' => [\n                        0 => [\n                           'id'     => getItemByTypeName('Printer', '_test_printer_ent2', true),\n                           'text'   => '_test_printer_ent2',\n                        ]\n                     ]\n                  ]\n               ]\n            ]\n         ], [\n            'params'    => [\n               'fromtype'  => 'Computer',\n               'itemtype'  => 'Printer',\n               'used'      => [\n                  'Printer' => [\n                     getItemByTypeName('Printer', '_test_printer_ent0', true),\n                     getItemByTypeName('Printer', '_test_printer_ent2', true)\n                  ]\n               ]\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'id' => 0,\n                     'text' => '-----',\n                  ],\n                  1 => [\n                     'text' => 'Root entity > _test_root_entity',\n                     'children' => [\n                        0 => [\n                           'id'     => getItemByTypeName('Printer', '_test_printer_all', true),\n                           'text'   => '_test_printer_all',\n                        ]\n                     ]\n                  ],\n                  2 => [\n                     'text' => 'Root entity > _test_root_entity > _test_child_1',\n                     'children' => [\n                        0 => [\n                           'id'     => getItemByTypeName('Printer', '_test_printer_ent1', true),\n                           'text'   => '_test_printer_ent1',\n                        ]\n                     ]\n                  ]\n               ]\n            ]\n         ], [\n            'params'    => [\n               'fromtype'     => 'Computer',\n               'itemtype'     => 'Printer',\n               'searchText'   => 'ent0'\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'text' => 'Root entity > _test_root_entity',\n                     'children' => [\n                        0 => [\n                           'id'     => getItemByTypeName('Printer', '_test_printer_ent0', true),\n                           'text'   => '_test_printer_ent0',\n                        ]\n                     ]\n                  ]\n               ]\n            ]\n         ], [\n            'params'    => [\n               'fromtype'     => 'Computer',\n               'itemtype'     => 'Printer',\n               'searchText'   => 'ent0'\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'text' => 'Root entity > _test_root_entity',\n                     'children' => [\n                        0 => [\n                           'id'     => getItemByTypeName('Printer', '_test_printer_ent0', true),\n                           'text'   => '_test_printer_ent0 (' .getItemByTypeName('Printer', '_test_printer_ent0', true) . ')',\n                        ]\n                     ]\n                  ]\n               ]\n            ],\n            'session_params' => [\n               'glpiis_ids_visible' => true\n            ]\n         ]\n      ];\n   }\n\n   /**\n    * @dataProvider getDropdownConnectProvider\n    */\n   public function testGetDropdownConnect($params, $expected, $session_params = []) {\n      $this->login();\n\n      $bkp_params = [];\n      //set session params if any\n      if (count($session_params)) {\n         foreach ($session_params as $param => $value) {\n            if (isset($_SESSION[$param])) {\n               $bkp_params[$param] = $_SESSION[$param];\n            }\n            $_SESSION[$param] = $value;\n         }\n      }\n\n      $params['_idor_token'] = \\Session::getNewIDORToken($params['itemtype'] ?? '');\n\n      $result = \\Dropdown::getDropdownConnect($params, false);\n\n      //reset session params before executing test\n      if (count($session_params)) {\n         foreach ($session_params as $param => $value) {\n            if (isset($bkp_params[$param])) {\n               $_SESSION[$param] = $bkp_params[$param];\n            } else {\n               unset($_SESSION[$param]);\n            }\n         }\n      }\n\n      $this->array($result)->isIdenticalTo($expected);\n   }\n\n   protected function getDropdownNumberProvider() {\n      return [\n         [\n            'params'    => [],\n            'expected'  => [\n               'results'   => [\n                  0 => [\n                     'id'     => 1,\n                     'text'   => '1'\n                  ],\n                  1 => [\n                     'id'     => 2,\n                     'text'   => '2'\n                  ],\n                  2 => [\n                     'id'     => 3,\n                     'text'   => '3'\n                  ],\n                  3 => [\n                     'id'     => 4,\n                     'text'   => '4'\n                  ],\n                  4 => [\n                     'id'     => 5,\n                     'text'   => '5'\n                  ],\n                  5 => [\n                     'id'     => 6,\n                     'text'   => '6'\n                  ],\n                  6 => [\n                     'id'     => 7,\n                     'text'   => '7'\n                  ],\n                  7 => [\n                     'id'     => 8,\n                     'text'   => '8'\n                  ],\n                  8 => [\n                     'id'     => 9,\n                     'text'   => '9'\n                  ],\n                  9 => [\n                     'id'     => 10,\n                     'text'   => '10'\n                  ]\n               ],\n               'count'     => 10\n            ]\n         ], [\n            'params'    => [\n               'min'    => 10,\n               'max'    => 30,\n               'step'   => 10\n            ],\n            'expected'  => [\n               'results'   => [\n                  0 => [\n                     'id'     => 10,\n                     'text'   => '10'\n                  ],\n                  1 => [\n                     'id'     => 20,\n                     'text'   => '20'\n                  ],\n                  2 => [\n                     'id'     => 30,\n                     'text'   => '30'\n                  ]\n               ],\n               'count'     => 3\n            ]\n         ], [\n            'params'    => [\n               'min'    => 10,\n               'max'    => 30,\n               'step'   => 10,\n               'used'   => [20]\n            ],\n            'expected'  => [\n               'results'   => [\n                  0 => [\n                     'id'     => 10,\n                     'text'   => '10'\n                  ],\n                  1 => [\n                     'id'     => 30,\n                     'text'   => '30'\n                  ]\n               ],\n               'count'     => 2\n            ]\n         ], [\n            'params'    => [\n               'min'    => 10,\n               'max'    => 30,\n               'step'   => 10,\n               'used'   => [20],\n               'toadd'  => [5 => 'five']\n            ],\n            'expected'  => [\n               'results'   => [\n                  0 => [\n                     'id'     => 5,\n                     'text'   =>'five'\n                  ],\n                  1 => [\n                     'id'     => 10,\n                     'text'   => '10'\n                  ],\n                  2 => [\n                     'id'     => 30,\n                     'text'   => '30'\n                  ]\n               ],\n               'count'     => 2\n            ]\n         ], [\n            'params'    => [\n               'min'    => 10,\n               'max'    => 30,\n               'step'   => 10,\n               'used'   => [20],\n               'unit'   => 'second'\n            ],\n            'expected'  => [\n               'results'   => [\n                  0 => [\n                     'id'     => 10,\n                     'text'   => '10 seconds'\n                  ],\n                  1 => [\n                     'id'     => 30,\n                     'text'   => '30 seconds'\n                  ]\n               ],\n               'count'     => 2\n            ]\n         ]\n      ];\n   }\n\n   /**\n    * @dataProvider getDropdownNumberProvider\n    */\n   public function testGetDropdownNumber($params, $expected) {\n      global $CFG_GLPI;\n      $orig_max = $CFG_GLPI['dropdown_max'];\n      $CFG_GLPI['dropdown_max'] = 10;\n      $result = \\Dropdown::getDropdownNumber($params, false);\n      $CFG_GLPI['dropdown_max'] = $orig_max;\n      $this->array($result)->isIdenticalTo($expected);\n   }\n\n   protected function getDropdownUsersProvider() {\n      return [\n         [\n            'params'    => [],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'id'     => 0,\n                     'text'   => '-----',\n                  ],\n                  1 => [\n                     'id'     => (int)getItemByTypeName('User', '_test_user', true),\n                     'text'   => '_test_user',\n                     'title'  => '_test_user - _test_user',\n                  ],\n                  2 => [\n                     'id'     => (int)getItemByTypeName('User', 'glpi', true),\n                     'text'   => 'glpi',\n                     'title'  => 'glpi - glpi',\n                  ],\n                  3 => [\n                     'id'     => (int)getItemByTypeName('User', 'normal', true),\n                     'text'   => 'normal',\n                     'title'  => 'normal - normal',\n                  ],\n                  4 => [\n                     'id'     => (int)getItemByTypeName('User', 'post-only', true),\n                     'text'   => 'post-only',\n                     'title'  => 'post-only - post-only',\n                  ],\n                  5 => [\n                     'id'     => (int)getItemByTypeName('User', 'tech', true),\n                     'text'   => 'tech',\n                     'title'  => 'tech - tech',\n                  ]\n               ],\n               'count' => 5\n            ]\n         ], [\n            'params'    => [\n               'used'   => [\n                  getItemByTypeName('User', 'glpi', true),\n                  getItemByTypeName('User', 'tech', true)\n               ]\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'id'     => 0,\n                     'text'   => '-----',\n                  ],\n                  1 => [\n                     'id'     => (int)getItemByTypeName('User', '_test_user', true),\n                     'text'   => '_test_user',\n                     'title'  => '_test_user - _test_user',\n                  ],\n                  2 => [\n                     'id'     => (int)getItemByTypeName('User', 'normal', true),\n                     'text'   => 'normal',\n                     'title'  => 'normal - normal',\n                  ],\n                  3 => [\n                     'id'     => (int)getItemByTypeName('User', 'post-only', true),\n                     'text'   => 'post-only',\n                     'title'  => 'post-only - post-only',\n                  ]\n               ],\n               'count' => 3\n            ]\n         ], [\n            'params'    => [\n               'all'    => true,\n               'used'   => [\n                  getItemByTypeName('User', 'glpi', true),\n                  getItemByTypeName('User', 'tech', true),\n                  getItemByTypeName('User', 'normal', true),\n                  getItemByTypeName('User', 'post-only', true)\n               ]\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'id'     => 0,\n                     'text'   => 'All',\n                  ],\n                  1 => [\n                     'id'     => (int)getItemByTypeName('User', '_test_user', true),\n                     'text'   => '_test_user',\n                     'title'  => '_test_user - _test_user',\n                  ]\n               ],\n               'count' => 1\n            ]\n         ]\n      ];\n   }\n\n   /**\n    * @dataProvider getDropdownUsersProvider\n    */\n   public function testGetDropdownUsers($params, $expected) {\n      $this->login();\n\n      $params['_idor_token'] = \\Session::getNewIDORToken('User');\n      $result = \\Dropdown::getDropdownUsers($params, false);\n      $this->array($result)->isIdenticalTo($expected);\n   }\n\n   /**\n    * Test getDropdownValue with paginated results on\n    * an CommonTreeDropdown\n    *\n    * @return void\n    */\n   public function testGetDropdownValuePaginate() {\n      //let's add some content in Locations\n      $location = new \\Location();\n      for ($i = 0; $i <= 20; ++$i) {\n         $this->integer(\n            (int)$location->add([\n               'name'   => \"Test location $i\"\n            ])\n         )->isGreaterThan(0);\n      }\n\n      $post = [\n         'itemtype'              => $location::getType(),\n         'display_emptychoice'   => true,\n         'entity_restrict'       => 0,\n         'page'                  => 1,\n         'page_limit'            => 10,\n         '_idor_token'           => \\Session::getNewIDORToken($location::getType())\n      ];\n      $values = \\Dropdown::getDropdownValue($post);\n      $values = (array)json_decode($values);\n\n      $this->array($values)\n         ->integer['count']->isEqualTo(10)\n         ->array['results']\n            ->hasSize(2);\n\n      $results = (array)$values['results'];\n      $this->array((array)$results[0])\n         ->isIdenticalTo([\n            'id'     => 0,\n            'text'   => '-----'\n         ]);\n\n      $list_results = (array)$results[1];\n      $this->array($list_results)\n         ->hasSize(2)\n         ->string['text']->isIdenticalTo('Root entity');\n\n      $children = (array)$list_results['children'];\n      $this->array($children)->hasSize(10);\n      $this->array((array)$children[0])\n         ->hasKeys([\n            'id',\n            'text',\n            'level',\n            'title',\n            'selection_text'\n         ]);\n\n      $post['page'] = 2;\n      $values = \\Dropdown::getDropdownValue($post);\n      $values = (array)json_decode($values);\n\n      $this->array($values)\n         ->integer['count']->isEqualTo(10);\n\n      $this->array($values['results'])->hasSize(10);\n      $this->array((array)$values['results'][0])\n         ->hasKeys([\n            'id',\n            'text',\n            'level',\n            'title',\n            'selection_text'\n         ]);\n\n      //use a array condition\n      $post = [\n         'itemtype'              => $location::getType(),\n         'condition'             => ['name' => ['LIKE', \"%3%\"]],\n         'display_emptychoice'   => true,\n         'entity_restrict'       => 0,\n         'page'                  => 1,\n         'page_limit'            => 10,\n         '_idor_token'           => \\Session::getNewIDORToken($location::getType())\n      ];\n      $values = \\Dropdown::getDropdownValue($post);\n      $values = (array)json_decode($values);\n\n      $this->array($values)\n         ->integer['count']->isEqualTo(2)\n         ->array['results']\n            ->hasSize(2);\n\n      //use a string condition\n      // Put condition in session and post its key\n      $condition_key = sha1(serialize($post['condition']));\n      $_SESSION['glpicondition'][$condition_key] = $post['condition'];\n      $post['condition'] = $condition_key;\n      $values = \\Dropdown::getDropdownValue($post);\n      $values = (array)json_decode($values);\n\n      $this->array($values)\n         ->integer['count']->isEqualTo(2)\n         ->array['results']\n            ->hasSize(2);\n\n      //use a condition that does not exists in session\n      $post = [\n         'itemtype'              => $location::getType(),\n         'condition'             => '`name` LIKE \"%4%\"',\n         'display_emptychoice'   => true,\n         'entity_restrict'       => 0,\n         'page'                  => 1,\n         'page_limit'            => 10,\n         '_idor_token'           => \\Session::getNewIDORToken($location::getType())\n      ];\n      $values = \\Dropdown::getDropdownValue($post);\n      $values = (array)json_decode($values);\n\n      $this->array($values)\n         ->integer['count']->isEqualTo(10)\n         ->array['results']\n            ->hasSize(2);\n\n   }\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2021 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n*/\n\nnamespace tests\\units;\n\n/* Test for inc/session.class.php */\n\nclass Session extends \\DbTestCase {\n\n   public function testAddMessageAfterRedirect() {\n      $err_msg = 'Something is broken. Weird.';\n      $warn_msg = 'There was a warning. Be carefull.';\n      $info_msg = 'All goes well. Or not... Who knows ;)';\n\n      $this->array($_SESSION)->notHasKey('MESSAGE_AFTER_REDIRECT');\n\n      //test add message in cron mode\n      $_SESSION['glpicronuserrunning'] = 'cron_phpunit';\n      \\Session::addMessageAfterRedirect($err_msg, false, ERROR);\n      //adding a message in \"cron mode\" does not add anything in the session\n      $this->array($_SESSION)->notHasKey('MESSAGE_AFTER_REDIRECT');\n\n      //set not running from cron\n      unset($_SESSION['glpicronuserrunning']);\n\n      //test all messages types\n      \\Session::addMessageAfterRedirect($err_msg, false, ERROR);\n      \\Session::addMessageAfterRedirect($warn_msg, false, WARNING);\n      \\Session::addMessageAfterRedirect($info_msg, false, INFO);\n\n      $expected = [\n        ERROR   => [$err_msg],\n        WARNING => [$warn_msg],\n        INFO    => [$info_msg]\n      ];\n      $this->array($_SESSION['MESSAGE_AFTER_REDIRECT'])->isIdenticalTo($expected);\n\n      $this->output(\n         function () {\n            \\Html::displayMessageAfterRedirect();\n         }\n      )\n         ->matches('/' . str_replace('.', '\\.', $err_msg)  . '/')\n         ->matches('/' . str_replace('.', '\\.', $warn_msg)  . '/')\n         ->matches('/' . str_replace(['.', ')'], ['\\.', '\\)'], $info_msg)  . '/');\n\n      $this->array($_SESSION['MESSAGE_AFTER_REDIRECT'])->isEmpty();\n\n      //test multiple messages of same type\n      \\Session::addMessageAfterRedirect($err_msg, false, ERROR);\n      \\Session::addMessageAfterRedirect($err_msg, false, ERROR);\n      \\Session::addMessageAfterRedirect($err_msg, false, ERROR);\n\n      $expected = [\n        ERROR   => [$err_msg, $err_msg, $err_msg]\n      ];\n      $this->array($_SESSION['MESSAGE_AFTER_REDIRECT'])->isIdenticalTo($expected);\n\n      $this->output(\n         function () {\n            \\Html::displayMessageAfterRedirect();\n         }\n      )->matches('/' . str_replace('.', '\\.', $err_msg)  . '/');\n\n      $this->array($_SESSION['MESSAGE_AFTER_REDIRECT'])->isEmpty();\n\n      //test message deduplication\n      $err_msg_bis = $err_msg . ' not the same';\n      \\Session::addMessageAfterRedirect($err_msg, true, ERROR);\n      \\Session::addMessageAfterRedirect($err_msg_bis, true, ERROR);\n      \\Session::addMessageAfterRedirect($err_msg, true, ERROR);\n      \\Session::addMessageAfterRedirect($err_msg, true, ERROR);\n\n      $expected = [\n        ERROR   => [$err_msg, $err_msg_bis]\n      ];\n      $this->array($_SESSION['MESSAGE_AFTER_REDIRECT'])->isIdenticalTo($expected);\n\n      $this->output(\n         function () {\n            \\Html::displayMessageAfterRedirect();\n         }\n      )\n         ->matches('/' . str_replace('.', '\\.', $err_msg)  . '/')\n         ->matches('/' . str_replace('.', '\\.', $err_msg_bis)  . '/');\n\n      $this->array($_SESSION['MESSAGE_AFTER_REDIRECT'])->isEmpty();\n\n      //test with reset\n      \\Session::addMessageAfterRedirect($err_msg, false, ERROR);\n      \\Session::addMessageAfterRedirect($warn_msg, false, WARNING);\n      \\Session::addMessageAfterRedirect($info_msg, false, INFO, true);\n\n      $expected = [\n         INFO   => [$info_msg]\n      ];\n      $this->array($_SESSION['MESSAGE_AFTER_REDIRECT'])->isIdenticalTo($expected);\n\n      $this->output(\n         function () {\n            \\Html::displayMessageAfterRedirect();\n         }\n      )->matches('/' . str_replace(['.', ')'], ['\\.', '\\)'], $info_msg)  . '/');\n\n      $this->array($_SESSION['MESSAGE_AFTER_REDIRECT'])->isEmpty();\n   }\n\n   public function testLoadGroups() {\n\n      $entid_root = getItemByTypeName('Entity', '_test_root_entity', true);\n      $entid_1 = getItemByTypeName('Entity', '_test_child_1', true);\n      $entid_2 = getItemByTypeName('Entity', '_test_child_2', true);\n\n      $entities_ids = [$entid_root, $entid_1, $entid_2];\n\n      $uid = (int)getItemByTypeName('User', 'normal', true);\n\n      $group = new \\Group();\n      $group_user = new \\Group_User();\n\n      $user_groups = [];\n\n      foreach ($entities_ids as $entid) {\n         $group_1 = [\n            'name'         => \"Test group {$entid} recursive=no\",\n            'entities_id'  => $entid,\n            'is_recursive' => 0,\n         ];\n         $gid_1 = (int)$group->add($group_1);\n         $this->integer($gid_1)->isGreaterThan(0);\n         $this->integer((int)$group_user->add(['groups_id' => $gid_1, 'users_id'  => $uid]))->isGreaterThan(0);\n         $group_1['id'] = $gid_1;\n         $user_groups[] = $group_1;\n\n         $group_2 = [\n            'name'         => \"Test group {$entid} recursive=yes\",\n            'entities_id'  => $entid,\n            'is_recursive' => 1,\n         ];\n         $gid_2 = (int)$group->add($group_2);\n         $this->integer($gid_2)->isGreaterThan(0);\n         $this->integer((int)$group_user->add(['groups_id' => $gid_2, 'users_id'  => $uid]))->isGreaterThan(0);\n         $group_2['id'] = $gid_2;\n         $user_groups[] = $group_2;\n\n         $group_3 = [\n            'name'         => \"Test group {$entid} not attached to user\",\n            'entities_id'  => $entid,\n            'is_recursive' => 1,\n         ];\n         $gid_3 = (int)$group->add($group_3);\n         $this->integer($gid_3)->isGreaterThan(0);\n      }\n\n      $this->login('normal', 'normal');\n\n      // Test groups from whole entity tree\n      $session_backup = $_SESSION;\n      $_SESSION['glpiactiveentities'] = $entities_ids;\n      \\Session::loadGroups();\n      $groups = $_SESSION['glpigroups'];\n      $_SESSION = $session_backup;\n      $expected_groups = array_map(\n         function ($group) {\n            return (string)$group['id'];\n         },\n         $user_groups\n      );\n      $this->array($groups)->isEqualTo($expected_groups);\n\n      foreach ($entities_ids as $entid) {\n         // Test groups from a given entity\n         $expected_groups = [];\n         foreach ($user_groups as $user_group) {\n            if (($user_group['entities_id'] == $entid_root && $user_group['is_recursive'] == 1)\n                || $user_group['entities_id'] == $entid) {\n               $expected_groups[] = (string)$user_group['id'];\n            }\n         }\n\n         $session_backup = $_SESSION;\n         $_SESSION['glpiactiveentities'] = [$entid];\n         \\Session::loadGroups();\n         $groups = $_SESSION['glpigroups'];\n         $_SESSION = $session_backup;\n         $this->array($groups)->isEqualTo($expected_groups);\n      }\n   }\n\n   public function testLocalI18n() {\n      //load locales\n      \\Session::loadLanguage('en_GB');\n      $this->string(__('Login'))->isIdenticalTo('Login');\n\n      //create directory for local i18n\n      if (!file_exists(GLPI_LOCAL_I18N_DIR.'/core')) {\n         mkdir(GLPI_LOCAL_I18N_DIR.'/core');\n      }\n\n      //write local MO file with i18n override\n      copy(\n         __DIR__ . '/../local_en_GB.mo',\n         GLPI_LOCAL_I18N_DIR.'/core/en_GB.mo'\n      );\n      \\Session::loadLanguage('en_GB');\n\n      $this->string(__('Login'))->isIdenticalTo('Login from local gettext');\n      $this->string(__('Password'))->isIdenticalTo('Password');\n\n      //write local PHP file with i18n override\n      file_put_contents(\n         GLPI_LOCAL_I18N_DIR.'/core/en_GB.php',\n         \"<?php\\n\\$lang['Login'] = 'Login from local PHP';\\n\\$lang['Password'] = 'Password from local PHP';\\nreturn \\$lang;\"\n      );\n      \\Session::loadLanguage('en_GB');\n\n      $this->string(__('Login'))->isIdenticalTo('Login from local gettext');\n      $this->string(__('Password'))->isIdenticalTo('Password from local PHP');\n\n      //cleanup -- keep at the end\n      unlink(GLPI_LOCAL_I18N_DIR.'/core/en_GB.php');\n      unlink(GLPI_LOCAL_I18N_DIR.'/core/en_GB.mo');\n   }\n\n   protected function mustChangePasswordProvider() {\n      $tests = [];\n\n      // test with no password expiration\n      $tests[] = [\n         'last_update'      => date('Y-m-d H:i:s', strtotime('-10 years')),\n         'expiration_delay' => -1,\n         'expected_result'  => false,\n      ];\n\n      // tests with password expiration\n      $cases = [\n         '-5 days'  => false,\n         '-30 days' => true,\n      ];\n      foreach ($cases as $last_update => $expected_result) {\n         $tests[] = [\n            'last_update'      => date('Y-m-d H:i:s', strtotime($last_update)),\n            'expiration_delay' => 15,\n            'expected_result'  => $expected_result,\n         ];\n      }\n\n      return $tests;\n   }\n\n   /**\n    * @dataProvider mustChangePasswordProvider\n    */\n   public function testMustChangePassword(string $last_update, int $expiration_delay, bool $expected_result) {\n      global $CFG_GLPI;\n\n      $this->login();\n      $user = new \\User();\n      $username = 'test_must_change_pass_' . mt_rand();\n      $user_id = (int)$user->add([\n         'name'         => $username,\n         'password'     => 'test',\n         'password2'    => 'test',\n         '_profiles_id' => 1,\n      ]);\n      $this->integer($user_id)->isGreaterThan(0);\n      $this->boolean($user->update(['id' => $user_id, 'password_last_update' => $last_update]))->isTrue();\n\n      $cfg_backup = $CFG_GLPI;\n      $CFG_GLPI['password_expiration_delay'] = $expiration_delay;\n      $CFG_GLPI['password_expiration_lock_delay'] = -1;\n      \\Session::destroy();\n      \\Session::start();\n      $auth = new \\Auth();\n      $is_logged = $auth->login($username, 'test', true);\n      $CFG_GLPI = $cfg_backup;\n\n      $this->boolean($is_logged)->isEqualTo(true);\n      $this->boolean(\\Session::mustChangePassword())->isEqualTo($expected_result);\n   }\n\n   protected function preferredLanguageProvider() {\n      return [\n         [\n            'header'        => null,\n            'config'        => null,\n            'legacy_config' => null,\n            'expected'      => 'en_GB',\n         ],\n         [\n            'header'        => null,\n            'config'        => null,\n            'legacy_config' => 'it_IT',\n            'expected'      => 'it_IT',\n         ],\n         [\n            'header'        => null,\n            'config'        => 'de_DE',\n            'legacy_config' => null,\n            'expected'      => 'de_DE',\n         ],\n         [\n            'header'        => 'en-US',\n            'config'        => 'fr_FR',\n            'legacy_config' => null,\n            'expected'      => 'en_US',\n         ],\n         [\n            // latin as first choice (not available in GLPI), should fallback to italian\n            'header'        => 'la, it-IT;q=0.9, it;q=0.8',\n            'config'        => 'en_GB',\n            'legacy_config' => null,\n            'expected'      => 'it_IT',\n         ],\n      ];\n   }\n\n   /**\n    * @dataProvider preferredLanguageProvider\n    */\n   public function testGetPreferredLanguage(?string $header, ?string $config, ?string $legacy_config, string $expected) {\n      global $CFG_GLPI;\n\n      $header_backup = $_SERVER['HTTP_ACCEPT_LANGUAGE'] ?? null;\n      $cfg_backup = $CFG_GLPI;\n\n      if ($header !== null) {\n         $_SERVER['HTTP_ACCEPT_LANGUAGE'] = $header;\n      }\n      $CFG_GLPI['language'] = $config;\n      $CFG_GLPI['default_language'] = $legacy_config;\n      $result = \\Session::getPreferredLanguage();\n\n      if ($header_backup !== null) {\n         $_SERVER['HTTP_ACCEPT_LANGUAGE'] = $header_backup;\n      }\n      $CFG_GLPI = $cfg_backup;\n\n      $this->string($result)->isEqualTo($expected);\n   }\n\n\n   protected function idorProvider() {\n      return [\n         ['itemtype' => 'Computer'],\n         ['itemtype' => 'Ticket'],\n         ['itemtype' => 'Glpi\\\\Dashboard\\\\Item'],\n         ['itemtype' => 'User', 'add_params' => ['right' => 'all']],\n      ];\n   }\n\n   /**\n    * @dataProvider idorProvider\n    */\n   function testIDORToken(string $itemtype = \"\", array $add_params = []) {\n      // generate token\n      $token = \\Session::getNewIDORToken($itemtype, $add_params);\n      $this->string($token)->hasLength(64);\n\n      // token exists in session and is valid\n      $this->array($_SESSION['glpiidortokens'][$token])\n         ->string['itemtype']->isEqualTo($itemtype)\n         ->string['expires'];\n\n      if (count($add_params) > 0) {\n         $this->array($_SESSION['glpiidortokens'][$token])->size->isEqualTo(2 + count($add_params));\n      }\n\n      // validate token with dedicated method\n      $result = \\Session::validateIDOR([\n         '_idor_token' => $token,\n         'itemtype'    => $itemtype,\n      ] + $add_params);\n      $this->boolean($result)->isTrue();\n   }\n\n\n   function testDORInvalid() {\n      //  random token\n      $result = \\Session::validateIDOR([\n         '_idor_token' => bin2hex(random_bytes(32)),\n         'itemtype'    => 'Computer',\n      ]);\n      $this->boolean($result)->isFalse();\n\n      // bad itemtype\n      $token_bad_itt = \\Session::getNewIDORToken('Ticket');\n      $result = \\Session::validateIDOR([\n         '_idor_token' => $token_bad_itt,\n         'itemtype'    => 'Computer',\n      ]);\n      $this->boolean($result)->isFalse();\n\n      // missing add params\n      $token_miss_param = \\Session::getNewIDORToken('User', ['right' => 'all']);\n      $result = \\Session::validateIDOR([\n         '_idor_token' => $token_miss_param,\n         'itemtype'    => 'User',\n      ]);\n      $this->boolean($result)->isFalse();\n      $result = \\Session::validateIDOR([\n         '_idor_token' => $token_miss_param,\n         'itemtype'    => 'User',\n         'right'       => 'all'\n      ]);\n      $this->boolean($result)->isTrue();\n   }\n}\n"], "fixing_code": ["<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2021 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\ninclude ('../inc/includes.php');\nheader(\"Content-Type: text/html; charset=UTF-8\");\nHtml::header_nocache();\n\nSession::checkLoginUser();\n\n// Read parameters\n$context  = $_POST['context'] ?? '';\n$itemtype = $_POST[\"itemtype\"] ?? '';\n\n// Check for required params\nif (empty($itemtype)) {\n   http_response_code(400);\n   Toolbox::logWarning(\"Bad request: itemtype cannot be empty\");\n   die;\n}\n\n// Check if itemtype is valid in the given context\nif ($context == \"impact\") {\n   $isValidItemtype = Impact::isEnabled($itemtype);\n} else {\n   $isValidItemtype = CommonITILObject::isPossibleToAssignType($itemtype);\n}\n\n// Make a select box\nif ($isValidItemtype) {\n   $table = getTableForItemType($itemtype);\n\n   $rand = mt_rand();\n   if (isset($_POST[\"rand\"])) {\n      $rand = $_POST[\"rand\"];\n   }\n\n   // Message for post-only\n   if (!isset($_POST[\"admin\"]) || ($_POST[\"admin\"] == 0)) {\n      echo \"<br>\".__('Enter the first letters (user, item name, serial or asset number)');\n   }\n   echo \"<br>\";\n   $field_id = Html::cleanId(\"dropdown_\".$_POST['myname'].$rand);\n   $p = [\n      'itemtype'            => $itemtype,\n      'entity_restrict'     => $_POST['entity_restrict'],\n      'table'               => $table,\n      'multiple'            => $_POST[\"multiple\"],\n      'myname'              => $_POST[\"myname\"],\n      'rand'                => $_POST[\"rand\"],\n      '_idor_token'         => Session::getNewIDORToken($itemtype, [\n         'entity_restrict' => $_POST['entity_restrict'],\n      ]),\n   ];\n\n   if (isset($_POST[\"used\"]) && !empty($_POST[\"used\"])) {\n      if (isset($_POST[\"used\"][$itemtype])) {\n         $p[\"used\"] = $_POST[\"used\"][$itemtype];\n      }\n   }\n\n   // Add context if defined\n   if (!empty($context)) {\n      $p[\"context\"] = $context;\n   }\n\n   echo Html::jsAjaxDropdown($_POST['myname'], $field_id,\n                             $CFG_GLPI['root_doc'].\"/ajax/getDropdownFindNum.php\",\n                             $p);\n\n   // Auto update summary of active or just solved tickets\n   $params = ['items_id' => '__VALUE__',\n                   'itemtype' => $_POST['itemtype']];\n   Ajax::updateItemOnSelectEvent($field_id, \"item_ticket_selection_information$rand\",\n                                 $CFG_GLPI[\"root_doc\"].\"/ajax/ticketiteminformation.php\",\n                                 $params);\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2021 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access this file directly\");\n}\n\n/**\n * Computer_Item Class\n *\n * Relation between Computer and Items (monitor, printer, phone, peripheral only)\n**/\nclass Computer_Item extends CommonDBRelation{\n\n   // From CommonDBRelation\n   static public $itemtype_1          = 'Computer';\n   static public $items_id_1          = 'computers_id';\n\n   static public $itemtype_2          = 'itemtype';\n   static public $items_id_2          = 'items_id';\n   static public $checkItem_2_Rights  = self::HAVE_VIEW_RIGHT_ON_ITEM;\n\n\n   function getForbiddenStandardMassiveAction() {\n\n      $forbidden   = parent::getForbiddenStandardMassiveAction();\n      $forbidden[] = 'update';\n      return $forbidden;\n   }\n\n\n   /**\n    * Count connection for a Computer and an itemtype\n    *\n    * @since 0.84\n    *\n    * @param $comp   Computer object\n    * @param $item   CommonDBTM object\n    *\n    * @return integer: count\n   **/\n   static function countForAll(Computer $comp, CommonDBTM $item) {\n\n      return countElementsInTable('glpi_computers_items',\n                                  ['computers_id' => $comp->getField('id'),\n                                   'itemtype'     => $item->getType(),\n                                   'items_id'     => $item->getField('id')]);\n   }\n\n\n   function prepareInputForAdd($input) {\n      global $CFG_GLPI;\n\n      $item = static::getItemFromArray(static::$itemtype_2, static::$items_id_2, $input);\n      if (!($item instanceof CommonDBTM)\n          || (($item->getField('is_global') == 0)\n              && ($this->countForItem($item) > 0))) {\n         return false;\n      }\n\n      $comp = static::getItemFromArray(static::$itemtype_1, static::$items_id_1, $input);\n      if (!($comp instanceof Computer)\n          || (self::countForAll($comp, $item) >0)) {\n         // no duplicates\n         return false;\n      }\n\n      if (!$item->getField('is_global')) {\n         // Autoupdate some fields - should be in post_addItem (here to avoid more DB access)\n         $updates = [];\n\n         if ($CFG_GLPI[\"is_location_autoupdate\"]\n             && ($comp->fields['locations_id'] != $item->getField('locations_id'))) {\n\n            $updates['locations_id'] = addslashes($comp->fields['locations_id']);\n            Session::addMessageAfterRedirect(\n                  __('Location updated. The connected items have been moved in the same location.'),\n                                             true);\n         }\n         if (($CFG_GLPI[\"is_user_autoupdate\"]\n              && ($comp->fields['users_id'] != $item->getField('users_id')))\n             || ($CFG_GLPI[\"is_group_autoupdate\"]\n                 && ($comp->fields['groups_id'] != $item->getField('groups_id')))) {\n\n            if ($CFG_GLPI[\"is_user_autoupdate\"]) {\n               $updates['users_id'] = $comp->fields['users_id'];\n            }\n            if ($CFG_GLPI[\"is_group_autoupdate\"]) {\n               $updates['groups_id'] = $comp->fields['groups_id'];\n            }\n            Session::addMessageAfterRedirect(\n               __('User or group updated. The connected items have been moved in the same values.'),\n                                             true);\n         }\n\n         if ($CFG_GLPI[\"is_contact_autoupdate\"]\n             && (($comp->fields['contact'] != $item->getField('contact'))\n                 || ($comp->fields['contact_num'] != $item->getField('contact_num')))) {\n\n            $updates['contact']     = addslashes($comp->fields['contact']);\n            $updates['contact_num'] = addslashes($comp->fields['contact_num']);\n            Session::addMessageAfterRedirect(\n               __('Alternate username updated. The connected items have been updated using this alternate username.'),\n                                             true);\n         }\n\n         if (($CFG_GLPI[\"state_autoupdate_mode\"] < 0)\n             && ($comp->fields['states_id'] != $item->getField('states_id'))) {\n\n            $updates['states_id'] = $comp->fields['states_id'];\n            Session::addMessageAfterRedirect(\n                     __('Status updated. The connected items have been updated using this status.'),\n                                             true);\n         }\n\n         if (($CFG_GLPI[\"state_autoupdate_mode\"] > 0)\n             && ($item->getField('states_id') != $CFG_GLPI[\"state_autoupdate_mode\"])) {\n\n            $updates['states_id'] = $CFG_GLPI[\"state_autoupdate_mode\"];\n         }\n\n         if (count($updates)) {\n            $updates['id'] = $input['items_id'];\n            $history = true;\n            if (isset($input['_no_history']) && $input['_no_history']) {\n               $history = false;\n            }\n            $item->update($updates, $history);\n         }\n      }\n      return parent::prepareInputForAdd($input);\n   }\n\n\n   function cleanDBonPurge() {\n      global $CFG_GLPI;\n\n      if (!isset($this->input['_no_auto_action'])) {\n         //Get the computer name\n         $computer = new Computer();\n         $computer->getFromDB($this->fields['computers_id']);\n\n         //Get device fields\n         if ($device = getItemForItemtype($this->fields['itemtype'])) {\n            if ($device->getFromDB($this->fields['items_id'])) {\n\n               if (!$device->getField('is_global')) {\n                  $updates = [];\n                  if ($CFG_GLPI[\"is_location_autoclean\"] && $device->isField('locations_id')) {\n                     $updates['locations_id'] = 0;\n                  }\n                  if ($CFG_GLPI[\"is_user_autoclean\"] && $device->isField('users_id')) {\n                     $updates['users_id'] = 0;\n                  }\n                  if ($CFG_GLPI[\"is_group_autoclean\"] && $device->isField('groups_id')) {\n                     $updates['groups_id'] = 0;\n                  }\n                  if ($CFG_GLPI[\"is_contact_autoclean\"] && $device->isField('contact')) {\n                     $updates['contact'] = \"\";\n                  }\n                  if ($CFG_GLPI[\"is_contact_autoclean\"] && $device->isField('contact_num')) {\n                     $updates['contact_num'] = \"\";\n                  }\n                  if (($CFG_GLPI[\"state_autoclean_mode\"] < 0)\n                      && $device->isField('states_id')) {\n                     $updates['states_id'] = 0;\n                  }\n\n                  if (($CFG_GLPI[\"state_autoclean_mode\"] > 0)\n                      && $device->isField('states_id')\n                      && ($device->getField('states_id') != $CFG_GLPI[\"state_autoclean_mode\"])) {\n\n                     $updates['states_id'] = $CFG_GLPI[\"state_autoclean_mode\"];\n                  }\n\n                  if (count($updates)) {\n                     $updates['id'] = $this->fields['items_id'];\n                     $device->update($updates);\n                  }\n               }\n            }\n         }\n      }\n   }\n\n\n   static function getMassiveActionsForItemtype(array &$actions, $itemtype, $is_deleted = 0,\n                                                CommonDBTM $checkitem = null) {\n\n      $action_prefix = __CLASS__.MassiveAction::CLASS_ACTION_SEPARATOR;\n      $specificities = self::getRelationMassiveActionsSpecificities();\n\n      if (in_array($itemtype, $specificities['itemtypes'])) {\n         $actions[$action_prefix.'add']    = \"<i class='ma-icon fas fa-plug'></i>\".\n                                             _x('button', 'Connect');\n         $actions[$action_prefix.'remove'] = _x('button', 'Disconnect');\n      }\n      parent::getMassiveActionsForItemtype($actions, $itemtype, $is_deleted, $checkitem);\n   }\n\n\n   static function getRelationMassiveActionsSpecificities() {\n\n      $specificities              = parent::getRelationMassiveActionsSpecificities();\n\n      $specificities['itemtypes'] = ['Monitor', 'Peripheral', 'Phone', 'Printer'];\n\n      $specificities['select_items_options_2']['entity_restrict'] = $_SESSION['glpiactive_entity'];\n      $specificities['select_items_options_2']['onlyglobal']      = true;\n\n      $specificities['only_remove_all_at_once']                   = true;\n\n      // Set the labels for add_item and remove_item\n      $specificities['button_labels']['add']                      = _sx('button', 'Connect');\n      $specificities['button_labels']['remove']                   = _sx('button', 'Disconnect');\n\n      return $specificities;\n   }\n\n\n   /**\n   * Disconnect an item to its computer\n   *\n   * @param $item    CommonDBTM object: the Monitor/Phone/Peripheral/Printer\n   *\n   * @return boolean : action succeeded\n   */\n   function disconnectForItem(CommonDBTM $item) {\n      global $DB;\n\n      if ($item->getField('id')) {\n         $iterator = $DB->request([\n            'SELECT' => ['id'],\n            'FROM'   => $this->getTable(),\n            'WHERE'  => [\n               'itemtype'  => $item->getType(),\n               'items_id'  => $item->getID()\n            ]\n         ]);\n\n         if (count($iterator) > 0) {\n            $ok = true;\n            while ($data = $iterator->next()) {\n               if ($this->can($data[\"id\"], UPDATE)) {\n                  $ok &= $this->delete($data);\n               }\n            }\n            return $ok;\n         }\n      }\n      return false;\n   }\n\n\n   /**\n    *\n    * Print the form for computers or templates connections to printers, screens or peripherals\n    *\n    * @param Computer $comp         Computer object\n    * @param boolean  $withtemplate Template or basic item (default 0)\n    *\n    * @return void\n   **/\n   static function showForComputer(Computer $comp, $withtemplate = 0) {\n      global $CFG_GLPI;\n\n      $ID      = $comp->fields['id'];\n      $canedit = $comp->canEdit($ID);\n      $rand    = mt_rand();\n\n      $datas = [];\n      $used  = [];\n      foreach ($CFG_GLPI[\"directconnect_types\"] as $itemtype) {\n         $item = new $itemtype();\n         if ($item->canView()) {\n            $iterator = self::getTypeItems($ID, $itemtype);\n\n            while ($data = $iterator->next()) {\n               $data['assoc_itemtype'] = $itemtype;\n               $datas[]           = $data;\n               $used[$itemtype][] = $data['id'];\n            }\n         }\n      }\n      $number = count($datas);\n\n      if ($canedit\n          && !(!empty($withtemplate) && ($withtemplate == 2))) {\n         echo \"<div class='firstbloc'>\";\n         echo \"<form name='computeritem_form$rand' id='computeritem_form$rand' method='post'\n                action='\".Toolbox::getItemTypeFormURL(__CLASS__).\"'>\";\n\n         echo \"<table class='tab_cadre_fixe'>\";\n         echo \"<tr class='tab_bg_2'><th colspan='2'>\".__('Connect an item').\"</th></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\";\n         if (!empty($withtemplate)) {\n            echo \"<input type='hidden' name='_no_history' value='1'>\";\n         }\n         self::dropdownAllConnect('Computer', \"items_id\", $comp->fields[\"entities_id\"],\n                                  $withtemplate, $used);\n         echo \"</td><td class='center' width='20%'>\";\n         echo \"<input type='submit' name='add' value=\\\"\"._sx('button', 'Connect').\"\\\" class='submit'>\";\n         echo \"<input type='hidden' name='computers_id' value='\".$comp->fields['id'].\"'>\";\n         echo \"</td></tr>\";\n         echo \"</table>\";\n         Html::closeForm();\n         echo \"</div>\";\n      }\n\n      if ($number) {\n         echo \"<div class='spaced'>\";\n         if ($canedit) {\n            Html::openMassiveActionsForm('mass'.__CLASS__.$rand);\n            $massiveactionparams\n               = ['num_displayed'\n                           => min($_SESSION['glpilist_limit'], $number),\n                       'specific_actions'\n                           => ['purge' => _x('button', 'Disconnect')],\n                       'container'\n                           => 'mass'.__CLASS__.$rand];\n            Html::showMassiveActions($massiveactionparams);\n         }\n         echo \"<table class='tab_cadre_fixehov'>\";\n         $header_begin  = \"<tr>\";\n         $header_top    = '';\n         $header_bottom = '';\n         $header_end    = '';\n\n         if ($canedit) {\n            $header_top    .= \"<th width='10'>\".Html::getCheckAllAsCheckbox('mass'.__CLASS__.$rand);\n            $header_top    .= \"</th>\";\n            $header_bottom .= \"<th width='10'>\".Html::getCheckAllAsCheckbox('mass'.__CLASS__.$rand);\n            $header_bottom .=  \"</th>\";\n         }\n\n         $header_end .= \"<th>\"._n('Type', 'Types', 1).\"</th>\";\n         $header_end .= \"<th>\".__('Name').\"</th>\";\n         if (Plugin::haveImport()) {\n            $header_end .= \"<th>\".__('Automatic inventory').\"</th>\";\n         }\n         $header_end .= \"<th>\".Entity::getTypeName(1).\"</th>\";\n         $header_end .= \"<th>\".__('Serial number').\"</th>\";\n         $header_end .= \"<th>\".__('Inventory number').\"</th>\";\n         $header_end .= \"</tr>\";\n         echo $header_begin.$header_top.$header_end;\n\n         foreach ($datas as $data) {\n            $linkname = $data[\"name\"];\n            $itemtype = $data['assoc_itemtype'];\n            if ($_SESSION[\"glpiis_ids_visible\"] || empty($data[\"name\"])) {\n               $linkname = sprintf(__('%1$s (%2$s)'), $linkname, $data[\"id\"]);\n            }\n            $link = $itemtype::getFormURLWithID($data[\"id\"]);\n            $name = \"<a href=\\\"\".$link.\"\\\">\".$linkname.\"</a>\";\n\n            echo \"<tr class='tab_bg_1'>\";\n\n            if ($canedit) {\n               echo \"<td width='10'>\";\n               Html::showMassiveActionCheckBox(__CLASS__, $data[\"linkid\"]);\n               echo \"</td>\";\n            }\n            echo \"<td>\".$data['assoc_itemtype']::getTypeName(1).\"</td>\";\n            echo \"<td \".\n                  ((isset($data['is_deleted']) && $data['is_deleted'])?\"class='tab_bg_2_2'\":\"\").\n                 \">\".$name.\"</td>\";\n            if (Plugin::haveImport()) {\n               $dynamic_field = static::getTable() . '_is_dynamic';\n               echo \"<td>\".Dropdown::getYesNo($data[$dynamic_field]).\"</td>\";\n            }\n            echo \"<td>\".Dropdown::getDropdownName(\"glpi_entities\",\n                                                               $data['entities_id']);\n            echo \"</td>\";\n            echo \"<td>\".\n                   (isset($data[\"serial\"])? \"\".$data[\"serial\"].\"\" :\"-\").\"</td>\";\n            echo \"<td>\".\n                   (isset($data[\"otherserial\"])? \"\".$data[\"otherserial\"].\"\" :\"-\").\"</td>\";\n            echo \"</tr>\";\n         }\n         echo $header_begin.$header_bottom.$header_end;\n\n         echo \"</table>\";\n         if ($canedit && $number) {\n            $massiveactionparams['ontop'] = false;\n            Html::showMassiveActions($massiveactionparams);\n            Html::closeForm();\n         }\n         echo \"</div>\";\n      }\n   }\n\n\n   /**\n    * Prints a direct connection to a computer\n    *\n    * @param $item                     CommonDBTM object: the Monitor/Phone/Peripheral/Printer\n    * @param $withtemplate    integer  withtemplate param (default 0)\n    *\n    * @return void\n   **/\n   static function showForItem(CommonDBTM $item, $withtemplate = 0) {\n      // Prints a direct connection to a computer\n      global $DB;\n\n      $comp   = new Computer();\n      $ID     = $item->getField('id');\n\n      if (!$item->can($ID, READ)) {\n         return;\n      }\n      $canedit = $item->canEdit($ID);\n      $rand    = mt_rand();\n\n      // Is global connection ?\n      $global  = $item->getField('is_global');\n\n      $used    = [];\n      $compids = [];\n      $dynamic = [];\n      $result = $DB->request(\n         [\n            'SELECT' => ['id', 'computers_id', 'is_dynamic'],\n            'FROM'   => self::getTable(),\n            'WHERE'  => [\n               'itemtype'   => $item->getType(),\n               'items_id'   => $ID,\n               'is_deleted' => 0,\n            ]\n         ]\n      );\n      foreach ($result as $data) {\n         $compids[$data['id']] = $data['computers_id'];\n         $dynamic[$data['id']] = $data['is_dynamic'];\n         $used['Computer'][]   = $data['computers_id'];\n      }\n      $number = count($compids);\n      if ($canedit\n          && ($global || !$number)\n          && !(!empty($withtemplate) && ($withtemplate == 2))) {\n         echo \"<div class='firstbloc'>\";\n         echo \"<form name='computeritem_form$rand' id='computeritem_form$rand' method='post'\n                action='\".Toolbox::getItemTypeFormURL(__CLASS__).\"'>\";\n\n         echo \"<table class='tab_cadre_fixe'>\";\n         echo \"<tr class='tab_bg_2'><th colspan='2'>\".__('Connect a computer').\"</th></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td class='right'>\";\n         echo \"<input type='hidden' name='items_id' value='$ID'>\";\n         echo \"<input type='hidden' name='itemtype' value='\".$item->getType().\"'>\";\n         if ($item->isRecursive()) {\n            self::dropdownConnect('Computer', $item->getType(), \"computers_id\",\n                                  getSonsOf(\"glpi_entities\", $item->getEntityID()), 0, $used);\n         } else {\n            self::dropdownConnect('Computer', $item->getType(), \"computers_id\",\n                                  $item->getEntityID(), 0, $used);\n         }\n         echo \"</td><td class='center'>\";\n         echo \"<input type='submit' name='add' value=\\\"\"._sx('button', 'Connect').\"\\\" class='submit'>\";\n         echo \"</td></tr>\";\n         echo \"</table>\";\n         Html::closeForm();\n         echo \"</div>\";\n      }\n\n      echo \"<div class='spaced'>\";\n      if ($canedit && $number) {\n         Html::openMassiveActionsForm('mass'.__CLASS__.$rand);\n         $massiveactionparams\n            = ['num_displayed'\n                        => min($_SESSION['glpilist_limit'], $number),\n                    'specific_actions'\n                        => ['purge' => _x('button', 'Disconnect')],\n                    'container'\n                        => 'mass'.__CLASS__.$rand];\n         Html::showMassiveActions($massiveactionparams);\n      }\n      echo \"<table class='tab_cadre_fixehov'>\";\n\n      if ($number > 0) {\n         $header_begin  = \"<tr>\";\n         $header_top    = '';\n         $header_bottom = '';\n         $header_end    = '';\n\n         if ($canedit) {\n            $header_top    .= \"<th width='10'>\".Html::getCheckAllAsCheckbox('mass'.__CLASS__.$rand);\n            $header_top    .= \"</th>\";\n            $header_bottom .= \"<th width='10'>\".Html::getCheckAllAsCheckbox('mass'.__CLASS__.$rand);\n            $header_bottom .= \"</th>\";\n         }\n\n         $header_end .= \"<th>\".__('Name').\"</th>\";\n         if (Plugin::haveImport()) {\n            $header_end .= \"<th>\".__('Automatic inventory').\"</th>\";\n         }\n         $header_end .= \"<th>\".Entity::getTypeName(1).\"</th>\";\n         $header_end .= \"<th>\".__('Serial number').\"</th>\";\n         $header_end .= \"<th>\".__('Inventory number').\"</th>\";\n         $header_end .= \"</tr>\";\n         echo $header_begin.$header_top.$header_end;\n\n         foreach ($compids as $key => $compid) {\n            $comp->getFromDB($compid);\n\n            echo \"<tr class='tab_bg_1'>\";\n\n            if ($canedit) {\n               echo \"<td width='10'>\";\n               Html::showMassiveActionCheckBox(__CLASS__, $key);\n               echo \"</td>\";\n            }\n            echo \"<td \".\n                  ($comp->getField('is_deleted')?\"class='tab_bg_2_2'\":\"\").\n                 \">\".$comp->getLink().\"</td>\";\n            if (Plugin::haveImport()) {\n               echo \"<td>\".Dropdown::getYesNo($dynamic[$key]).\"</td>\";\n            }\n            echo \"<td class='center'>\".Dropdown::getDropdownName(\"glpi_entities\",\n                                                               $comp->getField('entities_id'));\n            echo \"</td>\";\n            echo \"<td class='center'>\".$comp->getField('serial').\"</td>\";\n            echo \"<td class='center'>\".$comp->getField('otherserial').\"</td>\";\n            echo \"</tr>\";\n         }\n         echo $header_begin.$header_bottom.$header_end;\n      } else {\n         echo \"<tr><td class='tab_bg_1 b'><i>\".__('Not connected').\"</i>\";\n         echo \"</td></tr>\";\n      }\n\n      echo \"</table>\";\n      if ($canedit && $number) {\n         $massiveactionparams['ontop'] = false;\n         Html::showMassiveActions($massiveactionparams);\n         Html::closeForm();\n      }\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Unglobalize an item : duplicate item and connections\n    *\n    * @param $item   CommonDBTM object to unglobalize\n   **/\n   static function unglobalizeItem(CommonDBTM $item) {\n      global $DB;\n\n      // Update item to unit management :\n      if ($item->getField('is_global')) {\n         $input = ['id'        => $item->fields['id'],\n                        'is_global' => 0];\n         $item->update($input);\n\n         // Get connect_wire for this connection\n         $iterator = $DB->request([\n            'SELECT' => ['id'],\n            'FROM'   => self::getTable(),\n            'WHERE'  => [\n               'items_id'  => $item->getID(),\n               'itemtype'  => $item->getType()\n            ]\n         ]);\n\n         $first = true;\n         while ($data = $iterator->next()) {\n            if ($first) {\n               $first = false;\n               unset($input['id']);\n               $conn = new self();\n            } else {\n               $temp = clone $item;\n               unset($temp->fields['id']);\n               if ($newID=$temp->add($temp->fields)) {\n                  $conn->update(['id'       => $data['id'],\n                                 'items_id' => $newID]);\n               }\n            }\n         }\n      }\n   }\n\n\n   /**\n   * Make a select box for connections\n   *\n   * @since 0.84\n   *\n   * @param string            $fromtype        from where the connection is\n   * @param string            $myname          select name\n   * @param integer|integer[] $entity_restrict Restrict to a defined entity (default = -1)\n   * @param boolean           $onlyglobal      display only global devices (used for templates) (default 0)\n   * @param integer[]         $used            Already used items ID: not to display in dropdown\n   *\n   * @return integer Random generated number used for select box ID (select box HTML is printed)\n   */\n   static function dropdownAllConnect($fromtype, $myname, $entity_restrict = -1,\n                                      $onlyglobal = 0, $used = []) {\n      global $CFG_GLPI;\n\n      $rand = mt_rand();\n\n      $options               = [];\n      $options['checkright'] = true;\n      $options['name']       = 'itemtype';\n\n      $rand = Dropdown::showItemType($CFG_GLPI['directconnect_types'], $options);\n      if ($rand) {\n         $params = ['itemtype'        => '__VALUE__',\n                         'fromtype'        => $fromtype,\n                         'value'           => 0,\n                         'myname'          => $myname,\n                         'onlyglobal'      => $onlyglobal,\n                         'entity_restrict' => $entity_restrict,\n                         'used'            => $used];\n\n         if ($onlyglobal) {\n            $params['condition'] = ['is_global' => 1];\n         }\n         Ajax::updateItemOnSelectEvent(\"dropdown_itemtype$rand\", \"show_$myname$rand\",\n                                       $CFG_GLPI[\"root_doc\"].\"/ajax/dropdownConnect.php\", $params);\n\n         echo \"<br><div id='show_$myname$rand'>&nbsp;</div>\\n\";\n      }\n      return $rand;\n\n   }\n\n\n   /**\n   * Make a select box for connections\n   *\n   * @param string            $itemtype        type to connect\n   * @param string            $fromtype        from where the connection is\n   * @param string            $myname          select name\n   * @param integer|integer[] $entity_restrict Restrict to a defined entity (default = -1)\n   * @param boolean           $onlyglobal      display only global devices (used for templates) (default 0)\n   * @param integer[]         $used            Already used items ID: not to display in dropdown\n   *\n   * @return integer Random generated number used for select box ID (select box HTML is printed)\n   */\n   static function dropdownConnect($itemtype, $fromtype, $myname, $entity_restrict = -1,\n                                   $onlyglobal = 0, $used = []) {\n      global $CFG_GLPI;\n\n      $rand     = mt_rand();\n\n      $field_id = Html::cleanId(\"dropdown_\".$myname.$rand);\n      $param    = [\n         'entity_restrict' => $entity_restrict,\n         'fromtype'        => $fromtype,\n         'itemtype'        => $itemtype,\n         'onlyglobal'      => $onlyglobal,\n         'used'            => $used,\n         '_idor_token'     => Session::getNewIDORToken($itemtype, [\n            'entity_restrict' => $entity_restrict,\n         ]),\n      ];\n\n      echo Html::jsAjaxDropdown($myname, $field_id,\n                                $CFG_GLPI['root_doc'].\"/ajax/getDropdownConnect.php\",\n                                $param);\n\n      return $rand;\n   }\n\n\n   function getTabNameForItem(CommonGLPI $item, $withtemplate = 0) {\n\n      // can exists for Template\n      if ($item->can($item->getField('id'), READ)) {\n         $nb = 0;\n         switch ($item->getType()) {\n            case 'Phone' :\n            case 'Printer' :\n            case 'Peripheral' :\n            case 'Monitor' :\n               if (Computer::canView()) {\n                  if ($_SESSION['glpishow_count_on_tabs']) {\n                     $nb = self::countForItem($item);\n                  }\n                  return self::createTabEntry(_n('Connection', 'Connections', Session::getPluralNumber()),\n                                              $nb);\n               }\n               break;\n\n            case 'Computer' :\n               if (Phone::canView()\n                   || Printer::canView()\n                   || Peripheral::canView()\n                   || Monitor::canView()) {\n                  if ($_SESSION['glpishow_count_on_tabs']) {\n                     $nb = self::countForMainItem($item);\n                  }\n                  return self::createTabEntry(_n('Connection', 'Connections', Session::getPluralNumber()),\n                                              $nb);\n               }\n               break;\n         }\n      }\n      return '';\n   }\n\n\n   static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0) {\n\n      switch ($item->getType()) {\n         case 'Phone' :\n         case 'Printer' :\n         case 'Peripheral' :\n         case 'Monitor' :\n            self::showForItem($item, $withtemplate);\n            return true;\n\n         case 'Computer' :\n            self::showForComputer($item, $withtemplate);\n            return true;\n      }\n   }\n\n\n   /**\n    * Duplicate connected items to computer from an item template to its clone\n    *\n    * @deprecated 9.5\n    * @since 0.84\n    *\n    * @param integer $oldid ID of the item to clone\n    * @param integer $newid ID of the item cloned\n   **/\n   static function cloneComputer($oldid, $newid) {\n      global $DB;\n\n      Toolbox::deprecated('Use clone');\n      $iterator = $DB->request([\n         'FROM'   => self::getTable(),\n         'WHERE'  => ['computers_id' => $oldid]\n      ]);\n\n      while ($data = $iterator->next()) {\n         $conn = new Computer_Item();\n         $conn->add(['computers_id' => $newid,\n                     'itemtype'     => $data[\"itemtype\"],\n                     'items_id'     => $data[\"items_id\"]]);\n      }\n   }\n\n\n   /**\n    * Duplicate connected items to item from an item template to its clone\n    *\n    * @deprecated 9.5\n    * @since 0.83.3\n    *\n    * @param string  $itemtype type of the item to clone\n    * @param integer $oldid    ID of the item to clone\n    * @param integer $newid    ID of the item cloned\n   **/\n   static function cloneItem($itemtype, $oldid, $newid) {\n      global $DB;\n\n      Toolbox::deprecated('Use clone');\n      $iterator = $DB->request([\n         'FROM'   => self::getTable(),\n         'WHERE'  => [\n            'itemtype'  => $itemtype,\n            'items_id'  => $oldid\n         ]\n      ]);\n\n      while ($data = $iterator->next()) {\n         $conn = new self();\n         $conn->add(['computers_id' => $data[\"computers_id\"],\n                     'itemtype'     => $data[\"itemtype\"],\n                     'items_id'     => $newid]);\n      }\n   }\n\n\n   /**\n    * @since 9.1.7\n    *\n    * @param CommonDBTM $item     item linked to the computer to check\n    * @param integer[]  $entities entities to check\n    *\n    * @return boolean\n   **/\n   static function canUnrecursSpecif(CommonDBTM $item, $entities) {\n      global $DB;\n\n      // RELATION : computers -> items\n      $iterator = $DB->request([\n         'SELECT' => [\n            'itemtype',\n            new \\QueryExpression('GROUP_CONCAT(DISTINCT '.$DB->quoteName('items_id').') AS ids'),\n            'computers_id'\n         ],\n         'FROM'   => self::getTable(),\n         'WHERE'  => [\n            'itemtype'  => $item->getType(),\n            'items_id'  => $item->fields['id']\n         ],\n         'GROUP'  => 'itemtype'\n      ]);\n\n      while ($data = $iterator->next()) {\n         if (countElementsInTable(\"glpi_computers\",\n                                    ['id' => $data[\"computers_id\"],\n                                    'NOT' => ['entities_id' => $entities]]) > 0) {\n            return false;\n         }\n      }\n      return true;\n   }\n\n\n   protected static function getListForItemParams(CommonDBTM $item, $noent = false) {\n      $params = parent::getListForItemParams($item, $noent);\n      $params['WHERE'][self::getTable() . '.is_deleted'] = 0;\n      return $params;\n   }\n\n   /**\n    * Get SELECT param for getTypeItemsQueryParams\n    *\n    * @param CommonDBTM $item\n    *\n    * @return array\n    */\n   public static function getTypeItemsQueryParams_Select(CommonDBTM $item): array {\n      $table = static::getTable();\n      $select = parent::getTypeItemsQueryParams_Select($item);\n      $select[] = \"$table.is_dynamic AS {$table}_is_dynamic\";\n\n      return $select;\n   }\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2021 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access this file directly\");\n}\n\nclass Dropdown {\n\n   //Empty value displayed in a dropdown\n   const EMPTY_VALUE = '-----';\n\n   /**\n    * Print out an HTML \"<select>\" for a dropdown with preselected value\n    *\n    * @param string $itemtype  itemtype used for create dropdown\n    * @param array  $options   array of possible options:\n    *    - name                 : string / name of the select (default is depending itemtype)\n    *    - value                : integer / preselected value (default -1)\n    *    - comments             : boolean / is the comments displayed near the dropdown (default true)\n    *    - toadd                : array / array of specific values to add at the begining\n    *    - entity               : integer or array / restrict to a defined entity or array of entities\n    *                                                (default -1 : no restriction)\n    *    - entity_sons          : boolean / if entity restrict specified auto select its sons\n    *                                       only available if entity is a single value not an array\n    *                                       (default false)\n    *    - toupdate             : array / Update a specific item on select change on dropdown\n    *                                     (need value_fieldname, to_update,\n    *                                      url (see Ajax::updateItemOnSelectEvent for information)\n    *                                      and may have moreparams)\n    *    - used                 : array / Already used items ID: not to display in dropdown\n    *                                    (default empty)\n    *    - on_change            : string / value to transmit to \"onChange\"\n    *    - rand                 : integer / already computed rand value\n    *    - condition            : array / aditional SQL condition to limit display\n    *    - displaywith          : array / array of field to display with request\n    *    - emptylabel           : Empty choice's label (default self::EMPTY_VALUE)\n    *    - display_emptychoice  : Display emptychoice ? (default true)\n    *    - display              : boolean / display or get string (default true)\n    *    - width                : specific width needed (default auto adaptive)\n    *    - permit_select_parent : boolean / for tree dropdown permit to see parent items\n    *                                       not available by default (default false)\n    *    - specific_tags        : array of HTML5 tags to add the the field\n    *    - url                  : url of the ajax php code which should return the json data to show in\n    *                                       the dropdown\n    *\n    * @return boolean : false if error and random id if OK\n    *\n    * @since 9.5.0 Usage of string in condition option is removed\n   **/\n   static function show($itemtype, $options = []) {\n      global $CFG_GLPI;\n\n      if ($itemtype && !($item = getItemForItemtype($itemtype))) {\n         return false;\n      }\n\n      $table = $item->getTable();\n\n      $params['name']                 = $item->getForeignKeyField();\n      $params['value']                = (($itemtype == 'Entity') ? $_SESSION['glpiactive_entity'] : '');\n      $params['comments']             = true;\n      $params['entity']               = -1;\n      $params['entity_sons']          = false;\n      $params['toupdate']             = '';\n      $params['width']                = '';\n      $params['used']                 = [];\n      $params['toadd']                = [];\n      $params['on_change']            = '';\n      $params['condition']            = [];\n      $params['rand']                 = mt_rand();\n      $params['displaywith']          = [];\n      //Parameters about choice 0\n      //Empty choice's label\n      $params['emptylabel']           = self::EMPTY_VALUE;\n      //Display emptychoice ?\n      $params['display_emptychoice']  = ($itemtype != 'Entity');\n      $params['placeholder']          = '';\n      $params['display']              = true;\n      $params['permit_select_parent'] = false;\n      $params['addicon']              = true;\n      $params['specific_tags']        = [];\n      $params['url']                  = $CFG_GLPI['root_doc'].\"/ajax/getDropdownValue.php\";\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $params[$key] = $val;\n         }\n      }\n      $output       = '';\n      $name         = $params['emptylabel'];\n      $comment      = \"\";\n\n      // Check default value for dropdown : need to be a numeric (or null)\n      if ($params['value'] !== null\n          && ((strlen($params['value']) == 0) || !is_numeric($params['value']) && $params['value'] != 'mygroups')) {\n         $params['value'] = 0;\n      }\n\n      if (isset($params['toadd'][$params['value']])) {\n         $name = $params['toadd'][$params['value']];\n      } else if (($params['value'] > 0)\n                 || (($itemtype == \"Entity\")\n                     && ($params['value'] >= 0))) {\n         $tmpname = self::getDropdownName($table, $params['value'], 1);\n\n         if ($tmpname[\"name\"] != \"&nbsp;\") {\n            $name    = $tmpname[\"name\"];\n            $comment = $tmpname[\"comment\"];\n         }\n      }\n\n      // Manage entity_sons\n      if (!($params['entity'] < 0)\n          && $params['entity_sons']) {\n         if (is_array($params['entity'])) {\n            // translation not needed - only for debug\n            $output .= \"entity_sons options is not available with entity option as array\";\n         } else {\n            $params['entity'] = getSonsOf('glpi_entities', $params['entity']);\n         }\n      }\n\n      $field_id = Html::cleanId(\"dropdown_\".$params['name'].$params['rand']);\n\n      // Manage condition\n      if (!empty($params['condition'])) {\n         // Put condition in session and replace it by its key\n         // This is made to prevent passing to many parameters when calling the ajax script\n         $params['condition'] = static::addNewCondition($params['condition']);\n      }\n\n      if (!$item instanceof CommonTreeDropdown) {\n         $name = Toolbox::unclean_cross_side_scripting_deep($name);\n      }\n      $p = ['value'                => $params['value'],\n            'valuename'            => $name,\n            'width'                => $params['width'],\n            'itemtype'             => $itemtype,\n            'display_emptychoice'  => $params['display_emptychoice'],\n            'placeholder'          => $params['placeholder'],\n            'displaywith'          => $params['displaywith'],\n            'emptylabel'           => $params['emptylabel'],\n            'condition'            => $params['condition'],\n            'used'                 => $params['used'],\n            'toadd'                => $params['toadd'],\n            'entity_restrict'      => ($entity_restrict = (is_array($params['entity']) ? json_encode(array_values($params['entity'])) : $params['entity'])),\n            'on_change'            => $params['on_change'],\n            'permit_select_parent' => $params['permit_select_parent'],\n            'specific_tags'        => $params['specific_tags'],\n            '_idor_token'          => Session::getNewIDORToken($itemtype, [\n               'entity_restrict' => $entity_restrict,\n            ]),\n      ];\n\n      $output = \"<span class='no-wrap'>\";\n      $output.= Html::jsAjaxDropdown($params['name'], $field_id,\n                                     $params['url'],\n                                     $p);\n      // Display comment\n      if ($params['comments']) {\n         $comment_id      = Html::cleanId(\"comment_\".$params['name'].$params['rand']);\n         $link_id         = Html::cleanId(\"comment_link_\".$params['name'].$params['rand']);\n         $kblink_id       = Html::cleanId(\"kb_link_\".$params['name'].$params['rand']);\n         $options_tooltip = ['contentid' => $comment_id,\n                                  'linkid'    => $link_id,\n                                  'display'   => false];\n\n         if ($item->canView()) {\n            if ($params['value']\n                 && $item->getFromDB($params['value'])\n                 && $item->canViewItem()) {\n               $options_tooltip['link']       = $item->getLinkURL();\n            } else {\n               $options_tooltip['link']       = $item->getSearchURL();\n            }\n         }\n\n         if (empty($comment)) {\n            $comment = Toolbox::ucfirst(\n               sprintf(\n                  __('Show %1$s'),\n                  $item::getTypeName(Session::getPluralNumber())\n               )\n            );\n         }\n         $output .= \"&nbsp;\".Html::showToolTip($comment, $options_tooltip);\n\n         if (($item instanceof CommonDropdown)\n             && $item->canCreate()\n             && !isset($_REQUEST['_in_modal'])\n             && $params['addicon']) {\n\n               $output .= \"<span class='fa fa-plus-circle pointer' title=\\\"\".__s('Add').\"\\\"\n                            onClick=\\\"\".Html::jsGetElementbyID('add_'.$field_id).\".dialog('open');\\\"\n                           ><span class='sr-only'>\" . __s('Add') . \"</span></span>\";\n               $output .= Ajax::createIframeModalWindow('add_'.$field_id,\n                                                        $item->getFormURL(),\n                                                        ['display' => false]);\n         }\n\n         // Display specific Links\n         if ($itemtype == \"Supplier\") {\n            if ($item->getFromDB($params['value'])) {\n               $output .= $item->getLinks();\n            }\n         }\n\n         if ($itemtype == 'Location') {\n            $output .= \"<span class='fa fa-globe-americas pointer' title='\".__s('Display on map').\"' onclick='showMapForLocation(this)' data-fid='$field_id'></span>\";\n         }\n\n         $paramscomment = [\n            'value'       => '__VALUE__',\n            'itemtype'    => $itemtype,\n            '_idor_token' => Session::getNewIDORToken($itemtype)\n         ];\n         if ($item->isField('knowbaseitemcategories_id')\n             && Session::haveRight('knowbase', READ)) {\n\n            if (method_exists($item, 'getLinks')) {\n               $output .= \"<span id='$kblink_id'>\";\n               $output .= '&nbsp;'.$item->getLinks();\n               $output .= \"</span>\";\n               $paramscomment['withlink'] = $kblink_id;\n               $output .= Ajax::updateItemOnSelectEvent($field_id, $kblink_id,\n                                                        $CFG_GLPI[\"root_doc\"].\"/ajax/kblink.php\",\n                                                        $paramscomment, false);\n            }\n         }\n\n         if ($item->canView()) {\n            $paramscomment['withlink'] = $link_id;\n         }\n\n         $output .= Ajax::updateItemOnSelectEvent($field_id, $comment_id,\n                                                  $CFG_GLPI[\"root_doc\"].\"/ajax/comments.php\",\n                                                  $paramscomment, false);\n      }\n      $output .= Ajax::commonDropdownUpdateItem($params, false);\n      $output .= \"</span>\";\n      if ($params['display']) {\n         echo $output;\n         return $params['rand'];\n      }\n      return $output;\n   }\n\n\n   /**\n    * Add new condition\n    *\n    * @todo should not use session to pass query parameters...\n    *\n    * @param array $condition Condition to add\n    *\n    * @return string\n    */\n   static function addNewCondition(array $condition) {\n      $sha1 = sha1(serialize($condition));\n      $_SESSION['glpicondition'][$sha1] = $condition;\n      return $sha1;\n   }\n\n   /**\n    * Get the value of a dropdown\n    *\n    * Returns the value of the dropdown from $table with ID $id.\n    *\n    * @param string  $table        the dropdown table from witch we want values on the select\n    * @param integer $id           id of the element to get\n    * @param boolean $withcomment  give array with name and comment (default 0)\n    * @param boolean $translate    (true by default)\n    * @param boolean $tooltip      (true by default) returns a tooltip, else returns only 'comment'\n    *\n    * @return string the value of the dropdown or &nbsp; if not exists\n   **/\n   static function getDropdownName($table, $id, $withcomment = 0, $translate = true, $tooltip = true) {\n      global $DB;\n\n      $dft_retval = \"&nbsp;\";\n\n      $item = getItemForItemtype(getItemTypeForTable($table));\n\n      if (!is_object($item)) {\n         return $dft_retval;\n      }\n\n      if ($item instanceof CommonTreeDropdown) {\n         return getTreeValueCompleteName($table, $id, $withcomment, $translate, $tooltip);\n      }\n\n      $name    = \"\";\n      $comment = \"\";\n\n      if ($id) {\n         $SELECTNAME    = new \\QueryExpression(\"'' AS \". $DB->quoteName('transname'));\n         $SELECTCOMMENT = new \\QueryExpression(\"'' AS \" . $DB->quoteName('transcomment'));\n         $JOIN          = [];\n         $JOINS         = [];\n         if ($translate) {\n            if (Session::haveTranslations(getItemTypeForTable($table), 'name')) {\n               $SELECTNAME = 'namet.value AS transname';\n               $JOINS['glpi_dropdowntranslations AS namet'] = [\n                  'ON' => [\n                     'namet'  => 'items_id',\n                     $table   => 'id', [\n                        'AND' => [\n                           'namet.itemtype'  => getItemTypeForTable($table),\n                           'namet.language'  => $_SESSION['glpilanguage'],\n                           'namet.field'     => 'name'\n                        ]\n                     ]\n                  ]\n               ];\n            }\n            if (Session::haveTranslations(getItemTypeForTable($table), 'comment')) {\n               $SELECTCOMMENT = 'namec.value AS transcomment';\n               $JOINS['glpi_dropdowntranslations AS namec'] = [\n                  'ON' => [\n                     'namec'  => 'items_id',\n                     $table   => 'id', [\n                        'AND' => [\n                           'namec.itemtype'  => getItemTypeForTable($table),\n                           'namec.language'  => $_SESSION['glpilanguage'],\n                           'namec.field'     => 'comment'\n                        ]\n                     ]\n                  ]\n               ];\n            }\n\n            if (count($JOINS)) {\n               $JOIN = ['LEFT JOIN' => $JOINS];\n            }\n         }\n\n         $criteria = [\n            'SELECT' => [\n               \"$table.*\",\n               $SELECTNAME,\n               $SELECTCOMMENT\n            ],\n            'FROM'   => $table,\n            'WHERE'  => [\"$table.id\" => $id]\n         ] + $JOIN;\n         $iterator = $DB->request($criteria);\n\n         /// TODO review comment management...\n         /// TODO getDropdownName need to return only name\n         /// When needed to use comment use class instead : getComments function\n         /// GetName of class already give Name !!\n         /// TODO CommonDBTM : review getComments to be recursive and add informations from class hierarchy\n         /// getUserName have the same system : clean it too\n         /// Need to study the problem\n         if (count($iterator)) {\n            $data = $iterator->next();\n            if ($translate && !empty($data['transname'])) {\n               $name = $data['transname'];\n            } else {\n               $name = $data[$item->getNameField()];\n            }\n            if (isset($data[\"comment\"])) {\n               if ($translate && !empty($data['transcomment'])) {\n                  $comment = $data['transcomment'];\n               } else {\n                  $comment = $data[\"comment\"];\n               }\n            }\n\n            switch ($table) {\n               case \"glpi_computers\" :\n                  if (empty($name)) {\n                     $name = \"($id)\";\n                  }\n                  break;\n\n               case \"glpi_contacts\" :\n                  //TRANS: %1$s is the name, %2$s is the firstname\n                  $name = sprintf(__('%1$s %2$s'), $name, $data[\"firstname\"]);\n                  if ($tooltip) {\n                     if (!empty($data[\"phone\"])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'), \"<span class='b'>\".Phone::getTypeName(1),\n                                                   \"</span>\".$data['phone']);\n                     }\n                     if (!empty($data[\"phone2\"])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'),\n                                                   \"<span class='b'>\".__('Phone 2'),\n                                                   \"</span>\".$data['phone2']);\n                     }\n                     if (!empty($data[\"mobile\"])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'),\n                                                   \"<span class='b'>\".__('Mobile phone'),\n                                                   \"</span>\".$data['mobile']);\n                     }\n                     if (!empty($data[\"fax\"])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'), \"<span class='b'>\".__('Fax'),\n                                                   \"</span>\".$data['fax']);\n                     }\n                     if (!empty($data[\"email\"])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'), \"<span class='b'>\"._n('Email', 'Emails', 1),\n                                                   \"</span>\".$data['email']);\n                     }\n                  }\n                  break;\n\n               case \"glpi_suppliers\" :\n                  if ($tooltip) {\n                     if (!empty($data[\"phonenumber\"])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'), \"<span class='b'>\".Phone::getTypeName(1),\n                                                   \"</span>\".$data['phonenumber']);\n                     }\n                     if (!empty($data[\"fax\"])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'), \"<span class='b'>\".__('Fax'),\n                                                   \"</span>\".$data['fax']);\n                     }\n                     if (!empty($data[\"email\"])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'), \"<span class='b'>\"._n('Email', 'Emails', 1),\n                                                   \"</span>\".$data['email']);\n                     }\n                  }\n                  break;\n\n               case \"glpi_netpoints\" :\n                  $name = sprintf(__('%1$s (%2$s)'), $name,\n                                    self::getDropdownName(\"glpi_locations\",\n                                                         $data[\"locations_id\"], false, $translate));\n                  break;\n\n               case \"glpi_budgets\" :\n                  if ($tooltip) {\n                     if (!empty($data['locations_id'])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'),\n                                                   \"<span class='b'>\".Location::getTypeName(1).\"</span>\",\n                                                   self::getDropdownName(\"glpi_locations\",\n                                                                           $data[\"locations_id\"],\n                                                                           false, $translate));\n\n                     }\n                     if (!empty($data['budgettypes_id'])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'), \"<span class='b'>\"._n('Type', 'Types', 1).\"</span>\",\n                                       self::getDropdownName(\"glpi_budgettypes\",\n                                                            $data[\"budgettypes_id\"], false, $translate));\n\n                     }\n                     if (!empty($data['begin_date'])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'),\n                                                   \"<span class='b'>\".__('Start date').\"</span>\",\n                                                   Html::convDateTime($data[\"begin_date\"]));\n\n                     }\n                     if (!empty($data['end_date'])) {\n                        $comment .= \"<br>\".sprintf(__('%1$s: %2$s'),\n                                                   \"<span class='b'>\".__('End date').\"</span>\",\n                                                   Html::convDateTime($data[\"end_date\"]));\n                     }\n                  }\n            }\n         }\n      }\n\n      if (empty($name)) {\n         $name = $dft_retval;\n      }\n\n      if ($withcomment) {\n         return [\n            'name'      => $name,\n            'comment'   => $comment\n         ];\n      }\n\n      return $name;\n   }\n\n\n   /**\n    * Get values of a dropdown for a list of item\n    *\n    * @param string    $table  the dropdown table from witch we want values on the select\n    * @param integer[] $ids    array containing the ids to get\n    *\n    * @return array containing the value of the dropdown or &nbsp; if not exists\n   **/\n   static function getDropdownArrayNames($table, $ids) {\n      global $DB;\n\n      $tabs = [];\n\n      if (count($ids)) {\n         $itemtype = getItemTypeForTable($table);\n         if ($item = getItemForItemtype($itemtype)) {\n            $field    = 'name';\n            if ($item instanceof CommonTreeDropdown) {\n               $field = 'completename';\n            }\n\n            $iterator = $DB->request([\n               'SELECT' => ['id', $field],\n               'FROM'   => $table,\n               'WHERE'  => ['id' => $ids]\n            ]);\n\n            while ($data = $iterator->next()) {\n               $tabs[$data['id']] = $data[$field];\n            }\n         }\n      }\n      return $tabs;\n   }\n\n\n   /**\n    * Make a select box for device type\n    *\n    * @param string   $name     name of the select box\n    * @param string[] $types    array of types to display\n    * @param array    $options  Parameters which could be used in options array :\n    *    - value               : integer / preselected value (default '')\n    *    - used                : array / Already used items ID: not to display in dropdown (default empty)\n    *    - emptylabel          : Empty choice's label (default self::EMPTY_VALUE)\n    *    - display             : boolean if false get string\n    *    - width               : specific width needed (default not set)\n    *    - emptylabel          : empty label if empty displayed (default self::EMPTY_VALUE)\n    *    - display_emptychoice : display empty choice (default false)\n    *\n    * @return integer|string\n    *    integer if option display=true (random part of elements id)\n    *    string if option display=false (HTML code)\n   **/\n   static function showItemTypes($name, $types = [], $options = []) {\n      $params['value']               = '';\n      $params['used']                = [];\n      $params['emptylabel']          = self::EMPTY_VALUE;\n      $params['display']             = true;\n      $params['width']               = '80%';\n      $params['display_emptychoice'] = true;\n      $params['rand']         = mt_rand();\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $params[$key] = $val;\n         }\n      }\n\n      $values = [];\n      if (count($types)) {\n         foreach ($types as $type) {\n            if ($item = getItemForItemtype($type)) {\n               $values[$type] = $item->getTypeName(1);\n            }\n         }\n      }\n      asort($values);\n      return self::showFromArray($name, $values,\n                                 $params);\n   }\n\n\n   /**\n    * Make a select box for device type\n    *\n    * @param string $name          name of the select box\n    * @param string $itemtype_ref  itemtype reference where to search in itemtype field\n    * @param array  $options       array of possible options:\n    *        - may be value (default value) / field (used field to search itemtype)\n    *\n    * @return integer|string\n    *    integer if option display=true (random part of elements id)\n    *    string if option display=false (HTML code)\n   **/\n   static function dropdownUsedItemTypes($name, $itemtype_ref, $options = []) {\n      global $DB;\n\n      $p['value'] = 0;\n      $p['field'] = 'itemtype';\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $p[$key] = $val;\n         }\n      }\n\n      $iterator = $DB->request([\n         'SELECT'          => $p['field'],\n         'DISTINCT'        => true,\n         'FROM'            => getTableForItemType($itemtype_ref)\n      ]);\n\n      $tabs = [];\n      while ($data = $iterator->next()) {\n         $tabs[$data[$p['field']]] = $data[$p['field']];\n      }\n      return self::showItemTypes($name, $tabs, ['value' => $p['value']]);\n   }\n\n\n   /**\n    * Make a select box for icons\n    *\n    * @param string  $myname      the name of the HTML select\n    * @param mixed   $value       the preselected value we want\n    * @param string  $store_path  path where icons are stored\n    * @param boolean $display     display of get string ? (true by default)\n    *\n    *\n    * @return void|string\n    *    void if param display=true\n    *    string if param display=false (HTML code)\n   **/\n   static function dropdownIcons($myname, $value, $store_path, $display = true) {\n\n      $output = '';\n      if (is_dir($store_path)) {\n         if ($dh = opendir($store_path)) {\n            $files = [];\n\n            while (($file = readdir($dh)) !== false) {\n               $files[] = $file;\n            }\n\n            closedir($dh);\n            sort($files);\n\n            foreach ($files as $file) {\n               if (preg_match(\"/\\.png$/i\", $file)) {\n                  $values[$file] = $file;\n               }\n            }\n            Dropdown::showFromArray($myname, $values,\n                                    ['value'               => $value,\n                                          'display_emptychoice' => true]);\n\n         } else {\n            //TRANS: %s is the store path\n            printf(__('Error reading directory %s'), $store_path);\n         }\n\n      } else {\n         //TRANS: %s is the store path\n         printf(__('Error: %s is not a directory'), $store_path);\n      }\n      if ($display) {\n         echo $output;\n      } else {\n         return $output;\n      }\n   }\n\n\n   /**\n    * Dropdown for GMT selection\n    *\n    * @param string $name   select name\n    * @param mixed  $value  default value (default '')\n   **/\n   static function showGMT($name, $value = '') {\n\n      $elements = [-12, -11, -10, -9, -8, -7, -6, -5, -4, -3.5, -3, -2, -1, 0,\n                        '+1', '+2', '+3', '+3.5', '+4', '+4.5', '+5', '+5.5', '+6', '+6.5', '+7',\n                        '+8', '+9', '+9.5', '+10', '+11', '+12', '+13'];\n\n      $values = [];\n      foreach ($elements as $element) {\n         if ($element != 0) {\n            $values[$element*HOUR_TIMESTAMP] = sprintf(__('%1$s %2$s'), __('GMT'),\n                                                       sprintf(_n('%s hour', '%s hours', $element),\n                                                               $element));\n         } else {\n            $display_value                   = __('GMT');\n            $values[$element*HOUR_TIMESTAMP] = __('GMT');\n         }\n      }\n      Dropdown::showFromArray($name, $values, ['value' => $value]);\n   }\n\n\n   /**\n    * Make a select box for a boolean choice (Yes/No) or display a checkbox. Add a\n    * 'use_checkbox' = true to the $params array to display a checkbox instead a select box\n    *\n    * @param string  $name         select name\n    * @param mixed   $value        preselected value. (default 0)\n    * @param integer $restrict_to  allows to display only yes or no in the dropdown (default -1)\n    * @param array   $params       Array of optional options (passed to showFromArray)\n    *\n    * @return integer|string\n    *    integer if option display=true (random part of elements id)\n    *    string if option display=false (HTML code)\n   **/\n   static function showYesNo($name, $value = 0, $restrict_to = -1, $params = []) {\n\n      if (!array_key_exists ('use_checkbox', $params)) {\n         // TODO: switch to true when Html::showCheckbox() is validated\n         $params['use_checkbox'] = false;\n      }\n      if ($params['use_checkbox']) {\n\n         if (!empty($params['rand'])) {\n            $rand = $params['rand'];\n         } else {\n            $rand = mt_rand();\n         }\n\n         $options = ['name' => $name,\n                          'id'   => Html::cleanId(\"dropdown_\".$name.$rand)];\n\n         switch ($restrict_to) {\n            case 0 :\n               $options['checked']  = false;\n               $options['readonly'] = true;\n               break;\n\n            case 1 :\n               $options['checked']  = true;\n               $options['readonly'] = true;\n               break;\n\n            default :\n               $options['checked']  = ($value ? 1 : 0);\n               $options['readonly'] = false;\n               break;\n         }\n\n         $output = Html::getCheckbox($options);\n         if (!isset($params['display']) || $params['display'] == 'true') {\n            echo $output;\n            return $rand;\n         } else {\n            return $output;\n         }\n      }\n\n      if ($restrict_to != 0) {\n         $options[0] = __('No');\n      }\n\n      if ($restrict_to != 1) {\n         $options[1] = __('Yes');\n      }\n\n      $params['value'] = $value;\n      $params['width'] = \"65px\";\n      return self::showFromArray($name, $options, $params);\n   }\n\n\n   /**\n    * Get Yes No string\n    *\n    * @param mixed $value Yes No value\n    *\n    * @return string\n   **/\n   static function getYesNo($value) {\n\n      if ($value) {\n         return __('Yes');\n      }\n      return __('No');\n   }\n\n\n   /**\n    * Get the Device list name the user is allowed to edit\n    *\n    * @return array (group of dropdown) of array (itemtype => localized name)\n   **/\n   static function getDeviceItemTypes() {\n      static $optgroup = null;\n\n      if (!Session::haveRight('device', READ)) {\n         return [];\n      }\n\n      if (is_null($optgroup)) {\n         $devices = [];\n         foreach (CommonDevice::getDeviceTypes() as $device_type) {\n            $devices[$device_type] = $device_type::getTypeName(Session::getPluralNumber());\n         }\n         asort($devices);\n         $optgroup = [_n('Component', 'Components', Session::getPluralNumber()) => $devices];\n      }\n      return $optgroup;\n   }\n\n\n   /**\n    * Get the dropdown list name the user is allowed to edit\n    *\n    * @return array (group of dropdown) of array (itemtype => localized name)\n   **/\n   static function getStandardDropdownItemTypes() {\n      static $optgroup = null;\n\n      if (is_null($optgroup)) {\n         $optgroup = [\n             __('Common') => [\n                 'Location' => null,\n                 'State' => null,\n                 'Manufacturer' => null,\n                 'Blacklist' => null,\n                 'BlacklistedMailContent' => null\n             ],\n\n             __('Assistance') => [\n                 'ITILCategory' => null,\n                 'TaskCategory' => null,\n                 'TaskTemplate' => null,\n                 'SolutionType' => null,\n                 'SolutionTemplate' => null,\n                 'RequestType' => null,\n                 'ITILFollowupTemplate' => null,\n                 'ProjectState' => null,\n                 'ProjectType' => null,\n                 'ProjectTaskType' => null,\n                 'ProjectTaskTemplate' => null,\n                 'PlanningExternalEventTemplate' => null,\n                 'PlanningEventCategory' => null,\n             ],\n\n             _n('Type', 'Types', Session::getPluralNumber()) => [\n                 'ComputerType' => null,\n                 'NetworkEquipmentType' => null,\n                 'PrinterType' => null,\n                 'MonitorType' => null,\n                 'PeripheralType' => null,\n                 'PhoneType' => null,\n                 'SoftwareLicenseType' => null,\n                 'CartridgeItemType' => null,\n                 'ConsumableItemType' => null,\n                 'ContractType' => null,\n                 'ContactType' => null,\n                 'DeviceGenericType' => null,\n                 'DeviceSensorType' => null,\n                 'DeviceMemoryType' => null,\n                 'SupplierType' => null,\n                 'InterfaceType' => null,\n                 'DeviceCaseType' => null,\n                 'PhonePowerSupply' => null,\n                 'Filesystem' => null,\n                 'CertificateType' => null,\n                 'BudgetType' => null,\n                 'DeviceSimcardType' => null,\n                 'LineType' => null,\n                 'RackType' => null,\n                 'PDUType' => null,\n                 'PassiveDCEquipmentType' => null,\n                 'ClusterType' => null,\n             ],\n\n             _n('Model', 'Models', 1) => [\n                 'ComputerModel' => null,\n                 'NetworkEquipmentModel' => null,\n                 'PrinterModel' => null,\n                 'MonitorModel' => null,\n                 'PeripheralModel' => null,\n                 'PhoneModel' => null,\n\n                  // Devices models :\n                  'DeviceCaseModel' => null,\n                  'DeviceControlModel' => null,\n                  'DeviceDriveModel' => null,\n                  'DeviceGenericModel' => null,\n                  'DeviceGraphicCardModel' => null,\n                  'DeviceHardDriveModel' => null,\n                  'DeviceMemoryModel' => null,\n                  'DeviceMotherBoardModel' => null,\n                  'DeviceNetworkCardModel' => null,\n                  'DevicePciModel' => null,\n                  'DevicePowerSupplyModel' => null,\n                  'DeviceProcessorModel' => null,\n                  'DeviceSoundCardModel' => null,\n                  'DeviceSensorModel' => null,\n                  'RackModel' => null,\n                  'EnclosureModel' => null,\n                  'PDUModel' => null,\n                  'PassiveDCEquipmentModel' => null,\n             ],\n\n             _n('Virtual machine', 'Virtual machines', Session::getPluralNumber()) => [\n                 'VirtualMachineType' => null,\n                 'VirtualMachineSystem' => null,\n                 'VirtualMachineState' => null\n             ],\n\n             __('Management') => [\n                 'DocumentCategory' => null,\n                 'DocumentType' => null,\n                 'BusinessCriticity' => null\n             ],\n\n             __('Tools') => [\n                 'KnowbaseItemCategory' => null\n             ],\n\n             _n('Calendar', 'Calendars', 1) => [\n                 'Calendar' => null,\n                 'Holiday' => null\n             ],\n\n             OperatingSystem::getTypeName(Session::getPluralNumber()) => [\n                 'OperatingSystem' => null,\n                 'OperatingSystemVersion' => null,\n                 'OperatingSystemServicePack' => null,\n                 'OperatingSystemArchitecture' => null,\n                 'OperatingSystemEdition' => null,\n                 'OperatingSystemKernel' => null,\n                 'OperatingSystemKernelVersion' => null,\n                 'AutoUpdateSystem' => null\n             ],\n\n             __('Networking') => [\n                 'NetworkInterface' => null,\n                 'Netpoint' => null,\n                 'Network' => null,\n                 'Vlan' => null,\n                 'LineOperator' => null,\n                 'DomainType' => null,\n                 'DomainRelation' => null,\n                 'DomainRecordType' => null\n             ],\n\n             __('Internet') => [\n                 'IPNetwork' => null,\n                 'FQDN' => null,\n                 'WifiNetwork' => null,\n                 'NetworkName' => null\n             ],\n\n             _n('Software', 'Software', 1) => [\n                'SoftwareCategory' => null\n             ],\n\n             User::getTypeName(1) => [\n                 'UserTitle' => null,\n                 'UserCategory' => null\n             ],\n\n             __('Authorizations assignment rules') => [\n                'RuleRightParameter' => null\n             ],\n\n             __('Fields unicity') => [\n                'Fieldblacklist' => null\n             ],\n\n             __('External authentications') => [\n                'SsoVariable' => null\n             ],\n             __('Power management') => [\n               'Plug' => null\n             ],\n             __('Appliances') => [\n               'ApplianceType' => null,\n               'ApplianceEnvironment' => null\n             ]\n\n         ]; //end $opt\n\n         $plugdrop = Plugin::getDropdowns();\n\n         if (count($plugdrop)) {\n            $optgroup = array_merge($optgroup, $plugdrop);\n         }\n\n         foreach ($optgroup as $label => &$dp) {\n            foreach ($dp as $key => &$val) {\n               if ($tmp = getItemForItemtype($key)) {\n                  if (!$tmp->canView()) {\n                     unset($optgroup[$label][$key]);\n                  } else if ($val === null) {\n                     $val = $key::getTypeName(Session::getPluralNumber());\n                  }\n               } else {\n                  unset($optgroup[$label][$key]);\n               }\n            }\n\n            if (count($optgroup[$label]) == 0) {\n               unset($optgroup[$label]);\n            }\n         }\n      }\n      return $optgroup;\n   }\n\n\n   /**\n    * Display a menu to select a itemtype which open the search form\n    *\n    * @param $title     string   title to display\n    * @param $optgroup  array    (group of dropdown) of array (itemtype => localized name)\n    * @param $value     string   URL of selected current value (default '')\n   **/\n   static function showItemTypeMenu($title, $optgroup, $value = '') {\n\n      echo \"<table class='tab_cadre' width='50%'>\";\n      echo \"<tr class='tab_bg_1'><td class='b'>&nbsp;\".$title.\"&nbsp; \";\n      $selected = '';\n\n      foreach ($optgroup as $label => $dp) {\n         foreach ($dp as $key => $val) {\n            $search = $key::getSearchURL();\n\n            if (basename($search) == basename($value)) {\n               $selected = $search;\n            }\n            $values[$label][$search] = $val;\n         }\n      }\n      Dropdown::showFromArray('dpmenu', $values,\n                              ['on_change'\n                                       => \"var _value = this.options[this.selectedIndex].value; if (_value != 0) {window.location.href=_value;}\",\n                                    'value'               => $selected,\n                                    'display_emptychoice' => true]);\n\n      echo \"</td></tr>\";\n      echo \"</table><br>\";\n   }\n\n\n   /**\n    * Display a list to select a itemtype with link to search form\n    *\n    * @param $optgroup array (group of dropdown) of array (itemtype => localized name)\n    */\n   static function showItemTypeList($optgroup) {\n\n      echo \"<div id='list_nav'>\";\n      $nb = 0;\n      foreach ($optgroup as $label => $dp) {\n         $nb += count($dp);\n      }\n      $step = ($nb > 15 ? ($nb/3) : $nb);\n      echo \"<table class='tab_glpi'><tr class='top'><td width='33%' class='center'>\";\n      echo \"<table class='tab_cadre'>\";\n      $i = 1;\n\n      foreach ($optgroup as $label => $dp) {\n         echo \"<tr><th>$label</th></tr>\\n\";\n\n         foreach ($dp as $key => $val) {\n            $class=\"class='tab_bg_4'\";\n            if (($itemtype = getItemForItemtype($key))\n                && $itemtype->isEntityAssign()) {\n               $class=\"class='tab_bg_2'\";\n            }\n            echo \"<tr $class><td><a href='\".$key::getSearchURL().\"'>\";\n            echo \"$val</a></td></tr>\\n\";\n            $i++;\n         }\n\n         if (($i >= $step) && ($i < $nb)) {\n            echo \"</table></td><td width='25'>&nbsp;</td><td><table class='tab_cadre'>\";\n            $step += $step;\n         }\n      }\n      echo \"</table></td></tr></table></div>\";\n   }\n\n\n   /**\n    * Dropdown available languages\n    *\n    * @param string $myname   select name\n    * @param array  $options  array of additionnal options:\n    *    - display_emptychoice : allow selection of no language\n    *    - emptylabel          : specific string to empty label if display_emptychoice is true\n   **/\n   static function showLanguages($myname, $options = []) {\n      $values = [];\n      if (isset($options['display_emptychoice']) && ($options['display_emptychoice'])) {\n         if (isset($options['emptylabel'])) {\n            $values[''] = $options['emptylabel'];\n         } else {\n            $values[''] = self::EMPTY_VALUE;\n         }\n         unset($options['display_emptychoice']);\n      }\n\n      $values = array_merge($values, self::getLanguages());\n      return self::showFromArray($myname, $values, $options);\n   }\n\n   /**\n    * Get available languages\n    *\n    * @since 9.5.0\n    *\n    * @return array\n    */\n   public static function getLanguages() {\n      global $CFG_GLPI;\n\n      $languages = [];\n      foreach ($CFG_GLPI[\"languages\"] as $key => $val) {\n         if (isset($val[1]) && is_file(GLPI_ROOT .\"/locales/\".$val[1])) {\n            $languages[$key] = $val[0];\n         }\n      }\n\n      return $languages;\n   }\n\n\n   /**\n    * @since 0.84\n    *\n    * @param $value\n   **/\n   static function getLanguageName($value) {\n      global $CFG_GLPI;\n\n      if (isset($CFG_GLPI[\"languages\"][$value][0])) {\n         return $CFG_GLPI[\"languages\"][$value][0];\n      }\n      return $value;\n   }\n\n\n   /**\n    * Print a select with hours\n    *\n    * Print a select named $name with hours options and selected value $value\n    *\n    *@param $name             string   HTML select name\n    *@param $options array of options :\n    *     - value              default value (default '')\n    *     - limit_planning     limit planning to the configuration range (default false)\n    *     - display   boolean  if false get string\n    *     - width              specific width needed (default auto adaptive)\n    *     - step               step time (defaut config GLPI)\n    *\n    * @since 0.85 update prototype\n    *\n    * @return integer|string\n    *    integer if option display=true (random part of elements id)\n    *    string if option display=false (HTML code)\n    **/\n   static function showHours($name, $options = []) {\n      global $CFG_GLPI;\n\n      $p['value']          = '';\n      $p['limit_planning'] = false;\n      $p['display']        = true;\n      $p['width']          = '';\n      $p['step']           = $CFG_GLPI[\"time_step\"];\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $p[$key] = $val;\n         }\n      }\n\n      $begin = 0;\n      $end   = 24;\n      // Check if the $step is Ok for the $value field\n      $split = explode(\":\", $p['value']);\n\n      // Valid value XX:YY ou XX:YY:ZZ\n      if ((count($split) == 2) || (count($split) == 3)) {\n         $min = $split[1];\n\n         // Problem\n         if (($min%$p['step']) != 0) {\n            // set minimum step\n            $p['step'] = 5;\n         }\n      }\n\n      if ($p['limit_planning']) {\n         $plan_begin = explode(\":\", $CFG_GLPI[\"planning_begin\"]);\n         $plan_end   = explode(\":\", $CFG_GLPI[\"planning_end\"]);\n         $begin      = (int) $plan_begin[0];\n         $end        = (int) $plan_end[0];\n      }\n\n      $values   = [];\n      $selected = '';\n\n      for ($i=$begin; $i<$end; $i++) {\n         if ($i < 10) {\n            $tmp = \"0\".$i;\n         } else {\n            $tmp = $i;\n         }\n\n         for ($j=0; $j<60; $j+=$p['step']) {\n            if ($j < 10) {\n               $val = $tmp.\":0$j\";\n            } else {\n               $val = $tmp.\":$j\";\n            }\n            $values[$val] = $val;\n            if (($p['value'] == $val.\":00\") || ($p['value'] == $val)) {\n               $selected = $val;\n            }\n         }\n      }\n      // Last item\n      $val = $end.\":00\";\n      $values[$val] = $val;\n      if (($p['value'] == $val.\":00\") || ($p['value'] == $val)) {\n         $selected = $val;\n      }\n      $p['value'] = $selected;\n      return Dropdown::showFromArray($name, $values, $p);\n   }\n\n\n   /**\n    * show a dropdown to selec a type\n    *\n    * @since 0.83\n    *\n    * @param array|string $types    Types used (default \"state_types\") (default '')\n    * @param array        $options  Array of optional options\n    *        name, value, rand, emptylabel, display_emptychoice, on_change, plural, checkright\n    *       - toupdate            : array / Update a specific item on select change on dropdown\n    *                                    (need value_fieldname, to_update,\n    *                                     url (see Ajax::updateItemOnSelectEvent for information)\n    *                                     and may have moreparams)\n    *\n    * @return integer rand for select id\n   **/\n   static function showItemType($types = '', $options = []) {\n      global $CFG_GLPI;\n\n      $params['name']                = 'itemtype';\n      $params['value']               = '';\n      $params['rand']                = mt_rand();\n      $params['on_change']           = '';\n      $params['plural']              = false;\n      //Parameters about choice 0\n      //Empty choice's label\n      $params['emptylabel']          = self::EMPTY_VALUE;\n      //Display emptychoice ?\n      $params['display_emptychoice'] = true;\n      $params['checkright']          = false;\n      $params['toupdate']            = '';\n      $params['display']             = true;\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $params[$key] = $val;\n         }\n      }\n\n      if (!is_array($types)) {\n         $types = $CFG_GLPI[\"state_types\"];\n      }\n      $options = [];\n\n      foreach ($types as $type) {\n         if ($item = getItemForItemtype($type)) {\n            if ($params['checkright'] && !$item->canView()) {\n               continue;\n            }\n            $options[$type] = $item->getTypeName($params['plural'] ? 2 : 1);\n         }\n      }\n      asort($options);\n\n      if (count($options)) {\n         return Dropdown::showFromArray($params['name'], $options, [\n            'value'               => $params['value'],\n            'on_change'           => $params['on_change'],\n            'toupdate'            => $params['toupdate'],\n            'display_emptychoice' => $params['display_emptychoice'],\n            'emptylabel'          => $params['emptylabel'],\n            'display'             => $params['display'],\n            'rand'                => $params['rand'],\n         ]);\n      }\n      return 0;\n   }\n\n\n   /**\n    * Make a select box for all items\n    *\n    * @since 0.85\n    *\n    * @param $options array:\n    *   - itemtype_name        : the name of the field containing the itemtype (default 'itemtype')\n    *   - items_id_name        : the name of the field containing the id of the selected item\n    *                            (default 'items_id')\n    *   - itemtypes            : all possible types to search for (default: $CFG_GLPI[\"state_types\"])\n    *   - default_itemtype     : the default itemtype to select (don't define if you don't\n    *                            need a default) (defaut 0)\n    *    - entity_restrict     : restrict entity in searching items (default -1)\n    *    - onlyglobal          : don't match item that don't have `is_global` == 1 (false by default)\n    *    - checkright          : check to see if we can \"view\" the itemtype (false by default)\n    *    - showItemSpecificity : given an item, the AJAX file to open if there is special\n    *                            treatment. For instance, select a Item_Device* for CommonDevice\n    *    - emptylabel          : Empty choice's label (default self::EMPTY_VALUE)\n    *    - used                : array / Already used items ID: not to display in dropdown (default empty)\n    *    - display             : true : display directly, false return the html\n    *\n    * @return integer randomized value used to generate HTML IDs\n   **/\n   static function showSelectItemFromItemtypes(array $options = []) {\n      global $CFG_GLPI;\n\n      $params = [];\n      $params['itemtype_name']       = 'itemtype';\n      $params['items_id_name']       = 'items_id';\n      $params['itemtypes']           = '';\n      $params['default_itemtype']    = 0;\n      $params['entity_restrict']     = -1;\n      $params['onlyglobal']          = false;\n      $params['checkright']          = false;\n      $params['showItemSpecificity'] = '';\n      $params['emptylabel']          = self::EMPTY_VALUE;\n      $params['used']                = [];\n      $params['display']             = true;\n      $params['rand']                = mt_rand();\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $params[$key] = $val;\n         }\n      }\n\n      $select = self::showItemType($params['itemtypes'], [\n         'checkright' => $params['checkright'],\n         'name'       => $params['itemtype_name'],\n         'emptylabel' => $params['emptylabel'],\n         'display'    => $params['display'],\n         'rand'       => $params['rand'],\n      ]);\n\n      $p_ajax = [\n         'idtable'             => '__VALUE__',\n         'name'                => $params['items_id_name'],\n         'entity_restrict'     => $params['entity_restrict'],\n         'showItemSpecificity' => $params['showItemSpecificity'],\n         'rand'                => $params['rand']\n      ];\n\n      // manage condition\n      if ($params['onlyglobal']) {\n         $p_ajax['condition'] = static::addNewCondition(['is_global' => 1]);\n      }\n      if ($params['used']) {\n         $p_ajax['used'] = $params['used'];\n      }\n\n      $field_id = Html::cleanId(\"dropdown_\".$params['itemtype_name'].$params['rand']);\n      $show_id  = Html::cleanId(\"show_\".$params['items_id_name'].$params['rand']);\n\n      $ajax = Ajax::updateItemOnSelectEvent(\n         $field_id,\n         $show_id,\n         $CFG_GLPI[\"root_doc\"].\"/ajax/dropdownAllItems.php\",\n         $p_ajax,\n         $params['display']\n      );\n\n      $out = \"\";\n      if (!$params['display']) {\n         $out.= $select.$ajax;\n      }\n\n      $out.= \"<br><span id='$show_id'>&nbsp;</span>\\n\";\n\n      // We check $options as the caller will set $options['default_itemtype'] only if it needs a\n      // default itemtype and the default value can be '' thus empty won't be valid !\n      if (array_key_exists ('default_itemtype', $options)) {\n         $out.= \"<script type='text/javascript' >\\n\";\n         $out.= \"$(function() {\";\n         $out.= Html::jsSetDropdownValue($field_id, $params['default_itemtype']);\n         $out.= \"});</script>\\n\";\n\n         $p_ajax[\"idtable\"] = $params['default_itemtype'];\n         $ajax2 = Ajax::updateItem(\n            $show_id,\n            $CFG_GLPI[\"root_doc\"]. \"/ajax/dropdownAllItems.php\",\n            $p_ajax,\n            \"\",\n            $params['display']\n         );\n\n         if (!$params['display']) {\n            $out.= $ajax2;\n         }\n      }\n\n      if ($params['display']) {\n         echo $out;\n         return $params['rand'];\n      }\n\n      return $out;\n   }\n\n\n   /**\n    * Dropdown numbers\n    *\n    * @since 0.84\n    *\n    * @param string $myname   select name\n    * @param array  $options  array of additionnal options :\n    *     - value              default value (default 0)\n    *     - rand               random value\n    *     - min                min value (default 0)\n    *     - max                max value (default 100)\n    *     - step               step used (default 1)\n    *     - toadd     array    of values to add at the beginning\n    *     - unit      string   unit to used\n    *     - display   boolean  if false get string\n    *     - width              specific width needed (default 80%)\n    *     - on_change string / value to transmit to \"onChange\"\n    *     - used      array / Already used items ID: not to display in dropdown (default empty)\n   **/\n   static function showNumber($myname, $options = []) {\n      global $CFG_GLPI;\n\n      $p = [\n         'value'           => 0,\n         'rand'            => mt_rand(),\n         'min'             => 0,\n         'max'             => 100,\n         'step'            => 1,\n         'toadd'           => [],\n         'unit'            => '',\n         'display'         => true,\n         'width'           => '',\n         'on_change'       => '',\n         'used'            => [],\n         'specific_tags'   => [],\n      ];\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $p[$key] = $val;\n         }\n      }\n      if (($p['value'] < $p['min']) && !isset($p['toadd'][$p['value']])) {\n         $min = $p['min'];\n\n         while (isset($p['used'][$min])) {\n            ++$min;\n         }\n         $p['value'] = $min;\n      }\n\n      $field_id = Html::cleanId(\"dropdown_\".$myname.$p['rand']);\n      if (!isset($p['toadd'][$p['value']])) {\n         $valuename = self::getValueWithUnit($p['value'], $p['unit']);\n      } else {\n         $valuename = $p['toadd'][$p['value']];\n      }\n      $param = ['value'               => $p['value'],\n                     'valuename'           => $valuename,\n                     'width'               => $p['width'],\n                     'on_change'           => $p['on_change'],\n                     'used'                => $p['used'],\n                     'unit'                => $p['unit'],\n                     'min'                 => $p['min'],\n                     'max'                 => $p['max'],\n                     'step'                => $p['step'],\n                     'toadd'               => $p['toadd'],\n                     'specific_tags'       => $p['specific_tags']];\n\n      $out   = Html::jsAjaxDropdown($myname, $field_id,\n                                    $CFG_GLPI['root_doc'].\"/ajax/getDropdownNumber.php\",\n                                    $param);\n\n      if ($p['display']) {\n         echo $out;\n         return $p['rand'];\n      }\n      return $out;\n   }\n\n\n   /**\n    * Get value with unit / Automatic management of standar unit (year, month, %, ...)\n    *\n    * @since 0.84\n    *\n    * @param $value   integer   number of item\n    * @param $unit    string    of unit (maybe year, month, day, hour, % for standard management)\n   **/\n   static function getValueWithUnit($value, $unit) {\n\n      if (strlen($unit) == 0) {\n         return $value;\n      }\n\n      switch ($unit) {\n         case 'year' :\n            //TRANS: %d is a number of years\n            return sprintf(_n('%d year', '%d years', $value), $value);\n\n         case 'month' :\n            //TRANS: %d is a number of months\n            return sprintf(_n('%d month', '%d months', $value), $value);\n\n         case 'day' :\n            //TRANS: %d is a number of days\n            return sprintf(_n('%d day', '%d days', $value), $value);\n\n         case 'hour' :\n            //TRANS: %d is a number of hours\n            return sprintf(_n('%d hour', '%d hours', $value), $value);\n\n         case 'minute' :\n            //TRANS: %d is a number of minutes\n            return sprintf(_n('%d minute', '%d minutes', $value), $value);\n\n         case 'second' :\n            //TRANS: %d is a number of seconds\n            return sprintf(_n('%d second', '%d seconds', $value), $value);\n\n         case 'millisecond' :\n            //TRANS: %d is a number of milliseconds\n            return sprintf(_n('%d millisecond', '%d milliseconds', $value), $value);\n\n         case 'auto':\n               $value = str_replace([' ', '&nbsp;'], ['', ''], $value); // unformat value\n               return Toolbox::getSize($value*1024*1024);\n\n         case '%' :\n            return sprintf(__('%d%%'), $value);\n\n         default :\n            return sprintf(__('%1$s %2$s'), $value, $unit);\n      }\n   }\n\n\n   /**\n    * Dropdown integers\n    *\n    * @since 0.83\n    *\n    * @param string $myname   select name\n    * @param array  $options  array of options\n    *    - value           : default value\n    *    - min             : min value : default 0\n    *    - max             : max value : default DAY_TIMESTAMP\n    *    - value           : default value\n    *    - addfirstminutes : add first minutes before first step (default false)\n    *    - toadd           : array of values to add\n    *    - inhours         : only show timestamp in hours not in days\n    *    - display         : boolean / display or return string\n    *    - width           : string / display width of the item\n   **/\n   static function showTimeStamp($myname, $options = []) {\n      global $CFG_GLPI;\n\n      $params['value']               = 0;\n      $params['rand']                = mt_rand();\n      $params['min']                 = 0;\n      $params['max']                 = DAY_TIMESTAMP;\n      $params['step']                = $CFG_GLPI[\"time_step\"]*MINUTE_TIMESTAMP;\n      $params['emptylabel']          = self::EMPTY_VALUE;\n      $params['addfirstminutes']     = false;\n      $params['toadd']               = [];\n      $params['inhours']             = false;\n      $params['display']             = true;\n      $params['display_emptychoice'] = true;\n      $params['width']               = '80%';\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $params[$key] = $val;\n         }\n      }\n\n      // Manage min :\n      $params['min'] = floor($params['min']/$params['step'])*$params['step'];\n\n      if ($params['min'] == 0) {\n         $params['min'] = $params['step'];\n      }\n\n      $params['max'] = max($params['value'], $params['max']);\n\n      // Floor with MINUTE_TIMESTAMP for rounded purpose\n      if (empty($params['value'])) {\n         $params['value'] = 0;\n      }\n      if (($params['value'] < max($params['min'], 10*MINUTE_TIMESTAMP))\n          && $params['addfirstminutes']) {\n         $params['value'] = floor(($params['value'])/MINUTE_TIMESTAMP)*MINUTE_TIMESTAMP;\n      } else if (!in_array($params['value'], $params['toadd'])) {\n         // Round to a valid step except if value is already valid (defined in values to add)\n         $params['value'] = floor(($params['value'])/$params['step'])*$params['step'];\n      }\n\n      $values = [];\n\n      if ($params['value']) {\n         $values[$params['value']] = '';\n      }\n\n      if ($params['addfirstminutes']) {\n         $max = max($params['min'], 10*MINUTE_TIMESTAMP);\n         for ($i=MINUTE_TIMESTAMP; $i < $max; $i+=MINUTE_TIMESTAMP) {\n            $values[$i] = '';\n         }\n      }\n\n      for ($i = $params['min']; $i <= $params['max']; $i+=$params['step']) {\n         $values[$i] = '';\n      }\n\n      if (count($params['toadd'])) {\n         foreach ($params['toadd'] as $key) {\n            $values[$key] = '';\n         }\n         ksort($values);\n      }\n\n      foreach ($values as $i => $val) {\n         if (empty($val)) {\n            if ($params['inhours']) {\n               $day  = 0;\n               $hour = floor($i/HOUR_TIMESTAMP);\n            } else {\n               $day  = floor($i/DAY_TIMESTAMP);\n               $hour = floor(($i%DAY_TIMESTAMP)/HOUR_TIMESTAMP);\n            }\n            $minute     = floor(($i%HOUR_TIMESTAMP)/MINUTE_TIMESTAMP);\n            if ($minute === '0') {\n               $minute = '00';\n            }\n            $values[$i] = '';\n            if ($day > 0) {\n               if (($hour > 0) || ($minute > 0)) {\n                  if ($minute < 10) {\n                     $minute = '0'.$minute;\n                  }\n\n                  //TRANS: %1$d is the number of days, %2$d the number of hours,\n                  //       %3$s the number of minutes : display 1 day 3h15\n                  $values[$i] = sprintf(_n('%1$d day %2$dh%3$s', '%1$d days %2$dh%3$s', $day),\n                                       $day, $hour, $minute);\n               } else {\n                  $values[$i] = sprintf(_n('%d day', '%d days', $day), $day);\n               }\n\n            } else if ($hour > 0 || $minute > 0) {\n               if ($minute < 10) {\n                  $minute = '0'.$minute;\n               }\n\n               //TRANS: %1$d the number of hours, %2$s the number of minutes : display 3h15\n               $values[$i] = sprintf(__('%1$dh%2$s'), $hour, $minute);\n            }\n         }\n      }\n      return Dropdown::showFromArray($myname, $values,\n                                     ['value'                => $params['value'],\n                                            'display'             => $params['display'],\n                                            'width'               => $params['width'],\n                                            'display_emptychoice' => $params['display_emptychoice'],\n                                            'rand'                => $params['rand'],\n                                            'emptylabel'          => $params['emptylabel']]);\n   }\n\n\n   /**\n    * Toggle view in LDAP user import/synchro between no restriction and date restriction\n    *\n    * @param $enabled (default 0)\n   **/\n   static function showAdvanceDateRestrictionSwitch($enabled = 0) {\n      global $CFG_GLPI;\n\n      $rand = mt_rand();\n      $url  = $CFG_GLPI[\"root_doc\"].\"/ajax/ldapdaterestriction.php\";\n      echo \"<script type='text/javascript' >\\n\";\n      echo \"function activateRestriction() {\\n\";\n         $params = ['enabled'=> 1];\n         Ajax::updateItemJsCode('date_restriction', $url, $params);\n      echo \"};\";\n\n      echo \"function deactivateRestriction() {\\n\";\n         $params = ['enabled' => 0];\n         Ajax::updateItemJsCode('date_restriction', $url, $params);\n      echo \"};\";\n      echo \"</script>\";\n\n      echo \"</table>\";\n      echo \"<span id='date_restriction'>\";\n      $_POST['enabled'] = $enabled;\n      include (GLPI_ROOT.\"/ajax/ldapdaterestriction.php\");\n      echo \"</span>\\n\";\n      return $rand;\n   }\n\n\n   /**\n    * Dropdown of values in an array\n    *\n    * @param string $name      select name\n    * @param array  $elements  array of elements to display\n    * @param array  $options   array of possible options:\n    *    - value               : integer / preselected value (default 0)\n    *    - used                : array / Already used items ID: not to display in dropdown (default empty)\n    *    - readonly            : boolean / used as a readonly item (default false)\n    *    - on_change           : string / value to transmit to \"onChange\"\n    *    - multiple            : boolean / can select several values (default false)\n    *    - size                : integer / number of rows for the select (default = 1)\n    *    - display             : boolean / display or return string\n    *    - other               : boolean or string if not false, then we can use an \"other\" value\n    *                            if it is a string, then the default value will be this string\n    *    - rand                : specific rand if needed (default is generated one)\n    *    - width               : specific width needed (default not set)\n    *    - emptylabel          : empty label if empty displayed (default self::EMPTY_VALUE)\n    *    - display_emptychoice : display empty choice, cannot be used when \"multiple\" option set to true (default false)\n    *    - class               : class attributes to add\n    *    - tooltip             : string / message to add as tooltip on the dropdown (default '')\n    *    - option_tooltips     : array / message to add as tooltip on the dropdown options. Use the same keys as for the $elements parameter, but none is mandotary. Missing keys will just be ignored and no tooltip will be added. To add a tooltip on an option group, is the '__optgroup_label' key inside the array describing option tooltips : 'optgroupname1' => array('__optgroup_label' => 'tooltip for option group') (default empty)\n    *    - noselect2           : if true, don't use select2 lib\n    *\n    * Permit to use optgroup defining items in arrays\n    * array('optgroupname'  => array('key1' => 'val1',\n    *                                'key2' => 'val2'),\n    *       'optgroupname2' => array('key3' => 'val3',\n    *                                'key4' => 'val4'))\n    *\n    * @return integer|string\n    *    integer if option display=true (random part of elements id)\n    *    string if option display=false (HTML code)\n   **/\n   static function showFromArray($name, array $elements, $options = []) {\n\n      $param['value']               = '';\n      $param['values']              = [''];\n      $param['class']               = '';\n      $param['tooltip']             = '';\n      $param['option_tooltips']     = [];\n      $param['used']                = [];\n      $param['readonly']            = false;\n      $param['on_change']           = '';\n      $param['width']               = '';\n      $param['multiple']            = false;\n      $param['size']                = 1;\n      $param['display']             = true;\n      $param['other']               = false;\n      $param['rand']                = mt_rand();\n      $param['emptylabel']          = self::EMPTY_VALUE;\n      $param['display_emptychoice'] = false;\n      $param['disabled']            = false;\n      $param['noselect2']           = false;\n\n      if (is_array($options) && count($options)) {\n         if (isset($options['value']) && strlen($options['value'])) {\n            $options['values'] = [$options['value']];\n            unset($options['value']);\n         }\n         foreach ($options as $key => $val) {\n            $param[$key] = $val;\n         }\n      }\n\n      if ($param['other'] !== false) {\n         $other_select_option = $name . '_other_value';\n         $param['on_change'] .= \"displayOtherSelectOptions(this, \\\"$other_select_option\\\");\";\n\n         // If $param['other'] is a string, then we must highlight \"other\" option\n         if (is_string($param['other'])) {\n            if (!$param[\"multiple\"]) {\n               $param['values'] = [$other_select_option];\n            } else {\n               $param['values'][] = $other_select_option;\n            }\n         }\n      }\n\n      $param['option_tooltips'] = Html::entities_deep($param['option_tooltips']);\n\n      if ($param[\"display_emptychoice\"] && !$param[\"multiple\"]) {\n         $elements = [ 0 => $param['emptylabel'] ] + $elements;\n      }\n\n      if ($param[\"multiple\"]) {\n         $field_name = $name.\"[]\";\n      } else {\n         $field_name = $name;\n      }\n\n      $output = '';\n      // readonly mode\n      $field_id = Html::cleanId(\"dropdown_\".$name.$param['rand']);\n      if ($param['readonly']) {\n         $to_display = [];\n         foreach ($param['values'] as $value) {\n            $output .= \"<input type='hidden' name='$field_name' value='$value'>\";\n            if (isset($elements[$value])) {\n               $to_display[] = $elements[$value];\n            }\n         }\n         $output .= implode('<br>', $to_display);\n      } else {\n\n         $output  .= \"<select name='$field_name' id='$field_id'\";\n\n         if ($param['tooltip']) {\n            $output .= ' title=\"'.Html::entities_deep($param['tooltip']).'\"';\n         }\n\n         if ($param['class']) {\n            $output .= ' class=\"'.Html::entities_deep($param['class']).'\"';\n         }\n\n         if (!empty($param[\"on_change\"])) {\n            $output .= \" onChange='\".$param[\"on_change\"].\"'\";\n         }\n\n         if ((is_int($param[\"size\"])) && ($param[\"size\"] > 0)) {\n            $output .= \" size='\".$param[\"size\"].\"'\";\n         }\n\n         if ($param[\"multiple\"]) {\n            $output .= \" multiple\";\n         }\n\n         if ($param[\"disabled\"]) {\n            $output .= \" disabled='disabled'\";\n         }\n\n         $output .= '>';\n         $max_option_size = 0;\n         foreach ($elements as $key => $val) {\n            // optgroup management\n            if (is_array($val)) {\n               $opt_goup = Html::entities_deep($key);\n               if ($max_option_size < strlen($opt_goup)) {\n                  $max_option_size = strlen($opt_goup);\n               }\n\n               $output .= \"<optgroup label=\\\"$opt_goup\\\"\";\n               $optgroup_tooltips = false;\n               if (isset($param['option_tooltips'][$key])) {\n                  if (is_array($param['option_tooltips'][$key])) {\n                     if (isset($param['option_tooltips'][$key]['__optgroup_label'])) {\n                        $output .= ' title=\"'.$param['option_tooltips'][$key]['__optgroup_label'].'\"';\n                     }\n                     $optgroup_tooltips = $param['option_tooltips'][$key];\n                  } else {\n                     $output .= ' title=\"'.$param['option_tooltips'][$key].'\"';\n                  }\n               }\n               $output .= \">\";\n\n               foreach ($val as $key2 => $val2) {\n                  if (!isset($param['used'][$key2])) {\n                     $output .= \"<option value='\".$key2.\"'\";\n                     // Do not use in_array : trouble with 0 and empty value\n                     foreach ($param['values'] as $value) {\n                        if (strcmp($key2, $value) === 0) {\n                           $output .= \" selected\";\n                           break;\n                        }\n                     }\n                     if ($optgroup_tooltips && isset($optgroup_tooltips[$key2])) {\n                        $output .= ' title=\"'.$optgroup_tooltips[$key2].'\"';\n                     }\n                     $output .= \">\" .  $val2 . \"</option>\";\n                     if ($max_option_size < strlen($val2)) {\n                        $max_option_size = strlen($val2);\n                     }\n                  }\n               }\n               $output .= \"</optgroup>\";\n            } else {\n               if (!isset($param['used'][$key])) {\n                  $output .= \"<option value='\".Html::entities_deep($key).\"'\";\n                  // Do not use in_array : trouble with 0 and empty value\n                  foreach ($param['values'] as $value) {\n                     if (strcmp($key, $value)===0) {\n                        $output .= \" selected\";\n                        break;\n                     }\n                  }\n                  if (isset($param['option_tooltips'][$key])) {\n                     $output .= ' title=\"'.$param['option_tooltips'][$key].'\"';\n                  }\n                  $output .= \">\" .$val . \"</option>\";\n                  if ($max_option_size < strlen($val)) {\n                     $max_option_size = strlen($val);\n                  }\n               }\n            }\n         }\n\n         if ($param['other'] !== false) {\n            $output .= \"<option value='$other_select_option'\";\n            if (is_string($param['other'])) {\n               $output .= \" selected\";\n            }\n            $output .= \">\".__('Other...').\"</option>\";\n         }\n\n         $output .= \"</select>\";\n         if ($param['other'] !== false) {\n            $output .= \"<input name='$other_select_option' id='$other_select_option' type='text'\";\n            if (is_string($param['other'])) {\n               $output .= \" value=\\\"\" . $param['other'] . \"\\\"\";\n            } else {\n               $output .= \" style=\\\"display: none\\\"\";\n            }\n            $output .= \">\";\n         }\n      }\n\n      if (!$param['noselect2']) {\n         // Width set on select\n         $output .= Html::jsAdaptDropdown($field_id, ['width' => $param[\"width\"]]);\n      }\n\n      if ($param[\"multiple\"]) {\n         // Hack for All / None because select2 does not provide it\n         $select   = __('All');\n         $deselect = __('None');\n         $output  .= \"<div class='invisible' id='selectallbuttons_$field_id'>\";\n         $output  .= \"<div class='select2-actionable-menu'>\";\n         $output  .= \"<a class='vsubmit' \".\n                      \"onclick=\\\"selectAll('$field_id');$('#$field_id').select2('close');\\\">$select\".\n                     \"</a> \";\n         $output  .= \"<a class='vsubmit floatright' onclick=\\\"deselectAll('$field_id');\\\">$deselect\".\n                     \"</a>\";\n         $output  .= \"</div></div>\";\n\n         $js = \"\n         var multichecksappend$field_id = false;\n         $('#$field_id').on('select2:open', function(e) {\n            if (!multichecksappend$field_id) {\n               $('#select2-$field_id-results').parent().append($('#selectallbuttons_$field_id').html());\n               multichecksappend$field_id = true;\n            }\n         });\";\n         $output .= Html::scriptBlock($js);\n      }\n      $output .= Ajax::commonDropdownUpdateItem($param, false);\n\n      if ($param['display']) {\n         echo $output;\n         return $param['rand'];\n      }\n      return $output;\n   }\n\n\n   /**\n    * Dropdown for global item management\n    *\n    * @param integer $ID           item ID\n    * @param array   attrs   array which contains the extra paramters\n    *\n    * Parameters can be :\n    * - target target for actions\n    * - withtemplate template or basic computer\n    * - value value of global state\n    * - management_restrict global management restrict mode\n   **/\n   static function showGlobalSwitch($ID, $attrs = []) {\n      $params['management_restrict'] = 0;\n      $params['value']               = 0;\n      $params['name']                = 'is_global';\n      $params['target']              = '';\n\n      foreach ($attrs as $key => $value) {\n         if ($value != '') {\n            $params[$key] = $value;\n         }\n      }\n\n      if ($params['value']\n          && empty($params['withtemplate'])) {\n         echo __('Global management');\n\n         if ($params['management_restrict'] == 2) {\n            echo \"&nbsp;\";\n            Html::showSimpleForm($params['target'], 'unglobalize', __('Use unitary management'),\n                                 ['id' => $ID], '', '',\n                                 [__('Do you really want to use unitary management for this item?'),\n                                       __('Duplicate the element as many times as there are connections')]);\n            echo \"&nbsp;\";\n\n            echo \"<span class='fa fa-info pointer'\".\n                 \" title=\\\"\".__s('Duplicate the element as many times as there are connections').\n                 \"\\\"><span class='sr-only'>\". __s('Duplicate the element as many times as there are connections') . \"</span></span>\";\n         }\n\n      } else {\n         if ($params['management_restrict'] == 2) {\n            $rand = mt_rand();\n            $values = [MANAGEMENT_UNITARY => __('Unit management'),\n                            MANAGEMENT_GLOBAL  => __('Global management')];\n            Dropdown::showFromArray($params['name'], $values, ['value' => $params['value']]);\n         } else {\n            // Templates edition\n            if (!empty($params['withtemplate'])) {\n               echo \"<input type='hidden' name='is_global' value='\".\n                      $params['management_restrict'].\"'>\";\n               echo (!$params['management_restrict']?__('Unit management') :__('Global management'));\n            } else {\n               echo (!$params['value']?__('Unit management'):__('Global management'));\n            }\n         }\n      }\n   }\n\n\n   /**\n    * Import a dropdown - check if already exists\n    *\n    * @param string $itemtype  name of the class\n    * @param array  $input     of value to import\n    *\n    * @return boolean|integer ID of the new item or false on error\n   **/\n   static function import($itemtype, $input) {\n\n      if (!($item = getItemForItemtype($itemtype))) {\n         return false;\n      }\n      return $item->import($input);\n   }\n\n\n   /**\n    * Import a value in a dropdown table.\n    *\n    * This import a new dropdown if it doesn't exist - Play dictionnary if needed\n    *\n    * @param string  $itemtype         name of the class\n    * @param string  $value            Value of the new dropdown.\n    * @param integer $entities_id       entity in case of specific dropdown\n    * @param array   $external_params\n    * @param string  $comment\n    * @param boolean $add              if true, add it if not found. if false, just check if exists\n    *\n    * @return integer : dropdown id.\n   **/\n   static function importExternal($itemtype, $value, $entities_id = -1, $external_params = [],\n                                  $comment = '', $add = true) {\n\n      if (!($item = getItemForItemtype($itemtype))) {\n         return false;\n      }\n      return $item->importExternal($value, $entities_id, $external_params, $comment, $add);\n   }\n\n   /**\n    * Get the label associated with a management type\n    *\n    * @param integer value the type of management (default 0)\n    *\n    * @return string the label corresponding to it, or \"\"\n   **/\n   static function getGlobalSwitch($value = 0) {\n\n      switch ($value) {\n         case 0 :\n            return __('Unit management');\n\n         case 1 :\n            return __('Global management');\n\n         default :\n            return \"\";\n      }\n   }\n\n\n   /**\n    * show dropdown for output format\n    *\n    * @since 0.83\n   **/\n   static function showOutputFormat() {\n      $values[Search::PDF_OUTPUT_LANDSCAPE]     = __('Current page in landscape PDF');\n      $values[Search::PDF_OUTPUT_PORTRAIT]      = __('Current page in portrait PDF');\n      $values[Search::SYLK_OUTPUT]              = __('Current page in SLK');\n      $values[Search::CSV_OUTPUT]               = __('Current page in CSV');\n      $values['-'.Search::PDF_OUTPUT_LANDSCAPE] = __('All pages in landscape PDF');\n      $values['-'.Search::PDF_OUTPUT_PORTRAIT]  = __('All pages in portrait PDF');\n      $values['-'.Search::SYLK_OUTPUT]          = __('All pages in SLK');\n      $values['-'.Search::CSV_OUTPUT]           = __('All pages in CSV');\n\n      Dropdown::showFromArray('display_type', $values);\n      echo \"<button type='submit' name='export' class='unstyled pointer' \".\n             \" title=\\\"\" . _sx('button', 'Export') . \"\\\">\" .\n             \"<i class='far fa-save'></i><span class='sr-only'>\"._sx('button', 'Export').\"<span>\";\n   }\n\n\n   /**\n    * show dropdown to select list limit\n    *\n    * @since 0.83\n    *\n    * @param string $onchange  Optional, for ajax (default '')\n   **/\n   static function showListLimit($onchange = '', $display = true) {\n      global $CFG_GLPI;\n\n      if (isset($_SESSION['glpilist_limit'])) {\n         $list_limit = $_SESSION['glpilist_limit'];\n      } else {\n         $list_limit = $CFG_GLPI['list_limit'];\n      }\n\n      $values = [];\n\n      for ($i=5; $i<20; $i+=5) {\n         $values[$i] = $i;\n      }\n      for ($i=20; $i<50; $i+=10) {\n         $values[$i] = $i;\n      }\n      for ($i=50; $i<250; $i+=50) {\n         $values[$i] = $i;\n      }\n      for ($i=250; $i<1000; $i+=250) {\n         $values[$i] = $i;\n      }\n      for ($i=1000; $i<5000; $i+=1000) {\n         $values[$i] = $i;\n      }\n      for ($i=5000; $i<=10000; $i+=5000) {\n         $values[$i] = $i;\n      }\n      $values[9999999] = 9999999;\n      // Propose max input vars -10\n      $max             = Toolbox::get_max_input_vars();\n      if ($max > 10) {\n         $values[$max-10] = $max-10;\n      }\n      ksort($values);\n      return self::showFromArray('glpilist_limit', $values,\n                                 ['on_change' => $onchange,\n                                       'value'     => $list_limit,\n                                       'display'   => $display]);\n   }\n\n   /**\n    * Get dropdown value\n    *\n    * @param array   $post Posted values\n    * @param boolean $json Encode to JSON, default to true\n    *\n    * @return string|array\n    */\n   public static function getDropdownValue($post, $json = true) {\n      global $DB, $CFG_GLPI;\n\n      // check if asked itemtype is the one originaly requested by the form\n      if (!Session::validateIDOR($post)) {\n         return;\n      }\n\n      if (isset($post[\"entity_restrict\"])\n         && !is_array($post[\"entity_restrict\"])\n         && (substr($post[\"entity_restrict\"], 0, 1) === '[')\n         && (substr($post[\"entity_restrict\"], -1) === ']')) {\n         $decoded = Toolbox::jsonDecode($post['entity_restrict']);\n         $entities = [];\n         if (is_array($decoded)) {\n            foreach ($decoded as $value) {\n               $entities[] = (int)$value;\n            }\n         }\n         $post[\"entity_restrict\"] = $entities;\n      }\n      if (isset($post['entity_restrict']) && 'default' === $post['entity_restrict']) {\n         $post['entity_restrict'] = $_SESSION['glpiactiveentities'];\n      }\n\n      // Security\n      if (!($item = getItemForItemtype($post['itemtype']))) {\n         return;\n      }\n\n      $table = $item->getTable();\n      $datas = [];\n\n      $displaywith = false;\n      if (isset($post['displaywith'])) {\n         if (is_array($post['displaywith']) && count($post['displaywith'])) {\n            $table = getTableForItemType($post['itemtype']);\n            foreach ($post['displaywith'] as $key => $value) {\n               if (!$DB->fieldExists($table, $value)) {\n                  unset($post['displaywith'][$key]);\n               }\n            }\n            if (count($post['displaywith'])) {\n               $displaywith = true;\n            }\n         }\n      }\n\n      if (!isset($post['permit_select_parent'])) {\n         $post['permit_select_parent'] = false;\n      }\n\n      if (isset($post['condition']) && !empty($post['condition']) && !is_array($post['condition'])) {\n         // Retreive conditions from SESSION using its key\n         $key = $post['condition'];\n         if (isset($_SESSION['glpicondition']) && isset($_SESSION['glpicondition'][$key])) {\n            $post['condition'] = $_SESSION['glpicondition'][$key];\n         } else {\n            $post['condition'] = [];\n         }\n      }\n\n      if (!isset($post['emptylabel']) || ($post['emptylabel'] == '')) {\n         $post['emptylabel'] = Dropdown::EMPTY_VALUE;\n      }\n\n      $where = [];\n\n      if ($item->maybeDeleted()) {\n         $where[\"$table.is_deleted\"] = 0;\n      }\n      if ($item->maybeTemplate()) {\n         $where[\"$table.is_template\"] = 0;\n      }\n\n      if (!isset($post['page'])) {\n         $post['page']       = 1;\n         $post['page_limit'] = $CFG_GLPI['dropdown_max'];\n      }\n\n      $start = intval(($post['page']-1)*$post['page_limit']);\n      $limit = intval($post['page_limit']);\n\n      if (isset($post['used'])) {\n         $used = $post['used'];\n\n         if (count($used)) {\n            $where['NOT'] = [\"$table.id\" => $used];\n         }\n      }\n\n      if (isset($post['toadd'])) {\n         $toadd = $post['toadd'];\n      } else {\n         $toadd = [];\n      }\n\n      if (isset($post['condition']) && ($post['condition'] != '')) {\n         $where = array_merge($where, $post['condition']);\n      }\n\n      $one_item = -1;\n      if (isset($post['_one_id'])) {\n         $one_item = $post['_one_id'];\n      }\n\n      // Count real items returned\n      $count = 0;\n\n      if ($item instanceof CommonTreeDropdown) {\n         if ($one_item >= 0) {\n            $where[\"$table.id\"] = $one_item;\n         } else {\n            if (!empty($post['searchText'])) {\n               $search = Search::makeTextSearchValue($post['searchText']);\n\n               $swhere = [\n                  \"$table.completename\" => ['LIKE', $search],\n               ];\n               if (Session::haveTranslations($post['itemtype'], 'completename')) {\n                  $swhere[\"namet.value\"] = ['LIKE', $search];\n               }\n\n               if ($_SESSION['glpiis_ids_visible']\n                   && is_numeric($post['searchText']) && (int)$post['searchText'] == $post['searchText']) {\n                  $swhere[$table . '.' . $item->getIndexName()] = ['LIKE', \"%{$post['searchText']}%\"];\n               }\n\n               // search also in displaywith columns\n               if ($displaywith && count($post['displaywith'])) {\n                  foreach ($post['displaywith'] as $with) {\n                     $swhere[\"$table.$with\"] = ['LIKE', $search];\n                  }\n               }\n\n               $where[] = ['OR' => $swhere];\n            }\n         }\n\n         $multi = false;\n\n         // Manage multiple Entities dropdowns\n         $order = [\"$table.completename\"];\n\n         // No multi if get one item\n         if ($item->isEntityAssign()) {\n            $recur = $item->maybeRecursive();\n\n            // Entities are not really recursive : do not display parents\n            if ($post['itemtype'] == 'Entity') {\n               $recur = false;\n            }\n\n            if (isset($post[\"entity_restrict\"]) && !($post[\"entity_restrict\"] < 0)) {\n               $where = $where + getEntitiesRestrictCriteria(\n                  $table,\n                  '',\n                  $post[\"entity_restrict\"],\n                  $recur\n               );\n\n               if (is_array($post[\"entity_restrict\"]) && (count($post[\"entity_restrict\"]) > 1)) {\n                  $multi = true;\n               }\n            } else {\n               // If private item do not use entity\n               if (!$item->maybePrivate()) {\n                  $where = $where + getEntitiesRestrictCriteria($table, '', '', $recur);\n\n                  if (count($_SESSION['glpiactiveentities']) > 1) {\n                     $multi = true;\n                  }\n               } else {\n                  $multi = false;\n               }\n            }\n\n            // Force recursive items to multi entity view\n            if ($recur) {\n               $multi = true;\n            }\n\n            // no multi view for entitites\n            if ($post['itemtype'] == \"Entity\") {\n               $multi = false;\n            }\n\n            if ($multi) {\n               array_unshift($order, \"$table.entities_id\");\n            }\n         }\n\n         $addselect = [];\n         $ljoin = [];\n         if (Session::haveTranslations($post['itemtype'], 'completename')) {\n            $addselect[] = \"namet.value AS transcompletename\";\n            $ljoin['glpi_dropdowntranslations AS namet'] = [\n               'ON' => [\n                  'namet'  => 'items_id',\n                  $table   => 'id', [\n                     'AND' => [\n                        'namet.itemtype'  => $post['itemtype'],\n                        'namet.language'  => $_SESSION['glpilanguage'],\n                        'namet.field'     => 'completename'\n                     ]\n                  ]\n               ]\n            ];\n         }\n         if (Session::haveTranslations($post['itemtype'], 'name')) {\n            $addselect[] = \"namet2.value AS transname\";\n            $ljoin['glpi_dropdowntranslations AS namet2'] = [\n               'ON' => [\n                  'namet2' => 'items_id',\n                  $table   => 'id', [\n                     'AND' => [\n                        'namet2.itemtype' => $post['itemtype'],\n                        'namet2.language' => $_SESSION['glpilanguage'],\n                        'namet2.field'    => 'name'\n                     ]\n                  ]\n               ]\n            ];\n         }\n         if (Session::haveTranslations($post['itemtype'], 'comment')) {\n            $addselect[] = \"commentt.value AS transcomment\";\n            $ljoin['glpi_dropdowntranslations AS commentt'] = [\n               'ON' => [\n                  'commentt'  => 'items_id',\n                  $table      => 'id', [\n                     'AND' => [\n                        'commentt.itemtype'  => $post['itemtype'],\n                        'commentt.language'  => $_SESSION['glpilanguage'],\n                        'commentt.field'     => 'comment'\n                     ]\n                  ]\n               ]\n            ];\n         }\n\n         if ($start > 0 && $multi) {\n            //we want to load last entry of previous page\n            //(and therefore one more result) to check if\n            //entity name must be displayed again\n            --$start;\n            ++$limit;\n         }\n\n         $criteria = [\n            'SELECT' => array_merge([\"$table.*\"], $addselect),\n            'FROM'   => $table,\n            'WHERE'  => $where,\n            'ORDER'  => $order,\n            'START'  => $start,\n            'LIMIT'  => $limit\n         ];\n         if (count($ljoin)) {\n            $criteria['LEFT JOIN'] = $ljoin;\n         }\n         $iterator = $DB->request($criteria);\n\n         // Empty search text : display first\n         if ($post['page'] == 1 && empty($post['searchText'])) {\n            if ($post['display_emptychoice']) {\n               $datas[] = [\n                  'id' => 0,\n                  'text' => $post['emptylabel']\n               ];\n            }\n         }\n\n         if ($post['page'] == 1) {\n            if (count($toadd)) {\n               foreach ($toadd as $key => $val) {\n                  $datas[] = [\n                     'id' => $key,\n                     'text' => stripslashes($val)\n                  ];\n               }\n            }\n         }\n         $last_level_displayed = [];\n         $datastoadd           = [];\n\n         // Ignore first item for all pages except first page\n         $firstitem = (($post['page'] > 1));\n         if (count($iterator)) {\n            $prev             = -1;\n            $firstitem_entity = -1;\n\n            while ($data = $iterator->next()) {\n               $ID    = $data['id'];\n               $level = $data['level'];\n\n               if (isset($data['transname']) && !empty($data['transname'])) {\n                  $outputval = $data['transname'];\n               } else {\n                  $outputval = $data['name'];\n               }\n\n               if ($multi\n                  && ($data[\"entities_id\"] != $prev)) {\n                  // Do not do it for first item for next page load\n                  if (!$firstitem) {\n                     if ($prev >= 0) {\n                        if (count($datastoadd)) {\n                           $datas[] = [\n                              'text' => Dropdown::getDropdownName(\"glpi_entities\", $prev),\n                              'children' => $datastoadd\n                           ];\n                        }\n                     }\n                  }\n                  $prev = $data[\"entities_id\"];\n                  if ($firstitem) {\n                     $firstitem_entity = $prev;\n                  }\n                  // Reset last level displayed :\n                  $datastoadd = [];\n               }\n\n               if ($_SESSION['glpiuse_flat_dropdowntree']) {\n                  if (isset($data['transcompletename']) && !empty($data['transcompletename'])) {\n                     $outputval = $data['transcompletename'];\n                  } else {\n                     $outputval = $data['completename'];\n                  }\n                  $level = 0;\n               } else { // Need to check if parent is the good one\n                        // Do not do if only get one item\n                  if (($level > 1)) {\n                     // Last parent is not the good one need to display arbo\n                     if (!isset($last_level_displayed[$level-1])\n                        || ($last_level_displayed[$level-1] != $data[$item->getForeignKeyField()])) {\n\n                        $work_level    = $level-1;\n                        $work_parentID = $data[$item->getForeignKeyField()];\n                        $parent_datas  = [];\n                        do {\n                           // Get parent\n                           if ($item->getFromDB($work_parentID)) {\n                              // Do not do for first item for next page load\n                              if (!$firstitem) {\n                                 $title = $item->fields['completename'];\n\n                                 $selection_text = $title;\n\n                                 if (isset($item->fields[\"comment\"])) {\n                                    $addcomment\n                                    = DropdownTranslation::getTranslatedValue($ID, $post['itemtype'],\n                                                                              'comment',\n                                                                              $_SESSION['glpilanguage'],\n                                                                              $item->fields['comment']);\n                                    $title = sprintf(__('%1$s - %2$s'), $title, $addcomment);\n                                 }\n                                 $output2 = DropdownTranslation::getTranslatedValue($item->fields['id'],\n                                                                                    $post['itemtype'],\n                                                                                    'name',\n                                                                                    $_SESSION['glpilanguage'],\n                                                                                    $item->fields['name']);\n\n                                 $temp = ['id'       => $work_parentID,\n                                             'text'     => $output2,\n                                             'level'    => (int)$work_level,\n                                             'disabled' => true];\n                                 if ($post['permit_select_parent']) {\n                                    $temp['title'] = $title;\n                                    $temp['selection_text'] = $selection_text;\n                                    unset($temp['disabled']);\n                                 }\n                                 array_unshift($parent_datas, $temp);\n                              }\n                              $last_level_displayed[$work_level] = $item->fields['id'];\n                              $work_level--;\n                              $work_parentID = $item->fields[$item->getForeignKeyField()];\n\n                           } else { // Error getting item : stop\n                              $work_level = -1;\n                           }\n\n                        } while (($work_level >= 1)\n                                 && (!isset($last_level_displayed[$work_level])\n                                    || ($last_level_displayed[$work_level] != $work_parentID)));\n                        // Add parents\n                        foreach ($parent_datas as $val) {\n                           $datastoadd[] = $val;\n                        }\n                     }\n                  }\n                  $last_level_displayed[$level] = $data['id'];\n               }\n\n               // Do not do for first item for next page load\n               if (!$firstitem) {\n                  if ($_SESSION[\"glpiis_ids_visible\"]\n                     || (Toolbox::strlen($outputval) == 0)) {\n                     $outputval = sprintf(__('%1$s (%2$s)'), $outputval, $ID);\n                  }\n\n                  if (isset($data['transcompletename']) && !empty($data['transcompletename'])) {\n                     $title = $data['transcompletename'];\n                  } else {\n                     $title = $data['completename'];\n                  }\n\n                  $selection_text = $title;\n\n                  if (isset($data[\"comment\"])) {\n                     if (isset($data['transcomment']) && !empty($data['transcomment'])) {\n                        $addcomment = $data['transcomment'];\n                     } else {\n                        $addcomment = $data['comment'];\n                     }\n                     $title = sprintf(__('%1$s - %2$s'), $title, $addcomment);\n                  }\n                  $datastoadd[] = [\n                     'id' => $ID,\n                     'text' => $outputval,\n                     'level' => (int)$level,\n                     'title' => $title,\n                     'selection_text' => $selection_text\n                  ];\n                  $count++;\n               }\n               $firstitem = false;\n            }\n         }\n\n         if ($multi) {\n            if (count($datastoadd)) {\n               // On paging mode do not add entity information each time\n               if ($prev == $firstitem_entity) {\n                  $datas = array_merge($datas, $datastoadd);\n               } else {\n                  $datas[] = [\n                     'text' => Dropdown::getDropdownName(\"glpi_entities\", $prev),\n                     'children' => $datastoadd\n                  ];\n               }\n            }\n         } else {\n            if (count($datastoadd)) {\n               $datas = array_merge($datas, $datastoadd);\n            }\n         }\n      } else { // Not a dropdowntree\n         $multi = false;\n         // No multi if get one item\n         if ($item->isEntityAssign()) {\n            $multi = $item->maybeRecursive();\n\n            if (isset($post[\"entity_restrict\"]) && !($post[\"entity_restrict\"] < 0)) {\n               $where = $where + getEntitiesRestrictCriteria(\n                  $table,\n                  \"entities_id\",\n                  $post[\"entity_restrict\"],\n                  $multi\n               );\n\n               if (is_array($post[\"entity_restrict\"]) && (count($post[\"entity_restrict\"]) > 1)) {\n                  $multi = true;\n               }\n\n            } else {\n               // Do not use entity if may be private\n               if (!$item->maybePrivate()) {\n                  $where = $where + getEntitiesRestrictCriteria($table, '', '', $multi);\n\n                  if (count($_SESSION['glpiactiveentities'])>1) {\n                     $multi = true;\n                  }\n               } else {\n                  $multi = false;\n               }\n            }\n         }\n\n         $field = \"name\";\n         if ($item instanceof CommonDevice) {\n            $field = \"designation\";\n         } else if ($item instanceof Item_Devices) {\n            $field = \"itemtype\";\n         }\n\n         if (!empty($post['searchText'])) {\n            $search = Search::makeTextSearchValue($post['searchText']);\n            $orwhere = [\"$table.$field\" => ['LIKE', $search]];\n\n            if ($_SESSION['glpiis_ids_visible']\n                && is_numeric($post['searchText']) && (int)$post['searchText'] == $post['searchText']) {\n               $orwhere[$table . '.' . $item->getIndexName()] = ['LIKE', \"%{$post['searchText']}%\"];\n            }\n\n            if ($item instanceof CommonDCModelDropdown) {\n               $orwhere[$table . '.product_number'] = ['LIKE', $search];\n            }\n\n            if (Session::haveTranslations($post['itemtype'], $field)) {\n               $orwhere['namet.value'] = ['LIKE', $search];\n            }\n            if ($post['itemtype'] == \"SoftwareLicense\") {\n               $orwhere['glpi_softwares.name'] = ['LIKE', $search];\n            }\n\n            // search also in displaywith columns\n            if ($displaywith && count($post['displaywith'])) {\n               foreach ($post['displaywith'] as $with) {\n                  $orwhere[\"$table.$with\"] = ['LIKE', $search];\n               }\n            }\n\n            $where[] = ['OR' => $orwhere];\n         }\n         $addselect = [];\n         $ljoin = [];\n         if (Session::haveTranslations($post['itemtype'], $field)) {\n            $addselect[] = \"namet.value AS transname\";\n            $ljoin['glpi_dropdowntranslations AS namet'] = [\n               'ON' => [\n                  'namet'  => 'items_id',\n                  $table   => 'id', [\n                     'AND' => [\n                        'namet.itemtype'  => $post['itemtype'],\n                        'namet.language'  => $_SESSION['glpilanguage'],\n                        'namet.field'     => $field\n                     ]\n                  ]\n               ]\n            ];\n         }\n         if (Session::haveTranslations($post['itemtype'], 'comment')) {\n            $addselect[] = \"commentt.value AS transcomment\";\n            $ljoin['glpi_dropdowntranslations AS commentt'] = [\n               'ON' => [\n                  'commentt'  => 'items_id',\n                  $table      => 'id', [\n                     'AND' => [\n                        'commentt.itemtype'  => $post['itemtype'],\n                        'commentt.language'  => $_SESSION['glpilanguage'],\n                        'commentt.field'     => 'comment'\n                     ]\n                  ]\n               ]\n            ];\n         }\n\n         $criteria = [];\n         switch ($post['itemtype']) {\n            case \"Contact\" :\n               $criteria = [\n                  'SELECT' => [\n                     \"$table.entities_id\",\n                     new \\QueryExpression(\n                        \"CONCAT(IFNULL(\" . $DB->quoteName('name') . \",''),' ',IFNULL(\" .\n                        $DB->quoteName('firstname') . \",'')) AS \" . $DB->quoteName($field)\n                     ),\n                     \"$table.comment\",\n                     \"$table.id\"\n                  ],\n                  'FROM'   => $table\n               ];\n               break;\n\n            case \"SoftwareLicense\" :\n               $criteria = [\n                  'SELECT' => [\n                     \"$table.*\",\n                     new \\QueryExpression(\"CONCAT(glpi_softwares.name,' - ',glpi_softwarelicenses.name) AS $field\")\n                  ],\n                  'FROM'   => $table,\n                  'LEFT JOIN' => [\n                     'glpi_softwares'  => [\n                        'ON' => [\n                           'glpi_softwarelicenses' => 'softwares_id',\n                           'glpi_softwares'        => 'id'\n                        ]\n                     ]\n                  ]\n               ];\n               break;\n\n            case \"Profile\" :\n               $criteria = [\n                  'SELECT'          => \"$table.*\",\n                  'DISTINCT'        => true,\n                  'FROM'            => $table,\n                  'LEFT JOIN'       => [\n                     'glpi_profilerights' => [\n                        'ON' => [\n                           'glpi_profilerights' => 'profiles_id',\n                           $table               => 'id'\n                        ]\n                     ]\n                  ]\n               ];\n               break;\n\n            case KnowbaseItem::getType():\n               $criteria = [\n                  'SELECT' => array_merge([\"$table.*\"], $addselect),\n                  'DISTINCT'        => true,\n                  'FROM'            => $table\n               ];\n               if (count($ljoin)) {\n                  $criteria['LEFT JOIN'] = $ljoin;\n               }\n\n               $visibility = KnowbaseItem::getVisibilityCriteria();\n               if (count($visibility['LEFT JOIN'])) {\n                  $criteria['LEFT JOIN'] = array_merge(\n                     (isset($criteria['LEFT JOIN']) ? $criteria['LEFT JOIN'] : []),\n                     $visibility['LEFT JOIN']\n                  );\n                  //Do not use where??\n                  /*if (isset($visibility['WHERE'])) {\n                     $where = $visibility['WHERE'];\n                  }*/\n               }\n               break;\n\n            case Project::getType():\n               $visibility = Project::getVisibilityCriteria();\n               if (count($visibility['LEFT JOIN'])) {\n                  $ljoin = array_merge($ljoin, $visibility['LEFT JOIN']);\n                  if (isset($visibility['WHERE'])) {\n                     $where[] = $visibility['WHERE'];\n                  }\n               }\n               //no break to reach default case.\n\n            default :\n               $criteria = [\n                  'SELECT' => array_merge([\"$table.*\"], $addselect),\n                  'FROM'   => $table\n               ];\n               if (count($ljoin)) {\n                  $criteria['LEFT JOIN'] = $ljoin;\n               }\n         }\n\n         $criteria = array_merge(\n            $criteria, [\n               'WHERE'  => $where,\n               'START'  => $start,\n               'LIMIT'  => $limit\n            ]\n         );\n\n         if ($multi) {\n            $criteria['ORDERBY'] = [\"$table.entities_id\", \"$table.$field\"];\n         } else {\n            $criteria['ORDERBY'] = [\"$table.$field\"];\n         }\n\n         $iterator = $DB->request($criteria);\n\n         // Display first if no search\n         if ($post['page'] == 1 && empty($post['searchText'])) {\n            if (!isset($post['display_emptychoice']) || $post['display_emptychoice']) {\n               $datas[] = [\n                  'id' => 0,\n                  'text' => $post[\"emptylabel\"]\n               ];\n            }\n         }\n         if ($post['page'] == 1) {\n            if (count($toadd)) {\n               foreach ($toadd as $key => $val) {\n                  $datas[] = [\n                     'id' => $key,\n                     'text' => stripslashes($val)\n                  ];\n               }\n            }\n         }\n\n         $datastoadd = [];\n\n         if (count($iterator)) {\n            $prev = -1;\n\n            while ($data = $iterator->next()) {\n               if ($multi\n                  && ($data[\"entities_id\"] != $prev)) {\n                  if ($prev >= 0) {\n                     if (count($datastoadd)) {\n                        $datas[] = [\n                           'text' => Dropdown::getDropdownName(\"glpi_entities\", $prev),\n                           'children' => $datastoadd\n                        ];\n                     }\n                  }\n                  $prev       = $data[\"entities_id\"];\n                  $datastoadd = [];\n               }\n\n               if (isset($data['transname']) && !empty($data['transname'])) {\n                  $outputval = $data['transname'];\n               } else if ($field == 'itemtype' && class_exists($data['itemtype'])) {\n                  $tmpitem = new $data[$field]();\n                  if ($tmpitem->getFromDB($data['items_id'])) {\n                     $outputval = sprintf(__('%1$s - %2$s'), $tmpitem->getTypeName(), $tmpitem->getName());\n                  } else {\n                     $outputval = $tmpitem->getTypeName();\n                  }\n               } else if ($item instanceof CommonDCModelDropdown) {\n                  $outputval =sprintf(__('%1$s - %2$s'), $data[$field], $data['product_number']);\n               } else {\n                  $outputval = $data[$field];\n               }\n\n               $ID         = $data['id'];\n               $addcomment = \"\";\n               $title      = $outputval;\n               if (isset($data[\"comment\"])) {\n                  if (isset($data['transcomment']) && !empty($data['transcomment'])) {\n                     $addcomment .= $data['transcomment'];\n                  } else {\n                     $addcomment .= $data[\"comment\"];\n                  }\n\n                  $title = sprintf(__('%1$s - %2$s'), $title, $addcomment);\n               }\n               if ($_SESSION[\"glpiis_ids_visible\"]\n                  || (strlen($outputval) == 0)) {\n                  //TRANS: %1$s is the name, %2$s the ID\n                  $outputval = sprintf(__('%1$s (%2$s)'), $outputval, $ID);\n               }\n               if ($displaywith) {\n                  foreach ($post['displaywith'] as $key) {\n                     if (isset($data[$key])) {\n                        $withoutput = $data[$key];\n                        if (isForeignKeyField($key)) {\n                           $withoutput = Dropdown::getDropdownName(getTableNameForForeignKeyField($key),\n                                                                  $data[$key]);\n                        }\n                        if ((strlen($withoutput) > 0) && ($withoutput != '&nbsp;')) {\n                           $outputval = sprintf(__('%1$s - %2$s'), $outputval, $withoutput);\n                        }\n                     }\n                  }\n               }\n               $datastoadd[] = [\n                  'id' => $ID,\n                  'text' => $outputval,\n                  'title' => $title\n               ];\n               $count++;\n            }\n            if ($multi) {\n               if (count($datastoadd)) {\n                  $datas[] = [\n                     'text' => Dropdown::getDropdownName(\"glpi_entities\", $prev),\n                     'children' => $datastoadd\n                  ];\n               }\n            } else {\n               if (count($datastoadd)) {\n                  $datas = array_merge($datas, $datastoadd);\n               }\n            }\n         }\n      }\n\n      $ret['results'] = Toolbox::unclean_cross_side_scripting_deep($datas);\n      $ret['count']   = $count;\n\n      return ($json === true) ? json_encode($ret) : $ret;\n   }\n\n   /**\n    * Get dropdown connect\n    *\n    * @param array   $post Posted values\n    * @param boolean $json Encode to JSON, default to true\n    *\n    * @return string|array\n    */\n   public static function getDropdownConnect($post, $json = true) {\n      global $DB, $CFG_GLPI;\n\n      // check if asked itemtype is the one originaly requested by the form\n      if (!Session::validateIDOR($post)) {\n         return;\n      }\n\n      if (!isset($post['fromtype']) || !($fromitem = getItemForItemtype($post['fromtype']))) {\n         return;\n      }\n\n      $fromitem->checkGlobal(UPDATE);\n      $used = [];\n      if (isset( $post[\"used\"])) {\n         $used = $post[\"used\"];\n\n         if (isset($used[$post['itemtype']])) {\n            $used = $used[$post['itemtype']];\n         } else {\n            $used = [];\n         }\n      }\n\n      // Make a select box\n      $table = getTableForItemType($post[\"itemtype\"]);\n      if (!$item = getItemForItemtype($post['itemtype'])) {\n         return;\n      }\n\n      $where = [];\n\n      if ($item->maybeDeleted()) {\n         $where[\"$table.is_deleted\"] = 0;\n      }\n      if ($item->maybeTemplate()) {\n         $where[\"$table.is_template\"] = 0;\n      }\n\n      if (isset($post['searchText']) && (strlen($post['searchText']) > 0)) {\n         $search = Search::makeTextSearchValue($post['searchText']);\n         $where['OR'] = [\n            \"$table.name\"        => ['LIKE', $search],\n            \"$table.otherserial\" => ['LIKE', $search],\n            \"$table.serial\"      => ['LIKE', $search]\n         ];\n      }\n\n      $multi = $item->maybeRecursive();\n\n      if (isset($post[\"entity_restrict\"]) && !($post[\"entity_restrict\"] < 0)) {\n         $where = $where + getEntitiesRestrictCriteria($table, '', $post[\"entity_restrict\"], $multi);\n         if (is_array($post[\"entity_restrict\"]) && (count($post[\"entity_restrict\"]) > 1)) {\n            $multi = true;\n         }\n\n      } else {\n         $where = $where + getEntitiesRestrictCriteria($table, '', $_SESSION['glpiactiveentities'], $multi);\n         if (count($_SESSION['glpiactiveentities']) > 1) {\n            $multi = true;\n         }\n      }\n\n      if (!isset($post['page'])) {\n         $post['page']       = 1;\n         $post['page_limit'] = $CFG_GLPI['dropdown_max'];\n      }\n\n      $start = intval(($post['page']-1)*$post['page_limit']);\n      $limit = intval($post['page_limit']);\n\n      if (!isset($post['onlyglobal'])) {\n         $post['onlyglobal'] = false;\n      }\n\n      if ($post[\"onlyglobal\"]\n         && ($post[\"itemtype\"] != 'Computer')) {\n         $where[\"$table.is_global\"] = 1;\n      } else {\n         $where_used = [];\n         if (!empty($used)) {\n            $where_used[] = ['NOT' => [\"$table.id\" => $used]];\n         }\n\n         if ($post[\"itemtype\"] == 'Computer') {\n            $where = $where + $where_used;\n         } else {\n            $where[] = [\n               'OR' => [\n                  [\n                     'glpi_computers_items.id'  => null\n                  ] + $where_used,\n                  \"$table.is_global\"            => 1\n               ]\n            ];\n         }\n      }\n\n      $criteria = [\n         'SELECT'          => [\n            \"$table.id\",\n            \"$table.name AS name\",\n            \"$table.serial AS serial\",\n            \"$table.otherserial AS otherserial\",\n            \"$table.entities_id AS entities_id\"\n         ],\n         'DISTINCT'        => true,\n         'FROM'            => $table,\n         'WHERE'           => $where,\n         'ORDERBY'         => ['entities_id', 'name ASC'],\n         'LIMIT'           => $limit,\n         'START'           => $start\n      ];\n\n      if (($post[\"itemtype\"] != 'Computer') && !$post[\"onlyglobal\"]) {\n         $criteria['LEFT JOIN'] = [\n            'glpi_computers_items'  => [\n               'ON' => [\n                  $table                  => 'id',\n                  'glpi_computers_items'  => 'items_id', [\n                     'AND' => [\n                        'glpi_computers_items.itemtype'  => $post['itemtype']\n                     ]\n                  ]\n               ]\n            ]\n         ];\n      }\n\n      $iterator = $DB->request($criteria);\n\n      $results = [];\n      // Display first if no search\n      if (empty($post['searchText'])) {\n         $results[] = [\n            'id' => 0,\n            'text' => Dropdown::EMPTY_VALUE\n         ];\n      }\n      if (count($iterator)) {\n         $prev       = -1;\n         $datatoadd = [];\n\n         while ($data = $iterator->next()) {\n            if ($multi && ($data[\"entities_id\"] != $prev)) {\n               if (count($datatoadd)) {\n                  $results[] = [\n                     'text' => Dropdown::getDropdownName(\"glpi_entities\", $prev),\n                     'children' => $datatoadd\n                  ];\n               }\n               $prev = $data[\"entities_id\"];\n               // Reset last level displayed :\n               $datatoadd = [];\n            }\n            $output = $data['name'];\n            $ID     = $data['id'];\n\n            if ($_SESSION[\"glpiis_ids_visible\"]\n               || empty($output)) {\n               $output = sprintf(__('%1$s (%2$s)'), $output, $ID);\n            }\n            if (!empty($data['serial'])) {\n               $output = sprintf(__('%1$s - %2$s'), $output, $data[\"serial\"]);\n            }\n            if (!empty($data['otherserial'])) {\n               $output = sprintf(__('%1$s - %2$s'), $output, $data[\"otherserial\"]);\n            }\n            $datatoadd[] = [\n               'id' => $ID,\n               'text' => $output\n            ];\n         }\n\n         if ($multi) {\n            if (count($datatoadd)) {\n               $results[] = [\n                  'text' => Dropdown::getDropdownName(\"glpi_entities\", $prev),\n                  'children' => $datatoadd\n               ];\n            }\n         } else {\n            if (count($datatoadd)) {\n               $results = array_merge($results, $datatoadd);\n            }\n         }\n      }\n\n      $ret['results'] = $results;\n      return ($json === true) ? json_encode($ret) : $ret;\n   }\n\n   /**\n    * Get dropdown find num\n    *\n    * @param array   $post Posted values\n    * @param boolean $json Encode to JSON, default to true\n    *\n    * @return string|array\n    */\n   public static function getDropdownFindNum($post, $json = true) {\n      global $DB, $CFG_GLPI;\n\n      // Security\n      if (!$DB->tableExists($post['table'])) {\n         return;\n      }\n\n      $itemtypeisplugin = isPluginItemType($post['itemtype']);\n\n      // check if asked itemtype is the one originaly requested by the form\n      if (!Session::validateIDOR($post)) {\n         return;\n      }\n\n      if (!$item = getItemForItemtype($post['itemtype'])) {\n         return;\n      }\n\n      $where = [];\n      if (isset($post['used']) && !empty($post['used'])) {\n         $where['NOT'] = ['id' => $post['used']];\n      }\n\n      if ($item->maybeDeleted()) {\n         $where['is_deleted'] = 0;\n      }\n\n      if ($item->maybeTemplate()) {\n         $where['is_template'] = 0;\n      }\n\n      if (isset($_POST['searchText']) && (strlen($post['searchText']) > 0)) {\n         $search = ['LIKE', Search::makeTextSearchValue($post['searchText'])];\n         $orwhere =[\n            'name'   => $search,\n            'id'     => $post['searchText']\n         ];\n\n         if ($DB->fieldExists($post['table'], \"contact\")) {\n            $orwhere['contact'] = $search;\n         }\n         if ($DB->fieldExists($post['table'], \"serial\")) {\n            $orwhere['serial'] = $search;\n         }\n         if ($DB->fieldExists($post['table'], \"otherserial\")) {\n            $orwhere['otherserial'] = $search;\n         }\n         $where[] = ['OR' => $orwhere];\n      }\n\n      // If software or plugins : filter to display only the objects that are allowed to be visible in Helpdesk\n      $filterHelpdesk = in_array($post['itemtype'], $CFG_GLPI[\"helpdesk_visible_types\"]);\n\n      if (isset($post['context'])\n         && $post['context'] == \"impact\"\n         && Impact::isEnabled($post['itemtype'])\n      ) {\n         $filterHelpdesk = false;\n      }\n\n      if ($filterHelpdesk) {\n         $where['is_helpdesk_visible'] = 1;\n      }\n\n      if ($item->isEntityAssign()) {\n         if (isset($post[\"entity_restrict\"]) && ($post[\"entity_restrict\"] >= 0)) {\n            $entity = $post[\"entity_restrict\"];\n         } else {\n            $entity = '';\n         }\n\n         // allow opening ticket on recursive object (printer, software, ...)\n         $recursive = $item->maybeRecursive();\n         $where     = $where + getEntitiesRestrictCriteria($post['table'], '', $entity, $recursive);\n      }\n\n      if (!isset($post['page'])) {\n         $post['page']       = 1;\n         $post['page_limit'] = $CFG_GLPI['dropdown_max'];\n      }\n\n      $start = intval(($post['page']-1)*$post['page_limit']);\n      $limit = intval($post['page_limit']);\n\n      $iterator = $DB->request([\n         'FROM'   => $post['table'],\n         'WHERE'  => $where,\n         'ORDER'  => $item->getNameField(),\n         'LIMIT'  => $limit,\n         'START'  => $start\n      ]);\n\n      $results = [];\n\n      // Display first if no search\n      if ($post['page'] == 1 && empty($post['searchText'])) {\n         $results[] = [\n            'id' => 0,\n            'text' => Dropdown::EMPTY_VALUE\n         ];\n      }\n      $count = 0;\n      if (count($iterator)) {\n         while ($data = $iterator->next()) {\n            $output = $data[$item->getNameField()];\n\n            if (isset($data['contact']) && !empty($data['contact'])) {\n               $output = sprintf(__('%1$s - %2$s'), $output, $data['contact']);\n            }\n            if (isset($data['serial']) && !empty($data['serial'])) {\n               $output = sprintf(__('%1$s - %2$s'), $output, $data['serial']);\n            }\n            if (isset($data['otherserial']) && !empty($data['otherserial'])) {\n               $output = sprintf(__('%1$s - %2$s'), $output, $data['otherserial']);\n            }\n\n            if (empty($output)\n               || $_SESSION['glpiis_ids_visible']) {\n               $output = sprintf(__('%1$s (%2$s)'), $output, $data['id']);\n            }\n\n            $results[] = [\n               'id' => $data['id'],\n               'text' => $output\n            ];\n            $count++;\n         }\n      }\n\n      $ret['count']   = $count;\n      $ret['results'] = $results;\n\n      return ($json === true) ? json_encode($ret) : $ret;\n   }\n\n   /**\n    * Get dropdown netpoint\n    *\n    * @param array   $post Posted values\n    * @param boolean $json Encode to JSON, default to true\n    *\n    * @return string|array\n    */\n   public static function getDropdownNetpoint($post, $json = true) {\n      global $DB, $CFG_GLPI;\n\n      // Make a select box with preselected values\n      $results           = [];\n      $location_restrict = false;\n\n      if (!isset($post['page'])) {\n         $post['page']       = 1;\n         $post['page_limit'] = $CFG_GLPI['dropdown_max'];\n      }\n\n      $start = intval(($post['page']-1)*$post['page_limit']);\n      $limit = intval($post['page_limit']);\n\n      $criteria = [\n         'SELECT'    => [\n            'glpi_netpoints.comment AS comment',\n            'glpi_netpoints.id',\n            'glpi_netpoints.name AS netpname',\n            'glpi_locations.completename AS loc'\n         ],\n         'FROM'      => 'glpi_netpoints',\n         'LEFT JOIN' => [\n            'glpi_locations'  => [\n               'ON' => [\n                  'glpi_netpoints'  => 'locations_id',\n                  'glpi_locations'  => 'id'\n               ]\n            ]\n         ],\n         'WHERE'     => [],\n         'ORDERBY'   => [\n            'glpi_locations.completename',\n            'glpi_netpoints.name'\n         ],\n         'START'     => $start,\n         'LIMIT'     => $limit\n      ];\n\n      if (!(isset($post[\"devtype\"])\n            && ($post[\"devtype\"] != 'NetworkEquipment')\n            && isset($post[\"locations_id\"])\n            && ($post[\"locations_id\"] > 0))) {\n\n         if (isset($post[\"entity_restrict\"]) && ($post[\"entity_restrict\"] >= 0)) {\n            $criteria['WHERE']['glpi_netpoints.entities_id'] = $post['entity_restrict'];\n         } else {\n            $criteria['WHERE'] = $criteria['WHERE'] + getEntitiesRestrictCriteria('glpi_locations');\n         }\n      }\n\n      if (isset($post['searchText']) && strlen($post['searchText']) > 0) {\n         $criteria['WHERE']['OR'] = [\n            'glpi_netpoints.name'         => ['LIKE', Search::makeTextSearchValue($post['searchText'])],\n            'glpi_locations.completename' => ['LIKE', Search::makeTextSearchValue($post['searchText'])]\n         ];\n      }\n\n      if (isset($post[\"devtype\"]) && !empty($post[\"devtype\"])) {\n         $criteria['LEFT JOIN']['glpi_networkportethernets'] = [\n            'ON' => [\n               'glpi_networkportethernets'   => 'netpoints_id',\n               'glpi_netpoints'              => 'id'\n            ]\n         ];\n\n         $extra_and = [];\n         if ($post[\"devtype\"] == 'NetworkEquipment') {\n            $extra_and['glpi_networkports.itemtype'] = 'NetworkEquipment';\n         } else {\n            $extra_and['NOT'] = ['glpi_networkports.itemtype' => 'NetworkEquipment'];\n            if (isset($post[\"locations_id\"]) && ($post[\"locations_id\"] >= 0)) {\n               $location_restrict = true;\n               $criteria['WHERE']['glpi_netpoints.locations_id'] = $post['locations_id'];\n            }\n         }\n\n         $criteria['LEFT JOIN']['glpi_networkports'] = [\n            'ON' => [\n               'glpi_networkportethernets'   => 'id',\n               'glpi_networkports'           => 'id', [\n                  'AND' => [\n                     'glpi_networkports.instantiation_type'    => 'NetworkPortEthernet',\n                  ] + $extra_and\n               ]\n            ]\n         ];\n         $criteria['WHERE']['glpi_networkportethernets.netpoints_id'] = null;\n      } else if (isset($post[\"locations_id\"]) && ($post[\"locations_id\"] >= 0)) {\n         $location_restrict = true;\n         $criteria['WHERE']['glpi_netpoints.locations_id'] = $post['locations_id'];\n      }\n\n      $iterator = $DB->request($criteria);\n\n      // Display first if no search\n      if (empty($post['searchText'])) {\n         if ($post['page'] == 1) {\n            $results[] = [\n               'id' => 0,\n               'text' => Dropdown::EMPTY_VALUE\n            ];\n         }\n      }\n\n      $count = 0;\n      if (count($iterator)) {\n         while ($data = $iterator->next()) {\n            $output     = $data['netpname'];\n            $loc        = $data['loc'];\n            $ID         = $data['id'];\n            $title      = $output;\n            if (isset($data[\"comment\"])) {\n               //TRANS: %1$s is the location, %2$s is the comment\n               $title = sprintf(__('%1$s - %2$s'), $title, $loc);\n               $title = sprintf(__('%1$s - %2$s'), $title, $data[\"comment\"]);\n            }\n            if (!$location_restrict) {\n               $output = sprintf(__('%1$s (%2$s)'), $output, $loc);\n            }\n\n            $results[] = [\n               'id' => $ID,\n               'text' => $output,\n               'title' => $title\n            ];\n            $count++;\n         }\n      }\n\n      $ret['count']   = $count;\n      $ret['results'] = $results;\n\n      return ($json === true) ? json_encode($ret) : $ret;\n   }\n\n   /**\n    * Get dropdown number\n    *\n    * @param array   $post Posted values\n    * @param boolean $json Encode to JSON, default to true\n    *\n    * @return string|array\n    */\n   public static function getDropdownNumber($post, $json = true) {\n      global $CFG_GLPI;\n\n      $used = [];\n\n      if (isset($post['used'])) {\n         $used = $post['used'];\n      }\n\n      if (!isset($post['value'])) {\n         $post['value'] = 0;\n      }\n\n      if (!isset($post['page'])) {\n         $post['page']       = 1;\n         $post['page_limit'] = $CFG_GLPI['dropdown_max'];\n      }\n\n      if (isset($post['toadd'])) {\n         $toadd = $post['toadd'];\n      } else {\n         $toadd = [];\n      }\n\n      $data = [];\n      // Count real items returned\n      $count = 0;\n\n      if ($post['page'] == 1) {\n         if (count($toadd)) {\n            foreach ($toadd as $key => $val) {\n               $data[] = ['id' => $key,\n                  'text' => (string)stripslashes($val)];\n            }\n         }\n      }\n\n      $values = [];\n\n      if (!isset($post['min'])) {\n         $post['min'] = 1;\n      }\n\n      if (!isset($post['step'])) {\n         $post['step'] = 1;\n      }\n\n      if (!isset($post['max'])) {\n         //limit max entries to avoid loop issues\n         $post['max'] = $CFG_GLPI['dropdown_max'] * $post['step'];\n      }\n\n      for ($i=$post['min']; $i<=$post['max']; $i+=$post['step']) {\n         if (!empty($post['searchText']) && strstr($i, $post['searchText']) || empty($post['searchText'])) {\n            if (!in_array($i, $used)) {\n               $values[\"$i\"] = $i;\n            }\n         }\n      }\n\n      if (count($values)) {\n         $start  = ($post['page']-1)*$post['page_limit'];\n         $tosend = array_splice($values, $start, $post['page_limit']);\n         foreach ($tosend as $i) {\n            $txt = $i;\n            if (isset($post['unit'])) {\n               $txt = Dropdown::getValueWithUnit($i, $post['unit']);\n            }\n            $data[] = ['id' => $i,\n               'text' => (string)$txt];\n            $count++;\n         }\n\n      } else {\n         if (!isset($toadd[-1])) {\n            $value = -1;\n            if (isset($post['min']) && $value < $post['min']) {\n               $value = $post['min'];\n            } else if (isset($post['max']) && $value > $post['max']) {\n               $value = $post['max'];\n            }\n\n            if (isset($post['unit'])) {\n               $txt = Dropdown::getValueWithUnit($value, $post['unit']);\n            }\n            $data[] = [\n               'id' => $value,\n               'text' => (string)stripslashes($txt)\n            ];\n            $count++;\n         }\n      }\n\n      $ret['results'] = $data;\n      $ret['count']   = $count;\n\n      return ($json === true) ? json_encode($ret) : $ret;\n   }\n\n   /**\n    * Get dropdown users\n    *\n    * @param array   $post Posted values\n    * @param boolean $json Encode to JSON, default to true\n    *\n    * @return string|array\n    */\n   public static function getDropdownUsers($post, $json = true) {\n      global $CFG_GLPI;\n\n      // check if asked itemtype is the one originaly requested by the form\n      if (!Session::validateIDOR($post + ['itemtype' => 'User', 'right' => ($post['right'] ?? \"\")])) {\n         return;\n      }\n\n      if (!isset($post['right'])) {\n         $post['right'] = \"all\";\n      }\n\n      // Default view : Nobody\n      if (!isset($post['all'])) {\n         $post['all'] = 0;\n      }\n\n      $used = [];\n\n      if (isset($post['used'])) {\n         $used = $post['used'];\n      }\n\n      if (!isset($post['value'])) {\n         $post['value'] = 0;\n      }\n\n      if (!isset($post['page'])) {\n         $post['page']       = 1;\n         $post['page_limit'] = $CFG_GLPI['dropdown_max'];\n      }\n\n      $entity_restrict = -1;\n      if (isset($post['entity_restrict'])) {\n         $entity_restrict = Toolbox::jsonDecode($post['entity_restrict']);\n      }\n\n      $start  = intval(($post['page']-1)*$post['page_limit']);\n      $searchText = (isset($post['searchText']) ? $post['searchText'] : null);\n      $inactive_deleted = isset($post['inactive_deleted']) ? $post['inactive_deleted'] : 0;\n      $result = User::getSqlSearchResult(\n         false,\n         $post['right'],\n         $entity_restrict,\n         $post['value'],\n         $used,\n         $searchText,\n         $start,\n         (int)$post['page_limit'],\n         $inactive_deleted\n      );\n\n      $users = [];\n\n      // Count real items returned\n      $count = 0;\n      if (count($result)) {\n         while ($data = $result->next()) {\n            $users[$data[\"id\"]] = formatUserName($data[\"id\"], $data[\"name\"], $data[\"realname\"],\n                                                $data[\"firstname\"]);\n            $logins[$data[\"id\"]] = $data[\"name\"];\n         }\n      }\n\n      $results = [];\n\n      // Display first if empty search\n      if ($post['page'] == 1 && empty($post['searchText'])) {\n         if ($post['all'] == 0) {\n            $results[] = [\n               'id' => 0,\n               'text' => Dropdown::EMPTY_VALUE\n            ];\n         } else if ($post['all'] == 1) {\n            $results[] = [\n               'id' => 0,\n               'text' => __('All')\n            ];\n         }\n      }\n\n      if (count($users)) {\n         foreach ($users as $ID => $output) {\n            $title = sprintf(__('%1$s - %2$s'), $output, $logins[$ID]);\n\n            $results[] = [\n               'id' => $ID,\n               'text' => $output,\n               'title' => $title\n            ];\n            $count++;\n         }\n      }\n\n      $ret['results'] = $results;\n      $ret['count']   = $count;\n\n      return ($json === true) ? json_encode($ret) : $ret;\n   }\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2021 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access this file directly\");\n}\n\nuse Sabre\\VObject;\nuse Glpi\\Exception\\ForgetPasswordException;\nuse Glpi\\Exception\\PasswordTooWeakException;\n\nclass User extends CommonDBTM {\n\n   // From CommonDBTM\n   public $dohistory         = true;\n   public $history_blacklist = ['date_mod', 'date_sync', 'last_login',\n                                     'publicbookmarkorder', 'privatebookmarkorder'];\n\n   // NAME FIRSTNAME ORDER TYPE\n   const REALNAME_BEFORE   = 0;\n   const FIRSTNAME_BEFORE  = 1;\n\n   const IMPORTEXTAUTHUSERS  = 1024;\n   const READAUTHENT         = 2048;\n   const UPDATEAUTHENT       = 4096;\n\n   static $rightname = 'user';\n\n   static $undisclosedFields = [\n      'password',\n      'personal_token',\n      'api_token',\n      'cookie_token',\n   ];\n\n   private $entities = null;\n\n\n   static function getTypeName($nb = 0) {\n      return _n('User', 'Users', $nb);\n   }\n\n   static function getMenuShorcut() {\n      return 'u';\n   }\n\n   static function getAdditionalMenuOptions() {\n\n      if (Session::haveRight('user', self::IMPORTEXTAUTHUSERS)) {\n         return [\n            'ldap' => [\n               'title' => AuthLDAP::getTypeName(Session::getPluralNumber()),\n               'page'  => '/front/ldap.php',\n            ],\n         ];\n      }\n      return false;\n   }\n\n\n   function canViewItem() {\n      if (Session::canViewAllEntities()\n          || Session::haveAccessToOneOfEntities($this->getEntities())) {\n         return true;\n      }\n      return false;\n   }\n\n\n   function canCreateItem() {\n\n      // Will be created from form, with selected entity/profile\n      if (isset($this->input['_profiles_id']) && ($this->input['_profiles_id'] > 0)\n          && Profile::currentUserHaveMoreRightThan([$this->input['_profiles_id']])\n          && isset($this->input['_entities_id'])\n          && Session::haveAccessToEntity($this->input['_entities_id'])) {\n         return true;\n      }\n      // Will be created with default value\n      if (Session::haveAccessToEntity(0) // Access to root entity (required when no default profile)\n          || (Profile::getDefault() > 0)) {\n         return true;\n      }\n\n      if (($_SESSION['glpiactive_entity'] > 0)\n          && (Profile::getDefault() == 0)) {\n         echo \"<div class='tab_cadre_fixe warning'>\".\n                __('You must define a default profile to create a new user').\"</div>\";\n      }\n\n      return false;\n   }\n\n\n   function canUpdateItem() {\n\n      $entities = Profile_User::getUserEntities($this->fields['id'], false);\n      if (Session::canViewAllEntities()\n          || Session::haveAccessToOneOfEntities($entities)) {\n         return true;\n      }\n      return false;\n   }\n\n\n   function canDeleteItem() {\n      if (Session::canViewAllEntities()\n          || Session::haveAccessToAllOfEntities($this->getEntities())) {\n         return true;\n      }\n      return false;\n   }\n\n\n   function canPurgeItem() {\n      return $this->canDeleteItem();\n   }\n\n\n   function isEntityAssign() {\n      // glpi_users.entities_id is only a pref.\n      return false;\n   }\n\n\n   /**\n    * Compute preferences for the current user mixing config and user data.\n    *\n    * @return void\n    */\n   function computePreferences() {\n      global $CFG_GLPI;\n\n      if (isset($this->fields['id'])) {\n         foreach ($CFG_GLPI['user_pref_field'] as $f) {\n            if (is_null($this->fields[$f])) {\n               $this->fields[$f] = $CFG_GLPI[$f];\n            }\n         }\n      }\n      /// Specific case for show_count_on_tabs : global config can forbid\n      if ($CFG_GLPI['show_count_on_tabs'] == -1) {\n         $this->fields['show_count_on_tabs'] = 0;\n      }\n   }\n\n\n   /**\n    * Load minimal session for user.\n    *\n    * @param integer $entities_id  Entity to use\n    * @param boolean $is_recursive Whether to load entities recursivly or not\n    *\n    * @return void\n    *\n    * @since 0.83.7\n    */\n   function loadMinimalSession($entities_id, $is_recursive) {\n      global $CFG_GLPI;\n\n      if (isset($this->fields['id']) && !isset($_SESSION[\"glpiID\"])) {\n         Session::destroy();\n         Session::start();\n         $_SESSION[\"glpiID\"]                      = $this->fields['id'];\n         $_SESSION[\"glpi_use_mode\"]               = Session::NORMAL_MODE;\n         Session::loadEntity($entities_id, $is_recursive);\n         $this->computePreferences();\n         foreach ($CFG_GLPI['user_pref_field'] as $field) {\n            if (isset($this->fields[$field])) {\n               $_SESSION[\"glpi$field\"] = $this->fields[$field];\n            }\n         }\n         Session::loadGroups();\n         Session::loadLanguage();\n      }\n   }\n\n\n   function getTabNameForItem(CommonGLPI $item, $withtemplate = 0) {\n\n      switch ($item->getType()) {\n         case __CLASS__ :\n            $ong    = [];\n            $ong[1] = __('Used items');\n            $ong[2] = __('Managed items');\n            return $ong;\n\n         case 'Preference' :\n            return __('Main');\n      }\n      return '';\n   }\n\n\n   static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0) {\n      global $CFG_GLPI;\n\n      switch ($item->getType()) {\n         case __CLASS__ :\n            $item->showItems($tabnum==2);\n            return true;\n\n         case 'Preference' :\n            $user = new self();\n            $user->showMyForm($CFG_GLPI['root_doc'].\"/front/preference.php\",\n                              Session::getLoginUserID());\n            return true;\n      }\n      return false;\n   }\n\n\n   function defineTabs($options = []) {\n\n      $ong = [];\n      $this->addDefaultFormTab($ong);\n      $this->addImpactTab($ong, $options);\n      $this->addStandardTab('Profile_User', $ong, $options);\n      $this->addStandardTab('Group_User', $ong, $options);\n      $this->addStandardTab('Config', $ong, $options);\n      $this->addStandardTab(__CLASS__, $ong, $options);\n      $this->addStandardTab('Ticket', $ong, $options);\n      $this->addStandardTab('Item_Problem', $ong, $options);\n      $this->addStandardTab('Change_Item', $ong, $options);\n      $this->addStandardTab('Document_Item', $ong, $options);\n      $this->addStandardTab('Reservation', $ong, $options);\n      $this->addStandardTab('Auth', $ong, $options);\n      $this->addStandardTab('Link', $ong, $options);\n      $this->addStandardTab('Certificate_Item', $ong, $options);\n      $this->addStandardTab('Log', $ong, $options);\n\n      return $ong;\n   }\n\n\n   function post_getEmpty() {\n      global $CFG_GLPI;\n\n      $this->fields[\"is_active\"] = 1;\n      if (isset($CFG_GLPI[\"language\"])) {\n         $this->fields['language'] = $CFG_GLPI[\"language\"];\n      } else {\n         $this->fields['language'] = \"en_GB\";\n      }\n   }\n\n\n   function pre_deleteItem() {\n      global $DB;\n\n      $entities = $this->getEntities();\n      $view_all = Session::canViewAllEntities();\n      // Have right on all entities ?\n      $all      = true;\n      if (!$view_all) {\n         foreach ($entities as $ent) {\n            if (!Session::haveAccessToEntity($ent)) {\n               $all = false;\n            }\n         }\n      }\n      if ($all) { // Mark as deleted\n         return true;\n      }\n      // only delete profile\n      foreach ($entities as $ent) {\n         if (Session::haveAccessToEntity($ent)) {\n            $all   = false;\n            $DB->delete(\n               'glpi_profiles_users', [\n                  'users_id'     => $this->fields['id'],\n                  'entities_id'  => $ent\n               ]\n            );\n         }\n         return false;\n      }\n   }\n\n\n   function cleanDBonPurge() {\n\n      global $DB;\n\n      // ObjectLock does not extends CommonDBConnexity\n      $ol = new ObjectLock();\n      $ol->deleteByCriteria(['users_id' => $this->fields['id']]);\n\n      // Reminder does not extends CommonDBConnexity\n      $r = new Reminder();\n      $r->deleteByCriteria(['users_id' => $this->fields['id']]);\n\n      // Delete private bookmark\n      $ss = new SavedSearch();\n      $ss->deleteByCriteria(\n         [\n            'users_id'   => $this->fields['id'],\n            'is_private' => 1,\n         ]\n      );\n\n      // Set no user to public bookmark\n      $DB->update(\n         SavedSearch::getTable(), [\n            'users_id' => 0\n         ], [\n            'users_id' => $this->fields['id']\n         ]\n      );\n\n      // Set no user to consumables\n      $DB->update(\n         'glpi_consumables', [\n            'items_id' => 0,\n            'itemtype' => 'NULL',\n            'date_out' => 'NULL'\n         ], [\n            'items_id' => $this->fields['id'],\n            'itemtype' => 'User'\n         ]\n      );\n\n      $this->deleteChildrenAndRelationsFromDb(\n         [\n            Certificate_Item::class,\n            Change_User::class,\n            Group_User::class,\n            KnowbaseItem_User::class,\n            Problem_User::class,\n            Profile_User::class,\n            ProjectTaskTeam::class,\n            ProjectTeam::class,\n            Reminder_User::class,\n            RSSFeed_User::class,\n            SavedSearch_User::class,\n            Ticket_User::class,\n            UserEmail::class,\n         ]\n      );\n\n      if ($this->fields['id'] > 0) { // Security\n         // DisplayPreference does not extends CommonDBConnexity\n         $dp = new DisplayPreference();\n         $dp->deleteByCriteria(['users_id' => $this->fields['id']]);\n      }\n\n      $this->dropPictureFiles($this->fields['picture']);\n\n      // Ticket rules use various _users_id_*\n      Rule::cleanForItemAction($this, '_users_id%');\n      Rule::cleanForItemCriteria($this, '_users_id%');\n\n      // Alert does not extends CommonDBConnexity\n      $alert = new Alert();\n      $alert->cleanDBonItemDelete($this->getType(), $this->fields['id']);\n   }\n\n\n   /**\n    * Retrieve a user from the database using its login.\n    *\n    * @param string $name Login of the user\n    *\n    * @return boolean\n    */\n   function getFromDBbyName($name) {\n      return $this->getFromDBByCrit(['name' => $name]);\n   }\n\n   /**\n    * Retrieve a user from the database using its login.\n    *\n    * @param string  $name     Login of the user\n    * @param integer $authtype Auth type (see Auth constants)\n    * @param integer $auths_id ID of auth server\n    *\n    * @return boolean\n    */\n   function getFromDBbyNameAndAuth($name, $authtype, $auths_id) {\n      return $this->getFromDBByCrit([\n         'name'     => $name,\n         'authtype' => $authtype,\n         'auths_id' => $auths_id\n         ]);\n   }\n\n   /**\n    * Retrieve a user from the database using value of the sync field.\n    *\n    * @param string $value Value of the sync field\n    *\n    * @return boolean\n    */\n   function getFromDBbySyncField($value) {\n      return $this->getFromDBByCrit(['sync_field' => $value]);\n   }\n\n   /**\n    * Retrieve a user from the database using it's dn.\n    *\n    * @since 0.84\n    *\n    * @param string $user_dn dn of the user\n    *\n    * @return boolean\n    */\n   function getFromDBbyDn($user_dn) {\n      return $this->getFromDBByCrit(['user_dn' => $user_dn]);\n   }\n\n\n   /**\n    * Retrieve a user from the database using its email.\n    *\n    * @since 9.3 Can pass condition as a parameter\n    *\n    * @param string $email     user email\n    * @param array  $condition add condition\n    *\n    * @return boolean\n    */\n   function getFromDBbyEmail($email, $condition = []) {\n      global $DB;\n\n      $crit = [\n         'SELECT'    => $this->getTable() . '.id',\n         'FROM'      => $this->getTable(),\n         'LEFT JOIN'  => [\n            'glpi_useremails' => [\n               'FKEY' => [\n                  $this->getTable() => 'id',\n                  'glpi_useremails' => 'users_id'\n               ]\n            ]\n         ],\n         'WHERE'     => ['glpi_useremails.email' => $email] + $condition\n      ];\n\n      $iter = $DB->request($crit);\n      if ($iter->numrows()==1) {\n         $row = $iter->next();\n         return $this->getFromDB($row['id']);\n      }\n      return false;\n   }\n\n\n   /**\n    * Get the default email of the user.\n    *\n    * @return string\n    */\n   function getDefaultEmail() {\n\n      if (!isset($this->fields['id'])) {\n         return '';\n      }\n\n      return UserEmail::getDefaultForUser($this->fields['id']);\n   }\n\n\n   /**\n    * Get all emails of the user.\n    *\n    * @return string[]\n    */\n   function getAllEmails() {\n\n      if (!isset($this->fields['id'])) {\n         return [];\n      }\n      return UserEmail::getAllForUser($this->fields['id']);\n   }\n\n\n   /**\n    * Check if the email is attached to the current user.\n    *\n    * @param string $email\n    *\n    * @return boolean\n    */\n   function isEmail($email) {\n\n      if (!isset($this->fields['id'])) {\n         return false;\n      }\n      return UserEmail::isEmailForUser($this->fields['id'], $email);\n   }\n\n\n   /**\n    * Retrieve a user from the database using its personal token.\n    *\n    * @param string $token user token\n    * @param string $field the field storing the token\n    *\n    * @return boolean\n    */\n   function getFromDBbyToken($token, $field = 'personal_token') {\n      $fields = ['personal_token', 'api_token'];\n      if (!in_array($field, $fields)) {\n         Toolbox::logWarning('User::getFromDBbyToken() can only be called with $field parameter with theses values: \\'' . implode('\\', \\'', $fields) . '\\'');\n         return false;\n      }\n\n      return $this->getFromDBByCrit([$this->getTable() . \".$field\" => $token]);\n   }\n\n\n   function prepareInputForAdd($input) {\n      global $DB;\n\n      if (isset($input['_stop_import'])) {\n         return false;\n      }\n\n      if (!Auth::isValidLogin(stripslashes($input['name']))) {\n         Session::addMessageAfterRedirect(__('The login is not valid. Unable to add the user.'),\n                                          false, ERROR);\n         return false;\n      }\n\n      // avoid xss (picture field is autogenerated)\n      if (isset($input['picture'])) {\n         $input['picture'] = 'NULL';\n      }\n\n      if (!isset($input[\"authtype\"])) {\n         $input[\"authtype\"] = Auth::DB_GLPI;\n      }\n\n      if (!isset($input[\"auths_id\"])) {\n         $input[\"auths_id\"] = 0;\n      }\n\n      // Check if user does not exists\n      $iterator = $DB->request([\n         'FROM'   => $this->getTable(),\n         'WHERE'  => [\n            'name'      => $input['name'],\n            'authtype'  => $input['authtype'],\n            'auths_id'  => $input['auths_id']\n         ],\n         'LIMIT'  => 1\n      ]);\n\n      if (count($iterator)) {\n         Session::addMessageAfterRedirect(__('Unable to add. The user already exists.'),\n                                          false, ERROR);\n         return false;\n      }\n\n      if (isset($input[\"password2\"])) {\n         if (empty($input[\"password\"])) {\n            unset ($input[\"password\"]);\n\n         } else {\n            if ($input[\"password\"] == $input[\"password2\"]) {\n               if (Config::validatePassword($input[\"password\"])) {\n                  $input[\"password\"]\n                     = Auth::getPasswordHash(Toolbox::unclean_cross_side_scripting_deep(stripslashes($input[\"password\"])));\n\n                  $input['password_last_update'] = $_SESSION['glpi_currenttime'];\n               } else {\n                  unset($input[\"password\"]);\n               }\n               unset($input[\"password2\"]);\n            } else {\n               Session::addMessageAfterRedirect(__('Error: the two passwords do not match'),\n                                                false, ERROR);\n               return false;\n            }\n         }\n      }\n\n      if (isset($input[\"_extauth\"])) {\n         $input[\"password\"] = \"\";\n      }\n\n      // Force DB default values : not really needed\n      if (!isset($input[\"is_active\"])) {\n         $input[\"is_active\"] = 1;\n      }\n\n      if (!isset($input[\"is_deleted\"])) {\n         $input[\"is_deleted\"] = 0;\n      }\n\n      if (!isset($input[\"entities_id\"])) {\n         $input[\"entities_id\"] = 0;\n      }\n\n      if (!isset($input[\"profiles_id\"])) {\n         $input[\"profiles_id\"] = 0;\n      }\n\n      return $input;\n   }\n\n   public function prepareInputForClone($input) {\n      if (isset($input['name'])) {\n         $suffix = 1;\n         $possibleName = $input['name'].$suffix;\n         while ($this->getFromDBbyName($possibleName)) {\n            $suffix++;\n            $possibleName = $input['name'].$suffix;\n         }\n         $input['name'] = $possibleName;\n      }\n      return $input;\n   }\n\n\n   function post_addItem() {\n\n      $this->updateUserEmails();\n      $this->syncLdapGroups();\n      $this->syncDynamicEmails();\n\n      $this->applyGroupsRules();\n      $rulesplayed = $this->applyRightRules();\n      $picture     = $this->syncLdapPhoto();\n\n      //add picture in user fields\n      if (!empty($picture)) {\n         $this->update(['id'      => $this->fields['id'],\n                             'picture' => $picture]);\n      }\n\n      // Add default profile\n      if (!$rulesplayed) {\n         $affectation = [];\n         if (isset($this->input['_profiles_id']) && $this->input['_profiles_id']\n            && Profile::currentUserHaveMoreRightThan([$this->input['_profiles_id']])\n            ) {\n            $profile                   = $this->input['_profiles_id'];\n            // Choosen in form, so not dynamic\n            $affectation['is_dynamic'] = 0;\n         } else {\n            $profile                   = Profile::getDefault();\n            // Default right as dynamic. If dynamic rights are set it will disappear.\n            $affectation['is_dynamic'] = 1;\n            $affectation['is_default_profile'] = 1;\n         }\n\n         if ($profile) {\n            if (isset($this->input[\"_entities_id\"])) {\n               // entities_id (user's pref) always set in prepareInputForAdd\n               // use _entities_id for default right\n               $affectation[\"entities_id\"] = $this->input[\"_entities_id\"];\n\n            } else if (isset($_SESSION['glpiactive_entity'])) {\n               $affectation[\"entities_id\"] = $_SESSION['glpiactive_entity'];\n\n            } else {\n               $affectation[\"entities_id\"] = 0;\n            }\n            if (isset($this->input[\"_is_recursive\"])) {\n               $affectation[\"is_recursive\"] = $this->input[\"_is_recursive\"];\n            } else {\n               $affectation[\"is_recursive\"] = 0;\n            }\n\n            $affectation[\"profiles_id\"]  = $profile;\n            $affectation[\"users_id\"]     = $this->fields[\"id\"];\n            $right                       = new Profile_User();\n            $right->add($affectation);\n         }\n      }\n   }\n\n\n   function prepareInputForUpdate($input) {\n      global $CFG_GLPI;\n\n      // avoid xss (picture name is autogenerated when uploading/synchronising the picture)\n      unset($input['picture']);\n\n      //picture manually uploaded by user\n      if (isset($input[\"_blank_picture\"]) && $input[\"_blank_picture\"]) {\n         self::dropPictureFiles($this->fields['picture']);\n         $input['picture'] = 'NULL';\n      } else {\n         $newPicture = false;\n         if (!isAPI()) {\n            if (isset($input[\"_picture\"][0]) && !empty($input[\"_picture\"][0])) {\n               $input[\"_picture\"] = $input[\"_picture\"][0];\n            }\n         }\n         if (isset($input[\"_picture\"]) && !empty($input[\"_picture\"])) {\n            $newPicture = true;\n         }\n         if ($newPicture) {\n            $fullpath = GLPI_TMP_DIR.\"/\".$input[\"_picture\"];\n            if (Toolbox::getMime($fullpath, 'image')) {\n               // Unlink old picture (clean on changing format)\n               self::dropPictureFiles($this->fields['picture']);\n               // Move uploaded file\n               $filename     = uniqid($this->fields['id'].'_');\n               $sub          = substr($filename, -2); /* 2 hex digit */\n\n               // output images with possible transparency to png, other to jpg\n               $extension = strtolower(pathinfo($fullpath, PATHINFO_EXTENSION));\n               $extension = in_array($extension, ['png', 'gif'])\n                  ? 'png'\n                  : 'jpg';\n\n               @mkdir(GLPI_PICTURE_DIR . \"/$sub\");\n               $picture_path = GLPI_PICTURE_DIR  . \"/$sub/${filename}.$extension\";\n               self::dropPictureFiles(\"$sub/${filename}.$extension\");\n\n               if (Document::isImage($fullpath)\n                   && Document::renameForce($fullpath, $picture_path)) {\n                  Session::addMessageAfterRedirect(__('The file is valid. Upload is successful.'));\n                  // For display\n                  $input['picture'] = \"$sub/${filename}.$extension\";\n\n                  //prepare a thumbnail\n                  $thumb_path = GLPI_PICTURE_DIR . \"/$sub/${filename}_min.$extension\";\n                  Toolbox::resizePicture($picture_path, $thumb_path);\n               } else {\n                  Session::addMessageAfterRedirect(__('Potential upload attack or file too large. Moving temporary file failed.'),\n                        false, ERROR);\n               }\n            } else {\n               Session::addMessageAfterRedirect(__('The file is not an image file.'),\n                     false, ERROR);\n            }\n         } else {\n            //ldap jpegphoto synchronisation.\n            $picture = $this->syncLdapPhoto();\n            if (!empty($picture)) {\n               $input['picture'] = $picture;\n            }\n         }\n      }\n\n      if (isset($input[\"password2\"])) {\n         // Empty : do not update\n         if (empty($input[\"password\"])) {\n            unset($input[\"password\"]);\n\n         } else {\n            if ($input[\"password\"] == $input[\"password2\"]) {\n               // Check right : my password of user with lesser rights\n               if (isset($input['id'])\n                   && !Auth::checkPassword($input['password'], $this->fields['password']) // Validate that password is not same as previous\n                   && Config::validatePassword($input[\"password\"])\n                   && (($input['id'] == Session::getLoginUserID())\n                       || $this->currentUserHaveMoreRightThan($input['id'])\n                       // Permit to change password with token and email\n                       || (($input['password_forget_token'] == $this->fields['password_forget_token'])\n                           && (abs(strtotime($_SESSION[\"glpi_currenttime\"])\n                               -strtotime($this->fields['password_forget_token_date'])) < DAY_TIMESTAMP)\n                           && $this->isEmail($input['email'])))) {\n                  $input[\"password\"]\n                     = Auth::getPasswordHash(Toolbox::unclean_cross_side_scripting_deep(stripslashes($input[\"password\"])));\n\n                  $input['password_last_update'] = $_SESSION[\"glpi_currenttime\"];\n               } else {\n                  unset($input[\"password\"]);\n               }\n               unset($input[\"password2\"]);\n\n            } else {\n               Session::addMessageAfterRedirect(__('Error: the two passwords do not match'),\n                                                false, ERROR);\n               return false;\n            }\n         }\n\n      } else if (isset($input[\"password\"])) { // From login\n         unset($input[\"password\"]);\n      }\n\n      // blank password when authtype changes\n      if (isset($input[\"authtype\"])\n          && $input[\"authtype\"] != Auth::DB_GLPI\n          && $input[\"authtype\"] != $this->getField('authtype')) {\n         $input[\"password\"] = \"\";\n      }\n\n      // Update User in the database\n      if (!isset($input[\"id\"])\n          && isset($input[\"name\"])) {\n         if ($this->getFromDBbyName($input[\"name\"])) {\n            $input[\"id\"] = $this->fields[\"id\"];\n         }\n      }\n\n      if (isset($input[\"entities_id\"])\n          && (Session::getLoginUserID() == $input['id'])) {\n         $_SESSION[\"glpidefault_entity\"] = $input[\"entities_id\"];\n      }\n\n      // Security on default profile update\n      if (isset($input['profiles_id'])) {\n         if (!in_array($input['profiles_id'], Profile_User::getUserProfiles($input['id']))) {\n            unset($input['profiles_id']);\n         }\n      }\n\n      // Security on default entity  update\n      if (isset($input['entities_id'])) {\n         if (!in_array($input['entities_id'], Profile_User::getUserEntities($input['id']))) {\n            unset($input['entities_id']);\n         }\n      }\n\n      // Security on default group  update\n      if (isset($input['groups_id'])\n         && !Group_User::isUserInGroup($input['id'], $input['groups_id'])) {\n            unset($input['groups_id']);\n      }\n\n      if (isset($input['_reset_personal_token'])\n          && $input['_reset_personal_token']) {\n         $input['personal_token']      = self::getUniqueToken('personal_token');\n         $input['personal_token_date'] = $_SESSION['glpi_currenttime'];\n      }\n\n      if (isset($input['_reset_api_token'])\n          && $input['_reset_api_token']) {\n         $input['api_token']      = self::getUniqueToken('api_token');\n         $input['api_token_date'] = $_SESSION['glpi_currenttime'];\n      }\n\n      // Manage preferences fields\n      if (Session::getLoginUserID() == $input['id']) {\n         if (isset($input['use_mode'])\n             && ($_SESSION['glpi_use_mode'] !=  $input['use_mode'])) {\n            $_SESSION['glpi_use_mode'] = $input['use_mode'];\n            unset($_SESSION['glpimenu']); // Force menu regeneration\n            //Session::loadLanguage();\n         }\n      }\n\n      foreach ($CFG_GLPI['user_pref_field'] as $f) {\n         if (isset($input[$f])) {\n            if (Session::getLoginUserID() == $input['id']) {\n               if ($_SESSION[\"glpi$f\"] != $input[$f]) {\n                  $_SESSION[\"glpi$f\"] = $input[$f];\n                  // reinit translations\n                  if ($f == 'language') {\n                     $_SESSION['glpi_dropdowntranslations'] = DropdownTranslation::getAvailableTranslations($_SESSION[\"glpilanguage\"]);\n                     unset($_SESSION['glpimenu']);\n                  }\n               }\n            }\n            if ($input[$f] == $CFG_GLPI[$f]) {\n               $input[$f] = \"NULL\";\n            }\n         }\n      }\n\n      if (isset($input['language']) && GLPI_DEMO_MODE) {\n         unset($input['language']);\n      }\n\n      if (array_key_exists('timezone', $input) && empty($input['timezone'])) {\n         $input['timezone'] = 'NULL';\n      }\n\n      return $input;\n   }\n\n\n   function post_updateItem($history = 1) {\n      //handle timezone change for current user\n      if ($this->fields['id'] == Session::getLoginUserID()) {\n         if (null == $this->fields['timezone'] || 'null' === strtolower($this->fields['timezone'])) {\n            unset($_SESSION['glpi_tz']);\n         } else {\n            $_SESSION['glpi_tz'] = $this->fields['timezone'];\n         }\n      }\n\n      $this->updateUserEmails();\n      $this->syncLdapGroups();\n      $this->syncDynamicEmails();\n      $this->applyGroupsRules();\n      $this->applyRightRules();\n\n      if (in_array('password', $this->updates)) {\n         $alert = new Alert();\n         $alert->deleteByCriteria(\n            [\n               'itemtype' => $this->getType(),\n               'items_id' => $this->fields['id'],\n            ],\n            true\n         );\n      }\n   }\n\n\n\n   /**\n    * Apply rules to determine dynamic rights of the user.\n    *\n    * @return boolean true if rules are applied, false otherwise\n    */\n   function applyRightRules() {\n\n      $return = false;\n\n      if (isset($this->fields['_ruleright_process'])\n          || isset($this->input['_ruleright_process'])) {\n\n         $dynamic_profiles = Profile_User::getForUser($this->fields[\"id\"], true);\n\n         if (isset($this->fields[\"id\"])\n             && ($this->fields[\"id\"] > 0)\n             && isset($this->input[\"_ldap_rules\"])\n             && count($this->input[\"_ldap_rules\"])) {\n\n            //and add/update/delete only if it's necessary !\n            if (isset($this->input[\"_ldap_rules\"][\"rules_entities_rights\"])) {\n               $entities_rules = $this->input[\"_ldap_rules\"][\"rules_entities_rights\"];\n            } else {\n               $entities_rules = [];\n            }\n\n            if (isset($this->input[\"_ldap_rules\"][\"rules_entities\"])) {\n               $entities = $this->input[\"_ldap_rules\"][\"rules_entities\"];\n            } else {\n               $entities = [];\n            }\n\n            if (isset($this->input[\"_ldap_rules\"][\"rules_rights\"])) {\n               $rights = $this->input[\"_ldap_rules\"][\"rules_rights\"];\n            } else {\n               $rights = [];\n            }\n\n            $retrieved_dynamic_profiles = [];\n\n            //For each affectation -> write it in DB\n            foreach ($entities_rules as $entity) {\n               //Multiple entities assignation\n               if (is_array($entity[0])) {\n                  foreach ($entity[0] as $ent) {\n                     $retrieved_dynamic_profiles[] = [\n                        'entities_id'  => $ent,\n                        'profiles_id'  => $entity[1],\n                        'is_recursive' => $entity[2],\n                        'users_id'     => $this->fields['id'],\n                        'is_dynamic'   => 1,\n                     ];\n                  }\n               } else {\n                  $retrieved_dynamic_profiles[] = [\n                     'entities_id'  => $entity[0],\n                     'profiles_id'  => $entity[1],\n                     'is_recursive' => $entity[2],\n                     'users_id'     => $this->fields['id'],\n                     'is_dynamic'   => 1,\n                  ];\n               }\n            }\n\n            if ((count($entities) > 0)\n                && (count($rights) == 0)) {\n               if ($def_prof = Profile::getDefault()) {\n                  $rights[] = $def_prof;\n               }\n            }\n\n            if ((count($rights) > 0)\n                && (count($entities) > 0)) {\n               foreach ($rights as $right) {\n                  foreach ($entities as $entity) {\n                     $retrieved_dynamic_profiles[] = [\n                        'entities_id'  => $entity[0],\n                        'profiles_id'  => $right,\n                        'is_recursive' => $entity[1],\n                        'users_id'     => $this->fields['id'],\n                        'is_dynamic'   => 1,\n                     ];\n                  }\n               }\n            }\n\n            // Compare retrived profiles to existing ones : clean arrays to do purge and add\n            if (count($retrieved_dynamic_profiles)) {\n               foreach ($retrieved_dynamic_profiles as $keyretr => $retr_profile) {\n                  $found = false;\n\n                  foreach ($dynamic_profiles as $keydb => $db_profile) {\n                     // Found existing profile : unset values in array\n                     if (!$found\n                         && ($db_profile['entities_id']  == $retr_profile['entities_id'])\n                         && ($db_profile['profiles_id']  == $retr_profile['profiles_id'])\n                         && ($db_profile['is_recursive'] == $retr_profile['is_recursive'])) {\n\n                        unset($retrieved_dynamic_profiles[$keyretr]);\n                        unset($dynamic_profiles[$keydb]);\n                     }\n                  }\n               }\n            }\n\n            // Add new dynamic profiles\n            if (count($retrieved_dynamic_profiles)) {\n               $right = new Profile_User();\n               foreach ($retrieved_dynamic_profiles as $keyretr => $retr_profile) {\n                  $right->add($retr_profile);\n               }\n            }\n\n            //Unset all the temporary tables\n            unset($this->input[\"_ldap_rules\"]);\n\n            $return = true;\n         } else if (count($dynamic_profiles) == 1) {\n            $dynamic_profile = reset($dynamic_profiles);\n\n            // If no rule applied and only one dynamic profile found, check if\n            // it is the default profile\n            if ($dynamic_profile['is_default_profile'] == true) {\n               $default_profile = Profile::getDefault();\n\n               // Remove from to be deleted list\n               $dynamic_profiles = [];\n\n               // Update profile if need to match the current default profile\n               if ($dynamic_profile['profiles_id'] !== $default_profile) {\n                  $pu = new Profile_User();\n                  $dynamic_profile['profiles_id'] = $default_profile;\n                  $pu->add($dynamic_profile);\n                  $pu->delete([\n                     'id' => $dynamic_profile['id']\n                  ]);\n               }\n            }\n         }\n\n         // Delete old dynamic profiles\n         if (count($dynamic_profiles)) {\n            $right = new Profile_User();\n            foreach ($dynamic_profiles as $keydb => $db_profile) {\n               $right->delete($db_profile);\n            }\n         }\n\n      }\n      return $return;\n   }\n\n\n   /**\n    * Synchronise LDAP group of the user.\n    *\n    * @return void\n    */\n   function syncLdapGroups() {\n      global $DB;\n\n      // input[\"_groups\"] not set when update from user.form or preference\n      if (isset($this->fields[\"authtype\"])\n          && isset($this->input[\"_groups\"])\n          && (($this->fields[\"authtype\"] == Auth::LDAP)\n              || Auth::isAlternateAuth($this->fields['authtype']))) {\n\n         if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n            $authtype = Auth::getMethodsByID($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n\n            if (count($authtype)) {\n               // Clean groups\n               $this->input[\"_groups\"] = array_unique ($this->input[\"_groups\"]);\n\n               // Delete not available groups like to LDAP\n               $iterator = $DB->request([\n                  'SELECT'    => [\n                     'glpi_groups_users.id',\n                     'glpi_groups_users.groups_id',\n                     'glpi_groups_users.is_dynamic'\n                  ],\n                  'FROM'      => 'glpi_groups_users',\n                  'LEFT JOIN' => [\n                     'glpi_groups'  => [\n                        'FKEY'   => [\n                           'glpi_groups_users'  => 'groups_id',\n                           'glpi_groups'        => 'id'\n                        ]\n                     ]\n                  ],\n                  'WHERE'     => [\n                     'glpi_groups_users.users_id' => $this->fields['id']\n                  ]\n               ]);\n\n               $groupuser = new Group_User();\n               while ($data =  $iterator->next()) {\n\n                  if (in_array($data[\"groups_id\"], $this->input[\"_groups\"])) {\n                     // Delete found item in order not to add it again\n                     unset($this->input[\"_groups\"][array_search($data[\"groups_id\"],\n                           $this->input[\"_groups\"])]);\n\n                  } else if ($data['is_dynamic']) {\n                     $groupuser->delete(['id' => $data[\"id\"]]);\n                  }\n               }\n\n               //If the user needs to be added to one group or more\n               if (count($this->input[\"_groups\"]) > 0) {\n                  foreach ($this->input[\"_groups\"] as $group) {\n                     $groupuser->add(['users_id'   => $this->fields[\"id\"],\n                                           'groups_id'  => $group,\n                                           'is_dynamic' => 1]);\n                  }\n                  unset ($this->input[\"_groups\"]);\n               }\n            }\n         }\n      }\n   }\n\n\n   /**\n    * Synchronize picture (photo) of the user.\n    *\n    * @since 0.85\n    *\n    * @return string|boolean Filename to be stored in user picture field, false if no picture found\n    */\n   function syncLdapPhoto() {\n\n      if (isset($this->fields[\"authtype\"])\n          && (($this->fields[\"authtype\"] == Auth::LDAP)\n               || ($this->fields[\"authtype\"] == Auth::NOT_YET_AUTHENTIFIED\n                   && !empty($this->fields[\"auths_id\"]))\n               || Auth::isAlternateAuth($this->fields['authtype']))) {\n\n         if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n            $config_ldap = new AuthLDAP();\n            $ds          = false;\n\n            //connect ldap server\n            if ($config_ldap->getFromDB($this->fields['auths_id'])) {\n               $ds = $config_ldap->connect();\n            }\n\n            if ($ds) {\n               //get picture fields\n               $picture_field = $config_ldap->fields['picture_field'];\n               if (empty($picture_field)) {\n                  return false;\n               }\n\n               //get picture content in ldap\n               $info = AuthLDAP::getUserByDn($ds, $this->fields['user_dn'],\n                                             [$picture_field], false);\n\n               //getUserByDn returns an array. If the picture is empty,\n               //$info[$picture_field][0] is null\n               if (!isset($info[$picture_field][0]) || empty($info[$picture_field][0])) {\n                  return \"\";\n               }\n               //prepare paths\n               $img       = array_pop($info[$picture_field]);\n               $filename  = uniqid($this->fields['id'].'_');\n               $sub       = substr($filename, -2); /* 2 hex digit */\n               $file      = GLPI_PICTURE_DIR . \"/$sub/${filename}.jpg\";\n\n               if (array_key_exists('picture', $this->fields)) {\n                  $oldfile = GLPI_PICTURE_DIR . \"/\" . $this->fields[\"picture\"];\n               } else {\n                  $oldfile = null;\n               }\n\n               // update picture if not exist or changed\n               if (empty($this->fields[\"picture\"])\n                   || !file_exists($oldfile)\n                   || sha1_file($oldfile) !== sha1($img)) {\n                  if (!is_dir(GLPI_PICTURE_DIR . \"/$sub\")) {\n                     mkdir(GLPI_PICTURE_DIR . \"/$sub\");\n                  }\n\n                  //save picture\n                  $outjpeg = fopen($file, 'wb');\n                  fwrite($outjpeg, $img);\n                  fclose ($outjpeg);\n\n                  //save thumbnail\n                  $thumb = GLPI_PICTURE_DIR . \"/$sub/${filename}_min.jpg\";\n                  Toolbox::resizePicture($file, $thumb);\n\n                  return \"$sub/${filename}.jpg\";\n               }\n               return $this->fields[\"picture\"];\n            }\n         }\n      }\n\n      return false;\n   }\n\n\n   /**\n    * Update emails of the user.\n    * Uses _useremails set from UI, not _emails set from LDAP.\n    *\n    * @return void\n    */\n   function updateUserEmails() {\n      // Update emails  (use _useremails set from UI, not _emails set from LDAP)\n\n      $userUpdated = false;\n\n      if (isset($this->input['_useremails']) && count($this->input['_useremails'])) {\n         $useremail = new UserEmail();\n         foreach ($this->input['_useremails'] as $id => $email) {\n            $email = trim($email);\n\n            // existing email\n            if ($id > 0) {\n               $params = ['id' => $id];\n\n               // empty email : delete\n               if (strlen($email) == 0) {\n                  $deleted = $useremail->delete($params);\n                  $userUpdated = $userUpdated || $deleted;\n\n               } else { // Update email\n                  $params['email'] = $email;\n                  $params['is_default'] = $this->input['_default_email'] == $id ? 1 : 0;\n\n                  $existingUserEmail = new UserEmail();\n                  $existingUserEmail->getFromDB($id);\n                  if ($params['email'] == $existingUserEmail->fields['email']\n                      && $params['is_default'] == $existingUserEmail->fields['is_default']) {\n                     // Do not update if email has not changed\n                     continue;\n                  }\n\n                  $updated = $useremail->update($params);\n                  $userUpdated = $userUpdated || $updated;\n               }\n\n            } else { // New email\n               $email_input = ['email'    => $email,\n                               'users_id' => $this->fields['id']];\n               if (isset($this->input['_default_email'])\n                   && ($this->input['_default_email'] == $id)) {\n                  $email_input['is_default'] = 1;\n               } else {\n                  $email_input['is_default'] = 0;\n               }\n               $added = $useremail->add($email_input);\n               $userUpdated = $userUpdated || $added;\n            }\n         }\n      }\n\n      if ($userUpdated) {\n         // calling $this->update() here leads to loss in $this->input\n         $user = new User();\n         $user->update(['id' => $this->fields['id'], 'date_mod' => $_SESSION['glpi_currenttime']]);\n      }\n   }\n\n\n   /**\n    * Synchronise Dynamics emails of the user.\n    * Uses _emails (set from getFromLDAP), not _usermails set from UI.\n    *\n    * @return void\n    */\n   function syncDynamicEmails() {\n      global $DB;\n\n      $userUpdated = false;\n\n      // input[\"_emails\"] not set when update from user.form or preference\n      if (isset($this->fields[\"authtype\"])\n          && isset($this->input[\"_emails\"])\n          && (($this->fields[\"authtype\"] == Auth::LDAP)\n              || Auth::isAlternateAuth($this->fields['authtype'])\n              || ($this->fields[\"authtype\"] == Auth::MAIL))) {\n\n         if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n            $authtype = Auth::getMethodsByID($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n\n            if (count($authtype)\n                || $this->fields[\"authtype\"] == Auth::EXTERNAL) {\n               // Clean emails\n               // Do a case insensitive comparison as it seems that some LDAP servers\n               // may return same email with different case sensitivity.\n               $unique_emails = [];\n               foreach ($this->input[\"_emails\"] as $email) {\n                  if (!in_array(strtolower($email), array_map('strtolower', $unique_emails))) {\n                     $unique_emails[] = $email;\n                  }\n               }\n               $this->input[\"_emails\"] = $unique_emails;\n\n               // Delete not available groups like to LDAP\n               $iterator = $DB->request([\n                  'SELECT' => [\n                     'id',\n                     'users_id',\n                     'email',\n                     'is_dynamic'\n                  ],\n                  'FROM'   => 'glpi_useremails',\n                  'WHERE'  => ['users_id' => $this->fields['id']]\n               ]);\n\n               $useremail = new UserEmail();\n               while ($data = $iterator->next()) {\n                  // Do a case insensitive comparison as email may be stored with a different case\n                  $i = array_search(strtolower($data[\"email\"]), array_map('strtolower', $this->input[\"_emails\"]));\n                  if ($i !== false) {\n                     // Delete found item in order not to add it again\n                     unset($this->input[\"_emails\"][$i]);\n                  } else if ($data['is_dynamic']) {\n                     // Delete not found email\n                     $deleted = $useremail->delete(['id' => $data[\"id\"]]);\n                     $userUpdated = $userUpdated || $deleted;\n                  }\n               }\n\n               //If the email need to be added\n               if (count($this->input[\"_emails\"]) > 0) {\n                  foreach ($this->input[\"_emails\"] as $email) {\n                     $added = $useremail->add(['users_id'   => $this->fields[\"id\"],\n                                               'email'      => $email,\n                                               'is_dynamic' => 1]);\n                     $userUpdated = $userUpdated || $added;\n                  }\n                  unset ($this->input[\"_emails\"]);\n               }\n            }\n         }\n      }\n\n      if ($userUpdated) {\n         // calling $this->update() here leads to loss in $this->input\n         $user = new User();\n         $user->update(['id' => $this->fields['id'], 'date_mod' => $_SESSION['glpi_currenttime']]);\n      }\n   }\n\n   protected function computeFriendlyName() {\n      global $CFG_GLPI;\n\n      if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n         //computeFriendlyName should not add ID\n         $bkp_conf = $CFG_GLPI['is_ids_visible'];\n         $CFG_GLPI['is_ids_visible'] = 0;\n         $bkp_sessconf = (isset($_SESSION['glpiis_ids_visible']) ? $_SESSION[\"glpiis_ids_visible\"] : 0);\n         $_SESSION[\"glpiis_ids_visible\"] = 0;\n         $name = formatUserName($this->fields[\"id\"],\n                               $this->fields[\"name\"],\n                               (isset($this->fields[\"realname\"]) ? $this->fields[\"realname\"] : ''),\n                               (isset($this->fields[\"firstname\"]) ? $this->fields[\"firstname\"] : ''));\n\n         $CFG_GLPI['is_ids_visible'] = $bkp_conf;\n         $_SESSION[\"glpiis_ids_visible\"] = $bkp_sessconf;\n         return $name;\n      }\n      return '';\n   }\n\n\n   /**\n    * Function that tries to load the user membership from LDAP\n    * by searching in the attributes of the User.\n    *\n    * @param resource $ldap_connection LDAP connection\n    * @param array    $ldap_method     LDAP method\n    * @param string   $userdn          Basedn of the user\n    * @param string   $login           User login\n    *\n    * @return string|boolean Basedn of the user / false if not found\n    */\n   private function getFromLDAPGroupVirtual($ldap_connection, array $ldap_method, $userdn, $login) {\n      global $DB;\n\n      // Search in DB the ldap_field we need to search for in LDAP\n      $iterator = $DB->request([\n         'SELECT'          => 'ldap_field',\n         'DISTINCT'        => true,\n         'FROM'            => 'glpi_groups',\n         'WHERE'           => ['NOT' => ['ldap_field' => '']],\n         'ORDER'           => 'ldap_field'\n      ]);\n      $group_fields = [];\n\n      while ($data = $iterator->next()) {\n         $group_fields[] = Toolbox::strtolower($data[\"ldap_field\"]);\n      }\n      if (count($group_fields)) {\n         //Need to sort the array because edirectory don't like it!\n         sort($group_fields);\n\n         // If the groups must be retrieve from the ldap user object\n         $sr = @ ldap_read($ldap_connection, $userdn, \"objectClass=*\", $group_fields);\n         $v  = AuthLDAP::get_entries_clean($ldap_connection, $sr);\n\n         for ($i=0; $i < $v['count']; $i++) {\n            //Try to find is DN in present and needed: if yes, then extract only the OU from it\n            if ((($ldap_method[\"group_field\"] == 'dn') || in_array('ou', $group_fields))\n                && isset($v[$i]['dn'])) {\n\n               $v[$i]['ou'] = [];\n               for ($tmp=$v[$i]['dn']; count($tmptab = explode(',', $tmp, 2))==2; $tmp=$tmptab[1]) {\n                  $v[$i]['ou'][] = $tmptab[1];\n               }\n\n               // Search in DB for group with ldap_group_dn\n               if (($ldap_method[\"group_field\"] == 'dn')\n                   && (count($v[$i]['ou']) > 0)) {\n                  $group_iterator = $DB->request([\n                     'SELECT' => 'id',\n                     'FROM'   => 'glpi_groups',\n                     'WHERE'  => ['ldap_group_dn' => Toolbox::addslashes_deep($v[$i]['ou'])]\n                  ]);\n\n                  while ($group = $group_iterator->next()) {\n                     $this->fields[\"_groups\"][] = $group['id'];\n                  }\n               }\n\n               // searching with ldap_field='OU' and ldap_value is also possible\n               $v[$i]['ou']['count'] = count($v[$i]['ou']);\n            }\n\n            // For each attribute retrieve from LDAP, search in the DB\n            foreach ($group_fields as $field) {\n               if (isset($v[$i][$field])\n                   && isset($v[$i][$field]['count'])\n                   && ($v[$i][$field]['count'] > 0)) {\n\n                  unset($v[$i][$field]['count']);\n                  $lgroups = [];\n                  foreach (Toolbox::addslashes_deep($v[$i][$field]) as $lgroup) {\n                     $lgroups[] = [\n                        new \\QueryExpression($DB::quoteValue($lgroup).\n                                             \" LIKE \".\n                                             $DB::quoteName('ldap_value'))\n                     ];\n                  }\n                  $group_iterator = $DB->request([\n                     'SELECT' => 'id',\n                     'FROM'   => 'glpi_groups',\n                     'WHERE'  => [\n                        'ldap_field' => $field,\n                        'OR'         => $lgroups\n                     ]\n                  ]);\n\n                  while ($group = $group_iterator->next()) {\n                     $this->fields[\"_groups\"][] = $group['id'];\n                  }\n               }\n            }\n         } // for each ldapresult\n      } // count($group_fields)\n   }\n\n\n   /**\n    * Function that tries to load the user membership from LDAP\n    * by searching in the attributes of the Groups.\n    *\n    * @param resource $ldap_connection    LDAP connection\n    * @param array    $ldap_method        LDAP method\n    * @param string   $userdn             Basedn of the user\n    * @param string   $login              User login\n    *\n    * @return boolean true if search is applicable, false otherwise\n    */\n   private function getFromLDAPGroupDiscret($ldap_connection, array $ldap_method, $userdn, $login) {\n      global $DB;\n\n      // No group_member_field : unable to get group\n      if (empty($ldap_method[\"group_member_field\"])) {\n         return false;\n      }\n\n      if ($ldap_method[\"use_dn\"]) {\n         $user_tmp = $userdn;\n      } else {\n         //Don't add $ldap_method[\"login_field\"].\"=\", because sometimes it may not work (for example with posixGroup)\n         $user_tmp = $login;\n      }\n\n      $v = $this->ldap_get_user_groups($ldap_connection, $ldap_method[\"basedn\"],\n                                       $user_tmp,\n                                       $ldap_method[\"group_condition\"],\n                                       $ldap_method[\"group_member_field\"],\n                                       $ldap_method[\"use_dn\"],\n                                       $ldap_method[\"login_field\"]);\n      foreach ($v as $result) {\n         if (isset($result[$ldap_method[\"group_member_field\"]])\n             && is_array($result[$ldap_method[\"group_member_field\"]])\n             && (count($result[$ldap_method[\"group_member_field\"]]) > 0)) {\n\n             $iterator = $DB->request([\n               'SELECT' => 'id',\n               'FROM'   => 'glpi_groups',\n               'WHERE'  => ['ldap_group_dn' => Toolbox::addslashes_deep($result[$ldap_method[\"group_member_field\"]])]\n             ]);\n\n            while ($group = $iterator->next()) {\n               $this->fields[\"_groups\"][] = $group['id'];\n            }\n         }\n      }\n      return true;\n   }\n\n\n   /**\n    * Function that tries to load the user informations from LDAP.\n    *\n    * @param resource $ldap_connection LDAP connection\n    * @param array    $ldap_method     LDAP method\n    * @param string   $userdn          Basedn of the user\n    * @param string   $login           User Login\n    * @param boolean  $import          true for import, false for update\n    *\n    * @return boolean true if found / false if not\n    */\n   function getFromLDAP($ldap_connection, array $ldap_method, $userdn, $login, $import = true) {\n      global $DB, $CFG_GLPI;\n\n      // we prevent some delay...\n      if (empty($ldap_method[\"host\"])) {\n         return false;\n      }\n\n      if (is_resource($ldap_connection)) {\n         //Set all the search fields\n         $this->fields['password'] = \"\";\n\n         $fields  = AuthLDAP::getSyncFields($ldap_method);\n\n         //Hook to allow plugin to request more attributes from ldap\n         $fields = Plugin::doHookFunction(\"retrieve_more_field_from_ldap\", $fields);\n\n         $fields  = array_filter($fields);\n         $f       = self::getLdapFieldNames($fields);\n\n         $sr      = @ ldap_read($ldap_connection, $userdn, \"objectClass=*\", $f);\n         $v       = AuthLDAP::get_entries_clean($ldap_connection, $sr);\n\n         if (!is_array($v)\n             || ( count($v) == 0)\n             || empty($v[0][$fields['name']][0])) {\n            return false;\n         }\n\n         //Store user's dn\n         $this->fields['user_dn']    = addslashes($userdn);\n         //Store date_sync\n         $this->fields['date_sync']  = $_SESSION['glpi_currenttime'];\n         // Empty array to ensure than syncDynamicEmails will be done\n         $this->fields[\"_emails\"]    = [];\n         // force authtype as we retrieve this user by ldap (we could have login with SSO)\n         $this->fields[\"authtype\"] = Auth::LDAP;\n\n         foreach ($fields as $k => $e) {\n            $val = AuthLDAP::getFieldValue(\n               [$e => self::getLdapFieldValue($e, $v)],\n               $e\n            );\n            if (empty($val)) {\n               switch ($k) {\n                  case \"language\" :\n                     // Not set value : managed but user class\n                     break;\n\n                  case \"usertitles_id\" :\n                  case \"usercategories_id\" :\n                  case 'locations_id' :\n                  case 'users_id_supervisor' :\n                     $this->fields[$k] = 0;\n                     break;\n\n                  default :\n                     $this->fields[$k] = \"\";\n               }\n\n            } else {\n               $val = Toolbox::addslashes_deep($val);\n               switch ($k) {\n                  case \"email1\" :\n                  case \"email2\" :\n                  case \"email3\" :\n                  case \"email4\" :\n                     // Manage multivaluable fields\n                     if (!empty($v[0][$e])) {\n                        foreach ($v[0][$e] as $km => $m) {\n                           if (!preg_match('/count/', $km)) {\n                              $this->fields[\"_emails\"][] = addslashes($m);\n                           }\n                        }\n                        // Only get them once if duplicated\n                        $this->fields[\"_emails\"] = array_unique($this->fields[\"_emails\"]);\n                     }\n                     break;\n\n                  case \"language\" :\n                     $language = Config::getLanguage($val);\n                     if ($language != '') {\n                        $this->fields[$k] = $language;\n                     }\n                     break;\n\n                  case \"usertitles_id\" :\n                     $this->fields[$k] = Dropdown::importExternal('UserTitle', $val);\n                     break;\n\n                  case 'locations_id' :\n                     // use import to build the location tree\n                     $this->fields[$k] = Dropdown::import('Location',\n                                                          ['completename' => $val,\n                                                           'entities_id'  => 0,\n                                                           'is_recursive' => 1]);\n                    break;\n\n                  case \"usercategories_id\" :\n                     $this->fields[$k] = Dropdown::importExternal('UserCategory', $val);\n                     break;\n\n                  case 'users_id_supervisor':\n                     $this->fields[$k] = self::getIdByField('user_dn', $val, false);\n                     break;\n\n                  default :\n                     $this->fields[$k] = $val;\n               }\n            }\n         }\n\n         // Empty array to ensure than syncLdapGroups will be done\n         $this->fields[\"_groups\"] = [];\n\n         ///The groups are retrieved by looking into an ldap user object\n         if (($ldap_method[\"group_search_type\"] == 0)\n             || ($ldap_method[\"group_search_type\"] == 2)) {\n            $this->getFromLDAPGroupVirtual($ldap_connection, $ldap_method, $userdn, $login);\n         }\n\n         ///The groups are retrived by looking into an ldap group object\n         if (($ldap_method[\"group_search_type\"] == 1)\n             || ($ldap_method[\"group_search_type\"] == 2)) {\n            $this->getFromLDAPGroupDiscret($ldap_connection, $ldap_method, $userdn, $login);\n         }\n\n         ///Only process rules if working on the master database\n         if (!$DB->isSlave()) {\n            //Instanciate the affectation's rule\n            $rule = new RuleRightCollection();\n\n            //Process affectation rules :\n            //we don't care about the function's return because all\n            //the datas are stored in session temporary\n            if (isset($this->fields[\"_groups\"])) {\n               $groups = $this->fields[\"_groups\"];\n            } else {\n               $groups = [];\n            }\n\n            $this->fields = $rule->processAllRules($groups, Toolbox::stripslashes_deep($this->fields), [\n               'type'        => Auth::LDAP,\n               'ldap_server' => $ldap_method[\"id\"],\n               'connection'  => $ldap_connection,\n               'userdn'      => $userdn,\n               'login'       => $this->fields['name'],\n               'mail_email'  => $this->fields['_emails']\n            ]);\n\n            $this->fields['_ruleright_process'] = true;\n\n            //If rule  action is ignore import\n            if ($import\n                && isset($this->fields[\"_stop_import\"])) {\n               return false;\n            }\n            //or no rights found & do not import users with no rights\n            if ($import\n                && !$CFG_GLPI[\"use_noright_users_add\"]) {\n               $ok = false;\n               if (isset($this->fields[\"_ldap_rules\"])\n                   && count($this->fields[\"_ldap_rules\"])) {\n                  if (isset($this->fields[\"_ldap_rules\"][\"rules_entities_rights\"])\n                      && count($this->fields[\"_ldap_rules\"][\"rules_entities_rights\"])) {\n                     $ok = true;\n                  }\n                  if (!$ok) {\n                     $entity_count = 0;\n                     $right_count  = 0;\n                     if (Profile::getDefault()) {\n                        $right_count++;\n                     }\n                     if (isset($this->fields[\"_ldap_rules\"][\"rules_entities\"])) {\n                        $entity_count += count($this->fields[\"_ldap_rules\"][\"rules_entities\"]);\n                     }\n                     if (isset($this->input[\"_ldap_rules\"][\"rules_rights\"])) {\n                        $right_count += count($this->fields[\"_ldap_rules\"][\"rules_rights\"]);\n                     }\n                     if ($entity_count && $right_count) {\n                        $ok = true;\n                     }\n                  }\n               }\n               if (!$ok) {\n                  $this->fields[\"_stop_import\"] = true;\n                  return false;\n               }\n            }\n\n            // Add ldap result to data send to the hook\n            $this->fields['_ldap_result'] = $v;\n            $this->fields['_ldap_conn']   = $ldap_connection;\n            //Hook to retrieve more information for ldap\n            $this->fields = Plugin::doHookFunction(\"retrieve_more_data_from_ldap\", $this->fields);\n            unset($this->fields['_ldap_result']);\n         }\n         return true;\n      }\n      return false;\n\n   } // getFromLDAP()\n\n\n   /**\n    * Get all groups a user belongs to.\n    *\n    * @param resource $ds                 ldap connection\n    * @param string   $ldap_base_dn       Basedn used\n    * @param string   $user_dn            Basedn of the user\n    * @param string   $group_condition    group search condition\n    * @param string   $group_member_field group field member in a user object\n    * @param boolean  $use_dn             search dn of user ($login_field=$user_dn) in group_member_field\n    * @param string   $login_field        user login field\n    *\n    * @return array Groups of the user located in [0][$group_member_field] in returned array\n    */\n   function ldap_get_user_groups($ds, $ldap_base_dn, $user_dn, $group_condition,\n                                 $group_member_field, $use_dn, $login_field) {\n\n      $groups     = [];\n      $listgroups = [];\n\n      //User dn may contain ( or ), need to espace it!\n      $user_dn = str_replace([\"(\", \")\", \"\\,\", \"\\+\"], [\"\\(\", \"\\)\", \"\\\\\\,\", \"\\\\\\+\"],\n                             $user_dn);\n\n      //Only retrive cn and member attributes from groups\n      $attrs = ['dn'];\n\n      if (!$use_dn) {\n         $filter = \"(& $group_condition (|($group_member_field=$user_dn)\n                                          ($group_member_field=$login_field=$user_dn)))\";\n      } else {\n         $filter = \"(& $group_condition ($group_member_field=$user_dn))\";\n      }\n\n      //Perform the search\n      $filter = Toolbox::unclean_cross_side_scripting_deep($filter);\n      $sr     = ldap_search($ds, $ldap_base_dn, $filter, $attrs);\n\n      //Get the result of the search as an array\n      $info = AuthLDAP::get_entries_clean($ds, $sr);\n      //Browse all the groups\n      $info_count = count($info);\n      for ($i = 0; $i < $info_count; $i++) {\n         //Get the cn of the group and add it to the list of groups\n         if (isset($info[$i][\"dn\"]) && ($info[$i][\"dn\"] != '')) {\n            $listgroups[$i] = $info[$i][\"dn\"];\n         }\n      }\n\n      //Create an array with the list of groups of the user\n      $groups[0][$group_member_field] = $listgroups;\n      //Return the groups of the user\n      return $groups;\n   }\n\n\n   /**\n    * Function that tries to load the user informations from IMAP.\n    *\n    * @param array  $mail_method  mail method description array\n    * @param string $name         login of the user\n    *\n    * @return boolean true if method is applicable, false otherwise\n    */\n   function getFromIMAP(array $mail_method, $name) {\n      global $DB;\n\n      // we prevent some delay..\n      if (empty($mail_method[\"host\"])) {\n         return false;\n      }\n\n      // some defaults...\n      $this->fields['password']  = \"\";\n      // Empty array to ensure than syncDynamicEmails will be done\n      $this->fields[\"_emails\"]   = [];\n      $email                     = '';\n      if (strpos($name, \"@\")) {\n         $email = $name;\n      } else {\n         $email = $name . \"@\" . $mail_method[\"host\"];\n      }\n      $this->fields[\"_emails\"][] = $email;\n\n      $this->fields['name']      = $name;\n      //Store date_sync\n      $this->fields['date_sync'] = $_SESSION['glpi_currenttime'];\n      // force authtype as we retrieve this user by imap (we could have login with SSO)\n      $this->fields[\"authtype\"] = Auth::MAIL;\n\n      if (!$DB->isSlave()) {\n         //Instanciate the affectation's rule\n         $rule = new RuleRightCollection();\n\n         //Process affectation rules :\n         //we don't care about the function's return because all the datas are stored in session temporary\n         if (isset($this->fields[\"_groups\"])) {\n            $groups = $this->fields[\"_groups\"];\n         } else {\n            $groups = [];\n         }\n         $this->fields = $rule->processAllRules($groups, Toolbox::stripslashes_deep($this->fields), [\n            'type'        => Auth::MAIL,\n            'mail_server' => $mail_method[\"id\"],\n            'login'       => $name,\n            'email'       => $email]\n         );\n         $this->fields['_ruleright_process'] = true;\n      }\n      return true;\n   }\n\n\n   /**\n    * Function that tries to load the user informations from the SSO server.\n    *\n    * @since 0.84\n    *\n    * @return boolean true if method is applicable, false otherwise\n    */\n   function getFromSSO() {\n      global $DB, $CFG_GLPI;\n\n      $a_field = [];\n      foreach ($CFG_GLPI as $key=>$value) {\n         if (!is_array($value) && !empty($value)\n             && strstr($key, \"_ssofield\")) {\n            $key = str_replace('_ssofield', '', $key);\n            $a_field[$key] = $value;\n         }\n      }\n\n      if (count($a_field) == 0) {\n         return true;\n      }\n      $this->fields['_ruleright_process'] = true;\n      foreach ($a_field as $field=>$value) {\n         if (!isset($_SERVER[$value])\n             || empty($_SERVER[$value])) {\n\n            switch ($field) {\n               case \"title\" :\n                  $this->fields['usertitles_id'] = 0;\n                  break;\n\n               case \"category\" :\n                  $this->fields['usercategories_id'] = 0;\n                  break;\n\n               default :\n                  $this->fields[$field] = \"\";\n            }\n\n         } else {\n            switch ($field) {\n               case \"email1\" :\n               case \"email2\" :\n               case \"email3\" :\n               case \"email4\" :\n                  // Manage multivaluable fields\n                  if (!preg_match('/count/', $_SERVER[$value])) {\n                     $this->fields[\"_emails\"][] = addslashes($_SERVER[$value]);\n                  }\n                  // Only get them once if duplicated\n                  $this->fields[\"_emails\"] = array_unique($this->fields[\"_emails\"]);\n                  break;\n\n               case \"language\" :\n                  $language = Config::getLanguage($_SERVER[$value]);\n                  if ($language != '') {\n                     $this->fields[$field] = $language;\n                  }\n                  break;\n\n               case \"title\" :\n                  $this->fields['usertitles_id']\n                        = Dropdown::importExternal('UserTitle', addslashes($_SERVER[$value]));\n                  break;\n\n               case \"category\" :\n                  $this->fields['usercategories_id']\n                        = Dropdown::importExternal('UserCategory', addslashes($_SERVER[$value]));\n                  break;\n\n               default :\n                  $this->fields[$field] = $_SERVER[$value];\n                  break;\n\n            }\n         }\n      }\n       ///Only process rules if working on the master database\n      if (!$DB->isSlave()) {\n         //Instanciate the affectation's rule\n         $rule = new RuleRightCollection();\n\n         $this->fields = $rule->processAllRules([], Toolbox::stripslashes_deep($this->fields), [\n            'type'   => Auth::EXTERNAL,\n            'email'  => $this->fields[\"_emails\"],\n            'login'  => $this->fields[\"name\"]\n         ]);\n\n         //If rule  action is ignore import\n         if (isset($this->fields[\"_stop_import\"])) {\n            return false;\n         }\n      }\n      return true;\n   }\n\n\n   /**\n    * Blank passwords field of a user in the DB.\n    * Needed for external auth users.\n    *\n    * @return void\n    */\n   function blankPassword() {\n      global $DB;\n\n      if (!empty($this->fields[\"name\"])) {\n         $DB->update(\n            $this->getTable(), [\n               'password' => ''\n            ], [\n               'name' => $this->fields['name']\n            ]\n         );\n      }\n   }\n\n\n   /**\n    * Print a good title for user pages.\n    *\n    * @return void\n    */\n   function title() {\n      global $CFG_GLPI;\n\n      $buttons = [];\n      $title   = self::getTypeName(Session::getPluralNumber());\n\n      if (static::canCreate()) {\n         $buttons[\"user.form.php\"] = __('Add user...');\n         $title                    = \"\";\n\n         if (Auth::useAuthExt()\n             && Session::haveRight(\"user\", self::IMPORTEXTAUTHUSERS)) {\n            // This requires write access because don't use entity config.\n            $buttons[\"user.form.php?new=1&amp;ext_auth=1\"] = __('... From an external source');\n         }\n      }\n      if (Session::haveRight(\"user\", self::IMPORTEXTAUTHUSERS)\n         && (static::canCreate() || static::canUpdate())) {\n         if (AuthLDAP::useAuthLdap()) {\n            $buttons[\"ldap.php\"] = __('LDAP directory link');\n         }\n      }\n      Html::displayTitle($CFG_GLPI[\"root_doc\"] . \"/pics/users.png\", self::getTypeName(Session::getPluralNumber()), $title,\n                         $buttons);\n   }\n\n\n   /**\n    * Check if current user have more right than the specified one.\n    *\n    * @param integer $ID ID of the user\n    *\n    * @return boolean\n    */\n   function currentUserHaveMoreRightThan($ID) {\n\n      $user_prof = Profile_User::getUserProfiles($ID);\n      return Profile::currentUserHaveMoreRightThan($user_prof);\n   }\n\n\n   /**\n    * Print the user form.\n    *\n    * @param integer $ID    ID of the user\n    * @param array $options Options\n    *     - string   target        Form target\n    *     - boolean  withtemplate  Template or basic item\n    *\n    * @return boolean true if user found, false otherwise\n    */\n   function showForm($ID, array $options = []) {\n      global $CFG_GLPI, $DB;\n\n      // Affiche un formulaire User\n      if (($ID != Session::getLoginUserID()) && !self::canView()) {\n         return false;\n      }\n\n      $this->initForm($ID, $options);\n\n      $ismyself = $ID == Session::getLoginUserID();\n      $higherrights = $this->currentUserHaveMoreRightThan($ID);\n      if ($ID) {\n         $caneditpassword = $higherrights || ($ismyself && Session::haveRight('password_update', 1));\n      } else {\n         // can edit on creation form\n         $caneditpassword = true;\n      }\n\n      $extauth = !(($this->fields[\"authtype\"] == Auth::DB_GLPI)\n                   || (($this->fields[\"authtype\"] == Auth::NOT_YET_AUTHENTIFIED)\n                       && !empty($this->fields[\"password\"])));\n\n      $formtitle = $this->getTypeName(1);\n\n      if ($ID > 0) {\n         $formtitle .= \"<a class='pointer far fa-address-card fa-lg' target='_blank' href='\".\n                       User::getFormURLWithID($ID).\"&amp;getvcard=1' title='\".__s('Download user VCard').\n                       \"'><span class='sr-only'>\". __('Vcard').\"</span></a>\";\n         if (Session::canImpersonate($ID)) {\n            $formtitle .= '<button type=\"button\" class=\"pointer btn-linkstyled btn-impersonate\" name=\"impersonate\" value=\"1\">'\n               . '<i class=\"fas fa-user-secret fa-lg\" title=\"' . __s('Impersonate') . '\"></i> '\n               . '<span class=\"sr-only\">' . __s('Impersonate') . '</span>'\n               . '</button>';\n\n            // \"impersonate\" button type is set to \"button\" on form display to prevent it to be used\n            // by default (as it is the first found in current form) when pressing \"enter\" key.\n            // When clicking it, switch to \"submit\" type to make it submit current user form.\n            $impersonate_js = <<<JAVASCRIPT\n               (function($) {\n                  $('button[type=\"button\"][name=\"impersonate\"]').click(\n                     function () {\n                        $(this).attr('type', 'submit');\n                     }\n                  );\n               })(jQuery);\nJAVASCRIPT;\n            $formtitle .= Html::scriptBlock($impersonate_js);\n         }\n      }\n\n      $options['formtitle']   = $formtitle;\n      $options['formoptions'] = ($options['formoptions'] ?? '') . \" enctype='multipart/form-data'\";\n      $this->showFormHeader($options);\n      $rand = mt_rand();\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td><label for='name'>\" . __('Login') . \"</label></td>\";\n      if ($this->fields[\"name\"] == \"\" ||\n          !empty($this->fields[\"password\"])\n          || ($this->fields[\"authtype\"] == Auth::DB_GLPI)) {\n         //display login field for new records, or if this is not external auth\n         echo \"<td><input name='name' id='name' value=\\\"\" . $this->fields[\"name\"] . \"\\\"></td>\";\n      } else {\n         echo \"<td class='b'>\" . $this->fields[\"name\"];\n         echo \"<input type='hidden' name='name' value=\\\"\" . $this->fields[\"name\"] . \"\\\"></td>\";\n      }\n\n      if (!empty($this->fields[\"name\"])) {\n         echo \"<td rowspan='7'>\" . __('Picture') . \"</td>\";\n         echo \"<td rowspan='7'>\";\n         echo \"<div class='user_picture_border_small' id='picture$rand'>\";\n         echo \"<img class='user_picture_small' alt=\\\"\".__s('Picture').\"\\\" src='\".\n                User::getThumbnailURLForPicture($this->fields['picture']).\"'>\";\n         // echo \"<img src='\".self::getURLForPicture($this->fields[\"picture\"]).\"' class='user_picture'/>\";\n         echo \"</div>\";\n         $full_picture = \"<div class='user_picture_border'>\";\n         $full_picture .= \"<img class='user_picture' alt=\\\"\".__s('Picture').\"\\\" src='\".\n                            User::getURLForPicture($this->fields['picture']).\"'>\";\n         $full_picture .= \"</div>\";\n\n         Html::showTooltip($full_picture, ['applyto' => \"picture$rand\"]);\n         echo Html::file(['name' => 'picture', 'display' => false, 'onlyimages' => true]);\n         echo \"<input type='checkbox' name='_blank_picture'>&nbsp;\".__('Clear');\n         echo \"</td>\";\n      } else {\n         echo \"<td rowspan='7'></td>\";\n         echo \"<td rowspan='7'></td>\";\n      }\n      echo \"</tr>\";\n\n      //If it's an external auth, check if the sync_field must be displayed\n      if ($extauth\n         && $this->fields['auths_id']\n            && AuthLDAP::isSyncFieldConfigured($this->fields['auths_id'])) {\n         $syncrand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_sync_field$syncrand'>\" . __('Synchronization field') . \"</label></td><td>\";\n         if (self::canUpdate()\n             && (!$extauth || empty($ID))) {\n                Html::autocompletionTextField($this, \"sync_field\", ['rand' => $syncrand]);\n         } else {\n            if (empty($this->fields['sync_field'])) {\n               echo Dropdown::EMPTY_VALUE;\n            } else {\n               echo $this->fields['sync_field'];\n            }\n         }\n         echo \"</td></tr>\";\n      } else {\n         echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n      }\n\n      $surnamerand = mt_rand();\n      echo \"<tr class='tab_bg_1'><td><label for='textfield_realname$surnamerand'>\" . __('Surname') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"realname\", ['rand' => $surnamerand]);\n      echo \"</td></tr>\";\n\n      $firstnamerand = mt_rand();\n      echo \"<tr class='tab_bg_1'><td><label for='textfield_firstname$firstnamerand'>\" . __('First name') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"firstname\", ['rand' => $firstnamerand]);\n      echo \"</td></tr>\";\n\n      //do some rights verification\n      if (self::canUpdate()\n          && (!$extauth || empty($ID))\n          && $caneditpassword) {\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td><label for='password'>\" . __('Password').\"</label></td>\";\n         echo \"<td><input id='password' type='password' name='password' value='' size='20'\n                    autocomplete='new-password' onkeyup=\\\"return passwordCheck();\\\"></td>\";\n\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td><label for='password2'>\" . __('Password confirmation') . \"</label></td>\";\n         echo \"<td><input type='password' id='password2' name='password2' value='' size='20' autocomplete='new-password'>\";\n         echo \"</td></tr>\";\n\n         if ($CFG_GLPI[\"use_password_security\"]) {\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td rowspan='2'>\";\n            echo __('Password security policy');\n            echo \"</td>\";\n            echo \"<td rowspan='2'>\";\n            Config::displayPasswordSecurityChecks();\n            echo \"</td>\";\n            echo \"</tr>\";\n         }\n\n      } else {\n         echo \"<tr class='tab_bg_1'><td></td><td></td></tr>\";\n         echo \"<tr class='tab_bg_1'><td></td><td></td></tr>\";\n      }\n\n      $tz_warning = '';\n      $tz_available = $DB->areTimezonesAvailable($tz_warning);\n      if ($tz_available || Session::haveRight(\"config\", READ)) {\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td><label for='timezone'>\".__('Time zone').\"</label></td><td>\";\n         if ($tz_available) {\n            $timezones = $DB->getTimezones();\n            Dropdown::showFromArray(\n               'timezone',\n               $timezones, [\n                  'value'                 => $this->fields[\"timezone\"],\n                  'display_emptychoice'   => true\n               ]\n            );\n         } else if (Session::haveRight(\"config\", READ)) {\n            // Display a warning but only if user is more or less an admin\n            echo \"<img src=\\\"{$CFG_GLPI['root_doc']}/pics/warning_min.png\\\">\";\n            echo $tz_warning;\n         }\n         echo \"</td></tr>\";\n      }\n\n      echo \"<tr class='tab_bg_1'>\";\n      if (!GLPI_DEMO_MODE) {\n         $activerand = mt_rand();\n         echo \"<td><label for='dropdown_is_active$activerand'>\".__('Active').\"</label></td><td>\";\n         Dropdown::showYesNo('is_active', $this->fields['is_active'], -1, ['rand' => $activerand]);\n         echo \"</td>\";\n      } else {\n         echo \"<td colspan='2'></td>\";\n      }\n      echo \"<td>\" . _n('Email', 'Emails', Session::getPluralNumber());\n      UserEmail::showAddEmailButton($this);\n      echo \"</td><td>\";\n      UserEmail::showForUser($this);\n      echo \"</td>\";\n      echo \"</tr>\";\n\n      if (!GLPI_DEMO_MODE) {\n         $sincerand = mt_rand();\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td><label for='showdate$sincerand'>\".__('Valid since').\"</label></td><td>\";\n         Html::showDateTimeField(\"begin_date\", ['value'       => $this->fields[\"begin_date\"],\n                                                'rand'        => $sincerand,\n                                                'maybeempty'  => true]);\n         echo \"</td>\";\n\n         $untilrand = mt_rand();\n         echo \"<td><label for='showdate$untilrand'>\".__('Valid until').\"</label></td><td>\";\n         Html::showDateTimeField(\"end_date\", ['value'       => $this->fields[\"end_date\"],\n                                              'rand'        => $untilrand,\n                                              'maybeempty'  => true]);\n         echo \"</td></tr>\";\n      }\n\n      $phonerand = mt_rand();\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td><label for='textfield_phone$phonerand'>\" .  Phone::getTypeName(1) . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"phone\", ['rand' => $phonerand]);\n      echo \"</td>\";\n      //Authentications information : auth method used and server used\n      //don't display is creation of a new user'\n      if (!empty($ID)) {\n         if (Session::haveRight(self::$rightname, self::READAUTHENT)) {\n            echo \"<td>\" . __('Authentication') . \"</td><td>\";\n            echo Auth::getMethodName($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n            if (!empty($this->fields[\"date_sync\"])) {\n               //TRANS: %s is the date of last sync\n               echo '<br>'.sprintf(__('Last synchronization on %s'),\n                                   Html::convDateTime($this->fields[\"date_sync\"]));\n            }\n            if (!empty($this->fields[\"user_dn\"])) {\n               //TRANS: %s is the user dn\n               echo '<br>'.sprintf(__('%1$s: %2$s'), __('User DN'), $this->fields[\"user_dn\"]);\n            }\n            if ($this->fields['is_deleted_ldap']) {\n               echo '<br>'.__('User missing in LDAP directory');\n            }\n\n            echo \"</td>\";\n         } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n         }\n      } else {\n         echo \"<td colspan='2'><input type='hidden' name='authtype' value='1'></td>\";\n      }\n\n      echo \"</tr>\";\n\n      $mobilerand = mt_rand();\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td><label for='textfield_mobile$mobilerand'>\" . __('Mobile phone') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"mobile\", ['rand' => $mobilerand]);\n      echo \"</td>\";\n      $catrand = mt_rand();\n      echo \"<td><label for='dropdown_usercategories_id$catrand'>\" . __('Category') . \"</label></td><td>\";\n      UserCategory::dropdown(['value' => $this->fields[\"usercategories_id\"], 'rand' => $catrand]);\n      echo \"</td></tr>\";\n\n      $phone2rand = mt_rand();\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td><label for='textfield_phone2$phone2rand'>\" .  __('Phone 2') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"phone2\", ['rand' => $phone2rand]);\n      echo \"</td>\";\n      echo \"<td rowspan='4' class='middle'><label for='comment'>\" . __('Comments') . \"</label></td>\";\n      echo \"<td class='center middle' rowspan='4'>\";\n      echo \"<textarea cols='45' rows='6' id='comment' name='comment' >\".$this->fields[\"comment\"].\"</textarea>\";\n      echo \"</td></tr>\";\n\n      $admnumrand = mt_rand();\n      echo \"<tr class='tab_bg_1'><td><label for='textfield_registration_number$admnumrand'>\" . __('Administrative number') . \"</label></td><td>\";\n      Html::autocompletionTextField($this, \"registration_number\", ['rand' => $admnumrand]);\n      echo \"</td></tr>\";\n\n      $titlerand = mt_rand();\n      echo \"<tr class='tab_bg_1'><td><label for='dropdown_usertitles_id$titlerand'>\" . _x('person', 'Title') . \"</label></td><td>\";\n      UserTitle::dropdown(['value' => $this->fields[\"usertitles_id\"], 'rand' => $titlerand]);\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      if (!empty($ID)) {\n         $locrand = mt_rand();\n         echo \"<td><label for='dropdown_locations_id$locrand'>\" . Location::getTypeName(1) . \"</label></td><td>\";\n         $entities = $this->getEntities();\n         if (count($entities) <= 0) {\n            $entities = -1;\n         }\n         Location::dropdown(['value'  => $this->fields[\"locations_id\"],\n                             'rand'   => $locrand,\n                             'entity' => $entities]);\n         echo \"</td>\";\n      }\n      echo \"</tr>\";\n\n      if (empty($ID)) {\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<th colspan='2'>\"._n('Authorization', 'Authorizations', 1).\"</th>\";\n         $recurrand = mt_rand();\n         echo \"<td><label for='dropdown__is_recursive$recurrand'>\" .  __('Recursive') . \"</label></td><td>\";\n         Dropdown::showYesNo(\"_is_recursive\", 0, -1, ['rand' => $recurrand]);\n         echo \"</td></tr>\";\n         $profilerand = mt_rand();\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td><label for='dropdown__profiles_id$profilerand'>\" .  Profile::getTypeName(1) . \"</label></td><td>\";\n         Profile::dropdownUnder(['name'  => '_profiles_id',\n                                 'rand'  => $profilerand,\n                                 'value' => Profile::getDefault()]);\n\n         $entrand = mt_rand();\n         echo \"</td><td><label for='dropdown__entities_id$entrand'>\" .  Entity::getTypeName(1) . \"</label></td><td>\";\n         Entity::dropdown(['name'                => '_entities_id',\n                           'display_emptychoice' => false,\n                           'rand'                => $entrand,\n                           'entity'              => $_SESSION['glpiactiveentities']]);\n         echo \"</td></tr>\";\n      } else {\n         if ($higherrights || $ismyself) {\n            $profilerand = mt_rand();\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='dropdown_profiles_id$profilerand'>\" .  __('Default profile') . \"</label></td><td>\";\n\n            $options   = Dropdown::getDropdownArrayNames('glpi_profiles',\n                                                         Profile_User::getUserProfiles($this->fields['id']));\n\n            Dropdown::showFromArray(\"profiles_id\", $options,\n                                    ['value'               => $this->fields[\"profiles_id\"],\n                                     'rand'                => $profilerand,\n                                     'display_emptychoice' => true]);\n         }\n         if ($higherrights) {\n            $entrand = mt_rand();\n            echo \"</td><td><label for='dropdown_entities_id$entrand'>\" .  __('Default entity') . \"</label></td><td>\";\n            $entities = $this->getEntities();\n            Entity::dropdown(['value'  => $this->fields[\"entities_id\"],\n                              'rand'   => $entrand,\n                              'entity' => $entities]);\n            echo \"</td></tr>\";\n\n            $grouprand = mt_rand();\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='dropdown_profiles_id$grouprand'>\" .  __('Default group') . \"</label></td><td>\";\n\n            $options = [];\n            foreach (Group_User::getUserGroups($this->fields['id']) as $group) {\n               $options[$group['id']] = $group['completename'];\n            }\n\n            Dropdown::showFromArray(\"groups_id\", $options,\n                                    ['value'               => $this->fields[\"groups_id\"],\n                                     'rand'                => $grouprand,\n                                     'display_emptychoice' => true]);\n\n            echo \"</td>\";\n            $userrand = mt_rand();\n            echo \"<td><label for='dropdown_users_id_supervisor_$userrand'>\" .  __('Responsible') . \"</label></td><td>\";\n\n            User::dropdown(['name'   => 'users_id_supervisor',\n                            'value'  => $this->fields[\"users_id_supervisor\"],\n                            'rand'   => $userrand,\n                            'entity' => $_SESSION[\"glpiactive_entity\"],\n                            'right'  => 'all']);\n            echo \"</td></tr>\";\n         }\n\n         if ($this->can($ID, UPDATE)) {\n            echo \"<tr class='tab_bg_1'><th colspan='4'>\". __('Remote access keys') .\"</th></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td>\";\n            echo __(\"Personal token\");\n            echo \"</td><td colspan='2'>\";\n\n            if (!empty($this->fields[\"personal_token\"])) {\n               echo \"<div class='copy_to_clipboard_wrapper'>\";\n               echo Html::input('_personal_token', [\n                                    'value'    => $this->fields[\"personal_token\"],\n                                    'style'    => 'width:90%'\n                                ]);\n               echo \"</div>\";\n               echo \"(\".sprintf(__('generated on %s'),\n                                   Html::convDateTime($this->fields[\"personal_token_date\"])).\")\";\n            }\n            echo \"</td><td>\";\n            Html::showCheckbox(['name'  => '_reset_personal_token',\n                                'title' => __('Regenerate')]);\n            echo \"&nbsp;&nbsp;\".__('Regenerate');\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td>\";\n            echo __(\"API token\");\n            echo \"</td><td colspan='2'>\";\n            if (!empty($this->fields[\"api_token\"])) {\n               echo \"<div class='copy_to_clipboard_wrapper'>\";\n               echo Html::input('_api_token', [\n                                    'value'    => $this->fields[\"api_token\"],\n                                    'style'    => 'width:90%'\n                                ]);\n               echo \"</div>\";\n               echo \"(\".sprintf(__('generated on %s'),\n                                   Html::convDateTime($this->fields[\"api_token_date\"])).\")\";\n            }\n            echo \"</td><td>\";\n            Html::showCheckbox(['name'  => '_reset_api_token',\n                                'title' => __('Regenerate')]);\n            echo \"&nbsp;&nbsp;\".__('Regenerate');\n            echo \"</td></tr>\";\n         }\n\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td colspan='2' class='center'>\";\n         if ($this->fields[\"last_login\"]) {\n            printf(__('Last login on %s'), Html::convDateTime($this->fields[\"last_login\"]));\n         }\n         echo \"</td><td colspan='2'class='center'>\";\n\n         echo \"</td></tr>\";\n      }\n\n      $this->showFormButtons($options);\n\n      return true;\n   }\n\n\n   /** Print the user personnal information for check.\n    *\n    * @param integer $userid ID of the user\n    *\n    * @return void|boolean false if user is not the current user, otherwise print form\n    *\n    * @since 0.84\n    */\n   static function showPersonalInformation($userid) {\n      global $CFG_GLPI;\n\n      $user = new self();\n      if (!$user->can($userid, READ)\n          && ($userid != Session::getLoginUserID())) {\n         return false;\n      }\n      echo \"<table class='tab_glpi left' width='100%'>\";\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='b' width='20%'>\";\n      echo __('Name');\n      echo \"</td><td width='30%'>\";\n      echo getUserName($userid);\n      echo \"</td>\";\n      echo \"<td class='b'  width='20%'>\";\n      echo Phone::getTypeName(1);\n      echo \"</td><td width='30%'>\";\n      echo $user->getField('phone');\n      echo \"</td>\";\n      echo \"</tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='b'>\";\n      echo __('Phone 2');\n      echo \"</td><td>\";\n      echo $user->getField('phone2');\n      echo \"</td>\";\n      echo \"<td class='b'>\";\n      echo __('Mobile phone');\n      echo \"</td><td>\";\n      echo $user->getField('mobile');\n      echo \"</td>\";\n      echo \"</tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='b'>\";\n      echo _n('Email', 'Emails', 1);\n      echo \"</td><td>\";\n      echo $user->getDefaultEmail();\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='b'>\";\n      echo Location::getTypeName(1);\n      echo \"</td><td>\";\n      echo Dropdown::getDropdownName('glpi_locations', $user->getField('locations_id'));\n      echo \"</td>\";\n      echo \"<td colspan='2' class='center'>\";\n      if ($userid == Session::getLoginUserID()) {\n         echo \"<a href='\".$CFG_GLPI['root_doc'].\"/front/preference.php' class='vsubmit'>\".\n               __('Edit').\"</a>\";\n      } else {\n         echo \"&nbsp;\";\n      }\n      echo \"</td>\";\n      echo \"</tr>\";\n      echo \"</table>\";\n   }\n\n\n   /**\n    * Print the user preference form.\n    *\n    * @param string  $target Form target\n    * @param integer $ID     ID of the user\n    *\n    * @return boolean true if user found, false otherwise\n    */\n   function showMyForm($target, $ID) {\n      global $CFG_GLPI, $DB;\n\n      // Affiche un formulaire User\n      if (($ID != Session::getLoginUserID())\n          && !$this->currentUserHaveMoreRightThan($ID)) {\n         return false;\n      }\n      if ($this->getFromDB($ID)) {\n         $rand     = mt_rand();\n         $authtype = $this->getAuthMethodsByID();\n\n         $extauth  = !(($this->fields[\"authtype\"] == Auth::DB_GLPI)\n                       || (($this->fields[\"authtype\"] == Auth::NOT_YET_AUTHENTIFIED)\n                           && !empty($this->fields[\"password\"])));\n\n         // No autocopletion :\n         $save_autocompletion                 = $CFG_GLPI[\"use_ajax_autocompletion\"];\n         $CFG_GLPI[\"use_ajax_autocompletion\"] = false;\n\n         echo \"<div class='center'>\";\n         echo \"<form method='post' name='user_manager' enctype='multipart/form-data' action='\".$target.\"' autocomplete='off'>\";\n         echo \"<table class='tab_cadre_fixe'>\";\n         echo \"<tr><th colspan='4'>\".sprintf(__('%1$s: %2$s'), __('Login'), $this->fields[\"name\"]);\n         echo \"<input type='hidden' name='name' value='\" . $this->fields[\"name\"] . \"'>\";\n         echo \"<input type='hidden' name='id' value='\" . $this->fields[\"id\"] . \"'>\";\n         echo \"</th></tr>\";\n\n         $surnamerand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_realname$surnamerand'>\" . __('Surname') . \"</label></td><td>\";\n\n         if ($extauth\n             && isset($authtype['realname_field'])\n             && !empty($authtype['realname_field'])) {\n\n            echo $this->fields[\"realname\"];\n         } else {\n            Html::autocompletionTextField($this, \"realname\", ['rand' => $surnamerand]);\n         }\n         echo \"</td>\";\n\n         if (!empty($this->fields[\"name\"])) {\n            echo \"<td rowspan='7'>\" . __('Picture') . \"</td>\";\n            echo \"<td rowspan='7'>\";\n            echo \"<div class='user_picture_border_small' id='picture$rand'>\";\n            echo \"<img class='user_picture_small' alt=\\\"\".__s('Picture').\"\\\" src='\".\n                   User::getThumbnailURLForPicture($this->fields['picture']).\"'>\";\n            echo \"</div>\";\n            $full_picture  = \"<div class='user_picture_border'>\";\n            $full_picture .= \"<img class='user_picture' alt=\\\"\".__s('Picture').\"\\\" src='\".\n                              User::getURLForPicture($this->fields['picture']).\"'>\";\n            $full_picture .= \"</div>\";\n\n            Html::showTooltip($full_picture, ['applyto' => \"picture$rand\"]);\n            echo Html::file(['name' => 'picture', 'display' => false, 'onlyimages' => true]);\n\n            echo \"&nbsp;\";\n            Html::showCheckbox(['name' => '_blank_picture', 'title' => __('Clear')]);\n            echo \"&nbsp;\".__('Clear');\n\n            echo \"</td>\";\n            echo \"</tr>\";\n         }\n\n         $firstnamerand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_firstname$firstnamerand'>\" . __('First name') . \"</label></td><td>\";\n         if ($extauth\n             && isset($authtype['firstname_field'])\n             && !empty($authtype['firstname_field'])) {\n\n            echo $this->fields[\"firstname\"];\n         } else {\n            Html::autocompletionTextField($this, \"firstname\", ['rand' => $firstnamerand]);\n         }\n         echo \"</td></tr>\";\n\n         if ($extauth\n            && $this->fields['auths_id']\n               && AuthLDAP::isSyncFieldConfigured($this->fields['auths_id'])) {\n            echo \"<tr class='tab_bg_1'><td>\" . __('Synchronization field') . \"</td><td>\";\n            if (empty($this->fields['sync_field'])) {\n               echo Dropdown::EMPTY_VALUE;\n            } else {\n               echo $this->fields['sync_field'];\n            }\n            echo \"</td></tr>\";\n         } else {\n            echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n         }\n\n         echo \"<tr class='tab_bg_1'>\";\n\n         if (!GLPI_DEMO_MODE) {\n            $langrand = mt_rand();\n            echo \"<td><label for='dropdown_language$langrand'>\" . __('Language') . \"</label></td><td>\";\n            // Language is stored as null in DB if value is same as the global config.\n            $language = $this->fields[\"language\"];\n            if (null === $this->fields[\"language\"]) {\n               $language = $CFG_GLPI['language'];\n            }\n            Dropdown::showLanguages(\n               \"language\",\n               [\n                  'rand'  => $langrand,\n                  'value' => $language,\n               ]\n            );\n            echo \"</td>\";\n         } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n         }\n         echo \"</tr>\";\n\n         //do some rights verification\n         if (!$extauth\n             && Session::haveRight(\"password_update\", \"1\")) {\n\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='password'>\" . __('Password') . \"</label></td>\";\n            echo \"<td><input id='password' type='password' name='password' value='' size='30' autocomplete='new-password' onkeyup=\\\"return passwordCheck();\\\">\";\n            echo \"</td>\";\n            echo \"</tr>\";\n\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='password2'>\" . __('Password confirmation') . \"</label></td>\";\n            echo \"<td><input type='password' name='password2' id='password2' value='' size='30' autocomplete='new-password'>\";\n            echo \"</td></tr>\";\n\n            if ($CFG_GLPI[\"use_password_security\"]) {\n               echo \"<tr class='tab_bg_1'>\";\n               echo \"<td rowspan='2'>\";\n               echo __('Password security policy');\n               echo \"</td>\";\n               echo \"<td rowspan='2'>\";\n               Config::displayPasswordSecurityChecks();\n               echo \"</td>\";\n               echo \"</tr>\";\n            }\n         } else {\n            echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n            echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n            echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n         }\n\n         $tz_warning = '';\n         $tz_available = $DB->areTimezonesAvailable($tz_warning);\n         if ($tz_available || Session::haveRight(\"config\", READ)) {\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='timezone'>\".__('Time zone').\"</label></td><td>\";\n            if ($tz_available) {\n               $timezones = $DB->getTimezones();\n               Dropdown::showFromArray(\n                  'timezone',\n                  $timezones, [\n                     'value'                 => $this->fields[\"timezone\"],\n                     'display_emptychoice'   => true\n                  ]\n               );\n            } else if (Session::haveRight(\"config\", READ)) {\n               // Display a warning but only if user is more or less an admin\n               echo \"<img src=\\\"{$CFG_GLPI['root_doc']}/pics/warning_min.png\\\">\";\n               echo $tz_warning;\n            }\n            echo \"</td>\";\n            if ($extauth\n                || !Session::haveRight(\"password_update\", \"1\")) {\n               echo \"<td colspan='2'></td>\";\n            }\n            echo \"</tr>\";\n         }\n\n         $phonerand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_phone$phonerand'>\" .  Phone::getTypeName(1) . \"</label></td><td>\";\n\n         if ($extauth\n             && isset($authtype['phone_field']) && !empty($authtype['phone_field'])) {\n            echo $this->fields[\"phone\"];\n         } else {\n            Html::autocompletionTextField($this, \"phone\", ['rand' => $phonerand]);\n         }\n         echo \"</td>\";\n         echo \"<td class='top'>\" . _n('Email', 'Emails', Session::getPluralNumber());\n         UserEmail::showAddEmailButton($this);\n         echo \"</td><td>\";\n         UserEmail::showForUser($this);\n         echo \"</td>\";\n         echo \"</tr>\";\n\n         $mobilerand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_mobile$mobilerand'>\" . __('Mobile phone') . \"</label></td><td>\";\n\n         if ($extauth\n             && isset($authtype['mobile_field']) && !empty($authtype['mobile_field'])) {\n            echo $this->fields[\"mobile\"];\n         } else {\n            Html::autocompletionTextField($this, \"mobile\", ['rand' => $mobilerand]);\n         }\n         echo \"</td>\";\n\n         if (count($_SESSION['glpiprofiles']) >1) {\n            $profilerand = mt_rand();\n            echo \"<td><label for='dropdown_profiles_id$profilerand'>\" . __('Default profile') . \"</label></td><td>\";\n\n            $options = Dropdown::getDropdownArrayNames('glpi_profiles',\n                                                       Profile_User::getUserProfiles($this->fields['id']));\n            Dropdown::showFromArray(\"profiles_id\", $options,\n                                    ['value'               => $this->fields[\"profiles_id\"],\n                                     'rand'                => $profilerand,\n                                     'display_emptychoice' => true]);\n            echo \"</td>\";\n\n         } else {\n            echo \"<td colspan='2'>&nbsp;</td>\";\n         }\n         echo \"</tr>\";\n\n         $phone2rand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_phone2$phone2rand'>\" .  __('Phone 2') . \"</label></td><td>\";\n\n         if ($extauth\n             && isset($authtype['phone2_field']) && !empty($authtype['phone2_field'])) {\n            echo $this->fields[\"phone2\"];\n         } else {\n            Html::autocompletionTextField($this, \"phone2\", ['rand' => $phone2rand]);\n         }\n         echo \"</td>\";\n\n         $entities = $this->getEntities();\n         if (!GLPI_DEMO_MODE\n             && (count($_SESSION['glpiactiveentities']) > 1)) {\n            $entrand = mt_rand();\n            echo \"<td><label for='dropdown_entities_id$entrand'>\" . __('Default entity') . \"</td><td>\";\n            Entity::dropdown(['value'  => $this->fields['entities_id'],\n                              'rand'   => $entrand,\n                              'entity' => $entities]);\n         } else {\n            echo \"<td colspan='2'>&nbsp;\";\n         }\n         echo \"</td></tr>\";\n\n         $admnumrand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='textfield_registration_number$admnumrand'>\" . __('Administrative number') . \"</label></td><td>\";\n         if ($extauth\n             && isset($authtype['registration_number_field']) && !empty($authtype['registration_number_field'])) {\n            echo $this->fields[\"registration_number\"];\n         } else {\n            Html::autocompletionTextField($this, \"registration_number\", ['rand' => $admnumrand]);\n         }\n         echo \"</td><td colspan='2'></td></tr>\";\n\n         $locrand = mt_rand();\n         echo \"<tr class='tab_bg_1'><td><label for='dropdown_locations_id$locrand'>\" . Location::getTypeName(1) . \"</label></td><td>\";\n         Location::dropdown(['value'  => $this->fields['locations_id'],\n                             'rand'   => $locrand,\n                             'entity' => $entities]);\n\n         if (Config::canUpdate()) {\n            $moderand = mt_rand();\n            echo \"<td><label for='dropdown_use_mode$moderand'>\" . __('Use GLPI in mode') . \"</label></td><td>\";\n            $modes = [\n               Session::NORMAL_MODE => __('Normal'),\n               Session::DEBUG_MODE  => __('Debug'),\n            ];\n            Dropdown::showFromArray('use_mode', $modes, ['value' => $this->fields[\"use_mode\"], 'rand' => $moderand]);\n         } else {\n            echo \"<td colspan='2'>&nbsp;\";\n         }\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><th colspan='4'>\". __('Remote access keys') .\"</th></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\";\n         echo __(\"Personal token\");\n         echo \"</td><td colspan='2'>\";\n\n         if (!empty($this->fields[\"personal_token\"])) {\n            echo \"<div class='copy_to_clipboard_wrapper'>\";\n            echo Html::input('_personal_token', [\n                                 'value'    => $this->fields[\"personal_token\"],\n                                 'style'    => 'width:90%'\n                             ]);\n            echo \"</div>\";\n            echo \"(\".sprintf(__('generated on %s'),\n                                Html::convDateTime($this->fields[\"personal_token_date\"])).\")\";\n         }\n         echo \"</td><td>\";\n         Html::showCheckbox(['name'  => '_reset_personal_token',\n                             'title' => __('Regenerate')]);\n         echo \"&nbsp;&nbsp;\".__('Regenerate');\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\";\n         echo __(\"API token\");\n         echo \"</td><td colspan='2'>\";\n         if (!empty($this->fields[\"api_token\"])) {\n            echo \"<div class='copy_to_clipboard_wrapper'>\";\n            echo Html::input('_api_token', [\n                                 'value'    => $this->fields[\"api_token\"],\n                                 'style'    => 'width:90%'\n                             ]);\n            echo \"</div>\";\n            echo \"(\".sprintf(__('generated on %s'),\n                                Html::convDateTime($this->fields[\"api_token_date\"])).\")\";\n         }\n         echo \"</td><td>\";\n         Html::showCheckbox(['name'  => '_reset_api_token',\n                             'title' => __('Regenerate')]);\n         echo \"&nbsp;&nbsp;\".__('Regenerate');\n         echo \"</td></tr>\";\n\n         echo \"<tr><td class='tab_bg_2 center' colspan='4'>\";\n         echo \"<input type='submit' name='update' value=\\\"\"._sx('button', 'Save').\"\\\" class='submit'>\";\n         echo \"</td></tr>\";\n\n         echo \"</table>\";\n         Html::closeForm();\n         echo \"</div>\";\n         $CFG_GLPI[\"use_ajax_autocompletion\"] = $save_autocompletion;\n         return true;\n      }\n      return false;\n   }\n\n\n   /**\n    * Get all the authentication method parameters for the current user.\n    *\n    * @return array\n    */\n   function getAuthMethodsByID() {\n      return Auth::getMethodsByID($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n   }\n\n\n   function pre_updateInDB() {\n      global $DB;\n\n      if (($key = array_search('name', $this->updates)) !== false) {\n         /// Check if user does not exists\n         $iterator = $DB->request([\n            'FROM'   => $this->getTable(),\n            'WHERE'  => [\n               'name'   => $this->input['name'],\n               'id'     => ['<>', $this->input['id']]\n            ]\n         ]);\n\n         if (count($iterator)) {\n            //To display a message\n            $this->fields['name'] = $this->oldvalues['name'];\n            unset($this->updates[$key]);\n            unset($this->oldvalues['name']);\n            Session::addMessageAfterRedirect(__('Unable to update login. A user already exists.'),\n                                             false, ERROR);\n         }\n\n         if (!Auth::isValidLogin(stripslashes($this->input['name']))) {\n            $this->fields['name'] = $this->oldvalues['name'];\n            unset($this->updates[$key]);\n            unset($this->oldvalues['name']);\n            Session::addMessageAfterRedirect(__('The login is not valid. Unable to update login.'),\n                                             false, ERROR);\n         }\n\n      }\n\n      // ## Security system except for login update:\n      //\n      // An **external** (ldap, mail) user without User::UPDATE right\n      // should not be able to update its own fields\n      // (for example, fields concerned by ldap synchronisation)\n      // except on login action (which triggers synchronisation).\n      if (Session::getLoginUserID() === (int)$this->input['id']\n          && !Session::haveRight(\"user\", UPDATE)\n          && !strpos($_SERVER['PHP_SELF'], \"/front/login.php\")\n          && isset($this->fields[\"authtype\"])) {\n\n         // extauth ldap case\n         if ($_SESSION[\"glpiextauth\"]\n             && ($this->fields[\"authtype\"] == Auth::LDAP\n                 || Auth::isAlternateAuth($this->fields[\"authtype\"]))) {\n\n            $authtype = Auth::getMethodsByID($this->fields[\"authtype\"],\n                                             $this->fields[\"auths_id\"]);\n            if (count($authtype)) {\n               $fields = AuthLDAP::getSyncFields($authtype);\n               foreach ($fields as $key => $val) {\n                  if (!empty($val)\n                        && (($key2 = array_search($key, $this->updates)) !== false)) {\n\n                     unset ($this->updates[$key2]);\n                     unset($this->oldvalues[$key]);\n\n                  }\n               }\n            }\n         }\n\n         if (($key = array_search(\"is_active\", $this->updates)) !== false) {\n            unset ($this->updates[$key]);\n            unset($this->oldvalues['is_active']);\n         }\n\n         if (($key = array_search(\"comment\", $this->updates)) !== false) {\n            unset ($this->updates[$key]);\n            unset($this->oldvalues['comment']);\n         }\n      }\n   }\n\n   function getSpecificMassiveActions($checkitem = null) {\n\n      $isadmin = static::canUpdate();\n      $actions = parent::getSpecificMassiveActions($checkitem);\n      if ($isadmin) {\n         $actions['Group_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'add']\n                                                         = \"<i class='ma-icon fas fa-users'></i>\".\n                                                           __('Associate to a group');\n         $actions['Group_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'remove']\n                                                         = __('Dissociate from a group');\n         $actions['Profile_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'add']\n                                                         = \"<i class='ma-icon fas fa-user-shield'></i>\".\n                                                           __('Associate to a profile');\n         $actions['Profile_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'remove']\n                                                         = __('Dissociate from a profile');\n         $actions['Group_User'.MassiveAction::CLASS_ACTION_SEPARATOR.'change_group_user']\n                                                         = \"<i class='ma-icon fas fa-users-cog'></i>\".\n                                                           __(\"Move to group\");\n      }\n\n      if (Session::haveRight(self::$rightname, self::UPDATEAUTHENT)) {\n         $prefix                                    = __CLASS__.MassiveAction::CLASS_ACTION_SEPARATOR;\n         $actions[$prefix.'change_authtype']        = \"<i class='ma-icon fas fa-user-cog'></i>\".\n                                                      _x('button', 'Change the authentication method');\n         $actions[$prefix.'force_user_ldap_update'] = \"<i class='ma-icon fas fa-sync'></i>\".\n                                                      __('Force synchronization');\n      }\n      return $actions;\n   }\n\n   static function showMassiveActionsSubForm(MassiveAction $ma) {\n      global $CFG_GLPI;\n\n      switch ($ma->getAction()) {\n         case 'change_authtype' :\n            $rand             = Auth::dropdown(['name' => 'authtype']);\n            $paramsmassaction = ['authtype' => '__VALUE__'];\n            Ajax::updateItemOnSelectEvent(\"dropdown_authtype$rand\", \"show_massiveaction_field\",\n                                          $CFG_GLPI[\"root_doc\"].\n                                             \"/ajax/dropdownMassiveActionAuthMethods.php\",\n                                          $paramsmassaction);\n            echo \"<span id='show_massiveaction_field'><br><br>\";\n            echo Html::submit(_x('button', 'Post'), ['name' => 'massiveaction']).\"</span>\";\n            return true;\n      }\n      return parent::showMassiveActionsSubForm($ma);\n   }\n\n   static function processMassiveActionsForOneItemtype(MassiveAction $ma, CommonDBTM $item,\n                                                       array $ids) {\n\n      switch ($ma->getAction()) {\n         case 'force_user_ldap_update' :\n            foreach ($ids as $id) {\n               if ($item->can($id, UPDATE)) {\n                  if (($item->fields[\"authtype\"] == Auth::LDAP)\n                      || ($item->fields[\"authtype\"] == Auth::EXTERNAL)) {\n                     if (AuthLDAP::forceOneUserSynchronization($item, false)) {\n                        $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_OK);\n                     } else {\n                        $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_KO);\n                        $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n                     }\n                  } else {\n                     $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_KO);\n                     $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n                  }\n               } else {\n                  $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_NORIGHT);\n                  $ma->addMessage($item->getErrorMessage(ERROR_RIGHT));\n               }\n            }\n            return;\n\n         case 'change_authtype' :\n            $input = $ma->getInput();\n            if (!isset($input[\"authtype\"])\n                || !isset($input[\"auths_id\"])) {\n               $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_KO);\n               $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n               return;\n            }\n            if (Session::haveRight(self::$rightname, self::UPDATEAUTHENT)) {\n               if (User::changeAuthMethod($ids, $input[\"authtype\"], $input[\"auths_id\"])) {\n                  $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_OK);\n               } else {\n                  $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_KO);\n               }\n            } else {\n               $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_NORIGHT);\n               $ma->addMessage($item->getErrorMessage(ERROR_RIGHT));\n            }\n            return;\n      }\n      parent::processMassiveActionsForOneItemtype($ma, $item, $ids);\n   }\n\n\n   function rawSearchOptions() {\n      // forcegroup by on name set force group by for all items\n      $tab = [];\n\n      $tab[] = [\n         'id'                 => 'common',\n         'name'               => __('Characteristics')\n      ];\n\n      $tab[] = [\n         'id'                 => '1',\n         'table'              => $this->getTable(),\n         'field'              => 'name',\n         'name'               => __('Login'),\n         'datatype'           => 'itemlink',\n         'forcegroupby'       => true,\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '2',\n         'table'              => $this->getTable(),\n         'field'              => 'id',\n         'name'               => __('ID'),\n         'massiveaction'      => false,\n         'datatype'           => 'number'\n      ];\n\n      $tab[] = [\n         'id'                 => '34',\n         'table'              => $this->getTable(),\n         'field'              => 'realname',\n         'name'               => __('Last name'),\n         'datatype'           => 'string',\n         'autocomplete'       => true,\n      ];\n\n      $tab[] = [\n         'id'                 => '9',\n         'table'              => $this->getTable(),\n         'field'              => 'firstname',\n         'name'               => __('First name'),\n         'datatype'           => 'string',\n         'autocomplete'       => true,\n      ];\n\n      $tab[] = [\n         'id'                 => '5',\n         'table'              => 'glpi_useremails',\n         'field'              => 'email',\n         'name'               => _n('Email', 'Emails', Session::getPluralNumber()),\n         'datatype'           => 'email',\n         'joinparams'         => [\n            'jointype'           => 'child'\n         ],\n         'forcegroupby'       => true,\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '150',\n         'table'              => $this->getTable(),\n         'field'              => 'picture',\n         'name'               => __('Picture'),\n         'datatype'           => 'specific',\n         'nosearch'           => true,\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '28',\n         'table'              => $this->getTable(),\n         'field'              => 'sync_field',\n         'name'               => __('Synchronization field'),\n         'massiveaction'      => false,\n         'datatype'           => 'string',\n         'autocomplete'       => true,\n      ];\n\n      $tab = array_merge($tab, Location::rawSearchOptionsToAdd());\n\n      $tab[] = [\n         'id'                 => '8',\n         'table'              => $this->getTable(),\n         'field'              => 'is_active',\n         'name'               => __('Active'),\n         'datatype'           => 'bool'\n      ];\n\n      $tab[] = [\n         'id'                 => '6',\n         'table'              => $this->getTable(),\n         'field'              => 'phone',\n         'name'               => Phone::getTypeName(1),\n         'datatype'           => 'string',\n         'autocomplete'       => true,\n      ];\n\n      $tab[] = [\n         'id'                 => '10',\n         'table'              => $this->getTable(),\n         'field'              => 'phone2',\n         'name'               => __('Phone 2'),\n         'datatype'           => 'string',\n         'autocomplete'       => true,\n      ];\n\n      $tab[] = [\n         'id'                 => '11',\n         'table'              => $this->getTable(),\n         'field'              => 'mobile',\n         'name'               => __('Mobile phone'),\n         'datatype'           => 'string',\n         'autocomplete'       => true,\n      ];\n\n      $tab[] = [\n         'id'                 => '13',\n         'table'              => 'glpi_groups',\n         'field'              => 'completename',\n         'name'               => Group::getTypeName(Session::getPluralNumber()),\n         'forcegroupby'       => true,\n         'datatype'           => 'itemlink',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_groups_users',\n               'joinparams'         => [\n                  'jointype'           => 'child'\n               ]\n            ]\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '14',\n         'table'              => $this->getTable(),\n         'field'              => 'last_login',\n         'name'               => __('Last login'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '15',\n         'table'              => $this->getTable(),\n         'field'              => 'authtype',\n         'name'               => __('Authentication'),\n         'massiveaction'      => false,\n         'datatype'           => 'specific',\n         'searchtype'         => 'equals',\n         'additionalfields'   => [\n            '0'                  => 'auths_id'\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '30',\n         'table'              => 'glpi_authldaps',\n         'field'              => 'name',\n         'linkfield'          => 'auths_id',\n         'name'               => __('LDAP directory for authentication'),\n         'massiveaction'      => false,\n         'joinparams'         => [\n             'condition'          => 'AND REFTABLE.`authtype` = ' . Auth::LDAP\n         ],\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '31',\n         'table'              => 'glpi_authmails',\n         'field'              => 'name',\n         'linkfield'          => 'auths_id',\n         'name'               => __('Email server for authentication'),\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'condition'          => 'AND REFTABLE.`authtype` = ' . Auth::MAIL\n         ],\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '16',\n         'table'              => $this->getTable(),\n         'field'              => 'comment',\n         'name'               => __('Comments'),\n         'datatype'           => 'text'\n      ];\n\n      $tab[] = [\n         'id'                 => '17',\n         'table'              => $this->getTable(),\n         'field'              => 'language',\n         'name'               => __('Language'),\n         'datatype'           => 'language',\n         'display_emptychoice' => true,\n         'emptylabel'         => 'Default value'\n      ];\n\n      $tab[] = [\n         'id'                 => '19',\n         'table'              => $this->getTable(),\n         'field'              => 'date_mod',\n         'name'               => __('Last update'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '121',\n         'table'              => $this->getTable(),\n         'field'              => 'date_creation',\n         'name'               => __('Creation date'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '20',\n         'table'              => 'glpi_profiles',\n         'field'              => 'name',\n         'name'               => sprintf(__('%1$s (%2$s)'), Profile::getTypeName(Session::getPluralNumber()),\n                                                 Entity::getTypeName(1)),\n         'forcegroupby'       => true,\n         'massiveaction'      => false,\n         'datatype'           => 'dropdown',\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_profiles_users',\n               'joinparams'         => [\n                  'jointype'           => 'child'\n               ]\n            ]\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '21',\n         'table'              => $this->getTable(),\n         'field'              => 'user_dn',\n         'name'               => __('User DN'),\n         'massiveaction'      => false,\n         'datatype'           => 'text'\n      ];\n\n      $tab[] = [\n         'id'                 => '22',\n         'table'              => $this->getTable(),\n         'field'              => 'registration_number',\n         'name'               => __('Administrative number'),\n         'datatype'           => 'string',\n         'autocomplete'       => true,\n      ];\n\n      $tab[] = [\n         'id'                 => '23',\n         'table'              => $this->getTable(),\n         'field'              => 'date_sync',\n         'datatype'           => 'datetime',\n         'name'               => __('Last synchronization'),\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '24',\n         'table'              => $this->getTable(),\n         'field'              => 'is_deleted_ldap',\n         'name'               => __('Deleted user in LDAP directory'),\n         'datatype'           => 'bool',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '80',\n         'table'              => 'glpi_entities',\n         'linkfield'          => 'entities_id',\n         'field'              => 'completename',\n         'name'               => sprintf(__('%1$s (%2$s)'), Entity::getTypeName(Session::getPluralNumber()),\n                                                 Profile::getTypeName(1)),\n         'forcegroupby'       => true,\n         'datatype'           => 'dropdown',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_profiles_users',\n               'joinparams'         => [\n                  'jointype'           => 'child'\n               ]\n            ]\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '81',\n         'table'              => 'glpi_usertitles',\n         'field'              => 'name',\n         'name'               => __('Title'),\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '82',\n         'table'              => 'glpi_usercategories',\n         'field'              => 'name',\n         'name'               => __('Category'),\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '79',\n         'table'              => 'glpi_profiles',\n         'field'              => 'name',\n         'name'               => __('Default profile'),\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '77',\n         'table'              => 'glpi_entities',\n         'field'              => 'name',\n         'massiveaction'      => true,\n         'name'               => __('Default entity'),\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '62',\n         'table'              => $this->getTable(),\n         'field'              => 'begin_date',\n         'name'               => __('Begin date'),\n         'datatype'           => 'datetime'\n      ];\n\n      $tab[] = [\n         'id'                 => '63',\n         'table'              => $this->getTable(),\n         'field'              => 'end_date',\n         'name'               => __('End date'),\n         'datatype'           => 'datetime'\n      ];\n\n      $tab[] = [\n         'id'                 => '60',\n         'table'              => 'glpi_tickets',\n         'field'              => 'id',\n         'name'               => __('Number of tickets as requester'),\n         'forcegroupby'       => true,\n         'usehaving'          => true,\n         'datatype'           => 'count',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_tickets_users',\n               'joinparams'         => [\n                  'jointype'           => 'child',\n                  'condition'          => 'AND NEWTABLE.`type` = ' . CommonITILActor::REQUESTER\n               ]\n            ]\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '61',\n         'table'              => 'glpi_tickets',\n         'field'              => 'id',\n         'name'               => __('Number of written tickets'),\n         'forcegroupby'       => true,\n         'usehaving'          => true,\n         'datatype'           => 'count',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'jointype'           => 'child',\n            'linkfield'          => 'users_id_recipient'\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '64',\n         'table'              => 'glpi_tickets',\n         'field'              => 'id',\n         'name'               => __('Number of assigned tickets'),\n         'forcegroupby'       => true,\n         'usehaving'          => true,\n         'datatype'           => 'count',\n         'massiveaction'      => false,\n         'joinparams'         => [\n            'beforejoin'         => [\n               'table'              => 'glpi_tickets_users',\n               'joinparams'         => [\n                  'jointype'           => 'child',\n                  'condition'          => 'AND NEWTABLE.`type` = '.CommonITILActor::ASSIGN\n               ]\n            ]\n         ]\n      ];\n\n      $tab[] = [\n         'id'                 => '99',\n         'table'              => 'glpi_users',\n         'field'              => 'name',\n         'linkfield'          => 'users_id_supervisor',\n         'name'               => __('Responsible'),\n         'datatype'           => 'dropdown',\n         'massiveaction'      => false,\n      ];\n\n      // add objectlock search options\n      $tab = array_merge($tab, ObjectLock::rawSearchOptionsToAdd(get_class($this)));\n\n      return $tab;\n   }\n\n   static function getSpecificValueToDisplay($field, $values, array $options = []) {\n\n      if (!is_array($values)) {\n         $values = [$field => $values];\n      }\n      switch ($field) {\n         case 'authtype':\n            $auths_id = 0;\n            if (isset($values['auths_id']) && !empty($values['auths_id'])) {\n               $auths_id = $values['auths_id'];\n            }\n            return Auth::getMethodName($values[$field], $auths_id);\n         case 'picture':\n            if (isset($options['html']) && $options['html']) {\n               return Html::image(self::getThumbnailURLForPicture($values['picture']),\n                                  ['class' => 'user_picture_small', 'alt' => __('Picture')]);\n            }\n      }\n      return parent::getSpecificValueToDisplay($field, $values, $options);\n   }\n\n   static function getSpecificValueToSelect($field, $name = '', $values = '', array $options = []) {\n\n      if (!is_array($values)) {\n         $values = [$field => $values];\n      }\n      $options['display'] = false;\n      switch ($field) {\n         case 'authtype' :\n            $options['name'] = $name;\n            $options['value'] = $values[$field];\n            return Auth::dropdown($options);\n      }\n      return parent::getSpecificValueToSelect($field, $name, $values, $options);\n   }\n\n\n   /**\n    * Get all groups where the current user have delegating.\n    *\n    * @since 0.83\n    *\n    * @param integer|string $entities_id ID of the entity to restrict\n    *\n    * @return integer[]\n    */\n   static function getDelegateGroupsForUser($entities_id = '') {\n      global $DB;\n\n      $iterator = $DB->request([\n         'SELECT'          => 'glpi_groups_users.groups_id',\n         'DISTINCT'        => true,\n         'FROM'            => 'glpi_groups_users',\n         'INNER JOIN'      => [\n            'glpi_groups'  => [\n               'FKEY'   => [\n                  'glpi_groups_users'  => 'groups_id',\n                  'glpi_groups'        => 'id'\n               ]\n            ]\n         ],\n         'WHERE'           => [\n            'glpi_groups_users.users_id'        => Session::getLoginUserID(),\n            'glpi_groups_users.is_userdelegate' => 1\n         ] + getEntitiesRestrictCriteria('glpi_groups', '', $entities_id, 1)\n      ]);\n\n      $groups = [];\n      while ($data = $iterator->next()) {\n         $groups[$data['groups_id']] = $data['groups_id'];\n      }\n      return $groups;\n   }\n\n\n   /**\n    * Execute the query to select box with all glpi users where select key = name\n    *\n    * Internaly used by showGroup_Users, dropdownUsers and ajax/getDropdownUsers.php\n    *\n    * @param boolean         $count            true if execute an count(*) (true by default)\n    * @param string|string[] $right            limit user who have specific right (default 'all')\n    * @param integer         $entity_restrict  Restrict to a defined entity (default -1)\n    * @param integer         $value            default value (default 0)\n    * @param integer[]       $used             Already used items ID: not to display in dropdown\n    * @param string          $search           pattern (default '')\n    * @param integer         $start            start LIMIT value (default 0)\n    * @param integer         $limit            limit LIMIT value (default -1 no limit)\n    * @param boolean         $inactive_deleted true to retreive also inactive or deleted users\n    *\n    * @return mysqli_result|boolean\n    */\n   static function getSqlSearchResult ($count = true, $right = \"all\", $entity_restrict = -1, $value = 0,\n                                       array $used = [], $search = '', $start = 0, $limit = -1,\n                                       $inactive_deleted = 0) {\n      global $DB;\n\n      // No entity define : use active ones\n      if ($entity_restrict < 0) {\n         $entity_restrict = $_SESSION[\"glpiactiveentities\"];\n      }\n\n      $joinprofile      = false;\n      $joinprofileright = false;\n      $WHERE = [];\n\n      switch ($right) {\n         case \"interface\" :\n            $joinprofile = true;\n            $WHERE = [\n               'glpi_profiles.interface' => 'central'\n            ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1);\n            break;\n\n         case \"id\" :\n            $WHERE = ['glpi_users.id' => Session::getLoginUserID()];\n            break;\n\n         case \"delegate\" :\n            $groups = self::getDelegateGroupsForUser($entity_restrict);\n            $users  = [];\n            if (count($groups)) {\n               $iterator = $DB->request([\n                  'SELECT'    => 'glpi_users.id',\n                  'FROM'      => 'glpi_groups_users',\n                  'LEFT JOIN' => [\n                     'glpi_users'   => [\n                        'FKEY'   => [\n                           'glpi_groups_users'  => 'users_id',\n                           'glpi_users'         => 'id'\n                        ]\n                     ]\n                  ],\n                  'WHERE'     => [\n                     'glpi_groups_users.groups_id' => $groups,\n                     'glpi_groups_users.users_id'  => ['<>', Session::getLoginUserID()]\n                  ]\n               ]);\n               while ($data = $iterator->next()) {\n                     $users[$data[\"id\"]] = $data[\"id\"];\n               }\n            }\n            // Add me to users list for central\n            if (Session::getCurrentInterface() == 'central') {\n               $users[Session::getLoginUserID()] = Session::getLoginUserID();\n            }\n\n            if (count($users)) {\n               $WHERE = ['glpi_users.id' => $users];\n            }\n            break;\n\n         case \"groups\" :\n            $groups = [];\n            if (isset($_SESSION['glpigroups'])) {\n               $groups = $_SESSION['glpigroups'];\n            }\n            $users  = [];\n            if (count($groups)) {\n               $iterator = $DB->request([\n                  'SELECT'    => 'glpi_users.id',\n                  'FROM'      => 'glpi_groups_users',\n                  'LEFT JOIN' => [\n                     'glpi_users'   => [\n                        'FKEY'   => [\n                           'glpi_groups_users'  => 'users_id',\n                           'glpi_users'         => 'id'\n                        ]\n                     ]\n                  ],\n                  'WHERE'     => [\n                     'glpi_groups_users.groups_id' => $groups,\n                     'glpi_groups_users.users_id'  => ['<>', Session::getLoginUserID()]\n                  ]\n               ]);\n               while ($data = $iterator->next()) {\n                  $users[$data[\"id\"]] = $data[\"id\"];\n               }\n            }\n            // Add me to users list for central\n            if (Session::getCurrentInterface() == 'central') {\n               $users[Session::getLoginUserID()] = Session::getLoginUserID();\n            }\n\n            if (count($users)) {\n               $WHERE = ['glpi_users.id' => $users];\n            }\n\n            break;\n\n         case \"all\" :\n            $WHERE = [\n               'glpi_users.id' => ['>', 0],\n               'OR' => [\n                  'glpi_profiles_users.entities_id' => null\n               ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n            ];\n            break;\n\n         default :\n            $joinprofile = true;\n            $joinprofileright = true;\n            if (!is_array($right)) {\n               $right = [$right];\n            }\n            $forcecentral = true;\n\n            $ORWHERE = [];\n            foreach ($right as $r) {\n               switch ($r) {\n                  case  'own_ticket' :\n                     $ORWHERE[] = [\n                        [\n                           'glpi_profilerights.name'     => 'ticket',\n                           'glpi_profilerights.rights'   => ['&', Ticket::OWN]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     break;\n\n                  case 'create_ticket_validate' :\n                     $ORWHERE[] = [\n                        [\n                           'glpi_profilerights.name'  => 'ticketvalidation',\n                           'OR'                       => [\n                              ['glpi_profilerights.rights'   => ['&', TicketValidation::CREATEREQUEST]],\n                              ['glpi_profilerights.rights'   => ['&', TicketValidation::CREATEINCIDENT]]\n                           ]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     $forcecentral = false;\n                     break;\n\n                  case 'validate_request' :\n                     $ORWHERE[] = [\n                        [\n                           'glpi_profilerights.name'     => 'ticketvalidation',\n                           'glpi_profilerights.rights'   => ['&', TicketValidation::VALIDATEREQUEST]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     $forcecentral = false;\n                     break;\n\n                  case 'validate_incident' :\n                     $ORWHERE[] = [\n                        [\n                           'glpi_profilerights.name'     => 'ticketvalidation',\n                           'glpi_profilerights.rights'   => ['&', TicketValidation::VALIDATEINCIDENT]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     $forcecentral = false;\n                     break;\n\n                  case 'validate' :\n                     $ORWHERE[] = [\n                        [\n                           'glpi_profilerights.name'     => 'changevalidation',\n                           'glpi_profilerights.rights'   => ['&', ChangeValidation::VALIDATE]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     break;\n\n                  case 'create_validate' :\n                     $ORWHERE[] = [\n                        [\n                           'glpi_profilerights.name'     => 'changevalidation',\n                           'glpi_profilerights.rights'   => ['&', ChangeValidation::CREATE]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     break;\n\n                  case 'see_project' :\n                     $ORWHERE[] = [\n                        [\n                           'glpi_profilerights.name'     => 'project',\n                           'glpi_profilerights.rights'   => ['&', Project::READMY]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n                     break;\n\n                  case 'faq' :\n                     $ORWHERE[] = [\n                        [\n                           'glpi_profilerights.name'     => 'knowbase',\n                           'glpi_profilerights.rights'   => ['&', KnowbaseItem::READFAQ]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n\n                  default :\n                     // Check read or active for rights\n                     $ORWHERE[] = [\n                        [\n                           'glpi_profilerights.name'     => $r,\n                           'glpi_profilerights.rights'   => [\n                              '&',\n                              READ | CREATE | UPDATE | DELETE | PURGE\n                           ]\n                        ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                     ];\n               }\n               if (in_array($r, Profile::$helpdesk_rights)) {\n                  $forcecentral = false;\n               }\n            }\n\n            if (count($ORWHERE)) {\n               $WHERE[] = ['OR' => $ORWHERE];\n            }\n\n            if ($forcecentral) {\n               $WHERE['glpi_profiles.interface'] = 'central';\n            }\n      }\n\n      if (!$inactive_deleted) {\n         $WHERE = array_merge(\n            $WHERE, [\n               'glpi_users.is_deleted' => 0,\n               'glpi_users.is_active'  => 1,\n               [\n                  'OR' => [\n                     ['glpi_users.begin_date' => null],\n                     ['glpi_users.begin_date' => ['<', new QueryExpression('NOW()')]]\n                  ]\n               ],\n               [\n                  'OR' => [\n                     ['glpi_users.end_date' => null],\n                     ['glpi_users.end_date' => ['>', new QueryExpression('NOW()')]]\n                  ]\n               ]\n\n            ]\n         );\n      }\n\n      if ((is_numeric($value) && $value)\n          || count($used)) {\n\n         $WHERE[] = [\n            'NOT' => [\n               'glpi_users.id' => $used\n            ]\n         ];\n      }\n\n      $criteria = [\n         'FROM'            => 'glpi_users',\n         'LEFT JOIN'       => [\n            'glpi_useremails'       => [\n               'ON' => [\n                  'glpi_useremails' => 'users_id',\n                  'glpi_users'      => 'id'\n               ]\n            ],\n            'glpi_profiles_users'   => [\n               'ON' => [\n                  'glpi_profiles_users'   => 'users_id',\n                  'glpi_users'            => 'id'\n               ]\n            ]\n         ]\n      ];\n      if ($count) {\n         $criteria['SELECT'] = ['COUNT' => 'glpi_users.id AS CPT'];\n         $criteria['DISTINCT'] = true;\n      } else {\n         $criteria['SELECT'] = 'glpi_users.*';\n         $criteria['DISTINCT'] = true;\n      }\n\n      if ($joinprofile) {\n         $criteria['LEFT JOIN']['glpi_profiles'] = [\n            'ON' => [\n               'glpi_profiles_users'   => 'profiles_id',\n               'glpi_profiles'         => 'id'\n            ]\n         ];\n         if ($joinprofileright) {\n            $criteria['LEFT JOIN']['glpi_profilerights'] = [\n               'ON' => [\n                  'glpi_profilerights' => 'profiles_id',\n                  'glpi_profiles'      => 'id'\n               ]\n            ];\n         }\n      }\n\n      if (!$count) {\n         if ((strlen($search) > 0)) {\n            $txt_search = Search::makeTextSearchValue($search);\n\n            $firstname_field = $DB->quoteName(self::getTableField('firstname'));\n            $realname_field = $DB->quoteName(self::getTableField('realname'));\n            $fields = $_SESSION[\"glpinames_format\"] == self::FIRSTNAME_BEFORE\n               ? [$firstname_field, $realname_field]\n               : [$realname_field, $firstname_field];\n\n            $concat = new \\QueryExpression(\n               'CONCAT(' . implode(',' . $DB->quoteValue(' ') . ',', $fields) . ')'\n               . ' LIKE ' . $DB->quoteValue($txt_search)\n            );\n            $WHERE[] = [\n               'OR' => [\n                  'glpi_users.name'       => ['LIKE', $txt_search],\n                  'glpi_users.realname'   => ['LIKE', $txt_search],\n                  'glpi_users.firstname'  => ['LIKE', $txt_search],\n                  'glpi_users.phone'      => ['LIKE', $txt_search],\n                  'glpi_useremails.email' => ['LIKE', $txt_search],\n                  $concat\n               ]\n            ];\n         }\n\n         if ($_SESSION[\"glpinames_format\"] == self::FIRSTNAME_BEFORE) {\n            $criteria['ORDERBY'] = [\n               'glpi_users.firstname',\n               'glpi_users.realname',\n               'glpi_users.name'\n            ];\n         } else {\n            $criteria['ORDERBY'] = [\n               'glpi_users.realname',\n               'glpi_users.firstname',\n               'glpi_users.name'\n            ];\n         }\n\n         if ($limit > 0) {\n            $criteria['LIMIT'] = $limit;\n            $criteria['START'] = $start;\n         }\n      }\n      $criteria['WHERE'] = $WHERE;\n      return $DB->request($criteria);\n   }\n\n\n   /**\n    * Make a select box with all glpi users where select key = name\n    *\n    * @param $options array of possible options:\n    *    - name             : string / name of the select (default is users_id)\n    *    - value\n    *    - values           : in case of select[multiple], pass the array of multiple values\n    *    - right            : string / limit user who have specific right :\n    *                             id -> only current user (default case);\n    *                             interface -> central;\n    *                             all -> all users;\n    *                             specific right like Ticket::READALL, CREATE.... (is array passed one of all passed right is needed)\n    *    - comments         : boolean / is the comments displayed near the dropdown (default true)\n    *    - entity           : integer or array / restrict to a defined entity or array of entities\n    *                          (default -1 : no restriction)\n    *    - entity_sons      : boolean / if entity restrict specified auto select its sons\n    *                          only available if entity is a single value not an array(default false)\n    *    - all              : Nobody or All display for none selected\n    *                             all=0 (default) -> Nobody\n    *                             all=1 -> All\n    *                             all=-1-> nothing\n    *    - rand             : integer / already computed rand value\n    *    - toupdate         : array / Update a specific item on select change on dropdown\n    *                          (need value_fieldname, to_update, url\n    *                          (see Ajax::updateItemOnSelectEvent for information)\n    *                          and may have moreparams)\n    *    - used             : array / Already used items ID: not to display in dropdown (default empty)\n    *    - ldap_import\n    *    - on_change        : string / value to transmit to \"onChange\"\n    *    - display          : boolean / display or get string (default true)\n    *    - width            : specific width needed (default 80%)\n    *    - specific_tags    : array of HTML5 tags to add to the field\n    *    - url              : url of the ajax php code which should return the json data to show in\n    *                         the dropdown (default /ajax/getDropdownUsers.php)\n    *    - inactive_deleted : retreive also inactive or deleted users\n    *\n    * @return integer|string Random value if displayed, string otherwise\n    */\n   static function dropdown($options = []) {\n      global $CFG_GLPI;\n\n      // Default values\n      $p = [\n         'name'                => 'users_id',\n         'value'               => '',\n         'values'              => [],\n         'right'               => 'id',\n         'all'                 => 0,\n         'display_emptychoice' => true,\n         'placeholder'         => '',\n         'on_change'           => '',\n         'comments'            => 1,\n         'width'               => '80%',\n         'entity'              => -1,\n         'entity_sons'         => false,\n         'used'                => [],\n         'ldap_import'         => false,\n         'toupdate'            => '',\n         'rand'                => mt_rand(),\n         'display'             => true,\n         '_user_index'         => 0,\n         'specific_tags'       => [],\n         'url'                 => $CFG_GLPI['root_doc'] . \"/ajax/getDropdownUsers.php\",\n         'inactive_deleted'    => 0,\n      ];\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $p[$key] = $val;\n         }\n      }\n\n      // check default value (in case of multiple observers)\n      if (is_array($p['value'])) {\n         $p['value'] = $p['value'][$p['_user_index']] ?? 0;\n      }\n\n      // Check default value for dropdown : need to be a numeric\n      if ((strlen($p['value']) == 0) || !is_numeric($p['value'])) {\n         $p['value'] = 0;\n      }\n\n      $output = '';\n      if (!($p['entity'] < 0) && $p['entity_sons']) {\n         if (is_array($p['entity'])) {\n            $output .= \"entity_sons options is not available with array of entity\";\n         } else {\n            $p['entity'] = getSonsOf('glpi_entities', $p['entity']);\n         }\n      }\n\n      // Make a select box with all glpi users\n      $user = getUserName($p['value'], 2);\n\n      $view_users = self::canView();\n\n      if (!empty($p['value']) && ($p['value'] > 0)) {\n          $default = $user[\"name\"];\n      } else {\n         if ($p['all']) {\n            $default = __('All');\n         } else {\n            $default = Dropdown::EMPTY_VALUE;\n         }\n      }\n\n      // get multiple values name\n      $valuesnames = [];\n      foreach ($p['values'] as $value) {\n         if (!empty($value) && ($value > 0)) {\n            $user = getUserName($value, 2);\n            $valuesnames[] = $user[\"name\"];\n         }\n      }\n\n      $field_id = Html::cleanId(\"dropdown_\" . $p['name'] . $p['rand']);\n      $param    = [\n         'value'               => $p['value'],\n         'values'              => $p['values'],\n         'valuename'           => $default,\n         'valuesnames'         => $valuesnames,\n         'width'               => $p['width'],\n         'all'                 => $p['all'],\n         'display_emptychoice' => $p['display_emptychoice'],\n         'placeholder'         => $p['placeholder'],\n         'right'               => $p['right'],\n         'on_change'           => $p['on_change'],\n         'used'                => $p['used'],\n         'inactive_deleted'    => $p['inactive_deleted'],\n         'entity_restrict'     => ($entity_restrict = (is_array($p['entity']) ? json_encode(array_values($p['entity'])) : $p['entity'])),\n         'specific_tags'       => $p['specific_tags'],\n         '_idor_token'         => Session::getNewIDORToken(__CLASS__, [\n            'right'           => $p['right'],\n            'entity_restrict' => $entity_restrict,\n         ]),\n      ];\n\n      $output   = Html::jsAjaxDropdown($p['name'], $field_id,\n                                       $p['url'],\n                                       $param);\n\n      // Display comment\n      if ($p['comments']) {\n         $comment_id = Html::cleanId(\"comment_\".$p['name'].$p['rand']);\n         $link_id = Html::cleanId(\"comment_link_\".$p[\"name\"].$p['rand']);\n         if (!$view_users) {\n            $user[\"link\"] = '';\n         } else if (empty($user[\"link\"])) {\n            $user[\"link\"] = $CFG_GLPI['root_doc'].\"/front/user.php\";\n         }\n\n         if (empty($user['comment'])) {\n            $user['comment'] = Toolbox::ucfirst(\n               sprintf(\n                  __('Show %1$s'),\n                  self::getTypeName(Session::getPluralNumber())\n               )\n            );\n         }\n         $output .= \"&nbsp;\".Html::showToolTip($user[\"comment\"],\n                                      ['contentid' => $comment_id,\n                                            'display'   => false,\n                                            'link'      => $user[\"link\"],\n                                            'linkid'    => $link_id]);\n\n         $paramscomment = [\n            'value'    => '__VALUE__',\n            'itemtype' => User::getType()\n         ];\n\n         if ($view_users) {\n            $paramscomment['withlink'] = $link_id;\n         }\n         $output .= Ajax::updateItemOnSelectEvent($field_id, $comment_id,\n                                                  $CFG_GLPI[\"root_doc\"].\"/ajax/comments.php\",\n                                                  $paramscomment, false);\n      }\n      $output .= Ajax::commonDropdownUpdateItem($p, false);\n\n      if (Session::haveRight('user', self::IMPORTEXTAUTHUSERS)\n          && $p['ldap_import']\n          && Entity::isEntityDirectoryConfigured($_SESSION['glpiactive_entity'])) {\n\n         $output .= \"<span title=\\\"\".__s('Import a user').\"\\\" class='fa fa-plus pointer'\".\n                     \" onClick=\\\"\".Html::jsGetElementbyID('userimport'.$p['rand']).\".dialog('open');\\\">\n                     <span class='sr-only'>\" . __s('Import a user') . \"</span></span>\";\n         $output .= Ajax::createIframeModalWindow('userimport'.$p['rand'],\n                                                  $CFG_GLPI[\"root_doc\"].\n                                                      \"/front/ldap.import.php?entity=\".\n                                                      $_SESSION['glpiactive_entity'],\n                                                  ['title'   => __('Import a user'),\n                                                        'display' => false]);\n      }\n\n      if ($p['display']) {\n         echo $output;\n         return $p['rand'];\n      }\n      return $output;\n   }\n\n\n   /**\n    * Show simple add user form for external auth.\n    *\n    * @return void|boolean false if user does not have rights to import users from external sources,\n    *    print form otherwise\n    */\n   static function showAddExtAuthForm() {\n\n      if (!Session::haveRight(\"user\", self::IMPORTEXTAUTHUSERS)) {\n         return false;\n      }\n\n      echo \"<div class='center'>\\n\";\n      echo \"<form method='post' action='\".Toolbox::getItemTypeFormURL('User').\"'>\\n\";\n\n      echo \"<table class='tab_cadre'>\\n\";\n      echo \"<tr><th colspan='4'>\".__('Automatically add a user of an external source').\"</th></tr>\\n\";\n\n      echo \"<tr class='tab_bg_1'><td>\".__('Login').\"</td>\\n\";\n      echo \"<td><input type='text' name='login'></td></tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='tab_bg_2 center' colspan='2'>\\n\";\n      echo \"<input type='submit' name='add_ext_auth_ldap' value=\\\"\".__s('Import from directories').\"\\\"\n             class='submit'>\\n\";\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td class='tab_bg_2 center' colspan='2'>\\n\";\n      echo \"<input type='submit' name='add_ext_auth_simple' value=\\\"\".__s('Import from other sources').\"\\\"\n             class='submit'>\\n\";\n      echo \"</td></tr>\\n\";\n\n      echo \"</table>\";\n      Html::closeForm();\n      echo \"</div>\\n\";\n   }\n\n\n   /**\n    * Change auth method for given users.\n    *\n    * @param integer[] $IDs      IDs of users\n    * @param integer   $authtype Auth type (see Auth constants)\n    * @param integer   $server   ID of auth server\n    *\n    * @return boolean\n    */\n   static function changeAuthMethod(array $IDs = [], $authtype = 1, $server = -1) {\n      global $DB;\n\n      if (!Session::haveRight(self::$rightname, self::UPDATEAUTHENT)) {\n         return false;\n      }\n\n      if (!empty($IDs)\n          && in_array($authtype, [Auth::DB_GLPI, Auth::LDAP, Auth::MAIL, Auth::EXTERNAL])) {\n\n         $result = $DB->update(\n            self::getTable(), [\n               'authtype'        => $authtype,\n               'auths_id'        => $server,\n               'password'        => '',\n               'is_deleted_ldap' => 0\n            ], [\n               'id' => $IDs\n            ]\n         );\n         if ($result) {\n            foreach ($IDs as $ID) {\n               $changes = [\n                  0,\n                  '',\n                  addslashes(\n                     sprintf(\n                        __('%1$s: %2$s'),\n                        __('Update authentification method to'),\n                        Auth::getMethodName($authtype, $server)\n                     )\n                  )\n               ];\n               Log::history($ID, __CLASS__, $changes, '', Log::HISTORY_LOG_SIMPLE_MESSAGE);\n            }\n\n            return true;\n         }\n      }\n      return false;\n   }\n\n\n   /**\n    * Generate vcard for the current user.\n    *\n    * @return void\n    */\n   function generateVcard() {\n\n      // prepare properties for the Vcard\n      if (!empty($this->fields[\"realname\"])\n          || !empty($this->fields[\"firstname\"])) {\n         $name = [$this->fields[\"realname\"], $this->fields[\"firstname\"], \"\", \"\", \"\"];\n      } else {\n         $name = [$this->fields[\"name\"], \"\", \"\", \"\", \"\"];\n      }\n\n      // create vcard\n      $vcard = new VObject\\Component\\VCard([\n         'N'     => $name,\n         'EMAIL' => $this->getDefaultEmail(),\n         'NOTE'  => $this->fields[\"comment\"],\n      ]);\n      $vcard->add('TEL', $this->fields[\"phone\"], ['type' => 'PREF;WORK;VOICE']);\n      $vcard->add('TEL', $this->fields[\"phone2\"], ['type' => 'HOME;VOICE']);\n      $vcard->add('TEL', $this->fields[\"mobile\"], ['type' => 'WORK;CELL']);\n\n      // send the  VCard\n      $output   = $vcard->serialize();\n      $filename = implode(\"_\", array_filter($name)).\".vcf\";\n\n      @header(\"Content-Disposition: attachment; filename=\\\"$filename\\\"\");\n      @header(\"Content-Length: \".Toolbox::strlen($output));\n      @header(\"Connection: close\");\n      @header(\"content-type: text/x-vcard; charset=UTF-8\");\n\n      echo $output;\n   }\n\n\n   /**\n    * Show items of the current user.\n    *\n    * @param boolean $tech false to display items owned by user, true to display items managed by user\n    *\n    * @return void\n    */\n   function showItems($tech) {\n      global $DB, $CFG_GLPI;\n\n      $ID = $this->getField('id');\n\n      if ($tech) {\n         $type_user   = $CFG_GLPI['linkuser_tech_types'];\n         $type_group  = $CFG_GLPI['linkgroup_tech_types'];\n         $field_user  = 'users_id_tech';\n         $field_group = 'groups_id_tech';\n      } else {\n         $type_user   = $CFG_GLPI['linkuser_types'];\n         $type_group  = $CFG_GLPI['linkgroup_types'];\n         $field_user  = 'users_id';\n         $field_group = 'groups_id';\n      }\n\n      $group_where = \"\";\n      $groups      = [];\n\n      $iterator = $DB->request([\n         'SELECT'    => [\n            'glpi_groups_users.groups_id',\n            'glpi_groups.name'\n         ],\n         'FROM'      => 'glpi_groups_users',\n         'LEFT JOIN' => [\n            'glpi_groups' => [\n               'FKEY' => [\n                  'glpi_groups_users'  => 'groups_id',\n                  'glpi_groups'        => 'id'\n               ]\n            ]\n         ],\n         'WHERE'     => ['glpi_groups_users.users_id' => $ID]\n      ]);\n      $number = count($iterator);\n\n      $group_where = [];\n      while ($data = $iterator->next()) {\n         $group_where[$field_group][] = $data['groups_id'];\n         $groups[$data[\"groups_id\"]] = $data[\"name\"];\n      }\n\n      echo \"<div class='spaced'><table class='tab_cadre_fixehov'>\";\n      $header = \"<tr><th>\"._n('Type', 'Types', 1).\"</th>\";\n      $header .= \"<th>\".Entity::getTypeName(1).\"</th>\";\n      $header .= \"<th>\".__('Name').\"</th>\";\n      $header .= \"<th>\".__('Serial number').\"</th>\";\n      $header .= \"<th>\".__('Inventory number').\"</th>\";\n      $header .= \"<th>\".__('Status').\"</th>\";\n      $header .= \"<th>&nbsp;</th></tr>\";\n      echo $header;\n\n      foreach ($type_user as $itemtype) {\n         if (!($item = getItemForItemtype($itemtype))) {\n            continue;\n         }\n         if ($item->canView()) {\n            $itemtable = getTableForItemType($itemtype);\n            $iterator_params = [\n               'FROM'   => $itemtable,\n               'WHERE'  => [$field_user => $ID]\n            ];\n\n            if ($item->maybeTemplate()) {\n               $iterator_params['WHERE']['is_template'] = 0;\n            }\n            if ($item->maybeDeleted()) {\n               $iterator_params['WHERE']['is_deleted'] = 0;\n            }\n\n            $item_iterator = $DB->request($iterator_params);\n\n            $type_name = $item->getTypeName();\n\n            while ($data = $item_iterator->next()) {\n               $cansee = $item->can($data[\"id\"], READ);\n               $link   = $data[\"name\"];\n               if ($cansee) {\n                  $link_item = $item::getFormURLWithID($data['id']);\n                  if ($_SESSION[\"glpiis_ids_visible\"] || empty($link)) {\n                     $link = sprintf(__('%1$s (%2$s)'), $link, $data[\"id\"]);\n                  }\n                  $link = \"<a href='\".$link_item.\"'>\".$link.\"</a>\";\n               }\n               $linktype = \"\";\n               if ($data[$field_user] == $ID) {\n                  $linktype = self::getTypeName(1);\n               }\n               echo \"<tr class='tab_bg_1'><td class='center'>$type_name</td>\";\n               echo \"<td class='center'>\".Dropdown::getDropdownName(\"glpi_entities\",\n                                                                     $data[\"entities_id\"]).\"</td>\";\n               echo \"<td class='center'>$link</td>\";\n               echo \"<td class='center'>\";\n               if (isset($data[\"serial\"]) && !empty($data[\"serial\"])) {\n                  echo $data[\"serial\"];\n               } else {\n                  echo '&nbsp;';\n               }\n               echo \"</td><td class='center'>\";\n               if (isset($data[\"otherserial\"]) && !empty($data[\"otherserial\"])) {\n                  echo $data[\"otherserial\"];\n               } else {\n                  echo '&nbsp;';\n               }\n               echo \"</td><td class='center'>\";\n               if (isset($data[\"states_id\"])) {\n                  echo Dropdown::getDropdownName(\"glpi_states\", $data['states_id']);\n               } else {\n                  echo '&nbsp;';\n               }\n\n               echo \"</td><td class='center'>$linktype</td></tr>\";\n            }\n         }\n      }\n      if ($number) {\n         echo $header;\n      }\n      echo \"</table></div>\";\n\n      if (count($group_where)) {\n         echo \"<div class='spaced'><table class='tab_cadre_fixehov'>\";\n         $header = \"<tr>\".\n               \"<th>\"._n('Type', 'Types', 1).\"</th>\".\n               \"<th>\".Entity::getTypeName(1).\"</th>\".\n               \"<th>\".__('Name').\"</th>\".\n               \"<th>\".__('Serial number').\"</th>\".\n               \"<th>\".__('Inventory number').\"</th>\".\n               \"<th>\".__('Status').\"</th>\".\n               \"<th>&nbsp;</th></tr>\";\n         echo $header;\n         $nb = 0;\n         foreach ($type_group as $itemtype) {\n            if (!($item = getItemForItemtype($itemtype))) {\n               continue;\n            }\n            if ($item->canView() && $item->isField($field_group)) {\n               $itemtable = getTableForItemType($itemtype);\n               $iterator_params = [\n                  'FROM'   => $itemtable,\n                  'WHERE'  => ['OR' => $group_where]\n               ];\n\n               if ($item->maybeTemplate()) {\n                  $iterator_params['WHERE']['is_template'] = 0;\n               }\n               if ($item->maybeDeleted()) {\n                  $iterator_params['WHERE']['is_deleted'] = 0;\n               }\n\n               $group_iterator = $DB->request($iterator_params);\n\n               $type_name = $item->getTypeName();\n\n               while ($data = $group_iterator->next()) {\n                  $nb++;\n                  $cansee = $item->can($data[\"id\"], READ);\n                  $link   = $data[\"name\"];\n                  if ($cansee) {\n                     $link_item = $item::getFormURLWithID($data['id']);\n                     if ($_SESSION[\"glpiis_ids_visible\"] || empty($link)) {\n                        $link = sprintf(__('%1$s (%2$s)'), $link, $data[\"id\"]);\n                     }\n                     $link = \"<a href='\".$link_item.\"'>\".$link.\"</a>\";\n                  }\n                  $linktype = \"\";\n                  if (isset($groups[$data[$field_group]])) {\n                     $linktype = sprintf(__('%1$s = %2$s'), Group::getTypeName(1),\n                                          $groups[$data[$field_group]]);\n                  }\n                  echo \"<tr class='tab_bg_1'><td class='center'>$type_name</td>\";\n                  echo \"<td class='center'>\".Dropdown::getDropdownName(\"glpi_entities\",\n                                                                        $data[\"entities_id\"]);\n                  echo \"</td><td class='center'>$link</td>\";\n                  echo \"<td class='center'>\";\n                  if (isset($data[\"serial\"]) && !empty($data[\"serial\"])) {\n                     echo $data[\"serial\"];\n                  } else {\n                     echo '&nbsp;';\n                  }\n                  echo \"</td><td class='center'>\";\n                  if (isset($data[\"otherserial\"]) && !empty($data[\"otherserial\"])) {\n                     echo $data[\"otherserial\"];\n                  } else {\n                     echo '&nbsp;';\n                  }\n                  echo \"</td><td class='center'>\";\n                  if (isset($data[\"states_id\"])) {\n                     echo Dropdown::getDropdownName(\"glpi_states\", $data['states_id']);\n                  } else {\n                     echo '&nbsp;';\n                  }\n\n                  echo \"</td><td class='center'>$linktype</td></tr>\";\n               }\n            }\n         }\n         if ($nb) {\n            echo $header;\n         }\n         echo \"</table></div>\";\n      }\n   }\n\n\n   /**\n    * Get user by email, importing it from LDAP if not existing.\n    *\n    * @param string $email\n    *\n    * @return integer ID of user, 0 if not found nor imported\n    */\n   static function getOrImportByEmail($email = '') {\n      global $DB, $CFG_GLPI;\n\n      $iterator = $DB->request([\n         'SELECT'    => 'users_id AS id',\n         'FROM'      => 'glpi_useremails',\n         'LEFT JOIN' => [\n            'glpi_users' => [\n               'FKEY' => [\n                  'glpi_useremails' => 'users_id',\n                  'glpi_users'      => 'id'\n               ]\n            ]\n         ],\n         'WHERE'     => [\n            'glpi_useremails.email' => $DB->escape(stripslashes($email))\n         ],\n         'ORDER'     => ['glpi_users.is_active DESC', 'is_deleted ASC']\n      ]);\n\n      //User still exists in DB\n      if (count($iterator)) {\n         $result = $iterator->next();\n         return $result['id'];\n      } else {\n         if ($CFG_GLPI[\"is_users_auto_add\"]) {\n            //Get all ldap servers with email field configured\n            $ldaps = AuthLDAP::getServersWithImportByEmailActive();\n            //Try to find the user by his email on each ldap server\n\n            foreach ($ldaps as $ldap) {\n               $params = [\n                  'method' => AuthLDAP::IDENTIFIER_EMAIL,\n                  'value'  => $email,\n               ];\n               $res = AuthLDAP::ldapImportUserByServerId($params,\n                                                         AuthLDAP::ACTION_IMPORT,\n                                                         $ldap);\n\n               if (isset($res['id'])) {\n                  return $res['id'];\n               }\n            }\n         }\n      }\n      return 0;\n   }\n\n\n   /**\n    * Handle user deleted in LDAP using configured policy.\n    *\n    * @param integer $users_id\n    *\n    * @return void\n    */\n   static function manageDeletedUserInLdap($users_id) {\n      global $CFG_GLPI;\n\n      //The only case where users_id can be null if when a user has been imported into GLPI\n      //it's dn still exists, but doesn't match the connection filter anymore\n      //In this case, do not try to process the user\n      if (!$users_id) {\n         return;\n      }\n\n      //User is present in DB but not in the directory : it's been deleted in LDAP\n      $tmp = [\n         'id'              => $users_id,\n         'is_deleted_ldap' => 1,\n      ];\n      $myuser = new self();\n      $myuser->getFromDB($users_id);\n\n      //User is already considered as delete from ldap\n      if ($myuser->fields['is_deleted_ldap'] == 1) {\n         return;\n      }\n\n      switch ($CFG_GLPI['user_deleted_ldap']) {\n         //DO nothing\n         default :\n         case AuthLDAP::DELETED_USER_PRESERVE:\n            $myuser->update($tmp);\n            break;\n\n         //Put user in trashbin\n         case AuthLDAP::DELETED_USER_DELETE:\n            $myuser->delete($tmp);\n            break;\n\n         //Delete all user dynamic habilitations and groups\n         case AuthLDAP::DELETED_USER_WITHDRAWDYNINFO:\n            Profile_User::deleteRights($users_id, true);\n            Group_User::deleteGroups($users_id, true);\n            $myuser->update($tmp);\n            break;\n\n         //Deactivate the user\n         case AuthLDAP::DELETED_USER_DISABLE:\n            $tmp['is_active'] = 0;\n            $myuser->update($tmp);\n            break;\n\n         //Deactivate the user+ Delete all user dynamic habilitations and groups\n         case AuthLDAP::DELETED_USER_DISABLEANDWITHDRAWDYNINFO:\n            $tmp['is_active'] = 0;\n            $myuser->update($tmp);\n            Profile_User::deleteRights($users_id, true);\n            Group_User::deleteGroups($users_id, true);\n            break;\n\n      }\n      /*\n      $changes[0] = '0';\n      $changes[1] = '';\n      $changes[2] = __('Deleted user in LDAP directory');\n      Log::history($users_id, 'User', $changes, 0, Log::HISTORY_LOG_SIMPLE_MESSAGE);*/\n   }\n\n   /**\n    * Get user ID from its name.\n    *\n    * @param string $name User name\n    *\n    * @return integer\n    */\n   static function getIdByName($name) {\n      return self::getIdByField('name', $name);\n   }\n\n\n   /**\n    * Get user ID from a field\n    *\n    * @since 0.84\n    *\n    * @param string $field Field name\n    * @param string $value Field value\n    *\n    * @return integer\n    */\n   static function getIdByField($field, $value, $escape = true) {\n      global $DB;\n\n      if ($escape) {\n         $value = addslashes($value);\n      }\n\n      $iterator = $DB->request([\n         'SELECT' => 'id',\n         'FROM'   => self::getTable(),\n         'WHERE'  => [$field => $value]\n      ]);\n\n      if (count($iterator) == 1) {\n         $row = $iterator->next();\n         return (int)$row['id'];\n      }\n      return false;\n   }\n\n\n   /**\n    * Show password update form for current user.\n    *\n    * @param array $error_messages\n    *\n    * @return void\n    */\n   public function showPasswordUpdateForm(array $error_messages = []) {\n      global $CFG_GLPI;\n\n      echo '<form method=\"post\" action=\"' . $CFG_GLPI['root_doc'] . '/front/updatepassword.php\">';\n      echo '<table class=\"tab_cadre\">';\n      echo '<tr><th colspan=\"2\">' . __('Password update') . '</th></tr>';\n\n      if (Session::mustChangePassword()) {\n         echo '<tr class=\"tab_bg_2 center\">';\n         echo '<td colspan=\"2\" class=\"red b\">';\n         echo __('Your password has expired. You must change it to be able to login.');\n         echo '</td>';\n         echo '</tr>';\n      }\n\n      echo '<tr class=\"tab_bg_1\">';\n      echo '<td>';\n      echo __('Login');\n      echo '</td>';\n      echo '<td>';\n      echo '<input type=\"text\" name=\"name\" value=\"' . $this->fields['name'] . '\" readonly=\"readonly\" />';\n      echo '</td>';\n      echo '</tr>';\n\n      echo '<tr class=\"tab_bg_1\">';\n      echo '<td>';\n      echo '<label for=\"current_password\">' . __('Current password') . '</label>';\n      echo '</td>';\n      echo '<td>';\n      echo '<input type=\"password\" id=\"current_password\" name=\"current_password\" />';\n      echo '</td>';\n      echo '</tr>';\n\n      echo '<tr class=\"tab_bg_1\">';\n      echo '<td>';\n      echo '<label for=\"password\">' . __('New password') . '</label>';\n      echo '</td>';\n      echo '<td>';\n      echo '<input type=\"password\" id=\"password\" name=\"password\" autocomplete=\"new-password\" onkeyup=\"return passwordCheck();\" />';\n      echo '</td>';\n      echo '</tr>';\n\n      echo '<tr class=\"tab_bg_1\">';\n      echo '<td>';\n      echo '<label for=\"password2\">' . __('New password confirmation') . '</label>';\n      echo '</td>';\n      echo '<td>';\n      echo '<input type=\"password\" id=\"password2\" name=\"password2\" autocomplete=\"new-password\" />';\n      echo '</td>';\n      echo '</tr>';\n\n      if ($CFG_GLPI['use_password_security']) {\n         echo '<tr class=\"tab_bg_1\">';\n         echo '<td>' . __('Password security policy') . '</td>';\n         echo '<td>';\n         Config::displayPasswordSecurityChecks();\n         echo '</td>';\n         echo '</tr>';\n      }\n\n      echo '<tr class=\"tab_bg_2 center\">';\n      echo '<td colspan=\"2\">';\n      echo '<input type=\"submit\" name=\"update\" value=\"' . __s('Save') . '\" class=\"submit\" />';\n      echo '</td>';\n      echo '</tr>';\n\n      if (!empty($error_messages)) {\n         echo '<tr class=\"tab_bg_2 center\">';\n         echo '<td colspan=\"2\" class=\"red b\">';\n         echo implode('<br/>', $error_messages);\n         echo '</td>';\n         echo '</tr>';\n      }\n\n      echo '</table>';\n      Html::closeForm();\n   }\n\n\n   /**\n    * Show new password form of password recovery process.\n    *\n    * @param $token\n    *\n    * @return void\n    */\n   static function showPasswordForgetChangeForm($token) {\n      global $CFG_GLPI, $DB;\n\n      // Verif token.\n      $token_ok = false;\n      $iterator = $DB->request([\n         'FROM'   => self::getTable(),\n         'WHERE'  => [\n            'password_forget_token'       => $token,\n            new \\QueryExpression('NOW() < ADDDATE(' . $DB->quoteName('password_forget_token_date') . ', INTERVAL 1 DAY)')\n         ]\n      ]);\n\n      if (count($iterator) == 1) {\n         $token_ok = true;\n      }\n      echo \"<div class='center'>\";\n\n      if ($token_ok) {\n         echo \"<form method='post' name='forgetpassword' action='\".$CFG_GLPI['root_doc'].\n                \"/front/lostpassword.php'>\";\n         echo \"<table class='tab_cadre'>\";\n         echo \"<tr><th colspan='2'>\" . __('Forgotten password?').\"</th></tr>\";\n\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td colspan='2'>\". __('Please confirm your email address and enter your new password.').\n              \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\" . _n('Email', 'Emails', 1).\"</td>\";\n         echo \"<td><input type='text' name='email' value='' size='60'></td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\" . __('Password').\"</td>\";\n         echo \"<td><input id='password' type='password' name='password' value='' size='20'\n                    autocomplete='new-password' onkeyup=\\\"return passwordCheck();\\\">\";\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\" . __('Password confirmation').\"</td>\";\n         echo \"<td><input type='password' name='password2' value='' size='20' autocomplete='new-password'>\";\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_1'><td>\".__('Password security policy').\"</td>\";\n         echo \"<td>\";\n         Config::displayPasswordSecurityChecks();\n         echo \"</td></tr>\";\n\n         echo \"<tr class='tab_bg_2 center'><td colspan='2'>\";\n         echo \"<input type='hidden' name='password_forget_token' value='$token'>\";\n         echo \"<input type='submit' name='update' value=\\\"\".__s('Save').\"\\\" class='submit'>\";\n         echo \"</td></tr>\";\n\n         echo \"</table>\";\n         Html::closeForm();\n\n      } else {\n         echo __('Your password reset request has expired or is invalid. Please renew it.');\n      }\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Show request form of password recovery process.\n    *\n    * @return void\n    */\n   static function showPasswordForgetRequestForm() {\n      global $CFG_GLPI;\n\n      echo \"<div class='center'>\";\n      echo \"<form method='post' name='forgetpassword' action='\".$CFG_GLPI['root_doc'].\n             \"/front/lostpassword.php'>\";\n      echo \"<table class='tab_cadre'>\";\n      echo \"<tr><th colspan='2'>\" . __('Forgotten password?').\"</th></tr>\";\n\n      echo \"<tr class='tab_bg_1'><td colspan='2'>\" .\n            __('Please enter your email address. An email will be sent to you and you will be able to choose a new password.').\n           \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_2 center'>\";\n      echo \"<td><input type='text' size='60' name='email' value=''></td>\";\n      echo \"<td><input type='submit' name='update' value=\\\"\".__s('Save').\"\\\" class='submit'>\";\n      echo \"</td></tr>\";\n\n      echo \"</table>\";\n      Html::closeForm();\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Handle password recovery form submission.\n    *\n    * @param array $input\n    *\n    * @throws ForgetPasswordException when requirements are not met\n    *\n    * @return boolean true if password successfully changed, false otherwise\n    */\n   public function updateForgottenPassword(array $input) {\n      $condition = [\n         'glpi_users.is_active'  => 1,\n         'glpi_users.is_deleted' => 0, [\n            'OR' => [\n               ['glpi_users.begin_date' => null],\n               ['glpi_users.begin_date' => ['<', new QueryExpression('NOW()')]]\n            ],\n         ], [\n            'OR'  => [\n               ['glpi_users.end_date'   => null],\n               ['glpi_users.end_date'   => ['>', new QueryExpression('NOW()')]]\n            ]\n         ]\n      ];\n      if ($this->getFromDBbyEmail($input['email'], $condition)) {\n         if (($this->fields[\"authtype\"] == Auth::DB_GLPI)\n             || !Auth::useAuthExt()) {\n\n            if (($input['password_forget_token'] == $this->fields['password_forget_token'])\n                && (abs(strtotime($_SESSION[\"glpi_currenttime\"])\n                        -strtotime($this->fields['password_forget_token_date'])) < DAY_TIMESTAMP)) {\n\n               $input['id'] = $this->fields['id'];\n               Config::validatePassword($input[\"password\"], false); // Throws exception if password is invalid\n               if (!$this->update($input)) {\n                  return false;\n               }\n               $input2 = [\n                  'password_forget_token'      => '',\n                  'password_forget_token_date' => 'NULL',\n                  'id'                         => $this->fields['id']\n               ];\n               $this->update($input2);\n               return true;\n\n            } else {\n               throw new ForgetPasswordException(__('Your password reset request has expired or is invalid. Please renew it.'));\n            }\n\n         } else {\n            throw new ForgetPasswordException(__(\"The authentication method configuration doesn't allow you to change your password.\"));\n         }\n\n      } else {\n         throw new ForgetPasswordException(__('Email address not found.'));\n      }\n\n      return false;\n   }\n\n\n   /**\n    * Displays password recovery result.\n    *\n    * @param array $input\n    *\n    * @return void\n    */\n   public function showUpdateForgottenPassword(array $input) {\n      global $CFG_GLPI;\n\n      echo \"<div class='center'>\";\n      try {\n         if (!$this->updateForgottenPassword($input)) {\n            Html::displayMessageAfterRedirect();\n         } else {\n            echo __('Reset password successful.');\n         }\n      } catch (ForgetPasswordException $e) {\n         echo $e->getMessage();\n      } catch (PasswordTooWeakException $e) {\n         // Force display on error\n         foreach ($e->getMessages() as $message) {\n            Session::addMessageAfterRedirect($message);\n         }\n         Html::displayMessageAfterRedirect();\n      }\n\n      echo \"<br>\";\n      echo \"<a href=\\\"\".$CFG_GLPI['root_doc'].\"/index.php\\\">\".__s('Back').\"</a>\";\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Send password recovery for a user and display result message.\n    *\n    * @param string $email email of the user\n    *\n    * @return void\n    */\n   public function showForgetPassword($email) {\n\n      echo \"<div class='center'>\";\n      try {\n         $this->forgetPassword($email);\n      } catch (ForgetPasswordException $e) {\n         echo $e->getMessage();\n         return;\n      }\n      echo __('An email has been sent to your email address. The email contains information for reset your password.');\n   }\n\n   /**\n    * Send password recovery email for a user.\n    *\n    * @param string $email\n    *\n    * @throws ForgetPasswordException when requirements are not met\n    *\n    * @return boolean true if notification successfully created, false if user not found\n    */\n   public function forgetPassword($email) {\n      $condition = [\n         'glpi_users.is_active'  => 1,\n         'glpi_users.is_deleted' => 0, [\n            'OR' => [\n               ['glpi_users.begin_date' => null],\n               ['glpi_users.begin_date' => ['<', new QueryExpression('NOW()')]]\n            ],\n         ], [\n            'OR'  => [\n               ['glpi_users.end_date'   => null],\n               ['glpi_users.end_date'   => ['>', new QueryExpression('NOW()')]]\n            ]\n         ]\n      ];\n\n      if ($this->getFromDBbyEmail($email, $condition)) {\n\n         // Send token if auth DB or not external auth defined\n         if (($this->fields[\"authtype\"] == Auth::DB_GLPI)\n             || !Auth::useAuthExt()) {\n\n            if (NotificationMailing::isUserAddressValid($email)) {\n               $input = [\n                  'password_forget_token'      => sha1(Toolbox::getRandomString(30)),\n                  'password_forget_token_date' => $_SESSION[\"glpi_currenttime\"],\n                  'id'                         => $this->fields['id'],\n               ];\n               $this->update($input);\n               // Notication on root entity (glpi_users.entities_id is only a pref)\n               NotificationEvent::raiseEvent('passwordforget', $this, ['entities_id' => 0]);\n               QueuedNotification::forceSendFor($this->getType(), $this->fields['id']);\n               return true;\n            } else {\n               throw new ForgetPasswordException(__('Invalid email address'));\n            }\n\n         } else {\n            throw new ForgetPasswordException(__(\"The authentication method configuration doesn't allow you to change your password.\"));\n         }\n\n      }\n\n      throw new ForgetPasswordException(__('Email address not found.'));\n   }\n\n\n   /**\n    * Display information from LDAP server for user.\n    *\n    * @return void\n    */\n   private function showLdapDebug() {\n\n      if ($this->fields['authtype'] != Auth::LDAP) {\n         return false;\n      }\n      echo \"<div class='spaced'>\";\n      echo \"<table class='tab_cadre_fixe'>\";\n      echo \"<tr><th colspan='4'>\".AuthLDAP::getTypeName(1).\"</th></tr>\";\n\n      echo \"<tr class='tab_bg_2'><td>\".__('User DN').\"</td>\";\n      echo \"<td>\".$this->fields['user_dn'].\"</td></tr>\\n\";\n\n      if ($this->fields['user_dn']) {\n         echo \"<tr class='tab_bg_2'><td>\".__('User information').\"</td><td>\";\n         $config_ldap = new AuthLDAP();\n         $ds          = false;\n\n         if ($config_ldap->getFromDB($this->fields['auths_id'])) {\n            $ds = $config_ldap->connect();\n         }\n\n         if ($ds) {\n            $info = AuthLDAP::getUserByDn($ds, $this->fields['user_dn'],\n                                          ['*', 'createTimeStamp', 'modifyTimestamp']);\n            if (is_array($info)) {\n               Html::printCleanArray($info);\n            } else {\n               echo __('No item to display');\n            }\n\n         } else {\n            echo __('Connection failed');\n         }\n\n         echo \"</td></tr>\\n\";\n      }\n\n      echo \"</table></div>\";\n   }\n\n\n   /**\n    * Display debug information for current object.\n    *\n    * @return void\n    */\n   function showDebug() {\n\n      NotificationEvent::debugEvent($this);\n      $this->showLdapDebug();\n   }\n\n   function getUnicityFieldsToDisplayInErrorMessage() {\n\n      return ['id'          => __('ID'),\n                   'entities_id' => Entity::getTypeName(1)];\n   }\n\n\n   function getUnallowedFieldsForUnicity() {\n\n      return array_merge(parent::getUnallowedFieldsForUnicity(),\n                         ['auths_id', 'date_sync', 'entities_id', 'last_login', 'profiles_id']);\n   }\n\n\n   /**\n    * Get a unique generated token.\n    *\n    * @param string $field Field storing the token\n    *\n    * @return string\n    */\n   static function getUniqueToken($field = 'personal_token') {\n      global $DB;\n\n      $ok = false;\n      do {\n         $key    = Toolbox::getRandomString(40);\n         $row = $DB->request([\n            'COUNT'  => 'cpt',\n            'FROM'   => self::getTable(),\n            'WHERE'  => [$field => $key]\n         ])->next();\n\n         if ($row['cpt'] == 0) {\n            return $key;\n         }\n      } while (!$ok);\n\n   }\n\n\n   /**\n    * Get token of a user. If not exists generate it.\n    *\n    * @param integer $ID    User ID\n    * @param string  $field Field storing the token\n    *\n    * @return string|boolean User token, false if user does not exist\n    */\n   static function getToken($ID, $field = 'personal_token') {\n\n      $user = new self();\n      if ($user->getFromDB($ID)) {\n         return $user->getAuthToken($field);\n      }\n\n      return false;\n   }\n\n   /**\n    * Get token of a user. If it does not exists  then generate it.\n    *\n    * @since 9.4\n    *\n    * @param string $field the field storing the token\n    * @param boolean $force_new force generation of a new token\n    *\n    * @return string|false token or false in case of error\n    */\n   public function getAuthToken($field = 'personal_token', $force_new = false) {\n      global $CFG_GLPI;\n\n      if ($this->isNewItem()) {\n         return false;\n      }\n\n      // check date validity for cookie token\n      $outdated = false;\n      if ($field === 'cookie_token') {\n         $date_create = new DateTime($this->fields[$field.\"_date\"]);\n         $date_expir  = $date_create->add(new DateInterval('PT'.$CFG_GLPI[\"login_remember_time\"].'S'));\n\n         if ($date_expir < new DateTime()) {\n            $outdated = true;\n         }\n      }\n\n      // token exists, is not oudated, and we may use it\n      if (!empty($this->fields[$field]) && !$force_new && !$outdated) {\n         return $this->fields[$field];\n      }\n\n      // else get a new token\n      $token = self::getUniqueToken($field);\n\n      // for cookie token, we need to store it hashed\n      $hash = $token;\n      if ($field === 'cookie_token') {\n         $hash = Auth::getPasswordHash($token);\n      }\n\n      // save this token in db\n      $this->update(['id'             => $this->getID(),\n                     $field           => $hash,\n                     $field . \"_date\" => $_SESSION['glpi_currenttime']]);\n\n      return $token;\n   }\n\n\n   /**\n    * Get name of users using default passwords\n    *\n    * @return string[]\n    */\n   static function checkDefaultPasswords() {\n      global $DB;\n\n      $passwords = ['glpi'      => 'glpi',\n                         'tech'      => 'tech',\n                         'normal'    => 'normal',\n                         'post-only' => 'postonly'];\n      $default_password_set = [];\n\n      $crit = ['FIELDS'     => ['name', 'password'],\n                    'is_active'  => 1,\n                    'is_deleted' => 0,\n                    'name'       => array_keys($passwords)];\n\n      foreach ($DB->request('glpi_users', $crit) as $data) {\n         if (Auth::checkPassword($passwords[strtolower($data['name'])], $data['password'])) {\n            $default_password_set[] = $data['name'];\n         }\n      }\n\n      return $default_password_set;\n   }\n\n\n   /**\n    * Get picture URL from picture field.\n    *\n    * @since 0.85\n    *\n    * @param string $picture Picture field value\n    *\n    * @return string\n    */\n   static function getURLForPicture($picture) {\n      global $CFG_GLPI;\n\n      $url = Toolbox::getPictureUrl($picture);\n      if (null !== $url) {\n         return $url;\n      }\n\n      return $CFG_GLPI[\"root_doc\"].\"/pics/picture.png\";\n   }\n\n\n   /**\n    * Get thumbnail URL from picture field.\n    *\n    * @since 0.85\n    *\n    * @param string $picture Picture field value\n    *\n    * @return string\n    */\n   static function getThumbnailURLForPicture($picture) {\n      global $CFG_GLPI;\n\n      // prevent xss\n      $picture = Html::cleanInputText($picture);\n\n      if (!empty($picture)) {\n         $tmp = explode(\".\", $picture);\n         if (count($tmp) ==2) {\n            return $CFG_GLPI[\"root_doc\"].\"/front/document.send.php?file=_pictures/\".$tmp[0].\n                   \"_min.\".$tmp[1];\n         }\n         return $CFG_GLPI[\"root_doc\"].\"/pics/picture_min.png\";\n      }\n      return $CFG_GLPI[\"root_doc\"].\"/pics/picture_min.png\";\n\n   }\n\n\n   /**\n    * Drop existing files for user picture.\n    *\n    * @since 0.85\n    *\n    * @param string $picture Picture field value\n    *\n    * @return void\n    */\n   static function dropPictureFiles($picture) {\n\n      if (!empty($picture)) {\n         // unlink main file\n         if (file_exists(GLPI_PICTURE_DIR.\"/$picture\")) {\n            @unlink(GLPI_PICTURE_DIR.\"/$picture\");\n         }\n         // unlink Thunmnail\n         $tmp = explode(\".\", $picture);\n         if (count($tmp) == 2) {\n            if (file_exists(GLPI_PICTURE_DIR.\"/\".$tmp[0].\"_min.\".$tmp[1])) {\n               @unlink(GLPI_PICTURE_DIR.\"/\".$tmp[0].\"_min.\".$tmp[1]);\n            }\n         }\n      }\n   }\n\n   function getRights($interface = 'central') {\n\n      $values = parent::getRights();\n      //TRANS: short for : Add users from an external source\n      $values[self::IMPORTEXTAUTHUSERS] = ['short' => __('Add external'),\n                                                'long'  => __('Add users from an external source')];\n       //TRANS: short for : Read method for user authentication and synchronization\n      $values[self::READAUTHENT]        = ['short' => __('Read auth'),\n                                                'long'  => __('Read user authentication and synchronization method')];\n      //TRANS: short for : Update method for user authentication and synchronization\n      $values[self::UPDATEAUTHENT]      = ['short' => __('Update auth and sync'),\n                                                'long'  => __('Update method for user authentication and synchronization')];\n\n      return $values;\n   }\n\n\n   /**\n    * Retrieve the list of LDAP field names from a list of fields\n    * allow pattern substitution, e.g. %{name}.\n    *\n    * @since 9.1\n    *\n    * @param string[] $map array of fields\n    *\n    * @return string[]\n    */\n   private static function getLdapFieldNames(array $map) {\n\n      $ret =  [];\n      foreach ($map as $v) {\n         /** @var array $reg */\n         if (preg_match_all('/%{(.*)}/U', $v, $reg)) {\n            // e.g. \"%{country} > %{city} > %{site}\"\n            foreach ($reg [1] as $f) {\n               $ret [] = $f;\n            }\n         } else {\n            // single field name\n            $ret [] = $v;\n         }\n      }\n      return $ret;\n   }\n\n\n   /**\n    * Retrieve the value of a fields from a LDAP result applying needed substitution of %{value}.\n    *\n    * @since 9.1\n    *\n    * @param string $map String with field format\n    * @param array  $res LDAP result\n    *\n    * @return string\n    */\n   private static function getLdapFieldValue($map, array $res) {\n\n      $map = Toolbox::unclean_cross_side_scripting_deep($map);\n      $ret = preg_replace_callback('/%{(.*)}/U',\n                                    function ($matches) use ($res) {\n                                       return (isset($res[0][$matches[1]][0]) ? $res[0][$matches[1]][0] : '');\n                                    }, $map );\n\n      return $ret == $map ? (isset($res[0][$map][0]) ? $res[0][$map][0] : '') : $ret;\n   }\n\n   /**\n    * Get/Print the switch language form.\n    *\n    * @param boolean $display Whether to display or return output\n    * @param array   $options Options\n    *    - string   value       Selected language value\n    *    - boolean  showbutton  Whether to display or not submit button\n    *\n    * @return void|string Nothing if displayed, string to display otherwise\n    */\n   function showSwitchLangForm($display = true, array $options = []) {\n\n      $params = [\n         'value'        => $_SESSION[\"glpilanguage\"],\n         'display'      => false,\n         'showbutton'   => true\n      ];\n\n      foreach ($options as $key => $value) {\n         $params[$key] = $value;\n      }\n\n      $out = '';\n      $out .= \"<form method='post' name='switchlang' action='\".User::getFormURL().\"' autocomplete='off'>\";\n      $out .= \"<p class='center'>\";\n      $out .= Dropdown::showLanguages(\"language\", $params);\n      if ($params['showbutton'] === true) {\n         $out .= \"&nbsp;<input type='submit' name='update' value=\\\"\"._sx('button', 'Save').\"\\\" class='submit'>\";\n      }\n      $out .= \"</p>\";\n      $out .= Html::closeForm(false);\n\n      if ($display === true) {\n         echo $out;\n      } else {\n         return $out;\n      }\n   }\n\n   /**\n    * Get list of entities ids for current user.\n    *\n    * @return integer[]\n    */\n   private function getEntities() {\n      //get user entities\n      if ($this->entities == null) {\n         $this->entities = Profile_User::getUserEntities($this->fields['id'], true);\n      }\n      return $this->entities;\n   }\n\n\n   /**\n    * Give cron information.\n    *\n    * @param string $name Task's name\n    *\n    * @return array\n    */\n   public static function cronInfo(string $name): array {\n\n      $info = [];\n      switch ($name) {\n         case 'passwordexpiration':\n            $info = [\n               'description' => __('Handle users passwords expiration policy'),\n               'parameter'   => __('Maximum expiration notifications to send at once'),\n            ];\n            break;\n      }\n      return $info;\n   }\n\n   /**\n    * Cron that notify users about when their password expire and deactivate their account\n    * depending on password expiration policy.\n    *\n    * @param CronTask $task\n    *\n    * @return integer\n    */\n   public static function cronPasswordExpiration(CronTask $task) {\n      global $CFG_GLPI, $DB;\n\n      $expiration_delay   = (int)$CFG_GLPI['password_expiration_delay'];\n      $notice_time        = (int)$CFG_GLPI['password_expiration_notice'];\n      $notification_limit = (int)$task->fields['param'];\n      $lock_delay         = (int)$CFG_GLPI['password_expiration_lock_delay'];\n\n      if (-1 === $expiration_delay || (-1 === $notice_time && -1 === $lock_delay)) {\n         // Nothing to do if passwords does not expire\n         // or if password expires without notice and with no lock delay\n         return 0;\n      }\n\n      // Notify users about expiration of their password.\n      $to_notify_count = 0;\n      if (-1 !== $notice_time) {\n         $notification_request = [\n            'FROM'      => self::getTable(),\n            'LEFT JOIN' => [\n               Alert::getTable() => [\n                  'ON' => [\n                     Alert::getTable() => 'items_id',\n                     self::getTable()  => 'id',\n                     [\n                        'AND' => [\n                           Alert::getTableField('itemtype') => self::getType(),\n                        ]\n                     ],\n                  ]\n               ]\n            ],\n            'WHERE'     => [\n               self::getTableField('is_deleted') => 0,\n               self::getTableField('is_active')  => 1,\n               self::getTableField('authtype')   => Auth::DB_GLPI,\n               new QueryExpression(\n                  sprintf(\n                     'NOW() > ADDDATE(%s, INTERVAL %s DAY)',\n                     $DB->quoteName(self::getTableField('password_last_update')),\n                     $expiration_delay - $notice_time\n                  )\n               ),\n               // Get only users that has not yet been notified within last day\n               'OR'                              => [\n                  [Alert::getTableField('date') => null],\n                  [Alert::getTableField('date') => ['<', new QueryExpression('CURRENT_TIMESTAMP() - INTERVAL 1 day')]],\n               ],\n            ],\n         ];\n\n         $to_notify_count_request = array_merge(\n            $notification_request,\n            [\n               'COUNT'  => 'cpt',\n            ]\n         );\n         $to_notify_count = $DB->request($to_notify_count_request)->next()['cpt'];\n\n         $notification_data_request  = array_merge(\n            $notification_request,\n            [\n               'SELECT'    => [\n                  self::getTableField('id as user_id'),\n                  Alert::getTableField('id as alert_id'),\n               ],\n               'LIMIT'     => $notification_limit,\n            ]\n         );\n         $notification_data_iterator = $DB->request($notification_data_request);\n\n         foreach ($notification_data_iterator as $notification_data) {\n            $user_id  = $notification_data['user_id'];\n            $alert_id = $notification_data['alert_id'];\n\n            $user = new User();\n            $user->getFromDB($user_id);\n\n            $is_notification_send = NotificationEvent::raiseEvent(\n               'passwordexpires',\n               $user,\n               ['entities_id' => 0] // Notication on root entity (glpi_users.entities_id is only a pref)\n            );\n            if (!$is_notification_send) {\n               continue;\n            }\n\n            $task->addVolume(1);\n\n            $alert = new Alert();\n\n            // Delete existing alert if any\n            if (null !== $alert_id) {\n               $alert->delete(['id' => $alert_id]);\n            }\n\n            // Add an alert to not warn user for at least one day\n            $alert->add(\n               [\n                  'itemtype' => 'User',\n                  'items_id' => $user_id,\n                  'type'     => Alert::NOTICE,\n               ]\n            );\n         }\n      }\n\n      // Disable users if their password has expire for too long.\n      if (-1 !== $lock_delay) {\n         $DB->update(\n            self::getTable(),\n            [\n               'is_active'         => 0,\n               'cookie_token'      => null,\n               'cookie_token_date' => null,\n            ],\n            [\n               'is_deleted' => 0,\n               'is_active'  => 1,\n               'authtype'   => Auth::DB_GLPI,\n               new QueryExpression(\n                  sprintf(\n                     'NOW() > ADDDATE(ADDDATE(%s, INTERVAL %d DAY), INTERVAL %s DAY)',\n                     $DB->quoteName(self::getTableField('password_last_update')),\n                     $expiration_delay,\n                     $lock_delay\n                  )\n               ),\n            ]\n         );\n      }\n\n      return -1 !== $notice_time && $to_notify_count > $notification_limit\n         ? -1 // -1 for partial process (remaining notifications to send)\n         : 1; // 1 for fully process\n   }\n\n   /**\n    * Get password expiration time.\n    *\n    * @return null|int Password expiration time, or null if expiration mechanism is not active.\n    */\n   public function getPasswordExpirationTime() {\n      global $CFG_GLPI;\n\n      if (!array_key_exists('id', $this->fields) || $this->fields['id'] < 1) {\n         return null;\n      }\n\n      $expiration_delay = (int)$CFG_GLPI['password_expiration_delay'];\n\n      if (-1 === $expiration_delay) {\n         return null;\n      }\n\n      return strtotime(\n         '+ ' . $expiration_delay . ' days',\n         strtotime($this->fields['password_last_update'])\n      );\n   }\n\n   /**\n    * Check if password should be changed (if it expires soon).\n    *\n    * @return boolean\n    */\n   public function shouldChangePassword() {\n      global $CFG_GLPI;\n\n      if ($this->hasPasswordExpired()) {\n         return true; // too late to change password, but returning false would not be logical here\n      }\n\n      $expiration_time = $this->getPasswordExpirationTime();\n      if (null === $expiration_time) {\n         return false;\n      }\n\n      $notice_delay    = (int)$CFG_GLPI['password_expiration_notice'];\n      if (-1 === $notice_delay) {\n         return false;\n      }\n\n      $notice_time = strtotime('- ' . $notice_delay . ' days', $expiration_time);\n\n      return $notice_time < time();\n   }\n\n   /**\n    * Check if password expired.\n    *\n    * @return boolean\n    */\n   public function hasPasswordExpired() {\n\n      $expiration_time = $this->getPasswordExpirationTime();\n      if (null === $expiration_time) {\n         return false;\n      }\n\n      return $expiration_time < time();\n   }\n\n   public static function getFriendlyNameSearchCriteria(string $filter): array {\n      $table     = self::getTable();\n      $login     = DBmysql::quoteName(\"$table.name\");\n      $firstname = DBmysql::quoteName(\"$table.firstname\");\n      $lastname  = DBmysql::quoteName(\"$table.realname\");\n\n      $filter = strtolower($filter);\n      $filter_no_spaces = str_replace(\" \", \"\", $filter);\n\n      return [\n         'OR' => [\n            ['RAW' => [\"LOWER($login)\" => ['LIKE', \"%$filter%\"]]],\n            ['RAW' => [\"LOWER(REPLACE(CONCAT($firstname, $lastname), ' ', ''))\" => ['LIKE', \"%$filter_no_spaces%\"]]],\n            ['RAW' => [\"LOWER(REPLACE(CONCAT($lastname, $firstname), ' ', ''))\" => ['LIKE', \"%$filter_no_spaces%\"]]],\n         ]\n      ];\n   }\n\n   public static function getFriendlyNameFields(string $alias = \"name\") {\n      $config = Config::getConfigurationValues('core');\n      if ($config['names_format'] == User::FIRSTNAME_BEFORE) {\n         $first = \"firstname\";\n         $second = \"realname\";\n      } else {\n         $first = \"realname\";\n         $second = \"firstname\";\n      }\n\n      $table  = self::getTable();\n      $first  = DB::quoteName(\"$table.$first\");\n      $second = DB::quoteName(\"$table.$second\");\n      $alias  = DB::quoteName($alias);\n      $name   = DB::quoteName(self::getNameField());\n\n      return new QueryExpression(\"IF(\n            $first <> '' && $second <> '',\n            CONCAT($first, ' ', $second),\n            $name\n         ) AS $alias\"\n      );\n   }\n\n   static function getIcon() {\n      return \"fas fa-user\";\n   }\n\n   /**\n    * Add groups stored in \"_ldap_rules/groups_id\" special input\n    */\n   public function applyGroupsRules() {\n      if (!isset($this->input[\"_ldap_rules\"]['groups_id'])) {\n         return;\n      }\n\n      $group_ids = array_unique($this->input[\"_ldap_rules\"]['groups_id']);\n      foreach ($group_ids as $group_id) {\n         $group_user = new Group_User();\n\n         $data = [\n            'groups_id' => $group_id,\n            'users_id'  => $this->getId()\n         ];\n\n         if (!$group_user->getFromDBByCrit($data)) {\n            $group_user->add($data);\n         }\n\n      }\n   }\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2021 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n*/\n\nnamespace tests\\units;\n\nuse \\DbTestCase;\n\n/* Test for inc/dropdown.class.php */\n\nclass Dropdown extends DbTestCase {\n\n   public function testShowLanguages() {\n\n      $opt = [ 'display_emptychoice' => true, 'display' => false ];\n      $out = \\Dropdown::showLanguages('dropfoo', $opt);\n      $this->string($out)\n         ->contains(\"name='dropfoo'\")\n         ->contains(\"value='' selected\")\n         ->notContains(\"value='0'\")\n         ->contains(\"value='fr_FR'\");\n\n      $opt = ['display' => false, 'value' => 'cs_CZ', 'rand' => '1234'];\n      $out = \\Dropdown::showLanguages('language', $opt);\n      $this->string($out)\n         ->notContains(\"value=''\")\n         ->notContains(\"value='0'\")\n         ->contains(\"name='language' id='dropdown_language1234\")\n         ->contains(\"value='cs_CZ' selected\")\n         ->contains(\"value='fr_FR'\");\n   }\n\n   public function dataTestImport() {\n      return [\n            // input,             name,  message\n            [ [ ],                '',    'missing name'],\n            [ [ 'name' => ''],    '',    'empty name'],\n            [ [ 'name' => ' '],   '',    'space name'],\n            [ [ 'name' => ' a '], 'a',   'simple name'],\n            [ [ 'name' => 'foo'], 'foo', 'simple name'],\n      ];\n   }\n\n   /**\n    * @dataProvider dataTestImport\n    */\n   public function testImport($input, $result, $msg) {\n      $id = \\Dropdown::import('UserTitle', $input);\n      if ($result) {\n         $this->integer((int)$id)->isGreaterThan(0);\n         $ut = new \\UserTitle();\n         $this->boolean($ut->getFromDB($id))->isTrue();\n         $this->string($ut->getField('name'))->isIdenticalTo($result);\n      } else {\n         $this->integer((int)$id)->isLessThan(0);\n      }\n   }\n\n   public function dataTestTreeImport() {\n      return [\n            // input,                                  name,    completename, message\n            [ [ ],                                     '',      '',           'missing name'],\n            [ [ 'name' => ''],                          '',     '',           'empty name'],\n            [ [ 'name' => ' '],                         '',     '',           'space name'],\n            [ [ 'name' => ' a '],                       'a',    'a',          'simple name'],\n            [ [ 'name' => 'foo'],                       'foo',  'foo',        'simple name'],\n            [ [ 'completename' => 'foo > bar'],         'bar',  'foo > bar',  'two names'],\n            [ [ 'completename' => ' '],                 '',     '',           'only space'],\n            [ [ 'completename' => '>'],                 '',     '',           'only >'],\n            [ [ 'completename' => ' > '],               '',     '',           'only > and spaces'],\n            [ [ 'completename' => 'foo>bar'],           'bar',  'foo > bar',  'two names with no space'],\n            [ [ 'completename' => '>foo>>bar>'],        'bar',  'foo > bar',  'two names with additional >'],\n            [ [ 'completename' => ' foo >   > bar > '], 'bar',  'foo > bar',  'two names with garbage'],\n      ];\n   }\n\n   /**\n    * @dataProvider dataTestTreeImport\n    */\n   public function testTreeImport($input, $result, $complete, $msg) {\n      $input['entities_id'] = getItemByTypeName('Entity', '_test_root_entity', true);\n      $id = \\Dropdown::import('Location', $input);\n      if ($result) {\n         $this->integer((int)$id, $msg)->isGreaterThan(0);\n         $ut = new \\Location();\n         $this->boolean($ut->getFromDB($id))->isTrue();\n         $this->string($ut->getField('name'))->isIdenticalTo($result);\n         $this->string($ut->getField('completename'))->isIdenticalTo($complete);\n      } else {\n         $this->integer((int)$id)->isLessThanOrEqualTo(0);\n      }\n   }\n\n   public function testGetDropdownName() {\n      global $CFG_GLPI;\n\n      $ret = \\Dropdown::getDropdownName('not_a_known_table', 1);\n      $this->string($ret)->isIdenticalTo('&nbsp;');\n\n      $cat = getItemByTypeName('TaskCategory', '_cat_1');\n\n      $subCat = getItemByTypeName('TaskCategory', '_subcat_1');\n\n      // basic test returns string only\n      $expected = $cat->fields['name'].\" > \".$subCat->fields['name'];\n      $ret = \\Dropdown::getDropdownName('glpi_taskcategories', $subCat->getID());\n      $this->string($ret)->isIdenticalTo($expected);\n\n      // test of return with comments\n      $expected = ['name'    => $cat->fields['name'].\" > \".$subCat->fields['name'],\n                        'comment' => \"<span class='b'>Complete name</span>: \".$cat->fields['name'].\" > \"\n                                    .$subCat->fields['name'].\"<br><span class='b'>&nbsp;Comments&nbsp;</span>\"\n                                    .$subCat->fields['comment']];\n      $ret = \\Dropdown::getDropdownName( 'glpi_taskcategories', $subCat->getID(), true );\n      $this->array($ret)->isIdenticalTo($expected);\n\n      // test of return without $tooltip\n      $expected = ['name'    => $cat->fields['name'].\" > \".$subCat->fields['name'],\n                        'comment' => $subCat->fields['comment']];\n      $ret = \\Dropdown::getDropdownName( 'glpi_taskcategories', $subCat->getID(), true, true, false );\n      $this->array($ret)->isIdenticalTo($expected);\n\n      // test of return with translations\n      $CFG_GLPI['translate_dropdowns'] = 1;\n      $_SESSION[\"glpilanguage\"] = \\Session::loadLanguage( 'fr_FR' );\n      $_SESSION['glpi_dropdowntranslations'] = \\DropdownTranslation::getAvailableTranslations($_SESSION[\"glpilanguage\"]);\n      $expected = ['name'    => 'FR - _cat_1 > FR - _subcat_1',\n                        'comment' => 'FR - Commentaire pour sous-cat\u00e9gorie _subcat_1'];\n      $ret = \\Dropdown::getDropdownName( 'glpi_taskcategories', $subCat->getID(), true, true, false );\n      // switch back to default language\n      $_SESSION[\"glpilanguage\"] = \\Session::loadLanguage('en_GB');\n      $this->array($ret)->isIdenticalTo($expected);\n\n      ////////////////////////////////\n      // test for other dropdown types\n      ////////////////////////////////\n\n      ///////////\n      // Computer\n      $computer = getItemByTypeName( 'Computer', '_test_pc01' );\n      $ret = \\Dropdown::getDropdownName( 'glpi_computers', $computer->getID());\n      $this->string($ret)->isIdenticalTo($computer->getName());\n\n      $expected = ['name'    => $computer->getName(),\n                        'comment' => $computer->fields['comment']];\n      $ret = \\Dropdown::getDropdownName( 'glpi_computers', $computer->getID(), true);\n      $this->array($ret)->isIdenticalTo($expected);\n\n      //////////\n      // Contact\n      $contact = getItemByTypeName( 'Contact', '_contact01_name' );\n      $expected = $contact->getName();\n      $ret = \\Dropdown::getDropdownName( 'glpi_contacts', $contact->getID());\n      $this->string($ret)->isIdenticalTo($expected);\n\n      // test of return with comments\n      $expected = ['name'    => $contact->getName(),\n                        'comment' => \"Comment for contact _contact01_name<br><span class='b'>\".\n                                    \"Phone: </span>0123456789<br><span class='b'>Phone 2: </span>0123456788<br><span class='b'>\".\n                                    \"Mobile phone: </span>0623456789<br><span class='b'>Fax: </span>0123456787<br>\".\n                                    \"<span class='b'>Email: </span>_contact01_firstname._contact01_name@glpi.com\"];\n      $ret = \\Dropdown::getDropdownName( 'glpi_contacts', $contact->getID(), true );\n      $this->array($ret)->isIdenticalTo($expected);\n\n      // test of return without $tooltip\n      $expected = ['name'    => $contact->getName(),\n                        'comment' => $contact->fields['comment']];\n      $ret = \\Dropdown::getDropdownName( 'glpi_contacts', $contact->getID(), true, true, false );\n      $this->array($ret)->isIdenticalTo($expected);\n\n      ///////////\n      // Supplier\n      $supplier = getItemByTypeName( 'Supplier', '_suplier01_name' );\n      $expected = $supplier->getName();\n      $ret = \\Dropdown::getDropdownName( 'glpi_suppliers', $supplier->getID());\n      $this->string($ret)->isIdenticalTo($expected);\n\n      // test of return with comments\n      $expected = ['name'    => $supplier->getName(),\n                        'comment' => \"Comment for supplier _suplier01_name<br><span class='b'>Phone: </span>0123456789<br>\".\n                                     \"<span class='b'>Fax: </span>0123456787<br><span class='b'>Email: </span>info@_supplier01_name.com\"];\n      $ret = \\Dropdown::getDropdownName( 'glpi_suppliers', $supplier->getID(), true );\n      $this->array($ret)->isIdenticalTo($expected);\n\n      // test of return without $tooltip\n      $expected = ['name'    => $supplier->getName(),\n                        'comment' => $supplier->fields['comment']];\n      $ret = \\Dropdown::getDropdownName( 'glpi_suppliers', $supplier->getID(), true, true, false );\n      $this->array($ret)->isIdenticalTo($expected);\n\n      ///////////\n      // Netpoint\n      $netpoint = getItemByTypeName( 'Netpoint', '_netpoint01' );\n      $location = getItemByTypeName( 'Location', '_location01' );\n      $expected = $netpoint->getName().\" (\".$location->getName().\")\";\n      $ret = \\Dropdown::getDropdownName( 'glpi_netpoints', $netpoint->getID());\n      $this->string($ret)->isIdenticalTo($expected);\n\n      // test of return with comments\n      $expected = ['name'    => $expected,\n                        'comment' => \"Comment for netpoint _netpoint01\"];\n      $ret = \\Dropdown::getDropdownName( 'glpi_netpoints', $netpoint->getID(), true );\n      $this->array($ret)->isIdenticalTo($expected);\n\n      // test of return without $tooltip\n      $ret = \\Dropdown::getDropdownName( 'glpi_netpoints', $netpoint->getID(), true, true, false );\n      $this->array($ret)->isIdenticalTo($expected);\n\n      ///////////\n      // Budget\n      $budget = getItemByTypeName( 'Budget', '_budget01' );\n      $expected = $budget->getName();\n      $ret = \\Dropdown::getDropdownName( 'glpi_budgets', $budget->getID());\n      $this->string($ret)->isIdenticalTo($expected);\n\n      // test of return with comments\n      $expected = ['name'    =>  $budget->getName(),\n                        'comment' => \"Comment for budget _budget01<br><span class='b'>Location</span>: \".\n                                       \"_location01<br><span class='b'>Type</span>: _budgettype01<br><span class='b'>\".\n                                       \"Start date</span>: 2016-10-18 <br><span class='b'>End date</span>: 2016-12-31 \"];\n      $ret = \\Dropdown::getDropdownName( 'glpi_budgets', $budget->getID(), true );\n      $this->array($ret)->isIdenticalTo($expected);\n\n      // test of return without $tooltip\n      $expected = ['name'    => $budget->getName(),\n                        'comment' => $budget->fields['comment']];\n      $ret = \\Dropdown::getDropdownName( 'glpi_budgets', $budget->getID(), true, true, false );\n      $this->array($ret)->isIdenticalTo($expected);\n   }\n\n   public function testGetDropdownNetpoint() {\n      $netpoint = getItemByTypeName( 'Netpoint', '_netpoint01' );\n      $location = getItemByTypeName( 'Location', '_location01' );\n      $ret = \\Dropdown::getDropdownNetpoint([], false);\n      $this->array($ret)->hasKeys(['count', 'results'])->integer['count']->isIdenticalTo(1);\n      $this->array($ret['results'])->isIdenticalTo([\n         [\n            'id'     => 0,\n            'text'   => '-----'\n         ], [\n            'id'     => $netpoint->fields['id'],\n            'text'   => $netpoint->getName() . ' (' . $location->getName() . ')',\n            'title'  =>  $netpoint->getName() . ' - ' . $location->getName() . ' - ' . $netpoint->fields['comment']\n         ]\n      ]);\n   }\n\n   public function dataGetValueWithUnit() {\n      return [\n            [1,         'auto',        '1024 Kio'],\n            [1025,      'auto',        '1 Gio'],\n            ['1 025',   'auto',        '1 Gio'],\n            [1,         'year',        '1 year'],\n            [2,         'year',        '2 years'],\n            [3,         '%',           '3%'],\n            ['foo',     'bar',         'foo bar'],\n            [1,         'month',       '1 month'],\n            [2,         'month',       '2 months'],\n            ['any',     '',            'any'],\n            [1,         'day',         '1 day'],\n            [2,         'day',         '2 days'],\n            [1,         'hour',        '1 hour'],\n            [2,         'hour',        '2 hours'],\n            [1,         'minute',      '1 minute'],\n            [2,         'minute',      '2 minutes'],\n            [1,         'second',      '1 second'],\n            [2,         'second',      '2 seconds'],\n            [1,         'millisecond', '1 millisecond'],\n            [2,         'millisecond', '2 milliseconds'],\n      ];\n   }\n\n   /**\n    * @dataProvider dataGetValueWithUnit\n    */\n   public function testGetValueWithUnit($input, $unit, $expected) {\n      $this->string(\\Dropdown::getValueWithUnit($input, $unit))->isIdenticalTo($expected);\n   }\n\n   protected function getDropdownValueProvider() {\n      return [\n         [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'TaskCategory'\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'text'      => 'Root entity',\n                     'children'  => [\n                        0 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_cat_1', true),\n                           'text'           => '_cat_1',\n                           'level'          => 1,\n                           'title'          => '_cat_1 - Comment for category _cat_1',\n                           'selection_text' => '_cat_1',\n                        ],\n                        1 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_subcat_1', true),\n                           'text'           => '_subcat_1',\n                           'level'          => 2,\n                           'title'          => '_cat_1 > _subcat_1 - Comment for sub-category _subcat_1',\n                           'selection_text' => '_cat_1 > _subcat_1',\n                        ]\n                     ]\n                  ]\n               ],\n               'count' => 2\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'TaskCategory',\n               'searchText'            => 'subcat'\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'text'      => 'Root entity',\n                     'children'  => [\n                        0 => [\n                           'id'     => getItemByTypeName('TaskCategory', '_cat_1', true),\n                           'text'   => '_cat_1',\n                           'level'  => 1,\n                           'disabled' => true\n                        ],\n                        1 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_subcat_1', true),\n                           'text'           => '_subcat_1',\n                           'level'          => 2,\n                           'title'          => '_cat_1 > _subcat_1 - Comment for sub-category _subcat_1',\n                           'selection_text' => '_cat_1 > _subcat_1',\n                        ]\n                     ]\n                  ]\n               ],\n               'count' => 1\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 1,\n               'emptylabel'            => 'EEEEEE',\n               'itemtype'              => 'TaskCategory'\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'id'        => 0,\n                     'text'      => 'EEEEEE'\n                  ],\n                  1 => [\n                     'text'      => 'Root entity',\n                     'children'  => [\n                        0 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_cat_1', true),\n                           'text'           => '_cat_1',\n                           'level'          => 1,\n                           'title'          => '_cat_1 - Comment for category _cat_1',\n                           'selection_text' => '_cat_1',\n                        ],\n                        1 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_subcat_1', true),\n                           'text'           => '_subcat_1',\n                           'level'          => 2,\n                           'title'          => '_cat_1 > _subcat_1 - Comment for sub-category _subcat_1',\n                           'selection_text' => '_cat_1 > _subcat_1',\n                        ]\n                     ]\n                  ]\n               ],\n               'count' => 2\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'TaskCategory',\n               'used'                  => [getItemByTypeName('TaskCategory', '_cat_1', true)]\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'text'      => 'Root entity',\n                     'children'  => [\n                        0 => [\n                           'id'     => getItemByTypeName('TaskCategory', '_cat_1', true),\n                           'text'   => '_cat_1',\n                           'level'  => 1,\n                           'disabled' => true\n                        ],\n                        1 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_subcat_1', true),\n                           'text'           => '_subcat_1',\n                           'level'          => 2,\n                           'title'          => '_cat_1 > _subcat_1 - Comment for sub-category _subcat_1',\n                           'selection_text' => '_cat_1 > _subcat_1',\n                        ]\n                     ]\n                  ]\n               ],\n               'count' => 1\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'Computer',\n               'entity_restrict'       => getItemByTypeName('Entity', '_test_child_2', true)\n            ],\n            'expected'  => [\n               'results'   => [\n                  0 => [\n                     'text'      => 'Root entity > _test_root_entity > _test_child_2',\n                     'children'  => [\n                        0 => [\n                           'id'     => getItemByTypeName('Computer', '_test_pc21', true),\n                           'text'   => '_test_pc21',\n                           'title'  => '_test_pc21',\n                        ],\n                        1 => [\n                           'id'     => getItemByTypeName('Computer', '_test_pc22', true),\n                           'text'   => '_test_pc22',\n                           'title'  => '_test_pc22',\n                        ]\n                     ]\n                  ]\n               ],\n               'count'     => 2\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'Computer',\n               'entity_restrict'       => '[' . getItemByTypeName('Entity', '_test_child_2', true) .']'\n            ],\n            'expected'  => [\n               'results'   => [\n                  0 => [\n                     'text'      => 'Root entity > _test_root_entity > _test_child_2',\n                     'children'  => [\n                        0 => [\n                           'id'     => getItemByTypeName('Computer', '_test_pc21', true),\n                           'text'   => '_test_pc21',\n                           'title'  => '_test_pc21',\n                        ],\n                        1 => [\n                           'id'     => getItemByTypeName('Computer', '_test_pc22', true),\n                           'text'   => '_test_pc22',\n                           'title'  => '_test_pc22',\n                        ]\n                     ]\n                  ]\n               ],\n               'count'     => 2\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'Computer',\n               'entity_restrict'       => getItemByTypeName('Entity', '_test_child_2', true),\n               'searchText'            => '22'\n            ],\n            'expected'  => [\n               'results'   => [\n                  0 => [\n                     'text'      => 'Root entity > _test_root_entity > _test_child_2',\n                     'children'  => [\n                        0 => [\n                           'id'     => getItemByTypeName('Computer', '_test_pc22', true),\n                           'text'   => '_test_pc22',\n                           'title'  => '_test_pc22',\n                        ]\n                     ]\n                  ]\n               ],\n               'count'     => 1\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'TaskCategory',\n               'searchText'            => 'subcat',\n               'toadd'                 => ['key' => 'value']\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'id'     => 'key',\n                     'text'   => 'value'\n                  ],\n                  1 => [\n                     'text'      => 'Root entity',\n                     'children'  => [\n                        0 => [\n                           'id'     => getItemByTypeName('TaskCategory', '_cat_1', true),\n                           'text'   => '_cat_1',\n                           'level'  => 1,\n                           'disabled' => true\n                        ],\n                        1 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_subcat_1', true),\n                           'text'           => '_subcat_1',\n                           'level'          => 2,\n                           'title'          => '_cat_1 > _subcat_1 - Comment for sub-category _subcat_1',\n                           'selection_text' => '_cat_1 > _subcat_1',\n                        ]\n                     ]\n                  ]\n               ],\n               'count' => 1\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'TaskCategory',\n               'searchText'            => 'subcat'\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'text'      => 'Root entity',\n                     'children'  => [\n                        0 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_subcat_1', true),\n                           'text'           => '_cat_1 > _subcat_1',\n                           'level'          => 0,\n                           'title'          => '_cat_1 > _subcat_1 - Comment for sub-category _subcat_1',\n                           'selection_text' => '_cat_1 > _subcat_1',\n                        ]\n                     ]\n                  ]\n               ],\n               'count' => 1\n            ],\n            'session_params' => [\n               'glpiuse_flat_dropdowntree' => true\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'TaskCategory'\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'text'      => 'Root entity',\n                     'children'  => [\n                        0 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_cat_1', true),\n                           'text'           => '_cat_1',\n                           'level'          => 0,\n                           'title'          => '_cat_1 - Comment for category _cat_1',\n                           'selection_text' => '_cat_1',\n                        ],\n                        1 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_subcat_1', true),\n                           'text'           => '_cat_1 > _subcat_1',\n                           'level'          => 0,\n                           'title'          => '_cat_1 > _subcat_1 - Comment for sub-category _subcat_1',\n                           'selection_text' => '_cat_1 > _subcat_1',\n                        ]\n                     ]\n                  ]\n               ],\n               'count' => 2\n            ],\n            'session_params' => [\n               'glpiuse_flat_dropdowntree' => true\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'TaskCategory',\n               'searchText'            => 'subcat',\n               'permit_select_parent'  => true\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'text'      => 'Root entity',\n                     'children'  => [\n                        0 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_cat_1', true),\n                           'text'           => '_cat_1',\n                           'level'          => 1,\n                           'title'          => '_cat_1 - Comment for category _cat_1',\n                           'selection_text' => '_cat_1',\n                        ],\n                        1 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_subcat_1', true),\n                           'text'           => '_subcat_1',\n                           'level'          => 2,\n                           'title'          => '_cat_1 > _subcat_1 - Comment for sub-category _subcat_1',\n                           'selection_text' => '_cat_1 > _subcat_1',\n                        ]\n                     ]\n                  ]\n               ],\n               'count' => 1\n            ]\n         ], [\n            // search using id on CommonTreeDropdown but without \"glpiis_ids_visible\" set to true -> no results\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'TaskCategory',\n               'searchText'            => getItemByTypeName('TaskCategory', '_subcat_1', true),\n            ],\n            'expected'  => [\n               'results' => [\n               ],\n               'count' => 0\n            ],\n            'session_params' => [\n               'glpiis_ids_visible' => false\n            ]\n         ], [\n            // search using id on CommonTreeDropdown with \"glpiis_ids_visible\" set to true -> results\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'TaskCategory',\n               'searchText'            => getItemByTypeName('TaskCategory', '_subcat_1', true),\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'text'      => 'Root entity',\n                     'children'  => [\n                        0 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_cat_1', true),\n                           'text'           => '_cat_1',\n                           'level'          => 1,\n                           'disabled'       => true\n                        ],\n                        1 => [\n                           'id'             => getItemByTypeName('TaskCategory', '_subcat_1', true),\n                           'text'           => '_subcat_1 (' . getItemByTypeName('TaskCategory', '_subcat_1', true) . ')',\n                           'level'          => 2,\n                           'title'          => '_cat_1 > _subcat_1 - Comment for sub-category _subcat_1',\n                           'selection_text' => '_cat_1 > _subcat_1',\n                        ]\n                     ]\n                  ]\n               ],\n               'count' => 1\n            ],\n            'session_params' => [\n               'glpiis_ids_visible' => true\n            ]\n         ], [\n            // search using id on \"not a CommonTreeDropdown\" but without \"glpiis_ids_visible\" set to true -> no results\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'DocumentType',\n               'searchText'            => getItemByTypeName('DocumentType', 'markdown', true),\n            ],\n            'expected'  => [\n               'results' => [\n               ],\n               'count' => 0\n            ],\n            'session_params' => [\n               'glpiis_ids_visible' => false\n            ]\n         ], [\n            // search using id on \"not a CommonTreeDropdown\" with \"glpiis_ids_visible\" set to true -> results\n            'params' => [\n               'display_emptychoice'   => 0,\n               'itemtype'              => 'DocumentType',\n               'searchText'            => getItemByTypeName('DocumentType', 'markdown', true),\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'id'             => getItemByTypeName('DocumentType', 'markdown', true),\n                     'text'           => 'markdown (' . getItemByTypeName('DocumentType', 'markdown', true) . ')',\n                     'title'          => 'markdown',\n                  ]\n               ],\n               'count' => 1\n            ],\n            'session_params' => [\n               'glpiis_ids_visible' => true\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice' => 0,\n               'itemtype'            => 'ComputerModel',\n            ],\n            'expected'  => [\n               'results'   => [\n                  [\n                     'id'     => getItemByTypeName('ComputerModel', '_test_computermodel_1', true),\n                     'text'   => '_test_computermodel_1 - CMP_ADEAF5E1',\n                     'title'  => '_test_computermodel_1 - CMP_ADEAF5E1',\n                  ],\n                  [\n                     'id'     => getItemByTypeName('ComputerModel', '_test_computermodel_2', true),\n                     'text'   => '_test_computermodel_2 - CMP_567AEC68',\n                     'title'  => '_test_computermodel_2 - CMP_567AEC68',\n                  ]\n               ],\n               'count'     => 2\n            ]\n         ], [\n            'params' => [\n               'display_emptychoice' => 0,\n               'itemtype'            => 'ComputerModel',\n               'searchText'          => 'CMP_56',\n            ],\n            'expected'  => [\n               'results'   => [\n                  [\n                     'id'     => getItemByTypeName('ComputerModel', '_test_computermodel_2', true),\n                     'text'   => '_test_computermodel_2 - CMP_567AEC68',\n                     'title'  => '_test_computermodel_2 - CMP_567AEC68',\n                  ]\n               ],\n               'count'     => 1\n            ]\n         ],\n      ];\n   }\n\n   /**\n    * @dataProvider getDropdownValueProvider\n    */\n   public function testGetDropdownValue($params, $expected, $session_params = []) {\n      $this->login();\n\n      $bkp_params = [];\n      //set session params if any\n      if (count($session_params)) {\n         foreach ($session_params as $param => $value) {\n            if (isset($_SESSION[$param])) {\n               $bkp_params[$param] = $_SESSION[$param];\n            }\n            $_SESSION[$param] = $value;\n         }\n      }\n\n      $params['_idor_token'] = $this->generateIdor($params);\n\n      $result = \\Dropdown::getDropdownValue($params, false);\n\n      //reset session params before executing test\n      if (count($session_params)) {\n         foreach ($session_params as $param => $value) {\n            if (isset($bkp_params[$param])) {\n               $_SESSION[$param] = $bkp_params[$param];\n            } else {\n               unset($_SESSION[$param]);\n            }\n         }\n      }\n\n      $this->array($result)->isIdenticalTo($expected);\n   }\n\n   protected function getDropdownConnectProvider() {\n      return [\n         [\n            'params'    => [\n               'fromtype'  => 'Computer',\n               'itemtype'  => 'Printer'\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'id' => 0,\n                     'text' => '-----',\n                  ],\n                  1 => [\n                     'text' => 'Root entity > _test_root_entity',\n                     'children' => [\n                        0 => [\n                           'id'     => getItemByTypeName('Printer', '_test_printer_all', true),\n                           'text'   => '_test_printer_all',\n                        ],\n                        1 => [\n                           'id'     => getItemByTypeName('Printer', '_test_printer_ent0', true),\n                           'text'   => '_test_printer_ent0',\n                        ]\n                     ]\n                  ],\n                  2 => [\n                     'text' => 'Root entity > _test_root_entity > _test_child_1',\n                     'children' => [\n                        0 => [\n                           'id'     => getItemByTypeName('Printer', '_test_printer_ent1', true),\n                           'text'   => '_test_printer_ent1',\n                        ]\n                     ]\n                  ],\n                  3 => [\n                     'text' => 'Root entity > _test_root_entity > _test_child_2',\n                     'children' => [\n                        0 => [\n                           'id'     => getItemByTypeName('Printer', '_test_printer_ent2', true),\n                           'text'   => '_test_printer_ent2',\n                        ]\n                     ]\n                  ]\n               ]\n            ]\n         ], [\n            'params'    => [\n               'fromtype'  => 'Computer',\n               'itemtype'  => 'Printer',\n               'used'      => [\n                  'Printer' => [\n                     getItemByTypeName('Printer', '_test_printer_ent0', true),\n                     getItemByTypeName('Printer', '_test_printer_ent2', true)\n                  ]\n               ]\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'id' => 0,\n                     'text' => '-----',\n                  ],\n                  1 => [\n                     'text' => 'Root entity > _test_root_entity',\n                     'children' => [\n                        0 => [\n                           'id'     => getItemByTypeName('Printer', '_test_printer_all', true),\n                           'text'   => '_test_printer_all',\n                        ]\n                     ]\n                  ],\n                  2 => [\n                     'text' => 'Root entity > _test_root_entity > _test_child_1',\n                     'children' => [\n                        0 => [\n                           'id'     => getItemByTypeName('Printer', '_test_printer_ent1', true),\n                           'text'   => '_test_printer_ent1',\n                        ]\n                     ]\n                  ]\n               ]\n            ]\n         ], [\n            'params'    => [\n               'fromtype'     => 'Computer',\n               'itemtype'     => 'Printer',\n               'searchText'   => 'ent0'\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'text' => 'Root entity > _test_root_entity',\n                     'children' => [\n                        0 => [\n                           'id'     => getItemByTypeName('Printer', '_test_printer_ent0', true),\n                           'text'   => '_test_printer_ent0',\n                        ]\n                     ]\n                  ]\n               ]\n            ]\n         ], [\n            'params'    => [\n               'fromtype'     => 'Computer',\n               'itemtype'     => 'Printer',\n               'searchText'   => 'ent0'\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'text' => 'Root entity > _test_root_entity',\n                     'children' => [\n                        0 => [\n                           'id'     => getItemByTypeName('Printer', '_test_printer_ent0', true),\n                           'text'   => '_test_printer_ent0 (' .getItemByTypeName('Printer', '_test_printer_ent0', true) . ')',\n                        ]\n                     ]\n                  ]\n               ]\n            ],\n            'session_params' => [\n               'glpiis_ids_visible' => true\n            ]\n         ]\n      ];\n   }\n\n   /**\n    * @dataProvider getDropdownConnectProvider\n    */\n   public function testGetDropdownConnect($params, $expected, $session_params = []) {\n      $this->login();\n\n      $bkp_params = [];\n      //set session params if any\n      if (count($session_params)) {\n         foreach ($session_params as $param => $value) {\n            if (isset($_SESSION[$param])) {\n               $bkp_params[$param] = $_SESSION[$param];\n            }\n            $_SESSION[$param] = $value;\n         }\n      }\n\n      $params['_idor_token'] = $this->generateIdor($params);\n\n      $result = \\Dropdown::getDropdownConnect($params, false);\n\n      //reset session params before executing test\n      if (count($session_params)) {\n         foreach ($session_params as $param => $value) {\n            if (isset($bkp_params[$param])) {\n               $_SESSION[$param] = $bkp_params[$param];\n            } else {\n               unset($_SESSION[$param]);\n            }\n         }\n      }\n\n      $this->array($result)->isIdenticalTo($expected);\n   }\n\n   protected function getDropdownNumberProvider() {\n      return [\n         [\n            'params'    => [],\n            'expected'  => [\n               'results'   => [\n                  0 => [\n                     'id'     => 1,\n                     'text'   => '1'\n                  ],\n                  1 => [\n                     'id'     => 2,\n                     'text'   => '2'\n                  ],\n                  2 => [\n                     'id'     => 3,\n                     'text'   => '3'\n                  ],\n                  3 => [\n                     'id'     => 4,\n                     'text'   => '4'\n                  ],\n                  4 => [\n                     'id'     => 5,\n                     'text'   => '5'\n                  ],\n                  5 => [\n                     'id'     => 6,\n                     'text'   => '6'\n                  ],\n                  6 => [\n                     'id'     => 7,\n                     'text'   => '7'\n                  ],\n                  7 => [\n                     'id'     => 8,\n                     'text'   => '8'\n                  ],\n                  8 => [\n                     'id'     => 9,\n                     'text'   => '9'\n                  ],\n                  9 => [\n                     'id'     => 10,\n                     'text'   => '10'\n                  ]\n               ],\n               'count'     => 10\n            ]\n         ], [\n            'params'    => [\n               'min'    => 10,\n               'max'    => 30,\n               'step'   => 10\n            ],\n            'expected'  => [\n               'results'   => [\n                  0 => [\n                     'id'     => 10,\n                     'text'   => '10'\n                  ],\n                  1 => [\n                     'id'     => 20,\n                     'text'   => '20'\n                  ],\n                  2 => [\n                     'id'     => 30,\n                     'text'   => '30'\n                  ]\n               ],\n               'count'     => 3\n            ]\n         ], [\n            'params'    => [\n               'min'    => 10,\n               'max'    => 30,\n               'step'   => 10,\n               'used'   => [20]\n            ],\n            'expected'  => [\n               'results'   => [\n                  0 => [\n                     'id'     => 10,\n                     'text'   => '10'\n                  ],\n                  1 => [\n                     'id'     => 30,\n                     'text'   => '30'\n                  ]\n               ],\n               'count'     => 2\n            ]\n         ], [\n            'params'    => [\n               'min'    => 10,\n               'max'    => 30,\n               'step'   => 10,\n               'used'   => [20],\n               'toadd'  => [5 => 'five']\n            ],\n            'expected'  => [\n               'results'   => [\n                  0 => [\n                     'id'     => 5,\n                     'text'   =>'five'\n                  ],\n                  1 => [\n                     'id'     => 10,\n                     'text'   => '10'\n                  ],\n                  2 => [\n                     'id'     => 30,\n                     'text'   => '30'\n                  ]\n               ],\n               'count'     => 2\n            ]\n         ], [\n            'params'    => [\n               'min'    => 10,\n               'max'    => 30,\n               'step'   => 10,\n               'used'   => [20],\n               'unit'   => 'second'\n            ],\n            'expected'  => [\n               'results'   => [\n                  0 => [\n                     'id'     => 10,\n                     'text'   => '10 seconds'\n                  ],\n                  1 => [\n                     'id'     => 30,\n                     'text'   => '30 seconds'\n                  ]\n               ],\n               'count'     => 2\n            ]\n         ]\n      ];\n   }\n\n   /**\n    * @dataProvider getDropdownNumberProvider\n    */\n   public function testGetDropdownNumber($params, $expected) {\n      global $CFG_GLPI;\n      $orig_max = $CFG_GLPI['dropdown_max'];\n      $CFG_GLPI['dropdown_max'] = 10;\n      $result = \\Dropdown::getDropdownNumber($params, false);\n      $CFG_GLPI['dropdown_max'] = $orig_max;\n      $this->array($result)->isIdenticalTo($expected);\n   }\n\n   protected function getDropdownUsersProvider() {\n      return [\n         [\n            'params'    => [],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'id'     => 0,\n                     'text'   => '-----',\n                  ],\n                  1 => [\n                     'id'     => (int)getItemByTypeName('User', '_test_user', true),\n                     'text'   => '_test_user',\n                     'title'  => '_test_user - _test_user',\n                  ],\n                  2 => [\n                     'id'     => (int)getItemByTypeName('User', 'glpi', true),\n                     'text'   => 'glpi',\n                     'title'  => 'glpi - glpi',\n                  ],\n                  3 => [\n                     'id'     => (int)getItemByTypeName('User', 'normal', true),\n                     'text'   => 'normal',\n                     'title'  => 'normal - normal',\n                  ],\n                  4 => [\n                     'id'     => (int)getItemByTypeName('User', 'post-only', true),\n                     'text'   => 'post-only',\n                     'title'  => 'post-only - post-only',\n                  ],\n                  5 => [\n                     'id'     => (int)getItemByTypeName('User', 'tech', true),\n                     'text'   => 'tech',\n                     'title'  => 'tech - tech',\n                  ]\n               ],\n               'count' => 5\n            ]\n         ], [\n            'params'    => [\n               'used'   => [\n                  getItemByTypeName('User', 'glpi', true),\n                  getItemByTypeName('User', 'tech', true)\n               ]\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'id'     => 0,\n                     'text'   => '-----',\n                  ],\n                  1 => [\n                     'id'     => (int)getItemByTypeName('User', '_test_user', true),\n                     'text'   => '_test_user',\n                     'title'  => '_test_user - _test_user',\n                  ],\n                  2 => [\n                     'id'     => (int)getItemByTypeName('User', 'normal', true),\n                     'text'   => 'normal',\n                     'title'  => 'normal - normal',\n                  ],\n                  3 => [\n                     'id'     => (int)getItemByTypeName('User', 'post-only', true),\n                     'text'   => 'post-only',\n                     'title'  => 'post-only - post-only',\n                  ]\n               ],\n               'count' => 3\n            ]\n         ], [\n            'params'    => [\n               'all'    => true,\n               'used'   => [\n                  getItemByTypeName('User', 'glpi', true),\n                  getItemByTypeName('User', 'tech', true),\n                  getItemByTypeName('User', 'normal', true),\n                  getItemByTypeName('User', 'post-only', true)\n               ]\n            ],\n            'expected'  => [\n               'results' => [\n                  0 => [\n                     'id'     => 0,\n                     'text'   => 'All',\n                  ],\n                  1 => [\n                     'id'     => (int)getItemByTypeName('User', '_test_user', true),\n                     'text'   => '_test_user',\n                     'title'  => '_test_user - _test_user',\n                  ]\n               ],\n               'count' => 1\n            ]\n         ]\n      ];\n   }\n\n   /**\n    * @dataProvider getDropdownUsersProvider\n    */\n   public function testGetDropdownUsers($params, $expected) {\n      $this->login();\n\n      $params['_idor_token'] = \\Session::getNewIDORToken('User');\n      $result = \\Dropdown::getDropdownUsers($params, false);\n      $this->array($result)->isIdenticalTo($expected);\n   }\n\n   /**\n    * Test getDropdownValue with paginated results on\n    * an CommonTreeDropdown\n    *\n    * @return void\n    */\n   public function testGetDropdownValuePaginate() {\n      //let's add some content in Locations\n      $location = new \\Location();\n      for ($i = 0; $i <= 20; ++$i) {\n         $this->integer(\n            (int)$location->add([\n               'name'   => \"Test location $i\"\n            ])\n         )->isGreaterThan(0);\n      }\n\n      $post = [\n         'itemtype'              => $location::getType(),\n         'display_emptychoice'   => true,\n         'entity_restrict'       => 0,\n         'page'                  => 1,\n         'page_limit'            => 10,\n         '_idor_token'           => \\Session::getNewIDORToken($location::getType())\n      ];\n      $values = \\Dropdown::getDropdownValue($post);\n      $values = (array)json_decode($values);\n\n      $this->array($values)\n         ->integer['count']->isEqualTo(10)\n         ->array['results']\n            ->hasSize(2);\n\n      $results = (array)$values['results'];\n      $this->array((array)$results[0])\n         ->isIdenticalTo([\n            'id'     => 0,\n            'text'   => '-----'\n         ]);\n\n      $list_results = (array)$results[1];\n      $this->array($list_results)\n         ->hasSize(2)\n         ->string['text']->isIdenticalTo('Root entity');\n\n      $children = (array)$list_results['children'];\n      $this->array($children)->hasSize(10);\n      $this->array((array)$children[0])\n         ->hasKeys([\n            'id',\n            'text',\n            'level',\n            'title',\n            'selection_text'\n         ]);\n\n      $post['page'] = 2;\n      $values = \\Dropdown::getDropdownValue($post);\n      $values = (array)json_decode($values);\n\n      $this->array($values)\n         ->integer['count']->isEqualTo(10);\n\n      $this->array($values['results'])->hasSize(10);\n      $this->array((array)$values['results'][0])\n         ->hasKeys([\n            'id',\n            'text',\n            'level',\n            'title',\n            'selection_text'\n         ]);\n\n      //use a array condition\n      $post = [\n         'itemtype'              => $location::getType(),\n         'condition'             => ['name' => ['LIKE', \"%3%\"]],\n         'display_emptychoice'   => true,\n         'entity_restrict'       => 0,\n         'page'                  => 1,\n         'page_limit'            => 10,\n         '_idor_token'           => \\Session::getNewIDORToken($location::getType())\n      ];\n      $values = \\Dropdown::getDropdownValue($post);\n      $values = (array)json_decode($values);\n\n      $this->array($values)\n         ->integer['count']->isEqualTo(2)\n         ->array['results']\n            ->hasSize(2);\n\n      //use a string condition\n      // Put condition in session and post its key\n      $condition_key = sha1(serialize($post['condition']));\n      $_SESSION['glpicondition'][$condition_key] = $post['condition'];\n      $post['condition'] = $condition_key;\n      $values = \\Dropdown::getDropdownValue($post);\n      $values = (array)json_decode($values);\n\n      $this->array($values)\n         ->integer['count']->isEqualTo(2)\n         ->array['results']\n            ->hasSize(2);\n\n      //use a condition that does not exists in session\n      $post = [\n         'itemtype'              => $location::getType(),\n         'condition'             => '`name` LIKE \"%4%\"',\n         'display_emptychoice'   => true,\n         'entity_restrict'       => 0,\n         'page'                  => 1,\n         'page_limit'            => 10,\n         '_idor_token'           => \\Session::getNewIDORToken($location::getType())\n      ];\n      $values = \\Dropdown::getDropdownValue($post);\n      $values = (array)json_decode($values);\n\n      $this->array($values)\n         ->integer['count']->isEqualTo(10)\n         ->array['results']\n            ->hasSize(2);\n\n   }\n\n   private function generateIdor(array $params = []) {\n      $idor_add_params = [];\n      if (isset($params['entity_restrict'])) {\n         $idor_add_params['entity_restrict'] = $params['entity_restrict'];\n      }\n      return \\Session::getNewIDORToken(($params['itemtype'] ?? ''), $idor_add_params);\n   }\n}\n", "<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2021 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n*/\n\nnamespace tests\\units;\n\n/* Test for inc/session.class.php */\n\nclass Session extends \\DbTestCase {\n\n   public function testAddMessageAfterRedirect() {\n      $err_msg = 'Something is broken. Weird.';\n      $warn_msg = 'There was a warning. Be carefull.';\n      $info_msg = 'All goes well. Or not... Who knows ;)';\n\n      $this->array($_SESSION)->notHasKey('MESSAGE_AFTER_REDIRECT');\n\n      //test add message in cron mode\n      $_SESSION['glpicronuserrunning'] = 'cron_phpunit';\n      \\Session::addMessageAfterRedirect($err_msg, false, ERROR);\n      //adding a message in \"cron mode\" does not add anything in the session\n      $this->array($_SESSION)->notHasKey('MESSAGE_AFTER_REDIRECT');\n\n      //set not running from cron\n      unset($_SESSION['glpicronuserrunning']);\n\n      //test all messages types\n      \\Session::addMessageAfterRedirect($err_msg, false, ERROR);\n      \\Session::addMessageAfterRedirect($warn_msg, false, WARNING);\n      \\Session::addMessageAfterRedirect($info_msg, false, INFO);\n\n      $expected = [\n        ERROR   => [$err_msg],\n        WARNING => [$warn_msg],\n        INFO    => [$info_msg]\n      ];\n      $this->array($_SESSION['MESSAGE_AFTER_REDIRECT'])->isIdenticalTo($expected);\n\n      $this->output(\n         function () {\n            \\Html::displayMessageAfterRedirect();\n         }\n      )\n         ->matches('/' . str_replace('.', '\\.', $err_msg)  . '/')\n         ->matches('/' . str_replace('.', '\\.', $warn_msg)  . '/')\n         ->matches('/' . str_replace(['.', ')'], ['\\.', '\\)'], $info_msg)  . '/');\n\n      $this->array($_SESSION['MESSAGE_AFTER_REDIRECT'])->isEmpty();\n\n      //test multiple messages of same type\n      \\Session::addMessageAfterRedirect($err_msg, false, ERROR);\n      \\Session::addMessageAfterRedirect($err_msg, false, ERROR);\n      \\Session::addMessageAfterRedirect($err_msg, false, ERROR);\n\n      $expected = [\n        ERROR   => [$err_msg, $err_msg, $err_msg]\n      ];\n      $this->array($_SESSION['MESSAGE_AFTER_REDIRECT'])->isIdenticalTo($expected);\n\n      $this->output(\n         function () {\n            \\Html::displayMessageAfterRedirect();\n         }\n      )->matches('/' . str_replace('.', '\\.', $err_msg)  . '/');\n\n      $this->array($_SESSION['MESSAGE_AFTER_REDIRECT'])->isEmpty();\n\n      //test message deduplication\n      $err_msg_bis = $err_msg . ' not the same';\n      \\Session::addMessageAfterRedirect($err_msg, true, ERROR);\n      \\Session::addMessageAfterRedirect($err_msg_bis, true, ERROR);\n      \\Session::addMessageAfterRedirect($err_msg, true, ERROR);\n      \\Session::addMessageAfterRedirect($err_msg, true, ERROR);\n\n      $expected = [\n        ERROR   => [$err_msg, $err_msg_bis]\n      ];\n      $this->array($_SESSION['MESSAGE_AFTER_REDIRECT'])->isIdenticalTo($expected);\n\n      $this->output(\n         function () {\n            \\Html::displayMessageAfterRedirect();\n         }\n      )\n         ->matches('/' . str_replace('.', '\\.', $err_msg)  . '/')\n         ->matches('/' . str_replace('.', '\\.', $err_msg_bis)  . '/');\n\n      $this->array($_SESSION['MESSAGE_AFTER_REDIRECT'])->isEmpty();\n\n      //test with reset\n      \\Session::addMessageAfterRedirect($err_msg, false, ERROR);\n      \\Session::addMessageAfterRedirect($warn_msg, false, WARNING);\n      \\Session::addMessageAfterRedirect($info_msg, false, INFO, true);\n\n      $expected = [\n         INFO   => [$info_msg]\n      ];\n      $this->array($_SESSION['MESSAGE_AFTER_REDIRECT'])->isIdenticalTo($expected);\n\n      $this->output(\n         function () {\n            \\Html::displayMessageAfterRedirect();\n         }\n      )->matches('/' . str_replace(['.', ')'], ['\\.', '\\)'], $info_msg)  . '/');\n\n      $this->array($_SESSION['MESSAGE_AFTER_REDIRECT'])->isEmpty();\n   }\n\n   public function testLoadGroups() {\n\n      $entid_root = getItemByTypeName('Entity', '_test_root_entity', true);\n      $entid_1 = getItemByTypeName('Entity', '_test_child_1', true);\n      $entid_2 = getItemByTypeName('Entity', '_test_child_2', true);\n\n      $entities_ids = [$entid_root, $entid_1, $entid_2];\n\n      $uid = (int)getItemByTypeName('User', 'normal', true);\n\n      $group = new \\Group();\n      $group_user = new \\Group_User();\n\n      $user_groups = [];\n\n      foreach ($entities_ids as $entid) {\n         $group_1 = [\n            'name'         => \"Test group {$entid} recursive=no\",\n            'entities_id'  => $entid,\n            'is_recursive' => 0,\n         ];\n         $gid_1 = (int)$group->add($group_1);\n         $this->integer($gid_1)->isGreaterThan(0);\n         $this->integer((int)$group_user->add(['groups_id' => $gid_1, 'users_id'  => $uid]))->isGreaterThan(0);\n         $group_1['id'] = $gid_1;\n         $user_groups[] = $group_1;\n\n         $group_2 = [\n            'name'         => \"Test group {$entid} recursive=yes\",\n            'entities_id'  => $entid,\n            'is_recursive' => 1,\n         ];\n         $gid_2 = (int)$group->add($group_2);\n         $this->integer($gid_2)->isGreaterThan(0);\n         $this->integer((int)$group_user->add(['groups_id' => $gid_2, 'users_id'  => $uid]))->isGreaterThan(0);\n         $group_2['id'] = $gid_2;\n         $user_groups[] = $group_2;\n\n         $group_3 = [\n            'name'         => \"Test group {$entid} not attached to user\",\n            'entities_id'  => $entid,\n            'is_recursive' => 1,\n         ];\n         $gid_3 = (int)$group->add($group_3);\n         $this->integer($gid_3)->isGreaterThan(0);\n      }\n\n      $this->login('normal', 'normal');\n\n      // Test groups from whole entity tree\n      $session_backup = $_SESSION;\n      $_SESSION['glpiactiveentities'] = $entities_ids;\n      \\Session::loadGroups();\n      $groups = $_SESSION['glpigroups'];\n      $_SESSION = $session_backup;\n      $expected_groups = array_map(\n         function ($group) {\n            return (string)$group['id'];\n         },\n         $user_groups\n      );\n      $this->array($groups)->isEqualTo($expected_groups);\n\n      foreach ($entities_ids as $entid) {\n         // Test groups from a given entity\n         $expected_groups = [];\n         foreach ($user_groups as $user_group) {\n            if (($user_group['entities_id'] == $entid_root && $user_group['is_recursive'] == 1)\n                || $user_group['entities_id'] == $entid) {\n               $expected_groups[] = (string)$user_group['id'];\n            }\n         }\n\n         $session_backup = $_SESSION;\n         $_SESSION['glpiactiveentities'] = [$entid];\n         \\Session::loadGroups();\n         $groups = $_SESSION['glpigroups'];\n         $_SESSION = $session_backup;\n         $this->array($groups)->isEqualTo($expected_groups);\n      }\n   }\n\n   public function testLocalI18n() {\n      //load locales\n      \\Session::loadLanguage('en_GB');\n      $this->string(__('Login'))->isIdenticalTo('Login');\n\n      //create directory for local i18n\n      if (!file_exists(GLPI_LOCAL_I18N_DIR.'/core')) {\n         mkdir(GLPI_LOCAL_I18N_DIR.'/core');\n      }\n\n      //write local MO file with i18n override\n      copy(\n         __DIR__ . '/../local_en_GB.mo',\n         GLPI_LOCAL_I18N_DIR.'/core/en_GB.mo'\n      );\n      \\Session::loadLanguage('en_GB');\n\n      $this->string(__('Login'))->isIdenticalTo('Login from local gettext');\n      $this->string(__('Password'))->isIdenticalTo('Password');\n\n      //write local PHP file with i18n override\n      file_put_contents(\n         GLPI_LOCAL_I18N_DIR.'/core/en_GB.php',\n         \"<?php\\n\\$lang['Login'] = 'Login from local PHP';\\n\\$lang['Password'] = 'Password from local PHP';\\nreturn \\$lang;\"\n      );\n      \\Session::loadLanguage('en_GB');\n\n      $this->string(__('Login'))->isIdenticalTo('Login from local gettext');\n      $this->string(__('Password'))->isIdenticalTo('Password from local PHP');\n\n      //cleanup -- keep at the end\n      unlink(GLPI_LOCAL_I18N_DIR.'/core/en_GB.php');\n      unlink(GLPI_LOCAL_I18N_DIR.'/core/en_GB.mo');\n   }\n\n   protected function mustChangePasswordProvider() {\n      $tests = [];\n\n      // test with no password expiration\n      $tests[] = [\n         'last_update'      => date('Y-m-d H:i:s', strtotime('-10 years')),\n         'expiration_delay' => -1,\n         'expected_result'  => false,\n      ];\n\n      // tests with password expiration\n      $cases = [\n         '-5 days'  => false,\n         '-30 days' => true,\n      ];\n      foreach ($cases as $last_update => $expected_result) {\n         $tests[] = [\n            'last_update'      => date('Y-m-d H:i:s', strtotime($last_update)),\n            'expiration_delay' => 15,\n            'expected_result'  => $expected_result,\n         ];\n      }\n\n      return $tests;\n   }\n\n   /**\n    * @dataProvider mustChangePasswordProvider\n    */\n   public function testMustChangePassword(string $last_update, int $expiration_delay, bool $expected_result) {\n      global $CFG_GLPI;\n\n      $this->login();\n      $user = new \\User();\n      $username = 'test_must_change_pass_' . mt_rand();\n      $user_id = (int)$user->add([\n         'name'         => $username,\n         'password'     => 'test',\n         'password2'    => 'test',\n         '_profiles_id' => 1,\n      ]);\n      $this->integer($user_id)->isGreaterThan(0);\n      $this->boolean($user->update(['id' => $user_id, 'password_last_update' => $last_update]))->isTrue();\n\n      $cfg_backup = $CFG_GLPI;\n      $CFG_GLPI['password_expiration_delay'] = $expiration_delay;\n      $CFG_GLPI['password_expiration_lock_delay'] = -1;\n      \\Session::destroy();\n      \\Session::start();\n      $auth = new \\Auth();\n      $is_logged = $auth->login($username, 'test', true);\n      $CFG_GLPI = $cfg_backup;\n\n      $this->boolean($is_logged)->isEqualTo(true);\n      $this->boolean(\\Session::mustChangePassword())->isEqualTo($expected_result);\n   }\n\n   protected function preferredLanguageProvider() {\n      return [\n         [\n            'header'        => null,\n            'config'        => null,\n            'legacy_config' => null,\n            'expected'      => 'en_GB',\n         ],\n         [\n            'header'        => null,\n            'config'        => null,\n            'legacy_config' => 'it_IT',\n            'expected'      => 'it_IT',\n         ],\n         [\n            'header'        => null,\n            'config'        => 'de_DE',\n            'legacy_config' => null,\n            'expected'      => 'de_DE',\n         ],\n         [\n            'header'        => 'en-US',\n            'config'        => 'fr_FR',\n            'legacy_config' => null,\n            'expected'      => 'en_US',\n         ],\n         [\n            // latin as first choice (not available in GLPI), should fallback to italian\n            'header'        => 'la, it-IT;q=0.9, it;q=0.8',\n            'config'        => 'en_GB',\n            'legacy_config' => null,\n            'expected'      => 'it_IT',\n         ],\n      ];\n   }\n\n   /**\n    * @dataProvider preferredLanguageProvider\n    */\n   public function testGetPreferredLanguage(?string $header, ?string $config, ?string $legacy_config, string $expected) {\n      global $CFG_GLPI;\n\n      $header_backup = $_SERVER['HTTP_ACCEPT_LANGUAGE'] ?? null;\n      $cfg_backup = $CFG_GLPI;\n\n      if ($header !== null) {\n         $_SERVER['HTTP_ACCEPT_LANGUAGE'] = $header;\n      }\n      $CFG_GLPI['language'] = $config;\n      $CFG_GLPI['default_language'] = $legacy_config;\n      $result = \\Session::getPreferredLanguage();\n\n      if ($header_backup !== null) {\n         $_SERVER['HTTP_ACCEPT_LANGUAGE'] = $header_backup;\n      }\n      $CFG_GLPI = $cfg_backup;\n\n      $this->string($result)->isEqualTo($expected);\n   }\n\n\n   protected function idorProvider() {\n      return [\n         ['itemtype' => 'Computer'],\n         ['itemtype' => 'Ticket'],\n         ['itemtype' => 'Glpi\\\\Dashboard\\\\Item'],\n         ['itemtype' => 'User', 'add_params' => ['right' => 'all']],\n         ['itemtype' => 'User', 'add_params' => ['entity_restrict' => 0]],\n      ];\n   }\n\n   /**\n    * @dataProvider idorProvider\n    */\n   function testIDORToken(string $itemtype = \"\", array $add_params = []) {\n      // generate token\n      $token = \\Session::getNewIDORToken($itemtype, $add_params);\n      $this->string($token)->hasLength(64);\n\n      // token exists in session and is valid\n      $this->array($_SESSION['glpiidortokens'][$token])\n         ->string['itemtype']->isEqualTo($itemtype)\n         ->string['expires'];\n\n      if (count($add_params) > 0) {\n         $this->array($_SESSION['glpiidortokens'][$token])->size->isEqualTo(2 + count($add_params));\n      }\n\n      // validate token with dedicated method\n      $result = \\Session::validateIDOR([\n         '_idor_token' => $token,\n         'itemtype'    => $itemtype,\n      ] + $add_params);\n      $this->boolean($result)->isTrue();\n   }\n\n\n   function testDORInvalid() {\n      //  random token\n      $result = \\Session::validateIDOR([\n         '_idor_token' => bin2hex(random_bytes(32)),\n         'itemtype'    => 'Computer',\n      ]);\n      $this->boolean($result)->isFalse();\n\n      // bad itemtype\n      $token_bad_itt = \\Session::getNewIDORToken('Ticket');\n      $result = \\Session::validateIDOR([\n         '_idor_token' => $token_bad_itt,\n         'itemtype'    => 'Computer',\n      ]);\n      $this->boolean($result)->isFalse();\n\n      // missing add params\n      $token_miss_param = \\Session::getNewIDORToken('User', ['right' => 'all']);\n      $result = \\Session::validateIDOR([\n         '_idor_token' => $token_miss_param,\n         'itemtype'    => 'User',\n      ]);\n      $this->boolean($result)->isFalse();\n      $result = \\Session::validateIDOR([\n         '_idor_token' => $token_miss_param,\n         'itemtype'    => 'User',\n         'right'       => 'all'\n      ]);\n      $this->boolean($result)->isTrue();\n   }\n}\n"], "filenames": ["ajax/dropdownTrackingDeviceType.php", "inc/computer_item.class.php", "inc/dropdown.class.php", "inc/user.class.php", "tests/functionnal/Dropdown.php", "tests/functionnal/Session.php"], "buggy_code_start_loc": [79, 685, 176, 4029, 768, 377], "buggy_code_end_loc": [80, 686, 2205, 4032, 1333, 377], "fixing_code_start_loc": [79, 685, 176, 4029, 768, 378], "fixing_code_end_loc": [82, 688, 2206, 4035, 1342, 379], "type": "CWE-639", "message": "GLPI is an open-source asset and IT management software package that provides ITIL Service Desk features, licenses tracking and software auditing. In GLPI version 9.5.3, it was possible to switch entities with IDOR from a logged in user. This is fixed in version 9.5.4.", "other": {"cve": {"id": "CVE-2021-21255", "sourceIdentifier": "security-advisories@github.com", "published": "2021-03-02T20:15:14.537", "lastModified": "2022-10-14T13:01:11.067", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "GLPI is an open-source asset and IT management software package that provides ITIL Service Desk features, licenses tracking and software auditing. In GLPI version 9.5.3, it was possible to switch entities with IDOR from a logged in user. This is fixed in version 9.5.4."}, {"lang": "es", "value": "GLPI es un paquete de software de gesti\u00f3n de activos y TI de c\u00f3digo abierto que proporciona funciones de ITIL Service Desk, seguimiento de licencias y auditor\u00eda de software.&#xa0;En GLPI versi\u00f3n 9.5.3, era posible cambiar entidades con IDOR desde un usuario que hab\u00eda iniciado sesi\u00f3n.&#xa0;Esto es corregido en la versi\u00f3n 9.5.4"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.3, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-639"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:9.5.3:*:*:*:*:*:*:*", "matchCriteriaId": "3BAC9566-70F6-42A1-AED5-08499316477C"}]}]}], "references": [{"url": "https://github.com/glpi-project/glpi/commit/aade65b7f67d46f23d276a8acb0df70651c3b1dc", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-v3m5-r3mx-ff9j", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/glpi-project/glpi/commit/aade65b7f67d46f23d276a8acb0df70651c3b1dc"}}