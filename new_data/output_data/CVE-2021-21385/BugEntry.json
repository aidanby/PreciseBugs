{"buggy_code": ["package org.mifos.mobile.api\n\nimport okhttp3.OkHttpClient\nimport okhttp3.logging.HttpLoggingInterceptor\n\nimport java.security.KeyStore\nimport java.security.SecureRandom\nimport java.security.cert.CertificateException\nimport java.security.cert.X509Certificate\nimport java.util.*\nimport java.util.concurrent.TimeUnit\n\nimport javax.net.ssl.SSLContext\nimport javax.net.ssl.TrustManager\nimport javax.net.ssl.TrustManagerFactory\nimport javax.net.ssl.X509TrustManager\n\nclass SelfServiceOkHttpClient(private val tenant: String?, private val authToken: String?) {\n    // Create a trust manager that does not validate certificate chains\n    val mifosOkHttpClient: OkHttpClient\n        get() {\n            val builder = OkHttpClient.Builder()\n            try {\n                // Create a trust manager that does not validate certificate chains\n                val trustAllCerts = arrayOf<TrustManager>(\n                        object : X509TrustManager {\n                            @Throws(CertificateException::class)\n                            override fun checkClientTrusted(\n                                    chain: Array<X509Certificate>,\n                                    authType: String\n                            ) {\n                            }\n\n                            @Throws(CertificateException::class)\n                            override fun checkServerTrusted(\n                                    chain: Array<X509Certificate>,\n                                    authType: String\n                            ) {\n                            }\n\n                            override fun getAcceptedIssuers(): Array<X509Certificate?> {\n                                return arrayOfNulls(0)\n                            }\n                        }\n                )\n\n                // Install the all-trusting trust manager\n                val sslContext = SSLContext.getInstance(\"SSL\")\n                sslContext.init(null, trustAllCerts, SecureRandom())\n                // Create an ssl socket factory with our all-trusting manager\n                val sslSocketFactory = sslContext.socketFactory\n\n                //Enable Full Body Logging\n                val logger = HttpLoggingInterceptor()\n                logger.level = HttpLoggingInterceptor.Level.BODY\n                val trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())\n                trustManagerFactory.init(null as KeyStore?)\n                val trustManagers = trustManagerFactory.trustManagers\n                check(!(trustManagers.size != 1 || trustManagers[0] !is X509TrustManager)) { \"Unexpected default trust managers:\" + Arrays.toString(trustManagers) }\n                val trustManager = trustManagers[0] as X509TrustManager\n\n                //Set SSL certificate to OkHttpClient Builder\n                builder.sslSocketFactory(sslSocketFactory, trustManager)\n                builder.hostnameVerifier { _, _ -> true }\n            } catch (e: Exception) {\n                throw RuntimeException(e)\n            }\n\n            //Enable Full Body Logging\n            val logger = HttpLoggingInterceptor()\n            logger.level = HttpLoggingInterceptor.Level.BODY\n\n            //Setting Timeout 30 Seconds\n            builder.connectTimeout(60, TimeUnit.SECONDS)\n            builder.readTimeout(60, TimeUnit.SECONDS)\n\n            //Interceptor :> Full Body Logger and ApiRequest Header\n            builder.addInterceptor(logger)\n            builder.addInterceptor(SelfServiceInterceptor(tenant, authToken))\n            return builder.build()\n        }\n}"], "fixing_code": ["package org.mifos.mobile.api\n\nimport okhttp3.OkHttpClient\nimport okhttp3.logging.HttpLoggingInterceptor\n\nimport java.security.KeyStore\nimport java.security.SecureRandom\nimport java.security.cert.CertificateException\nimport java.security.cert.X509Certificate\nimport java.util.*\nimport java.util.concurrent.TimeUnit\n\nimport javax.net.ssl.SSLContext\nimport javax.net.ssl.TrustManager\nimport javax.net.ssl.TrustManagerFactory\nimport javax.net.ssl.X509TrustManager\n\nclass SelfServiceOkHttpClient(private val tenant: String?, private val authToken: String?) {\n    // Create a trust manager that does not validate certificate chains\n    val mifosOkHttpClient: OkHttpClient\n        get() {\n            val builder = OkHttpClient.Builder()\n\n            //Enable Full Body Logging\n            val logger = HttpLoggingInterceptor()\n            logger.level = HttpLoggingInterceptor.Level.BODY\n\n            //Setting Timeout 30 Seconds\n            builder.connectTimeout(60, TimeUnit.SECONDS)\n            builder.readTimeout(60, TimeUnit.SECONDS)\n\n            //Interceptor :> Full Body Logger and ApiRequest Header\n            builder.addInterceptor(logger)\n            builder.addInterceptor(SelfServiceInterceptor(tenant, authToken))\n            return builder.build()\n        }\n}"], "filenames": ["app/src/main/java/org/mifos/mobile/api/SelfServiceOkHttpClient.kt"], "buggy_code_start_loc": [23], "buggy_code_end_loc": [68], "fixing_code_start_loc": [22], "fixing_code_end_loc": [22], "type": "CWE-295", "message": "Mifos-Mobile Android Application for MifosX is an Android Application built on top of the MifosX Self-Service platform. Mifos-Mobile before commit e505f62 disables HTTPS hostname verification of its HTTP client. Additionally it accepted any self-signed certificate as valid. Hostname verification is an important part when using HTTPS to ensure that the presented certificate is valid for the host. Disabling it can allow for man-in-the-middle attacks. Accepting any certificate, even self-signed ones allows man-in-the-middle attacks. This problem is fixed in mifos-mobile commit e505f62.", "other": {"cve": {"id": "CVE-2021-21385", "sourceIdentifier": "security-advisories@github.com", "published": "2021-03-24T21:15:15.070", "lastModified": "2021-03-30T18:30:54.153", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Mifos-Mobile Android Application for MifosX is an Android Application built on top of the MifosX Self-Service platform. Mifos-Mobile before commit e505f62 disables HTTPS hostname verification of its HTTP client. Additionally it accepted any self-signed certificate as valid. Hostname verification is an important part when using HTTPS to ensure that the presented certificate is valid for the host. Disabling it can allow for man-in-the-middle attacks. Accepting any certificate, even self-signed ones allows man-in-the-middle attacks. This problem is fixed in mifos-mobile commit e505f62."}, {"lang": "es", "value": "La aplicaci\u00f3n de Android Mifos-Mobile para MifosX es una aplicaci\u00f3n de Android construida sobre la plataforma de autoservicio MifosX.&#xa0;Mifos-Mobile versiones anteriores al commit e505f62 deshabilita la comprobaci\u00f3n del nombre de host HTTPS de su cliente HTTP.&#xa0;Adem\u00e1s, acept\u00f3 como v\u00e1lido cualquier certificado autofirmado.&#xa0;La comprobaci\u00f3n del nombre de host es una parte importante cuando es usado HTTPS para garantizar que el certificado presentado sea v\u00e1lido para el host.&#xa0;Deshabilitarlo puede permitir ataques de tipo man-in-the-middle.&#xa0;Aceptar cualquier certificado, inclusive los autofirmados, permite ataques de tipo man-in-the-middle.&#xa0;Este problema es corregido en mifos-mobile commit e505f62"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.4, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-295"}, {"lang": "en", "value": "CWE-297"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mifos:mifos-mobile:*:*:*:*:*:android:*:*", "versionEndExcluding": "2021-03-14", "matchCriteriaId": "06D0F700-A34C-4383-97E7-0C7FE2707CDD"}]}]}], "references": [{"url": "https://github.com/openMF/mifos-mobile/commit/e505f62b92b19292bfdabd6e996ab76abfeaa90d", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/openMF/mifos-mobile/security/advisories/GHSA-9657-33wf-rmvx", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://openmf.github.io/mobileapps.github.io/", "source": "security-advisories@github.com", "tags": ["Product", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openMF/mifos-mobile/commit/e505f62b92b19292bfdabd6e996ab76abfeaa90d"}}