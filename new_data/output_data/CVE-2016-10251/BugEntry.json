{"buggy_code": ["/*\n * Copyright (c) 1999-2000 Image Power, Inc. and the University of\n *   British Columbia.\n * Copyright (c) 2001-2003 Michael David Adams.\n * All rights reserved.\n */\n\n/* __START_OF_JASPER_LICENSE__\n * \n * JasPer License Version 2.0\n * \n * Copyright (c) 2001-2006 Michael David Adams\n * Copyright (c) 1999-2000 Image Power, Inc.\n * Copyright (c) 1999-2000 The University of British Columbia\n * \n * All rights reserved.\n * \n * Permission is hereby granted, free of charge, to any person (the\n * \"User\") obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge,\n * publish, distribute, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n * \n * 1.  The above copyright notices and this permission notice (which\n * includes the disclaimer below) shall be included in all copies or\n * substantial portions of the Software.\n * \n * 2.  The name of a copyright holder shall not be used to endorse or\n * promote products derived from the Software without specific prior\n * written permission.\n * \n * THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS\n * LICENSE.  NO USE OF THE SOFTWARE IS AUTHORIZED HEREUNDER EXCEPT UNDER\n * THIS DISCLAIMER.  THE SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS\n * \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS.  IN NO\n * EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL\n * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING\n * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\n * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION\n * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  NO ASSURANCES ARE\n * PROVIDED BY THE COPYRIGHT HOLDERS THAT THE SOFTWARE DOES NOT INFRINGE\n * THE PATENT OR OTHER INTELLECTUAL PROPERTY RIGHTS OF ANY OTHER ENTITY.\n * EACH COPYRIGHT HOLDER DISCLAIMS ANY LIABILITY TO THE USER FOR CLAIMS\n * BROUGHT BY ANY OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL\n * PROPERTY RIGHTS OR OTHERWISE.  AS A CONDITION TO EXERCISING THE RIGHTS\n * GRANTED HEREUNDER, EACH USER HEREBY ASSUMES SOLE RESPONSIBILITY TO SECURE\n * ANY OTHER INTELLECTUAL PROPERTY RIGHTS NEEDED, IF ANY.  THE SOFTWARE\n * IS NOT FAULT-TOLERANT AND IS NOT INTENDED FOR USE IN MISSION-CRITICAL\n * SYSTEMS, SUCH AS THOSE USED IN THE OPERATION OF NUCLEAR FACILITIES,\n * AIRCRAFT NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL\n * SYSTEMS, DIRECT LIFE SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH\n * THE FAILURE OF THE SOFTWARE OR SYSTEM COULD LEAD DIRECTLY TO DEATH,\n * PERSONAL INJURY, OR SEVERE PHYSICAL OR ENVIRONMENTAL DAMAGE (\"HIGH\n * RISK ACTIVITIES\").  THE COPYRIGHT HOLDERS SPECIFICALLY DISCLAIM ANY\n * EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR HIGH RISK ACTIVITIES.\n * \n * __END_OF_JASPER_LICENSE__\n */\n\n/*\n * Tier-2 Coding Library\n *\n * $Id$\n */\n\n#include \"jasper/jas_math.h\"\n#include \"jasper/jas_malloc.h\"\n#include \"jasper/jas_math.h\"\n\n#include \"jpc_cs.h\"\n#include \"jpc_t2cod.h\"\n#include \"jpc_math.h\"\n\nstatic int jpc_pi_nextlrcp(jpc_pi_t *pi);\nstatic int jpc_pi_nextrlcp(jpc_pi_t *pi);\nstatic int jpc_pi_nextrpcl(jpc_pi_t *pi);\nstatic int jpc_pi_nextpcrl(jpc_pi_t *pi);\nstatic int jpc_pi_nextcprl(jpc_pi_t *pi);\n\nint jpc_pi_next(jpc_pi_t *pi)\n{\n\tjpc_pchg_t *pchg;\n\tint ret;\n\n\n\tfor (;;) {\n\n\t\tpi->valid = false;\n\n\t\tif (!pi->pchg) {\n\t\t\t++pi->pchgno;\n\t\t\tpi->compno = 0;\n\t\t\tpi->rlvlno = 0;\n\t\t\tpi->prcno = 0;\n\t\t\tpi->lyrno = 0;\n\t\t\tpi->prgvolfirst = true;\n\t\t\tif (pi->pchgno < jpc_pchglist_numpchgs(pi->pchglist)) {\n\t\t\t\tpi->pchg = jpc_pchglist_get(pi->pchglist, pi->pchgno);\n\t\t\t} else if (pi->pchgno == jpc_pchglist_numpchgs(pi->pchglist)) {\n\t\t\t\tpi->pchg = &pi->defaultpchg;\n\t\t\t} else {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\n\t\tpchg = pi->pchg;\n\t\tswitch (pchg->prgord) {\n\t\tcase JPC_COD_LRCPPRG:\n\t\t\tret = jpc_pi_nextlrcp(pi);\n\t\t\tbreak;\n\t\tcase JPC_COD_RLCPPRG:\n\t\t\tret = jpc_pi_nextrlcp(pi);\n\t\t\tbreak;\n\t\tcase JPC_COD_RPCLPRG:\n\t\t\tret = jpc_pi_nextrpcl(pi);\n\t\t\tbreak;\n\t\tcase JPC_COD_PCRLPRG:\n\t\t\tret = jpc_pi_nextpcrl(pi);\n\t\t\tbreak;\n\t\tcase JPC_COD_CPRLPRG:\n\t\t\tret = jpc_pi_nextcprl(pi);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tret = -1;\n\t\t\tbreak;\n\t\t}\n\t\tif (!ret) {\n\t\t\tpi->valid = true;\n\t\t\t++pi->pktno;\n\t\t\treturn 0;\n\t\t}\n\t\tpi->pchg = 0;\n\t}\n}\n\nstatic int jpc_pi_nextlrcp(register jpc_pi_t *pi)\n{\n\tjpc_pchg_t *pchg;\n\tint *prclyrno;\n\n\tpchg = pi->pchg;\n\tif (!pi->prgvolfirst) {\n\t\tprclyrno = &pi->pirlvl->prclyrnos[pi->prcno];\n\t\tgoto skip;\n\t} else {\n\t\tpi->prgvolfirst = false;\n\t}\n\n\tfor (pi->lyrno = 0; pi->lyrno < pi->numlyrs && pi->lyrno <\n\t  JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {\n\t\tfor (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pi->maxrlvls &&\n\t\t  pi->rlvlno < pchg->rlvlnoend; ++pi->rlvlno) {\n\t\t\tfor (pi->compno = pchg->compnostart, pi->picomp =\n\t\t\t  &pi->picomps[pi->compno]; pi->compno < pi->numcomps\n\t\t\t  && pi->compno < JAS_CAST(int, pchg->compnoend); ++pi->compno,\n\t\t\t  ++pi->picomp) {\n\t\t\t\tif (pi->rlvlno >= pi->picomp->numrlvls) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tpi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];\n\t\t\t\tfor (pi->prcno = 0, prclyrno =\n\t\t\t\t  pi->pirlvl->prclyrnos; pi->prcno <\n\t\t\t\t  pi->pirlvl->numprcs; ++pi->prcno,\n\t\t\t\t  ++prclyrno) {\n\t\t\t\t\tif (pi->lyrno >= *prclyrno) {\n\t\t\t\t\t\t*prclyrno = pi->lyrno;\n\t\t\t\t\t\t++(*prclyrno);\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\nskip:\n\t\t\t\t\t;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\n\nstatic int jpc_pi_nextrlcp(register jpc_pi_t *pi)\n{\n\tjpc_pchg_t *pchg;\n\tint *prclyrno;\n\n\tpchg = pi->pchg;\n\tif (!pi->prgvolfirst) {\n\t\tassert(pi->prcno < pi->pirlvl->numprcs);\n\t\tprclyrno = &pi->pirlvl->prclyrnos[pi->prcno];\n\t\tgoto skip;\n\t} else {\n\t\tpi->prgvolfirst = 0;\n\t}\n\n\tfor (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pi->maxrlvls &&\n\t  pi->rlvlno < pchg->rlvlnoend; ++pi->rlvlno) {\n\t\tfor (pi->lyrno = 0; pi->lyrno < pi->numlyrs && pi->lyrno <\n\t\t  JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {\n\t\t\tfor (pi->compno = pchg->compnostart, pi->picomp =\n\t\t\t  &pi->picomps[pi->compno]; pi->compno < pi->numcomps &&\n\t\t\t  pi->compno < JAS_CAST(int, pchg->compnoend); ++pi->compno, ++pi->picomp) {\n\t\t\t\tif (pi->rlvlno >= pi->picomp->numrlvls) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tpi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];\n\t\t\t\tfor (pi->prcno = 0, prclyrno = pi->pirlvl->prclyrnos;\n\t\t\t\t  pi->prcno < pi->pirlvl->numprcs; ++pi->prcno, ++prclyrno) {\n\t\t\t\t\tif (pi->lyrno >= *prclyrno) {\n\t\t\t\t\t\t*prclyrno = pi->lyrno;\n\t\t\t\t\t\t++(*prclyrno);\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\nskip:\n\t\t\t\t\t;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\n\nstatic int jpc_pi_nextrpcl(register jpc_pi_t *pi)\n{\n\tint rlvlno;\n\tjpc_pirlvl_t *pirlvl;\n\tjpc_pchg_t *pchg;\n\tint prchind;\n\tint prcvind;\n\tint *prclyrno;\n\tint compno;\n\tjpc_picomp_t *picomp;\n\tint xstep;\n\tint ystep;\n\tuint_fast32_t r;\n\tuint_fast32_t rpx;\n\tuint_fast32_t rpy;\n\tuint_fast32_t trx0;\n\tuint_fast32_t try0;\n\n\tpchg = pi->pchg;\n\tif (!pi->prgvolfirst) {\n\t\tgoto skip;\n\t} else {\n\t\tpi->xstep = 0;\n\t\tpi->ystep = 0;\n\t\tfor (compno = 0, picomp = pi->picomps; compno < pi->numcomps;\n\t\t  ++compno, ++picomp) {\n\t\t\tfor (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <\n\t\t\t  picomp->numrlvls; ++rlvlno, ++pirlvl) {\n\t\t\t\txstep = picomp->hsamp * (1 << (pirlvl->prcwidthexpn +\n\t\t\t\t  picomp->numrlvls - rlvlno - 1));\n\t\t\t\tystep = picomp->vsamp * (1 << (pirlvl->prcheightexpn +\n\t\t\t\t  picomp->numrlvls - rlvlno - 1));\n\t\t\t\tpi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);\n\t\t\t\tpi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);\n\t\t\t}\n\t\t}\n\t\tpi->prgvolfirst = 0;\n\t}\n\n\tfor (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pchg->rlvlnoend &&\n\t  pi->rlvlno < pi->maxrlvls; ++pi->rlvlno) {\n\t\tfor (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=\n\t\t  pi->ystep - (pi->y % pi->ystep)) {\n\t\t\tfor (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=\n\t\t\t  pi->xstep - (pi->x % pi->xstep)) {\n\t\t\t\tfor (pi->compno = pchg->compnostart,\n\t\t\t\t  pi->picomp = &pi->picomps[pi->compno];\n\t\t\t\t  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <\n\t\t\t\t  pi->numcomps; ++pi->compno, ++pi->picomp) {\n\t\t\t\t\tif (pi->rlvlno >= pi->picomp->numrlvls) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tpi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];\n\t\t\t\t\tif (pi->pirlvl->numprcs == 0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tr = pi->picomp->numrlvls - 1 - pi->rlvlno;\n\t\t\t\t\trpx = r + pi->pirlvl->prcwidthexpn;\n\t\t\t\t\trpy = r + pi->pirlvl->prcheightexpn;\n\t\t\t\t\ttrx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);\n\t\t\t\t\ttry0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);\n\t\t\t\t\tif (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx)))\n\t\t\t\t\t  || !(pi->x % (1 << rpx))) &&\n\t\t\t\t\t  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy)))\n\t\t\t\t\t  || !(pi->y % (1 << rpy)))) {\n\t\t\t\t\t\tprchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp\n\t\t\t\t\t\t  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,\n\t\t\t\t\t\t  pi->pirlvl->prcwidthexpn);\n\t\t\t\t\t\tprcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp\n\t\t\t\t\t\t  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,\n\t\t\t\t\t\t  pi->pirlvl->prcheightexpn);\n\t\t\t\t\t\tpi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;\n\n\t\t\t\t\t\tassert(pi->prcno < pi->pirlvl->numprcs);\n\t\t\t\t\t\tfor (pi->lyrno = 0; pi->lyrno <\n\t\t\t\t\t\t  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {\n\t\t\t\t\t\t\tprclyrno = &pi->pirlvl->prclyrnos[pi->prcno];\n\t\t\t\t\t\t\tif (pi->lyrno >= *prclyrno) {\n\t\t\t\t\t\t\t\t++(*prclyrno);\n\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t}\nskip:\n\t\t\t\t\t\t\t;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\n\nstatic int jpc_pi_nextpcrl(register jpc_pi_t *pi)\n{\n\tint rlvlno;\n\tjpc_pirlvl_t *pirlvl;\n\tjpc_pchg_t *pchg;\n\tint prchind;\n\tint prcvind;\n\tint *prclyrno;\n\tint compno;\n\tjpc_picomp_t *picomp;\n\tint xstep;\n\tint ystep;\n\tuint_fast32_t trx0;\n\tuint_fast32_t try0;\n\tuint_fast32_t r;\n\tuint_fast32_t rpx;\n\tuint_fast32_t rpy;\n\n\tpchg = pi->pchg;\n\tif (!pi->prgvolfirst) {\n\t\tgoto skip;\n\t} else {\n\t\tpi->xstep = 0;\n\t\tpi->ystep = 0;\n\t\tfor (compno = 0, picomp = pi->picomps; compno < pi->numcomps;\n\t\t  ++compno, ++picomp) {\n\t\t\tfor (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <\n\t\t\t  picomp->numrlvls; ++rlvlno, ++pirlvl) {\n\t\t\t\txstep = picomp->hsamp * (1 <<\n\t\t\t\t  (pirlvl->prcwidthexpn + picomp->numrlvls -\n\t\t\t\t  rlvlno - 1));\n\t\t\t\tystep = picomp->vsamp * (1 <<\n\t\t\t\t  (pirlvl->prcheightexpn + picomp->numrlvls -\n\t\t\t\t  rlvlno - 1));\n\t\t\t\tpi->xstep = (!pi->xstep) ? xstep :\n\t\t\t\t  JAS_MIN(pi->xstep, xstep);\n\t\t\t\tpi->ystep = (!pi->ystep) ? ystep :\n\t\t\t\t  JAS_MIN(pi->ystep, ystep);\n\t\t\t}\n\t\t}\n\t\tpi->prgvolfirst = 0;\n\t}\n\n\tfor (pi->y = pi->ystart; pi->y < pi->yend; pi->y += pi->ystep -\n\t  (pi->y % pi->ystep)) {\n\t\tfor (pi->x = pi->xstart; pi->x < pi->xend; pi->x += pi->xstep -\n\t\t  (pi->x % pi->xstep)) {\n\t\t\tfor (pi->compno = pchg->compnostart, pi->picomp =\n\t\t\t  &pi->picomps[pi->compno]; pi->compno < pi->numcomps\n\t\t\t  && pi->compno < JAS_CAST(int, pchg->compnoend); ++pi->compno,\n\t\t\t  ++pi->picomp) {\n\t\t\t\tfor (pi->rlvlno = pchg->rlvlnostart,\n\t\t\t\t  pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];\n\t\t\t\t  pi->rlvlno < pi->picomp->numrlvls &&\n\t\t\t\t  pi->rlvlno < pchg->rlvlnoend; ++pi->rlvlno,\n\t\t\t\t  ++pi->pirlvl) {\n\t\t\t\t\tif (pi->pirlvl->numprcs == 0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tr = pi->picomp->numrlvls - 1 - pi->rlvlno;\n\t\t\t\t\ttrx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);\n\t\t\t\t\ttry0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);\n\t\t\t\t\trpx = r + pi->pirlvl->prcwidthexpn;\n\t\t\t\t\trpy = r + pi->pirlvl->prcheightexpn;\n\t\t\t\t\tif (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx))) ||\n\t\t\t\t\t  !(pi->x % (pi->picomp->hsamp << rpx))) &&\n\t\t\t\t\t  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy))) ||\n\t\t\t\t\t  !(pi->y % (pi->picomp->vsamp << rpy)))) {\n\t\t\t\t\t\tprchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp\n\t\t\t\t\t\t  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,\n\t\t\t\t\t\t  pi->pirlvl->prcwidthexpn);\n\t\t\t\t\t\tprcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp\n\t\t\t\t\t\t  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,\n\t\t\t\t\t\t  pi->pirlvl->prcheightexpn);\n\t\t\t\t\t\tpi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;\n\t\t\t\t\t\tassert(pi->prcno < pi->pirlvl->numprcs);\n\t\t\t\t\t\tfor (pi->lyrno = 0; pi->lyrno < pi->numlyrs &&\n\t\t\t\t\t\t  pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {\n\t\t\t\t\t\t\tprclyrno = &pi->pirlvl->prclyrnos[pi->prcno];\n\t\t\t\t\t\t\tif (pi->lyrno >= *prclyrno) {\n\t\t\t\t\t\t\t\t++(*prclyrno);\n\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t}\nskip:\n\t\t\t\t\t\t\t;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\n\nstatic int jpc_pi_nextcprl(register jpc_pi_t *pi)\n{\n\tint rlvlno;\n\tjpc_pirlvl_t *pirlvl;\n\tjpc_pchg_t *pchg;\n\tint prchind;\n\tint prcvind;\n\tint *prclyrno;\n\tuint_fast32_t trx0;\n\tuint_fast32_t try0;\n\tuint_fast32_t r;\n\tuint_fast32_t rpx;\n\tuint_fast32_t rpy;\n\n\tpchg = pi->pchg;\n\tif (!pi->prgvolfirst) {\n\t\tgoto skip;\n\t} else {\n\t\tpi->prgvolfirst = 0;\n\t}\n\n\tfor (pi->compno = pchg->compnostart, pi->picomp =\n\t  &pi->picomps[pi->compno]; pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno < pi->numcomps; ++pi->compno,\n\t  ++pi->picomp) {\n\t\tpirlvl = pi->picomp->pirlvls;\n\t\tpi->xstep = pi->picomp->hsamp * (1 << (pirlvl->prcwidthexpn +\n\t\t  pi->picomp->numrlvls - 1));\n\t\tpi->ystep = pi->picomp->vsamp * (1 << (pirlvl->prcheightexpn +\n\t\t  pi->picomp->numrlvls - 1));\n\t\tfor (rlvlno = 1, pirlvl = &pi->picomp->pirlvls[1];\n\t\t  rlvlno < pi->picomp->numrlvls; ++rlvlno, ++pirlvl) {\n\t\t\tpi->xstep = JAS_MIN(pi->xstep, pi->picomp->hsamp * (1 <<\n\t\t\t  (pirlvl->prcwidthexpn + pi->picomp->numrlvls -\n\t\t\t  rlvlno - 1)));\n\t\t\tpi->ystep = JAS_MIN(pi->ystep, pi->picomp->vsamp * (1 <<\n\t\t\t  (pirlvl->prcheightexpn + pi->picomp->numrlvls -\n\t\t\t  rlvlno - 1)));\n\t\t}\n\t\tfor (pi->y = pi->ystart; pi->y < pi->yend;\n\t\t  pi->y += pi->ystep - (pi->y % pi->ystep)) {\n\t\t\tfor (pi->x = pi->xstart; pi->x < pi->xend;\n\t\t\t  pi->x += pi->xstep - (pi->x % pi->xstep)) {\n\t\t\t\tfor (pi->rlvlno = pchg->rlvlnostart,\n\t\t\t\t  pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];\n\t\t\t\t  pi->rlvlno < pi->picomp->numrlvls && pi->rlvlno <\n\t\t\t\t  pchg->rlvlnoend; ++pi->rlvlno, ++pi->pirlvl) {\n\t\t\t\t\tif (pi->pirlvl->numprcs == 0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tr = pi->picomp->numrlvls - 1 - pi->rlvlno;\n\t\t\t\t\ttrx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);\n\t\t\t\t\ttry0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);\n\t\t\t\t\trpx = r + pi->pirlvl->prcwidthexpn;\n\t\t\t\t\trpy = r + pi->pirlvl->prcheightexpn;\n\t\t\t\t\tif (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx))) ||\n\t\t\t\t\t  !(pi->x % (pi->picomp->hsamp << rpx))) &&\n\t\t\t\t\t  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy))) ||\n\t\t\t\t\t  !(pi->y % (pi->picomp->vsamp << rpy)))) {\n\t\t\t\t\t\tprchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp\n\t\t\t\t\t\t  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,\n\t\t\t\t\t\t  pi->pirlvl->prcwidthexpn);\n\t\t\t\t\t\tprcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp\n\t\t\t\t\t\t  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,\n\t\t\t\t\t\t  pi->pirlvl->prcheightexpn);\n\t\t\t\t\t\tpi->prcno = prcvind *\n\t\t\t\t\t\t  pi->pirlvl->numhprcs +\n\t\t\t\t\t\t  prchind;\n\t\t\t\t\t\tassert(pi->prcno <\n\t\t\t\t\t\t  pi->pirlvl->numprcs);\n\t\t\t\t\t\tfor (pi->lyrno = 0; pi->lyrno <\n\t\t\t\t\t\t  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {\n\t\t\t\t\t\t\tprclyrno = &pi->pirlvl->prclyrnos[pi->prcno];\n\t\t\t\t\t\t\tif (pi->lyrno >= *prclyrno) {\n\t\t\t\t\t\t\t\t++(*prclyrno);\n\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t}\nskip:\n\t\t\t\t\t\t\t;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\n\nstatic void pirlvl_destroy(jpc_pirlvl_t *rlvl)\n{\n\tif (rlvl->prclyrnos) {\n\t\tjas_free(rlvl->prclyrnos);\n\t}\n}\n\nstatic void jpc_picomp_destroy(jpc_picomp_t *picomp)\n{\n\tint rlvlno;\n\tjpc_pirlvl_t *pirlvl;\n\tif (picomp->pirlvls) {\n\t\tfor (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <\n\t\t  picomp->numrlvls; ++rlvlno, ++pirlvl) {\n\t\t\tpirlvl_destroy(pirlvl);\n\t\t}\n\t\tjas_free(picomp->pirlvls);\n\t}\n}\n\nvoid jpc_pi_destroy(jpc_pi_t *pi)\n{\n\tjpc_picomp_t *picomp;\n\tint compno;\n\tif (pi->picomps) {\n\t\tfor (compno = 0, picomp = pi->picomps; compno < pi->numcomps;\n\t\t  ++compno, ++picomp) {\n\t\t\tjpc_picomp_destroy(picomp);\n\t\t}\n\t\tjas_free(pi->picomps);\n\t}\n\tif (pi->pchglist) {\n\t\tjpc_pchglist_destroy(pi->pchglist);\n\t}\n\tjas_free(pi);\n}\n\njpc_pi_t *jpc_pi_create0()\n{\n\tjpc_pi_t *pi;\n\tif (!(pi = jas_malloc(sizeof(jpc_pi_t)))) {\n\t\treturn 0;\n\t}\n\tpi->picomps = 0;\n\tpi->pchgno = 0;\n\tif (!(pi->pchglist = jpc_pchglist_create())) {\n\t\tjas_free(pi);\n\t\treturn 0;\n\t}\n\treturn pi;\n}\n\nint jpc_pi_addpchg(jpc_pi_t *pi, jpc_pocpchg_t *pchg)\n{\n\treturn jpc_pchglist_insert(pi->pchglist, -1, pchg);\n}\n\njpc_pchglist_t *jpc_pchglist_create()\n{\n\tjpc_pchglist_t *pchglist;\n\tif (!(pchglist = jas_malloc(sizeof(jpc_pchglist_t)))) {\n\t\treturn 0;\n\t}\n\tpchglist->numpchgs = 0;\n\tpchglist->maxpchgs = 0;\n\tpchglist->pchgs = 0;\n\treturn pchglist;\n}\n\nint jpc_pchglist_insert(jpc_pchglist_t *pchglist, int pchgno, jpc_pchg_t *pchg)\n{\n\tint i;\n\tint newmaxpchgs;\n\tjpc_pchg_t **newpchgs;\n\tif (pchgno < 0) {\n\t\tpchgno = pchglist->numpchgs;\n\t}\n\tif (pchglist->numpchgs >= pchglist->maxpchgs) {\n\t\tnewmaxpchgs = pchglist->maxpchgs + 128;\n\t\tif (!(newpchgs = jas_realloc2(pchglist->pchgs, newmaxpchgs,\n\t\t  sizeof(jpc_pchg_t *)))) {\n\t\t\treturn -1;\n\t\t}\n\t\tpchglist->maxpchgs = newmaxpchgs;\n\t\tpchglist->pchgs = newpchgs;\n\t}\n\tfor (i = pchglist->numpchgs; i > pchgno; --i) {\n\t\tpchglist->pchgs[i] = pchglist->pchgs[i - 1];\n\t}\n\tpchglist->pchgs[pchgno] = pchg;\n\t++pchglist->numpchgs;\n\treturn 0;\n}\n\njpc_pchg_t *jpc_pchglist_remove(jpc_pchglist_t *pchglist, int pchgno)\n{\n\tint i;\n\tjpc_pchg_t *pchg;\n\tassert(pchgno < pchglist->numpchgs);\n\tpchg = pchglist->pchgs[pchgno];\n\tfor (i = pchgno + 1; i < pchglist->numpchgs; ++i) {\n\t\tpchglist->pchgs[i - 1] = pchglist->pchgs[i];\n\t}\n\t--pchglist->numpchgs;\n\treturn pchg;\n}\n\njpc_pchg_t *jpc_pchg_copy(jpc_pchg_t *pchg)\n{\n\tjpc_pchg_t *newpchg;\n\tif (!(newpchg = jas_malloc(sizeof(jpc_pchg_t)))) {\n\t\treturn 0;\n\t}\n\t*newpchg = *pchg;\n\treturn newpchg;\n}\n\njpc_pchglist_t *jpc_pchglist_copy(jpc_pchglist_t *pchglist)\n{\n\tjpc_pchglist_t *newpchglist;\n\tjpc_pchg_t *newpchg;\n\tint pchgno;\n\tif (!(newpchglist = jpc_pchglist_create())) {\n\t\treturn 0;\n\t}\n\tfor (pchgno = 0; pchgno < pchglist->numpchgs; ++pchgno) {\n\t\tif (!(newpchg = jpc_pchg_copy(pchglist->pchgs[pchgno])) ||\n\t\t  jpc_pchglist_insert(newpchglist, -1, newpchg)) {\n\t\t\tjpc_pchglist_destroy(newpchglist);\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn newpchglist;\n}\n\nvoid jpc_pchglist_destroy(jpc_pchglist_t *pchglist)\n{\n\tint pchgno;\n\tif (pchglist->pchgs) {\n\t\tfor (pchgno = 0; pchgno < pchglist->numpchgs; ++pchgno) {\n\t\t\tjpc_pchg_destroy(pchglist->pchgs[pchgno]);\n\t\t}\n\t\tjas_free(pchglist->pchgs);\n\t}\n\tjas_free(pchglist);\n}\n\nvoid jpc_pchg_destroy(jpc_pchg_t *pchg)\n{\n\tjas_free(pchg);\n}\n\njpc_pchg_t *jpc_pchglist_get(jpc_pchglist_t *pchglist, int pchgno)\n{\n\treturn pchglist->pchgs[pchgno];\n}\n\nint jpc_pchglist_numpchgs(jpc_pchglist_t *pchglist)\n{\n\treturn pchglist->numpchgs;\n}\n\nint jpc_pi_init(jpc_pi_t *pi)\n{\n\tint compno;\n\tint rlvlno;\n\tint prcno;\n\tjpc_picomp_t *picomp;\n\tjpc_pirlvl_t *pirlvl;\n\tint *prclyrno;\n\n\tpi->prgvolfirst = 0;\n\tpi->valid = 0;\n\tpi->pktno = -1;\n\tpi->pchgno = -1;\n\tpi->pchg = 0;\n\n\tfor (compno = 0, picomp = pi->picomps; compno < pi->numcomps;\n\t  ++compno, ++picomp) {\n\t\tfor (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <\n\t\t  picomp->numrlvls; ++rlvlno, ++pirlvl) {\n\t\t\tfor (prcno = 0, prclyrno = pirlvl->prclyrnos;\n\t\t\t  prcno < pirlvl->numprcs; ++prcno, ++prclyrno) {\n\t\t\t\t*prclyrno = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n", "/*\n * Copyright (c) 1999-2000 Image Power, Inc. and the University of\n *   British Columbia.\n * Copyright (c) 2001-2002 Michael David Adams.\n * All rights reserved.\n */\n\n/* __START_OF_JASPER_LICENSE__\n * \n * JasPer License Version 2.0\n * \n * Copyright (c) 2001-2006 Michael David Adams\n * Copyright (c) 1999-2000 Image Power, Inc.\n * Copyright (c) 1999-2000 The University of British Columbia\n * \n * All rights reserved.\n * \n * Permission is hereby granted, free of charge, to any person (the\n * \"User\") obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge,\n * publish, distribute, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n * \n * 1.  The above copyright notices and this permission notice (which\n * includes the disclaimer below) shall be included in all copies or\n * substantial portions of the Software.\n * \n * 2.  The name of a copyright holder shall not be used to endorse or\n * promote products derived from the Software without specific prior\n * written permission.\n * \n * THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS\n * LICENSE.  NO USE OF THE SOFTWARE IS AUTHORIZED HEREUNDER EXCEPT UNDER\n * THIS DISCLAIMER.  THE SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS\n * \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS.  IN NO\n * EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL\n * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING\n * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\n * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION\n * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  NO ASSURANCES ARE\n * PROVIDED BY THE COPYRIGHT HOLDERS THAT THE SOFTWARE DOES NOT INFRINGE\n * THE PATENT OR OTHER INTELLECTUAL PROPERTY RIGHTS OF ANY OTHER ENTITY.\n * EACH COPYRIGHT HOLDER DISCLAIMS ANY LIABILITY TO THE USER FOR CLAIMS\n * BROUGHT BY ANY OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL\n * PROPERTY RIGHTS OR OTHERWISE.  AS A CONDITION TO EXERCISING THE RIGHTS\n * GRANTED HEREUNDER, EACH USER HEREBY ASSUMES SOLE RESPONSIBILITY TO SECURE\n * ANY OTHER INTELLECTUAL PROPERTY RIGHTS NEEDED, IF ANY.  THE SOFTWARE\n * IS NOT FAULT-TOLERANT AND IS NOT INTENDED FOR USE IN MISSION-CRITICAL\n * SYSTEMS, SUCH AS THOSE USED IN THE OPERATION OF NUCLEAR FACILITIES,\n * AIRCRAFT NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL\n * SYSTEMS, DIRECT LIFE SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH\n * THE FAILURE OF THE SOFTWARE OR SYSTEM COULD LEAD DIRECTLY TO DEATH,\n * PERSONAL INJURY, OR SEVERE PHYSICAL OR ENVIRONMENTAL DAMAGE (\"HIGH\n * RISK ACTIVITIES\").  THE COPYRIGHT HOLDERS SPECIFICALLY DISCLAIM ANY\n * EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR HIGH RISK ACTIVITIES.\n * \n * __END_OF_JASPER_LICENSE__\n */\n\n/*\n * Tier-2 Coding Library\n *\n * $Id$\n */\n\n#ifndef JPC_T2COD_H\n#define\tJPC_T2COD_H\n\n/******************************************************************************\\\n* Includes.\n\\******************************************************************************/\n\n#include \"jpc_cs.h\"\n\n/******************************************************************************\\\n* Types.\n\\******************************************************************************/\n\n/* Progression change list. */\n\ntypedef struct {\n\n\t/* The number of progression changes. */\n\tint numpchgs;\n\n\t/* The maximum number of progression changes that can be accomodated\n\t  without growing the progression change array. */\n\tint maxpchgs;\n\n\t/* The progression changes. */\n\tjpc_pchg_t **pchgs;\n\n} jpc_pchglist_t;\n\n/* Packet iterator per-resolution-level information. */\n\ntypedef struct {\n\n\t/* The number of precincts. */\n\tint numprcs;\n\n\t/* The last layer processed for each precinct. */\n\tint *prclyrnos;\n\n\t/* The precinct width exponent. */\n\tint prcwidthexpn;\n\n\t/* The precinct height exponent. */\n\tint prcheightexpn;\n\n\t/* The number of precincts spanning the resolution level in the horizontal\n\t  direction. */\n\tint numhprcs;\n\n} jpc_pirlvl_t;\n\n/* Packet iterator per-component information. */\n\ntypedef struct {\n\n\t/* The number of resolution levels. */\n\tint numrlvls;\n\n\t/* The per-resolution-level information. */\n\tjpc_pirlvl_t *pirlvls;\n\n\t/* The horizontal sampling period. */\n\tint hsamp;\n\n\t/* The vertical sampling period. */\n\tint vsamp;\n\n} jpc_picomp_t;\n\n/* Packet iterator class. */\n\ntypedef struct {\n\n\t/* The number of layers. */\n\tint numlyrs;\n\n\t/* The number of resolution levels. */\n\tint maxrlvls;\n\n\t/* The number of components. */\n\tint numcomps;\n\n\t/* The per-component information. */\n\tjpc_picomp_t *picomps;\n\n\t/* The current component. */\n\tjpc_picomp_t *picomp;\n\n\t/* The current resolution level. */\n\tjpc_pirlvl_t *pirlvl;\n\n\t/* The number of the current component. */\n\tint compno;\n\n\t/* The number of the current resolution level. */\n\tint rlvlno;\n\n\t/* The number of the current precinct. */\n\tint prcno;\n\n\t/* The number of the current layer. */\n\tint lyrno;\n\n\t/* The x-coordinate of the current position. */\n\tint x;\n\n\t/* The y-coordinate of the current position. */\n\tint y;\n\n\t/* The horizontal step size. */\n\tint xstep;\n\n\t/* The vertical step size. */\n\tint ystep;\n\n\t/* The x-coordinate of the top-left corner of the tile on the reference\n\t  grid. */\n\tint xstart;\n\n\t/* The y-coordinate of the top-left corner of the tile on the reference\n\t  grid. */\n\tint ystart;\n\n\t/* The x-coordinate of the bottom-right corner of the tile on the\n\t  reference grid (plus one). */\n\tint xend;\n\n\t/* The y-coordinate of the bottom-right corner of the tile on the\n\t  reference grid (plus one). */\n\tint yend;\n\n\t/* The current progression change. */\n\tjpc_pchg_t *pchg;\n\n\t/* The progression change list. */\n\tjpc_pchglist_t *pchglist;\n\n\t/* The progression to use in the absense of explicit specification. */\n\tjpc_pchg_t defaultpchg;\n\n\t/* The current progression change number. */\n\tint pchgno;\n\n\t/* Is this the first time in the current progression volume? */\n\tbool prgvolfirst;\n\n\t/* Is the current iterator value valid? */\n\tbool valid;\n\n\t/* The current packet number. */\n\tint pktno;\n\n} jpc_pi_t;\n\n/******************************************************************************\\\n* Functions/macros for packet iterators.\n\\******************************************************************************/\n\n/* Create a packet iterator. */\njpc_pi_t *jpc_pi_create0(void);\n\n/* Destroy a packet iterator. */\nvoid jpc_pi_destroy(jpc_pi_t *pi);\n\n/* Add a progression change to a packet iterator. */\nint jpc_pi_addpchg(jpc_pi_t *pi, jpc_pocpchg_t *pchg);\n\n/* Prepare a packet iterator for iteration. */\nint jpc_pi_init(jpc_pi_t *pi);\n\n/* Set the iterator to the first packet. */\nint jpc_pi_begin(jpc_pi_t *pi);\n\n/* Proceed to the next packet in sequence. */\nint jpc_pi_next(jpc_pi_t *pi);\n\n/* Get the index of the current packet. */\n#define\tjpc_pi_getind(pi)\t((pi)->pktno)\n\n/* Get the component number of the current packet. */\n#define jpc_pi_cmptno(pi)\t(assert(pi->valid), (pi)->compno)\n\n/* Get the resolution level of the current packet. */\n#define jpc_pi_rlvlno(pi)\t(assert(pi->valid), (pi)->rlvlno)\n\n/* Get the layer number of the current packet. */\n#define jpc_pi_lyrno(pi)\t(assert(pi->valid), (pi)->lyrno)\n\n/* Get the precinct number of the current packet. */\n#define jpc_pi_prcno(pi)\t(assert(pi->valid), (pi)->prcno)\n\n/* Get the progression order for the current packet. */\n#define jpc_pi_prg(pi)\t(assert(pi->valid), (pi)->pchg->prgord)\n\n/******************************************************************************\\\n* Functions/macros for progression change lists.\n\\******************************************************************************/\n\n/* Create a progression change list. */\njpc_pchglist_t *jpc_pchglist_create(void);\n\n/* Destroy a progression change list. */\nvoid jpc_pchglist_destroy(jpc_pchglist_t *pchglist);\n\n/* Insert a new element into a progression change list. */\nint jpc_pchglist_insert(jpc_pchglist_t *pchglist, int pchgno, jpc_pchg_t *pchg);\n\n/* Remove an element from a progression change list. */\njpc_pchg_t *jpc_pchglist_remove(jpc_pchglist_t *pchglist, int pchgno);\n\n/* Get an element from a progression change list. */\njpc_pchg_t *jpc_pchglist_get(jpc_pchglist_t *pchglist, int pchgno);\n\n/* Copy a progression change list. */\njpc_pchglist_t *jpc_pchglist_copy(jpc_pchglist_t *pchglist);\n\n/* Get the number of elements in a progression change list. */\nint jpc_pchglist_numpchgs(jpc_pchglist_t *pchglist);\n\n/******************************************************************************\\\n* Functions/macros for progression changes.\n\\******************************************************************************/\n\n/* Destroy a progression change. */\nvoid jpc_pchg_destroy(jpc_pchg_t *pchg);\n\n/* Copy a progression change. */\njpc_pchg_t *jpc_pchg_copy(jpc_pchg_t *pchg);\n\n#endif\n"], "fixing_code": ["/*\n * Copyright (c) 1999-2000 Image Power, Inc. and the University of\n *   British Columbia.\n * Copyright (c) 2001-2003 Michael David Adams.\n * All rights reserved.\n */\n\n/* __START_OF_JASPER_LICENSE__\n * \n * JasPer License Version 2.0\n * \n * Copyright (c) 2001-2006 Michael David Adams\n * Copyright (c) 1999-2000 Image Power, Inc.\n * Copyright (c) 1999-2000 The University of British Columbia\n * \n * All rights reserved.\n * \n * Permission is hereby granted, free of charge, to any person (the\n * \"User\") obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge,\n * publish, distribute, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n * \n * 1.  The above copyright notices and this permission notice (which\n * includes the disclaimer below) shall be included in all copies or\n * substantial portions of the Software.\n * \n * 2.  The name of a copyright holder shall not be used to endorse or\n * promote products derived from the Software without specific prior\n * written permission.\n * \n * THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS\n * LICENSE.  NO USE OF THE SOFTWARE IS AUTHORIZED HEREUNDER EXCEPT UNDER\n * THIS DISCLAIMER.  THE SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS\n * \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS.  IN NO\n * EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL\n * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING\n * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\n * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION\n * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  NO ASSURANCES ARE\n * PROVIDED BY THE COPYRIGHT HOLDERS THAT THE SOFTWARE DOES NOT INFRINGE\n * THE PATENT OR OTHER INTELLECTUAL PROPERTY RIGHTS OF ANY OTHER ENTITY.\n * EACH COPYRIGHT HOLDER DISCLAIMS ANY LIABILITY TO THE USER FOR CLAIMS\n * BROUGHT BY ANY OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL\n * PROPERTY RIGHTS OR OTHERWISE.  AS A CONDITION TO EXERCISING THE RIGHTS\n * GRANTED HEREUNDER, EACH USER HEREBY ASSUMES SOLE RESPONSIBILITY TO SECURE\n * ANY OTHER INTELLECTUAL PROPERTY RIGHTS NEEDED, IF ANY.  THE SOFTWARE\n * IS NOT FAULT-TOLERANT AND IS NOT INTENDED FOR USE IN MISSION-CRITICAL\n * SYSTEMS, SUCH AS THOSE USED IN THE OPERATION OF NUCLEAR FACILITIES,\n * AIRCRAFT NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL\n * SYSTEMS, DIRECT LIFE SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH\n * THE FAILURE OF THE SOFTWARE OR SYSTEM COULD LEAD DIRECTLY TO DEATH,\n * PERSONAL INJURY, OR SEVERE PHYSICAL OR ENVIRONMENTAL DAMAGE (\"HIGH\n * RISK ACTIVITIES\").  THE COPYRIGHT HOLDERS SPECIFICALLY DISCLAIM ANY\n * EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR HIGH RISK ACTIVITIES.\n * \n * __END_OF_JASPER_LICENSE__\n */\n\n/*\n * Tier-2 Coding Library\n *\n * $Id$\n */\n\n#include \"jasper/jas_math.h\"\n#include \"jasper/jas_malloc.h\"\n#include \"jasper/jas_math.h\"\n\n#include \"jpc_cs.h\"\n#include \"jpc_t2cod.h\"\n#include \"jpc_math.h\"\n\nstatic int jpc_pi_nextlrcp(jpc_pi_t *pi);\nstatic int jpc_pi_nextrlcp(jpc_pi_t *pi);\nstatic int jpc_pi_nextrpcl(jpc_pi_t *pi);\nstatic int jpc_pi_nextpcrl(jpc_pi_t *pi);\nstatic int jpc_pi_nextcprl(jpc_pi_t *pi);\n\nint jpc_pi_next(jpc_pi_t *pi)\n{\n\tjpc_pchg_t *pchg;\n\tint ret;\n\n\n\tfor (;;) {\n\n\t\tpi->valid = false;\n\n\t\tif (!pi->pchg) {\n\t\t\t++pi->pchgno;\n\t\t\tpi->compno = 0;\n\t\t\tpi->rlvlno = 0;\n\t\t\tpi->prcno = 0;\n\t\t\tpi->lyrno = 0;\n\t\t\tpi->prgvolfirst = true;\n\t\t\tif (pi->pchgno < jpc_pchglist_numpchgs(pi->pchglist)) {\n\t\t\t\tpi->pchg = jpc_pchglist_get(pi->pchglist, pi->pchgno);\n\t\t\t} else if (pi->pchgno == jpc_pchglist_numpchgs(pi->pchglist)) {\n\t\t\t\tpi->pchg = &pi->defaultpchg;\n\t\t\t} else {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\n\t\tpchg = pi->pchg;\n\t\tswitch (pchg->prgord) {\n\t\tcase JPC_COD_LRCPPRG:\n\t\t\tret = jpc_pi_nextlrcp(pi);\n\t\t\tbreak;\n\t\tcase JPC_COD_RLCPPRG:\n\t\t\tret = jpc_pi_nextrlcp(pi);\n\t\t\tbreak;\n\t\tcase JPC_COD_RPCLPRG:\n\t\t\tret = jpc_pi_nextrpcl(pi);\n\t\t\tbreak;\n\t\tcase JPC_COD_PCRLPRG:\n\t\t\tret = jpc_pi_nextpcrl(pi);\n\t\t\tbreak;\n\t\tcase JPC_COD_CPRLPRG:\n\t\t\tret = jpc_pi_nextcprl(pi);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tret = -1;\n\t\t\tbreak;\n\t\t}\n\t\tif (!ret) {\n\t\t\tpi->valid = true;\n\t\t\t++pi->pktno;\n\t\t\treturn 0;\n\t\t}\n\t\tpi->pchg = 0;\n\t}\n}\n\nstatic int jpc_pi_nextlrcp(register jpc_pi_t *pi)\n{\n\tjpc_pchg_t *pchg;\n\tint *prclyrno;\n\n\tpchg = pi->pchg;\n\tif (!pi->prgvolfirst) {\n\t\tprclyrno = &pi->pirlvl->prclyrnos[pi->prcno];\n\t\tgoto skip;\n\t} else {\n\t\tpi->prgvolfirst = false;\n\t}\n\n\tfor (pi->lyrno = 0; pi->lyrno < pi->numlyrs && pi->lyrno <\n\t  JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {\n\t\tfor (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pi->maxrlvls &&\n\t\t  pi->rlvlno < pchg->rlvlnoend; ++pi->rlvlno) {\n\t\t\tfor (pi->compno = pchg->compnostart, pi->picomp =\n\t\t\t  &pi->picomps[pi->compno]; pi->compno < pi->numcomps\n\t\t\t  && pi->compno < JAS_CAST(int, pchg->compnoend); ++pi->compno,\n\t\t\t  ++pi->picomp) {\n\t\t\t\tif (pi->rlvlno >= pi->picomp->numrlvls) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tpi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];\n\t\t\t\tfor (pi->prcno = 0, prclyrno =\n\t\t\t\t  pi->pirlvl->prclyrnos; pi->prcno <\n\t\t\t\t  pi->pirlvl->numprcs; ++pi->prcno,\n\t\t\t\t  ++prclyrno) {\n\t\t\t\t\tif (pi->lyrno >= *prclyrno) {\n\t\t\t\t\t\t*prclyrno = pi->lyrno;\n\t\t\t\t\t\t++(*prclyrno);\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\nskip:\n\t\t\t\t\t;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\n\nstatic int jpc_pi_nextrlcp(register jpc_pi_t *pi)\n{\n\tjpc_pchg_t *pchg;\n\tint *prclyrno;\n\n\tpchg = pi->pchg;\n\tif (!pi->prgvolfirst) {\n\t\tassert(pi->prcno < pi->pirlvl->numprcs);\n\t\tprclyrno = &pi->pirlvl->prclyrnos[pi->prcno];\n\t\tgoto skip;\n\t} else {\n\t\tpi->prgvolfirst = 0;\n\t}\n\n\tfor (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pi->maxrlvls &&\n\t  pi->rlvlno < pchg->rlvlnoend; ++pi->rlvlno) {\n\t\tfor (pi->lyrno = 0; pi->lyrno < pi->numlyrs && pi->lyrno <\n\t\t  JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {\n\t\t\tfor (pi->compno = pchg->compnostart, pi->picomp =\n\t\t\t  &pi->picomps[pi->compno]; pi->compno < pi->numcomps &&\n\t\t\t  pi->compno < JAS_CAST(int, pchg->compnoend); ++pi->compno, ++pi->picomp) {\n\t\t\t\tif (pi->rlvlno >= pi->picomp->numrlvls) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tpi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];\n\t\t\t\tfor (pi->prcno = 0, prclyrno = pi->pirlvl->prclyrnos;\n\t\t\t\t  pi->prcno < pi->pirlvl->numprcs; ++pi->prcno, ++prclyrno) {\n\t\t\t\t\tif (pi->lyrno >= *prclyrno) {\n\t\t\t\t\t\t*prclyrno = pi->lyrno;\n\t\t\t\t\t\t++(*prclyrno);\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\nskip:\n\t\t\t\t\t;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\n\nstatic int jpc_pi_nextrpcl(register jpc_pi_t *pi)\n{\n\tint rlvlno;\n\tjpc_pirlvl_t *pirlvl;\n\tjpc_pchg_t *pchg;\n\tint prchind;\n\tint prcvind;\n\tint *prclyrno;\n\tint compno;\n\tjpc_picomp_t *picomp;\n\tint xstep;\n\tint ystep;\n\tuint_fast32_t r;\n\tuint_fast32_t rpx;\n\tuint_fast32_t rpy;\n\tuint_fast32_t trx0;\n\tuint_fast32_t try0;\n\n\tpchg = pi->pchg;\n\tif (!pi->prgvolfirst) {\n\t\tgoto skip;\n\t} else {\n\t\tpi->xstep = 0;\n\t\tpi->ystep = 0;\n\t\tfor (compno = 0, picomp = pi->picomps; compno < pi->numcomps;\n\t\t  ++compno, ++picomp) {\n\t\t\tfor (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <\n\t\t\t  picomp->numrlvls; ++rlvlno, ++pirlvl) {\n\t\t\t\txstep = picomp->hsamp * (1 << (pirlvl->prcwidthexpn +\n\t\t\t\t  picomp->numrlvls - rlvlno - 1));\n\t\t\t\tystep = picomp->vsamp * (1 << (pirlvl->prcheightexpn +\n\t\t\t\t  picomp->numrlvls - rlvlno - 1));\n\t\t\t\tpi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);\n\t\t\t\tpi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);\n\t\t\t}\n\t\t}\n\t\tpi->prgvolfirst = 0;\n\t}\n\n\tfor (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pchg->rlvlnoend &&\n\t  pi->rlvlno < pi->maxrlvls; ++pi->rlvlno) {\n\t\tfor (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=\n\t\t  pi->ystep - (pi->y % pi->ystep)) {\n\t\t\tfor (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=\n\t\t\t  pi->xstep - (pi->x % pi->xstep)) {\n\t\t\t\tfor (pi->compno = pchg->compnostart,\n\t\t\t\t  pi->picomp = &pi->picomps[pi->compno];\n\t\t\t\t  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <\n\t\t\t\t  pi->numcomps; ++pi->compno, ++pi->picomp) {\n\t\t\t\t\tif (pi->rlvlno >= pi->picomp->numrlvls) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tpi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];\n\t\t\t\t\tif (pi->pirlvl->numprcs == 0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tr = pi->picomp->numrlvls - 1 - pi->rlvlno;\n\t\t\t\t\trpx = r + pi->pirlvl->prcwidthexpn;\n\t\t\t\t\trpy = r + pi->pirlvl->prcheightexpn;\n\t\t\t\t\ttrx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);\n\t\t\t\t\ttry0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);\n\t\t\t\t\tif (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx)))\n\t\t\t\t\t  || !(pi->x % (1 << rpx))) &&\n\t\t\t\t\t  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy)))\n\t\t\t\t\t  || !(pi->y % (1 << rpy)))) {\n\t\t\t\t\t\tprchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp\n\t\t\t\t\t\t  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,\n\t\t\t\t\t\t  pi->pirlvl->prcwidthexpn);\n\t\t\t\t\t\tprcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp\n\t\t\t\t\t\t  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,\n\t\t\t\t\t\t  pi->pirlvl->prcheightexpn);\n\t\t\t\t\t\tpi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;\n\n\t\t\t\t\t\tassert(pi->prcno < pi->pirlvl->numprcs);\n\t\t\t\t\t\tfor (pi->lyrno = 0; pi->lyrno <\n\t\t\t\t\t\t  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {\n\t\t\t\t\t\t\tprclyrno = &pi->pirlvl->prclyrnos[pi->prcno];\n\t\t\t\t\t\t\tif (pi->lyrno >= *prclyrno) {\n\t\t\t\t\t\t\t\t++(*prclyrno);\n\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t}\nskip:\n\t\t\t\t\t\t\t;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\n\nstatic int jpc_pi_nextpcrl(register jpc_pi_t *pi)\n{\n\tint rlvlno;\n\tjpc_pirlvl_t *pirlvl;\n\tjpc_pchg_t *pchg;\n\tint prchind;\n\tint prcvind;\n\tint *prclyrno;\n\tint compno;\n\tjpc_picomp_t *picomp;\n\tint xstep;\n\tint ystep;\n\tuint_fast32_t trx0;\n\tuint_fast32_t try0;\n\tuint_fast32_t r;\n\tuint_fast32_t rpx;\n\tuint_fast32_t rpy;\n\n\tpchg = pi->pchg;\n\tif (!pi->prgvolfirst) {\n\t\tgoto skip;\n\t} else {\n\t\tpi->xstep = 0;\n\t\tpi->ystep = 0;\n\t\tfor (compno = 0, picomp = pi->picomps; compno < pi->numcomps;\n\t\t  ++compno, ++picomp) {\n\t\t\tfor (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <\n\t\t\t  picomp->numrlvls; ++rlvlno, ++pirlvl) {\n\t\t\t\txstep = picomp->hsamp * (1 <<\n\t\t\t\t  (pirlvl->prcwidthexpn + picomp->numrlvls -\n\t\t\t\t  rlvlno - 1));\n\t\t\t\tystep = picomp->vsamp * (1 <<\n\t\t\t\t  (pirlvl->prcheightexpn + picomp->numrlvls -\n\t\t\t\t  rlvlno - 1));\n\t\t\t\tpi->xstep = (!pi->xstep) ? xstep :\n\t\t\t\t  JAS_MIN(pi->xstep, xstep);\n\t\t\t\tpi->ystep = (!pi->ystep) ? ystep :\n\t\t\t\t  JAS_MIN(pi->ystep, ystep);\n\t\t\t}\n\t\t}\n\t\tpi->prgvolfirst = 0;\n\t}\n\n\tfor (pi->y = pi->ystart; pi->y < pi->yend; pi->y += pi->ystep -\n\t  (pi->y % pi->ystep)) {\n\t\tfor (pi->x = pi->xstart; pi->x < pi->xend; pi->x += pi->xstep -\n\t\t  (pi->x % pi->xstep)) {\n\t\t\tfor (pi->compno = pchg->compnostart, pi->picomp =\n\t\t\t  &pi->picomps[pi->compno]; pi->compno < pi->numcomps\n\t\t\t  && pi->compno < JAS_CAST(int, pchg->compnoend); ++pi->compno,\n\t\t\t  ++pi->picomp) {\n\t\t\t\tfor (pi->rlvlno = pchg->rlvlnostart,\n\t\t\t\t  pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];\n\t\t\t\t  pi->rlvlno < pi->picomp->numrlvls &&\n\t\t\t\t  pi->rlvlno < pchg->rlvlnoend; ++pi->rlvlno,\n\t\t\t\t  ++pi->pirlvl) {\n\t\t\t\t\tif (pi->pirlvl->numprcs == 0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tr = pi->picomp->numrlvls - 1 - pi->rlvlno;\n\t\t\t\t\ttrx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);\n\t\t\t\t\ttry0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);\n\t\t\t\t\trpx = r + pi->pirlvl->prcwidthexpn;\n\t\t\t\t\trpy = r + pi->pirlvl->prcheightexpn;\n\t\t\t\t\tif (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx))) ||\n\t\t\t\t\t  !(pi->x % (pi->picomp->hsamp << rpx))) &&\n\t\t\t\t\t  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy))) ||\n\t\t\t\t\t  !(pi->y % (pi->picomp->vsamp << rpy)))) {\n\t\t\t\t\t\tprchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp\n\t\t\t\t\t\t  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,\n\t\t\t\t\t\t  pi->pirlvl->prcwidthexpn);\n\t\t\t\t\t\tprcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp\n\t\t\t\t\t\t  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,\n\t\t\t\t\t\t  pi->pirlvl->prcheightexpn);\n\t\t\t\t\t\tpi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;\n\t\t\t\t\t\tassert(pi->prcno < pi->pirlvl->numprcs);\n\t\t\t\t\t\tfor (pi->lyrno = 0; pi->lyrno < pi->numlyrs &&\n\t\t\t\t\t\t  pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {\n\t\t\t\t\t\t\tprclyrno = &pi->pirlvl->prclyrnos[pi->prcno];\n\t\t\t\t\t\t\tif (pi->lyrno >= *prclyrno) {\n\t\t\t\t\t\t\t\t++(*prclyrno);\n\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t}\nskip:\n\t\t\t\t\t\t\t;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\n\nstatic int jpc_pi_nextcprl(register jpc_pi_t *pi)\n{\n\tint rlvlno;\n\tjpc_pirlvl_t *pirlvl;\n\tjpc_pchg_t *pchg;\n\tint prchind;\n\tint prcvind;\n\tint *prclyrno;\n\tuint_fast32_t trx0;\n\tuint_fast32_t try0;\n\tuint_fast32_t r;\n\tuint_fast32_t rpx;\n\tuint_fast32_t rpy;\n\n\tpchg = pi->pchg;\n\tif (!pi->prgvolfirst) {\n\t\tgoto skip;\n\t} else {\n\t\tpi->prgvolfirst = 0;\n\t}\n\n\tfor (pi->compno = pchg->compnostart, pi->picomp =\n\t  &pi->picomps[pi->compno]; pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno < pi->numcomps; ++pi->compno,\n\t  ++pi->picomp) {\n\t\tpirlvl = pi->picomp->pirlvls;\n\t\tpi->xstep = pi->picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<\n\t\t  (pirlvl->prcwidthexpn + pi->picomp->numrlvls - 1));\n\t\tpi->ystep = pi->picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<\n\t\t  (pirlvl->prcheightexpn + pi->picomp->numrlvls - 1));\n\t\tfor (rlvlno = 1, pirlvl = &pi->picomp->pirlvls[1];\n\t\t  rlvlno < pi->picomp->numrlvls; ++rlvlno, ++pirlvl) {\n\t\t\tpi->xstep = JAS_MIN(pi->xstep, pi->picomp->hsamp *\n\t\t\t  (JAS_CAST(uint_fast32_t, 1) << (pirlvl->prcwidthexpn +\n\t\t\t  pi->picomp->numrlvls - rlvlno - 1)));\n\t\t\tpi->ystep = JAS_MIN(pi->ystep, pi->picomp->vsamp *\n\t\t\t  (JAS_CAST(uint_fast32_t, 1) << (pirlvl->prcheightexpn +\n\t\t\t  pi->picomp->numrlvls - rlvlno - 1)));\n\t\t}\n\t\tfor (pi->y = pi->ystart; pi->y < pi->yend;\n\t\t  pi->y += pi->ystep - (pi->y % pi->ystep)) {\n\t\t\tfor (pi->x = pi->xstart; pi->x < pi->xend;\n\t\t\t  pi->x += pi->xstep - (pi->x % pi->xstep)) {\n\t\t\t\tfor (pi->rlvlno = pchg->rlvlnostart,\n\t\t\t\t  pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];\n\t\t\t\t  pi->rlvlno < pi->picomp->numrlvls && pi->rlvlno <\n\t\t\t\t  pchg->rlvlnoend; ++pi->rlvlno, ++pi->pirlvl) {\n\t\t\t\t\tif (pi->pirlvl->numprcs == 0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tr = pi->picomp->numrlvls - 1 - pi->rlvlno;\n\t\t\t\t\ttrx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);\n\t\t\t\t\ttry0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);\n\t\t\t\t\trpx = r + pi->pirlvl->prcwidthexpn;\n\t\t\t\t\trpy = r + pi->pirlvl->prcheightexpn;\n\t\t\t\t\tif (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx))) ||\n\t\t\t\t\t  !(pi->x % (pi->picomp->hsamp << rpx))) &&\n\t\t\t\t\t  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy))) ||\n\t\t\t\t\t  !(pi->y % (pi->picomp->vsamp << rpy)))) {\n\t\t\t\t\t\tprchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp\n\t\t\t\t\t\t  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,\n\t\t\t\t\t\t  pi->pirlvl->prcwidthexpn);\n\t\t\t\t\t\tprcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp\n\t\t\t\t\t\t  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,\n\t\t\t\t\t\t  pi->pirlvl->prcheightexpn);\n\t\t\t\t\t\tpi->prcno = prcvind *\n\t\t\t\t\t\t  pi->pirlvl->numhprcs +\n\t\t\t\t\t\t  prchind;\n\t\t\t\t\t\tassert(pi->prcno <\n\t\t\t\t\t\t  pi->pirlvl->numprcs);\n\t\t\t\t\t\tfor (pi->lyrno = 0; pi->lyrno <\n\t\t\t\t\t\t  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {\n\t\t\t\t\t\t\tprclyrno = &pi->pirlvl->prclyrnos[pi->prcno];\n\t\t\t\t\t\t\tif (pi->lyrno >= *prclyrno) {\n\t\t\t\t\t\t\t\t++(*prclyrno);\n\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t}\nskip:\n\t\t\t\t\t\t\t;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\n\nstatic void pirlvl_destroy(jpc_pirlvl_t *rlvl)\n{\n\tif (rlvl->prclyrnos) {\n\t\tjas_free(rlvl->prclyrnos);\n\t}\n}\n\nstatic void jpc_picomp_destroy(jpc_picomp_t *picomp)\n{\n\tint rlvlno;\n\tjpc_pirlvl_t *pirlvl;\n\tif (picomp->pirlvls) {\n\t\tfor (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <\n\t\t  picomp->numrlvls; ++rlvlno, ++pirlvl) {\n\t\t\tpirlvl_destroy(pirlvl);\n\t\t}\n\t\tjas_free(picomp->pirlvls);\n\t}\n}\n\nvoid jpc_pi_destroy(jpc_pi_t *pi)\n{\n\tjpc_picomp_t *picomp;\n\tint compno;\n\tif (pi->picomps) {\n\t\tfor (compno = 0, picomp = pi->picomps; compno < pi->numcomps;\n\t\t  ++compno, ++picomp) {\n\t\t\tjpc_picomp_destroy(picomp);\n\t\t}\n\t\tjas_free(pi->picomps);\n\t}\n\tif (pi->pchglist) {\n\t\tjpc_pchglist_destroy(pi->pchglist);\n\t}\n\tjas_free(pi);\n}\n\njpc_pi_t *jpc_pi_create0()\n{\n\tjpc_pi_t *pi;\n\tif (!(pi = jas_malloc(sizeof(jpc_pi_t)))) {\n\t\treturn 0;\n\t}\n\tpi->picomps = 0;\n\tpi->pchgno = 0;\n\tif (!(pi->pchglist = jpc_pchglist_create())) {\n\t\tjas_free(pi);\n\t\treturn 0;\n\t}\n\treturn pi;\n}\n\nint jpc_pi_addpchg(jpc_pi_t *pi, jpc_pocpchg_t *pchg)\n{\n\treturn jpc_pchglist_insert(pi->pchglist, -1, pchg);\n}\n\njpc_pchglist_t *jpc_pchglist_create()\n{\n\tjpc_pchglist_t *pchglist;\n\tif (!(pchglist = jas_malloc(sizeof(jpc_pchglist_t)))) {\n\t\treturn 0;\n\t}\n\tpchglist->numpchgs = 0;\n\tpchglist->maxpchgs = 0;\n\tpchglist->pchgs = 0;\n\treturn pchglist;\n}\n\nint jpc_pchglist_insert(jpc_pchglist_t *pchglist, int pchgno, jpc_pchg_t *pchg)\n{\n\tint i;\n\tint newmaxpchgs;\n\tjpc_pchg_t **newpchgs;\n\tif (pchgno < 0) {\n\t\tpchgno = pchglist->numpchgs;\n\t}\n\tif (pchglist->numpchgs >= pchglist->maxpchgs) {\n\t\tnewmaxpchgs = pchglist->maxpchgs + 128;\n\t\tif (!(newpchgs = jas_realloc2(pchglist->pchgs, newmaxpchgs,\n\t\t  sizeof(jpc_pchg_t *)))) {\n\t\t\treturn -1;\n\t\t}\n\t\tpchglist->maxpchgs = newmaxpchgs;\n\t\tpchglist->pchgs = newpchgs;\n\t}\n\tfor (i = pchglist->numpchgs; i > pchgno; --i) {\n\t\tpchglist->pchgs[i] = pchglist->pchgs[i - 1];\n\t}\n\tpchglist->pchgs[pchgno] = pchg;\n\t++pchglist->numpchgs;\n\treturn 0;\n}\n\njpc_pchg_t *jpc_pchglist_remove(jpc_pchglist_t *pchglist, int pchgno)\n{\n\tint i;\n\tjpc_pchg_t *pchg;\n\tassert(pchgno < pchglist->numpchgs);\n\tpchg = pchglist->pchgs[pchgno];\n\tfor (i = pchgno + 1; i < pchglist->numpchgs; ++i) {\n\t\tpchglist->pchgs[i - 1] = pchglist->pchgs[i];\n\t}\n\t--pchglist->numpchgs;\n\treturn pchg;\n}\n\njpc_pchg_t *jpc_pchg_copy(jpc_pchg_t *pchg)\n{\n\tjpc_pchg_t *newpchg;\n\tif (!(newpchg = jas_malloc(sizeof(jpc_pchg_t)))) {\n\t\treturn 0;\n\t}\n\t*newpchg = *pchg;\n\treturn newpchg;\n}\n\njpc_pchglist_t *jpc_pchglist_copy(jpc_pchglist_t *pchglist)\n{\n\tjpc_pchglist_t *newpchglist;\n\tjpc_pchg_t *newpchg;\n\tint pchgno;\n\tif (!(newpchglist = jpc_pchglist_create())) {\n\t\treturn 0;\n\t}\n\tfor (pchgno = 0; pchgno < pchglist->numpchgs; ++pchgno) {\n\t\tif (!(newpchg = jpc_pchg_copy(pchglist->pchgs[pchgno])) ||\n\t\t  jpc_pchglist_insert(newpchglist, -1, newpchg)) {\n\t\t\tjpc_pchglist_destroy(newpchglist);\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn newpchglist;\n}\n\nvoid jpc_pchglist_destroy(jpc_pchglist_t *pchglist)\n{\n\tint pchgno;\n\tif (pchglist->pchgs) {\n\t\tfor (pchgno = 0; pchgno < pchglist->numpchgs; ++pchgno) {\n\t\t\tjpc_pchg_destroy(pchglist->pchgs[pchgno]);\n\t\t}\n\t\tjas_free(pchglist->pchgs);\n\t}\n\tjas_free(pchglist);\n}\n\nvoid jpc_pchg_destroy(jpc_pchg_t *pchg)\n{\n\tjas_free(pchg);\n}\n\njpc_pchg_t *jpc_pchglist_get(jpc_pchglist_t *pchglist, int pchgno)\n{\n\treturn pchglist->pchgs[pchgno];\n}\n\nint jpc_pchglist_numpchgs(jpc_pchglist_t *pchglist)\n{\n\treturn pchglist->numpchgs;\n}\n\nint jpc_pi_init(jpc_pi_t *pi)\n{\n\tint compno;\n\tint rlvlno;\n\tint prcno;\n\tjpc_picomp_t *picomp;\n\tjpc_pirlvl_t *pirlvl;\n\tint *prclyrno;\n\n\tpi->prgvolfirst = 0;\n\tpi->valid = 0;\n\tpi->pktno = -1;\n\tpi->pchgno = -1;\n\tpi->pchg = 0;\n\n\tfor (compno = 0, picomp = pi->picomps; compno < pi->numcomps;\n\t  ++compno, ++picomp) {\n\t\tfor (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <\n\t\t  picomp->numrlvls; ++rlvlno, ++pirlvl) {\n\t\t\tfor (prcno = 0, prclyrno = pirlvl->prclyrnos;\n\t\t\t  prcno < pirlvl->numprcs; ++prcno, ++prclyrno) {\n\t\t\t\t*prclyrno = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n", "/*\n * Copyright (c) 1999-2000 Image Power, Inc. and the University of\n *   British Columbia.\n * Copyright (c) 2001-2002 Michael David Adams.\n * All rights reserved.\n */\n\n/* __START_OF_JASPER_LICENSE__\n * \n * JasPer License Version 2.0\n * \n * Copyright (c) 2001-2006 Michael David Adams\n * Copyright (c) 1999-2000 Image Power, Inc.\n * Copyright (c) 1999-2000 The University of British Columbia\n * \n * All rights reserved.\n * \n * Permission is hereby granted, free of charge, to any person (the\n * \"User\") obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge,\n * publish, distribute, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n * \n * 1.  The above copyright notices and this permission notice (which\n * includes the disclaimer below) shall be included in all copies or\n * substantial portions of the Software.\n * \n * 2.  The name of a copyright holder shall not be used to endorse or\n * promote products derived from the Software without specific prior\n * written permission.\n * \n * THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS\n * LICENSE.  NO USE OF THE SOFTWARE IS AUTHORIZED HEREUNDER EXCEPT UNDER\n * THIS DISCLAIMER.  THE SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS\n * \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\n * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS.  IN NO\n * EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL\n * INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING\n * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\n * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION\n * WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  NO ASSURANCES ARE\n * PROVIDED BY THE COPYRIGHT HOLDERS THAT THE SOFTWARE DOES NOT INFRINGE\n * THE PATENT OR OTHER INTELLECTUAL PROPERTY RIGHTS OF ANY OTHER ENTITY.\n * EACH COPYRIGHT HOLDER DISCLAIMS ANY LIABILITY TO THE USER FOR CLAIMS\n * BROUGHT BY ANY OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL\n * PROPERTY RIGHTS OR OTHERWISE.  AS A CONDITION TO EXERCISING THE RIGHTS\n * GRANTED HEREUNDER, EACH USER HEREBY ASSUMES SOLE RESPONSIBILITY TO SECURE\n * ANY OTHER INTELLECTUAL PROPERTY RIGHTS NEEDED, IF ANY.  THE SOFTWARE\n * IS NOT FAULT-TOLERANT AND IS NOT INTENDED FOR USE IN MISSION-CRITICAL\n * SYSTEMS, SUCH AS THOSE USED IN THE OPERATION OF NUCLEAR FACILITIES,\n * AIRCRAFT NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL\n * SYSTEMS, DIRECT LIFE SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH\n * THE FAILURE OF THE SOFTWARE OR SYSTEM COULD LEAD DIRECTLY TO DEATH,\n * PERSONAL INJURY, OR SEVERE PHYSICAL OR ENVIRONMENTAL DAMAGE (\"HIGH\n * RISK ACTIVITIES\").  THE COPYRIGHT HOLDERS SPECIFICALLY DISCLAIM ANY\n * EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR HIGH RISK ACTIVITIES.\n * \n * __END_OF_JASPER_LICENSE__\n */\n\n/*\n * Tier-2 Coding Library\n *\n * $Id$\n */\n\n#ifndef JPC_T2COD_H\n#define\tJPC_T2COD_H\n\n/******************************************************************************\\\n* Includes.\n\\******************************************************************************/\n\n#include \"jpc_cs.h\"\n\n/******************************************************************************\\\n* Types.\n\\******************************************************************************/\n\n/* Progression change list. */\n\ntypedef struct {\n\n\t/* The number of progression changes. */\n\tint numpchgs;\n\n\t/* The maximum number of progression changes that can be accomodated\n\t  without growing the progression change array. */\n\tint maxpchgs;\n\n\t/* The progression changes. */\n\tjpc_pchg_t **pchgs;\n\n} jpc_pchglist_t;\n\n/* Packet iterator per-resolution-level information. */\n\ntypedef struct {\n\n\t/* The number of precincts. */\n\tint numprcs;\n\n\t/* The last layer processed for each precinct. */\n\tint *prclyrnos;\n\n\t/* The precinct width exponent. */\n\tint prcwidthexpn;\n\n\t/* The precinct height exponent. */\n\tint prcheightexpn;\n\n\t/* The number of precincts spanning the resolution level in the horizontal\n\t  direction. */\n\tint numhprcs;\n\n} jpc_pirlvl_t;\n\n/* Packet iterator per-component information. */\n\ntypedef struct {\n\n\t/* The number of resolution levels. */\n\tint numrlvls;\n\n\t/* The per-resolution-level information. */\n\tjpc_pirlvl_t *pirlvls;\n\n\t/* The horizontal sampling period. */\n\tuint_fast32_t hsamp;\n\n\t/* The vertical sampling period. */\n\tuint_fast32_t vsamp;\n\n} jpc_picomp_t;\n\n/* Packet iterator class. */\n\ntypedef struct {\n\n\t/* The number of layers. */\n\tint numlyrs;\n\n\t/* The number of resolution levels. */\n\tint maxrlvls;\n\n\t/* The number of components. */\n\tint numcomps;\n\n\t/* The per-component information. */\n\tjpc_picomp_t *picomps;\n\n\t/* The current component. */\n\tjpc_picomp_t *picomp;\n\n\t/* The current resolution level. */\n\tjpc_pirlvl_t *pirlvl;\n\n\t/* The number of the current component. */\n\tint compno;\n\n\t/* The number of the current resolution level. */\n\tint rlvlno;\n\n\t/* The number of the current precinct. */\n\tint prcno;\n\n\t/* The number of the current layer. */\n\tint lyrno;\n\n\t/* The x-coordinate of the current position. */\n\tuint_fast32_t x;\n\n\t/* The y-coordinate of the current position. */\n\tuint_fast32_t y;\n\n\t/* The horizontal step size. */\n\tuint_fast32_t xstep;\n\n\t/* The vertical step size. */\n\tuint_fast32_t ystep;\n\n\t/* The x-coordinate of the top-left corner of the tile on the reference\n\t  grid. */\n\tuint_fast32_t xstart;\n\n\t/* The y-coordinate of the top-left corner of the tile on the reference\n\t  grid. */\n\tuint_fast32_t ystart;\n\n\t/* The x-coordinate of the bottom-right corner of the tile on the\n\t  reference grid (plus one). */\n\tuint_fast32_t xend;\n\n\t/* The y-coordinate of the bottom-right corner of the tile on the\n\t  reference grid (plus one). */\n\tuint_fast32_t yend;\n\n\t/* The current progression change. */\n\tjpc_pchg_t *pchg;\n\n\t/* The progression change list. */\n\tjpc_pchglist_t *pchglist;\n\n\t/* The progression to use in the absense of explicit specification. */\n\tjpc_pchg_t defaultpchg;\n\n\t/* The current progression change number. */\n\tint pchgno;\n\n\t/* Is this the first time in the current progression volume? */\n\tbool prgvolfirst;\n\n\t/* Is the current iterator value valid? */\n\tbool valid;\n\n\t/* The current packet number. */\n\tint pktno;\n\n} jpc_pi_t;\n\n/******************************************************************************\\\n* Functions/macros for packet iterators.\n\\******************************************************************************/\n\n/* Create a packet iterator. */\njpc_pi_t *jpc_pi_create0(void);\n\n/* Destroy a packet iterator. */\nvoid jpc_pi_destroy(jpc_pi_t *pi);\n\n/* Add a progression change to a packet iterator. */\nint jpc_pi_addpchg(jpc_pi_t *pi, jpc_pocpchg_t *pchg);\n\n/* Prepare a packet iterator for iteration. */\nint jpc_pi_init(jpc_pi_t *pi);\n\n/* Set the iterator to the first packet. */\nint jpc_pi_begin(jpc_pi_t *pi);\n\n/* Proceed to the next packet in sequence. */\nint jpc_pi_next(jpc_pi_t *pi);\n\n/* Get the index of the current packet. */\n#define\tjpc_pi_getind(pi)\t((pi)->pktno)\n\n/* Get the component number of the current packet. */\n#define jpc_pi_cmptno(pi)\t(assert(pi->valid), (pi)->compno)\n\n/* Get the resolution level of the current packet. */\n#define jpc_pi_rlvlno(pi)\t(assert(pi->valid), (pi)->rlvlno)\n\n/* Get the layer number of the current packet. */\n#define jpc_pi_lyrno(pi)\t(assert(pi->valid), (pi)->lyrno)\n\n/* Get the precinct number of the current packet. */\n#define jpc_pi_prcno(pi)\t(assert(pi->valid), (pi)->prcno)\n\n/* Get the progression order for the current packet. */\n#define jpc_pi_prg(pi)\t(assert(pi->valid), (pi)->pchg->prgord)\n\n/******************************************************************************\\\n* Functions/macros for progression change lists.\n\\******************************************************************************/\n\n/* Create a progression change list. */\njpc_pchglist_t *jpc_pchglist_create(void);\n\n/* Destroy a progression change list. */\nvoid jpc_pchglist_destroy(jpc_pchglist_t *pchglist);\n\n/* Insert a new element into a progression change list. */\nint jpc_pchglist_insert(jpc_pchglist_t *pchglist, int pchgno, jpc_pchg_t *pchg);\n\n/* Remove an element from a progression change list. */\njpc_pchg_t *jpc_pchglist_remove(jpc_pchglist_t *pchglist, int pchgno);\n\n/* Get an element from a progression change list. */\njpc_pchg_t *jpc_pchglist_get(jpc_pchglist_t *pchglist, int pchgno);\n\n/* Copy a progression change list. */\njpc_pchglist_t *jpc_pchglist_copy(jpc_pchglist_t *pchglist);\n\n/* Get the number of elements in a progression change list. */\nint jpc_pchglist_numpchgs(jpc_pchglist_t *pchglist);\n\n/******************************************************************************\\\n* Functions/macros for progression changes.\n\\******************************************************************************/\n\n/* Destroy a progression change. */\nvoid jpc_pchg_destroy(jpc_pchg_t *pchg);\n\n/* Copy a progression change. */\njpc_pchg_t *jpc_pchg_copy(jpc_pchg_t *pchg);\n\n#endif\n"], "filenames": ["src/libjasper/jpc/jpc_t2cod.c", "src/libjasper/jpc/jpc_t2cod.h"], "buggy_code_start_loc": [435, 132], "buggy_code_end_loc": [447, 200], "fixing_code_start_loc": [435, 132], "fixing_code_end_loc": [447, 200], "type": "CWE-190", "message": "Integer overflow in the jpc_pi_nextcprl function in jpc_t2cod.c in JasPer before 1.900.20 allows remote attackers to have unspecified impact via a crafted file, which triggers use of an uninitialized value.", "other": {"cve": {"id": "CVE-2016-10251", "sourceIdentifier": "cve@mitre.org", "published": "2017-03-15T14:59:00.387", "lastModified": "2018-01-05T02:30:32.587", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Integer overflow in the jpc_pi_nextcprl function in jpc_t2cod.c in JasPer before 1.900.20 allows remote attackers to have unspecified impact via a crafted file, which triggers use of an uninitialized value."}, {"lang": "es", "value": "Desbordamiento de entero en la funci\u00f3n jpc_pi_nextcprl en jpc_t2cod.c en JasPer en versiones anteriores a 1.900.20 permite a atacantes remotos tener impacto no especificado a trav\u00e9s de un archivo manipulado, lo que desencadena el uso de un valor no inicializado."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-190"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jasper_project:jasper:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.900.19", "matchCriteriaId": "E148EBE3-3B2D-482F-B589-B49D603930B1"}]}]}], "references": [{"url": "http://www.debian.org/security/2017/dsa-3827", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/bid/97584", "source": "cve@mitre.org"}, {"url": "https://access.redhat.com/errata/RHSA-2017:1208", "source": "cve@mitre.org"}, {"url": "https://blogs.gentoo.org/ago/2016/11/04/jasper-use-of-uninitialized-value-in-jpc_pi_nextcprl-jpc_t2cod-c/", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/mdadams/jasper/commit/1f0dfe5a42911b6880a1445f13f6d615ddb55387", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpuapr2020.html", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/mdadams/jasper/commit/1f0dfe5a42911b6880a1445f13f6d615ddb55387"}}