{"buggy_code": ["<?php\n/*\nPlugin Name: Gravity Forms DPS PxPay\nPlugin URI: http://shop.webaware.com.au/downloads/gravity-forms-dps-pxpay/\nDescription: Integrates Gravity Forms with DPS PxPay payment gateway, enabling end users to purchase goods and services through Gravity Forms.\nVersion: 1.4.2\nAuthor: WebAware\nAuthor URI: http://webaware.com.au/\n*/\n\n/*\ncopyright (c) 2013-2014 WebAware Pty Ltd (email : support@webaware.com.au)\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\nas published by the Free Software Foundation; either version 2\nof the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n*/\n\nif (!defined('ABSPATH')) {\n\texit;\n}\n\ndefine('GFDPSPXPAY_PLUGIN_ROOT', dirname(__FILE__) . '/');\ndefine('GFDPSPXPAY_PLUGIN_NAME', basename(dirname(__FILE__)) . '/' . basename(__FILE__));\ndefine('GFDPSPXPAY_PLUGIN_FILE', __FILE__);\ndefine('GFDPSPXPAY_PLUGIN_OPTIONS', 'gfdpspxpay_plugin');\ndefine('GFDPSPXPAY_PLUGIN_VERSION', '1.4.2');\n\n// custom post types\ndefine('GFDPSPXPAY_TYPE_FEED', 'gfdpspxpay_feed');\n\n/**\n* autoload classes as/when needed\n*\n* @param string $class_name name of class to attempt to load\n*/\nfunction gfdpspxpay_autoload($class_name) {\n\tstatic $classMap = array (\n\t\t'GFDpsPxPayAdmin'\t\t\t\t\t\t=> 'includes/class.GFDpsPxPayAdmin.php',\n\t\t'GFDpsPxPayFeed'\t\t\t\t\t\t=> 'includes/class.GFDpsPxPayFeed.php',\n\t\t'GFDpsPxPayFeedAdmin'\t\t\t\t\t=> 'includes/class.GFDpsPxPayFeedAdmin.php',\n\t\t'GFDpsPxPayFormData'\t\t\t\t\t=> 'includes/class.GFDpsPxPayFormData.php',\n\t\t'GFDpsPxPayPayment'\t\t\t\t\t\t=> 'includes/class.GFDpsPxPayPayment.php',\n\t\t'GFDpsPxPayPlugin'\t\t\t\t\t\t=> 'includes/class.GFDpsPxPayPlugin.php',\n\t\t'GFDpsPxPayResult'\t\t\t\t\t\t=> 'includes/class.GFDpsPxPayResult.php',\n\t);\n\n\tif (isset($classMap[$class_name])) {\n\t\trequire GFDPSPXPAY_PLUGIN_ROOT . $classMap[$class_name];\n\t}\n}\nspl_autoload_register('gfdpspxpay_autoload');\n\n// instantiate the plug-in\nGFDpsPxPayPlugin::getInstance();\n", "<?php\n\n/**\n* class for admin screens\n*/\nclass GFDpsPxPayAdmin {\n\n\tprotected $plugin;\n\n\t/**\n\t* @param GFDpsPxPayPlugin $plugin\n\t*/\n\tpublic function __construct($plugin) {\n\t\t$this->plugin = $plugin;\n\n\t\t// admin hooks\n\t\tadd_action('admin_init', array($this, 'adminInit'));\n\t\tadd_action('admin_notices', array($this, 'checkPrerequisites'));\n\t\tadd_action('plugin_action_links_' . GFDPSPXPAY_PLUGIN_NAME, array($this, 'addPluginActionLinks'));\n\t\tadd_filter('plugin_row_meta', array($this, 'addPluginDetailsLinks'), 10, 2);\n\t\tadd_filter('admin_enqueue_scripts', array($this, 'enqueueScripts'));\n\n\t\t// only if Gravity Forms is activated\n\t\tif (class_exists('GFCommon')) {\n\n\t\t\t// GravityForms hooks\n\t\t\tadd_filter('gform_addon_navigation', array($this, 'gformAddonNavigation'));\n\t\t\tadd_action('forms_page_gf_settings', array($this, 'adminPageGfSettings'));\n\n\t\t\t// tell Gravity Forms not to put payment details into info (i.e. do put them into the new payment details box!)\n\t\t\tadd_filter('gform_enable_entry_info_payment_details', '__return_false');\n\n\t\t\t// handle the new Payment Details box if supported\n\t\t\tif (version_compare(GFCommon::$version, '1.8.7.99999', '<')) {\n\t\t\t\t// pre-v1.8.8 settings\n\t\t\t\tadd_action('gform_entry_info', array($this, 'gformPaymentDetails'), 10, 2);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// post-v1.8.8 settings\n\t\t\t\tadd_action('gform_payment_details', array($this, 'gformPaymentDetails'), 10, 2);\n\t\t\t}\n\t\t}\n\n\t\t// AJAX actions\n\t\tadd_action('wp_ajax_gfdpspxpay_form_fields', array($this, 'ajaxGfFormFields'));\n\t\tadd_action('wp_ajax_gfdpspxpay_form_has_feed', array($this, 'ajaxGfFormHasFeed'));\n\t}\n\n\t/**\n\t* test whether GravityForms plugin is installed and active\n\t* @return boolean\n\t*/\n\tpublic static function isGfActive() {\n\t\treturn class_exists('RGForms');\n\t}\n\n\t/**\n\t* handle admin init action\n\t*/\n\tpublic function adminInit() {\n\t\tglobal $typenow;\n\n\t\t// register plugin settings\n\t\tadd_settings_section(GFDPSPXPAY_PLUGIN_OPTIONS, false, false, GFDPSPXPAY_PLUGIN_OPTIONS);\n\t\tregister_setting(GFDPSPXPAY_PLUGIN_OPTIONS, GFDPSPXPAY_PLUGIN_OPTIONS, array($this, 'settingsValidate'));\n\n\t\t// when editing pages, $typenow isn't set until later!\n\t\t// kludge thanks to WooCommerce :)\n\t\tif (empty($typenow) && !empty($_GET['post'])) {\n\t\t\t$post = get_post($_GET['post']);\n\t\t\t$typenow = $post->post_type;\n\t\t}\n\n\t\tif ($typenow && $typenow == GFDPSPXPAY_TYPE_FEED) {\n\t\t\tnew GFDpsPxPayFeedAdmin($this->plugin);\n\t\t}\n\n\t\tif (isset($_GET['page'])) {\n\t\t\tswitch ($_GET['page']) {\n\t\t\t\tcase 'gf_settings':\n\t\t\t\t\t// add our settings page to the Gravity Forms settings menu\n\t\t\t\t\tRGForms::add_settings_page('DPS PxPay', array($this, 'optionsAdmin'));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'gfdpspxpay-feeds':\n\t\t\t\t\twp_redirect(admin_url('edit.php?post_type=' . GFDPSPXPAY_TYPE_FEED));\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* enqueue our admin stylesheet\n\t*/\n\tpublic function enqueueScripts() {\n\t\t$ver = defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ? time() : GFDPSPXPAY_PLUGIN_VERSION;\n\t\twp_enqueue_style('gfdpspxpay-admin', \"{$this->plugin->urlBase}css/admin.css\", false, $ver);\n\t}\n\n\t/**\n\t* check for required prerequisites, tell admin if any are missing\n\t*/\n\tpublic function checkPrerequisites() {\n\t\t// need at least PHP 5.2.11 for libxml_disable_entity_loader()\n\t\t$php_min = '5.2.11';\n\t\tif (version_compare(PHP_VERSION, $php_min, '<')) {\n\t\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/requires-php.php';\n\t\t}\n\n\t\t// need these PHP extensions too\n\t\t$prereqs = array('libxml', 'SimpleXML', 'xmlwriter');\n\t\t$missing = array();\n\t\tforeach ($prereqs as $ext) {\n\t\t\tif (!extension_loaded($ext)) {\n\t\t\t\t$missing[] = $ext;\n\t\t\t}\n\t\t}\n\t\tif (!empty($missing)) {\n\t\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/requires-extensions.php';\n\t\t}\n\n\t\t// and of course, we need Gravity Forms\n\t\tif (!self::isGfActive()) {\n\t\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/requires-gravity-forms.php';\n\t\t}\n\t\telseif (GFDpsPxPayPlugin::versionCompareGF(GFDpsPxPayPlugin::MIN_VERSION_GF, '<')) {\n\t\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/requires-gravity-forms-upgrade.php';\n\t\t}\n\t}\n\n\t/**\n\t* action hook for adding plugin action links\n\t*/\n\tpublic function addPluginActionLinks($links) {\n\t\t// add settings link, but only if GravityForms plugin is active\n\t\tif (self::isGfActive()) {\n\t\t\t$settings_link = sprintf('<a href=\"%s\">Settings</a>', admin_url('admin.php?page=gf_settings&subview=DPS+PxPay'));\n\t\t\tarray_unshift($links, $settings_link);\n\t\t}\n\n\t\treturn $links;\n\t}\n\n\t/**\n\t* action hook for adding plugin details links\n\t*/\n\tpublic static function addPluginDetailsLinks($links, $file) {\n\t\tif ($file == GFDPSPXPAY_PLUGIN_NAME) {\n\t\t\t$links[] = '<a href=\"http://wordpress.org/support/plugin/gravity-forms-dps-pxpay\">' . __('Get help') . '</a>';\n\t\t\t$links[] = '<a href=\"http://wordpress.org/plugins/gravity-forms-dps-pxpay/\">' . __('Rating') . '</a>';\n\t\t\t$links[] = '<a href=\"http://shop.webaware.com.au/downloads/gravity-forms-dps-pxpay/\">' . __('Donate') . '</a>';\n\t\t}\n\n\t\treturn $links;\n\t}\n\n\t/**\n\t* filter hook for building GravityForms navigation\n\t* @param array $menus\n\t* @return array\n\t*/\n\tpublic function gformAddonNavigation($menus) {\n\t\t// add menu item for feeds (NB: adds a link that is redirected to feeds post editor on admin_init action)\n\t\t$menus[] = array('name' => 'gfdpspxpay-feeds', 'label' => 'DPS PxPay', 'callback' => array($this, 'feedsAdmin'), 'permission' => 'manage_options');\n\n        return $menus;\n\t}\n\n\t/**\n\t* clean up settings-updated from settings menu links (put there by settings API because of our settings page!)\n\t*/\n\tpublic function adminPageGfSettings() {\n\t\tparse_str($_SERVER['QUERY_STRING'], $qs);\n\t\tif (isset($qs['settings-updated']) && $qs['settings-updated']) {\n\t\t\t$_SERVER['REQUEST_URI'] = remove_query_arg('settings-updated', $_SERVER['REQUEST_URI']);\n\t\t}\n\t}\n\n\t/**\n\t* action hook for building the entry details view\n\t* @param int $form_id\n\t* @param array $lead\n\t*/\n\tpublic function gformPaymentDetails($form_id, $lead) {\n\t\t$payment_gateway = gform_get_meta($lead['id'], 'payment_gateway');\n\t\tif ($payment_gateway == 'gfdpspxpay') {\n\t\t\t$authCode = gform_get_meta($lead['id'], 'authcode');\n\t\t\tif ($authCode) {\n\t\t\t\techo 'Auth Code: ', esc_html($authCode), \"<br /><br />\\n\";\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* action hook for processing admin menu item\n\t*/\n\tpublic function optionsAdmin() {\n\t\t$min = defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ? '' : '.min';\n\t\t$ver = defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ? time() : GFDPSPXPAY_PLUGIN_VERSION;\n\t\twp_enqueue_script('gfdpspxpay-options', \"{$this->plugin->urlBase}js/options-admin$min.js\", array('jquery'), $ver, true);\n\n\t\t$options = $this->plugin->options;\n\t\trequire GFDPSPXPAY_PLUGIN_ROOT . 'views/admin-settings.php';\n\t}\n\n\t/**\n\t* action hook for processing feeds menu item\n\t*/\n\tpublic function feedsAdmin() {\n\t\t// actually handled via redirect on init action...\n\t\t//~ $feedsURL = 'edit.php?post_type=' . GFDPSPXPAY_TYPE_FEED;\n\t}\n\n\t/**\n\t* validate settings on save\n\t* @param array $input\n\t* @return array\n\t*/\n\tpublic function settingsValidate($input) {\n\t\t$output['userID']\t\t\t= trim($input['userID']);\n\t\t$output['userKey']\t\t\t= trim($input['userKey']);\n\t\t$output['testID']\t\t\t= trim($input['testID']);\n\t\t$output['testKey']\t\t\t= trim($input['testKey']);\n\t\t$output['useTest']\t\t\t= empty($input['useTest']) ? 0 : 1;\n\t\t$output['apiVersion']\t\t= empty($input['apiVersion']) ? 1 : absint($input['apiVersion']);\n\t\t$output['sslVerifyPeer']\t= 1;\t\t// always set (for now anyway!)\n\n\t\tif (empty($output['userID'])) {\n\t\t\t$msg = \"Please enter the DPS user ID.\";\n\t\t\tadd_settings_error(GFDPSPXPAY_PLUGIN_OPTIONS, '', $msg);\n\t\t}\n\n\t\tif (empty($output['userKey'])) {\n\t\t\t$msg = \"Please enter the DPS user key.\";\n\t\t\tadd_settings_error(GFDPSPXPAY_PLUGIN_OPTIONS, '', $msg);\n\t\t}\n\n\t\tif ($output['useTest']) {\n\t\t\tif (empty($output['testID'])) {\n\t\t\t\t$msg = \"Please enter the DPS test ID.\";\n\t\t\t\tadd_settings_error(GFDPSPXPAY_PLUGIN_OPTIONS, '', $msg);\n\t\t\t}\n\n\t\t\tif (empty($output['testKey'])) {\n\t\t\t\t$msg = \"Please enter the DPS test key.\";\n\t\t\t\tadd_settings_error(GFDPSPXPAY_PLUGIN_OPTIONS, '', $msg);\n\t\t\t}\n\t\t}\n\n\t\treturn $output;\n\t}\n\n\t/**\n\t* AJAX action to check for GF form already has feed, returning feed ID\n\t*/\n\tpublic function ajaxGfFormHasFeed() {\n\t\t$formID = isset($_GET['id']) ? $_GET['id'] : 0;\n\t\tif (!$formID) {\n\t\t\tdie(\"Bad form ID: $formID\");\n\t\t}\n\n\t\t$feed = GFDpsPxPayFeed::getFormFeed($formID);\n\t\techo $feed ? $feed->ID : 0;\n\t\texit;\n\t}\n\n\t/**\n\t* AJAX action for getting a list of form fields for a form\n\t*/\n\tpublic function ajaxGfFormFields() {\n\t\t$formID = isset($_GET['id']) ? $_GET['id'] : 0;\n\t\tif (!$formID) {\n\t\t\tdie(\"Bad form ID: $formID\");\n\t\t}\n\n\t\t$fields = GFDpsPxPayFeedAdmin::getFormFields($formID);\n\t\t$html = GFDpsPxPayFeedAdmin::selectFields('', $fields);\n\n\t\techo $html;\n\t\texit;\n\t}\n}\n", "<?php\n\n/**\n* Feed admin\n*/\nclass GFDpsPxPayFeedAdmin {\n\n\tprotected $plugin;\t\t\t\t\t\t\t// handle to the plugin object\n\n\t/**\n\t* @param GFDpsPxPayPlugin $plugin handle to the plugin object\n\t*/\n\tpublic function __construct($plugin) {\n\t\t$this->plugin = $plugin;\n\n\t\tadd_filter('wp_print_scripts', array($this, 'removeScripts'));\n\t\tadd_filter('parent_file', array($this, 'filterParentFile'));\n\t\tadd_filter('views_edit-'.GFDPSPXPAY_TYPE_FEED, array($this, 'filterViewsEdit'));\n\t\tadd_action('add_meta_boxes_'.GFDPSPXPAY_TYPE_FEED, array($this, 'actionAddMetaBoxes'));\n\t\tadd_action('save_post', array($this, 'saveCustomFields'), 10, 2);\n\t\tadd_filter('manage_'.GFDPSPXPAY_TYPE_FEED.'_posts_columns', array($this, 'filterManageColumns'));\n\t\tadd_filter('post_row_actions', array($this, 'filterPostRowActions'), 10, 2);\n\t\tadd_filter('wp_insert_post_data', array($this, 'filterInsertPostData'), 10, 2);\n\t\tadd_filter('post_updated_messages', array($this, 'filterPostUpdatedMessages'));\n\t\tadd_filter('parse_query', array($this, 'adminPostOrder'));\n\n\t\t$min = defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ? '' : '.min';\n\t\t$ver = defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ? time() : GFDPSPXPAY_PLUGIN_VERSION;\n\t\twp_enqueue_script('gfdpspxpay-feed-admin', \"{$this->plugin->urlBase}js/feed-admin$min.js\", array('jquery'), $ver, true);\n\t}\n\n\t/**\n\t* remove some scripts we don't want loaded\n\t*/\n\tpublic function removeScripts() {\n\t\t// stop WordPress SEO breaking our tooltips!\n\t\twp_dequeue_script('wp-seo-metabox');\n\t\twp_dequeue_script('jquery-qtip');\n\t}\n\n\t/**\n\t* tell WordPress admin that Gravity Forms menu is parent page\n\t* @param string $parent_file\n\t* @return string\n\t*/\n\tpublic function filterParentFile($parent_file) {\n\t\tglobal $submenu_file;\n\n\t\t// set parent menu for filter return\n\t\t$parent_file = 'gf_edit_forms';\n\n\t\t// set submenu by side effect\n\t\t$submenu_file = 'gfdpspxpay-feeds';\n\n\t\treturn $parent_file;\n\t}\n\n\t/**\n\t* remove views we don't need from post list\n\t* @param array $views\n\t* @return array\n\t*/\n\tpublic function filterViewsEdit($views) {\n\t\tunset($views['publish']);\n\t\tunset($views['draft']);\n\n\t\treturn $views;\n\t}\n\n\t/**\n\t* add meta boxes for custom fields\n\t* @param WP_Post $post\n\t*/\n\tpublic function actionAddMetaBoxes($post) {\n\t\ttry {\n\t\t\t$feed = new GFDpsPxPayFeed();\n\t\t\tif ($post && $post->ID) {\n\t\t\t\t$feed->loadFromPost($post);\n\t\t\t}\n\t\t}\n\t\tcatch (GFDpsPxPayException $e) {\n\t\t\t// NOP -- we'll have an empty feed\n\t\t}\n\n\t\tadd_meta_box('meta_'.GFDPSPXPAY_TYPE_FEED.'_form', 'Gravity Form', array($this, 'metaboxForm'),\n\t\t\tGFDPSPXPAY_TYPE_FEED, 'normal', 'high', array('feed' => $feed));\n\t\tadd_meta_box('meta_'.GFDPSPXPAY_TYPE_FEED.'_fields', 'Map Form to Transaction', array($this, 'metaboxFields'),\n\t\t\tGFDPSPXPAY_TYPE_FEED, 'normal', 'high', array('feed' => $feed));\n\t\tadd_meta_box('meta_'.GFDPSPXPAY_TYPE_FEED.'_urls', 'Redirect URLs', array($this, 'metaboxURLs'),\n\t\t\tGFDPSPXPAY_TYPE_FEED, 'normal', 'high', array('feed' => $feed));\n\t\tadd_meta_box('meta_'.GFDPSPXPAY_TYPE_FEED.'_opts', 'Options', array($this, 'metaboxOpts'),\n\t\t\tGFDPSPXPAY_TYPE_FEED, 'normal', 'high', array('feed' => $feed));\n\t\tadd_meta_box('meta_'.GFDPSPXPAY_TYPE_FEED.'_list', 'Return to List', array($this, 'metaboxList'),\n\t\t\tGFDPSPXPAY_TYPE_FEED, 'side', 'low', array('feed' => $feed));\n\n\t\t// replace standard Publish box with a custom one\n\t\tremove_meta_box('submitdiv', GFDPSPXPAY_TYPE_FEED, 'side');\n\t\tadd_meta_box('meta_'.GFDPSPXPAY_TYPE_FEED.'_submit', 'Save', array($this, 'metaboxSave'),\n\t\t\tGFDPSPXPAY_TYPE_FEED, 'side', 'high', array('feed' => $feed));\n\t}\n\n\t/**\n\t* metabox for Return to List link\n\t* @param WP_Post $post\n\t* @param array $metabox has metabox id, title, callback, and args elements.\n\t*/\n\tpublic function metaboxList($post, $metabox) {\n\t\t$feedsURL = 'edit.php?post_type=' . GFDPSPXPAY_TYPE_FEED;\n\t\techo \"<a href=\\\"$feedsURL\\\">Click to return to list</a>.\\n\";\n\t}\n\n\t/**\n\t* metabox for custom save/publish\n\t* @param WP_Post $post\n\t* @param array $metabox has metabox id, title, callback, and args elements.\n\t*/\n\tpublic function metaboxSave($post, $metabox) {\n\t\tglobal $action;\n\n\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/metabox-save.php';\n\t}\n\n\t/**\n\t* metabox for Gravity Form field, only listing forms that don't have a feed or are current feed's form\n\t* @param WP_Post $post\n\t* @param array $metabox has metabox id, title, callback, and args elements.\n\t*/\n\tpublic function metaboxForm($post, $metabox) {\n\t\t$feed = $metabox['args']['feed'];\n\t\t$forms = GFFormsModel::get_forms();\n\n\t\t$feeds = GFDpsPxPayFeed::getList();\n\t\t$feedMap = array();\n\t\tforeach ($feeds as $f) {\n\t\t\t$feedMap[$f->FormID] = 1;\n\t\t}\n\n\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/metabox-form.php';\n\t}\n\n\t/**\n\t* metabox for Redirect URLs\n\t* @param WP_Post $post\n\t* @param array $metabox has metabox id, title, callback, and args elements.\n\t*/\n\tpublic function metaboxURLs($post, $metabox) {\n\t\t$feed = $metabox['args']['feed'];\n\n\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/metabox-urls.php';\n\t}\n\n\t/**\n\t* metabox for options\n\t* @param WP_Post $post\n\t* @param array $metabox has metabox id, title, callback, and args elements.\n\t*/\n\tpublic function metaboxOpts($post, $metabox) {\n\t\t$feed = $metabox['args']['feed'];\n\n\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/metabox-options.php';\n\t}\n\n\t/**\n\t* metabox for Fields to Map\n\t* @param WP_Post $post\n\t* @param array $metabox has metabox id, title, callback, and args elements.\n\t*/\n\tpublic function metaboxFields($post, $metabox) {\n\t\twp_nonce_field('save', GFDPSPXPAY_TYPE_FEED.'_wpnonce', false);\n\n\t\t$feed = $metabox['args']['feed'];\n\t\t$fields = $feed->FormID ? self::getFormFields($feed->FormID) : false;\n\n\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/metabox-fields.php';\n\t}\n\n\t/**\n\t* filter insert fields, to set post title from form name\n\t* @param array $data the post insert data\n\t* @param array $postarr data from the form post\n\t* @return array\n\t*/\n\tpublic function filterInsertPostData($data, $postarr) {\n\t\t$formID = isset($postarr['_gfdpspxpay_form']) ? intval($postarr['_gfdpspxpay_form']) : 0;\n\t\tif ($formID) {\n\t\t\t$form = GFFormsModel::get_form($formID);\n\t\t\t$data['post_title'] = $form->title;\n\t\t\t$data['post_name'] = sanitize_title($form->title);\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t* save custom fields\n\t*/\n\tpublic function saveCustomFields($postID) {\n\t\t// Check whether this is an auto save routine. If it is, our form has not been submitted, so we don't want to do anything\n\t\tif (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE)\n\t\t\treturn $postID;\n\n\t\tglobal $typenow;\n\n\t\t// handle post type\n\t\tif ($typenow == GFDPSPXPAY_TYPE_FEED) {\n\t\t\t// verify permission to edit post / page\n\t\t\tif (!current_user_can('edit_post', $postID))\n\t\t\t\treturn $postID;\n\n\t\t\t$fields = array (\n\t\t\t\t'_gfdpspxpay_form',\n\t\t\t\t'_gfdpspxpay_url_fail',\n\t\t\t\t'_gfdpspxpay_url_success',\n\t\t\t\t'_gfdpspxpay_merchant_ref',\n\t\t\t\t'_gfdpspxpay_email',\n\t\t\t\t'_gfdpspxpay_txndata1',\n\t\t\t\t'_gfdpspxpay_txndata2',\n\t\t\t\t'_gfdpspxpay_txndata3',\n\t\t\t\t'_gfdpspxpay_opt',\n\t\t\t\t'_gfdpspxpay_delay_post',\n\t\t\t\t'_gfdpspxpay_delay_notify',\n\t\t\t\t'_gfdpspxpay_delay_autorespond',\n\t\t\t\t'_gfdpspxpay_delay_userrego',\n\t\t\t\t'_gfdpspxpay_delay_exec_always',\n\t\t\t);\n\n\t\t\tif (isset($_POST['_gfdpspxpay_form'])) {\n\t\t\t\tcheck_admin_referer('save', GFDPSPXPAY_TYPE_FEED . '_wpnonce');\n\t\t\t}\n\n\t\t\tforeach ($fields as $fieldName) {\n\t\t\t\tif (isset($_POST[$fieldName])) {\n\n\t\t\t\t\t$value = $_POST[$fieldName];\n\n\t\t\t\t\tif (empty($value)) {\n\t\t\t\t\t\tdelete_post_meta($postID, $fieldName);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tupdate_post_meta($postID, $fieldName, $value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// checkboxes aren't set, so delete them\n\t\t\t\t\tdelete_post_meta($postID, $fieldName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $postID;\n\t}\n\n\t/**\n\t* remove unwanted actions from list of feeds\n\t* @param array $actions\n\t* @param WP_Post $post\n\t* @return array\n\t*/\n\tpublic function filterPostRowActions($actions, $post) {\n\t\tunset($actions['inline hide-if-no-js']);\t\t// \"quick edit\"\n\n\t\t// add Entries link\n\t\tif ($post && $post->ID) {\n\t\t\ttry {\n\t\t\t\t$feed = new GFDpsPxPayFeed();\n\t\t\t\t$feed->loadFromPost($post);\n\n\t\t\t\t$delete = array_pop($actions);\t\t// pop the end link, so that we can \"insert\" ours before it\n\n\t\t\t\t$actions['entries'] = sprintf('<a href=\"%s\" title=\"%s\">%s</a>',\n\t\t\t\t\tadd_query_arg(array('page' => 'gf_entries', 'id' => $feed->FormID), admin_url('admin.php')), 'View Entries', 'Entries');\n\n\t\t\t\t$actions['delete'] = $delete;\t\t// replace the end link\n\t\t\t}\n\t\t\tcatch (GFDpsPxPayException $e) {\n\t\t\t\t// NOP -- we'll have an empty feed\n\t\t\t}\n\t\t}\n\n\t\treturn $actions;\n\t}\n\n\t/**\n\t* change the post updated messages\n\t* @param array $messages\n\t* @return array\n\t*/\n\tpublic function filterPostUpdatedMessages($messages) {\n\t\t$messages[GFDPSPXPAY_TYPE_FEED] = array(\n\t\t\t 0 => '', // Unused. Messages start at index 1.\n\t\t\t 1 => 'Feed updated.',\n\t\t\t 2 => 'Custom field updated.',\n\t\t\t 3 => 'Custom field deleted.',\n\t\t\t 4 => 'Feed updated.',\n\t\t\t/* translators: %s: date and time of the revision */\n\t\t\t 5 => isset($_GET['revision']) ? sprintf( 'Feed restored to revision from %s', wp_post_revision_title( (int) $_GET['revision'], false ) ) : false,\n\t\t\t 6 => 'Feed published.',\n\t\t\t 7 => 'Feed saved.',\n\t\t\t 8 => 'Feed submitted.',\n\t\t\t 9 => 'Feed scheduled for: ',\n\t\t\t10 => 'Feed draft updated.',\n\t\t);\n\n\t\treturn $messages;\n\t}\n\n\t/**\n\t* filter to add columns to post list\n\t* @param array $posts_columns\n\t* @return array\n\t*/\n\tpublic function filterManageColumns($posts_columns) {\n\t\t// Date isn't useful for this post type\n\t\tunset($posts_columns['date']);\n\n\t\t// stop File Gallery adding No. of Attachments\n\t\tunset($posts_columns['attachment_count']);\n\n\t\treturn $posts_columns;\n\t}\n\n\t/**\n\t* change default order to name ascending\n\t* @param WP_Query $query\n\t* @return WP_Query\n\t*/\n\tpublic function adminPostOrder($query) {\n\t\t// only for admin queries for this post type, with no specified order\n\t\tif ($query->is_admin && $query->get('post_type') == GFDPSPXPAY_TYPE_FEED && empty($query->query_vars['orderby'])) {\n\t\t\t$query->set('orderby', 'post_title');\n\t\t\t$query->set('order', 'ASC');\n\t\t}\n\n\t\treturn $query;\n\t}\n\n\t/**\n\t* get a map of GF form field IDs to field names, for populating drop-down lists\n\t* @param int $formID\n\t* @return array\n\t*/\n\tpublic static function getFormFields($formID) {\n\t\t$form = GFFormsModel::get_form_meta($formID);\n\n        $fields = array(\n        \t'form' => $formID . ' (form ID)',\n        \t'title' => $form['title'] . ' (form title)',\n        );\n\n        if (is_array($form['fields'])) {\n            foreach ($form['fields'] as $field) {\n                if (!rgar($field, 'displayOnly')) {\n\t\t\t\t\t// pick up simple fields and selected compound fields\n\t\t\t\t\tif (empty($field['inputs']) || in_array(GFFormsModel::get_input_type($field), array('name', 'address'))) {\n\t\t\t\t\t\t$fields[(string) $field['id']] = GFCommon::get_label($field);\n\t\t\t\t\t}\n\n\t\t\t\t\t// pick up subfields\n\t\t\t\t\tif (isset($field['inputs']) && is_array($field['inputs'])) {\n\t\t\t\t\t\tforeach($field['inputs'] as $input) {\n\t\t\t\t\t\t\t$fields[(string) $input['id']] = GFCommon::get_label($field, $input['id']);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n            }\n        }\n\n        return $fields;\n\t}\n\n\t/**\n\t* return a list of drop-down list items for field mappings\n\t* @param string $current the currently selected option\n\t* @param array $fields\n\t* @return string\n\t*/\n\tpublic static function selectFields($current, $fields) {\n\t\t$opts = '<option value=\"\">-- not selected --</option>';\n\n\t\tforeach ($fields as $name => $title) {\n\t\t\t$opts .= sprintf('<option value=\"%s\" %s>%s</option>', esc_attr($name), selected($current, $name, false), esc_html($title));\n\t\t}\n\n\t\treturn $opts;\n\t}\n\n}\n", "<?php\n/*\n* Classes for dealing with a DPS PxPay payment request\n* copyright (c) 2013 WebAware Pty Ltd, released under GPL v2.1\n*/\n\n/**\n* DPS PxPay payment request\n*/\nclass GFDpsPxPayPayment {\n\t// environment / website specific members\n\t/**\n\t* default true, whether to validate the remote SSL certificate\n\t* @var boolean\n\t*/\n\tpublic $sslVerifyPeer;\n\n\t// payment specific members\n\t/**\n\t* account name / email address at DPS PxPay\n\t* @var string max. 8 characters\n\t*/\n\tpublic $userID;\n\n\t/**\n\t* account name / email address at DPS PxPay\n\t* @var string max. 8 characters\n\t*/\n\tpublic $userKey;\n\n\t/**\n\t* total amount of payment, in dollars and cents as a floating-point number\n\t* @var float\n\t*/\n\tpublic $amount;\n\n\t/**\n\t* additional billing ID for recurring payments\n\t* @var string max. 32 characters\n\t*/\n\tpublic $billingID;\n\n\t/**\n\t* flag for enabling recurring billing\n\t* @var string max. 1 character\n\t*/\n\tpublic $enableRecurring;\n\n\t/**\n\t* currency code (AUD, NZD, etc.)\n\t* @var string max. 4 characters\n\t*/\n\tpublic $currency;\n\n\t/**\n\t* customer's email address\n\t* @var string max. 255 characters\n\t*/\n\tpublic $emailAddress;\n\n\t/**\n\t* an invoice reference to track by\n\t* @var string max. 64 characters\n\t*/\n\tpublic $invoiceReference;\n\n\t/**\n\t* an optional invoice description\n\t* @var string max. 64 characters\n\t*/\n\tpublic $invoiceDescription;\n\n\t/**\n\t* optional additional information for use in shopping carts, etc.\n\t* @var string max. 255 characters\n\t*/\n\tpublic $option1;\n\n\t/**\n\t* optional additional information for use in shopping carts, etc.\n\t* @var string max. 255 characters\n\t*/\n\tpublic $option2;\n\n\t/**\n\t* optional additional information for use in shopping carts, etc.\n\t* @var string max. 255 characters\n\t*/\n\tpublic $option3;\n\n\t/**\n\t* type of transaction (Purchase, Auth)\n\t* @var string max. 8 characters\n\t*/\n\tpublic $txnType;\n\n\t/**\n\t* URL to redirect to on failure\n\t* @var string max. 255 characters\n\t*/\n\tpublic $urlFail;\n\n\t/**\n\t* URL to redirect to on success\n\t* @var string max. 255 characters\n\t*/\n\tpublic $urlSuccess;\n\n\t/**\n\t* transaction number\n\t* @var string max. 16 characters\n\t*/\n\tpublic $transactionNumber;\n\n\t/**\n\t* populate members with defaults, and set account and environment information\n\t*\n\t* @param string $userID DPS PxPay account ID\n\t* @param string $userKey DPS PxPay encryption key\n\t*/\n\tpublic function __construct($userID, $userKey) {\n\t\t$this->sslVerifyPeer = true;\n\t\t$this->userID = $userID;\n\t\t$this->userKey = $userKey;\n\n\t\t// default to single payment, not recurring\n\t\t$this->enableRecurring = false;\n\t}\n\n\t/**\n\t* process a payment against DPS PxPay; throws exception on error with error described in exception message.\n\t*/\n\tpublic function processPayment() {\n\t\t$this->validate();\n\t\t$xml = $this->getPaymentXML();\n\t\treturn $this->sendPaymentRequest($xml);\n\t}\n\n\t/**\n\t* validate the data members to ensure that sufficient and valid information has been given\n\t* @throws GFDpsPxPayException\n\t*/\n\tprotected function validate() {\n\t\t$errmsg = '';\n\n\t\tif (strlen($this->userID) === 0)\n\t\t\t$errmsg .= \"userID cannot be empty.\\n\";\n\t\tif (strlen($this->userKey) === 0)\n\t\t\t$errmsg .= \"userKey cannot be empty.\\n\";\n\t\tif (!is_numeric($this->amount) || $this->amount <= 0)\n\t\t\t$errmsg .= \"amount must be given as a number in dollars and cents.\\n\";\n\t\telse if (!is_float($this->amount))\n\t\t\t$this->amount = (float) $this->amount;\n\t\tif (strlen($this->currency) === 0)\n\t\t\t$errmsg .= \"currency cannot be empty.\\n\";\n\t\tif (strlen($this->invoiceReference) === 0)\n\t\t\t$errmsg .= \"invoice reference cannot be empty.\\n\";\n\t\tif (strlen($this->txnType) === 0)\n\t\t\t$errmsg .= \"transaction type cannot be empty.\\n\";\n\t\tif (strlen($this->urlFail) === 0)\n\t\t\t$errmsg .= \"URL for transaction fail cannot be empty.\\n\";\n\t\tif (strlen($this->urlSuccess) === 0)\n\t\t\t$errmsg .= \"URL for transaction success cannot be empty.\\n\";\n\n\t\tif (strlen($errmsg) > 0) {\n\t\t\tthrow new GFDpsPxPayException($errmsg);\n\t\t}\n\t}\n\n\t/**\n\t* create XML request document for payment parameters\n\t* @return string\n\t*/\n\tpublic function getPaymentXML() {\n\t\t$xml = new XMLWriter();\n\t\t$xml->openMemory();\n\t\t$xml->startDocument('1.0', 'UTF-8');\n\t\t$xml->startElement('GenerateRequest');\n\n\t\t$xml->writeElement('PxPayUserId', substr($this->userID, 0, 32));\n\t\t$xml->writeElement('PxPayKey', substr($this->userKey, 0, 64));\n\t\t$xml->writeElement('TxnType', substr($this->txnType, 0, 8));\n\t\t$xml->writeElement('AmountInput', number_format($this->amount, 2, '.', ''));\n\t\t$xml->writeElement('CurrencyInput', substr($this->currency, 0, 4));\n\t\t$xml->writeElement('MerchantReference', substr($this->invoiceReference, 0, 64));\n\t\t$xml->writeElement('TxnData1', substr($this->option1, 0, 255));\n\t\t$xml->writeElement('TxnData2', substr($this->option2, 0, 255));\n\t\t$xml->writeElement('TxnData3', substr($this->option3, 0, 255));\n\t\t$xml->writeElement('EmailAddress', substr($this->emailAddress, 0, 255));\n\t\t$xml->writeElement('TxnId', substr($this->transactionNumber, 0, 16));\n\t\t$xml->writeElement('BillingId', substr($this->billingID, 0, 32));\n\t\t$xml->writeElement('EnableAddBillCard', $this->enableRecurring ? '1' : '0');\n\t\t$xml->writeElement('UrlSuccess', substr($this->urlSuccess, 0, 255));\n\t\t$xml->writeElement('UrlFail', substr($this->urlFail, 0, 255));\n\t\t$xml->writeElement('Opt', substr($this->invoiceDescription, 0, 64));\n\n\t\t$xml->endElement();\t\t// GenerateRequest\n\n\t\treturn $xml->outputMemory();\n\t}\n\n\t/**\n\t* send the DPS PxPay payment request and retrieve and parse the response\n\t* @param string $xml DPS PxPay payment request as an XML document, per DPS PxPay specifications\n\t* @return GFDpsPxPayPaymentResponse\n\t* @throws GFDpsPxPayException\n\t*/\n\tprotected function sendPaymentRequest($xml) {\n\t\t// execute the cURL request, and retrieve the response\n\t\ttry {\n\t\t\t$responseXML = GFDpsPxPayPlugin::curlSendRequest($xml, $this->sslVerifyPeer);\n\t\t}\n\t\tcatch (GFDpsPxPayCurlException $e) {\n\t\t\tthrow new GFDpsPxPayException(\"Error posting DPS PxPay payment request: \" . $e->getMessage());\n\t\t}\n\n\t\t$response = new GFDpsPxPayPaymentResponse();\n\t\t$response->loadResponseXML($responseXML);\n\t\treturn $response;\n\t}\n}\n\n/**\n* DPS PxPay payment request response\n*/\nclass GFDpsPxPayPaymentResponse {\n\t/**\n\t* whether it was a successful request\n\t* @var boolean\n\t*/\n\tpublic $isValid;\n\n\t/**\n\t* URL to redirect browser to where credit card details can be entered\n\t* @var string\n\t*/\n\tpublic $paymentURL;\n\n\t/**\n\t* load DPS PxPay response data as XML string\n\t* @param string $response DPS PxPay response as a string (hopefully of XML data)\n\t* @throws GFDpsPxPayException\n\t*/\n\tpublic function loadResponseXML($response) {\n\t\t// prevent XML injection attacks, and handle errors without warnings\n\t\t$oldDisableEntityLoader = libxml_disable_entity_loader(TRUE);\n\t\t$oldUseInternalErrors = libxml_use_internal_errors(TRUE);\n\n\t\ttry {\n\t\t\t$xml = simplexml_load_string($response);\n\t\t\tif ($xml === false) {\n\t\t\t\t$errmsg = '';\n\t\t\t\tforeach (libxml_get_errors() as $error) {\n\t\t\t\t\t$errmsg .= $error->message;\n\t\t\t\t}\n\t\t\t\tthrow new Exception($errmsg);\n\t\t\t}\n\n\t\t\t$this->isValid = ('1' === ((string) $xml['valid']));\n\t\t\t$this->paymentURL = (string) $xml->URI;\n\n\t\t\t// restore old libxml settings\n\t\t\tlibxml_disable_entity_loader($oldDisableEntityLoader);\n\t\t\tlibxml_use_internal_errors($oldUseInternalErrors);\n\t\t}\n\t\tcatch (Exception $e) {\n\t\t\t// restore old libxml settings\n\t\t\tlibxml_disable_entity_loader($oldDisableEntityLoader);\n\t\t\tlibxml_use_internal_errors($oldUseInternalErrors);\n\n\t\t\tthrow new GFDpsPxPayException('Error parsing DPS PxPay generate response: ' . $e->getMessage());\n\t\t}\n\n\t\t// if response is \"invalid\", throw error with message given in URI field\n\t\tif (!$this->isValid) {\n\t\t\tthrow new GFDpsPxPayException('Error from DPS PxPay generate response: ' . $this->paymentURL);\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n* custom exception types\n*/\nclass GFDpsPxPayException extends Exception {}\nclass GFDpsPxPayCurlException extends Exception {}\n\n/**\n* class for managing the plugin\n*/\nclass GFDpsPxPayPlugin {\n\tpublic $urlBase;\t\t\t\t\t\t\t\t\t// string: base URL path to files in plugin\n\tpublic $options;\t\t\t\t\t\t\t\t\t// array of plugin options\n\n\tprotected $validationMessage = '';\t\t\t\t\t// last validation message\n\tprotected $errorMessage = false;\t\t\t\t\t// last transaction error message\n\tprotected $paymentURL = false;\t\t\t\t\t\t// where to redirect browser for payment\n\n\tprivate $feed = null;\t\t\t\t\t\t\t\t// current feed mapping form fields to payment fields, accessed through getFeed()\n\tprivate $formData = null;\t\t\t\t\t\t\t// current form data collected from form, accessed through getFormData()\n\n\t// end points for the DPS PxPay API\n\tconst PXPAY_APIV1_URL\t= 'https://sec.paymentexpress.com/pxpay/pxaccess.aspx';\n\tconst PXPAY_APIV2_URL\t= 'https://sec.paymentexpress.com/pxaccess/pxpay.aspx';\n\n\t// end point for return to website\n\tconst PXPAY_RETURN\t\t= 'PXPAYRETURN';\n\n\t// minimum versions required\n\tconst MIN_VERSION_GF\t= '1.7';\n\n\t/**\n\t* static method for getting the instance of this singleton object\n\t* @return self\n\t*/\n\tpublic static function getInstance() {\n\t\tstatic $instance = null;\n\n\t\tif (is_null($instance)) {\n\t\t\t$instance = new self();\n\t\t}\n\n\t\treturn $instance;\n\t}\n\n\t/**\n\t* initialise plugin\n\t*/\n\tprivate function __construct() {\n\t\t// grab options, setting new defaults for any that are missing\n\t\t$this->initOptions();\n\n\t\t// record plugin URL base\n\t\t$this->urlBase = plugin_dir_url(GFDPSPXPAY_PLUGIN_FILE);\n\n\t\tadd_action('init', array($this, 'init'));\n\t\tadd_action('parse_request', array($this, 'processDpsReturn'));\t\t// process DPS PxPay return\n\t\tadd_action('wp', array($this, 'processFormConfirmation'), 5);\t\t// process redirect to GF confirmation\n\t}\n\n\t/**\n\t* initialise plug-in options, handling undefined options by setting defaults\n\t*/\n\tprivate function initOptions() {\n\t\t$this->options = get_option(GFDPSPXPAY_PLUGIN_OPTIONS);\n\t\tif (!is_array($this->options)) {\n\t\t\t$this->options = array();\n\t\t}\n\n\t\t$defaults = array (\n\t\t\t'userID'\t\t\t=> '',\n\t\t\t'userKey'\t\t\t=> '',\n\t\t\t'testID'\t\t\t=> '',\n\t\t\t'testKey'\t\t\t=> '',\n\t\t\t'useTest'\t\t\t=> false,\n\t\t\t'sslVerifyPeer'\t\t=> true,\n\t\t\t'apiVersion'\t\t=> isset($this->options['userID']) ? 1 : 2,\t// default API version 2 for new installs, 1 for old\n\t\t);\n\n\t\tif (count(array_diff(array_keys($defaults), array_keys($this->options))) > 0) {\n\t\t\t$this->options = array_merge($defaults, $this->options);\n\t\t\tunset($this->options[0]);\n\t\t\tupdate_option(GFDPSPXPAY_PLUGIN_OPTIONS, $this->options);\n\t\t}\n\t}\n\n\t/**\n\t* get PxPay API end-point for selected API version\n\t* @return string\n\t*/\n\tpublic function getApiUrl() {\n\t\tswitch ($this->options['apiVersion']) {\n\t\t\tcase 2:\n\t\t\t\tself::log_debug('Using PxPay 2.0 API');\n\t\t\t\treturn self::PXPAY_APIV2_URL;\n\n\t\t\tdefault:\n\t\t\t\tself::log_debug('Using PxPay 1.0 API');\n\t\t\t\treturn self::PXPAY_APIV1_URL;\n\t\t}\n\t}\n\n\t/**\n\t* handle the plugin's init action\n\t*/\n\tpublic function init() {\n\t\t// do nothing if Gravity Forms isn't enabled or doesn't meet required minimum version\n\t\tif (self::versionCompareGF(self::MIN_VERSION_GF, '>=')) {\n\t\t\t// hook into Gravity Forms\n\t\t\tadd_filter('gform_logging_supported', array($this, 'enableLogging'));\n\t\t\tadd_filter('gform_validation', array($this, 'gformValidation'));\n\t\t\tadd_filter('gform_validation_message', array($this, 'gformValidationMessage'), 10, 2);\n\t\t\tadd_filter('gform_confirmation', array($this, 'gformConfirmation'), 1000, 4);\n\t\t\tadd_filter('gform_disable_post_creation', array($this, 'gformDelayPost'), 10, 3);\n\t\t\tadd_filter('gform_disable_user_notification', array($this, 'gformDelayUserNotification'), 10, 3);\n\t\t\tadd_filter('gform_disable_admin_notification', array($this, 'gformDelayAdminNotification'), 10, 3);\n\t\t\tadd_filter('gform_disable_notification', array($this, 'gformDelayNotification'), 10, 4);\n\t\t\tadd_action('gform_after_submission', array($this, 'gformDelayUserRego'), 9, 2);\n\t\t\tadd_action('gform_entry_post_save', array($this, 'gformEntryPostSave'), 10, 2);\n\t\t\tadd_filter('gform_custom_merge_tags', array($this, 'gformCustomMergeTags'), 10, 4);\n\t\t\tadd_filter('gform_replace_merge_tags', array($this, 'gformReplaceMergeTags'), 10, 7);\n\t\t\tadd_filter('gform_entry_meta', array($this, 'gformEntryMeta'), 10, 2);\n\n\t\t\t// register custom post types\n\t\t\t$this->registerTypeFeed();\n\t\t}\n\n\t\tif (is_admin()) {\n\t\t\t// kick off the admin handling\n\t\t\tnew GFDpsPxPayAdmin($this);\n\t\t}\n\t}\n\n\t/**\n\t* register custom post type for PxPay form field mappings\n\t*/\n\tprotected function registerTypeFeed() {\n\t\t// register the post type\n\t\tregister_post_type(GFDPSPXPAY_TYPE_FEED, array(\n\t\t\t'labels' => array (\n\t\t\t\t'name'\t\t\t\t\t=> 'DPS PxPay Feeds',\n\t\t\t\t'singular_name'\t\t\t=> 'DPS PxPay Feed',\n\t\t\t\t'add_new_item'\t\t\t=> 'Add New DPS PxPay Feed',\n\t\t\t\t'edit_item'\t\t\t\t=> 'Edit DPS PxPay Feed',\n\t\t\t\t'new_item'\t\t\t\t=> 'New DPS PxPay Feed',\n\t\t\t\t'view_item'\t\t\t\t=> 'View DPS PxPay Feed',\n\t\t\t\t'search_items'\t\t\t=> 'Search DPS PxPay Feeds',\n\t\t\t\t'not_found'\t\t\t\t=> 'No DPS PxPay feeds found',\n\t\t\t\t'not_found_in_trash'\t=> 'No DPS PxPay feeds found in Trash',\n\t\t\t\t'parent_item_colon'\t\t=> 'Parent DPS PxPay feed',\n\t\t\t),\n\t\t\t'description'\t\t\t\t=> 'DPS PxPay Feeds, as a custom post type',\n\t\t\t'public'\t\t\t\t\t=> false,\n\t\t\t'show_ui'\t\t\t\t\t=> true,\n\t\t\t'show_in_menu'\t\t\t\t=> false,\n\t\t\t'hierarchical'\t\t\t\t=> false,\n\t\t\t'has_archive'\t\t\t\t=> false,\n\t\t\t//~ 'capabilities'\t\t\t\t=> array (\n\t\t\t//~ ),\n\t\t\t'supports'\t\t\t\t\t=> array('null'),\n\t\t\t'rewrite'\t\t\t\t\t=> false,\n\t\t));\n\t}\n\n\t/**\n\t* filter whether post creation from form is enabled (yet)\n\t* @param bool $is_disabled\n\t* @param array $form\n\t* @param array $lead\n\t* @return bool\n\t*/\n\tpublic function gformDelayPost($is_disabled, $form, $lead) {\n\t\t$feed = $this->getFeed($form['id']);\n\t\t$is_disabled = !empty($feed->DelayPost);\n\n\t\tself::log_debug(sprintf('delay post creation: %s; form id %s, lead id %s', $is_disabled ? 'yes' : 'no', $form['id'], $lead['id']));\n\n\t\treturn $is_disabled;\n\t}\n\n\t/**\n\t* deprecated: filter whether form triggers autoresponder (yet)\n\t* @param bool $is_disabled\n\t* @param array $form\n\t* @param array $lead\n\t* @return bool\n\t*/\n\tpublic function gformDelayUserNotification($is_disabled, $form, $lead) {\n\t\t$feed = $this->getFeed($form['id']);\n\t\t$is_disabled = !empty($feed->DelayAutorespond);\n\n\t\t$this->log_debug(sprintf('delay user notification: %s; form id %s, lead id %s', $is_disabled ? 'yes' : 'no', $form['id'], $lead['id']));\n\n\t\treturn $is_disabled;\n\t}\n\n\t/**\n\t* deprecated: filter whether form triggers admin notification (yet)\n\t* @param bool $is_disabled\n\t* @param array $form\n\t* @param array $lead\n\t* @return bool\n\t*/\n\tpublic function gformDelayAdminNotification($is_disabled, $form, $lead) {\n\t\t$feed = $this->getFeed($form['id']);\n\t\t$is_disabled = !empty($feed->DelayNotify);\n\n\t\t$this->log_debug(sprintf('delay admin notification: %s; form id %s, lead id %s', $is_disabled ? 'yes' : 'no', $form['id'], $lead['id']));\n\n\t\treturn $is_disabled;\n\t}\n\n\t/**\n\t* filter whether form triggers notifications (yet)\n\t* @param bool $is_disabled\n\t* @param array $notification\n\t* @param array $form\n\t* @param array $lead\n\t* @return bool\n\t*/\n\tpublic function gformDelayNotification($is_disabled, $notification, $form, $lead) {\n\t\t$feed = $this->getFeed($form['id']);\n\n\t\tif ($feed) {\n\t\t\tswitch (rgar($notification, 'type')) {\n\t\t\t\t// old \"user\" notification\n\t\t\t\tcase 'user':\n\t\t\t\t\tif ($feed->DelayAutorespond) {\n\t\t\t\t\t\t$is_disabled = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\t// old \"admin\" notification\n\t\t\t\tcase 'admin':\n\t\t\t\t\tif ($feed->DelayNotify) {\n\t\t\t\t\t\t$is_disabled = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\t// new since 1.7, add any notification you like\n\t\t\t\tdefault:\n\t\t\t\t\tif (trim($notification['to']) == '{admin_email}') {\n\t\t\t\t\t\tif ($feed->DelayNotify) {\n\t\t\t\t\t\t\t$is_disabled = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif ($feed->DelayAutorespond) {\n\t\t\t\t\t\t\t$is_disabled = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t$this->log_debug(sprintf('delay notification: %s; form id %s, lead id %s, notification \"%s\"', $is_disabled ? 'yes' : 'no',\n\t\t\t$form['id'], $lead['id'], $notification['name']));\n\n\t\treturn $is_disabled;\n\t}\n\n\t/**\n\t* filter whether form triggers User Registration (yet)\n\t* @param bool $is_disabled\n\t* @param array $lead\n\t* @param array $form\n\t* @return array\n\t*/\n\tpublic function gformDelayUserRego($lead, $form) {\n\t\t$feed = $this->getFeed($form['id']);\n\t\t$is_disabled = !empty($feed->DelayUserrego);\n\n\t\tif ($is_disabled) {\n\t\t\tremove_action('gform_after_submission', array('GFUser', 'gf_create_user'), 10, 2);\n\t\t}\n\t}\n\n\t/**\n\t* process a form validation filter hook; if can find a total, attempt to bill it\n\t* @param array $data an array with elements is_valid (boolean) and form (array of form elements)\n\t* @return array\n\t*/\n\tpublic function gformValidation($data) {\n\n\t\t// make sure all other validations passed\n\t\tif ($data['is_valid']) {\n\n\t\t\t$feed = $this->getFeed($data['form']['id']);\n\t\t\tif ($feed) {\n\t\t\t\t$formData = $this->getFormData($data['form']);\n\n\t\t\t\t// make sure form hasn't already been submitted / processed\n\t\t\t\tif ($this->hasFormBeenProcessed($data['form'])) {\n\t\t\t\t\t$data['is_valid'] = false;\n\t\t\t\t\t$this->validationMessage .= \"Payment already submitted and processed - please close your browser window.\\n\";\n\t\t\t\t}\n\n\t\t\t\t// make sure that we have something to bill\n\t\t\t\t// TODO: conditional payments\n\t\t\t\t//~ else if (!$formData->isCcHidden() && $formData->isLastPage() && is_array($formData->ccField)) {\n\t\t\t\t\tif (!$formData->hasPurchaseFields()) {\n\t\t\t\t\t\t$data['is_valid'] = false;\n\t\t\t\t\t\t$this->validationMessage .= \"This form has no products or totals; unable to process transaction.\\n\";\n\t\t\t\t\t}\n\t\t\t\t//~ }\n\t\t\t}\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t* alter the validation message\n\t* @param string $msg\n\t* @param array $form\n\t* @return string\n\t*/\n\tpublic function gformValidationMessage($msg, $form) {\n\t\tif ($this->validationMessage) {\n\t\t\t$msg = \"<div class='validation_error'>\" . nl2br($this->validationMessage) . \"</div>\";\n\t\t\t$this->validationMessage = false;\n\t\t}\n\n\t\treturn $msg;\n\t}\n\n\t/**\n\t* form entry post-submission processing\n\t* @param array $entry\n\t* @param array $form\n\t* @return array\n\t*/\n\tpublic function gformEntryPostSave($entry, $form) {\n\n\t\t// get feed mapping form fields to payment request, run away if not set\n\t\t$feed = $this->getFeed($form['id']);\n\t\tif (!$feed) {\n\t\t\treturn $entry;\n\t\t}\n\n\t\t// run away if nothing to charge\n\t\t$formData = $this->getFormData($form);\n\t\tif (empty($formData->total)) {\n\t\t\treturn $entry;\n\t\t}\n\n\t\t// generate a unique transactiond ID to avoid collisions, e.g. between different installations using the same PxPay account\n\t\t// use last three characters of entry ID as prefix, to avoid collisions with entries created at same microsecond\n\t\t// uniqid() generates 13-character string, plus 3 characters from entry ID = 16 characters which is max for field\n\t\t$transactionID = uniqid(substr($entry['id'], -3));\n\n\t\t// allow plugins/themes to modify transaction ID; NB: must remain unique for PxPay account!\n\t\t$transactionID = apply_filters('gfdpspxpay_invoice_trans_number', $transactionID, $form);\n\n\t\t// build a payment request and execute on API\n\t\tlist($userID, $userKey) = $this->getDpsCredentials($this->options['useTest']);\n\t\t$paymentReq = new GFDpsPxPayPayment($userID, $userKey);\n\t\t$paymentReq->txnType\t\t\t= 'Purchase';\n\t\t$paymentReq->amount\t\t\t\t= $formData->total;\n\t\t$paymentReq->currency\t\t\t= GFCommon::get_currency();\n\t\t$paymentReq->transactionNumber\t= $transactionID;\n\t\t$paymentReq->invoiceReference\t= $formData->MerchantReference;\n\t\t$paymentReq->option1\t\t\t= $formData->TxnData1;\n\t\t$paymentReq->option2\t\t\t= $formData->TxnData2;\n\t\t$paymentReq->option3\t\t\t= $formData->TxnData3;\n\t\t$paymentReq->invoiceDescription\t= $feed->Opt;\n\t\t$paymentReq->emailAddress\t\t= $formData->EmailAddress;\n\t\t$paymentReq->urlSuccess\t\t\t= home_url(self::PXPAY_RETURN);\n\t\t$paymentReq->urlFail\t\t\t= home_url(self::PXPAY_RETURN);\t\t\t// NB: redirection will happen after transaction status is updated\n\n\t\t// allow plugins/themes to modify invoice description and reference, and set option fields\n\t\t$paymentReq->invoiceDescription\t= apply_filters('gfdpspxpay_invoice_desc', $paymentReq->invoiceDescription, $form);\n\t\t$paymentReq->invoiceReference\t= apply_filters('gfdpspxpay_invoice_ref', $paymentReq->invoiceReference, $form);\n\t\t$paymentReq->option1\t\t\t= apply_filters('gfdpspxpay_invoice_txndata1', $paymentReq->option1, $form);\n\t\t$paymentReq->option2\t\t\t= apply_filters('gfdpspxpay_invoice_txndata2', $paymentReq->option2, $form);\n\t\t$paymentReq->option3\t\t\t= apply_filters('gfdpspxpay_invoice_txndata3', $paymentReq->option3, $form);\n\n\t\tself::log_debug('========= initiating transaction request');\n\t\tself::log_debug(sprintf('%s account, invoice ref: %s, transaction: %s, amount: %s',\n\t\t\t$this->options['useTest'] ? 'test' : 'live',\n\t\t\t$paymentReq->invoiceReference, $paymentReq->transactionNumber, $paymentReq->amount));\n\n\t\tself::log_debug(sprintf('success URL: %s', $paymentReq->urlSuccess));\n\t\tself::log_debug(sprintf('failure URL: %s', $paymentReq->urlFail));\n\n\t\t// basic transaction data\n\t\t// NB: some are custom meta registered via gform_entry_meta\n\t\t$entry['payment_gateway'] = 'gfdpspxpay';\n\t\t$entry['authcode'] = '';\n\t\tgform_update_meta($entry['id'], 'gfdpspxpay_txn_id', $transactionID);\n\n\t\t// reduce risk of double-submission\n\t\tgform_update_meta($entry['id'], 'gfdpspxpay_unique_id', GFFormsModel::get_form_unique_id($form['id']));\n\n\t\t$this->errorMessage = '';\n\n\t\ttry {\n\t\t\t$response = $paymentReq->processPayment();\n\n\t\t\tif ($response->isValid) {\n\t\t\t\t$entry['payment_status'] = 'Processing';\n\t\t\t\t$this->paymentURL = $response->paymentURL;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$entry['payment_status'] = 'Failed';\n\t\t\t\t$this->errorMessage = 'Payment Express request invalid.';\n\t\t\t}\n\t\t}\n\t\tcatch (GFDpsPxPayException $e) {\n\t\t\t$entry['payment_status'] = 'Failed';\n\t\t\t$this->errorMessage = $e->getMessage();\n\t\t}\n\n\t\t// update the entry\n\t\tif (class_exists('GFAPI')) {\n\t\t\tGFAPI::update_entry($entry);\n\t\t}\n\t\telse {\n\t\t\tGFFormsModel::update_lead($entry);\n\t\t}\n\n\t\treturn $entry;\n\t}\n\n\t/**\n\t* on form confirmation, send user's browser to DPS PxPay with required data\n\t* @param mixed $confirmation text or redirect for form submission\n\t* @param array $form the form submission data\n\t* @param array $entry the form entry\n\t* @param bool $ajax form submission via AJAX\n\t* @return mixed\n\t*/\n\tpublic function gformConfirmation($confirmation, $form, $entry, $ajax) {\n\t\tif ($this->paymentURL) {\n\t\t\t// NB: GF handles redirect via JavaScript if headers already sent, or AJAX\n\t\t\t$confirmation = array('redirect' => $this->paymentURL);\n\t\t\tself::log_debug('Payment Express request valid, redirecting...');\n\n\t\t\t$this->paymentURL = false;\n\t\t}\n\n\t\telseif ($this->errorMessage) {\n\t\t\t$feed = $this->getFeed($form['id']);\n\t\t\tif ($feed) {\n\t\t\t\t// create a \"confirmation message\" in which to display the error\n\t\t\t\t$default_anchor = count(GFCommon::get_fields_by_type($form, array('page'))) > 0 ? 1 : 0;\n\t\t\t\t$default_anchor = apply_filters('gform_confirmation_anchor_'.$form['id'], apply_filters('gform_confirmation_anchor', $default_anchor));\n\t\t\t\t$anchor = $default_anchor ? \"<a id='gf_{$form[\"id\"]}' name='gf_{$form[\"id\"]}' class='gform_anchor' ></a>\" : '';\n\t\t\t\t$cssClass = rgar($form, 'cssClass');\n\t\t\t\t$error_msg = esc_html($this->errorMessage);\n\n\t\t\t\tob_start();\n\t\t\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/error-payment-failure.php';\n\t\t\t\t$confirmation = ob_get_clean();\n\t\t\t}\n\n\t\t\t$this->errorMessage = false;\n\t\t}\n\n\t\treturn $confirmation;\n\t}\n\n\t/**\n\t* return from DPS PxPay website, retrieve and process payment result and redirect to form\n\t*/\n\tpublic function processDpsReturn() {\n\t\t// must parse out query params ourselves, to prevent the result param getting dropped / filtered out\n\t\t// [speculation: maybe it's an anti-malware filter watching for base64-encoded injection attacks?]\n\t\t$parts = parse_url($_SERVER['REQUEST_URI']);\n\t\t$path = $parts['path'];\n\t\tif (isset($parts['query'])) {\n\t\t\tparse_str($parts['query'], $args);\n\t\t}\n\t\telse {\n\t\t\t$args = array();\n\t\t}\n\n\t\t// check for request path containing our path element, and a result argument\n\t\tif (strpos($path, self::PXPAY_RETURN) !== false && isset($args['result'])) {\n\t\t\tlist($userID, $userKey) = $this->getDpsCredentials($this->options['useTest']);\n\n\t\t\t$resultReq = new GFDpsPxPayResult($userID, $userKey);\n\t\t\t$resultReq->result = wp_unslash($args['result']);\n\n\t\t\ttry {\n\t\t\t\tself::log_debug('========= requesting transaction result');\n\t\t\t\t$response = $resultReq->processResult();\n\n\t\t\t\tdo_action('gfdpspxpay_process_return');\n\n\t\t\t\tif ($response->isValid) {\n\t\t\t\t\tglobal $wpdb;\n\t\t\t\t\t$sql = \"select lead_id from {$wpdb->prefix}rg_lead_meta where meta_key='gfdpspxpay_txn_id' and meta_value = %s\";\n\t\t\t\t\t$lead_id = $wpdb->get_var($wpdb->prepare($sql, $response->transactionNumber));\n\n\t\t\t\t\t$lead = GFFormsModel::get_lead($lead_id);\n\t\t\t\t\t$form = GFFormsModel::get_form_meta($lead['form_id']);\n\t\t\t\t\t$feed = $this->getFeed($form['id']);\n\n\t\t\t\t\t// update lead entry, with success/fail details\n\t\t\t\t\tif ($response->success) {\n\t\t\t\t\t\t$lead['payment_status']\t\t= 'Approved';\n\t\t\t\t\t\t$lead['payment_date']\t\t= date('Y-m-d H:i:s');\n\t\t\t\t\t\t$lead['payment_amount']\t\t= $response->amount;\n\t\t\t\t\t\t$lead['transaction_id']\t\t= $response->txnRef;\n\t\t\t\t\t\t$lead['transaction_type']\t= 1;\t// order\n\t\t\t\t\t\t$lead['authcode']\t\t\t= $response->authCode;\n\t\t\t\t\t\tif (!empty($response->currencySettlement)) {\n\t\t\t\t\t\t\t$lead['currency']\t\t\t= $response->currencySettlement;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself::log_debug(sprintf('success, date = %s, id = %s, status = %s, amount = %s, authcode = %s',\n\t\t\t\t\t\t\t$lead['payment_date'], $lead['transaction_id'], $lead['payment_status'],\n\t\t\t\t\t\t\t$lead['payment_amount'], $response->authCode));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$lead['payment_status']\t\t= 'Failed';\n\t\t\t\t\t\t$lead['transaction_id']\t\t= $response->txnRef;\n\t\t\t\t\t\t$lead['transaction_type']\t= 1;\t// order\n\n\t\t\t\t\t\t// record empty bank authorisation code, so that we can test for it\n\t\t\t\t\t\t$lead['authcode'] = '';\n\n\t\t\t\t\t\tself::log_debug(sprintf('failed; %s', $response->statusText));\n\t\t\t\t\t}\n\n\t\t\t\t\t// update the entry\n\t\t\t\t\tif (class_exists('GFAPI')) {\n\t\t\t\t\t\tGFAPI::update_entry($lead);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tGFFormsModel::update_lead($lead);\n\t\t\t\t\t}\n\n\t\t\t\t\t// if order hasn't been fulfilled, and have defered actions, act now!\n\t\t\t\t\t$this->processDelayed($feed, $lead, $form);\n\n\t\t\t\t\t// on failure, redirect to failure page if set, otherwise fall through to redirect back to confirmation page\n\t\t\t\t\tif ($lead['payment_status']\t== 'Failed') {\n\t\t\t\t\t\tif ($feed->UrlFail) {\n\t\t\t\t\t\t\twp_redirect($feed->UrlFail);\n\t\t\t\t\t\t\texit;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// redirect to Gravity Forms page, passing form and lead IDs, encoded to deter simple attacks\n\t\t\t\t\t$query = \"form_id={$lead['form_id']}&lead_id={$lead['id']}\";\n\t\t\t\t\t$query .= \"&hash=\" . wp_hash($query);\n\t\t\t\t\twp_redirect(add_query_arg(array(self::PXPAY_RETURN => base64_encode($query)), $lead['source_url']));\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (GFDpsPxPayException $e) {\n\t\t\t\t// TODO: what now?\n\t\t\t\techo nl2br(esc_html($e->getMessage()));\n\t\t\t\tself::log_error(__METHOD__ . ': ' . $e->getMessage());\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* payment processed and recorded, show confirmation message / page\n\t*/\n\tpublic function processFormConfirmation() {\n\t\t// check for redirect to Gravity Forms page with our encoded parameters\n\t\tif (isset($_GET[self::PXPAY_RETURN])) {\n\t\t\tdo_action('gfdpspxpay_process_confirmation');\n\n\t\t\t// decode the encoded form and lead parameters\n\t\t\tparse_str(base64_decode($_GET[self::PXPAY_RETURN]), $query);\n\n\t\t\t// make sure we have a match\n\t\t\tif (wp_hash(\"form_id={$query['form_id']}&lead_id={$query['lead_id']}\") == $query['hash']) {\n\n\t\t\t\t// stop WordPress SEO from stripping off our query parameters and redirecting the page\n\t\t\t\tglobal $wpseo_front;\n\t\t\t\tif (isset($wpseo_front)) {\n\t\t\t\t\tremove_action('template_redirect', array($wpseo_front, 'clean_permalink'), 1);\n\t\t\t\t}\n\n\t\t\t\t// load form and lead data\n\t\t\t\t$form = GFFormsModel::get_form_meta($query['form_id']);\n\t\t\t\t$lead = GFFormsModel::get_lead($query['lead_id']);\n\n\t\t\t\t// get confirmation page\n\t\t\t\tif (!class_exists('GFFormDisplay')) {\n\t\t\t\t\trequire_once(GFCommon::get_base_path() . '/form_display.php');\n\t\t\t\t}\n\t\t\t\t$confirmation = GFFormDisplay::handle_confirmation($form, $lead, false);\n\n\t\t\t\t// preload the GF submission, ready for processing the confirmation message\n\t\t\t\tGFFormDisplay::$submission[$form['id']] = array(\n\t\t\t\t\t'is_confirmation'\t\t=> true,\n\t\t\t\t\t'confirmation_message'\t=> $confirmation,\n\t\t\t\t\t'form'\t\t\t\t\t=> $form,\n\t\t\t\t\t'lead'\t\t\t\t\t=> $lead,\n\t\t\t\t);\n\n\t\t\t\t// if it's a redirection (page or other URL) then do the redirect now\n\t\t\t\tif (is_array($confirmation) && isset($confirmation['redirect'])) {\n\t\t\t\t\theader('Location: ' . $confirmation['redirect']);\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* process any delayed actions\n\t* @param GFDpsPxPayFeed $feed\n\t* @param array $lead\n\t* @param array $form\n\t*/\n\tprotected function processDelayed($feed, $lead, $form) {\n\t\t// go no further if we've already done this\n\t\tif ($lead['is_fulfilled']) {\n\t\t\treturn;\n\t\t}\n\n\t\t// default to only performing delayed actions if payment was successful, unless feed opts to always execute\n\t\t// can filter each delayed action to permit / deny execution\n\t\t$execute_delayed = ($lead['payment_status'] == 'Approved') || $feed->ExecDelayedAlways;\n\n\t\tif ($feed->DelayPost) {\n\t\t\tif (apply_filters('gfdpspxpay_delayed_post_create', $execute_delayed, $lead, $form, $feed)) {\n\t\t\t\t$this->log_debug(sprintf('executing delayed post creation; form id %s, lead id %s', $form['id'], $lead['id']));\n\t\t\t\tGFFormsModel::create_post($form, $lead);\n\t\t\t}\n\t\t}\n\n\t\tif ($feed->DelayNotify || $feed->DelayAutorespond) {\n\t\t\t$this->sendDeferredNotifications($feed, $form, $lead, $execute_delayed);\n\t\t}\n\n\t\t// record that basic delayed actions have been fulfilled, before attempting things that might fail\n\t\tGFFormsModel::update_lead_property($lead['id'], 'is_fulfilled', true);\n\n\t\tif ($feed->DelayUserrego && class_exists('GFUser')) {\n\t\t\tif (apply_filters('gfdpspxpay_delayed_user_create', $execute_delayed, $lead, $form, $feed)) {\n\t\t\t\t$this->log_debug(sprintf('executing delayed user creation; form id %s, lead id %s', $form['id'], $lead['id']));\n\t\t\t\tGFUser::gf_create_user($lead, $form, true);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* send deferred notifications, handling pre- and post-1.7.0 worlds\n\t* @param GFDpsPxPayFeed $feed\n\t* @param array $form the form submission data\n\t* @param array $lead the form entry\n\t* @param bool $execute_delayed\n\t*/\n\tprotected function sendDeferredNotifications($feed, $form, $lead, $execute_delayed) {\n\t\tif (self::versionCompareGF('1.7.0', '<')) {\n\t\t\t// pre-1.7.0 notifications\n\t\t\tif ($feed->DelayNotify) {\n\t\t\t\tif (apply_filters('gfdpspxpay_delayed_notification_send', $execute_delayed, 'admin', $lead, $form, $feed)) {\n\t\t\t\t\tGFCommon::send_admin_notification($form, $lead);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($feed->DelayAutorespond) {\n\t\t\t\tif (apply_filters('gfdpspxpay_delayed_notification_send', $execute_delayed, 'user', $lead, $form, $feed)) {\n\t\t\t\t\tGFCommon::send_user_notification($form, $lead);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$notifications = GFCommon::get_notifications_to_send(\"form_submission\", $form, $lead);\n\t\t\tforeach ($notifications as $notification) {\n\t\t\t\tswitch (rgar($notification, 'type')) {\n\t\t\t\t\t// old \"user\" notification\n\t\t\t\t\tcase 'user':\n\t\t\t\t\t\tif ($feed->DelayAutorespond) {\n\t\t\t\t\t\t\tif (apply_filters('gfdpspxpay_delayed_notification_send', $execute_delayed, $notification, $lead, $form, $feed)) {\n\t\t\t\t\t\t\t\tGFCommon::send_notification($notification, $form, $lead);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t// old \"admin\" notification\n\t\t\t\t\tcase 'admin':\n\t\t\t\t\t\tif ($feed->DelayNotify) {\n\t\t\t\t\t\t\tif (apply_filters('gfdpspxpay_delayed_notification_send', $execute_delayed, $notification, $lead, $form, $feed)) {\n\t\t\t\t\t\t\t\tGFCommon::send_notification($notification, $form, $lead);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t// new since 1.7, add any notification you like\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (trim($notification['to']) == '{admin_email}') {\n\t\t\t\t\t\t\tif ($feed->DelayNotify) {\n\t\t\t\t\t\t\t\tif (apply_filters('gfdpspxpay_delayed_notification_send', $execute_delayed, $notification, $lead, $form, $feed)) {\n\t\t\t\t\t\t\t\t\tGFCommon::send_notification($notification, $form, $lead);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif ($feed->DelayAutorespond) {\n\t\t\t\t\t\t\t\tif (apply_filters('gfdpspxpay_delayed_notification_send', $execute_delayed, $notification, $lead, $form, $feed)) {\n\t\t\t\t\t\t\t\t\tGFCommon::send_notification($notification, $form, $lead);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* add custom merge tags\n\t* @param array $merge_tags\n\t* @param int $form_id\n\t* @param array $fields\n\t* @param int $element_id\n\t* @return array\n\t*/\n\tpublic function gformCustomMergeTags($merge_tags, $form_id, $fields, $element_id) {\n\t\tif ($form_id && $this->getFeed($form_id)) {\n\t\t\t$merge_tags[] = array('label' => 'Transaction ID', 'tag' => '{transaction_id}');\n\t\t\t$merge_tags[] = array('label' => 'Auth Code', 'tag' => '{authcode}');\n\t\t\t$merge_tags[] = array('label' => 'Payment Amount', 'tag' => '{payment_amount}');\n\t\t\t$merge_tags[] = array('label' => 'Payment Status', 'tag' => '{payment_status}');\n\t\t}\n\n\t\treturn $merge_tags;\n\t}\n\n\t/**\n\t* replace custom merge tags\n\t* @param string $text\n\t* @param array $form\n\t* @param array $lead\n\t* @param bool $url_encode\n\t* @param bool $esc_html\n\t* @param bool $nl2br\n\t* @param string $format\n\t* @return string\n\t*/\n\tpublic function gformReplaceMergeTags($text, $form, $lead, $url_encode, $esc_html, $nl2br, $format) {\n\t\t$gateway = gform_get_meta($lead['id'], 'payment_gateway');\n\t\tif ($gateway == 'gfdpspxpay') {\n\t\t\t$authCode = gform_get_meta($lead['id'], 'authcode');\n\n\t\t\t// format payment amount as currency\n\t\t\tif (isset($lead['payment_amount'])) {\n\t\t\t\tif (!class_exists('RGCurrency')) {\n\t\t\t\t\trequire_once(GFCommon::get_base_path() . '/currency.php');\n\t\t\t\t}\n\t\t\t\t$currency = new RGCurrency(!empty($lead['currency']) ? $lead['currency'] : GFCommon::get_currency());\n\t\t\t\t$payment_amount = $currency->to_money($lead['payment_amount']);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$payment_amount = '';\n\t\t\t}\n\n\t\t\t$tags = array (\n\t\t\t\t'{transaction_id}',\n\t\t\t\t'{payment_status}',\n\t\t\t\t'{payment_amount}',\n\t\t\t\t'{authcode}',\n\t\t\t);\n\t\t\t$values = array (\n\t\t\t\tisset($lead['transaction_id']) ? $lead['transaction_id'] : '',\n\t\t\t\tisset($lead['payment_status']) ? $lead['payment_status'] : '',\n\t\t\t\t$payment_amount,\n\t\t\t\t!empty($authCode) ? $authCode : '',\n\t\t\t);\n\n\t\t\t$text = str_replace($tags, $values, $text);\n\t\t}\n\n\t\treturn $text;\n\t}\n\n\t/**\n\t* activate and configure custom entry meta\n\t* @param array $entry_meta\n\t* @param int $form_id\n\t* @return array\n\t*/\n\tpublic function gformEntryMeta($entry_meta, $form_id) {\n\n\t\t$entry_meta['payment_gateway'] = array(\n\t\t\t'label'\t\t\t\t\t=> 'Payment Gateway',\n\t\t\t'is_numeric'\t\t\t=> false,\n\t\t\t'is_default_column'\t\t=> false,\n\t\t\t'filter'\t\t\t\t=> array(\n\t\t\t\t\t\t\t\t\t\t\t'operators' => array('is', 'isnot')\n\t\t\t\t\t\t\t\t\t\t),\n\t\t);\n\n\t\t$entry_meta['authcode'] = array(\n\t\t\t'label'\t\t\t\t\t=> 'AuthCode',\n\t\t\t'is_numeric'\t\t\t=> false,\n\t\t\t'is_default_column'\t\t=> false,\n\t\t\t'filter'\t\t\t\t=> array(\n\t\t\t\t\t\t\t\t\t\t\t'operators' => array('is', 'isnot')\n\t\t\t\t\t\t\t\t\t\t),\n\t\t);\n\n\t\treturn $entry_meta;\n\t}\n\n\t/**\n\t* get DPS credentials for selected operation mode\n\t* @param bool $useTest\n\t* @return array\n\t*/\n\tprotected function getDpsCredentials($useTest) {\n\t\tif ($useTest) {\n\t\t\treturn array($this->options['testID'], $this->options['testKey']);\n\t\t}\n\t\telse {\n\t\t\treturn array($this->options['userID'], $this->options['userKey']);\n\t\t}\n\t}\n\n\t/**\n\t* check whether this form entry's unique ID has already been used; if so, we've already done a payment attempt.\n\t* @param array $form\n\t* @return boolean\n\t*/\n\tprotected function hasFormBeenProcessed($form) {\n\t\tglobal $wpdb;\n\n\t\t$unique_id = GFFormsModel::get_form_unique_id($form['id']);\n\n\t\t$sql = \"select lead_id from {$wpdb->prefix}rg_lead_meta where meta_key='gfdpspxpay_unique_id' and meta_value = %s\";\n\t\t$lead_id = $wpdb->get_var($wpdb->prepare($sql, $unique_id));\n\n\t\tif ($lead_id) {\n\t\t\t$entry = GFFormsModel::get_lead($this->txResult['lead_id']);\n\t\t}\n\n\t\treturn !empty($entry['payment_status']);\n\t}\n\n\t/**\n\t* get feed for form\n\t* @param int $form_id the submitted form's ID\n\t* @return GFDpsPxPayFeed\n\t*/\n\tprotected function getFeed($form_id) {\n\t\tif ($this->feed !== false && (empty($this->feed) || $this->feed->FormID != $form_id)) {\n\t\t\t$this->feed = GFDpsPxPayFeed::getFormFeed($form_id);\n\t\t}\n\n\t\treturn $this->feed;\n\t}\n\n\t/**\n\t* get form data for form\n\t* @param array $form the form submission data\n\t* @return GFDpsPxPayFormData\n\t*/\n\tprotected function getFormData($form) {\n\t\tif (empty($this->formData) || $this->formData->formID != $form['id']) {\n\t\t\t$feed = $this->getFeed($form['id']);\n\t\t\t$this->formData = new GFDpsPxPayFormData($form, $feed);\n\t\t}\n\n\t\treturn $this->formData;\n\t}\n\n\t/**\n\t* enable Gravity Forms Logging Add-On support for this plugin\n\t* @param array $plugins\n\t* @return array\n\t*/\n\tpublic function enableLogging($plugins){\n\t\t$plugins['gfdpspxpay'] = 'Gravity Forms DPS PxPay';\n\n\t\treturn $plugins;\n\t}\n\n\t/**\n\t* write an error log via the Gravity Forms Logging Add-On\n\t* @param string $message\n\t*/\n\tpublic static function log_error($message){\n\t\tif (class_exists('GFLogging')) {\n\t\t\tGFLogging::include_logger();\n\t\t\tGFLogging::log_message('gfdpspxpay', $message, KLogger::ERROR);\n\t\t}\n\t}\n\n\t/**\n\t* write an debug message log via the Gravity Forms Logging Add-On\n\t* @param string $message\n\t*/\n\tpublic static function log_debug($message){\n\t\tif (class_exists('GFLogging')) {\n\t\t\tGFLogging::include_logger();\n\t\t\tGFLogging::log_message('gfdpspxpay', $message, KLogger::DEBUG);\n\t\t}\n\t}\n\n\t/**\n\t* send data via HTTP and return response\n\t* @param string $data\n\t* @param bool $sslVerifyPeer whether to validate the SSL certificate\n\t* @return string $response\n\t* @throws GFDpsPxPayCurlException\n\t*/\n\tpublic static function curlSendRequest($data, $sslVerifyPeer = true) {\n\t\t$plugin = self::getInstance();\n\t\t$url = $plugin->getApiUrl();\n\n\t\t// send data via HTTPS and receive response\n\t\t$response = wp_remote_post($url, array(\n\t\t\t'user-agent'\t=> 'Gravity Forms DPS PxPay ' . GFDPSPXPAY_PLUGIN_VERSION,\n\t\t\t'sslverify'\t\t=> $sslVerifyPeer,\n\t\t\t'timeout'\t\t=> 60,\n\t\t\t'headers'\t\t=> array('Content-Type' => 'text/xml; charset=utf-8'),\n\t\t\t'body'\t\t\t=> $data,\n\t\t));\n\n\t\tif (is_wp_error($response)) {\n\t\t\tthrow new GFDpsPxPayCurlException($response->get_error_message());\n\t\t}\n\n\t\treturn $response['body'];\n\t}\n\n\t/**\n\t* compare Gravity Forms version against target\n\t* @param string $target\n\t* @param string $operator\n\t* @return bool\n\t*/\n\tpublic static function versionCompareGF($target, $operator) {\n\t\tif (class_exists('GFCommon')) {\n\t\t\treturn version_compare(GFCommon::$version, $target, $operator);\n\t\t}\n\n\t\treturn false;\n\t}\n\n}\n", "<?php\n/*\n* Classes for dealing with a DPS PxPay result request\n* copyright (c) 2013 WebAware Pty Ltd, released under GPL v2.1\n*/\n\n/**\n* DPS PxPay result request\n*/\nclass GFDpsPxPayResult {\n\t// environment / website specific members\n\t/**\n\t* default true, whether to validate the remote SSL certificate\n\t* @var boolean\n\t*/\n\tpublic $sslVerifyPeer;\n\n\t// payment specific members\n\t/**\n\t* account name / email address at DPS PxPay\n\t* @var string max. 8 characters\n\t*/\n\tpublic $userID;\n\n\t/**\n\t* account name / email address at DPS PxPay\n\t* @var string max. 8 characters\n\t*/\n\tpublic $userKey;\n\n\t/**\n\t* encrypted transaction result, to be decrypted by DPS PxPay service\n\t* @var string\n\t*/\n\tpublic $result;\n\n\t/**\n\t* populate members with defaults, and set account and environment information\n\t* @param string $userID DPS PxPay account ID\n\t* @param string $userKey DPS PxPay encryption key\n\t*/\n\tpublic function __construct($userID, $userKey) {\n\t\t$this->sslVerifyPeer = true;\n\t\t$this->userID = $userID;\n\t\t$this->userKey = $userKey;\n\t}\n\n\t/**\n\t* process a result against DPS PxPay; throws exception on error with error described in exception message.\n\t*/\n\tpublic function processResult() {\n\t\t$xml = $this->getResultXML();\n\t\treturn $this->sendResultRequest($xml);\n\t}\n\n\t/**\n\t* create XML request document for result parameters\n\t* @return string\n\t*/\n\tpublic function getResultXML() {\n\t\t$xml = new XMLWriter();\n\t\t$xml->openMemory();\n\t\t$xml->startDocument('1.0', 'UTF-8');\n\t\t$xml->startElement('ProcessResponse');\n\n\t\t$xml->writeElement('PxPayUserId', substr($this->userID, 0, 32));\n\t\t$xml->writeElement('PxPayKey', substr($this->userKey, 0, 64));\n\t\t$xml->writeElement('Response', $this->result);\n\n\t\t$xml->endElement();\t\t// ProcessResponse\n\n\t\treturn $xml->outputMemory();\n\t}\n\n\t/**\n\t* send the DPS PxPay payment request and retrieve and parse the response\n\t* @param string $xml DPS PxPay payment request as an XML document, per DPS PxPay specifications\n\t* @return GFDpsPxPayResultResponse\n\t* @throws GFDpsPxPayException\n\t*/\n\tprotected function sendResultRequest($xml) {\n\t\t// execute the cURL request, and retrieve the response\n\t\ttry {\n\t\t\t$responseXML = GFDpsPxPayPlugin::curlSendRequest($xml, $this->sslVerifyPeer);\n\t\t}\n\t\tcatch (GFDpsPxPayCurlException $e) {\n\t\t\tthrow new GFDpsPxPayException(\"Error posting DPS PxPay result request: \" . $e->getMessage());\n\t\t}\n\n\t\t$response = new GFDpsPxPayResultResponse();\n\t\t$response->loadResponseXML($responseXML);\n\t\treturn $response;\n\t}\n}\n\n/**\n* DPS PxPay payment result response\n*/\nclass GFDpsPxPayResultResponse {\n\t/**\n\t* whether it was a successful request\n\t* @var boolean\n\t*/\n\tpublic $isValid;\n\n\t/**\n\t* For a successful transaction \"True\" is passed and for a failed transaction \"False\" is passed.\n\t* @var boolean\n\t*/\n\tpublic $success;\n\n\t/**\n\t* total amount of payment as processed, in dollars and cents as a floating-point number\n\t* @var float\n\t*/\n\tpublic $amount;\n\n\t/**\n\t* If the transaction is successful, this is the bank authorisation number.\n\t* @var string max. 22 characters\n\t*/\n\tpublic $authCode;\n\n\t/**\n\t* name on credit card\n\t* @var string max. 64 characters\n\t*/\n\tpublic $cardHoldersName;\n\n\t/**\n\t* name of credit card, e.g. Visa, Mastercard, Amex, Diners\n\t* @var string max. 16 characters\n\t*/\n\tpublic $cardName;\n\n\t/**\n\t* credit card number, with no spaces, obfuscated\n\t* @var string max. 16 characters\n\t*/\n\tpublic $cardNumber;\n\n\t/**\n\t* month of expiry, as MM\n\t* @var string max. 2 digits\n\t*/\n\tpublic $cardExpiryMonth;\n\n\t/**\n\t* year of expiry, as YY\n\t* @var string max. 2 digits\n\t*/\n\tpublic $cardExpiryYear;\n\n\t/**\n\t* NB. This number is returned as 'DpsTxnRef'\n\t* @var string max. 16 characters\n\t*/\n\tpublic $txnRef;\n\n\t/**\n\t* textual response status, e.g. APPROVED\n\t* @var string max. 32 characters\n\t*/\n\tpublic $statusText;\n\n\t/**\n\t* DPS-generated billing ID for recurring payments\n\t* @var string max. 16 characters\n\t*/\n\tpublic $recurringID;\n\n\t/**\n\t* the currency of the settlement\n\t* @var string max. 4 characters\n\t*/\n\tpublic $currencySettlement;\n\n\t/**\n\t* the currency of the payment request\n\t* @var string max. 4 characters\n\t*/\n\tpublic $currencyInput;\n\n\t/**\n\t* optional additional information for use in shopping carts, etc.\n\t* @var string max. 255 characters\n\t*/\n\tpublic $option1;\n\n\t/**\n\t* optional additional information for use in shopping carts, etc.\n\t* @var string max. 255 characters\n\t*/\n\tpublic $option2;\n\n\t/**\n\t* optional additional information for use in shopping carts, etc.\n\t* @var string max. 255 characters\n\t*/\n\tpublic $option3;\n\n\t/**\n\t* type of transaction (Purchase, Auth)\n\t* @var string max. 8 characters\n\t*/\n\tpublic $txnType;\n\n\t/**\n\t* an invoice reference to track by\n\t* @var string max. 64 characters\n\t*/\n\tpublic $invoiceReference;\n\n\t/**\n\t* IP address of the client\n\t* @var string\n\t*/\n\tpublic $clientIP;\n\n\t/**\n\t* transaction number passed in payment request\n\t* @var string max. 16 characters\n\t*/\n\tpublic $transactionNumber;\n\n\t/**\n\t* customer's email address\n\t* @var string max. 255 characters\n\t*/\n\tpublic $emailAddress;\n\n\t/**\n\t* additional billing ID for recurring payments as passed in payment request\n\t* @var string max. 32 characters\n\t*/\n\tpublic $billingID;\n\n\t/**\n\t* indication of uniqueness of card number\n\t* @var string\n\t*/\n\tpublic $txnMac;\n\n\t/**\n\t* a token generated by DPS when adding a card for recurring billing\n\t* @var string max. 16 characters\n\t*/\n\tpublic $cardNumber2;\n\n\t/**\n\t* CVC / CVV2 Result Code associated with the result of the CVC validation\n\t* @var string max. 1 character\n\t*/\n\tpublic $cvc2ResultCode;\n\n\t/**\n\t* load DPS PxPay response data as XML string\n\t* @param string $response DPS PxPay response as a string (hopefully of XML data)\n\t* @throws GFDpsPxPayException\n\t*/\n\tpublic function loadResponseXML($response) {\n\t\t// prevent XML injection attacks, and handle errors without warnings\n\t\t$oldDisableEntityLoader = libxml_disable_entity_loader(TRUE);\n\t\t$oldUseInternalErrors = libxml_use_internal_errors(TRUE);\n\n\t\ttry {\n\t\t\t$xml = simplexml_load_string($response);\n\t\t\tif ($xml === false) {\n\t\t\t\t$errmsg = '';\n\t\t\t\tforeach (libxml_get_errors() as $error) {\n\t\t\t\t\t$errmsg .= $error->message;\n\t\t\t\t}\n\t\t\t\tthrow new Exception($errmsg);\n\t\t\t}\n\n\t\t\t$this->isValid = ('1' === ((string) $xml['valid']));\n\t\t\t$this->success = !!((int) $xml->Success);\n\t\t\t$this->amount = (float) $xml->AmountSettlement;\n\t\t\t$this->authCode = (string) $xml->AuthCode;\n\t\t\t$this->cardHoldersName = (string) $xml->CardHolderName;\n\t\t\t$this->cardName = (string) $xml->CardName;\n\t\t\t$this->cardNumber = (string) $xml->CardNumber;\n\t\t\t$this->txnRef = (string) $xml->DpsTxnRef;\n\t\t\t$this->statusText = (string) $xml->ResponseText;\n\t\t\t$this->recurringID = (string) $xml->DpsBillingId;\n\t\t\t$this->currencySettlement = (string) $xml->CurrencySettlement;\n\t\t\t$this->currencyInput = (string) $xml->CurrencyInput;\n\t\t\t$this->option1 = (string) $xml->TxnData1;\n\t\t\t$this->option2 = (string) $xml->TxnData2;\n\t\t\t$this->option3 = (string) $xml->TxnData3;\n\t\t\t$this->txnType = (string) $xml->TxnType;\n\t\t\t$this->invoiceReference = (string) $xml->MerchantReference;\n\t\t\t$this->clientIP = (string) $xml->ClientInfo;\n\t\t\t$this->transactionNumber = (string) $xml->TxnId;\n\t\t\t$this->emailAddress = (string) $xml->EmailAddress;\n\t\t\t$this->billingID = (string) $xml->BillingId;\n\t\t\t$this->txnMac = (string) $xml->TxnMac;\n\t\t\t$this->cardNumber2 = (string) $xml->CardNumber2;\n\t\t\t$this->cvc2ResultCode = (string) $xml->Cvc2ResultCode;\n\n\t\t\t$cardExpiry = (string) $xml->DateExpiry;\n\t\t\t$this->cardExpiryMonth = substr($cardExpiry, 0, 2);\n\t\t\t$this->cardExpiryYear = substr($cardExpiry, 2, 2);\n\n\t\t\t// restore old libxml settings\n\t\t\tlibxml_disable_entity_loader($oldDisableEntityLoader);\n\t\t\tlibxml_use_internal_errors($oldUseInternalErrors);\n\t\t}\n\t\tcatch (Exception $e) {\n\t\t\t// restore old libxml settings\n\t\t\tlibxml_disable_entity_loader($oldDisableEntityLoader);\n\t\t\tlibxml_use_internal_errors($oldUseInternalErrors);\n\n\t\t\tthrow new GFDpsPxPayException('Error parsing DPS PxPay result request: ' . $e->getMessage());\n\t\t}\n\n\t\t// if response is \"invalid\", throw error with message given in statusText field\n\t\tif (!$this->isValid) {\n\t\t\tthrow new GFDpsPxPayException('Error from DPS PxPay result: ' . $this->statusText);\n\t\t}\n\t}\n}\n", "# Gravity Forms DPS PxPay #\n\nIntegrate [Gravity Forms](http://webaware.com.au/get-gravity-forms) with the DPS Payment Express PxPay credit card payment gateway\n\n* [Home](http://shop.webaware.com.au/downloads/gravity-forms-dps-pxpay/)\n* [GitHub](https://github.com/webaware/gravity-forms-dps-pxpay/)\n* [Readme](https://github.com/webaware/gravity-forms-dps-pxpay/blob/master/readme.txt)\n* [Download](http://wordpress.org/plugins/gravity-forms-dps-pxpay/)\n* [Documentation](http://wordpress.org/plugins/gravity-forms-dps-pxpay/faq/)\n* [Support](http://wordpress.org/support/plugin/gravity-forms-dps-pxpay)\n* [Donate](http://shop.webaware.com.au/downloads/gravity-forms-dps-pxpay/)\n", "=== Gravity Forms DPS PxPay ===\nContributors: webaware, IstanbulMMV\nPlugin Name: Gravity Forms DPS PxPay\nPlugin URI: http://shop.webaware.com.au/downloads/gravity-forms-dps-pxpay/\nAuthor URI: http://webaware.com.au/\nDonate link: http://shop.webaware.com.au/downloads/gravity-forms-dps-pxpay/\nTags: gravityforms, gravity forms, gravity, dps, payment express, pxpay, donation, donations, payment, payment gateway, ecommerce, credit cards, new zealand, australia\nRequires at least: 3.7.1\nTested up to: 4.2\nStable tag: 1.4.2\nLicense: GPLv2 or later\nLicense URI: http://www.gnu.org/licenses/gpl-2.0.html\n\nIntegrate Gravity Forms with the DPS Payment Express PxPay credit card payment gateway\n\n== Description ==\n\nGravity Forms DPS PxPay adds a credit card payment gateway for [DPS PxPay](http://www.paymentexpress.com/Products/Ecommerce/DPS_Hosted) to the [Gravity Forms](http://webaware.com.au/get-gravity-forms) plugin.\n\n* build online donation forms\n* build online booking forms\n* build simple Buy Now forms\n\n> NB: this plugin extends [Gravity Forms](http://webaware.com.au/get-gravity-forms); you still need to install and activate Gravity Forms!\n\n= Sponsorships =\n\n* creation of this plugin was generously sponsored by [IstanbulMMV](http://profiles.wordpress.org/IstanbulMMV/profile/)\n\nThanks for sponsoring new features on Gravity Forms DPS PxPay!\n\n= Requirements: =\n\n* Install the [Gravity Forms](http://webaware.com.au/get-gravity-forms) plugin\n* Create an account with DPS for [PxPay](https://sec.paymentexpress.com/pxmi/apply)\n\n== Installation ==\n\n1. Install and activate the [Gravity Forms](http://webaware.com.au/get-gravity-forms) plugin\n2. Upload the Gravity Forms DPS PxPay plugin to your /wp-content/plugins/ directory.\n3. Activate the Gravity Forms DPS PxPay plugin through the 'Plugins' menu in WordPress.\n4. Edit the DPS PxPay payment gateway settings to set your DPS PxPay user ID and key\n\n= Building a Gravity Form with Credit Card Payments =\n\n* add one or more Product fields or a Total field to your form. The plugin will automatically detect the values assigned to these pricing fields\n* if required, add customer name and contact information fields to your form. These optional fields can be mapped when creating a DPS PxPay feed and their values stored against each transaction in your DPS Payline console\n* add a DPS PxPay feed, mapping your form fields to DPS PxPay transaction fields (Merchant Reference, TxnData1, TxnData2, TxnData3)\n\n== Frequently Asked Questions ==\n\n= What is DPS PxPay? =\n\nDPS PxPay is a hosted Credit Card payment gateway. DPS Payment Express is one of Australasia's leading online payments solutions providers.\n\n= Will this plugin work without installing Gravity Forms? =\n\nNo. This plugin adds a DPS Payment Express PxPay payment gateway to Gravity Forms so that you can add online payments to your forms. You must purchase and install a copy of the [Gravity Forms](http://webaware.com.au/get-gravity-forms) plugin too.\n\n= What Gravity Forms license do I need? =\n\nAny Gravity Forms license will do. You can use this plugin with the Personal, Business or Developer licenses.\n\n= What is the difference between Normal and Testing (Sandbox) mode? =\n\nGravity Forms DPS PxPay enables you to store two pairs of User ID and User Key credentials. When you first signup for a PxPay account with DPS you will likely be issued development or testing credentials. Later, when you want to go live with your site, you will need to request a new User ID and User Key from DPS. Sandbox mode enables you to switch between your live and test credentials. If you only have testing credentials, both your User ID and Test ID and User Key and Test Key should be identical. In this instance, Sandbox mode can be switched either On or Off.\n\n=  Where will the customer be directed after they complete their DPS Credit Card transaction? =\n\nStandard Gravity Forms submission logic applies. The customer will either be shown your chosen confirmation message, directed to a nominated page on your website or sent to a custom URL.\n\n= Where do I find the DPS PxPay transaction number? =\n\nSuccessful transaction details including the DPS PxPay transaction number and bank authcode are shown in the Info box when you view the details of a form entry in the WordPress admin.\n\n= How do I add a confirmed payment amount and transaction number to my Gravity Forms admin or customer email? =\n\nBrowse to your Gravity Form, select [Notifications](http://www.gravityhelp.com/documentation/page/Notifications) and use the Insert Merge Tag dropdown (Payment Amount, Transaction Number and Auth Code will appear under Custom at the very bottom of the dropdown list).\n\nNB: these custom merge tags will only work if notifications are only sent after payment is accepted.\n\n= How do I change my currency type? =\n\nUse your Gravity Forms Settings page to select the currency type to pass to DPS. Please ensure your currency type is supported by DPS\n\n= Purchase or Auth? =\n\nDPS PxPay supports two transaction types - Purchase and Auth. The Gravity Forms DPS PxPay plugin only supports the Purchase transaction type\n\n= Can I do recurring payments? =\n\nNot yet.\n\n=  Where can I find dummy Credit Card details for testing purposes? =\n\n[Visit this page](http://www.paymentexpress.com/knowledge_base/faq/developer_faq.html#Testing%20Details)\n\n= I get an SSL error when my form attempts to connect with DPS =\n\nThis is a common problem in local testing environments. Please [read this post](http://snippets.webaware.com.au/howto/stop-turning-off-curlopt_ssl_verifypeer-and-fix-your-php-config/) for more information.\n\n= Can I use this plugin on any shared-hosting environment? =\n\nThe plugin will run in shared hosting environments, but requires PHP 5 with the following modules enabled (talk to your host). Both are typically available because they are enabled by default in PHP 5, but may be disabled on some shared hosts.\n\n* XMLWriter\n* SimpleXML\n\n== Screenshots ==\n\n1. Options screen\n2. A sample donation form\n3. A list of DPS PxPay feeds\n4. A DPS PxPay feed (mapping form fields to DPS PxPay)\n5. The sample donation form as it appears on a page\n6. A successful entry in Gravity Forms admin\n\n== Filter hooks ==\n\nDevelopers can use these filter hooks to modify some invoice properties. Each filter receives a string for the field value, and the Gravity Forms form array.\n\n* `gfdpspxpay_invoice_desc` for modifying the invoice description\n* `gfdpspxpay_invoice_ref` for modifying the invoice reference\n* `gfdpspxpay_invoice_trans_number` for modifying the invoice transaction reference; NB: must be unique for PxPay account!\n* `gfdpspxpay_invoice_txndata1` for setting the TxnData1 field\n* `gfdpspxpay_invoice_txndata2` for setting the TxnData2 field\n* `gfdpspxpay_invoice_txndata3` for setting the TxnData3 field\n\nDevelopers can run processes on these actions (e.g. load classes required to handle invoice presentation):\n\n* `gfdpspxpay_process_return`\n* `gfdpspxpay_process_confirmation`\n\n== Contributions ==\n\n* [Fork me on GitHub](https://github.com/webaware/gravity-forms-dps-pxpay/)\n\n== Changelog ==\n\n= 1.4.2, 2014-12-23 =\n* added: hooks `gfdpspxpay_process_return` and `gfdpspxpay_process_confirmation`\n* changed: merge tags use currency of transaction for amount display\n\n= 1.4.1, 2014-11-22 =\n* fixed: **IMPORTANT**: forms with no DPS PxPay feeds were sending blank notification emails (sorry Josh!)\n\n= 1.4.0, 2014-11-06 =\n* added: delay user registration until payment is processed\n* added: support for PxPay API v2.0, via option (default is v2.0 for new installs)\n* added: custom entry meta `authcode` and `payment_gateway` which can be added to listings, used in notification conditions\n* fixed: Gravity Forms 1.9 compatibility\n* changed: **IMPORTANT**: defaults to only processing delayed notifications, post creation, user rego, on successful payment\n* changed: order feeds in admin by name, not by date created\n* changed: code formatting, removed some unused variables\n* changed: minimum requirements now WordPress 3.7.1, Gravity Forms 1.7\n\n= 1.3.3, 2014-08-15 =\n* added: basic support for Gravity Forms Logging Add-On, to assist support requests\n\n= 1.3.2, 2014-06-25 =\n* fixed: Gravity Forms 1.8.9 Payment Details box on entry details\n\n= 1.3.1, 2014-06-12 =\n* fixed: admin scripts / stylesheet not loading, feed admin broken\n* fixed: don't attempt to make a payment when the total is 0, so form entry can still be submitted\n\n= 1.3.0, 2014-06-07 =\n* fixed: hidden products are now correctly handled\n* fixed: shipping is now correctly handled\n* fixed: RGFormsModel::update_lead() is deprecated in Gravity Forms v1.8.8\n* changed: move authcode into Gravity Forms 1.8.8 Payment Details box on entry details\n* changed: merge template for payment amount is now formatted as currency\n* changed: save transaction reference for failed transactions too\n* changed: some code refactoring\n\n= 1.2.1, 2014-05-14 =\n* fixed: products with separate quantity fields fail\n* fixed: undefined index 'post_status' when saving feed\n\n= 1.2.0, 2014-01-17 =\n* fixed: transaction ID was not unique between installations with same account\n* fixed: settings wouldn't save in WordPress multisite installations\n* fixed: Get Help link to support forum\n* added: filters for altering PxPay transaction properties\n* added: custom merge field for payment status\n* changed: DPS PxPay settings page is now a Gravity Forms settings subpage, like other addons\n* changed: some code refactoring for maintenance / compatibility\n\n= 1.1.0, 2013-04-26 =\n* fixed: Gravity Forms 1.7 compatibility fixes for deferring the new multiple notifications\n* fixed: WordPress SEO setting \"Redirect ugly URL's to clean permalinks\" breaks many things, including this plugin (but not any more)\n* fixed: nonce (number once) handling in settings admin\n* added: entries links on feeds admin\n\n= 1.0.1, 2013-04-12 =\n* fixed: amounts greater than 999.99 work correctly (was getting an IU error on Payment Express screen)\n* fixed: don't squabble with other plugins for custom merge tags of same name\n* fixed: don't stomp on admin page icons for other Gravity Forms plugins\n\n= 1.0.0, 2013-01-25 =\n* initial public release\n\n== Upgrade Notice ==\n\n= 1.4.1 =\n* **IMPORTANT**: forms with no DPS PxPay feeds were sending blank notification emails, fixed in this release\n\n= 1.4.0 =\n* **IMPORTANT**: defaults to only processing delayed notifications, post creation, user rego, on successful payment\n", "\n<div style=\"display:none;\">\n<?php submit_button( __( 'Save' ), 'button', 'save' ); ?>\n<input type=\"hidden\" name=\"post_status\" value=\"publish\" />\n</div>\n\n<div id=\"major-publishing-actions\">\n<?php do_action('post_submitbox_start'); ?>\n<div id=\"delete-action\">\n<?php\nif ( current_user_can( \"delete_post\", $post->ID ) ) {\n\tif ( !EMPTY_TRASH_DAYS )\n\t\t$delete_text = __('Delete Permanently');\n\telse\n\t\t$delete_text = __('Move to Trash');\n\t?>\n\t<a class=\"submitdelete deletion\" href=\"<?php echo get_delete_post_link($post->ID); ?>\"><?php echo $delete_text; ?></a><?php\n} ?>\n</div>\n\n<div id=\"publishing-action\">\n<span class=\"spinner\"></span>\n\t<input name=\"original_publish\" type=\"hidden\" id=\"original_publish\" value=\"Save\" />\n\t<?php submit_button('Save', 'primary button-large', 'publish', false, array() ); ?>\n</div>\n<div class=\"clear\"></div>\n\n</div>\n\n", "\n<div class=\"error\">\n\t<p>Gravity Forms DPS PxPay requires these missing PHP extensions. Please contact your website host to have these extensions installed.</p>\n\t<ul style=\"list-style-type: disc; padding-left: 2em;\">\n\t<?php foreach ($missing as $ext): if (!extension_loaded($ext)): ?>\n\t\t<li><?php echo $ext; ?></li>\n\t<?php endif; endforeach; ?>\n\t</ul>\n</div>\n"], "fixing_code": ["<?php\n/*\nPlugin Name: Gravity Forms DPS PxPay\nPlugin URI: http://shop.webaware.com.au/downloads/gravity-forms-dps-pxpay/\nDescription: Integrates Gravity Forms with DPS PxPay payment gateway, enabling end users to purchase goods and services through Gravity Forms.\nVersion: 1.4.3\nAuthor: WebAware\nAuthor URI: http://webaware.com.au/\n*/\n\n/*\ncopyright (c) 2013-2015 WebAware Pty Ltd (email : support@webaware.com.au)\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\nas published by the Free Software Foundation; either version 2\nof the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n*/\n\nif (!defined('ABSPATH')) {\n\texit;\n}\n\ndefine('GFDPSPXPAY_PLUGIN_ROOT', dirname(__FILE__) . '/');\ndefine('GFDPSPXPAY_PLUGIN_NAME', basename(dirname(__FILE__)) . '/' . basename(__FILE__));\ndefine('GFDPSPXPAY_PLUGIN_FILE', __FILE__);\ndefine('GFDPSPXPAY_PLUGIN_OPTIONS', 'gfdpspxpay_plugin');\ndefine('GFDPSPXPAY_PLUGIN_VERSION', '1.4.3');\n\n// custom post types\ndefine('GFDPSPXPAY_TYPE_FEED', 'gfdpspxpay_feed');\n\n/**\n* autoload classes as/when needed\n*\n* @param string $class_name name of class to attempt to load\n*/\nfunction gfdpspxpay_autoload($class_name) {\n\tstatic $classMap = array (\n\t\t'GFDpsPxPayAdmin'\t\t\t\t\t\t=> 'includes/class.GFDpsPxPayAdmin.php',\n\t\t'GFDpsPxPayFeed'\t\t\t\t\t\t=> 'includes/class.GFDpsPxPayFeed.php',\n\t\t'GFDpsPxPayFeedAdmin'\t\t\t\t\t=> 'includes/class.GFDpsPxPayFeedAdmin.php',\n\t\t'GFDpsPxPayFormData'\t\t\t\t\t=> 'includes/class.GFDpsPxPayFormData.php',\n\t\t'GFDpsPxPayPayment'\t\t\t\t\t\t=> 'includes/class.GFDpsPxPayPayment.php',\n\t\t'GFDpsPxPayPlugin'\t\t\t\t\t\t=> 'includes/class.GFDpsPxPayPlugin.php',\n\t\t'GFDpsPxPayResult'\t\t\t\t\t\t=> 'includes/class.GFDpsPxPayResult.php',\n\t);\n\n\tif (isset($classMap[$class_name])) {\n\t\trequire GFDPSPXPAY_PLUGIN_ROOT . $classMap[$class_name];\n\t}\n}\nspl_autoload_register('gfdpspxpay_autoload');\n\n// instantiate the plug-in\nGFDpsPxPayPlugin::getInstance();\n", "<?php\n\n/**\n* class for admin screens\n*/\nclass GFDpsPxPayAdmin {\n\n\tprotected $plugin;\n\n\t/**\n\t* @param GFDpsPxPayPlugin $plugin\n\t*/\n\tpublic function __construct($plugin) {\n\t\t$this->plugin = $plugin;\n\n\t\t// admin hooks\n\t\tadd_action('admin_init', array($this, 'adminInit'));\n\t\tadd_action('admin_notices', array($this, 'checkPrerequisites'));\n\t\tadd_action('plugin_action_links_' . GFDPSPXPAY_PLUGIN_NAME, array($this, 'addPluginActionLinks'));\n\t\tadd_filter('plugin_row_meta', array($this, 'addPluginDetailsLinks'), 10, 2);\n\t\tadd_filter('admin_enqueue_scripts', array($this, 'enqueueScripts'));\n\n\t\t// only if Gravity Forms is activated\n\t\tif (class_exists('GFCommon')) {\n\n\t\t\t// GravityForms hooks\n\t\t\tadd_filter('gform_addon_navigation', array($this, 'gformAddonNavigation'));\n\t\t\tadd_action('forms_page_gf_settings', array($this, 'adminPageGfSettings'));\n\n\t\t\t// tell Gravity Forms not to put payment details into info (i.e. do put them into the new payment details box!)\n\t\t\tadd_filter('gform_enable_entry_info_payment_details', '__return_false');\n\n\t\t\t// handle the new Payment Details box if supported\n\t\t\tif (version_compare(GFCommon::$version, '1.8.7.99999', '<')) {\n\t\t\t\t// pre-v1.8.8 settings\n\t\t\t\tadd_action('gform_entry_info', array($this, 'gformPaymentDetails'), 10, 2);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// post-v1.8.8 settings\n\t\t\t\tadd_action('gform_payment_details', array($this, 'gformPaymentDetails'), 10, 2);\n\t\t\t}\n\t\t}\n\n\t\t// AJAX actions\n\t\tadd_action('wp_ajax_gfdpspxpay_form_fields', array($this, 'ajaxGfFormFields'));\n\t\tadd_action('wp_ajax_gfdpspxpay_form_has_feed', array($this, 'ajaxGfFormHasFeed'));\n\t}\n\n\t/**\n\t* test whether GravityForms plugin is installed and active\n\t* @return boolean\n\t*/\n\tpublic static function isGfActive() {\n\t\treturn class_exists('RGForms');\n\t}\n\n\t/**\n\t* handle admin init action\n\t*/\n\tpublic function adminInit() {\n\t\tglobal $typenow;\n\n\t\t// register plugin settings\n\t\tadd_settings_section(GFDPSPXPAY_PLUGIN_OPTIONS, false, false, GFDPSPXPAY_PLUGIN_OPTIONS);\n\t\tregister_setting(GFDPSPXPAY_PLUGIN_OPTIONS, GFDPSPXPAY_PLUGIN_OPTIONS, array($this, 'settingsValidate'));\n\n\t\t// when editing pages, $typenow isn't set until later!\n\t\t// kludge thanks to WooCommerce :)\n\t\tif (empty($typenow) && !empty($_GET['post'])) {\n\t\t\t$post = get_post($_GET['post']);\n\t\t\t$typenow = $post->post_type;\n\t\t}\n\n\t\tif ($typenow && $typenow == GFDPSPXPAY_TYPE_FEED) {\n\t\t\tnew GFDpsPxPayFeedAdmin($this->plugin);\n\t\t}\n\n\t\tif (isset($_GET['page'])) {\n\t\t\tswitch ($_GET['page']) {\n\t\t\t\tcase 'gf_settings':\n\t\t\t\t\t// add our settings page to the Gravity Forms settings menu\n\t\t\t\t\tRGForms::add_settings_page('DPS PxPay', array($this, 'optionsAdmin'));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'gfdpspxpay-feeds':\n\t\t\t\t\twp_redirect(admin_url('edit.php?post_type=' . GFDPSPXPAY_TYPE_FEED));\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* enqueue our admin stylesheet\n\t*/\n\tpublic function enqueueScripts() {\n\t\t$ver = defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ? time() : GFDPSPXPAY_PLUGIN_VERSION;\n\t\twp_enqueue_style('gfdpspxpay-admin', \"{$this->plugin->urlBase}css/admin.css\", false, $ver);\n\t}\n\n\t/**\n\t* check for required prerequisites, tell admin if any are missing\n\t*/\n\tpublic function checkPrerequisites() {\n\t\t// need at least PHP 5.2.11 for libxml_disable_entity_loader()\n\t\t$php_min = '5.2.11';\n\t\tif (version_compare(PHP_VERSION, $php_min, '<')) {\n\t\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/requires-php.php';\n\t\t}\n\n\t\t// need these PHP extensions too\n\t\t$prereqs = array('libxml', 'SimpleXML', 'xmlwriter');\n\t\t$missing = array();\n\t\tforeach ($prereqs as $ext) {\n\t\t\tif (!extension_loaded($ext)) {\n\t\t\t\t$missing[] = $ext;\n\t\t\t}\n\t\t}\n\t\tif (!empty($missing)) {\n\t\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/requires-extensions.php';\n\t\t}\n\n\t\t// and of course, we need Gravity Forms\n\t\tif (!self::isGfActive()) {\n\t\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/requires-gravity-forms.php';\n\t\t}\n\t\telseif (GFDpsPxPayPlugin::versionCompareGF(GFDpsPxPayPlugin::MIN_VERSION_GF, '<')) {\n\t\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/requires-gravity-forms-upgrade.php';\n\t\t}\n\t}\n\n\t/**\n\t* action hook for adding plugin action links\n\t*/\n\tpublic function addPluginActionLinks($links) {\n\t\t// add settings link, but only if GravityForms plugin is active\n\t\tif (self::isGfActive()) {\n\t\t\t$settings_link = sprintf('<a href=\"%s\">Settings</a>', esc_url(admin_url('admin.php?page=gf_settings&subview=DPS+PxPay')));\n\t\t\tarray_unshift($links, $settings_link);\n\t\t}\n\n\t\treturn $links;\n\t}\n\n\t/**\n\t* action hook for adding plugin details links\n\t*/\n\tpublic static function addPluginDetailsLinks($links, $file) {\n\t\tif ($file == GFDPSPXPAY_PLUGIN_NAME) {\n\t\t\t$links[] = '<a href=\"https://wordpress.org/support/plugin/gravity-forms-dps-pxpay\">' . __('Get help') . '</a>';\n\t\t\t$links[] = '<a href=\"https://wordpress.org/plugins/gravity-forms-dps-pxpay/\">' . __('Rating') . '</a>';\n\t\t\t$links[] = '<a href=\"http://shop.webaware.com.au/downloads/gravity-forms-dps-pxpay/\">' . __('Donate') . '</a>';\n\t\t}\n\n\t\treturn $links;\n\t}\n\n\t/**\n\t* filter hook for building GravityForms navigation\n\t* @param array $menus\n\t* @return array\n\t*/\n\tpublic function gformAddonNavigation($menus) {\n\t\t// add menu item for feeds (NB: adds a link that is redirected to feeds post editor on admin_init action)\n\t\t$menus[] = array('name' => 'gfdpspxpay-feeds', 'label' => 'DPS PxPay', 'callback' => array($this, 'feedsAdmin'), 'permission' => 'manage_options');\n\n        return $menus;\n\t}\n\n\t/**\n\t* clean up settings-updated from settings menu links (put there by settings API because of our settings page!)\n\t*/\n\tpublic function adminPageGfSettings() {\n\t\tparse_str($_SERVER['QUERY_STRING'], $qs);\n\t\tif (isset($qs['settings-updated']) && $qs['settings-updated']) {\n\t\t\t$_SERVER['REQUEST_URI'] = remove_query_arg('settings-updated', $_SERVER['REQUEST_URI']);\n\t\t}\n\t}\n\n\t/**\n\t* action hook for building the entry details view\n\t* @param int $form_id\n\t* @param array $lead\n\t*/\n\tpublic function gformPaymentDetails($form_id, $lead) {\n\t\t$payment_gateway = gform_get_meta($lead['id'], 'payment_gateway');\n\t\tif ($payment_gateway == 'gfdpspxpay') {\n\t\t\t$authCode = gform_get_meta($lead['id'], 'authcode');\n\t\t\tif ($authCode) {\n\t\t\t\techo 'Auth Code: ', esc_html($authCode), \"<br /><br />\\n\";\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* action hook for processing admin menu item\n\t*/\n\tpublic function optionsAdmin() {\n\t\t$min = defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ? '' : '.min';\n\t\t$ver = defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ? time() : GFDPSPXPAY_PLUGIN_VERSION;\n\t\twp_enqueue_script('gfdpspxpay-options', \"{$this->plugin->urlBase}js/options-admin$min.js\", array('jquery'), $ver, true);\n\n\t\t$options = $this->plugin->options;\n\t\trequire GFDPSPXPAY_PLUGIN_ROOT . 'views/admin-settings.php';\n\t}\n\n\t/**\n\t* action hook for processing feeds menu item\n\t*/\n\tpublic function feedsAdmin() {\n\t\t// actually handled via redirect on init action...\n\t\t//~ $feedsURL = 'edit.php?post_type=' . GFDPSPXPAY_TYPE_FEED;\n\t}\n\n\t/**\n\t* validate settings on save\n\t* @param array $input\n\t* @return array\n\t*/\n\tpublic function settingsValidate($input) {\n\t\t$output = array();\n\n\t\t$output['userID']\t\t\t= trim($input['userID']);\n\t\t$output['userKey']\t\t\t= trim($input['userKey']);\n\t\t$output['testID']\t\t\t= trim($input['testID']);\n\t\t$output['testKey']\t\t\t= trim($input['testKey']);\n\t\t$output['useTest']\t\t\t= empty($input['useTest']) ? 0 : 1;\n\t\t$output['apiVersion']\t\t= empty($input['apiVersion']) ? 1 : absint($input['apiVersion']);\n\t\t$output['sslVerifyPeer']\t= 1;\t\t// always set (for now anyway!)\n\n\t\tif (empty($output['userID'])) {\n\t\t\t$msg = \"Please enter the DPS user ID.\";\n\t\t\tadd_settings_error(GFDPSPXPAY_PLUGIN_OPTIONS, '', $msg);\n\t\t}\n\n\t\tif (empty($output['userKey'])) {\n\t\t\t$msg = \"Please enter the DPS user key.\";\n\t\t\tadd_settings_error(GFDPSPXPAY_PLUGIN_OPTIONS, '', $msg);\n\t\t}\n\n\t\tif ($output['useTest']) {\n\t\t\tif (empty($output['testID'])) {\n\t\t\t\t$msg = \"Please enter the DPS test ID.\";\n\t\t\t\tadd_settings_error(GFDPSPXPAY_PLUGIN_OPTIONS, '', $msg);\n\t\t\t}\n\n\t\t\tif (empty($output['testKey'])) {\n\t\t\t\t$msg = \"Please enter the DPS test key.\";\n\t\t\t\tadd_settings_error(GFDPSPXPAY_PLUGIN_OPTIONS, '', $msg);\n\t\t\t}\n\t\t}\n\n\t\treturn $output;\n\t}\n\n\t/**\n\t* AJAX action to check for GF form already has feed, returning feed ID\n\t*/\n\tpublic function ajaxGfFormHasFeed() {\n\t\t$formID = isset($_GET['id']) ? $_GET['id'] : 0;\n\t\tif (!$formID) {\n\t\t\tdie(\"Bad form ID: $formID\");\n\t\t}\n\n\t\t$feed = GFDpsPxPayFeed::getFormFeed($formID);\n\t\techo $feed ? $feed->ID : 0;\n\t\texit;\n\t}\n\n\t/**\n\t* AJAX action for getting a list of form fields for a form\n\t*/\n\tpublic function ajaxGfFormFields() {\n\t\t$formID = isset($_GET['id']) ? $_GET['id'] : 0;\n\t\tif (!$formID) {\n\t\t\tdie(\"Bad form ID: $formID\");\n\t\t}\n\n\t\t$fields = GFDpsPxPayFeedAdmin::getFormFields($formID);\n\t\t$html = GFDpsPxPayFeedAdmin::selectFields('', $fields);\n\n\t\techo $html;\n\t\texit;\n\t}\n}\n", "<?php\n\n/**\n* Feed admin\n*/\nclass GFDpsPxPayFeedAdmin {\n\n\tprotected $plugin;\t\t\t\t\t\t\t// handle to the plugin object\n\n\t/**\n\t* @param GFDpsPxPayPlugin $plugin handle to the plugin object\n\t*/\n\tpublic function __construct($plugin) {\n\t\t$this->plugin = $plugin;\n\n\t\tadd_filter('wp_print_scripts', array($this, 'removeScripts'));\n\t\tadd_filter('parent_file', array($this, 'filterParentFile'));\n\t\tadd_filter('views_edit-'.GFDPSPXPAY_TYPE_FEED, array($this, 'filterViewsEdit'));\n\t\tadd_action('add_meta_boxes_'.GFDPSPXPAY_TYPE_FEED, array($this, 'actionAddMetaBoxes'));\n\t\tadd_action('save_post', array($this, 'saveCustomFields'), 10, 2);\n\t\tadd_filter('manage_'.GFDPSPXPAY_TYPE_FEED.'_posts_columns', array($this, 'filterManageColumns'));\n\t\tadd_filter('post_row_actions', array($this, 'filterPostRowActions'), 10, 2);\n\t\tadd_filter('wp_insert_post_data', array($this, 'filterInsertPostData'), 10, 2);\n\t\tadd_filter('post_updated_messages', array($this, 'filterPostUpdatedMessages'));\n\t\tadd_filter('parse_query', array($this, 'adminPostOrder'));\n\n\t\t$min = defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ? '' : '.min';\n\t\t$ver = defined('SCRIPT_DEBUG') && SCRIPT_DEBUG ? time() : GFDPSPXPAY_PLUGIN_VERSION;\n\t\twp_enqueue_script('gfdpspxpay-feed-admin', \"{$this->plugin->urlBase}js/feed-admin$min.js\", array('jquery'), $ver, true);\n\t}\n\n\t/**\n\t* remove some scripts we don't want loaded\n\t*/\n\tpublic function removeScripts() {\n\t\t// stop WordPress SEO breaking our tooltips!\n\t\twp_dequeue_script('wp-seo-metabox');\n\t\twp_dequeue_script('jquery-qtip');\n\t}\n\n\t/**\n\t* tell WordPress admin that Gravity Forms menu is parent page\n\t* @param string $parent_file\n\t* @return string\n\t*/\n\tpublic function filterParentFile($parent_file) {\n\t\tglobal $submenu_file;\n\n\t\t// set parent menu for filter return\n\t\t$parent_file = 'gf_edit_forms';\n\n\t\t// set submenu by side effect\n\t\t$submenu_file = 'gfdpspxpay-feeds';\n\n\t\treturn $parent_file;\n\t}\n\n\t/**\n\t* remove views we don't need from post list\n\t* @param array $views\n\t* @return array\n\t*/\n\tpublic function filterViewsEdit($views) {\n\t\tunset($views['publish']);\n\t\tunset($views['draft']);\n\n\t\treturn $views;\n\t}\n\n\t/**\n\t* add meta boxes for custom fields\n\t* @param WP_Post $post\n\t*/\n\tpublic function actionAddMetaBoxes($post) {\n\t\ttry {\n\t\t\t$feed = new GFDpsPxPayFeed();\n\t\t\tif ($post && $post->ID) {\n\t\t\t\t$feed->loadFromPost($post);\n\t\t\t}\n\t\t}\n\t\tcatch (GFDpsPxPayException $e) {\n\t\t\t// NOP -- we'll have an empty feed\n\t\t}\n\n\t\tadd_meta_box('meta_'.GFDPSPXPAY_TYPE_FEED.'_form', 'Gravity Form', array($this, 'metaboxForm'),\n\t\t\tGFDPSPXPAY_TYPE_FEED, 'normal', 'high', array('feed' => $feed));\n\t\tadd_meta_box('meta_'.GFDPSPXPAY_TYPE_FEED.'_fields', 'Map Form to Transaction', array($this, 'metaboxFields'),\n\t\t\tGFDPSPXPAY_TYPE_FEED, 'normal', 'high', array('feed' => $feed));\n\t\tadd_meta_box('meta_'.GFDPSPXPAY_TYPE_FEED.'_urls', 'Redirect URLs', array($this, 'metaboxURLs'),\n\t\t\tGFDPSPXPAY_TYPE_FEED, 'normal', 'high', array('feed' => $feed));\n\t\tadd_meta_box('meta_'.GFDPSPXPAY_TYPE_FEED.'_opts', 'Options', array($this, 'metaboxOpts'),\n\t\t\tGFDPSPXPAY_TYPE_FEED, 'normal', 'high', array('feed' => $feed));\n\t\tadd_meta_box('meta_'.GFDPSPXPAY_TYPE_FEED.'_list', 'Return to List', array($this, 'metaboxList'),\n\t\t\tGFDPSPXPAY_TYPE_FEED, 'side', 'low', array('feed' => $feed));\n\n\t\t// replace standard Publish box with a custom one\n\t\tremove_meta_box('submitdiv', GFDPSPXPAY_TYPE_FEED, 'side');\n\t\tadd_meta_box('meta_'.GFDPSPXPAY_TYPE_FEED.'_submit', 'Save', array($this, 'metaboxSave'),\n\t\t\tGFDPSPXPAY_TYPE_FEED, 'side', 'high', array('feed' => $feed));\n\t}\n\n\t/**\n\t* metabox for Return to List link\n\t* @param WP_Post $post\n\t* @param array $metabox has metabox id, title, callback, and args elements.\n\t*/\n\tpublic function metaboxList($post, $metabox) {\n\t\t$feedsURL = admin_url('edit.php?post_type=' . GFDPSPXPAY_TYPE_FEED);\n\t\tprintf('<a href=\"%s\">Click to return to list</a>', esc_url($feedsURL));\n\t}\n\n\t/**\n\t* metabox for custom save/publish\n\t* @param WP_Post $post\n\t* @param array $metabox has metabox id, title, callback, and args elements.\n\t*/\n\tpublic function metaboxSave($post, $metabox) {\n\t\tglobal $action;\n\n\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/metabox-save.php';\n\t}\n\n\t/**\n\t* metabox for Gravity Form field, only listing forms that don't have a feed or are current feed's form\n\t* @param WP_Post $post\n\t* @param array $metabox has metabox id, title, callback, and args elements.\n\t*/\n\tpublic function metaboxForm($post, $metabox) {\n\t\t$feed = $metabox['args']['feed'];\n\t\t$forms = GFFormsModel::get_forms();\n\n\t\t$feeds = GFDpsPxPayFeed::getList();\n\t\t$feedMap = array();\n\t\tforeach ($feeds as $f) {\n\t\t\t$feedMap[$f->FormID] = 1;\n\t\t}\n\n\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/metabox-form.php';\n\t}\n\n\t/**\n\t* metabox for Redirect URLs\n\t* @param WP_Post $post\n\t* @param array $metabox has metabox id, title, callback, and args elements.\n\t*/\n\tpublic function metaboxURLs($post, $metabox) {\n\t\t$feed = $metabox['args']['feed'];\n\n\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/metabox-urls.php';\n\t}\n\n\t/**\n\t* metabox for options\n\t* @param WP_Post $post\n\t* @param array $metabox has metabox id, title, callback, and args elements.\n\t*/\n\tpublic function metaboxOpts($post, $metabox) {\n\t\t$feed = $metabox['args']['feed'];\n\n\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/metabox-options.php';\n\t}\n\n\t/**\n\t* metabox for Fields to Map\n\t* @param WP_Post $post\n\t* @param array $metabox has metabox id, title, callback, and args elements.\n\t*/\n\tpublic function metaboxFields($post, $metabox) {\n\t\twp_nonce_field('save', GFDPSPXPAY_TYPE_FEED.'_wpnonce', false);\n\n\t\t$feed = $metabox['args']['feed'];\n\t\t$fields = $feed->FormID ? self::getFormFields($feed->FormID) : false;\n\n\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/metabox-fields.php';\n\t}\n\n\t/**\n\t* filter insert fields, to set post title from form name\n\t* @param array $data the post insert data\n\t* @param array $postarr data from the form post\n\t* @return array\n\t*/\n\tpublic function filterInsertPostData($data, $postarr) {\n\t\t$formID = isset($postarr['_gfdpspxpay_form']) ? intval($postarr['_gfdpspxpay_form']) : 0;\n\t\tif ($formID) {\n\t\t\t$form = GFFormsModel::get_form($formID);\n\t\t\t$data['post_title'] = $form->title;\n\t\t\t$data['post_name'] = sanitize_title($form->title);\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t* save custom fields\n\t*/\n\tpublic function saveCustomFields($postID) {\n\t\t// Check whether this is an auto save routine. If it is, our form has not been submitted, so we don't want to do anything\n\t\tif (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE)\n\t\t\treturn $postID;\n\n\t\tglobal $typenow;\n\n\t\t// handle post type\n\t\tif ($typenow == GFDPSPXPAY_TYPE_FEED) {\n\t\t\t// verify permission to edit post / page\n\t\t\tif (!current_user_can('edit_post', $postID))\n\t\t\t\treturn $postID;\n\n\t\t\t$fields = array (\n\t\t\t\t'_gfdpspxpay_form',\n\t\t\t\t'_gfdpspxpay_url_fail',\n\t\t\t\t'_gfdpspxpay_url_success',\n\t\t\t\t'_gfdpspxpay_merchant_ref',\n\t\t\t\t'_gfdpspxpay_email',\n\t\t\t\t'_gfdpspxpay_txndata1',\n\t\t\t\t'_gfdpspxpay_txndata2',\n\t\t\t\t'_gfdpspxpay_txndata3',\n\t\t\t\t'_gfdpspxpay_opt',\n\t\t\t\t'_gfdpspxpay_delay_post',\n\t\t\t\t'_gfdpspxpay_delay_notify',\n\t\t\t\t'_gfdpspxpay_delay_autorespond',\n\t\t\t\t'_gfdpspxpay_delay_userrego',\n\t\t\t\t'_gfdpspxpay_delay_exec_always',\n\t\t\t);\n\n\t\t\tif (isset($_POST['_gfdpspxpay_form'])) {\n\t\t\t\tcheck_admin_referer('save', GFDPSPXPAY_TYPE_FEED . '_wpnonce');\n\t\t\t}\n\n\t\t\tforeach ($fields as $fieldName) {\n\t\t\t\tif (isset($_POST[$fieldName])) {\n\n\t\t\t\t\t$value = $_POST[$fieldName];\n\n\t\t\t\t\tif (empty($value)) {\n\t\t\t\t\t\tdelete_post_meta($postID, $fieldName);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tupdate_post_meta($postID, $fieldName, $value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// checkboxes aren't set, so delete them\n\t\t\t\t\tdelete_post_meta($postID, $fieldName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $postID;\n\t}\n\n\t/**\n\t* remove unwanted actions from list of feeds\n\t* @param array $actions\n\t* @param WP_Post $post\n\t* @return array\n\t*/\n\tpublic function filterPostRowActions($actions, $post) {\n\t\tunset($actions['inline hide-if-no-js']);\t\t// \"quick edit\"\n\n\t\t// add Entries link\n\t\tif ($post && $post->ID) {\n\t\t\ttry {\n\t\t\t\t$feed = new GFDpsPxPayFeed();\n\t\t\t\t$feed->loadFromPost($post);\n\n\t\t\t\t$delete = array_pop($actions);\t\t// pop the end link, so that we can \"insert\" ours before it\n\n\t\t\t\t$url = add_query_arg(array('page' => 'gf_entries', 'id' => $feed->FormID), admin_url('admin.php'));\n\t\t\t\t$actions['entries'] = sprintf('<a href=\"%s\" title=\"%s\">%s</a>', esc_url($url), 'View Entries', 'Entries');\n\n\t\t\t\t$actions['delete'] = $delete;\t\t// replace the end link\n\t\t\t}\n\t\t\tcatch (GFDpsPxPayException $e) {\n\t\t\t\t// NOP -- we'll have an empty feed\n\t\t\t}\n\t\t}\n\n\t\treturn $actions;\n\t}\n\n\t/**\n\t* change the post updated messages\n\t* @param array $messages\n\t* @return array\n\t*/\n\tpublic function filterPostUpdatedMessages($messages) {\n\t\t$messages[GFDPSPXPAY_TYPE_FEED] = array(\n\t\t\t 0 => '', // Unused. Messages start at index 1.\n\t\t\t 1 => 'Feed updated.',\n\t\t\t 2 => 'Custom field updated.',\n\t\t\t 3 => 'Custom field deleted.',\n\t\t\t 4 => 'Feed updated.',\n\t\t\t/* translators: %s: date and time of the revision */\n\t\t\t 5 => isset($_GET['revision']) ? sprintf( 'Feed restored to revision from %s', wp_post_revision_title( (int) $_GET['revision'], false ) ) : false,\n\t\t\t 6 => 'Feed published.',\n\t\t\t 7 => 'Feed saved.',\n\t\t\t 8 => 'Feed submitted.',\n\t\t\t 9 => 'Feed scheduled for: ',\n\t\t\t10 => 'Feed draft updated.',\n\t\t);\n\n\t\treturn $messages;\n\t}\n\n\t/**\n\t* filter to add columns to post list\n\t* @param array $posts_columns\n\t* @return array\n\t*/\n\tpublic function filterManageColumns($posts_columns) {\n\t\t// Date isn't useful for this post type\n\t\tunset($posts_columns['date']);\n\n\t\t// stop File Gallery adding No. of Attachments\n\t\tunset($posts_columns['attachment_count']);\n\n\t\treturn $posts_columns;\n\t}\n\n\t/**\n\t* change default order to name ascending\n\t* @param WP_Query $query\n\t* @return WP_Query\n\t*/\n\tpublic function adminPostOrder($query) {\n\t\t// only for admin queries for this post type, with no specified order\n\t\tif ($query->is_admin && $query->get('post_type') == GFDPSPXPAY_TYPE_FEED && empty($query->query_vars['orderby'])) {\n\t\t\t$query->set('orderby', 'post_title');\n\t\t\t$query->set('order', 'ASC');\n\t\t}\n\n\t\treturn $query;\n\t}\n\n\t/**\n\t* get a map of GF form field IDs to field names, for populating drop-down lists\n\t* @param int $formID\n\t* @return array\n\t*/\n\tpublic static function getFormFields($formID) {\n\t\t$form = GFFormsModel::get_form_meta($formID);\n\n        $fields = array(\n        \t'form' => $formID . ' (form ID)',\n        \t'title' => $form['title'] . ' (form title)',\n        );\n\n        if (is_array($form['fields'])) {\n            foreach ($form['fields'] as $field) {\n                if (!rgar($field, 'displayOnly')) {\n\t\t\t\t\t// pick up simple fields and selected compound fields\n\t\t\t\t\tif (empty($field['inputs']) || in_array(GFFormsModel::get_input_type($field), array('name', 'address'))) {\n\t\t\t\t\t\t$fields[(string) $field['id']] = GFCommon::get_label($field);\n\t\t\t\t\t}\n\n\t\t\t\t\t// pick up subfields\n\t\t\t\t\tif (isset($field['inputs']) && is_array($field['inputs'])) {\n\t\t\t\t\t\tforeach($field['inputs'] as $input) {\n\t\t\t\t\t\t\t$fields[(string) $input['id']] = GFCommon::get_label($field, $input['id']);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n            }\n        }\n\n        return $fields;\n\t}\n\n\t/**\n\t* return a list of drop-down list items for field mappings\n\t* @param string $current the currently selected option\n\t* @param array $fields\n\t* @return string\n\t*/\n\tpublic static function selectFields($current, $fields) {\n\t\t$opts = '<option value=\"\">-- not selected --</option>';\n\n\t\tforeach ($fields as $name => $title) {\n\t\t\t$opts .= sprintf('<option value=\"%s\" %s>%s</option>', esc_attr($name), selected($current, $name, false), esc_html($title));\n\t\t}\n\n\t\treturn $opts;\n\t}\n\n}\n", "<?php\n/*\n* Classes for dealing with a DPS PxPay payment request\n* copyright (c) 2013 WebAware Pty Ltd, released under GPL v2.1\n*/\n\n/**\n* DPS PxPay payment request\n*/\nclass GFDpsPxPayPayment {\n\t// environment / website specific members\n\t/**\n\t* default true, whether to validate the remote SSL certificate\n\t* @var boolean\n\t*/\n\tpublic $sslVerifyPeer;\n\n\t// payment specific members\n\t/**\n\t* account name / email address at DPS PxPay\n\t* @var string max. 8 characters\n\t*/\n\tpublic $userID;\n\n\t/**\n\t* account name / email address at DPS PxPay\n\t* @var string max. 8 characters\n\t*/\n\tpublic $userKey;\n\n\t/**\n\t* total amount of payment, in dollars and cents as a floating-point number\n\t* @var float\n\t*/\n\tpublic $amount;\n\n\t/**\n\t* additional billing ID for recurring payments\n\t* @var string max. 32 characters\n\t*/\n\tpublic $billingID;\n\n\t/**\n\t* flag for enabling recurring billing\n\t* @var string max. 1 character\n\t*/\n\tpublic $enableRecurring;\n\n\t/**\n\t* currency code (AUD, NZD, etc.)\n\t* @var string max. 4 characters\n\t*/\n\tpublic $currency;\n\n\t/**\n\t* customer's email address\n\t* @var string max. 255 characters\n\t*/\n\tpublic $emailAddress;\n\n\t/**\n\t* an invoice reference to track by\n\t* @var string max. 64 characters\n\t*/\n\tpublic $invoiceReference;\n\n\t/**\n\t* an optional invoice description\n\t* @var string max. 64 characters\n\t*/\n\tpublic $invoiceDescription;\n\n\t/**\n\t* optional additional information for use in shopping carts, etc.\n\t* @var string max. 255 characters\n\t*/\n\tpublic $option1;\n\n\t/**\n\t* optional additional information for use in shopping carts, etc.\n\t* @var string max. 255 characters\n\t*/\n\tpublic $option2;\n\n\t/**\n\t* optional additional information for use in shopping carts, etc.\n\t* @var string max. 255 characters\n\t*/\n\tpublic $option3;\n\n\t/**\n\t* type of transaction (Purchase, Auth)\n\t* @var string max. 8 characters\n\t*/\n\tpublic $txnType;\n\n\t/**\n\t* URL to redirect to on failure\n\t* @var string max. 255 characters\n\t*/\n\tpublic $urlFail;\n\n\t/**\n\t* URL to redirect to on success\n\t* @var string max. 255 characters\n\t*/\n\tpublic $urlSuccess;\n\n\t/**\n\t* transaction number\n\t* @var string max. 16 characters\n\t*/\n\tpublic $transactionNumber;\n\n\t/**\n\t* populate members with defaults, and set account and environment information\n\t*\n\t* @param string $userID DPS PxPay account ID\n\t* @param string $userKey DPS PxPay encryption key\n\t*/\n\tpublic function __construct($userID, $userKey) {\n\t\t$this->sslVerifyPeer = true;\n\t\t$this->userID = $userID;\n\t\t$this->userKey = $userKey;\n\n\t\t// default to single payment, not recurring\n\t\t$this->enableRecurring = false;\n\t}\n\n\t/**\n\t* process a payment against DPS PxPay; throws exception on error with error described in exception message.\n\t*/\n\tpublic function processPayment() {\n\t\t$this->validate();\n\t\t$xml = $this->getPaymentXML();\n\t\treturn $this->sendPaymentRequest($xml);\n\t}\n\n\t/**\n\t* validate the data members to ensure that sufficient and valid information has been given\n\t* @throws GFDpsPxPayException\n\t*/\n\tprotected function validate() {\n\t\t$errmsg = '';\n\n\t\tif (strlen($this->userID) === 0)\n\t\t\t$errmsg .= \"userID cannot be empty.\\n\";\n\t\tif (strlen($this->userKey) === 0)\n\t\t\t$errmsg .= \"userKey cannot be empty.\\n\";\n\t\tif (!is_numeric($this->amount) || $this->amount <= 0)\n\t\t\t$errmsg .= \"amount must be given as a number in dollars and cents.\\n\";\n\t\telse if (!is_float($this->amount))\n\t\t\t$this->amount = (float) $this->amount;\n\t\tif (strlen($this->currency) === 0)\n\t\t\t$errmsg .= \"currency cannot be empty.\\n\";\n\t\tif (strlen($this->invoiceReference) === 0)\n\t\t\t$errmsg .= \"invoice reference cannot be empty.\\n\";\n\t\tif (strlen($this->txnType) === 0)\n\t\t\t$errmsg .= \"transaction type cannot be empty.\\n\";\n\t\tif (strlen($this->urlFail) === 0)\n\t\t\t$errmsg .= \"URL for transaction fail cannot be empty.\\n\";\n\t\tif (strlen($this->urlSuccess) === 0)\n\t\t\t$errmsg .= \"URL for transaction success cannot be empty.\\n\";\n\n\t\tif (strlen($errmsg) > 0) {\n\t\t\tthrow new GFDpsPxPayException($errmsg);\n\t\t}\n\t}\n\n\t/**\n\t* create XML request document for payment parameters\n\t* @return string\n\t*/\n\tpublic function getPaymentXML() {\n\t\t$xml = new XMLWriter();\n\t\t$xml->openMemory();\n\t\t$xml->startDocument('1.0', 'UTF-8');\n\t\t$xml->startElement('GenerateRequest');\n\n\t\t$xml->writeElement('PxPayUserId', substr($this->userID, 0, 32));\n\t\t$xml->writeElement('PxPayKey', substr($this->userKey, 0, 64));\n\t\t$xml->writeElement('TxnType', substr($this->txnType, 0, 8));\n\t\t$xml->writeElement('AmountInput', number_format($this->amount, 2, '.', ''));\n\t\t$xml->writeElement('CurrencyInput', substr($this->currency, 0, 4));\n\t\t$xml->writeElement('MerchantReference', substr($this->invoiceReference, 0, 64));\n\t\t$xml->writeElement('TxnData1', substr($this->option1, 0, 255));\n\t\t$xml->writeElement('TxnData2', substr($this->option2, 0, 255));\n\t\t$xml->writeElement('TxnData3', substr($this->option3, 0, 255));\n\t\t$xml->writeElement('EmailAddress', substr($this->emailAddress, 0, 255));\n\t\t$xml->writeElement('TxnId', substr($this->transactionNumber, 0, 16));\n\t\t$xml->writeElement('BillingId', substr($this->billingID, 0, 32));\n\t\t$xml->writeElement('EnableAddBillCard', $this->enableRecurring ? '1' : '0');\n\t\t$xml->writeElement('UrlSuccess', substr($this->urlSuccess, 0, 255));\n\t\t$xml->writeElement('UrlFail', substr($this->urlFail, 0, 255));\n\t\t$xml->writeElement('Opt', substr($this->invoiceDescription, 0, 64));\n\n\t\t$xml->endElement();\t\t// GenerateRequest\n\n\t\treturn $xml->outputMemory();\n\t}\n\n\t/**\n\t* send the DPS PxPay payment request and retrieve and parse the response\n\t* @param string $xml DPS PxPay payment request as an XML document, per DPS PxPay specifications\n\t* @return GFDpsPxPayPaymentResponse\n\t* @throws GFDpsPxPayException\n\t*/\n\tprotected function sendPaymentRequest($xml) {\n\t\t// execute the cURL request, and retrieve the response\n\t\ttry {\n\t\t\t$responseXML = GFDpsPxPayPlugin::curlSendRequest($xml, $this->sslVerifyPeer);\n\t\t}\n\t\tcatch (GFDpsPxPayCurlException $e) {\n\t\t\tthrow new GFDpsPxPayException(\"Error posting DPS PxPay payment request: \" . $e->getMessage());\n\t\t}\n\n\t\t$response = new GFDpsPxPayPaymentResponse();\n\t\t$response->loadResponseXML($responseXML);\n\t\treturn $response;\n\t}\n}\n\n/**\n* DPS PxPay payment request response\n*/\nclass GFDpsPxPayPaymentResponse {\n\t/**\n\t* whether it was a successful request\n\t* @var boolean\n\t*/\n\tpublic $isValid;\n\n\t/**\n\t* URL to redirect browser to where credit card details can be entered\n\t* @var string\n\t*/\n\tpublic $paymentURL;\n\n\tprotected $errorMessage;\n\n\t/**\n\t* load DPS PxPay response data as XML string\n\t* @param string $response DPS PxPay response as a string (hopefully of XML data)\n\t* @throws GFDpsPxPayException\n\t*/\n\tpublic function loadResponseXML($response) {\n\t\t// prevent XML injection attacks, and handle errors without warnings\n\t\t$oldDisableEntityLoader = libxml_disable_entity_loader(TRUE);\n\t\t$oldUseInternalErrors = libxml_use_internal_errors(TRUE);\n\n\t\ttry {\n\t\t\t$xml = simplexml_load_string($response);\n\t\t\tif ($xml === false) {\n\t\t\t\t$errmsg = '';\n\t\t\t\tforeach (libxml_get_errors() as $error) {\n\t\t\t\t\t$errmsg .= $error->message;\n\t\t\t\t}\n\t\t\t\tthrow new Exception($errmsg);\n\t\t\t}\n\n\t\t\tif ('1' === ((string) $xml['valid'])) {\n\t\t\t\t$this->isValid = true;\n\t\t\t\t$this->paymentURL = (string) $xml->URI;\n\n\t\t\t\tif (empty($this->paymentURL)) {\n\t\t\t\t\t$this->isValid = false;\n\n\t\t\t\t\t$this->errorMessage = (string) $xml->ResponseText;\n\t\t\t\t\tif (empty($this->errorMessage)) {\n\t\t\t\t\t\t$this->errorMessage = 'no hosted page URI given';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->isValid = false;\n\t\t\t\t$this->errorMessage = (string) $xml->ResponseText;\n\t\t\t\tif (empty($this->errorMessage)) {\n\t\t\t\t\t// API 1.0 passed error message in URI\n\t\t\t\t\t$this->errorMessage = (string) $xml->URI;\n\n\t\t\t\t\tif (empty($this->errorMessage)) {\n\t\t\t\t\t\t$this->errorMessage = 'invalid request';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// restore old libxml settings\n\t\t\tlibxml_disable_entity_loader($oldDisableEntityLoader);\n\t\t\tlibxml_use_internal_errors($oldUseInternalErrors);\n\t\t}\n\t\tcatch (Exception $e) {\n\t\t\t// restore old libxml settings\n\t\t\tlibxml_disable_entity_loader($oldDisableEntityLoader);\n\t\t\tlibxml_use_internal_errors($oldUseInternalErrors);\n\n\t\t\tthrow new GFDpsPxPayException('Error parsing DPS PxPay request: ' . $e->getMessage());\n\t\t}\n\n\t\t// if response is \"invalid\", throw error with message\n\t\tif (!$this->isValid) {\n\t\t\tthrow new GFDpsPxPayException('Error from DPS PxPay request: ' . $this->errorMessage);\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n* custom exception types\n*/\nclass GFDpsPxPayException extends Exception {}\nclass GFDpsPxPayCurlException extends Exception {}\n\n/**\n* class for managing the plugin\n*/\nclass GFDpsPxPayPlugin {\n\tpublic $urlBase;\t\t\t\t\t\t\t\t\t// string: base URL path to files in plugin\n\tpublic $options;\t\t\t\t\t\t\t\t\t// array of plugin options\n\n\tprotected $validationMessage = '';\t\t\t\t\t// last validation message\n\tprotected $errorMessage = false;\t\t\t\t\t// last transaction error message\n\tprotected $paymentURL = false;\t\t\t\t\t\t// where to redirect browser for payment\n\n\tprivate $feed = null;\t\t\t\t\t\t\t\t// current feed mapping form fields to payment fields, accessed through getFeed()\n\tprivate $formData = null;\t\t\t\t\t\t\t// current form data collected from form, accessed through getFormData()\n\n\t// end points for the DPS PxPay API\n\tconst PXPAY_APIV1_URL\t= 'https://sec.paymentexpress.com/pxpay/pxaccess.aspx';\n\tconst PXPAY_APIV2_URL\t= 'https://sec.paymentexpress.com/pxaccess/pxpay.aspx';\n\n\t// end point for return to website\n\tconst PXPAY_RETURN\t\t= 'PXPAYRETURN';\n\n\t// minimum versions required\n\tconst MIN_VERSION_GF\t= '1.7';\n\n\t/**\n\t* static method for getting the instance of this singleton object\n\t* @return self\n\t*/\n\tpublic static function getInstance() {\n\t\tstatic $instance = null;\n\n\t\tif (is_null($instance)) {\n\t\t\t$instance = new self();\n\t\t}\n\n\t\treturn $instance;\n\t}\n\n\t/**\n\t* initialise plugin\n\t*/\n\tprivate function __construct() {\n\t\t// grab options, setting new defaults for any that are missing\n\t\t$this->initOptions();\n\n\t\t// record plugin URL base\n\t\t$this->urlBase = plugin_dir_url(GFDPSPXPAY_PLUGIN_FILE);\n\n\t\tadd_action('init', array($this, 'init'));\n\t\tadd_action('parse_request', array($this, 'processDpsReturn'));\t\t// process DPS PxPay return\n\t\tadd_action('wp', array($this, 'processFormConfirmation'), 5);\t\t// process redirect to GF confirmation\n\t}\n\n\t/**\n\t* initialise plug-in options, handling undefined options by setting defaults\n\t*/\n\tprivate function initOptions() {\n\t\t$this->options = get_option(GFDPSPXPAY_PLUGIN_OPTIONS);\n\t\tif (!is_array($this->options)) {\n\t\t\t$this->options = array();\n\t\t}\n\n\t\t$defaults = array (\n\t\t\t'userID'\t\t\t=> '',\n\t\t\t'userKey'\t\t\t=> '',\n\t\t\t'testID'\t\t\t=> '',\n\t\t\t'testKey'\t\t\t=> '',\n\t\t\t'useTest'\t\t\t=> false,\n\t\t\t'sslVerifyPeer'\t\t=> true,\n\t\t\t'apiVersion'\t\t=> isset($this->options['userID']) ? 1 : 2,\t// default API version 2 for new installs, 1 for old\n\t\t);\n\n\t\tif (count(array_diff(array_keys($defaults), array_keys($this->options))) > 0) {\n\t\t\t$this->options = array_merge($defaults, $this->options);\n\t\t\tunset($this->options[0]);\n\t\t\tupdate_option(GFDPSPXPAY_PLUGIN_OPTIONS, $this->options);\n\t\t}\n\t}\n\n\t/**\n\t* get PxPay API end-point for selected API version\n\t* @return string\n\t*/\n\tpublic function getApiUrl() {\n\t\tswitch ($this->options['apiVersion']) {\n\t\t\tcase 2:\n\t\t\t\tself::log_debug('Using PxPay 2.0 API');\n\t\t\t\treturn self::PXPAY_APIV2_URL;\n\n\t\t\tdefault:\n\t\t\t\tself::log_debug('Using PxPay 1.0 API');\n\t\t\t\treturn self::PXPAY_APIV1_URL;\n\t\t}\n\t}\n\n\t/**\n\t* handle the plugin's init action\n\t*/\n\tpublic function init() {\n\t\t// do nothing if Gravity Forms isn't enabled or doesn't meet required minimum version\n\t\tif (self::versionCompareGF(self::MIN_VERSION_GF, '>=')) {\n\t\t\t// hook into Gravity Forms\n\t\t\tadd_filter('gform_logging_supported', array($this, 'enableLogging'));\n\t\t\tadd_filter('gform_validation', array($this, 'gformValidation'));\n\t\t\tadd_filter('gform_validation_message', array($this, 'gformValidationMessage'), 10, 2);\n\t\t\tadd_filter('gform_confirmation', array($this, 'gformConfirmation'), 1000, 4);\n\t\t\tadd_filter('gform_disable_post_creation', array($this, 'gformDelayPost'), 10, 3);\n\t\t\tadd_filter('gform_disable_user_notification', array($this, 'gformDelayUserNotification'), 10, 3);\n\t\t\tadd_filter('gform_disable_admin_notification', array($this, 'gformDelayAdminNotification'), 10, 3);\n\t\t\tadd_filter('gform_disable_notification', array($this, 'gformDelayNotification'), 10, 4);\n\t\t\tadd_action('gform_after_submission', array($this, 'gformDelayUserRego'), 9, 2);\n\t\t\tadd_action('gform_entry_post_save', array($this, 'gformEntryPostSave'), 10, 2);\n\t\t\tadd_filter('gform_custom_merge_tags', array($this, 'gformCustomMergeTags'), 10, 4);\n\t\t\tadd_filter('gform_replace_merge_tags', array($this, 'gformReplaceMergeTags'), 10, 7);\n\t\t\tadd_filter('gform_entry_meta', array($this, 'gformEntryMeta'), 10, 2);\n\n\t\t\t// register custom post types\n\t\t\t$this->registerTypeFeed();\n\t\t}\n\n\t\tif (is_admin()) {\n\t\t\t// kick off the admin handling\n\t\t\tnew GFDpsPxPayAdmin($this);\n\t\t}\n\t}\n\n\t/**\n\t* register custom post type for PxPay form field mappings\n\t*/\n\tprotected function registerTypeFeed() {\n\t\t// register the post type\n\t\tregister_post_type(GFDPSPXPAY_TYPE_FEED, array(\n\t\t\t'labels' => array (\n\t\t\t\t'name'\t\t\t\t\t=> 'DPS PxPay Feeds',\n\t\t\t\t'singular_name'\t\t\t=> 'DPS PxPay Feed',\n\t\t\t\t'add_new_item'\t\t\t=> 'Add New DPS PxPay Feed',\n\t\t\t\t'edit_item'\t\t\t\t=> 'Edit DPS PxPay Feed',\n\t\t\t\t'new_item'\t\t\t\t=> 'New DPS PxPay Feed',\n\t\t\t\t'view_item'\t\t\t\t=> 'View DPS PxPay Feed',\n\t\t\t\t'search_items'\t\t\t=> 'Search DPS PxPay Feeds',\n\t\t\t\t'not_found'\t\t\t\t=> 'No DPS PxPay feeds found',\n\t\t\t\t'not_found_in_trash'\t=> 'No DPS PxPay feeds found in Trash',\n\t\t\t\t'parent_item_colon'\t\t=> 'Parent DPS PxPay feed',\n\t\t\t),\n\t\t\t'description'\t\t\t\t=> 'DPS PxPay Feeds, as a custom post type',\n\t\t\t'public'\t\t\t\t\t=> false,\n\t\t\t'show_ui'\t\t\t\t\t=> true,\n\t\t\t'show_in_menu'\t\t\t\t=> false,\n\t\t\t'hierarchical'\t\t\t\t=> false,\n\t\t\t'has_archive'\t\t\t\t=> false,\n\t\t\t//~ 'capabilities'\t\t\t\t=> array (\n\t\t\t//~ ),\n\t\t\t'supports'\t\t\t\t\t=> array('null'),\n\t\t\t'rewrite'\t\t\t\t\t=> false,\n\t\t));\n\t}\n\n\t/**\n\t* filter whether post creation from form is enabled (yet)\n\t* @param bool $is_disabled\n\t* @param array $form\n\t* @param array $lead\n\t* @return bool\n\t*/\n\tpublic function gformDelayPost($is_disabled, $form, $lead) {\n\t\t$feed = $this->getFeed($form['id']);\n\t\t$is_disabled = !empty($feed->DelayPost);\n\n\t\tself::log_debug(sprintf('delay post creation: %s; form id %s, lead id %s', $is_disabled ? 'yes' : 'no', $form['id'], $lead['id']));\n\n\t\treturn $is_disabled;\n\t}\n\n\t/**\n\t* deprecated: filter whether form triggers autoresponder (yet)\n\t* @param bool $is_disabled\n\t* @param array $form\n\t* @param array $lead\n\t* @return bool\n\t*/\n\tpublic function gformDelayUserNotification($is_disabled, $form, $lead) {\n\t\t$feed = $this->getFeed($form['id']);\n\t\t$is_disabled = !empty($feed->DelayAutorespond);\n\n\t\t$this->log_debug(sprintf('delay user notification: %s; form id %s, lead id %s', $is_disabled ? 'yes' : 'no', $form['id'], $lead['id']));\n\n\t\treturn $is_disabled;\n\t}\n\n\t/**\n\t* deprecated: filter whether form triggers admin notification (yet)\n\t* @param bool $is_disabled\n\t* @param array $form\n\t* @param array $lead\n\t* @return bool\n\t*/\n\tpublic function gformDelayAdminNotification($is_disabled, $form, $lead) {\n\t\t$feed = $this->getFeed($form['id']);\n\t\t$is_disabled = !empty($feed->DelayNotify);\n\n\t\t$this->log_debug(sprintf('delay admin notification: %s; form id %s, lead id %s', $is_disabled ? 'yes' : 'no', $form['id'], $lead['id']));\n\n\t\treturn $is_disabled;\n\t}\n\n\t/**\n\t* filter whether form triggers notifications (yet)\n\t* @param bool $is_disabled\n\t* @param array $notification\n\t* @param array $form\n\t* @param array $lead\n\t* @return bool\n\t*/\n\tpublic function gformDelayNotification($is_disabled, $notification, $form, $lead) {\n\t\t$feed = $this->getFeed($form['id']);\n\n\t\tif ($feed) {\n\t\t\tswitch (rgar($notification, 'type')) {\n\t\t\t\t// old \"user\" notification\n\t\t\t\tcase 'user':\n\t\t\t\t\tif ($feed->DelayAutorespond) {\n\t\t\t\t\t\t$is_disabled = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\t// old \"admin\" notification\n\t\t\t\tcase 'admin':\n\t\t\t\t\tif ($feed->DelayNotify) {\n\t\t\t\t\t\t$is_disabled = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\t// new since 1.7, add any notification you like\n\t\t\t\tdefault:\n\t\t\t\t\tif (trim($notification['to']) == '{admin_email}') {\n\t\t\t\t\t\tif ($feed->DelayNotify) {\n\t\t\t\t\t\t\t$is_disabled = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif ($feed->DelayAutorespond) {\n\t\t\t\t\t\t\t$is_disabled = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t$this->log_debug(sprintf('delay notification: %s; form id %s, lead id %s, notification \"%s\"', $is_disabled ? 'yes' : 'no',\n\t\t\t$form['id'], $lead['id'], $notification['name']));\n\n\t\treturn $is_disabled;\n\t}\n\n\t/**\n\t* filter whether form triggers User Registration (yet)\n\t* @param bool $is_disabled\n\t* @param array $lead\n\t* @param array $form\n\t* @return array\n\t*/\n\tpublic function gformDelayUserRego($lead, $form) {\n\t\t$feed = $this->getFeed($form['id']);\n\t\t$is_disabled = !empty($feed->DelayUserrego);\n\n\t\tif ($is_disabled) {\n\t\t\tremove_action('gform_after_submission', array('GFUser', 'gf_create_user'), 10, 2);\n\t\t}\n\t}\n\n\t/**\n\t* process a form validation filter hook; if can find a total, attempt to bill it\n\t* @param array $data an array with elements is_valid (boolean) and form (array of form elements)\n\t* @return array\n\t*/\n\tpublic function gformValidation($data) {\n\n\t\t// make sure all other validations passed\n\t\tif ($data['is_valid']) {\n\n\t\t\t$feed = $this->getFeed($data['form']['id']);\n\t\t\tif ($feed) {\n\t\t\t\t$formData = $this->getFormData($data['form']);\n\n\t\t\t\t// make sure form hasn't already been submitted / processed\n\t\t\t\tif ($this->hasFormBeenProcessed($data['form'])) {\n\t\t\t\t\t$data['is_valid'] = false;\n\t\t\t\t\t$this->validationMessage .= \"Payment already submitted and processed - please close your browser window.\\n\";\n\t\t\t\t}\n\n\t\t\t\t// make sure that we have something to bill\n\t\t\t\t// TODO: conditional payments\n\t\t\t\t//~ else if (!$formData->isCcHidden() && $formData->isLastPage() && is_array($formData->ccField)) {\n\t\t\t\t\tif (!$formData->hasPurchaseFields()) {\n\t\t\t\t\t\t$data['is_valid'] = false;\n\t\t\t\t\t\t$this->validationMessage .= \"This form has no products or totals; unable to process transaction.\\n\";\n\t\t\t\t\t}\n\t\t\t\t//~ }\n\t\t\t}\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t* alter the validation message\n\t* @param string $msg\n\t* @param array $form\n\t* @return string\n\t*/\n\tpublic function gformValidationMessage($msg, $form) {\n\t\tif ($this->validationMessage) {\n\t\t\t$msg = \"<div class='validation_error'>\" . nl2br($this->validationMessage) . \"</div>\";\n\t\t\t$this->validationMessage = false;\n\t\t}\n\n\t\treturn $msg;\n\t}\n\n\t/**\n\t* form entry post-submission processing\n\t* @param array $entry\n\t* @param array $form\n\t* @return array\n\t*/\n\tpublic function gformEntryPostSave($entry, $form) {\n\n\t\t// get feed mapping form fields to payment request, run away if not set\n\t\t$feed = $this->getFeed($form['id']);\n\t\tif (!$feed) {\n\t\t\treturn $entry;\n\t\t}\n\n\t\t// run away if nothing to charge\n\t\t$formData = $this->getFormData($form);\n\t\tif (empty($formData->total)) {\n\t\t\treturn $entry;\n\t\t}\n\n\t\t// generate a unique transactiond ID to avoid collisions, e.g. between different installations using the same PxPay account\n\t\t// use last three characters of entry ID as prefix, to avoid collisions with entries created at same microsecond\n\t\t// uniqid() generates 13-character string, plus 3 characters from entry ID = 16 characters which is max for field\n\t\t$transactionID = uniqid(substr($entry['id'], -3));\n\n\t\t// allow plugins/themes to modify transaction ID; NB: must remain unique for PxPay account!\n\t\t$transactionID = apply_filters('gfdpspxpay_invoice_trans_number', $transactionID, $form);\n\n\t\t// build a payment request and execute on API\n\t\tlist($userID, $userKey) = $this->getDpsCredentials($this->options['useTest']);\n\t\t$paymentReq = new GFDpsPxPayPayment($userID, $userKey);\n\t\t$paymentReq->txnType\t\t\t= 'Purchase';\n\t\t$paymentReq->amount\t\t\t\t= $formData->total;\n\t\t$paymentReq->currency\t\t\t= GFCommon::get_currency();\n\t\t$paymentReq->transactionNumber\t= $transactionID;\n\t\t$paymentReq->invoiceReference\t= $formData->MerchantReference;\n\t\t$paymentReq->option1\t\t\t= $formData->TxnData1;\n\t\t$paymentReq->option2\t\t\t= $formData->TxnData2;\n\t\t$paymentReq->option3\t\t\t= $formData->TxnData3;\n\t\t$paymentReq->invoiceDescription\t= $feed->Opt;\n\t\t$paymentReq->emailAddress\t\t= $formData->EmailAddress;\n\t\t$paymentReq->urlSuccess\t\t\t= home_url(self::PXPAY_RETURN);\n\t\t$paymentReq->urlFail\t\t\t= home_url(self::PXPAY_RETURN);\t\t\t// NB: redirection will happen after transaction status is updated\n\n\t\t// allow plugins/themes to modify invoice description and reference, and set option fields\n\t\t$paymentReq->invoiceDescription\t= apply_filters('gfdpspxpay_invoice_desc', $paymentReq->invoiceDescription, $form);\n\t\t$paymentReq->invoiceReference\t= apply_filters('gfdpspxpay_invoice_ref', $paymentReq->invoiceReference, $form);\n\t\t$paymentReq->option1\t\t\t= apply_filters('gfdpspxpay_invoice_txndata1', $paymentReq->option1, $form);\n\t\t$paymentReq->option2\t\t\t= apply_filters('gfdpspxpay_invoice_txndata2', $paymentReq->option2, $form);\n\t\t$paymentReq->option3\t\t\t= apply_filters('gfdpspxpay_invoice_txndata3', $paymentReq->option3, $form);\n\n\t\tself::log_debug('========= initiating transaction request');\n\t\tself::log_debug(sprintf('%s account, invoice ref: %s, transaction: %s, amount: %s',\n\t\t\t$this->options['useTest'] ? 'test' : 'live',\n\t\t\t$paymentReq->invoiceReference, $paymentReq->transactionNumber, $paymentReq->amount));\n\n\t\tself::log_debug(sprintf('success URL: %s', $paymentReq->urlSuccess));\n\t\tself::log_debug(sprintf('failure URL: %s', $paymentReq->urlFail));\n\n\t\t// basic transaction data\n\t\t// NB: some are custom meta registered via gform_entry_meta\n\t\t$entry['payment_gateway'] = 'gfdpspxpay';\n\t\t$entry['authcode'] = '';\n\t\tgform_update_meta($entry['id'], 'gfdpspxpay_txn_id', $transactionID);\n\n\t\t// reduce risk of double-submission\n\t\tgform_update_meta($entry['id'], 'gfdpspxpay_unique_id', GFFormsModel::get_form_unique_id($form['id']));\n\n\t\t$this->errorMessage = '';\n\n\t\ttry {\n\t\t\t$response = $paymentReq->processPayment();\n\n\t\t\tif ($response->isValid) {\n\t\t\t\t$entry['payment_status'] = 'Processing';\n\t\t\t\t$this->paymentURL = $response->paymentURL;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$entry['payment_status'] = 'Failed';\n\t\t\t\t$this->errorMessage = 'Payment Express request invalid.';\n\t\t\t\tself::log_debug($this->errorMessage);\n\t\t\t}\n\t\t}\n\t\tcatch (GFDpsPxPayException $e) {\n\t\t\t$entry['payment_status'] = 'Failed';\n\t\t\t$this->errorMessage = $e->getMessage();\n\t\t\tself::log_debug($this->errorMessage);\n\t\t}\n\n\t\t// update the entry\n\t\tif (class_exists('GFAPI')) {\n\t\t\tGFAPI::update_entry($entry);\n\t\t}\n\t\telse {\n\t\t\tGFFormsModel::update_lead($entry);\n\t\t}\n\n\t\treturn $entry;\n\t}\n\n\t/**\n\t* on form confirmation, send user's browser to DPS PxPay with required data\n\t* @param mixed $confirmation text or redirect for form submission\n\t* @param array $form the form submission data\n\t* @param array $entry the form entry\n\t* @param bool $ajax form submission via AJAX\n\t* @return mixed\n\t*/\n\tpublic function gformConfirmation($confirmation, $form, $entry, $ajax) {\n\t\tif ($this->errorMessage) {\n\t\t\t$feed = $this->getFeed($form['id']);\n\t\t\tif ($feed) {\n\t\t\t\t// create a \"confirmation message\" in which to display the error\n\t\t\t\t$default_anchor = count(GFCommon::get_fields_by_type($form, array('page'))) > 0 ? 1 : 0;\n\t\t\t\t$default_anchor = apply_filters('gform_confirmation_anchor_'.$form['id'], apply_filters('gform_confirmation_anchor', $default_anchor));\n\t\t\t\t$anchor = $default_anchor ? \"<a id='gf_{$form[\"id\"]}' name='gf_{$form[\"id\"]}' class='gform_anchor' ></a>\" : '';\n\t\t\t\t$cssClass = rgar($form, 'cssClass');\n\t\t\t\t$error_msg = esc_html($this->errorMessage);\n\n\t\t\t\tob_start();\n\t\t\t\tinclude GFDPSPXPAY_PLUGIN_ROOT . 'views/error-payment-failure.php';\n\t\t\t\t$confirmation = ob_get_clean();\n\t\t\t}\n\t\t}\n\n\t\telseif ($this->paymentURL) {\n\t\t\t// NB: GF handles redirect via JavaScript if headers already sent, or AJAX\n\t\t\t$confirmation = array('redirect' => $this->paymentURL);\n\t\t\tself::log_debug('Payment Express request valid, redirecting to: ' . $this->paymentURL);\n\t\t}\n\n\t\t// reset transient members\n\t\t$this->errorMessage = false;\n\t\t$this->paymentURL = false;\n\n\t\treturn $confirmation;\n\t}\n\n\t/**\n\t* return from DPS PxPay website, retrieve and process payment result and redirect to form\n\t*/\n\tpublic function processDpsReturn() {\n\t\t// must parse out query params ourselves, to prevent the result param getting dropped / filtered out\n\t\t// [speculation: maybe it's an anti-malware filter watching for base64-encoded injection attacks?]\n\t\t$parts = parse_url($_SERVER['REQUEST_URI']);\n\t\t$path = $parts['path'];\n\t\tif (isset($parts['query'])) {\n\t\t\tparse_str($parts['query'], $args);\n\t\t}\n\t\telse {\n\t\t\t$args = array();\n\t\t}\n\n\t\t// check for request path containing our path element, and a result argument\n\t\tif (strpos($path, self::PXPAY_RETURN) !== false && isset($args['result'])) {\n\t\t\tlist($userID, $userKey) = $this->getDpsCredentials($this->options['useTest']);\n\n\t\t\t$resultReq = new GFDpsPxPayResult($userID, $userKey);\n\t\t\t$resultReq->result = wp_unslash($args['result']);\n\n\t\t\ttry {\n\t\t\t\tself::log_debug('========= requesting transaction result');\n\t\t\t\t$response = $resultReq->processResult();\n\n\t\t\t\tdo_action('gfdpspxpay_process_return');\n\n\t\t\t\tif ($response->isValid) {\n\t\t\t\t\tglobal $wpdb;\n\t\t\t\t\t$sql = \"select lead_id from {$wpdb->prefix}rg_lead_meta where meta_key='gfdpspxpay_txn_id' and meta_value = %s\";\n\t\t\t\t\t$lead_id = $wpdb->get_var($wpdb->prepare($sql, $response->transactionNumber));\n\n\t\t\t\t\t$lead = GFFormsModel::get_lead($lead_id);\n\t\t\t\t\t$form = GFFormsModel::get_form_meta($lead['form_id']);\n\t\t\t\t\t$feed = $this->getFeed($form['id']);\n\n\t\t\t\t\tdo_action('gfdpspxpay_process_return_parsed', $lead, $form, $feed);\n\n\t\t\t\t\t// update lead entry, with success/fail details\n\t\t\t\t\tif ($response->success) {\n\t\t\t\t\t\t$lead['payment_status']\t\t= 'Approved';\n\t\t\t\t\t\t$lead['payment_date']\t\t= date('Y-m-d H:i:s');\n\t\t\t\t\t\t$lead['payment_amount']\t\t= $response->amount;\n\t\t\t\t\t\t$lead['transaction_id']\t\t= $response->txnRef;\n\t\t\t\t\t\t$lead['transaction_type']\t= 1;\t// order\n\t\t\t\t\t\t$lead['authcode']\t\t\t= $response->authCode;\n\t\t\t\t\t\tif (!empty($response->currencySettlement)) {\n\t\t\t\t\t\t\t$lead['currency']\t\t\t= $response->currencySettlement;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself::log_debug(sprintf('success, date = %s, id = %s, status = %s, amount = %s, authcode = %s',\n\t\t\t\t\t\t\t$lead['payment_date'], $lead['transaction_id'], $lead['payment_status'],\n\t\t\t\t\t\t\t$lead['payment_amount'], $response->authCode));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$lead['payment_status']\t\t= 'Failed';\n\t\t\t\t\t\t$lead['transaction_id']\t\t= $response->txnRef;\n\t\t\t\t\t\t$lead['transaction_type']\t= 1;\t// order\n\n\t\t\t\t\t\t// record empty bank authorisation code, so that we can test for it\n\t\t\t\t\t\t$lead['authcode'] = '';\n\n\t\t\t\t\t\tself::log_debug(sprintf('failed; %s', $response->statusText));\n\t\t\t\t\t}\n\n\t\t\t\t\t// update the entry\n\t\t\t\t\tif (class_exists('GFAPI')) {\n\t\t\t\t\t\tGFAPI::update_entry($lead);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tGFFormsModel::update_lead($lead);\n\t\t\t\t\t}\n\n\t\t\t\t\t// if order hasn't been fulfilled, and have defered actions, act now!\n\t\t\t\t\t$this->processDelayed($feed, $lead, $form);\n\n\t\t\t\t\t// on failure, redirect to failure page if set, otherwise fall through to redirect back to confirmation page\n\t\t\t\t\tif ($lead['payment_status']\t== 'Failed') {\n\t\t\t\t\t\tif ($feed->UrlFail) {\n\t\t\t\t\t\t\twp_redirect(esc_url_raw($feed->UrlFail));\n\t\t\t\t\t\t\texit;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// redirect to Gravity Forms page, passing form and lead IDs, encoded to deter simple attacks\n\t\t\t\t\t$query = \"form_id={$lead['form_id']}&lead_id={$lead['id']}\";\n\t\t\t\t\t$query .= \"&hash=\" . wp_hash($query);\n\t\t\t\t\t$redirect_url = esc_url_raw(add_query_arg(array(self::PXPAY_RETURN => base64_encode($query)), $lead['source_url']));\n\t\t\t\t\twp_redirect($redirect_url);\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (GFDpsPxPayException $e) {\n\t\t\t\t// TODO: what now?\n\t\t\t\techo nl2br(esc_html($e->getMessage()));\n\t\t\t\tself::log_error(__METHOD__ . ': ' . $e->getMessage());\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* payment processed and recorded, show confirmation message / page\n\t*/\n\tpublic function processFormConfirmation() {\n\t\t// check for redirect to Gravity Forms page with our encoded parameters\n\t\tif (isset($_GET[self::PXPAY_RETURN])) {\n\t\t\tdo_action('gfdpspxpay_process_confirmation');\n\n\t\t\t// decode the encoded form and lead parameters\n\t\t\tparse_str(base64_decode($_GET[self::PXPAY_RETURN]), $query);\n\n\t\t\t// make sure we have a match\n\t\t\tif (wp_hash(\"form_id={$query['form_id']}&lead_id={$query['lead_id']}\") == $query['hash']) {\n\n\t\t\t\t// stop WordPress SEO from stripping off our query parameters and redirecting the page\n\t\t\t\tglobal $wpseo_front;\n\t\t\t\tif (isset($wpseo_front)) {\n\t\t\t\t\tremove_action('template_redirect', array($wpseo_front, 'clean_permalink'), 1);\n\t\t\t\t}\n\n\t\t\t\t// load form and lead data\n\t\t\t\t$form = GFFormsModel::get_form_meta($query['form_id']);\n\t\t\t\t$lead = GFFormsModel::get_lead($query['lead_id']);\n\n\t\t\t\tdo_action('gfdpspxpay_process_confirmation_parsed', $lead, $form);\n\n\t\t\t\t// get confirmation page\n\t\t\t\tif (!class_exists('GFFormDisplay')) {\n\t\t\t\t\trequire_once(GFCommon::get_base_path() . '/form_display.php');\n\t\t\t\t}\n\t\t\t\t$confirmation = GFFormDisplay::handle_confirmation($form, $lead, false);\n\n\t\t\t\t// preload the GF submission, ready for processing the confirmation message\n\t\t\t\tGFFormDisplay::$submission[$form['id']] = array(\n\t\t\t\t\t'is_confirmation'\t\t=> true,\n\t\t\t\t\t'confirmation_message'\t=> $confirmation,\n\t\t\t\t\t'form'\t\t\t\t\t=> $form,\n\t\t\t\t\t'lead'\t\t\t\t\t=> $lead,\n\t\t\t\t);\n\n\t\t\t\t// if it's a redirection (page or other URL) then do the redirect now\n\t\t\t\tif (is_array($confirmation) && isset($confirmation['redirect'])) {\n\t\t\t\t\theader('Location: ' . $confirmation['redirect']);\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* process any delayed actions\n\t* @param GFDpsPxPayFeed $feed\n\t* @param array $lead\n\t* @param array $form\n\t*/\n\tprotected function processDelayed($feed, $lead, $form) {\n\t\t// go no further if we've already done this\n\t\tif ($lead['is_fulfilled']) {\n\t\t\treturn;\n\t\t}\n\n\t\t// default to only performing delayed actions if payment was successful, unless feed opts to always execute\n\t\t// can filter each delayed action to permit / deny execution\n\t\t$execute_delayed = ($lead['payment_status'] == 'Approved') || $feed->ExecDelayedAlways;\n\n\t\tif ($feed->DelayPost) {\n\t\t\tif (apply_filters('gfdpspxpay_delayed_post_create', $execute_delayed, $lead, $form, $feed)) {\n\t\t\t\t$this->log_debug(sprintf('executing delayed post creation; form id %s, lead id %s', $form['id'], $lead['id']));\n\t\t\t\tGFFormsModel::create_post($form, $lead);\n\t\t\t}\n\t\t}\n\n\t\tif ($feed->DelayNotify || $feed->DelayAutorespond) {\n\t\t\t$this->sendDeferredNotifications($feed, $form, $lead, $execute_delayed);\n\t\t}\n\n\t\t// record that basic delayed actions have been fulfilled, before attempting things that might fail\n\t\tGFFormsModel::update_lead_property($lead['id'], 'is_fulfilled', true);\n\n\t\tif ($feed->DelayUserrego && class_exists('GFUser')) {\n\t\t\tif (apply_filters('gfdpspxpay_delayed_user_create', $execute_delayed, $lead, $form, $feed)) {\n\t\t\t\t$this->log_debug(sprintf('executing delayed user creation; form id %s, lead id %s', $form['id'], $lead['id']));\n\t\t\t\tGFUser::gf_create_user($lead, $form, true);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* send deferred notifications, handling pre- and post-1.7.0 worlds\n\t* @param GFDpsPxPayFeed $feed\n\t* @param array $form the form submission data\n\t* @param array $lead the form entry\n\t* @param bool $execute_delayed\n\t*/\n\tprotected function sendDeferredNotifications($feed, $form, $lead, $execute_delayed) {\n\t\tif (self::versionCompareGF('1.7.0', '<')) {\n\t\t\t// pre-1.7.0 notifications\n\t\t\tif ($feed->DelayNotify) {\n\t\t\t\tif (apply_filters('gfdpspxpay_delayed_notification_send', $execute_delayed, 'admin', $lead, $form, $feed)) {\n\t\t\t\t\tGFCommon::send_admin_notification($form, $lead);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($feed->DelayAutorespond) {\n\t\t\t\tif (apply_filters('gfdpspxpay_delayed_notification_send', $execute_delayed, 'user', $lead, $form, $feed)) {\n\t\t\t\t\tGFCommon::send_user_notification($form, $lead);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$notifications = GFCommon::get_notifications_to_send(\"form_submission\", $form, $lead);\n\t\t\tforeach ($notifications as $notification) {\n\t\t\t\tswitch (rgar($notification, 'type')) {\n\t\t\t\t\t// old \"user\" notification\n\t\t\t\t\tcase 'user':\n\t\t\t\t\t\tif ($feed->DelayAutorespond) {\n\t\t\t\t\t\t\tif (apply_filters('gfdpspxpay_delayed_notification_send', $execute_delayed, $notification, $lead, $form, $feed)) {\n\t\t\t\t\t\t\t\tGFCommon::send_notification($notification, $form, $lead);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t// old \"admin\" notification\n\t\t\t\t\tcase 'admin':\n\t\t\t\t\t\tif ($feed->DelayNotify) {\n\t\t\t\t\t\t\tif (apply_filters('gfdpspxpay_delayed_notification_send', $execute_delayed, $notification, $lead, $form, $feed)) {\n\t\t\t\t\t\t\t\tGFCommon::send_notification($notification, $form, $lead);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t// new since 1.7, add any notification you like\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (trim($notification['to']) == '{admin_email}') {\n\t\t\t\t\t\t\tif ($feed->DelayNotify) {\n\t\t\t\t\t\t\t\tif (apply_filters('gfdpspxpay_delayed_notification_send', $execute_delayed, $notification, $lead, $form, $feed)) {\n\t\t\t\t\t\t\t\t\tGFCommon::send_notification($notification, $form, $lead);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif ($feed->DelayAutorespond) {\n\t\t\t\t\t\t\t\tif (apply_filters('gfdpspxpay_delayed_notification_send', $execute_delayed, $notification, $lead, $form, $feed)) {\n\t\t\t\t\t\t\t\t\tGFCommon::send_notification($notification, $form, $lead);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* add custom merge tags\n\t* @param array $merge_tags\n\t* @param int $form_id\n\t* @param array $fields\n\t* @param int $element_id\n\t* @return array\n\t*/\n\tpublic function gformCustomMergeTags($merge_tags, $form_id, $fields, $element_id) {\n\t\tif ($form_id && $this->getFeed($form_id)) {\n\t\t\t$merge_tags[] = array('label' => 'Transaction ID', 'tag' => '{transaction_id}');\n\t\t\t$merge_tags[] = array('label' => 'Auth Code', 'tag' => '{authcode}');\n\t\t\t$merge_tags[] = array('label' => 'Payment Amount', 'tag' => '{payment_amount}');\n\t\t\t$merge_tags[] = array('label' => 'Payment Status', 'tag' => '{payment_status}');\n\t\t}\n\n\t\treturn $merge_tags;\n\t}\n\n\t/**\n\t* replace custom merge tags\n\t* @param string $text\n\t* @param array $form\n\t* @param array $lead\n\t* @param bool $url_encode\n\t* @param bool $esc_html\n\t* @param bool $nl2br\n\t* @param string $format\n\t* @return string\n\t*/\n\tpublic function gformReplaceMergeTags($text, $form, $lead, $url_encode, $esc_html, $nl2br, $format) {\n\t\t$gateway = gform_get_meta($lead['id'], 'payment_gateway');\n\t\tif ($gateway == 'gfdpspxpay') {\n\t\t\t$authCode = gform_get_meta($lead['id'], 'authcode');\n\n\t\t\t// format payment amount as currency\n\t\t\tif (isset($lead['payment_amount'])) {\n\t\t\t\tif (!class_exists('RGCurrency')) {\n\t\t\t\t\trequire_once(GFCommon::get_base_path() . '/currency.php');\n\t\t\t\t}\n\t\t\t\t$currency = new RGCurrency(!empty($lead['currency']) ? $lead['currency'] : GFCommon::get_currency());\n\t\t\t\t$payment_amount = $currency->to_money($lead['payment_amount']);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$payment_amount = '';\n\t\t\t}\n\n\t\t\t$tags = array (\n\t\t\t\t'{transaction_id}',\n\t\t\t\t'{payment_status}',\n\t\t\t\t'{payment_amount}',\n\t\t\t\t'{authcode}',\n\t\t\t);\n\t\t\t$values = array (\n\t\t\t\tisset($lead['transaction_id']) ? $lead['transaction_id'] : '',\n\t\t\t\tisset($lead['payment_status']) ? $lead['payment_status'] : '',\n\t\t\t\t$payment_amount,\n\t\t\t\t!empty($authCode) ? $authCode : '',\n\t\t\t);\n\n\t\t\t$text = str_replace($tags, $values, $text);\n\t\t}\n\n\t\treturn $text;\n\t}\n\n\t/**\n\t* activate and configure custom entry meta\n\t* @param array $entry_meta\n\t* @param int $form_id\n\t* @return array\n\t*/\n\tpublic function gformEntryMeta($entry_meta, $form_id) {\n\n\t\t$entry_meta['payment_gateway'] = array(\n\t\t\t'label'\t\t\t\t\t=> 'Payment Gateway',\n\t\t\t'is_numeric'\t\t\t=> false,\n\t\t\t'is_default_column'\t\t=> false,\n\t\t\t'filter'\t\t\t\t=> array(\n\t\t\t\t\t\t\t\t\t\t\t'operators' => array('is', 'isnot')\n\t\t\t\t\t\t\t\t\t\t),\n\t\t);\n\n\t\t$entry_meta['authcode'] = array(\n\t\t\t'label'\t\t\t\t\t=> 'AuthCode',\n\t\t\t'is_numeric'\t\t\t=> false,\n\t\t\t'is_default_column'\t\t=> false,\n\t\t\t'filter'\t\t\t\t=> array(\n\t\t\t\t\t\t\t\t\t\t\t'operators' => array('is', 'isnot')\n\t\t\t\t\t\t\t\t\t\t),\n\t\t);\n\n\t\treturn $entry_meta;\n\t}\n\n\t/**\n\t* get DPS credentials for selected operation mode\n\t* @param bool $useTest\n\t* @return array\n\t*/\n\tprotected function getDpsCredentials($useTest) {\n\t\tif ($useTest) {\n\t\t\treturn array($this->options['testID'], $this->options['testKey']);\n\t\t}\n\t\telse {\n\t\t\treturn array($this->options['userID'], $this->options['userKey']);\n\t\t}\n\t}\n\n\t/**\n\t* check whether this form entry's unique ID has already been used; if so, we've already done a payment attempt.\n\t* @param array $form\n\t* @return boolean\n\t*/\n\tprotected function hasFormBeenProcessed($form) {\n\t\tglobal $wpdb;\n\n\t\t$unique_id = GFFormsModel::get_form_unique_id($form['id']);\n\n\t\t$sql = \"select lead_id from {$wpdb->prefix}rg_lead_meta where meta_key='gfdpspxpay_unique_id' and meta_value = %s\";\n\t\t$lead_id = $wpdb->get_var($wpdb->prepare($sql, $unique_id));\n\n\t\tif ($lead_id) {\n\t\t\t$entry = GFFormsModel::get_lead($this->txResult['lead_id']);\n\t\t}\n\n\t\treturn !empty($entry['payment_status']);\n\t}\n\n\t/**\n\t* get feed for form\n\t* @param int $form_id the submitted form's ID\n\t* @return GFDpsPxPayFeed\n\t*/\n\tprotected function getFeed($form_id) {\n\t\tif ($this->feed !== false && (empty($this->feed) || $this->feed->FormID != $form_id)) {\n\t\t\t$this->feed = GFDpsPxPayFeed::getFormFeed($form_id);\n\t\t}\n\n\t\treturn $this->feed;\n\t}\n\n\t/**\n\t* get form data for form\n\t* @param array $form the form submission data\n\t* @return GFDpsPxPayFormData\n\t*/\n\tprotected function getFormData($form) {\n\t\tif (empty($this->formData) || $this->formData->formID != $form['id']) {\n\t\t\t$feed = $this->getFeed($form['id']);\n\t\t\t$this->formData = new GFDpsPxPayFormData($form, $feed);\n\t\t}\n\n\t\treturn $this->formData;\n\t}\n\n\t/**\n\t* enable Gravity Forms Logging Add-On support for this plugin\n\t* @param array $plugins\n\t* @return array\n\t*/\n\tpublic function enableLogging($plugins){\n\t\t$plugins['gfdpspxpay'] = 'Gravity Forms DPS PxPay';\n\n\t\treturn $plugins;\n\t}\n\n\t/**\n\t* write an error log via the Gravity Forms Logging Add-On\n\t* @param string $message\n\t*/\n\tpublic static function log_error($message){\n\t\tif (class_exists('GFLogging')) {\n\t\t\tGFLogging::include_logger();\n\t\t\tGFLogging::log_message('gfdpspxpay', $message, KLogger::ERROR);\n\t\t}\n\t}\n\n\t/**\n\t* write an debug message log via the Gravity Forms Logging Add-On\n\t* @param string $message\n\t*/\n\tpublic static function log_debug($message){\n\t\tif (class_exists('GFLogging')) {\n\t\t\tGFLogging::include_logger();\n\t\t\tGFLogging::log_message('gfdpspxpay', $message, KLogger::DEBUG);\n\t\t}\n\t}\n\n\t/**\n\t* send data via HTTP and return response\n\t* @param string $data\n\t* @param bool $sslVerifyPeer whether to validate the SSL certificate\n\t* @return string $response\n\t* @throws GFDpsPxPayCurlException\n\t*/\n\tpublic static function curlSendRequest($data, $sslVerifyPeer = true) {\n\t\t$plugin = self::getInstance();\n\t\t$url = $plugin->getApiUrl();\n\n\t\t// send data via HTTPS and receive response\n\t\t$response = wp_remote_post($url, array(\n\t\t\t'user-agent'\t=> 'Gravity Forms DPS PxPay ' . GFDPSPXPAY_PLUGIN_VERSION,\n\t\t\t'sslverify'\t\t=> $sslVerifyPeer,\n\t\t\t'timeout'\t\t=> 60,\n\t\t\t'headers'\t\t=> array('Content-Type' => 'text/xml; charset=utf-8'),\n\t\t\t'body'\t\t\t=> $data,\n\t\t));\n\n\t\tif (is_wp_error($response)) {\n\t\t\tthrow new GFDpsPxPayCurlException($response->get_error_message());\n\t\t}\n\n\t\treturn $response['body'];\n\t}\n\n\t/**\n\t* compare Gravity Forms version against target\n\t* @param string $target\n\t* @param string $operator\n\t* @return bool\n\t*/\n\tpublic static function versionCompareGF($target, $operator) {\n\t\tif (class_exists('GFCommon')) {\n\t\t\treturn version_compare(GFCommon::$version, $target, $operator);\n\t\t}\n\n\t\treturn false;\n\t}\n\n}\n", "<?php\n/*\n* Classes for dealing with a DPS PxPay result request\n* copyright (c) 2013 WebAware Pty Ltd, released under GPL v2.1\n*/\n\n/**\n* DPS PxPay result request\n*/\nclass GFDpsPxPayResult {\n\t// environment / website specific members\n\t/**\n\t* default true, whether to validate the remote SSL certificate\n\t* @var boolean\n\t*/\n\tpublic $sslVerifyPeer;\n\n\t// payment specific members\n\t/**\n\t* account name / email address at DPS PxPay\n\t* @var string max. 8 characters\n\t*/\n\tpublic $userID;\n\n\t/**\n\t* account name / email address at DPS PxPay\n\t* @var string max. 8 characters\n\t*/\n\tpublic $userKey;\n\n\t/**\n\t* encrypted transaction result, to be decrypted by DPS PxPay service\n\t* @var string\n\t*/\n\tpublic $result;\n\n\t/**\n\t* populate members with defaults, and set account and environment information\n\t* @param string $userID DPS PxPay account ID\n\t* @param string $userKey DPS PxPay encryption key\n\t*/\n\tpublic function __construct($userID, $userKey) {\n\t\t$this->sslVerifyPeer = true;\n\t\t$this->userID = $userID;\n\t\t$this->userKey = $userKey;\n\t}\n\n\t/**\n\t* process a result against DPS PxPay; throws exception on error with error described in exception message.\n\t*/\n\tpublic function processResult() {\n\t\t$xml = $this->getResultXML();\n\t\treturn $this->sendResultRequest($xml);\n\t}\n\n\t/**\n\t* create XML request document for result parameters\n\t* @return string\n\t*/\n\tpublic function getResultXML() {\n\t\t$xml = new XMLWriter();\n\t\t$xml->openMemory();\n\t\t$xml->startDocument('1.0', 'UTF-8');\n\t\t$xml->startElement('ProcessResponse');\n\n\t\t$xml->writeElement('PxPayUserId', substr($this->userID, 0, 32));\n\t\t$xml->writeElement('PxPayKey', substr($this->userKey, 0, 64));\n\t\t$xml->writeElement('Response', $this->result);\n\n\t\t$xml->endElement();\t\t// ProcessResponse\n\n\t\treturn $xml->outputMemory();\n\t}\n\n\t/**\n\t* send the DPS PxPay payment request and retrieve and parse the response\n\t* @param string $xml DPS PxPay payment request as an XML document, per DPS PxPay specifications\n\t* @return GFDpsPxPayResultResponse\n\t* @throws GFDpsPxPayException\n\t*/\n\tprotected function sendResultRequest($xml) {\n\t\t// execute the cURL request, and retrieve the response\n\t\ttry {\n\t\t\t$responseXML = GFDpsPxPayPlugin::curlSendRequest($xml, $this->sslVerifyPeer);\n\t\t}\n\t\tcatch (GFDpsPxPayCurlException $e) {\n\t\t\tthrow new GFDpsPxPayException(\"Error posting DPS PxPay result request: \" . $e->getMessage());\n\t\t}\n\n\t\t$response = new GFDpsPxPayResultResponse();\n\t\t$response->loadResponseXML($responseXML);\n\t\treturn $response;\n\t}\n}\n\n/**\n* DPS PxPay payment result response\n*/\nclass GFDpsPxPayResultResponse {\n\t/**\n\t* whether it was a successful request\n\t* @var boolean\n\t*/\n\tpublic $isValid;\n\n\t/**\n\t* For a successful transaction \"True\" is passed and for a failed transaction \"False\" is passed.\n\t* @var boolean\n\t*/\n\tpublic $success;\n\n\t/**\n\t* total amount of payment as processed, in dollars and cents as a floating-point number\n\t* @var float\n\t*/\n\tpublic $amount;\n\n\t/**\n\t* If the transaction is successful, this is the bank authorisation number.\n\t* @var string max. 22 characters\n\t*/\n\tpublic $authCode;\n\n\t/**\n\t* name on credit card\n\t* @var string max. 64 characters\n\t*/\n\tpublic $cardHoldersName;\n\n\t/**\n\t* name of credit card, e.g. Visa, Mastercard, Amex, Diners\n\t* @var string max. 16 characters\n\t*/\n\tpublic $cardName;\n\n\t/**\n\t* credit card number, with no spaces, obfuscated\n\t* @var string max. 16 characters\n\t*/\n\tpublic $cardNumber;\n\n\t/**\n\t* month of expiry, as MM\n\t* @var string max. 2 digits\n\t*/\n\tpublic $cardExpiryMonth;\n\n\t/**\n\t* year of expiry, as YY\n\t* @var string max. 2 digits\n\t*/\n\tpublic $cardExpiryYear;\n\n\t/**\n\t* NB. This number is returned as 'DpsTxnRef'\n\t* @var string max. 16 characters\n\t*/\n\tpublic $txnRef;\n\n\t/**\n\t* textual response status, e.g. APPROVED\n\t* @var string max. 32 characters\n\t*/\n\tpublic $statusText;\n\n\t/**\n\t* DPS-generated billing ID for recurring payments\n\t* @var string max. 16 characters\n\t*/\n\tpublic $recurringID;\n\n\t/**\n\t* the currency of the settlement\n\t* @var string max. 4 characters\n\t*/\n\tpublic $currencySettlement;\n\n\t/**\n\t* the currency of the payment request\n\t* @var string max. 4 characters\n\t*/\n\tpublic $currencyInput;\n\n\t/**\n\t* optional additional information for use in shopping carts, etc.\n\t* @var string max. 255 characters\n\t*/\n\tpublic $option1;\n\n\t/**\n\t* optional additional information for use in shopping carts, etc.\n\t* @var string max. 255 characters\n\t*/\n\tpublic $option2;\n\n\t/**\n\t* optional additional information for use in shopping carts, etc.\n\t* @var string max. 255 characters\n\t*/\n\tpublic $option3;\n\n\t/**\n\t* type of transaction (Purchase, Auth)\n\t* @var string max. 8 characters\n\t*/\n\tpublic $txnType;\n\n\t/**\n\t* an invoice reference to track by\n\t* @var string max. 64 characters\n\t*/\n\tpublic $invoiceReference;\n\n\t/**\n\t* IP address of the client\n\t* @var string\n\t*/\n\tpublic $clientIP;\n\n\t/**\n\t* transaction number passed in payment request\n\t* @var string max. 16 characters\n\t*/\n\tpublic $transactionNumber;\n\n\t/**\n\t* customer's email address\n\t* @var string max. 255 characters\n\t*/\n\tpublic $emailAddress;\n\n\t/**\n\t* additional billing ID for recurring payments as passed in payment request\n\t* @var string max. 32 characters\n\t*/\n\tpublic $billingID;\n\n\t/**\n\t* indication of uniqueness of card number\n\t* @var string\n\t*/\n\tpublic $txnMac;\n\n\t/**\n\t* a token generated by DPS when adding a card for recurring billing\n\t* @var string max. 16 characters\n\t*/\n\tpublic $cardNumber2;\n\n\t/**\n\t* CVC / CVV2 Result Code associated with the result of the CVC validation\n\t* @var string max. 1 character\n\t*/\n\tpublic $cvc2ResultCode;\n\n\t/**\n\t* load DPS PxPay response data as XML string\n\t* @param string $response DPS PxPay response as a string (hopefully of XML data)\n\t* @throws GFDpsPxPayException\n\t*/\n\tpublic function loadResponseXML($response) {\n\t\t// prevent XML injection attacks, and handle errors without warnings\n\t\t$oldDisableEntityLoader = libxml_disable_entity_loader(TRUE);\n\t\t$oldUseInternalErrors = libxml_use_internal_errors(TRUE);\n\n\t\ttry {\n\t\t\t$xml = simplexml_load_string($response);\n\t\t\tif ($xml === false) {\n\t\t\t\t$errmsg = '';\n\t\t\t\tforeach (libxml_get_errors() as $error) {\n\t\t\t\t\t$errmsg .= $error->message;\n\t\t\t\t}\n\t\t\t\tthrow new Exception($errmsg);\n\t\t\t}\n\n\t\t\t$this->isValid = ('1' === ((string) $xml['valid']));\n\t\t\t$this->success = !!((int) $xml->Success);\n\t\t\t$this->amount = (float) $xml->AmountSettlement;\n\t\t\t$this->authCode = (string) $xml->AuthCode;\n\t\t\t$this->cardHoldersName = (string) $xml->CardHolderName;\n\t\t\t$this->cardName = (string) $xml->CardName;\n\t\t\t$this->cardNumber = (string) $xml->CardNumber;\n\t\t\t$this->txnRef = (string) $xml->DpsTxnRef;\n\t\t\t$this->statusText = (string) $xml->ResponseText;\n\t\t\t$this->recurringID = (string) $xml->DpsBillingId;\n\t\t\t$this->currencySettlement = (string) $xml->CurrencySettlement;\n\t\t\t$this->currencyInput = (string) $xml->CurrencyInput;\n\t\t\t$this->option1 = (string) $xml->TxnData1;\n\t\t\t$this->option2 = (string) $xml->TxnData2;\n\t\t\t$this->option3 = (string) $xml->TxnData3;\n\t\t\t$this->txnType = (string) $xml->TxnType;\n\t\t\t$this->invoiceReference = (string) $xml->MerchantReference;\n\t\t\t$this->clientIP = (string) $xml->ClientInfo;\n\t\t\t$this->transactionNumber = (string) $xml->TxnId;\n\t\t\t$this->emailAddress = (string) $xml->EmailAddress;\n\t\t\t$this->billingID = (string) $xml->BillingId;\n\t\t\t$this->txnMac = (string) $xml->TxnMac;\n\t\t\t$this->cardNumber2 = (string) $xml->CardNumber2;\n\t\t\t$this->cvc2ResultCode = (string) $xml->Cvc2ResultCode;\n\n\t\t\t$cardExpiry = (string) $xml->DateExpiry;\n\t\t\t$this->cardExpiryMonth = substr($cardExpiry, 0, 2);\n\t\t\t$this->cardExpiryYear = substr($cardExpiry, 2, 2);\n\n\t\t\t// restore old libxml settings\n\t\t\tlibxml_disable_entity_loader($oldDisableEntityLoader);\n\t\t\tlibxml_use_internal_errors($oldUseInternalErrors);\n\t\t}\n\t\tcatch (Exception $e) {\n\t\t\t// restore old libxml settings\n\t\t\tlibxml_disable_entity_loader($oldDisableEntityLoader);\n\t\t\tlibxml_use_internal_errors($oldUseInternalErrors);\n\n\t\t\tthrow new GFDpsPxPayException('Error parsing DPS PxPay result: ' . $e->getMessage());\n\t\t}\n\n\t\t// if response is \"invalid\", throw error with message given in statusText field\n\t\tif (!$this->isValid) {\n\t\t\tthrow new GFDpsPxPayException('Error from DPS PxPay result: ' . $this->statusText);\n\t\t}\n\t}\n}\n", "# Gravity Forms DPS PxPay #\n\nIntegrate [Gravity Forms](http://webaware.com.au/get-gravity-forms) with the DPS Payment Express PxPay credit card payment gateway\n\n* [Home](http://shop.webaware.com.au/downloads/gravity-forms-dps-pxpay/)\n* [GitHub](https://github.com/webaware/gravity-forms-dps-pxpay/)\n* [Readme](https://github.com/webaware/gravity-forms-dps-pxpay/blob/master/readme.txt)\n* [Download](https://wordpress.org/plugins/gravity-forms-dps-pxpay/)\n* [Documentation](https://wordpress.org/plugins/gravity-forms-dps-pxpay/faq/)\n* [Support](https://wordpress.org/support/plugin/gravity-forms-dps-pxpay)\n* [Donate](http://shop.webaware.com.au/downloads/gravity-forms-dps-pxpay/)\n", "=== Gravity Forms DPS PxPay ===\nContributors: webaware, IstanbulMMV\nPlugin Name: Gravity Forms DPS PxPay\nPlugin URI: http://shop.webaware.com.au/downloads/gravity-forms-dps-pxpay/\nAuthor URI: http://webaware.com.au/\nDonate link: http://shop.webaware.com.au/downloads/gravity-forms-dps-pxpay/\nTags: gravityforms, gravity forms, gravity, dps, payment express, pxpay, donation, donations, payment, payment gateway, ecommerce, credit cards, new zealand, australia\nRequires at least: 3.7.1\nTested up to: 4.2.1\nStable tag: 1.4.3\nLicense: GPLv2 or later\nLicense URI: http://www.gnu.org/licenses/gpl-2.0.html\n\nIntegrate Gravity Forms with the DPS Payment Express PxPay credit card payment gateway\n\n== Description ==\n\nGravity Forms DPS PxPay adds a credit card payment gateway for [DPS PxPay](http://www.paymentexpress.com/Products/Ecommerce/DPS_Hosted) to the [Gravity Forms](http://webaware.com.au/get-gravity-forms) plugin.\n\n* build online donation forms\n* build online booking forms\n* build simple Buy Now forms\n\n> NB: this plugin extends [Gravity Forms](http://webaware.com.au/get-gravity-forms); you still need to install and activate Gravity Forms!\n\n= Sponsorships =\n\n* creation of this plugin was generously sponsored by [IstanbulMMV](https://profiles.wordpress.org/IstanbulMMV/profile/)\n\nThanks for sponsoring new features on Gravity Forms DPS PxPay!\n\n= Requirements: =\n\n* Install the [Gravity Forms](http://webaware.com.au/get-gravity-forms) plugin\n* Create an account with DPS for [PxPay](https://sec.paymentexpress.com/pxmi/apply)\n\n== Installation ==\n\n1. Install and activate the [Gravity Forms](http://webaware.com.au/get-gravity-forms) plugin\n2. Upload the Gravity Forms DPS PxPay plugin to your /wp-content/plugins/ directory.\n3. Activate the Gravity Forms DPS PxPay plugin through the 'Plugins' menu in WordPress.\n4. Edit the DPS PxPay payment gateway settings to set your DPS PxPay user ID and key\n\n= Building a Gravity Form with Credit Card Payments =\n\n* add one or more Product fields or a Total field to your form. The plugin will automatically detect the values assigned to these pricing fields\n* if required, add customer name and contact information fields to your form. These optional fields can be mapped when creating a DPS PxPay feed and their values stored against each transaction in your DPS Payline console\n* add a DPS PxPay feed, mapping your form fields to DPS PxPay transaction fields (Merchant Reference, TxnData1, TxnData2, TxnData3)\n\n== Frequently Asked Questions ==\n\n= What is DPS PxPay? =\n\nDPS PxPay is a hosted Credit Card payment gateway. DPS Payment Express is one of Australasia's leading online payments solutions providers.\n\n= Will this plugin work without installing Gravity Forms? =\n\nNo. This plugin adds a DPS Payment Express PxPay payment gateway to Gravity Forms so that you can add online payments to your forms. You must purchase and install a copy of the [Gravity Forms](http://webaware.com.au/get-gravity-forms) plugin too.\n\n= What Gravity Forms license do I need? =\n\nAny Gravity Forms license will do. You can use this plugin with the Personal, Business or Developer licenses.\n\n= What is the difference between Normal and Testing (Sandbox) mode? =\n\nGravity Forms DPS PxPay enables you to store two pairs of User ID and User Key credentials. When you first signup for a PxPay account with DPS you will likely be issued development or testing credentials. Later, when you want to go live with your site, you will need to request a new User ID and User Key from DPS. Sandbox mode enables you to switch between your live and test credentials. If you only have testing credentials, both your User ID and Test ID and User Key and Test Key should be identical. In this instance, Sandbox mode can be switched either On or Off.\n\n=  Where will the customer be directed after they complete their DPS Credit Card transaction? =\n\nStandard Gravity Forms submission logic applies. The customer will either be shown your chosen confirmation message, directed to a nominated page on your website or sent to a custom URL.\n\n= Where do I find the DPS PxPay transaction number? =\n\nSuccessful transaction details including the DPS PxPay transaction number and bank authcode are shown in the Info box when you view the details of a form entry in the WordPress admin.\n\n= How do I add a confirmed payment amount and transaction number to my Gravity Forms admin or customer email? =\n\nBrowse to your Gravity Form, select [Notifications](http://www.gravityhelp.com/documentation/page/Notifications) and use the Insert Merge Tag dropdown (Payment Amount, Transaction Number and Auth Code will appear under Custom at the very bottom of the dropdown list).\n\nNB: these custom merge tags will only work if notifications are only sent after payment is accepted.\n\n= How do I change my currency type? =\n\nUse your Gravity Forms Settings page to select the currency type to pass to DPS. Please ensure your currency type is supported by DPS\n\n= Purchase or Auth? =\n\nDPS PxPay supports two transaction types - Purchase and Auth. The Gravity Forms DPS PxPay plugin only supports the Purchase transaction type\n\n= Can I do recurring payments? =\n\nNot yet.\n\n=  Where can I find dummy Credit Card details for testing purposes? =\n\n[Visit this page](http://www.paymentexpress.com/knowledge_base/faq/developer_faq.html#Testing%20Details)\n\n= I get an SSL error when my form attempts to connect with DPS =\n\nThis is a common problem in local testing environments. Please [read this post](http://snippets.webaware.com.au/howto/stop-turning-off-curlopt_ssl_verifypeer-and-fix-your-php-config/) for more information.\n\n= Can I use this plugin on any shared-hosting environment? =\n\nThe plugin will run in shared hosting environments, but requires PHP 5 with the following modules enabled (talk to your host). Both are typically available because they are enabled by default in PHP 5, but may be disabled on some shared hosts.\n\n* XMLWriter\n* SimpleXML\n\n== Screenshots ==\n\n1. Options screen\n2. A sample donation form\n3. A list of DPS PxPay feeds\n4. A DPS PxPay feed (mapping form fields to DPS PxPay)\n5. The sample donation form as it appears on a page\n6. A successful entry in Gravity Forms admin\n\n== Filter hooks ==\n\nDevelopers can use these filter hooks to modify some invoice properties. Each filter receives a string for the field value, and the Gravity Forms form array.\n\n* `gfdpspxpay_invoice_desc` for modifying the invoice description\n* `gfdpspxpay_invoice_ref` for modifying the invoice reference\n* `gfdpspxpay_invoice_trans_number` for modifying the invoice transaction reference; NB: must be unique for PxPay account!\n* `gfdpspxpay_invoice_txndata1` for setting the TxnData1 field\n* `gfdpspxpay_invoice_txndata2` for setting the TxnData2 field\n* `gfdpspxpay_invoice_txndata3` for setting the TxnData3 field\n\nDevelopers can run processes on these actions (e.g. load classes required to handle invoice presentation):\n\n* `gfdpspxpay_process_return`\n* `gfdpspxpay_process_confirmation`\n\n== Contributions ==\n\n* [Fork me on GitHub](https://github.com/webaware/gravity-forms-dps-pxpay/)\n\n== Changelog ==\n\n= 1.4.3, 2015-05-01 =\n\n* fixed: error reporting when initial request fails, e.g. with API key error\n* fixed: error handling logic with redirect as confirmation\n* added: some more precautionary XSS prevention steps\n* added: action `gfdpspxpay_process_return_parsed` with `$lead`, `$form`, `$feed`\n* added: action `gfdpspxpay_process_confirmation_parsed` with `$entry`, `$form`\n\n= 1.4.2, 2014-12-23 =\n* added: hooks `gfdpspxpay_process_return` and `gfdpspxpay_process_confirmation`\n* changed: merge tags use currency of transaction for amount display\n\n= 1.4.1, 2014-11-22 =\n* fixed: **IMPORTANT**: forms with no DPS PxPay feeds were sending blank notification emails (sorry Josh!)\n\n= 1.4.0, 2014-11-06 =\n* added: delay user registration until payment is processed\n* added: support for PxPay API v2.0, via option (default is v2.0 for new installs)\n* added: custom entry meta `authcode` and `payment_gateway` which can be added to listings, used in notification conditions\n* fixed: Gravity Forms 1.9 compatibility\n* changed: **IMPORTANT**: defaults to only processing delayed notifications, post creation, user rego, on successful payment\n* changed: order feeds in admin by name, not by date created\n* changed: code formatting, removed some unused variables\n* changed: minimum requirements now WordPress 3.7.1, Gravity Forms 1.7\n\n= 1.3.3, 2014-08-15 =\n* added: basic support for Gravity Forms Logging Add-On, to assist support requests\n\n= 1.3.2, 2014-06-25 =\n* fixed: Gravity Forms 1.8.9 Payment Details box on entry details\n\n= 1.3.1, 2014-06-12 =\n* fixed: admin scripts / stylesheet not loading, feed admin broken\n* fixed: don't attempt to make a payment when the total is 0, so form entry can still be submitted\n\n= 1.3.0, 2014-06-07 =\n* fixed: hidden products are now correctly handled\n* fixed: shipping is now correctly handled\n* fixed: RGFormsModel::update_lead() is deprecated in Gravity Forms v1.8.8\n* changed: move authcode into Gravity Forms 1.8.8 Payment Details box on entry details\n* changed: merge template for payment amount is now formatted as currency\n* changed: save transaction reference for failed transactions too\n* changed: some code refactoring\n\n= 1.2.1, 2014-05-14 =\n* fixed: products with separate quantity fields fail\n* fixed: undefined index 'post_status' when saving feed\n\n= 1.2.0, 2014-01-17 =\n* fixed: transaction ID was not unique between installations with same account\n* fixed: settings wouldn't save in WordPress multisite installations\n* fixed: Get Help link to support forum\n* added: filters for altering PxPay transaction properties\n* added: custom merge field for payment status\n* changed: DPS PxPay settings page is now a Gravity Forms settings subpage, like other addons\n* changed: some code refactoring for maintenance / compatibility\n\n= 1.1.0, 2013-04-26 =\n* fixed: Gravity Forms 1.7 compatibility fixes for deferring the new multiple notifications\n* fixed: WordPress SEO setting \"Redirect ugly URL's to clean permalinks\" breaks many things, including this plugin (but not any more)\n* fixed: nonce (number once) handling in settings admin\n* added: entries links on feeds admin\n\n= 1.0.1, 2013-04-12 =\n* fixed: amounts greater than 999.99 work correctly (was getting an IU error on Payment Express screen)\n* fixed: don't squabble with other plugins for custom merge tags of same name\n* fixed: don't stomp on admin page icons for other Gravity Forms plugins\n\n= 1.0.0, 2013-01-25 =\n* initial public release\n\n== Upgrade Notice ==\n\n= 1.4.1 =\n* **IMPORTANT**: forms with no DPS PxPay feeds were sending blank notification emails, fixed in this release\n\n= 1.4.0 =\n* **IMPORTANT**: defaults to only processing delayed notifications, post creation, user rego, on successful payment\n", "\n<div style=\"display:none;\">\n<?php submit_button( __( 'Save' ), 'button', 'save' ); ?>\n<input type=\"hidden\" name=\"post_status\" value=\"publish\" />\n</div>\n\n<div id=\"major-publishing-actions\">\n<?php do_action('post_submitbox_start'); ?>\n<div id=\"delete-action\">\n<?php\nif ( current_user_can( \"delete_post\", $post->ID ) ) {\n\tif ( !EMPTY_TRASH_DAYS )\n\t\t$delete_text = __('Delete Permanently');\n\telse\n\t\t$delete_text = __('Move to Trash');\n\t?>\n\t<a class=\"submitdelete deletion\" href=\"<?php echo esc_url(get_delete_post_link($post->ID)); ?>\"><?php echo $delete_text; ?></a><?php\n} ?>\n</div>\n\n<div id=\"publishing-action\">\n<span class=\"spinner\"></span>\n\t<input name=\"original_publish\" type=\"hidden\" id=\"original_publish\" value=\"Save\" />\n\t<?php submit_button('Save', 'primary button-large', 'publish', false, array() ); ?>\n</div>\n<div class=\"clear\"></div>\n\n</div>\n\n", "\n<div class=\"error\">\n\t<p>Gravity Forms DPS PxPay requires these missing PHP extensions. Please contact your website host to have these extensions installed.</p>\n\t<ul style=\"list-style-type: disc; padding-left: 2em;\">\n\t<?php foreach ($missing as $ext): ?>\n\t\t<li><?php echo esc_html($ext); ?></li>\n\t<?php endforeach; ?>\n\t</ul>\n</div>\n"], "filenames": ["gravityforms-dps-pxpay.php", "includes/class.GFDpsPxPayAdmin.php", "includes/class.GFDpsPxPayFeedAdmin.php", "includes/class.GFDpsPxPayPayment.php", "includes/class.GFDpsPxPayPlugin.php", "includes/class.GFDpsPxPayResult.php", "readme.md", "readme.txt", "views/metabox-save.php", "views/requires-extensions.php"], "buggy_code_start_loc": [6, 137, 108, 238, 407, 314, 8, 9, 17, 5], "buggy_code_end_loc": [38, 219, 272, 277, 585, 315, 11, 138, 18, 8], "fixing_code_start_loc": [6, 137, 108, 239, 408, 314, 8, 9, 17, 5], "fixing_code_end_loc": [38, 222, 272, 302, 593, 315, 11, 147, 18, 8], "type": "CWE-79", "message": "A vulnerability, which was classified as problematic, was found in Gravity Forms DPS PxPay Plugin up to 1.4.2 on WordPress. Affected is an unknown function. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 1.4.3 is able to address this issue. The name of the patch is 5966a5e6343e3d5610bdfa126a5cfbae95e629b6. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-230664.", "other": {"cve": {"id": "CVE-2015-10117", "sourceIdentifier": "cna@vuldb.com", "published": "2023-06-06T02:15:08.830", "lastModified": "2024-02-29T01:16:11.890", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, was found in Gravity Forms DPS PxPay Plugin up to 1.4.2 on WordPress. Affected is an unknown function. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 1.4.3 is able to address this issue. The name of the patch is 5966a5e6343e3d5610bdfa126a5cfbae95e629b6. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-230664."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:webaware:gf_windcave_free:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "1.4.3", "matchCriteriaId": "811DDC09-2E58-4E0B-A281-58B0E52BABF1"}]}]}], "references": [{"url": "https://github.com/wp-plugins/gravity-forms-dps-pxpay/commit/5966a5e6343e3d5610bdfa126a5cfbae95e629b6", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/wp-plugins/gravity-forms-dps-pxpay/releases/tag/1.4.3", "source": "cna@vuldb.com", "tags": ["Product"]}, {"url": "https://vuldb.com/?ctiid.230664", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory", "VDB Entry"]}, {"url": "https://vuldb.com/?id.230664", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/wp-plugins/gravity-forms-dps-pxpay/commit/5966a5e6343e3d5610bdfa126a5cfbae95e629b6"}}