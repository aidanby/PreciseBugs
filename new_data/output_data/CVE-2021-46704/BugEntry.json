{"buggy_code": ["/**\n * Copyright 2013-2019  GenieACS Inc.\n *\n * This file is part of GenieACS.\n *\n * GenieACS is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * GenieACS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with GenieACS.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { platform } from \"os\";\nimport { exec } from \"child_process\";\n\nexport interface PingResult {\n  packetsTransmitted: number;\n  packetsReceived: number;\n  packetLoss: number;\n  min: number;\n  avg: number;\n  max: number;\n  mdev: number;\n}\n\nexport function ping(\n  host: string,\n  callback: (err: Error, res?: PingResult, stdout?: string) => void\n): void {\n  let cmd: string, parseRegExp1: RegExp, parseRegExp2: RegExp;\n  host = host.replace(\"[\", \"\").replace(\"]\", \"\");\n  switch (platform()) {\n    case \"linux\":\n      cmd = `ping -w 1 -i 0.2 -c 3 ${host}`;\n      parseRegExp1 =\n        /(\\d+) packets transmitted, (\\d+) received, ([\\d.]+)% packet loss[^]*([\\d.]+)\\/([\\d.]+)\\/([\\d.]+)\\/([\\d.]+)/;\n      parseRegExp2 =\n        /(\\d+) packets transmitted, (\\d+) received, ([\\d.]+)% packet loss/;\n      break;\n\n    case \"freebsd\":\n      // Send a single packet because on FreeBSD only superuser can send\n      // packets that are only 200 ms apart.\n      cmd = `ping -t 1 -c 3 ${host}`;\n      parseRegExp1 =\n        /(\\d+) packets transmitted, (\\d+) packets received, ([\\d.]+)% packet loss\\nround-trip min\\/avg\\/max\\/stddev = ([\\d.]+)\\/([\\d.]+)\\/([\\d.]+)\\/([\\d.]+) ms/;\n      parseRegExp2 =\n        /(\\d+) packets transmitted, (\\d+) packets received, ([\\d.]+)% packet loss/;\n      break;\n\n    default:\n      return callback(new Error(\"Platform not supported\"));\n  }\n\n  exec(cmd, (err, stdout) => {\n    let parsed: PingResult;\n    if (stdout) {\n      const m1 = stdout.match(parseRegExp1);\n      if (m1) {\n        parsed = {\n          packetsTransmitted: +m1[1],\n          packetsReceived: +m1[2],\n          packetLoss: +m1[3],\n          min: +m1[4],\n          avg: +m1[5],\n          max: +m1[6],\n          mdev: +m1[7],\n        };\n      } else {\n        const m2 = stdout.match(parseRegExp2);\n        if (m2) {\n          parsed = {\n            packetsTransmitted: +m2[1],\n            packetsReceived: +m2[2],\n            packetLoss: +m2[3],\n            min: null,\n            avg: null,\n            max: null,\n            mdev: null,\n          };\n        }\n      }\n    }\n\n    callback(err, parsed, stdout);\n  });\n}\n"], "fixing_code": ["/**\n * Copyright 2013-2019  GenieACS Inc.\n *\n * This file is part of GenieACS.\n *\n * GenieACS is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * GenieACS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with GenieACS.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { platform } from \"os\";\nimport { exec } from \"child_process\";\nimport { domainToASCII } from \"url\";\n\nexport interface PingResult {\n  packetsTransmitted: number;\n  packetsReceived: number;\n  packetLoss: number;\n  min: number;\n  avg: number;\n  max: number;\n  mdev: number;\n}\n\nfunction isValidHost(host: string): boolean {\n  // Valid chars in IPv4, IPv6, domain names\n  if (/^[a-zA-Z0-9\\-.:[\\]-]+$/.test(host)) return true;\n\n  // Check if input is an IDN convert to Punycode\n  // Can't merge with above because domainToASCII doesn't accept IP addresses\n  return /^[a-zA-Z0-9\\-.:[\\]-]+$/.test(domainToASCII(host));\n}\n\nexport function ping(\n  host: string,\n  callback: (err: Error, res?: PingResult, stdout?: string) => void\n): void {\n  let cmd: string, parseRegExp1: RegExp, parseRegExp2: RegExp;\n  // Validate input to prevent possible remote code execution\n  // Credit to Alex Hordijk for reporting this vulnerability\n  if (!isValidHost(host)) return callback(new Error(\"Invalid host\"));\n  host = host.replace(\"[\", \"\").replace(\"]\", \"\");\n  switch (platform()) {\n    case \"linux\":\n      cmd = `ping -w 1 -i 0.2 -c 3 ${host}`;\n      parseRegExp1 =\n        /(\\d+) packets transmitted, (\\d+) received, ([\\d.]+)% packet loss[^]*([\\d.]+)\\/([\\d.]+)\\/([\\d.]+)\\/([\\d.]+)/;\n      parseRegExp2 =\n        /(\\d+) packets transmitted, (\\d+) received, ([\\d.]+)% packet loss/;\n      break;\n\n    case \"freebsd\":\n      // Send a single packet because on FreeBSD only superuser can send\n      // packets that are only 200 ms apart.\n      cmd = `ping -t 1 -c 3 ${host}`;\n      parseRegExp1 =\n        /(\\d+) packets transmitted, (\\d+) packets received, ([\\d.]+)% packet loss\\nround-trip min\\/avg\\/max\\/stddev = ([\\d.]+)\\/([\\d.]+)\\/([\\d.]+)\\/([\\d.]+) ms/;\n      parseRegExp2 =\n        /(\\d+) packets transmitted, (\\d+) packets received, ([\\d.]+)% packet loss/;\n      break;\n\n    default:\n      return callback(new Error(\"Platform not supported\"));\n  }\n\n  exec(cmd, (err, stdout) => {\n    let parsed: PingResult;\n    if (stdout) {\n      const m1 = stdout.match(parseRegExp1);\n      if (m1) {\n        parsed = {\n          packetsTransmitted: +m1[1],\n          packetsReceived: +m1[2],\n          packetLoss: +m1[3],\n          min: +m1[4],\n          avg: +m1[5],\n          max: +m1[6],\n          mdev: +m1[7],\n        };\n      } else {\n        const m2 = stdout.match(parseRegExp2);\n        if (m2) {\n          parsed = {\n            packetsTransmitted: +m2[1],\n            packetsReceived: +m2[2],\n            packetLoss: +m2[3],\n            min: null,\n            avg: null,\n            max: null,\n            mdev: null,\n          };\n        }\n      }\n    }\n\n    callback(err, parsed, stdout);\n  });\n}\n"], "filenames": ["lib/ping.ts"], "buggy_code_start_loc": [21], "buggy_code_end_loc": [37], "fixing_code_start_loc": [22], "fixing_code_end_loc": [51], "type": "CWE-78", "message": "In GenieACS 1.2.x before 1.2.8, the UI interface API is vulnerable to unauthenticated OS command injection via the ping host argument (lib/ui/api.ts and lib/ping.ts). The vulnerability arises from insufficient input validation combined with a missing authorization check.", "other": {"cve": {"id": "CVE-2021-46704", "sourceIdentifier": "cve@mitre.org", "published": "2022-03-06T07:15:07.200", "lastModified": "2022-03-11T14:41:20.677", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In GenieACS 1.2.x before 1.2.8, the UI interface API is vulnerable to unauthenticated OS command injection via the ping host argument (lib/ui/api.ts and lib/ping.ts). The vulnerability arises from insufficient input validation combined with a missing authorization check."}, {"lang": "es", "value": "En GenieACS versiones 1.2.x anteriores a 1.2.8, la API de la interfaz de usuario es vulnerable a la inyecci\u00f3n de comandos del sistema operativo no autenticados por medio del argumento ping host (lib/ui/api.ts y lib/ping.ts). La vulnerabilidad surge de una insuficiente comprobaci\u00f3n de entrada combinada con una falta de comprobaci\u00f3n de autorizaci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:genieacs:genieacs:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.2.0", "versionEndExcluding": "1.2.8", "matchCriteriaId": "F1216F68-A0AA-4D40-82D9-A26DF995FA89"}]}]}], "references": [{"url": "https://github.com/genieacs/genieacs/commit/7f295beeecc1c1f14308a93c82413bb334045af6", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/genieacs/genieacs/releases/tag/v1.2.8", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/genieacs/genieacs/commit/7f295beeecc1c1f14308a93c82413bb334045af6"}}