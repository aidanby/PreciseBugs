{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Model\\Document\\Editable;\n\nuse Pimcore\\Logger;\nuse Pimcore\\Model;\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\Document;\n\n/**\n * @method \\Pimcore\\Model\\Document\\Editable\\Dao getDao()\n */\nclass Link extends Model\\Document\\Editable implements IdRewriterInterface, EditmodeDataInterface\n{\n    /**\n     * Contains the data for the link\n     *\n     * @internal\n     *\n     * @var array|null\n     */\n    protected $data;\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getType()\n    {\n        return 'link';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getData()\n    {\n        // update path if internal link\n        $this->updatePathFromInternal(true);\n\n        return $this->data;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getDataEditmode() /** : mixed */\n    {\n        // update path if internal link\n        $this->updatePathFromInternal(true, true);\n\n        return $this->data;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function getEditmodeElementClasses($options = []): array\n    {\n        // we don't want the class attribute being applied to the editable container element (<div>, only to the <a> tag inside\n        // the default behavior of the parent method is to include the \"class\" attribute\n        $classes = [\n            'pimcore_editable',\n            'pimcore_editable_' . $this->getType(),\n        ];\n\n        return $classes;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function frontend()\n    {\n        $url = $this->getHref();\n\n        if (strlen($url) > 0) {\n            if (!is_array($this->config)) {\n                $this->config = [];\n            }\n\n            $prefix = '';\n            $suffix = '';\n            $noText = false;\n\n            if (array_key_exists('textPrefix', $this->config)) {\n                $prefix = $this->config['textPrefix'];\n                unset($this->config['textPrefix']);\n            }\n\n            if (array_key_exists('textSuffix', $this->config)) {\n                $suffix = $this->config['textSuffix'];\n                unset($this->config['textSuffix']);\n            }\n\n            if (isset($this->config['noText']) && $this->config['noText'] == true) {\n                $noText = true;\n                unset($this->config['noText']);\n            }\n\n            // add attributes to link\n            $allowedAttributes = [\n                'charset',\n                'coords',\n                'hreflang',\n                'name',\n                'rel',\n                'rev',\n                'shape',\n                'target',\n                'accesskey',\n                'class',\n                'dir',\n                'draggable',\n                'dropzone',\n                'contextmenu',\n                'id',\n                'lang',\n                'style',\n                'tabindex',\n                'title',\n                'media',\n                'download',\n                'ping',\n                'type',\n                'referrerpolicy',\n                'xml:lang',\n                'onblur',\n                'onclick',\n                'ondblclick',\n                'onfocus',\n                'onmousedown',\n                'onmousemove',\n                'onmouseout',\n                'onmouseover',\n                'onmouseup',\n                'onkeydown',\n                'onkeypress',\n                'onkeyup',\n            ];\n            $defaultAttributes = [];\n\n            if (!is_array($this->data)) {\n                $this->data = [];\n            }\n\n            $availableAttribs = array_merge($defaultAttributes, $this->data, $this->config);\n\n            // add attributes to link\n            $attribs = [];\n            foreach ($availableAttribs as $key => $value) {\n                if ((is_string($value) || is_numeric($value))\n                    && (strpos($key, 'data-') === 0 ||\n                        strpos($key, 'aria-') === 0 ||\n                        in_array($key, $allowedAttributes))) {\n                    if (!empty($this->data[$key]) && !empty($this->config[$key])) {\n                        $attribs[] = $key.'=\"'. $this->data[$key] .' '. $this->config[$key] .'\"';\n                    } elseif (!empty($value)) {\n                        $attribs[] = $key.'=\"'.$value.'\"';\n                    }\n                }\n            }\n\n            $attribs = array_unique($attribs);\n\n            if (array_key_exists('attributes', $this->data) && !empty($this->data['attributes'])) {\n                $attribs[] = $this->data['attributes'];\n            }\n\n            return '<a href=\"'.$url.'\" '.implode(' ', $attribs).'>' . $prefix . ($noText ? '' : htmlspecialchars($this->data['text'])) . $suffix . '</a>';\n        }\n\n        return '';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function checkValidity()\n    {\n        $sane = true;\n        if (is_array($this->data) && isset($this->data['internal']) && $this->data['internal']) {\n            if ($this->data['internalType'] == 'document') {\n                $doc = Document::getById($this->data['internalId']);\n                if (!$doc) {\n                    $sane = false;\n                    Logger::notice(\n                        'Detected insane relation, removing reference to non existent document with id ['.$this->getDocumentId(\n                        ).']'\n                    );\n                    $this->data = null;\n                }\n            } elseif ($this->data['internalType'] == 'asset') {\n                $asset = Asset::getById($this->data['internalId']);\n                if (!$asset) {\n                    $sane = false;\n                    Logger::notice(\n                        'Detected insane relation, removing reference to non existent asset with id ['.$this->getDocumentId(\n                        ).']'\n                    );\n                    $this->data = null;\n                }\n            } elseif ($this->data['internalType'] == 'object') {\n                $object = Model\\DataObject\\Concrete::getById($this->data['internalId']);\n                if (!$object) {\n                    $sane = false;\n                    Logger::notice(\n                        'Detected insane relation, removing reference to non existent object with id ['.$this->getDocumentId(\n                        ).']'\n                    );\n                    $this->data = null;\n                }\n            }\n        }\n\n        return $sane;\n    }\n\n    /**\n     * @return string\n     */\n    public function getHref()\n    {\n        $this->updatePathFromInternal();\n\n        $url = $this->data['path'] ?? '';\n\n        if (strlen($this->data['parameters'] ?? '') > 0) {\n            $url .= (strpos($url, '?') !== false ? '&' : '?') . str_replace('?', '', $this->getParameters());\n        }\n\n        if (strlen($this->data['anchor'] ?? '') > 0) {\n            $anchor = $this->getAnchor();\n            $anchor = str_replace('\"', urlencode('\"'), $anchor);\n            $url .= '#' . str_replace('#', '', $anchor);\n        }\n\n        return $url;\n    }\n\n    /**\n     * @param bool $realPath\n     * @param bool $editmode\n     */\n    private function updatePathFromInternal($realPath = false, $editmode = false)\n    {\n        $method = 'getFullPath';\n        if ($realPath) {\n            $method = 'getRealFullPath';\n        }\n\n        if (isset($this->data['internal']) && $this->data['internal']) {\n            if ($this->data['internalType'] == 'document') {\n                if ($doc = Document::getById($this->data['internalId'])) {\n                    if ($editmode || (!Document::doHideUnpublished() || $doc->isPublished())) {\n                        $this->data['path'] = $doc->$method();\n                    } else {\n                        $this->data['path'] = '';\n                    }\n                }\n            } elseif ($this->data['internalType'] == 'asset') {\n                if ($asset = Asset::getById($this->data['internalId'])) {\n                    $this->data['path'] = $asset->$method();\n                }\n            } elseif ($this->data['internalType'] == 'object') {\n                if ($object = Model\\DataObject::getById($this->data['internalId'])) {\n                    if ($editmode) {\n                        $this->data['path'] = $object->getFullPath();\n                    } else {\n                        if ($object instanceof Model\\DataObject\\Concrete) {\n                            if ($linkGenerator = $object->getClass()->getLinkGenerator()) {\n                                if ($realPath) {\n                                    $this->data['path'] = $object->getFullPath();\n                                } else {\n                                    $this->data['path'] = $linkGenerator->generate(\n                                        $object,\n                                        [\n                                            'document' => $this->getDocument(),\n                                            'context' => $this,\n                                        ]\n                                    );\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // deletes unnecessary attribute, which was set by mistake in earlier versions, see also\n        // https://github.com/pimcore/pimcore/issues/7394\n        if (isset($this->data['type'])) {\n            unset($this->data['type']);\n        }\n    }\n\n    /**\n     * @return string\n     */\n    public function getText()\n    {\n        return $this->data['text'] ?? '';\n    }\n\n    /**\n     * @param string $text\n     */\n    public function setText($text)\n    {\n        $this->data['text'] = $text;\n    }\n\n    /**\n     * @return string\n     */\n    public function getTarget()\n    {\n        return $this->data['target'] ?? '';\n    }\n\n    /**\n     * @return string\n     */\n    public function getParameters()\n    {\n        return $this->data['parameters'] ?? '';\n    }\n\n    /**\n     * @return string\n     */\n    public function getAnchor()\n    {\n        return $this->data['anchor'] ?? '';\n    }\n\n    /**\n     * @return string\n     */\n    public function getTitle()\n    {\n        return $this->data['title'] ?? '';\n    }\n\n    /**\n     * @return string\n     */\n    public function getRel()\n    {\n        return $this->data['rel'] ?? '';\n    }\n\n    /**\n     * @return string\n     */\n    public function getTabindex()\n    {\n        return $this->data['tabindex'] ?? '';\n    }\n\n    /**\n     * @return string\n     */\n    public function getAccesskey()\n    {\n        return $this->data['accesskey'] ?? '';\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getClass()\n    {\n        return $this->data['class'] ?? '';\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getAttributes()\n    {\n        return $this->data['attributes'] ?? '';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setDataFromResource($data)\n    {\n        $this->data = \\Pimcore\\Tool\\Serialize::unserialize($data);\n        if (!is_array($this->data)) {\n            $this->data = [];\n        }\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setDataFromEditmode($data)\n    {\n        if (!is_array($data)) {\n            $data = [];\n        }\n\n        $path = $data['path'] ?? null;\n\n        if (!empty($path)) {\n            $target = null;\n\n            if ($data['linktype'] == 'internal' && $data['internalType']) {\n                $target = Model\\Element\\Service::getElementByPath($data['internalType'], $path);\n                if ($target) {\n                    $data['internal'] = true;\n                    $data['internalId'] = $target->getId();\n                }\n            }\n\n            if (!$target) {\n                if ($target = Document::getByPath($path)) {\n                    $data['internal'] = true;\n                    $data['internalId'] = $target->getId();\n                    $data['internalType'] = 'document';\n                } elseif ($target = Asset::getByPath($path)) {\n                    $data['internal'] = true;\n                    $data['internalId'] = $target->getId();\n                    $data['internalType'] = 'asset';\n                } elseif ($target = Model\\DataObject\\Concrete::getByPath($path)) {\n                    $data['internal'] = true;\n                    $data['internalId'] = $target->getId();\n                    $data['internalType'] = 'object';\n                } else {\n                    $data['internal'] = false;\n                    $data['internalId'] = null;\n                    $data['internalType'] = null;\n                    $data['linktype'] = 'direct';\n                }\n\n                if ($target) {\n                    $data['linktype'] = 'internal';\n                }\n            }\n        }\n\n        $this->data = $data;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function isEmpty()\n    {\n        return strlen($this->getHref()) < 1;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function resolveDependencies()\n    {\n        $dependencies = [];\n        $isInternal = $this->data['internal'] ?? false;\n\n        if (is_array($this->data) && $isInternal) {\n            if ((int)$this->data['internalId'] > 0) {\n                if ($this->data['internalType'] == 'document') {\n                    if ($doc = Document::getById($this->data['internalId'])) {\n                        $key = 'document_'.$doc->getId();\n\n                        $dependencies[$key] = [\n                            'id' => $doc->getId(),\n                            'type' => 'document',\n                        ];\n                    }\n                } elseif ($this->data['internalType'] == 'asset') {\n                    if ($asset = Asset::getById($this->data['internalId'])) {\n                        $key = 'asset_'.$asset->getId();\n\n                        $dependencies[$key] = [\n                            'id' => $asset->getId(),\n                            'type' => 'asset',\n                        ];\n                    }\n                }\n            }\n        }\n\n        return $dependencies;\n    }\n\n    /**\n     * { @inheritdoc }\n     */\n    public function rewriteIds($idMapping) /** : void */\n    {\n        if (isset($this->data['internal']) && $this->data['internal']) {\n            $type = $this->data['internalType'];\n            $id = (int)$this->data['internalId'];\n\n            if (array_key_exists($type, $idMapping)) {\n                if (array_key_exists($id, $idMapping[$type])) {\n                    $this->data['internalId'] = $idMapping[$type][$id];\n                    $this->getHref();\n                }\n            }\n        }\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Model\\Document\\Editable;\n\nuse Pimcore\\Logger;\nuse Pimcore\\Model;\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\Document;\n\n/**\n * @method \\Pimcore\\Model\\Document\\Editable\\Dao getDao()\n */\nclass Link extends Model\\Document\\Editable implements IdRewriterInterface, EditmodeDataInterface\n{\n    /**\n     * Contains the data for the link\n     *\n     * @internal\n     *\n     * @var array|null\n     */\n    protected $data;\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getType()\n    {\n        return 'link';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getData()\n    {\n        // update path if internal link\n        $this->updatePathFromInternal(true);\n\n        return $this->data;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getDataEditmode() /** : mixed */\n    {\n        // update path if internal link\n        $this->updatePathFromInternal(true, true);\n\n        return $this->data;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function getEditmodeElementClasses($options = []): array\n    {\n        // we don't want the class attribute being applied to the editable container element (<div>, only to the <a> tag inside\n        // the default behavior of the parent method is to include the \"class\" attribute\n        $classes = [\n            'pimcore_editable',\n            'pimcore_editable_' . $this->getType(),\n        ];\n\n        return $classes;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function frontend()\n    {\n        $url = $this->getHref();\n\n        if (strlen($url) > 0) {\n            if (!is_array($this->config)) {\n                $this->config = [];\n            }\n\n            $prefix = '';\n            $suffix = '';\n            $noText = false;\n\n            if (array_key_exists('textPrefix', $this->config)) {\n                $prefix = $this->config['textPrefix'];\n                unset($this->config['textPrefix']);\n            }\n\n            if (array_key_exists('textSuffix', $this->config)) {\n                $suffix = $this->config['textSuffix'];\n                unset($this->config['textSuffix']);\n            }\n\n            if (isset($this->config['noText']) && $this->config['noText'] == true) {\n                $noText = true;\n                unset($this->config['noText']);\n            }\n\n            // add attributes to link\n            $allowedAttributes = [\n                'charset',\n                'coords',\n                'hreflang',\n                'name',\n                'rel',\n                'rev',\n                'shape',\n                'target',\n                'accesskey',\n                'class',\n                'dir',\n                'draggable',\n                'dropzone',\n                'contextmenu',\n                'id',\n                'lang',\n                'style',\n                'tabindex',\n                'title',\n                'media',\n                'download',\n                'ping',\n                'type',\n                'referrerpolicy',\n                'xml:lang',\n                'onblur',\n                'onclick',\n                'ondblclick',\n                'onfocus',\n                'onmousedown',\n                'onmousemove',\n                'onmouseout',\n                'onmouseover',\n                'onmouseup',\n                'onkeydown',\n                'onkeypress',\n                'onkeyup',\n            ];\n            $defaultAttributes = [];\n\n            if (!is_array($this->data)) {\n                $this->data = [];\n            }\n\n            $availableAttribs = array_merge($defaultAttributes, $this->data, $this->config);\n\n            // add attributes to link\n            $attribs = [];\n            foreach ($availableAttribs as $key => $value) {\n                if ((is_string($value) || is_numeric($value))\n                    && (strpos($key, 'data-') === 0 ||\n                        strpos($key, 'aria-') === 0 ||\n                        in_array($key, $allowedAttributes))) {\n                    if (!empty($this->data[$key]) && !empty($this->config[$key])) {\n                        $attribs[] = $key.'=\"'. $this->data[$key] .' '. $this->config[$key] .'\"';\n                    } elseif (!empty($value)) {\n                        $attribs[] = $key.'=\"'.$value.'\"';\n                    }\n                }\n            }\n\n            $attribs = array_unique($attribs);\n\n            if (array_key_exists('attributes', $this->data) && !empty($this->data['attributes'])) {\n                $attribs[] = $this->data['attributes'];\n            }\n\n            return '<a href=\"'.$url.'\" '.implode(' ', $attribs).'>' . $prefix . ($noText ? '' : htmlspecialchars($this->data['text'])) . $suffix . '</a>';\n        }\n\n        return '';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function checkValidity()\n    {\n        $sane = true;\n        if (is_array($this->data) && isset($this->data['internal']) && $this->data['internal']) {\n            if ($this->data['internalType'] == 'document') {\n                $doc = Document::getById($this->data['internalId']);\n                if (!$doc) {\n                    $sane = false;\n                    Logger::notice(\n                        'Detected insane relation, removing reference to non existent document with id ['.$this->getDocumentId(\n                        ).']'\n                    );\n                    $this->data = null;\n                }\n            } elseif ($this->data['internalType'] == 'asset') {\n                $asset = Asset::getById($this->data['internalId']);\n                if (!$asset) {\n                    $sane = false;\n                    Logger::notice(\n                        'Detected insane relation, removing reference to non existent asset with id ['.$this->getDocumentId(\n                        ).']'\n                    );\n                    $this->data = null;\n                }\n            } elseif ($this->data['internalType'] == 'object') {\n                $object = Model\\DataObject\\Concrete::getById($this->data['internalId']);\n                if (!$object) {\n                    $sane = false;\n                    Logger::notice(\n                        'Detected insane relation, removing reference to non existent object with id ['.$this->getDocumentId(\n                        ).']'\n                    );\n                    $this->data = null;\n                }\n            }\n        }\n\n        return $sane;\n    }\n\n    /**\n     * @return string\n     */\n    public function getHref()\n    {\n        $this->updatePathFromInternal();\n\n        $url = $this->data['path'] ?? '';\n\n        if (strlen($this->data['parameters'] ?? '') > 0) {\n            $url .= (strpos($url, '?') !== false ? '&' : '?') . str_replace('?', '', $this->getParameters());\n        }\n\n        if (strlen($this->data['anchor'] ?? '') > 0) {\n            $anchor = $this->getAnchor();\n            $anchor = str_replace('\"', urlencode('\"'), $anchor);\n            $url .= '#' . str_replace('#', '', $anchor);\n        }\n\n        return $url;\n    }\n\n    /**\n     * @param bool $realPath\n     * @param bool $editmode\n     */\n    private function updatePathFromInternal($realPath = false, $editmode = false)\n    {\n        $method = 'getFullPath';\n        if ($realPath) {\n            $method = 'getRealFullPath';\n        }\n\n        if (isset($this->data['internal']) && $this->data['internal']) {\n            if ($this->data['internalType'] == 'document') {\n                if ($doc = Document::getById($this->data['internalId'])) {\n                    if ($editmode || (!Document::doHideUnpublished() || $doc->isPublished())) {\n                        $this->data['path'] = $doc->$method();\n                    } else {\n                        $this->data['path'] = '';\n                    }\n                }\n            } elseif ($this->data['internalType'] == 'asset') {\n                if ($asset = Asset::getById($this->data['internalId'])) {\n                    $this->data['path'] = $asset->$method();\n                }\n            } elseif ($this->data['internalType'] == 'object') {\n                if ($object = Model\\DataObject::getById($this->data['internalId'])) {\n                    if ($editmode) {\n                        $this->data['path'] = $object->getFullPath();\n                    } else {\n                        if ($object instanceof Model\\DataObject\\Concrete) {\n                            if ($linkGenerator = $object->getClass()->getLinkGenerator()) {\n                                if ($realPath) {\n                                    $this->data['path'] = $object->getFullPath();\n                                } else {\n                                    $this->data['path'] = $linkGenerator->generate(\n                                        $object,\n                                        [\n                                            'document' => $this->getDocument(),\n                                            'context' => $this,\n                                        ]\n                                    );\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // sanitize attributes\n        if(isset($this->data['attributes']))  {\n            $this->data['attributes'] = htmlspecialchars($this->data['attributes'], HTML_ENTITIES);\n        }\n\n        // deletes unnecessary attribute, which was set by mistake in earlier versions, see also\n        // https://github.com/pimcore/pimcore/issues/7394\n        if (isset($this->data['type'])) {\n            unset($this->data['type']);\n        }\n    }\n\n    /**\n     * @return string\n     */\n    public function getText()\n    {\n        return $this->data['text'] ?? '';\n    }\n\n    /**\n     * @param string $text\n     */\n    public function setText($text)\n    {\n        $this->data['text'] = $text;\n    }\n\n    /**\n     * @return string\n     */\n    public function getTarget()\n    {\n        return $this->data['target'] ?? '';\n    }\n\n    /**\n     * @return string\n     */\n    public function getParameters()\n    {\n        return $this->data['parameters'] ?? '';\n    }\n\n    /**\n     * @return string\n     */\n    public function getAnchor()\n    {\n        return $this->data['anchor'] ?? '';\n    }\n\n    /**\n     * @return string\n     */\n    public function getTitle()\n    {\n        return $this->data['title'] ?? '';\n    }\n\n    /**\n     * @return string\n     */\n    public function getRel()\n    {\n        return $this->data['rel'] ?? '';\n    }\n\n    /**\n     * @return string\n     */\n    public function getTabindex()\n    {\n        return $this->data['tabindex'] ?? '';\n    }\n\n    /**\n     * @return string\n     */\n    public function getAccesskey()\n    {\n        return $this->data['accesskey'] ?? '';\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getClass()\n    {\n        return $this->data['class'] ?? '';\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getAttributes()\n    {\n        return $this->data['attributes'] ?? '';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setDataFromResource($data)\n    {\n        $this->data = \\Pimcore\\Tool\\Serialize::unserialize($data);\n        if (!is_array($this->data)) {\n            $this->data = [];\n        }\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function setDataFromEditmode($data)\n    {\n        if (!is_array($data)) {\n            $data = [];\n        }\n\n        $path = $data['path'] ?? null;\n\n        if (!empty($path)) {\n            $target = null;\n\n            if ($data['linktype'] == 'internal' && $data['internalType']) {\n                $target = Model\\Element\\Service::getElementByPath($data['internalType'], $path);\n                if ($target) {\n                    $data['internal'] = true;\n                    $data['internalId'] = $target->getId();\n                }\n            }\n\n            if (!$target) {\n                if ($target = Document::getByPath($path)) {\n                    $data['internal'] = true;\n                    $data['internalId'] = $target->getId();\n                    $data['internalType'] = 'document';\n                } elseif ($target = Asset::getByPath($path)) {\n                    $data['internal'] = true;\n                    $data['internalId'] = $target->getId();\n                    $data['internalType'] = 'asset';\n                } elseif ($target = Model\\DataObject\\Concrete::getByPath($path)) {\n                    $data['internal'] = true;\n                    $data['internalId'] = $target->getId();\n                    $data['internalType'] = 'object';\n                } else {\n                    $data['internal'] = false;\n                    $data['internalId'] = null;\n                    $data['internalType'] = null;\n                    $data['linktype'] = 'direct';\n                }\n\n                if ($target) {\n                    $data['linktype'] = 'internal';\n                }\n            }\n        }\n\n        $this->data = $data;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function isEmpty()\n    {\n        return strlen($this->getHref()) < 1;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function resolveDependencies()\n    {\n        $dependencies = [];\n        $isInternal = $this->data['internal'] ?? false;\n\n        if (is_array($this->data) && $isInternal) {\n            if ((int)$this->data['internalId'] > 0) {\n                if ($this->data['internalType'] == 'document') {\n                    if ($doc = Document::getById($this->data['internalId'])) {\n                        $key = 'document_'.$doc->getId();\n\n                        $dependencies[$key] = [\n                            'id' => $doc->getId(),\n                            'type' => 'document',\n                        ];\n                    }\n                } elseif ($this->data['internalType'] == 'asset') {\n                    if ($asset = Asset::getById($this->data['internalId'])) {\n                        $key = 'asset_'.$asset->getId();\n\n                        $dependencies[$key] = [\n                            'id' => $asset->getId(),\n                            'type' => 'asset',\n                        ];\n                    }\n                }\n            }\n        }\n\n        return $dependencies;\n    }\n\n    /**\n     * { @inheritdoc }\n     */\n    public function rewriteIds($idMapping) /** : void */\n    {\n        if (isset($this->data['internal']) && $this->data['internal']) {\n            $type = $this->data['internalType'];\n            $id = (int)$this->data['internalId'];\n\n            if (array_key_exists($type, $idMapping)) {\n                if (array_key_exists($id, $idMapping[$type])) {\n                    $this->data['internalId'] = $idMapping[$type][$id];\n                    $this->getHref();\n                }\n            }\n        }\n    }\n}\n"], "filenames": ["models/Document/Editable/Link.php"], "buggy_code_start_loc": [301], "buggy_code_end_loc": [301], "fixing_code_start_loc": [302], "fixing_code_end_loc": [307], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.18.", "other": {"cve": {"id": "CVE-2023-1115", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-01T14:15:16.493", "lastModified": "2023-03-04T02:01:49.693", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.18."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.18", "matchCriteriaId": "C5062760-52C7-46A6-8252-9C6869A920AA"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/c6368b7cc69a3ebf2c83de7586f492ca1f404dd3", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/cfa80332-e4cf-4d64-b3e5-e10298628d17", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/c6368b7cc69a3ebf2c83de7586f492ca1f404dd3"}}