{"buggy_code": ["<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset;\n\nuse TYPO3\\CMS\\Core\\Page\\AssetCollector;\nuse TYPO3Fluid\\Fluid\\Core\\ViewHelper\\AbstractTagBasedViewHelper;\nuse TYPO3Fluid\\Fluid\\Core\\ViewHelper\\TagBuilder;\n\n/**\n * CssViewHelper\n *\n * Examples\n * ========\n *\n * ::\n *\n *    <f:asset.css identifier=\"identifier123\" href=\"EXT:my_ext/Resources/Public/Css/foo.css\" />\n *    <f:asset.css identifier=\"identifier123\">\n *       .foo { color: black; }\n *    </f:asset.css>\n *\n * See also :ref:`_changelog-Feature-90522-IntroduceAssetCollector`\n */\nfinal class CssViewHelper extends AbstractTagBasedViewHelper\n{\n    /**\n     * This VH does not produce direct output, thus does not need to be wrapped in an escaping node\n     *\n     * @var bool\n     */\n    protected $escapeOutput = false;\n\n    /**\n     * Rendered children string is passed as CSS code,\n     * there is no point in HTML encoding anything from that.\n     *\n     * @var bool\n     */\n    protected $escapeChildren = false;\n\n    protected AssetCollector $assetCollector;\n\n    public function injectAssetCollector(AssetCollector $assetCollector): void\n    {\n        $this->assetCollector = $assetCollector;\n    }\n\n    public function initialize(): void\n    {\n        // Add a tag builder, that does not html encode values, because rendering with encoding happens in AssetRenderer\n        $this->setTagBuilder(\n            new class() extends TagBuilder {\n                public function addAttribute($attributeName, $attributeValue, $escapeSpecialCharacters = false): void\n                {\n                    parent::addAttribute($attributeName, $attributeValue, false);\n                }\n            }\n        );\n        parent::initialize();\n    }\n\n    public function initializeArguments(): void\n    {\n        parent::initializeArguments();\n        $this->registerUniversalTagAttributes();\n        $this->registerTagAttribute('as', 'string', 'Define the type of content being loaded (For rel=\"preload\" or rel=\"prefetch\" only).', false);\n        $this->registerTagAttribute('crossorigin', 'string', 'Define how to handle crossorigin requests.', false);\n        $this->registerTagAttribute('disabled', 'bool', 'Define whether or not the described stylesheet should be loaded and applied to the document.', false);\n        $this->registerTagAttribute('href', 'string', 'Define the URL of the resource (absolute or relative).', false);\n        $this->registerTagAttribute('hreflang', 'string', 'Define the language of the resource (Only to be used if \\'href\\' is set).', false);\n        $this->registerTagAttribute('importance', 'string', 'Define the relative fetch priority of the resource.', false);\n        $this->registerTagAttribute('integrity', 'string', 'Define base64-encoded cryptographic hash of the resource that allows browsers to verify what they fetch.', false);\n        $this->registerTagAttribute('media', 'string', 'Define which media type the resources applies to.', false);\n        $this->registerTagAttribute('referrerpolicy', 'string', 'Define which referrer is sent when fetching the resource.', false);\n        $this->registerTagAttribute('rel', 'string', 'Define the relationship of the target object to the link object.', false);\n        $this->registerTagAttribute('sizes', 'string', 'Define the icon size of the resource.', false);\n        $this->registerTagAttribute('type', 'string', 'Define the MIME type (usually \\'text/css\\').', false);\n        $this->registerTagAttribute('nonce', 'string', 'Define a cryptographic nonce (number used once) used to whitelist inline styles in a style-src Content-Security-Policy.', false);\n        $this->registerArgument(\n            'identifier',\n            'string',\n            'Use this identifier within templates to only inject your CSS once, even though it is added multiple times.',\n            true\n        );\n        $this->registerArgument(\n            'priority',\n            'boolean',\n            'Define whether the CSS should be included before other CSS. CSS will always be output in the <head> tag.',\n            false,\n            false\n        );\n    }\n\n    public function render(): string\n    {\n        $identifier = (string)$this->arguments['identifier'];\n        $attributes = $this->tag->getAttributes();\n\n        // boolean attributes shall output attr=\"attr\" if set\n        if ($attributes['disabled'] ?? false) {\n            $attributes['disabled'] = 'disabled';\n        }\n\n        $file = $attributes['href'] ?? null;\n        unset($attributes['href']);\n        $options = [\n            'priority' => $this->arguments['priority'],\n        ];\n        if ($file !== null) {\n            $this->assetCollector->addStyleSheet($identifier, $file, $attributes, $options);\n        } else {\n            $content = (string)$this->renderChildren();\n            if ($content !== '') {\n                $this->assetCollector->addInlineStyleSheet($identifier, $content, $attributes, $options);\n            }\n        }\n        return '';\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\CMS\\Fluid\\Tests\\Functional\\ViewHelpers\\Asset;\n\nuse TYPO3\\CMS\\Core\\Page\\AssetCollector;\nuse TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset\\CssViewHelper;\nuse TYPO3\\TestingFramework\\Core\\Functional\\FunctionalTestCase;\n\nclass CssViewHelperTest extends FunctionalTestCase\n{\n    protected bool $initializeDatabase = false;\n\n    /**\n     * @return array\n     */\n    public function sourceDataProvider(): array\n    {\n        return [\n            'fileadmin reference' => ['fileadmin/StyleSheets/foo.css'],\n            'EXT: reference' => ['EXT:core/Resources/Public/StyleSheets/foo.css'],\n            'external reference' => ['https://typo3.com/foo.css'],\n            'external reference with 1 parameter' => ['https://typo3.com/foo.css?foo=bar'],\n            'external reference with 2 parameters' => ['https://typo3.com/foo.css?foo=bar&bar=baz'],\n        ];\n    }\n\n    /**\n     * @param string $href\n     * @test\n     * @dataProvider sourceDataProvider\n     */\n    public function sourceStringIsNotHtmlEncodedBeforePassedToAssetCollector(string $href): void\n    {\n        $assetCollector = new AssetCollector();\n        $viewHelper = new CssViewHelper();\n        $viewHelper->injectAssetCollector($assetCollector);\n        $viewHelper->setArguments([\n            'identifier' => 'test',\n            'href' => $href,\n            'priority' => false,\n        ]);\n        $viewHelper->initializeArgumentsAndRender();\n        $collectedJavaScripts = $assetCollector->getStyleSheets();\n        self::assertSame($collectedJavaScripts['test']['source'], $href);\n        self::assertSame($collectedJavaScripts['test']['attributes'], []);\n    }\n\n    /**\n     * @test\n     */\n    public function booleanAttributesAreProperlyConverted(): void\n    {\n        $assetCollector = new AssetCollector();\n        $viewHelper = new CssViewHelper();\n        $viewHelper->injectAssetCollector($assetCollector);\n        $viewHelper->setArguments([\n            'identifier' => 'test',\n            'href' => 'my.css',\n            'disabled' => true,\n            'priority' => false,\n        ]);\n        $viewHelper->initializeArgumentsAndRender();\n        $collectedJavaScripts = $assetCollector->getStyleSheets();\n        self::assertSame($collectedJavaScripts['test']['source'], 'my.css');\n        self::assertSame($collectedJavaScripts['test']['attributes'], ['disabled' => 'disabled']);\n    }\n}\n"], "fixing_code": ["<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset;\n\nuse TYPO3\\CMS\\Core\\Page\\AssetCollector;\nuse TYPO3Fluid\\Fluid\\Core\\ViewHelper\\AbstractTagBasedViewHelper;\nuse TYPO3Fluid\\Fluid\\Core\\ViewHelper\\TagBuilder;\n\n/**\n * CssViewHelper\n *\n * Examples\n * ========\n *\n * ::\n *\n *    <f:asset.css identifier=\"identifier123\" href=\"EXT:my_ext/Resources/Public/Css/foo.css\" />\n *    <f:asset.css identifier=\"identifier123\">\n *       .foo { color: black; }\n *    </f:asset.css>\n *\n * See also :ref:`_changelog-Feature-90522-IntroduceAssetCollector`\n */\nfinal class CssViewHelper extends AbstractTagBasedViewHelper\n{\n    /**\n     * This VH does not produce direct output, thus does not need to be wrapped in an escaping node\n     *\n     * @var bool\n     */\n    protected $escapeOutput = false;\n\n    /**\n     * Rendered children string is passed as CSS code,\n     * there is no point in HTML encoding anything from that.\n     *\n     * @var bool\n     */\n    protected $escapeChildren = true;\n\n    protected AssetCollector $assetCollector;\n\n    public function injectAssetCollector(AssetCollector $assetCollector): void\n    {\n        $this->assetCollector = $assetCollector;\n    }\n\n    public function initialize(): void\n    {\n        // Add a tag builder, that does not html encode values, because rendering with encoding happens in AssetRenderer\n        $this->setTagBuilder(\n            new class() extends TagBuilder {\n                public function addAttribute($attributeName, $attributeValue, $escapeSpecialCharacters = false): void\n                {\n                    parent::addAttribute($attributeName, $attributeValue, false);\n                }\n            }\n        );\n        parent::initialize();\n    }\n\n    public function initializeArguments(): void\n    {\n        parent::initializeArguments();\n        $this->registerUniversalTagAttributes();\n        $this->registerTagAttribute('as', 'string', 'Define the type of content being loaded (For rel=\"preload\" or rel=\"prefetch\" only).', false);\n        $this->registerTagAttribute('crossorigin', 'string', 'Define how to handle crossorigin requests.', false);\n        $this->registerTagAttribute('disabled', 'bool', 'Define whether or not the described stylesheet should be loaded and applied to the document.', false);\n        $this->registerTagAttribute('href', 'string', 'Define the URL of the resource (absolute or relative).', false);\n        $this->registerTagAttribute('hreflang', 'string', 'Define the language of the resource (Only to be used if \\'href\\' is set).', false);\n        $this->registerTagAttribute('importance', 'string', 'Define the relative fetch priority of the resource.', false);\n        $this->registerTagAttribute('integrity', 'string', 'Define base64-encoded cryptographic hash of the resource that allows browsers to verify what they fetch.', false);\n        $this->registerTagAttribute('media', 'string', 'Define which media type the resources applies to.', false);\n        $this->registerTagAttribute('referrerpolicy', 'string', 'Define which referrer is sent when fetching the resource.', false);\n        $this->registerTagAttribute('rel', 'string', 'Define the relationship of the target object to the link object.', false);\n        $this->registerTagAttribute('sizes', 'string', 'Define the icon size of the resource.', false);\n        $this->registerTagAttribute('type', 'string', 'Define the MIME type (usually \\'text/css\\').', false);\n        $this->registerTagAttribute('nonce', 'string', 'Define a cryptographic nonce (number used once) used to whitelist inline styles in a style-src Content-Security-Policy.', false);\n        $this->registerArgument(\n            'identifier',\n            'string',\n            'Use this identifier within templates to only inject your CSS once, even though it is added multiple times.',\n            true\n        );\n        $this->registerArgument(\n            'priority',\n            'boolean',\n            'Define whether the CSS should be included before other CSS. CSS will always be output in the <head> tag.',\n            false,\n            false\n        );\n    }\n\n    public function render(): string\n    {\n        $identifier = (string)$this->arguments['identifier'];\n        $attributes = $this->tag->getAttributes();\n\n        // boolean attributes shall output attr=\"attr\" if set\n        if ($attributes['disabled'] ?? false) {\n            $attributes['disabled'] = 'disabled';\n        }\n\n        $file = $attributes['href'] ?? null;\n        unset($attributes['href']);\n        $options = [\n            'priority' => $this->arguments['priority'],\n        ];\n        if ($file !== null) {\n            $this->assetCollector->addStyleSheet($identifier, $file, $attributes, $options);\n        } else {\n            $content = (string)$this->renderChildren();\n            if ($content !== '') {\n                $this->assetCollector->addInlineStyleSheet($identifier, $content, $attributes, $options);\n            }\n        }\n        return '';\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\CMS\\Fluid\\Tests\\Functional\\ViewHelpers\\Asset;\n\nuse TYPO3\\CMS\\Core\\Page\\AssetCollector;\nuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\nuse TYPO3\\CMS\\Fluid\\View\\StandaloneView;\nuse TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset\\CssViewHelper;\nuse TYPO3\\TestingFramework\\Core\\Functional\\FunctionalTestCase;\n\nclass CssViewHelperTest extends FunctionalTestCase\n{\n    protected bool $initializeDatabase = false;\n\n    /**\n     * @return array\n     */\n    public function sourceDataProvider(): array\n    {\n        return [\n            'fileadmin reference' => ['fileadmin/StyleSheets/foo.css'],\n            'EXT: reference' => ['EXT:core/Resources/Public/StyleSheets/foo.css'],\n            'external reference' => ['https://typo3.com/foo.css'],\n            'external reference with 1 parameter' => ['https://typo3.com/foo.css?foo=bar'],\n            'external reference with 2 parameters' => ['https://typo3.com/foo.css?foo=bar&bar=baz'],\n        ];\n    }\n\n    /**\n     * @param string $href\n     * @test\n     * @dataProvider sourceDataProvider\n     */\n    public function sourceStringIsNotHtmlEncodedBeforePassedToAssetCollector(string $href): void\n    {\n        $assetCollector = new AssetCollector();\n        $viewHelper = new CssViewHelper();\n        $viewHelper->injectAssetCollector($assetCollector);\n        $viewHelper->setArguments([\n            'identifier' => 'test',\n            'href' => $href,\n            'priority' => false,\n        ]);\n        $viewHelper->initializeArgumentsAndRender();\n        $collectedJavaScripts = $assetCollector->getStyleSheets();\n        self::assertSame($collectedJavaScripts['test']['source'], $href);\n        self::assertSame($collectedJavaScripts['test']['attributes'], []);\n    }\n\n    /**\n     * @test\n     */\n    public function booleanAttributesAreProperlyConverted(): void\n    {\n        $assetCollector = new AssetCollector();\n        $viewHelper = new CssViewHelper();\n        $viewHelper->injectAssetCollector($assetCollector);\n        $viewHelper->setArguments([\n            'identifier' => 'test',\n            'href' => 'my.css',\n            'disabled' => true,\n            'priority' => false,\n        ]);\n        $viewHelper->initializeArgumentsAndRender();\n        $collectedJavaScripts = $assetCollector->getStyleSheets();\n        self::assertSame($collectedJavaScripts['test']['source'], 'my.css');\n        self::assertSame($collectedJavaScripts['test']['attributes'], ['disabled' => 'disabled']);\n    }\n\n    public static function childNodeRenderingIsCorrectDataProvider(): array\n    {\n        return [\n            // Double quotes\n            'variable with double quotes is encoded' => [\n                '</style>/* \" ', // variable value\n                'body { color: #{color}; }', // inner template source\n                'body { color: #&lt;/style&gt;/* &quot; ; }', // expectation\n            ],\n            'variable with double quotes is encoded in single quotes' => [\n                '</style>/* \" ', // variable value\n                'body { color: \\'#{color}\\'; }', // inner template source\n                'body { color: \\'#&lt;/style&gt;/* &quot; \\'; }', // expectation\n            ],\n            'variable with double quotes is encoded in double quotes' => [\n                '</style>/* \" ', // variable value\n                'body { color: \"#{color}\"; }', // inner template source\n                'body { color: \"#&lt;/style&gt;/* &quot; \"; }', // expectation\n            ],\n            // Single quotes\n            'variable with single quotes is encoded' => [\n                '</style>/* \\' ', // variable value\n                'body { color: #{color}; }', // inner template source\n                'body { color: #&lt;/style&gt;/* &#039; ; }', // expectation\n            ],\n            'variable with single quotes is encoded in single quotes' => [\n                '</style>/* \\' ', // variable value\n                'body { color: \\'#{color}\\'; }', // inner template source\n                'body { color: \\'#&lt;/style&gt;/* &#039; \\'; }', // expectation\n            ],\n            'variable with single quotes is encoded in double quotes' => [\n                '</style>/* \\' ', // variable value\n                'body { color: \"#{color}\"; }', // inner template source\n                'body { color: \"#&lt;/style&gt;/* &#039; \"; }', // expectation\n            ],\n            // Raw instruction\n            'raw instruction is passed' => [\n                '</style>/* \" ',\n                'body { color: #{color -> f:format.raw()}; }',\n                'body { color: #</style>/* \" ; }',\n            ],\n            'raw instruction is passed in sigle quotes' => [\n                '</style>/* \" ',\n                'body { color: \\'#{color -> f:format.raw()}\\'; }',\n                'body { color: \\'#</style>/* \" \\'; }',\n            ],\n            'raw instruction is passed in double quotes' => [\n                '</style>/* \" ',\n                'body { color: \"#{color -> f:format.raw()}\"; }',\n                'body { color: \"#</style>/* \" \"; }',\n            ],\n        ];\n    }\n\n    /**\n     * @test\n     * @dataProvider childNodeRenderingIsCorrectDataProvider\n     */\n    public function childNodeRenderingIsCorrect(string $value, string $source, string $expectation): void\n    {\n        $assetCollector = new AssetCollector();\n        GeneralUtility::setSingletonInstance(AssetCollector::class, $assetCollector);\n\n        $view = new StandaloneView();\n        $view->setTemplateSource(sprintf('<f:asset.css identifier=\"test\">%s</f:asset.css>', $source));\n        $view->assign('color', $value);\n        $view->render();\n        GeneralUtility::removeSingletonInstance(AssetCollector::class, $assetCollector);\n\n        self::assertSame($expectation, $assetCollector->getInlineStyleSheets()['test']['source']);\n    }\n}\n"], "filenames": ["typo3/sysext/fluid/Classes/ViewHelpers/Asset/CssViewHelper.php", "typo3/sysext/fluid/Tests/Functional/ViewHelpers/Asset/CssViewHelperTest.php"], "buggy_code_start_loc": [54, 20], "buggy_code_end_loc": [55, 81], "fixing_code_start_loc": [54, 21], "fixing_code_end_loc": [55, 156], "type": "CWE-79", "message": "TYPO3 is an open source PHP based web content management system released under the GNU GPL. It has been discovered that the `f:asset.css` view helper is vulnerable to cross-site scripting when user input is passed as variables to the CSS. Update to TYPO3 version 10.4.32 or 11.5.16 that fix the problem. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-36108", "sourceIdentifier": "security-advisories@github.com", "published": "2022-09-13T18:15:15.313", "lastModified": "2022-09-16T14:25:47.827", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TYPO3 is an open source PHP based web content management system released under the GNU GPL. It has been discovered that the `f:asset.css` view helper is vulnerable to cross-site scripting when user input is passed as variables to the CSS. Update to TYPO3 version 10.4.32 or 11.5.16 that fix the problem. There are no known workarounds for this issue."}, {"lang": "es", "value": "TYPO3 es un sistema de administraci\u00f3n de contenidos web de c\u00f3digo abierto basado en PHP y publicado bajo la licencia GNU GPL. Se ha detectado que el ayudante de visualizaci\u00f3n \"f:asset.css\" es vulnerable a un ataque de tipo cross-site scripting cuando la entrada del usuario es pasada como variables al CSS. Actualice a TYPO3 versiones 10.4.32 o 11.5.16 que corrigen el problema. No se presentan mitigaciones conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 3.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:*:*:*:*", "versionStartIncluding": "10.0.0", "versionEndIncluding": "10.4.31", "matchCriteriaId": "B428B4CD-4699-4E84-9002-29442DCE5250"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:*:*:*:*", "versionStartIncluding": "11.0.0", "versionEndIncluding": "11.5.15", "matchCriteriaId": "CE54B85D-5F45-4346-A2E0-8204831AA225"}]}]}], "references": [{"url": "https://github.com/TYPO3/typo3/commit/6863f73818c36b0b88c677ba533765c8074907b4", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/TYPO3/typo3/security/advisories/GHSA-fv2m-9249-qx85", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://typo3.org/security/advisory/typo3-core-sa-2022-010", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/TYPO3/typo3/commit/6863f73818c36b0b88c677ba533765c8074907b4"}}