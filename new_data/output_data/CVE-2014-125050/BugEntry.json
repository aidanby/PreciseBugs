{"buggy_code": ["var nunjucks = require('nunjucks'); //package\nvar express = require('express');\nvar path = require('path');\n//var request = require('request');\nvar mysql = require('mysql');\nvar async = require('async');\nvar bodyparser = require('body-parser'); // request body to hash;detect name attribute in html file\nvar app = express();\n\n//configuration values\nvar MIN_ITEM_AMOUNT = 2;\nvar MAX_ITEM_AMOUNT = 10;\nvar MIN_QUESTION_AMOUNT = 1;\nvar MAX_QUESTION_AMOUNT = 10;\n\napp.use(bodyparser.urlencoded({\n  extended:true\n}));\n\nnunjucks.configure('views', {\n  autoescape: true,\n  express: app\n});\n\napp.use('/public', express.static(path.join(__dirname, 'public'))); //can use files in /public directory\n\nvar connection = mysql.createConnection({\n  host    : 'localhost',\n  user    : 'root',\n  password: '1112',\n  database: 'voter'\n});\n\nconnection.connect();\n\napp.get('/admin/categories', function(req, res) {// / is website page, and has nothing to do with file path\n\n  var msg = req.query.msge; //get msge from quesry string in url, ?msge=...\n  connection.query('SELECT * FROM Section WHERE status <> 0', function(err, rows, fields){\n\n    if (!err) {\n      res.render('sections.html', {\n        data: rows,\n        message: msg\n      });\n    } else {\n      res.send(err);\n    }\n  });\n\n});\n\napp.get('/', function(req, res) {// / is website page, and has nothing to do with file path\n\n  var msg = req.query.msge; //get msge from quesry string in url, ?msge=...\n  connection.query('SELECT * FROM Section WHERE status <> 0', function(err, rows, fields){\n\n    if (!err) {\n      res.render('categories.html', {\n        data: rows,\n        message: msg\n      });\n    } else {\n      res.send(err);\n    }\n  });\n\n});\n\napp.get('/section/:id', function(req, res) {\n  var id = req.params.id;\n  var query = connection.query('SELECT Section.id, Section.name AS secname, Section.description AS secdesc, Survey.title AS stitle, Survey.description AS sdesc, Survey.id AS sid, Survey.holder from Section,Survey WHERE Survey.sectionId=Section.id AND Section.status=1 AND Survey.status=1 AND sectionId='+id, function(err, rows, fields) {\n    if (!err) {\n      res.render('section.html', {\n        data: rows,\n        defaultId: id\n      });\n    } else {\n      res.status(500).send(err);\n    }\n  });\n});\n\n/*  test: When select a survey, show all questions and items from the survey\n*/\napp.all('/survey/:id', function(req, res) {\n  var id = req.params.id;\n  var sql ='SELECT Survey.id as sid, Survey.title AS stitle, Survey.description AS sdesc, Question.id AS qid, Item.id AS iid,question, item from Survey, Question, Item where Survey.id=' + id +' AND Survey.status=1 AND Question.status=1 AND Item.status=1 AND Question.surveyId=Survey.id AND Item.questionId=Question.id ORDER BY qid,iid;';\n\n  if (req.method == 'GET') {\n    var query = connection.query(sql, function(err, rows, fields) {\n      if (!err) {\n        if(rows.length == 0) {\n          res.status(404).send('Survey ' + id + ' is not found');\n        } else {\n          res.render('survey.html',{\n            data: hashfyQuery(rows)\n          });\n        }\n      } else {\n        res.send(err);\n      }\n    });\n  }\n  else if (req.method == 'POST') {\n    var body = req.body;\n    var itemIdtoUpdate =[];\n    for (var key in body) {\n      itemIdtoUpdate.push(body[key]);\n    }\n\n    var cnt = 0;\n    async.series({\n      countQuestion: function(callback) {\n        connection.query('SELECT COUNT(*) as cntQuestion from Question WHERE Question.status=1 AND surveyId='+id, function(err, rows, field) {\n          if (!err) {\n            if (rows.length == 0) {\n              callback({code: 404, msg: 'Survey not found'});\n            } else {\n              cnt = rows[0].cntQuestion;\n              callback(null);\n            }\n          } else {\n            callback({code: 500, msg: err});\n          }\n        });\n      },\n      post: function(callback) {\n        if (Object.keys(body).length < cnt) {\n          var query = connection.query(sql, function(err, rows, fields) {\n            if (!err) {\n              res.render('survey.html', {\n                msg: 'you have questions unfilled',\n                cache: body,\n                data: hashfyQuery(rows)\n              });\n              callback(null);\n            } else {\n              callback({code: 500, msg: err});\n            }\n          });\n        }\n        else {\n          var updateSql = 'UPDATE Item SET count=count+1 WHERE id IN ('+itemIdtoUpdate.join(',') + ')';\n          var query = connection.query(updateSql, function(err, rows, field) {\n            if(!err) {\n              res.redirect('/result/'+id);//display\n              callback(null);\n            } else {\n              callback({code: 500, msg: err});\n            }\n          });\n        }\n      }\n    }, function(err){\n      if (err) {\n        res.status(err.code).send(err.msg);\n      }\n    });\n  }\n});\n\napp.get('/result/:id', function(req, res) {\n  var id = req.params.id;\n  var sql ='SELECT Survey.id as sid, Survey.title AS stitle, Survey.description AS sdesc, Survey.sectionId AS categoryId, Question.id AS qid, Item.id AS iid,question, item, Item.count AS icnt from Survey, Question, Item where Survey.id=' + id +' AND Survey.status=1 AND Question.status=1 AND Item.status=1 AND Question.surveyId=Survey.id AND Item.questionId=Question.id ORDER BY qid,iid;';\n\n  var query = connection.query(sql, function(err, rows, fields) {\n    if (!err) {\n      if(rows.length == 0) {\n        res.status(404).send('Survey ' + id + ' is not found');\n      } else {\n        res.render('result.html',{\n          data: hashfyQuery(rows)\n        });\n      }\n    } else {\n      res.send(err);\n    }\n  });\n});\n\napp.all('/surveys/add', function(req, res) {\n  var defaultId = req.query.defaultid;\n  var invalidCatMsg = null;\n\n  //validate defaultId\n  if (defaultId == parseInt(defaultId, 10)) {\n    invalidCatMsg = null;\n  } else {\n    invalidCatMsg = 'We find you are using an invalid category.';\n  }\n\n  if (req.method == 'GET') {\n    var body = req.body;\n\n    connection.query('SELECT * FROM Section WHERE status <> 0 ORDER BY Section.name', function(err, rows, fields){\n\n      if (!err) {\n        if (rows.length == 0) {\n          res.status(404).send('There are no sections. Please contact Admin to create a section first.'); //if query result is empty, return 404 page\n        }\n        else {\n          if (invalidCatMsg) {\n            res.send(invalidCatMsg);\n          } else {\n            res.render('add-survey-form.html', {\n              categories: rows,\n              defaultId: defaultId\n            });\n          }\n        }\n      } else {\n        res.send(err);\n      }\n    });\n  }\n  else if (req.method == 'POST') {\n    var body = req.body;\n    var survey = JSON.parse(body.surveyJSON);\n    var surveyId = null;\n    var questionId = null;\n\n    //validation part\n    var hasErr = false;\n    if (survey.stitle == '' || survey.stitle == null) {\n      survey.titleExcept = 'Please fill in title.';\n      hasErr = true;\n    }\n    else{\n      if (survey.category == '' || survey.category == null) {\n        survey.categoryExcept = 'Please select a category.';\n        hasErr = true;\n      }\n      var cntQuestion = survey.questions.length;\n      if (cntQuestion < MIN_QUESTION_AMOUNT || cntQuestion > MAX_QUESTION_AMOUNT) {\n        survey.cntQuestionExcept = 'Question amount between 1 and 10.';\n        hasErr = true;\n      }\n      for (var i = 0; i < survey.questions.length; i++) {\n        var q = survey.questions[i];\n        if ((q.question == '' || q.question == null)) {\n          survey.questions[i].questionExcept = 'Please fill in question.';\n          hasErr = true;\n        }\n\n        var cntItem = q.items.length;\n        if (cntItem < MIN_ITEM_AMOUNT || cntItem > MAX_ITEM_AMOUNT) {\n          survey.questions[i].cntItemExcept = 'Item amount between 2 and 10.';\n          hasErr = true;\n        }\n        for (var j = 0; j < q.items.length; j++) {\n          var it = q.items[j];\n          if ((it.item == '' || it.item == null)) {\n            survey.questions[i].items[j].itemExcept = 'Please fill in item.';\n            hasErr = true;\n          }\n        }\n      }\n    }\n\n    if(hasErr) {\n\n      return connection.query('SELECT * FROM Section WHERE status <> 0 ORDER BY Section.name', function(err, rows, fields){\n        if (!err) {\n          if (rows.length == 0) {\n            res.status(404).send('There are no sections. Please contact Admin to create a section first.'); //if query result is empty, return 404 page\n          }\n          else {\n            if (invalidCatMsg) {\n              res.send(invalidCatMsg);\n            } else {\n              res.render('add-survey-form.html', {\n                categories: rows,\n                defaultId: defaultId,\n                data: survey,\n                msg: \"Some input errors\"\n              });\n            }\n          }\n        } else {\n          res.send(err);\n        }\n      });\n    }\n    async.series({\n      createSurvey: function(callback) {\n        var sql = 'INSERT INTO Survey(title, description, holder, sectionId) VALUES(\\''\n        + survey.stitle + '\\',\\''\n        + survey.sdesc + '\\',\\''\n        + survey.holder + '\\','\n        + survey.category\n        + ');';\n        var query = connection.query(sql, function(err, rows, fields) {\n          if (!err) {\n            surveyId = rows.insertId;\n          }\n          callback(err);\n        });\n      },\n\n      createQuestion: function(callback) {\n        async.eachSeries(survey.questions, function(questionHash, questionArrCallback){\n          var questionSql = 'INSERT INTO Question(question, surveyId) VALUES(\\''\n          + questionHash.question + '\\','\n          + surveyId\n          + ');';\n          async.series({\n            createQuestion: function(questionCallback) {\n              var addQuestionQuery = connection.query(questionSql, function(questionErr, questionRows, questionFields) {\n                if (!questionErr) {\n                  questionId = questionRows.insertId;\n                }\n                questionCallback(questionErr);\n              });\n            },\n\n            createItem: function(itemArrCallback) {\n              async.eachSeries(questionHash.items, function(item, itemCallback){\n                var itemSql = 'INSERT INTO Item(item, questionId) VALUES(\\''\n                + item.item +'\\','\n                + questionId\n                + ');';\n                var addItemQuery = connection.query(itemSql, function(itemErr, itemRows, itemFields) {\n                  if (!itemErr) {\n                  }\n                  itemCallback(itemErr);\n                });\n              },\n              function(itemEachSeriesErr){\n                if (!itemEachSeriesErr) {\n                }\n                itemArrCallback(itemEachSeriesErr);\n              });\n            }\n          }, questionArrCallback); //end async series in createQuestion\n        }, function(questionEachSeriesErr){\n          if (!questionEachSeriesErr) {\n          }\n          callback(questionEachSeriesErr);\n        }); //end async eachSeries in createQuestion\n      } // end createQuestion task\n    },\n\n    function(err) {\n      if (err) {\n        res.status(500).send(err);\n      } else {\n        res.send('success page');\n      }\n    }); //end async series in POST\n  } //end POST\n});\n\napp.get('/admin/category/delete/:id', function(req, res) {\n  var id = req.params.id;\n  var msg = 'delete suceessfully.';\n  var query = connection.query('UPDATE Section SET status=0 WHERE id=' + id, function(err, rows, fields) {\n    if (!err) {\n      res.redirect('/admin/categories?msge='+msg);\n    } else {\n      res.status(500).send(err);\n    }\n  });\n});\n\nfunction hashfyQuery(rows) {\n  var res = {};\n  res.sid = rows[0].sid;//surveyId\n  res.stitle = rows[0].stitle;\n  res.sdesc = rows[0].sdesc;\n  res.holder = 'admin'; //to be changed\n  res.category = rows[0].categoryId;//to be changed\n  res.titleExcept = null;\n  res.cntQuestionExcept = null;\n\n  var questions = [];\n  for (var i = 0; i < rows.length; i++) {\n    if (i == 0 || rows[i].qid != rows[i - 1].qid) {\n      var q = {};\n      q.qid = rows[i].qid;\n      q.question = rows[i].question;\n      q.items = [];\n      q.questionExcept = null;\n      q.cntItemExcept = null;\n\n      var total = 0;\n      var j = i;\n      while (j < rows.length && rows[j].qid == rows[i].qid) {\n        total += rows[j].icnt;\n        j++;\n      }\n      q.total = total;\n\n      var it = {};\n      it.iid = rows[i].iid;\n      it.item = rows[i].item;\n      it.icnt = rows[i].icnt;\n      it.percent = (q.total > 0) ? Math.round(it.icnt / q.total * 100) : 0;\n      q.items.push(it);\n\n      questions.push(q);\n    } else {\n      var q = questions[questions.length - 1];\n      var it = {};\n      it.iid = rows[i].iid;\n      it.item = rows[i].item;\n      it.icnt = rows[i].icnt;\n      it.percent = (q.total > 0) ? Math.round(it.icnt / q.total * 100) : 0;\n      it.itemExcept = null;\n      q.items.push(it);\n    }\n  }\n  res.questions = questions;\n  return res;\n}\n\n//edit a survey based on id\napp.all('/surveys/edit/:id', function(req, res) {\n  var id = req.params.id;\n\n  if ( req.method == 'GET') {\n    var categories = {};\n    async.series({\n      getCategories: function(callback) {\n        var sql = 'SELECT * FROM Section WHERE status <> 0 ORDER BY Section.name';\n        connection.query(sql, function(err, rows, field) {\n          if (!err) {\n            if (rows.length == 0) {\n              callback({code: 404, msg: 'There are no categories. Please contact Admin to create a category.'});\n            } else {\n              categories = rows;\n              callback(null);\n            }\n          } else {\n            callback({code: 500, msg: err});\n          }\n        });\n      },\n      get: function(callback) {\n        var sql = 'SELECT Section.id AS categoryId, Survey.id AS sid, Survey.title AS stitle, Survey.description as sdesc, Question.id AS qid, question, Item.id AS iid, item from Section,Survey,Question,Item where Survey.id=' + id +' AND Survey.status=1 AND Question.status=1 And Item.status=1 AND Section.id=Survey.sectionId AND Question.surveyId=Survey.id AND Item.questionId=Question.id ORDER BY qid,iid;';\n        var query = connection.query(sql, function(err, rows, fields) {\n          if (!err) {\n            if(rows.length == 0) {\n              callback({code: 404, msg: 'Survey ' + id + ' is not found'});\n            } else {\n              res.render('edit-survey-form.html',{\n                data: hashfyQuery(rows),\n                categories: categories,\n              });\n              callback(null);\n            }\n          } else {\n            callback({code: 500, msg: err});\n          }\n        });\n      }\n    }, function(err){\n      if (err) {\n        res.status(err.code).send(err.msg);\n      }\n    }); //end async.series\n  }//end get\n  else if (req.method == 'POST') {\n    var body = req.body;\n    var survey = JSON.parse(body.surveyJSON);\n    survey.sid = id;\n    var surveyId;\n\n    //validation part\n    var hasErr = false;\n    if (survey.stitle == '' || survey.stitle == null) {\n      survey.titleExcept = 'Please fill in title.';\n      hasErr = true;\n    }\n    else{\n      if (survey.category == '' || survey.category == null) {\n        survey.categoryExcept = 'Please select a category.';\n        hasErr = true;\n      }\n      var cntQuestion = survey.questions.length;\n      for (var index = 0; index < survey.questions.length; index++) {\n        if (survey.questions[index].qDelete == '1')\n          cntQuestion--;\n      }\n      if (cntQuestion < MIN_QUESTION_AMOUNT || cntQuestion > MAX_QUESTION_AMOUNT) {\n        survey.cntQuestionExcept = 'Question amount between ' + MIN_QUESTION_AMOUNT+' and ' + MAX_QUESTION_AMOUNT + '.';\n        hasErr = true;\n      }\n      for (var i = 0; i < survey.questions.length; i++) {\n        var q = survey.questions[i];\n        if ((q.question == '' || q.question == null) && q.qDelete != '1') {\n          survey.questions[i].questionExcept = 'Please fill in question.';\n          hasErr = true;\n        }\n\n        var cntItem = q.items.length;\n        for (var index = 0; index < q.items.length; index++) {\n          if (q.items[index].itemDelete == '1')\n            cntItem--;\n        }\n        if (cntItem < MIN_ITEM_AMOUNT || cntItem > MAX_ITEM_AMOUNT) {\n          survey.questions[i].cntItemExcept = 'Item amount between ' + MIN_ITEM_AMOUNT + ' and ' + MAX_ITEM_AMOUNT + '.';\n          hasErr = true;\n        }\n        for (var j = 0; j < q.items.length; j++) {\n          var it = q.items[j];\n          if ((it.item == '' || it.item == null) && it.itemDelete != '1') {\n            survey.questions[i].items[j].itemExcept = 'Please fill in item.';\n            hasErr = true;\n          }\n        }\n      }\n    }\n    if(hasErr) {\n      return connection.query('SELECT * FROM Section WHERE status <> 0 ORDER BY Section.name', function(err, rows, fields){\n        if (!err) {\n          if (rows.length == 0) {\n            res.status(404).send('There are no sections. Please contact Admin to create a section first.'); //if query result is empty, return 404 page\n          }\n          else {\n            res.render('edit-survey-form.html', {\n              categories: rows,\n              data: survey,\n              msg: \"Some input errors\"\n            });\n          }\n        } else {\n          res.send(err);\n        }\n      });\n    }\n    async.series({\n      createSurvey: function(callback) {\n        var sql;\n        if (survey.sid) {\n          sql = 'UPDATE Survey SET title=\\''+survey.stitle+'\\', description=\\''+survey.sdesc+'\\', sectionId='+ survey.category +' WHERE id='+id+';';\n          surveyId = id;\n        } else {\n          surveyId = null;\n          sql = 'INSERT INTO Survey(title, description, holder, sectionId) VALUES(\\''\n          + survey.stitle + '\\',\\''\n          + survey.sdesc + '\\',\\''\n          + survey.holder + '\\','\n          + survey.category\n          + ');';\n        }\n        var query = connection.query(sql, function(err, rows, fields) {\n          if (!err) {\n            if(surveyId == null)\n              surveyId = rows.insertId;\n          }\n          callback(err);\n        });\n      },\n\n      createQuestion: function(callback) {\n        async.eachSeries(survey.questions, function(questionHash, questionArrCallback){\n          var questionSql;\n          var questionId;\n          if (questionHash.qid == null || questionHash.qid == undefined) {\n            questionId = null;\n            questionSql = 'INSERT INTO Question(question, surveyId) VALUES(\\''\n            + questionHash.question + '\\','\n            + surveyId\n            + ');';\n          } else {\n            if (questionHash.qDelete == '1') {\n              questionSql = 'UPDATE Question SET status=0 WHERE id='+questionHash.qid+';';\n            } else {\n              questionSql = 'UPDATE Question SET question=\\''+questionHash.question+'\\' WHERE id='+questionHash.qid+';';\n            }\n            questionId = questionHash.qid;\n          }\n          async.series({\n            createQuestion: function(questionCallback) {\n              var addQuestionQuery = connection.query(questionSql, function(questionErr, questionRows, questionFields) {\n                if (!questionErr) {\n                  if (questionId == null)\n                    questionId = questionRows.insertId;\n                }\n                questionCallback(questionErr);\n              });\n            },\n\n            createItem: function(itemArrCallback) {\n              async.eachSeries(questionHash.items, function(item, itemCallback){\n                var itemSql;\n\n                if(item.iid == undefined || item.iid == null) {\n                  itemSql = 'INSERT INTO Item(item, questionId) VALUES(\\''\n                  + item.item +'\\','\n                  + questionId\n                  + ');';\n                } else {\n                  if (item.itemDelete == '1') {\n                    itemSql = 'UPDATE Item SET status=0 WHERE id='+item.iid+';';\n                  } else {\n                    itemSql = 'UPDATE Item SET item=\\''+item.item+'\\' WHERE id='+item.iid+';';\n                  }\n                }\n                var addItemQuery = connection.query(itemSql, function(itemErr, itemRows, itemFields) {\n                  if (!itemErr) {\n                  }\n                  itemCallback(itemErr);\n                });\n              }, function(itemEachSeriesErr){\n                if (!itemEachSeriesErr) {\n                }\n                itemArrCallback(itemEachSeriesErr);\n              });\n            }\n          }, questionArrCallback); //end async series in createQuestion\n        },\n        function(questionEachSeriesErr){\n          if (!questionEachSeriesErr) {\n          }\n          callback(questionEachSeriesErr);\n        }); //end async eachSeries in createQuestion\n      } // end createQuestion task\n    },\n\n    function(err) {\n      if (err) {\n        res.send(err);\n      } else {\n        res.send('success page');\n      }\n    }); //end async series in POST\n  }\n});\n\napp.all('/admin/categories/edit/:id', function(req, res) { //:id means the parameter in this part of url is called 'id'\n  var id = req.params.id; //get the 'id' part from the url, not from qurey string; from query string use req.query.'...'\n  if (req.method == 'GET') {//req default method is GET\n    connection.query('SELECT * FROM Section WHERE id='+id, function(err, rows, fields){\n      if (!err) {\n        if (rows.length > 0) {\n          res.render('edit-section-form.html', {\n            data: rows[0]\n          });\n        } else {\n          res.status(404).send('not found'); //if query result is empty, return 404 page\n        }\n      } else {\n        res.send(err);\n      }\n    });\n  }\n  else if (req.method == 'POST') {//can be set method to POST in html file form tag\n    var body = req.body;//a hashtable with names and values got from html tag with 'name' attribute\n    body.id = id;\n    if (body.name == '' || body.name == undefined) {\n      res.render('edit-section-form.html', {\n        data: body,\n        except: 'no name input'\n      });\n    }\n    else {\n      var msg = 'edit successfully';\n      var query = connection.query('UPDATE Section SET ? where id='+id, body, function(err, rows, fields){ // this will automatic match table column names with names in body, and change values\n        if (!err) {\n          res.redirect('/admin/categories?msge='+msg);//make msg a part of query string so that req.query.msge will find msg\n        } else {\n          res.send(err);\n        }\n      });\n    }\n  }\n});\n\n/* problem: when input name is '', it should not post\n*/\napp.all('/admin/categories/add', function(req, res){\n  if (req.method == 'GET') {\n    res.render('add-section-form.html');\n  }\n  else if (req.method == 'POST') {\n\n    var body = req.body;\n\n    if (body.name == '' || body.name === undefined) {\n      res.render('add-section-form.html', {\n        except: 'no name',\n        cache: body\n      });\n    }\n    else {\n      var msg = 'add successfully';\n      var values = '\\'' + body.name + '\\',\\'' + body.description + '\\','+ 1;\n      var query = connection.query('INSERT INTO Section(name, description, status) VALUES('+values+')', function(err, rows, fields) {\n        if (!err) {\n          res.redirect('/admin/categories?msge='+msg);\n        } else {\n          res.status(500).send(err);\n        }\n      });\n    }\n  }\n});\n\nvar server = app.listen(3000, function() {\n  var host = server.address().address;\n  var port = server.address().port;\n  console.log('Now listening at: ' + host + ':' + port);\n});\n"], "fixing_code": ["var nunjucks = require('nunjucks'); //package\nvar express = require('express');\nvar path = require('path');\n//var request = require('request');\nvar mysql = require('mysql');\nvar async = require('async');\nvar bodyparser = require('body-parser'); // request body to hash;detect name attribute in html file\nvar app = express();\n\n//configuration values\nvar MIN_ITEM_AMOUNT = 2;\nvar MAX_ITEM_AMOUNT = 10;\nvar MIN_QUESTION_AMOUNT = 1;\nvar MAX_QUESTION_AMOUNT = 10;\n\napp.use(bodyparser.urlencoded({\n  extended:true\n}));\n\nnunjucks.configure('views', {\n  autoescape: true,\n  express: app\n});\n\napp.use('/public', express.static(path.join(__dirname, 'public'))); //can use files in /public directory\n\nvar connection = mysql.createConnection({\n  host    : 'localhost',\n  user    : 'root',\n  password: '1112',\n  database: 'voter'\n});\n\nconnection.connect();\n\napp.get('/admin/categories', function(req, res) {// / is website page, and has nothing to do with file path\n\n  var msg = req.query.msge; //get msge from quesry string in url, ?msge=...\n  connection.query('SELECT * FROM Section WHERE status <> 0', function(err, rows, fields){\n\n    if (!err) {\n      res.render('sections.html', {\n        data: rows,\n        message: msg\n      });\n    } else {\n      res.send(err);\n    }\n  });\n\n});\n\napp.get('/', function(req, res) {// / is website page, and has nothing to do with file path\n\n  var msg = req.query.msge; //get msge from quesry string in url, ?msge=...\n  connection.query('SELECT * FROM Section WHERE status <> 0', function(err, rows, fields){\n\n    if (!err) {\n      res.render('categories.html', {\n        data: rows,\n        message: msg\n      });\n    } else {\n      res.send(err);\n    }\n  });\n\n});\n\napp.get('/section/:id', function(req, res) {\n  var id = req.params.id;\n  var query = connection.query('SELECT Section.id, Section.name AS secname, Section.description AS secdesc, Survey.title AS stitle, Survey.description AS sdesc, Survey.id AS sid, Survey.holder from Section,Survey WHERE Survey.sectionId=Section.id AND Section.status=1 AND Survey.status=1 AND sectionId=?', [id], function(err, rows, fields) {\n    if (!err) {\n      res.render('section.html', {\n        data: rows,\n        defaultId: id\n      });\n    } else {\n      res.status(500).send(err);\n    }\n  });\n});\n\n/*  test: When select a survey, show all questions and items from the survey\n*/\napp.all('/survey/:id', function(req, res) {\n  var id = req.params.id;\n  if (req.method == 'GET') {\n    var query = connection.query('SELECT Survey.id as sid, Survey.title AS stitle, Survey.description AS sdesc, Question.id AS qid, Item.id AS iid,question, item from Survey, Question, Item where Survey.id=? AND Survey.status=1 AND Question.status=1 AND Item.status=1 AND Question.surveyId=Survey.id AND Item.questionId=Question.id ORDER BY qid,iid;', [id], function(err, rows, fields) {\n      if (!err) {\n        if(rows.length == 0) {\n          res.status(404).send('Survey ' + id + ' is not found');\n        } else {\n          res.render('survey.html',{\n            data: hashfyQuery(rows)\n          });\n        }\n      } else {\n        res.send(err);\n      }\n    });\n  }\n  else if (req.method == 'POST') {\n    var body = req.body;\n    var itemIdtoUpdate =[];\n    for (var key in body) {\n      itemIdtoUpdate.push(connection.escape(body[key]));\n    }\n\n    var cnt = 0;\n    async.series({\n      countQuestion: function(callback) {\n        connection.query('SELECT COUNT(*) as cntQuestion from Question WHERE Question.status=1 AND surveyId=?', [id], function(err, rows, field) {\n          if (!err) {\n            if (rows.length == 0) {\n              callback({code: 404, msg: 'Survey not found'});\n            } else {\n              cnt = rows[0].cntQuestion;\n              callback(null);\n            }\n          } else {\n            callback({code: 500, msg: err});\n          }\n        });\n      },\n      post: function(callback) {\n        if (Object.keys(body).length < cnt) {\n          var query = connection.query(sql, function(err, rows, fields) {\n            if (!err) {\n              res.render('survey.html', {\n                msg: 'you have questions unfilled',\n                cache: body,\n                data: hashfyQuery(rows)\n              });\n              callback(null);\n            } else {\n              callback({code: 500, msg: err});\n            }\n          });\n        }\n        else {\n          var updateSql = 'UPDATE Item SET count=count+1 WHERE id IN ('+itemIdtoUpdate.join(',') + ')';\n          var query = connection.query(updateSql, function(err, rows, field) {\n            if(!err) {\n              res.redirect('/result/'+id);//display\n              callback(null);\n            } else {\n              callback({code: 500, msg: err});\n            }\n          });\n        }\n      }\n    }, function(err){\n      if (err) {\n        res.status(err.code).send(err.msg);\n      }\n    });\n  }\n});\n\napp.get('/result/:id', function(req, res) {\n  var id = req.params.id;\n  var query = connection.query('SELECT Survey.id as sid, Survey.title AS stitle, Survey.description AS sdesc, Survey.sectionId AS categoryId, Question.id AS qid, Item.id AS iid,question, item, Item.count AS icnt from Survey, Question, Item where Survey.id=? AND Survey.status=1 AND Question.status=1 AND Item.status=1 AND Question.surveyId=Survey.id AND Item.questionId=Question.id ORDER BY qid,iid;', [id], function(err, rows, fields) {\n    if (!err) {\n      if(rows.length == 0) {\n        res.status(404).send('Survey ' + id + ' is not found');\n      } else {\n        res.render('result.html',{\n          data: hashfyQuery(rows)\n        });\n      }\n    } else {\n      res.send(err);\n    }\n  });\n});\n\napp.all('/surveys/add', function(req, res) {\n  var defaultId = req.query.defaultid;\n  var invalidCatMsg = null;\n\n  //validate defaultId\n  if (defaultId == parseInt(defaultId, 10)) {\n    invalidCatMsg = null;\n  } else {\n    invalidCatMsg = 'We find you are using an invalid category.';\n  }\n\n  if (req.method == 'GET') {\n    var body = req.body;\n\n    connection.query('SELECT * FROM Section WHERE status <> 0 ORDER BY Section.name', function(err, rows, fields){\n\n      if (!err) {\n        if (rows.length == 0) {\n          res.status(404).send('There are no sections. Please contact Admin to create a section first.'); //if query result is empty, return 404 page\n        }\n        else {\n          if (invalidCatMsg) {\n            res.send(invalidCatMsg);\n          } else {\n            res.render('add-survey-form.html', {\n              categories: rows,\n              defaultId: defaultId\n            });\n          }\n        }\n      } else {\n        res.send(err);\n      }\n    });\n  }\n  else if (req.method == 'POST') {\n    var body = req.body;\n    var survey = JSON.parse(body.surveyJSON);\n    var surveyId = null;\n    var questionId = null;\n\n    //validation part\n    var hasErr = false;\n    if (survey.stitle == '' || survey.stitle == null) {\n      survey.titleExcept = 'Please fill in title.';\n      hasErr = true;\n    }\n    else{\n      if (survey.category == '' || survey.category == null) {\n        survey.categoryExcept = 'Please select a category.';\n        hasErr = true;\n      }\n      var cntQuestion = survey.questions.length;\n      if (cntQuestion < MIN_QUESTION_AMOUNT || cntQuestion > MAX_QUESTION_AMOUNT) {\n        survey.cntQuestionExcept = 'Question amount between 1 and 10.';\n        hasErr = true;\n      }\n      for (var i = 0; i < survey.questions.length; i++) {\n        var q = survey.questions[i];\n        if ((q.question == '' || q.question == null)) {\n          survey.questions[i].questionExcept = 'Please fill in question.';\n          hasErr = true;\n        }\n\n        var cntItem = q.items.length;\n        if (cntItem < MIN_ITEM_AMOUNT || cntItem > MAX_ITEM_AMOUNT) {\n          survey.questions[i].cntItemExcept = 'Item amount between 2 and 10.';\n          hasErr = true;\n        }\n        for (var j = 0; j < q.items.length; j++) {\n          var it = q.items[j];\n          if ((it.item == '' || it.item == null)) {\n            survey.questions[i].items[j].itemExcept = 'Please fill in item.';\n            hasErr = true;\n          }\n        }\n      }\n    }\n\n    if(hasErr) {\n\n      return connection.query('SELECT * FROM Section WHERE status <> 0 ORDER BY Section.name', function(err, rows, fields){\n        if (!err) {\n          if (rows.length == 0) {\n            res.status(404).send('There are no sections. Please contact Admin to create a section first.'); //if query result is empty, return 404 page\n          }\n          else {\n            if (invalidCatMsg) {\n              res.send(invalidCatMsg);\n            } else {\n              res.render('add-survey-form.html', {\n                categories: rows,\n                defaultId: defaultId,\n                data: survey,\n                msg: \"Some input errors\"\n              });\n            }\n          }\n        } else {\n          res.send(err);\n        }\n      });\n    }\n    async.series({\n      createSurvey: function(callback) {\n        var query = connection.query('INSERT INTO Survey(title, description, holder, sectionId) VALUES(?,?,?,?);', [survey.stitle, survey.sdesc, survey.holder, survey.category], function(err, rows, fields) {\n          if (!err) {\n            surveyId = rows.insertId;\n          }\n          callback(err);\n        });\n      },\n\n      createQuestion: function(callback) {\n        async.eachSeries(survey.questions, function(questionHash, questionArrCallback){\n          async.series({\n            createQuestion: function(questionCallback) {\n              var addQuestionQuery = connection.query('INSERT INTO Question(question, surveyId) VALUES(?,?);', [questionHash.question, surveyId], function(questionErr, questionRows, questionFields) {\n                if (!questionErr) {\n                  questionId = questionRows.insertId;\n                }\n                questionCallback(questionErr);\n              });\n            },\n\n            createItem: function(itemArrCallback) {\n              async.eachSeries(questionHash.items, function(item, itemCallback){\n                var addItemQuery = connection.query('INSERT INTO Item(item, questionId) VALUES(?,?);', [item.item, questionId], function(itemErr, itemRows, itemFields) {\n                  if (!itemErr) {\n                  }\n                  itemCallback(itemErr);\n                });\n              },\n              function(itemEachSeriesErr){\n                if (!itemEachSeriesErr) {\n                }\n                itemArrCallback(itemEachSeriesErr);\n              });\n            }\n          }, questionArrCallback); //end async series in createQuestion\n        }, function(questionEachSeriesErr){\n          if (!questionEachSeriesErr) {\n          }\n          callback(questionEachSeriesErr);\n        }); //end async eachSeries in createQuestion\n      } // end createQuestion task\n    },\n\n    function(err) {\n      if (err) {\n        res.status(500).send(err);\n      } else {\n        res.send('success page');\n      }\n    }); //end async series in POST\n  } //end POST\n});\n\napp.get('/admin/category/delete/:id', function(req, res) {\n  var id = req.params.id;\n  var msg = 'delete suceessfully.';\n  var query = connection.query('UPDATE Section SET status=0 WHERE id=?', [id], function(err, rows, fields) {\n    if (!err) {\n      res.redirect('/admin/categories?msge='+msg);\n    } else {\n      res.status(500).send(err);\n    }\n  });\n});\n\nfunction hashfyQuery(rows) {\n  var res = {};\n  res.sid = rows[0].sid;//surveyId\n  res.stitle = rows[0].stitle;\n  res.sdesc = rows[0].sdesc;\n  res.holder = 'admin'; //to be changed\n  res.category = rows[0].categoryId;//to be changed\n  res.titleExcept = null;\n  res.cntQuestionExcept = null;\n\n  var questions = [];\n  for (var i = 0; i < rows.length; i++) {\n    if (i == 0 || rows[i].qid != rows[i - 1].qid) {\n      var q = {};\n      q.qid = rows[i].qid;\n      q.question = rows[i].question;\n      q.items = [];\n      q.questionExcept = null;\n      q.cntItemExcept = null;\n\n      var total = 0;\n      var j = i;\n      while (j < rows.length && rows[j].qid == rows[i].qid) {\n        total += rows[j].icnt;\n        j++;\n      }\n      q.total = total;\n\n      var it = {};\n      it.iid = rows[i].iid;\n      it.item = rows[i].item;\n      it.icnt = rows[i].icnt;\n      it.percent = (q.total > 0) ? Math.round(it.icnt / q.total * 100) : 0;\n      q.items.push(it);\n\n      questions.push(q);\n    } else {\n      var q = questions[questions.length - 1];\n      var it = {};\n      it.iid = rows[i].iid;\n      it.item = rows[i].item;\n      it.icnt = rows[i].icnt;\n      it.percent = (q.total > 0) ? Math.round(it.icnt / q.total * 100) : 0;\n      it.itemExcept = null;\n      q.items.push(it);\n    }\n  }\n  res.questions = questions;\n  return res;\n}\n\n//edit a survey based on id\napp.all('/surveys/edit/:id', function(req, res) {\n  var id = req.params.id;\n\n  if ( req.method == 'GET') {\n    var categories = {};\n    async.series({\n      getCategories: function(callback) {\n        var sql = 'SELECT * FROM Section WHERE status <> 0 ORDER BY Section.name';\n        connection.query(sql, function(err, rows, field) {\n          if (!err) {\n            if (rows.length == 0) {\n              callback({code: 404, msg: 'There are no categories. Please contact Admin to create a category.'});\n            } else {\n              categories = rows;\n              callback(null);\n            }\n          } else {\n            callback({code: 500, msg: err});\n          }\n        });\n      },\n      get: function(callback) {\n        var query = connection.query('SELECT Section.id AS categoryId, Survey.id AS sid, Survey.title AS stitle, Survey.description as sdesc, Question.id AS qid, question, Item.id AS iid, item from Section,Survey,Question,Item where Survey.id=? AND Survey.status=1 AND Question.status=1 And Item.status=1 AND Section.id=Survey.sectionId AND Question.surveyId=Survey.id AND Item.questionId=Question.id ORDER BY qid,iid;', [id], function(err, rows, fields) {\n          if (!err) {\n            if(rows.length == 0) {\n              callback({code: 404, msg: 'Survey ' + id + ' is not found'});\n            } else {\n              res.render('edit-survey-form.html',{\n                data: hashfyQuery(rows),\n                categories: categories,\n              });\n              callback(null);\n            }\n          } else {\n            callback({code: 500, msg: err});\n          }\n        });\n      }\n    }, function(err){\n      if (err) {\n        res.status(err.code).send(err.msg);\n      }\n    }); //end async.series\n  }//end get\n  else if (req.method == 'POST') {\n    var body = req.body;\n    var survey = JSON.parse(body.surveyJSON);\n    survey.sid = id;\n    var surveyId;\n\n    //validation part\n    var hasErr = false;\n    if (survey.stitle == '' || survey.stitle == null) {\n      survey.titleExcept = 'Please fill in title.';\n      hasErr = true;\n    }\n    else{\n      if (survey.category == '' || survey.category == null) {\n        survey.categoryExcept = 'Please select a category.';\n        hasErr = true;\n      }\n      var cntQuestion = survey.questions.length;\n      for (var index = 0; index < survey.questions.length; index++) {\n        if (survey.questions[index].qDelete == '1')\n          cntQuestion--;\n      }\n      if (cntQuestion < MIN_QUESTION_AMOUNT || cntQuestion > MAX_QUESTION_AMOUNT) {\n        survey.cntQuestionExcept = 'Question amount between ' + MIN_QUESTION_AMOUNT+' and ' + MAX_QUESTION_AMOUNT + '.';\n        hasErr = true;\n      }\n      for (var i = 0; i < survey.questions.length; i++) {\n        var q = survey.questions[i];\n        if ((q.question == '' || q.question == null) && q.qDelete != '1') {\n          survey.questions[i].questionExcept = 'Please fill in question.';\n          hasErr = true;\n        }\n\n        var cntItem = q.items.length;\n        for (var index = 0; index < q.items.length; index++) {\n          if (q.items[index].itemDelete == '1')\n            cntItem--;\n        }\n        if (cntItem < MIN_ITEM_AMOUNT || cntItem > MAX_ITEM_AMOUNT) {\n          survey.questions[i].cntItemExcept = 'Item amount between ' + MIN_ITEM_AMOUNT + ' and ' + MAX_ITEM_AMOUNT + '.';\n          hasErr = true;\n        }\n        for (var j = 0; j < q.items.length; j++) {\n          var it = q.items[j];\n          if ((it.item == '' || it.item == null) && it.itemDelete != '1') {\n            survey.questions[i].items[j].itemExcept = 'Please fill in item.';\n            hasErr = true;\n          }\n        }\n      }\n    }\n    if(hasErr) {\n      return connection.query('SELECT * FROM Section WHERE status <> 0 ORDER BY Section.name', function(err, rows, fields){\n        if (!err) {\n          if (rows.length == 0) {\n            res.status(404).send('There are no sections. Please contact Admin to create a section first.'); //if query result is empty, return 404 page\n          }\n          else {\n            res.render('edit-survey-form.html', {\n              categories: rows,\n              data: survey,\n              msg: \"Some input errors\"\n            });\n          }\n        } else {\n          res.send(err);\n        }\n      });\n    }\n    async.series({\n      createSurvey: function(callback) {\n        var sql;\n        if (survey.sid) {\n          sql = 'UPDATE Survey SET title='+ connection.escape(survey.stitle) +', description='+ connection.escape(survey.sdesc) + ', sectionId=' + connection.escape(survey.category) + ' WHERE id=' + connection.escape(id) + ';';\n          surveyId = id;\n        } else {\n          surveyId = null;\n          sql = 'INSERT INTO Survey(title, description, holder, sectionId) VALUES('\n          + connection.escape(survey.stitle) + ','\n          + connection.escape(survey.sdesc) + ','\n          + connection.escape(survey.holder) + ','\n          + connection.escape(survey.category)\n          + ');';\n        }\n        var query = connection.query(sql, function(err, rows, fields) {\n          if (!err) {\n            if(surveyId == null)\n              surveyId = rows.insertId;\n          }\n          callback(err);\n        });\n      },\n\n      createQuestion: function(callback) {\n        async.eachSeries(survey.questions, function(questionHash, questionArrCallback){\n          var questionSql;\n          var questionId;\n          if (questionHash.qid == null || questionHash.qid == undefined) {\n            questionId = null;\n            questionSql = 'INSERT INTO Question(question, surveyId) VALUES('\n            + connection.escape(questionHash.question) + ','\n            + surveyId\n            + ');';\n          } else {\n            if (questionHash.qDelete == '1') {\n              questionSql = 'UPDATE Question SET status=0 WHERE id=' + connection.escape(questionHash.qid) + ';';\n            } else {\n              questionSql = 'UPDATE Question SET question=' + connection.escape(questionHash.question) + ' WHERE id=' + connection.escape(questionHash.qid) + ';';\n            }\n            questionId = questionHash.qid;\n          }\n          async.series({\n            createQuestion: function(questionCallback) {\n              var addQuestionQuery = connection.query(questionSql, function(questionErr, questionRows, questionFields) {\n                if (!questionErr) {\n                  if (questionId == null)\n                    questionId = questionRows.insertId;\n                }\n                questionCallback(questionErr);\n              });\n            },\n\n            createItem: function(itemArrCallback) {\n              async.eachSeries(questionHash.items, function(item, itemCallback){\n                var itemSql;\n\n                if(item.iid == undefined || item.iid == null) {\n                  itemSql = 'INSERT INTO Item(item, questionId) VALUES('\n                  + connection.escape(item.item) + ','\n                  + connection.escape(questionId)\n                  + ');';\n                } else {\n                  if (item.itemDelete == '1') {\n                    itemSql = 'UPDATE Item SET status=0 WHERE id=' + connection.escape(item.iid) + ';';\n                  } else {\n                    itemSql = 'UPDATE Item SET item=' + connection.escape(item.item) + ' WHERE id=' + connection.escape(item.iid) + ';';\n                  }\n                }\n                var addItemQuery = connection.query(itemSql, function(itemErr, itemRows, itemFields) {\n                  if (!itemErr) {\n                  }\n                  itemCallback(itemErr);\n                });\n              }, function(itemEachSeriesErr){\n                if (!itemEachSeriesErr) {\n                }\n                itemArrCallback(itemEachSeriesErr);\n              });\n            }\n          }, questionArrCallback); //end async series in createQuestion\n        },\n        function(questionEachSeriesErr){\n          if (!questionEachSeriesErr) {\n          }\n          callback(questionEachSeriesErr);\n        }); //end async eachSeries in createQuestion\n      } // end createQuestion task\n    },\n\n    function(err) {\n      if (err) {\n        res.send(err);\n      } else {\n        res.send('success page');\n      }\n    }); //end async series in POST\n  }\n});\n\napp.all('/admin/categories/edit/:id', function(req, res) { //:id means the parameter in this part of url is called 'id'\n  var id = req.params.id; //get the 'id' part from the url, not from qurey string; from query string use req.query.'...'\n  if (req.method == 'GET') {//req default method is GET\n    connection.query('SELECT * FROM Section WHERE id=?', [id], function(err, rows, fields){\n      if (!err) {\n        if (rows.length > 0) {\n          res.render('edit-section-form.html', {\n            data: rows[0]\n          });\n        } else {\n          res.status(404).send('not found'); //if query result is empty, return 404 page\n        }\n      } else {\n        res.send(err);\n      }\n    });\n  }\n  else if (req.method == 'POST') {//can be set method to POST in html file form tag\n    var body = req.body;//a hashtable with names and values got from html tag with 'name' attribute\n    body.id = id;\n    if (body.name == '' || body.name == undefined) {\n      res.render('edit-section-form.html', {\n        data: body,\n        except: 'no name input'\n      });\n    }\n    else {\n      var msg = 'edit successfully';\n      var query = connection.query('UPDATE Section SET ? where id=?', [body, id], function(err, rows, fields){ // this will automatic match table column names with names in body, and change values\n        if (!err) {\n          res.redirect('/admin/categories?msge='+msg);//make msg a part of query string so that req.query.msge will find msg\n        } else {\n          res.send(err);\n        }\n      });\n    }\n  }\n});\n\n/* problem: when input name is '', it should not post\n*/\napp.all('/admin/categories/add', function(req, res){\n  if (req.method == 'GET') {\n    res.render('add-section-form.html');\n  }\n  else if (req.method == 'POST') {\n\n    var body = req.body;\n\n    if (body.name == '' || body.name === undefined) {\n      res.render('add-section-form.html', {\n        except: 'no name',\n        cache: body\n      });\n    }\n    else {\n      var msg = 'add successfully';\n      var query = connection.query('INSERT INTO Section(name, description, status) VALUES(?, ?, ?)', [body.name, body.description, 1], function(err, rows, fields) {\n        if (!err) {\n          res.redirect('/admin/categories?msge='+msg);\n        } else {\n          res.status(500).send(err);\n        }\n      });\n    }\n  }\n});\n\nvar server = app.listen(3000, function() {\n  var host = server.address().address;\n  var port = server.address().port;\n  console.log('Now listening at: ' + host + ':' + port);\n});\n"], "filenames": ["main.js"], "buggy_code_start_loc": [72], "buggy_code_end_loc": [691], "fixing_code_start_loc": [72], "fixing_code_end_loc": [671], "type": "CWE-89", "message": "A vulnerability was found in ScottTZhang voter-js and classified as critical. Affected by this issue is some unknown functionality of the file main.js. The manipulation leads to sql injection. The name of the patch is 6317c67a56061aeeaeed3cf9ec665fd9983d8044. It is recommended to apply a patch to fix this issue. VDB-217562 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2014-125050", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-06T17:15:08.870", "lastModified": "2023-01-12T15:32:21.957", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in ScottTZhang voter-js and classified as critical. Affected by this issue is some unknown functionality of the file main.js. The manipulation leads to sql injection. The name of the patch is 6317c67a56061aeeaeed3cf9ec665fd9983d8044. It is recommended to apply a patch to fix this issue. VDB-217562 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:voter-js_project:voter-js:*:*:*:*:*:*:*:*", "versionEndExcluding": "2014-11-30", "matchCriteriaId": "BD732271-CCBB-4087-837A-D421DA3E743A"}]}]}], "references": [{"url": "https://github.com/ScottTZhang/voter-js/commit/6317c67a56061aeeaeed3cf9ec665fd9983d8044", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ScottTZhang/voter-js/pull/15", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217562", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217562", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ScottTZhang/voter-js/commit/6317c67a56061aeeaeed3cf9ec665fd9983d8044"}}