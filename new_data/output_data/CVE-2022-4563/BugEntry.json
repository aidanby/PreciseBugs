{"buggy_code": ["#!/bin/bash\n# postinst script for securedrop-app-code\n#\n# see: dh_installdeb(1)\nset -e\nset -x\nset -o pipefail\n# summary of how this script can be called:\n#        * <postinst> `configure' <most-recently-configured-version>\n#        * <old-postinst> `abort-upgrade' <new version>\n#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>\n#          <new-version>\n#        * <postinst> `abort-remove'\n#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'\n#          <failed-install-package> <version> `removing'\n#          <conflicting-package> <version>\n# for details, see http://www.debian.org/doc/debian-policy/ or\n# the debian-policy package\n\nSDVE=\"/opt/venvs/securedrop-app-code\"\nSDBIN=\"${SDVE}/bin\"\n\ndatabase_migration() {\n    database_dir='/var/lib/securedrop'\n    database_file=\"$database_dir/db.sqlite\"\n\n    # Ensure the database exists.\n    if [ ! -e \"$database_file\" ]; then\n        old_umask=$(umask)\n        umask 0027 # to get os 0640 permissions from the sqlite command\n\n        # Future-proof way to create an empty database.\n        sqlite3 \"$database_file\" '.databases'\n        umask \"$old_umask\"\n        chown www-data:www-data \"$database_file\"\n    fi\n\n    cd '/var/www/securedrop/'\n\n    # `alembic current` outputs nothing if the DB isn't under version control.\n    if [ -z \"$(${SDBIN}/alembic current)\" ]; then\n        sqlite_tables=$(sqlite3 \"$database_file\" .tables)\n\n        if ! echo \"$sqlite_tables\" | grep -q journalists; then\n            # This is a fresh install, run the full migrations.\n            ${SDBIN}/alembic upgrade head\n        else\n            # This is an old install, so mark that the schema is up to date\n            # as of the version of migration 15ac9509fc68_init.py when we first\n            # started version controlling the database.\n            ${SDBIN}/alembic stamp 15ac9509fc68\n        fi\n    fi\n\n    db_backup=\"/var/lib/securedrop/backups/$(date +%Y-%m-%d-%H-%M-%S)-db.sqlite\"\n\n    if ! ${SDBIN}/alembic current | grep -q '(head)'; then\n        cp /var/lib/securedrop/db.sqlite \"$db_backup\"\n    fi\n\n    if ${SDBIN}/alembic upgrade head; then\n        rm -f \"$db_backup\"\n    else\n        echo \"Error migrating database: Backup saved to $db_backup\" >&2\n        return 1\n    fi\n}\n\nadjust_wsgi_configuration() {\n    journalist_conf=\"/etc/apache2/sites-available/journalist.conf\"\n    if test -f $journalist_conf; then\n        # Supports passing authorization headers for the SecureDrop API.\n        # Only affects the Journalist Interface. Required for unattended upgrade\n        # to v0.9.0.\n        #\n        # First we check whether the line is present.\n        # Next we find a target line to anchor the insertion.\n        # Then we insert the line, along with the target line that was matched.\n        if ! grep -qP '^WSGIPassAuthorization' \"$journalist_conf\"; then\n            perl -pi -e 's/^(WSGIScriptAlias .*)/$1\\nWSGIPassAuthorization On/' \"$journalist_conf\"\n        fi\n\n        # Add process-group and application-group to WSGIScriptAlias\n        # to ensure the application is initialized at process start\n        # instead of waiting for the first request. (See\n        # https://modwsgi.readthedocs.io/en/latest/configuration-directives/WSGIScriptAlias.html)\n        if grep -qP '^WSGIScriptAlias / /var/www/journalist.wsgi$' \"$journalist_conf\"; then\n            perl -pi -e 's/^(WSGIScriptAlias .*)/$1 process-group=journalist application-group=journalist/' \"$journalist_conf\"\n        fi\n\n        # Remove the WSGIProcessGroup directive; it's not needed if\n        # specified in WSGIScriptAlias.\n        if grep -qP '^WSGIProcessGroup journalist' \"$journalist_conf\"; then\n            perl -pi -e 's/^WSGIProcessGroup journalist.*\\n//' \"$journalist_conf\"\n        fi\n    fi\n}\n\n#\n#\nrefresh_bytecode() {\n    # Remove any existing byte code files, to ensure that obsolete\n    # dependencies can't linger after they've been removed.\n    find \"${SDVE}\" -name '*.py[co]' -delete\n    find /var/www/securedrop -name '*.py[co]' -delete\n    # Now generate the new byte-code\n    py3compile \"${SDVE}\"\n    py3compile /var/www/securedrop\n\n}\n\n#\n# Modify existing instance to use only TLS1.3 for the source.\nupdate_to_tls13(){\n    source_conf=\"/etc/apache2/sites-available/source.conf\"\n    if grep -qP '^SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1$' \"$source_conf\"; then\n        sed -i '/^SSLProtocol all/c\\SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1 -TLSv1.2' \"$source_conf\"\n        sed -i '/^SSLCipherSuite ECDHE-ECDSA-AES256-GCM-SHA384/d' \"$source_conf\"\n        sed -i '/^SSLHonorCipherOrder on/c\\SSLHonorCipherOrder off' \"$source_conf\"\n        sed -i '/^SSLCompression off/ a \\\\SSLSessionTickets off' \"$source_conf\"\n    fi\n}\n\n#\n# Q4-2021 Apache2 header updates:\nupdate_apache2_headers(){\n\n    if [ ! -e \"$1\" ]; then\n        echo \"Apache vhost '$1' does not exist, skipping header changes...\" >&2\n        return\n    fi\n\n    # update CSP header, adding frame-ancestors (see #6178)\n    if grep -qP \"^Header always set Content-Security-Policy \\\"default-src 'none'; script-src 'self'; style-src 'self'; img-src 'self'; font-src 'self';\\\"\" \"$1\"; then\n        sed -i \"/^Header always set Content-Security-Policy \\\"default-src 'none'; script-src 'self'; style-src 'self'; img-src 'self'; font-src 'self';\\\"/c\\Header always set Content-Security-Policy \\\"default-src 'none'; script-src 'self'; style-src 'self'; img-src 'self'; font-src 'self'; frame-ancestors 'none';\\\"\" \"$1\"\n    fi\n\n    # remove X-XSS-Protection block if it exists (see #6182)\n    if grep -qP \"^Header onsuccess unset X-XSS-Protection\" \"$1\"; then\n        sed -i '/^Header onsuccess unset X-XSS-Protection/d' \"$1\"\n        sed -i '/^Header always set X-XSS-Protection \"1; mode=block\"/d' \"$1\"\n    fi\n\n    # remove X-Download-Only block if it exists (see #6180)\n    if grep -qP \"^Header onsuccess unset X-Download-Options\" \"$1\"; then\n        sed -i '/^Header onsuccess unset X-Download-Options/d' \"$1\"\n        sed -i '/^Header always set X-Download-Options \"noopen\"/d' \"$1\"\n    fi\n\n    # Add Cross-Origin headers if not present (see #6176)\n        if ! grep -qP '^Header onsuccess unset Cross-Origin-Opener-Policy' \"$1\"; then\n            sed -i '/^Header always set Referrer-Policy .*/a Header onsuccess unset Cross-Origin-Opener-Policy\\nHeader always set Cross-Origin-Opener-Policy \"same-origin\"' \"$1\"\n        fi\n        if ! grep -qP '^Header onsuccess unset Cross-Origin-Embedder-Policy' \"$1\"; then\n            sed -i '/^Header always set Cross-Origin-Opener-Policy .*/a Header onsuccess unset Cross-Origin-Embedder-Policy\\nHeader always set Cross-Origin-Embedder-Policy \"same-origin\"' \"$1\"\n        fi\n        if ! grep -qP '^Header onsuccess unset Cross-Origin-Resource-Policy' \"$1\"; then\n            sed -i '/^Header always set Cross-Origin-Embedder-Policy .*/a Header onsuccess unset Cross-Origin-Resource-Policy\\nHeader always set Cross-Origin-Resource-Policy \"same-site\"' \"$1\"\n        fi\n}\n\n\ncase \"$1\" in\n    configure)\n\n    # Ensure SecureDrop's necessary directories are created\n    for dir in /var/lib/securedrop/{,tmp,shredder,store,keys,/keys/private-keys-v1.d,/keys/openpgp-revocs.d,backups}; do\n      mkdir -p \"$dir\"\n      chmod 0700 \"$dir\"\n    done\n\n    # Ensure required gpg-agent.conf is in place, see #4013.\n    if [ -e \"/var/lib/securedrop/keys/gpg-agent.conf\" ]; then\n\n        # gpg-agent.conf does exist, update it if needed.\n        if ! grep -qE '^allow-loopback-pinentry$' /var/lib/securedrop/keys/gpg-agent.conf; then\n            echo allow-loopback-pinentry >> /var/lib/securedrop/keys/gpg-agent.conf\n        fi\n        if ! grep -qE '^default-cache-ttl 0$' /var/lib/securedrop/keys/gpg-agent.conf; then\n            echo 'default-cache-ttl 0' >> /var/lib/securedrop/keys/gpg-agent.conf\n        fi\n\n    else\n        # gpg-agent.conf does not yet exist, create it.\n        echo allow-loopback-pinentry > /var/lib/securedrop/keys/gpg-agent.conf\n        echo 'default-cache-ttl 0' >> /var/lib/securedrop/keys/gpg-agent.conf\n    fi\n\n    # Migrate private keyring to gpg2.1 if needed\n    if [ ! -d \"/var/lib/securedrop/keys/private-keys-v1.d\" ]; then\n        # Then we should migrate the keyring\n        gpg2 --homedir=/var/lib/securedrop/keys --batch --import < /var/lib/securedrop/keys/secring.gpg\n    fi\n\n    chown -R www-data:www-data /var/lib/securedrop\n\n    # /var/www/securedrop should be owned by root and world-readable.\n    # Permissions on specific files will be loosened after\n    chown -R root:root /var/www/securedrop\n    chmod 755 /var/www/securedrop\n    # Make sure config.py is owned by root and readable by www-data,\n    # but not world-readable\n    if [ -f \"/var/www/securedrop/config.py\" ]; then\n        chown root:www-data /var/www/securedrop/config.py\n        chmod 640 /var/www/securedrop/config.py\n    fi\n    # And logo needs to be writable by webserver user\n    # If there's no custom logo yet, copy the default in its place\n    if [ ! -f \"/var/www/securedrop/static/i/custom_logo.png\" ]; then\n        cp /var/www/securedrop/static/i/logo.png /var/www/securedrop/static/i/custom_logo.png\n    fi\n    chown www-data:www-data /var/www/securedrop/static/i/custom_logo.png\n\n    # No Python code should be executed before this\n    refresh_bytecode\n\n    # Apache's default sites are not allowed by the securedrop apparmor profile\n    # disable the site before putting the apache apparmor profile in enforce\n    # mode.\n    a2dissite 000-default\n    a2dissite default-ssl\n    # Stop Apache service before making changes to its AppArmor profile.\n    # If the Apache service is running unconfined, and the profile is\n    # set to \"enforce\", then apache2 will fail to restart, since it lacks\n    # the ability to send signals to unconfined peers.\n    service apache2 stop\n\n    # Point Apache to our bundled mod_wsgi\n    ${SDBIN}/mod_wsgi-express module-config > /etc/apache2/mods-available/wsgi.load\n\n    # and make sure it's enabled\n    a2enmod wsgi\n\n    # If the profile was disabled enabled it.\n    if [ -e \"/etc/apparmor.d/disable/usr.sbin.apache2\" ]; then\n        rm /etc/apparmor.d/disable/usr.sbin.apache2\n    fi\n\n    aa-enforce /etc/apparmor.d/usr.sbin.tor\n    aa-enforce /etc/apparmor.d/usr.sbin.apache2\n\n    # Munge Apache config while service is stopped.\n    adjust_wsgi_configuration\n\n    # Add TLS1.3 configruation to the source configruation if required\n    update_to_tls13\n\n    # Apply Q4-2021 header updates\n    update_apache2_headers /etc/apache2/sites-available/source.conf\n    update_apache2_headers /etc/apache2/sites-available/journalist.conf\n\n    # Restart apache so it loads with the apparmor profiles in enforce mode.\n    service apache2 restart\n\n    # remove previously dynamically-generated assets\n    rm -fr /var/www/securedrop/static/gen/\n    rm -fr /var/www/securedrop/static/.webassets-cache/\n\n    # Version migrations\n\n    database_migration\n\n    ;;\n\n    abort-upgrade|abort-remove|abort-deconfigure|triggered)\n    ;;\n\n    *)\n        echo \"postinst called with unknown argument \\`$1'\" >&2\n        exit 1\n    ;;\nesac\n\n# dh_installdeb will replace this with shell code automatically\n# generated by other debhelper scripts.\n\n#DEBHELPER#\n\nexit 0\n"], "fixing_code": ["#!/bin/bash\n# postinst script for securedrop-app-code\n#\n# see: dh_installdeb(1)\nset -e\nset -x\nset -o pipefail\n# summary of how this script can be called:\n#        * <postinst> `configure' <most-recently-configured-version>\n#        * <old-postinst> `abort-upgrade' <new version>\n#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>\n#          <new-version>\n#        * <postinst> `abort-remove'\n#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'\n#          <failed-install-package> <version> `removing'\n#          <conflicting-package> <version>\n# for details, see http://www.debian.org/doc/debian-policy/ or\n# the debian-policy package\n\nSDVE=\"/opt/venvs/securedrop-app-code\"\nSDBIN=\"${SDVE}/bin\"\n\ndatabase_migration() {\n    database_dir='/var/lib/securedrop'\n    database_file=\"$database_dir/db.sqlite\"\n\n    # Ensure the database exists.\n    if [ ! -e \"$database_file\" ]; then\n        old_umask=$(umask)\n        umask 0027 # to get os 0640 permissions from the sqlite command\n\n        # Future-proof way to create an empty database.\n        sqlite3 \"$database_file\" '.databases'\n        umask \"$old_umask\"\n        chown www-data:www-data \"$database_file\"\n    fi\n\n    cd '/var/www/securedrop/'\n\n    # `alembic current` outputs nothing if the DB isn't under version control.\n    if [ -z \"$(${SDBIN}/alembic current)\" ]; then\n        sqlite_tables=$(sqlite3 \"$database_file\" .tables)\n\n        if ! echo \"$sqlite_tables\" | grep -q journalists; then\n            # This is a fresh install, run the full migrations.\n            ${SDBIN}/alembic upgrade head\n        else\n            # This is an old install, so mark that the schema is up to date\n            # as of the version of migration 15ac9509fc68_init.py when we first\n            # started version controlling the database.\n            ${SDBIN}/alembic stamp 15ac9509fc68\n        fi\n    fi\n\n    db_backup=\"/var/lib/securedrop/backups/$(date +%Y-%m-%d-%H-%M-%S)-db.sqlite\"\n\n    if ! ${SDBIN}/alembic current | grep -q '(head)'; then\n        cp /var/lib/securedrop/db.sqlite \"$db_backup\"\n    fi\n\n    if ${SDBIN}/alembic upgrade head; then\n        rm -f \"$db_backup\"\n    else\n        echo \"Error migrating database: Backup saved to $db_backup\" >&2\n        return 1\n    fi\n}\n\nadjust_wsgi_configuration() {\n    journalist_conf=\"/etc/apache2/sites-available/journalist.conf\"\n    if test -f $journalist_conf; then\n        # Supports passing authorization headers for the SecureDrop API.\n        # Only affects the Journalist Interface. Required for unattended upgrade\n        # to v0.9.0.\n        #\n        # First we check whether the line is present.\n        # Next we find a target line to anchor the insertion.\n        # Then we insert the line, along with the target line that was matched.\n        if ! grep -qP '^WSGIPassAuthorization' \"$journalist_conf\"; then\n            perl -pi -e 's/^(WSGIScriptAlias .*)/$1\\nWSGIPassAuthorization On/' \"$journalist_conf\"\n        fi\n\n        # Add process-group and application-group to WSGIScriptAlias\n        # to ensure the application is initialized at process start\n        # instead of waiting for the first request. (See\n        # https://modwsgi.readthedocs.io/en/latest/configuration-directives/WSGIScriptAlias.html)\n        if grep -qP '^WSGIScriptAlias / /var/www/journalist.wsgi$' \"$journalist_conf\"; then\n            perl -pi -e 's/^(WSGIScriptAlias .*)/$1 process-group=journalist application-group=journalist/' \"$journalist_conf\"\n        fi\n\n        # Remove the WSGIProcessGroup directive; it's not needed if\n        # specified in WSGIScriptAlias.\n        if grep -qP '^WSGIProcessGroup journalist' \"$journalist_conf\"; then\n            perl -pi -e 's/^WSGIProcessGroup journalist.*\\n//' \"$journalist_conf\"\n        fi\n    fi\n}\n\n#\n#\nrefresh_bytecode() {\n    # Remove any existing byte code files, to ensure that obsolete\n    # dependencies can't linger after they've been removed.\n    find \"${SDVE}\" -name '*.py[co]' -delete\n    find /var/www/securedrop -name '*.py[co]' -delete\n    # Now generate the new byte-code\n    py3compile \"${SDVE}\"\n    py3compile /var/www/securedrop\n\n}\n\n#\n# Modify existing instance to use only TLS1.3 for the source.\nupdate_to_tls13(){\n    source_conf=\"/etc/apache2/sites-available/source.conf\"\n    if grep -qP '^SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1$' \"$source_conf\"; then\n        sed -i '/^SSLProtocol all/c\\SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1 -TLSv1.2' \"$source_conf\"\n        sed -i '/^SSLCipherSuite ECDHE-ECDSA-AES256-GCM-SHA384/d' \"$source_conf\"\n        sed -i '/^SSLHonorCipherOrder on/c\\SSLHonorCipherOrder off' \"$source_conf\"\n        sed -i '/^SSLCompression off/ a \\\\SSLSessionTickets off' \"$source_conf\"\n    fi\n}\n\n#\n# Q4-2021 Apache2 header updates:\nupdate_apache2_headers(){\n\n    if [ ! -e \"$1\" ]; then\n        echo \"Apache vhost '$1' does not exist, skipping header changes...\" >&2\n        return\n    fi\n\n    # update CSP header, adding frame-ancestors (see #6178)\n    if grep -qP \"^Header always set Content-Security-Policy \\\"default-src 'none'; script-src 'self'; style-src 'self'; img-src 'self'; font-src 'self';\\\"\" \"$1\"; then\n        sed -i \"/^Header always set Content-Security-Policy \\\"default-src 'none'; script-src 'self'; style-src 'self'; img-src 'self'; font-src 'self';\\\"/c\\Header always set Content-Security-Policy \\\"default-src 'none'; script-src 'self'; style-src 'self'; img-src 'self'; font-src 'self'; frame-ancestors 'none';\\\"\" \"$1\"\n    fi\n\n    # remove X-XSS-Protection block if it exists (see #6182)\n    if grep -qP \"^Header onsuccess unset X-XSS-Protection\" \"$1\"; then\n        sed -i '/^Header onsuccess unset X-XSS-Protection/d' \"$1\"\n        sed -i '/^Header always set X-XSS-Protection \"1; mode=block\"/d' \"$1\"\n    fi\n\n    # remove X-Download-Only block if it exists (see #6180)\n    if grep -qP \"^Header onsuccess unset X-Download-Options\" \"$1\"; then\n        sed -i '/^Header onsuccess unset X-Download-Options/d' \"$1\"\n        sed -i '/^Header always set X-Download-Options \"noopen\"/d' \"$1\"\n    fi\n\n    # Add Cross-Origin headers if not present (see #6176)\n        if ! grep -qP '^Header onsuccess unset Cross-Origin-Opener-Policy' \"$1\"; then\n            sed -i '/^Header always set Referrer-Policy .*/a Header onsuccess unset Cross-Origin-Opener-Policy\\nHeader always set Cross-Origin-Opener-Policy \"same-origin\"' \"$1\"\n        fi\n        if ! grep -qP '^Header onsuccess unset Cross-Origin-Embedder-Policy' \"$1\"; then\n            sed -i '/^Header always set Cross-Origin-Opener-Policy .*/a Header onsuccess unset Cross-Origin-Embedder-Policy\\nHeader always set Cross-Origin-Embedder-Policy \"same-origin\"' \"$1\"\n        fi\n        if ! grep -qP '^Header onsuccess unset Cross-Origin-Resource-Policy' \"$1\"; then\n            sed -i '/^Header always set Cross-Origin-Embedder-Policy .*/a Header onsuccess unset Cross-Origin-Resource-Policy\\nHeader always set Cross-Origin-Resource-Policy \"same-site\"' \"$1\"\n        fi\n}\n\n\ncase \"$1\" in\n    configure)\n\n    # Ensure SecureDrop's necessary directories are created\n    for dir in /var/lib/securedrop/{,tmp,shredder,store,keys,/keys/private-keys-v1.d,/keys/openpgp-revocs.d,backups}; do\n      mkdir -p \"$dir\"\n      chmod 0700 \"$dir\"\n    done\n\n    chown -R www-data:www-data /var/lib/securedrop\n\n    # Ensure required gpg-agent.conf is in place, see #4013.\n    if [ -e \"/var/lib/securedrop/keys/gpg-agent.conf\" ]; then\n\n        # gpg-agent.conf does exist, update it if needed.\n        if ! grep -qE '^allow-loopback-pinentry$' /var/lib/securedrop/keys/gpg-agent.conf; then\n            echo allow-loopback-pinentry | sudo -u www-data tee -a /var/lib/securedrop/keys/gpg-agent.conf\n        fi\n        if ! grep -qE '^default-cache-ttl 0$' /var/lib/securedrop/keys/gpg-agent.conf; then\n            echo 'default-cache-ttl 0' | sudo -u www-data tee -a /var/lib/securedrop/keys/gpg-agent.conf\n        fi\n\n    else\n        # gpg-agent.conf does not yet exist, create it.\n        echo allow-loopback-pinentry | sudo -u www-data tee /var/lib/securedrop/keys/gpg-agent.conf\n        echo 'default-cache-ttl 0' | sudo -u www-data tee -a /var/lib/securedrop/keys/gpg-agent.conf\n    fi\n\n    # Migrate private keyring to gpg2.1 if needed\n    if [ ! -d \"/var/lib/securedrop/keys/private-keys-v1.d\" ]; then\n        # Then we should migrate the keyring\n        # shellcheck disable=SC2024\n        sudo -u www-data gpg2 --homedir=/var/lib/securedrop/keys --batch --import < /var/lib/securedrop/keys/secring.gpg\n    fi\n\n    # /var/www/securedrop should be owned by root and world-readable.\n    # Permissions on specific files will be loosened after\n    chown -R root:root /var/www/securedrop\n    chmod 755 /var/www/securedrop\n\n    # Make sure config.py is owned by root and readable by www-data,\n    # but not world-readable\n    if [ -f \"/var/www/securedrop/config.py\" ]; then\n        chown root:www-data /var/www/securedrop/config.py\n        chmod 640 /var/www/securedrop/config.py\n    fi\n    # And logo needs to be writable by webserver user\n    # If there's no custom logo yet, copy the default in its place\n    if [ ! -f \"/var/www/securedrop/static/i/custom_logo.png\" ]; then\n        cp /var/www/securedrop/static/i/logo.png /var/www/securedrop/static/i/custom_logo.png\n    fi\n    chown www-data:www-data /var/www/securedrop/static/i/custom_logo.png\n\n    # No Python code should be executed before this\n    refresh_bytecode\n\n    # Apache's default sites are not allowed by the securedrop apparmor profile\n    # disable the site before putting the apache apparmor profile in enforce\n    # mode.\n    a2dissite 000-default\n    a2dissite default-ssl\n    # Stop Apache service before making changes to its AppArmor profile.\n    # If the Apache service is running unconfined, and the profile is\n    # set to \"enforce\", then apache2 will fail to restart, since it lacks\n    # the ability to send signals to unconfined peers.\n    service apache2 stop\n\n    # Point Apache to our bundled mod_wsgi\n    ${SDBIN}/mod_wsgi-express module-config > /etc/apache2/mods-available/wsgi.load\n\n    # and make sure it's enabled\n    a2enmod wsgi\n\n    # If the profile was disabled enabled it.\n    if [ -e \"/etc/apparmor.d/disable/usr.sbin.apache2\" ]; then\n        rm /etc/apparmor.d/disable/usr.sbin.apache2\n    fi\n\n    aa-enforce /etc/apparmor.d/usr.sbin.tor\n    aa-enforce /etc/apparmor.d/usr.sbin.apache2\n\n    # Munge Apache config while service is stopped.\n    adjust_wsgi_configuration\n\n    # Add TLS1.3 configruation to the source configruation if required\n    update_to_tls13\n\n    # Apply Q4-2021 header updates\n    update_apache2_headers /etc/apache2/sites-available/source.conf\n    update_apache2_headers /etc/apache2/sites-available/journalist.conf\n\n    # Restart apache so it loads with the apparmor profiles in enforce mode.\n    service apache2 restart\n\n    # remove previously dynamically-generated assets\n    rm -fr /var/www/securedrop/static/gen/\n    rm -fr /var/www/securedrop/static/.webassets-cache/\n\n    # Version migrations\n\n    database_migration\n\n    ;;\n\n    abort-upgrade|abort-remove|abort-deconfigure|triggered)\n    ;;\n\n    *)\n        echo \"postinst called with unknown argument \\`$1'\" >&2\n        exit 1\n    ;;\nesac\n\n# dh_installdeb will replace this with shell code automatically\n# generated by other debhelper scripts.\n\n#DEBHELPER#\n\nexit 0\n"], "filenames": ["securedrop/debian/securedrop-app-code.postinst"], "buggy_code_start_loc": [171], "buggy_code_end_loc": [200], "fixing_code_start_loc": [172], "fixing_code_end_loc": [203], "type": "CWE-59", "message": "A vulnerability was found in Freedom of the Press SecureDrop. It has been rated as critical. Affected by this issue is some unknown functionality of the file gpg-agent.conf. The manipulation leads to symlink following. Local access is required to approach this attack. The name of the patch is b0526a06f8ca713cce74b63e00d3730618d89691. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-215972.", "other": {"cve": {"id": "CVE-2022-4563", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-16T17:15:09.177", "lastModified": "2022-12-21T18:38:34.060", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in Freedom of the Press SecureDrop. It has been rated as critical. Affected by this issue is some unknown functionality of the file gpg-agent.conf. The manipulation leads to symlink following. Local access is required to approach this attack. The name of the patch is b0526a06f8ca713cce74b63e00d3730618d89691. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-215972."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-59"}, {"lang": "en", "value": "CWE-61"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:freedom:securedrop:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.5.1", "matchCriteriaId": "6C784DF9-D6D2-42BD-9214-6EBF116A07ED"}]}]}], "references": [{"url": "https://github.com/freedomofpress/securedrop/commit/b0526a06f8ca713cce74b63e00d3730618d89691", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/freedomofpress/securedrop/pull/6704", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.215972", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/freedomofpress/securedrop/commit/b0526a06f8ca713cce74b63e00d3730618d89691"}}