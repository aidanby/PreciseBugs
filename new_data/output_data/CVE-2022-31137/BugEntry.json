{"buggy_code": ["#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport os\nimport sys\n\nimport funct\nimport sql\n\nform = funct.form\nserv = funct.is_ip_or_dns(form.getvalue('serv'))\nact = form.getvalue(\"act\")\n\nif (\n        form.getvalue('new_metrics')\n        or form.getvalue('new_http_metrics')\n        or form.getvalue('new_waf_metrics')\n        or form.getvalue('new_nginx_metrics')\n        or form.getvalue('new_apache_metrics')\n        or form.getvalue('metrics_hapwi_ram')\n        or form.getvalue('metrics_hapwi_cpu')\n        or form.getvalue('getoption')\n        or form.getvalue('getsavedserver')\n):\n    print('Content-type: application/json\\n')\nelse:\n    print('Content-type: text/html\\n')\n\nif act == \"checkrestart\":\n    servers = sql.get_dick_permit(ip=serv)\n    for server in servers:\n        if server != \"\":\n            print(\"ok\")\n            sys.exit()\n    sys.exit()\n\nfrom uuid import UUID\ntoken = form.getvalue(\"token\")\n\ntry:\n    uuid_obj = UUID(token, version=4)\nexcept ValueError:\n    print('error: Your token is not valid')\n    sys.exit()\n\nif not sql.check_token_exists(token):\n    print('error: Your token has been expired')\n    sys.exit()\n\nif form.getvalue('getcerts') is not None and serv is not None:\n    cert_path = sql.get_setting('cert_path')\n    commands = [\"sudo ls -1t \" + cert_path + \" |grep -E 'pem|crt|key'\"]\n    try:\n        funct.ssh_command(serv, commands, ip=\"1\")\n    except Exception as e:\n        print('error: Cannot connect to the server: ' + e.args[0])\n\nif form.getvalue('checkSshConnect') is not None and serv is not None:\n    try:\n        print(funct.ssh_command(serv, [\"ls -1t\"]))\n    except Exception as e:\n        print(e)\n\nif form.getvalue('getcert') is not None and serv is not None:\n    cert_id = form.getvalue('getcert')\n    if funct.checkAjaxInput(cert_id):\n        print('error: Nice try')\n        sys.exit()\n\n    cert_path = sql.get_setting('cert_path')\n    commands = [\"openssl x509 -in \" + cert_path + \"/\" + cert_id + \" -text\"]\n    try:\n        funct.ssh_command(serv, commands, ip=\"1\")\n    except Exception as e:\n        print('error: Cannot connect to the server ' + e.args[0])\n\nif form.getvalue('delcert') is not None and serv is not None:\n    if funct.checkAjaxInput(cert_id):\n        print('error: Nice try')\n        sys.exit()\n\n    cert_path = sql.get_setting('cert_path')\n    commands = [\"sudo rm -f \" + cert_path + \"/\" + cert_id]\n    try:\n        funct.ssh_command(serv, commands, ip=\"1\")\n    except Exception as e:\n        print('error: Cannot delete the certificate ' + e.args[0])\n\nif serv and form.getvalue('ssl_cert'):\n    cert_local_dir = os.path.dirname(os.getcwd()) + \"/\" + sql.get_setting('ssl_local_path')\n    cert_path = sql.get_setting('cert_path')\n    name = ''\n\n    if not os.path.exists(cert_local_dir):\n        os.makedirs(cert_local_dir)\n\n    if form.getvalue('ssl_name') is None:\n        print('error: Please enter a desired name')\n    else:\n        name = form.getvalue('ssl_name')\n        if funct.checkAjaxInput(name):\n            print('error: Nice try')\n            sys.exit()\n\n    try:\n        with open(name, \"w\") as ssl_cert:\n            ssl_cert.write(form.getvalue('ssl_cert'))\n    except IOError as e:\n        print('error: Cannot save the SSL key file. Check a SSH key path in config ' + e.args[0])\n\n    MASTERS = sql.is_master(serv)\n    for master in MASTERS:\n        if master[0] is not None:\n            funct.upload(master[0], cert_path, name)\n            print('success: the SSL file has been uploaded to %s into: %s%s <br/>' % (master[0], cert_path, '/' + name))\n    try:\n        error = funct.upload(serv, cert_path, name)\n        print('success: the SSL file has been uploaded to %s into: %s%s' % (serv, cert_path, '/' + name))\n    except Exception as e:\n        funct.logging('localhost', e.args[0], haproxywi=1)\n    try:\n        os.system(\"mv %s %s\" % (name, cert_local_dir))\n    except OSError as e:\n        funct.logging('localhost', e.args[0], haproxywi=1)\n\n    funct.logging(serv, \"add.py#ssl uploaded a new SSL cert %s\" % name, haproxywi=1, login=1)\n\nif form.getvalue('backend') is not None:\n    funct.show_backends(serv)\n\nif form.getvalue('ip_select') is not None:\n    funct.show_backends(serv)\n\nif form.getvalue('ipbackend') is not None and form.getvalue('backend_server') is None:\n    haproxy_sock_port = int(sql.get_setting('haproxy_sock_port'))\n    backend = form.getvalue('ipbackend')\n    if funct.checkAjaxInput(backend):\n        print('error: Nice try')\n        sys.exit()\n    cmd = 'echo \"show servers state\"|nc %s %s |grep \"%s\" |awk \\'{print $4}\\'' % (serv, haproxy_sock_port, backend)\n    output, stderr = funct.subprocess_execute(cmd)\n    for i in output:\n        if i == ' ':\n            continue\n        i = i.strip()\n        print(i + '<br>')\n\nif form.getvalue('ipbackend') is not None and form.getvalue('backend_server') is not None:\n    haproxy_sock_port = int(sql.get_setting('haproxy_sock_port'))\n    backend = form.getvalue('ipbackend')\n    backend_server = form.getvalue('backend_server')\n    if funct.checkAjaxInput(backend) or funct.checkAjaxInput(backend_server):\n        print('error: Nice try')\n        sys.exit()\n    cmd = 'echo \"show servers state\"|nc %s %s |grep \"%s\" |grep \"%s\" |awk \\'{print $5\":\"$19}\\' |head -1' % (serv, haproxy_sock_port, backend, backend_server)\n    output, stderr = funct.subprocess_execute(cmd)\n    print(output[0])\n\nif form.getvalue('backend_ip') is not None:\n    backend_backend = form.getvalue('backend_backend')\n    backend_server = form.getvalue('backend_server')\n    backend_ip = form.getvalue('backend_ip')\n    backend_port = form.getvalue('backend_port')\n    if any((funct.checkAjaxInput(backend_backend), funct.checkAjaxInput(backend_server), funct.checkAjaxInput(backend_ip), funct.checkAjaxInput(backend_port))):\n        print('error: Nice try')\n        sys.exit()\n    if form.getvalue('backend_ip') is None:\n        print('error: Backend IP must be IP and not 0')\n        sys.exit()\n\n    if form.getvalue('backend_port') is None:\n        print('error: The backend port must be integer and not 0')\n        sys.exit()\n\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n\n    MASTERS = sql.is_master(serv)\n    for master in MASTERS:\n        if master[0] is not None:\n            cmd = 'echo \"set server %s/%s addr %s port %s check-port %s\" |nc %s %s' % (\n                backend_backend, backend_server, backend_ip, backend_port, backend_port, master[0], haproxy_sock_port)\n            output, stderr = funct.subprocess_execute(cmd)\n            print(output[0])\n            funct.logging(\n                master[0], 'IP address and port have been changed. On: {}/{} to {}:{}'.format(\n                    backend_backend, backend_server, backend_ip, backend_port\n                ),\n                login=1, keep_history=1, service='haproxy'\n            )\n\n    cmd = 'echo \"set server %s/%s addr %s port %s check-port %s\" |nc %s %s' % (\n        backend_backend, backend_server, backend_ip, backend_port, backend_port, serv, haproxy_sock_port)\n    funct.logging(\n        serv,\n        'IP address and port have been changed. On: {}/{} to {}:{}'.format(backend_backend, backend_server, backend_ip, backend_port),\n        login=1, keep_history=1, service='haproxy'\n    )\n    output, stderr = funct.subprocess_execute(cmd)\n\n    if stderr != '':\n        print('error: ' + stderr[0])\n    else:\n        print(output[0])\n        configs_dir = funct.get_config_var('configs', 'haproxy_save_configs_dir')\n        cfg = configs_dir + serv + \"-\" + funct.get_data('config') + \".cfg\"\n\n        error = funct.get_config(serv, cfg)\n        cmd = 'string=`grep %s %s -n -A25 |grep \"server %s\" |head -1|awk -F\"-\" \\'{print $1}\\'` ' \\\n                '&& sed -Ei \"$( echo $string)s/((1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.){3}(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5]):[0-9]+/%s:%s/g\" %s' % \\\n              (backend_backend, cfg, backend_server, backend_ip, backend_port, cfg)\n        output, stderr = funct.subprocess_execute(cmd)\n        stderr = funct.master_slave_upload_and_restart(serv, cfg, just_save='save')\n\nif form.getvalue('maxconn_select') is not None:\n    serv = form.getvalue('maxconn_select')\n    if funct.checkAjaxInput(serv):\n        print('error: Nice try')\n        sys.exit()\n    funct.get_backends_from_config(serv, backends='frontend')\n\nif form.getvalue('maxconn_frontend') is not None:\n    frontend = form.getvalue('maxconn_frontend')\n    maxconn = form.getvalue('maxconn_int')\n\n    if funct.checkAjaxInput(frontend) or funct.checkAjaxInput(maxconn):\n        print('error: Nice try')\n        sys.exit()\n    if form.getvalue('maxconn_int') is None:\n        print('error: Maxconn must be integer and not 0')\n        sys.exit()\n\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n\n    MASTERS = sql.is_master(serv)\n    for master in MASTERS:\n        if master[0] is not None:\n            if frontend == 'global':\n                cmd = 'echo \"set maxconn %s %s\" |nc %s %s' % (frontend, maxconn, master[0], haproxy_sock_port)\n            else:\n                cmd = 'echo \"set maxconn frontend %s %s\" |nc %s %s' % (frontend, maxconn, master[0], haproxy_sock_port)\n            output, stderr = funct.subprocess_execute(cmd)\n        funct.logging(master[0], 'Maxconn has been changed. On: {} to {}'.format(frontend, maxconn), login=1, keep_history=1,\n                      service='haproxy')\n\n    if frontend == 'global':\n        cmd = 'echo \"set maxconn %s %s\" |nc %s %s' % (frontend, maxconn, serv, haproxy_sock_port)\n    else:\n        cmd = 'echo \"set maxconn frontend %s %s\" |nc %s %s' % (frontend, maxconn, serv, haproxy_sock_port)\n    funct.logging(serv, 'Maxconn has been changed. On: {} to {}'.format(frontend, maxconn), login=1, keep_history=1,\n                  service='haproxy')\n    output, stderr = funct.subprocess_execute(cmd)\n\n    if stderr != '':\n        print(stderr[0])\n    elif output[0] == '':\n        configs_dir = funct.get_config_var('configs', 'haproxy_save_configs_dir')\n        cfg = configs_dir + serv + \"-\" + funct.get_data('config') + \".cfg\"\n\n        error = funct.get_config(serv, cfg)\n        cmd = 'string=`grep %s %s -n -A5 |grep maxcon -n |awk -F\":\" \\'{print $2}\\'|awk -F\"-\" \\'{print $1}\\'` ' \\\n              '&& sed -Ei \"$( echo $string)s/[0-9]+/%s/g\" %s' % (frontend, cfg, maxconn, cfg)\n        output, stderr = funct.subprocess_execute(cmd)\n        stderr = funct.master_slave_upload_and_restart(serv, cfg, just_save='save')\n        print('success: Maxconn for %s has been set to %s ' % (frontend, maxconn))\n    else:\n        print('error: ' + output[0])\n\nif form.getvalue('table_serv_select') is not None:\n    print(funct.get_all_stick_table())\n\nif form.getvalue('table_select') is not None:\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates'), autoescape=True,\n                      extensions=['jinja2.ext.loopcontrols', 'jinja2.ext.do'], trim_blocks=True, lstrip_blocks=True)\n    table = form.getvalue('table_select')\n\n    if table == 'All':\n        template = env.get_template('ajax/stick_tables.html')\n        tables = funct.get_all_stick_table()\n        table = []\n        for t in tables.split(','):\n            if t != '':\n                table_id = []\n                tables_head = []\n                tables_head1, table1 = funct.get_stick_table(t)\n                table_id.append(tables_head1)\n                table_id.append(table1)\n                table.append(table_id)\n\n        template = template.render(table=table)\n    else:\n        template = env.get_template('ajax/stick_table.html')\n        tables_head, table = funct.get_stick_table(table)\n        template = template.render(tables_head=tables_head, table=table)\n\n    print(template)\n\nif form.getvalue('ip_for_delete') is not None:\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n    ip = form.getvalue('ip_for_delete')\n    table = form.getvalue('table_for_delete')\n\n    if funct.checkAjaxInput(ip) or funct.checkAjaxInput(table):\n        print('error: Nice try')\n        sys.exit()\n\n    cmd = 'echo \"clear table %s key %s\" |nc %s %s' % (table, ip, serv, haproxy_sock_port)\n    output, stderr = funct.subprocess_execute(cmd)\n    if stderr[0] != '':\n        print('error: ' + stderr[0])\n\nif form.getvalue('table_for_clear') is not None:\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n    table = form.getvalue('table_for_clear')\n\n    if funct.checkAjaxInput(table):\n        print('error: Nice try')\n        sys.exit()\n\n    cmd = 'echo \"clear table %s \" |nc %s %s' % (table, serv, haproxy_sock_port)\n    output, stderr = funct.subprocess_execute(cmd)\n    if stderr[0] != '':\n        print('error: ' + stderr[0])\n\nif form.getvalue('list_serv_select') is not None:\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n    cmd = 'echo \"show acl\"|nc %s %s |grep \"loaded from\" |awk \\'{print $1,$2}\\'' % (serv, haproxy_sock_port)\n    output, stderr = funct.subprocess_execute(cmd)\n    print(output)\n\nif form.getvalue('list_select_id') is not None:\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True,\n                      extensions=['jinja2.ext.loopcontrols', 'jinja2.ext.do'], trim_blocks=True, lstrip_blocks=True)\n    template = env.get_template('ajax/list.html')\n    list_id = form.getvalue('list_select_id')\n    list_name = form.getvalue('list_select_name')\n\n    if funct.checkAjaxInput(list_id) or funct.checkAjaxInput(list_name):\n        print('error: Nice try')\n        sys.exit()\n\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n    cmd = 'echo \"show acl #%s\"|nc %s %s' % (list_id, serv, haproxy_sock_port)\n    output, stderr = funct.subprocess_execute(cmd)\n\n    template = template.render(list=output, list_id=list_id, list_name=list_name)\n    print(template)\n\nif form.getvalue('list_id_for_delete') is not None:\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n    lists_path = sql.get_setting('lists_path')\n    lib_path = funct.get_config_var('main', 'lib_path')\n    ip_id = form.getvalue('list_ip_id_for_delete')\n    ip = form.getvalue('list_ip_for_delete')\n    list_id = form.getvalue('list_id_for_delete')\n    list_name = form.getvalue('list_name')\n    user_group = funct.get_user_group(id=1)\n\n    if any((funct.checkAjaxInput(ip_id), funct.checkAjaxInput(ip), funct.checkAjaxInput(list_id), funct.checkAjaxInput(list_name))):\n        print('error: Nice try')\n        sys.exit()\n\n    cmd = \"sed -i 's!%s$!!' %s/%s/%s/%s\" % (ip, lib_path, lists_path, user_group, list_name)\n    cmd1 = \"sed -i '/^$/d' %s/%s/%s/%s\" % (lib_path, lists_path, user_group, list_name)\n    output, stderr = funct.subprocess_execute(cmd)\n    output1, stderr1 = funct.subprocess_execute(cmd1)\n    if output:\n        print('error: ' + str(output))\n    if stderr:\n        print('error: ' + str(stderr))\n    if output1:\n        print('error: ' + str(output1))\n    if stderr1:\n        print('error: ' + str(stderr1))\n\n    cmd = 'echo \"del acl #%s #%s\" |nc %s %s' % (list_id, ip_id, serv, haproxy_sock_port)\n    output, stderr = funct.subprocess_execute(cmd)\n    if output[0] != '':\n        print('error: ' + output[0])\n    if stderr[0] != '':\n        print('error: ' + stderr[0])\n\n    funct.logging(serv, '{} has been delete from list {}'.format(ip_id, list_id), login=1, keep_history=1,\n                  service='haproxy')\n\nif form.getvalue('list_ip_for_add') is not None:\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n    lists_path = sql.get_setting('lists_path')\n    lib_path = funct.get_config_var('main', 'lib_path')\n    ip = form.getvalue('list_ip_for_add')\n    ip = ip.strip()\n    ip = funct.is_ip_or_dns(ip)\n    list_id = form.getvalue('list_id_for_add')\n    list_name = form.getvalue('list_name')\n    user_group = funct.get_user_group(id=1)\n\n    if any((funct.checkAjaxInput(lists_path), funct.checkAjaxInput(list_id), funct.checkAjaxInput(list_name))):\n        print('error: Nice try')\n        sys.exit()\n\n    cmd = 'echo \"add acl #%s %s\" |nc %s %s' % (list_id, ip, serv, haproxy_sock_port)\n    output, stderr = funct.subprocess_execute(cmd)\n    if output[0]:\n        print('error: ' + output[0])\n    if stderr:\n        print('error: ' + stderr[0])\n\n    if 'is not a valid IPv4 or IPv6 address' not in output[0]:\n        cmd = 'echo \"%s\" >> %s/%s/%s/%s' % (ip, lib_path, lists_path, user_group, list_name)\n        output, stderr = funct.subprocess_execute(cmd)\n        if output:\n            print('error: ' + str(output))\n        if stderr:\n            print('error: ' + str(stderr))\n\n    funct.logging(serv, '{} has been added to list {}'.format(ip, list_id), login=1, keep_history=1,\n                  service='haproxy')\n\nif form.getvalue('sessions_select') is not None:\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates'), autoescape=True,\n                      extensions=['jinja2.ext.loopcontrols', 'jinja2.ext.do'], trim_blocks=True, lstrip_blocks=True)\n    serv = form.getvalue('sessions_select')\n\n    if funct.checkAjaxInput(serv):\n        print('error: Nice try')\n        sys.exit()\n\n    if funct.checkAjaxInput(serv):\n        print('error: Nice try')\n        sys.exit()\n\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n\n    cmd = 'echo \"show sess\" |nc %s %s' % (serv, haproxy_sock_port)\n    output, stderr = funct.subprocess_execute(cmd)\n\n    template = env.get_template('ajax/sessions_table.html')\n    template = template.render(sessions=output)\n\n    print(template)\n\nif form.getvalue('sessions_select_show') is not None:\n    serv = form.getvalue('sessions_select_show')\n    sess_id = form.getvalue('sessions_select_id')\n\n    if funct.checkAjaxInput(serv) or funct.checkAjaxInput(sess_id):\n        print('error: Nice try')\n        sys.exit()\n\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n\n    cmd = 'echo \"show sess %s\" |nc %s %s' % (sess_id, serv, haproxy_sock_port)\n    output, stderr = funct.subprocess_execute(cmd)\n\n    if stderr:\n        print('error: ' + stderr[0])\n    else:\n        for o in output:\n            print(o + '<br />')\n\nif form.getvalue('session_delete_id') is not None:\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n    sess_id = form.getvalue('session_delete_id')\n\n    if funct.checkAjaxInput(sess_id):\n        print('error: Nice try')\n        sys.exit()\n\n    if funct.checkAjaxInput(sess_id):\n        print('error: Nice try')\n        sys.exit()\n\n    cmd = 'echo \"shutdown session %s\" |nc %s %s' % (sess_id, serv, haproxy_sock_port)\n    output, stderr = funct.subprocess_execute(cmd)\n    if output[0] != '':\n        print('error: ' + output[0])\n    if stderr[0] != '':\n        print('error: ' + stderr[0])\n\nif form.getvalue(\"change_pos\") is not None:\n    pos = form.getvalue('change_pos')\n    server_id = form.getvalue('pos_server_id')\n    sql.update_server_pos(pos, server_id)\n\nif form.getvalue('show_ip') is not None and serv is not None:\n    commands = [\"sudo ip a |grep inet |egrep -v '::1' |awk '{ print $2 }' |awk -F'/' '{ print $1 }'\"]\n    funct.ssh_command(serv, commands, ip=\"1\")\n\nif form.getvalue('showif'):\n    commands = [\"sudo ip link|grep 'UP' |grep -v 'lo'| awk '{print $2}' |awk -F':' '{print $1}'\"]\n    funct.ssh_command(serv, commands, ip=\"1\")\n\nif form.getvalue('action_hap') is not None and serv is not None:\n    action = form.getvalue('action_hap')\n    haproxy_service_name = \"haproxy\"\n\n    if action not in ('start', 'stop', 'reload', 'restart'):\n        print('error: wrong action')\n        sys.exit()\n\n    funct.is_restarted(serv, action)\n\n    if funct.check_haproxy_config(serv):\n        server_id = sql.select_server_id_by_ip(server_ip=serv)\n        is_docker = sql.select_service_setting(server_id, 'haproxy', 'dockerized')\n\n        if is_docker == '1':\n            container_name = sql.get_setting('haproxy_container_name')\n            commands = [\"sudo docker %s %s\" % (action, container_name)]\n        else:\n            haproxy_enterprise = sql.select_service_setting(server_id, 'haproxy', 'haproxy_enterprise')\n            if haproxy_enterprise == '1':\n                haproxy_service_name = \"hapee-2.0-lb\"\n            commands = [\"sudo systemctl %s %s\" % (action, haproxy_service_name)]\n\n        funct.ssh_command(serv, commands)\n        funct.logging(serv, 'Service has been ' + action + 'ed', haproxywi=1, login=1, keep_history=1, service='haproxy')\n        print(\"success: HAProxy has been %s\" % action)\n    else:\n        print(\"error: Bad config, check please\")\n\nif form.getvalue('action_nginx') is not None and serv is not None:\n    action = form.getvalue('action_nginx')\n\n    if action not in ('start', 'stop', 'reload', 'restart'):\n        print('error: wrong action')\n        sys.exit()\n\n    funct.is_restarted(serv, action)\n\n    if funct.check_nginx_config(serv):\n        server_id = sql.select_server_id_by_ip(server_ip=serv)\n        is_docker = sql.select_service_setting(server_id, 'nginx', 'dockerized')\n        if is_docker == '1':\n            container_name = sql.get_setting('nginx_container_name')\n            commands = [\"sudo docker %s %s\" % (action, container_name)]\n        else:\n            commands = [\"sudo systemctl %s nginx\" % action]\n        funct.ssh_command(serv, commands)\n        funct.logging(serv, 'Service has been ' + action + 'ed', haproxywi=1, login=1, keep_history=1, service='nginx')\n        print(\"success: Nginx has been %s\" % action)\n    else:\n        print(\"error: Bad config, check please\")\n\nif form.getvalue('action_keepalived') is not None and serv is not None:\n    action = form.getvalue('action_keepalived')\n\n    if action not in ('start', 'stop', 'reload', 'restart'):\n        print('error: wrong action')\n        sys.exit()\n\n    funct.is_restarted(serv, action)\n\n    commands = [\"sudo systemctl %s keepalived\" % action]\n    funct.ssh_command(serv, commands)\n    funct.logging(serv, 'Service has been ' + action + 'ed', haproxywi=1, login=1, keep_history=1, service='keepalived')\n    print(\"success: Keepalived has been %s\" % action)\n\nif form.getvalue('action_waf') is not None and serv is not None:\n    serv = form.getvalue('serv')\n    action = form.getvalue('action_waf')\n\n    if action not in ('start', 'stop', 'reload', 'restart'):\n        print('error: wrong action')\n        sys.exit()\n\n    funct.is_restarted(serv, action)\n\n    funct.logging(serv, 'WAF service has been ' + action + 'ed', haproxywi=1, login=1, keep_history=1, service='haproxy')\n    commands = [\"sudo systemctl %s waf\" % action]\n    funct.ssh_command(serv, commands)\n\nif form.getvalue('action_apache') is not None and serv is not None:\n    action = form.getvalue('action_apache')\n\n    if action not in ('start', 'stop', 'reload', 'restart'):\n        print('error: wrong action')\n        sys.exit()\n\n    funct.is_restarted(serv, action)\n\n    server_id = sql.select_server_id_by_ip(serv)\n    is_docker = sql.select_service_setting(server_id, 'apache', 'dockerized')\n    if is_docker == '1':\n        container_name = sql.get_setting('apache_container_name')\n        commands = [\"sudo docker %s %s\" % (action, container_name)]\n    else:\n        service_apache_name = funct.get_correct_apache_service_name(0, server_id)\n\n        commands = [\"sudo systemctl %s %s\" % (action, service_apache_name)]\n    funct.ssh_command(serv, commands)\n    funct.logging(serv, 'Service has been ' + action + 'ed', haproxywi=1, login=1, keep_history=1, service='apache')\n    print(\"success: Apache has been %s\" % action)\n\nif form.getvalue('action_service') is not None:\n    action = form.getvalue('action_service')\n\n    if funct.checkAjaxInput(action):\n        print('error: Nice try')\n        sys.exit()\n\n    if funct.checkAjaxInput(action):\n        print('error: Nice try')\n        sys.exit()\n\n    if action not in ('start', 'stop', 'restart'):\n        print('error: wrong action')\n        sys.exit()\n\n    is_in_docker = funct.is_docker()\n    if action == 'stop':\n        cmd = \"sudo systemctl disable %s --now\" % serv\n    elif action == \"start\":\n        cmd = \"sudo systemctl enable %s --now\" % serv\n        if not sql.select_user_status():\n            print('warning: The service is disabled because you are not subscribed. Read <a href=\"https://roxy-wi.org/pricing.py\" '\n                    'title=\"Roxy-WI pricing\" target=\"_blank\">here</a> about subscriptions')\n            sys.exit()\n    elif action == \"restart\":\n        cmd = \"sudo systemctl restart %s --now\" % serv\n        if not sql.select_user_status():\n            print('warning: The service is disabled because you are not subscribed. Read <a href=\"https://roxy-wi.org/pricing.py\" '\n                    'title=\"Roxy-WI pricing\" target=\"_blank\">here</a> about subscriptions')\n            sys.exit()\n    if is_in_docker:\n        cmd = \"sudo supervisorctl \" + action + \" \" + serv\n    output, stderr = funct.subprocess_execute(cmd)\n    funct.logging('localhost', ' The service ' + serv + ' has been ' + action + 'ed', haproxywi=1, login=1)\n\nif act == \"overviewHapserverBackends\":\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n    template = env.get_template('haproxyservers_backends.html')\n    service = form.getvalue('service')\n    format_file = 'cfg'\n\n    if service == 'haproxy':\n        configs_dir = funct.get_config_var('configs', 'haproxy_save_configs_dir')\n        format_file = 'cfg'\n    elif service == 'keepalived':\n        configs_dir = funct.get_config_var('configs', 'kp_save_configs_dir')\n        format_file = 'conf'\n\n    if service != 'nginx' and service != 'apache':\n        try:\n            sections = funct.get_sections(configs_dir + funct.get_files(dir=configs_dir, format=format_file)[0], service=service)\n        except Exception as e:\n            funct.logging('localhost', str(e), haproxywi=1)\n\n            try:\n                cfg = configs_dir + serv + \"-\" + funct.get_data('config') + '.' + format_file\n            except Exception as e:\n                funct.logging('localhost', ' Cannot generate a cfg path ' + str(e), haproxywi=1)\n            try:\n                if service == 'keepalived':\n                    error = funct.get_config(serv, cfg, keepalived=1)\n                else:\n                    error = funct.get_config(serv, cfg)\n            except Exception as e:\n                funct.logging('localhost', ' Cannot download a config ' + str(e), haproxywi=1)\n            try:\n                sections = funct.get_sections(cfg, service=service)\n            except Exception as e:\n                funct.logging('localhost', ' Cannot get sections from config file ' + str(e), haproxywi=1)\n                sections = 'Cannot get backends'\n    else:\n        sections = funct.get_remote_sections(serv, service)\n\n    template = template.render(backends=sections, serv=serv, service=service)\n    print(template)\n\nif form.getvalue('show_userlists'):\n    configs_dir = funct.get_config_var('configs', 'haproxy_save_configs_dir')\n    format_file = 'cfg'\n\n    try:\n        sections = funct.get_userlists(configs_dir + funct.get_files(dir=configs_dir, format=format_file)[0])\n    except Exception as e:\n        funct.logging('localhost', str(e), haproxywi=1)\n        try:\n            cfg = configs_dir + serv + \"-\" + funct.get_data('config') + '.' + format_file\n        except Exception as e:\n            funct.logging('localhost', ' Cannot generate a cfg path ' + str(e), haproxywi=1)\n        try:\n            error = funct.get_config(serv, cfg)\n        except Exception as e:\n            funct.logging('localhost', ' Cannot download a config ' + str(e), haproxywi=1)\n        try:\n            sections = funct.get_userlists(cfg)\n        except Exception as e:\n            funct.logging('localhost', ' Cannot get Userlists from the config file ' + str(e), haproxywi=1)\n            sections = 'error: Cannot get Userlists'\n\n    print(sections)\n\nif act == \"overviewHapservers\":\n    if form.getvalue('service') == 'nginx':\n        config_path = sql.get_setting('nginx_config_path')\n    elif form.getvalue('service') == 'keepalived':\n        config_path = '/etc/keepalived/keepalived.conf'\n    else:\n        config_path = sql.get_setting('haproxy_config_path')\n    commands = [\"ls -l %s |awk '{ print $6\\\" \\\"$7\\\" \\\"$8}'\" % config_path]\n    try:\n        print(funct.ssh_command(serv, commands))\n    except Exception as e:\n        print('error: Cannot get last date ' + str(e))\n\nif act == \"overview\":\n    import asyncio\n    import http.cookies\n    from jinja2 import Environment, FileSystemLoader\n\n    async def async_get_overview(serv1, serv2, user_uuid, server_id):\n        user_id = sql.get_user_id_by_uuid(user_uuid)\n        user_services = sql.select_user_services(user_id)\n\n        haproxy = sql.select_haproxy(serv) if '1' in user_services else 0\n        nginx = sql.select_nginx(serv) if '2' in user_services else 0\n        keepalived = sql.select_keepalived(serv) if '3' in user_services else 0\n        apache = sql.select_apache(serv) if '4' in user_services else 0\n\n        waf = sql.select_waf_servers(serv2)\n        haproxy_process = ''\n        keepalived_process = ''\n        nginx_process = ''\n        apache_process = ''\n        waf_process = ''\n\n        try:\n            waf_len = len(waf)\n        except Exception:\n            waf_len = 0\n\n        if haproxy == 1:\n            cmd = 'echo \"show info\" |nc %s %s -w 1|grep -e \"Process_num\"' % (serv2, sql.get_setting('haproxy_sock_port'))\n            haproxy_process = funct.server_status(funct.subprocess_execute(cmd))\n\n        if nginx == 1:\n            nginx_cmd = 'echo \"something\" |nc %s %s -w 1' % (serv2, sql.get_setting('nginx_stats_port'))\n            nginx_process = funct.server_status(funct.subprocess_execute(nginx_cmd))\n\n        if apache == 1:\n            apache_cmd = 'echo \"something\" |nc %s %s -w 1' % (serv2, sql.get_setting('apache_stats_port'))\n            apache_process = funct.server_status(funct.subprocess_execute(apache_cmd))\n\n        if keepalived == 1:\n            command = [\"ps ax |grep keepalived|grep -v grep|wc -l|tr -d '\\n'\"]\n            keepalived_process = funct.ssh_command(serv2, command)\n\n        if waf_len >= 1:\n            command = [\"ps ax |grep waf/bin/modsecurity |grep -v grep |wc -l\"]\n            waf_process = funct.ssh_command(serv2, command)\n\n        server_status = (serv1,\n                         serv2,\n                         haproxy,\n                         haproxy_process,\n                         waf_process,\n                         waf,\n                         keepalived,\n                         keepalived_process,\n                         nginx,\n                         nginx_process,\n                         server_id,\n                         apache,\n                         apache_process)\n        return server_status\n\n    async def get_runner_overview():\n        env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True,\n                          extensions=['jinja2.ext.loopcontrols', 'jinja2.ext.do'])\n\n        servers = []\n        template = env.get_template('overview.html')\n        cookie = http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\"))\n        user_uuid = cookie.get('uuid')\n        futures = [async_get_overview(server[1], server[2], user_uuid.value, server[0]) for server in sql.select_servers(server=serv)]\n        for i, future in enumerate(asyncio.as_completed(futures)):\n            result = await future\n            servers.append(result)\n        servers_sorted = sorted(servers, key=funct.get_key)\n        template = template.render(service_status=servers_sorted, role=sql.get_user_role_by_uuid(user_uuid.value))\n        print(template)\n\n    ioloop = asyncio.get_event_loop()\n    ioloop.run_until_complete(get_runner_overview())\n    ioloop.close()\n\nif act == \"overviewwaf\":\n    import http.cookies\n\n    from jinja2 import Environment, FileSystemLoader\n    env = Environment(\n        loader=FileSystemLoader('templates/ajax'), autoescape=True,\n        extensions=['jinja2.ext.loopcontrols', 'jinja2.ext.do']\n    )\n    template = env.get_template('overivewWaf.html')\n\n    servers = sql.select_servers(server=serv)\n    cookie = http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\"))\n    user_id = cookie.get('uuid')\n\n    haproxy_path = ''\n    returned_servers = []\n    waf = ''\n    metrics_en = 0\n    waf_process = ''\n    waf_mode = ''\n\n    for server in servers:\n        haproxy = sql.select_haproxy(server[2])\n        if haproxy == 1:\n            haproxy_path = sql.get_setting('haproxy_dir')\n            waf = sql.select_waf_servers(server[2])\n            metrics_en = sql.select_waf_metrics_enable_server(server[2])\n            try:\n                waf_len = len(waf)\n            except Exception:\n                waf_len = 0\n\n            if waf_len >= 1:\n                command = [\"ps ax |grep waf/bin/modsecurity |grep -v grep |wc -l\"]\n                commands1 = [\n                    \"grep SecRuleEngine %s/waf/modsecurity.conf |grep -v '#' |awk '{print $2}'\" % haproxy_path]\n                waf_process = funct.ssh_command(server[2], command)\n                waf_mode = funct.ssh_command(server[2], commands1).strip()\n\n                server_status = (server[1],\n                                 server[2],\n                                 waf_process,\n                                 waf_mode,\n                                 metrics_en,\n                                 waf_len)\n            else:\n                server_status = (server[1],\n                                 server[2],\n                                 waf_process,\n                                 waf_mode,\n                                 metrics_en,\n                                 waf_len)\n\n        returned_servers.append(server_status)\n\n    servers_sorted = sorted(returned_servers, key=funct.get_key)\n    template = template.render(service_status=servers_sorted, role=sql.get_user_role_by_uuid(user_id.value))\n    print(template)\n\nif act == \"overviewServers\":\n    import asyncio\n\n    async def async_get_overviewServers(serv1, serv2, service):\n        if service == 'haproxy':\n            cmd = 'echo \"show info\" |nc %s %s -w 1|grep -e \"node\\|Nbproc\\|Maxco\\|MB\\|Nbthread\"' % (serv2, sql.get_setting('haproxy_sock_port'))\n            out = funct.subprocess_execute(cmd)\n            return_out = \"\"\n\n            for k in out:\n                if \"Ncat:\" not in k:\n                    for r in k:\n                        return_out += r\n                        return_out += \"<br />\"\n                else:\n                    return_out = \"Cannot connect to HAProxy\"\n        else:\n            return_out = ''\n\n        server_status = (serv1, serv2, return_out)\n        return server_status\n\n    async def get_runner_overviewServers(**kwargs):\n        import http.cookies\n        from jinja2 import Environment, FileSystemLoader\n        env = Environment(loader=FileSystemLoader('templates/ajax'),\n                          extensions=['jinja2.ext.loopcontrols', 'jinja2.ext.do'])\n        template = env.get_template('overviewServers.html')\n\n        servers = []\n        cookie = http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\"))\n        user_id = cookie.get('uuid')\n        role = sql.get_user_role_by_uuid(user_id.value)\n        futures = [async_get_overviewServers(kwargs.get('server1'), kwargs.get('server2'), kwargs.get('service'))]\n\n        for i, future in enumerate(asyncio.as_completed(futures)):\n            result = await future\n            servers.append(result)\n        servers_sorted = sorted(servers, key=funct.get_key)\n        template = template.render(service_status=servers_sorted, role=role, id=kwargs.get('id'), service_page=service)\n        print(template)\n\n    server_id = form.getvalue('id')\n    name = form.getvalue('name')\n    service = form.getvalue('service')\n    ioloop = asyncio.get_event_loop()\n    ioloop.run_until_complete(get_runner_overviewServers(server1=name, server2=serv, id=server_id, service=service))\n    ioloop.close()\n\nif form.getvalue('action'):\n    import requests\n\n    haproxy_user = sql.get_setting('stats_user')\n    haproxy_pass = sql.get_setting('stats_password')\n    stats_port = sql.get_setting('stats_port')\n    stats_page = sql.get_setting('stats_page')\n\n    postdata = {\n        'action': form.getvalue('action'),\n        's': form.getvalue('s'),\n        'b': form.getvalue('b')\n    }\n\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 5.1; rv:20.0) Gecko/20100101 Firefox/20.0',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        'Accept-Language': 'en-US,en;q=0.5',\n        'Accept-Encoding': 'gzip, deflate'\n    }\n\n    q = requests.post('http://{}:{}/{}'.format(serv, stats_port, stats_page),\n                      headers=headers,\n                      data=postdata,\n                      auth=(haproxy_user, haproxy_pass))\n\nif serv is not None and act == \"stats\":\n    import requests\n\n    if form.getvalue('service') == 'nginx':\n        haproxy_user = sql.get_setting('nginx_stats_user')\n        haproxy_pass = sql.get_setting('nginx_stats_password')\n        stats_port = sql.get_setting('nginx_stats_port')\n        stats_page = sql.get_setting('nginx_stats_page')\n    elif form.getvalue('service') == 'apache':\n        haproxy_user = sql.get_setting('apache_stats_user')\n        haproxy_pass = sql.get_setting('apache_stats_password')\n        stats_port = sql.get_setting('apache_stats_port')\n        stats_page = sql.get_setting('apache_stats_page')\n    else:\n        haproxy_user = sql.get_setting('stats_user')\n        haproxy_pass = sql.get_setting('stats_password')\n        stats_port = sql.get_setting('stats_port')\n        stats_page = sql.get_setting('stats_page')\n    try:\n        response = requests.get('http://%s:%s/%s' % (serv, stats_port, stats_page), auth=(haproxy_user, haproxy_pass))\n    except requests.exceptions.ConnectTimeout:\n        print('error: Oops. Connection timeout occurred!')\n    except requests.exceptions.ReadTimeout:\n        print('error: Oops. Read timeout occurred')\n    except requests.exceptions.HTTPError as errh:\n        print(\"error: Http Error:\", errh)\n    except requests.exceptions.ConnectionError as errc:\n        print('error: Error Connecting: %s' % errc)\n    except requests.exceptions.Timeout as errt:\n        print(\"error: Timeout Error:\", errt)\n    except requests.exceptions.RequestException as err:\n        print(\"error: OOps: Something Else\", err)\n\n    data = response.content\n    if form.getvalue('service') == 'nginx':\n        from jinja2 import Environment, FileSystemLoader\n\n        env = Environment(loader=FileSystemLoader('templates/'), autoescape=True)\n        template = env.get_template('ajax/nginx_stats.html')\n\n        servers_with_status = list()\n        h = ()\n        out1 = []\n        for k in data.decode('utf-8').split():\n            out1.append(k)\n        h = (out1,)\n        servers_with_status.append(h)\n\n        template = template.render(out=servers_with_status)\n        print(template)\n    else:\n        print(data.decode('utf-8'))\n\nif serv is not None and form.getvalue('show_log') is not None:\n    rows = form.getvalue('show_log')\n    waf = form.getvalue('waf')\n    grep = form.getvalue('grep')\n    hour = form.getvalue('hour')\n    minut = form.getvalue('minut')\n    hour1 = form.getvalue('hour1')\n    minut1 = form.getvalue('minut1')\n    service = form.getvalue('service')\n    out = funct.show_haproxy_log(serv, rows=rows, waf=waf, grep=grep, hour=hour, minut=minut, hour1=hour1,\n                                 minut1=minut1, service=service)\n    print(out)\n\nif serv is not None and form.getvalue('rows1') is not None:\n    rows = form.getvalue('rows1')\n    grep = form.getvalue('grep')\n    hour = form.getvalue('hour')\n    minut = form.getvalue('minut')\n    hour1 = form.getvalue('hour1')\n    minut1 = form.getvalue('minut1')\n    out = funct.show_haproxy_log(serv, rows=rows, waf='0', grep=grep, hour=hour, minut=minut, hour1=hour1,\n                                 minut1=minut1, service='apache_internal')\n    print(out)\n\nif form.getvalue('viewlogs') is not None:\n    viewlog = form.getvalue('viewlogs')\n    rows = form.getvalue('rows')\n    grep = form.getvalue('grep')\n    hour = form.getvalue('hour')\n    minut = form.getvalue('minut')\n    hour1 = form.getvalue('hour1')\n    minut1 = form.getvalue('minut1')\n    if funct.check_user_group():\n        out = funct.show_haproxy_log(serv=viewlog, rows=rows, waf='0', grep=grep, hour=hour, minut=minut, hour1=hour1,\n                                     minut1=minut1, service='internal')\n    print(out)\n\nif serv is not None and act == \"showMap\":\n    import networkx as nx\n    import matplotlib\n\n    matplotlib.use('Agg')\n    import matplotlib.pyplot as plt\n\n    stats_port = sql.get_setting('stats_port')\n    haproxy_config_path = sql.get_setting('haproxy_config_path')\n    hap_configs_dir = funct.get_config_var('configs', 'haproxy_save_configs_dir')\n    date = funct.get_data('config')\n    cfg = hap_configs_dir + serv + \"-\" + date + \".cfg\"\n\n    print('<center>')\n    print(\"<h4>Map from %s</h4><br />\" % serv)\n\n    error = funct.get_config(serv, cfg)\n    if error:\n        print(error)\n    try:\n        conf = open(cfg, \"r\")\n    except IOError:\n        print('error: Can\\'t read import config file')\n\n    G = nx.DiGraph()\n    node = \"\"\n    line_new2 = [1, \"\"]\n    sections = {'listens': dict(), 'backends': dict()}\n\n    for line in conf:\n        if line.startswith('listen') or line.startswith('frontend'):\n            if \"stats\" not in line:\n                node = line\n        if line.find(\"backend\") == 0:\n            node = line\n            node = node.split('\\n')[0]\n            sections['backends'][node] = {'servers': dict()}\n\n        if \"bind\" in line or (line.startswith('listen') and \":\" in line) or (\n                line.startswith('frontend') and \":\" in line):\n            try:\n                if \"@\" not in line:\n                    bind = line.split(\":\")\n                else:\n                    bind = line.split(\"@\")\n                if str(stats_port) not in bind[1]:\n                    bind[1] = bind[1].strip(' ')\n                    bind = bind[1].split(\"crt\")\n                    node = node.strip(' \\t\\n\\r')\n                    node = node + \":\" + bind[0]\n                    node = node.split('\\n')[0]\n                    sections['listens'][node] = {'servers': dict()}\n            except Exception:\n                pass\n\n        if \"server \" in line or \"use_backend\" in line or \"default_backend\" in line and \"stats\" not in line and \"#\" not in line:\n            if \"timeout\" not in line and \"default-server\" not in line and \"#\" not in line and \"stats\" not in line:\n                if \"check\" in line:\n                    line_new = line.split(\"check\")\n                else:\n                    line_new = line.split(\"if \")\n                if \"server\" in line:\n                    line_new1 = line_new[0].split(\"server\")\n                    line_new[0] = line_new1[1]\n                    line_new2 = line_new[0].split(\":\")\n                    line_new[0] = line_new2[0]\n\n                line_new[0] = line_new[0].strip(' \\t\\n\\r')\n\n                try:\n                    backend_server_port = line_new2[1].strip(' \\t\\n\\r')\n                    backend_server_port = 'port: ' + backend_server_port\n                except Exception:\n                    backend_server_port = ''\n\n                try:\n                    sections['listens'][node]['servers'][line_new[0]] = {line_new[0]: backend_server_port}\n                except Exception:\n                    pass\n\n                try:\n                    sections['backends'][node]['servers'][line_new[0]] = {line_new[0]: backend_server_port}\n                except Exception:\n                    pass\n\n    os.system(\"/bin/rm -f \" + cfg)\n\n    i, k, j = 0, 0, 0\n    backend_servers_len_dict = 1\n    backends_from_frontends = []\n    backends_servers = []\n\n    for key, val in sections.items():\n        if key == 'listens':\n            for k2, v2 in val.items():\n                i -= 750\n                G.add_node(k2, pos=(k, i), label_pos=(k, i + 250))\n\n                for k3, v3 in v2.items():\n                    for k4, v4 in v3.items():\n                        \"\"\" Add backend servers of listens or backend from frontends \"\"\"\n                        i -= 300\n                        j += 1\n                        server_name = k4\n\n                        if 'default_backend' in k4 or 'use_backend' in k4:\n                            backend_name = k4.split(' ')[1]\n                            backend_name = 'backend ' + backend_name\n                            k4 = backend_name\n                            backends_from_frontends.append(k4)\n\n                        if k4 not in backends_servers:\n                            if j % 2 == 0:\n                                G.add_node(k4, pos=(k + 250, i - 100), label_pos=(k + 250, i - 420))\n                            else:\n                                G.add_node(k4, pos=(k - 250, i - 370), label_pos=(k - 245, i - 650))\n\n                        if v4[server_name] != '':\n                            G.add_edge(k2, k4, port=v4[server_name])\n                        else:\n                            G.add_edge(k2, k4, port='')\n\n                    for k4, v4 in v3.items():\n                        \"\"\" Add servers from backends  \"\"\"\n                        i -= 300\n                        j -= 1\n\n                        if 'default_backend' in k4 or 'use_backend' in k4:\n                            backend_name = k4.split(' ')[1]\n                            backend_name = 'backend ' + backend_name\n                            k4 = backend_name\n                            backends_from_frontends.append(k4)\n\n                            if j % 2 == 0:\n                                if len(v3) % 2 == 0:\n                                    i += (700 * backend_servers_len_dict) + 700\n                                for k5, v5 in sections['backends'][k4]['servers'].items():\n                                    i -= 700\n                                    s = k + 400\n                                    G.add_node(k5, pos=(s + 250, i - 335), label_pos=(s + 215, i - 580))\n\n                                    if v5[k5] != '':\n                                        G.add_edge(k4, k5, port=v5[k5])\n                                    else:\n                                        G.add_edge(k4, k5, port='')\n\n                                    backends_servers.append(k5)\n                            else:\n                                for k5, v5 in sections['backends'][k4]['servers'].items():\n                                    i -= 700\n                                    s = k - 400\n                                    G.add_node(k5, pos=(s - 250, i - 0), label_pos=(s - 245, i - 270))\n\n                                    if v5[k5] != '':\n                                        G.add_edge(k4, k5, port=v5[k5])\n                                    else:\n                                        G.add_edge(k4, k5, port='')\n\n                                    backends_servers.append(k5)\n                                backend_servers_len_dict = len(sections['backends'][k4]['servers'])\n\n                        backends_servers.append(k4)\n\n        elif key == 'backends':\n            for k2, v2 in val.items():\n\n                if k2 not in backends_from_frontends:\n                    i -= 750\n                    G.add_node(k2, pos=(k, i), label_pos=(k, i + 250))\n\n                for k3, v3 in v2.items():\n                    for k4, v4 in v3.items():\n\n                        if k4 not in backends_servers:\n                            i -= 300\n                            j += 1\n\n                            if j % 2 == 0:\n                                s = k + 400\n                                G.add_node(k4, pos=(s + 250, i - 335), label_pos=(s + 215, i - 580))\n                            else:\n                                s = k - 400\n                                G.add_node(k4, pos=(s - 250, i - 0), label_pos=(s - 245, i - 270))\n\n                        if v4[k4] != '':\n                            G.add_edge(k2, k4, port=v4[k4])\n                        else:\n                            G.add_edge(k2, k4, port='')\n\n                        backends_servers.append(k4)\n\n    pos = nx.get_node_attributes(G, 'pos')\n    pos_label = nx.get_node_attributes(G, 'label_pos')\n    edge_labels = nx.get_edge_attributes(G, 'port')\n\n    try:\n        plt.figure(10, figsize=(10, 20))\n        nx.draw(G, pos, with_labels=False, font_weight='bold', width=3, alpha=0.1, linewidths=5)\n        nx.draw_networkx_nodes(G, pos, node_color=\"#5d9ceb\", node_size=100, alpha=0.8, node_shape=\"h\")\n        nx.draw_networkx_labels(G, pos=pos_label, alpha=1, font_color=\"#5CB85C\", font_size=10)\n        nx.draw_networkx_edges(G, pos, width=0.3, alpha=0.7, edge_color=\"#5D9CEB\", arrows=False)\n        nx.draw_networkx_edge_labels(G, pos, alpha=0.4, label_pos=0.5, font_color=\"#5d9ceb\", edge_labels=edge_labels, font_size=8)\n\n        plt.savefig(\"map.png\")\n        plt.show()\n    except Exception as e:\n        print(str(e))\n\n    cmd = \"rm -f \" + os.path.dirname(os.getcwd()) + \"/map*.png && mv map.png \" + os.path.dirname(\n        os.getcwd()) + \"/map\" + date + \".png\"\n    output, stderr = funct.subprocess_execute(cmd)\n    print(stderr)\n    print('<img src=\"/map%s.png\" alt=\"map\">' % date)\n\nif form.getvalue('servaction') is not None:\n    server_state_file = sql.get_setting('server_state_file')\n    haproxy_sock = sql.get_setting('haproxy_sock')\n    enable = form.getvalue('servaction')\n    backend = form.getvalue('servbackend')\n\n    if funct.checkAjaxInput(enable) or funct.checkAjaxInput(backend):\n        print('error: Nice try')\n        sys.exit()\n\n    cmd = 'echo \"{} {}\" |sudo socat stdio {}'.format(enable, backend, haproxy_sock)\n\n    if form.getvalue('save') == \"on\":\n        save_command = 'echo \"show servers state\" | sudo socat {} stdio > {}'.format(haproxy_sock, server_state_file)\n        command = [cmd + ';' + save_command]\n    else:\n        command = [cmd]\n\n    if enable != \"show\":\n        funct.logging(serv, 'Has been ' + enable + 'ed ' + backend, login=1, keep_history=1, service='haproxy')\n        print(\n            '<center><h3>You %s %s on HAProxy %s. <a href=\"viewsttats.py?serv=%s\" title=\"View stat\" target=\"_blank\">Look it</a> or <a href=\"runtimeapi.py\" title=\"Runtime API\">Edit something else</a></h3><br />' % (enable, backend, serv, serv))\n\n    print(funct.ssh_command(serv, command, show_log=\"1\"))\n    action = 'runtimeapi.py ' + enable + ' ' + backend\n    funct.logging(serv, action)\n\nif act == \"showCompareConfigs\":\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True)\n    template = env.get_template('ajax/show_compare_configs.html')\n    left = form.getvalue('left')\n    right = form.getvalue('right')\n    service = form.getvalue('service')\n\n    if service == 'nginx':\n        return_files = funct.get_files(funct.get_config_var('configs', 'nginx_save_configs_dir'), 'conf')\n    elif service == 'apache':\n        return_files = funct.get_files(funct.get_config_var('configs', 'apache_save_configs_dir'), 'conf')\n    elif service == 'keepalived':\n        return_files = funct.get_files(funct.get_config_var('configs', 'kp_save_configs_dir'), 'conf')\n    else:\n        return_files = funct.get_files()\n\n    template = template.render(serv=serv, right=right, left=left, return_files=return_files)\n    print(template)\n\nif serv is not None and form.getvalue('right') is not None:\n    from jinja2 import Environment, FileSystemLoader\n\n    left = form.getvalue('left')\n    right = form.getvalue('right')\n\n    if funct.checkAjaxInput(left) or funct.checkAjaxInput(right):\n        print('error: Nice try')\n        sys.exit()\n\n    if form.getvalue('service') == 'nginx':\n        configs_dir = funct.get_config_var('configs', 'nginx_save_configs_dir')\n    elif form.getvalue('service') == 'apache':\n        configs_dir = funct.get_config_var('configs', 'apache_save_configs_dir')\n    elif form.getvalue('service') == 'keepalived':\n        configs_dir = funct.get_config_var('configs', 'kp_save_configs_dir')\n    else:\n        configs_dir = funct.get_config_var('configs', 'haproxy_save_configs_dir')\n\n    cmd = 'diff -pub %s%s %s%s' % (configs_dir, left, configs_dir, right)\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True,\n                      extensions=[\"jinja2.ext.loopcontrols\", \"jinja2.ext.do\"])\n    template = env.get_template('ajax/compare.html')\n\n    output, stderr = funct.subprocess_execute(cmd)\n    template = template.render(stdout=output)\n\n    print(template)\n    print(stderr)\n\nif serv is not None and act == \"configShow\":\n    import http.cookies\n\n    cookie = http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\"))\n    user_uuid = cookie.get('uuid')\n    role_id = sql.get_user_role_by_uuid(user_uuid.value)\n    service = form.getvalue('service')\n    try:\n        config_file_name = form.getvalue('config_file_name').replace('/', '92')\n    except Exception:\n        config_file_name = ''\n\n    if service == 'keepalived':\n        configs_dir = funct.get_config_var('configs', 'kp_save_configs_dir')\n        cfg = '.conf'\n    elif service == 'nginx':\n        configs_dir = funct.get_config_var('configs', 'nginx_save_configs_dir')\n        cfg = '.conf'\n    elif service == 'apache':\n        configs_dir = funct.get_config_var('configs', 'apache_save_configs_dir')\n        cfg = '.conf'\n    else:\n        configs_dir = funct.get_config_var('configs', 'haproxy_save_configs_dir')\n        cfg = '.cfg'\n\n    if form.getvalue('configver') is None:\n        cfg = configs_dir + serv + \"-\" + funct.get_data('config') + cfg\n        if service == 'nginx':\n            funct.get_config(serv, cfg, nginx=1, config_file_name=form.getvalue('config_file_name'))\n        elif service == 'apache':\n            funct.get_config(serv, cfg, apache=1, config_file_name=form.getvalue('config_file_name'))\n        elif service == 'keepalived':\n            funct.get_config(serv, cfg, keepalived=1)\n        else:\n            funct.get_config(serv, cfg)\n    else:\n        cfg = configs_dir + form.getvalue('configver')\n    try:\n        conf = open(cfg, \"r\")\n    except IOError:\n        print('<div class=\"alert alert-danger\">Can\\'t read config file</div>')\n\n    is_serv_protected = sql.is_serv_protected(serv)\n\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True, trim_blocks=True, lstrip_blocks=True,\n                      extensions=[\"jinja2.ext.loopcontrols\", \"jinja2.ext.do\"])\n    template = env.get_template('config_show.html')\n\n    template = template.render(conf=conf,\n                               serv=serv,\n                               configver=form.getvalue('configver'),\n                               role=role_id,\n                               service=service,\n                               config_file_name=config_file_name,\n                               is_serv_protected=is_serv_protected)\n    print(template)\n\n    if form.getvalue('configver') is None:\n        os.system(\"/bin/rm -f \" + cfg)\n\nif act == 'configShowFiles':\n    service = form.getvalue('service')\n\n    config_dir = funct.get_config_var('configs', service + '_save_configs_dir')\n    service_config_dir = sql.get_setting(service + '_dir')\n    try:\n        config_file_name = form.getvalue('config_file_name').replace('92', '/')\n    except Exception:\n        config_file_name = ''\n    return_files = funct.get_remote_files(serv, service_config_dir, 'conf')\n    if 'error: ' in return_files:\n        print(return_files)\n        sys.exit()\n    return_files += ' ' + sql.get_setting(service + '_config_path')\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True)\n    template = env.get_template('ajax/show_configs_files.html')\n    template = template.render(serv=serv, service=service, return_files=return_files,\n                               config_file_name=config_file_name, path_dir=service_config_dir)\n    print(template)\n\nif act == 'showRemoteLogFiles':\n    service = form.getvalue('service')\n    log_path = sql.get_setting(service + '_path_logs')\n    return_files = funct.get_remote_files(serv, log_path, 'log')\n    if 'error: ' in return_files:\n        print(return_files)\n        sys.exit()\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True)\n    template = env.get_template('ajax/show_log_files.html')\n    template = template.render(serv=serv, return_files=return_files, path_dir=log_path)\n    print(template)\n\nif form.getvalue('master'):\n    master = form.getvalue('master')\n    slave = form.getvalue('slave')\n    ETH = form.getvalue('interface')\n    ETH_SLAVE = form.getvalue('slave_interface')\n    IP = form.getvalue('vrrpip')\n    syn_flood = form.getvalue('syn_flood')\n    virt_server = form.getvalue('virt_server')\n    return_to_master = form.getvalue('return_to_master')\n    haproxy = form.getvalue('hap')\n    nginx = form.getvalue('nginx')\n    router_id = form.getvalue('router_id')\n    script = \"install_keepalived.sh\"\n    proxy = sql.get_setting('proxy')\n    keepalived_path_logs = sql.get_setting('keepalived_path_logs')\n    ssh_port = 22\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path(master)\n\n    if ssh_enable == 0:\n        ssh_key_name = ''\n\n    servers = sql.select_servers(server=master)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv + \" SSH_PORT=\" + ssh_port + \" router_id=\" + router_id\n        + \" ETH=\" + ETH + \" IP=\" + str(IP) + \" MASTER=MASTER\" + \" ETH_SLAVE=\" + ETH_SLAVE + \" keepalived_path_logs=\" + keepalived_path_logs\n        + \" RETURN_TO_MASTER=\" + return_to_master + \" SYN_FLOOD=\" + syn_flood + \" HOST=\" + str(master)\n        + \" USER=\" + str(ssh_user_name) + \" PASS='\" + str(ssh_user_password) + \"' KEY=\" + str(ssh_key_name)\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    if funct.show_installation_output(error, output, 'master Keepalived'):\n        sql.update_keepalived(master)\n\n        if virt_server != '0':\n            group_id = sql.get_group_id_by_server_ip(master)\n            cred_id = sql.get_cred_id_by_server_ip(master)\n            hostname = sql.get_hostname_by_server_ip(master)\n            firewall = 1 if funct.is_service_active(master, 'firewalld') else 0\n            sql.add_server(\n                hostname + '-VIP', IP, group_id, '1', '1', '0', cred_id, ssh_port, 'VRRP IP for ' + master, haproxy, nginx, '0', firewall\n            )\n\nif form.getvalue('master_slave'):\n    master = form.getvalue('master_slave')\n    slave = form.getvalue('slave')\n    ETH = form.getvalue('interface')\n    ETH_SLAVE = form.getvalue('slave_interface')\n    IP = form.getvalue('vrrpip')\n    syn_flood = form.getvalue('syn_flood')\n    router_id = form.getvalue('router_id')\n    script = \"install_keepalived.sh\"\n    proxy = sql.get_setting('proxy')\n    keepalived_path_logs = sql.get_setting('keepalived_path_logs')\n    ssh_port = 22\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path(slave)\n\n    if ssh_enable == 0:\n        ssh_key_name = ''\n\n    servers = sql.select_servers(server=slave)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv + \" SSH_PORT=\" + ssh_port + \" router_id=\" + router_id\n        + \" ETH=\" + ETH + \" IP=\" + IP + \" MASTER=BACKUP\" + \" ETH_SLAVE=\" + ETH_SLAVE + \" keepalived_path_logs=\" + keepalived_path_logs\n        + \" HOST=\" + str(slave) + \" USER=\" + str(ssh_user_name) + \" PASS='\" + str(ssh_user_password)\n        + \"' KEY=\" + str(ssh_key_name)\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    funct.show_installation_output(error, output, 'slave Keepalived')\n\n    os.system(\"rm -f %s\" % script)\n    sql.update_server_master(master, slave)\n    sql.update_keepalived(slave)\n\nif form.getvalue('masteradd'):\n    master = form.getvalue('masteradd')\n    slave = form.getvalue('slaveadd')\n    ETH = form.getvalue('interfaceadd')\n    SLAVE_ETH = form.getvalue('slave_interfaceadd')\n    IP = form.getvalue('vrrpipadd')\n    router_id = form.getvalue('router_id')\n    kp = form.getvalue('kp')\n    return_to_master = form.getvalue('return_to_master')\n    script = \"install_keepalived.sh\"\n    proxy = sql.get_setting('proxy')\n    keepalived_path_logs = sql.get_setting('keepalived_path_logs')\n    ssh_port = 22\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path(master)\n\n    if ssh_enable == 0:\n        ssh_key_name = ''\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    servers = sql.select_servers(server=master)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv + \" SSH_PORT=\" + ssh_port + \" ETH=\" + ETH\n        + \" SLAVE_ETH=\" + SLAVE_ETH + \" keepalived_path_logs=\" + keepalived_path_logs + \" RETURN_TO_MASTER=\" + return_to_master\n        + \" IP=\" + str(IP) + \" MASTER=MASTER\" + \" RESTART=\" + kp + \" ADD_VRRP=1 HOST=\" + str(master) + \" router_id=\" + router_id\n        + \" USER=\" + str(ssh_user_name) + \" PASS='\" + str(ssh_user_password) + \"' KEY=\" + str(ssh_key_name)\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    funct.show_installation_output(error, output, 'master VRRP address')\n\nif form.getvalue('masteradd_slave'):\n    master = form.getvalue('masteradd_slave')\n    slave = form.getvalue('slaveadd')\n    ETH = form.getvalue('interfaceadd')\n    SLAVE_ETH = form.getvalue('slave_interfaceadd')\n    IP = form.getvalue('vrrpipadd')\n    router_id = form.getvalue('router_id')\n    kp = form.getvalue('kp')\n    script = \"install_keepalived.sh\"\n    proxy = sql.get_setting('proxy')\n    keepalived_path_logs = sql.get_setting('keepalived_path_logs')\n    ssh_port = 22\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path(slave)\n\n    if ssh_enable == 0:\n        ssh_key_name = ''\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    servers = sql.select_servers(server=slave)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv\n        + \" SSH_PORT=\" + ssh_port + \" ETH=\" + ETH + \" SLAVE_ETH=\" + SLAVE_ETH + \" keepalived_path_logs=\" + keepalived_path_logs\n        + \" IP=\" + str(IP) + \" MASTER=BACKUP\" + \" RESTART=\" + kp + \" ADD_VRRP=1 HOST=\" + str(slave) + \" router_id=\" + router_id\n        + \" USER=\" + str(ssh_user_name) + \" PASS='\" + str(ssh_user_password) + \"' KEY=\" + str(ssh_key_name)\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    funct.show_installation_output(error, output, 'slave VRRP address')\n\n    os.system(\"rm -f %s\" % script)\n\nif form.getvalue('master_slave_hap'):\n    master = form.getvalue('master_slave_hap')\n    slave = form.getvalue('slave')\n    server = form.getvalue('server')\n    docker = form.getvalue('docker')\n\n    if server == 'master':\n        funct.install_haproxy(master, server=server, docker=docker)\n    elif server == 'slave':\n        funct.install_haproxy(slave, server=server, docker=docker)\n\nif form.getvalue('master_slave_nginx'):\n    master = form.getvalue('master_slave_nginx')\n    slave = form.getvalue('slave')\n    server = form.getvalue('server')\n    docker = form.getvalue('docker')\n\n    if server == 'master':\n        funct.install_nginx(master, server=server, docker=docker)\n    elif server == 'slave':\n        funct.install_nginx(slave, server=server, docker=docker)\n\nif form.getvalue('install_grafana'):\n    script = \"install_grafana.sh\"\n    proxy = sql.get_setting('proxy')\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    commands = [\"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    if error:\n        funct.logging('localhost', error, haproxywi=1)\n        import socket\n\n        print(\n            'success: Grafana and Prometheus servers were installed. You can find Grafana on http://' + socket.gethostname() + ':3000<br>')\n    else:\n        for line in output:\n            if any(s in line for s in (\"Traceback\", \"FAILED\")):\n                try:\n                    print(line)\n                    break\n                except Exception:\n                    print(output)\n                    break\n        else:\n            import socket\n\n            print(\n                'success: Grafana and Prometheus servers were installed. You can find Grafana on http://' + socket.gethostname() + ':3000<br>')\n\n    os.system(\"rm -f %s\" % script)\n\nif form.getvalue('haproxy_exp_install'):\n    serv = form.getvalue('haproxy_exp_install')\n    ver = form.getvalue('exporter_v')\n    ext_prom = form.getvalue('ext_prom')\n    script = \"install_haproxy_exporter.sh\"\n    stats_port = sql.get_setting('stats_port')\n    server_state_file = sql.get_setting('server_state_file')\n    stats_user = sql.get_setting('stats_user')\n    stats_password = sql.get_setting('stats_password')\n    stat_page = sql.get_setting('stats_page')\n    proxy = sql.get_setting('proxy')\n    ssh_port = 22\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path(serv)\n\n    if ssh_enable == 0:\n        ssh_key_name = ''\n\n    servers = sql.select_servers(server=serv)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv\n        + \" STAT_PORT=\" + str(stats_port) + \" STAT_FILE=\" + server_state_file\n        + \" SSH_PORT=\" + ssh_port + \" STAT_PAGE=\" + stat_page + \" VER=\" + ver + \" EXP_PROM=\" + ext_prom\n        + \" STATS_USER=\" + stats_user + \" STATS_PASS='\" + stats_password + \"' HOST=\" + serv\n        + \" USER=\" + ssh_user_name + \" PASS='\" + ssh_user_password + \"' KEY=\" + ssh_key_name\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    funct.show_installation_output(error, output, 'HAProxy exporter')\n\n    os.system(\"rm -f %s\" % script)\n\nif form.getvalue('nginx_exp_install'):\n    serv = form.getvalue('nginx_exp_install')\n    ver = form.getvalue('exporter_v')\n    ext_prom = form.getvalue('ext_prom')\n    script = \"install_nginx_exporter.sh\"\n    stats_user = sql.get_setting('nginx_stats_user')\n    stats_password = sql.get_setting('nginx_stats_password')\n    stats_port = sql.get_setting('nginx_stats_port')\n    stats_page = sql.get_setting('nginx_stats_page')\n    proxy = sql.get_setting('proxy')\n    ssh_port = 22\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path(serv)\n\n    if ssh_enable == 0:\n        ssh_key_name = ''\n\n    servers = sql.select_servers(server=serv)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv\n        + \" STAT_PORT=\" + str(stats_port) + \" SSH_PORT=\" + ssh_port + \" STAT_PAGE=\" + stats_page\n        + \" STATS_USER=\" + stats_user + \" STATS_PASS='\" + stats_password + \"' HOST=\" + serv + \" VER=\" + ver\n        + \" EXP_PROM=\" + ext_prom + \" USER=\" + ssh_user_name + \" PASS='\" + ssh_user_password + \"' KEY=\" + ssh_key_name\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    funct.show_installation_output(error, output, 'Nginx exporter')\n\n    os.system(\"rm -f %s\" % script)\n\nif form.getvalue('node_exp_install'):\n    serv = form.getvalue('node_exp_install')\n    ver = form.getvalue('exporter_v')\n    ext_prom = form.getvalue('ext_prom')\n    script = \"install_node_exporter.sh\"\n    proxy = sql.get_setting('proxy')\n    ssh_port = 22\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path(serv)\n\n    if ssh_enable == 0:\n        ssh_key_name = ''\n\n    servers = sql.select_servers(server=serv)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv + \" SSH_PORT=\" + ssh_port\n        + \" VER=\" + ver + \" EXP_PROM=\" + ext_prom + \" HOST=\" + serv + \" USER=\" + ssh_user_name\n        + \" PASS='\" + ssh_user_password + \"' KEY=\" + ssh_key_name\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    funct.show_installation_output(error, output, 'Node exporter')\n\n    os.system(\"rm -f %s\" % script)\n\nif form.getvalue('backup') or form.getvalue('deljob') or form.getvalue('backupupdate'):\n    serv = form.getvalue('server')\n    rpath = form.getvalue('rpath')\n    time = form.getvalue('time')\n    backup_type = form.getvalue('type')\n    rserver = form.getvalue('rserver')\n    cred = form.getvalue('cred')\n    deljob = form.getvalue('deljob')\n    update = form.getvalue('backupupdate')\n    description = form.getvalue('description')\n    script = 'backup.sh'\n    ssh_port = 22\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path('localhost', id=int(cred))\n\n    if deljob:\n        time = ''\n        rpath = ''\n        backup_type = ''\n    elif update:\n        deljob = ''\n    else:\n        deljob = ''\n        if sql.check_exists_backup(serv):\n            print('warning: Backup job for %s already exists' % serv)\n            sys.exit()\n\n    servers = sql.select_servers(server=serv)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \"  HOST=\" + rserver + \"  SERVER=\" + serv\n        + \" TYPE=\" + backup_type + \" SSH_PORT=\" + ssh_port + \" TIME=\" + time\n        + \" RPATH=\" + rpath + \" DELJOB=\" + deljob + \" USER=\" + str(ssh_user_name) + \" KEY=\" + str(ssh_key_name)\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    for line in output:\n        if any(s in line for s in (\"Traceback\", \"FAILED\")):\n            try:\n                print('error: ' + line)\n                break\n            except Exception:\n                print('error: ' + output)\n                break\n    else:\n        if not deljob and not update:\n            if sql.insert_backup_job(serv, rserver, rpath, backup_type, time, cred, description):\n                from jinja2 import Environment, FileSystemLoader\n\n                env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n                template = env.get_template('new_backup.html')\n                template = template.render(\n                    backups=sql.select_backups(server=serv, rserver=rserver), sshs=sql.select_ssh()\n                )\n                print(template)\n                print('success: Backup job has been created')\n                funct.logging('backup ', ' a new backup job for server ' + serv + ' has been created', haproxywi=1, login=1)\n            else:\n                print('error: Cannot add the job into DB')\n        elif deljob:\n            sql.delete_backups(deljob)\n            print('Ok')\n            funct.logging('backup ', ' a backup job for server ' + serv + ' has been deleted', haproxywi=1, login=1)\n        elif update:\n            sql.update_backup(serv, rserver, rpath, backup_type, time, cred, description, update)\n            print('Ok')\n            funct.logging('backup ', ' a backup job for server ' + serv + ' has been updated', haproxywi=1, login=1)\n\nif form.getvalue('git_backup'):\n    server_id = form.getvalue('server')\n    service_id = form.getvalue('git_service')\n    git_init = form.getvalue('git_init')\n    repo = form.getvalue('git_repo')\n    branch = form.getvalue('git_branch')\n    period = form.getvalue('time')\n    cred = form.getvalue('cred')\n    deljob = form.getvalue('git_deljob')\n    description = form.getvalue('description')\n    servers = sql.get_dick_permit()\n    proxy = sql.get_setting('proxy')\n    services = sql.select_services()\n    server_ip = sql.select_server_ip_by_id(server_id)\n    service_name = sql.select_service_name_by_id(service_id).lower()\n    service_config_dir = sql.get_setting(service_name + '_dir')\n    script = 'git_backup.sh'\n    ssh_port = 22\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path('localhost', id=int(cred))\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    servers = sql.select_servers(server=server_ip)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    if repo is None or git_init == '0':\n        repo = ''\n    if branch is None or branch == '0':\n        branch = 'main'\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" HOST=\" + server_ip + \" DELJOB=\" + deljob\n        + \" SERVICE=\" + service_name + \" INIT=\" + git_init + \" SSH_PORT=\" + ssh_port + \" PERIOD=\" + period\n        + \" REPO=\" + repo + \" BRANCH=\" + branch + \" CONFIG_DIR=\" + service_config_dir\n        + \" PROXY=\" + proxy_serv + \" USER=\" + str(ssh_user_name) + \" KEY=\" + str(ssh_key_name)\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    for line in output:\n        if any(s in line for s in (\"Traceback\", \"FAILED\")):\n            try:\n                print('error: ' + line)\n                break\n            except Exception:\n                print('error: ' + output)\n                break\n    else:\n        if deljob == '0':\n            if sql.insert_new_git(\n                server_id=server_id, service_id=service_id, repo=repo, branch=branch,\n                period=period, cred=cred, description=description\n            ):\n                from jinja2 import Environment, FileSystemLoader\n\n                gits = sql.select_gits(server_id=server_id, service_id=service_id)\n                sshs = sql.select_ssh()\n\n                env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n                template = env.get_template('new_git.html')\n                template = template.render(gits=gits, sshs=sshs, servers=servers, services=services, new_add=1)\n                print(template)\n                print('success: Git job has been created')\n                funct.logging(\n                    server_ip, ' A new git job has been created', haproxywi=1, login=1,\n                    keep_history=1, service=service_name\n                )\n        else:\n            if sql.delete_git(form.getvalue('git_backup')):\n                print('Ok')\n        os.system(\"rm -f %s\" % script)\n\nif form.getvalue('install_nginx'):\n    funct.install_nginx(form.getvalue('install_nginx'), docker=form.getvalue('docker'))\n\nif form.getvalue('haproxyaddserv'):\n    funct.install_haproxy(form.getvalue('haproxyaddserv'), syn_flood=form.getvalue('syn_flood'),\n                          hapver=form.getvalue('hapver'), docker=form.getvalue('docker'))\n\nif form.getvalue('installwaf'):\n    funct.waf_install(form.getvalue('installwaf'))\n\nif form.getvalue('update_roxy_wi'):\n    service = form.getvalue('service')\n    services = ['roxy-wi-checker',\n                'roxy-wi',\n                'roxy-wi-keep_alive',\n                'roxy-wi-smon',\n                'roxy-wi-metrics',\n                'roxy-wi-portscanner',\n                'roxy-wi-socket']\n    if service not in services:\n        print('error: ' + service + ' is not part of Roxy-WI')\n        sys.exit()\n    funct.update_roxy_wi(service)\n\nif form.getvalue('metrics_waf'):\n    sql.update_waf_metrics_enable(form.getvalue('metrics_waf'), form.getvalue('enable'))\n\nif form.getvalue('table_metrics'):\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n    template = env.get_template('table_metrics.html')\n\n    template = template.render(table_stat=sql.select_table_metrics())\n    print(template)\n\nif form.getvalue('metrics_hapwi_ram'):\n    ip = form.getvalue('ip')\n    metrics = {'chartData': {}}\n    rams = ''\n\n    if ip == '1':\n        cmd = \"free -m |grep Mem |awk '{print $2,$3,$4,$5,$6,$7}'\"\n        metric, error = funct.subprocess_execute(cmd)\n    else:\n        commands = [\"free -m |grep Mem |awk '{print $2,$3,$4,$5,$6,$7}'\"]\n        metric, error = funct.subprocess_execute(commands[0])\n\n    for i in metric:\n        rams = i\n\n    metrics['chartData']['rams'] = rams\n\n    import json\n\n    print(json.dumps(metrics))\n\nif form.getvalue('metrics_hapwi_cpu'):\n    ip = form.getvalue('ip')\n    metrics = {'chartData': {}}\n    cpus = ''\n\n    if ip == '1':\n        cmd = \"top -b -n 1 |grep Cpu |awk -F':' '{print $2}'|awk  -F' ' 'BEGIN{ORS=\\\" \\\";} { for (i=1;i<=NF;i+=2) print $i}'\"\n        metric, error = funct.subprocess_execute(cmd)\n    else:\n        commands = [\n            \"top -b -n 1 |grep Cpu |awk -F':' '{print $2}'|awk  -F' ' 'BEGIN{ORS=\\\" \\\";} { for (i=1;i<=NF;i+=2) print $i}'\"]\n        metric, error = funct.subprocess_execute(commands[0])\n\n    for i in metric:\n        cpus = i\n\n    metrics['chartData']['cpus'] = cpus\n\n    import json\n\n    print(json.dumps(metrics))\n\nif form.getvalue('new_metrics'):\n    serv = form.getvalue('server')\n    hostname = sql.get_hostname_by_server_ip(serv)\n    time_range = form.getvalue('time_range')\n    metric = sql.select_metrics(serv, time_range=time_range)\n    metrics = {'chartData': {}}\n    metrics['chartData']['labels'] = {}\n    labels = ''\n    curr_con = ''\n    curr_ssl_con = ''\n    sess_rate = ''\n    server = ''\n\n    for i in metric:\n        label = str(i[5])\n        label = label.split(' ')[1]\n        labels += label + ','\n        curr_con += str(i[1]) + ','\n        curr_ssl_con += str(i[2]) + ','\n        sess_rate += str(i[3]) + ','\n        server = str(i[0])\n\n    metrics['chartData']['labels'] = labels\n    metrics['chartData']['curr_con'] = curr_con\n    metrics['chartData']['curr_ssl_con'] = curr_ssl_con\n    metrics['chartData']['sess_rate'] = sess_rate\n    metrics['chartData']['server'] = hostname + ' (' + server + ')'\n\n    import json\n\n    print(json.dumps(metrics))\n\nif form.getvalue('new_http_metrics'):\n    serv = form.getvalue('server')\n    hostname = sql.get_hostname_by_server_ip(serv)\n    time_range = form.getvalue('time_range')\n    metric = sql.select_metrics_http(serv, time_range=time_range)\n    metrics = {'chartData': {}}\n    metrics['chartData']['labels'] = {}\n    labels = ''\n    http_2xx = ''\n    http_3xx = ''\n    http_4xx = ''\n    http_5xx = ''\n    server = ''\n\n    for i in metric:\n        label = str(i[5])\n        label = label.split(' ')[1]\n        labels += label + ','\n        http_2xx += str(i[1]) + ','\n        http_3xx += str(i[2]) + ','\n        http_4xx += str(i[3]) + ','\n        http_5xx += str(i[4]) + ','\n        server = str(i[0])\n\n    metrics['chartData']['labels'] = labels\n    metrics['chartData']['http_2xx'] = http_2xx\n    metrics['chartData']['http_3xx'] = http_3xx\n    metrics['chartData']['http_4xx'] = http_4xx\n    metrics['chartData']['http_5xx'] = http_5xx\n    metrics['chartData']['server'] = hostname + ' (' + server + ')'\n\n    import json\n\n    print(json.dumps(metrics))\n\nif any((form.getvalue('new_nginx_metrics'), form.getvalue('new_apache_metrics'), form.getvalue('new_waf_metrics'))):\n    serv = form.getvalue('server')\n    hostname = sql.get_hostname_by_server_ip(serv)\n    time_range = form.getvalue('time_range')\n    if form.getvalue('new_nginx_metrics'):\n        metric = sql.select_nginx_metrics(serv, time_range=time_range)\n    elif form.getvalue('new_apache_metrics'):\n        metric = sql.select_apache_metrics(serv, time_range=time_range)\n    elif form.getvalue('new_waf_metrics'):\n        metric = sql.select_waf_metrics(serv, time_range=time_range)\n    metrics = {'chartData': {}}\n    metrics['chartData']['labels'] = {}\n    labels = ''\n    curr_con = ''\n\n    for i in metric:\n        label = str(i[2])\n        label = label.split(' ')[1]\n        labels += label + ','\n        curr_con += str(i[1]) + ','\n\n    metrics['chartData']['labels'] = labels\n    metrics['chartData']['curr_con'] = curr_con\n    metrics['chartData']['server'] = hostname + ' (' + serv + ')'\n\n    import json\n\n    print(json.dumps(metrics))\n\nif form.getvalue('get_hap_v'):\n    output = funct.check_haproxy_version(serv)\n    print(output)\n\nif form.getvalue('get_nginx_v'):\n    server_id = sql.select_server_id_by_ip(serv)\n    is_dockerized = sql.select_service_setting(server_id, 'nginx', 'dockerized')\n\n    if is_dockerized == '1':\n        container_name = sql.get_setting('nginx_container_name')\n        cmd = [\"docker exec -it \" + container_name + \"  /usr/sbin/nginx -v 2>&1|awk '{print $3}'\"]\n    else:\n        cmd = ['sudo /usr/sbin/nginx -v']\n    print(funct.ssh_command(serv, cmd))\n\nif form.getvalue('get_keepalived_v'):\n    cmd = [\"sudo /usr/sbin/keepalived -v 2>&1|head -1|awk '{print $2}'\"]\n    print(funct.ssh_command(serv, cmd))\n\nif form.getvalue('get_exporter_v'):\n    print(funct.get_service_version(serv, form.getvalue('get_exporter_v')))\n\nif form.getvalue('bwlists'):\n    lib_path = funct.get_config_var('main', 'lib_path')\n    list_path = lib_path + \"/\" + sql.get_setting('lists_path') + \"/\" + form.getvalue('group') + \"/\" + form.getvalue('color') + \"/\" + form.getvalue('bwlists')\n    try:\n        file = open(list_path, \"r\")\n        file_read = file.read()\n        file.close()\n        print(file_read)\n    except IOError:\n        print('error: Cat\\'n read ' + form.getvalue('color') + ' list , ')\n\nif form.getvalue('bwlists_create'):\n    color = form.getvalue('color')\n    lib_path = funct.get_config_var('main', 'lib_path')\n    list_name = form.getvalue('bwlists_create').split('.')[0]\n    list_name += '.lst'\n    list_path = lib_path + \"/\" + sql.get_setting('lists_path') + \"/\" + form.getvalue('group') + \"/\" + color + \"/\" + list_name\n    try:\n        open(list_path, 'a').close()\n        print('success: ')\n        try:\n            funct.logging(serv, 'has been created  ' + color + ' list ' + list_name, haproxywi=1, login=1)\n        except Exception:\n            pass\n    except IOError as e:\n        print('error: Cannot create new ' + color + ' list. %s , ' % e)\n\nif form.getvalue('bwlists_save'):\n    color = form.getvalue('color')\n    bwlists_save = form.getvalue('bwlists_save')\n    lib_path = funct.get_config_var('main', 'lib_path')\n    list_path = lib_path + \"/\" + sql.get_setting('lists_path') + \"/\" + form.getvalue('group') + \"/\" + color + \"/\" + bwlists_save\n    try:\n        with open(list_path, \"w\") as file:\n            file.write(form.getvalue('bwlists_content'))\n    except IOError as e:\n        print('error: Cannot save ' + color + ' list. %s , ' % e)\n\n    path = sql.get_setting('haproxy_dir') + \"/\" + color\n    servers = []\n\n    if serv != 'all':\n        servers.append(serv)\n\n        MASTERS = sql.is_master(serv)\n        for master in MASTERS:\n            if master[0] is not None:\n                servers.append(master[0])\n    else:\n        server = sql.get_dick_permit()\n        for s in server:\n            servers.append(s[2])\n\n    for serv in servers:\n        funct.ssh_command(serv, [\"sudo mkdir \" + path])\n        funct.ssh_command(serv, [\"sudo chown $(whoami) \" + path])\n        error = funct.upload(serv, path + \"/\" + bwlists_save, list_path, dir='fullpath')\n\n        if error:\n            print('error: Upload fail: %s , ' % error)\n        else:\n            print('success: Edited ' + color + ' list was uploaded to ' + serv + ' , ')\n            try:\n                funct.logging(serv, 'has been edited the ' + color + ' list ' + bwlists_save, haproxywi=1, login=1)\n            except Exception:\n                pass\n\n            server_id = sql.select_server_id_by_ip(server_ip=serv)\n            haproxy_enterprise = sql.select_service_setting(server_id, 'haproxy', 'haproxy_enterprise')\n            if haproxy_enterprise == '1':\n                haproxy_service_name = \"hapee-2.0-lb\"\n            else:\n                haproxy_service_name = \"haproxy\"\n\n            if form.getvalue('bwlists_restart') == 'restart':\n                funct.ssh_command(serv, [\"sudo systemctl restart \" + haproxy_service_name])\n            elif form.getvalue('bwlists_restart') == 'reload':\n                funct.ssh_command(serv, [\"sudo systemctl reload \" + haproxy_service_name])\n\nif form.getvalue('bwlists_delete'):\n    color = form.getvalue('color')\n    bwlists_delete = form.getvalue('bwlists_delete')\n    lib_path = funct.get_config_var('main', 'lib_path')\n    list_path = lib_path + \"/\" + sql.get_setting('lists_path') + \"/\" + form.getvalue('group') + \"/\" + color + \"/\" + bwlists_delete\n    try:\n        os.remove(list_path)\n    except IOError as e:\n        print('error: Cannot delete ' + color + ' list. %s , ' % e)\n\n    path = sql.get_setting('haproxy_dir') + \"/\" + color\n    servers = []\n\n    if serv != 'all':\n        servers.append(serv)\n\n        MASTERS = sql.is_master(serv)\n        for master in MASTERS:\n            if master[0] is not None:\n                servers.append(master[0])\n    else:\n        server = sql.get_dick_permit()\n        for s in server:\n            servers.append(s[2])\n\n    for serv in servers:\n        error = funct.ssh_command(serv, [\"sudo rm \" + path + \"/\" + bwlists_delete], return_err=1)\n\n        if error:\n            print('error: Deleting fail: %s , ' % error)\n        else:\n            print('success: the ' + color + ' list has been deleted on ' + serv + ' , ')\n            try:\n                funct.logging(serv, 'has been deleted the ' + color + ' list ' + bwlists_delete, haproxywi=1, login=1)\n            except Exception:\n                pass\n\nif form.getvalue('get_lists'):\n    lib_path = funct.get_config_var('main', 'lib_path')\n    list_path = lib_path + \"/\" + sql.get_setting('lists_path') + \"/\" + form.getvalue('group') + \"/\" + form.getvalue('color')\n    lists = funct.get_files(dir=list_path, format=\"lst\")\n    for list in lists:\n        print(list)\n\nif form.getvalue('get_ldap_email'):\n    username = form.getvalue('get_ldap_email')\n    import ldap\n\n    server = sql.get_setting('ldap_server')\n    port = sql.get_setting('ldap_port')\n    user = sql.get_setting('ldap_user')\n    password = sql.get_setting('ldap_password')\n    ldap_base = sql.get_setting('ldap_base')\n    domain = sql.get_setting('ldap_domain')\n    ldap_search_field = sql.get_setting('ldap_search_field')\n    ldap_class_search = sql.get_setting('ldap_class_search')\n    ldap_user_attribute = sql.get_setting('ldap_user_attribute')\n    ldap_type = sql.get_setting('ldap_type')\n\n    ldap_proto = 'ldap' if ldap_type == \"0\" else 'ldaps'\n\n    ldap_bind = ldap.initialize('{}://{}:{}/'.format(ldap_proto, server, port))\n\n    try:\n        ldap_bind.protocol_version = ldap.VERSION3\n        ldap_bind.set_option(ldap.OPT_REFERRALS, 0)\n\n        bind = ldap_bind.simple_bind_s(user, password)\n\n        criteria = \"(&(objectClass=\" + ldap_class_search + \")(\" + ldap_user_attribute + \"=\" + username + \"))\"\n        attributes = [ldap_search_field]\n        result = ldap_bind.search_s(ldap_base, ldap.SCOPE_SUBTREE, criteria, attributes)\n\n        results = [entry for dn, entry in result if isinstance(entry, dict)]\n        try:\n            print('[\"' + results[0][ldap_search_field][0].decode(\"utf-8\") + '\",\"' + domain + '\"]')\n        except Exception:\n            print('error: user not found')\n    finally:\n        ldap_bind.unbind()\n\nif form.getvalue('change_waf_mode'):\n    waf_mode = form.getvalue('change_waf_mode')\n    server_hostname = form.getvalue('server_hostname')\n    haproxy_dir = sql.get_setting('haproxy_dir')\n    serv = sql.select_server_by_name(server_hostname)\n    commands = [\"sudo sed -i 's/^SecRuleEngine.*/SecRuleEngine %s/' %s/waf/modsecurity.conf \" % (waf_mode, haproxy_dir)]\n    funct.ssh_command(serv, commands)\n    funct.logging(serv, 'Has been changed WAF mod to ' + waf_mode, haproxywi=1, login=1)\n\nerror_mess = 'error: All fields must be completed'\n\nif form.getvalue('newuser') is not None:\n    email = form.getvalue('newemail')\n    password = form.getvalue('newpassword')\n    role = form.getvalue('newrole')\n    new_user = form.getvalue('newusername')\n    page = form.getvalue('page')\n    activeuser = form.getvalue('activeuser')\n    group = form.getvalue('newgroupuser')\n    role_id = sql.get_role_id_by_name(role)\n\n    if funct.check_user_group():\n        if funct.is_admin(level=role_id):\n            if sql.add_user(new_user, email, password, role, activeuser, group):\n                from jinja2 import Environment, FileSystemLoader\n\n                env = Environment(loader=FileSystemLoader('templates/'), autoescape=True)\n                template = env.get_template('ajax/new_user.html')\n\n                template = template.render(users=sql.select_users(user=new_user),\n                                           groups=sql.select_groups(),\n                                           page=page,\n                                           roles=sql.select_roles(),\n                                           adding=1)\n                print(template)\n                funct.logging('a new user ' + new_user, ' has been created ', haproxywi=1, login=1)\n        else:\n            print('error: dalsdm')\n            funct.logging(new_user, ' tried to privilege escalation', haproxywi=1, login=1)\n\nif form.getvalue('userdel') is not None:\n    userdel = form.getvalue('userdel')\n    user = sql.select_users(id=userdel)\n    username = ''\n    for u in user:\n        username = u.username\n    if sql.delete_user(userdel):\n        sql.delete_user_groups(userdel)\n        funct.logging(username, ' has been deleted user ', haproxywi=1, login=1)\n        print(\"Ok\")\n\nif form.getvalue('updateuser') is not None:\n    email = form.getvalue('email')\n    role = form.getvalue('role')\n    new_user = form.getvalue('updateuser')\n    user_id = form.getvalue('id')\n    activeuser = form.getvalue('activeuser')\n    group = form.getvalue('usergroup')\n    role_id = sql.get_role_id_by_name(role)\n\n    if funct.check_user_group():\n        if funct.is_admin(level=role_id):\n            sql.update_user(new_user, email, role, user_id, activeuser)\n            funct.logging(new_user, ' has been updated user ', haproxywi=1, login=1)\n        else:\n            funct.logging(new_user, ' tried to privilege escalation', haproxywi=1, login=1)\n\nif form.getvalue('updatepassowrd') is not None:\n    password = form.getvalue('updatepassowrd')\n    if form.getvalue('uuid'):\n        user_id = sql.get_user_id_by_uuid(form.getvalue('uuid'))\n    else:\n        user_id = form.getvalue('id')\n    user = sql.select_users(id=user_id)\n    for u in user:\n        username = u.username\n    sql.update_user_password(password, user_id)\n    funct.logging('user ' + username, ' has changed password ', haproxywi=1, login=1)\n    print(\"Ok\")\n\nif form.getvalue('newserver') is not None:\n    hostname = form.getvalue('servername')\n    ip = form.getvalue('newip')\n    ip = funct.is_ip_or_dns(ip)\n    group = form.getvalue('newservergroup')\n    scan_server = form.getvalue('scan_server')\n    typeip = form.getvalue('typeip')\n    haproxy = form.getvalue('haproxy')\n    nginx = form.getvalue('nginx')\n    apache = form.getvalue('apache')\n    firewall = form.getvalue('firewall')\n    enable = form.getvalue('enable')\n    master = form.getvalue('slave')\n    cred = form.getvalue('cred')\n    page = form.getvalue('page')\n    page = page.split(\"#\")[0]\n    port = form.getvalue('newport')\n    desc = form.getvalue('desc')\n\n    if ip == '':\n        print('error: IP or DNS name is not valid')\n        sys.exit()\n\n    if sql.add_server(hostname, ip, group, typeip, enable, master, cred, port, desc, haproxy, nginx, apache, firewall):\n\n        try:\n            if scan_server == '1':\n                nginx_config_path = sql.get_setting('nginx_config_path')\n                haproxy_config_path = sql.get_setting('haproxy_config_path')\n                haproxy_dir = sql.get_setting('haproxy_dir')\n                apache_config_path = sql.get_setting('apache_config_path')\n                keepalived_config_path = sql.get_setting('keepalived_config_path')\n\n                if funct.is_file_exists(ip, nginx_config_path):\n                    sql.update_nginx(ip)\n\n                if funct.is_file_exists(ip, haproxy_config_path):\n                    sql.update_haproxy(ip)\n\n                if funct.is_file_exists(ip, keepalived_config_path):\n                    sql.update_keepalived(ip)\n\n                if funct.is_file_exists(ip, apache_config_path):\n                    sql.update_apache(ip)\n\n                if funct.is_file_exists(ip, haproxy_dir + '/waf/bin/modsecurity'):\n                    sql.insert_waf_metrics_enable(ip, \"0\")\n                    sql.insert_waf_rules(ip)\n\n                if funct.is_service_active(ip, 'firewalld'):\n                    sql.update_firewall(ip)\n        except Exception as e:\n            funct.logging('Cannot scan a new server ' + hostname, str(e), haproxywi=1)\n\n        try:\n            sql.insert_new_checker_setting_for_server(ip)\n        except Exception as e:\n            funct.logging('Cannot insert Checker settings for ' + hostname, str(e), haproxywi=1)\n\n        try:\n            funct.get_system_info(ip)\n        except Exception as e:\n            funct.logging('Cannot get information from ' + hostname, str(e), haproxywi=1, login=1)\n\n        try:\n            user_status, user_plan = funct.return_user_status()\n        except Exception as e:\n            user_status, user_plan = 0, 0\n            funct.logging('localhost', 'Cannot get a user plan: ' + str(e), haproxywi=1)\n\n        from jinja2 import Environment, FileSystemLoader\n\n        env = Environment(loader=FileSystemLoader('templates/'), autoescape=True)\n        template = env.get_template('ajax/new_server.html')\n\n        template = template.render(groups=sql.select_groups(),\n                                   servers=sql.select_servers(server=ip),\n                                   masters=sql.select_servers(get_master_servers=1),\n                                   sshs=sql.select_ssh(group=group),\n                                   page=page,\n                                   user_status=user_status,\n                                   user_plan=user_plan,\n                                   adding=1)\n        print(template)\n        funct.logging(ip, 'A new server ' + hostname + ' has been created', haproxywi=1, login=1,\n                      keep_history=1, service='server')\n\nif form.getvalue('updatehapwiserver') is not None:\n    hapwi_id = form.getvalue('updatehapwiserver')\n    active = form.getvalue('active')\n    name = form.getvalue('name')\n    alert = form.getvalue('alert_en')\n    metrics = form.getvalue('metrics')\n    service = form.getvalue('service_name')\n    sql.update_hapwi_server(hapwi_id, alert, metrics, active, service)\n    server_ip = sql.select_server_ip_by_id(hapwi_id)\n    funct.logging(server_ip, 'The server ' + name + ' has been updated ', haproxywi=1, login=1, keep_history=1, service=service)\n\nif form.getvalue('updateserver') is not None:\n    name = form.getvalue('updateserver')\n    group = form.getvalue('servergroup')\n    typeip = form.getvalue('typeip')\n    haproxy = form.getvalue('haproxy')\n    nginx = form.getvalue('nginx')\n    apache = form.getvalue('apache')\n    firewall = form.getvalue('firewall')\n    enable = form.getvalue('enable')\n    master = form.getvalue('slave')\n    serv_id = form.getvalue('id')\n    cred = form.getvalue('cred')\n    port = form.getvalue('port')\n    protected = form.getvalue('protected')\n    desc = form.getvalue('desc')\n\n    if name is None or port is None:\n        print(error_mess)\n    else:\n        sql.update_server(name, group, typeip, enable, master, serv_id, cred, port, desc, haproxy, nginx, apache, firewall, protected)\n        funct.logging('the server ' + name, ' has been updated ', haproxywi=1, login=1)\n        server_ip = sql.select_server_ip_by_id(serv_id)\n        funct.logging(server_ip, 'The server ' + name + ' has been update', haproxywi=1, login=1,\n                      keep_history=1, service='server')\n\nif form.getvalue('serverdel') is not None:\n    server_id = form.getvalue('serverdel')\n    server = sql.select_servers(id=server_id)\n    server_ip = ''\n    for s in server:\n        hostname = s[1]\n        server_ip = s[2]\n    if sql.check_exists_backup(server_ip):\n        print('warning: Delete the backup first ')\n        sys.exit()\n    if sql.delete_server(server_id):\n        sql.delete_waf_server(server_id)\n        sql.delete_port_scanner_settings(server_id)\n        sql.delete_waf_rules(server_ip)\n        sql.delete_action_history(server_id)\n        sql.delete_system_info(server_id)\n        sql.delete_service_settings(server_id)\n        print(\"Ok\")\n        funct.logging(server_ip, 'The server ' + hostname + ' has been deleted', haproxywi=1, login=1)\n\nif form.getvalue('newgroup') is not None:\n    newgroup = form.getvalue('groupname')\n    desc = form.getvalue('newdesc')\n    if newgroup is None:\n        print(error_mess)\n    else:\n        if sql.add_group(newgroup, desc):\n            from jinja2 import Environment, FileSystemLoader\n\n            env = Environment(loader=FileSystemLoader('templates/ajax/'), autoescape=True)\n            template = env.get_template('/new_group.html')\n\n            output_from_parsed_template = template.render(groups=sql.select_groups(group=newgroup))\n            print(output_from_parsed_template)\n            funct.logging('localhost', 'A new group ' + newgroup + ' has been created', haproxywi=1, login=1)\n\nif form.getvalue('groupdel') is not None:\n    groupdel = form.getvalue('groupdel')\n    group = sql.select_groups(id=groupdel)\n    for g in group:\n        groupname = g.name\n    if sql.delete_group(groupdel):\n        print(\"Ok\")\n        funct.logging('localhost', 'The ' + groupname + ' has been deleted', haproxywi=1, login=1)\n\nif form.getvalue('updategroup') is not None:\n    name = form.getvalue('updategroup')\n    descript = form.getvalue('descript')\n    group_id = form.getvalue('id')\n    if name is None:\n        print(error_mess)\n    else:\n        try:\n            sql.update_group(name, descript, group_id)\n            funct.logging('localhost', 'The ' + name + ' has been updated', haproxywi=1, login=1)\n        except Exception as e:\n            print('error: ' + str(e))\n\nif form.getvalue('new_ssh'):\n    user_group = funct.get_user_group()\n    name = form.getvalue('new_ssh')\n    name = name + '_' + user_group\n    enable = form.getvalue('ssh_enable')\n    group = form.getvalue('new_group')\n    username = form.getvalue('ssh_user')\n    password = form.getvalue('ssh_pass')\n    page = form.getvalue('page')\n    page = page.split(\"#\")[0]\n\n    if username is None or name is None:\n        print(error_mess)\n    else:\n        if sql.insert_new_ssh(name, enable, group, username, password):\n            from jinja2 import Environment, FileSystemLoader\n\n            env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n            template = env.get_template('/new_ssh.html')\n            output_from_parsed_template = template.render(groups=sql.select_groups(), sshs=sql.select_ssh(name=name),\n                                                          page=page)\n            print(output_from_parsed_template)\n            funct.logging('localhost', 'A new SSH credentials ' + name + ' has created', haproxywi=1, login=1)\n\nif form.getvalue('sshdel') is not None:\n    lib_path = funct.get_config_var('main', 'lib_path')\n    sshdel = form.getvalue('sshdel')\n\n    if funct.checkAjaxInput(sshdel):\n        print('error: Nice try')\n        sys.exit()\n\n    if funct.checkAjaxInput(sshdel):\n        print('error: Nice try')\n        sys.exit()\n\n    for sshs in sql.select_ssh(id=sshdel):\n        ssh_enable = sshs.enable\n        name = sshs.name\n        ssh_key_name = lib_path + '/keys/%s.pem' % sshs.name\n\n    if ssh_enable == 1:\n        cmd = 'rm -f %s' % ssh_key_name\n        try:\n            funct.subprocess_execute(cmd)\n        except Exception:\n            pass\n    if sql.delete_ssh(sshdel):\n        print(\"Ok\")\n        funct.logging('localhost', 'The SSH credentials ' + name + ' has deleted', haproxywi=1, login=1)\n\nif form.getvalue('updatessh'):\n    ssh_id = form.getvalue('id')\n    name = form.getvalue('name')\n    enable = form.getvalue('ssh_enable')\n    group = form.getvalue('group')\n    username = form.getvalue('ssh_user')\n    password = form.getvalue('ssh_pass')\n\n    if username is None:\n        print(error_mess)\n    else:\n        lib_path = funct.get_config_var('main', 'lib_path')\n\n        for sshs in sql.select_ssh(id=ssh_id):\n            ssh_enable = sshs.enable\n            ssh_key_name = lib_path + '/keys/%s.pem' % sshs.name\n            new_ssh_key_name = lib_path + '/keys/%s.pem' % name\n\n        if ssh_enable == 1:\n            cmd = 'mv %s %s' % (ssh_key_name, new_ssh_key_name)\n            cmd1 = 'chmod 600 %s' % new_ssh_key_name\n            try:\n                funct.subprocess_execute(cmd)\n                funct.subprocess_execute(cmd1)\n            except Exception:\n                pass\n        sql.update_ssh(ssh_id, name, enable, group, username, password)\n        funct.logging('localhost', 'The SSH credentials ' + name + ' has been updated ', haproxywi=1, login=1)\n\nif form.getvalue('ssh_cert'):\n    import paramiko\n\n    user_group = funct.get_user_group()\n    name = form.getvalue('name')\n\n    if funct.checkAjaxInput(name):\n        print('error: Nice try')\n        sys.exit()\n\n    try:\n        key = paramiko.pkey.load_private_key(form.getvalue('ssh_cert'))\n    except Exception as e:\n        print('error: Cannot save SSH key file: ', str(e))\n\n    lib_path = funct.get_config_var('main', 'lib_path')\n    full_dir = lib_path + '/keys/'\n    ssh_keys = name + '.pem'\n\n    try:\n        split_name = name.split('_')[1]\n        split_name = True\n    except Exception:\n        split_name = False\n\n    if not os.path.isfile(ssh_keys) and not split_name:\n        name = name + '_' + user_group\n\n    if not os.path.exists(full_dir):\n        os.makedirs(full_dir)\n\n    ssh_keys = full_dir + name + '.pem'\n\n    try:\n        # cloud = sql.is_cloud()\n        # if cloud != '':\n        #     key.write_private_key_file(ssh_keys, password=cloud)\n        # else:\n        key.write_private_key_file(ssh_keys)\n    except Exception as e:\n        print('error: Cannot save SSH key file: ', str(e))\n    else:\n        print('success: SSH key has been saved into: %s ' % ssh_keys)\n\n    try:\n        cmd = 'chmod 600 %s' % ssh_keys\n        funct.subprocess_execute(cmd)\n    except IOError as e:\n        funct.logging('localhost', e.args[0], haproxywi=1)\n\n    funct.logging(\"localhost\", \"A new SSH cert has been uploaded %s\" % ssh_keys, haproxywi=1, login=1)\n\nif form.getvalue('newtelegram'):\n    token = form.getvalue('newtelegram')\n    channel = form.getvalue('chanel')\n    group = form.getvalue('telegramgroup')\n    page = form.getvalue('page')\n    page = page.split(\"#\")[0]\n\n    if token is None or channel is None or group is None:\n        print(error_mess)\n    else:\n        if sql.insert_new_telegram(token, channel, group):\n            from jinja2 import Environment, FileSystemLoader\n\n            env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n            template = env.get_template('/new_telegram.html')\n            output_from_parsed_template = template.render(groups=sql.select_groups(),\n                                                          telegrams=sql.select_telegram(token=token), page=page)\n            print(output_from_parsed_template)\n            funct.logging('localhost', 'A new Telegram channel ' + channel + ' has been created ', haproxywi=1, login=1)\n\nif form.getvalue('newslack'):\n    token = form.getvalue('newslack')\n    channel = form.getvalue('chanel')\n    group = form.getvalue('slackgroup')\n    page = form.getvalue('page')\n    page = page.split(\"#\")[0]\n\n    if token is None or channel is None or group is None:\n        print(error_mess)\n    else:\n        if sql.insert_new_slack(token, channel, group):\n            from jinja2 import Environment, FileSystemLoader\n\n            env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n            template = env.get_template('/new_slack.html')\n            output_from_parsed_template = template.render(groups=sql.select_groups(),\n                                                          slacks=sql.select_slack(token=token), page=page)\n            print(output_from_parsed_template)\n            funct.logging('localhost', 'A new Slack channel ' + channel + ' has been created ', haproxywi=1, login=1)\n\nif form.getvalue('telegramdel') is not None:\n    telegramdel = form.getvalue('telegramdel')\n    telegram = sql.select_telegram(id=telegramdel)\n    telegram_name = ''\n    for t in telegram:\n        telegram_name = t.token\n    if sql.delete_telegram(telegramdel):\n        print(\"Ok\")\n        funct.logging('localhost', 'The Telegram channel ' + telegram_name + ' has been deleted ', haproxywi=1, login=1)\n\nif form.getvalue('slackdel') is not None:\n    slackdel = form.getvalue('slackdel')\n    slack = sql.select_slack(id=slackdel)\n    slack_name = ''\n    for t in slack:\n        slack_name = t.chanel_name\n    if sql.delete_slack(slackdel):\n        print(\"Ok\")\n        funct.logging('localhost', 'The Slack channel ' + slack_name + ' has been deleted ', haproxywi=1, login=1)\n\nif form.getvalue('updatetoken') is not None:\n    token = form.getvalue('updatetoken')\n    channel = form.getvalue('updategchanel')\n    group = form.getvalue('updatetelegramgroup')\n    user_id = form.getvalue('id')\n    if token is None or channel is None or group is None:\n        print(error_mess)\n    else:\n        sql.update_telegram(token, channel, group, user_id)\n        funct.logging('group ' + group, 'The Telegram token has been updated for channel: ' + channel, haproxywi=1, login=1)\n\nif form.getvalue('update_slack_token') is not None:\n    token = form.getvalue('update_slack_token')\n    channel = form.getvalue('updategchanel')\n    group = form.getvalue('updateslackgroup')\n    user_id = form.getvalue('id')\n    if token is None or channel is None or group is None:\n        print(error_mess)\n    else:\n        sql.update_slack(token, channel, group, user_id)\n        funct.logging('group ' + group, 'The Slack token has been updated for channel: ' + channel, haproxywi=1, login=1)\n\nif form.getvalue('updatesettings') is not None:\n    settings = form.getvalue('updatesettings')\n    val = form.getvalue('val')\n    if sql.update_setting(settings, val):\n        funct.logging('localhost', 'The ' + settings + ' setting has been changed to: ' + str(val), haproxywi=1, login=1)\n        print(\"Ok\")\n\nif form.getvalue('getuserservices'):\n    user_id = form.getvalue('getuserservices')\n    groups = []\n    u_g = sql.select_user_groups(user_id)\n    services = sql.select_services()\n    for g in u_g:\n        groups.append(g.user_group_id)\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n    template = env.get_template('/show_user_services.html')\n    template = template.render(user_services=sql.select_user_services(user_id), id=user_id, services=services)\n    print(template)\n\nif form.getvalue('getusergroups'):\n    user_id = form.getvalue('getusergroups')\n    groups = []\n    u_g = sql.select_user_groups(user_id)\n    for g in u_g:\n        groups.append(g.user_group_id)\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n    template = env.get_template('/show_user_groups.html')\n    template = template.render(groups=sql.select_groups(), user_groups=groups, id=user_id)\n    print(template)\n\nif form.getvalue('changeUserGroupId') is not None:\n    group_id = form.getvalue('changeUserGroupId')\n    groups = form.getvalue('changeUserGroups')\n    user = form.getvalue('changeUserGroupsUser')\n    if sql.delete_user_groups(group_id):\n        for group in groups:\n            if group[0] == ',':\n                continue\n            sql.update_user_groups(groups=group[0], user_group_id=group_id)\n\n    funct.logging('localhost', 'Groups has been updated for user: ' + user, haproxywi=1, login=1)\n\nif form.getvalue('changeUserServicesId') is not None:\n    user_id = form.getvalue('changeUserServicesId')\n    services = form.getvalue('changeUserServices')\n    user = form.getvalue('changeUserServicesUser')\n\n    if sql.update_user_services(services=services, user_id=user_id):\n        funct.logging('localhost', 'Access to the services has been updated for user: ' + user, haproxywi=1, login=1)\n\nif form.getvalue('changeUserCurrentGroupId') is not None:\n    group_id = form.getvalue('changeUserCurrentGroupId')\n    user_uuid = form.getvalue('changeUserGroupsUser')\n\n    if sql.update_user_current_groups(group_id, user_uuid):\n        print('Ok')\n    else:\n        print('error: Cannot change group')\n\nif form.getvalue('getcurrentusergroup') is not None:\n    import http.cookies\n\n    cookie = http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\"))\n    user_id = cookie.get('uuid')\n    group = cookie.get('group')\n    group_id = sql.get_user_id_by_uuid(user_id.value)\n    groups = sql.select_user_groups_with_names(group_id)\n\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n    template = env.get_template('/show_user_current_group.html')\n    template = template.render(groups=groups, group=group.value, id=group_id)\n    print(template)\n\nif form.getvalue('newsmon') is not None:\n    user_group = funct.get_user_group(id=1)\n    server = form.getvalue('newsmon')\n    port = form.getvalue('newsmonport')\n    enable = form.getvalue('newsmonenable')\n    http = form.getvalue('newsmonproto')\n    uri = form.getvalue('newsmonuri')\n    body = form.getvalue('newsmonbody')\n    group = form.getvalue('newsmongroup')\n    desc = form.getvalue('newsmondescription')\n    telegram = form.getvalue('newsmontelegram')\n    slack = form.getvalue('newsmonslack')\n\n    try:\n        port = int(port)\n    except Exception:\n        print('SMON error: port must number')\n        sys.exit()\n    if port > 65535 or port < 0:\n        print('SMON error: port must be 0-65535')\n        sys.exit()\n    if port == 80 and http == 'https':\n        print('SMON error: Cannot be HTTPS with 80 port')\n        sys.exit()\n    if port == 443 and http == 'http':\n        print('SMON error: Cannot be HTTP with 443 port')\n        sys.exit()\n\n    last_id = sql.insert_smon(server, port, enable, http, uri, body, group, desc, telegram, slack, user_group)\n    if last_id:\n        from jinja2 import Environment, FileSystemLoader\n        env = Environment(loader=FileSystemLoader('templates'), autoescape=True)\n        template = env.get_template('ajax/show_new_smon.html')\n        template = template.render(\n            smon=sql.select_smon_by_id(last_id),\n            telegrams=sql.get_user_telegram_by_group(user_group),\n            slacks=sql.get_user_slack_by_group(user_group))\n        print(template)\n        funct.logging('SMON', ' Has been add a new server ' + server + ' to SMON ', haproxywi=1, login=1)\n\nif form.getvalue('smondel') is not None:\n    user_group = funct.get_user_group(id=1)\n    smon_id = form.getvalue('smondel')\n\n    if funct.check_user_group():\n        if sql.delete_smon(smon_id, user_group):\n            print('Ok')\n            funct.logging('SMON', ' Has been delete server from SMON ', haproxywi=1, login=1)\n\nif form.getvalue('showsmon') is not None:\n    user_group = funct.get_user_group(id=1)\n    sort = form.getvalue('sort')\n\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates'), autoescape=True)\n    template = env.get_template('ajax/smon_dashboard.html')\n    template = template.render(smon=sql.smon_list(user_group), sort=sort)\n    print(template)\n\nif form.getvalue('updateSmonIp') is not None:\n    smon_id = form.getvalue('id')\n    ip = form.getvalue('updateSmonIp')\n    port = form.getvalue('updateSmonPort')\n    en = form.getvalue('updateSmonEn')\n    http = form.getvalue('updateSmonHttp')\n    body = form.getvalue('updateSmonBody')\n    telegram = form.getvalue('updateSmonTelegram')\n    slack = form.getvalue('updateSmonSlack')\n    group = form.getvalue('updateSmonGroup')\n    desc = form.getvalue('updateSmonDesc')\n\n    try:\n        port = int(port)\n    except Exception:\n        print('SMON error: port must number')\n        sys.exit()\n    if port > 65535 or port < 0:\n        print('SMON error: port must be 0-65535')\n        sys.exit()\n    if port == 80 and http == 'https':\n        print('SMON error: Cannot be https with 80 port')\n        sys.exit()\n    if port == 443 and http == 'http':\n        print('SMON error: Cannot be HTTP with 443 port')\n        sys.exit()\n\n    if sql.update_smon(smon_id, ip, port, body, telegram, slack, group, desc, en):\n        print(\"Ok\")\n        funct.logging('SMON', ' Has been update the server ' + ip + ' to SMON ', haproxywi=1, login=1)\n\nif form.getvalue('showBytes') is not None:\n    serv = form.getvalue('showBytes')\n\n    if funct.checkAjaxInput(serv):\n        print('error: Nice try')\n        sys.exit()\n\n    port = sql.get_setting('haproxy_sock_port')\n    bin_bout = []\n    cmd = \"echo 'show stat' |nc {} {} |cut -d ',' -f 1-2,9|grep -E '[0-9]'|awk -F',' '{{sum+=$3;}}END{{print sum;}}'\".format(serv, port)\n    bin, stderr = funct.subprocess_execute(cmd)\n    bin_bout.append(bin[0])\n    cmd = \"echo 'show stat' |nc {} {} |cut -d ',' -f 1-2,10|grep -E '[0-9]'|awk -F',' '{{sum+=$3;}}END{{print sum;}}'\".format(serv, port)\n    bin, stderr = funct.subprocess_execute(cmd)\n    bin_bout.append(bin[0])\n    cmd = \"echo 'show stat' |nc {} {} |cut -d ',' -f 1-2,5|grep -E '[0-9]'|awk -F',' '{{sum+=$3;}}END{{print sum;}}'\".format(serv, port)\n    bin, stderr = funct.subprocess_execute(cmd)\n    bin_bout.append(bin[0])\n    cmd = \"echo 'show stat' |nc {} {} |cut -d ',' -f 1-2,8|grep -E '[0-9]'|awk -F',' '{{sum+=$3;}}END{{print sum;}}'\".format(serv, port)\n    bin, stderr = funct.subprocess_execute(cmd)\n    bin_bout.append(bin[0])\n\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates'), autoescape=True)\n    template = env.get_template('ajax/bin_bout.html')\n    template = template.render(bin_bout=bin_bout, serv=serv)\n    print(template)\n\nif form.getvalue('nginxConnections'):\n    import requests\n    serv = form.getvalue('nginxConnections')\n    port = sql.get_setting('nginx_stats_port')\n    user = sql.get_setting('nginx_stats_user')\n    password = sql.get_setting('nginx_stats_password')\n    page = sql.get_setting('nginx_stats_page')\n    url = 'http://{}:{}/{}'.format(serv, port, page)\n\n    r = requests.get(url, auth=(user, password))\n\n    if r.status_code == 200:\n        bin_bout = [0, 0]\n        for num, line in enumerate(r.text.split('\\n')):\n            if num == 0:\n                bin_bout.append(line.split(' ')[2])\n            if num == 2:\n                bin_bout.append(line.split(' ')[3])\n\n        from jinja2 import Environment, FileSystemLoader\n\n        env = Environment(loader=FileSystemLoader('templates'))\n        template = env.get_template('ajax/bin_bout.html')\n        template = template.render(bin_bout=bin_bout, serv=serv, service='nginx')\n        print(template)\n    else:\n        print('error: cannot connect to Nginx stat page')\n\nif form.getvalue('waf_rule_id'):\n    enable = form.getvalue('waf_en')\n    rule_id = form.getvalue('waf_rule_id')\n\n    if funct.checkAjaxInput(enable) or funct.checkAjaxInput(rule_id):\n        print('error: Nice try')\n        sys.exit()\n\n    haproxy_path = sql.get_setting('haproxy_dir')\n    rule_file = sql.select_waf_rule_by_id(rule_id)\n    conf_file_path = haproxy_path + '/waf/modsecurity.conf'\n    rule_file_path = 'Include ' + haproxy_path + '//waf/rules/' + rule_file\n\n    if enable == '0':\n        cmd = [\"sudo sed -i 's!\" + rule_file_path + \"!#\" + rule_file_path + \"!' \" + conf_file_path]\n        en_for_log = 'disable'\n    else:\n        cmd = [\"sudo sed -i 's!#\" + rule_file_path + \"!\" + rule_file_path + \"!' \" + conf_file_path]\n        en_for_log = 'enable'\n\n    try:\n        funct.logging('WAF', ' Has been ' + en_for_log + ' WAF rule: ' + rule_file + ' for the server ' + serv,\n                      haproxywi=1, login=1)\n    except Exception:\n        pass\n\n    print(funct.ssh_command(serv, cmd))\n    sql.update_enable_waf_rules(rule_id, serv, enable)\n\nif form.getvalue('lets_domain'):\n    serv = form.getvalue('serv')\n    lets_domain = form.getvalue('lets_domain')\n    lets_email = form.getvalue('lets_email')\n    proxy = sql.get_setting('proxy')\n    ssl_path = sql.get_setting('cert_path')\n    haproxy_dir = sql.get_setting('haproxy_dir')\n    script = \"letsencrypt.sh\"\n    ssh_port = \"22\"\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path(serv)\n\n    if ssh_enable == 0:\n        ssh_key_name = ''\n\n    servers = sql.select_servers(server=serv)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv + \" haproxy_dir=\" + haproxy_dir\n        + \" DOMAIN=\" + lets_domain + \" EMAIL=\" + lets_email + \" SSH_PORT=\" + ssh_port + \" SSL_PATH=\" + ssl_path\n        + \" HOST=\" + serv + \" USER=\" + ssh_user_name + \" PASS='\" + ssh_user_password + \"' KEY=\" + ssh_key_name\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    if error:\n        funct.logging('localhost', error, haproxywi=1)\n        print(error)\n    else:\n        for line in output:\n            if any(s in line for s in (\"msg\", \"FAILED\")):\n                try:\n                    line = line.split(':')[1]\n                    line = line.split('\"')[1]\n                    print(line + \"<br>\")\n                    break\n                except Exception:\n                    print(output)\n                    break\n        else:\n            print('success: Certificate has been created')\n\n    os.system(\"rm -f %s\" % script)\n\nif form.getvalue('uploadovpn'):\n    name = form.getvalue('ovpnname')\n\n    if funct.checkAjaxInput(name):\n        print('error: Nice try')\n        sys.exit()\n\n    if funct.checkAjaxInput(name):\n        print('error: Nice try')\n        sys.exit()\n\n    ovpn_file = os.path.dirname('/tmp/') + \"/\" + name + '.ovpn'\n\n    try:\n        with open(ovpn_file, \"w\") as conf:\n            conf.write(form.getvalue('uploadovpn'))\n    except IOError as e:\n        print(str(e))\n        print('error: Can\\'t save ovpn file')\n    else:\n        print('success: ovpn file has been saved </div>')\n\n    try:\n        cmd = 'sudo openvpn3 config-import --config %s --persistent' % ovpn_file\n        funct.subprocess_execute(cmd)\n    except IOError as e:\n        funct.logging('localhost', e.args[0], haproxywi=1)\n\n    try:\n        cmd = 'sudo cp %s /etc/openvpn3/%s.conf' % (ovpn_file, name)\n        funct.subprocess_execute(cmd)\n    except IOError as e:\n        funct.logging('localhost', e.args[0], haproxywi=1)\n\n    funct.logging(\"localhost\", \" has been uploaded a new ovpn file %s\" % ovpn_file, haproxywi=1, login=1)\n\nif form.getvalue('openvpndel') is not None:\n    openvpndel = form.getvalue('openvpndel')\n\n    if funct.checkAjaxInput(openvpndel):\n        print('error: Nice try')\n        sys.exit()\n\n    cmd = 'sudo openvpn3 config-remove --config /tmp/%s.ovpn --force' % openvpndel\n    try:\n        funct.subprocess_execute(cmd)\n        print(\"Ok\")\n        funct.logging(openvpndel, ' has deleted the ovpn file ', haproxywi=1, login=1)\n    except IOError as e:\n        print(e.args[0])\n        funct.logging('localhost', e.args[0], haproxywi=1)\n\nif form.getvalue('actionvpn') is not None:\n    openvpn = form.getvalue('openvpnprofile')\n    action = form.getvalue('actionvpn')\n\n    if funct.checkAjaxInput(openvpn) or funct.checkAjaxInput(action):\n        print('error: Nice try')\n        sys.exit()\n\n    if action == 'start':\n        cmd = 'sudo openvpn3 session-start --config /tmp/%s.ovpn' % openvpn\n    elif action == 'restart':\n        cmd = 'sudo openvpn3 session-manage --config /tmp/%s.ovpn --restart' % openvpn\n    elif action == 'disconnect':\n        cmd = 'sudo openvpn3 session-manage --config /tmp/%s.ovpn --disconnect' % openvpn\n    try:\n        funct.subprocess_execute(cmd)\n        print(\"success: The \" + openvpn + \" has been \" + action + \"ed\")\n        funct.logging(openvpn, ' has ' + action + ' the ovpn session ', haproxywi=1, login=1)\n    except IOError as e:\n        print(e.args[0])\n        funct.logging('localhost', e.args[0], haproxywi=1)\n\nif form.getvalue('scan_ports') is not None:\n    serv_id = form.getvalue('scan_ports')\n\n    if funct.checkAjaxInput(serv_id):\n        print('error: Nice try')\n        sys.exit()\n\n    server = sql.select_servers(id=serv_id)\n    ip = ''\n\n    for s in server:\n        ip = s[2]\n\n    cmd = \"sudo nmap -sS %s |grep -E '^[[:digit:]]'|sed 's/  */ /g'\" % ip\n    cmd1 = \"sudo nmap -sS %s |head -5|tail -2\" % ip\n\n    stdout, stderr = funct.subprocess_execute(cmd)\n    stdout1, stderr1 = funct.subprocess_execute(cmd1)\n\n    if stderr != '':\n        print(stderr)\n    else:\n        from jinja2 import Environment, FileSystemLoader\n\n        env = Environment(loader=FileSystemLoader('templates'), autoescape=True)\n        template = env.get_template('ajax/scan_ports.html')\n        template = template.render(ports=stdout, info=stdout1)\n        print(template)\n\nif form.getvalue('viewFirewallRules') is not None:\n    serv = form.getvalue('viewFirewallRules')\n\n    if funct.checkAjaxInput(serv):\n        print('error: Nice try')\n        sys.exit()\n\n    cmd = [\"sudo iptables -L INPUT -n --line-numbers|sed 's/  */ /g'|grep -v -E 'Chain|target'\"]\n    cmd1 = [\"sudo iptables -L IN_public_allow -n --line-numbers|sed 's/  */ /g'|grep -v -E 'Chain|target'\"]\n    cmd2 = [\"sudo iptables -L OUTPUT -n --line-numbers|sed 's/  */ /g'|grep -v -E 'Chain|target'\"]\n\n    input_chain = funct.ssh_command(serv, cmd, raw=1)\n\n    input_chain2 = []\n    for each_line in input_chain:\n        input_chain2.append(each_line.strip('\\n'))\n\n    if 'error:' in input_chain:\n        print(input_chain)\n        sys.exit()\n\n    IN_public_allow = funct.ssh_command(serv, cmd1, raw=1)\n    output_chain = funct.ssh_command(serv, cmd2, raw=1)\n\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates'))\n    template = env.get_template('ajax/firewall_rules.html')\n    template = template.render(input=input_chain2, IN_public_allow=IN_public_allow, output=output_chain)\n    print(template)\n\nif form.getvalue('geoipserv') is not None:\n    serv = form.getvalue('geoipserv')\n\n    if funct.checkAjaxInput(serv):\n        print('error: Nice try')\n        sys.exit()\n\n    haproxy_dir = sql.get_setting('haproxy_dir')\n\n    cmd = [\"ls \" + haproxy_dir + \"/geoip/\"]\n    print(funct.ssh_command(serv, cmd))\n\nif form.getvalue('geoip_install'):\n    serv = form.getvalue('geoip_install')\n    geoip_update = form.getvalue('geoip_update')\n    proxy = sql.get_setting('proxy')\n    maxmind_key = sql.get_setting('maxmind_key')\n    haproxy_dir = sql.get_setting('haproxy_dir')\n    script = 'install_geoip.sh'\n    ssh_port = '22'\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path(serv)\n\n    if ssh_enable == 0:\n        ssh_key_name = ''\n\n    servers = sql.select_servers(server=serv)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv + \" SSH_PORT=\" + ssh_port\n        + \" UPDATE=\" + str(geoip_update) + \" maxmind_key=\" + maxmind_key + \" haproxy_dir=\" + haproxy_dir\n        + \" HOST=\" + str(serv) + \" USER=\" + str(ssh_user_name) + \" PASS=\" + str(ssh_user_password)\n        + \" KEY=\" + str(ssh_key_name)\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    funct.show_installation_output(error, output, 'GeoLite2 Database')\n\n    os.system(\"rm -f %s\" % script)\n\nif form.getvalue('nettools_icmp_server_from'):\n    server_from = form.getvalue('nettools_icmp_server_from')\n    server_to = form.getvalue('nettools_icmp_server_to')\n    server_to = funct.is_ip_or_dns(server_to)\n    action = form.getvalue('nettools_action')\n    stderr = ''\n    action_for_sending = ''\n\n    if server_to == '':\n        print('warning: enter a correct IP or DNS name')\n        sys.exit()\n\n    if action == 'nettools_ping':\n        action_for_sending = 'ping -c 4 -W 1 -s 56 -O '\n    elif action == 'nettools_trace':\n        action_for_sending = 'tracepath -m 10 '\n\n    action_for_sending = action_for_sending + server_to\n\n    if server_from == 'localhost':\n        output, stderr = funct.subprocess_execute(action_for_sending)\n    else:\n        action_for_sending = [action_for_sending]\n        output = funct.ssh_command(server_from, action_for_sending, raw=1)\n\n    if stderr != '':\n        print('error: ' + stderr)\n        sys.exit()\n    for i in output:\n        if i == ' ' or i == '':\n            continue\n        i = i.strip()\n        if 'PING' in i:\n            print('<span style=\"color: var(--link-dark-blue); display: block; margin-top: -20px;\">')\n        elif 'no reply' in i or 'no answer yet' in i or 'Too many hops' in i or '100% packet loss' in i:\n            print('<span style=\"color: var(--red-color);\">')\n        elif 'ms' in i and '100% packet loss' not in i:\n            print('<span style=\"color: var(--green-color);\">')\n        else:\n            print('<span>')\n\n        print(i + '</span><br />')\n\nif form.getvalue('nettools_telnet_server_from'):\n    server_from = form.getvalue('nettools_telnet_server_from')\n    server_to = form.getvalue('nettools_telnet_server_to')\n    server_to = funct.is_ip_or_dns(server_to)\n    port_to = form.getvalue('nettools_telnet_port_to')\n    stderr = ''\n\n    if server_to == '':\n        print('warning: enter a correct IP or DNS name')\n        sys.exit()\n\n    if server_from == 'localhost':\n        action_for_sending = 'echo \"exit\"|nc ' + server_to + ' ' + port_to + ' -t -w 1s'\n        output, stderr = funct.subprocess_execute(action_for_sending)\n    else:\n        action_for_sending = ['echo \"exit\"|nc ' + server_to + ' ' + port_to + ' -t -w 1s']\n        output = funct.ssh_command(server_from, action_for_sending, raw=1)\n\n    if stderr != '':\n        print('error: <b>' + stderr[5:] + '</b>')\n        sys.exit()\n    count_string = 0\n    for i in output:\n        if i == ' ':\n            continue\n        i = i.strip()\n        if i == 'Ncat: Connection timed out.':\n            print('error: <b>' + i[5:] + '</b>')\n            break\n        print(i + '<br>')\n        count_string += 1\n        if count_string > 1:\n            break\n\nif form.getvalue('nettools_nslookup_server_from'):\n    server_from = form.getvalue('nettools_nslookup_server_from')\n    dns_name = form.getvalue('nettools_nslookup_name')\n    dns_name = funct.is_ip_or_dns(dns_name)\n    record_type = form.getvalue('nettools_nslookup_record_type')\n    stderr = ''\n\n    if dns_name == '':\n        print('warning: enter a correct DNS name')\n        sys.exit()\n\n    action_for_sending = 'dig ' + dns_name + ' ' + record_type + ' |grep -e \"SERVER\\|' + dns_name + '\"'\n\n    if server_from == 'localhost':\n        output, stderr = funct.subprocess_execute(action_for_sending)\n    else:\n        action_for_sending = [action_for_sending]\n        output = funct.ssh_command(server_from, action_for_sending, raw=1)\n\n    if stderr != '':\n        print('error: ' + stderr[5:-1])\n        sys.exit()\n    count_string = 0\n    print('<b style=\"display: block; margin-top:10px;\">The <i style=\"color: var(--blue-color)\">' + dns_name + '</i> domain has the following records:</b>')\n    for i in output:\n        if 'dig: command not found.' in i:\n            print('error: Install bind-utils before using NSLookup')\n            break\n        if ';' in i and ';; SERVER:' not in i:\n            continue\n        if 'SOA' in i and record_type != 'SOA':\n            print('<b style=\"color: red\">There are not any records for this type')\n            break\n        if ';; SERVER:' in i:\n            i = i[10:]\n            print('<br><b>From NS server:</b><br>')\n        i = i.strip()\n        print('<i>' + i + '</i><br>')\n        count_string += 1\n\nif form.getvalue('portscanner_history_server_id'):\n    server_id = form.getvalue('portscanner_history_server_id')\n    enabled = form.getvalue('portscanner_enabled')\n    notify = form.getvalue('portscanner_notify')\n    history = form.getvalue('portscanner_history')\n\n    servers = sql.select_servers(id=server_id)\n\n    for s in servers:\n        user_group_id = s[3]\n\n    if sql.insert_port_scanner_settings(server_id, user_group_id, enabled, notify, history):\n        print('ok')\n    else:\n        if sql.update_port_scanner_settings(server_id, user_group_id, enabled, notify, history):\n            print('ok')\n\nif form.getvalue('show_versions'):\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates'))\n    template = env.get_template('ajax/check_version.html')\n    template = template.render(versions=funct.versions())\n    print(template)\n\nif form.getvalue('get_group_name_by_id'):\n    print(sql.get_group_name_by_id(form.getvalue('get_group_name_by_id')))\n\nif form.getvalue('do_new_name') or form.getvalue('aws_new_name') or form.getvalue('gcore_new_name'):\n    funct.check_user_group()\n    is_add = False\n    if form.getvalue('do_new_name'):\n        provider_name = form.getvalue('do_new_name')\n        provider_group = form.getvalue('do_new_group')\n        provider_token = form.getvalue('do_new_token')\n\n        if sql.add_provider_do(provider_name, provider_group, provider_token):\n            is_add = True\n\n    elif form.getvalue('aws_new_name'):\n        provider_name = form.getvalue('aws_new_name')\n        provider_group = form.getvalue('aws_new_group')\n        provider_token = form.getvalue('aws_new_key')\n        provider_secret = form.getvalue('aws_new_secret')\n\n        if sql.add_provider_aws(provider_name, provider_group, provider_token, provider_secret):\n            is_add = True\n\n    elif form.getvalue('gcore_new_name'):\n        provider_name = form.getvalue('gcore_new_name')\n        provider_group = form.getvalue('gcore_new_group')\n        provider_token = form.getvalue('gcore_new_user')\n        provider_pass = form.getvalue('gcore_new_pass')\n\n        if sql.add_provider_gcore(provider_name, provider_group, provider_token, provider_pass):\n            is_add = True\n\n    if is_add:\n        from jinja2 import Environment, FileSystemLoader\n        import http.cookies\n        import os\n\n        cookie = http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\"))\n        user_uuid = cookie.get('uuid')\n        role_id = sql.get_user_role_by_uuid(user_uuid.value)\n\n        if role_id == 1:\n            groups = sql.select_groups()\n        else:\n            groups = ''\n\n        env = Environment(loader=FileSystemLoader('templates'), autoescape=True)\n        template = env.get_template('ajax/provisioning/providers.html')\n        template = template.render(providers=sql.select_providers(provider_group, key=provider_token), role=role_id, groups=groups, user_group=provider_group, adding=1)\n        print(template)\n\nif form.getvalue('providerdel'):\n    funct.check_user_group()\n    if sql.delete_provider(form.getvalue('providerdel')):\n        print('Ok')\n        funct.logging('localhost', 'Provider has been deleted', provisioning=1)\n\nif form.getvalue('awsinit') or form.getvalue('doinit') or form.getvalue('gcoreinitserver'):\n    funct.check_user_group()\n    cmd = 'cd scripts/terraform/ && sudo terraform init -upgrade -no-color'\n    output, stderr = funct.subprocess_execute(cmd)\n    if stderr != '':\n        print('error: ' + stderr)\n    else:\n        if \"Terraform initialized in an empty directory\" in output[0]:\n            print('error: There is not need modules')\n        elif \"mkdir .terraform: permission denied\" in output[0]:\n            print('error: Cannot init. Check permission to folder')\n\n        print(output[0])\n\nif form.getvalue('awsvars') or form.getvalue('awseditvars'):\n    if form.getvalue('awsvars'):\n        awsvars = form.getvalue('awsvars')\n        group = form.getvalue('aws_create_group')\n        provider = form.getvalue('aws_create_provider')\n        region = form.getvalue('aws_create_regions')\n        size = form.getvalue('aws_create_size')\n        oss = form.getvalue('aws_create_oss')\n        ssh_name = form.getvalue('aws_create_ssh_name')\n        volume_size = form.getvalue('aws_create_volume_size')\n        volume_type = form.getvalue('aws_create_volume_type')\n        delete_on_termination = form.getvalue('aws_create_delete_on_termination')\n        floating_ip = form.getvalue('aws_create_floating_net')\n        firewall = form.getvalue('aws_create_firewall')\n        public_ip = form.getvalue('aws_create_public_ip')\n    elif form.getvalue('awseditvars'):\n        awsvars = form.getvalue('awseditvars')\n        group = form.getvalue('aws_editing_group')\n        provider = form.getvalue('aws_editing_provider')\n        region = form.getvalue('aws_editing_regions')\n        size = form.getvalue('aws_editing_size')\n        oss = form.getvalue('aws_editing_oss')\n        ssh_name = form.getvalue('aws_editing_ssh_name')\n        volume_size = form.getvalue('aws_editing_volume_size')\n        volume_type = form.getvalue('aws_editing_volume_type')\n        delete_on_termination = form.getvalue('aws_editing_delete_on_termination')\n        floating_ip = form.getvalue('aws_editing_floating_net')\n        firewall = form.getvalue('aws_editing_firewall')\n        public_ip = form.getvalue('aws_editing_public_ip')\n\n    aws_key, aws_secret = sql.select_aws_provider(provider)\n\n    cmd = 'cd scripts/terraform/ && sudo ansible-playbook var_generator.yml -i inventory -e \"region={} ' \\\n            'group={} size={} os={} floating_ip={} volume_size={} server_name={} AWS_ACCESS_KEY={} ' \\\n            'AWS_SECRET_KEY={} firewall={} public_ip={} ssh_name={} delete_on_termination={} volume_type={} ' \\\n            'cloud=aws\"'.format(\n                region, group, size, oss, floating_ip, volume_size, awsvars, aws_key, aws_secret,\n                firewall, public_ip, ssh_name, delete_on_termination, volume_type\n            )\n\n    output, stderr = funct.subprocess_execute(cmd)\n    if stderr != '':\n        print('error: ' + stderr)\n    else:\n        print('ok')\n\nif form.getvalue('dovars') or form.getvalue('doeditvars'):\n    if form.getvalue('dovars'):\n        dovars = form.getvalue('dovars')\n        group = form.getvalue('do_create_group')\n        provider = form.getvalue('do_create_provider')\n        region = form.getvalue('do_create_regions')\n        size = form.getvalue('do_create_size')\n        oss = form.getvalue('do_create_oss')\n        ssh_name = form.getvalue('do_create_ssh_name')\n        ssh_ids = form.getvalue('do_create_ssh_ids')\n        backup = form.getvalue('do_create_backup')\n        privet_net = form.getvalue('do_create_private_net')\n        floating_ip = form.getvalue('do_create_floating_net')\n        monitoring = form.getvalue('do_create_monitoring')\n        firewall = form.getvalue('do_create_firewall')\n    elif form.getvalue('doeditvars'):\n        dovars = form.getvalue('doeditvars')\n        group = form.getvalue('do_edit_group')\n        provider = form.getvalue('do_edit_provider')\n        region = form.getvalue('do_edit_regions')\n        size = form.getvalue('do_edit_size')\n        oss = form.getvalue('do_edit_oss')\n        ssh_name = form.getvalue('do_edit_ssh_name')\n        ssh_ids = form.getvalue('do_edit_ssh_ids')\n        backup = form.getvalue('do_edit_backup')\n        privet_net = form.getvalue('do_edit_private_net')\n        floating_ip = form.getvalue('do_edit_floating_net')\n        monitoring = form.getvalue('do_edit_monitoring')\n        firewall = form.getvalue('do_edit_firewall')\n\n    token = sql.select_do_provider(provider)\n\n    cmd = 'cd scripts/terraform/ && sudo ansible-playbook var_generator.yml -i inventory -e \"region={} ' \\\n          'group={} size={} os={} floating_ip={} ssh_ids={} server_name={} token={} backup={} monitoring={} ' \\\n          'privet_net={} firewall={} floating_ip={} ssh_name={} ' \\\n          'cloud=do\"'.format(\n                region, group, size, oss, floating_ip, ssh_ids, dovars, token, backup, monitoring,\n                privet_net, firewall, floating_ip, ssh_name\n            )\n    output, stderr = funct.subprocess_execute(cmd)\n    if stderr != '':\n        print('error: ' + stderr)\n    else:\n        print(cmd)\n        print(output)\n\nif form.getvalue('dovalidate') or form.getvalue('doeditvalidate'):\n    if form.getvalue('dovalidate'):\n        workspace = form.getvalue('dovalidate')\n        group = form.getvalue('do_create_group')\n    elif form.getvalue('doeditvalidate'):\n        workspace = form.getvalue('doeditvalidate')\n        group = form.getvalue('do_edit_group')\n\n    cmd = 'cd scripts/terraform/ && sudo terraform plan -no-color -input=false -target=module.do_module -var-file vars/' + workspace + '_' + group + '_do.tfvars'\n    output, stderr = funct.subprocess_execute(cmd)\n    if stderr != '':\n        print('error: ' + stderr)\n    else:\n        print('ok')\n\nif form.getvalue('doworkspace'):\n    workspace = form.getvalue('doworkspace')\n    group = form.getvalue('do_create_group')\n    provider = form.getvalue('do_create_provider')\n    region = form.getvalue('do_create_regions')\n    size = form.getvalue('do_create_size')\n    oss = form.getvalue('do_create_oss')\n    ssh_name = form.getvalue('do_create_ssh_name')\n    ssh_ids = form.getvalue('do_create_ssh_ids')\n    backup = form.getvalue('do_create_backup')\n    privet_net = form.getvalue('do_create_private_net')\n    floating_ip = form.getvalue('do_create_floating_net')\n    monitoring = form.getvalue('do_create_monitoring')\n    firewall = form.getvalue('do_create_firewall')\n\n    cmd = 'cd scripts/terraform/ && sudo terraform workspace new ' + workspace + '_' + group + '_do'\n    output, stderr = funct.subprocess_execute(cmd)\n\n    if stderr != '':\n        stderr = stderr.strip()\n        stderr = repr(stderr)\n        stderr = stderr.replace(\"'\", \"\")\n        stderr = stderr.replace(\"\\'\", \"\")\n        sql.update_provisioning_server_status('Error', group, workspace, provider)\n        sql.update_provisioning_server_error(stderr, group, workspace, provider)\n        print('error: ' + stderr)\n    else:\n        if sql.add_server_do(\n                region, size, privet_net, floating_ip, ssh_ids, ssh_name, workspace, oss, firewall, monitoring,\n                backup, provider, group, 'Creating'\n        ):\n\n            from jinja2 import Environment, FileSystemLoader\n\n            user, user_id, role, token, servers, user_services = funct.get_users_params()\n            new_server = sql.select_provisioned_servers(new=workspace, group=group, type='do')\n\n            env = Environment(extensions=[\"jinja2.ext.do\"], loader=FileSystemLoader('templates'))\n            template = env.get_template('ajax/provisioning/provisioned_servers.html')\n            template = template.render(\n                servers=new_server, groups=sql.select_groups(), user_group=group,\n                providers=sql.select_providers(group), role=role, adding=1\n            )\n            print(template)\n\nif form.getvalue('doeditworkspace'):\n    workspace = form.getvalue('doeditworkspace')\n    group = form.getvalue('do_edit_group')\n    provider = form.getvalue('do_edit_provider')\n    region = form.getvalue('do_edit_regions')\n    size = form.getvalue('do_edit_size')\n    oss = form.getvalue('do_edit_oss')\n    ssh_name = form.getvalue('do_edit_ssh_name')\n    ssh_ids = form.getvalue('do_edit_ssh_ids')\n    backup = form.getvalue('do_edit_backup')\n    privet_net = form.getvalue('do_edit_private_net')\n    floating_ip = form.getvalue('do_edit_floating_net')\n    monitoring = form.getvalue('do_edit_monitoring')\n    firewall = form.getvalue('do_edit_firewall')\n    server_id = form.getvalue('server_id')\n    if sql.update_server_do(\n        size, privet_net, floating_ip, ssh_ids, ssh_name, oss, firewall, monitoring, backup, provider,\n        group, 'Creating', server_id\n    ):\n\n        cmd = 'cd scripts/terraform/ && sudo terraform workspace select ' + workspace + '_' + group + '_do'\n        output, stderr = funct.subprocess_execute(cmd)\n\n        if stderr != '':\n            stderr = stderr.strip()\n            stderr = repr(stderr)\n            stderr = stderr.replace(\"'\", \"\")\n            stderr = stderr.replace(\"\\'\", \"\")\n            sql.update_provisioning_server_status('Error', group, workspace, provider)\n            sql.update_provisioning_server_error(stderr, group, workspace, provider)\n            print('error: ' + stderr)\n        else:\n            print(cmd)\n            print(output)\n\nif form.getvalue('awsvalidate') or form.getvalue('awseditvalidate'):\n    if form.getvalue('awsvalidate'):\n        workspace = form.getvalue('awsvalidate')\n        group = form.getvalue('aws_create_group')\n    elif form.getvalue('awseditvalidate'):\n        workspace = form.getvalue('awseditvalidate')\n        group = form.getvalue('aws_edit_group')\n\n    cmd = 'cd scripts/terraform/ && sudo terraform plan -no-color -input=false -target=module.aws_module -var-file vars/' + workspace + '_' + group + '_aws.tfvars'\n    output, stderr = funct.subprocess_execute(cmd)\n    if stderr != '':\n        print('error: ' + stderr)\n    else:\n        print('ok')\n\nif form.getvalue('awsworkspace'):\n    workspace = form.getvalue('awsworkspace')\n    group = form.getvalue('aws_create_group')\n    provider = form.getvalue('aws_create_provider')\n    region = form.getvalue('aws_create_regions')\n    size = form.getvalue('aws_create_size')\n    oss = form.getvalue('aws_create_oss')\n    ssh_name = form.getvalue('aws_create_ssh_name')\n    volume_size = form.getvalue('aws_create_volume_size')\n    volume_type = form.getvalue('aws_create_volume_type')\n    delete_on_termination = form.getvalue('aws_create_delete_on_termination')\n    floating_ip = form.getvalue('aws_create_floating_net')\n    firewall = form.getvalue('aws_create_firewall')\n    public_ip = form.getvalue('aws_create_public_ip')\n\n    cmd = 'cd scripts/terraform/ && sudo terraform workspace new ' + workspace + '_' + group + '_aws'\n    output, stderr = funct.subprocess_execute(cmd)\n\n    if stderr != '':\n        stderr = stderr.strip()\n        stderr = repr(stderr)\n        stderr = stderr.replace(\"'\", \"\")\n        stderr = stderr.replace(\"\\'\", \"\")\n        sql.update_provisioning_server_status('Error', group, workspace, provider)\n        sql.update_provisioning_server_error(stderr, group, workspace, provider)\n        print('error: ' + stderr)\n    else:\n        if sql.add_server_aws(\n            region, size, public_ip, floating_ip, volume_size, ssh_name, workspace, oss, firewall,\n            provider, group, 'Creating', delete_on_termination, volume_type\n        ):\n\n            from jinja2 import Environment, FileSystemLoader\n\n            user, user_id, role, token, servers, user_services = funct.get_users_params()\n            new_server = sql.select_provisioned_servers(new=workspace, group=group, type='aws')\n\n            env = Environment(extensions=[\"jinja2.ext.do\"], loader=FileSystemLoader('templates'))\n            template = env.get_template('ajax/provisioning/provisioned_servers.html')\n            template = template.render(\n                servers=new_server, groups=sql.select_groups(), user_group=group,\n                providers=sql.select_providers(group), role=role, adding=1\n            )\n            print(template)\n\nif form.getvalue('awseditworkspace'):\n    workspace = form.getvalue('awseditworkspace')\n    group = form.getvalue('aws_editing_group')\n    provider = form.getvalue('aws_editing_provider')\n    region = form.getvalue('aws_editing_regions')\n    size = form.getvalue('aws_editing_size')\n    oss = form.getvalue('aws_editing_oss')\n    ssh_name = form.getvalue('aws_editing_ssh_name')\n    volume_size = form.getvalue('aws_editing_volume_size')\n    volume_type = form.getvalue('aws_editing_volume_type')\n    delete_on_termination = form.getvalue('aws_editing_delete_on_termination')\n    floating_ip = form.getvalue('aws_editing_floating_net')\n    firewall = form.getvalue('aws_editing_firewall')\n    public_ip = form.getvalue('aws_editing_public_ip')\n    server_id = form.getvalue('server_id')\n\n    if sql.update_server_aws(\n            region, size, public_ip, floating_ip, volume_size, ssh_name, workspace, oss, firewall,\n            provider, group, 'Editing', server_id, delete_on_termination, volume_type\n    ):\n\n        try:\n            cmd = 'cd scripts/terraform/ && sudo terraform workspace select ' + workspace + '_' + group + '_aws'\n            output, stderr = funct.subprocess_execute(cmd)\n        except Exception as e:\n            print('error: ' + str(e))\n\n        if stderr != '':\n            stderr = stderr.strip()\n            stderr = repr(stderr)\n            stderr = stderr.replace(\"'\", \"\")\n            stderr = stderr.replace(\"\\'\", \"\")\n            sql.update_provisioning_server_error(stderr, group, workspace, provider)\n            print('error: ' + stderr)\n        else:\n            print('ok')\n\nif (\n    form.getvalue('awsprovisining')\n    or form.getvalue('awseditingprovisining')\n    or form.getvalue('doprovisining')\n    or form.getvalue('doeditprovisining')\n    or form.getvalue('gcoreprovisining')\n    or form.getvalue('gcoreeditgprovisining')\n):\n    funct.check_user_group()\n\n    if form.getvalue('awsprovisining'):\n        workspace = form.getvalue('awsprovisining')\n        group = form.getvalue('aws_create_group')\n        provider_id = form.getvalue('aws_create_provider')\n        action = 'created'\n        cloud = 'aws'\n        state_name = 'aws_instance'\n    elif form.getvalue('awseditingprovisining'):\n        workspace = form.getvalue('awseditingprovisining')\n        group = form.getvalue('aws_edit_group')\n        provider_id = form.getvalue('aws_edit_provider')\n        action = 'modified'\n        cloud = 'aws'\n        state_name = 'aws_instance'\n    elif form.getvalue('doprovisining'):\n        workspace = form.getvalue('doprovisining')\n        group = form.getvalue('do_create_group')\n        provider_id = form.getvalue('do_create_provider')\n        action = 'created'\n        cloud = 'do'\n        state_name = 'digitalocean_droplet'\n    elif form.getvalue('doeditprovisining'):\n        workspace = form.getvalue('doeditprovisining')\n        group = form.getvalue('do_edit_group')\n        provider_id = form.getvalue('do_edit_provider')\n        action = 'modified'\n        cloud = 'do'\n        state_name = 'digitalocean_droplet'\n    elif form.getvalue('gcoreprovisining'):\n        workspace = form.getvalue('gcoreprovisining')\n        group = form.getvalue('gcore_create_group')\n        provider_id = form.getvalue('gcore_create_provider')\n        action = 'created'\n        cloud = 'gcore'\n        state_name = 'gcore_instance'\n    elif form.getvalue('gcoreeditgprovisining'):\n        workspace = form.getvalue('gcoreeditgprovisining')\n        group = form.getvalue('gcore_edit_group')\n        provider_id = form.getvalue('gcore_edit_provider')\n        action = 'modified'\n        cloud = 'gcore'\n        state_name = 'gcore_instance'\n\n    tfvars = workspace + '_' + group + '_' + cloud + '.tfvars'\n    cmd = 'cd scripts/terraform/ && sudo terraform apply -auto-approve -no-color -input=false -target=module.' + cloud + '_module -var-file vars/' + tfvars\n    output, stderr = funct.subprocess_execute(cmd)\n\n    if stderr != '':\n        stderr = stderr.strip()\n        stderr = repr(stderr)\n        stderr = stderr.replace(\"'\", \"\")\n        stderr = stderr.replace(\"\\'\", \"\")\n        sql.update_provisioning_server_status('Error', group, workspace, provider_id)\n        sql.update_provisioning_server_error(stderr, group, workspace, provider_id)\n        print('error: ' + stderr)\n    else:\n        if cloud == 'aws':\n            cmd = 'cd scripts/terraform/ && sudo terraform state show module.aws_module.aws_eip.floating_ip[0]|grep -Eo \"[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\"'\n            output, stderr = funct.subprocess_execute(cmd)\n            if stderr != '':\n                cmd = 'cd scripts/terraform/ && sudo terraform state show module.' + cloud + '_module.' + state_name + '.hapwi|grep -Eo \"[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\"'\n        else:\n            cmd = 'cd scripts/terraform/ && sudo terraform state show module.' + cloud + '_module.' + state_name + '.hapwi|grep -Eo \"[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\"'\n\n        output, stderr = funct.subprocess_execute(cmd)\n        ips = ''\n        for ip in output:\n            ips += ip\n            ips += ' '\n        print(ips)\n        sql.update_provisioning_server_status('Created', group, workspace, provider_id, update_ip=ips)\n\n        if cloud == 'gcore':\n            cmd = 'cd scripts/terraform/ && sudo terraform state show module.gcore_module.gcore_instance.hapwi|grep \"name\"|grep -v -e \"_name\\|name_\" |head -1 |awk -F\"\\\\\\\"\" \\'{print $2}\\''\n            output, stderr = funct.subprocess_execute(cmd)\n            print(':' + output[0])\n            sql.update_provisioning_server_gcore_name(workspace, output[0], group, provider_id)\n\n        funct.logging('localhost', 'Server ' + workspace + ' has been ' + action, provisioning=1)\n\nif form.getvalue('provisiningdestroyserver'):\n    funct.check_user_group()\n    server_id = form.getvalue('provisiningdestroyserver')\n    workspace = form.getvalue('servername')\n    group = form.getvalue('group')\n    cloud_type = form.getvalue('type')\n    provider_id = form.getvalue('provider_id')\n\n    tf_workspace = workspace + '_' + group + '_' + cloud_type\n\n    cmd = 'cd scripts/terraform/ && sudo terraform init -upgrade -no-color && sudo terraform workspace select ' + tf_workspace\n    output, stderr = funct.subprocess_execute(cmd)\n\n    if stderr != '':\n        stderr = stderr.strip()\n        stderr = repr(stderr)\n        stderr = stderr.replace(\"'\", \"\")\n        stderr = stderr.replace(\"\\'\", \"\")\n        sql.update_provisioning_server_status('Error', group, workspace, provider_id)\n        sql.update_provisioning_server_error(stderr, group, workspace, provider_id)\n        print('error: ' + stderr)\n    else:\n        cmd = 'cd scripts/terraform/ && sudo terraform destroy -auto-approve -no-color -target=module.' + cloud_type + '_module -var-file vars/' + tf_workspace + '.tfvars'\n        output, stderr = funct.subprocess_execute(cmd)\n\n        if stderr != '':\n            print('error: ' + stderr)\n        else:\n            cmd = 'cd scripts/terraform/ && sudo terraform workspace select default && sudo terraform workspace delete -force ' + tf_workspace\n            output, stderr = funct.subprocess_execute(cmd)\n\n            print('ok')\n            funct.logging('localhost', 'Server has been destroyed', provisioning=1)\n            sql.delete_provisioned_servers(server_id)\n\nif form.getvalue('gcorevars') or form.getvalue('gcoreeditvars'):\n    if form.getvalue('gcorevars'):\n        gcorevars = form.getvalue('gcorevars')\n        group = form.getvalue('gcore_create_group')\n        provider = form.getvalue('gcore_create_provider')\n        region = form.getvalue('gcore_create_regions')\n        project = form.getvalue('gcore_create_project')\n        size = form.getvalue('gcore_create_size')\n        oss = form.getvalue('gcore_create_oss')\n        ssh_name = form.getvalue('gcore_create_ssh_name')\n        volume_size = form.getvalue('gcore_create_volume_size')\n        volume_type = form.getvalue('gcore_create_volume_type')\n        delete_on_termination = form.getvalue('gcore_create_delete_on_termination')\n        network_name = form.getvalue('gcore_create_network_name')\n        firewall = form.getvalue('gcore_create_firewall')\n        network_type = form.getvalue('gcore_create_network_type')\n    elif form.getvalue('gcoreeditvars'):\n        gcorevars = form.getvalue('gcoreeditvars')\n        group = form.getvalue('gcore_edit_group')\n        provider = form.getvalue('gcore_edit_provider')\n        region = form.getvalue('gcore_edit_regions')\n        project = form.getvalue('gcore_edit_project')\n        size = form.getvalue('gcore_edit_size')\n        oss = form.getvalue('gcore_edit_oss')\n        ssh_name = form.getvalue('gcore_edit_ssh_name')\n        volume_size = form.getvalue('gcore_edit_volume_size')\n        volume_type = form.getvalue('gcore_edit_volume_type')\n        delete_on_termination = form.getvalue('gcore_edit_delete_on_termination')\n        network_name = form.getvalue('gcore_edit_network_name')\n        firewall = form.getvalue('gcore_edit_firewall')\n        network_type = form.getvalue('gcore_edit_network_type')\n\n    gcore_user, gcore_pass = sql.select_gcore_provider(provider)\n\n    cmd = 'cd scripts/terraform/ && sudo ansible-playbook var_generator.yml -i inventory -e \"region={} ' \\\n          'group={} size={} os={} network_name={} volume_size={} server_name={} username={} ' \\\n          'pass={} firewall={} network_type={} ssh_name={} delete_on_termination={} project={} volume_type={} ' \\\n          'cloud=gcore\"'.format(region, group, size, oss, network_name, volume_size, gcorevars, gcore_user, gcore_pass,\n                                firewall, network_type, ssh_name, delete_on_termination, project, volume_type)\n\n    output, stderr = funct.subprocess_execute(cmd)\n    if stderr != '':\n        print('error: ' + stderr)\n    else:\n        print('ok')\n\nif form.getvalue('gcorevalidate') or form.getvalue('gcoreeditvalidate'):\n    if form.getvalue('gcorevalidate'):\n        workspace = form.getvalue('gcorevalidate')\n        group = form.getvalue('gcore_create_group')\n    elif form.getvalue('gcoreeditvalidate'):\n        workspace = form.getvalue('gcoreeditvalidate')\n        group = form.getvalue('gcore_edit_group')\n\n    cmd = 'cd scripts/terraform/ && sudo terraform plan -no-color -input=false -target=module.gcore_module -var-file vars/' + workspace + '_' + group + '_gcore.tfvars'\n    output, stderr = funct.subprocess_execute(cmd)\n    if stderr != '':\n        print('error: ' + stderr)\n    else:\n        print('ok')\n\nif form.getvalue('gcoreworkspace'):\n    workspace = form.getvalue('gcoreworkspace')\n    group = form.getvalue('gcore_create_group')\n    provider = form.getvalue('gcore_create_provider')\n    region = form.getvalue('gcore_create_regions')\n    project = form.getvalue('gcore_create_project')\n    size = form.getvalue('gcore_create_size')\n    oss = form.getvalue('gcore_create_oss')\n    ssh_name = form.getvalue('gcore_create_ssh_name')\n    volume_size = form.getvalue('gcore_create_volume_size')\n    volume_type = form.getvalue('gcore_create_volume_type')\n    delete_on_termination = form.getvalue('gcore_create_delete_on_termination')\n    network_type = form.getvalue('gcore_create_network_type')\n    firewall = form.getvalue('gcore_create_firewall')\n    network_name = form.getvalue('gcore_create_network_name')\n\n    cmd = 'cd scripts/terraform/ && sudo terraform workspace new ' + workspace + '_' + group + '_gcore'\n    output, stderr = funct.subprocess_execute(cmd)\n\n    if stderr != '':\n        stderr = stderr.strip()\n        stderr = repr(stderr)\n        stderr = stderr.replace(\"'\", \"\")\n        stderr = stderr.replace(\"\\'\", \"\")\n        sql.update_provisioning_server_status('Error', group, workspace, provider)\n        sql.update_provisioning_server_error(stderr, group, workspace, provider)\n        print('error: ' + stderr)\n    else:\n        if sql.add_server_gcore(\n                project, region, size, network_type, network_name, volume_size, ssh_name, workspace, oss, firewall,\n                provider, group, 'Creating', delete_on_termination, volume_type\n        ):\n\n            from jinja2 import Environment, FileSystemLoader\n\n            user, user_id, role, token, servers, user_services = funct.get_users_params()\n            new_server = sql.select_provisioned_servers(new=workspace, group=group, type='gcore')\n\n            env = Environment(extensions=[\"jinja2.ext.do\"], loader=FileSystemLoader('templates'))\n            template = env.get_template('ajax/provisioning/provisioned_servers.html')\n            template = template.render(servers=new_server,\n                                       groups=sql.select_groups(),\n                                       user_group=group,\n                                       providers=sql.select_providers(group),\n                                       role=role,\n                                       adding=1)\n            print(template)\n\nif form.getvalue('gcoreeditworkspace'):\n    workspace = form.getvalue('gcoreeditworkspace')\n    group = form.getvalue('gcore_edit_group')\n    provider = form.getvalue('gcore_edit_provider')\n    region = form.getvalue('gcore_edit_regions')\n    project = form.getvalue('gcore_edit_project')\n    size = form.getvalue('gcore_edit_size')\n    oss = form.getvalue('gcore_edit_oss')\n    ssh_name = form.getvalue('gcore_edit_ssh_name')\n    volume_size = form.getvalue('gcore_edit_volume_size')\n    volume_type = form.getvalue('gcore_edit_volume_type')\n    delete_on_termination = form.getvalue('gcore_edit_delete_on_termination')\n    network_type = form.getvalue('gcore_edit_network_type')\n    firewall = form.getvalue('gcore_edit_firewall')\n    network_name = form.getvalue('gcore_edit_network_name')\n    server_id = form.getvalue('server_id')\n\n    if sql.update_server_gcore(\n            region, size, network_type, network_name, volume_size, ssh_name, workspace, oss, firewall,\n            provider, group, 'Editing', server_id, delete_on_termination, volume_type, project\n    ):\n\n        try:\n            cmd = 'cd scripts/terraform/ && sudo terraform workspace select ' + workspace + '_' + group + '_gcore'\n            output, stderr = funct.subprocess_execute(cmd)\n        except Exception as e:\n            print('error: ' + str(e))\n\n        if stderr != '':\n            stderr = stderr.strip()\n            stderr = repr(stderr)\n            stderr = stderr.replace(\"'\", \"\")\n            stderr = stderr.replace(\"\\'\", \"\")\n            sql.update_provisioning_server_error(stderr, group, workspace, provider)\n            print('error: ' + stderr)\n        else:\n            print('ok')\n\nif form.getvalue('editAwsServer'):\n    funct.check_user_group()\n    server_id = form.getvalue('editAwsServer')\n    user_group = form.getvalue('editAwsGroup')\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(extensions=[\"jinja2.ext.do\"], loader=FileSystemLoader('templates'))\n    template = env.get_template('ajax/provisioning/aws_edit_dialog.html')\n    template = template.render(server=sql.select_aws_server(server_id=server_id), providers=sql.select_providers(int(user_group)))\n    print(template)\n\nif form.getvalue('editGcoreServer'):\n    funct.check_user_group()\n    server_id = form.getvalue('editGcoreServer')\n    user_group = form.getvalue('editGcoreGroup')\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(extensions=[\"jinja2.ext.do\"], loader=FileSystemLoader('templates'))\n    template = env.get_template('ajax/provisioning/gcore_edit_dialog.html')\n    template = template.render(server=sql.select_gcore_server(server_id=server_id), providers=sql.select_providers(int(user_group)))\n    print(template)\n\nif form.getvalue('editDoServer'):\n    funct.check_user_group()\n    server_id = form.getvalue('editDoServer')\n    user_group = form.getvalue('editDoGroup')\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(extensions=[\"jinja2.ext.do\"], loader=FileSystemLoader('templates'))\n    template = env.get_template('ajax/provisioning/do_edit_dialog.html')\n    template = template.render(server=sql.select_do_server(server_id=server_id), providers=sql.select_providers(int(user_group)))\n    print(template)\n\nif form.getvalue('edit_do_provider'):\n    funct.check_user_group()\n    provider_id = form.getvalue('edit_do_provider')\n    new_name = form.getvalue('edit_do_provider_name')\n    new_token = form.getvalue('edit_do_provider_token')\n\n    if sql.update_do_provider(new_name, new_token, provider_id):\n        print('ok')\n        funct.logging('localhost', 'Provider has been renamed. New name is ' + new_name, provisioning=1)\n\nif form.getvalue('edit_gcore_provider'):\n    funct.check_user_group()\n    provider_id = form.getvalue('edit_gcore_provider')\n    new_name = form.getvalue('edit_gcore_provider_name')\n    new_user = form.getvalue('edit_gcore_provider_user')\n    new_pass = form.getvalue('edit_gcore_provider_pass')\n\n    if sql.update_gcore_provider(new_name, new_user, new_pass, provider_id):\n        print('ok')\n        funct.logging('localhost', 'Provider has been renamed. New name is ' + new_name, provisioning=1)\n\nif form.getvalue('edit_aws_provider'):\n    funct.check_user_group()\n    provider_id = form.getvalue('edit_aws_provider')\n    new_name = form.getvalue('edit_aws_provider_name')\n    new_key = form.getvalue('edit_aws_provider_key')\n    new_secret = form.getvalue('edit_aws_provider_secret')\n\n    if sql.update_aws_provider(new_name, new_key, new_secret, provider_id):\n        print('ok')\n        funct.logging('localhost', 'Provider has been renamed. New name is ' + new_name, provisioning=1)\n\nif form.getvalue('loadservices'):\n    from jinja2 import Environment, FileSystemLoader\n    env = Environment(loader=FileSystemLoader('templates'))\n    template = env.get_template('ajax/load_services.html')\n    services = funct.get_services_status()\n\n    template = template.render(services=services)\n    print(template)\n\nif form.getvalue('loadchecker'):\n    from jinja2 import Environment, FileSystemLoader\n    env = Environment(loader=FileSystemLoader('templates'), autoescape=True)\n    template = env.get_template('ajax/load_telegram.html')\n    services = funct.get_services_status()\n    groups = sql.select_groups()\n    page = form.getvalue('page')\n\n    try:\n        user_status, user_plan = funct.return_user_status()\n    except Exception as e:\n        user_status, user_plan = 0, 0\n        funct.logging('localhost', 'Cannot get a user plan: ' + str(e), haproxywi=1)\n    if user_status:\n        haproxy_settings = sql.select_checker_settings(1)\n        nginx_settings = sql.select_checker_settings(2)\n        keepalived_settings = sql.select_checker_settings(3)\n        apache_settings = sql.select_checker_settings(4)\n        if page == 'servers.py':\n            user_group = funct.get_user_group(id=1)\n            telegrams = sql.get_user_telegram_by_group(user_group)\n            slacks = sql.get_user_slack_by_group(user_group)\n            haproxy_servers = sql.get_dick_permit(haproxy=1, only_group=1)\n            nginx_servers = sql.get_dick_permit(nginx=1, only_group=1)\n            apache_servers = sql.get_dick_permit(apache=1, only_group=1)\n            keepalived_servers = sql.get_dick_permit(keepalived=1, only_group=1)\n        else:\n            telegrams = sql.select_telegram()\n            slacks = sql.select_slack()\n            haproxy_servers = sql.get_dick_permit(haproxy=1)\n            nginx_servers = sql.get_dick_permit(nginx=1)\n            apache_servers = sql.get_dick_permit(apache=1)\n            keepalived_servers = sql.get_dick_permit(keepalived=1)\n    else:\n        telegrams = ''\n        slacks = ''\n\n    template = template.render(services=services,\n                               telegrams=telegrams,\n                               groups=groups,\n                               slacks=slacks,\n                               user_status=user_status,\n                               user_plan=user_plan,\n                               haproxy_servers=haproxy_servers,\n                               nginx_servers=nginx_servers,\n                               apache_servers=apache_servers,\n                               keepalived_servers=keepalived_servers,\n                               haproxy_settings=haproxy_settings,\n                               nginx_settings=nginx_settings,\n                               keepalived_settings=keepalived_settings,\n                               apache_settings=apache_settings,\n                               page=page)\n    print(template)\n\nif form.getvalue('load_update_hapwi'):\n    from jinja2 import Environment, FileSystemLoader\n    env = Environment(loader=FileSystemLoader('templates'))\n    template = env.get_template('ajax/load_updatehapwi.html')\n\n    versions = funct.versions()\n    checker_ver = funct.check_new_version(service='checker')\n    smon_ver = funct.check_new_version(service='smon')\n    metrics_ver = funct.check_new_version(service='metrics')\n    keep_ver = funct.check_new_version(service='keep')\n    portscanner_ver = funct.check_new_version(service='portscanner')\n    socket_ver = funct.check_new_version(service='socket')\n    services = funct.get_services_status()\n\n    template = template.render(services=services,\n                               versions=versions,\n                               checker_ver=checker_ver,\n                               smon_ver=smon_ver,\n                               metrics_ver=metrics_ver,\n                               portscanner_ver=portscanner_ver,\n                               socket_ver=socket_ver,\n                               keep_ver=keep_ver)\n    print(template)\n\nif form.getvalue('loadopenvpn'):\n    import distro\n    from jinja2 import Environment, FileSystemLoader\n    env = Environment(loader=FileSystemLoader('templates'))\n    template = env.get_template('ajax/load_openvpn.html')\n    openvpn_configs = ''\n    openvpn_sess = ''\n    openvpn = ''\n\n    if distro.id() == 'ubuntu':\n        stdout, stderr = funct.subprocess_execute(\"apt show openvpn3 2>&1|grep E:\")\n    elif distro.id() == 'centos' or distro.id() == 'rhel':\n        stdout, stderr = funct.subprocess_execute(\"rpm --query openvpn3-client\")\n\n    if (\n        (stdout[0] != 'package openvpn3-client is not installed' and stderr != '/bin/sh: rpm: command not found')\n        and stdout[0] != 'E: No packages found'\n    ):\n        cmd = \"sudo openvpn3 configs-list |grep -E 'ovpn|(^|[^0-9])[0-9]{4}($|[^0-9])' |grep -v net|awk -F\\\"    \\\" '{print $1}'|awk 'ORS=NR%2?\\\" \\\":\\\"\\\\n\\\"'\"\n        openvpn_configs, stderr = funct.subprocess_execute(cmd)\n        cmd = \"sudo openvpn3 sessions-list|grep -E 'Config|Status'|awk -F\\\":\\\" '{print $2}'|awk 'ORS=NR%2?\\\" \\\":\\\"\\\\n\\\"'| sed 's/^ //g'\"\n        openvpn_sess, stderr = funct.subprocess_execute(cmd)\n        openvpn = stdout[0]\n\n    template = template.render(openvpn=openvpn,\n                               openvpn_sess=openvpn_sess,\n                               openvpn_configs=openvpn_configs)\n    print(template)\n\nif form.getvalue('check_telegram'):\n    telegram_id = form.getvalue('check_telegram')\n    mess = 'Test message from Roxy-WI'\n    funct.telegram_send_mess(mess, telegram_channel_id=telegram_id)\n\nif form.getvalue('check_slack'):\n    slack_id = form.getvalue('check_slack')\n    mess = 'Test message from Roxy-WI'\n    funct.slack_send_mess(mess, slack_channel_id=slack_id)\n\nif form.getvalue('check_rabbitmq_alert'):\n    import json\n    import http.cookies\n\n    try:\n        cookie = http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\"))\n        user_group_id = cookie.get('group')\n        user_group_id1 = user_group_id.value\n    except Exception as e:\n        error = str(e)\n        print(f'error: Cannot send a message {error}')\n\n    try:\n        json_for_sending = {\"user_group\": user_group_id1, \"message\": 'info: Test message'}\n        funct.send_message_to_rabbit(json.dumps(json_for_sending))\n    except Exception as e:\n        error = str(e)\n        print(f'error: Cannot send a message {error}')\n\nif form.getvalue('check_email_alert'):\n    import http.cookies\n    subject = 'test message'\n    message = 'Test message from Roxy-WI'\n\n    try:\n        cookie = http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\"))\n        user_uuid = cookie.get('uuid')\n        user_uuid_value = user_uuid.value\n    except Exception as e:\n        error = str(e)\n        print(f'error: Cannot send a message {error}')\n\n    try:\n        user_email = sql.select_user_email_by_uuid(user_uuid_value)\n    except Exception as e:\n        error = str(e)\n        print(f'error: Cannot get a user email: {error}')\n\n    try:\n        funct.send_email(user_email, subject, message)\n    except Exception as e:\n        error = str(e)\n        print(f'error: Cannot send a message {error}')\n\nif form.getvalue('getoption'):\n    group = form.getvalue('getoption')\n    term = form.getvalue('term')\n    options = sql.select_options(group=group, term=term)\n\n    a = {}\n    v = 0\n\n    for i in options:\n        a[v] = i.options\n        v = v + 1\n    import json\n    print(json.dumps(a))\n\n\nif form.getvalue('newtoption'):\n    option = form.getvalue('newtoption')\n    group = form.getvalue('newoptiongroup')\n    if option is None or group is None:\n        print(error_mess)\n    else:\n        if sql.insert_new_option(option, group):\n            from jinja2 import Environment, FileSystemLoader\n\n            env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n            template = env.get_template('/new_option.html')\n\n            template = template.render(options=sql.select_options(option=option))\n            print(template)\n\n\nif form.getvalue('updateoption') is not None:\n    option = form.getvalue('updateoption')\n    option_id = form.getvalue('id')\n    if option is None or option_id is None:\n        print(error_mess)\n    else:\n        sql.update_options(option, option_id)\n\n\nif form.getvalue('optiondel') is not None:\n    if sql.delete_option(form.getvalue('optiondel')):\n        print(\"Ok\")\n\n\nif form.getvalue('getsavedserver'):\n    group = form.getvalue('getsavedserver')\n    term = form.getvalue('term')\n    servers = sql.select_saved_servers(group=group, term=term)\n\n    a = {}\n    v = 0\n    for i in servers:\n        a[v] = {}\n        a[v]['value'] = {}\n        a[v]['desc'] = {}\n        a[v]['value'] = i.server\n        a[v]['desc'] = i.description\n        v = v + 1\n    import json\n    print(json.dumps(a))\n\n\nif form.getvalue('newsavedserver'):\n    savedserver = form.getvalue('newsavedserver')\n    description = form.getvalue('newsavedserverdesc')\n    group = form.getvalue('newsavedservergroup')\n    if savedserver is None or group is None:\n        print(error_mess)\n    else:\n        if sql.insert_new_savedserver(savedserver, description, group):\n            from jinja2 import Environment, FileSystemLoader\n\n            env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n            template = env.get_template('/new_saved_servers.html')\n\n            template = template.render(server=sql.select_saved_servers(server=savedserver))\n            print(template)\n\n\nif form.getvalue('updatesavedserver') is not None:\n    savedserver = form.getvalue('updatesavedserver')\n    description = form.getvalue('description')\n    savedserver_id = form.getvalue('id')\n    if savedserver is None or savedserver_id is None:\n        print(error_mess)\n    else:\n        sql.update_savedserver(savedserver, description, savedserver_id)\n\n\nif form.getvalue('savedserverdel') is not None:\n    if sql.delete_savedserver(form.getvalue('savedserverdel')):\n        print(\"Ok\")\n\nif form.getvalue('show_users_ovw') is not None:\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n    template = env.get_template('/show_users_ovw.html')\n\n    user, user_id, role, token, servers, user_services = funct.get_users_params()\n    users_groups = sql.select_user_groups_with_names(1, all=1)\n    user_group = funct.get_user_group(id=1)\n\n    if (role == 2 or role == 3) and int(user_group) != 1:\n        users = sql.select_users(group=user_group)\n    else:\n        users = sql.select_users()\n\n    template = template.render(users=users, users_groups=users_groups)\n    print(template)\n\n\nif form.getvalue('serverSettings') is not None:\n    server_id = form.getvalue('serverSettings')\n    service = form.getvalue('serverSettingsService')\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True)\n    template = env.get_template('ajax/show_service_settings.html')\n\n    template = template.render(settings=sql.select_service_settings(server_id, service), service=service)\n    print(template)\n\n\nif form.getvalue('serverSettingsSave') is not None:\n    server_id = form.getvalue('serverSettingsSave')\n    service = form.getvalue('serverSettingsService')\n    haproxy_enterprise = form.getvalue('serverSettingsEnterprise')\n    haproxy_dockerized = form.getvalue('serverSettingshaproxy_dockerized')\n    nginx_dockerized = form.getvalue('serverSettingsnginx_dockerized')\n    apache_dockerized = form.getvalue('serverSettingsapache_dockerized')\n    server_ip = sql.select_server_ip_by_id(server_id)\n\n    if service == 'haproxy':\n        if sql.insert_or_update_service_setting(server_id, service, 'haproxy_enterprise', haproxy_enterprise):\n            print('Ok')\n            if haproxy_enterprise == '1':\n                funct.logging(server_ip, 'Service has been flagged as an Enterprise version', haproxywi=1, login=1,\n                              keep_history=1, service=service)\n            else:\n                funct.logging(server_ip, 'Service has been flagged as a community version', haproxywi=1, login=1,\n                              keep_history=1, service=service)\n        if sql.insert_or_update_service_setting(server_id, service, 'dockerized', haproxy_dockerized):\n            print('Ok')\n            if haproxy_dockerized == '1':\n                funct.logging(server_ip, 'Service has been flagged as a dockerized', haproxywi=1, login=1,\n                              keep_history=1, service=service)\n            else:\n                funct.logging(server_ip, 'Service has been flagged as a system service', haproxywi=1, login=1,\n                              keep_history=1, service=service)\n\n    if service == 'nginx':\n        if sql.insert_or_update_service_setting(server_id, service, 'dockerized', nginx_dockerized):\n            print('Ok')\n            if nginx_dockerized:\n                funct.logging(server_ip, 'Service has been flagged as a dockerized', haproxywi=1, login=1,\n                              keep_history=1, service=service)\n            else:\n                funct.logging(server_ip, 'Service has been flagged as a system service', haproxywi=1, login=1,\n                              keep_history=1, service=service)\n\n    if service == 'apache':\n        if sql.insert_or_update_service_setting(server_id, service, 'dockerized', apache_dockerized):\n            print('Ok')\n            if apache_dockerized:\n                funct.logging(server_ip, 'Service has been flagged as a dockerized', haproxywi=1, login=1,\n                              keep_history=1, service=service)\n            else:\n                funct.logging(server_ip, 'Service has been flagged as a system service', haproxywi=1, login=1,\n                              keep_history=1, service=service)\n\nif act == 'showListOfVersion':\n    service = form.getvalue('service')\n    configver = form.getvalue('configver')\n    for_delver = form.getvalue('for_delver')\n    style = form.getvalue('style')\n    users = sql.select_users()\n\n    if service == 'keepalived':\n        configs_dir = funct.get_config_var('configs', 'kp_save_configs_dir')\n        files = funct.get_files(dir=configs_dir, format='conf')\n        configs = sql.select_config_version(serv, service)\n        action = 'versions.py?service=keepalived'\n    elif service == 'nginx':\n        configs_dir = funct.get_config_var('configs', 'nginx_save_configs_dir')\n        files = funct.get_files(dir=configs_dir, format='conf')\n        configs = sql.select_config_version(serv, service)\n        action = 'versions.py?service=nginx'\n    elif service == 'apache':\n        configs_dir = funct.get_config_var('configs', 'apache_save_configs_dir')\n        files = funct.get_files(dir=configs_dir, format='conf')\n        configs = sql.select_config_version(serv, service)\n        action = 'versions.py?service=apache'\n    else:\n        service = 'haproxy'\n        files = funct.get_files()\n        configs = sql.select_config_version(serv, service)\n        action = \"versions.py\"\n\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True,\n                      extensions=[\"jinja2.ext.loopcontrols\", \"jinja2.ext.do\"])\n    template = env.get_template('ajax/show_list_version.html')\n\n    template = template.render(serv=serv,\n                               service=service,\n                               action=action,\n                               return_files=files,\n                               configver=configver,\n                               for_delver=for_delver,\n                               configs=configs,\n                               users=users,\n                               style=style)\n    print(template)\n\nif act == 'getSystemInfo':\n    server_ip = form.getvalue('server_ip')\n    server_ip = funct.is_ip_or_dns(server_ip)\n    server_id = form.getvalue('server_id')\n\n    if server_ip == '':\n        print('error: IP or DNS name is not valid')\n        sys.exit()\n\n    from jinja2 import Environment, FileSystemLoader\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True,\n                      extensions=[\"jinja2.ext.loopcontrols\", \"jinja2.ext.do\"])\n    env.globals['string_to_dict'] = funct.string_to_dict\n    template = env.get_template('ajax/show_system_info.html')\n    if sql.is_system_info(server_id):\n        if funct.get_system_info(server_ip):\n            system_info = sql.select_one_system_info(server_id)\n\n            template = template.render(system_info=system_info, server_ip=server_ip, server_id=server_id)\n            print(template)\n        else:\n            print('error: Cannot update server info')\n    else:\n        system_info = sql.select_one_system_info(server_id)\n\n        template = template.render(system_info=system_info, server_ip=server_ip, server_id=server_id)\n        print(template)\n\n\nif act == 'updateSystemInfo':\n    server_ip = form.getvalue('server_ip')\n    server_ip = funct.is_ip_or_dns(server_ip)\n    server_id = form.getvalue('server_id')\n\n    if server_ip == '':\n        print('error: IP or DNS name is not valid')\n        sys.exit()\n\n    sql.delete_system_info(server_id)\n\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True,\n                      extensions=[\"jinja2.ext.loopcontrols\", \"jinja2.ext.do\"])\n    env.globals['string_to_dict'] = funct.string_to_dict\n    template = env.get_template('ajax/show_system_info.html')\n\n    if funct.get_system_info(server_ip):\n        system_info = sql.select_one_system_info(server_id)\n\n        template = template.render(system_info=system_info, server_ip=server_ip, server_id=server_id)\n        print(template)\n    else:\n        print('error: Cannot update server info')\n\nif act == 'findInConfigs':\n    server_ip = serv\n    server_ip = funct.is_ip_or_dns(server_ip)\n    finding_words = form.getvalue('words')\n    service = form.getvalue('service')\n    log_path = sql.get_setting(service + '_dir')\n    log_path = funct.return_nice_path(log_path)\n    commands = ['sudo grep \"%s\" %s*/*.conf -C 2 -Rn' % (finding_words, log_path)]\n    return_find = funct.ssh_command(server_ip, commands, raw='1')\n    return_find = funct.show_finding_in_config(return_find, grep=finding_words)\n\n    if 'error: ' in return_find:\n        print(return_find)\n        sys.exit()\n    print(return_find)\n\nif act == 'check_service':\n    import http.cookies\n    cookie = http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\"))\n    user_uuid = cookie.get('uuid')\n    user_id = sql.get_user_id_by_uuid(user_uuid.value)\n    user_services = sql.select_user_services(user_id)\n    server_id = form.getvalue('server_id')\n    service = form.getvalue('service')\n\n    if funct.checkAjaxInput(server_id) or funct.checkAjaxInput(service):\n        print('error: Nice try')\n        sys.exit()\n\n    if '1' in user_services:\n        if service == 'haproxy':\n            haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n            cmd = 'echo \"show info\" |nc %s %s -w 1 -v|grep Name' % (serv, haproxy_sock_port)\n            out = funct.subprocess_execute(cmd)\n            for k in out[0]:\n                if \"Name\" in k:\n                    print('up')\n                    break\n            else:\n                print('down')\n    if '2' in user_services:\n        if service == 'nginx':\n            import socket\n            from contextlib import closing\n\n            nginx_stats_port = sql.get_setting('nginx_stats_port')\n\n            with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as sock:\n                sock.settimeout(5)\n\n                try:\n                    if sock.connect_ex((serv, nginx_stats_port)) == 0:\n                        print('up')\n                    else:\n                        print('down')\n                except Exception:\n                    print('down')\n    if '4' in user_services:\n        if service == 'apache':\n            import socket\n            from contextlib import closing\n\n            apache_stats_port = sql.get_setting('apache_stats_port')\n\n            with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as sock:\n                sock.settimeout(5)\n\n                try:\n                    if sock.connect_ex((serv, apache_stats_port)) == 0:\n                        print('up')\n                    else:\n                        print('down')\n                except Exception as e:\n                    print('down' + str(e))\n\nif form.getvalue('show_sub_ovw'):\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True)\n    template = env.get_template('ajax/show_sub_ovw.html')\n    template = template.render(sub=sql.select_user_all())\n    print(template)\n\n\nif form.getvalue('updateHaproxyCheckerSettings'):\n    setting_id = form.getvalue('updateHaproxyCheckerSettings')\n    email = form.getvalue('email')\n    service_alert = form.getvalue('server')\n    backend_alert = form.getvalue('backend')\n    maxconn_alert = form.getvalue('maxconn')\n    telegram_id = form.getvalue('telegram_id')\n    slack_id = form.getvalue('slack_id')\n\n    if sql.update_haproxy_checker_settings(email, telegram_id, slack_id, service_alert, backend_alert,\n                                           maxconn_alert, setting_id):\n        print('ok')\n    else:\n        print('error: Cannot update Checker settings')\n\nif form.getvalue('updateKeepalivedCheckerSettings'):\n    setting_id = form.getvalue('updateKeepalivedCheckerSettings')\n    email = form.getvalue('email')\n    service_alert = form.getvalue('server')\n    backend_alert = form.getvalue('backend')\n    telegram_id = form.getvalue('telegram_id')\n    slack_id = form.getvalue('slack_id')\n\n    if sql.update_keepalived_checker_settings(email, telegram_id, slack_id, service_alert, backend_alert, setting_id):\n        print('ok')\n    else:\n        print('error: Cannot update Checker settings')\n\nif form.getvalue('updateServiceCheckerSettings'):\n    setting_id = form.getvalue('updateServiceCheckerSettings')\n    email = form.getvalue('email')\n    service_alert = form.getvalue('server')\n    telegram_id = form.getvalue('telegram_id')\n    slack_id = form.getvalue('slack_id')\n\n    if sql.update_service_checker_settings(email, telegram_id, slack_id, service_alert, setting_id):\n        print('ok')\n    else:\n        print('error: Cannot update Checker settings')\n"], "fixing_code": ["#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport os\nimport sys\n\nimport funct\nimport sql\n\nform = funct.form\nserv = funct.is_ip_or_dns(form.getvalue('serv'))\nact = form.getvalue(\"act\")\n\nif (\n        form.getvalue('new_metrics')\n        or form.getvalue('new_http_metrics')\n        or form.getvalue('new_waf_metrics')\n        or form.getvalue('new_nginx_metrics')\n        or form.getvalue('new_apache_metrics')\n        or form.getvalue('metrics_hapwi_ram')\n        or form.getvalue('metrics_hapwi_cpu')\n        or form.getvalue('getoption')\n        or form.getvalue('getsavedserver')\n):\n    print('Content-type: application/json\\n')\nelse:\n    print('Content-type: text/html\\n')\n\nif act == \"checkrestart\":\n    servers = sql.get_dick_permit(ip=serv)\n    for server in servers:\n        if server != \"\":\n            print(\"ok\")\n            sys.exit()\n    sys.exit()\n\nfrom uuid import UUID\ntoken = form.getvalue(\"token\")\n\ntry:\n    uuid_obj = UUID(token, version=4)\nexcept ValueError:\n    print('error: Your token is not valid')\n    sys.exit()\n\nif not sql.check_token_exists(token):\n    print('error: Your token has been expired')\n    sys.exit()\n\nif form.getvalue('getcerts') is not None and serv is not None:\n    cert_path = sql.get_setting('cert_path')\n    commands = [\"sudo ls -1t \" + cert_path + \" |grep -E 'pem|crt|key'\"]\n    try:\n        funct.ssh_command(serv, commands, ip=\"1\")\n    except Exception as e:\n        print('error: Cannot connect to the server: ' + e.args[0])\n\nif form.getvalue('checkSshConnect') is not None and serv is not None:\n    try:\n        print(funct.ssh_command(serv, [\"ls -1t\"]))\n    except Exception as e:\n        print(e)\n\nif form.getvalue('getcert') is not None and serv is not None:\n    cert_id = funct.checkAjaxInput(form.getvalue('getcert'))\n\n    cert_path = sql.get_setting('cert_path')\n    commands = [\"openssl x509 -in \" + cert_path + \"/\" + cert_id + \" -text\"]\n    try:\n        funct.ssh_command(serv, commands, ip=\"1\")\n    except Exception as e:\n        print('error: Cannot connect to the server ' + e.args[0])\n\nif form.getvalue('delcert') is not None and serv is not None:\n    cert_id = form.getvalue('delcert')\n    cert_id = funct.checkAjaxInput(cert_id)\n    cert_path = sql.get_setting('cert_path')\n    commands = [\"sudo rm -f \" + cert_path + \"/\" + cert_id]\n    try:\n        funct.ssh_command(serv, commands, ip=\"1\")\n    except Exception as e:\n        print('error: Cannot delete the certificate ' + e.args[0])\n\nif serv and form.getvalue('ssl_cert'):\n    cert_local_dir = os.path.dirname(os.getcwd()) + \"/\" + sql.get_setting('ssl_local_path')\n    cert_path = sql.get_setting('cert_path')\n    name = ''\n\n    if not os.path.exists(cert_local_dir):\n        os.makedirs(cert_local_dir)\n\n    if form.getvalue('ssl_name') is None:\n        print('error: Please enter a desired name')\n    else:\n        name = funct.checkAjaxInput(form.getvalue('ssl_name'))\n\n    try:\n        with open(name, \"w\") as ssl_cert:\n            ssl_cert.write(form.getvalue('ssl_cert'))\n    except IOError as e:\n        print('error: Cannot save the SSL key file. Check a SSH key path in config ' + e.args[0])\n\n    MASTERS = sql.is_master(serv)\n    for master in MASTERS:\n        if master[0] is not None:\n            funct.upload(master[0], cert_path, name)\n            print('success: the SSL file has been uploaded to %s into: %s%s <br/>' % (master[0], cert_path, '/' + name))\n    try:\n        error = funct.upload(serv, cert_path, name)\n        print('success: the SSL file has been uploaded to %s into: %s%s' % (serv, cert_path, '/' + name))\n    except Exception as e:\n        funct.logging('localhost', e.args[0], haproxywi=1)\n    try:\n        os.system(\"mv %s %s\" % (name, cert_local_dir))\n    except OSError as e:\n        funct.logging('localhost', e.args[0], haproxywi=1)\n\n    funct.logging(serv, \"add.py#ssl uploaded a new SSL cert %s\" % name, haproxywi=1, login=1)\n\nif form.getvalue('backend') is not None:\n    funct.show_backends(serv)\n\nif form.getvalue('ip_select') is not None:\n    funct.show_backends(serv)\n\nif form.getvalue('ipbackend') is not None and form.getvalue('backend_server') is None:\n    haproxy_sock_port = int(sql.get_setting('haproxy_sock_port'))\n    backend = funct.checkAjaxInput(form.getvalue('ipbackend'))\n    cmd = 'echo \"show servers state\"|nc %s %s |grep \"%s\" |awk \\'{print $4}\\'' % (serv, haproxy_sock_port, backend)\n    output, stderr = funct.subprocess_execute(cmd)\n    for i in output:\n        if i == ' ':\n            continue\n        i = i.strip()\n        print(i + '<br>')\n\nif form.getvalue('ipbackend') is not None and form.getvalue('backend_server') is not None:\n    haproxy_sock_port = int(sql.get_setting('haproxy_sock_port'))\n    backend = funct.checkAjaxInput(form.getvalue('ipbackend'))\n    backend_server = funct.checkAjaxInput(form.getvalue('backend_server'))\n    cmd = 'echo \"show servers state\"|nc %s %s |grep \"%s\" |grep \"%s\" |awk \\'{print $5\":\"$19}\\' |head -1' % (serv, haproxy_sock_port, backend, backend_server)\n    output, stderr = funct.subprocess_execute(cmd)\n    print(output[0])\n\nif form.getvalue('backend_ip') is not None:\n    backend_backend = funct.checkAjaxInput(form.getvalue('backend_backend'))\n    backend_server = funct.checkAjaxInput(form.getvalue('backend_server'))\n    backend_ip = funct.checkAjaxInput(form.getvalue('backend_ip'))\n    backend_port = funct.checkAjaxInput(form.getvalue('backend_port'))\n\n    if form.getvalue('backend_ip') is None:\n        print('error: Backend IP must be IP and not 0')\n        sys.exit()\n\n    if form.getvalue('backend_port') is None:\n        print('error: The backend port must be integer and not 0')\n        sys.exit()\n\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n\n    MASTERS = sql.is_master(serv)\n    for master in MASTERS:\n        if master[0] is not None:\n            cmd = 'echo \"set server %s/%s addr %s port %s check-port %s\" |nc %s %s' % (\n                backend_backend, backend_server, backend_ip, backend_port, backend_port, master[0], haproxy_sock_port)\n            output, stderr = funct.subprocess_execute(cmd)\n            print(output[0])\n            funct.logging(\n                master[0], 'IP address and port have been changed. On: {}/{} to {}:{}'.format(\n                    backend_backend, backend_server, backend_ip, backend_port\n                ),\n                login=1, keep_history=1, service='haproxy'\n            )\n\n    cmd = 'echo \"set server %s/%s addr %s port %s check-port %s\" |nc %s %s' % (\n        backend_backend, backend_server, backend_ip, backend_port, backend_port, serv, haproxy_sock_port)\n    funct.logging(\n        serv,\n        'IP address and port have been changed. On: {}/{} to {}:{}'.format(backend_backend, backend_server, backend_ip, backend_port),\n        login=1, keep_history=1, service='haproxy'\n    )\n    output, stderr = funct.subprocess_execute(cmd)\n\n    if stderr != '':\n        print('error: ' + stderr[0])\n    else:\n        print(output[0])\n        configs_dir = funct.get_config_var('configs', 'haproxy_save_configs_dir')\n        cfg = configs_dir + serv + \"-\" + funct.get_data('config') + \".cfg\"\n\n        error = funct.get_config(serv, cfg)\n        cmd = 'string=`grep %s %s -n -A25 |grep \"server %s\" |head -1|awk -F\"-\" \\'{print $1}\\'` ' \\\n                '&& sed -Ei \"$( echo $string)s/((1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.){3}(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5]):[0-9]+/%s:%s/g\" %s' % \\\n              (backend_backend, cfg, backend_server, backend_ip, backend_port, cfg)\n        output, stderr = funct.subprocess_execute(cmd)\n        stderr = funct.master_slave_upload_and_restart(serv, cfg, just_save='save')\n\nif form.getvalue('maxconn_select') is not None:\n    serv = funct.checkAjaxInput(form.getvalue('maxconn_select'))\n    funct.get_backends_from_config(serv, backends='frontend')\n\nif form.getvalue('maxconn_frontend') is not None:\n    frontend = funct.checkAjaxInput(form.getvalue('maxconn_frontend'))\n    maxconn = funct.checkAjaxInput(form.getvalue('maxconn_int'))\n\n    if form.getvalue('maxconn_int') is None:\n        print('error: Maxconn must be integer and not 0')\n        sys.exit()\n\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n\n    MASTERS = sql.is_master(serv)\n    for master in MASTERS:\n        if master[0] is not None:\n            if frontend == 'global':\n                cmd = 'echo \"set maxconn %s %s\" |nc %s %s' % (frontend, maxconn, master[0], haproxy_sock_port)\n            else:\n                cmd = 'echo \"set maxconn frontend %s %s\" |nc %s %s' % (frontend, maxconn, master[0], haproxy_sock_port)\n            output, stderr = funct.subprocess_execute(cmd)\n        funct.logging(master[0], 'Maxconn has been changed. On: {} to {}'.format(frontend, maxconn), login=1, keep_history=1,\n                      service='haproxy')\n\n    if frontend == 'global':\n        cmd = 'echo \"set maxconn %s %s\" |nc %s %s' % (frontend, maxconn, serv, haproxy_sock_port)\n    else:\n        cmd = 'echo \"set maxconn frontend %s %s\" |nc %s %s' % (frontend, maxconn, serv, haproxy_sock_port)\n    funct.logging(serv, 'Maxconn has been changed. On: {} to {}'.format(frontend, maxconn), login=1, keep_history=1,\n                  service='haproxy')\n    output, stderr = funct.subprocess_execute(cmd)\n\n    if stderr != '':\n        print(stderr[0])\n    elif output[0] == '':\n        configs_dir = funct.get_config_var('configs', 'haproxy_save_configs_dir')\n        cfg = configs_dir + serv + \"-\" + funct.get_data('config') + \".cfg\"\n\n        error = funct.get_config(serv, cfg)\n        cmd = 'string=`grep %s %s -n -A5 |grep maxcon -n |awk -F\":\" \\'{print $2}\\'|awk -F\"-\" \\'{print $1}\\'` ' \\\n              '&& sed -Ei \"$( echo $string)s/[0-9]+/%s/g\" %s' % (frontend, cfg, maxconn, cfg)\n        output, stderr = funct.subprocess_execute(cmd)\n        stderr = funct.master_slave_upload_and_restart(serv, cfg, just_save='save')\n        print('success: Maxconn for %s has been set to %s ' % (frontend, maxconn))\n    else:\n        print('error: ' + output[0])\n\nif form.getvalue('table_serv_select') is not None:\n    print(funct.get_all_stick_table())\n\nif form.getvalue('table_select') is not None:\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates'), autoescape=True,\n                      extensions=['jinja2.ext.loopcontrols', 'jinja2.ext.do'], trim_blocks=True, lstrip_blocks=True)\n    table = form.getvalue('table_select')\n\n    if table == 'All':\n        template = env.get_template('ajax/stick_tables.html')\n        tables = funct.get_all_stick_table()\n        table = []\n        for t in tables.split(','):\n            if t != '':\n                table_id = []\n                tables_head = []\n                tables_head1, table1 = funct.get_stick_table(t)\n                table_id.append(tables_head1)\n                table_id.append(table1)\n                table.append(table_id)\n\n        template = template.render(table=table)\n    else:\n        template = env.get_template('ajax/stick_table.html')\n        tables_head, table = funct.get_stick_table(table)\n        template = template.render(tables_head=tables_head, table=table)\n\n    print(template)\n\nif form.getvalue('ip_for_delete') is not None:\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n    ip = funct.checkAjaxInput(form.getvalue('ip_for_delete'))\n    table = funct.checkAjaxInput(form.getvalue('table_for_delete'))\n\n    cmd = 'echo \"clear table %s key %s\" |nc %s %s' % (table, ip, serv, haproxy_sock_port)\n    output, stderr = funct.subprocess_execute(cmd)\n    if stderr[0] != '':\n        print('error: ' + stderr[0])\n\nif form.getvalue('table_for_clear') is not None:\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n    table = funct.checkAjaxInput(form.getvalue('table_for_clear'))\n\n    cmd = 'echo \"clear table %s \" |nc %s %s' % (table, serv, haproxy_sock_port)\n    output, stderr = funct.subprocess_execute(cmd)\n    if stderr[0] != '':\n        print('error: ' + stderr[0])\n\nif form.getvalue('list_serv_select') is not None:\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n    cmd = 'echo \"show acl\"|nc %s %s |grep \"loaded from\" |awk \\'{print $1,$2}\\'' % (serv, haproxy_sock_port)\n    output, stderr = funct.subprocess_execute(cmd)\n    print(output)\n\nif form.getvalue('list_select_id') is not None:\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True,\n                      extensions=['jinja2.ext.loopcontrols', 'jinja2.ext.do'], trim_blocks=True, lstrip_blocks=True)\n    template = env.get_template('ajax/list.html')\n    list_id = funct.checkAjaxInput(form.getvalue('list_select_id'))\n    list_name = funct.checkAjaxInput(form.getvalue('list_select_name'))\n\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n    cmd = 'echo \"show acl #%s\"|nc %s %s' % (list_id, serv, haproxy_sock_port)\n    output, stderr = funct.subprocess_execute(cmd)\n\n    template = template.render(list=output, list_id=list_id, list_name=list_name)\n    print(template)\n\nif form.getvalue('list_id_for_delete') is not None:\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n    lists_path = sql.get_setting('lists_path')\n    lib_path = funct.checkAjaxInput(funct.get_config_var('main', 'lib_path'))\n    ip_id = funct.checkAjaxInput(form.getvalue('list_ip_id_for_delete'))\n    ip = funct.checkAjaxInput(form.getvalue('list_ip_for_delete'))\n    list_id = funct.checkAjaxInput(form.getvalue('list_id_for_delete'))\n    list_name = funct.checkAjaxInput(form.getvalue('list_name'))\n    user_group = funct.checkAjaxInput(funct.get_user_group(id=1))\n    cmd = \"sed -i 's!%s$!!' %s/%s/%s/%s\" % (ip, lib_path, lists_path, user_group, list_name)\n    cmd1 = \"sed -i '/^$/d' %s/%s/%s/%s\" % (lib_path, lists_path, user_group, list_name)\n    output, stderr = funct.subprocess_execute(cmd)\n    output1, stderr1 = funct.subprocess_execute(cmd1)\n    if output:\n        print('error: ' + str(output))\n    if stderr:\n        print('error: ' + str(stderr))\n    if output1:\n        print('error: ' + str(output1))\n    if stderr1:\n        print('error: ' + str(stderr1))\n\n    cmd = 'echo \"del acl #%s #%s\" |nc %s %s' % (list_id, ip_id, serv, haproxy_sock_port)\n    output, stderr = funct.subprocess_execute(cmd)\n    if output[0] != '':\n        print('error: ' + output[0])\n    if stderr[0] != '':\n        print('error: ' + stderr[0])\n\n    funct.logging(serv, '{} has been delete from list {}'.format(ip_id, list_id), login=1, keep_history=1,\n                  service='haproxy')\n\nif form.getvalue('list_ip_for_add') is not None:\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n    lists_path = sql.get_setting('lists_path')\n    lib_path = funct.get_config_var('main', 'lib_path')\n    ip = form.getvalue('list_ip_for_add')\n    ip = ip.strip()\n    ip = funct.is_ip_or_dns(ip)\n    list_id = funct.checkAjaxInput(form.getvalue('list_id_for_add'))\n    list_name = funct.checkAjaxInput(form.getvalue('list_name'))\n    user_group = funct.checkAjaxInput(funct.get_user_group(id=1))\n    cmd = 'echo \"add acl #%s %s\" |nc %s %s' % (list_id, ip, serv, haproxy_sock_port)\n    output, stderr = funct.subprocess_execute(cmd)\n    if output[0]:\n        print('error: ' + output[0])\n    if stderr:\n        print('error: ' + stderr[0])\n\n    if 'is not a valid IPv4 or IPv6 address' not in output[0]:\n        cmd = 'echo \"%s\" >> %s/%s/%s/%s' % (ip, lib_path, lists_path, user_group, list_name)\n        output, stderr = funct.subprocess_execute(cmd)\n        if output:\n            print('error: ' + str(output))\n        if stderr:\n            print('error: ' + str(stderr))\n\n    funct.logging(serv, '{} has been added to list {}'.format(ip, list_id), login=1, keep_history=1,\n                  service='haproxy')\n\nif form.getvalue('sessions_select') is not None:\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates'), autoescape=True,\n                      extensions=['jinja2.ext.loopcontrols', 'jinja2.ext.do'], trim_blocks=True, lstrip_blocks=True)\n    serv = funct.checkAjaxInput(form.getvalue('sessions_select'))\n\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n\n    cmd = 'echo \"show sess\" |nc %s %s' % (serv, haproxy_sock_port)\n    output, stderr = funct.subprocess_execute(cmd)\n\n    template = env.get_template('ajax/sessions_table.html')\n    template = template.render(sessions=output)\n\n    print(template)\n\nif form.getvalue('sessions_select_show') is not None:\n    serv = funct.checkAjaxInput(form.getvalue('sessions_select_show'))\n    sess_id = funct.checkAjaxInput(form.getvalue('sessions_select_id'))\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n    cmd = 'echo \"show sess %s\" |nc %s %s' % (sess_id, serv, haproxy_sock_port)\n\n    output, stderr = funct.subprocess_execute(cmd)\n\n    if stderr:\n        print('error: ' + stderr[0])\n    else:\n        for o in output:\n            print(o + '<br />')\n\nif form.getvalue('session_delete_id') is not None:\n    haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n    sess_id = funct.checkAjaxInput(form.getvalue('session_delete_id'))\n    cmd = 'echo \"shutdown session %s\" |nc %s %s' % (sess_id, serv, haproxy_sock_port)\n    output, stderr = funct.subprocess_execute(cmd)\n    if output[0] != '':\n        print('error: ' + output[0])\n    if stderr[0] != '':\n        print('error: ' + stderr[0])\n\nif form.getvalue(\"change_pos\") is not None:\n    pos = form.getvalue('change_pos')\n    server_id = form.getvalue('pos_server_id')\n    sql.update_server_pos(pos, server_id)\n\nif form.getvalue('show_ip') is not None and serv is not None:\n    commands = [\"sudo ip a |grep inet |egrep -v '::1' |awk '{ print $2 }' |awk -F'/' '{ print $1 }'\"]\n    funct.ssh_command(serv, commands, ip=\"1\")\n\nif form.getvalue('showif'):\n    commands = [\"sudo ip link|grep 'UP' |grep -v 'lo'| awk '{print $2}' |awk -F':' '{print $1}'\"]\n    funct.ssh_command(serv, commands, ip=\"1\")\n\nif form.getvalue('action_hap') is not None and serv is not None:\n    action = form.getvalue('action_hap')\n    haproxy_service_name = \"haproxy\"\n\n    if action not in ('start', 'stop', 'reload', 'restart'):\n        print('error: wrong action')\n        sys.exit()\n\n    funct.is_restarted(serv, action)\n\n    if funct.check_haproxy_config(serv):\n        server_id = sql.select_server_id_by_ip(server_ip=serv)\n        is_docker = sql.select_service_setting(server_id, 'haproxy', 'dockerized')\n\n        if is_docker == '1':\n            container_name = sql.get_setting('haproxy_container_name')\n            commands = [\"sudo docker %s %s\" % (action, container_name)]\n        else:\n            haproxy_enterprise = sql.select_service_setting(server_id, 'haproxy', 'haproxy_enterprise')\n            if haproxy_enterprise == '1':\n                haproxy_service_name = \"hapee-2.0-lb\"\n            commands = [\"sudo systemctl %s %s\" % (action, haproxy_service_name)]\n\n        funct.ssh_command(serv, commands)\n        funct.logging(serv, 'Service has been ' + action + 'ed', haproxywi=1, login=1, keep_history=1, service='haproxy')\n        print(\"success: HAProxy has been %s\" % action)\n    else:\n        print(\"error: Bad config, check please\")\n\nif form.getvalue('action_nginx') is not None and serv is not None:\n    action = form.getvalue('action_nginx')\n\n    if action not in ('start', 'stop', 'reload', 'restart'):\n        print('error: wrong action')\n        sys.exit()\n\n    funct.is_restarted(serv, action)\n\n    if funct.check_nginx_config(serv):\n        server_id = sql.select_server_id_by_ip(server_ip=serv)\n        is_docker = sql.select_service_setting(server_id, 'nginx', 'dockerized')\n        if is_docker == '1':\n            container_name = sql.get_setting('nginx_container_name')\n            commands = [\"sudo docker %s %s\" % (action, container_name)]\n        else:\n            commands = [\"sudo systemctl %s nginx\" % action]\n        funct.ssh_command(serv, commands)\n        funct.logging(serv, 'Service has been ' + action + 'ed', haproxywi=1, login=1, keep_history=1, service='nginx')\n        print(\"success: Nginx has been %s\" % action)\n    else:\n        print(\"error: Bad config, check please\")\n\nif form.getvalue('action_keepalived') is not None and serv is not None:\n    action = form.getvalue('action_keepalived')\n\n    if action not in ('start', 'stop', 'reload', 'restart'):\n        print('error: wrong action')\n        sys.exit()\n\n    funct.is_restarted(serv, action)\n\n    commands = [\"sudo systemctl %s keepalived\" % action]\n    funct.ssh_command(serv, commands)\n    funct.logging(serv, 'Service has been ' + action + 'ed', haproxywi=1, login=1, keep_history=1, service='keepalived')\n    print(\"success: Keepalived has been %s\" % action)\n\nif form.getvalue('action_waf') is not None and serv is not None:\n    serv = form.getvalue('serv')\n    action = form.getvalue('action_waf')\n\n    if action not in ('start', 'stop', 'reload', 'restart'):\n        print('error: wrong action')\n        sys.exit()\n\n    funct.is_restarted(serv, action)\n\n    funct.logging(serv, 'WAF service has been ' + action + 'ed', haproxywi=1, login=1, keep_history=1, service='haproxy')\n    commands = [\"sudo systemctl %s waf\" % action]\n    funct.ssh_command(serv, commands)\n\nif form.getvalue('action_apache') is not None and serv is not None:\n    action = form.getvalue('action_apache')\n\n    if action not in ('start', 'stop', 'reload', 'restart'):\n        print('error: wrong action')\n        sys.exit()\n\n    funct.is_restarted(serv, action)\n\n    server_id = sql.select_server_id_by_ip(serv)\n    is_docker = sql.select_service_setting(server_id, 'apache', 'dockerized')\n    if is_docker == '1':\n        container_name = sql.get_setting('apache_container_name')\n        commands = [\"sudo docker %s %s\" % (action, container_name)]\n    else:\n        service_apache_name = funct.get_correct_apache_service_name(0, server_id)\n\n        commands = [\"sudo systemctl %s %s\" % (action, service_apache_name)]\n    funct.ssh_command(serv, commands)\n    funct.logging(serv, 'Service has been ' + action + 'ed', haproxywi=1, login=1, keep_history=1, service='apache')\n    print(\"success: Apache has been %s\" % action)\n\nif form.getvalue('action_service') is not None:\n    action = funct.checkAjaxInput(form.getvalue('action_service'))\n\n    if action not in ('start', 'stop', 'restart'):\n        print('error: wrong action')\n        sys.exit()\n\n    is_in_docker = funct.is_docker()\n    if action == 'stop':\n        cmd = \"sudo systemctl disable %s --now\" % serv\n    elif action == \"start\":\n        cmd = \"sudo systemctl enable %s --now\" % serv\n        if not sql.select_user_status():\n            print('warning: The service is disabled because you are not subscribed. Read <a href=\"https://roxy-wi.org/pricing.py\" '\n                    'title=\"Roxy-WI pricing\" target=\"_blank\">here</a> about subscriptions')\n            sys.exit()\n    elif action == \"restart\":\n        cmd = \"sudo systemctl restart %s --now\" % serv\n        if not sql.select_user_status():\n            print('warning: The service is disabled because you are not subscribed. Read <a href=\"https://roxy-wi.org/pricing.py\" '\n                    'title=\"Roxy-WI pricing\" target=\"_blank\">here</a> about subscriptions')\n            sys.exit()\n    if is_in_docker:\n        cmd = \"sudo supervisorctl \" + action + \" \" + serv\n    output, stderr = funct.subprocess_execute(cmd)\n    funct.logging('localhost', ' The service ' + serv + ' has been ' + action + 'ed', haproxywi=1, login=1)\n\nif act == \"overviewHapserverBackends\":\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n    template = env.get_template('haproxyservers_backends.html')\n    service = form.getvalue('service')\n    format_file = 'cfg'\n\n    if service == 'haproxy':\n        configs_dir = funct.get_config_var('configs', 'haproxy_save_configs_dir')\n        format_file = 'cfg'\n    elif service == 'keepalived':\n        configs_dir = funct.get_config_var('configs', 'kp_save_configs_dir')\n        format_file = 'conf'\n\n    if service != 'nginx' and service != 'apache':\n        try:\n            sections = funct.get_sections(configs_dir + funct.get_files(dir=configs_dir, format=format_file)[0], service=service)\n        except Exception as e:\n            funct.logging('localhost', str(e), haproxywi=1)\n\n            try:\n                cfg = configs_dir + serv + \"-\" + funct.get_data('config') + '.' + format_file\n            except Exception as e:\n                funct.logging('localhost', ' Cannot generate a cfg path ' + str(e), haproxywi=1)\n            try:\n                if service == 'keepalived':\n                    error = funct.get_config(serv, cfg, keepalived=1)\n                else:\n                    error = funct.get_config(serv, cfg)\n            except Exception as e:\n                funct.logging('localhost', ' Cannot download a config ' + str(e), haproxywi=1)\n            try:\n                sections = funct.get_sections(cfg, service=service)\n            except Exception as e:\n                funct.logging('localhost', ' Cannot get sections from config file ' + str(e), haproxywi=1)\n                sections = 'Cannot get backends'\n    else:\n        sections = funct.get_remote_sections(serv, service)\n\n    template = template.render(backends=sections, serv=serv, service=service)\n    print(template)\n\nif form.getvalue('show_userlists'):\n    configs_dir = funct.get_config_var('configs', 'haproxy_save_configs_dir')\n    format_file = 'cfg'\n\n    try:\n        sections = funct.get_userlists(configs_dir + funct.get_files(dir=configs_dir, format=format_file)[0])\n    except Exception as e:\n        funct.logging('localhost', str(e), haproxywi=1)\n        try:\n            cfg = configs_dir + serv + \"-\" + funct.get_data('config') + '.' + format_file\n        except Exception as e:\n            funct.logging('localhost', ' Cannot generate a cfg path ' + str(e), haproxywi=1)\n        try:\n            error = funct.get_config(serv, cfg)\n        except Exception as e:\n            funct.logging('localhost', ' Cannot download a config ' + str(e), haproxywi=1)\n        try:\n            sections = funct.get_userlists(cfg)\n        except Exception as e:\n            funct.logging('localhost', ' Cannot get Userlists from the config file ' + str(e), haproxywi=1)\n            sections = 'error: Cannot get Userlists'\n\n    print(sections)\n\nif act == \"overviewHapservers\":\n    if form.getvalue('service') == 'nginx':\n        config_path = sql.get_setting('nginx_config_path')\n    elif form.getvalue('service') == 'keepalived':\n        config_path = '/etc/keepalived/keepalived.conf'\n    else:\n        config_path = sql.get_setting('haproxy_config_path')\n    commands = [\"ls -l %s |awk '{ print $6\\\" \\\"$7\\\" \\\"$8}'\" % config_path]\n    try:\n        print(funct.ssh_command(serv, commands))\n    except Exception as e:\n        print('error: Cannot get last date ' + str(e))\n\nif act == \"overview\":\n    import asyncio\n    import http.cookies\n    from jinja2 import Environment, FileSystemLoader\n\n    async def async_get_overview(serv1, serv2, user_uuid, server_id):\n        user_id = sql.get_user_id_by_uuid(user_uuid)\n        user_services = sql.select_user_services(user_id)\n\n        haproxy = sql.select_haproxy(serv) if '1' in user_services else 0\n        nginx = sql.select_nginx(serv) if '2' in user_services else 0\n        keepalived = sql.select_keepalived(serv) if '3' in user_services else 0\n        apache = sql.select_apache(serv) if '4' in user_services else 0\n\n        waf = sql.select_waf_servers(serv2)\n        haproxy_process = ''\n        keepalived_process = ''\n        nginx_process = ''\n        apache_process = ''\n        waf_process = ''\n\n        try:\n            waf_len = len(waf)\n        except Exception:\n            waf_len = 0\n\n        if haproxy == 1:\n            cmd = 'echo \"show info\" |nc %s %s -w 1|grep -e \"Process_num\"' % (serv2, sql.get_setting('haproxy_sock_port'))\n            haproxy_process = funct.server_status(funct.subprocess_execute(cmd))\n\n        if nginx == 1:\n            nginx_cmd = 'echo \"something\" |nc %s %s -w 1' % (serv2, sql.get_setting('nginx_stats_port'))\n            nginx_process = funct.server_status(funct.subprocess_execute(nginx_cmd))\n\n        if apache == 1:\n            apache_cmd = 'echo \"something\" |nc %s %s -w 1' % (serv2, sql.get_setting('apache_stats_port'))\n            apache_process = funct.server_status(funct.subprocess_execute(apache_cmd))\n\n        if keepalived == 1:\n            command = [\"ps ax |grep keepalived|grep -v grep|wc -l|tr -d '\\n'\"]\n            keepalived_process = funct.ssh_command(serv2, command)\n\n        if waf_len >= 1:\n            command = [\"ps ax |grep waf/bin/modsecurity |grep -v grep |wc -l\"]\n            waf_process = funct.ssh_command(serv2, command)\n\n        server_status = (serv1,\n                         serv2,\n                         haproxy,\n                         haproxy_process,\n                         waf_process,\n                         waf,\n                         keepalived,\n                         keepalived_process,\n                         nginx,\n                         nginx_process,\n                         server_id,\n                         apache,\n                         apache_process)\n        return server_status\n\n    async def get_runner_overview():\n        env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True,\n                          extensions=['jinja2.ext.loopcontrols', 'jinja2.ext.do'])\n\n        servers = []\n        template = env.get_template('overview.html')\n        cookie = http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\"))\n        user_uuid = cookie.get('uuid')\n        futures = [async_get_overview(server[1], server[2], user_uuid.value, server[0]) for server in sql.select_servers(server=serv)]\n        for i, future in enumerate(asyncio.as_completed(futures)):\n            result = await future\n            servers.append(result)\n        servers_sorted = sorted(servers, key=funct.get_key)\n        template = template.render(service_status=servers_sorted, role=sql.get_user_role_by_uuid(user_uuid.value))\n        print(template)\n\n    ioloop = asyncio.get_event_loop()\n    ioloop.run_until_complete(get_runner_overview())\n    ioloop.close()\n\nif act == \"overviewwaf\":\n    import http.cookies\n\n    from jinja2 import Environment, FileSystemLoader\n    env = Environment(\n        loader=FileSystemLoader('templates/ajax'), autoescape=True,\n        extensions=['jinja2.ext.loopcontrols', 'jinja2.ext.do']\n    )\n    template = env.get_template('overivewWaf.html')\n\n    servers = sql.select_servers(server=serv)\n    cookie = http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\"))\n    user_id = cookie.get('uuid')\n\n    haproxy_path = ''\n    returned_servers = []\n    waf = ''\n    metrics_en = 0\n    waf_process = ''\n    waf_mode = ''\n\n    for server in servers:\n        haproxy = sql.select_haproxy(server[2])\n        if haproxy == 1:\n            haproxy_path = sql.get_setting('haproxy_dir')\n            waf = sql.select_waf_servers(server[2])\n            metrics_en = sql.select_waf_metrics_enable_server(server[2])\n            try:\n                waf_len = len(waf)\n            except Exception:\n                waf_len = 0\n\n            if waf_len >= 1:\n                command = [\"ps ax |grep waf/bin/modsecurity |grep -v grep |wc -l\"]\n                commands1 = [\n                    \"grep SecRuleEngine %s/waf/modsecurity.conf |grep -v '#' |awk '{print $2}'\" % haproxy_path]\n                waf_process = funct.ssh_command(server[2], command)\n                waf_mode = funct.ssh_command(server[2], commands1).strip()\n\n                server_status = (server[1],\n                                 server[2],\n                                 waf_process,\n                                 waf_mode,\n                                 metrics_en,\n                                 waf_len)\n            else:\n                server_status = (server[1],\n                                 server[2],\n                                 waf_process,\n                                 waf_mode,\n                                 metrics_en,\n                                 waf_len)\n\n        returned_servers.append(server_status)\n\n    servers_sorted = sorted(returned_servers, key=funct.get_key)\n    template = template.render(service_status=servers_sorted, role=sql.get_user_role_by_uuid(user_id.value))\n    print(template)\n\nif act == \"overviewServers\":\n    import asyncio\n\n    async def async_get_overviewServers(serv1, serv2, service):\n        if service == 'haproxy':\n            cmd = 'echo \"show info\" |nc %s %s -w 1|grep -e \"node\\|Nbproc\\|Maxco\\|MB\\|Nbthread\"' % (serv2, sql.get_setting('haproxy_sock_port'))\n            out = funct.subprocess_execute(cmd)\n            return_out = \"\"\n\n            for k in out:\n                if \"Ncat:\" not in k:\n                    for r in k:\n                        return_out += r\n                        return_out += \"<br />\"\n                else:\n                    return_out = \"Cannot connect to HAProxy\"\n        else:\n            return_out = ''\n\n        server_status = (serv1, serv2, return_out)\n        return server_status\n\n    async def get_runner_overviewServers(**kwargs):\n        import http.cookies\n        from jinja2 import Environment, FileSystemLoader\n        env = Environment(loader=FileSystemLoader('templates/ajax'),\n                          extensions=['jinja2.ext.loopcontrols', 'jinja2.ext.do'])\n        template = env.get_template('overviewServers.html')\n\n        servers = []\n        cookie = http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\"))\n        user_id = cookie.get('uuid')\n        role = sql.get_user_role_by_uuid(user_id.value)\n        futures = [async_get_overviewServers(kwargs.get('server1'), kwargs.get('server2'), kwargs.get('service'))]\n\n        for i, future in enumerate(asyncio.as_completed(futures)):\n            result = await future\n            servers.append(result)\n        servers_sorted = sorted(servers, key=funct.get_key)\n        template = template.render(service_status=servers_sorted, role=role, id=kwargs.get('id'), service_page=service)\n        print(template)\n\n    server_id = form.getvalue('id')\n    name = form.getvalue('name')\n    service = form.getvalue('service')\n    ioloop = asyncio.get_event_loop()\n    ioloop.run_until_complete(get_runner_overviewServers(server1=name, server2=serv, id=server_id, service=service))\n    ioloop.close()\n\nif form.getvalue('action'):\n    import requests\n\n    haproxy_user = sql.get_setting('stats_user')\n    haproxy_pass = sql.get_setting('stats_password')\n    stats_port = sql.get_setting('stats_port')\n    stats_page = sql.get_setting('stats_page')\n\n    postdata = {\n        'action': form.getvalue('action'),\n        's': form.getvalue('s'),\n        'b': form.getvalue('b')\n    }\n\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 5.1; rv:20.0) Gecko/20100101 Firefox/20.0',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        'Accept-Language': 'en-US,en;q=0.5',\n        'Accept-Encoding': 'gzip, deflate'\n    }\n\n    q = requests.post('http://{}:{}/{}'.format(serv, stats_port, stats_page),\n                      headers=headers,\n                      data=postdata,\n                      auth=(haproxy_user, haproxy_pass))\n\nif serv is not None and act == \"stats\":\n    import requests\n\n    if form.getvalue('service') == 'nginx':\n        haproxy_user = sql.get_setting('nginx_stats_user')\n        haproxy_pass = sql.get_setting('nginx_stats_password')\n        stats_port = sql.get_setting('nginx_stats_port')\n        stats_page = sql.get_setting('nginx_stats_page')\n    elif form.getvalue('service') == 'apache':\n        haproxy_user = sql.get_setting('apache_stats_user')\n        haproxy_pass = sql.get_setting('apache_stats_password')\n        stats_port = sql.get_setting('apache_stats_port')\n        stats_page = sql.get_setting('apache_stats_page')\n    else:\n        haproxy_user = sql.get_setting('stats_user')\n        haproxy_pass = sql.get_setting('stats_password')\n        stats_port = sql.get_setting('stats_port')\n        stats_page = sql.get_setting('stats_page')\n    try:\n        response = requests.get('http://%s:%s/%s' % (serv, stats_port, stats_page), auth=(haproxy_user, haproxy_pass))\n    except requests.exceptions.ConnectTimeout:\n        print('error: Oops. Connection timeout occurred!')\n    except requests.exceptions.ReadTimeout:\n        print('error: Oops. Read timeout occurred')\n    except requests.exceptions.HTTPError as errh:\n        print(\"error: Http Error:\", errh)\n    except requests.exceptions.ConnectionError as errc:\n        print('error: Error Connecting: %s' % errc)\n    except requests.exceptions.Timeout as errt:\n        print(\"error: Timeout Error:\", errt)\n    except requests.exceptions.RequestException as err:\n        print(\"error: OOps: Something Else\", err)\n\n    data = response.content\n    if form.getvalue('service') == 'nginx':\n        from jinja2 import Environment, FileSystemLoader\n\n        env = Environment(loader=FileSystemLoader('templates/'), autoescape=True)\n        template = env.get_template('ajax/nginx_stats.html')\n\n        servers_with_status = list()\n        h = ()\n        out1 = []\n        for k in data.decode('utf-8').split():\n            out1.append(k)\n        h = (out1,)\n        servers_with_status.append(h)\n\n        template = template.render(out=servers_with_status)\n        print(template)\n    else:\n        print(data.decode('utf-8'))\n\nif serv is not None and form.getvalue('show_log') is not None:\n    rows = form.getvalue('show_log')\n    waf = form.getvalue('waf')\n    grep = form.getvalue('grep')\n    hour = form.getvalue('hour')\n    minut = form.getvalue('minut')\n    hour1 = form.getvalue('hour1')\n    minut1 = form.getvalue('minut1')\n    service = form.getvalue('service')\n    out = funct.show_haproxy_log(serv, rows=rows, waf=waf, grep=grep, hour=hour, minut=minut, hour1=hour1,\n                                 minut1=minut1, service=service)\n    print(out)\n\nif serv is not None and form.getvalue('rows1') is not None:\n    rows = form.getvalue('rows1')\n    grep = form.getvalue('grep')\n    hour = form.getvalue('hour')\n    minut = form.getvalue('minut')\n    hour1 = form.getvalue('hour1')\n    minut1 = form.getvalue('minut1')\n    out = funct.show_haproxy_log(serv, rows=rows, waf='0', grep=grep, hour=hour, minut=minut, hour1=hour1,\n                                 minut1=minut1, service='apache_internal')\n    print(out)\n\nif form.getvalue('viewlogs') is not None:\n    viewlog = form.getvalue('viewlogs')\n    rows = form.getvalue('rows')\n    grep = form.getvalue('grep')\n    hour = form.getvalue('hour')\n    minut = form.getvalue('minut')\n    hour1 = form.getvalue('hour1')\n    minut1 = form.getvalue('minut1')\n    if funct.check_user_group():\n        out = funct.show_haproxy_log(serv=viewlog, rows=rows, waf='0', grep=grep, hour=hour, minut=minut, hour1=hour1,\n                                     minut1=minut1, service='internal')\n    print(out)\n\nif serv is not None and act == \"showMap\":\n    import networkx as nx\n    import matplotlib\n\n    matplotlib.use('Agg')\n    import matplotlib.pyplot as plt\n\n    stats_port = sql.get_setting('stats_port')\n    haproxy_config_path = sql.get_setting('haproxy_config_path')\n    hap_configs_dir = funct.get_config_var('configs', 'haproxy_save_configs_dir')\n    date = funct.get_data('config')\n    cfg = hap_configs_dir + serv + \"-\" + date + \".cfg\"\n\n    print('<center>')\n    print(\"<h4>Map from %s</h4><br />\" % serv)\n\n    error = funct.get_config(serv, cfg)\n    if error:\n        print(error)\n    try:\n        conf = open(cfg, \"r\")\n    except IOError:\n        print('error: Can\\'t read import config file')\n\n    G = nx.DiGraph()\n    node = \"\"\n    line_new2 = [1, \"\"]\n    sections = {'listens': dict(), 'backends': dict()}\n\n    for line in conf:\n        if line.startswith('listen') or line.startswith('frontend'):\n            if \"stats\" not in line:\n                node = line\n        if line.find(\"backend\") == 0:\n            node = line\n            node = node.split('\\n')[0]\n            sections['backends'][node] = {'servers': dict()}\n\n        if \"bind\" in line or (line.startswith('listen') and \":\" in line) or (\n                line.startswith('frontend') and \":\" in line):\n            try:\n                if \"@\" not in line:\n                    bind = line.split(\":\")\n                else:\n                    bind = line.split(\"@\")\n                if str(stats_port) not in bind[1]:\n                    bind[1] = bind[1].strip(' ')\n                    bind = bind[1].split(\"crt\")\n                    node = node.strip(' \\t\\n\\r')\n                    node = node + \":\" + bind[0]\n                    node = node.split('\\n')[0]\n                    sections['listens'][node] = {'servers': dict()}\n            except Exception:\n                pass\n\n        if \"server \" in line or \"use_backend\" in line or \"default_backend\" in line and \"stats\" not in line and \"#\" not in line:\n            if \"timeout\" not in line and \"default-server\" not in line and \"#\" not in line and \"stats\" not in line:\n                if \"check\" in line:\n                    line_new = line.split(\"check\")\n                else:\n                    line_new = line.split(\"if \")\n                if \"server\" in line:\n                    line_new1 = line_new[0].split(\"server\")\n                    line_new[0] = line_new1[1]\n                    line_new2 = line_new[0].split(\":\")\n                    line_new[0] = line_new2[0]\n\n                line_new[0] = line_new[0].strip(' \\t\\n\\r')\n\n                try:\n                    backend_server_port = line_new2[1].strip(' \\t\\n\\r')\n                    backend_server_port = 'port: ' + backend_server_port\n                except Exception:\n                    backend_server_port = ''\n\n                try:\n                    sections['listens'][node]['servers'][line_new[0]] = {line_new[0]: backend_server_port}\n                except Exception:\n                    pass\n\n                try:\n                    sections['backends'][node]['servers'][line_new[0]] = {line_new[0]: backend_server_port}\n                except Exception:\n                    pass\n\n    os.system(\"/bin/rm -f \" + cfg)\n\n    i, k, j = 0, 0, 0\n    backend_servers_len_dict = 1\n    backends_from_frontends = []\n    backends_servers = []\n\n    for key, val in sections.items():\n        if key == 'listens':\n            for k2, v2 in val.items():\n                i -= 750\n                G.add_node(k2, pos=(k, i), label_pos=(k, i + 250))\n\n                for k3, v3 in v2.items():\n                    for k4, v4 in v3.items():\n                        \"\"\" Add backend servers of listens or backend from frontends \"\"\"\n                        i -= 300\n                        j += 1\n                        server_name = k4\n\n                        if 'default_backend' in k4 or 'use_backend' in k4:\n                            backend_name = k4.split(' ')[1]\n                            backend_name = 'backend ' + backend_name\n                            k4 = backend_name\n                            backends_from_frontends.append(k4)\n\n                        if k4 not in backends_servers:\n                            if j % 2 == 0:\n                                G.add_node(k4, pos=(k + 250, i - 100), label_pos=(k + 250, i - 420))\n                            else:\n                                G.add_node(k4, pos=(k - 250, i - 370), label_pos=(k - 245, i - 650))\n\n                        if v4[server_name] != '':\n                            G.add_edge(k2, k4, port=v4[server_name])\n                        else:\n                            G.add_edge(k2, k4, port='')\n\n                    for k4, v4 in v3.items():\n                        \"\"\" Add servers from backends  \"\"\"\n                        i -= 300\n                        j -= 1\n\n                        if 'default_backend' in k4 or 'use_backend' in k4:\n                            backend_name = k4.split(' ')[1]\n                            backend_name = 'backend ' + backend_name\n                            k4 = backend_name\n                            backends_from_frontends.append(k4)\n\n                            if j % 2 == 0:\n                                if len(v3) % 2 == 0:\n                                    i += (700 * backend_servers_len_dict) + 700\n                                for k5, v5 in sections['backends'][k4]['servers'].items():\n                                    i -= 700\n                                    s = k + 400\n                                    G.add_node(k5, pos=(s + 250, i - 335), label_pos=(s + 215, i - 580))\n\n                                    if v5[k5] != '':\n                                        G.add_edge(k4, k5, port=v5[k5])\n                                    else:\n                                        G.add_edge(k4, k5, port='')\n\n                                    backends_servers.append(k5)\n                            else:\n                                for k5, v5 in sections['backends'][k4]['servers'].items():\n                                    i -= 700\n                                    s = k - 400\n                                    G.add_node(k5, pos=(s - 250, i - 0), label_pos=(s - 245, i - 270))\n\n                                    if v5[k5] != '':\n                                        G.add_edge(k4, k5, port=v5[k5])\n                                    else:\n                                        G.add_edge(k4, k5, port='')\n\n                                    backends_servers.append(k5)\n                                backend_servers_len_dict = len(sections['backends'][k4]['servers'])\n\n                        backends_servers.append(k4)\n\n        elif key == 'backends':\n            for k2, v2 in val.items():\n\n                if k2 not in backends_from_frontends:\n                    i -= 750\n                    G.add_node(k2, pos=(k, i), label_pos=(k, i + 250))\n\n                for k3, v3 in v2.items():\n                    for k4, v4 in v3.items():\n\n                        if k4 not in backends_servers:\n                            i -= 300\n                            j += 1\n\n                            if j % 2 == 0:\n                                s = k + 400\n                                G.add_node(k4, pos=(s + 250, i - 335), label_pos=(s + 215, i - 580))\n                            else:\n                                s = k - 400\n                                G.add_node(k4, pos=(s - 250, i - 0), label_pos=(s - 245, i - 270))\n\n                        if v4[k4] != '':\n                            G.add_edge(k2, k4, port=v4[k4])\n                        else:\n                            G.add_edge(k2, k4, port='')\n\n                        backends_servers.append(k4)\n\n    pos = nx.get_node_attributes(G, 'pos')\n    pos_label = nx.get_node_attributes(G, 'label_pos')\n    edge_labels = nx.get_edge_attributes(G, 'port')\n\n    try:\n        plt.figure(10, figsize=(10, 20))\n        nx.draw(G, pos, with_labels=False, font_weight='bold', width=3, alpha=0.1, linewidths=5)\n        nx.draw_networkx_nodes(G, pos, node_color=\"#5d9ceb\", node_size=100, alpha=0.8, node_shape=\"h\")\n        nx.draw_networkx_labels(G, pos=pos_label, alpha=1, font_color=\"#5CB85C\", font_size=10)\n        nx.draw_networkx_edges(G, pos, width=0.3, alpha=0.7, edge_color=\"#5D9CEB\", arrows=False)\n        nx.draw_networkx_edge_labels(G, pos, alpha=0.4, label_pos=0.5, font_color=\"#5d9ceb\", edge_labels=edge_labels, font_size=8)\n\n        plt.savefig(\"map.png\")\n        plt.show()\n    except Exception as e:\n        print(str(e))\n\n    cmd = \"rm -f \" + os.path.dirname(os.getcwd()) + \"/map*.png && mv map.png \" + os.path.dirname(\n        os.getcwd()) + \"/map\" + date + \".png\"\n    output, stderr = funct.subprocess_execute(cmd)\n    print(stderr)\n    print('<img src=\"/map%s.png\" alt=\"map\">' % date)\n\nif form.getvalue('servaction') is not None:\n    server_state_file = sql.get_setting('server_state_file')\n    haproxy_sock = sql.get_setting('haproxy_sock')\n    enable = funct.checkAjaxInput(form.getvalue('servaction'))\n    backend = funct.checkAjaxInput(form.getvalue('servbackend'))\n\n    cmd = 'echo \"{} {}\" |sudo socat stdio {}'.format(enable, backend, haproxy_sock)\n\n    if form.getvalue('save') == \"on\":\n        save_command = 'echo \"show servers state\" | sudo socat {} stdio > {}'.format(haproxy_sock, server_state_file)\n        command = [cmd + ';' + save_command]\n    else:\n        command = [cmd]\n\n    if enable != \"show\":\n        funct.logging(serv, 'Has been ' + enable + 'ed ' + backend, login=1, keep_history=1, service='haproxy')\n        print(\n            '<center><h3>You %s %s on HAProxy %s. <a href=\"viewsttats.py?serv=%s\" title=\"View stat\" target=\"_blank\">Look it</a> or <a href=\"runtimeapi.py\" title=\"Runtime API\">Edit something else</a></h3><br />' % (enable, backend, serv, serv))\n\n    print(funct.ssh_command(serv, command, show_log=\"1\"))\n    action = 'runtimeapi.py ' + enable + ' ' + backend\n    funct.logging(serv, action)\n\nif act == \"showCompareConfigs\":\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True)\n    template = env.get_template('ajax/show_compare_configs.html')\n    left = form.getvalue('left')\n    right = form.getvalue('right')\n    service = form.getvalue('service')\n\n    if service == 'nginx':\n        return_files = funct.get_files(funct.get_config_var('configs', 'nginx_save_configs_dir'), 'conf')\n    elif service == 'apache':\n        return_files = funct.get_files(funct.get_config_var('configs', 'apache_save_configs_dir'), 'conf')\n    elif service == 'keepalived':\n        return_files = funct.get_files(funct.get_config_var('configs', 'kp_save_configs_dir'), 'conf')\n    else:\n        return_files = funct.get_files()\n\n    template = template.render(serv=serv, right=right, left=left, return_files=return_files)\n    print(template)\n\nif serv is not None and form.getvalue('right') is not None:\n    from jinja2 import Environment, FileSystemLoader\n\n    left = funct.checkAjaxInput(form.getvalue('left'))\n    right = funct.checkAjaxInput(form.getvalue('right'))\n\n    if form.getvalue('service') == 'nginx':\n        configs_dir = funct.get_config_var('configs', 'nginx_save_configs_dir')\n    elif form.getvalue('service') == 'apache':\n        configs_dir = funct.get_config_var('configs', 'apache_save_configs_dir')\n    elif form.getvalue('service') == 'keepalived':\n        configs_dir = funct.get_config_var('configs', 'kp_save_configs_dir')\n    else:\n        configs_dir = funct.get_config_var('configs', 'haproxy_save_configs_dir')\n\n    cmd = 'diff -pub %s%s %s%s' % (configs_dir, left, configs_dir, right)\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True,\n                      extensions=[\"jinja2.ext.loopcontrols\", \"jinja2.ext.do\"])\n    template = env.get_template('ajax/compare.html')\n\n    output, stderr = funct.subprocess_execute(cmd)\n    template = template.render(stdout=output)\n\n    print(template)\n    print(stderr)\n\nif serv is not None and act == \"configShow\":\n    import http.cookies\n\n    cookie = http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\"))\n    user_uuid = cookie.get('uuid')\n    role_id = sql.get_user_role_by_uuid(user_uuid.value)\n    service = form.getvalue('service')\n    try:\n        config_file_name = form.getvalue('config_file_name').replace('/', '92')\n    except Exception:\n        config_file_name = ''\n\n    if service == 'keepalived':\n        configs_dir = funct.get_config_var('configs', 'kp_save_configs_dir')\n        cfg = '.conf'\n    elif service == 'nginx':\n        configs_dir = funct.get_config_var('configs', 'nginx_save_configs_dir')\n        cfg = '.conf'\n    elif service == 'apache':\n        configs_dir = funct.get_config_var('configs', 'apache_save_configs_dir')\n        cfg = '.conf'\n    else:\n        configs_dir = funct.get_config_var('configs', 'haproxy_save_configs_dir')\n        cfg = '.cfg'\n\n    if form.getvalue('configver') is None:\n        cfg = configs_dir + serv + \"-\" + funct.get_data('config') + cfg\n        if service == 'nginx':\n            funct.get_config(serv, cfg, nginx=1, config_file_name=form.getvalue('config_file_name'))\n        elif service == 'apache':\n            funct.get_config(serv, cfg, apache=1, config_file_name=form.getvalue('config_file_name'))\n        elif service == 'keepalived':\n            funct.get_config(serv, cfg, keepalived=1)\n        else:\n            funct.get_config(serv, cfg)\n    else:\n        cfg = configs_dir + form.getvalue('configver')\n    try:\n        conf = open(cfg, \"r\")\n    except IOError:\n        print('<div class=\"alert alert-danger\">Can\\'t read config file</div>')\n\n    is_serv_protected = sql.is_serv_protected(serv)\n\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True, trim_blocks=True, lstrip_blocks=True,\n                      extensions=[\"jinja2.ext.loopcontrols\", \"jinja2.ext.do\"])\n    template = env.get_template('config_show.html')\n\n    template = template.render(conf=conf,\n                               serv=serv,\n                               configver=form.getvalue('configver'),\n                               role=role_id,\n                               service=service,\n                               config_file_name=config_file_name,\n                               is_serv_protected=is_serv_protected)\n    print(template)\n\n    if form.getvalue('configver') is None:\n        os.system(\"/bin/rm -f \" + cfg)\n\nif act == 'configShowFiles':\n    service = form.getvalue('service')\n\n    config_dir = funct.get_config_var('configs', service + '_save_configs_dir')\n    service_config_dir = sql.get_setting(service + '_dir')\n    try:\n        config_file_name = form.getvalue('config_file_name').replace('92', '/')\n    except Exception:\n        config_file_name = ''\n    return_files = funct.get_remote_files(serv, service_config_dir, 'conf')\n    if 'error: ' in return_files:\n        print(return_files)\n        sys.exit()\n    return_files += ' ' + sql.get_setting(service + '_config_path')\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True)\n    template = env.get_template('ajax/show_configs_files.html')\n    template = template.render(serv=serv, service=service, return_files=return_files,\n                               config_file_name=config_file_name, path_dir=service_config_dir)\n    print(template)\n\nif act == 'showRemoteLogFiles':\n    service = form.getvalue('service')\n    log_path = sql.get_setting(service + '_path_logs')\n    return_files = funct.get_remote_files(serv, log_path, 'log')\n    if 'error: ' in return_files:\n        print(return_files)\n        sys.exit()\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True)\n    template = env.get_template('ajax/show_log_files.html')\n    template = template.render(serv=serv, return_files=return_files, path_dir=log_path)\n    print(template)\n\nif form.getvalue('master'):\n    master = form.getvalue('master')\n    slave = form.getvalue('slave')\n    ETH = form.getvalue('interface')\n    ETH_SLAVE = form.getvalue('slave_interface')\n    IP = form.getvalue('vrrpip')\n    syn_flood = form.getvalue('syn_flood')\n    virt_server = form.getvalue('virt_server')\n    return_to_master = form.getvalue('return_to_master')\n    haproxy = form.getvalue('hap')\n    nginx = form.getvalue('nginx')\n    router_id = form.getvalue('router_id')\n    script = \"install_keepalived.sh\"\n    proxy = sql.get_setting('proxy')\n    keepalived_path_logs = sql.get_setting('keepalived_path_logs')\n    ssh_port = 22\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path(master)\n\n    if ssh_enable == 0:\n        ssh_key_name = ''\n\n    servers = sql.select_servers(server=master)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv + \" SSH_PORT=\" + ssh_port + \" router_id=\" + router_id\n        + \" ETH=\" + ETH + \" IP=\" + str(IP) + \" MASTER=MASTER\" + \" ETH_SLAVE=\" + ETH_SLAVE + \" keepalived_path_logs=\" + keepalived_path_logs\n        + \" RETURN_TO_MASTER=\" + return_to_master + \" SYN_FLOOD=\" + syn_flood + \" HOST=\" + str(master)\n        + \" USER=\" + str(ssh_user_name) + \" PASS='\" + str(ssh_user_password) + \"' KEY=\" + str(ssh_key_name)\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    if funct.show_installation_output(error, output, 'master Keepalived'):\n        sql.update_keepalived(master)\n\n        if virt_server != '0':\n            group_id = sql.get_group_id_by_server_ip(master)\n            cred_id = sql.get_cred_id_by_server_ip(master)\n            hostname = sql.get_hostname_by_server_ip(master)\n            firewall = 1 if funct.is_service_active(master, 'firewalld') else 0\n            sql.add_server(\n                hostname + '-VIP', IP, group_id, '1', '1', '0', cred_id, ssh_port, 'VRRP IP for ' + master, haproxy, nginx, '0', firewall\n            )\n\nif form.getvalue('master_slave'):\n    master = form.getvalue('master_slave')\n    slave = form.getvalue('slave')\n    ETH = form.getvalue('interface')\n    ETH_SLAVE = form.getvalue('slave_interface')\n    IP = form.getvalue('vrrpip')\n    syn_flood = form.getvalue('syn_flood')\n    router_id = form.getvalue('router_id')\n    script = \"install_keepalived.sh\"\n    proxy = sql.get_setting('proxy')\n    keepalived_path_logs = sql.get_setting('keepalived_path_logs')\n    ssh_port = 22\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path(slave)\n\n    if ssh_enable == 0:\n        ssh_key_name = ''\n\n    servers = sql.select_servers(server=slave)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv + \" SSH_PORT=\" + ssh_port + \" router_id=\" + router_id\n        + \" ETH=\" + ETH + \" IP=\" + IP + \" MASTER=BACKUP\" + \" ETH_SLAVE=\" + ETH_SLAVE + \" keepalived_path_logs=\" + keepalived_path_logs\n        + \" HOST=\" + str(slave) + \" USER=\" + str(ssh_user_name) + \" PASS='\" + str(ssh_user_password)\n        + \"' KEY=\" + str(ssh_key_name)\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    funct.show_installation_output(error, output, 'slave Keepalived')\n\n    os.system(\"rm -f %s\" % script)\n    sql.update_server_master(master, slave)\n    sql.update_keepalived(slave)\n\nif form.getvalue('masteradd'):\n    master = form.getvalue('masteradd')\n    slave = form.getvalue('slaveadd')\n    ETH = form.getvalue('interfaceadd')\n    SLAVE_ETH = form.getvalue('slave_interfaceadd')\n    IP = form.getvalue('vrrpipadd')\n    router_id = form.getvalue('router_id')\n    kp = form.getvalue('kp')\n    return_to_master = form.getvalue('return_to_master')\n    script = \"install_keepalived.sh\"\n    proxy = sql.get_setting('proxy')\n    keepalived_path_logs = sql.get_setting('keepalived_path_logs')\n    ssh_port = 22\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path(master)\n\n    if ssh_enable == 0:\n        ssh_key_name = ''\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    servers = sql.select_servers(server=master)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv + \" SSH_PORT=\" + ssh_port + \" ETH=\" + ETH\n        + \" SLAVE_ETH=\" + SLAVE_ETH + \" keepalived_path_logs=\" + keepalived_path_logs + \" RETURN_TO_MASTER=\" + return_to_master\n        + \" IP=\" + str(IP) + \" MASTER=MASTER\" + \" RESTART=\" + kp + \" ADD_VRRP=1 HOST=\" + str(master) + \" router_id=\" + router_id\n        + \" USER=\" + str(ssh_user_name) + \" PASS='\" + str(ssh_user_password) + \"' KEY=\" + str(ssh_key_name)\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    funct.show_installation_output(error, output, 'master VRRP address')\n\nif form.getvalue('masteradd_slave'):\n    master = form.getvalue('masteradd_slave')\n    slave = form.getvalue('slaveadd')\n    ETH = form.getvalue('interfaceadd')\n    SLAVE_ETH = form.getvalue('slave_interfaceadd')\n    IP = form.getvalue('vrrpipadd')\n    router_id = form.getvalue('router_id')\n    kp = form.getvalue('kp')\n    script = \"install_keepalived.sh\"\n    proxy = sql.get_setting('proxy')\n    keepalived_path_logs = sql.get_setting('keepalived_path_logs')\n    ssh_port = 22\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path(slave)\n\n    if ssh_enable == 0:\n        ssh_key_name = ''\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    servers = sql.select_servers(server=slave)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv\n        + \" SSH_PORT=\" + ssh_port + \" ETH=\" + ETH + \" SLAVE_ETH=\" + SLAVE_ETH + \" keepalived_path_logs=\" + keepalived_path_logs\n        + \" IP=\" + str(IP) + \" MASTER=BACKUP\" + \" RESTART=\" + kp + \" ADD_VRRP=1 HOST=\" + str(slave) + \" router_id=\" + router_id\n        + \" USER=\" + str(ssh_user_name) + \" PASS='\" + str(ssh_user_password) + \"' KEY=\" + str(ssh_key_name)\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    funct.show_installation_output(error, output, 'slave VRRP address')\n\n    os.system(\"rm -f %s\" % script)\n\nif form.getvalue('master_slave_hap'):\n    master = form.getvalue('master_slave_hap')\n    slave = form.getvalue('slave')\n    server = form.getvalue('server')\n    docker = form.getvalue('docker')\n\n    if server == 'master':\n        funct.install_haproxy(master, server=server, docker=docker)\n    elif server == 'slave':\n        funct.install_haproxy(slave, server=server, docker=docker)\n\nif form.getvalue('master_slave_nginx'):\n    master = form.getvalue('master_slave_nginx')\n    slave = form.getvalue('slave')\n    server = form.getvalue('server')\n    docker = form.getvalue('docker')\n\n    if server == 'master':\n        funct.install_nginx(master, server=server, docker=docker)\n    elif server == 'slave':\n        funct.install_nginx(slave, server=server, docker=docker)\n\nif form.getvalue('install_grafana'):\n    script = \"install_grafana.sh\"\n    proxy = sql.get_setting('proxy')\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    commands = [\"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    if error:\n        funct.logging('localhost', error, haproxywi=1)\n        import socket\n\n        print(\n            'success: Grafana and Prometheus servers were installed. You can find Grafana on http://' + socket.gethostname() + ':3000<br>')\n    else:\n        for line in output:\n            if any(s in line for s in (\"Traceback\", \"FAILED\")):\n                try:\n                    print(line)\n                    break\n                except Exception:\n                    print(output)\n                    break\n        else:\n            import socket\n\n            print(\n                'success: Grafana and Prometheus servers were installed. You can find Grafana on http://' + socket.gethostname() + ':3000<br>')\n\n    os.system(\"rm -f %s\" % script)\n\nif form.getvalue('haproxy_exp_install'):\n    serv = form.getvalue('haproxy_exp_install')\n    ver = form.getvalue('exporter_v')\n    ext_prom = form.getvalue('ext_prom')\n    script = \"install_haproxy_exporter.sh\"\n    stats_port = sql.get_setting('stats_port')\n    server_state_file = sql.get_setting('server_state_file')\n    stats_user = sql.get_setting('stats_user')\n    stats_password = sql.get_setting('stats_password')\n    stat_page = sql.get_setting('stats_page')\n    proxy = sql.get_setting('proxy')\n    ssh_port = 22\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path(serv)\n\n    if ssh_enable == 0:\n        ssh_key_name = ''\n\n    servers = sql.select_servers(server=serv)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv\n        + \" STAT_PORT=\" + str(stats_port) + \" STAT_FILE=\" + server_state_file\n        + \" SSH_PORT=\" + ssh_port + \" STAT_PAGE=\" + stat_page + \" VER=\" + ver + \" EXP_PROM=\" + ext_prom\n        + \" STATS_USER=\" + stats_user + \" STATS_PASS='\" + stats_password + \"' HOST=\" + serv\n        + \" USER=\" + ssh_user_name + \" PASS='\" + ssh_user_password + \"' KEY=\" + ssh_key_name\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    funct.show_installation_output(error, output, 'HAProxy exporter')\n\n    os.system(\"rm -f %s\" % script)\n\nif form.getvalue('nginx_exp_install'):\n    serv = form.getvalue('nginx_exp_install')\n    ver = form.getvalue('exporter_v')\n    ext_prom = form.getvalue('ext_prom')\n    script = \"install_nginx_exporter.sh\"\n    stats_user = sql.get_setting('nginx_stats_user')\n    stats_password = sql.get_setting('nginx_stats_password')\n    stats_port = sql.get_setting('nginx_stats_port')\n    stats_page = sql.get_setting('nginx_stats_page')\n    proxy = sql.get_setting('proxy')\n    ssh_port = 22\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path(serv)\n\n    if ssh_enable == 0:\n        ssh_key_name = ''\n\n    servers = sql.select_servers(server=serv)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv\n        + \" STAT_PORT=\" + str(stats_port) + \" SSH_PORT=\" + ssh_port + \" STAT_PAGE=\" + stats_page\n        + \" STATS_USER=\" + stats_user + \" STATS_PASS='\" + stats_password + \"' HOST=\" + serv + \" VER=\" + ver\n        + \" EXP_PROM=\" + ext_prom + \" USER=\" + ssh_user_name + \" PASS='\" + ssh_user_password + \"' KEY=\" + ssh_key_name\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    funct.show_installation_output(error, output, 'Nginx exporter')\n\n    os.system(\"rm -f %s\" % script)\n\nif form.getvalue('node_exp_install'):\n    serv = form.getvalue('node_exp_install')\n    ver = form.getvalue('exporter_v')\n    ext_prom = form.getvalue('ext_prom')\n    script = \"install_node_exporter.sh\"\n    proxy = sql.get_setting('proxy')\n    ssh_port = 22\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path(serv)\n\n    if ssh_enable == 0:\n        ssh_key_name = ''\n\n    servers = sql.select_servers(server=serv)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv + \" SSH_PORT=\" + ssh_port\n        + \" VER=\" + ver + \" EXP_PROM=\" + ext_prom + \" HOST=\" + serv + \" USER=\" + ssh_user_name\n        + \" PASS='\" + ssh_user_password + \"' KEY=\" + ssh_key_name\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    funct.show_installation_output(error, output, 'Node exporter')\n\n    os.system(\"rm -f %s\" % script)\n\nif form.getvalue('backup') or form.getvalue('deljob') or form.getvalue('backupupdate'):\n    serv = form.getvalue('server')\n    rpath = form.getvalue('rpath')\n    time = form.getvalue('time')\n    backup_type = form.getvalue('type')\n    rserver = form.getvalue('rserver')\n    cred = form.getvalue('cred')\n    deljob = form.getvalue('deljob')\n    update = form.getvalue('backupupdate')\n    description = form.getvalue('description')\n    script = 'backup.sh'\n    ssh_port = 22\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path('localhost', id=int(cred))\n\n    if deljob:\n        time = ''\n        rpath = ''\n        backup_type = ''\n    elif update:\n        deljob = ''\n    else:\n        deljob = ''\n        if sql.check_exists_backup(serv):\n            print('warning: Backup job for %s already exists' % serv)\n            sys.exit()\n\n    servers = sql.select_servers(server=serv)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \"  HOST=\" + rserver + \"  SERVER=\" + serv\n        + \" TYPE=\" + backup_type + \" SSH_PORT=\" + ssh_port + \" TIME=\" + time\n        + \" RPATH=\" + rpath + \" DELJOB=\" + deljob + \" USER=\" + str(ssh_user_name) + \" KEY=\" + str(ssh_key_name)\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    for line in output:\n        if any(s in line for s in (\"Traceback\", \"FAILED\")):\n            try:\n                print('error: ' + line)\n                break\n            except Exception:\n                print('error: ' + output)\n                break\n    else:\n        if not deljob and not update:\n            if sql.insert_backup_job(serv, rserver, rpath, backup_type, time, cred, description):\n                from jinja2 import Environment, FileSystemLoader\n\n                env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n                template = env.get_template('new_backup.html')\n                template = template.render(\n                    backups=sql.select_backups(server=serv, rserver=rserver), sshs=sql.select_ssh()\n                )\n                print(template)\n                print('success: Backup job has been created')\n                funct.logging('backup ', ' a new backup job for server ' + serv + ' has been created', haproxywi=1, login=1)\n            else:\n                print('error: Cannot add the job into DB')\n        elif deljob:\n            sql.delete_backups(deljob)\n            print('Ok')\n            funct.logging('backup ', ' a backup job for server ' + serv + ' has been deleted', haproxywi=1, login=1)\n        elif update:\n            sql.update_backup(serv, rserver, rpath, backup_type, time, cred, description, update)\n            print('Ok')\n            funct.logging('backup ', ' a backup job for server ' + serv + ' has been updated', haproxywi=1, login=1)\n\nif form.getvalue('git_backup'):\n    server_id = form.getvalue('server')\n    service_id = form.getvalue('git_service')\n    git_init = form.getvalue('git_init')\n    repo = form.getvalue('git_repo')\n    branch = form.getvalue('git_branch')\n    period = form.getvalue('time')\n    cred = form.getvalue('cred')\n    deljob = form.getvalue('git_deljob')\n    description = form.getvalue('description')\n    servers = sql.get_dick_permit()\n    proxy = sql.get_setting('proxy')\n    services = sql.select_services()\n    server_ip = sql.select_server_ip_by_id(server_id)\n    service_name = sql.select_service_name_by_id(service_id).lower()\n    service_config_dir = sql.get_setting(service_name + '_dir')\n    script = 'git_backup.sh'\n    ssh_port = 22\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path('localhost', id=int(cred))\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    servers = sql.select_servers(server=server_ip)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    if repo is None or git_init == '0':\n        repo = ''\n    if branch is None or branch == '0':\n        branch = 'main'\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" HOST=\" + server_ip + \" DELJOB=\" + deljob\n        + \" SERVICE=\" + service_name + \" INIT=\" + git_init + \" SSH_PORT=\" + ssh_port + \" PERIOD=\" + period\n        + \" REPO=\" + repo + \" BRANCH=\" + branch + \" CONFIG_DIR=\" + service_config_dir\n        + \" PROXY=\" + proxy_serv + \" USER=\" + str(ssh_user_name) + \" KEY=\" + str(ssh_key_name)\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    for line in output:\n        if any(s in line for s in (\"Traceback\", \"FAILED\")):\n            try:\n                print('error: ' + line)\n                break\n            except Exception:\n                print('error: ' + output)\n                break\n    else:\n        if deljob == '0':\n            if sql.insert_new_git(\n                server_id=server_id, service_id=service_id, repo=repo, branch=branch,\n                period=period, cred=cred, description=description\n            ):\n                from jinja2 import Environment, FileSystemLoader\n\n                gits = sql.select_gits(server_id=server_id, service_id=service_id)\n                sshs = sql.select_ssh()\n\n                env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n                template = env.get_template('new_git.html')\n                template = template.render(gits=gits, sshs=sshs, servers=servers, services=services, new_add=1)\n                print(template)\n                print('success: Git job has been created')\n                funct.logging(\n                    server_ip, ' A new git job has been created', haproxywi=1, login=1,\n                    keep_history=1, service=service_name\n                )\n        else:\n            if sql.delete_git(form.getvalue('git_backup')):\n                print('Ok')\n        os.system(\"rm -f %s\" % script)\n\nif form.getvalue('install_nginx'):\n    funct.install_nginx(form.getvalue('install_nginx'), docker=form.getvalue('docker'))\n\nif form.getvalue('haproxyaddserv'):\n    funct.install_haproxy(form.getvalue('haproxyaddserv'), syn_flood=form.getvalue('syn_flood'),\n                          hapver=form.getvalue('hapver'), docker=form.getvalue('docker'))\n\nif form.getvalue('installwaf'):\n    funct.waf_install(form.getvalue('installwaf'))\n\nif form.getvalue('update_roxy_wi'):\n    service = form.getvalue('service')\n    services = ['roxy-wi-checker',\n                'roxy-wi',\n                'roxy-wi-keep_alive',\n                'roxy-wi-smon',\n                'roxy-wi-metrics',\n                'roxy-wi-portscanner',\n                'roxy-wi-socket']\n    if service not in services:\n        print('error: ' + service + ' is not part of Roxy-WI')\n        sys.exit()\n    funct.update_roxy_wi(service)\n\nif form.getvalue('metrics_waf'):\n    sql.update_waf_metrics_enable(form.getvalue('metrics_waf'), form.getvalue('enable'))\n\nif form.getvalue('table_metrics'):\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n    template = env.get_template('table_metrics.html')\n\n    template = template.render(table_stat=sql.select_table_metrics())\n    print(template)\n\nif form.getvalue('metrics_hapwi_ram'):\n    ip = form.getvalue('ip')\n    metrics = {'chartData': {}}\n    rams = ''\n\n    if ip == '1':\n        cmd = \"free -m |grep Mem |awk '{print $2,$3,$4,$5,$6,$7}'\"\n        metric, error = funct.subprocess_execute(cmd)\n    else:\n        commands = [\"free -m |grep Mem |awk '{print $2,$3,$4,$5,$6,$7}'\"]\n        metric, error = funct.subprocess_execute(commands[0])\n\n    for i in metric:\n        rams = i\n\n    metrics['chartData']['rams'] = rams\n\n    import json\n\n    print(json.dumps(metrics))\n\nif form.getvalue('metrics_hapwi_cpu'):\n    ip = form.getvalue('ip')\n    metrics = {'chartData': {}}\n    cpus = ''\n\n    if ip == '1':\n        cmd = \"top -b -n 1 |grep Cpu |awk -F':' '{print $2}'|awk  -F' ' 'BEGIN{ORS=\\\" \\\";} { for (i=1;i<=NF;i+=2) print $i}'\"\n        metric, error = funct.subprocess_execute(cmd)\n    else:\n        commands = [\n            \"top -b -n 1 |grep Cpu |awk -F':' '{print $2}'|awk  -F' ' 'BEGIN{ORS=\\\" \\\";} { for (i=1;i<=NF;i+=2) print $i}'\"]\n        metric, error = funct.subprocess_execute(commands[0])\n\n    for i in metric:\n        cpus = i\n\n    metrics['chartData']['cpus'] = cpus\n\n    import json\n\n    print(json.dumps(metrics))\n\nif form.getvalue('new_metrics'):\n    serv = form.getvalue('server')\n    hostname = sql.get_hostname_by_server_ip(serv)\n    time_range = form.getvalue('time_range')\n    metric = sql.select_metrics(serv, time_range=time_range)\n    metrics = {'chartData': {}}\n    metrics['chartData']['labels'] = {}\n    labels = ''\n    curr_con = ''\n    curr_ssl_con = ''\n    sess_rate = ''\n    server = ''\n\n    for i in metric:\n        label = str(i[5])\n        label = label.split(' ')[1]\n        labels += label + ','\n        curr_con += str(i[1]) + ','\n        curr_ssl_con += str(i[2]) + ','\n        sess_rate += str(i[3]) + ','\n        server = str(i[0])\n\n    metrics['chartData']['labels'] = labels\n    metrics['chartData']['curr_con'] = curr_con\n    metrics['chartData']['curr_ssl_con'] = curr_ssl_con\n    metrics['chartData']['sess_rate'] = sess_rate\n    metrics['chartData']['server'] = hostname + ' (' + server + ')'\n\n    import json\n\n    print(json.dumps(metrics))\n\nif form.getvalue('new_http_metrics'):\n    serv = form.getvalue('server')\n    hostname = sql.get_hostname_by_server_ip(serv)\n    time_range = form.getvalue('time_range')\n    metric = sql.select_metrics_http(serv, time_range=time_range)\n    metrics = {'chartData': {}}\n    metrics['chartData']['labels'] = {}\n    labels = ''\n    http_2xx = ''\n    http_3xx = ''\n    http_4xx = ''\n    http_5xx = ''\n    server = ''\n\n    for i in metric:\n        label = str(i[5])\n        label = label.split(' ')[1]\n        labels += label + ','\n        http_2xx += str(i[1]) + ','\n        http_3xx += str(i[2]) + ','\n        http_4xx += str(i[3]) + ','\n        http_5xx += str(i[4]) + ','\n        server = str(i[0])\n\n    metrics['chartData']['labels'] = labels\n    metrics['chartData']['http_2xx'] = http_2xx\n    metrics['chartData']['http_3xx'] = http_3xx\n    metrics['chartData']['http_4xx'] = http_4xx\n    metrics['chartData']['http_5xx'] = http_5xx\n    metrics['chartData']['server'] = hostname + ' (' + server + ')'\n\n    import json\n\n    print(json.dumps(metrics))\n\nif any((form.getvalue('new_nginx_metrics'), form.getvalue('new_apache_metrics'), form.getvalue('new_waf_metrics'))):\n    serv = form.getvalue('server')\n    hostname = sql.get_hostname_by_server_ip(serv)\n    time_range = form.getvalue('time_range')\n    if form.getvalue('new_nginx_metrics'):\n        metric = sql.select_nginx_metrics(serv, time_range=time_range)\n    elif form.getvalue('new_apache_metrics'):\n        metric = sql.select_apache_metrics(serv, time_range=time_range)\n    elif form.getvalue('new_waf_metrics'):\n        metric = sql.select_waf_metrics(serv, time_range=time_range)\n    metrics = {'chartData': {}}\n    metrics['chartData']['labels'] = {}\n    labels = ''\n    curr_con = ''\n\n    for i in metric:\n        label = str(i[2])\n        label = label.split(' ')[1]\n        labels += label + ','\n        curr_con += str(i[1]) + ','\n\n    metrics['chartData']['labels'] = labels\n    metrics['chartData']['curr_con'] = curr_con\n    metrics['chartData']['server'] = hostname + ' (' + serv + ')'\n\n    import json\n\n    print(json.dumps(metrics))\n\nif form.getvalue('get_hap_v'):\n    output = funct.check_haproxy_version(serv)\n    print(output)\n\nif form.getvalue('get_nginx_v'):\n    server_id = sql.select_server_id_by_ip(serv)\n    is_dockerized = sql.select_service_setting(server_id, 'nginx', 'dockerized')\n\n    if is_dockerized == '1':\n        container_name = sql.get_setting('nginx_container_name')\n        cmd = [\"docker exec -it \" + container_name + \"  /usr/sbin/nginx -v 2>&1|awk '{print $3}'\"]\n    else:\n        cmd = ['sudo /usr/sbin/nginx -v']\n    print(funct.ssh_command(serv, cmd))\n\nif form.getvalue('get_keepalived_v'):\n    cmd = [\"sudo /usr/sbin/keepalived -v 2>&1|head -1|awk '{print $2}'\"]\n    print(funct.ssh_command(serv, cmd))\n\nif form.getvalue('get_exporter_v'):\n    print(funct.get_service_version(serv, form.getvalue('get_exporter_v')))\n\nif form.getvalue('bwlists'):\n    lib_path = funct.get_config_var('main', 'lib_path')\n    list_path = lib_path + \"/\" + sql.get_setting('lists_path') + \"/\" + form.getvalue('group') + \"/\" + form.getvalue('color') + \"/\" + form.getvalue('bwlists')\n    try:\n        file = open(list_path, \"r\")\n        file_read = file.read()\n        file.close()\n        print(file_read)\n    except IOError:\n        print('error: Cat\\'n read ' + form.getvalue('color') + ' list , ')\n\nif form.getvalue('bwlists_create'):\n    color = form.getvalue('color')\n    lib_path = funct.get_config_var('main', 'lib_path')\n    list_name = form.getvalue('bwlists_create').split('.')[0]\n    list_name += '.lst'\n    list_path = lib_path + \"/\" + sql.get_setting('lists_path') + \"/\" + form.getvalue('group') + \"/\" + color + \"/\" + list_name\n    try:\n        open(list_path, 'a').close()\n        print('success: ')\n        try:\n            funct.logging(serv, 'has been created  ' + color + ' list ' + list_name, haproxywi=1, login=1)\n        except Exception:\n            pass\n    except IOError as e:\n        print('error: Cannot create new ' + color + ' list. %s , ' % e)\n\nif form.getvalue('bwlists_save'):\n    color = form.getvalue('color')\n    bwlists_save = form.getvalue('bwlists_save')\n    lib_path = funct.get_config_var('main', 'lib_path')\n    list_path = lib_path + \"/\" + sql.get_setting('lists_path') + \"/\" + form.getvalue('group') + \"/\" + color + \"/\" + bwlists_save\n    try:\n        with open(list_path, \"w\") as file:\n            file.write(form.getvalue('bwlists_content'))\n    except IOError as e:\n        print('error: Cannot save ' + color + ' list. %s , ' % e)\n\n    path = sql.get_setting('haproxy_dir') + \"/\" + color\n    servers = []\n\n    if serv != 'all':\n        servers.append(serv)\n\n        MASTERS = sql.is_master(serv)\n        for master in MASTERS:\n            if master[0] is not None:\n                servers.append(master[0])\n    else:\n        server = sql.get_dick_permit()\n        for s in server:\n            servers.append(s[2])\n\n    for serv in servers:\n        funct.ssh_command(serv, [\"sudo mkdir \" + path])\n        funct.ssh_command(serv, [\"sudo chown $(whoami) \" + path])\n        error = funct.upload(serv, path + \"/\" + bwlists_save, list_path, dir='fullpath')\n\n        if error:\n            print('error: Upload fail: %s , ' % error)\n        else:\n            print('success: Edited ' + color + ' list was uploaded to ' + serv + ' , ')\n            try:\n                funct.logging(serv, 'has been edited the ' + color + ' list ' + bwlists_save, haproxywi=1, login=1)\n            except Exception:\n                pass\n\n            server_id = sql.select_server_id_by_ip(server_ip=serv)\n            haproxy_enterprise = sql.select_service_setting(server_id, 'haproxy', 'haproxy_enterprise')\n            if haproxy_enterprise == '1':\n                haproxy_service_name = \"hapee-2.0-lb\"\n            else:\n                haproxy_service_name = \"haproxy\"\n\n            if form.getvalue('bwlists_restart') == 'restart':\n                funct.ssh_command(serv, [\"sudo systemctl restart \" + haproxy_service_name])\n            elif form.getvalue('bwlists_restart') == 'reload':\n                funct.ssh_command(serv, [\"sudo systemctl reload \" + haproxy_service_name])\n\nif form.getvalue('bwlists_delete'):\n    color = form.getvalue('color')\n    bwlists_delete = form.getvalue('bwlists_delete')\n    lib_path = funct.get_config_var('main', 'lib_path')\n    list_path = lib_path + \"/\" + sql.get_setting('lists_path') + \"/\" + form.getvalue('group') + \"/\" + color + \"/\" + bwlists_delete\n    try:\n        os.remove(list_path)\n    except IOError as e:\n        print('error: Cannot delete ' + color + ' list. %s , ' % e)\n\n    path = sql.get_setting('haproxy_dir') + \"/\" + color\n    servers = []\n\n    if serv != 'all':\n        servers.append(serv)\n\n        MASTERS = sql.is_master(serv)\n        for master in MASTERS:\n            if master[0] is not None:\n                servers.append(master[0])\n    else:\n        server = sql.get_dick_permit()\n        for s in server:\n            servers.append(s[2])\n\n    for serv in servers:\n        error = funct.ssh_command(serv, [\"sudo rm \" + path + \"/\" + bwlists_delete], return_err=1)\n\n        if error:\n            print('error: Deleting fail: %s , ' % error)\n        else:\n            print('success: the ' + color + ' list has been deleted on ' + serv + ' , ')\n            try:\n                funct.logging(serv, 'has been deleted the ' + color + ' list ' + bwlists_delete, haproxywi=1, login=1)\n            except Exception:\n                pass\n\nif form.getvalue('get_lists'):\n    lib_path = funct.get_config_var('main', 'lib_path')\n    list_path = lib_path + \"/\" + sql.get_setting('lists_path') + \"/\" + form.getvalue('group') + \"/\" + form.getvalue('color')\n    lists = funct.get_files(dir=list_path, format=\"lst\")\n    for list in lists:\n        print(list)\n\nif form.getvalue('get_ldap_email'):\n    username = form.getvalue('get_ldap_email')\n    import ldap\n\n    server = sql.get_setting('ldap_server')\n    port = sql.get_setting('ldap_port')\n    user = sql.get_setting('ldap_user')\n    password = sql.get_setting('ldap_password')\n    ldap_base = sql.get_setting('ldap_base')\n    domain = sql.get_setting('ldap_domain')\n    ldap_search_field = sql.get_setting('ldap_search_field')\n    ldap_class_search = sql.get_setting('ldap_class_search')\n    ldap_user_attribute = sql.get_setting('ldap_user_attribute')\n    ldap_type = sql.get_setting('ldap_type')\n\n    ldap_proto = 'ldap' if ldap_type == \"0\" else 'ldaps'\n\n    ldap_bind = ldap.initialize('{}://{}:{}/'.format(ldap_proto, server, port))\n\n    try:\n        ldap_bind.protocol_version = ldap.VERSION3\n        ldap_bind.set_option(ldap.OPT_REFERRALS, 0)\n\n        bind = ldap_bind.simple_bind_s(user, password)\n\n        criteria = \"(&(objectClass=\" + ldap_class_search + \")(\" + ldap_user_attribute + \"=\" + username + \"))\"\n        attributes = [ldap_search_field]\n        result = ldap_bind.search_s(ldap_base, ldap.SCOPE_SUBTREE, criteria, attributes)\n\n        results = [entry for dn, entry in result if isinstance(entry, dict)]\n        try:\n            print('[\"' + results[0][ldap_search_field][0].decode(\"utf-8\") + '\",\"' + domain + '\"]')\n        except Exception:\n            print('error: user not found')\n    finally:\n        ldap_bind.unbind()\n\nif form.getvalue('change_waf_mode'):\n    waf_mode = form.getvalue('change_waf_mode')\n    server_hostname = form.getvalue('server_hostname')\n    haproxy_dir = sql.get_setting('haproxy_dir')\n    serv = sql.select_server_by_name(server_hostname)\n    commands = [\"sudo sed -i 's/^SecRuleEngine.*/SecRuleEngine %s/' %s/waf/modsecurity.conf \" % (waf_mode, haproxy_dir)]\n    funct.ssh_command(serv, commands)\n    funct.logging(serv, 'Has been changed WAF mod to ' + waf_mode, haproxywi=1, login=1)\n\nerror_mess = 'error: All fields must be completed'\n\nif form.getvalue('newuser') is not None:\n    email = form.getvalue('newemail')\n    password = form.getvalue('newpassword')\n    role = form.getvalue('newrole')\n    new_user = form.getvalue('newusername')\n    page = form.getvalue('page')\n    activeuser = form.getvalue('activeuser')\n    group = form.getvalue('newgroupuser')\n    role_id = sql.get_role_id_by_name(role)\n\n    if funct.check_user_group():\n        if funct.is_admin(level=role_id):\n            if sql.add_user(new_user, email, password, role, activeuser, group):\n                from jinja2 import Environment, FileSystemLoader\n\n                env = Environment(loader=FileSystemLoader('templates/'), autoescape=True)\n                template = env.get_template('ajax/new_user.html')\n\n                template = template.render(users=sql.select_users(user=new_user),\n                                           groups=sql.select_groups(),\n                                           page=page,\n                                           roles=sql.select_roles(),\n                                           adding=1)\n                print(template)\n                funct.logging('a new user ' + new_user, ' has been created ', haproxywi=1, login=1)\n        else:\n            print('error: dalsdm')\n            funct.logging(new_user, ' tried to privilege escalation', haproxywi=1, login=1)\n\nif form.getvalue('userdel') is not None:\n    userdel = form.getvalue('userdel')\n    user = sql.select_users(id=userdel)\n    username = ''\n    for u in user:\n        username = u.username\n    if sql.delete_user(userdel):\n        sql.delete_user_groups(userdel)\n        funct.logging(username, ' has been deleted user ', haproxywi=1, login=1)\n        print(\"Ok\")\n\nif form.getvalue('updateuser') is not None:\n    email = form.getvalue('email')\n    role = form.getvalue('role')\n    new_user = form.getvalue('updateuser')\n    user_id = form.getvalue('id')\n    activeuser = form.getvalue('activeuser')\n    group = form.getvalue('usergroup')\n    role_id = sql.get_role_id_by_name(role)\n\n    if funct.check_user_group():\n        if funct.is_admin(level=role_id):\n            sql.update_user(new_user, email, role, user_id, activeuser)\n            funct.logging(new_user, ' has been updated user ', haproxywi=1, login=1)\n        else:\n            funct.logging(new_user, ' tried to privilege escalation', haproxywi=1, login=1)\n\nif form.getvalue('updatepassowrd') is not None:\n    password = form.getvalue('updatepassowrd')\n    if form.getvalue('uuid'):\n        user_id = sql.get_user_id_by_uuid(form.getvalue('uuid'))\n    else:\n        user_id = form.getvalue('id')\n    user = sql.select_users(id=user_id)\n    for u in user:\n        username = u.username\n    sql.update_user_password(password, user_id)\n    funct.logging('user ' + username, ' has changed password ', haproxywi=1, login=1)\n    print(\"Ok\")\n\nif form.getvalue('newserver') is not None:\n    hostname = form.getvalue('servername')\n    ip = form.getvalue('newip')\n    ip = funct.is_ip_or_dns(ip)\n    group = form.getvalue('newservergroup')\n    scan_server = form.getvalue('scan_server')\n    typeip = form.getvalue('typeip')\n    haproxy = form.getvalue('haproxy')\n    nginx = form.getvalue('nginx')\n    apache = form.getvalue('apache')\n    firewall = form.getvalue('firewall')\n    enable = form.getvalue('enable')\n    master = form.getvalue('slave')\n    cred = form.getvalue('cred')\n    page = form.getvalue('page')\n    page = page.split(\"#\")[0]\n    port = form.getvalue('newport')\n    desc = form.getvalue('desc')\n\n    if ip == '':\n        print('error: IP or DNS name is not valid')\n        sys.exit()\n\n    if sql.add_server(hostname, ip, group, typeip, enable, master, cred, port, desc, haproxy, nginx, apache, firewall):\n\n        try:\n            if scan_server == '1':\n                nginx_config_path = sql.get_setting('nginx_config_path')\n                haproxy_config_path = sql.get_setting('haproxy_config_path')\n                haproxy_dir = sql.get_setting('haproxy_dir')\n                apache_config_path = sql.get_setting('apache_config_path')\n                keepalived_config_path = sql.get_setting('keepalived_config_path')\n\n                if funct.is_file_exists(ip, nginx_config_path):\n                    sql.update_nginx(ip)\n\n                if funct.is_file_exists(ip, haproxy_config_path):\n                    sql.update_haproxy(ip)\n\n                if funct.is_file_exists(ip, keepalived_config_path):\n                    sql.update_keepalived(ip)\n\n                if funct.is_file_exists(ip, apache_config_path):\n                    sql.update_apache(ip)\n\n                if funct.is_file_exists(ip, haproxy_dir + '/waf/bin/modsecurity'):\n                    sql.insert_waf_metrics_enable(ip, \"0\")\n                    sql.insert_waf_rules(ip)\n\n                if funct.is_service_active(ip, 'firewalld'):\n                    sql.update_firewall(ip)\n        except Exception as e:\n            funct.logging('Cannot scan a new server ' + hostname, str(e), haproxywi=1)\n\n        try:\n            sql.insert_new_checker_setting_for_server(ip)\n        except Exception as e:\n            funct.logging('Cannot insert Checker settings for ' + hostname, str(e), haproxywi=1)\n\n        try:\n            funct.get_system_info(ip)\n        except Exception as e:\n            funct.logging('Cannot get information from ' + hostname, str(e), haproxywi=1, login=1)\n\n        try:\n            user_status, user_plan = funct.return_user_status()\n        except Exception as e:\n            user_status, user_plan = 0, 0\n            funct.logging('localhost', 'Cannot get a user plan: ' + str(e), haproxywi=1)\n\n        from jinja2 import Environment, FileSystemLoader\n\n        env = Environment(loader=FileSystemLoader('templates/'), autoescape=True)\n        template = env.get_template('ajax/new_server.html')\n\n        template = template.render(groups=sql.select_groups(),\n                                   servers=sql.select_servers(server=ip),\n                                   masters=sql.select_servers(get_master_servers=1),\n                                   sshs=sql.select_ssh(group=group),\n                                   page=page,\n                                   user_status=user_status,\n                                   user_plan=user_plan,\n                                   adding=1)\n        print(template)\n        funct.logging(ip, 'A new server ' + hostname + ' has been created', haproxywi=1, login=1,\n                      keep_history=1, service='server')\n\nif form.getvalue('updatehapwiserver') is not None:\n    hapwi_id = form.getvalue('updatehapwiserver')\n    active = form.getvalue('active')\n    name = form.getvalue('name')\n    alert = form.getvalue('alert_en')\n    metrics = form.getvalue('metrics')\n    service = form.getvalue('service_name')\n    sql.update_hapwi_server(hapwi_id, alert, metrics, active, service)\n    server_ip = sql.select_server_ip_by_id(hapwi_id)\n    funct.logging(server_ip, 'The server ' + name + ' has been updated ', haproxywi=1, login=1, keep_history=1, service=service)\n\nif form.getvalue('updateserver') is not None:\n    name = form.getvalue('updateserver')\n    group = form.getvalue('servergroup')\n    typeip = form.getvalue('typeip')\n    haproxy = form.getvalue('haproxy')\n    nginx = form.getvalue('nginx')\n    apache = form.getvalue('apache')\n    firewall = form.getvalue('firewall')\n    enable = form.getvalue('enable')\n    master = form.getvalue('slave')\n    serv_id = form.getvalue('id')\n    cred = form.getvalue('cred')\n    port = form.getvalue('port')\n    protected = form.getvalue('protected')\n    desc = form.getvalue('desc')\n\n    if name is None or port is None:\n        print(error_mess)\n    else:\n        sql.update_server(name, group, typeip, enable, master, serv_id, cred, port, desc, haproxy, nginx, apache, firewall, protected)\n        funct.logging('the server ' + name, ' has been updated ', haproxywi=1, login=1)\n        server_ip = sql.select_server_ip_by_id(serv_id)\n        funct.logging(server_ip, 'The server ' + name + ' has been update', haproxywi=1, login=1,\n                      keep_history=1, service='server')\n\nif form.getvalue('serverdel') is not None:\n    server_id = form.getvalue('serverdel')\n    server = sql.select_servers(id=server_id)\n    server_ip = ''\n    for s in server:\n        hostname = s[1]\n        server_ip = s[2]\n    if sql.check_exists_backup(server_ip):\n        print('warning: Delete the backup first ')\n        sys.exit()\n    if sql.delete_server(server_id):\n        sql.delete_waf_server(server_id)\n        sql.delete_port_scanner_settings(server_id)\n        sql.delete_waf_rules(server_ip)\n        sql.delete_action_history(server_id)\n        sql.delete_system_info(server_id)\n        sql.delete_service_settings(server_id)\n        print(\"Ok\")\n        funct.logging(server_ip, 'The server ' + hostname + ' has been deleted', haproxywi=1, login=1)\n\nif form.getvalue('newgroup') is not None:\n    newgroup = form.getvalue('groupname')\n    desc = form.getvalue('newdesc')\n    if newgroup is None:\n        print(error_mess)\n    else:\n        if sql.add_group(newgroup, desc):\n            from jinja2 import Environment, FileSystemLoader\n\n            env = Environment(loader=FileSystemLoader('templates/ajax/'), autoescape=True)\n            template = env.get_template('/new_group.html')\n\n            output_from_parsed_template = template.render(groups=sql.select_groups(group=newgroup))\n            print(output_from_parsed_template)\n            funct.logging('localhost', 'A new group ' + newgroup + ' has been created', haproxywi=1, login=1)\n\nif form.getvalue('groupdel') is not None:\n    groupdel = form.getvalue('groupdel')\n    group = sql.select_groups(id=groupdel)\n    for g in group:\n        groupname = g.name\n    if sql.delete_group(groupdel):\n        print(\"Ok\")\n        funct.logging('localhost', 'The ' + groupname + ' has been deleted', haproxywi=1, login=1)\n\nif form.getvalue('updategroup') is not None:\n    name = form.getvalue('updategroup')\n    descript = form.getvalue('descript')\n    group_id = form.getvalue('id')\n    if name is None:\n        print(error_mess)\n    else:\n        try:\n            sql.update_group(name, descript, group_id)\n            funct.logging('localhost', 'The ' + name + ' has been updated', haproxywi=1, login=1)\n        except Exception as e:\n            print('error: ' + str(e))\n\nif form.getvalue('new_ssh'):\n    user_group = funct.get_user_group()\n    name = form.getvalue('new_ssh')\n    name = name + '_' + user_group\n    enable = form.getvalue('ssh_enable')\n    group = form.getvalue('new_group')\n    username = form.getvalue('ssh_user')\n    password = form.getvalue('ssh_pass')\n    page = form.getvalue('page')\n    page = page.split(\"#\")[0]\n\n    if username is None or name is None:\n        print(error_mess)\n    else:\n        if sql.insert_new_ssh(name, enable, group, username, password):\n            from jinja2 import Environment, FileSystemLoader\n\n            env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n            template = env.get_template('/new_ssh.html')\n            output_from_parsed_template = template.render(groups=sql.select_groups(), sshs=sql.select_ssh(name=name),\n                                                          page=page)\n            print(output_from_parsed_template)\n            funct.logging('localhost', 'A new SSH credentials ' + name + ' has created', haproxywi=1, login=1)\n\nif form.getvalue('sshdel') is not None:\n    lib_path = funct.get_config_var('main', 'lib_path')\n    sshdel = funct.checkAjaxInput(form.getvalue('sshdel'))\n\n    for sshs in sql.select_ssh(id=sshdel):\n        ssh_enable = sshs.enable\n        name = sshs.name\n        ssh_key_name = lib_path + '/keys/%s.pem' % sshs.name\n\n    if ssh_enable == 1:\n        cmd = 'rm -f %s' % ssh_key_name\n        try:\n            funct.subprocess_execute(cmd)\n        except Exception:\n            pass\n    if sql.delete_ssh(sshdel):\n        print(\"Ok\")\n        funct.logging('localhost', 'The SSH credentials ' + name + ' has deleted', haproxywi=1, login=1)\n\nif form.getvalue('updatessh'):\n    ssh_id = form.getvalue('id')\n    name = form.getvalue('name')\n    enable = form.getvalue('ssh_enable')\n    group = form.getvalue('group')\n    username = form.getvalue('ssh_user')\n    password = form.getvalue('ssh_pass')\n\n    if username is None:\n        print(error_mess)\n    else:\n        lib_path = funct.get_config_var('main', 'lib_path')\n\n        for sshs in sql.select_ssh(id=ssh_id):\n            ssh_enable = sshs.enable\n            ssh_key_name = lib_path + '/keys/%s.pem' % sshs.name\n            new_ssh_key_name = lib_path + '/keys/%s.pem' % name\n\n        if ssh_enable == 1:\n            cmd = 'mv %s %s' % (ssh_key_name, new_ssh_key_name)\n            cmd1 = 'chmod 600 %s' % new_ssh_key_name\n            try:\n                funct.subprocess_execute(cmd)\n                funct.subprocess_execute(cmd1)\n            except Exception:\n                pass\n        sql.update_ssh(ssh_id, name, enable, group, username, password)\n        funct.logging('localhost', 'The SSH credentials ' + name + ' has been updated ', haproxywi=1, login=1)\n\nif form.getvalue('ssh_cert'):\n    import paramiko\n\n    user_group = funct.get_user_group()\n    name = funct.checkAjaxInput(form.getvalue('name'))\n\n    try:\n        key = paramiko.pkey.load_private_key(form.getvalue('ssh_cert'))\n    except Exception as e:\n        print('error: Cannot save SSH key file: ', str(e))\n\n    lib_path = funct.get_config_var('main', 'lib_path')\n    full_dir = lib_path + '/keys/'\n    ssh_keys = name + '.pem'\n\n    try:\n        split_name = name.split('_')[1]\n        split_name = True\n    except Exception:\n        split_name = False\n\n    if not os.path.isfile(ssh_keys) and not split_name:\n        name = name + '_' + user_group\n\n    if not os.path.exists(full_dir):\n        os.makedirs(full_dir)\n\n    ssh_keys = full_dir + name + '.pem'\n\n    try:\n        # cloud = sql.is_cloud()\n        # if cloud != '':\n        #     key.write_private_key_file(ssh_keys, password=cloud)\n        # else:\n        key.write_private_key_file(ssh_keys)\n    except Exception as e:\n        print('error: Cannot save SSH key file: ', str(e))\n    else:\n        print('success: SSH key has been saved into: %s ' % ssh_keys)\n\n    try:\n        cmd = 'chmod 600 %s' % ssh_keys\n        funct.subprocess_execute(cmd)\n    except IOError as e:\n        funct.logging('localhost', e.args[0], haproxywi=1)\n\n    funct.logging(\"localhost\", \"A new SSH cert has been uploaded %s\" % ssh_keys, haproxywi=1, login=1)\n\nif form.getvalue('newtelegram'):\n    token = form.getvalue('newtelegram')\n    channel = form.getvalue('chanel')\n    group = form.getvalue('telegramgroup')\n    page = form.getvalue('page')\n    page = page.split(\"#\")[0]\n\n    if token is None or channel is None or group is None:\n        print(error_mess)\n    else:\n        if sql.insert_new_telegram(token, channel, group):\n            from jinja2 import Environment, FileSystemLoader\n\n            env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n            template = env.get_template('/new_telegram.html')\n            output_from_parsed_template = template.render(groups=sql.select_groups(),\n                                                          telegrams=sql.select_telegram(token=token), page=page)\n            print(output_from_parsed_template)\n            funct.logging('localhost', 'A new Telegram channel ' + channel + ' has been created ', haproxywi=1, login=1)\n\nif form.getvalue('newslack'):\n    token = form.getvalue('newslack')\n    channel = form.getvalue('chanel')\n    group = form.getvalue('slackgroup')\n    page = form.getvalue('page')\n    page = page.split(\"#\")[0]\n\n    if token is None or channel is None or group is None:\n        print(error_mess)\n    else:\n        if sql.insert_new_slack(token, channel, group):\n            from jinja2 import Environment, FileSystemLoader\n\n            env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n            template = env.get_template('/new_slack.html')\n            output_from_parsed_template = template.render(groups=sql.select_groups(),\n                                                          slacks=sql.select_slack(token=token), page=page)\n            print(output_from_parsed_template)\n            funct.logging('localhost', 'A new Slack channel ' + channel + ' has been created ', haproxywi=1, login=1)\n\nif form.getvalue('telegramdel') is not None:\n    telegramdel = form.getvalue('telegramdel')\n    telegram = sql.select_telegram(id=telegramdel)\n    telegram_name = ''\n    for t in telegram:\n        telegram_name = t.token\n    if sql.delete_telegram(telegramdel):\n        print(\"Ok\")\n        funct.logging('localhost', 'The Telegram channel ' + telegram_name + ' has been deleted ', haproxywi=1, login=1)\n\nif form.getvalue('slackdel') is not None:\n    slackdel = form.getvalue('slackdel')\n    slack = sql.select_slack(id=slackdel)\n    slack_name = ''\n    for t in slack:\n        slack_name = t.chanel_name\n    if sql.delete_slack(slackdel):\n        print(\"Ok\")\n        funct.logging('localhost', 'The Slack channel ' + slack_name + ' has been deleted ', haproxywi=1, login=1)\n\nif form.getvalue('updatetoken') is not None:\n    token = form.getvalue('updatetoken')\n    channel = form.getvalue('updategchanel')\n    group = form.getvalue('updatetelegramgroup')\n    user_id = form.getvalue('id')\n    if token is None or channel is None or group is None:\n        print(error_mess)\n    else:\n        sql.update_telegram(token, channel, group, user_id)\n        funct.logging('group ' + group, 'The Telegram token has been updated for channel: ' + channel, haproxywi=1, login=1)\n\nif form.getvalue('update_slack_token') is not None:\n    token = form.getvalue('update_slack_token')\n    channel = form.getvalue('updategchanel')\n    group = form.getvalue('updateslackgroup')\n    user_id = form.getvalue('id')\n    if token is None or channel is None or group is None:\n        print(error_mess)\n    else:\n        sql.update_slack(token, channel, group, user_id)\n        funct.logging('group ' + group, 'The Slack token has been updated for channel: ' + channel, haproxywi=1, login=1)\n\nif form.getvalue('updatesettings') is not None:\n    settings = form.getvalue('updatesettings')\n    val = form.getvalue('val')\n    if sql.update_setting(settings, val):\n        funct.logging('localhost', 'The ' + settings + ' setting has been changed to: ' + str(val), haproxywi=1, login=1)\n        print(\"Ok\")\n\nif form.getvalue('getuserservices'):\n    user_id = form.getvalue('getuserservices')\n    groups = []\n    u_g = sql.select_user_groups(user_id)\n    services = sql.select_services()\n    for g in u_g:\n        groups.append(g.user_group_id)\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n    template = env.get_template('/show_user_services.html')\n    template = template.render(user_services=sql.select_user_services(user_id), id=user_id, services=services)\n    print(template)\n\nif form.getvalue('getusergroups'):\n    user_id = form.getvalue('getusergroups')\n    groups = []\n    u_g = sql.select_user_groups(user_id)\n    for g in u_g:\n        groups.append(g.user_group_id)\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n    template = env.get_template('/show_user_groups.html')\n    template = template.render(groups=sql.select_groups(), user_groups=groups, id=user_id)\n    print(template)\n\nif form.getvalue('changeUserGroupId') is not None:\n    group_id = form.getvalue('changeUserGroupId')\n    groups = form.getvalue('changeUserGroups')\n    user = form.getvalue('changeUserGroupsUser')\n    if sql.delete_user_groups(group_id):\n        for group in groups:\n            if group[0] == ',':\n                continue\n            sql.update_user_groups(groups=group[0], user_group_id=group_id)\n\n    funct.logging('localhost', 'Groups has been updated for user: ' + user, haproxywi=1, login=1)\n\nif form.getvalue('changeUserServicesId') is not None:\n    user_id = form.getvalue('changeUserServicesId')\n    services = form.getvalue('changeUserServices')\n    user = form.getvalue('changeUserServicesUser')\n\n    if sql.update_user_services(services=services, user_id=user_id):\n        funct.logging('localhost', 'Access to the services has been updated for user: ' + user, haproxywi=1, login=1)\n\nif form.getvalue('changeUserCurrentGroupId') is not None:\n    group_id = form.getvalue('changeUserCurrentGroupId')\n    user_uuid = form.getvalue('changeUserGroupsUser')\n\n    if sql.update_user_current_groups(group_id, user_uuid):\n        print('Ok')\n    else:\n        print('error: Cannot change group')\n\nif form.getvalue('getcurrentusergroup') is not None:\n    import http.cookies\n\n    cookie = http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\"))\n    user_id = cookie.get('uuid')\n    group = cookie.get('group')\n    group_id = sql.get_user_id_by_uuid(user_id.value)\n    groups = sql.select_user_groups_with_names(group_id)\n\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n    template = env.get_template('/show_user_current_group.html')\n    template = template.render(groups=groups, group=group.value, id=group_id)\n    print(template)\n\nif form.getvalue('newsmon') is not None:\n    user_group = funct.get_user_group(id=1)\n    server = form.getvalue('newsmon')\n    port = form.getvalue('newsmonport')\n    enable = form.getvalue('newsmonenable')\n    http = form.getvalue('newsmonproto')\n    uri = form.getvalue('newsmonuri')\n    body = form.getvalue('newsmonbody')\n    group = form.getvalue('newsmongroup')\n    desc = form.getvalue('newsmondescription')\n    telegram = form.getvalue('newsmontelegram')\n    slack = form.getvalue('newsmonslack')\n\n    try:\n        port = int(port)\n    except Exception:\n        print('SMON error: port must number')\n        sys.exit()\n    if port > 65535 or port < 0:\n        print('SMON error: port must be 0-65535')\n        sys.exit()\n    if port == 80 and http == 'https':\n        print('SMON error: Cannot be HTTPS with 80 port')\n        sys.exit()\n    if port == 443 and http == 'http':\n        print('SMON error: Cannot be HTTP with 443 port')\n        sys.exit()\n\n    last_id = sql.insert_smon(server, port, enable, http, uri, body, group, desc, telegram, slack, user_group)\n    if last_id:\n        from jinja2 import Environment, FileSystemLoader\n        env = Environment(loader=FileSystemLoader('templates'), autoescape=True)\n        template = env.get_template('ajax/show_new_smon.html')\n        template = template.render(\n            smon=sql.select_smon_by_id(last_id),\n            telegrams=sql.get_user_telegram_by_group(user_group),\n            slacks=sql.get_user_slack_by_group(user_group))\n        print(template)\n        funct.logging('SMON', ' Has been add a new server ' + server + ' to SMON ', haproxywi=1, login=1)\n\nif form.getvalue('smondel') is not None:\n    user_group = funct.get_user_group(id=1)\n    smon_id = form.getvalue('smondel')\n\n    if funct.check_user_group():\n        if sql.delete_smon(smon_id, user_group):\n            print('Ok')\n            funct.logging('SMON', ' Has been delete server from SMON ', haproxywi=1, login=1)\n\nif form.getvalue('showsmon') is not None:\n    user_group = funct.get_user_group(id=1)\n    sort = form.getvalue('sort')\n\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates'), autoescape=True)\n    template = env.get_template('ajax/smon_dashboard.html')\n    template = template.render(smon=sql.smon_list(user_group), sort=sort)\n    print(template)\n\nif form.getvalue('updateSmonIp') is not None:\n    smon_id = form.getvalue('id')\n    ip = form.getvalue('updateSmonIp')\n    port = form.getvalue('updateSmonPort')\n    en = form.getvalue('updateSmonEn')\n    http = form.getvalue('updateSmonHttp')\n    body = form.getvalue('updateSmonBody')\n    telegram = form.getvalue('updateSmonTelegram')\n    slack = form.getvalue('updateSmonSlack')\n    group = form.getvalue('updateSmonGroup')\n    desc = form.getvalue('updateSmonDesc')\n\n    try:\n        port = int(port)\n    except Exception:\n        print('SMON error: port must number')\n        sys.exit()\n    if port > 65535 or port < 0:\n        print('SMON error: port must be 0-65535')\n        sys.exit()\n    if port == 80 and http == 'https':\n        print('SMON error: Cannot be https with 80 port')\n        sys.exit()\n    if port == 443 and http == 'http':\n        print('SMON error: Cannot be HTTP with 443 port')\n        sys.exit()\n\n    if sql.update_smon(smon_id, ip, port, body, telegram, slack, group, desc, en):\n        print(\"Ok\")\n        funct.logging('SMON', ' Has been update the server ' + ip + ' to SMON ', haproxywi=1, login=1)\n\nif form.getvalue('showBytes') is not None:\n    serv = funct.checkAjaxInput(form.getvalue('showBytes'))\n\n    port = sql.get_setting('haproxy_sock_port')\n    bin_bout = []\n    cmd = \"echo 'show stat' |nc {} {} |cut -d ',' -f 1-2,9|grep -E '[0-9]'|awk -F',' '{{sum+=$3;}}END{{print sum;}}'\".format(serv, port)\n    bin, stderr = funct.subprocess_execute(cmd)\n    bin_bout.append(bin[0])\n    cmd = \"echo 'show stat' |nc {} {} |cut -d ',' -f 1-2,10|grep -E '[0-9]'|awk -F',' '{{sum+=$3;}}END{{print sum;}}'\".format(serv, port)\n    bin, stderr = funct.subprocess_execute(cmd)\n    bin_bout.append(bin[0])\n    cmd = \"echo 'show stat' |nc {} {} |cut -d ',' -f 1-2,5|grep -E '[0-9]'|awk -F',' '{{sum+=$3;}}END{{print sum;}}'\".format(serv, port)\n    bin, stderr = funct.subprocess_execute(cmd)\n    bin_bout.append(bin[0])\n    cmd = \"echo 'show stat' |nc {} {} |cut -d ',' -f 1-2,8|grep -E '[0-9]'|awk -F',' '{{sum+=$3;}}END{{print sum;}}'\".format(serv, port)\n    bin, stderr = funct.subprocess_execute(cmd)\n    bin_bout.append(bin[0])\n\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates'), autoescape=True)\n    template = env.get_template('ajax/bin_bout.html')\n    template = template.render(bin_bout=bin_bout, serv=serv)\n    print(template)\n\nif form.getvalue('nginxConnections'):\n    import requests\n    serv = form.getvalue('nginxConnections')\n    port = sql.get_setting('nginx_stats_port')\n    user = sql.get_setting('nginx_stats_user')\n    password = sql.get_setting('nginx_stats_password')\n    page = sql.get_setting('nginx_stats_page')\n    url = 'http://{}:{}/{}'.format(serv, port, page)\n\n    r = requests.get(url, auth=(user, password))\n\n    if r.status_code == 200:\n        bin_bout = [0, 0]\n        for num, line in enumerate(r.text.split('\\n')):\n            if num == 0:\n                bin_bout.append(line.split(' ')[2])\n            if num == 2:\n                bin_bout.append(line.split(' ')[3])\n\n        from jinja2 import Environment, FileSystemLoader\n\n        env = Environment(loader=FileSystemLoader('templates'))\n        template = env.get_template('ajax/bin_bout.html')\n        template = template.render(bin_bout=bin_bout, serv=serv, service='nginx')\n        print(template)\n    else:\n        print('error: cannot connect to Nginx stat page')\n\nif form.getvalue('waf_rule_id'):\n    enable = funct.checkAjaxInput(form.getvalue('waf_en'))\n    rule_id = funct.checkAjaxInput(form.getvalue('waf_rule_id'))\n\n    haproxy_path = sql.get_setting('haproxy_dir')\n    rule_file = sql.select_waf_rule_by_id(rule_id)\n    conf_file_path = haproxy_path + '/waf/modsecurity.conf'\n    rule_file_path = 'Include ' + haproxy_path + '//waf/rules/' + rule_file\n\n    if enable == '0':\n        cmd = [\"sudo sed -i 's!\" + rule_file_path + \"!#\" + rule_file_path + \"!' \" + conf_file_path]\n        en_for_log = 'disable'\n    else:\n        cmd = [\"sudo sed -i 's!#\" + rule_file_path + \"!\" + rule_file_path + \"!' \" + conf_file_path]\n        en_for_log = 'enable'\n\n    try:\n        funct.logging('WAF', ' Has been ' + en_for_log + ' WAF rule: ' + rule_file + ' for the server ' + serv,\n                      haproxywi=1, login=1)\n    except Exception:\n        pass\n\n    print(funct.ssh_command(serv, cmd))\n    sql.update_enable_waf_rules(rule_id, serv, enable)\n\nif form.getvalue('lets_domain'):\n    serv = form.getvalue('serv')\n    lets_domain = form.getvalue('lets_domain')\n    lets_email = form.getvalue('lets_email')\n    proxy = sql.get_setting('proxy')\n    ssl_path = sql.get_setting('cert_path')\n    haproxy_dir = sql.get_setting('haproxy_dir')\n    script = \"letsencrypt.sh\"\n    ssh_port = \"22\"\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path(serv)\n\n    if ssh_enable == 0:\n        ssh_key_name = ''\n\n    servers = sql.select_servers(server=serv)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv + \" haproxy_dir=\" + haproxy_dir\n        + \" DOMAIN=\" + lets_domain + \" EMAIL=\" + lets_email + \" SSH_PORT=\" + ssh_port + \" SSL_PATH=\" + ssl_path\n        + \" HOST=\" + serv + \" USER=\" + ssh_user_name + \" PASS='\" + ssh_user_password + \"' KEY=\" + ssh_key_name\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    if error:\n        funct.logging('localhost', error, haproxywi=1)\n        print(error)\n    else:\n        for line in output:\n            if any(s in line for s in (\"msg\", \"FAILED\")):\n                try:\n                    line = line.split(':')[1]\n                    line = line.split('\"')[1]\n                    print(line + \"<br>\")\n                    break\n                except Exception:\n                    print(output)\n                    break\n        else:\n            print('success: Certificate has been created')\n\n    os.system(\"rm -f %s\" % script)\n\nif form.getvalue('uploadovpn'):\n    name = funct.checkAjaxInput(form.getvalue('ovpnname'))\n\n    ovpn_file = os.path.dirname('/tmp/') + \"/\" + name + '.ovpn'\n\n    try:\n        with open(ovpn_file, \"w\") as conf:\n            conf.write(form.getvalue('uploadovpn'))\n    except IOError as e:\n        print(str(e))\n        print('error: Can\\'t save ovpn file')\n    else:\n        print('success: ovpn file has been saved </div>')\n\n    try:\n        cmd = 'sudo openvpn3 config-import --config %s --persistent' % ovpn_file\n        funct.subprocess_execute(cmd)\n    except IOError as e:\n        funct.logging('localhost', e.args[0], haproxywi=1)\n\n    try:\n        cmd = 'sudo cp %s /etc/openvpn3/%s.conf' % (ovpn_file, name)\n        funct.subprocess_execute(cmd)\n    except IOError as e:\n        funct.logging('localhost', e.args[0], haproxywi=1)\n\n    funct.logging(\"localhost\", \" has been uploaded a new ovpn file %s\" % ovpn_file, haproxywi=1, login=1)\n\nif form.getvalue('openvpndel') is not None:\n    openvpndel = funct.checkAjaxInput(form.getvalue('openvpndel'))\n\n    cmd = 'sudo openvpn3 config-remove --config /tmp/%s.ovpn --force' % openvpndel\n    try:\n        funct.subprocess_execute(cmd)\n        print(\"Ok\")\n        funct.logging(openvpndel, ' has deleted the ovpn file ', haproxywi=1, login=1)\n    except IOError as e:\n        print(e.args[0])\n        funct.logging('localhost', e.args[0], haproxywi=1)\n\nif form.getvalue('actionvpn') is not None:\n    openvpn = funct.checkAjaxInput(form.getvalue('openvpnprofile'))\n    action = funct.checkAjaxInput(form.getvalue('actionvpn'))\n\n    if action == 'start':\n        cmd = 'sudo openvpn3 session-start --config /tmp/%s.ovpn' % openvpn\n    elif action == 'restart':\n        cmd = 'sudo openvpn3 session-manage --config /tmp/%s.ovpn --restart' % openvpn\n    elif action == 'disconnect':\n        cmd = 'sudo openvpn3 session-manage --config /tmp/%s.ovpn --disconnect' % openvpn\n    try:\n        funct.subprocess_execute(cmd)\n        print(\"success: The \" + openvpn + \" has been \" + action + \"ed\")\n        funct.logging(openvpn, ' has ' + action + ' the ovpn session ', haproxywi=1, login=1)\n    except IOError as e:\n        print(e.args[0])\n        funct.logging('localhost', e.args[0], haproxywi=1)\n\nif form.getvalue('scan_ports') is not None:\n    serv_id = funct.checkAjaxInput(form.getvalue('scan_ports'))\n    server = sql.select_servers(id=serv_id)\n    ip = ''\n\n    for s in server:\n        ip = s[2]\n\n    cmd = \"sudo nmap -sS %s |grep -E '^[[:digit:]]'|sed 's/  */ /g'\" % ip\n    cmd1 = \"sudo nmap -sS %s |head -5|tail -2\" % ip\n\n    stdout, stderr = funct.subprocess_execute(cmd)\n    stdout1, stderr1 = funct.subprocess_execute(cmd1)\n\n    if stderr != '':\n        print(stderr)\n    else:\n        from jinja2 import Environment, FileSystemLoader\n\n        env = Environment(loader=FileSystemLoader('templates'), autoescape=True)\n        template = env.get_template('ajax/scan_ports.html')\n        template = template.render(ports=stdout, info=stdout1)\n        print(template)\n\nif form.getvalue('viewFirewallRules') is not None:\n    serv = funct.checkAjaxInput(form.getvalue('viewFirewallRules'))\n\n    cmd = [\"sudo iptables -L INPUT -n --line-numbers|sed 's/  */ /g'|grep -v -E 'Chain|target'\"]\n    cmd1 = [\"sudo iptables -L IN_public_allow -n --line-numbers|sed 's/  */ /g'|grep -v -E 'Chain|target'\"]\n    cmd2 = [\"sudo iptables -L OUTPUT -n --line-numbers|sed 's/  */ /g'|grep -v -E 'Chain|target'\"]\n\n    input_chain = funct.ssh_command(serv, cmd, raw=1)\n\n    input_chain2 = []\n    for each_line in input_chain:\n        input_chain2.append(each_line.strip('\\n'))\n\n    if 'error:' in input_chain:\n        print(input_chain)\n        sys.exit()\n\n    IN_public_allow = funct.ssh_command(serv, cmd1, raw=1)\n    output_chain = funct.ssh_command(serv, cmd2, raw=1)\n\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates'))\n    template = env.get_template('ajax/firewall_rules.html')\n    template = template.render(input=input_chain2, IN_public_allow=IN_public_allow, output=output_chain)\n    print(template)\n\nif form.getvalue('geoipserv') is not None:\n    serv = form.getvalue('geoipserv')\n    haproxy_dir = sql.get_setting('haproxy_dir')\n\n    cmd = [\"ls \" + haproxy_dir + \"/geoip/\"]\n    print(funct.ssh_command(serv, cmd))\n\nif form.getvalue('geoip_install'):\n    serv = form.getvalue('geoip_install')\n    geoip_update = form.getvalue('geoip_update')\n    proxy = sql.get_setting('proxy')\n    maxmind_key = sql.get_setting('maxmind_key')\n    haproxy_dir = sql.get_setting('haproxy_dir')\n    script = 'install_geoip.sh'\n    ssh_port = '22'\n    ssh_enable, ssh_user_name, ssh_user_password, ssh_key_name = funct.return_ssh_keys_path(serv)\n\n    if ssh_enable == 0:\n        ssh_key_name = ''\n\n    servers = sql.select_servers(server=serv)\n    for server in servers:\n        ssh_port = str(server[10])\n\n    if proxy is not None and proxy != '' and proxy != 'None':\n        proxy_serv = proxy\n    else:\n        proxy_serv = ''\n\n    os.system(\"cp scripts/%s .\" % script)\n\n    commands = [\n        \"chmod +x \" + script + \" &&  ./\" + script + \" PROXY=\" + proxy_serv + \" SSH_PORT=\" + ssh_port\n        + \" UPDATE=\" + str(geoip_update) + \" maxmind_key=\" + maxmind_key + \" haproxy_dir=\" + haproxy_dir\n        + \" HOST=\" + str(serv) + \" USER=\" + str(ssh_user_name) + \" PASS=\" + str(ssh_user_password)\n        + \" KEY=\" + str(ssh_key_name)\n    ]\n\n    output, error = funct.subprocess_execute(commands[0])\n\n    funct.show_installation_output(error, output, 'GeoLite2 Database')\n\n    os.system(\"rm -f %s\" % script)\n\nif form.getvalue('nettools_icmp_server_from'):\n    server_from = form.getvalue('nettools_icmp_server_from')\n    server_to = form.getvalue('nettools_icmp_server_to')\n    server_to = funct.is_ip_or_dns(server_to)\n    action = form.getvalue('nettools_action')\n    stderr = ''\n    action_for_sending = ''\n\n    if server_to == '':\n        print('warning: enter a correct IP or DNS name')\n        sys.exit()\n\n    if action == 'nettools_ping':\n        action_for_sending = 'ping -c 4 -W 1 -s 56 -O '\n    elif action == 'nettools_trace':\n        action_for_sending = 'tracepath -m 10 '\n\n    action_for_sending = action_for_sending + server_to\n\n    if server_from == 'localhost':\n        output, stderr = funct.subprocess_execute(action_for_sending)\n    else:\n        action_for_sending = [action_for_sending]\n        output = funct.ssh_command(server_from, action_for_sending, raw=1)\n\n    if stderr != '':\n        print('error: ' + stderr)\n        sys.exit()\n    for i in output:\n        if i == ' ' or i == '':\n            continue\n        i = i.strip()\n        if 'PING' in i:\n            print('<span style=\"color: var(--link-dark-blue); display: block; margin-top: -20px;\">')\n        elif 'no reply' in i or 'no answer yet' in i or 'Too many hops' in i or '100% packet loss' in i:\n            print('<span style=\"color: var(--red-color);\">')\n        elif 'ms' in i and '100% packet loss' not in i:\n            print('<span style=\"color: var(--green-color);\">')\n        else:\n            print('<span>')\n\n        print(i + '</span><br />')\n\nif form.getvalue('nettools_telnet_server_from'):\n    server_from = form.getvalue('nettools_telnet_server_from')\n    server_to = form.getvalue('nettools_telnet_server_to')\n    server_to = funct.is_ip_or_dns(server_to)\n    port_to = form.getvalue('nettools_telnet_port_to')\n    stderr = ''\n\n    if server_to == '':\n        print('warning: enter a correct IP or DNS name')\n        sys.exit()\n\n    if server_from == 'localhost':\n        action_for_sending = 'echo \"exit\"|nc ' + server_to + ' ' + port_to + ' -t -w 1s'\n        output, stderr = funct.subprocess_execute(action_for_sending)\n    else:\n        action_for_sending = ['echo \"exit\"|nc ' + server_to + ' ' + port_to + ' -t -w 1s']\n        output = funct.ssh_command(server_from, action_for_sending, raw=1)\n\n    if stderr != '':\n        print('error: <b>' + stderr[5:] + '</b>')\n        sys.exit()\n    count_string = 0\n    for i in output:\n        if i == ' ':\n            continue\n        i = i.strip()\n        if i == 'Ncat: Connection timed out.':\n            print('error: <b>' + i[5:] + '</b>')\n            break\n        print(i + '<br>')\n        count_string += 1\n        if count_string > 1:\n            break\n\nif form.getvalue('nettools_nslookup_server_from'):\n    server_from = form.getvalue('nettools_nslookup_server_from')\n    dns_name = form.getvalue('nettools_nslookup_name')\n    dns_name = funct.is_ip_or_dns(dns_name)\n    record_type = form.getvalue('nettools_nslookup_record_type')\n    stderr = ''\n\n    if dns_name == '':\n        print('warning: enter a correct DNS name')\n        sys.exit()\n\n    action_for_sending = 'dig ' + dns_name + ' ' + record_type + ' |grep -e \"SERVER\\|' + dns_name + '\"'\n\n    if server_from == 'localhost':\n        output, stderr = funct.subprocess_execute(action_for_sending)\n    else:\n        action_for_sending = [action_for_sending]\n        output = funct.ssh_command(server_from, action_for_sending, raw=1)\n\n    if stderr != '':\n        print('error: ' + stderr[5:-1])\n        sys.exit()\n    count_string = 0\n    print('<b style=\"display: block; margin-top:10px;\">The <i style=\"color: var(--blue-color)\">' + dns_name + '</i> domain has the following records:</b>')\n    for i in output:\n        if 'dig: command not found.' in i:\n            print('error: Install bind-utils before using NSLookup')\n            break\n        if ';' in i and ';; SERVER:' not in i:\n            continue\n        if 'SOA' in i and record_type != 'SOA':\n            print('<b style=\"color: red\">There are not any records for this type')\n            break\n        if ';; SERVER:' in i:\n            i = i[10:]\n            print('<br><b>From NS server:</b><br>')\n        i = i.strip()\n        print('<i>' + i + '</i><br>')\n        count_string += 1\n\nif form.getvalue('portscanner_history_server_id'):\n    server_id = form.getvalue('portscanner_history_server_id')\n    enabled = form.getvalue('portscanner_enabled')\n    notify = form.getvalue('portscanner_notify')\n    history = form.getvalue('portscanner_history')\n\n    servers = sql.select_servers(id=server_id)\n\n    for s in servers:\n        user_group_id = s[3]\n\n    if sql.insert_port_scanner_settings(server_id, user_group_id, enabled, notify, history):\n        print('ok')\n    else:\n        if sql.update_port_scanner_settings(server_id, user_group_id, enabled, notify, history):\n            print('ok')\n\nif form.getvalue('show_versions'):\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates'))\n    template = env.get_template('ajax/check_version.html')\n    template = template.render(versions=funct.versions())\n    print(template)\n\nif form.getvalue('get_group_name_by_id'):\n    print(sql.get_group_name_by_id(form.getvalue('get_group_name_by_id')))\n\nif form.getvalue('do_new_name') or form.getvalue('aws_new_name') or form.getvalue('gcore_new_name'):\n    funct.check_user_group()\n    is_add = False\n    if form.getvalue('do_new_name'):\n        provider_name = form.getvalue('do_new_name')\n        provider_group = form.getvalue('do_new_group')\n        provider_token = form.getvalue('do_new_token')\n\n        if sql.add_provider_do(provider_name, provider_group, provider_token):\n            is_add = True\n\n    elif form.getvalue('aws_new_name'):\n        provider_name = form.getvalue('aws_new_name')\n        provider_group = form.getvalue('aws_new_group')\n        provider_token = form.getvalue('aws_new_key')\n        provider_secret = form.getvalue('aws_new_secret')\n\n        if sql.add_provider_aws(provider_name, provider_group, provider_token, provider_secret):\n            is_add = True\n\n    elif form.getvalue('gcore_new_name'):\n        provider_name = form.getvalue('gcore_new_name')\n        provider_group = form.getvalue('gcore_new_group')\n        provider_token = form.getvalue('gcore_new_user')\n        provider_pass = form.getvalue('gcore_new_pass')\n\n        if sql.add_provider_gcore(provider_name, provider_group, provider_token, provider_pass):\n            is_add = True\n\n    if is_add:\n        from jinja2 import Environment, FileSystemLoader\n        import http.cookies\n        import os\n\n        cookie = http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\"))\n        user_uuid = cookie.get('uuid')\n        role_id = sql.get_user_role_by_uuid(user_uuid.value)\n\n        if role_id == 1:\n            groups = sql.select_groups()\n        else:\n            groups = ''\n\n        env = Environment(loader=FileSystemLoader('templates'), autoescape=True)\n        template = env.get_template('ajax/provisioning/providers.html')\n        template = template.render(providers=sql.select_providers(provider_group, key=provider_token), role=role_id, groups=groups, user_group=provider_group, adding=1)\n        print(template)\n\nif form.getvalue('providerdel'):\n    funct.check_user_group()\n    if sql.delete_provider(form.getvalue('providerdel')):\n        print('Ok')\n        funct.logging('localhost', 'Provider has been deleted', provisioning=1)\n\nif form.getvalue('awsinit') or form.getvalue('doinit') or form.getvalue('gcoreinitserver'):\n    funct.check_user_group()\n    cmd = 'cd scripts/terraform/ && sudo terraform init -upgrade -no-color'\n    output, stderr = funct.subprocess_execute(cmd)\n    if stderr != '':\n        print('error: ' + stderr)\n    else:\n        if \"Terraform initialized in an empty directory\" in output[0]:\n            print('error: There is not need modules')\n        elif \"mkdir .terraform: permission denied\" in output[0]:\n            print('error: Cannot init. Check permission to folder')\n\n        print(output[0])\n\nif form.getvalue('awsvars') or form.getvalue('awseditvars'):\n    if form.getvalue('awsvars'):\n        awsvars = form.getvalue('awsvars')\n        group = form.getvalue('aws_create_group')\n        provider = form.getvalue('aws_create_provider')\n        region = form.getvalue('aws_create_regions')\n        size = form.getvalue('aws_create_size')\n        oss = form.getvalue('aws_create_oss')\n        ssh_name = form.getvalue('aws_create_ssh_name')\n        volume_size = form.getvalue('aws_create_volume_size')\n        volume_type = form.getvalue('aws_create_volume_type')\n        delete_on_termination = form.getvalue('aws_create_delete_on_termination')\n        floating_ip = form.getvalue('aws_create_floating_net')\n        firewall = form.getvalue('aws_create_firewall')\n        public_ip = form.getvalue('aws_create_public_ip')\n    elif form.getvalue('awseditvars'):\n        awsvars = form.getvalue('awseditvars')\n        group = form.getvalue('aws_editing_group')\n        provider = form.getvalue('aws_editing_provider')\n        region = form.getvalue('aws_editing_regions')\n        size = form.getvalue('aws_editing_size')\n        oss = form.getvalue('aws_editing_oss')\n        ssh_name = form.getvalue('aws_editing_ssh_name')\n        volume_size = form.getvalue('aws_editing_volume_size')\n        volume_type = form.getvalue('aws_editing_volume_type')\n        delete_on_termination = form.getvalue('aws_editing_delete_on_termination')\n        floating_ip = form.getvalue('aws_editing_floating_net')\n        firewall = form.getvalue('aws_editing_firewall')\n        public_ip = form.getvalue('aws_editing_public_ip')\n\n    aws_key, aws_secret = sql.select_aws_provider(provider)\n\n    cmd = 'cd scripts/terraform/ && sudo ansible-playbook var_generator.yml -i inventory -e \"region={} ' \\\n            'group={} size={} os={} floating_ip={} volume_size={} server_name={} AWS_ACCESS_KEY={} ' \\\n            'AWS_SECRET_KEY={} firewall={} public_ip={} ssh_name={} delete_on_termination={} volume_type={} ' \\\n            'cloud=aws\"'.format(\n                region, group, size, oss, floating_ip, volume_size, awsvars, aws_key, aws_secret,\n                firewall, public_ip, ssh_name, delete_on_termination, volume_type\n            )\n\n    output, stderr = funct.subprocess_execute(cmd)\n    if stderr != '':\n        print('error: ' + stderr)\n    else:\n        print('ok')\n\nif form.getvalue('dovars') or form.getvalue('doeditvars'):\n    if form.getvalue('dovars'):\n        dovars = form.getvalue('dovars')\n        group = form.getvalue('do_create_group')\n        provider = form.getvalue('do_create_provider')\n        region = form.getvalue('do_create_regions')\n        size = form.getvalue('do_create_size')\n        oss = form.getvalue('do_create_oss')\n        ssh_name = form.getvalue('do_create_ssh_name')\n        ssh_ids = form.getvalue('do_create_ssh_ids')\n        backup = form.getvalue('do_create_backup')\n        privet_net = form.getvalue('do_create_private_net')\n        floating_ip = form.getvalue('do_create_floating_net')\n        monitoring = form.getvalue('do_create_monitoring')\n        firewall = form.getvalue('do_create_firewall')\n    elif form.getvalue('doeditvars'):\n        dovars = form.getvalue('doeditvars')\n        group = form.getvalue('do_edit_group')\n        provider = form.getvalue('do_edit_provider')\n        region = form.getvalue('do_edit_regions')\n        size = form.getvalue('do_edit_size')\n        oss = form.getvalue('do_edit_oss')\n        ssh_name = form.getvalue('do_edit_ssh_name')\n        ssh_ids = form.getvalue('do_edit_ssh_ids')\n        backup = form.getvalue('do_edit_backup')\n        privet_net = form.getvalue('do_edit_private_net')\n        floating_ip = form.getvalue('do_edit_floating_net')\n        monitoring = form.getvalue('do_edit_monitoring')\n        firewall = form.getvalue('do_edit_firewall')\n\n    token = sql.select_do_provider(provider)\n\n    cmd = 'cd scripts/terraform/ && sudo ansible-playbook var_generator.yml -i inventory -e \"region={} ' \\\n          'group={} size={} os={} floating_ip={} ssh_ids={} server_name={} token={} backup={} monitoring={} ' \\\n          'privet_net={} firewall={} floating_ip={} ssh_name={} ' \\\n          'cloud=do\"'.format(\n                region, group, size, oss, floating_ip, ssh_ids, dovars, token, backup, monitoring,\n                privet_net, firewall, floating_ip, ssh_name\n            )\n    output, stderr = funct.subprocess_execute(cmd)\n    if stderr != '':\n        print('error: ' + stderr)\n    else:\n        print(cmd)\n        print(output)\n\nif form.getvalue('dovalidate') or form.getvalue('doeditvalidate'):\n    if form.getvalue('dovalidate'):\n        workspace = form.getvalue('dovalidate')\n        group = form.getvalue('do_create_group')\n    elif form.getvalue('doeditvalidate'):\n        workspace = form.getvalue('doeditvalidate')\n        group = form.getvalue('do_edit_group')\n\n    cmd = 'cd scripts/terraform/ && sudo terraform plan -no-color -input=false -target=module.do_module -var-file vars/' + workspace + '_' + group + '_do.tfvars'\n    output, stderr = funct.subprocess_execute(cmd)\n    if stderr != '':\n        print('error: ' + stderr)\n    else:\n        print('ok')\n\nif form.getvalue('doworkspace'):\n    workspace = form.getvalue('doworkspace')\n    group = form.getvalue('do_create_group')\n    provider = form.getvalue('do_create_provider')\n    region = form.getvalue('do_create_regions')\n    size = form.getvalue('do_create_size')\n    oss = form.getvalue('do_create_oss')\n    ssh_name = form.getvalue('do_create_ssh_name')\n    ssh_ids = form.getvalue('do_create_ssh_ids')\n    backup = form.getvalue('do_create_backup')\n    privet_net = form.getvalue('do_create_private_net')\n    floating_ip = form.getvalue('do_create_floating_net')\n    monitoring = form.getvalue('do_create_monitoring')\n    firewall = form.getvalue('do_create_firewall')\n\n    cmd = 'cd scripts/terraform/ && sudo terraform workspace new ' + workspace + '_' + group + '_do'\n    output, stderr = funct.subprocess_execute(cmd)\n\n    if stderr != '':\n        stderr = stderr.strip()\n        stderr = repr(stderr)\n        stderr = stderr.replace(\"'\", \"\")\n        stderr = stderr.replace(\"\\'\", \"\")\n        sql.update_provisioning_server_status('Error', group, workspace, provider)\n        sql.update_provisioning_server_error(stderr, group, workspace, provider)\n        print('error: ' + stderr)\n    else:\n        if sql.add_server_do(\n                region, size, privet_net, floating_ip, ssh_ids, ssh_name, workspace, oss, firewall, monitoring,\n                backup, provider, group, 'Creating'\n        ):\n\n            from jinja2 import Environment, FileSystemLoader\n\n            user, user_id, role, token, servers, user_services = funct.get_users_params()\n            new_server = sql.select_provisioned_servers(new=workspace, group=group, type='do')\n\n            env = Environment(extensions=[\"jinja2.ext.do\"], loader=FileSystemLoader('templates'))\n            template = env.get_template('ajax/provisioning/provisioned_servers.html')\n            template = template.render(\n                servers=new_server, groups=sql.select_groups(), user_group=group,\n                providers=sql.select_providers(group), role=role, adding=1\n            )\n            print(template)\n\nif form.getvalue('doeditworkspace'):\n    workspace = form.getvalue('doeditworkspace')\n    group = form.getvalue('do_edit_group')\n    provider = form.getvalue('do_edit_provider')\n    region = form.getvalue('do_edit_regions')\n    size = form.getvalue('do_edit_size')\n    oss = form.getvalue('do_edit_oss')\n    ssh_name = form.getvalue('do_edit_ssh_name')\n    ssh_ids = form.getvalue('do_edit_ssh_ids')\n    backup = form.getvalue('do_edit_backup')\n    privet_net = form.getvalue('do_edit_private_net')\n    floating_ip = form.getvalue('do_edit_floating_net')\n    monitoring = form.getvalue('do_edit_monitoring')\n    firewall = form.getvalue('do_edit_firewall')\n    server_id = form.getvalue('server_id')\n    if sql.update_server_do(\n        size, privet_net, floating_ip, ssh_ids, ssh_name, oss, firewall, monitoring, backup, provider,\n        group, 'Creating', server_id\n    ):\n\n        cmd = 'cd scripts/terraform/ && sudo terraform workspace select ' + workspace + '_' + group + '_do'\n        output, stderr = funct.subprocess_execute(cmd)\n\n        if stderr != '':\n            stderr = stderr.strip()\n            stderr = repr(stderr)\n            stderr = stderr.replace(\"'\", \"\")\n            stderr = stderr.replace(\"\\'\", \"\")\n            sql.update_provisioning_server_status('Error', group, workspace, provider)\n            sql.update_provisioning_server_error(stderr, group, workspace, provider)\n            print('error: ' + stderr)\n        else:\n            print(cmd)\n            print(output)\n\nif form.getvalue('awsvalidate') or form.getvalue('awseditvalidate'):\n    if form.getvalue('awsvalidate'):\n        workspace = form.getvalue('awsvalidate')\n        group = form.getvalue('aws_create_group')\n    elif form.getvalue('awseditvalidate'):\n        workspace = form.getvalue('awseditvalidate')\n        group = form.getvalue('aws_edit_group')\n\n    cmd = 'cd scripts/terraform/ && sudo terraform plan -no-color -input=false -target=module.aws_module -var-file vars/' + workspace + '_' + group + '_aws.tfvars'\n    output, stderr = funct.subprocess_execute(cmd)\n    if stderr != '':\n        print('error: ' + stderr)\n    else:\n        print('ok')\n\nif form.getvalue('awsworkspace'):\n    workspace = form.getvalue('awsworkspace')\n    group = form.getvalue('aws_create_group')\n    provider = form.getvalue('aws_create_provider')\n    region = form.getvalue('aws_create_regions')\n    size = form.getvalue('aws_create_size')\n    oss = form.getvalue('aws_create_oss')\n    ssh_name = form.getvalue('aws_create_ssh_name')\n    volume_size = form.getvalue('aws_create_volume_size')\n    volume_type = form.getvalue('aws_create_volume_type')\n    delete_on_termination = form.getvalue('aws_create_delete_on_termination')\n    floating_ip = form.getvalue('aws_create_floating_net')\n    firewall = form.getvalue('aws_create_firewall')\n    public_ip = form.getvalue('aws_create_public_ip')\n\n    cmd = 'cd scripts/terraform/ && sudo terraform workspace new ' + workspace + '_' + group + '_aws'\n    output, stderr = funct.subprocess_execute(cmd)\n\n    if stderr != '':\n        stderr = stderr.strip()\n        stderr = repr(stderr)\n        stderr = stderr.replace(\"'\", \"\")\n        stderr = stderr.replace(\"\\'\", \"\")\n        sql.update_provisioning_server_status('Error', group, workspace, provider)\n        sql.update_provisioning_server_error(stderr, group, workspace, provider)\n        print('error: ' + stderr)\n    else:\n        if sql.add_server_aws(\n            region, size, public_ip, floating_ip, volume_size, ssh_name, workspace, oss, firewall,\n            provider, group, 'Creating', delete_on_termination, volume_type\n        ):\n\n            from jinja2 import Environment, FileSystemLoader\n\n            user, user_id, role, token, servers, user_services = funct.get_users_params()\n            new_server = sql.select_provisioned_servers(new=workspace, group=group, type='aws')\n\n            env = Environment(extensions=[\"jinja2.ext.do\"], loader=FileSystemLoader('templates'))\n            template = env.get_template('ajax/provisioning/provisioned_servers.html')\n            template = template.render(\n                servers=new_server, groups=sql.select_groups(), user_group=group,\n                providers=sql.select_providers(group), role=role, adding=1\n            )\n            print(template)\n\nif form.getvalue('awseditworkspace'):\n    workspace = form.getvalue('awseditworkspace')\n    group = form.getvalue('aws_editing_group')\n    provider = form.getvalue('aws_editing_provider')\n    region = form.getvalue('aws_editing_regions')\n    size = form.getvalue('aws_editing_size')\n    oss = form.getvalue('aws_editing_oss')\n    ssh_name = form.getvalue('aws_editing_ssh_name')\n    volume_size = form.getvalue('aws_editing_volume_size')\n    volume_type = form.getvalue('aws_editing_volume_type')\n    delete_on_termination = form.getvalue('aws_editing_delete_on_termination')\n    floating_ip = form.getvalue('aws_editing_floating_net')\n    firewall = form.getvalue('aws_editing_firewall')\n    public_ip = form.getvalue('aws_editing_public_ip')\n    server_id = form.getvalue('server_id')\n\n    if sql.update_server_aws(\n            region, size, public_ip, floating_ip, volume_size, ssh_name, workspace, oss, firewall,\n            provider, group, 'Editing', server_id, delete_on_termination, volume_type\n    ):\n\n        try:\n            cmd = 'cd scripts/terraform/ && sudo terraform workspace select ' + workspace + '_' + group + '_aws'\n            output, stderr = funct.subprocess_execute(cmd)\n        except Exception as e:\n            print('error: ' + str(e))\n\n        if stderr != '':\n            stderr = stderr.strip()\n            stderr = repr(stderr)\n            stderr = stderr.replace(\"'\", \"\")\n            stderr = stderr.replace(\"\\'\", \"\")\n            sql.update_provisioning_server_error(stderr, group, workspace, provider)\n            print('error: ' + stderr)\n        else:\n            print('ok')\n\nif (\n    form.getvalue('awsprovisining')\n    or form.getvalue('awseditingprovisining')\n    or form.getvalue('doprovisining')\n    or form.getvalue('doeditprovisining')\n    or form.getvalue('gcoreprovisining')\n    or form.getvalue('gcoreeditgprovisining')\n):\n    funct.check_user_group()\n\n    if form.getvalue('awsprovisining'):\n        workspace = form.getvalue('awsprovisining')\n        group = form.getvalue('aws_create_group')\n        provider_id = form.getvalue('aws_create_provider')\n        action = 'created'\n        cloud = 'aws'\n        state_name = 'aws_instance'\n    elif form.getvalue('awseditingprovisining'):\n        workspace = form.getvalue('awseditingprovisining')\n        group = form.getvalue('aws_edit_group')\n        provider_id = form.getvalue('aws_edit_provider')\n        action = 'modified'\n        cloud = 'aws'\n        state_name = 'aws_instance'\n    elif form.getvalue('doprovisining'):\n        workspace = form.getvalue('doprovisining')\n        group = form.getvalue('do_create_group')\n        provider_id = form.getvalue('do_create_provider')\n        action = 'created'\n        cloud = 'do'\n        state_name = 'digitalocean_droplet'\n    elif form.getvalue('doeditprovisining'):\n        workspace = form.getvalue('doeditprovisining')\n        group = form.getvalue('do_edit_group')\n        provider_id = form.getvalue('do_edit_provider')\n        action = 'modified'\n        cloud = 'do'\n        state_name = 'digitalocean_droplet'\n    elif form.getvalue('gcoreprovisining'):\n        workspace = form.getvalue('gcoreprovisining')\n        group = form.getvalue('gcore_create_group')\n        provider_id = form.getvalue('gcore_create_provider')\n        action = 'created'\n        cloud = 'gcore'\n        state_name = 'gcore_instance'\n    elif form.getvalue('gcoreeditgprovisining'):\n        workspace = form.getvalue('gcoreeditgprovisining')\n        group = form.getvalue('gcore_edit_group')\n        provider_id = form.getvalue('gcore_edit_provider')\n        action = 'modified'\n        cloud = 'gcore'\n        state_name = 'gcore_instance'\n\n    tfvars = workspace + '_' + group + '_' + cloud + '.tfvars'\n    cmd = 'cd scripts/terraform/ && sudo terraform apply -auto-approve -no-color -input=false -target=module.' + cloud + '_module -var-file vars/' + tfvars\n    output, stderr = funct.subprocess_execute(cmd)\n\n    if stderr != '':\n        stderr = stderr.strip()\n        stderr = repr(stderr)\n        stderr = stderr.replace(\"'\", \"\")\n        stderr = stderr.replace(\"\\'\", \"\")\n        sql.update_provisioning_server_status('Error', group, workspace, provider_id)\n        sql.update_provisioning_server_error(stderr, group, workspace, provider_id)\n        print('error: ' + stderr)\n    else:\n        if cloud == 'aws':\n            cmd = 'cd scripts/terraform/ && sudo terraform state show module.aws_module.aws_eip.floating_ip[0]|grep -Eo \"[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\"'\n            output, stderr = funct.subprocess_execute(cmd)\n            if stderr != '':\n                cmd = 'cd scripts/terraform/ && sudo terraform state show module.' + cloud + '_module.' + state_name + '.hapwi|grep -Eo \"[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\"'\n        else:\n            cmd = 'cd scripts/terraform/ && sudo terraform state show module.' + cloud + '_module.' + state_name + '.hapwi|grep -Eo \"[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\"'\n\n        output, stderr = funct.subprocess_execute(cmd)\n        ips = ''\n        for ip in output:\n            ips += ip\n            ips += ' '\n        print(ips)\n        sql.update_provisioning_server_status('Created', group, workspace, provider_id, update_ip=ips)\n\n        if cloud == 'gcore':\n            cmd = 'cd scripts/terraform/ && sudo terraform state show module.gcore_module.gcore_instance.hapwi|grep \"name\"|grep -v -e \"_name\\|name_\" |head -1 |awk -F\"\\\\\\\"\" \\'{print $2}\\''\n            output, stderr = funct.subprocess_execute(cmd)\n            print(':' + output[0])\n            sql.update_provisioning_server_gcore_name(workspace, output[0], group, provider_id)\n\n        funct.logging('localhost', 'Server ' + workspace + ' has been ' + action, provisioning=1)\n\nif form.getvalue('provisiningdestroyserver'):\n    funct.check_user_group()\n    server_id = form.getvalue('provisiningdestroyserver')\n    workspace = form.getvalue('servername')\n    group = form.getvalue('group')\n    cloud_type = form.getvalue('type')\n    provider_id = form.getvalue('provider_id')\n\n    tf_workspace = workspace + '_' + group + '_' + cloud_type\n\n    cmd = 'cd scripts/terraform/ && sudo terraform init -upgrade -no-color && sudo terraform workspace select ' + tf_workspace\n    output, stderr = funct.subprocess_execute(cmd)\n\n    if stderr != '':\n        stderr = stderr.strip()\n        stderr = repr(stderr)\n        stderr = stderr.replace(\"'\", \"\")\n        stderr = stderr.replace(\"\\'\", \"\")\n        sql.update_provisioning_server_status('Error', group, workspace, provider_id)\n        sql.update_provisioning_server_error(stderr, group, workspace, provider_id)\n        print('error: ' + stderr)\n    else:\n        cmd = 'cd scripts/terraform/ && sudo terraform destroy -auto-approve -no-color -target=module.' + cloud_type + '_module -var-file vars/' + tf_workspace + '.tfvars'\n        output, stderr = funct.subprocess_execute(cmd)\n\n        if stderr != '':\n            print('error: ' + stderr)\n        else:\n            cmd = 'cd scripts/terraform/ && sudo terraform workspace select default && sudo terraform workspace delete -force ' + tf_workspace\n            output, stderr = funct.subprocess_execute(cmd)\n\n            print('ok')\n            funct.logging('localhost', 'Server has been destroyed', provisioning=1)\n            sql.delete_provisioned_servers(server_id)\n\nif form.getvalue('gcorevars') or form.getvalue('gcoreeditvars'):\n    if form.getvalue('gcorevars'):\n        gcorevars = form.getvalue('gcorevars')\n        group = form.getvalue('gcore_create_group')\n        provider = form.getvalue('gcore_create_provider')\n        region = form.getvalue('gcore_create_regions')\n        project = form.getvalue('gcore_create_project')\n        size = form.getvalue('gcore_create_size')\n        oss = form.getvalue('gcore_create_oss')\n        ssh_name = form.getvalue('gcore_create_ssh_name')\n        volume_size = form.getvalue('gcore_create_volume_size')\n        volume_type = form.getvalue('gcore_create_volume_type')\n        delete_on_termination = form.getvalue('gcore_create_delete_on_termination')\n        network_name = form.getvalue('gcore_create_network_name')\n        firewall = form.getvalue('gcore_create_firewall')\n        network_type = form.getvalue('gcore_create_network_type')\n    elif form.getvalue('gcoreeditvars'):\n        gcorevars = form.getvalue('gcoreeditvars')\n        group = form.getvalue('gcore_edit_group')\n        provider = form.getvalue('gcore_edit_provider')\n        region = form.getvalue('gcore_edit_regions')\n        project = form.getvalue('gcore_edit_project')\n        size = form.getvalue('gcore_edit_size')\n        oss = form.getvalue('gcore_edit_oss')\n        ssh_name = form.getvalue('gcore_edit_ssh_name')\n        volume_size = form.getvalue('gcore_edit_volume_size')\n        volume_type = form.getvalue('gcore_edit_volume_type')\n        delete_on_termination = form.getvalue('gcore_edit_delete_on_termination')\n        network_name = form.getvalue('gcore_edit_network_name')\n        firewall = form.getvalue('gcore_edit_firewall')\n        network_type = form.getvalue('gcore_edit_network_type')\n\n    gcore_user, gcore_pass = sql.select_gcore_provider(provider)\n\n    cmd = 'cd scripts/terraform/ && sudo ansible-playbook var_generator.yml -i inventory -e \"region={} ' \\\n          'group={} size={} os={} network_name={} volume_size={} server_name={} username={} ' \\\n          'pass={} firewall={} network_type={} ssh_name={} delete_on_termination={} project={} volume_type={} ' \\\n          'cloud=gcore\"'.format(region, group, size, oss, network_name, volume_size, gcorevars, gcore_user, gcore_pass,\n                                firewall, network_type, ssh_name, delete_on_termination, project, volume_type)\n\n    output, stderr = funct.subprocess_execute(cmd)\n    if stderr != '':\n        print('error: ' + stderr)\n    else:\n        print('ok')\n\nif form.getvalue('gcorevalidate') or form.getvalue('gcoreeditvalidate'):\n    if form.getvalue('gcorevalidate'):\n        workspace = form.getvalue('gcorevalidate')\n        group = form.getvalue('gcore_create_group')\n    elif form.getvalue('gcoreeditvalidate'):\n        workspace = form.getvalue('gcoreeditvalidate')\n        group = form.getvalue('gcore_edit_group')\n\n    cmd = 'cd scripts/terraform/ && sudo terraform plan -no-color -input=false -target=module.gcore_module -var-file vars/' + workspace + '_' + group + '_gcore.tfvars'\n    output, stderr = funct.subprocess_execute(cmd)\n    if stderr != '':\n        print('error: ' + stderr)\n    else:\n        print('ok')\n\nif form.getvalue('gcoreworkspace'):\n    workspace = form.getvalue('gcoreworkspace')\n    group = form.getvalue('gcore_create_group')\n    provider = form.getvalue('gcore_create_provider')\n    region = form.getvalue('gcore_create_regions')\n    project = form.getvalue('gcore_create_project')\n    size = form.getvalue('gcore_create_size')\n    oss = form.getvalue('gcore_create_oss')\n    ssh_name = form.getvalue('gcore_create_ssh_name')\n    volume_size = form.getvalue('gcore_create_volume_size')\n    volume_type = form.getvalue('gcore_create_volume_type')\n    delete_on_termination = form.getvalue('gcore_create_delete_on_termination')\n    network_type = form.getvalue('gcore_create_network_type')\n    firewall = form.getvalue('gcore_create_firewall')\n    network_name = form.getvalue('gcore_create_network_name')\n\n    cmd = 'cd scripts/terraform/ && sudo terraform workspace new ' + workspace + '_' + group + '_gcore'\n    output, stderr = funct.subprocess_execute(cmd)\n\n    if stderr != '':\n        stderr = stderr.strip()\n        stderr = repr(stderr)\n        stderr = stderr.replace(\"'\", \"\")\n        stderr = stderr.replace(\"\\'\", \"\")\n        sql.update_provisioning_server_status('Error', group, workspace, provider)\n        sql.update_provisioning_server_error(stderr, group, workspace, provider)\n        print('error: ' + stderr)\n    else:\n        if sql.add_server_gcore(\n                project, region, size, network_type, network_name, volume_size, ssh_name, workspace, oss, firewall,\n                provider, group, 'Creating', delete_on_termination, volume_type\n        ):\n\n            from jinja2 import Environment, FileSystemLoader\n\n            user, user_id, role, token, servers, user_services = funct.get_users_params()\n            new_server = sql.select_provisioned_servers(new=workspace, group=group, type='gcore')\n\n            env = Environment(extensions=[\"jinja2.ext.do\"], loader=FileSystemLoader('templates'))\n            template = env.get_template('ajax/provisioning/provisioned_servers.html')\n            template = template.render(servers=new_server,\n                                       groups=sql.select_groups(),\n                                       user_group=group,\n                                       providers=sql.select_providers(group),\n                                       role=role,\n                                       adding=1)\n            print(template)\n\nif form.getvalue('gcoreeditworkspace'):\n    workspace = form.getvalue('gcoreeditworkspace')\n    group = form.getvalue('gcore_edit_group')\n    provider = form.getvalue('gcore_edit_provider')\n    region = form.getvalue('gcore_edit_regions')\n    project = form.getvalue('gcore_edit_project')\n    size = form.getvalue('gcore_edit_size')\n    oss = form.getvalue('gcore_edit_oss')\n    ssh_name = form.getvalue('gcore_edit_ssh_name')\n    volume_size = form.getvalue('gcore_edit_volume_size')\n    volume_type = form.getvalue('gcore_edit_volume_type')\n    delete_on_termination = form.getvalue('gcore_edit_delete_on_termination')\n    network_type = form.getvalue('gcore_edit_network_type')\n    firewall = form.getvalue('gcore_edit_firewall')\n    network_name = form.getvalue('gcore_edit_network_name')\n    server_id = form.getvalue('server_id')\n\n    if sql.update_server_gcore(\n            region, size, network_type, network_name, volume_size, ssh_name, workspace, oss, firewall,\n            provider, group, 'Editing', server_id, delete_on_termination, volume_type, project\n    ):\n\n        try:\n            cmd = 'cd scripts/terraform/ && sudo terraform workspace select ' + workspace + '_' + group + '_gcore'\n            output, stderr = funct.subprocess_execute(cmd)\n        except Exception as e:\n            print('error: ' + str(e))\n\n        if stderr != '':\n            stderr = stderr.strip()\n            stderr = repr(stderr)\n            stderr = stderr.replace(\"'\", \"\")\n            stderr = stderr.replace(\"\\'\", \"\")\n            sql.update_provisioning_server_error(stderr, group, workspace, provider)\n            print('error: ' + stderr)\n        else:\n            print('ok')\n\nif form.getvalue('editAwsServer'):\n    funct.check_user_group()\n    server_id = form.getvalue('editAwsServer')\n    user_group = form.getvalue('editAwsGroup')\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(extensions=[\"jinja2.ext.do\"], loader=FileSystemLoader('templates'))\n    template = env.get_template('ajax/provisioning/aws_edit_dialog.html')\n    template = template.render(server=sql.select_aws_server(server_id=server_id), providers=sql.select_providers(int(user_group)))\n    print(template)\n\nif form.getvalue('editGcoreServer'):\n    funct.check_user_group()\n    server_id = form.getvalue('editGcoreServer')\n    user_group = form.getvalue('editGcoreGroup')\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(extensions=[\"jinja2.ext.do\"], loader=FileSystemLoader('templates'))\n    template = env.get_template('ajax/provisioning/gcore_edit_dialog.html')\n    template = template.render(server=sql.select_gcore_server(server_id=server_id), providers=sql.select_providers(int(user_group)))\n    print(template)\n\nif form.getvalue('editDoServer'):\n    funct.check_user_group()\n    server_id = form.getvalue('editDoServer')\n    user_group = form.getvalue('editDoGroup')\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(extensions=[\"jinja2.ext.do\"], loader=FileSystemLoader('templates'))\n    template = env.get_template('ajax/provisioning/do_edit_dialog.html')\n    template = template.render(server=sql.select_do_server(server_id=server_id), providers=sql.select_providers(int(user_group)))\n    print(template)\n\nif form.getvalue('edit_do_provider'):\n    funct.check_user_group()\n    provider_id = form.getvalue('edit_do_provider')\n    new_name = form.getvalue('edit_do_provider_name')\n    new_token = form.getvalue('edit_do_provider_token')\n\n    if sql.update_do_provider(new_name, new_token, provider_id):\n        print('ok')\n        funct.logging('localhost', 'Provider has been renamed. New name is ' + new_name, provisioning=1)\n\nif form.getvalue('edit_gcore_provider'):\n    funct.check_user_group()\n    provider_id = form.getvalue('edit_gcore_provider')\n    new_name = form.getvalue('edit_gcore_provider_name')\n    new_user = form.getvalue('edit_gcore_provider_user')\n    new_pass = form.getvalue('edit_gcore_provider_pass')\n\n    if sql.update_gcore_provider(new_name, new_user, new_pass, provider_id):\n        print('ok')\n        funct.logging('localhost', 'Provider has been renamed. New name is ' + new_name, provisioning=1)\n\nif form.getvalue('edit_aws_provider'):\n    funct.check_user_group()\n    provider_id = form.getvalue('edit_aws_provider')\n    new_name = form.getvalue('edit_aws_provider_name')\n    new_key = form.getvalue('edit_aws_provider_key')\n    new_secret = form.getvalue('edit_aws_provider_secret')\n\n    if sql.update_aws_provider(new_name, new_key, new_secret, provider_id):\n        print('ok')\n        funct.logging('localhost', 'Provider has been renamed. New name is ' + new_name, provisioning=1)\n\nif form.getvalue('loadservices'):\n    from jinja2 import Environment, FileSystemLoader\n    env = Environment(loader=FileSystemLoader('templates'))\n    template = env.get_template('ajax/load_services.html')\n    services = funct.get_services_status()\n\n    template = template.render(services=services)\n    print(template)\n\nif form.getvalue('loadchecker'):\n    from jinja2 import Environment, FileSystemLoader\n    env = Environment(loader=FileSystemLoader('templates'), autoescape=True)\n    template = env.get_template('ajax/load_telegram.html')\n    services = funct.get_services_status()\n    groups = sql.select_groups()\n    page = form.getvalue('page')\n\n    try:\n        user_status, user_plan = funct.return_user_status()\n    except Exception as e:\n        user_status, user_plan = 0, 0\n        funct.logging('localhost', 'Cannot get a user plan: ' + str(e), haproxywi=1)\n    if user_status:\n        haproxy_settings = sql.select_checker_settings(1)\n        nginx_settings = sql.select_checker_settings(2)\n        keepalived_settings = sql.select_checker_settings(3)\n        apache_settings = sql.select_checker_settings(4)\n        if page == 'servers.py':\n            user_group = funct.get_user_group(id=1)\n            telegrams = sql.get_user_telegram_by_group(user_group)\n            slacks = sql.get_user_slack_by_group(user_group)\n            haproxy_servers = sql.get_dick_permit(haproxy=1, only_group=1)\n            nginx_servers = sql.get_dick_permit(nginx=1, only_group=1)\n            apache_servers = sql.get_dick_permit(apache=1, only_group=1)\n            keepalived_servers = sql.get_dick_permit(keepalived=1, only_group=1)\n        else:\n            telegrams = sql.select_telegram()\n            slacks = sql.select_slack()\n            haproxy_servers = sql.get_dick_permit(haproxy=1)\n            nginx_servers = sql.get_dick_permit(nginx=1)\n            apache_servers = sql.get_dick_permit(apache=1)\n            keepalived_servers = sql.get_dick_permit(keepalived=1)\n    else:\n        telegrams = ''\n        slacks = ''\n\n    template = template.render(services=services,\n                               telegrams=telegrams,\n                               groups=groups,\n                               slacks=slacks,\n                               user_status=user_status,\n                               user_plan=user_plan,\n                               haproxy_servers=haproxy_servers,\n                               nginx_servers=nginx_servers,\n                               apache_servers=apache_servers,\n                               keepalived_servers=keepalived_servers,\n                               haproxy_settings=haproxy_settings,\n                               nginx_settings=nginx_settings,\n                               keepalived_settings=keepalived_settings,\n                               apache_settings=apache_settings,\n                               page=page)\n    print(template)\n\nif form.getvalue('load_update_hapwi'):\n    from jinja2 import Environment, FileSystemLoader\n    env = Environment(loader=FileSystemLoader('templates'))\n    template = env.get_template('ajax/load_updatehapwi.html')\n\n    versions = funct.versions()\n    checker_ver = funct.check_new_version(service='checker')\n    smon_ver = funct.check_new_version(service='smon')\n    metrics_ver = funct.check_new_version(service='metrics')\n    keep_ver = funct.check_new_version(service='keep')\n    portscanner_ver = funct.check_new_version(service='portscanner')\n    socket_ver = funct.check_new_version(service='socket')\n    services = funct.get_services_status()\n\n    template = template.render(services=services,\n                               versions=versions,\n                               checker_ver=checker_ver,\n                               smon_ver=smon_ver,\n                               metrics_ver=metrics_ver,\n                               portscanner_ver=portscanner_ver,\n                               socket_ver=socket_ver,\n                               keep_ver=keep_ver)\n    print(template)\n\nif form.getvalue('loadopenvpn'):\n    import distro\n    from jinja2 import Environment, FileSystemLoader\n    env = Environment(loader=FileSystemLoader('templates'))\n    template = env.get_template('ajax/load_openvpn.html')\n    openvpn_configs = ''\n    openvpn_sess = ''\n    openvpn = ''\n\n    if distro.id() == 'ubuntu':\n        stdout, stderr = funct.subprocess_execute(\"apt show openvpn3 2>&1|grep E:\")\n    elif distro.id() == 'centos' or distro.id() == 'rhel':\n        stdout, stderr = funct.subprocess_execute(\"rpm --query openvpn3-client\")\n\n    if (\n        (stdout[0] != 'package openvpn3-client is not installed' and stderr != '/bin/sh: rpm: command not found')\n        and stdout[0] != 'E: No packages found'\n    ):\n        cmd = \"sudo openvpn3 configs-list |grep -E 'ovpn|(^|[^0-9])[0-9]{4}($|[^0-9])' |grep -v net|awk -F\\\"    \\\" '{print $1}'|awk 'ORS=NR%2?\\\" \\\":\\\"\\\\n\\\"'\"\n        openvpn_configs, stderr = funct.subprocess_execute(cmd)\n        cmd = \"sudo openvpn3 sessions-list|grep -E 'Config|Status'|awk -F\\\":\\\" '{print $2}'|awk 'ORS=NR%2?\\\" \\\":\\\"\\\\n\\\"'| sed 's/^ //g'\"\n        openvpn_sess, stderr = funct.subprocess_execute(cmd)\n        openvpn = stdout[0]\n\n    template = template.render(openvpn=openvpn,\n                               openvpn_sess=openvpn_sess,\n                               openvpn_configs=openvpn_configs)\n    print(template)\n\nif form.getvalue('check_telegram'):\n    telegram_id = form.getvalue('check_telegram')\n    mess = 'Test message from Roxy-WI'\n    funct.telegram_send_mess(mess, telegram_channel_id=telegram_id)\n\nif form.getvalue('check_slack'):\n    slack_id = form.getvalue('check_slack')\n    mess = 'Test message from Roxy-WI'\n    funct.slack_send_mess(mess, slack_channel_id=slack_id)\n\nif form.getvalue('check_rabbitmq_alert'):\n    import json\n    import http.cookies\n\n    try:\n        cookie = http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\"))\n        user_group_id = cookie.get('group')\n        user_group_id1 = user_group_id.value\n    except Exception as e:\n        error = str(e)\n        print(f'error: Cannot send a message {error}')\n\n    try:\n        json_for_sending = {\"user_group\": user_group_id1, \"message\": 'info: Test message'}\n        funct.send_message_to_rabbit(json.dumps(json_for_sending))\n    except Exception as e:\n        error = str(e)\n        print(f'error: Cannot send a message {error}')\n\nif form.getvalue('check_email_alert'):\n    import http.cookies\n    subject = 'test message'\n    message = 'Test message from Roxy-WI'\n\n    try:\n        cookie = http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\"))\n        user_uuid = cookie.get('uuid')\n        user_uuid_value = user_uuid.value\n    except Exception as e:\n        error = str(e)\n        print(f'error: Cannot send a message {error}')\n\n    try:\n        user_email = sql.select_user_email_by_uuid(user_uuid_value)\n    except Exception as e:\n        error = str(e)\n        print(f'error: Cannot get a user email: {error}')\n\n    try:\n        funct.send_email(user_email, subject, message)\n    except Exception as e:\n        error = str(e)\n        print(f'error: Cannot send a message {error}')\n\nif form.getvalue('getoption'):\n    group = form.getvalue('getoption')\n    term = form.getvalue('term')\n    options = sql.select_options(group=group, term=term)\n\n    a = {}\n    v = 0\n\n    for i in options:\n        a[v] = i.options\n        v = v + 1\n    import json\n    print(json.dumps(a))\n\n\nif form.getvalue('newtoption'):\n    option = form.getvalue('newtoption')\n    group = form.getvalue('newoptiongroup')\n    if option is None or group is None:\n        print(error_mess)\n    else:\n        if sql.insert_new_option(option, group):\n            from jinja2 import Environment, FileSystemLoader\n\n            env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n            template = env.get_template('/new_option.html')\n\n            template = template.render(options=sql.select_options(option=option))\n            print(template)\n\n\nif form.getvalue('updateoption') is not None:\n    option = form.getvalue('updateoption')\n    option_id = form.getvalue('id')\n    if option is None or option_id is None:\n        print(error_mess)\n    else:\n        sql.update_options(option, option_id)\n\n\nif form.getvalue('optiondel') is not None:\n    if sql.delete_option(form.getvalue('optiondel')):\n        print(\"Ok\")\n\n\nif form.getvalue('getsavedserver'):\n    group = form.getvalue('getsavedserver')\n    term = form.getvalue('term')\n    servers = sql.select_saved_servers(group=group, term=term)\n\n    a = {}\n    v = 0\n    for i in servers:\n        a[v] = {}\n        a[v]['value'] = {}\n        a[v]['desc'] = {}\n        a[v]['value'] = i.server\n        a[v]['desc'] = i.description\n        v = v + 1\n    import json\n    print(json.dumps(a))\n\n\nif form.getvalue('newsavedserver'):\n    savedserver = form.getvalue('newsavedserver')\n    description = form.getvalue('newsavedserverdesc')\n    group = form.getvalue('newsavedservergroup')\n    if savedserver is None or group is None:\n        print(error_mess)\n    else:\n        if sql.insert_new_savedserver(savedserver, description, group):\n            from jinja2 import Environment, FileSystemLoader\n\n            env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n            template = env.get_template('/new_saved_servers.html')\n\n            template = template.render(server=sql.select_saved_servers(server=savedserver))\n            print(template)\n\n\nif form.getvalue('updatesavedserver') is not None:\n    savedserver = form.getvalue('updatesavedserver')\n    description = form.getvalue('description')\n    savedserver_id = form.getvalue('id')\n    if savedserver is None or savedserver_id is None:\n        print(error_mess)\n    else:\n        sql.update_savedserver(savedserver, description, savedserver_id)\n\n\nif form.getvalue('savedserverdel') is not None:\n    if sql.delete_savedserver(form.getvalue('savedserverdel')):\n        print(\"Ok\")\n\nif form.getvalue('show_users_ovw') is not None:\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/ajax'), autoescape=True)\n    template = env.get_template('/show_users_ovw.html')\n\n    user, user_id, role, token, servers, user_services = funct.get_users_params()\n    users_groups = sql.select_user_groups_with_names(1, all=1)\n    user_group = funct.get_user_group(id=1)\n\n    if (role == 2 or role == 3) and int(user_group) != 1:\n        users = sql.select_users(group=user_group)\n    else:\n        users = sql.select_users()\n\n    template = template.render(users=users, users_groups=users_groups)\n    print(template)\n\n\nif form.getvalue('serverSettings') is not None:\n    server_id = form.getvalue('serverSettings')\n    service = form.getvalue('serverSettingsService')\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True)\n    template = env.get_template('ajax/show_service_settings.html')\n\n    template = template.render(settings=sql.select_service_settings(server_id, service), service=service)\n    print(template)\n\n\nif form.getvalue('serverSettingsSave') is not None:\n    server_id = form.getvalue('serverSettingsSave')\n    service = form.getvalue('serverSettingsService')\n    haproxy_enterprise = form.getvalue('serverSettingsEnterprise')\n    haproxy_dockerized = form.getvalue('serverSettingshaproxy_dockerized')\n    nginx_dockerized = form.getvalue('serverSettingsnginx_dockerized')\n    apache_dockerized = form.getvalue('serverSettingsapache_dockerized')\n    server_ip = sql.select_server_ip_by_id(server_id)\n\n    if service == 'haproxy':\n        if sql.insert_or_update_service_setting(server_id, service, 'haproxy_enterprise', haproxy_enterprise):\n            print('Ok')\n            if haproxy_enterprise == '1':\n                funct.logging(server_ip, 'Service has been flagged as an Enterprise version', haproxywi=1, login=1,\n                              keep_history=1, service=service)\n            else:\n                funct.logging(server_ip, 'Service has been flagged as a community version', haproxywi=1, login=1,\n                              keep_history=1, service=service)\n        if sql.insert_or_update_service_setting(server_id, service, 'dockerized', haproxy_dockerized):\n            print('Ok')\n            if haproxy_dockerized == '1':\n                funct.logging(server_ip, 'Service has been flagged as a dockerized', haproxywi=1, login=1,\n                              keep_history=1, service=service)\n            else:\n                funct.logging(server_ip, 'Service has been flagged as a system service', haproxywi=1, login=1,\n                              keep_history=1, service=service)\n\n    if service == 'nginx':\n        if sql.insert_or_update_service_setting(server_id, service, 'dockerized', nginx_dockerized):\n            print('Ok')\n            if nginx_dockerized:\n                funct.logging(server_ip, 'Service has been flagged as a dockerized', haproxywi=1, login=1,\n                              keep_history=1, service=service)\n            else:\n                funct.logging(server_ip, 'Service has been flagged as a system service', haproxywi=1, login=1,\n                              keep_history=1, service=service)\n\n    if service == 'apache':\n        if sql.insert_or_update_service_setting(server_id, service, 'dockerized', apache_dockerized):\n            print('Ok')\n            if apache_dockerized:\n                funct.logging(server_ip, 'Service has been flagged as a dockerized', haproxywi=1, login=1,\n                              keep_history=1, service=service)\n            else:\n                funct.logging(server_ip, 'Service has been flagged as a system service', haproxywi=1, login=1,\n                              keep_history=1, service=service)\n\nif act == 'showListOfVersion':\n    service = form.getvalue('service')\n    configver = form.getvalue('configver')\n    for_delver = form.getvalue('for_delver')\n    style = form.getvalue('style')\n    users = sql.select_users()\n\n    if service == 'keepalived':\n        configs_dir = funct.get_config_var('configs', 'kp_save_configs_dir')\n        files = funct.get_files(dir=configs_dir, format='conf')\n        configs = sql.select_config_version(serv, service)\n        action = 'versions.py?service=keepalived'\n    elif service == 'nginx':\n        configs_dir = funct.get_config_var('configs', 'nginx_save_configs_dir')\n        files = funct.get_files(dir=configs_dir, format='conf')\n        configs = sql.select_config_version(serv, service)\n        action = 'versions.py?service=nginx'\n    elif service == 'apache':\n        configs_dir = funct.get_config_var('configs', 'apache_save_configs_dir')\n        files = funct.get_files(dir=configs_dir, format='conf')\n        configs = sql.select_config_version(serv, service)\n        action = 'versions.py?service=apache'\n    else:\n        service = 'haproxy'\n        files = funct.get_files()\n        configs = sql.select_config_version(serv, service)\n        action = \"versions.py\"\n\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True,\n                      extensions=[\"jinja2.ext.loopcontrols\", \"jinja2.ext.do\"])\n    template = env.get_template('ajax/show_list_version.html')\n\n    template = template.render(serv=serv,\n                               service=service,\n                               action=action,\n                               return_files=files,\n                               configver=configver,\n                               for_delver=for_delver,\n                               configs=configs,\n                               users=users,\n                               style=style)\n    print(template)\n\nif act == 'getSystemInfo':\n    server_ip = form.getvalue('server_ip')\n    server_ip = funct.is_ip_or_dns(server_ip)\n    server_id = form.getvalue('server_id')\n\n    if server_ip == '':\n        print('error: IP or DNS name is not valid')\n        sys.exit()\n\n    from jinja2 import Environment, FileSystemLoader\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True,\n                      extensions=[\"jinja2.ext.loopcontrols\", \"jinja2.ext.do\"])\n    env.globals['string_to_dict'] = funct.string_to_dict\n    template = env.get_template('ajax/show_system_info.html')\n    if sql.is_system_info(server_id):\n        if funct.get_system_info(server_ip):\n            system_info = sql.select_one_system_info(server_id)\n\n            template = template.render(system_info=system_info, server_ip=server_ip, server_id=server_id)\n            print(template)\n        else:\n            print('error: Cannot update server info')\n    else:\n        system_info = sql.select_one_system_info(server_id)\n\n        template = template.render(system_info=system_info, server_ip=server_ip, server_id=server_id)\n        print(template)\n\n\nif act == 'updateSystemInfo':\n    server_ip = form.getvalue('server_ip')\n    server_ip = funct.is_ip_or_dns(server_ip)\n    server_id = form.getvalue('server_id')\n\n    if server_ip == '':\n        print('error: IP or DNS name is not valid')\n        sys.exit()\n\n    sql.delete_system_info(server_id)\n\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True,\n                      extensions=[\"jinja2.ext.loopcontrols\", \"jinja2.ext.do\"])\n    env.globals['string_to_dict'] = funct.string_to_dict\n    template = env.get_template('ajax/show_system_info.html')\n\n    if funct.get_system_info(server_ip):\n        system_info = sql.select_one_system_info(server_id)\n\n        template = template.render(system_info=system_info, server_ip=server_ip, server_id=server_id)\n        print(template)\n    else:\n        print('error: Cannot update server info')\n\nif act == 'findInConfigs':\n    server_ip = serv\n    server_ip = funct.is_ip_or_dns(server_ip)\n    finding_words = form.getvalue('words')\n    service = form.getvalue('service')\n    log_path = sql.get_setting(service + '_dir')\n    log_path = funct.return_nice_path(log_path)\n    commands = ['sudo grep \"%s\" %s*/*.conf -C 2 -Rn' % (finding_words, log_path)]\n    return_find = funct.ssh_command(server_ip, commands, raw='1')\n    return_find = funct.show_finding_in_config(return_find, grep=finding_words)\n\n    if 'error: ' in return_find:\n        print(return_find)\n        sys.exit()\n    print(return_find)\n\nif act == 'check_service':\n    import http.cookies\n    cookie = http.cookies.SimpleCookie(os.environ.get(\"HTTP_COOKIE\"))\n    user_uuid = cookie.get('uuid')\n    user_id = sql.get_user_id_by_uuid(user_uuid.value)\n    user_services = sql.select_user_services(user_id)\n    server_id = funct.checkAjaxInput(form.getvalue('server_id'))\n    service = funct.checkAjaxInput(form.getvalue('service'))\n\n    if '1' in user_services:\n        if service == 'haproxy':\n            haproxy_sock_port = sql.get_setting('haproxy_sock_port')\n            cmd = 'echo \"show info\" |nc %s %s -w 1 -v|grep Name' % (serv, haproxy_sock_port)\n            out = funct.subprocess_execute(cmd)\n            for k in out[0]:\n                if \"Name\" in k:\n                    print('up')\n                    break\n            else:\n                print('down')\n    if '2' in user_services:\n        if service == 'nginx':\n            import socket\n            from contextlib import closing\n\n            nginx_stats_port = sql.get_setting('nginx_stats_port')\n\n            with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as sock:\n                sock.settimeout(5)\n\n                try:\n                    if sock.connect_ex((serv, nginx_stats_port)) == 0:\n                        print('up')\n                    else:\n                        print('down')\n                except Exception:\n                    print('down')\n    if '4' in user_services:\n        if service == 'apache':\n            import socket\n            from contextlib import closing\n\n            apache_stats_port = sql.get_setting('apache_stats_port')\n\n            with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as sock:\n                sock.settimeout(5)\n\n                try:\n                    if sock.connect_ex((serv, apache_stats_port)) == 0:\n                        print('up')\n                    else:\n                        print('down')\n                except Exception as e:\n                    print('down' + str(e))\n\nif form.getvalue('show_sub_ovw'):\n    from jinja2 import Environment, FileSystemLoader\n\n    env = Environment(loader=FileSystemLoader('templates/'), autoescape=True)\n    template = env.get_template('ajax/show_sub_ovw.html')\n    template = template.render(sub=sql.select_user_all())\n    print(template)\n\n\nif form.getvalue('updateHaproxyCheckerSettings'):\n    setting_id = form.getvalue('updateHaproxyCheckerSettings')\n    email = form.getvalue('email')\n    service_alert = form.getvalue('server')\n    backend_alert = form.getvalue('backend')\n    maxconn_alert = form.getvalue('maxconn')\n    telegram_id = form.getvalue('telegram_id')\n    slack_id = form.getvalue('slack_id')\n\n    if sql.update_haproxy_checker_settings(email, telegram_id, slack_id, service_alert, backend_alert,\n                                           maxconn_alert, setting_id):\n        print('ok')\n    else:\n        print('error: Cannot update Checker settings')\n\nif form.getvalue('updateKeepalivedCheckerSettings'):\n    setting_id = form.getvalue('updateKeepalivedCheckerSettings')\n    email = form.getvalue('email')\n    service_alert = form.getvalue('server')\n    backend_alert = form.getvalue('backend')\n    telegram_id = form.getvalue('telegram_id')\n    slack_id = form.getvalue('slack_id')\n\n    if sql.update_keepalived_checker_settings(email, telegram_id, slack_id, service_alert, backend_alert, setting_id):\n        print('ok')\n    else:\n        print('error: Cannot update Checker settings')\n\nif form.getvalue('updateServiceCheckerSettings'):\n    setting_id = form.getvalue('updateServiceCheckerSettings')\n    email = form.getvalue('email')\n    service_alert = form.getvalue('server')\n    telegram_id = form.getvalue('telegram_id')\n    slack_id = form.getvalue('slack_id')\n\n    if sql.update_service_checker_settings(email, telegram_id, slack_id, service_alert, setting_id):\n        print('ok')\n    else:\n        print('error: Cannot update Checker settings')\n"], "filenames": ["app/options.py"], "buggy_code_start_loc": [64], "buggy_code_end_loc": [4540], "fixing_code_start_loc": [64], "fixing_code_end_loc": [4404], "type": "CWE-78", "message": "Roxy-WI is a web interface for managing Haproxy, Nginx, Apache and Keepalived servers. Versions prior to 6.1.1.0 are subject to a remote code execution vulnerability. System commands can be run remotely via the subprocess_execute function without processing the inputs received from the user in the /app/options.py file. Attackers need not be authenticated to exploit this vulnerability. Users are advised to upgrade. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2022-31137", "sourceIdentifier": "security-advisories@github.com", "published": "2022-07-08T20:15:07.980", "lastModified": "2023-05-24T18:15:09.563", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Roxy-WI is a web interface for managing Haproxy, Nginx, Apache and Keepalived servers. Versions prior to 6.1.1.0 are subject to a remote code execution vulnerability. System commands can be run remotely via the subprocess_execute function without processing the inputs received from the user in the /app/options.py file. Attackers need not be authenticated to exploit this vulnerability. Users are advised to upgrade. There are no known workarounds for this vulnerability."}, {"lang": "es", "value": "Roxy-WI es una interfaz web para administrar los servidores Haproxy, Nginx, Apache y Keepalived. Las versiones anteriores a 6.1.1.0 est\u00e1n sujetas a una vulnerabilidad de ejecuci\u00f3n de c\u00f3digo remota. Los comandos del sistema pueden ser ejecutados remotamente por medio de la funci\u00f3n subprocess_execute sin procesar las entradas recibidas del usuario en el archivo /app/options.py. Los atacantes no necesitan estar autenticados para explotar esta vulnerabilidad. Es recomendado a usuarios actualizar. No se presentan mitigaciones conocidas para esta vulnerabilidad"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 10.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:C/I:C/A:C", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 10.0}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:roxy-wi:roxy-wi:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.1.1.0", "matchCriteriaId": "76F16C05-8F24-4B63-AE2D-FB3F99EDD247"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/167805/Roxy-WI-Remote-Command-Execution.html", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "http://packetstormsecurity.com/files/171648/Roxy-WI-6.1.0.0-Improper-Authentication-Control.html", "source": "security-advisories@github.com"}, {"url": "http://packetstormsecurity.com/files/171652/Roxy-WI-6.1.1.0-Remote-Code-Execution.html", "source": "security-advisories@github.com"}, {"url": "http://packetstormsecurity.com/files/172547/Roxy-WI-6.1.0.0-Remote-Command-Execution.html", "source": "security-advisories@github.com"}, {"url": "https://github.com/hap-wi/roxy-wi/commit/82666df1e60c45dd6aa533b01a392f015d32f755", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/hap-wi/roxy-wi/security/advisories/GHSA-53r2-mq99-f532", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/hap-wi/roxy-wi/commit/82666df1e60c45dd6aa533b01a392f015d32f755"}}