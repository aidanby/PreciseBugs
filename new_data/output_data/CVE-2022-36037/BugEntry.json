{"buggy_code": ["<template>\n  <k-draggable\n    :list=\"state\"\n    :options=\"dragOptions\"\n    :data-layout=\"layout\"\n    element=\"k-dropdown\"\n    class=\"k-multiselect-input\"\n    @click.native=\"$refs.dropdown.toggle\"\n    @end=\"onInput\"\n  >\n    <k-tag\n      v-for=\"tag in sorted\"\n      :ref=\"tag.value\"\n      :key=\"tag.value\"\n      :removable=\"true\"\n      @click.native.stop\n      @remove=\"remove(tag)\"\n      @keydown.native.left=\"navigate('prev')\"\n      @keydown.native.right=\"navigate('next')\"\n      @keydown.native.down=\"$refs.dropdown.open\"\n    >\n      {{ tag.text }}\n    </k-tag>\n\n    <k-dropdown-content\n      slot=\"footer\"\n      ref=\"dropdown\"\n      @open=\"onOpen\"\n      @close=\"onClose\"\n      @keydown.native.esc.stop=\"close\"\n    >\n      <k-dropdown-item\n        v-if=\"search\"\n        icon=\"search\"\n        class=\"k-multiselect-search\"\n      >\n        <input\n          ref=\"search\"\n          v-model=\"q\"\n          :placeholder=\"search.min ? $t('search.min', { min: search.min }) : $t('search') + ' \u2026'\"\n          @keydown.esc.stop=\"escape\"\n        >\n      </k-dropdown-item>\n\n      <div class=\"k-multiselect-options\">\n        <k-dropdown-item\n          v-for=\"option in visible\"\n          :key=\"option.value\"\n          :icon=\"isSelected(option) ? 'check' : 'circle-outline'\"\n          :class=\"{\n            'k-multiselect-option': true,\n            'selected': isSelected(option),\n            'disabled': !more\n          }\"\n          @click.prevent=\"select(option)\"\n          @keydown.native.enter.prevent.stop=\"select(option)\"\n          @keydown.native.space.prevent.stop=\"select(option)\"\n        >\n          <!-- eslint-disable-next-line vue/no-v-html -->\n          <span v-html=\"option.display\" />\n          <!-- eslint-disable-next-line vue/no-v-html -->\n          <span class=\"k-multiselect-value\" v-html=\"option.info\" />\n        </k-dropdown-item>\n\n        <k-dropdown-item\n          v-if=\"filtered.length === 0\"\n          :disabled=\"true\"\n          class=\"k-multiselect-option\"\n        >\n          {{ emptyLabel }}\n        </k-dropdown-item>\n      </div>\n\n      <k-button\n        v-if=\"visible.length < filtered.length\"\n        class=\"k-multiselect-more\"\n        @click.stop=\"limit = false\"\n      >\n        {{ $t(\"search.all\") }} ({{ filtered.length }})\n      </k-button>\n    </k-dropdown-content>\n  </k-draggable>\n</template>\n\n<script>\nimport { required, minLength, maxLength } from \"vuelidate/lib/validators\";\n\nexport default {\n  inheritAttrs: false,\n  props: {\n    id: [Number, String],\n    disabled: Boolean,\n    max: Number,\n    min: Number,\n    layout: String,\n    options: {\n      type: Array,\n      default() {\n        return [];\n      }\n    },\n    required: Boolean,\n    search: [Object, Boolean],\n    separator: {\n      type: String,\n      default: \",\"\n    },\n    sort: Boolean,\n    value: {\n      type: Array,\n      required: true,\n      default() {\n        return [];\n      }\n    }\n  },\n  data() {\n    return {\n      state: this.value,\n      q: null,\n      limit: true,\n      scrollTop: 0\n    };\n  },\n  computed: {\n    draggable() {\n      return this.state.length > 1 && !this.sort;\n    },\n    dragOptions() {\n      return {\n        disabled: !this.draggable,\n        draggable: \".k-tag\",\n        delay: 1\n      };\n    },\n    emptyLabel() {\n      if (this.q) {\n        return this.$t(\"search.results.none\");\n      }\n\n      return this.$t(\"options.none\");\n    },\n    filtered() {\n      if (this.q && this.q.length >= (this.search.min || 0)) {\n        return this.options\n          .filter(option => this.isFiltered(option))\n          .map(option => ({\n            ...option,\n            display: this.toHighlightedString(option.text),\n            info: this.toHighlightedString(option.value)\n          }));\n      }\n\n      return this.options.map(option => ({\n        ...option,\n        display: option.text,\n        info: option.value\n      }));\n    },\n    more() {\n      return !this.max || this.state.length < this.max;\n    },\n    regex() {\n      return new RegExp(`(${RegExp.escape(this.q)})`, \"ig\");\n    },\n    sorted() {\n      if (this.sort === false) {\n        return this.state;\n      }\n\n      let items = this.state;\n\n      const index = x => this.options.findIndex(y => y.value === x.value);\n      return items.sort((a, b) => index(a) - index(b));\n    },\n    visible() {\n      if (this.limit) {\n        return this.filtered.slice(0, this.search.display || this.filtered.length);\n      }\n\n      return this.filtered;\n    },\n  },\n  watch: {\n    value(value) {\n      this.state = value;\n      this.onInvalid();\n    }\n  },\n  mounted() {\n    this.onInvalid();\n    this.$events.$on(\"click\", this.close);\n    this.$events.$on(\"keydown.cmd.s\", this.close);\n  },\n  destroyed() {\n    this.$events.$off(\"click\", this.close);\n    this.$events.$off(\"keydown.cmd.s\", this.close);\n  },\n  methods: {\n    add(option) {\n      if (this.more === true) {\n        this.state.push(option);\n        this.onInput();\n      }\n    },\n    blur() {\n      this.close();\n    },\n    close() {\n      if (this.$refs.dropdown.isOpen === true) {\n        this.$refs.dropdown.close();\n        this.limit = true;\n      }\n    },\n    escape() {\n      if (this.q) {\n        this.q = null;\n        return;\n      }\n\n      this.close();\n    },\n    focus() {\n      this.$refs.dropdown.open();\n    },\n    index(option) {\n      return this.state.findIndex(item => item.value === option.value);\n    },\n    isFiltered(option) {\n      return String(option.text).match(this.regex) ||\n             String(option.value).match(this.regex);\n    },\n    isSelected(option) {\n      return this.index(option) !== -1;\n    },\n    navigate(direction) {\n      let current = document.activeElement;\n\n      switch (direction) {\n        case \"prev\":\n          if (\n            current &&\n            current.previousSibling &&\n            current.previousSibling.focus\n          ) {\n            current.previousSibling.focus();\n          }\n          break;\n        case \"next\":\n          if (\n            current &&\n            current.nextSibling &&\n            current.nextSibling.focus\n          ) {\n            current.nextSibling.focus();\n          }\n          break;\n      }\n    },\n    onClose() {\n      if (this.$refs.dropdown.isOpen === false) {\n        if (document.activeElement === this.$parent.$el) {\n          this.q = null;\n        }\n\n        this.$parent.$el.focus();\n      }\n    },\n    onInput() {\n      this.$emit(\"input\", this.sorted);\n    },\n    onInvalid() {\n      this.$emit(\"invalid\", this.$v.$invalid, this.$v);\n    },\n    onOpen() {\n      this.$nextTick(() => {\n        if (this.$refs.search && this.$refs.search.focus) {\n          this.$refs.search.focus();\n        }\n\n        this.$refs.dropdown.$el.querySelector('.k-multiselect-options').scrollTop = this.scrollTop;\n      });\n    },\n    remove(option) {\n      this.state.splice(this.index(option), 1);\n      this.onInput();\n    },\n    select(option) {\n      this.scrollTop = this.$refs.dropdown.$el.querySelector('.k-multiselect-options').scrollTop;\n\n      option = { text: option.text, value: option.value };\n\n      if (this.isSelected(option)) {\n        this.remove(option);\n      } else {\n        this.add(option);\n      }\n    },\n    toHighlightedString(string) {\n      // make sure that no HTML exists before in the string\n      // to avoid XSS when displaying via `v-html`\n      string = this.$helper.string.stripHTML(string);\n      return string.replace(this.regex, \"<b>$1</b>\")\n    },\n  },\n  validations() {\n    return {\n      state: {\n        required: this.required ? required : true,\n        minLength: this.min ? minLength(this.min) : true,\n        maxLength: this.max ? maxLength(this.max) : true\n      }\n    };\n  }\n};\n</script>\n\n<style lang=\"scss\">\n.k-multiselect-input {\n  display: flex;\n  flex-wrap: wrap;\n  position: relative;\n  font-size: $text-sm;\n  min-height: 2.25rem;\n  line-height: 1;\n}\n.k-multiselect-input .k-sortable-ghost {\n  background: $color-focus;\n}\n\n.k-multiselect-input .k-dropdown-content {\n  width: 100%;\n}\n\n.k-multiselect-search {\n  margin-top: 0 !important;\n  color: $color-white;\n  background: $color-gray-900;\n  border-bottom: 1px dashed rgba($color-white, 0.2);\n\n  > .k-button-text {\n    flex: 1;\n    opacity: 1 !important;\n  }\n\n  input {\n    width: 100%;\n    color: $color-white;\n    background: none;\n    border: none;\n    outline: none;\n    padding: 0.25rem 0;\n    font: inherit;\n  }\n}\n\n.k-multiselect-options {\n  position: relative;\n  max-height: 275px;\n  overflow-y: auto;\n  padding: 0.5rem 0;\n}\n\n.k-multiselect-option {\n  position: relative;\n\n  &.selected {\n    color: $color-positive-on-dark;\n  }\n\n  &.disabled:not(.selected) .k-icon {\n    opacity: 0;\n  }\n\n  b {\n    color: $color-focus-on-dark;\n    font-weight: 700;\n  }\n}\n\n.k-multiselect-value {\n  color: $color-light-grey;\n  margin-left: 0.25rem;\n\n  &::before {\n    content: \" (\";\n  }\n  &::after {\n    content: \")\";\n  }\n}\n\n.k-multiselect-input[data-layout=\"list\"] .k-tag {\n  width: 100%;\n  margin-right: 0 !important;\n}\n\n.k-multiselect-more {\n  width: 100%;\n  padding: .75rem;\n  color: rgba($color-white, .8);\n  text-align: center;\n  border-top: 1px dashed rgba($color-white, 0.2);\n\n  &:hover {\n    color: $color-white;\n  }\n}\n</style>\n"], "fixing_code": ["<template>\n  <k-draggable\n    :list=\"state\"\n    :options=\"dragOptions\"\n    :data-layout=\"layout\"\n    element=\"k-dropdown\"\n    class=\"k-multiselect-input\"\n    @click.native=\"$refs.dropdown.toggle\"\n    @end=\"onInput\"\n  >\n    <k-tag\n      v-for=\"tag in sorted\"\n      :ref=\"tag.value\"\n      :key=\"tag.value\"\n      :removable=\"true\"\n      @click.native.stop\n      @remove=\"remove(tag)\"\n      @keydown.native.left=\"navigate('prev')\"\n      @keydown.native.right=\"navigate('next')\"\n      @keydown.native.down=\"$refs.dropdown.open\"\n    >\n      {{ tag.text }}\n    </k-tag>\n\n    <k-dropdown-content\n      slot=\"footer\"\n      ref=\"dropdown\"\n      @open=\"onOpen\"\n      @close=\"onClose\"\n      @keydown.native.esc.stop=\"close\"\n    >\n      <k-dropdown-item\n        v-if=\"search\"\n        icon=\"search\"\n        class=\"k-multiselect-search\"\n      >\n        <input\n          ref=\"search\"\n          v-model=\"q\"\n          :placeholder=\"search.min ? $t('search.min', { min: search.min }) : $t('search') + ' \u2026'\"\n          @keydown.esc.stop=\"escape\"\n        >\n      </k-dropdown-item>\n\n      <div class=\"k-multiselect-options\">\n        <k-dropdown-item\n          v-for=\"option in visible\"\n          :key=\"option.value\"\n          :icon=\"isSelected(option) ? 'check' : 'circle-outline'\"\n          :class=\"{\n            'k-multiselect-option': true,\n            'selected': isSelected(option),\n            'disabled': !more\n          }\"\n          @click.prevent=\"select(option)\"\n          @keydown.native.enter.prevent.stop=\"select(option)\"\n          @keydown.native.space.prevent.stop=\"select(option)\"\n        >\n          <!-- eslint-disable-next-line vue/no-v-html -->\n          <span v-html=\"option.display\" />\n          <span class=\"k-multiselect-value\" v-text=\"option.info\" />\n        </k-dropdown-item>\n\n        <k-dropdown-item\n          v-if=\"filtered.length === 0\"\n          :disabled=\"true\"\n          class=\"k-multiselect-option\"\n        >\n          {{ emptyLabel }}\n        </k-dropdown-item>\n      </div>\n\n      <k-button\n        v-if=\"visible.length < filtered.length\"\n        class=\"k-multiselect-more\"\n        @click.stop=\"limit = false\"\n      >\n        {{ $t(\"search.all\") }} ({{ filtered.length }})\n      </k-button>\n    </k-dropdown-content>\n  </k-draggable>\n</template>\n\n<script>\nimport { required, minLength, maxLength } from \"vuelidate/lib/validators\";\n\nexport default {\n  inheritAttrs: false,\n  props: {\n    id: [Number, String],\n    disabled: Boolean,\n    max: Number,\n    min: Number,\n    layout: String,\n    options: {\n      type: Array,\n      default() {\n        return [];\n      }\n    },\n    required: Boolean,\n    search: [Object, Boolean],\n    separator: {\n      type: String,\n      default: \",\"\n    },\n    sort: Boolean,\n    value: {\n      type: Array,\n      required: true,\n      default() {\n        return [];\n      }\n    }\n  },\n  data() {\n    return {\n      state: this.value,\n      q: null,\n      limit: true,\n      scrollTop: 0\n    };\n  },\n  computed: {\n    draggable() {\n      return this.state.length > 1 && !this.sort;\n    },\n    dragOptions() {\n      return {\n        disabled: !this.draggable,\n        draggable: \".k-tag\",\n        delay: 1\n      };\n    },\n    emptyLabel() {\n      if (this.q) {\n        return this.$t(\"search.results.none\");\n      }\n\n      return this.$t(\"options.none\");\n    },\n    filtered() {\n      if (this.q && this.q.length >= (this.search.min || 0)) {\n        return this.options\n          .filter(option => this.isFiltered(option))\n          .map(option => ({\n            ...option,\n            display: this.toHighlightedString(option.text),\n            info: this.toHighlightedString(option.value)\n          }));\n      }\n\n      return this.options.map(option => ({\n        ...option,\n        display: option.text,\n        info: option.value\n      }));\n    },\n    more() {\n      return !this.max || this.state.length < this.max;\n    },\n    regex() {\n      return new RegExp(`(${RegExp.escape(this.q)})`, \"ig\");\n    },\n    sorted() {\n      if (this.sort === false) {\n        return this.state;\n      }\n\n      let items = this.state;\n\n      const index = x => this.options.findIndex(y => y.value === x.value);\n      return items.sort((a, b) => index(a) - index(b));\n    },\n    visible() {\n      if (this.limit) {\n        return this.filtered.slice(0, this.search.display || this.filtered.length);\n      }\n\n      return this.filtered;\n    },\n  },\n  watch: {\n    value(value) {\n      this.state = value;\n      this.onInvalid();\n    }\n  },\n  mounted() {\n    this.onInvalid();\n    this.$events.$on(\"click\", this.close);\n    this.$events.$on(\"keydown.cmd.s\", this.close);\n  },\n  destroyed() {\n    this.$events.$off(\"click\", this.close);\n    this.$events.$off(\"keydown.cmd.s\", this.close);\n  },\n  methods: {\n    add(option) {\n      if (this.more === true) {\n        this.state.push(option);\n        this.onInput();\n      }\n    },\n    blur() {\n      this.close();\n    },\n    close() {\n      if (this.$refs.dropdown.isOpen === true) {\n        this.$refs.dropdown.close();\n        this.limit = true;\n      }\n    },\n    escape() {\n      if (this.q) {\n        this.q = null;\n        return;\n      }\n\n      this.close();\n    },\n    focus() {\n      this.$refs.dropdown.open();\n    },\n    index(option) {\n      return this.state.findIndex(item => item.value === option.value);\n    },\n    isFiltered(option) {\n      return String(option.text).match(this.regex) ||\n             String(option.value).match(this.regex);\n    },\n    isSelected(option) {\n      return this.index(option) !== -1;\n    },\n    navigate(direction) {\n      let current = document.activeElement;\n\n      switch (direction) {\n        case \"prev\":\n          if (\n            current &&\n            current.previousSibling &&\n            current.previousSibling.focus\n          ) {\n            current.previousSibling.focus();\n          }\n          break;\n        case \"next\":\n          if (\n            current &&\n            current.nextSibling &&\n            current.nextSibling.focus\n          ) {\n            current.nextSibling.focus();\n          }\n          break;\n      }\n    },\n    onClose() {\n      if (this.$refs.dropdown.isOpen === false) {\n        if (document.activeElement === this.$parent.$el) {\n          this.q = null;\n        }\n\n        this.$parent.$el.focus();\n      }\n    },\n    onInput() {\n      this.$emit(\"input\", this.sorted);\n    },\n    onInvalid() {\n      this.$emit(\"invalid\", this.$v.$invalid, this.$v);\n    },\n    onOpen() {\n      this.$nextTick(() => {\n        if (this.$refs.search && this.$refs.search.focus) {\n          this.$refs.search.focus();\n        }\n\n        this.$refs.dropdown.$el.querySelector('.k-multiselect-options').scrollTop = this.scrollTop;\n      });\n    },\n    remove(option) {\n      this.state.splice(this.index(option), 1);\n      this.onInput();\n    },\n    select(option) {\n      this.scrollTop = this.$refs.dropdown.$el.querySelector('.k-multiselect-options').scrollTop;\n\n      option = { text: option.text, value: option.value };\n\n      if (this.isSelected(option)) {\n        this.remove(option);\n      } else {\n        this.add(option);\n      }\n    },\n    toHighlightedString(string) {\n      // make sure that no HTML exists before in the string\n      // to avoid XSS when displaying via `v-html`\n      string = this.$helper.string.stripHTML(string);\n      return string.replace(this.regex, \"<b>$1</b>\")\n    },\n  },\n  validations() {\n    return {\n      state: {\n        required: this.required ? required : true,\n        minLength: this.min ? minLength(this.min) : true,\n        maxLength: this.max ? maxLength(this.max) : true\n      }\n    };\n  }\n};\n</script>\n\n<style lang=\"scss\">\n.k-multiselect-input {\n  display: flex;\n  flex-wrap: wrap;\n  position: relative;\n  font-size: $text-sm;\n  min-height: 2.25rem;\n  line-height: 1;\n}\n.k-multiselect-input .k-sortable-ghost {\n  background: $color-focus;\n}\n\n.k-multiselect-input .k-dropdown-content {\n  width: 100%;\n}\n\n.k-multiselect-search {\n  margin-top: 0 !important;\n  color: $color-white;\n  background: $color-gray-900;\n  border-bottom: 1px dashed rgba($color-white, 0.2);\n\n  > .k-button-text {\n    flex: 1;\n    opacity: 1 !important;\n  }\n\n  input {\n    width: 100%;\n    color: $color-white;\n    background: none;\n    border: none;\n    outline: none;\n    padding: 0.25rem 0;\n    font: inherit;\n  }\n}\n\n.k-multiselect-options {\n  position: relative;\n  max-height: 275px;\n  overflow-y: auto;\n  padding: 0.5rem 0;\n}\n\n.k-multiselect-option {\n  position: relative;\n\n  &.selected {\n    color: $color-positive-on-dark;\n  }\n\n  &.disabled:not(.selected) .k-icon {\n    opacity: 0;\n  }\n\n  b {\n    color: $color-focus-on-dark;\n    font-weight: 700;\n  }\n}\n\n.k-multiselect-value {\n  color: $color-light-grey;\n  margin-left: 0.25rem;\n\n  &::before {\n    content: \" (\";\n  }\n  &::after {\n    content: \")\";\n  }\n}\n\n.k-multiselect-input[data-layout=\"list\"] .k-tag {\n  width: 100%;\n  margin-right: 0 !important;\n}\n\n.k-multiselect-more {\n  width: 100%;\n  padding: .75rem;\n  color: rgba($color-white, .8);\n  text-align: center;\n  border-top: 1px dashed rgba($color-white, 0.2);\n\n  &:hover {\n    color: $color-white;\n  }\n}\n</style>\n"], "filenames": ["panel/src/components/Forms/Input/MultiselectInput.vue"], "buggy_code_start_loc": [61], "buggy_code_end_loc": [63], "fixing_code_start_loc": [61], "fixing_code_end_loc": [62], "type": "CWE-79", "message": "kirby is a content management system (CMS) that adapts to many different projects and helps you build your own ideal interface. Cross-site scripting (XSS) is a type of vulnerability that allows execution of any kind of JavaScript code inside the Panel session of the same or other users. In the Panel, a harmful script can for example trigger requests to Kirby's API with the permissions of the victim. If bad actors gain access to your group of authenticated Panel users they can escalate their privileges via the Panel session of an admin user. Depending on your site, other JavaScript-powered attacks are possible. The multiselect field allows selection of tags from an autocompleted list. Unfortunately, the Panel in Kirby 3.5 used HTML rendering for the raw option value. This allowed **attackers with influence on the options source** to store HTML code. The browser of the victim who visited a page with manipulated multiselect options in the Panel will then have rendered this malicious HTML code when the victim opened the autocomplete dropdown. Users are *not* affected by this vulnerability if you don't use the multiselect field or don't use it with options that can be manipulated by attackers. The problem has been patched in Kirby 3.5.8.1.", "other": {"cve": {"id": "CVE-2022-36037", "sourceIdentifier": "security-advisories@github.com", "published": "2022-08-29T18:15:09.870", "lastModified": "2022-09-07T20:37:38.567", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "kirby is a content management system (CMS) that adapts to many different projects and helps you build your own ideal interface. Cross-site scripting (XSS) is a type of vulnerability that allows execution of any kind of JavaScript code inside the Panel session of the same or other users. In the Panel, a harmful script can for example trigger requests to Kirby's API with the permissions of the victim. If bad actors gain access to your group of authenticated Panel users they can escalate their privileges via the Panel session of an admin user. Depending on your site, other JavaScript-powered attacks are possible. The multiselect field allows selection of tags from an autocompleted list. Unfortunately, the Panel in Kirby 3.5 used HTML rendering for the raw option value. This allowed **attackers with influence on the options source** to store HTML code. The browser of the victim who visited a page with manipulated multiselect options in the Panel will then have rendered this malicious HTML code when the victim opened the autocomplete dropdown. Users are *not* affected by this vulnerability if you don't use the multiselect field or don't use it with options that can be manipulated by attackers. The problem has been patched in Kirby 3.5.8.1."}, {"lang": "es", "value": "kirby es un sistema de administraci\u00f3n de contenidos (CMS) que es adaptada a muchos proyectos diferentes y le ayuda a construir su propia interfaz ideal. Una vulnerabilidad de tipo cross-site scripting (XSS) es un tipo de vulnerabilidad que permite una ejecuci\u00f3n de cualquier tipo de c\u00f3digo JavaScript dentro de la sesi\u00f3n del Panel del mismo u otros usuarios. En el Panel, un script da\u00f1ino puede, por ejemplo, lanzar peticiones a la API de Kirby con los permisos de la v\u00edctima. Si los actores maliciosos consiguen acceder a su grupo de usuarios autenticados del Panel, pueden escalar sus privilegios por medio de la sesi\u00f3n del Panel de un usuario administrador. Dependiendo de su sitio, es posible realizar otros ataques con JavaScript. El campo multiselecci\u00f3n permite seleccionar etiquetas de una lista autocompletada. Desafortunadamente, el Panel en Kirby versi\u00f3n 3.5 usaba el renderizado HTML para el valor crudo de la opci\u00f3n. Esto permit\u00eda a **atacantes con influencia en el origen de las opciones** almacenar c\u00f3digo HTML. El navegador de la v\u00edctima que visit\u00f3 una p\u00e1gina con opciones multiselecci\u00f3n manipuladas en el Panel habr\u00e1 renderizado este c\u00f3digo HTML malicioso cuando la v\u00edctima abri\u00f3 el desplegable de autocompletar. Los usuarios *no* est\u00e1n afectados por esta vulnerabilidad si no usan el campo multiselect o no lo usan con opciones que puedan ser manipuladas por los atacantes. El problema ha sido parcheado en Kirby versi\u00f3n 3.5.8.1"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 4.2}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:getkirby:kirby:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.5.8.1", "matchCriteriaId": "A7E15C20-5139-414E-AB93-B9130DE9DB16"}]}]}], "references": [{"url": "https://github.com/getkirby/kirby/commit/b5b8863885e17556abc070dde1e20aec15fbfdf5", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/getkirby/kirby/releases/tag/3.5.8.1", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/getkirby/kirby/security/advisories/GHSA-3f89-869f-5w76", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/getkirby/kirby/commit/b5b8863885e17556abc070dde1e20aec15fbfdf5"}}