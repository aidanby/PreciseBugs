{"buggy_code": ["<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>UA COM Server Wrapper</ApplicationName>\n  <ApplicationUri>urn:localhost:UA:ComServerWrapper</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/UA/ComServerWrapper</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n\n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>UA COM Server Wrapper</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Windows</StoreType>\n      <StorePath>LocalMachine\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n    <AutoAcceptUntrustedCertificates>false</AutoAcceptUntrustedCertificates>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations />\n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>4194304</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>opc.tcp://localhost:48400/UA/ComServerWrapper</ua:String>\n      <ua:String>http://localhost:48401/UA/ComServerWrapper</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <MinRequestThreadCount>5</MinRequestThreadCount>\n    <MaxRequestThreadCount>100</MaxRequestThreadCount>\n    <MaxQueuedRequestCount>2000</MaxQueuedRequestCount>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n    </UserTokenPolicies>\n    \n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>100</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates />\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Opc.Ua.Server.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <ComWrapperServerConfiguration xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://opcfoundation.org/UA/SDK/COMInterop\">\n        <WrappedServers>\n          <ComClientConfiguration i:type=\"ComDaClientConfiguration\">\n            <ServerUrl>opc.com://localhost/OPCSample.OpcDa20Server</ServerUrl>\n            <ServerName>DA</ServerName>\n            <MaxReconnectWait>10000</MaxReconnectWait>\n            <SeperatorChars></SeperatorChars>\n            <AvailableLocales>\n              <ua:String>en-US</ua:String>\n              <ua:String>de-DE</ua:String>\n              <ua:String>ja-JP</ua:String>\n            </AvailableLocales>\n            <BrowseToNotSupported>false</BrowseToNotSupported>\n          </ComClientConfiguration>\n          <ComClientConfiguration i:type=\"ComAeClientConfiguration\">\n            <ServerUrl>opc.com://localhost/OPCSample.OPCEventServer/{65168852-5783-11d1-84a0-00608cb8a7e9}</ServerUrl>\n            <ServerName>AE</ServerName>\n            <MaxReconnectWait>10000000</MaxReconnectWait>\n            <SeperatorChars>\\</SeperatorChars>\n            <AvailableLocales>\n              <ua:String>en-US</ua:String>\n              <ua:String>de-DE</ua:String>\n              <ua:String>ja-JP</ua:String>\n            </AvailableLocales>\n          </ComClientConfiguration>\n          <ComClientConfiguration i:type=\"ComHdaClientConfiguration\">\n            <ServerUrl>opc.com://localhost/OPCSample.OpcHdaServer/{6a5eedec-1509-4627-997f-993ccb65ab7c}</ServerUrl>\n            <ServerName>HDA</ServerName>\n            <MaxReconnectWait>10000</MaxReconnectWait>\n            <SeperatorChars></SeperatorChars>\n            <AddCapabilitiesToServerObject>true</AddCapabilitiesToServerObject>\n            <AttributeSamplingInterval>1000</AttributeSamplingInterval>\n            <TreatUncertainAsBad>true</TreatUncertainAsBad>\n            <PercentDataBad>0</PercentDataBad>\n            <PercentDataGood>100</PercentDataGood>\n            <SteppedSlopedExtrapolation>false</SteppedSlopedExtrapolation>\n          </ComClientConfiguration>\n        </WrappedServers>\n      </ComWrapperServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Opc.Ua.ComServerWrapper.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>1023</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n\n</ApplicationConfiguration>\n", "/* ========================================================================\n * Copyright (c) 2005-2017 The OPC Foundation, Inc. All rights reserved.\n *\n * OPC Foundation MIT License 1.00\n * \n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n * \n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n *\n * The complete license agreement can be found here:\n * http://opcfoundation.org/License/MIT/1.00/\n * ======================================================================*/\n\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.Windows.Forms;\nusing System.Reflection;\nusing System.IO;\nusing System.Threading;\n\nusing Opc.Ua.Configuration;\nusing System.Security.Cryptography.X509Certificates;\n\nnamespace Opc.Ua.Client.Controls\n{\n    /// <summary>\n    /// Prompts the user to edit a ComPseudoServerDlg.\n    /// </summary>\n    public partial class ConfiguredServerDlg : Form\n    {\n        #region Constructors\n        /// <summary>\n        /// Initializes the dialog.\n        /// </summary>\n        public ConfiguredServerDlg()\n        {\n            InitializeComponent();\n            this.Icon = ClientUtils.GetAppIcon();\n\n            m_userIdentities = new Dictionary<string, UserIdentityToken>();\n            m_statusObject = new StatusObject((int)StatusChannel.MaxStatusChannels);\n        }\n        #endregion\n\n        #region Private Fields\n        /// <summary>\n        /// The possible encodings.\n        /// </summary>\n        private enum Encoding\n        {\n            Default,\n            Xml,\n            Binary\n        }\n\n        /// <summary>\n        /// The possible COM identities.\n        /// </summary>\n        private enum ComIdentityType\n        {\n            None = -1,\n            DA = (int)ComSpecification.DA,\n            AE = (int)ComSpecification.AE,\n            HDA = (int)ComSpecification.HDA\n        }\n\n        /// <summary>\n        /// The type of status (for coloring the status textbox).\n        /// </summary>\n        private enum StatusType\n        {\n            Ok = 0,\n            Warning = 1,\n            Error = 2\n        }\n\n        /// <summary>\n        /// The status channel inside the StatusObject.\n        /// </summary>\n        private enum StatusChannel\n        {\n            Discovery = 0,\n            SelectedSecurityMode = 1,\n            ApplicationType = 2,\n            SelectedProtocol = 3,\n            ApplicationUri = 4,\n            DiscoveryURLs = 5,\n            Server = 6,\n            DifferentCertificate = 7,\n            SecurityPolicyUri = 8,\n            TransportProfileUri = 9,\n            SelectedSecurityPolicy = 10,\n            MaxStatusChannels = 11\n        }\n\n        /// <summary>\n        /// Whether to override limits\n        /// </summary>\n        private enum UseDefaultLimits\n        {\n            Yes,\n            No\n        }\n\n        /// <summary>\n        /// This class merges multiple error/warning/status codes from multiple sources.\n        /// Initialize it with the number of status channels and update \"StatusChannel\" accordingly.\n        /// Provides a general view of all the statuses (joined texts, worst status).\n        /// </summary>\n        private class StatusObject\n        {\n            public StatusObject(int maxChannels)\n            {\n                m_maxChannels = maxChannels;\n                m_statusTexts = new string[maxChannels];\n                m_statusTypes = new StatusType[maxChannels];\n\n                for (int i = 0; i < m_maxChannels; ++i)\n                {\n                    m_statusTexts[i] = String.Empty;\n                    m_statusTypes[i] = StatusType.Ok;\n                }\n            }\n\n            public String StatusString\n            {\n                get\n                {\n                    String status = String.Empty;\n\n                    for (int i = 0; i < m_maxChannels; ++i)\n                    {\n                        if (!String.IsNullOrEmpty(m_statusTexts[i]))\n                        {\n                            if (!String.IsNullOrEmpty(status))\n                            {\n                                status += \" | \";\n                            }\n\n                            status += m_statusTexts[i];\n                        }\n                    }\n\n                    return status;\n                }\n            }\n\n            public StatusType StatusType\n            {\n                get\n                {\n                    StatusType type = StatusType.Ok;\n                    \n                    for (int i = 0; i < m_maxChannels; ++i)\n                    {\n                        if (m_statusTypes[i] > type)\n                        {\n                            type = m_statusTypes[i];\n                        }\n                    }\n\n                    return type;\n                }\n            }\n\n            public void SetStatus(StatusChannel channel, String text, StatusType type)\n            {\n                int intChannel = (int)channel;\n\n                if ((intChannel >= 0) && (intChannel < m_maxChannels))\n                {\n                    m_statusTexts[intChannel] = text;\n                    m_statusTypes[intChannel] = type;\n                }\n            }\n\n            public void ClearStatus(StatusChannel channel)\n            {\n                int intChannel = (int)channel;\n\n                if ((intChannel >= 0) && (intChannel < m_maxChannels))\n                {\n                    m_statusTexts[intChannel] = String.Empty;\n                    m_statusTypes[intChannel] = StatusType.Ok;\n                }\n            }\n\n            private int m_maxChannels;\n            private String[] m_statusTexts;\n            private StatusType[] m_statusTypes;\n        }\n\n        /// <summary>\n        /// This class is used by the EndopintListLB (list box).\n        /// Holds references to the received EndpointDescription and its MessageSecurityMode, SecurityPolicyUri, MessageSecurityMode and EncodingSupport.\n        /// Also prepares a user-friendly text representation of all the endpoint-rellevant characteristics.\n        /// The extracted EndpointDescription properties are used in selecting the right combo-box values when user clicks in the endpoint list box.\n        /// </summary>\n        private class EndpointDescriptionString\n        {\n            public EndpointDescriptionString(EndpointDescription endpointDescription)\n            {\n                m_endpointDescription = endpointDescription;\n                m_protocol = new Protocol(endpointDescription);\n                m_currentPolicy = SecurityPolicies.GetDisplayName(endpointDescription.SecurityPolicyUri);\n                m_messageSecurityMode = endpointDescription.SecurityMode;\n\n                switch (m_endpointDescription.EncodingSupport)\n                {\n                    case BinaryEncodingSupport.None:\n                        {\n                            m_encoding = Encoding.Xml;\n                            break;\n                        }\n\n                    case BinaryEncodingSupport.Optional:\n                    case BinaryEncodingSupport.Required:\n                        {\n                            m_encoding = Encoding.Binary;\n                            break;\n                        }\n                }\n\n                BuildEndpointDescription();\n            }\n\n            public EndpointDescription EndpointDescription\n            {\n                get\n                {\n                    return m_endpointDescription;\n                }\n            }\n\n            public Protocol Protocol\n            {\n                get\n                {\n                    return m_protocol;\n                }\n            }\n\n            public string CurrentPolicy\n            {\n                get\n                {\n                    return m_currentPolicy;\n                }\n            }\n\n            public MessageSecurityMode MessageSecurityMode\n            {\n                get\n                {\n                    return m_messageSecurityMode;\n                }\n            }\n\n            public Encoding Encoding\n            {\n                get\n                {\n                    return m_encoding;\n                }\n            }\n\n            public override string ToString()\n            {\n                return m_stringRepresentation;\n            }\n\n            private void BuildEndpointDescription()\n            {\n                m_stringRepresentation = m_protocol.ToString() + \" - \";\n                m_stringRepresentation += m_endpointDescription.SecurityMode + \" - \";\n                m_stringRepresentation += SecurityPolicies.GetDisplayName(m_endpointDescription.SecurityPolicyUri) + \" - \";\n\n                switch (m_endpointDescription.EncodingSupport)\n                {\n                    case BinaryEncodingSupport.None:\n                        {\n                            m_stringRepresentation += Encoding.Xml;\n                            break;\n                        }\n\n                    case BinaryEncodingSupport.Required:\n                        {\n                            m_stringRepresentation += Encoding.Binary;\n                            break;\n                        }\n\n                    case BinaryEncodingSupport.Optional:\n                        {\n                            m_stringRepresentation += Encoding.Binary + \"/\" + Encoding.Xml;\n                            break;\n                        }\n                }\n\n            }\n\n            private Protocol m_protocol;\n            private EndpointDescription m_endpointDescription;\n            private MessageSecurityMode m_messageSecurityMode;\n            private string m_currentPolicy;\n            private Encoding m_encoding;\n            private string m_stringRepresentation;\n        }\n\n        private ConfiguredEndpoint m_endpoint;\n        private EndpointDescription m_currentDescription;\n        private EndpointDescriptionCollection m_availableEndpoints;\n        private List<EndpointDescriptionString> m_availableEndpointsDescriptions;\n        private int m_discoveryTimeout;\n        private int m_discoverCount;\n        private ApplicationConfiguration m_configuration;\n        private bool m_updating;\n        private bool m_selecting;\n        private Dictionary<string, UserIdentityToken> m_userIdentities;\n        private EndpointComIdentity m_comIdentity;\n        private EndpointConfiguration m_endpointConfiguration;\n        private bool m_discoverySucceeded;\n        private Uri m_discoveryUrl;\n        private bool m_showAllOptions;\n        private String m_discoveryStatus;\n        private StatusObject m_statusObject;\n        #endregion\n\n        #region Public Interface\n        public EndpointDescriptionCollection AvailableEnpoints\n        {\n            get { return m_availableEndpoints; }\n        }\n\n        /// <summary>\n        /// The timeout in milliseconds to use when discovering servers.\n        /// </summary>\n        [System.ComponentModel.DefaultValue(20000)]\n        public int DiscoveryTimeout\n        {\n            get { return m_discoveryTimeout; }\n            set { Interlocked.Exchange(ref m_discoveryTimeout, value); }\n        }\n        /// <summary>\n        /// Displays the dialog.\n        /// </summary>\n        public ConfiguredEndpoint ShowDialog(ApplicationDescription server, ApplicationConfiguration configuration)\n        {\n            if (server == null) throw new ArgumentNullException(\"server\");\n\n            m_configuration = configuration;\n\n            // construct a list of available endpoint descriptions for the application.\n            m_availableEndpoints = new EndpointDescriptionCollection();\n            m_availableEndpointsDescriptions = new List<EndpointDescriptionString>();\n            m_endpointConfiguration = EndpointConfiguration.Create(configuration);\n\n            // create a default endpoint description.\n            m_endpoint = null;\n            m_currentDescription = null;\n\n            // initializing the protocol will trigger an update to all other controls.\n            InitializeProtocols(m_availableEndpoints);\n            BuildEndpointDescriptionStrings(m_availableEndpoints);\n\n            // discover endpoints in the background.\n            m_discoverySucceeded = false;\n            Interlocked.Increment(ref m_discoverCount);\n            ThreadPool.QueueUserWorkItem(new WaitCallback(OnDiscoverEndpoints), server);\n\n            if (ShowDialog() != DialogResult.OK)\n            {\n                return null;\n            }\n\n            return m_endpoint;\n        }\n\n        /// <summary>\n        /// Displays the dialog.\n        /// </summary>\n        public ConfiguredEndpoint ShowDialog(ConfiguredEndpoint endpoint, ApplicationConfiguration configuration)\n        {\n            if (endpoint == null) throw new ArgumentNullException(\"endpoint\");\n\n            m_endpoint = endpoint;\n            m_configuration = configuration;\n\n            // construct a list of available endpoint descriptions for the application.\n            m_availableEndpoints = new EndpointDescriptionCollection();\n            m_availableEndpointsDescriptions = new List<EndpointDescriptionString>();\n\n            m_availableEndpoints.Add(endpoint.Description);\n            m_currentDescription = endpoint.Description;\n            m_endpointConfiguration = endpoint.Configuration;\n\n            if (m_endpointConfiguration == null)\n            {\n                m_endpointConfiguration = EndpointConfiguration.Create(configuration);\n            }\n\n            if (endpoint.Collection != null)\n            {\n                foreach (ConfiguredEndpoint existingEndpoint in endpoint.Collection.Endpoints)\n                {\n                    if (existingEndpoint.Description.Server.ApplicationUri == endpoint.Description.Server.ApplicationUri)\n                    {\n                        m_availableEndpoints.Add(existingEndpoint.Description);\n                    }\n                }\n            }\n\n            BuildEndpointDescriptionStrings(m_availableEndpoints);\n\n            UserTokenPolicy policy = m_endpoint.SelectedUserTokenPolicy;\n\n            if (policy == null)\n            {\n                if (m_endpoint.Description.UserIdentityTokens.Count > 0)\n                {\n                    policy = m_endpoint.Description.UserIdentityTokens[0];\n                }\n            }\n\n            if (policy != null)\n            {\n                UserTokenItem userTokenItem = new UserTokenItem(policy);\n\n                if (policy.TokenType == UserTokenType.UserName && m_endpoint.UserIdentity is UserNameIdentityToken)\n                {\n                    m_userIdentities[userTokenItem.ToString()] = m_endpoint.UserIdentity;\n                }\n\n                if (policy.TokenType == UserTokenType.Certificate && m_endpoint.UserIdentity is X509IdentityToken)\n                {\n                    m_userIdentities[userTokenItem.ToString()] = m_endpoint.UserIdentity;\n                }\n\n                if (policy.TokenType == UserTokenType.IssuedToken && m_endpoint.UserIdentity is IssuedIdentityToken)\n                {\n                    m_userIdentities[userTokenItem.ToString()] = m_endpoint.UserIdentity;\n                }\n            }\n\n            // copy com identity.\n            m_comIdentity = endpoint.ComIdentity;\n\n            // initializing the protocol will trigger an update to all other controls.\n            InitializeProtocols(m_availableEndpoints);\n\n            // check if the current settings match the defaults.\n            EndpointConfiguration defaultConfiguration = EndpointConfiguration.Create(configuration);\n\n            // discover endpoints in the background.\n            Interlocked.Increment(ref m_discoverCount);\n            ThreadPool.QueueUserWorkItem(new WaitCallback(OnDiscoverEndpoints), m_endpoint.Description.Server);\n\n            if (ShowDialog() != DialogResult.OK)\n            {\n                return null;\n            }\n\n            return m_endpoint;\n        }\n        #endregion\n\n        #region Private Methods\n\n        /// <summary>\n        /// Creates the string representation of each EndpointDescription - to be used in the Endpoint Description List\n        /// </summary>\n        private void BuildEndpointDescriptionStrings(EndpointDescriptionCollection endpoints)\n        {\n            lock (m_availableEndpointsDescriptions)\n            {\n                m_availableEndpointsDescriptions.Clear();\n\n                foreach (EndpointDescription endpoint in endpoints)\n                {\n                    m_availableEndpointsDescriptions.Add(new EndpointDescriptionString(endpoint));\n                }\n\n                InitializeEndpointList(m_availableEndpointsDescriptions);\n            }\n        }\n\n        /// <summary>\n        /// Returns true if the configuration is the same as the default.\n        /// </summary>\n        private bool SameAsDefaults(EndpointConfiguration defaultConfiguration, EndpointConfiguration currentConfiguration)\n        {\n            if (defaultConfiguration.ChannelLifetime != currentConfiguration.ChannelLifetime)\n            {\n                return false;\n            }\n\n            if (defaultConfiguration.MaxArrayLength != currentConfiguration.MaxArrayLength)\n            {\n                return false;\n            }\n\n            if (defaultConfiguration.MaxBufferSize != currentConfiguration.MaxBufferSize)\n            {\n                return false;\n            }\n\n            if (defaultConfiguration.MaxByteStringLength != currentConfiguration.MaxByteStringLength)\n            {\n                return false;\n            }\n\n            if (defaultConfiguration.MaxMessageSize != currentConfiguration.MaxMessageSize)\n            {\n                return false;\n            }\n\n            if (defaultConfiguration.MaxStringLength != currentConfiguration.MaxStringLength)\n            {\n                return false;\n            }\n\n            if (defaultConfiguration.OperationTimeout != currentConfiguration.OperationTimeout)\n            {\n                return false;\n            }\n\n            if (defaultConfiguration.SecurityTokenLifetime != currentConfiguration.SecurityTokenLifetime)\n            {\n                return false;\n            }\n\n            if (defaultConfiguration.UseBinaryEncoding != currentConfiguration.UseBinaryEncoding)\n            {\n                return false;\n            }\n\n            return true;\n        }\n\n        /// <summary>\n        /// Finds the best match for the current protocol and security selections.\n        /// </summary>\n        private EndpointDescription FindBestEndpointDescription(EndpointDescriptionCollection endpoints)\n        {\n            // filter by the current protocol.\n            Protocol currentProtocol = (Protocol)ProtocolCB.SelectedItem;\n\n            // filter by the current security mode.\n            MessageSecurityMode currentMode = MessageSecurityMode.None;\n\n            if (SecurityModeCB.SelectedIndex != -1)\n            {\n                currentMode = (MessageSecurityMode)SecurityModeCB.SelectedItem;\n            }\n\n            // filter by the current security policy.\n            string currentPolicy = (string)SecurityPolicyCB.SelectedItem;\n\n            // find all matching descriptions.      \n            EndpointDescriptionCollection matches = new EndpointDescriptionCollection();\n\n            if (endpoints != null)\n            {\n                foreach (EndpointDescription endpoint in endpoints)\n                {\n                    Uri url = Utils.ParseUri(endpoint.EndpointUrl);\n\n                    if (url == null)\n                    {\n                        continue;\n                    }\n\n                    if ((currentProtocol != null) && (!currentProtocol.Matches(url)))\n                    {\n                        continue;\n                    }\n\n                    if (currentMode != endpoint.SecurityMode)\n                    {\n                        continue;\n                    }\n\n                    if (currentPolicy != SecurityPolicies.GetDisplayName(endpoint.SecurityPolicyUri))\n                    {\n                        continue;\n                    }\n\n                    matches.Add(endpoint);\n                }\n            }\n\n            // check for no matches.\n            if (matches.Count == 0)\n            {\n                return null;\n            }\n\n            // check for single match.\n            if (matches.Count == 1)\n            {\n                return matches[0];\n            }\n\n            // choose highest priority.\n            EndpointDescription bestMatch = matches[0];\n\n            for (int ii = 1; ii < matches.Count; ii++)\n            {\n                if (bestMatch.SecurityLevel < matches[ii].SecurityLevel)\n                {\n                    bestMatch = matches[ii];\n                }\n            }\n\n            return bestMatch;\n        }\n\n        private class Protocol\n        {\n            public Uri Url;\n            public string Profile;\n\n            public Protocol(string url)\n            {\n                Url = Utils.ParseUri(url);\n            }\n\n            public Protocol(EndpointDescription url)\n            {\n                Url = null;\n\n                if (url != null)\n                {\n                    Url = Utils.ParseUri(url.EndpointUrl);\n\n                    if ((Url != null) && (Url.Scheme == Utils.UriSchemeHttp))\n                    {\n                        switch (url.TransportProfileUri)\n                        {\n                            case Profiles.HttpsXmlTransport:\n                            case Profiles.HttpsBinaryTransport:\n                            case Profiles.HttpsXmlOrBinaryTransport:\n                                {\n                                    Profile = \"REST\";\n                                    break;\n                                }\n\n                            case Profiles.WsHttpXmlTransport:\n                            case Profiles.WsHttpXmlOrBinaryTransport:\n                                {\n                                    Profile = \"WS-*\";\n                                    break;\n                                }\n                        }\n                    }\n                }\n            }\n\n            public bool Matches(Uri url)\n            {\n                if (url == null || Url == null)\n                {\n                    return false;\n                }\n\n                if (url.Scheme != Url.Scheme)\n                {\n                    return false;\n                }\n\n                if (url.DnsSafeHost != Url.DnsSafeHost)\n                {\n                    return false;\n                }\n\n                if (url.Port != Url.Port)\n                {\n                    return false;\n                }\n\n                return true;\n            }\n\n            public override string ToString()\n            {\n                if (Url == null)\n                {\n                    return String.Empty;\n                }\n\n                StringBuilder builder = new StringBuilder();\n                builder.Append(Url.Scheme);\n\n                if (!String.IsNullOrEmpty(Profile))\n                {\n                    builder.Append(\" \");\n                    builder.Append(Profile);\n                }\n\n                builder.Append(\" [\");\n                builder.Append(Url.DnsSafeHost);\n\n                if (Url.Port != -1)\n                {\n                    builder.Append(\":\");\n                    builder.Append(Url.Port);\n                }\n\n                builder.Append(\"]\");\n\n                return builder.ToString();\n            }\n        }\n\n        /// <summary>\n        /// Initializes the protocol dropdown.\n        /// </summary>\n        private void InitializeProtocols(EndpointDescriptionCollection endpoints)\n        {\n            // preserve the existing value.\n            Protocol currentProtocol = (Protocol)ProtocolCB.SelectedItem;\n\n            ProtocolCB.Items.Clear();\n\n            // set all available protocols.\n            if (m_showAllOptions)\n            {\n                ProtocolCB.Items.Add(new Protocol(\"http://localhost\"));\n                ProtocolCB.Items.Add(new Protocol(\"https://localhost\"));\n                ProtocolCB.Items.Add(new Protocol(\"opc.tcp://localhost\"));\n            }\n\n            // find all unique protocols.\n            else\n            {\n                if (endpoints != null)\n                {\n                    foreach (EndpointDescription endpoint in endpoints)\n                    {\n                        Uri url = Utils.ParseUri(endpoint.EndpointUrl);\n\n                        if (url != null)\n                        {\n                            bool found = false;\n\n                            for (int ii = 0; ii < ProtocolCB.Items.Count; ii++)\n                            {\n                                if (((Protocol)ProtocolCB.Items[ii]).Matches(url))\n                                {\n                                    found = true;\n                                    break;\n                                }\n                            }\n\n                            if (!found)\n                            {\n                                ProtocolCB.Items.Add(new Protocol(endpoint));\n                            }\n                        }\n                    }\n                }\n\n                // add at least one protocol.\n                if (ProtocolCB.Items.Count == 0)\n                {\n                    ProtocolCB.Items.Add(new Protocol(\"opc.tcp://localhost\"));\n                }\n            }\n\n            // set the current value.\n            int index = 0;\n\n            if (currentProtocol != null)\n            {\n                index = 0;\n                \n                for (int ii = 0; ii < ProtocolCB.Items.Count; ii++)\n                {\n                    if (((Protocol)ProtocolCB.Items[ii]).Matches(currentProtocol.Url))\n                    {\n                        index = ii;\n                        break;\n                    }\n                }\n            }\n\n            ProtocolCB.SelectedIndex = index;\n        }\n\n        /// <summary>\n        /// Initializes the security modes dropdown.\n        /// </summary>\n        private void InitializeSecurityModes(EndpointDescriptionCollection endpoints)\n        {\n            // filter by the current protocol.\n            Protocol currentProtocol = (Protocol)ProtocolCB.SelectedItem;\n\n            // preserve the existing value.\n            MessageSecurityMode currentMode = MessageSecurityMode.None;\n\n            if (SecurityModeCB.SelectedIndex != -1)\n            {\n                currentMode = (MessageSecurityMode)SecurityModeCB.SelectedItem;\n            }\n\n            SecurityModeCB.Items.Clear();\n\n            // set all available security modes.\n            if (m_showAllOptions)\n            {\n                SecurityModeCB.Items.Add(MessageSecurityMode.None);\n                SecurityModeCB.Items.Add(MessageSecurityMode.Sign);\n                SecurityModeCB.Items.Add(MessageSecurityMode.SignAndEncrypt);\n            }\n\n            // find all unique security modes.\n            else\n            {\n                if (endpoints != null)\n                {\n                    foreach (EndpointDescription endpoint in endpoints)\n                    {\n                        Uri url = Utils.ParseUri(endpoint.EndpointUrl);\n\n                        if ((url != null) && (currentProtocol != null))\n                        {\n                            if (!currentProtocol.Matches(url))\n                            {\n                                continue;\n                            }\n\n                            if (!SecurityModeCB.Items.Contains(endpoint.SecurityMode))\n                            {\n                                SecurityModeCB.Items.Add(endpoint.SecurityMode);\n                            }\n                        }\n                    }\n                }\n\n                // add at least one policy.\n                if (SecurityModeCB.Items.Count == 0)\n                {\n                    SecurityModeCB.Items.Add(MessageSecurityMode.None);\n                }\n            }\n\n            // set the current value.\n            int index = SecurityModeCB.Items.IndexOf(currentMode);\n\n            if (index == -1)\n            {\n                index = 0;\n            }\n\n            SecurityModeCB.SelectedIndex = index;\n        }\n\n        /// <summary>\n        /// Initializes the security policies dropdown.\n        /// </summary>\n        private void InitializeSecurityPolicies(EndpointDescriptionCollection endpoints)\n        {\n            // filter by the current protocol.\n            Protocol currentProtocol = (Protocol)ProtocolCB.SelectedItem;\n\n            // filter by the current security mode.\n            MessageSecurityMode currentMode = MessageSecurityMode.None;\n\n            if (SecurityModeCB.SelectedIndex != -1)\n            {\n                currentMode = (MessageSecurityMode)SecurityModeCB.SelectedItem;\n            }\n\n            // preserve the existing value.\n            string currentPolicy = (string)SecurityPolicyCB.SelectedItem;\n\n            SecurityPolicyCB.Items.Clear();\n\n            // set all available security policies.\n            if (m_showAllOptions)\n            {\n                SecurityPolicyCB.Items.Add(SecurityPolicies.GetDisplayName(SecurityPolicies.None));\n                SecurityPolicyCB.Items.Add(SecurityPolicies.GetDisplayName(SecurityPolicies.Basic128Rsa15));\n                SecurityPolicyCB.Items.Add(SecurityPolicies.GetDisplayName(SecurityPolicies.Basic256));\n            }\n\n            // find all unique security policies.    \n            else\n            {\n                if (endpoints != null)\n                {\n                    foreach (EndpointDescription endpoint in endpoints)\n                    {\n                        Uri url = Utils.ParseUri(endpoint.EndpointUrl);\n\n                        if ((url != null) && (currentProtocol != null))\n                        {\n                            if (!currentProtocol.Matches(url))\n                            {\n                                continue;\n                            }\n\n                            if (currentMode != endpoint.SecurityMode)\n                            {\n                                continue;\n                            }\n\n                            string policyName = SecurityPolicies.GetDisplayName(endpoint.SecurityPolicyUri);\n\n                            if (policyName != null)\n                            {\n                                int existingIndex = SecurityPolicyCB.FindStringExact(policyName);\n\n                                if (existingIndex == -1)\n                                {\n                                    SecurityPolicyCB.Items.Add(policyName);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // add at least one policy.\n            if (SecurityPolicyCB.Items.Count == 0)\n            {\n                SecurityPolicyCB.Items.Add(SecurityPolicies.GetDisplayName(SecurityPolicies.None));\n            }\n\n            // set the current value.\n            int index = 0;\n\n            if (!String.IsNullOrEmpty(currentPolicy))\n            {\n                index = SecurityPolicyCB.FindStringExact(currentPolicy);\n\n                if (index == -1)\n                {\n                    index = 0;\n                }\n            }\n\n            SecurityPolicyCB.SelectedIndex = index;\n        }\n\n        /// <summary>\n        /// Initializes the message encodings dropdown.\n        /// </summary>\n        private void InitializeEncodings(EndpointDescriptionCollection endpoints, EndpointDescription endpoint)\n        {\n            // preserve the existing value.\n            Encoding currentEncoding = Encoding.Default;\n\n            if (EncodingCB.SelectedIndex != -1)\n            {\n                currentEncoding = (Encoding)EncodingCB.SelectedItem;\n            }\n\n            EncodingCB.Items.Clear();\n\n            if (endpoint != null)\n            {\n                Protocol protocol = new Protocol(endpoint);\n                String securityPolicy = SecurityPolicies.GetDisplayName(endpoint.SecurityPolicyUri);\n\n                foreach (EndpointDescription endpointDescription in endpoints)\n                {\n                    if ((protocol.Matches(Utils.ParseUri(endpointDescription.EndpointUrl))) &&\n                        (endpoint.SecurityMode == endpointDescription.SecurityMode) &&\n                        (securityPolicy == SecurityPolicies.GetDisplayName(endpointDescription.SecurityPolicyUri)))\n                    {\n                        switch (endpointDescription.EncodingSupport)\n                        {\n                            case BinaryEncodingSupport.None:\n                                {\n                                    if (!EncodingCB.Items.Contains(Encoding.Xml))\n                                    {\n                                        EncodingCB.Items.Add(Encoding.Xml);\n                                    }\n                                    break;\n                                }\n\n                            case BinaryEncodingSupport.Required:\n                                {\n                                    if (!EncodingCB.Items.Contains(Encoding.Binary))\n                                    {\n                                        EncodingCB.Items.Add(Encoding.Binary);\n                                    }\n                                    break;\n                                }\n\n                            case BinaryEncodingSupport.Optional:\n                                {\n                                    if (!EncodingCB.Items.Contains(Encoding.Binary))\n                                    {\n                                        EncodingCB.Items.Add(Encoding.Binary);\n                                    }\n                                    if (!EncodingCB.Items.Contains(Encoding.Xml))\n                                    {\n                                        EncodingCB.Items.Add(Encoding.Xml);\n                                    }\n                                    break;\n                                }\n                        }\n                    }\n                }\n            }\n\n            // add at least one encoding.\n            if (EncodingCB.Items.Count == 0)\n            {\n                EncodingCB.Items.Add(Encoding.Default);\n            }\n\n            // set the current value.\n            int index = EncodingCB.Items.IndexOf(currentEncoding);\n\n            if (index == -1)\n            {\n                index = 0;\n            }\n\n            EncodingCB.SelectedIndex = index;\n        }\n\n        private class UserTokenItem\n        {\n            public UserTokenPolicy Policy;\n\n            public UserTokenItem(UserTokenPolicy policy)\n            {\n                Policy = policy;\n            }\n\n            public UserTokenItem(UserTokenType tokenType)\n            {\n                Policy = new UserTokenPolicy(tokenType);\n            }\n\n            public override string ToString()\n            {\n                if (Policy != null)\n                {\n                    if (String.IsNullOrEmpty(Policy.PolicyId))\n                    {\n                        return Policy.TokenType.ToString();\n                    }\n\n                    return Utils.Format(\"{0} [{1}]\", Policy.TokenType, Policy.PolicyId);\n                }\n\n                return UserTokenType.Anonymous.ToString();\n            }\n        }\n\n        /// <summary>\n        /// Initializes the endpoint list control.\n        /// </summary>\n        private void InitializeEndpointList(List<EndpointDescriptionString> endpoints)\n        {\n            EndpointListLB.Items.Clear();\n\n            foreach (EndpointDescriptionString endpointString in endpoints)\n            {\n                EndpointListLB.Items.Add(endpointString);\n            }\n        }\n\n        private void SelectCorrespondingEndpointFromList(EndpointDescription endpoint)\n        {\n            if (!m_selecting)\n            {\n                int index = -1;\n\n                // try to match endpoint description id\n                if (endpoint != null)\n                {\n                    for (int ii = 0; ii < EndpointListLB.Items.Count; ii++)\n                    {\n                        if (endpoint == ((EndpointDescriptionString)EndpointListLB.Items[ii]).EndpointDescription)\n                        {\n                            index = ii;\n                            break;\n                        }\n                    }\n                }\n\n                EndpointListLB.SelectedIndex = index;\n            }\n        }\n\n        /// <summary>\n        /// Attempts fetch the list of servers from the discovery server.\n        /// </summary>\n        private void OnDiscoverEndpoints(object state)\n        {\n            int discoverCount = m_discoverCount;\n\n            // do nothing if a valid list is not provided.\n            ApplicationDescription server = state as ApplicationDescription;\n\n            if (server == null)\n            {\n                return;\n\n            }\n\n            OnUpdateStatus(new Tuple<String, StatusType>(\"Attempting to read latest configuration options from server.\", StatusType.Ok));\n\n            String discoveryMessage = String.Empty;\n\n            // process each url.\n            foreach (string discoveryUrl in server.DiscoveryUrls)\n            {\n                Uri url = Utils.ParseUri(discoveryUrl);\n\n                if (url != null)\n                {\n                    if (DiscoverEndpoints(url, out discoveryMessage))\n                    {\n                        m_discoverySucceeded = true;\n                        m_discoveryUrl = url;\n                        OnUpdateStatus(new Tuple<String, StatusType>(\"Configuration options are up to date.\", StatusType.Ok));\n                        return;\n                    }\n\n                    // check if another discover operation has started.\n                    if (discoverCount != m_discoverCount)\n                    {\n                        return;\n                    }\n                }\n            }\n\n            OnUpdateEndpoints(m_availableEndpoints);\n            OnUpdateStatus(new Tuple<String, StatusType>(\"Warning: Configuration options may not be correct because the server is not available (\" + discoveryMessage + \").\", StatusType.Warning));\n        }\n\n        /// <summary>\n        /// Fetches the servers from the discovery server.\n        /// </summary>\n        private bool DiscoverEndpoints(Uri discoveryUrl, out String message)\n        {\n            // use a short timeout.\n            EndpointConfiguration configuration = EndpointConfiguration.Create(m_configuration);\n            configuration.OperationTimeout = m_discoveryTimeout;\n\n            DiscoveryClient client = DiscoveryClient.Create(\n                discoveryUrl,\n                BindingFactory.Create(m_configuration, m_configuration.CreateMessageContext()),\n                EndpointConfiguration.Create(m_configuration));\n\n            try\n            {\n                EndpointDescriptionCollection endpoints = client.GetEndpoints(null);\n                OnUpdateEndpoints(endpoints);\n                message = String.Empty;\n                return true;\n            }\n            catch (Exception e)\n            {\n                Utils.Trace(\"Could not fetch endpoints from url: {0}. Reason={1}\", discoveryUrl, e.Message);\n                message = e.Message;\n                return false;\n            }\n            finally\n            {\n                client.Close();\n            }\n        }\n\n        /// <summary>\n        /// Updates the status displayed in the dialog.\n        /// </summary>\n        private void OnUpdateStatus(object status)\n        {\n            if (this.InvokeRequired)\n            {\n                this.BeginInvoke(new WaitCallback(OnUpdateStatus), status);\n                return;\n            }\n\n            Tuple<String, StatusType> statusTuple = status as Tuple<String, StatusType>;\n            m_statusObject.SetStatus(StatusChannel.Discovery, statusTuple.Item1, statusTuple.Item2);\n            UpdateStatus();\n        }\n\n        /// <summary>\n        /// Updates the list of servers displayed in the control.\n        /// </summary>\n        private void OnUpdateEndpoints(object state)\n        {\n            if (this.InvokeRequired)\n            {\n                this.BeginInvoke(new WaitCallback(OnUpdateEndpoints), state);\n                return;\n            }\n\n            try\n            {\n                // get the updated descriptions.\n                EndpointDescriptionCollection endpoints = state as EndpointDescriptionCollection;\n\n                if (endpoints == null)\n                {\n                    m_showAllOptions = true;\n                    InitializeProtocols(m_availableEndpoints);\n                }\n\n                else\n                {\n                    m_showAllOptions = false;\n\n                    m_availableEndpoints = endpoints;\n                    BuildEndpointDescriptionStrings(m_availableEndpoints);\n\n                    if (endpoints.Count > 0)\n                    {\n                        m_currentDescription = endpoints[0];\n                    }\n\n                    // initializing the protocol will trigger an update to all other controls.\n                    InitializeProtocols(m_availableEndpoints);\n\n                    // select the best security mode.\n                    MessageSecurityMode bestMode = MessageSecurityMode.Invalid;\n\n                    foreach (MessageSecurityMode securityMode in SecurityModeCB.Items)\n                    {\n                        if (securityMode > bestMode)\n                        {\n                            bestMode = securityMode;\n                        }\n                    }\n\n                    SecurityModeCB.SelectedItem = bestMode;\n\n                    // select the best encoding.\n                    Encoding bestEncoding = Encoding.Default;\n\n                    foreach (Encoding encoding in EncodingCB.Items)\n                    {\n                        if (encoding > bestEncoding)\n                        {\n                            bestEncoding = encoding;\n                        }\n                    }\n\n                    EncodingCB.SelectedItem = bestEncoding;\n                }\n\n                if (m_endpoint != null)\n                {\n                    Uri url = m_endpoint.EndpointUrl;\n\n                    foreach (Protocol protocol in ProtocolCB.Items)\n                    {\n                        if (protocol.Matches(url))\n                        {\n                            ProtocolCB.SelectedItem = protocol;\n                            break;\n                        }\n                    }\n\n                    foreach (MessageSecurityMode securityMode in SecurityModeCB.Items)\n                    {\n                        if (securityMode == m_endpoint.Description.SecurityMode)\n                        {\n                            SecurityModeCB.SelectedItem = securityMode;\n                            break;\n                        }\n                    }\n\n                    foreach (string securityPolicy in SecurityPolicyCB.Items)\n                    {\n                        if (securityPolicy == m_endpoint.Description.SecurityPolicyUri)\n                        {\n                            SecurityPolicyCB.SelectedItem = securityPolicy;\n                            break;\n                        }\n                    }\n\n                    foreach (Encoding encoding in EncodingCB.Items)\n                    {\n                        if (encoding == Encoding.Binary && m_endpoint.Configuration.UseBinaryEncoding)\n                        {\n                            EncodingCB.SelectedItem = encoding;\n                            break;\n                        }\n\n                        if (encoding == Encoding.Xml && !m_endpoint.Configuration.UseBinaryEncoding)\n                        {\n                            EncodingCB.SelectedItem = encoding;\n                            break;\n                        }\n                    }\n                }\n            }\n            catch (Exception e)\n            {\n                Utils.Trace(e, \"Unexpected error updating endpoints.\");\n            }\n        }\n\n        /// <summary>\n        /// Creates the endpoint description from current selections.\n        /// </summary>\n        private EndpointDescription CreateDescriptionFromSelections()\n        {\n            Protocol currentProtocol = (Protocol)ProtocolCB.SelectedItem;\n\n            EndpointDescription endpoint = null;\n\n            for (int ii = 0; ii < m_availableEndpoints.Count; ii++)\n            {\n                Uri url = Utils.ParseUri(m_availableEndpoints[ii].EndpointUrl);\n\n                if (url == null)\n                {\n                    continue;\n                }\n\n                if (endpoint == null)\n                {\n                    endpoint = m_availableEndpoints[ii];\n                }\n\n                if (currentProtocol.Matches(url))\n                {\n                    endpoint = m_availableEndpoints[ii];\n                    break;\n                }\n            }\n\n            UriBuilder builder = null;\n            string scheme = Utils.UriSchemeOpcTcp;\n            \n            if (currentProtocol != null && currentProtocol.Url != null)\n            {\n                scheme = currentProtocol.Url.Scheme;\n            }\n\n            if (endpoint == null)\n            {\n                builder = new UriBuilder();\n                builder.Host = \"localhost\";\n\n                if (scheme == Utils.UriSchemeOpcTcp)\n                {\n                    builder.Port = Utils.UaTcpDefaultPort;\n                }\n            }\n            else\n            {\n                builder = new UriBuilder(endpoint.EndpointUrl);\n            }\n\n            builder.Scheme = scheme;\n\n            endpoint = new EndpointDescription();\n            endpoint.EndpointUrl = builder.ToString();\n            endpoint.SecurityMode = (MessageSecurityMode)SecurityModeCB.SelectedItem;\n            endpoint.SecurityPolicyUri = SecurityPolicies.GetUri((string)SecurityPolicyCB.SelectedItem);\n            endpoint.Server.ApplicationName = endpoint.EndpointUrl;\n            endpoint.Server.ApplicationType = ApplicationType.Server;\n            endpoint.Server.ApplicationUri = endpoint.EndpointUrl;\n\n            return endpoint;\n        }\n        #endregion\n\n        #region Event Handlers\n        private void OkBTN_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                // check that discover has completed.\n                if (!m_discoverySucceeded)\n                {\n                    DialogResult result = MessageBox.Show(\n                        \"Endpoint information may be out of date because the discovery process has not completed. Continue anyways?\",\n                        this.Text,\n                        MessageBoxButtons.YesNo,\n                        MessageBoxIcon.Warning);\n\n                    if (result != DialogResult.Yes)\n                    {\n                        return;\n                    }\n                }\n\n                EndpointConfiguration configuration = m_endpointConfiguration;\n\n                if (configuration == null)\n                {\n                    configuration = EndpointConfiguration.Create(m_configuration);\n                }\n\n                if (m_currentDescription == null)\n                {\n                    m_currentDescription = CreateDescriptionFromSelections();\n                }\n\n                // the discovery endpoint should always be on the same machine as the server.\n                // if there is a mismatch it is likely because the server has multiple addresses\n                // and was not configured to return the current address to the client.\n                // The code automatically updates the domain in the url. \n                Uri endpointUrl = Utils.ParseUri(m_currentDescription.EndpointUrl);\n\n                if (m_discoverySucceeded)\n                {\n                    if (!Utils.AreDomainsEqual(endpointUrl, m_discoveryUrl))\n                    {\n                        UriBuilder url = new UriBuilder(endpointUrl);\n\n                        url.Host = m_discoveryUrl.DnsSafeHost;\n\n                        if (url.Scheme == m_discoveryUrl.Scheme)\n                        {\n                            url.Port = m_discoveryUrl.Port;\n                        }\n\n                        endpointUrl = url.Uri;\n\n                        m_currentDescription.EndpointUrl = endpointUrl.ToString();\n                    }\n                }\n\n                // set the encoding.\n                Encoding encoding = (Encoding)EncodingCB.SelectedItem;\n                configuration.UseBinaryEncoding = encoding != Encoding.Xml;\n\n                if (m_endpoint == null)\n                {\n                    m_endpoint = new ConfiguredEndpoint(null, m_currentDescription, configuration);\n                }\n                else\n                {\n                    m_endpoint.Update(m_currentDescription);\n                    m_endpoint.Update(configuration);\n                }\n\n                DialogResult = DialogResult.OK;\n            }\n            catch (Exception exception)\n            {\n                GuiUtils.HandleException(this.Text, MethodBase.GetCurrentMethod(), exception);\n            }\n        }\n\n        private void ProtocolCB_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            try\n            {\n                InitializeSecurityModes(m_availableEndpoints);\n\n                if (!m_updating)\n                {\n                    try\n                    {\n                        m_updating = true;\n\n                        // update current description.\n                        m_currentDescription = FindBestEndpointDescription(m_availableEndpoints);\n\n                        InitializeEncodings(m_availableEndpoints, m_currentDescription);\n                        SelectCorrespondingEndpointFromList(m_currentDescription);\n                    }\n                    finally\n                    {\n                        m_updating = false;\n                    }\n                }\n\n                if (ProtocolCB.SelectedItem != null)\n                {\n                    if (((Protocol)ProtocolCB.SelectedItem).Url.DnsSafeHost != m_endpoint.EndpointUrl.DnsSafeHost)\n                    {\n                        m_statusObject.SetStatus(StatusChannel.SelectedProtocol, \"Warning: Selected Endpoint hostname is different than initial hostname.\", StatusType.Warning);\n                    }\n                    else\n                    {\n                        m_statusObject.ClearStatus(StatusChannel.SelectedProtocol);\n                    }\n                }\n                else\n                {\n                    m_statusObject.SetStatus(StatusChannel.SelectedProtocol, \"Error: Selected Protocol is invalid.\", StatusType.Warning);\n                }\n\n                UpdateStatus();\n            }\n            catch (Exception exception)\n            {\n                GuiUtils.HandleException(this.Text, MethodBase.GetCurrentMethod(), exception);\n            }\n        }\n\n        private void SecurityModeCB_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            try\n            {\n                InitializeSecurityPolicies(m_availableEndpoints);\n\n                if (!m_updating)\n                {\n                    try\n                    {\n                        m_updating = true;\n\n                        // update current description.\n                        m_currentDescription = FindBestEndpointDescription(m_availableEndpoints);\n\n                        InitializeEncodings(m_availableEndpoints, m_currentDescription);\n                        SelectCorrespondingEndpointFromList(m_currentDescription);\n                    }\n                    finally\n                    {\n                        m_updating = false;\n                    }\n                }\n\n                if (SecurityModeCB.SelectedItem != null)\n                {\n                    if ((((MessageSecurityMode)SecurityModeCB.SelectedItem) == MessageSecurityMode.None) &&\n                        (ProtocolCB.SelectedItem != null) && (((Protocol)ProtocolCB.SelectedItem).ToString().IndexOf(\"https\") != 0))\n                    {\n                        m_statusObject.SetStatus(StatusChannel.SelectedSecurityMode, \"Warning: Selected Endpoint has no security.\", StatusType.Warning);\n                    }\n                    else if (((MessageSecurityMode)SecurityModeCB.SelectedItem) == MessageSecurityMode.Invalid)\n                    {\n                        m_statusObject.SetStatus(StatusChannel.SelectedSecurityMode, \"Error: Selected Endpoint Security Mode is unsupported.\", StatusType.Warning);\n                    }\n                    else\n                    {\n                        m_statusObject.ClearStatus(StatusChannel.SelectedSecurityMode);\n                    }\n                }\n                else\n                {\n                    m_statusObject.SetStatus(StatusChannel.SelectedSecurityMode, \"Error: Selected Endpoint Security Mode is invalid.\", StatusType.Warning);\n                }\n\n                UpdateStatus();\n            }\n            catch (Exception exception)\n            {\n                GuiUtils.HandleException(this.Text, MethodBase.GetCurrentMethod(), exception);\n            }\n        }\n\n        private void SecurityPolicyCB_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            try\n            {\n                if (!m_updating)\n                {\n                    try\n                    {\n                        m_updating = true;\n\n                        // update current description.\n                        m_currentDescription = FindBestEndpointDescription(m_availableEndpoints);\n\n                        InitializeEncodings(m_availableEndpoints, m_currentDescription);\n                        SelectCorrespondingEndpointFromList(m_currentDescription); \n                    }\n                    finally\n                    {\n                        m_updating = false;\n                    }\n                }\n\n                if (SecurityPolicyCB.SelectedItem != null)\n                {\n                    m_statusObject.ClearStatus(StatusChannel.SelectedSecurityPolicy);\n                }\n                else\n                {\n                    m_statusObject.SetStatus(StatusChannel.SelectedSecurityPolicy, \"Error: Selected Security Policy is invalid.\", StatusType.Warning);\n                }\n\n                UpdateStatus();\n\n            }\n            catch (Exception exception)\n            {\n                GuiUtils.HandleException(this.Text, MethodBase.GetCurrentMethod(), exception);\n            }\n        }\n\n        private void EndpointListLB_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            if (!m_updating)\n            {\n                try\n                {\n                    m_updating = true;\n                    m_selecting = true;\n\n                    int selectedIndex = EndpointListLB.SelectedIndex;\n\n                    if (selectedIndex != -1)\n                    {\n                        EndpointDescriptionString selection = (EndpointDescriptionString)EndpointListLB.SelectedItem;\n\n                        int index = -1;\n\n                        for (int i = 0; i < ProtocolCB.Items.Count; ++i)\n                        {\n                            if (((Protocol)ProtocolCB.Items[i]).ToString() == selection.Protocol.ToString())\n                            {\n                                index = i;\n                                break;\n                            }\n                        }\n\n                        ProtocolCB.SelectedIndex = index;\n\n                        InitializeSecurityModes(m_availableEndpoints);\n\n                        m_currentDescription = m_availableEndpoints[selectedIndex];\n\n                        InitializeEncodings(m_availableEndpoints, m_currentDescription);\n\n                        index = -1;\n\n                        for (int i = 0; i < SecurityModeCB.Items.Count; ++i)\n                        {\n                            if ((MessageSecurityMode)SecurityModeCB.Items[i] == selection.MessageSecurityMode)\n                            {\n                                index = i;\n                                break;\n                            }\n                        }\n\n                        SecurityModeCB.SelectedIndex = index;\n\n                        index = -1;\n\n                        for (int i = 0; i < SecurityPolicyCB.Items.Count; ++i)\n                        {\n                            if ((string)SecurityPolicyCB.Items[i] == selection.CurrentPolicy)\n                            {\n                                index = i;\n                                break;\n                            }\n                        }\n\n                        SecurityPolicyCB.SelectedIndex = index;\n\n                        index = -1;\n\n                        for (int i = 0; i < EncodingCB.Items.Count; ++i)\n                        {\n                            if ((Encoding)EncodingCB.Items[i] == selection.Encoding)\n                            {\n                                index = i;\n                                break;\n                            }\n                        }\n\n                        EncodingCB.SelectedIndex = index;\n                    }\n                }\n                catch (Exception exception)\n                {\n                    GuiUtils.HandleException(this.Text, MethodBase.GetCurrentMethod(), exception);\n                }\n                finally\n                {\n                    m_updating = false;\n                    m_selecting = false;\n                }\n            }\n\n            UpdateAdvancedEndpointInformation();\n        }\n\n        /// <summary>\n        /// Updates advanced endpoint information.\n        /// </summary>\n        private void UpdateAdvancedEndpointInformation()\n        {\n            try\n            {\n                ApplicationNameTB.Text = String.Empty;\n                ApplicationTypeTB.Text = String.Empty;\n                ApplicationUriTB.Text = String.Empty;\n                ProductUriTB.Text = String.Empty;\n                GatewayServerUriTB.Text = String.Empty;\n                DiscoveryProfileUriTB.Text = String.Empty;\n                TransportProfileUriTB.Text = String.Empty;\n                UserSecurityPoliciesTB.Text = String.Empty;\n                SecurityLevelTB.Text = String.Empty;\n\n                if (m_currentDescription != null)\n                {\n                    UserSecurityPoliciesTB.Text = \"Anonymous\";\n\n                    if (m_currentDescription.Server != null)\n                    {\n                        if (m_currentDescription.Server.ApplicationName != null)\n                        {\n                            ApplicationNameTB.Text = m_currentDescription.Server.ApplicationName.ToString();\n                        }\n\n                        ApplicationTypeTB.Text = m_currentDescription.Server.ApplicationType.ToString();\n                        ApplicationUriTB.Text = m_currentDescription.Server.ApplicationUri;\n                        ProductUriTB.Text = m_currentDescription.Server.ProductUri;\n                        GatewayServerUriTB.Text = m_currentDescription.Server.GatewayServerUri;\n                        DiscoveryProfileUriTB.Text = m_currentDescription.Server.DiscoveryProfileUri;\n                    }\n\n                    SecurityLevelTB.Text = m_currentDescription.SecurityLevel.ToString();\n                    TransportProfileUriTB.Text = m_currentDescription.TransportProfileUri;\n\n                    if (m_currentDescription.UserIdentityTokens.Count > 0)\n                    {\n                        UserSecurityPoliciesTB.Text = String.Join(\", \", m_currentDescription.UserIdentityTokens);\n                    }\n                }\n\n                UpdateStatus();\n            }\n            catch (Exception exception)\n            {\n                GuiUtils.HandleException(this.Text, MethodBase.GetCurrentMethod(), exception);\n            }\n        }\n\n        /// <summary>\n        /// Updates the StatusTB text and color.\n        /// Also enables/disables the OK button, should any error occurr (unsupported stuff etc).\n        /// </summary>\n        private void UpdateStatus()\n        {\n            try\n            {\n                if ((m_currentDescription != null) && (m_currentDescription.Server != null))\n                {\n                    m_statusObject.ClearStatus(StatusChannel.Server);\n                    \n                    if (m_currentDescription.Server.ApplicationType == ApplicationType.Client)\n                    {\n                        m_statusObject.SetStatus(StatusChannel.ApplicationType, \"Warning: Application type is unsupported.\", StatusType.Warning);\n                    }\n                    else\n                    {\n                        m_statusObject.ClearStatus(StatusChannel.ApplicationType);\n                    }\n\n                    if (string.IsNullOrEmpty(m_currentDescription.Server.ApplicationUri))\n                    {\n                        m_statusObject.SetStatus(StatusChannel.ApplicationUri, \"Warning: Application URI is missing.\", StatusType.Warning);\n                    }\n                    else\n                    {\n                        m_statusObject.ClearStatus(StatusChannel.ApplicationUri);\n                    }\n\n                    if (string.IsNullOrEmpty(m_currentDescription.TransportProfileUri))\n                    {\n                        m_statusObject.SetStatus(StatusChannel.TransportProfileUri, \"Warning: Transport Profile URI is missing.\", StatusType.Warning);\n                    }\n                    else if (Utils.ParseUri(m_currentDescription.TransportProfileUri) == null)\n                    {\n                        m_statusObject.SetStatus(StatusChannel.TransportProfileUri, \"Warning: Transport Profile URI is invalid.\", StatusType.Warning);\n                    }\n\n                    if ((m_currentDescription.Server.DiscoveryUrls == null) || (m_currentDescription.Server.DiscoveryUrls.Count == 0))\n                    {\n                        m_statusObject.SetStatus(StatusChannel.DiscoveryURLs, \"Warning: Discovery URLs are missing.\", StatusType.Warning);\n                    }\n                    else\n                    {\n                        m_statusObject.ClearStatus(StatusChannel.DiscoveryURLs);\n                    }\n\n                    if ((m_currentDescription.ServerCertificate != null) && (m_currentDescription.ServerCertificate.Length > 0))\n                    {\n                        X509Certificate2 serverCertificate = new X509Certificate2(m_currentDescription.ServerCertificate);\n                        String certificateApplicationUri = Utils.GetApplicationUriFromCertficate(serverCertificate);\n\n                        if (certificateApplicationUri != m_currentDescription.Server.ApplicationUri)\n                        {\n                            m_statusObject.SetStatus(StatusChannel.DifferentCertificate, \"Warning: Application URI host different than the certificate host.\", StatusType.Warning);\n                        }\n                        else\n                        {\n                            m_statusObject.ClearStatus(StatusChannel.DifferentCertificate);\n                        }\n                    }\n\n                    if (string.IsNullOrEmpty(m_currentDescription.SecurityPolicyUri))\n                    {\n                        m_statusObject.SetStatus(StatusChannel.SecurityPolicyUri, \"Error: Security Policy URI is missing.\", StatusType.Warning);\n                    }\n                    else if (string.IsNullOrEmpty(SecurityPolicies.GetDisplayName(m_currentDescription.SecurityPolicyUri)))\n                    {\n                        m_statusObject.SetStatus(StatusChannel.SecurityPolicyUri, \"Error: Security Policy URI is invalid.\", StatusType.Warning);\n                    }\n                    else\n                    {\n                        m_statusObject.ClearStatus(StatusChannel.SecurityPolicyUri);\n                    }\n                }\n                else\n                {\n                    m_statusObject.SetStatus(StatusChannel.Server, \"Warning: Server endpoint is invalid.\", StatusType.Warning);\n                }\n\n\n                OkBTN.Enabled = true;\n                StatusTB.ForeColor = SystemColors.WindowText;\n                StatusTB.Text = m_statusObject.StatusString;\n\n                if (m_statusObject.StatusType == StatusType.Error)\n                {\n                    OkBTN.Enabled = false;\n                    StatusTB.ForeColor = Color.Red;\n                }\n                else if (m_statusObject.StatusType == StatusType.Warning)\n                {\n                    StatusTB.ForeColor = Color.DarkOrange;\n                }\n\n                // hack for WinForms to update color\n                StatusTB.BackColor = StatusTB.BackColor;\n\n            }\n            catch (Exception exception)\n            {\n                GuiUtils.HandleException(this.Text, MethodBase.GetCurrentMethod(), exception);\n            }\n        }\n\n        #endregion\n    }\n}\n", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<s1:SampleConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns:s1=\"http://opcfoundation.org/UA/Sample/Configuration.xsd\"\n  xmlns:s2=\"http://opcfoundation.org/UA/SDK/COM/Configuration.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <!-- A human readable but not necessarily unique name for the application instance -->\n  <ApplicationName>UA Sample Client</ApplicationName>\n  \n  <!-- A globally unique identifier for the application instance.\n       This is overridden with the value contained in the application certificate. -->\n  <ApplicationUri>urn:localhost:OPCFoundation:SampleClient</ApplicationUri>\n  \n  <!-- A globally unique URI for the product (usually assigned by the product vendor) -->\n  <ProductUri>http://opcfoundation.org/UA/SampleClient/</ProductUri>\n    \n  <!-- Indicates the type of application (Client, Server or ClientServer). -->\n  <ApplicationType>ClientAndServer_2</ApplicationType>\n  \n  <!-- Specifies security related configuration information -->\n  <SecurityConfiguration>\n    \n    <!-- The location of the application instance certificate in the Windows certificate store -->\n    <ApplicationCertificate>  \n      \n      <!-- The type of store. -->\n      <StoreType>Directory</StoreType>\n      \n      <!-- The location of the store. \n           Windows store must start with LocalMachine, CurrentUser or CurrentService\n           The name of the store is appended.\n           Note that the names used in code are difference from what appears in the control panel.\n           e.g. My == \"Personal\", Root == \"Trusted Root Certification Authorities\" -->\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      \n      <!-- The subject for the certificate \n           Note that subject names are complex structures. The text that appears here is the CommonName component.\n           A complete distinguished would be something like: 'CN=UA Sample Client, DC=MACHINENAME'\n           The first certificate found is used if multiple certificates with the same CommonName exist. \n           The Thumbprint should be specified if the CommonName does not uniquely identify a certificate. -->\n      <SubjectName>UA Sample Client</SubjectName>\n\n      <!-- The SHA1 thumbprint for the certificate.\n           The thumbprint uniquely identifies a certificate.\n           It should be specified in this file, however, the samples rely on quick and \n           dirty scripts to create new certificate on each machine. A commerical application \n           would generate the initial certificate itself and update the thumbprint accordingly -->\n      <!--<Thumbprint>3a35fb798fc6dee8a7e7e4652b0e28fc14c6ee0f</Thumbprint>-->\n      \n    </ApplicationCertificate>\n\n    <!-- The list of certification authorities. \n    \n         Typical web browsing applications trust any certificate issued by a CA in the \n         \"Trusted Root Certification Authorities\" certificate store. However, this approach is \n         not appropriate for UA because Adminstrators have no control over the CAs that get\n         placed in that Root store to facilitate web browsing. This means Adminstrators must\n         specify a different store that is used only for UA related CAs and/or they must explicitly\n         specify the certificate for each trusted certification authority. -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n    \n    <!-- The list of trusted certificates. \n    \n         Some UA applications will use self-signed certificates (certificates without a CA)\n         which means that every application which communicates with it must be configured to \n         trust it.\n         \n         Adminstrators may designate a certificate store that contains trusted UA application \n         instance certificates (this store should not be the same as the store used for CAs \n         certificates). Alternately, Administrators may enter the certificates explicitly in\n         this list.\n         \n         Note that entries in this list may either reference a certificate in the store or\n         may contained the entire certificate encoded as base64 data.\n         -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n    \n    <!-- Applications exchange Nonces during the CreateSession. This value specifies the length. Must be >= 32 -->\n    <NonceLength>32</NonceLength>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  \n</SecurityConfiguration>\n  \n  <!-- Maps different transports onto a .NET implementation of a WCF Binding\n  \n       WCF bindings are very complex and have many parameters that can be tweeked. To ensure\n       interoperability the SDK has defined 3 standard bindings which can be selected with this\n       element. Developers may define their own Bindings as well provided the inhierit from the \n       Opc.Ua.Binding.BaseBinding type and implement the same constructor as the built-in binding\n       provide.\n       \n       Note protocols other than HTTP or UA-TCP are not considered to be interoperable -->\n  <TransportConfigurations>\n    <!-- This binding wraps the ANSI C implementation of UA-TCP instead of using the C# implementation. -->\n    <!--\n    <TransportConfiguration>\n      <UriScheme>opc.tcp</UriScheme>\n      <TypeName>Opc.Ua.NativeStack.NativeStackBinding,Opc.Ua.NativeStackWrapper</TypeName>\n    </TransportConfiguration>\n    -->\n\n    <!-- This binding uses the WCF binary encoded XML over TCP -->\n    <TransportConfiguration>\n      <UriScheme>net.tcp</UriScheme>\n      <TypeName>Opc.Ua.Bindings.UaSoapXmlOverTcpBinding</TypeName>\n    </TransportConfiguration>\n    <!--\n    -->\n\n    <!-- This binding uses the WCF binary encoded XML over PIPE -->\n    <TransportConfiguration>\n      <UriScheme>net.pipe</UriScheme>\n      <TypeName>Opc.Ua.Bindings.UaSoapXmlOverPipeBinding</TypeName>\n    </TransportConfiguration>\n    <!--\n    -->\n    \n  </TransportConfigurations>\n  \n  <!-- Specifies quotas used to by the transport layer -->\n  <TransportQuotas>\n    \n    <!-- The default timeout in milliseconds for operations (used by clients) -->\n    <OperationTimeout>120000</OperationTimeout>\n    \n    <!-- The maximum length for a string value in any message -->\n    <MaxStringLength>1048576</MaxStringLength>\n    \n    <!-- The maximum length for a byte string value in any message -->\n    <MaxByteStringLength>4194304</MaxByteStringLength>\n    \n    <!-- The maximum length for any array in a message. \n         Note that some protocols do not distinguish between bytes and arrays. \n         In these cases the binding will choose the larger of \n         MaxByteStringLength or MaxArrayLength-->\n    <MaxArrayLength>65535</MaxArrayLength>\n    \n    <!-- The maximum size of any message -->\n    <MaxMessageSize>4194304</MaxMessageSize>\n    \n    <!-- The maximum buffer size \n         This value controls how big a block of memory the transport layer allocates.\n         Setting this value to a large value will reduce performance and use a lot of RAM -->\n    <MaxBufferSize>65535</MaxBufferSize>\n    \n    <!-- The lifetime of a SecureChannel in milliseconds.\n         This specifies how long the server will keep a broken channel around while waiting \n         for a client to reconnect.\n         Not used by HTTP or .NET TCP bindings -->\n    <ChannelLifetime>300000</ChannelLifetime>\n    \n    <!-- The lifetime of a SecurityToken in milliseconds.\n         This specifies how long a security token can be used without renewal. -->\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n    \n  </TransportQuotas>\n  \n  <!-- This element only needs to be specified for Server or ClientServer applications -->\n  <ServerConfiguration>\n    \n    <!-- The set of addresses. One for each supported protocol.    \n         Note that \"localhost\" is replace with the hostname when the configuration is loaded.\n    \n         Additional URLs are created by appending strings to the base address.\n         For example, a URL used for an endpoint which uses the Basic256 security policy would look like this:\n         http://localhost:61211/UA/SampleClient/Basic256 -->\n    <BaseAddresses>\n      <ua:String>opc.tcp://localhost:61210/UA/SampleClient</ua:String>\n      <ua:String>http://localhost:61211/UA/SampleClient</ua:String>\n      <ua:String>https://localhost:61212/UA/SampleClient/</ua:String>\n      <!--<ua:String>net.tcp://localhost:61214/UA/SampleClient</ua:String>\n      <ua:String>net.pipe://localhost/UA/SampleClient</ua:String>-->\n    </BaseAddresses>\n\n    <!-- \n    These list the alternate addresses (via firewalls, multiple NICs etc.) that can be\n    used to communicate with the server. The URL used by the client when calling\n    FindServers/GetEndpoints or CreateSession will be used to filter the list of\n    endpoints returned by checking for alternate base addresses that have a domain\n    that matches the domain in the url provided by the client.\n    \n    Note that any additional domains should be listed in the server's certificate. If they\n    are left out the client make refuse to connect because it has no way to know if the \n    alternate domain was authorized by the server administrator.\n    -->\n    \n    <!--\n    <AlternateBaseAddresses>\n      <ua:String>http://mycompany.com:40000/UA/SampleClient</ua:String>\n    </AlternateBaseAddresses>\n    -->\n    \n    <!-- The security policies supported by the server.\n         \n         The SDK combines these with the base address to create as many EndpointDescriptions as required.\n         Protocols such as HTTP only allow one SecurityPolicy per endpoint to addition URLs are constructed\n         using the SecurityPolicy and SecurityMode.\n         \n         The first policy in the list is assigned to base address. -->\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>      \n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n\n      <!--\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>      \n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n-->\n\n    </SecurityPolicies>\n\n    <MinRequestThreadCount>5</MinRequestThreadCount>\n    <MaxRequestThreadCount>100</MaxRequestThreadCount>\n    <MaxQueuedRequestCount>2000</MaxQueuedRequestCount>\n    \n    <!-- The SDK expects the server to support the same set of user tokens for every endpoint. -->\n    <UserTokenPolicies>\n      <!-- Allows anonymous users -->\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n        <ua:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</ua:SecurityPolicyUri>\n      </ua:UserTokenPolicy>\n      \n      <!-- Allows username/password -->\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>          \n        <!-- passwords must be encrypted - this specifies what algorithm to use -->\n        <ua:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</ua:SecurityPolicyUri>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n        <!-- certificate possession must be proven with a digital signature - this specifies what algorithm to use -->\n        <ua:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</ua:SecurityPolicyUri>\n      </ua:UserTokenPolicy>\n      <!--\n      Issued tokens are any type of WS-Security compliant token\n      This is a URN assigned by OASIS to SAML Security Tokens\n      tokens must be encrypted - this specifies what algorithm to use\n      -->\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n        <ua:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</ua:SecurityPolicyUri>\n      </ua:UserTokenPolicy>\n    </UserTokenPolicies>\n    \n    <!-- Whether the server updates its diagnostic information -->\n    <DiagnosticsEnabled>true</DiagnosticsEnabled>\n    \n    <!-- The maximum number of simultaneous sessions -->\n    <MaxSessionCount>100</MaxSessionCount>\n    \n    <!-- The minimum session lifetime permitted by the server -->\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    \n    <!-- The maximum session lifetime permitted by the server -->\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    \n    <!-- The maximum number of browse continuation points per session -->\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    \n    <!-- The maximum number of query continuation points per session -->\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    \n    <!-- The maximum number of history continuation points per session -->\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    \n    <!-- The maximum age of an incoming request -->\n    <MaxRequestAge>600000</MaxRequestAge>\n    \n    <!-- The minimum allowed publishing interval (in milliseconds) -->\n    <MinPublishingInterval>100</MinPublishingInterval>\n\n    <!-- The maximum allowed publishing interval (in milliseconds) -->\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    \n    <!-- The publishing resolution. Requested publishing intervals are rounded up to the next multiple of this value.-->\n    <PublishingResolution>100</PublishingResolution>\n    \n    <!-- The maximum subscription lifetime.\n         This controls the maximum keep alive count. Smaller publishing intervals will allow large keep alives\n         provided the maximum subscription lifetime is not exceeded -->\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n\n\t  <!-- The maximum number of sent messages kept in the queue for each subscription-->\n\t  <MaxMessageQueueSize>100</MaxMessageQueueSize>\n\n\t  <!-- The maximum number of notifications kept in the queue for each monitored item-->\n\t  <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n\n\t  <!-- The maximum number of notifications in a single publish response -->\n\t  <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n\n\t  <!-- The minimum sampling rate for rarely changing metadata information (such as the server status) -->\n\t  <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n\n\t  <!-- The set of supported sampling rates -->\n    <AvailableSamplingRates />\n\n\t  <!-- Servers must create a secure channel with the DiscoveryServer \n         This element specifies the connection information.\n         Note that server will use the discovery endpoint to update this information -->\n\n\t  <RegistrationEndpoint>\n\t\t  <ua:EndpointUrl>opc.tcp://localhost:4840</ua:EndpointUrl>\n\t\t  <ua:Server>\n        <ua:ApplicationUri>opc.tcp://localhost:4840</ua:ApplicationUri>\n\t\t\t  <ua:ApplicationType>DiscoveryServer_3</ua:ApplicationType>\n\t\t\t  <ua:DiscoveryUrls>\n\t\t\t\t  <ua:String>opc.tcp://localhost:4840</ua:String>\n\t\t\t  </ua:DiscoveryUrls>\n\t\t  </ua:Server>\n\t\t  <ua:SecurityMode>SignAndEncrypt_3</ua:SecurityMode>\n      <ua:SecurityPolicyUri />\n\t\t  <ua:UserIdentityTokens />\n\t\t  <ua:SecurityLevel>1</ua:SecurityLevel>\n\t  </RegistrationEndpoint>\n\n\t  <!-- The maximum interval between registration. 0 disables periodic registration -->\n\t  <MaxRegistrationInterval>0</MaxRegistrationInterval>\n\n\t  <!-- The file used to save nodes added to the CoreNodeManager. If missing the CoreNodeManger will discard nodes when it stops. -->\n\t  <NodeManagerSaveFile>Opc.Ua.Server.nodes.xml</NodeManagerSaveFile>\n\n\t  <!-- The minimum subscription lifetime.\n\t\tThis ensures subscriptions are not set to expire too quickly. The revised lifetime count\n\t\tand keep alive count are calculated with this value. -->\n\t  <MinSubscriptionLifetime>10000</MinSubscriptionLifetime>\n\n  </ServerConfiguration>\n  \n  <!-- This element is only required for Client and ClientServer applications -->\n  <ClientConfiguration>\n    <!-- The default timeout for new sessions -->\n    <DefaultSessionTimeout>600000</DefaultSessionTimeout>\n    \n    <!-- The well-known URLs for the local discovery servers\n         URLs are tested in the order they appear in this list. -->\n    <WellKnownDiscoveryUrls>\n      <ua:String>opc.tcp://{0}:4840/UADiscovery</ua:String>\n      <ua:String>http://{0}:52601/UADiscovery</ua:String>\n      <ua:String>http://{0}/UADiscovery/Default.svc</ua:String>\n    </WellKnownDiscoveryUrls>\n    \n    <!-- EndpointDescriptions for system wide discovery servers -->\n\t<DiscoveryServers></DiscoveryServers>\n    \n    <!-- The file used to save the EndpointDescriptions for servers known to the Client -->\n    <EndpointCacheFilePath>Opc.Ua.SampleClient.Endpoints.xml</EndpointCacheFilePath>\n  \n\t<!-- The minimum subscription lifetime.\n\tThis ensures subscriptions are not set to expire too quickly. The requesed lifetime count\n\tand keep alive count are calculated using this value and the request publishing interval -->\n\t<MinSubscriptionLifetime>10000</MinSubscriptionLifetime>\n\t  \n  </ClientConfiguration>\n  \n  <Extensions>\n    \n    <ua:XmlElement>\n      <MemoryBufferConfiguration xmlns=\"http://samples.org/UA/memorybuffer\">\n        <Buffers>\n          <MemoryBufferInstance>\n            <Name>UInt32</Name>\n            <TagCount>100</TagCount>\n            <DataType>UInt32</DataType>\n          </MemoryBufferInstance>\n          <MemoryBufferInstance>\n            <Name>Double</Name>\n            <TagCount>100</TagCount>\n            <DataType>Double</DataType>\n          </MemoryBufferInstance>\n        </Buffers>\n      </MemoryBufferConfiguration>\n    </ua:XmlElement>\n\n    <!--\n    <ua:XmlElement>\n      <ListOfWrapperConfiguration xmlns=\"http://opcfoundation.org/UA/SDK/COM/Configuration.xsd\">\n        <WrapperConfiguration xsi:type=\"AeWrapperConfiguration\">\n          <NamespaceUri>opc.com://localhost/OPCSample.OPCEventServer</NamespaceUri>\n          <BrowseName>COM AE Server 1</BrowseName>\n          <Url>opc.com://localhost/OPCSample.OPCEventServer/{65168852-5783-11d1-84a0-00608cb8a7e9}</Url>\n          <MinMetadataLifetime>1000</MinMetadataLifetime>\n          <SeperatorChars></SeperatorChars>\n          <MaxQueueSize>100</MaxQueueSize>\n          <MinReconnectWait>0</MinReconnectWait>\n          <MaxReconnectWait>0</MaxReconnectWait>\n          <MaxReconnectAttempts>0</MaxReconnectAttempts>\n        </WrapperConfiguration>\n        <WrapperConfiguration xsi:type=\"DaWrapperConfiguration\">\n          <NamespaceUri>opc.com://localhost/OPCSample.OpcDaServer</NamespaceUri>\n          <BrowseName>COM DA Server 1</BrowseName>\n          <Url>opc.com://localhost/OPCSample.OpcDaServer/{625c49a1-be1c-45d7-9a8a-14bedcf5ce6c}</Url>\n          <MinMetadataLifetime>1000</MinMetadataLifetime>\n          <SeperatorChars></SeperatorChars>\n          <MaxQueueSize>100</MaxQueueSize>\n          <MinReconnectWait>0</MinReconnectWait>\n          <MaxReconnectWait>0</MaxReconnectWait>\n          <MaxReconnectAttempts>0</MaxReconnectAttempts>\n        </WrapperConfiguration>\n        <WrapperConfiguration xsi:type=\"HdaWrapperConfiguration\">\n          <NamespaceUri>opc.com://localhost/OPCSample.OpcHdaServer.1</NamespaceUri>\n          <BrowseName>OPCSample.OpcHdaServer.1</BrowseName>\n          <Url>opc.com://localhost/OPCSample.OpcHdaServer.1</Url>\n          <MinMetadataLifetime>1000</MinMetadataLifetime>\n          <SeperatorChars />\n          <MaxQueueSize>100</MaxQueueSize>\n          <MinReconnectWait>1000</MinReconnectWait>\n          <MaxReconnectWait>30000</MaxReconnectWait>\n          <MaxReconnectAttempts>10</MaxReconnectAttempts>\n          <TreatUncertainAsBad>true</TreatUncertainAsBad>\n          <PercentDataBad>10</PercentDataBad>\n          <PercentDataGood>99</PercentDataGood>\n          <SteppedSlopedExtrapolation>true</SteppedSlopedExtrapolation>\n          <Stepped>true</Stepped>\n          <Definition>Definition comes here</Definition>\n          <MaxTimeInterval>555555</MaxTimeInterval>\n          <MinTimeInterval>111</MinTimeInterval>\n          <ExceptionDeviation>50</ExceptionDeviation>\n          <ExceptionDeviationFormat>PercentOfRange_1</ExceptionDeviationFormat>\n        </WrapperConfiguration>\n      </ListOfWrapperConfiguration>\n    </ua:XmlElement>\n      -->\n  </Extensions>\n  \n  <!--\n  Masks supported by the trace feature. \n  Servers will detect changes within 5 seconds.\n  \n  Do not output any messages.\n  None = 0x0;\n\n  Output error messages.\n  Error = 0x1;\n\n  Output informational messages.\n  Information = 0x2;\n\n  Output stack traces.\n  StackTrace = 0x4;\n\n  Output basic messages for service calls.\n  Service = 0x8;\n\n  Output detailed messages for service calls.\n  ServiceDetail = 0x10;\n\n  Output basic messages for each operation.\n  Operation = 0x20;\n\n  Output detailed messages for each operation.\n  OperationDetail = 0x40;\n\n  Output messages related to application initialization or shutdown\n  StartStop = 0x80;\n\n  Output messages related to a call to an external system.\n  ExternalSystem = 0x100;\n\n  Output messages related to security\n  Security = 0x200;\n  -->\n  \n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Opc.Ua.SampleClient.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n\n  <!-- Enables the hi-res clock for the process to allows for shorter (<100ms) publishing and sampling intervals. -->\n  <!-- QueryPerformanceCounter does not work on all multi-core machines so enabling the hi-res clock by default is not recommended. -->\n  <DisableHiResClock>true</DisableHiResClock>\n  \n</s1:SampleConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ua:ConfiguredEndpointCollection\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n  xmlns=\"http://opcfoundation.org/UA/2008/02/Types.xsd\" \n  xmlns:ua=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\">\n  <ua:KnownHosts />\n  <ua:Endpoints>\n    <!-- \n      Self, acting as a server endpoint:\n        opc.tcp://localhost:61210/UA/SampleClient // -->\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>opc.tcp://localhost:61210/UA/SampleClient</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>UserName_1</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>Certificate_2</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <PolicyId xsi:nil=\"true\" />\n            <TokenType>IssuedToken_3</TokenType>\n            <IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</IssuedTokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n\n    <!-- \n      Sample server, opc.tcp endpoint:\n        opc.tcp://localhost:51210/UA/SampleServer // -->\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>opc.tcp://localhost:51210/UA/SampleServer</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>UserName_1</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>Certificate_2</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <PolicyId xsi:nil=\"true\" />\n            <TokenType>IssuedToken_3</TokenType>\n            <IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</IssuedTokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n\n    <!-- \n      Reference server, opc.tcp endpoint:\n        opc.tcp://localhost:62541/UA/ReferenceServer // -->\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>opc.tcp://localhost:62541/UA/ReferenceServer</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>UserName_1</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>Certificate_2</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <PolicyId xsi:nil=\"true\" />\n            <TokenType>IssuedToken_3</TokenType>\n            <IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</IssuedTokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n\n    <!-- \n      Data Access server, opc.tcp endpoint:\n        opc.tcp://localhost:62547/Quickstarts/DataAccessServer // -->\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>opc.tcp://localhost:62547/Quickstarts/DataAccessServer</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>UserName_1</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>Certificate_2</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <PolicyId xsi:nil=\"true\" />\n            <TokenType>IssuedToken_3</TokenType>\n            <IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</IssuedTokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n\n    <!-- \n      Alarms/Conditions server, opc.tcp endpoint:\n        opc.tcp://localhost:62544/Quickstarts/AlarmConditionServer // -->\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>opc.tcp://localhost:62544/Quickstarts/AlarmConditionServer</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>UserName_1</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>Certificate_2</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <PolicyId xsi:nil=\"true\" />\n            <TokenType>IssuedToken_3</TokenType>\n            <IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</IssuedTokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n\n    <!-- \n      Historical Data server, opc.tcp endpoint:\n        opc.tcp://localhost:62550/Quickstarts/HistoricalAccessServer // -->\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>opc.tcp://localhost:62550/Quickstarts/HistoricalAccessServer</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>UserName_1</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>Certificate_2</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <PolicyId xsi:nil=\"true\" />\n            <TokenType>IssuedToken_3</TokenType>\n            <IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</IssuedTokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n\n    <!-- \n      Historical Events server opc.tcp endpoint:\n        opc.tcp://localhost:62553/Quickstarts/HistoricalEventsServer // -->\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>opc.tcp://localhost:62553/Quickstarts/HistoricalEventsServer</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>UserName_1</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>Certificate_2</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <PolicyId xsi:nil=\"true\" />\n            <TokenType>IssuedToken_3</TokenType>\n            <IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</IssuedTokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n\n  </ua:Endpoints>\n  \n</ua:ConfiguredEndpointCollection>", "/* ========================================================================\n * Copyright (c) 2005-2017 The OPC Foundation, Inc. All rights reserved.\n *\n * OPC Foundation MIT License 1.00\n * \n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n * \n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n *\n * The complete license agreement can be found here:\n * http://opcfoundation.org/License/MIT/1.00/\n * ======================================================================*/\n\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\n\nusing Opc.Ua;\n\nnamespace Workshop\n{\n    public partial class Helpers\n    {   \n        public const string DefaultHttpUrl = \"http://localhost:51211/UA/SampleServer\";        \n        public const string DefaultTcpUrl = \"opc.tcp://localhost:51210/UA/SampleServer\";\n        public const string InstanceNamespaceUri = \"http://tempuri.org/UA/Workshop/\";\n        public const string TypeNamespaceUri = \"http://tempuri.org/UA/Workshop/Types/\";\n\n        /// <summary>\n        /// Creates a minimal application configuration for a client.\n        /// </summary>\n        /// <remarks>\n        /// In most cases the application configuration will be loaded from an XML file. \n        /// This example populates the configuration in code.\n        /// </remarks>\n        public static ApplicationConfiguration CreateClientConfiguration()\n        {\n            // The application configuration can be loaded from any file.\n            // ApplicationConfiguration.Load() method loads configuration by looking up a file path in the App.config.\n            // This approach allows applications to share configuration files and to update them.\n            ApplicationConfiguration configuration = new ApplicationConfiguration();\n\n            // Step 1 - Specify the server identity.\n            configuration.ApplicationName = \"My Client Name\";\n            configuration.ApplicationType = ApplicationType.Client;\n            configuration.ApplicationUri  = \"http://localhost/VendorId/ApplicationId/InstanceId\";\n            configuration.ProductUri      = \"http://VendorId/ProductId/VersionId\";\n\n            configuration.SecurityConfiguration = new SecurityConfiguration();\n\n            // Step 2 - Specify the server's application instance certificate.\n\n            // Application instance certificates must be placed in a windows certficate store because that is \n            // the best way to protect the private key. Certificates in a store are identified with 4 parameters:\n            // StoreLocation, StoreName, SubjectName and Thumbprint.\n            //\n            // In this example the following values are used:\n            // \n            //   LocalMachine    - use the machine wide certificate store.\n            //   Personal        - use the store for individual certificates.\n            //   ApplicationName - use the application name as a search key.   \n             \n            configuration.SecurityConfiguration.ApplicationCertificate               = new CertificateIdentifier();\n            configuration.SecurityConfiguration.ApplicationCertificate.StoreType     = CertificateStoreType.Windows;\n            configuration.SecurityConfiguration.ApplicationCertificate.StorePath     = \"LocalMachine\\\\My\";\n            configuration.SecurityConfiguration.ApplicationCertificate.SubjectName   = configuration.ApplicationName;\n\n            // trust all applications installed on the same machine.\n            configuration.SecurityConfiguration.TrustedPeerCertificates.StoreType = CertificateStoreType.Windows;\n            configuration.SecurityConfiguration.TrustedPeerCertificates.StorePath = \"LocalMachine\\\\My\";\n\n            // find the certificate in the store.\n            X509Certificate2 clientCertificate = configuration.SecurityConfiguration.ApplicationCertificate.Find(true);\n\n            // create a new certificate if one not found.\n            if (clientCertificate == null)\n            {\n                // this code would normally be called as part of the installer - called here to illustrate.\n                // create a new certificate an place it in the LocalMachine/Personal store.\n                clientCertificate = CertificateFactory.CreateCertificate(\n                    configuration.SecurityConfiguration.ApplicationCertificate.StoreType,\n                    configuration.SecurityConfiguration.ApplicationCertificate.StorePath,\n                    configuration.ApplicationUri,\n                    configuration.ApplicationName,\n                    null,\n                    null,\n                    2048,\n                    300);\n\n                Console.WriteLine(\"Created client certificate: {0}\", clientCertificate.Subject);\n            }\n            \n            // Step 4 - Specify the supported transport quotas.\n\n            // The transport quotas are used to set limits on the contents of messages and are\n            // used to protect against DOS attacks and rogue clients. They should be set to\n            // reasonable values.\n            configuration.TransportQuotas = new TransportQuotas();\n            configuration.TransportQuotas.MaxArrayLength = Int32.MaxValue;\n            configuration.TransportQuotas.MaxByteStringLength = Int32.MaxValue;\n            configuration.TransportQuotas.MaxStringLength = Int32.MaxValue;\n            configuration.TransportQuotas.MaxMessageSize = Int32.MaxValue;\n            configuration.TransportQuotas.OperationTimeout = 600000;\n\n            configuration.ServerConfiguration = new ServerConfiguration();\n\n            // Step 5 - Specify the client specific configuration.\n            configuration.ClientConfiguration = new ClientConfiguration();\n            configuration.ClientConfiguration.DefaultSessionTimeout = 30000;\n\n            // Step 6 - Validate the configuration.\n        \n            // This step checks if the configuration is consistent and assigns a few internal variables\n            // that are used by the SDK. This is called automatically if the configuration is loaded from\n            // a file using the ApplicationConfiguration.Load() method.          \n            configuration.Validate(ApplicationType.Client);    \n            \n            return configuration;\n        }\n\n        /// <summary>\n        /// Creates a minimal application configuration for a server.\n        /// </summary>\n        /// <remarks>\n        /// In many cases the application configuration will be loaded from an XML file. \n        /// This example populates the configuration in code.\n        /// </remarks>\n        public static ApplicationConfiguration CreateServerConfiguration()\n        {\n            // The application configuration can be loaded from any file.\n            // ApplicationConfiguration.Load() method loads configuration by looking up a file path in the App.config.\n            // This approach allows applications to share configuration files and to update them.\n            ApplicationConfiguration configuration = new ApplicationConfiguration();\n\n            // Step 1 - Specify the server identity.\n            configuration.ApplicationName = \"My Server Name\";\n            configuration.ApplicationType = ApplicationType.Server;\n            configuration.ApplicationUri  = \"http://localhost/VendorId/ApplicationId/InstanceId\";\n            configuration.ProductUri      = \"http://VendorId/ProductId/VersionId\";\n\n            configuration.SecurityConfiguration = new SecurityConfiguration();\n\n            // Step 2 - Specify the server's application instance certificate.\n\n            // Application instance certificates must be placed in a windows certficate store because that is \n            // the best way to protect the private key. Certificates in a store are identified with 4 parameters:\n            // StoreLocation, StoreName, SubjectName and Thumbprint.\n            //\n            // In this example the following values are used:\n            // \n            //   LocalMachine    - use the machine wide certificate store.\n            //   Personal        - use the store for individual certificates.\n            //   ApplicationName - use the application name as a search key.   \n             \n            configuration.SecurityConfiguration.ApplicationCertificate               = new CertificateIdentifier();\n            configuration.SecurityConfiguration.ApplicationCertificate.StoreType     = CertificateStoreType.Windows;\n            configuration.SecurityConfiguration.ApplicationCertificate.StorePath     = \"LocalMachine\\\\My\";\n            configuration.SecurityConfiguration.ApplicationCertificate.SubjectName   = configuration.ApplicationName;\n            \n            // trust all applications installed on the same machine.\n            configuration.SecurityConfiguration.TrustedPeerCertificates.StoreType = CertificateStoreType.Windows;\n            configuration.SecurityConfiguration.TrustedPeerCertificates.StorePath = \"LocalMachine\\\\My\";\n\n            // find the certificate in the store.\n            X509Certificate2 serverCertificate = configuration.SecurityConfiguration.ApplicationCertificate.Find(true);\n\n            // create a new certificate if one not found.\n            if (serverCertificate == null)\n            {\n                // this code would normally be called as part of the installer - called here to illustrate.\n                // create a new certificate an place it in the LocalMachine/Personal store.\n                serverCertificate = CertificateFactory.CreateCertificate(\n                    configuration.SecurityConfiguration.ApplicationCertificate.StoreType,\n                    configuration.SecurityConfiguration.ApplicationCertificate.StorePath,\n                    configuration.ApplicationUri,\n                    configuration.ApplicationName,\n                    null,\n                    null,\n                    2048,\n                    300);\n\n                Console.WriteLine(\"Created server certificate: {0}\", serverCertificate.Subject);\n            }\n            \n            // Step 4 - Specify the supported transport quotas.\n\n            // The transport quotas are used to set limits on the contents of messages and are\n            // used to protect against DOS attacks and rogue clients. They should be set to\n            // reasonable values.\n            configuration.TransportQuotas = new TransportQuotas();\n            configuration.TransportQuotas.OperationTimeout = 60000;\n\n            configuration.ServerConfiguration = new ServerConfiguration();\n\n            // turn off registration with the discovery server.\n            configuration.ServerConfiguration.MaxRegistrationInterval = 0;\n\n            // Step 5 - Specify the based addresses - one per binding specified above.\n            configuration.ServerConfiguration.BaseAddresses.Add(DefaultHttpUrl);\n            configuration.ServerConfiguration.BaseAddresses.Add(DefaultTcpUrl);\n\n            // Step 6 - Specify the security policies.\n          \n            // Security policies control what security must be used to connect to the server.\n            // The SDK will automatically create EndpointDescriptions for each combination of \n            // security policy and base address. \n            //\n            // Note that some bindings only allow one policy per URL so the SDK will append \n            // text to the base addresses in order to ensure that each policy has a unique URL.\n            // The first policy specified in the configuration is assigned the base address.\n\n            // this policy requires signing and encryption.\n            ServerSecurityPolicy policy1 = new ServerSecurityPolicy();\n\n            policy1.SecurityMode      = MessageSecurityMode.SignAndEncrypt;\n            policy1.SecurityPolicyUri = SecurityPolicies.Basic128Rsa15;\n            policy1.SecurityLevel     = 1;\n\n            configuration.ServerConfiguration.SecurityPolicies.Add(policy1);\n\n            // this policy does not require any security.\n            ServerSecurityPolicy policy2 = new ServerSecurityPolicy();\n\n            policy2.SecurityMode      = MessageSecurityMode.None;\n            policy2.SecurityPolicyUri = SecurityPolicies.None;\n            policy2.SecurityLevel     = 0;\n\n            configuration.ServerConfiguration.SecurityPolicies.Add(policy2);\n\n            // specify the supported user token types.\n            configuration.ServerConfiguration.UserTokenPolicies.Add(new UserTokenPolicy(UserTokenType.Anonymous));\n            configuration.ServerConfiguration.UserTokenPolicies.Add(new UserTokenPolicy(UserTokenType.UserName));\n\n            // Step 6 - Validate the configuration.\n        \n            // This step checks if the configuration is consistent and assigns a few internal variables\n            // that are used by the SDK. This is called automatically if the configuration is loaded from\n            // a file using the ApplicationConfiguration.Load() method.          \n            configuration.Validate(ApplicationType.Server);    \n            \n            return configuration;\n        }\n                \n        /// <summary>\n        /// Creates a minimal endpoint description which allows a client to connect to a server.\n        /// </summary>\n        /// <remarks>\n        /// In most cases the client will use the server's discovery endpoint to fetch the information\n        /// constained in this structure.\n        /// </remarks>\n        public static EndpointDescription CreateEndpointDescription()\n        {\n            // create the endpoint description.\n            EndpointDescription endpointDescription = new EndpointDescription();\n            \n           endpointDescription.EndpointUrl = Utils.Format(\"http://{0}:61211/UA/SampleClient\", System.Net.Dns.GetHostName());\n           // endpointDescription.EndpointUrl = Utils.Format(\"opc.tcp://{0}:51210/UA/SampleServer\", System.Net.Dns.GetHostName());\n           // endpointDescription.EndpointUrl = Utils.Format(\"http://{0}:51211/UA/SampleServer/None\", System.Net.Dns.GetHostName());\n           // endpointDescription.EndpointUrl = Utils.Format(\"http://{0}:51211/UA/SampleServer\", System.Net.Dns.GetHostName());\n            \n            // specify the security policy to use.\n            // endpointDescription.SecurityPolicyUri = SecurityPolicies.None;\n            // endpointDescription.SecurityMode      = MessageSecurityMode.None;;\n            endpointDescription.SecurityPolicyUri = SecurityPolicies.Basic128Rsa15;\n            endpointDescription.SecurityMode      = MessageSecurityMode.SignAndEncrypt;\n            \n            // specify the transport profile.\n             endpointDescription.TransportProfileUri = Profiles.WsHttpXmlOrBinaryTransport;\n            // endpointDescription.TransportProfileUri = Profiles.WsHttpXmlTransport;\n            // endpointDescription.TransportProfileUri = Profiles.UaTcpTransport;\n\n            endpointDescription.Server.DiscoveryUrls.Add(Utils.Format(\"http://{0}:61211/UA/SampleClient/discovery\", System.Net.Dns.GetHostName()));\n\n            // load the the server certificate from the local certificate store.\n            CertificateIdentifier certificateIdentifier = new CertificateIdentifier();\n\n            certificateIdentifier.StoreType = CertificateStoreType.Windows;\n            certificateIdentifier.StorePath = \"LocalMachine\\\\My\";\n            certificateIdentifier.SubjectName = \"UA Sample Client\";\n            \n            X509Certificate2 serverCertificate = certificateIdentifier.Find();\n\n            if (serverCertificate == null)\n            {\n                throw ServiceResultException.Create(StatusCodes.BadCertificateInvalid, \"Could not find server certificate: {0}\", certificateIdentifier.SubjectName);\n            }\n\n            endpointDescription.ServerCertificate = serverCertificate.RawData;\n\n            return endpointDescription;\n        }\n    }\n}\n", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ua:ConfiguredEndpointCollection\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns:ua=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\">\n  <ua:KnownHosts />\n  <ua:Endpoints>\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>opc.tcp://localhost:61210/UA/Publisher</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>opc.tcp://192.168.2.101:51210/UA/SampleServer</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n  </ua:Endpoints>\n</ua:ConfiguredEndpointCollection>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<s1:SampleConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns:s1=\"http://opcfoundation.org/UA/Sample/Configuration.xsd\"\n  xmlns:s2=\"http://opcfoundation.org/UA/SDK/COM/Configuration.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>UA Sample Server</ApplicationName>\n  <ApplicationUri>urn:localhost:OPCFoundation:SampleServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/UA/SampleServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n\n  <SecurityConfiguration>\n    \n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>UA Sample Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n    \n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n    \n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n\n  </SecurityConfiguration>\n\n\n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>4194304</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  \n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>opc.tcp://localhost:51210/UA/SampleServer</ua:String>\n      <ua:String>http://localhost:51211/UA/SampleServer</ua:String>\n      <ua:String>https://localhost:51212/UA/SampleServer/</ua:String>\n    </BaseAddresses>\n\n    <!-- \n    These list the alternate addresses (via firewalls, multiple NICs etc.) that can be\n    used to communicate with the server. The URL used by the client when calling\n    FindServers/GetEndpoints or CreateSession will be used to filter the list of\n    endpoints returned by checking for alternate base addresses that have a domain\n    that matches the domain in the url provided by the client.\n    \n    Note that any additional domains should be listed in the server's certificate. If they\n    are left out the client make refuse to connect because it has no way to know if the \n    alternate domain was authorized by the server administrator.\n    -->\n    <!--\n    <AlternateBaseAddresses>\n      <ua:String>http://mycompany.com:40000/UA/SampleServer</ua:String>\n    </AlternateBaseAddresses>\n    -->\n\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>2</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <MinRequestThreadCount>5</MinRequestThreadCount>\n    <MaxRequestThreadCount>100</MaxRequestThreadCount>\n    <MaxQueuedRequestCount>2000</MaxQueuedRequestCount>\n    \n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n        <ua:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</ua:SecurityPolicyUri>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>100</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates />\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Opc.Ua.Server.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <MemoryBufferConfiguration xmlns=\"http://samples.org/UA/memorybuffer\">\n        <Buffers>\n          <MemoryBufferInstance>\n            <Name>UInt32</Name>\n            <TagCount>100</TagCount>\n            <DataType>UInt32</DataType>\n          </MemoryBufferInstance>\n          <MemoryBufferInstance>\n            <Name>Double</Name>\n            <TagCount>100</TagCount>\n            <DataType>Double</DataType>\n          </MemoryBufferInstance>\n        </Buffers>\n      </MemoryBufferConfiguration>\n    </ua:XmlElement>\n    \n    <!--\n    <ua:XmlElement>\n      <ListOfWrapperConfiguration xmlns=\"http://opcfoundation.org/UA/SDK/COM/Configuration.xsd\">\n        <WrapperConfiguration xsi:type=\"AeWrapperConfiguration\">\n          <NamespaceUri>opc.com://localhost/OPCSample.OPCEventServer</NamespaceUri>\n          <BrowseName>COM AE Server 1</BrowseName>\n          <Url>opc.com://localhost/OPCSample.OPCEventServer/{65168852-5783-11d1-84a0-00608cb8a7e9}</Url>\n          <MinMetadataLifetime>1000</MinMetadataLifetime>\n          <SeperatorChars></SeperatorChars>\n          <MaxQueueSize>100</MaxQueueSize>\n          <MinReconnectWait>0</MinReconnectWait>\n          <MaxReconnectWait>0</MaxReconnectWait>\n          <MaxReconnectAttempts>0</MaxReconnectAttempts>\n        </WrapperConfiguration>\n        <WrapperConfiguration xsi:type=\"DaWrapperConfiguration\">\n          <NamespaceUri>opc.com://localhost/OPCSample.OpcDaServer</NamespaceUri>\n          <BrowseName>COM DA Server 1</BrowseName>\n          <Url>opc.com://localhost/OPCSample.OpcDaServer/{625c49a1-be1c-45d7-9a8a-14bedcf5ce6c}</Url>\n          <MinMetadataLifetime>1000</MinMetadataLifetime>\n          <SeperatorChars></SeperatorChars>\n          <MaxQueueSize>100</MaxQueueSize>\n          <MinReconnectWait>0</MinReconnectWait>\n          <MaxReconnectWait>0</MaxReconnectWait>\n          <MaxReconnectAttempts>0</MaxReconnectAttempts>\n        </WrapperConfiguration>\n      </ListOfWrapperConfiguration>\n    </ua:XmlElement>\n    -->\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Opc.Ua.SampleServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, Errors and Trace -->\n    <!-- <TraceMasks>515</TraceMasks> -->\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n\n  <!-- Disables the hi-res clock if the QueryPerformanceCounter does work on a particular machine. -->\n  <DisableHiResClock>true</DisableHiResClock>\n\n</s1:SampleConfiguration>", "<ua:ConfiguredEndpointCollection\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n  xmlns=\"http://opcfoundation.org/UA/2008/02/Types.xsd\" \n  xmlns:ua=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\">\n  <ua:KnownHosts />\n  <ua:Endpoints>\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>http://localhost:61211/UA/SampleClient</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>UserName_1</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>Certificate_2</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <PolicyId xsi:nil=\"true\" />\n            <TokenType>IssuedToken_3</TokenType>\n            <IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</IssuedTokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>http://localhost:51211/UA/SampleServer</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>UserName_1</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>Certificate_2</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <PolicyId xsi:nil=\"true\" />\n            <TokenType>IssuedToken_3</TokenType>\n            <IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</IssuedTokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n\n  </ua:Endpoints>\n</ua:ConfiguredEndpointCollection>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>UA Stack Test Server</ApplicationName>\n  <ApplicationUri>urn:localhost:OPCFoundation:TestServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/UA/TestServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n\n  <SecurityConfiguration>\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\StackTest\\CertificateStores\\PrivateKeys</StorePath>\n      <SubjectName>UA Stack Test Server</SubjectName>\n    </ApplicationCertificate>\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\StackTest\\CertificateStores\\CertificateAuthorities</StorePath>\n    </TrustedIssuerCertificates>\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\StackTest\\CertificateStores\\TrustList</StorePath>\n    </TrustedPeerCertificates>\n    <AutoAcceptUntrustedCertificates>false</AutoAcceptUntrustedCertificates>\n  </SecurityConfiguration>\n  \n  <!--<TransportConfigurations>\n    <TransportConfiguration>\n      <UriScheme>opc.tcp</UriScheme>\n      <TypeName>Opc.Ua.NativeStack.NativeStackBinding,Opc.Ua.NativeStackWrapper</TypeName>\n    </TransportConfiguration>\n  </TransportConfigurations>-->\n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>4194304</MaxByteStringLength>\n    <MaxArrayLength>1048576</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>70000</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>60000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:9000/UA/TestServer</ua:String>\n      <ua:String>opc.tcp://localhost:9001/UA/TestServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>2</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies />\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>100</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>100</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <MaxRegistrationInterval>0</MaxRegistrationInterval>\n  </ServerConfiguration>\n\n  <TraceConfiguration>\n    <OutputFilePath>%LocalApplicationData%\\OPC Foundation\\Logs\\Opc.Ua.StackTestServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <TraceMasks>513</TraceMasks>\n    <!-- Show Only Security, Errors and Trace -->\n    <!-- <TraceMasks>515</TraceMasks> -->\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n\n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart AlarmCondition Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UASDK:AlarmConditionServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/UASDK/AlarmConditionServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart AlarmCondition Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62543/Quickstarts/AlarmConditionServer</ua:String>\n      <ua:String>opc.tcp://localhost:62544/Quickstarts/AlarmConditionServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>2</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <!--\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>\n      -->\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates />\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Opc.Ua.Server.nodes.xml</NodeManagerSaveFile>\n    <MaxSubscriptionCount>50</MaxSubscriptionCount>    \n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <AlarmConditionServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/AlarmCondition\">\n        <Areas>\n          <AreaConfiguration>\n            <Name>Green</Name>\n            <SubAreas>\n              <AreaConfiguration>\n                <Name>East</Name>\n                <SubAreas>\n                  <AreaConfiguration>\n                    <Name>Red</Name>\n                    <SourcePaths>\n                      <ua:String>Colours/EastTank</ua:String>\n                      <ua:String>Colours/NorthMotor</ua:String>\n                    </SourcePaths>\n                  </AreaConfiguration>\n                  <AreaConfiguration>\n                    <Name>Blue</Name>\n                    <SourcePaths>\n                      <ua:String>Metals/WestTank</ua:String>\n                      <ua:String>Metals/SouthMotor</ua:String>\n                    </SourcePaths>\n                  </AreaConfiguration>\n                </SubAreas>\n              </AreaConfiguration>\n            </SubAreas>\n          </AreaConfiguration>\n          <AreaConfiguration>\n            <Name>Yellow</Name>\n            <SubAreas>\n              <AreaConfiguration>\n                <Name>West</Name>\n                <SubAreas>\n                  <AreaConfiguration>\n                    <Name>Red</Name>\n                    <SourcePaths>\n                      <ua:String>Metals/SouthMotor</ua:String>\n                      <ua:String>Colours/NorthMotor</ua:String>\n                    </SourcePaths>\n                  </AreaConfiguration>\n                  <AreaConfiguration>\n                    <Name>Blue</Name>\n                    <SourcePaths>\n                      <ua:String>Colours/EastTank</ua:String>\n                      <ua:String>Metals/WestTank</ua:String>\n                  </SourcePaths>\n                  </AreaConfiguration>\n                </SubAreas>\n              </AreaConfiguration>\n            </SubAreas>\n          </AreaConfiguration>\n        </Areas>\n      </AlarmConditionServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.AlarmConditionServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n\n</ApplicationConfiguration>\n", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart InformationModel Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UASDK:InformationModelServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/UASDK/InformationModelServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart InformationModel Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/Quickstarts/BoilerServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/Quickstarts/BoilerServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>2</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <!--\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>\n      -->\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Quickstarts.BoilerServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <BoilerServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/Boiler\">\n      </BoilerServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.BoilerServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\">\n  <ApplicationName>Quickstart COM DataAccess Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UASDK:ComDataAccessServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/UASDK/ComDataAccessServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n\n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart COM DataAccess Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Windows</StoreType>\n      <StorePath>LocalMachine\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n\n  </SecurityConfiguration>\n\n  <TransportConfigurations>\n    <TransportConfiguration>\n      <UriScheme>http</UriScheme>\n      <TypeName>Opc.Ua.Bindings.UaSoapXmlBinding</TypeName>\n    </TransportConfiguration>\n    <TransportConfiguration>\n      <UriScheme>opc.tcp</UriScheme>\n      <TypeName>Opc.Ua.Bindings.UaTcpBinding</TypeName>\n    </TransportConfiguration>\n  </TransportConfigurations>\n\n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  \n  <ServerConfiguration>\n    <BaseAddresses xmlns:d3p1=\"http://opcfoundation.org/UA/2008/02/Types.xsd\">\n      <d3p1:String>http://localhost:62540/Quickstarts/ComDataAccessServer</d3p1:String>\n      <d3p1:String>opc.tcp://localhost:62541/Quickstarts/ComDataAccessServer</d3p1:String>\n    </BaseAddresses>\n    <AlternateBaseAddresses xmlns:d3p1=\"http://opcfoundation.org/UA/2008/02/Types.xsd\" />\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>2</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <MinRequestThreadCount>10</MinRequestThreadCount>\n    <MaxRequestThreadCount>100</MaxRequestThreadCount>\n    <MaxQueuedRequestCount>200</MaxQueuedRequestCount>\n    <UserTokenPolicies xmlns:d3p1=\"http://opcfoundation.org/UA/2008/02/Types.xsd\">\n      <d3p1:UserTokenPolicy>\n        <d3p1:PolicyId i:nil=\"true\" />\n        <d3p1:TokenType>Anonymous_0</d3p1:TokenType>\n        <d3p1:IssuedTokenType i:nil=\"true\" />\n        <d3p1:IssuerEndpointUrl i:nil=\"true\" />\n        <d3p1:SecurityPolicyUri i:nil=\"true\" />\n      </d3p1:UserTokenPolicy>\n      <d3p1:UserTokenPolicy>\n        <d3p1:PolicyId i:nil=\"true\" />\n        <d3p1:TokenType>UserName_1</d3p1:TokenType>\n        <d3p1:IssuedTokenType i:nil=\"true\" />\n        <d3p1:IssuerEndpointUrl i:nil=\"true\" />\n        <d3p1:SecurityPolicyUri i:nil=\"true\" />\n      </d3p1:UserTokenPolicy>\n      <d3p1:UserTokenPolicy>\n        <d3p1:PolicyId i:nil=\"true\" />\n        <d3p1:TokenType>Certificate_2</d3p1:TokenType>\n        <d3p1:IssuedTokenType i:nil=\"true\" />\n        <d3p1:IssuerEndpointUrl i:nil=\"true\" />\n        <d3p1:SecurityPolicyUri i:nil=\"true\" />\n      </d3p1:UserTokenPolicy>\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Opc.Ua.Server.nodes.xml</NodeManagerSaveFile>\n    <MinSubscriptionLifetime>10000</MinSubscriptionLifetime>\n  </ServerConfiguration>\n  <Extensions xmlns:d2p1=\"http://opcfoundation.org/UA/2008/02/Types.xsd\">\n    <d2p1:XmlElement>\n      <ComWrapperServerConfiguration xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://opcfoundation.org/UA/SDK/COMInterop\">\n        <WrappedServers>\n          \n          <!--\n              <ComClientConfiguration i:type=\"ComDaClientConfiguration\">\n                <ServerUrl>opc.com://localhost/Matrikon.OPC.Simulation/f8582cf2-88fb-11d0-b850-00c0f0104305</ServerUrl>\n                <ServerName>DA</ServerName>\n                <MaxReconnectWait>100000</MaxReconnectWait>\n                <SeperatorChars></SeperatorChars>\n                <BrowseToNotSupported>false</BrowseToNotSupported>\n              </ComClientConfiguration>\n              <ComClientConfiguration i:type=\"ComAeClientConfiguration\">\n                <ServerUrl>opc.com://localhost/Matrikon.OPC.Simulation/f8582cf2-88fb-11d0-b850-00c0f0104305</ServerUrl>\n                <ServerName>AE</ServerName>\n                <MaxReconnectWait>100000</MaxReconnectWait>\n                <SeperatorChars></SeperatorChars>\n              </ComClientConfiguration>\n              <ComClientConfiguration i:type=\"ComHdaClientConfiguration\">\n                <ServerUrl>opc.com://localhost/Matrikon.OPC.Simulation/f8582cf2-88fb-11d0-b850-00c0f0104305</ServerUrl>\n                <ServerName>HDA</ServerName>\n                <MaxReconnectWait>100000</MaxReconnectWait>\n                <SeperatorChars></SeperatorChars>\n                <AddCapabilitiesToServerObject>false</AddCapabilitiesToServerObject>\n                <AttributeSamplingInterval>1000</AttributeSamplingInterval>\n                <TreatUncertainAsBad>true</TreatUncertainAsBad>\n                <PercentDataBad>0</PercentDataBad>\n                <PercentDataGood>100</PercentDataGood>\n                <SteppedSlopedExtrapolation>false</SteppedSlopedExtrapolation>\n              </ComClientConfiguration>\n          -->\n            <ComClientConfiguration i:type=\"ComDaClientConfiguration\">\n              <ServerUrl>opc.com://localhost/OPCSample.OpcDaServer/625c49a1-be1c-45d7-9a8a-14bedcf5ce6c</ServerUrl>\n              <ServerName>DA</ServerName>\n              <MaxReconnectWait>100000</MaxReconnectWait>\n              <SeperatorChars i:nil=\"true\" />\n              <BrowseToNotSupported>false</BrowseToNotSupported>\n            </ComClientConfiguration>\n              <ComClientConfiguration i:type=\"ComAeClientConfiguration\">\n                <ServerUrl>opc.com://localhost/OPCSample.OPCEventServer/{65168852-5783-11d1-84a0-00608cb8a7e9}</ServerUrl>\n                <ServerName>AE</ServerName>\n                <MaxReconnectWait>1000000000</MaxReconnectWait>\n                <SeperatorChars i:nil=\"true\" />\n              </ComClientConfiguration>\n              <ComClientConfiguration i:type=\"ComHdaClientConfiguration\">\n                <ServerUrl>opc.com://localhost/OPCSample.OpcHdaServer/{6a5eedec-1509-4627-997f-993ccb65ab7c}</ServerUrl>\n                <ServerName>HDA</ServerName>\n                <MaxReconnectWait>1000000000</MaxReconnectWait>\n                <SeperatorChars></SeperatorChars>\n                <AddCapabilitiesToServerObject>true</AddCapabilitiesToServerObject>\n                <AttributeSamplingInterval>1000</AttributeSamplingInterval>\n                <TreatUncertainAsBad>true</TreatUncertainAsBad>\n                <PercentDataBad>0</PercentDataBad>\n                <PercentDataGood>100</PercentDataGood>\n                <SteppedSlopedExtrapolation>false</SteppedSlopedExtrapolation>\n              </ComClientConfiguration>\n          \n        </WrappedServers>\n      </ComWrapperServerConfiguration>\n    </d2p1:XmlElement>\n  </Extensions>\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.ComDataAccessServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  <DisableHiResClock>true</DisableHiResClock>\n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\" xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\">\n  <ApplicationName>DSATS Demo Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UA:DsatsDemoServer</ApplicationUri>\n  <ProductUri>uri:opcfoundation.org:DsatsDemoServer</ProductUri>\n  <ApplicationType>ClientAndServer_2</ApplicationType>\n  <SecurityConfiguration>\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n    </ApplicationCertificate>\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n      <TrustedCertificates />\n    </TrustedIssuerCertificates>\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n      <TrustedCertificates />\n    </TrustedPeerCertificates>\n    <NonceLength>32</NonceLength>\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n    <UserRoleDirectory i:nil=\"true\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" />\n  </SecurityConfiguration>\n  <TransportConfigurations>\n  </TransportConfigurations>\n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses xmlns:d2p1=\"http://opcfoundation.org/UA/2008/02/Types.xsd\">\n      <d2p1:String>opc.tcp://localhost:61000/DsatsDemoServer</d2p1:String>\n      <d2p1:String>http://localhost:61001/DsatsDemoServer</d2p1:String>\n    </BaseAddresses>\n    <AlternateBaseAddresses xmlns:d2p1=\"http://opcfoundation.org/UA/2008/02/Types.xsd\" />\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <MinRequestThreadCount>10</MinRequestThreadCount>\n    <MaxRequestThreadCount>100</MaxRequestThreadCount>\n    <MaxQueuedRequestCount>200</MaxQueuedRequestCount>\n    <UserTokenPolicies xmlns:d2p1=\"http://opcfoundation.org/UA/2008/02/Types.xsd\">\n      <d2p1:UserTokenPolicy>\n        <d2p1:PolicyId i:nil=\"true\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" />\n        <d2p1:TokenType>Anonymous_0</d2p1:TokenType>\n        <d2p1:IssuedTokenType i:nil=\"true\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" />\n        <d2p1:IssuerEndpointUrl i:nil=\"true\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" />\n        <d2p1:SecurityPolicyUri i:nil=\"true\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" />\n      </d2p1:UserTokenPolicy>\n      <d2p1:UserTokenPolicy>\n        <d2p1:PolicyId i:nil=\"true\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" />\n        <d2p1:TokenType>UserName_1</d2p1:TokenType>\n        <d2p1:IssuedTokenType i:nil=\"true\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" />\n        <d2p1:IssuerEndpointUrl i:nil=\"true\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" />\n        <d2p1:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</d2p1:SecurityPolicyUri>\n      </d2p1:UserTokenPolicy>\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates />\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile i:nil=\"true\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" />\n    <MinSubscriptionLifetime>10000</MinSubscriptionLifetime>\n    <MaxPublishRequestCount>20</MaxPublishRequestCount>\n    <MaxSubscriptionCount>100</MaxSubscriptionCount>\n    <MaxEventQueueSize>10000</MaxEventQueueSize>\n  </ServerConfiguration>\n  <ClientConfiguration>\n    <DefaultSessionTimeout>60000</DefaultSessionTimeout>\n    <WellKnownDiscoveryUrls>\n      <ua:String>opc.tcp://{0}:4840</ua:String>\n      <ua:String>http://{0}:52601/UADiscovery</ua:String>\n      <ua:String>http://{0}/UADiscovery/Default.svc</ua:String>\n    </WellKnownDiscoveryUrls>\n    <DiscoveryServers>\n    </DiscoveryServers>\n    <MinSubscriptionLifetime>10000</MinSubscriptionLifetime>\n  </ClientConfiguration>\n  <Extensions>\n    <ua:XmlElement>\n      <DsatsDemoServerConfiguration xmlns=\"http://opcfoundation.org/DSATSDemo\">\n        <!--<DataSourceLocation>.\\Schema\\DataSource.xml</DataSourceLocation>-->\n        <DataSourceLocation>%CommonApplicationData%\\OPC Foundation\\DSATS\\DataSource.xml</DataSourceLocation>\n        <AccessControlFilePath>%CommonApplicationData%\\OPC Foundation\\DSATS\\DsatsDemoAccessControl.txt</AccessControlFilePath>\n        <UseSecurity>false</UseSecurity>\n      </DsatsDemoServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n  <TraceConfiguration>\n    <OutputFilePath>%CommonApplicationData%\\OPC Foundation\\DSATS\\Logs\\DsatsDemoServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart DataAccess Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UASDK:DataAccessServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/UASDK/DataAccessServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart DataAccess Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62546/Quickstarts/DataAccessServer</ua:String>\n      <ua:String>opc.tcp://localhost:62547/Quickstarts/DataAccessServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>2</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <!--\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>\n      -->\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>true</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Opc.Ua.Server.nodes.xml</NodeManagerSaveFile>\n    <MaxSubscriptionCount>200</MaxSubscriptionCount>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <DataAccessServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/DataAccess\">\n      </DataAccessServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.DataAccessServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart DataTypes Server</ApplicationName>\n  <ApplicationUri>urn:localhost:somecompany.com:DataTypesServer</ApplicationUri>\n  <ProductUri>uri:somecompany.com:DataTypesServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart DataTypes Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/DataTypesServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/DataTypesServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>2</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <!--\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>\n      -->\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>true</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>DataTypesServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <DataTypesServerConfiguration xmlns=\"http://somecompany.com/DataTypes\">\n      </DataTypesServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\DataTypesServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart Empty Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UA:Quickstarts:EmptyServer</ApplicationUri>\n  <ProductUri>uri:opcfoundation.org:Quickstarts:EmptyServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart Empty Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>https://localhost:62545/Quickstarts/EmptyServer/</ua:String>\n      <ua:String>opc.tcp://localhost:62546/Quickstarts/EmptyServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>2</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <!--\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>\n      -->\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Quickstarts.EmptyServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <EmptyServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/Empty\">\n      </EmptyServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.EmptyServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart HistoricalAccess Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UASDK:HistoricalAccessServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/UASDK/HistoricalAccessServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart HistoricalAccess Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62549/Quickstarts/HistoricalAccessServer</ua:String>\n      <ua:String>opc.tcp://localhost:62550/Quickstarts/HistoricalAccessServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>2</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <!--\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>\n      -->\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>true</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Opc.Ua.Server.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <HistoricalAccessServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/HistoricalAccess\">\n        <ArchiveRoot>.\\Archive</ArchiveRoot>\n      </HistoricalAccessServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.HistoricalAccessServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart HistoricalEvents Server</ApplicationName>\n  <ApplicationUri>http://localhost/Quickstarts/HistoricalEventsServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/Quickstarts/HistoricalEventsServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart HistoricalEvents Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62552/Quickstarts/HistoricalEventsServer</ua:String>\n      <ua:String>opc.tcp://localhost:62553/Quickstarts/HistoricalEventsServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>2</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <!--\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>\n      -->\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Quickstarts.HistoricalEventsServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <HistoricalEventsServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/HistoricalEvents\">\n      </HistoricalEventsServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.HistoricalEventsServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart Methods Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UA:Quickstarts:MethodsServer</ApplicationUri>\n  <ProductUri>uri:opcfoundation.org:Quickstarts:MethodsServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart Methods Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/Quickstarts/MethodsServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/Quickstarts/MethodsServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>2</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <!--\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>\n      -->\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Quickstarts.MethodsServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <MethodsServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/Methods\">\n      </MethodsServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.MethodsServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart PerfTest Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UASDK:PerfTestServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/UASDK/PerfTestServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\Quickstarts\\CertificateStores\\PrivateKeys</StorePath>\n      <SubjectName>Quickstart PerfTest Server</SubjectName>\n    </ApplicationCertificate>\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\Quickstarts\\CertificateStores\\CertificateAuthorities</StorePath>\n    </TrustedIssuerCertificates>\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\Quickstarts\\CertificateStores\\TrustList</StorePath>\n    </TrustedPeerCertificates>\n  </SecurityConfiguration>\n \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>4194304</MaxByteStringLength>\n    <MaxArrayLength>655350</MaxArrayLength>\n    <MaxMessageSize>8388608</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/Quickstarts/PerfTestServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/Quickstarts/PerfTestServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>2</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <!--\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>\n      -->\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>50000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Quickstarts.PerfTestServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <PerfTestServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/PerfTest\">\n      </PerfTestServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>%LocalApplicationData%\\OPC Foundation\\Logs\\Quickstarts.PerfTestServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart Reference Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UA:Quickstarts:ReferenceServer</ApplicationUri>\n  <ProductUri>uri:opcfoundation.org:Quickstarts:ReferenceServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart Reference Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/Quickstarts/ReferenceServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/Quickstarts/ReferenceServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>100</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Quickstarts.ReferenceServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <ReferenceServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/Empty\">\n      </ReferenceServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.ReferenceServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart SimpleEvents Server</ApplicationName>\n  <ApplicationUri>http://localhost/Quickstarts/SimpleEventsServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/Quickstarts/SimpleEventsServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart SimpleEvents Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/Quickstarts/SimpleEventsServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/Quickstarts/SimpleEventsServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>2</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <!--\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>\n      -->\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Quickstarts.SimpleEventsServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <SimpleEventsServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/SimpleEvents\">\n      </SimpleEventsServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.SimpleEventsServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart Tutorial Server</ApplicationName>\n  <ApplicationUri>urn:localhost:somecompany.com:TutorialServer</ApplicationUri>\n  <ProductUri>uri:somecompany.com:TutorialServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart Tutorial Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/TutorialServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/TutorialServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>2</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <!--\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>\n      -->\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>true</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>TutorialServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <TutorialServerConfiguration xmlns=\"http://somecompany.com/Tutorial\">\n      </TutorialServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\TutorialServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart Tutorial Server</ApplicationName>\n  <ApplicationUri>urn:localhost:somecompany.com:TutorialServer</ApplicationUri>\n  <ProductUri>uri:somecompany.com:TutorialServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart Tutorial Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/TutorialServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/TutorialServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>2</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <!--\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>\n      -->\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>true</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>TutorialServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <TutorialServerConfiguration xmlns=\"http://somecompany.com/Tutorial\">\n      </TutorialServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\TutorialServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart Tutorial Server</ApplicationName>\n  <ApplicationUri>urn:localhost:somecompany.com:TutorialServer</ApplicationUri>\n  <ProductUri>uri:somecompany.com:TutorialServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart Tutorial Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/TutorialServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/TutorialServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>2</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <!--\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>\n      -->\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>true</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>TutorialServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <TutorialServerConfiguration xmlns=\"http://somecompany.com/Tutorial\">\n      </TutorialServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\TutorialServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart UserAuthentication Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UA:Quickstarts:UserAuthenticationServer</ApplicationUri>\n  <ProductUri>uri:opcfoundation.org:Quickstarts:UserAuthenticationServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart UserAuthentication Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/Quickstarts/UserAuthenticationServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/Quickstarts/UserAuthenticationServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <!--\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>2</SecurityLevel>\n      </ServerSecurityPolicy>\n      -->\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <!--\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>\n      -->\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n        <ua:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</ua:SecurityPolicyUri>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n\n      <!--\n      The ServicePrincipalName (SPN) for the UA Server must be specified as the IssuerEndpointUrl\n      \n      The ServicePrincipalName (SPN) must be registered with the Kerberos Ticket Granting Server (e.g. Windows Domain Controller).\n      The SPN identifies the host that UA server is running on and the name of the application.\n      A domain admin must grant delegate permission to the domain account that the UA server runs under.\n      That can be done with the setspn.exe utility:\n      \n      setspn -U -S <hostname>/<exename> <domain accountname>\n      setspn -C -S <hostname>/<exename> <hostname>\n      \n      The latter form is used if the UA server runs a Windows Service using the built in Windows Service account.   \n      -->\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>http://docs.oasis-open.org/wss/oasis-wss-kerberos-token-profile-1.1</ua:IssuedTokenType>\n        <ua:IssuerEndpointUrl>Aquamarine/Opc.Ua.UserAuthenticationServer</ua:IssuerEndpointUrl>\n      </ua:UserTokenPolicy>\n      \n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Quickstarts.UserAuthenticationServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <UserAuthenticationServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/UserAuthentication\">\n      </UserAuthenticationServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.UserAuthenticationServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart Views Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UA:Quickstarts:ViewsServer</ApplicationUri>\n  <ProductUri>uri:opcfoundation.org:Quickstarts:ViewsServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart Views Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>https://localhost:62545/Quickstarts/ViewsServer/</ua:String>\n      <ua:String>opc.tcp://localhost:62546/Quickstarts/ViewsServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>3</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>2</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <!--\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</SecurityPolicyUri>\n        <SecurityLevel>4</SecurityLevel>\n      </ServerSecurityPolicy>\n      -->\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Quickstarts.ViewsServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <ViewsServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/Views\">\n      </ViewsServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.ViewsServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>"], "fixing_code": ["<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>UA COM Server Wrapper</ApplicationName>\n  <ApplicationUri>urn:localhost:UA:ComServerWrapper</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/UA/ComServerWrapper</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n\n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>UA COM Server Wrapper</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Windows</StoreType>\n      <StorePath>LocalMachine\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n    <AutoAcceptUntrustedCertificates>false</AutoAcceptUntrustedCertificates>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations />\n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>4194304</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>opc.tcp://localhost:48400/UA/ComServerWrapper</ua:String>\n      <ua:String>http://localhost:48401/UA/ComServerWrapper</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <MinRequestThreadCount>5</MinRequestThreadCount>\n    <MaxRequestThreadCount>100</MaxRequestThreadCount>\n    <MaxQueuedRequestCount>2000</MaxQueuedRequestCount>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n    </UserTokenPolicies>\n    \n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>100</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates />\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Opc.Ua.Server.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <ComWrapperServerConfiguration xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://opcfoundation.org/UA/SDK/COMInterop\">\n        <WrappedServers>\n          <ComClientConfiguration i:type=\"ComDaClientConfiguration\">\n            <ServerUrl>opc.com://localhost/OPCSample.OpcDa20Server</ServerUrl>\n            <ServerName>DA</ServerName>\n            <MaxReconnectWait>10000</MaxReconnectWait>\n            <SeperatorChars></SeperatorChars>\n            <AvailableLocales>\n              <ua:String>en-US</ua:String>\n              <ua:String>de-DE</ua:String>\n              <ua:String>ja-JP</ua:String>\n            </AvailableLocales>\n            <BrowseToNotSupported>false</BrowseToNotSupported>\n          </ComClientConfiguration>\n          <ComClientConfiguration i:type=\"ComAeClientConfiguration\">\n            <ServerUrl>opc.com://localhost/OPCSample.OPCEventServer/{65168852-5783-11d1-84a0-00608cb8a7e9}</ServerUrl>\n            <ServerName>AE</ServerName>\n            <MaxReconnectWait>10000000</MaxReconnectWait>\n            <SeperatorChars>\\</SeperatorChars>\n            <AvailableLocales>\n              <ua:String>en-US</ua:String>\n              <ua:String>de-DE</ua:String>\n              <ua:String>ja-JP</ua:String>\n            </AvailableLocales>\n          </ComClientConfiguration>\n          <ComClientConfiguration i:type=\"ComHdaClientConfiguration\">\n            <ServerUrl>opc.com://localhost/OPCSample.OpcHdaServer/{6a5eedec-1509-4627-997f-993ccb65ab7c}</ServerUrl>\n            <ServerName>HDA</ServerName>\n            <MaxReconnectWait>10000</MaxReconnectWait>\n            <SeperatorChars></SeperatorChars>\n            <AddCapabilitiesToServerObject>true</AddCapabilitiesToServerObject>\n            <AttributeSamplingInterval>1000</AttributeSamplingInterval>\n            <TreatUncertainAsBad>true</TreatUncertainAsBad>\n            <PercentDataBad>0</PercentDataBad>\n            <PercentDataGood>100</PercentDataGood>\n            <SteppedSlopedExtrapolation>false</SteppedSlopedExtrapolation>\n          </ComClientConfiguration>\n        </WrappedServers>\n      </ComWrapperServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Opc.Ua.ComServerWrapper.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>1023</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n\n</ApplicationConfiguration>\n", "/* ========================================================================\n * Copyright (c) 2005-2017 The OPC Foundation, Inc. All rights reserved.\n *\n * OPC Foundation MIT License 1.00\n * \n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n * \n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n *\n * The complete license agreement can be found here:\n * http://opcfoundation.org/License/MIT/1.00/\n * ======================================================================*/\n\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.Windows.Forms;\nusing System.Reflection;\nusing System.IO;\nusing System.Threading;\n\nusing Opc.Ua.Configuration;\nusing System.Security.Cryptography.X509Certificates;\n\nnamespace Opc.Ua.Client.Controls\n{\n    /// <summary>\n    /// Prompts the user to edit a ComPseudoServerDlg.\n    /// </summary>\n    public partial class ConfiguredServerDlg : Form\n    {\n        #region Constructors\n        /// <summary>\n        /// Initializes the dialog.\n        /// </summary>\n        public ConfiguredServerDlg()\n        {\n            InitializeComponent();\n            this.Icon = ClientUtils.GetAppIcon();\n\n            m_userIdentities = new Dictionary<string, UserIdentityToken>();\n            m_statusObject = new StatusObject((int)StatusChannel.MaxStatusChannels);\n        }\n        #endregion\n\n        #region Private Fields\n        /// <summary>\n        /// The possible encodings.\n        /// </summary>\n        private enum Encoding\n        {\n            Default,\n            Xml,\n            Binary\n        }\n\n        /// <summary>\n        /// The possible COM identities.\n        /// </summary>\n        private enum ComIdentityType\n        {\n            None = -1,\n            DA = (int)ComSpecification.DA,\n            AE = (int)ComSpecification.AE,\n            HDA = (int)ComSpecification.HDA\n        }\n\n        /// <summary>\n        /// The type of status (for coloring the status textbox).\n        /// </summary>\n        private enum StatusType\n        {\n            Ok = 0,\n            Warning = 1,\n            Error = 2\n        }\n\n        /// <summary>\n        /// The status channel inside the StatusObject.\n        /// </summary>\n        private enum StatusChannel\n        {\n            Discovery = 0,\n            SelectedSecurityMode = 1,\n            ApplicationType = 2,\n            SelectedProtocol = 3,\n            ApplicationUri = 4,\n            DiscoveryURLs = 5,\n            Server = 6,\n            DifferentCertificate = 7,\n            SecurityPolicyUri = 8,\n            TransportProfileUri = 9,\n            SelectedSecurityPolicy = 10,\n            MaxStatusChannels = 11\n        }\n\n        /// <summary>\n        /// Whether to override limits\n        /// </summary>\n        private enum UseDefaultLimits\n        {\n            Yes,\n            No\n        }\n\n        /// <summary>\n        /// This class merges multiple error/warning/status codes from multiple sources.\n        /// Initialize it with the number of status channels and update \"StatusChannel\" accordingly.\n        /// Provides a general view of all the statuses (joined texts, worst status).\n        /// </summary>\n        private class StatusObject\n        {\n            public StatusObject(int maxChannels)\n            {\n                m_maxChannels = maxChannels;\n                m_statusTexts = new string[maxChannels];\n                m_statusTypes = new StatusType[maxChannels];\n\n                for (int i = 0; i < m_maxChannels; ++i)\n                {\n                    m_statusTexts[i] = String.Empty;\n                    m_statusTypes[i] = StatusType.Ok;\n                }\n            }\n\n            public String StatusString\n            {\n                get\n                {\n                    String status = String.Empty;\n\n                    for (int i = 0; i < m_maxChannels; ++i)\n                    {\n                        if (!String.IsNullOrEmpty(m_statusTexts[i]))\n                        {\n                            if (!String.IsNullOrEmpty(status))\n                            {\n                                status += \" | \";\n                            }\n\n                            status += m_statusTexts[i];\n                        }\n                    }\n\n                    return status;\n                }\n            }\n\n            public StatusType StatusType\n            {\n                get\n                {\n                    StatusType type = StatusType.Ok;\n                    \n                    for (int i = 0; i < m_maxChannels; ++i)\n                    {\n                        if (m_statusTypes[i] > type)\n                        {\n                            type = m_statusTypes[i];\n                        }\n                    }\n\n                    return type;\n                }\n            }\n\n            public void SetStatus(StatusChannel channel, String text, StatusType type)\n            {\n                int intChannel = (int)channel;\n\n                if ((intChannel >= 0) && (intChannel < m_maxChannels))\n                {\n                    m_statusTexts[intChannel] = text;\n                    m_statusTypes[intChannel] = type;\n                }\n            }\n\n            public void ClearStatus(StatusChannel channel)\n            {\n                int intChannel = (int)channel;\n\n                if ((intChannel >= 0) && (intChannel < m_maxChannels))\n                {\n                    m_statusTexts[intChannel] = String.Empty;\n                    m_statusTypes[intChannel] = StatusType.Ok;\n                }\n            }\n\n            private int m_maxChannels;\n            private String[] m_statusTexts;\n            private StatusType[] m_statusTypes;\n        }\n\n        /// <summary>\n        /// This class is used by the EndopintListLB (list box).\n        /// Holds references to the received EndpointDescription and its MessageSecurityMode, SecurityPolicyUri, MessageSecurityMode and EncodingSupport.\n        /// Also prepares a user-friendly text representation of all the endpoint-rellevant characteristics.\n        /// The extracted EndpointDescription properties are used in selecting the right combo-box values when user clicks in the endpoint list box.\n        /// </summary>\n        private class EndpointDescriptionString\n        {\n            public EndpointDescriptionString(EndpointDescription endpointDescription)\n            {\n                m_endpointDescription = endpointDescription;\n                m_protocol = new Protocol(endpointDescription);\n                m_currentPolicy = SecurityPolicies.GetDisplayName(endpointDescription.SecurityPolicyUri);\n                m_messageSecurityMode = endpointDescription.SecurityMode;\n\n                switch (m_endpointDescription.EncodingSupport)\n                {\n                    case BinaryEncodingSupport.None:\n                        {\n                            m_encoding = Encoding.Xml;\n                            break;\n                        }\n\n                    case BinaryEncodingSupport.Optional:\n                    case BinaryEncodingSupport.Required:\n                        {\n                            m_encoding = Encoding.Binary;\n                            break;\n                        }\n                }\n\n                BuildEndpointDescription();\n            }\n\n            public EndpointDescription EndpointDescription\n            {\n                get\n                {\n                    return m_endpointDescription;\n                }\n            }\n\n            public Protocol Protocol\n            {\n                get\n                {\n                    return m_protocol;\n                }\n            }\n\n            public string CurrentPolicy\n            {\n                get\n                {\n                    return m_currentPolicy;\n                }\n            }\n\n            public MessageSecurityMode MessageSecurityMode\n            {\n                get\n                {\n                    return m_messageSecurityMode;\n                }\n            }\n\n            public Encoding Encoding\n            {\n                get\n                {\n                    return m_encoding;\n                }\n            }\n\n            public override string ToString()\n            {\n                return m_stringRepresentation;\n            }\n\n            private void BuildEndpointDescription()\n            {\n                m_stringRepresentation = m_protocol.ToString() + \" - \";\n                m_stringRepresentation += m_endpointDescription.SecurityMode + \" - \";\n                m_stringRepresentation += SecurityPolicies.GetDisplayName(m_endpointDescription.SecurityPolicyUri) + \" - \";\n\n                switch (m_endpointDescription.EncodingSupport)\n                {\n                    case BinaryEncodingSupport.None:\n                        {\n                            m_stringRepresentation += Encoding.Xml;\n                            break;\n                        }\n\n                    case BinaryEncodingSupport.Required:\n                        {\n                            m_stringRepresentation += Encoding.Binary;\n                            break;\n                        }\n\n                    case BinaryEncodingSupport.Optional:\n                        {\n                            m_stringRepresentation += Encoding.Binary + \"/\" + Encoding.Xml;\n                            break;\n                        }\n                }\n\n            }\n\n            private Protocol m_protocol;\n            private EndpointDescription m_endpointDescription;\n            private MessageSecurityMode m_messageSecurityMode;\n            private string m_currentPolicy;\n            private Encoding m_encoding;\n            private string m_stringRepresentation;\n        }\n\n        private ConfiguredEndpoint m_endpoint;\n        private EndpointDescription m_currentDescription;\n        private EndpointDescriptionCollection m_availableEndpoints;\n        private List<EndpointDescriptionString> m_availableEndpointsDescriptions;\n        private int m_discoveryTimeout;\n        private int m_discoverCount;\n        private ApplicationConfiguration m_configuration;\n        private bool m_updating;\n        private bool m_selecting;\n        private Dictionary<string, UserIdentityToken> m_userIdentities;\n        private EndpointComIdentity m_comIdentity;\n        private EndpointConfiguration m_endpointConfiguration;\n        private bool m_discoverySucceeded;\n        private Uri m_discoveryUrl;\n        private bool m_showAllOptions;\n        private String m_discoveryStatus;\n        private StatusObject m_statusObject;\n        #endregion\n\n        #region Public Interface\n        public EndpointDescriptionCollection AvailableEnpoints\n        {\n            get { return m_availableEndpoints; }\n        }\n\n        /// <summary>\n        /// The timeout in milliseconds to use when discovering servers.\n        /// </summary>\n        [System.ComponentModel.DefaultValue(20000)]\n        public int DiscoveryTimeout\n        {\n            get { return m_discoveryTimeout; }\n            set { Interlocked.Exchange(ref m_discoveryTimeout, value); }\n        }\n        /// <summary>\n        /// Displays the dialog.\n        /// </summary>\n        public ConfiguredEndpoint ShowDialog(ApplicationDescription server, ApplicationConfiguration configuration)\n        {\n            if (server == null) throw new ArgumentNullException(\"server\");\n\n            m_configuration = configuration;\n\n            // construct a list of available endpoint descriptions for the application.\n            m_availableEndpoints = new EndpointDescriptionCollection();\n            m_availableEndpointsDescriptions = new List<EndpointDescriptionString>();\n            m_endpointConfiguration = EndpointConfiguration.Create(configuration);\n\n            // create a default endpoint description.\n            m_endpoint = null;\n            m_currentDescription = null;\n\n            // initializing the protocol will trigger an update to all other controls.\n            InitializeProtocols(m_availableEndpoints);\n            BuildEndpointDescriptionStrings(m_availableEndpoints);\n\n            // discover endpoints in the background.\n            m_discoverySucceeded = false;\n            Interlocked.Increment(ref m_discoverCount);\n            ThreadPool.QueueUserWorkItem(new WaitCallback(OnDiscoverEndpoints), server);\n\n            if (ShowDialog() != DialogResult.OK)\n            {\n                return null;\n            }\n\n            return m_endpoint;\n        }\n\n        /// <summary>\n        /// Displays the dialog.\n        /// </summary>\n        public ConfiguredEndpoint ShowDialog(ConfiguredEndpoint endpoint, ApplicationConfiguration configuration)\n        {\n            if (endpoint == null) throw new ArgumentNullException(\"endpoint\");\n\n            m_endpoint = endpoint;\n            m_configuration = configuration;\n\n            // construct a list of available endpoint descriptions for the application.\n            m_availableEndpoints = new EndpointDescriptionCollection();\n            m_availableEndpointsDescriptions = new List<EndpointDescriptionString>();\n\n            m_availableEndpoints.Add(endpoint.Description);\n            m_currentDescription = endpoint.Description;\n            m_endpointConfiguration = endpoint.Configuration;\n\n            if (m_endpointConfiguration == null)\n            {\n                m_endpointConfiguration = EndpointConfiguration.Create(configuration);\n            }\n\n            if (endpoint.Collection != null)\n            {\n                foreach (ConfiguredEndpoint existingEndpoint in endpoint.Collection.Endpoints)\n                {\n                    if (existingEndpoint.Description.Server.ApplicationUri == endpoint.Description.Server.ApplicationUri)\n                    {\n                        m_availableEndpoints.Add(existingEndpoint.Description);\n                    }\n                }\n            }\n\n            BuildEndpointDescriptionStrings(m_availableEndpoints);\n\n            UserTokenPolicy policy = m_endpoint.SelectedUserTokenPolicy;\n\n            if (policy == null)\n            {\n                if (m_endpoint.Description.UserIdentityTokens.Count > 0)\n                {\n                    policy = m_endpoint.Description.UserIdentityTokens[0];\n                }\n            }\n\n            if (policy != null)\n            {\n                UserTokenItem userTokenItem = new UserTokenItem(policy);\n\n                if (policy.TokenType == UserTokenType.UserName && m_endpoint.UserIdentity is UserNameIdentityToken)\n                {\n                    m_userIdentities[userTokenItem.ToString()] = m_endpoint.UserIdentity;\n                }\n\n                if (policy.TokenType == UserTokenType.Certificate && m_endpoint.UserIdentity is X509IdentityToken)\n                {\n                    m_userIdentities[userTokenItem.ToString()] = m_endpoint.UserIdentity;\n                }\n\n                if (policy.TokenType == UserTokenType.IssuedToken && m_endpoint.UserIdentity is IssuedIdentityToken)\n                {\n                    m_userIdentities[userTokenItem.ToString()] = m_endpoint.UserIdentity;\n                }\n            }\n\n            // copy com identity.\n            m_comIdentity = endpoint.ComIdentity;\n\n            // initializing the protocol will trigger an update to all other controls.\n            InitializeProtocols(m_availableEndpoints);\n\n            // check if the current settings match the defaults.\n            EndpointConfiguration defaultConfiguration = EndpointConfiguration.Create(configuration);\n\n            // discover endpoints in the background.\n            Interlocked.Increment(ref m_discoverCount);\n            ThreadPool.QueueUserWorkItem(new WaitCallback(OnDiscoverEndpoints), m_endpoint.Description.Server);\n\n            if (ShowDialog() != DialogResult.OK)\n            {\n                return null;\n            }\n\n            return m_endpoint;\n        }\n        #endregion\n\n        #region Private Methods\n\n        /// <summary>\n        /// Creates the string representation of each EndpointDescription - to be used in the Endpoint Description List\n        /// </summary>\n        private void BuildEndpointDescriptionStrings(EndpointDescriptionCollection endpoints)\n        {\n            lock (m_availableEndpointsDescriptions)\n            {\n                m_availableEndpointsDescriptions.Clear();\n\n                foreach (EndpointDescription endpoint in endpoints)\n                {\n                    m_availableEndpointsDescriptions.Add(new EndpointDescriptionString(endpoint));\n                }\n\n                InitializeEndpointList(m_availableEndpointsDescriptions);\n            }\n        }\n\n        /// <summary>\n        /// Returns true if the configuration is the same as the default.\n        /// </summary>\n        private bool SameAsDefaults(EndpointConfiguration defaultConfiguration, EndpointConfiguration currentConfiguration)\n        {\n            if (defaultConfiguration.ChannelLifetime != currentConfiguration.ChannelLifetime)\n            {\n                return false;\n            }\n\n            if (defaultConfiguration.MaxArrayLength != currentConfiguration.MaxArrayLength)\n            {\n                return false;\n            }\n\n            if (defaultConfiguration.MaxBufferSize != currentConfiguration.MaxBufferSize)\n            {\n                return false;\n            }\n\n            if (defaultConfiguration.MaxByteStringLength != currentConfiguration.MaxByteStringLength)\n            {\n                return false;\n            }\n\n            if (defaultConfiguration.MaxMessageSize != currentConfiguration.MaxMessageSize)\n            {\n                return false;\n            }\n\n            if (defaultConfiguration.MaxStringLength != currentConfiguration.MaxStringLength)\n            {\n                return false;\n            }\n\n            if (defaultConfiguration.OperationTimeout != currentConfiguration.OperationTimeout)\n            {\n                return false;\n            }\n\n            if (defaultConfiguration.SecurityTokenLifetime != currentConfiguration.SecurityTokenLifetime)\n            {\n                return false;\n            }\n\n            if (defaultConfiguration.UseBinaryEncoding != currentConfiguration.UseBinaryEncoding)\n            {\n                return false;\n            }\n\n            return true;\n        }\n\n        /// <summary>\n        /// Finds the best match for the current protocol and security selections.\n        /// </summary>\n        private EndpointDescription FindBestEndpointDescription(EndpointDescriptionCollection endpoints)\n        {\n            // filter by the current protocol.\n            Protocol currentProtocol = (Protocol)ProtocolCB.SelectedItem;\n\n            // filter by the current security mode.\n            MessageSecurityMode currentMode = MessageSecurityMode.None;\n\n            if (SecurityModeCB.SelectedIndex != -1)\n            {\n                currentMode = (MessageSecurityMode)SecurityModeCB.SelectedItem;\n            }\n\n            // filter by the current security policy.\n            string currentPolicy = (string)SecurityPolicyCB.SelectedItem;\n\n            // find all matching descriptions.      \n            EndpointDescriptionCollection matches = new EndpointDescriptionCollection();\n\n            if (endpoints != null)\n            {\n                foreach (EndpointDescription endpoint in endpoints)\n                {\n                    Uri url = Utils.ParseUri(endpoint.EndpointUrl);\n\n                    if (url == null)\n                    {\n                        continue;\n                    }\n\n                    if ((currentProtocol != null) && (!currentProtocol.Matches(url)))\n                    {\n                        continue;\n                    }\n\n                    if (currentMode != endpoint.SecurityMode)\n                    {\n                        continue;\n                    }\n\n                    if (currentPolicy != SecurityPolicies.GetDisplayName(endpoint.SecurityPolicyUri))\n                    {\n                        continue;\n                    }\n\n                    matches.Add(endpoint);\n                }\n            }\n\n            // check for no matches.\n            if (matches.Count == 0)\n            {\n                return null;\n            }\n\n            // check for single match.\n            if (matches.Count == 1)\n            {\n                return matches[0];\n            }\n\n            // choose highest priority.\n            EndpointDescription bestMatch = matches[0];\n\n            for (int ii = 1; ii < matches.Count; ii++)\n            {\n                if (bestMatch.SecurityLevel < matches[ii].SecurityLevel)\n                {\n                    bestMatch = matches[ii];\n                }\n            }\n\n            return bestMatch;\n        }\n\n        private class Protocol\n        {\n            public Uri Url;\n            public string Profile;\n\n            public Protocol(string url)\n            {\n                Url = Utils.ParseUri(url);\n            }\n\n            public Protocol(EndpointDescription url)\n            {\n                Url = null;\n\n                if (url != null)\n                {\n                    Url = Utils.ParseUri(url.EndpointUrl);\n\n                    if ((Url != null) && (Url.Scheme == Utils.UriSchemeHttp))\n                    {\n                        switch (url.TransportProfileUri)\n                        {\n                            case Profiles.HttpsXmlTransport:\n                            case Profiles.HttpsBinaryTransport:\n                            case Profiles.HttpsXmlOrBinaryTransport:\n                                {\n                                    Profile = \"REST\";\n                                    break;\n                                }\n\n                            case Profiles.WsHttpXmlTransport:\n                            case Profiles.WsHttpXmlOrBinaryTransport:\n                                {\n                                    Profile = \"WS-*\";\n                                    break;\n                                }\n                        }\n                    }\n                }\n            }\n\n            public bool Matches(Uri url)\n            {\n                if (url == null || Url == null)\n                {\n                    return false;\n                }\n\n                if (url.Scheme != Url.Scheme)\n                {\n                    return false;\n                }\n\n                if (url.DnsSafeHost != Url.DnsSafeHost)\n                {\n                    return false;\n                }\n\n                if (url.Port != Url.Port)\n                {\n                    return false;\n                }\n\n                return true;\n            }\n\n            public override string ToString()\n            {\n                if (Url == null)\n                {\n                    return String.Empty;\n                }\n\n                StringBuilder builder = new StringBuilder();\n                builder.Append(Url.Scheme);\n\n                if (!String.IsNullOrEmpty(Profile))\n                {\n                    builder.Append(\" \");\n                    builder.Append(Profile);\n                }\n\n                builder.Append(\" [\");\n                builder.Append(Url.DnsSafeHost);\n\n                if (Url.Port != -1)\n                {\n                    builder.Append(\":\");\n                    builder.Append(Url.Port);\n                }\n\n                builder.Append(\"]\");\n\n                return builder.ToString();\n            }\n        }\n\n        /// <summary>\n        /// Initializes the protocol dropdown.\n        /// </summary>\n        private void InitializeProtocols(EndpointDescriptionCollection endpoints)\n        {\n            // preserve the existing value.\n            Protocol currentProtocol = (Protocol)ProtocolCB.SelectedItem;\n\n            ProtocolCB.Items.Clear();\n\n            // set all available protocols.\n            if (m_showAllOptions)\n            {\n                ProtocolCB.Items.Add(new Protocol(\"http://localhost\"));\n                ProtocolCB.Items.Add(new Protocol(\"https://localhost\"));\n                ProtocolCB.Items.Add(new Protocol(\"opc.tcp://localhost\"));\n            }\n\n            // find all unique protocols.\n            else\n            {\n                if (endpoints != null)\n                {\n                    foreach (EndpointDescription endpoint in endpoints)\n                    {\n                        Uri url = Utils.ParseUri(endpoint.EndpointUrl);\n\n                        if (url != null)\n                        {\n                            bool found = false;\n\n                            for (int ii = 0; ii < ProtocolCB.Items.Count; ii++)\n                            {\n                                if (((Protocol)ProtocolCB.Items[ii]).Matches(url))\n                                {\n                                    found = true;\n                                    break;\n                                }\n                            }\n\n                            if (!found)\n                            {\n                                ProtocolCB.Items.Add(new Protocol(endpoint));\n                            }\n                        }\n                    }\n                }\n\n                // add at least one protocol.\n                if (ProtocolCB.Items.Count == 0)\n                {\n                    ProtocolCB.Items.Add(new Protocol(\"opc.tcp://localhost\"));\n                }\n            }\n\n            // set the current value.\n            int index = 0;\n\n            if (currentProtocol != null)\n            {\n                index = 0;\n                \n                for (int ii = 0; ii < ProtocolCB.Items.Count; ii++)\n                {\n                    if (((Protocol)ProtocolCB.Items[ii]).Matches(currentProtocol.Url))\n                    {\n                        index = ii;\n                        break;\n                    }\n                }\n            }\n\n            ProtocolCB.SelectedIndex = index;\n        }\n\n        /// <summary>\n        /// Initializes the security modes dropdown.\n        /// </summary>\n        private void InitializeSecurityModes(EndpointDescriptionCollection endpoints)\n        {\n            // filter by the current protocol.\n            Protocol currentProtocol = (Protocol)ProtocolCB.SelectedItem;\n\n            // preserve the existing value.\n            MessageSecurityMode currentMode = MessageSecurityMode.None;\n\n            if (SecurityModeCB.SelectedIndex != -1)\n            {\n                currentMode = (MessageSecurityMode)SecurityModeCB.SelectedItem;\n            }\n\n            SecurityModeCB.Items.Clear();\n\n            // set all available security modes.\n            if (m_showAllOptions)\n            {\n                SecurityModeCB.Items.Add(MessageSecurityMode.None);\n                SecurityModeCB.Items.Add(MessageSecurityMode.Sign);\n                SecurityModeCB.Items.Add(MessageSecurityMode.SignAndEncrypt);\n            }\n\n            // find all unique security modes.\n            else\n            {\n                if (endpoints != null)\n                {\n                    foreach (EndpointDescription endpoint in endpoints)\n                    {\n                        Uri url = Utils.ParseUri(endpoint.EndpointUrl);\n\n                        if ((url != null) && (currentProtocol != null))\n                        {\n                            if (!currentProtocol.Matches(url))\n                            {\n                                continue;\n                            }\n\n                            if (!SecurityModeCB.Items.Contains(endpoint.SecurityMode))\n                            {\n                                SecurityModeCB.Items.Add(endpoint.SecurityMode);\n                            }\n                        }\n                    }\n                }\n\n                // add at least one policy.\n                if (SecurityModeCB.Items.Count == 0)\n                {\n                    SecurityModeCB.Items.Add(MessageSecurityMode.None);\n                }\n            }\n\n            // set the current value.\n            int index = SecurityModeCB.Items.IndexOf(currentMode);\n\n            if (index == -1)\n            {\n                index = 0;\n            }\n\n            SecurityModeCB.SelectedIndex = index;\n        }\n\n        /// <summary>\n        /// Initializes the security policies dropdown.\n        /// </summary>\n        private void InitializeSecurityPolicies(EndpointDescriptionCollection endpoints)\n        {\n            // filter by the current protocol.\n            Protocol currentProtocol = (Protocol)ProtocolCB.SelectedItem;\n\n            // filter by the current security mode.\n            MessageSecurityMode currentMode = MessageSecurityMode.None;\n\n            if (SecurityModeCB.SelectedIndex != -1)\n            {\n                currentMode = (MessageSecurityMode)SecurityModeCB.SelectedItem;\n            }\n\n            // preserve the existing value.\n            string currentPolicy = (string)SecurityPolicyCB.SelectedItem;\n\n            SecurityPolicyCB.Items.Clear();\n\n            // set all available security policies.\n            if (m_showAllOptions)\n            {\n                SecurityPolicyCB.Items.Add(SecurityPolicies.GetDisplayName(SecurityPolicies.None));\n                SecurityPolicyCB.Items.Add(SecurityPolicies.GetDisplayName(SecurityPolicies.Basic128Rsa15));\n                SecurityPolicyCB.Items.Add(SecurityPolicies.GetDisplayName(SecurityPolicies.Basic256));\n                SecurityPolicyCB.Items.Add(SecurityPolicies.GetDisplayName(SecurityPolicies.Basic256Sha256));\n            }\n\n            // find all unique security policies.    \n            else\n            {\n                if (endpoints != null)\n                {\n                    foreach (EndpointDescription endpoint in endpoints)\n                    {\n                        Uri url = Utils.ParseUri(endpoint.EndpointUrl);\n\n                        if ((url != null) && (currentProtocol != null))\n                        {\n                            if (!currentProtocol.Matches(url))\n                            {\n                                continue;\n                            }\n\n                            if (currentMode != endpoint.SecurityMode)\n                            {\n                                continue;\n                            }\n\n                            string policyName = SecurityPolicies.GetDisplayName(endpoint.SecurityPolicyUri);\n\n                            if (policyName != null)\n                            {\n                                int existingIndex = SecurityPolicyCB.FindStringExact(policyName);\n\n                                if (existingIndex == -1)\n                                {\n                                    SecurityPolicyCB.Items.Add(policyName);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // add at least one policy.\n            if (SecurityPolicyCB.Items.Count == 0)\n            {\n                SecurityPolicyCB.Items.Add(SecurityPolicies.GetDisplayName(SecurityPolicies.None));\n            }\n\n            // set the current value.\n            int index = 0;\n\n            if (!String.IsNullOrEmpty(currentPolicy))\n            {\n                index = SecurityPolicyCB.FindStringExact(currentPolicy);\n\n                if (index == -1)\n                {\n                    index = 0;\n                }\n            }\n\n            SecurityPolicyCB.SelectedIndex = index;\n        }\n\n        /// <summary>\n        /// Initializes the message encodings dropdown.\n        /// </summary>\n        private void InitializeEncodings(EndpointDescriptionCollection endpoints, EndpointDescription endpoint)\n        {\n            // preserve the existing value.\n            Encoding currentEncoding = Encoding.Default;\n\n            if (EncodingCB.SelectedIndex != -1)\n            {\n                currentEncoding = (Encoding)EncodingCB.SelectedItem;\n            }\n\n            EncodingCB.Items.Clear();\n\n            if (endpoint != null)\n            {\n                Protocol protocol = new Protocol(endpoint);\n                String securityPolicy = SecurityPolicies.GetDisplayName(endpoint.SecurityPolicyUri);\n\n                foreach (EndpointDescription endpointDescription in endpoints)\n                {\n                    if ((protocol.Matches(Utils.ParseUri(endpointDescription.EndpointUrl))) &&\n                        (endpoint.SecurityMode == endpointDescription.SecurityMode) &&\n                        (securityPolicy == SecurityPolicies.GetDisplayName(endpointDescription.SecurityPolicyUri)))\n                    {\n                        switch (endpointDescription.EncodingSupport)\n                        {\n                            case BinaryEncodingSupport.None:\n                                {\n                                    if (!EncodingCB.Items.Contains(Encoding.Xml))\n                                    {\n                                        EncodingCB.Items.Add(Encoding.Xml);\n                                    }\n                                    break;\n                                }\n\n                            case BinaryEncodingSupport.Required:\n                                {\n                                    if (!EncodingCB.Items.Contains(Encoding.Binary))\n                                    {\n                                        EncodingCB.Items.Add(Encoding.Binary);\n                                    }\n                                    break;\n                                }\n\n                            case BinaryEncodingSupport.Optional:\n                                {\n                                    if (!EncodingCB.Items.Contains(Encoding.Binary))\n                                    {\n                                        EncodingCB.Items.Add(Encoding.Binary);\n                                    }\n                                    if (!EncodingCB.Items.Contains(Encoding.Xml))\n                                    {\n                                        EncodingCB.Items.Add(Encoding.Xml);\n                                    }\n                                    break;\n                                }\n                        }\n                    }\n                }\n            }\n\n            // add at least one encoding.\n            if (EncodingCB.Items.Count == 0)\n            {\n                EncodingCB.Items.Add(Encoding.Default);\n            }\n\n            // set the current value.\n            int index = EncodingCB.Items.IndexOf(currentEncoding);\n\n            if (index == -1)\n            {\n                index = 0;\n            }\n\n            EncodingCB.SelectedIndex = index;\n        }\n\n        private class UserTokenItem\n        {\n            public UserTokenPolicy Policy;\n\n            public UserTokenItem(UserTokenPolicy policy)\n            {\n                Policy = policy;\n            }\n\n            public UserTokenItem(UserTokenType tokenType)\n            {\n                Policy = new UserTokenPolicy(tokenType);\n            }\n\n            public override string ToString()\n            {\n                if (Policy != null)\n                {\n                    if (String.IsNullOrEmpty(Policy.PolicyId))\n                    {\n                        return Policy.TokenType.ToString();\n                    }\n\n                    return Utils.Format(\"{0} [{1}]\", Policy.TokenType, Policy.PolicyId);\n                }\n\n                return UserTokenType.Anonymous.ToString();\n            }\n        }\n\n        /// <summary>\n        /// Initializes the endpoint list control.\n        /// </summary>\n        private void InitializeEndpointList(List<EndpointDescriptionString> endpoints)\n        {\n            EndpointListLB.Items.Clear();\n\n            foreach (EndpointDescriptionString endpointString in endpoints)\n            {\n                EndpointListLB.Items.Add(endpointString);\n            }\n        }\n\n        private void SelectCorrespondingEndpointFromList(EndpointDescription endpoint)\n        {\n            if (!m_selecting)\n            {\n                int index = -1;\n\n                // try to match endpoint description id\n                if (endpoint != null)\n                {\n                    for (int ii = 0; ii < EndpointListLB.Items.Count; ii++)\n                    {\n                        if (endpoint == ((EndpointDescriptionString)EndpointListLB.Items[ii]).EndpointDescription)\n                        {\n                            index = ii;\n                            break;\n                        }\n                    }\n                }\n\n                EndpointListLB.SelectedIndex = index;\n            }\n        }\n\n        /// <summary>\n        /// Attempts fetch the list of servers from the discovery server.\n        /// </summary>\n        private void OnDiscoverEndpoints(object state)\n        {\n            int discoverCount = m_discoverCount;\n\n            // do nothing if a valid list is not provided.\n            ApplicationDescription server = state as ApplicationDescription;\n\n            if (server == null)\n            {\n                return;\n\n            }\n\n            OnUpdateStatus(new Tuple<String, StatusType>(\"Attempting to read latest configuration options from server.\", StatusType.Ok));\n\n            String discoveryMessage = String.Empty;\n\n            // process each url.\n            foreach (string discoveryUrl in server.DiscoveryUrls)\n            {\n                Uri url = Utils.ParseUri(discoveryUrl);\n\n                if (url != null)\n                {\n                    if (DiscoverEndpoints(url, out discoveryMessage))\n                    {\n                        m_discoverySucceeded = true;\n                        m_discoveryUrl = url;\n                        OnUpdateStatus(new Tuple<String, StatusType>(\"Configuration options are up to date.\", StatusType.Ok));\n                        return;\n                    }\n\n                    // check if another discover operation has started.\n                    if (discoverCount != m_discoverCount)\n                    {\n                        return;\n                    }\n                }\n            }\n\n            OnUpdateEndpoints(m_availableEndpoints);\n            OnUpdateStatus(new Tuple<String, StatusType>(\"Warning: Configuration options may not be correct because the server is not available (\" + discoveryMessage + \").\", StatusType.Warning));\n        }\n\n        /// <summary>\n        /// Fetches the servers from the discovery server.\n        /// </summary>\n        private bool DiscoverEndpoints(Uri discoveryUrl, out String message)\n        {\n            // use a short timeout.\n            EndpointConfiguration configuration = EndpointConfiguration.Create(m_configuration);\n            configuration.OperationTimeout = m_discoveryTimeout;\n\n            DiscoveryClient client = DiscoveryClient.Create(\n                discoveryUrl,\n                BindingFactory.Create(m_configuration, m_configuration.CreateMessageContext()),\n                EndpointConfiguration.Create(m_configuration));\n\n            try\n            {\n                EndpointDescriptionCollection endpoints = client.GetEndpoints(null);\n                OnUpdateEndpoints(endpoints);\n                message = String.Empty;\n                return true;\n            }\n            catch (Exception e)\n            {\n                Utils.Trace(\"Could not fetch endpoints from url: {0}. Reason={1}\", discoveryUrl, e.Message);\n                message = e.Message;\n                return false;\n            }\n            finally\n            {\n                client.Close();\n            }\n        }\n\n        /// <summary>\n        /// Updates the status displayed in the dialog.\n        /// </summary>\n        private void OnUpdateStatus(object status)\n        {\n            if (this.InvokeRequired)\n            {\n                this.BeginInvoke(new WaitCallback(OnUpdateStatus), status);\n                return;\n            }\n\n            Tuple<String, StatusType> statusTuple = status as Tuple<String, StatusType>;\n            m_statusObject.SetStatus(StatusChannel.Discovery, statusTuple.Item1, statusTuple.Item2);\n            UpdateStatus();\n        }\n\n        /// <summary>\n        /// Updates the list of servers displayed in the control.\n        /// </summary>\n        private void OnUpdateEndpoints(object state)\n        {\n            if (this.InvokeRequired)\n            {\n                this.BeginInvoke(new WaitCallback(OnUpdateEndpoints), state);\n                return;\n            }\n\n            try\n            {\n                // get the updated descriptions.\n                EndpointDescriptionCollection endpoints = state as EndpointDescriptionCollection;\n\n                if (endpoints == null)\n                {\n                    m_showAllOptions = true;\n                    InitializeProtocols(m_availableEndpoints);\n                }\n\n                else\n                {\n                    m_showAllOptions = false;\n\n                    m_availableEndpoints = endpoints;\n                    BuildEndpointDescriptionStrings(m_availableEndpoints);\n\n                    if (endpoints.Count > 0)\n                    {\n                        m_currentDescription = endpoints[0];\n                    }\n\n                    // initializing the protocol will trigger an update to all other controls.\n                    InitializeProtocols(m_availableEndpoints);\n\n                    // select the best security mode.\n                    MessageSecurityMode bestMode = MessageSecurityMode.Invalid;\n\n                    foreach (MessageSecurityMode securityMode in SecurityModeCB.Items)\n                    {\n                        if (securityMode > bestMode)\n                        {\n                            bestMode = securityMode;\n                        }\n                    }\n\n                    SecurityModeCB.SelectedItem = bestMode;\n\n                    // select the best encoding.\n                    Encoding bestEncoding = Encoding.Default;\n\n                    foreach (Encoding encoding in EncodingCB.Items)\n                    {\n                        if (encoding > bestEncoding)\n                        {\n                            bestEncoding = encoding;\n                        }\n                    }\n\n                    EncodingCB.SelectedItem = bestEncoding;\n                }\n\n                if (m_endpoint != null)\n                {\n                    Uri url = m_endpoint.EndpointUrl;\n\n                    foreach (Protocol protocol in ProtocolCB.Items)\n                    {\n                        if (protocol.Matches(url))\n                        {\n                            ProtocolCB.SelectedItem = protocol;\n                            break;\n                        }\n                    }\n\n                    foreach (MessageSecurityMode securityMode in SecurityModeCB.Items)\n                    {\n                        if (securityMode == m_endpoint.Description.SecurityMode)\n                        {\n                            SecurityModeCB.SelectedItem = securityMode;\n                            break;\n                        }\n                    }\n\n                    foreach (string securityPolicy in SecurityPolicyCB.Items)\n                    {\n                        if (securityPolicy == m_endpoint.Description.SecurityPolicyUri)\n                        {\n                            SecurityPolicyCB.SelectedItem = securityPolicy;\n                            break;\n                        }\n                    }\n\n                    foreach (Encoding encoding in EncodingCB.Items)\n                    {\n                        if (encoding == Encoding.Binary && m_endpoint.Configuration.UseBinaryEncoding)\n                        {\n                            EncodingCB.SelectedItem = encoding;\n                            break;\n                        }\n\n                        if (encoding == Encoding.Xml && !m_endpoint.Configuration.UseBinaryEncoding)\n                        {\n                            EncodingCB.SelectedItem = encoding;\n                            break;\n                        }\n                    }\n                }\n            }\n            catch (Exception e)\n            {\n                Utils.Trace(e, \"Unexpected error updating endpoints.\");\n            }\n        }\n\n        /// <summary>\n        /// Creates the endpoint description from current selections.\n        /// </summary>\n        private EndpointDescription CreateDescriptionFromSelections()\n        {\n            Protocol currentProtocol = (Protocol)ProtocolCB.SelectedItem;\n\n            EndpointDescription endpoint = null;\n\n            for (int ii = 0; ii < m_availableEndpoints.Count; ii++)\n            {\n                Uri url = Utils.ParseUri(m_availableEndpoints[ii].EndpointUrl);\n\n                if (url == null)\n                {\n                    continue;\n                }\n\n                if (endpoint == null)\n                {\n                    endpoint = m_availableEndpoints[ii];\n                }\n\n                if (currentProtocol.Matches(url))\n                {\n                    endpoint = m_availableEndpoints[ii];\n                    break;\n                }\n            }\n\n            UriBuilder builder = null;\n            string scheme = Utils.UriSchemeOpcTcp;\n            \n            if (currentProtocol != null && currentProtocol.Url != null)\n            {\n                scheme = currentProtocol.Url.Scheme;\n            }\n\n            if (endpoint == null)\n            {\n                builder = new UriBuilder();\n                builder.Host = \"localhost\";\n\n                if (scheme == Utils.UriSchemeOpcTcp)\n                {\n                    builder.Port = Utils.UaTcpDefaultPort;\n                }\n            }\n            else\n            {\n                builder = new UriBuilder(endpoint.EndpointUrl);\n            }\n\n            builder.Scheme = scheme;\n\n            endpoint = new EndpointDescription();\n            endpoint.EndpointUrl = builder.ToString();\n            endpoint.SecurityMode = (MessageSecurityMode)SecurityModeCB.SelectedItem;\n            endpoint.SecurityPolicyUri = SecurityPolicies.GetUri((string)SecurityPolicyCB.SelectedItem);\n            endpoint.Server.ApplicationName = endpoint.EndpointUrl;\n            endpoint.Server.ApplicationType = ApplicationType.Server;\n            endpoint.Server.ApplicationUri = endpoint.EndpointUrl;\n\n            return endpoint;\n        }\n        #endregion\n\n        #region Event Handlers\n        private void OkBTN_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                // check that discover has completed.\n                if (!m_discoverySucceeded)\n                {\n                    DialogResult result = MessageBox.Show(\n                        \"Endpoint information may be out of date because the discovery process has not completed. Continue anyways?\",\n                        this.Text,\n                        MessageBoxButtons.YesNo,\n                        MessageBoxIcon.Warning);\n\n                    if (result != DialogResult.Yes)\n                    {\n                        return;\n                    }\n                }\n\n                EndpointConfiguration configuration = m_endpointConfiguration;\n\n                if (configuration == null)\n                {\n                    configuration = EndpointConfiguration.Create(m_configuration);\n                }\n\n                if (m_currentDescription == null)\n                {\n                    m_currentDescription = CreateDescriptionFromSelections();\n                }\n\n                // the discovery endpoint should always be on the same machine as the server.\n                // if there is a mismatch it is likely because the server has multiple addresses\n                // and was not configured to return the current address to the client.\n                // The code automatically updates the domain in the url. \n                Uri endpointUrl = Utils.ParseUri(m_currentDescription.EndpointUrl);\n\n                if (m_discoverySucceeded)\n                {\n                    if (!Utils.AreDomainsEqual(endpointUrl, m_discoveryUrl))\n                    {\n                        UriBuilder url = new UriBuilder(endpointUrl);\n\n                        url.Host = m_discoveryUrl.DnsSafeHost;\n\n                        if (url.Scheme == m_discoveryUrl.Scheme)\n                        {\n                            url.Port = m_discoveryUrl.Port;\n                        }\n\n                        endpointUrl = url.Uri;\n\n                        m_currentDescription.EndpointUrl = endpointUrl.ToString();\n                    }\n                }\n\n                // set the encoding.\n                Encoding encoding = (Encoding)EncodingCB.SelectedItem;\n                configuration.UseBinaryEncoding = encoding != Encoding.Xml;\n\n                if (m_endpoint == null)\n                {\n                    m_endpoint = new ConfiguredEndpoint(null, m_currentDescription, configuration);\n                }\n                else\n                {\n                    m_endpoint.Update(m_currentDescription);\n                    m_endpoint.Update(configuration);\n                }\n\n                DialogResult = DialogResult.OK;\n            }\n            catch (Exception exception)\n            {\n                GuiUtils.HandleException(this.Text, MethodBase.GetCurrentMethod(), exception);\n            }\n        }\n\n        private void ProtocolCB_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            try\n            {\n                InitializeSecurityModes(m_availableEndpoints);\n\n                if (!m_updating)\n                {\n                    try\n                    {\n                        m_updating = true;\n\n                        // update current description.\n                        m_currentDescription = FindBestEndpointDescription(m_availableEndpoints);\n\n                        InitializeEncodings(m_availableEndpoints, m_currentDescription);\n                        SelectCorrespondingEndpointFromList(m_currentDescription);\n                    }\n                    finally\n                    {\n                        m_updating = false;\n                    }\n                }\n\n                if (ProtocolCB.SelectedItem != null)\n                {\n                    if (((Protocol)ProtocolCB.SelectedItem).Url.DnsSafeHost != m_endpoint.EndpointUrl.DnsSafeHost)\n                    {\n                        m_statusObject.SetStatus(StatusChannel.SelectedProtocol, \"Warning: Selected Endpoint hostname is different than initial hostname.\", StatusType.Warning);\n                    }\n                    else\n                    {\n                        m_statusObject.ClearStatus(StatusChannel.SelectedProtocol);\n                    }\n                }\n                else\n                {\n                    m_statusObject.SetStatus(StatusChannel.SelectedProtocol, \"Error: Selected Protocol is invalid.\", StatusType.Warning);\n                }\n\n                UpdateStatus();\n            }\n            catch (Exception exception)\n            {\n                GuiUtils.HandleException(this.Text, MethodBase.GetCurrentMethod(), exception);\n            }\n        }\n\n        private void SecurityModeCB_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            try\n            {\n                InitializeSecurityPolicies(m_availableEndpoints);\n\n                if (!m_updating)\n                {\n                    try\n                    {\n                        m_updating = true;\n\n                        // update current description.\n                        m_currentDescription = FindBestEndpointDescription(m_availableEndpoints);\n\n                        InitializeEncodings(m_availableEndpoints, m_currentDescription);\n                        SelectCorrespondingEndpointFromList(m_currentDescription);\n                    }\n                    finally\n                    {\n                        m_updating = false;\n                    }\n                }\n\n                if (SecurityModeCB.SelectedItem != null)\n                {\n                    if ((((MessageSecurityMode)SecurityModeCB.SelectedItem) == MessageSecurityMode.None) &&\n                        (ProtocolCB.SelectedItem != null) && (((Protocol)ProtocolCB.SelectedItem).ToString().IndexOf(\"https\") != 0))\n                    {\n                        m_statusObject.SetStatus(StatusChannel.SelectedSecurityMode, \"Warning: Selected Endpoint has no security.\", StatusType.Warning);\n                    }\n                    else if (((MessageSecurityMode)SecurityModeCB.SelectedItem) == MessageSecurityMode.Invalid)\n                    {\n                        m_statusObject.SetStatus(StatusChannel.SelectedSecurityMode, \"Error: Selected Endpoint Security Mode is unsupported.\", StatusType.Warning);\n                    }\n                    else\n                    {\n                        m_statusObject.ClearStatus(StatusChannel.SelectedSecurityMode);\n                    }\n                }\n                else\n                {\n                    m_statusObject.SetStatus(StatusChannel.SelectedSecurityMode, \"Error: Selected Endpoint Security Mode is invalid.\", StatusType.Warning);\n                }\n\n                UpdateStatus();\n            }\n            catch (Exception exception)\n            {\n                GuiUtils.HandleException(this.Text, MethodBase.GetCurrentMethod(), exception);\n            }\n        }\n\n        private void SecurityPolicyCB_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            try\n            {\n                if (!m_updating)\n                {\n                    try\n                    {\n                        m_updating = true;\n\n                        // update current description.\n                        m_currentDescription = FindBestEndpointDescription(m_availableEndpoints);\n\n                        InitializeEncodings(m_availableEndpoints, m_currentDescription);\n                        SelectCorrespondingEndpointFromList(m_currentDescription); \n                    }\n                    finally\n                    {\n                        m_updating = false;\n                    }\n                }\n\n                if (SecurityPolicyCB.SelectedItem != null)\n                {\n                    m_statusObject.ClearStatus(StatusChannel.SelectedSecurityPolicy);\n                }\n                else\n                {\n                    m_statusObject.SetStatus(StatusChannel.SelectedSecurityPolicy, \"Error: Selected Security Policy is invalid.\", StatusType.Warning);\n                }\n\n                UpdateStatus();\n\n            }\n            catch (Exception exception)\n            {\n                GuiUtils.HandleException(this.Text, MethodBase.GetCurrentMethod(), exception);\n            }\n        }\n\n        private void EndpointListLB_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            if (!m_updating)\n            {\n                try\n                {\n                    m_updating = true;\n                    m_selecting = true;\n\n                    int selectedIndex = EndpointListLB.SelectedIndex;\n\n                    if (selectedIndex != -1)\n                    {\n                        EndpointDescriptionString selection = (EndpointDescriptionString)EndpointListLB.SelectedItem;\n\n                        int index = -1;\n\n                        for (int i = 0; i < ProtocolCB.Items.Count; ++i)\n                        {\n                            if (((Protocol)ProtocolCB.Items[i]).ToString() == selection.Protocol.ToString())\n                            {\n                                index = i;\n                                break;\n                            }\n                        }\n\n                        ProtocolCB.SelectedIndex = index;\n\n                        InitializeSecurityModes(m_availableEndpoints);\n\n                        m_currentDescription = m_availableEndpoints[selectedIndex];\n\n                        InitializeEncodings(m_availableEndpoints, m_currentDescription);\n\n                        index = -1;\n\n                        for (int i = 0; i < SecurityModeCB.Items.Count; ++i)\n                        {\n                            if ((MessageSecurityMode)SecurityModeCB.Items[i] == selection.MessageSecurityMode)\n                            {\n                                index = i;\n                                break;\n                            }\n                        }\n\n                        SecurityModeCB.SelectedIndex = index;\n\n                        index = -1;\n\n                        for (int i = 0; i < SecurityPolicyCB.Items.Count; ++i)\n                        {\n                            if ((string)SecurityPolicyCB.Items[i] == selection.CurrentPolicy)\n                            {\n                                index = i;\n                                break;\n                            }\n                        }\n\n                        SecurityPolicyCB.SelectedIndex = index;\n\n                        index = -1;\n\n                        for (int i = 0; i < EncodingCB.Items.Count; ++i)\n                        {\n                            if ((Encoding)EncodingCB.Items[i] == selection.Encoding)\n                            {\n                                index = i;\n                                break;\n                            }\n                        }\n\n                        EncodingCB.SelectedIndex = index;\n                    }\n                }\n                catch (Exception exception)\n                {\n                    GuiUtils.HandleException(this.Text, MethodBase.GetCurrentMethod(), exception);\n                }\n                finally\n                {\n                    m_updating = false;\n                    m_selecting = false;\n                }\n            }\n\n            UpdateAdvancedEndpointInformation();\n        }\n\n        /// <summary>\n        /// Updates advanced endpoint information.\n        /// </summary>\n        private void UpdateAdvancedEndpointInformation()\n        {\n            try\n            {\n                ApplicationNameTB.Text = String.Empty;\n                ApplicationTypeTB.Text = String.Empty;\n                ApplicationUriTB.Text = String.Empty;\n                ProductUriTB.Text = String.Empty;\n                GatewayServerUriTB.Text = String.Empty;\n                DiscoveryProfileUriTB.Text = String.Empty;\n                TransportProfileUriTB.Text = String.Empty;\n                UserSecurityPoliciesTB.Text = String.Empty;\n                SecurityLevelTB.Text = String.Empty;\n\n                if (m_currentDescription != null)\n                {\n                    UserSecurityPoliciesTB.Text = \"Anonymous\";\n\n                    if (m_currentDescription.Server != null)\n                    {\n                        if (m_currentDescription.Server.ApplicationName != null)\n                        {\n                            ApplicationNameTB.Text = m_currentDescription.Server.ApplicationName.ToString();\n                        }\n\n                        ApplicationTypeTB.Text = m_currentDescription.Server.ApplicationType.ToString();\n                        ApplicationUriTB.Text = m_currentDescription.Server.ApplicationUri;\n                        ProductUriTB.Text = m_currentDescription.Server.ProductUri;\n                        GatewayServerUriTB.Text = m_currentDescription.Server.GatewayServerUri;\n                        DiscoveryProfileUriTB.Text = m_currentDescription.Server.DiscoveryProfileUri;\n                    }\n\n                    SecurityLevelTB.Text = m_currentDescription.SecurityLevel.ToString();\n                    TransportProfileUriTB.Text = m_currentDescription.TransportProfileUri;\n\n                    if (m_currentDescription.UserIdentityTokens.Count > 0)\n                    {\n                        UserSecurityPoliciesTB.Text = String.Join(\", \", m_currentDescription.UserIdentityTokens);\n                    }\n                }\n\n                UpdateStatus();\n            }\n            catch (Exception exception)\n            {\n                GuiUtils.HandleException(this.Text, MethodBase.GetCurrentMethod(), exception);\n            }\n        }\n\n        /// <summary>\n        /// Updates the StatusTB text and color.\n        /// Also enables/disables the OK button, should any error occurr (unsupported stuff etc).\n        /// </summary>\n        private void UpdateStatus()\n        {\n            try\n            {\n                if ((m_currentDescription != null) && (m_currentDescription.Server != null))\n                {\n                    m_statusObject.ClearStatus(StatusChannel.Server);\n                    \n                    if (m_currentDescription.Server.ApplicationType == ApplicationType.Client)\n                    {\n                        m_statusObject.SetStatus(StatusChannel.ApplicationType, \"Warning: Application type is unsupported.\", StatusType.Warning);\n                    }\n                    else\n                    {\n                        m_statusObject.ClearStatus(StatusChannel.ApplicationType);\n                    }\n\n                    if (string.IsNullOrEmpty(m_currentDescription.Server.ApplicationUri))\n                    {\n                        m_statusObject.SetStatus(StatusChannel.ApplicationUri, \"Warning: Application URI is missing.\", StatusType.Warning);\n                    }\n                    else\n                    {\n                        m_statusObject.ClearStatus(StatusChannel.ApplicationUri);\n                    }\n\n                    if (string.IsNullOrEmpty(m_currentDescription.TransportProfileUri))\n                    {\n                        m_statusObject.SetStatus(StatusChannel.TransportProfileUri, \"Warning: Transport Profile URI is missing.\", StatusType.Warning);\n                    }\n                    else if (Utils.ParseUri(m_currentDescription.TransportProfileUri) == null)\n                    {\n                        m_statusObject.SetStatus(StatusChannel.TransportProfileUri, \"Warning: Transport Profile URI is invalid.\", StatusType.Warning);\n                    }\n\n                    if ((m_currentDescription.Server.DiscoveryUrls == null) || (m_currentDescription.Server.DiscoveryUrls.Count == 0))\n                    {\n                        m_statusObject.SetStatus(StatusChannel.DiscoveryURLs, \"Warning: Discovery URLs are missing.\", StatusType.Warning);\n                    }\n                    else\n                    {\n                        m_statusObject.ClearStatus(StatusChannel.DiscoveryURLs);\n                    }\n\n                    if ((m_currentDescription.ServerCertificate != null) && (m_currentDescription.ServerCertificate.Length > 0))\n                    {\n                        X509Certificate2 serverCertificate = new X509Certificate2(m_currentDescription.ServerCertificate);\n                        String certificateApplicationUri = Utils.GetApplicationUriFromCertficate(serverCertificate);\n\n                        if (certificateApplicationUri != m_currentDescription.Server.ApplicationUri)\n                        {\n                            m_statusObject.SetStatus(StatusChannel.DifferentCertificate, \"Warning: Application URI host different than the certificate host.\", StatusType.Warning);\n                        }\n                        else\n                        {\n                            m_statusObject.ClearStatus(StatusChannel.DifferentCertificate);\n                        }\n                    }\n\n                    if (string.IsNullOrEmpty(m_currentDescription.SecurityPolicyUri))\n                    {\n                        m_statusObject.SetStatus(StatusChannel.SecurityPolicyUri, \"Error: Security Policy URI is missing.\", StatusType.Warning);\n                    }\n                    else if (string.IsNullOrEmpty(SecurityPolicies.GetDisplayName(m_currentDescription.SecurityPolicyUri)))\n                    {\n                        m_statusObject.SetStatus(StatusChannel.SecurityPolicyUri, \"Error: Security Policy URI is invalid.\", StatusType.Warning);\n                    }\n                    else\n                    {\n                        m_statusObject.ClearStatus(StatusChannel.SecurityPolicyUri);\n                    }\n                }\n                else\n                {\n                    m_statusObject.SetStatus(StatusChannel.Server, \"Warning: Server endpoint is invalid.\", StatusType.Warning);\n                }\n\n\n                OkBTN.Enabled = true;\n                StatusTB.ForeColor = SystemColors.WindowText;\n                StatusTB.Text = m_statusObject.StatusString;\n\n                if (m_statusObject.StatusType == StatusType.Error)\n                {\n                    OkBTN.Enabled = false;\n                    StatusTB.ForeColor = Color.Red;\n                }\n                else if (m_statusObject.StatusType == StatusType.Warning)\n                {\n                    StatusTB.ForeColor = Color.DarkOrange;\n                }\n\n                // hack for WinForms to update color\n                StatusTB.BackColor = StatusTB.BackColor;\n\n            }\n            catch (Exception exception)\n            {\n                GuiUtils.HandleException(this.Text, MethodBase.GetCurrentMethod(), exception);\n            }\n        }\n\n        #endregion\n    }\n}\n", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<s1:SampleConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns:s1=\"http://opcfoundation.org/UA/Sample/Configuration.xsd\"\n  xmlns:s2=\"http://opcfoundation.org/UA/SDK/COM/Configuration.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <!-- A human readable but not necessarily unique name for the application instance -->\n  <ApplicationName>UA Sample Client</ApplicationName>\n  \n  <!-- A globally unique identifier for the application instance.\n       This is overridden with the value contained in the application certificate. -->\n  <ApplicationUri>urn:localhost:OPCFoundation:SampleClient</ApplicationUri>\n  \n  <!-- A globally unique URI for the product (usually assigned by the product vendor) -->\n  <ProductUri>http://opcfoundation.org/UA/SampleClient/</ProductUri>\n    \n  <!-- Indicates the type of application (Client, Server or ClientServer). -->\n  <ApplicationType>ClientAndServer_2</ApplicationType>\n  \n  <!-- Specifies security related configuration information -->\n  <SecurityConfiguration>\n    \n    <!-- The location of the application instance certificate in the Windows certificate store -->\n    <ApplicationCertificate>  \n      \n      <!-- The type of store. -->\n      <StoreType>Directory</StoreType>\n      \n      <!-- The location of the store. \n           Windows store must start with LocalMachine, CurrentUser or CurrentService\n           The name of the store is appended.\n           Note that the names used in code are difference from what appears in the control panel.\n           e.g. My == \"Personal\", Root == \"Trusted Root Certification Authorities\" -->\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      \n      <!-- The subject for the certificate \n           Note that subject names are complex structures. The text that appears here is the CommonName component.\n           A complete distinguished would be something like: 'CN=UA Sample Client, DC=MACHINENAME'\n           The first certificate found is used if multiple certificates with the same CommonName exist. \n           The Thumbprint should be specified if the CommonName does not uniquely identify a certificate. -->\n      <SubjectName>UA Sample Client</SubjectName>\n\n      <!-- The SHA1 thumbprint for the certificate.\n           The thumbprint uniquely identifies a certificate.\n           It should be specified in this file, however, the samples rely on quick and \n           dirty scripts to create new certificate on each machine. A commerical application \n           would generate the initial certificate itself and update the thumbprint accordingly -->\n      <!--<Thumbprint>3a35fb798fc6dee8a7e7e4652b0e28fc14c6ee0f</Thumbprint>-->\n      \n    </ApplicationCertificate>\n\n    <!-- The list of certification authorities. \n    \n         Typical web browsing applications trust any certificate issued by a CA in the \n         \"Trusted Root Certification Authorities\" certificate store. However, this approach is \n         not appropriate for UA because Adminstrators have no control over the CAs that get\n         placed in that Root store to facilitate web browsing. This means Adminstrators must\n         specify a different store that is used only for UA related CAs and/or they must explicitly\n         specify the certificate for each trusted certification authority. -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n    \n    <!-- The list of trusted certificates. \n    \n         Some UA applications will use self-signed certificates (certificates without a CA)\n         which means that every application which communicates with it must be configured to \n         trust it.\n         \n         Adminstrators may designate a certificate store that contains trusted UA application \n         instance certificates (this store should not be the same as the store used for CAs \n         certificates). Alternately, Administrators may enter the certificates explicitly in\n         this list.\n         \n         Note that entries in this list may either reference a certificate in the store or\n         may contained the entire certificate encoded as base64 data.\n         -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n    \n    <!-- Applications exchange Nonces during the CreateSession. This value specifies the length. Must be >= 32 -->\n    <NonceLength>32</NonceLength>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  \n</SecurityConfiguration>\n  \n  <!-- Maps different transports onto a .NET implementation of a WCF Binding\n  \n       WCF bindings are very complex and have many parameters that can be tweeked. To ensure\n       interoperability the SDK has defined 3 standard bindings which can be selected with this\n       element. Developers may define their own Bindings as well provided the inhierit from the \n       Opc.Ua.Binding.BaseBinding type and implement the same constructor as the built-in binding\n       provide.\n       \n       Note protocols other than HTTP or UA-TCP are not considered to be interoperable -->\n  <TransportConfigurations>\n    <!-- This binding wraps the ANSI C implementation of UA-TCP instead of using the C# implementation. -->\n    <!--\n    <TransportConfiguration>\n      <UriScheme>opc.tcp</UriScheme>\n      <TypeName>Opc.Ua.NativeStack.NativeStackBinding,Opc.Ua.NativeStackWrapper</TypeName>\n    </TransportConfiguration>\n    -->\n\n    <!-- This binding uses the WCF binary encoded XML over TCP -->\n    <TransportConfiguration>\n      <UriScheme>net.tcp</UriScheme>\n      <TypeName>Opc.Ua.Bindings.UaSoapXmlOverTcpBinding</TypeName>\n    </TransportConfiguration>\n    <!--\n    -->\n\n    <!-- This binding uses the WCF binary encoded XML over PIPE -->\n    <TransportConfiguration>\n      <UriScheme>net.pipe</UriScheme>\n      <TypeName>Opc.Ua.Bindings.UaSoapXmlOverPipeBinding</TypeName>\n    </TransportConfiguration>\n    <!--\n    -->\n    \n  </TransportConfigurations>\n  \n  <!-- Specifies quotas used to by the transport layer -->\n  <TransportQuotas>\n    \n    <!-- The default timeout in milliseconds for operations (used by clients) -->\n    <OperationTimeout>120000</OperationTimeout>\n    \n    <!-- The maximum length for a string value in any message -->\n    <MaxStringLength>1048576</MaxStringLength>\n    \n    <!-- The maximum length for a byte string value in any message -->\n    <MaxByteStringLength>4194304</MaxByteStringLength>\n    \n    <!-- The maximum length for any array in a message. \n         Note that some protocols do not distinguish between bytes and arrays. \n         In these cases the binding will choose the larger of \n         MaxByteStringLength or MaxArrayLength-->\n    <MaxArrayLength>65535</MaxArrayLength>\n    \n    <!-- The maximum size of any message -->\n    <MaxMessageSize>4194304</MaxMessageSize>\n    \n    <!-- The maximum buffer size \n         This value controls how big a block of memory the transport layer allocates.\n         Setting this value to a large value will reduce performance and use a lot of RAM -->\n    <MaxBufferSize>65535</MaxBufferSize>\n    \n    <!-- The lifetime of a SecureChannel in milliseconds.\n         This specifies how long the server will keep a broken channel around while waiting \n         for a client to reconnect.\n         Not used by HTTP or .NET TCP bindings -->\n    <ChannelLifetime>300000</ChannelLifetime>\n    \n    <!-- The lifetime of a SecurityToken in milliseconds.\n         This specifies how long a security token can be used without renewal. -->\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n    \n  </TransportQuotas>\n  \n  <!-- This element only needs to be specified for Server or ClientServer applications -->\n  <ServerConfiguration>\n    \n    <!-- The set of addresses. One for each supported protocol.    \n         Note that \"localhost\" is replace with the hostname when the configuration is loaded.\n    \n         Additional URLs are created by appending strings to the base address.\n         For example, a URL used for an endpoint which uses the Basic256 security policy would look like this:\n         http://localhost:61211/UA/SampleClient/Basic256 -->\n    <BaseAddresses>\n      <ua:String>opc.tcp://localhost:61210/UA/SampleClient</ua:String>\n      <ua:String>http://localhost:61211/UA/SampleClient</ua:String>\n      <ua:String>https://localhost:61212/UA/SampleClient/</ua:String>\n      <!--<ua:String>net.tcp://localhost:61214/UA/SampleClient</ua:String>\n      <ua:String>net.pipe://localhost/UA/SampleClient</ua:String>-->\n    </BaseAddresses>\n\n    <!-- \n    These list the alternate addresses (via firewalls, multiple NICs etc.) that can be\n    used to communicate with the server. The URL used by the client when calling\n    FindServers/GetEndpoints or CreateSession will be used to filter the list of\n    endpoints returned by checking for alternate base addresses that have a domain\n    that matches the domain in the url provided by the client.\n    \n    Note that any additional domains should be listed in the server's certificate. If they\n    are left out the client make refuse to connect because it has no way to know if the \n    alternate domain was authorized by the server administrator.\n    -->\n    \n    <!--\n    <AlternateBaseAddresses>\n      <ua:String>http://mycompany.com:40000/UA/SampleClient</ua:String>\n    </AlternateBaseAddresses>\n    -->\n    \n    <!-- The security policies supported by the server.\n         \n         The SDK combines these with the base address to create as many EndpointDescriptions as required.\n         Protocols such as HTTP only allow one SecurityPolicy per endpoint to addition URLs are constructed\n         using the SecurityPolicy and SecurityMode.\n         \n         The first policy in the list is assigned to base address. -->\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n\n    <MinRequestThreadCount>5</MinRequestThreadCount>\n    <MaxRequestThreadCount>100</MaxRequestThreadCount>\n    <MaxQueuedRequestCount>2000</MaxQueuedRequestCount>\n    \n    <!-- The SDK expects the server to support the same set of user tokens for every endpoint. -->\n    <UserTokenPolicies>\n      <!-- Allows anonymous users -->\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n        <ua:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</ua:SecurityPolicyUri>\n      </ua:UserTokenPolicy>\n      \n      <!-- Allows username/password -->\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>          \n        <!-- passwords must be encrypted - this specifies what algorithm to use -->\n        <ua:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</ua:SecurityPolicyUri>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n        <!-- certificate possession must be proven with a digital signature - this specifies what algorithm to use -->\n        <ua:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</ua:SecurityPolicyUri>\n      </ua:UserTokenPolicy>\n      <!--\n      Issued tokens are any type of WS-Security compliant token\n      This is a URN assigned by OASIS to SAML Security Tokens\n      tokens must be encrypted - this specifies what algorithm to use\n      -->\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n        <ua:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256</ua:SecurityPolicyUri>\n      </ua:UserTokenPolicy>\n    </UserTokenPolicies>\n    \n    <!-- Whether the server updates its diagnostic information -->\n    <DiagnosticsEnabled>true</DiagnosticsEnabled>\n    \n    <!-- The maximum number of simultaneous sessions -->\n    <MaxSessionCount>100</MaxSessionCount>\n    \n    <!-- The minimum session lifetime permitted by the server -->\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    \n    <!-- The maximum session lifetime permitted by the server -->\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    \n    <!-- The maximum number of browse continuation points per session -->\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    \n    <!-- The maximum number of query continuation points per session -->\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    \n    <!-- The maximum number of history continuation points per session -->\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    \n    <!-- The maximum age of an incoming request -->\n    <MaxRequestAge>600000</MaxRequestAge>\n    \n    <!-- The minimum allowed publishing interval (in milliseconds) -->\n    <MinPublishingInterval>100</MinPublishingInterval>\n\n    <!-- The maximum allowed publishing interval (in milliseconds) -->\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    \n    <!-- The publishing resolution. Requested publishing intervals are rounded up to the next multiple of this value.-->\n    <PublishingResolution>100</PublishingResolution>\n    \n    <!-- The maximum subscription lifetime.\n         This controls the maximum keep alive count. Smaller publishing intervals will allow large keep alives\n         provided the maximum subscription lifetime is not exceeded -->\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n\n\t  <!-- The maximum number of sent messages kept in the queue for each subscription-->\n\t  <MaxMessageQueueSize>100</MaxMessageQueueSize>\n\n\t  <!-- The maximum number of notifications kept in the queue for each monitored item-->\n\t  <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n\n\t  <!-- The maximum number of notifications in a single publish response -->\n\t  <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n\n\t  <!-- The minimum sampling rate for rarely changing metadata information (such as the server status) -->\n\t  <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n\n\t  <!-- The set of supported sampling rates -->\n    <AvailableSamplingRates />\n\n\t  <!-- Servers must create a secure channel with the DiscoveryServer \n         This element specifies the connection information.\n         Note that server will use the discovery endpoint to update this information -->\n\n\t  <RegistrationEndpoint>\n\t\t  <ua:EndpointUrl>opc.tcp://localhost:4840</ua:EndpointUrl>\n\t\t  <ua:Server>\n        <ua:ApplicationUri>opc.tcp://localhost:4840</ua:ApplicationUri>\n\t\t\t  <ua:ApplicationType>DiscoveryServer_3</ua:ApplicationType>\n\t\t\t  <ua:DiscoveryUrls>\n\t\t\t\t  <ua:String>opc.tcp://localhost:4840</ua:String>\n\t\t\t  </ua:DiscoveryUrls>\n\t\t  </ua:Server>\n\t\t  <ua:SecurityMode>SignAndEncrypt_3</ua:SecurityMode>\n      <ua:SecurityPolicyUri />\n\t\t  <ua:UserIdentityTokens />\n\t\t  <ua:SecurityLevel>1</ua:SecurityLevel>\n\t  </RegistrationEndpoint>\n\n\t  <!-- The maximum interval between registration. 0 disables periodic registration -->\n\t  <MaxRegistrationInterval>0</MaxRegistrationInterval>\n\n\t  <!-- The file used to save nodes added to the CoreNodeManager. If missing the CoreNodeManger will discard nodes when it stops. -->\n\t  <NodeManagerSaveFile>Opc.Ua.Server.nodes.xml</NodeManagerSaveFile>\n\n\t  <!-- The minimum subscription lifetime.\n\t\tThis ensures subscriptions are not set to expire too quickly. The revised lifetime count\n\t\tand keep alive count are calculated with this value. -->\n\t  <MinSubscriptionLifetime>10000</MinSubscriptionLifetime>\n\n  </ServerConfiguration>\n  \n  <!-- This element is only required for Client and ClientServer applications -->\n  <ClientConfiguration>\n    <!-- The default timeout for new sessions -->\n    <DefaultSessionTimeout>600000</DefaultSessionTimeout>\n    \n    <!-- The well-known URLs for the local discovery servers\n         URLs are tested in the order they appear in this list. -->\n    <WellKnownDiscoveryUrls>\n      <ua:String>opc.tcp://{0}:4840/UADiscovery</ua:String>\n      <ua:String>http://{0}:52601/UADiscovery</ua:String>\n      <ua:String>http://{0}/UADiscovery/Default.svc</ua:String>\n    </WellKnownDiscoveryUrls>\n    \n    <!-- EndpointDescriptions for system wide discovery servers -->\n\t<DiscoveryServers></DiscoveryServers>\n    \n    <!-- The file used to save the EndpointDescriptions for servers known to the Client -->\n    <EndpointCacheFilePath>Opc.Ua.SampleClient.Endpoints.xml</EndpointCacheFilePath>\n  \n\t<!-- The minimum subscription lifetime.\n\tThis ensures subscriptions are not set to expire too quickly. The requesed lifetime count\n\tand keep alive count are calculated using this value and the request publishing interval -->\n\t<MinSubscriptionLifetime>10000</MinSubscriptionLifetime>\n\t  \n  </ClientConfiguration>\n  \n  <Extensions>\n    \n    <ua:XmlElement>\n      <MemoryBufferConfiguration xmlns=\"http://samples.org/UA/memorybuffer\">\n        <Buffers>\n          <MemoryBufferInstance>\n            <Name>UInt32</Name>\n            <TagCount>100</TagCount>\n            <DataType>UInt32</DataType>\n          </MemoryBufferInstance>\n          <MemoryBufferInstance>\n            <Name>Double</Name>\n            <TagCount>100</TagCount>\n            <DataType>Double</DataType>\n          </MemoryBufferInstance>\n        </Buffers>\n      </MemoryBufferConfiguration>\n    </ua:XmlElement>\n\n    <!--\n    <ua:XmlElement>\n      <ListOfWrapperConfiguration xmlns=\"http://opcfoundation.org/UA/SDK/COM/Configuration.xsd\">\n        <WrapperConfiguration xsi:type=\"AeWrapperConfiguration\">\n          <NamespaceUri>opc.com://localhost/OPCSample.OPCEventServer</NamespaceUri>\n          <BrowseName>COM AE Server 1</BrowseName>\n          <Url>opc.com://localhost/OPCSample.OPCEventServer/{65168852-5783-11d1-84a0-00608cb8a7e9}</Url>\n          <MinMetadataLifetime>1000</MinMetadataLifetime>\n          <SeperatorChars></SeperatorChars>\n          <MaxQueueSize>100</MaxQueueSize>\n          <MinReconnectWait>0</MinReconnectWait>\n          <MaxReconnectWait>0</MaxReconnectWait>\n          <MaxReconnectAttempts>0</MaxReconnectAttempts>\n        </WrapperConfiguration>\n        <WrapperConfiguration xsi:type=\"DaWrapperConfiguration\">\n          <NamespaceUri>opc.com://localhost/OPCSample.OpcDaServer</NamespaceUri>\n          <BrowseName>COM DA Server 1</BrowseName>\n          <Url>opc.com://localhost/OPCSample.OpcDaServer/{625c49a1-be1c-45d7-9a8a-14bedcf5ce6c}</Url>\n          <MinMetadataLifetime>1000</MinMetadataLifetime>\n          <SeperatorChars></SeperatorChars>\n          <MaxQueueSize>100</MaxQueueSize>\n          <MinReconnectWait>0</MinReconnectWait>\n          <MaxReconnectWait>0</MaxReconnectWait>\n          <MaxReconnectAttempts>0</MaxReconnectAttempts>\n        </WrapperConfiguration>\n        <WrapperConfiguration xsi:type=\"HdaWrapperConfiguration\">\n          <NamespaceUri>opc.com://localhost/OPCSample.OpcHdaServer.1</NamespaceUri>\n          <BrowseName>OPCSample.OpcHdaServer.1</BrowseName>\n          <Url>opc.com://localhost/OPCSample.OpcHdaServer.1</Url>\n          <MinMetadataLifetime>1000</MinMetadataLifetime>\n          <SeperatorChars />\n          <MaxQueueSize>100</MaxQueueSize>\n          <MinReconnectWait>1000</MinReconnectWait>\n          <MaxReconnectWait>30000</MaxReconnectWait>\n          <MaxReconnectAttempts>10</MaxReconnectAttempts>\n          <TreatUncertainAsBad>true</TreatUncertainAsBad>\n          <PercentDataBad>10</PercentDataBad>\n          <PercentDataGood>99</PercentDataGood>\n          <SteppedSlopedExtrapolation>true</SteppedSlopedExtrapolation>\n          <Stepped>true</Stepped>\n          <Definition>Definition comes here</Definition>\n          <MaxTimeInterval>555555</MaxTimeInterval>\n          <MinTimeInterval>111</MinTimeInterval>\n          <ExceptionDeviation>50</ExceptionDeviation>\n          <ExceptionDeviationFormat>PercentOfRange_1</ExceptionDeviationFormat>\n        </WrapperConfiguration>\n      </ListOfWrapperConfiguration>\n    </ua:XmlElement>\n      -->\n  </Extensions>\n  \n  <!--\n  Masks supported by the trace feature. \n  Servers will detect changes within 5 seconds.\n  \n  Do not output any messages.\n  None = 0x0;\n\n  Output error messages.\n  Error = 0x1;\n\n  Output informational messages.\n  Information = 0x2;\n\n  Output stack traces.\n  StackTrace = 0x4;\n\n  Output basic messages for service calls.\n  Service = 0x8;\n\n  Output detailed messages for service calls.\n  ServiceDetail = 0x10;\n\n  Output basic messages for each operation.\n  Operation = 0x20;\n\n  Output detailed messages for each operation.\n  OperationDetail = 0x40;\n\n  Output messages related to application initialization or shutdown\n  StartStop = 0x80;\n\n  Output messages related to a call to an external system.\n  ExternalSystem = 0x100;\n\n  Output messages related to security\n  Security = 0x200;\n  -->\n  \n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Opc.Ua.SampleClient.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n\n  <!-- Enables the hi-res clock for the process to allows for shorter (<100ms) publishing and sampling intervals. -->\n  <!-- QueryPerformanceCounter does not work on all multi-core machines so enabling the hi-res clock by default is not recommended. -->\n  <DisableHiResClock>true</DisableHiResClock>\n  \n</s1:SampleConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ua:ConfiguredEndpointCollection\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n  xmlns=\"http://opcfoundation.org/UA/2008/02/Types.xsd\" \n  xmlns:ua=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\">\n  <ua:KnownHosts />\n  <ua:Endpoints>\n    <!-- \n      Self, acting as a server endpoint:\n        opc.tcp://localhost:61210/UA/SampleClient // -->\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>opc.tcp://localhost:61210/UA/SampleClient</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>UserName_1</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>Certificate_2</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <PolicyId xsi:nil=\"true\" />\n            <TokenType>IssuedToken_3</TokenType>\n            <IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</IssuedTokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n\n    <!-- \n      Sample server, opc.tcp endpoint:\n        opc.tcp://localhost:51210/UA/SampleServer // -->\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>opc.tcp://localhost:51210/UA/SampleServer</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>UserName_1</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>Certificate_2</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <PolicyId xsi:nil=\"true\" />\n            <TokenType>IssuedToken_3</TokenType>\n            <IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</IssuedTokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n\n    <!-- \n      Reference server, opc.tcp endpoint:\n        opc.tcp://localhost:62541/UA/ReferenceServer // -->\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>opc.tcp://localhost:62541/UA/ReferenceServer</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>UserName_1</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>Certificate_2</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <PolicyId xsi:nil=\"true\" />\n            <TokenType>IssuedToken_3</TokenType>\n            <IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</IssuedTokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n\n    <!-- \n      Data Access server, opc.tcp endpoint:\n        opc.tcp://localhost:62547/Quickstarts/DataAccessServer // -->\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>opc.tcp://localhost:62547/Quickstarts/DataAccessServer</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>UserName_1</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>Certificate_2</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <PolicyId xsi:nil=\"true\" />\n            <TokenType>IssuedToken_3</TokenType>\n            <IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</IssuedTokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n\n    <!-- \n      Alarms/Conditions server, opc.tcp endpoint:\n        opc.tcp://localhost:62544/Quickstarts/AlarmConditionServer // -->\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>opc.tcp://localhost:62544/Quickstarts/AlarmConditionServer</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>UserName_1</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>Certificate_2</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <PolicyId xsi:nil=\"true\" />\n            <TokenType>IssuedToken_3</TokenType>\n            <IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</IssuedTokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n\n    <!-- \n      Historical Data server, opc.tcp endpoint:\n        opc.tcp://localhost:62550/Quickstarts/HistoricalAccessServer // -->\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>opc.tcp://localhost:62550/Quickstarts/HistoricalAccessServer</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>UserName_1</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>Certificate_2</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <PolicyId xsi:nil=\"true\" />\n            <TokenType>IssuedToken_3</TokenType>\n            <IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</IssuedTokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n\n    <!-- \n      Historical Events server opc.tcp endpoint:\n        opc.tcp://localhost:62553/Quickstarts/HistoricalEventsServer // -->\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>opc.tcp://localhost:62553/Quickstarts/HistoricalEventsServer</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>UserName_1</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>Certificate_2</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <PolicyId xsi:nil=\"true\" />\n            <TokenType>IssuedToken_3</TokenType>\n            <IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</IssuedTokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n\n  </ua:Endpoints>\n  \n</ua:ConfiguredEndpointCollection>", "/* ========================================================================\n * Copyright (c) 2005-2017 The OPC Foundation, Inc. All rights reserved.\n *\n * OPC Foundation MIT License 1.00\n * \n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n * \n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n *\n * The complete license agreement can be found here:\n * http://opcfoundation.org/License/MIT/1.00/\n * ======================================================================*/\n\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\n\nusing Opc.Ua;\n\nnamespace Workshop\n{\n    public partial class Helpers\n    {   \n        public const string DefaultHttpUrl = \"http://localhost:51211/UA/SampleServer\";        \n        public const string DefaultTcpUrl = \"opc.tcp://localhost:51210/UA/SampleServer\";\n        public const string InstanceNamespaceUri = \"http://tempuri.org/UA/Workshop/\";\n        public const string TypeNamespaceUri = \"http://tempuri.org/UA/Workshop/Types/\";\n\n        /// <summary>\n        /// Creates a minimal application configuration for a client.\n        /// </summary>\n        /// <remarks>\n        /// In most cases the application configuration will be loaded from an XML file. \n        /// This example populates the configuration in code.\n        /// </remarks>\n        public static ApplicationConfiguration CreateClientConfiguration()\n        {\n            // The application configuration can be loaded from any file.\n            // ApplicationConfiguration.Load() method loads configuration by looking up a file path in the App.config.\n            // This approach allows applications to share configuration files and to update them.\n            ApplicationConfiguration configuration = new ApplicationConfiguration();\n\n            // Step 1 - Specify the server identity.\n            configuration.ApplicationName = \"My Client Name\";\n            configuration.ApplicationType = ApplicationType.Client;\n            configuration.ApplicationUri  = \"http://localhost/VendorId/ApplicationId/InstanceId\";\n            configuration.ProductUri      = \"http://VendorId/ProductId/VersionId\";\n\n            configuration.SecurityConfiguration = new SecurityConfiguration();\n\n            // Step 2 - Specify the server's application instance certificate.\n\n            // Application instance certificates must be placed in a windows certficate store because that is \n            // the best way to protect the private key. Certificates in a store are identified with 4 parameters:\n            // StoreLocation, StoreName, SubjectName and Thumbprint.\n            //\n            // In this example the following values are used:\n            // \n            //   LocalMachine    - use the machine wide certificate store.\n            //   Personal        - use the store for individual certificates.\n            //   ApplicationName - use the application name as a search key.   \n             \n            configuration.SecurityConfiguration.ApplicationCertificate               = new CertificateIdentifier();\n            configuration.SecurityConfiguration.ApplicationCertificate.StoreType     = CertificateStoreType.Windows;\n            configuration.SecurityConfiguration.ApplicationCertificate.StorePath     = \"LocalMachine\\\\My\";\n            configuration.SecurityConfiguration.ApplicationCertificate.SubjectName   = configuration.ApplicationName;\n\n            // trust all applications installed on the same machine.\n            configuration.SecurityConfiguration.TrustedPeerCertificates.StoreType = CertificateStoreType.Windows;\n            configuration.SecurityConfiguration.TrustedPeerCertificates.StorePath = \"LocalMachine\\\\My\";\n\n            // find the certificate in the store.\n            X509Certificate2 clientCertificate = configuration.SecurityConfiguration.ApplicationCertificate.Find(true);\n\n            // create a new certificate if one not found.\n            if (clientCertificate == null)\n            {\n                // this code would normally be called as part of the installer - called here to illustrate.\n                // create a new certificate an place it in the LocalMachine/Personal store.\n                clientCertificate = CertificateFactory.CreateCertificate(\n                    configuration.SecurityConfiguration.ApplicationCertificate.StoreType,\n                    configuration.SecurityConfiguration.ApplicationCertificate.StorePath,\n                    configuration.ApplicationUri,\n                    configuration.ApplicationName,\n                    null,\n                    null,\n                    2048,\n                    300);\n\n                Console.WriteLine(\"Created client certificate: {0}\", clientCertificate.Subject);\n            }\n            \n            // Step 4 - Specify the supported transport quotas.\n\n            // The transport quotas are used to set limits on the contents of messages and are\n            // used to protect against DOS attacks and rogue clients. They should be set to\n            // reasonable values.\n            configuration.TransportQuotas = new TransportQuotas();\n            configuration.TransportQuotas.MaxArrayLength = Int32.MaxValue;\n            configuration.TransportQuotas.MaxByteStringLength = Int32.MaxValue;\n            configuration.TransportQuotas.MaxStringLength = Int32.MaxValue;\n            configuration.TransportQuotas.MaxMessageSize = Int32.MaxValue;\n            configuration.TransportQuotas.OperationTimeout = 600000;\n\n            configuration.ServerConfiguration = new ServerConfiguration();\n\n            // Step 5 - Specify the client specific configuration.\n            configuration.ClientConfiguration = new ClientConfiguration();\n            configuration.ClientConfiguration.DefaultSessionTimeout = 30000;\n\n            // Step 6 - Validate the configuration.\n        \n            // This step checks if the configuration is consistent and assigns a few internal variables\n            // that are used by the SDK. This is called automatically if the configuration is loaded from\n            // a file using the ApplicationConfiguration.Load() method.          \n            configuration.Validate(ApplicationType.Client);    \n            \n            return configuration;\n        }\n\n        /// <summary>\n        /// Creates a minimal application configuration for a server.\n        /// </summary>\n        /// <remarks>\n        /// In many cases the application configuration will be loaded from an XML file. \n        /// This example populates the configuration in code.\n        /// </remarks>\n        public static ApplicationConfiguration CreateServerConfiguration()\n        {\n            // The application configuration can be loaded from any file.\n            // ApplicationConfiguration.Load() method loads configuration by looking up a file path in the App.config.\n            // This approach allows applications to share configuration files and to update them.\n            ApplicationConfiguration configuration = new ApplicationConfiguration();\n\n            // Step 1 - Specify the server identity.\n            configuration.ApplicationName = \"My Server Name\";\n            configuration.ApplicationType = ApplicationType.Server;\n            configuration.ApplicationUri  = \"http://localhost/VendorId/ApplicationId/InstanceId\";\n            configuration.ProductUri      = \"http://VendorId/ProductId/VersionId\";\n\n            configuration.SecurityConfiguration = new SecurityConfiguration();\n\n            // Step 2 - Specify the server's application instance certificate.\n\n            // Application instance certificates must be placed in a windows certficate store because that is \n            // the best way to protect the private key. Certificates in a store are identified with 4 parameters:\n            // StoreLocation, StoreName, SubjectName and Thumbprint.\n            //\n            // In this example the following values are used:\n            // \n            //   LocalMachine    - use the machine wide certificate store.\n            //   Personal        - use the store for individual certificates.\n            //   ApplicationName - use the application name as a search key.   \n             \n            configuration.SecurityConfiguration.ApplicationCertificate               = new CertificateIdentifier();\n            configuration.SecurityConfiguration.ApplicationCertificate.StoreType     = CertificateStoreType.Windows;\n            configuration.SecurityConfiguration.ApplicationCertificate.StorePath     = \"LocalMachine\\\\My\";\n            configuration.SecurityConfiguration.ApplicationCertificate.SubjectName   = configuration.ApplicationName;\n            \n            // trust all applications installed on the same machine.\n            configuration.SecurityConfiguration.TrustedPeerCertificates.StoreType = CertificateStoreType.Windows;\n            configuration.SecurityConfiguration.TrustedPeerCertificates.StorePath = \"LocalMachine\\\\My\";\n\n            // find the certificate in the store.\n            X509Certificate2 serverCertificate = configuration.SecurityConfiguration.ApplicationCertificate.Find(true);\n\n            // create a new certificate if one not found.\n            if (serverCertificate == null)\n            {\n                // this code would normally be called as part of the installer - called here to illustrate.\n                // create a new certificate an place it in the LocalMachine/Personal store.\n                serverCertificate = CertificateFactory.CreateCertificate(\n                    configuration.SecurityConfiguration.ApplicationCertificate.StoreType,\n                    configuration.SecurityConfiguration.ApplicationCertificate.StorePath,\n                    configuration.ApplicationUri,\n                    configuration.ApplicationName,\n                    null,\n                    null,\n                    2048,\n                    300);\n\n                Console.WriteLine(\"Created server certificate: {0}\", serverCertificate.Subject);\n            }\n            \n            // Step 4 - Specify the supported transport quotas.\n\n            // The transport quotas are used to set limits on the contents of messages and are\n            // used to protect against DOS attacks and rogue clients. They should be set to\n            // reasonable values.\n            configuration.TransportQuotas = new TransportQuotas();\n            configuration.TransportQuotas.OperationTimeout = 60000;\n\n            configuration.ServerConfiguration = new ServerConfiguration();\n\n            // turn off registration with the discovery server.\n            configuration.ServerConfiguration.MaxRegistrationInterval = 0;\n\n            // Step 5 - Specify the based addresses - one per binding specified above.\n            configuration.ServerConfiguration.BaseAddresses.Add(DefaultHttpUrl);\n            configuration.ServerConfiguration.BaseAddresses.Add(DefaultTcpUrl);\n\n            // Step 6 - Specify the security policies.\n          \n            // Security policies control what security must be used to connect to the server.\n            // The SDK will automatically create EndpointDescriptions for each combination of \n            // security policy and base address. \n            //\n            // Note that some bindings only allow one policy per URL so the SDK will append \n            // text to the base addresses in order to ensure that each policy has a unique URL.\n            // The first policy specified in the configuration is assigned the base address.\n\n            // this policy requires signing and encryption.\n            ServerSecurityPolicy policy1 = new ServerSecurityPolicy();\n\n            policy1.SecurityMode      = MessageSecurityMode.SignAndEncrypt;\n            policy1.SecurityPolicyUri = SecurityPolicies.Basic256Sha256;\n            policy1.SecurityLevel     = 5;\n\n            configuration.ServerConfiguration.SecurityPolicies.Add(policy1);\n\n            // this policy does not require any security.\n            ServerSecurityPolicy policy2 = new ServerSecurityPolicy();\n\n            policy2.SecurityMode      = MessageSecurityMode.None;\n            policy2.SecurityPolicyUri = SecurityPolicies.None;\n            policy2.SecurityLevel     = 0;\n\n            configuration.ServerConfiguration.SecurityPolicies.Add(policy2);\n\n            // specify the supported user token types.\n            configuration.ServerConfiguration.UserTokenPolicies.Add(new UserTokenPolicy(UserTokenType.Anonymous));\n            configuration.ServerConfiguration.UserTokenPolicies.Add(new UserTokenPolicy(UserTokenType.UserName));\n\n            // Step 6 - Validate the configuration.\n        \n            // This step checks if the configuration is consistent and assigns a few internal variables\n            // that are used by the SDK. This is called automatically if the configuration is loaded from\n            // a file using the ApplicationConfiguration.Load() method.          \n            configuration.Validate(ApplicationType.Server);    \n            \n            return configuration;\n        }\n                \n        /// <summary>\n        /// Creates a minimal endpoint description which allows a client to connect to a server.\n        /// </summary>\n        /// <remarks>\n        /// In most cases the client will use the server's discovery endpoint to fetch the information\n        /// constained in this structure.\n        /// </remarks>\n        public static EndpointDescription CreateEndpointDescription()\n        {\n            // create the endpoint description.\n            EndpointDescription endpointDescription = new EndpointDescription();\n            \n           endpointDescription.EndpointUrl = Utils.Format(\"http://{0}:61211/UA/SampleClient\", System.Net.Dns.GetHostName());\n           // endpointDescription.EndpointUrl = Utils.Format(\"opc.tcp://{0}:51210/UA/SampleServer\", System.Net.Dns.GetHostName());\n           // endpointDescription.EndpointUrl = Utils.Format(\"http://{0}:51211/UA/SampleServer/None\", System.Net.Dns.GetHostName());\n           // endpointDescription.EndpointUrl = Utils.Format(\"http://{0}:51211/UA/SampleServer\", System.Net.Dns.GetHostName());\n            \n            // specify the security policy to use.\n            // endpointDescription.SecurityPolicyUri = SecurityPolicies.None;\n            // endpointDescription.SecurityMode      = MessageSecurityMode.None;;\n            endpointDescription.SecurityPolicyUri = SecurityPolicies.Basic256Sha256;\n            endpointDescription.SecurityMode      = MessageSecurityMode.SignAndEncrypt;\n            \n            // specify the transport profile.\n             endpointDescription.TransportProfileUri = Profiles.WsHttpXmlOrBinaryTransport;\n            // endpointDescription.TransportProfileUri = Profiles.WsHttpXmlTransport;\n            // endpointDescription.TransportProfileUri = Profiles.UaTcpTransport;\n\n            endpointDescription.Server.DiscoveryUrls.Add(Utils.Format(\"http://{0}:61211/UA/SampleClient/discovery\", System.Net.Dns.GetHostName()));\n\n            // load the the server certificate from the local certificate store.\n            CertificateIdentifier certificateIdentifier = new CertificateIdentifier();\n\n            certificateIdentifier.StoreType = CertificateStoreType.Windows;\n            certificateIdentifier.StorePath = \"LocalMachine\\\\My\";\n            certificateIdentifier.SubjectName = \"UA Sample Client\";\n            \n            X509Certificate2 serverCertificate = certificateIdentifier.Find();\n\n            if (serverCertificate == null)\n            {\n                throw ServiceResultException.Create(StatusCodes.BadCertificateInvalid, \"Could not find server certificate: {0}\", certificateIdentifier.SubjectName);\n            }\n\n            endpointDescription.ServerCertificate = serverCertificate.RawData;\n\n            return endpointDescription;\n        }\n    }\n}\n", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ua:ConfiguredEndpointCollection\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns:ua=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\">\n  <ua:KnownHosts />\n  <ua:Endpoints>\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>opc.tcp://localhost:61210/UA/Publisher</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>opc.tcp://192.168.2.101:51210/UA/SampleServer</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n  </ua:Endpoints>\n</ua:ConfiguredEndpointCollection>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<s1:SampleConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns:s1=\"http://opcfoundation.org/UA/Sample/Configuration.xsd\"\n  xmlns:s2=\"http://opcfoundation.org/UA/SDK/COM/Configuration.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>UA Sample Server</ApplicationName>\n  <ApplicationUri>urn:localhost:OPCFoundation:SampleServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/UA/SampleServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n\n  <SecurityConfiguration>\n    \n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>UA Sample Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n    \n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n    \n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n\n  </SecurityConfiguration>\n\n\n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>4194304</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  \n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>opc.tcp://localhost:51210/UA/SampleServer</ua:String>\n      <ua:String>http://localhost:51211/UA/SampleServer</ua:String>\n      <ua:String>https://localhost:51212/UA/SampleServer/</ua:String>\n    </BaseAddresses>\n\n    <!-- \n    These list the alternate addresses (via firewalls, multiple NICs etc.) that can be\n    used to communicate with the server. The URL used by the client when calling\n    FindServers/GetEndpoints or CreateSession will be used to filter the list of\n    endpoints returned by checking for alternate base addresses that have a domain\n    that matches the domain in the url provided by the client.\n    \n    Note that any additional domains should be listed in the server's certificate. If they\n    are left out the client make refuse to connect because it has no way to know if the \n    alternate domain was authorized by the server administrator.\n    -->\n    <!--\n    <AlternateBaseAddresses>\n      <ua:String>http://mycompany.com:40000/UA/SampleServer</ua:String>\n    </AlternateBaseAddresses>\n    -->\n\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    \n    <MinRequestThreadCount>5</MinRequestThreadCount>\n    <MaxRequestThreadCount>100</MaxRequestThreadCount>\n    <MaxQueuedRequestCount>2000</MaxQueuedRequestCount>\n    \n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n        <ua:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</ua:SecurityPolicyUri>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>100</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates />\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Opc.Ua.Server.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <MemoryBufferConfiguration xmlns=\"http://samples.org/UA/memorybuffer\">\n        <Buffers>\n          <MemoryBufferInstance>\n            <Name>UInt32</Name>\n            <TagCount>100</TagCount>\n            <DataType>UInt32</DataType>\n          </MemoryBufferInstance>\n          <MemoryBufferInstance>\n            <Name>Double</Name>\n            <TagCount>100</TagCount>\n            <DataType>Double</DataType>\n          </MemoryBufferInstance>\n        </Buffers>\n      </MemoryBufferConfiguration>\n    </ua:XmlElement>\n    \n    <!--\n    <ua:XmlElement>\n      <ListOfWrapperConfiguration xmlns=\"http://opcfoundation.org/UA/SDK/COM/Configuration.xsd\">\n        <WrapperConfiguration xsi:type=\"AeWrapperConfiguration\">\n          <NamespaceUri>opc.com://localhost/OPCSample.OPCEventServer</NamespaceUri>\n          <BrowseName>COM AE Server 1</BrowseName>\n          <Url>opc.com://localhost/OPCSample.OPCEventServer/{65168852-5783-11d1-84a0-00608cb8a7e9}</Url>\n          <MinMetadataLifetime>1000</MinMetadataLifetime>\n          <SeperatorChars></SeperatorChars>\n          <MaxQueueSize>100</MaxQueueSize>\n          <MinReconnectWait>0</MinReconnectWait>\n          <MaxReconnectWait>0</MaxReconnectWait>\n          <MaxReconnectAttempts>0</MaxReconnectAttempts>\n        </WrapperConfiguration>\n        <WrapperConfiguration xsi:type=\"DaWrapperConfiguration\">\n          <NamespaceUri>opc.com://localhost/OPCSample.OpcDaServer</NamespaceUri>\n          <BrowseName>COM DA Server 1</BrowseName>\n          <Url>opc.com://localhost/OPCSample.OpcDaServer/{625c49a1-be1c-45d7-9a8a-14bedcf5ce6c}</Url>\n          <MinMetadataLifetime>1000</MinMetadataLifetime>\n          <SeperatorChars></SeperatorChars>\n          <MaxQueueSize>100</MaxQueueSize>\n          <MinReconnectWait>0</MinReconnectWait>\n          <MaxReconnectWait>0</MaxReconnectWait>\n          <MaxReconnectAttempts>0</MaxReconnectAttempts>\n        </WrapperConfiguration>\n      </ListOfWrapperConfiguration>\n    </ua:XmlElement>\n    -->\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Opc.Ua.SampleServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, Errors and Trace -->\n    <!-- <TraceMasks>515</TraceMasks> -->\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n\n  <!-- Disables the hi-res clock if the QueryPerformanceCounter does work on a particular machine. -->\n  <DisableHiResClock>true</DisableHiResClock>\n\n</s1:SampleConfiguration>", "<ua:ConfiguredEndpointCollection\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n  xmlns=\"http://opcfoundation.org/UA/2008/02/Types.xsd\" \n  xmlns:ua=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\">\n  <ua:KnownHosts />\n  <ua:Endpoints>\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>http://localhost:61211/UA/SampleClient</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>UserName_1</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>Certificate_2</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <PolicyId xsi:nil=\"true\" />\n            <TokenType>IssuedToken_3</TokenType>\n            <IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</IssuedTokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n    <ua:ConfiguredEndpoint>\n      <ua:Endpoint>\n        <EndpointUrl>http://localhost:51211/UA/SampleServer</EndpointUrl>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <UserIdentityTokens>\n          <UserTokenPolicy>\n            <TokenType>Anonymous_0</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>UserName_1</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <TokenType>Certificate_2</TokenType>\n          </UserTokenPolicy>\n          <UserTokenPolicy>\n            <PolicyId xsi:nil=\"true\" />\n            <TokenType>IssuedToken_3</TokenType>\n            <IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</IssuedTokenType>\n          </UserTokenPolicy>\n        </UserIdentityTokens>\n        <TransportProfileUri>http://opcfoundation.org/UA/profiles/transport/wsxmlorbinary</TransportProfileUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ua:Endpoint>\n      <ua:UpdateBeforeConnect>true</ua:UpdateBeforeConnect>\n      <ua:SelectedUserTokenPolicy>0</ua:SelectedUserTokenPolicy>\n    </ua:ConfiguredEndpoint>\n\n  </ua:Endpoints>\n</ua:ConfiguredEndpointCollection>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>UA Stack Test Server</ApplicationName>\n  <ApplicationUri>urn:localhost:OPCFoundation:TestServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/UA/TestServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n\n  <SecurityConfiguration>\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\StackTest\\CertificateStores\\PrivateKeys</StorePath>\n      <SubjectName>UA Stack Test Server</SubjectName>\n    </ApplicationCertificate>\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\StackTest\\CertificateStores\\CertificateAuthorities</StorePath>\n    </TrustedIssuerCertificates>\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\StackTest\\CertificateStores\\TrustList</StorePath>\n    </TrustedPeerCertificates>\n    <AutoAcceptUntrustedCertificates>false</AutoAcceptUntrustedCertificates>\n  </SecurityConfiguration>\n  \n  <!--<TransportConfigurations>\n    <TransportConfiguration>\n      <UriScheme>opc.tcp</UriScheme>\n      <TypeName>Opc.Ua.NativeStack.NativeStackBinding,Opc.Ua.NativeStackWrapper</TypeName>\n    </TransportConfiguration>\n  </TransportConfigurations>-->\n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>4194304</MaxByteStringLength>\n    <MaxArrayLength>1048576</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>70000</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>60000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:9000/UA/TestServer</ua:String>\n      <ua:String>opc.tcp://localhost:9001/UA/TestServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies />\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>100</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>100</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <MaxRegistrationInterval>0</MaxRegistrationInterval>\n  </ServerConfiguration>\n\n  <TraceConfiguration>\n    <OutputFilePath>%LocalApplicationData%\\OPC Foundation\\Logs\\Opc.Ua.StackTestServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <TraceMasks>513</TraceMasks>\n    <!-- Show Only Security, Errors and Trace -->\n    <!-- <TraceMasks>515</TraceMasks> -->\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n\n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart AlarmCondition Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UASDK:AlarmConditionServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/UASDK/AlarmConditionServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart AlarmCondition Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62543/Quickstarts/AlarmConditionServer</ua:String>\n      <ua:String>opc.tcp://localhost:62544/Quickstarts/AlarmConditionServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates />\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Opc.Ua.Server.nodes.xml</NodeManagerSaveFile>\n    <MaxSubscriptionCount>50</MaxSubscriptionCount>    \n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <AlarmConditionServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/AlarmCondition\">\n        <Areas>\n          <AreaConfiguration>\n            <Name>Green</Name>\n            <SubAreas>\n              <AreaConfiguration>\n                <Name>East</Name>\n                <SubAreas>\n                  <AreaConfiguration>\n                    <Name>Red</Name>\n                    <SourcePaths>\n                      <ua:String>Colours/EastTank</ua:String>\n                      <ua:String>Colours/NorthMotor</ua:String>\n                    </SourcePaths>\n                  </AreaConfiguration>\n                  <AreaConfiguration>\n                    <Name>Blue</Name>\n                    <SourcePaths>\n                      <ua:String>Metals/WestTank</ua:String>\n                      <ua:String>Metals/SouthMotor</ua:String>\n                    </SourcePaths>\n                  </AreaConfiguration>\n                </SubAreas>\n              </AreaConfiguration>\n            </SubAreas>\n          </AreaConfiguration>\n          <AreaConfiguration>\n            <Name>Yellow</Name>\n            <SubAreas>\n              <AreaConfiguration>\n                <Name>West</Name>\n                <SubAreas>\n                  <AreaConfiguration>\n                    <Name>Red</Name>\n                    <SourcePaths>\n                      <ua:String>Metals/SouthMotor</ua:String>\n                      <ua:String>Colours/NorthMotor</ua:String>\n                    </SourcePaths>\n                  </AreaConfiguration>\n                  <AreaConfiguration>\n                    <Name>Blue</Name>\n                    <SourcePaths>\n                      <ua:String>Colours/EastTank</ua:String>\n                      <ua:String>Metals/WestTank</ua:String>\n                  </SourcePaths>\n                  </AreaConfiguration>\n                </SubAreas>\n              </AreaConfiguration>\n            </SubAreas>\n          </AreaConfiguration>\n        </Areas>\n      </AlarmConditionServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.AlarmConditionServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n\n</ApplicationConfiguration>\n", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart InformationModel Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UASDK:InformationModelServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/UASDK/InformationModelServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart InformationModel Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/Quickstarts/BoilerServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/Quickstarts/BoilerServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Quickstarts.BoilerServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <BoilerServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/Boiler\">\n      </BoilerServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.BoilerServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\">\n  <ApplicationName>Quickstart COM DataAccess Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UASDK:ComDataAccessServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/UASDK/ComDataAccessServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n\n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart COM DataAccess Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Windows</StoreType>\n      <StorePath>LocalMachine\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n\n  </SecurityConfiguration>\n\n  <TransportConfigurations>\n    <TransportConfiguration>\n      <UriScheme>http</UriScheme>\n      <TypeName>Opc.Ua.Bindings.UaSoapXmlBinding</TypeName>\n    </TransportConfiguration>\n    <TransportConfiguration>\n      <UriScheme>opc.tcp</UriScheme>\n      <TypeName>Opc.Ua.Bindings.UaTcpBinding</TypeName>\n    </TransportConfiguration>\n  </TransportConfigurations>\n\n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  \n  <ServerConfiguration>\n    <BaseAddresses xmlns:d3p1=\"http://opcfoundation.org/UA/2008/02/Types.xsd\">\n      <d3p1:String>http://localhost:62540/Quickstarts/ComDataAccessServer</d3p1:String>\n      <d3p1:String>opc.tcp://localhost:62541/Quickstarts/ComDataAccessServer</d3p1:String>\n    </BaseAddresses>\n    <AlternateBaseAddresses xmlns:d3p1=\"http://opcfoundation.org/UA/2008/02/Types.xsd\" />\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <MinRequestThreadCount>10</MinRequestThreadCount>\n    <MaxRequestThreadCount>100</MaxRequestThreadCount>\n    <MaxQueuedRequestCount>200</MaxQueuedRequestCount>\n    <UserTokenPolicies xmlns:d3p1=\"http://opcfoundation.org/UA/2008/02/Types.xsd\">\n      <d3p1:UserTokenPolicy>\n        <d3p1:PolicyId i:nil=\"true\" />\n        <d3p1:TokenType>Anonymous_0</d3p1:TokenType>\n        <d3p1:IssuedTokenType i:nil=\"true\" />\n        <d3p1:IssuerEndpointUrl i:nil=\"true\" />\n        <d3p1:SecurityPolicyUri i:nil=\"true\" />\n      </d3p1:UserTokenPolicy>\n      <d3p1:UserTokenPolicy>\n        <d3p1:PolicyId i:nil=\"true\" />\n        <d3p1:TokenType>UserName_1</d3p1:TokenType>\n        <d3p1:IssuedTokenType i:nil=\"true\" />\n        <d3p1:IssuerEndpointUrl i:nil=\"true\" />\n        <d3p1:SecurityPolicyUri i:nil=\"true\" />\n      </d3p1:UserTokenPolicy>\n      <d3p1:UserTokenPolicy>\n        <d3p1:PolicyId i:nil=\"true\" />\n        <d3p1:TokenType>Certificate_2</d3p1:TokenType>\n        <d3p1:IssuedTokenType i:nil=\"true\" />\n        <d3p1:IssuerEndpointUrl i:nil=\"true\" />\n        <d3p1:SecurityPolicyUri i:nil=\"true\" />\n      </d3p1:UserTokenPolicy>\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Opc.Ua.Server.nodes.xml</NodeManagerSaveFile>\n    <MinSubscriptionLifetime>10000</MinSubscriptionLifetime>\n  </ServerConfiguration>\n  <Extensions xmlns:d2p1=\"http://opcfoundation.org/UA/2008/02/Types.xsd\">\n    <d2p1:XmlElement>\n      <ComWrapperServerConfiguration xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://opcfoundation.org/UA/SDK/COMInterop\">\n        <WrappedServers>\n          \n          <!--\n              <ComClientConfiguration i:type=\"ComDaClientConfiguration\">\n                <ServerUrl>opc.com://localhost/Matrikon.OPC.Simulation/f8582cf2-88fb-11d0-b850-00c0f0104305</ServerUrl>\n                <ServerName>DA</ServerName>\n                <MaxReconnectWait>100000</MaxReconnectWait>\n                <SeperatorChars></SeperatorChars>\n                <BrowseToNotSupported>false</BrowseToNotSupported>\n              </ComClientConfiguration>\n              <ComClientConfiguration i:type=\"ComAeClientConfiguration\">\n                <ServerUrl>opc.com://localhost/Matrikon.OPC.Simulation/f8582cf2-88fb-11d0-b850-00c0f0104305</ServerUrl>\n                <ServerName>AE</ServerName>\n                <MaxReconnectWait>100000</MaxReconnectWait>\n                <SeperatorChars></SeperatorChars>\n              </ComClientConfiguration>\n              <ComClientConfiguration i:type=\"ComHdaClientConfiguration\">\n                <ServerUrl>opc.com://localhost/Matrikon.OPC.Simulation/f8582cf2-88fb-11d0-b850-00c0f0104305</ServerUrl>\n                <ServerName>HDA</ServerName>\n                <MaxReconnectWait>100000</MaxReconnectWait>\n                <SeperatorChars></SeperatorChars>\n                <AddCapabilitiesToServerObject>false</AddCapabilitiesToServerObject>\n                <AttributeSamplingInterval>1000</AttributeSamplingInterval>\n                <TreatUncertainAsBad>true</TreatUncertainAsBad>\n                <PercentDataBad>0</PercentDataBad>\n                <PercentDataGood>100</PercentDataGood>\n                <SteppedSlopedExtrapolation>false</SteppedSlopedExtrapolation>\n              </ComClientConfiguration>\n          -->\n            <ComClientConfiguration i:type=\"ComDaClientConfiguration\">\n              <ServerUrl>opc.com://localhost/OPCSample.OpcDaServer/625c49a1-be1c-45d7-9a8a-14bedcf5ce6c</ServerUrl>\n              <ServerName>DA</ServerName>\n              <MaxReconnectWait>100000</MaxReconnectWait>\n              <SeperatorChars i:nil=\"true\" />\n              <BrowseToNotSupported>false</BrowseToNotSupported>\n            </ComClientConfiguration>\n              <ComClientConfiguration i:type=\"ComAeClientConfiguration\">\n                <ServerUrl>opc.com://localhost/OPCSample.OPCEventServer/{65168852-5783-11d1-84a0-00608cb8a7e9}</ServerUrl>\n                <ServerName>AE</ServerName>\n                <MaxReconnectWait>1000000000</MaxReconnectWait>\n                <SeperatorChars i:nil=\"true\" />\n              </ComClientConfiguration>\n              <ComClientConfiguration i:type=\"ComHdaClientConfiguration\">\n                <ServerUrl>opc.com://localhost/OPCSample.OpcHdaServer/{6a5eedec-1509-4627-997f-993ccb65ab7c}</ServerUrl>\n                <ServerName>HDA</ServerName>\n                <MaxReconnectWait>1000000000</MaxReconnectWait>\n                <SeperatorChars></SeperatorChars>\n                <AddCapabilitiesToServerObject>true</AddCapabilitiesToServerObject>\n                <AttributeSamplingInterval>1000</AttributeSamplingInterval>\n                <TreatUncertainAsBad>true</TreatUncertainAsBad>\n                <PercentDataBad>0</PercentDataBad>\n                <PercentDataGood>100</PercentDataGood>\n                <SteppedSlopedExtrapolation>false</SteppedSlopedExtrapolation>\n              </ComClientConfiguration>\n          \n        </WrappedServers>\n      </ComWrapperServerConfiguration>\n    </d2p1:XmlElement>\n  </Extensions>\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.ComDataAccessServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  <DisableHiResClock>true</DisableHiResClock>\n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\" xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\">\n  <ApplicationName>DSATS Demo Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UA:DsatsDemoServer</ApplicationUri>\n  <ProductUri>uri:opcfoundation.org:DsatsDemoServer</ProductUri>\n  <ApplicationType>ClientAndServer_2</ApplicationType>\n  <SecurityConfiguration>\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n    </ApplicationCertificate>\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n      <TrustedCertificates />\n    </TrustedIssuerCertificates>\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n      <TrustedCertificates />\n    </TrustedPeerCertificates>\n    <NonceLength>32</NonceLength>\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n    <UserRoleDirectory i:nil=\"true\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" />\n  </SecurityConfiguration>\n  <TransportConfigurations>\n  </TransportConfigurations>\n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses xmlns:d2p1=\"http://opcfoundation.org/UA/2008/02/Types.xsd\">\n      <d2p1:String>opc.tcp://localhost:61000/DsatsDemoServer</d2p1:String>\n      <d2p1:String>http://localhost:61001/DsatsDemoServer</d2p1:String>\n    </BaseAddresses>\n    <AlternateBaseAddresses xmlns:d2p1=\"http://opcfoundation.org/UA/2008/02/Types.xsd\" />\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <MinRequestThreadCount>10</MinRequestThreadCount>\n    <MaxRequestThreadCount>100</MaxRequestThreadCount>\n    <MaxQueuedRequestCount>200</MaxQueuedRequestCount>\n    <UserTokenPolicies xmlns:d2p1=\"http://opcfoundation.org/UA/2008/02/Types.xsd\">\n      <d2p1:UserTokenPolicy>\n        <d2p1:PolicyId i:nil=\"true\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" />\n        <d2p1:TokenType>Anonymous_0</d2p1:TokenType>\n        <d2p1:IssuedTokenType i:nil=\"true\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" />\n        <d2p1:IssuerEndpointUrl i:nil=\"true\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" />\n        <d2p1:SecurityPolicyUri i:nil=\"true\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" />\n      </d2p1:UserTokenPolicy>\n      <d2p1:UserTokenPolicy>\n        <d2p1:PolicyId i:nil=\"true\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" />\n        <d2p1:TokenType>UserName_1</d2p1:TokenType>\n        <d2p1:IssuedTokenType i:nil=\"true\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" />\n        <d2p1:IssuerEndpointUrl i:nil=\"true\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" />\n        <d2p1:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</d2p1:SecurityPolicyUri>\n      </d2p1:UserTokenPolicy>\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates />\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile i:nil=\"true\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" />\n    <MinSubscriptionLifetime>10000</MinSubscriptionLifetime>\n    <MaxPublishRequestCount>20</MaxPublishRequestCount>\n    <MaxSubscriptionCount>100</MaxSubscriptionCount>\n    <MaxEventQueueSize>10000</MaxEventQueueSize>\n  </ServerConfiguration>\n  <ClientConfiguration>\n    <DefaultSessionTimeout>60000</DefaultSessionTimeout>\n    <WellKnownDiscoveryUrls>\n      <ua:String>opc.tcp://{0}:4840</ua:String>\n      <ua:String>http://{0}:52601/UADiscovery</ua:String>\n      <ua:String>http://{0}/UADiscovery/Default.svc</ua:String>\n    </WellKnownDiscoveryUrls>\n    <DiscoveryServers>\n    </DiscoveryServers>\n    <MinSubscriptionLifetime>10000</MinSubscriptionLifetime>\n  </ClientConfiguration>\n  <Extensions>\n    <ua:XmlElement>\n      <DsatsDemoServerConfiguration xmlns=\"http://opcfoundation.org/DSATSDemo\">\n        <!--<DataSourceLocation>.\\Schema\\DataSource.xml</DataSourceLocation>-->\n        <DataSourceLocation>%CommonApplicationData%\\OPC Foundation\\DSATS\\DataSource.xml</DataSourceLocation>\n        <AccessControlFilePath>%CommonApplicationData%\\OPC Foundation\\DSATS\\DsatsDemoAccessControl.txt</AccessControlFilePath>\n        <UseSecurity>false</UseSecurity>\n      </DsatsDemoServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n  <TraceConfiguration>\n    <OutputFilePath>%CommonApplicationData%\\OPC Foundation\\DSATS\\Logs\\DsatsDemoServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart DataAccess Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UASDK:DataAccessServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/UASDK/DataAccessServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart DataAccess Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62546/Quickstarts/DataAccessServer</ua:String>\n      <ua:String>opc.tcp://localhost:62547/Quickstarts/DataAccessServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>true</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Opc.Ua.Server.nodes.xml</NodeManagerSaveFile>\n    <MaxSubscriptionCount>200</MaxSubscriptionCount>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <DataAccessServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/DataAccess\">\n      </DataAccessServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.DataAccessServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart DataTypes Server</ApplicationName>\n  <ApplicationUri>urn:localhost:somecompany.com:DataTypesServer</ApplicationUri>\n  <ProductUri>uri:somecompany.com:DataTypesServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart DataTypes Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/DataTypesServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/DataTypesServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>true</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>DataTypesServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <DataTypesServerConfiguration xmlns=\"http://somecompany.com/DataTypes\">\n      </DataTypesServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\DataTypesServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart Empty Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UA:Quickstarts:EmptyServer</ApplicationUri>\n  <ProductUri>uri:opcfoundation.org:Quickstarts:EmptyServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart Empty Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>https://localhost:62545/Quickstarts/EmptyServer/</ua:String>\n      <ua:String>opc.tcp://localhost:62546/Quickstarts/EmptyServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Quickstarts.EmptyServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <EmptyServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/Empty\">\n      </EmptyServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.EmptyServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart HistoricalAccess Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UASDK:HistoricalAccessServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/UASDK/HistoricalAccessServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart HistoricalAccess Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62549/Quickstarts/HistoricalAccessServer</ua:String>\n      <ua:String>opc.tcp://localhost:62550/Quickstarts/HistoricalAccessServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>true</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Opc.Ua.Server.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <HistoricalAccessServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/HistoricalAccess\">\n        <ArchiveRoot>.\\Archive</ArchiveRoot>\n      </HistoricalAccessServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.HistoricalAccessServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart HistoricalEvents Server</ApplicationName>\n  <ApplicationUri>http://localhost/Quickstarts/HistoricalEventsServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/Quickstarts/HistoricalEventsServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart HistoricalEvents Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62552/Quickstarts/HistoricalEventsServer</ua:String>\n      <ua:String>opc.tcp://localhost:62553/Quickstarts/HistoricalEventsServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Quickstarts.HistoricalEventsServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <HistoricalEventsServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/HistoricalEvents\">\n      </HistoricalEventsServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.HistoricalEventsServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart Methods Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UA:Quickstarts:MethodsServer</ApplicationUri>\n  <ProductUri>uri:opcfoundation.org:Quickstarts:MethodsServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart Methods Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/Quickstarts/MethodsServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/Quickstarts/MethodsServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Quickstarts.MethodsServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <MethodsServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/Methods\">\n      </MethodsServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.MethodsServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart PerfTest Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UASDK:PerfTestServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/UASDK/PerfTestServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\Quickstarts\\CertificateStores\\PrivateKeys</StorePath>\n      <SubjectName>Quickstart PerfTest Server</SubjectName>\n    </ApplicationCertificate>\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\Quickstarts\\CertificateStores\\CertificateAuthorities</StorePath>\n    </TrustedIssuerCertificates>\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\Quickstarts\\CertificateStores\\TrustList</StorePath>\n    </TrustedPeerCertificates>\n  </SecurityConfiguration>\n \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>4194304</MaxByteStringLength>\n    <MaxArrayLength>655350</MaxArrayLength>\n    <MaxMessageSize>8388608</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/Quickstarts/PerfTestServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/Quickstarts/PerfTestServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>50000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Quickstarts.PerfTestServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <PerfTestServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/PerfTest\">\n      </PerfTestServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>%LocalApplicationData%\\OPC Foundation\\Logs\\Quickstarts.PerfTestServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart Reference Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UA:Quickstarts:ReferenceServer</ApplicationUri>\n  <ProductUri>uri:opcfoundation.org:Quickstarts:ReferenceServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart Reference Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/Quickstarts/ReferenceServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/Quickstarts/ReferenceServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>100</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Quickstarts.ReferenceServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <ReferenceServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/Empty\">\n      </ReferenceServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.ReferenceServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart SimpleEvents Server</ApplicationName>\n  <ApplicationUri>http://localhost/Quickstarts/SimpleEventsServer</ApplicationUri>\n  <ProductUri>http://opcfoundation.org/Quickstarts/SimpleEventsServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart SimpleEvents Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/Quickstarts/SimpleEventsServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/Quickstarts/SimpleEventsServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Quickstarts.SimpleEventsServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <SimpleEventsServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/SimpleEvents\">\n      </SimpleEventsServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.SimpleEventsServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart Tutorial Server</ApplicationName>\n  <ApplicationUri>urn:localhost:somecompany.com:TutorialServer</ApplicationUri>\n  <ProductUri>uri:somecompany.com:TutorialServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart Tutorial Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/TutorialServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/TutorialServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>true</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>TutorialServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <TutorialServerConfiguration xmlns=\"http://somecompany.com/Tutorial\">\n      </TutorialServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\TutorialServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart Tutorial Server</ApplicationName>\n  <ApplicationUri>urn:localhost:somecompany.com:TutorialServer</ApplicationUri>\n  <ProductUri>uri:somecompany.com:TutorialServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart Tutorial Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/TutorialServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/TutorialServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>true</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>TutorialServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <TutorialServerConfiguration xmlns=\"http://somecompany.com/Tutorial\">\n      </TutorialServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\TutorialServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart Tutorial Server</ApplicationName>\n  <ApplicationUri>urn:localhost:somecompany.com:TutorialServer</ApplicationUri>\n  <ProductUri>uri:somecompany.com:TutorialServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart Tutorial Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/TutorialServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/TutorialServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>true</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>TutorialServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <TutorialServerConfiguration xmlns=\"http://somecompany.com/Tutorial\">\n      </TutorialServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\TutorialServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart UserAuthentication Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UA:Quickstarts:UserAuthenticationServer</ApplicationUri>\n  <ProductUri>uri:opcfoundation.org:Quickstarts:UserAuthenticationServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart UserAuthentication Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>http://localhost:62540/Quickstarts/UserAuthenticationServer</ua:String>\n      <ua:String>opc.tcp://localhost:62541/Quickstarts/UserAuthenticationServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n        <ua:SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15</ua:SecurityPolicyUri>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n\n      <!--\n      The ServicePrincipalName (SPN) for the UA Server must be specified as the IssuerEndpointUrl\n      \n      The ServicePrincipalName (SPN) must be registered with the Kerberos Ticket Granting Server (e.g. Windows Domain Controller).\n      The SPN identifies the host that UA server is running on and the name of the application.\n      A domain admin must grant delegate permission to the domain account that the UA server runs under.\n      That can be done with the setspn.exe utility:\n      \n      setspn -U -S <hostname>/<exename> <domain accountname>\n      setspn -C -S <hostname>/<exename> <hostname>\n      \n      The latter form is used if the UA server runs a Windows Service using the built in Windows Service account.   \n      -->\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>http://docs.oasis-open.org/wss/oasis-wss-kerberos-token-profile-1.1</ua:IssuedTokenType>\n        <ua:IssuerEndpointUrl>Aquamarine/Opc.Ua.UserAuthenticationServer</ua:IssuerEndpointUrl>\n      </ua:UserTokenPolicy>\n      \n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Quickstarts.UserAuthenticationServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <UserAuthenticationServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/UserAuthentication\">\n      </UserAuthenticationServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.UserAuthenticationServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ApplicationConfiguration\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:ua=\"http://opcfoundation.org/UA/2008/02/Types.xsd\"\n  xmlns=\"http://opcfoundation.org/UA/SDK/Configuration.xsd\"\n>\n  <ApplicationName>Quickstart Views Server</ApplicationName>\n  <ApplicationUri>urn:localhost:UA:Quickstarts:ViewsServer</ApplicationUri>\n  <ProductUri>uri:opcfoundation.org:Quickstarts:ViewsServer</ProductUri>\n  <ApplicationType>Server_0</ApplicationType>\n  \n  <SecurityConfiguration>\n\n    <!-- Where the application instance certificate is stored (MachineDefault) -->\n    <ApplicationCertificate>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\MachineDefault</StorePath>\n      <SubjectName>Quickstart Views Server</SubjectName>\n    </ApplicationCertificate>\n\n    <!-- Where the trust list is stored (UA Applications) -->\n    <TrustedPeerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Applications</StorePath>\n    </TrustedPeerCertificates>\n\n    <!-- Where the issuer certificate are stored (certificate authorities) -->\n    <TrustedIssuerCertificates>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\UA Certificate Authorities</StorePath>\n    </TrustedIssuerCertificates>\n\n    <!-- The directory used to store invalid certficates for later review by the administrator. -->\n    <RejectedCertificateStore>\n      <StoreType>Directory</StoreType>\n      <StorePath>%CommonApplicationData%\\OPC Foundation\\CertificateStores\\RejectedCertificates</StorePath>\n    </RejectedCertificateStore>\n  </SecurityConfiguration>\n  \n  <TransportConfigurations></TransportConfigurations>\n  \n  <TransportQuotas>\n    <OperationTimeout>600000</OperationTimeout>\n    <MaxStringLength>1048576</MaxStringLength>\n    <MaxByteStringLength>1048576</MaxByteStringLength>\n    <MaxArrayLength>65535</MaxArrayLength>\n    <MaxMessageSize>4194304</MaxMessageSize>\n    <MaxBufferSize>65535</MaxBufferSize>\n    <ChannelLifetime>300000</ChannelLifetime>\n    <SecurityTokenLifetime>3600000</SecurityTokenLifetime>\n  </TransportQuotas>\n  <ServerConfiguration>\n    <BaseAddresses>\n      <ua:String>https://localhost:62545/Quickstarts/ViewsServer/</ua:String>\n      <ua:String>opc.tcp://localhost:62546/Quickstarts/ViewsServer</ua:String>\n    </BaseAddresses>\n    <SecurityPolicies>\n      <ServerSecurityPolicy>\n        <SecurityMode>None_1</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#None</SecurityPolicyUri>\n        <SecurityLevel>0</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>Sign_2</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>1</SecurityLevel>\n      </ServerSecurityPolicy>\n      <ServerSecurityPolicy>\n        <SecurityMode>SignAndEncrypt_3</SecurityMode>\n        <SecurityPolicyUri>http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256</SecurityPolicyUri>\n        <SecurityLevel>5</SecurityLevel>\n      </ServerSecurityPolicy>\n    </SecurityPolicies>\n    <UserTokenPolicies>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Anonymous_0</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>UserName_1</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <ua:UserTokenPolicy>\n        <ua:TokenType>Certificate_2</ua:TokenType>\n      </ua:UserTokenPolicy>\n      <!--\n      <ua:UserTokenPolicy>\n        <ua:TokenType>IssuedToken_3</ua:TokenType>\n        <ua:IssuedTokenType>urn:oasis:names:tc:SAML:1.0:assertion:Assertion</ua:IssuedTokenType>\n      </ua:UserTokenPolicy>\n      -->\n    </UserTokenPolicies>\n    <DiagnosticsEnabled>false</DiagnosticsEnabled>\n    <MaxSessionCount>100</MaxSessionCount>\n    <MinSessionTimeout>10000</MinSessionTimeout>\n    <MaxSessionTimeout>3600000</MaxSessionTimeout>\n    <MaxBrowseContinuationPoints>10</MaxBrowseContinuationPoints>\n    <MaxQueryContinuationPoints>10</MaxQueryContinuationPoints>\n    <MaxHistoryContinuationPoints>100</MaxHistoryContinuationPoints>\n    <MaxRequestAge>600000</MaxRequestAge>\n    <MinPublishingInterval>100</MinPublishingInterval>\n    <MaxPublishingInterval>3600000</MaxPublishingInterval>\n    <PublishingResolution>50</PublishingResolution>\n    <MaxSubscriptionLifetime>3600000</MaxSubscriptionLifetime>\n    <MaxMessageQueueSize>10</MaxMessageQueueSize>\n    <MaxNotificationQueueSize>100</MaxNotificationQueueSize>\n    <MaxNotificationsPerPublish>1000</MaxNotificationsPerPublish>\n    <MinMetadataSamplingInterval>1000</MinMetadataSamplingInterval>\n    <AvailableSamplingRates>\n      <SamplingRateGroup>\n        <Start>5</Start>\n        <Increment>5</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>100</Start>\n        <Increment>100</Increment>\n        <Count>4</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>500</Start>\n        <Increment>250</Increment>\n        <Count>2</Count>\n      </SamplingRateGroup>\n      <SamplingRateGroup>\n        <Start>1000</Start>\n        <Increment>500</Increment>\n        <Count>20</Count>\n      </SamplingRateGroup>\n    </AvailableSamplingRates>\n    <MaxRegistrationInterval>30000</MaxRegistrationInterval>\n    <NodeManagerSaveFile>Quickstarts.ViewsServer.nodes.xml</NodeManagerSaveFile>\n  </ServerConfiguration>\n\n  <Extensions>\n    <ua:XmlElement>\n      <ViewsServerConfiguration xmlns=\"http://opcfoundation.org/Quickstarts/Views\">\n      </ViewsServerConfiguration>\n    </ua:XmlElement>\n  </Extensions>\n\n  <TraceConfiguration>\n    <OutputFilePath>Logs\\Quickstarts.ViewsServer.log.txt</OutputFilePath>\n    <DeleteOnLoad>true</DeleteOnLoad>\n    <!-- Show Only Errors -->\n    <!-- <TraceMasks>1</TraceMasks> -->\n    <!-- Show Only Security and Errors -->\n    <!-- <TraceMasks>513</TraceMasks> -->\n    <!-- Show Only Security, Errors and Trace -->\n    <TraceMasks>515</TraceMasks>\n    <!-- Show Only Security, COM Calls, Errors and Trace -->\n    <!-- <TraceMasks>771</TraceMasks> -->\n    <!-- Show Only Security, Service Calls, Errors and Trace -->\n    <!-- <TraceMasks>523</TraceMasks> -->\n    <!-- Show Only Security, ServiceResultExceptions, Errors and Trace -->\n    <!-- <TraceMasks>519</TraceMasks> -->\n  </TraceConfiguration>\n  \n</ApplicationConfiguration>"], "filenames": ["ComIOP/Wrapper/ServerWrapper/Opc.Ua.ComServerWrapper.Config.xml", "SampleApplications/SampleLibraries/Controls/Endpoints/ConfiguredServerDlg.cs", "SampleApplications/Samples/Client/Opc.Ua.SampleClient.Config.xml", "SampleApplications/Samples/Client/Opc.Ua.SampleClient.Endpoints.xml", "SampleApplications/Samples/HistoryClient/Helpers.cs", "SampleApplications/Samples/Publisher/Opc.Ua.Publisher.Endpoints.xml", "SampleApplications/Samples/Server/Opc.Ua.SampleServer.Config.xml", "SampleApplications/Samples/ServerTest/Opc.Ua.ServerTestTool.Endpoints.xml", "SampleApplications/Stack Test/Server/Opc.Ua.StackTestServer.Config.xml", "SampleApplications/Workshop/AlarmCondition/Server/Quickstarts.AlarmConditionServer.Config.xml", "SampleApplications/Workshop/Boiler/Server/Quickstarts.BoilerServer.Config.xml", "SampleApplications/Workshop/ComDa/Server/Quickstarts.ComDaServerWrapper.Config.xml", "SampleApplications/Workshop/DSATS/Server/DsatsDemoServer.Config.xml", "SampleApplications/Workshop/DataAccess/Server/Quickstarts.DataAccessServer.Config.xml", "SampleApplications/Workshop/DataTypes/Server/Quickstarts.DataTypesServer.Config.xml", "SampleApplications/Workshop/Empty/Server/Quickstarts.EmptyServer.Config.xml", "SampleApplications/Workshop/HistoricalAccess/Server/Quickstarts.HistoricalAccessServer.Config.xml", "SampleApplications/Workshop/HistoricalEvents/Server/Quickstarts.HistoricalEventsServer.Config.xml", "SampleApplications/Workshop/Methods/Server/Quickstarts.MethodsServer.Config.xml", "SampleApplications/Workshop/PerfTest/Server/Quickstarts.PerfTestServer.Config.xml", "SampleApplications/Workshop/Reference/Server/Quickstarts.ReferenceServer.Config.xml", "SampleApplications/Workshop/SimpleEvents/Server/Quickstarts.SimpleEventsServer.Config.xml", "SampleApplications/Workshop/Tutorial/Server - Final/TutorialServer.Config.xml", "SampleApplications/Workshop/Tutorial/Server - Initial/TutorialServer.Config.xml", "SampleApplications/Workshop/Tutorial/Server/TutorialServer.Config.xml", "SampleApplications/Workshop/UserAuthentication/Server/Quickstarts.UserAuthenticationServer.Config.xml", "SampleApplications/Workshop/Views/Server/Quickstarts.ViewsServer.Config.xml"], "buggy_code_start_loc": [20, 903, 215, 77, 234, 12, 89, 11, 57, 58, 59, 67, 53, 59, 59, 59, 60, 60, 59, 47, 58, 59, 59, 59, 59, 59, 59], "buggy_code_end_loc": [66, 903, 253, 202, 283, 36, 117, 39, 75, 84, 85, 80, 57, 85, 85, 85, 86, 86, 85, 73, 65, 85, 85, 85, 85, 87, 85], "fixing_code_start_loc": [21, 904, 214, 77, 234, 12, 89, 11, 56, 57, 58, 67, 54, 58, 58, 58, 59, 59, 58, 46, 57, 58, 58, 58, 58, 58, 58], "fixing_code_end_loc": [72, 905, 228, 202, 283, 36, 99, 39, 65, 71, 72, 80, 62, 72, 72, 72, 73, 73, 72, 60, 71, 72, 72, 72, 72, 72, 72], "type": "CWE-320", "message": "An issue was discovered in OPC UA .NET Standard Stack and Sample Code before GitHub commit 2018-04-12, and OPC UA .NET Legacy Stack and Sample Code before GitHub commit 2018-03-13. A vulnerability in OPC UA applications can allow a remote attacker to determine a Server's private key by sending carefully constructed bad UserIdentityTokens as part of an oracle attack.", "other": {"cve": {"id": "CVE-2018-7559", "sourceIdentifier": "cve@mitre.org", "published": "2018-06-13T18:29:00.620", "lastModified": "2019-06-10T11:29:00.227", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "An issue was discovered in OPC UA .NET Standard Stack and Sample Code before GitHub commit 2018-04-12, and OPC UA .NET Legacy Stack and Sample Code before GitHub commit 2018-03-13. A vulnerability in OPC UA applications can allow a remote attacker to determine a Server's private key by sending carefully constructed bad UserIdentityTokens as part of an oracle attack."}, {"lang": "es", "value": "Se ha descubierto un problema en OPC UA .NET Standard Stack and Sample Code antes del commit de GitHub del 2018-04-12, as\u00ed como OPC UA .NET Legacy Stack and Sample Code antes del commit de GitHub del 2018-03-13. Una vulnerabilidad en las aplicaciones de OPC UA puede permitir que un atacante remoto determine la clave privada de un servidor mediante el env\u00edo de UserIdentityTokens malos cuidadosamente construidos como parte de un ataque de or\u00e1culo."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-320"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opcfoundation:ua-.net-legacy:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.03.342", "matchCriteriaId": "C7100704-279B-4C7E-B3C4-420BC1E6D2B6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:opcfoundation:ua-.netstandard:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.03.352.10", "matchCriteriaId": "DC8EA7B6-ECC8-40B8-8BE5-26C76E0112E9"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/108688", "source": "cve@mitre.org"}, {"url": "https://github.com/OPCFoundation/UA-.NET-Legacy/commit/e2a781b38efb8686d2bd850c2f2372b5c670bc45", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/OPCFoundation/UA-.NETStandard/commit/ebcf026a54dd0c9052cff009d96d827ac923d150", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://opcfoundation-onlineapplications.org/faq/SecurityBulletins/OPC_Foundation_Security_Bulletin_CVE-2018-7559.pdf", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/OPCFoundation/UA-.NET-Legacy/commit/e2a781b38efb8686d2bd850c2f2372b5c670bc45"}}