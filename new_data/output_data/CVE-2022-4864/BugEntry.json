{"buggy_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Admins;\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::get('id');\n\nif (($page == 'admins' || $page == 'overview') && $userinfo['change_serversettings'] == '1') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_admins\");\n\n\t\ttry {\n\t\t\t$admin_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.admins.php';\n\t\t\t$collection = (new Collection(Admins::class, $userinfo))\n\t\t\t\t->withPagination($admin_list_data['admin_list']['columns'], $admin_list_data['admin_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $admin_list_data, 'admin_list'),\n\t\t\t'actions_links' => [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'admins', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.admin_add')\n\t\t\t\t]\n\t\t\t]\n\t\t]);\n\t} elseif ($action == 'su') {\n\t\ttry {\n\t\t\t$json_result = Admins::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\t\t$destination_admin = $result['loginname'];\n\n\t\tif ($destination_admin != '' && $result['adminid'] != $userinfo['userid']) {\n\t\t\t$result['switched_user'] = CurrentUser::getData();\n\t\t\t$result['adminsession'] = 1;\n\t\t\t$result['userid'] = $result['adminid'];\n\t\t\tCurrentUser::setData($result);\n\n\t\t\t$log->logAction(\n                FroxlorLogger::ADM_ACTION,\n                LOG_INFO,\n                \"switched adminuser and is now '\" . $destination_admin . \"'\"\n            );\n\t\t\tResponse::redirectTo('admin_index.php');\n\t\t} else {\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t'action' => 'login'\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Admins::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['loginname'] != '') {\n\t\t\tif ($result['adminid'] == $userinfo['userid']) {\n\t\t\t\tResponse::standardError('youcantdeleteyourself');\n\t\t\t}\n\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\tAdmins::getLocal($userinfo, [\n\t\t\t\t\t'id' => $id\n\t\t\t\t])->delete();\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('admin_admin_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['loginname']);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tAdmins::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$ipaddress = [];\n\t\t\t$ipaddress[-1] = lng('admin.allips');\n\t\t\t$ipsandports_stmt = Database::query(\"\n\t\t\t\tSELECT `id`, `ip` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` GROUP BY `ip` ORDER BY `ip` ASC\n\t\t\t\");\n\t\t\twhile ($row = $ipsandports_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$ipaddress[$row['id']] = $row['ip'];\n\t\t\t}\n\n\t\t\t$admin_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/admin/formfield.admin_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'admins']),\n\t\t\t\t'formdata' => $admin_add_data['admin_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Admins::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['loginname'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tAdmins::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$dec_places = Settings::Get('panel.decimal_places');\n\t\t\t\t$result['traffic'] = round($result['traffic'] / (1024 * 1024), $dec_places);\n\t\t\t\t$result['diskspace'] = round($result['diskspace'] / 1024, $dec_places);\n\t\t\t\t$result['email'] = $idna_convert->decode($result['email']);\n\n\t\t\t\t$ipaddress = [];\n\t\t\t\t$ipaddress[-1] = lng('admin.allips');\n\t\t\t\t$ipsandports_stmt = Database::query(\"\n\t\t\t\t\tSELECT `id`, `ip` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` GROUP BY `ip` ORDER BY `ip` ASC\n\t\t\t\t\");\n\t\t\t\twhile ($row = $ipsandports_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$ipaddress[$row['id']] = $row['ip'];\n\t\t\t\t}\n\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$admin_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/admin/formfield.admin_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'admins', 'id' => $id]),\n\t\t\t\t\t'formdata' => $admin_edit_data['admin_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Config\\ConfigParser;\nuse Froxlor\\FileDir;\nuse Froxlor\\Froxlor;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\nif ($userinfo['change_serversettings'] == '1') {\n\tif ($action == 'setconfigured') {\n\t\tSettings::Set('panel.is_configured', '1', true);\n\t\tResponse::redirectTo('admin_configfiles.php');\n\t}\n\n\t// get distro from URL param\n\t$distribution = Request::get('distribution');\n\t$reselect = Request::get('reselect', 0);\n\n\t// check for possible setting\n\tif (empty($distribution)) {\n\t\t$distribution = Settings::Get('system.distribution') ?? \"\";\n\t}\n\tif ($reselect == 1) {\n\t\t$distribution = '';\n\t}\n\n\t$distributions_select = [];\n\n\t$services = [];\n\t$config_dir = FileDir::makeCorrectDir(Froxlor::getInstallDir() . '/lib/configfiles/');\n\n\tif (!empty($distribution)) {\n\t\tif (!file_exists($config_dir . '/' . $distribution . \".xml\")) {\n\t\t\tResponse::dynamicError(\"Unknown distribution\");\n\t\t}\n\n\t\t// update setting if different\n\t\tif ($distribution != Settings::Get('system.distribution')) {\n\t\t\tSettings::Set('system.distribution', $distribution);\n\t\t}\n\n\t\t// create configparser object\n\t\t$configfiles = new ConfigParser($config_dir . '/' . $distribution . \".xml\");\n\n\t\t// get distro-info\n\t\t$dist_display = $configfiles->getCompleteDistroName();\n\n\t\t// get all the services from the distro\n\t\t$services = $configfiles->getServices();\n\t} else {\n\t\t// show list of available distro's\n\t\t$distros = glob($config_dir . '*.xml');\n\t\t// read in all the distros\n\t\tforeach ($distros as $_distribution) {\n\t\t\t// get configparser object\n\t\t\t$dist = new ConfigParser($_distribution);\n\t\t\t// store in tmp array\n\t\t\t$distributions_select[str_replace(\".xml\", \"\", strtolower(basename($_distribution)))] = $dist->getCompleteDistroName();\n\t\t}\n\n\t\t// sort by distribution name\n\t\tasort($distributions_select);\n\t}\n\n\tif ($distribution != \"\" && isset($_POST['finish'])) {\n\t\tunset($_POST['finish']);\n\t\t$params = $_POST;\n\t\t$params['distro'] = $distribution;\n\t\t$params['system'] = [];\n\t\tforeach ($_POST['system'] as $sysdaemon) {\n\t\t\t$params['system'][] = $sysdaemon;\n\t\t}\n\t\t$params_content = json_encode($params);\n\t\t$params_filename = FileDir::makeCorrectFile(Froxlor::getInstallDir() . 'install/' . Froxlor::genSessionId() . '.json');\n\t\tfile_put_contents($params_filename, $params_content);\n\n\t\tUI::twigBuffer('settings/configuration-final.html.twig', [\n\t\t\t'distribution' => $distribution,\n\t\t\t// alert\n\t\t\t'type' => 'info',\n\t\t\t'alert_msg' => lng('admin.configfiles.finishnote'),\n\t\t\t'basedir' => Froxlor::getInstallDir(),\n\t\t\t'params_filename' => $params_filename\n\t\t]);\n\t} else {\n\t\tif (!empty($distribution)) {\n\t\t\t// show available services to configure\n\t\t\t$fields = $services;\n\t\t\t$link_params = ['section' => 'configfiles', 'distribution' => $distribution];\n\t\t\tUI::twigBuffer('settings/configuration.html.twig', [\n\t\t\t\t'action' => $linker->getLink($link_params),\n\t\t\t\t'fields' => $fields,\n\t\t\t\t'distribution' => $distribution\n\t\t\t]);\n\t\t} else {\n\t\t\t// @fixme check set distribution from settings\n\n\t\t\t$cfg_formfield = [\n\t\t\t\t'config' => [\n\t\t\t\t\t'title' => lng('admin.configfiles.serverconfiguration'),\n\t\t\t\t\t'image' => 'fa-solid fa-wrench',\n\t\t\t\t\t'description' => lng('admin.configfiles.description'),\n\t\t\t\t\t'sections' => [\n\t\t\t\t\t\t'section_config' => [\n\t\t\t\t\t\t\t'fields' => [\n\t\t\t\t\t\t\t\t'distribution' => [\n\t\t\t\t\t\t\t\t\t'type' => 'select',\n\t\t\t\t\t\t\t\t\t'select_var' => $distributions_select,\n\t\t\t\t\t\t\t\t\t'label' => lng('admin.configfiles.distribution'),\n\t\t\t\t\t\t\t\t\t'selected' => Settings::Get('system.distribution') ?? ''\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t'buttons' => [\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'class' => 'btn-outline-secondary',\n\t\t\t\t\t\t\t'label' => lng('panel.cancel'),\n\t\t\t\t\t\t\t'type' => 'reset'\n\t\t\t\t\t\t],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'label' => lng('update.proceed')\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\n\n\t\t\tUI::twigBuffer('user/form-note.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'configfiles']),\n\t\t\t\t'formdata' => $cfg_formfield['config'],\n\t\t\t\t'actions_links' => (int)Settings::Get('panel.is_configured') == 0 ? [\n\t\t\t\t\t[\n\t\t\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t\t\t'section' => 'configfiles',\n\t\t\t\t\t\t\t'page' => 'overview',\n\t\t\t\t\t\t\t'action' => 'setconfigured'\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t'label' => lng('panel.ihave_configured'),\n\t\t\t\t\t\t'class' => 'btn-outline-warning',\n\t\t\t\t\t\t'icon' => 'fa-solid fa-circle-check'\n\t\t\t\t\t]\n\t\t\t\t] : [],\n\t\t\t\t// alert\n\t\t\t\t'type' => 'warning',\n\t\t\t\t'alert_msg' => lng('panel.settings_before_configuration') . ((int)Settings::Get('panel.is_configured') == 1 ? '<br><br>' . lng('panel.system_is_configured') : '')\n\t\t\t]);\n\t\t}\n\t}\n\n\tUI::twigOutputBuffer();\n} else {\n\tResponse::redirectTo('admin_index.php');\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Cronjobs;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::get('id');\n\nif ($page == 'cronjobs' || $page == 'overview') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, 'viewed admin_cronjobs');\n\n\t\ttry {\n\t\t\t$cron_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.cronjobs.php';\n\t\t\t$collection = (new Collection(Cronjobs::class, $userinfo))\n\t\t\t\t->withPagination($cron_list_data['cron_list']['columns'], $cron_list_data['cron_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table-note.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $cron_list_data, 'cron_list'),\n\t\t\t// alert-box\n\t\t\t'type' => 'warning',\n\t\t\t'alert_msg' => lng('cron.changewarning')\n\t\t]);\n\t} elseif ($action == 'new') {\n\t\t/*\n\t\t * @TODO later\n\t\t */\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Cronjobs::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\t\tif ($result['cronfile'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tCronjobs::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$cronjobs_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/cronjobs/formfield.cronjobs_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'cronjobs', 'id' => $id]),\n\t\t\t\t\t'formdata' => $cronjobs_edit_data['cronjobs_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\t/*\n\t\t * @TODO later\n\t\t */\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Admins;\nuse Froxlor\\Api\\Commands\\Customers;\nuse Froxlor\\Api\\Commands\\MysqlServer;\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Froxlor;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::get('id');\n\nif (($page == 'customers' || $page == 'overview') && $userinfo['customers'] != '0') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_customers\");\n\n\t\ttry {\n\t\t\t$customer_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.customers.php';\n\t\t\t$collection = (new Collection(Customers::class, $userinfo, ['show_usages' => true]))\n\t\t\t\t->withPagination($customer_list_data['customer_list']['columns'], $customer_list_data['customer_list']['default_sorting']);\n\t\t\tif ($userinfo['change_serversettings']) {\n\t\t\t\t$collection->has('admin', Admins::class, 'adminid', 'adminid');\n\t\t\t}\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\t$actions_links = false;\n\t\tif (CurrentUser::canAddResource('customers')) {\n\t\t\t$actions_links = [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'customers', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.customer_add')\n\t\t\t\t]\n\t\t\t];\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $customer_list_data, 'customer_list'),\n\t\t\t'actions_links' => $actions_links\n\t\t]);\n\t} elseif ($action == 'su' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\t$destination_user = $result['loginname'];\n\n\t\tif ($destination_user != '') {\n\t\t\tif ($result['deactivated'] == '1') {\n\t\t\t\tResponse::standardError(\"usercurrentlydeactivated\", $destination_user);\n\t\t\t}\n\n\t\t\t$result['switched_user'] = CurrentUser::getData();\n\t\t\t$result['adminsession'] = 0;\n\t\t\t$result['userid'] = $result['customerid'];\n\t\t\tCurrentUser::setData($result);\n\n\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"switched user and is now '\" . $destination_user . \"'\");\n\n\t\t\t$target = (isset($_GET['target']) ? $_GET['target'] : 'index');\n\t\t\t$redirect = \"customer_\" . $target . \".php\";\n\t\t\tif (!file_exists(Froxlor::getInstallDir() . \"/\" . $redirect)) {\n\t\t\t\t$redirect = \"customer_index.php\";\n\t\t\t}\n\t\t\tResponse::redirectTo($redirect, null, true);\n\t\t} else {\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t'action' => 'login'\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'unlock' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t\t'id' => $id\n\t\t\t\t])->unlock();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\tHTML::askYesNo('customer_reallyunlock', $filename, [\n\t\t\t\t'id' => $id,\n\t\t\t\t'page' => $page,\n\t\t\t\t'action' => $action\n\t\t\t], $result['loginname']);\n\t\t}\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'delete_userfiles' => (isset($_POST['delete_userfiles']) ? (int)$_POST['delete_userfiles'] : 0)\n\t\t\t\t])->delete();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\tHTML::askYesNoWithCheckbox('admin_customer_reallydelete', 'admin_customer_alsoremovefiles', $filename, [\n\t\t\t\t'id' => $id,\n\t\t\t\t'page' => $page,\n\t\t\t\t'action' => $action\n\t\t\t], $result['loginname']);\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tCustomers::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$mysql_servers = [];\n\t\t\ttry {\n\t\t\t\t$result_json = MysqlServer::getLocal($userinfo)->listing();\n\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\tforeach ($result_decoded as $dbserver => $dbdata) {\n\t\t\t\t\t$mysql_servers[] = [\n\t\t\t\t\t\t'label' => $dbdata['caption'],\n\t\t\t\t\t\t'value' => $dbserver\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t} catch (Exception $e) {\n\t\t\t\t/* just none */\n\t\t\t}\n\n\t\t\t$phpconfigs = [];\n\t\t\t$configs = Database::query(\"\n\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\");\n\t\t\twhile ($row = $configs->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t'label' => $row['description'] . \" [\" . $row['interpreter'] . \"]\",\n\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t'label' => $row['description'],\n\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// hosting plans\n\t\t\t$hosting_plans = [];\n\t\t\t$plans = Database::query(\"\n\t\t\t\tSELECT *\n\t\t\t\tFROM `\" . TABLE_PANEL_PLANS . \"`\n\t\t\t\tORDER BY name ASC\n\t\t\t\");\n\t\t\t$hosting_plans = [\n\t\t\t\t0 => \"---\"\n\t\t\t];\n\t\t\twhile ($row = $plans->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$hosting_plans[$row['id']] = $row['name'];\n\t\t\t}\n\n\t\t\t$customer_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/customer/formfield.customer_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'customers']),\n\t\t\t\t'formdata' => $customer_add_data['customer_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['loginname'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tCustomers::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$dec_places = Settings::Get('panel.decimal_places');\n\t\t\t\t$result['traffic'] = round($result['traffic'] / (1024 * 1024), $dec_places);\n\t\t\t\t$result['diskspace'] = round($result['diskspace'] / 1024, $dec_places);\n\t\t\t\t$result['email'] = $idna_convert->decode($result['email']);\n\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$mysql_servers = [];\n\t\t\t\ttry {\n\t\t\t\t\t$result_json = MysqlServer::getLocal($userinfo)->listing();\n\t\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\t\tforeach ($result_decoded as $dbserver => $dbdata) {\n\t\t\t\t\t\t$mysql_servers[] = [\n\t\t\t\t\t\t\t'label' => $dbdata['caption'],\n\t\t\t\t\t\t\t'value' => $dbserver\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t/* just none */\n\t\t\t\t}\n\n\t\t\t\t$phpconfigs = [];\n\t\t\t\t$configs = Database::query(\"\n\t\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\t\");\n\t\t\t\twhile ($row = $configs->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t\t'label' => $row['description'] . \" [\" . $row['interpreter'] . \"]\",\n\t\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t\t];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t\t'label' => $row['description'],\n\t\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// hosting plans\n\t\t\t\t$plans = Database::query(\"\n\t\t\t\t\tSELECT *\n\t\t\t\t\tFROM `\" . TABLE_PANEL_PLANS . \"`\n\t\t\t\t\tORDER BY name ASC\n\t\t\t\t\");\n\t\t\t\t$hosting_plans = [\n\t\t\t\t\t0 => \"---\"\n\t\t\t\t];\n\t\t\t\twhile ($row = $plans->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$hosting_plans[$row['id']] = $row['name'];\n\t\t\t\t}\n\n\t\t\t\t$available_admins_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\tWHERE (`customers` = '-1' OR `customers` > `customers_used`)\n\t\t\t\t\tAND adminid <> :currentadmin\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($available_admins_stmt, ['currentadmin' => $result['adminid']]);\n\t\t\t\t$admin_select = [\n\t\t\t\t\t0 => \"---\"\n\t\t\t\t];\n\t\t\t\twhile ($available_admin = $available_admins_stmt->fetch()) {\n\t\t\t\t\t$admin_select[$available_admin['adminid']] = $available_admin['name'] . \" (\" . $available_admin['loginname'] . \")\";\n\t\t\t\t}\n\n\t\t\t\t$customer_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/customer/formfield.customer_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'customers', 'id' => $id]),\n\t\t\t\t\t'formdata' => $customer_edit_data['customer_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Customers as Customers;\nuse Froxlor\\Api\\Commands\\Domains as Domains;\nuse Froxlor\\Bulk\\DomainBulkAction;\nuse Froxlor\\Cron\\TaskId;\nuse Froxlor\\Customer\\Customer;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Domain\\Domain;\nuse Froxlor\\FileDir;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Cronjob;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\User;\nuse Froxlor\\Validate\\Validate;\nuse Froxlor\\CurrentUser;\n\n$id = (int)Request::get('id');\n\nif ($page == 'domains' || $page == 'overview') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_domains\");\n\n\t\ttry {\n\t\t\t$customerCollection = (new Collection(Customers::class, $userinfo));\n\t\t\t$domain_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.domains.php';\n\t\t\t$collection = (new Collection(Domains::class, $userinfo))\n\t\t\t\t->has('customer', Customers::class, 'customerid', 'customerid')\n\t\t\t\t->withPagination($domain_list_data['domain_list']['columns'], $domain_list_data['domain_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\t$actions_links = false;\n\t\tif (CurrentUser::canAddResource('domains')) {\n\t\t\t$actions_links = [];\n\t\t\t$actions_links[] = [\n\t\t\t\t'href' => $linker->getLink(['section' => 'domains', 'page' => $page, 'action' => 'add']),\n\t\t\t\t'label' => lng('admin.domain_add')\n\t\t\t];\n\t\t\t$actions_links[] = [\n\t\t\t\t'href' => $linker->getLink(['section' => 'domains', 'page' => $page, 'action' => 'import']),\n\t\t\t\t'label' => lng('domains.domain_import'),\n\t\t\t\t'icon' => 'fa-solid fa-file-import',\n\t\t\t\t'class' => 'btn-outline-secondary'\n\t\t\t];\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $domain_list_data, 'domain_list'),\n\t\t\t'actions_links' => $actions_links\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Domains::getLocal($userinfo, [\n\t\t\t\t'id' => $id,\n\t\t\t\t'no_std_subdomain' => true\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\t$alias_check_stmt = Database::prepare(\"\n\t\t\tSELECT COUNT(`id`) AS `count` FROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\tWHERE `aliasdomain`= :id\");\n\t\t$alias_check = Database::pexecute_first($alias_check_stmt, [\n\t\t\t'id' => $id\n\t\t]);\n\n\t\tif ($result['domain'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send' && $alias_check['count'] == 0) {\n\t\t\t\ttry {\n\t\t\t\t\tDomains::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} elseif ($alias_check['count'] > 0) {\n\t\t\t\tResponse::standardError('domains_cantdeletedomainwithaliases');\n\t\t\t} else {\n\t\t\t\t$showcheck = false;\n\t\t\t\tif (Domain::domainHasMainSubDomains($id)) {\n\t\t\t\t\t$showcheck = true;\n\t\t\t\t}\n\t\t\t\tHTML::askYesNoWithCheckbox('admin_domain_reallydelete', 'remove_subbutmain_domains', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $idna_convert->decode($result['domain']), $showcheck);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tDomains::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$customers = [\n\t\t\t\t0 => lng('panel.please_choose')\n\t\t\t];\n\t\t\t$result_customers_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT `customerid`, `loginname`, `name`, `firstname`, `company`\n\t\t\t\t\tFROM `\" . TABLE_PANEL_CUSTOMERS . \"` \" . ($userinfo['customers_see_all'] ? '' : \" WHERE `adminid` = :adminid \") . \" ORDER BY COALESCE(NULLIF(`name`,''), `company`) ASC\");\n\t\t\t$params = [];\n\t\t\tif ($userinfo['customers_see_all'] == '0') {\n\t\t\t\t$params['adminid'] = $userinfo['adminid'];\n\t\t\t}\n\t\t\tDatabase::pexecute($result_customers_stmt, $params);\n\n\t\t\twhile ($row_customer = $result_customers_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$customers[$row_customer['customerid']] = User::getCorrectFullUserDetails($row_customer) . ' (' . $row_customer['loginname'] . ')';\n\t\t\t}\n\n\t\t\t$admins = [];\n\t\t\tif ($userinfo['customers_see_all'] == '1') {\n\t\t\t\t$result_admins_stmt = Database::query(\"\n\t\t\t\t\t\tSELECT `adminid`, `loginname`, `name`\n\t\t\t\t\t\tFROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\t\tWHERE `domains_used` < `domains` OR `domains` = '-1' ORDER BY `name` ASC\");\n\n\t\t\t\twhile ($row_admin = $result_admins_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$admins[$row_admin['adminid']] = User::getCorrectFullUserDetails($row_admin) . ' (' . $row_admin['loginname'] . ')';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($userinfo['ip'] == \"-1\") {\n\t\t\t\t$result_ipsandports_stmt = Database::query(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `ssl`='0' ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t\t$result_ssl_ipsandports_stmt = Database::query(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `ssl`='1' ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t} else {\n\t\t\t\t$admin_ip_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `id` = :ipid ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t\t$admin_ip = Database::pexecute_first($admin_ip_stmt, [\n\t\t\t\t\t'ipid' => $userinfo['ip']\n\t\t\t\t]);\n\n\t\t\t\t$result_ipsandports_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `ssl`='0' AND `ip` = :ipid ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($result_ipsandports_stmt, [\n\t\t\t\t\t'ipid' => $admin_ip['ip']\n\t\t\t\t]);\n\n\t\t\t\t$result_ssl_ipsandports_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `ssl`='1' AND `ip` = :ipid ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($result_ssl_ipsandports_stmt, [\n\t\t\t\t\t'ipid' => $admin_ip['ip']\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\t// Build array holding all IPs and Ports available to this admin\n\t\t\t$ipsandports = [];\n\t\t\twhile ($row_ipandport = $result_ipsandports_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\tif (filter_var($row_ipandport['ip'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n\t\t\t\t\t$row_ipandport['ip'] = '[' . $row_ipandport['ip'] . ']';\n\t\t\t\t}\n\n\t\t\t\t$ipsandports[] = [\n\t\t\t\t\t'label' => $row_ipandport['ip'] . ':' . $row_ipandport['port'],\n\t\t\t\t\t'value' => $row_ipandport['id']\n\t\t\t\t];\n\t\t\t}\n\n\t\t\t$ssl_ipsandports = [];\n\t\t\twhile ($row_ssl_ipandport = $result_ssl_ipsandports_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\tif (filter_var($row_ssl_ipandport['ip'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n\t\t\t\t\t$row_ssl_ipandport['ip'] = '[' . $row_ssl_ipandport['ip'] . ']';\n\t\t\t\t}\n\n\t\t\t\t$ssl_ipsandports[] = [\n\t\t\t\t\t'label' => $row_ssl_ipandport['ip'] . ':' . $row_ssl_ipandport['port'],\n\t\t\t\t\t'value' => $row_ssl_ipandport['id']\n\t\t\t\t];\n\t\t\t}\n\n\t\t\t$standardsubdomains = [];\n\t\t\t$result_standardsubdomains_stmt = Database::query(\"\n\t\t\t\t\tSELECT `id` FROM `\" . TABLE_PANEL_DOMAINS . \"` `d`, `\" . TABLE_PANEL_CUSTOMERS . \"` `c` WHERE `d`.`id` = `c`.`standardsubdomain`\n\t\t\t\t\");\n\n\t\t\twhile ($row_standardsubdomain = $result_standardsubdomains_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$standardsubdomains[$row_standardsubdomain['id']] = $row_standardsubdomain['id'];\n\t\t\t}\n\n\t\t\tif (count($standardsubdomains) > 0) {\n\t\t\t\t$standardsubdomains = \" AND `d`.`id` NOT IN (\" . join(',', $standardsubdomains) . \") \";\n\t\t\t} else {\n\t\t\t\t$standardsubdomains = '';\n\t\t\t}\n\n\t\t\t$domains = [\n\t\t\t\t0 => lng('domains.noaliasdomain')\n\t\t\t];\n\t\t\t$result_domains_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT `d`.`id`, `d`.`domain`, `c`.`loginname` FROM `\" . TABLE_PANEL_DOMAINS . \"` `d`, `\" . TABLE_PANEL_CUSTOMERS . \"` `c`\n\t\t\t\t\tWHERE `d`.`aliasdomain` IS NULL AND `d`.`parentdomainid` = 0\" . $standardsubdomains . ($userinfo['customers_see_all'] ? '' : \" AND `d`.`adminid` = :adminid\") . \"\n\t\t\t\t\tAND `d`.`customerid`=`c`.`customerid` ORDER BY `loginname`, `domain` ASC\n\t\t\t\t\");\n\t\t\t$params = [];\n\t\t\tif ($userinfo['customers_see_all'] == '0') {\n\t\t\t\t$params['adminid'] = $userinfo['adminid'];\n\t\t\t}\n\t\t\tDatabase::pexecute($result_domains_stmt, $params);\n\n\t\t\twhile ($row_domain = $result_domains_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$domains[$row_domain['id']] = $idna_convert->decode($row_domain['domain']) . ' (' . $row_domain['loginname'] . ')';\n\t\t\t}\n\n\t\t\t$subtodomains = [\n\t\t\t\t0 => lng('domains.nosubtomaindomain')\n\t\t\t];\n\t\t\t$result_domains_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT `d`.`id`, `d`.`domain`, `c`.`loginname` FROM `\" . TABLE_PANEL_DOMAINS . \"` `d`, `\" . TABLE_PANEL_CUSTOMERS . \"` `c`\n\t\t\t\t\tWHERE `d`.`aliasdomain` IS NULL AND `d`.`parentdomainid` = 0 AND `d`.`ismainbutsubto` = 0 \" . $standardsubdomains . ($userinfo['customers_see_all'] ? '' : \" AND `d`.`adminid` = :adminid\") . \"\n\t\t\t\t\tAND `d`.`customerid`=`c`.`customerid` ORDER BY `loginname`, `domain` ASC\n\t\t\t\t\");\n\t\t\t// params from above still valid\n\t\t\tDatabase::pexecute($result_domains_stmt, $params);\n\n\t\t\twhile ($row_domain = $result_domains_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$subtodomains[$row_domain['id']] = $idna_convert->decode($row_domain['domain']) . ' (' . $row_domain['loginname'] . ')';\n\t\t\t}\n\n\t\t\t$phpconfigs = [];\n\t\t\t$configs = Database::query(\"\n\t\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\t\");\n\n\t\t\twhile ($row = $configs->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t$phpconfigs[$row['id']] = $row['description'] . \" [\" . $row['interpreter'] . \"]\";\n\t\t\t\t} else {\n\t\t\t\t\t$phpconfigs[$row['id']] = $row['description'];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// create serveralias options\n\t\t\t$serveraliasoptions = [\n\t\t\t\t0 => lng('domains.serveraliasoption_wildcard'),\n\t\t\t\t1 => lng('domains.serveraliasoption_www'),\n\t\t\t\t2 => lng('domains.serveraliasoption_none')\n\t\t\t];\n\n\t\t\t$subcanemaildomain = [\n\t\t\t\t0 => lng('admin.subcanemaildomain.never'),\n\t\t\t\t1 => lng('admin.subcanemaildomain.choosableno'),\n\t\t\t\t2 => lng('admin.subcanemaildomain.choosableyes'),\n\t\t\t\t3 => lng('admin.subcanemaildomain.always')\n\t\t\t];\n\n\t\t\t$domain_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/domains/formfield.domains_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'domains']),\n\t\t\t\t'formdata' => $domain_add_data['domain_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Domains::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['domain'] != '') {\n\t\t\t$subdomains_stmt = Database::prepare(\"\n\t\t\t\tSELECT COUNT(`id`) AS count FROM `\" . TABLE_PANEL_DOMAINS . \"` WHERE\n\t\t\t\t`parentdomainid` = :resultid\n\t\t\t\");\n\t\t\t$subdomains = Database::pexecute_first($subdomains_stmt, [\n\t\t\t\t'resultid' => $result['id']\n\t\t\t]);\n\t\t\t$subdomains = $subdomains['count'];\n\n\t\t\t$alias_check_stmt = Database::prepare(\"\n\t\t\t\tSELECT COUNT(`id`) AS count FROM `\" . TABLE_PANEL_DOMAINS . \"` WHERE\n\t\t\t\t`aliasdomain` = :resultid\n\t\t\t\");\n\t\t\t$alias_check = Database::pexecute_first($alias_check_stmt, [\n\t\t\t\t'resultid' => $result['id']\n\t\t\t]);\n\t\t\t$alias_check = $alias_check['count'];\n\n\t\t\t$domain_emails_result_stmt = Database::prepare(\"\n\t\t\t\tSELECT `email`, `email_full`, `destination`, `popaccountid` AS `number_email_forwarders`\n\t\t\t\tFROM `\" . TABLE_MAIL_VIRTUAL . \"` WHERE `customerid` = :customerid AND `domainid` = :id\n\t\t\t\");\n\t\t\tDatabase::pexecute($domain_emails_result_stmt, [\n\t\t\t\t'customerid' => $result['customerid'],\n\t\t\t\t'id' => $result['id']\n\t\t\t]);\n\n\t\t\t$emails = Database::num_rows();\n\t\t\t$email_forwarders = 0;\n\t\t\t$email_accounts = 0;\n\n\t\t\twhile ($domain_emails_row = $domain_emails_result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\tif ($domain_emails_row['destination'] != '') {\n\t\t\t\t\t$domain_emails_row['destination'] = explode(' ', FileDir::makeCorrectDestination($domain_emails_row['destination']));\n\t\t\t\t\t$email_forwarders += count($domain_emails_row['destination']);\n\n\t\t\t\t\tif (in_array($domain_emails_row['email_full'], $domain_emails_row['destination'])) {\n\t\t\t\t\t\t$email_forwarders -= 1;\n\t\t\t\t\t\t$email_accounts++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$ipsresult_stmt = Database::prepare(\"\n\t\t\t\tSELECT `id_ipandports` FROM `\" . TABLE_DOMAINTOIP . \"` WHERE `id_domain` = :id\n\t\t\t\");\n\t\t\tDatabase::pexecute($ipsresult_stmt, [\n\t\t\t\t'id' => $result['id']\n\t\t\t]);\n\n\t\t\t$usedips = [];\n\t\t\twhile ($ipsresultrow = $ipsresult_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$usedips[] = $ipsresultrow['id_ipandports'];\n\t\t\t}\n\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\t// remove ssl ip/ports if set is empty\n\t\t\t\t\tif (!isset($_POST['ssl_ipandport']) || empty($_POST['ssl_ipandport'])) {\n\t\t\t\t\t\t$_POST['remove_ssl_ipandport'] = true;\n\t\t\t\t\t}\n\t\t\t\t\tDomains::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tif (Settings::Get('panel.allow_domain_change_customer') == '1') {\n\t\t\t\t\t$customers = [];\n\t\t\t\t\t$result_customers_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `customerid`, `loginname`, `name`, `firstname`, `company` FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\t\t\tWHERE ( (`subdomains_used` + :subdomains <= `subdomains` OR `subdomains` = '-1' )\n\t\t\t\t\t\tAND (`emails_used` + :emails <= `emails` OR `emails` = '-1' )\n\t\t\t\t\t\tAND (`email_forwarders_used` + :forwarders <= `email_forwarders` OR `email_forwarders` = '-1' )\n\t\t\t\t\t\tAND (`email_accounts_used` + :accounts <= `email_accounts` OR `email_accounts` = '-1' ) \" . ($userinfo['customers_see_all'] ? '' : \" AND `adminid` = :adminid \") . \")\n\t\t\t\t\t\tOR `customerid` = :customerid ORDER BY `name` ASC\n\t\t\t\t\t\");\n\t\t\t\t\t$params = [\n\t\t\t\t\t\t'subdomains' => $subdomains,\n\t\t\t\t\t\t'emails' => $emails,\n\t\t\t\t\t\t'forwarders' => $email_forwarders,\n\t\t\t\t\t\t'accounts' => $email_accounts,\n\t\t\t\t\t\t'customerid' => $result['customerid']\n\t\t\t\t\t];\n\t\t\t\t\tif ($userinfo['customers_see_all'] == '0') {\n\t\t\t\t\t\t$params['adminid'] = $userinfo['adminid'];\n\t\t\t\t\t}\n\t\t\t\t\tDatabase::pexecute($result_customers_stmt, $params);\n\n\t\t\t\t\twhile ($row_customer = $result_customers_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t\t$customers[$row_customer['customerid']] = User::getCorrectFullUserDetails($row_customer) . ' (' . $row_customer['loginname'] . ')';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$customer_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `customerid`, `loginname`, `name`, `firstname`, `company` FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\t\t\tWHERE `customerid` = :customerid\n\t\t\t\t\t\");\n\t\t\t\t\t$customer = Database::pexecute_first($customer_stmt, [\n\t\t\t\t\t\t'customerid' => $result['customerid']\n\t\t\t\t\t]);\n\t\t\t\t\t$result['customername'] = User::getCorrectFullUserDetails($customer);\n\t\t\t\t}\n\n\t\t\t\tif ($userinfo['customers_see_all'] == '1') {\n\t\t\t\t\tif (Settings::Get('panel.allow_domain_change_admin') == '1') {\n\t\t\t\t\t\t$admins = [];\n\t\t\t\t\t\t$result_admins_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tSELECT `adminid`, `loginname`, `name` FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\t\t\tWHERE (`domains_used` < `domains` OR `domains` = '-1') OR `adminid` = :adminid ORDER BY `name` ASC\n\t\t\t\t\t\t\");\n\t\t\t\t\t\tDatabase::pexecute($result_admins_stmt, [\n\t\t\t\t\t\t\t'adminid' => $result['adminid']\n\t\t\t\t\t\t]);\n\n\t\t\t\t\t\twhile ($row_admin = $result_admins_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t\t\t$admins[$row_admin['adminid']] = User::getCorrectFullUserDetails($row_admin) . ' (' . $row_admin['loginname'] . ')';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$admin_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tSELECT `adminid`, `loginname`, `name` FROM `\" . TABLE_PANEL_ADMINS . \"` WHERE `adminid` = :adminid\n\t\t\t\t\t\t\");\n\t\t\t\t\t\t$admin = Database::pexecute_first($admin_stmt, [\n\t\t\t\t\t\t\t'adminid' => $result['adminid']\n\t\t\t\t\t\t]);\n\t\t\t\t\t\t$result['adminname'] = User::getCorrectFullUserDetails($admin) . ' (' . $admin['loginname'] . ')';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$domains = [\n\t\t\t\t\t0 => lng('domains.noaliasdomain')\n\t\t\t\t];\n\n\t\t\t\t$result_domains_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT `d`.`id`, `d`.`domain`  FROM `\" . TABLE_PANEL_DOMAINS . \"` `d`, `\" . TABLE_PANEL_CUSTOMERS . \"` `c`\n\t\t\t\t\tWHERE `d`.`aliasdomain` IS NULL AND `d`.`parentdomainid` = '0' AND `d`.`id` <> :id\n\t\t\t\t\tAND `c`.`standardsubdomain`<>`d`.`id` AND `d`.`customerid` = :customerid AND `c`.`customerid`=`d`.`customerid`\n\t\t\t\t\tORDER BY `d`.`domain` ASC\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($result_domains_stmt, [\n\t\t\t\t\t'id' => $result['id'],\n\t\t\t\t\t'customerid' => $result['customerid']\n\t\t\t\t]);\n\n\t\t\t\twhile ($row_domain = $result_domains_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$domains[$row_domain['id']] = $idna_convert->decode($row_domain['domain']);\n\t\t\t\t}\n\n\t\t\t\t$subtodomains = [\n\t\t\t\t\t0 => lng('domains.nosubtomaindomain')\n\t\t\t\t];\n\t\t\t\t$result_domains_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT `d`.`id`, `d`.`domain` FROM `\" . TABLE_PANEL_DOMAINS . \"` `d`, `\" . TABLE_PANEL_CUSTOMERS . \"` `c`\n\t\t\t\t\tWHERE `d`.`aliasdomain` IS NULL AND `d`.`parentdomainid` = '0' AND `d`.`id` <> :id\n\t\t\t\t\tAND `c`.`standardsubdomain`<>`d`.`id` AND `c`.`customerid`=`d`.`customerid`\" . ($userinfo['customers_see_all'] ? '' : \" AND `d`.`adminid` = :adminid\") . \"\n\t\t\t\t\tORDER BY `d`.`domain` ASC\n\t\t\t\t\");\n\t\t\t\t$params = [\n\t\t\t\t\t'id' => $result['id']\n\t\t\t\t];\n\t\t\t\tif ($userinfo['customers_see_all'] == '0') {\n\t\t\t\t\t$params['adminid'] = $userinfo['adminid'];\n\t\t\t\t}\n\t\t\t\tDatabase::pexecute($result_domains_stmt, $params);\n\n\t\t\t\twhile ($row_domain = $result_domains_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$subtodomains[$row_domain['id']] = $idna_convert->decode($row_domain['domain']);\n\t\t\t\t}\n\n\t\t\t\tif ($userinfo['ip'] == \"-1\") {\n\t\t\t\t\t$result_ipsandports_stmt = Database::query(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `ssl`='0' ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t\t\t$result_ssl_ipsandports_stmt = Database::query(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `ssl`='1' ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t\t} else {\n\t\t\t\t\t$admin_ip_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `id` = :ipid ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t\t\t$admin_ip = Database::pexecute_first($admin_ip_stmt, [\n\t\t\t\t\t\t'ipid' => $userinfo['ip']\n\t\t\t\t\t]);\n\n\t\t\t\t\t$result_ipsandports_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `ssl`='0' AND `ip` = :ipid ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t\t\tDatabase::pexecute($result_ipsandports_stmt, [\n\t\t\t\t\t\t'ipid' => $admin_ip['ip']\n\t\t\t\t\t]);\n\n\t\t\t\t\t$result_ssl_ipsandports_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `ssl`='1' AND `ip` = :ipid ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t\t\tDatabase::pexecute($result_ssl_ipsandports_stmt, [\n\t\t\t\t\t\t'ipid' => $admin_ip['ip']\n\t\t\t\t\t]);\n\t\t\t\t}\n\n\t\t\t\t$ipsandports = [];\n\t\t\t\twhile ($row_ipandport = $result_ipsandports_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\tif (filter_var($row_ipandport['ip'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n\t\t\t\t\t\t$row_ipandport['ip'] = '[' . $row_ipandport['ip'] . ']';\n\t\t\t\t\t}\n\t\t\t\t\t$ipsandports[] = [\n\t\t\t\t\t\t'label' => $row_ipandport['ip'] . ':' . $row_ipandport['port'],\n\t\t\t\t\t\t'value' => $row_ipandport['id']\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\t$ssl_ipsandports = [];\n\t\t\t\twhile ($row_ssl_ipandport = $result_ssl_ipsandports_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\tif (filter_var($row_ssl_ipandport['ip'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n\t\t\t\t\t\t$row_ssl_ipandport['ip'] = '[' . $row_ssl_ipandport['ip'] . ']';\n\t\t\t\t\t}\n\t\t\t\t\t$ssl_ipsandports[] = [\n\t\t\t\t\t\t'label' => $row_ssl_ipandport['ip'] . ':' . $row_ssl_ipandport['port'],\n\t\t\t\t\t\t'value' => $row_ssl_ipandport['id']\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\t// check that letsencrypt is not activated for wildcard domain\n\t\t\t\tif ($result['iswildcarddomain'] == '1') {\n\t\t\t\t\t$letsencrypt = 0;\n\t\t\t\t}\n\n\t\t\t\t// Fudge the result for ssl_redirect to hide the Let's Encrypt steps\n\t\t\t\t$result['temporary_ssl_redirect'] = $result['ssl_redirect'];\n\t\t\t\t$result['ssl_redirect'] = ($result['ssl_redirect'] == 0 ? 0 : 1);\n\n\t\t\t\t$serveraliasoptions = [\n\t\t\t\t\t0 => lng('domains.serveraliasoption_wildcard'),\n\t\t\t\t\t1 => lng('domains.serveraliasoption_www'),\n\t\t\t\t\t2 => lng('domains.serveraliasoption_none')\n\t\t\t\t];\n\n\t\t\t\t$subcanemaildomain = [\n\t\t\t\t\t0 => lng('admin.subcanemaildomain.never'),\n\t\t\t\t\t1 => lng('admin.subcanemaildomain.choosableno'),\n\t\t\t\t\t2 => lng('admin.subcanemaildomain.choosableyes'),\n\t\t\t\t\t3 => lng('admin.subcanemaildomain.always')\n\t\t\t\t];\n\n\t\t\t\t$phpconfigs = [];\n\t\t\t\t$phpconfigs_result_stmt = Database::query(\"\n\t\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\t\");\n\t\t\t\t$c_allowed_configs = Customer::getCustomerDetail($result['customerid'], 'allowed_phpconfigs');\n\t\t\t\tif (!empty($c_allowed_configs)) {\n\t\t\t\t\t$c_allowed_configs = json_decode($c_allowed_configs, true);\n\t\t\t\t} else {\n\t\t\t\t\t$c_allowed_configs = [];\n\t\t\t\t}\n\n\t\t\t\twhile ($phpconfigs_row = $phpconfigs_result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$disabled = !empty($c_allowed_configs) && !in_array($phpconfigs_row['id'], $c_allowed_configs);\n\t\t\t\t\tif (!$disabled) {\n\t\t\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t\t\t$phpconfigs[$phpconfigs_row['id']] = $phpconfigs_row['description'] . \" [\" . $phpconfigs_row['interpreter'] . \"]\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$phpconfigs[$phpconfigs_row['id']] = $phpconfigs_row['description'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (Settings::Get('panel.allow_domain_change_customer') != '1') {\n\t\t\t\t\t$result['customername'] .= ' (<a href=\"' . $linker->getLink([\n\t\t\t\t\t\t\t'section' => 'customers',\n\t\t\t\t\t\t\t'page' => 'customers',\n\t\t\t\t\t\t\t'action' => 'su',\n\t\t\t\t\t\t\t'id' => $customer['customerid']\n\t\t\t\t\t\t]) . '\" rel=\"external\">' . $customer['loginname'] . '</a>)';\n\t\t\t\t}\n\n\t\t\t\t$domain_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/domains/formfield.domains_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'domains', 'id' => $id]),\n\t\t\t\t\t'formdata' => $domain_edit_data['domain_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'jqGetCustomerPHPConfigs') {\n\t\t$customerid = intval($_POST['customerid']);\n\t\t$allowed_phpconfigs = Customer::getCustomerDetail($customerid, 'allowed_phpconfigs');\n\t\techo !empty($allowed_phpconfigs) ? $allowed_phpconfigs : json_encode([]);\n\t\texit();\n\t} elseif ($action == 'jqSpeciallogfileNote') {\n\t\t$domainid = intval($_POST['id']);\n\t\t$newval = intval($_POST['newval']);\n\t\ttry {\n\t\t\t$json_result = Domains::getLocal($userinfo, [\n\t\t\t\t'id' => $domainid\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\t\tif ($newval != $result['speciallogfile']) {\n\t\t\techo json_encode(['changed' => true, 'info' => lng('admin.speciallogwarning')]);\n\t\t\texit();\n\t\t}\n\t\techo 0;\n\t\texit();\n\t} elseif ($action == 'import') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t$separator = Validate::validate($_POST['separator'], 'separator');\n\t\t\t$offset = (int)Validate::validate($_POST['offset'], 'offset', \"/[0-9]/i\");\n\n\t\t\t$file_name = $_FILES['file']['tmp_name'];\n\n\t\t\t$result = [];\n\n\t\t\ttry {\n\t\t\t\t$bulk = new DomainBulkAction($file_name, $userinfo);\n\t\t\t\t$result = $bulk->doImport($separator, $offset);\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::standardError('domain_import_error', $e->getMessage());\n\t\t\t}\n\n\t\t\tif (!empty($bulk->getErrors())) {\n\t\t\t\tResponse::dynamicError(implode(\"<br>\", $bulk->getErrors()));\n\t\t\t}\n\n\t\t\t// update customer/admin counters\n\t\t\tUser::updateCounters(false);\n\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\tCronjob::inserttask(TaskId::REBUILD_DNS);\n\n\t\t\t$result_str = $result['imported'] . ' / ' . $result['all'] . (!empty($result['note']) ? ' (' . $result['note'] . ')' : '');\n\t\t\tResponse::standardSuccess('domain_import_successfully', $result_str, [\n\t\t\t\t'filename' => $filename,\n\t\t\t\t'action' => '',\n\t\t\t\t'page' => 'domains'\n\t\t\t]);\n\t\t} else {\n\t\t\t$domain_import_data = include_once dirname(__FILE__) . '/lib/formfields/admin/domains/formfield.domains_import.php';\n\n\t\t\tUI::view('user/form-note.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'domains', 'page' => $page]),\n\t\t\t\t'formdata' => $domain_import_data['domain_import'],\n\t\t\t\t// alert-box\n\t\t\t\t'type' => 'info',\n\t\t\t\t'alert_msg' => lng('domains.import_description')\n\t\t\t]);\n\t\t}\n\t}\n} elseif ($page == 'domainssleditor') {\n\trequire_once __DIR__ . '/ssl_editor.php';\n} elseif ($page == 'domaindnseditor' && Settings::Get('system.dnsenabled') == '1') {\n\trequire_once __DIR__ . '/dns_editor.php';\n} elseif ($page == 'sslcertificates') {\n\trequire_once __DIR__ . '/ssl_certificates.php';\n} elseif ($page == 'logfiles') {\n\trequire_once __DIR__ . '/logfiles_viewer.php';\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Admins as Admins;\nuse Froxlor\\Api\\Commands\\Froxlor as Froxlor;\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Cronjob;\nuse Froxlor\\System\\Crypt;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Validate;\nuse Froxlor\\Language;\n\n$id = (int)Request::get('id');\n\nif ($action == 'logout') {\n\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"logged out\");\n\tunset($_SESSION['userinfo']);\n\tCurrentUser::setData();\n\tsession_destroy();\n\n\tResponse::redirectTo('index.php');\n} elseif ($action == 'suback') {\n\tif (is_array(CurrentUser::getField('switched_user'))) {\n\t\t$result = CurrentUser::getData();\n\t\t$result = $result['switched_user'];\n\t\tCurrentUser::setData($result);\n\t\t$target = (isset($_GET['target']) ? $_GET['target'] : 'index');\n\t\t$redirect = \"admin_\" . $target . \".php\";\n\t\tif (!file_exists(\\Froxlor\\Froxlor::getInstallDir() . \"/\" . $redirect)) {\n\t\t\t$redirect = \"admin_index.php\";\n\t\t}\n\t\tResponse::redirectTo($redirect, null, true);\n\t} else {\n\t\tResponse::dynamicError(\"Cannot change back - You've never switched to another user :-)\");\n\t}\n}\n\nif ($page == 'overview') {\n\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_index\");\n\t$params = [];\n\tif ($userinfo['customers_see_all'] == '0') {\n\t\t$params = [\n\t\t\t'adminid' => $userinfo['adminid']\n\t\t];\n\t}\n\t$overview_stmt = Database::prepare(\"SELECT COUNT(*) AS `number_customers`,\n\t\t\t\tSUM(case when `diskspace` > 0 then `diskspace` else 0 end) AS `diskspace_assigned`,\n\t\t\t\tSUM(`diskspace_used`) AS `diskspace_used`,\n\t\t\t\tSUM(case when `mysqls` > 0 then `mysqls` else 0 end) AS `mysqls_assigned`,\n\t\t\t\tSUM(`mysqls_used`) AS `mysqls_used`,\n\t\t\t\tSUM(case when `emails` > 0 then `emails` else 0 end) AS `emails_assigned`,\n\t\t\t\tSUM(`emails_used`) AS `emails_used`,\n\t\t\t\tSUM(case when `email_accounts` > 0 then `email_accounts` else 0 end) AS `email_accounts_assigned`,\n\t\t\t\tSUM(`email_accounts_used`) AS `email_accounts_used`,\n\t\t\t\tSUM(case when `email_forwarders` > 0 then `email_forwarders` else 0 end) AS `email_forwarders_assigned`,\n\t\t\t\tSUM(`email_forwarders_used`) AS `email_forwarders_used`,\n\t\t\t\tSUM(case when `email_quota` > 0 then `email_quota` else 0 end) AS `email_quota_assigned`,\n\t\t\t\tSUM(`email_quota_used`) AS `email_quota_used`,\n\t\t\t\tSUM(case when `ftps` > 0 then `ftps` else 0 end) AS `ftps_assigned`,\n\t\t\t\tSUM(`ftps_used`) AS `ftps_used`,\n\t\t\t\tSUM(case when `subdomains` > 0 then `subdomains` else 0 end) AS `subdomains_assigned`,\n\t\t\t\tSUM(`subdomains_used`) AS `subdomains_used`,\n\t\t\t\tSUM(case when `traffic` > 0 then `traffic` else 0 end) AS `traffic_assigned`,\n\t\t\t\tSUM(`traffic_used`) AS `traffic_used`\n\t\t\t\tFROM `\" . TABLE_PANEL_CUSTOMERS . \"`\" . ($userinfo['customers_see_all'] ? '' : \" WHERE `adminid` = :adminid \"));\n\t$overview = Database::pexecute_first($overview_stmt, $params);\n\n\t$userinfo['diskspace_bytes'] = ($userinfo['diskspace'] > -1) ? $userinfo['diskspace'] * 1024 : -1;\n\t$overview['diskspace_bytes'] = $overview['diskspace_assigned'] * 1024;\n\t$overview['diskspace_bytes_used'] = $overview['diskspace_used'] * 1024;\n\n\t$userinfo['traffic_bytes'] = ($userinfo['traffic'] > -1) ? $userinfo['traffic'] * 1024 : -1;\n\t$overview['traffic_bytes'] = $overview['traffic_assigned'] * 1024;\n\t$overview['traffic_bytes_used'] = $overview['traffic_used'] * 1024;\n\n\t$number_domains_stmt = Database::prepare(\"\n\t\tSELECT COUNT(*) AS `number_domains` FROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\tWHERE `parentdomainid`='0'\" . ($userinfo['customers_see_all'] ? '' : \" AND `adminid` = :adminid\"));\n\t$number_domains = Database::pexecute_first($number_domains_stmt, $params);\n\n\t$overview['number_domains'] = $number_domains['number_domains'];\n\n\tif ((isset($_GET['lookfornewversion']) && $_GET['lookfornewversion'] == 'yes') || (isset($lookfornewversion) && $lookfornewversion == 'yes')) {\n\t\ttry {\n\t\t\t$json_result = Froxlor::getLocal($userinfo)->checkUpdate();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\t$lookfornewversion_lable = $result['version'];\n\t\t$lookfornewversion_link = $result['link'];\n\t\t$lookfornewversion_message = $result['message'];\n\t\t$lookfornewversion_addinfo = $result['additional_info'];\n\t\t$isnewerversion = $result['isnewerversion'];\n\t} else {\n\t\t$lookfornewversion_lable = lng('admin.lookfornewversion.clickhere');\n\t\t$lookfornewversion_link = htmlspecialchars($filename . '?page=' . urlencode($page) . '&lookfornewversion=yes');\n\t\t$lookfornewversion_message = '';\n\t\t$lookfornewversion_addinfo = '';\n\t\t$isnewerversion = 0;\n\t}\n\n\t$cron_last_runs = Cronjob::getCronjobsLastRun();\n\t$outstanding_tasks = Cronjob::getOutstandingTasks();\n\n\t// additional sys-infos\n\t$meminfo = explode(\"\\n\", @file_get_contents(\"/proc/meminfo\"));\n\t$memory = \"\";\n\tfor ($i = 0; $i < count($meminfo); ++$i) {\n\t\tif (substr($meminfo[$i], 0, 3) === \"Mem\") {\n\t\t\t$memory .= $meminfo[$i] . PHP_EOL;\n\t\t}\n\t}\n\n\tif (function_exists('sys_getloadavg')) {\n\t\t$loadArray = sys_getloadavg();\n\t\t$load = number_format($loadArray[0], 2, '.', '') . \" / \" . number_format($loadArray[1], 2, '.', '') . \" / \" . number_format($loadArray[2], 2, '.', '');\n\t} else {\n\t\t$load = @file_get_contents('/proc/loadavg');\n\t\tif (!$load) {\n\t\t\t$load = lng('admin.noloadavailable');\n\t\t}\n\t}\n\n\t$kernel = '';\n\tif (function_exists('posix_uname')) {\n\t\t$kernel_nfo = posix_uname();\n\t\t$kernel = $kernel_nfo['release'] . ' (' . $kernel_nfo['machine'] . ')';\n\t}\n\n\t// Try to get the uptime\n\t// First: With exec (let's hope it's enabled for the Froxlor - vHost)\n\t$uptime_array = explode(\" \", @file_get_contents(\"/proc/uptime\"));\n\t$uptime = '';\n\tif (is_array($uptime_array) && isset($uptime_array[0]) && is_numeric($uptime_array[0])) {\n\t\t// Some calculatioon to get a nicly formatted display\n\t\t$seconds = round($uptime_array[0], 0);\n\t\t$minutes = $seconds / 60;\n\t\t$hours = $minutes / 60;\n\t\t$days = floor($hours / 24);\n\t\t$hours = floor($hours - ($days * 24));\n\t\t$minutes = floor($minutes - ($days * 24 * 60) - ($hours * 60));\n\t\t$seconds = floor($seconds - ($days * 24 * 60 * 60) - ($hours * 60 * 60) - ($minutes * 60));\n\t\t$uptime = \"{$days}d, {$hours}h, {$minutes}m, {$seconds}s\";\n\t\t// Just cleanup\n\t\tunset($uptime_array, $seconds, $minutes, $hours, $days);\n\t}\n\n\t$sysinfo = [\n\t\t'webserver' => $_SERVER['SERVER_SOFTWARE'] ?? 'unknown',\n\t\t'phpversion' => phpversion(),\n\t\t'mysqlserverversion' => Database::getAttribute(PDO::ATTR_SERVER_VERSION),\n\t\t'phpsapi' => strtoupper(@php_sapi_name()),\n\t\t'hostname' => gethostname(),\n\t\t'memory' => $memory,\n\t\t'load' => $load,\n\t\t'kernel' => $kernel,\n\t\t'uptime' => $uptime\n\t];\n\n\tUI::twig()->addGlobal('userinfo', $userinfo);\n\tUI::view('user/index.html.twig', [\n\t\t'sysinfo' => $sysinfo,\n\t\t'overview' => $overview,\n\t\t'outstanding_tasks' => $outstanding_tasks,\n\t\t'cron_last_runs' => $cron_last_runs\n\t]);\n} elseif ($page == 'change_password') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$old_password = Validate::validate($_POST['old_password'], 'old password');\n\n\t\tif (!Crypt::validatePasswordLogin($userinfo, $old_password, TABLE_PANEL_ADMINS, 'adminid')) {\n\t\t\tResponse::standardError('oldpasswordnotcorrect');\n\t\t}\n\n\t\ttry {\n\t\t\t$new_password = Crypt::validatePassword($_POST['new_password'], 'new password');\n\t\t\t$new_password_confirm = Crypt::validatePassword($_POST['new_password_confirm'], 'new password confirm');\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tif ($old_password == '') {\n\t\t\tResponse::standardError([\n\t\t\t\t'stringisempty',\n\t\t\t\t'changepassword.old_password'\n\t\t\t]);\n\t\t} elseif ($new_password == '') {\n\t\t\tResponse::standardError([\n\t\t\t\t'stringisempty',\n\t\t\t\t'changepassword.new_password'\n\t\t\t]);\n\t\t} elseif ($new_password_confirm == '') {\n\t\t\tResponse::standardError([\n\t\t\t\t'stringisempty',\n\t\t\t\t'changepassword.new_password_confirm'\n\t\t\t]);\n\t\t} elseif ($new_password != $new_password_confirm) {\n\t\t\tResponse::standardError('newpasswordconfirmerror');\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tAdmins::getLocal($userinfo, [\n\t\t\t\t\t'id' => $userinfo['adminid'],\n\t\t\t\t\t'admin_password' => $new_password\n\t\t\t\t])->update();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, 'changed password');\n\t\t\tResponse::redirectTo($filename);\n\t\t}\n\t} else {\n\t\tUI::view('user/change_password.html.twig');\n\t}\n} elseif ($page == 'change_language') {\n\t$languages = Language::getLanguages();\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$def_language = Validate::validate($_POST['def_language'], 'default language');\n\n\t\tif (isset($languages[$def_language])) {\n\t\t\ttry {\n\t\t\t\tAdmins::getLocal($userinfo, [\n\t\t\t\t\t'id' => $userinfo['adminid'],\n\t\t\t\t\t'def_language' => $def_language\n\t\t\t\t])->update();\n\t\t\t\tCurrentUser::setField('language', $def_language);\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t}\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"changed his/her default language to '\" . $def_language . \"'\");\n\t\tResponse::redirectTo($filename);\n\t} else {\n\t\t$default_lang = Settings::Get('panel.standardlanguage');\n\t\tif ($userinfo['def_language'] != '') {\n\t\t\t$default_lang = $userinfo['def_language'];\n\t\t}\n\n\t\tUI::view('user/change_language.html.twig', [\n\t\t\t'languages' => $languages,\n\t\t\t'default_lang' => $default_lang\n\t\t]);\n\t}\n} elseif ($page == 'change_theme') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$theme = Validate::validate($_POST['theme'], 'theme');\n\t\ttry {\n\t\t\tAdmins::getLocal($userinfo, [\n\t\t\t\t'id' => $userinfo['adminid'],\n\t\t\t\t'theme' => $theme\n\t\t\t])->update();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"changed his/her theme to '\" . $theme . \"'\");\n\t\tResponse::redirectTo($filename);\n\t} else {\n\t\t$default_theme = Settings::Get('panel.default_theme');\n\t\tif ($userinfo['theme'] != '') {\n\t\t\t$default_theme = $userinfo['theme'];\n\t\t}\n\n\t\t$themes_avail = UI::getThemes();\n\n\t\tUI::view('user/change_theme.html.twig', [\n\t\t\t'themes' => $themes_avail,\n\t\t\t'default_theme' => $default_theme\n\t\t]);\n\t}\n} elseif ($page == 'send_error_report' && Settings::Get('system.allow_error_report_admin') == '1') {\n\trequire_once __DIR__ . '/error_report.php';\n} elseif ($page == 'apikeys' && Settings::Get('api.enabled') == 1) {\n\trequire_once __DIR__ . '/api_keys.php';\n} elseif ($page == '2fa' && Settings::Get('2fa.enabled') == 1) {\n\trequire_once __DIR__ . '/2fa.php';\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\IpsAndPorts;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::get('id');\n\nif ($page == 'ipsandports' || $page == 'overview') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_ipsandports\");\n\n\t\ttry {\n\t\t\t$ipsandports_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.ipsandports.php';\n\t\t\t$collection = (new Collection(IpsAndPorts::class, $userinfo))\n\t\t\t\t->withPagination($ipsandports_list_data['ipsandports_list']['columns'], $ipsandports_list_data['ipsandports_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $ipsandports_list_data, 'ipsandports_list'),\n\t\t\t'actions_links' => [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'ipsandports', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.ipsandports.add')\n\t\t\t\t]\n\t\t\t]\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = IpsAndPorts::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['id']) && $result['id'] == $id) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tIpsAndPorts::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t])->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('admin_ip_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['ip'] . ':' . $result['port']);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tIpsAndPorts::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$ipsandports_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/ipsandports/formfield.ipsandports_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'ipsandports']),\n\t\t\t\t'formdata' => $ipsandports_add_data['ipsandports_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = IpsAndPorts::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['ip'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tIpsAndPorts::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$ipsandports_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/ipsandports/formfield.ipsandports_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'ipsandports', 'id' => $id]),\n\t\t\t\t\t'formdata' => $ipsandports_edit_data['ipsandports_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'jqCheckIP') {\n\t\t$ip = $_POST['ip'] ?? \"\";\n\t\tif ((filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) || filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) && filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_RES_RANGE | FILTER_FLAG_NO_PRIV_RANGE) == false) {\n\t\t\t// returns notice if private network detected so we can display it\n\t\t\techo json_encode(lng('admin.ipsandports.ipnote'));\n\t\t} else {\n\t\t\techo 0;\n\t\t}\n\t\texit();\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\User;\n\n$id = (int)Request::get('id');\n\n$note_type = null;\n$note_msg = null;\n\nif ($page == 'message') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, 'viewed panel_message');\n\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\tif ($_POST['recipient'] == 0 && $userinfo['customers_see_all'] == '1') {\n\t\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, 'sending messages to admins');\n\t\t\t\t$result = Database::query('SELECT `name`, `email`  FROM `' . TABLE_PANEL_ADMINS . \"`\");\n\t\t\t} elseif ($_POST['recipient'] == 1) {\n\t\t\t\tif ($userinfo['customers_see_all'] == '1') {\n\t\t\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, 'sending messages to ALL customers');\n\t\t\t\t\t$result = Database::query('SELECT `firstname`, `name`, `company`, `email`  FROM `' . TABLE_PANEL_CUSTOMERS . \"`\");\n\t\t\t\t} else {\n\t\t\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, 'sending messages to customers');\n\t\t\t\t\t$result = Database::prepare('\n\t\t\t\t\t\tSELECT `firstname`, `name`, `company`, `email`  FROM `' . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\t\t\tWHERE `adminid` = :adminid\");\n\t\t\t\t\tDatabase::pexecute($result, [\n\t\t\t\t\t\t'adminid' => $userinfo['adminid']\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tResponse::standardError('norecipientsgiven');\n\t\t\t}\n\n\t\t\t$subject = $_POST['subject'];\n\t\t\t$message = wordwrap($_POST['message'], 70);\n\n\t\t\tif (!empty($message)) {\n\t\t\t\t$mailcounter = 0;\n\t\t\t\t$mail->Body = $message;\n\t\t\t\t$mail->Subject = $subject;\n\n\t\t\t\twhile ($row = $result->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$row['firstname'] = isset($row['firstname']) ? $row['firstname'] : '';\n\t\t\t\t\t$row['company'] = isset($row['company']) ? $row['company'] : '';\n\t\t\t\t\t$mail->AddAddress($row['email'], User::getCorrectUserSalutation([\n\t\t\t\t\t\t'firstname' => $row['firstname'],\n\t\t\t\t\t\t'name' => $row['name'],\n\t\t\t\t\t\t'company' => $row['company']\n\t\t\t\t\t]));\n\t\t\t\t\t$mail->From = $userinfo['email'];\n\t\t\t\t\t$mail->FromName = (isset($userinfo['firstname']) ? $userinfo['firstname'] . ' ' : '') . $userinfo['name'];\n\n\t\t\t\t\tif (!$mail->Send()) {\n\t\t\t\t\t\tif ($mail->ErrorInfo != '') {\n\t\t\t\t\t\t\t$mailerr_msg = $mail->ErrorInfo;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$mailerr_msg = $row['email'];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_ERR, 'Error sending mail: ' . $mailerr_msg);\n\t\t\t\t\t\tResponse::standardError('errorsendingmail', $row['email']);\n\t\t\t\t\t}\n\n\t\t\t\t\t$mailcounter++;\n\t\t\t\t\t$mail->ClearAddresses();\n\t\t\t\t}\n\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => 'showsuccess',\n\t\t\t\t\t'sentitems' => $mailcounter\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tResponse::standardError('nomessagetosend');\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'showsuccess') {\n\t\t$sentitems = isset($_GET['sentitems']) ? (int)$_GET['sentitems'] : 0;\n\n\t\tif ($sentitems == 0) {\n\t\t\t$note_type = 'info';\n\t\t\t$note_msg = lng('message.norecipients');\n\t\t} else {\n\t\t\t$note_type = 'success';\n\t\t\t$note_msg = str_replace('%s', $sentitems, lng('message.success'));\n\t\t}\n\t}\n\n\t$recipients = [];\n\n\tif ($userinfo['customers_see_all'] == '1') {\n\t\t$recipients[0] = lng('panel.reseller');\n\t}\n\t$recipients[1] = lng('panel.customer');\n\n\t$messages_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/messages/formfield.messages_add.php';\n\n\tUI::view('user/form-note.html.twig', [\n\t\t'formaction' => $linker->getLink(['section' => 'message']),\n\t\t'formdata' => $messages_add_data['messages_add'],\n\t\t'actions_links' => [\n\t\t\t[\n\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t'section' => 'settings',\n\t\t\t\t\t'page' => 'overview',\n\t\t\t\t\t'part' => 'system',\n\t\t\t\t\t'em' => 'system_mail_use_smtp'\n\t\t\t\t]),\n\t\t\t\t'label' => lng('admin.smtpsettings'),\n\t\t\t\t'icon' => 'fa-solid fa-gears',\n\t\t\t\t'class' => 'btn-outline-secondary'\n\t\t\t]\n\t\t],\n\t\t// alert-box\n\t\t'type' => $note_type,\n\t\t'alert_msg' => $note_msg\n\t]);\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\MysqlServer;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::get('id');\n\nif ($page == 'mysqlserver' || $page == 'overview') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_mysqlserver\");\n\n\t\ttry {\n\t\t\t$mysqlserver_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.mysqlserver.php';\n\t\t\t$collection = (new Collection(MysqlServer::class, $userinfo))\n\t\t\t\t->withPagination($mysqlserver_list_data['mysqlserver_list']['columns'], $mysqlserver_list_data['mysqlserver_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $mysqlserver_list_data, 'mysqlserver_list'),\n\t\t\t'actions_links' => [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'mysqlserver', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.mysqlserver.add')\n\t\t\t\t]\n\t\t\t]\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = MysqlServer::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['id']) && $result['id'] == $id) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tMysqlServer::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t])->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('admin_mysqlserver_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['caption'] . ' (' . $result['host'] . ')');\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tMysqlServer::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$mysqlserver_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/mysqlserver/formfield.mysqlserver_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'mysqlserver']),\n\t\t\t\t'formdata' => $mysqlserver_add_data['mysqlserver_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id >= 0) {\n\t\ttry {\n\t\t\t$json_result = MysqlServer::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['id']) && $result['id'] == $id) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tMysqlServer::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$mysqlserver_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/mysqlserver/formfield.mysqlserver_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'mysqlserver', 'id' => $id]),\n\t\t\t\t\t'formdata' => $mysqlserver_edit_data['mysqlserver_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\FpmDaemons;\nuse Froxlor\\Api\\Commands\\PhpSettings;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Froxlor;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::get('id');\n\nif ($page == 'overview') {\n\tif ($action == '') {\n\t\ttry {\n\t\t\t$phpconf_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.phpconfigs.php';\n\t\t\t$collection = (new Collection(PhpSettings::class, $userinfo, ['with_subdomains' => true]))\n\t\t\t\t->withPagination($phpconf_list_data['phpconf_list']['columns'], $phpconf_list_data['phpconf_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $phpconf_list_data, 'phpconf_list'),\n\t\t\t'actions_links' => (bool)$userinfo['change_serversettings'] ? [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'phpsettings', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.phpsettings.addnew')\n\t\t\t\t]\n\t\t\t] : []\n\t\t]);\n\t}\n\n\tif ($action == 'add') {\n\t\tif ((int)$userinfo['change_serversettings'] == 1) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tPhpSettings::getLocal($userinfo, $_POST)->add();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tif (file_exists(Froxlor::getInstallDir() . '/templates/misc/php/default.ini.php')) {\n\t\t\t\t\tinclude Froxlor::getInstallDir() . '/templates/misc/php/default.ini.php';\n\t\t\t\t\t$result = [\n\t\t\t\t\t\t'phpsettings' => $phpini\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\t// use first php-config as fallback\n\t\t\t\t\t$result_stmt = Database::query(\"SELECT * FROM `\" . TABLE_PANEL_PHPCONFIGS . \"` WHERE `id` = 1\");\n\t\t\t\t\t$result = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\t}\n\n\t\t\t\t$fpmconfigs = [];\n\t\t\t\t$configs = Database::query(\"SELECT * FROM `\" . TABLE_PANEL_FPMDAEMONS . \"` ORDER BY `description` ASC\");\n\t\t\t\twhile ($row = $configs->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$fpmconfigs[$row['id']] = $row['description'];\n\t\t\t\t}\n\n\t\t\t\t$phpconfig_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/phpconfig/formfield.phpconfig_add.php';\n\n\t\t\t\tUI::view('user/form-replacers.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'phpsettings']),\n\t\t\t\t\t'formdata' => $phpconfig_add_data['phpconfig_add'],\n\t\t\t\t\t'replacers' => $phpconfig_add_data['phpconfig_replacers']\n\t\t\t\t]);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('nopermissionsorinvalidid');\n\t\t}\n\t}\n\n\tif ($action == 'delete') {\n\t\ttry {\n\t\t\t$json_result = PhpSettings::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['id'] != 0 && $result['id'] == $id && (int)$userinfo['change_serversettings'] == 1 && $id != 1) // cannot delete the default php.config\n\t\t{\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tPhpSettings::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t])->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('phpsetting_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['description']);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('nopermissionsorinvalidid');\n\t\t}\n\t}\n\n\tif ($action == 'edit') {\n\t\ttry {\n\t\t\t$json_result = PhpSettings::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['id'] != 0 && $result['id'] == $id && (int)$userinfo['change_serversettings'] == 1) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tPhpSettings::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$fpmconfigs = [];\n\t\t\t\t$configs = Database::query(\"SELECT * FROM `\" . TABLE_PANEL_FPMDAEMONS . \"` ORDER BY `description` ASC\");\n\t\t\t\twhile ($row = $configs->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$fpmconfigs[$row['id']] = $row['description'];\n\t\t\t\t}\n\n\t\t\t\t$phpconfig_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/phpconfig/formfield.phpconfig_edit.php';\n\n\t\t\t\tUI::view('user/form-replacers.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'phpsettings', 'id' => $id]),\n\t\t\t\t\t'formdata' => $phpconfig_edit_data['phpconfig_edit'],\n\t\t\t\t\t'replacers' => $phpconfig_edit_data['phpconfig_replacers'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('nopermissionsorinvalidid');\n\t\t}\n\t}\n} elseif ($page == 'fpmdaemons') {\n\tif ($action == '') {\n\t\ttry {\n\t\t\t$fpmconf_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.fpmconfigs.php';\n\t\t\t$collection = (new Collection(FpmDaemons::class, $userinfo))\n\t\t\t\t->withPagination($fpmconf_list_data['fpmconf_list']['columns'], $fpmconf_list_data['fpmconf_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $fpmconf_list_data, 'fpmconf_list'),\n\t\t\t'actions_links' => (bool)$userinfo['change_serversettings'] ? [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'phpsettings', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.fpmsettings.addnew')\n\t\t\t\t]\n\t\t\t] : []\n\t\t]);\n\t}\n\n\tif ($action == 'add') {\n\t\tif ((int)$userinfo['change_serversettings'] == 1) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tFpmDaemons::getLocal($userinfo, $_POST)->add();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$fpmconfig_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/phpconfig/formfield.fpmconfig_add.php';\n\n\t\t\t\tUI::view('user/form-replacers.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'phpsettings', 'page' => 'fpmdaemons']),\n\t\t\t\t\t'formdata' => $fpmconfig_add_data['fpmconfig_add'],\n\t\t\t\t\t'replacers' => $fpmconfig_add_data['fpmconfig_replacers']\n\t\t\t\t]);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('nopermissionsorinvalidid');\n\t\t}\n\t}\n\n\tif ($action == 'delete') {\n\t\ttry {\n\t\t\t$json_result = FpmDaemons::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($id == 1) {\n\t\t\tResponse::standardError('cannotdeletedefaultphpconfig');\n\t\t}\n\n\t\tif ($result['id'] != 0 && $result['id'] == $id && (int)$userinfo['change_serversettings'] == 1 && $id != 1) // cannot delete the default php.config\n\t\t{\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tFpmDaemons::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('fpmsetting_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['description']);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('nopermissionsorinvalidid');\n\t\t}\n\t}\n\n\tif ($action == 'edit') {\n\t\ttry {\n\t\t\t$json_result = FpmDaemons::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['id'] != 0 && $result['id'] == $id && (int)$userinfo['change_serversettings'] == 1) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tFpmDaemons::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$fpmconfig_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/phpconfig/formfield.fpmconfig_edit.php';\n\n\t\t\t\tUI::view('user/form-replacers.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'phpsettings', 'page' => 'fpmdaemons', 'id' => $id]),\n\t\t\t\t\t'formdata' => $fpmconfig_edit_data['fpmconfig_edit'],\n\t\t\t\t\t'replacers' => $fpmconfig_edit_data['fpmconfig_replacers'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('nopermissionsorinvalidid');\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\HostingPlans;\nuse Froxlor\\Api\\Commands\\MysqlServer;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::get('id');\n\nif ($page == '' || $page == 'overview') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_plans\");\n\n\t\ttry {\n\t\t\t$plan_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.plans.php';\n\t\t\t$collection = (new Collection(HostingPlans::class, $userinfo))\n\t\t\t\t->withPagination($plan_list_data['plan_list']['columns'], $plan_list_data['plan_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $plan_list_data, 'plan_list'),\n\t\t\t'actions_links' => [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'plans', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.plans.add')\n\t\t\t\t]\n\t\t\t]\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = HostingPlans::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['id'] != 0 && $result['id'] == $id && (int)$userinfo['adminid'] == $result['adminid']) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tHostingPlans::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t])->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('plan_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['name']);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('nopermissionsorinvalidid');\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tHostingPlans::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$mysql_servers = [];\n\t\t\ttry {\n\t\t\t\t$result_json = MysqlServer::getLocal($userinfo)->listing();\n\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\tforeach ($result_decoded as $dbserver => $dbdata) {\n\t\t\t\t\t$mysql_servers[] = [\n\t\t\t\t\t\t'label' => $dbdata['caption'],\n\t\t\t\t\t\t'value' => $dbserver\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t} catch (Exception $e) {\n\t\t\t\t/* just none */\n\t\t\t}\n\n\t\t\t$phpconfigs = [];\n\t\t\t$configs = Database::query(\"\n\t\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\t\");\n\t\t\twhile ($row = $configs->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t'label' => $row['description'] . \" [\" . $row['interpreter'] . \"]\",\n\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t'label' => $row['description'],\n\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// dummy to avoid unknown variables\n\t\t\t$hosting_plans = null;\n\n\t\t\t$plans_add_data = include_once __DIR__ . '/lib/formfields/admin/plans/formfield.plans_add.php';\n\t\t\t$cust_add_data = include_once __DIR__ . '/lib/formfields/admin/customer/formfield.customer_add.php';\n\t\t\t// unset unneeded stuff\n\t\t\tunset($cust_add_data['customer_add']['sections']['section_a']);\n\t\t\tunset($cust_add_data['customer_add']['sections']['section_b']);\n\t\t\tunset($cust_add_data['customer_add']['sections']['section_cpre']);\n\t\t\t// merge\n\t\t\t$plans_add_data['plans_add']['sections'] = array_merge($plans_add_data['plans_add']['sections'], $cust_add_data['customer_add']['sections']);\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'plans']),\n\t\t\t\t'formdata' => $plans_add_data['plans_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = HostingPlans::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['name'] != '') {\n\t\t\t$result['value'] = json_decode($result['value'], true);\n\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\tforeach ($result['value'] as $index => $value) {\n\t\t\t\t$result[$index] = $value;\n\t\t\t}\n\t\t\t$result['allowed_phpconfigs'] = json_encode($result['allowed_phpconfigs']);\n\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tHostingPlans::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$mysql_servers = [];\n\t\t\t\ttry {\n\t\t\t\t\t$result_json = MysqlServer::getLocal($userinfo)->listing();\n\t\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\t\tforeach ($result_decoded as $dbserver => $dbdata) {\n\t\t\t\t\t\t$mysql_servers[] = [\n\t\t\t\t\t\t\t'label' => $dbdata['caption'],\n\t\t\t\t\t\t\t'value' => $dbserver\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t/* just none */\n\t\t\t\t}\n\n\t\t\t\t$phpconfigs = [];\n\t\t\t\t$configs = Database::query(\"\n\t\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\t\");\n\t\t\t\twhile ($row = $configs->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t\t'label' => $row['description'] . \" [\" . $row['interpreter'] . \"]\",\n\t\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t\t];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t\t'label' => $row['description'],\n\t\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$result['imap'] = $result['email_imap'];\n\t\t\t\t$result['pop3'] = $result['email_pop3'];\n\n\t\t\t\t// dummy to avoid unknown variables\n\t\t\t\t$result['loginname'] = null;\n\t\t\t\t$result['documentroot'] = null;\n\t\t\t\t$result['standardsubdomain'] = null;\n\t\t\t\t$result['deactivated'] = null;\n\t\t\t\t$result['def_language'] = null;\n\t\t\t\t$result['firstname'] = null;\n\t\t\t\t$result['gender'] = null;\n\t\t\t\t$result['company'] = null;\n\t\t\t\t$result['street'] = null;\n\t\t\t\t$result['zipcode'] = null;\n\t\t\t\t$result['city'] = null;\n\t\t\t\t$result['phone'] = null;\n\t\t\t\t$result['fax'] = null;\n\t\t\t\t$result['email'] = null;\n\t\t\t\t$result['customernumber'] = null;\n\t\t\t\t$result['custom_notes'] = null;\n\t\t\t\t$result['custom_notes_show'] = null;\n\t\t\t\t$result['api_allowed'] = null;\n\t\t\t\t$hosting_plans = null;\n\t\t\t\t$admin_select = [];\n\n\t\t\t\t$plans_edit_data = include_once __DIR__ . '/lib/formfields/admin/plans/formfield.plans_edit.php';\n\t\t\t\t$cust_edit_data = include_once __DIR__ . '/lib/formfields/admin/customer/formfield.customer_edit.php';\n\t\t\t\t// unset unneeded stuff\n\t\t\t\tunset($cust_edit_data['customer_edit']['sections']['section_a']);\n\t\t\t\tunset($cust_edit_data['customer_edit']['sections']['section_b']);\n\t\t\t\tunset($cust_edit_data['customer_edit']['sections']['section_cpre']);\n\t\t\t\tunset($cust_edit_data['customer_edit']['sections']['section_d']);\n\t\t\t\t// merge\n\t\t\t\t$plans_edit_data['plans_edit']['sections'] = array_merge($plans_edit_data['plans_edit']['sections'], $cust_edit_data['customer_edit']['sections']);\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'plans', 'id' => $id]),\n\t\t\t\t\t'formdata' => $plans_edit_data['plans_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'jqGetPlanValues') {\n\t\t$planid = (int)Request::get('planid', 0);\n\t\ttry {\n\t\t\t$json_result = HostingPlans::getLocal($userinfo, [\n\t\t\t\t'id' => $planid\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\t\techo $result['value'];\n\t\texit();\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nuse Froxlor\\Api\\Commands\\Froxlor;\nuse Froxlor\\Cron\\TaskId;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Database\\IntegrityCheck;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Cronjob;\nuse Froxlor\\UI\\Form;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\User;\nuse PHPMailer\\PHPMailer\\PHPMailer;\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\n// get sql-root access data\nDatabase::needRoot(true);\nDatabase::needSqlData();\n$sql_root = Database::getSqlData();\nDatabase::needRoot(false);\n\nif ($page == 'overview' && $userinfo['change_serversettings'] == '1') {\n\t$settings_data = PhpHelper::loadConfigArrayDir('./actions/admin/settings/');\n\tSettings::loadSettingsInto($settings_data);\n\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$_part = isset($_GET['part']) ? $_GET['part'] : '';\n\t\tif ($_part == '') {\n\t\t\t$_part = isset($_POST['part']) ? $_POST['part'] : '';\n\t\t}\n\n\t\tif ($_part != '') {\n\t\t\tif ($_part == 'all') {\n\t\t\t\t$settings_all = true;\n\t\t\t\t$settings_part = false;\n\t\t\t} else {\n\t\t\t\t$settings_all = false;\n\t\t\t\t$settings_part = true;\n\t\t\t}\n\t\t\t$only_enabledisable = false;\n\t\t} else {\n\t\t\t$settings_all = false;\n\t\t\t$settings_part = false;\n\t\t\t$only_enabledisable = true;\n\t\t}\n\n\t\t// check if the session timeout is too low #815\n\t\tif (isset($_POST['session_sessiontimeout']) && $_POST['session_sessiontimeout'] < 60) {\n\t\t\tResponse::standardError(lng('error.session_timeout'), lng('error.session_timeout_desc'));\n\t\t}\n\n\t\ttry {\n\t\t\tif (Form::processForm($settings_data, $_POST, [\n\t\t\t\t'filename' => $filename,\n\t\t\t\t'action' => $action,\n\t\t\t\t'page' => $page\n\t\t\t], $_part, $settings_all, $settings_part, $only_enabledisable)) {\n\t\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"rebuild configfiles due to changed setting\");\n\t\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\t\t// Using nameserver, insert a task which rebuilds the server config\n\t\t\t\tCronjob::inserttask(TaskId::REBUILD_DNS);\n\t\t\t\t// cron.d file\n\t\t\t\tCronjob::inserttask(TaskId::REBUILD_CRON);\n\n\t\t\t\tResponse::standardSuccess('settingssaved', '', [\n\t\t\t\t\t'filename' => $filename,\n\t\t\t\t\t'action' => $action,\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t}\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage(), $e->getCode());\n\t\t}\n\t} else {\n\t\t$_part = isset($_GET['part']) ? $_GET['part'] : '';\n\t\tif ($_part == '') {\n\t\t\t$_part = isset($_POST['part']) ? $_POST['part'] : '';\n\t\t}\n\n\t\t$fields = Form::buildForm($settings_data, $_part);\n\n\t\tif ($_part == '' || $_part == 'all') {\n\t\t\tUI::view('settings/index.html.twig', ['fields' => $fields]);\n\t\t} else {\n\t\t\t$em = Request::get('em', '');\n\t\t\tUI::view('settings/detailpart.html.twig', ['fields' => $fields, 'em' => $em]);\n\t\t}\n\t}\n} elseif ($page == 'phpinfo' && $userinfo['change_serversettings'] == '1') {\n\tob_start();\n\tphpinfo();\n\t$phpinfo = [\n\t\t'phpinfo' => []\n\t];\n\tif (preg_match_all('#(?:<h2>(?:<a name=\".*?\">)?(.*?)(?:</a>)?</h2>)|(?:<tr(?: class=\".*?\")?><t[hd](?: class=\".*?\")?>(.*?)\\s*</t[hd]>(?:<t[hd](?: class=\".*?\")?>(.*?)\\s*</t[hd]>(?:<t[hd](?: class=\".*?\")?>(.*?)\\s*</t[hd]>)?)?</tr>)#s', ob_get_clean(), $matches, PREG_SET_ORDER)) {\n\t\tforeach ($matches as $match) {\n\t\t\t$end = array_keys($phpinfo);\n\t\t\t$end = end($end);\n\t\t\tif (strlen($match[1])) {\n\t\t\t\t$phpinfo[$match[1]] = [];\n\t\t\t} elseif (isset($match[3])) {\n\t\t\t\t$phpinfo[$end][$match[2]] = isset($match[4]) ? [\n\t\t\t\t\t$match[3],\n\t\t\t\t\t$match[4]\n\t\t\t\t] : $match[3];\n\t\t\t} else {\n\t\t\t\t$phpinfo[$end][] = $match[2];\n\t\t\t}\n\t\t}\n\t} else {\n\t\tResponse::standardError(lng('error.no_phpinfo'));\n\t}\n\tUI::view('settings/phpinfo.html.twig', [\n\t\t'phpversion' => PHP_VERSION,\n\t\t'phpinfo' => $phpinfo\n\t]);\n} elseif ($page == 'rebuildconfigs' && $userinfo['change_serversettings'] == '1') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"rebuild configfiles\");\n\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\tCronjob::inserttask(TaskId::CREATE_QUOTA);\n\t\t// Using nameserver, insert a task which rebuilds the server config\n\t\tCronjob::inserttask(TaskId::REBUILD_DNS);\n\t\t// cron.d file\n\t\tCronjob::inserttask(TaskId::REBUILD_CRON);\n\n\t\tResponse::standardSuccess('rebuildingconfigs', '', [\n\t\t\t'filename' => 'admin_index.php'\n\t\t]);\n\t} else {\n\t\tHTML::askYesNo('admin_configs_reallyrebuild', $filename, [\n\t\t\t'page' => $page\n\t\t]);\n\t}\n} elseif ($page == 'updatecounters' && $userinfo['change_serversettings'] == '1') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"updated resource-counters\");\n\t\t$updatecounters = User::updateCounters(true);\n\t\tUI::view('user/resource-counter.html.twig', [\n\t\t\t'counters' => $updatecounters\n\t\t]);\n\t} else {\n\t\tHTML::askYesNo('admin_counters_reallyupdate', $filename, [\n\t\t\t'page' => $page\n\t\t]);\n\t}\n} elseif ($page == 'wipecleartextmailpws' && $userinfo['change_serversettings'] == '1') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"wiped all cleartext mail passwords\");\n\t\tDatabase::query(\"UPDATE `\" . TABLE_MAIL_USERS . \"` SET `password` = '';\");\n\t\tDatabase::query(\"UPDATE `\" . TABLE_PANEL_SETTINGS . \"` SET `value` = '0' WHERE `settinggroup` = 'system' AND `varname` = 'mailpwcleartext'\");\n\t\tResponse::redirectTo($filename);\n\t} else {\n\t\tHTML::askYesNo('admin_cleartextmailpws_reallywipe', $filename, [\n\t\t\t'page' => $page\n\t\t]);\n\t}\n} elseif ($page == 'wipequotas' && $userinfo['change_serversettings'] == '1') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"wiped all mailquotas\");\n\n\t\t// Set the quota to 0 which means unlimited\n\t\tDatabase::query(\"UPDATE `\" . TABLE_MAIL_USERS . \"` SET `quota` = '0';\");\n\t\tDatabase::query(\"UPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET `email_quota_used` = '0'\");\n\t\tResponse::redirectTo($filename);\n\t} else {\n\t\tHTML::askYesNo('admin_quotas_reallywipe', $filename, [\n\t\t\t'page' => $page\n\t\t]);\n\t}\n} elseif ($page == 'enforcequotas' && $userinfo['change_serversettings'] == '1') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t// Fetch all accounts\n\t\t$result_stmt = Database::query(\"SELECT `quota`, `customerid` FROM `\" . TABLE_MAIL_USERS . \"`\");\n\n\t\tif (Database::num_rows() > 0) {\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET\n\t\t\t\t`email_quota_used` = `email_quota_used` + :diff\n\t\t\t\tWHERE `customerid` = :customerid\n\t\t\t\");\n\n\t\t\twhile ($array = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$difference = Settings::Get('system.mail_quota') - $array['quota'];\n\t\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t\t'diff' => $difference,\n\t\t\t\t\t'customerid' => $customerid\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\t// Set the new quota\n\t\t$upd_stmt = Database::prepare(\"\n\t\t\tUPDATE `\" . TABLE_MAIL_USERS . \"` SET `quota` = :quota\n\t\t\");\n\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t'quota' => Settings::Get('system.mail_quota')\n\t\t]);\n\n\t\t// Update the Customer, if the used quota is bigger than the allowed quota\n\t\tDatabase::query(\"UPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET `email_quota` = `email_quota_used` WHERE `email_quota` < `email_quota_used`\");\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, 'enforcing mailquota to all customers: ' . Settings::Get('system.mail_quota') . ' MB');\n\t\tResponse::redirectTo($filename);\n\t} else {\n\t\tHTML::askYesNo('admin_quotas_reallyenforce', $filename, [\n\t\t\t'page' => $page\n\t\t]);\n\t}\n} elseif ($page == 'integritycheck' && $userinfo['change_serversettings'] == '1') {\n\t$integrity = new IntegrityCheck();\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$integrity->fixAll();\n\t} elseif (isset($_GET['action']) && $_GET['action'] == \"fix\") {\n\t\tHTML::askYesNo('admin_integritycheck_reallyfix', $filename, [\n\t\t\t'page' => $page\n\t\t]);\n\t}\n\n\t$integritycheck = [];\n\tforeach ($integrity->available as $id => $check) {\n\t\t$integritycheck[] = [\n\t\t\t'displayid' => $id + 1,\n\t\t\t'result' => $integrity->$check(),\n\t\t\t'checkdesc' => lng('integrity_check.' . $check)\n\t\t];\n\t}\n\n\t$integrity_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.integrity.php';\n\t$collection = [\n\t\t'data' => $integritycheck,\n\t\t'pagination' => []\n\t];\n\n\tUI::view('user/table.html.twig', [\n\t\t'listing' => Listing::formatFromArray($collection, $integrity_list_data['integrity_list'], 'integrity_list'),\n\t\t'actions_links' => [\n\t\t\t[\n\t\t\t\t'href' => $linker->getLink(['section' => 'settings', 'page' => $page, 'action' => 'fix']),\n\t\t\t\t'label' => lng('admin.integrityfix'),\n\t\t\t\t'icon' => 'fa-solid fa-screwdriver-wrench',\n\t\t\t\t'class' => 'btn-warning'\n\t\t\t]\n\t\t]\n\t]);\n} elseif ($page == 'importexport' && $userinfo['change_serversettings'] == '1') {\n\t// check for json-stuff\n\tif (!extension_loaded('json')) {\n\t\tResponse::standardError('jsonextensionnotfound');\n\t}\n\n\tif (isset($_GET['action']) && $_GET['action'] == \"export\") {\n\t\t// export\n\t\ttry {\n\t\t\t$json_result = Froxlor::getLocal($userinfo)->exportSettings();\n\t\t\t$json_export = json_decode($json_result, true)['data'];\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\theader('Content-disposition: attachment; filename=Froxlor_settings-' . \\Froxlor\\Froxlor::VERSION . '-' . \\Froxlor\\Froxlor::DBVERSION . '_' . date('d.m.Y') . '.json');\n\t\theader('Content-type: application/json');\n\t\techo $json_export;\n\t\texit();\n\t} elseif (isset($_GET['action']) && $_GET['action'] == \"import\") {\n\t\t// import\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t// get uploaded file\n\t\t\tif (isset($_FILES[\"import_file\"][\"tmp_name\"])) {\n\t\t\t\t$imp_content = file_get_contents($_FILES[\"import_file\"][\"tmp_name\"]);\n\t\t\t\ttry {\n\t\t\t\t\tFroxlor::getLocal($userinfo, [\n\t\t\t\t\t\t'json_str' => $imp_content\n\t\t\t\t\t])->importSettings();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::standardSuccess('settingsimported', '', [\n\t\t\t\t\t'filename' => 'admin_settings.php'\n\t\t\t\t]);\n\t\t\t}\n\t\t\tResponse::dynamicError(\"Upload failed\");\n\t\t}\n\t} else {\n\t\t$settings_data = include_once dirname(__FILE__) . '/lib/formfields/admin/settings/formfield.settings_import.php';\n\n\t\tUI::view('user/form.html.twig', [\n\t\t\t'formaction' => $linker->getLink(['section' => 'settings', 'page' => $page, 'action' => 'import']),\n\t\t\t'formdata' => $settings_data['settings_import'],\n\t\t\t'actions_links' => [\n\t\t\t\t[\n\t\t\t\t\t'class' => 'btn-outline-primary',\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'settings', 'page' => 'overview']),\n\t\t\t\t\t'label' => lng('admin.configfiles.overview'),\n\t\t\t\t\t'icon' => 'fa-solid fa-grip'\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'class' => 'btn-outline-secondary',\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'settings', 'page' => $page, 'action' => 'export']),\n\t\t\t\t\t'label' => 'Download/export ' . lng('admin.serversettings'),\n\t\t\t\t\t'icon' => 'fa-solid fa-file-import'\n\t\t\t\t]\n\t\t\t]\n\t\t]);\n\t}\n} elseif ($page == 'testmail') {\n\t$note_type = 'info';\n\t$note_msg = lng('admin.smtptestnote');\n\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$test_addr = isset($_POST['test_addr']) ? $_POST['test_addr'] : null;\n\n\t\t// Initialize the mailingsystem\n\t\t$testmail = new PHPMailer(true);\n\t\t$testmail->CharSet = \"UTF-8\";\n\n\t\tif (Settings::Get('system.mail_use_smtp')) {\n\t\t\t$testmail->isSMTP();\n\t\t\t$testmail->Host = Settings::Get('system.mail_smtp_host');\n\t\t\t$testmail->SMTPAuth = Settings::Get('system.mail_smtp_auth') == '1';\n\t\t\t$testmail->Username = Settings::Get('system.mail_smtp_user');\n\t\t\t$testmail->Password = Settings::Get('system.mail_smtp_passwd');\n\t\t\tif (Settings::Get('system.mail_smtp_usetls')) {\n\t\t\t\t$testmail->SMTPSecure = 'tls';\n\t\t\t} else {\n\t\t\t\t$testmail->SMTPAutoTLS = false;\n\t\t\t}\n\t\t\t$testmail->Port = Settings::Get('system.mail_smtp_port');\n\t\t}\n\n\t\t$_mailerror = false;\n\t\tif (PHPMailer::ValidateAddress(Settings::Get('panel.adminmail')) !== false) {\n\t\t\t// set return-to address and custom sender-name, see #76\n\t\t\t$testmail->SetFrom(Settings::Get('panel.adminmail'), Settings::Get('panel.adminmail_defname'));\n\t\t\tif (Settings::Get('panel.adminmail_return') != '') {\n\t\t\t\t$testmail->AddReplyTo(Settings::Get('panel.adminmail_return'), Settings::Get('panel.adminmail_defname'));\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t$testmail->Subject = \"Froxlor Test-Mail\";\n\t\t\t\t$mail_body = \"Yay, this worked :)\";\n\t\t\t\t$testmail->AltBody = $mail_body;\n\t\t\t\t$testmail->MsgHTML(str_replace(\"\\n\", \"<br />\", $mail_body));\n\t\t\t\t$testmail->AddAddress($test_addr);\n\t\t\t\t$testmail->Send();\n\t\t\t} catch (\\PHPMailer\\PHPMailer\\Exception $e) {\n\t\t\t\t$note_type = 'danger';\n\t\t\t\t$note_msg = $e->getMessage();\n\t\t\t\t$_mailerror = true;\n\t\t\t} catch (Exception $e) {\n\t\t\t\t$note_type = 'danger';\n\t\t\t\t$note_msg = $e->getMessage();\n\t\t\t\t$_mailerror = true;\n\t\t\t}\n\n\t\t\tif (!$_mailerror) {\n\t\t\t\t// success\n\t\t\t\t$mail->ClearAddresses();\n\t\t\t\tResponse::standardSuccess('testmailsent', '', [\n\t\t\t\t\t'filename' => 'admin_settings.php',\n\t\t\t\t\t'page' => 'testmail'\n\t\t\t\t]);\n\t\t\t}\n\t\t} else {\n\t\t\t// invalid sender e-mail\n\t\t\t$note_type = 'warning';\n\t\t\t$note_msg = \"Invalid sender e-mail address: \" . Settings::Get('panel.adminmail');\n\t\t}\n\t}\n\n\t$mailtest_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/settings/formfield.settings_mailtest.php';\n\n\tUI::view('user/form-note.html.twig', [\n\t\t'formaction' => $linker->getLink(['section' => 'settings']),\n\t\t'formdata' => $mailtest_add_data['mailtest'],\n\t\t'actions_links' => [\n\t\t\t[\n\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t'section' => 'settings',\n\t\t\t\t\t'page' => 'overview',\n\t\t\t\t\t'part' => 'system',\n\t\t\t\t\t'em' => 'system_mail_use_smtp'\n\t\t\t\t]),\n\t\t\t\t'label' => lng('admin.smtpsettings'),\n\t\t\t\t'icon' => 'fa-solid fa-gears',\n\t\t\t\t'class' => 'btn-outline-secondary'\n\t\t\t]\n\t\t],\n\t\t// alert-box\n\t\t'type' => $note_type,\n\t\t'alert_msg' => $note_msg\n\t]);\n} elseif ($page == 'toggleSettingsMode') {\n\tif ($userinfo['change_serversettings'] == '1') {\n\t\t$cmode = Settings::Get('panel.settings_mode');\n\t\tSettings::Set('panel.settings_mode', (int)(!(bool)$cmode));\n\t}\n\tResponse::redirectTo($filename);\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Language;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Validate;\nuse Froxlor\\CurrentUser;\n\n$id = (int)Request::get('id');\n$subjectid = intval(Request::get('subjectid'));\n$mailbodyid = intval(Request::get('mailbodyid'));\n\n$available_templates = [\n\t'createcustomer',\n\t'pop_success',\n\t'new_database_by_customer',\n\t'new_ftpaccount_by_customer',\n\t'password_reset'\n];\n\n// only show templates of features that are enabled #1191\nif ((int)Settings::Get('system.report_enable') == 1) {\n\tarray_push($available_templates, 'trafficmaxpercent', 'diskmaxpercent');\n}\nif (Settings::Get('panel.sendalternativemail') == 1) {\n\tarray_push($available_templates, 'pop_success_alternative');\n}\n\n$file_templates = [\n\t'index_html'\n];\n\n$languages = Language::getLanguages();\n\nif ($action == '') {\n\t// email templates\n\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_templates\");\n\n\t$templates_array = [];\n\t$result_stmt = Database::prepare(\"\n\t\tSELECT `id`, `language`, `varname` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\tWHERE `adminid` = :adminid AND `templategroup`='mails'\n\t\tORDER BY `language`, `varname`\n\t\");\n\tDatabase::pexecute($result_stmt, [\n\t\t'adminid' => $userinfo['adminid']\n\t]);\n\n\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t$parts = [];\n\t\tpreg_match('/^([a-z]([a-z_]+[a-z])*)_(mailbody|subject)$/', $row['varname'], $parts);\n\t\t$templates_array[$row['language']][$parts[1]][$parts[3]] = $row['id'];\n\t}\n\n\t$templates = [];\n\tforeach ($templates_array as $language => $template_defs) {\n\t\tforeach ($template_defs as $action => $email) {\n\t\t\t$templates[] = [\n\t\t\t\t'subjectid' => $email['subject'],\n\t\t\t\t'mailbodyid' => $email['mailbody'],\n\t\t\t\t'template' => lng('admin.templates.' . $action),\n\t\t\t\t'language' => $language\n\t\t\t];\n\t\t}\n\t}\n\n\t$mail_actions_links = false;\n\tforeach ($languages as $language_file => $language_name) {\n\t\t$templates_done = [];\n\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT `varname` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\tWHERE `adminid` = :adminid AND `language`= :lang\n\t\t\tAND `templategroup` = 'mails' AND `varname` LIKE '%_subject'\n\t\t\");\n\t\tDatabase::pexecute($result_stmt, [\n\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t'lang' => $language_name\n\t\t]);\n\n\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t$templates_done[] = str_replace('_subject', '', $row['varname']);\n\t\t}\n\n\t\tif (count(array_diff($available_templates, $templates_done)) > 0) {\n\t\t\t$mail_actions_links = [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'templates', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.templates.template_add')\n\t\t\t\t]\n\t\t\t];\n\t\t}\n\t}\n\n\t$mailtpl_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.mailtemplates.php';\n\t$collection_mail = [\n\t\t'data' => $templates,\n\t\t'pagination' => []\n\t];\n\n\t// filetemplates\n\t$result_stmt = Database::prepare(\"\n\t\tSELECT `id`, `varname` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\tWHERE `adminid` = :adminid AND `templategroup`='files'\");\n\tDatabase::pexecute($result_stmt, [\n\t\t'adminid' => $userinfo['adminid']\n\t]);\n\n\t$filetemplates = [];\n\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t$filetemplates[] = [\n\t\t\t'id' => $row['id'],\n\t\t\t'template' => lng('admin.templates.' . $row['varname'])\n\t\t];\n\t}\n\n\t$file_actions_links = false;\n\tif (Database::num_rows() != count($file_templates)) {\n\t\t$file_actions_links = [\n\t\t\t[\n\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t'section' => 'templates',\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => 'add',\n\t\t\t\t\t'files' => 'files'\n\t\t\t\t]),\n\t\t\t\t'label' => lng('admin.templates.template_fileadd')\n\t\t\t]\n\t\t];\n\t}\n\n\t$filetpl_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.filetemplates.php';\n\t$collection_file = [\n\t\t'data' => $filetemplates,\n\t\t'pagination' => []\n\t];\n\n\tif ($mail_actions_links === false) {\n\t\t$mail_actions_links = [];\n\t}\n\tif ($file_actions_links === false) {\n\t\t$file_actions_links = [];\n\t}\n\n\tUI::view('user/table-tpl.html.twig', [\n\t\t'maillisting' => Listing::formatFromArray($collection_mail, $mailtpl_list_data['mailtpl_list'], 'mailtpl_list'),\n\t\t'filelisting' => Listing::formatFromArray($collection_file, $filetpl_list_data['filetpl_list'], 'filetpl_list'),\n\t\t'actions_links' => array_merge($mail_actions_links, $file_actions_links)\n\t]);\n} elseif ($action == 'delete' && $subjectid != 0 && $mailbodyid != 0) {\n\t// email templates\n\t$result_stmt = Database::prepare(\"\n\t\tSELECT `language`, `varname` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\tWHERE `adminid` = :adminid AND `id` = :id\");\n\tDatabase::pexecute($result_stmt, [\n\t\t'adminid' => $userinfo['adminid'],\n\t\t'id' => $subjectid\n\t]);\n\t$result = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\n\tif ($result['varname'] != '') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\t\tWHERE `adminid` = :adminid\n\t\t\t\tAND (`id` = :ida OR `id` = :idb)\");\n\t\t\tDatabase::pexecute($del_stmt, [\n\t\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t\t'ida' => $subjectid,\n\t\t\t\t'idb' => $mailbodyid\n\t\t\t]);\n\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"deleted template '\" . $result['language'] . ' - ' . lng('admin.templates.' . str_replace('_subject', '', $result['varname'])) . \"'\");\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\tHTML::askYesNo('admin_template_reallydelete', $filename, [\n\t\t\t\t'subjectid' => $subjectid,\n\t\t\t\t'mailbodyid' => $mailbodyid,\n\t\t\t\t'page' => $page,\n\t\t\t\t'action' => $action\n\t\t\t], $result['language'] . ' - ' . lng('admin.templates.' . str_replace('_subject', '', $result['varname'])));\n\t\t}\n\t}\n} elseif ($action == 'deletef' && $id != 0) {\n\t// file templates\n\t$result_stmt = Database::prepare(\"\n\t\tSELECT * FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\tWHERE `adminid` = :adminid AND `id` = :id\");\n\tDatabase::pexecute($result_stmt, [\n\t\t'adminid' => $userinfo['adminid'],\n\t\t'id' => $id\n\t]);\n\n\tif (Database::num_rows() > 0) {\n\t\t$row = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\t\tWHERE `adminid` = :adminid AND `id` = :id\");\n\t\t\tDatabase::pexecute($del_stmt, [\n\t\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t\t'id' => $id\n\t\t\t]);\n\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"deleted template '\" . lng('admin.templates.' . $row['varname']) . \"'\");\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\tHTML::askYesNo('admin_template_reallydelete', $filename, [\n\t\t\t\t'id' => $id,\n\t\t\t\t'page' => $page,\n\t\t\t\t'action' => $action\n\t\t\t], lng('admin.templates.' . $row['varname']));\n\t\t}\n\t} else {\n\t\tResponse::standardError('templatenotfound');\n\t}\n} elseif ($action == 'add') {\n\tif (isset($_POST['prepare']) && $_POST['prepare'] == 'prepare') {\n\t\t// email templates\n\t\t$language = htmlentities(Validate::validate($_POST['language'], 'language', '/^[^\\r\\n\\0\"\\']+$/', 'nolanguageselect'));\n\t\t$template = Validate::validate($_POST['template'], 'template');\n\n\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT COUNT(*) as def FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\tWHERE `adminid` = :adminid AND `language` = :lang\n\t\t\tAND `templategroup` = 'mails' AND `varname` LIKE :template\n\t\t\");\n\t\t$result = Database::pexecute_first($result_stmt, [\n\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t'lang' => $language,\n\t\t\t'template' => $template . '%'\n\t\t]);\n\t\tif ($result && $result['def'] > 0) {\n\t\t\tResponse::standardError('templatelanguagecombodefined');\n\t\t}\n\n\t\t// set target language\n\t\tLanguage::setLanguage($language);\n\n\t\t$subject = lng('mails.' . $template . '.subject');\n\t\t$body = str_replace('\\n', \"\\n\", lng('mails.' . $template . '.mailbody'));\n\n\t\t// re set language to user\n\t\tLanguage::setLanguage(CurrentUser::getField('def_language'));\n\n\t\t$template_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/templates/formfield.template_add.php';\n\n\t\tUI::view('user/form-replacers.html.twig', [\n\t\t\t'formaction' => $linker->getLink(['section' => 'templates']),\n\t\t\t'formdata' => $template_add_data['template_add'],\n\t\t\t'replacers' => $template_add_data['template_replacers']\n\t\t]);\n\t} elseif (isset($_POST['send']) && $_POST['send'] == 'send' && !isset($_POST['filesend'])) {\n\t\t// email templates\n\t\t$language = htmlentities(Validate::validate($_POST['language'], 'language', '/^[^\\r\\n\\0\"\\']+$/', 'nolanguageselect'));\n\t\t$template = Validate::validate($_POST['template'], 'template');\n\t\t$subject = Validate::validate($_POST['subject'], 'subject', '/^[^\\r\\n\\0]+$/', 'nosubjectcreate');\n\t\t$mailbody = Validate::validate($_POST['mailbody'], 'mailbody', '/^[^\\0]+$/', 'nomailbodycreate');\n\t\t$templates = [];\n\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT `varname` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\tWHERE `adminid` = :adminid AND `language` = :lang\n\t\t\tAND `templategroup` = 'mails' AND `varname` LIKE '%_subject'\");\n\t\tDatabase::pexecute($result_stmt, [\n\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t'lang' => $language\n\t\t]);\n\n\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t$templates[] = str_replace('_subject', '', $row['varname']);\n\t\t}\n\n\t\t$templates = array_diff($available_templates, $templates);\n\t\tif (!in_array($template, $templates)) {\n\t\t\tResponse::standardError('templatenotfound');\n\t\t} else {\n\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\tINSERT INTO `\" . TABLE_PANEL_TEMPLATES . \"` SET\n\t\t\t\t\t`adminid` = :adminid,\n\t\t\t\t\t`language` = :lang,\n\t\t\t\t\t`templategroup` = 'mails',\n\t\t\t\t\t`varname` = :var,\n\t\t\t\t\t`value` = :value\");\n\n\t\t\t// mail-subject\n\t\t\t$ins_data = [\n\t\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t\t'lang' => $language,\n\t\t\t\t'var' => $template . '_subject',\n\t\t\t\t'value' => $subject\n\t\t\t];\n\t\t\tDatabase::pexecute($ins_stmt, $ins_data);\n\n\t\t\t// mail-body\n\t\t\t$ins_data = [\n\t\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t\t'lang' => $language,\n\t\t\t\t'var' => $template . '_mailbody',\n\t\t\t\t'value' => $mailbody\n\t\t\t];\n\t\t\tDatabase::pexecute($ins_stmt, $ins_data);\n\n\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"added template '\" . $language . ' - ' . $template . \"'\");\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t}\n\t} elseif (isset($_POST['filesend']) && $_POST['filesend'] == 'filesend') {\n\t\t// file templates\n\t\t$template = Validate::validate($_POST['template'], 'template');\n\t\t$filecontent = Validate::validate($_POST['filecontent'], 'filecontent', '/^[^\\0]+$/', 'filecontentnotset');\n\n\t\t$ins_stmt = Database::prepare(\"\n\t\t\tINSERT INTO `\" . TABLE_PANEL_TEMPLATES . \"` SET\n\t\t\t\t`adminid` = :adminid,\n\t\t\t\t`language` = '',\n\t\t\t\t`templategroup` = 'files',\n\t\t\t\t`varname` = :var,\n\t\t\t\t`value` = :value\");\n\n\t\t$ins_data = [\n\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t'var' => $template,\n\t\t\t'value' => $filecontent\n\t\t];\n\t\tDatabase::pexecute($ins_stmt, $ins_data);\n\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"added template '\" . $template . \"'\");\n\t\tResponse::redirectTo($filename, [\n\t\t\t'page' => $page\n\t\t]);\n\t} elseif (!isset($_GET['files'])) {\n\t\t// email templates\n\t\t$add = false;\n\t\t$language_options = [];\n\t\t$template_options = [];\n\n\t\tforeach ($languages as $language_file => $language_name) {\n\t\t\t$templates = [];\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT `varname` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\t\tWHERE `adminid` = :adminid AND `language` = :lang\n\t\t\t\tAND `templategroup` = 'mails' AND `varname` LIKE '%_subject'\");\n\t\t\tDatabase::pexecute($result_stmt, [\n\t\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t\t'lang' => $language_name\n\t\t\t]);\n\n\t\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$templates[] = str_replace('_subject', '', $row['varname']);\n\t\t\t}\n\n\t\t\tif (count(array_diff($available_templates, $templates)) > 0) {\n\t\t\t\t$add = true;\n\t\t\t\t$language_options[$language_file] = $language_name;\n\n\t\t\t\t$templates = array_diff($available_templates, $templates);\n\n\t\t\t\tforeach ($templates as $template) {\n\t\t\t\t\t$template_options[$template] = lng('admin.templates.' . $template);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($add) {\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'templates']),\n\t\t\t\t'formdata' => [\n\t\t\t\t\t'title' => lng('admin.templates.template_add'),\n\t\t\t\t\t'image' => 'fa-solid fa-plus',\n\t\t\t\t\t'self_overview' => ['section' => 'templates', 'page' => 'email'],\n\t\t\t\t\t'sections' => [\n\t\t\t\t\t\t'section_a' => [\n\t\t\t\t\t\t\t'title' => lng('admin.templates.template_add'),\n\t\t\t\t\t\t\t'fields' => [\n\t\t\t\t\t\t\t\t'language' => [\n\t\t\t\t\t\t\t\t\t'label' => lng('login.language'),\n\t\t\t\t\t\t\t\t\t'type' => 'select',\n\t\t\t\t\t\t\t\t\t'select_var' => $language_options,\n\t\t\t\t\t\t\t\t\t'selected' => $userinfo['language']\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t'template' => [\n\t\t\t\t\t\t\t\t\t'label' => lng('admin.templates.action'),\n\t\t\t\t\t\t\t\t\t'type' => 'select',\n\t\t\t\t\t\t\t\t\t'select_var' => $template_options\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t'prepare' => [\n\t\t\t\t\t\t\t\t\t'type' => 'hidden',\n\t\t\t\t\t\t\t\t\t'value' => 'prepare'\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t'editid' => $id\n\t\t\t]);\n\t\t} else {\n\t\t\tResponse::standardError('alltemplatesdefined');\n\t\t}\n\t} else {\n\t\t// filetemplates\n\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT `id`, `varname` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\tWHERE `adminid` = :adminid AND `templategroup`='files'\");\n\t\tDatabase::pexecute($result_stmt, [\n\t\t\t'adminid' => $userinfo['adminid']\n\t\t]);\n\n\t\tif (Database::num_rows() == count($file_templates)) {\n\t\t\tResponse::standardError('alltemplatesdefined');\n\t\t} else {\n\t\t\t$templatesdefined = [];\n\t\t\t$free_templates = [];\n\n\t\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$templatesdefined[] = $row['varname'];\n\t\t\t}\n\n\t\t\tforeach (array_diff($file_templates, $templatesdefined) as $template) {\n\t\t\t\t$free_templates[$template] = lng('admin.templates.' . $template);\n\t\t\t}\n\n\t\t\t$filetemplate_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/templates/formfield.filetemplate_add.php';\n\n\t\t\tUI::view('user/form-replacers.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'templates']),\n\t\t\t\t'formdata' => $filetemplate_add_data['filetemplate_add'],\n\t\t\t\t'replacers' => $filetemplate_add_data['filetemplate_replacers']\n\t\t\t]);\n\t\t}\n\t}\n} elseif ($action == 'edit' && $subjectid != 0 && $mailbodyid != 0) {\n\t// email templates\n\t$result_stmt = Database::prepare(\"\n\t\tSELECT `language`, `varname`, `value` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\tWHERE `adminid` = :adminid AND `id` = :subjectid\");\n\tDatabase::pexecute($result_stmt, [\n\t\t'adminid' => $userinfo['adminid'],\n\t\t'subjectid' => $subjectid\n\t]);\n\t$result = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\n\tif ($result['varname'] != '') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t$subject = Validate::validate($_POST['subject'], 'subject', '/^[^\\r\\n\\0]+$/', 'nosubjectcreate');\n\t\t\t$mailbody = Validate::validate($_POST['mailbody'], 'mailbody', '/^[^\\0]+$/', 'nomailbodycreate');\n\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_TEMPLATES . \"` SET\n\t\t\t\t\t`value` = :value\n\t\t\t\tWHERE `adminid` = :adminid AND `id` = :id\");\n\t\t\t// subject\n\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t'value' => $subject,\n\t\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t\t'id' => $subjectid\n\t\t\t]);\n\t\t\t// same query but mailbody\n\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t'value' => $mailbody,\n\t\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t\t'id' => $mailbodyid\n\t\t\t]);\n\n\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"edited template '\" . $result['varname'] . \"'\");\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\t\t\t$template_name = lng('admin.templates.' . str_replace('_subject', '', $result['varname']));\n\t\t\t$subject = $result['value'];\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT `language`, `varname`, `value`\n\t\t\t\tFROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\t\tWHERE `id` = :id\");\n\t\t\tDatabase::pexecute($result_stmt, [\n\t\t\t\t'id' => $mailbodyid\n\t\t\t]);\n\t\t\t$result = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\t\t$template = str_replace('_mailbody', '', $result['varname']);\n\n\t\t\t// don't escape the already escaped language-string so save up before htmlentities()\n\t\t\t$language = $result['language'];\n\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\t\t\t$mailbody = $result['value'];\n\n\t\t\t$template_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/templates/formfield.template_edit.php';\n\n\t\t\tUI::view('user/form-replacers.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'templates']),\n\t\t\t\t'formdata' => $template_edit_data['template_edit'],\n\t\t\t\t'replacers' => $template_edit_data['template_replacers']\n\t\t\t]);\n\t\t}\n\t}\n} elseif ($action == 'editf' && $id != 0) {\n\t// file templates\n\t$result_stmt = Database::prepare(\"\n\t\tSELECT * FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\tWHERE `adminid` = :adminid AND `id` = :id\");\n\tDatabase::pexecute($result_stmt, [\n\t\t'adminid' => $userinfo['adminid'],\n\t\t'id' => $id\n\t]);\n\n\tif (Database::num_rows() > 0) {\n\t\t$row = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\t// filetemplates\n\t\tif (isset($_POST['filesend']) && $_POST['filesend'] == 'filesend') {\n\t\t\t$filecontent = Validate::validate($_POST['filecontent'], 'filecontent', '/^[^\\0]+$/', 'filecontentnotset');\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_TEMPLATES . \"` SET\n\t\t\t\t\t`value` = :value\n\t\t\t\tWHERE `adminid` = :adminid AND `id` = :id\");\n\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t'value' => $filecontent,\n\t\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t\t'id' => $id\n\t\t\t]);\n\n\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"edited template '\" . $row['varname'] . \"'\");\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$row = PhpHelper::htmlentitiesArray($row);\n\n\t\t\t$filetemplate_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/templates/formfield.filetemplate_edit.php';\n\n\t\t\tUI::view('user/form-replacers.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'templates']),\n\t\t\t\t'formdata' => $filetemplate_edit_data['filetemplate_edit'],\n\t\t\t\t'replacers' => $filetemplate_edit_data['filetemplate_replacers'],\n\t\t\t\t'editid' => $id\n\t\t\t]);\n\t\t}\n\t} else {\n\t\tResponse::standardError('templatenotfound');\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Traffic\\Traffic;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$range = Request::get('range', 'currentmonth');\n\nif ($page == 'overview' || $page == 'customers') {\n\ttry {\n\t\t$context = Traffic::getCustomerStats($userinfo, $range);\n\t} catch (Exception $e) {\n\t\tif ($e->getCode() === 405) {\n\t\t\tResponse::dynamicError(lng('traffic.nocustomers'));\n\t\t}\n\t\tResponse::dynamicError($e->getMessage());\n\t}\n\n\t// pass metrics to the view\n\tUI::view('user/traffic.html.twig', $context);\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nif (!defined('AREA')) {\n\theader(\"Location: index.php\");\n\texit();\n}\n\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n// redirect if this customer has no permission for API usage\nif ($userinfo['adminsession'] == 0 && $userinfo['api_allowed'] == 0) {\n\tResponse::redirectTo('customer_index.php');\n}\n// redirect if this admin has no permission for API usage\nif ($userinfo['adminsession'] == 1 && $userinfo['api_allowed'] == 0) {\n\tResponse::redirectTo('admin_index.php');\n}\n\n// This file is being included in admin_index and customer_index\n// and therefore does not need to require lib/init.php\n\n$del_stmt = Database::prepare(\"DELETE FROM `\" . TABLE_API_KEYS . \"` WHERE id = :id\");\n$id = (int)Request::get('id');\n\n// do the delete and then just show a success-message and the apikeys list again\nif ($action == 'delete' && $id > 0) {\n\tHTML::askYesNo('apikey_reallydelete', $filename, [\n\t\t'id' => $id,\n\t\t'page' => $page,\n\t\t'action' => 'deletesure'\n\t], '', [\n\t\t'section' => 'index',\n\t\t'page' => $page\n\t]);\n} elseif (isset($_POST['send']) && $_POST['send'] == 'send' && $action == 'deletesure' && $id > 0) {\n\t$chk = (AREA == 'admin' && $userinfo['customers_see_all'] == '1') ? true : false;\n\tif (AREA == 'customer') {\n\t\t$chk_stmt = Database::prepare(\"\n\t\t\t\tSELECT c.customerid FROM `\" . TABLE_PANEL_CUSTOMERS . \"` c\n\t\t\t\tLEFT JOIN `\" . TABLE_API_KEYS . \"` ak ON ak.customerid = c.customerid\n\t\t\t\tWHERE ak.`id` = :id AND c.`customerid` = :cid\n\t\t\t\");\n\t\t$chk = Database::pexecute_first($chk_stmt, [\n\t\t\t'id' => $id,\n\t\t\t'cid' => $userinfo['customerid']\n\t\t]);\n\t} elseif (AREA == 'admin' && $userinfo['customers_see_all'] == '0') {\n\t\t$chk_stmt = Database::prepare(\"\n\t\t\t\tSELECT a.adminid FROM `\" . TABLE_PANEL_ADMINS . \"` a\n\t\t\t\tLEFT JOIN `\" . TABLE_API_KEYS . \"` ak ON ak.adminid = a.adminid\n\t\t\t\tWHERE ak.`id` = :id AND a.`adminid` = :aid\n\t\t\t\");\n\t\t$chk = Database::pexecute_first($chk_stmt, [\n\t\t\t'id' => $id,\n\t\t\t'aid' => $userinfo['adminid']\n\t\t]);\n\t}\n\tif ($chk !== false) {\n\t\tDatabase::pexecute($del_stmt, [\n\t\t\t'id' => $id\n\t\t]);\n\t\tResponse::standardSuccess('apikeys.apikey_removed', $id, [\n\t\t\t'filename' => $filename,\n\t\t\t'page' => $page\n\t\t]);\n\t}\n} elseif ($action == 'add') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$ins_stmt = Database::prepare(\"\n\t\t\tINSERT INTO `\" . TABLE_API_KEYS . \"` SET\n\t\t\t`apikey` = :key, `secret` = :secret, `adminid` = :aid, `customerid` = :cid, `valid_until` = '-1', `allowed_from` = ''\n\t\t\");\n\t\t// customer generates for himself, admins will see a customer-select-box later\n\t\tif (AREA == 'admin') {\n\t\t\t$cid = 0;\n\t\t} elseif (AREA == 'customer') {\n\t\t\t$cid = $userinfo['customerid'];\n\t\t}\n\t\t$key = hash('sha256', openssl_random_pseudo_bytes(64 * 64));\n\t\t$secret = hash('sha512', openssl_random_pseudo_bytes(64 * 64 * 4));\n\t\tDatabase::pexecute($ins_stmt, [\n\t\t\t'key' => $key,\n\t\t\t'secret' => $secret,\n\t\t\t'aid' => $userinfo['adminid'],\n\t\t\t'cid' => $cid\n\t\t]);\n\t\tResponse::standardSuccess('apikeys.apikey_added', '', [\n\t\t\t'filename' => $filename,\n\t\t\t'page' => $page\n\t\t]);\n\t}\n\tHTML::askYesNo('apikey_reallyadd', $filename, [\n\t\t'id' => $id,\n\t\t'page' => $page,\n\t\t'action' => $action\n\t], '', [\n\t\t'section' => 'index',\n\t\t'page' => $page\n\t]);\n\texit;\n}\n\n$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"viewed api::api_keys\");\n\n// select all my (accessible) api-keys\n$keys_stmt_query = \"SELECT ak.*, c.loginname, a.loginname as adminname\n\tFROM `\" . TABLE_API_KEYS . \"` ak\n\tLEFT JOIN `\" . TABLE_PANEL_CUSTOMERS . \"` c ON `c`.`customerid` = `ak`.`customerid`\n\tLEFT JOIN `\" . TABLE_PANEL_ADMINS . \"` a ON `a`.`adminid` = `ak`.`adminid`\n\tWHERE \";\n\n$qry_params = [];\nif (AREA == 'admin' && $userinfo['customers_see_all'] == '0') {\n\t// admin with only customer-specific permissions\n\t$keys_stmt_query .= \"ak.adminid = :adminid \";\n\t$qry_params['adminid'] = $userinfo['adminid'];\n\t$fields = [\n\t\t'a.loginname' => lng('login.username')\n\t];\n} elseif (AREA == 'customer') {\n\t// customer-area\n\t$keys_stmt_query .= \"ak.customerid = :cid \";\n\t$qry_params['cid'] = $userinfo['customerid'];\n\t$fields = [\n\t\t'c.loginname' => lng('login.username')\n\t];\n} else {\n\t// admin who can see all customers / reseller / admins\n\t$keys_stmt_query .= \"1 \";\n\t$fields = [\n\t\t'a.loginname' => lng('login.username')\n\t];\n}\n\n//$keys_stmt_query .= $paging->getSqlWhere(true) . \" \" . $paging->getSqlOrderBy() . \" \" . $paging->getSqlLimit();\n\n$keys_stmt = Database::prepare($keys_stmt_query);\nDatabase::pexecute($keys_stmt, $qry_params);\n$all_keys = $keys_stmt->fetchAll(PDO::FETCH_ASSOC);\n\n$apikeys_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/tablelisting.apikeys.php';\n$collection = [\n\t'data' => $all_keys,\n\t'pagination' => []\n];\n\n$tpl = 'user/table.html.twig';\n\nUI::view($tpl, [\n\t'listing' => Listing::formatFromArray($collection, $apikeys_list_data['apikeys_list'], 'apikeys_list'),\n\t'actions_links' => (int)$userinfo['api_allowed'] == 1 ? [\n\t\t[\n\t\t\t'href' => $linker->getLink(['section' => 'index', 'page' => $page, 'action' => 'add']),\n\t\t\t'label' => lng('apikeys.key_add')\n\t\t]\n\t] : null,\n]);\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'customer';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\SubDomains as SubDomains;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Domain\\Domain;\nuse Froxlor\\FileDir;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Validate;\nuse Froxlor\\CurrentUser;\n\n// redirect if this customer page is hidden via settings\nif (Settings::IsInList('panel.customer_hide_options', 'domains')) {\n\tResponse::redirectTo('customer_index.php');\n}\n\n$id = (int)Request::get('id');\n\nif ($page == 'overview' || $page == 'domains') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"viewed customer_domains::domains\");\n\n\t\t$parentdomain_id = (int)Request::get('pid', '0');\n\n\t\ttry {\n\t\t\t$domain_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/customer/tablelisting.domains.php';\n\t\t\t$collection = (new Collection(SubDomains::class, $userinfo))\n\t\t\t\t->withPagination($domain_list_data['domain_list']['columns'], $domain_list_data['domain_list']['default_sorting']);\n\t\t\t$parentDomainCollection = (new Collection(SubDomains::class, $userinfo, ['sql_search' => ['d.parentdomainid' => 0]]));\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\t$actions_links = false;\n\t\tif (CurrentUser::canAddResource('subdomains')) {\n\t\t\t$actions_links = [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'domains', 'page' => 'domains', 'action' => 'add']),\n\t\t\t\t\t'label' => lng('domains.subdomain_add')\n\t\t\t\t]\n\t\t\t];\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $domain_list_data, 'domain_list'),\n\t\t\t'actions_links' => $actions_links,\n\t\t\t'entity_info' => lng('domains.description')\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = SubDomains::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\t$alias_stmt = Database::prepare(\"SELECT COUNT(`id`) AS `count` FROM `\" . TABLE_PANEL_DOMAINS . \"` WHERE `aliasdomain` = :aliasdomain\");\n\t\t$alias_check = Database::pexecute_first($alias_stmt, [\n\t\t\t\"aliasdomain\" => $id\n\t\t]);\n\n\t\tif (isset($result['parentdomainid']) && $result['parentdomainid'] != '0' && $alias_check['count'] == 0) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tSubDomains::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('domains_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $idna_convert->decode($result['domain']));\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('domains_cantdeletemaindomain');\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif ($userinfo['subdomains_used'] < $userinfo['subdomains'] || $userinfo['subdomains'] == '-1') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tSubDomains::getLocal($userinfo, $_POST)->add();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$stmt = Database::prepare(\"SELECT `id`, `domain`, `documentroot`, `ssl_redirect`,`isemaildomain`,`letsencrypt` FROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\t\t\tWHERE `customerid` = :customerid\n\t\t\t\t\tAND `parentdomainid` = '0'\n\t\t\t\t\tAND `email_only` = '0'\n\t\t\t\t\tAND `caneditdomain` = '1'\n\t\t\t\t\tORDER BY `domain` ASC\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t\"customerid\" => $userinfo['customerid']\n\t\t\t\t]);\n\t\t\t\t$domains = [];\n\t\t\t\twhile ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$domains[$row['domain']] = $idna_convert->decode($row['domain']);\n\t\t\t\t}\n\n\t\t\t\t$aliasdomains[0] = lng('domains.noaliasdomain');\n\t\t\t\t$domains_stmt = Database::prepare(\"SELECT `d`.`id`, `d`.`domain` FROM `\" . TABLE_PANEL_DOMAINS . \"` `d`, `\" . TABLE_PANEL_CUSTOMERS . \"` `c`\n\t\t\t\t\tWHERE `d`.`aliasdomain` IS NULL\n\t\t\t\t\tAND `d`.`id` <> `c`.`standardsubdomain`\n\t\t\t\t\tAND `d`.`parentdomainid` = '0'\n\t\t\t\t\tAND `d`.`customerid`=`c`.`customerid`\n\t\t\t\t\tAND `d`.`email_only`='0'\n\t\t\t\t\tAND `d`.`customerid`= :customerid\n\t\t\t\t\tORDER BY `d`.`domain` ASC\");\n\t\t\t\tDatabase::pexecute($domains_stmt, [\n\t\t\t\t\t\"customerid\" => $userinfo['customerid']\n\t\t\t\t]);\n\n\t\t\t\twhile ($row_domain = $domains_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$aliasdomains[$row_domain['id']] = $idna_convert->decode($row_domain['domain']);\n\t\t\t\t}\n\n\t\t\t\t$redirectcode = [];\n\t\t\t\tif (Settings::Get('customredirect.enabled') == '1') {\n\t\t\t\t\t$codes = Domain::getRedirectCodesArray();\n\t\t\t\t\tforeach ($codes as $rc) {\n\t\t\t\t\t\t$redirectcode[$rc['id']] = $rc['code'] . ' (' . lng('redirect_desc.' . $rc['desc']) . ')';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// check if we at least have one ssl-ip/port, #1179\n\t\t\t\t$ssl_ipsandports = false;\n\t\t\t\t$ssl_ip_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT COUNT(*) as countSSL\n\t\t\t\t\tFROM `\" . TABLE_PANEL_IPSANDPORTS . \"` pip\n\t\t\t\t\tLEFT JOIN `\" . TABLE_DOMAINTOIP . \"` dti ON dti.id_ipandports = pip.id\n\t\t\t\t\tWHERE pip.`ssl`='1'\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($ssl_ip_stmt);\n\t\t\t\t$resultX = $ssl_ip_stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\tif (isset($resultX['countSSL']) && (int)$resultX['countSSL'] > 0) {\n\t\t\t\t\t$ssl_ipsandports = true;\n\t\t\t\t}\n\n\t\t\t\t$openbasedir = [\n\t\t\t\t\t0 => lng('domain.docroot'),\n\t\t\t\t\t1 => lng('domain.homedir'),\n\t\t\t\t\t2 => lng('domain.docparent')\n\t\t\t\t];\n\t\t\t\t$pathSelect = FileDir::makePathfield($userinfo['documentroot'], $userinfo['guid'], $userinfo['guid']);\n\n\t\t\t\t$phpconfigs = [];\n\t\t\t\tif (isset($userinfo['allowed_phpconfigs']) && !empty($userinfo['allowed_phpconfigs'])) {\n\t\t\t\t\t$allowed_cfg = json_decode($userinfo['allowed_phpconfigs'], JSON_OBJECT_AS_ARRAY);\n\t\t\t\t\t$phpconfigs_result_stmt = Database::query(\"\n\t\t\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\t\t\tWHERE c.id IN (\" . implode(\", \", $allowed_cfg) . \")\n\t\t\t\t\t\");\n\t\t\t\t\twhile ($phpconfigs_row = $phpconfigs_result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t\t\t$phpconfigs[$phpconfigs_row['id']] = $phpconfigs_row['description'] . \" [\" . $phpconfigs_row['interpreter'] . \"]\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$phpconfigs[$phpconfigs_row['id']] = $phpconfigs_row['description'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$subdomain_add_data = include_once dirname(__FILE__) . '/lib/formfields/customer/domains/formfield.domains_add.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'domains']),\n\t\t\t\t\t'formdata' => $subdomain_add_data['domain_add']\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = SubDomains::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['customerid']) && $result['customerid'] == $userinfo['customerid']) {\n\n\t\t\tif ((int) $result['caneditdomain'] == 0) {\n\t\t\t\tResponse::standardError('domaincannotbeedited', $result['domain']);\n\t\t\t}\n\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tSubDomains::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$result['domain'] = $idna_convert->decode($result['domain']);\n\n\t\t\t\t$domains[0] = lng('domains.noaliasdomain');\n\t\t\t\t// also check ip/port combination to be the same, #176\n\t\t\t\t$domains_stmt = Database::prepare(\"SELECT `d`.`id`, `d`.`domain` FROM `\" . TABLE_PANEL_DOMAINS . \"` `d` , `\" . TABLE_PANEL_CUSTOMERS . \"` `c` , `\" . TABLE_DOMAINTOIP . \"` `dip`\n\t\t\t\t\tWHERE `d`.`aliasdomain` IS NULL\n\t\t\t\t\tAND `d`.`id` <> :id\n\t\t\t\t\tAND `c`.`standardsubdomain` <> `d`.`id`\n\t\t\t\t\tAND `d`.`parentdomainid` = '0'\n\t\t\t\t\tAND `d`.`customerid` = :customerid\n\t\t\t\t\tAND `c`.`customerid` = `d`.`customerid`\n\t\t\t\t\tAND `d`.`id` = `dip`.`id_domain`\n\t\t\t\t\tAND `dip`.`id_ipandports`\n\t\t\t\t\tIN (SELECT `id_ipandports` FROM `\" . TABLE_DOMAINTOIP . \"`\n\t\t\t\t\t\tWHERE `id_domain` = :id)\n\t\t\t\t\tGROUP BY `d`.`id`, `d`.`domain`\n\t\t\t\t\tORDER BY `d`.`domain` ASC\");\n\t\t\t\tDatabase::pexecute($domains_stmt, [\n\t\t\t\t\t\"id\" => $result['id'],\n\t\t\t\t\t\"customerid\" => $userinfo['customerid']\n\t\t\t\t]);\n\n\t\t\t\twhile ($row_domain = $domains_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$domains[$row_domain['id']] = $idna_convert->decode($row_domain['domain']);\n\t\t\t\t}\n\n\t\t\t\tif (preg_match('/^https?\\:\\/\\//', $result['documentroot']) && Validate::validateUrl($result['documentroot'])) {\n\t\t\t\t\tif (Settings::Get('panel.pathedit') == 'Dropdown') {\n\t\t\t\t\t\t$urlvalue = $result['documentroot'];\n\t\t\t\t\t\t$pathSelect = FileDir::makePathfield($userinfo['documentroot'], $userinfo['guid'], $userinfo['guid']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$urlvalue = '';\n\t\t\t\t\t\t$pathSelect = FileDir::makePathfield($userinfo['documentroot'], $userinfo['guid'], $userinfo['guid'], $result['documentroot'], true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$urlvalue = '';\n\t\t\t\t\t$pathSelect = FileDir::makePathfield($userinfo['documentroot'], $userinfo['guid'], $userinfo['guid'], $result['documentroot']);\n\t\t\t\t}\n\n\t\t\t\t$redirectcode = [];\n\t\t\t\tif (Settings::Get('customredirect.enabled') == '1') {\n\t\t\t\t\t$def_code = Domain::getDomainRedirectId($id);\n\t\t\t\t\t$codes = Domain::getRedirectCodesArray();\n\t\t\t\t\tforeach ($codes as $rc) {\n\t\t\t\t\t\t$redirectcode[$rc['id']] = $rc['code'] . ' (' . lng('redirect_desc.' . $rc['desc']) . ')';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// check if we at least have one ssl-ip/port, #1179\n\t\t\t\t$ssl_ipsandports = false;\n\t\t\t\t$ssl_ip_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT COUNT(*) as countSSL\n\t\t\t\t\tFROM `\" . TABLE_PANEL_IPSANDPORTS . \"` pip\n\t\t\t\t\tLEFT JOIN `\" . TABLE_DOMAINTOIP . \"` dti ON dti.id_ipandports = pip.id\n\t\t\t\t\tWHERE `dti`.`id_domain` = :id_domain AND pip.`ssl`='1'\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($ssl_ip_stmt, [\n\t\t\t\t\t\"id_domain\" => $result['id']\n\t\t\t\t]);\n\t\t\t\t$resultX = $ssl_ip_stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\tif (isset($resultX['countSSL']) && (int)$resultX['countSSL'] > 0) {\n\t\t\t\t\t$ssl_ipsandports = true;\n\t\t\t\t}\n\n\t\t\t\t// Fudge the result for ssl_redirect to hide the Let's Encrypt steps\n\t\t\t\t$result['temporary_ssl_redirect'] = $result['ssl_redirect'];\n\t\t\t\t$result['ssl_redirect'] = ($result['ssl_redirect'] == 0 ? 0 : 1);\n\n\t\t\t\t$openbasedir = [\n\t\t\t\t\t0 => lng('domain.docroot'),\n\t\t\t\t\t1 => lng('domain.homedir'),\n\t\t\t\t\t2 => lng('domain.docparent')\n\t\t\t\t];\n\n\t\t\t\t// create serveralias options\n\t\t\t\t$serveraliasoptions = [];\n\t\t\t\t$serveraliasoptions_selected = '2';\n\t\t\t\tif ($result['iswildcarddomain'] == '1') {\n\t\t\t\t\t$serveraliasoptions_selected = '0';\n\t\t\t\t} elseif ($result['wwwserveralias'] == '1') {\n\t\t\t\t\t$serveraliasoptions_selected = '1';\n\t\t\t\t}\n\t\t\t\t$serveraliasoptions[0] = lng('domains.serveraliasoption_wildcard');\n\t\t\t\t$serveraliasoptions[1] = lng('domains.serveraliasoption_www');\n\t\t\t\t$serveraliasoptions[2] = lng('domains.serveraliasoption_none');\n\n\t\t\t\t$ips_stmt = Database::prepare(\"SELECT `p`.`ip` AS `ip` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` `p`\n\t\t\t\t\tLEFT JOIN `\" . TABLE_DOMAINTOIP . \"` `dip`\n\t\t\t\t\tON ( `dip`.`id_ipandports` = `p`.`id` )\n\t\t\t\t\tWHERE `dip`.`id_domain` = :id_domain\n\t\t\t\t\tGROUP BY `p`.`ip`\");\n\t\t\t\tDatabase::pexecute($ips_stmt, [\n\t\t\t\t\t\"id_domain\" => $result['id']\n\t\t\t\t]);\n\t\t\t\t$domainips = [];\n\t\t\t\twhile ($rowip = $ips_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$domainips[] = ['item' => $rowip['ip']];\n\t\t\t\t}\n\n\t\t\t\t$phpconfigs = [];\n\t\t\t\tif (isset($userinfo['allowed_phpconfigs']) && !empty($userinfo['allowed_phpconfigs'])) {\n\t\t\t\t\t$allowed_cfg = json_decode($userinfo['allowed_phpconfigs'], JSON_OBJECT_AS_ARRAY);\n\t\t\t\t\t$phpconfigs_result_stmt = Database::query(\"\n\t\t\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\t\t\tWHERE c.id IN (\" . implode(\", \", $allowed_cfg) . \")\n\t\t\t\t\t\");\n\t\t\t\t\twhile ($phpconfigs_row = $phpconfigs_result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t\t\t$phpconfigs[$phpconfigs_row['id']] = $phpconfigs_row['description'] . \" [\" . $phpconfigs_row['interpreter'] . \"]\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$phpconfigs[$phpconfigs_row['id']] = $phpconfigs_row['description'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$alias_stmt = Database::prepare(\"SELECT COUNT(`id`) AS count FROM `\" . TABLE_PANEL_DOMAINS . \"` WHERE `aliasdomain`= :aliasdomain\");\n\t\t\t\t$alias_check = Database::pexecute_first($alias_stmt, [\n\t\t\t\t\t\"aliasdomain\" => $result['id']\n\t\t\t\t]);\n\t\t\t\t$alias_check = $alias_check['count'];\n\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$subdomain_edit_data = include_once dirname(__FILE__) . '/lib/formfields/customer/domains/formfield.domains_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'domains', 'id' => $id]),\n\t\t\t\t\t'formdata' => $subdomain_edit_data['domain_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('domains_canteditdomain');\n\t\t}\n\t}\n} elseif ($page == 'domainssleditor') {\n\trequire_once __DIR__ . '/ssl_editor.php';\n} elseif ($page == 'domaindnseditor' && $userinfo['dnsenabled'] == '1' && Settings::Get('system.dnsenabled') == '1') {\n\trequire_once __DIR__ . '/dns_editor.php';\n} elseif ($page == 'sslcertificates') {\n\trequire_once __DIR__ . '/ssl_certificates.php';\n} elseif ($page == 'logfiles') {\n\trequire_once __DIR__ . '/logfiles_viewer.php';\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'customer';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\EmailAccounts as EmailAccounts;\nuse Froxlor\\Api\\Commands\\EmailForwarders as EmailForwarders;\nuse Froxlor\\Api\\Commands\\Emails as Emails;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Check;\nuse Froxlor\\CurrentUser;\n\n// redirect if this customer page is hidden via settings\nif (Settings::IsInList('panel.customer_hide_options', 'email') || $userinfo['emails'] == 0) {\n\tResponse::redirectTo('customer_index.php');\n}\n\n$id = (int)Request::get('id');\n\nif ($page == 'overview' || $page == 'emails') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"viewed customer_email::emails\");\n\n\t\ttry {\n\t\t\t$email_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/customer/tablelisting.emails.php';\n\t\t\t$collection = (new Collection(Emails::class, $userinfo))\n\t\t\t\t->withPagination($email_list_data['email_list']['columns'], $email_list_data['email_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT COUNT(`id`) as emaildomains\n\t\t\tFROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\tWHERE `customerid`= :cid AND `isemaildomain` = '1'\n\t\t\");\n\t\t$result2 = Database::pexecute_first($result_stmt, [\n\t\t\t\"cid\" => $userinfo['customerid']\n\t\t]);\n\t\t$emaildomains_count = $result2['emaildomains'];\n\n\t\t$actions_links = false;\n\t\tif (CurrentUser::canAddResource('emails')) {\n\t\t\t$actions_links = [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'email', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('emails.emails_add')\n\t\t\t\t]\n\t\t\t];\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $email_list_data, 'email_list'),\n\t\t\t'actions_links' => $actions_links,\n\t\t\t'entity_info' => lng('emails.description')\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Emails::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['email']) && $result['email'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tEmails::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $id,\n\t\t\t\t\t\t'delete_userfiles' => ($_POST['delete_userfiles'] ?? 0)\n\t\t\t\t\t])->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tif ($result['popaccountid'] != '0') {\n\t\t\t\t\t$show_checkbox = true;\n\t\t\t\t} else {\n\t\t\t\t\t$show_checkbox = false;\n\t\t\t\t}\n\t\t\t\tHTML::askYesNoWithCheckbox('email_reallydelete', 'admin_customer_alsoremovemail', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $idna_convert->decode($result['email_full']), $show_checkbox);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif ($userinfo['emails_used'] < $userinfo['emails'] || $userinfo['emails'] == '-1') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\t$json_result = Emails::getLocal($userinfo, $_POST)->add();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\t$result = json_decode($json_result, true)['data'];\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t'id' => $result['id']\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$result_stmt = Database::prepare(\"SELECT `id`, `domain`, `customerid` FROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\t\t\tWHERE `customerid`= :cid\n\t\t\t\t\tAND `isemaildomain`='1'\n\t\t\t\t\tORDER BY `domain_ace` ASC\");\n\t\t\t\tDatabase::pexecute($result_stmt, [\n\t\t\t\t\t\"cid\" => $userinfo['customerid']\n\t\t\t\t]);\n\t\t\t\t$domains = [];\n\t\t\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$domains[$row['domain']] = $idna_convert->decode($row['domain']);\n\t\t\t\t}\n\n\t\t\t\tif (count($domains) > 0) {\n\t\t\t\t\t$email_add_data = include_once dirname(__FILE__) . '/lib/formfields/customer/email/formfield.emails_add.php';\n\n\t\t\t\t\tif (Settings::Get('catchall.catchall_enabled') != '1') {\n\t\t\t\t\t\tunset($email_add_data['emails_add']['sections']['section_a']['fields']['iscatchall']);\n\t\t\t\t\t}\n\t\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'email']),\n\t\t\t\t\t\t'formdata' => $email_add_data['emails_add']\n\t\t\t\t\t]);\n\t\t\t\t} else {\n\t\t\t\t\tResponse::standardError('emails.noemaildomainaddedyet');\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('allresourcesused');\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Emails::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['email']) && $result['email'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t}\n\t\t\t$result['email'] = $idna_convert->decode($result['email']);\n\t\t\t$result['email_full'] = $idna_convert->decode($result['email_full']);\n\t\t\t$result['destination'] = explode(' ', $result['destination']);\n\t\t\tuasort($result['destination'], 'strcasecmp');\n\t\t\t$forwarders = [];\n\t\t\t$forwarders_count = 0;\n\n\t\t\tforeach ($result['destination'] as $dest_id => $destination) {\n\t\t\t\t$destination = $idna_convert->decode($destination);\n\t\t\t\tif ($destination != $result['email_full'] && $destination != '') {\n\t\t\t\t\t$forwarders[] = [\n\t\t\t\t\t\t'item' => $destination,\n\t\t\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t\t\t'section' => 'email',\n\t\t\t\t\t\t\t'page' => 'forwarders',\n\t\t\t\t\t\t\t'action' => 'delete',\n\t\t\t\t\t\t\t'id' => $id,\n\t\t\t\t\t\t\t'forwarderid' => $dest_id\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t'label' => lng('panel.delete'),\n\t\t\t\t\t\t'classes' => 'btn btn-sm btn-danger'\n\t\t\t\t\t];\n\t\t\t\t\t$forwarders_count++;\n\t\t\t\t}\n\t\t\t\t$result['destination'][$dest_id] = $destination;\n\t\t\t}\n\n\t\t\t$destinations_count = count($result['destination']);\n\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t$email_edit_data = include_once dirname(__FILE__) . '/lib/formfields/customer/email/formfield.emails_edit.php';\n\n\t\t\tif (Settings::Get('catchall.catchall_enabled') != '1') {\n\t\t\t\tunset($email_edit_data['emails_edit']['sections']['section_a']['fields']['mail_catchall']);\n\t\t\t}\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'email']),\n\t\t\t\t'formdata' => $email_edit_data['emails_edit'],\n\t\t\t\t'editid' => $id\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'togglecatchall' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Emails::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\ttry {\n\t\t\tEmails::getLocal($userinfo, [\n\t\t\t\t'id' => $id,\n\t\t\t\t'iscatchall' => ($result['iscatchall'] == '1' ? 0 : 1)\n\t\t\t])->update();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\tResponse::redirectTo($filename, [\n\t\t\t'page' => $page,\n\t\t\t'action' => 'edit',\n\t\t\t'id' => $id\n\t\t]);\n\t}\n} elseif ($page == 'accounts') {\n\tif ($action == 'add' && $id != 0) {\n\t\tif ($userinfo['email_accounts'] == '-1' || ($userinfo['email_accounts_used'] < $userinfo['email_accounts'])) {\n\t\t\ttry {\n\t\t\t\t$json_result = Emails::getLocal($userinfo, [\n\t\t\t\t\t'id' => $id\n\t\t\t\t])->get();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\t$result = json_decode($json_result, true)['data'];\n\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tEmailAccounts::getLocal($userinfo, $_POST)->add();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t'id' => $id\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tif (Check::checkMailAccDeletionState($result['email_full'])) {\n\t\t\t\t\tResponse::standardError([\n\t\t\t\t\t\t'mailaccistobedeleted'\n\t\t\t\t\t], $result['email_full']);\n\t\t\t\t}\n\n\t\t\t\t$result['email_full'] = $idna_convert->decode($result['email_full']);\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\t\t\t\t$quota = Settings::Get('system.mail_quota');\n\n\t\t\t\t$account_add_data = include_once dirname(__FILE__) . '/lib/formfields/customer/email/formfield.emails_addaccount.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'email', 'id' => $id]),\n\t\t\t\t\t'formdata' => $account_add_data['emails_addaccount'],\n\t\t\t\t\t'actions_links' => [\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'class' => 'btn-secondary',\n\t\t\t\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t\t\t\t'section' => 'email',\n\t\t\t\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t'label' => lng('emails.emails_edit'),\n\t\t\t\t\t\t\t'icon' => 'fa-solid fa-pen'\n\t\t\t\t\t\t],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'class' => 'btn-secondary',\n\t\t\t\t\t\t\t'href' => $linker->getLink(['section' => 'email', 'page' => 'emails']),\n\t\t\t\t\t\t\t'label' => lng('menue.email.emails'),\n\t\t\t\t\t\t\t'icon' => 'fa-solid fa-envelope'\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t]);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError([\n\t\t\t\t'allresourcesused',\n\t\t\t\t'allocatetoomuchquota'\n\t\t\t], $quota);\n\t\t}\n\t} elseif ($action == 'changepw' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Emails::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['popaccountid']) && $result['popaccountid'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tEmailAccounts::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t'id' => $id\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$result['email_full'] = $idna_convert->decode($result['email_full']);\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$account_changepw_data = include_once dirname(__FILE__) . '/lib/formfields/customer/email/formfield.emails_accountchangepasswd.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'email', 'id' => $id]),\n\t\t\t\t\t'formdata' => $account_changepw_data['emails_accountchangepasswd'],\n\t\t\t\t\t'actions_links' => [\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'class' => 'btn-secondary',\n\t\t\t\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t\t\t\t'section' => 'email',\n\t\t\t\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t'label' => lng('emails.emails_edit'),\n\t\t\t\t\t\t\t'icon' => 'fa-solid fa-pen'\n\t\t\t\t\t\t],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'class' => 'btn-secondary',\n\t\t\t\t\t\t\t'href' => $linker->getLink(['section' => 'email', 'page' => 'emails']),\n\t\t\t\t\t\t\t'label' => lng('menue.email.emails'),\n\t\t\t\t\t\t\t'icon' => 'fa-solid fa-envelope'\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'changequota' && Settings::Get('system.mail_quota_enabled') == '1' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Emails::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['popaccountid']) && $result['popaccountid'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tEmailAccounts::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t'id' => $id\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$result['email_full'] = $idna_convert->decode($result['email_full']);\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$quota_edit_data = include_once dirname(__FILE__) . '/lib/formfields/customer/email/formfield.emails_accountchangequota.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'email', 'id' => $id]),\n\t\t\t\t\t'formdata' => $quota_edit_data['emails_accountchangequota'],\n\t\t\t\t\t'actions_links' => [\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'class' => 'btn-secondary',\n\t\t\t\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t\t\t\t'section' => 'email',\n\t\t\t\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t'label' => lng('emails.emails_edit'),\n\t\t\t\t\t\t\t'icon' => 'fa-solid fa-pen'\n\t\t\t\t\t\t],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'class' => 'btn-secondary',\n\t\t\t\t\t\t\t'href' => $linker->getLink(['section' => 'email', 'page' => 'emails']),\n\t\t\t\t\t\t\t'label' => lng('menue.email.emails'),\n\t\t\t\t\t\t\t'icon' => 'fa-solid fa-envelope'\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Emails::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['popaccountid']) && $result['popaccountid'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tEmailAccounts::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t'id' => $id\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNoWithCheckbox('email_reallydelete_account', 'admin_customer_alsoremovemail', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $idna_convert->decode($result['email_full']));\n\t\t\t}\n\t\t}\n\t}\n} elseif ($page == 'forwarders') {\n\tif ($action == 'add' && $id != 0) {\n\t\tif ($userinfo['email_forwarders_used'] < $userinfo['email_forwarders'] || $userinfo['email_forwarders'] == '-1') {\n\t\t\ttry {\n\t\t\t\t$json_result = Emails::getLocal($userinfo, [\n\t\t\t\t\t'id' => $id\n\t\t\t\t])->get();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\t$result = json_decode($json_result, true)['data'];\n\n\t\t\tif (isset($result['email']) && $result['email'] != '') {\n\t\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tEmailForwarders::getLocal($userinfo, $_POST)->add();\n\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t\t}\n\t\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t]);\n\t\t\t\t} else {\n\t\t\t\t\t$result['email_full'] = $idna_convert->decode($result['email_full']);\n\t\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t\t$forwarder_add_data = include_once dirname(__FILE__) . '/lib/formfields/customer/email/formfield.emails_addforwarder.php';\n\n\t\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'email', 'id' => $id]),\n\t\t\t\t\t\t'formdata' => $forwarder_add_data['emails_addforwarder'],\n\t\t\t\t\t\t'actions_links' => [\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t'class' => 'btn-secondary',\n\t\t\t\t\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t\t\t\t\t'section' => 'email',\n\t\t\t\t\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t'label' => lng('emails.emails_edit'),\n\t\t\t\t\t\t\t\t'icon' => 'fa-solid fa-pen'\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t'class' => 'btn-secondary',\n\t\t\t\t\t\t\t\t'href' => $linker->getLink(['section' => 'email', 'page' => 'emails']),\n\t\t\t\t\t\t\t\t'label' => lng('menue.email.emails'),\n\t\t\t\t\t\t\t\t'icon' => 'fa-solid fa-envelope'\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('allresourcesused');\n\t\t}\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Emails::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['destination']) && $result['destination'] != '') {\n\t\t\tif (isset($_POST['forwarderid'])) {\n\t\t\t\t$forwarderid = intval($_POST['forwarderid']);\n\t\t\t} elseif (isset($_GET['forwarderid'])) {\n\t\t\t\t$forwarderid = intval($_GET['forwarderid']);\n\t\t\t} else {\n\t\t\t\t$forwarderid = 0;\n\t\t\t}\n\n\t\t\t$result['destination'] = explode(' ', $result['destination']);\n\n\t\t\tif (isset($result['destination'][$forwarderid]) && $result['email'] != $result['destination'][$forwarderid]) {\n\t\t\t\t$forwarder = $result['destination'][$forwarderid];\n\n\t\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tEmailForwarders::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t\t}\n\t\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t]);\n\t\t\t\t} else {\n\t\t\t\t\tHTML::askYesNo('email_reallydelete_forwarder', $filename, [\n\t\t\t\t\t\t'id' => $id,\n\t\t\t\t\t\t'forwarderid' => $forwarderid,\n\t\t\t\t\t\t'page' => $page,\n\t\t\t\t\t\t'action' => $action\n\t\t\t\t\t], $idna_convert->decode($result['email_full']) . ' -> ' . $idna_convert->decode($forwarder));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'customer';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\CustomerBackups as CustomerBackups;\nuse Froxlor\\Api\\Commands\\DirOptions as DirOptions;\nuse Froxlor\\Api\\Commands\\DirProtections as DirProtections;\nuse Froxlor\\Customer\\Customer;\nuse Froxlor\\FileDir;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n// redirect if this customer page is hidden via settings\nif (Settings::IsInList('panel.customer_hide_options', 'extras')) {\n\tResponse::redirectTo('customer_index.php');\n}\n\n$id = (int)Request::get('id');\n\nif ($page == 'overview' || $page == 'htpasswds') {\n\t// redirect if this customer sub-page is hidden via settings\n\tif (Settings::IsInList('panel.customer_hide_options', 'extras.directoryprotection')) {\n\t\tResponse::redirectTo('customer_index.php');\n\t}\n\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"viewed customer_extras::htpasswds\");\n\t\t$fields = [\n\t\t\t'username' => lng('login.username'),\n\t\t\t'path' => lng('panel.path')\n\t\t];\n\t\ttry {\n\t\t\t$htpasswd_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/customer/tablelisting.htpasswd.php';\n\t\t\t$collection = (new Collection(DirProtections::class, $userinfo))\n\t\t\t\t->withPagination($htpasswd_list_data['htpasswd_list']['columns'], $htpasswd_list_data['htpasswd_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $htpasswd_list_data, 'htpasswd_list'),\n\t\t\t'actions_links' => [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'extras', 'page' => 'htpasswds', 'action' => 'add']),\n\t\t\t\t\t'label' => lng('extras.directoryprotection_add')\n\t\t\t\t]\n\t\t\t],\n\t\t\t'entity_info' => lng('extras.description')\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = DirProtections::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['username']) && $result['username'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tDirProtections::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tif (strpos($result['path'], $userinfo['documentroot']) === 0) {\n\t\t\t\t\t$result['path'] = str_replace($userinfo['documentroot'], \"/\", $result['path']);\n\t\t\t\t}\n\n\t\t\t\tHTML::askYesNo('extras_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['username'] . ' (' . $result['path'] . ')');\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tDirProtections::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$pathSelect = FileDir::makePathfield($userinfo['documentroot'], $userinfo['guid'], $userinfo['guid']);\n\n\t\t\t$htpasswd_add_data = include_once dirname(__FILE__) . '/lib/formfields/customer/extras/formfield.htpasswd_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'extras']),\n\t\t\t\t'formdata' => $htpasswd_add_data['htpasswd_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = DirProtections::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['username']) && $result['username'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tDirProtections::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tif (strpos($result['path'], $userinfo['documentroot']) === 0) {\n\t\t\t\t\t$result['path'] = str_replace($userinfo['documentroot'], \"/\", $result['path']);\n\t\t\t\t}\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$htpasswd_edit_data = include_once dirname(__FILE__) . '/lib/formfields/customer/extras/formfield.htpasswd_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'extras', 'id' => $id]),\n\t\t\t\t\t'formdata' => $htpasswd_edit_data['htpasswd_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n} elseif ($page == 'htaccess') {\n\t// redirect if this customer sub-page is hidden via settings\n\tif (Settings::IsInList('panel.customer_hide_options', 'extras.pathoptions')) {\n\t\tResponse::redirectTo('customer_index.php');\n\t}\n\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"viewed customer_extras::htaccess\");\n\n\t\t$cperlenabled = Customer::customerHasPerlEnabled($userinfo['customerid']);\n\n\t\ttry {\n\t\t\t$htaccess_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/customer/tablelisting.htaccess.php';\n\t\t\t$collection = (new Collection(DirOptions::class, $userinfo))\n\t\t\t\t->withPagination($htaccess_list_data['htaccess_list']['columns'], $htaccess_list_data['htaccess_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $htaccess_list_data, 'htaccess_list'),\n\t\t\t'actions_links' => [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'extras', 'page' => 'htaccess', 'action' => 'add']),\n\t\t\t\t\t'label' => lng('extras.pathoptions_add')\n\t\t\t\t]\n\t\t\t],\n\t\t\t'entity_info' => lng('extras.description')\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = DirOptions::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['customerid']) && $result['customerid'] != '' && $result['customerid'] == $userinfo['customerid']) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tDirOptions::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('extras_reallydelete_pathoptions', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], str_replace($userinfo['documentroot'], '/', $result['path']));\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tDirOptions::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$pathSelect = FileDir::makePathfield($userinfo['documentroot'], $userinfo['guid'], $userinfo['guid']);\n\t\t\t$cperlenabled = Customer::customerHasPerlEnabled($userinfo['customerid']);\n\n\t\t\t$htaccess_add_data = include_once dirname(__FILE__) . '/lib/formfields/customer/extras/formfield.htaccess_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'extras']),\n\t\t\t\t'formdata' => $htaccess_add_data['htaccess_add']\n\t\t\t]);\n\t\t}\n\t} elseif (($action == 'edit') && ($id != 0)) {\n\t\ttry {\n\t\t\t$json_result = DirOptions::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ((isset($result['customerid'])) && ($result['customerid'] != '') && ($result['customerid'] == $userinfo['customerid'])) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tDirOptions::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tif (strpos($result['path'], $userinfo['documentroot']) === 0) {\n\t\t\t\t\t$result['path'] = str_replace($userinfo['documentroot'], \"/\", $result['path']);\n\t\t\t\t}\n\t\t\t\t$cperlenabled = Customer::customerHasPerlEnabled($userinfo['customerid']);\n\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$htaccess_edit_data = include_once dirname(__FILE__) . '/lib/formfields/customer/extras/formfield.htaccess_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'extras', 'id' => $id]),\n\t\t\t\t\t'formdata' => $htaccess_edit_data['htaccess_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n} elseif ($page == 'backup') {\n\t// redirect if this customer sub-page is hidden via settings\n\tif (Settings::IsInList('panel.customer_hide_options', 'extras.backup')) {\n\t\tResponse::redirectTo('customer_index.php');\n\t}\n\n\tif (Settings::Get('system.backupenabled') == 1) {\n\t\tif ($action == 'abort') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\t$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"customer_extras::backup - aborted scheduled backupjob\");\n\t\t\t\ttry {\n\t\t\t\t\tCustomerBackups::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => ''\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('extras_reallydelete_backup', $filename, [\n\t\t\t\t\t'backup_job_entry' => $id,\n\t\t\t\t\t'section' => 'extras',\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t]);\n\t\t\t}\n\t\t} elseif ($action == '') {\n\t\t\t$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"viewed customer_extras::backup\");\n\n\t\t\t// check whether there is a backup-job for this customer\n\t\t\ttry {\n\t\t\t\t$backup_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/customer/tablelisting.backups.php';\n\t\t\t\t$collection = (new Collection(CustomerBackups::class, $userinfo));\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tCustomerBackups::getLocal($userinfo, $_POST)->add();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::standardSuccess('backupscheduled');\n\t\t\t} else {\n\t\t\t\t$pathSelect = FileDir::makePathfield($userinfo['documentroot'], $userinfo['guid'], $userinfo['guid']);\n\t\t\t\t$backup_data = include_once dirname(__FILE__) . '/lib/formfields/customer/extras/formfield.backup.php';\n\n\t\t\t\tUI::view('user/form-datatable.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'extras']),\n\t\t\t\t\t'formdata' => $backup_data['backup'],\n\t\t\t\t\t'tabledata' => Listing::format($collection, $backup_list_data, 'backup_list'),\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tResponse::standardError('backupfunctionnotenabled');\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'customer';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Ftps as Ftps;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FileDir;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\CurrentUser;\n\n// redirect if this customer page is hidden via settings\nif (Settings::IsInList('panel.customer_hide_options', 'ftp') || $userinfo['ftps'] == 0) {\n\tResponse::redirectTo('customer_index.php');\n}\n\n$id = (int)Request::get('id', 0);\n\nif ($page == 'overview' || $page == 'accounts') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"viewed customer_ftp::accounts\");\n\t\ttry {\n\t\t\t$ftp_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/customer/tablelisting.ftps.php';\n\t\t\t$collection = (new Collection(Ftps::class, $userinfo))\n\t\t\t\t->withPagination($ftp_list_data['ftp_list']['columns'], $ftp_list_data['ftp_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\t$actions_links = false;\n\t\tif (CurrentUser::canAddResource('ftps')) {\n\t\t\t$actions_links = [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'ftp', 'page' => 'accounts', 'action' => 'add']),\n\t\t\t\t\t'label' => lng('ftp.account_add')\n\t\t\t\t]\n\t\t\t];\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $ftp_list_data, 'ftp_list'),\n\t\t\t'actions_links' => $actions_links,\n\t\t\t'entity_info' => lng('ftp.description')\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Ftps::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['username']) && $result['username'] != $userinfo['loginname']) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tFtps::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNoWithCheckbox('ftp_reallydelete', 'admin_customer_alsoremoveftphomedir', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['username']);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('ftp_cantdeletemainaccount');\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif ($userinfo['ftps_used'] < $userinfo['ftps'] || $userinfo['ftps'] == '-1') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tFtps::getLocal($userinfo, $_POST)->add();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$pathSelect = FileDir::makePathfield($userinfo['documentroot'], $userinfo['guid'], $userinfo['guid'], '/');\n\n\t\t\t\tif (Settings::Get('customer.ftpatdomain') == '1') {\n\t\t\t\t\t$domainlist = [];\n\t\t\t\t\t$result_domains_stmt = Database::prepare(\"SELECT `domain` FROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\t\t\t\tWHERE `customerid`= :customerid\");\n\t\t\t\t\tDatabase::pexecute($result_domains_stmt, [\n\t\t\t\t\t\t\"customerid\" => $userinfo['customerid']\n\t\t\t\t\t]);\n\n\t\t\t\t\twhile ($row_domain = $result_domains_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t\t$domainlist[$row_domain['domain']] = $idna_convert->decode($row_domain['domain']);\n\t\t\t\t\t}\n\t\t\t\t\tsort($domainlist);\n\t\t\t\t}\n\n\t\t\t\tif (Settings::Get('system.allow_customer_shell') == '1') {\n\t\t\t\t\t$shells['/bin/false'] = \"/bin/false\";\n\t\t\t\t\t$shells_avail = Settings::Get('system.available_shells');\n\t\t\t\t\tif (!empty($shells_avail)) {\n\t\t\t\t\t\t$shells_avail_arr = explode(\",\", $shells_avail);\n\t\t\t\t\t\t$shells_avail_arr = array_map(\"trim\", $shells_avail_arr);\n\t\t\t\t\t\tforeach ($shells_avail_arr as $shell) {\n\t\t\t\t\t\t\t$shells[$shell] = $shell;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$ftp_add_data = include_once dirname(__FILE__) . '/lib/formfields/customer/ftp/formfield.ftp_add.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'ftp']),\n\t\t\t\t\t'formdata' => $ftp_add_data['ftp_add']\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Ftps::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['username']) && $result['username'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tFtps::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tif (strpos($result['homedir'], $userinfo['documentroot']) === 0) {\n\t\t\t\t\t$homedir = str_replace($userinfo['documentroot'], \"/\", $result['homedir']);\n\t\t\t\t} else {\n\t\t\t\t\t$homedir = $result['homedir'];\n\t\t\t\t}\n\t\t\t\t$homedir = FileDir::makeCorrectDir($homedir);\n\n\t\t\t\t$pathSelect = FileDir::makePathfield($userinfo['documentroot'], $userinfo['guid'], $userinfo['guid'], $homedir);\n\n\t\t\t\tif (Settings::Get('system.allow_customer_shell') == '1') {\n\t\t\t\t\t$shells['/bin/false'] = \"/bin/false\";\n\t\t\t\t\t$shells_avail = Settings::Get('system.available_shells');\n\t\t\t\t\tif (!empty($shells_avail)) {\n\t\t\t\t\t\t$shells_avail_arr = explode(\",\", $shells_avail);\n\t\t\t\t\t\t$shells_avail_arr = array_map(\"trim\", $shells_avail_arr);\n\t\t\t\t\t\tforeach ($shells_avail_arr as $shell) {\n\t\t\t\t\t\t\t$shells[$shell] = $shell;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$ftp_edit_data = include_once dirname(__FILE__) . '/lib/formfields/customer/ftp/formfield.ftp_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'ftp', 'id' => $id]),\n\t\t\t\t\t'formdata' => $ftp_edit_data['ftp_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'customer';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Mysqls;\nuse Froxlor\\Api\\Commands\\MysqlServer;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\CurrentUser;\n\n// redirect if this customer page is hidden via settings or no resources given\nif (Settings::IsInList('panel.customer_hide_options', 'mysql') || $userinfo['mysqls'] == 0) {\n\tResponse::redirectTo('customer_index.php');\n}\n\n// get sql-root access data\nDatabase::needRoot(true);\nDatabase::needSqlData();\n$sql_root = Database::getSqlData();\nDatabase::needRoot(false);\n\n$id = (int)Request::get('id');\n\nif ($page == 'overview' || $page == 'mysqls') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"viewed customer_mysql::mysqls\");\n\n\t\t$multiple_mysqlservers = count(json_decode($userinfo['allowed_mysqlserver'] ?? '[]', true)) > 1;\n\n\t\ttry {\n\t\t\t$mysql_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/customer/tablelisting.mysqls.php';\n\t\t\t$collection = (new Collection(Mysqls::class, $userinfo))\n\t\t\t\t->withPagination($mysql_list_data['mysql_list']['columns'], $mysql_list_data['mysql_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\t$actions_links = false;\n\t\tif (CurrentUser::canAddResource('mysqls')) {\n\t\t\t$actions_links = [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'mysql', 'page' => 'mysqls', 'action' => 'add']),\n\t\t\t\t\t'label' => lng('mysql.database_create')\n\t\t\t\t]\n\t\t\t];\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $mysql_list_data, 'mysql_list'),\n\t\t\t'actions_links' => $actions_links,\n\t\t\t'entity_info' => lng('mysql.description')\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Mysqls::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['databasename']) && $result['databasename'] != '') {\n\t\t\tDatabase::needRoot(true, $result['dbserver']);\n\t\t\tDatabase::needSqlData();\n\t\t\t$sql_root = Database::getSqlData();\n\t\t\tDatabase::needRoot(false);\n\n\t\t\tif (!isset($sql_root[$result['dbserver']]) || !is_array($sql_root[$result['dbserver']])) {\n\t\t\t\t$result['dbserver'] = 0;\n\t\t\t}\n\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tMysqls::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$dbnamedesc = $result['databasename'];\n\t\t\t\tif (isset($result['description']) && $result['description'] != '') {\n\t\t\t\t\t$dbnamedesc .= ' (' . $result['description'] . ')';\n\t\t\t\t}\n\t\t\t\tHTML::askYesNo('mysql_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $dbnamedesc);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif ($userinfo['mysqls_used'] < $userinfo['mysqls'] || $userinfo['mysqls'] == '-1') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tMysqls::getLocal($userinfo, $_POST)->add();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$mysql_servers = [];\n\t\t\t\ttry {\n\t\t\t\t\t$result_json = MysqlServer::getLocal($userinfo)->listing();\n\t\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\t\tforeach ($result_decoded as $dbserver => $dbdata) {\n\t\t\t\t\t\t$mysql_servers[$dbserver] = $dbdata['caption'];\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t/* just none */\n\t\t\t\t}\n\n\t\t\t\t$mysql_add_data = include_once dirname(__FILE__) . '/lib/formfields/customer/mysql/formfield.mysql_add.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'mysql']),\n\t\t\t\t\t'formdata' => $mysql_add_data['mysql_add']\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Mysqls::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['databasename']) && $result['databasename'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\t$json_result = Mysqls::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$mysql_servers = [];\n\t\t\t\ttry {\n\t\t\t\t\t$result_json = MysqlServer::getLocal($userinfo)->listing();\n\t\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\t\tforeach ($result_decoded as $dbserver => $dbdata) {\n\t\t\t\t\t\t$mysql_servers[$dbserver] = $dbdata['caption'] . ' (' . $dbdata['host'] . (isset($dbdata['port']) && !empty($dbdata['port']) ? ':' . $dbdata['port'] : '').')';\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t/* just none */\n\t\t\t\t}\n\n\t\t\t\t$mysql_edit_data = include_once dirname(__FILE__) . '/lib/formfields/customer/mysql/formfield.mysql_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'mysql', 'id' => $id]),\n\t\t\t\t\t'formdata' => $mysql_edit_data['mysql_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'customer';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Traffic\\Traffic;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n// redirect if this customer page is hidden via settings\nif (Settings::IsInList('panel.customer_hide_options', 'traffic')) {\n\tResponse::redirectTo('customer_index.php');\n}\n\n$range = Request::get('range', 'currentyear');\n\nif ($page == 'current') {\n\t$range = 'currentmonth';\n}\n\ntry {\n\t$context = Traffic::getCustomerStats($userinfo, $range);\n} catch (Exception $e) {\n\tResponse::dynamicError($e->getMessage());\n}\n\n// pass metrics to the view\nUI::view('user/traffic.html.twig', $context);\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nif (!defined('AREA')) {\n\theader(\"Location: index.php\");\n\texit();\n}\n\nuse Froxlor\\Api\\Commands\\DomainZones;\nuse Froxlor\\Dns\\Dns;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n// This file is being included in admin_domains and customer_domains\n// and therefore does not need to require lib/init.php\n\n$domain_id = (int)Request::get('domain_id');\n\n$record = isset($_POST['dns_record']) ? trim($_POST['dns_record']) : null;\n$type = isset($_POST['dns_type']) ? $_POST['dns_type'] : 'A';\n$prio = isset($_POST['dns_mxp']) ? (int)$_POST['dns_mxp'] : null;\n$content = isset($_POST['dns_content']) ? trim($_POST['dns_content']) : null;\n$ttl = isset($_POST['dns_ttl']) ? (int)$_POST['dns_ttl'] : 18000;\n\n// get domain-name\n$domain = Dns::getAllowedDomainEntry($domain_id, AREA, $userinfo);\n\n$errors = \"\";\n$success_message = \"\";\n\n// action for adding a new entry\nif ($action == 'add_record' && !empty($_POST)) {\n\ttry {\n\t\tDomainZones::getLocal($userinfo, [\n\t\t\t'id' => $domain_id,\n\t\t\t'record' => $record,\n\t\t\t'type' => $type,\n\t\t\t'prio' => $prio,\n\t\t\t'content' => $content,\n\t\t\t'ttl' => $ttl\n\t\t])->add();\n\t\t$success_message = lng('success.dns_record_added');\n\t\t$record = $prio = $content = \"\";\n\t} catch (Exception $e) {\n\t\t$errors = str_replace(\"\\n\", \"<br>\", $e->getMessage());\n\t}\n} elseif ($action == 'delete') {\n\t$entry_id = isset($_GET['id']) ? (int)$_GET['id'] : 0;\n\tHTML::askYesNo('dnsentry_reallydelete', $filename, [\n\t\t'id' => $entry_id,\n\t\t'domain_id' => $domain_id,\n\t\t'page' => $page,\n\t\t'action' => 'deletesure'\n\t], '', [\n\t\t'section' => 'domains',\n\t\t'page' => $page,\n\t\t'domain_id' => $domain_id\n\t]);\n} elseif (isset($_POST['send']) && $_POST['send'] == 'send' && $action == 'deletesure' && !empty($_POST)) {\n\t$entry_id = isset($_POST['id']) ? (int)$_POST['id'] : 0;\n\t$domain_id = isset($_POST['domain_id']) ? (int)$_POST['domain_id'] : 0;\n\t// remove entry\n\tif ($entry_id > 0 && $domain_id > 0) {\n\t\ttry {\n\t\t\tDomainZones::getLocal($userinfo, [\n\t\t\t\t'entry_id' => $entry_id,\n\t\t\t\t'id' => $domain_id\n\t\t\t])->delete();\n\t\t\t// success message (inline)\n\t\t\t$success_message = lng('success.dns_record_deleted');\n\t\t} catch (Exception $e) {\n\t\t\t$errors = str_replace(\"\\n\", \"<br>\", $e->getMessage());\n\t\t}\n\t}\n}\n\n// select all entries\ntry {\n\t$dns_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/tablelisting.dns.php';\n\t$collection = (new Collection(DomainZones::class, $userinfo, ['id' => $domain_id]))\n\t\t->withPagination($dns_list_data['dns_list']['columns'], $dns_list_data['dns_list']['default_sorting']);\n} catch (Exception $e) {\n\tResponse::dynamicError($e->getMessage());\n}\n\ntry {\n\t$json_result = DomainZones::getLocal($userinfo, [\n\t\t'id' => $domain_id\n\t])->get();\n} catch (Exception $e) {\n\tResponse::dynamicError($e->getMessage());\n}\n$result = json_decode($json_result, true)['data'];\n$zonefile = implode(\"\\n\", $result);\n\n$dns_add_data = include_once dirname(__FILE__) . '/lib/formfields/formfield.dns_add.php';\n\nUI::view('user/dns-editor.html.twig', [\n\t'listing' => Listing::format($collection, $dns_list_data, 'dns_list', ['domain_id' => $domain_id]),\n\t'actions_links' => [\n\t\t[\n\t\t\t'href' => $linker->getLink([\n\t\t\t\t'section' => 'domains',\n\t\t\t\t'page' => 'domains',\n\t\t\t\t'action' => 'edit',\n\t\t\t\t'id' => $domain_id\n\t\t\t]),\n\t\t\t'label' => lng('admin.domain_edit'),\n\t\t\t'icon' => 'fa-solid fa-pen'\n\t\t],\n\t\t[\n\t\t\t'href' => $linker->getLink(['section' => 'domains', 'page' => 'domains']),\n\t\t\t'label' => lng('panel.backtooverview'),\n\t\t\t'icon' => 'fa-solid fa-reply'\n\t\t]\n\t],\n\t'formaction' => $linker->getLink(['section' => 'domains', 'action' => 'add_record', 'domain_id' => $domain_id]),\n\t'formdata' => $dns_add_data['dns_add'],\n\t// alert-box\n\t'type' => (!empty($errors) ? 'danger' : (!empty($success_message) ? 'success' : 'warning')),\n\t'alert_msg' => (!empty($errors) ? $errors : (!empty($success_message) ? $success_message : lng('dns.howitworks'))),\n\t'zonefile' => $zonefile,\n]);\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nif (!defined('AREA')) {\n\theader(\"Location: index.php\");\n\texit();\n}\n\nuse Froxlor\\FileDir;\nuse Froxlor\\Froxlor;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n// This file is being included in admin_domains and customer_domains\n// and therefore does not need to require lib/init.php\n\n$errid = Request::get('errorid');\n\nif (!empty($errid)) {\n\t// read error file\n\t$err_dir = FileDir::makeCorrectDir(Froxlor::getInstallDir() . \"/logs/\");\n\t$err_file = FileDir::makeCorrectFile($err_dir . \"/\" . $errid . \"_sql-error.log\");\n\n\tif (file_exists($err_file)) {\n\t\t$error_content = file_get_contents($err_file);\n\t\t$error = explode(\"|\", $error_content);\n\n\t\t$_error = [\n\t\t\t'code' => str_replace(\"\\n\", \"\", substr($error[1], 5)),\n\t\t\t'message' => str_replace(\"\\n\", \"\", substr($error[2], 4)),\n\t\t\t'file' => str_replace(\"\\n\", \"\", substr($error[3], 5 + strlen(Froxlor::getInstallDir()))),\n\t\t\t'line' => str_replace(\"\\n\", \"\", substr($error[4], 5)),\n\t\t\t'trace' => str_replace(Froxlor::getInstallDir(), \"\", substr($error[5], 6))\n\t\t];\n\n\t\t// build mail-content\n\t\t$mail_body = \"Dear froxlor-team,\\n\\n\";\n\t\t$mail_body .= \"the following error has been reported by a user:\\n\\n\";\n\t\t$mail_body .= \"-------------------------------------------------------------\\n\";\n\t\t$mail_body .= $_error['code'] . ' ' . $_error['message'] . \"\\n\\n\";\n\t\t$mail_body .= \"File: \" . $_error['file'] . ':' . $_error['line'] . \"\\n\\n\";\n\t\t$mail_body .= \"Trace:\\n\" . trim($_error['trace']) . \"\\n\\n\";\n\t\t$mail_body .= \"-------------------------------------------------------------\\n\\n\";\n\t\t$mail_body .= \"User-Area: \" . AREA . \"\\n\";\n\t\t$mail_body .= \"Froxlor-version: \" . Froxlor::VERSION . \"\\n\";\n\t\t$mail_body .= \"DB-version: \" . Froxlor::DBVERSION . \"\\n\\n\";\n\t\t$mail_body .= \"End of report\";\n\t\t$mail_html = nl2br($mail_body);\n\n\t\t// send actual report to dev-team\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t// send mail and say thanks\n\t\t\t$_mailerror = false;\n\t\t\ttry {\n\t\t\t\t$mail->Subject = '[Froxlor] Error report by user';\n\t\t\t\t$mail->AltBody = $mail_body;\n\t\t\t\t$mail->MsgHTML($mail_html);\n\t\t\t\t$mail->AddAddress('error-reports@froxlor.org', 'Froxlor Developer Team');\n\t\t\t\t$mail->Send();\n\t\t\t} catch (\\PHPMailer\\PHPMailer\\Exception $e) {\n\t\t\t\t$mailerr_msg = $e->errorMessage();\n\t\t\t\t$_mailerror = true;\n\t\t\t} catch (Exception $e) {\n\t\t\t\t$mailerr_msg = $e->getMessage();\n\t\t\t\t$_mailerror = true;\n\t\t\t}\n\n\t\t\tif ($_mailerror) {\n\t\t\t\t// error when reporting an error...LOLFUQ\n\t\t\t\tResponse::standardError('send_report_error', $mailerr_msg);\n\t\t\t}\n\n\t\t\t// finally remove error from fs\n\t\t\t@unlink($err_file);\n\t\t\tResponse::standardSuccess('sent_error_report', '', ['filename' => 'index.php']);\n\t\t}\n\t\t// show a nice summary of the error-report\n\t\t// before actually sending anything\n\t\tUI::view('user/error_report.html.twig', [\n\t\t\t'mail_html' => $mail_body,\n\t\t\t'errorid' => $errid\n\t\t]);\n\t} else {\n\t\tResponse::redirectTo($filename);\n\t}\n} else {\n\tResponse::redirectTo($filename);\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Ajax;\n\nuse Exception;\nuse DateTime;\nuse Froxlor\\Config\\ConfigDisplay;\nuse Froxlor\\Config\\ConfigParser;\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FileDir;\nuse Froxlor\\Froxlor;\nuse Froxlor\\Http\\HttpClient;\nuse Froxlor\\Install\\Update;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Validate;\n\nclass Ajax\n{\n\tprotected string $action;\n\tprotected string $theme;\n\tprotected array $userinfo;\n\n\t/**\n\t * @throws Exception\n\t */\n\tpublic function __construct()\n\t{\n\t\t$this->action = $_GET['action'] ?? $_POST['action'] ?? null;\n\t\t$this->theme = $_GET['theme'] ?? 'Froxlor';\n\n\t\tUI::sendHeaders();\n\t\tUI::sendSslHeaders();\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tpublic function handle()\n\t{\n\t\t$this->userinfo = $this->getValidatedSession();\n\n\t\tswitch ($this->action) {\n\t\t\tcase 'newsfeed':\n\t\t\t\treturn $this->getNewsfeed();\n\t\t\tcase 'updatecheck':\n\t\t\t\treturn $this->getUpdateCheck();\n\t\t\tcase 'searchglobal':\n\t\t\t\treturn $this->searchGlobal();\n\t\t\tcase 'updatetablelisting':\n\t\t\t\treturn $this->updateTablelisting();\n\t\t\tcase 'resettablelisting':\n\t\t\t\treturn $this->resetTablelisting();\n\t\t\tcase 'editapikey':\n\t\t\t\treturn $this->editApiKey();\n\t\t\tcase 'getConfigDetails':\n\t\t\t\treturn $this->getConfigDetails();\n\t\t\tcase 'getConfigJsonExport':\n\t\t\t\treturn $this->getConfigJsonExport();\n\t\t\tcase 'loadLanguageString':\n\t\t\t\treturn $this->loadLanguageString();\n\t\t\tdefault:\n\t\t\t\treturn $this->errorResponse('Action not found!');\n\t\t}\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tprivate function getValidatedSession(): array\n\t{\n\t\tif (CurrentUser::hasSession() == false) {\n\t\t\tthrow new Exception(\"No valid session\");\n\t\t}\n\t\treturn CurrentUser::getData();\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tprivate function getNewsfeed()\n\t{\n\t\tUI::initTwig();\n\n\t\t$feed = \"https://inside.froxlor.org/news/\";\n\n\t\t// Set custom feed if provided\n\t\tif (isset($_GET['role']) && $_GET['role'] == \"customer\") {\n\t\t\t$custom_feed = Settings::Get(\"customer.news_feed_url\");\n\t\t\tif (!empty(trim($custom_feed))) {\n\t\t\t\t$feed = $custom_feed;\n\t\t\t}\n\t\t}\n\n\t\t// Check for simplexml_load_file\n\t\tif (!function_exists(\"simplexml_load_file\")) {\n\t\t\treturn $this->errorResponse([\n\t\t\t\t\"Newsfeed not available due to missing php-simplexml extension\",\n\t\t\t\t\"Please install the php-simplexml extension in order to view our newsfeed.\"\n\t\t\t]);\n\t\t}\n\n\t\t// Check for curl_version\n\t\tif (!function_exists('curl_version')) {\n\t\t\treturn $this->errorResponse([\n\t\t\t\t\"Newsfeed not available due to missing php-curl extension\",\n\t\t\t\t\"Please install the php-curl extension in order to view our newsfeed.\"\n\t\t\t]);\n\t\t}\n\n\t\t$output = HttpClient::urlGet($feed);\n\t\t$news = simplexml_load_string(trim($output));\n\n\t\tif ($news === false) {\n\t\t\t$err = [];\n\t\t\tforeach(libxml_get_errors() as $error) {\n\t\t\t\t$err[] = $error->message;\n\t\t\t}\n\t\t\treturn $this->errorResponse(\n\t\t\t\t$err\n\t\t\t);\n\t\t}\n\n\t\t// Handle items\n\t\tif ($news) {\n\t\t\t$items = null;\n\n\t\t\tfor ($i = 0; $i < 3; $i++) {\n\t\t\t\t$item = $news->channel->item[$i];\n\n\t\t\t\t$title = (string)$item->title;\n\t\t\t\t$link = (string)$item->link;\n\t\t\t\t$date = date(\"d.m.Y\", strtotime($item->pubDate));\n\t\t\t\t$content = preg_replace(\"/[\\r\\n]+/\", \" \", strip_tags($item->description));\n\t\t\t\t$content = substr($content, 0, 150) . \"...\";\n\n\t\t\t\t$items .= UI::twig()->render($this->theme . '/user/newsfeeditem.html.twig', [\n\t\t\t\t\t'link' => $link,\n\t\t\t\t\t'title' => $title,\n\t\t\t\t\t'date' => $date,\n\t\t\t\t\t'content' => $content\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\treturn $this->jsonResponse($items);\n\t\t} else {\n\t\t\treturn $this->errorResponse('No Newsfeeds available at the moment.');\n\t\t}\n\t}\n\n\tpublic function errorResponse($message, int $response_code = 500)\n\t{\n\t\theader(\"Content-Type: application/json\");\n\t\treturn \\Froxlor\\Api\\Response::jsonErrorResponse($message, $response_code);\n\t}\n\n\tpublic function jsonResponse($value, int $response_code = 200)\n\t{\n\t\theader(\"Content-Type: application/json\");\n\t\treturn \\Froxlor\\Api\\Response::jsonResponse($value, $response_code);\n\t}\n\n\tprivate function getUpdateCheck()\n\t{\n\t\tUI::initTwig();\n\n\t\ttry {\n\t\t\t$json_result = \\Froxlor\\Api\\Commands\\Froxlor::getLocal($this->userinfo)->checkUpdate();\n\t\t\t$result = json_decode($json_result, true)['data'];\n\t\t\t$result['full_version'] = Froxlor::getFullVersion();\n\t\t\t$result['dbversion'] = Froxlor::DBVERSION;\n\t\t\t$uc_data = Update::getUpdateCheckData();\n\t\t\t$result['last_update_check'] = $uc_data['ts'];\n\t\t\t$result['channel'] = Settings::Get('system.update_channel');\n\n\t\t\t$result_rendered = UI::twig()->render($this->theme . '/misc/version_top.html.twig', $result);\n\t\t\treturn $this->jsonResponse($result_rendered);\n\t\t} catch (Exception $e) {\n\t\t\t// don't display anything if just not allowed due to permissions\n\t\t\tif ($e->getCode() != 403) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * search globally in various resources\n\t */\n\tprivate function searchGlobal()\n\t{\n\t\t$searchtext = Request::get('searchtext');\n\n\t\t$result = [];\n\n\t\t// settings\n\t\t$result_settings = [];\n\t\tif (isset($this->userinfo['adminsession']) && $this->userinfo['adminsession'] == 1 && $this->userinfo['change_serversettings'] == 1) {\n\t\t\t$result_settings = GlobalSearch::searchSettings($searchtext, $this->userinfo);\n\t\t}\n\n\t\t// all searchable entities\n\t\t$result_entities = GlobalSearch::searchGlobal($searchtext, $this->userinfo);\n\n\t\t$result = array_merge($result_settings, $result_entities);\n\n\t\treturn $this->jsonResponse($result);\n\t}\n\n\tprivate function updateTablelisting()\n\t{\n\t\t$columns = [];\n\t\tforeach ((Request::get('columns') ?? []) as $value) {\n\t\t\t$columns[] = $value;\n\t\t}\n\t\tif (!empty($columns)) {\n\t\t\tListing::storeColumnListingForUser([Request::get('listing') => $columns]);\n\t\t\treturn $this->jsonResponse($columns);\n\t\t}\n\t\treturn $this->errorResponse('At least one column must be selected', 406);\n\t}\n\n\tprivate function resetTablelisting()\n\t{\n\t\tListing::deleteColumnListingForUser([Request::get('listing') => []]);\n\t\treturn $this->jsonResponse([]);\n\t}\n\n\tprivate function editApiKey()\n\t{\n\t\t$keyid = isset($_POST['id']) ? (int)$_POST['id'] : 0;\n\t\t$allowed_from = isset($_POST['allowed_from']) ? $_POST['allowed_from'] : \"\";\n\t\t$valid_until = isset($_POST['valid_until']) ? $_POST['valid_until'] : \"\";\n\n\t\tif (empty($keyid)) {\n\t\t\treturn $this->errorResponse('Invalid call', 406);\n\t\t}\n\n\t\t// validate allowed_from\n\t\tif (!empty($allowed_from)) {\n\t\t\t$ip_list = array_map('trim', explode(\",\", $allowed_from));\n\t\t\t$_check_list = $ip_list;\n\t\t\tforeach ($_check_list as $idx => $ip) {\n\t\t\t\tif (Validate::validate_ip2($ip, true, 'invalidip', true, true, true) == false) {\n\t\t\t\t\treturn $this->errorResponse('Invalid ip address', 406);\n\t\t\t\t}\n\t\t\t\t// check for cidr\n\t\t\t\tif (strpos($ip, '/') !== false) {\n\t\t\t\t\t$ipparts = explode(\"/\", $ip);\n\t\t\t\t\t// shorten IP\n\t\t\t\t\t$ip = inet_ntop(inet_pton($ipparts[0]));\n\t\t\t\t\t// re-add cidr\n\t\t\t\t\t$ip .= '/' . $ipparts[1];\n\t\t\t\t} else {\n\t\t\t\t\t// shorten IP\n\t\t\t\t\t$ip = inet_ntop(inet_pton($ip));\n\t\t\t\t}\n\t\t\t\t$ip_list[$idx] = $ip;\n\t\t\t}\n\t\t\t$allowed_from = implode(\",\", array_unique($ip_list));\n\t\t}\n\n\t\tif (!empty($valid_until)) {\n\t\t\t$valid_until_db = DateTime::createFromFormat('Y-m-d\\TH:i', $valid_until)->format('U');\n\t\t} else {\n\t\t\t$valid_until_db = -1;\n\t\t}\n\n\t\t$upd_stmt = Database::prepare(\"\n\t\t\tUPDATE `\" . TABLE_API_KEYS . \"` SET\n\t\t\t`valid_until` = :vu, `allowed_from` = :af\n\t\t\tWHERE `id` = :keyid AND `adminid` = :aid AND `customerid` = :cid\n\t\t\");\n\t\tif ((int)$this->userinfo['adminsession'] == 1) {\n\t\t\t$cid = 0;\n\t\t} else {\n\t\t\t$cid = $this->userinfo['customerid'];\n\t\t}\n\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t'keyid' => $keyid,\n\t\t\t'af' => $allowed_from,\n\t\t\t'vu' => $valid_until_db,\n\t\t\t'aid' => $this->userinfo['adminid'],\n\t\t\t'cid' => $cid\n\t\t]);\n\t\treturn $this->jsonResponse(['allowed_from' => $allowed_from, 'valid_until' => $valid_until]);\n\t}\n\n\t/**\n\t * return parsed commands/files of configuration templates\n\t */\n\tprivate function getConfigDetails()\n\t{\n\t\tif (isset($this->userinfo['adminsession']) && $this->userinfo['adminsession'] == 1 && $this->userinfo['change_serversettings'] == 1) {\n\t\t\t$distribution = isset($_POST['distro']) ? $_POST['distro'] : \"\";\n\t\t\t$section = isset($_POST['section']) ? $_POST['section'] : \"\";\n\t\t\t$daemon = isset($_POST['daemon']) ? $_POST['daemon'] : \"\";\n\n\t\t\t// validate distribution config-xml exists\n\t\t\t$config_dir = FileDir::makeCorrectDir(Froxlor::getInstallDir() . '/lib/configfiles/');\n\t\t\tif (!file_exists($config_dir . \"/\" . $distribution . \".xml\")) {\n\t\t\t\treturn $this->errorResponse(\"Unknown distribution. The configuration could not be found.\");\n\t\t\t}\n\t\t\t// read in all configurations\n\t\t\t$configfiles = new ConfigParser($config_dir . \"/\" . $distribution . \".xml\");\n\t\t\t// get the services\n\t\t\t$services = $configfiles->getServices();\n\t\t\t// validate selected service exists for this distribution\n\t\t\tif (!isset($services[$section])) {\n\t\t\t\treturn $this->errorResponse(\"Unknown category for selected distribution\");\n\t\t\t}\n\t\t\t// get the daemons\n\t\t\t$daemons = $services[$section]->getDaemons();\n\t\t\t// validate selected daemon exists for this section\n\t\t\tif (!isset($daemons[$daemon])) {\n\t\t\t\treturn $this->errorResponse(\"Unknown service for selected category\");\n\t\t\t}\n\t\t\t// finally the config-steps\n\t\t\t$confarr = $daemons[$daemon]->getConfig();\n\t\t\t// get parsed content\n\t\t\tUI::initTwig();\n\t\t\t$content = ConfigDisplay::fromConfigArr($confarr, $configfiles->distributionEditor, $this->theme);\n\n\t\t\treturn $this->jsonResponse([\n\t\t\t\t'title' => $configfiles->getCompleteDistroName() . '&nbsp;&raquo;&nbsp' . $services[$section]->title . '&nbsp;&raquo;&nbsp' . $daemons[$daemon]->title,\n\t\t\t\t'content' => $content\n\t\t\t]);\n\t\t}\n\t\treturn $this->errorResponse('Not allowed', 403);\n\t}\n\n\t/**\n\t * download JSON export of config-selection\n\t */\n\tprivate function getConfigJsonExport()\n\t{\n\t\tif (isset($this->userinfo['adminsession']) && $this->userinfo['adminsession'] == 1 && $this->userinfo['change_serversettings'] == 1) {\n\t\t\t$params = $_GET;\n\t\t\tunset($params['action']);\n\t\t\tunset($params['finish']);\n\t\t\theader('Content-disposition: attachment; filename=froxlor-config-' . time() . '.json');\n\t\t\treturn $this->jsonResponse($params);\n\t\t}\n\t\treturn $this->errorResponse('Not allowed', 403);\n\t}\n\n\t/**\n\t * loads a given language string by its identifier\n\t */\n\tprivate function loadLanguageString()\n\t{\n\t\t$langid = isset($_POST['langid']) ? $_POST['langid'] : \"\";\n\t\tif (preg_match('/^([a-zA-Z\\.]+)$/', $langid)) {\n\t\t\treturn $this->jsonResponse(lng($langid));\n\t\t}\n\t\treturn $this->errorResponse('Invalid identifier: ' . $langid, 406);\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Install;\n\nuse Exception;\nuse PDO;\nuse Froxlor\\Install\\Install\\Core;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\Config\\ConfigParser;\nuse Froxlor\\Validate\\Validate;\nuse Froxlor\\System\\IPTools;\n\nclass Install\n{\n\tpublic $currentStep;\n\tpublic $extendedView;\n\tpublic $maxSteps;\n\tpublic $phpVersion;\n\tpublic $formfield;\n\tpublic string $requiredVersion = '7.4.0';\n\tpublic array $requiredExtensions = ['session', 'ctype', 'xml', 'filter', 'posix', 'mbstring', 'curl', 'gmp', 'json'];\n\tpublic array $suggestedExtensions = ['bcmath', 'zip'];\n\tpublic array $suggestions = [];\n\tpublic array $criticals = [];\n\tpublic array $loadedExtensions;\n\tpublic array $supportedOS = [];\n\tpublic array $webserverBackend = [\n\t\t'php-fpm' => 'PHP-FPM',\n\t\t'fcgid' => 'FCGID',\n\t\t'mod_php' => 'mod_php (not recommended)',\n\t];\n\n\tpublic function __construct(array $cliData = [])\n\t{\n\t\t// get all supported OS\n\t\t// show list of available distro's\n\t\t$distros = glob(dirname(__DIR__, 3) . '/lib/configfiles/*.xml');\n\t\t$distributions_select[''] = '-';\n\t\t// read in all the distros\n\t\tforeach ($distros as $distribution) {\n\t\t\t// get configparser object\n\t\t\t$dist = new ConfigParser($distribution);\n\t\t\t// store in tmp array\n\t\t\t$this->supportedOS[str_replace(\".xml\", \"\", strtolower(basename($distribution)))] = $dist->getCompleteDistroName();\n\t\t}\n\t\t// sort by distribution name\n\t\tasort($this->supportedOS);\n\n\t\t// guess distribution and webserver to preselect in formfield\n\t\t$webserverBackend = $this->webserverBackend;\n\t\t$supportedOS = $this->supportedOS;\n\t\t$guessedDistribution = $this->guessDistribution();\n\t\t$guessedWebserver = $this->guessWebserver();\n\n\t\t// set formfield, so we can get the fields and steps etc.\n\t\t$this->formfield = require dirname(__DIR__, 3) . '/lib/formfields/install/formfield.install.php';\n\n\t\t// set actual step\n\t\t$this->currentStep = $cliData['step'] ?? Request::get('step', 0);\n\t\t$this->extendedView = $cliData['extended'] ?? Request::get('extended', 0);\n\t\t$this->maxSteps = count($this->formfield['install']['sections']);\n\n\t\t// set actual php version and extensions\n\t\t$this->phpVersion = phpversion();\n\t\t$this->loadedExtensions = get_loaded_extensions();\n\n\t\tif (empty($cliData)) {\n\t\t\t// set global variables\n\t\t\tUI::twig()->addGlobal('install_mode', true);\n\t\t\tUI::twig()->addGlobal('basehref', '../');\n\n\t\t\t// unset session if user goes back to step 0\n\t\t\tif (isset($_SESSION['installation']) && $this->currentStep == 0) {\n\t\t\t\tunset($_SESSION['installation']);\n\t\t\t}\n\n\t\t\t// check for url manipulation or wrong step\n\t\t\tif ((isset($_SESSION['installation']['stepCompleted']) && ($this->currentStep + 1) > ($_SESSION['installation']['stepCompleted'] ?? 0))\n\t\t\t\t|| (!isset($_SESSION['installation']['stepCompleted']) && $this->currentStep > 0)\n\t\t\t) {\n\t\t\t\t$this->currentStep = isset($_SESSION['installation']['stepCompleted']) ? $_SESSION['installation']['stepCompleted'] + 1 : 1;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @return void\n\t * @throws Exception\n\t */\n\tpublic function handle(): void\n\t{\n\t\t// handle form data\n\t\tif (!is_null(Request::get('submit')) && $this->currentStep) {\n\t\t\ttry {\n\t\t\t\t$this->handleFormData($this->formfield['install']);\n\t\t\t} catch (Exception $e) {\n\t\t\t\t$error = $e->getMessage();\n\t\t\t}\n\t\t}\n\n\t\t// load template\n\t\tUI::twigBuffer('/install/index.html.twig', [\n\t\t\t'setup' => [\n\t\t\t\t'step' => $this->currentStep,\n\t\t\t\t'max_steps' => $this->maxSteps,\n\t\t\t],\n\t\t\t'preflight' => $this->checkRequirements(),\n\t\t\t'page' => [\n\t\t\t\t'title' => 'Database',\n\t\t\t\t'description' => 'Test',\n\t\t\t],\n\t\t\t'section' => $this->formfield['install']['sections']['step' . $this->currentStep] ?? [],\n\t\t\t'error' => $error ?? null,\n\t\t\t'extended' => $this->extendedView,\n\t\t]);\n\n\t\t// output view\n\t\tUI::twigOutputBuffer();\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tprivate function handleFormData(array $formfield): void\n\t{\n\t\t// handle current step\n\t\tif ($this->currentStep <= $this->maxSteps) {\n\t\t\t// Validate user data\n\t\t\t$validatedData = $this->validateRequest($formfield['sections']['step' . $this->currentStep]['fields']);\n\t\t\t// Check database connection (\n\t\t\tif ($this->currentStep == 1) {\n\t\t\t\t$this->checkDatabase($validatedData);\n\t\t\t}\n\t\t\t// Check validity of admin user data\n\t\t\telseif ($this->currentStep == 2) {\n\t\t\t\t$this->checkAdminUser($validatedData);\n\t\t\t}\n\t\t\t// Check validity of system data\n\t\t\telseif ($this->currentStep == 3) {\n\t\t\t\t$this->checkSystem($validatedData);\n\t\t\t}\n\t\t\t$validatedData['stepCompleted'] = ($this->currentStep < $this->maxSteps) ? $this->currentStep : ($this->maxSteps - 1);\n\t\t\t// Store validated data for later use\n\t\t\t$_SESSION['installation'] = array_merge($_SESSION['installation'] ?? [], $validatedData);\n\t\t}\n\n\t\t// also handle completion of installation if it's the step before the last step\n\t\tif ($this->currentStep == ($this->maxSteps - 1)) {\n\t\t\t$core = new Core($_SESSION['installation']);\n\t\t\t$core->doInstall();\n\t\t}\n\n\t\t// redirect user to home if the installation is done\n\t\tif ($this->currentStep == $this->maxSteps) {\n\t\t\t// check setting for \"panel.is_configured\" whether user has\n\t\t\t// run the config-services script (or checked the manual mode)\n\t\t\tif ($this->checkInstallStateFinished()) {\n\t\t\t\theader('Location: ../');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow new Exception(lng('install.errors.notyetconfigured'));\n\t\t}\n\n\t\t// redirect to next step\n\t\theader('Location: ?step=' . ($this->currentStep + 1));\n\t}\n\n\tprivate function checkInstallStateFinished(): bool\n\t{\n\t\t$core = new Core($_SESSION['installation']);\n\t\tif (isset($_SESSION['installation']['manual_config']) && (int) $_SESSION['installation']['manual_config'] == 1) {\n\t\t\t$core->createUserdataConf();\n\t\t\treturn true;\n\t\t}\n\t\t$pdo = $core->getUnprivilegedPdo();\n\t\t$stmt = $pdo->prepare(\"SELECT `value` FROM `panel_settings` WHERE `settinggroup` = 'panel' AND `varname` = 'is_configured'\");\n\t\t$stmt->execute();\n\t\t$result = $stmt->fetch(PDO::FETCH_ASSOC);\n\t\tif ($result && (int) $result['value'] == 1) {\n\t\t\t$core->createUserdataConf();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @return array\n\t */\n\tpublic function checkRequirements(): array\n\t{\n\t\t// check whether we can read the userdata file\n\t\tif (!@touch(dirname(__DIR__, 2) . '/.~writecheck')) {\n\t\t\t// get possible owner\n\t\t\t$posixusername = posix_getpwuid(posix_getuid())['name'];\n\t\t\t$posixgroup = posix_getgrgid(posix_getgid())['name'];\n\t\t\t$this->criticals['wrong_ownership'] = ['user' => $posixusername, 'group' => $posixgroup];\n\t\t} else {\n\t\t\t@unlink(dirname(__DIR__, 2) . '/.~writecheck');\n\t\t}\n\n\t\t// check for required extensions\n\t\tforeach ($this->requiredExtensions as $requiredExtension) {\n\t\t\tif (in_array($requiredExtension, $this->loadedExtensions)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$this->criticals['missing_extensions'][] = $requiredExtension;\n\t\t}\n\n\t\t// check for suggested extensions\n\t\tforeach ($this->suggestedExtensions as $suggestedExtension) {\n\t\t\tif (in_array($suggestedExtension, $this->loadedExtensions)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$this->suggestions['missing_extensions'][] = $suggestedExtension;\n\t\t}\n\n\t\treturn [\n\t\t\t'text' => $this->getInformationText(),\n\t\t\t'suggestions' => $this->suggestions,\n\t\t\t'criticals' => $this->criticals,\n\t\t];\n\t}\n\n\t/**\n\t * @return string\n\t */\n\tprivate function getInformationText(): string\n\t{\n\t\tif (version_compare($this->requiredVersion, PHP_VERSION, \"<\")) {\n\t\t\t$text = lng('install.phpinfosuccess', [$this->phpVersion]);\n\t\t} else {\n\t\t\t$text = lng('install.phpinfowarn', [$this->requiredVersion]);\n\t\t\t$this->criticals[] = lng('install.phpinfoupdate', [$this->phpVersion, $this->requiredVersion]);\n\t\t}\n\t\treturn $text;\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tprivate function validateRequest(array $fields): array\n\t{\n\t\t$attributes = [];\n\t\tforeach ($fields as $name => $field) {\n\t\t\t$attributes[$name] = $this->validateAttribute(Request::get($name), $field);\n\t\t\tif (isset($field['next_to'])) {\n\t\t\t\t$attributes = array_merge($attributes, $this->validateRequest($field['next_to']));\n\t\t\t}\n\t\t}\n\t\treturn $attributes;\n\t}\n\n\t/**\n\t * @return mixed\n\t * @throws Exception\n\t */\n\tprivate function validateAttribute($attribute, array $field)\n\t{\n\t\t// TODO: do validations\n\t\tif (isset($field['mandatory']) && $field['mandatory'] && empty($attribute)) {\n\t\t\tthrow new Exception(lng('install.errors.mandatory_field_not_set', [$field['label']]));\n\t\t}\n\t\treturn $attribute;\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tpublic function checkSystem(array $validatedData): void\n\t{\n\t\t$serveripv4 = $validatedData['serveripv4'] ?? '';\n\t\t$serveripv6 = $validatedData['serveripv6'] ?? '';\n\t\t$servername = $validatedData['servername'] ?? '';\n\t\t$httpuser = $validatedData['httpuser'] ?? 'www-data';\n\t\t$httpgroup = $validatedData['httpgroup'] ?? 'www-data';\n\n\t\tif (empty($serveripv4) && empty($serveripv6)) {\n\t\t\tthrow new Exception(lng('install.errors.nov4andnov6ip'));\n\t\t} elseif (!empty($serveripv4) && (!Validate::validate_ip2($serveripv4, true, '', false, true) || IPTools::is_ipv6($serveripv4))) {\n\t\t\tthrow new Exception(lng('error.invalidip', [$serveripv4]));\n\t\t} elseif (!empty($serveripv6) && (!Validate::validate_ip2($serveripv6, true, '', false, true) || IPTools::is_ipv6($serveripv6) == false)) {\n\t\t\tthrow new Exception(lng('error.invalidip', [$serveripv6]));\n\t\t} elseif (!Validate::validateDomain($servername) && !Validate::validateLocalHostname($servername)) {\n\t\t\tthrow new Exception(lng('install.errors.servernameneedstobevalid'));\n\t\t} elseif (posix_getpwnam($httpuser) === false) {\n\t\t\tthrow new Exception(lng('install.errors.websrvuserdoesnotexist'));\n\t\t} elseif (posix_getgrnam($httpgroup) === false) {\n\t\t\tthrow new Exception(lng('install.errors.websrvgrpdoesnotexist'));\n\t\t}\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tpublic function checkAdminUser(array $validatedData): void\n\t{\n\t\t$name = $validatedData['admin_name'] ?? 'Administrator';\n\t\t$loginname = $validatedData['admin_user'] ?? '';\n\t\t$email = $validatedData['admin_email'] ?? '';\n\t\t$password = $validatedData['admin_pass'] ?? '';\n\t\t$password_confirm = $validatedData['admin_pass_confirm'] ?? '';\n\n\t\tif (!preg_match('/^[^\\r\\n\\t\\f\\0]*$/D', $name)) {\n\t\t\tthrow new Exception(lng('error.stringformaterror', ['admin_name']));\n\t\t} elseif (empty(trim($loginname)) || !preg_match('/^[a-z][a-z0-9]+$/', $loginname)) {\n\t\t\tthrow new Exception(lng('error.loginnameiswrong', [$loginname]));\n\t\t} elseif (empty(trim($email)) || !Validate::validateEmail($email)) {\n\t\t\tthrow new Exception(lng('error.emailiswrong', [$email]));\n\t\t} elseif (empty($password) || $password != $password_confirm) {\n\t\t\tthrow new Exception(lng('error.newpasswordconfirmerror'));\n\t\t} elseif ($password == $loginname) {\n\t\t\tthrow new Exception(lng('error.passwordshouldnotbeusername'));\n\t\t}\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tpublic function checkDatabase(array $validatedData): void\n\t{\n\t\t$dsn = sprintf('mysql:host=%s;charset=utf8', $validatedData['mysql_host']);\n\t\t$pdo = new \\PDO($dsn, $validatedData['mysql_root_user'], $validatedData['mysql_root_pass']);\n\n\t\t// check if the database already exist\n\t\t$stmt = $pdo->prepare('SHOW DATABASES LIKE ?');\n\t\t$stmt->execute([\n\t\t\t$validatedData['mysql_database']\n\t\t]);\n\t\t$hasDatabase = $stmt->fetch();\n\t\tif ($hasDatabase && !$validatedData['mysql_force_create']) {\n\t\t\tthrow new Exception(lng('install.errors.databaseexists'));\n\t\t}\n\n\t\t// check if we can create a new database\n\t\t$testDatabase = uniqid('froxlor_tmp_');\n\t\tif ($pdo->exec('CREATE DATABASE IF NOT EXISTS ' . $testDatabase . ';') === false) {\n\t\t\tthrow new Exception(lng('install.errors.unabletocreatedb'));\n\t\t}\n\t\tif ($pdo->exec('DROP DATABASE IF EXISTS ' . $testDatabase . ';') === false) {\n\t\t\tthrow new Exception(lng('install.errors.unabletodropdb'));\n\t\t}\n\n\t\t// check if the user already exist\n\t\t$stmt = $pdo->prepare(\"SELECT `User` FROM `mysql`.`user` WHERE `User` = ?\");\n\t\t$stmt->execute([$validatedData['mysql_unprivileged_user']]);\n\t\tif ($stmt->rowCount() && !$validatedData['mysql_force_create']) {\n\t\t\tthrow new Exception(lng('install.errors.mysqlusernameexists'));\n\t\t}\n\n\t\t// check if we can create a new user\n\t\t$testUser = uniqid('froxlor_tmp_');\n\t\t$stmt = $pdo->prepare('CREATE USER ?@? IDENTIFIED BY ?');\n\t\tif ($stmt->execute([$testUser, $validatedData['mysql_host'], uniqid()]) === false) {\n\t\t\tthrow new Exception(lng('install.errors.unabletocreateuser'));\n\t\t}\n\t\t$stmt = $pdo->prepare('DROP USER ?@?');\n\t\tif ($stmt->execute([$testUser, $validatedData['mysql_host']]) === false) {\n\t\t\tthrow new Exception(lng('install.errors.unabletodropuser'));\n\t\t}\n\t\tif ($pdo->prepare('FLUSH PRIVILEGES')->execute() === false) {\n\t\t\tthrow new Exception(lng('install.errors.unabletoflushprivs'));\n\t\t}\n\t}\n\n\tprivate function guessWebserver(): ?string\n\t{\n\t\tif (strtoupper(@php_sapi_name()) == \"APACHE2HANDLER\" || stristr($_SERVER['SERVER_SOFTWARE'], \"apache\")) {\n\t\t\treturn 'apache24';\n\t\t} elseif (substr(strtoupper(@php_sapi_name()), 0, 8) == \"LIGHTTPD\" || stristr($_SERVER['SERVER_SOFTWARE'], \"lighttpd\")) {\n\t\t\treturn 'lighttpd';\n\t\t} elseif (substr(strtoupper(@php_sapi_name()), 0, 8) == \"NGINX\" || stristr($_SERVER['SERVER_SOFTWARE'], \"nginx\")) {\n\t\t\treturn 'nginx';\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate function guessDistribution(): ?string\n\t{\n\t\t// set default os.\n\t\t$default = 'bullseye';\n\n\t\t// read os-release\n\t\tif (@file_exists('/etc/os-release') && is_readable('/etc/os-release')) {\n\t\t\tif (function_exists('parse_ini_file')) {\n\t\t\t\t$os_dist = parse_ini_file('/etc/os-release', false);\n\t\t\t} else {\n\t\t\t\t$osrf = explode(\"\\n\", file_get_contents('/etc/os-release'));\n\t\t\t\tforeach ($osrf as $line) {\n\t\t\t\t\t$osrfline = explode(\"\\n\", $line);\n\t\t\t\t\tif ($osrfline[0] == 'VERSION_CODENAME') {\n\t\t\t\t\t\t$os_dist['VERSION_CODENAME'] = $osrfline[1];\n\t\t\t\t\t} else if ($osrfline[0] == 'ID') {\n\t\t\t\t\t\t$os_dist['ID'] = $osrfline[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn strtolower($os_dist['VERSION_CODENAME'] ?? ($os_dist['ID'] ?? $default));\n\t\t}\n\t\treturn $default;\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\UI;\n\nuse Froxlor\\PhpHelper;\nuse voku\\helper\\AntiXSS;\n\nclass Request\n{\n\t/**\n\t * Get key from current request.\n\t *\n\t * @param $key\n\t * @param string|null $default\n\t * @return mixed|string|null\n\t */\n\tpublic static function get($key, string $default = null)\n\t{\n\t\tself::cleanAll();\n\n\t\treturn $_GET[$key] ?? $_POST[$key] ?? $default;\n\t}\n\n\t/**\n\t * Check for xss attempts and clean important globals and\n\t * unsetting every variable registered in $_REQUEST and as variable itself\n\t */\n\tpublic static function cleanAll()\n\t{\n\t\tforeach ($_REQUEST as $key => $value) {\n\t\t\tif (isset($$key)) {\n\t\t\t\tunset($$key);\n\t\t\t}\n\t\t}\n\t\tunset($value);\n\n\t\t$antiXss = new AntiXSS();\n\n\t\t// check $_GET\n\t\tPhpHelper::cleanGlobal($_GET, $antiXss);\n\t\t// check $_POST\n\t\tPhpHelper::cleanGlobal($_POST, $antiXss);\n\t\t// check $_COOKIE\n\t\tPhpHelper::cleanGlobal($_COOKIE, $antiXss);\n\t}\n\n\t/**\n\t * Check if key is existing in current request.\n\t *\n\t * @param $key\n\t * @return bool|mixed\n\t */\n\tpublic static function exist($key)\n\t{\n\t\treturn (bool)$_GET[$key] ?? $_POST[$key] ?? false;\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor;\n\nuse Exception;\nuse Froxlor\\Ajax\\Ajax;\n\nrequire_once dirname(__DIR__) . '/vendor/autoload.php';\n\n// Load the user settings\nif (!file_exists('./userdata.inc.php')) {\n\tdie();\n}\nrequire_once dirname(__DIR__) . '/lib/userdata.inc.php';\nrequire_once dirname(__DIR__) . '/lib/functions.php';\nrequire_once dirname(__DIR__) . '/lib/tables.inc.php';\n\n// Return response\ntry {\n\techo (new Ajax)->handle();\n} catch (Exception $e) {\n\techo \\Froxlor\\Api\\Response::jsonErrorResponse($e->getMessage(), 500);\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nuse Froxlor\\Language;\nuse Froxlor\\UI\\Request;\n\nfunction view($template, $attributes)\n{\n\t$view = file_get_contents(dirname(__DIR__) . '/templates/' . $template);\n\n\treturn str_replace(array_keys($attributes), array_values($attributes), $view);\n}\n\nfunction lng(string $identifier, array $arguments = [])\n{\n\treturn Language::getTranslation($identifier, $arguments);\n}\n\nfunction old(string $identifier, string $default = null, string $session = null)\n{\n\tif ($session && isset($_SESSION[$session])) {\n\t\treturn $_SESSION[$session][$identifier] ?? $default;\n\t}\n\treturn Request::get($identifier, $default);\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\n// define default theme for configurehint, etc.\n$_deftheme = 'Froxlor';\n\nrequire dirname(__DIR__) . '/lib/functions.php';\n\n// validate correct php version\nif (version_compare(\"7.4.0\", PHP_VERSION, \">=\")) {\n\tdie(view($_deftheme . '/misc/phprequirementfailed.html.twig', [\n\t\t'{{ basehref }}' => '',\n\t\t'{{ froxlor_min_version }}' => '7.4.0',\n\t\t'{{ current_version }}' => PHP_VERSION,\n\t\t'{{ current_year }}' => date('Y', time()),\n\t]));\n}\n\n// validate vendor autoloader\nif (!file_exists(dirname(__DIR__) . '/vendor/autoload.php')) {\n\tdie(view($_deftheme . '/misc/vendormissinghint.html.twig', [\n\t\t'{{ basehref }}' => '',\n\t\t'{{ froxlor_install_dir }}' => dirname(__DIR__),\n\t\t'{{ current_year }}' => date('Y', time()),\n\t]));\n}\n\nrequire dirname(__DIR__) . '/vendor/autoload.php';\n\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Froxlor;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Idna\\IdnaWrapper;\nuse Froxlor\\Language;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Mailer;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Linker;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Install\\Update;\n\n// include MySQL-tabledefinitions\nrequire Froxlor::getInstallDir() . '/lib/tables.inc.php';\n\nUI::sendHeaders();\nUI::initTwig();\n\n/**\n * Register Globals Security Fix\n */\nRequest::cleanAll();\n\nunset($_);\nunset($key);\n\n$filename = htmlentities(basename($_SERVER['SCRIPT_NAME']));\n\n// check whether the userdata file exists\nif (!file_exists(Froxlor::getInstallDir() . '/lib/userdata.inc.php')) {\n\tUI::twig()->addGlobal('install_mode', '1');\n\techo UI::twig()->render($_deftheme . '/misc/configurehint.html.twig');\n\tdie();\n}\n\n// check whether we can read the userdata file\nif (!is_readable(Froxlor::getInstallDir() . '/lib/userdata.inc.php')) {\n\t// get possible owner\n\t$posixusername = posix_getpwuid(posix_getuid());\n\t$posixgroup = posix_getgrgid(posix_getgid());\n\tUI::twig()->addGlobal('install_mode', '1');\n\techo UI::twig()->render($_deftheme . '/misc/ownershiphint.html.twig', [\n\t\t'user' => $posixusername['name'],\n\t\t'group' => $posixgroup['name'],\n\t\t'installdir' => Froxlor::getInstallDir()\n\t]);\n\tdie();\n}\n\n// include MySQL-Username/Passwort etc.\nrequire Froxlor::getInstallDir() . '/lib/userdata.inc.php';\nif (!isset($sql) || !is_array($sql)) {\n\tUI::twig()->addGlobal('install_mode', '1');\n\techo UI::twig()->render($_deftheme . '/misc/configurehint.html.twig');\n\tdie();\n}\n\n// set error-handler\n@set_error_handler([\n\t'\\\\Froxlor\\\\PhpHelper',\n\t'phpErrHandler'\n]);\n@set_exception_handler([\n\t'\\\\Froxlor\\\\PhpHelper',\n\t'phpExceptionHandler'\n]);\n\n// send ssl-related headers (later than the others because we need a working database-connection and installation)\nUI::sendSslHeaders();\n\n// create a new idna converter\n$idna_convert = new IdnaWrapper();\n\n// re-read user data if logged in\nif (CurrentUser::hasSession()) {\n\tCurrentUser::reReadUserData();\n}\n\n/**\n * Language management\n */\n\n// set default language before anything else to\n// ensure that we can display messages\nLanguage::setLanguage(Settings::Get('panel.standardlanguage'));\n\n// set language by given user\nif (CurrentUser::hasSession()) {\n\tif (!empty(CurrentUser::getField('language')) && isset(Language::getLanguages()[CurrentUser::getField('language')])) {\n\t\tLanguage::setLanguage(CurrentUser::getField('language'));\n\t} else {\n\t\tLanguage::setLanguage(CurrentUser::getField('def_language'));\n\t}\n}\n\n// Initialize our link - class\n$linker = new Linker('index.php');\nUI::setLinker($linker);\n\n/**\n * Global Theme-variable\n */\nif (Update::versionInUpdate(Settings::Get('panel.version'), '2.0.0-beta1')) {\n\t$theme = $_deftheme;\n} else {\n\t$theme = (Settings::Get('panel.default_theme') !== null) ? Settings::Get('panel.default_theme') : $_deftheme;\n\t// Overwrite with customer/admin theme if defined\n\tif (CurrentUser::hasSession() && CurrentUser::getField('theme') != $theme) {\n\t\t$theme = CurrentUser::getField('theme');\n\t}\n}\n\n// Check if a different variant of the theme is used\n$themevariant = \"default\";\nif (preg_match(\"/([a-z0-9\\.\\-]+)_([a-z0-9\\.\\-]+)/i\", $theme, $matches)) {\n\t$theme = $matches[1];\n\t$themevariant = $matches[2];\n}\n\n// check for existence of the theme\nif (@file_exists('templates/' . $theme . '/config.json')) {\n\t$_themeoptions = json_decode(file_get_contents('templates/' . $theme . '/config.json'), true);\n} else {\n\t$_themeoptions = null;\n}\n\n// check for existence of variant in theme\nif (is_array($_themeoptions) && (!array_key_exists('variants', $_themeoptions) || !array_key_exists($themevariant,\n\t\t\t$_themeoptions['variants']))) {\n\t$themevariant = \"default\";\n}\n\n// check for custom header-graphic\n$hl_path = 'templates/' . $theme . '/assets/img';\n\n// default is theme-image\n$header_logo = $hl_path . '/' . ($_themeoptions['variants'][$themevariant]['img']['ui'] ?? 'logo_white.png');\n$header_logo_login = $hl_path . '/' . ($_themeoptions['variants'][$themevariant]['img']['login'] ?? 'logo_white.png');\n\nif (Settings::Get('panel.logo_overridetheme') == 1 || Settings::Get('panel.logo_overridecustom') == 1) {\n\t// logo settings shall overwrite theme logo and possible custom logo\n\t$header_logo = Settings::Get('panel.logo_image_header') ?: $header_logo;\n\t$header_logo_login = Settings::Get('panel.logo_image_login') ?: $header_logo_login;\n}\nif (Settings::Get('panel.logo_overridecustom') == 0 && file_exists($hl_path . '/logo_custom.png')) {\n\t// custom theme image (logo_custom.png) is not being overwritten by logo_image_* setting\n\t$header_logo = $hl_path . '/logo_custom.png';\n\t$header_logo_login = $hl_path . '/logo_custom.png';\n\tif (file_exists($hl_path . '/logo_custom_login.png')) {\n\t\t$header_logo_login = $hl_path . '/logo_custom_login.png';\n\t}\n}\n\nUI::twig()->addGlobal('header_logo_login', $header_logo_login);\nUI::twig()->addGlobal('header_logo', $header_logo);\n\n/**\n * Redirects to index.php (login page) if no session exists\n */\nif (!CurrentUser::hasSession() && AREA != 'login') {\n\tunset($_SESSION['userinfo']);\n\tCurrentUser::setData();\n\tsession_destroy();\n\t$params = [\n\t\t\"script\" => basename($_SERVER[\"SCRIPT_NAME\"]),\n\t\t\"qrystr\" => $_SERVER[\"QUERY_STRING\"]\n\t];\n\tResponse::redirectTo('index.php', $params);\n\texit();\n}\n\n$userinfo = CurrentUser::getData();\nUI::twig()->addGlobal('userinfo', $userinfo);\nUI::setCurrentUser($userinfo);\n// Initialize logger\nif (CurrentUser::hasSession()) {\n\t// Initialize logging\n\t$log = FroxlorLogger::getInstanceOf($userinfo);\n\tif ((CurrentUser::isAdmin() && AREA != 'admin') || (!CurrentUser::isAdmin() && AREA != 'customer')) {\n\t\t// user tries to access an area not meant for him -> redirect to corresponding index\n\t\tResponse::redirectTo((CurrentUser::isAdmin() ? 'admin' : 'customer') . '_index.php', $params);\n\t\texit();\n\t}\n}\n\n/**\n * Fills variables for navigation, header and footer\n */\n$navigation = [];\nif (AREA == 'admin' || AREA == 'customer') {\n\tif (Froxlor::hasUpdates() || Froxlor::hasDbUpdates()) {\n\t\t/*\n\t\t * if froxlor-files have been updated\n\t\t * but not yet configured by the admin\n\t\t * we only show logout and the update-page\n\t\t */\n\t\t$navigation_data = [\n\t\t\t'admin' => [\n\t\t\t\t'server' => [\n\t\t\t\t\t'label' => lng('admin.server'),\n\t\t\t\t\t'required_resources' => 'change_serversettings',\n\t\t\t\t\t'elements' => [\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'url' => 'admin_updates.php?page=overview',\n\t\t\t\t\t\t\t'label' => lng('update.update'),\n\t\t\t\t\t\t\t'required_resources' => 'change_serversettings'\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t$navigation = HTML::buildNavigation($navigation_data['admin'], CurrentUser::getData());\n\t} else {\n\t\t$navigation_data = PhpHelper::loadConfigArrayDir('lib/navigation/');\n\t\t$navigation = HTML::buildNavigation($navigation_data[AREA], CurrentUser::getData());\n\t}\n}\nUI::twig()->addGlobal('nav_entries', $navigation);\n\n$js = \"\";\n$css = \"\";\nif (is_array($_themeoptions) && array_key_exists('js', $_themeoptions['variants'][$themevariant])) {\n\tif (is_array($_themeoptions['variants'][$themevariant]['js'])) {\n\t\tforeach ($_themeoptions['variants'][$themevariant]['js'] as $jsfile) {\n\t\t\tif (file_exists('templates/' . $theme . '/assets/js/' . $jsfile)) {\n\t\t\t\t$js .= '<script type=\"text/javascript\" src=\"templates/' . $theme . '/assets/js/' . $jsfile . '\"></script>' . \"\\n\";\n\t\t\t}\n\t\t}\n\t}\n\tif (is_array($_themeoptions['variants'][$themevariant]['css'])) {\n\t\tforeach ($_themeoptions['variants'][$themevariant]['css'] as $cssfile) {\n\t\t\tif (file_exists('templates/' . $theme . '/assets/css/' . $cssfile)) {\n\t\t\t\t$css .= '<link href=\"templates/' . $theme . '/assets/css/' . $cssfile . '\" rel=\"stylesheet\" type=\"text/css\" />' . \"\\n\";\n\t\t\t}\n\t\t}\n\t}\n}\n\nUI::twig()->addGlobal('theme_js', $js);\nUI::twig()->addGlobal('theme_css', $css);\nunset($js);\nunset($css);\n\n$action = Request::get('action');\n$page = Request::get('page', 'overview');\n$gSearchText = Request::get('searchtext');\n\n// clear request data\nif (!$action && isset($_SESSION)) {\n\tunset($_SESSION['requestData']);\n}\n\nUI::twig()->addGlobal('action', $action);\nUI::twig()->addGlobal('page', $page);\nUI::twig()->addGlobal('area', AREA);\nUI::twig()->addGlobal('gSearchText', $gSearchText);\n\n// Initialize the mailingsystem\n$mail = new Mailer(true);\n\n// initialize csrf\nif (CurrentUser::hasSession()) {\n\t// create new csrf token if not set\n\tif (!$csrf_token = CurrentUser::getField('csrf_token')) {\n\t\t$csrf_token = Froxlor::genSessionId(20);\n\t\tCurrentUser::setField('csrf_token', $csrf_token);\n\t}\n\t// set csrf token for twig\n\tUI::twig()->addGlobal('csrf_token', $csrf_token);\n\t// check if csrf token is valid\n\tif (in_array($_SERVER['REQUEST_METHOD'], ['POST', 'PUT', 'PATCH', 'DELETE'])) {\n\t\t$current_token = $_POST['csrf_token'] ?? $_SERVER['HTTP_X_CSRF_TOKEN'] ?? null;\n\t\tif ($current_token != CurrentUser::getField('csrf_token')) {\n\t\t\tResponse::dynamicError('CSRF validation failed');\n\t\t}\n\t}\n\t// update cookie lifetime\n\t$cookie_params = [\n\t\t'expires' => time() + Settings::Get('session.sessiontimeout'),\n\t\t'path' => '/',\n\t\t'domain' => $_SERVER['HTTP_HOST'],\n\t\t'secure' => UI::requestIsHttps(),\n\t\t'httponly' => true,\n\t\t'samesite' => 'Strict'\n\t];\n\tsetcookie(session_name(), $_COOKIE[session_name()], $cookie_params);\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nif (!defined('AREA')) {\n\theader(\"Location: index.php\");\n\texit();\n}\n\nuse Froxlor\\Api\\Commands\\SubDomains;\nuse Froxlor\\Customer\\Customer;\nuse Froxlor\\FileDir;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n// This file is being included in admin_domains and customer_domains\n// and therefore does not need to require lib/init.php\n\n$domain_id = (int)Request::get('domain_id');\n$last_n = (int)Request::get('number_of_lines', 100);\n\n// user's with logviewenabled = false\nif (AREA != 'admin' && $userinfo['logviewenabled'] != '1') {\n\t// back to domain overview\n\tResponse::redirectTo($filename, [\n\t\t'page' => 'domains'\n\t]);\n}\n\nif (function_exists('exec')) {\n\t// get domain-info\n\ttry {\n\t\t$json_result = SubDomains::getLocal($userinfo, [\n\t\t\t'id' => $domain_id\n\t\t])->get();\n\t} catch (Exception $e) {\n\t\tResponse::dynamicError($e->getMessage());\n\t}\n\t$domain = json_decode($json_result, true)['data'];\n\n\t$speciallogfile = '';\n\tif ($domain['speciallogfile'] == '1') {\n\t\tif ($domain['parentdomainid'] == '0') {\n\t\t\t$speciallogfile = '-' . $domain['domain'];\n\t\t} else {\n\t\t\t$speciallogfile = '-' . $domain['parentdomain'];\n\t\t}\n\t}\n\t// The normal access/error - logging is enabled\n\t$error_log = FileDir::makeCorrectFile(Settings::Get('system.logfiles_directory') . Customer::getCustomerDetail($domain['customerid'], 'loginname') . $speciallogfile . '-error.log');\n\t$access_log = FileDir::makeCorrectFile(Settings::Get('system.logfiles_directory') . Customer::getCustomerDetail($domain['customerid'], 'loginname') . $speciallogfile . '-access.log');\n\n\t// error log\n\tif (file_exists($error_log)) {\n\t\t$result = FileDir::safe_exec('tail -n ' . $last_n . ' ' . escapeshellarg($error_log));\n\t\t$error_log_content = implode(\"\\n\", $result);\n\t} else {\n\t\t$error_log_content = \"Error-Log\" . (AREA == 'admin' ? \" '\" . $error_log . \"'\" : \"\") . \" does not seem to exist\";\n\t}\n\n\t// access log\n\tif (file_exists($access_log)) {\n\t\t$result = FileDir::safe_exec('tail -n ' . $last_n . ' ' . escapeshellarg($access_log));\n\t\t$access_log_content = implode(\"\\n\", $result);\n\t} else {\n\t\t$access_log_content = \"Access-Log\" . (AREA == 'admin' ? \" '\" . $access_log . \"'\" : \"\") . \" does not seem to exist\";\n\t}\n\n\tUI::view('user/logfiles.html.twig', [\n\t\t'error_log_content' => $error_log_content,\n\t\t'access_log_content' => $access_log_content,\n\t\t'actions_links' => [\n\t\t\t[\n\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t'section' => 'domains',\n\t\t\t\t\t'page' => 'domains',\n\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t'id' => $domain_id\n\t\t\t\t]),\n\t\t\t\t'label' => lng('admin.domain_edit'),\n\t\t\t\t'icon' => 'fa-solid fa-pen'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'href' => $linker->getLink(['section' => 'domains', 'page' => 'domains']),\n\t\t\t\t'label' => lng('panel.backtooverview'),\n\t\t\t\t'icon' => 'fa-solid fa-reply'\n\t\t\t]\n\t\t]\n\t]);\n} else {\n\tif (AREA == 'admin') {\n\t\tResponse::dynamicError('You need to allow the exec() function in the froxlor-vhost php-config');\n\t} else {\n\t\tResponse::dynamicError('Required function exec() is not allowed. Please contact the system administrator.');\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nif (!defined('AREA')) {\n\theader(\"Location: index.php\");\n\texit();\n}\n\nuse Froxlor\\Api\\Commands\\Certificates;\nuse Froxlor\\Api\\Commands\\Domains;\nuse Froxlor\\Api\\Commands\\SubDomains;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n// This file is being included in admin_domains and customer_domains\n// and therefore does not need to require lib/init.php\n\n$success_message = \"\";\n$id = (int)Request::get('id');\n\n// do the delete and then just show a success-message and the certificates list again\nif ($action == 'delete') {\n\tHTML::askYesNo('certificate_reallydelete', $filename, [\n\t\t'id' => $id,\n\t\t'page' => $page,\n\t\t'action' => 'deletesure'\n\t], '', [\n\t\t'section' => 'domains',\n\t\t'page' => $page\n\t]);\n} elseif (isset($_POST['send']) && $_POST['send'] == 'send' && $action == 'deletesure' && $id > 0) {\n\ttry {\n\t\t$json_result = Certificates::getLocal($userinfo, [\n\t\t\t'id' => $id\n\t\t])->delete();\n\t\t$success_message = lng('domains.ssl_certificate_removed', [$id]);\n\t} catch (Exception $e) {\n\t\tResponse::dynamicError($e->getMessage());\n\t}\n}\n\n$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"viewed domains::ssl_certificates\");\n\ntry {\n\t$certificates_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/tablelisting.sslcertificates.php';\n\t$collection = (new Collection(Certificates::class, $userinfo))\n\t\t->withPagination($certificates_list_data['sslcertificates_list']['columns'],\n\t\t\t$certificates_list_data['sslcertificates_list']['default_sorting']);\n\tif ($userinfo['adminsession'] == 1) {\n\t\t$collection->has('domains', Domains::class, 'domainid', 'id');\n\t} else {\n\t\t$collection->has('domains', SubDomains::class, 'domainid', 'id');\n\t}\n} catch (Exception $e) {\n\tResponse::dynamicError($e->getMessage());\n}\n\nUI::view('user/table.html.twig', [\n\t'listing' => Listing::format($collection, $certificates_list_data, 'sslcertificates_list'),\n]);\n"], "fixing_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Admins;\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::any('id');\n\nif (($page == 'admins' || $page == 'overview') && $userinfo['change_serversettings'] == '1') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_admins\");\n\n\t\ttry {\n\t\t\t$admin_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.admins.php';\n\t\t\t$collection = (new Collection(Admins::class, $userinfo))\n\t\t\t\t->withPagination($admin_list_data['admin_list']['columns'], $admin_list_data['admin_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $admin_list_data, 'admin_list'),\n\t\t\t'actions_links' => [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'admins', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.admin_add')\n\t\t\t\t]\n\t\t\t]\n\t\t]);\n\t} elseif ($action == 'su') {\n\t\ttry {\n\t\t\t$json_result = Admins::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\t\t$destination_admin = $result['loginname'];\n\n\t\tif ($destination_admin != '' && $result['adminid'] != $userinfo['userid']) {\n\t\t\t$result['switched_user'] = CurrentUser::getData();\n\t\t\t$result['adminsession'] = 1;\n\t\t\t$result['userid'] = $result['adminid'];\n\t\t\tCurrentUser::setData($result);\n\n\t\t\t$log->logAction(\n                FroxlorLogger::ADM_ACTION,\n                LOG_INFO,\n                \"switched adminuser and is now '\" . $destination_admin . \"'\"\n            );\n\t\t\tResponse::redirectTo('admin_index.php');\n\t\t} else {\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t'action' => 'login'\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Admins::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['loginname'] != '') {\n\t\t\tif ($result['adminid'] == $userinfo['userid']) {\n\t\t\t\tResponse::standardError('youcantdeleteyourself');\n\t\t\t}\n\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\tAdmins::getLocal($userinfo, [\n\t\t\t\t\t'id' => $id\n\t\t\t\t])->delete();\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('admin_admin_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['loginname']);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tAdmins::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$ipaddress = [];\n\t\t\t$ipaddress[-1] = lng('admin.allips');\n\t\t\t$ipsandports_stmt = Database::query(\"\n\t\t\t\tSELECT `id`, `ip` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` GROUP BY `ip` ORDER BY `ip` ASC\n\t\t\t\");\n\t\t\twhile ($row = $ipsandports_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$ipaddress[$row['id']] = $row['ip'];\n\t\t\t}\n\n\t\t\t$admin_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/admin/formfield.admin_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'admins']),\n\t\t\t\t'formdata' => $admin_add_data['admin_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Admins::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['loginname'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tAdmins::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$dec_places = Settings::Get('panel.decimal_places');\n\t\t\t\t$result['traffic'] = round($result['traffic'] / (1024 * 1024), $dec_places);\n\t\t\t\t$result['diskspace'] = round($result['diskspace'] / 1024, $dec_places);\n\t\t\t\t$result['email'] = $idna_convert->decode($result['email']);\n\n\t\t\t\t$ipaddress = [];\n\t\t\t\t$ipaddress[-1] = lng('admin.allips');\n\t\t\t\t$ipsandports_stmt = Database::query(\"\n\t\t\t\t\tSELECT `id`, `ip` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` GROUP BY `ip` ORDER BY `ip` ASC\n\t\t\t\t\");\n\t\t\t\twhile ($row = $ipsandports_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$ipaddress[$row['id']] = $row['ip'];\n\t\t\t\t}\n\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$admin_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/admin/formfield.admin_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'admins', 'id' => $id]),\n\t\t\t\t\t'formdata' => $admin_edit_data['admin_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Config\\ConfigParser;\nuse Froxlor\\FileDir;\nuse Froxlor\\Froxlor;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\nif ($userinfo['change_serversettings'] == '1') {\n\tif ($action == 'setconfigured') {\n\t\tSettings::Set('panel.is_configured', '1', true);\n\t\tResponse::redirectTo('admin_configfiles.php');\n\t}\n\n\t// get distro from URL param\n\t$distribution = Request::any('distribution');\n\t$reselect = Request::any('reselect', 0);\n\n\t// check for possible setting\n\tif (empty($distribution)) {\n\t\t$distribution = Settings::Get('system.distribution') ?? \"\";\n\t}\n\tif ($reselect == 1) {\n\t\t$distribution = '';\n\t}\n\n\t$distributions_select = [];\n\n\t$services = [];\n\t$config_dir = FileDir::makeCorrectDir(Froxlor::getInstallDir() . '/lib/configfiles/');\n\n\tif (!empty($distribution)) {\n\t\tif (!file_exists($config_dir . '/' . $distribution . \".xml\")) {\n\t\t\tResponse::dynamicError(\"Unknown distribution\");\n\t\t}\n\n\t\t// update setting if different\n\t\tif ($distribution != Settings::Get('system.distribution')) {\n\t\t\tSettings::Set('system.distribution', $distribution);\n\t\t}\n\n\t\t// create configparser object\n\t\t$configfiles = new ConfigParser($config_dir . '/' . $distribution . \".xml\");\n\n\t\t// get distro-info\n\t\t$dist_display = $configfiles->getCompleteDistroName();\n\n\t\t// get all the services from the distro\n\t\t$services = $configfiles->getServices();\n\t} else {\n\t\t// show list of available distro's\n\t\t$distros = glob($config_dir . '*.xml');\n\t\t// read in all the distros\n\t\tforeach ($distros as $_distribution) {\n\t\t\t// get configparser object\n\t\t\t$dist = new ConfigParser($_distribution);\n\t\t\t// store in tmp array\n\t\t\t$distributions_select[str_replace(\".xml\", \"\", strtolower(basename($_distribution)))] = $dist->getCompleteDistroName();\n\t\t}\n\n\t\t// sort by distribution name\n\t\tasort($distributions_select);\n\t}\n\n\tif ($distribution != \"\" && isset($_POST['finish'])) {\n\t\tunset($_POST['finish']);\n\t\t$params = $_POST;\n\t\t$params['distro'] = $distribution;\n\t\t$params['system'] = [];\n\t\tforeach ($_POST['system'] as $sysdaemon) {\n\t\t\t$params['system'][] = $sysdaemon;\n\t\t}\n\t\t$params_content = json_encode($params);\n\t\t$params_filename = FileDir::makeCorrectFile(Froxlor::getInstallDir() . 'install/' . Froxlor::genSessionId() . '.json');\n\t\tfile_put_contents($params_filename, $params_content);\n\n\t\tUI::twigBuffer('settings/configuration-final.html.twig', [\n\t\t\t'distribution' => $distribution,\n\t\t\t// alert\n\t\t\t'type' => 'info',\n\t\t\t'alert_msg' => lng('admin.configfiles.finishnote'),\n\t\t\t'basedir' => Froxlor::getInstallDir(),\n\t\t\t'params_filename' => $params_filename\n\t\t]);\n\t} else {\n\t\tif (!empty($distribution)) {\n\t\t\t// show available services to configure\n\t\t\t$fields = $services;\n\t\t\t$link_params = ['section' => 'configfiles', 'distribution' => $distribution];\n\t\t\tUI::twigBuffer('settings/configuration.html.twig', [\n\t\t\t\t'action' => $linker->getLink($link_params),\n\t\t\t\t'fields' => $fields,\n\t\t\t\t'distribution' => $distribution\n\t\t\t]);\n\t\t} else {\n\t\t\t// @fixme check set distribution from settings\n\n\t\t\t$cfg_formfield = [\n\t\t\t\t'config' => [\n\t\t\t\t\t'title' => lng('admin.configfiles.serverconfiguration'),\n\t\t\t\t\t'image' => 'fa-solid fa-wrench',\n\t\t\t\t\t'description' => lng('admin.configfiles.description'),\n\t\t\t\t\t'sections' => [\n\t\t\t\t\t\t'section_config' => [\n\t\t\t\t\t\t\t'fields' => [\n\t\t\t\t\t\t\t\t'distribution' => [\n\t\t\t\t\t\t\t\t\t'type' => 'select',\n\t\t\t\t\t\t\t\t\t'select_var' => $distributions_select,\n\t\t\t\t\t\t\t\t\t'label' => lng('admin.configfiles.distribution'),\n\t\t\t\t\t\t\t\t\t'selected' => Settings::Get('system.distribution') ?? ''\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t\t'buttons' => [\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'class' => 'btn-outline-secondary',\n\t\t\t\t\t\t\t'label' => lng('panel.cancel'),\n\t\t\t\t\t\t\t'type' => 'reset'\n\t\t\t\t\t\t],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'label' => lng('update.proceed')\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t];\n\n\t\t\tUI::twigBuffer('user/form-note.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'configfiles']),\n\t\t\t\t'formdata' => $cfg_formfield['config'],\n\t\t\t\t'actions_links' => (int)Settings::Get('panel.is_configured') == 0 ? [\n\t\t\t\t\t[\n\t\t\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t\t\t'section' => 'configfiles',\n\t\t\t\t\t\t\t'page' => 'overview',\n\t\t\t\t\t\t\t'action' => 'setconfigured'\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t'label' => lng('panel.ihave_configured'),\n\t\t\t\t\t\t'class' => 'btn-outline-warning',\n\t\t\t\t\t\t'icon' => 'fa-solid fa-circle-check'\n\t\t\t\t\t]\n\t\t\t\t] : [],\n\t\t\t\t// alert\n\t\t\t\t'type' => 'warning',\n\t\t\t\t'alert_msg' => lng('panel.settings_before_configuration') . ((int)Settings::Get('panel.is_configured') == 1 ? '<br><br>' . lng('panel.system_is_configured') : '')\n\t\t\t]);\n\t\t}\n\t}\n\n\tUI::twigOutputBuffer();\n} else {\n\tResponse::redirectTo('admin_index.php');\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Cronjobs;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::any('id');\n\nif ($page == 'cronjobs' || $page == 'overview') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, 'viewed admin_cronjobs');\n\n\t\ttry {\n\t\t\t$cron_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.cronjobs.php';\n\t\t\t$collection = (new Collection(Cronjobs::class, $userinfo))\n\t\t\t\t->withPagination($cron_list_data['cron_list']['columns'], $cron_list_data['cron_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table-note.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $cron_list_data, 'cron_list'),\n\t\t\t// alert-box\n\t\t\t'type' => 'warning',\n\t\t\t'alert_msg' => lng('cron.changewarning')\n\t\t]);\n\t} elseif ($action == 'new') {\n\t\t/*\n\t\t * @TODO later\n\t\t */\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Cronjobs::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\t\tif ($result['cronfile'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tCronjobs::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$cronjobs_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/cronjobs/formfield.cronjobs_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'cronjobs', 'id' => $id]),\n\t\t\t\t\t'formdata' => $cronjobs_edit_data['cronjobs_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\t/*\n\t\t * @TODO later\n\t\t */\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Admins;\nuse Froxlor\\Api\\Commands\\Customers;\nuse Froxlor\\Api\\Commands\\MysqlServer;\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Froxlor;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::any('id');\n\nif (($page == 'customers' || $page == 'overview') && $userinfo['customers'] != '0') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_customers\");\n\n\t\ttry {\n\t\t\t$customer_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.customers.php';\n\t\t\t$collection = (new Collection(Customers::class, $userinfo, ['show_usages' => true]))\n\t\t\t\t->withPagination($customer_list_data['customer_list']['columns'], $customer_list_data['customer_list']['default_sorting']);\n\t\t\tif ($userinfo['change_serversettings']) {\n\t\t\t\t$collection->has('admin', Admins::class, 'adminid', 'adminid');\n\t\t\t}\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\t$actions_links = false;\n\t\tif (CurrentUser::canAddResource('customers')) {\n\t\t\t$actions_links = [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'customers', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.customer_add')\n\t\t\t\t]\n\t\t\t];\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $customer_list_data, 'customer_list'),\n\t\t\t'actions_links' => $actions_links\n\t\t]);\n\t} elseif ($action == 'su' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\t$destination_user = $result['loginname'];\n\n\t\tif ($destination_user != '') {\n\t\t\tif ($result['deactivated'] == '1') {\n\t\t\t\tResponse::standardError(\"usercurrentlydeactivated\", $destination_user);\n\t\t\t}\n\n\t\t\t$result['switched_user'] = CurrentUser::getData();\n\t\t\t$result['adminsession'] = 0;\n\t\t\t$result['userid'] = $result['customerid'];\n\t\t\tCurrentUser::setData($result);\n\n\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"switched user and is now '\" . $destination_user . \"'\");\n\n\t\t\t$target = (isset($_GET['target']) ? $_GET['target'] : 'index');\n\t\t\t$redirect = \"customer_\" . $target . \".php\";\n\t\t\tif (!file_exists(Froxlor::getInstallDir() . \"/\" . $redirect)) {\n\t\t\t\t$redirect = \"customer_index.php\";\n\t\t\t}\n\t\t\tResponse::redirectTo($redirect, null, true);\n\t\t} else {\n\t\t\tResponse::redirectTo('index.php', [\n\t\t\t\t'action' => 'login'\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'unlock' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t\t'id' => $id\n\t\t\t\t])->unlock();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\tHTML::askYesNo('customer_reallyunlock', $filename, [\n\t\t\t\t'id' => $id,\n\t\t\t\t'page' => $page,\n\t\t\t\t'action' => $action\n\t\t\t], $result['loginname']);\n\t\t}\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'delete_userfiles' => (isset($_POST['delete_userfiles']) ? (int)$_POST['delete_userfiles'] : 0)\n\t\t\t\t])->delete();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\tHTML::askYesNoWithCheckbox('admin_customer_reallydelete', 'admin_customer_alsoremovefiles', $filename, [\n\t\t\t\t'id' => $id,\n\t\t\t\t'page' => $page,\n\t\t\t\t'action' => $action\n\t\t\t], $result['loginname']);\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tCustomers::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$mysql_servers = [];\n\t\t\ttry {\n\t\t\t\t$result_json = MysqlServer::getLocal($userinfo)->listing();\n\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\tforeach ($result_decoded as $dbserver => $dbdata) {\n\t\t\t\t\t$mysql_servers[] = [\n\t\t\t\t\t\t'label' => $dbdata['caption'],\n\t\t\t\t\t\t'value' => $dbserver\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t} catch (Exception $e) {\n\t\t\t\t/* just none */\n\t\t\t}\n\n\t\t\t$phpconfigs = [];\n\t\t\t$configs = Database::query(\"\n\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\");\n\t\t\twhile ($row = $configs->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t'label' => $row['description'] . \" [\" . $row['interpreter'] . \"]\",\n\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t'label' => $row['description'],\n\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// hosting plans\n\t\t\t$hosting_plans = [];\n\t\t\t$plans = Database::query(\"\n\t\t\t\tSELECT *\n\t\t\t\tFROM `\" . TABLE_PANEL_PLANS . \"`\n\t\t\t\tORDER BY name ASC\n\t\t\t\");\n\t\t\t$hosting_plans = [\n\t\t\t\t0 => \"---\"\n\t\t\t];\n\t\t\twhile ($row = $plans->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$hosting_plans[$row['id']] = $row['name'];\n\t\t\t}\n\n\t\t\t$customer_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/customer/formfield.customer_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'customers']),\n\t\t\t\t'formdata' => $customer_add_data['customer_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Customers::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['loginname'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tCustomers::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$dec_places = Settings::Get('panel.decimal_places');\n\t\t\t\t$result['traffic'] = round($result['traffic'] / (1024 * 1024), $dec_places);\n\t\t\t\t$result['diskspace'] = round($result['diskspace'] / 1024, $dec_places);\n\t\t\t\t$result['email'] = $idna_convert->decode($result['email']);\n\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$mysql_servers = [];\n\t\t\t\ttry {\n\t\t\t\t\t$result_json = MysqlServer::getLocal($userinfo)->listing();\n\t\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\t\tforeach ($result_decoded as $dbserver => $dbdata) {\n\t\t\t\t\t\t$mysql_servers[] = [\n\t\t\t\t\t\t\t'label' => $dbdata['caption'],\n\t\t\t\t\t\t\t'value' => $dbserver\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t/* just none */\n\t\t\t\t}\n\n\t\t\t\t$phpconfigs = [];\n\t\t\t\t$configs = Database::query(\"\n\t\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\t\");\n\t\t\t\twhile ($row = $configs->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t\t'label' => $row['description'] . \" [\" . $row['interpreter'] . \"]\",\n\t\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t\t];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t\t'label' => $row['description'],\n\t\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// hosting plans\n\t\t\t\t$plans = Database::query(\"\n\t\t\t\t\tSELECT *\n\t\t\t\t\tFROM `\" . TABLE_PANEL_PLANS . \"`\n\t\t\t\t\tORDER BY name ASC\n\t\t\t\t\");\n\t\t\t\t$hosting_plans = [\n\t\t\t\t\t0 => \"---\"\n\t\t\t\t];\n\t\t\t\twhile ($row = $plans->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$hosting_plans[$row['id']] = $row['name'];\n\t\t\t\t}\n\n\t\t\t\t$available_admins_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\tWHERE (`customers` = '-1' OR `customers` > `customers_used`)\n\t\t\t\t\tAND adminid <> :currentadmin\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($available_admins_stmt, ['currentadmin' => $result['adminid']]);\n\t\t\t\t$admin_select = [\n\t\t\t\t\t0 => \"---\"\n\t\t\t\t];\n\t\t\t\twhile ($available_admin = $available_admins_stmt->fetch()) {\n\t\t\t\t\t$admin_select[$available_admin['adminid']] = $available_admin['name'] . \" (\" . $available_admin['loginname'] . \")\";\n\t\t\t\t}\n\n\t\t\t\t$customer_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/customer/formfield.customer_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'customers', 'id' => $id]),\n\t\t\t\t\t'formdata' => $customer_edit_data['customer_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Customers as Customers;\nuse Froxlor\\Api\\Commands\\Domains as Domains;\nuse Froxlor\\Bulk\\DomainBulkAction;\nuse Froxlor\\Cron\\TaskId;\nuse Froxlor\\Customer\\Customer;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Domain\\Domain;\nuse Froxlor\\FileDir;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Cronjob;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\User;\nuse Froxlor\\Validate\\Validate;\nuse Froxlor\\CurrentUser;\n\n$id = (int)Request::any('id');\n\nif ($page == 'domains' || $page == 'overview') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_domains\");\n\n\t\ttry {\n\t\t\t$customerCollection = (new Collection(Customers::class, $userinfo));\n\t\t\t$domain_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.domains.php';\n\t\t\t$collection = (new Collection(Domains::class, $userinfo))\n\t\t\t\t->has('customer', Customers::class, 'customerid', 'customerid')\n\t\t\t\t->withPagination($domain_list_data['domain_list']['columns'], $domain_list_data['domain_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\t$actions_links = false;\n\t\tif (CurrentUser::canAddResource('domains')) {\n\t\t\t$actions_links = [];\n\t\t\t$actions_links[] = [\n\t\t\t\t'href' => $linker->getLink(['section' => 'domains', 'page' => $page, 'action' => 'add']),\n\t\t\t\t'label' => lng('admin.domain_add')\n\t\t\t];\n\t\t\t$actions_links[] = [\n\t\t\t\t'href' => $linker->getLink(['section' => 'domains', 'page' => $page, 'action' => 'import']),\n\t\t\t\t'label' => lng('domains.domain_import'),\n\t\t\t\t'icon' => 'fa-solid fa-file-import',\n\t\t\t\t'class' => 'btn-outline-secondary'\n\t\t\t];\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $domain_list_data, 'domain_list'),\n\t\t\t'actions_links' => $actions_links\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Domains::getLocal($userinfo, [\n\t\t\t\t'id' => $id,\n\t\t\t\t'no_std_subdomain' => true\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\t$alias_check_stmt = Database::prepare(\"\n\t\t\tSELECT COUNT(`id`) AS `count` FROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\tWHERE `aliasdomain`= :id\");\n\t\t$alias_check = Database::pexecute_first($alias_check_stmt, [\n\t\t\t'id' => $id\n\t\t]);\n\n\t\tif ($result['domain'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send' && $alias_check['count'] == 0) {\n\t\t\t\ttry {\n\t\t\t\t\tDomains::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} elseif ($alias_check['count'] > 0) {\n\t\t\t\tResponse::standardError('domains_cantdeletedomainwithaliases');\n\t\t\t} else {\n\t\t\t\t$showcheck = false;\n\t\t\t\tif (Domain::domainHasMainSubDomains($id)) {\n\t\t\t\t\t$showcheck = true;\n\t\t\t\t}\n\t\t\t\tHTML::askYesNoWithCheckbox('admin_domain_reallydelete', 'remove_subbutmain_domains', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $idna_convert->decode($result['domain']), $showcheck);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tDomains::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$customers = [\n\t\t\t\t0 => lng('panel.please_choose')\n\t\t\t];\n\t\t\t$result_customers_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT `customerid`, `loginname`, `name`, `firstname`, `company`\n\t\t\t\t\tFROM `\" . TABLE_PANEL_CUSTOMERS . \"` \" . ($userinfo['customers_see_all'] ? '' : \" WHERE `adminid` = :adminid \") . \" ORDER BY COALESCE(NULLIF(`name`,''), `company`) ASC\");\n\t\t\t$params = [];\n\t\t\tif ($userinfo['customers_see_all'] == '0') {\n\t\t\t\t$params['adminid'] = $userinfo['adminid'];\n\t\t\t}\n\t\t\tDatabase::pexecute($result_customers_stmt, $params);\n\n\t\t\twhile ($row_customer = $result_customers_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$customers[$row_customer['customerid']] = User::getCorrectFullUserDetails($row_customer) . ' (' . $row_customer['loginname'] . ')';\n\t\t\t}\n\n\t\t\t$admins = [];\n\t\t\tif ($userinfo['customers_see_all'] == '1') {\n\t\t\t\t$result_admins_stmt = Database::query(\"\n\t\t\t\t\t\tSELECT `adminid`, `loginname`, `name`\n\t\t\t\t\t\tFROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\t\tWHERE `domains_used` < `domains` OR `domains` = '-1' ORDER BY `name` ASC\");\n\n\t\t\t\twhile ($row_admin = $result_admins_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$admins[$row_admin['adminid']] = User::getCorrectFullUserDetails($row_admin) . ' (' . $row_admin['loginname'] . ')';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($userinfo['ip'] == \"-1\") {\n\t\t\t\t$result_ipsandports_stmt = Database::query(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `ssl`='0' ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t\t$result_ssl_ipsandports_stmt = Database::query(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `ssl`='1' ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t} else {\n\t\t\t\t$admin_ip_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `id` = :ipid ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t\t$admin_ip = Database::pexecute_first($admin_ip_stmt, [\n\t\t\t\t\t'ipid' => $userinfo['ip']\n\t\t\t\t]);\n\n\t\t\t\t$result_ipsandports_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `ssl`='0' AND `ip` = :ipid ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($result_ipsandports_stmt, [\n\t\t\t\t\t'ipid' => $admin_ip['ip']\n\t\t\t\t]);\n\n\t\t\t\t$result_ssl_ipsandports_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `ssl`='1' AND `ip` = :ipid ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($result_ssl_ipsandports_stmt, [\n\t\t\t\t\t'ipid' => $admin_ip['ip']\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\t// Build array holding all IPs and Ports available to this admin\n\t\t\t$ipsandports = [];\n\t\t\twhile ($row_ipandport = $result_ipsandports_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\tif (filter_var($row_ipandport['ip'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n\t\t\t\t\t$row_ipandport['ip'] = '[' . $row_ipandport['ip'] . ']';\n\t\t\t\t}\n\n\t\t\t\t$ipsandports[] = [\n\t\t\t\t\t'label' => $row_ipandport['ip'] . ':' . $row_ipandport['port'],\n\t\t\t\t\t'value' => $row_ipandport['id']\n\t\t\t\t];\n\t\t\t}\n\n\t\t\t$ssl_ipsandports = [];\n\t\t\twhile ($row_ssl_ipandport = $result_ssl_ipsandports_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\tif (filter_var($row_ssl_ipandport['ip'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n\t\t\t\t\t$row_ssl_ipandport['ip'] = '[' . $row_ssl_ipandport['ip'] . ']';\n\t\t\t\t}\n\n\t\t\t\t$ssl_ipsandports[] = [\n\t\t\t\t\t'label' => $row_ssl_ipandport['ip'] . ':' . $row_ssl_ipandport['port'],\n\t\t\t\t\t'value' => $row_ssl_ipandport['id']\n\t\t\t\t];\n\t\t\t}\n\n\t\t\t$standardsubdomains = [];\n\t\t\t$result_standardsubdomains_stmt = Database::query(\"\n\t\t\t\t\tSELECT `id` FROM `\" . TABLE_PANEL_DOMAINS . \"` `d`, `\" . TABLE_PANEL_CUSTOMERS . \"` `c` WHERE `d`.`id` = `c`.`standardsubdomain`\n\t\t\t\t\");\n\n\t\t\twhile ($row_standardsubdomain = $result_standardsubdomains_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$standardsubdomains[$row_standardsubdomain['id']] = $row_standardsubdomain['id'];\n\t\t\t}\n\n\t\t\tif (count($standardsubdomains) > 0) {\n\t\t\t\t$standardsubdomains = \" AND `d`.`id` NOT IN (\" . join(',', $standardsubdomains) . \") \";\n\t\t\t} else {\n\t\t\t\t$standardsubdomains = '';\n\t\t\t}\n\n\t\t\t$domains = [\n\t\t\t\t0 => lng('domains.noaliasdomain')\n\t\t\t];\n\t\t\t$result_domains_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT `d`.`id`, `d`.`domain`, `c`.`loginname` FROM `\" . TABLE_PANEL_DOMAINS . \"` `d`, `\" . TABLE_PANEL_CUSTOMERS . \"` `c`\n\t\t\t\t\tWHERE `d`.`aliasdomain` IS NULL AND `d`.`parentdomainid` = 0\" . $standardsubdomains . ($userinfo['customers_see_all'] ? '' : \" AND `d`.`adminid` = :adminid\") . \"\n\t\t\t\t\tAND `d`.`customerid`=`c`.`customerid` ORDER BY `loginname`, `domain` ASC\n\t\t\t\t\");\n\t\t\t$params = [];\n\t\t\tif ($userinfo['customers_see_all'] == '0') {\n\t\t\t\t$params['adminid'] = $userinfo['adminid'];\n\t\t\t}\n\t\t\tDatabase::pexecute($result_domains_stmt, $params);\n\n\t\t\twhile ($row_domain = $result_domains_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$domains[$row_domain['id']] = $idna_convert->decode($row_domain['domain']) . ' (' . $row_domain['loginname'] . ')';\n\t\t\t}\n\n\t\t\t$subtodomains = [\n\t\t\t\t0 => lng('domains.nosubtomaindomain')\n\t\t\t];\n\t\t\t$result_domains_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT `d`.`id`, `d`.`domain`, `c`.`loginname` FROM `\" . TABLE_PANEL_DOMAINS . \"` `d`, `\" . TABLE_PANEL_CUSTOMERS . \"` `c`\n\t\t\t\t\tWHERE `d`.`aliasdomain` IS NULL AND `d`.`parentdomainid` = 0 AND `d`.`ismainbutsubto` = 0 \" . $standardsubdomains . ($userinfo['customers_see_all'] ? '' : \" AND `d`.`adminid` = :adminid\") . \"\n\t\t\t\t\tAND `d`.`customerid`=`c`.`customerid` ORDER BY `loginname`, `domain` ASC\n\t\t\t\t\");\n\t\t\t// params from above still valid\n\t\t\tDatabase::pexecute($result_domains_stmt, $params);\n\n\t\t\twhile ($row_domain = $result_domains_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$subtodomains[$row_domain['id']] = $idna_convert->decode($row_domain['domain']) . ' (' . $row_domain['loginname'] . ')';\n\t\t\t}\n\n\t\t\t$phpconfigs = [];\n\t\t\t$configs = Database::query(\"\n\t\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\t\");\n\n\t\t\twhile ($row = $configs->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t$phpconfigs[$row['id']] = $row['description'] . \" [\" . $row['interpreter'] . \"]\";\n\t\t\t\t} else {\n\t\t\t\t\t$phpconfigs[$row['id']] = $row['description'];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// create serveralias options\n\t\t\t$serveraliasoptions = [\n\t\t\t\t0 => lng('domains.serveraliasoption_wildcard'),\n\t\t\t\t1 => lng('domains.serveraliasoption_www'),\n\t\t\t\t2 => lng('domains.serveraliasoption_none')\n\t\t\t];\n\n\t\t\t$subcanemaildomain = [\n\t\t\t\t0 => lng('admin.subcanemaildomain.never'),\n\t\t\t\t1 => lng('admin.subcanemaildomain.choosableno'),\n\t\t\t\t2 => lng('admin.subcanemaildomain.choosableyes'),\n\t\t\t\t3 => lng('admin.subcanemaildomain.always')\n\t\t\t];\n\n\t\t\t$domain_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/domains/formfield.domains_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'domains']),\n\t\t\t\t'formdata' => $domain_add_data['domain_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Domains::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['domain'] != '') {\n\t\t\t$subdomains_stmt = Database::prepare(\"\n\t\t\t\tSELECT COUNT(`id`) AS count FROM `\" . TABLE_PANEL_DOMAINS . \"` WHERE\n\t\t\t\t`parentdomainid` = :resultid\n\t\t\t\");\n\t\t\t$subdomains = Database::pexecute_first($subdomains_stmt, [\n\t\t\t\t'resultid' => $result['id']\n\t\t\t]);\n\t\t\t$subdomains = $subdomains['count'];\n\n\t\t\t$alias_check_stmt = Database::prepare(\"\n\t\t\t\tSELECT COUNT(`id`) AS count FROM `\" . TABLE_PANEL_DOMAINS . \"` WHERE\n\t\t\t\t`aliasdomain` = :resultid\n\t\t\t\");\n\t\t\t$alias_check = Database::pexecute_first($alias_check_stmt, [\n\t\t\t\t'resultid' => $result['id']\n\t\t\t]);\n\t\t\t$alias_check = $alias_check['count'];\n\n\t\t\t$domain_emails_result_stmt = Database::prepare(\"\n\t\t\t\tSELECT `email`, `email_full`, `destination`, `popaccountid` AS `number_email_forwarders`\n\t\t\t\tFROM `\" . TABLE_MAIL_VIRTUAL . \"` WHERE `customerid` = :customerid AND `domainid` = :id\n\t\t\t\");\n\t\t\tDatabase::pexecute($domain_emails_result_stmt, [\n\t\t\t\t'customerid' => $result['customerid'],\n\t\t\t\t'id' => $result['id']\n\t\t\t]);\n\n\t\t\t$emails = Database::num_rows();\n\t\t\t$email_forwarders = 0;\n\t\t\t$email_accounts = 0;\n\n\t\t\twhile ($domain_emails_row = $domain_emails_result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\tif ($domain_emails_row['destination'] != '') {\n\t\t\t\t\t$domain_emails_row['destination'] = explode(' ', FileDir::makeCorrectDestination($domain_emails_row['destination']));\n\t\t\t\t\t$email_forwarders += count($domain_emails_row['destination']);\n\n\t\t\t\t\tif (in_array($domain_emails_row['email_full'], $domain_emails_row['destination'])) {\n\t\t\t\t\t\t$email_forwarders -= 1;\n\t\t\t\t\t\t$email_accounts++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$ipsresult_stmt = Database::prepare(\"\n\t\t\t\tSELECT `id_ipandports` FROM `\" . TABLE_DOMAINTOIP . \"` WHERE `id_domain` = :id\n\t\t\t\");\n\t\t\tDatabase::pexecute($ipsresult_stmt, [\n\t\t\t\t'id' => $result['id']\n\t\t\t]);\n\n\t\t\t$usedips = [];\n\t\t\twhile ($ipsresultrow = $ipsresult_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$usedips[] = $ipsresultrow['id_ipandports'];\n\t\t\t}\n\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\t// remove ssl ip/ports if set is empty\n\t\t\t\t\tif (!isset($_POST['ssl_ipandport']) || empty($_POST['ssl_ipandport'])) {\n\t\t\t\t\t\t$_POST['remove_ssl_ipandport'] = true;\n\t\t\t\t\t}\n\t\t\t\t\tDomains::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tif (Settings::Get('panel.allow_domain_change_customer') == '1') {\n\t\t\t\t\t$customers = [];\n\t\t\t\t\t$result_customers_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `customerid`, `loginname`, `name`, `firstname`, `company` FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\t\t\tWHERE ( (`subdomains_used` + :subdomains <= `subdomains` OR `subdomains` = '-1' )\n\t\t\t\t\t\tAND (`emails_used` + :emails <= `emails` OR `emails` = '-1' )\n\t\t\t\t\t\tAND (`email_forwarders_used` + :forwarders <= `email_forwarders` OR `email_forwarders` = '-1' )\n\t\t\t\t\t\tAND (`email_accounts_used` + :accounts <= `email_accounts` OR `email_accounts` = '-1' ) \" . ($userinfo['customers_see_all'] ? '' : \" AND `adminid` = :adminid \") . \")\n\t\t\t\t\t\tOR `customerid` = :customerid ORDER BY `name` ASC\n\t\t\t\t\t\");\n\t\t\t\t\t$params = [\n\t\t\t\t\t\t'subdomains' => $subdomains,\n\t\t\t\t\t\t'emails' => $emails,\n\t\t\t\t\t\t'forwarders' => $email_forwarders,\n\t\t\t\t\t\t'accounts' => $email_accounts,\n\t\t\t\t\t\t'customerid' => $result['customerid']\n\t\t\t\t\t];\n\t\t\t\t\tif ($userinfo['customers_see_all'] == '0') {\n\t\t\t\t\t\t$params['adminid'] = $userinfo['adminid'];\n\t\t\t\t\t}\n\t\t\t\t\tDatabase::pexecute($result_customers_stmt, $params);\n\n\t\t\t\t\twhile ($row_customer = $result_customers_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t\t$customers[$row_customer['customerid']] = User::getCorrectFullUserDetails($row_customer) . ' (' . $row_customer['loginname'] . ')';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$customer_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `customerid`, `loginname`, `name`, `firstname`, `company` FROM `\" . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\t\t\tWHERE `customerid` = :customerid\n\t\t\t\t\t\");\n\t\t\t\t\t$customer = Database::pexecute_first($customer_stmt, [\n\t\t\t\t\t\t'customerid' => $result['customerid']\n\t\t\t\t\t]);\n\t\t\t\t\t$result['customername'] = User::getCorrectFullUserDetails($customer);\n\t\t\t\t}\n\n\t\t\t\tif ($userinfo['customers_see_all'] == '1') {\n\t\t\t\t\tif (Settings::Get('panel.allow_domain_change_admin') == '1') {\n\t\t\t\t\t\t$admins = [];\n\t\t\t\t\t\t$result_admins_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tSELECT `adminid`, `loginname`, `name` FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\t\t\t\tWHERE (`domains_used` < `domains` OR `domains` = '-1') OR `adminid` = :adminid ORDER BY `name` ASC\n\t\t\t\t\t\t\");\n\t\t\t\t\t\tDatabase::pexecute($result_admins_stmt, [\n\t\t\t\t\t\t\t'adminid' => $result['adminid']\n\t\t\t\t\t\t]);\n\n\t\t\t\t\t\twhile ($row_admin = $result_admins_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t\t\t$admins[$row_admin['adminid']] = User::getCorrectFullUserDetails($row_admin) . ' (' . $row_admin['loginname'] . ')';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$admin_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tSELECT `adminid`, `loginname`, `name` FROM `\" . TABLE_PANEL_ADMINS . \"` WHERE `adminid` = :adminid\n\t\t\t\t\t\t\");\n\t\t\t\t\t\t$admin = Database::pexecute_first($admin_stmt, [\n\t\t\t\t\t\t\t'adminid' => $result['adminid']\n\t\t\t\t\t\t]);\n\t\t\t\t\t\t$result['adminname'] = User::getCorrectFullUserDetails($admin) . ' (' . $admin['loginname'] . ')';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$domains = [\n\t\t\t\t\t0 => lng('domains.noaliasdomain')\n\t\t\t\t];\n\n\t\t\t\t$result_domains_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT `d`.`id`, `d`.`domain`  FROM `\" . TABLE_PANEL_DOMAINS . \"` `d`, `\" . TABLE_PANEL_CUSTOMERS . \"` `c`\n\t\t\t\t\tWHERE `d`.`aliasdomain` IS NULL AND `d`.`parentdomainid` = '0' AND `d`.`id` <> :id\n\t\t\t\t\tAND `c`.`standardsubdomain`<>`d`.`id` AND `d`.`customerid` = :customerid AND `c`.`customerid`=`d`.`customerid`\n\t\t\t\t\tORDER BY `d`.`domain` ASC\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($result_domains_stmt, [\n\t\t\t\t\t'id' => $result['id'],\n\t\t\t\t\t'customerid' => $result['customerid']\n\t\t\t\t]);\n\n\t\t\t\twhile ($row_domain = $result_domains_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$domains[$row_domain['id']] = $idna_convert->decode($row_domain['domain']);\n\t\t\t\t}\n\n\t\t\t\t$subtodomains = [\n\t\t\t\t\t0 => lng('domains.nosubtomaindomain')\n\t\t\t\t];\n\t\t\t\t$result_domains_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT `d`.`id`, `d`.`domain` FROM `\" . TABLE_PANEL_DOMAINS . \"` `d`, `\" . TABLE_PANEL_CUSTOMERS . \"` `c`\n\t\t\t\t\tWHERE `d`.`aliasdomain` IS NULL AND `d`.`parentdomainid` = '0' AND `d`.`id` <> :id\n\t\t\t\t\tAND `c`.`standardsubdomain`<>`d`.`id` AND `c`.`customerid`=`d`.`customerid`\" . ($userinfo['customers_see_all'] ? '' : \" AND `d`.`adminid` = :adminid\") . \"\n\t\t\t\t\tORDER BY `d`.`domain` ASC\n\t\t\t\t\");\n\t\t\t\t$params = [\n\t\t\t\t\t'id' => $result['id']\n\t\t\t\t];\n\t\t\t\tif ($userinfo['customers_see_all'] == '0') {\n\t\t\t\t\t$params['adminid'] = $userinfo['adminid'];\n\t\t\t\t}\n\t\t\t\tDatabase::pexecute($result_domains_stmt, $params);\n\n\t\t\t\twhile ($row_domain = $result_domains_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$subtodomains[$row_domain['id']] = $idna_convert->decode($row_domain['domain']);\n\t\t\t\t}\n\n\t\t\t\tif ($userinfo['ip'] == \"-1\") {\n\t\t\t\t\t$result_ipsandports_stmt = Database::query(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `ssl`='0' ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t\t\t$result_ssl_ipsandports_stmt = Database::query(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `ssl`='1' ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t\t} else {\n\t\t\t\t\t$admin_ip_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `id` = :ipid ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t\t\t$admin_ip = Database::pexecute_first($admin_ip_stmt, [\n\t\t\t\t\t\t'ipid' => $userinfo['ip']\n\t\t\t\t\t]);\n\n\t\t\t\t\t$result_ipsandports_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `ssl`='0' AND `ip` = :ipid ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t\t\tDatabase::pexecute($result_ipsandports_stmt, [\n\t\t\t\t\t\t'ipid' => $admin_ip['ip']\n\t\t\t\t\t]);\n\n\t\t\t\t\t$result_ssl_ipsandports_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `id`, `ip`, `port` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `ssl`='1' AND `ip` = :ipid ORDER BY `ip`, `port` ASC\n\t\t\t\t\t\");\n\t\t\t\t\tDatabase::pexecute($result_ssl_ipsandports_stmt, [\n\t\t\t\t\t\t'ipid' => $admin_ip['ip']\n\t\t\t\t\t]);\n\t\t\t\t}\n\n\t\t\t\t$ipsandports = [];\n\t\t\t\twhile ($row_ipandport = $result_ipsandports_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\tif (filter_var($row_ipandport['ip'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n\t\t\t\t\t\t$row_ipandport['ip'] = '[' . $row_ipandport['ip'] . ']';\n\t\t\t\t\t}\n\t\t\t\t\t$ipsandports[] = [\n\t\t\t\t\t\t'label' => $row_ipandport['ip'] . ':' . $row_ipandport['port'],\n\t\t\t\t\t\t'value' => $row_ipandport['id']\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\t$ssl_ipsandports = [];\n\t\t\t\twhile ($row_ssl_ipandport = $result_ssl_ipsandports_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\tif (filter_var($row_ssl_ipandport['ip'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n\t\t\t\t\t\t$row_ssl_ipandport['ip'] = '[' . $row_ssl_ipandport['ip'] . ']';\n\t\t\t\t\t}\n\t\t\t\t\t$ssl_ipsandports[] = [\n\t\t\t\t\t\t'label' => $row_ssl_ipandport['ip'] . ':' . $row_ssl_ipandport['port'],\n\t\t\t\t\t\t'value' => $row_ssl_ipandport['id']\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\t// check that letsencrypt is not activated for wildcard domain\n\t\t\t\tif ($result['iswildcarddomain'] == '1') {\n\t\t\t\t\t$letsencrypt = 0;\n\t\t\t\t}\n\n\t\t\t\t// Fudge the result for ssl_redirect to hide the Let's Encrypt steps\n\t\t\t\t$result['temporary_ssl_redirect'] = $result['ssl_redirect'];\n\t\t\t\t$result['ssl_redirect'] = ($result['ssl_redirect'] == 0 ? 0 : 1);\n\n\t\t\t\t$serveraliasoptions = [\n\t\t\t\t\t0 => lng('domains.serveraliasoption_wildcard'),\n\t\t\t\t\t1 => lng('domains.serveraliasoption_www'),\n\t\t\t\t\t2 => lng('domains.serveraliasoption_none')\n\t\t\t\t];\n\n\t\t\t\t$subcanemaildomain = [\n\t\t\t\t\t0 => lng('admin.subcanemaildomain.never'),\n\t\t\t\t\t1 => lng('admin.subcanemaildomain.choosableno'),\n\t\t\t\t\t2 => lng('admin.subcanemaildomain.choosableyes'),\n\t\t\t\t\t3 => lng('admin.subcanemaildomain.always')\n\t\t\t\t];\n\n\t\t\t\t$phpconfigs = [];\n\t\t\t\t$phpconfigs_result_stmt = Database::query(\"\n\t\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\t\");\n\t\t\t\t$c_allowed_configs = Customer::getCustomerDetail($result['customerid'], 'allowed_phpconfigs');\n\t\t\t\tif (!empty($c_allowed_configs)) {\n\t\t\t\t\t$c_allowed_configs = json_decode($c_allowed_configs, true);\n\t\t\t\t} else {\n\t\t\t\t\t$c_allowed_configs = [];\n\t\t\t\t}\n\n\t\t\t\twhile ($phpconfigs_row = $phpconfigs_result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$disabled = !empty($c_allowed_configs) && !in_array($phpconfigs_row['id'], $c_allowed_configs);\n\t\t\t\t\tif (!$disabled) {\n\t\t\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t\t\t$phpconfigs[$phpconfigs_row['id']] = $phpconfigs_row['description'] . \" [\" . $phpconfigs_row['interpreter'] . \"]\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$phpconfigs[$phpconfigs_row['id']] = $phpconfigs_row['description'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (Settings::Get('panel.allow_domain_change_customer') != '1') {\n\t\t\t\t\t$result['customername'] .= ' (<a href=\"' . $linker->getLink([\n\t\t\t\t\t\t\t'section' => 'customers',\n\t\t\t\t\t\t\t'page' => 'customers',\n\t\t\t\t\t\t\t'action' => 'su',\n\t\t\t\t\t\t\t'id' => $customer['customerid']\n\t\t\t\t\t\t]) . '\" rel=\"external\">' . $customer['loginname'] . '</a>)';\n\t\t\t\t}\n\n\t\t\t\t$domain_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/domains/formfield.domains_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'domains', 'id' => $id]),\n\t\t\t\t\t'formdata' => $domain_edit_data['domain_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'jqGetCustomerPHPConfigs') {\n\t\t$customerid = intval($_POST['customerid']);\n\t\t$allowed_phpconfigs = Customer::getCustomerDetail($customerid, 'allowed_phpconfigs');\n\t\techo !empty($allowed_phpconfigs) ? $allowed_phpconfigs : json_encode([]);\n\t\texit();\n\t} elseif ($action == 'jqSpeciallogfileNote') {\n\t\t$domainid = intval($_POST['id']);\n\t\t$newval = intval($_POST['newval']);\n\t\ttry {\n\t\t\t$json_result = Domains::getLocal($userinfo, [\n\t\t\t\t'id' => $domainid\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\t\tif ($newval != $result['speciallogfile']) {\n\t\t\techo json_encode(['changed' => true, 'info' => lng('admin.speciallogwarning')]);\n\t\t\texit();\n\t\t}\n\t\techo 0;\n\t\texit();\n\t} elseif ($action == 'import') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t$separator = Validate::validate($_POST['separator'], 'separator');\n\t\t\t$offset = (int)Validate::validate($_POST['offset'], 'offset', \"/[0-9]/i\");\n\n\t\t\t$file_name = $_FILES['file']['tmp_name'];\n\n\t\t\t$result = [];\n\n\t\t\ttry {\n\t\t\t\t$bulk = new DomainBulkAction($file_name, $userinfo);\n\t\t\t\t$result = $bulk->doImport($separator, $offset);\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::standardError('domain_import_error', $e->getMessage());\n\t\t\t}\n\n\t\t\tif (!empty($bulk->getErrors())) {\n\t\t\t\tResponse::dynamicError(implode(\"<br>\", $bulk->getErrors()));\n\t\t\t}\n\n\t\t\t// update customer/admin counters\n\t\t\tUser::updateCounters(false);\n\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\tCronjob::inserttask(TaskId::REBUILD_DNS);\n\n\t\t\t$result_str = $result['imported'] . ' / ' . $result['all'] . (!empty($result['note']) ? ' (' . $result['note'] . ')' : '');\n\t\t\tResponse::standardSuccess('domain_import_successfully', $result_str, [\n\t\t\t\t'filename' => $filename,\n\t\t\t\t'action' => '',\n\t\t\t\t'page' => 'domains'\n\t\t\t]);\n\t\t} else {\n\t\t\t$domain_import_data = include_once dirname(__FILE__) . '/lib/formfields/admin/domains/formfield.domains_import.php';\n\n\t\t\tUI::view('user/form-note.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'domains', 'page' => $page]),\n\t\t\t\t'formdata' => $domain_import_data['domain_import'],\n\t\t\t\t// alert-box\n\t\t\t\t'type' => 'info',\n\t\t\t\t'alert_msg' => lng('domains.import_description')\n\t\t\t]);\n\t\t}\n\t}\n} elseif ($page == 'domainssleditor') {\n\trequire_once __DIR__ . '/ssl_editor.php';\n} elseif ($page == 'domaindnseditor' && Settings::Get('system.dnsenabled') == '1') {\n\trequire_once __DIR__ . '/dns_editor.php';\n} elseif ($page == 'sslcertificates') {\n\trequire_once __DIR__ . '/ssl_certificates.php';\n} elseif ($page == 'logfiles') {\n\trequire_once __DIR__ . '/logfiles_viewer.php';\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Admins as Admins;\nuse Froxlor\\Api\\Commands\\Froxlor as Froxlor;\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Cronjob;\nuse Froxlor\\System\\Crypt;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Validate;\nuse Froxlor\\Language;\n\n$id = (int)Request::any('id');\n\nif ($action == 'logout') {\n\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"logged out\");\n\tunset($_SESSION['userinfo']);\n\tCurrentUser::setData();\n\tsession_destroy();\n\n\tResponse::redirectTo('index.php');\n} elseif ($action == 'suback') {\n\tif (is_array(CurrentUser::getField('switched_user'))) {\n\t\t$result = CurrentUser::getData();\n\t\t$result = $result['switched_user'];\n\t\tCurrentUser::setData($result);\n\t\t$target = (isset($_GET['target']) ? $_GET['target'] : 'index');\n\t\t$redirect = \"admin_\" . $target . \".php\";\n\t\tif (!file_exists(\\Froxlor\\Froxlor::getInstallDir() . \"/\" . $redirect)) {\n\t\t\t$redirect = \"admin_index.php\";\n\t\t}\n\t\tResponse::redirectTo($redirect, null, true);\n\t} else {\n\t\tResponse::dynamicError(\"Cannot change back - You've never switched to another user :-)\");\n\t}\n}\n\nif ($page == 'overview') {\n\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_index\");\n\t$params = [];\n\tif ($userinfo['customers_see_all'] == '0') {\n\t\t$params = [\n\t\t\t'adminid' => $userinfo['adminid']\n\t\t];\n\t}\n\t$overview_stmt = Database::prepare(\"SELECT COUNT(*) AS `number_customers`,\n\t\t\t\tSUM(case when `diskspace` > 0 then `diskspace` else 0 end) AS `diskspace_assigned`,\n\t\t\t\tSUM(`diskspace_used`) AS `diskspace_used`,\n\t\t\t\tSUM(case when `mysqls` > 0 then `mysqls` else 0 end) AS `mysqls_assigned`,\n\t\t\t\tSUM(`mysqls_used`) AS `mysqls_used`,\n\t\t\t\tSUM(case when `emails` > 0 then `emails` else 0 end) AS `emails_assigned`,\n\t\t\t\tSUM(`emails_used`) AS `emails_used`,\n\t\t\t\tSUM(case when `email_accounts` > 0 then `email_accounts` else 0 end) AS `email_accounts_assigned`,\n\t\t\t\tSUM(`email_accounts_used`) AS `email_accounts_used`,\n\t\t\t\tSUM(case when `email_forwarders` > 0 then `email_forwarders` else 0 end) AS `email_forwarders_assigned`,\n\t\t\t\tSUM(`email_forwarders_used`) AS `email_forwarders_used`,\n\t\t\t\tSUM(case when `email_quota` > 0 then `email_quota` else 0 end) AS `email_quota_assigned`,\n\t\t\t\tSUM(`email_quota_used`) AS `email_quota_used`,\n\t\t\t\tSUM(case when `ftps` > 0 then `ftps` else 0 end) AS `ftps_assigned`,\n\t\t\t\tSUM(`ftps_used`) AS `ftps_used`,\n\t\t\t\tSUM(case when `subdomains` > 0 then `subdomains` else 0 end) AS `subdomains_assigned`,\n\t\t\t\tSUM(`subdomains_used`) AS `subdomains_used`,\n\t\t\t\tSUM(case when `traffic` > 0 then `traffic` else 0 end) AS `traffic_assigned`,\n\t\t\t\tSUM(`traffic_used`) AS `traffic_used`\n\t\t\t\tFROM `\" . TABLE_PANEL_CUSTOMERS . \"`\" . ($userinfo['customers_see_all'] ? '' : \" WHERE `adminid` = :adminid \"));\n\t$overview = Database::pexecute_first($overview_stmt, $params);\n\n\t$userinfo['diskspace_bytes'] = ($userinfo['diskspace'] > -1) ? $userinfo['diskspace'] * 1024 : -1;\n\t$overview['diskspace_bytes'] = $overview['diskspace_assigned'] * 1024;\n\t$overview['diskspace_bytes_used'] = $overview['diskspace_used'] * 1024;\n\n\t$userinfo['traffic_bytes'] = ($userinfo['traffic'] > -1) ? $userinfo['traffic'] * 1024 : -1;\n\t$overview['traffic_bytes'] = $overview['traffic_assigned'] * 1024;\n\t$overview['traffic_bytes_used'] = $overview['traffic_used'] * 1024;\n\n\t$number_domains_stmt = Database::prepare(\"\n\t\tSELECT COUNT(*) AS `number_domains` FROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\tWHERE `parentdomainid`='0'\" . ($userinfo['customers_see_all'] ? '' : \" AND `adminid` = :adminid\"));\n\t$number_domains = Database::pexecute_first($number_domains_stmt, $params);\n\n\t$overview['number_domains'] = $number_domains['number_domains'];\n\n\tif ((isset($_GET['lookfornewversion']) && $_GET['lookfornewversion'] == 'yes') || (isset($lookfornewversion) && $lookfornewversion == 'yes')) {\n\t\ttry {\n\t\t\t$json_result = Froxlor::getLocal($userinfo)->checkUpdate();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\t$lookfornewversion_lable = $result['version'];\n\t\t$lookfornewversion_link = $result['link'];\n\t\t$lookfornewversion_message = $result['message'];\n\t\t$lookfornewversion_addinfo = $result['additional_info'];\n\t\t$isnewerversion = $result['isnewerversion'];\n\t} else {\n\t\t$lookfornewversion_lable = lng('admin.lookfornewversion.clickhere');\n\t\t$lookfornewversion_link = htmlspecialchars($filename . '?page=' . urlencode($page) . '&lookfornewversion=yes');\n\t\t$lookfornewversion_message = '';\n\t\t$lookfornewversion_addinfo = '';\n\t\t$isnewerversion = 0;\n\t}\n\n\t$cron_last_runs = Cronjob::getCronjobsLastRun();\n\t$outstanding_tasks = Cronjob::getOutstandingTasks();\n\n\t// additional sys-infos\n\t$meminfo = explode(\"\\n\", @file_get_contents(\"/proc/meminfo\"));\n\t$memory = \"\";\n\tfor ($i = 0; $i < count($meminfo); ++$i) {\n\t\tif (substr($meminfo[$i], 0, 3) === \"Mem\") {\n\t\t\t$memory .= $meminfo[$i] . PHP_EOL;\n\t\t}\n\t}\n\n\tif (function_exists('sys_getloadavg')) {\n\t\t$loadArray = sys_getloadavg();\n\t\t$load = number_format($loadArray[0], 2, '.', '') . \" / \" . number_format($loadArray[1], 2, '.', '') . \" / \" . number_format($loadArray[2], 2, '.', '');\n\t} else {\n\t\t$load = @file_get_contents('/proc/loadavg');\n\t\tif (!$load) {\n\t\t\t$load = lng('admin.noloadavailable');\n\t\t}\n\t}\n\n\t$kernel = '';\n\tif (function_exists('posix_uname')) {\n\t\t$kernel_nfo = posix_uname();\n\t\t$kernel = $kernel_nfo['release'] . ' (' . $kernel_nfo['machine'] . ')';\n\t}\n\n\t// Try to get the uptime\n\t// First: With exec (let's hope it's enabled for the Froxlor - vHost)\n\t$uptime_array = explode(\" \", @file_get_contents(\"/proc/uptime\"));\n\t$uptime = '';\n\tif (is_array($uptime_array) && isset($uptime_array[0]) && is_numeric($uptime_array[0])) {\n\t\t// Some calculatioon to get a nicly formatted display\n\t\t$seconds = round($uptime_array[0], 0);\n\t\t$minutes = $seconds / 60;\n\t\t$hours = $minutes / 60;\n\t\t$days = floor($hours / 24);\n\t\t$hours = floor($hours - ($days * 24));\n\t\t$minutes = floor($minutes - ($days * 24 * 60) - ($hours * 60));\n\t\t$seconds = floor($seconds - ($days * 24 * 60 * 60) - ($hours * 60 * 60) - ($minutes * 60));\n\t\t$uptime = \"{$days}d, {$hours}h, {$minutes}m, {$seconds}s\";\n\t\t// Just cleanup\n\t\tunset($uptime_array, $seconds, $minutes, $hours, $days);\n\t}\n\n\t$sysinfo = [\n\t\t'webserver' => $_SERVER['SERVER_SOFTWARE'] ?? 'unknown',\n\t\t'phpversion' => phpversion(),\n\t\t'mysqlserverversion' => Database::getAttribute(PDO::ATTR_SERVER_VERSION),\n\t\t'phpsapi' => strtoupper(@php_sapi_name()),\n\t\t'hostname' => gethostname(),\n\t\t'memory' => $memory,\n\t\t'load' => $load,\n\t\t'kernel' => $kernel,\n\t\t'uptime' => $uptime\n\t];\n\n\tUI::twig()->addGlobal('userinfo', $userinfo);\n\tUI::view('user/index.html.twig', [\n\t\t'sysinfo' => $sysinfo,\n\t\t'overview' => $overview,\n\t\t'outstanding_tasks' => $outstanding_tasks,\n\t\t'cron_last_runs' => $cron_last_runs\n\t]);\n} elseif ($page == 'change_password') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$old_password = Validate::validate($_POST['old_password'], 'old password');\n\n\t\tif (!Crypt::validatePasswordLogin($userinfo, $old_password, TABLE_PANEL_ADMINS, 'adminid')) {\n\t\t\tResponse::standardError('oldpasswordnotcorrect');\n\t\t}\n\n\t\ttry {\n\t\t\t$new_password = Crypt::validatePassword($_POST['new_password'], 'new password');\n\t\t\t$new_password_confirm = Crypt::validatePassword($_POST['new_password_confirm'], 'new password confirm');\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tif ($old_password == '') {\n\t\t\tResponse::standardError([\n\t\t\t\t'stringisempty',\n\t\t\t\t'changepassword.old_password'\n\t\t\t]);\n\t\t} elseif ($new_password == '') {\n\t\t\tResponse::standardError([\n\t\t\t\t'stringisempty',\n\t\t\t\t'changepassword.new_password'\n\t\t\t]);\n\t\t} elseif ($new_password_confirm == '') {\n\t\t\tResponse::standardError([\n\t\t\t\t'stringisempty',\n\t\t\t\t'changepassword.new_password_confirm'\n\t\t\t]);\n\t\t} elseif ($new_password != $new_password_confirm) {\n\t\t\tResponse::standardError('newpasswordconfirmerror');\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tAdmins::getLocal($userinfo, [\n\t\t\t\t\t'id' => $userinfo['adminid'],\n\t\t\t\t\t'admin_password' => $new_password\n\t\t\t\t])->update();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, 'changed password');\n\t\t\tResponse::redirectTo($filename);\n\t\t}\n\t} else {\n\t\tUI::view('user/change_password.html.twig');\n\t}\n} elseif ($page == 'change_language') {\n\t$languages = Language::getLanguages();\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$def_language = Validate::validate($_POST['def_language'], 'default language');\n\n\t\tif (isset($languages[$def_language])) {\n\t\t\ttry {\n\t\t\t\tAdmins::getLocal($userinfo, [\n\t\t\t\t\t'id' => $userinfo['adminid'],\n\t\t\t\t\t'def_language' => $def_language\n\t\t\t\t])->update();\n\t\t\t\tCurrentUser::setField('language', $def_language);\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t}\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"changed his/her default language to '\" . $def_language . \"'\");\n\t\tResponse::redirectTo($filename);\n\t} else {\n\t\t$default_lang = Settings::Get('panel.standardlanguage');\n\t\tif ($userinfo['def_language'] != '') {\n\t\t\t$default_lang = $userinfo['def_language'];\n\t\t}\n\n\t\tUI::view('user/change_language.html.twig', [\n\t\t\t'languages' => $languages,\n\t\t\t'default_lang' => $default_lang\n\t\t]);\n\t}\n} elseif ($page == 'change_theme') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$theme = Validate::validate($_POST['theme'], 'theme');\n\t\ttry {\n\t\t\tAdmins::getLocal($userinfo, [\n\t\t\t\t'id' => $userinfo['adminid'],\n\t\t\t\t'theme' => $theme\n\t\t\t])->update();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"changed his/her theme to '\" . $theme . \"'\");\n\t\tResponse::redirectTo($filename);\n\t} else {\n\t\t$default_theme = Settings::Get('panel.default_theme');\n\t\tif ($userinfo['theme'] != '') {\n\t\t\t$default_theme = $userinfo['theme'];\n\t\t}\n\n\t\t$themes_avail = UI::getThemes();\n\n\t\tUI::view('user/change_theme.html.twig', [\n\t\t\t'themes' => $themes_avail,\n\t\t\t'default_theme' => $default_theme\n\t\t]);\n\t}\n} elseif ($page == 'send_error_report' && Settings::Get('system.allow_error_report_admin') == '1') {\n\trequire_once __DIR__ . '/error_report.php';\n} elseif ($page == 'apikeys' && Settings::Get('api.enabled') == 1) {\n\trequire_once __DIR__ . '/api_keys.php';\n} elseif ($page == '2fa' && Settings::Get('2fa.enabled') == 1) {\n\trequire_once __DIR__ . '/2fa.php';\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\IpsAndPorts;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::any('id');\n\nif ($page == 'ipsandports' || $page == 'overview') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_ipsandports\");\n\n\t\ttry {\n\t\t\t$ipsandports_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.ipsandports.php';\n\t\t\t$collection = (new Collection(IpsAndPorts::class, $userinfo))\n\t\t\t\t->withPagination($ipsandports_list_data['ipsandports_list']['columns'], $ipsandports_list_data['ipsandports_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $ipsandports_list_data, 'ipsandports_list'),\n\t\t\t'actions_links' => [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'ipsandports', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.ipsandports.add')\n\t\t\t\t]\n\t\t\t]\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = IpsAndPorts::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['id']) && $result['id'] == $id) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tIpsAndPorts::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t])->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('admin_ip_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['ip'] . ':' . $result['port']);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tIpsAndPorts::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$ipsandports_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/ipsandports/formfield.ipsandports_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'ipsandports']),\n\t\t\t\t'formdata' => $ipsandports_add_data['ipsandports_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = IpsAndPorts::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['ip'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tIpsAndPorts::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$ipsandports_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/ipsandports/formfield.ipsandports_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'ipsandports', 'id' => $id]),\n\t\t\t\t\t'formdata' => $ipsandports_edit_data['ipsandports_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'jqCheckIP') {\n\t\t$ip = $_POST['ip'] ?? \"\";\n\t\tif ((filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) || filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) && filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_RES_RANGE | FILTER_FLAG_NO_PRIV_RANGE) == false) {\n\t\t\t// returns notice if private network detected so we can display it\n\t\t\techo json_encode(lng('admin.ipsandports.ipnote'));\n\t\t} else {\n\t\t\techo 0;\n\t\t}\n\t\texit();\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\User;\n\n$id = (int)Request::any('id');\n\n$note_type = null;\n$note_msg = null;\n\nif ($page == 'message') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, 'viewed panel_message');\n\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\tif ($_POST['recipient'] == 0 && $userinfo['customers_see_all'] == '1') {\n\t\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, 'sending messages to admins');\n\t\t\t\t$result = Database::query('SELECT `name`, `email`  FROM `' . TABLE_PANEL_ADMINS . \"`\");\n\t\t\t} elseif ($_POST['recipient'] == 1) {\n\t\t\t\tif ($userinfo['customers_see_all'] == '1') {\n\t\t\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, 'sending messages to ALL customers');\n\t\t\t\t\t$result = Database::query('SELECT `firstname`, `name`, `company`, `email`  FROM `' . TABLE_PANEL_CUSTOMERS . \"`\");\n\t\t\t\t} else {\n\t\t\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, 'sending messages to customers');\n\t\t\t\t\t$result = Database::prepare('\n\t\t\t\t\t\tSELECT `firstname`, `name`, `company`, `email`  FROM `' . TABLE_PANEL_CUSTOMERS . \"`\n\t\t\t\t\t\tWHERE `adminid` = :adminid\");\n\t\t\t\t\tDatabase::pexecute($result, [\n\t\t\t\t\t\t'adminid' => $userinfo['adminid']\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tResponse::standardError('norecipientsgiven');\n\t\t\t}\n\n\t\t\t$subject = $_POST['subject'];\n\t\t\t$message = wordwrap($_POST['message'], 70);\n\n\t\t\tif (!empty($message)) {\n\t\t\t\t$mailcounter = 0;\n\t\t\t\t$mail->Body = $message;\n\t\t\t\t$mail->Subject = $subject;\n\n\t\t\t\twhile ($row = $result->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$row['firstname'] = isset($row['firstname']) ? $row['firstname'] : '';\n\t\t\t\t\t$row['company'] = isset($row['company']) ? $row['company'] : '';\n\t\t\t\t\t$mail->AddAddress($row['email'], User::getCorrectUserSalutation([\n\t\t\t\t\t\t'firstname' => $row['firstname'],\n\t\t\t\t\t\t'name' => $row['name'],\n\t\t\t\t\t\t'company' => $row['company']\n\t\t\t\t\t]));\n\t\t\t\t\t$mail->From = $userinfo['email'];\n\t\t\t\t\t$mail->FromName = (isset($userinfo['firstname']) ? $userinfo['firstname'] . ' ' : '') . $userinfo['name'];\n\n\t\t\t\t\tif (!$mail->Send()) {\n\t\t\t\t\t\tif ($mail->ErrorInfo != '') {\n\t\t\t\t\t\t\t$mailerr_msg = $mail->ErrorInfo;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$mailerr_msg = $row['email'];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_ERR, 'Error sending mail: ' . $mailerr_msg);\n\t\t\t\t\t\tResponse::standardError('errorsendingmail', $row['email']);\n\t\t\t\t\t}\n\n\t\t\t\t\t$mailcounter++;\n\t\t\t\t\t$mail->ClearAddresses();\n\t\t\t\t}\n\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => 'showsuccess',\n\t\t\t\t\t'sentitems' => $mailcounter\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tResponse::standardError('nomessagetosend');\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'showsuccess') {\n\t\t$sentitems = isset($_GET['sentitems']) ? (int)$_GET['sentitems'] : 0;\n\n\t\tif ($sentitems == 0) {\n\t\t\t$note_type = 'info';\n\t\t\t$note_msg = lng('message.norecipients');\n\t\t} else {\n\t\t\t$note_type = 'success';\n\t\t\t$note_msg = str_replace('%s', $sentitems, lng('message.success'));\n\t\t}\n\t}\n\n\t$recipients = [];\n\n\tif ($userinfo['customers_see_all'] == '1') {\n\t\t$recipients[0] = lng('panel.reseller');\n\t}\n\t$recipients[1] = lng('panel.customer');\n\n\t$messages_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/messages/formfield.messages_add.php';\n\n\tUI::view('user/form-note.html.twig', [\n\t\t'formaction' => $linker->getLink(['section' => 'message']),\n\t\t'formdata' => $messages_add_data['messages_add'],\n\t\t'actions_links' => [\n\t\t\t[\n\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t'section' => 'settings',\n\t\t\t\t\t'page' => 'overview',\n\t\t\t\t\t'part' => 'system',\n\t\t\t\t\t'em' => 'system_mail_use_smtp'\n\t\t\t\t]),\n\t\t\t\t'label' => lng('admin.smtpsettings'),\n\t\t\t\t'icon' => 'fa-solid fa-gears',\n\t\t\t\t'class' => 'btn-outline-secondary'\n\t\t\t]\n\t\t],\n\t\t// alert-box\n\t\t'type' => $note_type,\n\t\t'alert_msg' => $note_msg\n\t]);\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\MysqlServer;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::any('id');\n\nif ($page == 'mysqlserver' || $page == 'overview') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_mysqlserver\");\n\n\t\ttry {\n\t\t\t$mysqlserver_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.mysqlserver.php';\n\t\t\t$collection = (new Collection(MysqlServer::class, $userinfo))\n\t\t\t\t->withPagination($mysqlserver_list_data['mysqlserver_list']['columns'], $mysqlserver_list_data['mysqlserver_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $mysqlserver_list_data, 'mysqlserver_list'),\n\t\t\t'actions_links' => [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'mysqlserver', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.mysqlserver.add')\n\t\t\t\t]\n\t\t\t]\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = MysqlServer::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['id']) && $result['id'] == $id) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tMysqlServer::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t])->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('admin_mysqlserver_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['caption'] . ' (' . $result['host'] . ')');\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tMysqlServer::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$mysqlserver_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/mysqlserver/formfield.mysqlserver_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'mysqlserver']),\n\t\t\t\t'formdata' => $mysqlserver_add_data['mysqlserver_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id >= 0) {\n\t\ttry {\n\t\t\t$json_result = MysqlServer::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['id']) && $result['id'] == $id) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tMysqlServer::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$mysqlserver_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/mysqlserver/formfield.mysqlserver_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'mysqlserver', 'id' => $id]),\n\t\t\t\t\t'formdata' => $mysqlserver_edit_data['mysqlserver_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\FpmDaemons;\nuse Froxlor\\Api\\Commands\\PhpSettings;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Froxlor;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::any('id');\n\nif ($page == 'overview') {\n\tif ($action == '') {\n\t\ttry {\n\t\t\t$phpconf_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.phpconfigs.php';\n\t\t\t$collection = (new Collection(PhpSettings::class, $userinfo, ['with_subdomains' => true]))\n\t\t\t\t->withPagination($phpconf_list_data['phpconf_list']['columns'], $phpconf_list_data['phpconf_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $phpconf_list_data, 'phpconf_list'),\n\t\t\t'actions_links' => (bool)$userinfo['change_serversettings'] ? [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'phpsettings', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.phpsettings.addnew')\n\t\t\t\t]\n\t\t\t] : []\n\t\t]);\n\t}\n\n\tif ($action == 'add') {\n\t\tif ((int)$userinfo['change_serversettings'] == 1) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tPhpSettings::getLocal($userinfo, $_POST)->add();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tif (file_exists(Froxlor::getInstallDir() . '/templates/misc/php/default.ini.php')) {\n\t\t\t\t\tinclude Froxlor::getInstallDir() . '/templates/misc/php/default.ini.php';\n\t\t\t\t\t$result = [\n\t\t\t\t\t\t'phpsettings' => $phpini\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\t// use first php-config as fallback\n\t\t\t\t\t$result_stmt = Database::query(\"SELECT * FROM `\" . TABLE_PANEL_PHPCONFIGS . \"` WHERE `id` = 1\");\n\t\t\t\t\t$result = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\t}\n\n\t\t\t\t$fpmconfigs = [];\n\t\t\t\t$configs = Database::query(\"SELECT * FROM `\" . TABLE_PANEL_FPMDAEMONS . \"` ORDER BY `description` ASC\");\n\t\t\t\twhile ($row = $configs->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$fpmconfigs[$row['id']] = $row['description'];\n\t\t\t\t}\n\n\t\t\t\t$phpconfig_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/phpconfig/formfield.phpconfig_add.php';\n\n\t\t\t\tUI::view('user/form-replacers.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'phpsettings']),\n\t\t\t\t\t'formdata' => $phpconfig_add_data['phpconfig_add'],\n\t\t\t\t\t'replacers' => $phpconfig_add_data['phpconfig_replacers']\n\t\t\t\t]);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('nopermissionsorinvalidid');\n\t\t}\n\t}\n\n\tif ($action == 'delete') {\n\t\ttry {\n\t\t\t$json_result = PhpSettings::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['id'] != 0 && $result['id'] == $id && (int)$userinfo['change_serversettings'] == 1 && $id != 1) // cannot delete the default php.config\n\t\t{\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tPhpSettings::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t])->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('phpsetting_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['description']);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('nopermissionsorinvalidid');\n\t\t}\n\t}\n\n\tif ($action == 'edit') {\n\t\ttry {\n\t\t\t$json_result = PhpSettings::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['id'] != 0 && $result['id'] == $id && (int)$userinfo['change_serversettings'] == 1) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tPhpSettings::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$fpmconfigs = [];\n\t\t\t\t$configs = Database::query(\"SELECT * FROM `\" . TABLE_PANEL_FPMDAEMONS . \"` ORDER BY `description` ASC\");\n\t\t\t\twhile ($row = $configs->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$fpmconfigs[$row['id']] = $row['description'];\n\t\t\t\t}\n\n\t\t\t\t$phpconfig_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/phpconfig/formfield.phpconfig_edit.php';\n\n\t\t\t\tUI::view('user/form-replacers.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'phpsettings', 'id' => $id]),\n\t\t\t\t\t'formdata' => $phpconfig_edit_data['phpconfig_edit'],\n\t\t\t\t\t'replacers' => $phpconfig_edit_data['phpconfig_replacers'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('nopermissionsorinvalidid');\n\t\t}\n\t}\n} elseif ($page == 'fpmdaemons') {\n\tif ($action == '') {\n\t\ttry {\n\t\t\t$fpmconf_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.fpmconfigs.php';\n\t\t\t$collection = (new Collection(FpmDaemons::class, $userinfo))\n\t\t\t\t->withPagination($fpmconf_list_data['fpmconf_list']['columns'], $fpmconf_list_data['fpmconf_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $fpmconf_list_data, 'fpmconf_list'),\n\t\t\t'actions_links' => (bool)$userinfo['change_serversettings'] ? [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'phpsettings', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.fpmsettings.addnew')\n\t\t\t\t]\n\t\t\t] : []\n\t\t]);\n\t}\n\n\tif ($action == 'add') {\n\t\tif ((int)$userinfo['change_serversettings'] == 1) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tFpmDaemons::getLocal($userinfo, $_POST)->add();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$fpmconfig_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/phpconfig/formfield.fpmconfig_add.php';\n\n\t\t\t\tUI::view('user/form-replacers.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'phpsettings', 'page' => 'fpmdaemons']),\n\t\t\t\t\t'formdata' => $fpmconfig_add_data['fpmconfig_add'],\n\t\t\t\t\t'replacers' => $fpmconfig_add_data['fpmconfig_replacers']\n\t\t\t\t]);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('nopermissionsorinvalidid');\n\t\t}\n\t}\n\n\tif ($action == 'delete') {\n\t\ttry {\n\t\t\t$json_result = FpmDaemons::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($id == 1) {\n\t\t\tResponse::standardError('cannotdeletedefaultphpconfig');\n\t\t}\n\n\t\tif ($result['id'] != 0 && $result['id'] == $id && (int)$userinfo['change_serversettings'] == 1 && $id != 1) // cannot delete the default php.config\n\t\t{\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tFpmDaemons::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('fpmsetting_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['description']);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('nopermissionsorinvalidid');\n\t\t}\n\t}\n\n\tif ($action == 'edit') {\n\t\ttry {\n\t\t\t$json_result = FpmDaemons::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['id'] != 0 && $result['id'] == $id && (int)$userinfo['change_serversettings'] == 1) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tFpmDaemons::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$fpmconfig_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/phpconfig/formfield.fpmconfig_edit.php';\n\n\t\t\t\tUI::view('user/form-replacers.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'phpsettings', 'page' => 'fpmdaemons', 'id' => $id]),\n\t\t\t\t\t'formdata' => $fpmconfig_edit_data['fpmconfig_edit'],\n\t\t\t\t\t'replacers' => $fpmconfig_edit_data['fpmconfig_replacers'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('nopermissionsorinvalidid');\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\HostingPlans;\nuse Froxlor\\Api\\Commands\\MysqlServer;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::any('id');\n\nif ($page == '' || $page == 'overview') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_plans\");\n\n\t\ttry {\n\t\t\t$plan_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.plans.php';\n\t\t\t$collection = (new Collection(HostingPlans::class, $userinfo))\n\t\t\t\t->withPagination($plan_list_data['plan_list']['columns'], $plan_list_data['plan_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $plan_list_data, 'plan_list'),\n\t\t\t'actions_links' => [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'plans', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.plans.add')\n\t\t\t\t]\n\t\t\t]\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = HostingPlans::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['id'] != 0 && $result['id'] == $id && (int)$userinfo['adminid'] == $result['adminid']) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tHostingPlans::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t])->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('plan_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['name']);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('nopermissionsorinvalidid');\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tHostingPlans::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$mysql_servers = [];\n\t\t\ttry {\n\t\t\t\t$result_json = MysqlServer::getLocal($userinfo)->listing();\n\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\tforeach ($result_decoded as $dbserver => $dbdata) {\n\t\t\t\t\t$mysql_servers[] = [\n\t\t\t\t\t\t'label' => $dbdata['caption'],\n\t\t\t\t\t\t'value' => $dbserver\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t} catch (Exception $e) {\n\t\t\t\t/* just none */\n\t\t\t}\n\n\t\t\t$phpconfigs = [];\n\t\t\t$configs = Database::query(\"\n\t\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\t\");\n\t\t\twhile ($row = $configs->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t'label' => $row['description'] . \" [\" . $row['interpreter'] . \"]\",\n\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t'label' => $row['description'],\n\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// dummy to avoid unknown variables\n\t\t\t$hosting_plans = null;\n\n\t\t\t$plans_add_data = include_once __DIR__ . '/lib/formfields/admin/plans/formfield.plans_add.php';\n\t\t\t$cust_add_data = include_once __DIR__ . '/lib/formfields/admin/customer/formfield.customer_add.php';\n\t\t\t// unset unneeded stuff\n\t\t\tunset($cust_add_data['customer_add']['sections']['section_a']);\n\t\t\tunset($cust_add_data['customer_add']['sections']['section_b']);\n\t\t\tunset($cust_add_data['customer_add']['sections']['section_cpre']);\n\t\t\t// merge\n\t\t\t$plans_add_data['plans_add']['sections'] = array_merge($plans_add_data['plans_add']['sections'], $cust_add_data['customer_add']['sections']);\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'plans']),\n\t\t\t\t'formdata' => $plans_add_data['plans_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = HostingPlans::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['name'] != '') {\n\t\t\t$result['value'] = json_decode($result['value'], true);\n\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\tforeach ($result['value'] as $index => $value) {\n\t\t\t\t$result[$index] = $value;\n\t\t\t}\n\t\t\t$result['allowed_phpconfigs'] = json_encode($result['allowed_phpconfigs']);\n\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tHostingPlans::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$mysql_servers = [];\n\t\t\t\ttry {\n\t\t\t\t\t$result_json = MysqlServer::getLocal($userinfo)->listing();\n\t\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\t\tforeach ($result_decoded as $dbserver => $dbdata) {\n\t\t\t\t\t\t$mysql_servers[] = [\n\t\t\t\t\t\t\t'label' => $dbdata['caption'],\n\t\t\t\t\t\t\t'value' => $dbserver\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t/* just none */\n\t\t\t\t}\n\n\t\t\t\t$phpconfigs = [];\n\t\t\t\t$configs = Database::query(\"\n\t\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\t\");\n\t\t\t\twhile ($row = $configs->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t\t'label' => $row['description'] . \" [\" . $row['interpreter'] . \"]\",\n\t\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t\t];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$phpconfigs[] = [\n\t\t\t\t\t\t\t'label' => $row['description'],\n\t\t\t\t\t\t\t'value' => $row['id']\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$result['imap'] = $result['email_imap'];\n\t\t\t\t$result['pop3'] = $result['email_pop3'];\n\n\t\t\t\t// dummy to avoid unknown variables\n\t\t\t\t$result['loginname'] = null;\n\t\t\t\t$result['documentroot'] = null;\n\t\t\t\t$result['standardsubdomain'] = null;\n\t\t\t\t$result['deactivated'] = null;\n\t\t\t\t$result['def_language'] = null;\n\t\t\t\t$result['firstname'] = null;\n\t\t\t\t$result['gender'] = null;\n\t\t\t\t$result['company'] = null;\n\t\t\t\t$result['street'] = null;\n\t\t\t\t$result['zipcode'] = null;\n\t\t\t\t$result['city'] = null;\n\t\t\t\t$result['phone'] = null;\n\t\t\t\t$result['fax'] = null;\n\t\t\t\t$result['email'] = null;\n\t\t\t\t$result['customernumber'] = null;\n\t\t\t\t$result['custom_notes'] = null;\n\t\t\t\t$result['custom_notes_show'] = null;\n\t\t\t\t$result['api_allowed'] = null;\n\t\t\t\t$hosting_plans = null;\n\t\t\t\t$admin_select = [];\n\n\t\t\t\t$plans_edit_data = include_once __DIR__ . '/lib/formfields/admin/plans/formfield.plans_edit.php';\n\t\t\t\t$cust_edit_data = include_once __DIR__ . '/lib/formfields/admin/customer/formfield.customer_edit.php';\n\t\t\t\t// unset unneeded stuff\n\t\t\t\tunset($cust_edit_data['customer_edit']['sections']['section_a']);\n\t\t\t\tunset($cust_edit_data['customer_edit']['sections']['section_b']);\n\t\t\t\tunset($cust_edit_data['customer_edit']['sections']['section_cpre']);\n\t\t\t\tunset($cust_edit_data['customer_edit']['sections']['section_d']);\n\t\t\t\t// merge\n\t\t\t\t$plans_edit_data['plans_edit']['sections'] = array_merge($plans_edit_data['plans_edit']['sections'], $cust_edit_data['customer_edit']['sections']);\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'plans', 'id' => $id]),\n\t\t\t\t\t'formdata' => $plans_edit_data['plans_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'jqGetPlanValues') {\n\t\t$planid = (int)Request::any('planid', 0);\n\t\ttry {\n\t\t\t$json_result = HostingPlans::getLocal($userinfo, [\n\t\t\t\t'id' => $planid\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\t\techo $result['value'];\n\t\texit();\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nuse Froxlor\\Api\\Commands\\Froxlor;\nuse Froxlor\\Cron\\TaskId;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Database\\IntegrityCheck;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Cronjob;\nuse Froxlor\\UI\\Form;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\User;\nuse PHPMailer\\PHPMailer\\PHPMailer;\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\n// get sql-root access data\nDatabase::needRoot(true);\nDatabase::needSqlData();\n$sql_root = Database::getSqlData();\nDatabase::needRoot(false);\n\nif ($page == 'overview' && $userinfo['change_serversettings'] == '1') {\n\t$settings_data = PhpHelper::loadConfigArrayDir('./actions/admin/settings/');\n\tSettings::loadSettingsInto($settings_data);\n\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$_part = isset($_GET['part']) ? $_GET['part'] : '';\n\t\tif ($_part == '') {\n\t\t\t$_part = isset($_POST['part']) ? $_POST['part'] : '';\n\t\t}\n\n\t\tif ($_part != '') {\n\t\t\tif ($_part == 'all') {\n\t\t\t\t$settings_all = true;\n\t\t\t\t$settings_part = false;\n\t\t\t} else {\n\t\t\t\t$settings_all = false;\n\t\t\t\t$settings_part = true;\n\t\t\t}\n\t\t\t$only_enabledisable = false;\n\t\t} else {\n\t\t\t$settings_all = false;\n\t\t\t$settings_part = false;\n\t\t\t$only_enabledisable = true;\n\t\t}\n\n\t\t// check if the session timeout is too low #815\n\t\tif (isset($_POST['session_sessiontimeout']) && $_POST['session_sessiontimeout'] < 60) {\n\t\t\tResponse::standardError(lng('error.session_timeout'), lng('error.session_timeout_desc'));\n\t\t}\n\n\t\ttry {\n\t\t\tif (Form::processForm($settings_data, $_POST, [\n\t\t\t\t'filename' => $filename,\n\t\t\t\t'action' => $action,\n\t\t\t\t'page' => $page\n\t\t\t], $_part, $settings_all, $settings_part, $only_enabledisable)) {\n\t\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"rebuild configfiles due to changed setting\");\n\t\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\t\t// Using nameserver, insert a task which rebuilds the server config\n\t\t\t\tCronjob::inserttask(TaskId::REBUILD_DNS);\n\t\t\t\t// cron.d file\n\t\t\t\tCronjob::inserttask(TaskId::REBUILD_CRON);\n\n\t\t\t\tResponse::standardSuccess('settingssaved', '', [\n\t\t\t\t\t'filename' => $filename,\n\t\t\t\t\t'action' => $action,\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t}\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage(), $e->getCode());\n\t\t}\n\t} else {\n\t\t$_part = isset($_GET['part']) ? $_GET['part'] : '';\n\t\tif ($_part == '') {\n\t\t\t$_part = isset($_POST['part']) ? $_POST['part'] : '';\n\t\t}\n\n\t\t$fields = Form::buildForm($settings_data, $_part);\n\n\t\tif ($_part == '' || $_part == 'all') {\n\t\t\tUI::view('settings/index.html.twig', ['fields' => $fields]);\n\t\t} else {\n\t\t\t$em = Request::any('em', '');\n\t\t\tUI::view('settings/detailpart.html.twig', ['fields' => $fields, 'em' => $em]);\n\t\t}\n\t}\n} elseif ($page == 'phpinfo' && $userinfo['change_serversettings'] == '1') {\n\tob_start();\n\tphpinfo();\n\t$phpinfo = [\n\t\t'phpinfo' => []\n\t];\n\tif (preg_match_all('#(?:<h2>(?:<a name=\".*?\">)?(.*?)(?:</a>)?</h2>)|(?:<tr(?: class=\".*?\")?><t[hd](?: class=\".*?\")?>(.*?)\\s*</t[hd]>(?:<t[hd](?: class=\".*?\")?>(.*?)\\s*</t[hd]>(?:<t[hd](?: class=\".*?\")?>(.*?)\\s*</t[hd]>)?)?</tr>)#s', ob_get_clean(), $matches, PREG_SET_ORDER)) {\n\t\tforeach ($matches as $match) {\n\t\t\t$end = array_keys($phpinfo);\n\t\t\t$end = end($end);\n\t\t\tif (strlen($match[1])) {\n\t\t\t\t$phpinfo[$match[1]] = [];\n\t\t\t} elseif (isset($match[3])) {\n\t\t\t\t$phpinfo[$end][$match[2]] = isset($match[4]) ? [\n\t\t\t\t\t$match[3],\n\t\t\t\t\t$match[4]\n\t\t\t\t] : $match[3];\n\t\t\t} else {\n\t\t\t\t$phpinfo[$end][] = $match[2];\n\t\t\t}\n\t\t}\n\t} else {\n\t\tResponse::standardError(lng('error.no_phpinfo'));\n\t}\n\tUI::view('settings/phpinfo.html.twig', [\n\t\t'phpversion' => PHP_VERSION,\n\t\t'phpinfo' => $phpinfo\n\t]);\n} elseif ($page == 'rebuildconfigs' && $userinfo['change_serversettings'] == '1') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"rebuild configfiles\");\n\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\tCronjob::inserttask(TaskId::CREATE_QUOTA);\n\t\t// Using nameserver, insert a task which rebuilds the server config\n\t\tCronjob::inserttask(TaskId::REBUILD_DNS);\n\t\t// cron.d file\n\t\tCronjob::inserttask(TaskId::REBUILD_CRON);\n\n\t\tResponse::standardSuccess('rebuildingconfigs', '', [\n\t\t\t'filename' => 'admin_index.php'\n\t\t]);\n\t} else {\n\t\tHTML::askYesNo('admin_configs_reallyrebuild', $filename, [\n\t\t\t'page' => $page\n\t\t]);\n\t}\n} elseif ($page == 'updatecounters' && $userinfo['change_serversettings'] == '1') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"updated resource-counters\");\n\t\t$updatecounters = User::updateCounters(true);\n\t\tUI::view('user/resource-counter.html.twig', [\n\t\t\t'counters' => $updatecounters\n\t\t]);\n\t} else {\n\t\tHTML::askYesNo('admin_counters_reallyupdate', $filename, [\n\t\t\t'page' => $page\n\t\t]);\n\t}\n} elseif ($page == 'wipecleartextmailpws' && $userinfo['change_serversettings'] == '1') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"wiped all cleartext mail passwords\");\n\t\tDatabase::query(\"UPDATE `\" . TABLE_MAIL_USERS . \"` SET `password` = '';\");\n\t\tDatabase::query(\"UPDATE `\" . TABLE_PANEL_SETTINGS . \"` SET `value` = '0' WHERE `settinggroup` = 'system' AND `varname` = 'mailpwcleartext'\");\n\t\tResponse::redirectTo($filename);\n\t} else {\n\t\tHTML::askYesNo('admin_cleartextmailpws_reallywipe', $filename, [\n\t\t\t'page' => $page\n\t\t]);\n\t}\n} elseif ($page == 'wipequotas' && $userinfo['change_serversettings'] == '1') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"wiped all mailquotas\");\n\n\t\t// Set the quota to 0 which means unlimited\n\t\tDatabase::query(\"UPDATE `\" . TABLE_MAIL_USERS . \"` SET `quota` = '0';\");\n\t\tDatabase::query(\"UPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET `email_quota_used` = '0'\");\n\t\tResponse::redirectTo($filename);\n\t} else {\n\t\tHTML::askYesNo('admin_quotas_reallywipe', $filename, [\n\t\t\t'page' => $page\n\t\t]);\n\t}\n} elseif ($page == 'enforcequotas' && $userinfo['change_serversettings'] == '1') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t// Fetch all accounts\n\t\t$result_stmt = Database::query(\"SELECT `quota`, `customerid` FROM `\" . TABLE_MAIL_USERS . \"`\");\n\n\t\tif (Database::num_rows() > 0) {\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET\n\t\t\t\t`email_quota_used` = `email_quota_used` + :diff\n\t\t\t\tWHERE `customerid` = :customerid\n\t\t\t\");\n\n\t\t\twhile ($array = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$difference = Settings::Get('system.mail_quota') - $array['quota'];\n\t\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t\t'diff' => $difference,\n\t\t\t\t\t'customerid' => $customerid\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\t// Set the new quota\n\t\t$upd_stmt = Database::prepare(\"\n\t\t\tUPDATE `\" . TABLE_MAIL_USERS . \"` SET `quota` = :quota\n\t\t\");\n\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t'quota' => Settings::Get('system.mail_quota')\n\t\t]);\n\n\t\t// Update the Customer, if the used quota is bigger than the allowed quota\n\t\tDatabase::query(\"UPDATE `\" . TABLE_PANEL_CUSTOMERS . \"` SET `email_quota` = `email_quota_used` WHERE `email_quota` < `email_quota_used`\");\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, 'enforcing mailquota to all customers: ' . Settings::Get('system.mail_quota') . ' MB');\n\t\tResponse::redirectTo($filename);\n\t} else {\n\t\tHTML::askYesNo('admin_quotas_reallyenforce', $filename, [\n\t\t\t'page' => $page\n\t\t]);\n\t}\n} elseif ($page == 'integritycheck' && $userinfo['change_serversettings'] == '1') {\n\t$integrity = new IntegrityCheck();\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$integrity->fixAll();\n\t} elseif (isset($_GET['action']) && $_GET['action'] == \"fix\") {\n\t\tHTML::askYesNo('admin_integritycheck_reallyfix', $filename, [\n\t\t\t'page' => $page\n\t\t]);\n\t}\n\n\t$integritycheck = [];\n\tforeach ($integrity->available as $id => $check) {\n\t\t$integritycheck[] = [\n\t\t\t'displayid' => $id + 1,\n\t\t\t'result' => $integrity->$check(),\n\t\t\t'checkdesc' => lng('integrity_check.' . $check)\n\t\t];\n\t}\n\n\t$integrity_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.integrity.php';\n\t$collection = [\n\t\t'data' => $integritycheck,\n\t\t'pagination' => []\n\t];\n\n\tUI::view('user/table.html.twig', [\n\t\t'listing' => Listing::formatFromArray($collection, $integrity_list_data['integrity_list'], 'integrity_list'),\n\t\t'actions_links' => [\n\t\t\t[\n\t\t\t\t'href' => $linker->getLink(['section' => 'settings', 'page' => $page, 'action' => 'fix']),\n\t\t\t\t'label' => lng('admin.integrityfix'),\n\t\t\t\t'icon' => 'fa-solid fa-screwdriver-wrench',\n\t\t\t\t'class' => 'btn-warning'\n\t\t\t]\n\t\t]\n\t]);\n} elseif ($page == 'importexport' && $userinfo['change_serversettings'] == '1') {\n\t// check for json-stuff\n\tif (!extension_loaded('json')) {\n\t\tResponse::standardError('jsonextensionnotfound');\n\t}\n\n\tif (isset($_GET['action']) && $_GET['action'] == \"export\") {\n\t\t// export\n\t\ttry {\n\t\t\t$json_result = Froxlor::getLocal($userinfo)->exportSettings();\n\t\t\t$json_export = json_decode($json_result, true)['data'];\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\theader('Content-disposition: attachment; filename=Froxlor_settings-' . \\Froxlor\\Froxlor::VERSION . '-' . \\Froxlor\\Froxlor::DBVERSION . '_' . date('d.m.Y') . '.json');\n\t\theader('Content-type: application/json');\n\t\techo $json_export;\n\t\texit();\n\t} elseif (isset($_GET['action']) && $_GET['action'] == \"import\") {\n\t\t// import\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t// get uploaded file\n\t\t\tif (isset($_FILES[\"import_file\"][\"tmp_name\"])) {\n\t\t\t\t$imp_content = file_get_contents($_FILES[\"import_file\"][\"tmp_name\"]);\n\t\t\t\ttry {\n\t\t\t\t\tFroxlor::getLocal($userinfo, [\n\t\t\t\t\t\t'json_str' => $imp_content\n\t\t\t\t\t])->importSettings();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::standardSuccess('settingsimported', '', [\n\t\t\t\t\t'filename' => 'admin_settings.php'\n\t\t\t\t]);\n\t\t\t}\n\t\t\tResponse::dynamicError(\"Upload failed\");\n\t\t}\n\t} else {\n\t\t$settings_data = include_once dirname(__FILE__) . '/lib/formfields/admin/settings/formfield.settings_import.php';\n\n\t\tUI::view('user/form.html.twig', [\n\t\t\t'formaction' => $linker->getLink(['section' => 'settings', 'page' => $page, 'action' => 'import']),\n\t\t\t'formdata' => $settings_data['settings_import'],\n\t\t\t'actions_links' => [\n\t\t\t\t[\n\t\t\t\t\t'class' => 'btn-outline-primary',\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'settings', 'page' => 'overview']),\n\t\t\t\t\t'label' => lng('admin.configfiles.overview'),\n\t\t\t\t\t'icon' => 'fa-solid fa-grip'\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'class' => 'btn-outline-secondary',\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'settings', 'page' => $page, 'action' => 'export']),\n\t\t\t\t\t'label' => 'Download/export ' . lng('admin.serversettings'),\n\t\t\t\t\t'icon' => 'fa-solid fa-file-import'\n\t\t\t\t]\n\t\t\t]\n\t\t]);\n\t}\n} elseif ($page == 'testmail') {\n\t$note_type = 'info';\n\t$note_msg = lng('admin.smtptestnote');\n\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$test_addr = isset($_POST['test_addr']) ? $_POST['test_addr'] : null;\n\n\t\t// Initialize the mailingsystem\n\t\t$testmail = new PHPMailer(true);\n\t\t$testmail->CharSet = \"UTF-8\";\n\n\t\tif (Settings::Get('system.mail_use_smtp')) {\n\t\t\t$testmail->isSMTP();\n\t\t\t$testmail->Host = Settings::Get('system.mail_smtp_host');\n\t\t\t$testmail->SMTPAuth = Settings::Get('system.mail_smtp_auth') == '1';\n\t\t\t$testmail->Username = Settings::Get('system.mail_smtp_user');\n\t\t\t$testmail->Password = Settings::Get('system.mail_smtp_passwd');\n\t\t\tif (Settings::Get('system.mail_smtp_usetls')) {\n\t\t\t\t$testmail->SMTPSecure = 'tls';\n\t\t\t} else {\n\t\t\t\t$testmail->SMTPAutoTLS = false;\n\t\t\t}\n\t\t\t$testmail->Port = Settings::Get('system.mail_smtp_port');\n\t\t}\n\n\t\t$_mailerror = false;\n\t\tif (PHPMailer::ValidateAddress(Settings::Get('panel.adminmail')) !== false) {\n\t\t\t// set return-to address and custom sender-name, see #76\n\t\t\t$testmail->SetFrom(Settings::Get('panel.adminmail'), Settings::Get('panel.adminmail_defname'));\n\t\t\tif (Settings::Get('panel.adminmail_return') != '') {\n\t\t\t\t$testmail->AddReplyTo(Settings::Get('panel.adminmail_return'), Settings::Get('panel.adminmail_defname'));\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t$testmail->Subject = \"Froxlor Test-Mail\";\n\t\t\t\t$mail_body = \"Yay, this worked :)\";\n\t\t\t\t$testmail->AltBody = $mail_body;\n\t\t\t\t$testmail->MsgHTML(str_replace(\"\\n\", \"<br />\", $mail_body));\n\t\t\t\t$testmail->AddAddress($test_addr);\n\t\t\t\t$testmail->Send();\n\t\t\t} catch (\\PHPMailer\\PHPMailer\\Exception $e) {\n\t\t\t\t$note_type = 'danger';\n\t\t\t\t$note_msg = $e->getMessage();\n\t\t\t\t$_mailerror = true;\n\t\t\t} catch (Exception $e) {\n\t\t\t\t$note_type = 'danger';\n\t\t\t\t$note_msg = $e->getMessage();\n\t\t\t\t$_mailerror = true;\n\t\t\t}\n\n\t\t\tif (!$_mailerror) {\n\t\t\t\t// success\n\t\t\t\t$mail->ClearAddresses();\n\t\t\t\tResponse::standardSuccess('testmailsent', '', [\n\t\t\t\t\t'filename' => 'admin_settings.php',\n\t\t\t\t\t'page' => 'testmail'\n\t\t\t\t]);\n\t\t\t}\n\t\t} else {\n\t\t\t// invalid sender e-mail\n\t\t\t$note_type = 'warning';\n\t\t\t$note_msg = \"Invalid sender e-mail address: \" . Settings::Get('panel.adminmail');\n\t\t}\n\t}\n\n\t$mailtest_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/settings/formfield.settings_mailtest.php';\n\n\tUI::view('user/form-note.html.twig', [\n\t\t'formaction' => $linker->getLink(['section' => 'settings']),\n\t\t'formdata' => $mailtest_add_data['mailtest'],\n\t\t'actions_links' => [\n\t\t\t[\n\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t'section' => 'settings',\n\t\t\t\t\t'page' => 'overview',\n\t\t\t\t\t'part' => 'system',\n\t\t\t\t\t'em' => 'system_mail_use_smtp'\n\t\t\t\t]),\n\t\t\t\t'label' => lng('admin.smtpsettings'),\n\t\t\t\t'icon' => 'fa-solid fa-gears',\n\t\t\t\t'class' => 'btn-outline-secondary'\n\t\t\t]\n\t\t],\n\t\t// alert-box\n\t\t'type' => $note_type,\n\t\t'alert_msg' => $note_msg\n\t]);\n} elseif ($page == 'toggleSettingsMode') {\n\tif ($userinfo['change_serversettings'] == '1') {\n\t\t$cmode = Settings::Get('panel.settings_mode');\n\t\tSettings::Set('panel.settings_mode', (int)(!(bool)$cmode));\n\t}\n\tResponse::redirectTo($filename);\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Language;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Validate;\nuse Froxlor\\CurrentUser;\n\n$id = (int)Request::any('id');\n$subjectid = intval(Request::any('subjectid'));\n$mailbodyid = intval(Request::any('mailbodyid'));\n\n$available_templates = [\n\t'createcustomer',\n\t'pop_success',\n\t'new_database_by_customer',\n\t'new_ftpaccount_by_customer',\n\t'password_reset'\n];\n\n// only show templates of features that are enabled #1191\nif ((int)Settings::Get('system.report_enable') == 1) {\n\tarray_push($available_templates, 'trafficmaxpercent', 'diskmaxpercent');\n}\nif (Settings::Get('panel.sendalternativemail') == 1) {\n\tarray_push($available_templates, 'pop_success_alternative');\n}\n\n$file_templates = [\n\t'index_html'\n];\n\n$languages = Language::getLanguages();\n\nif ($action == '') {\n\t// email templates\n\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_templates\");\n\n\t$templates_array = [];\n\t$result_stmt = Database::prepare(\"\n\t\tSELECT `id`, `language`, `varname` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\tWHERE `adminid` = :adminid AND `templategroup`='mails'\n\t\tORDER BY `language`, `varname`\n\t\");\n\tDatabase::pexecute($result_stmt, [\n\t\t'adminid' => $userinfo['adminid']\n\t]);\n\n\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t$parts = [];\n\t\tpreg_match('/^([a-z]([a-z_]+[a-z])*)_(mailbody|subject)$/', $row['varname'], $parts);\n\t\t$templates_array[$row['language']][$parts[1]][$parts[3]] = $row['id'];\n\t}\n\n\t$templates = [];\n\tforeach ($templates_array as $language => $template_defs) {\n\t\tforeach ($template_defs as $action => $email) {\n\t\t\t$templates[] = [\n\t\t\t\t'subjectid' => $email['subject'],\n\t\t\t\t'mailbodyid' => $email['mailbody'],\n\t\t\t\t'template' => lng('admin.templates.' . $action),\n\t\t\t\t'language' => $language\n\t\t\t];\n\t\t}\n\t}\n\n\t$mail_actions_links = false;\n\tforeach ($languages as $language_file => $language_name) {\n\t\t$templates_done = [];\n\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT `varname` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\tWHERE `adminid` = :adminid AND `language`= :lang\n\t\t\tAND `templategroup` = 'mails' AND `varname` LIKE '%_subject'\n\t\t\");\n\t\tDatabase::pexecute($result_stmt, [\n\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t'lang' => $language_name\n\t\t]);\n\n\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t$templates_done[] = str_replace('_subject', '', $row['varname']);\n\t\t}\n\n\t\tif (count(array_diff($available_templates, $templates_done)) > 0) {\n\t\t\t$mail_actions_links = [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'templates', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.templates.template_add')\n\t\t\t\t]\n\t\t\t];\n\t\t}\n\t}\n\n\t$mailtpl_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.mailtemplates.php';\n\t$collection_mail = [\n\t\t'data' => $templates,\n\t\t'pagination' => []\n\t];\n\n\t// filetemplates\n\t$result_stmt = Database::prepare(\"\n\t\tSELECT `id`, `varname` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\tWHERE `adminid` = :adminid AND `templategroup`='files'\");\n\tDatabase::pexecute($result_stmt, [\n\t\t'adminid' => $userinfo['adminid']\n\t]);\n\n\t$filetemplates = [];\n\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t$filetemplates[] = [\n\t\t\t'id' => $row['id'],\n\t\t\t'template' => lng('admin.templates.' . $row['varname'])\n\t\t];\n\t}\n\n\t$file_actions_links = false;\n\tif (Database::num_rows() != count($file_templates)) {\n\t\t$file_actions_links = [\n\t\t\t[\n\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t'section' => 'templates',\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => 'add',\n\t\t\t\t\t'files' => 'files'\n\t\t\t\t]),\n\t\t\t\t'label' => lng('admin.templates.template_fileadd')\n\t\t\t]\n\t\t];\n\t}\n\n\t$filetpl_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.filetemplates.php';\n\t$collection_file = [\n\t\t'data' => $filetemplates,\n\t\t'pagination' => []\n\t];\n\n\tif ($mail_actions_links === false) {\n\t\t$mail_actions_links = [];\n\t}\n\tif ($file_actions_links === false) {\n\t\t$file_actions_links = [];\n\t}\n\n\tUI::view('user/table-tpl.html.twig', [\n\t\t'maillisting' => Listing::formatFromArray($collection_mail, $mailtpl_list_data['mailtpl_list'], 'mailtpl_list'),\n\t\t'filelisting' => Listing::formatFromArray($collection_file, $filetpl_list_data['filetpl_list'], 'filetpl_list'),\n\t\t'actions_links' => array_merge($mail_actions_links, $file_actions_links)\n\t]);\n} elseif ($action == 'delete' && $subjectid != 0 && $mailbodyid != 0) {\n\t// email templates\n\t$result_stmt = Database::prepare(\"\n\t\tSELECT `language`, `varname` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\tWHERE `adminid` = :adminid AND `id` = :id\");\n\tDatabase::pexecute($result_stmt, [\n\t\t'adminid' => $userinfo['adminid'],\n\t\t'id' => $subjectid\n\t]);\n\t$result = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\n\tif ($result['varname'] != '') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\t\tWHERE `adminid` = :adminid\n\t\t\t\tAND (`id` = :ida OR `id` = :idb)\");\n\t\t\tDatabase::pexecute($del_stmt, [\n\t\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t\t'ida' => $subjectid,\n\t\t\t\t'idb' => $mailbodyid\n\t\t\t]);\n\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"deleted template '\" . $result['language'] . ' - ' . lng('admin.templates.' . str_replace('_subject', '', $result['varname'])) . \"'\");\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\tHTML::askYesNo('admin_template_reallydelete', $filename, [\n\t\t\t\t'subjectid' => $subjectid,\n\t\t\t\t'mailbodyid' => $mailbodyid,\n\t\t\t\t'page' => $page,\n\t\t\t\t'action' => $action\n\t\t\t], $result['language'] . ' - ' . lng('admin.templates.' . str_replace('_subject', '', $result['varname'])));\n\t\t}\n\t}\n} elseif ($action == 'deletef' && $id != 0) {\n\t// file templates\n\t$result_stmt = Database::prepare(\"\n\t\tSELECT * FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\tWHERE `adminid` = :adminid AND `id` = :id\");\n\tDatabase::pexecute($result_stmt, [\n\t\t'adminid' => $userinfo['adminid'],\n\t\t'id' => $id\n\t]);\n\n\tif (Database::num_rows() > 0) {\n\t\t$row = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\tDELETE FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\t\tWHERE `adminid` = :adminid AND `id` = :id\");\n\t\t\tDatabase::pexecute($del_stmt, [\n\t\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t\t'id' => $id\n\t\t\t]);\n\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"deleted template '\" . lng('admin.templates.' . $row['varname']) . \"'\");\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\tHTML::askYesNo('admin_template_reallydelete', $filename, [\n\t\t\t\t'id' => $id,\n\t\t\t\t'page' => $page,\n\t\t\t\t'action' => $action\n\t\t\t], lng('admin.templates.' . $row['varname']));\n\t\t}\n\t} else {\n\t\tResponse::standardError('templatenotfound');\n\t}\n} elseif ($action == 'add') {\n\tif (isset($_POST['prepare']) && $_POST['prepare'] == 'prepare') {\n\t\t// email templates\n\t\t$language = htmlentities(Validate::validate($_POST['language'], 'language', '/^[^\\r\\n\\0\"\\']+$/', 'nolanguageselect'));\n\t\t$template = Validate::validate($_POST['template'], 'template');\n\n\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT COUNT(*) as def FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\tWHERE `adminid` = :adminid AND `language` = :lang\n\t\t\tAND `templategroup` = 'mails' AND `varname` LIKE :template\n\t\t\");\n\t\t$result = Database::pexecute_first($result_stmt, [\n\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t'lang' => $language,\n\t\t\t'template' => $template . '%'\n\t\t]);\n\t\tif ($result && $result['def'] > 0) {\n\t\t\tResponse::standardError('templatelanguagecombodefined');\n\t\t}\n\n\t\t// set target language\n\t\tLanguage::setLanguage($language);\n\n\t\t$subject = lng('mails.' . $template . '.subject');\n\t\t$body = str_replace('\\n', \"\\n\", lng('mails.' . $template . '.mailbody'));\n\n\t\t// re set language to user\n\t\tLanguage::setLanguage(CurrentUser::getField('def_language'));\n\n\t\t$template_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/templates/formfield.template_add.php';\n\n\t\tUI::view('user/form-replacers.html.twig', [\n\t\t\t'formaction' => $linker->getLink(['section' => 'templates']),\n\t\t\t'formdata' => $template_add_data['template_add'],\n\t\t\t'replacers' => $template_add_data['template_replacers']\n\t\t]);\n\t} elseif (isset($_POST['send']) && $_POST['send'] == 'send' && !isset($_POST['filesend'])) {\n\t\t// email templates\n\t\t$language = htmlentities(Validate::validate($_POST['language'], 'language', '/^[^\\r\\n\\0\"\\']+$/', 'nolanguageselect'));\n\t\t$template = Validate::validate($_POST['template'], 'template');\n\t\t$subject = Validate::validate($_POST['subject'], 'subject', '/^[^\\r\\n\\0]+$/', 'nosubjectcreate');\n\t\t$mailbody = Validate::validate($_POST['mailbody'], 'mailbody', '/^[^\\0]+$/', 'nomailbodycreate');\n\t\t$templates = [];\n\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT `varname` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\tWHERE `adminid` = :adminid AND `language` = :lang\n\t\t\tAND `templategroup` = 'mails' AND `varname` LIKE '%_subject'\");\n\t\tDatabase::pexecute($result_stmt, [\n\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t'lang' => $language\n\t\t]);\n\n\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t$templates[] = str_replace('_subject', '', $row['varname']);\n\t\t}\n\n\t\t$templates = array_diff($available_templates, $templates);\n\t\tif (!in_array($template, $templates)) {\n\t\t\tResponse::standardError('templatenotfound');\n\t\t} else {\n\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\tINSERT INTO `\" . TABLE_PANEL_TEMPLATES . \"` SET\n\t\t\t\t\t`adminid` = :adminid,\n\t\t\t\t\t`language` = :lang,\n\t\t\t\t\t`templategroup` = 'mails',\n\t\t\t\t\t`varname` = :var,\n\t\t\t\t\t`value` = :value\");\n\n\t\t\t// mail-subject\n\t\t\t$ins_data = [\n\t\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t\t'lang' => $language,\n\t\t\t\t'var' => $template . '_subject',\n\t\t\t\t'value' => $subject\n\t\t\t];\n\t\t\tDatabase::pexecute($ins_stmt, $ins_data);\n\n\t\t\t// mail-body\n\t\t\t$ins_data = [\n\t\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t\t'lang' => $language,\n\t\t\t\t'var' => $template . '_mailbody',\n\t\t\t\t'value' => $mailbody\n\t\t\t];\n\t\t\tDatabase::pexecute($ins_stmt, $ins_data);\n\n\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"added template '\" . $language . ' - ' . $template . \"'\");\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t}\n\t} elseif (isset($_POST['filesend']) && $_POST['filesend'] == 'filesend') {\n\t\t// file templates\n\t\t$template = Validate::validate($_POST['template'], 'template');\n\t\t$filecontent = Validate::validate($_POST['filecontent'], 'filecontent', '/^[^\\0]+$/', 'filecontentnotset');\n\n\t\t$ins_stmt = Database::prepare(\"\n\t\t\tINSERT INTO `\" . TABLE_PANEL_TEMPLATES . \"` SET\n\t\t\t\t`adminid` = :adminid,\n\t\t\t\t`language` = '',\n\t\t\t\t`templategroup` = 'files',\n\t\t\t\t`varname` = :var,\n\t\t\t\t`value` = :value\");\n\n\t\t$ins_data = [\n\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t'var' => $template,\n\t\t\t'value' => $filecontent\n\t\t];\n\t\tDatabase::pexecute($ins_stmt, $ins_data);\n\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"added template '\" . $template . \"'\");\n\t\tResponse::redirectTo($filename, [\n\t\t\t'page' => $page\n\t\t]);\n\t} elseif (!isset($_GET['files'])) {\n\t\t// email templates\n\t\t$add = false;\n\t\t$language_options = [];\n\t\t$template_options = [];\n\n\t\tforeach ($languages as $language_file => $language_name) {\n\t\t\t$templates = [];\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT `varname` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\t\tWHERE `adminid` = :adminid AND `language` = :lang\n\t\t\t\tAND `templategroup` = 'mails' AND `varname` LIKE '%_subject'\");\n\t\t\tDatabase::pexecute($result_stmt, [\n\t\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t\t'lang' => $language_name\n\t\t\t]);\n\n\t\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$templates[] = str_replace('_subject', '', $row['varname']);\n\t\t\t}\n\n\t\t\tif (count(array_diff($available_templates, $templates)) > 0) {\n\t\t\t\t$add = true;\n\t\t\t\t$language_options[$language_file] = $language_name;\n\n\t\t\t\t$templates = array_diff($available_templates, $templates);\n\n\t\t\t\tforeach ($templates as $template) {\n\t\t\t\t\t$template_options[$template] = lng('admin.templates.' . $template);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($add) {\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'templates']),\n\t\t\t\t'formdata' => [\n\t\t\t\t\t'title' => lng('admin.templates.template_add'),\n\t\t\t\t\t'image' => 'fa-solid fa-plus',\n\t\t\t\t\t'self_overview' => ['section' => 'templates', 'page' => 'email'],\n\t\t\t\t\t'sections' => [\n\t\t\t\t\t\t'section_a' => [\n\t\t\t\t\t\t\t'title' => lng('admin.templates.template_add'),\n\t\t\t\t\t\t\t'fields' => [\n\t\t\t\t\t\t\t\t'language' => [\n\t\t\t\t\t\t\t\t\t'label' => lng('login.language'),\n\t\t\t\t\t\t\t\t\t'type' => 'select',\n\t\t\t\t\t\t\t\t\t'select_var' => $language_options,\n\t\t\t\t\t\t\t\t\t'selected' => $userinfo['language']\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t'template' => [\n\t\t\t\t\t\t\t\t\t'label' => lng('admin.templates.action'),\n\t\t\t\t\t\t\t\t\t'type' => 'select',\n\t\t\t\t\t\t\t\t\t'select_var' => $template_options\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t'prepare' => [\n\t\t\t\t\t\t\t\t\t'type' => 'hidden',\n\t\t\t\t\t\t\t\t\t'value' => 'prepare'\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\t'editid' => $id\n\t\t\t]);\n\t\t} else {\n\t\t\tResponse::standardError('alltemplatesdefined');\n\t\t}\n\t} else {\n\t\t// filetemplates\n\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT `id`, `varname` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\tWHERE `adminid` = :adminid AND `templategroup`='files'\");\n\t\tDatabase::pexecute($result_stmt, [\n\t\t\t'adminid' => $userinfo['adminid']\n\t\t]);\n\n\t\tif (Database::num_rows() == count($file_templates)) {\n\t\t\tResponse::standardError('alltemplatesdefined');\n\t\t} else {\n\t\t\t$templatesdefined = [];\n\t\t\t$free_templates = [];\n\n\t\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$templatesdefined[] = $row['varname'];\n\t\t\t}\n\n\t\t\tforeach (array_diff($file_templates, $templatesdefined) as $template) {\n\t\t\t\t$free_templates[$template] = lng('admin.templates.' . $template);\n\t\t\t}\n\n\t\t\t$filetemplate_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/templates/formfield.filetemplate_add.php';\n\n\t\t\tUI::view('user/form-replacers.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'templates']),\n\t\t\t\t'formdata' => $filetemplate_add_data['filetemplate_add'],\n\t\t\t\t'replacers' => $filetemplate_add_data['filetemplate_replacers']\n\t\t\t]);\n\t\t}\n\t}\n} elseif ($action == 'edit' && $subjectid != 0 && $mailbodyid != 0) {\n\t// email templates\n\t$result_stmt = Database::prepare(\"\n\t\tSELECT `language`, `varname`, `value` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\tWHERE `adminid` = :adminid AND `id` = :subjectid\");\n\tDatabase::pexecute($result_stmt, [\n\t\t'adminid' => $userinfo['adminid'],\n\t\t'subjectid' => $subjectid\n\t]);\n\t$result = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\n\tif ($result['varname'] != '') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t$subject = Validate::validate($_POST['subject'], 'subject', '/^[^\\r\\n\\0]+$/', 'nosubjectcreate');\n\t\t\t$mailbody = Validate::validate($_POST['mailbody'], 'mailbody', '/^[^\\0]+$/', 'nomailbodycreate');\n\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_TEMPLATES . \"` SET\n\t\t\t\t\t`value` = :value\n\t\t\t\tWHERE `adminid` = :adminid AND `id` = :id\");\n\t\t\t// subject\n\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t'value' => $subject,\n\t\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t\t'id' => $subjectid\n\t\t\t]);\n\t\t\t// same query but mailbody\n\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t'value' => $mailbody,\n\t\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t\t'id' => $mailbodyid\n\t\t\t]);\n\n\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"edited template '\" . $result['varname'] . \"'\");\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\t\t\t$template_name = lng('admin.templates.' . str_replace('_subject', '', $result['varname']));\n\t\t\t$subject = $result['value'];\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT `language`, `varname`, `value`\n\t\t\t\tFROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\t\tWHERE `id` = :id\");\n\t\t\tDatabase::pexecute($result_stmt, [\n\t\t\t\t'id' => $mailbodyid\n\t\t\t]);\n\t\t\t$result = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\t\t$template = str_replace('_mailbody', '', $result['varname']);\n\n\t\t\t// don't escape the already escaped language-string so save up before htmlentities()\n\t\t\t$language = $result['language'];\n\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\t\t\t$mailbody = $result['value'];\n\n\t\t\t$template_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/templates/formfield.template_edit.php';\n\n\t\t\tUI::view('user/form-replacers.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'templates']),\n\t\t\t\t'formdata' => $template_edit_data['template_edit'],\n\t\t\t\t'replacers' => $template_edit_data['template_replacers']\n\t\t\t]);\n\t\t}\n\t}\n} elseif ($action == 'editf' && $id != 0) {\n\t// file templates\n\t$result_stmt = Database::prepare(\"\n\t\tSELECT * FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\tWHERE `adminid` = :adminid AND `id` = :id\");\n\tDatabase::pexecute($result_stmt, [\n\t\t'adminid' => $userinfo['adminid'],\n\t\t'id' => $id\n\t]);\n\n\tif (Database::num_rows() > 0) {\n\t\t$row = $result_stmt->fetch(PDO::FETCH_ASSOC);\n\n\t\t// filetemplates\n\t\tif (isset($_POST['filesend']) && $_POST['filesend'] == 'filesend') {\n\t\t\t$filecontent = Validate::validate($_POST['filecontent'], 'filecontent', '/^[^\\0]+$/', 'filecontentnotset');\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_TEMPLATES . \"` SET\n\t\t\t\t\t`value` = :value\n\t\t\t\tWHERE `adminid` = :adminid AND `id` = :id\");\n\t\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t\t'value' => $filecontent,\n\t\t\t\t'adminid' => $userinfo['adminid'],\n\t\t\t\t'id' => $id\n\t\t\t]);\n\n\t\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_INFO, \"edited template '\" . $row['varname'] . \"'\");\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$row = PhpHelper::htmlentitiesArray($row);\n\n\t\t\t$filetemplate_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/templates/formfield.filetemplate_edit.php';\n\n\t\t\tUI::view('user/form-replacers.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'templates']),\n\t\t\t\t'formdata' => $filetemplate_edit_data['filetemplate_edit'],\n\t\t\t\t'replacers' => $filetemplate_edit_data['filetemplate_replacers'],\n\t\t\t\t'editid' => $id\n\t\t\t]);\n\t\t}\n\t} else {\n\t\tResponse::standardError('templatenotfound');\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Traffic\\Traffic;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$range = Request::any('range', 'currentmonth');\n\nif ($page == 'overview' || $page == 'customers') {\n\ttry {\n\t\t$context = Traffic::getCustomerStats($userinfo, $range);\n\t} catch (Exception $e) {\n\t\tif ($e->getCode() === 405) {\n\t\t\tResponse::dynamicError(lng('traffic.nocustomers'));\n\t\t}\n\t\tResponse::dynamicError($e->getMessage());\n\t}\n\n\t// pass metrics to the view\n\tUI::view('user/traffic.html.twig', $context);\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nif (!defined('AREA')) {\n\theader(\"Location: index.php\");\n\texit();\n}\n\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n// redirect if this customer has no permission for API usage\nif ($userinfo['adminsession'] == 0 && $userinfo['api_allowed'] == 0) {\n\tResponse::redirectTo('customer_index.php');\n}\n// redirect if this admin has no permission for API usage\nif ($userinfo['adminsession'] == 1 && $userinfo['api_allowed'] == 0) {\n\tResponse::redirectTo('admin_index.php');\n}\n\n// This file is being included in admin_index and customer_index\n// and therefore does not need to require lib/init.php\n\n$del_stmt = Database::prepare(\"DELETE FROM `\" . TABLE_API_KEYS . \"` WHERE id = :id\");\n$id = (int)Request::any('id');\n\n// do the delete and then just show a success-message and the apikeys list again\nif ($action == 'delete' && $id > 0) {\n\tHTML::askYesNo('apikey_reallydelete', $filename, [\n\t\t'id' => $id,\n\t\t'page' => $page,\n\t\t'action' => 'deletesure'\n\t], '', [\n\t\t'section' => 'index',\n\t\t'page' => $page\n\t]);\n} elseif (isset($_POST['send']) && $_POST['send'] == 'send' && $action == 'deletesure' && $id > 0) {\n\t$chk = (AREA == 'admin' && $userinfo['customers_see_all'] == '1') ? true : false;\n\tif (AREA == 'customer') {\n\t\t$chk_stmt = Database::prepare(\"\n\t\t\t\tSELECT c.customerid FROM `\" . TABLE_PANEL_CUSTOMERS . \"` c\n\t\t\t\tLEFT JOIN `\" . TABLE_API_KEYS . \"` ak ON ak.customerid = c.customerid\n\t\t\t\tWHERE ak.`id` = :id AND c.`customerid` = :cid\n\t\t\t\");\n\t\t$chk = Database::pexecute_first($chk_stmt, [\n\t\t\t'id' => $id,\n\t\t\t'cid' => $userinfo['customerid']\n\t\t]);\n\t} elseif (AREA == 'admin' && $userinfo['customers_see_all'] == '0') {\n\t\t$chk_stmt = Database::prepare(\"\n\t\t\t\tSELECT a.adminid FROM `\" . TABLE_PANEL_ADMINS . \"` a\n\t\t\t\tLEFT JOIN `\" . TABLE_API_KEYS . \"` ak ON ak.adminid = a.adminid\n\t\t\t\tWHERE ak.`id` = :id AND a.`adminid` = :aid\n\t\t\t\");\n\t\t$chk = Database::pexecute_first($chk_stmt, [\n\t\t\t'id' => $id,\n\t\t\t'aid' => $userinfo['adminid']\n\t\t]);\n\t}\n\tif ($chk !== false) {\n\t\tDatabase::pexecute($del_stmt, [\n\t\t\t'id' => $id\n\t\t]);\n\t\tResponse::standardSuccess('apikeys.apikey_removed', $id, [\n\t\t\t'filename' => $filename,\n\t\t\t'page' => $page\n\t\t]);\n\t}\n} elseif ($action == 'add') {\n\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t$ins_stmt = Database::prepare(\"\n\t\t\tINSERT INTO `\" . TABLE_API_KEYS . \"` SET\n\t\t\t`apikey` = :key, `secret` = :secret, `adminid` = :aid, `customerid` = :cid, `valid_until` = '-1', `allowed_from` = ''\n\t\t\");\n\t\t// customer generates for himself, admins will see a customer-select-box later\n\t\tif (AREA == 'admin') {\n\t\t\t$cid = 0;\n\t\t} elseif (AREA == 'customer') {\n\t\t\t$cid = $userinfo['customerid'];\n\t\t}\n\t\t$key = hash('sha256', openssl_random_pseudo_bytes(64 * 64));\n\t\t$secret = hash('sha512', openssl_random_pseudo_bytes(64 * 64 * 4));\n\t\tDatabase::pexecute($ins_stmt, [\n\t\t\t'key' => $key,\n\t\t\t'secret' => $secret,\n\t\t\t'aid' => $userinfo['adminid'],\n\t\t\t'cid' => $cid\n\t\t]);\n\t\tResponse::standardSuccess('apikeys.apikey_added', '', [\n\t\t\t'filename' => $filename,\n\t\t\t'page' => $page\n\t\t]);\n\t}\n\tHTML::askYesNo('apikey_reallyadd', $filename, [\n\t\t'id' => $id,\n\t\t'page' => $page,\n\t\t'action' => $action\n\t], '', [\n\t\t'section' => 'index',\n\t\t'page' => $page\n\t]);\n\texit;\n}\n\n$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"viewed api::api_keys\");\n\n// select all my (accessible) api-keys\n$keys_stmt_query = \"SELECT ak.*, c.loginname, a.loginname as adminname\n\tFROM `\" . TABLE_API_KEYS . \"` ak\n\tLEFT JOIN `\" . TABLE_PANEL_CUSTOMERS . \"` c ON `c`.`customerid` = `ak`.`customerid`\n\tLEFT JOIN `\" . TABLE_PANEL_ADMINS . \"` a ON `a`.`adminid` = `ak`.`adminid`\n\tWHERE \";\n\n$qry_params = [];\nif (AREA == 'admin' && $userinfo['customers_see_all'] == '0') {\n\t// admin with only customer-specific permissions\n\t$keys_stmt_query .= \"ak.adminid = :adminid \";\n\t$qry_params['adminid'] = $userinfo['adminid'];\n\t$fields = [\n\t\t'a.loginname' => lng('login.username')\n\t];\n} elseif (AREA == 'customer') {\n\t// customer-area\n\t$keys_stmt_query .= \"ak.customerid = :cid \";\n\t$qry_params['cid'] = $userinfo['customerid'];\n\t$fields = [\n\t\t'c.loginname' => lng('login.username')\n\t];\n} else {\n\t// admin who can see all customers / reseller / admins\n\t$keys_stmt_query .= \"1 \";\n\t$fields = [\n\t\t'a.loginname' => lng('login.username')\n\t];\n}\n\n//$keys_stmt_query .= $paging->getSqlWhere(true) . \" \" . $paging->getSqlOrderBy() . \" \" . $paging->getSqlLimit();\n\n$keys_stmt = Database::prepare($keys_stmt_query);\nDatabase::pexecute($keys_stmt, $qry_params);\n$all_keys = $keys_stmt->fetchAll(PDO::FETCH_ASSOC);\n\n$apikeys_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/tablelisting.apikeys.php';\n$collection = [\n\t'data' => $all_keys,\n\t'pagination' => []\n];\n\n$tpl = 'user/table.html.twig';\n\nUI::view($tpl, [\n\t'listing' => Listing::formatFromArray($collection, $apikeys_list_data['apikeys_list'], 'apikeys_list'),\n\t'actions_links' => (int)$userinfo['api_allowed'] == 1 ? [\n\t\t[\n\t\t\t'href' => $linker->getLink(['section' => 'index', 'page' => $page, 'action' => 'add']),\n\t\t\t'label' => lng('apikeys.key_add')\n\t\t]\n\t] : null,\n]);\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'customer';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\SubDomains as SubDomains;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Domain\\Domain;\nuse Froxlor\\FileDir;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Validate;\nuse Froxlor\\CurrentUser;\n\n// redirect if this customer page is hidden via settings\nif (Settings::IsInList('panel.customer_hide_options', 'domains')) {\n\tResponse::redirectTo('customer_index.php');\n}\n\n$id = (int)Request::any('id');\n\nif ($page == 'overview' || $page == 'domains') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"viewed customer_domains::domains\");\n\n\t\t$parentdomain_id = (int)Request::any('pid', '0');\n\n\t\ttry {\n\t\t\t$domain_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/customer/tablelisting.domains.php';\n\t\t\t$collection = (new Collection(SubDomains::class, $userinfo))\n\t\t\t\t->withPagination($domain_list_data['domain_list']['columns'], $domain_list_data['domain_list']['default_sorting']);\n\t\t\t$parentDomainCollection = (new Collection(SubDomains::class, $userinfo, ['sql_search' => ['d.parentdomainid' => 0]]));\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\t$actions_links = false;\n\t\tif (CurrentUser::canAddResource('subdomains')) {\n\t\t\t$actions_links = [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'domains', 'page' => 'domains', 'action' => 'add']),\n\t\t\t\t\t'label' => lng('domains.subdomain_add')\n\t\t\t\t]\n\t\t\t];\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $domain_list_data, 'domain_list'),\n\t\t\t'actions_links' => $actions_links,\n\t\t\t'entity_info' => lng('domains.description')\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = SubDomains::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\t$alias_stmt = Database::prepare(\"SELECT COUNT(`id`) AS `count` FROM `\" . TABLE_PANEL_DOMAINS . \"` WHERE `aliasdomain` = :aliasdomain\");\n\t\t$alias_check = Database::pexecute_first($alias_stmt, [\n\t\t\t\"aliasdomain\" => $id\n\t\t]);\n\n\t\tif (isset($result['parentdomainid']) && $result['parentdomainid'] != '0' && $alias_check['count'] == 0) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tSubDomains::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('domains_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $idna_convert->decode($result['domain']));\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('domains_cantdeletemaindomain');\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif ($userinfo['subdomains_used'] < $userinfo['subdomains'] || $userinfo['subdomains'] == '-1') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tSubDomains::getLocal($userinfo, $_POST)->add();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$stmt = Database::prepare(\"SELECT `id`, `domain`, `documentroot`, `ssl_redirect`,`isemaildomain`,`letsencrypt` FROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\t\t\tWHERE `customerid` = :customerid\n\t\t\t\t\tAND `parentdomainid` = '0'\n\t\t\t\t\tAND `email_only` = '0'\n\t\t\t\t\tAND `caneditdomain` = '1'\n\t\t\t\t\tORDER BY `domain` ASC\");\n\t\t\t\tDatabase::pexecute($stmt, [\n\t\t\t\t\t\"customerid\" => $userinfo['customerid']\n\t\t\t\t]);\n\t\t\t\t$domains = [];\n\t\t\t\twhile ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$domains[$row['domain']] = $idna_convert->decode($row['domain']);\n\t\t\t\t}\n\n\t\t\t\t$aliasdomains[0] = lng('domains.noaliasdomain');\n\t\t\t\t$domains_stmt = Database::prepare(\"SELECT `d`.`id`, `d`.`domain` FROM `\" . TABLE_PANEL_DOMAINS . \"` `d`, `\" . TABLE_PANEL_CUSTOMERS . \"` `c`\n\t\t\t\t\tWHERE `d`.`aliasdomain` IS NULL\n\t\t\t\t\tAND `d`.`id` <> `c`.`standardsubdomain`\n\t\t\t\t\tAND `d`.`parentdomainid` = '0'\n\t\t\t\t\tAND `d`.`customerid`=`c`.`customerid`\n\t\t\t\t\tAND `d`.`email_only`='0'\n\t\t\t\t\tAND `d`.`customerid`= :customerid\n\t\t\t\t\tORDER BY `d`.`domain` ASC\");\n\t\t\t\tDatabase::pexecute($domains_stmt, [\n\t\t\t\t\t\"customerid\" => $userinfo['customerid']\n\t\t\t\t]);\n\n\t\t\t\twhile ($row_domain = $domains_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$aliasdomains[$row_domain['id']] = $idna_convert->decode($row_domain['domain']);\n\t\t\t\t}\n\n\t\t\t\t$redirectcode = [];\n\t\t\t\tif (Settings::Get('customredirect.enabled') == '1') {\n\t\t\t\t\t$codes = Domain::getRedirectCodesArray();\n\t\t\t\t\tforeach ($codes as $rc) {\n\t\t\t\t\t\t$redirectcode[$rc['id']] = $rc['code'] . ' (' . lng('redirect_desc.' . $rc['desc']) . ')';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// check if we at least have one ssl-ip/port, #1179\n\t\t\t\t$ssl_ipsandports = false;\n\t\t\t\t$ssl_ip_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT COUNT(*) as countSSL\n\t\t\t\t\tFROM `\" . TABLE_PANEL_IPSANDPORTS . \"` pip\n\t\t\t\t\tLEFT JOIN `\" . TABLE_DOMAINTOIP . \"` dti ON dti.id_ipandports = pip.id\n\t\t\t\t\tWHERE pip.`ssl`='1'\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($ssl_ip_stmt);\n\t\t\t\t$resultX = $ssl_ip_stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\tif (isset($resultX['countSSL']) && (int)$resultX['countSSL'] > 0) {\n\t\t\t\t\t$ssl_ipsandports = true;\n\t\t\t\t}\n\n\t\t\t\t$openbasedir = [\n\t\t\t\t\t0 => lng('domain.docroot'),\n\t\t\t\t\t1 => lng('domain.homedir'),\n\t\t\t\t\t2 => lng('domain.docparent')\n\t\t\t\t];\n\t\t\t\t$pathSelect = FileDir::makePathfield($userinfo['documentroot'], $userinfo['guid'], $userinfo['guid']);\n\n\t\t\t\t$phpconfigs = [];\n\t\t\t\tif (isset($userinfo['allowed_phpconfigs']) && !empty($userinfo['allowed_phpconfigs'])) {\n\t\t\t\t\t$allowed_cfg = json_decode($userinfo['allowed_phpconfigs'], JSON_OBJECT_AS_ARRAY);\n\t\t\t\t\t$phpconfigs_result_stmt = Database::query(\"\n\t\t\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\t\t\tWHERE c.id IN (\" . implode(\", \", $allowed_cfg) . \")\n\t\t\t\t\t\");\n\t\t\t\t\twhile ($phpconfigs_row = $phpconfigs_result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t\t\t$phpconfigs[$phpconfigs_row['id']] = $phpconfigs_row['description'] . \" [\" . $phpconfigs_row['interpreter'] . \"]\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$phpconfigs[$phpconfigs_row['id']] = $phpconfigs_row['description'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$subdomain_add_data = include_once dirname(__FILE__) . '/lib/formfields/customer/domains/formfield.domains_add.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'domains']),\n\t\t\t\t\t'formdata' => $subdomain_add_data['domain_add']\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = SubDomains::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['customerid']) && $result['customerid'] == $userinfo['customerid']) {\n\n\t\t\tif ((int) $result['caneditdomain'] == 0) {\n\t\t\t\tResponse::standardError('domaincannotbeedited', $result['domain']);\n\t\t\t}\n\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tSubDomains::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$result['domain'] = $idna_convert->decode($result['domain']);\n\n\t\t\t\t$domains[0] = lng('domains.noaliasdomain');\n\t\t\t\t// also check ip/port combination to be the same, #176\n\t\t\t\t$domains_stmt = Database::prepare(\"SELECT `d`.`id`, `d`.`domain` FROM `\" . TABLE_PANEL_DOMAINS . \"` `d` , `\" . TABLE_PANEL_CUSTOMERS . \"` `c` , `\" . TABLE_DOMAINTOIP . \"` `dip`\n\t\t\t\t\tWHERE `d`.`aliasdomain` IS NULL\n\t\t\t\t\tAND `d`.`id` <> :id\n\t\t\t\t\tAND `c`.`standardsubdomain` <> `d`.`id`\n\t\t\t\t\tAND `d`.`parentdomainid` = '0'\n\t\t\t\t\tAND `d`.`customerid` = :customerid\n\t\t\t\t\tAND `c`.`customerid` = `d`.`customerid`\n\t\t\t\t\tAND `d`.`id` = `dip`.`id_domain`\n\t\t\t\t\tAND `dip`.`id_ipandports`\n\t\t\t\t\tIN (SELECT `id_ipandports` FROM `\" . TABLE_DOMAINTOIP . \"`\n\t\t\t\t\t\tWHERE `id_domain` = :id)\n\t\t\t\t\tGROUP BY `d`.`id`, `d`.`domain`\n\t\t\t\t\tORDER BY `d`.`domain` ASC\");\n\t\t\t\tDatabase::pexecute($domains_stmt, [\n\t\t\t\t\t\"id\" => $result['id'],\n\t\t\t\t\t\"customerid\" => $userinfo['customerid']\n\t\t\t\t]);\n\n\t\t\t\twhile ($row_domain = $domains_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$domains[$row_domain['id']] = $idna_convert->decode($row_domain['domain']);\n\t\t\t\t}\n\n\t\t\t\tif (preg_match('/^https?\\:\\/\\//', $result['documentroot']) && Validate::validateUrl($result['documentroot'])) {\n\t\t\t\t\tif (Settings::Get('panel.pathedit') == 'Dropdown') {\n\t\t\t\t\t\t$urlvalue = $result['documentroot'];\n\t\t\t\t\t\t$pathSelect = FileDir::makePathfield($userinfo['documentroot'], $userinfo['guid'], $userinfo['guid']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$urlvalue = '';\n\t\t\t\t\t\t$pathSelect = FileDir::makePathfield($userinfo['documentroot'], $userinfo['guid'], $userinfo['guid'], $result['documentroot'], true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$urlvalue = '';\n\t\t\t\t\t$pathSelect = FileDir::makePathfield($userinfo['documentroot'], $userinfo['guid'], $userinfo['guid'], $result['documentroot']);\n\t\t\t\t}\n\n\t\t\t\t$redirectcode = [];\n\t\t\t\tif (Settings::Get('customredirect.enabled') == '1') {\n\t\t\t\t\t$def_code = Domain::getDomainRedirectId($id);\n\t\t\t\t\t$codes = Domain::getRedirectCodesArray();\n\t\t\t\t\tforeach ($codes as $rc) {\n\t\t\t\t\t\t$redirectcode[$rc['id']] = $rc['code'] . ' (' . lng('redirect_desc.' . $rc['desc']) . ')';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// check if we at least have one ssl-ip/port, #1179\n\t\t\t\t$ssl_ipsandports = false;\n\t\t\t\t$ssl_ip_stmt = Database::prepare(\"\n\t\t\t\t\tSELECT COUNT(*) as countSSL\n\t\t\t\t\tFROM `\" . TABLE_PANEL_IPSANDPORTS . \"` pip\n\t\t\t\t\tLEFT JOIN `\" . TABLE_DOMAINTOIP . \"` dti ON dti.id_ipandports = pip.id\n\t\t\t\t\tWHERE `dti`.`id_domain` = :id_domain AND pip.`ssl`='1'\n\t\t\t\t\");\n\t\t\t\tDatabase::pexecute($ssl_ip_stmt, [\n\t\t\t\t\t\"id_domain\" => $result['id']\n\t\t\t\t]);\n\t\t\t\t$resultX = $ssl_ip_stmt->fetch(PDO::FETCH_ASSOC);\n\t\t\t\tif (isset($resultX['countSSL']) && (int)$resultX['countSSL'] > 0) {\n\t\t\t\t\t$ssl_ipsandports = true;\n\t\t\t\t}\n\n\t\t\t\t// Fudge the result for ssl_redirect to hide the Let's Encrypt steps\n\t\t\t\t$result['temporary_ssl_redirect'] = $result['ssl_redirect'];\n\t\t\t\t$result['ssl_redirect'] = ($result['ssl_redirect'] == 0 ? 0 : 1);\n\n\t\t\t\t$openbasedir = [\n\t\t\t\t\t0 => lng('domain.docroot'),\n\t\t\t\t\t1 => lng('domain.homedir'),\n\t\t\t\t\t2 => lng('domain.docparent')\n\t\t\t\t];\n\n\t\t\t\t// create serveralias options\n\t\t\t\t$serveraliasoptions = [];\n\t\t\t\t$serveraliasoptions_selected = '2';\n\t\t\t\tif ($result['iswildcarddomain'] == '1') {\n\t\t\t\t\t$serveraliasoptions_selected = '0';\n\t\t\t\t} elseif ($result['wwwserveralias'] == '1') {\n\t\t\t\t\t$serveraliasoptions_selected = '1';\n\t\t\t\t}\n\t\t\t\t$serveraliasoptions[0] = lng('domains.serveraliasoption_wildcard');\n\t\t\t\t$serveraliasoptions[1] = lng('domains.serveraliasoption_www');\n\t\t\t\t$serveraliasoptions[2] = lng('domains.serveraliasoption_none');\n\n\t\t\t\t$ips_stmt = Database::prepare(\"SELECT `p`.`ip` AS `ip` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` `p`\n\t\t\t\t\tLEFT JOIN `\" . TABLE_DOMAINTOIP . \"` `dip`\n\t\t\t\t\tON ( `dip`.`id_ipandports` = `p`.`id` )\n\t\t\t\t\tWHERE `dip`.`id_domain` = :id_domain\n\t\t\t\t\tGROUP BY `p`.`ip`\");\n\t\t\t\tDatabase::pexecute($ips_stmt, [\n\t\t\t\t\t\"id_domain\" => $result['id']\n\t\t\t\t]);\n\t\t\t\t$domainips = [];\n\t\t\t\twhile ($rowip = $ips_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$domainips[] = ['item' => $rowip['ip']];\n\t\t\t\t}\n\n\t\t\t\t$phpconfigs = [];\n\t\t\t\tif (isset($userinfo['allowed_phpconfigs']) && !empty($userinfo['allowed_phpconfigs'])) {\n\t\t\t\t\t$allowed_cfg = json_decode($userinfo['allowed_phpconfigs'], JSON_OBJECT_AS_ARRAY);\n\t\t\t\t\t$phpconfigs_result_stmt = Database::query(\"\n\t\t\t\t\t\tSELECT c.*, fc.description as interpreter\n\t\t\t\t\t\tFROM `\" . TABLE_PANEL_PHPCONFIGS . \"` c\n\t\t\t\t\t\tLEFT JOIN `\" . TABLE_PANEL_FPMDAEMONS . \"` fc ON fc.id = c.fpmsettingid\n\t\t\t\t\t\tWHERE c.id IN (\" . implode(\", \", $allowed_cfg) . \")\n\t\t\t\t\t\");\n\t\t\t\t\twhile ($phpconfigs_row = $phpconfigs_result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t\tif ((int)Settings::Get('phpfpm.enabled') == 1) {\n\t\t\t\t\t\t\t$phpconfigs[$phpconfigs_row['id']] = $phpconfigs_row['description'] . \" [\" . $phpconfigs_row['interpreter'] . \"]\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$phpconfigs[$phpconfigs_row['id']] = $phpconfigs_row['description'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$alias_stmt = Database::prepare(\"SELECT COUNT(`id`) AS count FROM `\" . TABLE_PANEL_DOMAINS . \"` WHERE `aliasdomain`= :aliasdomain\");\n\t\t\t\t$alias_check = Database::pexecute_first($alias_stmt, [\n\t\t\t\t\t\"aliasdomain\" => $result['id']\n\t\t\t\t]);\n\t\t\t\t$alias_check = $alias_check['count'];\n\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$subdomain_edit_data = include_once dirname(__FILE__) . '/lib/formfields/customer/domains/formfield.domains_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'domains', 'id' => $id]),\n\t\t\t\t\t'formdata' => $subdomain_edit_data['domain_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('domains_canteditdomain');\n\t\t}\n\t}\n} elseif ($page == 'domainssleditor') {\n\trequire_once __DIR__ . '/ssl_editor.php';\n} elseif ($page == 'domaindnseditor' && $userinfo['dnsenabled'] == '1' && Settings::Get('system.dnsenabled') == '1') {\n\trequire_once __DIR__ . '/dns_editor.php';\n} elseif ($page == 'sslcertificates') {\n\trequire_once __DIR__ . '/ssl_certificates.php';\n} elseif ($page == 'logfiles') {\n\trequire_once __DIR__ . '/logfiles_viewer.php';\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'customer';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\EmailAccounts as EmailAccounts;\nuse Froxlor\\Api\\Commands\\EmailForwarders as EmailForwarders;\nuse Froxlor\\Api\\Commands\\Emails as Emails;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Check;\nuse Froxlor\\CurrentUser;\n\n// redirect if this customer page is hidden via settings\nif (Settings::IsInList('panel.customer_hide_options', 'email') || $userinfo['emails'] == 0) {\n\tResponse::redirectTo('customer_index.php');\n}\n\n$id = (int)Request::any('id');\n\nif ($page == 'overview' || $page == 'emails') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"viewed customer_email::emails\");\n\n\t\ttry {\n\t\t\t$email_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/customer/tablelisting.emails.php';\n\t\t\t$collection = (new Collection(Emails::class, $userinfo))\n\t\t\t\t->withPagination($email_list_data['email_list']['columns'], $email_list_data['email_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT COUNT(`id`) as emaildomains\n\t\t\tFROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\tWHERE `customerid`= :cid AND `isemaildomain` = '1'\n\t\t\");\n\t\t$result2 = Database::pexecute_first($result_stmt, [\n\t\t\t\"cid\" => $userinfo['customerid']\n\t\t]);\n\t\t$emaildomains_count = $result2['emaildomains'];\n\n\t\t$actions_links = false;\n\t\tif (CurrentUser::canAddResource('emails')) {\n\t\t\t$actions_links = [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'email', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('emails.emails_add')\n\t\t\t\t]\n\t\t\t];\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $email_list_data, 'email_list'),\n\t\t\t'actions_links' => $actions_links,\n\t\t\t'entity_info' => lng('emails.description')\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Emails::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['email']) && $result['email'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tEmails::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $id,\n\t\t\t\t\t\t'delete_userfiles' => ($_POST['delete_userfiles'] ?? 0)\n\t\t\t\t\t])->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tif ($result['popaccountid'] != '0') {\n\t\t\t\t\t$show_checkbox = true;\n\t\t\t\t} else {\n\t\t\t\t\t$show_checkbox = false;\n\t\t\t\t}\n\t\t\t\tHTML::askYesNoWithCheckbox('email_reallydelete', 'admin_customer_alsoremovemail', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $idna_convert->decode($result['email_full']), $show_checkbox);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif ($userinfo['emails_used'] < $userinfo['emails'] || $userinfo['emails'] == '-1') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\t$json_result = Emails::getLocal($userinfo, $_POST)->add();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\t$result = json_decode($json_result, true)['data'];\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t'id' => $result['id']\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$result_stmt = Database::prepare(\"SELECT `id`, `domain`, `customerid` FROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\t\t\tWHERE `customerid`= :cid\n\t\t\t\t\tAND `isemaildomain`='1'\n\t\t\t\t\tORDER BY `domain_ace` ASC\");\n\t\t\t\tDatabase::pexecute($result_stmt, [\n\t\t\t\t\t\"cid\" => $userinfo['customerid']\n\t\t\t\t]);\n\t\t\t\t$domains = [];\n\t\t\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t$domains[$row['domain']] = $idna_convert->decode($row['domain']);\n\t\t\t\t}\n\n\t\t\t\tif (count($domains) > 0) {\n\t\t\t\t\t$email_add_data = include_once dirname(__FILE__) . '/lib/formfields/customer/email/formfield.emails_add.php';\n\n\t\t\t\t\tif (Settings::Get('catchall.catchall_enabled') != '1') {\n\t\t\t\t\t\tunset($email_add_data['emails_add']['sections']['section_a']['fields']['iscatchall']);\n\t\t\t\t\t}\n\t\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'email']),\n\t\t\t\t\t\t'formdata' => $email_add_data['emails_add']\n\t\t\t\t\t]);\n\t\t\t\t} else {\n\t\t\t\t\tResponse::standardError('emails.noemaildomainaddedyet');\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('allresourcesused');\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Emails::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['email']) && $result['email'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t}\n\t\t\t$result['email'] = $idna_convert->decode($result['email']);\n\t\t\t$result['email_full'] = $idna_convert->decode($result['email_full']);\n\t\t\t$result['destination'] = explode(' ', $result['destination']);\n\t\t\tuasort($result['destination'], 'strcasecmp');\n\t\t\t$forwarders = [];\n\t\t\t$forwarders_count = 0;\n\n\t\t\tforeach ($result['destination'] as $dest_id => $destination) {\n\t\t\t\t$destination = $idna_convert->decode($destination);\n\t\t\t\tif ($destination != $result['email_full'] && $destination != '') {\n\t\t\t\t\t$forwarders[] = [\n\t\t\t\t\t\t'item' => $destination,\n\t\t\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t\t\t'section' => 'email',\n\t\t\t\t\t\t\t'page' => 'forwarders',\n\t\t\t\t\t\t\t'action' => 'delete',\n\t\t\t\t\t\t\t'id' => $id,\n\t\t\t\t\t\t\t'forwarderid' => $dest_id\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t'label' => lng('panel.delete'),\n\t\t\t\t\t\t'classes' => 'btn btn-sm btn-danger'\n\t\t\t\t\t];\n\t\t\t\t\t$forwarders_count++;\n\t\t\t\t}\n\t\t\t\t$result['destination'][$dest_id] = $destination;\n\t\t\t}\n\n\t\t\t$destinations_count = count($result['destination']);\n\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t$email_edit_data = include_once dirname(__FILE__) . '/lib/formfields/customer/email/formfield.emails_edit.php';\n\n\t\t\tif (Settings::Get('catchall.catchall_enabled') != '1') {\n\t\t\t\tunset($email_edit_data['emails_edit']['sections']['section_a']['fields']['mail_catchall']);\n\t\t\t}\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'email']),\n\t\t\t\t'formdata' => $email_edit_data['emails_edit'],\n\t\t\t\t'editid' => $id\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'togglecatchall' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Emails::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\ttry {\n\t\t\tEmails::getLocal($userinfo, [\n\t\t\t\t'id' => $id,\n\t\t\t\t'iscatchall' => ($result['iscatchall'] == '1' ? 0 : 1)\n\t\t\t])->update();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\tResponse::redirectTo($filename, [\n\t\t\t'page' => $page,\n\t\t\t'action' => 'edit',\n\t\t\t'id' => $id\n\t\t]);\n\t}\n} elseif ($page == 'accounts') {\n\tif ($action == 'add' && $id != 0) {\n\t\tif ($userinfo['email_accounts'] == '-1' || ($userinfo['email_accounts_used'] < $userinfo['email_accounts'])) {\n\t\t\ttry {\n\t\t\t\t$json_result = Emails::getLocal($userinfo, [\n\t\t\t\t\t'id' => $id\n\t\t\t\t])->get();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\t$result = json_decode($json_result, true)['data'];\n\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tEmailAccounts::getLocal($userinfo, $_POST)->add();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t'id' => $id\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tif (Check::checkMailAccDeletionState($result['email_full'])) {\n\t\t\t\t\tResponse::standardError([\n\t\t\t\t\t\t'mailaccistobedeleted'\n\t\t\t\t\t], $result['email_full']);\n\t\t\t\t}\n\n\t\t\t\t$result['email_full'] = $idna_convert->decode($result['email_full']);\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\t\t\t\t$quota = Settings::Get('system.mail_quota');\n\n\t\t\t\t$account_add_data = include_once dirname(__FILE__) . '/lib/formfields/customer/email/formfield.emails_addaccount.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'email', 'id' => $id]),\n\t\t\t\t\t'formdata' => $account_add_data['emails_addaccount'],\n\t\t\t\t\t'actions_links' => [\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'class' => 'btn-secondary',\n\t\t\t\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t\t\t\t'section' => 'email',\n\t\t\t\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t'label' => lng('emails.emails_edit'),\n\t\t\t\t\t\t\t'icon' => 'fa-solid fa-pen'\n\t\t\t\t\t\t],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'class' => 'btn-secondary',\n\t\t\t\t\t\t\t'href' => $linker->getLink(['section' => 'email', 'page' => 'emails']),\n\t\t\t\t\t\t\t'label' => lng('menue.email.emails'),\n\t\t\t\t\t\t\t'icon' => 'fa-solid fa-envelope'\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t]);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError([\n\t\t\t\t'allresourcesused',\n\t\t\t\t'allocatetoomuchquota'\n\t\t\t], $quota);\n\t\t}\n\t} elseif ($action == 'changepw' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Emails::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['popaccountid']) && $result['popaccountid'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tEmailAccounts::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t'id' => $id\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$result['email_full'] = $idna_convert->decode($result['email_full']);\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$account_changepw_data = include_once dirname(__FILE__) . '/lib/formfields/customer/email/formfield.emails_accountchangepasswd.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'email', 'id' => $id]),\n\t\t\t\t\t'formdata' => $account_changepw_data['emails_accountchangepasswd'],\n\t\t\t\t\t'actions_links' => [\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'class' => 'btn-secondary',\n\t\t\t\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t\t\t\t'section' => 'email',\n\t\t\t\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t'label' => lng('emails.emails_edit'),\n\t\t\t\t\t\t\t'icon' => 'fa-solid fa-pen'\n\t\t\t\t\t\t],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'class' => 'btn-secondary',\n\t\t\t\t\t\t\t'href' => $linker->getLink(['section' => 'email', 'page' => 'emails']),\n\t\t\t\t\t\t\t'label' => lng('menue.email.emails'),\n\t\t\t\t\t\t\t'icon' => 'fa-solid fa-envelope'\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'changequota' && Settings::Get('system.mail_quota_enabled') == '1' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Emails::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['popaccountid']) && $result['popaccountid'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tEmailAccounts::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t'id' => $id\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$result['email_full'] = $idna_convert->decode($result['email_full']);\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$quota_edit_data = include_once dirname(__FILE__) . '/lib/formfields/customer/email/formfield.emails_accountchangequota.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'email', 'id' => $id]),\n\t\t\t\t\t'formdata' => $quota_edit_data['emails_accountchangequota'],\n\t\t\t\t\t'actions_links' => [\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'class' => 'btn-secondary',\n\t\t\t\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t\t\t\t'section' => 'email',\n\t\t\t\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t'label' => lng('emails.emails_edit'),\n\t\t\t\t\t\t\t'icon' => 'fa-solid fa-pen'\n\t\t\t\t\t\t],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'class' => 'btn-secondary',\n\t\t\t\t\t\t\t'href' => $linker->getLink(['section' => 'email', 'page' => 'emails']),\n\t\t\t\t\t\t\t'label' => lng('menue.email.emails'),\n\t\t\t\t\t\t\t'icon' => 'fa-solid fa-envelope'\n\t\t\t\t\t\t]\n\t\t\t\t\t],\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Emails::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['popaccountid']) && $result['popaccountid'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tEmailAccounts::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t'id' => $id\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNoWithCheckbox('email_reallydelete_account', 'admin_customer_alsoremovemail', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $idna_convert->decode($result['email_full']));\n\t\t\t}\n\t\t}\n\t}\n} elseif ($page == 'forwarders') {\n\tif ($action == 'add' && $id != 0) {\n\t\tif ($userinfo['email_forwarders_used'] < $userinfo['email_forwarders'] || $userinfo['email_forwarders'] == '-1') {\n\t\t\ttry {\n\t\t\t\t$json_result = Emails::getLocal($userinfo, [\n\t\t\t\t\t'id' => $id\n\t\t\t\t])->get();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\t$result = json_decode($json_result, true)['data'];\n\n\t\t\tif (isset($result['email']) && $result['email'] != '') {\n\t\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tEmailForwarders::getLocal($userinfo, $_POST)->add();\n\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t\t}\n\t\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t]);\n\t\t\t\t} else {\n\t\t\t\t\t$result['email_full'] = $idna_convert->decode($result['email_full']);\n\t\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t\t$forwarder_add_data = include_once dirname(__FILE__) . '/lib/formfields/customer/email/formfield.emails_addforwarder.php';\n\n\t\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'email', 'id' => $id]),\n\t\t\t\t\t\t'formdata' => $forwarder_add_data['emails_addforwarder'],\n\t\t\t\t\t\t'actions_links' => [\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t'class' => 'btn-secondary',\n\t\t\t\t\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t\t\t\t\t'section' => 'email',\n\t\t\t\t\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t'label' => lng('emails.emails_edit'),\n\t\t\t\t\t\t\t\t'icon' => 'fa-solid fa-pen'\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t'class' => 'btn-secondary',\n\t\t\t\t\t\t\t\t'href' => $linker->getLink(['section' => 'email', 'page' => 'emails']),\n\t\t\t\t\t\t\t\t'label' => lng('menue.email.emails'),\n\t\t\t\t\t\t\t\t'icon' => 'fa-solid fa-envelope'\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('allresourcesused');\n\t\t}\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Emails::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['destination']) && $result['destination'] != '') {\n\t\t\tif (isset($_POST['forwarderid'])) {\n\t\t\t\t$forwarderid = intval($_POST['forwarderid']);\n\t\t\t} elseif (isset($_GET['forwarderid'])) {\n\t\t\t\t$forwarderid = intval($_GET['forwarderid']);\n\t\t\t} else {\n\t\t\t\t$forwarderid = 0;\n\t\t\t}\n\n\t\t\t$result['destination'] = explode(' ', $result['destination']);\n\n\t\t\tif (isset($result['destination'][$forwarderid]) && $result['email'] != $result['destination'][$forwarderid]) {\n\t\t\t\t$forwarder = $result['destination'][$forwarderid];\n\n\t\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tEmailForwarders::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t\t}\n\t\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t\t'page' => 'emails',\n\t\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t]);\n\t\t\t\t} else {\n\t\t\t\t\tHTML::askYesNo('email_reallydelete_forwarder', $filename, [\n\t\t\t\t\t\t'id' => $id,\n\t\t\t\t\t\t'forwarderid' => $forwarderid,\n\t\t\t\t\t\t'page' => $page,\n\t\t\t\t\t\t'action' => $action\n\t\t\t\t\t], $idna_convert->decode($result['email_full']) . ' -> ' . $idna_convert->decode($forwarder));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'customer';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\CustomerBackups as CustomerBackups;\nuse Froxlor\\Api\\Commands\\DirOptions as DirOptions;\nuse Froxlor\\Api\\Commands\\DirProtections as DirProtections;\nuse Froxlor\\Customer\\Customer;\nuse Froxlor\\FileDir;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n// redirect if this customer page is hidden via settings\nif (Settings::IsInList('panel.customer_hide_options', 'extras')) {\n\tResponse::redirectTo('customer_index.php');\n}\n\n$id = (int)Request::any('id');\n\nif ($page == 'overview' || $page == 'htpasswds') {\n\t// redirect if this customer sub-page is hidden via settings\n\tif (Settings::IsInList('panel.customer_hide_options', 'extras.directoryprotection')) {\n\t\tResponse::redirectTo('customer_index.php');\n\t}\n\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"viewed customer_extras::htpasswds\");\n\t\t$fields = [\n\t\t\t'username' => lng('login.username'),\n\t\t\t'path' => lng('panel.path')\n\t\t];\n\t\ttry {\n\t\t\t$htpasswd_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/customer/tablelisting.htpasswd.php';\n\t\t\t$collection = (new Collection(DirProtections::class, $userinfo))\n\t\t\t\t->withPagination($htpasswd_list_data['htpasswd_list']['columns'], $htpasswd_list_data['htpasswd_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $htpasswd_list_data, 'htpasswd_list'),\n\t\t\t'actions_links' => [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'extras', 'page' => 'htpasswds', 'action' => 'add']),\n\t\t\t\t\t'label' => lng('extras.directoryprotection_add')\n\t\t\t\t]\n\t\t\t],\n\t\t\t'entity_info' => lng('extras.description')\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = DirProtections::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['username']) && $result['username'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tDirProtections::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tif (strpos($result['path'], $userinfo['documentroot']) === 0) {\n\t\t\t\t\t$result['path'] = str_replace($userinfo['documentroot'], \"/\", $result['path']);\n\t\t\t\t}\n\n\t\t\t\tHTML::askYesNo('extras_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['username'] . ' (' . $result['path'] . ')');\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tDirProtections::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$pathSelect = FileDir::makePathfield($userinfo['documentroot'], $userinfo['guid'], $userinfo['guid']);\n\n\t\t\t$htpasswd_add_data = include_once dirname(__FILE__) . '/lib/formfields/customer/extras/formfield.htpasswd_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'extras']),\n\t\t\t\t'formdata' => $htpasswd_add_data['htpasswd_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = DirProtections::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['username']) && $result['username'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tDirProtections::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tif (strpos($result['path'], $userinfo['documentroot']) === 0) {\n\t\t\t\t\t$result['path'] = str_replace($userinfo['documentroot'], \"/\", $result['path']);\n\t\t\t\t}\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$htpasswd_edit_data = include_once dirname(__FILE__) . '/lib/formfields/customer/extras/formfield.htpasswd_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'extras', 'id' => $id]),\n\t\t\t\t\t'formdata' => $htpasswd_edit_data['htpasswd_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n} elseif ($page == 'htaccess') {\n\t// redirect if this customer sub-page is hidden via settings\n\tif (Settings::IsInList('panel.customer_hide_options', 'extras.pathoptions')) {\n\t\tResponse::redirectTo('customer_index.php');\n\t}\n\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"viewed customer_extras::htaccess\");\n\n\t\t$cperlenabled = Customer::customerHasPerlEnabled($userinfo['customerid']);\n\n\t\ttry {\n\t\t\t$htaccess_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/customer/tablelisting.htaccess.php';\n\t\t\t$collection = (new Collection(DirOptions::class, $userinfo))\n\t\t\t\t->withPagination($htaccess_list_data['htaccess_list']['columns'], $htaccess_list_data['htaccess_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $htaccess_list_data, 'htaccess_list'),\n\t\t\t'actions_links' => [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'extras', 'page' => 'htaccess', 'action' => 'add']),\n\t\t\t\t\t'label' => lng('extras.pathoptions_add')\n\t\t\t\t]\n\t\t\t],\n\t\t\t'entity_info' => lng('extras.description')\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = DirOptions::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['customerid']) && $result['customerid'] != '' && $result['customerid'] == $userinfo['customerid']) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tDirOptions::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('extras_reallydelete_pathoptions', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], str_replace($userinfo['documentroot'], '/', $result['path']));\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tDirOptions::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$pathSelect = FileDir::makePathfield($userinfo['documentroot'], $userinfo['guid'], $userinfo['guid']);\n\t\t\t$cperlenabled = Customer::customerHasPerlEnabled($userinfo['customerid']);\n\n\t\t\t$htaccess_add_data = include_once dirname(__FILE__) . '/lib/formfields/customer/extras/formfield.htaccess_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'extras']),\n\t\t\t\t'formdata' => $htaccess_add_data['htaccess_add']\n\t\t\t]);\n\t\t}\n\t} elseif (($action == 'edit') && ($id != 0)) {\n\t\ttry {\n\t\t\t$json_result = DirOptions::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ((isset($result['customerid'])) && ($result['customerid'] != '') && ($result['customerid'] == $userinfo['customerid'])) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tDirOptions::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tif (strpos($result['path'], $userinfo['documentroot']) === 0) {\n\t\t\t\t\t$result['path'] = str_replace($userinfo['documentroot'], \"/\", $result['path']);\n\t\t\t\t}\n\t\t\t\t$cperlenabled = Customer::customerHasPerlEnabled($userinfo['customerid']);\n\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$htaccess_edit_data = include_once dirname(__FILE__) . '/lib/formfields/customer/extras/formfield.htaccess_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'extras', 'id' => $id]),\n\t\t\t\t\t'formdata' => $htaccess_edit_data['htaccess_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n} elseif ($page == 'backup') {\n\t// redirect if this customer sub-page is hidden via settings\n\tif (Settings::IsInList('panel.customer_hide_options', 'extras.backup')) {\n\t\tResponse::redirectTo('customer_index.php');\n\t}\n\n\tif (Settings::Get('system.backupenabled') == 1) {\n\t\tif ($action == 'abort') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\t$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"customer_extras::backup - aborted scheduled backupjob\");\n\t\t\t\ttry {\n\t\t\t\t\tCustomerBackups::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => ''\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('extras_reallydelete_backup', $filename, [\n\t\t\t\t\t'backup_job_entry' => $id,\n\t\t\t\t\t'section' => 'extras',\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t]);\n\t\t\t}\n\t\t} elseif ($action == '') {\n\t\t\t$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"viewed customer_extras::backup\");\n\n\t\t\t// check whether there is a backup-job for this customer\n\t\t\ttry {\n\t\t\t\t$backup_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/customer/tablelisting.backups.php';\n\t\t\t\t$collection = (new Collection(CustomerBackups::class, $userinfo));\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tCustomerBackups::getLocal($userinfo, $_POST)->add();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::standardSuccess('backupscheduled');\n\t\t\t} else {\n\t\t\t\t$pathSelect = FileDir::makePathfield($userinfo['documentroot'], $userinfo['guid'], $userinfo['guid']);\n\t\t\t\t$backup_data = include_once dirname(__FILE__) . '/lib/formfields/customer/extras/formfield.backup.php';\n\n\t\t\t\tUI::view('user/form-datatable.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'extras']),\n\t\t\t\t\t'formdata' => $backup_data['backup'],\n\t\t\t\t\t'tabledata' => Listing::format($collection, $backup_list_data, 'backup_list'),\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tResponse::standardError('backupfunctionnotenabled');\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'customer';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Ftps as Ftps;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FileDir;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\CurrentUser;\n\n// redirect if this customer page is hidden via settings\nif (Settings::IsInList('panel.customer_hide_options', 'ftp') || $userinfo['ftps'] == 0) {\n\tResponse::redirectTo('customer_index.php');\n}\n\n$id = (int)Request::any('id', 0);\n\nif ($page == 'overview' || $page == 'accounts') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"viewed customer_ftp::accounts\");\n\t\ttry {\n\t\t\t$ftp_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/customer/tablelisting.ftps.php';\n\t\t\t$collection = (new Collection(Ftps::class, $userinfo))\n\t\t\t\t->withPagination($ftp_list_data['ftp_list']['columns'], $ftp_list_data['ftp_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\t$actions_links = false;\n\t\tif (CurrentUser::canAddResource('ftps')) {\n\t\t\t$actions_links = [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'ftp', 'page' => 'accounts', 'action' => 'add']),\n\t\t\t\t\t'label' => lng('ftp.account_add')\n\t\t\t\t]\n\t\t\t];\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $ftp_list_data, 'ftp_list'),\n\t\t\t'actions_links' => $actions_links,\n\t\t\t'entity_info' => lng('ftp.description')\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Ftps::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['username']) && $result['username'] != $userinfo['loginname']) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tFtps::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNoWithCheckbox('ftp_reallydelete', 'admin_customer_alsoremoveftphomedir', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['username']);\n\t\t\t}\n\t\t} else {\n\t\t\tResponse::standardError('ftp_cantdeletemainaccount');\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif ($userinfo['ftps_used'] < $userinfo['ftps'] || $userinfo['ftps'] == '-1') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tFtps::getLocal($userinfo, $_POST)->add();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$pathSelect = FileDir::makePathfield($userinfo['documentroot'], $userinfo['guid'], $userinfo['guid'], '/');\n\n\t\t\t\tif (Settings::Get('customer.ftpatdomain') == '1') {\n\t\t\t\t\t$domainlist = [];\n\t\t\t\t\t$result_domains_stmt = Database::prepare(\"SELECT `domain` FROM `\" . TABLE_PANEL_DOMAINS . \"`\n\t\t\t\t\t\tWHERE `customerid`= :customerid\");\n\t\t\t\t\tDatabase::pexecute($result_domains_stmt, [\n\t\t\t\t\t\t\"customerid\" => $userinfo['customerid']\n\t\t\t\t\t]);\n\n\t\t\t\t\twhile ($row_domain = $result_domains_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t\t$domainlist[$row_domain['domain']] = $idna_convert->decode($row_domain['domain']);\n\t\t\t\t\t}\n\t\t\t\t\tsort($domainlist);\n\t\t\t\t}\n\n\t\t\t\tif (Settings::Get('system.allow_customer_shell') == '1') {\n\t\t\t\t\t$shells['/bin/false'] = \"/bin/false\";\n\t\t\t\t\t$shells_avail = Settings::Get('system.available_shells');\n\t\t\t\t\tif (!empty($shells_avail)) {\n\t\t\t\t\t\t$shells_avail_arr = explode(\",\", $shells_avail);\n\t\t\t\t\t\t$shells_avail_arr = array_map(\"trim\", $shells_avail_arr);\n\t\t\t\t\t\tforeach ($shells_avail_arr as $shell) {\n\t\t\t\t\t\t\t$shells[$shell] = $shell;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$ftp_add_data = include_once dirname(__FILE__) . '/lib/formfields/customer/ftp/formfield.ftp_add.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'ftp']),\n\t\t\t\t\t'formdata' => $ftp_add_data['ftp_add']\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Ftps::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['username']) && $result['username'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tFtps::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tif (strpos($result['homedir'], $userinfo['documentroot']) === 0) {\n\t\t\t\t\t$homedir = str_replace($userinfo['documentroot'], \"/\", $result['homedir']);\n\t\t\t\t} else {\n\t\t\t\t\t$homedir = $result['homedir'];\n\t\t\t\t}\n\t\t\t\t$homedir = FileDir::makeCorrectDir($homedir);\n\n\t\t\t\t$pathSelect = FileDir::makePathfield($userinfo['documentroot'], $userinfo['guid'], $userinfo['guid'], $homedir);\n\n\t\t\t\tif (Settings::Get('system.allow_customer_shell') == '1') {\n\t\t\t\t\t$shells['/bin/false'] = \"/bin/false\";\n\t\t\t\t\t$shells_avail = Settings::Get('system.available_shells');\n\t\t\t\t\tif (!empty($shells_avail)) {\n\t\t\t\t\t\t$shells_avail_arr = explode(\",\", $shells_avail);\n\t\t\t\t\t\t$shells_avail_arr = array_map(\"trim\", $shells_avail_arr);\n\t\t\t\t\t\tforeach ($shells_avail_arr as $shell) {\n\t\t\t\t\t\t\t$shells[$shell] = $shell;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$ftp_edit_data = include_once dirname(__FILE__) . '/lib/formfields/customer/ftp/formfield.ftp_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'ftp', 'id' => $id]),\n\t\t\t\t\t'formdata' => $ftp_edit_data['ftp_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'customer';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Mysqls;\nuse Froxlor\\Api\\Commands\\MysqlServer;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\CurrentUser;\n\n// redirect if this customer page is hidden via settings or no resources given\nif (Settings::IsInList('panel.customer_hide_options', 'mysql') || $userinfo['mysqls'] == 0) {\n\tResponse::redirectTo('customer_index.php');\n}\n\n// get sql-root access data\nDatabase::needRoot(true);\nDatabase::needSqlData();\n$sql_root = Database::getSqlData();\nDatabase::needRoot(false);\n\n$id = (int)Request::any('id');\n\nif ($page == 'overview' || $page == 'mysqls') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"viewed customer_mysql::mysqls\");\n\n\t\t$multiple_mysqlservers = count(json_decode($userinfo['allowed_mysqlserver'] ?? '[]', true)) > 1;\n\n\t\ttry {\n\t\t\t$mysql_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/customer/tablelisting.mysqls.php';\n\t\t\t$collection = (new Collection(Mysqls::class, $userinfo))\n\t\t\t\t->withPagination($mysql_list_data['mysql_list']['columns'], $mysql_list_data['mysql_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\t$actions_links = false;\n\t\tif (CurrentUser::canAddResource('mysqls')) {\n\t\t\t$actions_links = [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'mysql', 'page' => 'mysqls', 'action' => 'add']),\n\t\t\t\t\t'label' => lng('mysql.database_create')\n\t\t\t\t]\n\t\t\t];\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $mysql_list_data, 'mysql_list'),\n\t\t\t'actions_links' => $actions_links,\n\t\t\t'entity_info' => lng('mysql.description')\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Mysqls::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['databasename']) && $result['databasename'] != '') {\n\t\t\tDatabase::needRoot(true, $result['dbserver']);\n\t\t\tDatabase::needSqlData();\n\t\t\t$sql_root = Database::getSqlData();\n\t\t\tDatabase::needRoot(false);\n\n\t\t\tif (!isset($sql_root[$result['dbserver']]) || !is_array($sql_root[$result['dbserver']])) {\n\t\t\t\t$result['dbserver'] = 0;\n\t\t\t}\n\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tMysqls::getLocal($userinfo, $_POST)->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$dbnamedesc = $result['databasename'];\n\t\t\t\tif (isset($result['description']) && $result['description'] != '') {\n\t\t\t\t\t$dbnamedesc .= ' (' . $result['description'] . ')';\n\t\t\t\t}\n\t\t\t\tHTML::askYesNo('mysql_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $dbnamedesc);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif ($userinfo['mysqls_used'] < $userinfo['mysqls'] || $userinfo['mysqls'] == '-1') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tMysqls::getLocal($userinfo, $_POST)->add();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$mysql_servers = [];\n\t\t\t\ttry {\n\t\t\t\t\t$result_json = MysqlServer::getLocal($userinfo)->listing();\n\t\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\t\tforeach ($result_decoded as $dbserver => $dbdata) {\n\t\t\t\t\t\t$mysql_servers[$dbserver] = $dbdata['caption'];\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t/* just none */\n\t\t\t\t}\n\n\t\t\t\t$mysql_add_data = include_once dirname(__FILE__) . '/lib/formfields/customer/mysql/formfield.mysql_add.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'mysql']),\n\t\t\t\t\t'formdata' => $mysql_add_data['mysql_add']\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Mysqls::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['databasename']) && $result['databasename'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\t$json_result = Mysqls::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$mysql_servers = [];\n\t\t\t\ttry {\n\t\t\t\t\t$result_json = MysqlServer::getLocal($userinfo)->listing();\n\t\t\t\t\t$result_decoded = json_decode($result_json, true)['data']['list'];\n\t\t\t\t\tforeach ($result_decoded as $dbserver => $dbdata) {\n\t\t\t\t\t\t$mysql_servers[$dbserver] = $dbdata['caption'] . ' (' . $dbdata['host'] . (isset($dbdata['port']) && !empty($dbdata['port']) ? ':' . $dbdata['port'] : '').')';\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\t/* just none */\n\t\t\t\t}\n\n\t\t\t\t$mysql_edit_data = include_once dirname(__FILE__) . '/lib/formfields/customer/mysql/formfield.mysql_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'mysql', 'id' => $id]),\n\t\t\t\t\t'formdata' => $mysql_edit_data['mysql_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'customer';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Traffic\\Traffic;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n// redirect if this customer page is hidden via settings\nif (Settings::IsInList('panel.customer_hide_options', 'traffic')) {\n\tResponse::redirectTo('customer_index.php');\n}\n\n$range = Request::any('range', 'currentyear');\n\nif ($page == 'current') {\n\t$range = 'currentmonth';\n}\n\ntry {\n\t$context = Traffic::getCustomerStats($userinfo, $range);\n} catch (Exception $e) {\n\tResponse::dynamicError($e->getMessage());\n}\n\n// pass metrics to the view\nUI::view('user/traffic.html.twig', $context);\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nif (!defined('AREA')) {\n\theader(\"Location: index.php\");\n\texit();\n}\n\nuse Froxlor\\Api\\Commands\\DomainZones;\nuse Froxlor\\Dns\\Dns;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n// This file is being included in admin_domains and customer_domains\n// and therefore does not need to require lib/init.php\n\n$domain_id = (int)Request::any('domain_id');\n\n$record = isset($_POST['dns_record']) ? trim($_POST['dns_record']) : null;\n$type = isset($_POST['dns_type']) ? $_POST['dns_type'] : 'A';\n$prio = isset($_POST['dns_mxp']) ? (int)$_POST['dns_mxp'] : null;\n$content = isset($_POST['dns_content']) ? trim($_POST['dns_content']) : null;\n$ttl = isset($_POST['dns_ttl']) ? (int)$_POST['dns_ttl'] : 18000;\n\n// get domain-name\n$domain = Dns::getAllowedDomainEntry($domain_id, AREA, $userinfo);\n\n$errors = \"\";\n$success_message = \"\";\n\n// action for adding a new entry\nif ($action == 'add_record' && !empty($_POST)) {\n\ttry {\n\t\tDomainZones::getLocal($userinfo, [\n\t\t\t'id' => $domain_id,\n\t\t\t'record' => $record,\n\t\t\t'type' => $type,\n\t\t\t'prio' => $prio,\n\t\t\t'content' => $content,\n\t\t\t'ttl' => $ttl\n\t\t])->add();\n\t\t$success_message = lng('success.dns_record_added');\n\t\t$record = $prio = $content = \"\";\n\t} catch (Exception $e) {\n\t\t$errors = str_replace(\"\\n\", \"<br>\", $e->getMessage());\n\t}\n} elseif ($action == 'delete') {\n\t$entry_id = isset($_GET['id']) ? (int)$_GET['id'] : 0;\n\tHTML::askYesNo('dnsentry_reallydelete', $filename, [\n\t\t'id' => $entry_id,\n\t\t'domain_id' => $domain_id,\n\t\t'page' => $page,\n\t\t'action' => 'deletesure'\n\t], '', [\n\t\t'section' => 'domains',\n\t\t'page' => $page,\n\t\t'domain_id' => $domain_id\n\t]);\n} elseif (isset($_POST['send']) && $_POST['send'] == 'send' && $action == 'deletesure' && !empty($_POST)) {\n\t$entry_id = isset($_POST['id']) ? (int)$_POST['id'] : 0;\n\t$domain_id = isset($_POST['domain_id']) ? (int)$_POST['domain_id'] : 0;\n\t// remove entry\n\tif ($entry_id > 0 && $domain_id > 0) {\n\t\ttry {\n\t\t\tDomainZones::getLocal($userinfo, [\n\t\t\t\t'entry_id' => $entry_id,\n\t\t\t\t'id' => $domain_id\n\t\t\t])->delete();\n\t\t\t// success message (inline)\n\t\t\t$success_message = lng('success.dns_record_deleted');\n\t\t} catch (Exception $e) {\n\t\t\t$errors = str_replace(\"\\n\", \"<br>\", $e->getMessage());\n\t\t}\n\t}\n}\n\n// select all entries\ntry {\n\t$dns_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/tablelisting.dns.php';\n\t$collection = (new Collection(DomainZones::class, $userinfo, ['id' => $domain_id]))\n\t\t->withPagination($dns_list_data['dns_list']['columns'], $dns_list_data['dns_list']['default_sorting']);\n} catch (Exception $e) {\n\tResponse::dynamicError($e->getMessage());\n}\n\ntry {\n\t$json_result = DomainZones::getLocal($userinfo, [\n\t\t'id' => $domain_id\n\t])->get();\n} catch (Exception $e) {\n\tResponse::dynamicError($e->getMessage());\n}\n$result = json_decode($json_result, true)['data'];\n$zonefile = implode(\"\\n\", $result);\n\n$dns_add_data = include_once dirname(__FILE__) . '/lib/formfields/formfield.dns_add.php';\n\nUI::view('user/dns-editor.html.twig', [\n\t'listing' => Listing::format($collection, $dns_list_data, 'dns_list', ['domain_id' => $domain_id]),\n\t'actions_links' => [\n\t\t[\n\t\t\t'href' => $linker->getLink([\n\t\t\t\t'section' => 'domains',\n\t\t\t\t'page' => 'domains',\n\t\t\t\t'action' => 'edit',\n\t\t\t\t'id' => $domain_id\n\t\t\t]),\n\t\t\t'label' => lng('admin.domain_edit'),\n\t\t\t'icon' => 'fa-solid fa-pen'\n\t\t],\n\t\t[\n\t\t\t'href' => $linker->getLink(['section' => 'domains', 'page' => 'domains']),\n\t\t\t'label' => lng('panel.backtooverview'),\n\t\t\t'icon' => 'fa-solid fa-reply'\n\t\t]\n\t],\n\t'formaction' => $linker->getLink(['section' => 'domains', 'action' => 'add_record', 'domain_id' => $domain_id]),\n\t'formdata' => $dns_add_data['dns_add'],\n\t// alert-box\n\t'type' => (!empty($errors) ? 'danger' : (!empty($success_message) ? 'success' : 'warning')),\n\t'alert_msg' => (!empty($errors) ? $errors : (!empty($success_message) ? $success_message : lng('dns.howitworks'))),\n\t'zonefile' => $zonefile,\n]);\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nif (!defined('AREA')) {\n\theader(\"Location: index.php\");\n\texit();\n}\n\nuse Froxlor\\FileDir;\nuse Froxlor\\Froxlor;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n// This file is being included in admin_domains and customer_domains\n// and therefore does not need to require lib/init.php\n\n$errid = Request::any('errorid');\n\nif (!empty($errid)) {\n\t// read error file\n\t$err_dir = FileDir::makeCorrectDir(Froxlor::getInstallDir() . \"/logs/\");\n\t$err_file = FileDir::makeCorrectFile($err_dir . \"/\" . $errid . \"_sql-error.log\");\n\n\tif (file_exists($err_file)) {\n\t\t$error_content = file_get_contents($err_file);\n\t\t$error = explode(\"|\", $error_content);\n\n\t\t$_error = [\n\t\t\t'code' => str_replace(\"\\n\", \"\", substr($error[1], 5)),\n\t\t\t'message' => str_replace(\"\\n\", \"\", substr($error[2], 4)),\n\t\t\t'file' => str_replace(\"\\n\", \"\", substr($error[3], 5 + strlen(Froxlor::getInstallDir()))),\n\t\t\t'line' => str_replace(\"\\n\", \"\", substr($error[4], 5)),\n\t\t\t'trace' => str_replace(Froxlor::getInstallDir(), \"\", substr($error[5], 6))\n\t\t];\n\n\t\t// build mail-content\n\t\t$mail_body = \"Dear froxlor-team,\\n\\n\";\n\t\t$mail_body .= \"the following error has been reported by a user:\\n\\n\";\n\t\t$mail_body .= \"-------------------------------------------------------------\\n\";\n\t\t$mail_body .= $_error['code'] . ' ' . $_error['message'] . \"\\n\\n\";\n\t\t$mail_body .= \"File: \" . $_error['file'] . ':' . $_error['line'] . \"\\n\\n\";\n\t\t$mail_body .= \"Trace:\\n\" . trim($_error['trace']) . \"\\n\\n\";\n\t\t$mail_body .= \"-------------------------------------------------------------\\n\\n\";\n\t\t$mail_body .= \"User-Area: \" . AREA . \"\\n\";\n\t\t$mail_body .= \"Froxlor-version: \" . Froxlor::VERSION . \"\\n\";\n\t\t$mail_body .= \"DB-version: \" . Froxlor::DBVERSION . \"\\n\\n\";\n\t\t$mail_body .= \"End of report\";\n\t\t$mail_html = nl2br($mail_body);\n\n\t\t// send actual report to dev-team\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t// send mail and say thanks\n\t\t\t$_mailerror = false;\n\t\t\ttry {\n\t\t\t\t$mail->Subject = '[Froxlor] Error report by user';\n\t\t\t\t$mail->AltBody = $mail_body;\n\t\t\t\t$mail->MsgHTML($mail_html);\n\t\t\t\t$mail->AddAddress('error-reports@froxlor.org', 'Froxlor Developer Team');\n\t\t\t\t$mail->Send();\n\t\t\t} catch (\\PHPMailer\\PHPMailer\\Exception $e) {\n\t\t\t\t$mailerr_msg = $e->errorMessage();\n\t\t\t\t$_mailerror = true;\n\t\t\t} catch (Exception $e) {\n\t\t\t\t$mailerr_msg = $e->getMessage();\n\t\t\t\t$_mailerror = true;\n\t\t\t}\n\n\t\t\tif ($_mailerror) {\n\t\t\t\t// error when reporting an error...LOLFUQ\n\t\t\t\tResponse::standardError('send_report_error', $mailerr_msg);\n\t\t\t}\n\n\t\t\t// finally remove error from fs\n\t\t\t@unlink($err_file);\n\t\t\tResponse::standardSuccess('sent_error_report', '', ['filename' => 'index.php']);\n\t\t}\n\t\t// show a nice summary of the error-report\n\t\t// before actually sending anything\n\t\tUI::view('user/error_report.html.twig', [\n\t\t\t'mail_html' => $mail_body,\n\t\t\t'errorid' => $errid\n\t\t]);\n\t} else {\n\t\tResponse::redirectTo($filename);\n\t}\n} else {\n\tResponse::redirectTo($filename);\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Ajax;\n\nuse Exception;\nuse DateTime;\nuse Froxlor\\Config\\ConfigDisplay;\nuse Froxlor\\Config\\ConfigParser;\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FileDir;\nuse Froxlor\\Froxlor;\nuse Froxlor\\Http\\HttpClient;\nuse Froxlor\\Install\\Update;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Validate;\n\nclass Ajax\n{\n\tprotected string $action;\n\tprotected string $theme;\n\tprotected array $userinfo;\n\n\t/**\n\t * @throws Exception\n\t */\n\tpublic function __construct()\n\t{\n\t\t$this->action = Request::any('action');\n\t\t$this->theme = Request::any('theme', 'Froxlor');\n\n\t\tUI::sendHeaders();\n\t\tUI::sendSslHeaders();\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tpublic function handle()\n\t{\n\t\t$this->userinfo = $this->getValidatedSession();\n\n\t\tswitch ($this->action) {\n\t\t\tcase 'newsfeed':\n\t\t\t\treturn $this->getNewsfeed();\n\t\t\tcase 'updatecheck':\n\t\t\t\treturn $this->getUpdateCheck();\n\t\t\tcase 'searchglobal':\n\t\t\t\treturn $this->searchGlobal();\n\t\t\tcase 'updatetablelisting':\n\t\t\t\treturn $this->updateTablelisting();\n\t\t\tcase 'resettablelisting':\n\t\t\t\treturn $this->resetTablelisting();\n\t\t\tcase 'editapikey':\n\t\t\t\treturn $this->editApiKey();\n\t\t\tcase 'getConfigDetails':\n\t\t\t\treturn $this->getConfigDetails();\n\t\t\tcase 'getConfigJsonExport':\n\t\t\t\treturn $this->getConfigJsonExport();\n\t\t\tcase 'loadLanguageString':\n\t\t\t\treturn $this->loadLanguageString();\n\t\t\tdefault:\n\t\t\t\treturn $this->errorResponse('Action not found!');\n\t\t}\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tprivate function getValidatedSession(): array\n\t{\n\t\tif (CurrentUser::hasSession() == false) {\n\t\t\tthrow new Exception(\"No valid session\");\n\t\t}\n\t\treturn CurrentUser::getData();\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tprivate function getNewsfeed()\n\t{\n\t\tUI::initTwig();\n\n\t\t$feed = \"https://inside.froxlor.org/news/\";\n\n\t\t// Set custom feed if provided\n\t\t$role = Request::get('role');\n\t\tif ($role == \"customer\") {\n\t\t\t$custom_feed = Settings::Get(\"customer.news_feed_url\");\n\t\t\tif (!empty(trim($custom_feed))) {\n\t\t\t\t$feed = $custom_feed;\n\t\t\t}\n\t\t}\n\n\t\t// Check for simplexml_load_file\n\t\tif (!function_exists(\"simplexml_load_file\")) {\n\t\t\treturn $this->errorResponse([\n\t\t\t\t\"Newsfeed not available due to missing php-simplexml extension\",\n\t\t\t\t\"Please install the php-simplexml extension in order to view our newsfeed.\"\n\t\t\t]);\n\t\t}\n\n\t\t// Check for curl_version\n\t\tif (!function_exists('curl_version')) {\n\t\t\treturn $this->errorResponse([\n\t\t\t\t\"Newsfeed not available due to missing php-curl extension\",\n\t\t\t\t\"Please install the php-curl extension in order to view our newsfeed.\"\n\t\t\t]);\n\t\t}\n\n\t\t$output = HttpClient::urlGet($feed);\n\t\t$news = simplexml_load_string(trim($output));\n\n\t\tif ($news === false) {\n\t\t\t$err = [];\n\t\t\tforeach (libxml_get_errors() as $error) {\n\t\t\t\t$err[] = $error->message;\n\t\t\t}\n\t\t\treturn $this->errorResponse(\n\t\t\t\t$err\n\t\t\t);\n\t\t}\n\n\t\t// Handle items\n\t\tif ($news) {\n\t\t\t$items = null;\n\n\t\t\tfor ($i = 0; $i < 3; $i++) {\n\t\t\t\t$item = $news->channel->item[$i];\n\n\t\t\t\t$title = (string)$item->title;\n\t\t\t\t$link = (string)$item->link;\n\t\t\t\t$date = date(\"d.m.Y\", strtotime($item->pubDate));\n\t\t\t\t$content = preg_replace(\"/[\\r\\n]+/\", \" \", strip_tags($item->description));\n\t\t\t\t$content = substr($content, 0, 150) . \"...\";\n\n\t\t\t\t$items .= UI::twig()->render($this->theme . '/user/newsfeeditem.html.twig', [\n\t\t\t\t\t'link' => $link,\n\t\t\t\t\t'title' => $title,\n\t\t\t\t\t'date' => $date,\n\t\t\t\t\t'content' => $content\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\treturn $this->jsonResponse($items);\n\t\t} else {\n\t\t\treturn $this->errorResponse('No Newsfeeds available at the moment.');\n\t\t}\n\t}\n\n\tpublic function errorResponse($message, int $response_code = 500)\n\t{\n\t\theader(\"Content-Type: application/json\");\n\t\treturn \\Froxlor\\Api\\Response::jsonErrorResponse($message, $response_code);\n\t}\n\n\tpublic function jsonResponse($value, int $response_code = 200)\n\t{\n\t\theader(\"Content-Type: application/json\");\n\t\treturn \\Froxlor\\Api\\Response::jsonResponse($value, $response_code);\n\t}\n\n\tprivate function getUpdateCheck()\n\t{\n\t\tUI::initTwig();\n\n\t\ttry {\n\t\t\t$json_result = \\Froxlor\\Api\\Commands\\Froxlor::getLocal($this->userinfo)->checkUpdate();\n\t\t\t$result = json_decode($json_result, true)['data'];\n\t\t\t$result['full_version'] = Froxlor::getFullVersion();\n\t\t\t$result['dbversion'] = Froxlor::DBVERSION;\n\t\t\t$uc_data = Update::getUpdateCheckData();\n\t\t\t$result['last_update_check'] = $uc_data['ts'];\n\t\t\t$result['channel'] = Settings::Get('system.update_channel');\n\n\t\t\t$result_rendered = UI::twig()->render($this->theme . '/misc/version_top.html.twig', $result);\n\t\t\treturn $this->jsonResponse($result_rendered);\n\t\t} catch (Exception $e) {\n\t\t\t// don't display anything if just not allowed due to permissions\n\t\t\tif ($e->getCode() != 403) {\n\t\t\t\treturn $this->errorResponse($e->getMessage(), $e->getCode());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * search globally in various resources\n\t */\n\tprivate function searchGlobal()\n\t{\n\t\t$searchtext = Request::any('searchtext');\n\n\t\t$result = [];\n\n\t\t// settings\n\t\t$result_settings = [];\n\t\tif (isset($this->userinfo['adminsession']) && $this->userinfo['adminsession'] == 1 && $this->userinfo['change_serversettings'] == 1) {\n\t\t\t$result_settings = GlobalSearch::searchSettings($searchtext, $this->userinfo);\n\t\t}\n\n\t\t// all searchable entities\n\t\t$result_entities = GlobalSearch::searchGlobal($searchtext, $this->userinfo);\n\n\t\t$result = array_merge($result_settings, $result_entities);\n\n\t\treturn $this->jsonResponse($result);\n\t}\n\n\tprivate function updateTablelisting()\n\t{\n\t\t$columns = [];\n\t\tforeach ((Request::any('columns') ?? []) as $value) {\n\t\t\t$columns[] = $value;\n\t\t}\n\t\tif (!empty($columns)) {\n\t\t\tListing::storeColumnListingForUser([Request::any('listing') => $columns]);\n\t\t\treturn $this->jsonResponse($columns);\n\t\t}\n\t\treturn $this->errorResponse('At least one column must be selected', 406);\n\t}\n\n\tprivate function resetTablelisting()\n\t{\n\t\tListing::deleteColumnListingForUser([Request::any('listing') => []]);\n\t\treturn $this->jsonResponse([]);\n\t}\n\n\tprivate function editApiKey()\n\t{\n\t\t$keyid = Request::post('id', 0);\n\t\t$allowed_from = Request::post('allowed_from', \"\");\n\t\t$valid_until = Request::post('valid_until', \"\");\n\n\t\tif (empty($keyid)) {\n\t\t\treturn $this->errorResponse('Invalid call', 406);\n\t\t}\n\n\t\t// validate allowed_from\n\t\tif (!empty($allowed_from)) {\n\t\t\t$ip_list = array_map('trim', explode(\",\", $allowed_from));\n\t\t\t$_check_list = $ip_list;\n\t\t\tforeach ($_check_list as $idx => $ip) {\n\t\t\t\tif (Validate::validate_ip2($ip, true, 'invalidip', true, true, true) == false) {\n\t\t\t\t\treturn $this->errorResponse('Invalid ip address', 406);\n\t\t\t\t}\n\t\t\t\t// check for cidr\n\t\t\t\tif (strpos($ip, '/') !== false) {\n\t\t\t\t\t$ipparts = explode(\"/\", $ip);\n\t\t\t\t\t// shorten IP\n\t\t\t\t\t$ip = inet_ntop(inet_pton($ipparts[0]));\n\t\t\t\t\t// re-add cidr\n\t\t\t\t\t$ip .= '/' . $ipparts[1];\n\t\t\t\t} else {\n\t\t\t\t\t// shorten IP\n\t\t\t\t\t$ip = inet_ntop(inet_pton($ip));\n\t\t\t\t}\n\t\t\t\t$ip_list[$idx] = $ip;\n\t\t\t}\n\t\t\t$allowed_from = implode(\",\", array_unique($ip_list));\n\t\t}\n\n\t\tif (!empty($valid_until)) {\n\t\t\t$valid_until_db = DateTime::createFromFormat('Y-m-d\\TH:i', $valid_until)->format('U');\n\t\t} else {\n\t\t\t$valid_until_db = -1;\n\t\t}\n\n\t\t$upd_stmt = Database::prepare(\"\n\t\t\tUPDATE `\" . TABLE_API_KEYS . \"` SET\n\t\t\t`valid_until` = :vu, `allowed_from` = :af\n\t\t\tWHERE `id` = :keyid AND `adminid` = :aid AND `customerid` = :cid\n\t\t\");\n\t\tif ((int)$this->userinfo['adminsession'] == 1) {\n\t\t\t$cid = 0;\n\t\t} else {\n\t\t\t$cid = $this->userinfo['customerid'];\n\t\t}\n\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t'keyid' => $keyid,\n\t\t\t'af' => $allowed_from,\n\t\t\t'vu' => $valid_until_db,\n\t\t\t'aid' => $this->userinfo['adminid'],\n\t\t\t'cid' => $cid\n\t\t]);\n\t\treturn $this->jsonResponse(['allowed_from' => $allowed_from, 'valid_until' => $valid_until]);\n\t}\n\n\t/**\n\t * return parsed commands/files of configuration templates\n\t */\n\tprivate function getConfigDetails()\n\t{\n\t\tif (isset($this->userinfo['adminsession']) && $this->userinfo['adminsession'] == 1 && $this->userinfo['change_serversettings'] == 1) {\n\t\t\t$distribution = Request::post('distro', \"\");\n\t\t\t$section = Request::post('section', \"\");\n\t\t\t$daemon = Request::post('daemon', \"\");\n\n\t\t\t// validate distribution config-xml exists\n\t\t\t$config_dir = FileDir::makeCorrectDir(Froxlor::getInstallDir() . '/lib/configfiles/');\n\t\t\tif (!file_exists($config_dir . \"/\" . $distribution . \".xml\")) {\n\t\t\t\treturn $this->errorResponse(\"Unknown distribution. The configuration could not be found.\");\n\t\t\t}\n\t\t\t// read in all configurations\n\t\t\t$configfiles = new ConfigParser($config_dir . \"/\" . $distribution . \".xml\");\n\t\t\t// get the services\n\t\t\t$services = $configfiles->getServices();\n\t\t\t// validate selected service exists for this distribution\n\t\t\tif (!isset($services[$section])) {\n\t\t\t\treturn $this->errorResponse(\"Unknown category for selected distribution\");\n\t\t\t}\n\t\t\t// get the daemons\n\t\t\t$daemons = $services[$section]->getDaemons();\n\t\t\t// validate selected daemon exists for this section\n\t\t\tif (!isset($daemons[$daemon])) {\n\t\t\t\treturn $this->errorResponse(\"Unknown service for selected category\");\n\t\t\t}\n\t\t\t// finally the config-steps\n\t\t\t$confarr = $daemons[$daemon]->getConfig();\n\t\t\t// get parsed content\n\t\t\tUI::initTwig();\n\t\t\t$content = ConfigDisplay::fromConfigArr($confarr, $configfiles->distributionEditor, $this->theme);\n\n\t\t\treturn $this->jsonResponse([\n\t\t\t\t'title' => $configfiles->getCompleteDistroName() . '&nbsp;&raquo;&nbsp' . $services[$section]->title . '&nbsp;&raquo;&nbsp' . $daemons[$daemon]->title,\n\t\t\t\t'content' => $content\n\t\t\t]);\n\t\t}\n\t\treturn $this->errorResponse('Not allowed', 403);\n\t}\n\n\t/**\n\t * download JSON export of config-selection\n\t */\n\tprivate function getConfigJsonExport()\n\t{\n\t\tif (isset($this->userinfo['adminsession']) && $this->userinfo['adminsession'] == 1 && $this->userinfo['change_serversettings'] == 1) {\n\t\t\t$params = $_GET;\n\t\t\tunset($params['action']);\n\t\t\tunset($params['finish']);\n\t\t\theader('Content-disposition: attachment; filename=froxlor-config-' . time() . '.json');\n\t\t\treturn $this->jsonResponse($params);\n\t\t}\n\t\treturn $this->errorResponse('Not allowed', 403);\n\t}\n\n\t/**\n\t * loads a given language string by its identifier\n\t */\n\tprivate function loadLanguageString()\n\t{\n\t\t$langid = Request::post('langid', \"\");\n\t\tif (preg_match('/^([a-zA-Z\\.]+)$/', $langid)) {\n\t\t\treturn $this->jsonResponse(lng($langid));\n\t\t}\n\t\treturn $this->errorResponse('Invalid identifier: ' . $langid, 406);\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Install;\n\nuse Exception;\nuse PDO;\nuse Froxlor\\Install\\Install\\Core;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\Config\\ConfigParser;\nuse Froxlor\\Validate\\Validate;\nuse Froxlor\\System\\IPTools;\n\nclass Install\n{\n\tpublic $currentStep;\n\tpublic $extendedView;\n\tpublic $maxSteps;\n\tpublic $phpVersion;\n\tpublic $formfield;\n\tpublic string $requiredVersion = '7.4.0';\n\tpublic array $requiredExtensions = ['session', 'ctype', 'xml', 'filter', 'posix', 'mbstring', 'curl', 'gmp', 'json'];\n\tpublic array $suggestedExtensions = ['bcmath', 'zip'];\n\tpublic array $suggestions = [];\n\tpublic array $criticals = [];\n\tpublic array $loadedExtensions;\n\tpublic array $supportedOS = [];\n\tpublic array $webserverBackend = [\n\t\t'php-fpm' => 'PHP-FPM',\n\t\t'fcgid' => 'FCGID',\n\t\t'mod_php' => 'mod_php (not recommended)',\n\t];\n\n\tpublic function __construct(array $cliData = [])\n\t{\n\t\t// get all supported OS\n\t\t// show list of available distro's\n\t\t$distros = glob(dirname(__DIR__, 3) . '/lib/configfiles/*.xml');\n\t\t$distributions_select[''] = '-';\n\t\t// read in all the distros\n\t\tforeach ($distros as $distribution) {\n\t\t\t// get configparser object\n\t\t\t$dist = new ConfigParser($distribution);\n\t\t\t// store in tmp array\n\t\t\t$this->supportedOS[str_replace(\".xml\", \"\", strtolower(basename($distribution)))] = $dist->getCompleteDistroName();\n\t\t}\n\t\t// sort by distribution name\n\t\tasort($this->supportedOS);\n\n\t\t// guess distribution and webserver to preselect in formfield\n\t\t$webserverBackend = $this->webserverBackend;\n\t\t$supportedOS = $this->supportedOS;\n\t\t$guessedDistribution = $this->guessDistribution();\n\t\t$guessedWebserver = $this->guessWebserver();\n\n\t\t// set formfield, so we can get the fields and steps etc.\n\t\t$this->formfield = require dirname(__DIR__, 3) . '/lib/formfields/install/formfield.install.php';\n\n\t\t// set actual step\n\t\t$this->currentStep = $cliData['step'] ?? Request::any('step', 0);\n\t\t$this->extendedView = $cliData['extended'] ?? Request::any('extended', 0);\n\t\t$this->maxSteps = count($this->formfield['install']['sections']);\n\n\t\t// set actual php version and extensions\n\t\t$this->phpVersion = phpversion();\n\t\t$this->loadedExtensions = get_loaded_extensions();\n\n\t\tif (empty($cliData)) {\n\t\t\t// set global variables\n\t\t\tUI::twig()->addGlobal('install_mode', true);\n\t\t\tUI::twig()->addGlobal('basehref', '../');\n\n\t\t\t// unset session if user goes back to step 0\n\t\t\tif (isset($_SESSION['installation']) && $this->currentStep == 0) {\n\t\t\t\tunset($_SESSION['installation']);\n\t\t\t}\n\n\t\t\t// check for url manipulation or wrong step\n\t\t\tif ((isset($_SESSION['installation']['stepCompleted']) && ($this->currentStep + 1) > ($_SESSION['installation']['stepCompleted'] ?? 0))\n\t\t\t\t|| (!isset($_SESSION['installation']['stepCompleted']) && $this->currentStep > 0)\n\t\t\t) {\n\t\t\t\t$this->currentStep = isset($_SESSION['installation']['stepCompleted']) ? $_SESSION['installation']['stepCompleted'] + 1 : 1;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @return void\n\t * @throws Exception\n\t */\n\tpublic function handle(): void\n\t{\n\t\t// handle form data\n\t\tif (!is_null(Request::any('submit')) && $this->currentStep) {\n\t\t\ttry {\n\t\t\t\t$this->handleFormData($this->formfield['install']);\n\t\t\t} catch (Exception $e) {\n\t\t\t\t$error = $e->getMessage();\n\t\t\t}\n\t\t}\n\n\t\t// load template\n\t\tUI::twigBuffer('/install/index.html.twig', [\n\t\t\t'setup' => [\n\t\t\t\t'step' => $this->currentStep,\n\t\t\t\t'max_steps' => $this->maxSteps,\n\t\t\t],\n\t\t\t'preflight' => $this->checkRequirements(),\n\t\t\t'page' => [\n\t\t\t\t'title' => 'Database',\n\t\t\t\t'description' => 'Test',\n\t\t\t],\n\t\t\t'section' => $this->formfield['install']['sections']['step' . $this->currentStep] ?? [],\n\t\t\t'error' => $error ?? null,\n\t\t\t'extended' => $this->extendedView,\n\t\t]);\n\n\t\t// output view\n\t\tUI::twigOutputBuffer();\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tprivate function handleFormData(array $formfield): void\n\t{\n\t\t// handle current step\n\t\tif ($this->currentStep <= $this->maxSteps) {\n\t\t\t// Validate user data\n\t\t\t$validatedData = $this->validateRequest($formfield['sections']['step' . $this->currentStep]['fields']);\n\t\t\t// Check database connection (\n\t\t\tif ($this->currentStep == 1) {\n\t\t\t\t$this->checkDatabase($validatedData);\n\t\t\t}\n\t\t\t// Check validity of admin user data\n\t\t\telseif ($this->currentStep == 2) {\n\t\t\t\t$this->checkAdminUser($validatedData);\n\t\t\t}\n\t\t\t// Check validity of system data\n\t\t\telseif ($this->currentStep == 3) {\n\t\t\t\t$this->checkSystem($validatedData);\n\t\t\t}\n\t\t\t$validatedData['stepCompleted'] = ($this->currentStep < $this->maxSteps) ? $this->currentStep : ($this->maxSteps - 1);\n\t\t\t// Store validated data for later use\n\t\t\t$_SESSION['installation'] = array_merge($_SESSION['installation'] ?? [], $validatedData);\n\t\t}\n\n\t\t// also handle completion of installation if it's the step before the last step\n\t\tif ($this->currentStep == ($this->maxSteps - 1)) {\n\t\t\t$core = new Core($_SESSION['installation']);\n\t\t\t$core->doInstall();\n\t\t}\n\n\t\t// redirect user to home if the installation is done\n\t\tif ($this->currentStep == $this->maxSteps) {\n\t\t\t// check setting for \"panel.is_configured\" whether user has\n\t\t\t// run the config-services script (or checked the manual mode)\n\t\t\tif ($this->checkInstallStateFinished()) {\n\t\t\t\theader('Location: ../');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow new Exception(lng('install.errors.notyetconfigured'));\n\t\t}\n\n\t\t// redirect to next step\n\t\theader('Location: ?step=' . ($this->currentStep + 1));\n\t}\n\n\tprivate function checkInstallStateFinished(): bool\n\t{\n\t\t$core = new Core($_SESSION['installation']);\n\t\tif (isset($_SESSION['installation']['manual_config']) && (int) $_SESSION['installation']['manual_config'] == 1) {\n\t\t\t$core->createUserdataConf();\n\t\t\treturn true;\n\t\t}\n\t\t$pdo = $core->getUnprivilegedPdo();\n\t\t$stmt = $pdo->prepare(\"SELECT `value` FROM `panel_settings` WHERE `settinggroup` = 'panel' AND `varname` = 'is_configured'\");\n\t\t$stmt->execute();\n\t\t$result = $stmt->fetch(PDO::FETCH_ASSOC);\n\t\tif ($result && (int) $result['value'] == 1) {\n\t\t\t$core->createUserdataConf();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @return array\n\t */\n\tpublic function checkRequirements(): array\n\t{\n\t\t// check whether we can read the userdata file\n\t\tif (!@touch(dirname(__DIR__, 2) . '/.~writecheck')) {\n\t\t\t// get possible owner\n\t\t\t$posixusername = posix_getpwuid(posix_getuid())['name'];\n\t\t\t$posixgroup = posix_getgrgid(posix_getgid())['name'];\n\t\t\t$this->criticals['wrong_ownership'] = ['user' => $posixusername, 'group' => $posixgroup];\n\t\t} else {\n\t\t\t@unlink(dirname(__DIR__, 2) . '/.~writecheck');\n\t\t}\n\n\t\t// check for required extensions\n\t\tforeach ($this->requiredExtensions as $requiredExtension) {\n\t\t\tif (in_array($requiredExtension, $this->loadedExtensions)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$this->criticals['missing_extensions'][] = $requiredExtension;\n\t\t}\n\n\t\t// check for suggested extensions\n\t\tforeach ($this->suggestedExtensions as $suggestedExtension) {\n\t\t\tif (in_array($suggestedExtension, $this->loadedExtensions)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$this->suggestions['missing_extensions'][] = $suggestedExtension;\n\t\t}\n\n\t\treturn [\n\t\t\t'text' => $this->getInformationText(),\n\t\t\t'suggestions' => $this->suggestions,\n\t\t\t'criticals' => $this->criticals,\n\t\t];\n\t}\n\n\t/**\n\t * @return string\n\t */\n\tprivate function getInformationText(): string\n\t{\n\t\tif (version_compare($this->requiredVersion, PHP_VERSION, \"<\")) {\n\t\t\t$text = lng('install.phpinfosuccess', [$this->phpVersion]);\n\t\t} else {\n\t\t\t$text = lng('install.phpinfowarn', [$this->requiredVersion]);\n\t\t\t$this->criticals[] = lng('install.phpinfoupdate', [$this->phpVersion, $this->requiredVersion]);\n\t\t}\n\t\treturn $text;\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tprivate function validateRequest(array $fields): array\n\t{\n\t\t$attributes = [];\n\t\tforeach ($fields as $name => $field) {\n\t\t\t$attributes[$name] = $this->validateAttribute(Request::any($name), $field);\n\t\t\tif (isset($field['next_to'])) {\n\t\t\t\t$attributes = array_merge($attributes, $this->validateRequest($field['next_to']));\n\t\t\t}\n\t\t}\n\t\treturn $attributes;\n\t}\n\n\t/**\n\t * @return mixed\n\t * @throws Exception\n\t */\n\tprivate function validateAttribute($attribute, array $field)\n\t{\n\t\t// TODO: do validations\n\t\tif (isset($field['mandatory']) && $field['mandatory'] && empty($attribute)) {\n\t\t\tthrow new Exception(lng('install.errors.mandatory_field_not_set', [$field['label']]));\n\t\t}\n\t\treturn $attribute;\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tpublic function checkSystem(array $validatedData): void\n\t{\n\t\t$serveripv4 = $validatedData['serveripv4'] ?? '';\n\t\t$serveripv6 = $validatedData['serveripv6'] ?? '';\n\t\t$servername = $validatedData['servername'] ?? '';\n\t\t$httpuser = $validatedData['httpuser'] ?? 'www-data';\n\t\t$httpgroup = $validatedData['httpgroup'] ?? 'www-data';\n\n\t\tif (empty($serveripv4) && empty($serveripv6)) {\n\t\t\tthrow new Exception(lng('install.errors.nov4andnov6ip'));\n\t\t} elseif (!empty($serveripv4) && (!Validate::validate_ip2($serveripv4, true, '', false, true) || IPTools::is_ipv6($serveripv4))) {\n\t\t\tthrow new Exception(lng('error.invalidip', [$serveripv4]));\n\t\t} elseif (!empty($serveripv6) && (!Validate::validate_ip2($serveripv6, true, '', false, true) || IPTools::is_ipv6($serveripv6) == false)) {\n\t\t\tthrow new Exception(lng('error.invalidip', [$serveripv6]));\n\t\t} elseif (!Validate::validateDomain($servername) && !Validate::validateLocalHostname($servername)) {\n\t\t\tthrow new Exception(lng('install.errors.servernameneedstobevalid'));\n\t\t} elseif (posix_getpwnam($httpuser) === false) {\n\t\t\tthrow new Exception(lng('install.errors.websrvuserdoesnotexist'));\n\t\t} elseif (posix_getgrnam($httpgroup) === false) {\n\t\t\tthrow new Exception(lng('install.errors.websrvgrpdoesnotexist'));\n\t\t}\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tpublic function checkAdminUser(array $validatedData): void\n\t{\n\t\t$name = $validatedData['admin_name'] ?? 'Administrator';\n\t\t$loginname = $validatedData['admin_user'] ?? '';\n\t\t$email = $validatedData['admin_email'] ?? '';\n\t\t$password = $validatedData['admin_pass'] ?? '';\n\t\t$password_confirm = $validatedData['admin_pass_confirm'] ?? '';\n\n\t\tif (!preg_match('/^[^\\r\\n\\t\\f\\0]*$/D', $name)) {\n\t\t\tthrow new Exception(lng('error.stringformaterror', ['admin_name']));\n\t\t} elseif (empty(trim($loginname)) || !preg_match('/^[a-z][a-z0-9]+$/', $loginname)) {\n\t\t\tthrow new Exception(lng('error.loginnameiswrong', [$loginname]));\n\t\t} elseif (empty(trim($email)) || !Validate::validateEmail($email)) {\n\t\t\tthrow new Exception(lng('error.emailiswrong', [$email]));\n\t\t} elseif (empty($password) || $password != $password_confirm) {\n\t\t\tthrow new Exception(lng('error.newpasswordconfirmerror'));\n\t\t} elseif ($password == $loginname) {\n\t\t\tthrow new Exception(lng('error.passwordshouldnotbeusername'));\n\t\t}\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tpublic function checkDatabase(array $validatedData): void\n\t{\n\t\t$dsn = sprintf('mysql:host=%s;charset=utf8', $validatedData['mysql_host']);\n\t\t$pdo = new \\PDO($dsn, $validatedData['mysql_root_user'], $validatedData['mysql_root_pass']);\n\n\t\t// check if the database already exist\n\t\t$stmt = $pdo->prepare('SHOW DATABASES LIKE ?');\n\t\t$stmt->execute([\n\t\t\t$validatedData['mysql_database']\n\t\t]);\n\t\t$hasDatabase = $stmt->fetch();\n\t\tif ($hasDatabase && !$validatedData['mysql_force_create']) {\n\t\t\tthrow new Exception(lng('install.errors.databaseexists'));\n\t\t}\n\n\t\t// check if we can create a new database\n\t\t$testDatabase = uniqid('froxlor_tmp_');\n\t\tif ($pdo->exec('CREATE DATABASE IF NOT EXISTS ' . $testDatabase . ';') === false) {\n\t\t\tthrow new Exception(lng('install.errors.unabletocreatedb'));\n\t\t}\n\t\tif ($pdo->exec('DROP DATABASE IF EXISTS ' . $testDatabase . ';') === false) {\n\t\t\tthrow new Exception(lng('install.errors.unabletodropdb'));\n\t\t}\n\n\t\t// check if the user already exist\n\t\t$stmt = $pdo->prepare(\"SELECT `User` FROM `mysql`.`user` WHERE `User` = ?\");\n\t\t$stmt->execute([$validatedData['mysql_unprivileged_user']]);\n\t\tif ($stmt->rowCount() && !$validatedData['mysql_force_create']) {\n\t\t\tthrow new Exception(lng('install.errors.mysqlusernameexists'));\n\t\t}\n\n\t\t// check if we can create a new user\n\t\t$testUser = uniqid('froxlor_tmp_');\n\t\t$stmt = $pdo->prepare('CREATE USER ?@? IDENTIFIED BY ?');\n\t\tif ($stmt->execute([$testUser, $validatedData['mysql_host'], uniqid()]) === false) {\n\t\t\tthrow new Exception(lng('install.errors.unabletocreateuser'));\n\t\t}\n\t\t$stmt = $pdo->prepare('DROP USER ?@?');\n\t\tif ($stmt->execute([$testUser, $validatedData['mysql_host']]) === false) {\n\t\t\tthrow new Exception(lng('install.errors.unabletodropuser'));\n\t\t}\n\t\tif ($pdo->prepare('FLUSH PRIVILEGES')->execute() === false) {\n\t\t\tthrow new Exception(lng('install.errors.unabletoflushprivs'));\n\t\t}\n\t}\n\n\tprivate function guessWebserver(): ?string\n\t{\n\t\tif (strtoupper(@php_sapi_name()) == \"APACHE2HANDLER\" || stristr($_SERVER['SERVER_SOFTWARE'], \"apache\")) {\n\t\t\treturn 'apache24';\n\t\t} elseif (substr(strtoupper(@php_sapi_name()), 0, 8) == \"LIGHTTPD\" || stristr($_SERVER['SERVER_SOFTWARE'], \"lighttpd\")) {\n\t\t\treturn 'lighttpd';\n\t\t} elseif (substr(strtoupper(@php_sapi_name()), 0, 8) == \"NGINX\" || stristr($_SERVER['SERVER_SOFTWARE'], \"nginx\")) {\n\t\t\treturn 'nginx';\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate function guessDistribution(): ?string\n\t{\n\t\t// set default os.\n\t\t$default = 'bullseye';\n\n\t\t// read os-release\n\t\tif (@file_exists('/etc/os-release') && is_readable('/etc/os-release')) {\n\t\t\tif (function_exists('parse_ini_file')) {\n\t\t\t\t$os_dist = parse_ini_file('/etc/os-release', false);\n\t\t\t} else {\n\t\t\t\t$osrf = explode(\"\\n\", file_get_contents('/etc/os-release'));\n\t\t\t\tforeach ($osrf as $line) {\n\t\t\t\t\t$osrfline = explode(\"\\n\", $line);\n\t\t\t\t\tif ($osrfline[0] == 'VERSION_CODENAME') {\n\t\t\t\t\t\t$os_dist['VERSION_CODENAME'] = $osrfline[1];\n\t\t\t\t\t} else if ($osrfline[0] == 'ID') {\n\t\t\t\t\t\t$os_dist['ID'] = $osrfline[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn strtolower($os_dist['VERSION_CODENAME'] ?? ($os_dist['ID'] ?? $default));\n\t\t}\n\t\treturn $default;\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\UI;\n\nuse Froxlor\\PhpHelper;\nuse voku\\helper\\AntiXSS;\n\nclass Request\n{\n\t/**\n\t * Get key from current $_GET or $_POST request.\n\t *\n\t * @param $key\n\t * @param string|null $default\n\t * @return mixed|string|null\n\t */\n\tpublic static function any($key, string $default = null)\n\t{\n\t\tself::cleanAll();\n\n\t\treturn $_GET[$key] ?? $_POST[$key] ?? $default;\n\t}\n\n\t/**\n\t * Get key from current $_GET request.\n\t *\n\t * @param $key\n\t * @param string|null $default\n\t * @return mixed|string|null\n\t */\n\tpublic static function get($key, string $default = null)\n\t{\n\t\tself::cleanAll();\n\n\t\treturn $_GET[$key] ?? $default;\n\t}\n\n\t/**\n\t * Get key from current $_POST request.\n\t *\n\t * @param $key\n\t * @param string|null $default\n\t * @return mixed|string|null\n\t */\n\tpublic static function post($key, string $default = null)\n\t{\n\t\tself::cleanAll();\n\n\t\treturn $_POST[$key] ?? $default;\n\t}\n\n\t/**\n\t * Check for xss attempts and clean important globals and\n\t * unsetting every variable registered in $_REQUEST and as variable itself\n\t */\n\tpublic static function cleanAll()\n\t{\n\t\tforeach ($_REQUEST as $key => $value) {\n\t\t\tif (isset($$key)) {\n\t\t\t\tunset($$key);\n\t\t\t}\n\t\t}\n\t\tunset($value);\n\n\t\t$antiXss = new AntiXSS();\n\n\t\t// check $_GET\n\t\tPhpHelper::cleanGlobal($_GET, $antiXss);\n\t\t// check $_POST\n\t\tPhpHelper::cleanGlobal($_POST, $antiXss);\n\t\t// check $_COOKIE\n\t\tPhpHelper::cleanGlobal($_COOKIE, $antiXss);\n\t}\n\n\t/**\n\t * Check if key is existing in current request.\n\t *\n\t * @param $key\n\t * @return bool|mixed\n\t */\n\tpublic static function exist($key)\n\t{\n\t\treturn (bool)$_GET[$key] ?? $_POST[$key] ?? false;\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor;\n\nuse Exception;\nuse Froxlor\\Ajax\\Ajax;\n\nrequire_once dirname(__DIR__) . '/vendor/autoload.php';\n\n// Load the user settings\nif (!file_exists('./userdata.inc.php')) {\n\tdie();\n}\nrequire_once dirname(__DIR__) . '/lib/userdata.inc.php';\nrequire_once dirname(__DIR__) . '/lib/functions.php';\nrequire_once dirname(__DIR__) . '/lib/tables.inc.php';\n\n// Return response\ntry {\n\techo (new Ajax)->handle();\n} catch (Exception $e) {\n\theader(\"Content-Type: application/json\");\n\techo \\Froxlor\\Api\\Response::jsonErrorResponse($e->getMessage(), 500);\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nuse Froxlor\\Language;\nuse Froxlor\\UI\\Request;\n\nfunction view($template, $attributes)\n{\n\t$view = file_get_contents(dirname(__DIR__) . '/templates/' . $template);\n\n\treturn str_replace(array_keys($attributes), array_values($attributes), $view);\n}\n\nfunction lng(string $identifier, array $arguments = [])\n{\n\treturn Language::getTranslation($identifier, $arguments);\n}\n\nfunction old(string $identifier, string $default = null, string $session = null)\n{\n\tif ($session && isset($_SESSION[$session])) {\n\t\treturn $_SESSION[$session][$identifier] ?? $default;\n\t}\n\treturn Request::any($identifier, $default);\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\n// define default theme for configurehint, etc.\n$_deftheme = 'Froxlor';\n\nrequire dirname(__DIR__) . '/lib/functions.php';\n\n// validate correct php version\nif (version_compare(\"7.4.0\", PHP_VERSION, \">=\")) {\n\tdie(view($_deftheme . '/misc/phprequirementfailed.html.twig', [\n\t\t'{{ basehref }}' => '',\n\t\t'{{ froxlor_min_version }}' => '7.4.0',\n\t\t'{{ current_version }}' => PHP_VERSION,\n\t\t'{{ current_year }}' => date('Y', time()),\n\t]));\n}\n\n// validate vendor autoloader\nif (!file_exists(dirname(__DIR__) . '/vendor/autoload.php')) {\n\tdie(view($_deftheme . '/misc/vendormissinghint.html.twig', [\n\t\t'{{ basehref }}' => '',\n\t\t'{{ froxlor_install_dir }}' => dirname(__DIR__),\n\t\t'{{ current_year }}' => date('Y', time()),\n\t]));\n}\n\nrequire dirname(__DIR__) . '/vendor/autoload.php';\n\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Froxlor;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Idna\\IdnaWrapper;\nuse Froxlor\\Language;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Mailer;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Linker;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Install\\Update;\n\n// include MySQL-tabledefinitions\nrequire Froxlor::getInstallDir() . '/lib/tables.inc.php';\n\nUI::sendHeaders();\nUI::initTwig();\n\n/**\n * Register Globals Security Fix\n */\nRequest::cleanAll();\n\nunset($_);\nunset($key);\n\n$filename = htmlentities(basename($_SERVER['SCRIPT_NAME']));\n\n// check whether the userdata file exists\nif (!file_exists(Froxlor::getInstallDir() . '/lib/userdata.inc.php')) {\n\tUI::twig()->addGlobal('install_mode', '1');\n\techo UI::twig()->render($_deftheme . '/misc/configurehint.html.twig');\n\tdie();\n}\n\n// check whether we can read the userdata file\nif (!is_readable(Froxlor::getInstallDir() . '/lib/userdata.inc.php')) {\n\t// get possible owner\n\t$posixusername = posix_getpwuid(posix_getuid());\n\t$posixgroup = posix_getgrgid(posix_getgid());\n\tUI::twig()->addGlobal('install_mode', '1');\n\techo UI::twig()->render($_deftheme . '/misc/ownershiphint.html.twig', [\n\t\t'user' => $posixusername['name'],\n\t\t'group' => $posixgroup['name'],\n\t\t'installdir' => Froxlor::getInstallDir()\n\t]);\n\tdie();\n}\n\n// include MySQL-Username/Passwort etc.\nrequire Froxlor::getInstallDir() . '/lib/userdata.inc.php';\nif (!isset($sql) || !is_array($sql)) {\n\tUI::twig()->addGlobal('install_mode', '1');\n\techo UI::twig()->render($_deftheme . '/misc/configurehint.html.twig');\n\tdie();\n}\n\n// set error-handler\n@set_error_handler([\n\t'\\\\Froxlor\\\\PhpHelper',\n\t'phpErrHandler'\n]);\n@set_exception_handler([\n\t'\\\\Froxlor\\\\PhpHelper',\n\t'phpExceptionHandler'\n]);\n\n// send ssl-related headers (later than the others because we need a working database-connection and installation)\nUI::sendSslHeaders();\n\n// create a new idna converter\n$idna_convert = new IdnaWrapper();\n\n// re-read user data if logged in\nif (CurrentUser::hasSession()) {\n\tCurrentUser::reReadUserData();\n}\n\n/**\n * Language management\n */\n\n// set default language before anything else to\n// ensure that we can display messages\nLanguage::setLanguage(Settings::Get('panel.standardlanguage'));\n\n// set language by given user\nif (CurrentUser::hasSession()) {\n\tif (!empty(CurrentUser::getField('language')) && isset(Language::getLanguages()[CurrentUser::getField('language')])) {\n\t\tLanguage::setLanguage(CurrentUser::getField('language'));\n\t} else {\n\t\tLanguage::setLanguage(CurrentUser::getField('def_language'));\n\t}\n}\n\n// Initialize our link - class\n$linker = new Linker('index.php');\nUI::setLinker($linker);\n\n/**\n * Global Theme-variable\n */\nif (Update::versionInUpdate(Settings::Get('panel.version'), '2.0.0-beta1')) {\n\t$theme = $_deftheme;\n} else {\n\t$theme = (Settings::Get('panel.default_theme') !== null) ? Settings::Get('panel.default_theme') : $_deftheme;\n\t// Overwrite with customer/admin theme if defined\n\tif (CurrentUser::hasSession() && CurrentUser::getField('theme') != $theme) {\n\t\t$theme = CurrentUser::getField('theme');\n\t}\n}\n\n// Check if a different variant of the theme is used\n$themevariant = \"default\";\nif (preg_match(\"/([a-z0-9\\.\\-]+)_([a-z0-9\\.\\-]+)/i\", $theme, $matches)) {\n\t$theme = $matches[1];\n\t$themevariant = $matches[2];\n}\n\n// check for existence of the theme\nif (@file_exists('templates/' . $theme . '/config.json')) {\n\t$_themeoptions = json_decode(file_get_contents('templates/' . $theme . '/config.json'), true);\n} else {\n\t$_themeoptions = null;\n}\n\n// check for existence of variant in theme\nif (is_array($_themeoptions) && (!array_key_exists('variants', $_themeoptions) || !array_key_exists($themevariant,\n\t\t\t$_themeoptions['variants']))) {\n\t$themevariant = \"default\";\n}\n\n// check for custom header-graphic\n$hl_path = 'templates/' . $theme . '/assets/img';\n\n// default is theme-image\n$header_logo = $hl_path . '/' . ($_themeoptions['variants'][$themevariant]['img']['ui'] ?? 'logo_white.png');\n$header_logo_login = $hl_path . '/' . ($_themeoptions['variants'][$themevariant]['img']['login'] ?? 'logo_white.png');\n\nif (Settings::Get('panel.logo_overridetheme') == 1 || Settings::Get('panel.logo_overridecustom') == 1) {\n\t// logo settings shall overwrite theme logo and possible custom logo\n\t$header_logo = Settings::Get('panel.logo_image_header') ?: $header_logo;\n\t$header_logo_login = Settings::Get('panel.logo_image_login') ?: $header_logo_login;\n}\nif (Settings::Get('panel.logo_overridecustom') == 0 && file_exists($hl_path . '/logo_custom.png')) {\n\t// custom theme image (logo_custom.png) is not being overwritten by logo_image_* setting\n\t$header_logo = $hl_path . '/logo_custom.png';\n\t$header_logo_login = $hl_path . '/logo_custom.png';\n\tif (file_exists($hl_path . '/logo_custom_login.png')) {\n\t\t$header_logo_login = $hl_path . '/logo_custom_login.png';\n\t}\n}\n\nUI::twig()->addGlobal('header_logo_login', $header_logo_login);\nUI::twig()->addGlobal('header_logo', $header_logo);\n\n/**\n * Redirects to index.php (login page) if no session exists\n */\nif (!CurrentUser::hasSession() && AREA != 'login') {\n\tunset($_SESSION['userinfo']);\n\tCurrentUser::setData();\n\tsession_destroy();\n\t$params = [\n\t\t\"script\" => basename($_SERVER[\"SCRIPT_NAME\"]),\n\t\t\"qrystr\" => $_SERVER[\"QUERY_STRING\"]\n\t];\n\tResponse::redirectTo('index.php', $params);\n\texit();\n}\n\n$userinfo = CurrentUser::getData();\nUI::twig()->addGlobal('userinfo', $userinfo);\nUI::setCurrentUser($userinfo);\n// Initialize logger\nif (CurrentUser::hasSession()) {\n\t// Initialize logging\n\t$log = FroxlorLogger::getInstanceOf($userinfo);\n\tif ((CurrentUser::isAdmin() && AREA != 'admin') || (!CurrentUser::isAdmin() && AREA != 'customer')) {\n\t\t// user tries to access an area not meant for him -> redirect to corresponding index\n\t\tResponse::redirectTo((CurrentUser::isAdmin() ? 'admin' : 'customer') . '_index.php', $params);\n\t\texit();\n\t}\n}\n\n/**\n * Fills variables for navigation, header and footer\n */\n$navigation = [];\nif (AREA == 'admin' || AREA == 'customer') {\n\tif (Froxlor::hasUpdates() || Froxlor::hasDbUpdates()) {\n\t\t/*\n\t\t * if froxlor-files have been updated\n\t\t * but not yet configured by the admin\n\t\t * we only show logout and the update-page\n\t\t */\n\t\t$navigation_data = [\n\t\t\t'admin' => [\n\t\t\t\t'server' => [\n\t\t\t\t\t'label' => lng('admin.server'),\n\t\t\t\t\t'required_resources' => 'change_serversettings',\n\t\t\t\t\t'elements' => [\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'url' => 'admin_updates.php?page=overview',\n\t\t\t\t\t\t\t'label' => lng('update.update'),\n\t\t\t\t\t\t\t'required_resources' => 'change_serversettings'\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t]\n\t\t\t]\n\t\t];\n\t\t$navigation = HTML::buildNavigation($navigation_data['admin'], CurrentUser::getData());\n\t} else {\n\t\t$navigation_data = PhpHelper::loadConfigArrayDir('lib/navigation/');\n\t\t$navigation = HTML::buildNavigation($navigation_data[AREA], CurrentUser::getData());\n\t}\n}\nUI::twig()->addGlobal('nav_entries', $navigation);\n\n$js = \"\";\n$css = \"\";\nif (is_array($_themeoptions) && array_key_exists('js', $_themeoptions['variants'][$themevariant])) {\n\tif (is_array($_themeoptions['variants'][$themevariant]['js'])) {\n\t\tforeach ($_themeoptions['variants'][$themevariant]['js'] as $jsfile) {\n\t\t\tif (file_exists('templates/' . $theme . '/assets/js/' . $jsfile)) {\n\t\t\t\t$js .= '<script type=\"text/javascript\" src=\"templates/' . $theme . '/assets/js/' . $jsfile . '\"></script>' . \"\\n\";\n\t\t\t}\n\t\t}\n\t}\n\tif (is_array($_themeoptions['variants'][$themevariant]['css'])) {\n\t\tforeach ($_themeoptions['variants'][$themevariant]['css'] as $cssfile) {\n\t\t\tif (file_exists('templates/' . $theme . '/assets/css/' . $cssfile)) {\n\t\t\t\t$css .= '<link href=\"templates/' . $theme . '/assets/css/' . $cssfile . '\" rel=\"stylesheet\" type=\"text/css\" />' . \"\\n\";\n\t\t\t}\n\t\t}\n\t}\n}\n\nUI::twig()->addGlobal('theme_js', $js);\nUI::twig()->addGlobal('theme_css', $css);\nunset($js);\nunset($css);\n\n$action = Request::any('action');\n$page = Request::any('page', 'overview');\n$gSearchText = Request::any('searchtext');\n\n// clear request data\nif (!$action && isset($_SESSION)) {\n\tunset($_SESSION['requestData']);\n}\n\nUI::twig()->addGlobal('action', $action);\nUI::twig()->addGlobal('page', $page);\nUI::twig()->addGlobal('area', AREA);\nUI::twig()->addGlobal('gSearchText', $gSearchText);\n\n// Initialize the mailingsystem\n$mail = new Mailer(true);\n\n// initialize csrf\nif (CurrentUser::hasSession()) {\n\t// create new csrf token if not set\n\tif (!$csrf_token = CurrentUser::getField('csrf_token')) {\n\t\t$csrf_token = Froxlor::genSessionId(20);\n\t\tCurrentUser::setField('csrf_token', $csrf_token);\n\t}\n\t// set csrf token for twig\n\tUI::twig()->addGlobal('csrf_token', $csrf_token);\n\t// check if csrf token is valid\n\tif (in_array($_SERVER['REQUEST_METHOD'], ['POST', 'PUT', 'PATCH', 'DELETE'])) {\n\t\t$current_token = $_POST['csrf_token'] ?? $_SERVER['HTTP_X_CSRF_TOKEN'] ?? null;\n\t\tif ($current_token != CurrentUser::getField('csrf_token')) {\n\t\t\tResponse::dynamicError('CSRF validation failed');\n\t\t}\n\t}\n\t// update cookie lifetime\n\t$cookie_params = [\n\t\t'expires' => time() + Settings::Get('session.sessiontimeout'),\n\t\t'path' => '/',\n\t\t'domain' => $_SERVER['HTTP_HOST'],\n\t\t'secure' => UI::requestIsHttps(),\n\t\t'httponly' => true,\n\t\t'samesite' => 'Strict'\n\t];\n\tsetcookie(session_name(), $_COOKIE[session_name()], $cookie_params);\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nif (!defined('AREA')) {\n\theader(\"Location: index.php\");\n\texit();\n}\n\nuse Froxlor\\Api\\Commands\\SubDomains;\nuse Froxlor\\Customer\\Customer;\nuse Froxlor\\FileDir;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n// This file is being included in admin_domains and customer_domains\n// and therefore does not need to require lib/init.php\n\n$domain_id = (int)Request::any('domain_id');\n$last_n = (int)Request::any('number_of_lines', 100);\n\n// user's with logviewenabled = false\nif (AREA != 'admin' && $userinfo['logviewenabled'] != '1') {\n\t// back to domain overview\n\tResponse::redirectTo($filename, [\n\t\t'page' => 'domains'\n\t]);\n}\n\nif (function_exists('exec')) {\n\t// get domain-info\n\ttry {\n\t\t$json_result = SubDomains::getLocal($userinfo, [\n\t\t\t'id' => $domain_id\n\t\t])->get();\n\t} catch (Exception $e) {\n\t\tResponse::dynamicError($e->getMessage());\n\t}\n\t$domain = json_decode($json_result, true)['data'];\n\n\t$speciallogfile = '';\n\tif ($domain['speciallogfile'] == '1') {\n\t\tif ($domain['parentdomainid'] == '0') {\n\t\t\t$speciallogfile = '-' . $domain['domain'];\n\t\t} else {\n\t\t\t$speciallogfile = '-' . $domain['parentdomain'];\n\t\t}\n\t}\n\t// The normal access/error - logging is enabled\n\t$error_log = FileDir::makeCorrectFile(Settings::Get('system.logfiles_directory') . Customer::getCustomerDetail($domain['customerid'], 'loginname') . $speciallogfile . '-error.log');\n\t$access_log = FileDir::makeCorrectFile(Settings::Get('system.logfiles_directory') . Customer::getCustomerDetail($domain['customerid'], 'loginname') . $speciallogfile . '-access.log');\n\n\t// error log\n\tif (file_exists($error_log)) {\n\t\t$result = FileDir::safe_exec('tail -n ' . $last_n . ' ' . escapeshellarg($error_log));\n\t\t$error_log_content = implode(\"\\n\", $result);\n\t} else {\n\t\t$error_log_content = \"Error-Log\" . (AREA == 'admin' ? \" '\" . $error_log . \"'\" : \"\") . \" does not seem to exist\";\n\t}\n\n\t// access log\n\tif (file_exists($access_log)) {\n\t\t$result = FileDir::safe_exec('tail -n ' . $last_n . ' ' . escapeshellarg($access_log));\n\t\t$access_log_content = implode(\"\\n\", $result);\n\t} else {\n\t\t$access_log_content = \"Access-Log\" . (AREA == 'admin' ? \" '\" . $access_log . \"'\" : \"\") . \" does not seem to exist\";\n\t}\n\n\tUI::view('user/logfiles.html.twig', [\n\t\t'error_log_content' => $error_log_content,\n\t\t'access_log_content' => $access_log_content,\n\t\t'actions_links' => [\n\t\t\t[\n\t\t\t\t'href' => $linker->getLink([\n\t\t\t\t\t'section' => 'domains',\n\t\t\t\t\t'page' => 'domains',\n\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t'id' => $domain_id\n\t\t\t\t]),\n\t\t\t\t'label' => lng('admin.domain_edit'),\n\t\t\t\t'icon' => 'fa-solid fa-pen'\n\t\t\t],\n\t\t\t[\n\t\t\t\t'href' => $linker->getLink(['section' => 'domains', 'page' => 'domains']),\n\t\t\t\t'label' => lng('panel.backtooverview'),\n\t\t\t\t'icon' => 'fa-solid fa-reply'\n\t\t\t]\n\t\t]\n\t]);\n} else {\n\tif (AREA == 'admin') {\n\t\tResponse::dynamicError('You need to allow the exec() function in the froxlor-vhost php-config');\n\t} else {\n\t\tResponse::dynamicError('Required function exec() is not allowed. Please contact the system administrator.');\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nif (!defined('AREA')) {\n\theader(\"Location: index.php\");\n\texit();\n}\n\nuse Froxlor\\Api\\Commands\\Certificates;\nuse Froxlor\\Api\\Commands\\Domains;\nuse Froxlor\\Api\\Commands\\SubDomains;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n// This file is being included in admin_domains and customer_domains\n// and therefore does not need to require lib/init.php\n\n$success_message = \"\";\n$id = (int)Request::any('id');\n\n// do the delete and then just show a success-message and the certificates list again\nif ($action == 'delete') {\n\tHTML::askYesNo('certificate_reallydelete', $filename, [\n\t\t'id' => $id,\n\t\t'page' => $page,\n\t\t'action' => 'deletesure'\n\t], '', [\n\t\t'section' => 'domains',\n\t\t'page' => $page\n\t]);\n} elseif (isset($_POST['send']) && $_POST['send'] == 'send' && $action == 'deletesure' && $id > 0) {\n\ttry {\n\t\t$json_result = Certificates::getLocal($userinfo, [\n\t\t\t'id' => $id\n\t\t])->delete();\n\t\t$success_message = lng('domains.ssl_certificate_removed', [$id]);\n\t} catch (Exception $e) {\n\t\tResponse::dynamicError($e->getMessage());\n\t}\n}\n\n$log->logAction(FroxlorLogger::USR_ACTION, LOG_NOTICE, \"viewed domains::ssl_certificates\");\n\ntry {\n\t$certificates_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/tablelisting.sslcertificates.php';\n\t$collection = (new Collection(Certificates::class, $userinfo))\n\t\t->withPagination($certificates_list_data['sslcertificates_list']['columns'],\n\t\t\t$certificates_list_data['sslcertificates_list']['default_sorting']);\n\tif ($userinfo['adminsession'] == 1) {\n\t\t$collection->has('domains', Domains::class, 'domainid', 'id');\n\t} else {\n\t\t$collection->has('domains', SubDomains::class, 'domainid', 'id');\n\t}\n} catch (Exception $e) {\n\tResponse::dynamicError($e->getMessage());\n}\n\nUI::view('user/table.html.twig', [\n\t'listing' => Listing::format($collection, $certificates_list_data, 'sslcertificates_list'),\n]);\n"], "filenames": ["admin_admins.php", "admin_configfiles.php", "admin_cronjobs.php", "admin_customers.php", "admin_domains.php", "admin_index.php", "admin_ipsandports.php", "admin_message.php", "admin_mysqlserver.php", "admin_phpsettings.php", "admin_plans.php", "admin_settings.php", "admin_templates.php", "admin_traffic.php", "api_keys.php", "customer_domains.php", "customer_email.php", "customer_extras.php", "customer_ftp.php", "customer_mysql.php", "customer_traffic.php", "dns_editor.php", "error_report.php", "lib/Froxlor/Ajax/Ajax.php", "lib/Froxlor/Install/Install.php", "lib/Froxlor/UI/Request.php", "lib/ajax.php", "lib/functions.php", "lib/init.php", "logfiles_viewer.php", "ssl_certificates.php"], "buggy_code_start_loc": [42, 44, 37, 45, 50, 43, 39, 36, 39, 40, 42, 115, 42, 34, 52, 50, 50, 49, 47, 53, 40, 43, 40, 56, 83, 34, 44, 46, 298, 42, 46], "buggy_code_end_loc": [43, 46, 38, 46, 51, 44, 40, 37, 40, 41, 267, 116, 45, 35, 53, 57, 51, 50, 48, 54, 41, 44, 41, 379, 270, 45, 44, 47, 301, 44, 47], "fixing_code_start_loc": [42, 44, 37, 45, 50, 43, 39, 36, 39, 40, 42, 115, 42, 34, 52, 50, 50, 49, 47, 53, 40, 43, 40, 56, 83, 34, 45, 46, 298, 42, 46], "fixing_code_end_loc": [43, 46, 38, 46, 51, 44, 40, 37, 40, 41, 267, 116, 45, 35, 53, 57, 51, 50, 48, 54, 41, 44, 41, 380, 270, 73, 46, 47, 301, 44, 47], "type": "CWE-88", "message": "Argument Injection in GitHub repository froxlor/froxlor prior to 2.0.0-beta1.", "other": {"cve": {"id": "CVE-2022-4864", "sourceIdentifier": "security@huntr.dev", "published": "2022-12-30T23:15:11.910", "lastModified": "2023-01-06T19:33:02.667", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Argument Injection in GitHub repository froxlor/froxlor prior to 2.0.0-beta1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-88"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-88"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:froxlor:froxlor:*:*:*:*:*:*:*:*", "versionEndIncluding": "0.10.38.3", "matchCriteriaId": "3C43AD25-CDFD-4230-8D94-3689ADAFF042"}]}]}], "references": [{"url": "https://github.com/froxlor/froxlor/commit/f2485ecd9aab8da544b5e12891d82ae6fcff5fc7", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/b7140709-8f84-4f19-9463-78669fa2175b", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/froxlor/froxlor/commit/f2485ecd9aab8da544b5e12891d82ae6fcff5fc7"}}