{"buggy_code": ["<?php\nnamespace Api\\Controller;\nuse Think\\Controller;\nclass AdminSettingController extends BaseController {\n\n    //\u4fdd\u5b58\u914d\u7f6e\n    public function saveConfig(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $register_open = intval(I(\"register_open\")) ;\n        $history_version_count = intval(I(\"history_version_count\")) ;\n        $oss_open = intval(I(\"oss_open\")) ;\n        $home_page = intval(I(\"home_page\")) ;\n        $home_item = intval(I(\"home_item\")) ;\n        $oss_setting = I(\"oss_setting\") ;\n        $beian = I(\"beian\") ;\n        D(\"Options\")->set(\"history_version_count\" ,$history_version_count) ;\n        D(\"Options\")->set(\"register_open\" ,$register_open) ;\n        D(\"Options\")->set(\"home_page\" ,$home_page) ;\n        D(\"Options\")->set(\"home_item\" ,$home_item) ;\n        D(\"Options\")->set(\"beian\" ,$beian) ;\n        \n        if ($oss_open) {\n            $this->checkComposerPHPVersion();\n            D(\"Options\")->set(\"oss_setting\" , json_encode( $oss_setting)) ;\n        }\n        D(\"Options\")->set(\"oss_open\" ,$oss_open) ;\n\n        $this->sendResult(array());\n\n    }\n\n    //\u52a0\u8f7d\u914d\u7f6e\n    public function loadConfig(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $oss_open = D(\"Options\")->get(\"oss_open\" ) ;\n        $register_open = D(\"Options\")->get(\"register_open\" ) ;\n        $history_version_count = D(\"Options\")->get(\"history_version_count\" ) ;\n        $oss_setting = D(\"Options\")->get(\"oss_setting\" ) ;\n        $home_page = D(\"Options\")->get(\"home_page\" ) ;\n        $home_item = D(\"Options\")->get(\"home_item\" ) ;\n        $beian = D(\"Options\")->get(\"beian\" ) ;\n        $ldap_form = json_decode($ldap_form,1);\n        $oss_setting = json_decode($oss_setting,1);\n        \n        //\u5982\u679c\u5f3a\u7b49\u4e8efalse\uff0c\u90a3\u5c31\u662f\u5c1a\u672a\u6709\u6570\u636e\u3002\u5173\u95ed\u6ce8\u518c\u5e94\u8be5\u662f\u6709\u6570\u636e\u4e14\u6570\u636e\u4e3a\u5b57\u7b26\u4e320\n        if ($register_open === false) {\n            $this->sendResult(array());\n        }else{\n            $array = array(\n                \"oss_open\"=>$oss_open ,\n                \"register_open\"=>$register_open ,\n                \"history_version_count\"=>$history_version_count ,\n                \"home_page\"=>$home_page ,\n                \"home_item\"=>$home_item ,\n                \"beian\"=>$beian ,\n                \"oss_setting\"=>$oss_setting ,\n                );\n            $this->sendResult($array);\n        }\n\n    }\n\n    //\u4fdd\u5b58Ldap\u914d\u7f6e\n    public function saveLdapConfig(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $ldap_open = intval(I(\"ldap_open\")) ;\n        $ldap_form = I(\"ldap_form\") ;\n        \n        if ($ldap_open) {\n            if (!$ldap_form['user_field']) {\n                $ldap_form['user_field'] = 'cn';\n            }\n            if( !extension_loaded( 'ldap' ) ) {\n               $this->sendError(10011,\"\u4f60\u5c1a\u672a\u5b89\u88c5php-ldap\u6269\u5c55\u3002\u5982\u679c\u662f\u666e\u901aPHP\u73af\u5883\uff0c\u8bf7\u624b\u52a8\u5b89\u88c5\u4e4b\u3002\u5982\u679c\u662f\u4f7f\u7528\u4e4b\u524d\u5b98\u65b9docker\u955c\u50cf\uff0c\u5219\u9700\u8981\u91cd\u65b0\u5b89\u88c5\u955c\u50cf\u3002\u65b9\u6cd5\u662f\uff1a\u5907\u4efd /showdoc_data \u6574\u4e2a\u76ee\u5f55\uff0c\u7136\u540e\u5168\u65b0\u5b89\u88c5showdoc\uff0c\u63a5\u7740\u7528\u5907\u4efd\u8986\u76d6/showdoc_data \u3002\u7136\u540e\u9012\u5f52\u8d4b\u4e88777\u53ef\u5199\u6743\u9650\u3002\");\n               return ;\n            }\n\n            $ldap_conn = ldap_connect($ldap_form['host'], $ldap_form['port']);//\u5efa\u7acb\u4e0e LDAP \u670d\u52a1\u5668\u7684\u8fde\u63a5\n            if (!$ldap_conn) {\n               $this->sendError(10011,\"Can't connect to LDAP server\");\n               return ;\n            }\n            ldap_set_option($ldap_conn, LDAP_OPT_PROTOCOL_VERSION, $ldap_form['version']);\n            $rs=ldap_bind($ldap_conn, $ldap_form['bind_dn'], $ldap_form['bind_password']);//\u4e0e\u670d\u52a1\u5668\u7ed1\u5b9a \u7528\u6237\u767b\u5f55\u9a8c\u8bc1 \u6210\u529f\u8fd4\u56de1 \n            if (!$rs) {\n               $this->sendError(10011,\"Can't bind to LDAP server\");\n               return ;\n            }\n\n            $result = ldap_search($ldap_conn,$ldap_form['base_dn'],\"(cn=*)\");\n            $data = ldap_get_entries($ldap_conn, $result);\n            \n            for ($i=0; $i<$data[\"count\"]; $i++) {\n                $ldap_user = $data[$i][$ldap_form['user_field']][0] ;\n                if (!$ldap_user) {\n                    continue ;\n                }\n                //\u5982\u679c\u8be5\u7528\u6237\u4e0d\u5728\u6570\u636e\u5e93\u91cc\uff0c\u5219\u5e2e\u52a9\u5176\u6ce8\u518c\n                if(!D(\"User\")->isExist($ldap_user)){\n                    D(\"User\")->register($ldap_user,$ldap_user.time());\n                }\n            }\n            D(\"Options\")->set(\"ldap_form\" , json_encode( $ldap_form)) ;\n        }\n        D(\"Options\")->set(\"ldap_open\" ,$ldap_open) ;\n        $this->sendResult(array());\n\n    }\n\n    //\u52a0\u8f7dLdap\u914d\u7f6e\n    public function loadLdapConfig(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $ldap_open = D(\"Options\")->get(\"ldap_open\" ) ;\n        $ldap_form = D(\"Options\")->get(\"ldap_form\" ) ;\n        $ldap_form = json_decode($ldap_form,1);\n        \n        //\u5982\u679c\u5f3a\u7b49\u4e8efalse\uff0c\u90a3\u5c31\u662f\u5c1a\u672a\u6709\u6570\u636e\u3002\u5173\u95ed\u6ce8\u518c\u5e94\u8be5\u662f\u6709\u6570\u636e\u4e14\u6570\u636e\u4e3a\u5b57\u7b26\u4e320\n        if ($register_open === false) {\n            $this->sendResult(array());\n        }else{\n            $array = array(\n                \"ldap_open\"=>$ldap_open ,\n                \"ldap_form\"=>$ldap_form ,\n                );\n            $this->sendResult($array);\n        }\n\n    }\n\n    //\u4fdd\u5b58Oauth2\u914d\u7f6e\n    public function saveOauth2Config(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $this->checkComposerPHPVersion();\n        $oauth2_open = intval(I(\"oauth2_open\")) ;\n        $oauth2_form = I(\"oauth2_form\") ;\n        D(\"Options\")->set(\"oauth2_form\" , json_encode( $oauth2_form)) ;\n        D(\"Options\")->set(\"oauth2_open\" ,$oauth2_open) ;\n        $this->sendResult(array());\n\n    }\n\n    //\u52a0\u8f7dOauth2\u914d\u7f6e\n    public function loadOauth2Config(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $oauth2_open = D(\"Options\")->get(\"oauth2_open\" ) ;\n        $oauth2_form = D(\"Options\")->get(\"oauth2_form\" ) ;\n        $oauth2_form = json_decode($oauth2_form,1);\n        \n        //\u5982\u679c\u5f3a\u7b49\u4e8efalse\uff0c\u90a3\u5c31\u662f\u5c1a\u672a\u6709\u6570\u636e\u3002\u5173\u95ed\u6ce8\u518c\u5e94\u8be5\u662f\u6709\u6570\u636e\u4e14\u6570\u636e\u4e3a\u5b57\u7b26\u4e320\n        if ($register_open === false) {\n            $this->sendResult(array());\n        }else{\n            $array = array(\n                \"oauth2_open\"=>$oauth2_open ,\n                \"oauth2_form\"=>$oauth2_form ,\n                );\n            $this->sendResult($array);\n        }\n\n    }\n\n    public function getLoginSecretKey(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $login_secret_key = D(\"Options\")->get(\"login_secret_key\") ;\n        if(!$login_secret_key){\n            $login_secret_key = bin2hex( random_bytes( 16 ) );\n            D(\"Options\")->set(\"login_secret_key\",$login_secret_key) ;\n        }\n        $this->sendResult(array(\"login_secret_key\"=>$login_secret_key));\n\n    }\n\n    public function resetLoginSecretKey(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $login_secret_key = bin2hex( random_bytes( 16 ) );\n        D(\"Options\")->set(\"login_secret_key\",$login_secret_key) ;\n        $this->sendResult(array(\"login_secret_key\"=>$login_secret_key));\n\n    }\n\n\n    public function checkLdapLogin(){\n            $username = 'admin';\n            $password = '123456';\n\n            $ldap_open = D(\"Options\")->get(\"ldap_open\" ) ;\n            $ldap_form = D(\"Options\")->get(\"ldap_form\" ) ;\n            $ldap_form = json_decode($ldap_form,1);\n            if (!$ldap_open) {\n                return ;\n            }\n            if (!$ldap_form['user_field']) {\n                $ldap_form['user_field'] = 'cn';\n            }\n            $ldap_conn = ldap_connect($ldap_form['host'], $ldap_form['port']);//\u5efa\u7acb\u4e0e LDAP \u670d\u52a1\u5668\u7684\u8fde\u63a5\n            if (!$ldap_conn) {\n               $this->sendError(10011,\"Can't connect to LDAP server\");\n               return ;\n            }\n            ldap_set_option($ldap_conn, LDAP_OPT_PROTOCOL_VERSION, $ldap_form['version']);\n            $rs=ldap_bind($ldap_conn, $ldap_form['bind_dn'], $ldap_form['bind_password']);//\u4e0e\u670d\u52a1\u5668\u7ed1\u5b9a \u7528\u6237\u767b\u5f55\u9a8c\u8bc1 \u6210\u529f\u8fd4\u56de1 \n            if (!$rs) {\n               $this->sendError(10011,\"Can't bind to LDAP server\");\n               return ;\n            }\n\n            $result = ldap_search($ldap_conn,$ldap_form['base_dn'],\"(cn=*)\");\n            $data = ldap_get_entries($ldap_conn, $result);\n            for ($i=0; $i<$data[\"count\"]; $i++) {\n                $ldap_user = $data[$i][$ldap_form['user_field']][0] ;\n                $dn = $data[$i][\"dn\"] ;\n                if ($ldap_user == $username) {\n                    //\u5982\u679c\u8be5\u7528\u6237\u4e0d\u5728\u6570\u636e\u5e93\u91cc\uff0c\u5219\u5e2e\u52a9\u5176\u6ce8\u518c\n                    $userInfo = D(\"User\")->isExist($username) ;\n                    if(!$userInfo){\n                        D(\"User\")->register($ldap_user,$ldap_user.time());\n                    }\n                    $rs2=ldap_bind($ldap_conn, $dn , $password);\n                    if ($rs2) {\n                       D(\"User\")->updatePwd($userInfo['uid'], $password);\n                       $this->sendResult(array());\n                       return ;\n                    }\n                }\n            }\n           $this->sendError(10011,\"\u7528\u6237\u540d\u6216\u8005\u5bc6\u7801\u9519\u8bef\");\n    }\n\n}", "<?php\nnamespace Api\\Model;\nuse Api\\Model\\BaseModel;\n\nclass UserModel extends BaseModel {\n\n    /**\n     * \u7528\u6237\u540d\u662f\u5426\u5df2\u7ecf\u5b58\u5728\n     * \n     */\n    public function isExist($username){\n        return  $this->where(\"username = '%s'\",array($username))->find();\n    }\n\n    /**\n     * \u6ce8\u518c\u65b0\u7528\u6237\n     * \n     */\n    public function register($username,$password){\n        $password = md5(base64_encode(md5($password)).'576hbgh6');\n        return $this->add(array('username'=>$username ,'password'=>$password , 'reg_time'=>time()));\n    }\n\n    //\u4fee\u6539\u7528\u6237\u5bc6\u7801\n    public function updatePwd($uid, $password){\n        $password = md5(base64_encode(md5($password)).'576hbgh6');\n        return $this->where(\"uid ='%d' \",array($uid))->save(array('password'=>$password));   \n    }\n\n    /**\n     * \u8fd4\u56de\u7528\u6237\u4fe1\u606f\n     * @return \n     */\n    public function userInfo($uid){\n        return  $this->where(\"uid = '%d'\",array($uid))->find();\n    }\n\n    /**\n     *@param username:\u767b\u5f55\u540d  \n     *@param password \u767b\u5f55\u5bc6\u7801   \n     */\n    \n    public function checkLogin($username,$password){\n        $password = md5(base64_encode(md5($password)).'576hbgh6');\n        $where=array($username,$password,$username,$password);\n        return $this->where(\"( username='%s'  and password='%s' ) \",$where)->find();\n    }\n    //\u8bbe\u7f6e\u6700\u540e\u767b\u5f55\u65f6\u95f4\n    public function setLastTime($uid){\n        return $this->where(\"uid='%s'\",array($uid))->save(array(\"last_login_time\"=>time()));\n    }\n\n    //\u5220\u9664\u7528\u6237\n    public function delete_user($uid){\n        $uid = intval($uid) ;\n        D(\"TeamMember\")->where(\"member_uid = '$uid' \")->delete();\n        D(\"TeamItemMember\")->where(\"member_uid = '$uid' \")->delete();\n        D(\"ItemMember\")->where(\"uid = '$uid' \")->delete();\n        D(\"UserToken\")->where(\"uid = '$uid' \")->delete();\n        D(\"Template\")->where(\"uid = '$uid' \")->delete();\n        D(\"ItemTop\")->where(\"uid = '$uid' \")->delete();\n        $return = D(\"User\")->where(\"uid = '$uid' \")->delete();\n        return $return ;\n    }\n    //\u68c0\u6d4bldap\u767b\u5f55\n    public function checkLdapLogin($username ,$password ){\n            $ldap_open = D(\"Options\")->get(\"ldap_open\" ) ;\n            $ldap_form = D(\"Options\")->get(\"ldap_form\" ) ;\n            $ldap_form = json_decode($ldap_form,1);\n            if (!$ldap_open) {\n                return false;\n            }\n            if (!$ldap_form['user_field']) {\n                $ldap_form['user_field'] = 'cn';\n            }\n            $ldap_conn = ldap_connect($ldap_form['host'], $ldap_form['port']);//\u5efa\u7acb\u4e0e LDAP \u670d\u52a1\u5668\u7684\u8fde\u63a5\n            if (!$ldap_conn) {\n               return false;\n            }\n            ldap_set_option($ldap_conn, LDAP_OPT_PROTOCOL_VERSION, $ldap_form['version']);\n            $rs=ldap_bind($ldap_conn, $ldap_form['bind_dn'], $ldap_form['bind_password']);//\u4e0e\u670d\u52a1\u5668\u7ed1\u5b9a \u7528\u6237\u767b\u5f55\u9a8c\u8bc1 \u6210\u529f\u8fd4\u56de1 \n            if (!$rs) {\n               return false ;\n            }\n\n            $result = ldap_search($ldap_conn,$ldap_form['base_dn'],\"(cn=*)\");\n            $data = ldap_get_entries($ldap_conn, $result);\n            for ($i=0; $i<$data[\"count\"]; $i++) {\n                $ldap_user = $data[$i][$ldap_form['user_field']][0] ;\n                $dn = $data[$i][\"dn\"] ;\n                if ($ldap_user == $username) {\n                    //\u5982\u679c\u8be5\u7528\u6237\u4e0d\u5728\u6570\u636e\u5e93\u91cc\uff0c\u5219\u5e2e\u52a9\u5176\u6ce8\u518c\n                    $userInfo = D(\"User\")->isExist($username) ;\n                    if(!$userInfo){\n                        D(\"User\")->register($ldap_user,$ldap_user.time());\n                    }\n                    $rs2=ldap_bind($ldap_conn, $dn , $password);\n                    if ($rs2) {\n                       D(\"User\")->updatePwd($userInfo['uid'], $password);\n                       return $this->checkLogin($username,$password);\n                    }\n                }\n            }\n\n            return false ;\n\n    }\n\n    public function checkDbOk(){\n        $ret = $this->find() ;\n        if ($ret) {\n            return true; \n        }else{\n            return false; \n        }\n    }\n\n}\n", "<?php\n\n\n/**\n * \u83b7\u5f97\u5f53\u524d\u7684\u57df\u540d\n *\n * @return  string\n */\nfunction get_domain()\n{\n    /* \u534f\u8bae */\n    $protocol = (isset($_SERVER['HTTPS']) && (strtolower($_SERVER['HTTPS']) != 'off')) ? 'https://' : 'http://';\n\n    /* \u57df\u540d\u6216IP\u5730\u5740 */\n    if (isset($_SERVER['HTTP_X_FORWARDED_HOST']))\n    {\n        $host = $_SERVER['HTTP_X_FORWARDED_HOST'];\n    }\n    elseif (isset($_SERVER['HTTP_HOST']))\n    {\n        $host = $_SERVER['HTTP_HOST'];\n    }\n    else\n    {\n        /* \u7aef\u53e3 */\n        if (isset($_SERVER['SERVER_PORT']))\n        {\n            $port = ':' . $_SERVER['SERVER_PORT'];\n\n            if ((':80' == $port && 'http://' == $protocol) || (':443' == $port && 'https://' == $protocol))\n            {\n                $port = '';\n            }\n        }\n        else\n        {\n            $port = '';\n        }\n\n        if (isset($_SERVER['SERVER_NAME']))\n        {\n            $host = $_SERVER['SERVER_NAME'] . $port;\n        }\n        elseif (isset($_SERVER['SERVER_ADDR']))\n        {\n            $host = $_SERVER['SERVER_ADDR'] . $port;\n        }\n    }\n\n    return $protocol . $host;\n}\n\n/**\n * \u83b7\u5f97\u7f51\u7ad9\u7684URL\u5730\u5740\n *\n * @return  string\n */\nfunction site_url()\n{\n    return get_domain() . substr($_SERVER['PHP_SELF'], 0, strrpos($_SERVER['PHP_SELF'], '/'));\n}\n\n\n//\u5bfc\u51fa\u79f0word\nfunction output_word($data,$fileName=''){\n\n    if(empty($data)) return '';\n\n    $data = '<html xmlns:v=\"urn:schemas-microsoft-com:vml\"\n    xmlns:o=\"urn:schemas-microsoft-com:office:office\"\n    xmlns:w=\"urn:schemas-microsoft-com:office:word\"\n    xmlns=\"http://www.w3.org/TR/REC-html40\">\n    <head><meta http-equiv=Content-Type content=\"text/html; charset=utf-8\">\n    <style type=\"text/css\">\n        table  \n        {  \n            border-collapse: collapse;\n            border: none;  \n            width: 100%;  \n        }  \n        td,tr  \n        {  \n            border: solid #CCC 1px;\n            padding:3px;\n            font-size:9pt;\n        } \n        .codestyle{\n            word-break: break-all;\n            mso-highlight:rgb(252, 252, 252);\n            padding-left: 5px; background-color: rgb(252, 252, 252); border: 1px solid rgb(225, 225, 232);\n        }\n        img {\n            width:100;\n        }\n    </style>\n    <meta name=ProgId content=Word.Document>\n    <meta name=Generator content=\"Microsoft Word 11\">\n    <meta name=Originator content=\"Microsoft Word 11\">\n    <xml><w:WordDocument><w:View>Print</w:View></xml></head>\n    <body>'.$data.'</body></html>';\n    \n    $filepath = tmpfile();\n    $data = str_replace(\"<thead>\\n<tr>\",\"<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>\",$data);\n    $data = str_replace(\"<pre><code\",\"<table width='100%' class='codestyle'><pre><code\",$data);\n    $data = str_replace(\"</code></pre>\",\"</code></pre></table>\",$data);\n    $data = str_replace(\"<img \",\"<img width=500 \",$data);\n    $len = strlen($data);\n    fwrite($filepath, $data);\n    header(\"Content-type: application/octet-stream\");\n    header(\"Content-Disposition: attachment; filename={$fileName}.doc\");\n    header('Content-Description: File Transfer');\n    header('Content-Type: application/octet-stream');\n    header('Content-Disposition: attachment; filename='.$fileName.'.doc');\n    header('Content-Transfer-Encoding: binary');\n    header('Expires: 0');\n    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n    header('Pragma: public');\n    header('Content-Length: ' . $len);\n    rewind($filepath);\n    echo fread($filepath,$len);\n}\n\n\nfunction clear_runtime($path = RUNTIME_PATH){  \n    //\u7ed9\u5b9a\u7684\u76ee\u5f55\u4e0d\u662f\u4e00\u4e2a\u6587\u4ef6\u5939  \n    if(!is_dir($path)){  \n        return null;  \n    }  \n  \n    $fh = opendir($path);  \n    while(($row = readdir($fh)) !== false){  \n        //\u8fc7\u6ee4\u6389\u865a\u62df\u76ee\u5f55  \n        if($row == '.' || $row == '..'|| $row == 'index.html'){  \n            continue;  \n        }  \n  \n        if(!is_dir($path.'/'.$row)){\n            unlink($path.'/'.$row);  \n        }  \n        clear_runtime($path.'/'.$row);  \n          \n    }  \n    //\u5173\u95ed\u76ee\u5f55\u53e5\u67c4\uff0c\u5426\u5219\u51faPermission denied  \n    closedir($fh);    \n    return true;  \n}\n\n//\u83b7\u53d6ip\nfunction getIPaddress(){\n    $IPaddress='';\n    if (isset($_SERVER)){\n        if (isset($_SERVER[\"HTTP_X_FORWARDED_FOR\"])){\n            $IPaddress = $_SERVER[\"HTTP_X_FORWARDED_FOR\"];\n        } else if (isset($_SERVER[\"HTTP_CLIENT_IP\"])) {\n            $IPaddress = $_SERVER[\"HTTP_CLIENT_IP\"];\n        } else {\n            $IPaddress = $_SERVER[\"REMOTE_ADDR\"];\n        }\n    } else {\n        if (getenv(\"HTTP_X_FORWARDED_FOR\")){\n            $IPaddress = getenv(\"HTTP_X_FORWARDED_FOR\");\n        } else if (getenv(\"HTTP_CLIENT_IP\")) {\n            $IPaddress = getenv(\"HTTP_CLIENT_IP\");\n        } else {\n            $IPaddress = getenv(\"REMOTE_ADDR\");\n        }\n    }\n    return $IPaddress;\n\n}\n\n/**\n * POST \u8bf7\u6c42\n *\n * @param string $url           \n * @param array $param          \n * @return string content\n */\nfunction http_post($url, $param) {\n    $oCurl = curl_init ();\n    if (stripos ( $url, \"https://\" ) !== FALSE) {\n        curl_setopt ( $oCurl, CURLOPT_SSL_VERIFYPEER, FALSE );\n        curl_setopt ( $oCurl, CURLOPT_SSL_VERIFYHOST, false );\n    }\n    if (is_string ( $param )) {\n        $strPOST = $param;\n    } else {\n        $aPOST = array ();\n        foreach ( $param as $key => $val ) {\n            $aPOST [] = $key . \"=\" . urlencode ( $val );\n        }\n        $strPOST = join ( \"&\", $aPOST );\n    }\n    curl_setopt ( $oCurl, CURLOPT_URL, $url );\n    curl_setopt ( $oCurl, CURLOPT_RETURNTRANSFER, 1 );\n    curl_setopt ( $oCurl, CURLOPT_POST, true );\n    curl_setopt ( $oCurl, CURLOPT_POSTFIELDS, $strPOST );\n    $sContent = curl_exec ( $oCurl );\n    curl_close ( $oCurl );\n    return $sContent;\n}\n\nfunction compress_string($string){\n    return base64_encode( gzcompress($string, 9)) ;\n}\n\nfunction uncompress_string($string){\n    return  gzuncompress(base64_decode($string));  \n}\n\n//\u83b7\u53d6\u73af\u5883\u53d8\u91cf\u3002\u5982\u679c\u73af\u5883\u53d8\u91cf\u4e0d\u5b58\u5728\uff0c\u5c06\u8fd4\u56de\u7b2c\u4e00\u4e2a\u53c2\u6570\nfunction env($name , $default_value = false){\n    return getenv($name) ? getenv($name) : $default_value ;\n\n}"], "fixing_code": ["<?php\nnamespace Api\\Controller;\nuse Think\\Controller;\nclass AdminSettingController extends BaseController {\n\n    //\u4fdd\u5b58\u914d\u7f6e\n    public function saveConfig(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $register_open = intval(I(\"register_open\")) ;\n        $history_version_count = intval(I(\"history_version_count\")) ;\n        $oss_open = intval(I(\"oss_open\")) ;\n        $home_page = intval(I(\"home_page\")) ;\n        $home_item = intval(I(\"home_item\")) ;\n        $oss_setting = I(\"oss_setting\") ;\n        $beian = I(\"beian\") ;\n        D(\"Options\")->set(\"history_version_count\" ,$history_version_count) ;\n        D(\"Options\")->set(\"register_open\" ,$register_open) ;\n        D(\"Options\")->set(\"home_page\" ,$home_page) ;\n        D(\"Options\")->set(\"home_item\" ,$home_item) ;\n        D(\"Options\")->set(\"beian\" ,$beian) ;\n        \n        if ($oss_open) {\n            $this->checkComposerPHPVersion();\n            D(\"Options\")->set(\"oss_setting\" , json_encode( $oss_setting)) ;\n        }\n        D(\"Options\")->set(\"oss_open\" ,$oss_open) ;\n\n        $this->sendResult(array());\n\n    }\n\n    //\u52a0\u8f7d\u914d\u7f6e\n    public function loadConfig(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $oss_open = D(\"Options\")->get(\"oss_open\" ) ;\n        $register_open = D(\"Options\")->get(\"register_open\" ) ;\n        $history_version_count = D(\"Options\")->get(\"history_version_count\" ) ;\n        $oss_setting = D(\"Options\")->get(\"oss_setting\" ) ;\n        $home_page = D(\"Options\")->get(\"home_page\" ) ;\n        $home_item = D(\"Options\")->get(\"home_item\" ) ;\n        $beian = D(\"Options\")->get(\"beian\" ) ;\n        $ldap_form = json_decode($ldap_form,1);\n        $oss_setting = json_decode($oss_setting,1);\n        \n        //\u5982\u679c\u5f3a\u7b49\u4e8efalse\uff0c\u90a3\u5c31\u662f\u5c1a\u672a\u6709\u6570\u636e\u3002\u5173\u95ed\u6ce8\u518c\u5e94\u8be5\u662f\u6709\u6570\u636e\u4e14\u6570\u636e\u4e3a\u5b57\u7b26\u4e320\n        if ($register_open === false) {\n            $this->sendResult(array());\n        }else{\n            $array = array(\n                \"oss_open\"=>$oss_open ,\n                \"register_open\"=>$register_open ,\n                \"history_version_count\"=>$history_version_count ,\n                \"home_page\"=>$home_page ,\n                \"home_item\"=>$home_item ,\n                \"beian\"=>$beian ,\n                \"oss_setting\"=>$oss_setting ,\n                );\n            $this->sendResult($array);\n        }\n\n    }\n\n    //\u4fdd\u5b58Ldap\u914d\u7f6e\n    public function saveLdapConfig(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $ldap_open = intval(I(\"ldap_open\")) ;\n        $ldap_form = I(\"ldap_form\") ;\n        \n        if ($ldap_open) {\n            if (!$ldap_form['user_field']) {\n                $ldap_form['user_field'] = 'cn';\n            }\n            if( !extension_loaded( 'ldap' ) ) {\n               $this->sendError(10011,\"\u4f60\u5c1a\u672a\u5b89\u88c5php-ldap\u6269\u5c55\u3002\u5982\u679c\u662f\u666e\u901aPHP\u73af\u5883\uff0c\u8bf7\u624b\u52a8\u5b89\u88c5\u4e4b\u3002\u5982\u679c\u662f\u4f7f\u7528\u4e4b\u524d\u5b98\u65b9docker\u955c\u50cf\uff0c\u5219\u9700\u8981\u91cd\u65b0\u5b89\u88c5\u955c\u50cf\u3002\u65b9\u6cd5\u662f\uff1a\u5907\u4efd /showdoc_data \u6574\u4e2a\u76ee\u5f55\uff0c\u7136\u540e\u5168\u65b0\u5b89\u88c5showdoc\uff0c\u63a5\u7740\u7528\u5907\u4efd\u8986\u76d6/showdoc_data \u3002\u7136\u540e\u9012\u5f52\u8d4b\u4e88777\u53ef\u5199\u6743\u9650\u3002\");\n               return ;\n            }\n\n            $ldap_conn = ldap_connect($ldap_form['host'], $ldap_form['port']);//\u5efa\u7acb\u4e0e LDAP \u670d\u52a1\u5668\u7684\u8fde\u63a5\n            if (!$ldap_conn) {\n               $this->sendError(10011,\"Can't connect to LDAP server\");\n               return ;\n            }\n            ldap_set_option($ldap_conn, LDAP_OPT_PROTOCOL_VERSION, $ldap_form['version']);\n            $rs=ldap_bind($ldap_conn, $ldap_form['bind_dn'], $ldap_form['bind_password']);//\u4e0e\u670d\u52a1\u5668\u7ed1\u5b9a \u7528\u6237\u767b\u5f55\u9a8c\u8bc1 \u6210\u529f\u8fd4\u56de1 \n            if (!$rs) {\n               $this->sendError(10011,\"Can't bind to LDAP server\");\n               return ;\n            }\n\n            $result = ldap_search($ldap_conn,$ldap_form['base_dn'],\"(cn=*)\");\n            $data = ldap_get_entries($ldap_conn, $result);\n            \n            for ($i=0; $i<$data[\"count\"]; $i++) {\n                $ldap_user = $data[$i][$ldap_form['user_field']][0] ;\n                if (!$ldap_user) {\n                    continue ;\n                }\n                //\u5982\u679c\u8be5\u7528\u6237\u4e0d\u5728\u6570\u636e\u5e93\u91cc\uff0c\u5219\u5e2e\u52a9\u5176\u6ce8\u518c\n                if(!D(\"User\")->isExist($ldap_user)){\n                    D(\"User\")->register($ldap_user,$ldap_user.get_rand_str());\n                }\n            }\n            D(\"Options\")->set(\"ldap_form\" , json_encode( $ldap_form)) ;\n        }\n        D(\"Options\")->set(\"ldap_open\" ,$ldap_open) ;\n        $this->sendResult(array());\n\n    }\n\n    //\u52a0\u8f7dLdap\u914d\u7f6e\n    public function loadLdapConfig(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $ldap_open = D(\"Options\")->get(\"ldap_open\" ) ;\n        $ldap_form = D(\"Options\")->get(\"ldap_form\" ) ;\n        $ldap_form = json_decode($ldap_form,1);\n        \n        //\u5982\u679c\u5f3a\u7b49\u4e8efalse\uff0c\u90a3\u5c31\u662f\u5c1a\u672a\u6709\u6570\u636e\u3002\u5173\u95ed\u6ce8\u518c\u5e94\u8be5\u662f\u6709\u6570\u636e\u4e14\u6570\u636e\u4e3a\u5b57\u7b26\u4e320\n        if ($register_open === false) {\n            $this->sendResult(array());\n        }else{\n            $array = array(\n                \"ldap_open\"=>$ldap_open ,\n                \"ldap_form\"=>$ldap_form ,\n                );\n            $this->sendResult($array);\n        }\n\n    }\n\n    //\u4fdd\u5b58Oauth2\u914d\u7f6e\n    public function saveOauth2Config(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $this->checkComposerPHPVersion();\n        $oauth2_open = intval(I(\"oauth2_open\")) ;\n        $oauth2_form = I(\"oauth2_form\") ;\n        D(\"Options\")->set(\"oauth2_form\" , json_encode( $oauth2_form)) ;\n        D(\"Options\")->set(\"oauth2_open\" ,$oauth2_open) ;\n        $this->sendResult(array());\n\n    }\n\n    //\u52a0\u8f7dOauth2\u914d\u7f6e\n    public function loadOauth2Config(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $oauth2_open = D(\"Options\")->get(\"oauth2_open\" ) ;\n        $oauth2_form = D(\"Options\")->get(\"oauth2_form\" ) ;\n        $oauth2_form = json_decode($oauth2_form,1);\n        \n        //\u5982\u679c\u5f3a\u7b49\u4e8efalse\uff0c\u90a3\u5c31\u662f\u5c1a\u672a\u6709\u6570\u636e\u3002\u5173\u95ed\u6ce8\u518c\u5e94\u8be5\u662f\u6709\u6570\u636e\u4e14\u6570\u636e\u4e3a\u5b57\u7b26\u4e320\n        if ($register_open === false) {\n            $this->sendResult(array());\n        }else{\n            $array = array(\n                \"oauth2_open\"=>$oauth2_open ,\n                \"oauth2_form\"=>$oauth2_form ,\n                );\n            $this->sendResult($array);\n        }\n\n    }\n\n    public function getLoginSecretKey(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $login_secret_key = D(\"Options\")->get(\"login_secret_key\") ;\n        if(!$login_secret_key){\n            $login_secret_key = bin2hex( random_bytes( 16 ) );\n            D(\"Options\")->set(\"login_secret_key\",$login_secret_key) ;\n        }\n        $this->sendResult(array(\"login_secret_key\"=>$login_secret_key));\n\n    }\n\n    public function resetLoginSecretKey(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $login_secret_key = bin2hex( random_bytes( 16 ) );\n        D(\"Options\")->set(\"login_secret_key\",$login_secret_key) ;\n        $this->sendResult(array(\"login_secret_key\"=>$login_secret_key));\n\n    }\n\n\n    public function checkLdapLogin(){\n            $username = 'admin';\n            $password = '123456';\n\n            $ldap_open = D(\"Options\")->get(\"ldap_open\" ) ;\n            $ldap_form = D(\"Options\")->get(\"ldap_form\" ) ;\n            $ldap_form = json_decode($ldap_form,1);\n            if (!$ldap_open) {\n                return ;\n            }\n            if (!$ldap_form['user_field']) {\n                $ldap_form['user_field'] = 'cn';\n            }\n            $ldap_conn = ldap_connect($ldap_form['host'], $ldap_form['port']);//\u5efa\u7acb\u4e0e LDAP \u670d\u52a1\u5668\u7684\u8fde\u63a5\n            if (!$ldap_conn) {\n               $this->sendError(10011,\"Can't connect to LDAP server\");\n               return ;\n            }\n            ldap_set_option($ldap_conn, LDAP_OPT_PROTOCOL_VERSION, $ldap_form['version']);\n            $rs=ldap_bind($ldap_conn, $ldap_form['bind_dn'], $ldap_form['bind_password']);//\u4e0e\u670d\u52a1\u5668\u7ed1\u5b9a \u7528\u6237\u767b\u5f55\u9a8c\u8bc1 \u6210\u529f\u8fd4\u56de1 \n            if (!$rs) {\n               $this->sendError(10011,\"Can't bind to LDAP server\");\n               return ;\n            }\n\n            $result = ldap_search($ldap_conn,$ldap_form['base_dn'],\"(cn=*)\");\n            $data = ldap_get_entries($ldap_conn, $result);\n            for ($i=0; $i<$data[\"count\"]; $i++) {\n                $ldap_user = $data[$i][$ldap_form['user_field']][0] ;\n                $dn = $data[$i][\"dn\"] ;\n                if ($ldap_user == $username) {\n                    //\u5982\u679c\u8be5\u7528\u6237\u4e0d\u5728\u6570\u636e\u5e93\u91cc\uff0c\u5219\u5e2e\u52a9\u5176\u6ce8\u518c\n                    $userInfo = D(\"User\")->isExist($username) ;\n                    if(!$userInfo){\n                        D(\"User\")->register($ldap_user,$ldap_user.get_rand_str());\n                    }\n                    $rs2=ldap_bind($ldap_conn, $dn , $password);\n                    if ($rs2) {\n                       D(\"User\")->updatePwd($userInfo['uid'], $password);\n                       $this->sendResult(array());\n                       return ;\n                    }\n                }\n            }\n           $this->sendError(10011,\"\u7528\u6237\u540d\u6216\u8005\u5bc6\u7801\u9519\u8bef\");\n    }\n\n}", "<?php\nnamespace Api\\Model;\nuse Api\\Model\\BaseModel;\n\nclass UserModel extends BaseModel {\n\n    /**\n     * \u7528\u6237\u540d\u662f\u5426\u5df2\u7ecf\u5b58\u5728\n     * \n     */\n    public function isExist($username){\n        return  $this->where(\"username = '%s'\",array($username))->find();\n    }\n\n    /**\n     * \u6ce8\u518c\u65b0\u7528\u6237\n     * \n     */\n    public function register($username,$password){\n        $password = md5(base64_encode(md5($password)).'576hbgh6');\n        return $this->add(array('username'=>$username ,'password'=>$password , 'reg_time'=>time()));\n    }\n\n    //\u4fee\u6539\u7528\u6237\u5bc6\u7801\n    public function updatePwd($uid, $password){\n        $password = md5(base64_encode(md5($password)).'576hbgh6');\n        return $this->where(\"uid ='%d' \",array($uid))->save(array('password'=>$password));   \n    }\n\n    /**\n     * \u8fd4\u56de\u7528\u6237\u4fe1\u606f\n     * @return \n     */\n    public function userInfo($uid){\n        return  $this->where(\"uid = '%d'\",array($uid))->find();\n    }\n\n    /**\n     *@param username:\u767b\u5f55\u540d  \n     *@param password \u767b\u5f55\u5bc6\u7801   \n     */\n    \n    public function checkLogin($username,$password){\n        $password = md5(base64_encode(md5($password)).'576hbgh6');\n        $where=array($username,$password,$username,$password);\n        return $this->where(\"( username='%s'  and password='%s' ) \",$where)->find();\n    }\n    //\u8bbe\u7f6e\u6700\u540e\u767b\u5f55\u65f6\u95f4\n    public function setLastTime($uid){\n        return $this->where(\"uid='%s'\",array($uid))->save(array(\"last_login_time\"=>time()));\n    }\n\n    //\u5220\u9664\u7528\u6237\n    public function delete_user($uid){\n        $uid = intval($uid) ;\n        D(\"TeamMember\")->where(\"member_uid = '$uid' \")->delete();\n        D(\"TeamItemMember\")->where(\"member_uid = '$uid' \")->delete();\n        D(\"ItemMember\")->where(\"uid = '$uid' \")->delete();\n        D(\"UserToken\")->where(\"uid = '$uid' \")->delete();\n        D(\"Template\")->where(\"uid = '$uid' \")->delete();\n        D(\"ItemTop\")->where(\"uid = '$uid' \")->delete();\n        $return = D(\"User\")->where(\"uid = '$uid' \")->delete();\n        return $return ;\n    }\n    //\u68c0\u6d4bldap\u767b\u5f55\n    public function checkLdapLogin($username ,$password ){\n            $ldap_open = D(\"Options\")->get(\"ldap_open\" ) ;\n            $ldap_form = D(\"Options\")->get(\"ldap_form\" ) ;\n            $ldap_form = json_decode($ldap_form,1);\n            if (!$ldap_open) {\n                return false;\n            }\n            if (!$ldap_form['user_field']) {\n                $ldap_form['user_field'] = 'cn';\n            }\n            $ldap_conn = ldap_connect($ldap_form['host'], $ldap_form['port']);//\u5efa\u7acb\u4e0e LDAP \u670d\u52a1\u5668\u7684\u8fde\u63a5\n            if (!$ldap_conn) {\n               return false;\n            }\n            ldap_set_option($ldap_conn, LDAP_OPT_PROTOCOL_VERSION, $ldap_form['version']);\n            $rs=ldap_bind($ldap_conn, $ldap_form['bind_dn'], $ldap_form['bind_password']);//\u4e0e\u670d\u52a1\u5668\u7ed1\u5b9a \u7528\u6237\u767b\u5f55\u9a8c\u8bc1 \u6210\u529f\u8fd4\u56de1 \n            if (!$rs) {\n               return false ;\n            }\n\n            $result = ldap_search($ldap_conn,$ldap_form['base_dn'],\"(cn=*)\");\n            $data = ldap_get_entries($ldap_conn, $result);\n            for ($i=0; $i<$data[\"count\"]; $i++) {\n                $ldap_user = $data[$i][$ldap_form['user_field']][0] ;\n                $dn = $data[$i][\"dn\"] ;\n                if ($ldap_user == $username) {\n                    //\u5982\u679c\u8be5\u7528\u6237\u4e0d\u5728\u6570\u636e\u5e93\u91cc\uff0c\u5219\u5e2e\u52a9\u5176\u6ce8\u518c\n                    $userInfo = D(\"User\")->isExist($username) ;\n                    if(!$userInfo){\n                        D(\"User\")->register($ldap_user,$ldap_user.get_rand_str());\n                    }\n                    $rs2=ldap_bind($ldap_conn, $dn , $password);\n                    if ($rs2) {\n                       D(\"User\")->updatePwd($userInfo['uid'], $password);\n                       return $this->checkLogin($username,$password);\n                    }\n                }\n            }\n\n            return false ;\n\n    }\n\n    public function checkDbOk(){\n        $ret = $this->find() ;\n        if ($ret) {\n            return true; \n        }else{\n            return false; \n        }\n    }\n\n}\n", "<?php\n\n\n/**\n * \u83b7\u5f97\u5f53\u524d\u7684\u57df\u540d\n *\n * @return  string\n */\nfunction get_domain()\n{\n    /* \u534f\u8bae */\n    $protocol = (isset($_SERVER['HTTPS']) && (strtolower($_SERVER['HTTPS']) != 'off')) ? 'https://' : 'http://';\n\n    /* \u57df\u540d\u6216IP\u5730\u5740 */\n    if (isset($_SERVER['HTTP_X_FORWARDED_HOST']))\n    {\n        $host = $_SERVER['HTTP_X_FORWARDED_HOST'];\n    }\n    elseif (isset($_SERVER['HTTP_HOST']))\n    {\n        $host = $_SERVER['HTTP_HOST'];\n    }\n    else\n    {\n        /* \u7aef\u53e3 */\n        if (isset($_SERVER['SERVER_PORT']))\n        {\n            $port = ':' . $_SERVER['SERVER_PORT'];\n\n            if ((':80' == $port && 'http://' == $protocol) || (':443' == $port && 'https://' == $protocol))\n            {\n                $port = '';\n            }\n        }\n        else\n        {\n            $port = '';\n        }\n\n        if (isset($_SERVER['SERVER_NAME']))\n        {\n            $host = $_SERVER['SERVER_NAME'] . $port;\n        }\n        elseif (isset($_SERVER['SERVER_ADDR']))\n        {\n            $host = $_SERVER['SERVER_ADDR'] . $port;\n        }\n    }\n\n    return $protocol . $host;\n}\n\n/**\n * \u83b7\u5f97\u7f51\u7ad9\u7684URL\u5730\u5740\n *\n * @return  string\n */\nfunction site_url()\n{\n    return get_domain() . substr($_SERVER['PHP_SELF'], 0, strrpos($_SERVER['PHP_SELF'], '/'));\n}\n\n\n//\u5bfc\u51fa\u79f0word\nfunction output_word($data,$fileName=''){\n\n    if(empty($data)) return '';\n\n    $data = '<html xmlns:v=\"urn:schemas-microsoft-com:vml\"\n    xmlns:o=\"urn:schemas-microsoft-com:office:office\"\n    xmlns:w=\"urn:schemas-microsoft-com:office:word\"\n    xmlns=\"http://www.w3.org/TR/REC-html40\">\n    <head><meta http-equiv=Content-Type content=\"text/html; charset=utf-8\">\n    <style type=\"text/css\">\n        table  \n        {  \n            border-collapse: collapse;\n            border: none;  \n            width: 100%;  \n        }  \n        td,tr  \n        {  \n            border: solid #CCC 1px;\n            padding:3px;\n            font-size:9pt;\n        } \n        .codestyle{\n            word-break: break-all;\n            mso-highlight:rgb(252, 252, 252);\n            padding-left: 5px; background-color: rgb(252, 252, 252); border: 1px solid rgb(225, 225, 232);\n        }\n        img {\n            width:100;\n        }\n    </style>\n    <meta name=ProgId content=Word.Document>\n    <meta name=Generator content=\"Microsoft Word 11\">\n    <meta name=Originator content=\"Microsoft Word 11\">\n    <xml><w:WordDocument><w:View>Print</w:View></xml></head>\n    <body>'.$data.'</body></html>';\n    \n    $filepath = tmpfile();\n    $data = str_replace(\"<thead>\\n<tr>\",\"<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>\",$data);\n    $data = str_replace(\"<pre><code\",\"<table width='100%' class='codestyle'><pre><code\",$data);\n    $data = str_replace(\"</code></pre>\",\"</code></pre></table>\",$data);\n    $data = str_replace(\"<img \",\"<img width=500 \",$data);\n    $len = strlen($data);\n    fwrite($filepath, $data);\n    header(\"Content-type: application/octet-stream\");\n    header(\"Content-Disposition: attachment; filename={$fileName}.doc\");\n    header('Content-Description: File Transfer');\n    header('Content-Type: application/octet-stream');\n    header('Content-Disposition: attachment; filename='.$fileName.'.doc');\n    header('Content-Transfer-Encoding: binary');\n    header('Expires: 0');\n    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n    header('Pragma: public');\n    header('Content-Length: ' . $len);\n    rewind($filepath);\n    echo fread($filepath,$len);\n}\n\n\nfunction clear_runtime($path = RUNTIME_PATH){  \n    //\u7ed9\u5b9a\u7684\u76ee\u5f55\u4e0d\u662f\u4e00\u4e2a\u6587\u4ef6\u5939  \n    if(!is_dir($path)){  \n        return null;  \n    }  \n  \n    $fh = opendir($path);  \n    while(($row = readdir($fh)) !== false){  \n        //\u8fc7\u6ee4\u6389\u865a\u62df\u76ee\u5f55  \n        if($row == '.' || $row == '..'|| $row == 'index.html'){  \n            continue;  \n        }  \n  \n        if(!is_dir($path.'/'.$row)){\n            unlink($path.'/'.$row);  \n        }  \n        clear_runtime($path.'/'.$row);  \n          \n    }  \n    //\u5173\u95ed\u76ee\u5f55\u53e5\u67c4\uff0c\u5426\u5219\u51faPermission denied  \n    closedir($fh);    \n    return true;  \n}\n\n//\u83b7\u53d6ip\nfunction getIPaddress(){\n    $IPaddress='';\n    if (isset($_SERVER)){\n        if (isset($_SERVER[\"HTTP_X_FORWARDED_FOR\"])){\n            $IPaddress = $_SERVER[\"HTTP_X_FORWARDED_FOR\"];\n        } else if (isset($_SERVER[\"HTTP_CLIENT_IP\"])) {\n            $IPaddress = $_SERVER[\"HTTP_CLIENT_IP\"];\n        } else {\n            $IPaddress = $_SERVER[\"REMOTE_ADDR\"];\n        }\n    } else {\n        if (getenv(\"HTTP_X_FORWARDED_FOR\")){\n            $IPaddress = getenv(\"HTTP_X_FORWARDED_FOR\");\n        } else if (getenv(\"HTTP_CLIENT_IP\")) {\n            $IPaddress = getenv(\"HTTP_CLIENT_IP\");\n        } else {\n            $IPaddress = getenv(\"REMOTE_ADDR\");\n        }\n    }\n    return $IPaddress;\n\n}\n\n/**\n * POST \u8bf7\u6c42\n *\n * @param string $url           \n * @param array $param          \n * @return string content\n */\nfunction http_post($url, $param) {\n    $oCurl = curl_init ();\n    if (stripos ( $url, \"https://\" ) !== FALSE) {\n        curl_setopt ( $oCurl, CURLOPT_SSL_VERIFYPEER, FALSE );\n        curl_setopt ( $oCurl, CURLOPT_SSL_VERIFYHOST, false );\n    }\n    if (is_string ( $param )) {\n        $strPOST = $param;\n    } else {\n        $aPOST = array ();\n        foreach ( $param as $key => $val ) {\n            $aPOST [] = $key . \"=\" . urlencode ( $val );\n        }\n        $strPOST = join ( \"&\", $aPOST );\n    }\n    curl_setopt ( $oCurl, CURLOPT_URL, $url );\n    curl_setopt ( $oCurl, CURLOPT_RETURNTRANSFER, 1 );\n    curl_setopt ( $oCurl, CURLOPT_POST, true );\n    curl_setopt ( $oCurl, CURLOPT_POSTFIELDS, $strPOST );\n    $sContent = curl_exec ( $oCurl );\n    curl_close ( $oCurl );\n    return $sContent;\n}\n\nfunction compress_string($string){\n    return base64_encode( gzcompress($string, 9)) ;\n}\n\nfunction uncompress_string($string){\n    return  gzuncompress(base64_decode($string));  \n}\n\n//\u83b7\u53d6\u73af\u5883\u53d8\u91cf\u3002\u5982\u679c\u73af\u5883\u53d8\u91cf\u4e0d\u5b58\u5728\uff0c\u5c06\u8fd4\u56de\u7b2c\u4e00\u4e2a\u53c2\u6570\nfunction env($name , $default_value = false){\n    return getenv($name) ? getenv($name) : $default_value ;\n\n}\n\n// \u83b7\u53d6\u968f\u673a\u5b57\u7b26\u4e32\nfunction get_rand_str($len = 32 ){\n    // \u5bf9\u4e8ephp7\u4ee5\u4e0a\u7248\u672c\uff0c\u53ef\u5229\u7528random_bytes\u4ea7\u751f\u968f\u673a\n    if(version_compare(PHP_VERSION,'7.0','>')){\n        $rand = bin2hex( random_bytes( 16 ) ); \n        return substr($rand,0,$len); \n    }else{\n        // \u5bf9\u4e8e\u4f4e\u7248\u672c\uff0c\u53ea\u597d\u5c3d\u91cf\u52a0\u5927\u957f\u5ea6\u5b9e\u73b0\u4f2a\u968f\u673a\uff0c\u589e\u5927\u66b4\u529b\u7834\u89e3\u96be\u5ea6\n        $s1 = microtime(true).time().rand().rand().rand().microtime(true).time().rand().rand().rand();\n        $s2 = microtime(true).time().rand().rand().rand().microtime(true).time().rand().rand().rand();\n        $md5 = md5($s2.base64_encode($s1));\n        return substr($md5,0,$len);\n    }\n\n    \n}"], "filenames": ["server/Application/Api/Controller/AdminSettingController.class.php", "server/Application/Api/Model/UserModel.class.php", "server/Application/Common/Common/function.php"], "buggy_code_start_loc": [103, 95, 214], "buggy_code_end_loc": [225, 96, 214], "fixing_code_start_loc": [103, 95, 215], "fixing_code_end_loc": [225, 96, 232], "type": "CWE-338", "message": "showdoc is vulnerable to Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)", "other": {"cve": {"id": "CVE-2021-3990", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-01T11:15:07.977", "lastModified": "2021-12-02T16:49:25.963", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "showdoc is vulnerable to Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)"}, {"lang": "es", "value": "showdoc es vulnerable al Uso de un Generador de N\u00fameros Pseudoaleatorios (PRNG) Criptogr\u00e1ficamente D\u00e9bil"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-338"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:showdoc:showdoc:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.9.13", "matchCriteriaId": "3ED61945-F39E-4395-BA12-8F3F8A7E55A0"}]}]}], "references": [{"url": "https://github.com/star7th/showdoc/commit/a9886f26c08225e0adca75c67dfca3f7c42b87d0", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/0680067d-56a7-4412-b06e-a267e850ae9f", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/star7th/showdoc/commit/a9886f26c08225e0adca75c67dfca3f7c42b87d0"}}