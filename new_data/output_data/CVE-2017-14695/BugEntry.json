{"buggy_code": ["# -*- coding: utf-8 -*-\n'''\nA few checks to make sure the environment is sane\n'''\nfrom __future__ import absolute_import\n\n# Original Author: Jeff Schroeder <jeffschroeder@computer.org>\n\n# Import python libs\nimport os\nimport re\nimport sys\nimport stat\nimport errno\nimport socket\nimport logging\n\n# Import third party libs\ntry:\n    import win32file\nexcept ImportError:\n    import resource\n\n# Import salt libs\nfrom salt.log import is_console_configured\nfrom salt.log.setup import LOG_LEVELS\nfrom salt.exceptions import SaltClientError, SaltSystemExit, \\\n    CommandExecutionError\nimport salt.defaults.exitcodes\nimport salt.utils\n\nlog = logging.getLogger(__name__)\n\n\ndef zmq_version():\n    '''\n    ZeroMQ python bindings >= 2.1.9 are required\n    '''\n    try:\n        import zmq\n    except Exception:\n        # Return True for local mode\n        return True\n    ver = zmq.__version__\n    # The last matched group can be None if the version\n    # is something like 3.1 and that will work properly\n    match = re.match(r'^(\\d+)\\.(\\d+)(?:\\.(\\d+))?', ver)\n\n    # Fallthrough and hope for the best\n    if not match:\n        msg = \"Using untested zmq python bindings version: '{0}'\".format(ver)\n        if is_console_configured():\n            log.warning(msg)\n        else:\n            sys.stderr.write(\"WARNING {0}\\n\".format(msg))\n        return True\n\n    major, minor, point = match.groups()\n\n    if major.isdigit():\n        major = int(major)\n    if minor.isdigit():\n        minor = int(minor)\n\n    # point very well could be None\n    if point and point.isdigit():\n        point = int(point)\n\n    if major == 2 and minor == 1:\n        # zmq 2.1dev could be built against a newer libzmq\n        if \"dev\" in ver and not point:\n            msg = 'Using dev zmq module, please report unexpected results'\n            if is_console_configured():\n                log.warning(msg)\n            else:\n                sys.stderr.write(\"WARNING: {0}\\n\".format(msg))\n            return True\n        elif point and point >= 9:\n            return True\n    elif major > 2 or (major == 2 and minor > 1):\n        return True\n\n    # If all else fails, gracefully croak and warn the user\n    log.critical('ZeroMQ python bindings >= 2.1.9 are required')\n    if 'salt-master' in sys.argv[0]:\n        msg = ('The Salt Master is unstable using a ZeroMQ version '\n               'lower than 2.1.11 and requires this fix: http://lists.zeromq.'\n               'org/pipermail/zeromq-dev/2011-June/012094.html')\n        if is_console_configured():\n            log.critical(msg)\n        else:\n            sys.stderr.write('CRITICAL {0}\\n'.format(msg))\n    return False\n\n\ndef lookup_family(hostname):\n    '''\n    Lookup a hostname and determine its address family. The first address returned\n    will be AF_INET6 if the system is IPv6-enabled, and AF_INET otherwise.\n    '''\n    # If lookups fail, fall back to AF_INET sockets (and v4 addresses).\n    fallback = socket.AF_INET\n    try:\n        hostnames = socket.getaddrinfo(\n            hostname or None, None, socket.AF_UNSPEC, socket.SOCK_STREAM\n        )\n        if not hostnames:\n            return fallback\n        h = hostnames[0]\n        return h[0]\n    except socket.gaierror:\n        return fallback\n\n\ndef verify_socket(interface, pub_port, ret_port):\n    '''\n    Attempt to bind to the sockets to verify that they are available\n    '''\n\n    addr_family = lookup_family(interface)\n    for port in pub_port, ret_port:\n        sock = socket.socket(addr_family, socket.SOCK_STREAM)\n        try:\n            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            sock.bind((interface, int(port)))\n        except Exception as exc:\n            msg = 'Unable to bind socket {0}:{1}'.format(interface, port)\n            if exc.args:\n                msg = '{0}, error: {1}'.format(msg, str(exc))\n            else:\n                msg = '{0}, this might not be a problem.'.format(msg)\n            msg += '; Is there another salt-master running?'\n            if is_console_configured():\n                log.warning(msg)\n            else:\n                sys.stderr.write('WARNING: {0}\\n'.format(msg))\n            return False\n        finally:\n            sock.close()\n\n    return True\n\n\ndef verify_files(files, user):\n    '''\n    Verify that the named files exist and are owned by the named user\n    '''\n    if salt.utils.is_windows():\n        return True\n    import pwd  # after confirming not running Windows\n    try:\n        pwnam = pwd.getpwnam(user)\n        uid = pwnam[2]\n    except KeyError:\n        err = ('Failed to prepare the Salt environment for user '\n               '{0}. The user is not available.\\n').format(user)\n        sys.stderr.write(err)\n        sys.exit(salt.defaults.exitcodes.EX_NOUSER)\n\n    for fn_ in files:\n        dirname = os.path.dirname(fn_)\n        try:\n            if dirname:\n                try:\n                    os.makedirs(dirname)\n                except OSError as err:\n                    if err.errno != errno.EEXIST:\n                        raise\n            if not os.path.isfile(fn_):\n                with salt.utils.fopen(fn_, 'w+') as fp_:\n                    fp_.write('')\n\n        except IOError as err:\n            if os.path.isfile(dirname):\n                msg = 'Failed to create path {0}, is {1} a file?'.format(fn_, dirname)\n                raise SaltSystemExit(msg=msg)\n            if err.errno != errno.EACCES:\n                raise\n            msg = 'No permissions to access \"{0}\", are you running as the correct user?'.format(fn_)\n            raise SaltSystemExit(msg=msg)\n\n        except OSError as err:\n            msg = 'Failed to create path \"{0}\" - {1}'.format(fn_, err)\n            raise SaltSystemExit(msg=msg)\n\n        stats = os.stat(fn_)\n        if uid != stats.st_uid:\n            try:\n                os.chown(fn_, uid, -1)\n            except OSError:\n                pass\n    return True\n\n\ndef verify_env(dirs, user, permissive=False, pki_dir='', skip_extra=False):\n    '''\n    Verify that the named directories are in place and that the environment\n    can shake the salt\n    '''\n    if salt.utils.is_windows():\n        return win_verify_env(dirs, permissive, pki_dir, skip_extra)\n    import pwd  # after confirming not running Windows\n    try:\n        pwnam = pwd.getpwnam(user)\n        uid = pwnam[2]\n        gid = pwnam[3]\n        groups = salt.utils.get_gid_list(user, include_default=False)\n\n    except KeyError:\n        err = ('Failed to prepare the Salt environment for user '\n               '{0}. The user is not available.\\n').format(user)\n        sys.stderr.write(err)\n        sys.exit(salt.defaults.exitcodes.EX_NOUSER)\n    for dir_ in dirs:\n        if not dir_:\n            continue\n        if not os.path.isdir(dir_):\n            try:\n                cumask = os.umask(18)  # 077\n                os.makedirs(dir_)\n                # If starting the process as root, chown the new dirs\n                if os.getuid() == 0:\n                    os.chown(dir_, uid, gid)\n                os.umask(cumask)\n            except OSError as err:\n                msg = 'Failed to create directory path \"{0}\" - {1}\\n'\n                sys.stderr.write(msg.format(dir_, err))\n                sys.exit(err.errno)\n\n        mode = os.stat(dir_)\n        # If starting the process as root, chown the new dirs\n        if os.getuid() == 0:\n            fmode = os.stat(dir_)\n            if fmode.st_uid != uid or fmode.st_gid != gid:\n                if permissive and fmode.st_gid in groups:\n                    # Allow the directory to be owned by any group root\n                    # belongs to if we say it's ok to be permissive\n                    pass\n                else:\n                    # chown the file for the new user\n                    os.chown(dir_, uid, gid)\n            for subdir in [a for a in os.listdir(dir_) if 'jobs' not in a]:\n                fsubdir = os.path.join(dir_, subdir)\n                if '{0}jobs'.format(os.path.sep) in fsubdir:\n                    continue\n                for root, dirs, files in os.walk(fsubdir):\n                    for name in files:\n                        if name.startswith('.'):\n                            continue\n                        path = os.path.join(root, name)\n                        try:\n                            fmode = os.stat(path)\n                        except (IOError, OSError):\n                            pass\n                        if fmode.st_uid != uid or fmode.st_gid != gid:\n                            if permissive and fmode.st_gid in groups:\n                                pass\n                            else:\n                                # chown the file for the new user\n                                os.chown(path, uid, gid)\n                    for name in dirs:\n                        path = os.path.join(root, name)\n                        fmode = os.stat(path)\n                        if fmode.st_uid != uid or fmode.st_gid != gid:\n                            if permissive and fmode.st_gid in groups:\n                                pass\n                            else:\n                                # chown the file for the new user\n                                os.chown(path, uid, gid)\n        # Allow the pki dir to be 700 or 750, but nothing else.\n        # This prevents other users from writing out keys, while\n        # allowing the use-case of 3rd-party software (like django)\n        # to read in what it needs to integrate.\n        #\n        # If the permissions aren't correct, default to the more secure 700.\n        # If acls are enabled, the pki_dir needs to remain readable, this\n        # is still secure because the private keys are still only readable\n        # by the user running the master\n        if dir_ == pki_dir:\n            smode = stat.S_IMODE(mode.st_mode)\n            if smode != 448 and smode != 488:\n                if os.access(dir_, os.W_OK):\n                    os.chmod(dir_, 448)\n                else:\n                    msg = 'Unable to securely set the permissions of \"{0}\".'\n                    msg = msg.format(dir_)\n                    if is_console_configured():\n                        log.critical(msg)\n                    else:\n                        sys.stderr.write(\"CRITICAL: {0}\\n\".format(msg))\n\n    if skip_extra is False:\n        # Run the extra verification checks\n        zmq_version()\n\n\ndef check_user(user):\n    '''\n    Check user and assign process uid/gid.\n    '''\n    if salt.utils.is_windows():\n        return True\n    if user == salt.utils.get_user():\n        return True\n    import pwd  # after confirming not running Windows\n    try:\n        pwuser = pwd.getpwnam(user)\n        try:\n            if hasattr(os, 'initgroups'):\n                os.initgroups(user, pwuser.pw_gid)  # pylint: disable=minimum-python-version\n            else:\n                os.setgroups(salt.utils.get_gid_list(user, include_default=False))\n            os.setgid(pwuser.pw_gid)\n            os.setuid(pwuser.pw_uid)\n\n            # We could just reset the whole environment but let's just override\n            # the variables we can get from pwuser\n            if 'HOME' in os.environ:\n                os.environ['HOME'] = pwuser.pw_dir\n\n            if 'SHELL' in os.environ:\n                os.environ['SHELL'] = pwuser.pw_shell\n\n            for envvar in ('USER', 'LOGNAME'):\n                if envvar in os.environ:\n                    os.environ[envvar] = pwuser.pw_name\n\n        except OSError:\n            msg = 'Salt configured to run as user \"{0}\" but unable to switch.'\n            msg = msg.format(user)\n            if is_console_configured():\n                log.critical(msg)\n            else:\n                sys.stderr.write(\"CRITICAL: {0}\\n\".format(msg))\n            return False\n    except KeyError:\n        msg = 'User not found: \"{0}\"'.format(user)\n        if is_console_configured():\n            log.critical(msg)\n        else:\n            sys.stderr.write(\"CRITICAL: {0}\\n\".format(msg))\n        return False\n    return True\n\n\ndef list_path_traversal(path):\n    '''\n    Returns a full list of directories leading up to, and including, a path.\n\n    So list_path_traversal('/path/to/salt') would return:\n        ['/', '/path', '/path/to', '/path/to/salt']\n    in that order.\n\n    This routine has been tested on Windows systems as well.\n    list_path_traversal('c:\\\\path\\\\to\\\\salt') on Windows would return:\n        ['c:\\\\', 'c:\\\\path', 'c:\\\\path\\\\to', 'c:\\\\path\\\\to\\\\salt']\n    '''\n    out = [path]\n    (head, tail) = os.path.split(path)\n    if tail == '':\n        # paths with trailing separators will return an empty string\n        out = [head]\n        (head, tail) = os.path.split(head)\n    while head != out[0]:\n        # loop until head is the same two consecutive times\n        out.insert(0, head)\n        (head, tail) = os.path.split(head)\n    return out\n\n\ndef check_path_traversal(path, user='root', skip_perm_errors=False):\n    '''\n    Walk from the root up to a directory and verify that the current\n    user has access to read each directory. This is used for  making\n    sure a user can read all parent directories of the minion's  key\n    before trying to go and generate a new key and raising an IOError\n    '''\n    for tpath in list_path_traversal(path):\n        if not os.access(tpath, os.R_OK):\n            msg = 'Could not access {0}.'.format(tpath)\n            if not os.path.exists(tpath):\n                msg += ' Path does not exist.'\n            else:\n                current_user = salt.utils.get_user()\n                # Make the error message more intelligent based on how\n                # the user invokes salt-call or whatever other script.\n                if user != current_user:\n                    msg += ' Try running as user {0}.'.format(user)\n                else:\n                    msg += ' Please give {0} read permissions.'.format(user)\n\n            # We don't need to bail on config file permission errors\n            # if the CLI\n            # process is run with the -a flag\n            if skip_perm_errors:\n                return\n            # Propagate this exception up so there isn't a sys.exit()\n            # in the middle of code that could be imported elsewhere.\n            raise SaltClientError(msg)\n\n\ndef check_max_open_files(opts):\n    '''\n    Check the number of max allowed open files and adjust if needed\n    '''\n    mof_c = opts.get('max_open_files', 100000)\n    if sys.platform.startswith('win'):\n        # Check the Windows API for more detail on this\n        # http://msdn.microsoft.com/en-us/library/xt874334(v=vs.71).aspx\n        # and the python binding http://timgolden.me.uk/pywin32-docs/win32file.html\n        mof_s = mof_h = win32file._getmaxstdio()\n    else:\n        mof_s, mof_h = resource.getrlimit(resource.RLIMIT_NOFILE)\n\n    accepted_keys_dir = os.path.join(opts.get('pki_dir'), 'minions')\n    accepted_count = len(os.listdir(accepted_keys_dir))\n\n    log.debug(\n        'This salt-master instance has accepted {0} minion keys.'.format(\n            accepted_count\n        )\n    )\n\n    level = logging.INFO\n\n    if (accepted_count * 4) <= mof_s:\n        # We check for the soft value of max open files here because that's the\n        # value the user chose to raise to.\n        #\n        # The number of accepted keys multiplied by four(4) is lower than the\n        # soft value, everything should be OK\n        return\n\n    msg = (\n        'The number of accepted minion keys({0}) should be lower than 1/4 '\n        'of the max open files soft setting({1}). '.format(\n            accepted_count, mof_s\n        )\n    )\n\n    if accepted_count >= mof_s:\n        # This should never occur, it might have already crashed\n        msg += 'salt-master will crash pretty soon! '\n        level = logging.CRITICAL\n    elif (accepted_count * 2) >= mof_s:\n        # This is way too low, CRITICAL\n        level = logging.CRITICAL\n    elif (accepted_count * 3) >= mof_s:\n        level = logging.WARNING\n        # The accepted count is more than 3 time, WARN\n    elif (accepted_count * 4) >= mof_s:\n        level = logging.INFO\n\n    if mof_c < mof_h:\n        msg += ('According to the system\\'s hard limit, there\\'s still a '\n                'margin of {0} to raise the salt\\'s max_open_files '\n                'setting. ').format(mof_h - mof_c)\n\n    msg += 'Please consider raising this value.'\n    log.log(level=level, msg=msg)\n\n\ndef clean_path(root, path, subdir=False):\n    '''\n    Accepts the root the path needs to be under and verifies that the path is\n    under said root. Pass in subdir=True if the path can result in a\n    subdirectory of the root instead of having to reside directly in the root\n    '''\n    if not os.path.isabs(root):\n        return ''\n    if not os.path.isabs(path):\n        path = os.path.join(root, path)\n    path = os.path.normpath(path)\n    if subdir:\n        if path.startswith(root):\n            return path\n    else:\n        if os.path.dirname(path) == os.path.normpath(root):\n            return path\n    return ''\n\n\ndef clean_id(id_):\n    '''\n    Returns if the passed id is clean.\n    '''\n    if re.search(r'\\.\\.\\{sep}'.format(sep=os.sep), id_):\n        return False\n    return True\n\n\ndef valid_id(opts, id_):\n    '''\n    Returns if the passed id is valid\n    '''\n    try:\n        return bool(clean_path(opts['pki_dir'], id_)) and clean_id(id_)\n    except (AttributeError, KeyError, TypeError) as e:\n        return False\n\n\ndef safe_py_code(code):\n    '''\n    Check a string to see if it has any potentially unsafe routines which\n    could be executed via python, this routine is used to improve the\n    safety of modules suct as virtualenv\n    '''\n    bads = (\n            'import',\n            ';',\n            'subprocess',\n            'eval',\n            'open',\n            'file',\n            'exec',\n            'input')\n    for bad in bads:\n        if code.count(bad):\n            return False\n    return True\n\n\ndef verify_log(opts):\n    '''\n    If an insecre logging configuration is found, show a warning\n    '''\n    level = LOG_LEVELS.get(str(opts.get('log_level')).lower(), logging.NOTSET)\n\n    if level < logging.INFO:\n        log.warning('Insecure logging configuration detected! Sensitive data may be logged.')\n\n\ndef win_verify_env(dirs, permissive=False, pki_dir='', skip_extra=False):\n    '''\n    Verify that the named directories are in place and that the environment\n    can shake the salt\n    '''\n    import salt.utils.win_functions\n    import salt.utils.win_dacl\n\n    # Get the root path directory where salt is installed\n    path = dirs[0]\n    while os.path.basename(path) not in ['salt', 'salt-tests-tmpdir']:\n        path, base = os.path.split(path)\n\n    # Create the root path directory if missing\n    if not os.path.isdir(path):\n        os.makedirs(path)\n\n    # Set permissions to the root path directory\n    current_user = salt.utils.win_functions.get_current_user()\n    if salt.utils.win_functions.is_admin(current_user):\n        try:\n            # Make the Administrators group owner\n            # Use the SID to be locale agnostic\n            salt.utils.win_dacl.set_owner(path, 'S-1-5-32-544')\n\n        except CommandExecutionError:\n            msg = 'Unable to securely set the owner of \"{0}\".'.format(path)\n            if is_console_configured():\n                log.critical(msg)\n            else:\n                sys.stderr.write(\"CRITICAL: {0}\\n\".format(msg))\n\n        if not permissive:\n            try:\n                # Get a clean dacl by not passing an obj_name\n                dacl = salt.utils.win_dacl.dacl()\n\n                # Add aces to the dacl, use the GUID (locale non-specific)\n                # Administrators Group\n                dacl.add_ace('S-1-5-32-544', 'grant', 'full_control',\n                             'this_folder_subfolders_files')\n                # System\n                dacl.add_ace('S-1-5-18', 'grant', 'full_control',\n                             'this_folder_subfolders_files')\n                # Owner\n                dacl.add_ace('S-1-3-4', 'grant', 'full_control',\n                             'this_folder_subfolders_files')\n\n                # Save the dacl to the object\n                dacl.save(path, True)\n\n            except CommandExecutionError:\n                msg = 'Unable to securely set the permissions of ' \\\n                      '\"{0}\".'.format(path)\n                if is_console_configured():\n                    log.critical(msg)\n                else:\n                    sys.stderr.write(\"CRITICAL: {0}\\n\".format(msg))\n\n    # Create the directories\n    for dir_ in dirs:\n        if not dir_:\n            continue\n        if not os.path.isdir(dir_):\n            try:\n                os.makedirs(dir_)\n            except OSError as err:\n                msg = 'Failed to create directory path \"{0}\" - {1}\\n'\n                sys.stderr.write(msg.format(dir_, err))\n                sys.exit(err.errno)\n\n        # The PKI dir gets its own permissions\n        if dir_ == pki_dir:\n            try:\n                # Make Administrators group the owner\n                salt.utils.win_dacl.set_owner(path, 'S-1-5-32-544')\n\n                # Give Admins, System and Owner permissions\n                # Get a clean dacl by not passing an obj_name\n                dacl = salt.utils.win_dacl.dacl()\n\n                # Add aces to the dacl, use the GUID (locale non-specific)\n                # Administrators Group\n                dacl.add_ace('S-1-5-32-544', 'grant', 'full_control',\n                             'this_folder_subfolders_files')\n                # System\n                dacl.add_ace('S-1-5-18', 'grant', 'full_control',\n                             'this_folder_subfolders_files')\n                # Owner\n                dacl.add_ace('S-1-3-4', 'grant', 'full_control',\n                             'this_folder_subfolders_files')\n\n                # Save the dacl to the object\n                dacl.save(dir_, True)\n\n            except CommandExecutionError:\n                msg = 'Unable to securely set the permissions of \"{0}\".'\n                msg = msg.format(dir_)\n                if is_console_configured():\n                    log.critical(msg)\n                else:\n                    sys.stderr.write(\"CRITICAL: {0}\\n\".format(msg))\n\n    if skip_extra is False:\n        # Run the extra verification checks\n        zmq_version()\n", "# -*- coding: utf-8 -*-\n'''\nTest the verification routines\n'''\n\n# Import Python libs\nfrom __future__ import absolute_import\nimport getpass\nimport os\nimport sys\nimport stat\nimport shutil\nimport resource\nimport tempfile\nimport socket\n\n# Import Salt Testing libs\nfrom tests.support.unit import skipIf, TestCase\nfrom tests.support.paths import TMP\nfrom tests.support.helpers import (\n    requires_network,\n    TestsLoggingHandler\n)\nfrom tests.support.mock import (\n    MagicMock,\n    patch,\n    NO_MOCK,\n    NO_MOCK_REASON\n)\n\n# Import salt libs\nimport salt.utils\nfrom salt.utils.verify import (\n    check_user,\n    verify_env,\n    verify_socket,\n    zmq_version,\n    check_max_open_files,\n    valid_id,\n    log,\n    verify_log,\n)\n\n# Import 3rd-party libs\nfrom salt.ext.six.moves import range  # pylint: disable=import-error,redefined-builtin\n\n\nclass TestVerify(TestCase):\n    '''\n    Verify module tests\n    '''\n\n    def test_valid_id_exception_handler(self):\n        '''\n        Ensure we just return False if we pass in invalid or undefined paths.\n        Refs #8259\n        '''\n        opts = {'pki_dir': '/tmp/whatever'}\n        self.assertFalse(valid_id(opts, None))\n\n    def test_zmq_verify(self):\n        self.assertTrue(zmq_version())\n\n    def test_zmq_verify_insufficient(self):\n        import zmq\n        with patch.object(zmq, '__version__', '2.1.0'):\n            self.assertFalse(zmq_version())\n\n    def test_user(self):\n        self.assertTrue(check_user(getpass.getuser()))\n\n    def test_no_user(self):\n        # Catch sys.stderr here since no logging is configured and\n        # check_user WILL write to sys.stderr\n        class FakeWriter(object):\n            def __init__(self):\n                self.output = \"\"\n\n            def write(self, data):\n                self.output += data\n        stderr = sys.stderr\n        writer = FakeWriter()\n        sys.stderr = writer\n        # Now run the test\n        self.assertFalse(check_user('nouser'))\n        # Restore sys.stderr\n        sys.stderr = stderr\n        if writer.output != 'CRITICAL: User not found: \"nouser\"\\n':\n            # If there's a different error catch, write it to sys.stderr\n            sys.stderr.write(writer.output)\n\n    @skipIf(sys.platform.startswith('win'), 'No verify_env Windows')\n    def test_verify_env(self):\n        root_dir = tempfile.mkdtemp(dir=TMP)\n        var_dir = os.path.join(root_dir, 'var', 'log', 'salt')\n        verify_env([var_dir], getpass.getuser())\n        self.assertTrue(os.path.exists(var_dir))\n        dir_stat = os.stat(var_dir)\n        self.assertEqual(dir_stat.st_uid, os.getuid())\n        self.assertEqual(dir_stat.st_mode & stat.S_IRWXU, stat.S_IRWXU)\n        self.assertEqual(dir_stat.st_mode & stat.S_IRWXG, 40)\n        self.assertEqual(dir_stat.st_mode & stat.S_IRWXO, 5)\n\n    @requires_network(only_local_network=True)\n    def test_verify_socket(self):\n        self.assertTrue(verify_socket('', 18000, 18001))\n        if socket.has_ipv6:\n            # Only run if Python is built with IPv6 support; otherwise\n            # this will just fail.\n            try:\n                self.assertTrue(verify_socket('::', 18000, 18001))\n            except socket.error as serr:\n                # Python has IPv6 enabled, but the system cannot create\n                # IPv6 sockets (otherwise the test would return a bool)\n                # - skip the test\n                #\n                # FIXME - possibly emit a message that the system does\n                # not support IPv6.\n                pass\n\n    @skipIf(True, 'Skipping until we can find why Jenkins is bailing out')\n    def test_max_open_files(self):\n        with TestsLoggingHandler() as handler:\n            logmsg_dbg = (\n                'DEBUG:This salt-master instance has accepted {0} minion keys.'\n            )\n            logmsg_chk = (\n                '{0}:The number of accepted minion keys({1}) should be lower '\n                'than 1/4 of the max open files soft setting({2}). According '\n                'to the system\\'s hard limit, there\\'s still a margin of {3} '\n                'to raise the salt\\'s max_open_files setting. Please consider '\n                'raising this value.'\n            )\n            logmsg_crash = (\n                '{0}:The number of accepted minion keys({1}) should be lower '\n                'than 1/4 of the max open files soft setting({2}). '\n                'salt-master will crash pretty soon! According to the '\n                'system\\'s hard limit, there\\'s still a margin of {3} to '\n                'raise the salt\\'s max_open_files setting. Please consider '\n                'raising this value.'\n            )\n\n            mof_s, mof_h = resource.getrlimit(resource.RLIMIT_NOFILE)\n            tempdir = tempfile.mkdtemp(prefix='fake-keys')\n            keys_dir = os.path.join(tempdir, 'minions')\n            os.makedirs(keys_dir)\n\n            mof_test = 256\n\n            resource.setrlimit(resource.RLIMIT_NOFILE, (mof_test, mof_h))\n\n            try:\n                prev = 0\n                for newmax, level in ((24, None), (66, 'INFO'),\n                                      (127, 'WARNING'), (196, 'CRITICAL')):\n\n                    for n in range(prev, newmax):\n                        kpath = os.path.join(keys_dir, str(n))\n                        with salt.utils.fopen(kpath, 'w') as fp_:\n                            fp_.write(str(n))\n\n                    opts = {\n                        'max_open_files': newmax,\n                        'pki_dir': tempdir\n                    }\n\n                    check_max_open_files(opts)\n\n                    if level is None:\n                        # No log message is triggered, only the DEBUG one which\n                        # tells us how many minion keys were accepted.\n                        self.assertEqual(\n                            [logmsg_dbg.format(newmax)], handler.messages\n                        )\n                    else:\n                        self.assertIn(\n                            logmsg_dbg.format(newmax), handler.messages\n                        )\n                        self.assertIn(\n                            logmsg_chk.format(\n                                level,\n                                newmax,\n                                mof_test,\n                                mof_h - newmax,\n                            ),\n                            handler.messages\n                        )\n                    handler.clear()\n                    prev = newmax\n\n                newmax = mof_test\n                for n in range(prev, newmax):\n                    kpath = os.path.join(keys_dir, str(n))\n                    with salt.utils.fopen(kpath, 'w') as fp_:\n                        fp_.write(str(n))\n\n                opts = {\n                    'max_open_files': newmax,\n                    'pki_dir': tempdir\n                }\n\n                check_max_open_files(opts)\n                self.assertIn(logmsg_dbg.format(newmax), handler.messages)\n                self.assertIn(\n                    logmsg_crash.format(\n                        'CRITICAL',\n                        newmax,\n                        mof_test,\n                        mof_h - newmax,\n                    ),\n                    handler.messages\n                )\n                handler.clear()\n            except IOError as err:\n                if err.errno == 24:\n                    # Too many open files\n                    self.skipTest('We\\'ve hit the max open files setting')\n                raise\n            finally:\n                shutil.rmtree(tempdir)\n                resource.setrlimit(resource.RLIMIT_NOFILE, (mof_s, mof_h))\n\n    @skipIf(NO_MOCK, NO_MOCK_REASON)\n    def test_verify_log(self):\n        '''\n        Test that verify_log works as expected\n        '''\n        message = 'Insecure logging configuration detected! Sensitive data may be logged.'\n\n        mock_cheese = MagicMock()\n        with patch.object(log, 'warning', mock_cheese):\n            verify_log({'log_level': 'cheeseshop'})\n            mock_cheese.assert_called_once_with(message)\n\n        mock_trace = MagicMock()\n        with patch.object(log, 'warning', mock_trace):\n            verify_log({'log_level': 'trace'})\n            mock_trace.assert_called_once_with(message)\n\n        mock_none = MagicMock()\n        with patch.object(log, 'warning', mock_none):\n            verify_log({})\n            mock_none.assert_called_once_with(message)\n\n        mock_info = MagicMock()\n        with patch.object(log, 'warning', mock_info):\n            verify_log({'log_level': 'info'})\n            self.assertTrue(mock_info.call_count == 0)\n"], "fixing_code": ["# -*- coding: utf-8 -*-\n'''\nA few checks to make sure the environment is sane\n'''\nfrom __future__ import absolute_import\n\n# Original Author: Jeff Schroeder <jeffschroeder@computer.org>\n\n# Import python libs\nimport os\nimport re\nimport sys\nimport stat\nimport errno\nimport socket\nimport logging\n\n# Import third party libs\ntry:\n    import win32file\nexcept ImportError:\n    import resource\n\n# Import salt libs\nfrom salt.log import is_console_configured\nfrom salt.log.setup import LOG_LEVELS\nfrom salt.exceptions import SaltClientError, SaltSystemExit, \\\n    CommandExecutionError\nimport salt.defaults.exitcodes\nimport salt.utils\n\nlog = logging.getLogger(__name__)\n\n\ndef zmq_version():\n    '''\n    ZeroMQ python bindings >= 2.1.9 are required\n    '''\n    try:\n        import zmq\n    except Exception:\n        # Return True for local mode\n        return True\n    ver = zmq.__version__\n    # The last matched group can be None if the version\n    # is something like 3.1 and that will work properly\n    match = re.match(r'^(\\d+)\\.(\\d+)(?:\\.(\\d+))?', ver)\n\n    # Fallthrough and hope for the best\n    if not match:\n        msg = \"Using untested zmq python bindings version: '{0}'\".format(ver)\n        if is_console_configured():\n            log.warning(msg)\n        else:\n            sys.stderr.write(\"WARNING {0}\\n\".format(msg))\n        return True\n\n    major, minor, point = match.groups()\n\n    if major.isdigit():\n        major = int(major)\n    if minor.isdigit():\n        minor = int(minor)\n\n    # point very well could be None\n    if point and point.isdigit():\n        point = int(point)\n\n    if major == 2 and minor == 1:\n        # zmq 2.1dev could be built against a newer libzmq\n        if \"dev\" in ver and not point:\n            msg = 'Using dev zmq module, please report unexpected results'\n            if is_console_configured():\n                log.warning(msg)\n            else:\n                sys.stderr.write(\"WARNING: {0}\\n\".format(msg))\n            return True\n        elif point and point >= 9:\n            return True\n    elif major > 2 or (major == 2 and minor > 1):\n        return True\n\n    # If all else fails, gracefully croak and warn the user\n    log.critical('ZeroMQ python bindings >= 2.1.9 are required')\n    if 'salt-master' in sys.argv[0]:\n        msg = ('The Salt Master is unstable using a ZeroMQ version '\n               'lower than 2.1.11 and requires this fix: http://lists.zeromq.'\n               'org/pipermail/zeromq-dev/2011-June/012094.html')\n        if is_console_configured():\n            log.critical(msg)\n        else:\n            sys.stderr.write('CRITICAL {0}\\n'.format(msg))\n    return False\n\n\ndef lookup_family(hostname):\n    '''\n    Lookup a hostname and determine its address family. The first address returned\n    will be AF_INET6 if the system is IPv6-enabled, and AF_INET otherwise.\n    '''\n    # If lookups fail, fall back to AF_INET sockets (and v4 addresses).\n    fallback = socket.AF_INET\n    try:\n        hostnames = socket.getaddrinfo(\n            hostname or None, None, socket.AF_UNSPEC, socket.SOCK_STREAM\n        )\n        if not hostnames:\n            return fallback\n        h = hostnames[0]\n        return h[0]\n    except socket.gaierror:\n        return fallback\n\n\ndef verify_socket(interface, pub_port, ret_port):\n    '''\n    Attempt to bind to the sockets to verify that they are available\n    '''\n\n    addr_family = lookup_family(interface)\n    for port in pub_port, ret_port:\n        sock = socket.socket(addr_family, socket.SOCK_STREAM)\n        try:\n            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            sock.bind((interface, int(port)))\n        except Exception as exc:\n            msg = 'Unable to bind socket {0}:{1}'.format(interface, port)\n            if exc.args:\n                msg = '{0}, error: {1}'.format(msg, str(exc))\n            else:\n                msg = '{0}, this might not be a problem.'.format(msg)\n            msg += '; Is there another salt-master running?'\n            if is_console_configured():\n                log.warning(msg)\n            else:\n                sys.stderr.write('WARNING: {0}\\n'.format(msg))\n            return False\n        finally:\n            sock.close()\n\n    return True\n\n\ndef verify_files(files, user):\n    '''\n    Verify that the named files exist and are owned by the named user\n    '''\n    if salt.utils.is_windows():\n        return True\n    import pwd  # after confirming not running Windows\n    try:\n        pwnam = pwd.getpwnam(user)\n        uid = pwnam[2]\n    except KeyError:\n        err = ('Failed to prepare the Salt environment for user '\n               '{0}. The user is not available.\\n').format(user)\n        sys.stderr.write(err)\n        sys.exit(salt.defaults.exitcodes.EX_NOUSER)\n\n    for fn_ in files:\n        dirname = os.path.dirname(fn_)\n        try:\n            if dirname:\n                try:\n                    os.makedirs(dirname)\n                except OSError as err:\n                    if err.errno != errno.EEXIST:\n                        raise\n            if not os.path.isfile(fn_):\n                with salt.utils.fopen(fn_, 'w+') as fp_:\n                    fp_.write('')\n\n        except IOError as err:\n            if os.path.isfile(dirname):\n                msg = 'Failed to create path {0}, is {1} a file?'.format(fn_, dirname)\n                raise SaltSystemExit(msg=msg)\n            if err.errno != errno.EACCES:\n                raise\n            msg = 'No permissions to access \"{0}\", are you running as the correct user?'.format(fn_)\n            raise SaltSystemExit(msg=msg)\n\n        except OSError as err:\n            msg = 'Failed to create path \"{0}\" - {1}'.format(fn_, err)\n            raise SaltSystemExit(msg=msg)\n\n        stats = os.stat(fn_)\n        if uid != stats.st_uid:\n            try:\n                os.chown(fn_, uid, -1)\n            except OSError:\n                pass\n    return True\n\n\ndef verify_env(dirs, user, permissive=False, pki_dir='', skip_extra=False):\n    '''\n    Verify that the named directories are in place and that the environment\n    can shake the salt\n    '''\n    if salt.utils.is_windows():\n        return win_verify_env(dirs, permissive, pki_dir, skip_extra)\n    import pwd  # after confirming not running Windows\n    try:\n        pwnam = pwd.getpwnam(user)\n        uid = pwnam[2]\n        gid = pwnam[3]\n        groups = salt.utils.get_gid_list(user, include_default=False)\n\n    except KeyError:\n        err = ('Failed to prepare the Salt environment for user '\n               '{0}. The user is not available.\\n').format(user)\n        sys.stderr.write(err)\n        sys.exit(salt.defaults.exitcodes.EX_NOUSER)\n    for dir_ in dirs:\n        if not dir_:\n            continue\n        if not os.path.isdir(dir_):\n            try:\n                cumask = os.umask(18)  # 077\n                os.makedirs(dir_)\n                # If starting the process as root, chown the new dirs\n                if os.getuid() == 0:\n                    os.chown(dir_, uid, gid)\n                os.umask(cumask)\n            except OSError as err:\n                msg = 'Failed to create directory path \"{0}\" - {1}\\n'\n                sys.stderr.write(msg.format(dir_, err))\n                sys.exit(err.errno)\n\n        mode = os.stat(dir_)\n        # If starting the process as root, chown the new dirs\n        if os.getuid() == 0:\n            fmode = os.stat(dir_)\n            if fmode.st_uid != uid or fmode.st_gid != gid:\n                if permissive and fmode.st_gid in groups:\n                    # Allow the directory to be owned by any group root\n                    # belongs to if we say it's ok to be permissive\n                    pass\n                else:\n                    # chown the file for the new user\n                    os.chown(dir_, uid, gid)\n            for subdir in [a for a in os.listdir(dir_) if 'jobs' not in a]:\n                fsubdir = os.path.join(dir_, subdir)\n                if '{0}jobs'.format(os.path.sep) in fsubdir:\n                    continue\n                for root, dirs, files in os.walk(fsubdir):\n                    for name in files:\n                        if name.startswith('.'):\n                            continue\n                        path = os.path.join(root, name)\n                        try:\n                            fmode = os.stat(path)\n                        except (IOError, OSError):\n                            pass\n                        if fmode.st_uid != uid or fmode.st_gid != gid:\n                            if permissive and fmode.st_gid in groups:\n                                pass\n                            else:\n                                # chown the file for the new user\n                                os.chown(path, uid, gid)\n                    for name in dirs:\n                        path = os.path.join(root, name)\n                        fmode = os.stat(path)\n                        if fmode.st_uid != uid or fmode.st_gid != gid:\n                            if permissive and fmode.st_gid in groups:\n                                pass\n                            else:\n                                # chown the file for the new user\n                                os.chown(path, uid, gid)\n        # Allow the pki dir to be 700 or 750, but nothing else.\n        # This prevents other users from writing out keys, while\n        # allowing the use-case of 3rd-party software (like django)\n        # to read in what it needs to integrate.\n        #\n        # If the permissions aren't correct, default to the more secure 700.\n        # If acls are enabled, the pki_dir needs to remain readable, this\n        # is still secure because the private keys are still only readable\n        # by the user running the master\n        if dir_ == pki_dir:\n            smode = stat.S_IMODE(mode.st_mode)\n            if smode != 448 and smode != 488:\n                if os.access(dir_, os.W_OK):\n                    os.chmod(dir_, 448)\n                else:\n                    msg = 'Unable to securely set the permissions of \"{0}\".'\n                    msg = msg.format(dir_)\n                    if is_console_configured():\n                        log.critical(msg)\n                    else:\n                        sys.stderr.write(\"CRITICAL: {0}\\n\".format(msg))\n\n    if skip_extra is False:\n        # Run the extra verification checks\n        zmq_version()\n\n\ndef check_user(user):\n    '''\n    Check user and assign process uid/gid.\n    '''\n    if salt.utils.is_windows():\n        return True\n    if user == salt.utils.get_user():\n        return True\n    import pwd  # after confirming not running Windows\n    try:\n        pwuser = pwd.getpwnam(user)\n        try:\n            if hasattr(os, 'initgroups'):\n                os.initgroups(user, pwuser.pw_gid)  # pylint: disable=minimum-python-version\n            else:\n                os.setgroups(salt.utils.get_gid_list(user, include_default=False))\n            os.setgid(pwuser.pw_gid)\n            os.setuid(pwuser.pw_uid)\n\n            # We could just reset the whole environment but let's just override\n            # the variables we can get from pwuser\n            if 'HOME' in os.environ:\n                os.environ['HOME'] = pwuser.pw_dir\n\n            if 'SHELL' in os.environ:\n                os.environ['SHELL'] = pwuser.pw_shell\n\n            for envvar in ('USER', 'LOGNAME'):\n                if envvar in os.environ:\n                    os.environ[envvar] = pwuser.pw_name\n\n        except OSError:\n            msg = 'Salt configured to run as user \"{0}\" but unable to switch.'\n            msg = msg.format(user)\n            if is_console_configured():\n                log.critical(msg)\n            else:\n                sys.stderr.write(\"CRITICAL: {0}\\n\".format(msg))\n            return False\n    except KeyError:\n        msg = 'User not found: \"{0}\"'.format(user)\n        if is_console_configured():\n            log.critical(msg)\n        else:\n            sys.stderr.write(\"CRITICAL: {0}\\n\".format(msg))\n        return False\n    return True\n\n\ndef list_path_traversal(path):\n    '''\n    Returns a full list of directories leading up to, and including, a path.\n\n    So list_path_traversal('/path/to/salt') would return:\n        ['/', '/path', '/path/to', '/path/to/salt']\n    in that order.\n\n    This routine has been tested on Windows systems as well.\n    list_path_traversal('c:\\\\path\\\\to\\\\salt') on Windows would return:\n        ['c:\\\\', 'c:\\\\path', 'c:\\\\path\\\\to', 'c:\\\\path\\\\to\\\\salt']\n    '''\n    out = [path]\n    (head, tail) = os.path.split(path)\n    if tail == '':\n        # paths with trailing separators will return an empty string\n        out = [head]\n        (head, tail) = os.path.split(head)\n    while head != out[0]:\n        # loop until head is the same two consecutive times\n        out.insert(0, head)\n        (head, tail) = os.path.split(head)\n    return out\n\n\ndef check_path_traversal(path, user='root', skip_perm_errors=False):\n    '''\n    Walk from the root up to a directory and verify that the current\n    user has access to read each directory. This is used for  making\n    sure a user can read all parent directories of the minion's  key\n    before trying to go and generate a new key and raising an IOError\n    '''\n    for tpath in list_path_traversal(path):\n        if not os.access(tpath, os.R_OK):\n            msg = 'Could not access {0}.'.format(tpath)\n            if not os.path.exists(tpath):\n                msg += ' Path does not exist.'\n            else:\n                current_user = salt.utils.get_user()\n                # Make the error message more intelligent based on how\n                # the user invokes salt-call or whatever other script.\n                if user != current_user:\n                    msg += ' Try running as user {0}.'.format(user)\n                else:\n                    msg += ' Please give {0} read permissions.'.format(user)\n\n            # We don't need to bail on config file permission errors\n            # if the CLI\n            # process is run with the -a flag\n            if skip_perm_errors:\n                return\n            # Propagate this exception up so there isn't a sys.exit()\n            # in the middle of code that could be imported elsewhere.\n            raise SaltClientError(msg)\n\n\ndef check_max_open_files(opts):\n    '''\n    Check the number of max allowed open files and adjust if needed\n    '''\n    mof_c = opts.get('max_open_files', 100000)\n    if sys.platform.startswith('win'):\n        # Check the Windows API for more detail on this\n        # http://msdn.microsoft.com/en-us/library/xt874334(v=vs.71).aspx\n        # and the python binding http://timgolden.me.uk/pywin32-docs/win32file.html\n        mof_s = mof_h = win32file._getmaxstdio()\n    else:\n        mof_s, mof_h = resource.getrlimit(resource.RLIMIT_NOFILE)\n\n    accepted_keys_dir = os.path.join(opts.get('pki_dir'), 'minions')\n    accepted_count = len(os.listdir(accepted_keys_dir))\n\n    log.debug(\n        'This salt-master instance has accepted {0} minion keys.'.format(\n            accepted_count\n        )\n    )\n\n    level = logging.INFO\n\n    if (accepted_count * 4) <= mof_s:\n        # We check for the soft value of max open files here because that's the\n        # value the user chose to raise to.\n        #\n        # The number of accepted keys multiplied by four(4) is lower than the\n        # soft value, everything should be OK\n        return\n\n    msg = (\n        'The number of accepted minion keys({0}) should be lower than 1/4 '\n        'of the max open files soft setting({1}). '.format(\n            accepted_count, mof_s\n        )\n    )\n\n    if accepted_count >= mof_s:\n        # This should never occur, it might have already crashed\n        msg += 'salt-master will crash pretty soon! '\n        level = logging.CRITICAL\n    elif (accepted_count * 2) >= mof_s:\n        # This is way too low, CRITICAL\n        level = logging.CRITICAL\n    elif (accepted_count * 3) >= mof_s:\n        level = logging.WARNING\n        # The accepted count is more than 3 time, WARN\n    elif (accepted_count * 4) >= mof_s:\n        level = logging.INFO\n\n    if mof_c < mof_h:\n        msg += ('According to the system\\'s hard limit, there\\'s still a '\n                'margin of {0} to raise the salt\\'s max_open_files '\n                'setting. ').format(mof_h - mof_c)\n\n    msg += 'Please consider raising this value.'\n    log.log(level=level, msg=msg)\n\n\ndef clean_path(root, path, subdir=False):\n    '''\n    Accepts the root the path needs to be under and verifies that the path is\n    under said root. Pass in subdir=True if the path can result in a\n    subdirectory of the root instead of having to reside directly in the root\n    '''\n    if not os.path.isabs(root):\n        return ''\n    if not os.path.isabs(path):\n        path = os.path.join(root, path)\n    path = os.path.normpath(path)\n    if subdir:\n        if path.startswith(root):\n            return path\n    else:\n        if os.path.dirname(path) == os.path.normpath(root):\n            return path\n    return ''\n\n\ndef valid_id(opts, id_):\n    '''\n    Returns if the passed id is valid\n    '''\n    try:\n        if any(x in id_ for x in ('/', '\\\\', '\\0')):\n            return False\n        return bool(clean_path(opts['pki_dir'], id_))\n    except (AttributeError, KeyError, TypeError):\n        return False\n\n\ndef safe_py_code(code):\n    '''\n    Check a string to see if it has any potentially unsafe routines which\n    could be executed via python, this routine is used to improve the\n    safety of modules suct as virtualenv\n    '''\n    bads = (\n            'import',\n            ';',\n            'subprocess',\n            'eval',\n            'open',\n            'file',\n            'exec',\n            'input')\n    for bad in bads:\n        if code.count(bad):\n            return False\n    return True\n\n\ndef verify_log(opts):\n    '''\n    If an insecre logging configuration is found, show a warning\n    '''\n    level = LOG_LEVELS.get(str(opts.get('log_level')).lower(), logging.NOTSET)\n\n    if level < logging.INFO:\n        log.warning('Insecure logging configuration detected! Sensitive data may be logged.')\n\n\ndef win_verify_env(dirs, permissive=False, pki_dir='', skip_extra=False):\n    '''\n    Verify that the named directories are in place and that the environment\n    can shake the salt\n    '''\n    import salt.utils.win_functions\n    import salt.utils.win_dacl\n\n    # Get the root path directory where salt is installed\n    path = dirs[0]\n    while os.path.basename(path) not in ['salt', 'salt-tests-tmpdir']:\n        path, base = os.path.split(path)\n\n    # Create the root path directory if missing\n    if not os.path.isdir(path):\n        os.makedirs(path)\n\n    # Set permissions to the root path directory\n    current_user = salt.utils.win_functions.get_current_user()\n    if salt.utils.win_functions.is_admin(current_user):\n        try:\n            # Make the Administrators group owner\n            # Use the SID to be locale agnostic\n            salt.utils.win_dacl.set_owner(path, 'S-1-5-32-544')\n\n        except CommandExecutionError:\n            msg = 'Unable to securely set the owner of \"{0}\".'.format(path)\n            if is_console_configured():\n                log.critical(msg)\n            else:\n                sys.stderr.write(\"CRITICAL: {0}\\n\".format(msg))\n\n        if not permissive:\n            try:\n                # Get a clean dacl by not passing an obj_name\n                dacl = salt.utils.win_dacl.dacl()\n\n                # Add aces to the dacl, use the GUID (locale non-specific)\n                # Administrators Group\n                dacl.add_ace('S-1-5-32-544', 'grant', 'full_control',\n                             'this_folder_subfolders_files')\n                # System\n                dacl.add_ace('S-1-5-18', 'grant', 'full_control',\n                             'this_folder_subfolders_files')\n                # Owner\n                dacl.add_ace('S-1-3-4', 'grant', 'full_control',\n                             'this_folder_subfolders_files')\n\n                # Save the dacl to the object\n                dacl.save(path, True)\n\n            except CommandExecutionError:\n                msg = 'Unable to securely set the permissions of ' \\\n                      '\"{0}\".'.format(path)\n                if is_console_configured():\n                    log.critical(msg)\n                else:\n                    sys.stderr.write(\"CRITICAL: {0}\\n\".format(msg))\n\n    # Create the directories\n    for dir_ in dirs:\n        if not dir_:\n            continue\n        if not os.path.isdir(dir_):\n            try:\n                os.makedirs(dir_)\n            except OSError as err:\n                msg = 'Failed to create directory path \"{0}\" - {1}\\n'\n                sys.stderr.write(msg.format(dir_, err))\n                sys.exit(err.errno)\n\n        # The PKI dir gets its own permissions\n        if dir_ == pki_dir:\n            try:\n                # Make Administrators group the owner\n                salt.utils.win_dacl.set_owner(path, 'S-1-5-32-544')\n\n                # Give Admins, System and Owner permissions\n                # Get a clean dacl by not passing an obj_name\n                dacl = salt.utils.win_dacl.dacl()\n\n                # Add aces to the dacl, use the GUID (locale non-specific)\n                # Administrators Group\n                dacl.add_ace('S-1-5-32-544', 'grant', 'full_control',\n                             'this_folder_subfolders_files')\n                # System\n                dacl.add_ace('S-1-5-18', 'grant', 'full_control',\n                             'this_folder_subfolders_files')\n                # Owner\n                dacl.add_ace('S-1-3-4', 'grant', 'full_control',\n                             'this_folder_subfolders_files')\n\n                # Save the dacl to the object\n                dacl.save(dir_, True)\n\n            except CommandExecutionError:\n                msg = 'Unable to securely set the permissions of \"{0}\".'\n                msg = msg.format(dir_)\n                if is_console_configured():\n                    log.critical(msg)\n                else:\n                    sys.stderr.write(\"CRITICAL: {0}\\n\".format(msg))\n\n    if skip_extra is False:\n        # Run the extra verification checks\n        zmq_version()\n", "# -*- coding: utf-8 -*-\n'''\nTest the verification routines\n'''\n\n# Import Python libs\nfrom __future__ import absolute_import\nimport getpass\nimport os\nimport sys\nimport stat\nimport shutil\nimport resource\nimport tempfile\nimport socket\n\n# Import Salt Testing libs\nfrom tests.support.unit import skipIf, TestCase\nfrom tests.support.paths import TMP\nfrom tests.support.helpers import (\n    requires_network,\n    TestsLoggingHandler\n)\nfrom tests.support.mock import (\n    MagicMock,\n    patch,\n    NO_MOCK,\n    NO_MOCK_REASON\n)\n\n# Import salt libs\nimport salt.utils\nfrom salt.utils.verify import (\n    check_user,\n    verify_env,\n    verify_socket,\n    zmq_version,\n    check_max_open_files,\n    valid_id,\n    log,\n    verify_log,\n)\n\n# Import 3rd-party libs\nfrom salt.ext.six.moves import range  # pylint: disable=import-error,redefined-builtin\n\n\nclass TestVerify(TestCase):\n    '''\n    Verify module tests\n    '''\n\n    def test_valid_id_exception_handler(self):\n        '''\n        Ensure we just return False if we pass in invalid or undefined paths.\n        Refs #8259\n        '''\n        opts = {'pki_dir': '/tmp/whatever'}\n        self.assertFalse(valid_id(opts, None))\n\n    def test_valid_id_pathsep(self):\n        '''\n        Path separators in id should make it invalid\n        '''\n        opts = {'pki_dir': '/tmp/whatever'}\n        # We have to test both path separators because os.path.normpath will\n        # convert forward slashes to backslashes on Windows.\n        for pathsep in ('/', '\\\\'):\n            self.assertFalse(valid_id(opts, pathsep.join(('..', 'foobar'))))\n\n    def test_zmq_verify(self):\n        self.assertTrue(zmq_version())\n\n    def test_zmq_verify_insufficient(self):\n        import zmq\n        with patch.object(zmq, '__version__', '2.1.0'):\n            self.assertFalse(zmq_version())\n\n    def test_user(self):\n        self.assertTrue(check_user(getpass.getuser()))\n\n    def test_no_user(self):\n        # Catch sys.stderr here since no logging is configured and\n        # check_user WILL write to sys.stderr\n        class FakeWriter(object):\n            def __init__(self):\n                self.output = \"\"\n\n            def write(self, data):\n                self.output += data\n        stderr = sys.stderr\n        writer = FakeWriter()\n        sys.stderr = writer\n        # Now run the test\n        self.assertFalse(check_user('nouser'))\n        # Restore sys.stderr\n        sys.stderr = stderr\n        if writer.output != 'CRITICAL: User not found: \"nouser\"\\n':\n            # If there's a different error catch, write it to sys.stderr\n            sys.stderr.write(writer.output)\n\n    @skipIf(sys.platform.startswith('win'), 'No verify_env Windows')\n    def test_verify_env(self):\n        root_dir = tempfile.mkdtemp(dir=TMP)\n        var_dir = os.path.join(root_dir, 'var', 'log', 'salt')\n        verify_env([var_dir], getpass.getuser())\n        self.assertTrue(os.path.exists(var_dir))\n        dir_stat = os.stat(var_dir)\n        self.assertEqual(dir_stat.st_uid, os.getuid())\n        self.assertEqual(dir_stat.st_mode & stat.S_IRWXU, stat.S_IRWXU)\n        self.assertEqual(dir_stat.st_mode & stat.S_IRWXG, 40)\n        self.assertEqual(dir_stat.st_mode & stat.S_IRWXO, 5)\n\n    @requires_network(only_local_network=True)\n    def test_verify_socket(self):\n        self.assertTrue(verify_socket('', 18000, 18001))\n        if socket.has_ipv6:\n            # Only run if Python is built with IPv6 support; otherwise\n            # this will just fail.\n            try:\n                self.assertTrue(verify_socket('::', 18000, 18001))\n            except socket.error as serr:\n                # Python has IPv6 enabled, but the system cannot create\n                # IPv6 sockets (otherwise the test would return a bool)\n                # - skip the test\n                #\n                # FIXME - possibly emit a message that the system does\n                # not support IPv6.\n                pass\n\n    @skipIf(True, 'Skipping until we can find why Jenkins is bailing out')\n    def test_max_open_files(self):\n        with TestsLoggingHandler() as handler:\n            logmsg_dbg = (\n                'DEBUG:This salt-master instance has accepted {0} minion keys.'\n            )\n            logmsg_chk = (\n                '{0}:The number of accepted minion keys({1}) should be lower '\n                'than 1/4 of the max open files soft setting({2}). According '\n                'to the system\\'s hard limit, there\\'s still a margin of {3} '\n                'to raise the salt\\'s max_open_files setting. Please consider '\n                'raising this value.'\n            )\n            logmsg_crash = (\n                '{0}:The number of accepted minion keys({1}) should be lower '\n                'than 1/4 of the max open files soft setting({2}). '\n                'salt-master will crash pretty soon! According to the '\n                'system\\'s hard limit, there\\'s still a margin of {3} to '\n                'raise the salt\\'s max_open_files setting. Please consider '\n                'raising this value.'\n            )\n\n            mof_s, mof_h = resource.getrlimit(resource.RLIMIT_NOFILE)\n            tempdir = tempfile.mkdtemp(prefix='fake-keys')\n            keys_dir = os.path.join(tempdir, 'minions')\n            os.makedirs(keys_dir)\n\n            mof_test = 256\n\n            resource.setrlimit(resource.RLIMIT_NOFILE, (mof_test, mof_h))\n\n            try:\n                prev = 0\n                for newmax, level in ((24, None), (66, 'INFO'),\n                                      (127, 'WARNING'), (196, 'CRITICAL')):\n\n                    for n in range(prev, newmax):\n                        kpath = os.path.join(keys_dir, str(n))\n                        with salt.utils.fopen(kpath, 'w') as fp_:\n                            fp_.write(str(n))\n\n                    opts = {\n                        'max_open_files': newmax,\n                        'pki_dir': tempdir\n                    }\n\n                    check_max_open_files(opts)\n\n                    if level is None:\n                        # No log message is triggered, only the DEBUG one which\n                        # tells us how many minion keys were accepted.\n                        self.assertEqual(\n                            [logmsg_dbg.format(newmax)], handler.messages\n                        )\n                    else:\n                        self.assertIn(\n                            logmsg_dbg.format(newmax), handler.messages\n                        )\n                        self.assertIn(\n                            logmsg_chk.format(\n                                level,\n                                newmax,\n                                mof_test,\n                                mof_h - newmax,\n                            ),\n                            handler.messages\n                        )\n                    handler.clear()\n                    prev = newmax\n\n                newmax = mof_test\n                for n in range(prev, newmax):\n                    kpath = os.path.join(keys_dir, str(n))\n                    with salt.utils.fopen(kpath, 'w') as fp_:\n                        fp_.write(str(n))\n\n                opts = {\n                    'max_open_files': newmax,\n                    'pki_dir': tempdir\n                }\n\n                check_max_open_files(opts)\n                self.assertIn(logmsg_dbg.format(newmax), handler.messages)\n                self.assertIn(\n                    logmsg_crash.format(\n                        'CRITICAL',\n                        newmax,\n                        mof_test,\n                        mof_h - newmax,\n                    ),\n                    handler.messages\n                )\n                handler.clear()\n            except IOError as err:\n                if err.errno == 24:\n                    # Too many open files\n                    self.skipTest('We\\'ve hit the max open files setting')\n                raise\n            finally:\n                shutil.rmtree(tempdir)\n                resource.setrlimit(resource.RLIMIT_NOFILE, (mof_s, mof_h))\n\n    @skipIf(NO_MOCK, NO_MOCK_REASON)\n    def test_verify_log(self):\n        '''\n        Test that verify_log works as expected\n        '''\n        message = 'Insecure logging configuration detected! Sensitive data may be logged.'\n\n        mock_cheese = MagicMock()\n        with patch.object(log, 'warning', mock_cheese):\n            verify_log({'log_level': 'cheeseshop'})\n            mock_cheese.assert_called_once_with(message)\n\n        mock_trace = MagicMock()\n        with patch.object(log, 'warning', mock_trace):\n            verify_log({'log_level': 'trace'})\n            mock_trace.assert_called_once_with(message)\n\n        mock_none = MagicMock()\n        with patch.object(log, 'warning', mock_none):\n            verify_log({})\n            mock_none.assert_called_once_with(message)\n\n        mock_info = MagicMock()\n        with patch.object(log, 'warning', mock_info):\n            verify_log({'log_level': 'info'})\n            self.assertTrue(mock_info.call_count == 0)\n"], "filenames": ["salt/utils/verify.py", "tests/unit/utils/test_verify.py"], "buggy_code_start_loc": [483, 59], "buggy_code_end_loc": [499, 59], "fixing_code_start_loc": [482, 60], "fixing_code_end_loc": [492, 70], "type": "CWE-22", "message": "Directory traversal vulnerability in minion id validation in SaltStack Salt before 2016.3.8, 2016.11.x before 2016.11.8, and 2017.7.x before 2017.7.2 allows remote minions with incorrect credentials to authenticate to a master via a crafted minion ID.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2017-12791.", "other": {"cve": {"id": "CVE-2017-14695", "sourceIdentifier": "cve@mitre.org", "published": "2017-10-24T17:29:00.323", "lastModified": "2017-11-14T21:49:19.657", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Directory traversal vulnerability in minion id validation in SaltStack Salt before 2016.3.8, 2016.11.x before 2016.11.8, and 2017.7.x before 2017.7.2 allows remote minions with incorrect credentials to authenticate to a master via a crafted minion ID.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2017-12791."}, {"lang": "es", "value": "Una vulnerabilidad de salto de directorio en la validaci\u00f3n minion id en SaltStack Salt en versiones anteriores a la 2016.3.8, en versiones 2016.11.x anteriores a la 2016.11.8 y versiones 2017.7.x anteriores a la 2017.7.2 permite que minions remotos con credenciales incorrectas se autentiquen en un master mediante un ID minion manipulado. NOTA: Esta vulnerabilidad existe debido a una soluci\u00f3n incompleta para CVE-2017-12791."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt:*:*:*:*:*:*:*:*", "versionEndIncluding": "2016.3.7", "matchCriteriaId": "CC5250DF-593F-42C2-A64F-47CE0E65070F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt:2016.11:*:*:*:*:*:*:*", "matchCriteriaId": "689B37E8-7274-4B5A-9419-538A9AB7B99F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt:2016.11.0:*:*:*:*:*:*:*", "matchCriteriaId": "F5B7EDF4-414F-429A-BD20-0B967737598C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt:2016.11.1:*:*:*:*:*:*:*", "matchCriteriaId": "594339CF-8192-425D-9C8C-AA51342D9477"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt:2016.11.1:rc1:*:*:*:*:*:*", "matchCriteriaId": "80E02A57-EA6E-4729-8E4E-4F444DA0A88E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt:2016.11.1:rc2:*:*:*:*:*:*", "matchCriteriaId": "6110046D-0532-41DB-9DF0-BB1BD1447D6E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt:2016.11.2:*:*:*:*:*:*:*", "matchCriteriaId": "E54FADCE-5311-4C8A-9527-1623F9AAC69E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt:2016.11.3:*:*:*:*:*:*:*", "matchCriteriaId": "4E904BB7-706A-43E0-96CE-2A9E671E4FB3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt:2016.11.4:*:*:*:*:*:*:*", "matchCriteriaId": "0338B627-4E56-4B47-87BA-CE9446CB6345"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt:2016.11.5:*:*:*:*:*:*:*", "matchCriteriaId": "FB77EB21-90F0-4E5F-8C2F-2973460A1E05"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt:2016.11.6:*:*:*:*:*:*:*", "matchCriteriaId": "536FF3D1-C16D-4F40-8E80-D5956FC6693F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt:2016.11.7:*:*:*:*:*:*:*", "matchCriteriaId": "CED0077F-8C9D-4043-B15E-61547A0EE58A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt:2017.7.0:*:*:*:*:*:*:*", "matchCriteriaId": "8F54D0CC-68F0-44E0-B565-BB9EFFE56817"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt:2017.7.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "97BDE3E9-E1C7-4D8D-B886-A3CE617BF12E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt:2017.7.1:*:*:*:*:*:*:*", "matchCriteriaId": "87ABC6C6-5E17-4732-B24C-032767D6EBC1"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-updates/2017-10/msg00073.html", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Release Notes", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-updates/2017-10/msg00075.html", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Release Notes", "Third Party Advisory"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1500748", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Release Notes", "Third Party Advisory"]}, {"url": "https://docs.saltstack.com/en/latest/topics/releases/2016.11.8.html", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Vendor Advisory", "Release Notes"]}, {"url": "https://docs.saltstack.com/en/latest/topics/releases/2016.3.8.html", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Release Notes", "Vendor Advisory"]}, {"url": "https://docs.saltstack.com/en/latest/topics/releases/2017.7.2.html", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/saltstack/salt/commit/80d90307b07b3703428ecbb7c8bb468e28a9ae6d", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/saltstack/salt/commit/80d90307b07b3703428ecbb7c8bb468e28a9ae6d"}}