{"buggy_code": ["PHORONIX TEST SUITE CHANGE-LOG\n\nPhoronix Test Suite 10.8.0\n25 December 2021\n\npts-core: Remaining PHP 8.1 warnings/fixes addressed\npts-core: Various macOS 12 warning fixes\npts-core: Allow using OUTPUT_DIR / OUTPUT_FILE environment variables to control result-file-to* sub-commands\npts-core: Improved JSON output generation, add option to the result viewer\npts-core: Add result-file-to-html sub-command and simple inline HTML result output option from result viewer\npts-core: Allow sorting results by test date/time\npts-core: Add TEST_EXECUTION_SORT environment variable to allow sorting test run order in more ways\npts-core: Consolidate/centralize handling of environment variable options to pts_env\npts-core: Add remove-incomplete-results-from-result-file helper command to remove results with incomplete or missing data\npts-core: Add REMOVE_TESTS_ON_COMPLETION environment variable as another way to have tests auto-uninstall/remove after running\npts-core: Improved test installation / test run-time error reporting and detection\npts-core: Allow recording/archiving install and runtime errors within installation metadata\npts-core: Add list-failed-installs sub-command for showing tests that failed to install\npts-core: Add list-test-errors sub-command for showing test run-time errors\npts-core: Add variables sub-command for showing environment variable descriptions and what is set\npts-core: Dynamic detection of Windows download folder location\npts-core: Improved Zip handling on Windows\nphodevi: Add detection for Arm Cortex-A710 and Neoverse-N2 cores\nphodevi: Add detection for AMD Zen 4 cores\nphodevi: Add detection for Intel Raptor Lake\nphodevi: Allow better detecting model number on Windows/Linux for Dell and Apple laptops\nphodevi: CPU temperature monitoring on Windows\nphodevi: Show \"energy_performance_preference\" CPU frequency scaling value where relevant\nphodevi: Linux CPUFreq EPP reporting support\nphodevi: Report Windows 10+ security features\nphodevi: Add PHODEVI_SANITIZE environment variable for those wanting to strip out certain hardware/software strings from system information\ncleanup: Add module that can auto uninstall tests not run in a given amount of time\nphoromatic: Allow relevant PTS environment variables to be exposed for setting by Phoromatic Server for benchmarks/schedules as \"advanced options\" area\nphoromatic: Use the unified result viewer code for presenting result graphs and other result page data\nphoromatic: Make use of shared/common result viewer code to allow adding/editing annotations, editing result file title/description, and deleting individual results from within the result viewer\nphoromatic: Efficiency improvement for when viewing result with just one result file\nphoromatic: Allow Phoromatic client to connect to Phoromatic HTTPS servers\nphoromatic: Allow optionally uploading test install/run logs to the Phoromatic Server\nphoromatic: Alow \"Run A Benchmark\" area to execute conventional PTS/system test suites\nphoromatic: Allow test schedules page to add suites to a schedule rather than only adding just test profiles\nphoromatic: Add option to settings page to always un-install/remove tests after execution for all Phoromatic testing\nphoromatic: Allow environment variables to also be set on a global basis from the Phoromatic Server Settings page\nphoromatic: Allow test installation metadata to be submitted to Phoromatic Server so from systems area can show currently installed tests and any errors\nphoromatic: Opt-in (settings page) support for streaming in-progress benchmark results to the Phoromatic Server between test runs so results can be viewed from the server as they are completed\nphoromatic: Unifying more result viewer and Phoromatic common display code\n\nPhoronix Test Suite 10.6.1\n10 October 2021\n\npts-core: Allow reporting test run errors inline / as part of the result file XML with null/empty results\npts-core: Remove the old, long deprecated static/JavaScript PTS result viewer that hasn't been used except for rare fallbacks since PTS pre-9.0\npts-core: PHP 8.1 deprecation warning/error fixes\npts-core: Support launching PHP web server with PHP_CLI_SERVER_WORKERS to allow multiple workers/threads\npts-core: Windows batch file handling test execution fix\npts-core: Allow running merge-results when pointing to specific XML files outside of standard paths\npts-core: Various minor fixes\nphoromatic: Fix possible case of local test profile download issues from Phoromatic Server\nphoromatic: Warn when lacking database write access for Phoromatic Server\nphoromatic: Support (opt-in) handling of non-text file log files\nphoromatic: Allow uploading of system logs after initial upload of result XML to deal with HTTP size limitations and other factors with large logs\nphoromatic: Use the unified/common log viewer for viewing logs from the Phoromatic web interface\nphoromatic: Tweaking of the Phoromatic CSS style to bring it more uniform with OpenBenchmarking.org / PTS Local Result Viewer / first update in ~6 years...\nphodevi: Improve detection of new Intel oneAPI DPC++/C++ Compiler\nphodevi: ACPI Platform Profile reporting support on Linux\nphodevi: Support reporting NVIDIA BAR1 total memory / Radeon vRAM visible memory (Resizable BAR / ReBAR status)\n\nPhoronix Test Suite 10.4.0\n16 May 2021\n\npts-core: Ubuntu 21.04 dependency updates for changed/removed package names\npts-core: Add \"auto-resolution-wide\" option\npts-core: Add $CPU_THREADS_PER_CORE helper\npts-core: Allow perf-per-dollar-per-hour in the result viewer, extending perf-per-dollar HTML helper\npts-core: Add PTS_EXTRA_SYSTEM_LOGS_DIR environment variable to allow pointing to directory of extra system log files\npts-core: Add RepositoryURL option for test profiles\nphodevi: Intel Linux graphics string format improvement\nphoromatic: Treat set context scripts as a file rather than executing it as a buffer\nphoromatic: Allow passing Phodevi system properties to Phoromatic Server\nphodevi: Add some new properties, port some pts_network info to phodevi interfaces\nsystem_monitor: Adjust perf-per precision\n\nPhoronix Test Suite 10.4.0 Milestone 1\n17 March 2021\n\npts-core: Optimize out sorting percentile values array excess times\npts-core: Optimization to avoid re-parsing test profile definition multiple times\npts-core: Optimization to avoid re-parsing installed test metadata multiple times\npts-core: Allow longer HTTP timeouts on OpenBenchmarking.org result uploads if needed\npts-core: Allow sorting runs within a result file from within the result viewer web interface\n\nPhoronix Test Suite 10.2.2\n17 February 2021\n\npts-core: Add helper text when hitting a download with no working mirrors\npts-core: Various external dependency updates\npts-core: Add enable-repo sub-command for more easily enabling new OpenBenchmarking.org repos\npts-core: Result viewer fix for the limit drop down menu potentially not being activated in some cases\npts-core: Allow renaming runs within the result viewer\nphoromatic: Ensure pcntl_signal is present before starting Phoromatic Server\nphoromatic: PHP 8 compatibility fixes\nphodevi: Fix display driver name potentially being reported inaccurate for some obscure graphics cards / driver configurations\nphodevi: Export current GPU graphics card PCI device ID (GPU_DEVICE_ID) for some games/tests relying on it for configuration\n\nPhoronix Test Suite 10.2.1\n1 February 2021\n\npts-core: Add \"InstallRequiresInternet\" option for test profiles that is more narrow (install time only) than the existing \"RequiresInternet\"\npts-core: Add check-tests sub-command\npts-core: Fix possible crash on PDF output\npts-core: Various small fixes and tweaks\npts-core: Fix PHP8 + cURL download error\npts_Graph: A number of minor SVG standards compliance updates\nphodevi: Log Transparent Huge Pages setting as part of system details\nphodevi: Don't bother parsing the X.org log if it grows too big\n\nPhoronix Test Suite 10.2.0\n5 January 2021\n\npts-core: PHP8 detection improvements\npts-core: For estimated run time, avoid over-calculating time if test has no options but multiple outputs\npts-core: Updated (Open)Mandriva external dependencies\npts_Graph: Minor enhancements\nphodevi: Add support for reporting ACPI Platform Profile and INT340x Workload Hint\n\nPhoronix Test Suite 10.2.0 Milestone 3\n21 December 2020\n\npts-core: Add debug-unhandled-dependencies option\npts-core: Default to 2.5% std dev threshold default on new installs\npts-core: BSD external dependency updates\npts-core: Various refinements to the text user interface\npts-core: When a test profile hits a failed download / broken mirror, report that URL to OpenBenchmarking.org\nphodevi: Don't restore the Phodevi cache if the /etc/machine-id changed (or /etc/hostname as fallback)\n\nPhoronix Test Suite 10.2.0 Milestone 2\n6 December 2020\n\npts-core: Transition to new JSON-based data format for managing test install metadata while maintaining backwards compatibility with prior XML format\npts-core: Begin tracking test run-times per-hash (all configured test options) for more detailed time tracking and in turn time estimates on subsequent runs\npts-core: Increase compression factor when uploading benchmark results\npts-core: Last minute fixes for PHP 8.0 compatibility\nphodevi: Report if CPUFreq Boost enabled/disabled\nturbostat: Add TurboStat module to easily generate turbostat dumps on a per-test basis to log files\nphoromatic: Much faster web viewer performance especially with large databases\n\nPhoronix Test Suite 10.2.0 Milestone 1\n21 November 2020\n\npts-core: Log lock_stat, config.gz, dmidecode to system logs\npts-core: Only show Apple options when running on macOS\npts-core: Add extra safeguard around FORCE_TIMES_TO_RUN for disabling dynamic run count\nob_auto_compare: Intelligently choose more relevant reference results\nphodevi: macOS CPU temperature monitoring support\nphodevi: Support for reading WattsUp Pro power meter data directly without utility using WATTS_UP_METER=<USB TTY>\nphodevi: Report Google Compute Engine machine type as part of motherboard string\nphodevi: Add dumpe2fs to system logs when running on EXT4 and root\nphodevi: Add block size reporting\nphodevi: CPU power reporting for Ampere Altra\nphodevi: Various Ampere Altra hardware detection/reporting improvements\nphodevi: Support reading CPU package power consumption on macOS using powermetrics\n\nPhoronix Test Suite 10.0.1\n21 October 2020\n\npts-core: Fix for older versions of PHP such as in RHEL7\npts-core: Add Thermald version reporting to system table when active\nphodevi: Detection improvements for new CPUs\nphodevi: Avoid \"11th Gen Intel\" CPU string\nphodevi: Update for NVMe drive reporting with KIOXIA, Toshiba sometimes not reporting their brand first\n\nPhoronix Test Suite 10.0.0\n13 October 2020\n\npts-core: Ensure any post-run script is triggered still under halt-testing/skip-test conditions\npts-core: Allow batch processing of performance per dollar metrics\nphodevi: Add Intel AMX presence detection\nphodevi: Add detection for Intel Alder Lake, Jasper Lake, Sapphire Rapids, and others\nphoromatic: Ensure Windows tests get displayed even if running the Phoromatic Server on Linux\nflush_caches: Add module to flush system caches between runs\ntest_timeout: Add module to quit a test run if it exceeds a predefined time limit or 'auto' determination\n\nPhoronix Test Suite 10.0.0 Milestone 3\n1 October 2020\n\npts-core: Don't show Vulkan options if Vulkan support is known to be unavailable/broken\npts-core: Add OptionSelect tag support within test suite definitions\npts-core: Allow * wildcard match in FileCheck handling within external dependency XML\npts-core: Add \"OS\" TestType\npts-core: Various external dependency updates\npts-core: Continued tweaking to the analytics engine\nphodevi: Add Neoverse N2, Cortex-X1 detection and other Arm CPU updates\npts_Graph: Various improvements\n\nPhoronix Test Suite 10.0.0 Milestone 2\n12 September 2020\n\npts-core: Honor NO_COLOR environment variable for disabling terminal coloring\npts-core: Allow launching just the result viewer from systemd (phoronix-result-server.service)\npts-core: Result viewer UI tweaks\npts-core: Minor fixes\npts-core: Add RequiresRootInstall test profile option\npts-core: Result file text output tweaks\npts-core: More robust test result parsing in certain time formats\n\nPhoronix Test Suite 10.0.0 Milestone 1\n19 August 2020\n\npts-core: Add keep-results-in-result-file sub-command\npts-core: Split the dynamic result viewer into its own embed class for result file handling to allow for easy re-use by OpenBenchmarking, Phoromatic, etc\npts-core: Various changes for supporting the new OpenBenchmarking.org infrastructure\npts_Graph: Add histogram type\nphodevi: CPU core name / family detection to friendly strings (OpenBenchmarking.org driven)\nphodevi: Report core name via system-info command\nphodevi: Various storage HDD/SSD detection reporting improvements\nphodevi: Ampere Altra detection\nphodevi: macOS/Apple hardware detection improvements\n\nPhoronix Test Suite 9.8.0\n9 July 2020\n\npts-core: Handling of cases where all options are unsupported (such as CUDA and OpenCL tests with no valid backends found) to avoid prompts\npts-core: Be more liberal in allowing CUDA/OpenCL GPU compute tests to run fine without display server active\npts-core: Fix for not filling test suites of contained tests in some select cases (sub-suites listing in results viewer)\npts-core: Allow creating new virtual test suites that are not prefixed by a OB repository\nphodevi: NVIDIA GPU detection within WSL2\ndocker: Rewritten phoronix/pts Docker implementation based on Ubuntu 20.04 LTS\n\nPhoronix Test Suite 9.8.0 Milestone 2\n24 June 2020\n\npts-core: Add client side plumbing for estimated test install time from OpenBenchmarking.org\npts-core: Add estimate-install-time sub-command, show estimated install time when installing a test\npts-core: Improve web browser selection logic for result viewer\npts-core: Add search field to the result viewer areas for limiting based on title/argument matching\npts-core: Various minor fixes\npts-core: Don't show OpenCL test options if no OpenCL drivers/adapters appear present\nphodevi: Fix for incorrect monitor count when parsing X.Org log\nphodevi: Warning fixes for latest WSL\n\nPhoronix Test Suite 9.8.0 Milestone 1\n3 June 2020\n\npts-core: When an install fails, try a newer minor version update to that test profile if available (fixes broken download mirrors, etc)\npts-core: When a newer minor version of a test profile is installed and a requested (older) one is not, use the newer compatible version\npts-core: Rewrite virtual test suite implementation\npts-core: Add handler for ensuring reported system time is accurate, otherwise calculate current date/time using offsets\npts-core: When scanning test suites on disk, ensure the latest test suite version is used\npts-core: Add test-to-suite-map sub-command\npts-core: Fix for loading the result viewer JavaScript / CSS when running on a Windows host\npts-core: For tests requiring root but not run initially as root and using monitoring data, drop the first run to ensure sudo promot doesn't skew time\npts-core: Fix PHP8 error in the 'info' sub-command\npts-core: Other PHP deprecation code tweaks\nphodevi: Add amd_energy Linux driver support\n\nPhoronix Test Suite 9.6.1\n25 May 2020\n\npts-core: Show unit/scale in CSV export\npts-core: When limiting results to show in result viewer, keep child objects that match the desired type for the parent\npts-core: Add rebuild-test-suite option for regenerating suite XML all cleaned up\npts-core: Allow exporting result files to XML test suites via the result viewer\nlinux_perf: Reporting many more events\npts-core: External dependency updates\npts_Graph: graph code tweaks\nphodevi: Avoid macOS reporting X-Core string before Intel CPU string\nphodevi: Sway compositor version detection\nphodevi: Detection of newer Arm CPU cores\n\nPhoronix Test Suite 9.6.0\n21 April 2020\n\npts-core: Allow building virtual suites off external dependencies\npts-core: Various result viewer improvements\npts-core: Allow saving results under stress-run\npts-core: Responsive/mobile result viewer improvements\npts-core: Show local tests within the build-suite sub-command\npts-core: Show local suites within the list-installed-suites sub-command\npts_Graph: Restore capability for drawing mini graphs for all results in a result file overview\n\nPhoronix Test Suite 9.6.0 Milestone 3\n12 April 2020\n\npts-core: Allow automated per-thread/core/clock/RAM graphs within the result viewer\npts-core: Result viewer add \"Limit displaying results to tests within:\"\npts-core: From the result viewer allow \"Show Geometric Means Per-Suite/Category\"\npts-core: Add workload-topology sub-command\npts-core: Allow adding deprecated tests to build-suite\npts-core: CSV export improvements\npts-core: Add \"Do Not Show Results With Incomplete Data\" to the result viewer\npts-core: Allow test suite \"Status\" tag\npts-core: Don't report OB updates on deprecated tests or suites\n\nPhoronix Test Suite 9.6.0 Milestone 2\n5 April 2020\n\npts-core: Documentation updates\npts-core: External dependency updates\npts-core: Allow listing test profiles within the result viewer\npts-core: Allow listing test suites and test suite data within the result viewer\npts-core: Allow showing test profile information within the result viewer\npts-core: Various other updates to the result viewer\npts-core: Add vaapi as possible external dependency\nupdate_checker: Add message of the day support\n\nPhoronix Test Suite 9.6.0 Milestone 1\n24 March 2020\n\npts-core: Add new analyze-run-times sub-command\npts-core: Allow hiding results from within the result viewer\npts-core: Allow generating performance-per-dollar metrics from within the result file\npts-core: Allow showing system logs from the result viewer\npts-core: Allow showing test description within the result viewer\npts-core: Fixes for running the result viewer from a website sub directory in correctly loading assets\npts-core: Add result viewer option \"hide noisy results\"\npts-core: Add result viewer option \"hide results with little change/spread\"\npts-core: Add result viewer option \"only show results where X faster than Y\"\npts-core: Add XML export to result viewer export menu\npts-core: Support deleting runs from the result viewer\npts-core: Improve the print view from the result viewer\nphodevi: BSD tweaks/fixes\n\nPhoronix Test Suite 9.4.1\n4 March 2020\n\nVarious minor bug fixes and OpenBenchmarking.org cache update\n\nPhoronix Test Suite 9.4.0-Vestby\n25 February 2020\n\npts-core: Add option in the result viewer to allow compacting multi-option test results into single graphs\npts-core: Add option in the result viewer to allow compacting multi-version test results into single graphs\npts-core: Add Parent tag to result file schema for specifying relation to other result objects\npts-core: Report test profile support errors when intended\npts-core: Fix showing NVIDIA test options on non-Linux NVIDIA platforms\npts-core: Don't show delete/annotation options for dynamically generated result objects where those options are not relevant\npts-core: Allow showing performance-per-suite option within result viewer\npts_Graph: When going to PDF with GD library, just use the OB rather than temporary file\npts_Graph: Restore support for error bars on vertical bar graph rendering\npts_Graph: Support for simpler view / rendering without header/footer\n\nPhoronix Test Suite 9.4.0 Milestone 3\n18 February 2020\n\npts-core: Add PDF bookmarks to result graphs on PDF result file generation\npts-core: Add automated executive summary of result files via executive-summary sub-command and PDF result export\npts-core: Add remove-result-from-result-file sub-command (slightly different from remove-results-from-result-file)\npts-core: Set SaveTestLogs = TRUE by default\npts-core: Set SaveInstallationLogs = TRUE by default\npts-core: Refactor test-logs (SaveTestLogs) handling\npts-core: Refactor test installation logs handling\npts-core: More verbose reporting of system/external dependency solving status\npts-core: Get the modern result viewer working on Windows\npts-core: Support for showing test logs from the result viewer\npts-core: Support for showing install logs from the result viewer\npts-core: PDF output improvements\npts-core: Fix for some suites not showing up on list-suites sub-command\npts-core: Report \"Test Suites Containing This Test\" in the info sub-command on tests\npts-core: On PDF export allow showing geometric means of tests based on their test suite connections\npts-core: Add intersect sub-command for showing tests common between multiple results/suites\n\nPhoronix Test Suite 9.4.0 Milestone 2\n5 February 2020\n\npts-core: Add config options allowing to modify or delete result files from the result viewer\npts-core: Allow deleting results from the result viewer\npts-core: Allow editing result file information from result viewer\npts-core: Allow deleting results (graphs) from result file in result viewer\npts-core: Add ability to annotate (comment) on result graphs within the result viewer\npts-core: Support converting graphs to PNG/PDF with Inkscape or svg-convert when PHP GD is not installed/enabled\npts-core: Add Persistent Memory disk targets for disk test\n\nPhoronix Test Suite 9.4.0 Milestone 1\n13 January 2020\n\npts-core: Allow test profile test options to expose more helper information strings\npts-core: External dependency updates\npts-core: When a test fails to install due to linker error, try to run that missing library through the external dependency handler to hint at the name\npts-core: When a test fails to install due missing header file, try to run that missing library through the external dependency handler to hint at the name\npts_Graph: Pass/fail graph formatting improvements\nphodevi: Convert large RAM capacity basic strings into GB rather than large MB\nphodevi: Add support for Linux 5.6+ drivetemp kernel module for ATA drive temperatures\n\nPhoronix Test Suite 9.2.1\n11 December 2019\n\npts-core: Fix for Debian packaging generator\npts-core: FIx for install script that could lead to Phoromatic Server instance not fully launching\n\nPhoronix Test Suite 9.2.0-Hurdal\n3 December 2019\n\npts-core: Fix for sensor-driven result outputs (e.g. power)\npts-core: Clean up precision handling on graphs\npts-core: Add run-subset sub-command\npts-core: Add Clear Linux external dependencies handling for when not relying upon the Clear bundles that include all known dependencies\nphodevi: More robust ACPI power_meter handling\nphodevi: Support reading the NVMe drive temperature via HWMON on Linux 5.5+\nphoromatic: Use the new shared result viewer settings handling in common with the dynamic result viewer\n\nPhoronix Test Suite 9.2.0 Milestone 2\n13 November 2019\n\npts-core: Drop auto-compare sub-command since currently buggy / too server resource intensive\npts-core: Add FORCE_MIN_DURATION_PER_TEST\npts-core: Don't sort geometric mean results when the only difference between result identifiers is numeric in nature\npts-core: Allow preserving the precision of the original workload under test if not overriden by test profile\npts-core: Record and report CPU microcode version in benchmark result file\nsystem_monitor: Allow multiple PERFORMANCE_PER_SENSOR= to be delimited by comma\n\nPhoronix Test Suite 9.2.0 Milestone 1\n17 October 2019\n\npts-core: New possible external dependencies for gflags, clang, uuid, tclsh\npts-core: External dependencies updates for Windows\npts-core: Crash fix for macOS in regression from PTS 9.0.1 launcher change\n\nPhoronix Test Suite 9.0.1-Asker\n1 October 2019\n\npts-core: Fatal error fix for old PHP5 versions (RHEL 7) with pts_openbenchmarking_upload crash\npts-core: Set AllowResultUploadsToOpenBenchmarking = FALSE in enterprise-setup\nob_auto_compare: Show \"since [date]\" as part of the inline box plot\nob_auto_compare: Various tweaks/styling improvements to the inline box-plot display\nphodevi: New cpu.peak-freq sensor for reporting just the highest CPU core frequency at that moment\n\nPhoronix Test Suite 9.0.0-Asker\n16 September 2019\n\npts-core: Add stress-batch-run sub-command for behavior like stress-run but no prompts for test options\npts-core: Allow plotting all individual run results as a line graph\npts-core: Allow showing pie charts of wins/losses of tests\npts-core: Add support for showing \"new + updated tests\" via the invalid command helper\npts-core: Allow accessing the new result viewer via localhost too rather than just 127.0.0.1\npts_Graph: Restore pie chart support from PTS 6.0 state when dropped\n\nPhoronix Test Suite 9.0.0 Milestone 3\n3 September 2019\n\npts-core: Add AllowResultUploadsToOpenBenchmarking user config option\npts-core: Split OpenBenchmarking.org upload code into pts_openbenchmarking_upload file and allow it to be removed if wanting to strip out upload support\npts-core: Add \"ob-cache\" local cache of tests/suites to help offline use-cases\npts-core: Add hdf5 to the external dependency list\npts-core: Add libxml2 to the external dependency list\n\nPhoronix Test Suite 9.0.0 Milestone 2\n22 August 2019\n\npts-core: New result viewer improvements\npts-core: Various fixes and code cleanups\nphodevi: Add support for cpu.power sensor reading from Linux zenpower driver\n\nPhoronix Test Suite 9.0.0 Milestone 1\n25 July 2019\n\npts-core: Add 'expat' as possible external dependency\npts-core: Various PDF report improvements\npts-core: User-config syntax change LoadModules -> AutoLoadModules\npts-core: Also dynamically increase run count if any results outside 3-sigma limit\npts-core: Add compare-results-two-way sub-command\npts-core: Improve MultiMatch in test result parser\npts-core: Add IGNORE_RUNS environment variable\npts-core: Add result-file-confidence sub-command\npts_Graph: Add side-by-side 2-way comparison graph\npts_Graph: Fix for displaying line graphs with very small values\nphodevi: Support reading sys.power via IPMI PS1_Input_Power/PS2_Input_Power\nphodevi: More robust Arm CPU model detection improvements\nphodevi: Much faster CPU usage reading on large core count systems\n\nPhoronix Test Suite 8.8.1-Hvaler\n30 May 2019\n\npts-core: Various minor tweaks/fixes\nphodevi: Fix Linux CPU thread detection in some scenarios where inner-cores may be offlined\nphodevi: More robust CPU vulnerability reporting\nphodevi: Add initial reporting for Windows vulnerabilities via mdstool-cli\n\nPhoronix Test Suite 8.8.0-Hvaler\n13 May 2019\n\npts-core: Report on the POWER SMT setting in notes\npts-core: Add new/updated suite reporting\npts-core: In build-suite allow not binding test profile versions\npts-core: For list-suites, only show suites that have been updated within the past four years\npts_Graph: Report N on horizontal bar graphs\nphodevi: Intel Node Manager power_meter support for sys.power sensor\n\nPhoronix Test Suite 8.8.0 Milestone 3\n9 May 2019\n\npts-core: Add experimental dynamic-result-viewer\npts-core: Allow marking of test profile download files as optional\npts-core: Add \"everything\" virtual suite\npts-core: Set MESA_VK_WSI_PRESENT_MODE=immediate by default to work around possible 60 FPS RADV bug\npts-core: Rename remove-from-result-file to remove-run-from-result-file\npts-core: Add remove-results-from-result-file sub-command\nphodevi: Detect AVX-512 VNNI\nphodevi: Fix OpenJDK Java version detection\nphodevi: Expand memory temperature sensor to work for some ARM SBCs\nphodevi: Multi-monitor detection improvements\nphodevi: Add support for gpu.memory-usage sensor with new AMDGPU mem_busy_percent sysfs interface\nsystem_monitor: Add PERFORMANCE_PER_SENSOR= support for performance-per-(arbitrary sensor) rather than just supporting perf-per-Watt\nob_auto_compare: Show other results in result file on box plot\n\nPhoronix Test Suite 8.8.0 Milestone 2\n27 March 2019\n\npts-core: On new installs set 3.00% as deviation for increasing dynamic run count rather than 3.50%\npts-core: Add FORCE_MIN_TIMES_TO_RUN_CUTOFF= environment variable to toggle cutoff for FORCE_MIN_TIMES_TO_RUN behavior\npts-core: Add FORCE_TIMES_TO_RUN_MULTIPLE\npts-core: Add strict-benchmark option for enabling various options to ensure stricter behavior about the number of times to run each benchmark\npts-core: Add cpu-physical-threads / cpu-threads / auto-executable auto test run options\nphodevi: CPU-therm reporting via sysfs for CPU core temp\nphodevi: GPU-therm reporting via sysfs for GPU core temp\n\nPhoronix Test Suite 8.8.0 Milestone 1\n16 March 2019\n\npts-core: Allow FORCE_TIMES_TO_RUN to override debug-run/debug-benchmark single run behavior\npts-core: Various fallbacks/workarounds for those wanting to (unofficially) use PTS on Windows 8.1\npts-core: Other small tweaks and optimizations\npts-core: Fixes an odd scenario where on Windows after 2 runs, further runs of that test profile for current run could fail in select (random) instances\npts-core: Write out system notes for each system when generating PDF result output\npts-core: CSV output improvements\npts-core: Add result-file-raw-to-csv for dumping the raw/individual benchmark result run data\npts_Graph: Condensing improvements for large graphs\npts_Graph: Various formatting improvements\nphodevi: Intel GPU reporting improvements\nphodevi: BIOS version reporting support extended to Windows\nphodevi: ipmitool DMCI power sensor reporting for at least some POWER servers\n\nPhoronix Test Suite 8.6.1-Spydeberg\n21 February 2019\n\npts-core: Dynamically honoring the CLI terminal width (no longer cache the value on Linux/BSD/macOS)\npts-core: BSD external dependency updates\nob_auto_compare: Minor formatting updates\n\nPhoronix Test Suite 8.6.0-Spydeberg\n5 February 2019\n\npts-core: Other small tweaks and fixes\npts-core: Fix for \"/installed\" virtual suite not including the proprietary/commercial tests that are installed\nob_auto_compare: Allow showing more results in the embedded percentile graphs\n\nPhoronix Test Suite 8.6.0 Milestone 3\n27 January 2019\n\npts-core: Better handling on Windows when there are space(s) in the paths\npts-core: Add __event_post_run_stats module hook\npts-core: Inline display of result distributions from OpenBenchmarking.org on applicable results\npts-core: Don't try to run tests from result file(s) or suite(s) that were not installed\npts-core: More accurate time reporting when result files are passed to `phoronix-test-suite estimate-run-time`\nphodevi: Better reporting of NVMe drive strings on BSDs\n\nPhoronix Test Suite 8.6.0 Milestone 2\n19 January 2019\n\npts-core: Update Mac OS X to macOS references\npts-core: Add result-file-stats sub-command to show more test result statistics\npts-core: Show geometric mean and harmonic mean data at end of benchmarking process when relevant as part of post-run stats\npts-core: Improved formatting of file download text user interface for downloading of dependencies on Microsoft Windows\npts-core: Fix Loop 'Test i of n' Reporting\npts-core: A few warning fixes for PHP 7.3+\npts-core: External dependency handling support for OpenMandriva Lx 4.0 (transitioned from urpmi to DNF)\nphodevi: Report Windows Subsystem for Linux (WSL) to the system layer string\n\nPhoronix Test Suite 8.6.0 Milestone 1\n7 January 2019\n\npts-core: No longer clear test profile identifiers on secondary saved results\npts-core: Add compare-results-to-baseline sub-command for comparing one result file (baseline) against a set of results for text look at relative perf\npts-core: Minor fixes\npts-core: Show wins and losses summary after testing on large result files\npts-core: On two-way result files, after test completion show comparison of current result against previous result (baseline)\npts-core: Add ShowPostRunStatistics user configuration XML option to toggle whether various test statistics are printed at the end of testing\npts-core: Add recently-added-tests sub-command to show newly added test profiles / alternative to openbenchmarking-changes/recently-updated-tests\npts-core: Allow outputting line graphs to terminal interface as basic box plot graphs\nphodevi: Improve Linux multiple network device reporting\nphodevi: LXQt desktop version reporting\nphodevi: Update for Microsoft Windows Server 2019\nsystem_monitor: Allow outputting system monitor graphs to terminal interface inline\n\nPhoronix Test Suite 8.4.1-Skiptvet\n9 December 2018\n\npts-core: Workaround for RHEL 7.6 PHP having buggy CURL that is causing seg faults\npts-core: Ensure \".\" doesn't get set in PATH when launching phoronix-test-suite\npts-core: Allow PRESET_OPTIONS env var to be used when in batch mode\npts-core: FreeBSD updates\npts-core: Add PRESET_OPTIONS_VALUES environment variable that is similar to PRESET_OPTIONS but for explicit values\nphodevi: Improved Radeon AMDGPU frequency detection/reporting\nphodevi: Add support for reading GPU usage sensor with AMDGPU gpu_busy_percent sysfs interface\nphodevi: Updated gpu_voltage sensor for AMDGPU driver\nphodevi: Updated gpu_power sensor for AMDGPU driver\nphodevi: Updated gpu_fanspeed sensor for AMDGPU driver\nphodevi: Updated gpu_freq sensor for AMDGPU driver\nphodevi: Improved physical CPU core detection on DragonFlyBSD 5.4\nphodevi: Improved Spectre detection on DragonFlyBSD 5.4\nphodevi: Allow using NUM_CPU_CORES to override the number of exposed CPU threads/cores to tests (alternative to PTS_NPROC / NUMBER_OF_PROCESSORS)\nphodevi: Improved multi-disk reporting for non-Linux operating systems\nphodevi: Minor GPU string reporting improvement\n\nPhoronix Test Suite 8.4.0-Skiptvet\n26 November 2018\n\nphodevi: Various minor tweaks\n\nPhoronix Test Suite 8.4.0 Milestone 3\n20 November 2018\n\npts-core: Various external dependency updates\npts-core: Expose NUM_CPU_PHYSICAL_CORES to test profiles as alternative to NUM_CPU_CORES (logical count)\npts-core: Fix possible situation of openbenchmarking-refresh not updating when IndexCacheTTL is set to 0\npts-core: Allow branded colors to work in the terminal/CLI text graphs\npts-core: Continued POWER9 support improvements\npts-core: Add RemoveInstallDirectoryOnReinstall to toggle test re-installation behavior\npts_Graph: Fix for sometimes tick marker text overlapping\nphodevi: Improved physical CPU core detection for architectures like POWER\nphodevi: Improved CPU cache size detection\n\nPhoronix Test Suite 8.4.0 Milestone 2\n5 November 2018\n\npts-core: Allow passing PTS environment variables as arguments to PTS and then just have PTS set them in the environment\npts-core: Add dry-run test option\npts-core: Various result parser additions to help parsing of CSV frame-time data for more test profiles (games)\nphodevi: Vulkan driver reporting fix\n\nPhoronix Test Suite 8.4.0 Milestone 1\n8 October 2018\n\nphodevi: Report vRAM size on GPU model string in GB when over 1GB\npts-core: At run-time also report if test is deprecated/broken\npts-core: Add \"node-npm\" as an external dependency for Node.js + NPM\nphodevi: Drop information reporting support for the long ago Catalyst/fglrx driver stack that hasn't been supported/maintained in many years\n\nPhoronix Test Suite 8.2.0-Rakkestad\n11 September 2018\n\npts-core: Add RequiresDisplay test profile property to indicate if the test profile explicitly requires a monitor / display server to work\npts-core: Add RequiresNetwork test profile property to indicate if the test profile needs a working network connection\npts-core: Add RequiresInternet test profile property to indicate if the test profile needs a working Internet connection\npts-core: Don't install tests where the current run-time checks will fail\nphodevi: Improve CPU thread count detection when running under LXC\nphodevi: More robust DMI decode ignore value handling\nphodevi: Add extra fallback detection for LXC in system-layer\n\nPhoronix Test Suite 8.2.0 Milestone 4\n7 September 2018\n\npts-core: Fix behavior of \"Would you like to stop and install these tests now\"\npts-core: Add reinstall / re-install aliases to force-install\nob_auto_compare: Default first to trying to do an automated local result comparison\nphodevi: Amlogic SoC detection based on meson_cpufreq driver\nphodevi: Rockchip SoC fallback detection\nphodevi: Embedded ARM Cortex / ARM part model detection\nphodevi: Expanded sensor coverage using Intel RAPL\n\nPhoronix Test Suite 8.2.0 Milestone 3\n22 August 2018\n\npts-core: Minor updates to logic for determining how many times to dynamically increase run count on high variance results\npts-core: Show deprecated tests too when running list-all-tests\npts-core: Add DropNoisyResults option if wishing to not save results that have too high of deviation between runs\npts-core: Add PTS_DOWNLOAD_CACHE_OVERRIDE environment variable option on make-download-cache\npts-core: Add PTS_USER_PATH_OVERRIDE environment variable to override PTS_USER_PATH on initialization\npts-core: Add PTS_DOWNLOAD_CACHING_PLATFORM_LIMIT environment variable for make-download-cache\npts-core: Add list-cached-tests option\n\nPhoronix Test Suite 8.2.0 Milestone 2\n15 August 2018\n\npts-core: Add DivideResultDivisor to result parser\npts-core: Add libevent as possible external dependency\npts-core: Alert the user when the test install directory is on a file-system mounted with 'noexec'\npts-core: Optional support with PHP 7.3+ to also obtain network info using net_get_interfaces()\npts-core: Fix possible alignment issue with value/spacer on outputting text-based result graphs\npts-core: When Internet is not available and running list-tests, only show tests that are available via caches unless `list-all-tests` is run\npts-core: Rework `list-recommended-tests` to make use of download count information exposed via OB index repository data rather than needing to make fresh web query\npts-core: Show \"popular tests\" in the invalid command helper\npts-core: Allow stress-run to be triggered from interactive mode\npts-core: Allow comparing dynamic in-line result comparisons against local results when no Internet results matching or Internet not available\nphodevi: Reporting of L1TF / Level 1 Terminal Fault vulnerability\npts_Graph: Tweaks to text sizing on vertical bar graphs\n\nPhoronix Test Suite 8.2.0 Milestone 1\n21 July 2018\n\npts-core: Add readline-based autocompletion support for text-based menu selection lists\npts-core: Add readline-based autocompletion support for the result file save name for trying to match existing result file identifiers\npts-core: Add autocompletion support for result file identifier based on installed software/hardware\npts-core: Various Alpine Linux external dependency updates\npts-core: Various improvements to the Shell sub-command functionality, including auto-completion support\nphoromatic: From rootadmin allow the rootadmin to override/reset a user account password\nphodevi: Windows battery reporting discharge rate support\nphodevi: Improved multi CPU socket reporting on Windows\nphodevi: Various hardware/software detection improvements when running within Docker/containers\npgo: New module to provide for automated compiler PGO (Profile Guided Optimizations) testing on GCC/Clang\n\nPhoronix Test Suite 8.0.1-Aremark\n26 June 2018\n\npts-core: Add \"wine\" external dependency support\npts-core: Fix skip-test behavior\npts-core: Web browser handling improvements on Windows, other Windows updates\nphoromatic: Various minor fixes and enhancements\nphodevi: Add USE_WINE environment variable check, point it towards the wine binary you wish to test\n\nPhoronix Test Suite 8.0.0-Aremark\n5 June 2018\n\npts-core: Various macOS support tweaks/improvements\npts-core: Add external dependency support for Brew macOS package manager\npts-core: Avoid duplicate test identifiers on graphs\nphodevi: Improved X.Org Server version detection\n\nPhoronix Test Suite 8.0.0 Milestone 5\n30 May 2018\n\npts-core: Termux external dependency support\npts-core: Other minor tweaks and changes\nphoromatic: Better handling when the Phoromatic Server is run without an Internet connection or Internet disabled\nphoromatic: A wide variety of other Phoromatic Server optimizations and improvements\nphodevi: Add spec_store_bypass / Spectre Variant 4 reporting\n\nPhoronix Test Suite 8.0.0 Milestone 4\n16 May 2018\n\nphoromatic: Add a \"email all users\" option to the rootadmin page\nphoromatic: Improve search functionality on results page, allow boolean expressions, date ranges, many other search features\nphoromatic: Various search improvements to `phoronix-test-suite search`\nphoromatic: Allow new test profiles to be created from Phoromatic web UI\npts-core: New create-test-profile sub-command for guided process to test profile creation\npts-core: Basic changes, should be all that's needed for EU GDPR safeguards\nphodevi: RISC-V SiFive CPU detection\n\nPhoronix Test Suite 8.0.0 Milestone 3\n16 April 2018\n\npts-core: Improvements for BSD / FreeBSD support\npts-core: Add \"V8\" external dependency for V8 JavaScript engine\npts-core: Add initial AdvertiseServiceOpenBenchmarkRelay support\npts-core: Add new inspect-test-profile sub-command\npts-core: Add ColoredConsole option in user configuration file of AUTO / TRUE / FALSE to control colored text behavior\npts-core: Report each test's run-time to test-rin-times in result file XML\npts-core: More XSD / OpenBenchmarking.org schema handling work for future functionality\nphoromatic: Ensure environment variables set via Phoromatic web interface get passed to tests\nphodevi: BSD improvements\nbackup: A module providing initial backup/restore functionality for PTS/Phoromatic\n\nPhoronix Test Suite 8.0.0 Milestone 2\n24 March 2018\n\npts-core: Add DeleteOutputBefore and DeleteOutputAfter options to the result parser\npts-core: Fix for run-random-tests sub-command\npts-core: Native XML result parsing support via FileFormat = XML in the result parser for test profiles\npts-core: Add openbenchmarking-uploads sub-command for reporting recent result uploads from the local IP\nphodevi: reboot/shutdown support on Windows\n\nPhoronix Test Suite 8.0.0 Milestone 1\n8 March 2018\n\npts-core: Rewritten Windows support\npts-core: Add ~/install-message support where if a test profile installer writes there, that message will in turn be shown to the user on test install\npts-core: Support for using Cygwin's bash interpreter on Windows systems for better test profile parsing support\npts-core: When running on Windows, add new \"windows/\" OpenBenchmarking.org test repository\npts-core: Introduce basic phoronix-test-suite shell for easier PTS experience\npts-core: Allow XInclude support for test suites\nperf_per_dollar: Allow calculating cloud costs / perf-per via COST_PERF_PER_HOUR= environment variable\nphodevi: Cavium ThunderX detection\n\nPhoronix Test Suite 7.8.0-Folldal\n14 February 2018\n\npts-core: Various minor fixes\npts_Graph: Fix vertical bar graphs on many bars to be rendered\n\nPhoronix Test Suite 7.8.0 Milestone 3\n5 February 2018\n\npts-core: Fix crash in stress-run when PHP PCNTL is missing\npts-core: When installing a test that is marked deprecated/experimental/broken, ensure to convey that to the user\npts-core: When installing a test that is of license retail/restricted, ensure to convey that to the user\npts-core: Don't show tests in `list-available-tests` / `list-tests` that are not verified\npts-core: Improvements to `info` sub-command for test profiles in highlighting tests that may have problems and also show pre/post messages\npts_Graph: Fix when manually forcing line graphs sometimes still yielding bar graphs\nphodevi: spectre_v1 and spectre_v2 protection reporting\nphodevi: LXQt desktop detection\nphodevi: Don't cache the compiler in case external dependencies install a new compiler, etc\n\nPhoronix Test Suite 7.8.0 Milestone 2\n14 January 2018\n\npts-core: Allow local/other tests not part of OpenBenchmarking.org to be downloaded from a Phoromatic Server\npts-core: Fixes for make-download-cache sometimes not caching tests/suites\npts-core: Drop the pts_test_notes_manager since pts_test_run_manager already had better capabilities built-in\npts-core: Add dump-phodevi-properties helper to assist in debugging and porting to new platforms\npts-core: Interactive mode improvements\npts-core: The `phoronix-test-suite gui` has been unmaintained and can be considered deprecated\npts-core: Add `phoronix-test-suite search` for conducting basic searches from the CLI\npts-core: When running `phoronix-test-suite info <test profile>`, show the OpenBenchmarking.org change-log for that test profile too\npts-core: When running `phoronix-test-suite info <test profile>`, show local test results containing this test\nphodevi: Append BIOS version to end of motherboard string\nphodevi: Strip invalid chars from BIOS version parsing\nphodevi: Reworked property handling\nphodevi: KDE Plasma 5 detection improvements\npts_Graph: Add allow_box_plots graph configuration tunable\npts_Graph: Restore support for allowing vertical bar graphs, can be enabled by editing graph-config.json with bar_graphs_horizontal = false\n\nPhoronix Test Suite 7.8.0 Milestone 1\n8 January 2018\n\npts-core: Add meson to external dependencies\npts-core: Other external dependency updates\npts-core: Various minor improvements when running on Docker/containerized\npts-core: Phoroscript interpreter improvements for Windows\npts-core: Allow PTS_WEBSOCKET_PORT environment variable to be used to override WebSocket port when launching Phoromatic Server\nphodevi: Add some missing handling around /dev/vd* disks\nphodevi: Add BIOS version reporting property\n\nPhoronix Test Suite 7.6.0-Alvdal\n7 December 2017\n\npts-core: Just minor changes\n\nPhoronix Test Suite 7.6.0 Milestone 4\n3 December 2017\n\npts-core: Gentoo external dependency handling updates\npts-core: Better external dependency handling when running on EC2 instances\nphodevi: Add new gpu.memory-usage sensor initially supported on NVIDIA\n\nPhoronix Test Suite 7.6.0 Milestone 3\n21 November 2017\n\npts-core: Provide some basic graph size/count reporting on refresh-graphs sub-command\npts-core: make script shebang more portable\npts-core: Various styling updates\npts-core: More demanding debug-self-test\npts-core: Update Fedora's Python packages\npts_Graph: Turn line graphs to horizontal box plots if too much data to graph in space\nphodevi: physical CPU core detection count on macOS\nphodevi: GPU power consumption sensor support via nvidia-smi\nphodevi: NVMe drive temperature reporting on Linux\nphodevi: Better memory model detection on Linux\n\nPhoronix Test Suite 7.6.0 Milestone 2\n2 November 2017\n\npts-core: Add LEDE external dependency handling support\npts-core: Drop ports-based external dependency handling for FreeBSD and instead encourage pkg\npts-core: Network MAC address detection on OpenBSD\nphoronix-test-suite: Check for php-cli as binary option\nphodevi: Motherboard detection support on BSD using smbios.planar.product\nphodevi: hw.cpu_topology_core_ids support for physical core count on BSD\nphodevi: Allow BSD GPU detection via pciconf data\nphodevi: BSD chipset detection\nphodevi: VT EFIFB resolution detection\n\nPhoronix Test Suite 7.6.0 Milestone 1\n10 October 2017\n\npts-core: Add external dependency handling for MidnightBSD / mport\npts-core: Improved handling of IP/MAC detection to try to figure out the default interface\npts-core: Wake-On-LAN handling detection improvements\nphoromatic: Try using systemctl poweroff first when trying to turn off a system\nphodevi: Add memory.temp sensor\nphodevi: Fixed k10temp CPU temperature reporting\nphodevi: Add IPMI ambient temperature support\nphodevi: Some CPU/GPU temperature reporting improvements\nphodevi: Ignore reporting 'MS-DOS FAT32' EFI file-system on macOS\nphodevi: Add Bcache reporting support\nphodevi: Add APFS Apple File-System detection on macOS\nphodevi: Tweaks for macOS High Sierra\nphodevi: Restructure CPU core/thread reporting in system tables\nperf_per_dollar: Add \"phoronix-test-suite perf_per_dollar.add <result file>\" to allow perf-per-dollar graphs to be added after the fact\n\nPhoronix Test Suite 7.4.0-Tynset\n19 September 2017\n\npts-core: Improve command documentation categories/organization\npts-core: Fix install time reporting from the info sub-command when passing a test profile\npts-core: Add network-info sub-command\npts-core: Java external dependency updates\npts-core: Add maven external dependency\nphodevi: NVMe disk reporting on BSDs\npts_Graph: Allow line graphs to have adjustable floor/bottom to better present data on graph\n\nPhoronix Test Suite 7.4.0 Milestone 4\n11 September 2017\n\npts-core: Report on updated OpenBenchmarking.org index update when new/updated tests are introduced\npts-core: Add TEST_EXEC_PREPEND support\npts-core: Ensure XAUTHORITY gets passed if relevant to test execution\npts-core: Fixed dynamic dependency handling on Ubuntu 17.10 / apt-file with newer versions\npts-core: Fix warning about passing variables by ref to PTS modules\npts-core: Add nasm external dependency entries\npts-core: Ensure duplicate dependencies to install don't become present\nphodevi: Add basic Budgie desktop reporting\nphodevi: IPMI fan speed reporting\nphodevi: EPYC detection\ntoggle_screensaver: improved GNOME screensaver handling\ntoggle_screensaver: work better under Wayland / non-X environments where display server might not be detected\n\nPhoronix Test Suite 7.4.0 Milestone 3\n28 August 2017\n\npts-core: Reworked test exit status handling\nob_auto_compare: New module for seamless OpenBenchmarking.org result references\ngraphics_event_checker: Drop graphics_event_checker module as really provides no real benefit these days\nphodevi: Improve CPU physical core count detection for multi-socket systems\n\nPhoronix Test Suite 7.4.0 Milestone 2\n15 August 2017\n\npts-core: Resolve possibility of first graph missing when exporting results as PDF\nphodevi: WSLFS (Windows Subsystem for Linux) file-system detection\nphodevi: Add monitor detection based on parsing EDID supplied by `xrandr --prop` (works well for newer NVIDIA setups)\nphodevi: Initial \"system type\" support\n\nPhoronix Test Suite 7.4.0 Milestone 1\n31 July 2017\n\npts-core: Don't show PTS version when there is no sub-title, just leave it empty\npts-core: Add phoronix-test-suite unload-module sub-command\npts-core: Add phoronix-test-suite auto-load-module sub-command\npts-core: Drop juju scripts as appears unmaintained, happy to re-add if maintained\npts-core: Allow showing existing results from a result file in-progress on test runs\npts_Graph: Color tweaking\nphodevi: Clear up extra potential fluff in the GPU model string\nperf_tips: New module to indicate various performance tips to users\n\nPhoronix Test Suite 7.2.1-Trysil\n30 June 2017\n\npts-core: Don't pass arguments in quotes to pre/interim/post test scripts\npts-core: Minor optimization to is_test_profile() and more easily allow explicit paths to be used, overriding what's in OB cache\npts-core: Minor optimization to is_suite() and more easily allow explicit paths to be used, overriding what's in OB cache\npts-core: Fix warning in pts_test_result_parser\nphodevi: AVX-512 reporting\n\nPhoronix Test Suite 7.2.0-Trysil\n8 June 2017\n\npts-core: Add TurnCharsToSpace support to result parser\npts_Graph: Fix multi-way comparison detection\n\nPhoronix Test Suite 7.2.0 Milestone 4\n3 June 2017\n\npts-core: If a OB upload fails with system logs, try again without system logs\npts-core: Add basic dump-tests-to-git sub-command\npts-core: Add basic dump-suites-to-git sub-command\npts-core: Result parser fixes/improvements\npts-core: Additional safety checks around loading test result arguments from a result file\npts-core: Add \"vulkan-development\" external dependency\npts_Graph: Few tweaks/clean-ups\npts_Graph: Allow optionally specifying custom colors via the GRAPH_HIGHLIGHT environment variable\nphoromatic: Introduce support for setting a run-priority on test schedules\n\nPhoronix Test Suite 7.2.0 Milestone 3\n26 May 2017\n\npts-core: Result parser fixes for some advanced corner cases\npts-core: Add dump-file-info helper\nphodevi: Fallback for being able to read I/O scheduler on NVMe device on Linux\nphodevi: Monitor *DEBUG* environment variables\npts_Graph: Key alignment spacing fix\npts_Graph: Don't allow duplicate identifiers\npts_Graph: Various other alignment tweaks\nphoromatic: Handling for non-PCNTL support in Phoromatic client\n\nPhoronix Test Suite 7.2.0 Milestone 2\n4 May 2017\n\npts-core: Add SKIP_TESTS_HAVING_ARGS environment variable\npts-core: Parser improvements\nperf_per_dollar: Allow custom units, report on LIB graphs too\nphodevi: Add PGI compiler detection\n\nPhoronix Test Suite 7.2.0 Milestone 1\n14 April 2017\n\npts-core: Result parser improvements\npts-core: Add AppendToArgumentsDescription option to result parser capabilities\nsystem_monitor: Fix for when individual monitoring is disabled\nphodevi: Fix for listing dual 4K displays and other select multi-monitor configurations\n\nPhoronix Test Suite 7.0.1\n28 March 2017\n\npts-core: Support for network proxies with username/password requirement\npts-core: Improve formatting of text in 'info' sub-command\nphodevi: Improved detection for Quill AArch64 board and possibly other boards\nphodevi: Various sensor detection improvements for the Jetson TX2\nphodevi: Add fallback detection for ARM Mali\nreport_test_run_times: Add INSTALL_TIMES_ARE_A_BENCHMARK=1 option for generating install time graphs\nreport_test_run_times: Add INSTALL_SIZES_ARE_A_BENCHMARK=1 option for generating install size graphs\n\nPhoronix Test Suite 7.0.0-Ringsaker\n6 March 2017\n\npts-core: Make the AppStream meta data happy\npts-core: Improve formatting of PDF generation on large result files\nphodevi: Expand GCC version detection when -dumpversion isn't supported (e.g. gcc-snapshot of gcc 7.0.1)\n\nPhoronix Test Suite 7.0.0 Milestone 5\n28 February 2017\n\npts-core: Allow bzip2 compression of result file uploads to OpenBenchmarking.org\npts-core: Only preserve the original raw result string if it differs from the final result\npts-core: Show results in text mode when show-result sub-command is run without DISPLAY\nreport_test_run_times: new module to report test run times as result graphs\n\nPhoronix Test Suite 7.0.0 Milestone 4\n16 February 2017\n\npts-core: stress-run styling improvements\npts-core: External dependency XML updates\nphodevi: Continued tweaking on the new system information view\nphodevi: Append LLVM version to OpenGL driver string where relevant\npts_Graph: Continued tweaking of graph UI\npts_Graph: Allow more compact multi-way comparison graphs\npts_Graph: Various SVG size/efficiency optimizations\n\nPhoronix Test Suite 7.0.0 Milestone 3\n7 February 2017\n\npts-core: Add winners-and-losers sub-command for providing some first/last place finish stats\npts-core: Don't pass files greater than ~50MB to the result parser as likely too big to parse and invalid data like lots of warnings/errors from test\npts-core: Restructured test result parser\npts-core: Dropping of some deprecated checks\npts-core: Add ArgumentsDescription to the results-parser schema for appending a string to the used arguments description string on test execution\npts-core: Add the result-scale to the test profile comparison_hash (NOTE: any external data stores making use of the comparison_hash should thus rebuild their hash indexes)\npts-core: Allow one test run to generate multiple result outputs (graphs, etc) from multiple result-definition entries\npts-core: Drop secondary_linked_results handling now that all tests can create multiple result outputs natively, use that code path\npts-core: Add debug-result-parser sub-command as a way to debug test profile result-parser defintions, just scan for old test log files and don't actually execute test\npts-core: Restore setting the OpenBenchmarking.org ID to the ReferenceID field in the result file when cloning from OpenBenchmarking.org\npts-core: Various console coloring improvements\n\nPhoronix Test Suite 7.0.0 Milestone 2\n23 January 2017\n\npts-core: Indicate HIB/LIB result proportion when dumping results as CSV\npts-core: Introduce new view of system software/hardware details on test run and system-info command\npts-core: Drop detailed-system-info sub-command now that system-info is more verbose\npts-core: Eliminate pts_test_downloads_nye_XmlReader\npts-core: Eliminate pts_parse_results_nye_XmlReader abstraction\npts-core: A lot of cleanups / reworking of XML parsing in various components\npts-core: Cleanup phoronix-test-suite list-test-usage\nphodevi: Fix for hanging Windows client when requesting disk mount options\nphodevi: Don't rely upon X.Org DDX driver logic for determining GPU frequency since it's not portable to Wayland or with -modesetting DDX\nphodevi: Add microcode version reporting on Linux\n\nPhoronix Test Suite 7.0.0 Milestone 1\n12 January 2017\n\npts-core: Add estimate-run-time sub-command for estimating test/suite/result-file run length\npts-core: More external dependency coverage for BSDs\npts-core: Cleanup PTS_USER_LOCK / run-lock handling\npts_Graph: Add \"Ryzen\" product string to AMD's coloring\npts_Graph: Add \"Pentium\" product string to Intel's coloring\npts_Graph: Add option to disable color branding\nphoromatic: Set by default for SQLite database WAL journal mode / NORMAL synchronous\nphoromatic: Report status updates more often\n\nPhoronix Test Suite 6.8.0-Tana\n6 December 2016\n\nphoromatic: allow clearing warnings/errors of a system from the systems page\nphodevi: Rearrange ATI/AMD graphics checks\n\nPhoronix Test Suite 6.8.0 Milestone 3\n28 November 2016\n\npts-core: Ubuntu external dependency script fix\nphodevi: Improved video RAM detection via GLX_MESA_query_renderer\nphodevi: GPU detection improvements\nphodevi: vRAM detection change to help AMDGPU-PRO\nphodevi: Other product/model string improvements\n\nPhoronix Test Suite 6.8.0 Milestone 2\n15 November 2016\n\npts-core: Add new remove_inactive_systems option on systems page\npts-core: Fix malforming graphs when feeding many line graph results that are in a tracking-like manner that should be compacted to box plot\npts-core: Add PHP GD check as first thing when attempting to use result-file-to-pdf\npts-core: Add new module hooks for __test_log_output() and __post_test_run_system_logs()\nphodevi: Don't load Phodevi sensors prior to PHP 5.3 due to compatibility issues\nlog_exporter: Allow easily exporting test run and system logs via COPY_TEST_RUN_LOGS_TO and COPY_SYSTEM_LOGS_TO env vars\nflamegrapher: Experimental new module to generate Linux perf / FlameGraph graphs for each test being executed when active\nresults_custom_export: Example module for dumping PTS test results in custom formats\npts_Graph: Add Intel color highlighting for \"Celeron\" too\n\nPhoronix Test Suite 6.8.0 Milestone 1\n27 October 2016\n\npts-core: Add PHOROMATIC_HTTP_PORT environment variable for overriding Phoromatic Server HTTP port on starting it\npts-core: Don't preserve really large system logs (~1MB or greater per file)\npts-core: Strip http/https from proxy address if needed\npts-core: Update Solus external dependency handling\npts-core: Proper handling for when PHP ctype functions are not present\nphodevi: Also look for Vulkan ICDs at /usr/share/vulkan/icd.d/*.json\n\nPhoronix Test Suite 6.6.1\n29 September 2016\n\npts-core: Various BSD improvements\npts-core: Add list-not-installed-tests command (alias: list-uninstalled-tests)\npts-core: Detection for qupzilla browser when no alternative exists\npts-core: Add \"phoronix-test-suite php-conf\" sub-command to dump more useful PHP information for debugging\npts-core: Add python-scipy and python-sklearn external dependencies\nphodevi: Support for reporting memory frequency when overclocked if reported via \"Configured Clock Speed\" in dmidecode for RAM\n\nPhoronix Test Suite 6.6.0-Loppa\n6 September 2016\n\npts_Graph: On multi-way comparisons, always condense line graphs to modified box plots\n\nPhoronix Test Suite 6.6.0 Milestone 3\n26 August 2016\n\npts-core: Add OpenMandriva/urpmi PHP dependency helper to launcher\npts-core: After running tests, if no browser/display is available, offer to show results via CLI graph/text rendering\npts-core: Add a SVG DOM HTML back-end for lowering common SVG into pure HTML for cases like email clients where no SVG is supported\nhtml_results_export: New module exposed via EXPORT_RESULTS_HTML_EMAIL_TO and EXPORT_RESULTS_HTML_FILE_TO env vars for exporting HTML results\npts_Graph: When highlighting graph values, darken the color rather than use static color\n\nPhoronix Test Suite 6.6.0 Milestone 2\n7 August 2016\n\ndeploy: Update Debian packaging script\npts-core: Fix for upload-test-suite (on OpenBenchmarking.org side too)\npts-core: Show local suites in list-suites\npts-core: Ensure DragonFlyBSD pkg installation is done automatically\npts-core: Restructure bash on windows check\npts-core: Initial work on CLI terminal colored text output\nphoromatic: Web UI styling improvements\nphodevi: Show mdstat RAID Details when available\npts_Graph: Show extra disk details on system graph\n\nPhoronix Test Suite 6.6.0 Milestone 1\n6 July 2016\n\npts-core: Add OpenCV to external dependencies list\npts-core: Disable test cache share when run in stress-run mode\nphoromatic: Allow custom versions to be manually specified on test suite web UI page\npts_Graph: Show min/max results on multi-way comparisons\npts_Graph: Color string tweaks\nphodevi: Fix to allow GPU temperature sensor to work with AMDGPU-PRO driver stack\n\nPhoronix Test Suite 6.4.0-Hasvik\n2 June 2016\n\n[Only minor changes since 6.4 M4]\n\nPhoronix Test Suite 6.4.0 Milestone 4\n31 May 2016\n\npts-core: Automatically add used extra OpenBenchmarking.org repositories to the linked list\npts-core: Don't load empty tests on finish-run command\npts-core: Add perl-digest-md5 to external dependencies list\npts-core: Prevent duplicate tests/setting combinations from entering the same test run manager queue\npts-core: Fix for IE not scaling SVGs in the results viewer\npts-core: Finish new pts_test_suite API, port build-suite to it\nphoromatic: Support editing and deleting tests in local suites from the Phoromatic Server UI\nphodevi: More detection improvements for NVMe devices on Linux\n\nPhoronix Test Suite 6.4.0 Milestone 3\n26 May 2016\n\npts-core: XML formatting fix for non-OpenBenchmarking.org deployments\npts-core: Do more to avoid zombie processes in stress-run manager\npts-core: More robustness of the results parser with spaces (or lack of) near colons\npts-core: Rewritten pts_test_suite internals\nphodevi: Support for reading AMDGPU OverDrive overclock offset\nphoromatic: Add generalized \"Testing\" page to Phoromatic Server\nwatchdog: new PTS module for checking sensor readings to suspend/quit testing if exceeded\n\nPhoronix Test Suite 6.4.0 Milestone 2\n6 May 2016\n\npts-core: Allow XML formatting from the Phoromatic Server web interface\npts-core: Reformat stress-run log messages\npts-core: Add \"redis-server\" as a potential external dependency for providing Redis\npts-core: Statically set dynamic_run_count_on_length_or_less to 60\npts-core: Adaptively increase regression threshold level in points_of_possible_interest() when too many results are being flagged\nphoromatic: Fix selecting the same test itself on the \"build suite\" page\nphoromatic: Do hard deletes when deleting results from admin area or results page\nphoromatic: Add basic support for deleting \"local suites\" from Phoromatic web UI\nphoromatic: Allow exporting system test run/build errors to the exported public results viewer\nphoromatic: Add PTS_NO_REBOOT_ON_NETWORK_FAILURE environment variable for clients where if network failure occurs, Phoromatic clients will not reboot\nphodevi: Add ambient.temp sensor for reporting ambient temperature, currently supports temperv14 USB sensors\n\nPhoronix Test Suite 6.4.0 Milestone 1\n25 April 2016\n\npts-core: Many improvements to stress-run functionality\npts-core: Add Midori to supported browser list\npts-core: Add default logging support while running stress-run using phoronix-test-suite-stress.log filename\npts-core: Additional fallback for locating if running PTS as a user from their home directory\npts-core: Append date to phoronix-test-suite-stress-XXX.log when running stress-run\nphoromatic: Initial server-side implementation of new stress-run support via Phoromatic Server when going to \"Run A Benchmark\" and opting for stress mode\nphoromatic: Initial client-side implementation of new stress-run support\nphoromatic: Add basic email notification support to the Phoromatic export results viewer\nphoromatic: Say \"Stress Testing - XXX\" as Phoromatic status messages when in stress-run mode\nphoromatic: Add links to schedules/tickets from dashboard and system pages for active schedule/ticket on that system at the moment\nphoromatic: Fix for handling post-run event script\nphoromatic: Only run tests once each time called upon in stress-run mode\nphoromatic: Show systems in groups on benchmark ticketing page\nphoromatic: Don't reset fields when building suite and adding additional tests\n\nPhoronix Test Suite 6.2.2\n9 March 2016\n\npts-core: Fix for crash in stress-run mode\npts-core: Add OpenSUSE dynamic reverse dependency handler\npts-core: For the new result viewer, add Epiphany to the web browser list\npts-core: Void Linux external dependency support\npts-core: Alpine Linux (APK) external dependency support\nphoromatic: Don't use a proxy (if available) when trying to connect from Phoromatic client to server\n\nPhoronix Test Suite 6.2.1\n23 February 2016\n\nphodevi: Extra Vulkan information reporting\nphodevi: Add OpenCL version reporting to system software string\nperf_per_dollar: Fix for uninitialized test_result object\n\nPhoronix Test Suite 6.2-Gamvik\n16 February 2016\n\npts_Graph: Fixes\npts_Graph: Support for branded colors on more graphs\nphodevi: plumbing Vulkan\nmatisk: Fixes\n\nPhoronix Test Suite 6.2 Milestone 5\n5 February 2016\n\npts-core: Add golang as possible external dependency\nphodevi: Optimization for slightly faster start-up time\nphoromatic: Add WoL details to the maintenace table page\nphodevi: Sensor clean-up and fixes  (Jakub Maleszewski)\nmatisk: Restore the MATISK module for testing  (Jakub Maleszewski)\n\nPhoronix Test Suite 6.2 Milestone 4\n26 January 2016\n\npts-core: Fix for some test profiles not showing up in list-tests sub-command\npts-core: Add function for optionally removing unchanged results\npts-core: Add function for optionally removing noisy results\npts-core: Rework PDF generation of test results\nphoromatic: Add option to result viewer for exposing possible points of interest\nphoromatic: Add view_results_since support to the export results viewer\npts_Graph: Fix for graphs sometime not rendering correctly on multi-way comparisons\n\nPhoronix Test Suite 6.2 Milestone 3\n7 January 2016\n\npts-core: Add system to default list of repositories\npts-core: Allow result graph footnotes to be added during test time by writing to ~/pts-footnote\npts-core: Optimize array usage along hot paths\npts-core: Add httpd as a possible external dependency\npts_Graph: Rendering fix for collision of result identifiers\nphoromatic: Add LimitNetworkCommunication option\nphoromatic: Fix in listing tests on schedules page when dealing with cache mismatch\ndeploy: JuJu update from upstream\n\nPhoronix Test Suite 6.2 Milestone 2\n2 January 2016\n\npts-core: Add FullOutput configuration option for dumping all pre/post/interim information to standard output\npts-core: Add MinimalTestTime user configuration option\nphodevi: Software string detection improvements\nphodevi: Support for PTS_NPROC environment variable to override reported CPU core count\nphoromatic: Export viewer tweaks\n\nPhoronix Test Suite 6.2 Milestone 1\n15 December 2015\n\npts-core: Begin work on dynamic dependency handler infrastructure\npts-core: Add new TestProfile/SystemDependencies field to test profile specification\npts-core: Basic implementation of SystemDependencies for dynamically resolving system/external dependencies based on file name\nphoromatic: Allow public listing of download cache files when navigating in browser to /download-cache.php\nphodevi: Assume Windows is 64-bit when environment variable check fails\nphodevi: Support sys.power sensor monitoring fallback on BAT1\n\nPhoronix Test Suite 6.0.1\n20 November 2015\n\nphodevi: Fix potential errors in sensors\n\nPhoronix Test Suite 6.0-Hammerfest\n16 November 2015\n\npts-core: Stop logging lsusb as on some systems calling the command will hang\npts-core: Move common dependencies later in the external dependency handling process\npts_Graph: Fix multi-way comparison line graphs from color collision\nphodevi: NVIDIA Jetson TX1 GPU thermal monitoring support and likely will work for some other boards too\n\nPhoronix Test Suite 6.0 Milestone 6\n12 November 2015\n\npts-core: Windows updates\npts-core: Random fixes\npts-core / phodevi: Merge the complete system sensors rework: https://github.com/phoronix-test-suite/phoronix-test-suite/pull/92 (Jakub Maleszewski)\npts-core: pts_openbenchmarking::available_tests() don't show deprecated test profiles by default\nphodevi: Support reporting /sys/firmware/devicetree/base/model for part of motherboard/SBC string\nphoromatic: Final styling for hammerfest\n\nPhoronix Test Suite 6.0 Milestone 5\n4 November 2015\n\npts-core: Rewrite of the local results viewer, now use HTML+JS rather than XSL\npts-core: Fix finish-run command functionality\npts-core: Fix results getting compacted into single result comparison object when using a local test without version post-fix\npts-core: Fix CSV result output when there are missing results\npts-core: Properly handle spaces in shell_exec() export\npts-core: Other small fixes\nphodevi: Support for finding the Xorg.0.log in ~/.local/share/xorg/ with Debian now using that for non-root X Server\nphoromatic: Tweaks\ndocumentation: Update HTML template style\n\nPhoronix Test Suite 6.0 Milestone 4\n25 October 2015\n\nphoromatic: Start of reworking the web interface\nphoromatic: Initial responsive design, mobile friendly\nphoromatic: Support for exporting results as XML via the viewer\nlinux_perf: Add new module to provide perf output reporting on a per-test-run basis when LINUX_PERF=1 environment variable is set\npts_Graph: Tweaks\n\nPhoronix Test Suite 6.0 Milestone 3\n9 October 2015\n\npts_Graph: Continued SVG optimization work\npts-core: Fix \"auto-disks\" test option to not show partitions\npts-core: Various fixes\npts-core: Finish work on auto-authenticating clients / settings page option to automatically approve newly added systems by default\npts-core: Add extra warning about RequiresRoot=TRUE tests\npts-core: Detect NVMe drives when looking for block devices for disk testing\npts-core: Add \"smartmontools\" as new PTS External Dependency\npts-core: Rewrite the DragonFlyBSD external dependency handling to now use dports pkg rather than pkgsrc\npts-core: Add NO_HTTPS environment variable option for systems that have trouble with HTTPS\n\nPhoronix Test Suite 6.0 Milestone 2\n24 September 2015\n\npts-core: Just mention PHP 5.3 as the new base requirement. Code still should largely work with PHP 5.2, but don't advertise it\npts-core: Add FileFormat optional tag to result parser with CSV support\npts-core: Add debug-render-test for helping to optimize the graph/result rendering process\npts-core: Rendering optimizations when handling lots of result files / graphs / result identifiers\npts-core: Rework and optimize the pts_result_file\npts-core: Implement new, faster result merger\npts-core: Allow the test_run_manager to run directly with a result_file\npts-core: Do test execution with proc_open(), allow modules to tap the process\npts-core: Add support for emitting SVG files with g tag to save space\npts-core: Fix breakage of pass/fail type tests in result parser\npts-core: Drop unused PIE_CHART type\nphodevi: AMDGPU Linux detection improvements\nphoromatic: Add \"Tests\" page\npts_Graph: Don't embed the PNG logo directly into the SVG file, but rely on HTTPS link\npts_Graph: Support coloring based on brand\npts_Graph: Implement new internal graph rendering interfaces, other major rewrites\n\nPhoronix Test Suite 6.0 Milestone 1\n26 August 2015\n\npts-core: Show estimated date/time next to estimated duration left on tests\npts-core: Support /usr/lib/os-release for stateless systems\npts-core: Allow listing multiple items via the info sub-command\npts-core: Add new test profile parsing back-end\npts-core: Unconditionally always ensure __GL_SYNC_TO_VBLANK=0\npts-core: Fixes for test profile validation following recent restructuring\npts-core: WebSocket fixes\npts-core: Fix bash completion\nphoromatic: Improvements when server addressing setup fails\npts_Graph: Support reporting a min result on graphs when there is no max value to be reported\ntoggle_screensaver: GNOME 3 update\nperf_per_dollar: Add performance-per-dollar calculator module based on environment variable input\nsystem_monitor: Support reporting a meta/overall performance-per-Watt result at end of result file when activated\nphodevi: Add BcacheFS superblock\n\nPhoronix Test Suite 5.8.1\n23 June 2015\n\npts-core: Misc warning fixes\npts-core: Fix result file validation against XML schema\npts-core: Never show /boot/efi as possible benchmark writable mount point\npts-core: Don't report which errors on launcher\nphoromatic: Add button to schedules page to allow skipping current trigger\nphoromatic: Pass extra attributes during PDF generation to allow for PDF sorting, etc\nphoromatic: Allow basic sub-targeting as part of test schedule trigger URLs\nphoromatic: Enhancements to the main page\nphoromatic: Result tracker detection improvements\nphoromatic: Sort systems on main page\n\nPhoronix Test Suite 5.8-Belev\n5 June 2015\n\npts-core: Don't needlessly write out config file each time if nothing relevant has changed\npts-core: Automatically re-install tests if compiler flag environment variables change\npts-core: Add attr as an external dependency\npts-core: Fix for reading multiple dependency names\nphoromatic: Reboot system if comm fails 10+ times on client\nphoromatic: Add global checkbox to key pages\nphoromatic: Track core version of clients in database\nphoromatic: Refresh OB repository lists prior to benchmarks\nphoromatic: Additional validation on result uploads\nphodevi: Some basic hardware reporting improvements that help the MIPS Creator CI20\n\nPhoronix Test Suite 5.8 Milestone 5\n28 May 2015\n\npts-core: Major performance improvements when merging many result files\npts-core: Faster result file parsing\npts-core: Stress-run improvements\nphoromatic: Improved tracker page\nphoromatic: Updated maintenance page\nphoromatic: Log tick sensors into sensors-pool\nphoromatic: Show prominent sensors via the dashboard\nphoromatic: Add graphs to systems page\nphoromatic: Scale SVG result graphs to better page size\nphoromatic: Add phoromatic.export-results-for-account-schedules option\nphoromatic: Add the Phoromatic Export Viewer\n\nPhoronix Test Suite 5.8 Milestone 4\n20 May 2015\n\npts-core: Support for using DNF directly when available on Fedora\nphodevi: Report kernel's build date when detected it's running on a daily/devel/RC kernel\nphodevi: Fix for Radeon GPU voltage reporting\nphodevi: Improved open-source GPU frequency detection when X Server not active\nphoromatic: Various fixes\nphoromatic: Add support for specifying custom client update script via account settings page to keep clients PTS updated\nphoromatic: Change interface of reporting sensor values\n\nPhoronix Test Suite 5.8 Milestone 3\n12 May 2015\n\npts-core: Separate out WebSocket server back-ends\nphoromatic: Honor show_local_tests_only option via the build suite page\nphoromatic: Fix jumping on page on checkbox selection when scrolling\nphoromatic: Don't print network connectivity messages\nphoromatic: Set Phoromatic System Variables set by server on Phoromatic clients as env vars\nphoromatic: Lots of early Web Sockets work\nphoromatic: Initial support for the Mongoose Embedded Web Server, used by default if php-cgi and mongoose binaries are found in PATH\nphoromatic: Support for tick thread\nphoromatic: Support for reporting system sensors and client log to systems page\nphoromatic: Add support for real-time halt testing and rebooting from the Phoromatic Web UI\n\nPhoronix Test Suite 5.8 Milestone 2\n21 April 2015\n\npts-core: Fix potential crash in list-installed-suites sub-command\npts-core: Enforce CCACHE_DISABLE=1 during install/runtime testing\npts-core: Finish removal of hhvm-server support since it's long been discontinued upstream\npts-core: Add pts-core/hooks/startup\nphodevi: Reporting of Btrfs RAID levels to system component table when running disk tests\nphoromatic: Workaround for instr() usage in SQLite that caused issues with older distributions\nphoromatic: Add LetPublicViewResults option and new public results listing page\nphoromatic: Update results selection on rootadmin data page\nphoromatic: Start work on nginx server configuration (not yet working)\nphoromatic: Add \"System Targets\" info to benchmark ticket page & \"View All Past Tickets\"\n\nPhoronix Test Suite 5.8 Milestone 1\n2 April 2015\n\npts-core: Start moving possible deployment scripts into deploy/ directory\npts-core: Move phoromatic-client and phoromatic-server Upstart job files to deploy/\npts-core: Move phoromatic-client and phoromatic-server systemd service files to deploy/\npts-core: Add very basic result-file-to-json sub-command\npts-core: Drop AnonymousHardwareReporting / AnonymousSoftwareReporting as no longer used on OpenBenchmarking.org\nPull in JuJu scripts from https://github.com/juju-solutions/pts to deploy/juju\nphodevi: More allowance for clients to recover Internet connection / server communication failure\nphoromatic: Clean-up main page schedule for schedules with no associated systems\nphoromatic: Show matching ticket results in the compare results column on results page\nphoromatic: Allow results page to be limited to particular hash or ticket matches\nphoromatic: Allow results page search box to also search system's hardware/software components\nphoromatic: Fix for removing a system from all groups on the \"system group editing\" systems page\nphoromatic: Allow per-system overriding of whether automatic power-offs of system are permitted\nphoromatic: Get rid of block-poweroff file check in client module now that it can be done per-system from server-side\nphoromatic: Allow WoL power-ups for honoring benchmark tickets\nphoromatic: Unify more code from start.php into phoromatic_server\nphoromatic: Always unset the GRUB recordfail when applicable\nphoromatic: Add \"System Maintenance Table\"\nphoromatic: Add \"PowerOnSystemDaily\" setting option to ensure regardless of schedule that systems will at least power-up/communicate daily if enabled\nphoromatic: New checkbox handling on results page to manage comparisons and multi-delete results\nphoromatic: Start work on new main page\n\nPhoronix Test Suite 5.6.0-Dedilovo\n24 March 2015\n\npts-core: Drop bilde_renderer since it's been deprecated for a while\npts-core: Yield /dev/mapper/* points in auto-disk-mount-points\npts-core: Detect Internet presence for enterprise-setup\npts-core: cli_set_process_title() still emits error on OS X so block its usage\npts-core: Fix potential warning in detailed-system-info sub-command\nphodevi: HFS+ file-system fallback detection on OS X\nphodevi: Workaround Hyper Threading detection on OS X\nphoromatic: Add universal search functionality from web interface\nphoromatic: Improve formatting of annotations\nphoromatic: Mark system state as unknown when communication fails and hits the event server check\nphoromatic: Don't attempt to open DB in read-only mode if phoromatic.db not yet made\n\nPhoronix Test Suite 5.6 Milestone 5\n11 March 2015\n\npts-core: Ignore test run locking in stress/multi-run mode\npts-core: Allow 128 character result identifier strings\npts-core: Switch the dump-documentation sub-command to generating the README in md format\nphoromatic: Change the custom From email sender to Reply-To\nphoromatic: Finish hooking-up multi-test/stress-run functionality via the benchmark page\nphoromatic: Send emails from rootadmin or group admin's email address where applicable rather than no-reply@\nphoromatic: Scroll bar on local suites page condensing\nphoromatic: Add \"End Ticket\" option to benchmark page\nphoromatic: Allow stress tests up to 90 days\nphoromatic: Allow stress runs up to 24 concurrent tests\nphoromatic: Add basic support for annotating/commenting on result files and individual graphs\nphoromatic: Add support for the user to delete annotations\n\nPhoronix Test Suite 5.6 Milestone 4\n25 February 2015\n\npts-core: Improvements to phoronix-test-suite make-download-cache\nphoromatic: Add \"admin data\" page to let the rootadmin permanently delete schedules/results/systems\nphoromatic: Allow for system identifier variable in benchmark tickets of .SYSTEM\nphoromatic: Allow for system identifier variable in benchmark tickets of .GROUP\nphoromatic: Allow tickets to be removed from the individual benchmark page\nphoromatic: Allow creating new group accounts from the rootadmin page\nphoromatic: Add support for repeating tickets\nphoromatic: Add basic support for system variables\n\nPhoronix Test Suite 5.6 Milestone 3\n15 February 2015\n\nphoromatic: Allow triggers to be deleted\nphoromatic: Rely on caching for determining pre-existing cached test profiles from the web UI\nphoromatic: Add result RSS support\nphoromatic: Add new option to results page\nphoromatic: Enforce new PTS sign-on whenever the PTS core version changes due to potential interface changes\nphoromatic: Working build suite page\nphoromatic: Add support for local suites page\nphoromatic: Add benchmark page\nphoromatic: Add support for viewing issued benchmark tickets\nphoromatic: Add option to force rebuild of results databases\nphoromatic: Prepend system ID to result string when running multiple tests without variables\nphoromatic: Add \"Test All Options\" opton to build suite page\n\nPhoronix Test Suite 5.6 Milestone 2\n4 February 2015\n\npts-core: Various fixes\npts-core: Deb/RPM build packaging improvements.\npts-core: Add Markdown Readme file\npts-core: Add hidden ?seed_accountid= option to the welcome / account creation page for custom 6 character ID\npts-core: Fix for session save path on Fedora when running as normal user\npts-core: Import copy of FPDF locally for PDF rendering\nphoromatic: Add a public view of test results by going to result page entry -> Result Export -> Public Viewer\nphoromatic: Add basic \"Upload To OpenBenchmarking.org\" link from test result page\nphoromatic: Allow users to reset their own password by navigating to the settings page\nphoromatic: Add \"group name\" concept to Phoromatic group of accounts\nphoromatic: Improved formatting of the public-viewer page\nphoromatic: Allow downloading results as PDF\nphoromatic: Allow disabling new account registration by setting custom string via rootadmin's config page\nphoromatic: Allow setting a main page message string to show users once logging into their account, via rootadmin's config page\nphoromatic: Don't show idling systems on the dashboard\nphoromatic: Add IP ping test to system claim page\nphoromatic: Introduce PPRID structure as universal unique identifier for results between accounts\nphoromatic: Allow optional result sharing between groups / unique accounts (controlled via settings)\nphoromatic: Add \"force result sharing\" option to rootadmin to override per-account settings\nphoromatic: New result compare functionality\nphoromatic: Support for limiting results to a certain time period\nphoromatic: Add comparable results listing on individual result pages\nphoromatic: Register module-discovered Phoromatic Servers with pts-core\nphoromatic: Add \"Only Advertise Cached Tests\" option to rootadmin\nphoromatic: Download latest OpenBenchmarking.org test suites/profiles in background thread from the event server\nphoromatic: Add option to pre-seed test installs to systems when otherwise idling\nphoromatic: Support for exporting result files to download as CSV or TXT\nphoromatic: Add phoromatic.list-results sub-command for clients to view recent results\nphoromatic: Add phoromatic.clone sub-command for clients to clone viewable test results\n\nPhoronix Test Suite 5.6 Milestone 1\n13 January 2015\n\npts-core: Add \"short\" display mode\npts-core: Add stress-run command to allow for concurrent stress testing / burn-in / torture testing\npts-core: Add TOTAL_LOOP_TIME support to stress-run\npts-core: Add TOTAL_LOOP_TIME=infinite support to stress-run for testing in an infinite loop\npts-core: Add support for libframetime output result parsing\nphoromatic: Initial commit of basic tracker page\nphoromatic: Better recovery of existing Phoromatic accounts on reloaded systems where the machine self ID changed\ntimed_screenshot: Fix for crash when PHP GD missing\n\nPhoronix Test Suite 5.4.1-Lipki\n23 December 2014\n\npts-core: Update AppData and systemd service files\npts-core: Add csv-dump-frame-latencies support to result parser\nphoromatic: Improve formatting of result strings when merging random result files together\nphoromatic: Add enterprise-setup sub-command\nphoromatic: Attempt to detect and report IP address next to requested MAC address claim on the system claim page\n\nPhoronix Test Suite 5.4.0-Lipki\n9 December 2014\n\nphoromatic: Main page update\nphoromatic: Various updates\n\nPhoronix Test Suite 5.4 Milestone 7\n1 December 2014\n\npts-core: Improve MAC address acquisition on systems with multiple NICs\nphoromatic: Add add_new_users_to_account option for adding new users automatically to existing account\nphoromatic: Allow changing the admin level for users by the main administrator from the Users page\nphoromatic: Report systems MAC address from the systems page\nphoromatic: Report network's Wake-On-LAN information to Phoromatic Server\nphoromatic: Add notification option to email to users when systems appear hung for more than an hour\nphoromatic: Add option to power off systems when no more scheduled tests are scheduled for the day\nphoromatic: Add option to network wake on lan (WoL) systems when needed for testing\nphoromatic: Allow logging of Phoromatic set user context execution\nphoromatic: Add support for viewing system logs from the result page link on right hand side\nphoromatic: Support for disabling accounts via rootadmin\nphoromatic: Track elapsed time during the testing process, report to Phoromatic Server\nphoromatic: Allow Phoromatic Servers to be specified via a simple text file at PTS_USER_PATH/phoromatic-servers\nphoromatic: Add \"configure Phoromatic client via SSH\" to Phoromatic Server\nphoromatic: Allow IP/MAC based system claiming from Phoromatic Server UI\nphoromatic: Allow blocking poweroffs by touching modules-data/phoromatic/block-poweroff\nphoromatic: Prominently show \"systems needing attention\" from the server UI\nphoromatic: More email reporting of hung systems / systems not running tests when they should\nphoromatic: Add custom Wake-On-LAN packet generator if etherwake isn't found on server\nphoromatic: Show schedules/group on system page\nphoromatic: Hook in estimated time remaining for task\nphoromatic: Report percent complete of task to server\nphoromatic: Add system component table\nphoromatic: Add new reporting features to server\nphoromatic: Add system dashboard\nphoromatic: Add legacy init.d script support\nphoromatic: Rework idle support and add maintenance mode support to client\nphoromatic: Implement maintenance mode on server side\n\nPhoronix Test Suite 5.4 Milestone 6\n19 November 2014\n\npts-core: Fix result merging when PTS test identifier is null, use title string instead as identifier\npts-core: Check for PHP Sockets support\npts-core: Enhanced make-download-cache\npts-core: Enhance PHP_BIN detection\npts-core: Use system's zip library if PHP ZIP is not available\nphoromatic: Upstart phoromatic-server job is working (tested on Scientific Linux 6.6)\nphoromatic: Add \"Run Test Schedule Now\" button to test schedule page to allow for easy one-time/manual testing\nphoromatic: Add some basic statistics to the rootadmin page\nphoromatic: Allow the PhoromaticStorage location to be modified from the webUI when logging in as rootadmin\nphoromatic: Allow the download cache location to be modified from the webUI when logging in as rootadmin\nphoromatic: Allow the network proxy details to be modified from the webUI when logging in as rootadmin\nphoromatic: Allow the HTTP / WebSocket ports to be modified from the webUI when logging in as rootadmin\nphoromatic: Increase memory_limit on download cache downloads\nphoromatic: Expose all possible video modes as test options\nphoromatic: Show recent triggers on a test schedule's page\nphoromatic: Add \"Upload results to OpenBenchmarking.org\" option to settings page\nphoromatic: Fix for deactivating options on settings page\nphoromatic: Remember last successful Phoromatic Server connection\nphoromatic: Add reboot and shutdown commands to Phoromatic module\n\nPhoronix Test Suite 5.4 Milestone 5\n10 November 2014\n\npts-core: Improvements when running as a systemd service / daemon\npts-core: Prefer firefox over Epiphany browser\nphoromatic: Implement email notifications on result uploads\nphoromatic: Implement email notifications on system generated errors/warnings\nphoromatic: Implement email notifications on new systems added\nphoromatic: Allow easily comparing a result file to other results for that given schedule ID\nphoromatic: Improve formatting of lists\nphoromatic: Add times viewed to results\nphoromatic: Add \"show only results with variation\" to result viewing page\nphoromatic: Add result flagging to the main page\nphoromatic: Allow other/unscheduled test results to be uploaded to the Phoromatic Server using the phoromatic.upload-result sub-command\nphoromatic: Show file/path locations when starting the Phoromatic Server\nphoromatic: Use a randomly chosen available port by default when starting the Phoromatic Server if no ports are defined\nphoromatic: Add basic root administrator support to the Phoronix web interface\npts_Graph: Shrink size of sub-title text strings when they're too long\n\nPhoronix Test Suite 5.4 Milestone 4\n5 November 2014\n\npts-core: Add 3840 x 2160 (4K UHD) to more of the mode-setting fall-back modes\npts-core: Start working on support for using standard Linux file-system hierarchy when running as root as a service\npts-core: Add PhoromaticStorage option to Phoronix Test Suite user configuration XML file\nphoromatic: Reporting of overall result counts for given test schedules\nphoromatic: Report benchmarking / test run errors to server\nphoromatic: Show system errors/warnings from the Phoromatic web UI\nphoromatic: Don't attempt to re-run test schedules on clients if they previously reported errors/warnings for that schedule / trigger ID combination\nphoromatic: Usernames need to be at least four characters long\nphoromatic: Add a schedule overview to the schedules page\nphoromatic: Add today's scheduled events to the side bar\nphoromatic: Improve result identifier / title reporting for results\nphoromatic: Implement \"Power User\" account level\nphoromatic: Add normalize results option to the phoromatic result page\nphoromatic: Support for jumping to test results page for XXX past days of test from schedule page\nphodevi: IBM POWER hardware detection improvements\n\nPhoronix Test Suite 5.4 Milestone 3\n20 October 2014\n\npts-core: Introduce basic system logging capabilities for services\npts-core: Try downloading files from remote download caches up to two times in event of failure / checksum issues\nphoromatic: Start a basic logger of Phoromatic Server events\nphoromatic: Add new create schedule interface\nphoromatic: Properly hook in system ID / group validation for test schedules\nphoromatic: Support for editing schedules from the web UI\nphoromatic: Support for activating/deactivating \"deleting\" test schedules from the web UI\nphoromatic: Support for reporting the network MAC address (for later WoL purposes)\nphoromatic: Update the CSS style\nphoromatic: Add support for the main administrator to create multiple users associated with the same account\nphoromatic: Add support for \"viewer accounts\" where they can view data but not alter/write data\nphoromatic: Fix for adding systems to groups\nphoromatic: Support for mass editing of systems in groups via the systems page\nphoromatic: Support for removing system groups\nphoromatic: Introduce activity stream and logging of user events / display from \"activity events\" page\nphoromatic: Support for merging result files from the results page by clicking on each of them once\nphoromatic: Support for deleting results from the web UI's results page\n\nPhoronix Test Suite 5.4 Milestone 2\n5 October 2014\n\npts-core: Add \"ResultAfterString\" to test result parser XML schema\npts-core: Other result file parsing improvements/fixes\npts-core: Rename debug-run mode to debug-benchmark, add extra features\npts-core: Separate out NoNetworkCommunication user option into NoInternetCommunication/NoNetworkCommunication user config options for those still wanting LAN/intranet support\npts-core: Add support to PTS clients for automatically finding Phoromatic Servers using Avahi zero-conf network discovery\npts-core: Improvements to make-download-cache\npts-core: Improved detection of file downloads that fail and serve HTML 404/not found responses\npts-core: Convert to a JSON-based representation instead of XML for the pts-download-cache file\npts-core: Various file hash checking improvements during test installation\npts-core: Allow Phoronix Test Suite clients to automatically discover Phoromatic download-cache archives\npts-core: Rewrite most of the RPM package generator\npts-core: Support /usr/share/phoronix-test-suite/download-cache as another download cache by default\npts-core: Client support for being able to obtain OpenBenchmarking.org index/test/suite data from local Phoromatic Servers\npts-core: Improved dump-core-storage output\npts-core: Introduce machine_self_id as UUIDv5 compliant self-generated unique identifier for each PTS client\npts-core: Allow result file titles up to 126 characters in length\npts-core: Add start of basic Phoromatic Server systemd service file\npts-core: Add start of basic Phoromatic Server Upstart conf file\npts-core: Introduce make-openbenchmarking-cache sub-command for trying to cache all test/suite meta-data from OpenBenchmarking.org\npts-core: Allow PhoromaticServers user-config.xml to specify static Phoromatic Server IP:port information\npts-core: Initial Upstart and systemd configurations for the Phoromatic clients\nphoromatic: Begin allowing results to be stored locally, not dependent on OpenBenchmarking.org storage\nphoromatic: Advertise Phoromatic Server using Avahi zero-conf networking service when avahi-publish available and AdvertiseServiceZeroConf user config option is TRUE\nphoromatic: Automatically setup download-cache over Phoromatic HTTP with the system's local download-cache archive\nphoromatic: Allow sharing OpenBenchmarking.org index/test/suite cache data from server with local Phoromatic clients\nphoromatic: Support pts-core's machine_self_id for system identification as an alternative to OpenBenchmarking.org GSID\nphoromatic: Add phoromatic.explore sub-command for showing discovered Phoromatic servers and their server/debugging information\nphoromatic: Add a cache settings page to the web interface\nphodevi: Allow GPU frequency detection for DRM/KMS drivers when no X Server DDX is detected\nphodevi: Allow multiple providers for one VFS entry in case of failure in prior commands/files\nphodevi: Allow reading X Server log from the systemd journalctl\nphodevi: Restructure when /etc/os-release is parsed for obtaining OS name/version information\nsystem_monitor: Allow user-set time interval period between sensor measurements using MONITOR_INTERVAL environment variable\n\nPhoronix Test Suite 5.4 Milestone 1\n5 September 2014\n\npts-core: Sanitize pts_result_file user strings\npts-core: Don't set memory_limit with HHVM\npts-core: Drop phoromatic_legacy support (old Phoromatic.com version)\nsystem_monitor: Correct perf-per-Watt calculation for LIB results\nphodevi: Support Nouveau's pstate formatting changes to read core/mem MHz on newer kernels\nphodevi: Support for reading monitor EDID over sysfs, decoding descriptors, and obtaining monitor name (should improve monitor name reporting for Intel Linux systems)\nphodevi: Improved SoC detection\npts_LineGraph: Alignment fix for keys\n\nPhoronix Test Suite 5.2.1-Khanino\n11 July 2014\n\npts-core: Add VDPAU as a dependency to the xorg-video external dependency on more platforms\npts-core: Don't check OpenBenchmarking.org credentials when the network is down\npts-core: Rework result-file-to-text sub-command, show text-based graph results\nphodevi: Improve NVIDIA binary driver GPU utilization detection\nphodevi: Add DDE / Deepin Desktop Environment detection\npts_Graph: Few minor graph alignment corrections\n\nPhoronix Test Suite 5.2.0-Khanino\n5 June 2014\n\npts-core: Support for GZ compressing result file XML data before uploading to OpenBenchmarking.org\npts_Graph: Further graphing improvements\n\nPhoronix Test Suite 5.2 Milestone 4\n29 May 2014\n\npts-core: Always report the CPU scaling governor to the system table\npts-core: Add auto-sort-result-file option\nphoromatic: Improve the systems' page\nphoromatic: Allow up to three connection failures before quitting\npts_Graph: Improved, cleaner, and more accurate rendering of the pts_OverViewGraph\npts_Graph: Make the horizontal box chart graph in good shape\npts_Graph: Revert earlier render_graph_value_ticks() change by mufasa72 as it produced inaccurate tick values\npts_Graph: use the horizontal box plot when rendering frame times for large number of results\npts_Graph: Various other graphing improvements\n\nPhoronix Test Suite 5.2 Milestone 3\n22 May 2014\n\npts-core: Be more strict in handling DynamicRunCount option\nphoromatic: Cleaning up more of the Phoromatic UI\nphoromatic: Support for updating the system status\nsystem_monitor: Allow extra idling time at begin and end of testing process\npts_Graph: Improve formatting of line graph keys\nphodevi: Detection support for KDE Frameworks 5 / Plasma Next desktop\n\nPhoronix Test Suite 5.2 Milestone 2\n18 May 2014\n\npts-core: Add RUN_TESTS_IN_RANDOM_ORDER environment variable to cause tests to run in a random order\npts-core: Add sdl2-development to PTS External Dependencies\npts-core: Fix regression from 5.2m1 that broke some areas of the GUI / web interface\npts_Graph: Render min/avg/max stats at top of line graphs (thanks to mufasa72)\n\nPhoronix Test Suite 5.2 Milestone 1\n8 May 2014\n\npts-core: Fix for not writing null test result file titles\npts-core: Fix & improvements to PRESET_OPTIONS environment variable\npts-core: Rename old/legacy phoromatic module to phoromaric_legacy\npts-core: Allow a range of test run options to be inputted (e.g. 2-5) to complement just a single test option or delimited by commas\npts-core: Fix for NOT saving test results when in batch-run mode and configured against saving\npts-core: Allow TEST_RESULTS_IDENTIFIER environment variable to be used when running tests unconditionally\nphodevi: Improvement for detecting optimal NVIDIA Linux GPU core frequency on modern GPUs\nphodevi: Add GPU usage reporting support to open-source AMD Radeon driver via RadeonTOP\n\nPhoronix Test Suite 5.0.1-Plavsk\n2 April 2014\n\npts-core: Add \"libudev1:i386\" to \"32bit-compatibility\" external dependency for Ubuntu Linux\npts-core: Add invalid command helper to force-install sub-command\npts-core: Add \"pcre\" external dependency\npts-core: Add pushover_net module as a way of sending iOS/Android push notifications of results using Pushover.net\npts-core: Ensure the result file description properly updates when adding to result files with new data\npts-core: Add edit-result-file command that allows for editing a result file's title and description\npts-core: Workaround HTTPS OpenBenchmarking.org proxy issue\npts-core: Improved handling when the system's php.ini is using a restricted open_basedir setting\npts-core: Arch Linux support improvements\npts-core: When PTS client fails to find ZIP support, emit a PTS error\npts-core: Ship an AppData file (phoronix-test-suite.appdata.xml)\ntoggle_screensaver: Disable on OS X since there is no support for automatically disabling the OS X screensaver and causes collision with MacPorts\nphodevi: Add extra checks to ensure NVIDIA blob doesn't get reported as Nouveau DDX due to kernel changes\n\nPhoronix Test Suite 5.0-Plavsk\n12 March 2014\n\npts-core: Improvements to run-random-tests\npts-core: Support for running the HTML5 UI on Microsoft Windows\npts-core: Rename RemoteAccessAllowed user configuration option to RemoteAccessPort\nphodevi: Improve MATE detection\nphodevi: Improve desktop environment recognition with $DESKTOP_SESSION\nphodevi: Ensure GCC's minor version number is reported\n\nPhoronix Test Suite 5.0 Milestone 3\n3 March 2014\n\npts-core: Windows 8.1 support improvements\npts-core: Add SKIP_TESTING_SUBSYSTEMS environment variable, partially based on former ONLY_TEST_TYPES\npts-core: Add a run-random-tests command to run random tests/workloads on the system\nphodevi: Improve NVIDIA DDX version detection\nphodevi: Improve audio detection\nphodevi: Add extra fallback for trying to read Radeon DRM core and memory frequencies on recent kernels\n\nPhoronix Test Suite 5.0 Milestone 2\n17 February 2014\n\npts-core: Add rename-result-file option\npts-core: WebSocket bug-fixes\npts-core: Other bug-fixes\npts-core: Disable the compiler-mask by default on FreeBSD/PC-BSD due to potential test installation issues on 10.0-RELEASE\npts-core: Split webui command into gui and start-remote-gui-server (local HTML5 GUI support) commands (remote + local HTML5 GUI support)\n\nPhoronix Test Suite 5.0 Milestone 1\n6 February 2014\n\npts-core: Add web-server-launcher support\npts-core: Support starting HHVM as a web server\npts-core: Startup speed optimizations\npts-core: Cleaned up code error reporting/handling\npts-core: Add server remote access and password options to user-config.xml user configuration options\npts-core: Adjust handling of PTS OpenBenchmarking.org downloading of test profile order and hash handling\npts-core: Reduce unnecessary communication with OpenBenchmarking.org network server\npts-core: Support system identifier strings up to 64 characters\npts-core: Add LIMIT_ELAPSED_TEST_TIME to limit the amount of time (in minutes) for a given Phoronix Test Suite process to complete its testing\npts-core: Allow null descriptor strings\npts-core: Fix regex for version string\npts-core: Random fixes\nphodevi: Various improvements\nphodevi: Improved disk scheduler fallback reporting\ndocumentation: Update to point out new Git location at github.com/phoronix-test-suite/ over Phorogit\nnye_Xml: Fix for writing zeros in XML tags when using the \"when not empty\" function\n\nPhoronix Test Suite 4.8.6-Sokndal\n10 December 2013\n\npts-core: Print out pre/interim/post test script outputs when running in debug-run mode\npts-core: DragonFlyBSD 3.6.0 support improvements\npts-core: Support using DragonFlyBSD dports package management system for external dependencies\npts-core: NO_FILE_HASH_CHECKS environment variable also doesn't enforce MD5/SHA256 checks on make-download-cache sub-command\npts-core: Pass test arguments to pre/interim/post test profile scripts; ESET / Michal Zatloukal patch\npts-core: Don't do dynamic test run counts when using system_monitor module\npts-core: Support reading the full terminal width using stty as tput cols doesn't seem to report anything but 80 with shell_exec()\npts-core: Add \"tiff\" external dependency for providing libtiff and header files\npts-core: Don't offer to save test results when using debug-run mode\nphodevi: Support reading monitor vendor/model numbers when using the binary NVIDIA Linux driver, including recent versions\nphodevi: Improve multi-monitor resolution reporting when sharing an X.Org Server\nphodevi: Remove more useless compiler path argument reports\ntoggle_screensaver: Auto unload module when no display server found\n\nPhoronix Test Suite 4.8.5-Sokndal\n22 November 2013\n\npts-core: Improve formatting of interrupt messages with the (default) concise display mode\npts-core: Don't remove test install files on installation failures\npts-core: Allow download-test-files command to use OpenBenchmarking.org IDs\npts-core: Don't dynamically increase the test run count when dealing with cache shares\npts-core: Fix for not opening the web-browser in batch mode\npts-core: Add zypper SUSE help support when not finding PHP\nphodevi: Add support for Nouveau PSTATE parsing on Linux 3.13+\nphodevi: Recognize 'HIS' (Hightech Information System) graphics cards\nphodevi: Recognize 'ZOTAC' graphics cards\nphodevi: Fix redundant monitor model reporting detection on Catalyst\nphodevi: Add support for NVIDIA-Settings GPUUtilization in gpu.usage sensor\n\nPhoronix Test Suite 4.8.4-Sokndal\n7 November 2013\n\npts-core: Allow web browsers and graphics tests to work on $WAYLAND_DISPLAY when $DISPLAY is not set\npts-core: Fix for libstdc++ on Gentoo external dependency\npts-core: Add a ResultScale XML tag option for the results-parser to provide custom ResultScale values depending upon selected parser option\npts-core: Add a ResultProportion XML tag option for the results-parser to provide custom result proportion values depending upon selected parser option\npts-core: Add ResultPrecision XML tag to results-parser for setting math precision of decimal points on result (default remains 2)\npts-core: Add support for writing to $INSTALL_FOOTNOTE during test installations to report custom footnote on generated graphs\npts-core: Add SuiteSparse, TinyXML, DUNE external dependencies\npts-core: Add opencl header external dependencies for more platforms\npts-core: Refresh OpenBenchmarking.org repository index data file once upon hitting missing test profile\npts_Graph: Improve precision of increments for graph results with sub-1 values\nphodevi: Protect against \"undefined\" memory strings from DMI data\nphodevi: Add Wayland Weston version detection\nphodevi: Detect gnome-shell-wayland\nphodevi: Add support for CPU node-count property for number of physical CPU nodes\n\nPhoronix Test Suite 4.8.3-Sokndal\n2 October 2013\n\npts-core: Fix openmpi on Gentoo external dependency\npts-core: Detect graphics comparison when GPU changes with audio string\npts-core: Don't use HTTPS on proxies when connecting to OpenBenchmarking.org\npts-core: Add VersionSpecific capability to external dependencies handling for package(s) that may only be in certain OS versions\npts-core: Ensure xscreensaver is deactivated\npts-core: Support toggling GNOME3 screensaver on GNOME 3.8+ where org.gnome.desktop.screensaver idle-activation-enabled -> org.gnome.desktop.session idle-delay\nphodevi: Fix for parsing long PCI string values\nphodevi: Improve Intel GPU model detection with recent xf86-video-intel DDX\n\nPhoronix Test Suite 4.8.2-Sokndal\n30 August 2013\n\npts-core: Fix for reporting environment variables to system notes on system graph table\npts-core: Fix OpenBenchmarking.org class issue for select code paths\n\nPhoronix Test Suite 4.8.1-Sokndal\n14 August 2013\n\npts-core: Fix OpenBenchmarking.org log-ins\n\nPhoronix Test Suite 4.8.0-Sokndal\n13 August 2013\n\npts-core: When PHP is missing, for apt-get/yum distributions report the likely command needed to run\npts-core: Don't prompt to install missing/failed tests when using the 'benchmark' command\nphodevi: Support for reading the Radeon DRM driver's current core/memory frequencies when DPM is enabled (Linux 3.11+)\nphodevi: Support for reading the top Radeon DRM driver core/memory frequency via dmesg when DPM is enabled (Linux 3.11+)\nphodevi: Support for reading the Radeon DRM driver's current GPU (vddc) voltage when DPM is enabled (Linux 3.11+)\nphoromatic: Updated module against latest upstream Phoromatic.com Server\n\nPhoronix Test Suite 4.8 Milestone 5\n6 August 2013\n\npts-core: Add php5-json as a dependency now on Debian packages since Ubuntu split it up and no longer in php5-cli\npts-core: Add support for reporting set kernel module parameters to notes on the system table graph\npts-core: Add support for reporting of important environment variables to notes on the system table graph\npts-core: Changes needed for modern Phoromatic\npts_Graph: Add new automated color chooser for line graph color selection\npts_Graph: Slight rework to code handling the remove of common words from result identifiers\nphodevi: Add support for Intel DRM driver's gt_max_freq_mhz for obtaining maximum GPU frequency on modern kernels\nphodevi: Add support for Intel DRM driver's gt_cur_freq_mhz for obtaining current GPU frequency on modern kernels\nphodevi: Only prepend AIB vendor to NVIDIA and AMD GPU strings\nphodevi: Add system.kernel-parameters property for reading kernel command line parameters\nphodevi: Add support for checking the __GL_FSAA_MODE environment variable\nphodevi: Add support for checking the __GL_LOG_MAX_ANISO environment variable\nphodevi: Add 0xc36400 super block for CephFS\nphodevi: Add unity-system-compositor version detection\n\nPhoronix Test Suite 4.8 Milestone 4\n24 July 2013\n\npts-core: Add initial support for test profile's downloads.xml to have a SHA256 hash for files\npts-core: Rename NO_MD5_CHECKS environment variable to NO_FILE_HASH_CHECKS\npts-core: Add PTS5 codenames from Tulskaya oblast / Tula Oblast Russian region\npts-core: Support fixes for Facebook HipHop Virtual Machine for PHP HHVM 2.1.0\npts-core: Fix text corruption bug with auto shortening of identifiers on multi-way comparisons\npts_Graph: Fix auto shortening when the first identifier is only one word\nphodevi: Support ECS and eVGA graphics card AIB vendor detection\n\nPhoronix Test Suite 4.8 Milestone 3\n19 July 2013\n\npts-core: Add few more cases of error detection on failed test install\npts-core: Round download size totals in the concise display mode for large files\npts-core: Add missing PreInstallMessage and PostInstallMessage to the OpenBenchmarking.org test profile schema and writer\npts-core: Allow test results to have \"secondary_linked_results\"\npts-core: Add initial support for frame latency / jitter secondary result graphs\npts_Graph: Assume any version of Google Chrome/Chromium can render SVG\npts_Graph: Only prepend 'v' to version string on graphs if first character is numeric\ntoggle-screensaver: Support doing \"xscreensaver-command -exit\" when needed\nphodevi: Add more stock fallback display modes\nphodevi: Ensure MB/GB are reported on OS X memory strings\nphodevi: Workaround Linux 3.10 kernel reporting bogus frequencies for scaling_max_freq on some Intel CPUs\nphodevi: Support prepending the graphics card / AIB vendor on GPU strings\n\nPhoronix Test Suite 4.8 Milestone 2\n6 July 2013\n\npts-core: Expand Mandriva Linux external dependency support to distributions having urpmi\npts-core: Add Apple OS X font paths for use by the GD graph renderer\npts-core: Add \"/usr/lib64/\" to the automated external dependency verification path\npts-core: Allow passing multiple test identifiers to remove with remove-from-result-file command\npts-core: Give a warning when the results viewer opens in the KDE Konqueror web-browser\nphodevi: Break operating system string at \"(\"\nphodevi: Don't return \"n/a\" from LSB release strings\nphodevi: IceWM window manager detection\nphodevi: Add gpu.temp safety check to prevent against AMD Catalyst OverDrive sending garbage\nphodevi: Fix for XRandR resolution query on XMir\nphodevi: Support using systemd-detect-virt as fallback for detecting Linux virtualization method\n\nPhoronix Test Suite 4.8 Milestone 1\n20 June 2013\n\npts-core: Don't show null error strings on failed test installations\npts-core: Allow test profiles to pass min/max data results through JSON to graphs using MIN_ and MAX_ prefixes\npts-core: Support displaying min/max data from the concise (default) display mode text output\nphodevi: MHz -> GHz fix for the cpu.freq sensor on Apple OS X\nphodevi: Add fallback support for using ioreg for calculating sys.power power draw on Apple OS X\nphodevi: Support reporting multiple monitor models from Xorg.0.log\n\nPhoronix Test Suite 4.6.1-Utsira\n6 June 2013\n\npts-core: Add ONLY_TEST_TYPES environment variable for skipping test profiles that don't belong to a certain hardware type\npts-core: Ensure extract-from-result-file opens the proper HTML web-browser\npts-core: Ensure copy-run-in-result-file opens the proper HTML web-browser\npts-core: Ensure reorder-result-file opens the proper HTML web-browser\npts-core: Ensure rename-identifier-in-result-file opens the proper HTML web-browser\npts-core: Ensure remove-from-result-file opens the proper HTML web-browser\npts-core: Reworked handling of browser launching in batch mode\npts-core: Launch the web browser to display results when using internal-run mode\nphodevi: Add Haswell BMI2 detection\nphodevi: Support vm_stat with the memory.usage sensor, works on OS X\nphodevi: Add new network.usage sensor for Apple OS X contributed by ESET\n\nPhoronix Test Suite 4.6.0-Utsira\n21 May 2013\n\nphodevi: Report CPU scaling driver along side the CPU scaling governor\n\nPhoronix Test Suite 4.6 Milestone 2\n16 May 2013\n\npts-core: Support compiler masking on short binaries\npts-core: More advanced detection of compiler flags within the compiler masking process\npts-core: DragonFlyBSD external dependency packaging updates\npts-core: Various fixes\nphodevi: Fix for cpu.freq sensor reading on Apple OS X\n\nPhoronix Test Suite 4.6 Milestone 1\n11 April 2013\n\npts-core: Official support for Facebook's HipHop HHVM PHP\npts-core: Introduce new pts_define interface\npts-core: Add debug-self-test option for running a self-hosting PHP/PTS performance test\npts-core: Support PHP 5.4's cli_set_process_title() function\npts-core: For now don't use PHP CURL on HipHop HHVM due to issues\npts-core: Ubuntu 13.04's sudo seems to have problems with the external dependency handling\npts-core: Add internal-run command for running benchmarks in semi-automated manner and without uploading data to OpenBenchmarking.org\nphodevi: Fix for memory reporting on OS X\nphodevi: Improved LLVM Clang compiler version detection with modern Apple Xcode\nphodevi: Improved Intel Linux GPU overclocking frequency detection\nphodevi: Fix for detecting new (319.xx) NVIDIA Linux driver X.Org driver\n\nPhoronix Test Suite 4.4.1-Forsand\n14 March 2013\n\npts-core: Add the arm-linux-gnueabihf library directory for PTS External Dependency checks\npts-core: Add SKIP_ALL_TEST_SUPPORT_CHECKS environment variable\npts-core: Fix screen resolution listening when the resolution fails to be detected through Phodevi\npts-core: Update openSUSE external dependencies\npts-core: Strip \"project\" from reported strings\nphodevi: Add support for detecting the Razor-qt desktop environment\nphodevi: No longer report the Catalyst marketing version number since the DDX is no longer reporting it reliably\nphodevi: Detect if the X.Org Server DDX module was unloaded\nphodevi: Reorder DDX driver fallback detection\nphodevi: Cleanse eCryptfs sig and cipher from showing in mounts file\nphodevi: Improve Linux memory RAM type detection\n\nPhoronix Test Suite 4.4.0-Forsand\n26 February 2013\n\npts-core: Improvement for detecting installed libraries for external dependency handling\npts-core: Address redundant dash handling within the result file save name\nphodevi: Support for detecting SurfaceFlinger (Google Android)\nphodevi: Ensure non-ASCII characters are removed from Phodevi properties\nphodevi: Support for reading the OpenGL Core Profile information via glxinfo\n\nPhoronix Test Suite 4.4 Milestone 3\n14 February 2013\n\npts-core: Incorporate xx.yy (of xx.yy.zz) test profile version string into test result comparison_hash\npts-core: Return contained tests hash for result files as a raw SHA1\npts-core: Improving passing of compiler flags/options to be reported on test result graphs\npts-core: Support specifying just relative include files, shared libraries, and command names for file check in PTS External Dependencies\npts-core: Faster PTS External Dependencies resolution and file checking\npts-core: Support for falling back right away to the generic file check lists for packages if not supplied by OS-specific list\npts-core: Add MacPorts PTS External Dependencies support for handling some package dependencies on Apple Mac OS X\npts-core: Allow 3D tests to run when LLVMpipe OpenGL is present regardless of the display driver loaded for the graphics card\nphodevi: Add file-system magic blocks for eCryptfs, AuFS, LustreFS, and Panasas PanFS\nphodevi: Add AVX2 (Advanced Vector Extensions 2) CPU instruction set detection\nphodevi: Support for detecting the new F2FS file-system\n\nPhoronix Test Suite 4.4 Milestone 2\n30 January 2013\n\npts-core: Improvement for detecting errors from failed test installations\npts-core: Allow \"Deprecated\" flag for ProfileStatus in the XML test profile schema\npts-core: Support for scanning test run log files automatically to look for errors when tests fail to execute\npts-core: Remove duplicate \"libtool\" PTS External Dependency\npts-core: Complete rewrite of the FreeBSD external dependency handling to use ports collection\npts-core: Enable BSD support for checking exit codes on test installation and test execution\npts-core: Various BSD support improvements\npts-core: Begin on DragonFlyBSD pkgsrc-based external dependency solution\nphodevi: Fix to improve Xfce version detection when Gtk-Warnings are thrown before the version string\nphodevi: Add Enlightenment desktop environment detection support\nphodevi: Add Consort Desktop Environment (GNOME Fork) detection support\n\nPhoronix Test Suite 4.4 Milestone 1\n23 January 2013\n\npts-core: Introduce 'common-dependencies' concept to PTS External Dependencies\npts-core: Fix reporting of some already installed dependencies\npts-core: Support for listing 'local/' tests from the list-supported-tests command\npts-core: Support for test profiles providing a 'support-check.sh' file\npts-core: Support for reporting the Graphics AA/AF values to the system notes table\npts-core: Add a public version of the TODO list\npts-core: Don't attempt copying install.log to install-failed.log on empty files\npts-core: Add fallback to allow matching an operating system to an external dependencies package list based upon the detected package manager\npts-core: When anonymous usage reporting is enabled, report test installation failures to OpenBenchmarking.org for analyzing problem\npts-core: Support for detecting common errors within test profile install failures and reporting the relevant information to the user\npts-core: When installing many tests and there are install failures, conveniently show the errors at the end\npts-core: When installing multiple tests, report any unknown test profiles/suites\npts-core: Faster loading of list-available-tests command by not forcing all test profile data be downloaded\npts-core: Progressively download OpenBenchmarking.org in list-available-suites command to display information faster\nphodevi: Improve Nouveau video RAM memory capacity detection on newer Linux kernels\nphodevi: Warning fix for Radeon GPU frequency detection\nphodevi: Drop \"special_settings_string\" support\nphodevi: Support for checking if the Gallium3D anti-aliasing level was overrode using GALLIUM_MSAA environment variable\n\nPhoronix Test Suite 4.2.0-Randaberg\n20 December 2012\n\npts-core: Fix SVG render detection on Firefox/Gecko 17.0\npts-core: Fix for breaking quoted args with internal spaces (reported by _rubio_)\npts-core: Add glibc-static to build-utilities external dependency on Fedora\npts-core: Fix for using the SKIP_TESTS environment variable causing a fatal error\npts-core: Phoronix Test Suite 4.4 is codenamed Forsand\nphodevi: Improved detection of power consumption from batteries in certain Linux configurations\n\nPhoronix Test Suite 4.2 Milestone 3\n22 November 2012\n\npts-core: Don't report null times for estimated run-time\nphodevi: Support for determining the build configuration on LLVM 3.2 where llvm-ld is llvm-link\nphodevi: Hard fall-back support for detecting the xf86-video-modesetting driver usage\ntoggle_screensaver: Disable blanking of the terminal screen when running tests\n\nPhoronix Test Suite 4.2 Milestone 2\n22 October 2012\n\npts-core: Add list-recommended-tests option for providing subsystem test recommendations based upon OpenBenchmarking.org popularity/usage\npts-core: Add auto-compare option for automatically determining relevant OpenBenchmarking.org result comparisons based upon software/hardware\npts-core: Allow passing test profile names to auto-compare to seed it with the test(s) you wish to use for comparison\npts-core: OpenBenchmarking.org now supports system log payload sizes up to 2MB\npts-core: Object-ify PTS external dependency handling\nphodevi: Split some functions into new phodevi_base class\n\nPhoronix Test Suite 4.2 Milestone 1\n8 October 2012\n\npts-core: Support download caches at /media/*/*/download-cache/\npts-core: Support OPENGL_DRIVER as a run-time variable\npts-core: For external dependency handling, treat Linaro as Ubuntu\npts-core: Check for null distribution-specific external dependency package names\npts-core: Formatting improvements to result-file-to-text output\npts-core: Add openssl-development as a new test external dependency\npts-core: Don't warn on out-of-date test profiles when being run in batch mode\nphodevi: Support for reading the VirtualBox version of Beta/RC versions\nphodevi: Better support detection for Exynos ARM cores\nphodevi: Initial support for reading node power over IPMI\nphodevi: Initial support for reading core temperature over IPMI\nphodevi: On Linux attempt to determine the install RAM's vendor and product part number\ntoggle_screensaver: Support for module suspending the Xfce4 desktop screensaver using xfconf-query\npts_Graph: Fix for vertical/rotated text in SVG -> GD translation\n\nPhoronix Test Suite 4.0.1\n21 August 2012\n\npts-core: Allow shortened test profile versions inputted by user to be expanded to matching latest version in stream\npts-core: Allow shortened test suite versions inputted by user to be expanded to matching latest version in stream\npts-core: Add list-unsupported-tests option for debugging purposes\npts-core: Add subversion as a PTS External Dependency\npts-core: Add git as a PTS External Dependency\npts-core: Add superlu as a PTS External Dependency\npts-core: Add libtool as a PTS External Dependency\npts-core: Hash within the result file all of the contained tests\npts-core: Support for anonymous usage reporting of test installation times to OpenBenchmarking.org\nphodevi: Fix memory RAM DIMM count detection in select configurations\nphodevi: Intel GPU string reporting improvement\nphodevi: Support for detecting multiple GPUs on Apple OS X\nphodevi: Support for detecting Gallium3D XA\nphodevi: Support for llvm-link on LLVM 3.2svn\n\nPhoronix Test Suite 4.0.0-Suldal\n23 July 2012\n\npts-core: Initial implementation of the PTS4 Local Results Viewer\npts-core: Initial command of ob-test-profile-analyze\npts-core: Fix for installing Ubuntu external dependencies in a headless mode\npts-core: Disable webui since it won't be ready until PTS 4.2\npts-core: External dependencies fix for SUSE Linux Enterprise Server 11\nphodevi: Additional fall-back support when GPU driver doesn't expose all standard mode-setting modes\nphodevi: Support for detecting and reading the version of the Cinnamon Desktop Environment\ntimed_screenshot: Overhaul of the timed screenshot PTS module\ntimed_screenshot: Compress PNG images\n\nPhoronix Test Suite 4.0 Milestone 4\n29 June 2012\n\npts-core: Support download caches at /run/media/*/*/download-cache/\npts-core: Set SKIP_TEST_SUPPORT_CHECKS=1 environment variable for debugging purposes to run tests on unsupported platforms\npts_Graph: Only render as much room for pts_OverViewGraph as there are for what will be rendered (bar graph values)\nphodevi: Ensure DVD drives don't get reported on BSD operating systems when requesting disk drives\nphodevi: Improve graphics processor detection on Solaris 11 11/11 for non-NVIDIA GPUs\nsystem_monitor: Add support for handling i915_energy monitor reading in microJoules for each test run\nsystem_monitor: Place timer support for individual test runs within the module\n\nPhoronix Test Suite 4.0 Milestone 3\n22 May 2012\n\npts-core: Reformat user configuration input on test run\npts-core: Improve no-network support handling\npts-core: Streamline detailed-system-info collection\npts-core: Invalid command improvements\npts-core: Various alterations\npts-core: Make greater use of trigger_error\npts-core: Generate more relevant default result identifier strings based on subsystems under test on empty input\nphodevi: Support to attempt to detect the file-system underneath ecryptfs\npts-core: Debian control script update\n\nPhoronix Test Suite 4.0 Milestone 2\n29 April 2012\n\npts-core: Better recognize some open-source vs. closed-source graphics card/driver combination comparisons\npts-core: Fix potential crash in list-test-usage command\npts-core: Support for detecting FSGSBASE and RDRAND on Intel Ivy Bridge\npts-core: When detecting a CPU comparison, report the detailed CPU system table information\npts-core: When detecting a GPU/OpenGL comparison, report the detailed GPU system table information\npts-core: Fix PRESET_OPTIONS failing when specifying an option value rather than its index\npts-core: Archive vdpauinfo when available\nphodevi: Detection support for Intel IOC (Intel Offline Compiler) OpenCL SDK\nphodevi: Support for detecting GLAMOR (Intel OpenGL-accelerated X.Org Driver) acceleration\npts_Graph: Fix rounding issue on pts tables that are very wide\npts_Graph: Add SideViewTable\ndocumentation: Add a basic text README to the root phoronix-test-suite directory\n\nPhoronix Test Suite 4.0 Milestone 1\n12 April 2012\n\npts-core: Add AutoSortRunQueue option that by default automatically sorts the test execution queue to run similar tests together\npts-core: Expose more verbose information within detailed-system-info command\npts-core: Remove recover-run command since with new PTS4 changes the finish-run command will provide the same functionality\npts-core: Track the CPU scaling governor configuration between test runs\npts-core: Report 2D acceleration information to system table report on graphics test runs\npts-core: Support for showing test notes on multi-way comparisons\npts-core: Fix compatibility with the new pts_Graph renderer back-end for result-file-to-pdf option\npts-core: Add p7zip as a possible external dependency\npts-core: When running OpenCL tests, report the number of available compute cores\npts_Graph: Begin work on PHP 5.4 \"webui\" option (currently far from incomplete/experimental)\npts_Graph: Tweak spacing on pts_Table\npts_Graph: Re-factor most text vertical offsets to not use dominant-baseline since Opera still doesn't support this SVG attribute properly\npts_Graph: Begin unifying the Phoronix Test Suite and OpenBenchmarking.org theme\npts_Graph: Fix for emitted GD poly-lines being always black\npts_Graph: Begin work on block diagram graph (currently incomplete/experimental)\nphodevi: Remove support for the deprecated HAL Linux fall-backs\nphodevi: LLVM compiler reporting build configuration enhancements\nphodevi: Support for reporting multiple mmcblk* disk devices\nphodevi: Report /sys/hypervisor/type as a system layer\nphodevi: Fix LXDE version detection\nphodevi: Support for reporting the Openbox version\nphodevi: Read Nouveau clock current frequencies rather than maximum frequencies (performance_level)\nphodevi: Initial implementation of the Phodevi VFS (Virtual File-System; Still A Work In Progress)\ngraphics_event_checker: Override NVIDIA SyncToVBlank so it's always disabled\nsystem_monitor: Allow performance per Watt to be automatically calculated if PERFORMANCE_PER_WATT is set\n\n###\n\nFor the change-log from older Phoronix Test Suite releases, view the Phoronix Test Suite Git repository\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tCopyright (C) 2021, Phoronix Media\n\tCopyright (C) 2021, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass pts_env\n{\n\tprotected static $overrides = array();\n\tprotected static $env_vars = array(\n\t\t'NO_COLOR' => array(\n\t\t\t'description' => 'This option when enabled will force-disable the CLI/TUI text coloring. By default the Phoronix Test Suite will attempt to use CLI/TUI text colors and bolding of text for supported terminals.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('all'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'TERMINAL_WIDTH' => array(\n\t\t\t'description' => 'This option is used for overriding the detected default of the terminal width for the CLI/TUI interface.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('all'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t),\n\t\t'PHODEVI_SANITIZE' => array(\n\t\t\t'description' => 'This option can be used for stripping out part of a string on Phodevi (Phoronix Device Interface) hardware/software properties. Namely around the reported hardware/software information in result files if wanting any values / portions of strings stripped out from that information, such as for confidential hardware strings or other privacy concerns, PHODEVI_SANITIZE can be set. The value will be removed from read Phodevi hardware/software properties if set. Multiple strings to search for can be set by delimiting with a comma. If wanting to limit the sanitization to a particular property, the property value can be specified such as [property]=[value] to sanitisze like a value of \"motherboard=ABCVENDOR\" or CPU=ENGINEERING-SAMPLE to delete those strings rather than simply the string to remove that will look for matches in any property.\"',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('all'),\n\t\t\t'value_type' => 'string',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t'onchange' => 'phodevi::set_sanitize_string',\n\t\t\t),\n\t\t'PTS_SILENT_MODE' => array(\n\t\t\t'description' => 'This option when enabled will yield slightly less verbose Phoronix Test Suite terminal output by silencing unnecessary messages / prompts.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('all'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'PTS_DISPLAY_MODE' => array(\n\t\t\t'description' => 'If you wish to load a non-default display mode for a single instance, specify the mode in this variable as an alternative to adjusting the user configuration file.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('all'),\n\t\t\t'value_type' => 'enum',\n\t\t\t'enum' => array('BASIC', 'BATCH', 'CONCISE', 'SHORT', 'DEFAULT'),\n\t\t\t),\n\t\t'NO_PHODEVI_CACHE' => array(\n\t\t\t'description' => 'This option will disable use of the built-in Phodevi (Phoronix Device Interface) cache of system software/hardware details. When enabled, the information is not cached and will be re-computed on each query. This is mainly useful for debugging purposes.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('all'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'PTS_TEST_INSTALL_ROOT_PATH' => array(\n\t\t\t'description' => 'This option can be used for overriding where tests are installed to on the system. An absolute writable directory path can be the value if wanting to override the default (or user configuration file specified) test installation directory path.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('install', 'benchmark', 'stress_run'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'TEST_RESULTS_NAME' => array(\n\t\t\t'description' => 'This option can be used for specifying the result file name for saving the test/benchmark results automatically to the given name.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark', 'stress_run'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'TEST_RESULTS_IDENTIFIER' => array(\n\t\t\t'description' => 'This option can be used for specifying the result identifier for distinguishing this run within the saved result file.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark', 'stress_run'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'TEST_RESULTS_DESCRIPTION' => array(\n\t\t\t'description' => 'This option can be used for specifying the result file description for saving that string and not be prompted for providing a description during the test execution process.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark', 'stress_run'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'PTS_EXTRA_SYSTEM_LOGS_DIR' => array(\n\t\t\t'description' => 'By default the Phoronix Test Suite collects common system logs (cpuinfo, lscpu, dmesg) during the benchmarking process when saving test results. If wanting to collect additional, arbitrary system log files specific to your operating environment or for other niche system information, this option can be set as a path to a directory containing such log files. Prior to running the Phoronix Test Suite simply set PTS_EXTRA_SYSTEM_LOGS_DIR to the directory where any files should be captured from following test completion.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'string',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'TEST_EXECUTION_SORT' => array(\n\t\t\t'description' => 'This option can be used for controlling the sort order that the test profiles / benchmarks are run in, whether sorted or not and in what manner.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'enum',\n\t\t\t'enum' => array('none', 'random', 'dependencies', 'test-estimated-time', 'test-estimated-time-desc', 'test', 'default'),\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'TEST_EXEC_PREPEND' => array(\n\t\t\t'description' => 'This option can be used if wanting to specify a binary (e.g. sudo, cgroup or other resource limiting binaries or performance counters) to be called as the binary pre-pended prior to running a test profile binary/script. This option is namely used for specialized use-cases.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'FORCE_TIMES_TO_RUN' => array(\n\t\t\t'description' => 'This option can be used to override the default number of times a given test is run. Rather than being specified by the individual test profile, FORCE_TIMES_TO_RUN allows for specifying the number of times to run each benchmark.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'FORCE_MIN_TIMES_TO_RUN' => array(\n\t\t\t'description' => 'This option is similar to FORCE_TIMES_TO_RUN but is used for specifying the minimum possible number of times to run. Unlike FORCE_TIMES_TO_RUN, the run count can still exceed this value if the deviation between results or other factors are too high.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'FORCE_MIN_TIMES_TO_RUN_CUTOFF' => array(\n\t\t\t'description' => 'Used in conjunction with the FORCE_MIN_TIMES_TO_RUN, the FORCE_MIN_TIMES_TO_RUN_CUTOFF can be used for specifyingg the amount of time (in minutes) before foregoing additional runs. This allows cutting off the testing early if this time threshold has been reached.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t),\n\t\t'FORCE_ABSOLUTE_MIN_TIMES_TO_RUN' => array(\n\t\t\t'description' => 'This option is similar to FORCE_MIN_TIMES_TO_RUN but is *absolute* in ensuring each test will run at least that number of times and not subject to change of any timed cut-offs or other factors.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t),\n\t\t'FORCE_TIMES_TO_RUN_MULTIPLE' => array(\n\t\t\t'description' => 'This option is similar to FORCE_TIMES_TO_RUN but the value is a multiple for how many times the test profile should be run respective to its default value. If the value is set to 2 and a given test profile by default is set to run 3 times, it would now instead be run a total of 6 times. This can be used for increasing the statistical significance of test results by using a multiple of the default rather than a static number as is the case with FORCE_TIMES_TO_RUN.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t),\n\t\t'IGNORE_RUNS' => array(\n\t\t\t'description' => 'This option can be used if wanting the Phoronix Test Suite to automatically toss out a specified result position when running a test profile multiple times. E.g. setting this value to 1 will toss out automatically the first run of each test profile or a value of 3 will toss out the third run of a given test. This overrides the IgnoreRuns option also available to individual test profiles. Multiple values for runs to ignore can be specified by delimiting with a comma.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'FORCE_MIN_DURATION_PER_TEST' => array(\n\t\t\t'description' => 'This option can be used to specify the minimum number of times to run a given benchmark. Rather than relying on a static times-to-run count, the test will keep looping until the time has exceeded this number (in minutes).',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'PRESET_OPTIONS' => array(\n\t\t\t'description' => 'PRESET_OPTIONS can be used for seeding the values of test profile run options from the environment (though the preferred approach for pre-configuring tests in an automated manner would be by constructing your own local test suite).  For setting any test option(s) from an environment variable rather than being prompted for the options when running a test. Example: \"PRESET_OPTIONS=\\'stream.run-type=Add\\' phoronix-test-suite benchmark stream\".',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'PRESET_OPTIONS_VALUES' => array(\n\t\t\t'description' => 'This option is similar to PRESET_OPTIONS and uses the same syntax but rather than seeding the selected run option it uses the value verbatim as for what is passed to the test profile run option.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'PTS_CONCURRENT_TEST_RUNS' => array(\n\t\t\t'description' => 'This option is used in the stress run/benchmarking mode to indicate the number of tests to run concurrently as part of the stress run process.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('stress_run'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t),\n\t\t'TOTAL_LOOP_TIME' => array(\n\t\t\t'description' => 'This option is used to specify the amount of time (in minutes) to loop the testing during the Phoronix Test Suite stress run or normal benchmarking process.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('stress_run', 'benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t),\n\t\t'TOTAL_LOOP_COUNT' => array(\n\t\t\t'description' => 'This option is used to specify a multiple if wishing to run each test multiple times rather than just once per saved result file.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t),\n\t\t'LIMIT_ELAPSED_TEST_TIME' => array(\n\t\t\t'description' => 'This option can be used for limiting the amount of time the benchmarking process runs. The value specified is the number of minutes to allow for benchmarking. After a test finishes if that number of minutes has been exceeded, the testing process will abort early and not run any remaining tests.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'DONT_BALANCE_TESTS_FOR_SUBSYSTEMS' => array(\n\t\t\t'description' => 'If this value is true, the Phoronix Test Suite stress-run manager will not attempt to distribute the selected test(s) among available hardware subsystems. For stress runs with tests covering multiple subsystems (e.g. CPU, GPU, RAM), the default behavior is try to ensure the tests to run concurrently are as balanced across the tested subsystems as possible.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('stress_run'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'DONT_TRY_TO_ENSURE_TESTS_ARE_UNIQUE' => array(\n\t\t\t'description' => 'When running in the stress-run mode, the default behavior will try to ensure when tests are running concurrently that as many unique tests as possible are being run. Setting this value to try will avoid that check and just attempt to truly randomize the tests being run concurrently without regard for trying to avoid duplicates.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('stress_run'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'OUTPUT_FILE' => array(\n\t\t\t'description' => 'When exporting a result file, this option can be used for specifying the file name / file path and name of where to save the exported result file to rather than assuming the user home directory.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('result_output'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'OUTPUT_DIR' => array(\n\t\t\t'description' => 'When exporting a result file, this option can be used for specifying the writable directory path where the exported result files should be saved to. The file-name will be automatically generated.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('result_output'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'GRAPH_HIGHLIGHT' => array(\n\t\t\t'description' => 'If automatically generating an HTML or PDF result file from the command-line and wanting to highlight desired result identifier(s), GRAPH_HIGHLIGHT can be set to a comma delimited list of result identifiers to highlight / color differently than the rest.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('result_output'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'SORT_BY' => array(\n\t\t\t'description' => 'This option can be used for specifying the sort order for commands like auto-sort-result-file whether to sort by identifier name, test length, etc.',\n\t\t\t'default' => 'identifier',\n\t\t\t'usage' => array('auto_sort_result_file'),\n\t\t\t'value_type' => 'enum',\n\t\t\t'enum' => array('date', 'date-asc', 'date-desc', 'identifier'),\n\t\t\t),\n\t\t'NO_HTTPS' => array(\n\t\t\t'description' => 'Enable this option if wanting the Phoronix Test Suite when downloading resources to attempt to only use HTTP without any HTTPS connections. Note: some downloads may fail for servers that only support HTTPS.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('all'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'NO_DOWNLOAD_CACHE' => array(\n\t\t\t'description' => 'Enable this option if the Phoronix Test Suite should not attempt to discover and use any local/remote Phoronix Test Suite download cache when installing tests and attempting to find those files locally or on a LAN resource.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('install'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'NO_FILE_HASH_CHECKS' => array(\n\t\t\t'description' => 'Enable this option if you want to skip the MD5 / SHA256 file hash checks after downloading files with known MD5/SHA256 hashsums for verification. This is namely useful for select debugging scenarios and other situations where a file may have been trivially changed / re-packaged and wishing to still install a test even though the hash no longer matches until the test profile has been updated.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('install'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'SKIP_TEST_SUPPORT_CHECKS' => array(\n\t\t\t'description' => 'This debugging/validation option will have the Phoronix Test Suite skip any test support checks for a test profile (architecture compatibility, OS compatibility, etc) and just assume all tests are supported.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('install', 'benchmark'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'NO_COMPILER_MASK' => array(\n\t\t\t'description' => 'By default the Phoronix Test Suite attempts to determine the intended system code compilers (namely C / C++ / Fortran) and to intercept the arguments being passed to them during test installation in order to record the prominent compiler flags being used. If this behavior causes problems for your system, NO_COMPILER_MASK can be enabled for debugging purposes to avoid this compiler intercepting/symlinking behavior.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('install'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'NO_EXTERNAL_DEPENDENCIES' => array(\n\t\t\t'description' => 'Enabling this option will have the Phoronix Test Suite skip over attempting to detect and install any system/external dependencies needed to run desired test profiles. This should just be used in case of testing/evaluation purposes and may leave some tests unable to successfully build/install.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('install'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'SKIP_EXTERNAL_DEPENDENCIES' => array(\n\t\t\t'description' => 'Rather than NO_EXTERNAL_DEPENDENCIES to outright disable the Phoronix Test Suite external dependency handling, SKIP_EXTERNAL_DEPENDENCIES can be used with a value of a comma separated list of specific external dependencies to avoid. This is mostly useful for any external dependencies that may be out of date or fail to install on your platform.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('install'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'PTS_DOWNLOAD_CACHE' => array(\n\t\t\t'description' => 'PTS_DOWNLOAD_CACHE can be used for setting a path to a directory on the system containing a Phoronix Test Suite download cache if located outside one of the default locations.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('install'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'SKIP_TESTS' => array(\n\t\t\t'description' => 'SKIP_TESTS will skip the test installation and execution of any test identifiers specified by this option. Multiple test identifiers can be specified, delimited by a comma.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('install', 'benchmark'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'SKIP_TESTS_HAVING_ARGS' => array(\n\t\t\t'description' => 'SKIP_TESTS_HAVING_ARGS will skip the test installation and execution of any tests where the specified test arguments match the given string. E.g. if wanting to skip all Vulkan tests in a result file but run just the OpenGL tests or similar where wanting to limit the tests being run from within a result file. Multiple values can be specified when delimited by a comma.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('install', 'benchmark'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'SKIP_TESTING_SUBSYSTEMS' => array(\n\t\t\t'description' => 'This option is similar to SKIP_TESTS but allows for specifying hardware subsystems (e.g. Graphics) to skip from installing/running any test profiles beloning to that subsystem type. Multiple subsystems can be specified when delimited by a comma.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('install', 'benchmark'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'PTS_MODULE_SETUP' => array(\n\t\t\t'description' => 'This option can be used for seeding a module\\'s settings when running the phoronix-test-suite module-setup command. An example would be: \"PTS_MODULE_SETUP=\\'phoromatic.remote_host=http://www.phoromatic.com/; phoromatic.remote_account=123456; phoromatic.remote_verifier=ABCD\\' phoronix-test-suite module-setup phoromatic\".',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('modules'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'PTS_MODULES' => array(\n\t\t\t'description' => 'This option can be used for specifying a comma-separated list of Phoronix Test Suite modules to load at start-time, complementary to the modules specified in the user configuration file. PTS_MODULES is namely used for development purposes or wanting to temporarily enable a given module.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('modules'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'PTS_IGNORE_MODULES' => array(\n\t\t\t'description' => 'Enabling this option can be used for temporarily disabling Phoronix Test Suite modules from being loaded on a given run. This is primarily for debugging purposes.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('modules'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'TEST_TIMEOUT_AFTER' => array(\n\t\t\t'description' => 'When this variable is set, the value will can be set to \"auto\" or a positive integer. The value indicates the number of minutes until a test run should be aborted, such as for a safeguard against hung/deadlocked processes or other issues. Setting this to a high number as a backup would be recommended for fending off possible hangs / stalls in the testing process if the test does not quit. If the value is \"auto\", it will quit if the time of a test run exceeds 3x the average time it normally takes the particular test to complete its run. In the future, auto might be enabled by default in a future PTS release. This functionality requires system PHP PCNTL support (i.e. no Windows support).',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t'module' => 'test_timeout',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'MONITOR' => array(\n\t\t\t'description' => 'This option can be used for system sensor monitoring during test execution. The Phoronix Test Suite system_monitor module can monitor various exposed sensors and record them as part of the result file and present them as additional graphs / metrics in the result viewer. The exposed sensors varies by platform hardware/software. This functionality also requires PHP PCNTL support and thus is not available for some platforms (i.e. Windows).',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'enum_multi',\n\t\t\t'enum' => array('all', 'cpu.peak-freq', 'cpu.temp', 'cpu.power', 'cpu.usage', 'gpu.freq', 'gpu.power', 'gpu.temp', 'hdd.temp', 'memory.usage', 'swap.usage', 'sys.power', 'sys.temp'),\n\t\t\t'module' => 'system_monitor',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'LINUX_PERF' => array(\n\t\t\t'description' => 'This option allows providing additional complementary per-test graphs looking at various Linux perf subsystem metrics such as cache usage, instructions executed, and other metrics. This requires you to have Linux\\'s perf user-space utility already installed and performance counter access.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'bool',\n\t\t\t'module' => 'linux_perf',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'TURBOSTAT_LOG' => array(\n\t\t\t'description' => 'This option allows attaching \"turbostat\" outputs to the end of archived benchmark/test log files if interested in the Linux TurboStat information. This assumes you have turbostat available on the Linux system(s) and have permissions (root) for running turbostat.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'bool',\n\t\t\t'module' => 'turbostat',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'WATCHDOG_SENSOR' => array(\n\t\t\t'description' => 'This option will enable the watchdog module that checks system sensor values pre/interim/post benchmark execution. If the selected sensor(s) exceed the static threshold level, testing will be paused before continuing to any additional tests so that the system can sleep. Ideally this will allow the system to return to a more suitable state before resuming testing after the sensor value is back below the threshold or after a pre-defined maximum time limit to spend sleeping. This module is mostly focused on pausing testing should system core temperatures become too elevated to allow time for heat dissipation.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'enum_multi',\n\t\t\t'enum' => array('cpu.temp', 'gpu.temp', 'hdd.temp', 'sys.temp'),\n\t\t\t'module' => 'watchdog',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'WATCHDOG_SENSOR_THRESHOLD' => array(\n\t\t\t'description' => 'Used in conjunction with the WATCHDOG_SENSOR option, the WATCHDOG_SENSOR_THRESHOLD specifies the threshold for the sensor reading when the testing should be paused (e.g. the Celsius cut-off temperature).',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t'module' => 'watchdog',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'WATCHDOG_MAXIMUM_WAIT' => array(\n\t\t\t'description' => 'Used in conjunction with the WATCHDOG_SENSOR option, this is the maximum amount of time to potentially wait when the watchdog is triggered for surpassing the threshold value. The value is the maximum number of minutes to wait being above the threshold.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t'module' => 'watchdog',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'REMOVE_TESTS_OLDER_THAN' => array(\n\t\t\t'description' => 'This option with the cleanup module can be used for automatically un-installing/removing installed tests if they have not been run in a period of time. The value for REMOVE_TESTS_OLDER_THAN is the number of days the test can be installed without running until this module will clean-up/remove older tests.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t'module' => 'cleanup',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'REMOVE_TESTS_ON_COMPLETION' => array(\n\t\t\t'description' => 'When this option is set to true, installed test profiles will be automatically removed/uninstalled when they are no longer in the current test execution queue. This is used for saving disk space / resources by automatically removing installed tests after they have been executed. For more persistent behavior is the RemoveTestInstallOnCompletion option within the Phoronix Test Suite user configuration file.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'bool',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t);\n\n\tpublic static function read($name, &$overrides = null, $fallback_value = false)\n\t{\n\t\tif(isset(self::$overrides[$name]))\n\t\t{\n\t\t\treturn self::$overrides[$name];\n\t\t}\n\n\t\treturn getenv($name);\n\t}\n\tpublic static function set($name, $value)\n\t{\n\t\tif(!isset(self::$env_vars[$name]))\n\t\t{\n\t\t\t// trigger_error($name . ' is not a recognized Phoronix Test Suite environment variable.', E_USER_NOTICE);\n\t\t}\n\t\tif(PTS_IS_CLIENT && isset(self::$env_vars[$name]['module']) && !pts_module_manager::is_module_attached(self::$env_vars[$name]['module']))\n\t\t{\n\t\t\t// Ensure module is loaded\n\t\t\tpts_module_manager::attach_module(self::$env_vars[$name]['module']);\n\t\t}\n\t\tif(PTS_IS_CLIENT && isset(self::$env_vars[$name]['onchange']) && !empty(self::$env_vars[$name]['onchange']) && is_callable(self::$env_vars[$name]['onchange']))\n\t\t{\n\t\t\t// Call the passed function with the value being set\n\t\t\tcall_user_func(self::$env_vars[$name]['onchange'], $value);\n\t\t}\n\n\t\tself::$overrides[$name] = $value;\n\t}\n\tpublic static function set_array($to_set, $clear_overrides = false)\n\t{\n\t\tif($clear_overrides)\n\t\t{\n\t\t\tself::$overrides = array();\n\t\t}\n\t\tforeach($to_set as $name => $value)\n\t\t{\n\t\t\tself::set($name, $value);\n\t\t}\n\t}\n\tpublic static function get_overrides()\n\t{\n\t\treturn self::$overrides;\n\t}\n\tpublic static function remove($name)\n\t{\n\t\tif(isset(self::$overrides[$name]))\n\t\t{\n\t\t\tunset(self::$overrides[$name]);\n\t\t}\n\t}\n\tpublic static function read_possible_vars($limit = false)\n\t{\n\t\t$possible_vars = self::$env_vars;\n\t\tif($limit)\n\t\t{\n\t\t\tif($limit == 'phoromatic')\n\t\t\t{\n\t\t\t\t$limit = array('advertise_in_phoromatic' => true);\n\t\t\t}\n\t\t\tif(is_array($limit))\n\t\t\t{\n\t\t\t\tforeach($possible_vars as $key => $var_check)\n\t\t\t\t{\n\t\t\t\t\tforeach($limit as $index => $desired_value)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!isset($possible_vars[$key][$index]) || $possible_vars[$key][$index] != $desired_value)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tunset($possible_vars[$key]);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tksort($possible_vars);\n\t\treturn $possible_vars;\n\t}\n\tpublic static function get_documentation($for_terminal = true)\n\t{\n\t\t$docs = '';\n\t\tforeach(pts_env::read_possible_vars() as $var => $data)\n\t\t{\n\t\t\tif($for_terminal)\n\t\t\t{\n\t\t\t\t$docs .= PHP_EOL . pts_client::cli_just_bold($var);\n\t\t\t\tif(pts_env::read($var))\n\t\t\t\t{\n\t\t\t\t\t$docs .= ': ' . pts_client::cli_colored_text(pts_env::read($var), 'green', true);\n\t\t\t\t}\n\t\t\t\t$docs .= PHP_EOL;\n\t\t\t\t$docs .= pts_client::cli_just_italic($data['description']) . PHP_EOL;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$docs .= PHP_EOL . '<h2>' . $var . '</h2>' . PHP_EOL;\n\t\t\t\t$docs .= '<p><em>' . $data['description'] . '</em></p>' . PHP_EOL;\n\t\t\t}\n\n\t\t\tif(isset($data['default']) && !empty($data['default']))\n\t\t\t{\n\t\t\t\tif($for_terminal)\n\t\t\t\t{\n\t\t\t\t\t$docs .= pts_client::cli_just_bold('Default Value: ') . $data['default'] . PHP_EOL;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$docs .= '<p><strong>Default Value:</strong> ' . $data['default'] . '</p>' . PHP_EOL;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!$for_terminal)\n\t\t\t{\n\t\t\t\t$docs .= '<p>';\n\t\t\t}\n\t\t\tif(isset($data['value_type']) && !empty($data['value_type']))\n\t\t\t{\n\t\t\t\t$value_type = '';\n\t\t\t\tswitch($data['value_type'])\n\t\t\t\t{\n\t\t\t\t\tcase 'bool':\n\t\t\t\t\t\t$value_type = 'boolean (TRUE / FALSE)';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t$value_type = 'string';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'positive_integer':\n\t\t\t\t\t\t$value_type = 'positive integer';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'enum':\n\t\t\t\t\tcase 'enum_multi':\n\t\t\t\t\t\t$value_type = 'enumeration' . (isset($data['enum']) ? ' (' . implode(', ', $data['enum']) . ')' : '');\n\t\t\t\t\tif($data['value_type'] == 'enum_multi')\n\t\t\t\t\t{\n\t\t\t\t\t\t$value_type .= PHP_EOL . 'Multiple options can be supplied when delimited by a comma.';\n\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(!empty($value_type))\n\t\t\t\t{\n\t\t\t\t\t$docs .= 'The value can be of type: ' . $value_type . '.' . PHP_EOL;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(isset($data['usage']) && !empty($data['usage']))\n\t\t\t{\n\t\t\t\t$usages = array();\n\t\t\t\tforeach($data['usage'] as $u)\n\t\t\t\t{\n\t\t\t\t\tswitch($u)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase 'install':\n\t\t\t\t\t\t\t$usages[] = 'test installation';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'benchmark':\n\t\t\t\t\t\t\t$usages[] = 'test execution / benchmarking';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'stress_run':\n\t\t\t\t\t\t\t$usages[] = 'stress-run mode';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'result_output':\n\t\t\t\t\t\t\t$usages[] = 'result output generation';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'modules':\n\t\t\t\t\t\t\t$usages[] = 'modules';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!empty($usages))\n\t\t\t\t{\n\t\t\t\t\t$docs .= 'The variable is relevant for: ' . implode(', ', $usages) . '.' . PHP_EOL;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(isset($data['module']) && !empty($data['module']))\n\t\t\t{\n\t\t\t\t$docs .= 'The variable depends upon functionality provided by the Phoronix Test Suite module: ' . $data['module'] . '.' . PHP_EOL;\n\t\t\t}\n\t\t\tif(!$for_terminal)\n\t\t\t{\n\t\t\t\t$docs .= '</p>';\n\t\t\t}\n\t\t}\n\t\treturn $docs;\n\t}\n\tpublic static function get_html_options($limit = false, $preset_defaults = array())\n\t{\n\t\t$html = '';\n\t\tforeach(pts_env::read_possible_vars($limit) as $var => $data)\n\t\t{\n\t\t\t$html .= PHP_EOL . '<h3>' . $var . '</h3>' . PHP_EOL;\n\t\t\t$html .= '<p><em>' . $data['description'] . '</em></p>' . PHP_EOL;\n\n\t\t\t$default_value = isset($data['default']) && !empty($data['default']) ? $data['default'] : '';\n\t\t\tif(isset($_REQUEST[$var]))\n\t\t\t{\n\t\t\t\t$default_value = strip_tags($_REQUEST[$var]);\n\t\t\t}\n\t\t\telse if(isset($preset_defaults[$var]))\n\t\t\t{\n\t\t\t\t$default_value = $preset_defaults[$var];\n\t\t\t}\n\t\t\t$html .= '<p>';\n\n\t\t\t$enum = array();\n\t\t\tswitch((isset($data['value_type']) ? $data['value_type'] : ''))\n\t\t\t{\n\t\t\t\tcase 'bool':\n\t\t\t\t\t$enum = array('TRUE', 'FALSE');\n\t\t\t\t\t$default_value = strtoupper($default_value);\n\t\t\t\tcase 'enum':\n\t\t\t\t\tif(isset($data['enum']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$enum = $data['enum'];\n\t\t\t\t\t}\n\t\t\t\t\t$html .= '<select name=\"' . $var . '\"><option value=\"0\">[Not Set]</option>';\n\t\t\t\t\tforeach($enum as $e)\n\t\t\t\t\t{\n\t\t\t\t\t\t$html .= '<option value=\"' . $e . '\"' . (strtoupper($default_value) == strtoupper($e) ? ' selected=\"selected\"' : '') . '>' . $e . '</option>';\n\t\t\t\t\t}\n\t\t\t\t\t$html .= '</select>';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'enum_multi':\n\t\t\t\t\tif(isset($data['enum']))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!empty($default_value) && !is_array($default_value))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$default_value = explode($default_value, ',');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tforeach($data['enum'] as $e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$html .= '<input type=\"checkbox\" name=\"' . $var . '[]\" value=\"' . $e . '\" ' . (is_array($default_value) && in_array($e, $default_value) ? 'checked=\"checked\"' : '') . ' /> ' . $e . '<br />';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'positive_integer':\n\t\t\t\t\t$html .= '<input type=\"number\" min=\"0\" max=\"9999\" step=\"1\" name=\"' . $var . '\" value=\"' . $default_value . '\" />';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'string':\n\t\t\t\tdefault:\n\t\t\t\t\t$html .= '<input name=\"' . $var . '\" value=\"' . $default_value . '\" />';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$html .= '</p>';\n\t\t}\n\t\treturn $html;\n\t}\n\tpublic static function get_posted_options($limit = false)\n\t{\n\t\t$posted = array();\n\t\tforeach(pts_env::read_possible_vars($limit) as $var => $data)\n\t\t{\n\t\t\tif(isset($_REQUEST[$var]))\n\t\t\t{\n\t\t\t\tif(is_array($_REQUEST[$var]))\n\t\t\t\t{\n\t\t\t\t\tforeach($_REQUEST[$var] as &$rqv)\n\t\t\t\t\t{\n\t\t\t\t\t\t$rqv = strip_tags($rqv);\n\t\t\t\t\t}\n\t\t\t\t\t$v = implode(',', $_REQUEST[$var]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// TODO add more validation handling checks... then again, PTS client has its own validation of the env vars\n\t\t\t\t\t$v = strip_tags($_REQUEST[$var]);\n\t\t\t\t}\n\t\t\t\tif(!empty($v) && $v !== 0)\n\t\t\t\t{\n\t\t\t\t\t$posted[$var] = $v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $posted;\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2018, Phoronix Media\n\tCopyright (C) 2018, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass pts_phoroql\n{\n\tpublic static function evaluate_search_tree($tree, $join = 'AND', $callback)\n\t{\n\t\t$matches = false;\n\n\t\tforeach($tree as $i => $el)\n\t\t{\n\t\t\t$b = false;\n\t\t\tif($i === 'AND' || $i === 'OR')\n\t\t\t{\n\t\t\t\t$b = self::evaluate_search_tree($el, $i, $callback);\n\t\t\t}\n\t\t\telse if(isset($el['query']))\n\t\t\t{\n\t\t\t\t$b = call_user_func($callback, $el['query']);\n\t\t\t\tif($el['not'])\n\t\t\t\t{\n\t\t\t\t\t$b = !$b;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(is_array($el))\n\t\t\t{\n\t\t\t\t$b = self::evaluate_search_tree($el, $join, $callback);\n\t\t\t}\n\n\t\t\tif($join == 'AND')\n\t\t\t{\n\t\t\t\tif(!$b)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t$matches = true;\n\t\t\t}\n\t\t\telse if($join == 'OR')\n\t\t\t{\n\t\t\t\tif($b)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t$matches = $matches || $b;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn $matches;\n\t}\n\tpublic static function search_query_to_tree($query)\n\t{\n\t\t// TODO: very basic right now, work out nested expressions, etc\n\t\t$tree = array();\n\t\t$forming = '';\n\t\t$not = false;\n\n\t\t$words = explode(' ', $query);\n\t\tfor($i = 0, $l = count($words); $i < $l; $i++)\n\t\t{\n\t\t\tif(empty($words[$i]))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$is_last = ($i + 1) == $l;\n\t\t\t$next_word = !$is_last ? $words[($i + 1)] : false;\n\n\t\t\tswitch($words[$i])\n\t\t\t{\n\t\t\t\tcase 'AND':\n\t\t\t\tcase '&&':\n\t\t\t\t\tself::add_expression($tree, 'AND', $forming, $not);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'OR':\n\t\t\t\tcase '||':\n\t\t\t\t\tself::add_expression($tree, 'OR', $forming, $not);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'NOT':\n\t\t\t\t\t$not = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$forming .= $words[$i] . ' ';\n\t\t\t\t\tif($is_last)\n\t\t\t\t\t{\n\t\t\t\t\t\t//$forming .= $words[$i] . ' ';\n\t\t\t\t\t\tself::add_expression($tree, 'DONE', $forming, $not);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn $tree;\n\t}\n\tprotected static function add_expression(&$tree, $action, &$query, &$not)\n\t{\n\t\tif(empty($action) || empty($query))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\tstatic $last_expr;\n\t\tstatic $els;\n\t\tif($action != $last_expr)\n\t\t{\n\t\t\tif($action == 'DONE')\n\t\t\t{\n\t\t\t\t$els[] = array(\n\t\t\t\t\t'query' => trim($query),\n\t\t\t\t\t'not' => $not,\n\t\t\t\t\t);\n\t\t\t}\n\t\t\tif($last_expr != null && !empty($els))\n\t\t\t{\n\t\t\t\t$tree[] = array($last_expr => $els);\n\t\t\t}\n\t\t\telse if($action == 'DONE' && !empty($els))\n\t\t\t{\n\t\t\t\t$tree[] = $els;\n\t\t\t}\n\t\t\t$els = array();\n\t\t\tif($action == 'DONE')\n\t\t\t{\n\t\t\t\t$last_expr = null;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$last_expr = $action;\n\t\t\t}\n\t\t}\n\n\t\t$els[] = array(\n\t\t\t'query' => trim($query),\n\t\t\t'not' => $not,\n\t\t\t);\n\t\t$not = false;\n\t\t$query = null;\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2018 - 2020, Phoronix Media\n\tCopyright (C) 2018 - 2020, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass pts_result_viewer_embed\n{\n\tprotected $result_file;\n\tprotected $can_modify_results = false;\n\tprotected $can_delete_results = false;\n\tprotected $result_public_id;\n\tprotected $graph_export_handler = false;\n\tprotected $post_description_message = null;\n\tprotected $show_html_table_when_relevant = true;\n\tprotected $show_test_metadata_helper = true;\n\tprotected $include_page_print_only_helpers = true;\n\n\tpublic function __construct(&$result_file, $public_id = null)\n\t{\n\t\t$this->result_file = &$result_file;\n\t\t$this->result_public_id = $public_id;\n\t}\n\tpublic function allow_modifying_results($can_modify)\n\t{\n\t\t$this->can_modify_results = $can_modify;\n\t}\n\tpublic function allow_deleting_results($can_delete)\n\t{\n\t\t$this->can_delete_results = $can_delete;\n\t}\n\tpublic function set_graph_export_handler($handler)\n\t{\n\t\tif(is_callable($handler))\n\t\t{\n\t\t\t$this->graph_export_handler = $handler;\n\t\t}\n\t}\n\tpublic function graph_export_handler(&$raw)\n\t{\n\t\tif($this->graph_export_handler)\n\t\t{\n\t\t\treturn call_user_func($this->graph_export_handler, $raw);\n\t\t}\n\t}\n\tpublic function set_post_description_message($msg)\n\t{\n\t\t$this->post_description_message = $msg;\n\t}\n\tpublic function show_html_result_table($show)\n\t{\n\t\t$this->show_html_table_when_relevant = $show;\n\t}\n\tpublic function show_test_metadata_helper($show)\n\t{\n\t\t$this->show_test_metadata_helper = $show;\n\t}\n\tpublic function include_page_print_only_helpers($show)\n\t{\n\t\t$this->include_page_print_only_helpers = $show;\n\t}\n\tprotected function result_object_to_error_report(&$result_file, &$result_object, $i)\n\t{\n\t\t$html = '';\n\t\t$shown_args = false;\n\t\tforeach($result_object->test_result_buffer->buffer_items as &$bi)\n\t\t{\n\t\t\tif($bi->get_result_value() == null)\n\t\t\t{\n\t\t\t\tif(!$shown_args)\n\t\t\t\t{\n\t\t\t\t\t$html .= '<p><strong>' . $result_object->get_arguments_description() . '</strong></p>';\n\t\t\t\t\t$shown_args = true;\n\t\t\t\t}\n\t\t\t\t$bi_error = $bi->get_error();\n\t\t\t\tif($bi_error == null)\n\t\t\t\t{\n\t\t\t\t\t$bi_error = 'Test failed to run.';\n\t\t\t\t}\n\t\t\t\t$html .= '<p class=\"test_error\"><strong>' . $bi->get_result_identifier() . ':</strong> ' . strip_tags($bi_error) . '<br />';\n\n\t\t\t\tif($result_file->get_test_run_log_for_result($result_object, -2))\n\t\t\t\t{\n\t\t\t\t\t$html .= ' <a onclick=\"javascript:display_test_logs_for_result_object(\\'' . $this->result_public_id . '\\', \\'' . $i . '\\', \\'' . $bi->get_result_identifier() . '\\'); return false;\">View Test Run Logs</a> ';\n\t\t\t\t}\n\t\t\t\tif($result_file->get_install_log_for_test($result_object->test_profile, -2))\n\t\t\t\t{\n\t\t\t\t\t$html .= ' &nbsp; <a onclick=\"javascript:display_install_logs_for_result_object(\\'' . $this->result_public_id . '\\', \\'' . $i . '\\', \\'' . $bi->get_result_identifier() . '\\'); return false;\">View Test Installation Logs</a> ';\n\t\t\t\t}\n\t\t\t\t$html .= '</p>';\n\t\t\t}\n\t\t}\n\n\t\treturn $html;\n\t}\n\tpublic function get_html()\n\t{\n\t\t$PAGE = null;\n\t\t$result_file = &$this->result_file;\n\t\tself::process_result_modify_pre_render($result_file, $this->can_modify_results, $this->can_delete_results);\n\t\t$result_file->avoid_duplicate_identifiers();\n\t\t$extra_attributes = null;\n\t\t$html_options = self::get_html_options_markup($result_file, $_REQUEST, $this->result_public_id, $this->can_delete_results);\n\t\tself::process_request_to_attributes($_REQUEST, $result_file, $extra_attributes);\n\t\t$PAGE .= self::get_html_sort_bar($result_file, $_REQUEST);\n\t\t$PAGE .= '<h1 id=\"result_file_title\" placeholder=\"Title\">' . $result_file->get_title() . '</h1>';\n\t\t$PAGE .= '<p id=\"result_file_desc\" placeholder=\"Description\">' . str_replace(PHP_EOL, '<br />', $result_file->get_description()) . '</p>';\n\t\t$PAGE .= '<div id=\"result-settings\">';\n\t\tif($this->can_modify_results)\n\t\t{\n\t\t\t$PAGE .= ' <input type=\"submit\" id=\"save_result_file_meta_button\" value=\"Save\" onclick=\"javascript:save_result_file_meta(\\'' . $this->result_public_id . '\\'); return false;\" style=\"display: none;\">';\n\t\t\t$PAGE .= ' <input type=\"submit\" id=\"edit_result_file_meta_button\" value=\"Edit\" onclick=\"javascript:edit_result_file_meta(); return false;\">';\n\t\t}\n\t\tif($this->can_delete_results && !defined('PHOROMATIC_SERVER'))\n\t\t{\n\t\t\t$PAGE .= ' <input type=\"submit\" value=\"Delete Result File\" onclick=\"javascript:delete_result_file(\\'' . $this->result_public_id . '\\'); return false;\">';\n\t\t}\n\t\t$PAGE .= $this->post_description_message;\n\t\t$PAGE .= '<div style=\"text-align: center;\">Jump To <a href=\"#table\">Table</a> - <a href=\"#results\">Results</a></div>';\n\t\t$PAGE .= '<hr /><div style=\"font-size: 12pt;\">' . $html_options . '</div><hr style=\"clear: both;\" />';\n\t\t$PAGE .= self::process_helper_html($_REQUEST, $result_file, $extra_attributes, $this->can_modify_results, $this->can_delete_results);\n\t\t$PAGE .= '</div>';\n\t\tif($this->include_page_print_only_helpers)\n\t\t{\n\t\t\t$PAGE .= '<div class=\"print_notes\">' . pts_result_file_output::result_file_to_system_html($result_file) . '</div>';\n\t\t}\n\t\t$PAGE .= '<div id=\"result_overview_area\">';\n\t\t$intent = -1;\n\t\tif($result_file->get_system_count() == 1 || ($intent = pts_result_file_analyzer::analyze_result_file_intent($result_file, $intent, true)))\n\t\t{\n\t\t\t$table = new pts_ResultFileCompactSystemsTable($result_file, $intent);\n\t\t}\n\t\telse if($result_file->get_system_count() > 0)\n\t\t{\n\t\t\t$table = new pts_ResultFileSystemsTable($result_file);\n\t\t}\n\n\t\t$rendered = pts_render::render_graph_inline_embed($table, $result_file, $extra_attributes);\n\t\t$PAGE .= '<p style=\"text-align: center; overflow: auto;\" class=\"result_object\" id=\"result_file_system_table\">' . $rendered . '</p>';\n\t\t$PAGE .= $this->graph_export_handler($rendered);\n\n\t\tif($result_file->get_system_count() == 2)\n\t\t{\n\t\t\t$graph = new pts_graph_run_vs_run($result_file);\n\n\t\t\tif($graph->renderGraph())\n\t\t\t{\n\t\t\t\t$rendered = pts_render::render_graph_inline_embed($graph, $result_file, $extra_attributes);\n\t\t\t\t$PAGE .= '<p style=\"text-align: center; overflow: auto;\" class=\"result_object\">' . $rendered . '</p>';\n\t\t\t\t$PAGE .= $this->graph_export_handler($rendered);\n\t\t\t}\n\t\t}\n\t\telse if($result_file->get_system_count() > 12 && false) // TODO determine when this is sane enough to enable\n\t\t{\n\t\t\t$graph = new pts_graph_mini_overview($result_file, '');\n\n\t\t\tif($graph->renderGraph())\n\t\t\t{\n\t\t\t\t$rendered = pts_render::render_graph_inline_embed($graph, $result_file, $extra_attributes);\n\t\t\t\t$PAGE .= '<p style=\"text-align: center; overflow: auto;\" class=\"result_object\">' . $rendered . '</p>';\n\t\t\t\t$PAGE .= $this->graph_export_handler($rendered);\n\t\t\t}\n\t\t}\n\t\telse if(!$result_file->is_multi_way_comparison())\n\t\t{\n\t\t\tforeach(array('', 'Per Watt', 'Per Dollar') as $selector)\n\t\t\t{\n\t\t\t\t$graph = new pts_graph_radar_chart($result_file, $selector);\n\n\t\t\t\tif($graph->renderGraph())\n\t\t\t\t{\n\t\t\t\t\t$rendered = pts_render::render_graph_inline_embed($graph, $result_file, $extra_attributes);\n\t\t\t\t\t$PAGE .= '<p style=\"text-align: center; overflow: auto;\" class=\"result_object\">' . $rendered . '</p>';\n\t\t\t\t\t$PAGE .= $this->graph_export_handler($rendered);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//$PAGE .= '<a id=\"table\"></a>';\n\t\tif(!$result_file->is_multi_way_comparison() && $this->show_html_table_when_relevant)\n\t\t{\n\t\t\t$PAGE .= '<div class=\"pts_result_table\">' . pts_result_file_output::result_file_to_detailed_html_table($result_file, 'grid', $extra_attributes, self::check_request_for_var($_REQUEST, 'sdt')) . '</div>';\n\t\t}\n\t\telse if($result_file->get_test_count() > 3)\n\t\t{\n\t\t\t$intent = null;\n\t\t\t$table = new pts_ResultFileTable($result_file, $intent);\n\t\t\t$rendered = pts_render::render_graph_inline_embed($table, $result_file, $extra_attributes);\n\t\t\t$PAGE .= '<p style=\"text-align: center; overflow: auto;\" class=\"result_object\">' . $rendered . '</p>';\n\t\t\t$PAGE .= $this->graph_export_handler($rendered);\n\t\t}\n\t\t$PAGE .= '</div>';\n\n\t\t$PAGE .= '<a id=\"table\"></a><div id=\"results\">';\n\t\t$prev_title = null;\n\n\t\t$identifier_mapping_to_cores = array();\n\t\t$identifier_mapping_to_threads = array();\n\t\t$identifier_mapping_to_cpu_clock = array();\n\t\t$identifier_mapping_to_ram_channels = array();\n\n\t\tif($result_file->get_system_count() > 1 && !$result_file->is_multi_way_comparison())\n\t\t{\n\t\t\tforeach($result_file->get_systems() as $system)\n\t\t\t{\n\t\t\t\t$t = $system->get_cpu_core_count();\n\t\t\t\tif($t > 0)\n\t\t\t\t{\n\t\t\t\t\t$identifier_mapping_to_cores[$system->get_identifier()] = $t;\n\t\t\t\t}\n\t\t\t\t$t = $system->get_cpu_thread_count();\n\t\t\t\tif($t > 0)\n\t\t\t\t{\n\t\t\t\t\t$identifier_mapping_to_threads[$system->get_identifier()] = $t;\n\t\t\t\t}\n\t\t\t\t$t = $system->get_cpu_clock();\n\t\t\t\tif($t > 0)\n\t\t\t\t{\n\t\t\t\t\t$identifier_mapping_to_cpu_clock[$system->get_identifier()] = $t;\n\t\t\t\t}\n\t\t\t\t$t = $system->get_memory_channels();\n\t\t\t\tif($t > 0)\n\t\t\t\t{\n\t\t\t\t\t$identifier_mapping_to_ram_channels[$system->get_identifier()] = $t;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(count(array_unique($identifier_mapping_to_cores)) < 2)\n\t\t\t{\n\t\t\t\t$identifier_mapping_to_cores = array();\n\t\t\t}\n\t\t\tif(count(array_unique($identifier_mapping_to_threads)) < 2)\n\t\t\t{\n\t\t\t\t$identifier_mapping_to_threads = array();\n\t\t\t}\n\t\t\tif(count(array_unique($identifier_mapping_to_cpu_clock)) < 2)\n\t\t\t{\n\t\t\t\t$identifier_mapping_to_cpu_clock = array();\n\t\t\t}\n\t\t\tif(count(array_unique($identifier_mapping_to_ram_channels)) < 2)\n\t\t\t{\n\t\t\t\t$identifier_mapping_to_ram_channels = array();\n\t\t\t}\n\t\t}\n\n\t\t//\n\t\t// SHOW THE RESULTS\n\t\t//\n\t\t$skip_ros = array();\n\t\tforeach($result_file->get_result_objects() as $i => $result_object)\n\t\t{\n\t\t\t//\n\t\t\t// RENDER TEST AND ANCHOR\n\t\t\t//\n\t\t\tif(in_array($i, $skip_ros))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$ro = clone $result_object;\n\t\t\t$res_desc_shortened = $result_object->get_arguments_description_shortened(false);\n\t\t\t$res = pts_render::render_graph_inline_embed($ro, $result_file, $extra_attributes);\n\t\t\t$PAGE .= '<a id=\"r-' . $i . '\"></a><div style=\"text-align: center;\" id=\"result-' . $i . '\">';\n\n\t\t\t//\n\t\t\t// DISPLAY TEST PORIFLE METADATA HELPER\n\t\t\t//\n\t\t\tif($this->show_test_metadata_helper && $result_object->test_profile->get_title() != $prev_title)\n\t\t\t{\n\t\t\t\t$PAGE .= '<h2>' . $result_object->test_profile->get_title() . '</h2>';\n\t\t\t\tif(is_file(PTS_INTERNAL_OB_CACHE . 'test-profiles/' . $result_object->test_profile->get_identifier() . '/test-definition.xml'))\n\t\t\t\t{\n\t\t\t\t\t$tp = new pts_test_profile(PTS_INTERNAL_OB_CACHE . 'test-profiles/' . $result_object->test_profile->get_identifier() . '/test-definition.xml');\n\t\t\t\t\t$PAGE .= '<p class=\"mini\">' . $tp->get_description() . ' <a href=\"https://openbenchmarking.org/test/' . $result_object->test_profile->get_identifier(false) . '\"><em class=\"hide_on_print\">Learn more via the OpenBenchmarking.org test page</em></a>.</p>';\n\n\t\t\t\t/*\t$suites_containing_test = pts_test_suites::suites_containing_test_profile($result_object->test_profile);\n\t\t\t\t\tif(!empty($suites_containing_test))\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach($suites_containing_test as $suite)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$PAGE .= $suite->get_title() . ' ' . $suite->get_identifier();\n\t\t\t\t\t\t}\n\t\t\t\t\t}  */\n\t\t\t\t}\n\t\t\t\t$prev_title = $result_object->test_profile->get_title();\n\t\t\t}\n\t\t\tif($res != false)\n\t\t\t{\n\t\t\t\t//\n\t\t\t\t// DISPLAY GRAPH\n\t\t\t\t//\n\n\t\t\t\t// Run variability\n\t\t\t\t$res_per_core = false;\n\t\t\t\t$res_per_thread = false;\n\t\t\t\t$res_per_clock = false;\n\t\t\t\t$res_per_ram = false;\n\t\t\t\t$res_variability = false;\n\n\t\t\t\tif(!in_array($result_object->test_profile->get_display_format(), array('LINE_GRAPH', 'BOX_PLOT')) && $result_object->test_result_buffer->detected_multi_sample_result() && $result_object->test_result_buffer->get_count() > 1)\n\t\t\t\t{\n\t\t\t\t\t$extra_attributes['graph_render_type'] = 'HORIZONTAL_BOX_PLOT';\n\t\t\t\t\t$ro = clone $result_object;\n\t\t\t\t\t$res_variability = pts_render::render_graph_inline_embed($ro, $result_file, $extra_attributes);\n\t\t\t\t\tunset($extra_attributes['graph_render_type']);\n\t\t\t\t}\n\t\t\t\tif(in_array($result_object->test_profile->get_test_hardware_type(), array('System', 'Processor', 'OS')))\n\t\t\t\t{\n\t\t\t\t\tif(!empty($identifier_mapping_to_cores))\n\t\t\t\t\t{\n\t\t\t\t\t\t$ro = pts_result_file_analyzer::get_result_object_custom($result_file, $result_object, $identifier_mapping_to_cores, 'Performance Per Core', 'Core');\n\t\t\t\t\t\tif($ro)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$res_per_core = pts_render::render_graph_inline_embed($ro, $result_file, $extra_attributes);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(!empty($identifier_mapping_to_threads) && $identifier_mapping_to_cores != $identifier_mapping_to_threads)\n\t\t\t\t\t{\n\t\t\t\t\t\t$ro = pts_result_file_analyzer::get_result_object_custom($result_file, $result_object, $identifier_mapping_to_threads, 'Performance Per Thread', 'Thread');\n\t\t\t\t\t\tif($ro)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$res_per_thread = pts_render::render_graph_inline_embed($ro, $result_file, $extra_attributes);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(!empty($identifier_mapping_to_cpu_clock))\n\t\t\t\t\t{\n\t\t\t\t\t\t$ro = pts_result_file_analyzer::get_result_object_custom($result_file, $result_object, $identifier_mapping_to_cpu_clock, 'Performance Per Clock', 'GHz');\n\t\t\t\t\t\tif($ro)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$res_per_clock = pts_render::render_graph_inline_embed($ro, $result_file, $extra_attributes);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(in_array($result_object->test_profile->get_test_hardware_type(), array('System', 'Processor', 'Memory')))\n\t\t\t\t{\n\t\t\t\t\tif(!empty($identifier_mapping_to_ram_channels))\n\t\t\t\t\t{\n\t\t\t\t\t\t$ro = pts_result_file_analyzer::get_result_object_custom($result_file, $result_object, $identifier_mapping_to_ram_channels, 'Performance Per Memory Channel', 'Channel');\n\t\t\t\t\t\tif($ro)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$res_per_ram = pts_render::render_graph_inline_embed($ro, $result_file, $extra_attributes);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$tabs = array(\n\t\t\t\t\t'Result' => $res\n\t\t\t\t\t);\n\t\t\t\t$show_on_print = array();\n\n\t\t\t\tforeach($result_file->get_relation_map($i) as $child_ro)\n\t\t\t\t{\n\t\t\t\t\t$c_ro = $result_file->get_result($child_ro);\n\t\t\t\t\tif($c_ro)\n\t\t\t\t\t{\n\t\t\t\t\t\t$desc = str_replace(array(' Monitor', $res_desc_shortened ,'()' ,')', ' - '), '', $c_ro->get_arguments_description_shortened(false));\n\t\t\t\t\t\t$dindex = $desc == $res_desc_shortened || empty($desc) ? $c_ro->test_profile->get_result_scale() : $desc;\n\t\t\t\t\t\t$tabs[$dindex] = pts_render::render_graph_inline_embed($c_ro, $result_file, $extra_attributes);\n\t\t\t\t\t\t$show_on_print[] = $dindex;\n\t\t\t\t\t\t$result_file->remove_result_object_by_id($child_ro);\n\t\t\t\t\t\t$skip_ros[] = $child_ro;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$tabs['Perf Per Core'] = $res_per_core;\n\t\t\t\t$tabs['Perf Per Thread'] = $res_per_thread;\n\t\t\t\t$tabs['Perf Per Clock'] = $res_per_clock;\n\t\t\t\t$tabs['Perf Per RAM Channel'] = $res_per_ram;\n\t\t\t\t$tabs['Result Confidence'] = $res_variability;\n\n\t\t\t\tforeach($tabs as $title => &$graph)\n\t\t\t\t{\n\t\t\t\t\tif(empty($graph))\n\t\t\t\t\t{\n\t\t\t\t\t\tunset($tabs[$title]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tswitch(count($tabs))\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tcontinue 2;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\t$PAGE .= $res . '<br />';\n\t\t\t\t\t\t$PAGE .= $this->graph_export_handler($res);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$PAGE .= '<div class=\"tabs\">';\n\t\t\t\t\t\tforeach($tabs as $title => &$rendered)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$tab_id = strtolower(str_replace(' ', '_', $title)) . '_' . $i;\n\t\t\t\t\t\t\t$PAGE .= '<input type=\"radio\" name=\"tabs_' . $i . '\" id=\"' . $tab_id . '\"' . ($title == 'Result' ? ' checked=\"checked\"' : '') . '>\n\t\t\t\t\t\t\t  <label for=\"' . $tab_id . '\">' . $title . '</label>\n\t\t\t\t\t\t\t  <div class=\"tab' . (in_array($title, $show_on_print) ? ' print_notes' : '') . '\">\n\t\t\t\t\t\t\t    ' . $rendered . $this->graph_export_handler($rendered) . '\n\t\t\t\t\t\t\t  </div>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$PAGE .= '</div>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// $PAGE .= $res . '<br />';\n\n\t\t\t//\n\t\t\t// DISPLAY LOGS\n\t\t\t//\n\t\t\t$PAGE .= $this->result_object_to_error_report($result_file, $result_object, $i);\n\t\t\t$button_area = null;\n\n\t\t\tif($result_file->get_test_run_log_for_result($result_object, -2))\n\t\t\t{\n\t\t\t\t$button_area .= ' <button onclick=\"javascript:display_test_logs_for_result_object(\\'' . $this->result_public_id . '\\', \\'' . $i . '\\'); return false;\">View Test Run Logs</button> ';\n\t\t\t}\n\n\t\t\tif($result_file->get_install_log_for_test($result_object->test_profile, -2))\n\t\t\t{\n\t\t\t\t$button_area .= ' <button onclick=\"javascript:display_install_logs_for_result_object(\\'' . $this->result_public_id . '\\', \\'' . $i . '\\'); return false;\">View Test Installation Logs</button> ';\n\t\t\t}\n\n\n\t\t\t//\n\t\t\t// EDITING / DELETE OPTIONS\n\t\t\t//\n\n\t\t\tif($this->can_delete_results && !$result_object->dynamically_generated)\n\t\t\t{\n\t\t\t\t$button_area .= ' <button onclick=\"javascript:delete_result_from_result_file(\\'' . $this->result_public_id . '\\', \\'' . $i . '\\'); return false;\">Delete Result</button> ';\n\t\t\t}\n\t\t\telse if($result_object->dynamically_generated)\n\t\t\t{\n\t\t\t\t$button_area .= ' <button onclick=\"javascript:hide_result_in_result_file(\\'' . $this->result_public_id . '\\', \\'' . $i . '\\'); return false;\">Hide Result</button> ';\n\t\t\t}\n\t\t\tif($this->can_modify_results && !$result_object->dynamically_generated)\n\t\t\t{\n\t\t\t\tif($result_object->get_annotation() == null)\n\t\t\t\t{\n\t\t\t\t\t$button_area .= ' <button onclick=\"javascript:display_add_annotation_for_result_object(\\'' . $this->result_public_id . '\\', \\'' . $i . '\\', this); return false;\">Add Annotation</button> ';\n\t\t\t\t\t$PAGE .= ' <div id=\"annotation_area_' . $i . '\" style=\"display: none;\"> <form action=\"#\" onsubmit=\"javascript:add_annotation_for_result_object(\\'' . $this->result_public_id . '\\', \\'' . $i . '\\', this); return false;\"><textarea rows=\"4\" cols=\"50\" placeholder=\"Add Annotation...\" name=\"annotation\"></textarea><br /><input type=\"submit\" value=\"Add Annotation\"></form></div>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$PAGE .= '<div id=\"update_annotation_' . $i . '\" contentEditable=\"true\">' . $result_object->get_annotation() . '</div> <input type=\"submit\" value=\"Update Annotation\" onclick=\"javascript:update_annotation_for_result_object(\\'' . $this->result_public_id . '\\', \\'' . $i . '\\'); return false;\">';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$PAGE .= '<p class=\"mini\">' . $result_object->get_annotation() . '</p>';\n\t\t\t}\n\t\t\tif($button_area != null)\n\t\t\t{\n\t\t\t\t$PAGE .= '<p>' . $button_area . '</p>';\n\t\t\t}\n\n\t\t\t$PAGE .= '</div>';\n\t\t\tunset($result_object);\n\t\t}\n\n\t\tif($this->include_page_print_only_helpers)\n\t\t{\n\t\t\t$PAGE .= '<div class=\"print_notes mini\" style=\"font-size: 10px !important;\">' . pts_result_file_output::result_file_to_system_html($result_file, true) . '</div>';\n\t\t}\n\t\t$PAGE .= '</div>';\n\n\t\treturn $PAGE;\n\t}\n\tpublic static function html_template_log_viewer($html_to_show, &$result_file)\n\t{\n\t\treturn '<!doctype html>\n\t\t<html lang=\"en\">\n\t\t<head><title>' . ($result_file ? $result_file->get_title() . ' ' : '') . 'Log Viewer</title>\n\t\t' . (defined('CSS_RESULT_VIEWER_PATH') ? '<link rel=\"stylesheet\" href=\"' . CSS_RESULT_VIEWER_PATH . '\">' : '') . '</head>\n\t\t<body>' . (empty($html_to_show) ? '<p>No logs available.</p>' : $html_to_show) . '</body></html>';\n\t}\n\tpublic static function display_log_html_or_download(&$log_contents, &$list_of_log_files, $log_selected, &$append_to_html, $title, $identifiers_with_logs = false)\n\t{\n\t\t$append_to_html .= '<h2 align=\"center\">' . $title . ' Logs</h2>';\n\t\tif(empty($list_of_log_files) && $identifiers_with_logs && !empty($identifiers_with_logs))\n\t\t{\n\t\t\t$append_to_html = '[DEBUG] No log files were found for this system identifier (' . $title . '), but logs were found for: ' . implode(', ', $identifiers_with_logs);\n\t\t}\n\t\t$append_to_html .= '<div style=\"text-align: center;\"><form action=\"' . str_replace('&log_select=' . $log_selected, '', str_replace('&download', '', $_SERVER['REQUEST_URI'])) . '\" method=\"post\">';\n\t\t$append_to_html .= '<input type=\"hidden\" name=\"modify\" value=\"0\" /><select name=\"log_select\" id=\"log_select\" onchange=\"this.form.submit()\">';\n\t\tforeach($list_of_log_files as $log_file)\n\t\t{\n\t\t\t$append_to_html .= '<option value=\"' . $log_file . '\"' . (isset($_REQUEST['log_select']) && $log_file == $_REQUEST['log_select'] ? 'selected=\"selected\"' : '') . '>' . $log_file . '</option>';\n\t\t}\n\t\t$append_to_html .= '</select> &nbsp; <input type=\"submit\" value=\"Show Log\"></form></div><br /><hr />';\n\t\t$append_to_html .= '<p style=\"font-size: 12px; margin: 5px; text-align: right\"><form action=\"' . $_SERVER['REQUEST_URI'] . '\" method=\"post\"><input type=\"hidden\" name=\"download\" value=\"download\" /><input type=\"hidden\" name=\"log_select\" value=\"' . $log_selected . '\" /><input type=\"submit\" value=\"Download Log File\" style=\"float: right;\"> </form></p>';\n\n\t\tif($log_contents == null)\n\t\t{\n\t\t\t$append_to_html .= '<p>No log file available.</p>';\n\t\t}\n\t\telse if(pts_strings::is_text_string($log_contents) && !isset($_REQUEST['download']))\n\t\t{\n\t\t\t$log_contents = phodevi_vfs::cleanse_file($log_contents);\n\t\t\t$log_contents = htmlentities($log_contents);\n\t\t\t$log_contents = str_replace(PHP_EOL, '<br />', $log_contents);\n\t\t\t$append_to_html .= '<br /><pre style=\"font-family: monospace;\">' . $log_contents . '</pre>';\n\t\t}\n\t\telse if(isset($_REQUEST['log_select']) && $_REQUEST['log_select'] != 'undefined') // to avoid blocking the popup window in first place if it wasn't explicitly selected\n\t\t{\n\t\t\tif(class_exists('finfo'))\n\t\t\t{\n\t\t\t\t$finfo = new finfo(FILEINFO_MIME);\n\t\t\t\theader('Content-type: '. $finfo->buffer($log_contents));\n\t\t\t}\n\t\t\t//header('Content-Type: application/octet-stream');\n\t\t\theader('Content-Length: ' . strlen($log_contents));\n\t\t\theader('Content-Disposition: attachment; filename=\"' . str_ireplace(array('/', '\\\\', '.'), '', $title) . ' - ' . $log_selected . '\"');\n\t\t\techo $log_contents;\n\t\t\texit;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$append_to_html .= '<p>Download log file to view.</p>';\n\t\t}\n\t}\n\tpublic static function get_html_sort_bar(&$result_file, &$request)\n\t{\n\t\t$analyze_options = null;\n\t\t$drop_down_menus = array('Export Benchmark Data' => array(\n\t\t\t\t\t\t'export=pdf' => 'Result File To PDF',\n\t\t\t\t\t\t'export=txt' => 'Result File To Text',\n\t\t\t\t\t\t'export=html' => 'Result File To HTML',\n\t\t\t\t\t\t'export=json' => 'Result File To JSON',\n\t\t\t\t\t//\t'export=xml' => 'Result File To XML',\n\t\t\t\t\t\t'export=xml-suite' => 'Result File To Test Suite (XML)',\n\t\t\t\t\t\t'export=csv' => 'Result File To CSV/Excel',\n\t\t\t\t\t\t'export=csv-all' => 'Individual Run Data To CSV/Excel',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\tif(count($result_file->get_system_identifiers()) > 1)\n\t\t{\n\t\t\t$drop_down_menus['Sort Result Order'] = array(\n\t\t\t\t'sro&rro' => 'By Identifier (DESC)',\n\t\t\t\t'sro' => 'By Identifier (ASC)',\n\t\t\t\t'sor' => 'By Performance (DESC)',\n\t\t\t\t'sor&rro' => 'By Performance (ASC)',\n\t\t\t\t'rdt&rro' => 'By Run Date/Time (DESC)',\n\t\t\t\t'rdt' => 'By Run Date/Time (ASC)',\n\t\t\t\t);\n\t\t}\n\t\tif($result_file->get_test_count() > 1)\n\t\t{\n\t\t\t$drop_down_menus['Sort Graph Order'] = array(\n\t\t\t\t'grs' => 'By Result Spread',\n\t\t\t\t'gru' => 'By Result Unit',\n\t\t\t\t'grt' => 'By Test Title',\n\t\t\t\t'grr' => 'By Test Length/Time'\n\t\t\t\t);\n\t\t}\n\n\t\t$analyze_options .= '<div style=\"float: right;\"><ul>';\n\t\tforeach(array_reverse($drop_down_menus, true) as $menu => $sub_menu)\n\t\t{\n\t\t\t$analyze_options .= '<li><a href=\"#\">' . $menu . '</a><ul>';\n\t\t\tforeach($sub_menu as $option => $txt)\n\t\t\t{\n\t\t\t\t$uri = $_SERVER['REQUEST_URI'];\n\t\t\t\tforeach(array_reverse(array_keys($sub_menu)) as $rem)\n\t\t\t\t{\n\t\t\t\t\t$uri = str_replace('&' . $rem, '', $uri);\n\t\t\t\t}\n\t\t\t\t$uri = str_replace('&rro', '', $uri);\n\t\t\t\t$analyze_options .= '<li><a href=\"' . $uri . '&' . $option . '\">' . $txt . '</a></li>';\n\t\t\t}\n\t\t\t$analyze_options .= '</ul></li>';\n\t\t}\n\t\t$analyze_options .= '</ul></div>';\n\t\treturn $analyze_options;\n\t}\n\tpublic static function get_html_options_markup(&$result_file, &$request, $public_id = null, $can_delete_results = false)\n\t{\n\t\tif($public_id == null && defined('RESULTS_VIEWING_ID'))\n\t\t{\n\t\t\t$public_id = RESULTS_VIEWING_ID;\n\t\t}\n\t\t$analyze_options = null;\n\n\t\t// CHECKS FOR DETERMINING OPTIONS TO DISPLAY\n\t\t$has_identifier_with_color_brand = false;\n\t\t$has_box_plot = false;\n\t\t$has_line_graph = false;\n\t\t$is_multi_way = $result_file->is_multi_way_comparison();\n\t\t$system_count = $result_file->get_system_count();\n\n\t\tforeach($result_file->get_system_identifiers() as $sys)\n\t\t{\n\t\t\tif(pts_render::identifier_to_brand_color($sys, null) != null)\n\t\t\t{\n\t\t\t\t$has_identifier_with_color_brand = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t$multi_test_run_options_tracking = array();\n\t\t$tests_with_multiple_versions = array();\n\t\t$has_test_with_multiple_options = false;\n\t\t$has_test_with_multiple_versions = false;\n\t\tforeach($result_file->get_result_objects() as $i => $result_object)\n\t\t{\n\t\t\tif(!$has_box_plot && $result_object->test_profile->get_display_format() == 'HORIZONTAL_BOX_PLOT')\n\t\t\t{\n\t\t\t\t$has_box_plot = true;\n\t\t\t}\n\t\t\tif(!$has_line_graph && $result_object->test_profile->get_display_format() == 'LINE_GRAPH')\n\t\t\t{\n\t\t\t\t$has_line_graph = true;\n\t\t\t}\n\t\t\tif(!$is_multi_way && !$has_test_with_multiple_options)\n\t\t\t{\n\t\t\t\tif(!isset($multi_test_run_options_tracking[$result_object->test_profile->get_identifier()]))\n\t\t\t\t{\n\t\t\t\t\t$multi_test_run_options_tracking[$result_object->test_profile->get_identifier()] = array();\n\t\t\t\t}\n\t\t\t\t$multi_test_run_options_tracking[$result_object->test_profile->get_identifier()][] = $result_object->get_arguments_description();\n\t\t\t\tif(count($multi_test_run_options_tracking[$result_object->test_profile->get_identifier()]) > 1)\n\t\t\t\t{\n\t\t\t\t\t$has_test_with_multiple_options = true;\n\t\t\t\t\tunset($multi_test_run_options_tracking);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!$is_multi_way && !$has_test_with_multiple_versions)\n\t\t\t{\n\t\t\t\t$ti_no_version = $result_object->test_profile->get_identifier(false);\n\t\t\t\tif(!isset($tests_with_multiple_versions[$ti_no_version]))\n\t\t\t\t{\n\t\t\t\t\t$tests_with_multiple_versions[$ti_no_version] = array();\n\t\t\t\t}\n\t\t\t\tpts_arrays::unique_push($tests_with_multiple_versions[$ti_no_version], $result_object->test_profile->get_app_version());\n\t\t\t\tif(count($tests_with_multiple_versions[$ti_no_version]) > 1)\n\t\t\t\t{\n\t\t\t\t\t$has_test_with_multiple_versions = true;\n\t\t\t\t\tunset($tests_with_multiple_versions);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// (optimization) if it has everything, break\n\t\t\tif($has_line_graph && $has_box_plot && $has_test_with_multiple_options && $has_test_with_multiple_versions)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$suites_in_result_file = $system_count > 1 ? pts_test_suites::suites_in_result_file($result_file, true, 0) : array();\n\t\t// END OF CHECKS\n\n\t\t$analyze_options .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" method=\"post\">';\n\t\t$analyze_checkboxes = array(\n\t\t\t'View' => array(),\n\t\t\t'Statistics' => array(),\n\t\t\t'Sorting' => array(),\n\t\t\t'Graph Settings' => array(),\n\t\t\t'Multi-Way Comparison' => array(),\n\t\t\t);\n\n\t\tif($system_count > 1)\n\t\t{\n\t\t\t$analyze_checkboxes['Statistics'][] = array('shm', 'Show Overall Harmonic Mean(s)');\n\t\t\t$analyze_checkboxes['Statistics'][] = array('sgm', 'Show Overall Geometric Mean');\n\t\t\tif(count($suites_in_result_file) > 1)\n\t\t\t{\n\t\t\t\t$analyze_checkboxes['Statistics'][] = array('sts', 'Show Geometric Means Per-Suite/Category');\n\t\t\t}\n\t\t\t$analyze_checkboxes['Statistics'][] = array('swl', 'Show Wins / Losses Counts (Pie Chart)');\n\t\t\t$analyze_checkboxes['Statistics'][] = array('nor', 'Normalize Results');\n\t\t\t$analyze_checkboxes['Graph Settings'][] = array('ftr', 'Force Line Graphs Where Applicable');\n\t\t\t$analyze_checkboxes['Graph Settings'][] = array('scalar', 'Convert To Scalar Where Applicable');\n\t\t\t$analyze_checkboxes['View'][] = array('hnr', 'Do Not Show Noisy Results');\n\t\t\t$analyze_checkboxes['View'][] = array('hni', 'Do Not Show Results With Incomplete Data');\n\t\t\t$analyze_checkboxes['View'][] = array('hlc', 'Do Not Show Results With Little Change/Spread');\n\t\t\t$analyze_checkboxes['View'][] = array('spr', 'List Notable Results');\n\n\t\t\tif($has_identifier_with_color_brand)\n\t\t\t{\n\t\t\t\t$analyze_checkboxes['Graph Settings'][] = array('ncb', 'Disable Color Branding');\n\t\t\t}\n\t\t}\n\t\tif(count($suites_in_result_file) > 1)\n\t\t{\n\t\t\t$suite_limit = '<h3>Limit displaying results to tests within:</h3>';\n\t\t\t$stis = self::check_request_for_var($request, 'stis');\n\t\t\tif(!is_array($stis))\n\t\t\t{\n\t\t\t\t$stis = explode(',', $stis);\n\t\t\t}\n\t\t\tksort($suites_in_result_file);\n\t\t\t$suite_limit .= '<div style=\"max-height: 250px; overflow: scroll;\">';\n\t\t\tforeach($suites_in_result_file as $suite_identifier => $s)\n\t\t\t{\n\t\t\t\tlist($suite, $contained_tests) = $s;\n\t\t\t\t$id = rtrim(base64_encode($suite_identifier), '=');\n\t\t\t\t$suite_limit .= '<input type=\"checkbox\" name=\"stis[]\" value=\"' . $id . '\"' . (is_array($stis) && in_array($id, $stis) ? ' checked=\"checked\"' : null) . ' /> ' . $suite->get_title() . ' <sup><em>' . count($contained_tests) . ' Tests</em></sup><br />';\n\t\t\t}\n\t\t\t$suite_limit .= '</div>';\n\t\t\t$analyze_checkboxes['View'][] = array('', $suite_limit);\n\t\t}\n\n\t\t$analyze_checkboxes['Graph Settings'][] = array('vb', 'Prefer Vertical Bar Graphs');\n\t\t$analyze_checkboxes['Statistics'][] = array('rol', 'Remove Outliers Before Calculating Averages');\n\t\t//$analyze_checkboxes['Statistics'][] = array('gtb', 'Graph Values Of All Runs (Box Plot)');\n\t\t//$analyze_checkboxes['Statistics'][] = array('gtl', 'Graph Values Of All Runs (Line Graph)');\n\n\t\tif($has_box_plot || $has_line_graph)\n\t\t{\n\t\t\t$analyze_checkboxes['Graph Settings'][] = array('nbp', 'No Box Plots');\n\t\t}\n\n\t\tif($is_multi_way && $system_count > 1)\n\t\t{\n\t\t\t$analyze_checkboxes['Multi-Way Comparison'][] = array('cmw', 'Condense Comparison');\n\t\t}\n\t\tif(($is_multi_way && $system_count > 1) || self::check_request_for_var($request, 'cmv') || self::check_request_for_var($request, 'cts'))\n\t\t{\n\t\t\t$analyze_checkboxes['Multi-Way Comparison'][] = array('imw', 'Transpose Comparison');\n\t\t}\n\t\tif((!$is_multi_way && $has_test_with_multiple_options && !self::check_request_for_var($request, 'cmv')) || self::check_request_for_var($request, 'cts'))\n\t\t{\n\t\t\t$analyze_checkboxes['Multi-Way Comparison'][] = array('cts', 'Condense Multi-Option Tests Into Single Result Graphs');\n\t\t}\n\t\tif((!$is_multi_way && $has_test_with_multiple_versions && !self::check_request_for_var($request, 'cts')) || self::check_request_for_var($request, 'cmv'))\n\t\t{\n\t\t\t$analyze_checkboxes['Multi-Way Comparison'][] = array('cmv', 'Condense Test Profiles With Multiple Version Results Into Single Result Graphs');\n\t\t}\n\n\t\t$analyze_checkboxes['Table'][] = array('sdt', 'Show Detailed System Result Table');\n\n\t\t$t = null;\n\t\tforeach($analyze_checkboxes as $title => $group)\n\t\t{\n\t\t\tif(empty($group))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$t .= '<div class=\"pts_result_viewer_settings_box\">';\n\t\t\t$t .= '<h2>' . $title . '</h2>';\n\t\t\tforeach($group as $key)\n\t\t\t{\n\t\t\t\tif($key[0] == null)\n\t\t\t\t{\n\t\t\t\t\t$t .= $key[1] . '<br />';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$t .= '<input type=\"checkbox\" name=\"' . $key[0] . '\" value=\"1\"' . (self::check_request_for_var($request, $key[0]) ? ' checked=\"checked\"' : null) . ' /> ' . $key[1] . '<br />';\n\t\t\t\t}\n\t\t\t}\n\t\t\t$t .= '</div>';\n\t\t}\n\n\t\tif($system_count > 0)\n\t\t{\n\t\t\t$has_system_logs = $result_file->system_logs_available();\n\t\t\t$t .= '<div style=\"clear: both;\"><h2>Run Management</h2>\n\t\t\t<div class=\"div_table\">\n\t\t\t<div class=\"div_table_body\">\n\t\t\t<div class=\"div_table_first_row\">';\n\n\t\t\tif($system_count > 1)\n\t\t\t{\n\t\t\t\t$t .= '<div class=\"div_table_cell\">Highlight<br />Result</div>\n\t\t\t<div class=\"div_table_cell\">Hide<br />Result</div>';\n\t\t\t}\n\n\t\t\t$t .= '<div class=\"div_table_cell\">Result<br />Identifier</div>';\n\n\t\t\tif($has_system_logs)\n\t\t\t{\n\t\t\t\t$t .= '<div class=\"div_table_cell\">View Logs</div>';\n\t\t\t}\n\n\t\t\t$t .= '<div class=\"div_table_cell\">Performance Per<br />Dollar</div>\n\t\t\t<div class=\"div_table_cell\">Date<br />Run</div>\n\t\t\t<div class=\"div_table_cell\"> &nbsp; Test<br /> &nbsp; Duration</div>\n\t\t\t<div class=\"div_table_cell\"> </div>\n\t\t\t</div>\n\t\t\t';\n\t\t\t$hgv = self::check_request_for_var($request, 'hgv');\n\t\t\tif(!is_array($hgv))\n\t\t\t{\n\t\t\t\t$hgv = explode(',', $hgv);\n\t\t\t}\n\t\t\t$rmm = self::check_request_for_var($request, 'rmm');\n\t\t\tif(!is_array($rmm))\n\t\t\t{\n\t\t\t\t$rmm = explode(',', $rmm);\n\t\t\t}\n\t\t\t$start_of_year = strtotime(date('Y-01-01'));\n\t\t\t$test_run_times = $result_file->get_test_run_times();\n\t\t\tforeach($result_file->get_systems() as $sys)\n\t\t\t{\n\t\t\t\t$si = $sys->get_identifier();\n\t\t\t\t$ppdx = rtrim(base64_encode($si), '=');\n\t\t\t\t$ppd = self::check_request_for_var($request, 'ppd_' . $ppdx);\n\t\t\t$t .= '\n\t\t\t\t<div id=\"table-line-' . $ppdx . '\" class=\"div_table_row\">';\n\t\t\t\tif($system_count > 1)\n\t\t\t\t{\n\t\t\t\t\t$t .= '<div class=\"div_table_cell\"><input type=\"checkbox\" name=\"hgv[]\" value=\"' . $si . '\"' . (is_array($hgv) && in_array($si, $hgv) ? ' checked=\"checked\"' : null) . ' /></div>\n\t\t\t\t<div class=\"div_table_cell\"><input type=\"checkbox\" name=\"rmm[]\" value=\"' . $si . '\"' . (is_array($rmm) && in_array($si, $rmm) ? ' checked=\"checked\"' : null) . ' /></div>';\n\t\t\t\t}\n\n\t\t\t\t$t .= '<div class=\"div_table_cell\"><strong>' . $si . '</strong></div>';\n\n\t\t\t\tif($has_system_logs)\n\t\t\t\t{\n\t\t\t\t\t$t .= '<div class=\"div_table_cell\">' . ($system_count == 1 || $sys->has_log_files() ? '<button type=\"button\" onclick=\"javascript:display_system_logs_for_result(\\'' . $public_id . '\\', \\'' . $sys->get_original_identifier() . '\\'); return false;\">View System Logs</button>' : ' ') . '</div>';\n\t\t\t\t}\n\t\t\t\t$stime = strtotime($sys->get_timestamp());\n\t\t\t\t$t .= '<div class=\"div_table_cell\"><input type=\"number\" min=\"0\" step=\"0.001\" name=\"ppd_' . $ppdx . '\" value=\"' . ($ppd && $ppd !== true ? strip_tags($ppd) : '0') . '\" /></div>\n\t\t\t<div class=\"div_table_cell\">' . date(($stime > $start_of_year ? 'F d' : 'F d Y'), $stime) . '</div>\n\t\t\t<div class=\"div_table_cell\"> &nbsp; ' . (isset($test_run_times[$si]) && $test_run_times[$si] > 0 ? pts_strings::format_time($test_run_times[$si], 'SECONDS', true, 60) : ' ') . '</div>';\n\n\t\t\t\tif($can_delete_results && !empty($public_id))\n\t\t\t\t{\n\t\t\t\t\t$t .= '<div class=\"div_table_cell\">';\n\t\t\t\t\tif($system_count > 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t$t .= '<button type=\"button\" onclick=\"javascript:delete_run_from_result_file(\\'' . $public_id . '\\', \\'' . $si . '\\', \\'' . $ppdx . '\\'); return false;\">Delete Run</button> ';\n\t\t\t\t\t}\n\n\t\t\t\t\t$t .= '<button type=\"button\" onclick=\"javascript:rename_run_in_result_file(\\'' . $public_id . '\\', \\'' . $si . '\\'); return false;\">Rename Run</button></div>';\n\t\t\t\t}\n\t\t\t\t$t .= '</div>';\n\t\t\t}\n\n\t\t\tif($system_count > 1)\n\t\t\t{\n\t\t\t\t$t .= '\n\t\t\t\t<div class=\"div_table_row\">\n\t\t\t\t<div class=\"div_table_cell\"> </div>\n\t\t\t\t<div class=\"div_table_cell\"><input type=\"checkbox\" onclick=\"javascript:invert_hide_all_results_checkboxes();\" /></div>\n\t\t\t\t<div class=\"div_table_cell\"><em>Invert Hiding All Results Option</em></div>';\n\n\t\t\t\tif($has_system_logs)\n\t\t\t\t{\n\t\t\t\t\t$t .= '<div class=\"div_table_cell\"> </div>';\n\t\t\t\t}\n\n\t\t\t\t$t .= '<div class=\"div_table_cell\">' . self::html_select_menu('ppt', 'ppt', null, array('D' => 'Dollar', 'DPH' => 'Dollar / Hour'), true) . '</div>\n\t\t\t\t<div class=\"div_table_cell\"> </div>\n\t\t\t\t<div class=\"div_table_cell\"> &nbsp; <em>' . pts_strings::format_time(array_sum($test_run_times) / count($test_run_times), 'SECONDS', true, 60) . '</em></div>\n\t\t\t\t<div class=\"div_table_cell\">';\n\n\t\t\t\tif($can_delete_results)\n\t\t\t\t{\n\t\t\t\t\t$t .= '<button type=\"button\" onclick=\"javascript:reorder_result_file(\\'' . $public_id . '\\'); return false;\">Sort / Reorder Runs</button>';\n\t\t\t\t}\n\t\t\t\t$t .= '</div></div>';\n\t\t\t}\n\n\t\t\t$t .= '\n\t\t\t</div>\n\t\t\t</div></div>';\n\t\t}\n\n\t\t$analyze_options .= $t;\n\n\t\tif($system_count > 2)\n\t\t{\n\t\t\t$analyze_options .= '<br /><div>Only show results where ' . self::html_select_menu('ftt', 'ftt', null, array_merge(array(null), $result_file->get_system_identifiers()), false) . ' is faster than ' . self::html_select_menu('ftb', 'ftb', null, array_merge(array(null), $result_file->get_system_identifiers()), false) . '</div>';\n\t\t}\n\n\t\tif($result_file->get_test_count() > 1)\n\t\t{\n\t\t\t$analyze_options .= '<div>Only show results matching title/arguments (delimit multiple options with a comma): ' . self::html_input_field('oss', 'oss') . '</div>';\n\t\t}\n\n\t\t$analyze_options .= '<br /><input style=\"clear: both;\" name=\"submit\" value=\"Refresh Results\" type=\"submit\" /></form>';\n\n\t\treturn $analyze_options;\n\t}\n\tpublic static function process_result_export_pre_render(&$request, &$result_file, &$extra_attributes, $can_modify_results = false, $can_delete_results = false)\n\t{\n\t\tif(self::check_request_for_var($request, 'rdt'))\n\t\t{\n\t\t\t$result_file->reorder_runs($result_file->get_system_identifiers_by_date());\n\t\t}\n\n\t\t// Result export?\n\t\t$result_title = (isset($_GET['result']) ? $_GET['result'] : 'result');\n\t\tswitch(isset($_REQUEST['export']) ? $_REQUEST['export'] : '')\n\t\t{\n\t\t\tcase '':\n\t\t\t\tbreak;\n\t\t\tcase 'pdf':\n\t\t\t\theader('Content-Type: application/pdf');\n\t\t\t\t$pdf_output = pts_result_file_output::result_file_to_pdf($result_file, $result_title . '.pdf', 'D', $extra_attributes);\n\t\t\t\texit;\n\t\t\tcase 'html':\n\t\t\t\t$referral_url = '';\n\t\t\t\tif(defined('OPENBENCHMARKING_BUILD'))\n\t\t\t\t{\n\t\t\t\t\t$referral_url = 'https://openbenchmarking.org' . str_replace('&export=html', '', $_SERVER['REQUEST_URI']);\n\t\t\t\t}\n\t\t\t\techo pts_result_file_output::result_file_to_html($result_file, $extra_attributes, $referral_url);\n\t\t\t\texit;\n\t\t\tcase 'json':\n\t\t\t\theader('Content-Type: application/json');\n\t\t\t\techo pts_result_file_output::result_file_to_json($result_file);\n\t\t\t\texit;\n\t\t\tcase 'csv':\n\t\t\t\t$result_csv = pts_result_file_output::result_file_to_csv($result_file, ',', $extra_attributes);\n\t\t\t\theader('Content-Description: File Transfer');\n\t\t\t\theader('Content-Type: application/csv');\n\t\t\t\theader('Content-Disposition: attachment; filename=' . $result_title . '.csv');\n\t\t\t\theader('Expires: 0');\n\t\t\t\theader('Cache-Control: must-revalidate');\n\t\t\t\theader('Pragma: public');\n\t\t\t\theader('Content-Length: ' . strlen($result_csv));\n\t\t\t\techo $result_csv;\n\t\t\t\texit;\n\t\t\tcase 'csv-all':\n\t\t\t\t$result_csv = pts_result_file_output::result_file_raw_to_csv($result_file);\n\t\t\t\theader('Content-Description: File Transfer');\n\t\t\t\theader('Content-Type: application/csv');\n\t\t\t\theader('Content-Disposition: attachment; filename=' . $result_title . '.csv');\n\t\t\t\theader('Expires: 0');\n\t\t\t\theader('Cache-Control: must-revalidate');\n\t\t\t\theader('Pragma: public');\n\t\t\t\theader('Content-Length: ' . strlen($result_csv));\n\t\t\t\techo $result_csv;\n\t\t\t\texit;\n\t\t\tcase 'txt':\n\t\t\t\t$result_txt = pts_result_file_output::result_file_to_text($result_file);\n\t\t\t\theader('Content-Description: File Transfer');\n\t\t\t\theader('Content-Type: text/plain');\n\t\t\t\theader('Content-Disposition: attachment; filename=' . $result_title . '.txt');\n\t\t\t\theader('Expires: 0');\n\t\t\t\theader('Cache-Control: must-revalidate');\n\t\t\t\theader('Pragma: public');\n\t\t\t\theader('Content-Length: ' . strlen($result_txt));\n\t\t\t\techo $result_txt;\n\t\t\t\texit;\n\t\t\tcase 'xml-suite':\n\t\t\t\t$suite_xml = pts_result_file_output::result_file_to_suite_xml($result_file);\n\t\t\t\theader('Content-Description: File Transfer');\n\t\t\t\theader('Content-Type: text/xml');\n\t\t\t\theader('Content-Disposition: attachment; filename=' . $result_title . '-suite.xml');\n\t\t\t\theader('Expires: 0');\n\t\t\t\theader('Cache-Control: must-revalidate');\n\t\t\t\theader('Pragma: public');\n\t\t\t\theader('Content-Length: ' . strlen($suite_xml));\n\t\t\t\techo $suite_xml;\n\t\t\t\texit;\n\t\t\tcase 'xml':\n\t\t\t\t$result_xml = $result_file->get_xml(null, true);\n\t\t\t\theader('Content-Description: File Transfer');\n\t\t\t\theader('Content-Type: text/xml');\n\t\t\t\theader('Content-Disposition: attachment; filename=' . $result_title . '.xml');\n\t\t\t\theader('Expires: 0');\n\t\t\t\theader('Cache-Control: must-revalidate');\n\t\t\t\theader('Pragma: public');\n\t\t\t\theader('Content-Length: ' . strlen($result_xml));\n\t\t\t\techo $result_xml;\n\t\t\t\texit;\n\t\t\tcase 'view_system_logs':\n\t\t\t\t$html_viewer = '';\n\t\t\t\tforeach($result_file->get_systems() as $system)\n\t\t\t\t{\n\t\t\t\t\t$sid = base64_decode($_REQUEST['system_id']);\n\n\t\t\t\t\tif($system->get_original_identifier() == $sid || $system->get_identifier() == $sid)\n\t\t\t\t\t{\n\t\t\t\t\t\t$system_logs = $system->log_files();\n\t\t\t\t\t\t$identifiers_with_logs = empty($system_logs) ? $result_file->identifiers_with_system_logs() : array();\n\t\t\t\t\t\t$show_log = isset($_REQUEST['log_select']) && $_REQUEST['log_select'] != 'undefined' && $_REQUEST['log_select'] != null ? $_REQUEST['log_select'] : (isset($system_logs[0]) ? $system_logs[0] : '');\n\t\t\t\t\t\t$log_contents = $system->log_files($show_log, false);\n\t\t\t\t\t\tpts_result_viewer_embed::display_log_html_or_download($log_contents, $system_logs, $show_log, $html_viewer, $sid, $identifiers_with_logs);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\techo pts_result_viewer_embed::html_template_log_viewer($html_viewer, $result_file);\n\t\t\t\texit;\n\t\t\tcase 'view_install_logs':\n\t\t\t\t$html_viewer = '';\n\t\t\t\tif(isset($_REQUEST['result_object']))\n\t\t\t\t{\n\t\t\t\t\tif(($result_object = $result_file->get_result_object_by_hash($_REQUEST['result_object'])))\n\t\t\t\t\t{\n\t\t\t\t\t\t$install_logs = $result_file->get_install_log_for_test($result_object->test_profile, false);\n\t\t\t\t\t\tif(count($install_logs) > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$show_log = isset($_REQUEST['log_select']) && $_REQUEST['log_select'] != 'undefined' ? $_REQUEST['log_select'] : (isset($install_logs[0]) ? $install_logs[0] : '');\n\t\t\t\t\t\t\t$log_contents = $result_file->get_install_log_for_test($result_object->test_profile, $show_log, false);\n\t\t\t\t\t\t\tpts_result_viewer_embed::display_log_html_or_download($log_contents, $install_logs, $show_log, $html_viewer, $result_object->test_profile->get_title() . ' Installation');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\techo pts_result_viewer_embed::html_template_log_viewer($html_viewer, $result_file);\n\t\t\t\texit;\n\t\t\tcase 'view_test_logs':\n\t\t\t\t$html_viewer = '';\n\t\t\t\tif(isset($_REQUEST['result_object']))\n\t\t\t\t{\n\t\t\t\t\tif(($result_object = $result_file->get_result_object_by_hash($_REQUEST['result_object'])))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(($test_logs = $result_file->get_test_run_log_for_result($result_object, false)))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$show_log = isset($_REQUEST['log_select']) && $_REQUEST['log_select'] != 'undefined' ? $_REQUEST['log_select'] : (isset($test_logs[0]) ? $test_logs[0] : '');\n\t\t\t\t\t\t\t$log_contents = $result_file->get_test_run_log_for_result($result_object, $show_log, false);\n\t\t\t\t\t\t\tpts_result_viewer_embed::display_log_html_or_download($log_contents, $test_logs, $show_log, $html_viewer, trim($result_object->test_profile->get_title() . ' ' . $result_object->get_arguments_description()));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\techo pts_result_viewer_embed::html_template_log_viewer($html_viewer, $result_file);\n\t\t\t\texit;\n\t\t}\n\t}\n\tpublic static function process_result_modify_pre_render(&$result_file, $can_modify_results = false, $can_delete_results = false)\n\t{\n\n\t\tif(!isset($_REQUEST['modify']) || ($can_modify_results == false && $can_delete_results == false))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tswitch($_REQUEST['modify'])\n\t\t{\n\t\t\tcase 'update-result-file-meta':\n\t\t\t\tif($can_modify_results && isset($_REQUEST['result_title']) && isset($_REQUEST['result_desc']))\n\t\t\t\t{\n\t\t\t\t\t$result_file->set_title($_REQUEST['result_title']);\n\t\t\t\t\t$result_file->set_description($_REQUEST['result_desc']);\n\t\t\t\t\t$result_file->save();\n\t\t\t\t}\n\t\t\t\texit;\n\t\t\tcase 'remove-result-object':\n\t\t\t\tif($can_delete_results && isset($_REQUEST['result_object']))\n\t\t\t\t{\n\t\t\t\t\tif($result_file->remove_result_object_by_id($_REQUEST['result_object']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$result_file->save();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\texit;\n\t\t\tcase 'remove-result-run':\n\t\t\t\tif($can_delete_results && isset($_REQUEST['result_run']))\n\t\t\t\t{\n\t\t\t\t\tif($result_file->remove_run($_REQUEST['result_run']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$result_file->save();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\texit;\n\t\t\tcase 'rename-result-run':\n\t\t\t\tif(VIEWER_CAN_MODIFY_RESULTS && isset($_REQUEST['result_run']) && isset($_REQUEST['new_result_run']))\n\t\t\t\t{\n\t\t\t\t\tif($result_file->rename_run($_REQUEST['result_run'], $_REQUEST['new_result_run']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$result_file->save();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\texit;\n\t\t\tcase 'add-annotation-to-result-object':\n\t\t\t\tif($can_modify_results && isset($_REQUEST['result_object']) && isset($_REQUEST['annotation']))\n\t\t\t\t{\n\t\t\t\t\tif($result_file->update_annotation_for_result_object_by_id($_REQUEST['result_object'], $_REQUEST['annotation']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$result_file->save();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\texit;\n\t\t\tcase 'reorder_result_file':\n\t\t\t\tif($can_modify_results)\n\t\t\t\t{\n\t\t\t\t\tif(count($result_file_identifiers = $result_file->get_system_identifiers()) > 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(isset($_POST['reorder_post']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$sort_array = array();\n\n\t\t\t\t\t\t\tforeach($result_file_identifiers as $i => $id)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(isset($_POST[base64_encode($id)]))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$sort_array[$id] = $_POST[base64_encode($id)];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tasort($sort_array);\n\t\t\t\t\t\t\t$sort_array = array_keys($sort_array);\n\t\t\t\t\t\t\t$result_file->reorder_runs($sort_array);\n\t\t\t\t\t\t\t$result_file->save();\n\t\t\t\t\t\t\techo '<p>Result file is now reordered. <script> window.close(); </script></p>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(isset($_POST['auto_sort']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsort($result_file_identifiers);\n\t\t\t\t\t\t\t$result_file->reorder_runs($result_file_identifiers);\n\t\t\t\t\t\t\t$result_file->save();\n\t\t\t\t\t\t\techo '<p>Result file is now auto-sorted. <script> window.close(); </script></p>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\techo '<p>Reorder the result file as desired by altering the numbering from lowest to highest.</p>';\n\t\t\t\t\t\t\techo '<form method=\"post\" action=\"' . $_SERVER['REQUEST_URI'] . '\">';\n\t\t\t\t\t\t\tforeach($result_file_identifiers as $i => $id)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\techo '<input style=\"width: 80px;\" name=\"' . base64_encode($id) . '\" type=\"number\" min=\"0\" value=\"' . ($i + 1) . '\" />' . $id . '<br />';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\techo '<input type=\"hidden\" name=\"reorder_post\" value=\"1\" /><input type=\"submit\" value=\"Reorder Results\" /></form>';\n\t\t\t\t\t\t\techo '<form method=\"post\" action=\"' . $_SERVER['REQUEST_URI'] . '\">';\n\n\t\t\t\t\t\t\techo '<input type=\"hidden\" name=\"auto_sort\" value=\"1\" /><input type=\"submit\" value=\"Auto-Sort Result File\" /></form>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\texit;\n\t\t}\n\t}\n\tpublic static function process_helper_html(&$request, &$result_file, &$extra_attributes, $can_modify_results = false, $can_delete_results = false)\n\t{\n\t\tself::process_result_export_pre_render($request, $result_file, $extra_attributes, $can_modify_results, $can_delete_results);\n\t\t$html = null;\n\t\tif(self::check_request_for_var($request, 'spr'))\n\t\t{\n\t\t\t$results = $result_file->get_result_objects();\n\t\t\t$spreads = array();\n\t\t\tforeach($results as $i => &$result_object)\n\t\t\t{\n\t\t\t\t$spreads[$i] = $result_object->get_spread();\n\t\t\t}\n\t\t\tarsort($spreads);\n\t\t\t$spreads = array_slice($spreads, 0, min((int)(count($results) / 4), 10), true);\n\n\t\t\tif(!empty($spreads))\n\t\t\t{\n\t\t\t\t$html .= '<h3>Notable Results</h3>';\n\t\t\t\tforeach($spreads as $result_key => $spread)\n\t\t\t\t{\n\t\t\t\t\t$ro = $result_file->get_result_objects($result_key);\n\t\t\t\t\tif(!is_object($ro[0]))\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$html .= '<a href=\"#r-' . $result_key . '\">' . $ro[0]->test_profile->get_title() . ' - ' . $ro[0]->get_arguments_description() . '</a><br />';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $html;\n\t}\n\tpublic static function check_request_for_var(&$request, $check)\n\t{\n\t\t// the obr_ check is to maintain OpenBenchmarking.org compatibility for its original variable naming to preserve existing URLs\n\t\t$ret = false;\n\t\tif(defined('OPENBENCHMARKING_BUILD') && isset($request['obr_' . $check]))\n\t\t{\n\t\t\t$ret = empty($request['obr_' . $check]) ? true : $request['obr_' . $check];\n\t\t}\n\t\tif(isset($request[$check]))\n\t\t{\n\t\t\t$ret = empty($request[$check]) ? true : $request[$check];\n\t\t}\n\n\t\tif($ret && isset($ret[5]))\n\t\t{\n\t\t\t$ret = str_replace('_DD_', '.', $ret);\n\t\t}\n\n\t\treturn $ret;\n\t}\n\tpublic static function process_request_to_attributes(&$request, &$result_file, &$extra_attributes)\n\t{\n\t\tif(($oss = self::check_request_for_var($request, 'oss')))\n\t\t{\n\t\t\t$oss = pts_strings::comma_explode($oss);\n\t\t\tforeach($result_file->get_result_objects() as $i => $result_object)\n\t\t\t{\n\t\t\t\t$matched = false;\n\t\t\t\tforeach($oss as $search_check)\n\t\t\t\t{\n\t\t\t\t\tif(stripos($result_object->get_arguments_description(), $search_check) === false && stripos($result_object->test_profile->get_identifier(), $search_check) === false && stripos($result_object->test_profile->get_title(), $search_check) === false)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Not found\n\t\t\t\t\t\t$matched = false;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$matched = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!$matched)\n\t\t\t\t{\n\t\t\t\t\t$result_file->remove_result_object_by_id($i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(self::check_request_for_var($request, 'ftt') && self::check_request_for_var($request, 'ftt'))\n\t\t{\n\t\t\t$ftt = self::check_request_for_var($request, 'ftt');\n\t\t\t$ftb = self::check_request_for_var($request, 'ftb');\n\t\t\tif(!empty($ftt) && !empty($ftb) && $ftt !== true && $ftb !== true)\n\t\t\t{\n\t\t\t\tforeach($result_file->get_result_objects() as $i => $result_object)\n\t\t\t\t{\n\t\t\t\t\t$ftt_result = $result_object->test_result_buffer->get_result_from_identifier($ftt);\n\t\t\t\t\t$ftb_result = $result_object->test_result_buffer->get_result_from_identifier($ftb);\n\n\t\t\t\t\tif($ftt_result && $ftb_result)\n\t\t\t\t\t{\n\t\t\t\t\t\t$ftt_wins = false;\n\n\t\t\t\t\t\tif($result_object->test_profile->get_result_proportion() == 'HIB')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif($ftt_result > $ftb_result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$ftt_wins = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif($ftt_result < $ftb_result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$ftt_wins = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(!$ftt_wins)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$result_file->remove_result_object_by_id($i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$result_file->remove_result_object_by_id($i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(($stis = self::check_request_for_var($request, 'stis')))\n\t\t{\n\t\t\tif(!is_array($stis))\n\t\t\t{\n\t\t\t\t$stis = explode(',', $stis);\n\t\t\t}\n\t\t\t$suites_in_result_file = pts_test_suites::suites_in_result_file($result_file, true, 0);\n\t\t\t$tests_to_show = array();\n\t\t\tforeach($stis as $suite_to_show)\n\t\t\t{\n\t\t\t\t$suite_to_show = base64_decode($suite_to_show);\n\t\t\t\tif(isset($suites_in_result_file[$suite_to_show]))\n\t\t\t\t{\n\t\t\t\t\tforeach($suites_in_result_file[$suite_to_show][1] as $test_to_show)\n\t\t\t\t\t{\n\t\t\t\t\t\t$tests_to_show[] = $test_to_show;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!empty($tests_to_show))\n\t\t\t{\n\t\t\t\tforeach($result_file->get_result_objects() as $i => $result_object)\n\t\t\t\t{\n\t\t\t\t\tif($result_object->get_parent_hash())\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!$result_file->get_result_object_by_hash($result_object->get_parent_hash()) || !in_array($result_file->get_result_object_by_hash($result_object->get_parent_hash())->test_profile->get_identifier(false), $tests_to_show))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$result_file->remove_result_object_by_id($i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(!in_array($result_object->test_profile->get_identifier(false), $tests_to_show))\n\t\t\t\t\t{\n\t\t\t\t\t\t$result_file->remove_result_object_by_id($i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(self::check_request_for_var($request, 'hlc'))\n\t\t{\n\t\t\tforeach($result_file->get_result_objects() as $i => $result_object)\n\t\t\t{\n\t\t\t\tif($result_object->result_flat())\n\t\t\t\t{\n\t\t\t\t\t$result_file->remove_result_object_by_id($i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(self::check_request_for_var($request, 'hnr'))\n\t\t{\n\t\t\t$result_file->remove_noisy_results();\n\t\t}\n\t\tif(self::check_request_for_var($request, 'hni'))\n\t\t{\n\t\t\t$system_count = $result_file->get_system_count();\n\t\t\tforeach($result_file->get_result_objects() as $i => $result_object)\n\t\t\t{\n\t\t\t\tif($result_object->test_result_buffer->get_count() < $system_count)\n\t\t\t\t{\n\t\t\t\t\t$result_file->remove_result_object_by_id($i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(self::check_request_for_var($request, 'grs'))\n\t\t{\n\t\t\t$result_file->sort_result_object_order_by_spread();\n\t\t}\n\t\telse if(self::check_request_for_var($request, 'grt'))\n\t\t{\n\t\t\t$result_file->sort_result_object_order_by_title();\n\t\t}\n\t\telse if(self::check_request_for_var($request, 'gru'))\n\t\t{\n\t\t\t$result_file->sort_result_object_order_by_result_scale();\n\t\t}\n\t\telse if(self::check_request_for_var($request, 'grr'))\n\t\t{\n\t\t\t$result_file->sort_result_object_order_by_run_time();\n\t\t}\n\n\t\tif(self::check_request_for_var($request, 'shm'))\n\t\t{\n\t\t\tforeach(pts_result_file_analyzer::generate_harmonic_mean_result($result_file) as $result)\n\t\t\t{\n\t\t\t\tif($result)\n\t\t\t\t{\n\t\t\t\t\t$result_file->add_result($result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(self::check_request_for_var($request, 'sgm'))\n\t\t{\n\t\t\t$result = pts_result_file_analyzer::generate_geometric_mean_result($result_file);\n\t\t\tif($result)\n\t\t\t{\n\t\t\t\t$result_file->add_result($result);\n\t\t\t}\n\t\t}\n\t\tif(self::check_request_for_var($request, 'sts'))\n\t\t{\n\t\t\tforeach(pts_result_file_analyzer::generate_geometric_mean_result_for_suites_in_result_file($result_file, true, 0) as $result)\n\t\t\t{\n\t\t\t\tif($result)\n\t\t\t\t{\n\t\t\t\t\t$result_file->add_result($result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(self::check_request_for_var($request, 'swl'))\n\t\t{\n\t\t\tforeach(pts_result_file_analyzer::generate_wins_losses_results($result_file) as $result)\n\t\t\t{\n\t\t\t\tif($result)\n\t\t\t\t{\n\t\t\t\t\t$result_file->add_result($result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(self::check_request_for_var($request, 'cts'))\n\t\t{\n\t\t\tpts_result_file_analyzer::condense_result_file_by_multi_option_tests($result_file);\n\t\t}\n\t\tif(self::check_request_for_var($request, 'cmv'))\n\t\t{\n\t\t\tpts_result_file_analyzer::condense_result_file_by_multi_version_tests($result_file);\n\t\t}\n\t\tif(self::check_request_for_var($request, 'sor'))\n\t\t{\n\t\t\t$extra_attributes['sort_result_buffer_values'] = true;\n\t\t}\n\t\tif(self::check_request_for_var($request, 'rro'))\n\t\t{\n\t\t\t$extra_attributes['reverse_result_buffer'] = true;\n\t\t}\n\t\tif(self::check_request_for_var($request, 'sro'))\n\t\t{\n\t\t\t$extra_attributes['sort_result_buffer'] = true;\n\t\t}\n\t\tif(self::check_request_for_var($request, 'nor'))\n\t\t{\n\t\t\t$extra_attributes['normalize_result_buffer'] = true;\n\t\t}\n\t\tif(self::check_request_for_var($request, 'ftr'))\n\t\t{\n\t\t\t$extra_attributes['force_tracking_line_graph'] = true;\n\t\t}\n\t\tif(self::check_request_for_var($request, 'imw'))\n\t\t{\n\t\t\t$extra_attributes['multi_way_comparison_invert_default'] = false;\n\t\t}\n\t\tif(self::check_request_for_var($request, 'cmw'))\n\t\t{\n\t\t\t$extra_attributes['condense_multi_way'] = true;\n\t\t}\n\t\tif(($hgv = self::check_request_for_var($request, 'hgv')))\n\t\t{\n\t\t\tif(is_array($hgv))\n\t\t\t{\n\t\t\t\t$extra_attributes['highlight_graph_values'] = $hgv;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$extra_attributes['highlight_graph_values'] = explode(',', $hgv);\n\t\t\t}\n\t\t}\n\t\telse if(self::check_request_for_var($request, 'hgv_base64'))\n\t\t{\n\t\t\t$extra_attributes['highlight_graph_values'] = explode(',', base64_decode(self::check_request_for_var($request, 'hgv_base64')));\n\t\t}\n\t\tif(($rmm = self::check_request_for_var($request, 'rmm')))\n\t\t{\n\t\t\tif(!is_array($rmm))\n\t\t\t{\n\t\t\t\t$rmm = explode(',', $rmm);\n\t\t\t}\n\n\t\t\tforeach($rmm as $rm)\n\t\t\t{\n\t\t\t\t$result_file->remove_run($rm);\n\t\t\t}\n\t\t}\n\t\tif(self::check_request_for_var($request, 'scalar'))\n\t\t{\n\t\t\t$extra_attributes['compact_to_scalar'] = true;\n\t\t}\n\t\tif(self::check_request_for_var($request, 'ncb'))\n\t\t{\n\t\t\t$extra_attributes['no_color_branding'] = true;\n\t\t}\n\t\tif(self::check_request_for_var($request, 'nbp'))\n\t\t{\n\t\t\t$extra_attributes['no_box_plots'] = true;\n\t\t}\n\t\tif(self::check_request_for_var($request, 'vb'))\n\t\t{\n\t\t\t$extra_attributes['vertical_bars'] = true;\n\t\t}\n\t\t/*\n\t\tif(self::check_request_for_var($request, 'gtb'))\n\t\t{\n\t\t\t$extra_attributes['graph_render_type'] = 'HORIZONTAL_BOX_PLOT';\n\t\t}\n\t\telse if(self::check_request_for_var($request, 'gtl'))\n\t\t{\n\t\t\t$extra_attributes['graph_render_type'] = 'LINE_GRAPH';\n\t\t\t$extra_attributes['graph_raw_values'] = true;\n\t\t}\n\t\t*/\n\t\tif(self::check_request_for_var($request, 'rol'))\n\t\t{\n\t\t\tforeach($result_file->get_result_objects() as $i => $result_object)\n\t\t\t{\n\t\t\t\t$result_object->recalculate_averages_without_outliers(1.5);\n\t\t\t}\n\t\t}\n\n\t\t$perf_per_dollar_values = array();\n\t\tforeach($result_file->get_system_identifiers() as $si)\n\t\t{\n\t\t\t$ppd = self::check_request_for_var($request, 'ppd_' . rtrim(base64_encode($si), '='));\n\t\t\tif($ppd && $ppd > 0 && is_numeric($ppd))\n\t\t\t{\n\t\t\t\t$perf_per_dollar_values[$si] = $ppd;\n\t\t\t}\n\t\t}\n\n\t\tif(!empty($perf_per_dollar_values))\n\t\t{\n\t\t\t$perf_per_hour = self::check_request_for_var($request, 'ppt') == 'DPH';\n\t\t\tpts_result_file_analyzer::generate_perf_per_dollar($result_file, $perf_per_dollar_values, 'Dollar', false, $perf_per_hour);\n\t\t}\n\t}\n\tpublic static function html_input_field($name, $id, $on_change = null)\n\t{\n\t\treturn '<input type=\"text\" name=\"' . $name . '\" id=\"' . $id . '\" onclick=\"\" value=\"' . (isset($_REQUEST[$name]) ? strip_tags($_REQUEST[$name]) : null) . '\">';\n\t}\n\tpublic static function html_select_menu($name, $id, $on_change, $elements, $use_index = true, $other_attributes = array(), $selected = false)\n\t{\n\t\t$tag = null;\n\t\tforeach($other_attributes as $i => $v)\n\t\t{\n\t\t\t$tag .= ' ' . $i . '=\"' . $v . '\"';\n\t\t}\n\n\t\t$html_menu = '<select name=\"' . $name . '\" id=\"' . $id . '\" onchange=\"' . $on_change . '\"' . $tag . '>' . PHP_EOL;\n\n\t\tif($selected === false)\n\t\t{\n\t\t\t$selected = isset($_REQUEST[$name]) ? $_REQUEST[$name] : false;\n\t\t}\n\n\t\t$force_select = isset($other_attributes['multiple']);\n\n\t\tforeach($elements as $value => $name)\n\t\t{\n\t\t\tif($use_index == false)\n\t\t\t{\n\t\t\t\t$value = $name;\n\t\t\t}\n\t\t\tif($name == null)\n\t\t\t{\n\t\t\t\t$name = '[SELECT]';\n\t\t\t}\n\n\t\t\t$html_menu .= '<option value=\"' . $value . '\"' . ($value == $selected || $force_select ? ' selected=\"selected\"' : null) . '>' . $name . '</option>';\n\t\t}\n\n\t\t$html_menu .= '</select>';\n\n\t\treturn $html_menu;\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2015, Phoronix Media\n\tCopyright (C) 2014 - 2015, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_account_activity implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Account Activity';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\n\t\t$main = '<h1>Recent Account Activity</h1>';\n\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_activity_stream WHERE AccountID = :account_id ORDER BY ActivityTime DESC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$prev_date = null;\n\n\t\tif(empty($row))\n\t\t{\n\t\t\t$main .= '<p>No activity found.</p>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdo\n\t\t\t{\n\t\t\t\tif($prev_date != substr($row['ActivityTime'], 0, 10))\n\t\t\t\t{\n\t\t\t\t\tif($prev_date != null)\n\t\t\t\t\t\t$main .= '</p><hr />';\n\n\t\t\t\t\t$prev_date = substr($row['ActivityTime'], 0, 10);\n\t\t\t\t\t$new_date = strtotime($row['ActivityTime']);\n\n\t\t\t\t\tif(date('Y-m-d') == $prev_date)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h2>Today</h2>';\n\t\t\t\t\t}\n\t\t\t\t\telse if($new_date > (time() - (60 * 60 * 24 * 6)))\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h2>' . date('l', $new_date) . '</h2>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h2>' . date('j F Y', $new_date) . '</h2>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '<p>';\n\t\t\t\t}\n\n\t\t\t\t$id_link_format = $row['ActivityEventID'];\n\t\t\t\tswitch($row['ActivityEvent'])\n\t\t\t\t{\n\t\t\t\t\tcase 'settings':\n\t\t\t\t\t\t$event_link_format = '<a href=\"?settings\">settings</a>';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'users':\n\t\t\t\t\t\t$event_link_format = '<a href=\"?users\">a user</a>';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'schedule':\n\t\t\t\t\t\t$event_link_format = '<a href=\"?schedules\">schedule</a>';\n\n\t\t\t\t\t\t$stmt1 = phoromatic_server::$db->prepare('SELECT Title FROM phoromatic_schedules WHERE AccountID = :account_id AND ScheduleID = :schedule_id');\n\t\t\t\t\t\t$stmt1->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt1->bindValue(':schedule_id', $row['ActivityEventID']);\n\t\t\t\t\t\t$result1 = $stmt1->execute();\n\t\t\t\t\t\t$row1 = $result1->fetchArray();\n\t\t\t\t\t\t$id_link_format = '<a href=\"?schedules/' . $row['ActivityEventID'] . '\">' . $row1['Title'] . '</a>';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'tests_for_schedule':\n\t\t\t\t\t\t$event_link_format = 'a test for a schedule';\n\n\t\t\t\t\t\t$stmt1 = phoromatic_server::$db->prepare('SELECT Title FROM phoromatic_schedules WHERE AccountID = :account_id AND ScheduleID = :schedule_id');\n\t\t\t\t\t\t$stmt1->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt1->bindValue(':schedule_id', $row['ActivityEventID']);\n\t\t\t\t\t\t$result1 = $stmt1->execute();\n\t\t\t\t\t\t$row1 = $result1->fetchArray();\n\t\t\t\t\t\t$id_link_format = '<a href=\"?schedules/' . $row['ActivityEventID'] . '\">' . $row1['Title'] . '</a>';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'groups':\n\t\t\t\t\t\t$event_link_format = '<a href=\"?systems#group_edit\">a group</a>';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$event_link_format = $row['ActivityEvent'];\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif($row['ActivityCreatorType'] == 'USER')\n\t\t\t\t{\n\t\t\t\t\t$main .= '<em>' . date('H:i', strtotime($row['ActivityTime'])) . '</em> &nbsp; <strong>' . $row['ActivityCreator'] . '</strong> <strong> ' . $row['ActivityEventType'] . '</strong> <strong>' . $event_link_format . '</strong>';\n\n\t\t\t\t\tif($id_link_format != null)\n\t\t\t\t\t\t$main .= ': ' . $id_link_format;\n\n\t\t\t\t\t$main .= '<br />' . PHP_EOL;\n\n\t\t\t\t}\n\n\t\t\t\t//$main .= '<p>' .  $row['ActivityCreator'] . ' ' . $row['ActivityCreatorType'] . ' ' . $row['ActivityEvent'] . ' ' . $row['ActivityEventID'] . ' ' . $row['ActivityEventType'] . '</p>';\n\t\t\t}\n\t\t\twhile($row = $result->fetchArray());\n\n\t\t\tif($prev_date != null)\n\t\t\t\t$main .= '</p>';\n\t\t}\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo phoromatic_webui_main($main);\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2018, Phoronix Media\n\tCopyright (C) 2014 - 2018, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_admin implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Phoromatic Root Administrator';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\tif($_SESSION['AdminLevel'] != -40)\n\t\t{\n\t\t\theader('Location: /?main');\n\t\t}\n\t\t$main = null;\n\t\tif(isset($_POST['disable_user']))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_users SET AdminLevel = (AdminLevel * -1) WHERE UserName = :user_name');\n\t\t\t$stmt->bindValue(':user_name', $_POST['disable_user']);\n\t\t\t$result = $stmt->execute();\n\t\t\t$main .= '<h2>Disabled Account: ' . $_POST['disable_user'] . '</h2>';\n\t\t}\n\t\telse if(isset($_POST['change_user_password']))\n\t\t{\n\t\t\t$account_salt = phoromatic_server::$db->querySingle('SELECT Salt FROM phoromatic_accounts WHERE AccountID = (SELECT AccountID FROM phoromatic_users WHERE UserName = \\'' . $_POST['change_user_password'] . '\\')');\n\n\t\t\tif($account_salt != null)\n\t\t\t{\n\t\t\t\tif(strlen($_POST['new_user_password']) < 6)\n\t\t\t\t{\n\t\t\t\t\tphoromatic_error_page('Oops!', 'Please go back and ensure the supplied password is at least six characters long.');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t$new_salted_password = hash('sha256', $account_salt . $_POST['new_user_password']);\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_users SET Password = :new_password WHERE UserName = :user_name');\n\t\t\t\t$stmt->bindValue(':new_password', $new_salted_password);\n\t\t\t\t$stmt->bindValue(':user_name', $_POST['change_user_password']);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$main .= '<h2>Updated Password For Account: ' . $_POST['change_user_password'] . '</h2>';\n\t\t\t}\n\t\t}\n\t\telse if(isset($_POST['register_username']) && isset($_POST['register_password']) && isset($_POST['register_password_confirm']) && isset($_POST['register_email']))\n\t\t{\n\t\t\t$new_account = create_new_phoromatic_account($_POST['register_username'], $_POST['register_password'], $_POST['register_password_confirm'], $_POST['register_email'], (isset($_POST['seed_accountid']) ? $_POST['seed_accountid'] : null));\n\t\t}\n\t\telse if(isset($_POST['email_all_subject']) && isset($_POST['email_all_message']) && !empty($_POST['email_all_message']))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_users ORDER BY UserName ASC');\n\t\t\t$result = $stmt->execute();\n\n\t\t\twhile($row = $result->fetchArray())\n\t\t\t{\n\t\t\t\t$user = $row['UserName'];\n\t\t\t\t$email = $row['email'];\n\t\t\t\tphoromatic_server::send_email($email, $_POST['email_all_subject'], $_POST['email_all_reply_to'], $_POST['email_all_message']);\n\t\t\t}\n\t\t\techo '<h2>Emails sent to all Phoromatic users.</h2>';\n\t\t}\n\t\t$main .= '<h1>Phoromatic Server Administration</h1>';\n\n\t\t$main .= '<hr /><h2>Server Information</h2>';\n\t\t$main .= '<p><strong>HTTP Server Port:</strong> ' . getenv('PTS_WEB_PORT') . '<br /><strong>WebSocket Server Port:</strong> ' . getenv('PTS_WEBSOCKET_PORT') . '<br /><strong>Phoromatic Server Path:</strong> ' . phoromatic_server::phoromatic_path() . '<br /><strong>Configuration File:</strong>: ' . pts_config::get_config_file_location() . '</p>';\n\n\t\t$main .= '<hr /><h2>Statistics</h2>';\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(Title) AS SystemCount FROM phoromatic_systems WHERE State >= 0');\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$stats['Total System Count'] = $row['SystemCount'];\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(Title) AS ScheduleCount FROM phoromatic_schedules WHERE State >= 1');\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$stats['Total Schedule Count'] = $row['ScheduleCount'];\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(UploadID) AS ResultCount FROM phoromatic_results');\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$stats['Total Result Count'] = $row['ResultCount'];\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(ActivityTime) AS ActivityCount FROM phoromatic_activity_stream');\n\t\t$stmt->bindValue(':today_date', date('Y-m-d') . '%');\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$stats['Total Activity Count'] = $row['ActivityCount'];\n\n\t\t$main .= '<p>';\n\t\tforeach($stats as $what => $c)\n\t\t\t$main .= '<strong>' . $what . ':</strong> ' . $c . '<br />';\n\n\n\t\t$main .= '<hr /><h2>Account Topology</h2>';\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_users ORDER BY AccountID,AdminLevel ASC');\n\t\t$result = $stmt->execute();\n\n\t\t$plevel = -1;\n\t\t$user_list = array();\n\t\twhile($row = $result->fetchArray())\n\t\t{\n\t\t\tswitch($row['AdminLevel'])\n\t\t\t{\n\t\t\t\tcase 1:\n\t\t\t\t\t$level = 'Group Administrator';\n\t\t\t\t\t$offset = null;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t$level = 'Administrator';\n\t\t\t\t\t$offset = str_repeat('-', 10);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\t$level = 'Power User';\n\t\t\t\t\t$offset = str_repeat('-', 20);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 10:\n\t\t\t\t\t$level = 'Viewer';\n\t\t\t\t\t$offset = str_repeat('-', 30);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif($row['AdminLevel'] < 1)\n\t\t\t\t\t\t$level = 'Disabled';\n\t\t\t\t\telse\n\t\t\t\t\t\t$level = 'Unknown';\n\n\t\t\t\t\t$offset = null;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif($row['AdminLevel'] == 1)\n\t\t\t{\n\t\t\t\tif($plevel != -1)\n\t\t\t\t\t$main .= '</p>';\n\t\t\t\t$main .= '<p>';\n\t\t\t}\n\n\t\t\t$main .= $offset . ' <strong>' . $row['UserName'] . '</strong> (<em>' . $level . '</em>) <strong>Created On:</strong> ' . phoromatic_user_friendly_timedate($row['CreatedOn']) . ' <strong>Last Log-In:</strong> ' . ($row['LastLogin'] != null ? phoromatic_user_friendly_timedate($row['LastLogin']) : 'N/A') . ($row['AdminLevel'] == 1 ? ' [<strong>ACCOUNT ID:</strong> ' . $row['AccountID'] . ']' : null) . '<br />';\n\t\t\t$plevel = $row['AdminLevel'];\n\t\t\t$user_list[$row['UserName']] = $row['AdminLevel'];\n\t\t}\n\t\tif($plevel != -1)\n\t\t\t$main .= '</p>';\n\n\t\t$main .= '<hr /><h2>Disable Account</h2>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"disable_user\" id=\"disable_user\" method=\"post\"><p><select name=\"disable_user\">';\n\t\tforeach($user_list as $user_name => $user_level)\n\t\t{\n\t\t\tif($user_level > 0)\n\t\t\t{\n\t\t\t\t$main .= '<option value=\"' . $user_name . '\">' . $user_name . '</option>';\n\t\t\t}\n\t\t}\n\t\t$main .= '</select></p><p><input name=\"submit\" value=\"Disable User\" type=\"submit\" /></p></form>';\n\n\t\t$main .= '<hr /><h2>Change User Password</h2>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"change_user_pass\" id=\"change_user_pass\" method=\"post\"><p><select name=\"change_user_password\">';\n\t\tforeach($user_list as $user_name => $user_level)\n\t\t{\n\t\t\tif($user_level > 0)\n\t\t\t{\n\t\t\t\t$main .= '<option value=\"' . $user_name . '\">' . $user_name . '</option>';\n\t\t\t}\n\t\t}\n\t\t$main .= '<p><input type=\"password\" name=\"new_user_password\" /> <sup>2</sup></p></select></p><p><input name=\"submit\" value=\"Override User Password\" type=\"submit\" /></p></form>';\n\n\t\t$main .= '<hr /><h2>Create New Account Group</h2>';\n\t\t$main .= '<form name=\"register_form\" id=\"register_form\" action=\"?admin\" method=\"post\" onsubmit=\"return phoromatic_initial_registration(this);\">\n\t\t<h3>Username</h3>\n\t\t<p><input type=\"text\" name=\"register_username\" /> <sup>1</sup></p>\n\t\t<h3>Password</h3>\n\t\t<p><input type=\"password\" name=\"register_password\" /> <sup>2</sup></p>\n\t\t<h3>Confirm Password</h3>\n\t\t<p><input type=\"password\" name=\"register_password_confirm\" /></p>\n\t\t<h3>Email</h3>\n\t\t<p><input type=\"text\" name=\"register_email\" /> <sup>3</sup></p>\n\t\t<h3>Account ID</h3>\n\t\t<p><input type=\"text\" name=\"seed_accountid\" /> <sup>4</sup></p>\n\t\t<p><input type=\"submit\" value=\"Create Account\" /></p>\n\t\t</form>\n\t\t<p style=\"font-size: 11px;\"><sup>1</sup> Usernames shall be at least four characters long, not contain any spaces, and only be composed of normal ASCII characters.<br />\n\t\t<sup>2</sup> Passwords shall be at least six characters long.<br />\n\t\t<sup>3</sup> A valid email address is required for notifications, password reset, and other verification purposes.<br />\n\t\t<sup>4</sup> The account ID field is optional and is used to pre-seed the account identifier for advanced purposes. The field must be six characters. Leave this field blank if you are unsure.<br />\n\t\t\t\t\t\t</p>';\n\n\n\t\t//\n\t\t$server_log = explode(PHP_EOL, file_get_contents(getenv('PTS_PHOROMATIC_LOG_LOCATION')));\n\t\tforeach($server_log as $i => $line_item)\n\t\t{\n\t\t\tif(strpos($line_item, '[200]') !== false || strpos($line_item, '[302]') !== false)\n\t\t\t{\n\t\t\t\tunset($server_log[$i]);\n\t\t\t}\n\t\t}\n\t\t$server_log = implode(PHP_EOL, $server_log);\n\n\t\t$main .= '<hr /><h2>Phoromatic Server Log</h2>';\n\t\t$main .= '<p><textarea style=\"width: 80%; height: 400px;\">' . $server_log  . '</textarea></p>';\n\n\t\t$main .= '<hr /><h2>Email All Users</h2>';\n\t\t$main .= '<form name=\"email_all\" id=\"email_all\" action=\"?admin\" method=\"post\">\n\t\t<h3>Reply-To Email Address:</h3>\n\t\t<p><input type=\"text\" name=\"email_all_reply_to\" /></p>\n\t\t<h3>Subject:</h3>\n\t\t<p><input type=\"text\" name=\"email_all_subject\" /></p>\n\t\t<h3>Message:</h3>\n\t\t<p> <textarea rows=\"4\" cols=\"50\" name=\"email_all_message\"></textarea></p>\n\t\t<p><input type=\"submit\" value=\"Send Email\" /></p>\n\t\t</form>';\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in());\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2018, Phoronix Media\n\tCopyright (C) 2014 - 2018, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_admin_config implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Phoromatic Server Configuration';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\tif($_SESSION['AdminLevel'] != -40)\n\t\t{\n\t\t\theader('Location: /?main');\n\t\t}\n\t\t$main = null;\n\n\t\tif(isset($_POST['new_phoromatic_path']) && !empty($_POST['new_phoromatic_path']))\n\t\t{\n\t\t\t$new_dir = dirname($_POST['new_phoromatic_path']);\n\n\t\t\tif(!is_dir($new_dir))\n\t\t\t{\n\t\t\t\t$main .= '<h2 style=\"color: red;\"><em>' . $new_dir . '</em> must be a valid directory.</h2>';\n\t\t\t}\n\t\t\telse if(!is_writable($new_dir))\n\t\t\t{\n\t\t\t\t$main .= '<h2 style=\"color: red;\"><em>' . $new_dir . '</em> is not a writable location.</h2>';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(!is_dir($_POST['new_phoromatic_path']))\n\t\t\t\t{\n\t\t\t\t\tif(mkdir($_POST['new_phoromatic_path']) == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h2 style=\"color: red;\">Failed to make directory <em>' . $_POST['new_phoromatic_path'] . '</em>.</h2>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(is_dir($_POST['new_phoromatic_path']))\n\t\t\t\t{\n\t\t\t\t\t$new_phoromatic_dir = pts_strings::add_trailing_slash($_POST['new_phoromatic_path']);\n\n\t\t\t\t\t$d = glob($new_phoromatic_dir . '*');\n\t\t\t\t\tif(!empty($d))\n\t\t\t\t\t{\n\t\t\t\t\t\t$new_phoromatic_dir .= 'phoromatic/';\n\t\t\t\t\t\tpts_file_io::mkdir($new_phoromatic_dir);\n\t\t\t\t\t}\n\n\t\t\t\t\t$d = glob($new_phoromatic_dir . '*');\n\t\t\t\t\tif(!empty($d))\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h2 style=\"color: red;\"><em>' . $new_phoromatic_dir . '</em> must be an empty directory.</h2>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(pts_file_io::copy(phoromatic_server::phoromatic_path(), $new_phoromatic_dir))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpts_config::user_config_generate(array('PhoromaticStorage' => $new_phoromatic_dir));\n\t\t\t\t\t\t\theader('Location: /?admin');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$main .= '<h2 style=\"color: red;\"><em>Failed to copy old Phoromatic data to new location.</h2>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(isset($_POST['new_dc_path']) && !empty($_POST['new_dc_path']))\n\t\t{\n\t\t\t$new_dir = dirname($_POST['new_dc_path']);\n\n\t\t\tif(!is_dir($new_dir))\n\t\t\t{\n\t\t\t\t$main .= '<h2 style=\"color: red;\"><em>' . $new_dir . '</em> must be a valid directory.</h2>';\n\t\t\t}\n\t\t\telse if(!is_writable($new_dir))\n\t\t\t{\n\t\t\t\t$main .= '<h2 style=\"color: red;\"><em>' . $new_dir . '</em> is not a writable location.</h2>';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(!is_dir($_POST['new_dc_path']))\n\t\t\t\t{\n\t\t\t\t\tif(mkdir($_POST['new_dc_path']) == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h2 style=\"color: red;\">Failed to make directory <em>' . $_POST['new_dc_path'] . '</em>.</h2>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(is_dir($_POST['new_dc_path']))\n\t\t\t\t{\n\t\t\t\t\t$new_dc_dir = pts_strings::add_trailing_slash($_POST['new_dc_path']);\n\n\t\t\t\t\tif(pts_file_io::copy(pts_client::download_cache_path(), $new_dc_dir))\n\t\t\t\t\t{\n\t\t\t\t\t\tpts_config::user_config_generate(array('CacheDirectory' => $new_dc_dir));\n\t\t\t\t\t\theader('Location: /?admin');\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h2 style=\"color: red;\"><em>Failed to copy old Phoromatic data to new location.</h2>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(isset($_POST['new_proxy_address']) && isset($_POST['new_proxy_port']))\n\t\t{\n\t\t\tif(pts_network::http_get_contents('http://www.phoronix-test-suite.com/PTS', $_POST['new_proxy_address'], $_POST['new_proxy_port']) == 'PTS')\n\t\t\t{\n\t\t\t\tpts_config::user_config_generate(array(\n\t\t\t\t\t'PhoronixTestSuite/Options/Networking/ProxyAddress' => $_POST['new_proxy_address'],\n\t\t\t\t\t'PhoronixTestSuite/Options/Networking/ProxyPort' => $_POST['new_proxy_port']\n\t\t\t\t\t));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$main .= '<h2 style=\"color: red;\">Failed to connect via proxy server.</h2>';\n\t\t\t}\n\t\t}\n\t\tif(isset($_POST['new_http_port']) && isset($_POST['new_ws_port']))\n\t\t{\n\t\t\tif(empty($_POST['new_http_port']) || (!is_numeric($_POST['new_http_port']) && $_POST['new_http_port'] != 'RANDOM'))\n\t\t\t{\n\t\t\t\t$main .= '<h2 style=\"color: red;\">The HTTP port must be a valid port number or <em>RANDOM</em>.</h2>';\n\t\t\t}\n\t\t\tif(empty($_POST['new_ws_port']) || (!is_numeric($_POST['new_ws_port']) && $_POST['new_ws_port'] != 'RANDOM'))\n\t\t\t{\n\t\t\t\t$main .= '<h2 style=\"color: red;\">The WebSocket port must be a valid port number or <em>RANDOM</em>.</h2>';\n\t\t\t}\n\t\t\tpts_config::user_config_generate(array(\n\t\t\t\t'PhoronixTestSuite/Options/Server/RemoteAccessPort' => $_POST['new_http_port'],\n\t\t\t\t'PhoronixTestSuite/Options/Server/WebSocketPort' => $_POST['new_ws_port']\n\t\t\t\t));\n\t\t}\n\t\tif(isset($_POST['add_new_users_to_account']))\n\t\t{\n\t\t\tif(empty($_POST['add_new_users_to_account']))\n\t\t\t{\n\t\t\t\tphoromatic_server::save_setting('add_new_users_to_account', null);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(AccountID) AS AccountHitCount FROM phoromatic_accounts WHERE AccountID = :account_id');\n\t\t\t\t$stmt->bindValue(':account_id', $_POST['add_new_users_to_account']);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$row = $result->fetchArray();\n\t\t\t\tif(empty($row['AccountHitCount']))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<h2 style=\"color: red;\"><em>' . $_POST['add_new_users_to_account'] . '</em> is not a valid account ID.</h2>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tphoromatic_server::save_setting('add_new_users_to_account', $_POST['add_new_users_to_account']);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(isset($_POST['account_creation_alt']))\n\t\t{\n\t\t\tphoromatic_server::save_setting('account_creation_alt', $_POST['account_creation_alt']);\n\t\t}\n\t\tif(isset($_POST['main_page_message']))\n\t\t{\n\t\t\tphoromatic_server::save_setting('main_page_message', $_POST['main_page_message']);\n\t\t}\n\t\tif(isset($_POST['force_result_sharing']))\n\t\t{\n\t\t\tphoromatic_server::save_setting('force_result_sharing', $_POST['force_result_sharing']);\n\t\t}\n\t\tif(isset($_POST['show_local_tests_only']))\n\t\t{\n\t\t\tphoromatic_server::save_setting('show_local_tests_only', $_POST['show_local_tests_only']);\n\t\t}\n\t\tif(isset($_POST['new_admin_support_email']))\n\t\t{\n\t\t\tphoromatic_server::save_setting('admin_support_email', $_POST['new_admin_support_email']);\n\t\t}\n\t\tif(isset($_POST['rebuild_results_db']))\n\t\t{\n\t\t\tforeach(pts_file_io::glob(phoromatic_server::phoromatic_path() . 'accounts/*/results/*/composite.xml') as $composite_xml)\n\t\t\t{\n\t\t\t\t$account_id = basename(dirname(dirname(dirname($composite_xml))));\n\t\t\t\t$upload_id = basename(dirname($composite_xml));\n\n\t\t\t\t$result_file = new pts_result_file($composite_xml);\n\n\t\t\t\t// Validate the XML\n\t\t\t\t$relative_id = 0;\n\t\t\t\tforeach($result_file->get_result_objects() as $result_object)\n\t\t\t\t{\n\t\t\t\t\t$relative_id++;\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_results_results (AccountID, UploadID, AbstractID, TestProfile, ComparisonHash) VALUES (:account_id, :upload_id, :abstract_id, :test_profile, :comparison_hash)');\n\t\t\t\t\t$stmt->bindValue(':account_id', $account_id);\n\t\t\t\t\t$stmt->bindValue(':upload_id', $upload_id);\n\t\t\t\t\t$stmt->bindValue(':abstract_id', $relative_id);\n\t\t\t\t\t$stmt->bindValue(':test_profile', $result_object->test_profile->get_identifier());\n\t\t\t\t\t$stmt->bindValue(':comparison_hash', $result_object->get_comparison_hash(true, false));\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t}\n\n\t\t\t\tif($relative_id > 0)\n\t\t\t\t{\n\t\t\t\t\tforeach($result_file->get_systems() as $s)\n\t\t\t\t\t{\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_results_systems (AccountID, UploadID, SystemIdentifier, Hardware, Software) VALUES (:account_id, :upload_id, :system_identifier, :hardware, :software)');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $account_id);\n\t\t\t\t\t\t$stmt->bindValue(':upload_id', $upload_id);\n\t\t\t\t\t\t$stmt->bindValue(':system_identifier', $s->get_identifier());\n\t\t\t\t\t\t$stmt->bindValue(':hardware', $s->get_hardware());\n\t\t\t\t\t\t$stmt->bindValue(':software', $s->get_software());\n\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$main .= '<h1>Phoromatic Server Configuration</h1>';\n\n\t\t$main .= '<h2>Phoromatic Storage Location</h2>';\n\t\t$main .= '<p>The Phoromatic Storage location is where all Phoromatic-specific test results, account data, and other information is archived. This path is controlled via the <em>' . pts_config::get_config_file_location() . '</em> configuration file with the <em>PhoromaticStorage</em> element. Adjusting the directory from the user configuration XML file is the recommended way to adjust the Phoromatic storage path when the Phoromatic Server is not running, while using the below form is an alternative method to attempt to live migrate the storage path.</p>';\n\t\t$main .= '<p><strong>Current Storage Path:</strong> ' . phoromatic_server::phoromatic_path() . '</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_phoromatic_path\" method=\"post\">';\n\t\t$main .= '<p><input type=\"text\" name=\"new_phoromatic_path\" value=\"' . (isset($_POST['new_phoromatic_path']) ? $_POST['new_phoromatic_path'] : null) . '\" /></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update Phoromatic Storage Location\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h2>Download Cache Location</h2>';\n\t\t$main .= '<p>The download cache is where the Phoronix Test Suite is able to make an archive of files needed by test profiles. The Phoromatic Server is then able to allow Phoronix Test Suite client systems on the intranet. To add test files to this cache on the Phoromatic Server, run <strong>phoronix-test-suite make-download-cache <em>&lt;the test identifers you wish to download and cache&gt;</em></strong>.</p>';\n\t\t$main .= '<p><strong>Current Download Cache Path:</strong> ' . pts_client::download_cache_path() . '</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_dc_path\" method=\"post\">';\n\t\t$main .= '<p><input type=\"text\" name=\"new_dc_path\" value=\"' . (isset($_POST['new_dc_path']) ? $_POST['new_dc_path'] : null) . '\" /></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update Download Cache Location\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h2>Network Proxy</h2>';\n\t\t$main .= '<p>If a network proxy is needed for the Phoromatic Server to access the open Internet, please provide the IP address and HTTP port address below.</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_proxy\" method=\"post\">';\n\t\t$main .= '<p><strong>Proxy HTTP Port:</strong> <input type=\"text\" name=\"new_proxy_port\" size=\"4\" value=\"' . (isset($_POST['new_proxy_port']) ? $_POST['new_proxy_port'] : pts_config::read_user_config('PhoronixTestSuite/Options/Networking/ProxyPort')) . '\" /></p>';\n\t\t$main .= '<p><strong>Proxy IP Address:</strong> <input type=\"text\" name=\"new_proxy_address\" value=\"' . (isset($_POST['new_proxy_address']) ? $_POST['new_proxy_address'] : pts_config::read_user_config('PhoronixTestSuite/Options/Networking/ProxyAddress')) . '\" /></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update Network Proxy\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h2>Phoromatic Server Ports</h2>';\n\t\t$main .= '<p>The HTTP and WebSocket ports for the Phoromatic Server can be adjusted via this form or the user configuration XML file. The new ports will not go into effect until the Phoromatic Server instance has been restarted.</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_ports\" method=\"post\">';\n\t\t$main .= '<p><strong>HTTP Port:</strong> <input type=\"text\" name=\"new_http_port\" size=\"4\" value=\"' . (isset($_POST['new_http_port']) ? $_POST['new_http_port'] : pts_config::read_user_config('PhoronixTestSuite/Options/Server/RemoteAccessPort')) . '\" /></p>';\n\t\t$main .= '<p><strong>WebSocket Port:</strong> <input type=\"text\" name=\"new_ws_port\" size=\"4\" value=\"' . (isset($_POST['new_ws_port']) ? $_POST['new_ws_port'] : pts_config::read_user_config('PhoronixTestSuite/Options/Server/WebSocketPort')) . '\" /></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update Web Ports\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h2>Support Email Address</h2>';\n\t\t$main .= '<p>This email address will be shown as the sender of emails regarding new account registration and other non-group-related messages. This email address may also be shown as a support email address in case of user problems.</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"support_email\" method=\"post\">';\n\t\t$main .= '<p><strong>E-Mail:</strong> <input type=\"text\" name=\"new_admin_support_email\" value=\"' . phoromatic_server::read_setting('admin_support_email') . '\" /></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update E-Mail Address\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h1>Account Creation</h1>';\n\t\t$main .= '<h2>Add To Existing Account</h2><p>Whenever a new account is created via the main log-in page, rather than creating a new group account, you can opt to have the account added as a viewer to an existing group of accounts. To do so, enter the account ID in the field below. The user is added to that account ID with viewer privileges while the main administrator for that account can elevate the privileges from their account\\'s Users page. You can find the list of account IDs via the main rootadmin page account listing. Leave this field blank to disable the feature. This option only affects the creation of new accounts.</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"add_accounts_to_one\" method=\"post\">';\n\t\t$main .= '<p><strong>Main Account ID:</strong> <input type=\"text\" name=\"add_new_users_to_account\" size=\"6\" value=\"' . phoromatic_server::read_setting('add_new_users_to_account') . '\" /></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update Account Handling\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h1>Account Creation</h1>';\n\t\t$main .= '<p>By default, new accounts can be created at-will from the main page of the Phoromatic Server web interface. <strong>To disable the ability to create new accounts from the main welcome page</strong>, enter a message in the field below -- e.g. account creation disabled, contact XYZ department via email to request a new account, or other string to present to the user in place of the account creation box. Leave this box empty to allow new accounts to be created. HTML input is allowed.</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"account_creation_text\" method=\"post\">';\n\t\t$main .= '<p><strong>Account Creation String:</strong> <textarea name=\"account_creation_alt\" cols=\"50\" rows=\"4\">' . phoromatic_server::read_setting('account_creation_alt') . '</textarea></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update Account Handling\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h1>Main Page Message</h1>';\n\t\t$main .= '<p>If you wish to present users with a custom message once logging into their Phoromatic account, set the HTML-allowed string below and it will be shown on the main page once logging in.</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"main_page_message\" method=\"post\">';\n\t\t$main .= '<p><strong>Main Page Message String:</strong> <textarea name=\"main_page_message\" cols=\"50\" rows=\"4\">' . phoromatic_server::read_setting('main_page_message') . '</textarea></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update Main Page Message\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h1>Force Results To Be Shared</h1>';\n\t\t$main .= '<p>If you wish to force that all accounts/groups on this Phoromatic Server instance are shared/viewable amongst other groups on this server, set this value to True. Otherwise the result sharing is limited to each group\\'s selected option on the account settings page.</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"force_result_share\" method=\"post\">';\n\t\t$main .= '<p><strong>Force Result Sharing:</strong> <select name=\"force_result_sharing\"><option value=\"0\">False</option><option value=\"1\" ' . (phoromatic_server::read_setting('force_result_sharing') ? 'selected=\"selected\"' : null) . '>True</option></select></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h1>Only Advertise Tests With Files Locally Cached</h1>';\n\t\t$main .= '<p>Enabling this option will only advertise test profiles on the Phoromatic Server web interface if the needed files for that test are present within the Phoromatic Server\\'s PTS download cache. This feature is particularly useful for environments where the client test system lacks direct Internet access.</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"show_local_tests_only\" method=\"post\">';\n\t\t$main .= '<p><strong>Only Advertise Cached Tests:</strong> <select name=\"show_local_tests_only\"><option value=\"0\">False</option><option value=\"1\" ' . (phoromatic_server::read_setting('show_local_tests_only') ? 'selected=\"selected\"' : null) . '>True</option></select></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h1>Rebuild Results/Systems SQLite Tables</h1>';\n\t\t$main .= '<p>If you somehow damaged some of your SQLite tables, this option will attempt to rebuild the phoromatic_results_results and phoromatic_results_systems tables.</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"rebuild_results_db\" method=\"post\">';\n\t\t$main .= '<p><strong>Force Results Table Rebuild:</strong> <select name=\"rebuild_results_db\"><option value=\"0\">False</option><option value=\"1\" ' . (phoromatic_server::read_setting('rebuild_results_db') ? 'selected=\"selected\"' : null) . '>True</option></select></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Rebuild Results Table\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in());\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2015, Phoronix Media\n\tCopyright (C) 2015, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_admin_data implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Phoromatic Server Data';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\tif($_SESSION['AdminLevel'] != -40)\n\t\t{\n\t\t\theader('Location: /?main');\n\t\t}\n\t\tif(isset($PATH[0]) && isset($PATH[1]))\n\t\t{\n\t\t\tswitch($PATH[0])\n\t\t\t{\n\t\t\t\tcase 'delete':\n\t\t\t\t\tif($PATH[1] == 'result')\n\t\t\t\t\t{\n\t\t\t\t\t\t$pprids = explode(',', $PATH[2]);\n\n\t\t\t\t\t\tforeach($pprids as $pprid)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_results WHERE PPRID = :pprid LIMIT 1');\n\t\t\t\t\t\t\t$stmt->bindValue(':pprid', $pprid);\n\t\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t\t\tif($result && ($row = $result->fetchArray()))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$composite_xml = phoromatic_server::phoromatic_account_result_path($row['AccountID'], $row['UploadID']) . 'composite.xml';\n\t\t\t\t\t\t\t\tif(is_file($composite_xml))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tunlink($composite_xml);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tpts_file_io::delete(phoromatic_server::phoromatic_account_result_path($row['AccountID'], $row['UploadID']), null, true);\n\n\t\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_results_results WHERE AccountID = :account_id AND UploadID = :upload_id');\n\t\t\t\t\t\t\t\t$stmt->bindValue(':account_id', $row['AccountID']);\n\t\t\t\t\t\t\t\t$stmt->bindValue(':upload_id', $row['UploadID']);\n\t\t\t\t\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_results_systems WHERE AccountID = :account_id AND UploadID = :upload_id');\n\t\t\t\t\t\t\t\t$stmt->bindValue(':account_id', $row['AccountID']);\n\t\t\t\t\t\t\t\t$stmt->bindValue(':upload_id', $row['UploadID']);\n\t\t\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_results WHERE PPRID = :pprid');\n\t\t\t\t\t\t\t$stmt->bindValue(':pprid', $pprid);\n\t\t\t\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\t\t\t\t// TODO XXX fix below\n\t\t\t\t\t\t\t//$upload_dir = phoromatic_server::phoromatic_account_result_path($_SESSION['AccountID'], $upload_id);\n\t\t\t\t\t\t\t//pts_file_io::delete($upload_dir);\n\t\t\t\t\t\t}\n\n/*\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_results_results WHERE AccountID = :account_id AND UploadID = :upload_id');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $PATH[2]);\n\t\t\t\t\t\t$stmt->bindValue(':upload_id', $PATH[3]);\n\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_results_systems WHERE AccountID = :account_id AND UploadID = :upload_id');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $PATH[2]);\n\t\t\t\t\t\t$stmt->bindValue(':upload_id', $PATH[3]);\n\t\t\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\t\t\t$result_dir = phoromatic_server::phoromatic_account_result_path($PATH[2], $PATH[3]);\n\t\t\t\t\t\tif(is_dir($result_dir))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpts_file_io::delete($result_dir, null, true);\n\t\t\t\t\t\t}\n*/\n\t\t\t\t\t}\n\t\t\t\t\telse if($PATH[1] == 'schedule')\n\t\t\t\t\t{\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_schedules WHERE AccountID = :account_id AND ScheduleID = :schedule_id');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $PATH[2]);\n\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[3]);\n\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t}\n\t\t\t\t\telse if($PATH[1] == 'system')\n\t\t\t\t\t{\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_systems WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $PATH[2]);\n\t\t\t\t\t\t$stmt->bindValue(':system_id', $PATH[3]);\n\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t}\n\t\t\t\t\telse if($PATH[1] == 'ticket')\n\t\t\t\t\t{\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_benchmark_tickets WHERE AccountID = :account_id AND TicketID = :ticket_id');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $PATH[2]);\n\t\t\t\t\t\t$stmt->bindValue(':ticket_id', $PATH[3]);\n\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t}\n\t\t\t\t\telse if($PATH[1] == 'trigger')\n\t\t\t\t\t{\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_schedules_triggers WHERE AccountID = :account_id AND ScheduleID = :schedule_id AND Trigger = :trigger');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $PATH[2]);\n\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[3]);\n\t\t\t\t\t\t$stmt->bindValue(':trigger', $PATH[4]);\n\t\t\t\t\t\t$result = $stmt->execute(); var_dump($result);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t$main = '<h1>Phoromatic Server Data</h1>';\n\t\t$main .= '<h1>Test Results</h1>';\n\t$main .= '<a onclick=\"javascript:phoromatic_generate_comparison(\\'public.php?ut=\\');\"><div id=\"phoromatic_result_compare_info_box\" style=\"background: #1976d2; border: 1px solid #000;\"></div></a> <a onclick=\"javascript:phoromatic_delete_results(\\'?admin_data/delete/result/\\'); return false;\"><div id=\"phoromatic_result_delete_box\" style=\"background: #1976d2; border: 1px solid #000;\">Delete Selected Results</div></a>';\n\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">';\n\t\t$main .= '<div style=\"height: 500px;\"><ul style=\"max-height: 100%;\"><li><h1>Recent Test Results</h1></li>';\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime, TimesViewed, AccountID, UploadID FROM phoromatic_results ORDER BY UploadTime DESC LIMIT 100');\n\t\t$test_result_result = $stmt->execute();\n\t\t$results = 0;\n\t\twhile($test_result_row = $test_result_result->fetchArray())\n\t\t{\n\t\t\t$main .= '<a onclick=\"\"><li id=\"result_select_' . $test_result_row['PPRID'] . '\"><input type=\"checkbox\" id=\"result_compare_checkbox_' . $test_result_row['PPRID'] . '\" onclick=\"javascript:phoromatic_checkbox_toggle_result_comparison(\\'' . $test_result_row['PPRID'] . '\\');\" onchange=\"return false;\"></input> <span onclick=\"javascript:phoromatic_window_redirect(\\'public.php?ut=' . $test_result_row['PPRID'] . '\\');\">' . $test_result_row['Title'] . '</span><br /><table><tr><td>' . phoromatic_system_id_to_name($test_result_row['SystemID'], $test_result_row['AccountID']) . '</td><td>' . phoromatic_user_friendly_timedate($test_result_row['UploadTime']) .  '</td><td>' . $test_result_row['TimesViewed'] . ' Times Viewed</td></table></li></a>';\n\t\t\t$results++;\n\n\t\t}\n\t\tif($results == 0)\n\t\t{\n\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Results Found</li>';\n\t\t}\n\t\t$main .= '</ul></div>';\n\t\t$main .= '</div>';\n\n\t\t$main .= '<hr /><h1>Schedules</h1>';\n\t\t$main .= '<h2>Active Test Schedules</h2>';\n\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">\n\t\t\t\t<ul>\n\t\t\t\t\t<li><h1>Active Test Schedules</h1></li>';\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, ScheduleID, Description, RunTargetSystems, RunTargetGroups, RunAt, ActiveOn, AccountID FROM phoromatic_schedules WHERE State >= 1 ORDER BY Title ASC');\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\t\tif($row == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Schedules Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t$main .= '<a onclick=\"\"><li>' . $row['Title'] . '<br /><table><tr><td>' . phoromatic_account_id_to_group_name($row['AccountID']) . '</td><td>' . pts_strings::plural_handler(count(phoromatic_server::systems_associated_with_schedule($row['AccountID'], $row['ScheduleID'])), 'System') . '</td><td><strong>' . phoromatic_schedule_activeon_string($row['ActiveOn'], $row['RunAt']) . '</strong></td><td><a onclick=\"return confirm(\\'Permanently remove this schedule?\\');\" href=\"/?admin_data/delete/schedule/' . $row['AccountID'] . '/' . $row['ScheduleID'] . '\">Permanently Remove</a></td></tr></table></li></a>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t}\n\t\t$main .= '</ul></div>';\n\n\t\t$main .= '<hr /><h2>Inactive Test Schedules</h2>';\n\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">\n\t\t\t\t<ul>\n\t\t\t\t\t<li><h1>Active Test Schedules</h1></li>';\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, ScheduleID, Description, RunTargetSystems, RunTargetGroups, RunAt, ActiveOn, AccountID FROM phoromatic_schedules WHERE State < 1 ORDER BY Title ASC');\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\t\tif($row == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Schedules Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t$main .= '<a onclick=\"\"><li>' . $row['Title'] . '<br /><table><tr><td>' . phoromatic_account_id_to_group_name($row['AccountID']) . '</td><td>' . pts_strings::plural_handler(count(phoromatic_server::systems_associated_with_schedule($row['AccountID'], $row['ScheduleID'])), 'System') . '</td><td><strong>' . phoromatic_schedule_activeon_string($row['ActiveOn'], $row['RunAt']) . '</strong></td><td><a onclick=\"return confirm(\\'Permanently remove this schedule?\\');\" href=\"/?admin_data/delete/schedule/' . $row['AccountID'] . '/' . $row['ScheduleID'] . '\">Permanently Remove</a></td></tr></table></li></a>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t}\n\t\t$main .= '</ul></div>';\n\n\t\t$main .= '<hr /><h2>Schedule Triggers</h2>';\n\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">\n\t\t\t\t<ul>\n\t\t\t\t\t<li><h1>Triggers</h1></li>';\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Trigger, TriggeredOn, AccountID, ScheduleID FROM phoromatic_schedules_triggers ORDER BY TriggeredOn DESC');\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\t\tif($row == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Triggers Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t$main .= '<a onclick=\"\"><li>' . $row['Trigger'] . '<br /><table><tr><td>' . $row['TriggeredOn'] . '</td><td>' . phoromatic_account_id_to_group_name($row['AccountID']) . '</td><td><a onclick=\"return confirm(\\'Permanently remove this trigger?\\');\" href=\"/?admin_data/delete/trigger/' . $row['AccountID'] . '/' . $row['ScheduleID'] . '/' . $row['Trigger'] . '\">Permanently Remove</a></td></tr></table></li></a>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t}\n\t\t$main .= '</ul></div>';\n\n\t\t$main .= '<hr /><h1>Systems</h1>\n\t\t\t<h2>Active Systems</h2>\n\t\t\t<div class=\"pts_phoromatic_info_box_area\">\n\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><h1>Active Systems</h1></li>';\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, LocalIP, CurrentTask, LastCommunication, EstimatedTimeForTask, TaskPercentComplete, AccountID FROM phoromatic_systems WHERE State >= 0 ORDER BY LastCommunication DESC');\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\t\t\t\t\t$active_system_count = 0;\n\n\t\t\t\t\tif($row == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Systems Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$main .= '<a onclick=\"\"><li>' . $row['Title'] . '<br /><table><tr><td>' . phoromatic_account_id_to_group_name($row['AccountID']) . '</td><td>' . $row['LocalIP'] . '</td><td><strong>' . $row['CurrentTask'] . '</strong></td><td><strong>Last Communication:</strong> ' . date('j F Y H:i', strtotime($row['LastCommunication'])) . '</td><td><a onclick=\"return confirm(\\'Permanently remove this system?\\');\" href=\"/?admin_data/delete/system/' . $row['AccountID'] . '/' . $row['SystemID'] . '\">Permanently Remove</a></td></tr></table></li></a>';\n\t\t\t\t\t\t\t$active_system_count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t}\n\n\n\t\t\t$main .= '</ul></div>';\n\t\t\t$main .= '<h2>Inactive Systems</h2>\n\t\t\t<div class=\"pts_phoromatic_info_box_area\">\n\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><h1>Inactive Systems</h1></li>';\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, LocalIP, CurrentTask, LastCommunication, EstimatedTimeForTask, TaskPercentComplete, AccountID FROM phoromatic_systems WHERE State < 0 ORDER BY LastCommunication DESC');\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\t\t\t\t\t$active_system_count = 0;\n\n\t\t\t\t\tif($row == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Systems Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$main .= '<a onclick=\"\"><li>' . $row['Title'] . '<br /><table><tr><td>' . phoromatic_account_id_to_group_name($row['AccountID']) . '</td><td>' . $row['LocalIP'] . '</td><td><strong>' . $row['CurrentTask'] . '</strong></td><td><strong>Last Communication:</strong> ' . date('j F Y H:i', strtotime($row['LastCommunication'])) . '</td><td><a onclick=\"return confirm(\\'Permanently remove this system?\\');\" href=\"/?admin_data/delete/system/' . $row['AccountID'] . '/' . $row['SystemID'] . '\">Permanently Remove</a></td></tr></table></li></a>';\n\t\t\t\t\t\t\t$active_system_count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t}\n\n\n\t\t\t$main .= '</ul></div>';\n\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_benchmark_tickets ORDER BY TicketIssueTime DESC');\n\t\t$result = $stmt->execute();\n\n\t\t$main .= '<hr /><h1>Benchmark Tickets</h1>\n\t\t\t<div class=\"pts_phoromatic_info_box_area\"><ul><li><h1>Tickets</h1></li>';\n\t\twhile($result && $row = $result->fetchArray())\n\t\t{\n\t\t\t\t$main .= '<a onclick=\"\"><li>' . $row['Title'] . '<br /><table><tr><td><a onclick=\"return confirm(\\'Permanently remove this system?\\');\" href=\"/?admin_data/delete/ticket/' . $row['AccountID'] . '/' . $row['TicketID'] . '\">Permanently Remove</a></td></tr></table></li></a>';\n\t\t}\n\t\t$main .= '</ul></div>';\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in());\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2015 - 2021, Phoronix Media\n\tCopyright (C) 2015 - 2021, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_benchmark implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'One-Time Benchmark Run';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\tif(PHOROMATIC_USER_IS_VIEWER)\n\t\t\treturn;\n\n\t\t$is_new = true;\n\t\t$e_schedule = false;\n\t\tif(!empty($PATH[0]) && $PATH[0] == 'all')\n\t\t{\n\t\t\t$main = '<h1>Past Benchmark Tickets</h1>';\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_benchmark_tickets WHERE AccountID = :account_id AND State >= 0 ORDER BY TicketIssueTime DESC');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$result = $stmt->execute();\n\t\t\t$main .= '<ol>';\n\n\t\t\tif($result)\n\t\t\t{\n\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\tif(!empty($row))\n\t\t\t\t{\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li><a href=\"?benchmark/' . $row['TicketID'] . '\">' . $row['Title'] . '</a></li>';\n\t\t\t\t\t}\n\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$main .= '<li>No Benchmark Tickets Found</li>';\n\t\t\t}\n\n\t\t\t$main .= '</ol>';\n\t\t}\n\t\telse if(!empty($PATH[0]) && is_numeric($PATH[0]))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_benchmark_tickets WHERE AccountID = :account_id AND TicketID = :ticket_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':ticket_id', $PATH[0]);\n\t\t\t$result = $stmt->execute();\n\t\t\t$row = $result->fetchArray();\n\n\t\t\tif(!empty($row))\n\t\t\t{\n\t\t\t\tif(isset($_GET['remove']))\n\t\t\t\t{\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_benchmark_tickets WHERE AccountID = :account_id AND TicketID = :ticket_id');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt->bindValue(':ticket_id', $PATH[0]);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\theader('Location: /?benchmark');\n\t\t\t\t}\n\t\t\t\telse if(isset($_GET['repeat']))\n\t\t\t\t{\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_benchmark_tickets SET TicketIssueTime = :new_ticket_time, State = 1 WHERE AccountID = :account_id AND TicketID = :ticket_id');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt->bindValue(':ticket_id', $PATH[0]);\n\t\t\t\t\t$stmt->bindValue(':new_ticket_time', time());\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t}\n\t\t\t\telse if(isset($_GET['disable']))\n\t\t\t\t{\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_benchmark_tickets SET State = 0 WHERE AccountID = :account_id AND TicketID = :ticket_id');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt->bindValue(':ticket_id', $PATH[0]);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t}\n\n\t\t\t\t$main = null;\n\t\t\t\t$main .= '<h1>' . $row['Title'] . '</h1>';\n\t\t\t\t$main .= '<h3>' . $row['Description'] . '</h3>';\n\t\t\t\t$main .= '<p>This benchmark ticket was created on <strong>' . date('j F Y \\a\\t H:i', strtotime($row['LastModifiedOn'])) . '</strong> by <strong>' . $row['LastModifiedBy'] . '. The ticket was last issued for testing at ' . date('j F Y \\a\\t H:i', $row['TicketIssueTime']) . '</strong>.';\n\t\t\t\t$main .= '<p> <a href=\"/?benchmark/' . $PATH[0] . '/&repeat\">Repeat Ticket</a> &nbsp; &nbsp; &nbsp; <a href=\"/?benchmark/' . $PATH[0] . '/&remove\">Remove Ticket</a>' . (!isset($_GET['disable']) && $row['State'] > 0 ? ' &nbsp; &nbsp; &nbsp; <a href=\"/?benchmark/' . $PATH[0] . '/&disable\">End Ticket</a>' : null) . '</p>';\n\n\t\t\t\tif(!empty($row['RunTargetSystems']))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h1>System Targets</h1><ol>';\n\t\t\t\t\tforeach(explode(',', $row['RunTargetSystems']) as $system_id)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li><a href=\"?systems/' . $system_id . '\">' . phoromatic_server::system_id_to_name($system_id) . '</a></li>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!empty($row['RunTargetGroups']))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h1>Group Targets</h1><ol>';\n\t\t\t\t\tforeach(explode(',', $row['RunTargetGroups']) as $group)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(empty($group))\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t$main .= '<li><strong style=\"font-weight: 800;\">' . $group . '</strong></li>';\n\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT SystemID FROM phoromatic_systems WHERE AccountID = :account_id AND Groups LIKE :sgroup AND State > 0 ORDER BY Title ASC');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt->bindValue(':sgroup', '%#' . $group . '#%');\n\t\t\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\t\t\twhile($result && $row = $result->fetchArray())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$main .= '<li><a href=\"?systems/' . $row['SystemID'] . '\">' . phoromatic_server::system_id_to_name($row['SystemID']) . '</a></li>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$main .= '</ol>';\n\n\t\t\t\tif(!empty($row['EnvironmentVariables']))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h1>Environment</h1><ol>';\n\n\t\t\t\t\tforeach(explode(';', $row['EnvironmentVariables']) as $env)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li><strong>' . $env . '</strong></li>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</ol>';\n\t\t\t\t}\n\n\t\t\t\t$main .= '<hr /><h1>Ticket Payload</h1>';\n\t\t\t\t$main .= '<p>This ticket runs the <strong>' . $row['SuiteToRun'] . '</strong> test suite:</p>';\n\t\t\t\t$main .= '<div style=\"max-height: 400px; overflow-y: scroll;\">';\n\t\t\t\t$xml_path = phoromatic_server::find_suite_file($_SESSION['AccountID'], $row['SuiteToRun']);\n\t\t\t\tif(is_file($xml_path))\n\t\t\t\t{\n\t\t\t\t\t$test_suite = new pts_test_suite($xml_path);\n\n\t\t\t\t//\t$main .= '<h2>' . $test_suite->get_title() . '</h2>';\n\t\t\t\t//\t$main .= '<p><strong>' . $test_suite->get_maintainer() . '</strong></p>';\n\t\t\t\t//\t$main .= '<p><em>' . $test_suite->get_description() . '</em></p>';\n\n\t\t\t\t\tforeach($test_suite->get_contained_test_result_objects() as $tro)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h3>' . $tro->test_profile->get_title() . ' [' . $tro->test_profile->get_identifier() . ']</h3>';\n\t\t\t\t\t\t$main .= '<p>' . $tro->get_arguments_description() . '</p>';\n\t\t\t\t\t}\n\n\t\t\t\t\t//$main .= '<hr />';\n\t\t\t\t}\n\n\t\t\t\t$main .= '</div><hr />';\n\t\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">';\n\t\t\t\tif(strpos($row['EnvironmentVariables'], 'PTS_CONCURRENT_TEST_RUNS') !== false)\n\t\t\t\t{\n\t\t\t\t\tif(isset($_REQUEST['view_log']) && is_file(phoromatic_server::phoromatic_account_stress_log_path($_SESSION['AccountID'], $PATH[0]) . $_REQUEST['view_log'] . '.log'))\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<hr /><h1>Stress Log For: ' . phoromatic_server::system_id_to_name($_REQUEST['view_log']) . '</h1>';\n\t\t\t\t\t\t$log_text = PHP_EOL . file_get_contents(phoromatic_server::phoromatic_account_stress_log_path($_SESSION['AccountID'], $PATH[0]) . $_REQUEST['view_log'] . '.log');\n\n\t\t\t\t\t\t$x = 0;\n\t\t\t\t\t\twhile(($x = strpos($log_text, \"\\n##\", $x)) !== false)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$log_text = substr($log_text, 0, $x) . \"\\n<strong style=\\\"font-weight: 800;\\\">\" . substr($log_text, $x + 1);\n\n\t\t\t\t\t\t\tif(($y = strpos($log_text, \"\\n\", $x + 2)) !== false)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$log_text = substr($log_text, 0, $y) . '</strong>' . substr($log_text, $y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$x = $y;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$x = 0;\n\t\t\t\t\t\twhile(($x = strpos($log_text, \"\\n[\", $x)) !== false)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$log_text = substr($log_text, 0, $x) . \"\\n<strong style=\\\"font-weight: 800;\\\">\" . substr($log_text, $x + 1);\n\n\t\t\t\t\t\t\tif(($y = strpos($log_text, \"]\", $x + 2)) !== false)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$log_text = substr($log_text, 0, $y) . '</strong>' . substr($log_text, $y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$x = $y;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$main .= '<blockquote>' . str_replace(\"\\n\", '<br />', $log_text) . '</blockquote>';\n\t\t\t\t\t\t$main .= '<p><a href=\"?benchmark/' . $PATH[0] . '#stress_logs\">View Other System Logs</a></p>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<a name=\"stress_logs\"></a><hr /><h1>Stress Run Logs</h1><ol>';\n\t\t\t\t\t\t$count = 0;\n\t\t\t\t\t\tforeach(pts_file_io::glob(phoromatic_server::phoromatic_account_stress_log_path($_SESSION['AccountID'], $PATH[0]) . '*.log') as $log_file)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$sys_id = basename($log_file, '.log');\n\t\t\t\t\t\t\t$main .= '<li><a href=\"?benchmark/' . $PATH[0] . '/&view_log=' . $sys_id . '\">' . phoromatic_server::system_id_to_name($sys_id) . '</a></li>';\n\t\t\t\t\t\t\t$count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif($count == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$main .= '<li><em>No Logs Currently Available</em></li>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$main .= '</ol>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$main .= '<div style=\"margin: 0 5%;\"><ul style=\"max-height: 100%;\"><li><h1>Test Results</h1></li>';\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime, TimesViewed FROM phoromatic_results WHERE AccountID = :account_id AND BenchmarkTicketID = :ticket_id ORDER BY UploadTime DESC');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt->bindValue(':ticket_id', $PATH[0]);\n\t\t\t\t\t$test_result_result = $stmt->execute();\n\t\t\t\t\t$results = 0;\n\t\t\t\t\twhile($test_result_row = $test_result_result->fetchArray())\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<a onclick=\"\"><li id=\"result_select_' . $test_result_row['PPRID'] . '\"><input type=\"checkbox\" id=\"result_compare_checkbox_' . $test_result_row['PPRID'] . '\" onclick=\"javascript:phoromatic_checkbox_toggle_result_comparison(\\'' . $test_result_row['PPRID'] . '\\');\" onchange=\"return false;\"></input> <span onclick=\"javascript:phoromatic_window_redirect(\\'?result/' . $test_result_row['PPRID'] . '\\');\">' . $test_result_row['Title'] . '</span><br /><table><tr><td>' . phoromatic_system_id_to_name($test_result_row['SystemID']) . '</td><td>' . phoromatic_user_friendly_timedate($test_result_row['UploadTime']) .  '</td><td>' . $test_result_row['TimesViewed'] . ' Times Viewed</td></table></li></a>';\n\t\t\t\t\t\t$results++;\n\n\t\t\t\t\t}\n\t\t\t\t\tif($results == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Results Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse if($results > 3)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<a onclick=\"\"><li id=\"global_bottom_totals\"><input type=\"checkbox\" id=\"global_checkbox\" onclick=\"javascript:phoromatic_toggle_checkboxes_on_page(this);\" onchange=\"return false;\"></input> <strong>' . $results . ' Results</strong></li></a>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</ul></div>';\n\t\t\t\t\t$main .= '</div>';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(isset($_POST['benchmark_title']) && !empty($_POST['benchmark_title']))\n\t\t\t{\n\t\t\t\t$title = phoromatic_get_posted_var('benchmark_title');\n\t\t\t\t$description = phoromatic_get_posted_var('benchmark_description');\n\t\t\t\t$result_identifier = phoromatic_get_posted_var('benchmark_identifier');\n\t\t\t\t$suite_to_run = phoromatic_get_posted_var('suite_to_run');\n\n\t\t\t\tif(strlen($title) < 3)\n\t\t\t\t{\n\t\t\t\t\techo '<h2>Title must be at least three characters.</h2>';\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t\tif(strlen($result_identifier) < 3)\n\t\t\t\t{\n\t\t\t\t\techo '<h2>Identifier must be at least three characters.</h2>';\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t\tif(strlen($suite_to_run) < 3)\n\t\t\t\t{\n\t\t\t\t\techo '<h2>You must specify a suite to run.</h2>';\n\t\t\t\t\texit;\n\t\t\t\t}\n\n\t\t\t\t$run_target_systems = phoromatic_get_posted_var('run_on_systems', array());\n\t\t\t\t$run_target_groups = phoromatic_get_posted_var('run_on_groups', array());\n\t\t\t\tif(!is_array($run_target_systems)) $run_target_systems = array();\n\t\t\t\tif(!is_array($run_target_groups)) $run_target_groups = array();\n\t\t\t\t$run_target_systems = implode(',', $run_target_systems);\n\t\t\t\t$run_target_groups = implode(',', $run_target_groups);\n\n\t\t\t\tif($is_new)\n\t\t\t\t{\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$ticket_id = rand(10, 999999);\n\t\t\t\t\t\t$matching_tickets = phoromatic_server::$db->querySingle('SELECT TicketID FROM phoromatic_benchmark_tickets WHERE TicketID = \\'' . $ticket_id . '\\'');\n\t\t\t\t\t}\n\t\t\t\t\twhile(!empty($matching_tickets));\n\t\t\t\t}\n\n\t\t\t\t$env_vars = array();\n\n\t\t\t\tif(is_numeric($_POST['PTS_CONCURRENT_TEST_RUNS']) && $_POST['PTS_CONCURRENT_TEST_RUNS'] > 0)\n\t\t\t\t{\n\t\t\t\t\tarray_push($env_vars, 'PTS_CONCURRENT_TEST_RUNS=' . $_POST['PTS_CONCURRENT_TEST_RUNS']);\n\t\t\t\t}\n\t\t\t\tif(is_numeric($_POST['TOTAL_LOOP_TIME']) && $_POST['TOTAL_LOOP_TIME'] > 0)\n\t\t\t\t{\n\t\t\t\t\tarray_push($env_vars, 'TOTAL_LOOP_TIME=' . $_POST['TOTAL_LOOP_TIME']);\n\t\t\t\t}\n\n\t\t\t\tforeach(pts_env::get_posted_options('phoromatic') as $ei => $ev)\n\t\t\t\t{\n\t\t\t\t\tarray_push($env_vars, $ei . '=' . $ev);\n\t\t\t\t}\n\n\t\t\t\t$env_vars = implode(';', $env_vars);\n\n\t\t\t\t// Add benchmark\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT OR REPLACE INTO phoromatic_benchmark_tickets (AccountID, TicketID, TicketIssueTime, Title, ResultIdentifier, SuiteToRun, Description, State, LastModifiedBy, LastModifiedOn, RunTargetGroups, RunTargetSystems, EnvironmentVariables) VALUES (:account_id, :ticket_id, :ticket_time, :title, :result_identifier, :suite_to_run, :description, :state, :modified_by, :modified_on, :run_target_groups, :run_target_systems, :environment_variables)');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':ticket_id', $ticket_id);\n\t\t\t\t$stmt->bindValue(':ticket_time', time());\n\t\t\t\t$stmt->bindValue(':title', $title);\n\t\t\t\t$stmt->bindValue(':result_identifier', $result_identifier);\n\t\t\t\t$stmt->bindValue(':suite_to_run', $suite_to_run);\n\t\t\t\t$stmt->bindValue(':description', $description);\n\t\t\t\t$stmt->bindValue(':state', 1);\n\t\t\t\t$stmt->bindValue(':modified_by', $_SESSION['UserName']);\n\t\t\t\t$stmt->bindValue(':modified_on', phoromatic_server::current_time());\n\t\t\t\t$stmt->bindValue(':public_key', null); //  isset($public_key) ? $public_key :\n\t\t\t\t$stmt->bindValue(':run_target_groups', $run_target_groups);\n\t\t\t\t$stmt->bindValue(':run_target_systems', $run_target_systems);\n\t\t\t\t$stmt->bindValue(':environment_variables', $env_vars);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\tphoromatic_add_activity_stream_event('benchmark', $ticket_id, ($is_new ? 'added' : 'modified'));\n\n\t\t\t\tif($result)\n\t\t\t\t{\n\t\t\t\t\theader('Location: ?benchmark/' . $ticket_id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$main = '\n\t\t\t<h2>' . ($is_new ? 'Create' : 'Edit') . ' A Benchmark</h2>\n\t\t\t<p>This page allows you to run a test suite -- consisting of a single or multiple test suites -- on a given set/group of systems right away at their next earliest possibility. This benchmark mode is an alternative to the <a href=\"?schedules\">benchmark schedules</a> for reptitive/routine testing.</p>';\n\n\t\t\t$local_suites = array();\n\t\t\tforeach(pts_file_io::glob(phoromatic_server::phoromatic_account_suite_path($_SESSION['AccountID']) . '*/suite-definition.xml') as $xml_path)\n\t\t\t{\n\t\t\t\t\t$id = basename(dirname($xml_path));\n\t\t\t\t\t$test_suite = new pts_test_suite($xml_path);\n\t\t\t\t\t$local_suites[$test_suite->get_title() . ' - ' . $id] = $id;\n\t\t\t}\n\t\t\t$official_suites = pts_test_suites::suites_on_disk(false, true);\n\n\t\t\tif(empty($local_suites))\n\t\t\t{\n\t\t\t\t$main .= '<p><strong>Before you can create a benchmark ticket you must first <a href=\"?build_suite\">create a test suite</a> with the tests you wish to run.</strong></p>';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"run_benchmark\" id=\"run_benchmark\" method=\"post\" enctype=\"multipart/form-data\" onsubmit=\"return validate_run_benchmark();\">\n\t\t\t\t<h3>Title:</h3>\n\t\t\t\t<p>The title is the name of the result file for this test run.</p>\n\t\t\t\t<p><input type=\"text\" name=\"benchmark_title\" value=\"' . (!$is_new ? $e_schedule['Title'] : null) . '\" /></p>\n\t\t\t\t<h3>Test Run Identifier:</h3>\n\t\t\t\t<p>The test run identifier is the per-system name for the system(s) being benchmarked. The following variables may be used: <strong>.SYSTEM</strong>, <strong>.GROUP</strong>. Any custom per-user system variables set via the individual system pages can also be used.</p>\n\t\t\t\t<p><input type=\"text\" name=\"benchmark_identifier\" value=\"' . (!$is_new ? $e_schedule['Identifier'] : null) . '\" /></p>\n\t\t\t\t<h3>Test Suite To Run:</h3>\n\t\t\t\t<p><a href=\"?build_suite\">Build a suite</a> to add/select more tests to run or <a href=\"?local_suites\">view local suites</a> for more information on a particular suite. A test suite is a set of test profiles to run in a pre-defined manner.</p>';\n\t\t\t\t$main .= '<p><select name=\"suite_to_run\" id=\"suite_to_run_identifier\" onchange=\"phoromatic_show_basic_suite_details(\\'\\');\">';\n\t\t\t\tforeach(array_merge($local_suites, $official_suites) as $title => $id)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<option value=\"' . $id . '\">' . $title . '</option>';\n\t\t\t\t}\n\t\t\t\t$main .= '</select></p>';\n\t\t\t\t$main .= '<p><div id=\"suite_details\" style=\"background: #efefef;\"></div></p>';\n\t\t\t\t$main .= '<h3>Description:</h3>\n\t\t\t\t<p>The description is an optional way to add more details about the intent or objective of this test run.</p>\n\t\t\t\t<p><textarea name=\"benchmark_description\" id=\"benchmark_description\" cols=\"50\" rows=\"3\">' . (!$is_new ? $e_schedule['Description'] : null) . '</textarea></p>\n\t\t\t\t<hr /><h3>System Targets:</h3>\n\t\t\t\t<p>Select the systems that should be benchmarked at their next earliest convenience.</p>\n\t\t\t\t<p style=\"white-space: nowrap;\">';\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 ORDER BY Title ASC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$result = $stmt->execute();\n\n\n\t\t\t\tif(!$is_new)\n\t\t\t\t{\n\t\t\t\t\t$e_schedule['RunTargetSystems'] = explode(',', $e_schedule['RunTargetSystems']);\n\t\t\t\t\t$e_schedule['RunTargetGroups'] = explode(',', $e_schedule['RunTargetGroups']);\n\t\t\t\t}\n\n\t\t\t\tif($row = $result->fetchArray())\n\t\t\t\t{\n\t\t\t\t\t$main .= '<h4>Systems: ';\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<input type=\"checkbox\" name=\"run_on_systems[]\" value=\"' . $row['SystemID'] . '\" ' . (!$is_new && in_array($row['SystemID'], $e_schedule['RunTargetSystems']) ? 'checked=\"checked\" ' : null) . '/> ' . $row['Title'] . ' ';\n\t\t\t\t\t}\n\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t$main .= '</h4>';\n\t\t\t\t}\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT GroupName FROM phoromatic_groups WHERE AccountID = :account_id ORDER BY GroupName ASC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\tif($row = $result->fetchArray())\n\t\t\t\t{\n\t\t\t\t\t$main .= '<h4>Groups: ';\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<input type=\"checkbox\" name=\"run_on_groups[]\" value=\"' . $row['GroupName'] . '\" ' . (!$is_new && in_array($row['GroupName'], $e_schedule['RunTargetGroups']) ? 'checked=\"checked\" ' : null) . '/> ' . $row['GroupName'] . ' ';\n\t\t\t\t\t}\n\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t$main .= '</h4>';\n\t\t\t\t}\n\n\t\t\t\t$main .= '</p>\n\t\t\t\t<hr /><h3>Environment Options</h3>\n\t\t\t\t<h4>Stress Testing</h4>\n\t\t\t\t<p>If you wish to test systems for stability/reliability rather than performance, use this option and specify the number of tests to run concurrently (two or more) and (optionally) for the total period of time to continue looping the benchmarks. These options are intended to just stress the system and will not record any benchmark results. From the command-line this testing mode can be used via the <em>phoronix-test-suite stress-run</em> sub-command.</p>\n\t\t\t\t<p><strong>Concurrent Number Of Test Processes:</strong> <select name=\"PTS_CONCURRENT_TEST_RUNS\"><option value=\"0\">Disabled</option>';\n\t\t\t\tfor($i = 2; $i <= 24; $i++)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<option value=\"' . $i . '\">' . $i . '</option>';\n\t\t\t\t}\n\t\t\t\t$main .= '</select></p>\n\t\t\t\t<p><strong>Force Loop Time:</strong> <select name=\"TOTAL_LOOP_TIME\"><option value=\"0\">Disabled</option>';\n\t\t\t\t$s = true;\n\t\t\t\tfor($i = 5; $i < 60; $i += 5)\n\t\t\t\t{\n\t\t\t\t\tif($i > 15 && $i % 10 != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '<option value=\"' . $i . '\">' . pts_strings::format_time($i, 'MINUTES') . '</option>';\n\t\t\t\t}\n\t\t\t\tfor($i = 60; $i <= (30 * 24 * 60); $i += 60)\n\t\t\t\t{\n\t\t\t\t\tif($i > 10080)\n\t\t\t\t\t{\n\t\t\t\t\t\t// 7 days\n\t\t\t\t\t\tif(($i % 1440) != 0)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\telse if($i > 480)\n\t\t\t\t\t{\n\t\t\t\t\t\t$s = !$s;\n\t\t\t\t\t\tif(!$s)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$main .= '<option value=\"' . $i . '\">' . pts_strings::format_time($i, 'MINUTES') . '</option>';\n\t\t\t\t}\n\t\t\t\t$main .= '</select></p>';\n\t\t\t\t$main .= '<p><a id=\"env_var_options_show\" onclick=\"javascript:document.getElementById(\\'env_var_options\\').style.display = \\'block\\'; javascript:document.getElementById(\\'env_var_options_show\\').style.display = \\'none\\'; \">Advanced Options</a></p> <div id=\"env_var_options\" style=\"display: none;\"><p>The advanced options require the Phoromatic clients be on the latest Phoronix Test Suite (10.8 or newer / Git). See the Phoronix Test Suite documentation for more information on these environment variables / advanced options.</p>' . pts_env::get_html_options('phoromatic') . '</div>';\n\n\t\t\t\t$main .= '<hr /><p align=\"left\"><input name=\"submit\" value=\"' . ($is_new ? 'Run' : 'Edit') . ' Benchmark\" type=\"submit\" onclick=\"return pts_rmm_validate_schedule();\" /></p>\n\t\t\t\t\t</form>';\n\t\t\t}\n\t\t}\n\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_benchmark_tickets WHERE AccountID = :account_id AND State >= 0 AND TicketIssueTime > :time_cutoff ORDER BY TicketIssueTime DESC LIMIT 30');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$stmt->bindValue(':time_cutoff', (time() - (60 * 60 * 24 * 14)));\n\t\t$result = $stmt->execute();\n\t\t$right = '<ul><li>Benchmark Tickets</li>';\n\n\t\tif($result)\n\t\t{\n\t\t\t$row = $result->fetchArray();\n\n\t\t\tif(!empty($row))\n\t\t\t{\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\t$right .= '<li><a href=\"?benchmark/' . $row['TicketID'] . '\">' . $row['Title'] . '</a></li>';\n\t\t\t\t}\n\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t}\n\t\t}\n\t\t$right .= '<li><em><a href=\"?benchmark/all\">View All Past Tickets</a></em></li>';\n\t\t$right .= '</ul>';\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in($right));\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2015 - 2018, Phoronix Media\n\tCopyright (C) 2015 - 2018, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_build_suite implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Build Custom Test Suite';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\tif(isset($_POST['suite_title']))\n\t\t{\n\t\t\tif(strlen($_POST['suite_title']) < 3)\n\t\t\t{\n\t\t\t\techo '<h2>Suite title must be at least three characters.</h2>';\n\t\t\t}\n\n\t\t\t//echo 'TEST SUITE: ' . $_POST['suite_title'] . '<br />';\n\t\t\t//echo 'TEST SUITE: ' . $_POST['suite_description'] . '<br />';\n\t\t\t$tests = array();\n\n\t\t\tforeach($_POST['test_add'] as $i => $test_identifier)\n\t\t\t{\n\t\t\t\t$test_prefix = $_POST['test_prefix'][$i];\n\t\t\t\t$args = array();\n\t\t\t\t$args_name = array();\n\n\t\t\t\tforeach($_POST as $i => $v)\n\t\t\t\t{\n\t\t\t\t\tif(strpos($i, $test_prefix) !== false && substr($i, -9) != '_selected')\n\t\t\t\t\t{\n\t\t\t\t\t\tif(strpos($v, '||') !== false)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$opts = explode('||', $v);\n\t\t\t\t\t\t\t$a = array();\n\t\t\t\t\t\t\t$d = array();\n\t\t\t\t\t\t\tforeach($opts as $opt)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$t = explode('::', $opt);\n\t\t\t\t\t\t\t\t$a[] = $t[1];\n\t\t\t\t\t\t\t\t$d[] = $t[0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$args[] = $a;\n\t\t\t\t\t\t\t$args_name[] = $d;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$args[] = array($v);\n\t\t\t\t\t\t\t$args_name[] = array($_POST[$i . '_selected']);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$test_args = array();\n\t\t\t\t$test_args_description = array();\n\t\t\t\tpts_test_run_options::compute_all_combinations($test_args, null, $args, 0);\n\t\t\t\tpts_test_run_options::compute_all_combinations($test_args_description, null, $args_name, 0, ' - ');\n\n\t\t\t\tforeach(array_keys($test_args) as $i)\n\t\t\t\t{\n\t\t\t\t\t$tests[] = array('test' => $test_identifier, 'description' => $test_args_description[$i], 'args' => $test_args[$i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(count($tests) < 1)\n\t\t\t{\n\t\t\t\techo '<h2>You must add at least one test to the suite.</h2>';\n\t\t\t}\n\n\t\t\t$new_suite = new pts_test_suite();\n\t\t\t$version_bump = 0;\n\n\t\t//\tdo\n\t\t//\t{\n\t\t\t\t//$suite_version = '1.' . $version_bump . '.0';\n\t\t\t\t$suite_version = $_POST['suite_version'];\n\t\t\t\t$suite_id = $new_suite->clean_save_name_string($_POST['suite_title']) . '-' . $suite_version;\n\t\t\t\t$suite_dir = phoromatic_server::phoromatic_account_suite_path($_SESSION['AccountID'], $suite_id);\n\t\t//\t\t$version_bump++;\n\t\t//\t}\n\t\t//\twhile(is_dir($suite_dir));\n\t\t\tpts_file_io::mkdir($suite_dir);\n\t\t\t$save_to = $suite_dir . '/suite-definition.xml';\n\n\t\t\t$new_suite->set_title($_POST['suite_title']);\n\t\t\t$new_suite->set_version($suite_version); // $suite_version\n\t\t\t$new_suite->set_maintainer($_SESSION['UserName']);\n\t\t\t$new_suite->set_suite_type('System');\n\t\t\t$new_suite->set_description($_POST['suite_description']);\n\n\t\t\tforeach($tests as $m)\n\t\t\t{\n\t\t\t\t$new_suite->add_to_suite($m['test'], $m['args'], $m['description']);\n\t\t\t}\n\n\t\t\t$new_suite->save_xml(null, $save_to);\n\t\t\techo '<h2>Saved As ' . $suite_id . '</h2>';\n\t\t}\n\t\techo phoromatic_webui_header_logged_in();\n\t\t$main = '<h1>Local Suites</h1><p>Find already created local test suites by your account/group via the <a href=\"/?local_suites\">local suites</a> page.</p>';\n\n\n\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t{\n\t\t\t$suite = null;\n\t\t\tif(isset($PATH[0]))\n\t\t\t{\n\t\t\t\t$suite = phoromatic_server::phoromatic_account_suite_path($_SESSION['AccountID'], $PATH[0]) . '/suite-definition.xml';\n\t\t\t\tif(!is_file($suite))\n\t\t\t\t{\n\t\t\t\t\t$suite = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$suite = new pts_test_suite($suite);\n\n\t\t\t$main .= '<h1>Build Suite</h1><p>A test suite in the realm of the Phoronix Test Suite, OpenBenchmarking.org, and Phoromatic is <strong>a collection of test profiles with predefined settings</strong>. Establishing a test suite makes it easy to run repetitive testing on the same set of test profiles by simply referencing the test suite name.</p>';\n\t\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"build_suite\" id=\"build_suite\" method=\"post\" onsubmit=\"return validate_suite();\">\n\t\t\t<h3>Title:</h3>\n\t\t\t<p><input type=\"text\" name=\"suite_title\" value=\"' . $suite->get_title() . '\" /></p>\n\t\t\t<h3>Suite Version:</h3>\n\t\t\t<p><input type=\"text\" name=\"suite_version\" value=\"' . ($suite->get_version() == null ? '1.0.0' : $suite->get_version()) . '\" /></p>\n\t\t\t<h3>Description:</h3>\n\t\t\t<p><textarea name=\"suite_description\" id=\"suite_description\" cols=\"60\" rows=\"2\">' . $suite->get_description() . '</textarea></p>\n\t\t\t<h3>Tests In Schedule:</h3>\n\t\t\t<p><div id=\"test_details\"></div></p>\n\t\t\t<script type=\"text/javascript\">';\n\n\t\t\tforeach($suite->get_contained_test_result_objects() as $obj)\n\t\t\t{\n\t\t\t\t$main .= 'phoromatic_ajax_append_element(\"r_add_test_build_suite_details/&tp=' . $obj->test_profile->get_identifier() . '&tpa=' . $obj->get_arguments_description() . '\", \"test_details\");' . PHP_EOL;\n\t\t\t}\n\t\t\t$main .= '</script>\n\t\t\t<h3>Add Another Test</h3>';\n\t\t\t$main .= '<select name=\"add_to_suite_select_test\" id=\"add_to_suite_select_test\" onchange=\"phoromatic_build_suite_test_details();\"><option value=\"\"></option>';\n\t\t\t$dc = pts_client::download_cache_path();\n\t\t\t$dc_exists = is_file($dc . 'pts-download-cache.json');\n\t\t\tif($dc_exists)\n\t\t\t{\n\t\t\t\t$cache_json = file_get_contents($dc . 'pts-download-cache.json');\n\t\t\t\t$cache_json = json_decode($cache_json, true);\n\t\t\t}\n\t\t\tforeach(array_merge(pts_tests::local_tests(), pts_openbenchmarking::available_tests(false, isset($_COOKIE['list_show_all_test_versions']) && $_COOKIE['list_show_all_test_versions'])) as $test)\n\t\t\t{\n\t\t\t\t$cache_checked = false;\n\t\t\t\tif(phoromatic_server::read_setting('show_local_tests_only'))\n\t\t\t\t{\n\t\t\t\t\tif($dc_exists)\n\t\t\t\t\t{\n\t\t\t\t\t\tif($cache_json && isset($cache_json['phoronix-test-suite']['cached-tests']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$cache_checked = true;\n\t\t\t\t\t\t\tif(!in_array($test, $cache_json['phoronix-test-suite']['cached-tests']))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(!$cache_checked && phoromatic_server::read_setting('show_local_tests_only') && pts_test_install_request::test_files_available_on_local_system($test) == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$main .= '<option value=\"' . $test . '\">' . $test . '</option>';\n\t\t\t}\n\t\t\t$main .= '</select>';\n\t\t\t$main .= pts_web_embed::cookie_checkbox_option_helper('list_show_all_test_versions', 'Show all available test profile versions.');\n\t\t\t$main .= '<p align=\"right\"><input name=\"submit\" value=\"' . ($suite->get_title() != null ? 'Edit' : 'Create') .' Suite\" type=\"submit\" onclick=\"return pts_rmm_validate_suite();\" /></p>';\n\t\t}\n\n\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2018, Phoronix Media\n\tCopyright (C) 2014 - 2018, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_caches implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Download Caches';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\techo phoromatic_webui_header_logged_in();\n\t\t$main = '<h1>Cache Settings</h1>\n\t\t\t\t<h2>Test Profile Download Cache</h2>\n\t\t\t\t<p>Below are a list of files for verification/debugging purposes that are currently cached by the Phoromatic Server and available for Phoronix Test Suite client systems to download. These are files that are needed by various test profiles in the Phoronix Test Suite. To add more data to this Phoromatic Server cache, from the server run <strong>phoronix-test-suite make-download-cache</strong> while passing the names of any tests/suites you wish to have download and generate a cache for so they can be made available to the Phoronix Test Suite clients on your network.</p>';\n\n\t\tif(($dc = phoromatic_server::find_download_cache()))\n\t\t{\n\t\t\t$dc_path = dirname($dc) . '/';\n\n\t\t\tif(is_writable($dc_path))\n\t\t\t{\n\t\t\t\tif(isset($_POST['dc_submit']))\n\t\t\t\t{\n\t\t\t\t\t$dc_upload_file = basename($_FILES['dc_upload']['name']);\n\t\t\t\t\tif(is_file($dc_path . $dc_upload_file))\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<p>ERROR: Upload of ' . $dc_upload_file . ' failed; file already exists.</p>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(move_uploaded_file($_FILES['dc_upload']['tmp_name'], $dc_path . $dc_upload_file))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$main .= '<p>File uploaded: ' . $dc_upload_file . '</p>';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$main .= '<p>ERROR: Upload of ' . $dc_upload_file . ' failed.</p>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$main .= '<form action=\"/?caches\" method=\"post\" enctype=\"multipart/form-data\"><p align=\"center\">Add file to download cache: <input type=\"file\" name=\"dc_upload\" id=\"dc_upload\" /> <input type=\"submit\" value=\"Upload\" name=\"dc_submit\"></p></form>';\n\t\t\t}\n\n\t\t\t$dc_items = phoromatic_server::download_cache_items();\n\n\t\t\tif(!empty($dc_items))\n\t\t\t{\n\t\t\t\t$total_file_size = 0;\n\t\t\t\t$main .= '<table style=\"margin: 0 auto;\"><tr><th>File</th><th>Size</th><th>SHA256</th></tr>';\n\t\t\t\tforeach($dc_items as $file_name => $info)\n\t\t\t\t{\n\t\t\t\t\t$total_file_size += $info['file_size'];\n\t\t\t\t\t$main .= '<tr><td><a href=\"/download-cache.php?m=1&download=' . $file_name . '\">' . $file_name . '</a></td><td>' . round(max(0.1, $info['file_size']  / 1000000), 1) . 'MB</td><td>' . $info['sha256'] . '</td></tr>';\n\t\t\t\t}\n\t\t\t\t$main .= '</table>';\n\t\t\t\t$main .= '<p><strong>' . count($dc_items) . ' Files / ' . round($total_file_size / 1000000) . ' MB Cache Size</strong><br />';\n\t\t\t\t$main .= '<strong>Download Cache Location:</strong> ' . $dc . '</p>';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$main .= '<h3>No download cache file could be found; on the Phoromatic Server you should run <strong>phoronix-test-suite make-download-cache</strong>. See the <a href=\"https://github.com/phoronix-test-suite/phoronix-test-suite/tree/master/documentation\">documentation</a> for more information on download-cache setup.</h3>'; // TODO XXX implement from the GUI\n\t\t}\n\n\t\t$main .= '<hr /><h2>OpenBenchmarking.org Cache Data</h2>';\n\t\t$main .= '<p>Below is information pertaining to the OpenBenchmarking.org cache present on the Phoromatic Server. To update this cache, run <strong>phoronix-test-suite make-openbenchmarking-cache</strong> from the server.</p>';\n\n\t\t$index_files = pts_file_io::glob(PTS_OPENBENCHMARKING_SCRATCH_PATH . '*.index');\n\t\t$main .= '<table style=\"margin: 0 auto;\"><tr><th>Repository</th><th>Last Updated</th></tr>';\n\t\tforeach($index_files as $index_file)\n\t\t{\n\t\t\t$index_data = json_decode(file_get_contents($index_file), true);\n\t\t\t$main .= '<tr><td>' . basename($index_file, '.index') . '</td><td>' . date('d F Y H:i', $index_data['main']['generated']) . '</td></tr>';\n\t\t}\n\t\t$main .= '</table>';\n\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in());\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014, Phoronix Media\n\tCopyright (C) 2014, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_component_table implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'System Component Table';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\techo phoromatic_webui_header_logged_in();\n\n\t\t$main = '<h1>System Components</h1>';\n\t\t$main .= '<p>Detected hardware/software components via Phoronix Test Suite\\'s Phodevi implementation on the Phoromatic client systems.</p>';\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, Hardware, Software, ClientVersion, NetworkWakeOnLAN, NetworkMAC FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 ORDER BY Title ASC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\n\t\twhile($row = $result->fetchArray())\n\t\t{\n\t\t\t$components[$row['SystemID']] = array_merge(pts_result_file_analyzer::system_component_string_to_array($row['Software'], array('OS', 'Kernel', 'OpenGL', 'File-System')), pts_result_file_analyzer::system_component_string_to_array($row['Hardware'], array('Processor', 'Motherboard', 'Memory', 'Disk', 'Graphics')));\n\t\t\t$components[$row['SystemID']]['Phoronix Test Suite'] = $row['ClientVersion'];\n\t\t\t$components[$row['SystemID']]['WoL Info'] = $row['NetworkWakeOnLAN'];\n\t\t\t$components[$row['SystemID']]['MAC'] = $row['NetworkMAC'];\n\t\t\t$system_ids[$row['SystemID']] = $row['Title'];\n\t\t}\n\n\t\t$main .= '<div style=\"margin: 10px auto; overflow: auto;\"><table>';\n\t\t$component_types = array('MAC', 'Processor', 'Motherboard', 'Memory', 'Disk', 'Graphics', 'OS', 'Kernel', 'OpenGL', 'File-System', 'Phoronix Test Suite', 'WoL Info');\n\t\t$main .= '<tr><th>&nbsp;</th>';\n\t\tforeach($component_types as $type)\n\t\t{\n\t\t\t$main .= '<th>' . $type . '</th>';\n\t\t}\n\t\tforeach($components as $system_id => $component_array)\n\t\t{\n\t\t\t$main .= '<tr>';\n\t\t\t$main .= '<th><a href=\"/?systems/' . $system_id . '\">' . $system_ids[$system_id] . '</a></th>';\n\t\t\tforeach($component_types as $type)\n\t\t\t{\n\t\t\t\t$c = (isset($component_array[$type]) ? $component_array[$type] : 'N/A');\n\t\t\t\tif(($x = stripos($c, ' @ ')) !== false)\n\t\t\t\t{\n\t\t\t\t\t$c = substr($c, 0, $x);\n\t\t\t\t}\n\t\t\t\tif(($x = stripos($c, ' (')) !== false)\n\t\t\t\t{\n\t\t\t\t\t$c = substr($c, 0, $x);\n\t\t\t\t}\n\n\t\t\t\t$main .= '<td>' . $c . '</td>';\n\t\t\t}\n\n\t\t\t$main .= '</tr>';\n\n\n\t\t}\n\t\t$main .= '</table></div>';\n\n\t\t$right = null;\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in($right));\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2018, Phoronix Media\n\tCopyright (C) 2018, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_create_test implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Create Test Profile';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PATH)\n\t{\n\t\tif(PHOROMATIC_USER_IS_VIEWER)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\t$types = pts_validation::process_xsd_types();\n\n\t\tif(isset($_POST['tp_update']) && isset($_POST['test-definition_xml']))\n\t\t{\n\t\t\t$tp = new pts_test_profile($_POST['test-definition_xml']);\n\t\t\t$tp->set_identifier($_POST['tp_update']);\n\t\t\t$tp_path = PTS_TEST_PROFILE_PATH . $tp->get_identifier(false) . '-' . $tp->get_test_profile_version();\n\t\t\tpts_file_io::mkdir($tp_path);\n\n\t\t\tforeach(pts_validation::test_profile_permitted_files() as $permitted_file)\n\t\t\t{\n\t\t\t\t$pfs = str_replace('.', '_', $permitted_file);\n\t\t\t\tif(isset($_POST[$pfs]))\n\t\t\t\t{\n\t\t\t\t\t/* Replaces DOS line-endings of the POST request with platform compatible ones */\n\t\t\t\t\t$fc = str_replace(\"\\r\\n\", PHP_EOL, $_POST[$pfs]);\n\t\t\t\t\tfile_put_contents($tp_path . '/' . $permitted_file, $fc);\n\t\t\t\t}\n\t\t\t}\n\t\t\theader('Location: /?create_test/' . $tp->get_identifier(false) . '-' . $tp->get_test_profile_version());\n\t\t}\n\n\t\tif(isset($_POST['test_profile_base']))\n\t\t{\n\t\t\t$tp_identifier = 'local/' . pts_validation::string_to_sanitized_test_profile_base(str_replace('local/', '', $_POST['test_profile_base']));\n\n\t\t\t$writer = new nye_XmlWriter();\n\t\t\t$ret = pts_validation::xsd_to_var_array_generate_xml(pts_openbenchmarking::openbenchmarking_standards_path() . 'schemas/test-profile.xsd', $types, $_POST, $writer);\n\t\t\t$passed = true;\n\t\t\tif($ret !== true)\n\t\t\t{\n\t\t\t\techo '<p>ERROR: ' . $ret . '</p>';\n\t\t\t\t$passed = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$tp = new pts_test_profile($writer->getXML());\n\t\t\t\t$tp_path = PTS_TEST_PROFILE_PATH . $tp_identifier . '-' . $tp->get_test_profile_version();\n\t\t\t\tpts_file_io::mkdir($tp_path);\n\t\t\t\t$writer->saveXMLFile($tp_path . '/test-definition.xml');\n\t\t\t}\n\n\t\t\t$writer = new nye_XmlWriter();\n\t\t\t$ret = pts_validation::xsd_to_var_array_generate_xml(pts_openbenchmarking::openbenchmarking_standards_path() . 'schemas/test-profile-downloads.xsd', $types, $_POST, $writer);\n\t\t\t$writer->saveXMLFile($tp_path . '/downloads.xml');\n\n\t\t\tif($passed)\n\t\t\t{\n\t\t\t\tpts_validation::generate_test_profile_file_templates($tp_identifier, $tp_path);\n\t\t\t\theader('Location: /?create_test/' . $tp_identifier . '-' . $tp->get_test_profile_version());\n\t\t\t}\n\n\t\t}\n\t\tif(isset($_POST['dc_select_item']))\n\t\t{\n\t\t\t$to_add = false;\n\n\t\t\tforeach(phoromatic_server::download_cache_items() as $file_name => $info)\n\t\t\t{\n\t\t\t\tif($file_name == $_POST['dc_select_item'])\n\t\t\t\t{\n\t\t\t\t\t$to_add = $info;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($to_add)\n\t\t\t{\n\t\t\t\t$identifier_item = isset($PATH[1]) ? $PATH[0] . '/' . $PATH[1] : false;\n\t\t\t\tif($identifier_item && pts_test_profile::is_test_profile($identifier_item))\n\t\t\t\t{\n\t\t\t\t\t$tp = new pts_test_profile($identifier_item);\n\t\t\t\t\t$tdw = new nye_XmlWriter();\n\n\t\t\t\t\t// TODO adapt former code:\n\t\t\t\t\t/*\n\t\t\t\t\t$tdw->add_download($info['file_name'], $info['md5'], $info['sha256'], $info['file_name'], $info['file_size'], null, null);\n\t\t\t\t\t\n\t\t\t\t\tINTO:\n\t\t\t\t\t\n\t\t\t\t\t$tp's get_downloads() with new pts_test_file_download entries\n\t\t\t\t\t*/\n\n\t\t\t\t\t$ret = pts_validation::xsd_to_rebuilt_xml(pts_openbenchmarking::openbenchmarking_standards_path() . 'schemas/test-profile-downloads.xsd', $types, $tp, $tdw);\n\t\t\t\t\t$tdw->saveXMLFile(PTS_TEST_PROFILE_PATH . $tp->get_identifier(false) . '-' . $tp->get_test_profile_version() . '/downloads.xml');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(isset($PATH[1]) && strpos($PATH[1], '&delete') !== false)\n\t\t{\n\t\t\t$identifier_item = isset($PATH[1]) ? $PATH[0] . '/' . str_replace('&delete', '', $PATH[1]) : false;\n\t\t\tif($identifier_item && pts_test_profile::is_test_profile($identifier_item))\n\t\t\t{\n\t\t\t\t$tp = new pts_test_profile($identifier_item);\n\t\t\t\tif($tp->get_identifier() != null)\n\t\t\t\t{\n\t\t\t\t\tpts_file_io::delete($tp->get_resource_dir(), null, true);\n\t\t\t\t\theader('Location: /?tests');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$main = null;\n\t\tif(PHOROMATIC_USER_IS_VIEWER)\n\t\t{\n\t\t\tgoto RENDER_PAGE;\n\t\t}\n\n\t\t$identifier_item = isset($PATH[1]) ? $PATH[0] . '/' . $PATH[1] : false;\n\n\t\tif($identifier_item && pts_test_profile::is_test_profile($identifier_item))\n\t\t{\n\t\t\t$tp = new pts_test_profile($identifier_item);\n\t\t\t$main .= '<h1>Test Profile Editor: ' . $tp->get_identifier() . '</h1>';\n\n\t\t\tif(phoromatic_server::find_download_cache())\n\t\t\t{\n\t\t\t\t$main .= '<h3>Add File From Download Cache To Test</h3>';\n\t\t\t\t$dc_items = phoromatic_server::download_cache_items();\n\t\t\t\tif(!empty($dc_items))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"add_dc_file\" id=\"add_dc_file\" method=\"post\"><a href=\"/?caches\">Manage Download Cache</a> - Add File From Download Cache: <select name=\"dc_select_item\">';\n\t\t\t\t\tforeach($dc_items as $file_name => $info)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<option value=\"' . $file_name . '\">' . $file_name . '</option>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</select> <input type=\"submit\" value=\"Add File\" /></form>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$main .= '<form action=\"?create_test/' . $tp->get_identifier() . '\" name=\"create_test\" id=\"create_test\" method=\"post\" enctype=\"multipart/form-data\"><input type=\"hidden\" name=\"tp_update\" value=\"' . $tp->get_identifier() . '\" />';\n\n\t\t\tforeach(pts_file_io::glob($tp->get_resource_dir() . '/*') as $file)\n\t\t\t{\n\t\t\t\t$file_name = basename($file);\n\t\t\t\t$contents = file_get_contents($file);\n\t\t\t\t$extension = substr($file_name, strrpos($file_name, '.') + 1);\n\t\t\t\t$main .= '<p><strong>' . $file_name . ':</strong></p>';\n\t\t\t\tif($extension == 'xml')\n\t\t\t\t{\n\t\t\t\t\t$contents = htmlentities($contents, ENT_COMPAT | ENT_XML1, 'UTF-8', false);\n\t\t\t\t}\n\t\t\t\t$main .= '<p><textarea style=\"min-height: 160px; height: auto; width: 100%;\" rows=\"' . ceil(count(explode(\"\\n\", $contents)) * 1.05) . '\" name=\"' . $file_name . '\">' . $contents . '</textarea></p>';\n\t\t\t\t\t$main .= '</p>';\n\t\t\t}\n\t\t\t$main .= '<input name=\"submit\" value=\"Save Test Profile\" type=\"submit\" /></form>';\n\t\t\tgoto RENDER_PAGE;\n\t\t}\n\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"create_test\" id=\"create_test\" method=\"post\">';\n\t\t$main .= '<h1>Test Profile Creator</h1>';\n\t\t$main .= '<p>Name of test the test profile, used as the unique identifier for calling the test profile, etc. The input will automatically be made lower-case and spaces turned into dashes in generating the actual test profile identifier.</p><p><em>local/</em><input type=\"text\" name=\"test_profile_base\" value=\"\" required /></p>';\n\t\t$main .= '<p>Fill out the below fields to create the XML meta-data used to define a Phoronix Test Suite / OpenBenchmarking.org test profile.</p>';\n\t\t$types = pts_validation::process_xsd_types();\n\t\t$main .= '<h2>test-definition.xml</h2>';\n\t\t$main .= pts_validation::xsd_to_html_creator(pts_openbenchmarking::openbenchmarking_standards_path() . 'schemas/test-profile.xsd', $types);\n\n\t\t//pts_client::$display->generic_heading('downloads.xml Creation');\n\t\t//do\n\t\t//{\n\t\t$main .= '<h2>downloads.xml</h2>';\n\t\t$main .= pts_validation::xsd_to_html_creator(pts_openbenchmarking::openbenchmarking_standards_path() . 'schemas/test-profile-downloads.xsd', $types);\n\t\t//}\n\t\t//while(pts_user_io::prompt_bool_input('Add another file/download?', -1));\n\t\t//pts_validation::generate_test_profile_file_templates($tp_identifier, $tp_path);\n\t\t$main .= '<input name=\"submit\" value=\"Save\" type=\"submit\" /></form>';\n\n\t\tRENDER_PAGE:\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2016, Phoronix Media\n\tCopyright (C) 2014 - 2016, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_dashboard implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'System Dashboard';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\techo phoromatic_webui_header_logged_in();\n\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 ORDER BY LastCommunication DESC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\techo '<script type=\"text/javascript\"> setInterval(function() { window.location.reload(); }, 79000); </script>';\n\t\techo '<div style=\"margin: 10px 0 30px; clear: both; padding-bottom: 40px;\">';\n\t\twhile($row = $result->fetchArray())\n\t\t{\n\t\t\t$opacity = null;\n\t\t\t// stripos($row['CurrentTask'], 'idling') !== false ||\n\t\t\tif(phoromatic_server::system_check_if_down($_SESSION['AccountID'], $row['SystemID'], $row['LastCommunication'], $row['CurrentTask']) || stripos($row['CurrentTask'], 'Unknown') !== false)\n\t\t\t{\n\t\t\t\t$not_testing = false;\n\t\t\t\t$opacity = ' style=\"background: #f44336; color: #FFF;\"';\n\t\t\t}\n\t\t\telse if(stripos($row['CurrentTask'], 'idling') !== false)\n\t\t\t{\n\t\t\t\t$not_testing = true;\n\t\t\t//\tcontinue;\n\t\t\t}\n\t\t\telse if(stripos($row['CurrentTask'], 'waiting') !== false || stripos($row['CurrentTask'], 'shutdown') !== false)\n\t\t\t{\n\t\t\t\t$not_testing = true;\n\t\t\t\t$opacity = ' style=\"opacity: 0.3;\"';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$not_testing = false;\n\t\t\t}\n\n\t\t\techo '<a href=\"?systems/' . $row['SystemID'] . '\"><div class=\"phoromatic_dashboard_block\"' . $opacity . '>';\n\t\t\techo '<div style=\"float: left; width: 30%;\">';\n\t\t\techo '<h1>' . $row['Title'] . '</h1>';\n\n\t\t\t$components = array_merge(pts_result_file_analyzer::system_component_string_to_array($row['Hardware'], array('Processor', 'Motherboard')), pts_result_file_analyzer::system_component_string_to_array($row['Software'], array('OS', 'Kernel')));\n\t\t\tforeach($components as &$c)\n\t\t\t{\n\t\t\t\tif(($x = stripos($c, ' @')) !== false)\n\t\t\t\t\t$c = substr($c, 0, $x);\n\t\t\t\tif(($x = stripos($c, ' (')) !== false)\n\t\t\t\t\t$c = substr($c, 0, $x);\n\t\t\t}\n\t\t\techo '<p><em>' . implode(' - ', $components) . '</em></p>';\n\t\t\techo '<h2>' . $row['CurrentTask'] . '</h2>';\n\t\t\tif(!empty($row['CurrentProcessSchedule']))\n\t\t\t{\n\t\t\t\techo '<h2><a href=\"/?schedules/' . $row['CurrentProcessSchedule'] . '\">' . phoromatic_server::schedule_id_to_name($row['CurrentProcessSchedule']) . '</a></h2>';\n\t\t\t}\n\t\t\telse if(!empty($row['CurrentProcessTicket']))\n\t\t\t{\n\t\t\t\techo '<h2><a href=\"/?benchmark/' . $row['CurrentProcessTicket'] . '/&view_log=' . $row['SystemID'] . '\">' . phoromatic_server::ticket_id_to_name($row['CurrentProcessTicket']) . '</a></h2>';\n\t\t\t}\n\t\t\techo '</div>';\n\n\t\t\techo '<div style=\"float: left;\">';\n\t\t\techo '<h2>' . $row['LastIP'] . '</h2>';\n\t\t\techo '</div>';\n\n\t\t\t$time_remaining = phoromatic_compute_estimated_time_remaining($row['EstimatedTimeForTask'], $row['LastCommunication']);\n\t\t\tif($time_remaining)\n\t\t\t{\n\t\t\t\techo '<div style=\"float: left; text-align: center; margin: 0 6px;\">';\n\t\t\t\techo '<h2>~ ' . $time_remaining . ' <sub>mins</sub></h2>';\n\t\t\t\techo '<p style=\"font-size: 90%; color: #FFF;\"><em>Estimated Time Remaining</em></p>';\n\t\t\t\tif(!empty($row['TimeToNextCommunication']))\n\t\t\t\t{\n\t\t\t\t\techo '<pstyle=\"color: #FFF;\"><em>' . phoromatic_compute_estimated_time_remaining_string($row['TimeToNextCommunication'], $row['LastCommunication'], 'To Next Communication') . '</em></p>';\n\t\t\t\t}\n\t\t\t\techo '</div>';\n\t\t\t}\n\n\t\t\tif($not_testing)\n\t\t\t{\n\t\t\t\t$next_job_in = phoromatic_server::time_to_next_scheduled_job($_SESSION['AccountID'], $row['SystemID']);\n\t\t\t\tif($next_job_in > 0)\n\t\t\t\t{\n\t\t\t\t\tif($next_job_in > 240)\n\t\t\t\t\t{\n\t\t\t\t\t\t$next_job_in = round($next_job_in / 60);\n\t\t\t\t\t\t$next_unit = 'hours';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$next_unit = 'mins';\n\t\t\t\t\t}\n\n\t\t\t\t\techo '<div style=\"float: left; margin: 0 0 0 10px; text-align: center;\">';\n\t\t\t\t\techo '<h2>' . $next_job_in . ' <sub>' . $next_unit . '</sub></h2>';\n\t\t\t\t\techo '<p style=\"font-size: 90%; color: #FFF;\"><em>Time To Next Scheduled Task</em></p>';\n\t\t\t\t\techo '</div>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$system_path = phoromatic_server::phoromatic_account_system_path($_SESSION['AccountID'], $row['SystemID']);\n\t\t\tif(is_file($system_path . 'sensors-pool.json'))\n\t\t\t{\n\t\t\t\t$sensors = file_get_contents($system_path . 'sensors-pool.json');\n\t\t\t\t$sensors = json_decode($sensors, true);\n\n\t\t\t\techo '<div style=\"float: right; margin: 0 10px 0 10px;\">';\n\t\t\t\t$g_count = 0;\n\t\t\t\tforeach(array('CPU Usage', 'Memory Usage', 'CPU Temperature', 'System Temperature', 'GPU Temperature', 'Swap Usage', 'System Iowait', 'CPU Frequency') as $s)\n\t\t\t\t{\n\t\t\t\t\tif(!isset($sensors[$s]) || !isset($sensors[$s]['values']) || count($sensors[$s]['values']) < 5)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$g_count++;\n\n\t\t\t\t\tif($g_count <= 3)\n\t\t\t\t\t{\n\t\t\t\t\t\t$graph = new pts_sys_graph(array('title' => $s, 'x_scale' => 'm', 'y_scale' => $sensors[$s]['unit'], 'text_size' => 10, 'reverse_x_direction' => false, 'width' => 300, 'height' => 120, 'text_color' => '#000000', 'paint_color' => '#D95D04', 'background_color' => '#ffffff', 'shade_color' => '#ffffff'));\n\t\t\t\t\t\t$graph->render_base();\n\t\t\t\t\t\t$svg_dom = $graph->render_graph_data($sensors[$s]['values']);\n\t\t\t\t\t\tif($svg_dom === false)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$output_type = 'SVG';\n\t\t\t\t\t\t$graph = $svg_dom->output(null, $output_type);\n\t\t\t\t\t\techo substr($graph, strpos($graph, '<svg'));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\techo '</div>';\n\t\t\t}\n\n\t\t\techo '<hr style=\"width: ' . $row['TaskPercentComplete'] . '%;\" />';\n\t\t\techo '</div></a>';\n\n\t\t}\n\t\techo '</div>';\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2015 - 2016, Phoronix Media\n\tCopyright (C) 2015 - 2016, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_local_suites implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Local Test Suite';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$suite_dir = phoromatic_server::phoromatic_account_suite_path($_SESSION['AccountID']);\n\t\t$main = '<h1>Local Suites</h1><p>These are test suites created by you or another account within your group. Suites are an easy collection of test profiles. New suits can be trivially made via the <a href=\"/?build_suite\">build suite</a> page.</p>';\n\n\t\tif(!PHOROMATIC_USER_IS_VIEWER && isset($PATH[0]) && $PATH[0] == 'delete')\n\t\t{\n\t\t\tforeach(explode(',', $PATH[1]) as $id)\n\t\t\t{\n\t\t\t\tif(is_file($suite_dir . $id . '/suite-definition.xml'))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<p><strong>Deleting:</strong> ' . $id . '</p>';\n\t\t\t\t\tunlink($suite_dir . $id . '/suite-definition.xml');\n\t\t\t\t\tpts_file_io::delete($suite_dir . $id, null, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$suite_count = 0;\n\t\tforeach(pts_file_io::glob($suite_dir . '*/suite-definition.xml') as $xml_path)\n\t\t{\n\t\t\t$suite_count++;\n\t\t\t$id = basename(dirname($xml_path));\n\t\t\t$test_suite = new pts_test_suite($xml_path);\n\n\t\t\t$main .= '<a name=\"' . $id . '\"></a><h1>' . $test_suite->get_title() . ' [' . $id . ']</h1>';\n\t\t\t$main .= '<p><strong>' . $test_suite->get_maintainer() . '</strong></p>';\n\t\t\t$main .= '<p><em>' . $test_suite->get_description() . '</em></p>';\n\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t{\n\t\t\t\t$main .= '<p><a href=\"?build_suite/' . $id . '\">Edit Suite</a> - <a href=\"?local_suites/delete/' . $id . '\">Delete Suite</a></p>';\n\t\t\t}\n\t\t\t$main .= '<div style=\"max-height: 400px; width: 80%; overflow-y: scroll;\">';\n\t\t\t$test_suite->sort_contained_tests();\n\t\t\tforeach($test_suite->get_contained_test_result_objects() as $tro)\n\t\t\t{\n\t\t\t\t$main .= '<h3>' . $tro->test_profile->get_title() . ' [' . $tro->test_profile->get_identifier() . ']</h3>';\n\t\t\t\t$main .= '<p>' . $tro->get_arguments_description() . '</p>';\n\t\t\t}\n\t\t\t$main .= '</div>';\n\t\t\t$main .= '<hr />';\n\t\t}\n\n\t\tif($suite_count == 0)\n\t\t\t$main .= '<h1>No Test Suites Found</h1>';\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2021, Phoronix Media\n\tCopyright (C) 2008 - 2021, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_logs implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Logs';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$main = null;\n\t\tif(isset($PATH[0]))\n\t\t{\n\t\t\tif($PATH[0] == 'context' && isset($PATH[1]))\n\t\t\t{\n\t\t\t\t$attribs = explode(',', $PATH[1]);\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT UserContextStep, UserContextLog FROM phoromatic_system_context_logs WHERE AccountID = :account_id AND ScheduleID = :schedule_id AND SystemID = :system_id AND TriggerID = :trigger_id ORDER BY UploadTime ASC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':system_id', $attribs[0]);\n\t\t\t\t$stmt->bindValue(':schedule_id', $attribs[1]);\n\t\t\t\t$stmt->bindValue(':trigger_id', base64_decode($attribs[2]));\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\twhile($row = $result->fetchArray())\n\t\t\t\t{\n\t\t\t\t\t$main .= '<h2>' . $row['UserContextStep'] . '</h2><p>' . str_replace(PHP_EOL, '<br />', $row['UserContextLog']) . '</p><hr />';\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in(null));\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2015, Phoronix Media\n\tCopyright (C) 2008 - 2015, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_main implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Main';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tprotected static function result_match($schedule_id, $system_id, $date)\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT PPRID FROM phoromatic_results WHERE AccountID = :account_id AND ScheduleID = :schedule_id AND SystemID = :system_id AND Trigger = :trigger LIMIT 1');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$stmt->bindValue(':schedule_id', $schedule_id);\n\t\t$stmt->bindValue(':system_id', $system_id);\n\t\t$stmt->bindValue(':trigger', $date);\n\t\t$result = $stmt->execute();\n\t\treturn $result && ($row = $result->fetchArray()) ? $row['PPRID'] : false;\n\t}\n\tprotected static function system_info($system_id, $info = '*')\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT ' . $info . ' FROM phoromatic_systems WHERE AccountID = :account_id AND SystemID = :system_id LIMIT 1');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$stmt->bindValue(':system_id', $system_id);\n\t\t$result = $stmt->execute();\n\t\treturn $result && ($row = $result->fetchArray()) ? $row : false;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\techo phoromatic_webui_header_logged_in();\n\t\t$main = null;\n\t\t/*\n\t\tif(pts_network::internet_support_available())\n\t\t{\n\t\t\t// Check For pts-core updates\n\t\t\t$latest_reported_version = pts_network::http_get_contents('http://www.phoronix-test-suite.com/LATEST_CORE');\n\t\t\tif(is_numeric($latest_reported_version) && $latest_reported_version > PTS_CORE_VERSION)\n\t\t\t{\n\t\t\t\t\t// New version of PTS is available\n\t\t\t\t$main .= '<p style=\"font-weight: 600; color: #ccc;\">An outdated version of the Phoronix Test Suite / Phoromatic is currently installed.' . PHP_EOL . 'The version in use is v' . PTS_VERSION . ' (v' . PTS_CORE_VERSION . '), but the latest is pts-core v' . $latest_reported_version . '. Visit <a href=\"http://www.phoronix-test-suite.com/\">Phoronix-Test-Suite.com</a> to update this software.</strong>';\n\t\t\t}\n\t\t}\n\t\t*/\n\t\t$main .= '<h1>Phoromatic</h1>';\n\n\t\t$main .= phoromatic_systems_needing_attention();\n\n\t\t$main_page_message = phoromatic_server::read_setting('main_page_message');\n\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t{\n\t\t\t$main .= '<p>To get started with your new account, the basic steps to get started include:</p>\n\t\t\t\t<ol>\n\t\t\t\t\t<li>Connect/sync the Phoronix Test Suite client systems (the systems to be benchmarked) to this account. In the simplest form, you just need to run the following command on the test systems: <strong style=\"font-weight: 800;\">phoronix-test-suite phoromatic.connect ' . phoromatic_web_socket_server_addr() . '</strong>. For more information view the instructions on the <a href=\"?systems\">systems page</a>.</li>\n\t\t\t\t\t<li>Configure your <a href=\"?settings\">account settings</a>.</li>\n\t\t\t\t\t<li><a href=\"?schedules\">Create a test schedule</a>. A schedule is for running test(s) on selected system(s) on a routine, timed basis or whenever a custom trigger is passed to the Phoromatic server. A test schedule could be for running benchmarks on a daily basis, whenever a new Git commit is applied to a code-base, or other events occurred. You can also enrich the potential by adding pre/post-test hooks for ensuring the system is set to a proper state for benchmarking. Alternatively, you can <a href=\"?benchmark\">create a benchmark ticket</a> for one-time testing on one or more systems.</li>\n\t\t\t\t\t<li>View the automatically generated <a href=\"?results\">test results</a>.</li>';\n\n\t\t\tif(!empty($main_page_message))\n\t\t\t\t$main .= '<li><strong>' . $main_page_message . '</strong></li>';\n\n\t\t\t$main .= '</ol>';\n\n\t\t}\n\t\telse if(!empty($main_page_message))\n\t\t{\n\t\t\t$main .= '<p><strong>' . $main_page_message . '</strong></p>';\n\t\t}\n\n\t\t$main .= '<hr /><div id=\"phoromatic_fixed_main_table\">';\n\n\t\t$systems_needing_attention = phoromatic_server::systems_appearing_down($_SESSION['AccountID']);\n\t\t$systems_idling = phoromatic_server::systems_idling($_SESSION['AccountID']);\n\t\t$systems_shutdown = phoromatic_server::systems_shutdown($_SESSION['AccountID']);\n\t\t$systems_running_tests = phoromatic_server::systems_running_tests($_SESSION['AccountID']);\n\n\t\t$main .= '<div id=\"phoromatic_main_table_cell\">\n\t\t\t<h2>' . pts_strings::plural_handler(count($systems_running_tests), 'System') . ' Running Tests</h2>\n\t\t\t<h2>' . pts_strings::plural_handler(count($systems_idling), 'System') . ' Idling</h2>\n\t\t\t<h2>' . pts_strings::plural_handler(count($systems_shutdown), 'System') . ' Shutdown</h2>\n\t\t\t<h2>' . pts_strings::plural_handler(count($systems_needing_attention), 'System') . ' Needing Attention</h2>';\n\t\t$main .= '<hr /><h2>Systems Running Tests</h2>';\n\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 AND CurrentTask NOT LIKE \\'%Idling%\\' AND CurrentTask NOT LIKE \\'%Shutdown%\\' ORDER BY LastCommunication DESC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\n\t\twhile($result && $row = $result->fetchArray())\n\t\t{\n\t\t\t$main .= '<div class=\"phoromatic_overview_box\">';\n\t\t\t$main .= '<h1><a href=\"?systems/' . $row['SystemID'] . '\">' . $row['Title'] . '</a></h1>';\n\t\t\t$main .= $row['CurrentTask'] . '<br />';\n\n\t\t\tif(!empty($row['CurrentProcessSchedule']))\n\t\t\t{\n\t\t\t\t$main .= '<a href=\"?schedules/' . $row['CurrentProcessSchedule'] . '\">' . phoromatic_server::schedule_id_to_name($row['CurrentProcessSchedule']) . '</a><br />';\n\t\t\t}\n\n\t\t\tif(!empty($row['CurrentProcessSchedule']))\n\t\t\t{\n\t\t\t\t$main .= ' - <a href=\"/?schedules/' . $row['CurrentProcessSchedule'] . '\">' . phoromatic_server::schedule_id_to_name($row['CurrentProcessSchedule']) . '</a><br />';\n\t\t\t}\n\t\t\telse if(!empty($row['CurrentProcessTicket']))\n\t\t\t{\n\t\t\t\t$main .= '   <a href=\"/?benchmark/' . $row['CurrentProcessTicket'] . '/&view_log=' . $row['SystemID'] . '\">' . phoromatic_server::ticket_id_to_name($row['CurrentProcessTicket']) . '</a><br />';\n\t\t\t}\n\n\t\t\t$time_remaining = phoromatic_compute_estimated_time_remaining($row['EstimatedTimeForTask'], $row['LastCommunication']);\n\t\t\tif($time_remaining)\n\t\t\t{\n\t\t\t\t$main .= '<em>~ ' . pts_strings::plural_handler($time_remaining, 'Minute') . ' Remaining</em>';\n\t\t\t}\n\t\t\t$main .= '</div>';\n\t\t}\n\t\t$main .= '</div>';\n\n\t\t$results_today = phoromatic_server::test_results($_SESSION['AccountID'], strtotime('today'));\n\t\t$results_total = phoromatic_server::test_results_benchmark_count($_SESSION['AccountID']);\n\t\t$schedules_today = phoromatic_server::schedules_today($_SESSION['AccountID']);\n\t\t$schedules_total = phoromatic_server::schedules_total($_SESSION['AccountID']);\n\t\t$benchmark_tickets_today = phoromatic_server::benchmark_tickets_today($_SESSION['AccountID']);\n\t\t$main .= '<div id=\"phoromatic_main_table_cell\">\n\t\t<h2>' . pts_strings::plural_handler(count($schedules_today), 'Schedule') . ' Active Today</h2>\n\t\t<h2>' . pts_strings::plural_handler(count($schedules_total), 'Schedule') . ' In Total</h2>\n\t\t<h2>' . pts_strings::plural_handler(count($benchmark_tickets_today), 'Active Benchmark Ticket') . '</h2>\n\t\t<h2>' . pts_strings::plural_handler(count($results_today), 'Test Result') . ' Today / ' . pts_strings::plural_handler($results_total, 'Benchmark Result') . ' Total</h2>';\n\t\t$main .= '<hr /><h2>Today\\'s Scheduled Tests</h2>';\n\n\t\tforeach($schedules_today as &$row)\n\t\t{\n\t\t\t$systems_for_schedule = phoromatic_server::systems_associated_with_schedule($_SESSION['AccountID'], $row['ScheduleID']);\n\n\t\t\t$extra_css = null;\n\t\t\tif(empty($systems_for_schedule))\n\t\t\t{\n\t\t\t\t$extra_css = ' opacity: 0.4;';\n\t\t\t}\n\n\t\t\tlist($h, $m) = explode('.', $row['RunAt']);\n\n\t\t\t$main .= '<div style=\"' . $extra_css . '\" class=\"phoromatic_overview_box\">';\n\t\t\t$main .= '<h1><a href=\"?schedules/' . $row['ScheduleID'] . '\">' . $row['Title'] . '</a></h1>';\n\n\t\t\tif(!empty($systems_for_schedule))\n\t\t\t{\n\t\t\t\tif($row['RunAt'] > date('H.i'))\n\t\t\t\t{\n\t\t\t\t\t$run_in_future = true;\n\t\t\t\t\t$main .= '<h3>Runs In ' . pts_strings::format_time((($h * 60) + $m) - ((date('H') * 60) + date('i')), 'MINUTES') . '</h3>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$run_in_future = false;\n\t\t\t\t\t$main .= '<h3>Triggered ' . pts_strings::format_time(max(1, (date('H') * 60) + date('i') - (($h * 60) + $m)), 'MINUTES') . ' Ago</h3>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tforeach($systems_for_schedule as $system_id)\n\t\t\t{\n\t\t\t\t$pprid = self::result_match($row['ScheduleID'], $system_id, date('Y-m-d'));\n\n\t\t\t\tif($pprid)\n\t\t\t\t\t$main .= '<a href=\"?result/' . $pprid . '\">';\n\n\t\t\t\t$main .= phoromatic_server::system_id_to_name($system_id);\n\n\t\t\t\tif($pprid)\n\t\t\t\t\t$main .= '</a>';\n\t\t\t\telse if(!$run_in_future)\n\t\t\t\t{\n\t\t\t\t\t$sys_info = self::system_info($system_id);\n\t\t\t\t\t$last_comm_diff = time() - strtotime($sys_info['LastCommunication']);\n\n\t\t\t\t\t$main .= ' <sup><a href=\"?systems/' . $system_id . '\">';\n\t\t\t\t\tif($last_comm_diff > 3600)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<strong>Last Communication: ' . pts_strings::format_time($last_comm_diff, 'SECONDS', true, 60) . ' Ago</strong>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= $sys_info['CurrentTask'];\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</a></sup>';\n\t\t\t\t}\n\t\t\t\t$main .= '<br />';\n\t\t\t}\n\n\t\t\t$main .= '</div>';\n\t\t}\n\t\t$main .= '</div>';\n\n\t\t$main .= '</div>';\n\n\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\t//echo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in());\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2015 - 2016, Phoronix Media\n\tCopyright (C) 2015 - 2016, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_maintenance_table implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'System Maintenance Table';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\techo phoromatic_webui_header_logged_in();\n\n\t\t$main = '<h1>Systems</h1>';\n\t\t$main .= '<p>Various system interaction vitals for the Phoronix Test Suite systems associated with this account.</p>';\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, Hardware, Software, ClientVersion, LastIP, NetworkMAC, LastCommunication, CurrentTask, CoreVersion, NetworkWakeOnLAN, BlockPowerOffs FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 ORDER BY LastCommunication DESC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\n\t\twhile($row = $result->fetchArray())\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT UploadTime FROM phoromatic_results WHERE AccountID = :account_id AND SystemID = :system_id ORDER BY UploadTime DESC LIMIT 1');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $row['SystemID']);\n\t\t\t$latest_result = $stmt->execute();\n\t\t\t$latest_result = $latest_result->fetchArray();\n\t\t\t$latest_result = $latest_result['UploadTime'];\n\n\t\t\t$components[$row['SystemID']]['Last Communication'] = date('H:i d F', strtotime($row['LastCommunication']));\n\t\t\t$components[$row['SystemID']]['Current Task'] = $row['CurrentTask'];\n\t\t\t$components[$row['SystemID']]['Last IP'] = $row['LastIP'];\n\t\t\t$components[$row['SystemID']]['Phoronix Test Suite'] = $row['ClientVersion'] . ' [' . $row['CoreVersion'] . ']';\n\t\t\t$components[$row['SystemID']]['MAC'] = $row['NetworkMAC'];\n\t\t\t$components[$row['SystemID']]['Wake-On-LAN'] = (empty($row['NetworkWakeOnLAN']) ? 'N/A' : $row['NetworkWakeOnLAN']) . ' - ' . ($row['BlockPowerOffs'] == 1 ? 'Blocked' : 'Permitted');\n\t\t\t$components[$row['SystemID']]['Latest Result Upload'] = $latest_result != null ? date('d F', strtotime($latest_result)) : 'N/A';\n\t\t\t$system_ids[$row['SystemID']] = $row['Title'];\n\t\t}\n\n\t\t$main .= '<div style=\"margin: 10px auto; overflow: auto;\"><table width=\"100%\">';\n\t\t$component_types = array('Last Communication', 'Current Task', 'Phoronix Test Suite', 'Last IP', 'MAC', 'Wake-On-LAN', 'Latest Result Upload');\n\t\t$main .= '<tr><th>&nbsp;</th>';\n\t\tforeach($component_types as $type)\n\t\t{\n\t\t\t$main .= '<th>' . $type . '</th>';\n\t\t}\n\t\tforeach($components as $system_id => $component_array)\n\t\t{\n\t\t\t$main .= '<tr>';\n\t\t\t$main .= '<th><a href=\"/?systems/' . $system_id . '\">' . $system_ids[$system_id] . '</a></th>';\n\t\t\tforeach($component_types as $type)\n\t\t\t{\n\t\t\t\t$c = (isset($component_array[$type]) ? $component_array[$type] : 'N/A');\n\t\t\t\tif(($x = stripos($c, ' @ ')) !== false)\n\t\t\t\t{\n\t\t\t\t\t$c = substr($c, 0, $x);\n\t\t\t\t}\n\t\t\t\tif(($x = stripos($c, ' (')) !== false)\n\t\t\t\t{\n\t\t\t\t\t$c = substr($c, 0, $x);\n\t\t\t\t}\n\n\t\t\t\t$main .= '<td>' . $c . '</td>';\n\t\t\t}\n\n\t\t\t$main .= '</tr>';\n\n\n\t\t}\n\t\t$main .= '</table></div>';\n\n\t\t$right = null;\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in($right));\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2015, Phoronix Media\n\tCopyright (C) 2015, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_password implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Password Management';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\tif(isset($_POST['register_password']) && isset($_POST['register_password_confirm']) && isset($_POST['old_password']))\n\t\t{\n\t\t\t$matching_user = phoromatic_server::$db->querySingle('SELECT Password FROM phoromatic_users WHERE UserName = \\'' . $_SESSION['UserName'] . '\\' AND AccountID = \\'' . $_SESSION['AccountID'] . '\\'', true);\n\n\t\t\tif(!empty($matching_user))\n\t\t\t{\n\t\t\t\t$hashed_password = $matching_user['Password'];\n\t\t\t\t$account_salt = phoromatic_server::$db->querySingle('SELECT Salt FROM phoromatic_accounts WHERE AccountID = \\'' . $_SESSION['AccountID'] . '\\'');\n\n\t\t\t\tif($account_salt != null && hash('sha256', $account_salt . $_POST['old_password']) == $hashed_password)\n\t\t\t\t{\n\t\t\t\t\tif(strlen($_POST['register_password']) < 6)\n\t\t\t\t\t{\n\t\t\t\t\t\tphoromatic_error_page('Oops!', 'Please go back and ensure the supplied password is at least six characters long.');\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif($_POST['register_password'] != $_POST['register_password_confirm'])\n\t\t\t\t\t{\n\t\t\t\t\t\tphoromatic_error_page('Oops!', 'Please go back and ensure the supplied password matches the password confirmation.');\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t$new_salted_password = hash('sha256', $account_salt . $_POST['register_password']);\n\t\t\t\t\tphoromatic_server::$db->exec('UPDATE phoromatic_users SET Password = \\'' . $new_salted_password . '\\' WHERE UserName = \"' . $_SESSION['UserName'] . '\"');\n\t\t\t\t\techo '<h1>Password Updated!</h1>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tphoromatic_error_page('Oops!', 'The original password does not match the records for this account.');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tphoromatic_error_page('Oops!', 'Problem fetching user information. Try again.');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\t$main = '<h1>Change Password</h1>\n\t\t<form name=\"reset_password\" id=\"reset_password\" action=\"?password\" method=\"post\" onsubmit=\"return phoromatic_password_reset(this);\">\n\t\t<div style=\"clear: both;\">\n\t\t\t<div style=\"float: left; font-weight: bold; padding-right: 10px;\">\n\t\t\t<p style=\"height: 50px;\">Password</p>\n\t\t\t<p style=\"height: 50px;\">New Password</p>\n\t\t\t<p style=\"height: 50px;\">Confirm New Password</p>\n\t\t\t</div>\n\n\t\t\t<div style=\"float: left;\">\n\t\t\t<p style=\"height: 50px;\"><input type=\"password\" name=\"old_password\" /></p>\n\t\t\t<p style=\"height: 50px;\"><input type=\"password\" name=\"register_password\" /> <sup>1</sup></p>\n\t\t\t<p style=\"height: 50px;\"><input type=\"password\" name=\"register_password_confirm\" /></p>\n\t\t\t<p style=\"height: 50px;\"><input type=\"submit\" value=\"Change Password\" /></p>\n\t\t\t</div>\n\t\t</div>\n\t\t<p style=\"clear: both;\"><sup>1</sup> Passwords shall be at least six characters long.</p>';\n\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in());\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2021, Phoronix Media\n\tCopyright (C) 2014 - 2021, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_r_add_test_build_suite_details implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn '';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$test_profile = new pts_test_profile($_GET['tp']);\n\t\t$name = $test_profile->get_title();\n\t\t$description = $test_profile->get_description();\n\n\t\t$tid = 't_' . rand(1, 20000);\n\t\techo '<div id=\"' . $tid . '\">';\n\t\techo '<p align=\"right\"><a onclick=\"javascript:phoromatic_remove_from_suite_list(\\'' . $tid  . '\\');\">Remove Test</a></p>';\n\t\techo '<h2>' . $name . ' [' . $test_profile->get_identifier() . '] </h2>';\n\t\techo '<p><em>' . $description . '</em></p>';\n\t\tif(!empty($supported_os = $test_profile->get_supported_platforms()))\n\t\t{\n\t\t\techo '<p>This test is supported on <strong>' . implode(', ', $supported_os) . '</strong>.</p>';\n\t\t}\n\t\techo '<p>More information on this test can be found via <a href=\"?tests/' . $test_profile->get_identifier() . '\">the test profile page</a> or <a target=\"_blank\" href=\"http://openbenchmarking.org/test/' . $test_profile->get_identifier() . '\">OpenBenchmarking.org</a>.</p>';\n\n\t\t$test_options = $test_profile->get_test_option_objects();\n\n\t\techo '<input type=\"hidden\" name=\"test_add[]\" value=\"' . $test_profile->get_identifier() . '\" />';\n\t\t$test_prefix = \"test_option_\" . str_replace('.', '-', microtime(true)) . \"_\";\n\t\techo '<input type=\"hidden\" name=\"test_prefix[]\" value=\"' . $test_prefix . '\" />';\n\n\t\tif(count($test_options) == 0)\n\t\t{\n\t\t\techo '<p><strong>No configurable user options for this test.</strong></p>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor($i = 0; $i < count($test_options); $i++)\n\t\t\t{\n\t\t\t\t$o = $test_options[$i];\n\t\t\t\t$option_count = $o->option_count();\n\n\t\t\t\techo '<p id=\"' . $test_prefix . $o->get_identifier() . '_name\">' . $o->get_name() . '</p>';\n\n\t\t\t\tif($option_count == 0)\n\t\t\t\t{\n\t\t\t\t\techo '<p><input type=\"text\" name=\"' . $test_prefix . $o->get_identifier() . '\" id=\"' . $test_prefix . $o->get_identifier() . '\" /></p>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\techo '<p><select name=\"' . $test_prefix . $o->get_identifier() . '\" id=\"' . $test_prefix . $o->get_identifier() . '\" onChange=\"phoromatic_test_select_update_selected_name(this);\" onload=\"phoromatic_test_select_update_selected_name(this);\">';\n\n\t\t\t\t\t$opts = array();\n\t\t\t\t\t$selected_index = 0;\n\t\t\t\t\tfor($j = 0; $j < $option_count; $j++)\n\t\t\t\t\t{\n\t\t\t\t\t\t$v = $o->format_option_value_from_input($o->get_option_value($j));\n\t\t\t\t\t\t$selected = isset($_GET['tpa']) && strpos($_GET['tpa'], $o->get_option_name($j)) !== false;\n\t\t\t\t\t\tif($selected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$selected_index = $j;\n\t\t\t\t\t\t}\n\t\t\t\t\t\techo '<option value=\"' . $v . '\" ' . ($selected ? 'selected=\"selected\"' : null) . '>' . $o->get_option_name($j) . '</option>';\n\t\t\t\t\t\t$opts[] = $o->get_name() . ': ' . $o->get_option_name($j) . '::' . $v;\n\t\t\t\t\t}\n\t\t\t\t\tif($j > 1)\n\t\t\t\t\t{\n\t\t\t\t\t\techo '<option value=\"' . implode('||', $opts) . '\">Test All Options</option>';\n\t\t\t\t\t}\n\n\t\t\t\t\techo '</select></p>';\n\t\t\t\t\techo '<input name=\"' . $test_prefix . $o->get_identifier() . '_selected\" id=\"' . $test_prefix . $o->get_identifier() . '_selected\" type=\"hidden\" value=\"' . $o->get_name() . ': ' . $o->get_option_name($selected_index) . '\" />';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\techo '<hr />';\n\t\techo '</div>';\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2021, Phoronix Media\n\tCopyright (C) 2021, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_r_basic_suite_details implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn '';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$ts = $_GET['ts'];\n\t\t$ts_file = phoromatic_server::find_suite_file($_SESSION['AccountID'], $ts);\n\t\t$test_suite = new pts_test_suite($ts_file);\n\t\t$name = $test_suite->get_title();\n\t\t$description = $test_suite->get_description();\n\n\t\techo '<h2>' . $name . '</h2>';\n\t\techo '<p><em>' . $description . '</em></p>';\n\t\t$test_suite->sort_contained_tests();\n\t\tforeach($test_suite->get_contained_test_result_objects() as $tro)\n\t\t{\n\t\t\techo '<p><strong>' . $tro->test_profile->get_title() . ' [' . $tro->test_profile->get_identifier() . ']</strong><br />';\n\t\t\techo $tro->get_arguments_description() . '</p>' . PHP_EOL;\n\t\t}\n\t\tif(stripos($_SERVER['HTTP_REFERER'], '?schedules') !== false)\n\t\t{\n\t\t\techo '<input type=\"hidden\" name=\"suite_add\" value=\"' . $ts . '\" />';\n\t\t\techo '<br /><br /><p><input name=\"submit\" value=\"Add\" type=\"submit\" onclick=\"\" /></p>';\n\t\t}\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2021, Phoronix Media\n\tCopyright (C) 2008 - 2021, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_result implements pts_webui_interface\n{\n\tprotected static $schedule_id = false;\n\n\tpublic static function page_title()\n\t{\n\t\treturn 'Result';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$main = null;\n\t\tif(isset($PATH[0]))\n\t\t{\n\t\t\t$upload_ids = explode(',', $PATH[0]);\n\n\t\t\tforeach($upload_ids as $i => &$upload_id)\n\t\t\t{\n\t\t\t\tif(($x = strpos($upload_id, '&')) !== false)\n\t\t\t\t{\n\t\t\t\t\t$upload_id = substr($upload_id, 0, $x);\n\t\t\t\t}\n\t\t\t\tif(isset($upload_id[5]) && substr($upload_id, 0, 2) == 'S:')\n\t\t\t\t{\n\t\t\t\t\t$t = explode(':', $upload_id);\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT UploadID, UploadTime FROM phoromatic_results WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY UploadTime DESC');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt->bindValue(':schedule_id', $t[1]);\n\t\t\t\t\t$test_result_result = $stmt->execute();\n\t\t\t\t\t$cutoff_time = is_numeric($t[2]) ? strtotime('today -' . $t[2] . ' days') : false;\n\t\t\t\t\twhile($test_result_row = $test_result_result->fetchArray())\n\t\t\t\t\t{\n\t\t\t\t\t\tif($cutoff_time !== false && strtotime($test_result_row['UploadTime']) < $cutoff_time)\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t$upload_ids[] = $test_result_row['UploadID'];\n\t\t\t\t\t}\n\n\t\t\t\t\tunset($upload_ids[$i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$upload_ids = array_unique($upload_ids);\n\n\t\t\t$result_files = array();\n\t\t\t$display_rows = array();\n\t\t\t$system_types = array();\n\t\t\t$schedule_types = array();\n\t\t\t$trigger_types = array();\n\t\t\t$benchmark_tickets = array();\n\t\t\t$tickets = array();\n\t\t\t$showed_progress_msg = false;\n\n\t\t\tforeach($upload_ids as $id)\n\t\t\t{\n\t\t\t\t$result_share_opt = phoromatic_server::read_setting('force_result_sharing') ? '1 = 1' : 'AccountID = (SELECT AccountID FROM phoromatic_account_settings WHERE LetOtherGroupsViewResults = \"1\" AND AccountID = phoromatic_results.AccountID)';\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_results WHERE PPRID = :pprid AND (AccountID = :account_id OR ' . $result_share_opt . ') LIMIT 1');\n\t\t\t\t$stmt->bindValue(':pprid', $id);\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\tif(empty($row))\n\t\t\t\t\tcontinue;\n\n\t\t\t\t$composite_xml = phoromatic_server::phoromatic_account_result_path($row['AccountID'], $row['UploadID']) . 'composite.xml';\n\t\t\t\tif(!is_file($composite_xml))\n\t\t\t\t{\n\t\t\t\t\techo 'File Not Found: ' . $composite_xml;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t$has_system_logs = is_file(phoromatic_server::phoromatic_account_result_path($_SESSION['AccountID'], $row['UploadID']) . 'system-logs.zip') ? $row['UploadID'] : false;\n\t\t\t\t$display_rows[$composite_xml] = $row;\n\t\t\t\tpts_arrays::unique_push($benchmark_tickets, $row['BenchmarkTicketID']);\n\t\t\t\tpts_arrays::unique_push($system_types, $row['SystemID']);\n\t\t\t\tpts_arrays::unique_push($schedule_types, $row['ScheduleID']);\n\t\t\t\tpts_arrays::unique_push($trigger_types, $row['Trigger']);\n\t\t\t\tpts_arrays::unique_push($tickets, $row['BenchmarkTicketID']);\n\n\t\t\t\tif($row['InProgress'] > 0 && !$showed_progress_msg)\n\t\t\t\t{\n\t\t\t\t\t$showed_progress_msg = true;\n\t\t\t\t\t$main .= '<p align=\"center\"><strong style=\"color: red;\">The result file being shown is still undergoing testing, results being shown for completed results.</strong></p>';\n\t\t\t\t}\n\n\t\t\t\t// Update view counter\n\t\t\t\t$stmt_view = phoromatic_server::$db->prepare('UPDATE phoromatic_results SET TimesViewed = (TimesViewed + 1) WHERE AccountID = :account_id AND UploadID = :upload_id');\n\t\t\t\t$stmt_view->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt_view->bindValue(':upload_id', $row['UploadID']);\n\t\t\t\t$stmt_view->execute();\n\t\t\t}\n\n\t\t\t$result_file_title = null;\n\t\t\tif(count($system_types) == 1)\n\t\t\t{\n\t\t\t\t$result_file_title = phoromatic_system_id_to_name($system_types[0]) . ' Tests';\n\t\t\t}\n\n\t\t\tif(!empty($tickets) && $tickets[0] != null)\n\t\t\t{\n\t\t\t\t$system_name_format = 'ORIGINAL_DATA';\n\t\t\t}\n\t\t\telse if(count($trigger_types) == 1 && $trigger_types[0] != null && $benchmark_tickets[0] != null && count($display_rows) > 1)\n\t\t\t{\n\t\t\t\t$system_name_format = 'TRIGGER_AND_SYSTEM';\n\t\t\t}\n\t\t\telse if(empty($schedule_types[0]))\n\t\t\t{\n\t\t\t\t$system_name_format = 'ORIGINAL_DATA';\n\t\t\t}\n\t\t\telse if(count($display_rows) == 1)\n\t\t\t{\n\t\t\t\t$system_name_format = 'SYSTEM_NAME';\n\t\t\t}\n\t\t\telse if(count($schedule_types) == 1 && count($system_types) == 1)\n\t\t\t{\n\t\t\t\t$system_name_format = 'TRIGGER';\n\t\t\t\t$result_file_title = phoromatic_schedule_id_to_name($schedule_types[0]);\n\t\t\t}\n\t\t\telse if(count($schedule_types) == 1)\n\t\t\t{\n\t\t\t\t$system_name_format = 'TRIGGER_AND_SYSTEM';\n\t\t\t}\n\t\t\telse if(false && count($trigger_types) == 1)\n\t\t\t{\n\t\t\t\t// TODO XXX: this approach yields garbage strings generally without refining the selector\n\t\t\t\t// i.e. first make sure all the schedules match or are comparable\n\t\t\t\t$system_name_format = 'SYSTEM_AND_SCHEDULE';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$system_name_format = null;\n\t\t\t}\n\n\t\t\tif(count($schedule_types) == 1 && $schedule_types[0] != 0)\n\t\t\t{\n\t\t\t\tself::$schedule_id = $schedule_types[0];\n\t\t\t}\n\n\t\t\tif(count($display_rows) == 1)\n\t\t\t{\n\t\t\t\t// Rather than going through the merge logic and all that, when just one result file, present as is\n\t\t\t\t$result_file = new pts_result_file(array_pop(array_keys($display_rows)), true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tforeach($display_rows as $composite_xml => $row)\n\t\t\t\t{\n\t\t\t\t\tswitch($system_name_format)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase 'ORIGINAL_DATA':\n\t\t\t\t\t\t\t$system_name = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'SYSTEM_NAME':\n\t\t\t\t\t\t\t$system_name = phoromatic_system_id_to_name($row['SystemID']);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'TRIGGER':\n\t\t\t\t\t\t\t$system_name = $row['Trigger'];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'TRIGGER_AND_SYSTEM':\n\t\t\t\t\t\t\t$system_name = phoromatic_system_id_to_name($row['SystemID']) . ': ' . $row['Trigger'];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'SYSTEM_AND_SCHEDULE':\n\t\t\t\t\t\t\t$system_name = phoromatic_schedule_id_to_name($row['ScheduleID']) . ': ' . $row['Trigger'];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$system_name = phoromatic_system_id_to_name($row['SystemID']) . ' - ' . phoromatic_schedule_id_to_name($row['ScheduleID']) . ' - ' . $row['Trigger'];\n\t\t\t\t\t}\n\n\t\t\t\t\tif($system_name == null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$rf = new pts_result_file($composite_xml);\n\t\t\t\t\t\t$identifiers = $rf->get_system_identifiers();\n\t\t\t\t\t\tif(count($identifiers) == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$system_name = $identifiers[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(($replacement = phoromatic_system_id_to_name($row['SystemID'])) != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$system_name = str_replace('.SYSTEM', $replacement, $system_name);\n\t\t\t\t\t}\n\t\t\t\t\tif(($replacement = phoromatic_account_id_to_group_name($row['AccountID'])) != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$system_name = str_replace('.GROUP', $replacement, $system_name);\n\t\t\t\t\t}\n\t\t\t\t\t$system_variables = explode(';', phoromatic_server::system_id_variables($row['SystemID'], $row['AccountID']));\n\t\t\t\t\tforeach($system_variables as $var)\n\t\t\t\t\t{\n\t\t\t\t\t\t$var = explode('=', $var);\n\t\t\t\t\t\tif(count($var) == 2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$system_name = str_replace('.' . $var[0], $var[1], $system_name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$rf = new pts_result_file($composite_xml);\n\t\t\t\t\t$rf->rename_run(null, $system_name);\n\t\t\t\t\t$result_files[] = $rf;\n\t\t\t\t}\n\n\t\t\t\t$result_file = new pts_result_file(null, true);\n\t\t\t\tif(!empty($result_files))\n\t\t\t\t{\n\t\t\t\t\t$attributes = array('new_result_file_title' => $result_file_title);\n\t\t\t\t\tif(!empty($result_files))\n\t\t\t\t\t{\n\t\t\t\t\t\t$result_file->merge($result_files, $attributes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$embed = new pts_result_viewer_embed($result_file);\n\t\t\t$embed->allow_modifying_results(!PHOROMATIC_USER_IS_VIEWER);\n\t\t\t$embed->allow_deleting_results(!PHOROMATIC_USER_IS_VIEWER);\n\t\t\t$embed->show_html_result_table(false);\n\t\t\t$embed->show_test_metadata_helper(false);\n\t\t\t$embed->include_page_print_only_helpers(false);\n\t\t\t$main .= $embed->get_html();\n\t\t}\n\n\t\t$right = null;\n\t\tif(self::$schedule_id && !empty(self::$schedule_id))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_schedules WHERE AccountID = :account_id AND ScheduleID = :schedule_id LIMIT 1');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':schedule_id', self::$schedule_id);\n\t\t\t$result = $stmt->execute();\n\t\t\t$row = $result->fetchArray();\n\n\t\t\tif(!empty($row))\n\t\t\t{\n\t\t\t\t$right .= '<h3><a href=\"?schedules/' . $row['ScheduleID'] . '\">' . $row['Title'] . '</a></h3>';\n\n\t\t\t\tif(!empty($row['ActiveOn']))\n\t\t\t\t{\n\n\t\t\t\t\t$right .= '<p align=\"center\"><strong>' . phoromatic_schedule_activeon_string($row['ActiveOn'], $row['RunAt']) . '</strong></p>';\n\t\t\t\t}\n\n\t\t\t\t$right .= '<p>Compare this result file to the latest results from the past: ';\n\t\t\t\t$right .= '<select name=\"view_results_from_past\" id=\"view_results_from_past\" onchange=\"phoromatic_jump_to_results_from(\\'' . $row['ScheduleID'] . '\\', \\'view_results_from_past\\', \\'' . $PATH[0] . ',\\');\">';\n\t\t\t\t$oldest_upload_time = strtotime(phoromatic_oldest_result_for_schedule(self::$schedule_id));\n\t\t\t\t$opts = array(\n\t\t\t\t\t'Week' => 7,\n\t\t\t\t\t'Three Weeks' => 21,\n\t\t\t\t\t'Month' => 30,\n\t\t\t\t\t'Quarter' => 90,\n\t\t\t\t\t'Six Months' => 180,\n\t\t\t\t\t'Year' => 365,\n\t\t\t\t\t);\n\t\t\t\tforeach($opts as $str_name => $time_offset)\n\t\t\t\t{\n\t\t\t\t\tif($oldest_upload_time > (time() - (86400 * $time_offset)))\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t$right .= '<option value=\"' . $time_offset . '\">' . $str_name . '</option>';\n\t\t\t\t}\n\t\t\t\t$right .= '<option value=\"all\">All Results</option>';\n\t\t\t\t$right .= '</select>';\n\t\t\t\t$right .= '</p>';\n\t\t\t}\n\t\t}\n\t\tif(true)\n\t\t{\n\t\t\t$compare_results = array();\n\t\t\t$hash_matches = 0;\n\t\t\t$ticket_matches = 0;\n\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_results WHERE AccountID = :account_id AND ComparisonHash = :comparison_hash AND PPRID NOT IN (:pprid) ORDER BY UploadTime DESC LIMIT 12');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':comparison_hash', $result_file->get_contained_tests_hash(false));\n\t\t\t$stmt->bindValue(':pprid', implode(',', $upload_ids));\n\t\t\t$result = $stmt->execute();\n\t\t\twhile($row = $result->fetchArray())\n\t\t\t{\n\t\t\t\t$compare_results[$row['PPRID']] = $row;\n\t\t\t\t$hash_matches++;\n\t\t\t}\n\n\t\t\tforeach($benchmark_tickets as $ticket_id)\n\t\t\t{\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_results WHERE AccountID = :account_id AND BenchmarkTicketID = :ticket_id AND PPRID NOT IN (:pprid) ORDER BY UploadTime DESC LIMIT 12');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':ticket_id', $ticket_id);\n\t\t\t\t$stmt->bindValue(':pprid', implode(',', $upload_ids));\n\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\twhile($row = $result->fetchArray())\n\t\t\t\t{\n\t\t\t\t\t$compare_results[$row['PPRID']] = $row;\n\t\t\t\t\t$ticket_matches++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!empty($compare_results))\n\t\t\t{\n\t\t\t\t$right .= '<hr /><h3>Compare Results</h3><form name=\"compare_similar_results\" onsubmit=\"return false;\">\n\t\t\t\t\t\t<input type=\"hidden\" value=\"' . implode(',', $upload_ids) . '\" id=\"compare_similar_results_this\" />';\n\n\t\t\t\tforeach($compare_results as &$row)\n\t\t\t\t{\n\t\t\t\t\t$right .= '<p><input type=\"checkbox\" value=\"' . $row['PPRID'] . '\" name=\"compare_results\" /> ' . $row['Title'] . '<br /><em>' . phoromatic_system_id_to_name($row['SystemID'], $row['AccountID']) . '</em></p>';\n\t\t\t\t}\n\n\t\t\t\t$right .= '<p><input type=\"submit\" value=\"Compare Results\" id=\"compare_results_submit\" onclick=\"javascript:phoromatic_do_custom_compare_results(this); return false;\" /></p></form>';\n\n\t\t\t\tif($ticket_matches > 3)\n\t\t\t\t{\n\t\t\t\t\t$right .= '<p><a href=\"/results/ticket/' . $ticket_id . '\">Find All Matching Results</a>';\n\t\t\t\t}\n\t\t\t\telse if($hash_matches > 3)\n\t\t\t\t{\n\t\t\t\t\t$right .= '<p><a href=\"/results/hash/' . $result_file->get_contained_tests_hash(false) . '\">Find All Matching Results</a>';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(self::$schedule_id && !empty(self::$schedule_id) && $system_types[0] && $trigger_types[0])\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT UserContextStep FROM phoromatic_system_context_logs WHERE AccountID = :account_id AND ScheduleID = :schedule_id AND SystemID = :system_id AND TriggerID = :trigger_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $system_types[0]);\n\t\t\t$stmt->bindValue(':schedule_id', self::$schedule_id);\n\t\t\t$stmt->bindValue(':trigger_id', $trigger_types[0]);\n\t\t\t$result = $stmt->execute();\n\t\t\tif($row = $result->fetchArray())\n\t\t\t{\n\t\t\t\t$right .= '<hr /><h3>User Context Logs</h3>';\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\t$right .= '<p><a href=\"?logs/context/' . $system_types[0] . ',' . self::$schedule_id . ',' . base64_encode($trigger_types[0]) . '\">' . $row['UserContextStep'] . '</a></p>';\n\t\t\t\t}\n\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t}\n\t\t}\n\n\t\t$right .= '<hr /><h3>Result Export</h3>';\n\t\t$right .= '<p><a href=\"/public.php?t=result&ut='  . implode(',', $upload_ids) . '\">Public Viewer</a></p>';\n\n\t\tif($has_system_logs)\n\t\t{\n\t\t//\t\t$right .= '<hr /><p><a href=\"?logs/system/' . $has_system_logs . '\">View System Logs</a></p>';\n\t\t}\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in($right));\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2018, Phoronix Media\n\tCopyright (C) 2008 - 2018, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_results implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Test Schedules';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t\techo phoromatic_webui_header_logged_in();\n\t\t\t$main = null;\n\n\t\t\tif(!PHOROMATIC_USER_IS_VIEWER && isset($PATH[0]) && $PATH[0] == 'delete')\n\t\t\t{\n\t\t\t\t$pprids = explode(',', $PATH[1]);\n\n\t\t\t\tforeach($pprids as $pprid)\n\t\t\t\t{\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_results WHERE AccountID = :account_id AND PPRID = :pprid LIMIT 1');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt->bindValue(':pprid', $pprid);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\tif($result && ($row = $result->fetchArray()))\n\t\t\t\t\t{\n\t\t\t\t\t\t$composite_xml = phoromatic_server::phoromatic_account_result_path($_SESSION['AccountID'], $row['UploadID']) . 'composite.xml';\n\t\t\t\t\t\tif(is_file($composite_xml))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tunlink($composite_xml);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpts_file_io::delete(phoromatic_server::phoromatic_account_result_path($_SESSION['AccountID'], $row['UploadID']), null, true);\n\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_results_results WHERE AccountID = :account_id AND UploadID = :upload_id');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt->bindValue(':upload_id', $row['UploadID']);\n\t\t\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_results_systems WHERE AccountID = :account_id AND UploadID = :upload_id');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt->bindValue(':upload_id', $row['UploadID']);\n\t\t\t\t\t\t$result = $stmt->execute();\n\n\n\t\t\t\t\t}\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_results WHERE AccountID = :account_id AND PPRID = :pprid');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt->bindValue(':pprid', $pprid);\n\t\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\t\t// TODO XXX fix below\n\t\t\t\t\t//$upload_dir = phoromatic_server::phoromatic_account_result_path($_SESSION['AccountID'], $upload_id);\n\t\t\t\t\t//pts_file_io::delete($upload_dir);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($main == null)\n\t\t\t{\n\t\t\t\tif(isset($_POST['result_limit']))\n\t\t\t\t{\n\t\t\t\t\tif(is_numeric($_POST['result_limit']) && $_POST['result_limit'] > 9)\n\t\t\t\t\t{\n\t\t\t\t\t\t$result_limit = $_POST['result_limit'];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$result_limit = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$result_limit = 100;\n\t\t\t\t}\n\t\t\t\t$min_date = strtotime(phoromatic_server::account_created_on($_SESSION['AccountID']));\n\t\t\t\t$default_start_date = max($min_date, strtotime('-1 year'));\n\t\t\t\t$min_date = date('Y-m-d', $min_date);\n\t\t\t\t$time_start = strtotime(isset($_POST['time_start']) && !empty($_POST['time_start']) ? $_POST['time_start'] : $min_date);\n\t\t\t\tif(empty($time_start))\n\t\t\t\t{\n\t\t\t\t\t$time_start = strtotime($min_date);\n\t\t\t\t}\n\t\t\t\t$time_end = strtotime((isset($_POST['time_end']) && !empty($_POST['time_end']) ? $_POST['time_end'] : date('Y-m-d')) . ' 23:59:59');\n\t\t\t\tif(empty($time_end))\n\t\t\t\t{\n\t\t\t\t\t$time_end = strtotime(date('Y-m-d') . ' 23:59:59');\n\t\t\t\t}\n\t\t\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" method=\"post\"><div style=\"text-align: left; font-weight: bold;\">Results From <input id=\"time_start\" name=\"time_start\" type=\"date\" required pattern=\"[0-9]{4}-[0-9]{2}-[0-9]{2}\" min=\"' . $min_date . '\" value=\"' . (isset($_POST['time_start']) ? $_POST['time_start'] : date('Y-m-d', $default_start_date)) . '\" max=\"' . date('Y-m-d') . '\" /> To  <input id=\"time_end\" name=\"time_end\" type=\"date\" required pattern=\"[0-9]{4}-[0-9]{2}-[0-9]{2}\" min=\"' . $min_date . '\" value=\"' . (isset($_POST['time_end']) ? $_POST['time_end'] : date('Y-m-d')) . '\" max=\"' . date('Y-m-d') . '\" /> &nbsp; With Tests: <input type=\"text\" name=\"containing_tests\" id=\"containing_tests\" value=\"' . (isset($_POST['containing_tests']) ? $_POST['containing_tests'] : null) . '\" /> With Hardware: <input type=\"text\" name=\"containing_hardware\" id=\"containing_hardware\" value=\"' . (isset($_POST['containing_hardware']) ? $_POST['containing_hardware'] : null) . '\" /> With System Software: <input type=\"text\" name=\"containing_software\" id=\"containing_software\" value=\"' . (isset($_POST['containing_software']) ? $_POST['containing_software'] : null) . '\" /> Search For <input type=\"text\" name=\"search\" id=\"search_for\" value=\"' . (isset($_POST['search']) ? $_POST['search'] : null) . '\" /> Limit Results To <select id=\"result_limit\" name=\"result_limit\">';\n\t\t\t\tfor($i = 100; $i <= 500; $i += 100)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<option value=\"' . $i . '\"' . ($result_limit == $i ? ' selected=\"selected\"' : null) . '>' . $i . '</option>';\n\t\t\t\t}\n\t\t\t\t$main .= '<option value=\"\"' . (isset($_POST['result_limit']) && empty($result_limit) ? ' selected=\"selected\"' : null) . '>No Limit</option>';\n\n\t\t\t\t$main .= '</select> &nbsp; <input type=\"button\" value=\"Reset\" onclick=\"phoromatic_clear_results_search_fields();\" />';\n\t\t\t\t$main .= ' &nbsp; <input type=\"submit\" value=\"Update\" /></div></form>';\n\t\t\t\t$main .= '<p style=\"font-size: 90%;\">** <em>AND</em>, <em>OR</em>, and <em>NOT</em> search operators supported for tests/hardware/software search fields. **</p>';\n\t\t\t\t$main .= '<h1>Account Test Results</h1>';\n\t\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">';\n\t\t\t\t$search_for = (!isset($_POST['search']) || empty($_POST['search']) ? null : 'AND (Title LIKE :search OR Description LIKE :search OR UploadID IN (SELECT UploadID FROM phoromatic_results_systems WHERE AccountID = :account_id AND (Software LIKE :search OR Hardware LIKE :search)))');\n\t\t\t\tif(isset($_POST['containing_hardware']) && !empty($_POST['containing_hardware']))\n\t\t\t\t{\n\t\t\t\t\t$hw_advanced_query = stripos($_POST['containing_hardware'], ' AND ') !== false || stripos($_POST['containing_hardware'], ' OR ') !== false || stripos($_POST['containing_hardware'], ' NOT ') !== false;\n\t\t\t\t\tif($hw_advanced_query || true)\n\t\t\t\t\t{\n\t\t\t\t\t\t$hw_advanced_query = pts_phoroql::search_query_to_tree($_POST['containing_hardware']);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$search_for .= ' AND UploadID IN (SELECT UploadID FROM phoromatic_results_systems WHERE AccountID = :account_id AND Hardware LIKE :containing_hardware)';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(isset($_POST['containing_software']) && !empty($_POST['containing_software']))\n\t\t\t\t{\n\t\t\t\t\t$sw_advanced_query = strpos($_POST['containing_software'], ' AND ') !== false || strpos($_POST['containing_software'], ' OR ') !== false || strpos($_POST['containing_software'], ' NOT ') !== false;\n\t\t\t\t\tif($sw_advanced_query || true)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sw_advanced_query = pts_phoroql::search_query_to_tree($_POST['containing_software']);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$search_for .= ' AND UploadID IN (SELECT UploadID FROM phoromatic_results_systems WHERE AccountID = :account_id AND Software LIKE :containing_software)';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$main .= '<div style=\"margin: 0 5%;\"><ul style=\"max-height: 100%;\"><li><h1>Recent Test Results</h1></li>';\n\n\t\t\t\tif(isset($PATH[1]) && $PATH[0] == 'hash')\n\t\t\t\t{\n\t\t\t\t\t// Find matching comparison hashes\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime, TimesViewed, AccountID, UploadID FROM phoromatic_results WHERE AccountID = :account_id ' . $search_for. ' AND ComparisonHash = :comparison_hash ORDER BY UploadTime DESC');\n\t\t\t\t\t$stmt->bindValue(':comparison_hash', $PATH[1]);\n\t\t\t\t}\n\t\t\t\telse if(isset($PATH[1]) && $PATH[0] == 'ticket')\n\t\t\t\t{\n\t\t\t\t\t// Find matching ticket results\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime, TimesViewed, AccountID, UploadID FROM phoromatic_results WHERE AccountID = :account_id ' . $search_for. ' AND BenchmarkTicketID = :ticket_id ORDER BY UploadTime DESC');\n\t\t\t\t\t$stmt->bindValue(':ticket_id', $PATH[1]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime, TimesViewed, AccountID, UploadID FROM phoromatic_results WHERE AccountID = :account_id ' . $search_for. ' ORDER BY UploadTime DESC');\n\t\t\t\t}\n\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':search', (isset($_POST['search']) ? '%' . $_POST['search'] . '%' : null));\n\t\t\t\t$stmt->bindValue(':containing_hardware', (isset($_POST['containing_hardware']) ? '%' . $_POST['containing_hardware'] . '%' : null));\n\t\t\t\t$stmt->bindValue(':containing_software', (isset($_POST['containing_software']) ? '%' . $_POST['containing_software'] . '%' : null));\n\t\t\t\t$test_result_result = $stmt->execute();\n\t\t\t\t$results = 0;\n\t\t\t\t$containing_tests = isset($_POST['containing_tests']) ? $_POST['containing_tests'] : null;\n\t\t\t\tif(!empty($containing_tests))\n\t\t\t\t{\n\t\t\t\t\t$containing_tests = pts_phoroql::search_query_to_tree($containing_tests);\n\t\t\t\t}\n\n\t\t\t\twhile($test_result_row = $test_result_result->fetchArray())\n\t\t\t\t{\n\t\t\t\t\tif(strtotime($test_result_row['UploadTime']) > $time_end)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(strtotime($test_result_row['UploadTime']) < $time_start)\n\t\t\t\t\t{\n\t\t\t\t\t\t//break;\n\t\t\t\t\t}\n\t\t\t\t\tif(!empty($result_limit) && $result_limit > 1 && $result_limit == $results)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t$composite_xml = phoromatic_server::phoromatic_account_result_path($test_result_row['AccountID'], $test_result_row['UploadID']) . 'composite.xml';\n\t\t\t\t\t$result_file = new pts_result_file($composite_xml);\n\n\t\t\t\t\tif(isset($_POST['containing_hardware']) && !empty($_POST['containing_hardware']) && $hw_advanced_query)\n\t\t\t\t\t{\n\t\t\t\t\t\t//if(!$result_file->contains_system_hardware($_POST['containing_hardware']))\n\t\t\t\t\t\tif(!pts_phoroql::evaluate_search_tree($hw_advanced_query, 'AND', array($result_file, 'contains_system_hardware')))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(isset($_POST['containing_software']) && !empty($_POST['containing_software']) && $sw_advanced_query)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!pts_phoroql::evaluate_search_tree($sw_advanced_query, 'AND', array($result_file, 'contains_system_software')))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(!empty($containing_tests))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!pts_phoroql::evaluate_search_tree($containing_tests, 'AND', array($result_file, 'contains_test')))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$main .= '<a onclick=\"\"><li id=\"result_select_' . $test_result_row['PPRID'] . '\"><input type=\"checkbox\" id=\"result_compare_checkbox_' . $test_result_row['PPRID'] . '\" onclick=\"javascript:phoromatic_checkbox_toggle_result_comparison(\\'' . $test_result_row['PPRID'] . '\\');\" onchange=\"return false;\"></input> <span onclick=\"javascript:phoromatic_window_redirect(\\'?result/' . $test_result_row['PPRID'] . '\\');\">' . $test_result_row['Title'] . '</span><br /><table><tr><td>' . phoromatic_system_id_to_name($test_result_row['SystemID']) . '</td><td>' . phoromatic_user_friendly_timedate($test_result_row['UploadTime']) .  '</td><td>' . $test_result_row['TimesViewed'] . ' Times Viewed</td></table></li></a>';\n\t\t\t\t\t$results++;\n\t\t\t\t}\n\t\t\t\tif($results == 0)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Results Found</li>';\n\t\t\t\t}\n\t\t\t\telse if($results > 3)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<a onclick=\"\"><li id=\"global_bottom_totals\"><input type=\"checkbox\" id=\"global_checkbox\" onclick=\"javascript:phoromatic_toggle_checkboxes_on_page(this);\" onchange=\"return false;\"></input> <strong>' . $results . ' Results</strong></li></a>';\n\t\t\t\t}\n\t\t\t\t$main .= '</ul></div>';\n\t\t\t\t$main .= '</div>';\n\n\t\t\t\t$result_share_opt = phoromatic_server::read_setting('force_result_sharing') ? '1 = 1' : 'AccountID IN (SELECT AccountID FROM phoromatic_account_settings WHERE LetOtherGroupsViewResults = \"1\")';\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime, TimesViewed, AccountID, UploadID FROM phoromatic_results WHERE ' . $result_share_opt . ' AND AccountID != :account_id ' . $search_for. ' ORDER BY UploadTime DESC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':search', (isset($_POST['search']) ? '%' . $_POST['search'] . '%' : null));\n\t\t\t\t$stmt->bindValue(':containing_hardware', (isset($_POST['containing_hardware']) ? '%' . $_POST['containing_hardware'] . '%' : null));\n\t\t\t\t$stmt->bindValue(':containing_software', (isset($_POST['containing_software']) ? '%' . $_POST['containing_software'] . '%' : null));\n\t\t\t\t$test_result_result = $stmt->execute();\n\t\t\t\tif(!empty($test_result_result) && ($test_result_row = $test_result_result->fetchArray()))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">';\n\t\t\t\t\t$main .= '<ul style=\"max-height: 100%;\"><li><h1>Results Shared By Other Groups</h1></li>';\n\t\t\t\t\t$results = 0;\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\tif(strtotime($test_result_row['UploadTime']) > $time_end)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(strtotime($test_result_row['UploadTime']) < $time_start)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!empty($result_limit) && $result_limit > 1 && $result_limit == $results)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$composite_xml = phoromatic_server::phoromatic_account_result_path($test_result_row['AccountID'], $test_result_row['UploadID']) . 'composite.xml';\n\t\t\t\t\t\t$result_file = new pts_result_file($composite_xml);\n\n\t\t\t\t\t\tif(isset($_POST['containing_hardware']) && !empty($_POST['containing_hardware']) && $hw_advanced_query)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//if(!$result_file->contains_system_hardware($_POST['containing_hardware']))\n\t\t\t\t\t\t\tif(!pts_phoroql::evaluate_search_tree($hw_advanced_query, 'AND', array($result_file, 'contains_system_hardware')))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(isset($_POST['containing_software']) && !empty($_POST['containing_software']) && $sw_advanced_query)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(!pts_phoroql::evaluate_search_tree($sw_advanced_query, 'AND', array($result_file, 'contains_system_software')))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(!empty($containing_tests))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(!pts_phoroql::evaluate_search_tree($containing_tests, 'AND', array($result_file, 'contains_test')))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$main .= '<a onclick=\"\"><li id=\"result_select_' . $test_result_row['PPRID'] . '\"><input type=\"checkbox\" id=\"result_compare_checkbox_' . $test_result_row['PPRID'] . '\" onclick=\"javascript:phoromatic_checkbox_toggle_result_comparison(\\'' . $test_result_row['PPRID'] . '\\');\" onchange=\"return false;\"></input> <span onclick=\"javascript:phoromatic_window_redirect(\\'?result/' . $test_result_row['PPRID'] . '\\');\">' . $test_result_row['Title'] . '</span><br /><table><tr><td><strong>' . phoromatic_account_id_to_group_name($test_result_row['AccountID']) . '</strong></td><td>' . phoromatic_system_id_to_name($test_result_row['SystemID'], $test_result_row['AccountID']) . '</td><td>' . phoromatic_user_friendly_timedate($test_result_row['UploadTime']) .  '</td><td>' . $test_result_row['TimesViewed'] . ' Times Viewed</td></table></li></a>';\n\t\t\t\t\t\t$results++;\n\t\t\t\t\t}\n\t\t\t\t\twhile($test_result_row = $test_result_result->fetchArray());\n\t\t\t\t\t$main .= '</ul></div>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\techo phoromatic_webui_main($main);\n\t\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2017, Phoronix Media\n\tCopyright (C) 2014 - 2017, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_sched implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Test Scheduling';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\tif(PHOROMATIC_USER_IS_VIEWER)\n\t\t\treturn;\n\n\t\t$is_new = true;\n\t\t$env_var_edit = array();\n\t\tif(!empty($PATH[0]) && is_numeric($PATH[0]))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_schedules WHERE AccountID = :account_id AND ScheduleID = :schedule_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t$result = $stmt->execute();\n\t\t\t$e_schedule = $result->fetchArray();\n\n\t\t\tif(!empty($e_schedule))\n\t\t\t{\n\t\t\t\t$is_new = false;\n\t\t\t}\n\t\t\tif(!empty($e_schedule['EnvironmentVariables']))\n\t\t\t{\n\t\t\t\t$env_var_edit = pts_strings::parse_value_string_vars($e_schedule['EnvironmentVariables']);\n\t\t\t}\n\t\t}\n\n\t\tif(isset($_POST['schedule_title']) && !empty($_POST['schedule_title']))\n\t\t{\n\t\t\t$title = phoromatic_get_posted_var('schedule_title');\n\t\t\t$description = phoromatic_get_posted_var('schedule_description');\n\t\t\t$pre_install_set_context = phoromatic_get_posted_var('pre_install_set_context');\n\t\t\t$post_install_set_context = phoromatic_get_posted_var('post_install_set_context');\n\t\t\t$pre_run_set_context = phoromatic_get_posted_var('pre_run_set_context');\n\t\t\t$post_run_set_context = phoromatic_get_posted_var('post_run_set_context');\n\n\t\t\t$system_all = phoromatic_get_posted_var('system_all');\n\t\t\t$run_target_systems = phoromatic_get_posted_var('run_on_systems', array());\n\t\t\t$run_target_groups = phoromatic_get_posted_var('run_on_groups', array());\n\t\t\tif(!is_array($run_target_systems)) $run_target_systems = array();\n\t\t\tif(!is_array($run_target_groups)) $run_target_groups = array();\n\t\t\t$run_target_systems = implode(',', $run_target_systems);\n\t\t\t$run_target_groups = implode(',', $run_target_groups);\n\t\t\t$run_priority = phoromatic_get_posted_var('run_priority');\n\t\t\t$run_priority = is_numeric($run_priority) && $run_priority >= 0 ? $run_priority : 100;\n\n\t\t\t$schedule_hour = phoromatic_get_posted_var('schedule_hour');\n\t\t\t$schedule_minute = phoromatic_get_posted_var('schedule_minute');\n\t\t\t$days_active = phoromatic_get_posted_var('days_active');\n\n\t\t\t$context_files = array('SetContextPreInstall' => 'pre_install_set_context', 'SetContextPostInstall' => 'post_install_set_context', 'SetContextPreRun' => 'pre_run_set_context', 'SetContextPostRun' => 'post_run_set_context');\n\t\t\tforeach($context_files as $i => $context)\n\t\t\t\t$$context = $is_new ? null : $e_schedule[$i];\n\t\t\tforeach($context_files as $context)\n\t\t\t{\n\t\t\t\t$$context = null;\n\n\t\t\t\tif($_FILES[$context]['error'] == 0 && $_FILES[$context]['size'] > 0)\n\t\t\t\t{\n\t\t\t\t\t$sha1_hash = sha1_file($_FILES[$context]['tmp_name']);\n\n\t\t\t\t\tif(!is_file(phoromatic_server::phoromatic_account_path($_SESSION['AccountID']) . 'context_' . $sha1_hash))\n\t\t\t\t\t{\n\t\t\t\t\t\tmove_uploaded_file($_FILES[$context]['tmp_name'], phoromatic_server::phoromatic_account_path($_SESSION['AccountID']) . 'context_' . $sha1_hash);\n\t\t\t\t\t}\n\n\t\t\t\t\t$$context = $sha1_hash;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// TODO XXX: Validation of input\n\n\t\t\t// Need a unique schedule ID\n\t\t\tif($is_new)\n\t\t\t{\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\t$schedule_id = rand(10, 9999);\n\t\t\t\t\t$matching_schedules = phoromatic_server::$db->querySingle('SELECT ScheduleID FROM phoromatic_schedules WHERE AccountID = \\'' . $_SESSION['AccountID'] . '\\' AND ScheduleID = \\'' . $schedule_id . '\\'');\n\t\t\t\t}\n\t\t\t\twhile(!empty($matching_schedules));\n\n\t\t\t\t// Need a unique public ID\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\t$public_key = pts_strings::random_characters(12, true);;\n\t\t\t\t\t$matching_schedules = phoromatic_server::$db->querySingle('SELECT ScheduleID FROM phoromatic_schedules WHERE AccountID = \\'' . $_SESSION['AccountID'] . '\\' AND PublicKey = \\'' . $public_key . '\\'');\n\t\t\t\t}\n\t\t\t\twhile(!empty($matching_schedules));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$schedule_id = $e_schedule['ScheduleID'];\n\t\t\t\t$public_key = $e_schedule['PublicKey'];\n\t\t\t}\n\n\t\t\t$env_vars = array();\n\n\t\t\tforeach(pts_env::get_posted_options('phoromatic') as $ei => $ev)\n\t\t\t{\n\t\t\t\tarray_push($env_vars, $ei . '=' . $ev);\n\t\t\t}\n\t\t\t$env_vars = implode(';', $env_vars);\n\n\t\t\t// Add schedule\n\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT OR REPLACE INTO phoromatic_schedules (AccountID, ScheduleID, Title, Description, State, ActiveOn, RunAt, SetContextPreInstall, SetContextPostInstall, SetContextPreRun, SetContextPostRun, LastModifiedBy, LastModifiedOn, PublicKey, RunTargetGroups, RunTargetSystems, RunPriority, EnvironmentVariables) VALUES (:account_id, :schedule_id, :title, :description, :state, :active_on, :run_at, :context_pre_install, :context_post_install, :context_pre_run, :context_post_run, :modified_by, :modified_on, :public_key, :run_target_groups, :run_target_systems, :run_priority, :environment_variables)');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':schedule_id', $schedule_id);\n\t\t\t$stmt->bindValue(':title', $title);\n\t\t\t$stmt->bindValue(':description', $description);\n\t\t\t$stmt->bindValue(':state', 1);\n\t\t\t$stmt->bindValue(':active_on', (is_array($days_active) ? implode(',', $days_active) : $days_active));\n\t\t\t$stmt->bindValue(':run_at', $schedule_hour . '.' . $schedule_minute);\n\t\t\t$stmt->bindValue(':context_pre_install', $pre_install_set_context);\n\t\t\t$stmt->bindValue(':context_post_install', $post_install_set_context);\n\t\t\t$stmt->bindValue(':context_pre_run', $pre_run_set_context);\n\t\t\t$stmt->bindValue(':context_post_run', $post_run_set_context);\n\t\t\t$stmt->bindValue(':modified_by', $_SESSION['UserName']);\n\t\t\t$stmt->bindValue(':modified_on', phoromatic_server::current_time());\n\t\t\t$stmt->bindValue(':public_key', $public_key);\n\t\t\t$stmt->bindValue(':run_target_groups', $run_target_groups);\n\t\t\t$stmt->bindValue(':run_target_systems', $run_target_systems);\n\t\t\t$stmt->bindValue(':run_priority', $run_priority);\n\t\t\t$stmt->bindValue(':environment_variables', $env_vars);\n\t\t\t$result = $stmt->execute();\n\t\t\tphoromatic_add_activity_stream_event('schedule', $schedule_id, ($is_new ? 'added' : 'modified'));\n\n\t\t\tif($result)\n\t\t\t{\n\t\t\t\theader('Location: ?schedules/' . $schedule_id);\n\t\t\t}\n\t\t}\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\t$main = '<h2>' . ($is_new ? 'Create' : 'Edit') . ' A Schedule</h2>\n\t\t<p>A test schedule is used to facilitate automatically running a set of test(s) or suite(s) on either a routine timed basis or whenever triggered by an external script or process, e.g. Git/VCS commit, manually triggered, etc.</p>';\n\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"add_test\" id=\"add_test\" method=\"post\" enctype=\"multipart/form-data\" onsubmit=\"return validate_schedule();\">\n\t\t<h3>Title:<span style=\"color:red;\">*</span></h3>\n\t\t<p><input type=\"text\" name=\"schedule_title\" value=\"' . (!$is_new ? $e_schedule['Title'] : null) . '\" /></p>\n\t\t<h3>Pre-Install Set Context Script: <span style=\"font-size:12px;\">(optional)</span></h3>\n\t\t<p><input type=\"file\" name=\"pre_install_set_context\" /></p>\n\t\t<h3>Post-Install Set Context Script: <span style=\"font-size:12px;\">(optional)</span></h3>\n\t\t<p><input type=\"file\" name=\"post_install_set_context\" /></p>\n\t\t<h3>Pre-Run Set Context Script: <span style=\"font-size:12px;\">(optional)</span></h3>\n\t\t<p><input type=\"file\" name=\"pre_run_set_context\" /></p>\n\t\t<h3>Post-Run Set Context Script: <span style=\"font-size:12px;\">(optional)</span></h3>\n\t\t<p><input type=\"file\" name=\"post_run_set_context\" /></p>\n\t\t<h3>System Targets:</h3>\n\t\t<p>';\n\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 ORDER BY Title ASC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\n\n\t\tif(!$is_new)\n\t\t{\n\t\t\t$e_schedule['RunTargetSystems'] = explode(',', $e_schedule['RunTargetSystems']);\n\t\t\t$e_schedule['RunTargetGroups'] = explode(',', $e_schedule['RunTargetGroups']);\n\t\t}\n\n\t\tif($row = $result->fetchArray())\n\t\t{\n\t\t\t$main .= '<h4>Systems: ';\n\t\t\tdo\n\t\t\t{\n\t\t\t\t$main .= '<input type=\"checkbox\" name=\"run_on_systems[]\" value=\"' . $row['SystemID'] . '\" ' . (!$is_new && in_array($row['SystemID'], $e_schedule['RunTargetSystems']) ? 'checked=\"checked\" ' : null) . '/> ' . $row['Title'] . ' ';\n\t\t\t}\n\t\t\twhile($row = $result->fetchArray());\n\t\t\t$main .= '</h4>';\n\t\t}\n\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT GroupName FROM phoromatic_groups WHERE AccountID = :account_id ORDER BY GroupName ASC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\n\t\tif($row = $result->fetchArray())\n\t\t{\n\t\t\t$main .= '<h4>Groups: ';\n\t\t\tdo\n\t\t\t{\n\t\t\t\t$main .= '<input type=\"checkbox\" name=\"run_on_groups[]\" value=\"' . $row['GroupName'] . '\" ' . (!$is_new && in_array($row['GroupName'], $e_schedule['RunTargetGroups']) ? 'checked=\"checked\" ' : null) . '/> ' . $row['GroupName'] . ' ';\n\t\t\t}\n\t\t\twhile($row = $result->fetchArray());\n\t\t\t$main .= '</h4>';\n\t\t}\n\n\t\t$main .= '</p>\n\t\t<h3>Description:<span style=\"color:red;\">*</span></h3>\n\t\t<p><textarea name=\"schedule_description\" id=\"schedule_description\" cols=\"50\" rows=\"3\">' . (!$is_new ? $e_schedule['Description'] : null) . '</textarea></p>\n\t\t<h3>Run Priority:</h3>\n\t\t<p>The run priority is used for determining which tests to execute first should there be multiple test schedules set to run on a given system at the same time. Additionally, test schedules of low-priority will not attempt to power-on a system if needed for running the test, thus delaying it\\'s execution until the next time the system is otherwise online.</p>\n\t\t<p><select name=\"run_priority\" id=\"run_priority\">';\n\t\t$prios = array(1 => 'Low Priority', 100 => 'Default Priority', 200 => 'High Priority');\n\t\tforeach($prios as $lvl => $lvl_str)\n\t\t{\n\t\t\t$main .= '<option value=\"' . $lvl . '\"' . (((!$is_new && ($e_schedule['RunPriority'] == $lvl)) || $lvl == 100) ? 'selected=\"selected\" ' : null) . '>' . $lvl_str . '</option>';\n\t\t}\n\t\t$main .='</select></p><table class=\"pts_phoromatic_schedule_type\">\n<tr>\n  <td><h3>Time-Based Testing</h3><em>Time-based testing allows tests to automatically commence at a given time on a defined cycle each day/week. This option is primarly aimed for those wishing to run a set of benchmarks every morning or night or at another defined period.</em></td>\n  <td><h3>Run Time:</h3>\n\t\t\t<p><select name=\"schedule_hour\" id=\"schedule_hour\">';\n\n\t\t\tif(!$is_new)\n\t\t\t{\n\t\t\t\t$run_at = explode('.', $e_schedule['RunAt']);\n\t\t\t\t$days_active = !empty($e_schedule['ActiveOn']) ? explode(',', $e_schedule['ActiveOn']) : array();\n\t\t\t}\n\n\t\t\tfor($i = 0; $i <= 23; $i++)\n\t\t\t{\n\t\t\t\t$i_f = (strlen($i) == 1 ? '0' . $i : $i);\n\t\t\t\t$main .= '<option value=\"' . $i_f . '\"' . (!$is_new && $run_at[0] == $i ? 'selected=\"selected\" ' : null) . '>' . $i_f . '</option>';\n\t\t\t}\n\n\t\t\t$main .= '</select> <select name=\"schedule_minute\" id=\"schedule_minute\">';\n\n\t\t\tfor($i = 0; $i < 60; $i += 10)\n\t\t\t{\n\t\t\t\t$i_f = (strlen($i) == 1 ? '0' . $i : $i);\n\t\t\t\t$main .= '<option value=\"' . $i_f . '\"' . (!$is_new && $run_at[1] == $i ? 'selected=\"selected\" ' : null) . '>' . $i_f . '</option>';\n\t\t\t}\n\n\t\t\t$main .= '</select><h3>Active On:</h3><p>';\n\t\t\t$week = array('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday');\n\t\t\tforeach($week as $index => $day)\n\t\t\t{\n\t\t\t\t$main .= '<input type=\"checkbox\" name=\"days_active[]\" value=\"' . $index . '\"' . (!$is_new && in_array($index, $days_active) ? 'checked=\"checked\" ' : null) . '/> ' . $day;\n\t\t\t}\n\n\t\t\t$main .= '</p></td>\n</tr>\n<tr>\n  <td><h3>Trigger-Based Testing</h3><em>To carry out trigger-based testing, you can simply have an external process/script trigger (&quot;ping&quot;) a specialized URL whenever an event occurs to commence a new round of testing. This is the most customizable approach to having Phoromatic run tests on a system if you wish to have it occur whenever a Git/SVN commit takes place or other operations.</em></td>\n  <td><h3>Once creating the test schedule there will be a specialized URL you can use for &quot;pinging&quot; where you can pass it a Git commit hash, SVN revision number, date, or other unique identifiers to externally trigger the test schedules and systems to begin testing. This custom trigger is passed to any of the used context scripts for setting up the system in an appropriate state.</h3></td>\n</tr>\n<tr>\n  <td><h3>One-Time / Manual Testing</h3><em>Carrying out Phoromatic-controlled benchmark on no routine schedule, similar to the trigger-based testing.</em></td>\n  <td><h3>If you wish to only run a set of tests once on a given system or to do so seldom with the same set of tests, simply proceed with creating the test schedule without setting any run time / active days. When going to the web page for this test schedule there will be a button to trigger the tests to run on all affected systems. One-time benchmarking can also be setup via the <a href=\"?benchmark\">Run A Benchmark</a> page.</h3></td>\n</tr>\n</table>';\n\n$main .= (empty($env_var_edit) ? '<p><a id=\"env_var_options_show\" onclick=\"javascript:document.getElementById(\\'env_var_options\\').style.display = \\'block\\'; javascript:document.getElementById(\\'env_var_options_show\\').style.display = \\'none\\'; \">Advanced Options</a></p> <div id=\"env_var_options\" style=\"display: none;\">' : '<div id=\"env_var_options\">') . '<p>The advanced options require the Phoromatic clients be on the latest Phoronix Test Suite (10.8 or newer / Git). See the Phoronix Test Suite documentation for more information on these environment variables / advanced options.</p>' . pts_env::get_html_options('phoromatic', $env_var_edit) . '</div>';\n\n$main .= '<p align=\"right\"><input name=\"submit\" value=\"' . ($is_new ? 'Create' : 'Edit') . ' Schedule\" type=\"submit\" onclick=\"return pts_rmm_validate_schedule();\" /></p>\n\t\t\t</form>';\n\t\t\techo phoromatic_webui_main($main);\n\t\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2018, Phoronix Media\n\tCopyright (C) 2008 - 2018, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_schedules implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Test Schedules';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$main = null;\n\t\techo phoromatic_webui_header_logged_in();\n\n\t\tif(!empty($PATH[0]) && is_numeric($PATH[0]))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_schedules WHERE AccountID = :account_id AND ScheduleID = :schedule_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t$result = $stmt->execute();\n\t\t\t$row = $result->fetchArray();\n\n\t\t\tif(empty($row))\n\t\t\t{\n\t\t\t\t$main = '<h1>Test Schedules</h1>';\n\t\t\t\t$main .= '<h3>No Resource Found</h3>';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\n\t\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t\t{\n\n\t\t\t\t\tif(isset($_POST['add_to_schedule_select_test']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$name = $_POST['add_to_schedule_select_test'];\n\t\t\t\t\t\t$args = array();\n\t\t\t\t\t\t$args_name = array();\n\n\t\t\t\t\t\tforeach($_POST as $i => $v)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(substr($i, 0, 12) == 'test_option_' && substr($i, -9) != '_selected')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tarray_push($args, $v);\n\t\t\t\t\t\t\t\tarray_push($args_name, $_POST[$i . '_selected']);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$args_name = implode(' - ', $args_name);\n\t\t\t\t\t\t$args = implode(' ', $args);\n\n\t\t\t\t\t\tif(!empty($name))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_schedules_tests (AccountID, ScheduleID, TestProfile, TestArguments, TestDescription) VALUES (:account_id, :schedule_id, :test_profile, :test_arguments, :test_description)');\n\t\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t\t\t\t$stmt->bindValue(':test_profile', $name);\n\t\t\t\t\t\t\t$stmt->bindValue(':test_arguments', $args);\n\t\t\t\t\t\t\t$stmt->bindValue(':test_description', $args_name);\n\t\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t\t\tphoromatic_add_activity_stream_event('tests_for_schedule', $PATH[0], 'added');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(isset($_POST['suite_add']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$test_suite = phoromatic_server::find_suite_file($_SESSION['AccountID'], $_POST['suite_add']);\n\t\t\t\t\t\tif(is_file($test_suite))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$test_suite = new pts_test_suite($test_suite);\n\t\t\t\t\t\t\tforeach($test_suite->get_contained_test_result_objects() as $tro)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_schedules_tests (AccountID, ScheduleID, TestProfile, TestArguments, TestDescription) VALUES (:account_id, :schedule_id, :test_profile, :test_arguments, :test_description)');\n\t\t\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t\t\t\t\t$stmt->bindValue(':test_profile', $tro->test_profile->get_identifier());\n\t\t\t\t\t\t\t\t$stmt->bindValue(':test_arguments', $tro->get_arguments());\n\t\t\t\t\t\t\t\t$stmt->bindValue(':test_description', $tro->get_arguments_description());\n\t\t\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t\t\t\tphoromatic_add_activity_stream_event('tests_for_schedule', $PATH[0], 'added');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(isset($PATH[1]) && $PATH[1] == 'remove' && !empty($PATH[2]))\n\t\t\t\t\t{\n\t\t\t\t\t\t// REMOVE TEST\n\t\t\t\t\t\t$to_remove = explode(PHP_EOL, base64_decode($PATH[2]));\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_schedules_tests WHERE AccountID = :account_id AND ScheduleID = :schedule_id AND TestProfile = :test AND TestArguments = :test_args');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t\t\t$stmt->bindValue(':test', $to_remove[0]);\n\t\t\t\t\t\t$stmt->bindValue(':test_args', $to_remove[1]);\n\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t\tphoromatic_add_activity_stream_event('tests_for_schedule', $to_remove[0] . ' - ' . $to_remove[1], 'removed');\n\t\t\t\t\t}\n\t\t\t\t\telse if(isset($PATH[1]) && $PATH[1] == 'delete-trigger' && !empty($PATH[2]))\n\t\t\t\t\t{\n\t\t\t\t\t\t// REMOVE TRIGGER\n\t\t\t\t\t\t$trigger = base64_decode($PATH[2]);\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_schedules_triggers WHERE AccountID = :account_id AND Trigger = :trigger AND ScheduleID = :schedule_id');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t\t\t$stmt->bindValue(':trigger', $trigger);\n\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t\tif($result)\n\t\t\t\t\t\t\t$main .= '<h2 style=\"color: red;\">Trigger Removed: ' . $trigger . '</h2>';\n\t\t\t\t\t}\n\t\t\t\t\telse if(isset($PATH[1]) && in_array($PATH[1], array('activate', 'deactivate')))\n\t\t\t\t\t{\n\t\t\t\t\t\tswitch($PATH[1])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'deactivate':\n\t\t\t\t\t\t\t\t$new_state = 0;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'activate':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t$new_state = 1;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// REMOVE TEST\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_schedules SET State = :new_state WHERE AccountID = :account_id AND ScheduleID = :schedule_id');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t\t\t$stmt->bindValue(':new_state', $new_state);\n\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t\t$row['State'] = $new_state;\n\t\t\t\t\t\tphoromatic_add_activity_stream_event('schedule', $PATH[0], $PATH[1]);\n\t\t\t\t\t}\n\t\t\t\t\telse if(isset($_POST['do_manual_test_run']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_schedules_triggers (AccountID, ScheduleID, Trigger, TriggeredOn) VALUES (:account_id, :schedule_id, :trigger, :triggered_on)');\n\t\t\t\t\t\t$stmt->bindValue(':account_id',\t$_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t\t\t$stmt->bindValue(':trigger', $_SESSION['UserName'] . ' - Manual Test Run - ' . date('H:i j M Y'));\n\t\t\t\t\t\t$stmt->bindValue(':triggered_on', phoromatic_server::current_time());\n\t\t\t\t\t\t$stmt->execute();\n\t\t\t\t\t\t$main .= '<h2 style=\"color: red;\">Manual Test Run Triggered</h2>';\n\t\t\t\t\t}\n\t\t\t\t\telse if(isset($_POST['skip_current_ticket']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_schedules_trigger_skips (AccountID, ScheduleID, Trigger) VALUES (:account_id, :schedule_id, :trigger)');\n\t\t\t\t\t\t$stmt->bindValue(':account_id',\t$_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t\t\t$stmt->bindValue(':trigger', date('Y-m-d'));\n\t\t\t\t\t\t$stmt->execute();\n\t\t\t\t\t\t$main .= '<h2 style=\"color: red;\">Current Trigger To Be Ignored</h2>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t\t$main .= '<h1>' . $row['Title'] . '</h1>';\n\t\t\t\t$main .= '<h3>' . $row['Description'] . '</h3>';\n\t\t\t\tswitch($row['RunPriority'])\n\t\t\t\t{\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\t$prio = 'Low Priority';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 100:\n\t\t\t\t\t\t$prio = 'Default Priority';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 200:\n\t\t\t\t\t\t$prio = 'High Priority';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$prio = $row['RunPriority'] . ' Priority';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$main .= '<p>Priority: ' . $prio . '</p><p>This schedule was last modified on <strong>' . date('j F Y \\a\\t H:i', strtotime($row['LastModifiedOn'])) . '</strong> by <strong>' . $row['LastModifiedBy'] . '</strong>.';\n\n\t\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<p><a href=\"?sched/' . $PATH[0] . '\">Edit Schedule</a> | ';\n\n\t\t\t\t\tif($row['State'] == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<a href=\"?schedules/' . $PATH[0] . '/deactivate\">Deactivate Schedule</a>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<a href=\"?schedules/' . $PATH[0] . '/activate\">Activate Schedule</a>';\n\t\t\t\t\t}\n\n\t\t\t\t\t$main .= '</p>';\n\t\t\t\t}\n\n\t\t\t\t$main .= '<hr />';\n\t\t\t\t$main .= '<h2>Schedule</h2>';\n\t\t\t\tif(!empty($row['ActiveOn']))\n\t\t\t\t{\n\t\t\t\t\t$active_days = explode(',', $row['ActiveOn']);\n\t\t\t\t\t$week = array('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday');\n\t\t\t\t\tforeach($active_days as $i => &$day)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!isset($week[$day]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tunset($active_days[$i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$day = $week[$day];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch(count($active_days))\n\t\t\t\t\t{\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t$day_show = implode(' and ', $active_days);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$day_show = implode(', ', $active_days);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t$main .= '<p>This test is scheduled to run every <strong>' . $day_show . '</strong> at <strong>' . str_replace('.', ':', $row['RunAt']) . '</strong>.</p>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$main .= '<p>This test schedule is not currently set to run a pre-defined time-based schedule.</p>';\n\t\t\t\t}\n\t\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t\t{\n\t\t\t\t$trigger_url = 'http://' . phoromatic_web_socket_server_ip() . '/event.php?type=trigger&user=' . $_SESSION['UserName'] . '&public_key=' . $row['PublicKey'] . '&trigger=XXX';\n\t\t\t\t$main .= '<p>This test schedule can be manually triggered to run at any time by calling <strong>' . $trigger_url . '</strong> where <em>XXX</em> is the trigger value to be used (if relevant, such as a time-stamp, Git/SVN commit number or hash, etc). There\\'s also the option of sub-targeting system(s) part of this schedule. One option is appending <em>&sub_target_this_ip</em> if this URL is being called from one of the client test systems to only sub-target the triggered testing on that client, among other options.</p>';\n\t\t\t\t$main .= '<p>If you wish to run this test schedule now, click the following button and the schedule will be run on all intended systems at their next earliest possible convenience.</p>';\n\t\t\t\t$main .= '<p><form action=\"?schedules/' . $PATH[0] . '\" name=\"manual_run\" method=\"post\">';\n\t\t\t\t$main .= '<input type=\"hidden\" name=\"do_manual_test_run\" value=\"1\" /><input type=\"submit\" value=\"Run Test Schedule Now\" onclick=\"return confirm(\\'Run this test schedule now?\\');\" />';\n\t\t\t\t$main .= '</form></p>';\n\t\t\t\t$main .= '<p><form action=\"?schedules/' . $PATH[0] . '\" name=\"skip_run\" method=\"post\">';\n\t\t\t\t$main .= '<input type=\"hidden\" name=\"skip_current_ticket\" value=\"1\" /><input type=\"submit\" value=\"Skip Current Test Ticket\" onclick=\"return confirm(\\'Skip any currently active test ticket on all systems?\\');\" />';\n\t\t\t\t$main .= '</form></p>';\n\t\t\t\t}\n\n\t\t\t\t$main .= '<hr />';\n\n\t\t\t\t$contexts = array('SetContextPreInstall' => 'Pre-Install', 'SetContextPostInstall' => 'Post-Install', 'SetContextPreRun' => 'Pre-Test-Run', 'SetContextPostRun' => 'Post-Test-Run');\n\t\t\t\t$scripts = 0;\n\t\t\t\tforeach($contexts as $context => $v)\n\t\t\t\t{\n\t\t\t\t\tif(isset($row[$context]) && !empty($row[$context]) && is_file(phoromatic_server::phoromatic_account_path($_SESSION['AccountID']) . 'context_' . $row[$context]))\n\t\t\t\t\t{\n\t\t\t\t\t\t$scripts++;\n\t\t\t\t\t\t$main .= '<h2>' . $v . ' Context Script</h2>';\n\t\t\t\t\t\t$main .= '<blockquote>' . str_replace(PHP_EOL, '<br />', htmlentities(file_get_contents(phoromatic_server::phoromatic_account_path($_SESSION['AccountID']) . 'context_' . $row[$context]))) . '</blockquote>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(!empty($row['EnvironmentVariables']))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h1>Environment Variables</h1><ol>';\n\n\t\t\t\t\tforeach(explode(';', $row['EnvironmentVariables']) as $env)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li><strong>' . $env . '</strong></li>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</ol>';\n\t\t\t\t}\n\n\t\t\t\tif($scripts > 0)\n\t\t\t\t\t$main .= '<hr />';\n\n\t\t\t\t$main .= '<h2>Tests To Run</h2>';\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_schedules_tests WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY TestProfile ASC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\t$test_count = 0;\n\t\t\t\t$main .= '<p>';\n\t\t\t\twhile($row = $result->fetchArray())\n\t\t\t\t{\n\t\t\t\t\t$test_count++;\n\t\t\t\t\t$main .= $row['TestProfile'] . ($row['TestDescription'] != null ? ' - <em>' . $row['TestDescription'] . '</em>' : '') . (!PHOROMATIC_USER_IS_VIEWER ? ' <a href=\"?schedules/' . $PATH[0] . '/remove/' . base64_encode(implode(PHP_EOL, array($row['TestProfile'], $row['TestArguments']))) . '\">Remove Test</a>' : null) . '<br />';\n\n\t\t\t\t\t/*\n\t\t\t\t\tif(!PHOROMATIC_USER_IS_VIEWER && isset($_REQUEST['make_version_lock_tests']))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(strpos($row['TestProfile'], '.') == false)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$test_profile = new pts_test_profile($row['TestProfile']);\n\t\t\t\t\t\t\t$full_identifier = $test_profile->get_identifier(true);\n\n\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_schedules_tests SET TestProfile = :version_locked_tp WHERE AccountID = :account_id AND ScheduleID = :schedule_id AND TestProfile = :test');\n\t\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t\t\t\t$stmt->bindValue(':test', $row['TestProfile']);\n\t\t\t\t\t\t\t$stmt->bindValue(':version_locked_tp', $full_identifier);\n\t\t\t\t\t\t\t$result2 = $stmt->execute();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t}\n\t\t\t\t$main .= '</p>';\n\n\t\t\t\tif($test_count == 0)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<h3 style=\"text-transform: uppercase;\">No tests have been added yet for this test schedule.</h3>';\n\t\t\t\t}\n\n\t\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h2>Add A Test</h2>';\n\t\t\t\t\t$main .= '<form action=\"?schedules/' . $PATH[0] . '\" name=\"add_test\" id=\"add_test\" method=\"post\">';\n\t\t\t\t\t$main .= '<select name=\"add_to_schedule_select_test\" id=\"add_to_schedule_select_test\" onchange=\"phoromatic_schedule_test_details(\\'\\');\">';\n\t\t\t\t\t$dc = pts_client::download_cache_path();\n\t\t\t\t\t$dc_exists = is_file($dc . 'pts-download-cache.json');\n\t\t\t\t\tif($dc_exists)\n\t\t\t\t\t{\n\t\t\t\t\t\t$cache_json = file_get_contents($dc . 'pts-download-cache.json');\n\t\t\t\t\t\t$cache_json = json_decode($cache_json, true);\n\t\t\t\t\t}\n\t\t\t\t\tforeach(array_merge(pts_tests::local_tests(), pts_openbenchmarking::available_tests(false, isset($_COOKIE['list_show_all_test_versions']) && $_COOKIE['list_show_all_test_versions'])) as $test)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(phoromatic_server::read_setting('show_local_tests_only'))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$cache_checked = false;\n\t\t\t\t\t\t\tif($dc_exists)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif($cache_json && isset($cache_json['phoronix-test-suite']['cached-tests']))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(in_array($test, $cache_json['phoronix-test-suite']['cached-tests']))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$cache_checked = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!$cache_checked && pts_test_install_request::test_files_available_on_local_system($test) == false)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$main .= '<option value=\"' . $test . '\">' . $test . '</option>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</select>';\n\t\t\t\t\t$main .= pts_web_embed::cookie_checkbox_option_helper('list_show_all_test_versions', 'Show all available test profile versions.');\n\t\t\t\t\t$main .= '<p><div id=\"test_details\"></div></p>';\n\t\t\t\t\t$main .= '</form>';\n\n\t\t\t\t\t$local_suites = array();\n\t\t\t\t\tforeach(pts_file_io::glob(phoromatic_server::phoromatic_account_suite_path($_SESSION['AccountID']) . '*/suite-definition.xml') as $xml_path)\n\t\t\t\t\t{\n\t\t\t\t\t\t$id = basename(dirname($xml_path));\n\t\t\t\t\t\t$test_suite = new pts_test_suite($xml_path);\n\t\t\t\t\t\t$local_suites[$test_suite->get_title() . ' - ' . $id] = $id;\n\t\t\t\t\t}\n\t\t\t\t\t$official_suites = pts_test_suites::suites_on_disk(false, true);\n\n\t\t\t\t\t$main .= '<hr /><h2>Add A Suite:</h2>';\n\t\t\t\t\t$main .= '<form action=\"?schedules/' . $PATH[0] . '\" name=\"add_suite\" id=\"add_suite\" method=\"post\">';\n\t\t\t\t\t$main .= '<p><select name=\"suite_to_run\" id=\"suite_to_run_identifier\" onchange=\"phoromatic_show_basic_suite_details(\\'\\');\">';\n\t\t\t\t\tforeach(array_merge($local_suites, $official_suites) as $title => $id)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<option value=\"' . $id . '\">' . $title . '</option>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</select></p>';\n\t\t\t\t\t$main .= '<p><div id=\"suite_details\"></div></p>';\n\t\t\t\t\t$main .= '</form>';\n\t\t\t\t}\n\n\t\t\t\t$systems_in_schedule = phoromatic_server::systems_associated_with_schedule($_SESSION['AccountID'], $PATH[0]);\n\t\t\t\tif(!empty($systems_in_schedule))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h2>Systems In Schedule</h2>';\n\t\t\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<p>To run this schedule on more systems, <a href=\"?sched/' . $PATH[0] . '\">edit the schedule</a>.</p>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\" style=\"margin: 0 10%;\"><ul><li><h1>Systems</h1></li>';\n\n\t\t\t\t\tforeach($systems_in_schedule as $system_id)\n\t\t\t\t\t{\n\t\t\t\t\t\t$row = phoromatic_server::get_system_details($_SESSION['AccountID'], $system_id);\n\t\t\t\t\t\t$main .= '<a href=\"?systems/' . $row['SystemID'] . '\"><li>' . $row['Title'] . '<br /><table><tr><td>' . $row['LocalIP'] . '</td><td><strong>' . $row['CurrentTask'] . '</strong></td><td><strong>Last Communication:</strong> ' . date('j F Y H:i', strtotime($row['LastCommunication'])) . '</td></tr></table></li></a>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</ul></div><hr />';\n\t\t\t\t}\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Trigger, TriggeredOn FROM phoromatic_schedules_triggers WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY TriggeredOn DESC LIMIT 10');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t$test_result_result = $stmt->execute();\n\t\t\t\t$test_result_row = $test_result_result->fetchArray();\n\n\t\t\t\tif($test_result_row)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\" style=\"margin: 0 10%;\">';\n\t\t\t\t\t$main .= '<ul><li><h1>Recent Triggers For This Schedule</h1></li>';\n\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<a onclick=\"\"><li>' . $test_result_row['Trigger'] . '<br /><table><tr><td>' . phoromatic_user_friendly_timedate($test_result_row['TriggeredOn']) . '</td><td><a href=\"?schedules/' . $PATH[0] . '/delete-trigger/' . base64_encode($test_result_row['Trigger']) . '\">Remove Trigger</a></td></tr></table></li></a>';\n\n\t\t\t\t\t}\n\t\t\t\t\twhile($test_result_row = $test_result_result->fetchArray());\n\t\t\t\t\t$main .= '</ul>';\n\t\t\t\t\t$main .= '</div>';\n\t\t\t\t}\n\n\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime FROM phoromatic_results WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY UploadTime DESC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t$test_result_result = $stmt->execute();\n\t\t\t\t$test_result_row = $test_result_result->fetchArray();\n\n\t\t\t\tif($test_result_row)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\" style=\"margin: 0 10%;\">';\n\t\t\t\t\t$main .= '<ul><li><h1>Recent Test Results For This Schedule</h1></li>';\n\t\t\t\t\t$results = 0;\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$oldest_upload_time = $test_result_row['UploadTime'];\n\t\t\t\t\t\tif($results > 100)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$main .= '<a href=\"?result/' . $test_result_row['PPRID'] . '\"><li>' . $test_result_row['Title'] . '<br /><table><tr><td>' . phoromatic_system_id_to_name($test_result_row['SystemID']) . '</td><td>' . phoromatic_user_friendly_timedate($test_result_row['UploadTime']) .  '</td></tr></table></li></a>';\n\t\t\t\t\t\t$results++;\n\n\t\t\t\t\t}\n\t\t\t\t\twhile($test_result_row = $test_result_result->fetchArray());\n\t\t\t\t\t$main .= '</ul>';\n\t\t\t\t\t$main .= '</div>';\n\t\t\t\t}\n\t\t\t\t$num_results = phoromatic_results_for_schedule($PATH[0]);\n\n\t\t\t\tif($num_results > 1)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<p>Jump to the latest results from the past: ';\n\t\t\t\t\t$main .= '<select name=\"view_results_from_past\" id=\"view_results_from_past\" onchange=\"phoromatic_jump_to_results_from(\\'' . $PATH[0] . '\\', \\'view_results_from_past\\');\">';\n\t\t\t\t\t$oldest_upload_time = strtotime($oldest_upload_time);\n\t\t\t\t\t$opts = array(\n\t\t\t\t\t\t'Week' => 7,\n\t\t\t\t\t\t'Three Weeks' => 21,\n\t\t\t\t\t\t'Month' => 30,\n\t\t\t\t\t\t'Quarter' => 90,\n\t\t\t\t\t\t'Six Months' => 180,\n\t\t\t\t\t\t'Year' => 365,\n\t\t\t\t\t\t);\n\t\t\t\t\tforeach($opts as $str_name => $time_offset)\n\t\t\t\t\t{\n\t\t\t\t\t\tif($oldest_upload_time > (time() - (86400 * $time_offset)))\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t$main .= '<option value=\"' . $time_offset . '\">' . $str_name . '</option>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '<option value=\"all\">All Results</option>';\n\t\t\t\t\t$main .= '</select>';\n\t\t\t\t\t$main .= '</p><hr />';\n\t\t\t\t}\n\t\t\t\t$main .= '<p><strong>' . $num_results . ' Test Results Available For This Schedule.</strong></p>';\n\t\t\t}\n\n\t\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in());\n\t\t\techo phoromatic_webui_footer();\n\t\t\treturn;\n\t\t}\n\n\n\t\t$main = '<h1>Test Schedules</h1>\n\t\t\t<p>Test schedules are used for tests that are intended to be run on a recurring basis -- either daily or other defined time period -- or whenever a trigger/event occurs, like a new Git commit to a software repository being tracked. Test schedules can be run on any given system(s)/group(s) and can be later edited.</p>';\n\n\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t{\n\t\t\t\t$main .= '\n\t\t\t\t<hr />\n\t\t\t\t<h2>Create A Schedule</h2>\n\t\t\t\t<p><a href=\"?sched\">Create a schedule</a> followed by adding tests/suites to run for that schedule on the selected systems.</p>';\n\t\t\t}\n\n\t\t\t$main .= '<hr /><h2>Current Schedules</h2>';\n\n\n\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><h1>Active Test Schedules</h1></li>';\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, ScheduleID, Description, RunTargetSystems, RunTargetGroups, RunAt, ActiveOn FROM phoromatic_schedules WHERE AccountID = :account_id AND State >= 1 ORDER BY Title ASC');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\t\tif($row == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Schedules Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$stmt_tests = phoromatic_server::$db->prepare('SELECT COUNT(*) AS TestCount FROM phoromatic_schedules_tests WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY TestProfile ASC');\n\t\t\t\t\t\t\t$stmt_tests->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t$stmt_tests->bindValue(':schedule_id', $row['ScheduleID']);\n\t\t\t\t\t\t\t$result_tests = $stmt_tests->execute();\n\t\t\t\t\t\t\t$row_tests = $result_tests->fetchArray();\n\t\t\t\t\t\t\t$test_count = !empty($row_tests) ? $row_tests['TestCount'] : 0;\n\n\t\t\t\t\t\t\t$group_count = empty($row['RunTargetGroups']) ? 0 : count(explode(',', $row['RunTargetGroups']));\n\t\t\t\t\t\t\t$main .= '<a href=\"?schedules/' . $row['ScheduleID'] . '\"><li>' . $row['Title'] . '<br /><table><tr><td>' . pts_strings::plural_handler(count(phoromatic_server::systems_associated_with_schedule($_SESSION['AccountID'], $row['ScheduleID'])), 'System') . '</td><td>' . pts_strings::plural_handler($group_count, 'Group') . '</td><td>' . pts_strings::plural_handler($test_count, 'Test') . '</td><td>' . pts_strings::plural_handler(phoromatic_results_for_schedule($row['ScheduleID']), 'Result') . ' Total</td><td>' . pts_strings::plural_handler(phoromatic_results_for_schedule($row['ScheduleID'], 'TODAY'), 'Result') . ' Today</td><td><strong>' . phoromatic_schedule_activeon_string($row['ActiveOn'], $row['RunAt']) . '</strong></td></tr></table></li></a>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t}\n\n\n\t\t\t$main .= '</ul>\n\t\t\t</div>';\n\n\t\t\t$main .= '<hr /><h2>Schedule Overview</h2>';\n\t\t\t$week = array('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday');\n\n\t\t\tforeach($week as $i => $day)\n\t\t\t{\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, ScheduleID, RunAt, RunTargetGroups, RunTargetSystems FROM phoromatic_schedules WHERE AccountID = :account_id AND State >= 1 AND ActiveOn LIKE :active_on ORDER BY RunAt,ActiveOn,Title ASC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':active_on', '%' . $i . '%');\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$has_matched = false;\n\t\t\t\twhile($row = $result->fetchArray())\n\t\t\t\t{\n\t\t\t\t\tif(!$has_matched)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h3>' . $day . '</h3>' . PHP_EOL . '<p>';\n\t\t\t\t\t\t$has_matched = true;\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '<em>' . $row['RunAt'] . '</em> <a href=\"?schedules/' . $row['ScheduleID'] . '\">' . $row['Title'] . '</a>';\n\t\t\t\t\t//$main .= $row['RunTargetSystems'] . ' ' . $row['RunTargetGroups'];\n\t\t\t\t\t$main .= '<br />';\n\t\t\t\t}\n\n\t\t\t\tif($has_matched)\n\t\t\t\t\t$main .= '</p>' . PHP_EOL;\n\n\t\t\t}\n\n\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><h1>Deactivated Test Schedules</h1></li>';\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, ScheduleID, Description, RunTargetSystems, RunTargetGroups, RunAt, ActiveOn FROM phoromatic_schedules WHERE AccountID = :account_id AND State < 1 ORDER BY Title ASC');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\t\tif($row == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Schedules Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$stmt_tests = phoromatic_server::$db->prepare('SELECT COUNT(*) AS TestCount FROM phoromatic_schedules_tests WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY TestProfile ASC');\n\t\t\t\t\t\t\t$stmt_tests->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t$stmt_tests->bindValue(':schedule_id', $row['ScheduleID']);\n\t\t\t\t\t\t\t$result_tests = $stmt_tests->execute();\n\t\t\t\t\t\t\t$row_tests = $result_tests->fetchArray();\n\t\t\t\t\t\t\t$test_count = !empty($row_tests) ? $row_tests['TestCount'] : 0;\n\n\t\t\t\t\t\t\t$group_count = empty($row['RunTargetGroups']) ? 0 : count(explode(',', $row['RunTargetGroups']));\n\t\t\t\t\t\t\t$main .= '<a href=\"?schedules/' . $row['ScheduleID'] . '\"><li>' . $row['Title'] . '<br /><table><tr><td>' . pts_strings::plural_handler(count(phoromatic_server::systems_associated_with_schedule($_SESSION['AccountID'], $row['ScheduleID'])), 'System') . '</td><td>' . pts_strings::plural_handler($group_count, 'Group') . '</td><td>' . pts_strings::plural_handler($test_count, 'Test') . '</td><td>' . pts_strings::plural_handler(phoromatic_results_for_schedule($row['ScheduleID']), 'Result') . ' Total</td><td>' . pts_strings::plural_handler(phoromatic_results_for_schedule($row['ScheduleID'], 'TODAY'), 'Result') . ' Today</td><td><strong>' . phoromatic_schedule_activeon_string($row['ActiveOn'], $row['RunAt']) . '</strong></td></tr></table></li></a>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t}\n\n\n\t\t\t$main .= '</ul>\n\t\t\t</div>';\n\n\t\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2018, Phoronix Media\n\tCopyright (C) 2014 - 2018, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_search implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Search';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tprotected static function search_test_profiles($q)\n\t{\n\t\t$ret = null;\n\t\tforeach(pts_search::search_local_test_profiles($q) as $test)\n\t\t{\n\t\t\t$tp = new pts_test_profile($test);\n\t\t\t$ret .= '<h3>' . $tp->get_title() . '</h3><p>' . $tp->get_description() . '<br /><a href=\"http://openbenchmarking.org/test/' . $tp->get_identifier(false) . '\">Learn More On OpenBenchmarking.org</a></p>';\n\t\t}\n\n\t\treturn $ret;\n\t}\n\tprotected static function search_local_test_suites($q)\n\t{\n\t\t$ret = null;\n\t\t$suite_dir = phoromatic_server::phoromatic_account_suite_path($_SESSION['AccountID']);\n\t\tforeach(pts_file_io::glob($suite_dir . '*/suite-definition.xml') as $xml_path)\n\t\t{\n\t\t\t$id = basename(dirname($xml_path));\n\t\t\t$test_suite = new pts_test_suite($xml_path);\n\t\t\t$match = false;\n\n\t\t\tif(stripos($test_suite->get_title(), $q) === 0 || stripos($test_suite->get_description(), $q) !== false)\n\t\t\t{\n\t\t\t\t$match = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tforeach($test_suite->get_contained_test_result_objects() as $tro)\n\t\t\t\t{\n\t\t\t\t\tif(stripos($tro->test_profile->get_identifier(), $q) !== false || stripos($tro->test_profile->get_title(), $q) === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$match = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($match)\n\t\t\t{\n\t\t\t\t$ret .= '<h3>' . $test_suite->get_title() . '</h3><p>' . $test_suite->get_description() . '<br /><a href=\"/?local_suites#' . $id . '\">More Details</a></p>';\n\t\t\t}\n\t\t}\n\n\t\treturn $ret;\n\t}\n\tprotected static function search_test_schedules($q)\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, Description, ScheduleID FROM phoromatic_schedules WHERE AccountID = :account_id AND State = 1');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$ret = null;\n\n\t\twhile($row = $result->fetchArray())\n\t\t{\n\t\t\t$match = false;\n\t\t\tif(stripos($row['Title'], $q) === 0 || stripos($row['Description'], $q) !== false)\n\t\t\t{\n\t\t\t\t$match = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$stmt2 = phoromatic_server::$db->prepare('SELECT TestProfile FROM phoromatic_schedules_tests WHERE AccountID = :account_id AND ScheduleID = :schedule_id');\n\t\t\t\t$stmt2->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt2->bindValue(':schedule_id', $row['ScheduleID']);\n\t\t\t\t$result2 = $stmt2->execute();\n\t\t\t\twhile($row2 = $result2->fetchArray())\n\t\t\t\t{\n\t\t\t\t\tif(stripos($row2['TestProfile'], $q) !== false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$match = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($match)\n\t\t\t{\n\t\t\t\t$ret .= '<h3>' . $row['Title'] . '</h3><p>' . $row['Description'] . '<br /><a href=\"/?schedules/' . $row['ScheduleID'] . '\">More Details</a></p>';\n\t\t\t}\n\t\t}\n\n\t\treturn $ret;\n\t}\n\tprotected static function search_test_results($q)\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, Description, UploadID, PPRID FROM phoromatic_results WHERE AccountID = :account_id');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$ret = null;\n\n\t\twhile($row = $result->fetchArray())\n\t\t{\n\t\t\t$match = false;\n\t\t\tif(stripos($row['Title'], $q) === 0 || stripos($row['Description'], $q) !== false)\n\t\t\t{\n\t\t\t\t$match = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$stmt2 = phoromatic_server::$db->prepare('SELECT TestProfile FROM phoromatic_results_results WHERE AccountID = :account_id AND UploadID = :upload_id');\n\t\t\t\t$stmt2->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt2->bindValue(':upload_id', $row['UploadID']);\n\t\t\t\t$result2 = $stmt2->execute();\n\t\t\t\twhile($row2 = $result2->fetchArray())\n\t\t\t\t{\n\t\t\t\t\tif(stripos($row2['TestProfile'], $q) !== false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$match = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($match)\n\t\t\t{\n\t\t\t\t$ret .= '<h3>' . $row['Title'] . '</h3><p>' . $row['Description'] . '<br /><a href=\"/?result/' . $row['PPRID'] . '\">View Results</a></p>';\n\t\t\t}\n\t\t}\n\n\t\treturn $ret;\n\t}\n\tprotected static function search_test_systems($q)\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, Description, SystemID, Hardware, Software FROM phoromatic_systems WHERE AccountID = :account_id');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$ret = null;\n\n\t\twhile($row = $result->fetchArray())\n\t\t{\n\t\t\t$match = false;\n\t\t\tif(stripos($row['Title'], $q) === 0 || stripos($row['Description'], $q) !== false || stripos($row['Hardware'], $q) !== false || stripos($row['Software'], $q) !== false)\n\t\t\t{\n\t\t\t\t$match = true;\n\t\t\t}\n\n\t\t\tif($match)\n\t\t\t{\n\t\t\t\t$ret .= '<h3>' . $row['Title'] . '</h3><p>' . $row['Description'] . '<br /><a href=\"/?systems/' . $row['SystemID'] . '\">View System</a></p>';\n\t\t\t}\n\t\t}\n\n\t\treturn $ret;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$search_query = $_REQUEST['search'];\n\n\t\t$main = null;\n\n\t\tif(strlen($search_query) < 4)\n\t\t{\n\t\t\t$main = '<h1>Search Failed</h1>';\n\t\t\t$main .= '<p>Search Queries Must Be At Least Four Characters.</p>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$main .= '<h1>Search Results For: ' . $search_query . '</h1>';\n\t\t\t$category_matches = 0;\n\n\t\t\t$tests = self::search_test_profiles($search_query);\n\t\t\tif($tests != null)\n\t\t\t{\n\t\t\t\t$category_matches++;\n\t\t\t\t$main .= '<h2>Test Profile Matches</h2>' . $tests . '<hr />';\n\t\t\t}\n\n\t\t\t$local_suites = self::search_local_test_suites($search_query);\n\t\t\tif($local_suites != null)\n\t\t\t{\n\t\t\t\t$category_matches++;\n\t\t\t\t$main .= '<h2>Local Test Suite Matches</h2>' . $local_suites . '<hr />';\n\t\t\t}\n\n\t\t\t$test_schedules = self::search_test_schedules($search_query);\n\t\t\tif($test_schedules != null)\n\t\t\t{\n\t\t\t\t$category_matches++;\n\t\t\t\t$main .= '<h2>Test Schedule Matches</h2>' . $test_schedules . '<hr />';\n\t\t\t}\n\n\t\t\t$test_results = self::search_test_results($search_query);\n\t\t\tif($test_results != null)\n\t\t\t{\n\t\t\t\t$category_matches++;\n\t\t\t\t$main .= '<h2>Test Result Matches</h2>' . $test_results . '<hr />';\n\t\t\t}\n\n\t\t\t$test_systems = self::search_test_systems($search_query);\n\t\t\tif($test_systems != null)\n\t\t\t{\n\t\t\t\t$category_matches++;\n\t\t\t\t$main .= '<h2>Test System Matches</h2>' . $test_systems . '<hr />';\n\t\t\t}\n\n\t\t\tif($category_matches == 0)\n\t\t\t{\n\t\t\t\t$main .= '<h2>No Matches Found</h2>';\n\t\t\t}\n\t\t}\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in());\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2016, Phoronix Media\n\tCopyright (C) 2008 - 2016, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_settings implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Settings';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t\techo phoromatic_webui_header_logged_in();\n\n\t\t\t$main = '<h1>Settings</h1>\n\t\t\t\t<h2>User Settings</h2>\n\t\t\t\t<p>User settings are specific to your particular account, in cases where there are multiple individuals/accounts managing the same test systems and data.</p>\n\t\t\t\t';\n\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_user_settings WHERE AccountID = :account_id AND UserID = :user_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':user_id', $_SESSION['UserID']);\n\t\t\t$result = $stmt->execute();\n\t\t\t$row = $result->fetchArray();\n\n\t\t\t$user_settings = array(\n\t\t\t\t'Email' => array(\n\t\t\t\t\t'NotifyOnResultUploads' => 'Send notification when test results are uploaded to Phoromatic.',\n\t\t\t\t\t'NotifyOnWarnings' => 'Send notification when any warnings are generated on a test system.',\n\t\t\t\t\t'NotifyOnNewSystems' => 'Send notification when new test systems are added.',\n\t\t\t\t\t'NotifyOnHungSystems' => 'Send notification when system(s) appear hung.'\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t$main .= '<form name=\"system_form\" id=\"system_form\" action=\"?settings\" method=\"post\">';\n\t\t\tforeach($user_settings as $section => $section_settings)\n\t\t\t{\n\t\t\t\t$main .= '<h3>' . $section . '</h3><p>';\n\t\t\t\tforeach($section_settings as $key => $setting)\n\t\t\t\t{\n\t\t\t\t\tif(isset($_POST['user_settings_update']))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(isset($_POST[$key]) && $_POST[$key] == 'yes')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$row[$key] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$row[$key] = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_user_settings SET ' . $key . ' = :val WHERE AccountID = :account_id AND UserID = :user_id');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt->bindValue(':user_id', $_SESSION['UserID']);\n\t\t\t\t\t\t$stmt->bindValue(':val', $row[$key]);\n\t\t\t\t\t\t$stmt->execute();\n\t\t\t\t\t\t//echo phoromatic_server::$db->lastErrorMsg();\n\t\t\t\t\t}\n\n\t\t\t\t\t$main .= '<input type=\"checkbox\" name=\"' . $key . '\" ' . (isset($row[$key]) && $row[$key] == 1 ? 'checked=\"checked\" ' : '') . 'value=\"yes\" /> ' . $setting . '<br />';\n\t\t\t\t}\n\t\t\t\t$main .= '</p>';\n\t\t\t}\n\t\t\t$main .= '<p><input type=\"hidden\" value=\"1\" name=\"user_settings_update\" /><input type=\"submit\" value=\"Save User Settings\" /></p>';\n\t\t\t$main .= '</form>';\n\n\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t{\n\t\t\t\t$main .= '<hr />\n\t\t\t\t<h2>Account Settings</h2>\n\t\t\t\t<p>Account settings are system-wide, in cases where there are multiple individuals/accounts managing the same test systems and data.</p>';\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_account_settings WHERE AccountID = :account_id');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\t$env_vars_show = !empty($row['GlobalEnvironmentVariables']) ? pts_strings::parse_value_string_vars($row['GlobalEnvironmentVariables']) : array();\n\n\t\t\t\t$account_settings = array(\n\t\t\t\t\t'Global Settings' => array(\n\t\t\t\t\t\t'ArchiveResultsLocally' => 'Archive test results on local test systems after the results have been uploaded.',\n\t\t\t\t\t\t'UploadSystemLogs' => 'Upload system logs from clients when uploading test results.',\n\t\t\t\t\t\t'UploadInstallLogs' => 'Upload test installation logs from clients when uploading test results.',\n\t\t\t\t\t\t'UploadRunLogs' => 'Upload test run-time logs from clients when uploading test results.',\n\t\t\t\t\t\t'ProgressiveResultUploads' => 'Allow clients to stream results progressively to the Phoromatic Server as tests are finished (the ability to see in-progress result files on the Phoromatic Server rather than waiting until all tests are finished).',\n\t\t\t\t\t\t'RunInstallCommand' => 'For all test schedules, always run the install command for test(s) prior to running them on the system.',\n\t\t\t\t\t\t'ForceInstallTests' => 'For all test schedules, force the test installation/re-installation of tests each time prior to running the test.',\n\t\t\t\t\t\t//'SystemSensorMonitoring' => 'Enable the system sensor monitoring while tests are taking place.',\n\t\t\t\t\t\t'UploadResultsToOpenBenchmarking' => 'For all test schedules, also upload test results to OpenBenchmarking.org.',\n\t\t\t\t\t\t'AllowAnyDataForLogFiles' => 'When clients are uploading system log files to the Phoromatic Server, allow any data (non-text data) to be uploaded rather than enforcing text-only log files.',\n\t\t\t\t\t\t'PowerOffWhenDone' => 'Power off system(s) when scheduled tests are completed for the day.',\n\t\t\t\t\t\t'PreSeedTestInstalls' => 'Attempt to pre-install commonly used tests on client systems while idling.',\n\t\t\t\t\t\t'NetworkPowerUpWhenNeeded' => 'Use network Wake-On-LAN to power on systems when needed.',\n\t\t\t\t\t\t'LetOtherGroupsViewResults' => 'Let other accounts/groups on this Phoromatic Server view (read-only) this account\\'s results.',\n\t\t\t\t\t\t'LetPublicViewResults' => 'Allow public/unauthenticated visitors to access these test results from <a href=\"/public.php\">the public viewer page</a>.',\n\t\t\t\t\t\t'PowerOnSystemDaily' => 'Attempt to power-on systems daily (unless there\\'s a daily test schedule / trigger on the system) to maintain the DHCP lease on the network, update any software/hardware information, etc. When the daily update is done, the system will power off unless there\\'s a test to run and the power-off setting above is enabled. This option is namely useful for systems that otherwise may be idling/powered-off for long periods of time between tests.',\n\t\t\t\t\t\t'AutoApproveNewSystems' => 'Enabling this option will make new test systems immediately available for this account rather than the default behavior of first needing an administrator to approve/deny the system via the Phoromatic Server web interface. With this option enabled, the systems are automatically approved by default but can be later disabled/removed via the Phoromatic web interface.',\n\t\t\t\t\t\t'LimitNetworkCommunication' => 'Limit network communication. Only enable this option if your Phoromatic Server is slow, there are thousands of systems running benchmarks, and/or you are not interested in the real-time system monitoring and other functionality. This setting will limit the network communication to the point of the Phoromatic Server mostly being used just as a result aggregation point.'\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t$main .= '<form name=\"system_form\" id=\"system_form\" action=\"?settings\" method=\"post\">';\n\t\t\t\t$settings_updated = false;\n\t\t\t\tforeach($account_settings as $section => $section_settings)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<h3>' . $section . '</h3><p>';\n\t\t\t\t\tforeach($section_settings as $key => $setting)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(isset($_POST['account_settings_update']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(isset($_POST[$key]) && $_POST[$key] == 'yes')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$row[$key] = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$row[$key] = 0;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_account_settings SET ' . $key . ' = :val WHERE AccountID = :account_id');\n\t\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t$stmt->bindValue(':val', $row[$key]);\n\t\t\t\t\t\t\t$stmt->execute();\n\n\t\t\t\t\t\t\tif($settings_updated == false)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tphoromatic_add_activity_stream_event('settings', null, 'modified');\n\t\t\t\t\t\t\t\t$settings_updated = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//echo phoromatic_server::$db->lastErrorMsg();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$main .= '<input type=\"checkbox\" name=\"' . $key . '\" ' . (isset($row[$key]) && $row[$key] === 1 ? 'checked=\"checked\" ' : '') . 'value=\"yes\" /> ' . $setting . '<br />';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</p>';\n\t\t\t\t}\n\n\t\t\t\tif(isset($_POST['env_var_update']))\n\t\t\t\t{\n\t\t\t\t\t$env_vars_show = array();\n\t\t\t\t\t$env_vars = array();\n\t\t\t\t\tforeach(pts_env::get_posted_options('phoromatic') as $ei => $ev)\n\t\t\t\t\t{\n\t\t\t\t\t\tarray_push($env_vars, $ei . '=' . $ev);\n\t\t\t\t\t\t$env_vars_show[$ei] = $ev;\n\t\t\t\t\t}\n\t\t\t\t\t$env_vars = implode(';', $env_vars);\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_account_settings SET GlobalEnvironmentVariables = :val WHERE AccountID = :account_id');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt->bindValue(':val', $env_vars);\n\t\t\t\t\t$stmt->execute();\n\t\t\t\t}\n\n\t\t\t\t$main .= '<p><input type=\"hidden\" value=\"1\" name=\"account_settings_update\" /><input type=\"submit\" value=\"Save Account Settings\" /></p>';\n\t\t\t\t$main .= '</form>';\n\n\t\t\t\t$main .= '<form name=\"system_form\" id=\"system_form\" action=\"?settings\" method=\"post\"><hr />';\n\t\t\t\t$main .= '<h2>Global Environment Variable Option Overrides</h2> <p>The below options are for environment variable controls that can be set remotely by the Phoromatic Server for use with Phoromatic clients be on the Phoronix Test Suite 10.8 or newer. See the Phoronix Test Suite documentation for more information on these environment variables. The below options will set the values unconditionally for all test schedules / benchmark tickets. Via the individual test schedules / benchmark tickets the environment variables can be set for that given testing rather than globally.</p>' . pts_env::get_html_options('phoromatic', $env_vars_show);\n\n\t\t\t\t$main .= '<p><input type=\"hidden\" value=\"1\" name=\"env_var_update\" /><input type=\"submit\" value=\"Save Global Override Settings\" /></p>';\n\t\t\t\t$main .= '</form>';\n\t\t\t}\n\n\t\t\t$main .= '<hr />\n\t\t\t<h2>Cache Settings</h2>\n\t\t\t<p>Proceed to the <a href=\"?caches\">download cache page</a> for information about the Phoromatic Server\\'s download caches.</p>';\n\n\t\t\t$main .= '<hr />\n\t\t\t<h2>User Password</h2>\n\t\t\t<p>Proceed to the <a href=\"?password\">password page</a> if you wish to update your account\\'s password.</p>';\n\n\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t{\n\t\t\t\t$main .= '<hr />\n\t\t\t\t<h2>Build A Suite</h2>\n\t\t\t\t<p><a href=\"?build_suite\">Create a custom test suite</a>.</p>';\n\n\n\t\t\t\t$update_script_path = phoromatic_server::phoromatic_account_path($_SESSION['AccountID']) . 'client-update-script.sh';\n\t\t\t\tif(isset($_POST['client_update_script']))\n\t\t\t\t{\n\t\t\t\t\tfile_put_contents($update_script_path, str_replace(\"\\r\\n\", PHP_EOL, $_POST['client_update_script']));\n\t\t\t\t}\n\n\t\t\t\tif(!is_file($update_script_path))\n\t\t\t\t{\n\t\t\t\t\t$script_contents = pts_file_io::file_get_contents(PTS_CORE_STATIC_PATH . 'sample-pts-client-update-script.sh');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$script_contents = pts_file_io::file_get_contents($update_script_path);\n\t\t\t\t}\n\n\t\t\t\t$main .= '<form name=\"update_client_script_form\" id=\"update_client_script_form\" action=\"?settings\" method=\"post\">\n<hr /><h2>Auto-Updating Clients</h2><p>If desired, you can paste a script in the below field if you wish to have Phoronix Test Suite / Phoromatic clients attempt to auto-update themselves. Any commands copied below are automatically executed by the client upon completing a test / beginning a new idle process / prior to attempting a system shutdown. If your script determines the client is to be updated, it should <em>reboot</em> the system afterwards to ensure no issues in the upgrade of the Phoronix Test Suite installation. A reference/example script is provided by default. This update script feature does not attempt to update the Phoromatic Server software.</p>\n\t\t\t\t<p><textarea style=\"width: 80%; height: 400px;\" name=\"client_update_script\" id=\"client_update_script\">' . $script_contents . '</textarea></p>\n\t\t\t\t<p><input type=\"submit\" value=\"Save Client Auto-Update Script\" /></p>\n\t\t\t\t</form>';\n\t\t\t}\n\n\t\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2015, Phoronix Media\n\tCopyright (C) 2008 - 2015, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_system_claim implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Phoromatic Client System Claim';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\techo phoromatic_webui_header_logged_in();\n\t\t$main = null;\n\n\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t{\n\nif(function_exists('ssh2_connect') && isset($_POST['ip']) && isset($_POST['port']) && isset($_POST['password']) && isset($_POST['username']))\n{\n\t$connection = ssh2_connect($_POST['ip'], $_POST['port']);\n\n\tif(ssh2_auth_password($connection, $_POST['username'], $_POST['password']))\n\t{\n\t\t$tmp_local_file = tempnam('/tmp', 'pts-ssh');\n\t\t$tmp_remote_file = 'pts-ssh-' . rand(9999, 99999);\n\n\t\tfile_put_contents($tmp_local_file, '#!/bin/sh\nif [ -w /var/lib/phoronix-test-suite/ ]\nthen\n\tPHORO_FILE_PATH=/var/lib/phoronix-test-suite/\nelif [ -w $HOME/.phoronix-test-suite/ ]\nthen\n\tPHORO_FILE_PATH=$HOME/.phoronix-test-suite/\nfi\n\necho \"' . phoromatic_web_socket_server_ip() . '\" >> $PHORO_FILE_PATH/phoromatic-servers\nmkdir -p $PHORO_FILE_PATH/modules-data/phoromatic\necho \"' . phoromatic_web_socket_server_addr() . '\" > $PHORO_FILE_PATH/modules-data/phoromatic/last-phoromatic-server\n');\n\n\t\tssh2_scp_send($connection, $tmp_local_file, $tmp_remote_file);\n\t\tunlink($tmp_local_file);\n\t\tssh2_exec($connection, 'chmod +x ' . $tmp_remote_file);\n\t\tssh2_exec($connection, './' . $tmp_remote_file);\n\t\tssh2_exec($connection, 'rm' . $tmp_remote_file);\n\t}\n}\n\t\t\tif((isset($_POST['ip_claim']) && !empty($_POST['ip_claim'])) && isset($_POST['ping']))\n\t\t\t{\n\t\t\t\t$ip_ping = ip2long($_POST['ip_claim']) !== false ? $_POST['ip_claim'] : null;\n\t\t\t\tif($ip_ping)\n\t\t\t\t{\n\t\t\t\t\techo '<h3>Ping Test: ' . $ip_ping . '</h3>';\n\t\t\t\t\techo '<pre>';\n\t\t\t\t\techo shell_exec('ping -c 1 ' . $ip_ping);\n\t\t\t\t\techo '</pre>';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if((isset($_POST['ip_claim']) && !empty($_POST['ip_claim'])) || (isset($_POST['mac_claim']) && !empty($_POST['mac_claim'])))\n\t\t\t{\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_system_association_claims (AccountID, IPAddress, NetworkMAC, CreationTime) VALUES (:account_id, :ip_address, :mac_address, :creation_time)');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':ip_address', $_POST['ip_claim']);\n\t\t\t\t$stmt->bindValue(':mac_address', $_POST['mac_claim']);\n\t\t\t\t$stmt->bindValue(':creation_time', phoromatic_server::current_time());\n\t\t\t\t$result = $stmt->execute();\n\t\t\t}\n\t\t\tif(isset($_POST['remove_claim']) && !empty($_POST['remove_claim']))\n\t\t\t{\n\t\t\t\tlist($ipc, $macc) = explode(',', $_POST['remove_claim']);\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_system_association_claims WHERE AccountID = :account_id AND NetworkMAC = :mac_address AND IPAddress = :ip_address');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':ip_address', $ipc);\n\t\t\t\t$stmt->bindValue(':mac_address', $macc);\n\t\t\t\t$stmt->bindValue(':creation_time', phoromatic_server::current_time());\n\t\t\t\t$result = $stmt->execute();\n\t\t\t}\n\n\t\t\t$main .= '<h2>Add Phoromatic Server Info Via SSH</h2>\n\t\t\t<p>If your Phoromatic client systems are SSH-enabled, you can specify their SSH connection information below. In doing so, the Phoromatic Server will do a one-time connection to it immediately to pre-seed the system with the Phoromatic Server account information for this account. This should allow the client systems to then find the server automatically next time the phoronix-test-suite is run. This command assumes the Phoronix Test Suite is already pre-installed on the client system in your desired configuration.</p>';\n\n\t\t\tif(function_exists('ssh2_connect'))\n\t\t\t{\n\t\t\t\t$main .= '<h3>Phoromatic Client SSH Information:</h3>';\n\t\t\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"ssh_connect\" method=\"post\">\n\t\t\t\t<p><strong>IP Address:</strong> <input type=\"text\" name=\"ip\" /></p>\n\t\t\t\t<p><strong>SSH Port:</strong> <input type=\"text\" name=\"port\" value=\"22\" /></p>\n\t\t\t\t<p><strong>Username:</strong> <input type=\"text\" name=\"username\" /></p>\n\t\t\t\t<p><strong>Password:</strong> <input type=\"password\" name=\"password\" /></p>\n\t\t\t\t<p><input name=\"submit\" value=\"Seed Phoromatic Server Account Information\" type=\"submit\" /></p>\n\t\t\t\t</form>';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$main .= '<h3>PHP SSH2 Must Be Installed For This Feature</h3>';\n\t\t\t}\n\t\t\t$main .= '<hr />';\n\t\t\t$main .= '<h2>Add Phoromatic Server Info Via IP/MAC</h2>\n\t\t\t<p>If deploying a Phoromatic Server within an organization, you can attempt for automatic configuration of Phoromatic clients if you know the system\\'s IP or MAC addresses. When specifying either of these fields, if a Phoromatic client attempts to connect to this Phoromatic system without being associated to an account, it will be claimed by this account as long as no other Phoromatic accounts are attempting to claim the IP/MAC. This method can be particularly useful if running the Phoromatic client as a systemd/Upstart service where it will continually poll every 90 seconds auto-detected Phoromatic Servers on the LAN via zero-conf networking. For this feature to work, the zero-conf networking (Avahi) support must be enabled and working.</p>';\n\t\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"auto_associate\" method=\"post\">\n\t\t\t<p><strong>IP Address Claim:</strong> <input type=\"text\" name=\"ip_claim\" /></p>\n\t\t\t<p><strong>MAC Address Claim:</strong> <input type=\"text\" name=\"mac_claim\" /></p>\n\t\t\t<p><input name=\"ping\" value=\"Ping Test\" type=\"submit\" /> &nbsp; <input name=\"submit\" value=\"Submit Claim\" type=\"submit\" /></p>\n\t\t\t</form>';\n\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_system_association_claims WHERE AccountID = :account_id ORDER BY IPAddress ASC');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$result = $stmt->execute();\n\t\t\t$claims = array();\n\t\t\t$main .= '<p style=\"max-height: 500px; overflow-y: auto; \">';\n\t\t\twhile($row = $result->fetchArray())\n\t\t\t{\n\t\t\t\t$ip = $row['IPAddress'] != null ? $row['IPAddress'] : '<em>' . pts_network::mac_to_ip($row['NetworkMAC']) . '</em>';\n\n\t\t\t\t$main .= $ip . ' ' . $row['NetworkMAC'] . '<br />';\n\t\t\t\tarray_push($claims, $row['IPAddress'] . ',' . $row['NetworkMAC']);\n\t\t\t}\n\t\t\t$main .= '</p>';\n\n\t\t\tif(!empty($claims))\n\t\t\t{\n\t\t\t\t$main .= '<hr /><h2>Remove Claim</h2><p>Removing a claimed IP / MAC address.</p>';\n\t\t\t\t$main .= '<p><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"remove_claim\" method=\"post\"><select name=\"remove_claim\" id=\"remove_claim\">';\n\n\t\t\t\tforeach($claims as $claim)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<option value=\"' . $claim . '\">' . str_replace(',', ' ', $claim) . '</option>';\n\t\t\t\t}\n\t\t\t\t$main .= '</select> <input name=\"submit\" value=\"Remove Claim\" type=\"submit\" /></form></p>';\n\t\t\t}\n\n\t\t\t$main .= '<hr />';\n\t\t}\n\n\t\t$right = null;\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in($right));\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2021, Phoronix Media\n\tCopyright (C) 2008 - 2021, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_systems implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Systems';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\techo phoromatic_webui_header_logged_in();\n\t\t$main = null;\n\n\t\tif(!PHOROMATIC_USER_IS_VIEWER && !empty($PATH[0]) && isset($_POST['system_title']) && !empty($_POST['system_title']) && isset($_POST['system_description']) && isset($_POST['system_state']))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET Title = :title, Description = :description, State = :state, CurrentTask = \\'Awaiting Task\\', BlockPowerOffs = :block_power_offs WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t$stmt->bindValue(':title', $_POST['system_title']);\n\t\t\t$stmt->bindValue(':description', $_POST['system_description']);\n\t\t\t$stmt->bindValue(':state', $_POST['system_state']);\n\t\t\t$stmt->bindValue(':block_power_offs', $_POST['block_power_offs']);\n\t\t\t$stmt->execute();\n\t\t}\n\t\tif(!PHOROMATIC_USER_IS_VIEWER && !empty($PATH[0]) && isset($_POST['maintenance_mode']))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET MaintenanceMode = :maintenance_mode WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t$stmt->bindValue(':maintenance_mode', $_POST['maintenance_mode']);\n\t\t\t$stmt->execute();\n\t\t}\n\t\tif(!PHOROMATIC_USER_IS_VIEWER && !empty($PATH[0]) && isset($_GET['clear_system_warnings']))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_system_client_errors WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t$stmt->execute();\n\t\t}\n\t\tif(!PHOROMATIC_USER_IS_VIEWER && !empty($PATH[0]) && isset($_POST['tick_thread_reboot']))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET TickThreadEvent = :event WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t$stmt->bindValue(':event', time() . ':reboot');\n\t\t\t$stmt->execute();\n\t\t}\n\t\tif(!PHOROMATIC_USER_IS_VIEWER && !empty($PATH[0]) && isset($_POST['tick_thread_halt']))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET TickThreadEvent = :event WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t$stmt->bindValue(':event', time() . ':halt-testing');\n\t\t\t$stmt->execute();\n\t\t}\n\t\tif(!PHOROMATIC_USER_IS_VIEWER && !empty($PATH[0]) && isset($_GET['really_delete_system']))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_systems WHERE AccountID = :account_id AND SystemID = :system_id LIMIT 1');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t$stmt->execute();\n\t\t}\n\t\tif(!PHOROMATIC_USER_IS_VIEWER && !empty($PATH[0]) && isset($_POST['system_var_names'])&& isset($_POST['system_var_values']))\n\t\t{\n\t\t\t$vars = array();\n\t\t\tforeach($_POST['system_var_names'] as $i => $name)\n\t\t\t{\n\t\t\t\tif(isset($_POST['system_var_values'][$i]))\n\t\t\t\t{\n\t\t\t\t\t$name = pts_strings::keep_in_string(strtoupper($name), pts_strings::CHAR_LETTER | pts_strings::CHAR_NUMERIC | pts_strings::CHAR_UNDERSCORE);\n\t\t\t\t\t$val = pts_strings::keep_in_string($_POST['system_var_values'][$i], pts_strings::CHAR_LETTER | pts_strings::CHAR_NUMERIC | pts_strings::CHAR_DASH | pts_strings::CHAR_UNDERSCORE | pts_strings::CHAR_COMMA | pts_strings::CHAR_SLASH | pts_strings::CHAR_SPACE | pts_strings::CHAR_DECIMAL | pts_strings::CHAR_PLUS | pts_strings::CHAR_EQUAL);\n\n\t\t\t\t\tif($name != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$vars[$name] = $val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$var_string = null;\n\t\t\tforeach($vars as $name => $val)\n\t\t\t{\n\t\t\t\t$var_string .= $name . '=' . $val . ';';\n\t\t\t}\n\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET SystemVariables = :system_variables WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t$stmt->bindValue(':system_variables', $var_string);\n\t\t\t$stmt->execute();\n\t\t}\n\n\t\tif(!empty($PATH[0]))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_systems WHERE AccountID = :account_id AND SystemID = :system_id ORDER BY LastCommunication DESC');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t$result = $stmt->execute();\n\n\t\t\tif(!empty($result))\n\t\t\t{\n\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\tif(!PHOROMATIC_USER_IS_VIEWER && isset($PATH[1]) && $PATH[1] == 'edit')\n\t\t\t\t{\n\t\t\t\t\t$main = '<h1>' . $row['Title'] . '</h1>';\n\t\t\t\t\t$main .= '<form name=\"system_form\" id=\"system_form\" action=\"?systems/' . $PATH[0] . '\" method=\"post\" onsubmit=\"return phoromatic_system_edit(this);\">\n\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">System Title:</div> <input type=\"text\" style=\"width: 400px;\" name=\"system_title\" value=\"' . $row['Title'] . '\" /></p>\n\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">System Description:</div> <textarea style=\"width: 400px;\" name=\"system_description\">' . $row['Description'] . '</textarea></p>\n\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">System State:</div><select name=\"system_state\" style=\"width: 200px;\"><option value=\"-1\">Disabled</option><option value=\"1\" selected=\"selected\">Enabled</option></select></p>\n\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">Allow Phoromatic To Power Off System When Testing Complete:</div><select name=\"block_power_offs\" style=\"width: 200px;\"><option value=\"0\">Permitted</option><option value=\"1\">Block Power-Off Signaling For This System</option></select> <sup>Assuming the power-off setting is enabled from the account settings page.</sup></p>\n\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">&nbsp;</div> <input type=\"submit\" value=\"Submit\" /></p></form>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$main = '<h1>' . $row['Title'] . '</h1><p><em>' . ($row['Description'] != null ? $row['Description'] : 'No system description.') . '</em></p>';\n\n\t\t\t\t\tif(phoromatic_server::system_check_if_down($_SESSION['AccountID'], $row['SystemID'], $row['LastCommunication'], $row['CurrentTask']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h3 style=\"text-align: center; color: red;\">This system appears to be offline or inactive and there are pending tests scheduled to be run on this system that have yet to be completed. This system has not communicated with the Phoromatic Server in ' . pts_strings::format_time((time() - strtotime($row['LastCommunication'])), 'SECONDS', true, 60) . '.</h3>';\n\t\t\t\t\t}\n\n\t\t\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<p><a href=\"?systems/' . $PATH[0] . '/edit\">Edit Task & Enable/Disable System</a></p>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch($row['State'])\n\t\t\t\t{\n\t\t\t\t\tcase -1:\n\t\t\t\t\t\t$state = 'Disabled';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\t$state = 'Connected; Awaiting Approval';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\t$state = 'Active';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$main .= '<hr />';\n\t\t\t\t$status_extra = null;\n\t\t\t\tif(!empty($row['CurrentProcessSchedule']))\n\t\t\t\t{\n\t\t\t\t\t$status_extra = ' - <a href=\"/?schedules/' . $row['CurrentProcessSchedule'] . '\">' . phoromatic_server::schedule_id_to_name($row['CurrentProcessSchedule']) . '</a>';\n\t\t\t\t}\n\t\t\t\telse if(!empty($row['CurrentProcessTicket']))\n\t\t\t\t{\n\t\t\t\t\t$status_extra = ' - <a href=\"/?benchmark/' . $row['CurrentProcessTicket'] . '\">' . phoromatic_server::ticket_id_to_name($row['CurrentProcessTicket']) . '</a>';\n\t\t\t\t}\n\t\t\t\t$info_table = array('Status:' => $row['CurrentTask'] . $status_extra, 'Last Communication:' => phoromatic_user_friendly_timedate($row['LastCommunication']), 'Estimated Time Left For Task: ' => phoromatic_compute_estimated_time_remaining_string($row['EstimatedTimeForTask'], $row['LastCommunication']), 'State:' => $state, 'Phoronix Test Suite Client:' => $row['ClientVersion'], 'Initial Creation:' => phoromatic_user_friendly_timedate($row['CreatedOn']), 'System ID:' => $row['SystemID'], 'Last IP:' => $row['LastIP'], 'MAC Address:' => $row['NetworkMAC'], 'Wake-On-LAN Information:' => (empty($row['NetworkWakeOnLAN']) ? 'N/A' : $row['NetworkWakeOnLAN']), 'Power-Off Sequence Permitted: ' => ($row['BlockPowerOffs'] == 1 ? 'Blocked' : 'Permitted'));\n\t\t\t\t$main .= '<h2>System State</h2>' . pts_webui::r2d_array_to_table($info_table, 'auto');\n\n\t\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t\t{\n\t\t\t\t\tif($row['MaintenanceMode'] == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t$mm_str = 'Disable Maintenance Mode';\n\t\t\t\t\t\t$mm_val = 0;\n\t\t\t\t\t\t$mm_onclick = 'return true;';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$mm_str = 'Enter Maintenance Mode';\n\t\t\t\t\t\t$mm_val = 1;\n\t\t\t\t\t\t$mm_onclick = 'return confirm(\\'Enter maintenance mode now?\\');';\n\t\t\t\t\t}\n\n\t\t\t\t\t$main .= '<p><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_groups\" method=\"post\"><input type=\"hidden\" name=\"maintenance_mode\" value=\"' . $mm_val . '\" /><input type=\"submit\" value=\"' . $mm_str . '\" onclick=\"' . $mm_onclick . '\" style=\"float: left; margin: 0 20px 5px 0;\" /></form> Putting the system into maintenance mode will power up the system (if supported and applicable) and cause the Phoronix Test Suite Phoromatic client to idle and block all testing until the mode has been disabled. If a test is already running on the system, the maintenance mode will not be entered until after the testing has completed. The maintenance mode can be used if wishing to update the system software or carry out other tasks without interfering with the Phoromatic client process. Once disabled, the Phoronix Test Suite will continue to function as normal.</p>';\n\n\t\t\t\t\tif($row['CoreVersion'] >= 5730)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<p><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_groups\" method=\"post\"><input type=\"hidden\" name=\"tick_thread_reboot\" value=\"1\" /><input type=\"submit\" value=\"Reboot System\" style=\"float: left; margin: 0 20px 5px 0;\" /></form> If the system is currently powered up and connected to the Phoromatic Server, this will send a message to the system to issue a reboot -- in case the system is hung on a test or you wish to otherwise manually reboot the server.</p>';\n\n\t\t\t\t\t\t$main .= '<p><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_groups\" method=\"post\"><input type=\"hidden\" name=\"tick_thread_halt\" value=\"1\" /><input type=\"submit\" value=\"Halt Testing\" style=\"float: left; margin: 0 20px 5px 0;\" /></form> If the system is currently powered up and running a test/benchmark via the Phoromatic Server, this will tell the system to halt the testing prematurely as soon as the currently-active test has finished. The results successfully ran will then be uploaded to the Phoromatic Server.</p>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$main .= '<hr /><h2>System Variables</h2><p>System variables allow for providing per-system information in an easy-to-use manner for other parts of the Phoromatic system. Initially these named variables can be used for the results identifier when <a href=\"/?benchmark\">creating a benchmark ticket</a> and in the future the system variables may be used elsewhere. Examples of system variables could include providing a <em>.SERIAL</em> variable to acknowledge the system\\'s serial number that may not be presented elsewhere by the Phoronix Test Suite, <em>.ADMIN</em> for the system\\'s local administrator, etc. Variable names can only be alpha-numeric strings while their values are also alpha-numeric strings but with spaces allowed. System variables are always prefixed by a period. These system variables are also automatically transferred to the Phoromatic clients and set as environment variables prior to running any scheduled tests/process via Phoromatic.</p>';\n\n\t\t\t\t$system_variables = $row['SystemVariables'] != null ? explode(';', $row['SystemVariables']) : array();\n\n\t\t\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_system_variables\" method=\"post\">';\n\t\t\t\t$main .= '<table width=\"80%\"><tr><th>Variable Name</th><th>Value</th></tr>';\n\t\t\t\tforeach($system_variables as $i => $v_string)\n\t\t\t\t{\n\t\t\t\t\t$var = explode('=', $v_string);\n\t\t\t\t\tif(count($var) == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<tr id=\"system_var_' . $i . '\">';\n\t\t\t\t\t\t$main .= '<td><span style=\"font-weight: 800; font-size: 16px;\">.</span><input name=\"system_var_names[]\" value=\"' . $var[0]. '\" readonly /></td>';\n\t\t\t\t\t\t$main .= '<td><input name=\"system_var_values[]\" value=\"' . $var[1]. '\" /></td>';\n\t\t\t\t\t\t$main .= '</tr>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$main .= '<tr id=\"system_var_' . ($i + 1) . '\">';\n\t\t\t\t$main .= '<td><span style=\"font-weight: 800; font-size: 16px;\">.</span><input name=\"system_var_names[]\" /></td>';\n\t\t\t\t$main .= '<td><input name=\"system_var_values[]\" /></td>';\n\t\t\t\t$main .= '</tr>';\n\t\t\t\t$main .= '</table>';\n\t\t\t\t$main .= '<p><input name=\"submit\" value=\"Update System Variables\" type=\"submit\" /></p></form>';\n\n\t\t\t\t$main .= '<hr /><h2>System Components</h2><div style=\"float: left; width: 50%;\">';\n\t\t\t\t$components = pts_result_file_analyzer::system_component_string_to_array($row['Hardware']);\n\t\t\t\t$main .= pts_webui::r2d_array_to_table($components) . '</div><div style=\"float: left; width: 50%;\">';\n\t\t\t\t$components = pts_result_file_analyzer::system_component_string_to_array($row['Software']);\n\t\t\t\t$main .= pts_webui::r2d_array_to_table($components) . '</div>';\n\n\t\t\t\tif(!empty($row['SystemProperties']))\n\t\t\t\t{\n\t\t\t\t\t$properties = json_decode($row['SystemProperties'], true);\n\t\t\t\t\t$main .= '<blockquote style=\"max-height: 440px; overflow: scroll; clear: both;\">';\n\t\t\t\t\tforeach($properties as $component => $component_properties)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<strong>' . strtoupper($component) . '</strong><br />';\n\t\t\t\t\t\tforeach($component_properties as $property => $value)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$main .= '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' . $property . ' = ';\n\n\t\t\t\t\t\t\tif(is_array($value))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tforeach($value as $si => $sv)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(is_array($sv))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tforeach($sv as $ssi => $ssv)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t$main .= '<br />' . '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' . $ssi . ' = ' . $ssv;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$main .= '<br />';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$main .= '<br />' . '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' . $sv . ' = ' . $sv . PHP_EOL;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//echo PHP_EOL;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$main .= $value . '<br />';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$main .= '<br />';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</blockquote>';\n\t\t\t\t}\n\n\t\t\t\t$system_path = phoromatic_server::phoromatic_account_system_path($_SESSION['AccountID'], $row['SystemID']);\n\t\t\t\t$main .= '<hr />';\n\t\t\t\tif(is_file($system_path . 'sensors-pool.json'))\n\t\t\t\t{\n\t\t\t\t\t$sensors = file_get_contents($system_path . 'sensors-pool.json');\n\t\t\t\t\t$sensors = json_decode($sensors, true);\n\n\t\t\t\t\tforeach($sensors as $title => $s)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!isset($s['values']) || count($s['values']) < 5 || max($s['values']) == min($s['values']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$graph = new pts_sys_graph(array('title' => $title, 'x_scale' => 'm', 'y_scale' => $s['unit'], 'text_size' => 12, 'reverse_x_direction' => false, 'width' => 920, 'height' => 400));\n\t\t\t\t\t\t$graph->render_base();\n\t\t\t\t\t\t$svg_dom = $graph->render_graph_data($s['values']);\n\t\t\t\t\t\tif($svg_dom === false)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$output_type = 'SVG';\n\t\t\t\t\t\t$graph = $svg_dom->output(null, $output_type);\n\t\t\t\t\t\t$main .= '<p align=\"center\">' . substr($graph, strpos($graph, '<svg')) . '</p>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(is_file($system_path . 'sensors.json'))\n\t\t\t\t{\n\t\t\t\t\t$sensor_file = file_get_contents($system_path . 'sensors.json');\n\t\t\t\t\t$sensor_file = json_decode($sensor_file, true);\n\t\t\t\t\tif($sensor_file && isset($sensor_file['sensors']) && !empty($sensor_file['sensors']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$i = 0;\n\t\t\t\t\t\t$col = array(1 => array(), 2 => array(), 3 => array(), 0 => array());\n\t\t\t\t\t\tforeach($sensor_file['sensors'] as $name => $sensor)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tarray_push($col[($i % 4)], '<strong>' . $name . ':</strong> ' . $sensor['value'] . ' ' . $sensor['unit']);\n\t\t\t\t\t\t\t$i++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$main .= '<h2>System Sensors</h2>';\n\t\t\t\t\t\tforeach($col as $sensors)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$main .= '<div style=\"float: left; width: 25%;\">';\n\t\t\t\t\t\t\tforeach($sensors as $sensor)\n\t\t\t\t\t\t\t\t$main .= '<p>' . $sensor . '</p>';\n\t\t\t\t\t\t\t$main .= '</div>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$main .= '<p><em><strong>Last Updated:</strong>' . date('d F H:i', filemtime(phoromatic_server::phoromatic_account_system_path($_SESSION['AccountID'], $row['SystemID']) . 'sensors.json')) . ' <strong>System Uptime:</strong> ' . $sensor_file['uptime'] . ' Minutes</em></p>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$log_file = phoromatic_server::phoromatic_account_system_path($_SESSION['AccountID'], $row['SystemID']) . 'phoronix-test-suite.log';\n\t\t\t\tif(is_file($log_file))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h2>Phoronix Test Suite Client Log</h2>';\n\t\t\t\t\t$main .= '<p><textarea style=\"width: 60%; height: 200px;\">' . file_get_contents($log_file)  . '</textarea></p>';\n\t\t\t\t\t$main .= '<p><em><strong>Last Updated:</strong>' . date ('d F H:i', filemtime($log_file)) . '</em></p>';\n\t\t\t\t}\n\n\t\t\t\t$groups = $row['Groups'] != null ? explode('#', $row['Groups']) : array();\n\t\t\t\tforeach($groups as $i => $group)\n\t\t\t\t{\n\t\t\t\t\tif(empty($group))\n\t\t\t\t\t\tunset($groups[$i]);\n\t\t\t\t}\n\t\t\t\t$schedules = phoromatic_server::schedules_that_run_on_system($_SESSION['AccountID'], $row['SystemID']);\n\t\t\t\tif(!empty($groups) || !empty($schedules))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h2>Schedules</h2>';\n\t\t\t\t\tif(!empty($groups))\n\t\t\t\t\t\t$group_msg = 'This system belongs to the following groups: <strong>' . implode(', ', $groups) . '</strong>.';\n\t\t\t\t\telse\n\t\t\t\t\t\t$group_msg = 'This system does not currently belong to any groups.';\n\n\t\t\t\t\t$main .= '<p>' . $group_msg . ' Manage groups via the <a href=\"?systems\">systems page</a>.</p>';\n\n\t\t\t\t\tif(!empty($schedules))\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\" style=\"margin: 0 10%;\"><ul><li><h1>Schedules Running On This System</h1></li>';\n\t\t\t\t\t\tforeach($schedules as &$row)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$group_count = empty($row['RunTargetGroups']) ? 0 : count(explode(',', $row['RunTargetGroups']));\n\t\t\t\t\t\t\t$main .= '<a href=\"?schedules/' . $row['ScheduleID'] . '\"><li>' . $row['Title'] . '<br /><table><tr><td>' . pts_strings::plural_handler(count(phoromatic_server::systems_associated_with_schedule($_SESSION['AccountID'], $row['ScheduleID'])), 'System') . '</td><td>' . pts_strings::plural_handler($group_count, 'Group') . '</td><td>' . pts_strings::plural_handler(phoromatic_results_for_schedule($row['ScheduleID']), 'Result') . '</td><td><strong>' . phoromatic_schedule_activeon_string($row['ActiveOn'], $row['RunAt']) . '</strong></td></tr></table></li></a>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$main .= '</ul></div>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime FROM phoromatic_results WHERE AccountID = :account_id AND SystemID = :system_id ORDER BY UploadTime DESC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t\t$test_result_result = $stmt->execute();\n\t\t\t\t$test_result_row = $test_result_result->fetchArray();\n\t\t\t\t$results = 0;\n\n\t\t\t\tif($test_result_row != false)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h2>Test Results</h2>';\n\t\t\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\" style=\"margin: 0 10%;\">';\n\t\t\t\t\t$main .= '<ul><li><h1>Recent Test Results</h1></li>';\n\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\tif($results > 20)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$main .= '<a href=\"?result/' . $test_result_row['PPRID'] . '\"><li>' . $test_result_row['Title'] . '<br /><table><tr><td>' . phoromatic_system_id_to_name($test_result_row['SystemID']) . '</td><td>' . phoromatic_user_friendly_timedate($test_result_row['UploadTime']) .  '</td></tr></table></li></a>';\n\t\t\t\t\t\t$results++;\n\n\t\t\t\t\t}\n\t\t\t\t\twhile($test_result_row = $test_result_result->fetchArray());\n\t\t\t\t}\n\n\t\t\t\tif($results > 0)\n\t\t\t\t{\n\t\t\t\t\t$main .= '</ul></div>';\n\t\t\t\t}\n\n\n\t\t\t\t// Any System Errors?\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT ErrorMessage, UploadTime, SystemID, TestIdentifier FROM phoromatic_system_client_errors WHERE AccountID = :account_id AND SystemID = :system_id AND UploadTime >= date(\"now\", \"-14 day\") ORDER BY UploadTime DESC LIMIT 300');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$row = $result->fetchArray();\n\t\t\t\tif($row != false)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h2>Recent System Warnings &amp; Errors</h2>';\n\t\t\t\t\t$main .= '<div style=\"overflow: auto; max-height: 500px;\">';\n\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '[' . $row['UploadTime'] . '] <strong>' . $row['TestIdentifier'] . '</strong>: ' .$row['ErrorMessage'] . '<br />';\n\t\t\t\t\t}\n\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t$main .= '</div>';\n\t\t\t\t\t$main .= '<p align=\"center\"><a href=\"?systems/' . $PATH[0] . '/&clear_system_warnings\">Clear System Warnings/Errors</a></p>';\n\t\t\t\t}\n\n\t\t\t\t$test_install_json = phoromatic_server::phoromatic_account_system_path($_SESSION['AccountID'], $PATH[0]) . 'test-installations.json';\n\t\t\t\tif(is_file($test_install_json))\n\t\t\t\t{\n\t\t\t\t\t$test_install_json = json_decode(file_get_contents($test_install_json), true);\n\t\t\t\t\tif(!empty($test_install_json))\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<hr /><h2>Test Profile Installations</h2>';\n\t\t\t\t\t\tforeach($test_install_json as $test_profile => $ti_data)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$test_installation = new pts_installed_test($ti_data);\n\t\t\t\t\t\t\t$status = $test_installation->get_install_status();\n\t\t\t\t\t\t\tif($status == 'INSTALLED')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$status = '<span style=\"color: green;\">' . $status . '</span> ' . ($test_installation->get_run_count() > 0 ? '<strong>Times Run:</strong> ' . $test_installation->get_run_count() : '');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if($status == 'INSTALL_FAILED')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$status = '<span style=\"color: red; font-weight: bold;\">INSTALL FAILED</span>';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$error_output = '';\n\t\t\t\t\t\t\t$runtime_errors = $test_installation->get_runtime_errors();\n\t\t\t\t\t\t\t$install_errors = $test_installation->get_install_errors();\n\t\t\t\t\t\t\tif(!empty($runtime_errors))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tforeach($runtime_errors as $e)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$error_output .= '<br />' . trim((empty($e['description']) ? '' : '<em>' . $e['description'] . '</em> - ') . 'Last Attempted: ' . $e['date_time']);\n\t\t\t\t\t\t\t\t\tforeach($e['errors'] as $error)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$error_output .= '<br /> &nbsp; &nbsp; <span style=\"color: red; font-weight: bold;\">    ' . $error . '</span>';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!empty($install_errors))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tforeach($install_errors as $install_error)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$error_output .= '<br /><span style=\"color: red; font-weight: bold;\">    ' . $install_error . '</span>';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$main .= '<p><strong>' .  $test_profile . '</strong> ' .  $status . ' (Install Date: ' . $test_installation->get_install_date() . ')' . $error_output . '</p>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif($main == null)\n\t\t{\n\t\t\tif(!PHOROMATIC_USER_IS_VIEWER && isset($_POST['new_group']) && !empty($_POST['new_group']))\n\t\t\t{\n\t\t\t\t$group = trim($_POST['new_group']);\n\n\t\t\t\tif($group)\n\t\t\t\t{\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_groups (AccountID, GroupName) VALUES (:account_id, :group_name)');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt->bindValue(':group_name', $group);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\tphoromatic_add_activity_stream_event('groups', $group, 'added');\n\n\t\t\t\t\tif(!empty($_POST['systems_for_group']) && is_array($_POST['systems_for_group']))\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach($_POST['systems_for_group'] as $sid)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Find current groups\n\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Groups FROM phoromatic_systems WHERE AccountID = :account_id AND SystemID = :system_id ORDER BY LastCommunication DESC');\n\t\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t$stmt->bindValue(':system_id', $sid);\n\t\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t\t\t$row = $result->fetchArray();\n\t\t\t\t\t\t\t$existing_groups = $row != false ? $row['Groups'] : null;\n\n\t\t\t\t\t\t\t// Append new Group\n\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET Groups = :new_group WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t$stmt->bindValue(':system_id', $sid);\n\t\t\t\t\t\t\t$stmt->bindValue(':new_group', $existing_groups . '#' . $group . '#');\n\t\t\t\t\t\t\t$stmt->execute();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(!PHOROMATIC_USER_IS_VIEWER && isset($_POST['system_group_update']))\n\t\t\t{\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT SystemID FROM phoromatic_systems WHERE AccountID = :account_id');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\tphoromatic_add_activity_stream_event('groups', null, 'modified');\n\n\t\t\t\twhile($row = $result->fetchArray())\n\t\t\t\t{\n\t\t\t\t\tif(isset($_POST['groups_' . $row['SystemID']]))\n\t\t\t\t\t{\n\t\t\t\t\t\t$group_string = null;\n\t\t\t\t\t\tforeach($_POST['groups_' . $row['SystemID']] as $group)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif($group != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$group_string .= '#' . $group . '#';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$stmt1 = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET Groups = :new_groups WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t\t\t\t\t$stmt1->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t$stmt1->bindValue(':system_id', $row['SystemID']);\n\t\t\t\t\t\t\t$stmt1->bindValue(':new_groups', $group_string);\n\t\t\t\t\t\t\t$stmt1->execute();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(!PHOROMATIC_USER_IS_VIEWER && isset($_POST['remove_group']))\n\t\t\t{\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_groups WHERE AccountID = :account_id AND GroupName = :group_name');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':group_name', $_POST['remove_group']);\n\t\t\t\t$stmt->execute();\n\t\t\t\tphoromatic_add_activity_stream_event('groups', $group, 'removed');\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT SystemID, Groups FROM phoromatic_systems WHERE AccountID = :account_id AND Groups LIKE \\'%#' . $_POST['remove_group'] . '#%\\'');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\twhile($row = $result->fetchArray())\n\t\t\t\t{\n\t\t\t\t\t$revised_groups = str_replace('#' . $_POST['remove_group'] . '#', '', $row['Groups']);\n\n\t\t\t\t\t$stmt1 = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET Groups = :new_groups WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t\t\t$stmt1->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt1->bindValue(':system_id', $row['SystemID']);\n\t\t\t\t\t$stmt1->bindValue(':new_groups', $revised_groups);\n\t\t\t\t\t$stmt1->execute();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(!PHOROMATIC_USER_IS_VIEWER && isset($_POST['remove_inactive_systems']) && is_numeric($_POST['remove_inactive_systems']) && $_POST['remove_inactive_systems'] > 1)\n\t\t\t{\n\t\t\t\t// $_POST['remove_inactive_systems'] is number of days system is without activity before removing\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET State = :state WHERE AccountID = :account_id AND (julianday() - julianday(LastCommunication)) > :inactive_days_before_removal');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':state', -1);\n\t\t\t\t$stmt->bindValue(':inactive_days_before_removal', $_POST['remove_inactive_systems']);\n\t\t\t\t$stmt->execute();\n\t\t\t}\n\n\t\t\t$main = '<h1>Test Systems</h1>';\n\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t{\n\t\t\t\t$main .= phoromatic_systems_needing_attention();\n\t\t\t\t$main .= '<h2>Add A System</h2>\n\t\t\t\t<p>To connect a <a href=\"http://www.phoronix-test-suite.com/\">Phoronix Test Suite</a> test system to this account for remotely managing and/or carrying out routine automated benchmarking, follow these simple and quick steps:</p>\n\t\t\t\t<p>From a system with Phoronix Test Suite installed, run <strong>phoronix-test-suite phoromatic.connect ' . phoromatic_web_socket_server_addr() . '</strong>. (The test system must be able to access this server\\'s correct IP address / domain name.)</p><p>When you have run the command from the test system, you will need to log into this page on Phoromatic server again where you can approve the system and configure the system settings so you can begin using it as part of this Phoromatic account.</p><p>Repeat the two steps for as many systems as you would like. When you are all done -- if you haven\\'t done so already, you can start creating test schedules, groups, and other Phoromatic events.</p>\n\t\t\t\t<p>Those having to connect many Phoronix Test Suite Phoromatic clients can also attempt <a href=\"?system_claim\">adding the server configuration</a> via SSH or an IP/MAC address claim.</p>\n\t\t\t\t<p>The Phoronix Test Suite ships with a <em>phoromatic-client</em> systemd example service file for automatically starting the Phoromatic client process after the initial configuration process is complete.</p>\n\t\t\t\t<p><button onclick=\"javascript:window.location.replace(\\'?system_claim\\');\">Add Via SSH Or IP/MAC Claim</button></p>';\n\n\t\t\t}\n\t\t\t$main .= '<hr />\n\n\t\t\t<h2>Systems</h2>\n\t\t\t<div class=\"pts_phoromatic_info_box_area\">\n\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><h1>Active Systems</h1></li>';\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, LocalIP, CurrentTask, LastCommunication, EstimatedTimeForTask, TaskPercentComplete FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 ORDER BY LastCommunication DESC');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\t\t\t\t\t$active_system_count = 0;\n\n\t\t\t\t\tif($row == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Systems Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$acti = phoromatic_compute_estimated_time_remaining_string($row['EstimatedTimeForTask'], $row['LastCommunication']) . ($row['TaskPercentComplete'] > 0 ? ' [' . $row['TaskPercentComplete'] . '% Complete]' : null);\n\t\t\t\t\t\t\tif(empty($acti))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$next_job_in = phoromatic_server::time_to_next_scheduled_job($_SESSION['AccountID'], $row['SystemID']);\n\t\t\t\t\t\t\t\tif($next_job_in > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif($next_job_in > 600)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$next_job_in = round($next_job_in / 60);\n\t\t\t\t\t\t\t\t\t\t$next_unit = 'hours';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$next_unit = 'minutes';\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t$acti = 'Next job in ' . $next_job_in . ' ' . $next_unit;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$main .= '<a href=\"?systems/' . $row['SystemID'] . '\"><li>' . $row['Title'] . '<br /><table><tr><td>' . $row['LocalIP'] . '</td><td><strong>' . $row['CurrentTask'] . '</strong></td><td><strong>' . $acti . '</strong></td><td><strong>Last Communication:</strong> ' . date('j F Y H:i', strtotime($row['LastCommunication'])) . '</td></tr></table></li></a>';\n\t\t\t\t\t\t\t$active_system_count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t}\n\n\n\t\t\t$main .= '</ul>';\n\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, LocalIP, CurrentTask, LastCommunication, EstimatedTimeForTask, TaskPercentComplete FROM phoromatic_systems WHERE AccountID = :account_id AND State < 0 ORDER BY LastCommunication DESC');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$result = $stmt->execute();\n\t\t\t$row = $result->fetchArray();\n\n\t\t\tif($row != false)\n\t\t\t{\n\t\t\t\t$main .= '<ul>\n\t\t\t\t<li><h1>Inactive Systems</h1></li>';\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\t$main .= '<a href=\"?systems/' . $row['SystemID'] . '\"><li>' . $row['Title'] . '<br /><table><tr><td>' . $row['LocalIP'] . '</td><td><strong>' . $row['CurrentTask'] . '</strong></td><td><strong>Deactivated</strong></td><td><strong>Last Communication:</strong> ' . date('j F Y H:i', strtotime($row['LastCommunication'])) . '</td></tr></table></li></a>';\n\t\t\t\t}\n\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t$main .= '</ul>';\n\t\t\t}\n\n\n\t\t\t$main .= '</div>';\n\n\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t{\n\t\t\t\t$main .= '<hr />\n\t\t\t\t<h2>System Groups</h2>\n\t\t\t\t<p>System groups make it very easy to organize multiple test systems for targeting by test schedules. You can always add/remove systems to groups, create new groups, and add systems to multiple groups. After creating a group and adding systems to the group, you can begin targeting tests against a particular group of systems. Systems can always be added/removed from groups later and a system can belong to multiple groups.</p>';\n\n\n\t\t\t\t$main .= '<div style=\"float: left;\"><form name=\"new_group_form\" id=\"new_group_form\" action=\"?systems\" method=\"post\" onsubmit=\"return phoromatic_new_group(this);\">\n\t\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">New Group Name:</div> <input type=\"text\" style=\"width: 300px;\" name=\"new_group\" value=\"\" /></p>\n\t\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">Select System(s) To Add To Group:</div><select name=\"systems_for_group[]\" multiple=\"multiple\" style=\"width: 300px;\">';\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 ORDER BY Title ASC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\tif($row != false)\n\t\t\t\t{\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<option value=\"' . $row['SystemID'] . '\">' . $row['Title'] . '</option>';\n\t\t\t\t\t}\n\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t}\n\n\n\t\t\t\t$main .= '</select></p>\n\t\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">&nbsp;</div> <input type=\"submit\" value=\"Create Group\" /></p></form></div>';\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT GroupName FROM phoromatic_groups WHERE AccountID = :account_id ORDER BY GroupName ASC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\tif($row != false)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<div style=\"float: left; margin-left: 90px;\"><h3>Current System Groups</h3>';\n\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$stmt_count = phoromatic_server::$db->prepare('SELECT COUNT(SystemID) AS system_count FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 AND Groups LIKE \\'%#' . $row['GroupName'] . '#%\\'');\n\t\t\t\t\t\t$stmt_count->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t$result_count = $stmt_count->execute();\n\t\t\t\t\t\t$row_count = $result_count->fetchArray();\n\t\t\t\t\t\t$row_count['system_count'] = isset($row_count['system_count']) ? $row_count['system_count'] : 0;\n\n\t\t\t\t\t\t$main .= '<div style=\"clear: both;\"><div style=\"width: 200px; float: left; font-weight: bold;\">' . $row['GroupName'] . '</div> ' . $row_count['system_count'] . ' System' . ($row_count['system_count'] != 1 ? 's' : '') . '</div>';\n\n\t\t\t\t\t}\n\t\t\t\t\twhile($row = $result->fetchArray());\n\n\t\t\t\t\t$main .= '</div>';\n\n\t\t\t\t\t$main .= '<hr /><a name=\"group_edit\"></a><h2>System Group Editing</h2><div style=\"text-align: center;\"><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_groups\" method=\"post\"><input type=\"hidden\" name=\"system_group_update\"  value=\"1\" />';\n\t\t\t\t\t$main .= '<table style=\"margin: 5px auto; overflow: auto;\">';\n\t\t\t\t\t$main .= '<tr>';\n\t\t\t\t\t$main .= '<th></th>';\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT GroupName FROM phoromatic_groups WHERE AccountID = :account_id ORDER BY GroupName ASC');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$all_groups = array();\n\t\t\t\t\twhile($row = $result->fetchArray())\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<th>' . $row['GroupName'] . '</th>';\n\t\t\t\t\t\tarray_push($all_groups, $row['GroupName']);\n\t\t\t\t\t}\n\n\t\t\t\t\t$main .= '</tr>';\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, Groups FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 ORDER BY Title ASC');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\twhile($row = $result->fetchArray())\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<tr>';\n\t\t\t\t\t\t$main .= '<th>' . $row['Title'] . '</th>';\n\t\t\t\t\t\t$main .= '<input type=\"hidden\" name=\"groups_' . $row['SystemID'] . '[]\" value=\"\" />';\n\n\t\t\t\t\t\tforeach($all_groups as $group)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$checked = stripos($row['Groups'], '#' . $group . '#') !== false ? 'checked=\"checked\" ' : null;\n\t\t\t\t\t\t\t$main .= '<td><input type=\"checkbox\" name=\"groups_' . $row['SystemID'] . '[]\" value=\"' . $group . '\" ' . $checked . '/></td>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$main .= '</tr>';\n\t\t\t\t\t}\n\n\t\t\t\t\t$main .= '</table><p><input name=\"submit\" value=\"Update Groups\" type=\"submit\" /></p></form></div>';\n\n\t\t\t\t\t$main .= '<hr /><h2>Remove A Group</h2><p>Removing a group is a permanent action that cannot be undone.</p>';\n\n\t\t\t\t\t$main .= '<p><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"remove_group\" method=\"post\"><select name=\"remove_group\" id=\"remove_group\">';\n\n\t\t\t\t\tforeach($all_groups as $group)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<option value=\"' . $group . '\">' . $group . '</option>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</select> <input name=\"submit\" value=\"Remove Group\" type=\"submit\" /></form></p>';\n\n\t\t\t\t\t$main .= '<hr /><h2>Retire Inactive Systems</h2><p>This option will soft-delete systems that have not communicated with this Phoromatic Server in more than one week (7 days).</p>';\n\n\t\t\t\t\t$main .= '<p><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"remove_inactive\" method=\"post\"><input type=\"hidden\" name=\"remove_inactive_systems\" value=\"7\" /><input name=\"submit\" value=\"Remove Inactive Systems\" type=\"submit\" /></form></p>';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$right = '<ul><li>Active Systems</li>';\n\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID FROM phoromatic_systems WHERE AccountID = :account_id AND State > 0 ORDER BY Title ASC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\n\t\tif($row == false)\n\t\t{\n\t\t\t$right .= '</ul><p style=\"text-align: left; margin: 6px 10px;\">No Systems Found</p>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdo\n\t\t\t{\n\t\t\t\t$right .= '<li><a href=\"?systems/' . $row['SystemID'] . '\">' . $row['Title'] . '</a></li>';\n\t\t\t}\n\t\t\twhile($row = $result->fetchArray());\n\t\t\t$right .= '</ul>';\n\t\t}\n\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2016, Phoronix Media\n\tCopyright (C) 2016, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_testing implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Testing';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$main = null;\n\t\techo phoromatic_webui_header_logged_in();\n\n\t\t$main = '<h1>Phoromatic Testing Options</h1><h2>Test Schedules</h2>\n\t\t\t<p>Test schedules are used for tests that are intended to be run on a recurring basis -- either daily or other defined time period -- or whenever a trigger/event occurs, like a new Git commit to a software repository being tracked. Test schedules can be run on any given system(s)/group(s) and can be later edited.</p>';\n\n\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t{\n\t\t\t\t$main .= '\n\t\t\t\t<hr />\n\t\t\t\t<h2>Create A Schedule</h2>\n\t\t\t\t<p><a href=\"?sched\">Create a schedule</a> followed by adding tests/suites to run for that schedule on the selected systems.</p>';\n\t\t\t}\n\n\t\t\t$main .= '<hr /><h2>Current Schedules</h2>';\n\n\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><h1>Active Test Schedules</h1></li>';\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, ScheduleID, Description, RunTargetSystems, RunTargetGroups, RunAt, ActiveOn FROM phoromatic_schedules WHERE AccountID = :account_id AND State >= 1 ORDER BY Title ASC');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\t\tif($row == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Schedules Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$stmt_tests = phoromatic_server::$db->prepare('SELECT COUNT(*) AS TestCount FROM phoromatic_schedules_tests WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY TestProfile ASC');\n\t\t\t\t\t\t\t$stmt_tests->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t$stmt_tests->bindValue(':schedule_id', $row['ScheduleID']);\n\t\t\t\t\t\t\t$result_tests = $stmt_tests->execute();\n\t\t\t\t\t\t\t$row_tests = $result_tests->fetchArray();\n\t\t\t\t\t\t\t$test_count = !empty($row_tests) ? $row_tests['TestCount'] : 0;\n\n\t\t\t\t\t\t\t$group_count = empty($row['RunTargetGroups']) ? 0 : count(explode(',', $row['RunTargetGroups']));\n\t\t\t\t\t\t\t$main .= '<a href=\"?schedules/' . $row['ScheduleID'] . '\"><li>' . $row['Title'] . '<br /><table><tr><td>' . pts_strings::plural_handler(count(phoromatic_server::systems_associated_with_schedule($_SESSION['AccountID'], $row['ScheduleID'])), 'System') . '</td><td>' . pts_strings::plural_handler($group_count, 'Group') . '</td><td>' . pts_strings::plural_handler($test_count, 'Test') . '</td><td>' . pts_strings::plural_handler(phoromatic_results_for_schedule($row['ScheduleID']), 'Result') . ' Total</td><td>' . pts_strings::plural_handler(phoromatic_results_for_schedule($row['ScheduleID'], 'TODAY'), 'Result') . ' Today</td><td><strong>' . phoromatic_schedule_activeon_string($row['ActiveOn'], $row['RunAt']) . '</strong></td></tr></table></li></a>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t}\n\n\n\t\t\t$main .= '</ul>\n\t\t\t</div>';\n\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_benchmark_tickets WHERE AccountID = :account_id AND State >= 0 AND TicketIssueTime > :time_cutoff ORDER BY TicketIssueTime DESC LIMIT 30');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':time_cutoff', (time() - (60 * 60 * 24 * 14)));\n\t\t\t$result = $stmt->execute();\n\t\t\t$right = '<ul><li>Benchmark Tickets</li>';\n\n\t\t\tif($result)\n\t\t\t{\n\t\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li><h1>Active Benchmark Tickets</h1></li>';\n\n\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\tif(!empty($row))\n\t\t\t\t{\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<a href=\"?benchmark/' . $row['TicketID'] . '\"><li>' . $row['Title'] . '</li></a>';\n\t\t\t\t\t}\n\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Tickets Found</li>';\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t$main .= '</ul>\n\t\t\t</div>';\n\n\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t{\n\t\t\t\t$main .= '\n\t\t\t\t<hr />\n\t\t\t\t<h2>Run A Benchmark</h2>\n\t\t\t\t<p><a href=\"?benchmark\">Run a benchmark</a> is the area where you can run a one-time benchmark on selected system(s) and is also where to go for setting up a stress-run benchmark.</p>\n\t\t\t\t<hr />\n\t\t\t\t<h2>Create A Suite</h2>\n\t\t\t\t<p><a href=\"?build_suite\">Build a suite</a>, which is a collection of predefined test profiles.</p>\n\t\t\t\t<hr />\n\t\t\t\t<h2>View Local Suites</h2>\n\t\t\t\t<p><a href=\"?local_suites\">See local suites</a> available for your benchmarking needs.</p>';\n\t\t\t}\n\n\n\t\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2015 - 2021, Phoronix Media\n\tCopyright (C) 2015 - 2021, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_tests implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Tests';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$main = null;\n\t\t$identifier_item = isset($PATH[1]) ? $PATH[0] . '/' . $PATH[1] : false;\n\n\t\tif($identifier_item && pts_test_profile::is_test_profile($identifier_item))\n\t\t{\n\t\t\t$tp = new pts_test_profile($identifier_item);\n\t\t\t$tp_identifier = $tp->get_identifier(false);\n\t\t\t$main .= pts_web_embed::test_profile_overview($tp);\n\t\t\t$main .= '<h2>Recent Results With This Test</h2>';\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, PPRID FROM phoromatic_results WHERE AccountID = :account_id AND UploadID IN (SELECT DISTINCT UploadID FROM phoromatic_results_results WHERE AccountID = :account_id AND TestProfile LIKE :tp) ORDER BY UploadTime DESC LIMIT 30');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':tp', $tp_identifier . '%');\n\t\t\t$result = $stmt->execute();\n\t\t\t$recent_result_count = 0;\n\t\t\twhile($result && $row = $result->fetchArray())\n\t\t\t{\n\t\t\t\t$recent_result_count++;\n\t\t\t\t$main .= '<h2><a href=\"/?result/' . $row['PPRID'] . '\">' . $row['Title'] . '</a></h2>';\n\t\t\t}\n\n\t\t\tif($recent_result_count == 0)\n\t\t\t{\n\t\t\t\t$main .= '<p>No results found on this Phoromatic Server for the ' . $tp->get_title() . ' test profile.</p>';\n\t\t\t}\n\t\t\telse if(false && $recent_result_count > 5)\n\t\t\t{\n\t\t\t\t// TODO XXX below code is borked\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT UploadID, SystemID, UploadTime FROM phoromatic_results WHERE AccountID = :account_id AND UploadID IN (SELECT DISTINCT UploadID FROM phoromatic_results_results WHERE AccountID = :account_id AND TestProfile LIKE :tp) ORDER BY UploadTime DESC LIMIT 1000');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':tp', $tp_identifier . '%');\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$recent_result_count = 0;\n\t\t\t\t$result_file = new pts_result_file(null, true);\n\t\t\t\twhile($result && $row = $result->fetchArray())\n\t\t\t\t{\n\t\t\t\t\t$composite_xml = phoromatic_server::phoromatic_account_result_path($_SESSION['AccountID'], $row['UploadID']) . 'composite.xml';\n\t\t\t\t\tif(!is_file($composite_xml))\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add to result file\n\t\t\t\t\t$system_name = strtotime($row['UploadTime']) . ': ' . phoromatic_server::system_id_to_name($row['SystemID']);\n\t\t\t\t\t$sub_result_file = new pts_result_file($composite_xml, true);\n\t\t\t\t\tforeach($sub_result_file->get_result_objects() as $obj)\n\t\t\t\t\t{\n\t\t\t\t\t\tif($obj->test_profile->get_identifier(false) == $tp_identifier)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$obj->test_result_buffer->rename(null, $system_name);\n\t\t\t\t\t\t\t$result_file->add_result($obj);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$table = null;\n\t\t\t\t$extra_attributes = array('multi_way_comparison_invert_default' => false);\n\t\t\t\t$f = false;\n\t\t\t\tforeach($result_file->get_result_objects() as $obj)\n\t\t\t\t{\n\t\t\t\t\t$obj->test_profile->set_display_format('SCATTER_PLOT');\n\n\t\t\t\t\tforeach($obj->test_result_buffer->buffer_items as $i => &$item)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!is_numeric(substr($item->get_result_identifier(), 0, strpos($item->get_result_identifier(), ':'))))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tunset($obj->test_result_buffer->buffer_items[$i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$result_file = null;\n\t\t\t\t\t$main .= '<p align=\"center\">' . pts_render::render_graph_inline_embed($obj, $result_file, $extra_attributes) . '</p>';\n\t\t\t\t}\n\n\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$dc = pts_client::download_cache_path();\n\t\t\t$dc_exists = is_file($dc . 'pts-download-cache.json');\n\t\t\tif($dc_exists)\n\t\t\t{\n\t\t\t\t$cache_json = file_get_contents($dc . 'pts-download-cache.json');\n\t\t\t\t$cache_json = json_decode($cache_json, true);\n\t\t\t}\n\n\t\t\t$tests_to_show = array();\n\t\t\tforeach(array_merge(pts_tests::local_tests(), pts_openbenchmarking::available_tests(false)) as $test)\n\t\t\t{\n\t\t\t\t$cache_checked = false;\n\t\t\t\tif($dc_exists)\n\t\t\t\t{\n\t\t\t\t\tif($cache_json && isset($cache_json['phoronix-test-suite']['cached-tests']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$cache_checked = true;\n\t\t\t\t\t\tif(!in_array($test, $cache_json['phoronix-test-suite']['cached-tests']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//continue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!$cache_checked && phoromatic_server::read_setting('show_local_tests_only') && pts_test_install_request::test_files_available_on_local_system($test) == false)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$tp = new pts_test_profile($test);\n\n\t\t\t\tif($tp->get_title() == null)\n\t\t\t\t\tcontinue;\n\n\t\t\t\t$tests_to_show[] = $tp;\n\t\t\t}\n\t\t\t$main .= pts_web_embed::tests_list($tests_to_show);\n\t\t}\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2016, Phoronix Media\n\tCopyright (C) 2014 - 2016, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_tracker implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Result Tracker';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\techo phoromatic_webui_header_logged_in();\n\t\t$main = null;\n\n\t\tif(isset($PATH[0]) && !empty($PATH[0]))\n\t\t{\n\t\t\tini_set('memory_limit', '4G');\n\t\t\tif(isset($_POST['view_results_from_past']) && is_numeric($_POST['view_results_from_past']))\n\t\t\t{\n\t\t\t\t$cut_duration = $_POST['view_results_from_past'];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$cut_duration = 21;\n\t\t\t}\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT UploadID, UploadTime, ScheduleID, Trigger, SystemID FROM phoromatic_results WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY UploadTime DESC');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t$test_result_result = $stmt->execute();\n\t\t\t$cutoff_time = is_numeric($cut_duration) ? strtotime('today -' . $cut_duration . ' days') : false;\n\n\t\t\t$result_files = array();\n\t\t\twhile($test_result_result && $row = $test_result_result->fetchArray())\n\t\t\t{\n\t\t\t\tif($cutoff_time !== false && strtotime($row['UploadTime']) < $cutoff_time)\n\t\t\t\t\tbreak;\n\n\t\t\t\t$composite_xml = phoromatic_server::phoromatic_account_result_path($_SESSION['AccountID'], $row['UploadID']) . 'composite.xml';\n\t\t\t\tif(!is_file($composite_xml))\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Add to result file\n\t\t\t\t$system_name = phoromatic_server::system_id_to_name($row['SystemID']) . ': ' . $row['Trigger'];\n\t\t\t\t$rf = new pts_result_file($composite_xml);\n\t\t\t\t$rf->rename_run(null, $system_name);\n\t\t\t\t$result_files[] = $rf;\n\t\t\t}\n\n\t\t\t$attributes = array('new_result_file_title' => phoromatic_schedule_id_to_name($row['ScheduleID']));\n\t\t\t$result_file = new pts_result_file(null, true);\n\t\t\t$result_file->merge($result_files, $attributes);\n\t\t\t$extra_attributes = array('reverse_result_buffer' => true, 'force_simple_keys' => true, 'force_line_graph_compact' => true, 'force_tracking_line_graph' => true);\n\n\t\t\tif(isset($_POST['normalize_results']) && $_POST['normalize_results'])\n\t\t\t{\n\t\t\t\t$extra_attributes['normalize_result_buffer'] = true;\n\t\t\t}\n\n\n\t\t\t$main .= '<h1>' . $result_file->get_title() . '</h1>';\n\n\t\t\tif($result_file->get_system_count() == 1 || ($intent = pts_result_file_analyzer::analyze_result_file_intent($result_file, $intent, true)))\n\t\t\t{\n\t\t\t\t$table = new pts_ResultFileCompactSystemsTable($result_file, $intent);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$table = new pts_ResultFileSystemsTable($result_file);\n\t\t\t}\n\n\t\t\t$main .= '<p style=\"text-align: center; overflow: auto;\" class=\"result_object\">' . pts_render::render_graph_inline_embed($table, $result_file, $extra_attributes) . '</p>';\n\n\t\t\t$table = new pts_ResultFileTable($result_file, $intent);\n\t\t\t$main .= '<p style=\"text-align: center; overflow: auto;\" class=\"result_object\">' . pts_render::render_graph_inline_embed($table, $result_file, $extra_attributes) . '</p>';\n\n\t\t\t$main .= '<div id=\"pts_results_area\">';\n\t\t\tforeach($result_file->get_result_objects((isset($_POST['show_only_changed_results']) ? 'ONLY_CHANGED_RESULTS' : -1)) as $i => $result_object)\n\t\t\t{\n\t\t\t\t$res = pts_render::render_graph_inline_embed($result_object, $result_file, $extra_attributes);\n\t\t\t\t$main .= '<h2><a name=\"r-' . $i . '\"></a><a name=\"' . $result_object->get_comparison_hash(true, false) . '\"></a>' . $result_object->test_profile->get_title() . '</h2>';\n\t\t\t\t$main .= '<p class=\"result_object\">';\n\t\t\t\t$main .= $res;\n\t\t\t\t$main .= '</p>';\n\t\t\t}\n\t\t\t$main .= '</div>';\n\n\t\t\t$right = '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_result_view\" method=\"post\">';\n\t\t\t$right .= '<p>Compare results for the past: ';\n\t\t\t$right .= '<select name=\"view_results_from_past\" id=\"view_results_from_past\">';\n\t\t\t$oldest_upload_time = strtotime(phoromatic_oldest_result_for_schedule($PATH[0]));\n\t\t\t$opts = array(\n\t\t\t\t'Two Weeks' => 14,\n\t\t\t\t'Three Weeks' => 21,\n\t\t\t\t'One Month' => 30,\n\t\t\t\t'Two Months' => 60,\n\t\t\t\t'Quarter' => 90,\n\t\t\t\t'Six Months' => 180,\n\t\t\t\t'Year' => 365,\n\t\t\t\t);\n\t\t\tforeach($opts as $str_name => $time_offset)\n\t\t\t{\n\t\t\t\tif($oldest_upload_time > (time() - (86400 * $time_offset)))\n\t\t\t\t\tbreak;\n\t\t\t\t$right .= '<option value=\"' . $time_offset . '\">' . $str_name . '</option>';\n\t\t\t}\n\t\t\t$right .= '<option value=\"all\">All Results</option>';\n\t\t\t$right .= '</select>';\n\t\t\t$right .= '</p>';\n\t\t\t$right .= '<p><input type=\"checkbox\" name=\"normalize_results\" value=\"1\" ' . (isset($_POST['normalize_results']) ? 'checked=\"checked\" ' : null) . '/> Normalize Results?</p>';\n\t\t\t$right .= '<p><input type=\"submit\" value=\"Refresh Results\"></p></form>';\n\n\t\t}\n\t\telse if(empty($PATH))\n\t\t{\n\t\t\t$main .= '<h1>Phoromatic Tracker</h1>\n\t\t\t\t\t<p>The Phoromatic Tracker will show result schedules that have enough uploaded test results from the associated systems to begin providing concise overviews of performance over time.</p>\n\t\t\t\t\t<div class=\"pts_phoromatic_info_box_area\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><h1>Trackable Results</h1></li>';\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, ScheduleID, Description, RunTargetSystems, RunTargetGroups, RunAt, ActiveOn, (SELECT COUNT(*) FROM phoromatic_results WHERE ScheduleID = phoromatic_schedules.ScheduleID) AS UploadedResultCount FROM phoromatic_schedules WHERE AccountID = :account_id AND State >= 1 ORDER BY Title ASC');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\t\tif($row == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Relevant Schedules Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif($row['UploadedResultCount'] > (($row['RunTargetSystems'] + $row['RunTargetGroups'] + 1) * 7))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$stmt_tests = phoromatic_server::$db->prepare('SELECT COUNT(*) AS TestCount FROM phoromatic_schedules_tests WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY TestProfile ASC');\n\t\t\t\t\t\t\t\t$stmt_tests->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t\t$stmt_tests->bindValue(':schedule_id', $row['ScheduleID']);\n\t\t\t\t\t\t\t\t$result_tests = $stmt_tests->execute();\n\t\t\t\t\t\t\t\t$row_tests = $result_tests->fetchArray();\n\t\t\t\t\t\t\t\t$test_count = !empty($row_tests) ? $row_tests['TestCount'] : 0;\n\n\t\t\t\t\t\t\t\t$group_count = empty($row['RunTargetGroups']) ? 0 : count(explode(',', $row['RunTargetGroups']));\n\t\t\t\t\t\t\t\t$main .= '<a href=\"?tracker/' . $row['ScheduleID'] . '\"><li>' . $row['Title'] . '<br /><table><tr><td>' . pts_strings::plural_handler(count(phoromatic_server::systems_associated_with_schedule($_SESSION['AccountID'], $row['ScheduleID'])), 'System') . '</td><td>' . pts_strings::plural_handler($group_count, 'Group') . '</td><td>' . pts_strings::plural_handler($test_count, 'Test') . '</td><td>' . pts_strings::plural_handler($row['UploadedResultCount'], 'Result') . ' Total</td></tr></table></li></a>';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t}\n\n\n\t\t\t$main .= '</ul>\n\t\t\t</div>';\n\t\t\t$right = null;\n\t\t}\n\n\t\techo phoromatic_webui_main($main, $right);\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2015, Phoronix Media\n\tCopyright (C) 2014 - 2015, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_users implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Account Administrator';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\tif($_SESSION['AdminLevel'] > 3)\n\t\t{\n\t\t\techo phoromatic_error_page('Unauthorized Access', 'You aren\\'t an account administrator!');\n\t\t\treturn;\n\t\t}\n\n\t\tif(isset($_POST['group_name']))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_accounts SET GroupName = :group_name WHERE AccountID = :account_id');\n\t\t\t$stmt->bindValue(':group_name', $_POST['group_name']);\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$result = $stmt->execute();\n\t\t}\n\t\tif(isset($_POST['username']) && isset($_POST['password']) && isset($_POST['confirm_password']) && isset($_POST['email']))\n\t\t{\n\t\t\t// REGISTER NEW USER\n\t\t\tif(strlen($_POST['username']) < 4 || strpos($_POST['username'], ' ') !== false)\n\t\t\t{\n\t\t\t\tphoromatic_error_page('Oops!', 'Please go back and ensure the supplied username is at least four characters long and contains no spaces.');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(in_array(strtolower($_POST['username']), array('admin', 'administrator')))\n\t\t\t{\n\t\t\t\tphoromatic_error_page('Oops!', $_POST['username'] . ' is a reserved and common username that may be used for other purposes, please make a different selection.');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(strlen($_POST['password']) < 6)\n\t\t\t{\n\t\t\t\tphoromatic_error_page('Oops!', 'Please go back and ensure the supplied password is at least six characters long.');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif($_POST['password'] != $_POST['confirm_password'])\n\t\t\t{\n\t\t\t\tphoromatic_error_page('Oops!', 'Please go back and ensure the supplied password matches the password confirmation.');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif($_POST['email'] == null || filter_var($_POST['email'], FILTER_VALIDATE_EMAIL) == false)\n\t\t\t{\n\t\t\t\tphoromatic_error_page('Oops!', 'Please enter a valid email address.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$valid_user_name_chars = '1234567890-_.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\t\t\tfor($i = 0; $i < count($_POST['username']); $i++)\n\t\t\t{\n\t\t\t\tif(strpos($valid_user_name_chars, substr($_POST['username'], $i, 1)) === false)\n\t\t\t\t{\n\t\t\t\t\tphoromatic_error_page('Oops!', 'Please go back and ensure a valid user-name. The character <em>' . substr($_POST['username'], $i, 1) . '</em> is not allowed.');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$matching_users = phoromatic_server::$db->querySingle('SELECT UserName FROM phoromatic_users WHERE UserName = \\'' . SQLite3::escapeString($_POST['username']) . '\\'');\n\t\t\tif(!empty($matching_users))\n\t\t\t{\n\t\t\t\tphoromatic_error_page('Oops!', 'The user-name is already taken.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif(!isset($_POST['admin_level']) || $_POST['admin_level'] == 1 || !is_numeric($_POST['admin_level']))\n\t\t\t{\n\t\t\t\tphoromatic_error_page('Oops!', 'Invalid administration level.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Salt FROM phoromatic_accounts WHERE AccountID = :account_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$result = $stmt->execute();\n\t\t\t$row = $result->fetchArray();\n\t\t\t$account_salt = $row['Salt'];\n\t\t\t$user_id = pts_strings::random_characters(4, true);\n\t\t\t$salted_password = hash('sha256', $account_salt . $_POST['password']);\n\n\t\t\tpts_logger::add_to_log($_SERVER['REMOTE_ADDR'] . ' created a new account: ' . $user_id . ' - ' . $_SESSION['AccountID']);\n\n\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_users (UserID, AccountID, UserName, Email, Password, CreatedOn, LastIP, AdminLevel) VALUES (:user_id, :account_id, :user_name, :email, :password, :current_time, :last_ip, :admin_level)');\n\t\t\t$stmt->bindValue(':user_id', $user_id);\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':user_name', $_POST['username']);\n\t\t\t$stmt->bindValue(':email', $_POST['email']);\n\t\t\t$stmt->bindValue(':password', $salted_password);\n\t\t\t$stmt->bindValue(':last_ip', $_SERVER['REMOTE_ADDR']);\n\t\t\t$stmt->bindValue(':current_time', phoromatic_server::current_time());\n\t\t\t$stmt->bindValue(':admin_level', $_POST['admin_level']);\n\t\t\t$result = $stmt->execute();\n\n\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_user_settings (UserID, AccountID) VALUES (:user_id, :account_id)');\n\t\t\t$stmt->bindValue(':user_id', $user_id);\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$result = $stmt->execute();\n\n\t\t\tphoromatic_add_activity_stream_event('users', $_POST['username'], 'added');\n\t\t}\n\t\tif($_SESSION['AdminLevel'] == 1 && isset($_POST['update_user_levels']))\n\t\t{\n\t\t\tforeach(explode(',', $_POST['update_user_levels']) as $user_id)\n\t\t\t{\n\t\t\t\tif(isset($_POST['admin_level_' . $user_id]) && is_numeric($_POST['admin_level_' . $user_id]))\n\t\t\t\t{\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_users SET AdminLevel = :admin_level WHERE AccountID = :account_id AND UserID = :user_id');\n\t\t\t\t\t$stmt->bindValue(':admin_level', $_POST['admin_level_' . $user_id]);\n\t\t\t\t\t$stmt->bindValue(':user_id', $user_id);\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$main = '<h2>Users</h2>\n\t\t\t<p>Users associated with this account. Phoromatic users can be one of several tiers with varying privileges:</p>\n\t\t\t<ol>\n\t\t\t\t<li><strong>Group Administrator:</strong> The user with full control over the account, the one who originally signed up for the Phoromatic account.</li>\n\t\t\t\t<li><strong>Administrator:</strong> Additional users created by the group administrator with the same access rights as the group administrator.</li>\n\t\t\t\t<li><strong>Power Users:</strong> Additional users created by the group administrator with read/write/modify access to all standard Phoromatic functionality, aside from being able to create additional users.</li>\n\t\t\t\t<li><strong>Viewer:</strong> Additional users created by the group administrator that have access to view data but not to create new schedules, alter system settings, etc.</li>\n\t\t\t</ol>\n\t\t\t<div class=\"pts_phoromatic_info_box_area\">\n\n\t\t\t\t<div style=\"margin: 0 1%;\"><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"edit_user\" id=\"edit_user\" method=\"post\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><h1>All Users</h1></li>';\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_users WHERE AccountID = :account_id ORDER BY UserName ASC');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\t\t\t\t\t$user_ids = array();\n\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\tswitch($row['AdminLevel'])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t$level = 'Group Administrator';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t$level = 'Administrator';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t$level = 'Power User';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 10:\n\t\t\t\t\t\t\t\t$level = 'Viewer';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tif($row['AdminLevel'] < 1)\n\t\t\t\t\t\t\t\t\t$level = 'Disabled';\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t$level = 'Unknown';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$main .= '<a href=\"#\"><li>' . $row['UserName'] . '<br /><table><tr><td>';\n\n\t\t\t\t\t\tif($row['AdminLevel'] == 1 || $_SESSION['AdminLevel'] != 1)\n\t\t\t\t\t\t\t$main .= '<strong>' . $level . '</strong>';\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$main .= '<select name=\"admin_level_' . $row['UserID'] . '\">';\n\n\t\t\t\t\t\t\tforeach(array(($row['AdminLevel'] * -1) => 'Disabled', 2 => 'Administrator', 3 => 'Power User', 10 => 'Viewer') as $level_id => $level_string)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$main .= '<option value=\"' . $level_id . '\"' . ($row['AdminLevel'] == $level_id ? ' selected=\"selected\"' : null) . '>' . $level_string . '</option>';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$main .= '</select>';\n\t\t\t\t\t\t\tarray_push($user_ids, $row['UserID']);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$main .= '</td><td>Last Login: ' . (empty($row['LastLogin']) ? 'Never' : date('j F Y H:i', strtotime($row['LastLogin']))) . '</td></tr></table></li></a>';\n\t\t\t\t\t}\n\t\t\t\t\twhile($row = $result->fetchArray());\n\n\n\t\t\t$main .= '</ul> &nbsp; <input type=\"hidden\" name=\"update_user_levels\" value=\"' . implode(',', $user_ids) . '\" /> <input name=\"submit\" value=\"Update User Levels\" type=\"submit\" /></form>\n\t\t\t\t</div>\n\t\t\t</div>';\n\n\t\t$main .= '<hr /><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"add_user\" id=\"add_user\" method=\"post\" onsubmit=\"return validate_new_user();\"><h2>Create Additional Account</h2>\n\t\t\t<p>Administrators can create extra accounts to be associated with this account\\'s systems, schedules, and test data.</p>\n\t\t\t<h3>User</h3>\n\t\t\t<p><input type=\"text\" name=\"username\" /></p>\n\t\t\t<h3>Password</h3>\n\t\t\t<p><input type=\"password\" name=\"password\" /></p>\n\t\t\t<h3>Confirm Password</h3>\n\t\t\t<p><input type=\"password\" name=\"confirm_password\" /></p>\n\t\t\t<h3>Email</h3>\n\t\t\t<p><input type=\"text\" name=\"email\" /></p>\n\t\t\t<h3>Administration Level</h3>\n\t\t\t<p><select name=\"admin_level\">';\n\n\t\tif($_SESSION['AdminLevel'] == 1)\n\t\t\t$main .= '<option value=\"2\">Administrator</option>';\n\n\t\tif($_SESSION['AdminLevel'] <= 2)\n\t\t\t$main .= '<option value=\"3\">Power User</option>';\n\t\tif($_SESSION['AdminLevel'] <= 3)\n\t\t\t$main .= '<option value=\"10\">Viewer</option>';\n\n\t\t$main .= '\n\t\t\t</select></p>\n\t\t\t<p><input name=\"submit\" value=\"Add User\" type=\"submit\" /></p>\n\t\t\t</form>';\n\n\t\t$group_name = phoromatic_account_id_to_group_name($_SESSION['AccountID']);\n\t\t$main .= '<hr /><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"group_name\" id=\"group_name\" method=\"post\"><h2>Group Name</h2>\n\t\t\t<p>A group name is an alternative, user-facing name for this set of accounts. The group name feature is primarily useful for being able to better distinguish results between groups when sharing of data within a large organization, etc. The group name is showed next to test results when viewing results from multiple groups/accounts.</p>\n\t\t\t<h3>Group Name</h3>\n\t\t\t<p><input type=\"text\" name=\"group_name\" value=\"' . $group_name . '\" /></p>\n\t\t\t<p><input name=\"submit\" value=\"Update Group Name\" type=\"submit\" /></p>\n\t\t\t</form>';\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2015, Phoronix Media\n\tCopyright (C) 2008 - 2015, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_welcome implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Welcome';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$account_creation_string = phoromatic_server::read_setting('account_creation_alt');\n\t\t$account_creation_enabled = $account_creation_string == null;\n\n\t\tif($account_creation_enabled && isset($_POST['register_username']) && isset($_POST['register_password']) && isset($_POST['register_password_confirm']) && isset($_POST['register_email']))\n\t\t{\n\t\t\t$new_account = create_new_phoromatic_account($_POST['register_username'], $_POST['register_password'], $_POST['register_password_confirm'], $_POST['register_email'], (isset($_POST['seed_accountid']) ? $_POST['seed_accountid'] : null));\n\n\t\t\tif($new_account)\n\t\t\t{\n\t\t\t\techo phoromatic_webui_header(array('Account Created'), '');\n\t\t\t\t$box = '<h1>Account Created</h1>\n\t\t\t\t<p>Your account has been created. You may now log-in to begin utilizing the Phoronix Test Suite\\'s Phoromatic.</p>\n\t\t\t\t<form name=\"login_form\" id=\"login_form\" action=\"?login\" method=\"post\" onsubmit=\"return phoromatic_login(this);\">\n\t\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">User:</div> <input type=\"text\" name=\"username\" /></p>\n\t\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">Password:</div> <input type=\"password\" name=\"password\" /></p>\n\t\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">&nbsp;</div> <input type=\"submit\" value=\"Submit\" /></p>\n\t\t\t\t</form>';\n\t\t\t\techo phoromatic_webui_box($box);\n\t\t\t\techo phoromatic_webui_footer();\n\t\t\t}\n\t\t}\n\t\telse if(isset($_POST['username']) && isset($_POST['password']) && strtolower($_POST['username']) == 'rootadmin')\n\t\t{\n\t\t\t$admin_pw = phoromatic_server::read_setting('root_admin_pw');\n\t\t\tif(empty($admin_pw))\n\t\t\t{\n\t\t\t\techo phoromatic_webui_header(array('Action Required'), '');\n\t\t\t\t$box = '<h1>Root Admin Password Not Set</h1>\n\t\t\t\t<p>The root admin password has not yet been set for this system. It can be set by running on the system: <strong>phoronix-test-suite phoromatic.set-root-admin-password</strong>.</p>';\n\t\t\t\techo phoromatic_webui_box($box);\n\t\t\t\techo phoromatic_webui_footer();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(hash('sha256', 'PTS' . $_POST['password']) != $admin_pw)\n\t\t\t{\n\t\t\t\techo phoromatic_webui_header(array('Invalid Password'), '');\n\t\t\t\t$box = '<h1>Root Admin Password Incorrect</h1>\n\t\t\t\t<p>The root admin password is incorrect.</p>';\n\t\t\t\techo phoromatic_webui_box($box);\n\t\t\t\techo phoromatic_webui_footer();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsession_regenerate_id();\n\t\t\t\t$_SESSION['UserID'] = 0;\n\t\t\t\t$_SESSION['UserName'] = 'RootAdmin';\n\t\t\t\t$_SESSION['AccountID'] = 0;\n\t\t\t\t$_SESSION['AdminLevel'] = -40;\n\t\t\t\t$_SESSION['CreatedOn'] = null;\n\t\t\t\t$_SESSION['CoreVersionOnSignOn'] = PTS_CORE_VERSION;\n\t\t\t\tsession_write_close();\n\t\t\t\theader('Location: /?admin');\n\t\t\t}\n\t\t}\n\t\telse if(isset($_POST['username']) && isset($_POST['password']))\n\t\t{\n\t\t\t$matching_user = phoromatic_server::$db->querySingle('SELECT UserName, Password, AccountID, UserID, AdminLevel, CreatedOn FROM phoromatic_users WHERE UserName = \\'' . SQLite3::escapeString($_POST['username']) . '\\'', true);\n\t\t\tif(!empty($matching_user))\n\t\t\t{\n\t\t\t\t$user_id = $matching_user['UserID'];\n\t\t\t\t$created_on = $matching_user['CreatedOn'];\n\t\t\t\t$user = $matching_user['UserName'];\n\t\t\t\t$hashed_password = $matching_user['Password'];\n\t\t\t\t$account_id = $matching_user['AccountID'];\n\t\t\t\t$admin_level = $matching_user['AdminLevel'];\n\n\t\t\t\tif($admin_level < 1)\n\t\t\t\t{\n\t\t\t\t\tpts_logger::add_to_log($_SERVER['REMOTE_ADDR'] . ' attempted to log-in to a disabled account: ' . $_POST['username']);\n\t\t\t\t\tphoromatic_error_page('Disabled Account', 'The log-in is not possible as this account has been disabled.');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif($user == $_POST['username'])\n\t\t\t\t{\n\t\t\t\t\t$account_salt = phoromatic_server::$db->querySingle('SELECT Salt FROM phoromatic_accounts WHERE AccountID = \\'' . $account_id . '\\'');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$account_salt = null;\n\t\t\t\t}\n\n\t\t\t\tif($account_salt != null && hash('sha256', $account_salt . $_POST['password']) == $hashed_password)\n\t\t\t\t{\n\t\t\t\t\tsession_regenerate_id();\n\t\t\t\t\t$_SESSION['UserID'] = $user_id;\n\t\t\t\t\t$_SESSION['UserName'] = $user;\n\t\t\t\t\t$_SESSION['AccountID'] = $account_id;\n\t\t\t\t\t$_SESSION['AdminLevel'] = $admin_level;\n\t\t\t\t\t$_SESSION['CreatedOn'] = $created_on;\n\t\t\t\t\t$_SESSION['CoreVersionOnSignOn'] = PTS_CORE_VERSION;\n\t\t\t\t\t$account_salt = phoromatic_server::$db->exec('UPDATE phoromatic_users SET LastIP = \\'' . $_SERVER['REMOTE_ADDR'] . '\\', LastLogin = \\'' . phoromatic_server::current_time() . '\\' WHERE UserName = \"' . $matching_user['UserName'] . '\"');\n\t\t\t\t\tsession_write_close();\n\n\t\t\t\t\tpts_file_io::mkdir(phoromatic_server::phoromatic_account_path($account_id));\n\t\t\t\t\tpts_file_io::mkdir(phoromatic_server::phoromatic_account_result_path($account_id));\n\t\t\t\t\tpts_file_io::mkdir(phoromatic_server::phoromatic_account_system_path($account_id));\n\t\t\t\t\tpts_file_io::mkdir(phoromatic_server::phoromatic_account_suite_path($account_id));\n\n\t\t\t\t\techo phoromatic_webui_header(array('Welcome, ' . $user), '');\n\t\t\t\t\t$box = '<h1>Log-In Successful</h1>\n\t\t\t\t\t<p><strong>' . $user . '</strong>, we are now redirecting you to your account portal. If you are not redirected within a few seconds, please <a href=\"?main\">click here</a>.<script type=\"text/javascript\">window.location.href = \"?main\";</script></p>';\n\t\t\t\t\techo phoromatic_webui_box($box);\n\t\t\t\t\techo phoromatic_webui_footer();\n\t\t\t\t\tpts_logger::add_to_log($_SERVER['REMOTE_ADDR'] . ' successfully logged in as user: ' . $user);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpts_logger::add_to_log($_SERVER['REMOTE_ADDR'] . ' failed a log-in attempt as: ' . $_POST['username']);\n\t\t\t\t\tphoromatic_error_page('Invalid Information', 'The user-name or password did not match our records.');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpts_logger::add_to_log($_SERVER['REMOTE_ADDR'] . ' failed a log-in attempt as: ' . $_POST['username']);\n\t\t\t\tphoromatic_error_page('Invalid Information', 'The user-name was not found within our system.');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\techo phoromatic_webui_header(array(), '');\n\n\t\t\t$box = '<h1>Welcome</h1>\n\t\t\t<p>You must log-in to your Phoromatic account or create an account to access this service.</p>\n\t\t\t<p>Phoromatic is the remote management and test orchestration system for the <a href=\"https://github.com/phoronix-test-suite/phoronix-test-suite\">Phoronix Test Suite</a>. Phoromatic allows the automatic scheduling of tests, remote installation of new tests, and the management of multiple test systems over a network (LAN/WAN) all through an intuitive, easy-to-use web interface. Tests can be scheduled to automatically run on a routine basis across multiple test systems. The test results are then available from this centralized location along with other features for interacting with Phoronix Test Suite systems.</p>\n\t\t\t<p>Phoromatic makes it very easy to provide for automated scheduling of tests on multiple systems, is extremely extensible, allows various remote testing possibilities, makes it very trivial to manage multiple systems, and centralizes result management within an organization.</p>\n\t\t\t<p id=\"features_link\"><a onclick=\"javascript:document.getElementById(\\'features\\').style.display = \\'block\\'; document.getElementById(\\'features_link\\').style.display = \\'none\\';\">Learn more about Phoromatic</a>.</p>\n\t\t\t<div style=\"display: none;\" id=\"features\">\n\n<h1>Phoromatic Benefits</h1>\n<h3>Automated Scheduling</h3>\n<p>Whether it be every evening at 6:00PM, once every Thursday at 10:00AM or somewhere in between, Phoromatic can schedule tests to be run at user-defined intervals. The testing schedules can be updated through Phoromatic web interface. After the test(s) have run, the results will be immediately uploaded to Phoromatic. Phoromatic also allows external &quot;triggers&quot; that can be initiated via a URL if wanting to automatically initiate testing when a Git commit occurs or some other external event.</p>\n<h3>Extensible</h3>\n<p>Any test profile or test suite that is compliant with the Phoronix Test Suite specifications will work with Phoromatic. Phoromatic is able to leverage the hundreds of test profiles and dozens of test suites currently in the Phoronix Test Suite via <a href=\"http://openbenchmarking.org/\">OpenBenchmarking.org</a>, along with any custom/proprietary test profiles you or your company utilize.</p>\n<h3>Remote Testing</h3>\n<p>Once the test system is setup, all testing and management of that system can be done remotely. There is no need to excute Phoronix Test Suite commands locally using the GUI or command line version, but instead nearly all of the same features are accessible from the Phoromatic interface. The Phoromatic Server can also control waking systems via WoL when tests are issued, shutting down systems when idling, and other management tasks.</p>\n<h3>Multi-System Support</h3>\n<p>A single Phoromatic account is able to manage multiple test systems running the Phoronix Test Suite. Phoromatic supports grouping together test systems, tagging, and other features to support effectively managing many test systems. From the Phoromatic interface, installed system hardware and software from a given system can also be viewed. Systems can be spread across a private LAN or spread across several locations via the Internet.</p>\n<h3>Turn-Key Deployment</h3>\n<p>No additional software needs to be installed to support Phoromatic; all that is needed is the Phoronix Test Suite and its dependencies. New test systems can easily be synced with a given Phoromatic account by running a single command from the Phoronix Test Suite client.</p>\n<p>The Phoromatic Server can be quickly and easily deployed with the only new presented dependency compared to Phoronix Test Suite clients is on PHP SQLite support. With modern versions of PHP-CLI, the Phoromatic Server is completely self-hosting for its web service.</p>\n<p>Phoronix Test Suite client systems with Avahi / zero-conf networking support can automatically find Phoromatic Servers on their LAN for connecting to accounts, obtaining download caches, and utilizing other Phoromatic functionality.</p>\n<h3>Result Management</h3>\n<p>Test results are automatically uploaded to the Phoromatic account and remain private unless you opt to upload them to OpenBenchmarking.org for public reference. From the Phoromatic interface, results from multiple test systems can easily be compared and multiple results from the same systems can be used to track performance over time. There are also options to look at the statistical significance of the results and other features to efficienctly and effectively analyze the system performance.</p>\n<h3>Multi-User Support</h3>\n<p>If deploying a Phoromatic Server within an organization, there is also support for allowing multiple user accounts to be associated with the same data and other systems.</p>\n<h3>Local Caching</h3>\n<p>The Phoromatic Server automatically allows for caching of Phoronix Test Suite files and OpenBenchmarking.org test profile/suite caches. This allows for the Phoronix Test Suite to be more easily deployed within organizations where the systems otherwise do not have Internet access for obtaining the necessary support files.</p>\n<h3>Dashboard</h3>\n<p>The Phoromatic dashboard allows viewing the state of all connected systems in one concise view from seeing their test state to hardware/software details, estimated time to completion, and other system information.</p>\n<h3>E-Mail Notifications</h3>\n<p>The Phoromatic Server is able to send out notifications of new results being available, systems that appear hung, immediate alerts of system errors, and other important information so that it can be dealt with in a timely manner (assuming your Phoromatic server has a working mail server).</p>\n<h1>Getting Started</h1>\n<p>Getting started can be as easy as <strong>phoronix-test-suite start-phoromatic-server</strong> to deploy a Phoromatic Server with HTTP access for the UI. Setting up client systems can be as simple as <strong>phoronix-test-suite phoromatic.connect</strong> and there are systemd files available for easy access to. <strong>More details can be found via the <a href=\"https://github.com/phoronix-test-suite/phoronix-test-suite/blob/master/documentation/phoronix-test-suite.md#phoronix-test-suite-phoromatic\"><strong>Phoronix Test Suite documentation</strong></a>.</strong></p>\n<p>The Phoronix Test Suite source-code is <a href=\"https://github.com/phoronix-test-suite/phoronix-test-suite/\">hosted via GitHub</a>.</p>\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<h1>Log-In</h1>\n\t\t\t<form name=\"login_form\" id=\"login_form\" action=\"?login\" method=\"post\" onsubmit=\"return phoromatic_login(this);\">\n\t\t\t<ul class=\"r_form_wrapper\">\n\t\t\t\t<li class=\"label_input_wrapper\">\n\t\t\t\t\t<label for=\"u_username\">Username</label>\n\t\t\t\t\t<input type=\"text\" name=\"username\" id=\"u_username\" required/>\n\t\t\t\t</li>\n\t\t\t\t<li class=\"label_input_wrapper\">\n\t\t\t\t\t<label for=\"u_password\">Password</label>\n\t\t\t\t\t<input type=\"password\" name=\"password\" id=\"u_password\" required/>\n\t\t\t\t</li>\n\t\t\t\t<li class=\"label_input_wrapper\">\n\t\t\t\t\t<input type=\"submit\" value=\"Submit\" />\n\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</form>\n\t\t\t<hr />\n\t\t\t<h1>Register</h1>';\n\n\t\t\tif(!empty($account_creation_string))\n\t\t\t{\n\t\t\t\t$box .= '<p>' . $account_creation_string . '</p>';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\n\t\t\t\t$box .= '\n\t\t\t\t\t\t\t<p id=\"register_link\"><a onclick=\"javascript:document.getElementById(\\'register\\').style.display = \\'block\\'; document.getElementById(\\'register_link\\').style.display = \\'none\\';\">Create A New Account</a></p>\n\t\t\t<div style=\"display: none;\" id=\"register\">\n\n\n\t\t\t\t\t<p>To create a new account for this Phoromatic server, simply fill out the form below. Phoromatic also allows multi-user accounts. If wishing to be added to an existing Phoromatic account as a separate user, contact the appropriate party and request said access. Within a Phoromatic account with appropriate credentials, additional sub-accounts can be created/managed from the &quot;Users&quot; page.</p>';\n\t\t\t\t\t$box .= '<form name=\"register_form\" id=\"register_form\" action=\"?register\" method=\"post\" onsubmit=\"return phoromatic_initial_registration(this);\">\n\n\t\t\t\t\t<ul class=\"r_form_wrapper\">\n\t\t\t\t\t\t<li class=\"label_input_wrapper\">\n\t\t\t\t\t\t\t<label for=\"r_username\">Username</label>\n\t\t\t\t\t\t\t<input type=\"hidden\" name=\"seed_accountid\" value=\"' . (isset($_GET['seed_accountid']) ? $_GET['seed_accountid'] : null) . '\" />\n\t\t\t\t\t\t\t<input type=\"text\" name=\"register_username\" id=\"r_username\" required/>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"label_input_wrapper\">\n\t\t\t\t\t\t\t<label for=\"r_password\">Password</label>\n\t\t\t\t\t\t\t<input type=\"password\" name=\"register_password\" id=\"r_password\" required/>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"label_input_wrapper\">\n\t\t\t\t\t\t\t<label for=\"c_password\">Confirm Password</label>\n\t\t\t\t\t\t\t<input type=\"password\" name=\"register_password_confirm\" id=\"c_password\" required/>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"label_input_wrapper\">\n\t\t\t\t\t\t\t<label for=\"r_email\">Email Address</label>\n\t\t\t\t\t\t\t<input type=\"email\" name=\"register_email\" id=\"r_email\" required/>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"label_input_wrapper\">\n\t\t\t\t\t\t\t<input type=\"submit\" value=\"Create Account\" />\n\t\t\t\t\t\t</li>\n\n\t\t\t\t\t</ul>\n\n\t\t\t\t\t</form></div>';\n\n\t\t\t}\n\t\t\t$box .= '<hr />\n\t\t\t<h1>View Public Results</h1>\n\t\t\t<p>For accounts that opted to share their test results publicly, you can directly <a href=\"public.php\">view the public test results</a>.</p><hr />';\n\n\t\t\techo phoromatic_webui_box($box);\n\t\t\techo phoromatic_webui_footer();\n\t\t}\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2013 - 2020, Phoronix Media\n\tCopyright (C) 2013 - 2020, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\ndefine('PHOROMATIC_SERVER_WEB_INTERFACE', true);\ndefine('PAGE_LOAD_START_TIME', microtime(true));\n\nfunction phoromatic_annotate_entry($type, $id, $secondary_id)\n{\n\t$annotate_hash = sha1($id . $secondary_id);\n\n\tif(isset($_GET['da_' . $annotate_hash]))\n\t{\n\t\t$user_name = isset($_SESSION['UserName']) ? $_SESSION['UserName'] : null;\n\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_annotations WHERE Type = :type AND ID = :id AND SecondaryID = :secondary_id AND AnnotatedBy = :user_name AND AccountID = :account_id AND AnnotatedTime = :annotated_time');\n\t\t$stmt->bindValue(':account_id', (isset($_SESSION['AccountID']) ? $_SESSION['AccountID'] : null));\n\t\t$stmt->bindValue(':type', $type);\n\t\t$stmt->bindValue(':id', $id);\n\t\t$stmt->bindValue(':secondary_id', $secondary_id);\n\t\t$stmt->bindValue(':user_name', $user_name);\n\t\t$stmt->bindValue(':annotated_time', $_GET['da_' . $annotate_hash]);\n\t\t$result = $stmt->execute();\n\t}\n\tif(isset($_POST['add_annotation_' . $annotate_hash]) && !empty($_POST['add_annotation_' . $annotate_hash]))\n\t{\n\t\t$annotation = $_POST['add_annotation_' . $annotate_hash];\n\t\t$user_name = isset($_SESSION['UserName']) ? $_SESSION['UserName'] : null;\n\t\t$annotation = str_replace(\"\\n\", '<br />', $annotation);\n\n\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_annotations (AccountID, Type, ID, SecondaryID, AnnotatedTime, AnnotatedBy, Annotation) VALUES (:account_id, :type, :id, :secondary_id, :annotated_time, :user_name, :annotation)');\n\t\t$stmt->bindValue(':account_id', (isset($_SESSION['AccountID']) ? $_SESSION['AccountID'] : null));\n\t\t$stmt->bindValue(':type', $type);\n\t\t$stmt->bindValue(':id', $id);\n\t\t$stmt->bindValue(':secondary_id', $secondary_id);\n\t\t$stmt->bindValue(':annotated_time', phoromatic_server::current_time());\n\t\t$stmt->bindValue(':user_name', $user_name);\n\t\t$stmt->bindValue(':annotation', $annotation);\n\t\t$result = $stmt->execute();\n\t}\n\n\t// XXX:  AccountID = :account_id AND\n\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_annotations WHERE Type = :type AND ID = :id AND SecondaryID = :secondary_id ORDER BY AnnotatedTime ASC');\n\t$stmt->bindValue(':account_id', (isset($_SESSION['AccountID']) ? $_SESSION['AccountID'] : null));\n\t$stmt->bindValue(':type', $type);\n\t$stmt->bindValue(':id', $id);\n\t$stmt->bindValue(':secondary_id', $secondary_id);\n\t$result = $stmt->execute();\n\t$row = $result->fetchArray();\n\n\t$output = null;\n\n\tif($row)\n\t{\n\t\tdo\n\t\t{\n\t\t\t$annotation = $row['Annotation'];\n\t\t\t$annotation = str_replace(\"\\n\", 'XXXX', $annotation);\n\t\t\t$annotation = str_replace(\"\\t\", ' &nbsp; &nbsp; &nbsp;', $annotation);\n\t\t\t$annotation = str_replace('  ', '&nbsp;', $annotation);\n\n\t\t\t$output .= '<p>' . $annotation . '<br /><em>Annotation By <strong>' . ($row['AnnotatedBy'] != null ? $row['AnnotatedBy'] : 'Unknown') . '</strong> at <strong>' . phoromatic_user_friendly_timedate($row['AnnotatedTime']) . '</strong>.</em>';\n\n\t\t\tif(isset($_SESSION['UserName']) && !empty($_SESSION['UserName']) && $_SESSION['UserName'] == $row['AnnotatedBy'])\n\t\t\t{\n\t\t\t\t$output .= ' <a href=\"' . $_SERVER['REQUEST_URI'] . '/&da_' . $annotate_hash . '=' . $row['AnnotatedTime'] . '\">Delete Annotation</a>';\n\t\t\t}\n\n\t\t\t$output .= '</p>';\n\t\t}\n\t\twhile($row = $result->fetchArray());\n\t}\n\n\t$output .= '<p id=\"annotation_link_' . $annotate_hash . '\"><a onclick=\"javascript:toggle_annotate_area(\\'' . $annotate_hash . '\\');\" style=\"font-size: 80%;\">Add Annotation</a></p>';\n\t$output .= '<form method=\"post\" action=\"' . $_SERVER['REQUEST_URI'] . '\"><p style=\"display: none;\" id=\"annotation_area_' . $annotate_hash . '\"><textarea name=\"add_annotation_' . $annotate_hash . '\" cols=\"50\" rows=\"4\"></textarea><br /><input name=\"submit\" value=\"Add Annotation\" type=\"submit\" /</p></form>';\n\n\treturn $output;\n}\nfunction phoromatic_init_web_page_setup()\n{\n\tif(session_save_path() == null || !is_writable(session_save_path()))\n\t{\n\t\t// This is needed since on at least EL6 by default there is no session_save_path set\n\t\tif(is_writable('/var/lib/php') && is_dir('/var/lib/php'))\n\t\t{\n\t\t\tsession_save_path('/var/lib/php');\n\t\t}\n\t\telse if(is_writable('/var/lib/php5') && is_dir('/var/lib/php5'))\n\t\t{\n\t\t\tsession_save_path('/var/lib/php5');\n\t\t}\n\t\telse if(is_writable('/tmp'))\n\t\t{\n\t\t\tsession_save_path('/tmp');\n\t\t}\n\t\telse if(is_writable('.'))\n\t\t{\n\t\t\tsession_save_path('.');\n\t\t}\n\t}\n\n\tdefine('PHOROMATIC_SERVER', true);\n\tif(defined('PTS_IS_DEV_BUILD') && PTS_IS_DEV_BUILD)\n\t{\n\t\terror_reporting(E_ALL);\n\t}\n\tsession_start();\n\n\tdefine('PTS_MODE', 'WEB_CLIENT');\n\tdefine('PTS_AUTO_LOAD_OBJECTS', true);\n\tdefine('PHOROMATIC_USER_IS_VIEWER', !isset($_SESSION['AdminLevel']) || $_SESSION['AdminLevel'] >= 10 || $_SESSION['AdminLevel'] < 1 ? true : false);\n\n\tinclude('../../pts-core.php');\n\tpts_core::init();\n}\nfunction phoromatic_user_friendly_timedate($time)\n{\n\treturn phoromatic_server::user_friendly_timedate($time);\n}\nfunction phoromatic_compute_estimated_time_remaining_string($estimated_minutes, $last_comm, $append = 'Remaining')\n{\n\t$remaining = phoromatic_compute_estimated_time_remaining($estimated_minutes, $last_comm);\n\treturn $remaining > 0 ? '~' . pts_strings::plural_handler($remaining, 'Minute') . ' ' . $append : null;\n}\nfunction phoromatic_compute_estimated_time_remaining($estimated_minutes, $last_comm)\n{\n\tif($estimated_minutes > 0)\n\t{\n\t\t$estimated_completion = strtotime($last_comm) + ($estimated_minutes * 60);\n\n\t\tif(time() < $estimated_completion)\n\t\t{\n\t\t\treturn ceil(($estimated_completion - time()) / 60);\n\t\t}\n\n\t}\n\n\treturn 0;\n}\nfunction phoromatic_webui_header($left_items, $right = null)\n{\n\t$ret = PHP_EOL . '<div id=\"pts_phoromatic_top_header\">\n\t<ul>\n\t<li><a href=\"?\"><img style=\"vertical-align: middle;\" class=\"img_logo_pg\" src=\"images/phoromatic_logo.svg\" /></a>';\n\n\tif(isset($_SESSION['AdminLevel']) &&$_SESSION['AdminLevel'] > 0 && isset($_SESSION['AccountID']) && !empty($_SESSION['AccountID']))\n\t{\n\t\t$ret .= '<ul id=\"pts_phoromatic_info\">';\n\t\t$ret .= '<li><a class=\"ph_date\" href=\"#\">' . date('H:i T - j F') . '</a></li>';\n\t\t$group_name = phoromatic_account_id_to_group_name($_SESSION['AccountID']);\n\t\tif($group_name != null)\n\t\t{\n\t\t\t$ret .= '<li><a href=\"#\">' . $group_name . '</a></li>';\n\t\t}\n\t\t$ret .= '</ul>';\n\t}\n\t$ret .= '</li>';\n\n\n\t//$ret .= '<ul>';\n\tforeach($left_items as $i => $item)\n\t{\n\t\tif(is_array($item))\n\t\t{\n\t\t\t$ret .= '<li>' . $i;\n\n\t\t\tif(!empty($item))\n\t\t\t{\n\t\t\t\t$ret .= '<ul>';\n\t\t\t\tforeach($item as $sub_item)\n\t\t\t\t{\n\t\t\t\t\t$ret .= '<li>' . $sub_item . '</li>';\n\t\t\t\t}\n\t\t\t\t$ret .= '</ul>';\n\t\t\t}\n\t\t\t$ret .= '</li>' . PHP_EOL;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$ret .= '<li>' . $item . '</li>' . PHP_EOL;\n\t\t}\n\t}\n\t$ret .= '<li><div id=\"phoromatic_result_selected_info_box\"></div> <a href=\"#\" onclick=\"javascript:phoromatic_generate_comparison(\\'?result/\\');\"><div id=\"phoromatic_result_compare_info_box\">Compare</div></a> <a href=\"#\" onclick=\"javascript:phoromatic_delete_results(\\'?results/delete/\\'); return false;\"><div id=\"phoromatic_result_delete_box\">Delete</div></a></li>';\n\t$ret .= '</ul>';\n\n\tif($right != null)\n\t{\n\t\t$ret .= '<div id=\"pts_phoromatic_top_header_right\">' . $right .'</div>';\n\t}\n\n\t$ret .=' </div>';\n\n\treturn $ret;\n}\nfunction phoromatic_get_posted_var($name, $default_value = null)\n{\n\treturn isset($_POST[$name]) ? $_POST[$name] : null;\n}\nfunction phoromatic_webui_main($main, $right = null)\n{\n\treturn '<div id=\"pts_phoromatic_main\">' . ($right != null ? '<div id=\"pts_phoromatic_menu_right\">' . $right . '</div>' : null) . '<div id=\"pts_phoromatic_main_area\">' . $main . '</div><div style=\"clear: both;\"></div></div>';\n}\nfunction phoromatic_webui_box(&$box)\n{\n\treturn '<div id=\"pts_phoromatic_main_box\"><div id=\"pts_phoromatic_main_box_inside\">' . $box . '</div></div>';\n}\nfunction phoromatic_results_for_schedule($schedule_id, $limit_results = false)\n{\n\tswitch($limit_results)\n\t{\n\t\tcase 'TODAY':\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(UploadID) As UploadCount FROM phoromatic_results WHERE AccountID = :account_id AND ScheduleID = :schedule_id AND UploadTime LIKE :today_date');\n\t\t\t$stmt->bindValue(':today_date', date('Y-m-d') . '%');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(UploadID) As UploadCount FROM phoromatic_results WHERE AccountID = :account_id AND ScheduleID = :schedule_id');\n\t\t\tbreak;\n\t}\n\n\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t$stmt->bindValue(':schedule_id', $schedule_id);\n\t$test_result_result = $stmt->execute();\n\t$row = $test_result_result->fetchArray();\n\n\treturn empty($row) ? 0 : $row['UploadCount'];\n}\nfunction phoromatic_schedule_activeon_string($active_on, $active_at = null)\n{\n\tif(!empty($active_on))\n\t{\n\t\t$active_days = explode(',', $active_on);\n\t\t$week = array('M', 'T', 'W', 'TH', 'F', 'S', 'SU');\n\t\tforeach($active_days as $i => &$day)\n\t\t{\n\t\t\tif(!isset($week[$day]))\n\t\t\t{\n\t\t\t\tunset($active_days[$i]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$day = $week[$day];\n\t\t\t}\n\t\t}\n\t\treturn implode(' ', $active_days) . (!empty($active_at) ? ' @ ' . str_replace('.', ':', $active_at) : null );\n\t}\n}\nfunction phoromatic_webui_footer()\n{\n\treturn '<div id=\"pts_phoromatic_bottom_footer\">\n\t<div style=\"float: left; padding: 5px;\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" viewbox=\"0 0 76 41\" width=\"76\" height=\"41\" preserveAspectRatio=\"xMinYMin meet\">\n  <path d=\"m74 22v9m-5-16v16m-5-28v28m-23-2h12.5c2.485281 0 4.5-2.014719 4.5-4.5s-2.014719-4.5-4.5-4.5h-8c-2.485281 0-4.5-2.014719-4.5-4.5s2.014719-4.5 4.5-4.5h12.5m-21 5h-11m11 13h-2c-4.970563 0-9-4.029437-9-9v-20m-24 40v-20c0-4.970563 4.0294373-9 9-9 4.970563 0 9 4.029437 9 9s-4.029437 9-9 9h-9\" stroke=\"#696969\" stroke-width=\"4\" fill=\"none\" />\n</svg> &nbsp;</div>\n<p style=\"margin: 6px 15px;\"><strong>' . date('H:i T - j F Y') . '</strong>' . (PTS_IS_DEV_BUILD ? ' &nbsp; [' . round(microtime(true) - PAGE_LOAD_START_TIME, 2) . 's Page Load Time]' : null) . '<br />Copyright &copy; 2008 - ' . date('Y') . ' by <a href=\"http://www.phoronix-media.com/\">Phoronix Media</a>. All rights reserved.<br />\nAll trademarks used are properties of their respective owners.<br />' . pts_core::program_title() . ' - Core Version ' . PTS_CORE_VERSION . ' - PHP ' . PHP_VERSION . '</p></div> <script type=\"text/javascript\"> phoromatic_checkbox_toggle_result_comparison(\\'\\'); </script>';\n}\nfunction phoromatic_add_activity_stream_event($activity_event, $activity_event_id, $activity_event_type)\n{\n\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_activity_stream (AccountID, ActivityTime, ActivityCreator, ActivityCreatorType, ActivityEvent, ActivityEventID, ActivityEventType) VALUES (:account_id, :activity_time, :activity_creator, :activity_creator_type, :activity_event, :activity_event_id, :activity_event_type)');\n\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t$stmt->bindValue(':activity_time', phoromatic_server::current_time());\n\t$stmt->bindValue(':activity_creator', $_SESSION['UserName']);\n\t$stmt->bindValue(':activity_creator_type', 'USER');\n\t$stmt->bindValue(':activity_event', $activity_event);\n\t$stmt->bindValue(':activity_event_id', $activity_event_id);\n\t$stmt->bindValue(':activity_event_type', $activity_event_type);\n\treturn $stmt->execute();\n}\nfunction phoromatic_tracker_page_relevant()\n{\n\t$stmt = phoromatic_server::$db->prepare('SELECT RunTargetSystems, RunTargetGroups, (SELECT COUNT(*) FROM phoromatic_results WHERE ScheduleID = phoromatic_schedules.ScheduleID) AS UploadedResultCount FROM phoromatic_schedules WHERE AccountID = :account_id AND State >= 1 ORDER BY Title ASC');\n\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t$result = $stmt->execute();\n\t$row = $result->fetchArray();\n\n\tif($row)\n\t{\n\t\tdo\n\t\t{\n\t\t\tif(is_numeric($row['RunTargetSystems']) && $row['UploadedResultCount'] > (($row['RunTargetSystems'] + $row['RunTargetGroups'] + 1) * 7))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\twhile($row = $result->fetchArray());\n\t}\n\n\treturn false;\n}\nfunction phoromatic_webui_header_logged_in()\n{\n\t$html_links = array();\n\tif($_SESSION['AdminLevel'] == -40)\n\t{\n\t\t$pages = array('Admin', 'Admin_Config', 'Admin_Data', 'Logout');\n\t}\n\telse if($_SESSION['AdminLevel'] > 0)\n\t{\n\t\t$sub_main_menu = array();\n\t\t$sub_tests_menu = array();\n\t\t$sub_systems_menu = array();\n\t\t$sub_testing_menu = array();\n\t\t$sub_results_menu = array();\n\n\t\tif(phoromatic_account_system_count() > 0)\n\t\t{\n\t\t\t$sub_systems_menu[] = 'Dashboard';\n\t\t\t$sub_systems_menu[] = 'Maintenance Table';\n\t\t\t$sub_systems_menu[] = 'Component Table';\n\t\t}\n\n\t\t//$sub_main_menu[] = '<a href=\"?tests\">Test Profiles</a>';\n\t\tif(isset($_SESSION['AdminLevel']) && $_SESSION['AdminLevel'] < 4)\n\t\t{\n\t\t\t$sub_main_menu[] = 'Users';\n\t\t}\n\n\t\tarray_push($sub_main_menu, 'Settings', '<a href=\"?account_activity\">Account Activity</a>', 'Logout');\n\t\t$sub_testing_menu[] = '<a href=\"?schedules\">Test Schedules</a>';\n\n\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t{\n\t\t\tarray_push($sub_tests_menu, '<a href=\"?create_test\">Create New Test Profile</a>');\n\t\t\tarray_push($sub_tests_menu, '<a href=\"?build_suite\">Build Test Suite</a>');\n\t\t\tarray_push($sub_testing_menu, '<a href=\"?sched\">Create A Schedule</a>', '<a href=\"?benchmark\">Run A Benchmark</a>');\n\t\t}\n\n\t\tif(phoromatic_tracker_page_relevant())\n\t\t{\n\t\t\t$sub_results_menu[] = 'Tracker';\n\t\t}\n\t\t$sub_results_menu[] = '<a href=\"/rss.php?user=' . $_SESSION['UserID'] . '&amp;v=' . sha1($_SESSION['CreatedOn']) . '\">Results Feed <img src=\"images/rss.svg\" width=\"16\" height=\"16\" /></a>';\n\n\t\t$pages = array('Main' => $sub_main_menu, 'Systems' => $sub_systems_menu, 'Tests' => $sub_tests_menu, '<a href=\"/?testing\">Testing</a>' => $sub_testing_menu, 'Results' => $sub_results_menu, '<form action=\"/?search\" method=\"post\" id=\"search\"><input type=\"search\" name=\"search\" id=\"seach_input\" size=\"16\" /> <input type=\"submit\" name=\"sa\" value=\"Search\" /><div class=\"search_expander\"></div></form>');\n\t}\n\n\tforeach($pages as $title => $page)\n\t{\n\t\tif(is_array($page) || empty($page))\n\t\t{\n\t\t\t$menu_row = array();\n\t\t\tforeach($page as $sub_page)\n\t\t\t{\n\t\t\t\t$menu_row[] = menu_item_to_html($sub_page);\n\t\t\t}\n\t\t\t$html_links[menu_item_to_html($title)] = $menu_row;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$html_links[] = menu_item_to_html($page);\n\t\t}\n\t}\n\n\treturn phoromatic_webui_header($html_links, null);\n}\nfunction menu_item_to_html($page)\n{\n\tif(strpos($page, '</') !== false)\n\t\treturn $page;\n\n\t$page_link = strtolower($page);\n\tif(($x = strpos($page_link, '<br />')) !== false)\n\t{\n\t\t$page_link = trim(substr($page_link, $x + 6));\n\t}\n\t$page_link = str_replace(' ', '_', $page_link);\n\n\tif(strtolower($page) == PAGE_REQUEST)\n\t{\n\t\treturn '<a href=\"?' . $page_link . '\"><u>' . str_replace('_', ' ', $page) . '</u></a>';\n\t}\n\telse\n\t{\n\t\treturn '<a href=\"?' . $page_link . '\">' . str_replace('_', ' ', $page) . '</a>';\n\t}\n}\nfunction phoromatic_webui_right_panel_logged_in($add = null)\n{\n\t$right = null;\n\tif($_SESSION['AdminLevel'] == -40)\n\t{\n\t\t$right .= '<h3>Phoromatic Server</h3><hr /><p><strong>' . date('H:i T - j F Y') . '</p>';\n\t}\n\telse if($_SESSION['AdminLevel'] > 0)\n\t{\n\t\t//$right .= '<a href=\"#\" onclick=\"javascript:phoromatic_generate_comparison(\\'?result/\\');\"><div id=\"phoromatic_result_compare_info_box\"></div></a> <a href=\"#\" onclick=\"javascript:phoromatic_delete_results(\\'?results/delete/\\'); return false;\"><div id=\"phoromatic_result_delete_box\">Delete Selected Results</div></a>';\n\t\tif(($bad_systems = phoromatic_server::systems_appearing_down()) != false)\n\t\t{\n\t\t\t$right .= '<ul><li><span class=\"alert\">Systems Needing Attention</span></li>';\n\t\t\tforeach($bad_systems as $system)\n\t\t\t{\n\t\t\t\t$right .= '<li><a href=\"?systems/' . $system . '\">' . phoromatic_server::system_id_to_name($system) . '</a></li>';\n\t\t\t}\n\t\t\t$right .= '</ul><hr />';\n\t\t}\n\n\t\t$right .= $add;\n\n\t\tif($add == null)\n\t\t{\n\t\t\t$recently_active_systems = phoromatic_server::recently_active_systems($_SESSION['AccountID']);\n\t\t\tif(!empty($recently_active_systems))\n\t\t\t{\n\t\t\t\t$right .= '<ul><li>Recently Active Systems</li>';\n\n\t\t\t\tforeach($recently_active_systems as &$row)\n\t\t\t\t{\n\t\t\t\t\t$right .= '<li><a href=\"?systems/' . $row['SystemID'] . '\">' . $row['Title'] . '</a></li>';\n\t\t\t\t}\n\n\t\t\t\t$right .= '</ul><hr />';\n\t\t\t}\n\n\t\t\t$right .= '\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Today\\'s Scheduled Events</li>';\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, ScheduleID, RunAt FROM phoromatic_schedules WHERE AccountID = :account_id AND State >= 1  AND ActiveOn LIKE :active_on ORDER BY RunAt,Title ASC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':active_on', '%' . (date('N') - 1) . '%');\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\tif($row == false)\n\t\t\t\t{\n\t\t\t\t\t$right .= '</ul><p style=\"text-align: left; margin: 6px 10px;\">No Events Found</p>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$right .= '<li>' . $row['RunAt'] . ' <a href=\"?schedules/' . $row['ScheduleID'] . '\">' . $row['Title'] . '</a></li>';\n\t\t\t\t\t}\n\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t$right .= '</ul>';\n\t\t\t\t}\n\n\t\t}\n\n\t\t$system_count = phoromatic_account_system_count();\n\t\t$schedule_count = phoromatic_account_schedule_count();\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(UploadID) AS ResultCount FROM phoromatic_results WHERE AccountID = :account_id');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$result_count = $row['ResultCount'];\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(ActivityTime) AS ActivityCount FROM phoromatic_activity_stream WHERE AccountID = :account_id AND ActivityTime LIKE :today_date');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$stmt->bindValue(':today_date', date('Y-m-d') . '%');\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$activity_count = $row['ActivityCount'];\n\n\t\t$group_name = phoromatic_account_id_to_group_name($_SESSION['AccountID']);\n\t\tif($group_name != null)\n\t\t{\n\t\t\t$group_name = '<strong>' . $group_name . '</strong><br />';\n\t\t}\n\n\t\t$right .= '<hr /><p><strong>' . date('H:i T - j F Y') . '</strong><br />' . $group_name . '<a href=\"?systems\">' . $system_count . ' System' . ($system_count == 1 ? '' : 's') . '</a><br /><a href=\"?schedules\">' . $schedule_count . ' Schedule' . ($schedule_count == 1 ? '' : 's') . '</a><br /><a href=\"?results\">' . $result_count . ' Result' . ($result_count == 1 ? '' : 's') . '</a>';\n\n\n$right .= ' <a href=\"/rss.php?user=' . $_SESSION['UserID'] . '&amp;v=' . sha1($_SESSION['CreatedOn']) . '\"><img src=\"images/rss.svg\" width=\"16\" height=\"16\" /></a>';\n\n\t\t$right .= '<br /><a href=\"?account_activity\">' . $activity_count . ' Activity Events Today</a></p>';\n\t}\n\n\treturn $right;\n}\nfunction phoromatic_account_schedule_count()\n{\n\tstatic $schedule_count = 0;\n\n\tif($schedule_count == 0)\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(Title) AS ScheduleCount FROM phoromatic_schedules WHERE AccountID = :account_id AND State >= 1');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$schedule_count = $row['ScheduleCount'];\n\t}\n\n\treturn $schedule_count;\n}\nfunction phoromatic_account_system_count()\n{\n\tstatic $sys_count = 0;\n\n\tif($sys_count == 0)\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(Title) AS SystemCount FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$sys_count = $row['SystemCount'];\n\t}\n\treturn $sys_count;\n}\nfunction phoromatic_web_socket_server_ip()\n{\n\t$server_ip = $_SERVER['HTTP_HOST'];\n\tif(($x = strpos($server_ip, ':')) !== false)\n\t{\n\t\t$server_ip = substr($server_ip, 0, $x);\n\t}\n\n\tif($server_ip == 'localhost' || $server_ip == '0.0.0.0')\n\t{\n\t\t$local_ip = phodevi::read_property('network', 'ip');\n\t\tif($local_ip)\n\t\t{\n\t\t\t$server_ip = $local_ip;\n\t\t}\n\t}\n\t// getenv('PTS_WEBSOCKET_PORT')\n\treturn $server_ip . ':' . $_SERVER['SERVER_PORT'];\n}\nfunction phoromatic_web_socket_server_addr()\n{\n\t// getenv('PTS_WEBSOCKET_PORT')\n\treturn phoromatic_web_socket_server_ip() . '/' . $_SESSION['AccountID'];\n}\nfunction phoromatic_error_page($title, $description)\n{\n\techo phoromatic_webui_header(array(''), '');\n\n\t$box = '<h1>' . $title . '</h1>\n\t\t<h2>' . $description . '</h2>\n\t\t<p>To fix this error, try <a onclick=\"javascript:window.history.back();\">returning to the previous page</a>. Still having problems? Consider <a href=\"https://github.com/phoronix-test-suite/phoronix-test-suite/issues?state=open\">opening a GitHub issue report</a>; commercial support customers should contact Phoronix Media.</p><hr /><hr />';\n\techo phoromatic_webui_box($box);\n\techo phoromatic_webui_footer();\n}\nfunction phoromatic_systems_needing_attention()\n{\n\t$main = null;\n\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, State, LastIP, LocalIP, LastCommunication FROM phoromatic_systems WHERE AccountID = :account_id AND State = 0 ORDER BY LastCommunication DESC');\n\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t$result = $stmt->execute();\n\tif($row = $result->fetchArray())\n\t{\n\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\"><div style=\"float: left; width: 100%;\"><ul><li><h1>Systems Needing Attention</h1></li><li class=\"light\" style=\"font-weight: normal;\">The following systems have attempted to sync with this Phoromatic account but have not been validated. When clicking on them you are able to approve or disable them from your account along with editing the system information.</li>';\n\n\t\tdo\n\t\t{\n\t\t\t$ip = $row['LocalIP'];\n\t\t\tif($row['LastIP'] != $row['LocalIP'])\n\t\t\t{\n\t\t\t\t$ip .= ' / ' . $row['LastIP'];\n\t\t\t}\n\n\t\t\t$main .= '<a href=\"?systems/' . $row['SystemID'] . '/edit\"><li>' . $row['Title'] . '<br /><em><strong>IP:</strong> ' . $ip . ' <strong>Last Communication:</strong> ' . $row['LastCommunication'] . '</em></li></a>';\n\t\t}\n\t\twhile($row = $result->fetchArray());\n\n\t\t$main .= '</ul></div></div>';\n\t}\n\n\treturn $main;\n}\nfunction phoromatic_system_id_to_name($system_id, $aid = false)\n{\n\treturn phoromatic_server::system_id_to_name($system_id, $aid);\n}\nfunction phoromatic_oldest_result_for_schedule($schedule_id)\n{\n\tstatic $old_time;\n\n\tif(!isset($old_time[$schedule_id]))\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT UploadTime FROM phoromatic_results WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY UploadTime ASC LIMIT 1');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$stmt->bindValue(':schedule_id', $schedule_id);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$old_time[$schedule_id] = $row['UploadTime'];\n\t}\n\n\treturn $old_time[$schedule_id];\n}\nfunction phoromatic_schedule_id_to_name($schedule_id)\n{\n\tstatic $schedule_names;\n\n\tif(!isset($schedule_names[$schedule_id]))\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title FROM phoromatic_schedules WHERE AccountID = :account_id AND ScheduleID = :schedule_id');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$stmt->bindValue(':schedule_id', $schedule_id);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$schedule_names[$schedule_id] = $row['Title'];\n\t}\n\n\treturn $schedule_names[$schedule_id];\n}\nfunction phoromatic_account_id_to_group_name($account_id)\n{\n\t// XXX deprecated\n\treturn phoromatic_server::account_id_to_group_name($account_id);\n}\nfunction create_new_phoromatic_account($register_username, $register_password, $register_password_confirm, $register_email, $seed_accountid = null)\n{\n\t// REGISTER NEW USER\n\tif(strlen($register_username) < 4 || strpos($register_username, ' ') !== false)\n\t{\n\t\tphoromatic_error_page('Oops!', 'Please go back and ensure the supplied username is at least four characters long and contains no spaces.');\n\t\treturn false;\n\t}\n\tif(in_array(strtolower($register_username), array('admin', 'administrator', 'rootadmin')))\n\t{\n\t\tphoromatic_error_page('Oops!', $register_username . ' is a reserved and common username that may be used for other purposes, please make a different selection.');\n\t\treturn false;\n\t}\n\tif(strlen($register_password) < 6)\n\t{\n\t\tphoromatic_error_page('Oops!', 'Please go back and ensure the supplied password is at least six characters long.');\n\t\treturn false;\n\t}\n\tif($register_password != $register_password_confirm)\n\t{\n\t\tphoromatic_error_page('Oops!', 'Please go back and ensure the supplied password matches the password confirmation.');\n\t\treturn false;\n\t}\n\tif($register_email == null || filter_var($register_email, FILTER_VALIDATE_EMAIL) == false)\n\t{\n\t\tphoromatic_error_page('Oops!', 'Please enter a valid email address.');\n\t\treturn false;\n\t}\n\n\t$valid_user_name_chars = '1234567890-_.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\tfor($i = 0; $i < strlen($register_username); $i++)\n\t{\n\t\tif(strpos($valid_user_name_chars, substr($register_username, $i, 1)) === false)\n\t\t{\n\t\t\tphoromatic_error_page('Oops!', 'Please go back and ensure a valid user-name. The character <em>' . substr($register_username, $i, 1) . '</em> is not allowed.');\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t$matching_users = phoromatic_server::$db->querySingle('SELECT UserName FROM phoromatic_users WHERE UserName = \\'' . SQLite3::escapeString($register_username) . '\\'');\n\tif(!empty($matching_users))\n\t{\n\t\tphoromatic_error_page('Oops!', 'The user-name is already taken.');\n\t\treturn false;\n\t}\n\n\tif(phoromatic_server::read_setting('add_new_users_to_account') != null)\n\t{\n\t\t$account_id = phoromatic_server::read_setting('add_new_users_to_account');\n\t\t$is_new_account = false;\n\t}\n\telse\n\t{\n\t\t$id_tries = 0;\n\t\tdo\n\t\t{\n\t\t\tif($id_tries == 0 && $seed_accountid != null && isset($seed_accountid[5]))\n\t\t\t{\n\t\t\t\t$account_id = strtoupper(substr($seed_accountid, 0, 6));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$account_id = pts_strings::random_characters(6, true);\n\t\t\t}\n\t\t\t$matching_accounts = phoromatic_server::$db->querySingle('SELECT AccountID FROM phoromatic_accounts WHERE AccountID = \\'' . $account_id . '\\'');\n\t\t\t$id_tries++;\n\t\t}\n\t\twhile(!empty($matching_accounts));\n\t\t$is_new_account = true;\n\t}\n\n\t$user_id = pts_strings::random_characters(4, true);\n\n\tif($is_new_account)\n\t{\n\t\tpts_logger::add_to_log($_SERVER['REMOTE_ADDR'] . ' created a new account: ' . $user_id . ' - ' . $account_id);\n\t\t$account_salt = pts_strings::random_characters(12, true);\n\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_accounts (AccountID, ValidateID, CreatedOn, Salt) VALUES (:account_id, :validate_id, :current_time, :salt)');\n\t\t$stmt->bindValue(':account_id', $account_id);\n\t\t$stmt->bindValue(':validate_id', pts_strings::random_characters(4, true));\n\t\t$stmt->bindValue(':salt', $account_salt);\n\t\t$stmt->bindValue(':current_time', phoromatic_server::current_time());\n\t\t$result = $stmt->execute();\n\n\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_account_settings (AccountID) VALUES (:account_id)');\n\t\t$stmt->bindValue(':account_id', $account_id);\n\t\t$result = $stmt->execute();\n\n\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_user_settings (UserID, AccountID) VALUES (:user_id, :account_id)');\n\t\t$stmt->bindValue(':user_id', $user_id);\n\t\t$stmt->bindValue(':account_id', $account_id);\n\t\t$result = $stmt->execute();\n\t}\n\telse\n\t{\n\t\tpts_logger::add_to_log($_SERVER['REMOTE_ADDR'] . ' being added to an account: ' . $user_id . ' - ' . $account_id);\n\t\t$account_salt = phoromatic_server::$db->querySingle('SELECT Salt FROM phoromatic_accounts WHERE AccountID = \\'' . $account_id . '\\'');\n\t}\n\n\t$salted_password = hash('sha256', $account_salt . $register_password);\n\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_users (UserID, AccountID, UserName, Email, Password, CreatedOn, LastIP, AdminLevel) VALUES (:user_id, :account_id, :user_name, :email, :password, :current_time, :last_ip, :admin_level)');\n\t$stmt->bindValue(':user_id', $user_id);\n\t$stmt->bindValue(':account_id', $account_id);\n\t$stmt->bindValue(':user_name', $register_username);\n\t$stmt->bindValue(':email', $register_email);\n\t$stmt->bindValue(':password', $salted_password);\n\t$stmt->bindValue(':last_ip', $_SERVER['REMOTE_ADDR']);\n\t$stmt->bindValue(':current_time', phoromatic_server::current_time());\n\t$stmt->bindValue(':admin_level', ($is_new_account ? 1 : 10));\n\t$result = $stmt->execute();\n\n\tpts_file_io::mkdir(phoromatic_server::phoromatic_account_path($account_id));\n\tphoromatic_server::send_email($register_email, 'Phoromatic Account Registration', (($e = phoromatic_server::read_setting('admin_support_email')) != null ? $e : 'no-reply@phoromatic.com'), '<p><strong>' . $register_username . '</strong>:</p><p>Your Phoromatic account has been created and is now active.</p>');\n\treturn true;\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2009 - 2021, Phoronix Media\n\tCopyright (C) 2009 - 2021, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// INIT\ndefine('PHOROMATIC_SERVER', true);\n//ini_set('memory_limit', '64M');\ndefine('PTS_MODE', 'WEB_CLIENT');\ndefine('PTS_AUTO_LOAD_OBJECTS', true);\nerror_reporting(E_ALL);\n\ninclude('../../pts-core.php');\npts_core::init();\n\n$environment_variables = array(\n\t'aid' => 'ACCOUNT_ID',\n\t'sid' => 'SYSTEM_ID',\n\t'bid' => 'BENCHMARK_TICKET_ID',\n//\t'vid' => 'VALIDATE_ID',\n\t'gsid' => 'GSID',\n\t'a' => 'ACTIVITY',\n\t'r' => 'REQUEST',\n\t'pts' => 'CLIENT_VERSION',\n\t'pts_core' => 'CLIENT_CORE_VERSION',\n\t'h' => 'CLIENT_HARDWARE',\n\t's' => 'CLIENT_SOFTWARE',\n\t'pp' => 'PHODEVI_PROPERTIES',\n\t'i' => 'ID',\n\t'o' => 'OTHER',\n\t'nm' => 'NETWORK_CLIENT_MAC',\n\t'nw' => 'NETWORK_CLIENT_WOL',\n\t'n' => 'HOSTNAME',\n\t'ti' => 'TEST_IDENTIFIER',\n\t'ts' => 'TRIGGER_STRING',\n\t'time' => 'ESTIMATED_TIME',\n\t'pc' => 'PERCENT_COMPLETE',\n\t'c' => 'COMPOSITE_XML',\n\t'ob' => 'OPENBENCHMARKING_ID',\n\t'sched' => 'SCHEDULE_ID',\n\t'lip' => 'LOCAL_IP',\n\t'l' => 'LOGS',\n\t'j' => 'JSON',\n\t'composite_xml' => 'COMPOSITE_XML',\n\t'composite_xml_gz' => 'COMPOSITE_XML_GZ',\n\t'composite_xml_hash' => 'COMPOSITE_XML_HASH',\n\t'system_logs_type' => 'SYSTEM_LOGS_TYPE',\n\t'system_logs_zip' => 'SYSTEM_LOGS_ZIP',\n\t'system_logs_hash' => 'SYSTEM_LOGS_HASH',\n\t'msi' => 'PTS_MACHINE_SELF_ID',\n\t'err' => 'ERROR_MSG',\n\t'et' => 'ELAPSED_TIME',\n\t);\n\nforeach($environment_variables as $get_var => $to_var)\n{\n\tif(isset($_REQUEST[$get_var]) && !empty($_REQUEST[$get_var]))\n\t{\n\t\t$$to_var = $_REQUEST[$get_var];\n\t}\n\telse\n\t{\n\t\t$$to_var = null;\n\t}\n}\n\nif($CLIENT_CORE_VERSION < 5400)\n{\n\t// Due to major PTS 5.4 development changes, client version bump will be necessary\n\t$json['phoromatic']['error'] = 'You must update your Phoronix Test Suite clients for compatibility with this Phoromatic server.';\n\techo json_encode($json);\n\texit;\n}\ndefine('CLIENT_CORE_VERSION', $CLIENT_CORE_VERSION);\n\n// DATABASE SETUP\nphoromatic_server::prepare_database();\n\nif($ACCOUNT_ID == null && $PTS_MACHINE_SELF_ID != null)\n{\n\t// Try to find the account\n\t$stmt = phoromatic_server::$db->prepare('SELECT AccountID FROM phoromatic_systems WHERE MachineSelfID = :machine_self_id');\n\t$stmt->bindValue(':machine_self_id', $PTS_MACHINE_SELF_ID);\n\t$result = $stmt->execute();\n\n\tif(!empty($result))\n\t{\n\t\t$result = $result->fetchArray();\n\t\tif($result['AccountID'] != null)\n\t\t{\n\t\t\t$json['phoromatic']['account_id'] = $result['AccountID'];\n\t\t\techo json_encode($json);\n\t\t\texit;\n\t\t}\n\t}\n\n\t// Try to find the account if there is an IP/MAC claim\n\tif(!empty($_SERVER['REMOTE_ADDR']) && !empty($NETWORK_CLIENT_MAC))\n\t{\n\t\t// IPAddress = :ip_address OR\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT AccountID FROM phoromatic_system_association_claims WHERE NetworkMAC = :network_mac OR IPAddress = :ip_address ORDER BY CreationTime ASC LIMIT 1');\n\t\t$stmt->bindValue(':ip_address', $_SERVER['REMOTE_ADDR']);\n\t\t$stmt->bindValue(':network_mac', $NETWORK_CLIENT_MAC);\n\t\t$result = $stmt->execute();\n\n\t\tif(!empty($result))\n\t\t{\n\t\t\t$result = $result->fetchArray();\n\t\t\t$json['phoromatic']['account_id'] = $result['AccountID'];\n\t\t\techo json_encode($json);\n\t\t\texit;\n\t\t}\n\t}\n}\n\nif(($GSID == null && $PTS_MACHINE_SELF_ID == null) || $ACCOUNT_ID == null)\n{\n\t$json['phoromatic']['error'] = 'Invalid Credentials';\n\techo json_encode($json);\n\texit;\n}\n\n// CHECK FOR VALID ACCOUNT\nif(!phoromatic_server::is_phoromatic_account_path($ACCOUNT_ID))\n{\n\t$json['phoromatic']['error'] = 'Invalid User';\n\techo json_encode($json);\n\texit;\n}\ndefine('ACCOUNT_ID', $ACCOUNT_ID);\n\n\n// CHECK IF SYSTEM IS ALREADY CONNECTED TO THE ACCOUNT\nif($PTS_MACHINE_SELF_ID != null)\n{\n\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, Groups, State, MaintenanceMode, LastCommunication FROM phoromatic_systems WHERE AccountID = :account_id AND MachineSelfID = :machine_self_id');\n\t$stmt->bindValue(':account_id', ACCOUNT_ID);\n\t$stmt->bindValue(':machine_self_id', $PTS_MACHINE_SELF_ID);\n\t$result = $stmt->execute();\n\t$result = $result->fetchArray();\n}\n\n\nif(!isset($result) || empty($result))\n{\n\t// If system was reloaded and MachineSelfID no longer matches but there is existing IP or MAC address claim against it\n\t// XXX dropped LastIP = :ip_address OR\n\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, Groups, State, MaintenanceMode, LastCommunication FROM phoromatic_systems WHERE AccountID = :account_id AND NetworkMAC = :network_mac');\n\t$stmt->bindValue(':account_id', ACCOUNT_ID);\n\t$stmt->bindValue(':ip_address', $_SERVER['REMOTE_ADDR']);\n\t$stmt->bindValue(':network_mac', $NETWORK_CLIENT_MAC);\n\t$result = $stmt->execute();\n\t$result = $result->fetchArray();\n}\n\nif(empty($result))\n{\n\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_account_settings WHERE AccountID = :account_id');\n\t$stmt->bindValue(':account_id', ACCOUNT_ID);\n\t$result = $stmt->execute();\n\t$phoromatic_account_settings = $result->fetchArray(SQLITE3_ASSOC);\n\tunset($phoromatic_account_settings['AccountID']);\n\n\t// APPARENT FIRST TIME FOR THIS SYSTEM CONNECTING TO THIS ACCOUNT\n\tdo\n\t{\n\t\t$system_id = pts_strings::random_characters(5, true);\n\t\t$matching_system = phoromatic_server::$db->querySingle('SELECT AccountID FROM phoromatic_systems WHERE SystemID = \\'' . $system_id . '\\'');\n\t}\n\twhile(!empty($matching_system));\n\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_systems (AccountID, SystemID, Hardware, Software, SystemProperties, ClientVersion, GSID, CurrentTask, CreatedOn, LastCommunication, LastIP, LocalIP, Title, State, MachineSelfID, CoreVersion, NetworkMAC) VALUES (:account_id, :system_id, :client_hardware, :client_software, :phodevi_properties, :client_version, :gsid, :current_task, :current_time, :current_time, :access_ip, :local_ip, :title, :preset_state, :machine_self_id, :core_version, :network_mac)');\n\t$stmt->bindValue(':account_id', ACCOUNT_ID);\n\t$stmt->bindValue(':system_id', $system_id);\n\t$stmt->bindValue(':client_hardware', $CLIENT_HARDWARE);\n\t$stmt->bindValue(':client_software', $CLIENT_SOFTWARE);\n\t$stmt->bindValue(':phodevi_properties', $PHODEVI_PROPERTIES);\n\t$stmt->bindValue(':client_version', $CLIENT_VERSION);\n\t$stmt->bindValue(':gsid', $GSID);\n\t$stmt->bindValue(':access_ip', $_SERVER['REMOTE_ADDR']);\n\t$stmt->bindValue(':local_ip', $LOCAL_IP);\n\t$stmt->bindValue(':title', $HOSTNAME);\n\t$stmt->bindValue(':current_time', phoromatic_server::current_time());\n\t$stmt->bindValue(':machine_self_id', $PTS_MACHINE_SELF_ID);\n\t$stmt->bindValue(':core_version', $CLIENT_CORE_VERSION);\n\t$stmt->bindValue(':network_mac', $NETWORK_CLIENT_MAC);\n\n\tif($phoromatic_account_settings['AutoApproveNewSystems'])\n\t{\n\t\t$stmt->bindValue(':current_task', 'System Added');\n\t\t$stmt->bindValue(':preset_state', 1);\n\t\t$new_response = 'System Automatically Added To Account.';\n\t}\n\telse\n\t{\n\t\t$stmt->bindValue(':current_task', 'Awaiting Authorization');\n\t\t$stmt->bindValue(':preset_state', 0);\n\t\t$new_response = 'Information Added; Waiting For Approval From Administrator.';\n\t}\n\n\t$result = $stmt->execute();\n\n\t// Email notifications\n\t$stmt = phoromatic_server::$db->prepare('SELECT UserName, Email FROM phoromatic_users WHERE UserID IN (SELECT UserID FROM phoromatic_user_settings WHERE AccountID = :account_id AND NotifyOnNewSystems = 1) AND AccountID = :account_id');\n\t$stmt->bindValue(':account_id', ACCOUNT_ID);\n\t$result = $stmt->execute();\n\twhile($row = $result->fetchArray())\n\t{\n\t\tphoromatic_server::send_email($row['Email'], 'Phoromatic New System Added', phoromatic_server::account_id_to_group_admin_email(ACCOUNT_ID), '<p><strong>' . $row['UserName'] . ':</strong></p><p>A new system is attempting to associate with a Phoromatic account for which you\\'re associated.</p><p>Title: ' . $HOSTNAME . '<br />IP: ' . $LOCAL_IP . '<br />System Info: ' . $CLIENT_HARDWARE . ' ' . $CLIENT_SOFTWARE . '</p>');\n\t}\n\n\t// Send response back\n\t$json['phoromatic']['response'] = $new_response;\n\techo json_encode($json);\n\texit;\n}\n\ndefine('SYSTEM_ID', $result['SystemID']);\ndefine('SYSTEM_NAME', $result['Title']);\ndefine('SYSTEM_GROUPS', $result['Groups']);\n$SYSTEM_STATE = $result['State'];\ndefine('GSID', $GSID);\ndefine('SYSTEM_IN_MAINTENANCE_MODE', ($result['MaintenanceMode'] == 1));\n\nif(strtotime($result['LastCommunication']) < (time() - 300))\n{\n\t// Avoid useless updates to the database if it's close to the same info in past 2 minutes\n\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET LastIP = :access_ip, LocalIP = :local_ip, LastCommunication = :current_time, Hardware = :client_hardware, Software = :client_software, SystemProperties = :phodevi_properties, ClientVersion = :client_version, MachineSelfID = :machine_self_id, NetworkMAC = :network_mac, NetworkWakeOnLAN = :network_wol, CoreVersion = :core_version WHERE AccountID = :account_id AND SystemID = :system_id');\n\t$stmt->bindValue(':account_id', $ACCOUNT_ID);\n\t$stmt->bindValue(':system_id', SYSTEM_ID);\n\t$stmt->bindValue(':client_hardware', $CLIENT_HARDWARE);\n\t$stmt->bindValue(':client_software', $CLIENT_SOFTWARE);\n\t$stmt->bindValue(':phodevi_properties', $PHODEVI_PROPERTIES);\n\t$stmt->bindValue(':client_version', $CLIENT_VERSION);\n\t$stmt->bindValue(':core_version', $CLIENT_CORE_VERSION);\n\t$stmt->bindValue(':access_ip', $_SERVER['REMOTE_ADDR']);\n\t$stmt->bindValue(':local_ip', $LOCAL_IP);\n\t$stmt->bindValue(':current_time', phoromatic_server::current_time());\n\t$stmt->bindValue(':machine_self_id', $PTS_MACHINE_SELF_ID);\n\t$stmt->bindValue(':network_mac', $NETWORK_CLIENT_MAC);\n\t$stmt->bindValue(':network_wol', $NETWORK_CLIENT_WOL);\n\t$stmt->execute();\n}\n\n//echo phoromatic_server::$db->lastErrorMsg();\nif($SYSTEM_STATE < 1)\n{\n\t$json['phoromatic']['response'] = 'Waiting For Approval From Administrator.';\n\techo json_encode($json);\n\texit;\n}\n\ndefine('AID', ACCOUNT_ID);\ndefine('SID', SYSTEM_ID);\n\nif(is_file('../communication-resources/' . $REQUEST . '.php'))\n{\n\trequire('../communication-resources/' . $REQUEST . '.php');\n}\nelse\n{\n\t$json['phoromatic']['error'] = 'Unknown Resource: ' . $REQUEST;\n\techo json_encode($json);\n}\n\n//phoromatic_server::close_database();\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2021, Phoronix Media\n\tCopyright (C) 2008 - 2021, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\ninclude('../phoromatic_functions.php');\nphoromatic_init_web_page_setup();\nphoromatic_server::prepare_database();\n\n?>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html>\n<head>\n<script src=\"/phoromatic.js?<?php echo date('Ymd') . PTS_CORE_VERSION; ?>\" type=\"text/javascript\"></script>\n<title>Phoronix Test Suite - Phoromatic </title>\n<link href=\"/phoromatic.css?<?php echo date('Ymd') . PTS_CORE_VERSION; ?>\" rel=\"stylesheet\" type=\"text/css\" />\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n<meta name=\"keywords\" content=\"Phoronix Test Suite, open-source benchmarking, Linux benchmarking, automated testing\" />\n<meta name=\"Description\" content=\"Phoronix Test Suite local control server.\" />\n<link rel=\"shortcut icon\" href=\"favicon.ico\" />\n<!-- PHXCMS-7.2 (phoronix.com) -->\n</head>\n<body>\n\n<?php\n\necho phoromatic_webui_header(array(''), '');\n$result_ids = isset($_GET['ut']) ? explode(',', $_GET['ut']) : false;\nif(!$result_ids)\n{\n\tif(($x = strpos($_SERVER['QUERY_STRING'], 'result/')) !== false)\n\t{\n\t\t$x = substr($_SERVER['QUERY_STRING'], $x + strlen('result/'));\n\t\t$result_ids = explode(',', $x);\n\t}\n}\n$account_id = false;\n\n$main = null;\nif(!empty($result_ids))\n{\n\t$result_files = array();\n\t$display_rows = array();\n\t$system_types = array();\n\t$schedule_types = array();\n\t$trigger_types = array();\n\n\tforeach($result_ids as $upload_id)\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_results WHERE PPRID = :pprid LIMIT 1');\n\t\t$stmt->bindValue(':pprid', $upload_id);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\n\t\t$composite_xml = phoromatic_server::phoromatic_account_result_path($row['AccountID'], $row['UploadID']) . 'composite.xml';\n\t\tif(!is_file($composite_xml))\n\t\t{\n\t\t\techo 'File Not Found: ' . $composite_xml;\n\t\t\treturn false;\n\t\t}\n\t\t$display_rows[$composite_xml] = $row;\n\t\tpts_arrays::unique_push($system_types, $row['SystemID']);\n\t\tpts_arrays::unique_push($schedule_types, $row['ScheduleID']);\n\t\tpts_arrays::unique_push($trigger_types, $row['Trigger']);\n\n\t\t// Update view counter\n\t\t$stmt_view = phoromatic_server::$db->prepare('UPDATE phoromatic_results SET TimesViewed = (TimesViewed + 1) WHERE AccountID = :account_id AND UploadID = :upload_id');\n\t\t$stmt_view->bindValue(':account_id', $account_id);\n\t\t$stmt_view->bindValue(':upload_id', $upload_id);\n\t\t$stmt_view->execute();\n\t}\n\n\t$result_file_title = null;\n\tif(empty($schedule_types[0]))\n\t{\n\t\t$system_name_format = 'ORIGINAL_DATA';\n\t}\n\telse if(count($display_rows) == 1)\n\t{\n\t\t$system_name_format = 'SYSTEM_NAME';\n\t}\n\telse if(count($schedule_types) == 1 && count($system_types) == 1)\n\t{\n\t\t$system_name_format = 'TRIGGER';\n\t\t$result_file_title = phoromatic_schedule_id_to_name($schedule_types[0]);\n\t}\n\telse if(count($schedule_types) == 1)\n\t{\n\t\t$system_name_format = 'TRIGGER_AND_SYSTEM';\n\t}\n\telse if(false && count($trigger_types) == 1)\n\t{\n\t\t// TODO XXX: this approach yields garbage strings generally without refining the selector\n\t\t// i.e. first make sure all the schedules match or are comparable\n\t\t$system_name_format = 'SYSTEM_AND_SCHEDULE';\n\t}\n\telse\n\t{\n\t\t$system_name_format = null;\n\t}\n\tif(count($schedule_types) == 1 && $schedule_types[0] != 0)\n\t{\n\t\t$schedule_id = $schedule_types[0];\n\t}\n\n\tforeach($display_rows as $composite_xml => $row)\n\t{\n\t\t//  $row['SystemID'] . ' ' . $row['ScheduleID'] . ' ' . $row['Trigger']\n\t\tswitch($system_name_format)\n\t\t{\n\t\t\tcase 'ORIGINAL_DATA':\n\t\t\t\t$system_name = null;\n\t\t\t\tbreak;\n\t\t\tcase 'SYSTEM_NAME':\n\t\t\t\t$system_name = phoromatic_system_id_to_name($row['SystemID'], $row['AccountID']);\n\t\t\t\tbreak;\n\t\t\tcase 'TRIGGER':\n\t\t\t\t$system_name = $row['Trigger'];\n\t\t\t\tbreak;\n\t\t\tcase 'TRIGGER_AND_SYSTEM':\n\t\t\t\t$system_name = phoromatic_system_id_to_name($row['SystemID'], $row['AccountID']) . ': ' . $row['Trigger'];\n\t\t\t\tbreak;\n\t\t\tcase 'SYSTEM_AND_SCHEDULE':\n\t\t\t\t$system_name = phoromatic_schedule_id_to_name($row['ScheduleID']) . ': ' . $row['Trigger'];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$system_name = phoromatic_system_id_to_name($row['SystemID'], $row['AccountID']) . ' - ' . phoromatic_schedule_id_to_name($row['ScheduleID']) . ' - ' . $row['Trigger'];\n\t\t}\n\n\t\t$rf = new pts_result_file($composite_xml);\n\t\t$rf->rename_run(null, $system_name);\n\t\t$result_files[] = $rf;\n\t}\n\n\t$attributes = array('new_result_file_title' => $result_file_title);\n\t$result_file = new pts_result_file(null, true);\n\t$result_file->merge($result_files, $attributes);\n\t$extra_attributes = array();\n\n\t$attribute_options = array(\n\t\t'normalize_results' => 'normalize_result_buffer',\n\t\t'sort_by_performance' => 'sort_result_buffer_values',\n\t\t'sort_by_reverse' => 'reverse_result_buffer',\n\t\t'sort_by_name' => 'sort_result_buffer',\n\t\t'condense_comparison' => 'condense_multi_way',\n\t\t);\n\tforeach($attribute_options as $web_var => $attr_var)\n\t{\n\t\tif(isset($_REQUEST[$web_var]))\n\t\t{\n\t\t\t$extra_attributes[$attr_var] = true;\n\t\t}\n\t}\n\n\tif(isset($_POST['transpose_comparison']))\n\t{\n\t\t$result_file->invert_multi_way_invert();\n\t}\n\t$intent = null;\n\t$main .= '<h1>' . $result_file->get_title() . '</h1>';\n\t$main .= '<p>' . $result_file->get_description() . '</p>';\n\t$main .= phoromatic_annotate_entry('RESULT', implode(',', $result_ids), 'TOP');\n\n\tif($result_file->get_system_count() == 1 || ($intent = pts_result_file_analyzer::analyze_result_file_intent($result_file, $intent, true)))\n\t{\n\t\t$table = new pts_ResultFileCompactSystemsTable($result_file, $intent);\n\t}\n\telse\n\t{\n\t\t$table = new pts_ResultFileSystemsTable($result_file);\n\t}\n\n\t$main .= '<p style=\"text-align: center; overflow: auto;\" class=\"result_object\">' . pts_render::render_graph_inline_embed($table, $result_file, $extra_attributes) . '</p>';\n\n\t$table = new pts_ResultFileTable($result_file, $intent);\n\t$main .= '<p style=\"text-align: center; overflow: auto;\" class=\"result_object\">' . pts_render::render_graph_inline_embed($table, $result_file, $extra_attributes) . '</p>';\n\t$main .= '<div id=\"pts_results_area\">';\n\tforeach($result_file->get_result_objects((isset($_POST['show_only_changed_results']) ? 'ONLY_CHANGED_RESULTS' : -1)) as $i => $result_object)\n\t{\n\t\t$main .= '<h2><a name=\"r-' . $i . '\"></a><a name=\"' . $result_object->get_comparison_hash(true, false) . '\"></a>' . $result_object->test_profile->get_title() . '</h2>';\n\t\t$main .= phoromatic_annotate_entry('RESULT', implode(',', $result_ids), $result_object->get_comparison_hash(true, false));\n\t\t$main .= '<p style=\"text-align: center; overflow: auto;\">';\n\t\t$main .= pts_render::render_graph_inline_embed($result_object, $result_file, $extra_attributes);\n\t\t$main .= '</p>';\n\t}\n\t$main .= '</div>';\n}\nelse\n{\n\t$time_limit = false;\n\t$time_str = false;\n\tif(isset($_POST['time']))\n\t{\n\t\t$time_str = $_POST['time'];\n\t\t$time_limit = strtotime('- ' . $time_str);\n\t}\n\tif($time_limit == false)\n\t{\n\t\t$time_str = '1 month';\n\t\t$time_limit = strtotime('- ' . $time_str);\n\t}\n\n\t$result_limit = isset($_POST['result_limit']) && is_numeric($_POST['result_limit']) && $_POST['result_limit'] > 9 ? $_POST['result_limit'] : 50;\n\t$main .= '<br /><br /><br />';\n\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" method=\"post\"><div style=\"text-align: left; font-weight: bold;\">Show Results For <select id=\"result_time_limit\" name=\"time\">';\n\t$results_for_length = array(\n\t\t'24 hours' => '24 Hours',\n\t\t'3 days' => '3 Days',\n\t\t'1 week' => 'Week',\n\t\t'2 week' => '2 Weeks',\n\t\t'1 month' => 'Month',\n\t\t'2 months' => '2 Months',\n\t\t'3 months' => 'Quarter',\n\t\t'6 months' => '6 Months',\n\t\t'1 year' => 'Year',\n\t\t'2 year' => 'Two Years',\n\t\t);\n\n\tforeach($results_for_length as $val => $str)\n\t{\n\t\t$main .= '<option value=\"' . $val . '\"' . ($time_str == $val ? ' selected=\"selected\"' : null) . '>Past ' . $str . '</option>';\n\t}\n\n\t$main .= '</select> Search For <input type=\"text\" name=\"search\" value=\"' . (isset($_POST['search']) ? $_POST['search'] : null) . '\" /> &nbsp; Limit Results To <select id=\"result_limit\" name=\"result_limit\">';\n\tfor($i = 25; $i <= 150; $i += 25)\n\t{\n\t\t$main .= '<option value=\"' . $i . '\"' . ($result_limit == $i ? ' selected=\"selected\"' : null) . '>' . $i . '</option>';\n\t}\n\n\t$main .= '</select> &nbsp; <input type=\"submit\" value=\"Update\" /></div></form>';\n\t$main .= '<a onclick=\"javascript:phoromatic_generate_comparison(\\'public.php?ut=\\');\"><div id=\"phoromatic_result_compare_info_box\" style=\"background: #1976d2; border: 1px solid #000;\"></div></a>';\n\t$main .= '<h1>Publicly Accessible Test Results</h1>';\n\t$main .= '<p><em>Results where the accounts on this server have opted for the settings page item of making results public.</em></p>';\n\t$main .= '<div class=\"pts_phoromatic_info_box_area\">';\n\t$search_for = (!isset($_POST['search']) || empty($_POST['search']) ? null : 'AND (Title LIKE :search OR Description LIKE :search OR UploadID IN (SELECT UploadID FROM phoromatic_results_systems WHERE AccountID = :account_id AND (Software LIKE :search OR Hardware LIKE :search)))');\n\t$main .= '<div style=\"margin: 0 5%;\"><ul style=\"max-height: 100%;\"><li><h1>Recent Test Results</h1></li>';\n\t$account_limit = ' AccountID IN (SELECT AccountID FROM phoromatic_account_settings WHERE LetPublicViewResults = 1) ';\n\n\tif(isset($PATH[1]) && $PATH[0] == 'hash')\n\t{\n\t\t// Find matching comparison hashes\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime, TimesViewed, AccountID FROM phoromatic_results WHERE ' . $account_limit . ' ' . $search_for. ' AND ComparisonHash = :comparison_hash ORDER BY UploadTime DESC LIMIT ' . $result_limit);\n\t\t$stmt->bindValue(':comparison_hash', $PATH[1]);\n\t}\n\telse if(isset($PATH[1]) && $PATH[0] == 'ticket')\n\t{\n\t\t// Find matching ticket results\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime, TimesViewed, AccountID FROM phoromatic_results WHERE ' . $account_limit . $search_for. ' AND BenchmarkTicketID = :ticket_id ORDER BY UploadTime DESC LIMIT ' . $result_limit);\n\t\t$stmt->bindValue(':ticket_id', $PATH[1]);\n\t}\n\telse\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime, TimesViewed, AccountID FROM phoromatic_results WHERE ' . $account_limit . ' ' . $search_for. ' ORDER BY UploadTime DESC LIMIT ' . $result_limit);\n\t}\n\n\t$stmt->bindValue(':search', (isset($_POST['search']) ? '%' . $_POST['search'] . '%' : null));\n\t$test_result_result = $stmt->execute();\n\t$results = 0;\n\twhile($test_result_row = $test_result_result->fetchArray())\n\t{\n\t\tif(strtotime($test_result_row['UploadTime']) < $time_limit)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tif($results > 150)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\n\t\t$main .= '<a onclick=\"\"><li id=\"result_select_' . $test_result_row['PPRID'] . '\"><input type=\"checkbox\" id=\"result_compare_checkbox_' . $test_result_row['PPRID'] . '\" onclick=\"javascript:phoromatic_checkbox_toggle_result_comparison(\\'' . $test_result_row['PPRID'] . '\\');\" onchange=\"return false;\"></input> <span onclick=\"javascript:phoromatic_window_redirect(\\'public.php?ut=' . $test_result_row['PPRID'] . '\\');\">' . $test_result_row['Title'] . '</span><br /><table><tr><td>' . phoromatic_system_id_to_name($test_result_row['SystemID'], $test_result_row['AccountID']) . '</td><td>' . phoromatic_user_friendly_timedate($test_result_row['UploadTime']) .  '</td><td>' . $test_result_row['TimesViewed'] . ' Times Viewed</td></table></li></a>';\n\t\t$results++;\n\t}\n\tif($results == 0)\n\t{\n\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Results Found</li>';\n\t}\n\t$main .= '</ul></div>';\n\t$main .= '</div>';\n}\n\n\necho phoromatic_webui_main($main);\n\necho phoromatic_webui_footer();\n?>\n</body>\n</html>\n"], "fixing_code": ["PHORONIX TEST SUITE CHANGE-LOG\n\nPhoronix Test Suite (Git)\n\nphodevi: Input sanitization updates for Phoromatic Server\n\nPhoronix Test Suite 10.8.0\n25 December 2021\n\npts-core: Remaining PHP 8.1 warnings/fixes addressed\npts-core: Various macOS 12 warning fixes\npts-core: Allow using OUTPUT_DIR / OUTPUT_FILE environment variables to control result-file-to* sub-commands\npts-core: Improved JSON output generation, add option to the result viewer\npts-core: Add result-file-to-html sub-command and simple inline HTML result output option from result viewer\npts-core: Allow sorting results by test date/time\npts-core: Add TEST_EXECUTION_SORT environment variable to allow sorting test run order in more ways\npts-core: Consolidate/centralize handling of environment variable options to pts_env\npts-core: Add remove-incomplete-results-from-result-file helper command to remove results with incomplete or missing data\npts-core: Add REMOVE_TESTS_ON_COMPLETION environment variable as another way to have tests auto-uninstall/remove after running\npts-core: Improved test installation / test run-time error reporting and detection\npts-core: Allow recording/archiving install and runtime errors within installation metadata\npts-core: Add list-failed-installs sub-command for showing tests that failed to install\npts-core: Add list-test-errors sub-command for showing test run-time errors\npts-core: Add variables sub-command for showing environment variable descriptions and what is set\npts-core: Dynamic detection of Windows download folder location\npts-core: Improved Zip handling on Windows\nphodevi: Add detection for Arm Cortex-A710 and Neoverse-N2 cores\nphodevi: Add detection for AMD Zen 4 cores\nphodevi: Add detection for Intel Raptor Lake\nphodevi: Allow better detecting model number on Windows/Linux for Dell and Apple laptops\nphodevi: CPU temperature monitoring on Windows\nphodevi: Show \"energy_performance_preference\" CPU frequency scaling value where relevant\nphodevi: Linux CPUFreq EPP reporting support\nphodevi: Report Windows 10+ security features\nphodevi: Add PHODEVI_SANITIZE environment variable for those wanting to strip out certain hardware/software strings from system information\ncleanup: Add module that can auto uninstall tests not run in a given amount of time\nphoromatic: Allow relevant PTS environment variables to be exposed for setting by Phoromatic Server for benchmarks/schedules as \"advanced options\" area\nphoromatic: Use the unified result viewer code for presenting result graphs and other result page data\nphoromatic: Make use of shared/common result viewer code to allow adding/editing annotations, editing result file title/description, and deleting individual results from within the result viewer\nphoromatic: Efficiency improvement for when viewing result with just one result file\nphoromatic: Allow Phoromatic client to connect to Phoromatic HTTPS servers\nphoromatic: Allow optionally uploading test install/run logs to the Phoromatic Server\nphoromatic: Alow \"Run A Benchmark\" area to execute conventional PTS/system test suites\nphoromatic: Allow test schedules page to add suites to a schedule rather than only adding just test profiles\nphoromatic: Add option to settings page to always un-install/remove tests after execution for all Phoromatic testing\nphoromatic: Allow environment variables to also be set on a global basis from the Phoromatic Server Settings page\nphoromatic: Allow test installation metadata to be submitted to Phoromatic Server so from systems area can show currently installed tests and any errors\nphoromatic: Opt-in (settings page) support for streaming in-progress benchmark results to the Phoromatic Server between test runs so results can be viewed from the server as they are completed\nphoromatic: Unifying more result viewer and Phoromatic common display code\n\nPhoronix Test Suite 10.6.1\n10 October 2021\n\npts-core: Allow reporting test run errors inline / as part of the result file XML with null/empty results\npts-core: Remove the old, long deprecated static/JavaScript PTS result viewer that hasn't been used except for rare fallbacks since PTS pre-9.0\npts-core: PHP 8.1 deprecation warning/error fixes\npts-core: Support launching PHP web server with PHP_CLI_SERVER_WORKERS to allow multiple workers/threads\npts-core: Windows batch file handling test execution fix\npts-core: Allow running merge-results when pointing to specific XML files outside of standard paths\npts-core: Various minor fixes\nphoromatic: Fix possible case of local test profile download issues from Phoromatic Server\nphoromatic: Warn when lacking database write access for Phoromatic Server\nphoromatic: Support (opt-in) handling of non-text file log files\nphoromatic: Allow uploading of system logs after initial upload of result XML to deal with HTTP size limitations and other factors with large logs\nphoromatic: Use the unified/common log viewer for viewing logs from the Phoromatic web interface\nphoromatic: Tweaking of the Phoromatic CSS style to bring it more uniform with OpenBenchmarking.org / PTS Local Result Viewer / first update in ~6 years...\nphodevi: Improve detection of new Intel oneAPI DPC++/C++ Compiler\nphodevi: ACPI Platform Profile reporting support on Linux\nphodevi: Support reporting NVIDIA BAR1 total memory / Radeon vRAM visible memory (Resizable BAR / ReBAR status)\n\nPhoronix Test Suite 10.4.0\n16 May 2021\n\npts-core: Ubuntu 21.04 dependency updates for changed/removed package names\npts-core: Add \"auto-resolution-wide\" option\npts-core: Add $CPU_THREADS_PER_CORE helper\npts-core: Allow perf-per-dollar-per-hour in the result viewer, extending perf-per-dollar HTML helper\npts-core: Add PTS_EXTRA_SYSTEM_LOGS_DIR environment variable to allow pointing to directory of extra system log files\npts-core: Add RepositoryURL option for test profiles\nphodevi: Intel Linux graphics string format improvement\nphoromatic: Treat set context scripts as a file rather than executing it as a buffer\nphoromatic: Allow passing Phodevi system properties to Phoromatic Server\nphodevi: Add some new properties, port some pts_network info to phodevi interfaces\nsystem_monitor: Adjust perf-per precision\n\nPhoronix Test Suite 10.4.0 Milestone 1\n17 March 2021\n\npts-core: Optimize out sorting percentile values array excess times\npts-core: Optimization to avoid re-parsing test profile definition multiple times\npts-core: Optimization to avoid re-parsing installed test metadata multiple times\npts-core: Allow longer HTTP timeouts on OpenBenchmarking.org result uploads if needed\npts-core: Allow sorting runs within a result file from within the result viewer web interface\n\nPhoronix Test Suite 10.2.2\n17 February 2021\n\npts-core: Add helper text when hitting a download with no working mirrors\npts-core: Various external dependency updates\npts-core: Add enable-repo sub-command for more easily enabling new OpenBenchmarking.org repos\npts-core: Result viewer fix for the limit drop down menu potentially not being activated in some cases\npts-core: Allow renaming runs within the result viewer\nphoromatic: Ensure pcntl_signal is present before starting Phoromatic Server\nphoromatic: PHP 8 compatibility fixes\nphodevi: Fix display driver name potentially being reported inaccurate for some obscure graphics cards / driver configurations\nphodevi: Export current GPU graphics card PCI device ID (GPU_DEVICE_ID) for some games/tests relying on it for configuration\n\nPhoronix Test Suite 10.2.1\n1 February 2021\n\npts-core: Add \"InstallRequiresInternet\" option for test profiles that is more narrow (install time only) than the existing \"RequiresInternet\"\npts-core: Add check-tests sub-command\npts-core: Fix possible crash on PDF output\npts-core: Various small fixes and tweaks\npts-core: Fix PHP8 + cURL download error\npts_Graph: A number of minor SVG standards compliance updates\nphodevi: Log Transparent Huge Pages setting as part of system details\nphodevi: Don't bother parsing the X.org log if it grows too big\n\nPhoronix Test Suite 10.2.0\n5 January 2021\n\npts-core: PHP8 detection improvements\npts-core: For estimated run time, avoid over-calculating time if test has no options but multiple outputs\npts-core: Updated (Open)Mandriva external dependencies\npts_Graph: Minor enhancements\nphodevi: Add support for reporting ACPI Platform Profile and INT340x Workload Hint\n\nPhoronix Test Suite 10.2.0 Milestone 3\n21 December 2020\n\npts-core: Add debug-unhandled-dependencies option\npts-core: Default to 2.5% std dev threshold default on new installs\npts-core: BSD external dependency updates\npts-core: Various refinements to the text user interface\npts-core: When a test profile hits a failed download / broken mirror, report that URL to OpenBenchmarking.org\nphodevi: Don't restore the Phodevi cache if the /etc/machine-id changed (or /etc/hostname as fallback)\n\nPhoronix Test Suite 10.2.0 Milestone 2\n6 December 2020\n\npts-core: Transition to new JSON-based data format for managing test install metadata while maintaining backwards compatibility with prior XML format\npts-core: Begin tracking test run-times per-hash (all configured test options) for more detailed time tracking and in turn time estimates on subsequent runs\npts-core: Increase compression factor when uploading benchmark results\npts-core: Last minute fixes for PHP 8.0 compatibility\nphodevi: Report if CPUFreq Boost enabled/disabled\nturbostat: Add TurboStat module to easily generate turbostat dumps on a per-test basis to log files\nphoromatic: Much faster web viewer performance especially with large databases\n\nPhoronix Test Suite 10.2.0 Milestone 1\n21 November 2020\n\npts-core: Log lock_stat, config.gz, dmidecode to system logs\npts-core: Only show Apple options when running on macOS\npts-core: Add extra safeguard around FORCE_TIMES_TO_RUN for disabling dynamic run count\nob_auto_compare: Intelligently choose more relevant reference results\nphodevi: macOS CPU temperature monitoring support\nphodevi: Support for reading WattsUp Pro power meter data directly without utility using WATTS_UP_METER=<USB TTY>\nphodevi: Report Google Compute Engine machine type as part of motherboard string\nphodevi: Add dumpe2fs to system logs when running on EXT4 and root\nphodevi: Add block size reporting\nphodevi: CPU power reporting for Ampere Altra\nphodevi: Various Ampere Altra hardware detection/reporting improvements\nphodevi: Support reading CPU package power consumption on macOS using powermetrics\n\nPhoronix Test Suite 10.0.1\n21 October 2020\n\npts-core: Fix for older versions of PHP such as in RHEL7\npts-core: Add Thermald version reporting to system table when active\nphodevi: Detection improvements for new CPUs\nphodevi: Avoid \"11th Gen Intel\" CPU string\nphodevi: Update for NVMe drive reporting with KIOXIA, Toshiba sometimes not reporting their brand first\n\nPhoronix Test Suite 10.0.0\n13 October 2020\n\npts-core: Ensure any post-run script is triggered still under halt-testing/skip-test conditions\npts-core: Allow batch processing of performance per dollar metrics\nphodevi: Add Intel AMX presence detection\nphodevi: Add detection for Intel Alder Lake, Jasper Lake, Sapphire Rapids, and others\nphoromatic: Ensure Windows tests get displayed even if running the Phoromatic Server on Linux\nflush_caches: Add module to flush system caches between runs\ntest_timeout: Add module to quit a test run if it exceeds a predefined time limit or 'auto' determination\n\nPhoronix Test Suite 10.0.0 Milestone 3\n1 October 2020\n\npts-core: Don't show Vulkan options if Vulkan support is known to be unavailable/broken\npts-core: Add OptionSelect tag support within test suite definitions\npts-core: Allow * wildcard match in FileCheck handling within external dependency XML\npts-core: Add \"OS\" TestType\npts-core: Various external dependency updates\npts-core: Continued tweaking to the analytics engine\nphodevi: Add Neoverse N2, Cortex-X1 detection and other Arm CPU updates\npts_Graph: Various improvements\n\nPhoronix Test Suite 10.0.0 Milestone 2\n12 September 2020\n\npts-core: Honor NO_COLOR environment variable for disabling terminal coloring\npts-core: Allow launching just the result viewer from systemd (phoronix-result-server.service)\npts-core: Result viewer UI tweaks\npts-core: Minor fixes\npts-core: Add RequiresRootInstall test profile option\npts-core: Result file text output tweaks\npts-core: More robust test result parsing in certain time formats\n\nPhoronix Test Suite 10.0.0 Milestone 1\n19 August 2020\n\npts-core: Add keep-results-in-result-file sub-command\npts-core: Split the dynamic result viewer into its own embed class for result file handling to allow for easy re-use by OpenBenchmarking, Phoromatic, etc\npts-core: Various changes for supporting the new OpenBenchmarking.org infrastructure\npts_Graph: Add histogram type\nphodevi: CPU core name / family detection to friendly strings (OpenBenchmarking.org driven)\nphodevi: Report core name via system-info command\nphodevi: Various storage HDD/SSD detection reporting improvements\nphodevi: Ampere Altra detection\nphodevi: macOS/Apple hardware detection improvements\n\nPhoronix Test Suite 9.8.0\n9 July 2020\n\npts-core: Handling of cases where all options are unsupported (such as CUDA and OpenCL tests with no valid backends found) to avoid prompts\npts-core: Be more liberal in allowing CUDA/OpenCL GPU compute tests to run fine without display server active\npts-core: Fix for not filling test suites of contained tests in some select cases (sub-suites listing in results viewer)\npts-core: Allow creating new virtual test suites that are not prefixed by a OB repository\nphodevi: NVIDIA GPU detection within WSL2\ndocker: Rewritten phoronix/pts Docker implementation based on Ubuntu 20.04 LTS\n\nPhoronix Test Suite 9.8.0 Milestone 2\n24 June 2020\n\npts-core: Add client side plumbing for estimated test install time from OpenBenchmarking.org\npts-core: Add estimate-install-time sub-command, show estimated install time when installing a test\npts-core: Improve web browser selection logic for result viewer\npts-core: Add search field to the result viewer areas for limiting based on title/argument matching\npts-core: Various minor fixes\npts-core: Don't show OpenCL test options if no OpenCL drivers/adapters appear present\nphodevi: Fix for incorrect monitor count when parsing X.Org log\nphodevi: Warning fixes for latest WSL\n\nPhoronix Test Suite 9.8.0 Milestone 1\n3 June 2020\n\npts-core: When an install fails, try a newer minor version update to that test profile if available (fixes broken download mirrors, etc)\npts-core: When a newer minor version of a test profile is installed and a requested (older) one is not, use the newer compatible version\npts-core: Rewrite virtual test suite implementation\npts-core: Add handler for ensuring reported system time is accurate, otherwise calculate current date/time using offsets\npts-core: When scanning test suites on disk, ensure the latest test suite version is used\npts-core: Add test-to-suite-map sub-command\npts-core: Fix for loading the result viewer JavaScript / CSS when running on a Windows host\npts-core: For tests requiring root but not run initially as root and using monitoring data, drop the first run to ensure sudo promot doesn't skew time\npts-core: Fix PHP8 error in the 'info' sub-command\npts-core: Other PHP deprecation code tweaks\nphodevi: Add amd_energy Linux driver support\n\nPhoronix Test Suite 9.6.1\n25 May 2020\n\npts-core: Show unit/scale in CSV export\npts-core: When limiting results to show in result viewer, keep child objects that match the desired type for the parent\npts-core: Add rebuild-test-suite option for regenerating suite XML all cleaned up\npts-core: Allow exporting result files to XML test suites via the result viewer\nlinux_perf: Reporting many more events\npts-core: External dependency updates\npts_Graph: graph code tweaks\nphodevi: Avoid macOS reporting X-Core string before Intel CPU string\nphodevi: Sway compositor version detection\nphodevi: Detection of newer Arm CPU cores\n\nPhoronix Test Suite 9.6.0\n21 April 2020\n\npts-core: Allow building virtual suites off external dependencies\npts-core: Various result viewer improvements\npts-core: Allow saving results under stress-run\npts-core: Responsive/mobile result viewer improvements\npts-core: Show local tests within the build-suite sub-command\npts-core: Show local suites within the list-installed-suites sub-command\npts_Graph: Restore capability for drawing mini graphs for all results in a result file overview\n\nPhoronix Test Suite 9.6.0 Milestone 3\n12 April 2020\n\npts-core: Allow automated per-thread/core/clock/RAM graphs within the result viewer\npts-core: Result viewer add \"Limit displaying results to tests within:\"\npts-core: From the result viewer allow \"Show Geometric Means Per-Suite/Category\"\npts-core: Add workload-topology sub-command\npts-core: Allow adding deprecated tests to build-suite\npts-core: CSV export improvements\npts-core: Add \"Do Not Show Results With Incomplete Data\" to the result viewer\npts-core: Allow test suite \"Status\" tag\npts-core: Don't report OB updates on deprecated tests or suites\n\nPhoronix Test Suite 9.6.0 Milestone 2\n5 April 2020\n\npts-core: Documentation updates\npts-core: External dependency updates\npts-core: Allow listing test profiles within the result viewer\npts-core: Allow listing test suites and test suite data within the result viewer\npts-core: Allow showing test profile information within the result viewer\npts-core: Various other updates to the result viewer\npts-core: Add vaapi as possible external dependency\nupdate_checker: Add message of the day support\n\nPhoronix Test Suite 9.6.0 Milestone 1\n24 March 2020\n\npts-core: Add new analyze-run-times sub-command\npts-core: Allow hiding results from within the result viewer\npts-core: Allow generating performance-per-dollar metrics from within the result file\npts-core: Allow showing system logs from the result viewer\npts-core: Allow showing test description within the result viewer\npts-core: Fixes for running the result viewer from a website sub directory in correctly loading assets\npts-core: Add result viewer option \"hide noisy results\"\npts-core: Add result viewer option \"hide results with little change/spread\"\npts-core: Add result viewer option \"only show results where X faster than Y\"\npts-core: Add XML export to result viewer export menu\npts-core: Support deleting runs from the result viewer\npts-core: Improve the print view from the result viewer\nphodevi: BSD tweaks/fixes\n\nPhoronix Test Suite 9.4.1\n4 March 2020\n\nVarious minor bug fixes and OpenBenchmarking.org cache update\n\nPhoronix Test Suite 9.4.0-Vestby\n25 February 2020\n\npts-core: Add option in the result viewer to allow compacting multi-option test results into single graphs\npts-core: Add option in the result viewer to allow compacting multi-version test results into single graphs\npts-core: Add Parent tag to result file schema for specifying relation to other result objects\npts-core: Report test profile support errors when intended\npts-core: Fix showing NVIDIA test options on non-Linux NVIDIA platforms\npts-core: Don't show delete/annotation options for dynamically generated result objects where those options are not relevant\npts-core: Allow showing performance-per-suite option within result viewer\npts_Graph: When going to PDF with GD library, just use the OB rather than temporary file\npts_Graph: Restore support for error bars on vertical bar graph rendering\npts_Graph: Support for simpler view / rendering without header/footer\n\nPhoronix Test Suite 9.4.0 Milestone 3\n18 February 2020\n\npts-core: Add PDF bookmarks to result graphs on PDF result file generation\npts-core: Add automated executive summary of result files via executive-summary sub-command and PDF result export\npts-core: Add remove-result-from-result-file sub-command (slightly different from remove-results-from-result-file)\npts-core: Set SaveTestLogs = TRUE by default\npts-core: Set SaveInstallationLogs = TRUE by default\npts-core: Refactor test-logs (SaveTestLogs) handling\npts-core: Refactor test installation logs handling\npts-core: More verbose reporting of system/external dependency solving status\npts-core: Get the modern result viewer working on Windows\npts-core: Support for showing test logs from the result viewer\npts-core: Support for showing install logs from the result viewer\npts-core: PDF output improvements\npts-core: Fix for some suites not showing up on list-suites sub-command\npts-core: Report \"Test Suites Containing This Test\" in the info sub-command on tests\npts-core: On PDF export allow showing geometric means of tests based on their test suite connections\npts-core: Add intersect sub-command for showing tests common between multiple results/suites\n\nPhoronix Test Suite 9.4.0 Milestone 2\n5 February 2020\n\npts-core: Add config options allowing to modify or delete result files from the result viewer\npts-core: Allow deleting results from the result viewer\npts-core: Allow editing result file information from result viewer\npts-core: Allow deleting results (graphs) from result file in result viewer\npts-core: Add ability to annotate (comment) on result graphs within the result viewer\npts-core: Support converting graphs to PNG/PDF with Inkscape or svg-convert when PHP GD is not installed/enabled\npts-core: Add Persistent Memory disk targets for disk test\n\nPhoronix Test Suite 9.4.0 Milestone 1\n13 January 2020\n\npts-core: Allow test profile test options to expose more helper information strings\npts-core: External dependency updates\npts-core: When a test fails to install due to linker error, try to run that missing library through the external dependency handler to hint at the name\npts-core: When a test fails to install due missing header file, try to run that missing library through the external dependency handler to hint at the name\npts_Graph: Pass/fail graph formatting improvements\nphodevi: Convert large RAM capacity basic strings into GB rather than large MB\nphodevi: Add support for Linux 5.6+ drivetemp kernel module for ATA drive temperatures\n\nPhoronix Test Suite 9.2.1\n11 December 2019\n\npts-core: Fix for Debian packaging generator\npts-core: FIx for install script that could lead to Phoromatic Server instance not fully launching\n\nPhoronix Test Suite 9.2.0-Hurdal\n3 December 2019\n\npts-core: Fix for sensor-driven result outputs (e.g. power)\npts-core: Clean up precision handling on graphs\npts-core: Add run-subset sub-command\npts-core: Add Clear Linux external dependencies handling for when not relying upon the Clear bundles that include all known dependencies\nphodevi: More robust ACPI power_meter handling\nphodevi: Support reading the NVMe drive temperature via HWMON on Linux 5.5+\nphoromatic: Use the new shared result viewer settings handling in common with the dynamic result viewer\n\nPhoronix Test Suite 9.2.0 Milestone 2\n13 November 2019\n\npts-core: Drop auto-compare sub-command since currently buggy / too server resource intensive\npts-core: Add FORCE_MIN_DURATION_PER_TEST\npts-core: Don't sort geometric mean results when the only difference between result identifiers is numeric in nature\npts-core: Allow preserving the precision of the original workload under test if not overriden by test profile\npts-core: Record and report CPU microcode version in benchmark result file\nsystem_monitor: Allow multiple PERFORMANCE_PER_SENSOR= to be delimited by comma\n\nPhoronix Test Suite 9.2.0 Milestone 1\n17 October 2019\n\npts-core: New possible external dependencies for gflags, clang, uuid, tclsh\npts-core: External dependencies updates for Windows\npts-core: Crash fix for macOS in regression from PTS 9.0.1 launcher change\n\nPhoronix Test Suite 9.0.1-Asker\n1 October 2019\n\npts-core: Fatal error fix for old PHP5 versions (RHEL 7) with pts_openbenchmarking_upload crash\npts-core: Set AllowResultUploadsToOpenBenchmarking = FALSE in enterprise-setup\nob_auto_compare: Show \"since [date]\" as part of the inline box plot\nob_auto_compare: Various tweaks/styling improvements to the inline box-plot display\nphodevi: New cpu.peak-freq sensor for reporting just the highest CPU core frequency at that moment\n\nPhoronix Test Suite 9.0.0-Asker\n16 September 2019\n\npts-core: Add stress-batch-run sub-command for behavior like stress-run but no prompts for test options\npts-core: Allow plotting all individual run results as a line graph\npts-core: Allow showing pie charts of wins/losses of tests\npts-core: Add support for showing \"new + updated tests\" via the invalid command helper\npts-core: Allow accessing the new result viewer via localhost too rather than just 127.0.0.1\npts_Graph: Restore pie chart support from PTS 6.0 state when dropped\n\nPhoronix Test Suite 9.0.0 Milestone 3\n3 September 2019\n\npts-core: Add AllowResultUploadsToOpenBenchmarking user config option\npts-core: Split OpenBenchmarking.org upload code into pts_openbenchmarking_upload file and allow it to be removed if wanting to strip out upload support\npts-core: Add \"ob-cache\" local cache of tests/suites to help offline use-cases\npts-core: Add hdf5 to the external dependency list\npts-core: Add libxml2 to the external dependency list\n\nPhoronix Test Suite 9.0.0 Milestone 2\n22 August 2019\n\npts-core: New result viewer improvements\npts-core: Various fixes and code cleanups\nphodevi: Add support for cpu.power sensor reading from Linux zenpower driver\n\nPhoronix Test Suite 9.0.0 Milestone 1\n25 July 2019\n\npts-core: Add 'expat' as possible external dependency\npts-core: Various PDF report improvements\npts-core: User-config syntax change LoadModules -> AutoLoadModules\npts-core: Also dynamically increase run count if any results outside 3-sigma limit\npts-core: Add compare-results-two-way sub-command\npts-core: Improve MultiMatch in test result parser\npts-core: Add IGNORE_RUNS environment variable\npts-core: Add result-file-confidence sub-command\npts_Graph: Add side-by-side 2-way comparison graph\npts_Graph: Fix for displaying line graphs with very small values\nphodevi: Support reading sys.power via IPMI PS1_Input_Power/PS2_Input_Power\nphodevi: More robust Arm CPU model detection improvements\nphodevi: Much faster CPU usage reading on large core count systems\n\nPhoronix Test Suite 8.8.1-Hvaler\n30 May 2019\n\npts-core: Various minor tweaks/fixes\nphodevi: Fix Linux CPU thread detection in some scenarios where inner-cores may be offlined\nphodevi: More robust CPU vulnerability reporting\nphodevi: Add initial reporting for Windows vulnerabilities via mdstool-cli\n\nPhoronix Test Suite 8.8.0-Hvaler\n13 May 2019\n\npts-core: Report on the POWER SMT setting in notes\npts-core: Add new/updated suite reporting\npts-core: In build-suite allow not binding test profile versions\npts-core: For list-suites, only show suites that have been updated within the past four years\npts_Graph: Report N on horizontal bar graphs\nphodevi: Intel Node Manager power_meter support for sys.power sensor\n\nPhoronix Test Suite 8.8.0 Milestone 3\n9 May 2019\n\npts-core: Add experimental dynamic-result-viewer\npts-core: Allow marking of test profile download files as optional\npts-core: Add \"everything\" virtual suite\npts-core: Set MESA_VK_WSI_PRESENT_MODE=immediate by default to work around possible 60 FPS RADV bug\npts-core: Rename remove-from-result-file to remove-run-from-result-file\npts-core: Add remove-results-from-result-file sub-command\nphodevi: Detect AVX-512 VNNI\nphodevi: Fix OpenJDK Java version detection\nphodevi: Expand memory temperature sensor to work for some ARM SBCs\nphodevi: Multi-monitor detection improvements\nphodevi: Add support for gpu.memory-usage sensor with new AMDGPU mem_busy_percent sysfs interface\nsystem_monitor: Add PERFORMANCE_PER_SENSOR= support for performance-per-(arbitrary sensor) rather than just supporting perf-per-Watt\nob_auto_compare: Show other results in result file on box plot\n\nPhoronix Test Suite 8.8.0 Milestone 2\n27 March 2019\n\npts-core: On new installs set 3.00% as deviation for increasing dynamic run count rather than 3.50%\npts-core: Add FORCE_MIN_TIMES_TO_RUN_CUTOFF= environment variable to toggle cutoff for FORCE_MIN_TIMES_TO_RUN behavior\npts-core: Add FORCE_TIMES_TO_RUN_MULTIPLE\npts-core: Add strict-benchmark option for enabling various options to ensure stricter behavior about the number of times to run each benchmark\npts-core: Add cpu-physical-threads / cpu-threads / auto-executable auto test run options\nphodevi: CPU-therm reporting via sysfs for CPU core temp\nphodevi: GPU-therm reporting via sysfs for GPU core temp\n\nPhoronix Test Suite 8.8.0 Milestone 1\n16 March 2019\n\npts-core: Allow FORCE_TIMES_TO_RUN to override debug-run/debug-benchmark single run behavior\npts-core: Various fallbacks/workarounds for those wanting to (unofficially) use PTS on Windows 8.1\npts-core: Other small tweaks and optimizations\npts-core: Fixes an odd scenario where on Windows after 2 runs, further runs of that test profile for current run could fail in select (random) instances\npts-core: Write out system notes for each system when generating PDF result output\npts-core: CSV output improvements\npts-core: Add result-file-raw-to-csv for dumping the raw/individual benchmark result run data\npts_Graph: Condensing improvements for large graphs\npts_Graph: Various formatting improvements\nphodevi: Intel GPU reporting improvements\nphodevi: BIOS version reporting support extended to Windows\nphodevi: ipmitool DMCI power sensor reporting for at least some POWER servers\n\nPhoronix Test Suite 8.6.1-Spydeberg\n21 February 2019\n\npts-core: Dynamically honoring the CLI terminal width (no longer cache the value on Linux/BSD/macOS)\npts-core: BSD external dependency updates\nob_auto_compare: Minor formatting updates\n\nPhoronix Test Suite 8.6.0-Spydeberg\n5 February 2019\n\npts-core: Other small tweaks and fixes\npts-core: Fix for \"/installed\" virtual suite not including the proprietary/commercial tests that are installed\nob_auto_compare: Allow showing more results in the embedded percentile graphs\n\nPhoronix Test Suite 8.6.0 Milestone 3\n27 January 2019\n\npts-core: Better handling on Windows when there are space(s) in the paths\npts-core: Add __event_post_run_stats module hook\npts-core: Inline display of result distributions from OpenBenchmarking.org on applicable results\npts-core: Don't try to run tests from result file(s) or suite(s) that were not installed\npts-core: More accurate time reporting when result files are passed to `phoronix-test-suite estimate-run-time`\nphodevi: Better reporting of NVMe drive strings on BSDs\n\nPhoronix Test Suite 8.6.0 Milestone 2\n19 January 2019\n\npts-core: Update Mac OS X to macOS references\npts-core: Add result-file-stats sub-command to show more test result statistics\npts-core: Show geometric mean and harmonic mean data at end of benchmarking process when relevant as part of post-run stats\npts-core: Improved formatting of file download text user interface for downloading of dependencies on Microsoft Windows\npts-core: Fix Loop 'Test i of n' Reporting\npts-core: A few warning fixes for PHP 7.3+\npts-core: External dependency handling support for OpenMandriva Lx 4.0 (transitioned from urpmi to DNF)\nphodevi: Report Windows Subsystem for Linux (WSL) to the system layer string\n\nPhoronix Test Suite 8.6.0 Milestone 1\n7 January 2019\n\npts-core: No longer clear test profile identifiers on secondary saved results\npts-core: Add compare-results-to-baseline sub-command for comparing one result file (baseline) against a set of results for text look at relative perf\npts-core: Minor fixes\npts-core: Show wins and losses summary after testing on large result files\npts-core: On two-way result files, after test completion show comparison of current result against previous result (baseline)\npts-core: Add ShowPostRunStatistics user configuration XML option to toggle whether various test statistics are printed at the end of testing\npts-core: Add recently-added-tests sub-command to show newly added test profiles / alternative to openbenchmarking-changes/recently-updated-tests\npts-core: Allow outputting line graphs to terminal interface as basic box plot graphs\nphodevi: Improve Linux multiple network device reporting\nphodevi: LXQt desktop version reporting\nphodevi: Update for Microsoft Windows Server 2019\nsystem_monitor: Allow outputting system monitor graphs to terminal interface inline\n\nPhoronix Test Suite 8.4.1-Skiptvet\n9 December 2018\n\npts-core: Workaround for RHEL 7.6 PHP having buggy CURL that is causing seg faults\npts-core: Ensure \".\" doesn't get set in PATH when launching phoronix-test-suite\npts-core: Allow PRESET_OPTIONS env var to be used when in batch mode\npts-core: FreeBSD updates\npts-core: Add PRESET_OPTIONS_VALUES environment variable that is similar to PRESET_OPTIONS but for explicit values\nphodevi: Improved Radeon AMDGPU frequency detection/reporting\nphodevi: Add support for reading GPU usage sensor with AMDGPU gpu_busy_percent sysfs interface\nphodevi: Updated gpu_voltage sensor for AMDGPU driver\nphodevi: Updated gpu_power sensor for AMDGPU driver\nphodevi: Updated gpu_fanspeed sensor for AMDGPU driver\nphodevi: Updated gpu_freq sensor for AMDGPU driver\nphodevi: Improved physical CPU core detection on DragonFlyBSD 5.4\nphodevi: Improved Spectre detection on DragonFlyBSD 5.4\nphodevi: Allow using NUM_CPU_CORES to override the number of exposed CPU threads/cores to tests (alternative to PTS_NPROC / NUMBER_OF_PROCESSORS)\nphodevi: Improved multi-disk reporting for non-Linux operating systems\nphodevi: Minor GPU string reporting improvement\n\nPhoronix Test Suite 8.4.0-Skiptvet\n26 November 2018\n\nphodevi: Various minor tweaks\n\nPhoronix Test Suite 8.4.0 Milestone 3\n20 November 2018\n\npts-core: Various external dependency updates\npts-core: Expose NUM_CPU_PHYSICAL_CORES to test profiles as alternative to NUM_CPU_CORES (logical count)\npts-core: Fix possible situation of openbenchmarking-refresh not updating when IndexCacheTTL is set to 0\npts-core: Allow branded colors to work in the terminal/CLI text graphs\npts-core: Continued POWER9 support improvements\npts-core: Add RemoveInstallDirectoryOnReinstall to toggle test re-installation behavior\npts_Graph: Fix for sometimes tick marker text overlapping\nphodevi: Improved physical CPU core detection for architectures like POWER\nphodevi: Improved CPU cache size detection\n\nPhoronix Test Suite 8.4.0 Milestone 2\n5 November 2018\n\npts-core: Allow passing PTS environment variables as arguments to PTS and then just have PTS set them in the environment\npts-core: Add dry-run test option\npts-core: Various result parser additions to help parsing of CSV frame-time data for more test profiles (games)\nphodevi: Vulkan driver reporting fix\n\nPhoronix Test Suite 8.4.0 Milestone 1\n8 October 2018\n\nphodevi: Report vRAM size on GPU model string in GB when over 1GB\npts-core: At run-time also report if test is deprecated/broken\npts-core: Add \"node-npm\" as an external dependency for Node.js + NPM\nphodevi: Drop information reporting support for the long ago Catalyst/fglrx driver stack that hasn't been supported/maintained in many years\n\nPhoronix Test Suite 8.2.0-Rakkestad\n11 September 2018\n\npts-core: Add RequiresDisplay test profile property to indicate if the test profile explicitly requires a monitor / display server to work\npts-core: Add RequiresNetwork test profile property to indicate if the test profile needs a working network connection\npts-core: Add RequiresInternet test profile property to indicate if the test profile needs a working Internet connection\npts-core: Don't install tests where the current run-time checks will fail\nphodevi: Improve CPU thread count detection when running under LXC\nphodevi: More robust DMI decode ignore value handling\nphodevi: Add extra fallback detection for LXC in system-layer\n\nPhoronix Test Suite 8.2.0 Milestone 4\n7 September 2018\n\npts-core: Fix behavior of \"Would you like to stop and install these tests now\"\npts-core: Add reinstall / re-install aliases to force-install\nob_auto_compare: Default first to trying to do an automated local result comparison\nphodevi: Amlogic SoC detection based on meson_cpufreq driver\nphodevi: Rockchip SoC fallback detection\nphodevi: Embedded ARM Cortex / ARM part model detection\nphodevi: Expanded sensor coverage using Intel RAPL\n\nPhoronix Test Suite 8.2.0 Milestone 3\n22 August 2018\n\npts-core: Minor updates to logic for determining how many times to dynamically increase run count on high variance results\npts-core: Show deprecated tests too when running list-all-tests\npts-core: Add DropNoisyResults option if wishing to not save results that have too high of deviation between runs\npts-core: Add PTS_DOWNLOAD_CACHE_OVERRIDE environment variable option on make-download-cache\npts-core: Add PTS_USER_PATH_OVERRIDE environment variable to override PTS_USER_PATH on initialization\npts-core: Add PTS_DOWNLOAD_CACHING_PLATFORM_LIMIT environment variable for make-download-cache\npts-core: Add list-cached-tests option\n\nPhoronix Test Suite 8.2.0 Milestone 2\n15 August 2018\n\npts-core: Add DivideResultDivisor to result parser\npts-core: Add libevent as possible external dependency\npts-core: Alert the user when the test install directory is on a file-system mounted with 'noexec'\npts-core: Optional support with PHP 7.3+ to also obtain network info using net_get_interfaces()\npts-core: Fix possible alignment issue with value/spacer on outputting text-based result graphs\npts-core: When Internet is not available and running list-tests, only show tests that are available via caches unless `list-all-tests` is run\npts-core: Rework `list-recommended-tests` to make use of download count information exposed via OB index repository data rather than needing to make fresh web query\npts-core: Show \"popular tests\" in the invalid command helper\npts-core: Allow stress-run to be triggered from interactive mode\npts-core: Allow comparing dynamic in-line result comparisons against local results when no Internet results matching or Internet not available\nphodevi: Reporting of L1TF / Level 1 Terminal Fault vulnerability\npts_Graph: Tweaks to text sizing on vertical bar graphs\n\nPhoronix Test Suite 8.2.0 Milestone 1\n21 July 2018\n\npts-core: Add readline-based autocompletion support for text-based menu selection lists\npts-core: Add readline-based autocompletion support for the result file save name for trying to match existing result file identifiers\npts-core: Add autocompletion support for result file identifier based on installed software/hardware\npts-core: Various Alpine Linux external dependency updates\npts-core: Various improvements to the Shell sub-command functionality, including auto-completion support\nphoromatic: From rootadmin allow the rootadmin to override/reset a user account password\nphodevi: Windows battery reporting discharge rate support\nphodevi: Improved multi CPU socket reporting on Windows\nphodevi: Various hardware/software detection improvements when running within Docker/containers\npgo: New module to provide for automated compiler PGO (Profile Guided Optimizations) testing on GCC/Clang\n\nPhoronix Test Suite 8.0.1-Aremark\n26 June 2018\n\npts-core: Add \"wine\" external dependency support\npts-core: Fix skip-test behavior\npts-core: Web browser handling improvements on Windows, other Windows updates\nphoromatic: Various minor fixes and enhancements\nphodevi: Add USE_WINE environment variable check, point it towards the wine binary you wish to test\n\nPhoronix Test Suite 8.0.0-Aremark\n5 June 2018\n\npts-core: Various macOS support tweaks/improvements\npts-core: Add external dependency support for Brew macOS package manager\npts-core: Avoid duplicate test identifiers on graphs\nphodevi: Improved X.Org Server version detection\n\nPhoronix Test Suite 8.0.0 Milestone 5\n30 May 2018\n\npts-core: Termux external dependency support\npts-core: Other minor tweaks and changes\nphoromatic: Better handling when the Phoromatic Server is run without an Internet connection or Internet disabled\nphoromatic: A wide variety of other Phoromatic Server optimizations and improvements\nphodevi: Add spec_store_bypass / Spectre Variant 4 reporting\n\nPhoronix Test Suite 8.0.0 Milestone 4\n16 May 2018\n\nphoromatic: Add a \"email all users\" option to the rootadmin page\nphoromatic: Improve search functionality on results page, allow boolean expressions, date ranges, many other search features\nphoromatic: Various search improvements to `phoronix-test-suite search`\nphoromatic: Allow new test profiles to be created from Phoromatic web UI\npts-core: New create-test-profile sub-command for guided process to test profile creation\npts-core: Basic changes, should be all that's needed for EU GDPR safeguards\nphodevi: RISC-V SiFive CPU detection\n\nPhoronix Test Suite 8.0.0 Milestone 3\n16 April 2018\n\npts-core: Improvements for BSD / FreeBSD support\npts-core: Add \"V8\" external dependency for V8 JavaScript engine\npts-core: Add initial AdvertiseServiceOpenBenchmarkRelay support\npts-core: Add new inspect-test-profile sub-command\npts-core: Add ColoredConsole option in user configuration file of AUTO / TRUE / FALSE to control colored text behavior\npts-core: Report each test's run-time to test-rin-times in result file XML\npts-core: More XSD / OpenBenchmarking.org schema handling work for future functionality\nphoromatic: Ensure environment variables set via Phoromatic web interface get passed to tests\nphodevi: BSD improvements\nbackup: A module providing initial backup/restore functionality for PTS/Phoromatic\n\nPhoronix Test Suite 8.0.0 Milestone 2\n24 March 2018\n\npts-core: Add DeleteOutputBefore and DeleteOutputAfter options to the result parser\npts-core: Fix for run-random-tests sub-command\npts-core: Native XML result parsing support via FileFormat = XML in the result parser for test profiles\npts-core: Add openbenchmarking-uploads sub-command for reporting recent result uploads from the local IP\nphodevi: reboot/shutdown support on Windows\n\nPhoronix Test Suite 8.0.0 Milestone 1\n8 March 2018\n\npts-core: Rewritten Windows support\npts-core: Add ~/install-message support where if a test profile installer writes there, that message will in turn be shown to the user on test install\npts-core: Support for using Cygwin's bash interpreter on Windows systems for better test profile parsing support\npts-core: When running on Windows, add new \"windows/\" OpenBenchmarking.org test repository\npts-core: Introduce basic phoronix-test-suite shell for easier PTS experience\npts-core: Allow XInclude support for test suites\nperf_per_dollar: Allow calculating cloud costs / perf-per via COST_PERF_PER_HOUR= environment variable\nphodevi: Cavium ThunderX detection\n\nPhoronix Test Suite 7.8.0-Folldal\n14 February 2018\n\npts-core: Various minor fixes\npts_Graph: Fix vertical bar graphs on many bars to be rendered\n\nPhoronix Test Suite 7.8.0 Milestone 3\n5 February 2018\n\npts-core: Fix crash in stress-run when PHP PCNTL is missing\npts-core: When installing a test that is marked deprecated/experimental/broken, ensure to convey that to the user\npts-core: When installing a test that is of license retail/restricted, ensure to convey that to the user\npts-core: Don't show tests in `list-available-tests` / `list-tests` that are not verified\npts-core: Improvements to `info` sub-command for test profiles in highlighting tests that may have problems and also show pre/post messages\npts_Graph: Fix when manually forcing line graphs sometimes still yielding bar graphs\nphodevi: spectre_v1 and spectre_v2 protection reporting\nphodevi: LXQt desktop detection\nphodevi: Don't cache the compiler in case external dependencies install a new compiler, etc\n\nPhoronix Test Suite 7.8.0 Milestone 2\n14 January 2018\n\npts-core: Allow local/other tests not part of OpenBenchmarking.org to be downloaded from a Phoromatic Server\npts-core: Fixes for make-download-cache sometimes not caching tests/suites\npts-core: Drop the pts_test_notes_manager since pts_test_run_manager already had better capabilities built-in\npts-core: Add dump-phodevi-properties helper to assist in debugging and porting to new platforms\npts-core: Interactive mode improvements\npts-core: The `phoronix-test-suite gui` has been unmaintained and can be considered deprecated\npts-core: Add `phoronix-test-suite search` for conducting basic searches from the CLI\npts-core: When running `phoronix-test-suite info <test profile>`, show the OpenBenchmarking.org change-log for that test profile too\npts-core: When running `phoronix-test-suite info <test profile>`, show local test results containing this test\nphodevi: Append BIOS version to end of motherboard string\nphodevi: Strip invalid chars from BIOS version parsing\nphodevi: Reworked property handling\nphodevi: KDE Plasma 5 detection improvements\npts_Graph: Add allow_box_plots graph configuration tunable\npts_Graph: Restore support for allowing vertical bar graphs, can be enabled by editing graph-config.json with bar_graphs_horizontal = false\n\nPhoronix Test Suite 7.8.0 Milestone 1\n8 January 2018\n\npts-core: Add meson to external dependencies\npts-core: Other external dependency updates\npts-core: Various minor improvements when running on Docker/containerized\npts-core: Phoroscript interpreter improvements for Windows\npts-core: Allow PTS_WEBSOCKET_PORT environment variable to be used to override WebSocket port when launching Phoromatic Server\nphodevi: Add some missing handling around /dev/vd* disks\nphodevi: Add BIOS version reporting property\n\nPhoronix Test Suite 7.6.0-Alvdal\n7 December 2017\n\npts-core: Just minor changes\n\nPhoronix Test Suite 7.6.0 Milestone 4\n3 December 2017\n\npts-core: Gentoo external dependency handling updates\npts-core: Better external dependency handling when running on EC2 instances\nphodevi: Add new gpu.memory-usage sensor initially supported on NVIDIA\n\nPhoronix Test Suite 7.6.0 Milestone 3\n21 November 2017\n\npts-core: Provide some basic graph size/count reporting on refresh-graphs sub-command\npts-core: make script shebang more portable\npts-core: Various styling updates\npts-core: More demanding debug-self-test\npts-core: Update Fedora's Python packages\npts_Graph: Turn line graphs to horizontal box plots if too much data to graph in space\nphodevi: physical CPU core detection count on macOS\nphodevi: GPU power consumption sensor support via nvidia-smi\nphodevi: NVMe drive temperature reporting on Linux\nphodevi: Better memory model detection on Linux\n\nPhoronix Test Suite 7.6.0 Milestone 2\n2 November 2017\n\npts-core: Add LEDE external dependency handling support\npts-core: Drop ports-based external dependency handling for FreeBSD and instead encourage pkg\npts-core: Network MAC address detection on OpenBSD\nphoronix-test-suite: Check for php-cli as binary option\nphodevi: Motherboard detection support on BSD using smbios.planar.product\nphodevi: hw.cpu_topology_core_ids support for physical core count on BSD\nphodevi: Allow BSD GPU detection via pciconf data\nphodevi: BSD chipset detection\nphodevi: VT EFIFB resolution detection\n\nPhoronix Test Suite 7.6.0 Milestone 1\n10 October 2017\n\npts-core: Add external dependency handling for MidnightBSD / mport\npts-core: Improved handling of IP/MAC detection to try to figure out the default interface\npts-core: Wake-On-LAN handling detection improvements\nphoromatic: Try using systemctl poweroff first when trying to turn off a system\nphodevi: Add memory.temp sensor\nphodevi: Fixed k10temp CPU temperature reporting\nphodevi: Add IPMI ambient temperature support\nphodevi: Some CPU/GPU temperature reporting improvements\nphodevi: Ignore reporting 'MS-DOS FAT32' EFI file-system on macOS\nphodevi: Add Bcache reporting support\nphodevi: Add APFS Apple File-System detection on macOS\nphodevi: Tweaks for macOS High Sierra\nphodevi: Restructure CPU core/thread reporting in system tables\nperf_per_dollar: Add \"phoronix-test-suite perf_per_dollar.add <result file>\" to allow perf-per-dollar graphs to be added after the fact\n\nPhoronix Test Suite 7.4.0-Tynset\n19 September 2017\n\npts-core: Improve command documentation categories/organization\npts-core: Fix install time reporting from the info sub-command when passing a test profile\npts-core: Add network-info sub-command\npts-core: Java external dependency updates\npts-core: Add maven external dependency\nphodevi: NVMe disk reporting on BSDs\npts_Graph: Allow line graphs to have adjustable floor/bottom to better present data on graph\n\nPhoronix Test Suite 7.4.0 Milestone 4\n11 September 2017\n\npts-core: Report on updated OpenBenchmarking.org index update when new/updated tests are introduced\npts-core: Add TEST_EXEC_PREPEND support\npts-core: Ensure XAUTHORITY gets passed if relevant to test execution\npts-core: Fixed dynamic dependency handling on Ubuntu 17.10 / apt-file with newer versions\npts-core: Fix warning about passing variables by ref to PTS modules\npts-core: Add nasm external dependency entries\npts-core: Ensure duplicate dependencies to install don't become present\nphodevi: Add basic Budgie desktop reporting\nphodevi: IPMI fan speed reporting\nphodevi: EPYC detection\ntoggle_screensaver: improved GNOME screensaver handling\ntoggle_screensaver: work better under Wayland / non-X environments where display server might not be detected\n\nPhoronix Test Suite 7.4.0 Milestone 3\n28 August 2017\n\npts-core: Reworked test exit status handling\nob_auto_compare: New module for seamless OpenBenchmarking.org result references\ngraphics_event_checker: Drop graphics_event_checker module as really provides no real benefit these days\nphodevi: Improve CPU physical core count detection for multi-socket systems\n\nPhoronix Test Suite 7.4.0 Milestone 2\n15 August 2017\n\npts-core: Resolve possibility of first graph missing when exporting results as PDF\nphodevi: WSLFS (Windows Subsystem for Linux) file-system detection\nphodevi: Add monitor detection based on parsing EDID supplied by `xrandr --prop` (works well for newer NVIDIA setups)\nphodevi: Initial \"system type\" support\n\nPhoronix Test Suite 7.4.0 Milestone 1\n31 July 2017\n\npts-core: Don't show PTS version when there is no sub-title, just leave it empty\npts-core: Add phoronix-test-suite unload-module sub-command\npts-core: Add phoronix-test-suite auto-load-module sub-command\npts-core: Drop juju scripts as appears unmaintained, happy to re-add if maintained\npts-core: Allow showing existing results from a result file in-progress on test runs\npts_Graph: Color tweaking\nphodevi: Clear up extra potential fluff in the GPU model string\nperf_tips: New module to indicate various performance tips to users\n\nPhoronix Test Suite 7.2.1-Trysil\n30 June 2017\n\npts-core: Don't pass arguments in quotes to pre/interim/post test scripts\npts-core: Minor optimization to is_test_profile() and more easily allow explicit paths to be used, overriding what's in OB cache\npts-core: Minor optimization to is_suite() and more easily allow explicit paths to be used, overriding what's in OB cache\npts-core: Fix warning in pts_test_result_parser\nphodevi: AVX-512 reporting\n\nPhoronix Test Suite 7.2.0-Trysil\n8 June 2017\n\npts-core: Add TurnCharsToSpace support to result parser\npts_Graph: Fix multi-way comparison detection\n\nPhoronix Test Suite 7.2.0 Milestone 4\n3 June 2017\n\npts-core: If a OB upload fails with system logs, try again without system logs\npts-core: Add basic dump-tests-to-git sub-command\npts-core: Add basic dump-suites-to-git sub-command\npts-core: Result parser fixes/improvements\npts-core: Additional safety checks around loading test result arguments from a result file\npts-core: Add \"vulkan-development\" external dependency\npts_Graph: Few tweaks/clean-ups\npts_Graph: Allow optionally specifying custom colors via the GRAPH_HIGHLIGHT environment variable\nphoromatic: Introduce support for setting a run-priority on test schedules\n\nPhoronix Test Suite 7.2.0 Milestone 3\n26 May 2017\n\npts-core: Result parser fixes for some advanced corner cases\npts-core: Add dump-file-info helper\nphodevi: Fallback for being able to read I/O scheduler on NVMe device on Linux\nphodevi: Monitor *DEBUG* environment variables\npts_Graph: Key alignment spacing fix\npts_Graph: Don't allow duplicate identifiers\npts_Graph: Various other alignment tweaks\nphoromatic: Handling for non-PCNTL support in Phoromatic client\n\nPhoronix Test Suite 7.2.0 Milestone 2\n4 May 2017\n\npts-core: Add SKIP_TESTS_HAVING_ARGS environment variable\npts-core: Parser improvements\nperf_per_dollar: Allow custom units, report on LIB graphs too\nphodevi: Add PGI compiler detection\n\nPhoronix Test Suite 7.2.0 Milestone 1\n14 April 2017\n\npts-core: Result parser improvements\npts-core: Add AppendToArgumentsDescription option to result parser capabilities\nsystem_monitor: Fix for when individual monitoring is disabled\nphodevi: Fix for listing dual 4K displays and other select multi-monitor configurations\n\nPhoronix Test Suite 7.0.1\n28 March 2017\n\npts-core: Support for network proxies with username/password requirement\npts-core: Improve formatting of text in 'info' sub-command\nphodevi: Improved detection for Quill AArch64 board and possibly other boards\nphodevi: Various sensor detection improvements for the Jetson TX2\nphodevi: Add fallback detection for ARM Mali\nreport_test_run_times: Add INSTALL_TIMES_ARE_A_BENCHMARK=1 option for generating install time graphs\nreport_test_run_times: Add INSTALL_SIZES_ARE_A_BENCHMARK=1 option for generating install size graphs\n\nPhoronix Test Suite 7.0.0-Ringsaker\n6 March 2017\n\npts-core: Make the AppStream meta data happy\npts-core: Improve formatting of PDF generation on large result files\nphodevi: Expand GCC version detection when -dumpversion isn't supported (e.g. gcc-snapshot of gcc 7.0.1)\n\nPhoronix Test Suite 7.0.0 Milestone 5\n28 February 2017\n\npts-core: Allow bzip2 compression of result file uploads to OpenBenchmarking.org\npts-core: Only preserve the original raw result string if it differs from the final result\npts-core: Show results in text mode when show-result sub-command is run without DISPLAY\nreport_test_run_times: new module to report test run times as result graphs\n\nPhoronix Test Suite 7.0.0 Milestone 4\n16 February 2017\n\npts-core: stress-run styling improvements\npts-core: External dependency XML updates\nphodevi: Continued tweaking on the new system information view\nphodevi: Append LLVM version to OpenGL driver string where relevant\npts_Graph: Continued tweaking of graph UI\npts_Graph: Allow more compact multi-way comparison graphs\npts_Graph: Various SVG size/efficiency optimizations\n\nPhoronix Test Suite 7.0.0 Milestone 3\n7 February 2017\n\npts-core: Add winners-and-losers sub-command for providing some first/last place finish stats\npts-core: Don't pass files greater than ~50MB to the result parser as likely too big to parse and invalid data like lots of warnings/errors from test\npts-core: Restructured test result parser\npts-core: Dropping of some deprecated checks\npts-core: Add ArgumentsDescription to the results-parser schema for appending a string to the used arguments description string on test execution\npts-core: Add the result-scale to the test profile comparison_hash (NOTE: any external data stores making use of the comparison_hash should thus rebuild their hash indexes)\npts-core: Allow one test run to generate multiple result outputs (graphs, etc) from multiple result-definition entries\npts-core: Drop secondary_linked_results handling now that all tests can create multiple result outputs natively, use that code path\npts-core: Add debug-result-parser sub-command as a way to debug test profile result-parser defintions, just scan for old test log files and don't actually execute test\npts-core: Restore setting the OpenBenchmarking.org ID to the ReferenceID field in the result file when cloning from OpenBenchmarking.org\npts-core: Various console coloring improvements\n\nPhoronix Test Suite 7.0.0 Milestone 2\n23 January 2017\n\npts-core: Indicate HIB/LIB result proportion when dumping results as CSV\npts-core: Introduce new view of system software/hardware details on test run and system-info command\npts-core: Drop detailed-system-info sub-command now that system-info is more verbose\npts-core: Eliminate pts_test_downloads_nye_XmlReader\npts-core: Eliminate pts_parse_results_nye_XmlReader abstraction\npts-core: A lot of cleanups / reworking of XML parsing in various components\npts-core: Cleanup phoronix-test-suite list-test-usage\nphodevi: Fix for hanging Windows client when requesting disk mount options\nphodevi: Don't rely upon X.Org DDX driver logic for determining GPU frequency since it's not portable to Wayland or with -modesetting DDX\nphodevi: Add microcode version reporting on Linux\n\nPhoronix Test Suite 7.0.0 Milestone 1\n12 January 2017\n\npts-core: Add estimate-run-time sub-command for estimating test/suite/result-file run length\npts-core: More external dependency coverage for BSDs\npts-core: Cleanup PTS_USER_LOCK / run-lock handling\npts_Graph: Add \"Ryzen\" product string to AMD's coloring\npts_Graph: Add \"Pentium\" product string to Intel's coloring\npts_Graph: Add option to disable color branding\nphoromatic: Set by default for SQLite database WAL journal mode / NORMAL synchronous\nphoromatic: Report status updates more often\n\nPhoronix Test Suite 6.8.0-Tana\n6 December 2016\n\nphoromatic: allow clearing warnings/errors of a system from the systems page\nphodevi: Rearrange ATI/AMD graphics checks\n\nPhoronix Test Suite 6.8.0 Milestone 3\n28 November 2016\n\npts-core: Ubuntu external dependency script fix\nphodevi: Improved video RAM detection via GLX_MESA_query_renderer\nphodevi: GPU detection improvements\nphodevi: vRAM detection change to help AMDGPU-PRO\nphodevi: Other product/model string improvements\n\nPhoronix Test Suite 6.8.0 Milestone 2\n15 November 2016\n\npts-core: Add new remove_inactive_systems option on systems page\npts-core: Fix malforming graphs when feeding many line graph results that are in a tracking-like manner that should be compacted to box plot\npts-core: Add PHP GD check as first thing when attempting to use result-file-to-pdf\npts-core: Add new module hooks for __test_log_output() and __post_test_run_system_logs()\nphodevi: Don't load Phodevi sensors prior to PHP 5.3 due to compatibility issues\nlog_exporter: Allow easily exporting test run and system logs via COPY_TEST_RUN_LOGS_TO and COPY_SYSTEM_LOGS_TO env vars\nflamegrapher: Experimental new module to generate Linux perf / FlameGraph graphs for each test being executed when active\nresults_custom_export: Example module for dumping PTS test results in custom formats\npts_Graph: Add Intel color highlighting for \"Celeron\" too\n\nPhoronix Test Suite 6.8.0 Milestone 1\n27 October 2016\n\npts-core: Add PHOROMATIC_HTTP_PORT environment variable for overriding Phoromatic Server HTTP port on starting it\npts-core: Don't preserve really large system logs (~1MB or greater per file)\npts-core: Strip http/https from proxy address if needed\npts-core: Update Solus external dependency handling\npts-core: Proper handling for when PHP ctype functions are not present\nphodevi: Also look for Vulkan ICDs at /usr/share/vulkan/icd.d/*.json\n\nPhoronix Test Suite 6.6.1\n29 September 2016\n\npts-core: Various BSD improvements\npts-core: Add list-not-installed-tests command (alias: list-uninstalled-tests)\npts-core: Detection for qupzilla browser when no alternative exists\npts-core: Add \"phoronix-test-suite php-conf\" sub-command to dump more useful PHP information for debugging\npts-core: Add python-scipy and python-sklearn external dependencies\nphodevi: Support for reporting memory frequency when overclocked if reported via \"Configured Clock Speed\" in dmidecode for RAM\n\nPhoronix Test Suite 6.6.0-Loppa\n6 September 2016\n\npts_Graph: On multi-way comparisons, always condense line graphs to modified box plots\n\nPhoronix Test Suite 6.6.0 Milestone 3\n26 August 2016\n\npts-core: Add OpenMandriva/urpmi PHP dependency helper to launcher\npts-core: After running tests, if no browser/display is available, offer to show results via CLI graph/text rendering\npts-core: Add a SVG DOM HTML back-end for lowering common SVG into pure HTML for cases like email clients where no SVG is supported\nhtml_results_export: New module exposed via EXPORT_RESULTS_HTML_EMAIL_TO and EXPORT_RESULTS_HTML_FILE_TO env vars for exporting HTML results\npts_Graph: When highlighting graph values, darken the color rather than use static color\n\nPhoronix Test Suite 6.6.0 Milestone 2\n7 August 2016\n\ndeploy: Update Debian packaging script\npts-core: Fix for upload-test-suite (on OpenBenchmarking.org side too)\npts-core: Show local suites in list-suites\npts-core: Ensure DragonFlyBSD pkg installation is done automatically\npts-core: Restructure bash on windows check\npts-core: Initial work on CLI terminal colored text output\nphoromatic: Web UI styling improvements\nphodevi: Show mdstat RAID Details when available\npts_Graph: Show extra disk details on system graph\n\nPhoronix Test Suite 6.6.0 Milestone 1\n6 July 2016\n\npts-core: Add OpenCV to external dependencies list\npts-core: Disable test cache share when run in stress-run mode\nphoromatic: Allow custom versions to be manually specified on test suite web UI page\npts_Graph: Show min/max results on multi-way comparisons\npts_Graph: Color string tweaks\nphodevi: Fix to allow GPU temperature sensor to work with AMDGPU-PRO driver stack\n\nPhoronix Test Suite 6.4.0-Hasvik\n2 June 2016\n\n[Only minor changes since 6.4 M4]\n\nPhoronix Test Suite 6.4.0 Milestone 4\n31 May 2016\n\npts-core: Automatically add used extra OpenBenchmarking.org repositories to the linked list\npts-core: Don't load empty tests on finish-run command\npts-core: Add perl-digest-md5 to external dependencies list\npts-core: Prevent duplicate tests/setting combinations from entering the same test run manager queue\npts-core: Fix for IE not scaling SVGs in the results viewer\npts-core: Finish new pts_test_suite API, port build-suite to it\nphoromatic: Support editing and deleting tests in local suites from the Phoromatic Server UI\nphodevi: More detection improvements for NVMe devices on Linux\n\nPhoronix Test Suite 6.4.0 Milestone 3\n26 May 2016\n\npts-core: XML formatting fix for non-OpenBenchmarking.org deployments\npts-core: Do more to avoid zombie processes in stress-run manager\npts-core: More robustness of the results parser with spaces (or lack of) near colons\npts-core: Rewritten pts_test_suite internals\nphodevi: Support for reading AMDGPU OverDrive overclock offset\nphoromatic: Add generalized \"Testing\" page to Phoromatic Server\nwatchdog: new PTS module for checking sensor readings to suspend/quit testing if exceeded\n\nPhoronix Test Suite 6.4.0 Milestone 2\n6 May 2016\n\npts-core: Allow XML formatting from the Phoromatic Server web interface\npts-core: Reformat stress-run log messages\npts-core: Add \"redis-server\" as a potential external dependency for providing Redis\npts-core: Statically set dynamic_run_count_on_length_or_less to 60\npts-core: Adaptively increase regression threshold level in points_of_possible_interest() when too many results are being flagged\nphoromatic: Fix selecting the same test itself on the \"build suite\" page\nphoromatic: Do hard deletes when deleting results from admin area or results page\nphoromatic: Add basic support for deleting \"local suites\" from Phoromatic web UI\nphoromatic: Allow exporting system test run/build errors to the exported public results viewer\nphoromatic: Add PTS_NO_REBOOT_ON_NETWORK_FAILURE environment variable for clients where if network failure occurs, Phoromatic clients will not reboot\nphodevi: Add ambient.temp sensor for reporting ambient temperature, currently supports temperv14 USB sensors\n\nPhoronix Test Suite 6.4.0 Milestone 1\n25 April 2016\n\npts-core: Many improvements to stress-run functionality\npts-core: Add Midori to supported browser list\npts-core: Add default logging support while running stress-run using phoronix-test-suite-stress.log filename\npts-core: Additional fallback for locating if running PTS as a user from their home directory\npts-core: Append date to phoronix-test-suite-stress-XXX.log when running stress-run\nphoromatic: Initial server-side implementation of new stress-run support via Phoromatic Server when going to \"Run A Benchmark\" and opting for stress mode\nphoromatic: Initial client-side implementation of new stress-run support\nphoromatic: Add basic email notification support to the Phoromatic export results viewer\nphoromatic: Say \"Stress Testing - XXX\" as Phoromatic status messages when in stress-run mode\nphoromatic: Add links to schedules/tickets from dashboard and system pages for active schedule/ticket on that system at the moment\nphoromatic: Fix for handling post-run event script\nphoromatic: Only run tests once each time called upon in stress-run mode\nphoromatic: Show systems in groups on benchmark ticketing page\nphoromatic: Don't reset fields when building suite and adding additional tests\n\nPhoronix Test Suite 6.2.2\n9 March 2016\n\npts-core: Fix for crash in stress-run mode\npts-core: Add OpenSUSE dynamic reverse dependency handler\npts-core: For the new result viewer, add Epiphany to the web browser list\npts-core: Void Linux external dependency support\npts-core: Alpine Linux (APK) external dependency support\nphoromatic: Don't use a proxy (if available) when trying to connect from Phoromatic client to server\n\nPhoronix Test Suite 6.2.1\n23 February 2016\n\nphodevi: Extra Vulkan information reporting\nphodevi: Add OpenCL version reporting to system software string\nperf_per_dollar: Fix for uninitialized test_result object\n\nPhoronix Test Suite 6.2-Gamvik\n16 February 2016\n\npts_Graph: Fixes\npts_Graph: Support for branded colors on more graphs\nphodevi: plumbing Vulkan\nmatisk: Fixes\n\nPhoronix Test Suite 6.2 Milestone 5\n5 February 2016\n\npts-core: Add golang as possible external dependency\nphodevi: Optimization for slightly faster start-up time\nphoromatic: Add WoL details to the maintenace table page\nphodevi: Sensor clean-up and fixes  (Jakub Maleszewski)\nmatisk: Restore the MATISK module for testing  (Jakub Maleszewski)\n\nPhoronix Test Suite 6.2 Milestone 4\n26 January 2016\n\npts-core: Fix for some test profiles not showing up in list-tests sub-command\npts-core: Add function for optionally removing unchanged results\npts-core: Add function for optionally removing noisy results\npts-core: Rework PDF generation of test results\nphoromatic: Add option to result viewer for exposing possible points of interest\nphoromatic: Add view_results_since support to the export results viewer\npts_Graph: Fix for graphs sometime not rendering correctly on multi-way comparisons\n\nPhoronix Test Suite 6.2 Milestone 3\n7 January 2016\n\npts-core: Add system to default list of repositories\npts-core: Allow result graph footnotes to be added during test time by writing to ~/pts-footnote\npts-core: Optimize array usage along hot paths\npts-core: Add httpd as a possible external dependency\npts_Graph: Rendering fix for collision of result identifiers\nphoromatic: Add LimitNetworkCommunication option\nphoromatic: Fix in listing tests on schedules page when dealing with cache mismatch\ndeploy: JuJu update from upstream\n\nPhoronix Test Suite 6.2 Milestone 2\n2 January 2016\n\npts-core: Add FullOutput configuration option for dumping all pre/post/interim information to standard output\npts-core: Add MinimalTestTime user configuration option\nphodevi: Software string detection improvements\nphodevi: Support for PTS_NPROC environment variable to override reported CPU core count\nphoromatic: Export viewer tweaks\n\nPhoronix Test Suite 6.2 Milestone 1\n15 December 2015\n\npts-core: Begin work on dynamic dependency handler infrastructure\npts-core: Add new TestProfile/SystemDependencies field to test profile specification\npts-core: Basic implementation of SystemDependencies for dynamically resolving system/external dependencies based on file name\nphoromatic: Allow public listing of download cache files when navigating in browser to /download-cache.php\nphodevi: Assume Windows is 64-bit when environment variable check fails\nphodevi: Support sys.power sensor monitoring fallback on BAT1\n\nPhoronix Test Suite 6.0.1\n20 November 2015\n\nphodevi: Fix potential errors in sensors\n\nPhoronix Test Suite 6.0-Hammerfest\n16 November 2015\n\npts-core: Stop logging lsusb as on some systems calling the command will hang\npts-core: Move common dependencies later in the external dependency handling process\npts_Graph: Fix multi-way comparison line graphs from color collision\nphodevi: NVIDIA Jetson TX1 GPU thermal monitoring support and likely will work for some other boards too\n\nPhoronix Test Suite 6.0 Milestone 6\n12 November 2015\n\npts-core: Windows updates\npts-core: Random fixes\npts-core / phodevi: Merge the complete system sensors rework: https://github.com/phoronix-test-suite/phoronix-test-suite/pull/92 (Jakub Maleszewski)\npts-core: pts_openbenchmarking::available_tests() don't show deprecated test profiles by default\nphodevi: Support reporting /sys/firmware/devicetree/base/model for part of motherboard/SBC string\nphoromatic: Final styling for hammerfest\n\nPhoronix Test Suite 6.0 Milestone 5\n4 November 2015\n\npts-core: Rewrite of the local results viewer, now use HTML+JS rather than XSL\npts-core: Fix finish-run command functionality\npts-core: Fix results getting compacted into single result comparison object when using a local test without version post-fix\npts-core: Fix CSV result output when there are missing results\npts-core: Properly handle spaces in shell_exec() export\npts-core: Other small fixes\nphodevi: Support for finding the Xorg.0.log in ~/.local/share/xorg/ with Debian now using that for non-root X Server\nphoromatic: Tweaks\ndocumentation: Update HTML template style\n\nPhoronix Test Suite 6.0 Milestone 4\n25 October 2015\n\nphoromatic: Start of reworking the web interface\nphoromatic: Initial responsive design, mobile friendly\nphoromatic: Support for exporting results as XML via the viewer\nlinux_perf: Add new module to provide perf output reporting on a per-test-run basis when LINUX_PERF=1 environment variable is set\npts_Graph: Tweaks\n\nPhoronix Test Suite 6.0 Milestone 3\n9 October 2015\n\npts_Graph: Continued SVG optimization work\npts-core: Fix \"auto-disks\" test option to not show partitions\npts-core: Various fixes\npts-core: Finish work on auto-authenticating clients / settings page option to automatically approve newly added systems by default\npts-core: Add extra warning about RequiresRoot=TRUE tests\npts-core: Detect NVMe drives when looking for block devices for disk testing\npts-core: Add \"smartmontools\" as new PTS External Dependency\npts-core: Rewrite the DragonFlyBSD external dependency handling to now use dports pkg rather than pkgsrc\npts-core: Add NO_HTTPS environment variable option for systems that have trouble with HTTPS\n\nPhoronix Test Suite 6.0 Milestone 2\n24 September 2015\n\npts-core: Just mention PHP 5.3 as the new base requirement. Code still should largely work with PHP 5.2, but don't advertise it\npts-core: Add FileFormat optional tag to result parser with CSV support\npts-core: Add debug-render-test for helping to optimize the graph/result rendering process\npts-core: Rendering optimizations when handling lots of result files / graphs / result identifiers\npts-core: Rework and optimize the pts_result_file\npts-core: Implement new, faster result merger\npts-core: Allow the test_run_manager to run directly with a result_file\npts-core: Do test execution with proc_open(), allow modules to tap the process\npts-core: Add support for emitting SVG files with g tag to save space\npts-core: Fix breakage of pass/fail type tests in result parser\npts-core: Drop unused PIE_CHART type\nphodevi: AMDGPU Linux detection improvements\nphoromatic: Add \"Tests\" page\npts_Graph: Don't embed the PNG logo directly into the SVG file, but rely on HTTPS link\npts_Graph: Support coloring based on brand\npts_Graph: Implement new internal graph rendering interfaces, other major rewrites\n\nPhoronix Test Suite 6.0 Milestone 1\n26 August 2015\n\npts-core: Show estimated date/time next to estimated duration left on tests\npts-core: Support /usr/lib/os-release for stateless systems\npts-core: Allow listing multiple items via the info sub-command\npts-core: Add new test profile parsing back-end\npts-core: Unconditionally always ensure __GL_SYNC_TO_VBLANK=0\npts-core: Fixes for test profile validation following recent restructuring\npts-core: WebSocket fixes\npts-core: Fix bash completion\nphoromatic: Improvements when server addressing setup fails\npts_Graph: Support reporting a min result on graphs when there is no max value to be reported\ntoggle_screensaver: GNOME 3 update\nperf_per_dollar: Add performance-per-dollar calculator module based on environment variable input\nsystem_monitor: Support reporting a meta/overall performance-per-Watt result at end of result file when activated\nphodevi: Add BcacheFS superblock\n\nPhoronix Test Suite 5.8.1\n23 June 2015\n\npts-core: Misc warning fixes\npts-core: Fix result file validation against XML schema\npts-core: Never show /boot/efi as possible benchmark writable mount point\npts-core: Don't report which errors on launcher\nphoromatic: Add button to schedules page to allow skipping current trigger\nphoromatic: Pass extra attributes during PDF generation to allow for PDF sorting, etc\nphoromatic: Allow basic sub-targeting as part of test schedule trigger URLs\nphoromatic: Enhancements to the main page\nphoromatic: Result tracker detection improvements\nphoromatic: Sort systems on main page\n\nPhoronix Test Suite 5.8-Belev\n5 June 2015\n\npts-core: Don't needlessly write out config file each time if nothing relevant has changed\npts-core: Automatically re-install tests if compiler flag environment variables change\npts-core: Add attr as an external dependency\npts-core: Fix for reading multiple dependency names\nphoromatic: Reboot system if comm fails 10+ times on client\nphoromatic: Add global checkbox to key pages\nphoromatic: Track core version of clients in database\nphoromatic: Refresh OB repository lists prior to benchmarks\nphoromatic: Additional validation on result uploads\nphodevi: Some basic hardware reporting improvements that help the MIPS Creator CI20\n\nPhoronix Test Suite 5.8 Milestone 5\n28 May 2015\n\npts-core: Major performance improvements when merging many result files\npts-core: Faster result file parsing\npts-core: Stress-run improvements\nphoromatic: Improved tracker page\nphoromatic: Updated maintenance page\nphoromatic: Log tick sensors into sensors-pool\nphoromatic: Show prominent sensors via the dashboard\nphoromatic: Add graphs to systems page\nphoromatic: Scale SVG result graphs to better page size\nphoromatic: Add phoromatic.export-results-for-account-schedules option\nphoromatic: Add the Phoromatic Export Viewer\n\nPhoronix Test Suite 5.8 Milestone 4\n20 May 2015\n\npts-core: Support for using DNF directly when available on Fedora\nphodevi: Report kernel's build date when detected it's running on a daily/devel/RC kernel\nphodevi: Fix for Radeon GPU voltage reporting\nphodevi: Improved open-source GPU frequency detection when X Server not active\nphoromatic: Various fixes\nphoromatic: Add support for specifying custom client update script via account settings page to keep clients PTS updated\nphoromatic: Change interface of reporting sensor values\n\nPhoronix Test Suite 5.8 Milestone 3\n12 May 2015\n\npts-core: Separate out WebSocket server back-ends\nphoromatic: Honor show_local_tests_only option via the build suite page\nphoromatic: Fix jumping on page on checkbox selection when scrolling\nphoromatic: Don't print network connectivity messages\nphoromatic: Set Phoromatic System Variables set by server on Phoromatic clients as env vars\nphoromatic: Lots of early Web Sockets work\nphoromatic: Initial support for the Mongoose Embedded Web Server, used by default if php-cgi and mongoose binaries are found in PATH\nphoromatic: Support for tick thread\nphoromatic: Support for reporting system sensors and client log to systems page\nphoromatic: Add support for real-time halt testing and rebooting from the Phoromatic Web UI\n\nPhoronix Test Suite 5.8 Milestone 2\n21 April 2015\n\npts-core: Fix potential crash in list-installed-suites sub-command\npts-core: Enforce CCACHE_DISABLE=1 during install/runtime testing\npts-core: Finish removal of hhvm-server support since it's long been discontinued upstream\npts-core: Add pts-core/hooks/startup\nphodevi: Reporting of Btrfs RAID levels to system component table when running disk tests\nphoromatic: Workaround for instr() usage in SQLite that caused issues with older distributions\nphoromatic: Add LetPublicViewResults option and new public results listing page\nphoromatic: Update results selection on rootadmin data page\nphoromatic: Start work on nginx server configuration (not yet working)\nphoromatic: Add \"System Targets\" info to benchmark ticket page & \"View All Past Tickets\"\n\nPhoronix Test Suite 5.8 Milestone 1\n2 April 2015\n\npts-core: Start moving possible deployment scripts into deploy/ directory\npts-core: Move phoromatic-client and phoromatic-server Upstart job files to deploy/\npts-core: Move phoromatic-client and phoromatic-server systemd service files to deploy/\npts-core: Add very basic result-file-to-json sub-command\npts-core: Drop AnonymousHardwareReporting / AnonymousSoftwareReporting as no longer used on OpenBenchmarking.org\nPull in JuJu scripts from https://github.com/juju-solutions/pts to deploy/juju\nphodevi: More allowance for clients to recover Internet connection / server communication failure\nphoromatic: Clean-up main page schedule for schedules with no associated systems\nphoromatic: Show matching ticket results in the compare results column on results page\nphoromatic: Allow results page to be limited to particular hash or ticket matches\nphoromatic: Allow results page search box to also search system's hardware/software components\nphoromatic: Fix for removing a system from all groups on the \"system group editing\" systems page\nphoromatic: Allow per-system overriding of whether automatic power-offs of system are permitted\nphoromatic: Get rid of block-poweroff file check in client module now that it can be done per-system from server-side\nphoromatic: Allow WoL power-ups for honoring benchmark tickets\nphoromatic: Unify more code from start.php into phoromatic_server\nphoromatic: Always unset the GRUB recordfail when applicable\nphoromatic: Add \"System Maintenance Table\"\nphoromatic: Add \"PowerOnSystemDaily\" setting option to ensure regardless of schedule that systems will at least power-up/communicate daily if enabled\nphoromatic: New checkbox handling on results page to manage comparisons and multi-delete results\nphoromatic: Start work on new main page\n\nPhoronix Test Suite 5.6.0-Dedilovo\n24 March 2015\n\npts-core: Drop bilde_renderer since it's been deprecated for a while\npts-core: Yield /dev/mapper/* points in auto-disk-mount-points\npts-core: Detect Internet presence for enterprise-setup\npts-core: cli_set_process_title() still emits error on OS X so block its usage\npts-core: Fix potential warning in detailed-system-info sub-command\nphodevi: HFS+ file-system fallback detection on OS X\nphodevi: Workaround Hyper Threading detection on OS X\nphoromatic: Add universal search functionality from web interface\nphoromatic: Improve formatting of annotations\nphoromatic: Mark system state as unknown when communication fails and hits the event server check\nphoromatic: Don't attempt to open DB in read-only mode if phoromatic.db not yet made\n\nPhoronix Test Suite 5.6 Milestone 5\n11 March 2015\n\npts-core: Ignore test run locking in stress/multi-run mode\npts-core: Allow 128 character result identifier strings\npts-core: Switch the dump-documentation sub-command to generating the README in md format\nphoromatic: Change the custom From email sender to Reply-To\nphoromatic: Finish hooking-up multi-test/stress-run functionality via the benchmark page\nphoromatic: Send emails from rootadmin or group admin's email address where applicable rather than no-reply@\nphoromatic: Scroll bar on local suites page condensing\nphoromatic: Add \"End Ticket\" option to benchmark page\nphoromatic: Allow stress tests up to 90 days\nphoromatic: Allow stress runs up to 24 concurrent tests\nphoromatic: Add basic support for annotating/commenting on result files and individual graphs\nphoromatic: Add support for the user to delete annotations\n\nPhoronix Test Suite 5.6 Milestone 4\n25 February 2015\n\npts-core: Improvements to phoronix-test-suite make-download-cache\nphoromatic: Add \"admin data\" page to let the rootadmin permanently delete schedules/results/systems\nphoromatic: Allow for system identifier variable in benchmark tickets of .SYSTEM\nphoromatic: Allow for system identifier variable in benchmark tickets of .GROUP\nphoromatic: Allow tickets to be removed from the individual benchmark page\nphoromatic: Allow creating new group accounts from the rootadmin page\nphoromatic: Add support for repeating tickets\nphoromatic: Add basic support for system variables\n\nPhoronix Test Suite 5.6 Milestone 3\n15 February 2015\n\nphoromatic: Allow triggers to be deleted\nphoromatic: Rely on caching for determining pre-existing cached test profiles from the web UI\nphoromatic: Add result RSS support\nphoromatic: Add new option to results page\nphoromatic: Enforce new PTS sign-on whenever the PTS core version changes due to potential interface changes\nphoromatic: Working build suite page\nphoromatic: Add support for local suites page\nphoromatic: Add benchmark page\nphoromatic: Add support for viewing issued benchmark tickets\nphoromatic: Add option to force rebuild of results databases\nphoromatic: Prepend system ID to result string when running multiple tests without variables\nphoromatic: Add \"Test All Options\" opton to build suite page\n\nPhoronix Test Suite 5.6 Milestone 2\n4 February 2015\n\npts-core: Various fixes\npts-core: Deb/RPM build packaging improvements.\npts-core: Add Markdown Readme file\npts-core: Add hidden ?seed_accountid= option to the welcome / account creation page for custom 6 character ID\npts-core: Fix for session save path on Fedora when running as normal user\npts-core: Import copy of FPDF locally for PDF rendering\nphoromatic: Add a public view of test results by going to result page entry -> Result Export -> Public Viewer\nphoromatic: Add basic \"Upload To OpenBenchmarking.org\" link from test result page\nphoromatic: Allow users to reset their own password by navigating to the settings page\nphoromatic: Add \"group name\" concept to Phoromatic group of accounts\nphoromatic: Improved formatting of the public-viewer page\nphoromatic: Allow downloading results as PDF\nphoromatic: Allow disabling new account registration by setting custom string via rootadmin's config page\nphoromatic: Allow setting a main page message string to show users once logging into their account, via rootadmin's config page\nphoromatic: Don't show idling systems on the dashboard\nphoromatic: Add IP ping test to system claim page\nphoromatic: Introduce PPRID structure as universal unique identifier for results between accounts\nphoromatic: Allow optional result sharing between groups / unique accounts (controlled via settings)\nphoromatic: Add \"force result sharing\" option to rootadmin to override per-account settings\nphoromatic: New result compare functionality\nphoromatic: Support for limiting results to a certain time period\nphoromatic: Add comparable results listing on individual result pages\nphoromatic: Register module-discovered Phoromatic Servers with pts-core\nphoromatic: Add \"Only Advertise Cached Tests\" option to rootadmin\nphoromatic: Download latest OpenBenchmarking.org test suites/profiles in background thread from the event server\nphoromatic: Add option to pre-seed test installs to systems when otherwise idling\nphoromatic: Support for exporting result files to download as CSV or TXT\nphoromatic: Add phoromatic.list-results sub-command for clients to view recent results\nphoromatic: Add phoromatic.clone sub-command for clients to clone viewable test results\n\nPhoronix Test Suite 5.6 Milestone 1\n13 January 2015\n\npts-core: Add \"short\" display mode\npts-core: Add stress-run command to allow for concurrent stress testing / burn-in / torture testing\npts-core: Add TOTAL_LOOP_TIME support to stress-run\npts-core: Add TOTAL_LOOP_TIME=infinite support to stress-run for testing in an infinite loop\npts-core: Add support for libframetime output result parsing\nphoromatic: Initial commit of basic tracker page\nphoromatic: Better recovery of existing Phoromatic accounts on reloaded systems where the machine self ID changed\ntimed_screenshot: Fix for crash when PHP GD missing\n\nPhoronix Test Suite 5.4.1-Lipki\n23 December 2014\n\npts-core: Update AppData and systemd service files\npts-core: Add csv-dump-frame-latencies support to result parser\nphoromatic: Improve formatting of result strings when merging random result files together\nphoromatic: Add enterprise-setup sub-command\nphoromatic: Attempt to detect and report IP address next to requested MAC address claim on the system claim page\n\nPhoronix Test Suite 5.4.0-Lipki\n9 December 2014\n\nphoromatic: Main page update\nphoromatic: Various updates\n\nPhoronix Test Suite 5.4 Milestone 7\n1 December 2014\n\npts-core: Improve MAC address acquisition on systems with multiple NICs\nphoromatic: Add add_new_users_to_account option for adding new users automatically to existing account\nphoromatic: Allow changing the admin level for users by the main administrator from the Users page\nphoromatic: Report systems MAC address from the systems page\nphoromatic: Report network's Wake-On-LAN information to Phoromatic Server\nphoromatic: Add notification option to email to users when systems appear hung for more than an hour\nphoromatic: Add option to power off systems when no more scheduled tests are scheduled for the day\nphoromatic: Add option to network wake on lan (WoL) systems when needed for testing\nphoromatic: Allow logging of Phoromatic set user context execution\nphoromatic: Add support for viewing system logs from the result page link on right hand side\nphoromatic: Support for disabling accounts via rootadmin\nphoromatic: Track elapsed time during the testing process, report to Phoromatic Server\nphoromatic: Allow Phoromatic Servers to be specified via a simple text file at PTS_USER_PATH/phoromatic-servers\nphoromatic: Add \"configure Phoromatic client via SSH\" to Phoromatic Server\nphoromatic: Allow IP/MAC based system claiming from Phoromatic Server UI\nphoromatic: Allow blocking poweroffs by touching modules-data/phoromatic/block-poweroff\nphoromatic: Prominently show \"systems needing attention\" from the server UI\nphoromatic: More email reporting of hung systems / systems not running tests when they should\nphoromatic: Add custom Wake-On-LAN packet generator if etherwake isn't found on server\nphoromatic: Show schedules/group on system page\nphoromatic: Hook in estimated time remaining for task\nphoromatic: Report percent complete of task to server\nphoromatic: Add system component table\nphoromatic: Add new reporting features to server\nphoromatic: Add system dashboard\nphoromatic: Add legacy init.d script support\nphoromatic: Rework idle support and add maintenance mode support to client\nphoromatic: Implement maintenance mode on server side\n\nPhoronix Test Suite 5.4 Milestone 6\n19 November 2014\n\npts-core: Fix result merging when PTS test identifier is null, use title string instead as identifier\npts-core: Check for PHP Sockets support\npts-core: Enhanced make-download-cache\npts-core: Enhance PHP_BIN detection\npts-core: Use system's zip library if PHP ZIP is not available\nphoromatic: Upstart phoromatic-server job is working (tested on Scientific Linux 6.6)\nphoromatic: Add \"Run Test Schedule Now\" button to test schedule page to allow for easy one-time/manual testing\nphoromatic: Add some basic statistics to the rootadmin page\nphoromatic: Allow the PhoromaticStorage location to be modified from the webUI when logging in as rootadmin\nphoromatic: Allow the download cache location to be modified from the webUI when logging in as rootadmin\nphoromatic: Allow the network proxy details to be modified from the webUI when logging in as rootadmin\nphoromatic: Allow the HTTP / WebSocket ports to be modified from the webUI when logging in as rootadmin\nphoromatic: Increase memory_limit on download cache downloads\nphoromatic: Expose all possible video modes as test options\nphoromatic: Show recent triggers on a test schedule's page\nphoromatic: Add \"Upload results to OpenBenchmarking.org\" option to settings page\nphoromatic: Fix for deactivating options on settings page\nphoromatic: Remember last successful Phoromatic Server connection\nphoromatic: Add reboot and shutdown commands to Phoromatic module\n\nPhoronix Test Suite 5.4 Milestone 5\n10 November 2014\n\npts-core: Improvements when running as a systemd service / daemon\npts-core: Prefer firefox over Epiphany browser\nphoromatic: Implement email notifications on result uploads\nphoromatic: Implement email notifications on system generated errors/warnings\nphoromatic: Implement email notifications on new systems added\nphoromatic: Allow easily comparing a result file to other results for that given schedule ID\nphoromatic: Improve formatting of lists\nphoromatic: Add times viewed to results\nphoromatic: Add \"show only results with variation\" to result viewing page\nphoromatic: Add result flagging to the main page\nphoromatic: Allow other/unscheduled test results to be uploaded to the Phoromatic Server using the phoromatic.upload-result sub-command\nphoromatic: Show file/path locations when starting the Phoromatic Server\nphoromatic: Use a randomly chosen available port by default when starting the Phoromatic Server if no ports are defined\nphoromatic: Add basic root administrator support to the Phoronix web interface\npts_Graph: Shrink size of sub-title text strings when they're too long\n\nPhoronix Test Suite 5.4 Milestone 4\n5 November 2014\n\npts-core: Add 3840 x 2160 (4K UHD) to more of the mode-setting fall-back modes\npts-core: Start working on support for using standard Linux file-system hierarchy when running as root as a service\npts-core: Add PhoromaticStorage option to Phoronix Test Suite user configuration XML file\nphoromatic: Reporting of overall result counts for given test schedules\nphoromatic: Report benchmarking / test run errors to server\nphoromatic: Show system errors/warnings from the Phoromatic web UI\nphoromatic: Don't attempt to re-run test schedules on clients if they previously reported errors/warnings for that schedule / trigger ID combination\nphoromatic: Usernames need to be at least four characters long\nphoromatic: Add a schedule overview to the schedules page\nphoromatic: Add today's scheduled events to the side bar\nphoromatic: Improve result identifier / title reporting for results\nphoromatic: Implement \"Power User\" account level\nphoromatic: Add normalize results option to the phoromatic result page\nphoromatic: Support for jumping to test results page for XXX past days of test from schedule page\nphodevi: IBM POWER hardware detection improvements\n\nPhoronix Test Suite 5.4 Milestone 3\n20 October 2014\n\npts-core: Introduce basic system logging capabilities for services\npts-core: Try downloading files from remote download caches up to two times in event of failure / checksum issues\nphoromatic: Start a basic logger of Phoromatic Server events\nphoromatic: Add new create schedule interface\nphoromatic: Properly hook in system ID / group validation for test schedules\nphoromatic: Support for editing schedules from the web UI\nphoromatic: Support for activating/deactivating \"deleting\" test schedules from the web UI\nphoromatic: Support for reporting the network MAC address (for later WoL purposes)\nphoromatic: Update the CSS style\nphoromatic: Add support for the main administrator to create multiple users associated with the same account\nphoromatic: Add support for \"viewer accounts\" where they can view data but not alter/write data\nphoromatic: Fix for adding systems to groups\nphoromatic: Support for mass editing of systems in groups via the systems page\nphoromatic: Support for removing system groups\nphoromatic: Introduce activity stream and logging of user events / display from \"activity events\" page\nphoromatic: Support for merging result files from the results page by clicking on each of them once\nphoromatic: Support for deleting results from the web UI's results page\n\nPhoronix Test Suite 5.4 Milestone 2\n5 October 2014\n\npts-core: Add \"ResultAfterString\" to test result parser XML schema\npts-core: Other result file parsing improvements/fixes\npts-core: Rename debug-run mode to debug-benchmark, add extra features\npts-core: Separate out NoNetworkCommunication user option into NoInternetCommunication/NoNetworkCommunication user config options for those still wanting LAN/intranet support\npts-core: Add support to PTS clients for automatically finding Phoromatic Servers using Avahi zero-conf network discovery\npts-core: Improvements to make-download-cache\npts-core: Improved detection of file downloads that fail and serve HTML 404/not found responses\npts-core: Convert to a JSON-based representation instead of XML for the pts-download-cache file\npts-core: Various file hash checking improvements during test installation\npts-core: Allow Phoronix Test Suite clients to automatically discover Phoromatic download-cache archives\npts-core: Rewrite most of the RPM package generator\npts-core: Support /usr/share/phoronix-test-suite/download-cache as another download cache by default\npts-core: Client support for being able to obtain OpenBenchmarking.org index/test/suite data from local Phoromatic Servers\npts-core: Improved dump-core-storage output\npts-core: Introduce machine_self_id as UUIDv5 compliant self-generated unique identifier for each PTS client\npts-core: Allow result file titles up to 126 characters in length\npts-core: Add start of basic Phoromatic Server systemd service file\npts-core: Add start of basic Phoromatic Server Upstart conf file\npts-core: Introduce make-openbenchmarking-cache sub-command for trying to cache all test/suite meta-data from OpenBenchmarking.org\npts-core: Allow PhoromaticServers user-config.xml to specify static Phoromatic Server IP:port information\npts-core: Initial Upstart and systemd configurations for the Phoromatic clients\nphoromatic: Begin allowing results to be stored locally, not dependent on OpenBenchmarking.org storage\nphoromatic: Advertise Phoromatic Server using Avahi zero-conf networking service when avahi-publish available and AdvertiseServiceZeroConf user config option is TRUE\nphoromatic: Automatically setup download-cache over Phoromatic HTTP with the system's local download-cache archive\nphoromatic: Allow sharing OpenBenchmarking.org index/test/suite cache data from server with local Phoromatic clients\nphoromatic: Support pts-core's machine_self_id for system identification as an alternative to OpenBenchmarking.org GSID\nphoromatic: Add phoromatic.explore sub-command for showing discovered Phoromatic servers and their server/debugging information\nphoromatic: Add a cache settings page to the web interface\nphodevi: Allow GPU frequency detection for DRM/KMS drivers when no X Server DDX is detected\nphodevi: Allow multiple providers for one VFS entry in case of failure in prior commands/files\nphodevi: Allow reading X Server log from the systemd journalctl\nphodevi: Restructure when /etc/os-release is parsed for obtaining OS name/version information\nsystem_monitor: Allow user-set time interval period between sensor measurements using MONITOR_INTERVAL environment variable\n\nPhoronix Test Suite 5.4 Milestone 1\n5 September 2014\n\npts-core: Sanitize pts_result_file user strings\npts-core: Don't set memory_limit with HHVM\npts-core: Drop phoromatic_legacy support (old Phoromatic.com version)\nsystem_monitor: Correct perf-per-Watt calculation for LIB results\nphodevi: Support Nouveau's pstate formatting changes to read core/mem MHz on newer kernels\nphodevi: Support for reading monitor EDID over sysfs, decoding descriptors, and obtaining monitor name (should improve monitor name reporting for Intel Linux systems)\nphodevi: Improved SoC detection\npts_LineGraph: Alignment fix for keys\n\nPhoronix Test Suite 5.2.1-Khanino\n11 July 2014\n\npts-core: Add VDPAU as a dependency to the xorg-video external dependency on more platforms\npts-core: Don't check OpenBenchmarking.org credentials when the network is down\npts-core: Rework result-file-to-text sub-command, show text-based graph results\nphodevi: Improve NVIDIA binary driver GPU utilization detection\nphodevi: Add DDE / Deepin Desktop Environment detection\npts_Graph: Few minor graph alignment corrections\n\nPhoronix Test Suite 5.2.0-Khanino\n5 June 2014\n\npts-core: Support for GZ compressing result file XML data before uploading to OpenBenchmarking.org\npts_Graph: Further graphing improvements\n\nPhoronix Test Suite 5.2 Milestone 4\n29 May 2014\n\npts-core: Always report the CPU scaling governor to the system table\npts-core: Add auto-sort-result-file option\nphoromatic: Improve the systems' page\nphoromatic: Allow up to three connection failures before quitting\npts_Graph: Improved, cleaner, and more accurate rendering of the pts_OverViewGraph\npts_Graph: Make the horizontal box chart graph in good shape\npts_Graph: Revert earlier render_graph_value_ticks() change by mufasa72 as it produced inaccurate tick values\npts_Graph: use the horizontal box plot when rendering frame times for large number of results\npts_Graph: Various other graphing improvements\n\nPhoronix Test Suite 5.2 Milestone 3\n22 May 2014\n\npts-core: Be more strict in handling DynamicRunCount option\nphoromatic: Cleaning up more of the Phoromatic UI\nphoromatic: Support for updating the system status\nsystem_monitor: Allow extra idling time at begin and end of testing process\npts_Graph: Improve formatting of line graph keys\nphodevi: Detection support for KDE Frameworks 5 / Plasma Next desktop\n\nPhoronix Test Suite 5.2 Milestone 2\n18 May 2014\n\npts-core: Add RUN_TESTS_IN_RANDOM_ORDER environment variable to cause tests to run in a random order\npts-core: Add sdl2-development to PTS External Dependencies\npts-core: Fix regression from 5.2m1 that broke some areas of the GUI / web interface\npts_Graph: Render min/avg/max stats at top of line graphs (thanks to mufasa72)\n\nPhoronix Test Suite 5.2 Milestone 1\n8 May 2014\n\npts-core: Fix for not writing null test result file titles\npts-core: Fix & improvements to PRESET_OPTIONS environment variable\npts-core: Rename old/legacy phoromatic module to phoromaric_legacy\npts-core: Allow a range of test run options to be inputted (e.g. 2-5) to complement just a single test option or delimited by commas\npts-core: Fix for NOT saving test results when in batch-run mode and configured against saving\npts-core: Allow TEST_RESULTS_IDENTIFIER environment variable to be used when running tests unconditionally\nphodevi: Improvement for detecting optimal NVIDIA Linux GPU core frequency on modern GPUs\nphodevi: Add GPU usage reporting support to open-source AMD Radeon driver via RadeonTOP\n\nPhoronix Test Suite 5.0.1-Plavsk\n2 April 2014\n\npts-core: Add \"libudev1:i386\" to \"32bit-compatibility\" external dependency for Ubuntu Linux\npts-core: Add invalid command helper to force-install sub-command\npts-core: Add \"pcre\" external dependency\npts-core: Add pushover_net module as a way of sending iOS/Android push notifications of results using Pushover.net\npts-core: Ensure the result file description properly updates when adding to result files with new data\npts-core: Add edit-result-file command that allows for editing a result file's title and description\npts-core: Workaround HTTPS OpenBenchmarking.org proxy issue\npts-core: Improved handling when the system's php.ini is using a restricted open_basedir setting\npts-core: Arch Linux support improvements\npts-core: When PTS client fails to find ZIP support, emit a PTS error\npts-core: Ship an AppData file (phoronix-test-suite.appdata.xml)\ntoggle_screensaver: Disable on OS X since there is no support for automatically disabling the OS X screensaver and causes collision with MacPorts\nphodevi: Add extra checks to ensure NVIDIA blob doesn't get reported as Nouveau DDX due to kernel changes\n\nPhoronix Test Suite 5.0-Plavsk\n12 March 2014\n\npts-core: Improvements to run-random-tests\npts-core: Support for running the HTML5 UI on Microsoft Windows\npts-core: Rename RemoteAccessAllowed user configuration option to RemoteAccessPort\nphodevi: Improve MATE detection\nphodevi: Improve desktop environment recognition with $DESKTOP_SESSION\nphodevi: Ensure GCC's minor version number is reported\n\nPhoronix Test Suite 5.0 Milestone 3\n3 March 2014\n\npts-core: Windows 8.1 support improvements\npts-core: Add SKIP_TESTING_SUBSYSTEMS environment variable, partially based on former ONLY_TEST_TYPES\npts-core: Add a run-random-tests command to run random tests/workloads on the system\nphodevi: Improve NVIDIA DDX version detection\nphodevi: Improve audio detection\nphodevi: Add extra fallback for trying to read Radeon DRM core and memory frequencies on recent kernels\n\nPhoronix Test Suite 5.0 Milestone 2\n17 February 2014\n\npts-core: Add rename-result-file option\npts-core: WebSocket bug-fixes\npts-core: Other bug-fixes\npts-core: Disable the compiler-mask by default on FreeBSD/PC-BSD due to potential test installation issues on 10.0-RELEASE\npts-core: Split webui command into gui and start-remote-gui-server (local HTML5 GUI support) commands (remote + local HTML5 GUI support)\n\nPhoronix Test Suite 5.0 Milestone 1\n6 February 2014\n\npts-core: Add web-server-launcher support\npts-core: Support starting HHVM as a web server\npts-core: Startup speed optimizations\npts-core: Cleaned up code error reporting/handling\npts-core: Add server remote access and password options to user-config.xml user configuration options\npts-core: Adjust handling of PTS OpenBenchmarking.org downloading of test profile order and hash handling\npts-core: Reduce unnecessary communication with OpenBenchmarking.org network server\npts-core: Support system identifier strings up to 64 characters\npts-core: Add LIMIT_ELAPSED_TEST_TIME to limit the amount of time (in minutes) for a given Phoronix Test Suite process to complete its testing\npts-core: Allow null descriptor strings\npts-core: Fix regex for version string\npts-core: Random fixes\nphodevi: Various improvements\nphodevi: Improved disk scheduler fallback reporting\ndocumentation: Update to point out new Git location at github.com/phoronix-test-suite/ over Phorogit\nnye_Xml: Fix for writing zeros in XML tags when using the \"when not empty\" function\n\nPhoronix Test Suite 4.8.6-Sokndal\n10 December 2013\n\npts-core: Print out pre/interim/post test script outputs when running in debug-run mode\npts-core: DragonFlyBSD 3.6.0 support improvements\npts-core: Support using DragonFlyBSD dports package management system for external dependencies\npts-core: NO_FILE_HASH_CHECKS environment variable also doesn't enforce MD5/SHA256 checks on make-download-cache sub-command\npts-core: Pass test arguments to pre/interim/post test profile scripts; ESET / Michal Zatloukal patch\npts-core: Don't do dynamic test run counts when using system_monitor module\npts-core: Support reading the full terminal width using stty as tput cols doesn't seem to report anything but 80 with shell_exec()\npts-core: Add \"tiff\" external dependency for providing libtiff and header files\npts-core: Don't offer to save test results when using debug-run mode\nphodevi: Support reading monitor vendor/model numbers when using the binary NVIDIA Linux driver, including recent versions\nphodevi: Improve multi-monitor resolution reporting when sharing an X.Org Server\nphodevi: Remove more useless compiler path argument reports\ntoggle_screensaver: Auto unload module when no display server found\n\nPhoronix Test Suite 4.8.5-Sokndal\n22 November 2013\n\npts-core: Improve formatting of interrupt messages with the (default) concise display mode\npts-core: Don't remove test install files on installation failures\npts-core: Allow download-test-files command to use OpenBenchmarking.org IDs\npts-core: Don't dynamically increase the test run count when dealing with cache shares\npts-core: Fix for not opening the web-browser in batch mode\npts-core: Add zypper SUSE help support when not finding PHP\nphodevi: Add support for Nouveau PSTATE parsing on Linux 3.13+\nphodevi: Recognize 'HIS' (Hightech Information System) graphics cards\nphodevi: Recognize 'ZOTAC' graphics cards\nphodevi: Fix redundant monitor model reporting detection on Catalyst\nphodevi: Add support for NVIDIA-Settings GPUUtilization in gpu.usage sensor\n\nPhoronix Test Suite 4.8.4-Sokndal\n7 November 2013\n\npts-core: Allow web browsers and graphics tests to work on $WAYLAND_DISPLAY when $DISPLAY is not set\npts-core: Fix for libstdc++ on Gentoo external dependency\npts-core: Add a ResultScale XML tag option for the results-parser to provide custom ResultScale values depending upon selected parser option\npts-core: Add a ResultProportion XML tag option for the results-parser to provide custom result proportion values depending upon selected parser option\npts-core: Add ResultPrecision XML tag to results-parser for setting math precision of decimal points on result (default remains 2)\npts-core: Add support for writing to $INSTALL_FOOTNOTE during test installations to report custom footnote on generated graphs\npts-core: Add SuiteSparse, TinyXML, DUNE external dependencies\npts-core: Add opencl header external dependencies for more platforms\npts-core: Refresh OpenBenchmarking.org repository index data file once upon hitting missing test profile\npts_Graph: Improve precision of increments for graph results with sub-1 values\nphodevi: Protect against \"undefined\" memory strings from DMI data\nphodevi: Add Wayland Weston version detection\nphodevi: Detect gnome-shell-wayland\nphodevi: Add support for CPU node-count property for number of physical CPU nodes\n\nPhoronix Test Suite 4.8.3-Sokndal\n2 October 2013\n\npts-core: Fix openmpi on Gentoo external dependency\npts-core: Detect graphics comparison when GPU changes with audio string\npts-core: Don't use HTTPS on proxies when connecting to OpenBenchmarking.org\npts-core: Add VersionSpecific capability to external dependencies handling for package(s) that may only be in certain OS versions\npts-core: Ensure xscreensaver is deactivated\npts-core: Support toggling GNOME3 screensaver on GNOME 3.8+ where org.gnome.desktop.screensaver idle-activation-enabled -> org.gnome.desktop.session idle-delay\nphodevi: Fix for parsing long PCI string values\nphodevi: Improve Intel GPU model detection with recent xf86-video-intel DDX\n\nPhoronix Test Suite 4.8.2-Sokndal\n30 August 2013\n\npts-core: Fix for reporting environment variables to system notes on system graph table\npts-core: Fix OpenBenchmarking.org class issue for select code paths\n\nPhoronix Test Suite 4.8.1-Sokndal\n14 August 2013\n\npts-core: Fix OpenBenchmarking.org log-ins\n\nPhoronix Test Suite 4.8.0-Sokndal\n13 August 2013\n\npts-core: When PHP is missing, for apt-get/yum distributions report the likely command needed to run\npts-core: Don't prompt to install missing/failed tests when using the 'benchmark' command\nphodevi: Support for reading the Radeon DRM driver's current core/memory frequencies when DPM is enabled (Linux 3.11+)\nphodevi: Support for reading the top Radeon DRM driver core/memory frequency via dmesg when DPM is enabled (Linux 3.11+)\nphodevi: Support for reading the Radeon DRM driver's current GPU (vddc) voltage when DPM is enabled (Linux 3.11+)\nphoromatic: Updated module against latest upstream Phoromatic.com Server\n\nPhoronix Test Suite 4.8 Milestone 5\n6 August 2013\n\npts-core: Add php5-json as a dependency now on Debian packages since Ubuntu split it up and no longer in php5-cli\npts-core: Add support for reporting set kernel module parameters to notes on the system table graph\npts-core: Add support for reporting of important environment variables to notes on the system table graph\npts-core: Changes needed for modern Phoromatic\npts_Graph: Add new automated color chooser for line graph color selection\npts_Graph: Slight rework to code handling the remove of common words from result identifiers\nphodevi: Add support for Intel DRM driver's gt_max_freq_mhz for obtaining maximum GPU frequency on modern kernels\nphodevi: Add support for Intel DRM driver's gt_cur_freq_mhz for obtaining current GPU frequency on modern kernels\nphodevi: Only prepend AIB vendor to NVIDIA and AMD GPU strings\nphodevi: Add system.kernel-parameters property for reading kernel command line parameters\nphodevi: Add support for checking the __GL_FSAA_MODE environment variable\nphodevi: Add support for checking the __GL_LOG_MAX_ANISO environment variable\nphodevi: Add 0xc36400 super block for CephFS\nphodevi: Add unity-system-compositor version detection\n\nPhoronix Test Suite 4.8 Milestone 4\n24 July 2013\n\npts-core: Add initial support for test profile's downloads.xml to have a SHA256 hash for files\npts-core: Rename NO_MD5_CHECKS environment variable to NO_FILE_HASH_CHECKS\npts-core: Add PTS5 codenames from Tulskaya oblast / Tula Oblast Russian region\npts-core: Support fixes for Facebook HipHop Virtual Machine for PHP HHVM 2.1.0\npts-core: Fix text corruption bug with auto shortening of identifiers on multi-way comparisons\npts_Graph: Fix auto shortening when the first identifier is only one word\nphodevi: Support ECS and eVGA graphics card AIB vendor detection\n\nPhoronix Test Suite 4.8 Milestone 3\n19 July 2013\n\npts-core: Add few more cases of error detection on failed test install\npts-core: Round download size totals in the concise display mode for large files\npts-core: Add missing PreInstallMessage and PostInstallMessage to the OpenBenchmarking.org test profile schema and writer\npts-core: Allow test results to have \"secondary_linked_results\"\npts-core: Add initial support for frame latency / jitter secondary result graphs\npts_Graph: Assume any version of Google Chrome/Chromium can render SVG\npts_Graph: Only prepend 'v' to version string on graphs if first character is numeric\ntoggle-screensaver: Support doing \"xscreensaver-command -exit\" when needed\nphodevi: Add more stock fallback display modes\nphodevi: Ensure MB/GB are reported on OS X memory strings\nphodevi: Workaround Linux 3.10 kernel reporting bogus frequencies for scaling_max_freq on some Intel CPUs\nphodevi: Support prepending the graphics card / AIB vendor on GPU strings\n\nPhoronix Test Suite 4.8 Milestone 2\n6 July 2013\n\npts-core: Expand Mandriva Linux external dependency support to distributions having urpmi\npts-core: Add Apple OS X font paths for use by the GD graph renderer\npts-core: Add \"/usr/lib64/\" to the automated external dependency verification path\npts-core: Allow passing multiple test identifiers to remove with remove-from-result-file command\npts-core: Give a warning when the results viewer opens in the KDE Konqueror web-browser\nphodevi: Break operating system string at \"(\"\nphodevi: Don't return \"n/a\" from LSB release strings\nphodevi: IceWM window manager detection\nphodevi: Add gpu.temp safety check to prevent against AMD Catalyst OverDrive sending garbage\nphodevi: Fix for XRandR resolution query on XMir\nphodevi: Support using systemd-detect-virt as fallback for detecting Linux virtualization method\n\nPhoronix Test Suite 4.8 Milestone 1\n20 June 2013\n\npts-core: Don't show null error strings on failed test installations\npts-core: Allow test profiles to pass min/max data results through JSON to graphs using MIN_ and MAX_ prefixes\npts-core: Support displaying min/max data from the concise (default) display mode text output\nphodevi: MHz -> GHz fix for the cpu.freq sensor on Apple OS X\nphodevi: Add fallback support for using ioreg for calculating sys.power power draw on Apple OS X\nphodevi: Support reporting multiple monitor models from Xorg.0.log\n\nPhoronix Test Suite 4.6.1-Utsira\n6 June 2013\n\npts-core: Add ONLY_TEST_TYPES environment variable for skipping test profiles that don't belong to a certain hardware type\npts-core: Ensure extract-from-result-file opens the proper HTML web-browser\npts-core: Ensure copy-run-in-result-file opens the proper HTML web-browser\npts-core: Ensure reorder-result-file opens the proper HTML web-browser\npts-core: Ensure rename-identifier-in-result-file opens the proper HTML web-browser\npts-core: Ensure remove-from-result-file opens the proper HTML web-browser\npts-core: Reworked handling of browser launching in batch mode\npts-core: Launch the web browser to display results when using internal-run mode\nphodevi: Add Haswell BMI2 detection\nphodevi: Support vm_stat with the memory.usage sensor, works on OS X\nphodevi: Add new network.usage sensor for Apple OS X contributed by ESET\n\nPhoronix Test Suite 4.6.0-Utsira\n21 May 2013\n\nphodevi: Report CPU scaling driver along side the CPU scaling governor\n\nPhoronix Test Suite 4.6 Milestone 2\n16 May 2013\n\npts-core: Support compiler masking on short binaries\npts-core: More advanced detection of compiler flags within the compiler masking process\npts-core: DragonFlyBSD external dependency packaging updates\npts-core: Various fixes\nphodevi: Fix for cpu.freq sensor reading on Apple OS X\n\nPhoronix Test Suite 4.6 Milestone 1\n11 April 2013\n\npts-core: Official support for Facebook's HipHop HHVM PHP\npts-core: Introduce new pts_define interface\npts-core: Add debug-self-test option for running a self-hosting PHP/PTS performance test\npts-core: Support PHP 5.4's cli_set_process_title() function\npts-core: For now don't use PHP CURL on HipHop HHVM due to issues\npts-core: Ubuntu 13.04's sudo seems to have problems with the external dependency handling\npts-core: Add internal-run command for running benchmarks in semi-automated manner and without uploading data to OpenBenchmarking.org\nphodevi: Fix for memory reporting on OS X\nphodevi: Improved LLVM Clang compiler version detection with modern Apple Xcode\nphodevi: Improved Intel Linux GPU overclocking frequency detection\nphodevi: Fix for detecting new (319.xx) NVIDIA Linux driver X.Org driver\n\nPhoronix Test Suite 4.4.1-Forsand\n14 March 2013\n\npts-core: Add the arm-linux-gnueabihf library directory for PTS External Dependency checks\npts-core: Add SKIP_ALL_TEST_SUPPORT_CHECKS environment variable\npts-core: Fix screen resolution listening when the resolution fails to be detected through Phodevi\npts-core: Update openSUSE external dependencies\npts-core: Strip \"project\" from reported strings\nphodevi: Add support for detecting the Razor-qt desktop environment\nphodevi: No longer report the Catalyst marketing version number since the DDX is no longer reporting it reliably\nphodevi: Detect if the X.Org Server DDX module was unloaded\nphodevi: Reorder DDX driver fallback detection\nphodevi: Cleanse eCryptfs sig and cipher from showing in mounts file\nphodevi: Improve Linux memory RAM type detection\n\nPhoronix Test Suite 4.4.0-Forsand\n26 February 2013\n\npts-core: Improvement for detecting installed libraries for external dependency handling\npts-core: Address redundant dash handling within the result file save name\nphodevi: Support for detecting SurfaceFlinger (Google Android)\nphodevi: Ensure non-ASCII characters are removed from Phodevi properties\nphodevi: Support for reading the OpenGL Core Profile information via glxinfo\n\nPhoronix Test Suite 4.4 Milestone 3\n14 February 2013\n\npts-core: Incorporate xx.yy (of xx.yy.zz) test profile version string into test result comparison_hash\npts-core: Return contained tests hash for result files as a raw SHA1\npts-core: Improving passing of compiler flags/options to be reported on test result graphs\npts-core: Support specifying just relative include files, shared libraries, and command names for file check in PTS External Dependencies\npts-core: Faster PTS External Dependencies resolution and file checking\npts-core: Support for falling back right away to the generic file check lists for packages if not supplied by OS-specific list\npts-core: Add MacPorts PTS External Dependencies support for handling some package dependencies on Apple Mac OS X\npts-core: Allow 3D tests to run when LLVMpipe OpenGL is present regardless of the display driver loaded for the graphics card\nphodevi: Add file-system magic blocks for eCryptfs, AuFS, LustreFS, and Panasas PanFS\nphodevi: Add AVX2 (Advanced Vector Extensions 2) CPU instruction set detection\nphodevi: Support for detecting the new F2FS file-system\n\nPhoronix Test Suite 4.4 Milestone 2\n30 January 2013\n\npts-core: Improvement for detecting errors from failed test installations\npts-core: Allow \"Deprecated\" flag for ProfileStatus in the XML test profile schema\npts-core: Support for scanning test run log files automatically to look for errors when tests fail to execute\npts-core: Remove duplicate \"libtool\" PTS External Dependency\npts-core: Complete rewrite of the FreeBSD external dependency handling to use ports collection\npts-core: Enable BSD support for checking exit codes on test installation and test execution\npts-core: Various BSD support improvements\npts-core: Begin on DragonFlyBSD pkgsrc-based external dependency solution\nphodevi: Fix to improve Xfce version detection when Gtk-Warnings are thrown before the version string\nphodevi: Add Enlightenment desktop environment detection support\nphodevi: Add Consort Desktop Environment (GNOME Fork) detection support\n\nPhoronix Test Suite 4.4 Milestone 1\n23 January 2013\n\npts-core: Introduce 'common-dependencies' concept to PTS External Dependencies\npts-core: Fix reporting of some already installed dependencies\npts-core: Support for listing 'local/' tests from the list-supported-tests command\npts-core: Support for test profiles providing a 'support-check.sh' file\npts-core: Support for reporting the Graphics AA/AF values to the system notes table\npts-core: Add a public version of the TODO list\npts-core: Don't attempt copying install.log to install-failed.log on empty files\npts-core: Add fallback to allow matching an operating system to an external dependencies package list based upon the detected package manager\npts-core: When anonymous usage reporting is enabled, report test installation failures to OpenBenchmarking.org for analyzing problem\npts-core: Support for detecting common errors within test profile install failures and reporting the relevant information to the user\npts-core: When installing many tests and there are install failures, conveniently show the errors at the end\npts-core: When installing multiple tests, report any unknown test profiles/suites\npts-core: Faster loading of list-available-tests command by not forcing all test profile data be downloaded\npts-core: Progressively download OpenBenchmarking.org in list-available-suites command to display information faster\nphodevi: Improve Nouveau video RAM memory capacity detection on newer Linux kernels\nphodevi: Warning fix for Radeon GPU frequency detection\nphodevi: Drop \"special_settings_string\" support\nphodevi: Support for checking if the Gallium3D anti-aliasing level was overrode using GALLIUM_MSAA environment variable\n\nPhoronix Test Suite 4.2.0-Randaberg\n20 December 2012\n\npts-core: Fix SVG render detection on Firefox/Gecko 17.0\npts-core: Fix for breaking quoted args with internal spaces (reported by _rubio_)\npts-core: Add glibc-static to build-utilities external dependency on Fedora\npts-core: Fix for using the SKIP_TESTS environment variable causing a fatal error\npts-core: Phoronix Test Suite 4.4 is codenamed Forsand\nphodevi: Improved detection of power consumption from batteries in certain Linux configurations\n\nPhoronix Test Suite 4.2 Milestone 3\n22 November 2012\n\npts-core: Don't report null times for estimated run-time\nphodevi: Support for determining the build configuration on LLVM 3.2 where llvm-ld is llvm-link\nphodevi: Hard fall-back support for detecting the xf86-video-modesetting driver usage\ntoggle_screensaver: Disable blanking of the terminal screen when running tests\n\nPhoronix Test Suite 4.2 Milestone 2\n22 October 2012\n\npts-core: Add list-recommended-tests option for providing subsystem test recommendations based upon OpenBenchmarking.org popularity/usage\npts-core: Add auto-compare option for automatically determining relevant OpenBenchmarking.org result comparisons based upon software/hardware\npts-core: Allow passing test profile names to auto-compare to seed it with the test(s) you wish to use for comparison\npts-core: OpenBenchmarking.org now supports system log payload sizes up to 2MB\npts-core: Object-ify PTS external dependency handling\nphodevi: Split some functions into new phodevi_base class\n\nPhoronix Test Suite 4.2 Milestone 1\n8 October 2012\n\npts-core: Support download caches at /media/*/*/download-cache/\npts-core: Support OPENGL_DRIVER as a run-time variable\npts-core: For external dependency handling, treat Linaro as Ubuntu\npts-core: Check for null distribution-specific external dependency package names\npts-core: Formatting improvements to result-file-to-text output\npts-core: Add openssl-development as a new test external dependency\npts-core: Don't warn on out-of-date test profiles when being run in batch mode\nphodevi: Support for reading the VirtualBox version of Beta/RC versions\nphodevi: Better support detection for Exynos ARM cores\nphodevi: Initial support for reading node power over IPMI\nphodevi: Initial support for reading core temperature over IPMI\nphodevi: On Linux attempt to determine the install RAM's vendor and product part number\ntoggle_screensaver: Support for module suspending the Xfce4 desktop screensaver using xfconf-query\npts_Graph: Fix for vertical/rotated text in SVG -> GD translation\n\nPhoronix Test Suite 4.0.1\n21 August 2012\n\npts-core: Allow shortened test profile versions inputted by user to be expanded to matching latest version in stream\npts-core: Allow shortened test suite versions inputted by user to be expanded to matching latest version in stream\npts-core: Add list-unsupported-tests option for debugging purposes\npts-core: Add subversion as a PTS External Dependency\npts-core: Add git as a PTS External Dependency\npts-core: Add superlu as a PTS External Dependency\npts-core: Add libtool as a PTS External Dependency\npts-core: Hash within the result file all of the contained tests\npts-core: Support for anonymous usage reporting of test installation times to OpenBenchmarking.org\nphodevi: Fix memory RAM DIMM count detection in select configurations\nphodevi: Intel GPU string reporting improvement\nphodevi: Support for detecting multiple GPUs on Apple OS X\nphodevi: Support for detecting Gallium3D XA\nphodevi: Support for llvm-link on LLVM 3.2svn\n\nPhoronix Test Suite 4.0.0-Suldal\n23 July 2012\n\npts-core: Initial implementation of the PTS4 Local Results Viewer\npts-core: Initial command of ob-test-profile-analyze\npts-core: Fix for installing Ubuntu external dependencies in a headless mode\npts-core: Disable webui since it won't be ready until PTS 4.2\npts-core: External dependencies fix for SUSE Linux Enterprise Server 11\nphodevi: Additional fall-back support when GPU driver doesn't expose all standard mode-setting modes\nphodevi: Support for detecting and reading the version of the Cinnamon Desktop Environment\ntimed_screenshot: Overhaul of the timed screenshot PTS module\ntimed_screenshot: Compress PNG images\n\nPhoronix Test Suite 4.0 Milestone 4\n29 June 2012\n\npts-core: Support download caches at /run/media/*/*/download-cache/\npts-core: Set SKIP_TEST_SUPPORT_CHECKS=1 environment variable for debugging purposes to run tests on unsupported platforms\npts_Graph: Only render as much room for pts_OverViewGraph as there are for what will be rendered (bar graph values)\nphodevi: Ensure DVD drives don't get reported on BSD operating systems when requesting disk drives\nphodevi: Improve graphics processor detection on Solaris 11 11/11 for non-NVIDIA GPUs\nsystem_monitor: Add support for handling i915_energy monitor reading in microJoules for each test run\nsystem_monitor: Place timer support for individual test runs within the module\n\nPhoronix Test Suite 4.0 Milestone 3\n22 May 2012\n\npts-core: Reformat user configuration input on test run\npts-core: Improve no-network support handling\npts-core: Streamline detailed-system-info collection\npts-core: Invalid command improvements\npts-core: Various alterations\npts-core: Make greater use of trigger_error\npts-core: Generate more relevant default result identifier strings based on subsystems under test on empty input\nphodevi: Support to attempt to detect the file-system underneath ecryptfs\npts-core: Debian control script update\n\nPhoronix Test Suite 4.0 Milestone 2\n29 April 2012\n\npts-core: Better recognize some open-source vs. closed-source graphics card/driver combination comparisons\npts-core: Fix potential crash in list-test-usage command\npts-core: Support for detecting FSGSBASE and RDRAND on Intel Ivy Bridge\npts-core: When detecting a CPU comparison, report the detailed CPU system table information\npts-core: When detecting a GPU/OpenGL comparison, report the detailed GPU system table information\npts-core: Fix PRESET_OPTIONS failing when specifying an option value rather than its index\npts-core: Archive vdpauinfo when available\nphodevi: Detection support for Intel IOC (Intel Offline Compiler) OpenCL SDK\nphodevi: Support for detecting GLAMOR (Intel OpenGL-accelerated X.Org Driver) acceleration\npts_Graph: Fix rounding issue on pts tables that are very wide\npts_Graph: Add SideViewTable\ndocumentation: Add a basic text README to the root phoronix-test-suite directory\n\nPhoronix Test Suite 4.0 Milestone 1\n12 April 2012\n\npts-core: Add AutoSortRunQueue option that by default automatically sorts the test execution queue to run similar tests together\npts-core: Expose more verbose information within detailed-system-info command\npts-core: Remove recover-run command since with new PTS4 changes the finish-run command will provide the same functionality\npts-core: Track the CPU scaling governor configuration between test runs\npts-core: Report 2D acceleration information to system table report on graphics test runs\npts-core: Support for showing test notes on multi-way comparisons\npts-core: Fix compatibility with the new pts_Graph renderer back-end for result-file-to-pdf option\npts-core: Add p7zip as a possible external dependency\npts-core: When running OpenCL tests, report the number of available compute cores\npts_Graph: Begin work on PHP 5.4 \"webui\" option (currently far from incomplete/experimental)\npts_Graph: Tweak spacing on pts_Table\npts_Graph: Re-factor most text vertical offsets to not use dominant-baseline since Opera still doesn't support this SVG attribute properly\npts_Graph: Begin unifying the Phoronix Test Suite and OpenBenchmarking.org theme\npts_Graph: Fix for emitted GD poly-lines being always black\npts_Graph: Begin work on block diagram graph (currently incomplete/experimental)\nphodevi: Remove support for the deprecated HAL Linux fall-backs\nphodevi: LLVM compiler reporting build configuration enhancements\nphodevi: Support for reporting multiple mmcblk* disk devices\nphodevi: Report /sys/hypervisor/type as a system layer\nphodevi: Fix LXDE version detection\nphodevi: Support for reporting the Openbox version\nphodevi: Read Nouveau clock current frequencies rather than maximum frequencies (performance_level)\nphodevi: Initial implementation of the Phodevi VFS (Virtual File-System; Still A Work In Progress)\ngraphics_event_checker: Override NVIDIA SyncToVBlank so it's always disabled\nsystem_monitor: Allow performance per Watt to be automatically calculated if PERFORMANCE_PER_WATT is set\n\n###\n\nFor the change-log from older Phoronix Test Suite releases, view the Phoronix Test Suite Git repository\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tCopyright (C) 2021, Phoronix Media\n\tCopyright (C) 2021, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass pts_env\n{\n\tprotected static $overrides = array();\n\tprotected static $env_vars = array(\n\t\t'NO_COLOR' => array(\n\t\t\t'description' => 'This option when enabled will force-disable the CLI/TUI text coloring. By default the Phoronix Test Suite will attempt to use CLI/TUI text colors and bolding of text for supported terminals.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('all'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'TERMINAL_WIDTH' => array(\n\t\t\t'description' => 'This option is used for overriding the detected default of the terminal width for the CLI/TUI interface.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('all'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t),\n\t\t'PHODEVI_SANITIZE' => array(\n\t\t\t'description' => 'This option can be used for stripping out part of a string on Phodevi (Phoronix Device Interface) hardware/software properties. Namely around the reported hardware/software information in result files if wanting any values / portions of strings stripped out from that information, such as for confidential hardware strings or other privacy concerns, PHODEVI_SANITIZE can be set. The value will be removed from read Phodevi hardware/software properties if set. Multiple strings to search for can be set by delimiting with a comma. If wanting to limit the sanitization to a particular property, the property value can be specified such as [property]=[value] to sanitisze like a value of \"motherboard=ABCVENDOR\" or CPU=ENGINEERING-SAMPLE to delete those strings rather than simply the string to remove that will look for matches in any property.\"',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('all'),\n\t\t\t'value_type' => 'string',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t'onchange' => 'phodevi::set_sanitize_string',\n\t\t\t),\n\t\t'PTS_SILENT_MODE' => array(\n\t\t\t'description' => 'This option when enabled will yield slightly less verbose Phoronix Test Suite terminal output by silencing unnecessary messages / prompts.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('all'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'PTS_DISPLAY_MODE' => array(\n\t\t\t'description' => 'If you wish to load a non-default display mode for a single instance, specify the mode in this variable as an alternative to adjusting the user configuration file.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('all'),\n\t\t\t'value_type' => 'enum',\n\t\t\t'enum' => array('BASIC', 'BATCH', 'CONCISE', 'SHORT', 'DEFAULT'),\n\t\t\t),\n\t\t'NO_PHODEVI_CACHE' => array(\n\t\t\t'description' => 'This option will disable use of the built-in Phodevi (Phoronix Device Interface) cache of system software/hardware details. When enabled, the information is not cached and will be re-computed on each query. This is mainly useful for debugging purposes.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('all'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'PTS_TEST_INSTALL_ROOT_PATH' => array(\n\t\t\t'description' => 'This option can be used for overriding where tests are installed to on the system. An absolute writable directory path can be the value if wanting to override the default (or user configuration file specified) test installation directory path.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('install', 'benchmark', 'stress_run'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'TEST_RESULTS_NAME' => array(\n\t\t\t'description' => 'This option can be used for specifying the result file name for saving the test/benchmark results automatically to the given name.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark', 'stress_run'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'TEST_RESULTS_IDENTIFIER' => array(\n\t\t\t'description' => 'This option can be used for specifying the result identifier for distinguishing this run within the saved result file.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark', 'stress_run'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'TEST_RESULTS_DESCRIPTION' => array(\n\t\t\t'description' => 'This option can be used for specifying the result file description for saving that string and not be prompted for providing a description during the test execution process.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark', 'stress_run'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'PTS_EXTRA_SYSTEM_LOGS_DIR' => array(\n\t\t\t'description' => 'By default the Phoronix Test Suite collects common system logs (cpuinfo, lscpu, dmesg) during the benchmarking process when saving test results. If wanting to collect additional, arbitrary system log files specific to your operating environment or for other niche system information, this option can be set as a path to a directory containing such log files. Prior to running the Phoronix Test Suite simply set PTS_EXTRA_SYSTEM_LOGS_DIR to the directory where any files should be captured from following test completion.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'string',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'TEST_EXECUTION_SORT' => array(\n\t\t\t'description' => 'This option can be used for controlling the sort order that the test profiles / benchmarks are run in, whether sorted or not and in what manner.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'enum',\n\t\t\t'enum' => array('none', 'random', 'dependencies', 'test-estimated-time', 'test-estimated-time-desc', 'test', 'default'),\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'TEST_EXEC_PREPEND' => array(\n\t\t\t'description' => 'This option can be used if wanting to specify a binary (e.g. sudo, cgroup or other resource limiting binaries or performance counters) to be called as the binary pre-pended prior to running a test profile binary/script. This option is namely used for specialized use-cases.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'FORCE_TIMES_TO_RUN' => array(\n\t\t\t'description' => 'This option can be used to override the default number of times a given test is run. Rather than being specified by the individual test profile, FORCE_TIMES_TO_RUN allows for specifying the number of times to run each benchmark.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'FORCE_MIN_TIMES_TO_RUN' => array(\n\t\t\t'description' => 'This option is similar to FORCE_TIMES_TO_RUN but is used for specifying the minimum possible number of times to run. Unlike FORCE_TIMES_TO_RUN, the run count can still exceed this value if the deviation between results or other factors are too high.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'FORCE_MIN_TIMES_TO_RUN_CUTOFF' => array(\n\t\t\t'description' => 'Used in conjunction with the FORCE_MIN_TIMES_TO_RUN, the FORCE_MIN_TIMES_TO_RUN_CUTOFF can be used for specifyingg the amount of time (in minutes) before foregoing additional runs. This allows cutting off the testing early if this time threshold has been reached.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t),\n\t\t'FORCE_ABSOLUTE_MIN_TIMES_TO_RUN' => array(\n\t\t\t'description' => 'This option is similar to FORCE_MIN_TIMES_TO_RUN but is *absolute* in ensuring each test will run at least that number of times and not subject to change of any timed cut-offs or other factors.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t),\n\t\t'FORCE_TIMES_TO_RUN_MULTIPLE' => array(\n\t\t\t'description' => 'This option is similar to FORCE_TIMES_TO_RUN but the value is a multiple for how many times the test profile should be run respective to its default value. If the value is set to 2 and a given test profile by default is set to run 3 times, it would now instead be run a total of 6 times. This can be used for increasing the statistical significance of test results by using a multiple of the default rather than a static number as is the case with FORCE_TIMES_TO_RUN.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t),\n\t\t'IGNORE_RUNS' => array(\n\t\t\t'description' => 'This option can be used if wanting the Phoronix Test Suite to automatically toss out a specified result position when running a test profile multiple times. E.g. setting this value to 1 will toss out automatically the first run of each test profile or a value of 3 will toss out the third run of a given test. This overrides the IgnoreRuns option also available to individual test profiles. Multiple values for runs to ignore can be specified by delimiting with a comma.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'FORCE_MIN_DURATION_PER_TEST' => array(\n\t\t\t'description' => 'This option can be used to specify the minimum number of times to run a given benchmark. Rather than relying on a static times-to-run count, the test will keep looping until the time has exceeded this number (in minutes).',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'PRESET_OPTIONS' => array(\n\t\t\t'description' => 'PRESET_OPTIONS can be used for seeding the values of test profile run options from the environment (though the preferred approach for pre-configuring tests in an automated manner would be by constructing your own local test suite).  For setting any test option(s) from an environment variable rather than being prompted for the options when running a test. Example: \"PRESET_OPTIONS=\\'stream.run-type=Add\\' phoronix-test-suite benchmark stream\".',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'PRESET_OPTIONS_VALUES' => array(\n\t\t\t'description' => 'This option is similar to PRESET_OPTIONS and uses the same syntax but rather than seeding the selected run option it uses the value verbatim as for what is passed to the test profile run option.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'PTS_CONCURRENT_TEST_RUNS' => array(\n\t\t\t'description' => 'This option is used in the stress run/benchmarking mode to indicate the number of tests to run concurrently as part of the stress run process.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('stress_run'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t),\n\t\t'TOTAL_LOOP_TIME' => array(\n\t\t\t'description' => 'This option is used to specify the amount of time (in minutes) to loop the testing during the Phoronix Test Suite stress run or normal benchmarking process.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('stress_run', 'benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t),\n\t\t'TOTAL_LOOP_COUNT' => array(\n\t\t\t'description' => 'This option is used to specify a multiple if wishing to run each test multiple times rather than just once per saved result file.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t),\n\t\t'LIMIT_ELAPSED_TEST_TIME' => array(\n\t\t\t'description' => 'This option can be used for limiting the amount of time the benchmarking process runs. The value specified is the number of minutes to allow for benchmarking. After a test finishes if that number of minutes has been exceeded, the testing process will abort early and not run any remaining tests.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'DONT_BALANCE_TESTS_FOR_SUBSYSTEMS' => array(\n\t\t\t'description' => 'If this value is true, the Phoronix Test Suite stress-run manager will not attempt to distribute the selected test(s) among available hardware subsystems. For stress runs with tests covering multiple subsystems (e.g. CPU, GPU, RAM), the default behavior is try to ensure the tests to run concurrently are as balanced across the tested subsystems as possible.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('stress_run'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'DONT_TRY_TO_ENSURE_TESTS_ARE_UNIQUE' => array(\n\t\t\t'description' => 'When running in the stress-run mode, the default behavior will try to ensure when tests are running concurrently that as many unique tests as possible are being run. Setting this value to try will avoid that check and just attempt to truly randomize the tests being run concurrently without regard for trying to avoid duplicates.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('stress_run'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'OUTPUT_FILE' => array(\n\t\t\t'description' => 'When exporting a result file, this option can be used for specifying the file name / file path and name of where to save the exported result file to rather than assuming the user home directory.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('result_output'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'OUTPUT_DIR' => array(\n\t\t\t'description' => 'When exporting a result file, this option can be used for specifying the writable directory path where the exported result files should be saved to. The file-name will be automatically generated.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('result_output'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'GRAPH_HIGHLIGHT' => array(\n\t\t\t'description' => 'If automatically generating an HTML or PDF result file from the command-line and wanting to highlight desired result identifier(s), GRAPH_HIGHLIGHT can be set to a comma delimited list of result identifiers to highlight / color differently than the rest.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('result_output'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'SORT_BY' => array(\n\t\t\t'description' => 'This option can be used for specifying the sort order for commands like auto-sort-result-file whether to sort by identifier name, test length, etc.',\n\t\t\t'default' => 'identifier',\n\t\t\t'usage' => array('auto_sort_result_file'),\n\t\t\t'value_type' => 'enum',\n\t\t\t'enum' => array('date', 'date-asc', 'date-desc', 'identifier'),\n\t\t\t),\n\t\t'NO_HTTPS' => array(\n\t\t\t'description' => 'Enable this option if wanting the Phoronix Test Suite when downloading resources to attempt to only use HTTP without any HTTPS connections. Note: some downloads may fail for servers that only support HTTPS.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('all'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'NO_DOWNLOAD_CACHE' => array(\n\t\t\t'description' => 'Enable this option if the Phoronix Test Suite should not attempt to discover and use any local/remote Phoronix Test Suite download cache when installing tests and attempting to find those files locally or on a LAN resource.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('install'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'NO_FILE_HASH_CHECKS' => array(\n\t\t\t'description' => 'Enable this option if you want to skip the MD5 / SHA256 file hash checks after downloading files with known MD5/SHA256 hashsums for verification. This is namely useful for select debugging scenarios and other situations where a file may have been trivially changed / re-packaged and wishing to still install a test even though the hash no longer matches until the test profile has been updated.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('install'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'SKIP_TEST_SUPPORT_CHECKS' => array(\n\t\t\t'description' => 'This debugging/validation option will have the Phoronix Test Suite skip any test support checks for a test profile (architecture compatibility, OS compatibility, etc) and just assume all tests are supported.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('install', 'benchmark'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'NO_COMPILER_MASK' => array(\n\t\t\t'description' => 'By default the Phoronix Test Suite attempts to determine the intended system code compilers (namely C / C++ / Fortran) and to intercept the arguments being passed to them during test installation in order to record the prominent compiler flags being used. If this behavior causes problems for your system, NO_COMPILER_MASK can be enabled for debugging purposes to avoid this compiler intercepting/symlinking behavior.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('install'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'NO_EXTERNAL_DEPENDENCIES' => array(\n\t\t\t'description' => 'Enabling this option will have the Phoronix Test Suite skip over attempting to detect and install any system/external dependencies needed to run desired test profiles. This should just be used in case of testing/evaluation purposes and may leave some tests unable to successfully build/install.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('install'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'SKIP_EXTERNAL_DEPENDENCIES' => array(\n\t\t\t'description' => 'Rather than NO_EXTERNAL_DEPENDENCIES to outright disable the Phoronix Test Suite external dependency handling, SKIP_EXTERNAL_DEPENDENCIES can be used with a value of a comma separated list of specific external dependencies to avoid. This is mostly useful for any external dependencies that may be out of date or fail to install on your platform.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('install'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'PTS_DOWNLOAD_CACHE' => array(\n\t\t\t'description' => 'PTS_DOWNLOAD_CACHE can be used for setting a path to a directory on the system containing a Phoronix Test Suite download cache if located outside one of the default locations.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('install'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'SKIP_TESTS' => array(\n\t\t\t'description' => 'SKIP_TESTS will skip the test installation and execution of any test identifiers specified by this option. Multiple test identifiers can be specified, delimited by a comma.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('install', 'benchmark'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'SKIP_TESTS_HAVING_ARGS' => array(\n\t\t\t'description' => 'SKIP_TESTS_HAVING_ARGS will skip the test installation and execution of any tests where the specified test arguments match the given string. E.g. if wanting to skip all Vulkan tests in a result file but run just the OpenGL tests or similar where wanting to limit the tests being run from within a result file. Multiple values can be specified when delimited by a comma.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('install', 'benchmark'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'SKIP_TESTING_SUBSYSTEMS' => array(\n\t\t\t'description' => 'This option is similar to SKIP_TESTS but allows for specifying hardware subsystems (e.g. Graphics) to skip from installing/running any test profiles beloning to that subsystem type. Multiple subsystems can be specified when delimited by a comma.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('install', 'benchmark'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'PTS_MODULE_SETUP' => array(\n\t\t\t'description' => 'This option can be used for seeding a module\\'s settings when running the phoronix-test-suite module-setup command. An example would be: \"PTS_MODULE_SETUP=\\'phoromatic.remote_host=http://www.phoromatic.com/; phoromatic.remote_account=123456; phoromatic.remote_verifier=ABCD\\' phoronix-test-suite module-setup phoromatic\".',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('modules'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'PTS_MODULES' => array(\n\t\t\t'description' => 'This option can be used for specifying a comma-separated list of Phoronix Test Suite modules to load at start-time, complementary to the modules specified in the user configuration file. PTS_MODULES is namely used for development purposes or wanting to temporarily enable a given module.',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('modules'),\n\t\t\t'value_type' => 'string',\n\t\t\t),\n\t\t'PTS_IGNORE_MODULES' => array(\n\t\t\t'description' => 'Enabling this option can be used for temporarily disabling Phoronix Test Suite modules from being loaded on a given run. This is primarily for debugging purposes.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('modules'),\n\t\t\t'value_type' => 'bool',\n\t\t\t),\n\t\t'TEST_TIMEOUT_AFTER' => array(\n\t\t\t'description' => 'When this variable is set, the value will can be set to \"auto\" or a positive integer. The value indicates the number of minutes until a test run should be aborted, such as for a safeguard against hung/deadlocked processes or other issues. Setting this to a high number as a backup would be recommended for fending off possible hangs / stalls in the testing process if the test does not quit. If the value is \"auto\", it will quit if the time of a test run exceeds 3x the average time it normally takes the particular test to complete its run. In the future, auto might be enabled by default in a future PTS release. This functionality requires system PHP PCNTL support (i.e. no Windows support).',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t'module' => 'test_timeout',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'MONITOR' => array(\n\t\t\t'description' => 'This option can be used for system sensor monitoring during test execution. The Phoronix Test Suite system_monitor module can monitor various exposed sensors and record them as part of the result file and present them as additional graphs / metrics in the result viewer. The exposed sensors varies by platform hardware/software. This functionality also requires PHP PCNTL support and thus is not available for some platforms (i.e. Windows).',\n\t\t\t'default' => '',\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'enum_multi',\n\t\t\t'enum' => array('all', 'cpu.peak-freq', 'cpu.temp', 'cpu.power', 'cpu.usage', 'gpu.freq', 'gpu.power', 'gpu.temp', 'hdd.temp', 'memory.usage', 'swap.usage', 'sys.power', 'sys.temp'),\n\t\t\t'module' => 'system_monitor',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'LINUX_PERF' => array(\n\t\t\t'description' => 'This option allows providing additional complementary per-test graphs looking at various Linux perf subsystem metrics such as cache usage, instructions executed, and other metrics. This requires you to have Linux\\'s perf user-space utility already installed and performance counter access.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'bool',\n\t\t\t'module' => 'linux_perf',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'TURBOSTAT_LOG' => array(\n\t\t\t'description' => 'This option allows attaching \"turbostat\" outputs to the end of archived benchmark/test log files if interested in the Linux TurboStat information. This assumes you have turbostat available on the Linux system(s) and have permissions (root) for running turbostat.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'bool',\n\t\t\t'module' => 'turbostat',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'WATCHDOG_SENSOR' => array(\n\t\t\t'description' => 'This option will enable the watchdog module that checks system sensor values pre/interim/post benchmark execution. If the selected sensor(s) exceed the static threshold level, testing will be paused before continuing to any additional tests so that the system can sleep. Ideally this will allow the system to return to a more suitable state before resuming testing after the sensor value is back below the threshold or after a pre-defined maximum time limit to spend sleeping. This module is mostly focused on pausing testing should system core temperatures become too elevated to allow time for heat dissipation.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'enum_multi',\n\t\t\t'enum' => array('cpu.temp', 'gpu.temp', 'hdd.temp', 'sys.temp'),\n\t\t\t'module' => 'watchdog',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'WATCHDOG_SENSOR_THRESHOLD' => array(\n\t\t\t'description' => 'Used in conjunction with the WATCHDOG_SENSOR option, the WATCHDOG_SENSOR_THRESHOLD specifies the threshold for the sensor reading when the testing should be paused (e.g. the Celsius cut-off temperature).',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t'module' => 'watchdog',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'WATCHDOG_MAXIMUM_WAIT' => array(\n\t\t\t'description' => 'Used in conjunction with the WATCHDOG_SENSOR option, this is the maximum amount of time to potentially wait when the watchdog is triggered for surpassing the threshold value. The value is the maximum number of minutes to wait being above the threshold.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t'module' => 'watchdog',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'REMOVE_TESTS_OLDER_THAN' => array(\n\t\t\t'description' => 'This option with the cleanup module can be used for automatically un-installing/removing installed tests if they have not been run in a period of time. The value for REMOVE_TESTS_OLDER_THAN is the number of days the test can be installed without running until this module will clean-up/remove older tests.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'positive_integer',\n\t\t\t'module' => 'cleanup',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t'REMOVE_TESTS_ON_COMPLETION' => array(\n\t\t\t'description' => 'When this option is set to true, installed test profiles will be automatically removed/uninstalled when they are no longer in the current test execution queue. This is used for saving disk space / resources by automatically removing installed tests after they have been executed. For more persistent behavior is the RemoveTestInstallOnCompletion option within the Phoronix Test Suite user configuration file.',\n\t\t\t'default' => false,\n\t\t\t'usage' => array('benchmark'),\n\t\t\t'value_type' => 'bool',\n\t\t\t'advertise_in_phoromatic' => true,\n\t\t\t),\n\t\t);\n\n\tpublic static function read($name, &$overrides = null, $fallback_value = false)\n\t{\n\t\tif(isset(self::$overrides[$name]))\n\t\t{\n\t\t\treturn self::$overrides[$name];\n\t\t}\n\n\t\treturn getenv($name);\n\t}\n\tpublic static function set($name, $value)\n\t{\n\t\tif(!isset(self::$env_vars[$name]))\n\t\t{\n\t\t\t// trigger_error($name . ' is not a recognized Phoronix Test Suite environment variable.', E_USER_NOTICE);\n\t\t}\n\t\tif(PTS_IS_CLIENT && isset(self::$env_vars[$name]['module']) && !pts_module_manager::is_module_attached(self::$env_vars[$name]['module']))\n\t\t{\n\t\t\t// Ensure module is loaded\n\t\t\tpts_module_manager::attach_module(self::$env_vars[$name]['module']);\n\t\t}\n\t\tif(PTS_IS_CLIENT && isset(self::$env_vars[$name]['onchange']) && !empty(self::$env_vars[$name]['onchange']) && is_callable(self::$env_vars[$name]['onchange']))\n\t\t{\n\t\t\t// Call the passed function with the value being set\n\t\t\tcall_user_func(self::$env_vars[$name]['onchange'], $value);\n\t\t}\n\n\t\tself::$overrides[$name] = $value;\n\t}\n\tpublic static function set_array($to_set, $clear_overrides = false)\n\t{\n\t\tif($clear_overrides)\n\t\t{\n\t\t\tself::$overrides = array();\n\t\t}\n\t\tforeach($to_set as $name => $value)\n\t\t{\n\t\t\tself::set($name, $value);\n\t\t}\n\t}\n\tpublic static function get_overrides()\n\t{\n\t\treturn self::$overrides;\n\t}\n\tpublic static function remove($name)\n\t{\n\t\tif(isset(self::$overrides[$name]))\n\t\t{\n\t\t\tunset(self::$overrides[$name]);\n\t\t}\n\t}\n\tpublic static function read_possible_vars($limit = false)\n\t{\n\t\t$possible_vars = self::$env_vars;\n\t\tif($limit)\n\t\t{\n\t\t\tif($limit == 'phoromatic')\n\t\t\t{\n\t\t\t\t$limit = array('advertise_in_phoromatic' => true);\n\t\t\t}\n\t\t\tif(is_array($limit))\n\t\t\t{\n\t\t\t\tforeach($possible_vars as $key => $var_check)\n\t\t\t\t{\n\t\t\t\t\tforeach($limit as $index => $desired_value)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!isset($possible_vars[$key][$index]) || $possible_vars[$key][$index] != $desired_value)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tunset($possible_vars[$key]);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tksort($possible_vars);\n\t\treturn $possible_vars;\n\t}\n\tpublic static function get_documentation($for_terminal = true)\n\t{\n\t\t$docs = '';\n\t\tforeach(pts_env::read_possible_vars() as $var => $data)\n\t\t{\n\t\t\tif($for_terminal)\n\t\t\t{\n\t\t\t\t$docs .= PHP_EOL . pts_client::cli_just_bold($var);\n\t\t\t\tif(pts_env::read($var))\n\t\t\t\t{\n\t\t\t\t\t$docs .= ': ' . pts_client::cli_colored_text(pts_env::read($var), 'green', true);\n\t\t\t\t}\n\t\t\t\t$docs .= PHP_EOL;\n\t\t\t\t$docs .= pts_client::cli_just_italic($data['description']) . PHP_EOL;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$docs .= PHP_EOL . '<h2>' . $var . '</h2>' . PHP_EOL;\n\t\t\t\t$docs .= '<p><em>' . $data['description'] . '</em></p>' . PHP_EOL;\n\t\t\t}\n\n\t\t\tif(isset($data['default']) && !empty($data['default']))\n\t\t\t{\n\t\t\t\tif($for_terminal)\n\t\t\t\t{\n\t\t\t\t\t$docs .= pts_client::cli_just_bold('Default Value: ') . $data['default'] . PHP_EOL;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$docs .= '<p><strong>Default Value:</strong> ' . $data['default'] . '</p>' . PHP_EOL;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!$for_terminal)\n\t\t\t{\n\t\t\t\t$docs .= '<p>';\n\t\t\t}\n\t\t\tif(isset($data['value_type']) && !empty($data['value_type']))\n\t\t\t{\n\t\t\t\t$value_type = '';\n\t\t\t\tswitch($data['value_type'])\n\t\t\t\t{\n\t\t\t\t\tcase 'bool':\n\t\t\t\t\t\t$value_type = 'boolean (TRUE / FALSE)';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t$value_type = 'string';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'positive_integer':\n\t\t\t\t\t\t$value_type = 'positive integer';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'enum':\n\t\t\t\t\tcase 'enum_multi':\n\t\t\t\t\t\t$value_type = 'enumeration' . (isset($data['enum']) ? ' (' . implode(', ', $data['enum']) . ')' : '');\n\t\t\t\t\tif($data['value_type'] == 'enum_multi')\n\t\t\t\t\t{\n\t\t\t\t\t\t$value_type .= PHP_EOL . 'Multiple options can be supplied when delimited by a comma.';\n\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(!empty($value_type))\n\t\t\t\t{\n\t\t\t\t\t$docs .= 'The value can be of type: ' . $value_type . '.' . PHP_EOL;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(isset($data['usage']) && !empty($data['usage']))\n\t\t\t{\n\t\t\t\t$usages = array();\n\t\t\t\tforeach($data['usage'] as $u)\n\t\t\t\t{\n\t\t\t\t\tswitch($u)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase 'install':\n\t\t\t\t\t\t\t$usages[] = 'test installation';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'benchmark':\n\t\t\t\t\t\t\t$usages[] = 'test execution / benchmarking';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'stress_run':\n\t\t\t\t\t\t\t$usages[] = 'stress-run mode';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'result_output':\n\t\t\t\t\t\t\t$usages[] = 'result output generation';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'modules':\n\t\t\t\t\t\t\t$usages[] = 'modules';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!empty($usages))\n\t\t\t\t{\n\t\t\t\t\t$docs .= 'The variable is relevant for: ' . implode(', ', $usages) . '.' . PHP_EOL;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(isset($data['module']) && !empty($data['module']))\n\t\t\t{\n\t\t\t\t$docs .= 'The variable depends upon functionality provided by the Phoronix Test Suite module: ' . $data['module'] . '.' . PHP_EOL;\n\t\t\t}\n\t\t\tif(!$for_terminal)\n\t\t\t{\n\t\t\t\t$docs .= '</p>';\n\t\t\t}\n\t\t}\n\t\treturn $docs;\n\t}\n\tpublic static function get_html_options($limit = false, $preset_defaults = array())\n\t{\n\t\t$html = '';\n\t\tforeach(pts_env::read_possible_vars($limit) as $var => $data)\n\t\t{\n\t\t\t$html .= PHP_EOL . '<h3>' . $var . '</h3>' . PHP_EOL;\n\t\t\t$html .= '<p><em>' . $data['description'] . '</em></p>' . PHP_EOL;\n\n\t\t\t$default_value = isset($data['default']) && !empty($data['default']) ? $data['default'] : '';\n\t\t\tif(isset($_REQUEST[$var]))\n\t\t\t{\n\t\t\t\t$default_value = strip_tags($_REQUEST[$var]);\n\t\t\t}\n\t\t\telse if(isset($preset_defaults[$var]))\n\t\t\t{\n\t\t\t\t$default_value = $preset_defaults[$var];\n\t\t\t}\n\t\t\t$html .= '<p>';\n\n\t\t\t$enum = array();\n\t\t\tswitch((isset($data['value_type']) ? $data['value_type'] : ''))\n\t\t\t{\n\t\t\t\tcase 'bool':\n\t\t\t\t\t$enum = array('TRUE', 'FALSE');\n\t\t\t\t\t$default_value = strtoupper($default_value);\n\t\t\t\tcase 'enum':\n\t\t\t\t\tif(isset($data['enum']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$enum = $data['enum'];\n\t\t\t\t\t}\n\t\t\t\t\t$html .= '<select name=\"' . $var . '\"><option value=\"0\">[Not Set]</option>';\n\t\t\t\t\tforeach($enum as $e)\n\t\t\t\t\t{\n\t\t\t\t\t\t$html .= '<option value=\"' . $e . '\"' . (strtoupper($default_value) == strtoupper($e) ? ' selected=\"selected\"' : '') . '>' . $e . '</option>';\n\t\t\t\t\t}\n\t\t\t\t\t$html .= '</select>';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'enum_multi':\n\t\t\t\t\tif(isset($data['enum']))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!empty($default_value) && !is_array($default_value))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$default_value = explode($default_value, ',');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tforeach($data['enum'] as $e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$html .= '<input type=\"checkbox\" name=\"' . $var . '[]\" value=\"' . $e . '\" ' . (is_array($default_value) && in_array($e, $default_value) ? 'checked=\"checked\"' : '') . ' /> ' . $e . '<br />';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'positive_integer':\n\t\t\t\t\t$html .= '<input type=\"number\" min=\"0\" max=\"9999\" step=\"1\" name=\"' . $var . '\" value=\"' . $default_value . '\" />';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'string':\n\t\t\t\tdefault:\n\t\t\t\t\t$html .= '<input name=\"' . $var . '\" value=\"' . $default_value . '\" />';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$html .= '</p>';\n\t\t}\n\t\treturn $html;\n\t}\n\tpublic static function get_posted_options($limit = false)\n\t{\n\t\t$posted = array();\n\t\tforeach(pts_env::read_possible_vars($limit) as $var => $data)\n\t\t{\n\t\t\tif(isset($_REQUEST[$var]))\n\t\t\t{\n\t\t\t\tif(is_array($_REQUEST[$var]))\n\t\t\t\t{\n\t\t\t\t\tforeach($_REQUEST[$var] as &$rqv)\n\t\t\t\t\t{\n\t\t\t\t\t\t$rqv = strip_tags($rqv);\n\t\t\t\t\t}\n\t\t\t\t\t$v = implode(',', $_REQUEST[$var]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// TODO add more validation handling checks... then again, PTS client has its own validation of the env vars\n\t\t\t\t\t$v = strip_tags($_REQUEST[$var]);\n\t\t\t\t}\n\t\t\t\tif(!empty($v) && $v !== 0)\n\t\t\t\t{\n\t\t\t\t\t$posted[$var] = pts_strings::sanitize($v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $posted;\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2018, Phoronix Media\n\tCopyright (C) 2018, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass pts_phoroql\n{\n\tpublic static function evaluate_search_tree($tree, $join = 'AND', $callback = '')\n\t{\n\t\t$matches = false;\n\n\t\tforeach($tree as $i => $el)\n\t\t{\n\t\t\t$b = false;\n\t\t\tif($i === 'AND' || $i === 'OR')\n\t\t\t{\n\t\t\t\t$b = self::evaluate_search_tree($el, $i, $callback);\n\t\t\t}\n\t\t\telse if(isset($el['query']))\n\t\t\t{\n\t\t\t\t$b = call_user_func($callback, $el['query']);\n\t\t\t\tif($el['not'])\n\t\t\t\t{\n\t\t\t\t\t$b = !$b;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(is_array($el))\n\t\t\t{\n\t\t\t\t$b = self::evaluate_search_tree($el, $join, $callback);\n\t\t\t}\n\n\t\t\tif($join == 'AND')\n\t\t\t{\n\t\t\t\tif(!$b)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t$matches = true;\n\t\t\t}\n\t\t\telse if($join == 'OR')\n\t\t\t{\n\t\t\t\tif($b)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t$matches = $matches || $b;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn $matches;\n\t}\n\tpublic static function search_query_to_tree($query)\n\t{\n\t\t// TODO: very basic right now, work out nested expressions, etc\n\t\t$tree = array();\n\t\t$forming = '';\n\t\t$not = false;\n\n\t\t$words = explode(' ', $query);\n\t\tfor($i = 0, $l = count($words); $i < $l; $i++)\n\t\t{\n\t\t\tif(empty($words[$i]))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$is_last = ($i + 1) == $l;\n\t\t\t$next_word = !$is_last ? $words[($i + 1)] : false;\n\n\t\t\tswitch($words[$i])\n\t\t\t{\n\t\t\t\tcase 'AND':\n\t\t\t\tcase '&&':\n\t\t\t\t\tself::add_expression($tree, 'AND', $forming, $not);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'OR':\n\t\t\t\tcase '||':\n\t\t\t\t\tself::add_expression($tree, 'OR', $forming, $not);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'NOT':\n\t\t\t\t\t$not = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$forming .= $words[$i] . ' ';\n\t\t\t\t\tif($is_last)\n\t\t\t\t\t{\n\t\t\t\t\t\t//$forming .= $words[$i] . ' ';\n\t\t\t\t\t\tself::add_expression($tree, 'DONE', $forming, $not);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn $tree;\n\t}\n\tprotected static function add_expression(&$tree, $action, &$query, &$not)\n\t{\n\t\tif(empty($action) || empty($query))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\tstatic $last_expr;\n\t\tstatic $els;\n\t\tif($action != $last_expr)\n\t\t{\n\t\t\tif($action == 'DONE')\n\t\t\t{\n\t\t\t\t$els[] = array(\n\t\t\t\t\t'query' => trim($query),\n\t\t\t\t\t'not' => $not,\n\t\t\t\t\t);\n\t\t\t}\n\t\t\tif($last_expr != null && !empty($els))\n\t\t\t{\n\t\t\t\t$tree[] = array($last_expr => $els);\n\t\t\t}\n\t\t\telse if($action == 'DONE' && !empty($els))\n\t\t\t{\n\t\t\t\t$tree[] = $els;\n\t\t\t}\n\t\t\t$els = array();\n\t\t\tif($action == 'DONE')\n\t\t\t{\n\t\t\t\t$last_expr = null;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$last_expr = $action;\n\t\t\t}\n\t\t}\n\n\t\t$els[] = array(\n\t\t\t'query' => trim($query),\n\t\t\t'not' => $not,\n\t\t\t);\n\t\t$not = false;\n\t\t$query = null;\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2018 - 2022, Phoronix Media\n\tCopyright (C) 2018 - 2022, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass pts_result_viewer_embed\n{\n\tprotected $result_file;\n\tprotected $can_modify_results = false;\n\tprotected $can_delete_results = false;\n\tprotected $result_public_id;\n\tprotected $graph_export_handler = false;\n\tprotected $post_description_message = null;\n\tprotected $show_html_table_when_relevant = true;\n\tprotected $show_test_metadata_helper = true;\n\tprotected $include_page_print_only_helpers = true;\n\n\tpublic function __construct(&$result_file, $public_id = null)\n\t{\n\t\t$this->result_file = &$result_file;\n\t\t$this->result_public_id = $public_id;\n\t}\n\tpublic function allow_modifying_results($can_modify)\n\t{\n\t\t$this->can_modify_results = $can_modify;\n\t}\n\tpublic function allow_deleting_results($can_delete)\n\t{\n\t\t$this->can_delete_results = $can_delete;\n\t}\n\tpublic function set_graph_export_handler($handler)\n\t{\n\t\tif(is_callable($handler))\n\t\t{\n\t\t\t$this->graph_export_handler = $handler;\n\t\t}\n\t}\n\tpublic function graph_export_handler(&$raw)\n\t{\n\t\tif($this->graph_export_handler)\n\t\t{\n\t\t\treturn call_user_func($this->graph_export_handler, $raw);\n\t\t}\n\t}\n\tpublic function set_post_description_message($msg)\n\t{\n\t\t$this->post_description_message = $msg;\n\t}\n\tpublic function show_html_result_table($show)\n\t{\n\t\t$this->show_html_table_when_relevant = $show;\n\t}\n\tpublic function show_test_metadata_helper($show)\n\t{\n\t\t$this->show_test_metadata_helper = $show;\n\t}\n\tpublic function include_page_print_only_helpers($show)\n\t{\n\t\t$this->include_page_print_only_helpers = $show;\n\t}\n\tprotected function result_object_to_error_report(&$result_file, &$result_object, $i)\n\t{\n\t\t$html = '';\n\t\t$shown_args = false;\n\t\tforeach($result_object->test_result_buffer->buffer_items as &$bi)\n\t\t{\n\t\t\tif($bi->get_result_value() == null)\n\t\t\t{\n\t\t\t\tif(!$shown_args)\n\t\t\t\t{\n\t\t\t\t\t$html .= '<p><strong>' . $result_object->get_arguments_description() . '</strong></p>';\n\t\t\t\t\t$shown_args = true;\n\t\t\t\t}\n\t\t\t\t$bi_error = $bi->get_error();\n\t\t\t\tif($bi_error == null)\n\t\t\t\t{\n\t\t\t\t\t$bi_error = 'Test failed to run.';\n\t\t\t\t}\n\t\t\t\t$html .= '<p class=\"test_error\"><strong>' . $bi->get_result_identifier() . ':</strong> ' . strip_tags($bi_error) . '<br />';\n\n\t\t\t\tif($result_file->get_test_run_log_for_result($result_object, -2))\n\t\t\t\t{\n\t\t\t\t\t$html .= ' <a onclick=\"javascript:display_test_logs_for_result_object(\\'' . $this->result_public_id . '\\', \\'' . $i . '\\', \\'' . $bi->get_result_identifier() . '\\'); return false;\">View Test Run Logs</a> ';\n\t\t\t\t}\n\t\t\t\tif($result_file->get_install_log_for_test($result_object->test_profile, -2))\n\t\t\t\t{\n\t\t\t\t\t$html .= ' &nbsp; <a onclick=\"javascript:display_install_logs_for_result_object(\\'' . $this->result_public_id . '\\', \\'' . $i . '\\', \\'' . $bi->get_result_identifier() . '\\'); return false;\">View Test Installation Logs</a> ';\n\t\t\t\t}\n\t\t\t\t$html .= '</p>';\n\t\t\t}\n\t\t}\n\n\t\treturn $html;\n\t}\n\tpublic function get_html()\n\t{\n\t\t$PAGE = null;\n\t\t$result_file = &$this->result_file;\n\t\tself::process_result_modify_pre_render($result_file, $this->can_modify_results, $this->can_delete_results);\n\t\t$result_file->avoid_duplicate_identifiers();\n\t\t$extra_attributes = null;\n\t\t$html_options = self::get_html_options_markup($result_file, $_REQUEST, $this->result_public_id, $this->can_delete_results);\n\t\tself::process_request_to_attributes($_REQUEST, $result_file, $extra_attributes);\n\t\t$PAGE .= self::get_html_sort_bar($result_file, $_REQUEST);\n\t\t$PAGE .= '<h1 id=\"result_file_title\" placeholder=\"Title\">' . pts_strings::sanitize($result_file->get_title()) . '</h1>';\n\t\t$PAGE .= '<p id=\"result_file_desc\" placeholder=\"Description\">' . str_replace(PHP_EOL, '<br />', pts_strings::sanitize($result_file->get_description())) . '</p>';\n\t\t$PAGE .= '<div id=\"result-settings\">';\n\t\tif($this->can_modify_results)\n\t\t{\n\t\t\t$PAGE .= ' <input type=\"submit\" id=\"save_result_file_meta_button\" value=\"Save\" onclick=\"javascript:save_result_file_meta(\\'' . $this->result_public_id . '\\'); return false;\" style=\"display: none;\">';\n\t\t\t$PAGE .= ' <input type=\"submit\" id=\"edit_result_file_meta_button\" value=\"Edit\" onclick=\"javascript:edit_result_file_meta(); return false;\">';\n\t\t}\n\t\tif($this->can_delete_results && !defined('PHOROMATIC_SERVER'))\n\t\t{\n\t\t\t$PAGE .= ' <input type=\"submit\" value=\"Delete Result File\" onclick=\"javascript:delete_result_file(\\'' . $this->result_public_id . '\\'); return false;\">';\n\t\t}\n\t\t$PAGE .= $this->post_description_message;\n\t\t$PAGE .= '<div style=\"text-align: center;\">Jump To <a href=\"#table\">Table</a> - <a href=\"#results\">Results</a></div>';\n\t\t$PAGE .= '<hr /><div style=\"font-size: 12pt;\">' . $html_options . '</div><hr style=\"clear: both;\" />';\n\t\t$PAGE .= self::process_helper_html($_REQUEST, $result_file, $extra_attributes, $this->can_modify_results, $this->can_delete_results);\n\t\t$PAGE .= '</div>';\n\t\tif($this->include_page_print_only_helpers)\n\t\t{\n\t\t\t$PAGE .= '<div class=\"print_notes\">' . pts_result_file_output::result_file_to_system_html($result_file) . '</div>';\n\t\t}\n\t\t$PAGE .= '<div id=\"result_overview_area\">';\n\t\t$intent = -1;\n\t\tif($result_file->get_system_count() == 1 || ($intent = pts_result_file_analyzer::analyze_result_file_intent($result_file, $intent, true)))\n\t\t{\n\t\t\t$table = new pts_ResultFileCompactSystemsTable($result_file, $intent);\n\t\t}\n\t\telse if($result_file->get_system_count() > 0)\n\t\t{\n\t\t\t$table = new pts_ResultFileSystemsTable($result_file);\n\t\t}\n\n\t\t$rendered = pts_render::render_graph_inline_embed($table, $result_file, $extra_attributes);\n\t\t$PAGE .= '<p style=\"text-align: center; overflow: auto;\" class=\"result_object\" id=\"result_file_system_table\">' . $rendered . '</p>';\n\t\t$PAGE .= $this->graph_export_handler($rendered);\n\n\t\tif($result_file->get_system_count() == 2)\n\t\t{\n\t\t\t$graph = new pts_graph_run_vs_run($result_file);\n\n\t\t\tif($graph->renderGraph())\n\t\t\t{\n\t\t\t\t$rendered = pts_render::render_graph_inline_embed($graph, $result_file, $extra_attributes);\n\t\t\t\t$PAGE .= '<p style=\"text-align: center; overflow: auto;\" class=\"result_object\">' . $rendered . '</p>';\n\t\t\t\t$PAGE .= $this->graph_export_handler($rendered);\n\t\t\t}\n\t\t}\n\t\telse if($result_file->get_system_count() > 12 && false) // TODO determine when this is sane enough to enable\n\t\t{\n\t\t\t$graph = new pts_graph_mini_overview($result_file, '');\n\n\t\t\tif($graph->renderGraph())\n\t\t\t{\n\t\t\t\t$rendered = pts_render::render_graph_inline_embed($graph, $result_file, $extra_attributes);\n\t\t\t\t$PAGE .= '<p style=\"text-align: center; overflow: auto;\" class=\"result_object\">' . $rendered . '</p>';\n\t\t\t\t$PAGE .= $this->graph_export_handler($rendered);\n\t\t\t}\n\t\t}\n\t\telse if(!$result_file->is_multi_way_comparison())\n\t\t{\n\t\t\tforeach(array('', 'Per Watt', 'Per Dollar') as $selector)\n\t\t\t{\n\t\t\t\t$graph = new pts_graph_radar_chart($result_file, $selector);\n\n\t\t\t\tif($graph->renderGraph())\n\t\t\t\t{\n\t\t\t\t\t$rendered = pts_render::render_graph_inline_embed($graph, $result_file, $extra_attributes);\n\t\t\t\t\t$PAGE .= '<p style=\"text-align: center; overflow: auto;\" class=\"result_object\">' . $rendered . '</p>';\n\t\t\t\t\t$PAGE .= $this->graph_export_handler($rendered);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//$PAGE .= '<a id=\"table\"></a>';\n\t\tif(!$result_file->is_multi_way_comparison() && $this->show_html_table_when_relevant)\n\t\t{\n\t\t\t$PAGE .= '<div class=\"pts_result_table\">' . pts_result_file_output::result_file_to_detailed_html_table($result_file, 'grid', $extra_attributes, self::check_request_for_var($_REQUEST, 'sdt')) . '</div>';\n\t\t}\n\t\telse if($result_file->get_test_count() > 3)\n\t\t{\n\t\t\t$intent = null;\n\t\t\t$table = new pts_ResultFileTable($result_file, $intent);\n\t\t\t$rendered = pts_render::render_graph_inline_embed($table, $result_file, $extra_attributes);\n\t\t\t$PAGE .= '<p style=\"text-align: center; overflow: auto;\" class=\"result_object\">' . $rendered . '</p>';\n\t\t\t$PAGE .= $this->graph_export_handler($rendered);\n\t\t}\n\t\t$PAGE .= '</div>';\n\n\t\t$PAGE .= '<a id=\"table\"></a><div id=\"results\">';\n\t\t$prev_title = null;\n\n\t\t$identifier_mapping_to_cores = array();\n\t\t$identifier_mapping_to_threads = array();\n\t\t$identifier_mapping_to_cpu_clock = array();\n\t\t$identifier_mapping_to_ram_channels = array();\n\n\t\tif($result_file->get_system_count() > 1 && !$result_file->is_multi_way_comparison())\n\t\t{\n\t\t\tforeach($result_file->get_systems() as $system)\n\t\t\t{\n\t\t\t\t$t = $system->get_cpu_core_count();\n\t\t\t\tif($t > 0)\n\t\t\t\t{\n\t\t\t\t\t$identifier_mapping_to_cores[$system->get_identifier()] = $t;\n\t\t\t\t}\n\t\t\t\t$t = $system->get_cpu_thread_count();\n\t\t\t\tif($t > 0)\n\t\t\t\t{\n\t\t\t\t\t$identifier_mapping_to_threads[$system->get_identifier()] = $t;\n\t\t\t\t}\n\t\t\t\t$t = $system->get_cpu_clock();\n\t\t\t\tif($t > 0)\n\t\t\t\t{\n\t\t\t\t\t$identifier_mapping_to_cpu_clock[$system->get_identifier()] = $t;\n\t\t\t\t}\n\t\t\t\t$t = $system->get_memory_channels();\n\t\t\t\tif($t > 0)\n\t\t\t\t{\n\t\t\t\t\t$identifier_mapping_to_ram_channels[$system->get_identifier()] = $t;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(count(array_unique($identifier_mapping_to_cores)) < 2)\n\t\t\t{\n\t\t\t\t$identifier_mapping_to_cores = array();\n\t\t\t}\n\t\t\tif(count(array_unique($identifier_mapping_to_threads)) < 2)\n\t\t\t{\n\t\t\t\t$identifier_mapping_to_threads = array();\n\t\t\t}\n\t\t\tif(count(array_unique($identifier_mapping_to_cpu_clock)) < 2)\n\t\t\t{\n\t\t\t\t$identifier_mapping_to_cpu_clock = array();\n\t\t\t}\n\t\t\tif(count(array_unique($identifier_mapping_to_ram_channels)) < 2)\n\t\t\t{\n\t\t\t\t$identifier_mapping_to_ram_channels = array();\n\t\t\t}\n\t\t}\n\n\t\t//\n\t\t// SHOW THE RESULTS\n\t\t//\n\t\t$skip_ros = array();\n\t\tforeach($result_file->get_result_objects() as $i => $result_object)\n\t\t{\n\t\t\t//\n\t\t\t// RENDER TEST AND ANCHOR\n\t\t\t//\n\t\t\tif(in_array($i, $skip_ros))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$ro = clone $result_object;\n\t\t\t$res_desc_shortened = $result_object->get_arguments_description_shortened(false);\n\t\t\t$res = pts_render::render_graph_inline_embed($ro, $result_file, $extra_attributes);\n\t\t\t$PAGE .= '<a id=\"r-' . $i . '\"></a><div style=\"text-align: center;\" id=\"result-' . $i . '\">';\n\n\t\t\t//\n\t\t\t// DISPLAY TEST PORIFLE METADATA HELPER\n\t\t\t//\n\t\t\tif($this->show_test_metadata_helper && $result_object->test_profile->get_title() != $prev_title)\n\t\t\t{\n\t\t\t\t$PAGE .= '<h2>' . $result_object->test_profile->get_title() . '</h2>';\n\t\t\t\tif(is_file(PTS_INTERNAL_OB_CACHE . 'test-profiles/' . $result_object->test_profile->get_identifier() . '/test-definition.xml'))\n\t\t\t\t{\n\t\t\t\t\t$tp = new pts_test_profile(PTS_INTERNAL_OB_CACHE . 'test-profiles/' . $result_object->test_profile->get_identifier() . '/test-definition.xml');\n\t\t\t\t\t$PAGE .= '<p class=\"mini\">' . $tp->get_description() . ' <a href=\"https://openbenchmarking.org/test/' . $result_object->test_profile->get_identifier(false) . '\"><em class=\"hide_on_print\">Learn more via the OpenBenchmarking.org test page</em></a>.</p>';\n\n\t\t\t\t/*\t$suites_containing_test = pts_test_suites::suites_containing_test_profile($result_object->test_profile);\n\t\t\t\t\tif(!empty($suites_containing_test))\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach($suites_containing_test as $suite)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$PAGE .= $suite->get_title() . ' ' . $suite->get_identifier();\n\t\t\t\t\t\t}\n\t\t\t\t\t}  */\n\t\t\t\t}\n\t\t\t\t$prev_title = $result_object->test_profile->get_title();\n\t\t\t}\n\t\t\tif($res != false)\n\t\t\t{\n\t\t\t\t//\n\t\t\t\t// DISPLAY GRAPH\n\t\t\t\t//\n\n\t\t\t\t// Run variability\n\t\t\t\t$res_per_core = false;\n\t\t\t\t$res_per_thread = false;\n\t\t\t\t$res_per_clock = false;\n\t\t\t\t$res_per_ram = false;\n\t\t\t\t$res_variability = false;\n\n\t\t\t\tif(!in_array($result_object->test_profile->get_display_format(), array('LINE_GRAPH', 'BOX_PLOT')) && $result_object->test_result_buffer->detected_multi_sample_result() && $result_object->test_result_buffer->get_count() > 1)\n\t\t\t\t{\n\t\t\t\t\t$extra_attributes['graph_render_type'] = 'HORIZONTAL_BOX_PLOT';\n\t\t\t\t\t$ro = clone $result_object;\n\t\t\t\t\t$res_variability = pts_render::render_graph_inline_embed($ro, $result_file, $extra_attributes);\n\t\t\t\t\tunset($extra_attributes['graph_render_type']);\n\t\t\t\t}\n\t\t\t\tif(in_array($result_object->test_profile->get_test_hardware_type(), array('System', 'Processor', 'OS')))\n\t\t\t\t{\n\t\t\t\t\tif(!empty($identifier_mapping_to_cores))\n\t\t\t\t\t{\n\t\t\t\t\t\t$ro = pts_result_file_analyzer::get_result_object_custom($result_file, $result_object, $identifier_mapping_to_cores, 'Performance Per Core', 'Core');\n\t\t\t\t\t\tif($ro)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$res_per_core = pts_render::render_graph_inline_embed($ro, $result_file, $extra_attributes);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(!empty($identifier_mapping_to_threads) && $identifier_mapping_to_cores != $identifier_mapping_to_threads)\n\t\t\t\t\t{\n\t\t\t\t\t\t$ro = pts_result_file_analyzer::get_result_object_custom($result_file, $result_object, $identifier_mapping_to_threads, 'Performance Per Thread', 'Thread');\n\t\t\t\t\t\tif($ro)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$res_per_thread = pts_render::render_graph_inline_embed($ro, $result_file, $extra_attributes);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(!empty($identifier_mapping_to_cpu_clock))\n\t\t\t\t\t{\n\t\t\t\t\t\t$ro = pts_result_file_analyzer::get_result_object_custom($result_file, $result_object, $identifier_mapping_to_cpu_clock, 'Performance Per Clock', 'GHz');\n\t\t\t\t\t\tif($ro)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$res_per_clock = pts_render::render_graph_inline_embed($ro, $result_file, $extra_attributes);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(in_array($result_object->test_profile->get_test_hardware_type(), array('System', 'Processor', 'Memory')))\n\t\t\t\t{\n\t\t\t\t\tif(!empty($identifier_mapping_to_ram_channels))\n\t\t\t\t\t{\n\t\t\t\t\t\t$ro = pts_result_file_analyzer::get_result_object_custom($result_file, $result_object, $identifier_mapping_to_ram_channels, 'Performance Per Memory Channel', 'Channel');\n\t\t\t\t\t\tif($ro)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$res_per_ram = pts_render::render_graph_inline_embed($ro, $result_file, $extra_attributes);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$tabs = array(\n\t\t\t\t\t'Result' => $res\n\t\t\t\t\t);\n\t\t\t\t$show_on_print = array();\n\n\t\t\t\tforeach($result_file->get_relation_map($i) as $child_ro)\n\t\t\t\t{\n\t\t\t\t\t$c_ro = $result_file->get_result($child_ro);\n\t\t\t\t\tif($c_ro)\n\t\t\t\t\t{\n\t\t\t\t\t\t$desc = str_replace(array(' Monitor', $res_desc_shortened ,'()' ,')', ' - '), '', $c_ro->get_arguments_description_shortened(false));\n\t\t\t\t\t\t$dindex = $desc == $res_desc_shortened || empty($desc) ? $c_ro->test_profile->get_result_scale() : $desc;\n\t\t\t\t\t\t$tabs[$dindex] = pts_render::render_graph_inline_embed($c_ro, $result_file, $extra_attributes);\n\t\t\t\t\t\t$show_on_print[] = $dindex;\n\t\t\t\t\t\t$result_file->remove_result_object_by_id($child_ro);\n\t\t\t\t\t\t$skip_ros[] = $child_ro;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$tabs['Perf Per Core'] = $res_per_core;\n\t\t\t\t$tabs['Perf Per Thread'] = $res_per_thread;\n\t\t\t\t$tabs['Perf Per Clock'] = $res_per_clock;\n\t\t\t\t$tabs['Perf Per RAM Channel'] = $res_per_ram;\n\t\t\t\t$tabs['Result Confidence'] = $res_variability;\n\n\t\t\t\tforeach($tabs as $title => &$graph)\n\t\t\t\t{\n\t\t\t\t\tif(empty($graph))\n\t\t\t\t\t{\n\t\t\t\t\t\tunset($tabs[$title]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tswitch(count($tabs))\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tcontinue 2;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\t$PAGE .= $res . '<br />';\n\t\t\t\t\t\t$PAGE .= $this->graph_export_handler($res);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$PAGE .= '<div class=\"tabs\">';\n\t\t\t\t\t\tforeach($tabs as $title => &$rendered)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$tab_id = strtolower(str_replace(' ', '_', $title)) . '_' . $i;\n\t\t\t\t\t\t\t$PAGE .= '<input type=\"radio\" name=\"tabs_' . $i . '\" id=\"' . $tab_id . '\"' . ($title == 'Result' ? ' checked=\"checked\"' : '') . '>\n\t\t\t\t\t\t\t  <label for=\"' . $tab_id . '\">' . $title . '</label>\n\t\t\t\t\t\t\t  <div class=\"tab' . (in_array($title, $show_on_print) ? ' print_notes' : '') . '\">\n\t\t\t\t\t\t\t    ' . $rendered . $this->graph_export_handler($rendered) . '\n\t\t\t\t\t\t\t  </div>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$PAGE .= '</div>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//\n\t\t\t// DISPLAY LOGS\n\t\t\t//\n\t\t\t$PAGE .= $this->result_object_to_error_report($result_file, $result_object, $i);\n\t\t\t$button_area = null;\n\n\t\t\tif($result_file->get_test_run_log_for_result($result_object, -2))\n\t\t\t{\n\t\t\t\t$button_area .= ' <button onclick=\"javascript:display_test_logs_for_result_object(\\'' . $this->result_public_id . '\\', \\'' . $i . '\\'); return false;\">View Test Run Logs</button> ';\n\t\t\t}\n\n\t\t\tif($result_file->get_install_log_for_test($result_object->test_profile, -2))\n\t\t\t{\n\t\t\t\t$button_area .= ' <button onclick=\"javascript:display_install_logs_for_result_object(\\'' . $this->result_public_id . '\\', \\'' . $i . '\\'); return false;\">View Test Installation Logs</button> ';\n\t\t\t}\n\n\t\t\t//\n\t\t\t// EDITING / DELETE OPTIONS\n\t\t\t//\n\n\t\t\tif($this->can_delete_results && !$result_object->dynamically_generated)\n\t\t\t{\n\t\t\t\t$button_area .= ' <button onclick=\"javascript:delete_result_from_result_file(\\'' . $this->result_public_id . '\\', \\'' . $i . '\\'); return false;\">Delete Result</button> ';\n\t\t\t}\n\t\t\telse if($result_object->dynamically_generated)\n\t\t\t{\n\t\t\t\t$button_area .= ' <button onclick=\"javascript:hide_result_in_result_file(\\'' . $this->result_public_id . '\\', \\'' . $i . '\\'); return false;\">Hide Result</button> ';\n\t\t\t}\n\t\t\tif($this->can_modify_results && !$result_object->dynamically_generated)\n\t\t\t{\n\t\t\t\tif($result_object->get_annotation() == null)\n\t\t\t\t{\n\t\t\t\t\t$button_area .= ' <button onclick=\"javascript:display_add_annotation_for_result_object(\\'' . $this->result_public_id . '\\', \\'' . $i . '\\', this); return false;\">Add Annotation</button> ';\n\t\t\t\t\t$PAGE .= ' <div id=\"annotation_area_' . $i . '\" style=\"display: none;\"> <form action=\"#\" onsubmit=\"javascript:add_annotation_for_result_object(\\'' . $this->result_public_id . '\\', \\'' . $i . '\\', this); return false;\"><textarea rows=\"4\" cols=\"50\" placeholder=\"Add Annotation...\" name=\"annotation\"></textarea><br /><input type=\"submit\" value=\"Add Annotation\"></form></div>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$PAGE .= '<div id=\"update_annotation_' . $i . '\" contentEditable=\"true\">' . pts_strings::sanitize($result_object->get_annotation()) . '</div> <input type=\"submit\" value=\"Update Annotation\" onclick=\"javascript:update_annotation_for_result_object(\\'' . $this->result_public_id . '\\', \\'' . $i . '\\'); return false;\">';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$PAGE .= '<p class=\"mini\">' . pts_strings::sanitize($result_object->get_annotation()) . '</p>';\n\t\t\t}\n\t\t\tif($button_area != null)\n\t\t\t{\n\t\t\t\t$PAGE .= '<p>' . $button_area . '</p>';\n\t\t\t}\n\n\t\t\t$PAGE .= '</div>';\n\t\t\tunset($result_object);\n\t\t}\n\n\t\tif($this->include_page_print_only_helpers)\n\t\t{\n\t\t\t$PAGE .= '<div class=\"print_notes mini\" style=\"font-size: 10px !important;\">' . pts_result_file_output::result_file_to_system_html($result_file, true) . '</div>';\n\t\t}\n\t\t$PAGE .= '</div>';\n\n\t\treturn $PAGE;\n\t}\n\tpublic static function html_template_log_viewer($html_to_show, &$result_file)\n\t{\n\t\treturn '<!doctype html>\n\t\t<html lang=\"en\">\n\t\t<head><title>' . ($result_file ? $result_file->get_title() . ' ' : '') . 'Log Viewer</title>\n\t\t' . (defined('CSS_RESULT_VIEWER_PATH') ? '<link rel=\"stylesheet\" href=\"' . CSS_RESULT_VIEWER_PATH . '\">' : '') . '</head>\n\t\t<body>' . (empty($html_to_show) ? '<p>No logs available.</p>' : $html_to_show) . '</body></html>';\n\t}\n\tpublic static function display_log_html_or_download(&$log_contents, &$list_of_log_files, $log_selected, &$append_to_html, $title, $identifiers_with_logs = false)\n\t{\n\t\t$append_to_html .= '<h2 align=\"center\">' . $title . ' Logs</h2>';\n\t\tif(empty($list_of_log_files) && $identifiers_with_logs && !empty($identifiers_with_logs))\n\t\t{\n\t\t\t$append_to_html = '[DEBUG] No log files were found for this system identifier (' . $title . '), but logs were found for: ' . implode(', ', $identifiers_with_logs);\n\t\t}\n\t\t$append_to_html .= '<div style=\"text-align: center;\"><form action=\"' . str_replace('&log_select=' . $log_selected, '', str_replace('&download', '', $_SERVER['REQUEST_URI'])) . '\" method=\"post\">';\n\t\t$append_to_html .= '<input type=\"hidden\" name=\"modify\" value=\"0\" /><select name=\"log_select\" id=\"log_select\" onchange=\"this.form.submit()\">';\n\t\tforeach($list_of_log_files as $log_file)\n\t\t{\n\t\t\t$append_to_html .= '<option value=\"' . $log_file . '\"' . (isset($_REQUEST['log_select']) && $log_file == $_REQUEST['log_select'] ? 'selected=\"selected\"' : '') . '>' . $log_file . '</option>';\n\t\t}\n\t\t$append_to_html .= '</select> &nbsp; <input type=\"submit\" value=\"Show Log\"></form></div><br /><hr />';\n\t\t$append_to_html .= '<p style=\"font-size: 12px; margin: 5px; text-align: right\"><form action=\"' . $_SERVER['REQUEST_URI'] . '\" method=\"post\"><input type=\"hidden\" name=\"download\" value=\"download\" /><input type=\"hidden\" name=\"log_select\" value=\"' . $log_selected . '\" /><input type=\"submit\" value=\"Download Log File\" style=\"float: right;\"> </form></p>';\n\n\t\tif($log_contents == null)\n\t\t{\n\t\t\t$append_to_html .= '<p>No log file available.</p>';\n\t\t}\n\t\telse if(pts_strings::is_text_string($log_contents) && !isset($_REQUEST['download']))\n\t\t{\n\t\t\t$log_contents = phodevi_vfs::cleanse_file($log_contents);\n\t\t\t$log_contents = htmlentities($log_contents);\n\t\t\t$log_contents = str_replace(PHP_EOL, '<br />', $log_contents);\n\t\t\t$append_to_html .= '<br /><pre style=\"font-family: monospace;\">' . $log_contents . '</pre>';\n\t\t}\n\t\telse if(isset($_REQUEST['log_select']) && $_REQUEST['log_select'] != 'undefined') // to avoid blocking the popup window in first place if it wasn't explicitly selected\n\t\t{\n\t\t\tif(class_exists('finfo'))\n\t\t\t{\n\t\t\t\t$finfo = new finfo(FILEINFO_MIME);\n\t\t\t\theader('Content-type: '. $finfo->buffer($log_contents));\n\t\t\t}\n\t\t\t//header('Content-Type: application/octet-stream');\n\t\t\theader('Content-Length: ' . strlen($log_contents));\n\t\t\theader('Content-Disposition: attachment; filename=\"' . str_ireplace(array('/', '\\\\', '.'), '', $title) . ' - ' . $log_selected . '\"');\n\t\t\techo $log_contents;\n\t\t\texit;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$append_to_html .= '<p>Download log file to view.</p>';\n\t\t}\n\t}\n\tpublic static function get_html_sort_bar(&$result_file, &$request)\n\t{\n\t\t$analyze_options = null;\n\t\t$drop_down_menus = array('Export Benchmark Data' => array(\n\t\t\t\t\t\t'export=pdf' => 'Result File To PDF',\n\t\t\t\t\t\t'export=txt' => 'Result File To Text',\n\t\t\t\t\t\t'export=html' => 'Result File To HTML',\n\t\t\t\t\t\t'export=json' => 'Result File To JSON',\n\t\t\t\t\t//\t'export=xml' => 'Result File To XML',\n\t\t\t\t\t\t'export=xml-suite' => 'Result File To Test Suite (XML)',\n\t\t\t\t\t\t'export=csv' => 'Result File To CSV/Excel',\n\t\t\t\t\t\t'export=csv-all' => 'Individual Run Data To CSV/Excel',\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\tif(count($result_file->get_system_identifiers()) > 1)\n\t\t{\n\t\t\t$drop_down_menus['Sort Result Order'] = array(\n\t\t\t\t'sro&rro' => 'By Identifier (DESC)',\n\t\t\t\t'sro' => 'By Identifier (ASC)',\n\t\t\t\t'sor' => 'By Performance (DESC)',\n\t\t\t\t'sor&rro' => 'By Performance (ASC)',\n\t\t\t\t'rdt&rro' => 'By Run Date/Time (DESC)',\n\t\t\t\t'rdt' => 'By Run Date/Time (ASC)',\n\t\t\t\t);\n\t\t}\n\t\tif($result_file->get_test_count() > 1)\n\t\t{\n\t\t\t$drop_down_menus['Sort Graph Order'] = array(\n\t\t\t\t'grs' => 'By Result Spread',\n\t\t\t\t'gru' => 'By Result Unit',\n\t\t\t\t'grt' => 'By Test Title',\n\t\t\t\t'grr' => 'By Test Length/Time'\n\t\t\t\t);\n\t\t}\n\n\t\t$analyze_options .= '<div style=\"float: right;\"><ul>';\n\t\tforeach(array_reverse($drop_down_menus, true) as $menu => $sub_menu)\n\t\t{\n\t\t\t$analyze_options .= '<li><a href=\"#\">' . $menu . '</a><ul>';\n\t\t\tforeach($sub_menu as $option => $txt)\n\t\t\t{\n\t\t\t\t$uri = $_SERVER['REQUEST_URI'];\n\t\t\t\tforeach(array_reverse(array_keys($sub_menu)) as $rem)\n\t\t\t\t{\n\t\t\t\t\t$uri = str_replace('&' . $rem, '', $uri);\n\t\t\t\t}\n\t\t\t\t$uri = str_replace('&rro', '', $uri);\n\t\t\t\t$analyze_options .= '<li><a href=\"' . $uri . '&' . $option . '\">' . $txt . '</a></li>';\n\t\t\t}\n\t\t\t$analyze_options .= '</ul></li>';\n\t\t}\n\t\t$analyze_options .= '</ul></div>';\n\t\treturn $analyze_options;\n\t}\n\tpublic static function get_html_options_markup(&$result_file, &$request, $public_id = null, $can_delete_results = false)\n\t{\n\t\tif($public_id == null && defined('RESULTS_VIEWING_ID'))\n\t\t{\n\t\t\t$public_id = RESULTS_VIEWING_ID;\n\t\t}\n\t\t$analyze_options = null;\n\n\t\t// CHECKS FOR DETERMINING OPTIONS TO DISPLAY\n\t\t$has_identifier_with_color_brand = false;\n\t\t$has_box_plot = false;\n\t\t$has_line_graph = false;\n\t\t$is_multi_way = $result_file->is_multi_way_comparison();\n\t\t$system_count = $result_file->get_system_count();\n\n\t\tforeach($result_file->get_system_identifiers() as $sys)\n\t\t{\n\t\t\tif(pts_render::identifier_to_brand_color($sys, null) != null)\n\t\t\t{\n\t\t\t\t$has_identifier_with_color_brand = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t$multi_test_run_options_tracking = array();\n\t\t$tests_with_multiple_versions = array();\n\t\t$has_test_with_multiple_options = false;\n\t\t$has_test_with_multiple_versions = false;\n\t\tforeach($result_file->get_result_objects() as $i => $result_object)\n\t\t{\n\t\t\tif(!$has_box_plot && $result_object->test_profile->get_display_format() == 'HORIZONTAL_BOX_PLOT')\n\t\t\t{\n\t\t\t\t$has_box_plot = true;\n\t\t\t}\n\t\t\tif(!$has_line_graph && $result_object->test_profile->get_display_format() == 'LINE_GRAPH')\n\t\t\t{\n\t\t\t\t$has_line_graph = true;\n\t\t\t}\n\t\t\tif(!$is_multi_way && !$has_test_with_multiple_options)\n\t\t\t{\n\t\t\t\tif(!isset($multi_test_run_options_tracking[$result_object->test_profile->get_identifier()]))\n\t\t\t\t{\n\t\t\t\t\t$multi_test_run_options_tracking[$result_object->test_profile->get_identifier()] = array();\n\t\t\t\t}\n\t\t\t\t$multi_test_run_options_tracking[$result_object->test_profile->get_identifier()][] = $result_object->get_arguments_description();\n\t\t\t\tif(count($multi_test_run_options_tracking[$result_object->test_profile->get_identifier()]) > 1)\n\t\t\t\t{\n\t\t\t\t\t$has_test_with_multiple_options = true;\n\t\t\t\t\tunset($multi_test_run_options_tracking);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!$is_multi_way && !$has_test_with_multiple_versions)\n\t\t\t{\n\t\t\t\t$ti_no_version = $result_object->test_profile->get_identifier(false);\n\t\t\t\tif(!isset($tests_with_multiple_versions[$ti_no_version]))\n\t\t\t\t{\n\t\t\t\t\t$tests_with_multiple_versions[$ti_no_version] = array();\n\t\t\t\t}\n\t\t\t\tpts_arrays::unique_push($tests_with_multiple_versions[$ti_no_version], $result_object->test_profile->get_app_version());\n\t\t\t\tif(count($tests_with_multiple_versions[$ti_no_version]) > 1)\n\t\t\t\t{\n\t\t\t\t\t$has_test_with_multiple_versions = true;\n\t\t\t\t\tunset($tests_with_multiple_versions);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// (optimization) if it has everything, break\n\t\t\tif($has_line_graph && $has_box_plot && $has_test_with_multiple_options && $has_test_with_multiple_versions)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$suites_in_result_file = $system_count > 1 ? pts_test_suites::suites_in_result_file($result_file, true, 0) : array();\n\t\t// END OF CHECKS\n\n\t\t$analyze_options .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" method=\"post\">';\n\t\t$analyze_checkboxes = array(\n\t\t\t'View' => array(),\n\t\t\t'Statistics' => array(),\n\t\t\t'Sorting' => array(),\n\t\t\t'Graph Settings' => array(),\n\t\t\t'Multi-Way Comparison' => array(),\n\t\t\t);\n\n\t\tif($system_count > 1)\n\t\t{\n\t\t\t$analyze_checkboxes['Statistics'][] = array('shm', 'Show Overall Harmonic Mean(s)');\n\t\t\t$analyze_checkboxes['Statistics'][] = array('sgm', 'Show Overall Geometric Mean');\n\t\t\tif(count($suites_in_result_file) > 1)\n\t\t\t{\n\t\t\t\t$analyze_checkboxes['Statistics'][] = array('sts', 'Show Geometric Means Per-Suite/Category');\n\t\t\t}\n\t\t\t$analyze_checkboxes['Statistics'][] = array('swl', 'Show Wins / Losses Counts (Pie Chart)');\n\t\t\t$analyze_checkboxes['Statistics'][] = array('nor', 'Normalize Results');\n\t\t\t$analyze_checkboxes['Graph Settings'][] = array('ftr', 'Force Line Graphs Where Applicable');\n\t\t\t$analyze_checkboxes['Graph Settings'][] = array('scalar', 'Convert To Scalar Where Applicable');\n\t\t\t$analyze_checkboxes['View'][] = array('hnr', 'Do Not Show Noisy Results');\n\t\t\t$analyze_checkboxes['View'][] = array('hni', 'Do Not Show Results With Incomplete Data');\n\t\t\t$analyze_checkboxes['View'][] = array('hlc', 'Do Not Show Results With Little Change/Spread');\n\t\t\t$analyze_checkboxes['View'][] = array('spr', 'List Notable Results');\n\n\t\t\tif($has_identifier_with_color_brand)\n\t\t\t{\n\t\t\t\t$analyze_checkboxes['Graph Settings'][] = array('ncb', 'Disable Color Branding');\n\t\t\t}\n\t\t}\n\t\tif(count($suites_in_result_file) > 1)\n\t\t{\n\t\t\t$suite_limit = '<h3>Limit displaying results to tests within:</h3>';\n\t\t\t$stis = self::check_request_for_var($request, 'stis');\n\t\t\tif(!is_array($stis))\n\t\t\t{\n\t\t\t\t$stis = explode(',', $stis);\n\t\t\t}\n\t\t\tksort($suites_in_result_file);\n\t\t\t$suite_limit .= '<div style=\"max-height: 250px; overflow: scroll;\">';\n\t\t\tforeach($suites_in_result_file as $suite_identifier => $s)\n\t\t\t{\n\t\t\t\tlist($suite, $contained_tests) = $s;\n\t\t\t\t$id = rtrim(base64_encode($suite_identifier), '=');\n\t\t\t\t$suite_limit .= '<input type=\"checkbox\" name=\"stis[]\" value=\"' . $id . '\"' . (is_array($stis) && in_array($id, $stis) ? ' checked=\"checked\"' : null) . ' /> ' . $suite->get_title() . ' <sup><em>' . count($contained_tests) . ' Tests</em></sup><br />';\n\t\t\t}\n\t\t\t$suite_limit .= '</div>';\n\t\t\t$analyze_checkboxes['View'][] = array('', $suite_limit);\n\t\t}\n\n\t\t$analyze_checkboxes['Graph Settings'][] = array('vb', 'Prefer Vertical Bar Graphs');\n\t\t$analyze_checkboxes['Statistics'][] = array('rol', 'Remove Outliers Before Calculating Averages');\n\t\t//$analyze_checkboxes['Statistics'][] = array('gtb', 'Graph Values Of All Runs (Box Plot)');\n\t\t//$analyze_checkboxes['Statistics'][] = array('gtl', 'Graph Values Of All Runs (Line Graph)');\n\n\t\tif($has_box_plot || $has_line_graph)\n\t\t{\n\t\t\t$analyze_checkboxes['Graph Settings'][] = array('nbp', 'No Box Plots');\n\t\t}\n\n\t\tif($is_multi_way && $system_count > 1)\n\t\t{\n\t\t\t$analyze_checkboxes['Multi-Way Comparison'][] = array('cmw', 'Condense Comparison');\n\t\t}\n\t\tif(($is_multi_way && $system_count > 1) || self::check_request_for_var($request, 'cmv') || self::check_request_for_var($request, 'cts'))\n\t\t{\n\t\t\t$analyze_checkboxes['Multi-Way Comparison'][] = array('imw', 'Transpose Comparison');\n\t\t}\n\t\tif((!$is_multi_way && $has_test_with_multiple_options && !self::check_request_for_var($request, 'cmv')) || self::check_request_for_var($request, 'cts'))\n\t\t{\n\t\t\t$analyze_checkboxes['Multi-Way Comparison'][] = array('cts', 'Condense Multi-Option Tests Into Single Result Graphs');\n\t\t}\n\t\tif((!$is_multi_way && $has_test_with_multiple_versions && !self::check_request_for_var($request, 'cts')) || self::check_request_for_var($request, 'cmv'))\n\t\t{\n\t\t\t$analyze_checkboxes['Multi-Way Comparison'][] = array('cmv', 'Condense Test Profiles With Multiple Version Results Into Single Result Graphs');\n\t\t}\n\n\t\t$analyze_checkboxes['Table'][] = array('sdt', 'Show Detailed System Result Table');\n\n\t\t$t = null;\n\t\tforeach($analyze_checkboxes as $title => $group)\n\t\t{\n\t\t\tif(empty($group))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$t .= '<div class=\"pts_result_viewer_settings_box\">';\n\t\t\t$t .= '<h2>' . $title . '</h2>';\n\t\t\tforeach($group as $key)\n\t\t\t{\n\t\t\t\tif($key[0] == null)\n\t\t\t\t{\n\t\t\t\t\t$t .= $key[1] . '<br />';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$t .= '<input type=\"checkbox\" name=\"' . $key[0] . '\" value=\"1\"' . (self::check_request_for_var($request, $key[0]) ? ' checked=\"checked\"' : null) . ' /> ' . $key[1] . '<br />';\n\t\t\t\t}\n\t\t\t}\n\t\t\t$t .= '</div>';\n\t\t}\n\n\t\tif($system_count > 0)\n\t\t{\n\t\t\t$has_system_logs = $result_file->system_logs_available();\n\t\t\t$t .= '<div style=\"clear: both;\"><h2>Run Management</h2>\n\t\t\t<div class=\"div_table\">\n\t\t\t<div class=\"div_table_body\">\n\t\t\t<div class=\"div_table_first_row\">';\n\n\t\t\tif($system_count > 1)\n\t\t\t{\n\t\t\t\t$t .= '<div class=\"div_table_cell\">Highlight<br />Result</div>\n\t\t\t<div class=\"div_table_cell\">Hide<br />Result</div>';\n\t\t\t}\n\n\t\t\t$t .= '<div class=\"div_table_cell\">Result<br />Identifier</div>';\n\n\t\t\tif($has_system_logs)\n\t\t\t{\n\t\t\t\t$t .= '<div class=\"div_table_cell\">View Logs</div>';\n\t\t\t}\n\n\t\t\t$t .= '<div class=\"div_table_cell\">Performance Per<br />Dollar</div>\n\t\t\t<div class=\"div_table_cell\">Date<br />Run</div>\n\t\t\t<div class=\"div_table_cell\"> &nbsp; Test<br /> &nbsp; Duration</div>\n\t\t\t<div class=\"div_table_cell\"> </div>\n\t\t\t</div>\n\t\t\t';\n\t\t\t$hgv = self::check_request_for_var($request, 'hgv');\n\t\t\tif(!is_array($hgv))\n\t\t\t{\n\t\t\t\t$hgv = explode(',', $hgv);\n\t\t\t}\n\t\t\t$rmm = self::check_request_for_var($request, 'rmm');\n\t\t\tif(!is_array($rmm))\n\t\t\t{\n\t\t\t\t$rmm = explode(',', $rmm);\n\t\t\t}\n\t\t\t$start_of_year = strtotime(date('Y-01-01'));\n\t\t\t$test_run_times = $result_file->get_test_run_times();\n\t\t\tforeach($result_file->get_systems() as $sys)\n\t\t\t{\n\t\t\t\t$si = $sys->get_identifier();\n\t\t\t\t$ppdx = rtrim(base64_encode($si), '=');\n\t\t\t\t$ppd = self::check_request_for_var($request, 'ppd_' . $ppdx);\n\t\t\t$t .= '\n\t\t\t\t<div id=\"table-line-' . $ppdx . '\" class=\"div_table_row\">';\n\t\t\t\tif($system_count > 1)\n\t\t\t\t{\n\t\t\t\t\t$t .= '<div class=\"div_table_cell\"><input type=\"checkbox\" name=\"hgv[]\" value=\"' . $si . '\"' . (is_array($hgv) && in_array($si, $hgv) ? ' checked=\"checked\"' : null) . ' /></div>\n\t\t\t\t<div class=\"div_table_cell\"><input type=\"checkbox\" name=\"rmm[]\" value=\"' . $si . '\"' . (is_array($rmm) && in_array($si, $rmm) ? ' checked=\"checked\"' : null) . ' /></div>';\n\t\t\t\t}\n\n\t\t\t\t$t .= '<div class=\"div_table_cell\"><strong>' . $si . '</strong></div>';\n\n\t\t\t\tif($has_system_logs)\n\t\t\t\t{\n\t\t\t\t\t$t .= '<div class=\"div_table_cell\">' . ($system_count == 1 || $sys->has_log_files() ? '<button type=\"button\" onclick=\"javascript:display_system_logs_for_result(\\'' . $public_id . '\\', \\'' . $sys->get_original_identifier() . '\\'); return false;\">View System Logs</button>' : ' ') . '</div>';\n\t\t\t\t}\n\t\t\t\t$stime = strtotime($sys->get_timestamp());\n\t\t\t\t$t .= '<div class=\"div_table_cell\"><input type=\"number\" min=\"0\" step=\"0.001\" name=\"ppd_' . $ppdx . '\" value=\"' . ($ppd && $ppd !== true ? strip_tags($ppd) : '0') . '\" /></div>\n\t\t\t<div class=\"div_table_cell\">' . date(($stime > $start_of_year ? 'F d' : 'F d Y'), $stime) . '</div>\n\t\t\t<div class=\"div_table_cell\"> &nbsp; ' . (isset($test_run_times[$si]) && $test_run_times[$si] > 0 ? pts_strings::format_time($test_run_times[$si], 'SECONDS', true, 60) : ' ') . '</div>';\n\n\t\t\t\tif($can_delete_results && !empty($public_id))\n\t\t\t\t{\n\t\t\t\t\t$t .= '<div class=\"div_table_cell\">';\n\t\t\t\t\tif($system_count > 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t$t .= '<button type=\"button\" onclick=\"javascript:delete_run_from_result_file(\\'' . $public_id . '\\', \\'' . $si . '\\', \\'' . $ppdx . '\\'); return false;\">Delete Run</button> ';\n\t\t\t\t\t}\n\n\t\t\t\t\t$t .= '<button type=\"button\" onclick=\"javascript:rename_run_in_result_file(\\'' . $public_id . '\\', \\'' . $si . '\\'); return false;\">Rename Run</button></div>';\n\t\t\t\t}\n\t\t\t\t$t .= '</div>';\n\t\t\t}\n\n\t\t\tif($system_count > 1)\n\t\t\t{\n\t\t\t\t$t .= '\n\t\t\t\t<div class=\"div_table_row\">\n\t\t\t\t<div class=\"div_table_cell\"> </div>\n\t\t\t\t<div class=\"div_table_cell\"><input type=\"checkbox\" onclick=\"javascript:invert_hide_all_results_checkboxes();\" /></div>\n\t\t\t\t<div class=\"div_table_cell\"><em>Invert Hiding All Results Option</em></div>';\n\n\t\t\t\tif($has_system_logs)\n\t\t\t\t{\n\t\t\t\t\t$t .= '<div class=\"div_table_cell\"> </div>';\n\t\t\t\t}\n\n\t\t\t\t$t .= '<div class=\"div_table_cell\">' . self::html_select_menu('ppt', 'ppt', null, array('D' => 'Dollar', 'DPH' => 'Dollar / Hour'), true) . '</div>\n\t\t\t\t<div class=\"div_table_cell\"> </div>\n\t\t\t\t<div class=\"div_table_cell\"> &nbsp; <em>' . pts_strings::format_time(array_sum($test_run_times) / count($test_run_times), 'SECONDS', true, 60) . '</em></div>\n\t\t\t\t<div class=\"div_table_cell\">';\n\n\t\t\t\tif($can_delete_results)\n\t\t\t\t{\n\t\t\t\t\t$t .= '<button type=\"button\" onclick=\"javascript:reorder_result_file(\\'' . $public_id . '\\'); return false;\">Sort / Reorder Runs</button>';\n\t\t\t\t}\n\t\t\t\t$t .= '</div></div>';\n\t\t\t}\n\n\t\t\t$t .= '\n\t\t\t</div>\n\t\t\t</div></div>';\n\t\t}\n\n\t\t$analyze_options .= $t;\n\n\t\tif($system_count > 2)\n\t\t{\n\t\t\t$analyze_options .= '<br /><div>Only show results where ' . self::html_select_menu('ftt', 'ftt', null, array_merge(array(null), $result_file->get_system_identifiers()), false) . ' is faster than ' . self::html_select_menu('ftb', 'ftb', null, array_merge(array(null), $result_file->get_system_identifiers()), false) . '</div>';\n\t\t}\n\n\t\tif($result_file->get_test_count() > 1)\n\t\t{\n\t\t\t$analyze_options .= '<div>Only show results matching title/arguments (delimit multiple options with a comma): ' . self::html_input_field('oss', 'oss') . '</div>';\n\t\t}\n\n\t\t$analyze_options .= '<br /><input style=\"clear: both;\" name=\"submit\" value=\"Refresh Results\" type=\"submit\" /></form>';\n\n\t\treturn $analyze_options;\n\t}\n\tpublic static function process_result_export_pre_render(&$request, &$result_file, &$extra_attributes, $can_modify_results = false, $can_delete_results = false)\n\t{\n\t\tif(self::check_request_for_var($request, 'rdt'))\n\t\t{\n\t\t\t$result_file->reorder_runs($result_file->get_system_identifiers_by_date());\n\t\t}\n\n\t\t// Result export?\n\t\t$result_title = (isset($_GET['result']) ? $_GET['result'] : 'result');\n\t\tswitch(isset($_REQUEST['export']) ? $_REQUEST['export'] : '')\n\t\t{\n\t\t\tcase '':\n\t\t\t\tbreak;\n\t\t\tcase 'pdf':\n\t\t\t\theader('Content-Type: application/pdf');\n\t\t\t\t$pdf_output = pts_result_file_output::result_file_to_pdf($result_file, $result_title . '.pdf', 'D', $extra_attributes);\n\t\t\t\texit;\n\t\t\tcase 'html':\n\t\t\t\t$referral_url = '';\n\t\t\t\tif(defined('OPENBENCHMARKING_BUILD'))\n\t\t\t\t{\n\t\t\t\t\t$referral_url = 'https://openbenchmarking.org' . str_replace('&export=html', '', $_SERVER['REQUEST_URI']);\n\t\t\t\t}\n\t\t\t\techo pts_result_file_output::result_file_to_html($result_file, $extra_attributes, $referral_url);\n\t\t\t\texit;\n\t\t\tcase 'json':\n\t\t\t\theader('Content-Type: application/json');\n\t\t\t\techo pts_result_file_output::result_file_to_json($result_file);\n\t\t\t\texit;\n\t\t\tcase 'csv':\n\t\t\t\t$result_csv = pts_result_file_output::result_file_to_csv($result_file, ',', $extra_attributes);\n\t\t\t\theader('Content-Description: File Transfer');\n\t\t\t\theader('Content-Type: application/csv');\n\t\t\t\theader('Content-Disposition: attachment; filename=' . $result_title . '.csv');\n\t\t\t\theader('Expires: 0');\n\t\t\t\theader('Cache-Control: must-revalidate');\n\t\t\t\theader('Pragma: public');\n\t\t\t\theader('Content-Length: ' . strlen($result_csv));\n\t\t\t\techo $result_csv;\n\t\t\t\texit;\n\t\t\tcase 'csv-all':\n\t\t\t\t$result_csv = pts_result_file_output::result_file_raw_to_csv($result_file);\n\t\t\t\theader('Content-Description: File Transfer');\n\t\t\t\theader('Content-Type: application/csv');\n\t\t\t\theader('Content-Disposition: attachment; filename=' . $result_title . '.csv');\n\t\t\t\theader('Expires: 0');\n\t\t\t\theader('Cache-Control: must-revalidate');\n\t\t\t\theader('Pragma: public');\n\t\t\t\theader('Content-Length: ' . strlen($result_csv));\n\t\t\t\techo $result_csv;\n\t\t\t\texit;\n\t\t\tcase 'txt':\n\t\t\t\t$result_txt = pts_result_file_output::result_file_to_text($result_file);\n\t\t\t\theader('Content-Description: File Transfer');\n\t\t\t\theader('Content-Type: text/plain');\n\t\t\t\theader('Content-Disposition: attachment; filename=' . $result_title . '.txt');\n\t\t\t\theader('Expires: 0');\n\t\t\t\theader('Cache-Control: must-revalidate');\n\t\t\t\theader('Pragma: public');\n\t\t\t\theader('Content-Length: ' . strlen($result_txt));\n\t\t\t\techo $result_txt;\n\t\t\t\texit;\n\t\t\tcase 'xml-suite':\n\t\t\t\t$suite_xml = pts_result_file_output::result_file_to_suite_xml($result_file);\n\t\t\t\theader('Content-Description: File Transfer');\n\t\t\t\theader('Content-Type: text/xml');\n\t\t\t\theader('Content-Disposition: attachment; filename=' . $result_title . '-suite.xml');\n\t\t\t\theader('Expires: 0');\n\t\t\t\theader('Cache-Control: must-revalidate');\n\t\t\t\theader('Pragma: public');\n\t\t\t\theader('Content-Length: ' . strlen($suite_xml));\n\t\t\t\techo $suite_xml;\n\t\t\t\texit;\n\t\t\tcase 'xml':\n\t\t\t\t$result_xml = $result_file->get_xml(null, true);\n\t\t\t\theader('Content-Description: File Transfer');\n\t\t\t\theader('Content-Type: text/xml');\n\t\t\t\theader('Content-Disposition: attachment; filename=' . $result_title . '.xml');\n\t\t\t\theader('Expires: 0');\n\t\t\t\theader('Cache-Control: must-revalidate');\n\t\t\t\theader('Pragma: public');\n\t\t\t\theader('Content-Length: ' . strlen($result_xml));\n\t\t\t\techo $result_xml;\n\t\t\t\texit;\n\t\t\tcase 'view_system_logs':\n\t\t\t\t$html_viewer = '';\n\t\t\t\tforeach($result_file->get_systems() as $system)\n\t\t\t\t{\n\t\t\t\t\t$sid = base64_decode($_REQUEST['system_id']);\n\n\t\t\t\t\tif($system->get_original_identifier() == $sid || $system->get_identifier() == $sid)\n\t\t\t\t\t{\n\t\t\t\t\t\t$system_logs = $system->log_files();\n\t\t\t\t\t\t$identifiers_with_logs = empty($system_logs) ? $result_file->identifiers_with_system_logs() : array();\n\t\t\t\t\t\t$show_log = isset($_REQUEST['log_select']) && $_REQUEST['log_select'] != 'undefined' && $_REQUEST['log_select'] != null ? $_REQUEST['log_select'] : (isset($system_logs[0]) ? $system_logs[0] : '');\n\t\t\t\t\t\t$log_contents = $system->log_files($show_log, false);\n\t\t\t\t\t\tpts_result_viewer_embed::display_log_html_or_download($log_contents, $system_logs, $show_log, $html_viewer, $sid, $identifiers_with_logs);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\techo pts_result_viewer_embed::html_template_log_viewer($html_viewer, $result_file);\n\t\t\t\texit;\n\t\t\tcase 'view_install_logs':\n\t\t\t\t$html_viewer = '';\n\t\t\t\tif(isset($_REQUEST['result_object']))\n\t\t\t\t{\n\t\t\t\t\tif(($result_object = $result_file->get_result_object_by_hash($_REQUEST['result_object'])))\n\t\t\t\t\t{\n\t\t\t\t\t\t$install_logs = $result_file->get_install_log_for_test($result_object->test_profile, false);\n\t\t\t\t\t\tif(count($install_logs) > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$show_log = isset($_REQUEST['log_select']) && $_REQUEST['log_select'] != 'undefined' ? $_REQUEST['log_select'] : (isset($install_logs[0]) ? $install_logs[0] : '');\n\t\t\t\t\t\t\t$log_contents = $result_file->get_install_log_for_test($result_object->test_profile, $show_log, false);\n\t\t\t\t\t\t\tpts_result_viewer_embed::display_log_html_or_download($log_contents, $install_logs, $show_log, $html_viewer, $result_object->test_profile->get_title() . ' Installation');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\techo pts_result_viewer_embed::html_template_log_viewer($html_viewer, $result_file);\n\t\t\t\texit;\n\t\t\tcase 'view_test_logs':\n\t\t\t\t$html_viewer = '';\n\t\t\t\tif(isset($_REQUEST['result_object']))\n\t\t\t\t{\n\t\t\t\t\tif(($result_object = $result_file->get_result_object_by_hash($_REQUEST['result_object'])))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(($test_logs = $result_file->get_test_run_log_for_result($result_object, false)))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$show_log = isset($_REQUEST['log_select']) && $_REQUEST['log_select'] != 'undefined' ? $_REQUEST['log_select'] : (isset($test_logs[0]) ? $test_logs[0] : '');\n\t\t\t\t\t\t\t$log_contents = $result_file->get_test_run_log_for_result($result_object, $show_log, false);\n\t\t\t\t\t\t\tpts_result_viewer_embed::display_log_html_or_download($log_contents, $test_logs, $show_log, $html_viewer, trim($result_object->test_profile->get_title() . ' ' . $result_object->get_arguments_description()));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\techo pts_result_viewer_embed::html_template_log_viewer($html_viewer, $result_file);\n\t\t\t\texit;\n\t\t}\n\t}\n\tpublic static function process_result_modify_pre_render(&$result_file, $can_modify_results = false, $can_delete_results = false)\n\t{\n\t\tif(!isset($_REQUEST['modify']) || ($can_modify_results == false && $can_delete_results == false))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tswitch($_REQUEST['modify'])\n\t\t{\n\t\t\tcase 'update-result-file-meta':\n\t\t\t\tif($can_modify_results && isset($_REQUEST['result_title']) && isset($_REQUEST['result_desc']))\n\t\t\t\t{\n\t\t\t\t\t$result_file->set_title($_REQUEST['result_title']);\n\t\t\t\t\t$result_file->set_description($_REQUEST['result_desc']);\n\t\t\t\t\t$result_file->save();\n\t\t\t\t}\n\t\t\t\texit;\n\t\t\tcase 'remove-result-object':\n\t\t\t\tif($can_delete_results && isset($_REQUEST['result_object']))\n\t\t\t\t{\n\t\t\t\t\tif($result_file->remove_result_object_by_id($_REQUEST['result_object']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$result_file->save();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\texit;\n\t\t\tcase 'remove-result-run':\n\t\t\t\tif($can_delete_results && isset($_REQUEST['result_run']))\n\t\t\t\t{\n\t\t\t\t\tif($result_file->remove_run($_REQUEST['result_run']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$result_file->save();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\texit;\n\t\t\tcase 'rename-result-run':\n\t\t\t\tif(VIEWER_CAN_MODIFY_RESULTS && isset($_REQUEST['result_run']) && isset($_REQUEST['new_result_run']))\n\t\t\t\t{\n\t\t\t\t\tif($result_file->rename_run($_REQUEST['result_run'], $_REQUEST['new_result_run']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$result_file->save();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\texit;\n\t\t\tcase 'add-annotation-to-result-object':\n\t\t\t\tif($can_modify_results && isset($_REQUEST['result_object']) && isset($_REQUEST['annotation']))\n\t\t\t\t{\n\t\t\t\t\tif($result_file->update_annotation_for_result_object_by_id($_REQUEST['result_object'], $_REQUEST['annotation']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$result_file->save();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\texit;\n\t\t\tcase 'reorder_result_file':\n\t\t\t\tif($can_modify_results)\n\t\t\t\t{\n\t\t\t\t\tif(count($result_file_identifiers = $result_file->get_system_identifiers()) > 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(isset($_POST['reorder_post']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$sort_array = array();\n\n\t\t\t\t\t\t\tforeach($result_file_identifiers as $i => $id)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(isset($_POST[base64_encode($id)]))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$sort_array[$id] = $_POST[base64_encode($id)];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tasort($sort_array);\n\t\t\t\t\t\t\t$sort_array = array_keys($sort_array);\n\t\t\t\t\t\t\t$result_file->reorder_runs($sort_array);\n\t\t\t\t\t\t\t$result_file->save();\n\t\t\t\t\t\t\techo '<p>Result file is now reordered. <script> window.close(); </script></p>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(isset($_POST['auto_sort']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsort($result_file_identifiers);\n\t\t\t\t\t\t\t$result_file->reorder_runs($result_file_identifiers);\n\t\t\t\t\t\t\t$result_file->save();\n\t\t\t\t\t\t\techo '<p>Result file is now auto-sorted. <script> window.close(); </script></p>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\techo '<p>Reorder the result file as desired by altering the numbering from lowest to highest.</p>';\n\t\t\t\t\t\t\techo '<form method=\"post\" action=\"' . $_SERVER['REQUEST_URI'] . '\">';\n\t\t\t\t\t\t\tforeach($result_file_identifiers as $i => $id)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\techo '<input style=\"width: 80px;\" name=\"' . base64_encode($id) . '\" type=\"number\" min=\"0\" value=\"' . ($i + 1) . '\" />' . $id . '<br />';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\techo '<input type=\"hidden\" name=\"reorder_post\" value=\"1\" /><input type=\"submit\" value=\"Reorder Results\" /></form>';\n\t\t\t\t\t\t\techo '<form method=\"post\" action=\"' . $_SERVER['REQUEST_URI'] . '\">';\n\n\t\t\t\t\t\t\techo '<input type=\"hidden\" name=\"auto_sort\" value=\"1\" /><input type=\"submit\" value=\"Auto-Sort Result File\" /></form>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\texit;\n\t\t}\n\t}\n\tpublic static function process_helper_html(&$request, &$result_file, &$extra_attributes, $can_modify_results = false, $can_delete_results = false)\n\t{\n\t\tself::process_result_export_pre_render($request, $result_file, $extra_attributes, $can_modify_results, $can_delete_results);\n\t\t$html = null;\n\t\tif(self::check_request_for_var($request, 'spr'))\n\t\t{\n\t\t\t$results = $result_file->get_result_objects();\n\t\t\t$spreads = array();\n\t\t\tforeach($results as $i => &$result_object)\n\t\t\t{\n\t\t\t\t$spreads[$i] = $result_object->get_spread();\n\t\t\t}\n\t\t\tarsort($spreads);\n\t\t\t$spreads = array_slice($spreads, 0, min((int)(count($results) / 4), 10), true);\n\n\t\t\tif(!empty($spreads))\n\t\t\t{\n\t\t\t\t$html .= '<h3>Notable Results</h3>';\n\t\t\t\tforeach($spreads as $result_key => $spread)\n\t\t\t\t{\n\t\t\t\t\t$ro = $result_file->get_result_objects($result_key);\n\t\t\t\t\tif(!is_object($ro[0]))\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$html .= '<a href=\"#r-' . $result_key . '\">' . $ro[0]->test_profile->get_title() . ' - ' . $ro[0]->get_arguments_description() . '</a><br />';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $html;\n\t}\n\tpublic static function check_request_for_var(&$request, $check)\n\t{\n\t\t// the obr_ check is to maintain OpenBenchmarking.org compatibility for its original variable naming to preserve existing URLs\n\t\t$ret = false;\n\t\tif(defined('OPENBENCHMARKING_BUILD') && isset($request['obr_' . $check]))\n\t\t{\n\t\t\t$ret = empty($request['obr_' . $check]) ? true : $request['obr_' . $check];\n\t\t}\n\t\tif(isset($request[$check]))\n\t\t{\n\t\t\t$ret = empty($request[$check]) ? true : $request[$check];\n\t\t}\n\n\t\tif($ret && isset($ret[5]))\n\t\t{\n\t\t\t$ret = str_replace('_DD_', '.', $ret);\n\t\t}\n\n\t\treturn $ret;\n\t}\n\tpublic static function process_request_to_attributes(&$request, &$result_file, &$extra_attributes)\n\t{\n\t\tif(($oss = self::check_request_for_var($request, 'oss')))\n\t\t{\n\t\t\t$oss = pts_strings::comma_explode($oss);\n\t\t\tforeach($result_file->get_result_objects() as $i => $result_object)\n\t\t\t{\n\t\t\t\t$matched = false;\n\t\t\t\tforeach($oss as $search_check)\n\t\t\t\t{\n\t\t\t\t\tif(stripos($result_object->get_arguments_description(), $search_check) === false && stripos($result_object->test_profile->get_identifier(), $search_check) === false && stripos($result_object->test_profile->get_title(), $search_check) === false)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Not found\n\t\t\t\t\t\t$matched = false;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$matched = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!$matched)\n\t\t\t\t{\n\t\t\t\t\t$result_file->remove_result_object_by_id($i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(self::check_request_for_var($request, 'ftt') && self::check_request_for_var($request, 'ftt'))\n\t\t{\n\t\t\t$ftt = self::check_request_for_var($request, 'ftt');\n\t\t\t$ftb = self::check_request_for_var($request, 'ftb');\n\t\t\tif(!empty($ftt) && !empty($ftb) && $ftt !== true && $ftb !== true)\n\t\t\t{\n\t\t\t\tforeach($result_file->get_result_objects() as $i => $result_object)\n\t\t\t\t{\n\t\t\t\t\t$ftt_result = $result_object->test_result_buffer->get_result_from_identifier($ftt);\n\t\t\t\t\t$ftb_result = $result_object->test_result_buffer->get_result_from_identifier($ftb);\n\n\t\t\t\t\tif($ftt_result && $ftb_result)\n\t\t\t\t\t{\n\t\t\t\t\t\t$ftt_wins = false;\n\n\t\t\t\t\t\tif($result_object->test_profile->get_result_proportion() == 'HIB')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif($ftt_result > $ftb_result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$ftt_wins = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif($ftt_result < $ftb_result)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$ftt_wins = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(!$ftt_wins)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$result_file->remove_result_object_by_id($i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$result_file->remove_result_object_by_id($i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(($stis = self::check_request_for_var($request, 'stis')))\n\t\t{\n\t\t\tif(!is_array($stis))\n\t\t\t{\n\t\t\t\t$stis = explode(',', $stis);\n\t\t\t}\n\t\t\t$suites_in_result_file = pts_test_suites::suites_in_result_file($result_file, true, 0);\n\t\t\t$tests_to_show = array();\n\t\t\tforeach($stis as $suite_to_show)\n\t\t\t{\n\t\t\t\t$suite_to_show = base64_decode($suite_to_show);\n\t\t\t\tif(isset($suites_in_result_file[$suite_to_show]))\n\t\t\t\t{\n\t\t\t\t\tforeach($suites_in_result_file[$suite_to_show][1] as $test_to_show)\n\t\t\t\t\t{\n\t\t\t\t\t\t$tests_to_show[] = $test_to_show;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!empty($tests_to_show))\n\t\t\t{\n\t\t\t\tforeach($result_file->get_result_objects() as $i => $result_object)\n\t\t\t\t{\n\t\t\t\t\tif($result_object->get_parent_hash())\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!$result_file->get_result_object_by_hash($result_object->get_parent_hash()) || !in_array($result_file->get_result_object_by_hash($result_object->get_parent_hash())->test_profile->get_identifier(false), $tests_to_show))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$result_file->remove_result_object_by_id($i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(!in_array($result_object->test_profile->get_identifier(false), $tests_to_show))\n\t\t\t\t\t{\n\t\t\t\t\t\t$result_file->remove_result_object_by_id($i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(self::check_request_for_var($request, 'hlc'))\n\t\t{\n\t\t\tforeach($result_file->get_result_objects() as $i => $result_object)\n\t\t\t{\n\t\t\t\tif($result_object->result_flat())\n\t\t\t\t{\n\t\t\t\t\t$result_file->remove_result_object_by_id($i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(self::check_request_for_var($request, 'hnr'))\n\t\t{\n\t\t\t$result_file->remove_noisy_results();\n\t\t}\n\t\tif(self::check_request_for_var($request, 'hni'))\n\t\t{\n\t\t\t$system_count = $result_file->get_system_count();\n\t\t\tforeach($result_file->get_result_objects() as $i => $result_object)\n\t\t\t{\n\t\t\t\tif($result_object->test_result_buffer->get_count() < $system_count)\n\t\t\t\t{\n\t\t\t\t\t$result_file->remove_result_object_by_id($i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(self::check_request_for_var($request, 'grs'))\n\t\t{\n\t\t\t$result_file->sort_result_object_order_by_spread();\n\t\t}\n\t\telse if(self::check_request_for_var($request, 'grt'))\n\t\t{\n\t\t\t$result_file->sort_result_object_order_by_title();\n\t\t}\n\t\telse if(self::check_request_for_var($request, 'gru'))\n\t\t{\n\t\t\t$result_file->sort_result_object_order_by_result_scale();\n\t\t}\n\t\telse if(self::check_request_for_var($request, 'grr'))\n\t\t{\n\t\t\t$result_file->sort_result_object_order_by_run_time();\n\t\t}\n\n\t\tif(self::check_request_for_var($request, 'shm'))\n\t\t{\n\t\t\tforeach(pts_result_file_analyzer::generate_harmonic_mean_result($result_file) as $result)\n\t\t\t{\n\t\t\t\tif($result)\n\t\t\t\t{\n\t\t\t\t\t$result_file->add_result($result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(self::check_request_for_var($request, 'sgm'))\n\t\t{\n\t\t\t$result = pts_result_file_analyzer::generate_geometric_mean_result($result_file);\n\t\t\tif($result)\n\t\t\t{\n\t\t\t\t$result_file->add_result($result);\n\t\t\t}\n\t\t}\n\t\tif(self::check_request_for_var($request, 'sts'))\n\t\t{\n\t\t\tforeach(pts_result_file_analyzer::generate_geometric_mean_result_for_suites_in_result_file($result_file, true, 0) as $result)\n\t\t\t{\n\t\t\t\tif($result)\n\t\t\t\t{\n\t\t\t\t\t$result_file->add_result($result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(self::check_request_for_var($request, 'swl'))\n\t\t{\n\t\t\tforeach(pts_result_file_analyzer::generate_wins_losses_results($result_file) as $result)\n\t\t\t{\n\t\t\t\tif($result)\n\t\t\t\t{\n\t\t\t\t\t$result_file->add_result($result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(self::check_request_for_var($request, 'cts'))\n\t\t{\n\t\t\tpts_result_file_analyzer::condense_result_file_by_multi_option_tests($result_file);\n\t\t}\n\t\tif(self::check_request_for_var($request, 'cmv'))\n\t\t{\n\t\t\tpts_result_file_analyzer::condense_result_file_by_multi_version_tests($result_file);\n\t\t}\n\t\tif(self::check_request_for_var($request, 'sor'))\n\t\t{\n\t\t\t$extra_attributes['sort_result_buffer_values'] = true;\n\t\t}\n\t\tif(self::check_request_for_var($request, 'rro'))\n\t\t{\n\t\t\t$extra_attributes['reverse_result_buffer'] = true;\n\t\t}\n\t\tif(self::check_request_for_var($request, 'sro'))\n\t\t{\n\t\t\t$extra_attributes['sort_result_buffer'] = true;\n\t\t}\n\t\tif(self::check_request_for_var($request, 'nor'))\n\t\t{\n\t\t\t$extra_attributes['normalize_result_buffer'] = true;\n\t\t}\n\t\tif(self::check_request_for_var($request, 'ftr'))\n\t\t{\n\t\t\t$extra_attributes['force_tracking_line_graph'] = true;\n\t\t}\n\t\tif(self::check_request_for_var($request, 'imw'))\n\t\t{\n\t\t\t$extra_attributes['multi_way_comparison_invert_default'] = false;\n\t\t}\n\t\tif(self::check_request_for_var($request, 'cmw'))\n\t\t{\n\t\t\t$extra_attributes['condense_multi_way'] = true;\n\t\t}\n\t\tif(($hgv = self::check_request_for_var($request, 'hgv')))\n\t\t{\n\t\t\tif(is_array($hgv))\n\t\t\t{\n\t\t\t\t$extra_attributes['highlight_graph_values'] = $hgv;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$extra_attributes['highlight_graph_values'] = explode(',', $hgv);\n\t\t\t}\n\t\t}\n\t\telse if(self::check_request_for_var($request, 'hgv_base64'))\n\t\t{\n\t\t\t$extra_attributes['highlight_graph_values'] = explode(',', base64_decode(self::check_request_for_var($request, 'hgv_base64')));\n\t\t}\n\t\tif(($rmm = self::check_request_for_var($request, 'rmm')))\n\t\t{\n\t\t\tif(!is_array($rmm))\n\t\t\t{\n\t\t\t\t$rmm = explode(',', $rmm);\n\t\t\t}\n\n\t\t\tforeach($rmm as $rm)\n\t\t\t{\n\t\t\t\t$result_file->remove_run($rm);\n\t\t\t}\n\t\t}\n\t\tif(self::check_request_for_var($request, 'scalar'))\n\t\t{\n\t\t\t$extra_attributes['compact_to_scalar'] = true;\n\t\t}\n\t\tif(self::check_request_for_var($request, 'ncb'))\n\t\t{\n\t\t\t$extra_attributes['no_color_branding'] = true;\n\t\t}\n\t\tif(self::check_request_for_var($request, 'nbp'))\n\t\t{\n\t\t\t$extra_attributes['no_box_plots'] = true;\n\t\t}\n\t\tif(self::check_request_for_var($request, 'vb'))\n\t\t{\n\t\t\t$extra_attributes['vertical_bars'] = true;\n\t\t}\n\t\t/*\n\t\tif(self::check_request_for_var($request, 'gtb'))\n\t\t{\n\t\t\t$extra_attributes['graph_render_type'] = 'HORIZONTAL_BOX_PLOT';\n\t\t}\n\t\telse if(self::check_request_for_var($request, 'gtl'))\n\t\t{\n\t\t\t$extra_attributes['graph_render_type'] = 'LINE_GRAPH';\n\t\t\t$extra_attributes['graph_raw_values'] = true;\n\t\t}\n\t\t*/\n\t\tif(self::check_request_for_var($request, 'rol'))\n\t\t{\n\t\t\tforeach($result_file->get_result_objects() as $i => $result_object)\n\t\t\t{\n\t\t\t\t$result_object->recalculate_averages_without_outliers(1.5);\n\t\t\t}\n\t\t}\n\n\t\t$perf_per_dollar_values = array();\n\t\tforeach($result_file->get_system_identifiers() as $si)\n\t\t{\n\t\t\t$ppd = self::check_request_for_var($request, 'ppd_' . rtrim(base64_encode($si), '='));\n\t\t\tif($ppd && $ppd > 0 && is_numeric($ppd))\n\t\t\t{\n\t\t\t\t$perf_per_dollar_values[$si] = $ppd;\n\t\t\t}\n\t\t}\n\n\t\tif(!empty($perf_per_dollar_values))\n\t\t{\n\t\t\t$perf_per_hour = self::check_request_for_var($request, 'ppt') == 'DPH';\n\t\t\tpts_result_file_analyzer::generate_perf_per_dollar($result_file, $perf_per_dollar_values, 'Dollar', false, $perf_per_hour);\n\t\t}\n\t}\n\tpublic static function html_input_field($name, $id, $on_change = null)\n\t{\n\t\treturn '<input type=\"text\" name=\"' . $name . '\" id=\"' . $id . '\" onclick=\"\" value=\"' . (isset($_REQUEST[$name]) ? strip_tags($_REQUEST[$name]) : null) . '\">';\n\t}\n\tpublic static function html_select_menu($name, $id, $on_change, $elements, $use_index = true, $other_attributes = array(), $selected = false)\n\t{\n\t\t$tag = null;\n\t\tforeach($other_attributes as $i => $v)\n\t\t{\n\t\t\t$tag .= ' ' . $i . '=\"' . $v . '\"';\n\t\t}\n\n\t\t$html_menu = '<select name=\"' . $name . '\" id=\"' . $id . '\" onchange=\"' . $on_change . '\"' . $tag . '>' . PHP_EOL;\n\n\t\tif($selected === false)\n\t\t{\n\t\t\t$selected = isset($_REQUEST[$name]) ? $_REQUEST[$name] : false;\n\t\t}\n\n\t\t$force_select = isset($other_attributes['multiple']);\n\n\t\tforeach($elements as $value => $name)\n\t\t{\n\t\t\tif($use_index == false)\n\t\t\t{\n\t\t\t\t$value = $name;\n\t\t\t}\n\t\t\tif($name == null)\n\t\t\t{\n\t\t\t\t$name = '[SELECT]';\n\t\t\t}\n\n\t\t\t$html_menu .= '<option value=\"' . $value . '\"' . ($value == $selected || $force_select ? ' selected=\"selected\"' : null) . '>' . $name . '</option>';\n\t\t}\n\n\t\t$html_menu .= '</select>';\n\n\t\treturn $html_menu;\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2015, Phoronix Media\n\tCopyright (C) 2014 - 2015, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_account_activity implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Account Activity';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$main = '<h1>Recent Account Activity</h1>';\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_activity_stream WHERE AccountID = :account_id ORDER BY ActivityTime DESC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$prev_date = null;\n\n\t\tif(empty($row))\n\t\t{\n\t\t\t$main .= '<p>No activity found.</p>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdo\n\t\t\t{\n\t\t\t\tif($prev_date != substr($row['ActivityTime'], 0, 10))\n\t\t\t\t{\n\t\t\t\t\tif($prev_date != null)\n\t\t\t\t\t\t$main .= '</p><hr />';\n\n\t\t\t\t\t$prev_date = substr($row['ActivityTime'], 0, 10);\n\t\t\t\t\t$new_date = strtotime($row['ActivityTime']);\n\n\t\t\t\t\tif(date('Y-m-d') == $prev_date)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h2>Today</h2>';\n\t\t\t\t\t}\n\t\t\t\t\telse if($new_date > (time() - (60 * 60 * 24 * 6)))\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h2>' . date('l', $new_date) . '</h2>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h2>' . date('j F Y', $new_date) . '</h2>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '<p>';\n\t\t\t\t}\n\n\t\t\t\t$id_link_format = $row['ActivityEventID'];\n\t\t\t\tswitch($row['ActivityEvent'])\n\t\t\t\t{\n\t\t\t\t\tcase 'settings':\n\t\t\t\t\t\t$event_link_format = '<a href=\"?settings\">settings</a>';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'users':\n\t\t\t\t\t\t$event_link_format = '<a href=\"?users\">a user</a>';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'schedule':\n\t\t\t\t\t\t$event_link_format = '<a href=\"?schedules\">schedule</a>';\n\n\t\t\t\t\t\t$stmt1 = phoromatic_server::$db->prepare('SELECT Title FROM phoromatic_schedules WHERE AccountID = :account_id AND ScheduleID = :schedule_id');\n\t\t\t\t\t\t$stmt1->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt1->bindValue(':schedule_id', $row['ActivityEventID']);\n\t\t\t\t\t\t$result1 = $stmt1->execute();\n\t\t\t\t\t\t$row1 = $result1->fetchArray();\n\t\t\t\t\t\t$id_link_format = '<a href=\"?schedules/' . $row['ActivityEventID'] . '\">' . $row1['Title'] . '</a>';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'tests_for_schedule':\n\t\t\t\t\t\t$event_link_format = 'a test for a schedule';\n\n\t\t\t\t\t\t$stmt1 = phoromatic_server::$db->prepare('SELECT Title FROM phoromatic_schedules WHERE AccountID = :account_id AND ScheduleID = :schedule_id');\n\t\t\t\t\t\t$stmt1->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt1->bindValue(':schedule_id', $row['ActivityEventID']);\n\t\t\t\t\t\t$result1 = $stmt1->execute();\n\t\t\t\t\t\t$row1 = $result1->fetchArray();\n\t\t\t\t\t\t$id_link_format = '<a href=\"?schedules/' . $row['ActivityEventID'] . '\">' . $row1['Title'] . '</a>';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'groups':\n\t\t\t\t\t\t$event_link_format = '<a href=\"?systems#group_edit\">a group</a>';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$event_link_format = $row['ActivityEvent'];\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif($row['ActivityCreatorType'] == 'USER')\n\t\t\t\t{\n\t\t\t\t\t$main .= '<em>' . date('H:i', strtotime($row['ActivityTime'])) . '</em> &nbsp; <strong>' . $row['ActivityCreator'] . '</strong> <strong> ' . $row['ActivityEventType'] . '</strong> <strong>' . $event_link_format . '</strong>';\n\n\t\t\t\t\tif($id_link_format != null)\n\t\t\t\t\t\t$main .= ': ' . $id_link_format;\n\n\t\t\t\t\t$main .= '<br />' . PHP_EOL;\n\t\t\t\t}\n\n\t\t\t\t//$main .= '<p>' .  $row['ActivityCreator'] . ' ' . $row['ActivityCreatorType'] . ' ' . $row['ActivityEvent'] . ' ' . $row['ActivityEventID'] . ' ' . $row['ActivityEventType'] . '</p>';\n\t\t\t}\n\t\t\twhile($row = $result->fetchArray());\n\n\t\t\tif($prev_date != null)\n\t\t\t\t$main .= '</p>';\n\t\t}\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo phoromatic_webui_main($main);\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2022, Phoronix Media\n\tCopyright (C) 2014 - 2022, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_admin implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Phoromatic Root Administrator';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\tif($_SESSION['AdminLevel'] != -40)\n\t\t{\n\t\t\theader('Location: /?main');\n\t\t}\n\t\t$main = null;\n\t\tif(isset($_POST['disable_user']))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_users SET AdminLevel = (AdminLevel * -1) WHERE UserName = :user_name');\n\t\t\t$stmt->bindValue(':user_name', $_POST['disable_user']);\n\t\t\t$result = $stmt->execute();\n\t\t\t$main .= '<h2>Disabled Account: ' . $_POST['disable_user'] . '</h2>';\n\t\t}\n\t\telse if(isset($_POST['change_user_password']))\n\t\t{\n\t\t\t$account_salt = phoromatic_server::$db->querySingle('SELECT Salt FROM phoromatic_accounts WHERE AccountID = (SELECT AccountID FROM phoromatic_users WHERE UserName = \\'' . $_POST['change_user_password'] . '\\')');\n\n\t\t\tif($account_salt != null)\n\t\t\t{\n\t\t\t\tif(strlen($_POST['new_user_password']) < 6)\n\t\t\t\t{\n\t\t\t\t\tphoromatic_error_page('Oops!', 'Please go back and ensure the supplied password is at least six characters long.');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t$new_salted_password = hash('sha256', $account_salt . $_POST['new_user_password']);\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_users SET Password = :new_password WHERE UserName = :user_name');\n\t\t\t\t$stmt->bindValue(':new_password', $new_salted_password);\n\t\t\t\t$stmt->bindValue(':user_name', $_POST['change_user_password']);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$main .= '<h2>Updated Password For Account: ' . $_POST['change_user_password'] . '</h2>';\n\t\t\t}\n\t\t}\n\t\telse if(isset($_POST['register_username']) && isset($_POST['register_password']) && isset($_POST['register_password_confirm']) && isset($_POST['register_email']))\n\t\t{\n\t\t\tphoromatic_quit_if_invalid_input_found(array('register_username', 'register_password', 'register_password_confirm', 'register_email', 'seed_accountid'));\n\t\t\t$new_account = create_new_phoromatic_account($_POST['register_username'], $_POST['register_password'], $_POST['register_password_confirm'], $_POST['register_email'], (isset($_POST['seed_accountid']) ? $_POST['seed_accountid'] : null));\n\t\t}\n\t\telse if(isset($_POST['email_all_subject']) && isset($_POST['email_all_message']) && !empty($_POST['email_all_message']))\n\t\t{\n\t\t\tphoromatic_quit_if_invalid_input_found(array('email_all_subject', 'email_all_message'));\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_users ORDER BY UserName ASC');\n\t\t\t$result = $stmt->execute();\n\n\t\t\twhile($row = $result->fetchArray())\n\t\t\t{\n\t\t\t\t$user = $row['UserName'];\n\t\t\t\t$email = $row['email'];\n\t\t\t\tphoromatic_server::send_email($email, $_POST['email_all_subject'], $_POST['email_all_reply_to'], $_POST['email_all_message']);\n\t\t\t}\n\t\t\techo '<h2>Emails sent to all Phoromatic users.</h2>';\n\t\t}\n\t\t$main .= '<h1>Phoromatic Server Administration</h1>';\n\n\t\t$main .= '<hr /><h2>Server Information</h2>';\n\t\t$main .= '<p><strong>HTTP Server Port:</strong> ' . getenv('PTS_WEB_PORT') . '<br /><strong>WebSocket Server Port:</strong> ' . getenv('PTS_WEBSOCKET_PORT') . '<br /><strong>Phoromatic Server Path:</strong> ' . phoromatic_server::phoromatic_path() . '<br /><strong>Configuration File:</strong>: ' . pts_config::get_config_file_location() . '</p>';\n\n\t\t$main .= '<hr /><h2>Statistics</h2>';\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(Title) AS SystemCount FROM phoromatic_systems WHERE State >= 0');\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$stats['Total System Count'] = $row['SystemCount'];\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(Title) AS ScheduleCount FROM phoromatic_schedules WHERE State >= 1');\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$stats['Total Schedule Count'] = $row['ScheduleCount'];\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(UploadID) AS ResultCount FROM phoromatic_results');\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$stats['Total Result Count'] = $row['ResultCount'];\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(ActivityTime) AS ActivityCount FROM phoromatic_activity_stream');\n\t\t$stmt->bindValue(':today_date', date('Y-m-d') . '%');\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$stats['Total Activity Count'] = $row['ActivityCount'];\n\n\t\t$main .= '<p>';\n\t\tforeach($stats as $what => $c)\n\t\t\t$main .= '<strong>' . $what . ':</strong> ' . $c . '<br />';\n\n\n\t\t$main .= '<hr /><h2>Account Topology</h2>';\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_users ORDER BY AccountID,AdminLevel ASC');\n\t\t$result = $stmt->execute();\n\n\t\t$plevel = -1;\n\t\t$user_list = array();\n\t\twhile($row = $result->fetchArray())\n\t\t{\n\t\t\tswitch($row['AdminLevel'])\n\t\t\t{\n\t\t\t\tcase 1:\n\t\t\t\t\t$level = 'Group Administrator';\n\t\t\t\t\t$offset = null;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t$level = 'Administrator';\n\t\t\t\t\t$offset = str_repeat('-', 10);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\t$level = 'Power User';\n\t\t\t\t\t$offset = str_repeat('-', 20);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 10:\n\t\t\t\t\t$level = 'Viewer';\n\t\t\t\t\t$offset = str_repeat('-', 30);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tif($row['AdminLevel'] < 1)\n\t\t\t\t\t\t$level = 'Disabled';\n\t\t\t\t\telse\n\t\t\t\t\t\t$level = 'Unknown';\n\n\t\t\t\t\t$offset = null;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif($row['AdminLevel'] == 1)\n\t\t\t{\n\t\t\t\tif($plevel != -1)\n\t\t\t\t\t$main .= '</p>';\n\t\t\t\t$main .= '<p>';\n\t\t\t}\n\n\t\t\t$main .= $offset . ' <strong>' . $row['UserName'] . '</strong> (<em>' . $level . '</em>) <strong>Created On:</strong> ' . phoromatic_user_friendly_timedate($row['CreatedOn']) . ' <strong>Last Log-In:</strong> ' . ($row['LastLogin'] != null ? phoromatic_user_friendly_timedate($row['LastLogin']) : 'N/A') . ($row['AdminLevel'] == 1 ? ' [<strong>ACCOUNT ID:</strong> ' . $row['AccountID'] . ']' : null) . '<br />';\n\t\t\t$plevel = $row['AdminLevel'];\n\t\t\t$user_list[$row['UserName']] = $row['AdminLevel'];\n\t\t}\n\t\tif($plevel != -1)\n\t\t\t$main .= '</p>';\n\n\t\t$main .= '<hr /><h2>Disable Account</h2>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"disable_user\" id=\"disable_user\" method=\"post\"><p><select name=\"disable_user\">';\n\t\tforeach($user_list as $user_name => $user_level)\n\t\t{\n\t\t\tif($user_level > 0)\n\t\t\t{\n\t\t\t\t$main .= '<option value=\"' . $user_name . '\">' . $user_name . '</option>';\n\t\t\t}\n\t\t}\n\t\t$main .= '</select></p><p><input name=\"submit\" value=\"Disable User\" type=\"submit\" /></p></form>';\n\n\t\t$main .= '<hr /><h2>Change User Password</h2>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"change_user_pass\" id=\"change_user_pass\" method=\"post\"><p><select name=\"change_user_password\">';\n\t\tforeach($user_list as $user_name => $user_level)\n\t\t{\n\t\t\tif($user_level > 0)\n\t\t\t{\n\t\t\t\t$main .= '<option value=\"' . $user_name . '\">' . $user_name . '</option>';\n\t\t\t}\n\t\t}\n\t\t$main .= '<p><input type=\"password\" name=\"new_user_password\" /> <sup>2</sup></p></select></p><p><input name=\"submit\" value=\"Override User Password\" type=\"submit\" /></p></form>';\n\n\t\t$main .= '<hr /><h2>Create New Account Group</h2>';\n\t\t$main .= '<form name=\"register_form\" id=\"register_form\" action=\"?admin\" method=\"post\" onsubmit=\"return phoromatic_initial_registration(this);\">\n\t\t<h3>Username</h3>\n\t\t<p><input type=\"text\" name=\"register_username\" /> <sup>1</sup></p>\n\t\t<h3>Password</h3>\n\t\t<p><input type=\"password\" name=\"register_password\" /> <sup>2</sup></p>\n\t\t<h3>Confirm Password</h3>\n\t\t<p><input type=\"password\" name=\"register_password_confirm\" /></p>\n\t\t<h3>Email</h3>\n\t\t<p><input type=\"text\" name=\"register_email\" /> <sup>3</sup></p>\n\t\t<h3>Account ID</h3>\n\t\t<p><input type=\"text\" name=\"seed_accountid\" /> <sup>4</sup></p>\n\t\t<p><input type=\"submit\" value=\"Create Account\" /></p>\n\t\t</form>\n\t\t<p style=\"font-size: 11px;\"><sup>1</sup> Usernames shall be at least four characters long, not contain any spaces, and only be composed of normal ASCII characters.<br />\n\t\t<sup>2</sup> Passwords shall be at least six characters long.<br />\n\t\t<sup>3</sup> A valid email address is required for notifications, password reset, and other verification purposes.<br />\n\t\t<sup>4</sup> The account ID field is optional and is used to pre-seed the account identifier for advanced purposes. The field must be six characters. Leave this field blank if you are unsure.<br />\n\t\t\t\t\t\t</p>';\n\n\t\t//\n\t\t$server_log = explode(PHP_EOL, file_get_contents(getenv('PTS_PHOROMATIC_LOG_LOCATION')));\n\t\tforeach($server_log as $i => $line_item)\n\t\t{\n\t\t\tif(strpos($line_item, '[200]') !== false || strpos($line_item, '[302]') !== false)\n\t\t\t{\n\t\t\t\tunset($server_log[$i]);\n\t\t\t}\n\t\t}\n\t\t$server_log = implode(PHP_EOL, $server_log);\n\n\t\t$main .= '<hr /><h2>Phoromatic Server Log</h2>';\n\t\t$main .= '<p><textarea style=\"width: 80%; height: 400px;\">' . $server_log  . '</textarea></p>';\n\n\t\t$main .= '<hr /><h2>Email All Users</h2>';\n\t\t$main .= '<form name=\"email_all\" id=\"email_all\" action=\"?admin\" method=\"post\">\n\t\t<h3>Reply-To Email Address:</h3>\n\t\t<p><input type=\"text\" name=\"email_all_reply_to\" /></p>\n\t\t<h3>Subject:</h3>\n\t\t<p><input type=\"text\" name=\"email_all_subject\" /></p>\n\t\t<h3>Message:</h3>\n\t\t<p> <textarea rows=\"4\" cols=\"50\" name=\"email_all_message\"></textarea></p>\n\t\t<p><input type=\"submit\" value=\"Send Email\" /></p>\n\t\t</form>';\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in());\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2018, Phoronix Media\n\tCopyright (C) 2014 - 2018, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_admin_config implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Phoromatic Server Configuration';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\tif($_SESSION['AdminLevel'] != -40)\n\t\t{\n\t\t\theader('Location: /?main');\n\t\t}\n\t\t$main = null;\n\n\t\tif(isset($_POST['new_phoromatic_path']) && !empty($_POST['new_phoromatic_path']))\n\t\t{\n\t\t\t$new_dir = dirname($_POST['new_phoromatic_path']);\n\n\t\t\tif(!is_dir($new_dir))\n\t\t\t{\n\t\t\t\t$main .= '<h2 style=\"color: red;\"><em>' . $new_dir . '</em> must be a valid directory.</h2>';\n\t\t\t}\n\t\t\telse if(!is_writable($new_dir))\n\t\t\t{\n\t\t\t\t$main .= '<h2 style=\"color: red;\"><em>' . $new_dir . '</em> is not a writable location.</h2>';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(!is_dir($_POST['new_phoromatic_path']))\n\t\t\t\t{\n\t\t\t\t\tif(mkdir($_POST['new_phoromatic_path']) == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h2 style=\"color: red;\">Failed to make directory <em>' . $_POST['new_phoromatic_path'] . '</em>.</h2>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(is_dir($_POST['new_phoromatic_path']))\n\t\t\t\t{\n\t\t\t\t\t$new_phoromatic_dir = pts_strings::add_trailing_slash($_POST['new_phoromatic_path']);\n\n\t\t\t\t\t$d = glob($new_phoromatic_dir . '*');\n\t\t\t\t\tif(!empty($d))\n\t\t\t\t\t{\n\t\t\t\t\t\t$new_phoromatic_dir .= 'phoromatic/';\n\t\t\t\t\t\tpts_file_io::mkdir($new_phoromatic_dir);\n\t\t\t\t\t}\n\n\t\t\t\t\t$d = glob($new_phoromatic_dir . '*');\n\t\t\t\t\tif(!empty($d))\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h2 style=\"color: red;\"><em>' . $new_phoromatic_dir . '</em> must be an empty directory.</h2>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(pts_file_io::copy(phoromatic_server::phoromatic_path(), $new_phoromatic_dir))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpts_config::user_config_generate(array('PhoromaticStorage' => $new_phoromatic_dir));\n\t\t\t\t\t\t\theader('Location: /?admin');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$main .= '<h2 style=\"color: red;\"><em>Failed to copy old Phoromatic data to new location.</h2>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(isset($_POST['new_dc_path']) && !empty($_POST['new_dc_path']))\n\t\t{\n\t\t\t$new_dir = dirname($_POST['new_dc_path']);\n\n\t\t\tif(!is_dir($new_dir))\n\t\t\t{\n\t\t\t\t$main .= '<h2 style=\"color: red;\"><em>' . $new_dir . '</em> must be a valid directory.</h2>';\n\t\t\t}\n\t\t\telse if(!is_writable($new_dir))\n\t\t\t{\n\t\t\t\t$main .= '<h2 style=\"color: red;\"><em>' . $new_dir . '</em> is not a writable location.</h2>';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(!is_dir($_POST['new_dc_path']))\n\t\t\t\t{\n\t\t\t\t\tif(mkdir($_POST['new_dc_path']) == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h2 style=\"color: red;\">Failed to make directory <em>' . $_POST['new_dc_path'] . '</em>.</h2>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(is_dir($_POST['new_dc_path']))\n\t\t\t\t{\n\t\t\t\t\t$new_dc_dir = pts_strings::add_trailing_slash($_POST['new_dc_path']);\n\n\t\t\t\t\tif(pts_file_io::copy(pts_client::download_cache_path(), $new_dc_dir))\n\t\t\t\t\t{\n\t\t\t\t\t\tpts_config::user_config_generate(array('CacheDirectory' => $new_dc_dir));\n\t\t\t\t\t\theader('Location: /?admin');\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h2 style=\"color: red;\"><em>Failed to copy old Phoromatic data to new location.</h2>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(isset($_POST['new_proxy_address']) && isset($_POST['new_proxy_port']))\n\t\t{\n\t\t\tif(pts_network::http_get_contents('http://www.phoronix-test-suite.com/PTS', $_POST['new_proxy_address'], $_POST['new_proxy_port']) == 'PTS')\n\t\t\t{\n\t\t\t\tpts_config::user_config_generate(array(\n\t\t\t\t\t'PhoronixTestSuite/Options/Networking/ProxyAddress' => $_POST['new_proxy_address'],\n\t\t\t\t\t'PhoronixTestSuite/Options/Networking/ProxyPort' => $_POST['new_proxy_port']\n\t\t\t\t\t));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$main .= '<h2 style=\"color: red;\">Failed to connect via proxy server.</h2>';\n\t\t\t}\n\t\t}\n\t\tif(isset($_POST['new_http_port']) && isset($_POST['new_ws_port']))\n\t\t{\n\t\t\tif(empty($_POST['new_http_port']) || (!is_numeric($_POST['new_http_port']) && $_POST['new_http_port'] != 'RANDOM'))\n\t\t\t{\n\t\t\t\t$main .= '<h2 style=\"color: red;\">The HTTP port must be a valid port number or <em>RANDOM</em>.</h2>';\n\t\t\t}\n\t\t\tif(empty($_POST['new_ws_port']) || (!is_numeric($_POST['new_ws_port']) && $_POST['new_ws_port'] != 'RANDOM'))\n\t\t\t{\n\t\t\t\t$main .= '<h2 style=\"color: red;\">The WebSocket port must be a valid port number or <em>RANDOM</em>.</h2>';\n\t\t\t}\n\t\t\tpts_config::user_config_generate(array(\n\t\t\t\t'PhoronixTestSuite/Options/Server/RemoteAccessPort' => $_POST['new_http_port'],\n\t\t\t\t'PhoronixTestSuite/Options/Server/WebSocketPort' => $_POST['new_ws_port']\n\t\t\t\t));\n\t\t}\n\t\tif(isset($_POST['add_new_users_to_account']))\n\t\t{\n\t\t\tif(empty($_POST['add_new_users_to_account']))\n\t\t\t{\n\t\t\t\tphoromatic_server::save_setting('add_new_users_to_account', null);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(AccountID) AS AccountHitCount FROM phoromatic_accounts WHERE AccountID = :account_id');\n\t\t\t\t$stmt->bindValue(':account_id', $_POST['add_new_users_to_account']);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$row = $result->fetchArray();\n\t\t\t\tif(empty($row['AccountHitCount']))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<h2 style=\"color: red;\"><em>' . $_POST['add_new_users_to_account'] . '</em> is not a valid account ID.</h2>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tphoromatic_server::save_setting('add_new_users_to_account', $_POST['add_new_users_to_account']);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(isset($_POST['account_creation_alt']))\n\t\t{\n\t\t\tphoromatic_server::save_setting('account_creation_alt', $_POST['account_creation_alt']);\n\t\t}\n\t\tif(isset($_POST['main_page_message']))\n\t\t{\n\t\t\tphoromatic_server::save_setting('main_page_message', $_POST['main_page_message']);\n\t\t}\n\t\tif(isset($_POST['force_result_sharing']))\n\t\t{\n\t\t\tphoromatic_server::save_setting('force_result_sharing', $_POST['force_result_sharing']);\n\t\t}\n\t\tif(isset($_POST['show_local_tests_only']))\n\t\t{\n\t\t\tphoromatic_server::save_setting('show_local_tests_only', $_POST['show_local_tests_only']);\n\t\t}\n\t\tif(isset($_POST['new_admin_support_email']))\n\t\t{\n\t\t\tphoromatic_server::save_setting('admin_support_email', $_POST['new_admin_support_email']);\n\t\t}\n\t\tif(isset($_POST['rebuild_results_db']))\n\t\t{\n\t\t\tforeach(pts_file_io::glob(phoromatic_server::phoromatic_path() . 'accounts/*/results/*/composite.xml') as $composite_xml)\n\t\t\t{\n\t\t\t\t$account_id = basename(dirname(dirname(dirname($composite_xml))));\n\t\t\t\t$upload_id = basename(dirname($composite_xml));\n\n\t\t\t\t$result_file = new pts_result_file($composite_xml);\n\n\t\t\t\t// Validate the XML\n\t\t\t\t$relative_id = 0;\n\t\t\t\tforeach($result_file->get_result_objects() as $result_object)\n\t\t\t\t{\n\t\t\t\t\t$relative_id++;\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_results_results (AccountID, UploadID, AbstractID, TestProfile, ComparisonHash) VALUES (:account_id, :upload_id, :abstract_id, :test_profile, :comparison_hash)');\n\t\t\t\t\t$stmt->bindValue(':account_id', $account_id);\n\t\t\t\t\t$stmt->bindValue(':upload_id', $upload_id);\n\t\t\t\t\t$stmt->bindValue(':abstract_id', $relative_id);\n\t\t\t\t\t$stmt->bindValue(':test_profile', $result_object->test_profile->get_identifier());\n\t\t\t\t\t$stmt->bindValue(':comparison_hash', $result_object->get_comparison_hash(true, false));\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t}\n\n\t\t\t\tif($relative_id > 0)\n\t\t\t\t{\n\t\t\t\t\tforeach($result_file->get_systems() as $s)\n\t\t\t\t\t{\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_results_systems (AccountID, UploadID, SystemIdentifier, Hardware, Software) VALUES (:account_id, :upload_id, :system_identifier, :hardware, :software)');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $account_id);\n\t\t\t\t\t\t$stmt->bindValue(':upload_id', $upload_id);\n\t\t\t\t\t\t$stmt->bindValue(':system_identifier', $s->get_identifier());\n\t\t\t\t\t\t$stmt->bindValue(':hardware', $s->get_hardware());\n\t\t\t\t\t\t$stmt->bindValue(':software', $s->get_software());\n\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$main .= '<h1>Phoromatic Server Configuration</h1>';\n\n\t\t$main .= '<h2>Phoromatic Storage Location</h2>';\n\t\t$main .= '<p>The Phoromatic Storage location is where all Phoromatic-specific test results, account data, and other information is archived. This path is controlled via the <em>' . pts_config::get_config_file_location() . '</em> configuration file with the <em>PhoromaticStorage</em> element. Adjusting the directory from the user configuration XML file is the recommended way to adjust the Phoromatic storage path when the Phoromatic Server is not running, while using the below form is an alternative method to attempt to live migrate the storage path.</p>';\n\t\t$main .= '<p><strong>Current Storage Path:</strong> ' . phoromatic_server::phoromatic_path() . '</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_phoromatic_path\" method=\"post\">';\n\t\t$main .= '<p><input type=\"text\" name=\"new_phoromatic_path\" value=\"' . (isset($_POST['new_phoromatic_path']) ? $_POST['new_phoromatic_path'] : null) . '\" /></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update Phoromatic Storage Location\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h2>Download Cache Location</h2>';\n\t\t$main .= '<p>The download cache is where the Phoronix Test Suite is able to make an archive of files needed by test profiles. The Phoromatic Server is then able to allow Phoronix Test Suite client systems on the intranet. To add test files to this cache on the Phoromatic Server, run <strong>phoronix-test-suite make-download-cache <em>&lt;the test identifers you wish to download and cache&gt;</em></strong>.</p>';\n\t\t$main .= '<p><strong>Current Download Cache Path:</strong> ' . pts_client::download_cache_path() . '</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_dc_path\" method=\"post\">';\n\t\t$main .= '<p><input type=\"text\" name=\"new_dc_path\" value=\"' . (isset($_POST['new_dc_path']) ? $_POST['new_dc_path'] : null) . '\" /></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update Download Cache Location\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h2>Network Proxy</h2>';\n\t\t$main .= '<p>If a network proxy is needed for the Phoromatic Server to access the open Internet, please provide the IP address and HTTP port address below.</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_proxy\" method=\"post\">';\n\t\t$main .= '<p><strong>Proxy HTTP Port:</strong> <input type=\"text\" name=\"new_proxy_port\" size=\"4\" value=\"' . (isset($_POST['new_proxy_port']) ? $_POST['new_proxy_port'] : pts_config::read_user_config('PhoronixTestSuite/Options/Networking/ProxyPort')) . '\" /></p>';\n\t\t$main .= '<p><strong>Proxy IP Address:</strong> <input type=\"text\" name=\"new_proxy_address\" value=\"' . (isset($_POST['new_proxy_address']) ? $_POST['new_proxy_address'] : pts_config::read_user_config('PhoronixTestSuite/Options/Networking/ProxyAddress')) . '\" /></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update Network Proxy\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h2>Phoromatic Server Ports</h2>';\n\t\t$main .= '<p>The HTTP and WebSocket ports for the Phoromatic Server can be adjusted via this form or the user configuration XML file. The new ports will not go into effect until the Phoromatic Server instance has been restarted.</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_ports\" method=\"post\">';\n\t\t$main .= '<p><strong>HTTP Port:</strong> <input type=\"text\" name=\"new_http_port\" size=\"4\" value=\"' . (isset($_POST['new_http_port']) ? $_POST['new_http_port'] : pts_config::read_user_config('PhoronixTestSuite/Options/Server/RemoteAccessPort')) . '\" /></p>';\n\t\t$main .= '<p><strong>WebSocket Port:</strong> <input type=\"text\" name=\"new_ws_port\" size=\"4\" value=\"' . (isset($_POST['new_ws_port']) ? $_POST['new_ws_port'] : pts_config::read_user_config('PhoronixTestSuite/Options/Server/WebSocketPort')) . '\" /></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update Web Ports\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h2>Support Email Address</h2>';\n\t\t$main .= '<p>This email address will be shown as the sender of emails regarding new account registration and other non-group-related messages. This email address may also be shown as a support email address in case of user problems.</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"support_email\" method=\"post\">';\n\t\t$main .= '<p><strong>E-Mail:</strong> <input type=\"text\" name=\"new_admin_support_email\" value=\"' . phoromatic_server::read_setting('admin_support_email') . '\" /></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update E-Mail Address\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h1>Account Creation</h1>';\n\t\t$main .= '<h2>Add To Existing Account</h2><p>Whenever a new account is created via the main log-in page, rather than creating a new group account, you can opt to have the account added as a viewer to an existing group of accounts. To do so, enter the account ID in the field below. The user is added to that account ID with viewer privileges while the main administrator for that account can elevate the privileges from their account\\'s Users page. You can find the list of account IDs via the main rootadmin page account listing. Leave this field blank to disable the feature. This option only affects the creation of new accounts.</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"add_accounts_to_one\" method=\"post\">';\n\t\t$main .= '<p><strong>Main Account ID:</strong> <input type=\"text\" name=\"add_new_users_to_account\" size=\"6\" value=\"' . phoromatic_server::read_setting('add_new_users_to_account') . '\" /></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update Account Handling\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h1>Account Creation</h1>';\n\t\t$main .= '<p>By default, new accounts can be created at-will from the main page of the Phoromatic Server web interface. <strong>To disable the ability to create new accounts from the main welcome page</strong>, enter a message in the field below -- e.g. account creation disabled, contact XYZ department via email to request a new account, or other string to present to the user in place of the account creation box. Leave this box empty to allow new accounts to be created. HTML input is allowed.</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"account_creation_text\" method=\"post\">';\n\t\t$main .= '<p><strong>Account Creation String:</strong> <textarea name=\"account_creation_alt\" cols=\"50\" rows=\"4\">' . phoromatic_server::read_setting('account_creation_alt') . '</textarea></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update Account Handling\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h1>Main Page Message</h1>';\n\t\t$main .= '<p>If you wish to present users with a custom message once logging into their Phoromatic account, set the HTML-allowed string below and it will be shown on the main page once logging in.</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"main_page_message\" method=\"post\">';\n\t\t$main .= '<p><strong>Main Page Message String:</strong> <textarea name=\"main_page_message\" cols=\"50\" rows=\"4\">' . phoromatic_server::read_setting('main_page_message') . '</textarea></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update Main Page Message\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h1>Force Results To Be Shared</h1>';\n\t\t$main .= '<p>If you wish to force that all accounts/groups on this Phoromatic Server instance are shared/viewable amongst other groups on this server, set this value to True. Otherwise the result sharing is limited to each group\\'s selected option on the account settings page.</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"force_result_share\" method=\"post\">';\n\t\t$main .= '<p><strong>Force Result Sharing:</strong> <select name=\"force_result_sharing\"><option value=\"0\">False</option><option value=\"1\" ' . (phoromatic_server::read_setting('force_result_sharing') ? 'selected=\"selected\"' : null) . '>True</option></select></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h1>Only Advertise Tests With Files Locally Cached</h1>';\n\t\t$main .= '<p>Enabling this option will only advertise test profiles on the Phoromatic Server web interface if the needed files for that test are present within the Phoromatic Server\\'s PTS download cache. This feature is particularly useful for environments where the client test system lacks direct Internet access.</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"show_local_tests_only\" method=\"post\">';\n\t\t$main .= '<p><strong>Only Advertise Cached Tests:</strong> <select name=\"show_local_tests_only\"><option value=\"0\">False</option><option value=\"1\" ' . (phoromatic_server::read_setting('show_local_tests_only') ? 'selected=\"selected\"' : null) . '>True</option></select></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Update\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\t$main .= '<hr /><h1>Rebuild Results/Systems SQLite Tables</h1>';\n\t\t$main .= '<p>If you somehow damaged some of your SQLite tables, this option will attempt to rebuild the phoromatic_results_results and phoromatic_results_systems tables.</p>';\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"rebuild_results_db\" method=\"post\">';\n\t\t$main .= '<p><strong>Force Results Table Rebuild:</strong> <select name=\"rebuild_results_db\"><option value=\"0\">False</option><option value=\"1\" ' . (phoromatic_server::read_setting('rebuild_results_db') ? 'selected=\"selected\"' : null) . '>True</option></select></p>';\n\t\t$main .= '<p><input name=\"submit\" value=\"Rebuild Results Table\" type=\"submit\" /></p>';\n\t\t$main .= '</form>';\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in());\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2015, Phoronix Media\n\tCopyright (C) 2015, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_admin_data implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Phoromatic Server Data';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\tif($_SESSION['AdminLevel'] != -40)\n\t\t{\n\t\t\theader('Location: /?main');\n\t\t}\n\t\tif(isset($PATH[0]) && isset($PATH[1]))\n\t\t{\n\t\t\tswitch($PATH[0])\n\t\t\t{\n\t\t\t\tcase 'delete':\n\t\t\t\t\tif($PATH[1] == 'result')\n\t\t\t\t\t{\n\t\t\t\t\t\t$pprids = explode(',', $PATH[2]);\n\n\t\t\t\t\t\tforeach($pprids as $pprid)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_results WHERE PPRID = :pprid LIMIT 1');\n\t\t\t\t\t\t\t$stmt->bindValue(':pprid', $pprid);\n\t\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t\t\tif($result && ($row = $result->fetchArray()))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$composite_xml = phoromatic_server::phoromatic_account_result_path($row['AccountID'], $row['UploadID']) . 'composite.xml';\n\t\t\t\t\t\t\t\tif(is_file($composite_xml))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tunlink($composite_xml);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tpts_file_io::delete(phoromatic_server::phoromatic_account_result_path($row['AccountID'], $row['UploadID']), null, true);\n\n\t\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_results_results WHERE AccountID = :account_id AND UploadID = :upload_id');\n\t\t\t\t\t\t\t\t$stmt->bindValue(':account_id', $row['AccountID']);\n\t\t\t\t\t\t\t\t$stmt->bindValue(':upload_id', $row['UploadID']);\n\t\t\t\t\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_results_systems WHERE AccountID = :account_id AND UploadID = :upload_id');\n\t\t\t\t\t\t\t\t$stmt->bindValue(':account_id', $row['AccountID']);\n\t\t\t\t\t\t\t\t$stmt->bindValue(':upload_id', $row['UploadID']);\n\t\t\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_results WHERE PPRID = :pprid');\n\t\t\t\t\t\t\t$stmt->bindValue(':pprid', $pprid);\n\t\t\t\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\t\t\t\t// TODO XXX fix below\n\t\t\t\t\t\t\t//$upload_dir = phoromatic_server::phoromatic_account_result_path($_SESSION['AccountID'], $upload_id);\n\t\t\t\t\t\t\t//pts_file_io::delete($upload_dir);\n\t\t\t\t\t\t}\n\n/*\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_results_results WHERE AccountID = :account_id AND UploadID = :upload_id');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $PATH[2]);\n\t\t\t\t\t\t$stmt->bindValue(':upload_id', $PATH[3]);\n\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_results_systems WHERE AccountID = :account_id AND UploadID = :upload_id');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $PATH[2]);\n\t\t\t\t\t\t$stmt->bindValue(':upload_id', $PATH[3]);\n\t\t\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\t\t\t$result_dir = phoromatic_server::phoromatic_account_result_path($PATH[2], $PATH[3]);\n\t\t\t\t\t\tif(is_dir($result_dir))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpts_file_io::delete($result_dir, null, true);\n\t\t\t\t\t\t}\n*/\n\t\t\t\t\t}\n\t\t\t\t\telse if($PATH[1] == 'schedule')\n\t\t\t\t\t{\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_schedules WHERE AccountID = :account_id AND ScheduleID = :schedule_id');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $PATH[2]);\n\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[3]);\n\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t}\n\t\t\t\t\telse if($PATH[1] == 'system')\n\t\t\t\t\t{\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_systems WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $PATH[2]);\n\t\t\t\t\t\t$stmt->bindValue(':system_id', $PATH[3]);\n\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t}\n\t\t\t\t\telse if($PATH[1] == 'ticket')\n\t\t\t\t\t{\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_benchmark_tickets WHERE AccountID = :account_id AND TicketID = :ticket_id');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $PATH[2]);\n\t\t\t\t\t\t$stmt->bindValue(':ticket_id', $PATH[3]);\n\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t}\n\t\t\t\t\telse if($PATH[1] == 'trigger')\n\t\t\t\t\t{\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_schedules_triggers WHERE AccountID = :account_id AND ScheduleID = :schedule_id AND Trigger = :trigger');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $PATH[2]);\n\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[3]);\n\t\t\t\t\t\t$stmt->bindValue(':trigger', $PATH[4]);\n\t\t\t\t\t\t$result = $stmt->execute(); var_dump($result);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t$main = '<h1>Phoromatic Server Data</h1>';\n\t\t$main .= '<h1>Test Results</h1>';\n\t$main .= '<a onclick=\"javascript:phoromatic_generate_comparison(\\'public.php?ut=\\');\"><div id=\"phoromatic_result_compare_info_box\" style=\"background: #1976d2; border: 1px solid #000;\"></div></a> <a onclick=\"javascript:phoromatic_delete_results(\\'?admin_data/delete/result/\\'); return false;\"><div id=\"phoromatic_result_delete_box\" style=\"background: #1976d2; border: 1px solid #000;\">Delete Selected Results</div></a>';\n\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">';\n\t\t$main .= '<div style=\"height: 500px;\"><ul style=\"max-height: 100%;\"><li><h1>Recent Test Results</h1></li>';\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime, TimesViewed, AccountID, UploadID FROM phoromatic_results ORDER BY UploadTime DESC LIMIT 100');\n\t\t$test_result_result = $stmt->execute();\n\t\t$results = 0;\n\t\twhile($test_result_row = $test_result_result->fetchArray())\n\t\t{\n\t\t\t$main .= '<a onclick=\"\"><li id=\"result_select_' . $test_result_row['PPRID'] . '\"><input type=\"checkbox\" id=\"result_compare_checkbox_' . $test_result_row['PPRID'] . '\" onclick=\"javascript:phoromatic_checkbox_toggle_result_comparison(\\'' . $test_result_row['PPRID'] . '\\');\" onchange=\"return false;\"></input> <span onclick=\"javascript:phoromatic_window_redirect(\\'public.php?ut=' . $test_result_row['PPRID'] . '\\');\">' . $test_result_row['Title'] . '</span><br /><table><tr><td>' . phoromatic_server::system_id_to_name($test_result_row['SystemID'], $test_result_row['AccountID']) . '</td><td>' . phoromatic_user_friendly_timedate($test_result_row['UploadTime']) .  '</td><td>' . $test_result_row['TimesViewed'] . ' Times Viewed</td></table></li></a>';\n\t\t\t$results++;\n\n\t\t}\n\t\tif($results == 0)\n\t\t{\n\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Results Found</li>';\n\t\t}\n\t\t$main .= '</ul></div>';\n\t\t$main .= '</div>';\n\t\t$main .= '<hr /><h1>Schedules</h1>';\n\t\t$main .= '<h2>Active Test Schedules</h2>';\n\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">\n\t\t\t\t<ul>\n\t\t\t\t\t<li><h1>Active Test Schedules</h1></li>';\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, ScheduleID, Description, RunTargetSystems, RunTargetGroups, RunAt, ActiveOn, AccountID FROM phoromatic_schedules WHERE State >= 1 ORDER BY Title ASC');\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\t\tif($row == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Schedules Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t$main .= '<a onclick=\"\"><li>' . $row['Title'] . '<br /><table><tr><td>' . phoromatic_server::account_id_to_group_name($row['AccountID']) . '</td><td>' . pts_strings::plural_handler(count(phoromatic_server::systems_associated_with_schedule($row['AccountID'], $row['ScheduleID'])), 'System') . '</td><td><strong>' . phoromatic_schedule_activeon_string($row['ActiveOn'], $row['RunAt']) . '</strong></td><td><a onclick=\"return confirm(\\'Permanently remove this schedule?\\');\" href=\"/?admin_data/delete/schedule/' . $row['AccountID'] . '/' . $row['ScheduleID'] . '\">Permanently Remove</a></td></tr></table></li></a>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t}\n\t\t$main .= '</ul></div>';\n\t\t$main .= '<hr /><h2>Inactive Test Schedules</h2>';\n\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">\n\t\t\t\t<ul>\n\t\t\t\t\t<li><h1>Active Test Schedules</h1></li>';\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, ScheduleID, Description, RunTargetSystems, RunTargetGroups, RunAt, ActiveOn, AccountID FROM phoromatic_schedules WHERE State < 1 ORDER BY Title ASC');\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\t\tif($row == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Schedules Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t$main .= '<a onclick=\"\"><li>' . $row['Title'] . '<br /><table><tr><td>' . phoromatic_server::account_id_to_group_name($row['AccountID']) . '</td><td>' . pts_strings::plural_handler(count(phoromatic_server::systems_associated_with_schedule($row['AccountID'], $row['ScheduleID'])), 'System') . '</td><td><strong>' . phoromatic_schedule_activeon_string($row['ActiveOn'], $row['RunAt']) . '</strong></td><td><a onclick=\"return confirm(\\'Permanently remove this schedule?\\');\" href=\"/?admin_data/delete/schedule/' . $row['AccountID'] . '/' . $row['ScheduleID'] . '\">Permanently Remove</a></td></tr></table></li></a>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t}\n\t\t$main .= '</ul></div>';\n\n\t\t$main .= '<hr /><h2>Schedule Triggers</h2>';\n\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">\n\t\t\t\t<ul>\n\t\t\t\t\t<li><h1>Triggers</h1></li>';\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Trigger, TriggeredOn, AccountID, ScheduleID FROM phoromatic_schedules_triggers ORDER BY TriggeredOn DESC');\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\t\tif($row == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Triggers Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t$main .= '<a onclick=\"\"><li>' . $row['Trigger'] . '<br /><table><tr><td>' . $row['TriggeredOn'] . '</td><td>' . phoromatic_server::account_id_to_group_name($row['AccountID']) . '</td><td><a onclick=\"return confirm(\\'Permanently remove this trigger?\\');\" href=\"/?admin_data/delete/trigger/' . $row['AccountID'] . '/' . $row['ScheduleID'] . '/' . $row['Trigger'] . '\">Permanently Remove</a></td></tr></table></li></a>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t}\n\t\t$main .= '</ul></div>';\n\n\t\t$main .= '<hr /><h1>Systems</h1>\n\t\t\t<h2>Active Systems</h2>\n\t\t\t<div class=\"pts_phoromatic_info_box_area\">\n\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><h1>Active Systems</h1></li>';\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, LocalIP, CurrentTask, LastCommunication, EstimatedTimeForTask, TaskPercentComplete, AccountID FROM phoromatic_systems WHERE State >= 0 ORDER BY LastCommunication DESC');\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\t\t\t\t\t$active_system_count = 0;\n\n\t\t\t\t\tif($row == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Systems Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$main .= '<a onclick=\"\"><li>' . $row['Title'] . '<br /><table><tr><td>' . phoromatic_server::account_id_to_group_name($row['AccountID']) . '</td><td>' . $row['LocalIP'] . '</td><td><strong>' . $row['CurrentTask'] . '</strong></td><td><strong>Last Communication:</strong> ' . date('j F Y H:i', strtotime($row['LastCommunication'])) . '</td><td><a onclick=\"return confirm(\\'Permanently remove this system?\\');\" href=\"/?admin_data/delete/system/' . $row['AccountID'] . '/' . $row['SystemID'] . '\">Permanently Remove</a></td></tr></table></li></a>';\n\t\t\t\t\t\t\t$active_system_count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t}\n\n\n\t\t\t$main .= '</ul></div>';\n\t\t\t$main .= '<h2>Inactive Systems</h2>\n\t\t\t<div class=\"pts_phoromatic_info_box_area\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><h1>Inactive Systems</h1></li>';\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, LocalIP, CurrentTask, LastCommunication, EstimatedTimeForTask, TaskPercentComplete, AccountID FROM phoromatic_systems WHERE State < 0 ORDER BY LastCommunication DESC');\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\t\t\t\t\t$active_system_count = 0;\n\n\t\t\t\t\tif($row == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Systems Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$main .= '<a onclick=\"\"><li>' . $row['Title'] . '<br /><table><tr><td>' . phoromatic_server::account_id_to_group_name($row['AccountID']) . '</td><td>' . $row['LocalIP'] . '</td><td><strong>' . $row['CurrentTask'] . '</strong></td><td><strong>Last Communication:</strong> ' . date('j F Y H:i', strtotime($row['LastCommunication'])) . '</td><td><a onclick=\"return confirm(\\'Permanently remove this system?\\');\" href=\"/?admin_data/delete/system/' . $row['AccountID'] . '/' . $row['SystemID'] . '\">Permanently Remove</a></td></tr></table></li></a>';\n\t\t\t\t\t\t\t$active_system_count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t}\n\n\n\t\t\t$main .= '</ul></div>';\n\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_benchmark_tickets ORDER BY TicketIssueTime DESC');\n\t\t$result = $stmt->execute();\n\n\t\t$main .= '<hr /><h1>Benchmark Tickets</h1>\n\t\t\t<div class=\"pts_phoromatic_info_box_area\"><ul><li><h1>Tickets</h1></li>';\n\t\twhile($result && $row = $result->fetchArray())\n\t\t{\n\t\t\t\t$main .= '<a onclick=\"\"><li>' . $row['Title'] . '<br /><table><tr><td><a onclick=\"return confirm(\\'Permanently remove this system?\\');\" href=\"/?admin_data/delete/ticket/' . $row['AccountID'] . '/' . $row['TicketID'] . '\">Permanently Remove</a></td></tr></table></li></a>';\n\t\t}\n\t\t$main .= '</ul></div>';\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in());\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2015 - 2022, Phoronix Media\n\tCopyright (C) 2015 - 2022, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_benchmark implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'One-Time Benchmark Run';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\tif(PHOROMATIC_USER_IS_VIEWER)\n\t\t\treturn;\n\n\t\t$is_new = true;\n\t\t$e_schedule = false;\n\t\tif(!empty($PATH[0]) && $PATH[0] == 'all')\n\t\t{\n\t\t\t$main = '<h1>Past Benchmark Tickets</h1>';\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_benchmark_tickets WHERE AccountID = :account_id AND State >= 0 ORDER BY TicketIssueTime DESC');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$result = $stmt->execute();\n\t\t\t$main .= '<ol>';\n\n\t\t\tif($result)\n\t\t\t{\n\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\tif(!empty($row))\n\t\t\t\t{\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li><a href=\"?benchmark/' . $row['TicketID'] . '\">' . $row['Title'] . '</a></li>';\n\t\t\t\t\t}\n\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$main .= '<li>No Benchmark Tickets Found</li>';\n\t\t\t}\n\n\t\t\t$main .= '</ol>';\n\t\t}\n\t\telse if(!empty($PATH[0]) && is_numeric($PATH[0]))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_benchmark_tickets WHERE AccountID = :account_id AND TicketID = :ticket_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':ticket_id', $PATH[0]);\n\t\t\t$result = $stmt->execute();\n\t\t\t$row = $result->fetchArray();\n\n\t\t\tif(!empty($row))\n\t\t\t{\n\t\t\t\tif(isset($_GET['remove']))\n\t\t\t\t{\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_benchmark_tickets WHERE AccountID = :account_id AND TicketID = :ticket_id');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt->bindValue(':ticket_id', $PATH[0]);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\theader('Location: /?benchmark');\n\t\t\t\t}\n\t\t\t\telse if(isset($_GET['repeat']))\n\t\t\t\t{\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_benchmark_tickets SET TicketIssueTime = :new_ticket_time, State = 1 WHERE AccountID = :account_id AND TicketID = :ticket_id');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt->bindValue(':ticket_id', $PATH[0]);\n\t\t\t\t\t$stmt->bindValue(':new_ticket_time', time());\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t}\n\t\t\t\telse if(isset($_GET['disable']))\n\t\t\t\t{\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_benchmark_tickets SET State = 0 WHERE AccountID = :account_id AND TicketID = :ticket_id');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt->bindValue(':ticket_id', $PATH[0]);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t}\n\n\t\t\t\t$main = null;\n\t\t\t\t$main .= '<h1>' . $row['Title'] . '</h1>';\n\t\t\t\t$main .= '<h3>' . $row['Description'] . '</h3>';\n\t\t\t\t$main .= '<p>This benchmark ticket was created on <strong>' . date('j F Y \\a\\t H:i', strtotime($row['LastModifiedOn'])) . '</strong> by <strong>' . $row['LastModifiedBy'] . '. The ticket was last issued for testing at ' . date('j F Y \\a\\t H:i', $row['TicketIssueTime']) . '</strong>.';\n\t\t\t\t$main .= '<p> <a href=\"/?benchmark/' . $PATH[0] . '/&repeat\">Repeat Ticket</a> &nbsp; &nbsp; &nbsp; <a href=\"/?benchmark/' . $PATH[0] . '/&remove\">Remove Ticket</a>' . (!isset($_GET['disable']) && $row['State'] > 0 ? ' &nbsp; &nbsp; &nbsp; <a href=\"/?benchmark/' . $PATH[0] . '/&disable\">End Ticket</a>' : null) . '</p>';\n\n\t\t\t\tif(!empty($row['RunTargetSystems']))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h1>System Targets</h1><ol>';\n\t\t\t\t\tforeach(explode(',', $row['RunTargetSystems']) as $system_id)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li><a href=\"?systems/' . $system_id . '\">' . phoromatic_server::system_id_to_name($system_id) . '</a></li>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!empty($row['RunTargetGroups']))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h1>Group Targets</h1><ol>';\n\t\t\t\t\tforeach(explode(',', $row['RunTargetGroups']) as $group)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(empty($group))\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t$main .= '<li><strong style=\"font-weight: 800;\">' . $group . '</strong></li>';\n\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT SystemID FROM phoromatic_systems WHERE AccountID = :account_id AND Groups LIKE :sgroup AND State > 0 ORDER BY Title ASC');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt->bindValue(':sgroup', '%#' . $group . '#%');\n\t\t\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\t\t\twhile($result && $row = $result->fetchArray())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$main .= '<li><a href=\"?systems/' . $row['SystemID'] . '\">' . phoromatic_server::system_id_to_name($row['SystemID']) . '</a></li>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$main .= '</ol>';\n\t\t\t\tif(!empty($row['EnvironmentVariables']))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h1>Environment</h1><ol>';\n\n\t\t\t\t\tforeach(explode(';', $row['EnvironmentVariables']) as $env)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li><strong>' . $env . '</strong></li>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</ol>';\n\t\t\t\t}\n\t\t\t\t$main .= '<hr /><h1>Ticket Payload</h1>';\n\t\t\t\t$main .= '<p>This ticket runs the <strong>' . $row['SuiteToRun'] . '</strong> test suite:</p>';\n\t\t\t\t$main .= '<div style=\"max-height: 400px; overflow-y: scroll;\">';\n\t\t\t\t$xml_path = phoromatic_server::find_suite_file($_SESSION['AccountID'], $row['SuiteToRun']);\n\t\t\t\tif(is_file($xml_path))\n\t\t\t\t{\n\t\t\t\t\t$test_suite = new pts_test_suite($xml_path);\n\n\t\t\t\t//\t$main .= '<h2>' . $test_suite->get_title() . '</h2>';\n\t\t\t\t//\t$main .= '<p><strong>' . $test_suite->get_maintainer() . '</strong></p>';\n\t\t\t\t//\t$main .= '<p><em>' . $test_suite->get_description() . '</em></p>';\n\n\t\t\t\t\tforeach($test_suite->get_contained_test_result_objects() as $tro)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h3>' . $tro->test_profile->get_title() . ' [' . $tro->test_profile->get_identifier() . ']</h3>';\n\t\t\t\t\t\t$main .= '<p>' . $tro->get_arguments_description() . '</p>';\n\t\t\t\t\t}\n\n\t\t\t\t\t//$main .= '<hr />';\n\t\t\t\t}\n\n\t\t\t\t$main .= '</div><hr />';\n\t\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">';\n\t\t\t\tif(strpos($row['EnvironmentVariables'], 'PTS_CONCURRENT_TEST_RUNS') !== false)\n\t\t\t\t{\n\t\t\t\t\tif(isset($_REQUEST['view_log']) && is_file(phoromatic_server::phoromatic_account_stress_log_path($_SESSION['AccountID'], $PATH[0]) . $_REQUEST['view_log'] . '.log'))\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<hr /><h1>Stress Log For: ' . phoromatic_server::system_id_to_name($_REQUEST['view_log']) . '</h1>';\n\t\t\t\t\t\t$log_text = PHP_EOL . file_get_contents(phoromatic_server::phoromatic_account_stress_log_path($_SESSION['AccountID'], $PATH[0]) . $_REQUEST['view_log'] . '.log');\n\n\t\t\t\t\t\t$x = 0;\n\t\t\t\t\t\twhile(($x = strpos($log_text, \"\\n##\", $x)) !== false)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$log_text = substr($log_text, 0, $x) . \"\\n<strong style=\\\"font-weight: 800;\\\">\" . substr($log_text, $x + 1);\n\n\t\t\t\t\t\t\tif(($y = strpos($log_text, \"\\n\", $x + 2)) !== false)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$log_text = substr($log_text, 0, $y) . '</strong>' . substr($log_text, $y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$x = $y;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$x = 0;\n\t\t\t\t\t\twhile(($x = strpos($log_text, \"\\n[\", $x)) !== false)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$log_text = substr($log_text, 0, $x) . \"\\n<strong style=\\\"font-weight: 800;\\\">\" . substr($log_text, $x + 1);\n\n\t\t\t\t\t\t\tif(($y = strpos($log_text, \"]\", $x + 2)) !== false)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$log_text = substr($log_text, 0, $y) . '</strong>' . substr($log_text, $y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$x = $y;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$main .= '<blockquote>' . str_replace(\"\\n\", '<br />', $log_text) . '</blockquote>';\n\t\t\t\t\t\t$main .= '<p><a href=\"?benchmark/' . $PATH[0] . '#stress_logs\">View Other System Logs</a></p>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<a name=\"stress_logs\"></a><hr /><h1>Stress Run Logs</h1><ol>';\n\t\t\t\t\t\t$count = 0;\n\t\t\t\t\t\tforeach(pts_file_io::glob(phoromatic_server::phoromatic_account_stress_log_path($_SESSION['AccountID'], $PATH[0]) . '*.log') as $log_file)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$sys_id = basename($log_file, '.log');\n\t\t\t\t\t\t\t$main .= '<li><a href=\"?benchmark/' . $PATH[0] . '/&view_log=' . $sys_id . '\">' . phoromatic_server::system_id_to_name($sys_id) . '</a></li>';\n\t\t\t\t\t\t\t$count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif($count == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$main .= '<li><em>No Logs Currently Available</em></li>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$main .= '</ol>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$main .= '<div style=\"margin: 0 5%;\"><ul style=\"max-height: 100%;\"><li><h1>Test Results</h1></li>';\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime, TimesViewed FROM phoromatic_results WHERE AccountID = :account_id AND BenchmarkTicketID = :ticket_id ORDER BY UploadTime DESC');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt->bindValue(':ticket_id', $PATH[0]);\n\t\t\t\t\t$test_result_result = $stmt->execute();\n\t\t\t\t\t$results = 0;\n\t\t\t\t\twhile($test_result_row = $test_result_result->fetchArray())\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<a onclick=\"\"><li id=\"result_select_' . $test_result_row['PPRID'] . '\"><input type=\"checkbox\" id=\"result_compare_checkbox_' . $test_result_row['PPRID'] . '\" onclick=\"javascript:phoromatic_checkbox_toggle_result_comparison(\\'' . $test_result_row['PPRID'] . '\\');\" onchange=\"return false;\"></input> <span onclick=\"javascript:phoromatic_window_redirect(\\'?result/' . $test_result_row['PPRID'] . '\\');\">' . $test_result_row['Title'] . '</span><br /><table><tr><td>' . phoromatic_server::system_id_to_name($test_result_row['SystemID']) . '</td><td>' . phoromatic_user_friendly_timedate($test_result_row['UploadTime']) .  '</td><td>' . $test_result_row['TimesViewed'] . ' Times Viewed</td></table></li></a>';\n\t\t\t\t\t\t$results++;\n\n\t\t\t\t\t}\n\t\t\t\t\tif($results == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Results Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse if($results > 3)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<a onclick=\"\"><li id=\"global_bottom_totals\"><input type=\"checkbox\" id=\"global_checkbox\" onclick=\"javascript:phoromatic_toggle_checkboxes_on_page(this);\" onchange=\"return false;\"></input> <strong>' . $results . ' Results</strong></li></a>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</ul></div>';\n\t\t\t\t\t$main .= '</div>';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(isset($_POST['benchmark_title']) && !empty($_POST['benchmark_title']))\n\t\t\t{\n\t\t\t\t$title = phoromatic_get_posted_var('benchmark_title');\n\t\t\t\t$description = phoromatic_get_posted_var('benchmark_description');\n\t\t\t\t$result_identifier = phoromatic_get_posted_var('benchmark_identifier');\n\t\t\t\t$suite_to_run = phoromatic_get_posted_var('suite_to_run');\n\n\t\t\t\tif(strlen($title) < 3)\n\t\t\t\t{\n\t\t\t\t\techo '<h2>Title must be at least three characters.</h2>';\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t\tif(strlen($result_identifier) < 3)\n\t\t\t\t{\n\t\t\t\t\techo '<h2>Identifier must be at least three characters.</h2>';\n\t\t\t\t\texit;\n\t\t\t\t}\n\t\t\t\tif(strlen($suite_to_run) < 3)\n\t\t\t\t{\n\t\t\t\t\techo '<h2>You must specify a suite to run.</h2>';\n\t\t\t\t\texit;\n\t\t\t\t}\n\n\t\t\t\t$run_target_systems = phoromatic_get_posted_var('run_on_systems', array());\n\t\t\t\t$run_target_groups = phoromatic_get_posted_var('run_on_groups', array());\n\t\t\t\tif(!is_array($run_target_systems)) $run_target_systems = array();\n\t\t\t\tif(!is_array($run_target_groups)) $run_target_groups = array();\n\t\t\t\t$run_target_systems = implode(',', $run_target_systems);\n\t\t\t\t$run_target_groups = implode(',', $run_target_groups);\n\n\t\t\t\tif($is_new)\n\t\t\t\t{\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$ticket_id = rand(10, 999999);\n\t\t\t\t\t\t$matching_tickets = phoromatic_server::$db->querySingle('SELECT TicketID FROM phoromatic_benchmark_tickets WHERE TicketID = \\'' . $ticket_id . '\\'');\n\t\t\t\t\t}\n\t\t\t\t\twhile(!empty($matching_tickets));\n\t\t\t\t}\n\n\t\t\t\t$env_vars = array();\n\n\t\t\t\tif(is_numeric($_POST['PTS_CONCURRENT_TEST_RUNS']) && $_POST['PTS_CONCURRENT_TEST_RUNS'] > 0)\n\t\t\t\t{\n\t\t\t\t\tarray_push($env_vars, 'PTS_CONCURRENT_TEST_RUNS=' . $_POST['PTS_CONCURRENT_TEST_RUNS']);\n\t\t\t\t}\n\t\t\t\tif(is_numeric($_POST['TOTAL_LOOP_TIME']) && $_POST['TOTAL_LOOP_TIME'] > 0)\n\t\t\t\t{\n\t\t\t\t\tarray_push($env_vars, 'TOTAL_LOOP_TIME=' . $_POST['TOTAL_LOOP_TIME']);\n\t\t\t\t}\n\n\t\t\t\tforeach(pts_env::get_posted_options('phoromatic') as $ei => $ev)\n\t\t\t\t{\n\t\t\t\t\tarray_push($env_vars, $ei . '=' . $ev);\n\t\t\t\t}\n\n\t\t\t\t$env_vars = implode(';', $env_vars);\n\n\t\t\t\t// Add benchmark\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT OR REPLACE INTO phoromatic_benchmark_tickets (AccountID, TicketID, TicketIssueTime, Title, ResultIdentifier, SuiteToRun, Description, State, LastModifiedBy, LastModifiedOn, RunTargetGroups, RunTargetSystems, EnvironmentVariables) VALUES (:account_id, :ticket_id, :ticket_time, :title, :result_identifier, :suite_to_run, :description, :state, :modified_by, :modified_on, :run_target_groups, :run_target_systems, :environment_variables)');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':ticket_id', $ticket_id);\n\t\t\t\t$stmt->bindValue(':ticket_time', time());\n\t\t\t\t$stmt->bindValue(':title', $title);\n\t\t\t\t$stmt->bindValue(':result_identifier', $result_identifier);\n\t\t\t\t$stmt->bindValue(':suite_to_run', $suite_to_run);\n\t\t\t\t$stmt->bindValue(':description', $description);\n\t\t\t\t$stmt->bindValue(':state', 1);\n\t\t\t\t$stmt->bindValue(':modified_by', $_SESSION['UserName']);\n\t\t\t\t$stmt->bindValue(':modified_on', phoromatic_server::current_time());\n\t\t\t\t$stmt->bindValue(':public_key', null); //  isset($public_key) ? $public_key :\n\t\t\t\t$stmt->bindValue(':run_target_groups', $run_target_groups);\n\t\t\t\t$stmt->bindValue(':run_target_systems', $run_target_systems);\n\t\t\t\t$stmt->bindValue(':environment_variables', $env_vars);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\tphoromatic_add_activity_stream_event('benchmark', $ticket_id, ($is_new ? 'added' : 'modified'));\n\n\t\t\t\tif($result)\n\t\t\t\t{\n\t\t\t\t\theader('Location: ?benchmark/' . $ticket_id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$main = '<h2>' . ($is_new ? 'Create' : 'Edit') . ' A Benchmark</h2>\n\t\t\t<p>This page allows you to run a test suite -- consisting of a single or multiple test suites -- on a given set/group of systems right away at their next earliest possibility. This benchmark mode is an alternative to the <a href=\"?schedules\">benchmark schedules</a> for reptitive/routine testing.</p>';\n\t\t\t$local_suites = array();\n\t\t\tforeach(pts_file_io::glob(phoromatic_server::phoromatic_account_suite_path($_SESSION['AccountID']) . '*/suite-definition.xml') as $xml_path)\n\t\t\t{\n\t\t\t\t\t$id = basename(dirname($xml_path));\n\t\t\t\t\t$test_suite = new pts_test_suite($xml_path);\n\t\t\t\t\t$local_suites[$test_suite->get_title() . ' - ' . $id] = $id;\n\t\t\t}\n\t\t\t$official_suites = pts_test_suites::suites_on_disk(false, true);\n\n\t\t\tif(empty($local_suites))\n\t\t\t{\n\t\t\t\t$main .= '<p><strong>Before you can create a benchmark ticket you must first <a href=\"?build_suite\">create a test suite</a> with the tests you wish to run.</strong></p>';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"run_benchmark\" id=\"run_benchmark\" method=\"post\" enctype=\"multipart/form-data\" onsubmit=\"return validate_run_benchmark();\">\n\t\t\t\t<h3>Title:</h3>\n\t\t\t\t<p>The title is the name of the result file for this test run.</p>\n\t\t\t\t<p><input type=\"text\" name=\"benchmark_title\" value=\"' . (!$is_new ? $e_schedule['Title'] : null) . '\" /></p>\n\t\t\t\t<h3>Test Run Identifier:</h3>\n\t\t\t\t<p>The test run identifier is the per-system name for the system(s) being benchmarked. The following variables may be used: <strong>.SYSTEM</strong>, <strong>.GROUP</strong>. Any custom per-user system variables set via the individual system pages can also be used.</p>\n\t\t\t\t<p><input type=\"text\" name=\"benchmark_identifier\" value=\"' . (!$is_new ? $e_schedule['Identifier'] : null) . '\" /></p>\n\t\t\t\t<h3>Test Suite To Run:</h3>\n\t\t\t\t<p><a href=\"?build_suite\">Build a suite</a> to add/select more tests to run or <a href=\"?local_suites\">view local suites</a> for more information on a particular suite. A test suite is a set of test profiles to run in a pre-defined manner.</p>';\n\t\t\t\t$main .= '<p><select name=\"suite_to_run\" id=\"suite_to_run_identifier\" onchange=\"phoromatic_show_basic_suite_details(\\'\\');\">';\n\t\t\t\tforeach(array_merge($local_suites, $official_suites) as $title => $id)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<option value=\"' . $id . '\">' . $title . '</option>';\n\t\t\t\t}\n\t\t\t\t$main .= '</select></p>';\n\t\t\t\t$main .= '<p><div id=\"suite_details\" style=\"background: #efefef;\"></div></p>';\n\t\t\t\t$main .= '<h3>Description:</h3>\n\t\t\t\t<p>The description is an optional way to add more details about the intent or objective of this test run.</p>\n\t\t\t\t<p><textarea name=\"benchmark_description\" id=\"benchmark_description\" cols=\"50\" rows=\"3\">' . (!$is_new ? $e_schedule['Description'] : null) . '</textarea></p>\n\t\t\t\t<hr /><h3>System Targets:</h3>\n\t\t\t\t<p>Select the systems that should be benchmarked at their next earliest convenience.</p>\n\t\t\t\t<p style=\"white-space: nowrap;\">';\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 ORDER BY Title ASC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\tif(!$is_new)\n\t\t\t\t{\n\t\t\t\t\t$e_schedule['RunTargetSystems'] = explode(',', $e_schedule['RunTargetSystems']);\n\t\t\t\t\t$e_schedule['RunTargetGroups'] = explode(',', $e_schedule['RunTargetGroups']);\n\t\t\t\t}\n\n\t\t\t\tif($row = $result->fetchArray())\n\t\t\t\t{\n\t\t\t\t\t$main .= '<h4>Systems: ';\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<input type=\"checkbox\" name=\"run_on_systems[]\" value=\"' . $row['SystemID'] . '\" ' . (!$is_new && in_array($row['SystemID'], $e_schedule['RunTargetSystems']) ? 'checked=\"checked\" ' : null) . '/> ' . $row['Title'] . ' ';\n\t\t\t\t\t}\n\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t$main .= '</h4>';\n\t\t\t\t}\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT GroupName FROM phoromatic_groups WHERE AccountID = :account_id ORDER BY GroupName ASC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\tif($row = $result->fetchArray())\n\t\t\t\t{\n\t\t\t\t\t$main .= '<h4>Groups: ';\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<input type=\"checkbox\" name=\"run_on_groups[]\" value=\"' . $row['GroupName'] . '\" ' . (!$is_new && in_array($row['GroupName'], $e_schedule['RunTargetGroups']) ? 'checked=\"checked\" ' : null) . '/> ' . $row['GroupName'] . ' ';\n\t\t\t\t\t}\n\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t$main .= '</h4>';\n\t\t\t\t}\n\n\t\t\t\t$main .= '</p>\n\t\t\t\t<hr /><h3>Environment Options</h3>\n\t\t\t\t<h4>Stress Testing</h4>\n\t\t\t\t<p>If you wish to test systems for stability/reliability rather than performance, use this option and specify the number of tests to run concurrently (two or more) and (optionally) for the total period of time to continue looping the benchmarks. These options are intended to just stress the system and will not record any benchmark results. From the command-line this testing mode can be used via the <em>phoronix-test-suite stress-run</em> sub-command.</p>\n\t\t\t\t<p><strong>Concurrent Number Of Test Processes:</strong> <select name=\"PTS_CONCURRENT_TEST_RUNS\"><option value=\"0\">Disabled</option>';\n\t\t\t\tfor($i = 2; $i <= 24; $i++)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<option value=\"' . $i . '\">' . $i . '</option>';\n\t\t\t\t}\n\t\t\t\t$main .= '</select></p>\n\t\t\t\t<p><strong>Force Loop Time:</strong> <select name=\"TOTAL_LOOP_TIME\"><option value=\"0\">Disabled</option>';\n\t\t\t\t$s = true;\n\t\t\t\tfor($i = 5; $i < 60; $i += 5)\n\t\t\t\t{\n\t\t\t\t\tif($i > 15 && $i % 10 != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '<option value=\"' . $i . '\">' . pts_strings::format_time($i, 'MINUTES') . '</option>';\n\t\t\t\t}\n\t\t\t\tfor($i = 60; $i <= (30 * 24 * 60); $i += 60)\n\t\t\t\t{\n\t\t\t\t\tif($i > 10080)\n\t\t\t\t\t{\n\t\t\t\t\t\t// 7 days\n\t\t\t\t\t\tif(($i % 1440) != 0)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\telse if($i > 480)\n\t\t\t\t\t{\n\t\t\t\t\t\t$s = !$s;\n\t\t\t\t\t\tif(!$s)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$main .= '<option value=\"' . $i . '\">' . pts_strings::format_time($i, 'MINUTES') . '</option>';\n\t\t\t\t}\n\t\t\t\t$main .= '</select></p>';\n\t\t\t\t$main .= '<p><a id=\"env_var_options_show\" onclick=\"javascript:document.getElementById(\\'env_var_options\\').style.display = \\'block\\'; javascript:document.getElementById(\\'env_var_options_show\\').style.display = \\'none\\'; \">Advanced Options</a></p> <div id=\"env_var_options\" style=\"display: none;\"><p>The advanced options require the Phoromatic clients be on the latest Phoronix Test Suite (10.8 or newer / Git). See the Phoronix Test Suite documentation for more information on these environment variables / advanced options.</p>' . pts_env::get_html_options('phoromatic') . '</div>';\n\n\t\t\t\t$main .= '<hr /><p align=\"left\"><input name=\"submit\" value=\"' . ($is_new ? 'Run' : 'Edit') . ' Benchmark\" type=\"submit\" onclick=\"return pts_rmm_validate_schedule();\" /></p>\n\t\t\t\t\t</form>';\n\t\t\t}\n\t\t}\n\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_benchmark_tickets WHERE AccountID = :account_id AND State >= 0 AND TicketIssueTime > :time_cutoff ORDER BY TicketIssueTime DESC LIMIT 30');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$stmt->bindValue(':time_cutoff', (time() - (60 * 60 * 24 * 14)));\n\t\t$result = $stmt->execute();\n\t\t$right = '<ul><li>Benchmark Tickets</li>';\n\n\t\tif($result)\n\t\t{\n\t\t\t$row = $result->fetchArray();\n\n\t\t\tif(!empty($row))\n\t\t\t{\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\t$right .= '<li><a href=\"?benchmark/' . $row['TicketID'] . '\">' . $row['Title'] . '</a></li>';\n\t\t\t\t}\n\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t}\n\t\t}\n\t\t$right .= '<li><em><a href=\"?benchmark/all\">View All Past Tickets</a></em></li>';\n\t\t$right .= '</ul>';\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in($right));\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2015 - 2022, Phoronix Media\n\tCopyright (C) 2015 - 2022, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_build_suite implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Build Custom Test Suite';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\tif(isset($_POST['suite_title']))\n\t\t{\n\t\t\tphoromatic_quit_if_invalid_input_found(array('suite_title', 'test_add', 'suite_version', 'suite_description'));\n\t\t\tif(strlen($_POST['suite_title']) < 3)\n\t\t\t{\n\t\t\t\techo '<h2>Suite title must be at least three characters.</h2>';\n\t\t\t}\n\n\t\t\t//echo 'TEST SUITE: ' . $_POST['suite_title'] . '<br />';\n\t\t\t//echo 'TEST SUITE: ' . $_POST['suite_description'] . '<br />';\n\t\t\t$tests = array();\n\n\t\t\tforeach($_POST['test_add'] as $i => $test_identifier)\n\t\t\t{\n\t\t\t\t$test_prefix = $_POST['test_prefix'][$i];\n\t\t\t\t$args = array();\n\t\t\t\t$args_name = array();\n\n\t\t\t\tforeach($_POST as $i => $v)\n\t\t\t\t{\n\t\t\t\t\tif(strpos($i, $test_prefix) !== false && substr($i, -9) != '_selected')\n\t\t\t\t\t{\n\t\t\t\t\t\tphoromatic_quit_if_invalid_input_found(array($i, $i . '_selected'));\n\t\t\t\t\t\tif(strpos($v, '||') !== false)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$opts = explode('||', $v);\n\t\t\t\t\t\t\t$a = array();\n\t\t\t\t\t\t\t$d = array();\n\t\t\t\t\t\t\tforeach($opts as $opt)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$t = explode('::', $opt);\n\t\t\t\t\t\t\t\t$a[] = $t[1];\n\t\t\t\t\t\t\t\t$d[] = $t[0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$args[] = $a;\n\t\t\t\t\t\t\t$args_name[] = $d;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$args[] = array($v);\n\t\t\t\t\t\t\t$args_name[] = array($_POST[$i . '_selected']);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$test_args = array();\n\t\t\t\t$test_args_description = array();\n\t\t\t\tpts_test_run_options::compute_all_combinations($test_args, null, $args, 0);\n\t\t\t\tpts_test_run_options::compute_all_combinations($test_args_description, null, $args_name, 0, ' - ');\n\n\t\t\t\tforeach(array_keys($test_args) as $i)\n\t\t\t\t{\n\t\t\t\t\t$tests[] = array('test' => $test_identifier, 'description' => $test_args_description[$i], 'args' => $test_args[$i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(count($tests) < 1)\n\t\t\t{\n\t\t\t\techo '<h2>You must add at least one test to the suite.</h2>';\n\t\t\t}\n\n\t\t\t$new_suite = new pts_test_suite();\n\t\t\t$version_bump = 0;\n\n\t\t//\tdo\n\t\t//\t{\n\t\t\t\t//$suite_version = '1.' . $version_bump . '.0';\n\t\t\t\t$suite_version = $_POST['suite_version'];\n\t\t\t\t$suite_id = $new_suite->clean_save_name_string($_POST['suite_title']) . '-' . $suite_version;\n\t\t\t\t$suite_dir = phoromatic_server::phoromatic_account_suite_path($_SESSION['AccountID'], $suite_id);\n\t\t//\t\t$version_bump++;\n\t\t//\t}\n\t\t//\twhile(is_dir($suite_dir));\n\t\t\tpts_file_io::mkdir($suite_dir);\n\t\t\t$save_to = $suite_dir . '/suite-definition.xml';\n\n\t\t\t$new_suite->set_title($_POST['suite_title']);\n\t\t\t$new_suite->set_version($suite_version); // $suite_version\n\t\t\t$new_suite->set_maintainer($_SESSION['UserName']);\n\t\t\t$new_suite->set_suite_type('System');\n\t\t\t$new_suite->set_description($_POST['suite_description']);\n\n\t\t\tforeach($tests as $m)\n\t\t\t{\n\t\t\t\t$new_suite->add_to_suite($m['test'], $m['args'], $m['description']);\n\t\t\t}\n\n\t\t\t$new_suite->save_xml(null, $save_to);\n\t\t\techo '<h2>Saved As ' . $suite_id . '</h2>';\n\t\t}\n\t\techo phoromatic_webui_header_logged_in();\n\t\t$main = '<h1>Local Suites</h1><p>Find already created local test suites by your account/group via the <a href=\"/?local_suites\">local suites</a> page.</p>';\n\n\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t{\n\t\t\t$suite = null;\n\t\t\tif(isset($PATH[0]))\n\t\t\t{\n\t\t\t\t$suite = phoromatic_server::phoromatic_account_suite_path($_SESSION['AccountID'], $PATH[0]) . '/suite-definition.xml';\n\t\t\t\tif(!is_file($suite))\n\t\t\t\t{\n\t\t\t\t\t$suite = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$suite = new pts_test_suite($suite);\n\n\t\t\t$main .= '<h1>Build Suite</h1><p>A test suite in the realm of the Phoronix Test Suite, OpenBenchmarking.org, and Phoromatic is <strong>a collection of test profiles with predefined settings</strong>. Establishing a test suite makes it easy to run repetitive testing on the same set of test profiles by simply referencing the test suite name.</p>';\n\t\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"build_suite\" id=\"build_suite\" method=\"post\" onsubmit=\"return validate_suite();\">\n\t\t\t<h3>Title:</h3>\n\t\t\t<p><input type=\"text\" name=\"suite_title\" value=\"' . $suite->get_title() . '\" /></p>\n\t\t\t<h3>Suite Version:</h3>\n\t\t\t<p><input type=\"text\" name=\"suite_version\" value=\"' . ($suite->get_version() == null ? '1.0.0' : $suite->get_version()) . '\" /></p>\n\t\t\t<h3>Description:</h3>\n\t\t\t<p><textarea name=\"suite_description\" id=\"suite_description\" cols=\"60\" rows=\"2\">' . $suite->get_description() . '</textarea></p>\n\t\t\t<h3>Tests In Schedule:</h3>\n\t\t\t<p><div id=\"test_details\"></div></p>\n\t\t\t<script type=\"text/javascript\">';\n\n\t\t\tforeach($suite->get_contained_test_result_objects() as $obj)\n\t\t\t{\n\t\t\t\t$main .= 'phoromatic_ajax_append_element(\"r_add_test_build_suite_details/&tp=' . $obj->test_profile->get_identifier() . '&tpa=' . $obj->get_arguments_description() . '\", \"test_details\");' . PHP_EOL;\n\t\t\t}\n\t\t\t$main .= '</script>\n\t\t\t<h3>Add Another Test</h3>';\n\t\t\t$main .= '<select name=\"add_to_suite_select_test\" id=\"add_to_suite_select_test\" onchange=\"phoromatic_build_suite_test_details();\"><option value=\"\"></option>';\n\t\t\t$dc = pts_client::download_cache_path();\n\t\t\t$dc_exists = is_file($dc . 'pts-download-cache.json');\n\t\t\tif($dc_exists)\n\t\t\t{\n\t\t\t\t$cache_json = file_get_contents($dc . 'pts-download-cache.json');\n\t\t\t\t$cache_json = json_decode($cache_json, true);\n\t\t\t}\n\t\t\tforeach(array_merge(pts_tests::local_tests(), pts_openbenchmarking::available_tests(false, isset($_COOKIE['list_show_all_test_versions']) && $_COOKIE['list_show_all_test_versions'])) as $test)\n\t\t\t{\n\t\t\t\t$cache_checked = false;\n\t\t\t\tif(phoromatic_server::read_setting('show_local_tests_only'))\n\t\t\t\t{\n\t\t\t\t\tif($dc_exists)\n\t\t\t\t\t{\n\t\t\t\t\t\tif($cache_json && isset($cache_json['phoronix-test-suite']['cached-tests']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$cache_checked = true;\n\t\t\t\t\t\t\tif(!in_array($test, $cache_json['phoronix-test-suite']['cached-tests']))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(!$cache_checked && phoromatic_server::read_setting('show_local_tests_only') && pts_test_install_request::test_files_available_on_local_system($test) == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$main .= '<option value=\"' . $test . '\">' . $test . '</option>';\n\t\t\t}\n\t\t\t$main .= '</select>';\n\t\t\t$main .= pts_web_embed::cookie_checkbox_option_helper('list_show_all_test_versions', 'Show all available test profile versions.');\n\t\t\t$main .= '<p align=\"right\"><input name=\"submit\" value=\"' . ($suite->get_title() != null ? 'Edit' : 'Create') .' Suite\" type=\"submit\" onclick=\"return pts_rmm_validate_suite();\" /></p>';\n\t\t}\n\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2018, Phoronix Media\n\tCopyright (C) 2014 - 2018, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_caches implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Download Caches';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\techo phoromatic_webui_header_logged_in();\n\t\t$main = '<h1>Cache Settings</h1>\n\t\t\t\t<h2>Test Profile Download Cache</h2>\n\t\t\t\t<p>Below are a list of files for verification/debugging purposes that are currently cached by the Phoromatic Server and available for Phoronix Test Suite client systems to download. These are files that are needed by various test profiles in the Phoronix Test Suite. To add more data to this Phoromatic Server cache, from the server run <strong>phoronix-test-suite make-download-cache</strong> while passing the names of any tests/suites you wish to have download and generate a cache for so they can be made available to the Phoronix Test Suite clients on your network.</p>';\n\n\t\tif(($dc = phoromatic_server::find_download_cache()))\n\t\t{\n\t\t\t$dc_path = dirname($dc) . '/';\n\n\t\t\tif(is_writable($dc_path))\n\t\t\t{\n\t\t\t\tif(isset($_POST['dc_submit']))\n\t\t\t\t{\n\t\t\t\t\t$dc_upload_file = basename($_FILES['dc_upload']['name']);\n\t\t\t\t\tif(is_file($dc_path . $dc_upload_file))\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<p>ERROR: Upload of ' . $dc_upload_file . ' failed; file already exists.</p>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(move_uploaded_file($_FILES['dc_upload']['tmp_name'], $dc_path . $dc_upload_file))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$main .= '<p>File uploaded: ' . $dc_upload_file . '</p>';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$main .= '<p>ERROR: Upload of ' . $dc_upload_file . ' failed.</p>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$main .= '<form action=\"/?caches\" method=\"post\" enctype=\"multipart/form-data\"><p align=\"center\">Add file to download cache: <input type=\"file\" name=\"dc_upload\" id=\"dc_upload\" /> <input type=\"submit\" value=\"Upload\" name=\"dc_submit\"></p></form>';\n\t\t\t}\n\n\t\t\t$dc_items = phoromatic_server::download_cache_items();\n\n\t\t\tif(!empty($dc_items))\n\t\t\t{\n\t\t\t\t$total_file_size = 0;\n\t\t\t\t$main .= '<table style=\"margin: 0 auto;\"><tr><th>File</th><th>Size</th><th>SHA256</th></tr>';\n\t\t\t\tforeach($dc_items as $file_name => $info)\n\t\t\t\t{\n\t\t\t\t\t$total_file_size += $info['file_size'];\n\t\t\t\t\t$main .= '<tr><td><a href=\"/download-cache.php?m=1&download=' . $file_name . '\">' . $file_name . '</a></td><td>' . round(max(0.1, $info['file_size']  / 1000000), 1) . 'MB</td><td>' . $info['sha256'] . '</td></tr>';\n\t\t\t\t}\n\t\t\t\t$main .= '</table>';\n\t\t\t\t$main .= '<p><strong>' . count($dc_items) . ' Files / ' . round($total_file_size / 1000000) . ' MB Cache Size</strong><br />';\n\t\t\t\t$main .= '<strong>Download Cache Location:</strong> ' . $dc . '</p>';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$main .= '<h3>No download cache file could be found; on the Phoromatic Server you should run <strong>phoronix-test-suite make-download-cache</strong>. See the <a href=\"https://github.com/phoronix-test-suite/phoronix-test-suite/tree/master/documentation\">documentation</a> for more information on download-cache setup.</h3>'; // TODO XXX implement from the GUI\n\t\t}\n\n\t\t$main .= '<hr /><h2>OpenBenchmarking.org Cache Data</h2>';\n\t\t$main .= '<p>Below is information pertaining to the OpenBenchmarking.org cache present on the Phoromatic Server. To update this cache, run <strong>phoronix-test-suite make-openbenchmarking-cache</strong> from the server.</p>';\n\n\t\t$index_files = pts_file_io::glob(PTS_OPENBENCHMARKING_SCRATCH_PATH . '*.index');\n\t\t$main .= '<table style=\"margin: 0 auto;\"><tr><th>Repository</th><th>Last Updated</th></tr>';\n\t\tforeach($index_files as $index_file)\n\t\t{\n\t\t\t$index_data = json_decode(file_get_contents($index_file), true);\n\t\t\t$main .= '<tr><td>' . basename($index_file, '.index') . '</td><td>' . date('d F Y H:i', $index_data['main']['generated']) . '</td></tr>';\n\t\t}\n\t\t$main .= '</table>';\n\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in());\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014, Phoronix Media\n\tCopyright (C) 2014, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_component_table implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'System Component Table';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\techo phoromatic_webui_header_logged_in();\n\n\t\t$main = '<h1>System Components</h1>';\n\t\t$main .= '<p>Detected hardware/software components via Phoronix Test Suite\\'s Phodevi implementation on the Phoromatic client systems.</p>';\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, Hardware, Software, ClientVersion, NetworkWakeOnLAN, NetworkMAC FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 ORDER BY Title ASC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\n\t\twhile($row = $result->fetchArray())\n\t\t{\n\t\t\t$components[$row['SystemID']] = array_merge(pts_result_file_analyzer::system_component_string_to_array($row['Software'], array('OS', 'Kernel', 'OpenGL', 'File-System')), pts_result_file_analyzer::system_component_string_to_array($row['Hardware'], array('Processor', 'Motherboard', 'Memory', 'Disk', 'Graphics')));\n\t\t\t$components[$row['SystemID']]['Phoronix Test Suite'] = $row['ClientVersion'];\n\t\t\t$components[$row['SystemID']]['WoL Info'] = $row['NetworkWakeOnLAN'];\n\t\t\t$components[$row['SystemID']]['MAC'] = $row['NetworkMAC'];\n\t\t\t$system_ids[$row['SystemID']] = $row['Title'];\n\t\t}\n\n\t\t$main .= '<div style=\"margin: 10px auto; overflow: auto;\"><table>';\n\t\t$component_types = array('MAC', 'Processor', 'Motherboard', 'Memory', 'Disk', 'Graphics', 'OS', 'Kernel', 'OpenGL', 'File-System', 'Phoronix Test Suite', 'WoL Info');\n\t\t$main .= '<tr><th>&nbsp;</th>';\n\t\tforeach($component_types as $type)\n\t\t{\n\t\t\t$main .= '<th>' . $type . '</th>';\n\t\t}\n\t\tforeach($components as $system_id => $component_array)\n\t\t{\n\t\t\t$main .= '<tr>';\n\t\t\t$main .= '<th><a href=\"/?systems/' . $system_id . '\">' . $system_ids[$system_id] . '</a></th>';\n\t\t\tforeach($component_types as $type)\n\t\t\t{\n\t\t\t\t$c = (isset($component_array[$type]) ? $component_array[$type] : 'N/A');\n\t\t\t\tif(($x = stripos($c, ' @ ')) !== false)\n\t\t\t\t{\n\t\t\t\t\t$c = substr($c, 0, $x);\n\t\t\t\t}\n\t\t\t\tif(($x = stripos($c, ' (')) !== false)\n\t\t\t\t{\n\t\t\t\t\t$c = substr($c, 0, $x);\n\t\t\t\t}\n\n\t\t\t\t$main .= '<td>' . $c . '</td>';\n\t\t\t}\n\n\t\t\t$main .= '</tr>';\n\n\n\t\t}\n\t\t$main .= '</table></div>';\n\n\t\t$right = null;\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in($right));\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2018, Phoronix Media\n\tCopyright (C) 2018, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_create_test implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Create Test Profile';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PATH)\n\t{\n\t\tif(PHOROMATIC_USER_IS_VIEWER)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\t$types = pts_validation::process_xsd_types();\n\n\t\tif(isset($_POST['tp_update']) && isset($_POST['test-definition_xml']))\n\t\t{\n\t\t\t$tp = new pts_test_profile($_POST['test-definition_xml']);\n\t\t\t$tp->set_identifier($_POST['tp_update']);\n\t\t\t$tp_path = PTS_TEST_PROFILE_PATH . $tp->get_identifier(false) . '-' . $tp->get_test_profile_version();\n\t\t\tpts_file_io::mkdir($tp_path);\n\n\t\t\tforeach(pts_validation::test_profile_permitted_files() as $permitted_file)\n\t\t\t{\n\t\t\t\t$pfs = str_replace('.', '_', $permitted_file);\n\t\t\t\tif(isset($_POST[$pfs]))\n\t\t\t\t{\n\t\t\t\t\t/* Replaces DOS line-endings of the POST request with platform compatible ones */\n\t\t\t\t\t$fc = str_replace(\"\\r\\n\", PHP_EOL, $_POST[$pfs]);\n\t\t\t\t\tfile_put_contents($tp_path . '/' . $permitted_file, $fc);\n\t\t\t\t}\n\t\t\t}\n\t\t\theader('Location: /?create_test/' . $tp->get_identifier(false) . '-' . $tp->get_test_profile_version());\n\t\t}\n\n\t\tif(isset($_POST['test_profile_base']))\n\t\t{\n\t\t\t$tp_identifier = 'local/' . pts_validation::string_to_sanitized_test_profile_base(str_replace('local/', '', $_POST['test_profile_base']));\n\n\t\t\t$writer = new nye_XmlWriter();\n\t\t\t$ret = pts_validation::xsd_to_var_array_generate_xml(pts_openbenchmarking::openbenchmarking_standards_path() . 'schemas/test-profile.xsd', $types, $_POST, $writer);\n\t\t\t$passed = true;\n\t\t\tif($ret !== true)\n\t\t\t{\n\t\t\t\techo '<p>ERROR: ' . $ret . '</p>';\n\t\t\t\t$passed = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$tp = new pts_test_profile($writer->getXML());\n\t\t\t\t$tp_path = PTS_TEST_PROFILE_PATH . $tp_identifier . '-' . $tp->get_test_profile_version();\n\t\t\t\tpts_file_io::mkdir($tp_path);\n\t\t\t\t$writer->saveXMLFile($tp_path . '/test-definition.xml');\n\t\t\t}\n\n\t\t\t$writer = new nye_XmlWriter();\n\t\t\t$ret = pts_validation::xsd_to_var_array_generate_xml(pts_openbenchmarking::openbenchmarking_standards_path() . 'schemas/test-profile-downloads.xsd', $types, $_POST, $writer);\n\t\t\t$writer->saveXMLFile($tp_path . '/downloads.xml');\n\n\t\t\tif($passed)\n\t\t\t{\n\t\t\t\tpts_validation::generate_test_profile_file_templates($tp_identifier, $tp_path);\n\t\t\t\theader('Location: /?create_test/' . $tp_identifier . '-' . $tp->get_test_profile_version());\n\t\t\t}\n\t\t}\n\t\tif(isset($_POST['dc_select_item']))\n\t\t{\n\t\t\t$to_add = false;\n\n\t\t\tforeach(phoromatic_server::download_cache_items() as $file_name => $info)\n\t\t\t{\n\t\t\t\tif($file_name == $_POST['dc_select_item'])\n\t\t\t\t{\n\t\t\t\t\t$to_add = $info;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($to_add)\n\t\t\t{\n\t\t\t\t$identifier_item = isset($PATH[1]) ? $PATH[0] . '/' . $PATH[1] : false;\n\t\t\t\tif($identifier_item && pts_test_profile::is_test_profile($identifier_item))\n\t\t\t\t{\n\t\t\t\t\t$tp = new pts_test_profile($identifier_item);\n\t\t\t\t\t$tdw = new nye_XmlWriter();\n\n\t\t\t\t\t// TODO adapt former code:\n\t\t\t\t\t/*\n\t\t\t\t\t$tdw->add_download($info['file_name'], $info['md5'], $info['sha256'], $info['file_name'], $info['file_size'], null, null);\n\t\t\t\t\t\n\t\t\t\t\tINTO:\n\t\t\t\t\t\n\t\t\t\t\t$tp's get_downloads() with new pts_test_file_download entries\n\t\t\t\t\t*/\n\n\t\t\t\t\t$ret = pts_validation::xsd_to_rebuilt_xml(pts_openbenchmarking::openbenchmarking_standards_path() . 'schemas/test-profile-downloads.xsd', $types, $tp, $tdw);\n\t\t\t\t\t$tdw->saveXMLFile(PTS_TEST_PROFILE_PATH . $tp->get_identifier(false) . '-' . $tp->get_test_profile_version() . '/downloads.xml');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(isset($PATH[1]) && strpos($PATH[1], '&delete') !== false)\n\t\t{\n\t\t\t$identifier_item = isset($PATH[1]) ? $PATH[0] . '/' . str_replace('&delete', '', $PATH[1]) : false;\n\t\t\tif($identifier_item && pts_test_profile::is_test_profile($identifier_item))\n\t\t\t{\n\t\t\t\t$tp = new pts_test_profile($identifier_item);\n\t\t\t\tif($tp->get_identifier() != null)\n\t\t\t\t{\n\t\t\t\t\tpts_file_io::delete($tp->get_resource_dir(), null, true);\n\t\t\t\t\theader('Location: /?tests');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$main = null;\n\t\tif(PHOROMATIC_USER_IS_VIEWER)\n\t\t{\n\t\t\tgoto RENDER_PAGE;\n\t\t}\n\n\t\t$identifier_item = isset($PATH[1]) ? $PATH[0] . '/' . $PATH[1] : false;\n\t\tif($identifier_item && pts_test_profile::is_test_profile($identifier_item))\n\t\t{\n\t\t\t$tp = new pts_test_profile($identifier_item);\n\t\t\t$main .= '<h1>Test Profile Editor: ' . $tp->get_identifier() . '</h1>';\n\n\t\t\tif(phoromatic_server::find_download_cache())\n\t\t\t{\n\t\t\t\t$main .= '<h3>Add File From Download Cache To Test</h3>';\n\t\t\t\t$dc_items = phoromatic_server::download_cache_items();\n\t\t\t\tif(!empty($dc_items))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"add_dc_file\" id=\"add_dc_file\" method=\"post\"><a href=\"/?caches\">Manage Download Cache</a> - Add File From Download Cache: <select name=\"dc_select_item\">';\n\t\t\t\t\tforeach($dc_items as $file_name => $info)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<option value=\"' . $file_name . '\">' . $file_name . '</option>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</select> <input type=\"submit\" value=\"Add File\" /></form>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$main .= '<form action=\"?create_test/' . $tp->get_identifier() . '\" name=\"create_test\" id=\"create_test\" method=\"post\" enctype=\"multipart/form-data\"><input type=\"hidden\" name=\"tp_update\" value=\"' . $tp->get_identifier() . '\" />';\n\t\t\tforeach(pts_file_io::glob($tp->get_resource_dir() . '/*') as $file)\n\t\t\t{\n\t\t\t\t$file_name = basename($file);\n\t\t\t\t$contents = file_get_contents($file);\n\t\t\t\t$extension = substr($file_name, strrpos($file_name, '.') + 1);\n\t\t\t\t$main .= '<p><strong>' . $file_name . ':</strong></p>';\n\t\t\t\tif($extension == 'xml')\n\t\t\t\t{\n\t\t\t\t\t$contents = htmlentities($contents, ENT_COMPAT | ENT_XML1, 'UTF-8', false);\n\t\t\t\t}\n\t\t\t\t$main .= '<p><textarea style=\"min-height: 160px; height: auto; width: 100%;\" rows=\"' . ceil(count(explode(\"\\n\", $contents)) * 1.05) . '\" name=\"' . $file_name . '\">' . $contents . '</textarea></p>';\n\t\t\t\t\t$main .= '</p>';\n\t\t\t}\n\t\t\t$main .= '<input name=\"submit\" value=\"Save Test Profile\" type=\"submit\" /></form>';\n\t\t\tgoto RENDER_PAGE;\n\t\t}\n\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"create_test\" id=\"create_test\" method=\"post\">';\n\t\t$main .= '<h1>Test Profile Creator</h1>';\n\t\t$main .= '<p>Name of test the test profile, used as the unique identifier for calling the test profile, etc. The input will automatically be made lower-case and spaces turned into dashes in generating the actual test profile identifier.</p><p><em>local/</em><input type=\"text\" name=\"test_profile_base\" value=\"\" required /></p>';\n\t\t$main .= '<p>Fill out the below fields to create the XML meta-data used to define a Phoronix Test Suite / OpenBenchmarking.org test profile.</p>';\n\t\t$types = pts_validation::process_xsd_types();\n\t\t$main .= '<h2>test-definition.xml</h2>';\n\t\t$main .= pts_validation::xsd_to_html_creator(pts_openbenchmarking::openbenchmarking_standards_path() . 'schemas/test-profile.xsd', $types);\n\n\t\t//pts_client::$display->generic_heading('downloads.xml Creation');\n\t\t//do\n\t\t//{\n\t\t$main .= '<h2>downloads.xml</h2>';\n\t\t$main .= pts_validation::xsd_to_html_creator(pts_openbenchmarking::openbenchmarking_standards_path() . 'schemas/test-profile-downloads.xsd', $types);\n\t\t//}\n\t\t//while(pts_user_io::prompt_bool_input('Add another file/download?', -1));\n\t\t//pts_validation::generate_test_profile_file_templates($tp_identifier, $tp_path);\n\t\t$main .= '<input name=\"submit\" value=\"Save\" type=\"submit\" /></form>';\n\n\t\tRENDER_PAGE:\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2016, Phoronix Media\n\tCopyright (C) 2014 - 2016, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_dashboard implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'System Dashboard';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\techo phoromatic_webui_header_logged_in();\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 ORDER BY LastCommunication DESC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\techo '<script type=\"text/javascript\"> setInterval(function() { window.location.reload(); }, 79000); </script>';\n\t\techo '<div style=\"margin: 10px 0 30px; clear: both; padding-bottom: 40px;\">';\n\t\twhile($row = $result->fetchArray())\n\t\t{\n\t\t\t$opacity = null;\n\t\t\t// stripos($row['CurrentTask'], 'idling') !== false ||\n\t\t\tif(phoromatic_server::system_check_if_down($_SESSION['AccountID'], $row['SystemID'], $row['LastCommunication'], $row['CurrentTask']) || stripos($row['CurrentTask'], 'Unknown') !== false)\n\t\t\t{\n\t\t\t\t$not_testing = false;\n\t\t\t\t$opacity = ' style=\"background: #f44336; color: #FFF;\"';\n\t\t\t}\n\t\t\telse if(stripos($row['CurrentTask'], 'idling') !== false)\n\t\t\t{\n\t\t\t\t$not_testing = true;\n\t\t\t//\tcontinue;\n\t\t\t}\n\t\t\telse if(stripos($row['CurrentTask'], 'waiting') !== false || stripos($row['CurrentTask'], 'shutdown') !== false)\n\t\t\t{\n\t\t\t\t$not_testing = true;\n\t\t\t\t$opacity = ' style=\"opacity: 0.3;\"';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$not_testing = false;\n\t\t\t}\n\n\t\t\techo '<a href=\"?systems/' . $row['SystemID'] . '\"><div class=\"phoromatic_dashboard_block\"' . $opacity . '>';\n\t\t\techo '<div style=\"float: left; width: 30%;\">';\n\t\t\techo '<h1>' . $row['Title'] . '</h1>';\n\n\t\t\t$components = array_merge(pts_result_file_analyzer::system_component_string_to_array($row['Hardware'], array('Processor', 'Motherboard')), pts_result_file_analyzer::system_component_string_to_array($row['Software'], array('OS', 'Kernel')));\n\t\t\tforeach($components as &$c)\n\t\t\t{\n\t\t\t\tif(($x = stripos($c, ' @')) !== false)\n\t\t\t\t\t$c = substr($c, 0, $x);\n\t\t\t\tif(($x = stripos($c, ' (')) !== false)\n\t\t\t\t\t$c = substr($c, 0, $x);\n\t\t\t}\n\t\t\techo '<p><em>' . implode(' - ', $components) . '</em></p>';\n\t\t\techo '<h2>' . $row['CurrentTask'] . '</h2>';\n\t\t\tif(!empty($row['CurrentProcessSchedule']))\n\t\t\t{\n\t\t\t\techo '<h2><a href=\"/?schedules/' . $row['CurrentProcessSchedule'] . '\">' . phoromatic_server::schedule_id_to_name($row['CurrentProcessSchedule']) . '</a></h2>';\n\t\t\t}\n\t\t\telse if(!empty($row['CurrentProcessTicket']))\n\t\t\t{\n\t\t\t\techo '<h2><a href=\"/?benchmark/' . $row['CurrentProcessTicket'] . '/&view_log=' . $row['SystemID'] . '\">' . phoromatic_server::ticket_id_to_name($row['CurrentProcessTicket']) . '</a></h2>';\n\t\t\t}\n\t\t\techo '</div>';\n\n\t\t\techo '<div style=\"float: left;\">';\n\t\t\techo '<h2>' . $row['LastIP'] . '</h2>';\n\t\t\techo '</div>';\n\n\t\t\t$time_remaining = phoromatic_compute_estimated_time_remaining($row['EstimatedTimeForTask'], $row['LastCommunication']);\n\t\t\tif($time_remaining)\n\t\t\t{\n\t\t\t\techo '<div style=\"float: left; text-align: center; margin: 0 6px;\">';\n\t\t\t\techo '<h2>~ ' . $time_remaining . ' <sub>mins</sub></h2>';\n\t\t\t\techo '<p style=\"font-size: 90%; color: #FFF;\"><em>Estimated Time Remaining</em></p>';\n\t\t\t\tif(!empty($row['TimeToNextCommunication']))\n\t\t\t\t{\n\t\t\t\t\techo '<pstyle=\"color: #FFF;\"><em>' . phoromatic_compute_estimated_time_remaining_string($row['TimeToNextCommunication'], $row['LastCommunication'], 'To Next Communication') . '</em></p>';\n\t\t\t\t}\n\t\t\t\techo '</div>';\n\t\t\t}\n\n\t\t\tif($not_testing)\n\t\t\t{\n\t\t\t\t$next_job_in = phoromatic_server::time_to_next_scheduled_job($_SESSION['AccountID'], $row['SystemID']);\n\t\t\t\tif($next_job_in > 0)\n\t\t\t\t{\n\t\t\t\t\tif($next_job_in > 240)\n\t\t\t\t\t{\n\t\t\t\t\t\t$next_job_in = round($next_job_in / 60);\n\t\t\t\t\t\t$next_unit = 'hours';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$next_unit = 'mins';\n\t\t\t\t\t}\n\n\t\t\t\t\techo '<div style=\"float: left; margin: 0 0 0 10px; text-align: center;\">';\n\t\t\t\t\techo '<h2>' . $next_job_in . ' <sub>' . $next_unit . '</sub></h2>';\n\t\t\t\t\techo '<p style=\"font-size: 90%; color: #FFF;\"><em>Time To Next Scheduled Task</em></p>';\n\t\t\t\t\techo '</div>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$system_path = phoromatic_server::phoromatic_account_system_path($_SESSION['AccountID'], $row['SystemID']);\n\t\t\tif(is_file($system_path . 'sensors-pool.json'))\n\t\t\t{\n\t\t\t\t$sensors = file_get_contents($system_path . 'sensors-pool.json');\n\t\t\t\t$sensors = json_decode($sensors, true);\n\n\t\t\t\techo '<div style=\"float: right; margin: 0 10px 0 10px;\">';\n\t\t\t\t$g_count = 0;\n\t\t\t\tforeach(array('CPU Usage', 'Memory Usage', 'CPU Temperature', 'System Temperature', 'GPU Temperature', 'Swap Usage', 'System Iowait', 'CPU Frequency') as $s)\n\t\t\t\t{\n\t\t\t\t\tif(!isset($sensors[$s]) || !isset($sensors[$s]['values']) || count($sensors[$s]['values']) < 5)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$g_count++;\n\n\t\t\t\t\tif($g_count <= 3)\n\t\t\t\t\t{\n\t\t\t\t\t\t$graph = new pts_sys_graph(array('title' => $s, 'x_scale' => 'm', 'y_scale' => $sensors[$s]['unit'], 'text_size' => 10, 'reverse_x_direction' => false, 'width' => 300, 'height' => 120, 'text_color' => '#000000', 'paint_color' => '#D95D04', 'background_color' => '#ffffff', 'shade_color' => '#ffffff'));\n\t\t\t\t\t\t$graph->render_base();\n\t\t\t\t\t\t$svg_dom = $graph->render_graph_data($sensors[$s]['values']);\n\t\t\t\t\t\tif($svg_dom === false)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$output_type = 'SVG';\n\t\t\t\t\t\t$graph = $svg_dom->output(null, $output_type);\n\t\t\t\t\t\techo substr($graph, strpos($graph, '<svg'));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\techo '</div>';\n\t\t\t}\n\n\t\t\techo '<hr style=\"width: ' . $row['TaskPercentComplete'] . '%;\" />';\n\t\t\techo '</div></a>';\n\n\t\t}\n\t\techo '</div>';\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2015 - 2016, Phoronix Media\n\tCopyright (C) 2015 - 2016, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_local_suites implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Local Test Suite';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$suite_dir = phoromatic_server::phoromatic_account_suite_path($_SESSION['AccountID']);\n\t\t$main = '<h1>Local Suites</h1><p>These are test suites created by you or another account within your group. Suites are an easy collection of test profiles. New suits can be trivially made via the <a href=\"/?build_suite\">build suite</a> page.</p>';\n\n\t\tif(!PHOROMATIC_USER_IS_VIEWER && isset($PATH[0]) && $PATH[0] == 'delete')\n\t\t{\n\t\t\tforeach(explode(',', $PATH[1]) as $id)\n\t\t\t{\n\t\t\t\tif(is_file($suite_dir . $id . '/suite-definition.xml'))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<p><strong>Deleting:</strong> ' . $id . '</p>';\n\t\t\t\t\tunlink($suite_dir . $id . '/suite-definition.xml');\n\t\t\t\t\tpts_file_io::delete($suite_dir . $id, null, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$suite_count = 0;\n\t\tforeach(pts_file_io::glob($suite_dir . '*/suite-definition.xml') as $xml_path)\n\t\t{\n\t\t\t$suite_count++;\n\t\t\t$id = basename(dirname($xml_path));\n\t\t\t$test_suite = new pts_test_suite($xml_path);\n\n\t\t\t$main .= '<a name=\"' . $id . '\"></a><h1>' . pts_strings::sanitize($test_suite->get_title()) . ' [' . $id . ']</h1>';\n\t\t\t$main .= '<p><strong>' . pts_strings::sanitize($test_suite->get_maintainer()) . '</strong></p>';\n\t\t\t$main .= '<p><em>' . pts_strings::sanitize($test_suite->get_description()) . '</em></p>';\n\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t{\n\t\t\t\t$main .= '<p><a href=\"?build_suite/' . $id . '\">Edit Suite</a> - <a href=\"?local_suites/delete/' . $id . '\">Delete Suite</a></p>';\n\t\t\t}\n\t\t\t$main .= '<div style=\"max-height: 400px; width: 80%; overflow-y: scroll;\">';\n\t\t\t$test_suite->sort_contained_tests();\n\t\t\tforeach($test_suite->get_contained_test_result_objects() as $tro)\n\t\t\t{\n\t\t\t\t$main .= '<h3>' . $tro->test_profile->get_title() . ' [' . $tro->test_profile->get_identifier() . ']</h3>';\n\t\t\t\t$main .= '<p>' . $tro->get_arguments_description() . '</p>';\n\t\t\t}\n\t\t\t$main .= '</div>';\n\t\t\t$main .= '<hr />';\n\t\t}\n\n\t\tif($suite_count == 0)\n\t\t\t$main .= '<h1>No Test Suites Found</h1>';\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2021, Phoronix Media\n\tCopyright (C) 2008 - 2021, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_logs implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Logs';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$main = null;\n\t\tif(isset($PATH[0]))\n\t\t{\n\t\t\tif($PATH[0] == 'context' && isset($PATH[1]))\n\t\t\t{\n\t\t\t\t$attribs = explode(',', $PATH[1]);\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT UserContextStep, UserContextLog FROM phoromatic_system_context_logs WHERE AccountID = :account_id AND ScheduleID = :schedule_id AND SystemID = :system_id AND TriggerID = :trigger_id ORDER BY UploadTime ASC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':system_id', $attribs[0]);\n\t\t\t\t$stmt->bindValue(':schedule_id', $attribs[1]);\n\t\t\t\t$stmt->bindValue(':trigger_id', base64_decode($attribs[2]));\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\twhile($row = $result->fetchArray())\n\t\t\t\t{\n\t\t\t\t\t$main .= '<h2>' . $row['UserContextStep'] . '</h2><p>' . str_replace(PHP_EOL, '<br />', $row['UserContextLog']) . '</p><hr />';\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in(null));\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2015, Phoronix Media\n\tCopyright (C) 2008 - 2015, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_main implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Main';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tprotected static function result_match($schedule_id, $system_id, $date)\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT PPRID FROM phoromatic_results WHERE AccountID = :account_id AND ScheduleID = :schedule_id AND SystemID = :system_id AND Trigger = :trigger LIMIT 1');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$stmt->bindValue(':schedule_id', $schedule_id);\n\t\t$stmt->bindValue(':system_id', $system_id);\n\t\t$stmt->bindValue(':trigger', $date);\n\t\t$result = $stmt->execute();\n\t\treturn $result && ($row = $result->fetchArray()) ? $row['PPRID'] : false;\n\t}\n\tprotected static function system_info($system_id, $info = '*')\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT ' . $info . ' FROM phoromatic_systems WHERE AccountID = :account_id AND SystemID = :system_id LIMIT 1');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$stmt->bindValue(':system_id', $system_id);\n\t\t$result = $stmt->execute();\n\t\treturn $result && ($row = $result->fetchArray()) ? $row : false;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\techo phoromatic_webui_header_logged_in();\n\t\t$main = null;\n\t\t/*\n\t\tif(pts_network::internet_support_available())\n\t\t{\n\t\t\t// Check For pts-core updates\n\t\t\t$latest_reported_version = pts_network::http_get_contents('http://www.phoronix-test-suite.com/LATEST_CORE');\n\t\t\tif(is_numeric($latest_reported_version) && $latest_reported_version > PTS_CORE_VERSION)\n\t\t\t{\n\t\t\t\t\t// New version of PTS is available\n\t\t\t\t$main .= '<p style=\"font-weight: 600; color: #ccc;\">An outdated version of the Phoronix Test Suite / Phoromatic is currently installed.' . PHP_EOL . 'The version in use is v' . PTS_VERSION . ' (v' . PTS_CORE_VERSION . '), but the latest is pts-core v' . $latest_reported_version . '. Visit <a href=\"http://www.phoronix-test-suite.com/\">Phoronix-Test-Suite.com</a> to update this software.</strong>';\n\t\t\t}\n\t\t}\n\t\t*/\n\t\t$main .= '<h1>Phoromatic</h1>';\n\n\t\t$main .= phoromatic_systems_needing_attention();\n\n\t\t$main_page_message = phoromatic_server::read_setting('main_page_message');\n\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t{\n\t\t\t$main .= '<p>To get started with your new account, the basic steps to get started include:</p>\n\t\t\t\t<ol>\n\t\t\t\t\t<li>Connect/sync the Phoronix Test Suite client systems (the systems to be benchmarked) to this account. In the simplest form, you just need to run the following command on the test systems: <strong style=\"font-weight: 800;\">phoronix-test-suite phoromatic.connect ' . phoromatic_web_socket_server_addr() . '</strong>. For more information view the instructions on the <a href=\"?systems\">systems page</a>.</li>\n\t\t\t\t\t<li>Configure your <a href=\"?settings\">account settings</a>.</li>\n\t\t\t\t\t<li><a href=\"?schedules\">Create a test schedule</a>. A schedule is for running test(s) on selected system(s) on a routine, timed basis or whenever a custom trigger is passed to the Phoromatic server. A test schedule could be for running benchmarks on a daily basis, whenever a new Git commit is applied to a code-base, or other events occurred. You can also enrich the potential by adding pre/post-test hooks for ensuring the system is set to a proper state for benchmarking. Alternatively, you can <a href=\"?benchmark\">create a benchmark ticket</a> for one-time testing on one or more systems.</li>\n\t\t\t\t\t<li>View the automatically generated <a href=\"?results\">test results</a>.</li>';\n\n\t\t\tif(!empty($main_page_message))\n\t\t\t\t$main .= '<li><strong>' . $main_page_message . '</strong></li>';\n\n\t\t\t$main .= '</ol>';\n\n\t\t}\n\t\telse if(!empty($main_page_message))\n\t\t{\n\t\t\t$main .= '<p><strong>' . $main_page_message . '</strong></p>';\n\t\t}\n\n\t\t$main .= '<hr /><div id=\"phoromatic_fixed_main_table\">';\n\n\t\t$systems_needing_attention = phoromatic_server::systems_appearing_down($_SESSION['AccountID']);\n\t\t$systems_idling = phoromatic_server::systems_idling($_SESSION['AccountID']);\n\t\t$systems_shutdown = phoromatic_server::systems_shutdown($_SESSION['AccountID']);\n\t\t$systems_running_tests = phoromatic_server::systems_running_tests($_SESSION['AccountID']);\n\n\t\t$main .= '<div id=\"phoromatic_main_table_cell\">\n\t\t\t<h2>' . pts_strings::plural_handler(count($systems_running_tests), 'System') . ' Running Tests</h2>\n\t\t\t<h2>' . pts_strings::plural_handler(count($systems_idling), 'System') . ' Idling</h2>\n\t\t\t<h2>' . pts_strings::plural_handler(count($systems_shutdown), 'System') . ' Shutdown</h2>\n\t\t\t<h2>' . pts_strings::plural_handler(count($systems_needing_attention), 'System') . ' Needing Attention</h2>';\n\t\t$main .= '<hr /><h2>Systems Running Tests</h2>';\n\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 AND CurrentTask NOT LIKE \\'%Idling%\\' AND CurrentTask NOT LIKE \\'%Shutdown%\\' ORDER BY LastCommunication DESC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\n\t\twhile($result && $row = $result->fetchArray())\n\t\t{\n\t\t\t$main .= '<div class=\"phoromatic_overview_box\">';\n\t\t\t$main .= '<h1><a href=\"?systems/' . $row['SystemID'] . '\">' . $row['Title'] . '</a></h1>';\n\t\t\t$main .= $row['CurrentTask'] . '<br />';\n\n\t\t\tif(!empty($row['CurrentProcessSchedule']))\n\t\t\t{\n\t\t\t\t$main .= '<a href=\"?schedules/' . $row['CurrentProcessSchedule'] . '\">' . phoromatic_server::schedule_id_to_name($row['CurrentProcessSchedule']) . '</a><br />';\n\t\t\t}\n\n\t\t\tif(!empty($row['CurrentProcessSchedule']))\n\t\t\t{\n\t\t\t\t$main .= ' - <a href=\"/?schedules/' . $row['CurrentProcessSchedule'] . '\">' . phoromatic_server::schedule_id_to_name($row['CurrentProcessSchedule']) . '</a><br />';\n\t\t\t}\n\t\t\telse if(!empty($row['CurrentProcessTicket']))\n\t\t\t{\n\t\t\t\t$main .= '   <a href=\"/?benchmark/' . $row['CurrentProcessTicket'] . '/&view_log=' . $row['SystemID'] . '\">' . phoromatic_server::ticket_id_to_name($row['CurrentProcessTicket']) . '</a><br />';\n\t\t\t}\n\n\t\t\t$time_remaining = phoromatic_compute_estimated_time_remaining($row['EstimatedTimeForTask'], $row['LastCommunication']);\n\t\t\tif($time_remaining)\n\t\t\t{\n\t\t\t\t$main .= '<em>~ ' . pts_strings::plural_handler($time_remaining, 'Minute') . ' Remaining</em>';\n\t\t\t}\n\t\t\t$main .= '</div>';\n\t\t}\n\t\t$main .= '</div>';\n\n\t\t$results_today = phoromatic_server::test_results($_SESSION['AccountID'], strtotime('today'));\n\t\t$results_total = phoromatic_server::test_results_benchmark_count($_SESSION['AccountID']);\n\t\t$schedules_today = phoromatic_server::schedules_today($_SESSION['AccountID']);\n\t\t$schedules_total = phoromatic_server::schedules_total($_SESSION['AccountID']);\n\t\t$benchmark_tickets_today = phoromatic_server::benchmark_tickets_today($_SESSION['AccountID']);\n\t\t$main .= '<div id=\"phoromatic_main_table_cell\">\n\t\t<h2>' . pts_strings::plural_handler(count($schedules_today), 'Schedule') . ' Active Today</h2>\n\t\t<h2>' . pts_strings::plural_handler(count($schedules_total), 'Schedule') . ' In Total</h2>\n\t\t<h2>' . pts_strings::plural_handler(count($benchmark_tickets_today), 'Active Benchmark Ticket') . '</h2>\n\t\t<h2>' . pts_strings::plural_handler(count($results_today), 'Test Result') . ' Today / ' . pts_strings::plural_handler($results_total, 'Benchmark Result') . ' Total</h2>';\n\t\t$main .= '<hr /><h2>Today\\'s Scheduled Tests</h2>';\n\n\t\tforeach($schedules_today as &$row)\n\t\t{\n\t\t\t$systems_for_schedule = phoromatic_server::systems_associated_with_schedule($_SESSION['AccountID'], $row['ScheduleID']);\n\t\t\t$extra_css = null;\n\t\t\tif(empty($systems_for_schedule))\n\t\t\t{\n\t\t\t\t$extra_css = ' opacity: 0.4;';\n\t\t\t}\n\t\t\tlist($h, $m) = explode('.', $row['RunAt']);\n\n\t\t\t$main .= '<div style=\"' . $extra_css . '\" class=\"phoromatic_overview_box\">';\n\t\t\t$main .= '<h1><a href=\"?schedules/' . $row['ScheduleID'] . '\">' . $row['Title'] . '</a></h1>';\n\n\t\t\tif(!empty($systems_for_schedule))\n\t\t\t{\n\t\t\t\tif($row['RunAt'] > date('H.i'))\n\t\t\t\t{\n\t\t\t\t\t$run_in_future = true;\n\t\t\t\t\t$main .= '<h3>Runs In ' . pts_strings::format_time((($h * 60) + $m) - ((date('H') * 60) + date('i')), 'MINUTES') . '</h3>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$run_in_future = false;\n\t\t\t\t\t$main .= '<h3>Triggered ' . pts_strings::format_time(max(1, (date('H') * 60) + date('i') - (($h * 60) + $m)), 'MINUTES') . ' Ago</h3>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tforeach($systems_for_schedule as $system_id)\n\t\t\t{\n\t\t\t\t$pprid = self::result_match($row['ScheduleID'], $system_id, date('Y-m-d'));\n\n\t\t\t\tif($pprid)\n\t\t\t\t\t$main .= '<a href=\"?result/' . $pprid . '\">';\n\n\t\t\t\t$main .= phoromatic_server::system_id_to_name($system_id);\n\n\t\t\t\tif($pprid)\n\t\t\t\t\t$main .= '</a>';\n\t\t\t\telse if(!$run_in_future)\n\t\t\t\t{\n\t\t\t\t\t$sys_info = self::system_info($system_id);\n\t\t\t\t\t$last_comm_diff = time() - strtotime($sys_info['LastCommunication']);\n\n\t\t\t\t\t$main .= ' <sup><a href=\"?systems/' . $system_id . '\">';\n\t\t\t\t\tif($last_comm_diff > 3600)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<strong>Last Communication: ' . pts_strings::format_time($last_comm_diff, 'SECONDS', true, 60) . ' Ago</strong>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= $sys_info['CurrentTask'];\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</a></sup>';\n\t\t\t\t}\n\t\t\t\t$main .= '<br />';\n\t\t\t}\n\n\t\t\t$main .= '</div>';\n\t\t}\n\t\t$main .= '</div>';\n\t\t$main .= '</div>';\n\n\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\t//echo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in());\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2015 - 2016, Phoronix Media\n\tCopyright (C) 2015 - 2016, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_maintenance_table implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'System Maintenance Table';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\techo phoromatic_webui_header_logged_in();\n\n\t\t$main = '<h1>Systems</h1>';\n\t\t$main .= '<p>Various system interaction vitals for the Phoronix Test Suite systems associated with this account.</p>';\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, Hardware, Software, ClientVersion, LastIP, NetworkMAC, LastCommunication, CurrentTask, CoreVersion, NetworkWakeOnLAN, BlockPowerOffs FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 ORDER BY LastCommunication DESC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\n\t\twhile($row = $result->fetchArray())\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT UploadTime FROM phoromatic_results WHERE AccountID = :account_id AND SystemID = :system_id ORDER BY UploadTime DESC LIMIT 1');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $row['SystemID']);\n\t\t\t$latest_result = $stmt->execute();\n\t\t\t$latest_result = $latest_result->fetchArray();\n\t\t\t$latest_result = $latest_result['UploadTime'];\n\n\t\t\t$components[$row['SystemID']]['Last Communication'] = date('H:i d F', strtotime($row['LastCommunication']));\n\t\t\t$components[$row['SystemID']]['Current Task'] = $row['CurrentTask'];\n\t\t\t$components[$row['SystemID']]['Last IP'] = $row['LastIP'];\n\t\t\t$components[$row['SystemID']]['Phoronix Test Suite'] = $row['ClientVersion'] . ' [' . $row['CoreVersion'] . ']';\n\t\t\t$components[$row['SystemID']]['MAC'] = $row['NetworkMAC'];\n\t\t\t$components[$row['SystemID']]['Wake-On-LAN'] = (empty($row['NetworkWakeOnLAN']) ? 'N/A' : $row['NetworkWakeOnLAN']) . ' - ' . ($row['BlockPowerOffs'] == 1 ? 'Blocked' : 'Permitted');\n\t\t\t$components[$row['SystemID']]['Latest Result Upload'] = $latest_result != null ? date('d F', strtotime($latest_result)) : 'N/A';\n\t\t\t$system_ids[$row['SystemID']] = $row['Title'];\n\t\t}\n\n\t\t$main .= '<div style=\"margin: 10px auto; overflow: auto;\"><table width=\"100%\">';\n\t\t$component_types = array('Last Communication', 'Current Task', 'Phoronix Test Suite', 'Last IP', 'MAC', 'Wake-On-LAN', 'Latest Result Upload');\n\t\t$main .= '<tr><th>&nbsp;</th>';\n\t\tforeach($component_types as $type)\n\t\t{\n\t\t\t$main .= '<th>' . $type . '</th>';\n\t\t}\n\t\tforeach($components as $system_id => $component_array)\n\t\t{\n\t\t\t$main .= '<tr>';\n\t\t\t$main .= '<th><a href=\"/?systems/' . $system_id . '\">' . $system_ids[$system_id] . '</a></th>';\n\t\t\tforeach($component_types as $type)\n\t\t\t{\n\t\t\t\t$c = (isset($component_array[$type]) ? $component_array[$type] : 'N/A');\n\t\t\t\tif(($x = stripos($c, ' @ ')) !== false)\n\t\t\t\t{\n\t\t\t\t\t$c = substr($c, 0, $x);\n\t\t\t\t}\n\t\t\t\tif(($x = stripos($c, ' (')) !== false)\n\t\t\t\t{\n\t\t\t\t\t$c = substr($c, 0, $x);\n\t\t\t\t}\n\n\t\t\t\t$main .= '<td>' . $c . '</td>';\n\t\t\t}\n\t\t\t$main .= '</tr>';\n\t\t}\n\t\t$main .= '</table></div>';\n\n\t\t$right = null;\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in($right));\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2015, Phoronix Media\n\tCopyright (C) 2015, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_password implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Password Management';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\tif(isset($_POST['register_password']) && isset($_POST['register_password_confirm']) && isset($_POST['old_password']))\n\t\t{\n\t\t\t$matching_user = phoromatic_server::$db->querySingle('SELECT Password FROM phoromatic_users WHERE UserName = \\'' . $_SESSION['UserName'] . '\\' AND AccountID = \\'' . $_SESSION['AccountID'] . '\\'', true);\n\n\t\t\tif(!empty($matching_user))\n\t\t\t{\n\t\t\t\t$hashed_password = $matching_user['Password'];\n\t\t\t\t$account_salt = phoromatic_server::$db->querySingle('SELECT Salt FROM phoromatic_accounts WHERE AccountID = \\'' . $_SESSION['AccountID'] . '\\'');\n\n\t\t\t\tif($account_salt != null && hash('sha256', $account_salt . $_POST['old_password']) == $hashed_password)\n\t\t\t\t{\n\t\t\t\t\tif(strlen($_POST['register_password']) < 6)\n\t\t\t\t\t{\n\t\t\t\t\t\tphoromatic_error_page('Oops!', 'Please go back and ensure the supplied password is at least six characters long.');\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif($_POST['register_password'] != $_POST['register_password_confirm'])\n\t\t\t\t\t{\n\t\t\t\t\t\tphoromatic_error_page('Oops!', 'Please go back and ensure the supplied password matches the password confirmation.');\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t$new_salted_password = hash('sha256', $account_salt . $_POST['register_password']);\n\t\t\t\t\tphoromatic_server::$db->exec('UPDATE phoromatic_users SET Password = \\'' . $new_salted_password . '\\' WHERE UserName = \"' . $_SESSION['UserName'] . '\"');\n\t\t\t\t\techo '<h1>Password Updated!</h1>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tphoromatic_error_page('Oops!', 'The original password does not match the records for this account.');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tphoromatic_error_page('Oops!', 'Problem fetching user information. Try again.');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\t$main = '<h1>Change Password</h1>\n\t\t<form name=\"reset_password\" id=\"reset_password\" action=\"?password\" method=\"post\" onsubmit=\"return phoromatic_password_reset(this);\">\n\t\t<div style=\"clear: both;\">\n\t\t\t<div style=\"float: left; font-weight: bold; padding-right: 10px;\">\n\t\t\t<p style=\"height: 50px;\">Password</p>\n\t\t\t<p style=\"height: 50px;\">New Password</p>\n\t\t\t<p style=\"height: 50px;\">Confirm New Password</p>\n\t\t\t</div>\n\n\t\t\t<div style=\"float: left;\">\n\t\t\t<p style=\"height: 50px;\"><input type=\"password\" name=\"old_password\" /></p>\n\t\t\t<p style=\"height: 50px;\"><input type=\"password\" name=\"register_password\" /> <sup>1</sup></p>\n\t\t\t<p style=\"height: 50px;\"><input type=\"password\" name=\"register_password_confirm\" /></p>\n\t\t\t<p style=\"height: 50px;\"><input type=\"submit\" value=\"Change Password\" /></p>\n\t\t\t</div>\n\t\t</div>\n\t\t<p style=\"clear: both;\"><sup>1</sup> Passwords shall be at least six characters long.</p>';\n\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in());\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2022, Phoronix Media\n\tCopyright (C) 2014 - 2022, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_r_add_test_build_suite_details implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn '';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\tphoromatic_quit_if_invalid_input_found(array('tp'));\n\t\t$test_profile = new pts_test_profile($_GET['tp']);\n\t\t$name = $test_profile->get_title();\n\t\t$description = $test_profile->get_description();\n\n\t\t$tid = 't_' . rand(1, 20000);\n\t\techo '<div id=\"' . $tid . '\">';\n\t\techo '<p align=\"right\"><a onclick=\"javascript:phoromatic_remove_from_suite_list(\\'' . $tid  . '\\');\">Remove Test</a></p>';\n\t\techo '<h2>' . $name . ' [' . $test_profile->get_identifier() . '] </h2>';\n\t\techo '<p><em>' . $description . '</em></p>';\n\t\tif(!empty($supported_os = $test_profile->get_supported_platforms()))\n\t\t{\n\t\t\techo '<p>This test is supported on <strong>' . implode(', ', $supported_os) . '</strong>.</p>';\n\t\t}\n\t\techo '<p>More information on this test can be found via <a href=\"?tests/' . $test_profile->get_identifier() . '\">the test profile page</a> or <a target=\"_blank\" href=\"http://openbenchmarking.org/test/' . $test_profile->get_identifier() . '\">OpenBenchmarking.org</a>.</p>';\n\n\t\t$test_options = $test_profile->get_test_option_objects();\n\n\t\techo '<input type=\"hidden\" name=\"test_add[]\" value=\"' . $test_profile->get_identifier() . '\" />';\n\t\t$test_prefix = \"test_option_\" . str_replace('.', '-', microtime(true)) . \"_\";\n\t\techo '<input type=\"hidden\" name=\"test_prefix[]\" value=\"' . $test_prefix . '\" />';\n\n\t\tif(count($test_options) == 0)\n\t\t{\n\t\t\techo '<p><strong>No configurable user options for this test.</strong></p>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor($i = 0; $i < count($test_options); $i++)\n\t\t\t{\n\t\t\t\t$o = $test_options[$i];\n\t\t\t\t$option_count = $o->option_count();\n\n\t\t\t\techo '<p id=\"' . $test_prefix . $o->get_identifier() . '_name\">' . $o->get_name() . '</p>';\n\n\t\t\t\tif($option_count == 0)\n\t\t\t\t{\n\t\t\t\t\techo '<p><input type=\"text\" name=\"' . $test_prefix . $o->get_identifier() . '\" id=\"' . $test_prefix . $o->get_identifier() . '\" /></p>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\techo '<p><select name=\"' . $test_prefix . $o->get_identifier() . '\" id=\"' . $test_prefix . $o->get_identifier() . '\" onChange=\"phoromatic_test_select_update_selected_name(this);\" onload=\"phoromatic_test_select_update_selected_name(this);\">';\n\n\t\t\t\t\t$opts = array();\n\t\t\t\t\t$selected_index = 0;\n\t\t\t\t\tfor($j = 0; $j < $option_count; $j++)\n\t\t\t\t\t{\n\t\t\t\t\t\t$v = $o->format_option_value_from_input($o->get_option_value($j));\n\t\t\t\t\t\t$selected = isset($_GET['tpa']) && strpos($_GET['tpa'], $o->get_option_name($j)) !== false;\n\t\t\t\t\t\tif($selected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$selected_index = $j;\n\t\t\t\t\t\t}\n\t\t\t\t\t\techo '<option value=\"' . $v . '\" ' . ($selected ? 'selected=\"selected\"' : null) . '>' . $o->get_option_name($j) . '</option>';\n\t\t\t\t\t\t$opts[] = $o->get_name() . ': ' . $o->get_option_name($j) . '::' . $v;\n\t\t\t\t\t}\n\t\t\t\t\tif($j > 1)\n\t\t\t\t\t{\n\t\t\t\t\t\techo '<option value=\"' . implode('||', $opts) . '\">Test All Options</option>';\n\t\t\t\t\t}\n\n\t\t\t\t\techo '</select></p>';\n\t\t\t\t\techo '<input name=\"' . $test_prefix . $o->get_identifier() . '_selected\" id=\"' . $test_prefix . $o->get_identifier() . '_selected\" type=\"hidden\" value=\"' . $o->get_name() . ': ' . $o->get_option_name($selected_index) . '\" />';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\techo '<hr />';\n\t\techo '</div>';\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2021, Phoronix Media\n\tCopyright (C) 2021, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_r_basic_suite_details implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn '';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$ts = $_GET['ts'];\n\t\t$ts_file = phoromatic_server::find_suite_file($_SESSION['AccountID'], $ts);\n\t\t$test_suite = new pts_test_suite($ts_file);\n\t\t$name = $test_suite->get_title();\n\t\t$description = $test_suite->get_description();\n\n\t\techo '<h2>' . $name . '</h2>';\n\t\techo '<p><em>' . $description . '</em></p>';\n\t\t$test_suite->sort_contained_tests();\n\t\tforeach($test_suite->get_contained_test_result_objects() as $tro)\n\t\t{\n\t\t\techo '<p><strong>' . $tro->test_profile->get_title() . ' [' . $tro->test_profile->get_identifier() . ']</strong><br />';\n\t\t\techo $tro->get_arguments_description() . '</p>' . PHP_EOL;\n\t\t}\n\t\tif(stripos($_SERVER['HTTP_REFERER'], '?schedules') !== false)\n\t\t{\n\t\t\techo '<input type=\"hidden\" name=\"suite_add\" value=\"' . $ts . '\" />';\n\t\t\techo '<br /><br /><p><input name=\"submit\" value=\"Add\" type=\"submit\" onclick=\"\" /></p>';\n\t\t}\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2022, Phoronix Media\n\tCopyright (C) 2008 - 2022, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_result implements pts_webui_interface\n{\n\tprotected static $schedule_id = false;\n\n\tpublic static function page_title()\n\t{\n\t\treturn 'Result';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$main = null;\n\t\tif(isset($PATH[0]))\n\t\t{\n\t\t\t$upload_ids = explode(',', $PATH[0]);\n\n\t\t\tforeach($upload_ids as $i => &$upload_id)\n\t\t\t{\n\t\t\t\tif(($x = strpos($upload_id, '&')) !== false)\n\t\t\t\t{\n\t\t\t\t\t$upload_id = substr($upload_id, 0, $x);\n\t\t\t\t}\n\t\t\t\tif(isset($upload_id[5]) && substr($upload_id, 0, 2) == 'S:')\n\t\t\t\t{\n\t\t\t\t\t$t = explode(':', $upload_id);\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT UploadID, UploadTime FROM phoromatic_results WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY UploadTime DESC');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt->bindValue(':schedule_id', $t[1]);\n\t\t\t\t\t$test_result_result = $stmt->execute();\n\t\t\t\t\t$cutoff_time = is_numeric($t[2]) ? strtotime('today -' . $t[2] . ' days') : false;\n\t\t\t\t\twhile($test_result_row = $test_result_result->fetchArray())\n\t\t\t\t\t{\n\t\t\t\t\t\tif($cutoff_time !== false && strtotime($test_result_row['UploadTime']) < $cutoff_time)\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t$upload_ids[] = $test_result_row['UploadID'];\n\t\t\t\t\t}\n\n\t\t\t\t\tunset($upload_ids[$i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$upload_ids = array_unique($upload_ids);\n\n\t\t\t$result_files = array();\n\t\t\t$display_rows = array();\n\t\t\t$system_types = array();\n\t\t\t$schedule_types = array();\n\t\t\t$trigger_types = array();\n\t\t\t$benchmark_tickets = array();\n\t\t\t$tickets = array();\n\t\t\t$showed_progress_msg = false;\n\n\t\t\tforeach($upload_ids as $id)\n\t\t\t{\n\t\t\t\t$result_share_opt = phoromatic_server::read_setting('force_result_sharing') ? '1 = 1' : 'AccountID = (SELECT AccountID FROM phoromatic_account_settings WHERE LetOtherGroupsViewResults = \"1\" AND AccountID = phoromatic_results.AccountID)';\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_results WHERE PPRID = :pprid AND (AccountID = :account_id OR ' . $result_share_opt . ') LIMIT 1');\n\t\t\t\t$stmt->bindValue(':pprid', $id);\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\tif(empty($row))\n\t\t\t\t\tcontinue;\n\n\t\t\t\t$composite_xml = phoromatic_server::phoromatic_account_result_path($row['AccountID'], $row['UploadID']) . 'composite.xml';\n\t\t\t\tif(!is_file($composite_xml))\n\t\t\t\t{\n\t\t\t\t\techo 'File Not Found: ' . $composite_xml;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t$has_system_logs = is_file(phoromatic_server::phoromatic_account_result_path($_SESSION['AccountID'], $row['UploadID']) . 'system-logs.zip') ? $row['UploadID'] : false;\n\t\t\t\t$display_rows[$composite_xml] = $row;\n\t\t\t\tpts_arrays::unique_push($benchmark_tickets, $row['BenchmarkTicketID']);\n\t\t\t\tpts_arrays::unique_push($system_types, $row['SystemID']);\n\t\t\t\tpts_arrays::unique_push($schedule_types, $row['ScheduleID']);\n\t\t\t\tpts_arrays::unique_push($trigger_types, $row['Trigger']);\n\t\t\t\tpts_arrays::unique_push($tickets, $row['BenchmarkTicketID']);\n\n\t\t\t\tif($row['InProgress'] > 0 && !$showed_progress_msg)\n\t\t\t\t{\n\t\t\t\t\t$showed_progress_msg = true;\n\t\t\t\t\t$main .= '<p align=\"center\"><strong style=\"color: red;\">The result file being shown is still undergoing testing, results being shown for completed results.</strong></p>';\n\t\t\t\t}\n\n\t\t\t\t// Update view counter\n\t\t\t\t$stmt_view = phoromatic_server::$db->prepare('UPDATE phoromatic_results SET TimesViewed = (TimesViewed + 1) WHERE AccountID = :account_id AND UploadID = :upload_id');\n\t\t\t\t$stmt_view->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt_view->bindValue(':upload_id', $row['UploadID']);\n\t\t\t\t$stmt_view->execute();\n\t\t\t}\n\n\t\t\t$result_file_title = null;\n\t\t\tif(count($system_types) == 1)\n\t\t\t{\n\t\t\t\t$result_file_title = phoromatic_server::system_id_to_name($system_types[0]) . ' Tests';\n\t\t\t}\n\n\t\t\tif(!empty($tickets) && $tickets[0] != null)\n\t\t\t{\n\t\t\t\t$system_name_format = 'ORIGINAL_DATA';\n\t\t\t}\n\t\t\telse if(count($trigger_types) == 1 && $trigger_types[0] != null && $benchmark_tickets[0] != null && count($display_rows) > 1)\n\t\t\t{\n\t\t\t\t$system_name_format = 'TRIGGER_AND_SYSTEM';\n\t\t\t}\n\t\t\telse if(empty($schedule_types[0]))\n\t\t\t{\n\t\t\t\t$system_name_format = 'ORIGINAL_DATA';\n\t\t\t}\n\t\t\telse if(count($display_rows) == 1)\n\t\t\t{\n\t\t\t\t$system_name_format = 'SYSTEM_NAME';\n\t\t\t}\n\t\t\telse if(count($schedule_types) == 1 && count($system_types) == 1)\n\t\t\t{\n\t\t\t\t$system_name_format = 'TRIGGER';\n\t\t\t\t$result_file_title = phoromatic_schedule_id_to_name($schedule_types[0]);\n\t\t\t}\n\t\t\telse if(count($schedule_types) == 1)\n\t\t\t{\n\t\t\t\t$system_name_format = 'TRIGGER_AND_SYSTEM';\n\t\t\t}\n\t\t\telse if(false && count($trigger_types) == 1)\n\t\t\t{\n\t\t\t\t// TODO XXX: this approach yields garbage strings generally without refining the selector\n\t\t\t\t// i.e. first make sure all the schedules match or are comparable\n\t\t\t\t$system_name_format = 'SYSTEM_AND_SCHEDULE';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$system_name_format = null;\n\t\t\t}\n\n\t\t\tif(count($schedule_types) == 1 && $schedule_types[0] != 0)\n\t\t\t{\n\t\t\t\tself::$schedule_id = $schedule_types[0];\n\t\t\t}\n\n\t\t\tif(count($display_rows) == 1)\n\t\t\t{\n\t\t\t\t// Rather than going through the merge logic and all that, when just one result file, present as is\n\t\t\t\t$result_file = new pts_result_file(array_pop(array_keys($display_rows)), true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tforeach($display_rows as $composite_xml => $row)\n\t\t\t\t{\n\t\t\t\t\tswitch($system_name_format)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase 'ORIGINAL_DATA':\n\t\t\t\t\t\t\t$system_name = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'SYSTEM_NAME':\n\t\t\t\t\t\t\t$system_name = phoromatic_server::system_id_to_name($row['SystemID']);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'TRIGGER':\n\t\t\t\t\t\t\t$system_name = $row['Trigger'];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'TRIGGER_AND_SYSTEM':\n\t\t\t\t\t\t\t$system_name = phoromatic_server::system_id_to_name($row['SystemID']) . ': ' . $row['Trigger'];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'SYSTEM_AND_SCHEDULE':\n\t\t\t\t\t\t\t$system_name = phoromatic_schedule_id_to_name($row['ScheduleID']) . ': ' . $row['Trigger'];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$system_name = phoromatic_server::system_id_to_name($row['SystemID']) . ' - ' . phoromatic_schedule_id_to_name($row['ScheduleID']) . ' - ' . $row['Trigger'];\n\t\t\t\t\t}\n\n\t\t\t\t\tif($system_name == null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$rf = new pts_result_file($composite_xml);\n\t\t\t\t\t\t$identifiers = $rf->get_system_identifiers();\n\t\t\t\t\t\tif(count($identifiers) == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$system_name = $identifiers[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(($replacement = phoromatic_server::system_id_to_name($row['SystemID'])) != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$system_name = str_replace('.SYSTEM', $replacement, $system_name);\n\t\t\t\t\t}\n\t\t\t\t\tif(($replacement = phoromatic_server::account_id_to_group_name($row['AccountID'])) != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$system_name = str_replace('.GROUP', $replacement, $system_name);\n\t\t\t\t\t}\n\t\t\t\t\t$system_variables = explode(';', phoromatic_server::system_id_variables($row['SystemID'], $row['AccountID']));\n\t\t\t\t\tforeach($system_variables as $var)\n\t\t\t\t\t{\n\t\t\t\t\t\t$var = explode('=', $var);\n\t\t\t\t\t\tif(count($var) == 2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$system_name = str_replace('.' . $var[0], $var[1], $system_name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$rf = new pts_result_file($composite_xml);\n\t\t\t\t\t$rf->rename_run(null, $system_name);\n\t\t\t\t\t$result_files[] = $rf;\n\t\t\t\t}\n\n\t\t\t\t$result_file = new pts_result_file(null, true);\n\t\t\t\tif(!empty($result_files))\n\t\t\t\t{\n\t\t\t\t\t$attributes = array('new_result_file_title' => $result_file_title);\n\t\t\t\t\tif(!empty($result_files))\n\t\t\t\t\t{\n\t\t\t\t\t\t$result_file->merge($result_files, $attributes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$embed = new pts_result_viewer_embed($result_file);\n\t\t\t$embed->allow_modifying_results(!PHOROMATIC_USER_IS_VIEWER);\n\t\t\t$embed->allow_deleting_results(!PHOROMATIC_USER_IS_VIEWER);\n\t\t\t$embed->show_html_result_table(false);\n\t\t\t$embed->show_test_metadata_helper(false);\n\t\t\t$embed->include_page_print_only_helpers(false);\n\t\t\t$main .= $embed->get_html();\n\t\t}\n\n\t\t$right = null;\n\t\tif(self::$schedule_id && !empty(self::$schedule_id))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_schedules WHERE AccountID = :account_id AND ScheduleID = :schedule_id LIMIT 1');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':schedule_id', self::$schedule_id);\n\t\t\t$result = $stmt->execute();\n\t\t\t$row = $result->fetchArray();\n\n\t\t\tif(!empty($row))\n\t\t\t{\n\t\t\t\t$right .= '<h3><a href=\"?schedules/' . $row['ScheduleID'] . '\">' . $row['Title'] . '</a></h3>';\n\n\t\t\t\tif(!empty($row['ActiveOn']))\n\t\t\t\t{\n\n\t\t\t\t\t$right .= '<p align=\"center\"><strong>' . phoromatic_schedule_activeon_string($row['ActiveOn'], $row['RunAt']) . '</strong></p>';\n\t\t\t\t}\n\n\t\t\t\t$right .= '<p>Compare this result file to the latest results from the past: ';\n\t\t\t\t$right .= '<select name=\"view_results_from_past\" id=\"view_results_from_past\" onchange=\"phoromatic_jump_to_results_from(\\'' . $row['ScheduleID'] . '\\', \\'view_results_from_past\\', \\'' . $PATH[0] . ',\\');\">';\n\t\t\t\t$oldest_upload_time = strtotime(phoromatic_oldest_result_for_schedule(self::$schedule_id));\n\t\t\t\t$opts = array(\n\t\t\t\t\t'Week' => 7,\n\t\t\t\t\t'Three Weeks' => 21,\n\t\t\t\t\t'Month' => 30,\n\t\t\t\t\t'Quarter' => 90,\n\t\t\t\t\t'Six Months' => 180,\n\t\t\t\t\t'Year' => 365,\n\t\t\t\t\t);\n\t\t\t\tforeach($opts as $str_name => $time_offset)\n\t\t\t\t{\n\t\t\t\t\tif($oldest_upload_time > (time() - (86400 * $time_offset)))\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t$right .= '<option value=\"' . $time_offset . '\">' . $str_name . '</option>';\n\t\t\t\t}\n\t\t\t\t$right .= '<option value=\"all\">All Results</option>';\n\t\t\t\t$right .= '</select>';\n\t\t\t\t$right .= '</p>';\n\t\t\t}\n\t\t}\n\t\tif(true)\n\t\t{\n\t\t\t$compare_results = array();\n\t\t\t$hash_matches = 0;\n\t\t\t$ticket_matches = 0;\n\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_results WHERE AccountID = :account_id AND ComparisonHash = :comparison_hash AND PPRID NOT IN (:pprid) ORDER BY UploadTime DESC LIMIT 12');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':comparison_hash', $result_file->get_contained_tests_hash(false));\n\t\t\t$stmt->bindValue(':pprid', implode(',', $upload_ids));\n\t\t\t$result = $stmt->execute();\n\t\t\twhile($row = $result->fetchArray())\n\t\t\t{\n\t\t\t\t$compare_results[$row['PPRID']] = $row;\n\t\t\t\t$hash_matches++;\n\t\t\t}\n\n\t\t\tforeach($benchmark_tickets as $ticket_id)\n\t\t\t{\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_results WHERE AccountID = :account_id AND BenchmarkTicketID = :ticket_id AND PPRID NOT IN (:pprid) ORDER BY UploadTime DESC LIMIT 12');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':ticket_id', $ticket_id);\n\t\t\t\t$stmt->bindValue(':pprid', implode(',', $upload_ids));\n\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\twhile($row = $result->fetchArray())\n\t\t\t\t{\n\t\t\t\t\t$compare_results[$row['PPRID']] = $row;\n\t\t\t\t\t$ticket_matches++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!empty($compare_results))\n\t\t\t{\n\t\t\t\t$right .= '<hr /><h3>Compare Results</h3><form name=\"compare_similar_results\" onsubmit=\"return false;\">\n\t\t\t\t\t\t<input type=\"hidden\" value=\"' . implode(',', $upload_ids) . '\" id=\"compare_similar_results_this\" />';\n\n\t\t\t\tforeach($compare_results as &$row)\n\t\t\t\t{\n\t\t\t\t\t$right .= '<p><input type=\"checkbox\" value=\"' . $row['PPRID'] . '\" name=\"compare_results\" /> ' . $row['Title'] . '<br /><em>' . phoromatic_server::system_id_to_name($row['SystemID'], $row['AccountID']) . '</em></p>';\n\t\t\t\t}\n\n\t\t\t\t$right .= '<p><input type=\"submit\" value=\"Compare Results\" id=\"compare_results_submit\" onclick=\"javascript:phoromatic_do_custom_compare_results(this); return false;\" /></p></form>';\n\n\t\t\t\tif($ticket_matches > 3)\n\t\t\t\t{\n\t\t\t\t\t$right .= '<p><a href=\"/results/ticket/' . $ticket_id . '\">Find All Matching Results</a>';\n\t\t\t\t}\n\t\t\t\telse if($hash_matches > 3)\n\t\t\t\t{\n\t\t\t\t\t$right .= '<p><a href=\"/results/hash/' . $result_file->get_contained_tests_hash(false) . '\">Find All Matching Results</a>';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(self::$schedule_id && !empty(self::$schedule_id) && $system_types[0] && $trigger_types[0])\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT UserContextStep FROM phoromatic_system_context_logs WHERE AccountID = :account_id AND ScheduleID = :schedule_id AND SystemID = :system_id AND TriggerID = :trigger_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $system_types[0]);\n\t\t\t$stmt->bindValue(':schedule_id', self::$schedule_id);\n\t\t\t$stmt->bindValue(':trigger_id', $trigger_types[0]);\n\t\t\t$result = $stmt->execute();\n\t\t\tif($row = $result->fetchArray())\n\t\t\t{\n\t\t\t\t$right .= '<hr /><h3>User Context Logs</h3>';\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\t$right .= '<p><a href=\"?logs/context/' . $system_types[0] . ',' . self::$schedule_id . ',' . base64_encode($trigger_types[0]) . '\">' . $row['UserContextStep'] . '</a></p>';\n\t\t\t\t}\n\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t}\n\t\t}\n\n\t\t$right .= '<hr /><h3>Result Export</h3>';\n\t\t$right .= '<p><a href=\"/public.php?t=result&ut='  . implode(',', $upload_ids) . '\">Public Viewer</a></p>';\n\n\t\tif($has_system_logs)\n\t\t{\n\t\t//\t\t$right .= '<hr /><p><a href=\"?logs/system/' . $has_system_logs . '\">View System Logs</a></p>';\n\t\t}\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in($right));\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2022, Phoronix Media\n\tCopyright (C) 2008 - 2022, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_results implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Test Schedules';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\techo phoromatic_webui_header_logged_in();\n\t\t$main = null;\n\n\t\tif(!PHOROMATIC_USER_IS_VIEWER && isset($PATH[0]) && $PATH[0] == 'delete')\n\t\t{\n\t\t\t$pprids = explode(',', $PATH[1]);\n\n\t\t\tforeach($pprids as $pprid)\n\t\t\t{\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_results WHERE AccountID = :account_id AND PPRID = :pprid LIMIT 1');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':pprid', $pprid);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\tif($result && ($row = $result->fetchArray()))\n\t\t\t\t{\n\t\t\t\t\t$composite_xml = phoromatic_server::phoromatic_account_result_path($_SESSION['AccountID'], $row['UploadID']) . 'composite.xml';\n\t\t\t\t\tif(is_file($composite_xml))\n\t\t\t\t\t{\n\t\t\t\t\t\tunlink($composite_xml);\n\t\t\t\t\t}\n\n\t\t\t\t\tpts_file_io::delete(phoromatic_server::phoromatic_account_result_path($_SESSION['AccountID'], $row['UploadID']), null, true);\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_results_results WHERE AccountID = :account_id AND UploadID = :upload_id');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt->bindValue(':upload_id', $row['UploadID']);\n\t\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_results_systems WHERE AccountID = :account_id AND UploadID = :upload_id');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt->bindValue(':upload_id', $row['UploadID']);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t}\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_results WHERE AccountID = :account_id AND PPRID = :pprid');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':pprid', $pprid);\n\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\t// TODO XXX fix below\n\t\t\t\t//$upload_dir = phoromatic_server::phoromatic_account_result_path($_SESSION['AccountID'], $upload_id);\n\t\t\t\t//pts_file_io::delete($upload_dir);\n\t\t\t}\n\t\t}\n\n\t\tif($main == null)\n\t\t{\n\t\t\tphoromatic_quit_if_invalid_input_found(array('result_limit', 'containing_tests', 'time_end', 'time_start', 'search', 'containing_hardware', 'containing_software'));\n\t\t\tif(isset($_POST['result_limit']))\n\t\t\t{\n\t\t\t\tif(is_numeric($_POST['result_limit']) && $_POST['result_limit'] > 9)\n\t\t\t\t{\n\t\t\t\t\t$result_limit = $_POST['result_limit'];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$result_limit = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$result_limit = 100;\n\t\t\t}\n\t\t\t$min_date = strtotime(phoromatic_server::account_created_on($_SESSION['AccountID']));\n\t\t\t$default_start_date = max($min_date, strtotime('-1 year'));\n\t\t\t$min_date = date('Y-m-d', $min_date);\n\t\t\t$time_start = strtotime(isset($_POST['time_start']) && !empty($_POST['time_start']) ? $_POST['time_start'] : $min_date);\n\t\t\tif(empty($time_start))\n\t\t\t{\n\t\t\t\t$time_start = strtotime($min_date);\n\t\t\t}\n\t\t\t$time_end = strtotime((isset($_POST['time_end']) && !empty($_POST['time_end']) ? $_POST['time_end'] : date('Y-m-d')) . ' 23:59:59');\n\t\t\tif(empty($time_end))\n\t\t\t{\n\t\t\t\t$time_end = strtotime(date('Y-m-d') . ' 23:59:59');\n\t\t\t}\n\t\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" method=\"post\"><div style=\"text-align: left; font-weight: bold;\">Results From <input id=\"time_start\" name=\"time_start\" type=\"date\" required pattern=\"[0-9]{4}-[0-9]{2}-[0-9]{2}\" min=\"' . $min_date . '\" value=\"' . (isset($_POST['time_start']) ? $_POST['time_start'] : date('Y-m-d', $default_start_date)) . '\" max=\"' . date('Y-m-d') . '\" /> To  <input id=\"time_end\" name=\"time_end\" type=\"date\" required pattern=\"[0-9]{4}-[0-9]{2}-[0-9]{2}\" min=\"' . $min_date . '\" value=\"' . (isset($_POST['time_end']) ? $_POST['time_end'] : date('Y-m-d')) . '\" max=\"' . date('Y-m-d') . '\" /> &nbsp; With Tests: <input type=\"text\" name=\"containing_tests\" id=\"containing_tests\" value=\"' . (isset($_POST['containing_tests']) ? $_POST['containing_tests'] : null) . '\" /> With Hardware: <input type=\"text\" name=\"containing_hardware\" id=\"containing_hardware\" value=\"' . (isset($_POST['containing_hardware']) ? $_POST['containing_hardware'] : null) . '\" /> With System Software: <input type=\"text\" name=\"containing_software\" id=\"containing_software\" value=\"' . (isset($_POST['containing_software']) ? $_POST['containing_software'] : null) . '\" /> Search For <input type=\"text\" name=\"search\" id=\"search_for\" value=\"' . (isset($_POST['search']) ? $_POST['search'] : null) . '\" /> Limit Results To <select id=\"result_limit\" name=\"result_limit\">';\n\t\t\tfor($i = 100; $i <= 500; $i += 100)\n\t\t\t{\n\t\t\t\t$main .= '<option value=\"' . $i . '\"' . ($result_limit == $i ? ' selected=\"selected\"' : null) . '>' . $i . '</option>';\n\t\t\t}\n\t\t\t$main .= '<option value=\"\"' . (isset($_POST['result_limit']) && empty($result_limit) ? ' selected=\"selected\"' : null) . '>No Limit</option>';\n\t\t\t$main .= '</select> &nbsp; <input type=\"button\" value=\"Reset\" onclick=\"phoromatic_clear_results_search_fields();\" />';\n\t\t\t$main .= ' &nbsp; <input type=\"submit\" value=\"Update\" /></div></form>';\n\t\t\t$main .= '<p style=\"font-size: 90%;\">** <em>AND</em>, <em>OR</em>, and <em>NOT</em> search operators supported for tests/hardware/software search fields. **</p>';\n\t\t\t$main .= '<h1>Account Test Results</h1>';\n\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">';\n\t\t\t$search_for = (!isset($_POST['search']) || empty($_POST['search']) ? null : 'AND (Title LIKE :search OR Description LIKE :search OR UploadID IN (SELECT UploadID FROM phoromatic_results_systems WHERE AccountID = :account_id AND (Software LIKE :search OR Hardware LIKE :search)))');\n\t\t\tif(isset($_POST['containing_hardware']) && !empty($_POST['containing_hardware']))\n\t\t\t{\n\t\t\t\t$hw_advanced_query = stripos($_POST['containing_hardware'], ' AND ') !== false || stripos($_POST['containing_hardware'], ' OR ') !== false || stripos($_POST['containing_hardware'], ' NOT ') !== false;\n\t\t\t\tif($hw_advanced_query || true)\n\t\t\t\t{\n\t\t\t\t\t$hw_advanced_query = pts_phoroql::search_query_to_tree($_POST['containing_hardware']);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$search_for .= ' AND UploadID IN (SELECT UploadID FROM phoromatic_results_systems WHERE AccountID = :account_id AND Hardware LIKE :containing_hardware)';\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(isset($_POST['containing_software']) && !empty($_POST['containing_software']))\n\t\t\t{\n\t\t\t\t$sw_advanced_query = strpos($_POST['containing_software'], ' AND ') !== false || strpos($_POST['containing_software'], ' OR ') !== false || strpos($_POST['containing_software'], ' NOT ') !== false;\n\t\t\t\tif($sw_advanced_query || true)\n\t\t\t\t{\n\t\t\t\t\t$sw_advanced_query = pts_phoroql::search_query_to_tree($_POST['containing_software']);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$search_for .= ' AND UploadID IN (SELECT UploadID FROM phoromatic_results_systems WHERE AccountID = :account_id AND Software LIKE :containing_software)';\n\t\t\t\t}\n\t\t\t}\n\t\t\t$main .= '<div style=\"margin: 0 5%;\"><ul style=\"max-height: 100%;\"><li><h1>Recent Test Results</h1></li>';\n\n\t\t\tif(isset($PATH[1]) && $PATH[0] == 'hash')\n\t\t\t{\n\t\t\t\t// Find matching comparison hashes\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime, TimesViewed, AccountID, UploadID FROM phoromatic_results WHERE AccountID = :account_id ' . $search_for. ' AND ComparisonHash = :comparison_hash ORDER BY UploadTime DESC');\n\t\t\t\t$stmt->bindValue(':comparison_hash', $PATH[1]);\n\t\t\t}\n\t\t\telse if(isset($PATH[1]) && $PATH[0] == 'ticket')\n\t\t\t{\n\t\t\t\t// Find matching ticket results\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime, TimesViewed, AccountID, UploadID FROM phoromatic_results WHERE AccountID = :account_id ' . $search_for. ' AND BenchmarkTicketID = :ticket_id ORDER BY UploadTime DESC');\n\t\t\t\t$stmt->bindValue(':ticket_id', $PATH[1]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime, TimesViewed, AccountID, UploadID FROM phoromatic_results WHERE AccountID = :account_id ' . $search_for. ' ORDER BY UploadTime DESC');\n\t\t\t}\n\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':search', (isset($_POST['search']) ? '%' . $_POST['search'] . '%' : null));\n\t\t\t$stmt->bindValue(':containing_hardware', (isset($_POST['containing_hardware']) ? '%' . $_POST['containing_hardware'] . '%' : null));\n\t\t\t$stmt->bindValue(':containing_software', (isset($_POST['containing_software']) ? '%' . $_POST['containing_software'] . '%' : null));\n\t\t\t$test_result_result = $stmt->execute();\n\t\t\t$results = 0;\n\t\t\t$containing_tests = isset($_POST['containing_tests']) ? $_POST['containing_tests'] : null;\n\t\t\tif(!empty($containing_tests))\n\t\t\t{\n\t\t\t\t$containing_tests = pts_phoroql::search_query_to_tree($containing_tests);\n\t\t\t}\n\n\t\t\twhile($test_result_row = $test_result_result->fetchArray())\n\t\t\t{\n\t\t\t\tif(strtotime($test_result_row['UploadTime']) > $time_end)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(strtotime($test_result_row['UploadTime']) < $time_start)\n\t\t\t\t{\n\t\t\t\t\t//break;\n\t\t\t\t}\n\t\t\t\tif(!empty($result_limit) && $result_limit > 1 && $result_limit == $results)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$composite_xml = phoromatic_server::phoromatic_account_result_path($test_result_row['AccountID'], $test_result_row['UploadID']) . 'composite.xml';\n\t\t\t\t$result_file = new pts_result_file($composite_xml);\n\n\t\t\t\tif(isset($_POST['containing_hardware']) && !empty($_POST['containing_hardware']) && $hw_advanced_query)\n\t\t\t\t{\n\t\t\t\t\t//if(!$result_file->contains_system_hardware($_POST['containing_hardware']))\n\t\t\t\t\tif(!pts_phoroql::evaluate_search_tree($hw_advanced_query, 'AND', array($result_file, 'contains_system_hardware')))\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(isset($_POST['containing_software']) && !empty($_POST['containing_software']) && $sw_advanced_query)\n\t\t\t\t{\n\t\t\t\t\tif(!pts_phoroql::evaluate_search_tree($sw_advanced_query, 'AND', array($result_file, 'contains_system_software')))\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!empty($containing_tests))\n\t\t\t\t{\n\t\t\t\t\tif(!pts_phoroql::evaluate_search_tree($containing_tests, 'AND', array($result_file, 'contains_test')))\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$main .= '<a onclick=\"\"><li id=\"result_select_' . $test_result_row['PPRID'] . '\"><input type=\"checkbox\" id=\"result_compare_checkbox_' . $test_result_row['PPRID'] . '\" onclick=\"javascript:phoromatic_checkbox_toggle_result_comparison(\\'' . $test_result_row['PPRID'] . '\\');\" onchange=\"return false;\"></input> <span onclick=\"javascript:phoromatic_window_redirect(\\'?result/' . $test_result_row['PPRID'] . '\\');\">' . $test_result_row['Title'] . '</span><br /><table><tr><td>' . phoromatic_server::system_id_to_name($test_result_row['SystemID']) . '</td><td>' . phoromatic_user_friendly_timedate($test_result_row['UploadTime']) .  '</td><td>' . $test_result_row['TimesViewed'] . ' Times Viewed</td></table></li></a>';\n\t\t\t\t$results++;\n\t\t\t}\n\t\t\tif($results == 0)\n\t\t\t{\n\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Results Found</li>';\n\t\t\t}\n\t\t\telse if($results > 3)\n\t\t\t{\n\t\t\t\t$main .= '<a onclick=\"\"><li id=\"global_bottom_totals\"><input type=\"checkbox\" id=\"global_checkbox\" onclick=\"javascript:phoromatic_toggle_checkboxes_on_page(this);\" onchange=\"return false;\"></input> <strong>' . $results . ' Results</strong></li></a>';\n\t\t\t}\n\t\t\t$main .= '</ul></div>';\n\t\t\t$main .= '</div>';\n\n\t\t\t$result_share_opt = phoromatic_server::read_setting('force_result_sharing') ? '1 = 1' : 'AccountID IN (SELECT AccountID FROM phoromatic_account_settings WHERE LetOtherGroupsViewResults = \"1\")';\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime, TimesViewed, AccountID, UploadID FROM phoromatic_results WHERE ' . $result_share_opt . ' AND AccountID != :account_id ' . $search_for. ' ORDER BY UploadTime DESC');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':search', (isset($_POST['search']) ? '%' . $_POST['search'] . '%' : null));\n\t\t\t$stmt->bindValue(':containing_hardware', (isset($_POST['containing_hardware']) ? '%' . $_POST['containing_hardware'] . '%' : null));\n\t\t\t$stmt->bindValue(':containing_software', (isset($_POST['containing_software']) ? '%' . $_POST['containing_software'] . '%' : null));\n\t\t\t$test_result_result = $stmt->execute();\n\t\t\tif(!empty($test_result_result) && ($test_result_row = $test_result_result->fetchArray()))\n\t\t\t{\n\t\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">';\n\t\t\t\t$main .= '<ul style=\"max-height: 100%;\"><li><h1>Results Shared By Other Groups</h1></li>';\n\t\t\t\t$results = 0;\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\tif(strtotime($test_result_row['UploadTime']) > $time_end)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(strtotime($test_result_row['UploadTime']) < $time_start)\n\t\t\t\t\t{\n\t\t\t\t\t\t//break;\n\t\t\t\t\t}\n\t\t\t\t\tif(!empty($result_limit) && $result_limit > 1 && $result_limit == $results)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t$composite_xml = phoromatic_server::phoromatic_account_result_path($test_result_row['AccountID'], $test_result_row['UploadID']) . 'composite.xml';\n\t\t\t\t\t$result_file = new pts_result_file($composite_xml);\n\n\t\t\t\t\tif(isset($_POST['containing_hardware']) && !empty($_POST['containing_hardware']) && $hw_advanced_query)\n\t\t\t\t\t{\n\t\t\t\t\t\t//if(!$result_file->contains_system_hardware($_POST['containing_hardware']))\n\t\t\t\t\t\tif(!pts_phoroql::evaluate_search_tree($hw_advanced_query, 'AND', array($result_file, 'contains_system_hardware')))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(isset($_POST['containing_software']) && !empty($_POST['containing_software']) && $sw_advanced_query)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!pts_phoroql::evaluate_search_tree($sw_advanced_query, 'AND', array($result_file, 'contains_system_software')))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(!empty($containing_tests))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!pts_phoroql::evaluate_search_tree($containing_tests, 'AND', array($result_file, 'contains_test')))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$main .= '<a onclick=\"\"><li id=\"result_select_' . $test_result_row['PPRID'] . '\"><input type=\"checkbox\" id=\"result_compare_checkbox_' . $test_result_row['PPRID'] . '\" onclick=\"javascript:phoromatic_checkbox_toggle_result_comparison(\\'' . $test_result_row['PPRID'] . '\\');\" onchange=\"return false;\"></input> <span onclick=\"javascript:phoromatic_window_redirect(\\'?result/' . $test_result_row['PPRID'] . '\\');\">' . $test_result_row['Title'] . '</span><br /><table><tr><td><strong>' . phoromatic_server::account_id_to_group_name($test_result_row['AccountID']) . '</strong></td><td>' . phoromatic_server::system_id_to_name($test_result_row['SystemID'], $test_result_row['AccountID']) . '</td><td>' . phoromatic_user_friendly_timedate($test_result_row['UploadTime']) .  '</td><td>' . $test_result_row['TimesViewed'] . ' Times Viewed</td></table></li></a>';\n\t\t\t\t\t$results++;\n\t\t\t\t}\n\t\t\t\twhile($test_result_row = $test_result_result->fetchArray());\n\t\t\t\t$main .= '</ul></div>';\n\t\t\t}\n\t\t}\n\n\t\techo phoromatic_webui_main($main);\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2022, Phoronix Media\n\tCopyright (C) 2014 - 2022, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_sched implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Test Scheduling';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\tif(PHOROMATIC_USER_IS_VIEWER)\n\t\t\treturn;\n\n\t\t$is_new = true;\n\t\t$env_var_edit = array();\n\t\tif(!empty($PATH[0]) && is_numeric($PATH[0]))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_schedules WHERE AccountID = :account_id AND ScheduleID = :schedule_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t$result = $stmt->execute();\n\t\t\t$e_schedule = $result->fetchArray();\n\n\t\t\tif(!empty($e_schedule))\n\t\t\t{\n\t\t\t\t$is_new = false;\n\t\t\t}\n\t\t\tif(!empty($e_schedule['EnvironmentVariables']))\n\t\t\t{\n\t\t\t\t$env_var_edit = pts_strings::parse_value_string_vars($e_schedule['EnvironmentVariables']);\n\t\t\t}\n\t\t}\n\n\t\tif(isset($_POST['schedule_title']) && !empty($_POST['schedule_title']))\n\t\t{\n\t\t\t$title = phoromatic_get_posted_var('schedule_title');\n\t\t\t$description = phoromatic_get_posted_var('schedule_description');\n\t\t\t$pre_install_set_context = phoromatic_get_posted_var('pre_install_set_context');\n\t\t\t$post_install_set_context = phoromatic_get_posted_var('post_install_set_context');\n\t\t\t$pre_run_set_context = phoromatic_get_posted_var('pre_run_set_context');\n\t\t\t$post_run_set_context = phoromatic_get_posted_var('post_run_set_context');\n\n\t\t\t$system_all = phoromatic_get_posted_var('system_all');\n\t\t\t$run_target_systems = phoromatic_get_posted_var('run_on_systems', array());\n\t\t\t$run_target_groups = phoromatic_get_posted_var('run_on_groups', array());\n\t\t\tif(!is_array($run_target_systems)) $run_target_systems = array();\n\t\t\tif(!is_array($run_target_groups)) $run_target_groups = array();\n\t\t\t$run_target_systems = implode(',', $run_target_systems);\n\t\t\t$run_target_groups = implode(',', $run_target_groups);\n\t\t\t$run_priority = phoromatic_get_posted_var('run_priority');\n\t\t\t$run_priority = is_numeric($run_priority) && $run_priority >= 0 ? $run_priority : 100;\n\n\t\t\t$schedule_hour = phoromatic_get_posted_var('schedule_hour');\n\t\t\t$schedule_minute = phoromatic_get_posted_var('schedule_minute');\n\t\t\t$days_active = phoromatic_get_posted_var('days_active');\n\n\t\t\t$context_files = array('SetContextPreInstall' => 'pre_install_set_context', 'SetContextPostInstall' => 'post_install_set_context', 'SetContextPreRun' => 'pre_run_set_context', 'SetContextPostRun' => 'post_run_set_context');\n\t\t\tforeach($context_files as $i => $context)\n\t\t\t\t$$context = $is_new ? null : $e_schedule[$i];\n\t\t\tforeach($context_files as $context)\n\t\t\t{\n\t\t\t\t$$context = null;\n\n\t\t\t\tif($_FILES[$context]['error'] == 0 && $_FILES[$context]['size'] > 0)\n\t\t\t\t{\n\t\t\t\t\t$sha1_hash = sha1_file($_FILES[$context]['tmp_name']);\n\n\t\t\t\t\tif(!is_file(phoromatic_server::phoromatic_account_path($_SESSION['AccountID']) . 'context_' . $sha1_hash))\n\t\t\t\t\t{\n\t\t\t\t\t\tmove_uploaded_file($_FILES[$context]['tmp_name'], phoromatic_server::phoromatic_account_path($_SESSION['AccountID']) . 'context_' . $sha1_hash);\n\t\t\t\t\t}\n\n\t\t\t\t\t$$context = $sha1_hash;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// TODO XXX: Validation of input\n\n\t\t\t// Need a unique schedule ID\n\t\t\tif($is_new)\n\t\t\t{\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\t$schedule_id = rand(10, 9999);\n\t\t\t\t\t$matching_schedules = phoromatic_server::$db->querySingle('SELECT ScheduleID FROM phoromatic_schedules WHERE AccountID = \\'' . $_SESSION['AccountID'] . '\\' AND ScheduleID = \\'' . $schedule_id . '\\'');\n\t\t\t\t}\n\t\t\t\twhile(!empty($matching_schedules));\n\n\t\t\t\t// Need a unique public ID\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\t$public_key = pts_strings::random_characters(12, true);;\n\t\t\t\t\t$matching_schedules = phoromatic_server::$db->querySingle('SELECT ScheduleID FROM phoromatic_schedules WHERE AccountID = \\'' . $_SESSION['AccountID'] . '\\' AND PublicKey = \\'' . $public_key . '\\'');\n\t\t\t\t}\n\t\t\t\twhile(!empty($matching_schedules));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$schedule_id = $e_schedule['ScheduleID'];\n\t\t\t\t$public_key = $e_schedule['PublicKey'];\n\t\t\t}\n\n\t\t\t$env_vars = array();\n\n\t\t\tforeach(pts_env::get_posted_options('phoromatic') as $ei => $ev)\n\t\t\t{\n\t\t\t\tarray_push($env_vars, $ei . '=' . $ev);\n\t\t\t}\n\t\t\t$env_vars = implode(';', $env_vars);\n\n\t\t\t// Add schedule\n\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT OR REPLACE INTO phoromatic_schedules (AccountID, ScheduleID, Title, Description, State, ActiveOn, RunAt, SetContextPreInstall, SetContextPostInstall, SetContextPreRun, SetContextPostRun, LastModifiedBy, LastModifiedOn, PublicKey, RunTargetGroups, RunTargetSystems, RunPriority, EnvironmentVariables) VALUES (:account_id, :schedule_id, :title, :description, :state, :active_on, :run_at, :context_pre_install, :context_post_install, :context_pre_run, :context_post_run, :modified_by, :modified_on, :public_key, :run_target_groups, :run_target_systems, :run_priority, :environment_variables)');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':schedule_id', $schedule_id);\n\t\t\t$stmt->bindValue(':title', $title);\n\t\t\t$stmt->bindValue(':description', $description);\n\t\t\t$stmt->bindValue(':state', 1);\n\t\t\t$stmt->bindValue(':active_on', (is_array($days_active) ? implode(',', $days_active) : $days_active));\n\t\t\t$stmt->bindValue(':run_at', $schedule_hour . '.' . $schedule_minute);\n\t\t\t$stmt->bindValue(':context_pre_install', $pre_install_set_context);\n\t\t\t$stmt->bindValue(':context_post_install', $post_install_set_context);\n\t\t\t$stmt->bindValue(':context_pre_run', $pre_run_set_context);\n\t\t\t$stmt->bindValue(':context_post_run', $post_run_set_context);\n\t\t\t$stmt->bindValue(':modified_by', $_SESSION['UserName']);\n\t\t\t$stmt->bindValue(':modified_on', phoromatic_server::current_time());\n\t\t\t$stmt->bindValue(':public_key', $public_key);\n\t\t\t$stmt->bindValue(':run_target_groups', $run_target_groups);\n\t\t\t$stmt->bindValue(':run_target_systems', $run_target_systems);\n\t\t\t$stmt->bindValue(':run_priority', $run_priority);\n\t\t\t$stmt->bindValue(':environment_variables', $env_vars);\n\t\t\t$result = $stmt->execute();\n\t\t\tphoromatic_add_activity_stream_event('schedule', $schedule_id, ($is_new ? 'added' : 'modified'));\n\n\t\t\tif($result)\n\t\t\t{\n\t\t\t\theader('Location: ?schedules/' . $schedule_id);\n\t\t\t}\n\t\t}\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\t$main = '<h2>' . ($is_new ? 'Create' : 'Edit') . ' A Schedule</h2>\n\t\t<p>A test schedule is used to facilitate automatically running a set of test(s) or suite(s) on either a routine timed basis or whenever triggered by an external script or process, e.g. Git/VCS commit, manually triggered, etc.</p>';\n\n\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"add_test\" id=\"add_test\" method=\"post\" enctype=\"multipart/form-data\" onsubmit=\"return validate_schedule();\">\n\t\t<h3>Title:<span style=\"color:red;\">*</span></h3>\n\t\t<p><input type=\"text\" name=\"schedule_title\" value=\"' . (!$is_new ? $e_schedule['Title'] : null) . '\" /></p>\n\t\t<h3>Pre-Install Set Context Script: <span style=\"font-size:12px;\">(optional)</span></h3>\n\t\t<p><input type=\"file\" name=\"pre_install_set_context\" /></p>\n\t\t<h3>Post-Install Set Context Script: <span style=\"font-size:12px;\">(optional)</span></h3>\n\t\t<p><input type=\"file\" name=\"post_install_set_context\" /></p>\n\t\t<h3>Pre-Run Set Context Script: <span style=\"font-size:12px;\">(optional)</span></h3>\n\t\t<p><input type=\"file\" name=\"pre_run_set_context\" /></p>\n\t\t<h3>Post-Run Set Context Script: <span style=\"font-size:12px;\">(optional)</span></h3>\n\t\t<p><input type=\"file\" name=\"post_run_set_context\" /></p>\n\t\t<h3>System Targets:</h3>\n\t\t<p>';\n\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 ORDER BY Title ASC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\n\n\t\tif(!$is_new)\n\t\t{\n\t\t\t$e_schedule['RunTargetSystems'] = explode(',', $e_schedule['RunTargetSystems']);\n\t\t\t$e_schedule['RunTargetGroups'] = explode(',', $e_schedule['RunTargetGroups']);\n\t\t}\n\n\t\tif($row = $result->fetchArray())\n\t\t{\n\t\t\t$main .= '<h4>Systems: ';\n\t\t\tdo\n\t\t\t{\n\t\t\t\t$main .= '<input type=\"checkbox\" name=\"run_on_systems[]\" value=\"' . $row['SystemID'] . '\" ' . (!$is_new && in_array($row['SystemID'], $e_schedule['RunTargetSystems']) ? 'checked=\"checked\" ' : null) . '/> ' . $row['Title'] . ' ';\n\t\t\t}\n\t\t\twhile($row = $result->fetchArray());\n\t\t\t$main .= '</h4>';\n\t\t}\n\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT GroupName FROM phoromatic_groups WHERE AccountID = :account_id ORDER BY GroupName ASC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\n\t\tif($row = $result->fetchArray())\n\t\t{\n\t\t\t$main .= '<h4>Groups: ';\n\t\t\tdo\n\t\t\t{\n\t\t\t\t$main .= '<input type=\"checkbox\" name=\"run_on_groups[]\" value=\"' . $row['GroupName'] . '\" ' . (!$is_new && in_array($row['GroupName'], $e_schedule['RunTargetGroups']) ? 'checked=\"checked\" ' : null) . '/> ' . $row['GroupName'] . ' ';\n\t\t\t}\n\t\t\twhile($row = $result->fetchArray());\n\t\t\t$main .= '</h4>';\n\t\t}\n\n\t\t$main .= '</p>\n\t\t<h3>Description:<span style=\"color:red;\">*</span></h3>\n\t\t<p><textarea name=\"schedule_description\" id=\"schedule_description\" cols=\"50\" rows=\"3\">' . (!$is_new ? $e_schedule['Description'] : null) . '</textarea></p>\n\t\t<h3>Run Priority:</h3>\n\t\t<p>The run priority is used for determining which tests to execute first should there be multiple test schedules set to run on a given system at the same time. Additionally, test schedules of low-priority will not attempt to power-on a system if needed for running the test, thus delaying it\\'s execution until the next time the system is otherwise online.</p>\n\t\t<p><select name=\"run_priority\" id=\"run_priority\">';\n\t\t$prios = array(1 => 'Low Priority', 100 => 'Default Priority', 200 => 'High Priority');\n\t\tforeach($prios as $lvl => $lvl_str)\n\t\t{\n\t\t\t$main .= '<option value=\"' . $lvl . '\"' . (((!$is_new && ($e_schedule['RunPriority'] == $lvl)) || $lvl == 100) ? 'selected=\"selected\" ' : null) . '>' . $lvl_str . '</option>';\n\t\t}\n\t\t$main .='</select></p><table class=\"pts_phoromatic_schedule_type\">\n<tr>\n  <td><h3>Time-Based Testing</h3><em>Time-based testing allows tests to automatically commence at a given time on a defined cycle each day/week. This option is primarly aimed for those wishing to run a set of benchmarks every morning or night or at another defined period.</em></td>\n  <td><h3>Run Time:</h3>\n\t\t<p><select name=\"schedule_hour\" id=\"schedule_hour\">';\n\n\t\tif(!$is_new)\n\t\t{\n\t\t\t$run_at = explode('.', $e_schedule['RunAt']);\n\t\t\t$days_active = !empty($e_schedule['ActiveOn']) ? explode(',', $e_schedule['ActiveOn']) : array();\n\t\t}\n\n\t\tfor($i = 0; $i <= 23; $i++)\n\t\t{\n\t\t\t$i_f = (strlen($i) == 1 ? '0' . $i : $i);\n\t\t\t$main .= '<option value=\"' . $i_f . '\"' . (!$is_new && $run_at[0] == $i ? 'selected=\"selected\" ' : null) . '>' . $i_f . '</option>';\n\t\t}\n\n\t\t$main .= '</select> <select name=\"schedule_minute\" id=\"schedule_minute\">';\n\n\t\tfor($i = 0; $i < 60; $i += 10)\n\t\t{\n\t\t\t$i_f = (strlen($i) == 1 ? '0' . $i : $i);\n\t\t\t$main .= '<option value=\"' . $i_f . '\"' . (!$is_new && $run_at[1] == $i ? 'selected=\"selected\" ' : null) . '>' . $i_f . '</option>';\n\t\t}\n\n\t\t$main .= '</select><h3>Active On:</h3><p>';\n\t\t$week = array('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday');\n\t\tforeach($week as $index => $day)\n\t\t{\n\t\t\t$main .= '<input type=\"checkbox\" name=\"days_active[]\" value=\"' . $index . '\"' . (!$is_new && in_array($index, $days_active) ? 'checked=\"checked\" ' : null) . '/> ' . $day;\n\t\t}\n\n\t\t$main .= '</p></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t  <td><h3>Trigger-Based Testing</h3><em>To carry out trigger-based testing, you can simply have an external process/script trigger (&quot;ping&quot;) a specialized URL whenever an event occurs to commence a new round of testing. This is the most customizable approach to having Phoromatic run tests on a system if you wish to have it occur whenever a Git/SVN commit takes place or other operations.</em></td>\n\t\t\t  <td><h3>Once creating the test schedule there will be a specialized URL you can use for &quot;pinging&quot; where you can pass it a Git commit hash, SVN revision number, date, or other unique identifiers to externally trigger the test schedules and systems to begin testing. This custom trigger is passed to any of the used context scripts for setting up the system in an appropriate state.</h3></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t  <td><h3>One-Time / Manual Testing</h3><em>Carrying out Phoromatic-controlled benchmark on no routine schedule, similar to the trigger-based testing.</em></td>\n\t\t\t  <td><h3>If you wish to only run a set of tests once on a given system or to do so seldom with the same set of tests, simply proceed with creating the test schedule without setting any run time / active days. When going to the web page for this test schedule there will be a button to trigger the tests to run on all affected systems. One-time benchmarking can also be setup via the <a href=\"?benchmark\">Run A Benchmark</a> page.</h3></td>\n\t\t\t</tr>\n\t\t\t</table>';\n\n\t\t$main .= (empty($env_var_edit) ? '<p><a id=\"env_var_options_show\" onclick=\"javascript:document.getElementById(\\'env_var_options\\').style.display = \\'block\\'; javascript:document.getElementById(\\'env_var_options_show\\').style.display = \\'none\\'; \">Advanced Options</a></p> <div id=\"env_var_options\" style=\"display: none;\">' : '<div id=\"env_var_options\">') . '<p>The advanced options require the Phoromatic clients be on the latest Phoronix Test Suite (10.8 or newer / Git). See the Phoronix Test Suite documentation for more information on these environment variables / advanced options.</p>' . pts_env::get_html_options('phoromatic', $env_var_edit) . '</div>';\n\n\t\t$main .= '<p align=\"right\"><input name=\"submit\" value=\"' . ($is_new ? 'Create' : 'Edit') . ' Schedule\" type=\"submit\" onclick=\"return pts_rmm_validate_schedule();\" /></p>\n\t\t\t</form>';\n\t\techo phoromatic_webui_main($main);\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2022, Phoronix Media\n\tCopyright (C) 2008 - 2022, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_schedules implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Test Schedules';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$main = null;\n\t\techo phoromatic_webui_header_logged_in();\n\n\t\tif(!empty($PATH[0]) && is_numeric($PATH[0]))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_schedules WHERE AccountID = :account_id AND ScheduleID = :schedule_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t$result = $stmt->execute();\n\t\t\t$row = $result->fetchArray();\n\n\t\t\tif(empty($row))\n\t\t\t{\n\t\t\t\t$main = '<h1>Test Schedules</h1>';\n\t\t\t\t$main .= '<h3>No Resource Found</h3>';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t\t{\n\n\t\t\t\t\tif(isset($_POST['add_to_schedule_select_test']))\n\t\t\t\t\t{\n\t\t\t\t\t\tphoromatic_quit_if_invalid_input_found(array('add_to_schedule_select_test'));\n\t\t\t\t\t\t$name = $_POST['add_to_schedule_select_test'];\n\t\t\t\t\t\t$args = array();\n\t\t\t\t\t\t$args_name = array();\n\n\t\t\t\t\t\tforeach($_POST as $i => $v)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(substr($i, 0, 12) == 'test_option_' && substr($i, -9) != '_selected')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tphoromatic_quit_if_invalid_input_found(array($i, $i . '_selected'));\n\t\t\t\t\t\t\t\tarray_push($args, $v);\n\t\t\t\t\t\t\t\tarray_push($args_name, $_POST[$i . '_selected']);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$args_name = implode(' - ', $args_name);\n\t\t\t\t\t\t$args = implode(' ', $args);\n\n\t\t\t\t\t\tif(!empty($name))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_schedules_tests (AccountID, ScheduleID, TestProfile, TestArguments, TestDescription) VALUES (:account_id, :schedule_id, :test_profile, :test_arguments, :test_description)');\n\t\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t\t\t\t$stmt->bindValue(':test_profile', $name);\n\t\t\t\t\t\t\t$stmt->bindValue(':test_arguments', $args);\n\t\t\t\t\t\t\t$stmt->bindValue(':test_description', $args_name);\n\t\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t\t\tphoromatic_add_activity_stream_event('tests_for_schedule', $PATH[0], 'added');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(isset($_POST['suite_add']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$test_suite = phoromatic_server::find_suite_file($_SESSION['AccountID'], $_POST['suite_add']);\n\t\t\t\t\t\tif(is_file($test_suite))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$test_suite = new pts_test_suite($test_suite);\n\t\t\t\t\t\t\tforeach($test_suite->get_contained_test_result_objects() as $tro)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_schedules_tests (AccountID, ScheduleID, TestProfile, TestArguments, TestDescription) VALUES (:account_id, :schedule_id, :test_profile, :test_arguments, :test_description)');\n\t\t\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t\t\t\t\t$stmt->bindValue(':test_profile', $tro->test_profile->get_identifier());\n\t\t\t\t\t\t\t\t$stmt->bindValue(':test_arguments', $tro->get_arguments());\n\t\t\t\t\t\t\t\t$stmt->bindValue(':test_description', $tro->get_arguments_description());\n\t\t\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t\t\t\tphoromatic_add_activity_stream_event('tests_for_schedule', $PATH[0], 'added');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if(isset($PATH[1]) && $PATH[1] == 'remove' && !empty($PATH[2]))\n\t\t\t\t\t{\n\t\t\t\t\t\t// REMOVE TEST\n\t\t\t\t\t\t$to_remove = explode(PHP_EOL, base64_decode($PATH[2]));\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_schedules_tests WHERE AccountID = :account_id AND ScheduleID = :schedule_id AND TestProfile = :test AND TestArguments = :test_args');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t\t\t$stmt->bindValue(':test', $to_remove[0]);\n\t\t\t\t\t\t$stmt->bindValue(':test_args', $to_remove[1]);\n\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t\tphoromatic_add_activity_stream_event('tests_for_schedule', $to_remove[0] . ' - ' . $to_remove[1], 'removed');\n\t\t\t\t\t}\n\t\t\t\t\telse if(isset($PATH[1]) && $PATH[1] == 'delete-trigger' && !empty($PATH[2]))\n\t\t\t\t\t{\n\t\t\t\t\t\t// REMOVE TRIGGER\n\t\t\t\t\t\t$trigger = base64_decode($PATH[2]);\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_schedules_triggers WHERE AccountID = :account_id AND Trigger = :trigger AND ScheduleID = :schedule_id');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t\t\t$stmt->bindValue(':trigger', $trigger);\n\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t\tif($result)\n\t\t\t\t\t\t\t$main .= '<h2 style=\"color: red;\">Trigger Removed: ' . $trigger . '</h2>';\n\t\t\t\t\t}\n\t\t\t\t\telse if(isset($PATH[1]) && in_array($PATH[1], array('activate', 'deactivate')))\n\t\t\t\t\t{\n\t\t\t\t\t\tswitch($PATH[1])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'deactivate':\n\t\t\t\t\t\t\t\t$new_state = 0;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'activate':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t$new_state = 1;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// REMOVE TEST\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_schedules SET State = :new_state WHERE AccountID = :account_id AND ScheduleID = :schedule_id');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t\t\t$stmt->bindValue(':new_state', $new_state);\n\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t\t$row['State'] = $new_state;\n\t\t\t\t\t\tphoromatic_add_activity_stream_event('schedule', $PATH[0], $PATH[1]);\n\t\t\t\t\t}\n\t\t\t\t\telse if(isset($_POST['do_manual_test_run']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_schedules_triggers (AccountID, ScheduleID, Trigger, TriggeredOn) VALUES (:account_id, :schedule_id, :trigger, :triggered_on)');\n\t\t\t\t\t\t$stmt->bindValue(':account_id',\t$_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t\t\t$stmt->bindValue(':trigger', $_SESSION['UserName'] . ' - Manual Test Run - ' . date('H:i j M Y'));\n\t\t\t\t\t\t$stmt->bindValue(':triggered_on', phoromatic_server::current_time());\n\t\t\t\t\t\t$stmt->execute();\n\t\t\t\t\t\t$main .= '<h2 style=\"color: red;\">Manual Test Run Triggered</h2>';\n\t\t\t\t\t}\n\t\t\t\t\telse if(isset($_POST['skip_current_ticket']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_schedules_trigger_skips (AccountID, ScheduleID, Trigger) VALUES (:account_id, :schedule_id, :trigger)');\n\t\t\t\t\t\t$stmt->bindValue(':account_id',\t$_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t\t\t$stmt->bindValue(':trigger', date('Y-m-d'));\n\t\t\t\t\t\t$stmt->execute();\n\t\t\t\t\t\t$main .= '<h2 style=\"color: red;\">Current Trigger To Be Ignored</h2>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$main .= '<h1>' . $row['Title'] . '</h1>';\n\t\t\t\t$main .= '<h3>' . $row['Description'] . '</h3>';\n\t\t\t\tswitch($row['RunPriority'])\n\t\t\t\t{\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\t$prio = 'Low Priority';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 100:\n\t\t\t\t\t\t$prio = 'Default Priority';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 200:\n\t\t\t\t\t\t$prio = 'High Priority';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$prio = $row['RunPriority'] . ' Priority';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$main .= '<p>Priority: ' . $prio . '</p><p>This schedule was last modified on <strong>' . date('j F Y \\a\\t H:i', strtotime($row['LastModifiedOn'])) . '</strong> by <strong>' . $row['LastModifiedBy'] . '</strong>.';\n\n\t\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<p><a href=\"?sched/' . $PATH[0] . '\">Edit Schedule</a> | ';\n\n\t\t\t\t\tif($row['State'] == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<a href=\"?schedules/' . $PATH[0] . '/deactivate\">Deactivate Schedule</a>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<a href=\"?schedules/' . $PATH[0] . '/activate\">Activate Schedule</a>';\n\t\t\t\t\t}\n\n\t\t\t\t\t$main .= '</p>';\n\t\t\t\t}\n\n\t\t\t\t$main .= '<hr />';\n\t\t\t\t$main .= '<h2>Schedule</h2>';\n\t\t\t\tif(!empty($row['ActiveOn']))\n\t\t\t\t{\n\t\t\t\t\t$active_days = explode(',', $row['ActiveOn']);\n\t\t\t\t\t$week = array('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday');\n\t\t\t\t\tforeach($active_days as $i => &$day)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!isset($week[$day]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tunset($active_days[$i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$day = $week[$day];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch(count($active_days))\n\t\t\t\t\t{\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t$day_show = implode(' and ', $active_days);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$day_show = implode(', ', $active_days);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t$main .= '<p>This test is scheduled to run every <strong>' . $day_show . '</strong> at <strong>' . str_replace('.', ':', $row['RunAt']) . '</strong>.</p>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$main .= '<p>This test schedule is not currently set to run a pre-defined time-based schedule.</p>';\n\t\t\t\t}\n\t\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t\t{\n\t\t\t\t\t$trigger_url = 'http://' . phoromatic_web_socket_server_ip() . '/event.php?type=trigger&user=' . $_SESSION['UserName'] . '&public_key=' . $row['PublicKey'] . '&trigger=XXX';\n\t\t\t\t\t$main .= '<p>This test schedule can be manually triggered to run at any time by calling <strong>' . $trigger_url . '</strong> where <em>XXX</em> is the trigger value to be used (if relevant, such as a time-stamp, Git/SVN commit number or hash, etc). There\\'s also the option of sub-targeting system(s) part of this schedule. One option is appending <em>&sub_target_this_ip</em> if this URL is being called from one of the client test systems to only sub-target the triggered testing on that client, among other options.</p>';\n\t\t\t\t\t$main .= '<p>If you wish to run this test schedule now, click the following button and the schedule will be run on all intended systems at their next earliest possible convenience.</p>';\n\t\t\t\t\t$main .= '<p><form action=\"?schedules/' . $PATH[0] . '\" name=\"manual_run\" method=\"post\">';\n\t\t\t\t\t$main .= '<input type=\"hidden\" name=\"do_manual_test_run\" value=\"1\" /><input type=\"submit\" value=\"Run Test Schedule Now\" onclick=\"return confirm(\\'Run this test schedule now?\\');\" />';\n\t\t\t\t\t$main .= '</form></p>';\n\t\t\t\t\t$main .= '<p><form action=\"?schedules/' . $PATH[0] . '\" name=\"skip_run\" method=\"post\">';\n\t\t\t\t\t$main .= '<input type=\"hidden\" name=\"skip_current_ticket\" value=\"1\" /><input type=\"submit\" value=\"Skip Current Test Ticket\" onclick=\"return confirm(\\'Skip any currently active test ticket on all systems?\\');\" />';\n\t\t\t\t\t$main .= '</form></p>';\n\t\t\t\t}\n\n\t\t\t\t$main .= '<hr />';\n\n\t\t\t\t$contexts = array('SetContextPreInstall' => 'Pre-Install', 'SetContextPostInstall' => 'Post-Install', 'SetContextPreRun' => 'Pre-Test-Run', 'SetContextPostRun' => 'Post-Test-Run');\n\t\t\t\t$scripts = 0;\n\t\t\t\tforeach($contexts as $context => $v)\n\t\t\t\t{\n\t\t\t\t\tif(isset($row[$context]) && !empty($row[$context]) && is_file(phoromatic_server::phoromatic_account_path($_SESSION['AccountID']) . 'context_' . $row[$context]))\n\t\t\t\t\t{\n\t\t\t\t\t\t$scripts++;\n\t\t\t\t\t\t$main .= '<h2>' . $v . ' Context Script</h2>';\n\t\t\t\t\t\t$main .= '<blockquote>' . str_replace(PHP_EOL, '<br />', htmlentities(file_get_contents(phoromatic_server::phoromatic_account_path($_SESSION['AccountID']) . 'context_' . $row[$context]))) . '</blockquote>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(!empty($row['EnvironmentVariables']))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h1>Environment Variables</h1><ol>';\n\n\t\t\t\t\tforeach(explode(';', $row['EnvironmentVariables']) as $env)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li><strong>' . $env . '</strong></li>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</ol>';\n\t\t\t\t}\n\n\t\t\t\tif($scripts > 0)\n\t\t\t\t\t$main .= '<hr />';\n\n\t\t\t\t$main .= '<h2>Tests To Run</h2>';\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_schedules_tests WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY TestProfile ASC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t$result = $stmt->execute();\n\n\t\t\t\t$test_count = 0;\n\t\t\t\t$main .= '<p>';\n\t\t\t\twhile($row = $result->fetchArray())\n\t\t\t\t{\n\t\t\t\t\t$test_count++;\n\t\t\t\t\t$main .= $row['TestProfile'] . ($row['TestDescription'] != null ? ' - <em>' . $row['TestDescription'] . '</em>' : '') . (!PHOROMATIC_USER_IS_VIEWER ? ' <a href=\"?schedules/' . $PATH[0] . '/remove/' . base64_encode(implode(PHP_EOL, array($row['TestProfile'], $row['TestArguments']))) . '\">Remove Test</a>' : null) . '<br />';\n\n\t\t\t\t\t/*\n\t\t\t\t\tif(!PHOROMATIC_USER_IS_VIEWER && isset($_REQUEST['make_version_lock_tests']))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(strpos($row['TestProfile'], '.') == false)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$test_profile = new pts_test_profile($row['TestProfile']);\n\t\t\t\t\t\t\t$full_identifier = $test_profile->get_identifier(true);\n\n\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_schedules_tests SET TestProfile = :version_locked_tp WHERE AccountID = :account_id AND ScheduleID = :schedule_id AND TestProfile = :test');\n\t\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t\t\t\t$stmt->bindValue(':test', $row['TestProfile']);\n\t\t\t\t\t\t\t$stmt->bindValue(':version_locked_tp', $full_identifier);\n\t\t\t\t\t\t\t$result2 = $stmt->execute();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t}\n\t\t\t\t$main .= '</p>';\n\n\t\t\t\tif($test_count == 0)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<h3 style=\"text-transform: uppercase;\">No tests have been added yet for this test schedule.</h3>';\n\t\t\t\t}\n\n\t\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h2>Add A Test</h2>';\n\t\t\t\t\t$main .= '<form action=\"?schedules/' . $PATH[0] . '\" name=\"add_test\" id=\"add_test\" method=\"post\">';\n\t\t\t\t\t$main .= '<select name=\"add_to_schedule_select_test\" id=\"add_to_schedule_select_test\" onchange=\"phoromatic_schedule_test_details(\\'\\');\">';\n\t\t\t\t\t$dc = pts_client::download_cache_path();\n\t\t\t\t\t$dc_exists = is_file($dc . 'pts-download-cache.json');\n\t\t\t\t\tif($dc_exists)\n\t\t\t\t\t{\n\t\t\t\t\t\t$cache_json = file_get_contents($dc . 'pts-download-cache.json');\n\t\t\t\t\t\t$cache_json = json_decode($cache_json, true);\n\t\t\t\t\t}\n\t\t\t\t\tforeach(array_merge(pts_tests::local_tests(), pts_openbenchmarking::available_tests(false, isset($_COOKIE['list_show_all_test_versions']) && $_COOKIE['list_show_all_test_versions'])) as $test)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(phoromatic_server::read_setting('show_local_tests_only'))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$cache_checked = false;\n\t\t\t\t\t\t\tif($dc_exists)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif($cache_json && isset($cache_json['phoronix-test-suite']['cached-tests']))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(in_array($test, $cache_json['phoronix-test-suite']['cached-tests']))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$cache_checked = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!$cache_checked && pts_test_install_request::test_files_available_on_local_system($test) == false)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$main .= '<option value=\"' . $test . '\">' . $test . '</option>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</select>';\n\t\t\t\t\t$main .= pts_web_embed::cookie_checkbox_option_helper('list_show_all_test_versions', 'Show all available test profile versions.');\n\t\t\t\t\t$main .= '<p><div id=\"test_details\"></div></p>';\n\t\t\t\t\t$main .= '</form>';\n\n\t\t\t\t\t$local_suites = array();\n\t\t\t\t\tforeach(pts_file_io::glob(phoromatic_server::phoromatic_account_suite_path($_SESSION['AccountID']) . '*/suite-definition.xml') as $xml_path)\n\t\t\t\t\t{\n\t\t\t\t\t\t$id = basename(dirname($xml_path));\n\t\t\t\t\t\t$test_suite = new pts_test_suite($xml_path);\n\t\t\t\t\t\t$local_suites[$test_suite->get_title() . ' - ' . $id] = $id;\n\t\t\t\t\t}\n\t\t\t\t\t$official_suites = pts_test_suites::suites_on_disk(false, true);\n\n\t\t\t\t\t$main .= '<hr /><h2>Add A Suite:</h2>';\n\t\t\t\t\t$main .= '<form action=\"?schedules/' . $PATH[0] . '\" name=\"add_suite\" id=\"add_suite\" method=\"post\">';\n\t\t\t\t\t$main .= '<p><select name=\"suite_to_run\" id=\"suite_to_run_identifier\" onchange=\"phoromatic_show_basic_suite_details(\\'\\');\">';\n\t\t\t\t\tforeach(array_merge($local_suites, $official_suites) as $title => $id)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<option value=\"' . $id . '\">' . $title . '</option>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</select></p>';\n\t\t\t\t\t$main .= '<p><div id=\"suite_details\"></div></p>';\n\t\t\t\t\t$main .= '</form>';\n\t\t\t\t}\n\n\t\t\t\t$systems_in_schedule = phoromatic_server::systems_associated_with_schedule($_SESSION['AccountID'], $PATH[0]);\n\t\t\t\tif(!empty($systems_in_schedule))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h2>Systems In Schedule</h2>';\n\t\t\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<p>To run this schedule on more systems, <a href=\"?sched/' . $PATH[0] . '\">edit the schedule</a>.</p>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\" style=\"margin: 0 10%;\"><ul><li><h1>Systems</h1></li>';\n\n\t\t\t\t\tforeach($systems_in_schedule as $system_id)\n\t\t\t\t\t{\n\t\t\t\t\t\t$row = phoromatic_server::get_system_details($_SESSION['AccountID'], $system_id);\n\t\t\t\t\t\t$main .= '<a href=\"?systems/' . $row['SystemID'] . '\"><li>' . $row['Title'] . '<br /><table><tr><td>' . $row['LocalIP'] . '</td><td><strong>' . $row['CurrentTask'] . '</strong></td><td><strong>Last Communication:</strong> ' . date('j F Y H:i', strtotime($row['LastCommunication'])) . '</td></tr></table></li></a>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</ul></div><hr />';\n\t\t\t\t}\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Trigger, TriggeredOn FROM phoromatic_schedules_triggers WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY TriggeredOn DESC LIMIT 10');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t$test_result_result = $stmt->execute();\n\t\t\t\t$test_result_row = $test_result_result->fetchArray();\n\n\t\t\t\tif($test_result_row)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\" style=\"margin: 0 10%;\">';\n\t\t\t\t\t$main .= '<ul><li><h1>Recent Triggers For This Schedule</h1></li>';\n\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<a onclick=\"\"><li>' . $test_result_row['Trigger'] . '<br /><table><tr><td>' . phoromatic_user_friendly_timedate($test_result_row['TriggeredOn']) . '</td><td><a href=\"?schedules/' . $PATH[0] . '/delete-trigger/' . base64_encode($test_result_row['Trigger']) . '\">Remove Trigger</a></td></tr></table></li></a>';\n\n\t\t\t\t\t}\n\t\t\t\t\twhile($test_result_row = $test_result_result->fetchArray());\n\t\t\t\t\t$main .= '</ul>';\n\t\t\t\t\t$main .= '</div>';\n\t\t\t\t}\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime FROM phoromatic_results WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY UploadTime DESC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t\t$test_result_result = $stmt->execute();\n\t\t\t\t$test_result_row = $test_result_result->fetchArray();\n\n\t\t\t\tif($test_result_row)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\" style=\"margin: 0 10%;\">';\n\t\t\t\t\t$main .= '<ul><li><h1>Recent Test Results For This Schedule</h1></li>';\n\t\t\t\t\t$results = 0;\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$oldest_upload_time = $test_result_row['UploadTime'];\n\t\t\t\t\t\tif($results > 100)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$main .= '<a href=\"?result/' . $test_result_row['PPRID'] . '\"><li>' . $test_result_row['Title'] . '<br /><table><tr><td>' . phoromatic_server::system_id_to_name($test_result_row['SystemID']) . '</td><td>' . phoromatic_user_friendly_timedate($test_result_row['UploadTime']) .  '</td></tr></table></li></a>';\n\t\t\t\t\t\t$results++;\n\n\t\t\t\t\t}\n\t\t\t\t\twhile($test_result_row = $test_result_result->fetchArray());\n\t\t\t\t\t$main .= '</ul>';\n\t\t\t\t\t$main .= '</div>';\n\t\t\t\t}\n\t\t\t\t$num_results = phoromatic_results_for_schedule($PATH[0]);\n\n\t\t\t\tif($num_results > 1)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<p>Jump to the latest results from the past: ';\n\t\t\t\t\t$main .= '<select name=\"view_results_from_past\" id=\"view_results_from_past\" onchange=\"phoromatic_jump_to_results_from(\\'' . $PATH[0] . '\\', \\'view_results_from_past\\');\">';\n\t\t\t\t\t$oldest_upload_time = strtotime($oldest_upload_time);\n\t\t\t\t\t$opts = array(\n\t\t\t\t\t\t'Week' => 7,\n\t\t\t\t\t\t'Three Weeks' => 21,\n\t\t\t\t\t\t'Month' => 30,\n\t\t\t\t\t\t'Quarter' => 90,\n\t\t\t\t\t\t'Six Months' => 180,\n\t\t\t\t\t\t'Year' => 365,\n\t\t\t\t\t\t);\n\t\t\t\t\tforeach($opts as $str_name => $time_offset)\n\t\t\t\t\t{\n\t\t\t\t\t\tif($oldest_upload_time > (time() - (86400 * $time_offset)))\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t$main .= '<option value=\"' . $time_offset . '\">' . $str_name . '</option>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '<option value=\"all\">All Results</option>';\n\t\t\t\t\t$main .= '</select>';\n\t\t\t\t\t$main .= '</p><hr />';\n\t\t\t\t}\n\t\t\t\t$main .= '<p><strong>' . $num_results . ' Test Results Available For This Schedule.</strong></p>';\n\t\t\t}\n\n\t\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in());\n\t\t\techo phoromatic_webui_footer();\n\t\t\treturn;\n\t\t}\n\n\n\t\t$main = '<h1>Test Schedules</h1>\n\t\t<p>Test schedules are used for tests that are intended to be run on a recurring basis -- either daily or other defined time period -- or whenever a trigger/event occurs, like a new Git commit to a software repository being tracked. Test schedules can be run on any given system(s)/group(s) and can be later edited.</p>';\n\n\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t{\n\t\t\t$main .= '\n\t\t\t<hr />\n\t\t\t<h2>Create A Schedule</h2>\n\t\t\t<p><a href=\"?sched\">Create a schedule</a> followed by adding tests/suites to run for that schedule on the selected systems.</p>';\n\t\t}\n\n\t\t$main .= '<hr /><h2>Current Schedules</h2>';\n\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">\n\t\t\t<ul>\n\t\t\t<li><h1>Active Test Schedules</h1></li>';\n\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, ScheduleID, Description, RunTargetSystems, RunTargetGroups, RunAt, ActiveOn FROM phoromatic_schedules WHERE AccountID = :account_id AND State >= 1 ORDER BY Title ASC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\n\t\tif($row == false)\n\t\t{\n\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Schedules Found</li>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdo\n\t\t\t{\n\t\t\t\t$stmt_tests = phoromatic_server::$db->prepare('SELECT COUNT(*) AS TestCount FROM phoromatic_schedules_tests WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY TestProfile ASC');\n\t\t\t\t$stmt_tests->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt_tests->bindValue(':schedule_id', $row['ScheduleID']);\n\t\t\t\t$result_tests = $stmt_tests->execute();\n\t\t\t\t$row_tests = $result_tests->fetchArray();\n\t\t\t\t$test_count = !empty($row_tests) ? $row_tests['TestCount'] : 0;\n\n\t\t\t\t$group_count = empty($row['RunTargetGroups']) ? 0 : count(explode(',', $row['RunTargetGroups']));\n\t\t\t\t$main .= '<a href=\"?schedules/' . $row['ScheduleID'] . '\"><li>' . $row['Title'] . '<br /><table><tr><td>' . pts_strings::plural_handler(count(phoromatic_server::systems_associated_with_schedule($_SESSION['AccountID'], $row['ScheduleID'])), 'System') . '</td><td>' . pts_strings::plural_handler($group_count, 'Group') . '</td><td>' . pts_strings::plural_handler($test_count, 'Test') . '</td><td>' . pts_strings::plural_handler(phoromatic_results_for_schedule($row['ScheduleID']), 'Result') . ' Total</td><td>' . pts_strings::plural_handler(phoromatic_results_for_schedule($row['ScheduleID'], 'TODAY'), 'Result') . ' Today</td><td><strong>' . phoromatic_schedule_activeon_string($row['ActiveOn'], $row['RunAt']) . '</strong></td></tr></table></li></a>';\n\t\t\t}\n\t\t\twhile($row = $result->fetchArray());\n\t\t}\n\n\t\t$main .= '</ul>\n\t\t</div>';\n\n\t\t$main .= '<hr /><h2>Schedule Overview</h2>';\n\t\t$week = array('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday');\n\n\t\tforeach($week as $i => $day)\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, ScheduleID, RunAt, RunTargetGroups, RunTargetSystems FROM phoromatic_schedules WHERE AccountID = :account_id AND State >= 1 AND ActiveOn LIKE :active_on ORDER BY RunAt,ActiveOn,Title ASC');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':active_on', '%' . $i . '%');\n\t\t\t$result = $stmt->execute();\n\t\t\t$has_matched = false;\n\t\t\twhile($row = $result->fetchArray())\n\t\t\t{\n\t\t\t\tif(!$has_matched)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<h3>' . $day . '</h3>' . PHP_EOL . '<p>';\n\t\t\t\t\t$has_matched = true;\n\t\t\t\t}\n\t\t\t\t$main .= '<em>' . $row['RunAt'] . '</em> <a href=\"?schedules/' . $row['ScheduleID'] . '\">' . $row['Title'] . '</a>';\n\t\t\t\t//$main .= $row['RunTargetSystems'] . ' ' . $row['RunTargetGroups'];\n\t\t\t\t$main .= '<br />';\n\t\t\t}\n\n\t\t\tif($has_matched)\n\t\t\t\t$main .= '</p>' . PHP_EOL;\n\t\t}\n\n\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">\n\t\t\t\t<ul>\n\t\t\t\t<li><h1>Deactivated Test Schedules</h1></li>';\n\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, ScheduleID, Description, RunTargetSystems, RunTargetGroups, RunAt, ActiveOn FROM phoromatic_schedules WHERE AccountID = :account_id AND State < 1 ORDER BY Title ASC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\n\t\tif($row == false)\n\t\t{\n\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Schedules Found</li>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdo\n\t\t\t{\n\t\t\t\t$stmt_tests = phoromatic_server::$db->prepare('SELECT COUNT(*) AS TestCount FROM phoromatic_schedules_tests WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY TestProfile ASC');\n\t\t\t\t$stmt_tests->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt_tests->bindValue(':schedule_id', $row['ScheduleID']);\n\t\t\t\t$result_tests = $stmt_tests->execute();\n\t\t\t\t$row_tests = $result_tests->fetchArray();\n\t\t\t\t$test_count = !empty($row_tests) ? $row_tests['TestCount'] : 0;\n\t\t\t\t$group_count = empty($row['RunTargetGroups']) ? 0 : count(explode(',', $row['RunTargetGroups']));\n\t\t\t\t$main .= '<a href=\"?schedules/' . $row['ScheduleID'] . '\"><li>' . $row['Title'] . '<br /><table><tr><td>' . pts_strings::plural_handler(count(phoromatic_server::systems_associated_with_schedule($_SESSION['AccountID'], $row['ScheduleID'])), 'System') . '</td><td>' . pts_strings::plural_handler($group_count, 'Group') . '</td><td>' . pts_strings::plural_handler($test_count, 'Test') . '</td><td>' . pts_strings::plural_handler(phoromatic_results_for_schedule($row['ScheduleID']), 'Result') . ' Total</td><td>' . pts_strings::plural_handler(phoromatic_results_for_schedule($row['ScheduleID'], 'TODAY'), 'Result') . ' Today</td><td><strong>' . phoromatic_schedule_activeon_string($row['ActiveOn'], $row['RunAt']) . '</strong></td></tr></table></li></a>';\n\t\t\t}\n\t\t\twhile($row = $result->fetchArray());\n\t\t}\n\n\t\t$main .= '</ul>\n\t\t</div>';\n\n\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2022, Phoronix Media\n\tCopyright (C) 2014 - 2022, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_search implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Search';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tprotected static function search_test_profiles($q)\n\t{\n\t\t$ret = null;\n\t\tforeach(pts_search::search_local_test_profiles($q) as $test)\n\t\t{\n\t\t\t$tp = new pts_test_profile($test);\n\t\t\t$ret .= '<h3>' . $tp->get_title() . '</h3><p>' . $tp->get_description() . '<br /><a href=\"http://openbenchmarking.org/test/' . $tp->get_identifier(false) . '\">Learn More On OpenBenchmarking.org</a></p>';\n\t\t}\n\n\t\treturn $ret;\n\t}\n\tprotected static function search_local_test_suites($q)\n\t{\n\t\t$ret = null;\n\t\t$suite_dir = phoromatic_server::phoromatic_account_suite_path($_SESSION['AccountID']);\n\t\tforeach(pts_file_io::glob($suite_dir . '*/suite-definition.xml') as $xml_path)\n\t\t{\n\t\t\t$id = basename(dirname($xml_path));\n\t\t\t$test_suite = new pts_test_suite($xml_path);\n\t\t\t$match = false;\n\n\t\t\tif(stripos($test_suite->get_title(), $q) === 0 || stripos($test_suite->get_description(), $q) !== false)\n\t\t\t{\n\t\t\t\t$match = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tforeach($test_suite->get_contained_test_result_objects() as $tro)\n\t\t\t\t{\n\t\t\t\t\tif(stripos($tro->test_profile->get_identifier(), $q) !== false || stripos($tro->test_profile->get_title(), $q) === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$match = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($match)\n\t\t\t{\n\t\t\t\t$ret .= '<h3>' . $test_suite->get_title() . '</h3><p>' . $test_suite->get_description() . '<br /><a href=\"/?local_suites#' . $id . '\">More Details</a></p>';\n\t\t\t}\n\t\t}\n\n\t\treturn $ret;\n\t}\n\tprotected static function search_test_schedules($q)\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, Description, ScheduleID FROM phoromatic_schedules WHERE AccountID = :account_id AND State = 1');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$ret = null;\n\n\t\twhile($row = $result->fetchArray())\n\t\t{\n\t\t\t$match = false;\n\t\t\tif(stripos($row['Title'], $q) === 0 || stripos($row['Description'], $q) !== false)\n\t\t\t{\n\t\t\t\t$match = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$stmt2 = phoromatic_server::$db->prepare('SELECT TestProfile FROM phoromatic_schedules_tests WHERE AccountID = :account_id AND ScheduleID = :schedule_id');\n\t\t\t\t$stmt2->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt2->bindValue(':schedule_id', $row['ScheduleID']);\n\t\t\t\t$result2 = $stmt2->execute();\n\t\t\t\twhile($row2 = $result2->fetchArray())\n\t\t\t\t{\n\t\t\t\t\tif(stripos($row2['TestProfile'], $q) !== false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$match = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($match)\n\t\t\t{\n\t\t\t\t$ret .= '<h3>' . $row['Title'] . '</h3><p>' . $row['Description'] . '<br /><a href=\"/?schedules/' . $row['ScheduleID'] . '\">More Details</a></p>';\n\t\t\t}\n\t\t}\n\n\t\treturn $ret;\n\t}\n\tprotected static function search_test_results($q)\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, Description, UploadID, PPRID FROM phoromatic_results WHERE AccountID = :account_id');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$ret = null;\n\n\t\twhile($row = $result->fetchArray())\n\t\t{\n\t\t\t$match = false;\n\t\t\tif(stripos($row['Title'], $q) === 0 || stripos($row['Description'], $q) !== false)\n\t\t\t{\n\t\t\t\t$match = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$stmt2 = phoromatic_server::$db->prepare('SELECT TestProfile FROM phoromatic_results_results WHERE AccountID = :account_id AND UploadID = :upload_id');\n\t\t\t\t$stmt2->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt2->bindValue(':upload_id', $row['UploadID']);\n\t\t\t\t$result2 = $stmt2->execute();\n\t\t\t\twhile($row2 = $result2->fetchArray())\n\t\t\t\t{\n\t\t\t\t\tif(stripos($row2['TestProfile'], $q) !== false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$match = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($match)\n\t\t\t{\n\t\t\t\t$ret .= '<h3>' . $row['Title'] . '</h3><p>' . $row['Description'] . '<br /><a href=\"/?result/' . $row['PPRID'] . '\">View Results</a></p>';\n\t\t\t}\n\t\t}\n\n\t\treturn $ret;\n\t}\n\tprotected static function search_test_systems($q)\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, Description, SystemID, Hardware, Software FROM phoromatic_systems WHERE AccountID = :account_id');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$ret = null;\n\n\t\twhile($row = $result->fetchArray())\n\t\t{\n\t\t\t$match = false;\n\t\t\tif(stripos($row['Title'], $q) === 0 || stripos($row['Description'], $q) !== false || stripos($row['Hardware'], $q) !== false || stripos($row['Software'], $q) !== false)\n\t\t\t{\n\t\t\t\t$match = true;\n\t\t\t}\n\n\t\t\tif($match)\n\t\t\t{\n\t\t\t\t$ret .= '<h3>' . $row['Title'] . '</h3><p>' . $row['Description'] . '<br /><a href=\"/?systems/' . $row['SystemID'] . '\">View System</a></p>';\n\t\t\t}\n\t\t}\n\n\t\treturn $ret;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$search_query = pts_strings::sanitize($_REQUEST['search']);\n\t\t$main = null;\n\n\t\tif(strlen($search_query) < 4)\n\t\t{\n\t\t\t$main = '<h1>Search Failed</h1>';\n\t\t\t$main .= '<p>Search Queries Must Be At Least Four Characters.</p>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$main .= '<h1>Search Results For: ' . $search_query . '</h1>';\n\t\t\t$category_matches = 0;\n\n\t\t\t$tests = self::search_test_profiles($search_query);\n\t\t\tif($tests != null)\n\t\t\t{\n\t\t\t\t$category_matches++;\n\t\t\t\t$main .= '<h2>Test Profile Matches</h2>' . $tests . '<hr />';\n\t\t\t}\n\n\t\t\t$local_suites = self::search_local_test_suites($search_query);\n\t\t\tif($local_suites != null)\n\t\t\t{\n\t\t\t\t$category_matches++;\n\t\t\t\t$main .= '<h2>Local Test Suite Matches</h2>' . $local_suites . '<hr />';\n\t\t\t}\n\n\t\t\t$test_schedules = self::search_test_schedules($search_query);\n\t\t\tif($test_schedules != null)\n\t\t\t{\n\t\t\t\t$category_matches++;\n\t\t\t\t$main .= '<h2>Test Schedule Matches</h2>' . $test_schedules . '<hr />';\n\t\t\t}\n\n\t\t\t$test_results = self::search_test_results($search_query);\n\t\t\tif($test_results != null)\n\t\t\t{\n\t\t\t\t$category_matches++;\n\t\t\t\t$main .= '<h2>Test Result Matches</h2>' . $test_results . '<hr />';\n\t\t\t}\n\n\t\t\t$test_systems = self::search_test_systems($search_query);\n\t\t\tif($test_systems != null)\n\t\t\t{\n\t\t\t\t$category_matches++;\n\t\t\t\t$main .= '<h2>Test System Matches</h2>' . $test_systems . '<hr />';\n\t\t\t}\n\n\t\t\tif($category_matches == 0)\n\t\t\t{\n\t\t\t\t$main .= '<h2>No Matches Found</h2>';\n\t\t\t}\n\t\t}\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in());\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2016, Phoronix Media\n\tCopyright (C) 2008 - 2016, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_settings implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Settings';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t\techo phoromatic_webui_header_logged_in();\n\n\t\t\t$main = '<h1>Settings</h1>\n\t\t\t\t<h2>User Settings</h2>\n\t\t\t\t<p>User settings are specific to your particular account, in cases where there are multiple individuals/accounts managing the same test systems and data.</p>\n\t\t\t\t';\n\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_user_settings WHERE AccountID = :account_id AND UserID = :user_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':user_id', $_SESSION['UserID']);\n\t\t\t$result = $stmt->execute();\n\t\t\t$row = $result->fetchArray();\n\n\t\t\t$user_settings = array(\n\t\t\t\t'Email' => array(\n\t\t\t\t\t'NotifyOnResultUploads' => 'Send notification when test results are uploaded to Phoromatic.',\n\t\t\t\t\t'NotifyOnWarnings' => 'Send notification when any warnings are generated on a test system.',\n\t\t\t\t\t'NotifyOnNewSystems' => 'Send notification when new test systems are added.',\n\t\t\t\t\t'NotifyOnHungSystems' => 'Send notification when system(s) appear hung.'\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t$main .= '<form name=\"system_form\" id=\"system_form\" action=\"?settings\" method=\"post\">';\n\t\t\tforeach($user_settings as $section => $section_settings)\n\t\t\t{\n\t\t\t\t$main .= '<h3>' . $section . '</h3><p>';\n\t\t\t\tforeach($section_settings as $key => $setting)\n\t\t\t\t{\n\t\t\t\t\tif(isset($_POST['user_settings_update']))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(isset($_POST[$key]) && $_POST[$key] == 'yes')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$row[$key] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$row[$key] = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_user_settings SET ' . $key . ' = :val WHERE AccountID = :account_id AND UserID = :user_id');\n\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t$stmt->bindValue(':user_id', $_SESSION['UserID']);\n\t\t\t\t\t\t$stmt->bindValue(':val', $row[$key]);\n\t\t\t\t\t\t$stmt->execute();\n\t\t\t\t\t\t//echo phoromatic_server::$db->lastErrorMsg();\n\t\t\t\t\t}\n\n\t\t\t\t\t$main .= '<input type=\"checkbox\" name=\"' . $key . '\" ' . (isset($row[$key]) && $row[$key] == 1 ? 'checked=\"checked\" ' : '') . 'value=\"yes\" /> ' . $setting . '<br />';\n\t\t\t\t}\n\t\t\t\t$main .= '</p>';\n\t\t\t}\n\t\t\t$main .= '<p><input type=\"hidden\" value=\"1\" name=\"user_settings_update\" /><input type=\"submit\" value=\"Save User Settings\" /></p>';\n\t\t\t$main .= '</form>';\n\n\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t{\n\t\t\t\t$main .= '<hr />\n\t\t\t\t<h2>Account Settings</h2>\n\t\t\t\t<p>Account settings are system-wide, in cases where there are multiple individuals/accounts managing the same test systems and data.</p>';\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_account_settings WHERE AccountID = :account_id');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\t$env_vars_show = !empty($row['GlobalEnvironmentVariables']) ? pts_strings::parse_value_string_vars($row['GlobalEnvironmentVariables']) : array();\n\n\t\t\t\t$account_settings = array(\n\t\t\t\t\t'Global Settings' => array(\n\t\t\t\t\t\t'ArchiveResultsLocally' => 'Archive test results on local test systems after the results have been uploaded.',\n\t\t\t\t\t\t'UploadSystemLogs' => 'Upload system logs from clients when uploading test results.',\n\t\t\t\t\t\t'UploadInstallLogs' => 'Upload test installation logs from clients when uploading test results.',\n\t\t\t\t\t\t'UploadRunLogs' => 'Upload test run-time logs from clients when uploading test results.',\n\t\t\t\t\t\t'ProgressiveResultUploads' => 'Allow clients to stream results progressively to the Phoromatic Server as tests are finished (the ability to see in-progress result files on the Phoromatic Server rather than waiting until all tests are finished).',\n\t\t\t\t\t\t'RunInstallCommand' => 'For all test schedules, always run the install command for test(s) prior to running them on the system.',\n\t\t\t\t\t\t'ForceInstallTests' => 'For all test schedules, force the test installation/re-installation of tests each time prior to running the test.',\n\t\t\t\t\t\t//'SystemSensorMonitoring' => 'Enable the system sensor monitoring while tests are taking place.',\n\t\t\t\t\t\t'UploadResultsToOpenBenchmarking' => 'For all test schedules, also upload test results to OpenBenchmarking.org.',\n\t\t\t\t\t\t'AllowAnyDataForLogFiles' => 'When clients are uploading system log files to the Phoromatic Server, allow any data (non-text data) to be uploaded rather than enforcing text-only log files.',\n\t\t\t\t\t\t'PowerOffWhenDone' => 'Power off system(s) when scheduled tests are completed for the day.',\n\t\t\t\t\t\t'PreSeedTestInstalls' => 'Attempt to pre-install commonly used tests on client systems while idling.',\n\t\t\t\t\t\t'NetworkPowerUpWhenNeeded' => 'Use network Wake-On-LAN to power on systems when needed.',\n\t\t\t\t\t\t'LetOtherGroupsViewResults' => 'Let other accounts/groups on this Phoromatic Server view (read-only) this account\\'s results.',\n\t\t\t\t\t\t'LetPublicViewResults' => 'Allow public/unauthenticated visitors to access these test results from <a href=\"/public.php\">the public viewer page</a>.',\n\t\t\t\t\t\t'PowerOnSystemDaily' => 'Attempt to power-on systems daily (unless there\\'s a daily test schedule / trigger on the system) to maintain the DHCP lease on the network, update any software/hardware information, etc. When the daily update is done, the system will power off unless there\\'s a test to run and the power-off setting above is enabled. This option is namely useful for systems that otherwise may be idling/powered-off for long periods of time between tests.',\n\t\t\t\t\t\t'AutoApproveNewSystems' => 'Enabling this option will make new test systems immediately available for this account rather than the default behavior of first needing an administrator to approve/deny the system via the Phoromatic Server web interface. With this option enabled, the systems are automatically approved by default but can be later disabled/removed via the Phoromatic web interface.',\n\t\t\t\t\t\t'LimitNetworkCommunication' => 'Limit network communication. Only enable this option if your Phoromatic Server is slow, there are thousands of systems running benchmarks, and/or you are not interested in the real-time system monitoring and other functionality. This setting will limit the network communication to the point of the Phoromatic Server mostly being used just as a result aggregation point.'\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t$main .= '<form name=\"system_form\" id=\"system_form\" action=\"?settings\" method=\"post\">';\n\t\t\t\t$settings_updated = false;\n\t\t\t\tforeach($account_settings as $section => $section_settings)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<h3>' . $section . '</h3><p>';\n\t\t\t\t\tforeach($section_settings as $key => $setting)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(isset($_POST['account_settings_update']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(isset($_POST[$key]) && $_POST[$key] == 'yes')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$row[$key] = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$row[$key] = 0;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_account_settings SET ' . $key . ' = :val WHERE AccountID = :account_id');\n\t\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t$stmt->bindValue(':val', $row[$key]);\n\t\t\t\t\t\t\t$stmt->execute();\n\n\t\t\t\t\t\t\tif($settings_updated == false)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tphoromatic_add_activity_stream_event('settings', null, 'modified');\n\t\t\t\t\t\t\t\t$settings_updated = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//echo phoromatic_server::$db->lastErrorMsg();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$main .= '<input type=\"checkbox\" name=\"' . $key . '\" ' . (isset($row[$key]) && $row[$key] === 1 ? 'checked=\"checked\" ' : '') . 'value=\"yes\" /> ' . $setting . '<br />';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</p>';\n\t\t\t\t}\n\n\t\t\t\tif(isset($_POST['env_var_update']))\n\t\t\t\t{\n\t\t\t\t\t$env_vars_show = array();\n\t\t\t\t\t$env_vars = array();\n\t\t\t\t\tforeach(pts_env::get_posted_options('phoromatic') as $ei => $ev)\n\t\t\t\t\t{\n\t\t\t\t\t\tarray_push($env_vars, $ei . '=' . $ev);\n\t\t\t\t\t\t$env_vars_show[$ei] = $ev;\n\t\t\t\t\t}\n\t\t\t\t\t$env_vars = implode(';', $env_vars);\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_account_settings SET GlobalEnvironmentVariables = :val WHERE AccountID = :account_id');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt->bindValue(':val', $env_vars);\n\t\t\t\t\t$stmt->execute();\n\t\t\t\t}\n\n\t\t\t\t$main .= '<p><input type=\"hidden\" value=\"1\" name=\"account_settings_update\" /><input type=\"submit\" value=\"Save Account Settings\" /></p>';\n\t\t\t\t$main .= '</form>';\n\n\t\t\t\t$main .= '<form name=\"system_form\" id=\"system_form\" action=\"?settings\" method=\"post\"><hr />';\n\t\t\t\t$main .= '<h2>Global Environment Variable Option Overrides</h2> <p>The below options are for environment variable controls that can be set remotely by the Phoromatic Server for use with Phoromatic clients be on the Phoronix Test Suite 10.8 or newer. See the Phoronix Test Suite documentation for more information on these environment variables. The below options will set the values unconditionally for all test schedules / benchmark tickets. Via the individual test schedules / benchmark tickets the environment variables can be set for that given testing rather than globally.</p>' . pts_env::get_html_options('phoromatic', $env_vars_show);\n\n\t\t\t\t$main .= '<p><input type=\"hidden\" value=\"1\" name=\"env_var_update\" /><input type=\"submit\" value=\"Save Global Override Settings\" /></p>';\n\t\t\t\t$main .= '</form>';\n\t\t\t}\n\n\t\t\t$main .= '<hr />\n\t\t\t<h2>Cache Settings</h2>\n\t\t\t<p>Proceed to the <a href=\"?caches\">download cache page</a> for information about the Phoromatic Server\\'s download caches.</p>';\n\n\t\t\t$main .= '<hr />\n\t\t\t<h2>User Password</h2>\n\t\t\t<p>Proceed to the <a href=\"?password\">password page</a> if you wish to update your account\\'s password.</p>';\n\n\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t{\n\t\t\t\t$main .= '<hr />\n\t\t\t\t<h2>Build A Suite</h2>\n\t\t\t\t<p><a href=\"?build_suite\">Create a custom test suite</a>.</p>';\n\n\n\t\t\t\t$update_script_path = phoromatic_server::phoromatic_account_path($_SESSION['AccountID']) . 'client-update-script.sh';\n\t\t\t\tif(isset($_POST['client_update_script']))\n\t\t\t\t{\n\t\t\t\t\tfile_put_contents($update_script_path, str_replace(\"\\r\\n\", PHP_EOL, $_POST['client_update_script']));\n\t\t\t\t}\n\n\t\t\t\tif(!is_file($update_script_path))\n\t\t\t\t{\n\t\t\t\t\t$script_contents = pts_file_io::file_get_contents(PTS_CORE_STATIC_PATH . 'sample-pts-client-update-script.sh');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$script_contents = pts_file_io::file_get_contents($update_script_path);\n\t\t\t\t}\n\n\t\t\t\t$main .= '<form name=\"update_client_script_form\" id=\"update_client_script_form\" action=\"?settings\" method=\"post\">\n<hr /><h2>Auto-Updating Clients</h2><p>If desired, you can paste a script in the below field if you wish to have Phoronix Test Suite / Phoromatic clients attempt to auto-update themselves. Any commands copied below are automatically executed by the client upon completing a test / beginning a new idle process / prior to attempting a system shutdown. If your script determines the client is to be updated, it should <em>reboot</em> the system afterwards to ensure no issues in the upgrade of the Phoronix Test Suite installation. A reference/example script is provided by default. This update script feature does not attempt to update the Phoromatic Server software.</p>\n\t\t\t\t<p><textarea style=\"width: 80%; height: 400px;\" name=\"client_update_script\" id=\"client_update_script\">' . $script_contents . '</textarea></p>\n\t\t\t\t<p><input type=\"submit\" value=\"Save Client Auto-Update Script\" /></p>\n\t\t\t\t</form>';\n\t\t\t}\n\n\t\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2022, Phoronix Media\n\tCopyright (C) 2008 - 2022, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_system_claim implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Phoromatic Client System Claim';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\techo phoromatic_webui_header_logged_in();\n\t\t$main = null;\n\n\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t{\n\n\t\t\tif(function_exists('ssh2_connect') && isset($_POST['ip']) && isset($_POST['port']) && isset($_POST['password']) && isset($_POST['username']))\n\t\t\t{\n\t\t\t\t$connection = ssh2_connect($_POST['ip'], $_POST['port']);\n\n\t\t\t\tif(ssh2_auth_password($connection, $_POST['username'], $_POST['password']))\n\t\t\t\t{\n\t\t\t\t\t$tmp_local_file = tempnam('/tmp', 'pts-ssh');\n\t\t\t\t\t$tmp_remote_file = 'pts-ssh-' . rand(9999, 99999);\n\n\t\t\t\t\tfile_put_contents($tmp_local_file, '#!/bin/sh\n\t\t\tif [ -w /var/lib/phoronix-test-suite/ ]\n\t\t\tthen\n\t\t\t\tPHORO_FILE_PATH=/var/lib/phoronix-test-suite/\n\t\t\telif [ -w $HOME/.phoronix-test-suite/ ]\n\t\t\tthen\n\t\t\t\tPHORO_FILE_PATH=$HOME/.phoronix-test-suite/\n\t\t\tfi\n\n\t\t\techo \"' . phoromatic_web_socket_server_ip() . '\" >> $PHORO_FILE_PATH/phoromatic-servers\n\t\t\tmkdir -p $PHORO_FILE_PATH/modules-data/phoromatic\n\t\t\techo \"' . phoromatic_web_socket_server_addr() . '\" > $PHORO_FILE_PATH/modules-data/phoromatic/last-phoromatic-server\n\t\t\t');\n\n\t\t\t\t\tssh2_scp_send($connection, $tmp_local_file, $tmp_remote_file);\n\t\t\t\t\tunlink($tmp_local_file);\n\t\t\t\t\tssh2_exec($connection, 'chmod +x ' . $tmp_remote_file);\n\t\t\t\t\tssh2_exec($connection, './' . $tmp_remote_file);\n\t\t\t\t\tssh2_exec($connection, 'rm' . $tmp_remote_file);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif((isset($_POST['ip_claim']) && !empty($_POST['ip_claim'])) && isset($_POST['ping']))\n\t\t\t{\n\t\t\t\t$ip_ping = ip2long($_POST['ip_claim']) !== false ? $_POST['ip_claim'] : null;\n\t\t\t\tif($ip_ping)\n\t\t\t\t{\n\t\t\t\t\techo '<h3>Ping Test: ' . $ip_ping . '</h3>';\n\t\t\t\t\techo '<pre>';\n\t\t\t\t\techo shell_exec('ping -c 1 ' . $ip_ping);\n\t\t\t\t\techo '</pre>';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if((isset($_POST['ip_claim']) && !empty($_POST['ip_claim'])) || (isset($_POST['mac_claim']) && !empty($_POST['mac_claim'])))\n\t\t\t{\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_system_association_claims (AccountID, IPAddress, NetworkMAC, CreationTime) VALUES (:account_id, :ip_address, :mac_address, :creation_time)');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':ip_address', pts_strings::simple($_POST['ip_claim']));\n\t\t\t\t$stmt->bindValue(':mac_address', pts_strings::simple($_POST['mac_claim']));\n\t\t\t\t$stmt->bindValue(':creation_time', phoromatic_server::current_time());\n\t\t\t\t$result = $stmt->execute();\n\t\t\t}\n\t\t\tif(isset($_POST['remove_claim']) && !empty($_POST['remove_claim']))\n\t\t\t{\n\t\t\t\tlist($ipc, $macc) = explode(',', $_POST['remove_claim']);\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_system_association_claims WHERE AccountID = :account_id AND NetworkMAC = :mac_address AND IPAddress = :ip_address');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':ip_address', pts_strings::simple($ipc));\n\t\t\t\t$stmt->bindValue(':mac_address', pts_strings::simple($macc));\n\t\t\t\t$stmt->bindValue(':creation_time', phoromatic_server::current_time());\n\t\t\t\t$result = $stmt->execute();\n\t\t\t}\n\n\t\t\t$main .= '<h2>Add Phoromatic Server Info Via SSH</h2>\n\t\t\t<p>If your Phoromatic client systems are SSH-enabled, you can specify their SSH connection information below. In doing so, the Phoromatic Server will do a one-time connection to it immediately to pre-seed the system with the Phoromatic Server account information for this account. This should allow the client systems to then find the server automatically next time the phoronix-test-suite is run. This command assumes the Phoronix Test Suite is already pre-installed on the client system in your desired configuration.</p>';\n\n\t\t\tif(function_exists('ssh2_connect'))\n\t\t\t{\n\t\t\t\t$main .= '<h3>Phoromatic Client SSH Information:</h3>';\n\t\t\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"ssh_connect\" method=\"post\">\n\t\t\t\t<p><strong>IP Address:</strong> <input type=\"text\" name=\"ip\" /></p>\n\t\t\t\t<p><strong>SSH Port:</strong> <input type=\"text\" name=\"port\" value=\"22\" /></p>\n\t\t\t\t<p><strong>Username:</strong> <input type=\"text\" name=\"username\" /></p>\n\t\t\t\t<p><strong>Password:</strong> <input type=\"password\" name=\"password\" /></p>\n\t\t\t\t<p><input name=\"submit\" value=\"Seed Phoromatic Server Account Information\" type=\"submit\" /></p>\n\t\t\t\t</form>';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$main .= '<h3>PHP SSH2 Must Be Installed For This Feature</h3>';\n\t\t\t}\n\t\t\t$main .= '<hr />';\n\t\t\t$main .= '<h2>Add Phoromatic Server Info Via IP/MAC</h2>\n\t\t\t<p>If deploying a Phoromatic Server within an organization, you can attempt for automatic configuration of Phoromatic clients if you know the system\\'s IP or MAC addresses. When specifying either of these fields, if a Phoromatic client attempts to connect to this Phoromatic system without being associated to an account, it will be claimed by this account as long as no other Phoromatic accounts are attempting to claim the IP/MAC. This method can be particularly useful if running the Phoromatic client as a systemd/Upstart service where it will continually poll every 90 seconds auto-detected Phoromatic Servers on the LAN via zero-conf networking. For this feature to work, the zero-conf networking (Avahi) support must be enabled and working.</p>';\n\t\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"auto_associate\" method=\"post\">\n\t\t\t<p><strong>IP Address Claim:</strong> <input type=\"text\" name=\"ip_claim\" /></p>\n\t\t\t<p><strong>MAC Address Claim:</strong> <input type=\"text\" name=\"mac_claim\" /></p>\n\t\t\t<p><input name=\"ping\" value=\"Ping Test\" type=\"submit\" /> &nbsp; <input name=\"submit\" value=\"Submit Claim\" type=\"submit\" /></p>\n\t\t\t</form>';\n\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_system_association_claims WHERE AccountID = :account_id ORDER BY IPAddress ASC');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$result = $stmt->execute();\n\t\t\t$claims = array();\n\t\t\t$main .= '<p style=\"max-height: 500px; overflow-y: auto; \">';\n\t\t\twhile($row = $result->fetchArray())\n\t\t\t{\n\t\t\t\t$ip = $row['IPAddress'] != null ? $row['IPAddress'] : '<em>' . pts_network::mac_to_ip($row['NetworkMAC']) . '</em>';\n\n\t\t\t\t$main .= $ip . ' ' . $row['NetworkMAC'] . '<br />';\n\t\t\t\tarray_push($claims, $row['IPAddress'] . ',' . $row['NetworkMAC']);\n\t\t\t}\n\t\t\t$main .= '</p>';\n\n\t\t\tif(!empty($claims))\n\t\t\t{\n\t\t\t\t$main .= '<hr /><h2>Remove Claim</h2><p>Removing a claimed IP / MAC address.</p>';\n\t\t\t\t$main .= '<p><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"remove_claim\" method=\"post\"><select name=\"remove_claim\" id=\"remove_claim\">';\n\n\t\t\t\tforeach($claims as $claim)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<option value=\"' . $claim . '\">' . str_replace(',', ' ', $claim) . '</option>';\n\t\t\t\t}\n\t\t\t\t$main .= '</select> <input name=\"submit\" value=\"Remove Claim\" type=\"submit\" /></form></p>';\n\t\t\t}\n\n\t\t\t$main .= '<hr />';\n\t\t}\n\n\t\t$right = null;\n\t\techo phoromatic_webui_main($main, phoromatic_webui_right_panel_logged_in($right));\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2022, Phoronix Media\n\tCopyright (C) 2008 - 2022, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_systems implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Systems';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\techo phoromatic_webui_header_logged_in();\n\t\t$main = null;\n\n\t\tif(!PHOROMATIC_USER_IS_VIEWER && !empty($PATH[0]) && isset($_POST['system_title']) && !empty($_POST['system_title']) && isset($_POST['system_description']) && isset($_POST['system_state']))\n\t\t{\n\t\t\tphoromatic_quit_if_invalid_input_found(array('system_title', 'system_description', 'system_state'));\n\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET Title = :title, Description = :description, State = :state, CurrentTask = \\'Awaiting Task\\', BlockPowerOffs = :block_power_offs WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t$stmt->bindValue(':title', pts_strings::simple($_POST['system_title']));\n\t\t\t$stmt->bindValue(':description', pts_strings::sanitize($_POST['system_description']));\n\t\t\t$stmt->bindValue(':state', $_POST['system_state']);\n\t\t\t$stmt->bindValue(':block_power_offs', $_POST['block_power_offs']);\n\t\t\t$stmt->execute();\n\t\t}\n\t\tif(!PHOROMATIC_USER_IS_VIEWER && !empty($PATH[0]) && isset($_POST['maintenance_mode']))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET MaintenanceMode = :maintenance_mode WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t$stmt->bindValue(':maintenance_mode', $_POST['maintenance_mode']);\n\t\t\t$stmt->execute();\n\t\t}\n\t\tif(!PHOROMATIC_USER_IS_VIEWER && !empty($PATH[0]) && isset($_GET['clear_system_warnings']))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_system_client_errors WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t$stmt->execute();\n\t\t}\n\t\tif(!PHOROMATIC_USER_IS_VIEWER && !empty($PATH[0]) && isset($_POST['tick_thread_reboot']))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET TickThreadEvent = :event WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t$stmt->bindValue(':event', time() . ':reboot');\n\t\t\t$stmt->execute();\n\t\t}\n\t\tif(!PHOROMATIC_USER_IS_VIEWER && !empty($PATH[0]) && isset($_POST['tick_thread_halt']))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET TickThreadEvent = :event WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t$stmt->bindValue(':event', time() . ':halt-testing');\n\t\t\t$stmt->execute();\n\t\t}\n\t\tif(!PHOROMATIC_USER_IS_VIEWER && !empty($PATH[0]) && isset($_GET['really_delete_system']))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_systems WHERE AccountID = :account_id AND SystemID = :system_id LIMIT 1');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t$stmt->execute();\n\t\t}\n\t\tif(!PHOROMATIC_USER_IS_VIEWER && !empty($PATH[0]) && isset($_POST['system_var_names'])&& isset($_POST['system_var_values']))\n\t\t{\n\t\t\t$vars = array();\n\t\t\tforeach($_POST['system_var_names'] as $i => $name)\n\t\t\t{\n\t\t\t\tif(isset($_POST['system_var_values'][$i]))\n\t\t\t\t{\n\t\t\t\t\t$name = pts_strings::keep_in_string(strtoupper($name), pts_strings::CHAR_LETTER | pts_strings::CHAR_NUMERIC | pts_strings::CHAR_UNDERSCORE);\n\t\t\t\t\t$val = pts_strings::keep_in_string($_POST['system_var_values'][$i], pts_strings::CHAR_LETTER | pts_strings::CHAR_NUMERIC | pts_strings::CHAR_DASH | pts_strings::CHAR_UNDERSCORE | pts_strings::CHAR_COMMA | pts_strings::CHAR_SLASH | pts_strings::CHAR_SPACE | pts_strings::CHAR_DECIMAL | pts_strings::CHAR_PLUS | pts_strings::CHAR_EQUAL);\n\n\t\t\t\t\tif($name != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t$vars[$name] = $val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$var_string = null;\n\t\t\tforeach($vars as $name => $val)\n\t\t\t{\n\t\t\t\t$var_string .= $name . '=' . $val . ';';\n\t\t\t}\n\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET SystemVariables = :system_variables WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t$stmt->bindValue(':system_variables', $var_string);\n\t\t\t$stmt->execute();\n\t\t}\n\n\t\tif(!empty($PATH[0]))\n\t\t{\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_systems WHERE AccountID = :account_id AND SystemID = :system_id ORDER BY LastCommunication DESC');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t$result = $stmt->execute();\n\n\t\t\tif(!empty($result))\n\t\t\t{\n\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\tif(!PHOROMATIC_USER_IS_VIEWER && isset($PATH[1]) && $PATH[1] == 'edit')\n\t\t\t\t{\n\t\t\t\t\t$main = '<h1>' . $row['Title'] . '</h1>';\n\t\t\t\t\t$main .= '<form name=\"system_form\" id=\"system_form\" action=\"?systems/' . $PATH[0] . '\" method=\"post\" onsubmit=\"return phoromatic_system_edit(this);\">\n\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">System Title:</div> <input type=\"text\" style=\"width: 400px;\" name=\"system_title\" value=\"' . $row['Title'] . '\" /></p>\n\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">System Description:</div> <textarea style=\"width: 400px;\" name=\"system_description\">' . $row['Description'] . '</textarea></p>\n\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">System State:</div><select name=\"system_state\" style=\"width: 200px;\"><option value=\"-1\">Disabled</option><option value=\"1\" selected=\"selected\">Enabled</option></select></p>\n\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">Allow Phoromatic To Power Off System When Testing Complete:</div><select name=\"block_power_offs\" style=\"width: 200px;\"><option value=\"0\">Permitted</option><option value=\"1\">Block Power-Off Signaling For This System</option></select> <sup>Assuming the power-off setting is enabled from the account settings page.</sup></p>\n\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">&nbsp;</div> <input type=\"submit\" value=\"Submit\" /></p></form>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$main = '<h1>' . $row['Title'] . '</h1><p><em>' . ($row['Description'] != null ? $row['Description'] : 'No system description.') . '</em></p>';\n\n\t\t\t\t\tif(phoromatic_server::system_check_if_down($_SESSION['AccountID'], $row['SystemID'], $row['LastCommunication'], $row['CurrentTask']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<h3 style=\"text-align: center; color: red;\">This system appears to be offline or inactive and there are pending tests scheduled to be run on this system that have yet to be completed. This system has not communicated with the Phoromatic Server in ' . pts_strings::format_time((time() - strtotime($row['LastCommunication'])), 'SECONDS', true, 60) . '.</h3>';\n\t\t\t\t\t}\n\n\t\t\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<p><a href=\"?systems/' . $PATH[0] . '/edit\">Edit Task & Enable/Disable System</a></p>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch($row['State'])\n\t\t\t\t{\n\t\t\t\t\tcase -1:\n\t\t\t\t\t\t$state = 'Disabled';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\t$state = 'Connected; Awaiting Approval';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\t$state = 'Active';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$main .= '<hr />';\n\t\t\t\t$status_extra = null;\n\t\t\t\tif(!empty($row['CurrentProcessSchedule']))\n\t\t\t\t{\n\t\t\t\t\t$status_extra = ' - <a href=\"/?schedules/' . $row['CurrentProcessSchedule'] . '\">' . phoromatic_server::schedule_id_to_name($row['CurrentProcessSchedule']) . '</a>';\n\t\t\t\t}\n\t\t\t\telse if(!empty($row['CurrentProcessTicket']))\n\t\t\t\t{\n\t\t\t\t\t$status_extra = ' - <a href=\"/?benchmark/' . $row['CurrentProcessTicket'] . '\">' . phoromatic_server::ticket_id_to_name($row['CurrentProcessTicket']) . '</a>';\n\t\t\t\t}\n\t\t\t\t$info_table = array('Status:' => $row['CurrentTask'] . $status_extra, 'Last Communication:' => phoromatic_user_friendly_timedate($row['LastCommunication']), 'Estimated Time Left For Task: ' => phoromatic_compute_estimated_time_remaining_string($row['EstimatedTimeForTask'], $row['LastCommunication']), 'State:' => $state, 'Phoronix Test Suite Client:' => $row['ClientVersion'], 'Initial Creation:' => phoromatic_user_friendly_timedate($row['CreatedOn']), 'System ID:' => $row['SystemID'], 'Last IP:' => $row['LastIP'], 'MAC Address:' => $row['NetworkMAC'], 'Wake-On-LAN Information:' => (empty($row['NetworkWakeOnLAN']) ? 'N/A' : $row['NetworkWakeOnLAN']), 'Power-Off Sequence Permitted: ' => ($row['BlockPowerOffs'] == 1 ? 'Blocked' : 'Permitted'));\n\t\t\t\t$main .= '<h2>System State</h2>' . pts_webui::r2d_array_to_table($info_table, 'auto');\n\n\t\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t\t{\n\t\t\t\t\tif($row['MaintenanceMode'] == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t$mm_str = 'Disable Maintenance Mode';\n\t\t\t\t\t\t$mm_val = 0;\n\t\t\t\t\t\t$mm_onclick = 'return true;';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$mm_str = 'Enter Maintenance Mode';\n\t\t\t\t\t\t$mm_val = 1;\n\t\t\t\t\t\t$mm_onclick = 'return confirm(\\'Enter maintenance mode now?\\');';\n\t\t\t\t\t}\n\n\t\t\t\t\t$main .= '<p><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_groups\" method=\"post\"><input type=\"hidden\" name=\"maintenance_mode\" value=\"' . $mm_val . '\" /><input type=\"submit\" value=\"' . $mm_str . '\" onclick=\"' . $mm_onclick . '\" style=\"float: left; margin: 0 20px 5px 0;\" /></form> Putting the system into maintenance mode will power up the system (if supported and applicable) and cause the Phoronix Test Suite Phoromatic client to idle and block all testing until the mode has been disabled. If a test is already running on the system, the maintenance mode will not be entered until after the testing has completed. The maintenance mode can be used if wishing to update the system software or carry out other tasks without interfering with the Phoromatic client process. Once disabled, the Phoronix Test Suite will continue to function as normal.</p>';\n\n\t\t\t\t\tif($row['CoreVersion'] >= 5730)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<p><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_groups\" method=\"post\"><input type=\"hidden\" name=\"tick_thread_reboot\" value=\"1\" /><input type=\"submit\" value=\"Reboot System\" style=\"float: left; margin: 0 20px 5px 0;\" /></form> If the system is currently powered up and connected to the Phoromatic Server, this will send a message to the system to issue a reboot -- in case the system is hung on a test or you wish to otherwise manually reboot the server.</p>';\n\n\t\t\t\t\t\t$main .= '<p><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_groups\" method=\"post\"><input type=\"hidden\" name=\"tick_thread_halt\" value=\"1\" /><input type=\"submit\" value=\"Halt Testing\" style=\"float: left; margin: 0 20px 5px 0;\" /></form> If the system is currently powered up and running a test/benchmark via the Phoromatic Server, this will tell the system to halt the testing prematurely as soon as the currently-active test has finished. The results successfully ran will then be uploaded to the Phoromatic Server.</p>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$main .= '<hr /><h2>System Variables</h2><p>System variables allow for providing per-system information in an easy-to-use manner for other parts of the Phoromatic system. Initially these named variables can be used for the results identifier when <a href=\"/?benchmark\">creating a benchmark ticket</a> and in the future the system variables may be used elsewhere. Examples of system variables could include providing a <em>.SERIAL</em> variable to acknowledge the system\\'s serial number that may not be presented elsewhere by the Phoronix Test Suite, <em>.ADMIN</em> for the system\\'s local administrator, etc. Variable names can only be alpha-numeric strings while their values are also alpha-numeric strings but with spaces allowed. System variables are always prefixed by a period. These system variables are also automatically transferred to the Phoromatic clients and set as environment variables prior to running any scheduled tests/process via Phoromatic.</p>';\n\n\t\t\t\t$system_variables = $row['SystemVariables'] != null ? explode(';', $row['SystemVariables']) : array();\n\n\t\t\t\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_system_variables\" method=\"post\">';\n\t\t\t\t$main .= '<table width=\"80%\"><tr><th>Variable Name</th><th>Value</th></tr>';\n\t\t\t\tforeach($system_variables as $i => $v_string)\n\t\t\t\t{\n\t\t\t\t\t$var = explode('=', $v_string);\n\t\t\t\t\tif(count($var) == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<tr id=\"system_var_' . $i . '\">';\n\t\t\t\t\t\t$main .= '<td><span style=\"font-weight: 800; font-size: 16px;\">.</span><input name=\"system_var_names[]\" value=\"' . $var[0]. '\" readonly /></td>';\n\t\t\t\t\t\t$main .= '<td><input name=\"system_var_values[]\" value=\"' . $var[1]. '\" /></td>';\n\t\t\t\t\t\t$main .= '</tr>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$main .= '<tr id=\"system_var_' . ($i + 1) . '\">';\n\t\t\t\t$main .= '<td><span style=\"font-weight: 800; font-size: 16px;\">.</span><input name=\"system_var_names[]\" /></td>';\n\t\t\t\t$main .= '<td><input name=\"system_var_values[]\" /></td>';\n\t\t\t\t$main .= '</tr>';\n\t\t\t\t$main .= '</table>';\n\t\t\t\t$main .= '<p><input name=\"submit\" value=\"Update System Variables\" type=\"submit\" /></p></form>';\n\n\t\t\t\t$main .= '<hr /><h2>System Components</h2><div style=\"float: left; width: 50%;\">';\n\t\t\t\t$components = pts_result_file_analyzer::system_component_string_to_array($row['Hardware']);\n\t\t\t\t$main .= pts_webui::r2d_array_to_table($components) . '</div><div style=\"float: left; width: 50%;\">';\n\t\t\t\t$components = pts_result_file_analyzer::system_component_string_to_array($row['Software']);\n\t\t\t\t$main .= pts_webui::r2d_array_to_table($components) . '</div>';\n\n\t\t\t\tif(!empty($row['SystemProperties']))\n\t\t\t\t{\n\t\t\t\t\t$properties = json_decode($row['SystemProperties'], true);\n\t\t\t\t\t$main .= '<blockquote style=\"max-height: 440px; overflow: scroll; clear: both;\">';\n\t\t\t\t\tforeach($properties as $component => $component_properties)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<strong>' . strtoupper($component) . '</strong><br />';\n\t\t\t\t\t\tforeach($component_properties as $property => $value)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$main .= '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' . $property . ' = ';\n\n\t\t\t\t\t\t\tif(is_array($value))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tforeach($value as $si => $sv)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(is_array($sv))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tforeach($sv as $ssi => $ssv)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t$main .= '<br />' . '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' . $ssi . ' = ' . $ssv;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$main .= '<br />';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$main .= '<br />' . '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' . $sv . ' = ' . $sv . PHP_EOL;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//echo PHP_EOL;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$main .= $value . '<br />';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$main .= '<br />';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</blockquote>';\n\t\t\t\t}\n\n\t\t\t\t$system_path = phoromatic_server::phoromatic_account_system_path($_SESSION['AccountID'], $row['SystemID']);\n\t\t\t\t$main .= '<hr />';\n\t\t\t\tif(is_file($system_path . 'sensors-pool.json'))\n\t\t\t\t{\n\t\t\t\t\t$sensors = file_get_contents($system_path . 'sensors-pool.json');\n\t\t\t\t\t$sensors = json_decode($sensors, true);\n\n\t\t\t\t\tforeach($sensors as $title => $s)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!isset($s['values']) || count($s['values']) < 5 || max($s['values']) == min($s['values']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$graph = new pts_sys_graph(array('title' => $title, 'x_scale' => 'm', 'y_scale' => $s['unit'], 'text_size' => 12, 'reverse_x_direction' => false, 'width' => 920, 'height' => 400));\n\t\t\t\t\t\t$graph->render_base();\n\t\t\t\t\t\t$svg_dom = $graph->render_graph_data($s['values']);\n\t\t\t\t\t\tif($svg_dom === false)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$output_type = 'SVG';\n\t\t\t\t\t\t$graph = $svg_dom->output(null, $output_type);\n\t\t\t\t\t\t$main .= '<p align=\"center\">' . substr($graph, strpos($graph, '<svg')) . '</p>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(is_file($system_path . 'sensors.json'))\n\t\t\t\t{\n\t\t\t\t\t$sensor_file = file_get_contents($system_path . 'sensors.json');\n\t\t\t\t\t$sensor_file = json_decode($sensor_file, true);\n\t\t\t\t\tif($sensor_file && isset($sensor_file['sensors']) && !empty($sensor_file['sensors']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$i = 0;\n\t\t\t\t\t\t$col = array(1 => array(), 2 => array(), 3 => array(), 0 => array());\n\t\t\t\t\t\tforeach($sensor_file['sensors'] as $name => $sensor)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tarray_push($col[($i % 4)], '<strong>' . $name . ':</strong> ' . $sensor['value'] . ' ' . $sensor['unit']);\n\t\t\t\t\t\t\t$i++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$main .= '<h2>System Sensors</h2>';\n\t\t\t\t\t\tforeach($col as $sensors)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$main .= '<div style=\"float: left; width: 25%;\">';\n\t\t\t\t\t\t\tforeach($sensors as $sensor)\n\t\t\t\t\t\t\t\t$main .= '<p>' . $sensor . '</p>';\n\t\t\t\t\t\t\t$main .= '</div>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$main .= '<p><em><strong>Last Updated:</strong>' . date('d F H:i', filemtime(phoromatic_server::phoromatic_account_system_path($_SESSION['AccountID'], $row['SystemID']) . 'sensors.json')) . ' <strong>System Uptime:</strong> ' . $sensor_file['uptime'] . ' Minutes</em></p>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$log_file = phoromatic_server::phoromatic_account_system_path($_SESSION['AccountID'], $row['SystemID']) . 'phoronix-test-suite.log';\n\t\t\t\tif(is_file($log_file))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h2>Phoronix Test Suite Client Log</h2>';\n\t\t\t\t\t$main .= '<p><textarea style=\"width: 60%; height: 200px;\">' . file_get_contents($log_file)  . '</textarea></p>';\n\t\t\t\t\t$main .= '<p><em><strong>Last Updated:</strong>' . date ('d F H:i', filemtime($log_file)) . '</em></p>';\n\t\t\t\t}\n\n\t\t\t\t$groups = $row['Groups'] != null ? explode('#', $row['Groups']) : array();\n\t\t\t\tforeach($groups as $i => $group)\n\t\t\t\t{\n\t\t\t\t\tif(empty($group))\n\t\t\t\t\t\tunset($groups[$i]);\n\t\t\t\t}\n\t\t\t\t$schedules = phoromatic_server::schedules_that_run_on_system($_SESSION['AccountID'], $row['SystemID']);\n\t\t\t\tif(!empty($groups) || !empty($schedules))\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h2>Schedules</h2>';\n\t\t\t\t\tif(!empty($groups))\n\t\t\t\t\t\t$group_msg = 'This system belongs to the following groups: <strong>' . implode(', ', $groups) . '</strong>.';\n\t\t\t\t\telse\n\t\t\t\t\t\t$group_msg = 'This system does not currently belong to any groups.';\n\n\t\t\t\t\t$main .= '<p>' . $group_msg . ' Manage groups via the <a href=\"?systems\">systems page</a>.</p>';\n\n\t\t\t\t\tif(!empty($schedules))\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\" style=\"margin: 0 10%;\"><ul><li><h1>Schedules Running On This System</h1></li>';\n\t\t\t\t\t\tforeach($schedules as &$row)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$group_count = empty($row['RunTargetGroups']) ? 0 : count(explode(',', $row['RunTargetGroups']));\n\t\t\t\t\t\t\t$main .= '<a href=\"?schedules/' . $row['ScheduleID'] . '\"><li>' . $row['Title'] . '<br /><table><tr><td>' . pts_strings::plural_handler(count(phoromatic_server::systems_associated_with_schedule($_SESSION['AccountID'], $row['ScheduleID'])), 'System') . '</td><td>' . pts_strings::plural_handler($group_count, 'Group') . '</td><td>' . pts_strings::plural_handler(phoromatic_results_for_schedule($row['ScheduleID']), 'Result') . '</td><td><strong>' . phoromatic_schedule_activeon_string($row['ActiveOn'], $row['RunAt']) . '</strong></td></tr></table></li></a>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$main .= '</ul></div>';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime FROM phoromatic_results WHERE AccountID = :account_id AND SystemID = :system_id ORDER BY UploadTime DESC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t\t$test_result_result = $stmt->execute();\n\t\t\t\t$test_result_row = $test_result_result->fetchArray();\n\t\t\t\t$results = 0;\n\n\t\t\t\tif($test_result_row != false)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h2>Test Results</h2>';\n\t\t\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\" style=\"margin: 0 10%;\">';\n\t\t\t\t\t$main .= '<ul><li><h1>Recent Test Results</h1></li>';\n\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\tif($results > 20)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$main .= '<a href=\"?result/' . $test_result_row['PPRID'] . '\"><li>' . $test_result_row['Title'] . '<br /><table><tr><td>' . phoromatic_server::system_id_to_name($test_result_row['SystemID']) . '</td><td>' . phoromatic_user_friendly_timedate($test_result_row['UploadTime']) .  '</td></tr></table></li></a>';\n\t\t\t\t\t\t$results++;\n\n\t\t\t\t\t}\n\t\t\t\t\twhile($test_result_row = $test_result_result->fetchArray());\n\t\t\t\t}\n\n\t\t\t\tif($results > 0)\n\t\t\t\t{\n\t\t\t\t\t$main .= '</ul></div>';\n\t\t\t\t}\n\n\n\t\t\t\t// Any System Errors?\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT ErrorMessage, UploadTime, SystemID, TestIdentifier FROM phoromatic_system_client_errors WHERE AccountID = :account_id AND SystemID = :system_id AND UploadTime >= date(\"now\", \"-14 day\") ORDER BY UploadTime DESC LIMIT 300');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':system_id', $PATH[0]);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$row = $result->fetchArray();\n\t\t\t\tif($row != false)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<hr /><h2>Recent System Warnings &amp; Errors</h2>';\n\t\t\t\t\t$main .= '<div style=\"overflow: auto; max-height: 500px;\">';\n\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '[' . $row['UploadTime'] . '] <strong>' . $row['TestIdentifier'] . '</strong>: ' .$row['ErrorMessage'] . '<br />';\n\t\t\t\t\t}\n\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t$main .= '</div>';\n\t\t\t\t\t$main .= '<p align=\"center\"><a href=\"?systems/' . $PATH[0] . '/&clear_system_warnings\">Clear System Warnings/Errors</a></p>';\n\t\t\t\t}\n\n\t\t\t\t$test_install_json = phoromatic_server::phoromatic_account_system_path($_SESSION['AccountID'], $PATH[0]) . 'test-installations.json';\n\t\t\t\tif(is_file($test_install_json))\n\t\t\t\t{\n\t\t\t\t\t$test_install_json = json_decode(file_get_contents($test_install_json), true);\n\t\t\t\t\tif(!empty($test_install_json))\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<hr /><h2>Test Profile Installations</h2>';\n\t\t\t\t\t\tforeach($test_install_json as $test_profile => $ti_data)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$test_installation = new pts_installed_test($ti_data);\n\t\t\t\t\t\t\t$status = $test_installation->get_install_status();\n\t\t\t\t\t\t\tif($status == 'INSTALLED')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$status = '<span style=\"color: green;\">' . $status . '</span> ' . ($test_installation->get_run_count() > 0 ? '<strong>Times Run:</strong> ' . $test_installation->get_run_count() : '');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if($status == 'INSTALL_FAILED')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$status = '<span style=\"color: red; font-weight: bold;\">INSTALL FAILED</span>';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$error_output = '';\n\t\t\t\t\t\t\t$runtime_errors = $test_installation->get_runtime_errors();\n\t\t\t\t\t\t\t$install_errors = $test_installation->get_install_errors();\n\t\t\t\t\t\t\tif(!empty($runtime_errors))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tforeach($runtime_errors as $e)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$error_output .= '<br />' . trim((empty($e['description']) ? '' : '<em>' . $e['description'] . '</em> - ') . 'Last Attempted: ' . $e['date_time']);\n\t\t\t\t\t\t\t\t\tforeach($e['errors'] as $error)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$error_output .= '<br /> &nbsp; &nbsp; <span style=\"color: red; font-weight: bold;\">    ' . $error . '</span>';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!empty($install_errors))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tforeach($install_errors as $install_error)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$error_output .= '<br /><span style=\"color: red; font-weight: bold;\">    ' . $install_error . '</span>';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$main .= '<p><strong>' .  $test_profile . '</strong> ' .  $status . ' (Install Date: ' . $test_installation->get_install_date() . ')' . $error_output . '</p>';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif($main == null)\n\t\t{\n\t\t\tif(!PHOROMATIC_USER_IS_VIEWER && isset($_POST['new_group']) && !empty($_POST['new_group']))\n\t\t\t{\n\t\t\t\t$group = trim($_POST['new_group']);\n\n\t\t\t\tif($group)\n\t\t\t\t{\n\t\t\t\t\tphoromatic_quit_if_invalid_input_found(array('new_group'));\n\t\t\t\t\t$group = pts_strings::simple($group);\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_groups (AccountID, GroupName) VALUES (:account_id, :group_name)');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt->bindValue(':group_name', $group);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\tphoromatic_add_activity_stream_event('groups', $group, 'added');\n\n\t\t\t\t\tif(!empty($_POST['systems_for_group']) && is_array($_POST['systems_for_group']))\n\t\t\t\t\t{\n\t\t\t\t\t\tforeach($_POST['systems_for_group'] as $sid)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Find current groups\n\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Groups FROM phoromatic_systems WHERE AccountID = :account_id AND SystemID = :system_id ORDER BY LastCommunication DESC');\n\t\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t$stmt->bindValue(':system_id', $sid);\n\t\t\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t\t\t$row = $result->fetchArray();\n\t\t\t\t\t\t\t$existing_groups = $row != false ? $row['Groups'] : null;\n\n\t\t\t\t\t\t\t// Append new Group\n\t\t\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET Groups = :new_group WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t$stmt->bindValue(':system_id', $sid);\n\t\t\t\t\t\t\t$stmt->bindValue(':new_group', $existing_groups . '#' . $group . '#');\n\t\t\t\t\t\t\t$stmt->execute();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(!PHOROMATIC_USER_IS_VIEWER && isset($_POST['system_group_update']))\n\t\t\t{\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT SystemID FROM phoromatic_systems WHERE AccountID = :account_id');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\tphoromatic_add_activity_stream_event('groups', null, 'modified');\n\n\t\t\t\twhile($row = $result->fetchArray())\n\t\t\t\t{\n\t\t\t\t\tif(isset($_POST['groups_' . $row['SystemID']]))\n\t\t\t\t\t{\n\t\t\t\t\t\t$group_string = null;\n\t\t\t\t\t\tforeach($_POST['groups_' . $row['SystemID']] as $group)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif($group != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$group_string .= '#' . $group . '#';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$stmt1 = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET Groups = :new_groups WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t\t\t\t\t$stmt1->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t$stmt1->bindValue(':system_id', $row['SystemID']);\n\t\t\t\t\t\t\t$stmt1->bindValue(':new_groups', $group_string);\n\t\t\t\t\t\t\t$stmt1->execute();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(!PHOROMATIC_USER_IS_VIEWER && isset($_POST['remove_group']))\n\t\t\t{\n\t\t\t\t$remove_group = pts_strings::sanitize($_POST['remove_group']);\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_groups WHERE AccountID = :account_id AND GroupName = :group_name');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':group_name', $remove_group);\n\t\t\t\t$stmt->execute();\n\t\t\t\tphoromatic_add_activity_stream_event('groups', $group, 'removed');\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT SystemID, Groups FROM phoromatic_systems WHERE AccountID = :account_id AND Groups LIKE \\'%#' . $remove_group . '#%\\'');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\twhile($row = $result->fetchArray())\n\t\t\t\t{\n\t\t\t\t\t$revised_groups = str_replace('#' . $remove_group . '#', '', $row['Groups']);\n\n\t\t\t\t\t$stmt1 = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET Groups = :new_groups WHERE AccountID = :account_id AND SystemID = :system_id');\n\t\t\t\t\t$stmt1->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$stmt1->bindValue(':system_id', $row['SystemID']);\n\t\t\t\t\t$stmt1->bindValue(':new_groups', $revised_groups);\n\t\t\t\t\t$stmt1->execute();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(!PHOROMATIC_USER_IS_VIEWER && isset($_POST['remove_inactive_systems']) && is_numeric($_POST['remove_inactive_systems']) && $_POST['remove_inactive_systems'] > 1)\n\t\t\t{\n\t\t\t\t// $_POST['remove_inactive_systems'] is number of days system is without activity before removing\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET State = :state WHERE AccountID = :account_id AND (julianday() - julianday(LastCommunication)) > :inactive_days_before_removal');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':state', -1);\n\t\t\t\t$stmt->bindValue(':inactive_days_before_removal', pts_strings::sanitize($_POST['remove_inactive_systems']));\n\t\t\t\t$stmt->execute();\n\t\t\t}\n\n\t\t\t$main = '<h1>Test Systems</h1>';\n\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t{\n\t\t\t\t$main .= phoromatic_systems_needing_attention();\n\t\t\t\t$main .= '<h2>Add A System</h2>\n\t\t\t\t<p>To connect a <a href=\"http://www.phoronix-test-suite.com/\">Phoronix Test Suite</a> test system to this account for remotely managing and/or carrying out routine automated benchmarking, follow these simple and quick steps:</p>\n\t\t\t\t<p>From a system with Phoronix Test Suite installed, run <strong>phoronix-test-suite phoromatic.connect ' . phoromatic_web_socket_server_addr() . '</strong>. (The test system must be able to access this server\\'s correct IP address / domain name.)</p><p>When you have run the command from the test system, you will need to log into this page on Phoromatic server again where you can approve the system and configure the system settings so you can begin using it as part of this Phoromatic account.</p><p>Repeat the two steps for as many systems as you would like. When you are all done -- if you haven\\'t done so already, you can start creating test schedules, groups, and other Phoromatic events.</p>\n\t\t\t\t<p>Those having to connect many Phoronix Test Suite Phoromatic clients can also attempt <a href=\"?system_claim\">adding the server configuration</a> via SSH or an IP/MAC address claim.</p>\n\t\t\t\t<p>The Phoronix Test Suite ships with a <em>phoromatic-client</em> systemd example service file for automatically starting the Phoromatic client process after the initial configuration process is complete.</p>\n\t\t\t\t<p><button onclick=\"javascript:window.location.replace(\\'?system_claim\\');\">Add Via SSH Or IP/MAC Claim</button></p>';\n\n\t\t\t}\n\n\t\t\t$main .= '<hr />\n\t\t\t<h2>Systems</h2>\n\t\t\t<div class=\"pts_phoromatic_info_box_area\">\n\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><h1>Active Systems</h1></li>';\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, LocalIP, CurrentTask, LastCommunication, EstimatedTimeForTask, TaskPercentComplete FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 ORDER BY LastCommunication DESC');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\t\t\t\t\t$active_system_count = 0;\n\n\t\t\t\t\tif($row == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Systems Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$acti = phoromatic_compute_estimated_time_remaining_string($row['EstimatedTimeForTask'], $row['LastCommunication']) . ($row['TaskPercentComplete'] > 0 ? ' [' . $row['TaskPercentComplete'] . '% Complete]' : null);\n\t\t\t\t\t\t\tif(empty($acti))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$next_job_in = phoromatic_server::time_to_next_scheduled_job($_SESSION['AccountID'], $row['SystemID']);\n\t\t\t\t\t\t\t\tif($next_job_in > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif($next_job_in > 600)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$next_job_in = round($next_job_in / 60);\n\t\t\t\t\t\t\t\t\t\t$next_unit = 'hours';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$next_unit = 'minutes';\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t$acti = 'Next job in ' . $next_job_in . ' ' . $next_unit;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$main .= '<a href=\"?systems/' . $row['SystemID'] . '\"><li>' . $row['Title'] . '<br /><table><tr><td>' . $row['LocalIP'] . '</td><td><strong>' . $row['CurrentTask'] . '</strong></td><td><strong>' . $acti . '</strong></td><td><strong>Last Communication:</strong> ' . date('j F Y H:i', strtotime($row['LastCommunication'])) . '</td></tr></table></li></a>';\n\t\t\t\t\t\t\t$active_system_count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t}\n\n\n\t\t\t$main .= '</ul>';\n\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, LocalIP, CurrentTask, LastCommunication, EstimatedTimeForTask, TaskPercentComplete FROM phoromatic_systems WHERE AccountID = :account_id AND State < 0 ORDER BY LastCommunication DESC');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$result = $stmt->execute();\n\t\t\t$row = $result->fetchArray();\n\n\t\t\tif($row != false)\n\t\t\t{\n\t\t\t\t$main .= '<ul>\n\t\t\t\t<li><h1>Inactive Systems</h1></li>';\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\t$main .= '<a href=\"?systems/' . $row['SystemID'] . '\"><li>' . $row['Title'] . '<br /><table><tr><td>' . $row['LocalIP'] . '</td><td><strong>' . $row['CurrentTask'] . '</strong></td><td><strong>Deactivated</strong></td><td><strong>Last Communication:</strong> ' . date('j F Y H:i', strtotime($row['LastCommunication'])) . '</td></tr></table></li></a>';\n\t\t\t\t}\n\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t$main .= '</ul>';\n\t\t\t}\n\n\t\t\t$main .= '</div>';\n\n\t\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t\t{\n\t\t\t\t$main .= '<hr />\n\t\t\t\t<h2>System Groups</h2>\n\t\t\t\t<p>System groups make it very easy to organize multiple test systems for targeting by test schedules. You can always add/remove systems to groups, create new groups, and add systems to multiple groups. After creating a group and adding systems to the group, you can begin targeting tests against a particular group of systems. Systems can always be added/removed from groups later and a system can belong to multiple groups.</p>';\n\n\n\t\t\t\t$main .= '<div style=\"float: left;\"><form name=\"new_group_form\" id=\"new_group_form\" action=\"?systems\" method=\"post\" onsubmit=\"return phoromatic_new_group(this);\">\n\t\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">New Group Name:</div> <input type=\"text\" style=\"width: 300px;\" name=\"new_group\" value=\"\" /></p>\n\t\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">Select System(s) To Add To Group:</div><select name=\"systems_for_group[]\" multiple=\"multiple\" style=\"width: 300px;\">';\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 ORDER BY Title ASC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\tif($row != false)\n\t\t\t\t{\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<option value=\"' . $row['SystemID'] . '\">' . $row['Title'] . '</option>';\n\t\t\t\t\t}\n\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t}\n\n\n\t\t\t\t$main .= '</select></p>\n\t\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">&nbsp;</div> <input type=\"submit\" value=\"Create Group\" /></p></form></div>';\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT GroupName FROM phoromatic_groups WHERE AccountID = :account_id ORDER BY GroupName ASC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\tif($row != false)\n\t\t\t\t{\n\t\t\t\t\t$main .= '<div style=\"float: left; margin-left: 90px;\"><h3>Current System Groups</h3>';\n\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$stmt_count = phoromatic_server::$db->prepare('SELECT COUNT(SystemID) AS system_count FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 AND Groups LIKE \\'%#' . $row['GroupName'] . '#%\\'');\n\t\t\t\t\t\t$stmt_count->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t$result_count = $stmt_count->execute();\n\t\t\t\t\t\t$row_count = $result_count->fetchArray();\n\t\t\t\t\t\t$row_count['system_count'] = isset($row_count['system_count']) ? $row_count['system_count'] : 0;\n\n\t\t\t\t\t\t$main .= '<div style=\"clear: both;\"><div style=\"width: 200px; float: left; font-weight: bold;\">' . $row['GroupName'] . '</div> ' . $row_count['system_count'] . ' System' . ($row_count['system_count'] != 1 ? 's' : '') . '</div>';\n\n\t\t\t\t\t}\n\t\t\t\t\twhile($row = $result->fetchArray());\n\n\t\t\t\t\t$main .= '</div>';\n\n\t\t\t\t\t$main .= '<hr /><a name=\"group_edit\"></a><h2>System Group Editing</h2><div style=\"text-align: center;\"><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_groups\" method=\"post\"><input type=\"hidden\" name=\"system_group_update\"  value=\"1\" />';\n\t\t\t\t\t$main .= '<table style=\"margin: 5px auto; overflow: auto;\">';\n\t\t\t\t\t$main .= '<tr>';\n\t\t\t\t\t$main .= '<th></th>';\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT GroupName FROM phoromatic_groups WHERE AccountID = :account_id ORDER BY GroupName ASC');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$all_groups = array();\n\t\t\t\t\twhile($row = $result->fetchArray())\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<th>' . $row['GroupName'] . '</th>';\n\t\t\t\t\t\tarray_push($all_groups, $row['GroupName']);\n\t\t\t\t\t}\n\n\t\t\t\t\t$main .= '</tr>';\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, Groups FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0 ORDER BY Title ASC');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\twhile($row = $result->fetchArray())\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<tr>';\n\t\t\t\t\t\t$main .= '<th>' . $row['Title'] . '</th>';\n\t\t\t\t\t\t$main .= '<input type=\"hidden\" name=\"groups_' . $row['SystemID'] . '[]\" value=\"\" />';\n\n\t\t\t\t\t\tforeach($all_groups as $group)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$checked = stripos($row['Groups'], '#' . $group . '#') !== false ? 'checked=\"checked\" ' : null;\n\t\t\t\t\t\t\t$main .= '<td><input type=\"checkbox\" name=\"groups_' . $row['SystemID'] . '[]\" value=\"' . $group . '\" ' . $checked . '/></td>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$main .= '</tr>';\n\t\t\t\t\t}\n\n\t\t\t\t\t$main .= '</table><p><input name=\"submit\" value=\"Update Groups\" type=\"submit\" /></p></form></div>';\n\t\t\t\t\t$main .= '<hr /><h2>Remove A Group</h2><p>Removing a group is a permanent action that cannot be undone.</p>';\n\t\t\t\t\t$main .= '<p><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"remove_group\" method=\"post\"><select name=\"remove_group\" id=\"remove_group\">';\n\n\t\t\t\t\tforeach($all_groups as $group)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<option value=\"' . $group . '\">' . $group . '</option>';\n\t\t\t\t\t}\n\t\t\t\t\t$main .= '</select> <input name=\"submit\" value=\"Remove Group\" type=\"submit\" /></form></p>';\n\t\t\t\t\t$main .= '<hr /><h2>Retire Inactive Systems</h2><p>This option will soft-delete systems that have not communicated with this Phoromatic Server in more than one week (7 days).</p>';\n\t\t\t\t\t$main .= '<p><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"remove_inactive\" method=\"post\"><input type=\"hidden\" name=\"remove_inactive_systems\" value=\"7\" /><input name=\"submit\" value=\"Remove Inactive Systems\" type=\"submit\" /></form></p>';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$right = '<ul><li>Active Systems</li>';\n\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID FROM phoromatic_systems WHERE AccountID = :account_id AND State > 0 ORDER BY Title ASC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\n\t\tif($row == false)\n\t\t{\n\t\t\t$right .= '</ul><p style=\"text-align: left; margin: 6px 10px;\">No Systems Found</p>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdo\n\t\t\t{\n\t\t\t\t$right .= '<li><a href=\"?systems/' . $row['SystemID'] . '\">' . $row['Title'] . '</a></li>';\n\t\t\t}\n\t\t\twhile($row = $result->fetchArray());\n\t\t\t$right .= '</ul>';\n\t\t}\n\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2016 - 2022, Phoronix Media\n\tCopyright (C) 2016 - 2022, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_testing implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Testing';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$main = null;\n\t\techo phoromatic_webui_header_logged_in();\n\n\t\t$main = '<h1>Phoromatic Testing Options</h1><h2>Test Schedules</h2>\n\t\t\t<p>Test schedules are used for tests that are intended to be run on a recurring basis -- either daily or other defined time period -- or whenever a trigger/event occurs, like a new Git commit to a software repository being tracked. Test schedules can be run on any given system(s)/group(s) and can be later edited.</p>';\n\n\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t{\n\t\t\t$main .= '\n\t\t\t<hr />\n\t\t\t<h2>Create A Schedule</h2>\n\t\t\t<p><a href=\"?sched\">Create a schedule</a> followed by adding tests/suites to run for that schedule on the selected systems.</p>';\n\t\t}\n\n\t\t$main .= '<hr /><h2>Current Schedules</h2>';\n\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">\n\t\t\t<ul>\n\t\t\t<li><h1>Active Test Schedules</h1></li>';\n\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, ScheduleID, Description, RunTargetSystems, RunTargetGroups, RunAt, ActiveOn FROM phoromatic_schedules WHERE AccountID = :account_id AND State >= 1 ORDER BY Title ASC');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\n\t\tif($row == false)\n\t\t{\n\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Schedules Found</li>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdo\n\t\t\t{\n\t\t\t\t$stmt_tests = phoromatic_server::$db->prepare('SELECT COUNT(*) AS TestCount FROM phoromatic_schedules_tests WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY TestProfile ASC');\n\t\t\t\t$stmt_tests->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt_tests->bindValue(':schedule_id', $row['ScheduleID']);\n\t\t\t\t$result_tests = $stmt_tests->execute();\n\t\t\t\t$row_tests = $result_tests->fetchArray();\n\t\t\t\t$test_count = !empty($row_tests) ? $row_tests['TestCount'] : 0;\n\n\t\t\t\t$group_count = empty($row['RunTargetGroups']) ? 0 : count(explode(',', $row['RunTargetGroups']));\n\t\t\t\t$main .= '<a href=\"?schedules/' . $row['ScheduleID'] . '\"><li>' . $row['Title'] . '<br /><table><tr><td>' . pts_strings::plural_handler(count(phoromatic_server::systems_associated_with_schedule($_SESSION['AccountID'], $row['ScheduleID'])), 'System') . '</td><td>' . pts_strings::plural_handler($group_count, 'Group') . '</td><td>' . pts_strings::plural_handler($test_count, 'Test') . '</td><td>' . pts_strings::plural_handler(phoromatic_results_for_schedule($row['ScheduleID']), 'Result') . ' Total</td><td>' . pts_strings::plural_handler(phoromatic_results_for_schedule($row['ScheduleID'], 'TODAY'), 'Result') . ' Today</td><td><strong>' . phoromatic_schedule_activeon_string($row['ActiveOn'], $row['RunAt']) . '</strong></td></tr></table></li></a>';\n\t\t\t}\n\t\t\twhile($row = $result->fetchArray());\n\t\t}\n\n\t\t$main .= '</ul>\n\t\t</div>';\n\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_benchmark_tickets WHERE AccountID = :account_id AND State >= 0 AND TicketIssueTime > :time_cutoff ORDER BY TicketIssueTime DESC LIMIT 30');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$stmt->bindValue(':time_cutoff', (time() - (60 * 60 * 24 * 14)));\n\t\t$result = $stmt->execute();\n\t\t$right = '<ul><li>Benchmark Tickets</li>';\n\n\t\tif($result)\n\t\t{\n\t\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\">\n\t\t\t\t<ul>\n\t\t\t\t<li><h1>Active Benchmark Tickets</h1></li>';\n\n\t\t\t$row = $result->fetchArray();\n\n\t\t\tif(!empty($row))\n\t\t\t{\n\t\t\t\tdo\n\t\t\t\t{\n\t\t\t\t\t$main .= '<a href=\"?benchmark/' . $row['TicketID'] . '\"><li>' . $row['Title'] . '</li></a>';\n\t\t\t\t}\n\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Tickets Found</li>';\t\n\t\t\t}\n\t\t}\n\t\t$main .= '</ul>\n\t\t</div>';\n\n\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t{\n\t\t\t$main .= '\n\t\t\t<hr />\n\t\t\t<h2>Run A Benchmark</h2>\n\t\t\t<p><a href=\"?benchmark\">Run a benchmark</a> is the area where you can run a one-time benchmark on selected system(s) and is also where to go for setting up a stress-run benchmark.</p>\n\t\t\t<hr />\n\t\t\t<h2>Create A Suite</h2>\n\t\t\t<p><a href=\"?build_suite\">Build a suite</a>, which is a collection of predefined test profiles.</p>\n\t\t\t<hr />\n\t\t\t<h2>View Local Suites</h2>\n\t\t\t<p><a href=\"?local_suites\">See local suites</a> available for your benchmarking needs.</p>';\n\t\t}\n\n\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2015 - 2021, Phoronix Media\n\tCopyright (C) 2015 - 2021, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_tests implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Tests';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$main = null;\n\t\t$identifier_item = isset($PATH[1]) ? $PATH[0] . '/' . $PATH[1] : false;\n\n\t\tif($identifier_item && pts_test_profile::is_test_profile($identifier_item))\n\t\t{\n\t\t\t$tp = new pts_test_profile($identifier_item);\n\t\t\t$tp_identifier = $tp->get_identifier(false);\n\t\t\t$main .= pts_web_embed::test_profile_overview($tp);\n\t\t\t$main .= '<h2>Recent Results With This Test</h2>';\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, PPRID FROM phoromatic_results WHERE AccountID = :account_id AND UploadID IN (SELECT DISTINCT UploadID FROM phoromatic_results_results WHERE AccountID = :account_id AND TestProfile LIKE :tp) ORDER BY UploadTime DESC LIMIT 30');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':tp', $tp_identifier . '%');\n\t\t\t$result = $stmt->execute();\n\t\t\t$recent_result_count = 0;\n\t\t\twhile($result && $row = $result->fetchArray())\n\t\t\t{\n\t\t\t\t$recent_result_count++;\n\t\t\t\t$main .= '<h2><a href=\"/?result/' . $row['PPRID'] . '\">' . $row['Title'] . '</a></h2>';\n\t\t\t}\n\n\t\t\tif($recent_result_count == 0)\n\t\t\t{\n\t\t\t\t$main .= '<p>No results found on this Phoromatic Server for the ' . $tp->get_title() . ' test profile.</p>';\n\t\t\t}\n\t\t\telse if(false && $recent_result_count > 5)\n\t\t\t{\n\t\t\t\t// TODO XXX below code is borked\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT UploadID, SystemID, UploadTime FROM phoromatic_results WHERE AccountID = :account_id AND UploadID IN (SELECT DISTINCT UploadID FROM phoromatic_results_results WHERE AccountID = :account_id AND TestProfile LIKE :tp) ORDER BY UploadTime DESC LIMIT 1000');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':tp', $tp_identifier . '%');\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$recent_result_count = 0;\n\t\t\t\t$result_file = new pts_result_file(null, true);\n\t\t\t\twhile($result && $row = $result->fetchArray())\n\t\t\t\t{\n\t\t\t\t\t$composite_xml = phoromatic_server::phoromatic_account_result_path($_SESSION['AccountID'], $row['UploadID']) . 'composite.xml';\n\t\t\t\t\tif(!is_file($composite_xml))\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add to result file\n\t\t\t\t\t$system_name = strtotime($row['UploadTime']) . ': ' . phoromatic_server::system_id_to_name($row['SystemID']);\n\t\t\t\t\t$sub_result_file = new pts_result_file($composite_xml, true);\n\t\t\t\t\tforeach($sub_result_file->get_result_objects() as $obj)\n\t\t\t\t\t{\n\t\t\t\t\t\tif($obj->test_profile->get_identifier(false) == $tp_identifier)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$obj->test_result_buffer->rename(null, $system_name);\n\t\t\t\t\t\t\t$result_file->add_result($obj);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$table = null;\n\t\t\t\t$extra_attributes = array('multi_way_comparison_invert_default' => false);\n\t\t\t\t$f = false;\n\t\t\t\tforeach($result_file->get_result_objects() as $obj)\n\t\t\t\t{\n\t\t\t\t\t$obj->test_profile->set_display_format('SCATTER_PLOT');\n\n\t\t\t\t\tforeach($obj->test_result_buffer->buffer_items as $i => &$item)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!is_numeric(substr($item->get_result_identifier(), 0, strpos($item->get_result_identifier(), ':'))))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tunset($obj->test_result_buffer->buffer_items[$i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$result_file = null;\n\t\t\t\t\t$main .= '<p align=\"center\">' . pts_render::render_graph_inline_embed($obj, $result_file, $extra_attributes) . '</p>';\n\t\t\t\t}\n\n\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$dc = pts_client::download_cache_path();\n\t\t\t$dc_exists = is_file($dc . 'pts-download-cache.json');\n\t\t\tif($dc_exists)\n\t\t\t{\n\t\t\t\t$cache_json = file_get_contents($dc . 'pts-download-cache.json');\n\t\t\t\t$cache_json = json_decode($cache_json, true);\n\t\t\t}\n\n\t\t\t$tests_to_show = array();\n\t\t\tforeach(array_merge(pts_tests::local_tests(), pts_openbenchmarking::available_tests(false)) as $test)\n\t\t\t{\n\t\t\t\t$cache_checked = false;\n\t\t\t\tif($dc_exists)\n\t\t\t\t{\n\t\t\t\t\tif($cache_json && isset($cache_json['phoronix-test-suite']['cached-tests']))\n\t\t\t\t\t{\n\t\t\t\t\t\t$cache_checked = true;\n\t\t\t\t\t\tif(!in_array($test, $cache_json['phoronix-test-suite']['cached-tests']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//continue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!$cache_checked && phoromatic_server::read_setting('show_local_tests_only') && pts_test_install_request::test_files_available_on_local_system($test) == false)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$tp = new pts_test_profile($test);\n\n\t\t\t\tif($tp->get_title() == null)\n\t\t\t\t\tcontinue;\n\n\t\t\t\t$tests_to_show[] = $tp;\n\t\t\t}\n\t\t\t$main .= pts_web_embed::tests_list($tests_to_show);\n\t\t}\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2016, Phoronix Media\n\tCopyright (C) 2014 - 2016, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\nclass phoromatic_tracker implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Result Tracker';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\techo phoromatic_webui_header_logged_in();\n\t\t$main = null;\n\n\t\tif(isset($PATH[0]) && !empty($PATH[0]))\n\t\t{\n\t\t\tini_set('memory_limit', '4G');\n\t\t\tif(isset($_POST['view_results_from_past']) && is_numeric($_POST['view_results_from_past']))\n\t\t\t{\n\t\t\t\t$cut_duration = $_POST['view_results_from_past'];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$cut_duration = 21;\n\t\t\t}\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT UploadID, UploadTime, ScheduleID, Trigger, SystemID FROM phoromatic_results WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY UploadTime DESC');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':schedule_id', $PATH[0]);\n\t\t\t$test_result_result = $stmt->execute();\n\t\t\t$cutoff_time = is_numeric($cut_duration) ? strtotime('today -' . $cut_duration . ' days') : false;\n\n\t\t\t$result_files = array();\n\t\t\twhile($test_result_result && $row = $test_result_result->fetchArray())\n\t\t\t{\n\t\t\t\tif($cutoff_time !== false && strtotime($row['UploadTime']) < $cutoff_time)\n\t\t\t\t\tbreak;\n\n\t\t\t\t$composite_xml = phoromatic_server::phoromatic_account_result_path($_SESSION['AccountID'], $row['UploadID']) . 'composite.xml';\n\t\t\t\tif(!is_file($composite_xml))\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Add to result file\n\t\t\t\t$system_name = phoromatic_server::system_id_to_name($row['SystemID']) . ': ' . $row['Trigger'];\n\t\t\t\t$rf = new pts_result_file($composite_xml);\n\t\t\t\t$rf->rename_run(null, $system_name);\n\t\t\t\t$result_files[] = $rf;\n\t\t\t}\n\n\t\t\t$attributes = array('new_result_file_title' => phoromatic_schedule_id_to_name($row['ScheduleID']));\n\t\t\t$result_file = new pts_result_file(null, true);\n\t\t\t$result_file->merge($result_files, $attributes);\n\t\t\t$extra_attributes = array('reverse_result_buffer' => true, 'force_simple_keys' => true, 'force_line_graph_compact' => true, 'force_tracking_line_graph' => true);\n\n\t\t\tif(isset($_POST['normalize_results']) && $_POST['normalize_results'])\n\t\t\t{\n\t\t\t\t$extra_attributes['normalize_result_buffer'] = true;\n\t\t\t}\n\n\n\t\t\t$main .= '<h1>' . $result_file->get_title() . '</h1>';\n\n\t\t\tif($result_file->get_system_count() == 1 || ($intent = pts_result_file_analyzer::analyze_result_file_intent($result_file, $intent, true)))\n\t\t\t{\n\t\t\t\t$table = new pts_ResultFileCompactSystemsTable($result_file, $intent);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$table = new pts_ResultFileSystemsTable($result_file);\n\t\t\t}\n\n\t\t\t$main .= '<p style=\"text-align: center; overflow: auto;\" class=\"result_object\">' . pts_render::render_graph_inline_embed($table, $result_file, $extra_attributes) . '</p>';\n\n\t\t\t$table = new pts_ResultFileTable($result_file, $intent);\n\t\t\t$main .= '<p style=\"text-align: center; overflow: auto;\" class=\"result_object\">' . pts_render::render_graph_inline_embed($table, $result_file, $extra_attributes) . '</p>';\n\n\t\t\t$main .= '<div id=\"pts_results_area\">';\n\t\t\tforeach($result_file->get_result_objects((isset($_POST['show_only_changed_results']) ? 'ONLY_CHANGED_RESULTS' : -1)) as $i => $result_object)\n\t\t\t{\n\t\t\t\t$res = pts_render::render_graph_inline_embed($result_object, $result_file, $extra_attributes);\n\t\t\t\t$main .= '<h2><a name=\"r-' . $i . '\"></a><a name=\"' . $result_object->get_comparison_hash(true, false) . '\"></a>' . $result_object->test_profile->get_title() . '</h2>';\n\t\t\t\t$main .= '<p class=\"result_object\">';\n\t\t\t\t$main .= $res;\n\t\t\t\t$main .= '</p>';\n\t\t\t}\n\t\t\t$main .= '</div>';\n\n\t\t\t$right = '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"update_result_view\" method=\"post\">';\n\t\t\t$right .= '<p>Compare results for the past: ';\n\t\t\t$right .= '<select name=\"view_results_from_past\" id=\"view_results_from_past\">';\n\t\t\t$oldest_upload_time = strtotime(phoromatic_oldest_result_for_schedule($PATH[0]));\n\t\t\t$opts = array(\n\t\t\t\t'Two Weeks' => 14,\n\t\t\t\t'Three Weeks' => 21,\n\t\t\t\t'One Month' => 30,\n\t\t\t\t'Two Months' => 60,\n\t\t\t\t'Quarter' => 90,\n\t\t\t\t'Six Months' => 180,\n\t\t\t\t'Year' => 365,\n\t\t\t\t);\n\t\t\tforeach($opts as $str_name => $time_offset)\n\t\t\t{\n\t\t\t\tif($oldest_upload_time > (time() - (86400 * $time_offset)))\n\t\t\t\t\tbreak;\n\t\t\t\t$right .= '<option value=\"' . $time_offset . '\">' . $str_name . '</option>';\n\t\t\t}\n\t\t\t$right .= '<option value=\"all\">All Results</option>';\n\t\t\t$right .= '</select>';\n\t\t\t$right .= '</p>';\n\t\t\t$right .= '<p><input type=\"checkbox\" name=\"normalize_results\" value=\"1\" ' . (isset($_POST['normalize_results']) ? 'checked=\"checked\" ' : null) . '/> Normalize Results?</p>';\n\t\t\t$right .= '<p><input type=\"submit\" value=\"Refresh Results\"></p></form>';\n\n\t\t}\n\t\telse if(empty($PATH))\n\t\t{\n\t\t\t$main .= '<h1>Phoromatic Tracker</h1>\n\t\t\t\t\t<p>The Phoromatic Tracker will show result schedules that have enough uploaded test results from the associated systems to begin providing concise overviews of performance over time.</p>\n\t\t\t\t\t<div class=\"pts_phoromatic_info_box_area\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><h1>Trackable Results</h1></li>';\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, ScheduleID, Description, RunTargetSystems, RunTargetGroups, RunAt, ActiveOn, (SELECT COUNT(*) FROM phoromatic_results WHERE ScheduleID = phoromatic_schedules.ScheduleID) AS UploadedResultCount FROM phoromatic_schedules WHERE AccountID = :account_id AND State >= 1 ORDER BY Title ASC');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\t\tif($row == false)\n\t\t\t\t\t{\n\t\t\t\t\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Relevant Schedules Found</li>';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif($row['UploadedResultCount'] > (($row['RunTargetSystems'] + $row['RunTargetGroups'] + 1) * 7))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$stmt_tests = phoromatic_server::$db->prepare('SELECT COUNT(*) AS TestCount FROM phoromatic_schedules_tests WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY TestProfile ASC');\n\t\t\t\t\t\t\t\t$stmt_tests->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t\t\t\t$stmt_tests->bindValue(':schedule_id', $row['ScheduleID']);\n\t\t\t\t\t\t\t\t$result_tests = $stmt_tests->execute();\n\t\t\t\t\t\t\t\t$row_tests = $result_tests->fetchArray();\n\t\t\t\t\t\t\t\t$test_count = !empty($row_tests) ? $row_tests['TestCount'] : 0;\n\n\t\t\t\t\t\t\t\t$group_count = empty($row['RunTargetGroups']) ? 0 : count(explode(',', $row['RunTargetGroups']));\n\t\t\t\t\t\t\t\t$main .= '<a href=\"?tracker/' . $row['ScheduleID'] . '\"><li>' . $row['Title'] . '<br /><table><tr><td>' . pts_strings::plural_handler(count(phoromatic_server::systems_associated_with_schedule($_SESSION['AccountID'], $row['ScheduleID'])), 'System') . '</td><td>' . pts_strings::plural_handler($group_count, 'Group') . '</td><td>' . pts_strings::plural_handler($test_count, 'Test') . '</td><td>' . pts_strings::plural_handler($row['UploadedResultCount'], 'Result') . ' Total</td></tr></table></li></a>';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t}\n\n\t\t\t$main .= '</ul>\n\t\t\t</div>';\n\t\t\t$right = null;\n\t\t}\n\n\t\techo phoromatic_webui_main($main, $right);\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2014 - 2022, Phoronix Media\n\tCopyright (C) 2014 - 2022, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_users implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Account Administrator';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\tif($_SESSION['AdminLevel'] > 3)\n\t\t{\n\t\t\techo phoromatic_error_page('Unauthorized Access', 'You aren\\'t an account administrator!');\n\t\t\treturn;\n\t\t}\n\n\t\tif(isset($_POST['group_name']))\n\t\t{\n\t\t\tphoromatic_quit_if_invalid_input_found(array('group_name'));\n\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_accounts SET GroupName = :group_name WHERE AccountID = :account_id');\n\t\t\t$stmt->bindValue(':group_name', pts_strings::simple($_POST['group_name']));\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$result = $stmt->execute();\n\t\t}\n\t\tif(isset($_POST['username']) && isset($_POST['password']) && isset($_POST['confirm_password']) && isset($_POST['email']))\n\t\t{\n\t\t\tphoromatic_quit_if_invalid_input_found(array('username', 'email'));\n\t\t\t// REGISTER NEW USER\n\t\t\tif(strlen($_POST['username']) < 4 || strpos($_POST['username'], ' ') !== false)\n\t\t\t{\n\t\t\t\tphoromatic_error_page('Oops!', 'Please go back and ensure the supplied username is at least four characters long and contains no spaces.');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(in_array(strtolower($_POST['username']), array('admin', 'administrator')))\n\t\t\t{\n\t\t\t\tphoromatic_error_page('Oops!', $_POST['username'] . ' is a reserved and common username that may be used for other purposes, please make a different selection.');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(strlen($_POST['password']) < 6)\n\t\t\t{\n\t\t\t\tphoromatic_error_page('Oops!', 'Please go back and ensure the supplied password is at least six characters long.');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif($_POST['password'] != $_POST['confirm_password'])\n\t\t\t{\n\t\t\t\tphoromatic_error_page('Oops!', 'Please go back and ensure the supplied password matches the password confirmation.');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif($_POST['email'] == null || filter_var($_POST['email'], FILTER_VALIDATE_EMAIL) == false)\n\t\t\t{\n\t\t\t\tphoromatic_error_page('Oops!', 'Please enter a valid email address.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$valid_user_name_chars = '1234567890-_.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\t\t\tfor($i = 0; $i < count($_POST['username']); $i++)\n\t\t\t{\n\t\t\t\tif(strpos($valid_user_name_chars, substr($_POST['username'], $i, 1)) === false)\n\t\t\t\t{\n\t\t\t\t\tphoromatic_error_page('Oops!', 'Please go back and ensure a valid user-name. The character <em>' . substr($_POST['username'], $i, 1) . '</em> is not allowed.');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$matching_users = phoromatic_server::$db->querySingle('SELECT UserName FROM phoromatic_users WHERE UserName = \\'' . SQLite3::escapeString($_POST['username']) . '\\'');\n\t\t\tif(!empty($matching_users))\n\t\t\t{\n\t\t\t\tphoromatic_error_page('Oops!', 'The user-name is already taken.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif(!isset($_POST['admin_level']) || $_POST['admin_level'] == 1 || !is_numeric($_POST['admin_level']))\n\t\t\t{\n\t\t\t\tphoromatic_error_page('Oops!', 'Invalid administration level.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Salt FROM phoromatic_accounts WHERE AccountID = :account_id');\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$result = $stmt->execute();\n\t\t\t$row = $result->fetchArray();\n\t\t\t$account_salt = $row['Salt'];\n\t\t\t$user_id = pts_strings::random_characters(4, true);\n\t\t\t$salted_password = hash('sha256', $account_salt . $_POST['password']);\n\n\t\t\tpts_logger::add_to_log($_SERVER['REMOTE_ADDR'] . ' created a new account: ' . $user_id . ' - ' . $_SESSION['AccountID']);\n\n\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_users (UserID, AccountID, UserName, Email, Password, CreatedOn, LastIP, AdminLevel) VALUES (:user_id, :account_id, :user_name, :email, :password, :current_time, :last_ip, :admin_level)');\n\t\t\t$stmt->bindValue(':user_id', $user_id);\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$stmt->bindValue(':user_name', $_POST['username']);\n\t\t\t$stmt->bindValue(':email', $_POST['email']);\n\t\t\t$stmt->bindValue(':password', $salted_password);\n\t\t\t$stmt->bindValue(':last_ip', $_SERVER['REMOTE_ADDR']);\n\t\t\t$stmt->bindValue(':current_time', phoromatic_server::current_time());\n\t\t\t$stmt->bindValue(':admin_level', $_POST['admin_level']);\n\t\t\t$result = $stmt->execute();\n\n\t\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_user_settings (UserID, AccountID) VALUES (:user_id, :account_id)');\n\t\t\t$stmt->bindValue(':user_id', $user_id);\n\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t$result = $stmt->execute();\n\n\t\t\tphoromatic_add_activity_stream_event('users', $_POST['username'], 'added');\n\t\t}\n\t\tif($_SESSION['AdminLevel'] == 1 && isset($_POST['update_user_levels']))\n\t\t{\n\t\t\tforeach(explode(',', $_POST['update_user_levels']) as $user_id)\n\t\t\t{\n\t\t\t\tif(isset($_POST['admin_level_' . $user_id]) && is_numeric($_POST['admin_level_' . $user_id]))\n\t\t\t\t{\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_users SET AdminLevel = :admin_level WHERE AccountID = :account_id AND UserID = :user_id');\n\t\t\t\t\t$stmt->bindValue(':admin_level', $_POST['admin_level_' . $user_id]);\n\t\t\t\t\t$stmt->bindValue(':user_id', $user_id);\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$main = '<h2>Users</h2>\n\t\t\t<p>Users associated with this account. Phoromatic users can be one of several tiers with varying privileges:</p>\n\t\t\t<ol>\n\t\t\t\t<li><strong>Group Administrator:</strong> The user with full control over the account, the one who originally signed up for the Phoromatic account.</li>\n\t\t\t\t<li><strong>Administrator:</strong> Additional users created by the group administrator with the same access rights as the group administrator.</li>\n\t\t\t\t<li><strong>Power Users:</strong> Additional users created by the group administrator with read/write/modify access to all standard Phoromatic functionality, aside from being able to create additional users.</li>\n\t\t\t\t<li><strong>Viewer:</strong> Additional users created by the group administrator that have access to view data but not to create new schedules, alter system settings, etc.</li>\n\t\t\t</ol>\n\t\t\t<div class=\"pts_phoromatic_info_box_area\">\n\n\t\t\t\t<div style=\"margin: 0 1%;\"><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"edit_user\" id=\"edit_user\" method=\"post\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><h1>All Users</h1></li>';\n\n\t\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_users WHERE AccountID = :account_id ORDER BY UserName ASC');\n\t\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t\t$result = $stmt->execute();\n\t\t\t\t\t$row = $result->fetchArray();\n\t\t\t\t\t$user_ids = array();\n\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\tswitch($row['AdminLevel'])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t$level = 'Group Administrator';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t$level = 'Administrator';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t$level = 'Power User';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 10:\n\t\t\t\t\t\t\t\t$level = 'Viewer';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tif($row['AdminLevel'] < 1)\n\t\t\t\t\t\t\t\t\t$level = 'Disabled';\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t$level = 'Unknown';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$main .= '<a href=\"#\"><li>' . $row['UserName'] . '<br /><table><tr><td>';\n\n\t\t\t\t\t\tif($row['AdminLevel'] == 1 || $_SESSION['AdminLevel'] != 1)\n\t\t\t\t\t\t\t$main .= '<strong>' . $level . '</strong>';\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$main .= '<select name=\"admin_level_' . $row['UserID'] . '\">';\n\n\t\t\t\t\t\t\tforeach(array(($row['AdminLevel'] * -1) => 'Disabled', 2 => 'Administrator', 3 => 'Power User', 10 => 'Viewer') as $level_id => $level_string)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$main .= '<option value=\"' . $level_id . '\"' . ($row['AdminLevel'] == $level_id ? ' selected=\"selected\"' : null) . '>' . $level_string . '</option>';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$main .= '</select>';\n\t\t\t\t\t\t\tarray_push($user_ids, $row['UserID']);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$main .= '</td><td>Last Login: ' . (empty($row['LastLogin']) ? 'Never' : date('j F Y H:i', strtotime($row['LastLogin']))) . '</td></tr></table></li></a>';\n\t\t\t\t\t}\n\t\t\t\t\twhile($row = $result->fetchArray());\n\n\n\t\t\t$main .= '</ul> &nbsp; <input type=\"hidden\" name=\"update_user_levels\" value=\"' . implode(',', $user_ids) . '\" /> <input name=\"submit\" value=\"Update User Levels\" type=\"submit\" /></form>\n\t\t\t\t</div>\n\t\t\t</div>';\n\n\t\t$main .= '<hr /><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"add_user\" id=\"add_user\" method=\"post\" onsubmit=\"return validate_new_user();\"><h2>Create Additional Account</h2>\n\t\t\t<p>Administrators can create extra accounts to be associated with this account\\'s systems, schedules, and test data.</p>\n\t\t\t<h3>User</h3>\n\t\t\t<p><input type=\"text\" name=\"username\" /></p>\n\t\t\t<h3>Password</h3>\n\t\t\t<p><input type=\"password\" name=\"password\" /></p>\n\t\t\t<h3>Confirm Password</h3>\n\t\t\t<p><input type=\"password\" name=\"confirm_password\" /></p>\n\t\t\t<h3>Email</h3>\n\t\t\t<p><input type=\"text\" name=\"email\" /></p>\n\t\t\t<h3>Administration Level</h3>\n\t\t\t<p><select name=\"admin_level\">';\n\n\t\tif($_SESSION['AdminLevel'] == 1)\n\t\t\t$main .= '<option value=\"2\">Administrator</option>';\n\n\t\tif($_SESSION['AdminLevel'] <= 2)\n\t\t\t$main .= '<option value=\"3\">Power User</option>';\n\t\tif($_SESSION['AdminLevel'] <= 3)\n\t\t\t$main .= '<option value=\"10\">Viewer</option>';\n\n\t\t$main .= '\n\t\t\t</select></p>\n\t\t\t<p><input name=\"submit\" value=\"Add User\" type=\"submit\" /></p>\n\t\t\t</form>';\n\n\t\t$group_name = phoromatic_server::account_id_to_group_name($_SESSION['AccountID']);\n\t\t$main .= '<hr /><form action=\"' . $_SERVER['REQUEST_URI'] . '\" name=\"group_name\" id=\"group_name\" method=\"post\"><h2>Group Name</h2>\n\t\t\t<p>A group name is an alternative, user-facing name for this set of accounts. The group name feature is primarily useful for being able to better distinguish results between groups when sharing of data within a large organization, etc. The group name is showed next to test results when viewing results from multiple groups/accounts.</p>\n\t\t\t<h3>Group Name</h3>\n\t\t\t<p><input type=\"text\" name=\"group_name\" value=\"' . $group_name . '\" /></p>\n\t\t\t<p><input name=\"submit\" value=\"Update Group Name\" type=\"submit\" /></p>\n\t\t\t</form>';\n\n\t\techo phoromatic_webui_header_logged_in();\n\t\techo '<div id=\"pts_phoromatic_main_area\">' . $main . '</div>';\n\t\techo phoromatic_webui_footer();\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2022, Phoronix Media\n\tCopyright (C) 2008 - 2022, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nclass phoromatic_welcome implements pts_webui_interface\n{\n\tpublic static function page_title()\n\t{\n\t\treturn 'Welcome';\n\t}\n\tpublic static function page_header()\n\t{\n\t\treturn null;\n\t}\n\tpublic static function preload($PAGE)\n\t{\n\t\treturn true;\n\t}\n\tpublic static function render_page_process($PATH)\n\t{\n\t\t$account_creation_string = phoromatic_server::read_setting('account_creation_alt');\n\t\t$account_creation_enabled = $account_creation_string == null;\n\n\t\tif($account_creation_enabled && isset($_POST['register_username']) && isset($_POST['register_password']) && isset($_POST['register_password_confirm']) && isset($_POST['register_email']))\n\t\t{\n\t\t\tphoromatic_quit_if_invalid_input_found(array('register_username', 'register_email'));\n\t\t\t$new_account = create_new_phoromatic_account($_POST['register_username'], $_POST['register_password'], $_POST['register_password_confirm'], $_POST['register_email'], (isset($_POST['seed_accountid']) ? $_POST['seed_accountid'] : null));\n\n\t\t\tif($new_account)\n\t\t\t{\n\t\t\t\techo phoromatic_webui_header(array('Account Created'), '');\n\t\t\t\t$box = '<h1>Account Created</h1>\n\t\t\t\t<p>Your account has been created. You may now log-in to begin utilizing the Phoronix Test Suite\\'s Phoromatic.</p>\n\t\t\t\t<form name=\"login_form\" id=\"login_form\" action=\"?login\" method=\"post\" onsubmit=\"return phoromatic_login(this);\">\n\t\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">User:</div> <input type=\"text\" name=\"username\" /></p>\n\t\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">Password:</div> <input type=\"password\" name=\"password\" /></p>\n\t\t\t\t<p><div style=\"width: 200px; font-weight: bold; float: left;\">&nbsp;</div> <input type=\"submit\" value=\"Submit\" /></p>\n\t\t\t\t</form>';\n\t\t\t\techo phoromatic_webui_box($box);\n\t\t\t\techo phoromatic_webui_footer();\n\t\t\t}\n\t\t}\n\t\telse if(isset($_POST['username']) && isset($_POST['password']) && strtolower($_POST['username']) == 'rootadmin')\n\t\t{\n\t\t\tphoromatic_quit_if_invalid_input_found(array('username'));\n\t\t\t$admin_pw = phoromatic_server::read_setting('root_admin_pw');\n\t\t\tif(empty($admin_pw))\n\t\t\t{\n\t\t\t\techo phoromatic_webui_header(array('Action Required'), '');\n\t\t\t\t$box = '<h1>Root Admin Password Not Set</h1>\n\t\t\t\t<p>The root admin password has not yet been set for this system. It can be set by running on the system: <strong>phoronix-test-suite phoromatic.set-root-admin-password</strong>.</p>';\n\t\t\t\techo phoromatic_webui_box($box);\n\t\t\t\techo phoromatic_webui_footer();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(hash('sha256', 'PTS' . $_POST['password']) != $admin_pw)\n\t\t\t{\n\t\t\t\techo phoromatic_webui_header(array('Invalid Password'), '');\n\t\t\t\t$box = '<h1>Root Admin Password Incorrect</h1>\n\t\t\t\t<p>The root admin password is incorrect.</p>';\n\t\t\t\techo phoromatic_webui_box($box);\n\t\t\t\techo phoromatic_webui_footer();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsession_regenerate_id();\n\t\t\t\t$_SESSION['UserID'] = 0;\n\t\t\t\t$_SESSION['UserName'] = 'RootAdmin';\n\t\t\t\t$_SESSION['AccountID'] = 0;\n\t\t\t\t$_SESSION['AdminLevel'] = -40;\n\t\t\t\t$_SESSION['CreatedOn'] = null;\n\t\t\t\t$_SESSION['CoreVersionOnSignOn'] = PTS_CORE_VERSION;\n\t\t\t\tsession_write_close();\n\t\t\t\theader('Location: /?admin');\n\t\t\t}\n\t\t}\n\t\telse if(isset($_POST['username']) && isset($_POST['password']))\n\t\t{\n\t\t\tphoromatic_quit_if_invalid_input_found(array('username'));\n\t\t\t$matching_user = phoromatic_server::$db->querySingle('SELECT UserName, Password, AccountID, UserID, AdminLevel, CreatedOn FROM phoromatic_users WHERE UserName = \\'' . SQLite3::escapeString($_POST['username']) . '\\'', true);\n\t\t\tif(!empty($matching_user))\n\t\t\t{\n\t\t\t\t$user_id = $matching_user['UserID'];\n\t\t\t\t$created_on = $matching_user['CreatedOn'];\n\t\t\t\t$user = $matching_user['UserName'];\n\t\t\t\t$hashed_password = $matching_user['Password'];\n\t\t\t\t$account_id = $matching_user['AccountID'];\n\t\t\t\t$admin_level = $matching_user['AdminLevel'];\n\n\t\t\t\tif($admin_level < 1)\n\t\t\t\t{\n\t\t\t\t\tpts_logger::add_to_log($_SERVER['REMOTE_ADDR'] . ' attempted to log-in to a disabled account: ' . $_POST['username']);\n\t\t\t\t\tphoromatic_error_page('Disabled Account', 'The log-in is not possible as this account has been disabled.');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif($user == $_POST['username'])\n\t\t\t\t{\n\t\t\t\t\t$account_salt = phoromatic_server::$db->querySingle('SELECT Salt FROM phoromatic_accounts WHERE AccountID = \\'' . $account_id . '\\'');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$account_salt = null;\n\t\t\t\t}\n\n\t\t\t\tif($account_salt != null && hash('sha256', $account_salt . $_POST['password']) == $hashed_password)\n\t\t\t\t{\n\t\t\t\t\tsession_regenerate_id();\n\t\t\t\t\t$_SESSION['UserID'] = $user_id;\n\t\t\t\t\t$_SESSION['UserName'] = $user;\n\t\t\t\t\t$_SESSION['AccountID'] = $account_id;\n\t\t\t\t\t$_SESSION['AdminLevel'] = $admin_level;\n\t\t\t\t\t$_SESSION['CreatedOn'] = $created_on;\n\t\t\t\t\t$_SESSION['CoreVersionOnSignOn'] = PTS_CORE_VERSION;\n\t\t\t\t\t$account_salt = phoromatic_server::$db->exec('UPDATE phoromatic_users SET LastIP = \\'' . $_SERVER['REMOTE_ADDR'] . '\\', LastLogin = \\'' . phoromatic_server::current_time() . '\\' WHERE UserName = \"' . $matching_user['UserName'] . '\"');\n\t\t\t\t\tsession_write_close();\n\n\t\t\t\t\tpts_file_io::mkdir(phoromatic_server::phoromatic_account_path($account_id));\n\t\t\t\t\tpts_file_io::mkdir(phoromatic_server::phoromatic_account_result_path($account_id));\n\t\t\t\t\tpts_file_io::mkdir(phoromatic_server::phoromatic_account_system_path($account_id));\n\t\t\t\t\tpts_file_io::mkdir(phoromatic_server::phoromatic_account_suite_path($account_id));\n\n\t\t\t\t\techo phoromatic_webui_header(array('Welcome, ' . $user), '');\n\t\t\t\t\t$box = '<h1>Log-In Successful</h1>\n\t\t\t\t\t<p><strong>' . $user . '</strong>, we are now redirecting you to your account portal. If you are not redirected within a few seconds, please <a href=\"?main\">click here</a>.<script type=\"text/javascript\">window.location.href = \"?main\";</script></p>';\n\t\t\t\t\techo phoromatic_webui_box($box);\n\t\t\t\t\techo phoromatic_webui_footer();\n\t\t\t\t\tpts_logger::add_to_log($_SERVER['REMOTE_ADDR'] . ' successfully logged in as user: ' . $user);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpts_logger::add_to_log($_SERVER['REMOTE_ADDR'] . ' failed a log-in attempt as: ' . $_POST['username']);\n\t\t\t\t\tphoromatic_error_page('Invalid Information', 'The user-name or password did not match our records.');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpts_logger::add_to_log($_SERVER['REMOTE_ADDR'] . ' failed a log-in attempt as: ' . $_POST['username']);\n\t\t\t\tphoromatic_error_page('Invalid Information', 'The user-name was not found within our system.');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\techo phoromatic_webui_header(array(), '');\n\n\t\t\t$box = '<h1>Welcome</h1>\n\t\t\t<p>You must log-in to your Phoromatic account or create an account to access this service.</p>\n\t\t\t<p>Phoromatic is the remote management and test orchestration system for the <a href=\"https://github.com/phoronix-test-suite/phoronix-test-suite\">Phoronix Test Suite</a>. Phoromatic allows the automatic scheduling of tests, remote installation of new tests, and the management of multiple test systems over a network (LAN/WAN) all through an intuitive, easy-to-use web interface. Tests can be scheduled to automatically run on a routine basis across multiple test systems. The test results are then available from this centralized location along with other features for interacting with Phoronix Test Suite systems.</p>\n\t\t\t<p>Phoromatic makes it very easy to provide for automated scheduling of tests on multiple systems, is extremely extensible, allows various remote testing possibilities, makes it very trivial to manage multiple systems, and centralizes result management within an organization.</p>\n\t\t\t<p id=\"features_link\"><a onclick=\"javascript:document.getElementById(\\'features\\').style.display = \\'block\\'; document.getElementById(\\'features_link\\').style.display = \\'none\\';\">Learn more about Phoromatic</a>.</p>\n\t\t\t<div style=\"display: none;\" id=\"features\">\n\n<h1>Phoromatic Benefits</h1>\n<h3>Automated Scheduling</h3>\n<p>Whether it be every evening at 6:00PM, once every Thursday at 10:00AM or somewhere in between, Phoromatic can schedule tests to be run at user-defined intervals. The testing schedules can be updated through Phoromatic web interface. After the test(s) have run, the results will be immediately uploaded to Phoromatic. Phoromatic also allows external &quot;triggers&quot; that can be initiated via a URL if wanting to automatically initiate testing when a Git commit occurs or some other external event.</p>\n<h3>Extensible</h3>\n<p>Any test profile or test suite that is compliant with the Phoronix Test Suite specifications will work with Phoromatic. Phoromatic is able to leverage the hundreds of test profiles and dozens of test suites currently in the Phoronix Test Suite via <a href=\"http://openbenchmarking.org/\">OpenBenchmarking.org</a>, along with any custom/proprietary test profiles you or your company utilize.</p>\n<h3>Remote Testing</h3>\n<p>Once the test system is setup, all testing and management of that system can be done remotely. There is no need to excute Phoronix Test Suite commands locally using the GUI or command line version, but instead nearly all of the same features are accessible from the Phoromatic interface. The Phoromatic Server can also control waking systems via WoL when tests are issued, shutting down systems when idling, and other management tasks.</p>\n<h3>Multi-System Support</h3>\n<p>A single Phoromatic account is able to manage multiple test systems running the Phoronix Test Suite. Phoromatic supports grouping together test systems, tagging, and other features to support effectively managing many test systems. From the Phoromatic interface, installed system hardware and software from a given system can also be viewed. Systems can be spread across a private LAN or spread across several locations via the Internet.</p>\n<h3>Turn-Key Deployment</h3>\n<p>No additional software needs to be installed to support Phoromatic; all that is needed is the Phoronix Test Suite and its dependencies. New test systems can easily be synced with a given Phoromatic account by running a single command from the Phoronix Test Suite client.</p>\n<p>The Phoromatic Server can be quickly and easily deployed with the only new presented dependency compared to Phoronix Test Suite clients is on PHP SQLite support. With modern versions of PHP-CLI, the Phoromatic Server is completely self-hosting for its web service.</p>\n<p>Phoronix Test Suite client systems with Avahi / zero-conf networking support can automatically find Phoromatic Servers on their LAN for connecting to accounts, obtaining download caches, and utilizing other Phoromatic functionality.</p>\n<h3>Result Management</h3>\n<p>Test results are automatically uploaded to the Phoromatic account and remain private unless you opt to upload them to OpenBenchmarking.org for public reference. From the Phoromatic interface, results from multiple test systems can easily be compared and multiple results from the same systems can be used to track performance over time. There are also options to look at the statistical significance of the results and other features to efficienctly and effectively analyze the system performance.</p>\n<h3>Multi-User Support</h3>\n<p>If deploying a Phoromatic Server within an organization, there is also support for allowing multiple user accounts to be associated with the same data and other systems.</p>\n<h3>Local Caching</h3>\n<p>The Phoromatic Server automatically allows for caching of Phoronix Test Suite files and OpenBenchmarking.org test profile/suite caches. This allows for the Phoronix Test Suite to be more easily deployed within organizations where the systems otherwise do not have Internet access for obtaining the necessary support files.</p>\n<h3>Dashboard</h3>\n<p>The Phoromatic dashboard allows viewing the state of all connected systems in one concise view from seeing their test state to hardware/software details, estimated time to completion, and other system information.</p>\n<h3>E-Mail Notifications</h3>\n<p>The Phoromatic Server is able to send out notifications of new results being available, systems that appear hung, immediate alerts of system errors, and other important information so that it can be dealt with in a timely manner (assuming your Phoromatic server has a working mail server).</p>\n<h1>Getting Started</h1>\n<p>Getting started can be as easy as <strong>phoronix-test-suite start-phoromatic-server</strong> to deploy a Phoromatic Server with HTTP access for the UI. Setting up client systems can be as simple as <strong>phoronix-test-suite phoromatic.connect</strong> and there are systemd files available for easy access to. <strong>More details can be found via the <a href=\"https://github.com/phoronix-test-suite/phoronix-test-suite/blob/master/documentation/phoronix-test-suite.md#phoronix-test-suite-phoromatic\"><strong>Phoronix Test Suite documentation</strong></a>.</strong></p>\n<p>The Phoronix Test Suite source-code is <a href=\"https://github.com/phoronix-test-suite/phoronix-test-suite/\">hosted via GitHub</a>.</p>\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<h1>Log-In</h1>\n\t\t\t<form name=\"login_form\" id=\"login_form\" action=\"?login\" method=\"post\" onsubmit=\"return phoromatic_login(this);\">\n\t\t\t<ul class=\"r_form_wrapper\">\n\t\t\t\t<li class=\"label_input_wrapper\">\n\t\t\t\t\t<label for=\"u_username\">Username</label>\n\t\t\t\t\t<input type=\"text\" name=\"username\" id=\"u_username\" required/>\n\t\t\t\t</li>\n\t\t\t\t<li class=\"label_input_wrapper\">\n\t\t\t\t\t<label for=\"u_password\">Password</label>\n\t\t\t\t\t<input type=\"password\" name=\"password\" id=\"u_password\" required/>\n\t\t\t\t</li>\n\t\t\t\t<li class=\"label_input_wrapper\">\n\t\t\t\t\t<input type=\"submit\" value=\"Submit\" />\n\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</form>\n\t\t\t<hr />\n\t\t\t<h1>Register</h1>';\n\n\t\t\tif(!empty($account_creation_string))\n\t\t\t{\n\t\t\t\t$box .= '<p>' . $account_creation_string . '</p>';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\n\t\t\t\t$box .= '<p id=\"register_link\"><a onclick=\"javascript:document.getElementById(\\'register\\').style.display = \\'block\\'; document.getElementById(\\'register_link\\').style.display = \\'none\\';\">Create A New Account</a></p>\n\t\t\t<div style=\"display: none;\" id=\"register\">\n\n\n\t\t\t\t\t<p>To create a new account for this Phoromatic server, simply fill out the form below. Phoromatic also allows multi-user accounts. If wishing to be added to an existing Phoromatic account as a separate user, contact the appropriate party and request said access. Within a Phoromatic account with appropriate credentials, additional sub-accounts can be created/managed from the &quot;Users&quot; page.</p>';\n\t\t\t\t\t$box .= '<form name=\"register_form\" id=\"register_form\" action=\"?register\" method=\"post\" onsubmit=\"return phoromatic_initial_registration(this);\">\n\n\t\t\t\t\t<ul class=\"r_form_wrapper\">\n\t\t\t\t\t\t<li class=\"label_input_wrapper\">\n\t\t\t\t\t\t\t<label for=\"r_username\">Username</label>\n\t\t\t\t\t\t\t<input type=\"hidden\" name=\"seed_accountid\" value=\"' . (isset($_GET['seed_accountid']) ? $_GET['seed_accountid'] : null) . '\" />\n\t\t\t\t\t\t\t<input type=\"text\" name=\"register_username\" id=\"r_username\" required/>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"label_input_wrapper\">\n\t\t\t\t\t\t\t<label for=\"r_password\">Password</label>\n\t\t\t\t\t\t\t<input type=\"password\" name=\"register_password\" id=\"r_password\" required/>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"label_input_wrapper\">\n\t\t\t\t\t\t\t<label for=\"c_password\">Confirm Password</label>\n\t\t\t\t\t\t\t<input type=\"password\" name=\"register_password_confirm\" id=\"c_password\" required/>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"label_input_wrapper\">\n\t\t\t\t\t\t\t<label for=\"r_email\">Email Address</label>\n\t\t\t\t\t\t\t<input type=\"email\" name=\"register_email\" id=\"r_email\" required/>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li class=\"label_input_wrapper\">\n\t\t\t\t\t\t\t<input type=\"submit\" value=\"Create Account\" />\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\n\t\t\t\t\t</form></div>';\n\t\t\t}\n\t\t\t$box .= '<hr />\n\t\t\t<h1>View Public Results</h1>\n\t\t\t<p>For accounts that opted to share their test results publicly, you can directly <a href=\"public.php\">view the public test results</a>.</p><hr />';\n\n\t\t\techo phoromatic_webui_box($box);\n\t\t\techo phoromatic_webui_footer();\n\t\t}\n\t}\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2013 - 2022, Phoronix Media\n\tCopyright (C) 2013 - 2022, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\ndefine('PHOROMATIC_SERVER_WEB_INTERFACE', true);\ndefine('PAGE_LOAD_START_TIME', microtime(true));\n\nfunction phoromatic_quit_if_invalid_input_found($input_keys = null)\n{\n\tif(empty($input_keys))\n\t{\n\t\t// Check them all if not being selective about what keys to check\n\t\t$input_keys = array_keys($_REQUEST);\n\t}\n\t// backup as to sanitization and stripping elsewhere, safeguard namely check for things like < for fields that shouldn't have it\n\t// plus a few simple backups as safeguards for words that really have no legit relevance within Phoromatic...\n\n\tforeach(array('<', 'document.write', '../', 'onerror', 'onload', 'alert(') as $invalid_string)\n\t{\n\t\tforeach($input_keys as $key)\n\t\t{\n\t\t\tif(isset($_REQUEST[$key]) && !empty($_REQUEST[$key]))\n\t\t\t{\n\t\t\t\tforeach(pts_arrays::to_array($_REQUEST[$key]) as $val_to_check)\n\t\t\t\t{\n\t\t\t\t\tif(stripos($val_to_check, $invalid_string) !== false)\n\t\t\t\t\t{\n\t\t\t\t\t\techo '<strong>Exited due to invalid input ( ' . $invalid_string . ') attempted:</strong> ' . htmlspecialchars($val_to_check);\n\t\t\t\t\t\texit;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nfunction phoromatic_annotate_entry($type, $id, $secondary_id)\n{\n\t$annotate_hash = sha1($id . $secondary_id);\n\n\tif(isset($_GET['da_' . $annotate_hash]))\n\t{\n\t\t$user_name = isset($_SESSION['UserName']) ? $_SESSION['UserName'] : null;\n\t\t$stmt = phoromatic_server::$db->prepare('DELETE FROM phoromatic_annotations WHERE Type = :type AND ID = :id AND SecondaryID = :secondary_id AND AnnotatedBy = :user_name AND AccountID = :account_id AND AnnotatedTime = :annotated_time');\n\t\t$stmt->bindValue(':account_id', (isset($_SESSION['AccountID']) ? $_SESSION['AccountID'] : null));\n\t\t$stmt->bindValue(':type', $type);\n\t\t$stmt->bindValue(':id', $id);\n\t\t$stmt->bindValue(':secondary_id', $secondary_id);\n\t\t$stmt->bindValue(':user_name', $user_name);\n\t\t$stmt->bindValue(':annotated_time', $_GET['da_' . $annotate_hash]);\n\t\t$result = $stmt->execute();\n\t}\n\tif(isset($_POST['add_annotation_' . $annotate_hash]) && !empty($_POST['add_annotation_' . $annotate_hash]))\n\t{\n\t\t$annotation = $_POST['add_annotation_' . $annotate_hash];\n\t\t$user_name = isset($_SESSION['UserName']) ? $_SESSION['UserName'] : null;\n\t\t$annotation = str_replace(\"\\n\", '<br />', $annotation);\n\n\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_annotations (AccountID, Type, ID, SecondaryID, AnnotatedTime, AnnotatedBy, Annotation) VALUES (:account_id, :type, :id, :secondary_id, :annotated_time, :user_name, :annotation)');\n\t\t$stmt->bindValue(':account_id', (isset($_SESSION['AccountID']) ? $_SESSION['AccountID'] : null));\n\t\t$stmt->bindValue(':type', $type);\n\t\t$stmt->bindValue(':id', $id);\n\t\t$stmt->bindValue(':secondary_id', $secondary_id);\n\t\t$stmt->bindValue(':annotated_time', phoromatic_server::current_time());\n\t\t$stmt->bindValue(':user_name', $user_name);\n\t\t$stmt->bindValue(':annotation', $annotation);\n\t\t$result = $stmt->execute();\n\t}\n\n\t// XXX:  AccountID = :account_id AND\n\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_annotations WHERE Type = :type AND ID = :id AND SecondaryID = :secondary_id ORDER BY AnnotatedTime ASC');\n\t$stmt->bindValue(':account_id', (isset($_SESSION['AccountID']) ? $_SESSION['AccountID'] : null));\n\t$stmt->bindValue(':type', $type);\n\t$stmt->bindValue(':id', $id);\n\t$stmt->bindValue(':secondary_id', $secondary_id);\n\t$result = $stmt->execute();\n\t$row = $result->fetchArray();\n\t$output = null;\n\n\tif($row)\n\t{\n\t\tdo\n\t\t{\n\t\t\t$annotation = $row['Annotation'];\n\t\t\t$annotation = str_replace(\"\\n\", 'XXXX', $annotation);\n\t\t\t$annotation = str_replace(\"\\t\", ' &nbsp; &nbsp; &nbsp;', $annotation);\n\t\t\t$annotation = str_replace('  ', '&nbsp;', $annotation);\n\n\t\t\t$output .= '<p>' . $annotation . '<br /><em>Annotation By <strong>' . ($row['AnnotatedBy'] != null ? $row['AnnotatedBy'] : 'Unknown') . '</strong> at <strong>' . phoromatic_user_friendly_timedate($row['AnnotatedTime']) . '</strong>.</em>';\n\n\t\t\tif(isset($_SESSION['UserName']) && !empty($_SESSION['UserName']) && $_SESSION['UserName'] == $row['AnnotatedBy'])\n\t\t\t{\n\t\t\t\t$output .= ' <a href=\"' . $_SERVER['REQUEST_URI'] . '/&da_' . $annotate_hash . '=' . $row['AnnotatedTime'] . '\">Delete Annotation</a>';\n\t\t\t}\n\n\t\t\t$output .= '</p>';\n\t\t}\n\t\twhile($row = $result->fetchArray());\n\t}\n\n\t$output .= '<p id=\"annotation_link_' . $annotate_hash . '\"><a onclick=\"javascript:toggle_annotate_area(\\'' . $annotate_hash . '\\');\" style=\"font-size: 80%;\">Add Annotation</a></p>';\n\t$output .= '<form method=\"post\" action=\"' . $_SERVER['REQUEST_URI'] . '\"><p style=\"display: none;\" id=\"annotation_area_' . $annotate_hash . '\"><textarea name=\"add_annotation_' . $annotate_hash . '\" cols=\"50\" rows=\"4\"></textarea><br /><input name=\"submit\" value=\"Add Annotation\" type=\"submit\" /</p></form>';\n\n\treturn $output;\n}\nfunction phoromatic_init_web_page_setup()\n{\n\tif(session_save_path() == null || !is_writable(session_save_path()))\n\t{\n\t\t// This is needed since on at least EL6 by default there is no session_save_path set\n\t\tif(is_writable('/var/lib/php') && is_dir('/var/lib/php'))\n\t\t{\n\t\t\tsession_save_path('/var/lib/php');\n\t\t}\n\t\telse if(is_writable('/var/lib/php5') && is_dir('/var/lib/php5'))\n\t\t{\n\t\t\tsession_save_path('/var/lib/php5');\n\t\t}\n\t\telse if(is_writable('/tmp'))\n\t\t{\n\t\t\tsession_save_path('/tmp');\n\t\t}\n\t\telse if(is_writable('.'))\n\t\t{\n\t\t\tsession_save_path('.');\n\t\t}\n\t}\n\n\tdefine('PHOROMATIC_SERVER', true);\n\tif(defined('PTS_IS_DEV_BUILD') && PTS_IS_DEV_BUILD)\n\t{\n\t\terror_reporting(E_ALL);\n\t}\n\tsession_start();\n\n\tdefine('PTS_MODE', 'WEB_CLIENT');\n\tdefine('PTS_AUTO_LOAD_OBJECTS', true);\n\tdefine('PHOROMATIC_USER_IS_VIEWER', !isset($_SESSION['AdminLevel']) || $_SESSION['AdminLevel'] >= 10 || $_SESSION['AdminLevel'] < 1 ? true : false);\n\n\tinclude('../../pts-core.php');\n\tpts_core::init();\n}\nfunction phoromatic_user_friendly_timedate($time)\n{\n\treturn phoromatic_server::user_friendly_timedate($time);\n}\nfunction phoromatic_compute_estimated_time_remaining_string($estimated_minutes, $last_comm, $append = 'Remaining')\n{\n\t$remaining = phoromatic_compute_estimated_time_remaining($estimated_minutes, $last_comm);\n\treturn $remaining > 0 ? '~' . pts_strings::plural_handler($remaining, 'Minute') . ' ' . $append : null;\n}\nfunction phoromatic_compute_estimated_time_remaining($estimated_minutes, $last_comm)\n{\n\tif($estimated_minutes > 0)\n\t{\n\t\t$estimated_completion = strtotime($last_comm) + ($estimated_minutes * 60);\n\n\t\tif(time() < $estimated_completion)\n\t\t{\n\t\t\treturn ceil(($estimated_completion - time()) / 60);\n\t\t}\n\n\t}\n\n\treturn 0;\n}\nfunction phoromatic_webui_header($left_items, $right = null)\n{\n\t$ret = PHP_EOL . '<div id=\"pts_phoromatic_top_header\">\n\t<ul>\n\t<li><a href=\"?\"><img style=\"vertical-align: middle;\" class=\"img_logo_pg\" src=\"images/phoromatic_logo.svg\" /></a>';\n\n\tif(isset($_SESSION['AdminLevel']) &&$_SESSION['AdminLevel'] > 0 && isset($_SESSION['AccountID']) && !empty($_SESSION['AccountID']))\n\t{\n\t\t$ret .= '<ul id=\"pts_phoromatic_info\">';\n\t\t$ret .= '<li><a class=\"ph_date\" href=\"#\">' . date('H:i T - j F') . '</a></li>';\n\t\t$group_name = phoromatic_server::account_id_to_group_name($_SESSION['AccountID']);\n\t\tif($group_name != null)\n\t\t{\n\t\t\t$ret .= '<li><a href=\"#\">' . $group_name . '</a></li>';\n\t\t}\n\t\t$ret .= '</ul>';\n\t}\n\t$ret .= '</li>';\n\n\n\t//$ret .= '<ul>';\n\tforeach($left_items as $i => $item)\n\t{\n\t\tif(is_array($item))\n\t\t{\n\t\t\t$ret .= '<li>' . $i;\n\n\t\t\tif(!empty($item))\n\t\t\t{\n\t\t\t\t$ret .= '<ul>';\n\t\t\t\tforeach($item as $sub_item)\n\t\t\t\t{\n\t\t\t\t\t$ret .= '<li>' . $sub_item . '</li>';\n\t\t\t\t}\n\t\t\t\t$ret .= '</ul>';\n\t\t\t}\n\t\t\t$ret .= '</li>' . PHP_EOL;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$ret .= '<li>' . $item . '</li>' . PHP_EOL;\n\t\t}\n\t}\n\t$ret .= '<li><div id=\"phoromatic_result_selected_info_box\"></div> <a href=\"#\" onclick=\"javascript:phoromatic_generate_comparison(\\'?result/\\');\"><div id=\"phoromatic_result_compare_info_box\">Compare</div></a> <a href=\"#\" onclick=\"javascript:phoromatic_delete_results(\\'?results/delete/\\'); return false;\"><div id=\"phoromatic_result_delete_box\">Delete</div></a></li>';\n\t$ret .= '</ul>';\n\n\tif($right != null)\n\t{\n\t\t$ret .= '<div id=\"pts_phoromatic_top_header_right\">' . $right .'</div>';\n\t}\n\n\t$ret .=' </div>';\n\n\treturn $ret;\n}\nfunction phoromatic_get_posted_var($name, $default_value = null)\n{\n\tif(isset($_POST[$name]))\n\t{\n\t\tphoromatic_quit_if_invalid_input_found(array($name));\n\t}\n\n\treturn isset($_POST[$name]) ? $_POST[$name] : null;\n}\nfunction phoromatic_webui_main($main, $right = null)\n{\n\treturn '<div id=\"pts_phoromatic_main\">' . ($right != null ? '<div id=\"pts_phoromatic_menu_right\">' . $right . '</div>' : null) . '<div id=\"pts_phoromatic_main_area\">' . $main . '</div><div style=\"clear: both;\"></div></div>';\n}\nfunction phoromatic_webui_box(&$box)\n{\n\treturn '<div id=\"pts_phoromatic_main_box\"><div id=\"pts_phoromatic_main_box_inside\">' . $box . '</div></div>';\n}\nfunction phoromatic_results_for_schedule($schedule_id, $limit_results = false)\n{\n\tswitch($limit_results)\n\t{\n\t\tcase 'TODAY':\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(UploadID) As UploadCount FROM phoromatic_results WHERE AccountID = :account_id AND ScheduleID = :schedule_id AND UploadTime LIKE :today_date');\n\t\t\t$stmt->bindValue(':today_date', date('Y-m-d') . '%');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(UploadID) As UploadCount FROM phoromatic_results WHERE AccountID = :account_id AND ScheduleID = :schedule_id');\n\t\t\tbreak;\n\t}\n\n\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t$stmt->bindValue(':schedule_id', $schedule_id);\n\t$test_result_result = $stmt->execute();\n\t$row = $test_result_result->fetchArray();\n\n\treturn empty($row) ? 0 : $row['UploadCount'];\n}\nfunction phoromatic_schedule_activeon_string($active_on, $active_at = null)\n{\n\tif(!empty($active_on))\n\t{\n\t\t$active_days = explode(',', $active_on);\n\t\t$week = array('M', 'T', 'W', 'TH', 'F', 'S', 'SU');\n\t\tforeach($active_days as $i => &$day)\n\t\t{\n\t\t\tif(!isset($week[$day]))\n\t\t\t{\n\t\t\t\tunset($active_days[$i]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$day = $week[$day];\n\t\t\t}\n\t\t}\n\t\treturn implode(' ', $active_days) . (!empty($active_at) ? ' @ ' . str_replace('.', ':', $active_at) : null );\n\t}\n}\nfunction phoromatic_webui_footer()\n{\n\treturn '<div id=\"pts_phoromatic_bottom_footer\">\n\t<div style=\"float: left; padding: 5px;\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" viewbox=\"0 0 76 41\" width=\"76\" height=\"41\" preserveAspectRatio=\"xMinYMin meet\">\n  <path d=\"m74 22v9m-5-16v16m-5-28v28m-23-2h12.5c2.485281 0 4.5-2.014719 4.5-4.5s-2.014719-4.5-4.5-4.5h-8c-2.485281 0-4.5-2.014719-4.5-4.5s2.014719-4.5 4.5-4.5h12.5m-21 5h-11m11 13h-2c-4.970563 0-9-4.029437-9-9v-20m-24 40v-20c0-4.970563 4.0294373-9 9-9 4.970563 0 9 4.029437 9 9s-4.029437 9-9 9h-9\" stroke=\"#696969\" stroke-width=\"4\" fill=\"none\" />\n</svg> &nbsp;</div>\n<p style=\"margin: 6px 15px;\"><strong>' . date('H:i T - j F Y') . '</strong>' . (PTS_IS_DEV_BUILD ? ' &nbsp; [' . round(microtime(true) - PAGE_LOAD_START_TIME, 2) . 's Page Load Time]' : null) . '<br />Copyright &copy; 2008 - ' . date('Y') . ' by <a href=\"http://www.phoronix-media.com/\">Phoronix Media</a>. All rights reserved.<br />\nAll trademarks used are properties of their respective owners.<br />' . pts_core::program_title() . ' - Core Version ' . PTS_CORE_VERSION . ' - PHP ' . PHP_VERSION . '</p></div> <script type=\"text/javascript\"> phoromatic_checkbox_toggle_result_comparison(\\'\\'); </script>';\n}\nfunction phoromatic_add_activity_stream_event($activity_event, $activity_event_id, $activity_event_type)\n{\n\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_activity_stream (AccountID, ActivityTime, ActivityCreator, ActivityCreatorType, ActivityEvent, ActivityEventID, ActivityEventType) VALUES (:account_id, :activity_time, :activity_creator, :activity_creator_type, :activity_event, :activity_event_id, :activity_event_type)');\n\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t$stmt->bindValue(':activity_time', phoromatic_server::current_time());\n\t$stmt->bindValue(':activity_creator', $_SESSION['UserName']);\n\t$stmt->bindValue(':activity_creator_type', 'USER');\n\t$stmt->bindValue(':activity_event', $activity_event);\n\t$stmt->bindValue(':activity_event_id', $activity_event_id);\n\t$stmt->bindValue(':activity_event_type', $activity_event_type);\n\treturn $stmt->execute();\n}\nfunction phoromatic_tracker_page_relevant()\n{\n\t$stmt = phoromatic_server::$db->prepare('SELECT RunTargetSystems, RunTargetGroups, (SELECT COUNT(*) FROM phoromatic_results WHERE ScheduleID = phoromatic_schedules.ScheduleID) AS UploadedResultCount FROM phoromatic_schedules WHERE AccountID = :account_id AND State >= 1 ORDER BY Title ASC');\n\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t$result = $stmt->execute();\n\t$row = $result->fetchArray();\n\n\tif($row)\n\t{\n\t\tdo\n\t\t{\n\t\t\tif(is_numeric($row['RunTargetSystems']) && $row['UploadedResultCount'] > (($row['RunTargetSystems'] + $row['RunTargetGroups'] + 1) * 7))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\twhile($row = $result->fetchArray());\n\t}\n\n\treturn false;\n}\nfunction phoromatic_webui_header_logged_in()\n{\n\t$html_links = array();\n\tif($_SESSION['AdminLevel'] == -40)\n\t{\n\t\t$pages = array('Admin', 'Admin_Config', 'Admin_Data', 'Logout');\n\t}\n\telse if($_SESSION['AdminLevel'] > 0)\n\t{\n\t\t$sub_main_menu = array();\n\t\t$sub_tests_menu = array();\n\t\t$sub_systems_menu = array();\n\t\t$sub_testing_menu = array();\n\t\t$sub_results_menu = array();\n\n\t\tif(phoromatic_account_system_count() > 0)\n\t\t{\n\t\t\t$sub_systems_menu[] = 'Dashboard';\n\t\t\t$sub_systems_menu[] = 'Maintenance Table';\n\t\t\t$sub_systems_menu[] = 'Component Table';\n\t\t}\n\n\t\t//$sub_main_menu[] = '<a href=\"?tests\">Test Profiles</a>';\n\t\tif(isset($_SESSION['AdminLevel']) && $_SESSION['AdminLevel'] < 4)\n\t\t{\n\t\t\t$sub_main_menu[] = 'Users';\n\t\t}\n\n\t\tarray_push($sub_main_menu, 'Settings', '<a href=\"?account_activity\">Account Activity</a>', 'Logout');\n\t\t$sub_testing_menu[] = '<a href=\"?schedules\">Test Schedules</a>';\n\n\t\tif(!PHOROMATIC_USER_IS_VIEWER)\n\t\t{\n\t\t\tarray_push($sub_tests_menu, '<a href=\"?create_test\">Create New Test Profile</a>');\n\t\t\tarray_push($sub_tests_menu, '<a href=\"?build_suite\">Build Test Suite</a>');\n\t\t\tarray_push($sub_testing_menu, '<a href=\"?sched\">Create A Schedule</a>', '<a href=\"?benchmark\">Run A Benchmark</a>');\n\t\t}\n\n\t\tif(phoromatic_tracker_page_relevant())\n\t\t{\n\t\t\t$sub_results_menu[] = 'Tracker';\n\t\t}\n\t\t$sub_results_menu[] = '<a href=\"/rss.php?user=' . $_SESSION['UserID'] . '&amp;v=' . sha1($_SESSION['CreatedOn']) . '\">Results Feed <img src=\"images/rss.svg\" width=\"16\" height=\"16\" /></a>';\n\n\t\t$pages = array('Main' => $sub_main_menu, 'Systems' => $sub_systems_menu, 'Tests' => $sub_tests_menu, '<a href=\"/?testing\">Testing</a>' => $sub_testing_menu, 'Results' => $sub_results_menu, '<form action=\"/?search\" method=\"post\" id=\"search\"><input type=\"search\" name=\"search\" id=\"seach_input\" size=\"16\" /> <input type=\"submit\" name=\"sa\" value=\"Search\" /><div class=\"search_expander\"></div></form>');\n\t}\n\n\tforeach($pages as $title => $page)\n\t{\n\t\tif(is_array($page) || empty($page))\n\t\t{\n\t\t\t$menu_row = array();\n\t\t\tforeach($page as $sub_page)\n\t\t\t{\n\t\t\t\t$menu_row[] = menu_item_to_html($sub_page);\n\t\t\t}\n\t\t\t$html_links[menu_item_to_html($title)] = $menu_row;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$html_links[] = menu_item_to_html($page);\n\t\t}\n\t}\n\n\treturn phoromatic_webui_header($html_links, null);\n}\nfunction menu_item_to_html($page)\n{\n\tif(strpos($page, '</') !== false)\n\t\treturn $page;\n\n\t$page_link = strtolower($page);\n\tif(($x = strpos($page_link, '<br />')) !== false)\n\t{\n\t\t$page_link = trim(substr($page_link, $x + 6));\n\t}\n\t$page_link = str_replace(' ', '_', $page_link);\n\n\tif(strtolower($page) == PAGE_REQUEST)\n\t{\n\t\treturn '<a href=\"?' . $page_link . '\"><u>' . str_replace('_', ' ', $page) . '</u></a>';\n\t}\n\telse\n\t{\n\t\treturn '<a href=\"?' . $page_link . '\">' . str_replace('_', ' ', $page) . '</a>';\n\t}\n}\nfunction phoromatic_webui_right_panel_logged_in($add = null)\n{\n\t$right = null;\n\tif($_SESSION['AdminLevel'] == -40)\n\t{\n\t\t$right .= '<h3>Phoromatic Server</h3><hr /><p><strong>' . date('H:i T - j F Y') . '</p>';\n\t}\n\telse if($_SESSION['AdminLevel'] > 0)\n\t{\n\t\t//$right .= '<a href=\"#\" onclick=\"javascript:phoromatic_generate_comparison(\\'?result/\\');\"><div id=\"phoromatic_result_compare_info_box\"></div></a> <a href=\"#\" onclick=\"javascript:phoromatic_delete_results(\\'?results/delete/\\'); return false;\"><div id=\"phoromatic_result_delete_box\">Delete Selected Results</div></a>';\n\t\tif(($bad_systems = phoromatic_server::systems_appearing_down()) != false)\n\t\t{\n\t\t\t$right .= '<ul><li><span class=\"alert\">Systems Needing Attention</span></li>';\n\t\t\tforeach($bad_systems as $system)\n\t\t\t{\n\t\t\t\t$right .= '<li><a href=\"?systems/' . $system . '\">' . phoromatic_server::system_id_to_name($system) . '</a></li>';\n\t\t\t}\n\t\t\t$right .= '</ul><hr />';\n\t\t}\n\n\t\t$right .= $add;\n\n\t\tif($add == null)\n\t\t{\n\t\t\t$recently_active_systems = phoromatic_server::recently_active_systems($_SESSION['AccountID']);\n\t\t\tif(!empty($recently_active_systems))\n\t\t\t{\n\t\t\t\t$right .= '<ul><li>Recently Active Systems</li>';\n\n\t\t\t\tforeach($recently_active_systems as &$row)\n\t\t\t\t{\n\t\t\t\t\t$right .= '<li><a href=\"?systems/' . $row['SystemID'] . '\">' . $row['Title'] . '</a></li>';\n\t\t\t\t}\n\n\t\t\t\t$right .= '</ul><hr />';\n\t\t\t}\n\n\t\t\t$right .= '\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Today\\'s Scheduled Events</li>';\n\n\t\t\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, ScheduleID, RunAt FROM phoromatic_schedules WHERE AccountID = :account_id AND State >= 1  AND ActiveOn LIKE :active_on ORDER BY RunAt,Title ASC');\n\t\t\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t\t\t$stmt->bindValue(':active_on', '%' . (date('N') - 1) . '%');\n\t\t\t\t$result = $stmt->execute();\n\t\t\t\t$row = $result->fetchArray();\n\n\t\t\t\tif($row == false)\n\t\t\t\t{\n\t\t\t\t\t$right .= '</ul><p style=\"text-align: left; margin: 6px 10px;\">No Events Found</p>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdo\n\t\t\t\t\t{\n\t\t\t\t\t\t$right .= '<li>' . $row['RunAt'] . ' <a href=\"?schedules/' . $row['ScheduleID'] . '\">' . $row['Title'] . '</a></li>';\n\t\t\t\t\t}\n\t\t\t\t\twhile($row = $result->fetchArray());\n\t\t\t\t\t$right .= '</ul>';\n\t\t\t\t}\n\n\t\t}\n\n\t\t$system_count = phoromatic_account_system_count();\n\t\t$schedule_count = phoromatic_account_schedule_count();\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(UploadID) AS ResultCount FROM phoromatic_results WHERE AccountID = :account_id');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$result_count = $row['ResultCount'];\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(ActivityTime) AS ActivityCount FROM phoromatic_activity_stream WHERE AccountID = :account_id AND ActivityTime LIKE :today_date');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$stmt->bindValue(':today_date', date('Y-m-d') . '%');\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$activity_count = $row['ActivityCount'];\n\n\t\t$group_name = phoromatic_server::account_id_to_group_name($_SESSION['AccountID']);\n\t\tif($group_name != null)\n\t\t{\n\t\t\t$group_name = '<strong>' . $group_name . '</strong><br />';\n\t\t}\n\n\t\t$right .= '<hr /><p><strong>' . date('H:i T - j F Y') . '</strong><br />' . $group_name . '<a href=\"?systems\">' . $system_count . ' System' . ($system_count == 1 ? '' : 's') . '</a><br /><a href=\"?schedules\">' . $schedule_count . ' Schedule' . ($schedule_count == 1 ? '' : 's') . '</a><br /><a href=\"?results\">' . $result_count . ' Result' . ($result_count == 1 ? '' : 's') . '</a>';\n\n\n$right .= ' <a href=\"/rss.php?user=' . $_SESSION['UserID'] . '&amp;v=' . sha1($_SESSION['CreatedOn']) . '\"><img src=\"images/rss.svg\" width=\"16\" height=\"16\" /></a>';\n\n\t\t$right .= '<br /><a href=\"?account_activity\">' . $activity_count . ' Activity Events Today</a></p>';\n\t}\n\n\treturn $right;\n}\nfunction phoromatic_account_schedule_count()\n{\n\tstatic $schedule_count = 0;\n\n\tif($schedule_count == 0)\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(Title) AS ScheduleCount FROM phoromatic_schedules WHERE AccountID = :account_id AND State >= 1');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$schedule_count = $row['ScheduleCount'];\n\t}\n\n\treturn $schedule_count;\n}\nfunction phoromatic_account_system_count()\n{\n\tstatic $sys_count = 0;\n\n\tif($sys_count == 0)\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT COUNT(Title) AS SystemCount FROM phoromatic_systems WHERE AccountID = :account_id AND State >= 0');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$sys_count = $row['SystemCount'];\n\t}\n\treturn $sys_count;\n}\nfunction phoromatic_web_socket_server_ip()\n{\n\t$server_ip = $_SERVER['HTTP_HOST'];\n\tif(($x = strpos($server_ip, ':')) !== false)\n\t{\n\t\t$server_ip = substr($server_ip, 0, $x);\n\t}\n\n\tif($server_ip == 'localhost' || $server_ip == '0.0.0.0')\n\t{\n\t\t$local_ip = phodevi::read_property('network', 'ip');\n\t\tif($local_ip)\n\t\t{\n\t\t\t$server_ip = $local_ip;\n\t\t}\n\t}\n\t// getenv('PTS_WEBSOCKET_PORT')\n\treturn $server_ip . ':' . $_SERVER['SERVER_PORT'];\n}\nfunction phoromatic_web_socket_server_addr()\n{\n\t// getenv('PTS_WEBSOCKET_PORT')\n\treturn phoromatic_web_socket_server_ip() . '/' . $_SESSION['AccountID'];\n}\nfunction phoromatic_error_page($title, $description)\n{\n\techo phoromatic_webui_header(array(''), '');\n\t$box = '<h1>' . $title . '</h1>\n\t\t<h2>' . $description . '</h2>';\n\techo phoromatic_webui_box($box);\n\techo phoromatic_webui_footer();\n}\nfunction phoromatic_systems_needing_attention()\n{\n\t$main = null;\n\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, State, LastIP, LocalIP, LastCommunication FROM phoromatic_systems WHERE AccountID = :account_id AND State = 0 ORDER BY LastCommunication DESC');\n\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t$result = $stmt->execute();\n\tif($row = $result->fetchArray())\n\t{\n\t\t$main .= '<div class=\"pts_phoromatic_info_box_area\"><div style=\"float: left; width: 100%;\"><ul><li><h1>Systems Needing Attention</h1></li><li class=\"light\" style=\"font-weight: normal;\">The following systems have attempted to sync with this Phoromatic account but have not been validated. When clicking on them you are able to approve or disable them from your account along with editing the system information.</li>';\n\n\t\tdo\n\t\t{\n\t\t\t$ip = $row['LocalIP'];\n\t\t\tif($row['LastIP'] != $row['LocalIP'])\n\t\t\t{\n\t\t\t\t$ip .= ' / ' . $row['LastIP'];\n\t\t\t}\n\n\t\t\t$main .= '<a href=\"?systems/' . $row['SystemID'] . '/edit\"><li>' . $row['Title'] . '<br /><em><strong>IP:</strong> ' . $ip . ' <strong>Last Communication:</strong> ' . $row['LastCommunication'] . '</em></li></a>';\n\t\t}\n\t\twhile($row = $result->fetchArray());\n\n\t\t$main .= '</ul></div></div>';\n\t}\n\n\treturn $main;\n}\nfunction phoromatic_oldest_result_for_schedule($schedule_id)\n{\n\tstatic $old_time;\n\n\tif(!isset($old_time[$schedule_id]))\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT UploadTime FROM phoromatic_results WHERE AccountID = :account_id AND ScheduleID = :schedule_id ORDER BY UploadTime ASC LIMIT 1');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$stmt->bindValue(':schedule_id', $schedule_id);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$old_time[$schedule_id] = $row['UploadTime'];\n\t}\n\n\treturn $old_time[$schedule_id];\n}\nfunction phoromatic_schedule_id_to_name($schedule_id)\n{\n\tstatic $schedule_names;\n\n\tif(!isset($schedule_names[$schedule_id]))\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title FROM phoromatic_schedules WHERE AccountID = :account_id AND ScheduleID = :schedule_id');\n\t\t$stmt->bindValue(':account_id', $_SESSION['AccountID']);\n\t\t$stmt->bindValue(':schedule_id', $schedule_id);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\t\t$schedule_names[$schedule_id] = $row['Title'];\n\t}\n\n\treturn $schedule_names[$schedule_id];\n}\nfunction create_new_phoromatic_account($register_username, $register_password, $register_password_confirm, $register_email, $seed_accountid = null)\n{\n\t// REGISTER NEW USER\n\tif(strlen($register_username) < 4 || strpos($register_username, ' ') !== false)\n\t{\n\t\tphoromatic_error_page('Oops!', 'Please go back and ensure the supplied username is at least four characters long and contains no spaces.');\n\t\treturn false;\n\t}\n\tif(in_array(strtolower($register_username), array('admin', 'administrator', 'rootadmin')))\n\t{\n\t\tphoromatic_error_page('Oops!', $register_username . ' is a reserved and common username that may be used for other purposes, please make a different selection.');\n\t\treturn false;\n\t}\n\tif(strlen($register_password) < 6)\n\t{\n\t\tphoromatic_error_page('Oops!', 'Please go back and ensure the supplied password is at least six characters long.');\n\t\treturn false;\n\t}\n\tif($register_password != $register_password_confirm)\n\t{\n\t\tphoromatic_error_page('Oops!', 'Please go back and ensure the supplied password matches the password confirmation.');\n\t\treturn false;\n\t}\n\tif($register_email == null || filter_var($register_email, FILTER_VALIDATE_EMAIL) == false)\n\t{\n\t\tphoromatic_error_page('Oops!', 'Please enter a valid email address.');\n\t\treturn false;\n\t}\n\n\t$valid_user_name_chars = '1234567890-_.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\tfor($i = 0; $i < strlen($register_username); $i++)\n\t{\n\t\tif(strpos($valid_user_name_chars, substr($register_username, $i, 1)) === false)\n\t\t{\n\t\t\tphoromatic_error_page('Oops!', 'Please go back and ensure a valid user-name. The character <em>' . substr($register_username, $i, 1) . '</em> is not allowed.');\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t$matching_users = phoromatic_server::$db->querySingle('SELECT UserName FROM phoromatic_users WHERE UserName = \\'' . SQLite3::escapeString($register_username) . '\\'');\n\tif(!empty($matching_users))\n\t{\n\t\tphoromatic_error_page('Oops!', 'The user-name is already taken.');\n\t\treturn false;\n\t}\n\n\tif(phoromatic_server::read_setting('add_new_users_to_account') != null)\n\t{\n\t\t$account_id = phoromatic_server::read_setting('add_new_users_to_account');\n\t\t$is_new_account = false;\n\t}\n\telse\n\t{\n\t\t$id_tries = 0;\n\t\tdo\n\t\t{\n\t\t\tif($id_tries == 0 && $seed_accountid != null && isset($seed_accountid[5]))\n\t\t\t{\n\t\t\t\t$account_id = strtoupper(substr($seed_accountid, 0, 6));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$account_id = pts_strings::random_characters(6, true);\n\t\t\t}\n\t\t\t$matching_accounts = phoromatic_server::$db->querySingle('SELECT AccountID FROM phoromatic_accounts WHERE AccountID = \\'' . $account_id . '\\'');\n\t\t\t$id_tries++;\n\t\t}\n\t\twhile(!empty($matching_accounts));\n\t\t$is_new_account = true;\n\t}\n\n\t$user_id = pts_strings::random_characters(4, true);\n\n\tif($is_new_account)\n\t{\n\t\tpts_logger::add_to_log($_SERVER['REMOTE_ADDR'] . ' created a new account: ' . $user_id . ' - ' . $account_id);\n\t\t$account_salt = pts_strings::random_characters(12, true);\n\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_accounts (AccountID, ValidateID, CreatedOn, Salt) VALUES (:account_id, :validate_id, :current_time, :salt)');\n\t\t$stmt->bindValue(':account_id', $account_id);\n\t\t$stmt->bindValue(':validate_id', pts_strings::random_characters(4, true));\n\t\t$stmt->bindValue(':salt', $account_salt);\n\t\t$stmt->bindValue(':current_time', phoromatic_server::current_time());\n\t\t$result = $stmt->execute();\n\n\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_account_settings (AccountID) VALUES (:account_id)');\n\t\t$stmt->bindValue(':account_id', $account_id);\n\t\t$result = $stmt->execute();\n\n\t\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_user_settings (UserID, AccountID) VALUES (:user_id, :account_id)');\n\t\t$stmt->bindValue(':user_id', $user_id);\n\t\t$stmt->bindValue(':account_id', $account_id);\n\t\t$result = $stmt->execute();\n\t}\n\telse\n\t{\n\t\tpts_logger::add_to_log($_SERVER['REMOTE_ADDR'] . ' being added to an account: ' . $user_id . ' - ' . $account_id);\n\t\t$account_salt = phoromatic_server::$db->querySingle('SELECT Salt FROM phoromatic_accounts WHERE AccountID = \\'' . $account_id . '\\'');\n\t}\n\n\t$salted_password = hash('sha256', $account_salt . $register_password);\n\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_users (UserID, AccountID, UserName, Email, Password, CreatedOn, LastIP, AdminLevel) VALUES (:user_id, :account_id, :user_name, :email, :password, :current_time, :last_ip, :admin_level)');\n\t$stmt->bindValue(':user_id', $user_id);\n\t$stmt->bindValue(':account_id', $account_id);\n\t$stmt->bindValue(':user_name', $register_username);\n\t$stmt->bindValue(':email', $register_email);\n\t$stmt->bindValue(':password', $salted_password);\n\t$stmt->bindValue(':last_ip', $_SERVER['REMOTE_ADDR']);\n\t$stmt->bindValue(':current_time', phoromatic_server::current_time());\n\t$stmt->bindValue(':admin_level', ($is_new_account ? 1 : 10));\n\t$result = $stmt->execute();\n\n\tpts_file_io::mkdir(phoromatic_server::phoromatic_account_path($account_id));\n\tphoromatic_server::send_email($register_email, 'Phoromatic Account Registration', (($e = phoromatic_server::read_setting('admin_support_email')) != null ? $e : 'no-reply@phoromatic.com'), '<p><strong>' . $register_username . '</strong>:</p><p>Your Phoromatic account has been created and is now active.</p>');\n\treturn true;\n}\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2009 - 2021, Phoronix Media\n\tCopyright (C) 2009 - 2021, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// INIT\ndefine('PHOROMATIC_SERVER', true);\n//ini_set('memory_limit', '64M');\ndefine('PTS_MODE', 'WEB_CLIENT');\ndefine('PTS_AUTO_LOAD_OBJECTS', true);\nerror_reporting(E_ALL);\n\ninclude('../../pts-core.php');\npts_core::init();\n\n$environment_variables = array(\n\t'aid' => 'ACCOUNT_ID',\n\t'sid' => 'SYSTEM_ID',\n\t'bid' => 'BENCHMARK_TICKET_ID',\n//\t'vid' => 'VALIDATE_ID',\n\t'gsid' => 'GSID',\n\t'a' => 'ACTIVITY',\n\t'r' => 'REQUEST',\n\t'pts' => 'CLIENT_VERSION',\n\t'pts_core' => 'CLIENT_CORE_VERSION',\n\t'h' => 'CLIENT_HARDWARE',\n\t's' => 'CLIENT_SOFTWARE',\n\t'pp' => 'PHODEVI_PROPERTIES',\n\t'i' => 'ID',\n\t'o' => 'OTHER',\n\t'nm' => 'NETWORK_CLIENT_MAC',\n\t'nw' => 'NETWORK_CLIENT_WOL',\n\t'n' => 'HOSTNAME',\n\t'ti' => 'TEST_IDENTIFIER',\n\t'ts' => 'TRIGGER_STRING',\n\t'time' => 'ESTIMATED_TIME',\n\t'pc' => 'PERCENT_COMPLETE',\n\t'c' => 'COMPOSITE_XML',\n\t'ob' => 'OPENBENCHMARKING_ID',\n\t'sched' => 'SCHEDULE_ID',\n\t'lip' => 'LOCAL_IP',\n\t'l' => 'LOGS',\n\t'j' => 'JSON',\n\t'composite_xml' => 'COMPOSITE_XML',\n\t'composite_xml_gz' => 'COMPOSITE_XML_GZ',\n\t'composite_xml_hash' => 'COMPOSITE_XML_HASH',\n\t'system_logs_type' => 'SYSTEM_LOGS_TYPE',\n\t'system_logs_zip' => 'SYSTEM_LOGS_ZIP',\n\t'system_logs_hash' => 'SYSTEM_LOGS_HASH',\n\t'msi' => 'PTS_MACHINE_SELF_ID',\n\t'err' => 'ERROR_MSG',\n\t'et' => 'ELAPSED_TIME',\n\t);\n\nforeach($environment_variables as $get_var => $to_var)\n{\n\tif(isset($_REQUEST[$get_var]) && !empty($_REQUEST[$get_var]))\n\t{\n\t\t$$to_var = $_REQUEST[$get_var];\n\t}\n\telse\n\t{\n\t\t$$to_var = null;\n\t}\n}\n\nif($CLIENT_CORE_VERSION < 5400)\n{\n\t// Due to major PTS 5.4 development changes, client version bump will be necessary\n\t$json['phoromatic']['error'] = 'You must update your Phoronix Test Suite clients for compatibility with this Phoromatic server.';\n\techo json_encode($json);\n\texit;\n}\ndefine('CLIENT_CORE_VERSION', $CLIENT_CORE_VERSION);\n\n// DATABASE SETUP\nphoromatic_server::prepare_database();\n\nif($ACCOUNT_ID == null && $PTS_MACHINE_SELF_ID != null)\n{\n\t// Try to find the account\n\t$stmt = phoromatic_server::$db->prepare('SELECT AccountID FROM phoromatic_systems WHERE MachineSelfID = :machine_self_id');\n\t$stmt->bindValue(':machine_self_id', $PTS_MACHINE_SELF_ID);\n\t$result = $stmt->execute();\n\n\tif(!empty($result))\n\t{\n\t\t$result = $result->fetchArray();\n\t\tif($result['AccountID'] != null)\n\t\t{\n\t\t\t$json['phoromatic']['account_id'] = $result['AccountID'];\n\t\t\techo json_encode($json);\n\t\t\texit;\n\t\t}\n\t}\n\n\t// Try to find the account if there is an IP/MAC claim\n\tif(!empty($_SERVER['REMOTE_ADDR']) && !empty($NETWORK_CLIENT_MAC))\n\t{\n\t\t// IPAddress = :ip_address OR\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT AccountID FROM phoromatic_system_association_claims WHERE NetworkMAC = :network_mac OR IPAddress = :ip_address ORDER BY CreationTime ASC LIMIT 1');\n\t\t$stmt->bindValue(':ip_address', $_SERVER['REMOTE_ADDR']);\n\t\t$stmt->bindValue(':network_mac', $NETWORK_CLIENT_MAC);\n\t\t$result = $stmt->execute();\n\n\t\tif(!empty($result))\n\t\t{\n\t\t\t$result = $result->fetchArray();\n\t\t\t$json['phoromatic']['account_id'] = $result['AccountID'];\n\t\t\techo json_encode($json);\n\t\t\texit;\n\t\t}\n\t}\n}\n\nif(($GSID == null && $PTS_MACHINE_SELF_ID == null) || $ACCOUNT_ID == null)\n{\n\t$json['phoromatic']['error'] = 'Invalid Credentials';\n\techo json_encode($json);\n\texit;\n}\n\n// CHECK FOR VALID ACCOUNT\nif(!phoromatic_server::is_phoromatic_account_path($ACCOUNT_ID))\n{\n\t$json['phoromatic']['error'] = 'Invalid User';\n\techo json_encode($json);\n\texit;\n}\ndefine('ACCOUNT_ID', $ACCOUNT_ID);\n\n\n// CHECK IF SYSTEM IS ALREADY CONNECTED TO THE ACCOUNT\nif($PTS_MACHINE_SELF_ID != null)\n{\n\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, Groups, State, MaintenanceMode, LastCommunication FROM phoromatic_systems WHERE AccountID = :account_id AND MachineSelfID = :machine_self_id');\n\t$stmt->bindValue(':account_id', ACCOUNT_ID);\n\t$stmt->bindValue(':machine_self_id', $PTS_MACHINE_SELF_ID);\n\t$result = $stmt->execute();\n\t$result = $result->fetchArray();\n}\n\n\nif(!isset($result) || empty($result))\n{\n\t// If system was reloaded and MachineSelfID no longer matches but there is existing IP or MAC address claim against it\n\t// XXX dropped LastIP = :ip_address OR\n\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, Groups, State, MaintenanceMode, LastCommunication FROM phoromatic_systems WHERE AccountID = :account_id AND NetworkMAC = :network_mac');\n\t$stmt->bindValue(':account_id', ACCOUNT_ID);\n\t$stmt->bindValue(':ip_address', $_SERVER['REMOTE_ADDR']);\n\t$stmt->bindValue(':network_mac', $NETWORK_CLIENT_MAC);\n\t$result = $stmt->execute();\n\t$result = $result->fetchArray();\n}\n\nif(empty($result))\n{\n\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_account_settings WHERE AccountID = :account_id');\n\t$stmt->bindValue(':account_id', ACCOUNT_ID);\n\t$result = $stmt->execute();\n\t$phoromatic_account_settings = $result->fetchArray(SQLITE3_ASSOC);\n\tunset($phoromatic_account_settings['AccountID']);\n\n\t// APPARENT FIRST TIME FOR THIS SYSTEM CONNECTING TO THIS ACCOUNT\n\tdo\n\t{\n\t\t$system_id = pts_strings::random_characters(5, true);\n\t\t$matching_system = phoromatic_server::$db->querySingle('SELECT AccountID FROM phoromatic_systems WHERE SystemID = \\'' . $system_id . '\\'');\n\t}\n\twhile(!empty($matching_system));\n\t$stmt = phoromatic_server::$db->prepare('INSERT INTO phoromatic_systems (AccountID, SystemID, Hardware, Software, SystemProperties, ClientVersion, GSID, CurrentTask, CreatedOn, LastCommunication, LastIP, LocalIP, Title, State, MachineSelfID, CoreVersion, NetworkMAC) VALUES (:account_id, :system_id, :client_hardware, :client_software, :phodevi_properties, :client_version, :gsid, :current_task, :current_time, :current_time, :access_ip, :local_ip, :title, :preset_state, :machine_self_id, :core_version, :network_mac)');\n\t$stmt->bindValue(':account_id', ACCOUNT_ID);\n\t$stmt->bindValue(':system_id', $system_id);\n\t$stmt->bindValue(':client_hardware', $CLIENT_HARDWARE);\n\t$stmt->bindValue(':client_software', $CLIENT_SOFTWARE);\n\t$stmt->bindValue(':phodevi_properties', $PHODEVI_PROPERTIES);\n\t$stmt->bindValue(':client_version', $CLIENT_VERSION);\n\t$stmt->bindValue(':gsid', $GSID);\n\t$stmt->bindValue(':access_ip', $_SERVER['REMOTE_ADDR']);\n\t$stmt->bindValue(':local_ip', $LOCAL_IP);\n\t$stmt->bindValue(':title', pts_strings::simple($HOSTNAME));\n\t$stmt->bindValue(':current_time', phoromatic_server::current_time());\n\t$stmt->bindValue(':machine_self_id', $PTS_MACHINE_SELF_ID);\n\t$stmt->bindValue(':core_version', $CLIENT_CORE_VERSION);\n\t$stmt->bindValue(':network_mac', $NETWORK_CLIENT_MAC);\n\n\tif($phoromatic_account_settings['AutoApproveNewSystems'])\n\t{\n\t\t$stmt->bindValue(':current_task', 'System Added');\n\t\t$stmt->bindValue(':preset_state', 1);\n\t\t$new_response = 'System Automatically Added To Account.';\n\t}\n\telse\n\t{\n\t\t$stmt->bindValue(':current_task', 'Awaiting Authorization');\n\t\t$stmt->bindValue(':preset_state', 0);\n\t\t$new_response = 'Information Added; Waiting For Approval From Administrator.';\n\t}\n\n\t$result = $stmt->execute();\n\n\t// Email notifications\n\t$stmt = phoromatic_server::$db->prepare('SELECT UserName, Email FROM phoromatic_users WHERE UserID IN (SELECT UserID FROM phoromatic_user_settings WHERE AccountID = :account_id AND NotifyOnNewSystems = 1) AND AccountID = :account_id');\n\t$stmt->bindValue(':account_id', ACCOUNT_ID);\n\t$result = $stmt->execute();\n\twhile($row = $result->fetchArray())\n\t{\n\t\tphoromatic_server::send_email($row['Email'], 'Phoromatic New System Added', phoromatic_server::account_id_to_group_admin_email(ACCOUNT_ID), '<p><strong>' . $row['UserName'] . ':</strong></p><p>A new system is attempting to associate with a Phoromatic account for which you\\'re associated.</p><p>Title: ' . $HOSTNAME . '<br />IP: ' . $LOCAL_IP . '<br />System Info: ' . $CLIENT_HARDWARE . ' ' . $CLIENT_SOFTWARE . '</p>');\n\t}\n\n\t// Send response back\n\t$json['phoromatic']['response'] = $new_response;\n\techo json_encode($json);\n\texit;\n}\n\ndefine('SYSTEM_ID', $result['SystemID']);\ndefine('SYSTEM_NAME', $result['Title']);\ndefine('SYSTEM_GROUPS', $result['Groups']);\n$SYSTEM_STATE = $result['State'];\ndefine('GSID', $GSID);\ndefine('SYSTEM_IN_MAINTENANCE_MODE', ($result['MaintenanceMode'] == 1));\n\nif(strtotime($result['LastCommunication']) < (time() - 300))\n{\n\t// Avoid useless updates to the database if it's close to the same info in past 2 minutes\n\t$stmt = phoromatic_server::$db->prepare('UPDATE phoromatic_systems SET LastIP = :access_ip, LocalIP = :local_ip, LastCommunication = :current_time, Hardware = :client_hardware, Software = :client_software, SystemProperties = :phodevi_properties, ClientVersion = :client_version, MachineSelfID = :machine_self_id, NetworkMAC = :network_mac, NetworkWakeOnLAN = :network_wol, CoreVersion = :core_version WHERE AccountID = :account_id AND SystemID = :system_id');\n\t$stmt->bindValue(':account_id', $ACCOUNT_ID);\n\t$stmt->bindValue(':system_id', SYSTEM_ID);\n\t$stmt->bindValue(':client_hardware', pts_strings::simple($CLIENT_HARDWARE));\n\t$stmt->bindValue(':client_software', $CLIENT_SOFTWARE);\n\t$stmt->bindValue(':phodevi_properties', $PHODEVI_PROPERTIES);\n\t$stmt->bindValue(':client_version', $CLIENT_VERSION);\n\t$stmt->bindValue(':core_version', $CLIENT_CORE_VERSION);\n\t$stmt->bindValue(':access_ip', $_SERVER['REMOTE_ADDR']);\n\t$stmt->bindValue(':local_ip', $LOCAL_IP);\n\t$stmt->bindValue(':current_time', phoromatic_server::current_time());\n\t$stmt->bindValue(':machine_self_id', $PTS_MACHINE_SELF_ID);\n\t$stmt->bindValue(':network_mac', $NETWORK_CLIENT_MAC);\n\t$stmt->bindValue(':network_wol', $NETWORK_CLIENT_WOL);\n\t$stmt->execute();\n}\n\n//echo phoromatic_server::$db->lastErrorMsg();\nif($SYSTEM_STATE < 1)\n{\n\t$json['phoromatic']['response'] = 'Waiting For Approval From Administrator.';\n\techo json_encode($json);\n\texit;\n}\n\ndefine('AID', ACCOUNT_ID);\ndefine('SID', SYSTEM_ID);\n\nif(is_file('../communication-resources/' . $REQUEST . '.php'))\n{\n\trequire('../communication-resources/' . $REQUEST . '.php');\n}\nelse\n{\n\t$json['phoromatic']['error'] = 'Unknown Resource: ' . $REQUEST;\n\techo json_encode($json);\n}\n\n//phoromatic_server::close_database();\n\n?>\n", "<?php\n\n/*\n\tPhoronix Test Suite\n\tURLs: http://www.phoronix.com, http://www.phoronix-test-suite.com/\n\tCopyright (C) 2008 - 2022, Phoronix Media\n\tCopyright (C) 2008 - 2022, Michael Larabel\n\n\tThis program is free software; you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation; either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n*/\n\ninclude('../phoromatic_functions.php');\nphoromatic_init_web_page_setup();\nphoromatic_server::prepare_database();\n\n?>\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html>\n<head>\n<script src=\"/phoromatic.js?<?php echo date('Ymd') . PTS_CORE_VERSION; ?>\" type=\"text/javascript\"></script>\n<title>Phoronix Test Suite - Phoromatic </title>\n<link href=\"/phoromatic.css?<?php echo date('Ymd') . PTS_CORE_VERSION; ?>\" rel=\"stylesheet\" type=\"text/css\" />\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n<meta name=\"keywords\" content=\"Phoronix Test Suite, open-source benchmarking, Linux benchmarking, automated testing\" />\n<meta name=\"Description\" content=\"Phoronix Test Suite local control server.\" />\n<link rel=\"shortcut icon\" href=\"favicon.ico\" />\n<!-- PHXCMS-7.2 (phoronix.com) -->\n</head>\n<body>\n\n<?php\n\necho phoromatic_webui_header(array(''), '');\n$result_ids = isset($_GET['ut']) ? explode(',', $_GET['ut']) : false;\nif(!$result_ids)\n{\n\tif(($x = strpos($_SERVER['QUERY_STRING'], 'result/')) !== false)\n\t{\n\t\t$x = substr($_SERVER['QUERY_STRING'], $x + strlen('result/'));\n\t\t$result_ids = explode(',', $x);\n\t}\n}\n$account_id = false;\n\n$main = null;\nif(!empty($result_ids))\n{\n\t$result_files = array();\n\t$display_rows = array();\n\t$system_types = array();\n\t$schedule_types = array();\n\t$trigger_types = array();\n\n\tforeach($result_ids as $upload_id)\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT * FROM phoromatic_results WHERE PPRID = :pprid LIMIT 1');\n\t\t$stmt->bindValue(':pprid', $upload_id);\n\t\t$result = $stmt->execute();\n\t\t$row = $result->fetchArray();\n\n\t\t$composite_xml = phoromatic_server::phoromatic_account_result_path($row['AccountID'], $row['UploadID']) . 'composite.xml';\n\t\tif(!is_file($composite_xml))\n\t\t{\n\t\t\techo 'File Not Found: ' . $composite_xml;\n\t\t\treturn false;\n\t\t}\n\t\t$display_rows[$composite_xml] = $row;\n\t\tpts_arrays::unique_push($system_types, $row['SystemID']);\n\t\tpts_arrays::unique_push($schedule_types, $row['ScheduleID']);\n\t\tpts_arrays::unique_push($trigger_types, $row['Trigger']);\n\n\t\t// Update view counter\n\t\t$stmt_view = phoromatic_server::$db->prepare('UPDATE phoromatic_results SET TimesViewed = (TimesViewed + 1) WHERE AccountID = :account_id AND UploadID = :upload_id');\n\t\t$stmt_view->bindValue(':account_id', $account_id);\n\t\t$stmt_view->bindValue(':upload_id', $upload_id);\n\t\t$stmt_view->execute();\n\t}\n\n\t$result_file_title = null;\n\tif(empty($schedule_types[0]))\n\t{\n\t\t$system_name_format = 'ORIGINAL_DATA';\n\t}\n\telse if(count($display_rows) == 1)\n\t{\n\t\t$system_name_format = 'SYSTEM_NAME';\n\t}\n\telse if(count($schedule_types) == 1 && count($system_types) == 1)\n\t{\n\t\t$system_name_format = 'TRIGGER';\n\t\t$result_file_title = phoromatic_schedule_id_to_name($schedule_types[0]);\n\t}\n\telse if(count($schedule_types) == 1)\n\t{\n\t\t$system_name_format = 'TRIGGER_AND_SYSTEM';\n\t}\n\telse if(false && count($trigger_types) == 1)\n\t{\n\t\t// TODO XXX: this approach yields garbage strings generally without refining the selector\n\t\t// i.e. first make sure all the schedules match or are comparable\n\t\t$system_name_format = 'SYSTEM_AND_SCHEDULE';\n\t}\n\telse\n\t{\n\t\t$system_name_format = null;\n\t}\n\tif(count($schedule_types) == 1 && $schedule_types[0] != 0)\n\t{\n\t\t$schedule_id = $schedule_types[0];\n\t}\n\n\tforeach($display_rows as $composite_xml => $row)\n\t{\n\t\t//  $row['SystemID'] . ' ' . $row['ScheduleID'] . ' ' . $row['Trigger']\n\t\tswitch($system_name_format)\n\t\t{\n\t\t\tcase 'ORIGINAL_DATA':\n\t\t\t\t$system_name = null;\n\t\t\t\tbreak;\n\t\t\tcase 'SYSTEM_NAME':\n\t\t\t\t$system_name = phoromatic_server::system_id_to_name($row['SystemID'], $row['AccountID']);\n\t\t\t\tbreak;\n\t\t\tcase 'TRIGGER':\n\t\t\t\t$system_name = $row['Trigger'];\n\t\t\t\tbreak;\n\t\t\tcase 'TRIGGER_AND_SYSTEM':\n\t\t\t\t$system_name = phoromatic_server::system_id_to_name($row['SystemID'], $row['AccountID']) . ': ' . $row['Trigger'];\n\t\t\t\tbreak;\n\t\t\tcase 'SYSTEM_AND_SCHEDULE':\n\t\t\t\t$system_name = phoromatic_schedule_id_to_name($row['ScheduleID']) . ': ' . $row['Trigger'];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$system_name = phoromatic_server::system_id_to_name($row['SystemID'], $row['AccountID']) . ' - ' . phoromatic_schedule_id_to_name($row['ScheduleID']) . ' - ' . $row['Trigger'];\n\t\t}\n\n\t\t$rf = new pts_result_file($composite_xml);\n\t\t$rf->rename_run(null, $system_name);\n\t\t$result_files[] = $rf;\n\t}\n\n\t$attributes = array('new_result_file_title' => $result_file_title);\n\t$result_file = new pts_result_file(null, true);\n\t$result_file->merge($result_files, $attributes);\n\t$extra_attributes = array();\n\n\t$embed = new pts_result_viewer_embed($result_file);\n\t$embed->show_html_result_table(false);\n\t$embed->show_test_metadata_helper(false);\n\t$embed->include_page_print_only_helpers(false);\n\t$main .= $embed->get_html();\n}\nelse\n{\n\t$time_limit = false;\n\t$time_str = false;\n\tif(isset($_POST['time']))\n\t{\n\t\t$time_str = $_POST['time'];\n\t\t$time_limit = strtotime('- ' . $time_str);\n\t}\n\tif($time_limit == false)\n\t{\n\t\t$time_str = '1 month';\n\t\t$time_limit = strtotime('- ' . $time_str);\n\t}\n\n\t$result_limit = isset($_POST['result_limit']) && is_numeric($_POST['result_limit']) && $_POST['result_limit'] > 9 ? $_POST['result_limit'] : 50;\n\t$main .= '<br /><br /><br />';\n\t$main .= '<form action=\"' . $_SERVER['REQUEST_URI'] . '\" method=\"post\"><div style=\"text-align: left; font-weight: bold;\">Show Results For <select id=\"result_time_limit\" name=\"time\">';\n\t$results_for_length = array(\n\t\t'24 hours' => '24 Hours',\n\t\t'3 days' => '3 Days',\n\t\t'1 week' => 'Week',\n\t\t'2 week' => '2 Weeks',\n\t\t'1 month' => 'Month',\n\t\t'2 months' => '2 Months',\n\t\t'3 months' => 'Quarter',\n\t\t'6 months' => '6 Months',\n\t\t'1 year' => 'Year',\n\t\t'2 year' => 'Two Years',\n\t\t);\n\n\tforeach($results_for_length as $val => $str)\n\t{\n\t\t$main .= '<option value=\"' . $val . '\"' . ($time_str == $val ? ' selected=\"selected\"' : null) . '>Past ' . $str . '</option>';\n\t}\n\n\t$main .= '</select> Search For <input type=\"text\" name=\"search\" value=\"' . (isset($_POST['search']) ? $_POST['search'] : null) . '\" /> &nbsp; Limit Results To <select id=\"result_limit\" name=\"result_limit\">';\n\tfor($i = 25; $i <= 150; $i += 25)\n\t{\n\t\t$main .= '<option value=\"' . $i . '\"' . ($result_limit == $i ? ' selected=\"selected\"' : null) . '>' . $i . '</option>';\n\t}\n\n\t$main .= '</select> &nbsp; <input type=\"submit\" value=\"Update\" /></div></form>';\n\t$main .= '<a onclick=\"javascript:phoromatic_generate_comparison(\\'public.php?ut=\\');\"><div id=\"phoromatic_result_compare_info_box\" style=\"background: #1976d2; border: 1px solid #000;\"></div></a>';\n\t$main .= '<h1>Publicly Accessible Test Results</h1>';\n\t$main .= '<p><em>Results where the accounts on this server have opted for the settings page item of making results public.</em></p>';\n\t$main .= '<div class=\"pts_phoromatic_info_box_area\">';\n\t$search_for = (!isset($_POST['search']) || empty($_POST['search']) ? null : 'AND (Title LIKE :search OR Description LIKE :search OR UploadID IN (SELECT UploadID FROM phoromatic_results_systems WHERE AccountID = :account_id AND (Software LIKE :search OR Hardware LIKE :search)))');\n\t$main .= '<div style=\"margin: 0 5%;\"><ul style=\"max-height: 100%;\"><li><h1>Recent Test Results</h1></li>';\n\t$account_limit = ' AccountID IN (SELECT AccountID FROM phoromatic_account_settings WHERE LetPublicViewResults = 1) ';\n\n\tif(isset($PATH[1]) && $PATH[0] == 'hash')\n\t{\n\t\t// Find matching comparison hashes\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime, TimesViewed, AccountID FROM phoromatic_results WHERE ' . $account_limit . ' ' . $search_for. ' AND ComparisonHash = :comparison_hash ORDER BY UploadTime DESC LIMIT ' . $result_limit);\n\t\t$stmt->bindValue(':comparison_hash', $PATH[1]);\n\t}\n\telse if(isset($PATH[1]) && $PATH[0] == 'ticket')\n\t{\n\t\t// Find matching ticket results\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime, TimesViewed, AccountID FROM phoromatic_results WHERE ' . $account_limit . $search_for. ' AND BenchmarkTicketID = :ticket_id ORDER BY UploadTime DESC LIMIT ' . $result_limit);\n\t\t$stmt->bindValue(':ticket_id', $PATH[1]);\n\t}\n\telse\n\t{\n\t\t$stmt = phoromatic_server::$db->prepare('SELECT Title, SystemID, ScheduleID, PPRID, UploadTime, TimesViewed, AccountID FROM phoromatic_results WHERE ' . $account_limit . ' ' . $search_for. ' ORDER BY UploadTime DESC LIMIT ' . $result_limit);\n\t}\n\n\t$stmt->bindValue(':search', (isset($_POST['search']) ? '%' . $_POST['search'] . '%' : null));\n\t$test_result_result = $stmt->execute();\n\t$results = 0;\n\twhile($test_result_row = $test_result_result->fetchArray())\n\t{\n\t\tif(strtotime($test_result_row['UploadTime']) < $time_limit)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tif($results > 150)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\n\t\t$main .= '<a onclick=\"\"><li id=\"result_select_' . $test_result_row['PPRID'] . '\"><input type=\"checkbox\" id=\"result_compare_checkbox_' . $test_result_row['PPRID'] . '\" onclick=\"javascript:phoromatic_checkbox_toggle_result_comparison(\\'' . $test_result_row['PPRID'] . '\\');\" onchange=\"return false;\"></input> <span onclick=\"javascript:phoromatic_window_redirect(\\'public.php?ut=' . $test_result_row['PPRID'] . '\\');\">' . $test_result_row['Title'] . '</span><br /><table><tr><td>' . phoromatic_server::system_id_to_name($test_result_row['SystemID'], $test_result_row['AccountID']) . '</td><td>' . phoromatic_user_friendly_timedate($test_result_row['UploadTime']) .  '</td><td>' . $test_result_row['TimesViewed'] . ' Times Viewed</td></table></li></a>';\n\t\t$results++;\n\t}\n\tif($results == 0)\n\t{\n\t\t$main .= '<li class=\"light\" style=\"text-align: center;\">No Results Found</li>';\n\t}\n\t$main .= '</ul></div>';\n\t$main .= '</div>';\n}\n\n\necho phoromatic_webui_main($main);\n\necho phoromatic_webui_footer();\n?>\n</body>\n</html>\n"], "filenames": ["ChangeLog", "pts-core/objects/pts_env.php", "pts-core/objects/pts_phoroql.php", "pts-core/objects/pts_result_viewer_embed.php", "pts-core/phoromatic/pages/phoromatic_account_activity.php", "pts-core/phoromatic/pages/phoromatic_admin.php", "pts-core/phoromatic/pages/phoromatic_admin_config.php", "pts-core/phoromatic/pages/phoromatic_admin_data.php", "pts-core/phoromatic/pages/phoromatic_benchmark.php", "pts-core/phoromatic/pages/phoromatic_build_suite.php", "pts-core/phoromatic/pages/phoromatic_caches.php", "pts-core/phoromatic/pages/phoromatic_component_table.php", "pts-core/phoromatic/pages/phoromatic_create_test.php", "pts-core/phoromatic/pages/phoromatic_dashboard.php", "pts-core/phoromatic/pages/phoromatic_local_suites.php", "pts-core/phoromatic/pages/phoromatic_logs.php", "pts-core/phoromatic/pages/phoromatic_main.php", "pts-core/phoromatic/pages/phoromatic_maintenance_table.php", "pts-core/phoromatic/pages/phoromatic_password.php", "pts-core/phoromatic/pages/phoromatic_r_add_test_build_suite_details.php", "pts-core/phoromatic/pages/phoromatic_r_basic_suite_details.php", "pts-core/phoromatic/pages/phoromatic_result.php", "pts-core/phoromatic/pages/phoromatic_results.php", "pts-core/phoromatic/pages/phoromatic_sched.php", "pts-core/phoromatic/pages/phoromatic_schedules.php", "pts-core/phoromatic/pages/phoromatic_search.php", "pts-core/phoromatic/pages/phoromatic_settings.php", "pts-core/phoromatic/pages/phoromatic_system_claim.php", "pts-core/phoromatic/pages/phoromatic_systems.php", "pts-core/phoromatic/pages/phoromatic_testing.php", "pts-core/phoromatic/pages/phoromatic_tests.php", "pts-core/phoromatic/pages/phoromatic_tracker.php", "pts-core/phoromatic/pages/phoromatic_users.php", "pts-core/phoromatic/pages/phoromatic_welcome.php", "pts-core/phoromatic/phoromatic_functions.php", "pts-core/phoromatic/public_html/phoromatic.php", "pts-core/phoromatic/public_html/public.php"], "buggy_code_start_loc": [1, 653, 25, 6, 23, 6, 22, 22, 6, 6, 22, 22, 23, 23, 22, 22, 22, 22, 22, 6, 22, 6, 6, 6, 6, 6, 22, 6, 6, 6, 22, 180, 6, 6, 6, 198, 6], "buggy_code_end_loc": [1, 654, 26, 1027, 126, 211, 23, 276, 388, 199, 23, 23, 179, 42, 66, 23, 219, 96, 23, 39, 23, 332, 305, 286, 602, 183, 23, 103, 746, 137, 23, 181, 244, 260, 616, 248, 289], "fixing_code_start_loc": [2, 653, 25, 6, 22, 6, 21, 21, 6, 6, 21, 21, 22, 22, 21, 21, 21, 21, 21, 6, 21, 6, 6, 6, 6, 6, 21, 6, 6, 6, 21, 179, 6, 6, 6, 198, 6], "fixing_code_end_loc": [6, 654, 26, 1022, 121, 210, 21, 272, 381, 197, 21, 21, 173, 39, 65, 21, 214, 91, 21, 40, 21, 332, 299, 285, 593, 181, 21, 102, 744, 133, 21, 179, 245, 258, 636, 248, 247], "type": "CWE-79", "message": "phoronix-test-suite is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2022-0157", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-10T16:15:09.793", "lastModified": "2022-02-22T10:23:52.933", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "phoronix-test-suite is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "phoronix-test-suite es vulnerable a una Neutralizaci\u00f3n Inapropiada de Entradas durante la Generaci\u00f3n de P\u00e1ginas Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.2, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.9, "impactScore": 4.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phoronix-media:phoronix_test_suite:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.8.0", "matchCriteriaId": "631A75BD-498B-4319-B19F-A6A3BA4A9DD5"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:34:*:*:*:*:*:*:*", "matchCriteriaId": "A930E247-0B43-43CB-98FF-6CE7B8189835"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:35:*:*:*:*:*:*:*", "matchCriteriaId": "80E516C0-98A4-4ADE-B69F-66A772E2BAAA"}]}]}], "references": [{"url": "https://github.com/phoronix-test-suite/phoronix-test-suite/commit/56fd0a3b69fb33c1c90a6017ed735889aaa59486", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/2c0fe81b-0977-4e1e-b5d8-7646c9a7ebbd", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/57V2CSFU5MKWKL6RJUKMXSD4PCRFTMMQ/", "source": "security@huntr.dev", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/BU7E6OOZCXS3ZWHOQ2AR7MKM56IN2R6R/", "source": "security@huntr.dev", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/phoronix-test-suite/phoronix-test-suite/commit/56fd0a3b69fb33c1c90a6017ed735889aaa59486"}}