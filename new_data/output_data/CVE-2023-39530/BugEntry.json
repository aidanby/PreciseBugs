{"buggy_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n */\n\n/**\n * Class CustomerMessageCore.\n */\nclass CustomerMessageCore extends ObjectModel\n{\n    public $id;\n\n    /** @var int CustomerThread ID */\n    public $id_customer_thread;\n\n    /** @var int */\n    public $id_employee;\n\n    /** @var string */\n    public $message;\n\n    /** @var string */\n    public $file_name;\n\n    /** @var string */\n    public $ip_address;\n\n    /** @var string */\n    public $user_agent;\n\n    /** @var bool */\n    public $private;\n\n    /** @var string */\n    public $date_add;\n\n    /** @var string */\n    public $date_upd;\n\n    /** @var bool */\n    public $read;\n\n    /**\n     * @see ObjectModel::$definition\n     */\n    public static $definition = [\n        'table' => 'customer_message',\n        'primary' => 'id_customer_message',\n        'fields' => [\n            'id_employee' => ['type' => self::TYPE_INT, 'validate' => 'isUnsignedId'],\n            'id_customer_thread' => ['type' => self::TYPE_INT],\n            'ip_address' => ['type' => self::TYPE_STRING, 'validate' => 'isIp2Long', 'size' => 15],\n            'message' => ['type' => self::TYPE_HTML, 'required' => true, 'size' => 16777216],\n            'file_name' => ['type' => self::TYPE_STRING],\n            'user_agent' => ['type' => self::TYPE_STRING],\n            'private' => ['type' => self::TYPE_BOOL, 'validate' => 'isBool'],\n            'date_add' => ['type' => self::TYPE_DATE, 'validate' => 'isDate'],\n            'date_upd' => ['type' => self::TYPE_DATE, 'validate' => 'isDate'],\n            'read' => ['type' => self::TYPE_BOOL, 'validate' => 'isBool'],\n        ],\n    ];\n\n    /** @var array */\n    protected $webserviceParameters = [\n        'fields' => [\n            'id_employee' => [\n                'xlink_resource' => 'employees',\n            ],\n            'id_customer_thread' => [\n                'xlink_resource' => 'customer_threads',\n            ],\n        ],\n    ];\n\n    /**\n     * Get CustomerMessages by Order ID.\n     *\n     * @param int $idOrder Order ID\n     * @param bool $private Private\n     *\n     * @return array|false|mysqli_result|PDOStatement|resource|null\n     */\n    public static function getMessagesByOrderId($idOrder, $private = true)\n    {\n        return Db::getInstance()->executeS('\n\t\t\tSELECT cm.*,\n\t\t\t\tc.`firstname` AS cfirstname,\n\t\t\t\tc.`lastname` AS clastname,\n\t\t\t\te.`firstname` AS efirstname,\n\t\t\t\te.`lastname` AS elastname,\n\t\t\t\t(COUNT(cm.id_customer_message) = 0 AND ct.id_customer != 0) AS is_new_for_me\n\t\t\tFROM `' . _DB_PREFIX_ . 'customer_message` cm\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'customer_thread` ct\n\t\t\t\tON ct.`id_customer_thread` = cm.`id_customer_thread`\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'customer` c\n\t\t\t\tON ct.`id_customer` = c.`id_customer`\n\t\t\tLEFT OUTER JOIN `' . _DB_PREFIX_ . 'employee` e\n\t\t\t\tON e.`id_employee` = cm.`id_employee`\n\t\t\tWHERE ct.id_order = ' . (int) $idOrder . '\n\t\t\t' . (!$private ? 'AND cm.`private` = 0' : '') . '\n\t\t\tGROUP BY cm.id_customer_message\n\t\t\tORDER BY cm.date_add DESC\n\t\t');\n    }\n\n    /**\n     * Get total CustomerMessages.\n     *\n     * @param string|null $where Additional SQL query\n     *\n     * @return int Amount of CustomerMessages found\n     */\n    public static function getTotalCustomerMessages($where = null)\n    {\n        if (null === $where) {\n            return (int) Db::getInstance()->getValue(\n                '\n\t\t\t\tSELECT COUNT(*)\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'customer_message\n\t\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'customer_thread` ct ON (cm.`id_customer_thread` = ct.`id_customer_thread`)\n\t\t\t\tWHERE 1' . Shop::addSqlRestriction()\n            );\n        } else {\n            return (int) Db::getInstance()->getValue(\n                '\n\t\t\t\tSELECT COUNT(*)\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'customer_message cm\n\t\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'customer_thread` ct ON (cm.`id_customer_thread` = ct.`id_customer_thread`)\n\t\t\t\tWHERE ' . $where . Shop::addSqlRestriction()\n            );\n        }\n    }\n\n    /**\n     * Deletes current CustomerMessage from the database.\n     *\n     * @return bool `true` if delete was successful\n     *\n     * @throws PrestaShopException\n     */\n    public function delete()\n    {\n        if (!empty($this->file_name)) {\n            @unlink(_PS_UPLOAD_DIR_ . $this->file_name);\n        }\n\n        return parent::delete();\n    }\n\n    /**\n     * Get the last message for a thread customer.\n     *\n     * @param int $id_customer_thread Thread customer reference\n     *\n     * @return string Last message\n     */\n    public static function getLastMessageForCustomerThread($id_customer_thread)\n    {\n        return (string) Db::getInstance()->getValue(\n            '\n            SELECT message\n            FROM ' . _DB_PREFIX_ . 'customer_message\n            WHERE id_customer_thread = ' . (int) $id_customer_thread . '\n            ORDER BY date_add DESC'\n        );\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n */\n\n/**\n * Class CustomerMessageCore.\n */\nclass CustomerMessageCore extends ObjectModel\n{\n    public $id;\n\n    /** @var int CustomerThread ID */\n    public $id_customer_thread;\n\n    /** @var int */\n    public $id_employee;\n\n    /** @var string */\n    public $message;\n\n    /** @var string */\n    public $file_name;\n\n    /** @var string */\n    public $ip_address;\n\n    /** @var string */\n    public $user_agent;\n\n    /** @var bool */\n    public $private;\n\n    /** @var string */\n    public $date_add;\n\n    /** @var string */\n    public $date_upd;\n\n    /** @var bool */\n    public $read;\n\n    /**\n     * @see ObjectModel::$definition\n     */\n    public static $definition = [\n        'table' => 'customer_message',\n        'primary' => 'id_customer_message',\n        'fields' => [\n            'id_employee' => ['type' => self::TYPE_INT, 'validate' => 'isUnsignedId'],\n            'id_customer_thread' => ['type' => self::TYPE_INT],\n            'ip_address' => ['type' => self::TYPE_STRING, 'validate' => 'isIp2Long', 'size' => 15],\n            'message' => ['type' => self::TYPE_HTML, 'required' => true, 'size' => 16777216],\n            'file_name' => ['type' => self::TYPE_STRING],\n            'user_agent' => ['type' => self::TYPE_STRING],\n            'private' => ['type' => self::TYPE_BOOL, 'validate' => 'isBool'],\n            'date_add' => ['type' => self::TYPE_DATE, 'validate' => 'isDate'],\n            'date_upd' => ['type' => self::TYPE_DATE, 'validate' => 'isDate'],\n            'read' => ['type' => self::TYPE_BOOL, 'validate' => 'isBool'],\n        ],\n    ];\n\n    /** @var array */\n    protected $webserviceParameters = [\n        'fields' => [\n            'id_employee' => [\n                'xlink_resource' => 'employees',\n            ],\n            'id_customer_thread' => [\n                'xlink_resource' => 'customer_threads',\n            ],\n        ],\n    ];\n\n    /**\n     * Get CustomerMessages by Order ID.\n     *\n     * @param int $idOrder Order ID\n     * @param bool $private Private\n     *\n     * @return array|false|mysqli_result|PDOStatement|resource|null\n     */\n    public static function getMessagesByOrderId($idOrder, $private = true)\n    {\n        return Db::getInstance()->executeS('\n\t\t\tSELECT cm.*,\n\t\t\t\tc.`firstname` AS cfirstname,\n\t\t\t\tc.`lastname` AS clastname,\n\t\t\t\te.`firstname` AS efirstname,\n\t\t\t\te.`lastname` AS elastname,\n\t\t\t\t(COUNT(cm.id_customer_message) = 0 AND ct.id_customer != 0) AS is_new_for_me\n\t\t\tFROM `' . _DB_PREFIX_ . 'customer_message` cm\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'customer_thread` ct\n\t\t\t\tON ct.`id_customer_thread` = cm.`id_customer_thread`\n\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'customer` c\n\t\t\t\tON ct.`id_customer` = c.`id_customer`\n\t\t\tLEFT OUTER JOIN `' . _DB_PREFIX_ . 'employee` e\n\t\t\t\tON e.`id_employee` = cm.`id_employee`\n\t\t\tWHERE ct.id_order = ' . (int) $idOrder . '\n\t\t\t' . (!$private ? 'AND cm.`private` = 0' : '') . '\n\t\t\tGROUP BY cm.id_customer_message\n\t\t\tORDER BY cm.date_add DESC\n\t\t');\n    }\n\n    /**\n     * Get total CustomerMessages.\n     *\n     * @param string|null $where Additional SQL query\n     *\n     * @return int Amount of CustomerMessages found\n     */\n    public static function getTotalCustomerMessages($where = null)\n    {\n        if (null === $where) {\n            return (int) Db::getInstance()->getValue(\n                '\n\t\t\t\tSELECT COUNT(*)\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'customer_message\n\t\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'customer_thread` ct ON (cm.`id_customer_thread` = ct.`id_customer_thread`)\n\t\t\t\tWHERE 1' . Shop::addSqlRestriction()\n            );\n        } else {\n            return (int) Db::getInstance()->getValue(\n                '\n\t\t\t\tSELECT COUNT(*)\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'customer_message cm\n\t\t\t\tLEFT JOIN `' . _DB_PREFIX_ . 'customer_thread` ct ON (cm.`id_customer_thread` = ct.`id_customer_thread`)\n\t\t\t\tWHERE ' . $where . Shop::addSqlRestriction()\n            );\n        }\n    }\n\n    /**\n     * Deletes current CustomerMessage from the database.\n     *\n     * @return bool `true` if delete was successful\n     *\n     * @throws PrestaShopException\n     */\n    public function delete()\n    {\n        if (!empty($this->file_name)) {\n            @unlink(_PS_UPLOAD_DIR_ . basename($this->file_name));\n        }\n\n        return parent::delete();\n    }\n\n    /**\n     * Get the last message for a thread customer.\n     *\n     * @param int $id_customer_thread Thread customer reference\n     *\n     * @return string Last message\n     */\n    public static function getLastMessageForCustomerThread($id_customer_thread)\n    {\n        return (string) Db::getInstance()->getValue(\n            '\n            SELECT message\n            FROM ' . _DB_PREFIX_ . 'customer_message\n            WHERE id_customer_thread = ' . (int) $id_customer_thread . '\n            ORDER BY date_add DESC'\n        );\n    }\n}\n"], "filenames": ["classes/CustomerMessage.php"], "buggy_code_start_loc": [165], "buggy_code_end_loc": [166], "fixing_code_start_loc": [165], "fixing_code_end_loc": [166], "type": "CWE-20", "message": "PrestaShop is an open source e-commerce web application. Prior to version 8.1.1, it is possible to delete files from the server via the CustomerMessage API. Version 8.1.1 contains a patch for this issue. There are no known workarounds.", "other": {"cve": {"id": "CVE-2023-39530", "sourceIdentifier": "security-advisories@github.com", "published": "2023-08-07T21:15:10.817", "lastModified": "2023-08-09T19:36:10.557", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "PrestaShop is an open source e-commerce web application. Prior to version 8.1.1, it is possible to delete files from the server via the CustomerMessage API. Version 8.1.1 contains a patch for this issue. There are no known workarounds."}, {"lang": "es", "value": "PrestaShop es una aplicaci\u00f3n web de comercio electr\u00f3nico de c\u00f3digo abierto. Antes de la versi\u00f3n 8.1.1, era posible eliminar archivos del servidor a trav\u00e9s de la API \"CustomerMessage\". La versi\u00f3n 8.1.1 contiene un parche para este problema. No hay soluciones conocidas. "}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 5.2}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionEndExcluding": "8.1.1", "matchCriteriaId": "705A3EBE-48E5-4E3B-A8D8-471098F8B56E"}]}]}], "references": [{"url": "https://github.com/PrestaShop/PrestaShop/commit/6ce750b2367a7309b6bf50166f1873cb86ad57e9", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-v4gr-v679-42p7", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/PrestaShop/commit/6ce750b2367a7309b6bf50166f1873cb86ad57e9"}}