{"buggy_code": ["\n/**\n * Copyright (C) 2011 Xavier Jodoin (xavier@jodoin.me)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author xjodoin\n * @version $Id: $Id\n */\npackage org.torpedoquery.jpa.internal.conditions;\n\nimport java.io.Serializable;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport org.torpedoquery.core.QueryBuilder;\nimport org.torpedoquery.jpa.ComparableFunction;\nimport org.torpedoquery.jpa.Function;\nimport org.torpedoquery.jpa.OnGoingCollectionCondition;\nimport org.torpedoquery.jpa.OnGoingComparableCondition;\nimport org.torpedoquery.jpa.OnGoingLikeCondition;\nimport org.torpedoquery.jpa.OnGoingLogicalCondition;\nimport org.torpedoquery.jpa.OnGoingStringCondition;\nimport org.torpedoquery.jpa.Query;\nimport org.torpedoquery.jpa.internal.Condition;\nimport org.torpedoquery.jpa.internal.Parameter;\nimport org.torpedoquery.jpa.internal.Selector;\nimport org.torpedoquery.jpa.internal.conditions.LikeCondition.Type;\nimport org.torpedoquery.jpa.internal.selectors.NotSelector;\nimport org.torpedoquery.jpa.internal.selectors.SizeSelector;\npublic class ConditionBuilder<T> implements OnGoingComparableCondition<T>, OnGoingStringCondition<T>,\n\t\tOnGoingLikeCondition, OnGoingCollectionCondition<T>, Condition, Serializable {\n\tprivate Selector selector;\n\tprivate final LogicalCondition logicalCondition;\n\tprivate Condition condition;\n\tprivate boolean notLike;\n\n\t/**\n\t * <p>\n\t * Constructor for ConditionBuilder.\n\t * </p>\n\t *\n\t * @param builder\n\t *            a {@link org.torpedoquery.core.QueryBuilder} object.\n\t * @param selector\n\t *            a {@link org.torpedoquery.jpa.internal.Selector} object.\n\t */\n\tpublic ConditionBuilder(QueryBuilder<T> builder, Selector<?> selector) {\n\t\tthis.logicalCondition = new LogicalCondition(builder, this);\n\t\tthis.selector = selector;\n\t}\n\n\t/**\n\t * <p>\n\t * Constructor for ConditionBuilder.\n\t * </p>\n\t *\n\t * @param logicalCondition\n\t *            a\n\t *            {@link org.torpedoquery.jpa.internal.conditions.LogicalCondition}\n\t *            object.\n\t * @param selector\n\t *            a {@link org.torpedoquery.jpa.internal.Selector} object.\n\t */\n\tpublic ConditionBuilder(LogicalCondition logicalCondition, Selector<?> selector) {\n\t\tthis.logicalCondition = logicalCondition;\n\t\tthis.selector = selector;\n\t}\n\n\t/**\n\t * <p>\n\t * Getter for the field <code>logicalCondition</code>.\n\t * </p>\n\t *\n\t * @return a\n\t *         {@link org.torpedoquery.jpa.internal.conditions.LogicalCondition}\n\t *         object.\n\t */\n\tpublic LogicalCondition getLogicalCondition() {\n\t\treturn logicalCondition;\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition eq(T value) {\n\t\tCondition conditionLocal = new EqualCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition eq(Class<? extends T> value) {\n\t\tCondition conditionLocal = new EqualPolymorphicCondition<T>(selector, value);\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition neq(T value) {\n\t\tCondition conditionLocal = new NotEqualCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition neq(Class<? extends T> value) {\n\t\tCondition conditionLocal = new NotEqualPolymorphicCondition<T>(selector, value);\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition lt(T value) {\n\t\tCondition conditionLocal = new LtCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition lte(T value) {\n\t\tCondition conditionLocal = new LteCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition gt(T value) {\n\t\tCondition conditionLocal = new GtCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition gte(T value) {\n\t\tCondition conditionLocal = new GteCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition isNull() {\n\t\tCondition conditionLocal = new IsNullCondition(selector);\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition isNotNull() {\n\t\tCondition conditionLocal = new IsNotNullCondition(selector);\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition in(T... values) {\n\t\treturn in(Arrays.asList(values));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition in(Collection<T> values) {\n\t\tCondition conditionLocal = new InCondition<T>(selector, selector.generateParameter(values));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition in(Query<T> query) {\n\t\tCondition conditionLocal = new InSubQueryCondition<T>(selector, (QueryBuilder) query);\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition notIn(T... values) {\n\t\treturn notIn(Arrays.asList(values));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition notIn(Collection<T> values) {\n\t\treturn getOnGoingLogicalCondition(new NotInCondition<T>(selector, selector.generateParameter(values)));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition notIn(Query<T> subQuery) {\n\t\treturn getOnGoingLogicalCondition(new NotInSubQueryCondition<T>(selector, (QueryBuilder) subQuery));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic String createQueryFragment(AtomicInteger incrementor) {\n\t\tif (condition != null) {\n\t\t\treturn condition.createQueryFragment(incrementor);\n\t\t} else {\n\t\t\treturn \"\";\n\t\t}\n\n\t}\n\n\tprivate OnGoingLogicalCondition getOnGoingLogicalCondition(Condition condition) {\n\t\tthis.condition = condition;\n\t\treturn logicalCondition;\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic List<Parameter> getParameters() {\n\t\tif (condition != null) {\n\t\t\treturn condition.getParameters();\n\t\t} else {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLikeCondition like() {\n\t\treturn this;\n\t}\n\t\n\t@Override\n\tpublic OnGoingLogicalCondition like(String likeValue) {\n\t\treturn getOnGoingLogicalCondition(createLike(LikeCondition.Type.UNKNOW, likeValue));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLikeCondition notLike() {\n\t\tnotLike = true;\n\t\treturn this;\n\t}\n\t\n\t@Override\n\tpublic OnGoingLogicalCondition notLike(String notLikeValue) {\n\t\tnotLike = true;\n\t\treturn getOnGoingLogicalCondition(createLike(LikeCondition.Type.UNKNOW, notLikeValue));\n\t}\n\n\tprivate LikeCondition createLike(Type type, String toMatch) {\n\t\tif (notLike) {\n\t\t\treturn new NotLikeCondition(type, selector, toMatch);\n\t\t} else {\n\t\t\treturn new LikeCondition(type, selector, toMatch);\n\t\t}\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition any(String toMatch) {\n\t\treturn getOnGoingLogicalCondition(createLike(LikeCondition.Type.ANY, toMatch));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition startsWith(String toMatch) {\n\t\treturn getOnGoingLogicalCondition(createLike(LikeCondition.Type.STARTSWITH, toMatch));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition endsWith(String toMatch) {\n\t\treturn getOnGoingLogicalCondition(createLike(LikeCondition.Type.ENDSWITH, toMatch));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition isEmpty() {\n\t\treturn getOnGoingLogicalCondition(new IsEmptyCondition(selector));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition isNotEmpty() {\n\t\treturn getOnGoingLogicalCondition(new IsNotEmptyCondition(selector));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition memberOf(T member) {\n\t\treturn getOnGoingLogicalCondition(new MemberOfCondition<>(selector, selector.generateParameter(member)));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingComparableCondition<Integer> size() {\n\t\tselector = new SizeSelector(selector);\n\t\treturn (OnGoingComparableCondition<Integer>) this;\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition lt(ComparableFunction<T> value) {\n\t\tCondition conditionLocal = new LtCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition lte(ComparableFunction<T> value) {\n\t\tCondition conditionLocal = new LteCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition gt(ComparableFunction<T> value) {\n\t\tCondition conditionLocal = new GtCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition gte(ComparableFunction<T> value) {\n\t\tCondition conditionLocal = new GteCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition eq(Function<T> value) {\n\t\tCondition conditionLocal = new EqualCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition neq(Function<T> value) {\n\t\tCondition conditionLocal = new NotEqualCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition between(T from, T to) {\n\t\tCondition conditionLocal = new BetweenCondition<T>(selector,\n\t\t\t\tArrays.asList(selector.generateParameter(from), selector.generateParameter(to)));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition notBetween(T from, T to) {\n\t\tCondition conditionLocal = new BetweenCondition<T>(new NotSelector(selector),\n\t\t\t\tArrays.asList(selector.generateParameter(from), selector.generateParameter(to)));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition between(ComparableFunction<T> from, ComparableFunction<T> to) {\n\t\tCondition conditionLocal = new BetweenCondition<T>(selector,\n\t\t\t\tArrays.asList(selector.generateParameter(from), selector.generateParameter(to)));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition notBetween(ComparableFunction<T> from, ComparableFunction<T> to) {\n\t\tCondition conditionLocal = new BetweenCondition<T>(new NotSelector(selector),\n\t\t\t\tArrays.asList(selector.generateParameter(from), selector.generateParameter(to)));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\t\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic <T> QueryBuilder<T> getBuilder() {\n\t\treturn logicalCondition.getBuilder();\n\t}\n\t\n}\n", "\n/**\n * Copyright (C) 2011 Xavier Jodoin (xavier@jodoin.me)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author xjodoin\n * @version $Id: $Id\n */\npackage org.torpedoquery.jpa.internal.conditions;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport org.torpedoquery.jpa.internal.Condition;\nimport org.torpedoquery.jpa.internal.Parameter;\nimport org.torpedoquery.jpa.internal.Selector;\n\npublic class LikeCondition implements Condition {\n\n\tpublic static enum Type {\n\t\tANY {\n\t\t\t@Override\n\t\t\tpublic String wrap(String toMatch) {\n\t\t\t\treturn \"%\" + toMatch + \"%\";\n\t\t\t}\n\t\t},\n\t\tSTARTSWITH {\n\t\t\t@Override\n\t\t\tpublic String wrap(String toMatch) {\n\t\t\t\treturn toMatch + \"%\";\n\t\t\t}\n\t\t},\n\t\tENDSWITH {\n\t\t\t@Override\n\t\t\tpublic String wrap(String toMatch) {\n\t\t\t\treturn \"%\" + toMatch;\n\t\t\t}\n\t\t},\n\t\tUNKNOW {\n\t\t\t@Override\n\t\t\tpublic String wrap(String toMatch) {\n\t\t\t\treturn toMatch;\n\t\t\t}\n\t\t};\n\n\t\tpublic abstract String wrap(String toMatch);\n\t}\n\n\tprivate final String toMatch;\n\tprivate final Type type;\n\tprivate final Selector selector;\n\n\t/**\n\t * <p>\n\t * Constructor for LikeCondition.\n\t * </p>\n\t *\n\t * @param type\n\t *            a\n\t *            {@link org.torpedoquery.jpa.internal.conditions.LikeCondition.Type}\n\t *            object.\n\t * @param selector\n\t *            a {@link org.torpedoquery.jpa.internal.Selector} object.\n\t * @param toMatch\n\t *            a {@link java.lang.String} object.\n\t */\n\tpublic LikeCondition(Type type, Selector selector, String toMatch) {\n\t\tthis.type = type;\n\t\tthis.selector = selector;\n\t\tthis.toMatch = toMatch;\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic String createQueryFragment(AtomicInteger incrementor) {\n\t\treturn selector.createQueryFragment(incrementor) + \" \" + getLike() + \" '\" + type.wrap(toMatch) + \"' \";\n\t}\n\n\t/**\n\t * <p>\n\t * getLike.\n\t * </p>\n\t *\n\t * @return a {@link java.lang.String} object.\n\t */\n\tprotected String getLike() {\n\t\treturn \"like\";\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic List<Parameter> getParameters() {\n\t\treturn Collections.emptyList();\n\t}\n\n}\n", "\n/**\n * Copyright (C) 2011 Xavier Jodoin (xavier@jodoin.me)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author xjodoin\n * @version $Id: $Id\n */\npackage org.torpedoquery.jpa.internal.conditions;\n\nimport org.torpedoquery.jpa.internal.Selector;\npublic class NotLikeCondition extends LikeCondition {\n\n\t/**\n\t * <p>Constructor for NotLikeCondition.</p>\n\t *\n\t * @param type a Type object.\n\t * @param selector a {@link org.torpedoquery.jpa.internal.Selector} object.\n\t * @param toMatch a {@link java.lang.String} object.\n\t */\n\tpublic NotLikeCondition(Type type, Selector selector, String toMatch) {\n\t\tsuper(type, selector, toMatch);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tprotected String getLike() {\n\t\treturn \"not \" + super.getLike();\n\t}\n\n}\n", "/**\n * Copyright (C) 2011 Xavier Jodoin (xavier@jodoin.me)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.torpedoquery.jpa;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.torpedoquery.jpa.Torpedo.from;\nimport static org.torpedoquery.jpa.Torpedo.select;\nimport static org.torpedoquery.jpa.Torpedo.where;\nimport static org.torpedoquery.jpa.TorpedoFunction.length;\nimport static org.torpedoquery.jpa.TorpedoFunction.lower;\nimport static org.torpedoquery.jpa.TorpedoFunction.substring;\nimport static org.torpedoquery.jpa.TorpedoFunction.trim;\nimport static org.torpedoquery.jpa.TorpedoFunction.upper;\n\nimport org.junit.Test;\nimport org.torpedoquery.jpa.test.bo.Entity;\n\n/**\n *\n *substring(), trim(), lower(), upper(), length()\n *\n * @author xjodoin\n * @version $Id: $Id\n * @since 2.0.0\n */\npublic class StringFunctionsTest {\n\n\t/**\n\t * <p>testTrimFunction.</p>\n\t */\n\t@Test\n\tpublic void testTrimFunction() {\n\t\tEntity from = from(Entity.class);\n\t\tQuery<String> select = select(trim(from.getCode()));\n\t\tassertEquals(\"select trim(entity_0.code) from Entity entity_0\", select.getQuery());\n\t}\n\n\t/**\n\t * <p>testLowerFunction.</p>\n\t */\n\t@Test\n\tpublic void testLowerFunction() {\n\t\tEntity from = from(Entity.class);\n\t\tQuery<String> select = select(lower(from.getCode()));\n\t\tassertEquals(\"select lower(entity_0.code) from Entity entity_0\", select.getQuery());\n\t}\n\n\t/**\n\t * <p>testUpperFunction.</p>\n\t */\n\t@Test\n\tpublic void testUpperFunction() {\n\t\tEntity from = from(Entity.class);\n\t\tQuery<String> select = select(upper(from.getCode()));\n\t\tassertEquals(\"select upper(entity_0.code) from Entity entity_0\", select.getQuery());\n\t}\n\t\n\t/**\n\t * <p>testLengthFunction.</p>\n\t */\n\t@Test\n\tpublic void testLengthFunction() {\n\t\tEntity from = from(Entity.class);\n\t\tQuery<Integer> select = select(length(from.getCode()));\n\t\tassertEquals(\"select length(entity_0.code) from Entity entity_0\", select.getQuery());\n\t}\n\t\n\t/**\n\t * <p>testLengthFunctionWithFunction.</p>\n\t */\n\t@Test\n\tpublic void testLengthFunctionWithFunction() {\n\t\tEntity from = from(Entity.class);\n\t\tQuery<Integer> select = select(length(trim(from.getCode())));\n\t\tassertEquals(\"select length(trim(entity_0.code)) from Entity entity_0\", select.getQuery());\n\t}\n\t\n\t/**\n\t * <p>testWhereWithStringFunction.</p>\n\t */\n\t@Test\n\tpublic void testWhereWithStringFunction() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(lower(from.getCode())).like().any(\"test\");\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where lower(entity_0.code) like '%test%'\", select.getQuery());\n\t}\n\t\n\t@Test\n\tpublic void testWhereWithLikeFunction() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(lower(from.getCode())).like(\"%test%\");\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where lower(entity_0.code) like '%test%'\", select.getQuery());\n\t}\n\t\n\t@Test\n\tpublic void testWhereWithNotLikeFunction() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(lower(from.getCode())).notLike(\"%test%\");\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where lower(entity_0.code) not like '%test%'\", select.getQuery());\n\t}\n\t\n\t/**\n\t * <p>testSubstringFunction.</p>\n\t */\n\t@Test\n\tpublic void testSubstringFunction() {\n\t\tEntity from = from(Entity.class);\n\t\tQuery<String> select = select(substring(from.getCode(),2,4));\n\t\tassertEquals(\"select substring(entity_0.code,2,4) from Entity entity_0\", select.getQuery());\n\t}\n\t\n}\n", "/**\n * Copyright (C) 2011 Xavier Jodoin (xavier@jodoin.me)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.torpedoquery.jpa;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\nimport static org.torpedoquery.jpa.Torpedo.and;\nimport static org.torpedoquery.jpa.Torpedo.condition;\nimport static org.torpedoquery.jpa.Torpedo.from;\nimport static org.torpedoquery.jpa.Torpedo.or;\nimport static org.torpedoquery.jpa.Torpedo.select;\nimport static org.torpedoquery.jpa.Torpedo.where;\nimport static org.torpedoquery.jpa.TorpedoFunction.length;\nimport static org.torpedoquery.jpa.TorpedoFunction.lower;\n\nimport java.util.Arrays;\n\nimport org.junit.Test;\nimport org.torpedoquery.jpa.test.bo.Entity;\nimport org.torpedoquery.jpa.test.bo.ExtendEntity;\nimport org.torpedoquery.jpa.test.bo.ExtendSubEntity;\npublic class ValueOnGoingConditionTest {\n\n\t/**\n\t * <p>testEqClassOfQextendsT.</p>\n\t */\n\t@Test\n\tpublic void testEqClassOfQextendsT() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getSubEntity()).eq(ExtendSubEntity.class);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.subEntity.class = ExtendSubEntity\",\n\t\t\t\tselect.getQuery());\n\t\tassertTrue(select.getParameters().isEmpty());\n\t}\n\n\t/**\n\t * <p>testNeqClassOfQextendsT.</p>\n\t */\n\t@Test\n\tpublic void testNeqClassOfQextendsT() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getSubEntity()).neq(ExtendSubEntity.class);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.subEntity.class <> ExtendSubEntity\",\n\t\t\t\tselect.getQuery());\n\t\tassertTrue(select.getParameters().isEmpty());\n\t}\n\n\t/**\n\t * <p>testEdClassWithFromProxy.</p>\n\t */\n\t@Test\n\tpublic void testEdClassWithFromProxy() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from).eq(ExtendEntity.class);\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.class = ExtendEntity\",\n\t\t\t\tselect.getQuery());\n\t\tassertTrue(select.getParameters().isEmpty());\n\t}\n\n\t/**\n\t * <p>testBetweenCondition.</p>\n\t */\n\t@Test\n\tpublic void testBetweenCondition() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).between(\"A\", \"C\");\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.code between :code_1 and :code_2\",\n\t\t\t\tselect.getQuery());\n\t\tassertEquals(\"A\", select.getParameters().get(\"code_1\"));\n\t\tassertEquals(\"C\", select.getParameters().get(\"code_2\"));\n\t}\n\n\t/**\n\t * <p>testNotBetweenCondition.</p>\n\t */\n\t@Test\n\tpublic void testNotBetweenCondition() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).notBetween(\"A\", \"C\");\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.code not between :code_1 and :code_2\",\n\t\t\t\tselect.getQuery());\n\t\tassertEquals(\"A\", select.getParameters().get(\"code_1\"));\n\t\tassertEquals(\"C\", select.getParameters().get(\"code_2\"));\n\t}\n\n\t/**\n\t * <p>testLowerFunctionInCondition.</p>\n\t */\n\t@Test\n\tpublic void testLowerFunctionInCondition() {\n\t\tEntity entity = from(Entity.class);\n\t\tOnGoingLogicalCondition condition = condition(lower(entity.getCode()))\n\t\t\t\t.like().any(\"test\");\n\t\twhere(condition);\n\t\tQuery<Entity> select = select(entity);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where ( lower(entity_0.code) like '%test%'  )\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>testComparableFunctionInCondition.</p>\n\t */\n\t@Test\n\tpublic void testComparableFunctionInCondition() {\n\t\tEntity entity = from(Entity.class);\n\t\tOnGoingLogicalCondition condition = condition(length(entity.getCode()))\n\t\t\t\t.gt(5);\n\t\twhere(condition);\n\t\tQuery<Entity> select = select(entity);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where ( length(entity_0.code) > :function_1 )\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>testOrMultipleOnGoingLogicalConditions.</p>\n\t */\n\t@Test\n\tpublic void testOrMultipleOnGoingLogicalConditions() {\n\t\tEntity entity = from(Entity.class);\n\t\tOnGoingLogicalCondition condition = condition(entity.getCode()).eq(\n\t\t\t\t\"test\");\n\t\tOnGoingLogicalCondition condition2 = condition(entity.getCode()).eq(\n\t\t\t\t\"test2\");\n\n\t\twhere(or(condition, condition2));\n\t\tQuery<Entity> select = select(entity);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where ( ( entity_0.code = :code_1 ) or ( entity_0.code = :code_2 ) )\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>testAndMultipleOnGoingLogicalConditions2.</p>\n\t */\n\t@Test\n\tpublic void testAndMultipleOnGoingLogicalConditions2() {\n\t\tEntity entity = from(Entity.class);\n\t\tOnGoingLogicalCondition condition = condition(entity.getCode()).eq(\n\t\t\t\t\"test\");\n\t\tOnGoingLogicalCondition condition2 = condition(entity.getCode()).eq(\n\t\t\t\t\"test2\");\n\n\t\twhere(and(Arrays.asList(condition, condition2)));\n\t\tQuery<Entity> select = select(entity);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where ( ( entity_0.code = :code_1 ) and ( entity_0.code = :code_2 ) )\",\n\t\t\t\tselect.getQuery());\n\t}\n\n}\n", "/**\n * Copyright (C) 2011 Xavier Jodoin (xavier@jodoin.me)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.torpedoquery.jpa;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.torpedoquery.jpa.Torpedo.condition;\nimport static org.torpedoquery.jpa.Torpedo.from;\nimport static org.torpedoquery.jpa.Torpedo.innerJoin;\nimport static org.torpedoquery.jpa.Torpedo.select;\nimport static org.torpedoquery.jpa.Torpedo.where;\nimport static org.torpedoquery.jpa.TorpedoFunction.avg;\nimport static org.torpedoquery.jpa.TorpedoFunction.max;\n\nimport java.util.Date;\nimport java.util.Map;\nimport java.util.Optional;\n\nimport org.junit.Test;\nimport org.torpedoquery.jpa.test.bo.Entity;\nimport org.torpedoquery.jpa.test.bo.SubEntity;\n\npublic class WhereClauseTest {\n\n\t/**\n\t * <p>test_eq.</p>\n\t */\n\t@Test\n\tpublic void test_eq() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).eq(\"test\");\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code = :code_1\", select.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_neq.</p>\n\t */\n\t@Test\n\tpublic void test_neq() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).neq(\"test\");\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code <> :code_1\", select.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_lt.</p>\n\t */\n\t@Test\n\tpublic void test_lt() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getIntegerField()).lt(2);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.integerField < :integerField_1\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_lte.</p>\n\t */\n\t@Test\n\tpublic void test_lte() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getIntegerField()).lte(2);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.integerField <= :integerField_1\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_gt.</p>\n\t */\n\t@Test\n\tpublic void test_gt() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getIntegerField()).gt(2);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.integerField > :integerField_1\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_gte.</p>\n\t */\n\t@Test\n\tpublic void test_gte() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getIntegerField()).gte(2);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.integerField >= :integerField_1\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_gte_primitive.</p>\n\t */\n\t@Test\n\tpublic void test_gte_primitive() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getPrimitiveInt()).gte(2);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.primitiveInt >= :primitiveInt_1\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_isNull.</p>\n\t */\n\t@Test\n\tpublic void test_isNull() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).isNull();\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code is null\", select.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_isNotNull.</p>\n\t */\n\t@Test\n\tpublic void test_isNotNull() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).isNotNull();\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code is not null\", select.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_in_values.</p>\n\t */\n\t@Test\n\tpublic void test_in_values() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getPrimitiveInt()).in(3, 4);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.primitiveInt in ( :primitiveInt_1 )\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_in_subSelect.</p>\n\t */\n\t@Test\n\tpublic void test_in_subSelect() {\n\t\tEntity subSelect = from(Entity.class);\n\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).in(select(subSelect.getCode()));\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.code in ( select entity_1.code from Entity entity_1 )\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_notIn_values.</p>\n\t */\n\t@Test\n\tpublic void test_notIn_values() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getPrimitiveInt()).notIn(3, 4);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.primitiveInt not in ( :primitiveInt_1 )\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_notIn_subSelect.</p>\n\t */\n\t@Test\n\tpublic void test_notIn_subSelect() {\n\t\tEntity subSelect = from(Entity.class);\n\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).notIn(select(subSelect.getCode()));\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.code not in ( select entity_1.code from Entity entity_1 )\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_in_subSelect_with_params.</p>\n\t */\n\t@Test\n\tpublic void test_in_subSelect_with_params() {\n\t\tEntity subSelect = from(Entity.class);\n\t\twhere(subSelect.getCode()).eq(\"subquery\");\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).in(select(subSelect.getCode()));\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.code in ( select entity_1.code from Entity entity_1 where entity_1.code = :code_2 )\",\n\t\t\t\tselect.getQuery());\n\t\tMap<String, Object> params = select.getParameters();\n\t\tassertEquals(1, params.size());\n\t\tassertEquals(\"subquery\", params.get(\"code_2\"));\n\n\t}\n\n\t/**\n\t * <p>test_subSelect_with_gt.</p>\n\t */\n\t@Test\n\tpublic void test_subSelect_with_gt() {\n\t\tEntity subSelect = from(Entity.class);\n\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getIntegerField()).gt(select((avg(subSelect.getIntegerField()))));\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.integerField > ( select avg(entity_1.integerField) from Entity entity_1 )\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_subSelect_with_gt_and_params.</p>\n\t */\n\t@Test\n\tpublic void test_subSelect_with_gt_and_params() {\n\t\tEntity subSelect = from(Entity.class);\n\t\twhere(subSelect.getCode()).eq(\"toto\");\n\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getIntegerField()).gt(select(avg(subSelect.getIntegerField())));\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.integerField > ( select avg(entity_1.integerField) from Entity entity_1 where entity_1.code = :code_2 )\",\n\t\t\t\tselect.getQuery());\n\t\tassertEquals(\"toto\", select.getParameters().get(\"code_2\"));\n\n\t}\n\n\t/**\n\t * <p>test_subSelect_in_select_clause.</p>\n\t */\n\t@Test\n\tpublic void test_subSelect_in_select_clause() {\n\t\tEntity subSelect = from(Entity.class);\n\n\t\tEntity from = from(Entity.class);\n\t\tQuery<Integer> select2 = select(max(subSelect.getIntegerField()));\n\t\tQuery<Object[]> select = select(from.getName(), select2);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0.name, ( select max(entity_1.integerField) from Entity entity_1 ) from Entity entity_0\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_subSelect_with_comparable_where_clause.</p>\n\t */\n\t@Test\n\tpublic void test_subSelect_with_comparable_where_clause() {\n\t\tEntity subSelect = from(Entity.class);\n\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getIntegerField()).gt(select(avg(subSelect.getIntegerField())));\n\t\tQuery<String> select = select(from.getName());\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0.name from Entity entity_0 where entity_0.integerField > ( select avg(entity_1.integerField) from Entity entity_1 )\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_And_WhereClause.</p>\n\t */\n\t@Test\n\tpublic void test_And_WhereClause() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getName()).eq(\"test\").and(from.getPrimitiveInt()).gt(10);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.name = :name_1 and entity_0.primitiveInt > :primitiveInt_2\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>test_Or_WhereClause.</p>\n\t */\n\t@Test\n\tpublic void test_Or_WhereClause() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getName()).eq(\"test\").or(from.getPrimitiveInt()).gt(10);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.name = :name_1 or entity_0.primitiveInt > :primitiveInt_2\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>test_like_any.</p>\n\t */\n\t@Test\n\tpublic void test_like_any() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).like().any(\"test\");\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code like '%test%'\", select.getQuery());\n\t}\n\t\n\t/**\n\t * <p>test_like_any.</p>\n\t */\n\t@Test\n\tpublic void test_notLike_any() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).notLike().any(\"test\");\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code not like '%test%'\", select.getQuery());\n\t}\n\n\t/**\n\t * <p>test_like_startsWith.</p>\n\t */\n\t@Test\n\tpublic void test_like_startsWith() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).like().startsWith(\"test\");\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code like 'test%'\", select.getQuery());\n\t}\n\t\n\t@Test\n\tpublic void test_notLike_startsWith() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).notLike().startsWith(\"test\");\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code not like 'test%'\", select.getQuery());\n\t}\n\n\t/**\n\t * <p>test_like_endsWith.</p>\n\t */\n\t@Test\n\tpublic void test_like_endsWith() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).like().endsWith(\"test\");\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code like '%test'\", select.getQuery());\n\t}\n\t\n\t/**\n\t * <p>test_like_endsWith.</p>\n\t */\n\t@Test\n\tpublic void test_notLike_endsWith() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).notLike().endsWith(\"test\");\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code not like '%test'\", select.getQuery());\n\t}\n\n\t/**\n\t * <p>test_is_empty.</p>\n\t */\n\t@Test\n\tpublic void test_is_empty() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getSubEntities()).isEmpty();\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.subEntities is empty\", select.getQuery());\n\t}\n\n\t/**\n\t * <p>test_is_not_empty.</p>\n\t */\n\t@Test\n\tpublic void test_is_not_empty() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getSubEntities()).isNotEmpty();\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.subEntities is not empty\", select.getQuery());\n\t}\n\n\t/**\n\t * <p>test_size.</p>\n\t */\n\t@Test\n\tpublic void test_size() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getSubEntities()).size().gt(2);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.subEntities.size > :subEntities_1\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>test_member_of.</p>\n\t */\n\t@Test\n\tpublic void test_member_of() {\n\t\tEntity fromEntity = from(Entity.class);\n\t\twhere(fromEntity.getValueCollection()).memberOf(\"VALUE\");\n\t\tQuery<Entity> query = select(fromEntity);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where :valueCollection_1 member of entity_0.valueCollection\", query.getQuery());\n\t}\n\n\t/**\n\t * <p>test_where_with_condition_and.</p>\n\t */\n\t@Test\n\tpublic void test_where_with_condition_and() {\n\t\tEntity from = from(Entity.class);\n\t\tOnGoingLogicalCondition condition = condition(from.getCode()).eq(\"test\").or(from.getCode()).eq(\"test2\");\n\t\twhere(from.getName()).eq(\"test\").and(condition);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.name = :name_1 and ( entity_0.code = :code_2 or entity_0.code = :code_3 )\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>test_where_with_condition_or.</p>\n\t */\n\t@Test\n\tpublic void test_where_with_condition_or() {\n\t\tEntity from = from(Entity.class);\n\t\tOnGoingLogicalCondition condition = condition(from.getCode()).eq(\"test\").or(from.getCode()).eq(\"test2\");\n\t\twhere(from.getName()).eq(\"test\").or(condition);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.name = :name_1 or ( entity_0.code = :code_2 or entity_0.code = :code_3 )\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>test_where_with_condition_or_inline.</p>\n\t */\n\t@Test\n\tpublic void test_where_with_condition_or_inline() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getName()).eq(\"test\").or(condition(from.getCode()).eq(\"test\").or(from.getCode()).eq(\"test2\"));\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.name = :name_1 or ( entity_0.code = :code_2 or entity_0.code = :code_3 )\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>test_condition_with_root_and_inner.</p>\n\t */\n\t@Test\n\tpublic void test_condition_with_root_and_inner() {\n\n\t\tEntity entity = from(Entity.class);\n\t\tSubEntity subEntity = innerJoin(entity.getSubEntities());\n\t\tOnGoingLogicalCondition condition = condition(entity.getCode()).eq(\"test1\").or(subEntity.getCode()).eq(\"test2\");\n\t\twhere(entity.getIntegerField()).gt(10).and(condition);\n\n\t\tQuery<Entity> select = select(entity);\n\t\tString query = select.getQuery();\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 inner join entity_0.subEntities subEntity_1 where entity_0.integerField > :integerField_2 and ( entity_0.code = :code_3 or subEntity_1.code = :code_4 )\",\n\t\t\t\tquery);\n\t}\n\n\t/**\n\t * <p>test_acceptConditionIntoCondition.</p>\n\t */\n\t@Test\n\tpublic void test_acceptConditionIntoCondition() {\n\t\tEntity from = from(Entity.class);\n\t\tOnGoingLogicalCondition onGoingLogicalCondition = condition(from.getName()).eq(\"test\").or(from.getName())\n\t\t\t\t.eq(\"test2\");\n\t\tOnGoingLogicalCondition eq = condition(onGoingLogicalCondition).and(from.getCode()).eq(\"mycode\");\n\t\twhere(eq);\n\t\tQuery<Entity> select = select(from);\n\t\tString query = select.getQuery();\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where ( ( entity_0.name = :name_1 or entity_0.name = :name_2 ) and entity_0.code = :code_3 )\",\n\t\t\t\tquery);\n\t}\n\n\t/**\n\t * <p>test_where_three_conditions.</p>\n\t */\n\t@Test\n\tpublic void test_where_three_conditions() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getName()).eq(\"test\").and(from.getIntegerField()).gt(2).and(from.getCode()).eq(\"test\");\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.name = :name_1 and entity_0.integerField > :integerField_2 and entity_0.code = :code_3\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>testDateFieldAccessToRelationalCondition.</p>\n\t */\n\t@Test\n\tpublic void testDateFieldAccessToRelationalCondition() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getDateField()).gt(new Date());\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.dateField > :dateField_1\", select.getQuery());\n\t}\n\n\t/**\n\t * <p>acceptConditionInWhere.</p>\n\t */\n\t@Test\n\tpublic void acceptConditionInWhere() {\n\t\tEntity from = from(Entity.class);\n\t\tOnGoingLogicalCondition conditon = condition(from.getCode()).eq(\"test\").and(from.getPrimitiveInt()).gt(3);\n\t\twhere(conditon);\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where ( entity_0.code = :code_1 and entity_0.primitiveInt > :primitiveInt_2 )\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>acceptConditionInWhere_plusExternalCondition.</p>\n\t */\n\t@Test\n\tpublic void acceptConditionInWhere_plusExternalCondition() {\n\t\tEntity from = from(Entity.class);\n\t\tOnGoingLogicalCondition conditon = condition(from.getCode()).eq(\"test\").and(from.getPrimitiveInt()).gt(3);\n\t\twhere(conditon).and(from.getName()).isNotNull();\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where ( entity_0.code = :code_1 and entity_0.primitiveInt > :primitiveInt_2 ) and entity_0.name is not null\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>conditionOnRelatedField.</p>\n\t */\n\t@Test\n\tpublic void conditionOnRelatedField() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).eq(from.getName());\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code = entity_0.name\", select.getQuery());\n\t}\n\n\t/**\n\t * <p>chainMethodCallIntoWhere.</p>\n\t */\n\t@Test\n\tpublic void chainMethodCallIntoWhere() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getSubEntity().getName()).eq(\"test\");\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.subEntity.name = :name_1\", select.getQuery());\n\t}\n\n\t/**\n\t * <p>chainMethodCallOnAbstractMethodOveride.</p>\n\t */\n\t@Test\n\tpublic void chainMethodCallOnAbstractMethodOveride() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getAbstractEntity().getName()).eq(\"test\");\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.abstractEntity.name = :name_1\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>testSmallCharBug16.</p>\n\t */\n\t@Test\n\tpublic void testSmallCharBug16() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getSmallChar()).eq('c');\n\t\tQuery<Entity> select2 = select(from);\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.smallChar = :smallChar_1\",\n\t\t\t\tselect2.getQuery());\n\t}\n\n\t/**\n\t * <p>testGetTheConditionQuery.</p>\n\t */\n\t@Test\n\tpublic void testGetTheConditionQuery() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getSmallChar()).eq('c');\n\t\tQuery<String> select2 = select(from.getName());\n\n\t\tOnGoingLogicalCondition condition = select2.condition().get();\n\t\tcondition.and(from.getId()).eq(\"test\");\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0.name from Entity entity_0 where entity_0.smallChar = :smallChar_1 and entity_0.id = :id_2\",\n\t\t\t\tselect2.getQuery());\n\t}\n\n\t/**\n\t * <p>testGetEmptyConditionQuery.</p>\n\t */\n\t@Test\n\tpublic void testGetEmptyConditionQuery() {\n\t\tEntity from = from(Entity.class);\n\t\tQuery<String> select2 = select(from.getName());\n\n\t\tOptional<OnGoingLogicalCondition> condition = select2.condition();\n\n\t\tif (condition.isPresent()) {\n\t\t\tcondition.get().and(from.getSmallChar()).eq('c');\n\t\t} else {\n\t\t\twhere(from.getSmallChar()).eq('c');\n\t\t}\n\n\t\tassertEquals(\"select entity_0.name from Entity entity_0 where entity_0.smallChar = :smallChar_1\",\n\t\t\t\tselect2.getQuery());\n\t}\n\n}\n"], "fixing_code": ["\n/**\n * Copyright (C) 2011 Xavier Jodoin (xavier@jodoin.me)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author xjodoin\n * @version $Id: $Id\n */\npackage org.torpedoquery.jpa.internal.conditions;\n\nimport java.io.Serializable;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport org.torpedoquery.core.QueryBuilder;\nimport org.torpedoquery.jpa.ComparableFunction;\nimport org.torpedoquery.jpa.Function;\nimport org.torpedoquery.jpa.OnGoingCollectionCondition;\nimport org.torpedoquery.jpa.OnGoingComparableCondition;\nimport org.torpedoquery.jpa.OnGoingLikeCondition;\nimport org.torpedoquery.jpa.OnGoingLogicalCondition;\nimport org.torpedoquery.jpa.OnGoingStringCondition;\nimport org.torpedoquery.jpa.Query;\nimport org.torpedoquery.jpa.internal.Condition;\nimport org.torpedoquery.jpa.internal.Parameter;\nimport org.torpedoquery.jpa.internal.Selector;\nimport org.torpedoquery.jpa.internal.conditions.LikeCondition.Type;\nimport org.torpedoquery.jpa.internal.selectors.NotSelector;\nimport org.torpedoquery.jpa.internal.selectors.SizeSelector;\npublic class ConditionBuilder<T> implements OnGoingComparableCondition<T>, OnGoingStringCondition<T>,\n\t\tOnGoingLikeCondition, OnGoingCollectionCondition<T>, Condition, Serializable {\n\tprivate Selector selector;\n\tprivate final LogicalCondition logicalCondition;\n\tprivate Condition condition;\n\tprivate boolean notLike;\n\n\t/**\n\t * <p>\n\t * Constructor for ConditionBuilder.\n\t * </p>\n\t *\n\t * @param builder\n\t *            a {@link org.torpedoquery.core.QueryBuilder} object.\n\t * @param selector\n\t *            a {@link org.torpedoquery.jpa.internal.Selector} object.\n\t */\n\tpublic ConditionBuilder(QueryBuilder<T> builder, Selector<?> selector) {\n\t\tthis.logicalCondition = new LogicalCondition(builder, this);\n\t\tthis.selector = selector;\n\t}\n\n\t/**\n\t * <p>\n\t * Constructor for ConditionBuilder.\n\t * </p>\n\t *\n\t * @param logicalCondition\n\t *            a\n\t *            {@link org.torpedoquery.jpa.internal.conditions.LogicalCondition}\n\t *            object.\n\t * @param selector\n\t *            a {@link org.torpedoquery.jpa.internal.Selector} object.\n\t */\n\tpublic ConditionBuilder(LogicalCondition logicalCondition, Selector<?> selector) {\n\t\tthis.logicalCondition = logicalCondition;\n\t\tthis.selector = selector;\n\t}\n\n\t/**\n\t * <p>\n\t * Getter for the field <code>logicalCondition</code>.\n\t * </p>\n\t *\n\t * @return a\n\t *         {@link org.torpedoquery.jpa.internal.conditions.LogicalCondition}\n\t *         object.\n\t */\n\tpublic LogicalCondition getLogicalCondition() {\n\t\treturn logicalCondition;\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition eq(T value) {\n\t\tCondition conditionLocal = new EqualCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition eq(Class<? extends T> value) {\n\t\tCondition conditionLocal = new EqualPolymorphicCondition<T>(selector, value);\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition neq(T value) {\n\t\tCondition conditionLocal = new NotEqualCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition neq(Class<? extends T> value) {\n\t\tCondition conditionLocal = new NotEqualPolymorphicCondition<T>(selector, value);\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition lt(T value) {\n\t\tCondition conditionLocal = new LtCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition lte(T value) {\n\t\tCondition conditionLocal = new LteCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition gt(T value) {\n\t\tCondition conditionLocal = new GtCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition gte(T value) {\n\t\tCondition conditionLocal = new GteCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition isNull() {\n\t\tCondition conditionLocal = new IsNullCondition(selector);\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition isNotNull() {\n\t\tCondition conditionLocal = new IsNotNullCondition(selector);\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition in(T... values) {\n\t\treturn in(Arrays.asList(values));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition in(Collection<T> values) {\n\t\tCondition conditionLocal = new InCondition<T>(selector, selector.generateParameter(values));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition in(Query<T> query) {\n\t\tCondition conditionLocal = new InSubQueryCondition<T>(selector, (QueryBuilder) query);\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition notIn(T... values) {\n\t\treturn notIn(Arrays.asList(values));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition notIn(Collection<T> values) {\n\t\treturn getOnGoingLogicalCondition(new NotInCondition<T>(selector, selector.generateParameter(values)));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition notIn(Query<T> subQuery) {\n\t\treturn getOnGoingLogicalCondition(new NotInSubQueryCondition<T>(selector, (QueryBuilder) subQuery));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic String createQueryFragment(AtomicInteger incrementor) {\n\t\tif (condition != null) {\n\t\t\treturn condition.createQueryFragment(incrementor);\n\t\t} else {\n\t\t\treturn \"\";\n\t\t}\n\n\t}\n\n\tprivate OnGoingLogicalCondition getOnGoingLogicalCondition(Condition condition) {\n\t\tthis.condition = condition;\n\t\treturn logicalCondition;\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic List<Parameter> getParameters() {\n\t\tif (condition != null) {\n\t\t\treturn condition.getParameters();\n\t\t} else {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLikeCondition like() {\n\t\treturn this;\n\t}\n\t\n\t@Override\n\tpublic OnGoingLogicalCondition like(String likeValue) {\n\t\treturn getOnGoingLogicalCondition(createLike(LikeCondition.Type.UNKNOW, likeValue));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLikeCondition notLike() {\n\t\tnotLike = true;\n\t\treturn this;\n\t}\n\t\n\t@Override\n\tpublic OnGoingLogicalCondition notLike(String notLikeValue) {\n\t\tnotLike = true;\n\t\treturn getOnGoingLogicalCondition(createLike(LikeCondition.Type.UNKNOW, notLikeValue));\n\t}\n\n\tprivate LikeCondition createLike(Type type, String toMatch) {\n\t\tif (notLike) {\n\t\t\treturn new NotLikeCondition(selector, selector.generateParameter(type.wrap(toMatch)));\n\t\t} else {\n\t\t\treturn new LikeCondition(selector, selector.generateParameter(type.wrap(toMatch)));\n\t\t}\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition any(String toMatch) {\n\t\treturn getOnGoingLogicalCondition(createLike(LikeCondition.Type.ANY, toMatch));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition startsWith(String toMatch) {\n\t\treturn getOnGoingLogicalCondition(createLike(LikeCondition.Type.STARTSWITH, toMatch));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition endsWith(String toMatch) {\n\t\treturn getOnGoingLogicalCondition(createLike(LikeCondition.Type.ENDSWITH, toMatch));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition isEmpty() {\n\t\treturn getOnGoingLogicalCondition(new IsEmptyCondition(selector));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition isNotEmpty() {\n\t\treturn getOnGoingLogicalCondition(new IsNotEmptyCondition(selector));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition memberOf(T member) {\n\t\treturn getOnGoingLogicalCondition(new MemberOfCondition<>(selector, selector.generateParameter(member)));\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingComparableCondition<Integer> size() {\n\t\tselector = new SizeSelector(selector);\n\t\treturn (OnGoingComparableCondition<Integer>) this;\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition lt(ComparableFunction<T> value) {\n\t\tCondition conditionLocal = new LtCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition lte(ComparableFunction<T> value) {\n\t\tCondition conditionLocal = new LteCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition gt(ComparableFunction<T> value) {\n\t\tCondition conditionLocal = new GtCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition gte(ComparableFunction<T> value) {\n\t\tCondition conditionLocal = new GteCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition eq(Function<T> value) {\n\t\tCondition conditionLocal = new EqualCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition neq(Function<T> value) {\n\t\tCondition conditionLocal = new NotEqualCondition<T>(selector, selector.generateParameter(value));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition between(T from, T to) {\n\t\tCondition conditionLocal = new BetweenCondition<T>(selector,\n\t\t\t\tArrays.asList(selector.generateParameter(from), selector.generateParameter(to)));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition notBetween(T from, T to) {\n\t\tCondition conditionLocal = new BetweenCondition<T>(new NotSelector(selector),\n\t\t\t\tArrays.asList(selector.generateParameter(from), selector.generateParameter(to)));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition between(ComparableFunction<T> from, ComparableFunction<T> to) {\n\t\tCondition conditionLocal = new BetweenCondition<T>(selector,\n\t\t\t\tArrays.asList(selector.generateParameter(from), selector.generateParameter(to)));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic OnGoingLogicalCondition notBetween(ComparableFunction<T> from, ComparableFunction<T> to) {\n\t\tCondition conditionLocal = new BetweenCondition<T>(new NotSelector(selector),\n\t\t\t\tArrays.asList(selector.generateParameter(from), selector.generateParameter(to)));\n\t\treturn getOnGoingLogicalCondition(conditionLocal);\n\t}\n\t\n\t/** {@inheritDoc} */\n\t@Override\n\tpublic <T> QueryBuilder<T> getBuilder() {\n\t\treturn logicalCondition.getBuilder();\n\t}\n\t\n}\n", "\n/**\n * Copyright (C) 2011 Xavier Jodoin (xavier@jodoin.me)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author xjodoin\n * @version $Id: $Id\n */\npackage org.torpedoquery.jpa.internal.conditions;\n\nimport org.torpedoquery.jpa.internal.Parameter;\nimport org.torpedoquery.jpa.internal.Selector;\n\npublic class LikeCondition<T> extends SingleParameterCondition<T> {\n\n\tpublic static enum Type {\n\t\tANY {\n\t\t\t@Override\n\t\t\tpublic String wrap(String toMatch) {\n\t\t\t\treturn \"%\" + toMatch + \"%\";\n\t\t\t}\n\t\t},\n\t\tSTARTSWITH {\n\t\t\t@Override\n\t\t\tpublic String wrap(String toMatch) {\n\t\t\t\treturn toMatch + \"%\";\n\t\t\t}\n\t\t},\n\t\tENDSWITH {\n\t\t\t@Override\n\t\t\tpublic String wrap(String toMatch) {\n\t\t\t\treturn \"%\" + toMatch;\n\t\t\t}\n\t\t},\n\t\tUNKNOW {\n\t\t\t@Override\n\t\t\tpublic String wrap(String toMatch) {\n\t\t\t\treturn toMatch;\n\t\t\t}\n\t\t};\n\n\t\tpublic abstract String wrap(String toMatch);\n\t}\n\n\t/**\n\t * <p>\n\t * Constructor for LikeCondition.\n\t * </p>\n\t *\n\t * @param type     a\n\t *                 {@link org.torpedoquery.jpa.internal.conditions.LikeCondition.Type}\n\t *                 object.\n\t * @param selector a {@link org.torpedoquery.jpa.internal.Selector} object.\n\t * @param toMatch  a {@link java.lang.String} object.\n\t */\n\tpublic LikeCondition(Selector selector, Parameter<T> parameter) {\n\t\tsuper(selector, parameter);\n\t}\n\n\t@Override\n\tprotected String getComparator() {\n\t\treturn \"like\";\n\t}\n\n}\n", "\n/**\n * Copyright (C) 2011 Xavier Jodoin (xavier@jodoin.me)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author xjodoin\n * @version $Id: $Id\n */\npackage org.torpedoquery.jpa.internal.conditions;\n\nimport org.torpedoquery.jpa.internal.Parameter;\nimport org.torpedoquery.jpa.internal.Selector;\npublic class NotLikeCondition<T> extends LikeCondition<T> {\n\n\t/**\n\t * <p>Constructor for NotLikeCondition.</p>\n\t *\n\t * @param type a Type object.\n\t * @param selector a {@link org.torpedoquery.jpa.internal.Selector} object.\n\t * @param toMatch a {@link java.lang.String} object.\n\t */\n\tpublic NotLikeCondition(Selector selector, Parameter<T> parameter) {\n\t\tsuper(selector,parameter);\n\t}\n\n\t@Override\n\tprotected String getComparator() {\n\t\treturn \"not \" + super.getComparator();\n\t}\n\n}\n", "/**\n * Copyright (C) 2011 Xavier Jodoin (xavier@jodoin.me)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.torpedoquery.jpa;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.torpedoquery.jpa.Torpedo.from;\nimport static org.torpedoquery.jpa.Torpedo.select;\nimport static org.torpedoquery.jpa.Torpedo.where;\nimport static org.torpedoquery.jpa.TorpedoFunction.length;\nimport static org.torpedoquery.jpa.TorpedoFunction.lower;\nimport static org.torpedoquery.jpa.TorpedoFunction.substring;\nimport static org.torpedoquery.jpa.TorpedoFunction.trim;\nimport static org.torpedoquery.jpa.TorpedoFunction.upper;\n\nimport org.junit.Test;\nimport org.torpedoquery.jpa.test.bo.Entity;\n\n/**\n *\n *substring(), trim(), lower(), upper(), length()\n *\n * @author xjodoin\n * @version $Id: $Id\n * @since 2.0.0\n */\npublic class StringFunctionsTest {\n\n\t/**\n\t * <p>testTrimFunction.</p>\n\t */\n\t@Test\n\tpublic void testTrimFunction() {\n\t\tEntity from = from(Entity.class);\n\t\tQuery<String> select = select(trim(from.getCode()));\n\t\tassertEquals(\"select trim(entity_0.code) from Entity entity_0\", select.getQuery());\n\t}\n\n\t/**\n\t * <p>testLowerFunction.</p>\n\t */\n\t@Test\n\tpublic void testLowerFunction() {\n\t\tEntity from = from(Entity.class);\n\t\tQuery<String> select = select(lower(from.getCode()));\n\t\tassertEquals(\"select lower(entity_0.code) from Entity entity_0\", select.getQuery());\n\t}\n\n\t/**\n\t * <p>testUpperFunction.</p>\n\t */\n\t@Test\n\tpublic void testUpperFunction() {\n\t\tEntity from = from(Entity.class);\n\t\tQuery<String> select = select(upper(from.getCode()));\n\t\tassertEquals(\"select upper(entity_0.code) from Entity entity_0\", select.getQuery());\n\t}\n\t\n\t/**\n\t * <p>testLengthFunction.</p>\n\t */\n\t@Test\n\tpublic void testLengthFunction() {\n\t\tEntity from = from(Entity.class);\n\t\tQuery<Integer> select = select(length(from.getCode()));\n\t\tassertEquals(\"select length(entity_0.code) from Entity entity_0\", select.getQuery());\n\t}\n\t\n\t/**\n\t * <p>testLengthFunctionWithFunction.</p>\n\t */\n\t@Test\n\tpublic void testLengthFunctionWithFunction() {\n\t\tEntity from = from(Entity.class);\n\t\tQuery<Integer> select = select(length(trim(from.getCode())));\n\t\tassertEquals(\"select length(trim(entity_0.code)) from Entity entity_0\", select.getQuery());\n\t}\n\t\n\t/**\n\t * <p>testWhereWithStringFunction.</p>\n\t */\n\t@Test\n\tpublic void testWhereWithStringFunction() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(lower(from.getCode())).like().any(\"test\");\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where lower(entity_0.code) like :function_1\", select.getQuery());\n\t\tassertEquals(\"%test%\", select.getParameters().get(\"function_1\"));\n\t}\n\t\n\t@Test\n\tpublic void testWhereWithLikeFunction() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(lower(from.getCode())).like(\"%test%\");\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where lower(entity_0.code) like :function_1\", select.getQuery());\n\t\tassertEquals(\"%test%\", select.getParameters().get(\"function_1\"));\n\t}\n\t\n\t@Test\n\tpublic void testWhereWithNotLikeFunction() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(lower(from.getCode())).notLike(\"%test%\");\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where lower(entity_0.code) not like :function_1\", select.getQuery());\n\t\tassertEquals(\"%test%\", select.getParameters().get(\"function_1\"));\n\t}\n\t\n\t/**\n\t * <p>testSubstringFunction.</p>\n\t */\n\t@Test\n\tpublic void testSubstringFunction() {\n\t\tEntity from = from(Entity.class);\n\t\tQuery<String> select = select(substring(from.getCode(),2,4));\n\t\tassertEquals(\"select substring(entity_0.code,2,4) from Entity entity_0\", select.getQuery());\n\t}\n\t\n}\n", "/**\n * Copyright (C) 2011 Xavier Jodoin (xavier@jodoin.me)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.torpedoquery.jpa;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\nimport static org.torpedoquery.jpa.Torpedo.and;\nimport static org.torpedoquery.jpa.Torpedo.condition;\nimport static org.torpedoquery.jpa.Torpedo.from;\nimport static org.torpedoquery.jpa.Torpedo.or;\nimport static org.torpedoquery.jpa.Torpedo.select;\nimport static org.torpedoquery.jpa.Torpedo.where;\nimport static org.torpedoquery.jpa.TorpedoFunction.length;\nimport static org.torpedoquery.jpa.TorpedoFunction.lower;\n\nimport java.util.Arrays;\n\nimport org.junit.Test;\nimport org.torpedoquery.jpa.test.bo.Entity;\nimport org.torpedoquery.jpa.test.bo.ExtendEntity;\nimport org.torpedoquery.jpa.test.bo.ExtendSubEntity;\npublic class ValueOnGoingConditionTest {\n\n\t/**\n\t * <p>testEqClassOfQextendsT.</p>\n\t */\n\t@Test\n\tpublic void testEqClassOfQextendsT() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getSubEntity()).eq(ExtendSubEntity.class);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.subEntity.class = ExtendSubEntity\",\n\t\t\t\tselect.getQuery());\n\t\tassertTrue(select.getParameters().isEmpty());\n\t}\n\n\t/**\n\t * <p>testNeqClassOfQextendsT.</p>\n\t */\n\t@Test\n\tpublic void testNeqClassOfQextendsT() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getSubEntity()).neq(ExtendSubEntity.class);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.subEntity.class <> ExtendSubEntity\",\n\t\t\t\tselect.getQuery());\n\t\tassertTrue(select.getParameters().isEmpty());\n\t}\n\n\t/**\n\t * <p>testEdClassWithFromProxy.</p>\n\t */\n\t@Test\n\tpublic void testEdClassWithFromProxy() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from).eq(ExtendEntity.class);\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.class = ExtendEntity\",\n\t\t\t\tselect.getQuery());\n\t\tassertTrue(select.getParameters().isEmpty());\n\t}\n\n\t/**\n\t * <p>testBetweenCondition.</p>\n\t */\n\t@Test\n\tpublic void testBetweenCondition() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).between(\"A\", \"C\");\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.code between :code_1 and :code_2\",\n\t\t\t\tselect.getQuery());\n\t\tassertEquals(\"A\", select.getParameters().get(\"code_1\"));\n\t\tassertEquals(\"C\", select.getParameters().get(\"code_2\"));\n\t}\n\n\t/**\n\t * <p>testNotBetweenCondition.</p>\n\t */\n\t@Test\n\tpublic void testNotBetweenCondition() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).notBetween(\"A\", \"C\");\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.code not between :code_1 and :code_2\",\n\t\t\t\tselect.getQuery());\n\t\tassertEquals(\"A\", select.getParameters().get(\"code_1\"));\n\t\tassertEquals(\"C\", select.getParameters().get(\"code_2\"));\n\t}\n\n\t/**\n\t * <p>testLowerFunctionInCondition.</p>\n\t */\n\t@Test\n\tpublic void testLowerFunctionInCondition() {\n\t\tEntity entity = from(Entity.class);\n\t\tOnGoingLogicalCondition condition = condition(lower(entity.getCode()))\n\t\t\t\t.like().any(\"test\");\n\t\twhere(condition);\n\t\tQuery<Entity> select = select(entity);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where ( lower(entity_0.code) like :function_1 )\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>testComparableFunctionInCondition.</p>\n\t */\n\t@Test\n\tpublic void testComparableFunctionInCondition() {\n\t\tEntity entity = from(Entity.class);\n\t\tOnGoingLogicalCondition condition = condition(length(entity.getCode()))\n\t\t\t\t.gt(5);\n\t\twhere(condition);\n\t\tQuery<Entity> select = select(entity);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where ( length(entity_0.code) > :function_1 )\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>testOrMultipleOnGoingLogicalConditions.</p>\n\t */\n\t@Test\n\tpublic void testOrMultipleOnGoingLogicalConditions() {\n\t\tEntity entity = from(Entity.class);\n\t\tOnGoingLogicalCondition condition = condition(entity.getCode()).eq(\n\t\t\t\t\"test\");\n\t\tOnGoingLogicalCondition condition2 = condition(entity.getCode()).eq(\n\t\t\t\t\"test2\");\n\n\t\twhere(or(condition, condition2));\n\t\tQuery<Entity> select = select(entity);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where ( ( entity_0.code = :code_1 ) or ( entity_0.code = :code_2 ) )\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>testAndMultipleOnGoingLogicalConditions2.</p>\n\t */\n\t@Test\n\tpublic void testAndMultipleOnGoingLogicalConditions2() {\n\t\tEntity entity = from(Entity.class);\n\t\tOnGoingLogicalCondition condition = condition(entity.getCode()).eq(\n\t\t\t\t\"test\");\n\t\tOnGoingLogicalCondition condition2 = condition(entity.getCode()).eq(\n\t\t\t\t\"test2\");\n\n\t\twhere(and(Arrays.asList(condition, condition2)));\n\t\tQuery<Entity> select = select(entity);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where ( ( entity_0.code = :code_1 ) and ( entity_0.code = :code_2 ) )\",\n\t\t\t\tselect.getQuery());\n\t}\n\n}\n", "/**\n * Copyright (C) 2011 Xavier Jodoin (xavier@jodoin.me)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.torpedoquery.jpa;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.torpedoquery.jpa.Torpedo.condition;\nimport static org.torpedoquery.jpa.Torpedo.from;\nimport static org.torpedoquery.jpa.Torpedo.innerJoin;\nimport static org.torpedoquery.jpa.Torpedo.select;\nimport static org.torpedoquery.jpa.Torpedo.where;\nimport static org.torpedoquery.jpa.TorpedoFunction.avg;\nimport static org.torpedoquery.jpa.TorpedoFunction.max;\n\nimport java.util.Date;\nimport java.util.Map;\nimport java.util.Optional;\n\nimport org.junit.Test;\nimport org.torpedoquery.jpa.test.bo.Entity;\nimport org.torpedoquery.jpa.test.bo.SubEntity;\n\npublic class WhereClauseTest {\n\n\t/**\n\t * <p>test_eq.</p>\n\t */\n\t@Test\n\tpublic void test_eq() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).eq(\"test\");\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code = :code_1\", select.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_neq.</p>\n\t */\n\t@Test\n\tpublic void test_neq() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).neq(\"test\");\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code <> :code_1\", select.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_lt.</p>\n\t */\n\t@Test\n\tpublic void test_lt() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getIntegerField()).lt(2);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.integerField < :integerField_1\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_lte.</p>\n\t */\n\t@Test\n\tpublic void test_lte() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getIntegerField()).lte(2);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.integerField <= :integerField_1\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_gt.</p>\n\t */\n\t@Test\n\tpublic void test_gt() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getIntegerField()).gt(2);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.integerField > :integerField_1\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_gte.</p>\n\t */\n\t@Test\n\tpublic void test_gte() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getIntegerField()).gte(2);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.integerField >= :integerField_1\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_gte_primitive.</p>\n\t */\n\t@Test\n\tpublic void test_gte_primitive() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getPrimitiveInt()).gte(2);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.primitiveInt >= :primitiveInt_1\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_isNull.</p>\n\t */\n\t@Test\n\tpublic void test_isNull() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).isNull();\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code is null\", select.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_isNotNull.</p>\n\t */\n\t@Test\n\tpublic void test_isNotNull() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).isNotNull();\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code is not null\", select.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_in_values.</p>\n\t */\n\t@Test\n\tpublic void test_in_values() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getPrimitiveInt()).in(3, 4);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.primitiveInt in ( :primitiveInt_1 )\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_in_subSelect.</p>\n\t */\n\t@Test\n\tpublic void test_in_subSelect() {\n\t\tEntity subSelect = from(Entity.class);\n\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).in(select(subSelect.getCode()));\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.code in ( select entity_1.code from Entity entity_1 )\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_notIn_values.</p>\n\t */\n\t@Test\n\tpublic void test_notIn_values() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getPrimitiveInt()).notIn(3, 4);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.primitiveInt not in ( :primitiveInt_1 )\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_notIn_subSelect.</p>\n\t */\n\t@Test\n\tpublic void test_notIn_subSelect() {\n\t\tEntity subSelect = from(Entity.class);\n\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).notIn(select(subSelect.getCode()));\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.code not in ( select entity_1.code from Entity entity_1 )\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_in_subSelect_with_params.</p>\n\t */\n\t@Test\n\tpublic void test_in_subSelect_with_params() {\n\t\tEntity subSelect = from(Entity.class);\n\t\twhere(subSelect.getCode()).eq(\"subquery\");\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).in(select(subSelect.getCode()));\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.code in ( select entity_1.code from Entity entity_1 where entity_1.code = :code_2 )\",\n\t\t\t\tselect.getQuery());\n\t\tMap<String, Object> params = select.getParameters();\n\t\tassertEquals(1, params.size());\n\t\tassertEquals(\"subquery\", params.get(\"code_2\"));\n\n\t}\n\n\t/**\n\t * <p>test_subSelect_with_gt.</p>\n\t */\n\t@Test\n\tpublic void test_subSelect_with_gt() {\n\t\tEntity subSelect = from(Entity.class);\n\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getIntegerField()).gt(select((avg(subSelect.getIntegerField()))));\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.integerField > ( select avg(entity_1.integerField) from Entity entity_1 )\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_subSelect_with_gt_and_params.</p>\n\t */\n\t@Test\n\tpublic void test_subSelect_with_gt_and_params() {\n\t\tEntity subSelect = from(Entity.class);\n\t\twhere(subSelect.getCode()).eq(\"toto\");\n\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getIntegerField()).gt(select(avg(subSelect.getIntegerField())));\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.integerField > ( select avg(entity_1.integerField) from Entity entity_1 where entity_1.code = :code_2 )\",\n\t\t\t\tselect.getQuery());\n\t\tassertEquals(\"toto\", select.getParameters().get(\"code_2\"));\n\n\t}\n\n\t/**\n\t * <p>test_subSelect_in_select_clause.</p>\n\t */\n\t@Test\n\tpublic void test_subSelect_in_select_clause() {\n\t\tEntity subSelect = from(Entity.class);\n\n\t\tEntity from = from(Entity.class);\n\t\tQuery<Integer> select2 = select(max(subSelect.getIntegerField()));\n\t\tQuery<Object[]> select = select(from.getName(), select2);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0.name, ( select max(entity_1.integerField) from Entity entity_1 ) from Entity entity_0\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_subSelect_with_comparable_where_clause.</p>\n\t */\n\t@Test\n\tpublic void test_subSelect_with_comparable_where_clause() {\n\t\tEntity subSelect = from(Entity.class);\n\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getIntegerField()).gt(select(avg(subSelect.getIntegerField())));\n\t\tQuery<String> select = select(from.getName());\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0.name from Entity entity_0 where entity_0.integerField > ( select avg(entity_1.integerField) from Entity entity_1 )\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>test_And_WhereClause.</p>\n\t */\n\t@Test\n\tpublic void test_And_WhereClause() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getName()).eq(\"test\").and(from.getPrimitiveInt()).gt(10);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.name = :name_1 and entity_0.primitiveInt > :primitiveInt_2\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>test_Or_WhereClause.</p>\n\t */\n\t@Test\n\tpublic void test_Or_WhereClause() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getName()).eq(\"test\").or(from.getPrimitiveInt()).gt(10);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.name = :name_1 or entity_0.primitiveInt > :primitiveInt_2\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>test_like_any.</p>\n\t */\n\t@Test\n\tpublic void test_like_any() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).like().any(\"test\");\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code like :code_1\", select.getQuery());\n\t\tassertEquals(\"%test%\", select.getParameters().get(\"code_1\"));\n\t}\n\t\n\t/**\n\t * <p>test_like_any.</p>\n\t */\n\t@Test\n\tpublic void test_notLike_any() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).notLike().any(\"test\");\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code not like :code_1\", select.getQuery());\n\t\tassertEquals(\"%test%\", select.getParameters().get(\"code_1\"));\n\t}\n\n\t/**\n\t * <p>test_like_startsWith.</p>\n\t */\n\t@Test\n\tpublic void test_like_startsWith() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).like().startsWith(\"test\");\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code like :code_1\", select.getQuery());\n\t\tassertEquals(\"test%\", select.getParameters().get(\"code_1\"));\n\t}\n\t\n\t@Test\n\tpublic void test_notLike_startsWith() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).notLike().startsWith(\"test\");\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code not like :code_1\", select.getQuery());\n\t\tassertEquals(\"test%\", select.getParameters().get(\"code_1\"));\n\t}\n\n\t/**\n\t * <p>test_like_endsWith.</p>\n\t */\n\t@Test\n\tpublic void test_like_endsWith() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).like().endsWith(\"test\");\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code like :code_1\", select.getQuery());\n\t\tassertEquals(\"%test\", select.getParameters().get(\"code_1\"));\n\t}\n\t\n\t/**\n\t * <p>test_like_endsWith.</p>\n\t */\n\t@Test\n\tpublic void test_notLike_endsWith() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).notLike().endsWith(\"test\");\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code not like :code_1\", select.getQuery());\n\t\tassertEquals(\"%test\", select.getParameters().get(\"code_1\"));\n\t}\n\n\t/**\n\t * <p>test_is_empty.</p>\n\t */\n\t@Test\n\tpublic void test_is_empty() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getSubEntities()).isEmpty();\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.subEntities is empty\", select.getQuery());\n\t}\n\n\t/**\n\t * <p>test_is_not_empty.</p>\n\t */\n\t@Test\n\tpublic void test_is_not_empty() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getSubEntities()).isNotEmpty();\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.subEntities is not empty\", select.getQuery());\n\t}\n\n\t/**\n\t * <p>test_size.</p>\n\t */\n\t@Test\n\tpublic void test_size() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getSubEntities()).size().gt(2);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.subEntities.size > :subEntities_1\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>test_member_of.</p>\n\t */\n\t@Test\n\tpublic void test_member_of() {\n\t\tEntity fromEntity = from(Entity.class);\n\t\twhere(fromEntity.getValueCollection()).memberOf(\"VALUE\");\n\t\tQuery<Entity> query = select(fromEntity);\n\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where :valueCollection_1 member of entity_0.valueCollection\", query.getQuery());\n\t}\n\n\t/**\n\t * <p>test_where_with_condition_and.</p>\n\t */\n\t@Test\n\tpublic void test_where_with_condition_and() {\n\t\tEntity from = from(Entity.class);\n\t\tOnGoingLogicalCondition condition = condition(from.getCode()).eq(\"test\").or(from.getCode()).eq(\"test2\");\n\t\twhere(from.getName()).eq(\"test\").and(condition);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.name = :name_1 and ( entity_0.code = :code_2 or entity_0.code = :code_3 )\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>test_where_with_condition_or.</p>\n\t */\n\t@Test\n\tpublic void test_where_with_condition_or() {\n\t\tEntity from = from(Entity.class);\n\t\tOnGoingLogicalCondition condition = condition(from.getCode()).eq(\"test\").or(from.getCode()).eq(\"test2\");\n\t\twhere(from.getName()).eq(\"test\").or(condition);\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.name = :name_1 or ( entity_0.code = :code_2 or entity_0.code = :code_3 )\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>test_where_with_condition_or_inline.</p>\n\t */\n\t@Test\n\tpublic void test_where_with_condition_or_inline() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getName()).eq(\"test\").or(condition(from.getCode()).eq(\"test\").or(from.getCode()).eq(\"test2\"));\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.name = :name_1 or ( entity_0.code = :code_2 or entity_0.code = :code_3 )\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>test_condition_with_root_and_inner.</p>\n\t */\n\t@Test\n\tpublic void test_condition_with_root_and_inner() {\n\n\t\tEntity entity = from(Entity.class);\n\t\tSubEntity subEntity = innerJoin(entity.getSubEntities());\n\t\tOnGoingLogicalCondition condition = condition(entity.getCode()).eq(\"test1\").or(subEntity.getCode()).eq(\"test2\");\n\t\twhere(entity.getIntegerField()).gt(10).and(condition);\n\n\t\tQuery<Entity> select = select(entity);\n\t\tString query = select.getQuery();\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 inner join entity_0.subEntities subEntity_1 where entity_0.integerField > :integerField_2 and ( entity_0.code = :code_3 or subEntity_1.code = :code_4 )\",\n\t\t\t\tquery);\n\t}\n\n\t/**\n\t * <p>test_acceptConditionIntoCondition.</p>\n\t */\n\t@Test\n\tpublic void test_acceptConditionIntoCondition() {\n\t\tEntity from = from(Entity.class);\n\t\tOnGoingLogicalCondition onGoingLogicalCondition = condition(from.getName()).eq(\"test\").or(from.getName())\n\t\t\t\t.eq(\"test2\");\n\t\tOnGoingLogicalCondition eq = condition(onGoingLogicalCondition).and(from.getCode()).eq(\"mycode\");\n\t\twhere(eq);\n\t\tQuery<Entity> select = select(from);\n\t\tString query = select.getQuery();\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where ( ( entity_0.name = :name_1 or entity_0.name = :name_2 ) and entity_0.code = :code_3 )\",\n\t\t\t\tquery);\n\t}\n\n\t/**\n\t * <p>test_where_three_conditions.</p>\n\t */\n\t@Test\n\tpublic void test_where_three_conditions() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getName()).eq(\"test\").and(from.getIntegerField()).gt(2).and(from.getCode()).eq(\"test\");\n\t\tQuery<Entity> select = select(from);\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where entity_0.name = :name_1 and entity_0.integerField > :integerField_2 and entity_0.code = :code_3\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>testDateFieldAccessToRelationalCondition.</p>\n\t */\n\t@Test\n\tpublic void testDateFieldAccessToRelationalCondition() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getDateField()).gt(new Date());\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.dateField > :dateField_1\", select.getQuery());\n\t}\n\n\t/**\n\t * <p>acceptConditionInWhere.</p>\n\t */\n\t@Test\n\tpublic void acceptConditionInWhere() {\n\t\tEntity from = from(Entity.class);\n\t\tOnGoingLogicalCondition conditon = condition(from.getCode()).eq(\"test\").and(from.getPrimitiveInt()).gt(3);\n\t\twhere(conditon);\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where ( entity_0.code = :code_1 and entity_0.primitiveInt > :primitiveInt_2 )\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>acceptConditionInWhere_plusExternalCondition.</p>\n\t */\n\t@Test\n\tpublic void acceptConditionInWhere_plusExternalCondition() {\n\t\tEntity from = from(Entity.class);\n\t\tOnGoingLogicalCondition conditon = condition(from.getCode()).eq(\"test\").and(from.getPrimitiveInt()).gt(3);\n\t\twhere(conditon).and(from.getName()).isNotNull();\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\n\t\t\t\t\"select entity_0 from Entity entity_0 where ( entity_0.code = :code_1 and entity_0.primitiveInt > :primitiveInt_2 ) and entity_0.name is not null\",\n\t\t\t\tselect.getQuery());\n\n\t}\n\n\t/**\n\t * <p>conditionOnRelatedField.</p>\n\t */\n\t@Test\n\tpublic void conditionOnRelatedField() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getCode()).eq(from.getName());\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code = entity_0.name\", select.getQuery());\n\t}\n\n\t/**\n\t * <p>chainMethodCallIntoWhere.</p>\n\t */\n\t@Test\n\tpublic void chainMethodCallIntoWhere() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getSubEntity().getName()).eq(\"test\");\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.subEntity.name = :name_1\", select.getQuery());\n\t}\n\n\t/**\n\t * <p>chainMethodCallOnAbstractMethodOveride.</p>\n\t */\n\t@Test\n\tpublic void chainMethodCallOnAbstractMethodOveride() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getAbstractEntity().getName()).eq(\"test\");\n\t\tQuery<Entity> select = select(from);\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.abstractEntity.name = :name_1\",\n\t\t\t\tselect.getQuery());\n\t}\n\n\t/**\n\t * <p>testSmallCharBug16.</p>\n\t */\n\t@Test\n\tpublic void testSmallCharBug16() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getSmallChar()).eq('c');\n\t\tQuery<Entity> select2 = select(from);\n\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.smallChar = :smallChar_1\",\n\t\t\t\tselect2.getQuery());\n\t}\n\n\t/**\n\t * <p>testGetTheConditionQuery.</p>\n\t */\n\t@Test\n\tpublic void testGetTheConditionQuery() {\n\t\tEntity from = from(Entity.class);\n\t\twhere(from.getSmallChar()).eq('c');\n\t\tQuery<String> select2 = select(from.getName());\n\n\t\tOnGoingLogicalCondition condition = select2.condition().get();\n\t\tcondition.and(from.getId()).eq(\"test\");\n\n\t\tassertEquals(\n\t\t\t\t\"select entity_0.name from Entity entity_0 where entity_0.smallChar = :smallChar_1 and entity_0.id = :id_2\",\n\t\t\t\tselect2.getQuery());\n\t}\n\n\t/**\n\t * <p>testGetEmptyConditionQuery.</p>\n\t */\n\t@Test\n\tpublic void testGetEmptyConditionQuery() {\n\t\tEntity from = from(Entity.class);\n\t\tQuery<String> select2 = select(from.getName());\n\n\t\tOptional<OnGoingLogicalCondition> condition = select2.condition();\n\n\t\tif (condition.isPresent()) {\n\t\t\tcondition.get().and(from.getSmallChar()).eq('c');\n\t\t} else {\n\t\t\twhere(from.getSmallChar()).eq('c');\n\t\t}\n\n\t\tassertEquals(\"select entity_0.name from Entity entity_0 where entity_0.smallChar = :smallChar_1\",\n\t\t\t\tselect2.getQuery());\n\t}\n\n}\n"], "filenames": ["src/main/java/org/torpedoquery/jpa/internal/conditions/ConditionBuilder.java", "src/main/java/org/torpedoquery/jpa/internal/conditions/LikeCondition.java", "src/main/java/org/torpedoquery/jpa/internal/conditions/NotLikeCondition.java", "src/test/java/org/torpedoquery/jpa/StringFunctionsTest.java", "src/test/java/org/torpedoquery/jpa/ValueOnGoingConditionTest.java", "src/test/java/org/torpedoquery/jpa/WhereClauseTest.java"], "buggy_code_start_loc": [256, 22, 21, 99, 122, 346], "buggy_code_end_loc": [259, 108, 40, 116, 123, 404], "fixing_code_start_loc": [256, 21, 22, 99, 122, 346], "fixing_code_end_loc": [259, 75, 40, 119, 123, 410], "type": "NVD-CWE-noinfo", "message": "Torpedo Query before 2.5.3 mishandles the LIKE operator in ConditionBuilder.java, LikeCondition.java, and NotLikeCondition.java.", "other": {"cve": {"id": "CVE-2019-11343", "sourceIdentifier": "cve@mitre.org", "published": "2020-03-12T21:15:12.703", "lastModified": "2020-03-18T14:13:09.610", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Torpedo Query before 2.5.3 mishandles the LIKE operator in ConditionBuilder.java, LikeCondition.java, and NotLikeCondition.java."}, {"lang": "es", "value": "Torpedo Query versiones anteriores a 2.5.3, maneja inapropiadamente el operador LIKE en los archivos ConditionBuilder.java, LikeCondition.java, y NotLikeCondition.java."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:torpedoquery:torpedo_query:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.5.3", "matchCriteriaId": "0F278EDE-8A17-4DE5-BCD8-BD9C03160F1D"}]}]}], "references": [{"url": "https://github.com/xjodoin/torpedoquery/commit/3c20b874fba9cc2a78b9ace10208de1602b56c3f", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/xjodoin/torpedoquery/compare/v2.5.2...v2.5.3", "source": "cve@mitre.org", "tags": ["Patch", "Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/xjodoin/torpedoquery/commit/3c20b874fba9cc2a78b9ace10208de1602b56c3f"}}