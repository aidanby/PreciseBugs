{"buggy_code": ["<?php\n/****************************************************************************\n * for license information see LICENSE.md\n *  edit a cache listing\n *  used template(s): editcache\n *  GET/POST Parameter: cacheid\n *****************************************************************************/\n\nuse Oc\\GeoCache\\StatisticPicture;\nuse Oc\\Libse\\ChildWp\\HandlerChildWp;\nuse Oc\\Libse\\Coordinate\\FormatterCoordinate;\n\nrequire_once __DIR__ . '/lib/consts.inc.php';\n$opt['gui'] = GUI_HTML;\nrequire_once __DIR__ . '/lib/common.inc.php';\n\nfunction getWaypoints($cacheId)\n{\n    global $waypointline;\n    global $waypointlines;\n    global $nowaypoints;\n\n    $wpHandler = new HandlerChildWp();\n    $wayPoints = $wpHandler->getChildWps($cacheId);\n    $ret = '';\n\n    if (!empty($wayPoints)) {\n        $formatter = new FormatterCoordinate();\n\n        foreach ($wayPoints as $wayPoint) {\n            $tmpLine = $waypointline;\n\n            $tmpLine = mb_ereg_replace(\n                '{wp_image}',\n                htmlspecialchars($wayPoint['image'], ENT_COMPAT, 'UTF-8'),\n                $tmpLine\n            );\n            $tmpLine = mb_ereg_replace('{wp_type}', htmlspecialchars($wayPoint['name'], ENT_COMPAT, 'UTF-8'), $tmpLine);\n            $htmlCoordinate = $formatter->formatHtml(\n                $wayPoint['coordinate'],\n                '</td></tr><tr><td style=\"white-space:nowrap\">'\n            );\n            $tmpLine = mb_ereg_replace('{wp_coordinate}', $htmlCoordinate, $tmpLine);\n            $tmpLine = mb_ereg_replace(\n                '{wp_description}',\n                htmlspecialchars(trim($wayPoint['description']), ENT_COMPAT, 'UTF-8'),\n                $tmpLine\n            );\n            $tmpLine = mb_ereg_replace(\n                '{wp_show_description}',\n                mb_ereg_replace('\\r\\n', '<br />', htmlspecialchars($wayPoint['description'], ENT_COMPAT, 'UTF-8')),\n                $tmpLine\n            );\n            $tmpLine = mb_ereg_replace('{cacheid}', htmlspecialchars($cacheId, ENT_COMPAT, 'UTF-8'), $tmpLine);\n            $tmpLine = mb_ereg_replace(\n                '{childid}',\n                htmlspecialchars($wayPoint['childid'], ENT_COMPAT, 'UTF-8'),\n                $tmpLine\n            );\n\n            $ret .= $tmpLine;\n        }\n\n        $ret = mb_ereg_replace('{lines}', $ret, $waypointlines);\n\n        return $ret;\n    }\n\n    return $nowaypoints;\n}\n\n//Preprocessing\nif ($error == false) {\n    $cache_id = 0;\n    if (isset($_REQUEST['cacheid'])) {\n        $cache_id = (int) $_REQUEST['cacheid'];\n    }\n\n    if ($usr === false) {\n        $tplname = 'login';\n\n        tpl_set_var('username', '');\n        tpl_set_var('target', 'editcache.php?cacheid=' . urlencode($cache_id));\n        tpl_set_var('message_start', '');\n        tpl_set_var('message_end', '');\n        tpl_set_var('message', $login_required);\n        tpl_set_var('helplink', helppagelink('login'));\n    } else {\n        $cache_rs = sql(\n            \"\n                SELECT\n                    `caches`.`uuid`,\n                    `caches`.`user_id`,\n                    `caches`.`name`,\n                    `caches`.`type`,\n                    `caches`.`size`,\n                    `caches`.`date_created`,\n                    `caches`.`date_hidden`,\n                    `caches`.`date_activate`,\n                    `caches`.`longitude`,\n                    `caches`.`latitude`,\n                    `caches`.`country`,\n                    `caches`.`terrain`,\n                    `caches`.`difficulty`,\n                    `caches`.`desc_languages`,\n                    `caches`.`status`,\n                    `caches`.`search_time`,\n                    `caches`.`way_length`,\n                    `caches`.`logpw`,\n                    `caches`.`wp_oc`,\n                    `caches`.`wp_gc`,\n                    `caches`.`show_cachelists`,\n                    `caches`.`protect_old_coords`,\n                    `caches`.`node`,\n                    `user`.`username`,\n                    `stat_caches`.`picture`\n                FROM `caches`\n                INNER JOIN `user` ON `caches`.`user_id`=`user`.`user_id`\n                LEFT JOIN `stat_caches` ON `caches`.`cache_id`=`stat_caches`.`cache_id`\n                WHERE `caches`.`cache_id`='&1'\",\n            $cache_id\n        );\n        $cache_record = sql_fetch_array($cache_rs);\n        sql_free_result($cache_rs);\n\n        if ($cache_record !== false) {\n            if ($cache_record['user_id'] == $usr['userid'] || $login->listingAdmin()) {\n                $tplname = 'editcache';\n                tpl_acceptsAndPurifiesHtmlInput();\n\n                require $stylepath . '/editcache.inc.php';\n\n                if ($cache_record['node'] != $oc_nodeid) {\n                    tpl_errorMsg('editcache', $error_wrong_node);\n                    exit;\n                }\n\n                //here we read all used information from the form if submitted, otherwise from DB\n                $cache_name = trim(isset($_POST['name']) ? trim($_POST['name']) : $cache_record['name']);  // Ocprop\n                $cache_type = isset($_POST['type']) ? $_POST['type'] : $cache_record['type'];\n                if (!isset($_POST['size'])) {\n                    if ($cache_type == 4 || $cache_type == 5) {\n                        $sel_size = 7;\n                    } else {\n                        $sel_size = $cache_record['size'];\n                    }\n                } else {\n                    $sel_size = isset($_POST['size']) ? $_POST['size'] : $cache_record['size'];\n                }\n                $cache_hidden_day = isset($_POST['hidden_day']) ? $_POST['hidden_day'] : date(\n                    'd',\n                    strtotime($cache_record['date_hidden'])\n                );  // Ocprop\n                $cache_hidden_month = isset($_POST['hidden_month']) ? $_POST['hidden_month'] : date(\n                    'm',\n                    strtotime($cache_record['date_hidden'])\n                );  // Ocprop\n                $cache_hidden_year = isset($_POST['hidden_year']) ? $_POST['hidden_year'] : date(\n                    'Y',\n                    strtotime($cache_record['date_hidden'])\n                );  // Ocprop\n\n                if (is_null($cache_record['date_activate'])) {\n                    $cache_activate_day = isset($_POST['activate_day']) ? $_POST['activate_day'] : date('d');\n                    $cache_activate_month = isset($_POST['activate_month']) ? $_POST['activate_month'] : date('m');\n                    $cache_activate_year = isset($_POST['activate_year']) ? $_POST['activate_year'] : date('Y');\n                    $cache_activate_hour = isset($_POST['activate_hour']) ? $_POST['activate_hour'] : date('H');\n                } else {\n                    $cache_activate_day = isset($_POST['activate_day']) ? $_POST['activate_day'] : date(\n                        'd',\n                        strtotime($cache_record['date_activate'])\n                    );\n                    $cache_activate_month = isset($_POST['activate_month']) ? $_POST['activate_month'] : date(\n                        'm',\n                        strtotime($cache_record['date_activate'])\n                    );\n                    $cache_activate_year = isset($_POST['activate_year']) ? $_POST['activate_year'] : date(\n                        'Y',\n                        strtotime($cache_record['date_activate'])\n                    );\n                    $cache_activate_hour = isset($_POST['activate_hour']) ? $_POST['activate_hour'] : date(\n                        'H',\n                        strtotime($cache_record['date_activate'])\n                    );\n                }\n\n                $cache_difficulty = isset($_POST['difficulty']) ? $_POST['difficulty'] : $cache_record['difficulty'];  // Ocprop\n                $cache_terrain = isset($_POST['terrain']) ? $_POST['terrain'] : $cache_record['terrain'];  // Ocprop\n                $cache_country = isset($_POST['country']) ? $_POST['country'] : $cache_record['country'];  // Ocprop\n                $show_all_countries = isset($_POST['show_all_countries']) ? $_POST['show_all_countries'] : 0;\n                $listing_modified = isset($_POST['listing_modified']) ? $_POST['listing_modified'] + 0 : 0;\n                $status = isset($_POST['status']) ? $_POST['status'] : $cache_record['status'];  // Ocprop\n                $status_old = $cache_record['status'];\n                $search_time = isset($_POST['search_time']) ? trim($_POST['search_time']) : $cache_record['search_time'];\n                $way_length = isset($_POST['way_length']) ? trim($_POST['way_length']) : $cache_record['way_length'];\n\n                if ($status_old == 5 && $status == 5) {\n                    if (isset($_REQUEST['publish'])) {  // Ocprop; see also res_state_warning.tpl\n                        $publish = $_REQUEST['publish'];\n                        if (!($publish == 'now' || $publish == 'later' || $publish == 'notnow')) {\n                            // somebody messed up the POST-data, so we do not publish the cache,\n                            // since he isn't published right now (status=5)\n                            $publish = 'notnow';\n                        }\n                        if ($publish == 'now') {\n                            $status = 1;\n                        }\n                    } else {\n                        if (is_null($cache_record['date_activate'])) {\n                            $publish = 'notnow';\n                        } else {\n                            $publish = 'later';\n                        }\n                    }\n                } else {\n                    $publish = isset($_POST['publish']) ? $_POST['publish'] : 'now';\n                    if (!($publish == 'now' || $publish == 'later' || $publish == 'notnow')) {\n                        // somebody messed up the POST-data, so the cache has to be published (status<5)\n                        $publish = 'now';\n                    }\n                }\n\n                $bAdmin = sqlValue(\"SELECT `admin` FROM `user` WHERE `user_id` = &1\", 0, $usr['userid']);\n\n                if ($status == 7 && ($bAdmin & ADMIN_USER) != ADMIN_USER) {\n                    $status = $status_old;\n                }\n\n                if ($status_old == 7) {  // cache is locked\n                    // only admins can change status of locked caches\n                    if (($bAdmin & ADMIN_USER) != ADMIN_USER) {\n                        // no status change allowed for normal user\n                        $status = $status_old;\n                    }\n                }\n\n                $search_time = mb_ereg_replace(',', '.', $search_time);\n                $way_length = mb_ereg_replace(',', '.', $way_length);\n\n                if (mb_strpos($search_time, ':') == mb_strlen($search_time) - 3) {\n                    $st_hours = mb_substr($search_time, 0, mb_strpos($search_time, ':'));\n                    $st_minutes = mb_substr($search_time, mb_strlen($st_hours) + 1);\n\n                    if (is_numeric($st_hours) && is_numeric($st_minutes)) {\n                        if (($st_minutes >= 0) && ($st_minutes < 60)) {\n                            $search_time = $st_hours + $st_minutes / 60;\n                        }\n                    }\n                }\n\n                $log_pw = isset($_POST['log_pw']) ? mb_substr($_POST['log_pw'], 0, 20) : $cache_record['logpw'];\n                // fix #4356: gc waypoints are frequently copy&pasted with leading spaces\n                $wp_gc = isset($_POST['wp_gc']) ? strtoupper(trim($_POST['wp_gc'])) : $cache_record['wp_gc'];  // Ocprop\n                $showlists = isset($_POST['showlists']) ? 1 : $cache_record['show_cachelists'] + 0;\n                $protect_old_coords = isset($_POST['protect_old_coords']) ? 1 : $cache_record['protect_old_coords'] + 0;\n\n                // name\n                $name_not_ok = false;\n                if ($cache_name == \"\") {\n                    $name_not_ok = true;\n                }\n\n                if (isset($_POST['latNS'])) {\n                    //get coords from post-form\n                    $coords_latNS = $_POST['latNS'];  // Ocprop\n                    $coords_lonEW = $_POST['lonEW'];  // Ocprop\n                    $coords_lat_h = trim($_POST['lat_h']);  // Ocprop\n                    $coords_lon_h = trim($_POST['lon_h']);  // Ocprop\n                    $coords_lat_min = trim($_POST['lat_min']);  // Ocprop\n                    $coords_lon_min = trim($_POST['lon_min']);  // Ocprop\n                } else {\n                    //get coords from DB\n                    $coords_lon = $cache_record['longitude'];\n                    $coords_lat = $cache_record['latitude'];\n\n                    if ($coords_lon < 0) {\n                        $coords_lonEW = 'W';\n                        $coords_lon = -$coords_lon;\n                    } else {\n                        $coords_lonEW = 'E';\n                    }\n\n                    if ($coords_lat < 0) {\n                        $coords_latNS = 'S';\n                        $coords_lat = -$coords_lat;\n                    } else {\n                        $coords_latNS = 'N';\n                    }\n\n                    $coords_lat_h = floor($coords_lat);\n                    $coords_lon_h = floor($coords_lon);\n\n                    $coords_lat_min = sprintf(\"%02.3f\", round(($coords_lat - $coords_lat_h) * 60, 3));\n                    $coords_lon_min = sprintf(\"%02.3f\", round(($coords_lon - $coords_lon_h) * 60, 3));\n                }\n\n                //here we validate the data\n\n                //coords\n                $lon_not_ok = false;\n\n                if (!mb_ereg_match('^[0-9]{1,3}$', $coords_lon_h)) {\n                    $lon_not_ok = true;\n                } else {\n                    $lon_not_ok = (($coords_lon_h >= 0) && ($coords_lon_h < 180)) ? false : true;\n                }\n\n                if (is_numeric($coords_lon_min)) {\n                    // important: use here |=\n                    $lon_not_ok |= (($coords_lon_min >= 0) && ($coords_lon_min < 60)) ? false : true;\n                } else {\n                    $lon_not_ok = true;\n                }\n\n                //same with lat\n                $lat_not_ok = false;\n\n                if (!mb_ereg_match('^[0-9]{1,3}$', $coords_lat_h)) {\n                    $lat_not_ok = true;\n                } else {\n                    $lat_not_ok = (($coords_lat_h >= 0) && ($coords_lat_h < 180)) ? false : true;\n                }\n\n                if (is_numeric($coords_lat_min)) {\n                    // important: use here |=\n                    $lat_not_ok |= (($coords_lat_min >= 0) && ($coords_lat_min < 60)) ? false : true;\n                } else {\n                    $lat_not_ok = true;\n                }\n\n                //check effort\n                $time_not_ok = true;\n                tpl_set_var('effort_message', '');\n                if (is_numeric($search_time) || ($search_time == '')) {\n                    $time_not_ok = false;\n                }\n                if ($time_not_ok) {\n                    tpl_set_var('effort_message', $time_not_ok_message);\n                    $error = true;\n                }\n                $way_length_not_ok = true;\n                if (is_numeric($way_length) || ($way_length == '')) {\n                    $way_length_not_ok = false;\n                }\n                if ($way_length_not_ok) {\n                    tpl_set_var('effort_message', $way_length_not_ok_message);\n                    $error = true;\n                }\n\n                //check GC waypoint\n                $wpgc_not_ok = $wp_gc != '' && !preg_match(\"/^(?:GC|CX)[0-9A-Z]{3,6}$/\", $wp_gc);\n                if ($wpgc_not_ok) {\n                    $error = true;\n                }\n\n                //check hidden_since\n                $hidden_date_not_ok = true;\n                $hidden_date_mismatch = false;\n                if (is_numeric($cache_hidden_day) && is_numeric($cache_hidden_month) &&\n                    is_numeric($cache_hidden_year)\n                ) {\n                    $hidden_date_not_ok =\n                        (checkdate($cache_hidden_month, $cache_hidden_day, $cache_hidden_year) == false);\n                }\n                if ($hidden_date_not_ok == false && $publish != 'notnow') {\n                    $hidden_date = mktime(\n                        0,\n                        0,\n                        0,\n                        $cache_hidden_month,\n                        $cache_hidden_day,\n                        $cache_hidden_year\n                    );\n                    if ($status_old != 5) {\n                        // the cache has already been published\n                        $publish_date = strtotime(substr($cache_record['date_created'], 0, 10));\n                    } elseif ($publish == 'later') {\n                        // Activation hour can be ignored here. This simplifies checking event dates.\n                        $publish_date = mktime(\n                            0,\n                            0,\n                            0,\n                            $cache_activate_month,\n                            $cache_activate_day,\n                            $cache_activate_year\n                        );\n                    } else {\n                        // the cache is to be published now\n                        $publish_date = time();\n                    }\n                    if (($cache_type == 6 && $hidden_date < $publish_date) ||\n                        ($cache_type != 6 && $hidden_date > $publish_date)) {\n                        $hidden_date_mismatch = true;\n                    }\n                }\n\n                //check date_activate\n                if ($status == 5) {\n                    $activate_date_not_ok = true;\n                    if (is_numeric($cache_activate_day) && is_numeric($cache_activate_month) &&\n                        is_numeric($cache_activate_year) && is_numeric($cache_activate_hour)\n                    ) {\n                        $activate_date_not_ok =\n                            checkdate(\n                                $cache_activate_month,\n                                $cache_activate_day,\n                                $cache_activate_year\n                            ) == false\n                            || $cache_activate_hour < 0\n                            || $cache_activate_hour > 23;\n                    }\n                } else {\n                    $activate_date_not_ok = false;\n                }\n\n                //check status and publish options\n                if (($status == 5 && $publish == 'now') || ($status != 5 && ($publish == 'later' || $publish == 'notnow'))) {\n                    tpl_set_var('status_message', $status_message);\n                    $status_not_ok = true;\n                } else {\n                    tpl_set_var('status_message', '');\n                    $status_not_ok = false;\n                }\n\n                //check cache size\n                $size_not_ok = false;\n                if ($sel_size != 7 && ($cache_type == 4 || $cache_type == 5)) {\n                    $error = true;\n                    $size_not_ok = true;\n                }\n\n                //difficulty / terrain\n                $diff_not_ok = false;\n                tpl_set_var('diff_message', '');\n                if ($cache_difficulty < 2 || $cache_difficulty > 10 || $cache_terrain < 2 || $cache_terrain > 10) {\n                    tpl_set_var('diff_message', $diff_not_ok_message);\n                    $error = true;\n                    $diff_not_ok = true;\n                }\n\n                // cache-attributes\n                $attribs_not_ok = false;\n                if (isset($_POST['cache_attribs'])) {\n                    $cache_attribs = mb_split(';', $_POST['cache_attribs']);\n                } else {\n                    // get attribs for this cache from db\n                    $rs = sql(\"SELECT `attrib_id` FROM `caches_attributes` WHERE `cache_id`='&1'\", $cache_id);\n                    if (mysqli_num_rows($rs) > 0) {\n                        unset($cache_attribs);\n                        while ($record = sql_fetch_array($rs)) {\n                            $cache_attribs[] = $record['attrib_id'];\n                        }\n                        unset($record);\n                    } else {\n                        $cache_attribs = [];\n                    }\n                    sql_free_result($rs);\n                }\n\n                if (in_array(ATTRIB_ID_SAFARI, $cache_attribs) && $cache_type != 4) {\n                    tpl_set_var('safari_message', $safari_not_allowed_message);\n                    $error = true;\n                    $attribs_not_ok = true;\n                } else {\n                    tpl_set_var('safari_message', '');\n                }\n\n                //try to save to DB?\n                if (isset($_POST['submit'])) {  // Ocprop\n                    // all validations ok?\n                    if (!(\n                        $hidden_date_not_ok || $hidden_date_mismatch ||\n                        $lat_not_ok || $lon_not_ok || $name_not_ok ||\n                        $time_not_ok || $way_length_not_ok || $size_not_ok ||\n                        $activate_date_not_ok || $status_not_ok || $diff_not_ok ||\n                        $attribs_not_ok || $wpgc_not_ok\n                    )\n                    ) {\n                        $cache_lat = $coords_lat_h + $coords_lat_min / 60;\n                        if ($coords_latNS == 'S') {\n                            $cache_lat = -$cache_lat;\n                        }\n\n                        $cache_lon = $coords_lon_h + $coords_lon_min / 60;\n                        if ($coords_lonEW == 'W') {\n                            $cache_lon = -$cache_lon;\n                        }\n\n                        if ($publish == 'now') {\n                            $activation_date = 'NULL';\n                        } elseif ($publish == 'later') {\n                            $status = 5;\n                            $activation_date =\n                                \"'\" . sql_escape(\n                                    date(\n                                        'Y-m-d H:i:s',\n                                        mktime(\n                                            $cache_activate_hour,\n                                            0,\n                                            0,\n                                            $cache_activate_month,\n                                            $cache_activate_day,\n                                            $cache_activate_year\n                                        )\n                                    )\n                                ) . \"'\";\n                        } elseif ($publish == 'notnow') {\n                            $status = 5;\n                            $activation_date = 'NULL';\n                        } else {\n                            // should never happen\n                            $activation_date = 'NULL';\n                        }\n\n                        // check for Ocprop data to ignore\n                        if ($ocpropping) {\n                            $rs = sql(\"SELECT `type`, `size` FROM `caches` WHERE `cache_id`='&1'\", $cache_id);\n                            if ($r = sql_fetch_assoc($rs)) {\n                                if ($r['type'] == 8 && $cache_type == 7) {\n                                    $cache_type = 8;\n                                }\n                                if ($r['type'] == 10 && $cache_type == 2) {\n                                    $cache_type = 10;\n                                }\n                                if ($r['size'] == 8 && ($sel_size == 1 || $sel_size == 2)) {\n                                    $sel_size = 8;\n                                }\n                            }\n                            sql_free_result($rs);\n                        }\n\n                        // fix showlists setting\n                        if (!isset($_POST['showlists'])) {\n                            $showlists = 0;\n                        }\n                        if (!isset($_POST['protect_old_coords'])) {\n                            $protect_old_coords = 0;\n                        }\n\n                        // save to DB\n                        // Status update will trigger touching the last_modified date of all depending records.\n                        // Status change via editcache.php is no longer available via the user interface,\n                        // but still used by Ocprop and maybe other tools.\n                        sql(\"SET @STATUS_CHANGE_USER_ID='&1'\", $usr['userid']);\n                        sql(\n                            \"UPDATE `caches` SET `name`='&1', `longitude`='&2', `latitude`='&3', `type`='&4', `date_hidden`='&5', `country`='&6', `size`='&7', `difficulty`='&8', `terrain`='&9', `status`='&10', `search_time`='&11', `way_length`='&12', `logpw`='&13', `wp_gc`='&14', `show_cachelists`='&15', `protect_old_coords`='&16', `date_activate` = $activation_date WHERE `cache_id`='&17'\",\n                            $cache_name,\n                            $cache_lon,\n                            $cache_lat,\n                            $cache_type,\n                            date('Y-m-d', mktime(0, 0, 0, $cache_hidden_month, $cache_hidden_day, $cache_hidden_year)),\n                            $cache_country,\n                            $sel_size,\n                            $cache_difficulty,\n                            $cache_terrain,\n                            $status,\n                            $search_time,\n                            $way_length,\n                            $log_pw,\n                            $wp_gc,\n                            $showlists,\n                            $protect_old_coords,\n                            $cache_id\n                        );\n\n                        // send notification on admin intervention\n                        if ($cache_record['user_id'] != $usr['userid'] &&\n                            $opt['logic']['admin']['listingadmin_notification'] != ''\n                        ) {\n                            mail(\n                                $opt['logic']['admin']['listingadmin_notification'],\n                                mb_ereg_replace(\n                                    '{occode}',\n                                    $cache_record['wp_oc'],\n                                    mb_ereg_replace(\n                                        '{username}',\n                                        $usr['username'],\n                                        t('Cache listing {occode} has been modified by {username}')\n                                    )\n                                ),\n                                t('The modifications can be checked via vandalism restore function.')\n                            );\n                        }\n\n                        // generate status-change log\n                        if ($status != $status_old && $status_old != 5) {\n                            switch ($status) {\n                                case 1:\n                                    $logtype = 10;\n                                    break;\n                                case 2:\n                                    $logtype = 11;\n                                    break;\n                                case 3:\n                                    $logtype = 9;\n                                    break;\n                                case 6:\n                                    $logtype = 13;\n                                    break;\n                                default:\n                                    $logtype = 0;  // ???\n                            }\n                            if ($logtype > 0) {\n                                sql(\n                                    \"INSERT INTO `cache_logs` (`node`, `cache_id`, `user_id`, `type`, `date`)\n                                         VALUES ('&1','&2','&3','&4','&5')\",\n                                    $oc_nodeid,\n                                    $cache_id,\n                                    $usr['userid'],\n                                    $logtype,\n                                    date('Y-m-d')\n                                );\n                                // notifications will be automatically generated\n                            }\n                        }\n\n                        // update cache attributes\n                        $attriblist = '999';\n                        $countCacheAttrIbs = count($cache_attribs);\n                        for ($i = 0; $i < $countCacheAttrIbs; $i++) {\n                            if ($cache_attribs[$i] + 0 > 0) {\n                                sql(\n                                    \"INSERT IGNORE INTO `caches_attributes` (`cache_id`, `attrib_id`)\n                                     VALUES('&1', '&2')\",\n                                    $cache_id,\n                                    $cache_attribs[$i] + 0\n                                );\n                                $attriblist .= \",\" . ($cache_attribs[$i] + 0);\n                            }\n                        }\n\n                        sql(\n                            \"DELETE FROM `caches_attributes`\n                             WHERE `cache_id`='&1'\n                             AND `attrib_id`\n                             NOT IN (\" . $attriblist . ')',\n                            // SQL injections in $attriblist prevented by adding 0 above\n                            $cache_id\n                        );\n\n                        StatisticPicture::deleteStatisticPicture($usr['userid']);\n\n                        //display cache-page\n                        tpl_redirect('viewcache.php?cacheid=' . urlencode($cache_id));\n                        // Ocprop: Location:\\s*$viewcacheUrl\\?cacheid=([0-9]+)\n                        // (s.a. tpl_redirect() in common.inc.php\n                        exit;\n                    }\n                } elseif (isset($_POST['show_all_countries_submit'])) {\n                    $show_all_countries = 1;\n                }\n\n                //here we only set up the template variables\n\n                //build countrylist\n                $countriesoptions = '';\n\n                //check if selected country is in list_default\n                if ($show_all_countries == 0) {\n                    $rs = sql(\n                        \"SELECT `show` FROM `countries_list_default` WHERE `show`='&1' AND `lang`='&2'\",\n                        $cache_country,\n                        $locale\n                    );\n                    if (mysqli_num_rows($rs) == 0) {\n                        $show_all_countries = 1;\n                    }\n                    sql_free_result($rs);\n                }\n\n                //get the record\n                if ($show_all_countries == 0) {\n                    $rs = sql(\n                        \"SELECT `countries`.`short`, IFNULL(`sys_trans_text`.`text`, `countries`.`name`) AS `name`\n                         FROM `countries`\n                         INNER JOIN `countries_list_default`\n                           ON `countries_list_default`.`show`=`countries`.`short`\n                         LEFT JOIN `sys_trans`\n                           ON `countries`.`trans_id`=`sys_trans`.`id`\n                         LEFT JOIN `sys_trans_text`\n                           ON `sys_trans`.`id`=`sys_trans_text`.`trans_id`\n                           AND `sys_trans_text`.`lang`='&1'\n                         WHERE `countries_list_default`.`lang`='&1'\n                         ORDER BY `name` ASC\",\n                        $locale\n                    );\n                } else {\n                    $rs = sql(\n                        \"SELECT `countries`.`short`, IFNULL(`sys_trans_text`.`text`, `countries`.`name`) AS `name`\n                         FROM `countries`\n                         LEFT JOIN `sys_trans`\n                           ON `countries`.`trans_id`=`sys_trans`.`id`\n                         LEFT JOIN `sys_trans_text`\n                           ON `sys_trans`.`id`=`sys_trans_text`.`trans_id`\n                         AND `sys_trans_text`.`lang`='&1'\n                         ORDER BY `name` ASC\",\n                        $locale\n                    );\n                }\n\n                while ($record = sql_fetch_assoc($rs)) {\n                    $sSelected = ($record['short'] == $cache_country) ? ' selected=\"selected\"' : '';\n                    $countriesoptions .=\n                        '<option value=\"'\n                        . htmlspecialchars($record['short'], ENT_COMPAT, 'UTF-8')\n                        . '\"' . $sSelected . '>'\n                        . htmlspecialchars($record['name'], ENT_COMPAT, 'UTF-8')\n                        . '</option>' . \"\\n\";\n                }\n                tpl_set_var('countryoptions', $countriesoptions);\n                sql_free_result($rs);\n\n                // cache-attributes\n                $bBeginLine = true;\n                $nPrevLineAttrCount = 0;\n                $nLineAttrCount = 0;\n\n                $cache_attrib_list = '';\n                $cache_attrib_array = '';\n                $cache_attribs_string = '';\n\n                $rsAttrGroup = sql(\n                    \"SELECT `attribute_groups`.`id`,\n                            IFNULL(`sys_trans_text`.`text`,\n                            `attribute_groups`.`name`) AS `name`,\n                            `attribute_categories`.`color`\n                     FROM `attribute_groups`\n                     INNER JOIN `attribute_categories`\n                       ON `attribute_groups`.`category_id`=`attribute_categories`.`id`\n                     LEFT JOIN `sys_trans`\n                       ON `attribute_groups`.`trans_id`=`sys_trans`.`id`\n                     LEFT JOIN `sys_trans_text`\n                       ON `sys_trans`.`id`=`sys_trans_text`.`trans_id`\n                       AND `sys_trans_text`.`lang`='&1'\n                     ORDER BY `attribute_groups`.`category_id` ASC, `attribute_groups`.`id` ASC\",\n                    $locale\n                );\n                while ($rAttrGroup = sql_fetch_assoc($rsAttrGroup)) {\n                    $group_line = '';\n\n                    $rs = sql(\n                        \"SELECT `cache_attrib`.`id`,\n                                IFNULL(`ttname`.`text`, `cache_attrib`.`name`) AS `name`,\n                                `cache_attrib`.`icon_undef`,\n                                `cache_attrib`.`icon_large`,\n                                IFNULL(`ttdesc`.`text`, `cache_attrib`.`html_desc`) AS `html_desc`\n                         FROM `cache_attrib`\n                         LEFT JOIN `caches_attributes`\n                           ON `cache_attrib`.`id`=`caches_attributes`.`attrib_id`\n                           AND `caches_attributes`.`cache_id`='&2'\n                         LEFT JOIN `sys_trans` AS `tname`\n                           ON `cache_attrib`.`trans_id`=`tname`.`id`\n                           AND `cache_attrib`.`name`=`tname`.`text`\n                         LEFT JOIN `sys_trans_text` AS `ttname`\n                           ON `tname`.`id`=`ttname`.`trans_id`\n                           AND `ttname`.`lang`='&1'\n                         LEFT JOIN `sys_trans` AS `tdesc`\n                           ON `cache_attrib`.`html_desc_trans_id`=`tdesc`.`id`\n                           AND `cache_attrib`.`html_desc`=`tdesc`.`text`\n                         LEFT JOIN `sys_trans_text` AS `ttdesc`\n                           ON `tdesc`.`id`=`ttdesc`.`trans_id`\n                           AND `ttdesc`.`lang`='&1'\n                         WHERE `cache_attrib`.`group_id`='&3'\n                         AND NOT IFNULL(`cache_attrib`.`hidden`, 0) = 1\n                         AND (`cache_attrib`.`selectable`!=0 OR `caches_attributes`.`cache_id`='&2')\n                         ORDER BY `cache_attrib`.`group_id` ASC, `cache_attrib`.`id` ASC\",\n                        $locale,\n                        $cache_id,\n                        $rAttrGroup['id']\n                    );\n                    while ($record = sql_fetch_array($rs)) {\n                        $line = $cache_attrib_pic;\n\n                        $line = mb_ereg_replace('{attrib_id}', $record['id'], $line);\n                        $line = mb_ereg_replace('{attrib_text}', escape_javascript($record['name']), $line);\n                        if (in_array($record['id'], $cache_attribs)) {\n                            $line = mb_ereg_replace('{attrib_pic}', $record['icon_large'], $line);\n                        } else {\n                            $line = mb_ereg_replace('{attrib_pic}', $record['icon_undef'], $line);\n                        }\n                        $line = mb_ereg_replace('{html_desc}', escape_javascript($record['html_desc']), $line);\n                        $line = mb_ereg_replace('{name}', escape_javascript($record['name']), $line);\n                        $line = mb_ereg_replace('{color}', $rAttrGroup['color'], $line);\n                        $group_line .= $line;\n                        $nLineAttrCount++;\n\n                        $line = $cache_attrib_js;\n                        $line = mb_ereg_replace('{id}', $record['id'], $line);\n                        if (in_array($record['id'], $cache_attribs)) {\n                            $line = mb_ereg_replace('{selected}', 1, $line);\n                        } else {\n                            $line = mb_ereg_replace('{selected}', 0, $line);\n                        }\n                        $line = mb_ereg_replace('{img_undef}', $record['icon_undef'], $line);\n                        $line = mb_ereg_replace('{img_large}', $record['icon_large'], $line);\n                        $line = mb_ereg_replace(\n                            '{conflicting_attribs}',\n                            implode(',', attribute::getConflictingAttribIds($record['id'])),\n                            $line\n                        );\n                        if ($cache_attrib_array != '') {\n                            $cache_attrib_array .= ',';\n                        }\n                        $cache_attrib_array .= $line;\n\n                        if (in_array($record['id'], $cache_attribs)) {\n                            if ($cache_attribs_string != '') {\n                                $cache_attribs_string .= ';';\n                            }\n                            $cache_attribs_string .= $record['id'];\n                        }\n                    }\n                    sql_free_result($rs);\n\n                    if ($group_line != '') {\n                        $group_img = $cache_attrib_group;\n                        $group_img = mb_ereg_replace('{color}', $rAttrGroup['color'], $group_img);\n                        $group_img = mb_ereg_replace('{attribs}', $group_line, $group_img);\n                        $group_img = mb_ereg_replace(\n                            '{name}',\n                            htmlspecialchars($rAttrGroup['name'], ENT_COMPAT, 'UTF-8'),\n                            $group_img\n                        );\n\n                        if ($bBeginLine == true) {\n                            $cache_attrib_list .= '<div class=\"attribswide\">';\n                            $bBeginLine = false;\n                        }\n\n                        $cache_attrib_list .= $group_img;\n                        $nPrevLineAttrCount += $nLineAttrCount;\n\n                        $nLineAttrCount = 0;\n                    }\n                }\n                sql_free_result($rsAttrGroup);\n                if ($bBeginLine == false) {\n                    $cache_attrib_list .= '</div>';\n                }\n\n                tpl_set_var('cache_attrib_list', $cache_attrib_list);\n                tpl_set_var('jsattributes_array', $cache_attrib_array);\n                tpl_set_var('cache_attribs', $cache_attribs_string);\n\n                //difficulty\n                $difficulty_options = '';\n                for ($i = 2; $i <= 10; $i++) {\n                    if ($cache_difficulty == $i) {\n                        $difficulty_options .= '<option value=\"' . $i . '\" selected=\"selected\">' . $i / 2 . '</option>';\n                    } else {\n                        $difficulty_options .= '<option value=\"' . $i . '\">' . $i / 2 . '</option>';\n                    }\n                    $difficulty_options .= \"\\n\";\n                }\n                tpl_set_var('difficultyoptions', $difficulty_options);\n\n                //build terrain options\n                $terrain_options = '';\n                for ($i = 2; $i <= 10; $i++) {\n                    if ($cache_terrain == $i) {\n                        $terrain_options .= '<option value=\"' . $i . '\" selected=\"selected\">' . $i / 2 . '</option>';\n                    } else {\n                        $terrain_options .= '<option value=\"' . $i . '\">' . $i / 2 . '</option>';\n                    }\n                    $terrain_options .= \"\\n\";\n                }\n                tpl_set_var('terrainoptions', $terrain_options);\n\n                //build typeoptions\n                $types = '';\n                $rsTypes = sql(\n                    \"SELECT `cache_type`.`id`,\n                            IFNULL(`sys_trans_text`.`text`,\n                            `cache_type`.`en`) AS `name`\n                     FROM `cache_type`\n                     LEFT JOIN `sys_trans`\n                       ON `cache_type`.`trans_id`=`sys_trans`.`id`\n                     LEFT JOIN `sys_trans_text`\n                       ON `sys_trans`.`id`=`sys_trans_text`.`trans_id`\n                       AND `sys_trans_text`.`lang`='\" . sql_escape($locale) . \"'\n                     ORDER BY `cache_type`.`ordinal` ASC\"\n                );\n                while ($rType = sql_fetch_assoc($rsTypes)) {\n                    $sSelected = ($rType['id'] == $cache_type) ? ' selected=\"selected\"' : '';\n                    $types .=\n                        '<option value=\"' . $rType['id'] . '\"' . $sSelected . '>'\n                        . htmlspecialchars($rType['name'], ENT_COMPAT, 'UTF-8')\n                        . '</option>';\n                }\n                sql_free_result($rsTypes);\n                tpl_set_var('typeoptions', $types);\n\n                //build sizeoptions\n                $sizes = '';\n                $rsSizes = sql(\n                    \"SELECT `cache_size`.`id`,\n                            IFNULL(`sys_trans_text`.`text`, `cache_size`.`name`) AS `name`\n                     FROM `cache_size`\n                     LEFT JOIN `sys_trans`\n                       ON `cache_size`.`trans_id`=`sys_trans`.`id`\n                     LEFT JOIN `sys_trans_text`\n                       ON `sys_trans`.`id`=`sys_trans_text`.`trans_id`\n                       AND `sys_trans_text`.`lang`='\" . sql_escape($locale) . \"'\n                     ORDER BY `cache_size`.`ordinal` ASC\"\n                );\n                while ($rSize = sql_fetch_assoc($rsSizes)) {\n                    $sSelected = ($rSize['id'] == $sel_size) ? ' selected=\"selected\"' : '';\n                    $sizes .=\n                        '<option value=\"' . $rSize['id'] . '\"' . $sSelected . '>'\n                        . htmlspecialchars($rSize['name'], ENT_COMPAT, 'UTF-8')\n                        . '</option>';\n                }\n                sql_free_result($rsSizes);\n                tpl_set_var('sizeoptions', $sizes);\n\n                //Cachedescs\n                $desclangs = mb_split(',', $cache_record['desc_languages']);\n                $cache_descs = '';\n                $gc_com_refs = false;\n                foreach ($desclangs as $desclang) {\n                    if (count($desclangs) > 1) {\n                        $remove_url =\n                            'removedesc.php?cacheid=' . urlencode($cache_id)\n                            . '&desclang=' . urlencode($desclang);\n                        $removedesc =\n                            '&nbsp;[<a href=\"'\n                            . htmlspecialchars($remove_url, ENT_COMPAT, 'UTF-8')\n                            . '\" onclick=\"testListingModified(this)\" >' . $remove . '</a>]';\n                    } else {\n                        $removedesc = '';\n                    }\n\n                    $resp = sql(\n                        \"SELECT `desc` FROM `cache_desc` WHERE `cache_id`='&1' AND `language`='&2'\",\n                        $cache_id,\n                        $desclang\n                    );\n                    $row = sql_fetch_array($resp);\n                    if (mb_strpos($row['desc'], \"http://img.groundspeak.com/\") !== false) {\n                        $gc_com_refs = true;\n                    }\n                    sql_free_result($resp);\n\n                    $edit_url = 'editdesc.php?cacheid=' . urlencode($cache_id) . '&desclang=' . urlencode($desclang);\n\n                    $cache_descs .=\n                        '<tr><td colspan=\"2\">'\n                        . htmlspecialchars(db_LanguageFromShort($desclang), ENT_COMPAT, 'UTF-8')\n                        . ' [<a href=\"' . htmlspecialchars($edit_url, ENT_COMPAT, 'UTF-8')\n                        . '\" onclick=\"testListingModified(this)\" >' . $edit . '</a>]'\n                        . $removedesc . '</td></tr>';\n                }\n                tpl_set_var('cache_descs', $cache_descs);\n\n                if ($gc_com_refs) {\n                    tpl_set_var('gc_com_refs_start', '');\n                    tpl_set_var('gc_com_refs_end', '');\n                } else {\n                    tpl_set_var('gc_com_refs_start', '<!--');\n                    tpl_set_var('gc_com_refs_end', '-->');\n                }\n\n                //Status\n                $statusoptions = '';\n                if ($status_old != 7) {\n                    $rsStatus = sql(\n                        \"SELECT `cache_status`.`id`,\n                                IFNULL(`sys_trans_text`.`text`,\n                                `cache_status`.`name`) AS `name`\n                         FROM `cache_status`\n                         LEFT JOIN `sys_trans`\n                           ON `cache_status`.`trans_id`=`sys_trans`.`id`\n                         LEFT JOIN `sys_trans_text`\n                           ON `sys_trans`.`id`=`sys_trans_text`.`trans_id`\n                           AND `sys_trans_text`.`lang`='\" . sql_escape($locale) . \"'\n                         WHERE `cache_status`.`id` NOT IN (4, 5, 7)\n                           OR `cache_status`.`id`='\" . sql_escape($status_old + 0) . \"'\n                         ORDER BY `cache_status`.`id` ASC\"\n                    );\n                    while ($rStatus = sql_fetch_assoc($rsStatus)) {\n                        $sSelected = ($rStatus['id'] == $status) ? ' selected=\"selected\"' : '';\n                        if ($sSelected != '' || $status_old == 5) {\n                            $statusoptions .=\n                                '<option value=\"'\n                                . htmlspecialchars($rStatus['id'], ENT_COMPAT, 'UTF-8')\n                                . '\"' . $sSelected . '>'\n                                . htmlspecialchars($rStatus['name'], ENT_COMPAT, 'UTF-8')\n                                . '</option>';\n                        }\n                    }\n                    sql_free_result($rsStatus);\n                } else {\n                    $statusoptions .=\n                        '<option value=\"7\" selected=\"selected\">'\n                        . htmlspecialchars(t(\"Locked, invisible\"), ENT_COMPAT, 'UTF-8')\n                        . '</option>';\n                }\n                tpl_set_var('statusoptions', $statusoptions);\n                $statuschange_a_msg =  mb_ereg_replace('%1', $cache_id, $status_change_a);\n                $statuschange_msg =  mb_ereg_replace('{a}', $statuschange_a_msg, $status_change);\n                tpl_set_var('statuschange', $status_old == 5 ? '' : $statuschange_msg);\n\n                // show activation form?\n                if ($status_old == 5) {  // status = not yet published\n                    $tmp = $activation_form;\n\n                    $tmp = mb_ereg_replace(\n                        '{activate_day}',\n                        htmlspecialchars($cache_activate_day, ENT_COMPAT, 'UTF-8'),\n                        $tmp\n                    );\n                    $tmp = mb_ereg_replace(\n                        '{activate_month}',\n                        htmlspecialchars($cache_activate_month, ENT_COMPAT, 'UTF-8'),\n                        $tmp\n                    );\n                    $tmp = mb_ereg_replace(\n                        '{activate_year}',\n                        htmlspecialchars($cache_activate_year, ENT_COMPAT, 'UTF-8'),\n                        $tmp\n                    );\n                    $tmp = mb_ereg_replace('{publish_now_checked}', ($publish == 'now') ? 'checked' : '', $tmp);\n                    $tmp = mb_ereg_replace('{publish_later_checked}', ($publish == 'later') ? 'checked' : '', $tmp);\n                    $tmp = mb_ereg_replace('{publish_notnow_checked}', ($publish == 'notnow') ? 'checked' : '', $tmp);\n\n                    $activation_hours = '';\n                    for ($i = 0; $i <= 23; $i++) {\n                        if ($cache_activate_hour == $i) {\n                            $activation_hours .= '<option value=\"' . $i . '\" selected=\"selected\">' . $i . '</option>';\n                        } else {\n                            $activation_hours .= '<option value=\"' . $i . '\">' . $i . '</option>';\n                        }\n                        $activation_hours .= \"\\n\";\n                    }\n                    $tmp = mb_ereg_replace('{activation_hours}', $activation_hours, $tmp);\n\n                    if ($activate_date_not_ok) {\n                        $tmp = mb_ereg_replace('{activate_on_message}', $date_message, $tmp);\n                    } else {\n                        $tmp = mb_ereg_replace('{activate_on_message}', '', $tmp);\n                    }\n\n                    tpl_set_var('activation_form', $tmp);\n                } else {\n                    tpl_set_var('activation_form', '');\n                }\n\n                if ($cache_record['picture'] > 0) {\n                    $pictures = '';\n                    $rspictures = sql(\n                        \"SELECT `url`, `title`, `uuid`\n                         FROM `pictures`\n                         WHERE `object_id` = '&1'\n                         AND `object_type` = 2\n                         ORDER BY `seq`\",\n                        $cache_id\n                    );\n\n                    $countRsPictures = mysqli_num_rows($rspictures);\n                    for ($i = 0; $i < $countRsPictures; $i++) {\n                        $tmpline = ($i == 0 ? $pictureline0 : $pictureline);\n                        $pic_record = sql_fetch_array($rspictures);\n\n                        $tmpline = mb_ereg_replace(\n                            '{link}',\n                            htmlspecialchars($pic_record['url'], ENT_COMPAT, 'UTF-8'),\n                            $tmpline\n                        );\n                        $tmpline = mb_ereg_replace(\n                            '{title}',\n                            htmlspecialchars($pic_record['title'], ENT_COMPAT, 'UTF-8'),\n                            $tmpline\n                        );\n                        $tmpline = mb_ereg_replace(\n                            '{uuid}',\n                            htmlspecialchars($pic_record['uuid'], ENT_COMPAT, 'UTF-8'),\n                            $tmpline\n                        );\n\n                        $pictures .= $tmpline;\n                    }\n\n                    $pictures = mb_ereg_replace('{lines}', $pictures, $picturelines);\n                    mysqli_free_result($rspictures);\n                    tpl_set_var('pictures', $pictures);\n                } else {\n                    tpl_set_var('pictures', $nopictures);\n                }\n                tpl_set_var('gc_com_msg2', mb_ereg_replace('%1', $opt['page']['sitename'], $gc_com_msg2));\n\n                tpl_set_var('waypoints', getWaypoints($cache_id));\n\n                tpl_set_var('cacheid', htmlspecialchars($cache_id, ENT_COMPAT, 'UTF-8'));\n                tpl_set_var('name', htmlspecialchars($cache_name, ENT_COMPAT, 'UTF-8'));\n\n                tpl_set_var('ownername', htmlspecialchars($cache_record['username'], ENT_COMPAT, 'UTF-8'));\n\n                tpl_set_var('date_day', htmlspecialchars($cache_hidden_day, ENT_COMPAT, 'UTF-8'));\n                tpl_set_var('date_month', htmlspecialchars($cache_hidden_month, ENT_COMPAT, 'UTF-8'));\n                tpl_set_var('date_year', htmlspecialchars($cache_hidden_year, ENT_COMPAT, 'UTF-8'));\n\n                tpl_set_var('selLatN', ($coords_latNS == 'N') ? ' selected=\"selected\"' : '');\n                tpl_set_var('selLatS', ($coords_latNS == 'S') ? ' selected=\"selected\"' : '');\n                tpl_set_var('selLonE', ($coords_lonEW == 'E') ? ' selected=\"selected\"' : '');\n                tpl_set_var('selLonW', ($coords_lonEW == 'W') ? ' selected=\"selected\"' : '');\n                tpl_set_var('lat_h', htmlspecialchars($coords_lat_h, ENT_COMPAT, 'UTF-8'));\n                tpl_set_var('lat_min', htmlspecialchars($coords_lat_min, ENT_COMPAT, 'UTF-8'));\n                tpl_set_var('lon_h', htmlspecialchars($coords_lon_h, ENT_COMPAT, 'UTF-8'));\n                tpl_set_var('lon_min', htmlspecialchars($coords_lon_min, ENT_COMPAT, 'UTF-8'));\n\n                tpl_set_var('name_message', ($name_not_ok == true) ? $name_message : '');\n                tpl_set_var('lon_message', ($lon_not_ok == true) ? $coords_message : '');\n                tpl_set_var('lat_message', ($lat_not_ok == true) ? $coords_message : '');\n                if ($hidden_date_mismatch == true) {\n                    if ($cache_type == 6) {\n                        tpl_set_var('date_message', $event_before_publish_message);\n                    } else {\n                        tpl_set_var('date_message', $hide_after_publish_message);\n                    }\n                } else {\n                    tpl_set_var('date_message', ($hidden_date_not_ok == true) ? $date_message : '');\n                }\n                tpl_set_var('size_message', ($size_not_ok == true) ? $sizemismatch_message : '');\n                tpl_set_var('wpgc_message', ($wpgc_not_ok == true) ? $bad_wpgc_message : '');\n\n                if ($lon_not_ok || $lat_not_ok || $hidden_date_not_ok || $name_not_ok) {\n                    tpl_set_var('general_message', $error_general);\n                } else {\n                    tpl_set_var('general_message', '');\n                }\n\n                tpl_set_var('cacheid_urlencode', htmlspecialchars(urlencode($cache_id), ENT_COMPAT, 'UTF-8'));\n                tpl_set_var(\n                    'cacheuuid_urlencode',\n                    htmlspecialchars(urlencode($cache_record['uuid']), ENT_COMPAT, 'UTF-8')\n                );\n                tpl_set_var('show_all_countries', $show_all_countries);\n                tpl_set_var('show_all_countries_submit', ($show_all_countries == 0) ? $all_countries_submit : '');\n                tpl_set_var('listing_modified', $listing_modified);\n                tpl_set_var('savealert', $savealert);\n\n                $st_hours = floor($search_time);\n                $st_minutes = sprintf('%02.0F', ($search_time - $st_hours) * 60);\n\n                tpl_set_var('search_time', $st_hours . ':' . $st_minutes);\n\n                tpl_set_var('way_length', $way_length);\n                tpl_set_var('log_pw', htmlspecialchars($log_pw, ENT_COMPAT, 'UTF-8'));\n                tpl_set_var('wp_gc', htmlspecialchars($wp_gc, ENT_COMPAT, 'UTF-8'));\n                tpl_set_var('showlists_checked', $showlists ? 'checked=\"checked\"' : '');\n                tpl_set_var('protectcoords_checked', $protect_old_coords ? 'checked=\"checked\"' : '');\n\n                tpl_set_var('reset', $reset);  // obsolete\n                tpl_set_var('submit', $submit);\n            }\n        }\n    }\n}\n\n//make the template and send it out\ntpl_BuildTemplate();\n", "<?php\n/****************************************************************************\n * ./lang/de/ocstyle/varset.inc.php\n * -------------------\n * begin                : Mon June 14 2004\n *\n * For license information see LICENSE.md\n ****************************************************************************/\n\n/****************************************************************************\n *\n *\n * template specific variables setup\n ****************************************************************************/\n\n//set all main template replacement to default values\n\ntpl_set_var('htmlheaders', '');\ntpl_set_var('lang', $lang);\ntpl_set_var('style', $style);\ntpl_set_var('loginbox', '&nbsp;');\ntpl_set_var(\n    'functionsbox',\n    '<a href=\"index.php?page=suche\">' . t('Search') . '</a> | <a href=\"index.php?page=sitemap\">' . t('Sitemap') . '</a>'\n);\ntpl_set_var('runtime', '');\n\n//set up main template specific string\n$sLoggedOut =\n    '<form action=\"' . ($opt['page']['https']['force_login'] ? $opt['page']['absolute_https_url'] : '') . 'login.php\" method=\"post\" enctype=\"application/x-www-form-urlencoded\" name=\"login\" dir=\"ltr\" style=\"display: inline;\"><b>'\n    . t('User:')\n    . '</b>&nbsp;&nbsp;<input name=\"email\" size=\"10\" type=\"text\" class=\"textboxes\" value=\"\" />&nbsp;&nbsp;&nbsp;<b>'\n    . t('Password:')\n    . '</b>&nbsp;&nbsp;<input name=\"password\" size=\"10\" type=\"password\" class=\"textboxes\" value=\"\" />&nbsp;<input type=\"hidden\" name=\"action\" value=\"login\" /><input type=\"hidden\" name=\"target\" value=\"{target}\" />&nbsp;<input type=\"submit\" name=\"LogMeIn\" value=\"'\n    . t('Login')\n    . '\" class=\"formbutton\" style=\"width: 74px;\" onclick=\"submitbutton(\\'LogMeIn\\')\" /></form>';\n$sLoggedIn =\n    \"<b>\"\n    . t('Logged in as')\n    . ' <a href=\"myhome.php\" class=\"testing-top-left-corner-username\">{username}</a></b> - <a href=\"login.php?action=logout\">'\n    . t('Logout')\n    . '</a></b>';\n\n// target in Loginbox setzen\n$target = basename($_SERVER['PHP_SELF']) . '?';\n\n// REQUEST-Variablen durchlaufen und an target anhaengen\n$allowed = ['cacheid', 'userid', 'logid', 'desclang', 'descid'];\n\nforeach($_REQUEST as $varname => $varvalue) {\n    if (in_array($varname, $allowed)) {\n        $target .= $varname . '=' . $varvalue . '&';\n    }\n}\nif (mb_substr($target, - 1) == '?' || mb_substr($target, - 1) == '&') {\n    $target = mb_substr($target, 0, - 1);\n}\n$sLoggedOut = mb_ereg_replace('{target}', $target, $sLoggedOut);\n\n$functionsbox_start_tag = '';\n$functionsbox_middle_tag = ' | ';\n$functionsbox_end_tag = '';\n\n$tpl_subtitle = '';\n\n//other vars\n$login_required = t('Please login to continue:');\n\n$dberrormsg = t('A database command could not be performed.');\n\n$error_prefix = '<span class=\"errormsg\">';\n$error_suffix = '</span>';\n\n$htmlnotice =\n    '<tr><td class=\"spacer\" colspan=\"2\"></td></tr>\n    <tr>\n        <td class=\"help\" colspan=\"2\">\n            <img src=\"lang/de/ocstyle/images/misc/hint.gif\" border=\"0\" width=\"15\" height=\"11\" alt=\"' . t('Notice') . '\" title=\"' . t('Notice') . '\" />\n            ' . t('Your HTML code will be changed again by a special filter. This is necessary to avoid dangerous HTML-tags,\n                 such as &lt;script&gt;. A list of allowed HTML tags, you can find\n                 <a href=\"articles.php?page=htmltags\">here</a>') . '\n        </td>\n    </tr>\n    ';\n", "<?php\n/****************************************************************************\n * ./lib/clicompatbase.inc.php\n * --------------------\n * begin                : Fri September 16 2005\n * For license information see LICENSE.md\n ****************************************************************************/\n\nuse Oc\\Util\\CBench;\n\n/****************************************************************************\n * contains functions that are compatible with the php-CLI-scripts under util.\n * Can be included without including common.inc.php, but will be included from\n * common.inc.php.\n * Global variables that need to be set up when including without common.inc.php:\n * $dblink\n ****************************************************************************/\n\nrequire_once __DIR__ . '/../vendor/autoload.php';\n\nglobal $interface_output, $dblink_slave;\nif (!isset($interface_output)) {\n    $interface_output = 'plain';\n}\n\nif (isset($opt['rootpath'])) {\n    $rootpath = $opt['rootpath'];\n} elseif (isset($rootpath)) {\n    $opt['rootpath'] = $rootpath;\n} else {\n    $rootpath = __DIR__ . '/../';\n    $opt['rootpath'] = $rootpath;\n}\n\n// yepp, we will use UTF-8\nmb_internal_encoding('UTF-8');\nmb_regex_encoding('UTF-8');\nmb_language('uni');\n\n//load default webserver-settings and common includes\nrequire_once __DIR__ . '/consts.inc.php';\nrequire_once __DIR__ . '/settings.inc.php';\nrequire_once __DIR__ . '/../lib2/errorhandler.inc.php';\n\n// check for banned UAs\n$useragent = isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '';\nforeach ($opt['page']['banned_user_agents'] as $ua) {\n    if (strpos($useragent, $ua) !== false) {\n        die();\n    }\n}\n\n// basic PHP settings\ndate_default_timezone_set($timezone);\nregister_errorhandlers();\n\nif (isset($debug_page) && $debug_page) {\n    ini_set('display_errors', true);\n    ini_set('error_reporting', E_ALL);\n} else {\n    ini_set('display_errors', false);\n    ini_set('error_reporting', E_ALL & ~E_NOTICE);\n}\n\n$dblink_slave = false;\n$db_error = 0;\n\n// prepare EMail-From\n$emailheaders = 'From: \"' . $emailaddr . '\" <' . $emailaddr . '>';\n\n/**\n * @param string $module\n * @param int $eventId\n * @param $userId\n * @param $objectid1\n * @param int $objectid2\n * @param string $logtext\n * @param $details\n */\nfunction logentry($module, $eventId, $userId, $objectid1, $objectid2, $logtext, $details): void\n{\n    sql(\n        \"INSERT INTO logentries (`module`, `eventid`, `userid`, `objectid1`, `objectid2`, `logtext`, `details`)\n         VALUES ('&1', '&2', '&3', '&4', '&5', '&6', '&7')\",\n        $module,\n        $eventId,\n        $userId,\n        $objectid1,\n        $objectid2,\n        $logtext,\n        serialize($details)\n    );\n}\n\n// read a file and return it as a string\n// WARNING: no huge files!\nfunction read_file($file = '')\n{\n    $content = false;\n    $fh = fopen($file, 'r');\n    if ($fh) {\n        $content = fread($fh, filesize($file));\n    }\n\n    fclose($fh);\n\n    return $content;\n}\n\nfunction escape_javascript($text)\n{\n    return str_replace('\\'', '\\\\\\'', str_replace('\"', '&quot;', $text));\n}\n\n// called if mysqli_query failed, sends email to sysadmin\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n */\nfunction sql_failed(): void\n{\n    sql_error();\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $sql\n * @param mixed $default\n */\nfunction sqlValue($sql, $default)\n{\n    $rs = sql($sql);\n    if ($r = sql_fetch_row($rs)) {\n        if ($r[0] == null) {\n            return $default;\n        }\n\n        return $r[0];\n    }\n\n    return $default;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $sql\n * @param $default\n * @return mixed\n */\nfunction sql_value_slave($sql, $default)\n{\n    $rs = sql_slave($sql);\n    if ($r = sql_fetch_row($rs)) {\n        if ($r[0] == null) {\n            return $default;\n        }\n\n        return $r[0];\n    }\n\n    return $default;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $name\n * @param string $default\n * @return string\n */\nfunction getSysConfig($name, $default)\n{\n    return sqlValue('SELECT `value` FROM `sysconfig` WHERE `name`=\\'' . sql_escape($name) . '\\'', $default);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $name\n * @param string $value\n */\nfunction setSysConfig($name, $value): void\n{\n    if (sqlValue('SELECT COUNT(*) FROM sysconfig WHERE name=\\'' . sql_escape($name) . '\\'', 0) == 1) {\n        sql(\n            \"UPDATE `sysconfig` SET `value`='&1' WHERE `name`='&2' LIMIT 1\",\n            $value,\n            $name\n        );\n    } else {\n        sql(\n            \"INSERT INTO `sysconfig` (`name`, `value`) VALUES ('&1', '&2')\",\n            $name,\n            $value\n        );\n    }\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $sql\n * @return mysqli_result\n */\nfunction sql($sql)\n{\n    global $dblink;\n\n    // prepare args\n    $args = func_get_args();\n    unset($args[0]);\n\n    if (isset($args[1]) && is_array($args[1])) {\n        $tmp_args = $args[1];\n        unset($args);\n\n        // correct indizes\n        $args = array_merge([0], $tmp_args);\n        unset($tmp_args);\n        unset($args[0]);\n    }\n\n    return sql_internal($dblink, $sql, false, $args);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $sql\n * @return mysqli_result\n */\nfunction sql_slave($sql)\n{\n    throw new InvalidArgumentException('sql slave support was removed!');\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $_dblink\n * @param $sql\n * @return mysqli_result\n */\nfunction sql_internal($_dblink, $sql)\n{\n    global $sql_warntime;\n    global $sql_replacements;\n\n    $args = func_get_args();\n    unset($args[0], $args[1], $args[2]);\n\n    /* as an option, you can give as second parameter an array\n     * with all values for the placeholder. The array has to be\n     * with numeric indices.\n     */\n    if (isset($args[3]) && is_array($args[3])) {\n        $tmp_args = $args[3];\n        unset($args);\n\n        // correct indices\n        $args = array_merge([0], $tmp_args);\n        unset($tmp_args);\n        unset($args[0]);\n    }\n\n    $sqlpos = 0;\n    $filtered_sql = '';\n\n    // $sql von vorne bis hinten durchlaufen und alle &x ersetzen\n    $nextarg = mb_strpos($sql, '&');\n    while ($nextarg !== false) {\n        // muss dieses & ersetzt werden, oder ist es escaped?\n        $escapesCount = 0;\n        while ((($nextarg - $escapesCount - 1) > 0) && (mb_substr($sql, $nextarg - $escapesCount - 1, 1) == '\\\\')) {\n            $escapesCount++;\n        }\n        if (($escapesCount % 2) == 1) {\n            $nextarg++;\n        } else {\n            $nextchar = mb_substr($sql, $nextarg + 1, 1);\n            if (is_numeric($nextchar)) {\n                $arglength = 0;\n                $arg = '';\n\n                // n\u00e4chstes Zeichen das keine Zahl ist herausfinden\n                while (mb_ereg_match('^[0-9]{1}', $nextchar) == 1) {\n                    $arg .= $nextchar;\n\n                    $arglength++;\n                    $nextchar = mb_substr($sql, $nextarg + $arglength + 1, 1);\n                }\n\n                // ok ... ersetzen\n                $filtered_sql .= mb_substr($sql, $sqlpos, $nextarg - $sqlpos);\n                $sqlpos = $nextarg + $arglength;\n\n                if (isset($args[$arg])) {\n                    if (is_numeric($args[$arg])) {\n                        $filtered_sql .= $args[$arg];\n                    } else {\n                        if ((mb_substr($sql, $sqlpos - $arglength - 1, 1) == '\\'') &&\n                            (mb_substr($sql, $sqlpos + 1, 1) == '\\'')\n                        ) {\n                            $filtered_sql .= sql_escape($args[$arg]);\n                        } elseif ((mb_substr($sql, $sqlpos - $arglength - 1, 1) == '`') &&\n                            (mb_substr($sql, $sqlpos + 1, 1) == '`')\n                        ) {\n                            $filtered_sql .= sql_escape($args[$arg]);\n                        } else {\n                            sql_error();\n                        }\n                    }\n                } else {\n                    // NULL\n                    if ((mb_substr($sql, $sqlpos - $arglength - 1, 1) == '\\'') &&\n                        (mb_substr($sql, $sqlpos + 1, 1) == '\\'')\n                    ) {\n                        // Anf\u00fchrungszeichen weg machen und NULL einsetzen\n                        $filtered_sql = mb_substr($filtered_sql, 0, mb_strlen($filtered_sql) - 1);\n                        $filtered_sql .= 'NULL';\n                        $sqlpos++;\n                    } else {\n                        $filtered_sql .= 'NULL';\n                    }\n                }\n\n                $sqlpos++;\n            } else {\n                $arglength = 0;\n                $arg = '';\n\n                // n\u00e4chstes Zeichen das kein Buchstabe/Zahl ist herausfinden\n                while (mb_ereg_match('^[a-zA-Z0-9]{1}', $nextchar) == 1) {\n                    $arg .= $nextchar;\n\n                    $arglength++;\n                    $nextchar = mb_substr($sql, $nextarg + $arglength + 1, 1);\n                }\n\n                // ok ... ersetzen\n                $filtered_sql .= mb_substr($sql, $sqlpos, $nextarg - $sqlpos);\n\n                if (isset($sql_replacements[$arg])) {\n                    $filtered_sql .= $sql_replacements[$arg];\n                } else {\n                    sql_error();\n                }\n\n                $sqlpos = $nextarg + $arglength + 1;\n            }\n        }\n\n        $nextarg = mb_strpos($sql, '&', $nextarg + 1);\n    }\n\n    // rest anh\u00e4ngen\n    $filtered_sql .= mb_substr($sql, $sqlpos);\n\n    // \\& durch & ersetzen\n    $nextarg = mb_strpos($filtered_sql, '\\&');\n    while ($nextarg !== false) {\n        $escapesCount = 0;\n        while ((($nextarg - $escapesCount - 1) > 0) &&\n            (mb_substr($filtered_sql, $nextarg - $escapesCount - 1, 1) == '\\\\')) {\n            $escapesCount++;\n        }\n        if (($escapesCount % 2) == 0) {\n            // \\& ersetzen durch &\n            $filtered_sql = mb_substr($filtered_sql, 0, $nextarg) . '&' . mb_substr($filtered_sql, $nextarg + 2);\n            $nextarg--;\n        }\n\n        $nextarg = mb_strpos($filtered_sql, '\\&', $nextarg + 2);\n    }\n\n    //\n    // ok ... hier ist filtered_sql fertig\n    //\n\n    /* todo:\n        - errorlogging\n        - LIMIT\n        - DROP/DELETE ggf. blocken\n    */\n\n    // Zeitmessung f\u00fcr die Ausf\u00fchrung\n    $cSqlExecution = new CBench;\n    $cSqlExecution->start();\n\n    $result = mysqli_query($_dblink, $filtered_sql);\n    if ($result === false) {\n        sql_error();\n    }\n\n    $cSqlExecution->stop();\n\n    if ($sql_warntime > 0 && $cSqlExecution->diff() > $sql_warntime) {\n        $ua = isset($_SERVER['HTTP_USER_AGENT']) ? \"\\r\\n\" . $_SERVER['HTTP_USER_AGENT'] : '';\n        sql_warn('execution took ' . $cSqlExecution->diff() . ' seconds' . $ua);\n    }\n\n    return $result;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $value\n * @return false|string\n */\nfunction sql_escape($value)\n{\n    global $dblink;\n    $value = mysqli_real_escape_string($dblink, $value);\n    $value = mb_ereg_replace('&', '\\&', $value);\n\n    return $value;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $value\n * @return false|mixed|string\n */\nfunction sql_escape_backtick($value)\n{\n    $value = sql_escape($value);\n    $value = str_replace('`', '``', $value);\n\n    return $value;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n */\nfunction sql_error(): void\n{\n    global $debug_page;\n    global $sql_errormail;\n    global $emailheaders;\n    global $absolute_server_URI;\n    global $interface_output;\n    global $dberrormsg;\n    global $db_error;\n    global $dblink;\n\n    $db_error += 1;\n    $msql_error = mysqli_connect_error() . ': ' . mysqli_error($dblink);\n    if ($db_error > 1) {\n        $msql_error .= \"\\n(** error recursion **)\";\n    }\n\n    if ($sql_errormail != '') {\n        // sendout email\n        $email_content = $msql_error;\n        $email_content .= \"\\n--------------------\\n\";\n        $email_content .= print_r(debug_backtrace(), true);\n        if (admin_errormail($sql_errormail, 'sql_error', $email_content, $emailheaders)) {\n            mb_send_mail($sql_errormail, 'sql_error: ' . $absolute_server_URI, $email_content, $emailheaders);\n        }\n    }\n\n    if ($interface_output == 'html') {\n        // display errorpage\n        $errmsg = $dberrormsg . ($debug_page ? '<br />' . $msql_error : '');\n        if ($db_error <= 1) {\n            tpl_errorMsg('sql_error', $errmsg);\n        } else {\n            // database error recursion, because another error occurred while trying to\n            // build the error template (e.g. because connection was lost, or an error mail\n            // could not load translations from database)\n\n            $errtitle = 'Datenbankfehler';\n            require __DIR__ . '/../html/error.php';\n        }\n        exit;\n    } elseif ($interface_output == 'plain') {\n        echo \"\\n\";\n        echo 'sql_error' . \"\\n\";\n        if ($debug_page) {\n            echo $msql_error . \"\\n\";\n        }\n        echo '---------' . \"\\n\";\n        echo print_r(debug_backtrace(), true) . \"\\n\";\n        exit;\n    }\n\n    die('sql_error');\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $warnmessage\n */\nfunction sql_warn($warnmessage): void\n{\n    global $sql_errormail;\n    global $emailheaders;\n    global $absolute_server_URI;\n\n    $email_content = $warnmessage;\n    $email_content .= \"\\n--------------------\\n\";\n    $email_content .= print_r(debug_backtrace(), true);\n\n    if (admin_errormail($sql_errormail, 'sql_warn', $email_content, $emailheaders)) {\n        @mb_send_mail($sql_errormail, 'sql_warn: ' . $absolute_server_URI, $email_content, $emailheaders);\n    }\n}\n\n/*\n    Ersatz f\u00fcr die in Mysql eingebauten Funktionen\n*/\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param resource $rs\n * @return array\n */\nfunction sql_fetch_array($rs)\n{\n    return mysqli_fetch_array($rs);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $rs\n * @return array\n */\nfunction sql_fetch_assoc($rs)\n{\n    return mysqli_fetch_assoc($rs);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $rs\n * @return array\n */\nfunction sql_fetch_row($rs)\n{\n    return mysqli_fetch_row($rs);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param resource $rs\n * @return array|null\n */\nfunction sql_fetch_column($rs)\n{\n    $col = [];\n    while ($r = sql_fetch_row($rs)) {\n        if (count($r) != 1) {\n            return null;\n        }\n        $col[] = $r[0];\n    }\n    sql_free_result($rs);\n\n    return $col;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $rs\n * @return bool\n */\nfunction sql_free_result($rs)\n{\n    return mysqli_free_result($rs);\n}\n\nfunction mb_trim($str)\n{\n    $bLoop = true;\n    while ($bLoop == true) {\n        $sPos = mb_substr($str, 0, 1);\n\n        if ($sPos == ' ' || $sPos == \"\\r\" || $sPos == \"\\n\" || $sPos == \"\\t\" || $sPos == \"\\x0B\" || $sPos == \"\\0\") {\n            $str = mb_substr($str, 1, mb_strlen($str) - 1);\n        } else {\n            $bLoop = false;\n        }\n    }\n\n    $bLoop = true;\n    while ($bLoop == true) {\n        $sPos = mb_substr($str, -1, 1);\n\n        if ($sPos == ' ' || $sPos == \"\\r\" || $sPos == \"\\n\" || $sPos == \"\\t\" || $sPos == \"\\x0B\" || $sPos == \"\\0\") {\n            $str = mb_substr($str, 0, mb_strlen($str) - 1);\n        } else {\n            $bLoop = false;\n        }\n    }\n\n    return $str;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * disconnect the database\n */\nfunction db_disconnect(): void\n{\n    global $dbpconnect, $dblink;\n\n    //is connected and no persistent connect used?\n    if (($dbpconnect == false) && ($dblink !== false)) {\n        @mysqli_close($dblink);\n        $dblink = false;\n    }\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * database handling\n */\nfunction db_connect(): void\n{\n    global $dblink, $dbusername, $dbname, $dbserver, $dbpasswd;\n\n    //connect to the database by the given method - no php error reporting!\n    $dblink = mysqli_connect($dbserver, $dbusername, $dbpasswd, $dbname);\n\n    if (!$dblink instanceof mysqli) {\n        throw new InvalidArgumentException('cannot connect to database');\n    }\n}\n\nfunction get_site_urls($domain)\n{\n    global $opt;\n\n    if (!$domain) {\n        $domain = parse_url($opt['page']['default_primary_url'], PHP_URL_HOST);\n    }\n    if ($domain == parse_url($opt['page']['default_primary_url'], PHP_URL_HOST) ||\n        !isset($opt['domain'][$domain]['url'])\n    ) {\n        $site_url = $opt['page']['default_primary_url'];\n        $shortlink_url = $opt['page']['default_primary_shortlink_url'];\n    } else {\n        $protocol = 'http';\n        if (isset($opt['domain'][$domain]['https']['is_default']) && $opt['domain'][$domain]['https']['is_default']) {\n            $protocol = 'https';\n        }\n\n        $site_url = $protocol . strstr($opt['domain'][$domain]['url'], '://');\n        if (isset($opt['domain'][$domain]['shortlink_domain']) && $opt['domain'][$domain]['shortlink_domain']) {\n            $shortlink_url = $protocol . '://' . $opt['domain'][$domain]['shortlink_domain'] . '/';\n        } else {\n            $shortlink_url = false;\n        }\n    }\n\n    return [\n        'site_url' => $site_url,\n        'shortlink_url' => $shortlink_url,\n    ];\n}\n\n/**\n * @param string $filename\n * @param mixed $language\n * @param mixed $domain\n * @return bool|string\n */\nfunction fetch_email_template($filename, $language, $domain)\n{\n    global $opt, $rootpath;\n\n    if (!$language) {\n        $language = $opt['template']['default']['locale'];\n    }\n    $language = strtolower($language);\n    if (!file_exists(__DIR__ . '/../lang/de/ocstyle/email/' . $language . '/' . $filename . '.email')) {\n        $language = 'en';\n    }\n    $mailtext = read_file(__DIR__ . '/../lang/de/ocstyle/email/' . $language . '/' . $filename . '.email');\n\n    $urls = get_site_urls($domain);\n    $mailtext = mb_ereg_replace('{site_url}', $urls['site_url'], $mailtext);\n    if ($urls['shortlink_url']) {\n        $mailtext = mb_ereg_replace('{shortlink_url}', $urls['shortlink_url'], $mailtext);\n    } else {\n        $mailtext = mb_ereg_replace('{shortlink_url}', $urls['site_url'], $mailtext);\n    }\n\n    $mailtext = mb_ereg_replace('{email_contact}', $opt['mail']['contact'], $mailtext);\n\n    return $mailtext;\n}\n", "<?php\n/***************************************************************************\n * for license information see LICENSE.md\n *  This module includes all database function necessary to do queries from\n *  the database.\n ***************************************************************************/\n\nuse Oc\\Util\\CBench;\n\n/***************************************************************************\n * Overview:\n * sql_enable_debugger()           ... enables Sqldebug if not not already done by config\n * sql($sql)                       ... Query SQL and return result\n * sql_escape($value)              ... Escape parameter for SQL-use\n * sql_escape_backtick($value)     ... escape $value for use within backticks\n * sql_value($sql, $default)       ... Query SQL and return first row of first line\n * sql_fetch_array($rs)            ... mysqli_fetch_array with charset conversion\n * sql_fetch_assoc($rs)            ... mysqli_fetch_assoc with charset conversion\n * sql_fetch_row($rs)              ... mysqli_fetch_row with charset conversion\n * sql_fetch_column($rs)           ... fetch column with charset conversion\n * sql_fetch_assoc_table($rs)      ... fetch_assoc for all rows\n * sql_temp_table($table)          ... registers an placeholder for use as temporary\n * table and drop's temporary tables if\n * mysqli_pconnect is used\n * sql_drop_temp_table($table)     ... unregisters and drops an tmp-table placeholder\n * sql_free_result($rs)            ... mysqli_free_result\n * sql_affected_rows()             ... mysqli_affected_rows\n * sql_insert_id()                 ... mysqli_insert_id\n * sql_num_rows($rs)               ... mysqli_num_rows\n * sql_export_recordset($f, $rs)   ... export recordset to file\n * sql_export_table($f, $table)    ... export table to file\n * sql_export_table_to_file($filename, $table)\n * sql_table_exists                ... tests if a table exists\n * sql_field_exists                ... tests if a table and a field in this table exist\n * sql_field_type                  ... queries the type of a field (uppercase letters)\n * sql_index_exists                ... tests if a table and an index of this table exist\n * // slave query functions\n * sql_slave_exclude()             ... do not use slave servers for the current user\n * until the slaves have replicated to this point\n * (e.g. after a new cache was hidden)\n * sql_slave($sql)\n * sql_value_slave($sql, $default)\n * sql_temp_table_slave($table)\n * sql_drop_temp_table_slave($table)\n * sql_affected_rows_slave()\n * sql_insert_id_slave()\n * sql_connect_anyslave()\n * sql_connect_slave($id)\n * sqlf_slave($sql)\n * // for sqldebugger\n * sqlf($sql)                    ... sql for framwork functions\n * sqll($sql)                    ... sql for business layer functions\n * sqlf_value($sql, $default)    ... sql_value for framwork functions\n * sqll_value($sql, $default)    ... sql_value for business layer functions\n * // only for internal use      ... invoked automatically\n * sql_connect()                 ... connect to the database\n * sql_disconnect()              ... disconnect database\n * sql_error()                   ... report an error and stop processing\n * sql_warn($warnmessage)        ... report a warning and resume processing\n * // for maintenance functions\n * sql_connect_maintenance()       ... connect the database with more privileges\n * sql_dropFunction                ... drops stored function\n * sql_dropProcedure               ... drops stored procedure\n * sql_dropTrigger                 ... drops stored trigger\n ***************************************************************************/\n\n$db['connected'] = false;\n$db['dblink'] = false;\n$db['dblink_slave'] = false;\n$db['slave_id'] = -1;\n$db['slave_server'] = '';\n$db['temptable_initialized'] = false;\n$db['temptables'] = [];\n$db['temptables_slave'] = [];\n$db['mode'] = DB_MODE_USER;\n$db['error'] = false;\n\n$db['debug'] = (($opt['debug'] & DEBUG_SQLDEBUGGER) == DEBUG_SQLDEBUGGER);\nif ($db['debug'] === true) {\n    require_once __DIR__ . '/sqldebugger.class.php';\n}\n\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $sql\n * @return resource\n */\nfunction sql($sql)\n{\n    global $db;\n\n    // establish db connection\n    if ($db['connected'] !== true) {\n        sql_connect();\n    }\n\n    // prepare args\n    $args = func_get_args();\n    unset($args[0]);\n\n    if (isset($args[1]) && is_array($args[1])) {\n        $tmp_args = $args[1];\n        unset($args);\n\n        // correct indices\n        $args = array_merge([0], $tmp_args);\n        unset($tmp_args, $args[0]);\n    }\n\n    return sql_internal($db['dblink'], $sql, $args);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $sql\n * @return resource\n */\nfunction sql_slave($sql)\n{\n    global $db;\n\n    if ($db['dblink_slave'] === false) {\n        sql_connect_anyslave();\n    }\n\n    // prepare args\n    $args = func_get_args();\n    unset($args[0]);\n\n    if (isset($args[1]) && is_array($args[1])) {\n        $tmp_args = $args[1];\n        unset($args);\n\n        // correct indices\n        $args = array_merge([0], $tmp_args);\n        unset($tmp_args, $args[0]);\n    }\n\n    return sql_internal($db['dblink_slave'], $sql, $args);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $dblink\n * @param $sql\n * @return resource\n */\nfunction sql_internal($dblink, $sql)\n{\n    global $opt, $db, $sqldebugger;\n\n    $args = func_get_args();\n    unset($args[0], $args[1]);\n\n    /* as an option, you can give as second parameter an array\n     * with all values for the placeholder. The array has to be\n     * with numeric indices.\n     */\n    if (isset($args[2]) && is_array($args[2])) {\n        $tmp_args = $args[2];\n        unset($args);\n\n        // correct indices\n        $args = array_merge([0], $tmp_args);\n        unset($tmp_args, $args[0]);\n    }\n\n    $sqlpos = 0;\n    $filtered_sql = '';\n\n    // replace every &x in $sql with the placeholder or parameter\n    $nextarg = strpos($sql, '&');\n    while ($nextarg !== false) {\n        // & escaped?\n        $escapesCount = 0;\n        while ((($nextarg - $escapesCount - 1) > 0) && (substr($sql, $nextarg - $escapesCount - 1, 1) == '\\\\')) {\n            $escapesCount++;\n        }\n        if (($escapesCount % 2) === 1) {\n            $nextarg++;\n        } else {\n            $nextchar = substr($sql, $nextarg + 1, 1);\n            if (is_numeric($nextchar)) {\n                $arglength = 0;\n                $arg = '';\n\n                // find next non-digit\n                while (preg_match('/^[0-9]{1}/', $nextchar) === 1) {\n                    $arg .= $nextchar;\n\n                    $arglength++;\n                    $nextchar = substr($sql, $nextarg + $arglength + 1, 1);\n                }\n\n                // ok ... replace\n                $filtered_sql .= substr($sql, $sqlpos, $nextarg - $sqlpos);\n                $sqlpos = $nextarg + $arglength;\n\n                if (isset($args[$arg])) {\n                    if (is_numeric($args[$arg])) {\n                        $filtered_sql .= $args[$arg];\n                    } else {\n                        if ((substr($sql, $sqlpos - $arglength - 1, 1) == '\\'') && (substr(\n                                    $sql,\n                            $sqlpos + 1,\n                            1\n                                ) == '\\'')) {\n                            $filtered_sql .= sql_escape($args[$arg]);\n                        } elseif ((substr($sql, $sqlpos - $arglength - 1, 1) == '`') && (substr(\n                                    $sql,\n                            $sqlpos + 1,\n                            1\n                                ) == '`')) {\n                            $filtered_sql .= sql_escape_backtick($args[$arg]);\n                        } else {\n                            sql_error($sql);\n                        }\n                    }\n                } else {\n                    // NULL\n                    if ((substr($sql, $sqlpos - $arglength - 1, 1) == '\\'') && (substr($sql, $sqlpos + 1, 1) == '\\'')) {\n                        // strip apostroph and insert NULL\n                        $filtered_sql = substr($filtered_sql, 0, strlen($filtered_sql) - 1);\n                        $filtered_sql .= 'NULL';\n                        $sqlpos++;\n                    } else {\n                        $filtered_sql .= 'NULL';\n                    }\n                }\n\n                $sqlpos++;\n            } else {\n                $arglength = 0;\n                $arg = '';\n\n                // find next non-alphanumeric char\n                // (added '_' - it is used in temptable names - following 2013/07/18)\n                while (preg_match('/^[a-zA-Z0-9_]{1}/', $nextchar) == 1) {\n                    $arg .= $nextchar;\n\n                    $arglength++;\n                    $nextchar = substr($sql, $nextarg + $arglength + 1, 1);\n                }\n\n                // ok ... replace\n                $filtered_sql .= substr($sql, $sqlpos, $nextarg - $sqlpos);\n\n                if (isset($opt['db']['placeholder'][$arg])) {\n                    if (substr($sql, $nextarg - 1, 1) != '`') {\n                        $filtered_sql .= '`';\n                    }\n\n                    $filtered_sql .= sql_escape_backtick($opt['db']['placeholder'][$arg]);\n\n                    if (substr($sql, $nextarg + $arglength + 1, 1) != '`') {\n                        $filtered_sql .= '`';\n                    }\n                } elseif (isset($db['temptables'][$arg])) {\n                    if (substr($sql, $nextarg - 1, 1) != '`') {\n                        $filtered_sql .= '`';\n                    }\n\n                    $filtered_sql .= sql_escape_backtick(\n                            $opt['db']['placeholder']['tmpdb']\n                        ) . '`.`' . sql_escape_backtick($db['temptables'][$arg]);\n\n                    if (substr($sql, $nextarg + $arglength + 1, 1) != '`') {\n                        $filtered_sql .= '`';\n                    }\n                } else {\n                    sql_error($sql);\n                }\n\n                $sqlpos = $nextarg + $arglength + 1;\n            }\n        }\n\n        $nextarg = strpos($sql, '&', $nextarg + 1);\n    }\n\n    // append the rest\n    $filtered_sql .= substr($sql, $sqlpos);\n\n    // strip escapes of &\n    $nextarg = strpos($filtered_sql, '\\&');\n    while ($nextarg !== false) {\n        $escapesCount = 0;\n        while ((($nextarg - $escapesCount - 1) > 0)\n            && (substr($filtered_sql, $nextarg - $escapesCount - 1, 1) == '\\\\')) {\n            $escapesCount++;\n        }\n        if (($escapesCount % 2) == 0) {\n            // strip escapes of &\n            $filtered_sql = substr($filtered_sql, 0, $nextarg) . '&' . substr($filtered_sql, $nextarg + 2);\n            $nextarg--;\n        }\n\n        $nextarg = strpos($filtered_sql, '\\&', $nextarg + 2);\n    }\n\n    //\n    // ok ... filtered_sql is ready for usage\n    //\n\n    /* todo:\n        - errorlogging\n        - LIMIT\n        - block DROP/DELETE\n    */\n\n    if ($db['debug'] === true) {\n        $result = $sqldebugger->execute($filtered_sql, $dblink, $dblink === $db['dblink_slave'], $db['slave_server']);\n        if ($result === false) {\n            sql_error($filtered_sql);\n        }\n    } else {\n        // measure time\n        if ($opt['db']['warn']['time'] > 0) {\n            $cSqlExecution = new CBench;\n            $cSqlExecution->start();\n        }\n\n        $result = @mysqli_query($dblink, $filtered_sql);\n        if ($result === false) {\n            sql_error($filtered_sql);\n        }\n\n        if ($opt['db']['warn']['time'] > 0) {\n            $cSqlExecution->stop();\n\n            if ($cSqlExecution->diff() > $opt['db']['warn']['time']) {\n                $ua = isset($_SERVER['HTTP_USER_AGENT']) ? \"\\r\\n\" . $_SERVER['HTTP_USER_AGENT'] : '';\n                sql_warn('execution took ' . $cSqlExecution->diff() . ' seconds' . $ua);\n            }\n        }\n    }\n\n    return $result;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $sql\n * @return resource\n */\nfunction sqlf($sql)\n{\n    global $db;\n    $nOldMode = $db['mode'];\n    $db['mode'] = DB_MODE_FRAMEWORK;\n    $args = func_get_args();\n    unset($args[0]);\n    $result = sql($sql, $args);\n    $db['mode'] = $nOldMode;\n\n    return $result;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $sql\n * @return resource\n */\nfunction sqlf_slave($sql)\n{\n    global $db;\n    $nOldMode = $db['mode'];\n    $db['mode'] = DB_MODE_FRAMEWORK;\n    $args = func_get_args();\n    unset($args[0]);\n    $result = sql_slave($sql, $args);\n    $db['mode'] = $nOldMode;\n\n    return $result;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $sql\n * @return resource\n */\nfunction sqll($sql)\n{\n    global $db;\n    $nOldMode = $db['mode'];\n    $db['mode'] = DB_MODE_BUSINESSLAYER;\n    $args = func_get_args();\n    unset($args[0]);\n    $result = sql($sql, $args);\n    $db['mode'] = $nOldMode;\n\n    return $result;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $sql\n * @param int $default\n * @return mixed\n */\nfunction sqlf_value($sql, $default)\n{\n    global $db;\n    $nOldMode = $db['mode'];\n    $db['mode'] = DB_MODE_FRAMEWORK;\n    $args = func_get_args();\n    unset($args[0], $args[1]);\n    $result = sql_value($sql, $default, $args);\n    $db['mode'] = $nOldMode;\n\n    return $result;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $sql\n * @param int $default\n * @return mixed\n */\nfunction sqll_value($sql, $default)\n{\n    global $db;\n    $nOldMode = $db['mode'];\n    $db['mode'] = DB_MODE_BUSINESSLAYER;\n    $args = func_get_args();\n    unset($args[0], $args[1]);\n    $result = sql_value($sql, $default, $args);\n    $db['mode'] = $nOldMode;\n\n    return $result;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $value\n * @return string\n */\nfunction sql_escape($value)\n{\n    global $db, $opt;\n\n    // convert the charset of $value\n    if ($opt['charset']['iconv'] != 'UTF-8') {\n        $value = iconv('UTF-8', $opt['charset']['iconv'], $value);\n    }\n\n    // establish db connection\n    if ($db['connected'] !== true) {\n        sql_connect();\n    }\n\n    $value = mysqli_real_escape_string($db['dblink'], $value);\n    $value = str_replace('&', '\\&', $value);\n\n    return $value;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $value\n * @return string\n */\nfunction sql_escape_backtick($value)\n{\n    $value = sql_escape($value);\n    $value = str_replace('`', '``', $value);\n\n    return $value;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $sql\n * @param $default\n * @return mixed\n */\nfunction sql_value($sql, $default)\n{\n    $args = func_get_args();\n    unset($args[0], $args[1]);\n\n    if (isset($args[2]) && is_array($args[2])) {\n        $tmp_args = $args[2];\n        unset($args);\n\n        // correct indices\n        $args = array_merge([0], $tmp_args);\n        unset($tmp_args, $args[0]);\n    }\n\n    return sql_value_internal(false, $sql, $default, $args);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $sql\n * @param $default\n * @return mixed\n */\nfunction sql_value_slave($sql, $default)\n{\n    $args = func_get_args();\n    unset($args[0], $args[1]);\n\n    if (isset($args[2]) && is_array($args[2])) {\n        $tmp_args = $args[2];\n        unset($args);\n\n        // correct indices\n        $args = array_merge([0], $tmp_args);\n        unset($tmp_args, $args[0]);\n    }\n\n    return sql_value_internal(true, $sql, $default, $args);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param bool $bQuerySlave\n * @param $sql\n * @param $default\n * @return mixed\n */\nfunction sql_value_internal($bQuerySlave, $sql, $default)\n{\n    $args = func_get_args();\n    unset($args[0], $args[1], $args[2]);\n\n    /* as an option, you can give as third parameter an array\n     * with all values for the placeholder. The array has to be\n     * with numeric indices.\n     */\n    if (isset($args[3]) && is_array($args[3])) {\n        $tmp_args = $args[3];\n        unset($args);\n\n        // correct indices\n        $args = array_merge([0], $tmp_args);\n        unset($tmp_args, $args[0]);\n    }\n\n    if ($bQuerySlave == true) {\n        $rs = sql_slave($sql, $args);\n    } else {\n        $rs = sql($sql, $args);\n    }\n\n    $r = sql_fetch_row($rs);\n    sql_free_result($rs);\n\n    if ($r) {\n        if ($r[0] == null) {\n            return $default;\n        }\n\n        return $r[0];\n    }\n\n    return $default;\n}\n\n/*\n    Replacement for builtin MySQL functions\n    (includes database charset conversion)\n*/\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $rs\n * @return array\n */\nfunction sql_fetch_array($rs)\n{\n    global $opt;\n    $retval = mysqli_fetch_array($rs);\n    if (is_array($retval)) {\n        if ($opt['charset']['iconv'] != 'UTF-8') {\n            foreach ($retval as $k => $v) {\n                $retval[$k] = iconv($opt['charset']['iconv'], 'UTF-8', $v);\n            }\n        }\n    }\n\n    return $retval;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $rs\n * @return array\n */\nfunction sql_fetch_assoc($rs)\n{\n    global $opt;\n    $retval = mysqli_fetch_assoc($rs);\n    if (is_array($retval)) {\n        if ($opt['charset']['iconv'] != 'UTF-8') {\n            foreach ($retval as $k => $v) {\n                $retval[$k] = iconv($opt['charset']['iconv'], 'UTF-8', $v);\n            }\n        }\n    }\n\n    return $retval;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param resource $rs\n * @return array\n */\nfunction sql_fetch_assoc_table($rs)\n{\n    $result = [];\n    while ($r = sql_fetch_assoc($rs)) {\n        $result[] = $r;\n    }\n    sql_free_result($rs);\n\n    return $result;\n}\n\n// returns false if no more matching rows exist\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param resource $rs\n * @return array\n */\nfunction sql_fetch_row($rs)\n{\n    global $opt;\n    $retval = mysqli_fetch_row($rs);\n    if (is_array($retval)) {\n        if ($opt['charset']['iconv'] != 'UTF-8') {\n            foreach ($retval as $k => $v) {\n                $retval[$k] = iconv($opt['charset']['iconv'], 'UTF-8', $v);\n            }\n        }\n    }\n\n    return $retval;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $rs\n * @return array\n */\nfunction sql_fetch_column($rs)\n{\n    global $opt;\n    $result = [];\n    while ($r = mysqli_fetch_row($rs)) {\n        if ($opt['charset']['iconv'] != 'UTF-8') {\n            $result[] = iconv($opt['charset']['iconv'], 'UTF-8', $r[0]);\n        } else {\n            $result[] = $r[0];\n        }\n    }\n    sql_free_result($rs);\n\n    return $result;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @return int\n */\nfunction sql_affected_rows()\n{\n    global $db;\n\n    return mysqli_affected_rows($db['dblink']);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @return int\n */\nfunction sql_affected_rows_slave()\n{\n    global $db;\n\n    return mysqli_affected_rows($db['dblink_slave']);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $rs\n */\nfunction sql_free_result($rs): void\n{\n    mysqli_free_result($rs);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @return int\n */\nfunction sql_insert_id()\n{\n    global $db;\n\n    return mysqli_insert_id($db['dblink']);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @return int\n */\nfunction sql_insert_id_slave()\n{\n    global $db;\n\n    return mysqli_insert_id($db['dblink_slave']);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param resource $rs\n * @return int\n */\nfunction sql_num_rows($rs)\n{\n    return mysqli_num_rows($rs);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $table\n */\nfunction sql_temp_table($table): void\n{\n    global $db, $opt;\n\n    if ($db['connected'] == false) {\n        sql_connect();\n    }\n\n    if ($opt['db']['pconnect'] == true) {\n        if ($db['temptable_initialized'] == false) {\n            $rs = sqlf(\n                \"SELECT `threadid`, `name` FROM &db.`sys_temptables` WHERE `threadid`='&1'\",\n                mysqli_thread_id($db['dblink'])\n            );\n            while ($r = sql_fetch_assoc($rs)) {\n                sqlf('DROP TEMPORARY TABLE IF EXISTS &tmpdb.`&1`', $r['name']);\n            }\n            sql_free_result($rs);\n            sqlf(\"DELETE FROM &db.`sys_temptables` WHERE `threadid`='&1'\", mysqli_thread_id($db['dblink']));\n\n            $db['temptable_initialized'] = true;\n        }\n\n        sqlf(\n            \"INSERT IGNORE INTO &db.`sys_temptables` (`threadid`, `name`) VALUES ('&1', '&2')\",\n            mysqli_thread_id($db['dblink']),\n            $table\n        );\n    }\n\n    $db['temptables'][$table] = $table;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $table\n */\nfunction sql_temp_table_slave($table): void\n{\n    global $db, $opt;\n\n    if ($db['dblink_slave'] === false) {\n        sql_connect_anyslave();\n    }\n\n    if ($opt['db']['pconnect'] === true) {\n        sqlf_slave(\n            \"INSERT IGNORE INTO &db.`sys_temptables` (`threadid`, `name`) VALUES ('&1', '&2')\",\n            mysqli_thread_id($db['dblink_slave']),\n            $table\n        );\n    }\n\n    $db['temptables'][$table] = $table;\n    $db['temptables_slave'][$table] = $table;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $table\n */\nfunction sql_drop_temp_table($table): void\n{\n    global $db, $opt;\n\n    sqlf('DROP TEMPORARY TABLE IF EXISTS &tmpdb.`&1`', $table);\n\n    if ($opt['db']['pconnect'] === true) {\n        sqlf(\n            \"DELETE FROM &db.`sys_temptables` WHERE `threadid`='&1' AND `name`='&2'\",\n            mysqli_thread_id($db['dblink']),\n            $table\n        );\n    }\n\n    unset($db['temptables'][$table]);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $table\n * @param $newname\n */\nfunction sql_rename_temp_table($table, $newname): void\n{\n    global $db, $opt;\n\n    if ($opt['db']['pconnect'] === true) {\n        sqlf(\n            \"UPDATE &db.`sys_temptables` SET `name`='&3' WHERE `threadid`='&1' AND `name`='&2'\",\n            mysqli_thread_id($db['dblink']),\n            $table,\n            $newname\n        );\n    }\n\n    sqlf('ALTER TABLE &tmpdb.`&1` RENAME &tmpdb.`&2`', $table, $newname);\n\n    unset($db['temptables'][$table]);\n    $db['temptables'][$newname] = $newname;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $table\n */\nfunction sql_drop_temp_table_slave($table): void\n{\n    global $db, $opt;\n\n    sqlf_slave('DROP TEMPORARY TABLE IF EXISTS &tmpdb.`&1`', $table);\n\n    if ($opt['db']['pconnect'] === true) {\n        sqlf_slave(\n            \"DELETE FROM &db.`sys_temptables` WHERE `threadid`='&1' AND `name`='&2'\",\n            mysqli_thread_id($db['dblink']),\n            $table\n        );\n    }\n\n    unset($db['temptables'][$table], $db['temptables_slave'][$table]);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $table\n * @param $newname\n */\nfunction sql_rename_temp_table_slave($table, $newname): void\n{\n    global $db, $opt;\n\n    if ($opt['db']['pconnect'] === true) {\n        sqlf(\n            \"UPDATE &db.`sys_temptables` SET `name`='&3' WHERE `threadid`='&1' AND `name`='&2'\",\n            mysqli_thread_id($db['dblink']),\n            $table,\n            $newname\n        );\n    }\n\n    sqlf_slave('ALTER TABLE &tmpdb.`&1` RENAME &tmpdb.`&2`', $table, $newname);\n\n    unset($db['temptables'][$table], $db['temptables_slave'][$table]);\n    $db['temptables'][$newname] = $newname;\n    $db['temptables_slave'][$newname] = $newname;\n}\n\n//database handling\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param bool $raiseError\n * @param null|mixed $username\n * @param null|mixed $password\n */\nfunction sql_connect($username = null, $password = null, $raiseError = true): void\n{\n    global $opt, $db;\n\n    if ($username === null) {\n        $username = $opt['db']['username'];\n    }\n    if ($password === null) {\n        $password = $opt['db']['password'];\n    }\n\n    //connect to the database by the given method - no php error reporting!\n    $db['dblink'] = @mysqli_connect($opt['db']['servername'], $username, $password, $opt['db']['placeholder']['db']);\n\n\n    if ($db['dblink'] !== false) {\n        mysqli_query(\n            $db['dblink'],\n            \"SET NAMES '\" . mysqli_real_escape_string($db['dblink'], $opt['charset']['mysql']) . \"'\"\n        );\n    }\n\n    // output the error form if there was an error\n    if ($db['dblink'] === false) {\n        if ($raiseError === true) {\n            sql_error();\n        }\n    } else {\n        $db['connected'] = true;\n    }\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n */\nfunction sql_slave_exclude(): void\n{\n    global $login;\n    if ($login->userid == 0) {\n        return;\n    }\n\n    sql(\n        \"INSERT INTO `sys_repl_exclude` (`user_id`, `datExclude`) VALUES ('&1', NOW())\n                    ON DUPLICATE KEY UPDATE `datExclude`=NOW()\",\n        $login->userid\n    );\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n */\nfunction sql_connect_anyslave(): void\n{\n    global $db, $opt, $login;\n\n    if ($db['dblink_slave'] !== false) {\n        return;\n    }\n\n    $nMaxTimeDiff = $opt['db']['slave']['max_behind'];\n    if ($login->userid != 0) {\n        $nMaxTimeDiff = sql_value(\n            \"SELECT TIMESTAMP(NOW())-TIMESTAMP(`datExclude`)\n            FROM `sys_repl_exclude`\n            WHERE `user_id`='&1'\",\n            $opt['db']['slave']['max_behind'],\n            $login->userid\n        );\n        if ($nMaxTimeDiff > $opt['db']['slave']['max_behind']) {\n            $nMaxTimeDiff = $opt['db']['slave']['max_behind'];\n        }\n    }\n\n    $id = sqlf_value(\n        \"SELECT `id`, `weight`*RAND() AS `w`\n        FROM `sys_repl_slaves`\n        WHERE `active`= 1\n        AND `online`= 1\n        AND (TIMESTAMP(NOW())-TIMESTAMP(`last_check`)+`time_diff`<'&1')\n        ORDER BY `w` DESC LIMIT 1\",\n        -1,\n        $nMaxTimeDiff\n    );\n\n    sql_connect_slave($id);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n */\nfunction sql_connect_master_as_slave(): void\n{\n    global $db;\n\n    // the right slave is connected\n    if ($db['dblink_slave'] !== false) {\n        sql_error();\n\n        return;\n    }\n\n    // use existing master connection\n    $db['slave_id'] = -1;\n    $db['dblink_slave'] = $db['dblink'];\n    $db['slave_server'] = 'master';\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $id\n */\nfunction sql_connect_slave($id): void\n{\n    global $opt, $db;\n\n    if ($id == -1) {\n        sql_connect_master_as_slave();\n\n        return;\n    }\n\n    // the right slave is connected\n    if ($db['dblink_slave'] !== false) {\n        // TODO: disconnect if other slave is connected\n        if ($db['slave_id'] != $id) {\n            sql_error();\n        }\n\n        return;\n    }\n\n    $db['slave_id'] = $id;\n    $slave = $opt['db']['slaves'][$id];\n\n    // for display in SQL debugger\n    $db['slave_server'] = $slave['server'];\n\n\n    $db['dblink_slave'] = @mysqli_connect(\n        $slave['server'],\n        $slave['username'],\n        $slave['password'],\n        $opt['db']['placeholder']['db']\n    );\n\n    if ($db['dblink_slave'] !== false) {\n        mysqli_query(\n            $db['dblink_slave'] .\n            \"SET NAMES '\" . mysqli_real_escape_string($db['dblink_slave'], $opt['charset']['mysql']) . \"'\"\n\n        );\n\n        // initialize temp tables on slave server\n        $rs = sqlf_slave(\n            \"SELECT `threadid`, `name` FROM `sys_temptables` WHERE `threadid`='&1'\",\n            mysqli_thread_id($db['dblink_slave'])\n        );\n        while ($r = sql_fetch_assoc($rs)) {\n            sqlf_slave('DROP TEMPORARY TABLE IF EXISTS &tmpdb.`&1`', $r['name']);\n        }\n        sql_free_result($rs);\n        sqlf_slave(\"DELETE FROM &db.`sys_temptables` WHERE `threadid`='&1'\", mysqli_thread_id($db['dblink_slave']));\n    } else {\n        sql_error();\n    }\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @return bool\n */\nfunction sql_connect_maintenance()\n{\n    global $tpl, $db, $opt;\n\n    sql_connect($opt['db']['maintenance_user'], $opt['db']['maintenance_password'], false);\n    if ($db['dblink'] === false) {\n        sql_disconnect();\n        sql_connect();\n        if ($db['connected'] === false) {\n            $tpl->error(ERROR_DB_COULD_NOT_RECONNECT);\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * disconnect the database\n */\nfunction sql_disconnect(): void\n{\n    global $opt, $db;\n\n    if ($db['dblink'] !== false && $opt['db']['pconnect'] === true) {\n        if (count($db['temptables']) > 0) {\n            foreach ($db['temptables'] as $table) {\n                sqlf('DROP TEMPORARY TABLE IF EXISTS &tmpdb.`&1`', $table);\n            }\n\n            sqlf(\"DELETE FROM &db.`sys_temptables` WHERE `threadid`='&1'\", mysqli_thread_id($db['dblink']));\n            $db['temptables'] = [];\n            $db['temptables_slave'] = [];\n        }\n    }\n\n    if ($db['dblink'] === $db['dblink_slave']) {\n        $db['dblink_slave'] = false;\n    }\n\n    //is connected and no persistent connect used?\n    if ($db['dblink'] !== false && $opt['db']['pconnect'] === false) {\n        mysqli_close($db['dblink']);\n        $db['dblink'] = false;\n        $db['connected'] = false;\n    }\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $sqlstatement\n */\nfunction sql_error($sqlstatement = ''): void\n{\n    global $tpl, $opt, $db;\n    global $bSmartyNoTranslate;\n\n    $errno = mysqli_errno($db['dblink']);\n    $error = mysqli_error($db['dblink']);\n    if ($sqlstatement !== '') {\n        $error .= \"\\n\\nSQL statement: \" . $sqlstatement;\n    }\n\n    if ($db['error'] === true) {\n        // database error recursion, because another error occurred while trying to\n        // build the error template (e.g. because connection was lost, or an error mail\n        // could not load translations from database)\n\n        if ($opt['db']['error']['display'] === true) {\n            $errmsg = 'MySQL error recursion (' . $errno . '): ' . $error;\n        } else {\n            $errmsg = '';\n        }\n        $errtitle = 'Datenbankfehler';\n        require __DIR__ . '/../html/error.php';\n        exit;\n    }\n    $db['error'] = true;\n\n    if ($db['connected'] === false) {\n        $bSmartyNoTranslate = true;\n    }\n\n    if ($opt['db']['error']['mail'] != '') {\n        $subject = '[' . $opt['page']['domain'] . '] SQL error';\n        if (admin_errormail(\n            $opt['db']['error']['mail'],\n            $subject,\n            str_replace(\"\\n\", \"\\r\\n\", $error) . \"\\n\" . print_r(debug_backtrace(), true),\n            'From: ' . $opt['mail']['from']\n        )) {\n            require_once __DIR__ . '/../lib2/mail.class.php';\n\n            $mail = new mail();\n            $mail->subject = $subject;\n            $mail->to = $opt['db']['error']['mail'];\n\n            $mail->name = 'sql_error';\n\n            $mail->assign('errno', $errno);\n            $mail->assign('error', str_replace(\"\\n\", \"\\r\\n\", $error));\n            $mail->assign('trace', print_r(debug_backtrace(), true));\n\n            $mail->send();\n            $mail = null;\n        }\n    }\n\n    if ($opt['gui'] === GUI_HTML) {\n        if (isset($tpl)) {\n            if ($opt['db']['error']['display'] === true) {\n                $tpl->error('MySQL error (' . $errno . '): ' . $error);\n            } else {\n                $tpl->error('A database command could not be performed.');\n            }\n        } else {\n            if ($opt['db']['error']['display'] == true) {\n                die(\n                    '<html><body>' .\n                    htmlspecialchars(\n                        'MySQL error (' . $errno . '): ' . str_replace(\"\\n,\", '<br />', $error),\n                        ENT_QUOTES | ENT_HTML5\n                    )\n                    . '</body></html>'\n                );\n            }\n            die('<html><body>A database command could not be performed</body></html>');\n        }\n    } else {\n        // CLI script, simple text output\n        if ($opt['db']['error']['display'] === true) {\n            die('MySQL error (' . $errno . '): ' . $error . \"\\n\");\n        }\n        die(\"A database command could not be performed.\\n\");\n    }\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $warnmessage\n */\nfunction sql_warn($warnmessage): void\n{\n    global $opt;\n\n    if ($opt['db']['error']['mail'] != '') {\n        $subject = '[' . $opt['page']['domain'] . '] SQL error';\n        if (admin_errormail(\n            $opt['db']['error']['mail'],\n            $subject,\n            $warnmessage . \"\\n\" . print_r(debug_backtrace(), true),\n            'From: ' . $opt['mail']['from']\n        )) {\n            require_once __DIR__ . '/../lib2/mail.class.php';\n            $mail = new mail();\n            $mail->name = 'sql_warn';\n            $mail->subject = $subject;\n            $mail->to = $opt['db']['warn']['mail'];\n\n            $mail->assign('warnmessage', $warnmessage);\n            $mail->assign('trace', print_r(debug_backtrace(), true));\n\n            $mail->send();\n            $mail = null;\n        }\n    }\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $f\n * @param resource $rs\n * @param $table\n * @param bool $truncate\n */\nfunction sql_export_recordset($f, $rs, $table, $truncate = true): void\n{\n    fwrite($f, \"SET NAMES 'utf8';\\n\");\n\n    if ($truncate == true) {\n        fwrite($f, 'TRUNCATE TABLE `' . sql_escape($table) . \"`;\\n\");\n    }\n\n    while ($r = sql_fetch_assoc($rs)) {\n        $fields = [];\n        $values = [];\n\n        foreach ($r as $k => $v) {\n            $fields[] = '`' . sql_escape($k) . '`';\n            if ($v === null) {\n                $values[] = 'NULL';\n            } else {\n                $values[] = \"'\" . sql_escape($v) . \"'\";\n            }\n        }\n        unset($r);\n\n        fwrite(\n            $f,\n            'INSERT INTO `' . sql_escape($table) . '` (' . implode(', ', $fields) . ')'\n            . ' VALUES (' . implode(', ', $values) . \");\\n\"\n        );\n    }\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param resource $f\n * @param $table\n */\nfunction sql_export_table($f, $table): void\n{\n    $primary = [];\n    $rsIndex = sql('SHOW INDEX FROM `&1`', $table);\n    while ($r = sql_fetch_assoc($rsIndex)) {\n        if ($r['Key_name'] == 'PRIMARY') {\n            $primary[] = '`' . sql_escape($r['Column_name']) . '` ASC';\n        }\n    }\n    sql_free_result($rsIndex);\n\n    $sql = 'SELECT * FROM `' . sql_escape($table) . '`';\n    if (count($primary) > 0) {\n        $sql .= ' ORDER BY ' . implode(', ', $primary);\n    }\n\n    $rs = sql($sql);\n    sql_export_recordset($f, $rs, $table);\n    sql_free_result($rs);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $filename\n * @param string[] $tables\n */\nfunction sql_export_tables_to_file($filename, $tables): void\n{\n    $f = fopen($filename, 'w');\n\n    fwrite($f, \"-- Content of tables:\\n\");\n\n    foreach ($tables as $t) {\n        fwrite($f, \"-- $t\\n\");\n    }\n    fwrite($f, \"\\n\");\n\n    foreach ($tables as $t) {\n        fwrite($f, \"-- Table $t\\n\");\n        sql_export_table($f, $t);\n        fwrite($f, \"\\n\");\n    }\n\n    fclose($f);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $filename\n * @param $table\n */\nfunction sql_export_table_to_file($filename, $table): void\n{\n    $f = fopen($filename, 'w');\n    sql_export_table($f, $table);\n    fclose($f);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param resource $f\n * @param $table\n */\nfunction sql_export_structure($f, $table): void\n{\n    $rs = sql('SHOW CREATE TABLE `&1`', $table);\n    $r = sql_fetch_array($rs);\n    sql_free_result($rs);\n\n    $sTableSql = $r[1];\n    $sTableSql = preg_replace('/ AUTO_INCREMENT=[0-9]{1,} /', ' ', $sTableSql);\n    $sTableSql = preg_replace(\"/,\\n +?(KEY )?`okapi_syncbase`.+?(,)?\\n/\", \"\\\\2\\n\", $sTableSql);\n\n    fwrite($f, \"SET NAMES 'utf8';\\n\");\n    fwrite($f, 'DROP TABLE IF EXISTS `' . sql_escape($table) . \"`;\\n\");\n    fwrite($f, $sTableSql . \" ;\\n\");\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $filename\n * @param $table\n */\nfunction sql_export_structure_to_file($filename, $table): void\n{\n    $f = fopen($filename, 'w');\n    sql_export_structure($f, $table);\n    fclose($f);\n}\n\n// test if a database table exists\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $table\n * @return bool\n */\nfunction sql_table_exists($table)\n{\n    global $opt;\n\n    return sql_value(\n            \"SELECT COUNT(*)\n         FROM `information_schema`.`tables`\n         WHERE `table_schema`='&1' AND `table_name`='&2'\",\n            0,\n            $opt['db']['placeholder']['db'],\n            $table\n        ) > 0;\n}\n\n// test if a database field exists\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $table\n * @param $field\n * @return bool\n */\nfunction sql_field_exists($table, $field)\n{\n    global $opt;\n\n    return sql_value(\n            \"SELECT COUNT(*)\n         FROM `information_schema`.`columns`\n         WHERE `table_schema`='&1' AND `table_name`='&2' AND `column_name`='&3'\",\n            0,\n            $opt['db']['placeholder']['db'],\n            $table,\n            $field\n        ) > 0;\n}\n\n// get type of a database field\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $table\n * @param $field\n * @return string\n */\nfunction sql_field_type($table, $field)\n{\n    global $opt;\n\n    return strtoupper(\n        sql_value(\n            \"SELECT `data_type`\n             FROM `information_schema`.`columns`\n             WHERE `table_schema`='&1' AND `table_name`='&2' AND `column_name`='&3'\",\n            '',\n            $opt['db']['placeholder']['db'],\n            $table,\n            $field\n        )\n    );\n}\n\n// test if a database index exists\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $table\n * @param $index\n * @return bool\n */\nfunction sql_index_exists($table, $index)\n{\n    global $opt;\n\n    return sql_value(\n            \"SELECT COUNT(*)\n         FROM `information_schema`.`statistics`\n         WHERE `table_schema`='&1' AND `table_name`='&2' AND `index_name`='&3'\",\n            0,\n            $opt['db']['placeholder']['db'],\n            $table,\n            $index\n        ) > 0;\n}\n\n// test if a function or procedure exists\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $type\n * @param $name\n * @return bool\n */\nfunction sql_fp_exists($type, $name)\n{\n    global $opt;\n\n    $rs = sql(\"SHOW $type STATUS LIKE '&1'\", $name);\n    $r = sql_fetch_assoc($rs);\n    sql_free_result($rs);\n\n    return ($r &&\n        $r['Db'] == $opt['db']['placeholder']['db'] &&\n        $r['Name'] == $name &&\n        $r['Type'] == $type);\n}\n\n// test if a function exists\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $name\n * @return bool\n */\nfunction sql_function_exists($name)\n{\n    return sql_fp_exists('FUNCTION', $name);\n}\n\n// delete a function\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $name\n */\nfunction sql_dropFunction($name): void\n{\n    sql('DROP FUNCTION IF EXISTS `&1`', $name);\n}\n\n// test if a procedure exists\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $name\n * @return bool\n */\nfunction sql_procedure_exists($name)\n{\n    return sql_fp_exists('PROCEDURE', $name);\n}\n\n// delete a procedure\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $name\n */\nfunction sql_dropProcedure($name): void\n{\n    sql('DROP PROCEDURE IF EXISTS `&1`', $name);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $triggername\n */\nfunction sql_dropTrigger($triggername): void\n{\n    $rs = sql('SHOW TRIGGERS');\n    while ($r = sql_fetch_assoc($rs)) {\n        if ($r['Trigger'] == $triggername) {\n            sql('DROP TRIGGER `&1`', $triggername);\n\n            return;\n        }\n    }\n    sql_free_result($rs);\n}\n"], "fixing_code": ["<?php\n/****************************************************************************\n * for license information see LICENSE.md\n *  edit a cache listing\n *  used template(s): editcache\n *  GET/POST Parameter: cacheid\n *****************************************************************************/\n\nuse Oc\\GeoCache\\StatisticPicture;\nuse Oc\\Libse\\ChildWp\\HandlerChildWp;\nuse Oc\\Libse\\Coordinate\\FormatterCoordinate;\n\nrequire_once __DIR__ . '/lib/consts.inc.php';\n$opt['gui'] = GUI_HTML;\nrequire_once __DIR__ . '/lib/common.inc.php';\n\nfunction getWaypoints($cacheId)\n{\n    global $waypointline;\n    global $waypointlines;\n    global $nowaypoints;\n\n    $wpHandler = new HandlerChildWp();\n    $wayPoints = $wpHandler->getChildWps($cacheId);\n    $ret = '';\n\n    if (!empty($wayPoints)) {\n        $formatter = new FormatterCoordinate();\n\n        foreach ($wayPoints as $wayPoint) {\n            $tmpLine = $waypointline;\n\n            $tmpLine = mb_ereg_replace(\n                '{wp_image}',\n                htmlspecialchars($wayPoint['image'], ENT_COMPAT, 'UTF-8'),\n                $tmpLine\n            );\n            $tmpLine = mb_ereg_replace('{wp_type}', htmlspecialchars($wayPoint['name'], ENT_COMPAT, 'UTF-8'), $tmpLine);\n            $htmlCoordinate = $formatter->formatHtml(\n                $wayPoint['coordinate'],\n                '</td></tr><tr><td style=\"white-space:nowrap\">'\n            );\n            $tmpLine = mb_ereg_replace('{wp_coordinate}', $htmlCoordinate, $tmpLine);\n            $tmpLine = mb_ereg_replace(\n                '{wp_description}',\n                htmlspecialchars(trim($wayPoint['description']), ENT_COMPAT, 'UTF-8'),\n                $tmpLine\n            );\n            $tmpLine = mb_ereg_replace(\n                '{wp_show_description}',\n                mb_ereg_replace('\\r\\n', '<br />', htmlspecialchars($wayPoint['description'], ENT_COMPAT, 'UTF-8')),\n                $tmpLine\n            );\n            $tmpLine = mb_ereg_replace('{cacheid}', htmlspecialchars($cacheId, ENT_COMPAT, 'UTF-8'), $tmpLine);\n            $tmpLine = mb_ereg_replace(\n                '{childid}',\n                htmlspecialchars($wayPoint['childid'], ENT_COMPAT, 'UTF-8'),\n                $tmpLine\n            );\n\n            $ret .= $tmpLine;\n        }\n\n        $ret = mb_ereg_replace('{lines}', $ret, $waypointlines);\n\n        return $ret;\n    }\n\n    return $nowaypoints;\n}\n\n//Preprocessing\nif ($error == false) {\n    $cache_id = 0;\n    if (isset($_REQUEST['cacheid'])) {\n        $cache_id = (int) $_REQUEST['cacheid'];\n    }\n\n    if ($usr === false) {\n        $tplname = 'login';\n\n        tpl_set_var('username', '');\n        tpl_set_var('target', 'editcache.php?cacheid=' . urlencode($cache_id));\n        tpl_set_var('message_start', '');\n        tpl_set_var('message_end', '');\n        tpl_set_var('message', $login_required);\n        tpl_set_var('helplink', helppagelink('login'));\n    } else {\n        $cache_rs = sql(\n            \"\n                SELECT\n                    `caches`.`uuid`,\n                    `caches`.`user_id`,\n                    `caches`.`name`,\n                    `caches`.`type`,\n                    `caches`.`size`,\n                    `caches`.`date_created`,\n                    `caches`.`date_hidden`,\n                    `caches`.`date_activate`,\n                    `caches`.`longitude`,\n                    `caches`.`latitude`,\n                    `caches`.`country`,\n                    `caches`.`terrain`,\n                    `caches`.`difficulty`,\n                    `caches`.`desc_languages`,\n                    `caches`.`status`,\n                    `caches`.`search_time`,\n                    `caches`.`way_length`,\n                    `caches`.`logpw`,\n                    `caches`.`wp_oc`,\n                    `caches`.`wp_gc`,\n                    `caches`.`show_cachelists`,\n                    `caches`.`protect_old_coords`,\n                    `caches`.`node`,\n                    `user`.`username`,\n                    `stat_caches`.`picture`\n                FROM `caches`\n                INNER JOIN `user` ON `caches`.`user_id`=`user`.`user_id`\n                LEFT JOIN `stat_caches` ON `caches`.`cache_id`=`stat_caches`.`cache_id`\n                WHERE `caches`.`cache_id`='&1'\",\n            $cache_id\n        );\n        $cache_record = sql_fetch_array($cache_rs);\n        sql_free_result($cache_rs);\n\n        if (is_array($cache_record)) {\n            if ($cache_record['user_id'] == $usr['userid'] || $login->listingAdmin()) {\n                $tplname = 'editcache';\n                tpl_acceptsAndPurifiesHtmlInput();\n\n                require $stylepath . '/editcache.inc.php';\n\n                if ($cache_record['node'] != $oc_nodeid) {\n                    tpl_errorMsg('editcache', $error_wrong_node);\n                    exit;\n                }\n\n                //here we read all used information from the form if submitted, otherwise from DB\n                $cache_name = trim(isset($_POST['name']) ? trim($_POST['name']) : $cache_record['name']);  // Ocprop\n                $cache_type = isset($_POST['type']) ? $_POST['type'] : $cache_record['type'];\n                if (!isset($_POST['size'])) {\n                    if ($cache_type == 4 || $cache_type == 5) {\n                        $sel_size = 7;\n                    } else {\n                        $sel_size = $cache_record['size'];\n                    }\n                } else {\n                    $sel_size = isset($_POST['size']) ? $_POST['size'] : $cache_record['size'];\n                }\n                $cache_hidden_day = isset($_POST['hidden_day']) ? $_POST['hidden_day'] : date(\n                    'd',\n                    strtotime($cache_record['date_hidden'])\n                );  // Ocprop\n                $cache_hidden_month = isset($_POST['hidden_month']) ? $_POST['hidden_month'] : date(\n                    'm',\n                    strtotime($cache_record['date_hidden'])\n                );  // Ocprop\n                $cache_hidden_year = isset($_POST['hidden_year']) ? $_POST['hidden_year'] : date(\n                    'Y',\n                    strtotime($cache_record['date_hidden'])\n                );  // Ocprop\n\n                if (is_null($cache_record['date_activate'])) {\n                    $cache_activate_day = isset($_POST['activate_day']) ? $_POST['activate_day'] : date('d');\n                    $cache_activate_month = isset($_POST['activate_month']) ? $_POST['activate_month'] : date('m');\n                    $cache_activate_year = isset($_POST['activate_year']) ? $_POST['activate_year'] : date('Y');\n                    $cache_activate_hour = isset($_POST['activate_hour']) ? $_POST['activate_hour'] : date('H');\n                } else {\n                    $cache_activate_day = isset($_POST['activate_day']) ? $_POST['activate_day'] : date(\n                        'd',\n                        strtotime($cache_record['date_activate'])\n                    );\n                    $cache_activate_month = isset($_POST['activate_month']) ? $_POST['activate_month'] : date(\n                        'm',\n                        strtotime($cache_record['date_activate'])\n                    );\n                    $cache_activate_year = isset($_POST['activate_year']) ? $_POST['activate_year'] : date(\n                        'Y',\n                        strtotime($cache_record['date_activate'])\n                    );\n                    $cache_activate_hour = isset($_POST['activate_hour']) ? $_POST['activate_hour'] : date(\n                        'H',\n                        strtotime($cache_record['date_activate'])\n                    );\n                }\n\n                $cache_difficulty = isset($_POST['difficulty']) ? $_POST['difficulty'] : $cache_record['difficulty'];  // Ocprop\n                $cache_terrain = isset($_POST['terrain']) ? $_POST['terrain'] : $cache_record['terrain'];  // Ocprop\n                $cache_country = isset($_POST['country']) ? $_POST['country'] : $cache_record['country'];  // Ocprop\n                $show_all_countries = isset($_POST['show_all_countries']) ? $_POST['show_all_countries'] : 0;\n                $listing_modified = isset($_POST['listing_modified']) ? $_POST['listing_modified'] + 0 : 0;\n                $status = isset($_POST['status']) ? $_POST['status'] : $cache_record['status'];  // Ocprop\n                $status_old = $cache_record['status'];\n                $search_time = isset($_POST['search_time']) ? trim($_POST['search_time']) : $cache_record['search_time'];\n                $way_length = isset($_POST['way_length']) ? trim($_POST['way_length']) : $cache_record['way_length'];\n\n                if ($status_old == 5 && $status == 5) {\n                    if (isset($_REQUEST['publish'])) {  // Ocprop; see also res_state_warning.tpl\n                        $publish = $_REQUEST['publish'];\n                        if (!($publish == 'now' || $publish == 'later' || $publish == 'notnow')) {\n                            // somebody messed up the POST-data, so we do not publish the cache,\n                            // since he isn't published right now (status=5)\n                            $publish = 'notnow';\n                        }\n                        if ($publish == 'now') {\n                            $status = 1;\n                        }\n                    } else {\n                        if (is_null($cache_record['date_activate'])) {\n                            $publish = 'notnow';\n                        } else {\n                            $publish = 'later';\n                        }\n                    }\n                } else {\n                    $publish = isset($_POST['publish']) ? $_POST['publish'] : 'now';\n                    if (!($publish == 'now' || $publish == 'later' || $publish == 'notnow')) {\n                        // somebody messed up the POST-data, so the cache has to be published (status<5)\n                        $publish = 'now';\n                    }\n                }\n\n                $bAdmin = sqlValue(\"SELECT `admin` FROM `user` WHERE `user_id` = &1\", 0, $usr['userid']);\n\n                if ($status == 7 && ($bAdmin & ADMIN_USER) != ADMIN_USER) {\n                    $status = $status_old;\n                }\n\n                if ($status_old == 7) {  // cache is locked\n                    // only admins can change status of locked caches\n                    if (($bAdmin & ADMIN_USER) != ADMIN_USER) {\n                        // no status change allowed for normal user\n                        $status = $status_old;\n                    }\n                }\n\n                $search_time = mb_ereg_replace(',', '.', $search_time);\n                $way_length = mb_ereg_replace(',', '.', $way_length);\n\n                if (mb_strpos($search_time, ':') == mb_strlen($search_time) - 3) {\n                    $st_hours = mb_substr($search_time, 0, mb_strpos($search_time, ':'));\n                    $st_minutes = mb_substr($search_time, mb_strlen($st_hours) + 1);\n\n                    if (is_numeric($st_hours) && is_numeric($st_minutes)) {\n                        if (($st_minutes >= 0) && ($st_minutes < 60)) {\n                            $search_time = $st_hours + $st_minutes / 60;\n                        }\n                    }\n                }\n\n                $log_pw = isset($_POST['log_pw']) ? mb_substr($_POST['log_pw'], 0, 20) : $cache_record['logpw'];\n                // fix #4356: gc waypoints are frequently copy&pasted with leading spaces\n                $wp_gc = isset($_POST['wp_gc']) ? strtoupper(trim($_POST['wp_gc'])) : $cache_record['wp_gc'];  // Ocprop\n                $showlists = isset($_POST['showlists']) ? 1 : $cache_record['show_cachelists'] + 0;\n                $protect_old_coords = isset($_POST['protect_old_coords']) ? 1 : $cache_record['protect_old_coords'] + 0;\n\n                // name\n                $name_not_ok = false;\n                if ($cache_name == \"\") {\n                    $name_not_ok = true;\n                }\n\n                if (isset($_POST['latNS'])) {\n                    //get coords from post-form\n                    $coords_latNS = $_POST['latNS'];  // Ocprop\n                    $coords_lonEW = $_POST['lonEW'];  // Ocprop\n                    $coords_lat_h = trim($_POST['lat_h']);  // Ocprop\n                    $coords_lon_h = trim($_POST['lon_h']);  // Ocprop\n                    $coords_lat_min = trim($_POST['lat_min']);  // Ocprop\n                    $coords_lon_min = trim($_POST['lon_min']);  // Ocprop\n                } else {\n                    //get coords from DB\n                    $coords_lon = $cache_record['longitude'];\n                    $coords_lat = $cache_record['latitude'];\n\n                    if ($coords_lon < 0) {\n                        $coords_lonEW = 'W';\n                        $coords_lon = -$coords_lon;\n                    } else {\n                        $coords_lonEW = 'E';\n                    }\n\n                    if ($coords_lat < 0) {\n                        $coords_latNS = 'S';\n                        $coords_lat = -$coords_lat;\n                    } else {\n                        $coords_latNS = 'N';\n                    }\n\n                    $coords_lat_h = floor($coords_lat);\n                    $coords_lon_h = floor($coords_lon);\n\n                    $coords_lat_min = sprintf(\"%02.3f\", round(($coords_lat - $coords_lat_h) * 60, 3));\n                    $coords_lon_min = sprintf(\"%02.3f\", round(($coords_lon - $coords_lon_h) * 60, 3));\n                }\n\n                //here we validate the data\n\n                //coords\n                $lon_not_ok = false;\n\n                if (!mb_ereg_match('^[0-9]{1,3}$', $coords_lon_h)) {\n                    $lon_not_ok = true;\n                } else {\n                    $lon_not_ok = (($coords_lon_h >= 0) && ($coords_lon_h < 180)) ? false : true;\n                }\n\n                if (is_numeric($coords_lon_min)) {\n                    // important: use here |=\n                    $lon_not_ok |= (($coords_lon_min >= 0) && ($coords_lon_min < 60)) ? false : true;\n                } else {\n                    $lon_not_ok = true;\n                }\n\n                //same with lat\n                $lat_not_ok = false;\n\n                if (!mb_ereg_match('^[0-9]{1,3}$', $coords_lat_h)) {\n                    $lat_not_ok = true;\n                } else {\n                    $lat_not_ok = (($coords_lat_h >= 0) && ($coords_lat_h < 180)) ? false : true;\n                }\n\n                if (is_numeric($coords_lat_min)) {\n                    // important: use here |=\n                    $lat_not_ok |= (($coords_lat_min >= 0) && ($coords_lat_min < 60)) ? false : true;\n                } else {\n                    $lat_not_ok = true;\n                }\n\n                //check effort\n                $time_not_ok = true;\n                tpl_set_var('effort_message', '');\n                if (is_numeric($search_time) || ($search_time == '')) {\n                    $time_not_ok = false;\n                }\n                if ($time_not_ok) {\n                    tpl_set_var('effort_message', $time_not_ok_message);\n                    $error = true;\n                }\n                $way_length_not_ok = true;\n                if (is_numeric($way_length) || ($way_length == '')) {\n                    $way_length_not_ok = false;\n                }\n                if ($way_length_not_ok) {\n                    tpl_set_var('effort_message', $way_length_not_ok_message);\n                    $error = true;\n                }\n\n                //check GC waypoint\n                $wpgc_not_ok = $wp_gc != '' && !preg_match(\"/^(?:GC|CX)[0-9A-Z]{3,6}$/\", $wp_gc);\n                if ($wpgc_not_ok) {\n                    $error = true;\n                }\n\n                //check hidden_since\n                $hidden_date_not_ok = true;\n                $hidden_date_mismatch = false;\n                if (is_numeric($cache_hidden_day) && is_numeric($cache_hidden_month) &&\n                    is_numeric($cache_hidden_year)\n                ) {\n                    $hidden_date_not_ok =\n                        (checkdate($cache_hidden_month, $cache_hidden_day, $cache_hidden_year) == false);\n                }\n                if ($hidden_date_not_ok == false && $publish != 'notnow') {\n                    $hidden_date = mktime(\n                        0,\n                        0,\n                        0,\n                        $cache_hidden_month,\n                        $cache_hidden_day,\n                        $cache_hidden_year\n                    );\n                    if ($status_old != 5) {\n                        // the cache has already been published\n                        $publish_date = strtotime(substr($cache_record['date_created'], 0, 10));\n                    } elseif ($publish == 'later') {\n                        // Activation hour can be ignored here. This simplifies checking event dates.\n                        $publish_date = mktime(\n                            0,\n                            0,\n                            0,\n                            $cache_activate_month,\n                            $cache_activate_day,\n                            $cache_activate_year\n                        );\n                    } else {\n                        // the cache is to be published now\n                        $publish_date = time();\n                    }\n                    if (($cache_type == 6 && $hidden_date < $publish_date) ||\n                        ($cache_type != 6 && $hidden_date > $publish_date)) {\n                        $hidden_date_mismatch = true;\n                    }\n                }\n\n                //check date_activate\n                if ($status == 5) {\n                    $activate_date_not_ok = true;\n                    if (is_numeric($cache_activate_day) && is_numeric($cache_activate_month) &&\n                        is_numeric($cache_activate_year) && is_numeric($cache_activate_hour)\n                    ) {\n                        $activate_date_not_ok =\n                            checkdate(\n                                $cache_activate_month,\n                                $cache_activate_day,\n                                $cache_activate_year\n                            ) == false\n                            || $cache_activate_hour < 0\n                            || $cache_activate_hour > 23;\n                    }\n                } else {\n                    $activate_date_not_ok = false;\n                }\n\n                //check status and publish options\n                if (($status == 5 && $publish == 'now') || ($status != 5 && ($publish == 'later' || $publish == 'notnow'))) {\n                    tpl_set_var('status_message', $status_message);\n                    $status_not_ok = true;\n                } else {\n                    tpl_set_var('status_message', '');\n                    $status_not_ok = false;\n                }\n\n                //check cache size\n                $size_not_ok = false;\n                if ($sel_size != 7 && ($cache_type == 4 || $cache_type == 5)) {\n                    $error = true;\n                    $size_not_ok = true;\n                }\n\n                //difficulty / terrain\n                $diff_not_ok = false;\n                tpl_set_var('diff_message', '');\n                if ($cache_difficulty < 2 || $cache_difficulty > 10 || $cache_terrain < 2 || $cache_terrain > 10) {\n                    tpl_set_var('diff_message', $diff_not_ok_message);\n                    $error = true;\n                    $diff_not_ok = true;\n                }\n\n                // cache-attributes\n                $attribs_not_ok = false;\n                if (isset($_POST['cache_attribs'])) {\n                    $cache_attribs = mb_split(';', $_POST['cache_attribs']);\n                } else {\n                    // get attribs for this cache from db\n                    $rs = sql(\"SELECT `attrib_id` FROM `caches_attributes` WHERE `cache_id`='&1'\", $cache_id);\n                    if (mysqli_num_rows($rs) > 0) {\n                        unset($cache_attribs);\n                        while ($record = sql_fetch_array($rs)) {\n                            $cache_attribs[] = $record['attrib_id'];\n                        }\n                        unset($record);\n                    } else {\n                        $cache_attribs = [];\n                    }\n                    sql_free_result($rs);\n                }\n\n                if (in_array(ATTRIB_ID_SAFARI, $cache_attribs) && $cache_type != 4) {\n                    tpl_set_var('safari_message', $safari_not_allowed_message);\n                    $error = true;\n                    $attribs_not_ok = true;\n                } else {\n                    tpl_set_var('safari_message', '');\n                }\n\n                //try to save to DB?\n                if (isset($_POST['submit'])) {  // Ocprop\n                    // all validations ok?\n                    if (!(\n                        $hidden_date_not_ok || $hidden_date_mismatch ||\n                        $lat_not_ok || $lon_not_ok || $name_not_ok ||\n                        $time_not_ok || $way_length_not_ok || $size_not_ok ||\n                        $activate_date_not_ok || $status_not_ok || $diff_not_ok ||\n                        $attribs_not_ok || $wpgc_not_ok\n                    )\n                    ) {\n                        $cache_lat = $coords_lat_h + $coords_lat_min / 60;\n                        if ($coords_latNS == 'S') {\n                            $cache_lat = -$cache_lat;\n                        }\n\n                        $cache_lon = $coords_lon_h + $coords_lon_min / 60;\n                        if ($coords_lonEW == 'W') {\n                            $cache_lon = -$cache_lon;\n                        }\n\n                        if ($publish == 'now') {\n                            $activation_date = 'NULL';\n                        } elseif ($publish == 'later') {\n                            $status = 5;\n                            $activation_date =\n                                \"'\" . sql_escape(\n                                    date(\n                                        'Y-m-d H:i:s',\n                                        mktime(\n                                            $cache_activate_hour,\n                                            0,\n                                            0,\n                                            $cache_activate_month,\n                                            $cache_activate_day,\n                                            $cache_activate_year\n                                        )\n                                    )\n                                ) . \"'\";\n                        } elseif ($publish == 'notnow') {\n                            $status = 5;\n                            $activation_date = 'NULL';\n                        } else {\n                            // should never happen\n                            $activation_date = 'NULL';\n                        }\n\n                        // check for Ocprop data to ignore\n                        if ($ocpropping) {\n                            $rs = sql(\"SELECT `type`, `size` FROM `caches` WHERE `cache_id`='&1'\", $cache_id);\n                            if ($r = sql_fetch_assoc($rs)) {\n                                if ($r['type'] == 8 && $cache_type == 7) {\n                                    $cache_type = 8;\n                                }\n                                if ($r['type'] == 10 && $cache_type == 2) {\n                                    $cache_type = 10;\n                                }\n                                if ($r['size'] == 8 && ($sel_size == 1 || $sel_size == 2)) {\n                                    $sel_size = 8;\n                                }\n                            }\n                            sql_free_result($rs);\n                        }\n\n                        // fix showlists setting\n                        if (!isset($_POST['showlists'])) {\n                            $showlists = 0;\n                        }\n                        if (!isset($_POST['protect_old_coords'])) {\n                            $protect_old_coords = 0;\n                        }\n\n                        // save to DB\n                        // Status update will trigger touching the last_modified date of all depending records.\n                        // Status change via editcache.php is no longer available via the user interface,\n                        // but still used by Ocprop and maybe other tools.\n                        sql(\"SET @STATUS_CHANGE_USER_ID='&1'\", $usr['userid']);\n                        sql(\n                            \"UPDATE `caches` SET `name`='&1', `longitude`='&2', `latitude`='&3', `type`='&4', `date_hidden`='&5', `country`='&6', `size`='&7', `difficulty`='&8', `terrain`='&9', `status`='&10', `search_time`='&11', `way_length`='&12', `logpw`='&13', `wp_gc`='&14', `show_cachelists`='&15', `protect_old_coords`='&16', `date_activate` = $activation_date WHERE `cache_id`='&17'\",\n                            $cache_name,\n                            $cache_lon,\n                            $cache_lat,\n                            $cache_type,\n                            date('Y-m-d', mktime(0, 0, 0, $cache_hidden_month, $cache_hidden_day, $cache_hidden_year)),\n                            $cache_country,\n                            $sel_size,\n                            $cache_difficulty,\n                            $cache_terrain,\n                            $status,\n                            $search_time,\n                            $way_length,\n                            $log_pw,\n                            $wp_gc,\n                            $showlists,\n                            $protect_old_coords,\n                            $cache_id\n                        );\n\n                        // send notification on admin intervention\n                        if ($cache_record['user_id'] != $usr['userid'] &&\n                            $opt['logic']['admin']['listingadmin_notification'] != ''\n                        ) {\n                            mail(\n                                $opt['logic']['admin']['listingadmin_notification'],\n                                mb_ereg_replace(\n                                    '{occode}',\n                                    $cache_record['wp_oc'],\n                                    mb_ereg_replace(\n                                        '{username}',\n                                        $usr['username'],\n                                        t('Cache listing {occode} has been modified by {username}')\n                                    )\n                                ),\n                                t('The modifications can be checked via vandalism restore function.')\n                            );\n                        }\n\n                        // generate status-change log\n                        if ($status != $status_old && $status_old != 5) {\n                            switch ($status) {\n                                case 1:\n                                    $logtype = 10;\n                                    break;\n                                case 2:\n                                    $logtype = 11;\n                                    break;\n                                case 3:\n                                    $logtype = 9;\n                                    break;\n                                case 6:\n                                    $logtype = 13;\n                                    break;\n                                default:\n                                    $logtype = 0;  // ???\n                            }\n                            if ($logtype > 0) {\n                                sql(\n                                    \"INSERT INTO `cache_logs` (`node`, `cache_id`, `user_id`, `type`, `date`)\n                                         VALUES ('&1','&2','&3','&4','&5')\",\n                                    $oc_nodeid,\n                                    $cache_id,\n                                    $usr['userid'],\n                                    $logtype,\n                                    date('Y-m-d')\n                                );\n                                // notifications will be automatically generated\n                            }\n                        }\n\n                        // update cache attributes\n                        $attriblist = '999';\n                        $countCacheAttrIbs = count($cache_attribs);\n                        for ($i = 0; $i < $countCacheAttrIbs; $i++) {\n                            if ($cache_attribs[$i] + 0 > 0) {\n                                sql(\n                                    \"INSERT IGNORE INTO `caches_attributes` (`cache_id`, `attrib_id`)\n                                     VALUES('&1', '&2')\",\n                                    $cache_id,\n                                    $cache_attribs[$i] + 0\n                                );\n                                $attriblist .= \",\" . ($cache_attribs[$i] + 0);\n                            }\n                        }\n\n                        sql(\n                            \"DELETE FROM `caches_attributes`\n                             WHERE `cache_id`='&1'\n                             AND `attrib_id`\n                             NOT IN (\" . $attriblist . ')',\n                            // SQL injections in $attriblist prevented by adding 0 above\n                            $cache_id\n                        );\n\n                        StatisticPicture::deleteStatisticPicture($usr['userid']);\n\n                        //display cache-page\n                        tpl_redirect('viewcache.php?cacheid=' . urlencode($cache_id));\n                        // Ocprop: Location:\\s*$viewcacheUrl\\?cacheid=([0-9]+)\n                        // (s.a. tpl_redirect() in common.inc.php\n                        exit;\n                    }\n                } elseif (isset($_POST['show_all_countries_submit'])) {\n                    $show_all_countries = 1;\n                }\n\n                //here we only set up the template variables\n\n                //build countrylist\n                $countriesoptions = '';\n\n                //check if selected country is in list_default\n                if ($show_all_countries == 0) {\n                    $rs = sql(\n                        \"SELECT `show` FROM `countries_list_default` WHERE `show`='&1' AND `lang`='&2'\",\n                        $cache_country,\n                        $locale\n                    );\n                    if (mysqli_num_rows($rs) == 0) {\n                        $show_all_countries = 1;\n                    }\n                    sql_free_result($rs);\n                }\n\n                //get the record\n                if ($show_all_countries == 0) {\n                    $rs = sql(\n                        \"SELECT `countries`.`short`, IFNULL(`sys_trans_text`.`text`, `countries`.`name`) AS `name`\n                         FROM `countries`\n                         INNER JOIN `countries_list_default`\n                           ON `countries_list_default`.`show`=`countries`.`short`\n                         LEFT JOIN `sys_trans`\n                           ON `countries`.`trans_id`=`sys_trans`.`id`\n                         LEFT JOIN `sys_trans_text`\n                           ON `sys_trans`.`id`=`sys_trans_text`.`trans_id`\n                           AND `sys_trans_text`.`lang`='&1'\n                         WHERE `countries_list_default`.`lang`='&1'\n                         ORDER BY `name` ASC\",\n                        $locale\n                    );\n                } else {\n                    $rs = sql(\n                        \"SELECT `countries`.`short`, IFNULL(`sys_trans_text`.`text`, `countries`.`name`) AS `name`\n                         FROM `countries`\n                         LEFT JOIN `sys_trans`\n                           ON `countries`.`trans_id`=`sys_trans`.`id`\n                         LEFT JOIN `sys_trans_text`\n                           ON `sys_trans`.`id`=`sys_trans_text`.`trans_id`\n                         AND `sys_trans_text`.`lang`='&1'\n                         ORDER BY `name` ASC\",\n                        $locale\n                    );\n                }\n\n                while ($record = sql_fetch_assoc($rs)) {\n                    $sSelected = ($record['short'] == $cache_country) ? ' selected=\"selected\"' : '';\n                    $countriesoptions .=\n                        '<option value=\"'\n                        . htmlspecialchars($record['short'], ENT_COMPAT, 'UTF-8')\n                        . '\"' . $sSelected . '>'\n                        . htmlspecialchars($record['name'], ENT_COMPAT, 'UTF-8')\n                        . '</option>' . \"\\n\";\n                }\n                tpl_set_var('countryoptions', $countriesoptions);\n                sql_free_result($rs);\n\n                // cache-attributes\n                $bBeginLine = true;\n                $nPrevLineAttrCount = 0;\n                $nLineAttrCount = 0;\n\n                $cache_attrib_list = '';\n                $cache_attrib_array = '';\n                $cache_attribs_string = '';\n\n                $rsAttrGroup = sql(\n                    \"SELECT `attribute_groups`.`id`,\n                            IFNULL(`sys_trans_text`.`text`,\n                            `attribute_groups`.`name`) AS `name`,\n                            `attribute_categories`.`color`\n                     FROM `attribute_groups`\n                     INNER JOIN `attribute_categories`\n                       ON `attribute_groups`.`category_id`=`attribute_categories`.`id`\n                     LEFT JOIN `sys_trans`\n                       ON `attribute_groups`.`trans_id`=`sys_trans`.`id`\n                     LEFT JOIN `sys_trans_text`\n                       ON `sys_trans`.`id`=`sys_trans_text`.`trans_id`\n                       AND `sys_trans_text`.`lang`='&1'\n                     ORDER BY `attribute_groups`.`category_id` ASC, `attribute_groups`.`id` ASC\",\n                    $locale\n                );\n                while ($rAttrGroup = sql_fetch_assoc($rsAttrGroup)) {\n                    $group_line = '';\n\n                    $rs = sql(\n                        \"SELECT `cache_attrib`.`id`,\n                                IFNULL(`ttname`.`text`, `cache_attrib`.`name`) AS `name`,\n                                `cache_attrib`.`icon_undef`,\n                                `cache_attrib`.`icon_large`,\n                                IFNULL(`ttdesc`.`text`, `cache_attrib`.`html_desc`) AS `html_desc`\n                         FROM `cache_attrib`\n                         LEFT JOIN `caches_attributes`\n                           ON `cache_attrib`.`id`=`caches_attributes`.`attrib_id`\n                           AND `caches_attributes`.`cache_id`='&2'\n                         LEFT JOIN `sys_trans` AS `tname`\n                           ON `cache_attrib`.`trans_id`=`tname`.`id`\n                           AND `cache_attrib`.`name`=`tname`.`text`\n                         LEFT JOIN `sys_trans_text` AS `ttname`\n                           ON `tname`.`id`=`ttname`.`trans_id`\n                           AND `ttname`.`lang`='&1'\n                         LEFT JOIN `sys_trans` AS `tdesc`\n                           ON `cache_attrib`.`html_desc_trans_id`=`tdesc`.`id`\n                           AND `cache_attrib`.`html_desc`=`tdesc`.`text`\n                         LEFT JOIN `sys_trans_text` AS `ttdesc`\n                           ON `tdesc`.`id`=`ttdesc`.`trans_id`\n                           AND `ttdesc`.`lang`='&1'\n                         WHERE `cache_attrib`.`group_id`='&3'\n                         AND NOT IFNULL(`cache_attrib`.`hidden`, 0) = 1\n                         AND (`cache_attrib`.`selectable`!=0 OR `caches_attributes`.`cache_id`='&2')\n                         ORDER BY `cache_attrib`.`group_id` ASC, `cache_attrib`.`id` ASC\",\n                        $locale,\n                        $cache_id,\n                        $rAttrGroup['id']\n                    );\n                    while ($record = sql_fetch_array($rs)) {\n                        $line = $cache_attrib_pic;\n\n                        $line = mb_ereg_replace('{attrib_id}', $record['id'], $line);\n                        $line = mb_ereg_replace('{attrib_text}', escape_javascript($record['name']), $line);\n                        if (in_array($record['id'], $cache_attribs)) {\n                            $line = mb_ereg_replace('{attrib_pic}', $record['icon_large'], $line);\n                        } else {\n                            $line = mb_ereg_replace('{attrib_pic}', $record['icon_undef'], $line);\n                        }\n                        $line = mb_ereg_replace('{html_desc}', escape_javascript($record['html_desc']), $line);\n                        $line = mb_ereg_replace('{name}', escape_javascript($record['name']), $line);\n                        $line = mb_ereg_replace('{color}', $rAttrGroup['color'], $line);\n                        $group_line .= $line;\n                        $nLineAttrCount++;\n\n                        $line = $cache_attrib_js;\n                        $line = mb_ereg_replace('{id}', $record['id'], $line);\n                        if (in_array($record['id'], $cache_attribs)) {\n                            $line = mb_ereg_replace('{selected}', 1, $line);\n                        } else {\n                            $line = mb_ereg_replace('{selected}', 0, $line);\n                        }\n                        $line = mb_ereg_replace('{img_undef}', $record['icon_undef'], $line);\n                        $line = mb_ereg_replace('{img_large}', $record['icon_large'], $line);\n                        $line = mb_ereg_replace(\n                            '{conflicting_attribs}',\n                            implode(',', attribute::getConflictingAttribIds($record['id'])),\n                            $line\n                        );\n                        if ($cache_attrib_array != '') {\n                            $cache_attrib_array .= ',';\n                        }\n                        $cache_attrib_array .= $line;\n\n                        if (in_array($record['id'], $cache_attribs)) {\n                            if ($cache_attribs_string != '') {\n                                $cache_attribs_string .= ';';\n                            }\n                            $cache_attribs_string .= $record['id'];\n                        }\n                    }\n                    sql_free_result($rs);\n\n                    if ($group_line != '') {\n                        $group_img = $cache_attrib_group;\n                        $group_img = mb_ereg_replace('{color}', $rAttrGroup['color'], $group_img);\n                        $group_img = mb_ereg_replace('{attribs}', $group_line, $group_img);\n                        $group_img = mb_ereg_replace(\n                            '{name}',\n                            htmlspecialchars($rAttrGroup['name'], ENT_COMPAT, 'UTF-8'),\n                            $group_img\n                        );\n\n                        if ($bBeginLine == true) {\n                            $cache_attrib_list .= '<div class=\"attribswide\">';\n                            $bBeginLine = false;\n                        }\n\n                        $cache_attrib_list .= $group_img;\n                        $nPrevLineAttrCount += $nLineAttrCount;\n\n                        $nLineAttrCount = 0;\n                    }\n                }\n                sql_free_result($rsAttrGroup);\n                if ($bBeginLine == false) {\n                    $cache_attrib_list .= '</div>';\n                }\n\n                tpl_set_var('cache_attrib_list', $cache_attrib_list);\n                tpl_set_var('jsattributes_array', $cache_attrib_array);\n                tpl_set_var('cache_attribs', $cache_attribs_string);\n\n                //difficulty\n                $difficulty_options = '';\n                for ($i = 2; $i <= 10; $i++) {\n                    if ($cache_difficulty == $i) {\n                        $difficulty_options .= '<option value=\"' . $i . '\" selected=\"selected\">' . $i / 2 . '</option>';\n                    } else {\n                        $difficulty_options .= '<option value=\"' . $i . '\">' . $i / 2 . '</option>';\n                    }\n                    $difficulty_options .= \"\\n\";\n                }\n                tpl_set_var('difficultyoptions', $difficulty_options);\n\n                //build terrain options\n                $terrain_options = '';\n                for ($i = 2; $i <= 10; $i++) {\n                    if ($cache_terrain == $i) {\n                        $terrain_options .= '<option value=\"' . $i . '\" selected=\"selected\">' . $i / 2 . '</option>';\n                    } else {\n                        $terrain_options .= '<option value=\"' . $i . '\">' . $i / 2 . '</option>';\n                    }\n                    $terrain_options .= \"\\n\";\n                }\n                tpl_set_var('terrainoptions', $terrain_options);\n\n                //build typeoptions\n                $types = '';\n                $rsTypes = sql(\n                    \"SELECT `cache_type`.`id`,\n                            IFNULL(`sys_trans_text`.`text`,\n                            `cache_type`.`en`) AS `name`\n                     FROM `cache_type`\n                     LEFT JOIN `sys_trans`\n                       ON `cache_type`.`trans_id`=`sys_trans`.`id`\n                     LEFT JOIN `sys_trans_text`\n                       ON `sys_trans`.`id`=`sys_trans_text`.`trans_id`\n                       AND `sys_trans_text`.`lang`='\" . sql_escape($locale) . \"'\n                     ORDER BY `cache_type`.`ordinal` ASC\"\n                );\n                while ($rType = sql_fetch_assoc($rsTypes)) {\n                    $sSelected = ($rType['id'] == $cache_type) ? ' selected=\"selected\"' : '';\n                    $types .=\n                        '<option value=\"' . $rType['id'] . '\"' . $sSelected . '>'\n                        . htmlspecialchars($rType['name'], ENT_COMPAT, 'UTF-8')\n                        . '</option>';\n                }\n                sql_free_result($rsTypes);\n                tpl_set_var('typeoptions', $types);\n\n                //build sizeoptions\n                $sizes = '';\n                $rsSizes = sql(\n                    \"SELECT `cache_size`.`id`,\n                            IFNULL(`sys_trans_text`.`text`, `cache_size`.`name`) AS `name`\n                     FROM `cache_size`\n                     LEFT JOIN `sys_trans`\n                       ON `cache_size`.`trans_id`=`sys_trans`.`id`\n                     LEFT JOIN `sys_trans_text`\n                       ON `sys_trans`.`id`=`sys_trans_text`.`trans_id`\n                       AND `sys_trans_text`.`lang`='\" . sql_escape($locale) . \"'\n                     ORDER BY `cache_size`.`ordinal` ASC\"\n                );\n                while ($rSize = sql_fetch_assoc($rsSizes)) {\n                    $sSelected = ($rSize['id'] == $sel_size) ? ' selected=\"selected\"' : '';\n                    $sizes .=\n                        '<option value=\"' . $rSize['id'] . '\"' . $sSelected . '>'\n                        . htmlspecialchars($rSize['name'], ENT_COMPAT, 'UTF-8')\n                        . '</option>';\n                }\n                sql_free_result($rsSizes);\n                tpl_set_var('sizeoptions', $sizes);\n\n                //Cachedescs\n                $desclangs = mb_split(',', $cache_record['desc_languages']);\n                $cache_descs = '';\n                $gc_com_refs = false;\n                foreach ($desclangs as $desclang) {\n                    if (count($desclangs) > 1) {\n                        $remove_url =\n                            'removedesc.php?cacheid=' . urlencode($cache_id)\n                            . '&desclang=' . urlencode($desclang);\n                        $removedesc =\n                            '&nbsp;[<a href=\"'\n                            . htmlspecialchars($remove_url, ENT_COMPAT, 'UTF-8')\n                            . '\" onclick=\"testListingModified(this)\" >' . $remove . '</a>]';\n                    } else {\n                        $removedesc = '';\n                    }\n\n                    $resp = sql(\n                        \"SELECT `desc` FROM `cache_desc` WHERE `cache_id`='&1' AND `language`='&2'\",\n                        $cache_id,\n                        $desclang\n                    );\n                    $row = sql_fetch_array($resp);\n                    if (mb_strpos($row['desc'], \"http://img.groundspeak.com/\") !== false) {\n                        $gc_com_refs = true;\n                    }\n                    sql_free_result($resp);\n\n                    $edit_url = 'editdesc.php?cacheid=' . urlencode($cache_id) . '&desclang=' . urlencode($desclang);\n\n                    $cache_descs .=\n                        '<tr><td colspan=\"2\">'\n                        . htmlspecialchars(db_LanguageFromShort($desclang), ENT_COMPAT, 'UTF-8')\n                        . ' [<a href=\"' . htmlspecialchars($edit_url, ENT_COMPAT, 'UTF-8')\n                        . '\" onclick=\"testListingModified(this)\" >' . $edit . '</a>]'\n                        . $removedesc . '</td></tr>';\n                }\n                tpl_set_var('cache_descs', $cache_descs);\n\n                if ($gc_com_refs) {\n                    tpl_set_var('gc_com_refs_start', '');\n                    tpl_set_var('gc_com_refs_end', '');\n                } else {\n                    tpl_set_var('gc_com_refs_start', '<!--');\n                    tpl_set_var('gc_com_refs_end', '-->');\n                }\n\n                //Status\n                $statusoptions = '';\n                if ($status_old != 7) {\n                    $rsStatus = sql(\n                        \"SELECT `cache_status`.`id`,\n                                IFNULL(`sys_trans_text`.`text`,\n                                `cache_status`.`name`) AS `name`\n                         FROM `cache_status`\n                         LEFT JOIN `sys_trans`\n                           ON `cache_status`.`trans_id`=`sys_trans`.`id`\n                         LEFT JOIN `sys_trans_text`\n                           ON `sys_trans`.`id`=`sys_trans_text`.`trans_id`\n                           AND `sys_trans_text`.`lang`='\" . sql_escape($locale) . \"'\n                         WHERE `cache_status`.`id` NOT IN (4, 5, 7)\n                           OR `cache_status`.`id`='\" . sql_escape($status_old + 0) . \"'\n                         ORDER BY `cache_status`.`id` ASC\"\n                    );\n                    while ($rStatus = sql_fetch_assoc($rsStatus)) {\n                        $sSelected = ($rStatus['id'] == $status) ? ' selected=\"selected\"' : '';\n                        if ($sSelected != '' || $status_old == 5) {\n                            $statusoptions .=\n                                '<option value=\"'\n                                . htmlspecialchars($rStatus['id'], ENT_COMPAT, 'UTF-8')\n                                . '\"' . $sSelected . '>'\n                                . htmlspecialchars($rStatus['name'], ENT_COMPAT, 'UTF-8')\n                                . '</option>';\n                        }\n                    }\n                    sql_free_result($rsStatus);\n                } else {\n                    $statusoptions .=\n                        '<option value=\"7\" selected=\"selected\">'\n                        . htmlspecialchars(t(\"Locked, invisible\"), ENT_COMPAT, 'UTF-8')\n                        . '</option>';\n                }\n                tpl_set_var('statusoptions', $statusoptions);\n                $statuschange_a_msg =  mb_ereg_replace('%1', $cache_id, $status_change_a);\n                $statuschange_msg =  mb_ereg_replace('{a}', $statuschange_a_msg, $status_change);\n                tpl_set_var('statuschange', $status_old == 5 ? '' : $statuschange_msg);\n\n                // show activation form?\n                if ($status_old == 5) {  // status = not yet published\n                    $tmp = $activation_form;\n\n                    $tmp = mb_ereg_replace(\n                        '{activate_day}',\n                        htmlspecialchars($cache_activate_day, ENT_COMPAT, 'UTF-8'),\n                        $tmp\n                    );\n                    $tmp = mb_ereg_replace(\n                        '{activate_month}',\n                        htmlspecialchars($cache_activate_month, ENT_COMPAT, 'UTF-8'),\n                        $tmp\n                    );\n                    $tmp = mb_ereg_replace(\n                        '{activate_year}',\n                        htmlspecialchars($cache_activate_year, ENT_COMPAT, 'UTF-8'),\n                        $tmp\n                    );\n                    $tmp = mb_ereg_replace('{publish_now_checked}', ($publish == 'now') ? 'checked' : '', $tmp);\n                    $tmp = mb_ereg_replace('{publish_later_checked}', ($publish == 'later') ? 'checked' : '', $tmp);\n                    $tmp = mb_ereg_replace('{publish_notnow_checked}', ($publish == 'notnow') ? 'checked' : '', $tmp);\n\n                    $activation_hours = '';\n                    for ($i = 0; $i <= 23; $i++) {\n                        if ($cache_activate_hour == $i) {\n                            $activation_hours .= '<option value=\"' . $i . '\" selected=\"selected\">' . $i . '</option>';\n                        } else {\n                            $activation_hours .= '<option value=\"' . $i . '\">' . $i . '</option>';\n                        }\n                        $activation_hours .= \"\\n\";\n                    }\n                    $tmp = mb_ereg_replace('{activation_hours}', $activation_hours, $tmp);\n\n                    if ($activate_date_not_ok) {\n                        $tmp = mb_ereg_replace('{activate_on_message}', $date_message, $tmp);\n                    } else {\n                        $tmp = mb_ereg_replace('{activate_on_message}', '', $tmp);\n                    }\n\n                    tpl_set_var('activation_form', $tmp);\n                } else {\n                    tpl_set_var('activation_form', '');\n                }\n\n                if ($cache_record['picture'] > 0) {\n                    $pictures = '';\n                    $rspictures = sql(\n                        \"SELECT `url`, `title`, `uuid`\n                         FROM `pictures`\n                         WHERE `object_id` = '&1'\n                         AND `object_type` = 2\n                         ORDER BY `seq`\",\n                        $cache_id\n                    );\n\n                    $countRsPictures = mysqli_num_rows($rspictures);\n                    for ($i = 0; $i < $countRsPictures; $i++) {\n                        $tmpline = ($i == 0 ? $pictureline0 : $pictureline);\n                        $pic_record = sql_fetch_array($rspictures);\n\n                        $tmpline = mb_ereg_replace(\n                            '{link}',\n                            htmlspecialchars($pic_record['url'], ENT_COMPAT, 'UTF-8'),\n                            $tmpline\n                        );\n                        $tmpline = mb_ereg_replace(\n                            '{title}',\n                            htmlspecialchars($pic_record['title'], ENT_COMPAT, 'UTF-8'),\n                            $tmpline\n                        );\n                        $tmpline = mb_ereg_replace(\n                            '{uuid}',\n                            htmlspecialchars($pic_record['uuid'], ENT_COMPAT, 'UTF-8'),\n                            $tmpline\n                        );\n\n                        $pictures .= $tmpline;\n                    }\n\n                    $pictures = mb_ereg_replace('{lines}', $pictures, $picturelines);\n                    mysqli_free_result($rspictures);\n                    tpl_set_var('pictures', $pictures);\n                } else {\n                    tpl_set_var('pictures', $nopictures);\n                }\n                tpl_set_var('gc_com_msg2', mb_ereg_replace('%1', $opt['page']['sitename'], $gc_com_msg2));\n\n                tpl_set_var('waypoints', getWaypoints($cache_id));\n\n                tpl_set_var('cacheid', htmlspecialchars($cache_id, ENT_COMPAT, 'UTF-8'));\n                tpl_set_var('name', htmlspecialchars($cache_name, ENT_COMPAT, 'UTF-8'));\n\n                tpl_set_var('ownername', htmlspecialchars($cache_record['username'], ENT_COMPAT, 'UTF-8'));\n\n                tpl_set_var('date_day', htmlspecialchars($cache_hidden_day, ENT_COMPAT, 'UTF-8'));\n                tpl_set_var('date_month', htmlspecialchars($cache_hidden_month, ENT_COMPAT, 'UTF-8'));\n                tpl_set_var('date_year', htmlspecialchars($cache_hidden_year, ENT_COMPAT, 'UTF-8'));\n\n                tpl_set_var('selLatN', ($coords_latNS == 'N') ? ' selected=\"selected\"' : '');\n                tpl_set_var('selLatS', ($coords_latNS == 'S') ? ' selected=\"selected\"' : '');\n                tpl_set_var('selLonE', ($coords_lonEW == 'E') ? ' selected=\"selected\"' : '');\n                tpl_set_var('selLonW', ($coords_lonEW == 'W') ? ' selected=\"selected\"' : '');\n                tpl_set_var('lat_h', htmlspecialchars($coords_lat_h, ENT_COMPAT, 'UTF-8'));\n                tpl_set_var('lat_min', htmlspecialchars($coords_lat_min, ENT_COMPAT, 'UTF-8'));\n                tpl_set_var('lon_h', htmlspecialchars($coords_lon_h, ENT_COMPAT, 'UTF-8'));\n                tpl_set_var('lon_min', htmlspecialchars($coords_lon_min, ENT_COMPAT, 'UTF-8'));\n\n                tpl_set_var('name_message', ($name_not_ok == true) ? $name_message : '');\n                tpl_set_var('lon_message', ($lon_not_ok == true) ? $coords_message : '');\n                tpl_set_var('lat_message', ($lat_not_ok == true) ? $coords_message : '');\n                if ($hidden_date_mismatch == true) {\n                    if ($cache_type == 6) {\n                        tpl_set_var('date_message', $event_before_publish_message);\n                    } else {\n                        tpl_set_var('date_message', $hide_after_publish_message);\n                    }\n                } else {\n                    tpl_set_var('date_message', ($hidden_date_not_ok == true) ? $date_message : '');\n                }\n                tpl_set_var('size_message', ($size_not_ok == true) ? $sizemismatch_message : '');\n                tpl_set_var('wpgc_message', ($wpgc_not_ok == true) ? $bad_wpgc_message : '');\n\n                if ($lon_not_ok || $lat_not_ok || $hidden_date_not_ok || $name_not_ok) {\n                    tpl_set_var('general_message', $error_general);\n                } else {\n                    tpl_set_var('general_message', '');\n                }\n\n                tpl_set_var('cacheid_urlencode', htmlspecialchars(urlencode($cache_id), ENT_COMPAT, 'UTF-8'));\n                tpl_set_var(\n                    'cacheuuid_urlencode',\n                    htmlspecialchars(urlencode($cache_record['uuid']), ENT_COMPAT, 'UTF-8')\n                );\n                tpl_set_var('show_all_countries', $show_all_countries);\n                tpl_set_var('show_all_countries_submit', ($show_all_countries == 0) ? $all_countries_submit : '');\n                tpl_set_var('listing_modified', $listing_modified);\n                tpl_set_var('savealert', $savealert);\n\n                $st_hours = floor($search_time);\n                $st_minutes = sprintf('%02.0F', ($search_time - $st_hours) * 60);\n\n                tpl_set_var('search_time', $st_hours . ':' . $st_minutes);\n\n                tpl_set_var('way_length', $way_length);\n                tpl_set_var('log_pw', htmlspecialchars($log_pw, ENT_COMPAT, 'UTF-8'));\n                tpl_set_var('wp_gc', htmlspecialchars($wp_gc, ENT_COMPAT, 'UTF-8'));\n                tpl_set_var('showlists_checked', $showlists ? 'checked=\"checked\"' : '');\n                tpl_set_var('protectcoords_checked', $protect_old_coords ? 'checked=\"checked\"' : '');\n\n                tpl_set_var('reset', $reset);  // obsolete\n                tpl_set_var('submit', $submit);\n            }\n        }\n    }\n}\n\n//make the template and send it out\ntpl_BuildTemplate();\n", "<?php\n/****************************************************************************\n * ./lang/de/ocstyle/varset.inc.php\n * -------------------\n * begin                : Mon June 14 2004\n *\n * For license information see LICENSE.md\n ****************************************************************************/\n\n/****************************************************************************\n *\n *\n * template specific variables setup\n ****************************************************************************/\n\n//set all main template replacement to default values\n\ntpl_set_var('htmlheaders', '');\ntpl_set_var('lang', $lang);\ntpl_set_var('style', $style);\ntpl_set_var('loginbox', '&nbsp;');\ntpl_set_var(\n    'functionsbox',\n    '<a href=\"index.php?page=suche\">' . t('Search') . '</a> | <a href=\"index.php?page=sitemap\">' . t('Sitemap') . '</a>'\n);\ntpl_set_var('runtime', '');\n\n//set up main template specific string\n$sLoggedOut =\n    '<form action=\"' . ($opt['page']['https']['force_login'] ? $opt['page']['absolute_https_url'] : '') . 'login.php\" method=\"post\" enctype=\"application/x-www-form-urlencoded\" name=\"login\" dir=\"ltr\" style=\"display: inline;\"><b>'\n    . t('User:')\n    . '</b>&nbsp;&nbsp;<input name=\"email\" size=\"10\" type=\"text\" class=\"textboxes\" value=\"\" />&nbsp;&nbsp;&nbsp;<b>'\n    . t('Password:')\n    . '</b>&nbsp;&nbsp;<input name=\"password\" size=\"10\" type=\"password\" class=\"textboxes\" value=\"\" />&nbsp;<input type=\"hidden\" name=\"action\" value=\"login\" /><input type=\"hidden\" name=\"target\" value=\"{target}\" />&nbsp;<input type=\"submit\" name=\"LogMeIn\" value=\"'\n    . t('Login')\n    . '\" class=\"formbutton\" style=\"width: 74px;\" onclick=\"submitbutton(\\'LogMeIn\\')\" /></form>';\n$sLoggedIn =\n    \"<b>\"\n    . t('Logged in as')\n    . ' <a href=\"myhome.php\" class=\"testing-top-left-corner-username\">{username}</a></b> - <a href=\"login.php?action=logout\">'\n    . t('Logout')\n    . '</a></b>';\n\n// target in Loginbox setzen\n$target = basename($_SERVER['PHP_SELF']) . '?';\n\n// REQUEST-Variablen durchlaufen und an target anhaengen\n$allowed = ['cacheid', 'userid', 'logid', 'desclang', 'descid'];\n\nforeach($_REQUEST as $varname => $varvalue) {\n    if (in_array($varname, $allowed)) {\n        $target .= $varname . '=' . htmlspecialchars($varvalue) . '&';\n    }\n}\nif (mb_substr($target, - 1) == '?' || mb_substr($target, - 1) == '&') {\n    $target = mb_substr($target, 0, - 1);\n}\n$sLoggedOut = mb_ereg_replace('{target}', $target, $sLoggedOut);\n\n$functionsbox_start_tag = '';\n$functionsbox_middle_tag = ' | ';\n$functionsbox_end_tag = '';\n\n$tpl_subtitle = '';\n\n//other vars\n$login_required = t('Please login to continue:');\n\n$dberrormsg = t('A database command could not be performed.');\n\n$error_prefix = '<span class=\"errormsg\">';\n$error_suffix = '</span>';\n\n$htmlnotice =\n    '<tr><td class=\"spacer\" colspan=\"2\"></td></tr>\n    <tr>\n        <td class=\"help\" colspan=\"2\">\n            <img src=\"lang/de/ocstyle/images/misc/hint.gif\" border=\"0\" width=\"15\" height=\"11\" alt=\"' . t('Notice') . '\" title=\"' . t('Notice') . '\" />\n            ' . t('Your HTML code will be changed again by a special filter. This is necessary to avoid dangerous HTML-tags,\n                 such as &lt;script&gt;. A list of allowed HTML tags, you can find\n                 <a href=\"articles.php?page=htmltags\">here</a>') . '\n        </td>\n    </tr>\n    ';\n", "<?php\n/****************************************************************************\n * ./lib/clicompatbase.inc.php\n * --------------------\n * begin                : Fri September 16 2005\n * For license information see LICENSE.md\n ****************************************************************************/\n\nuse Oc\\Util\\CBench;\n\n/****************************************************************************\n * contains functions that are compatible with the php-CLI-scripts under util.\n * Can be included without including common.inc.php, but will be included from\n * common.inc.php.\n * Global variables that need to be set up when including without common.inc.php:\n * $dblink\n ****************************************************************************/\n\nrequire_once __DIR__ . '/../vendor/autoload.php';\n\nglobal $interface_output, $dblink_slave;\nif (!isset($interface_output)) {\n    $interface_output = 'plain';\n}\n\nif (isset($opt['rootpath'])) {\n    $rootpath = $opt['rootpath'];\n} elseif (isset($rootpath)) {\n    $opt['rootpath'] = $rootpath;\n} else {\n    $rootpath = __DIR__ . '/../';\n    $opt['rootpath'] = $rootpath;\n}\n\n// yepp, we will use UTF-8\nmb_internal_encoding('UTF-8');\nmb_regex_encoding('UTF-8');\nmb_language('uni');\n\n//load default webserver-settings and common includes\nrequire_once __DIR__ . '/consts.inc.php';\nrequire_once __DIR__ . '/settings.inc.php';\nrequire_once __DIR__ . '/../lib2/errorhandler.inc.php';\n\n// check for banned UAs\n$useragent = isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '';\nforeach ($opt['page']['banned_user_agents'] as $ua) {\n    if (strpos($useragent, $ua) !== false) {\n        die();\n    }\n}\n\n// basic PHP settings\ndate_default_timezone_set($timezone);\nregister_errorhandlers();\n\nif (isset($debug_page) && $debug_page) {\n    ini_set('display_errors', true);\n    ini_set('error_reporting', E_ALL);\n} else {\n    ini_set('display_errors', false);\n    ini_set('error_reporting', E_ALL & ~E_NOTICE);\n}\n\n$dblink_slave = false;\n$db_error = 0;\n\n// prepare EMail-From\n$emailheaders = 'From: \"' . $emailaddr . '\" <' . $emailaddr . '>';\n\n/**\n * @param string $module\n * @param int $eventId\n * @param $userId\n * @param $objectid1\n * @param int $objectid2\n * @param string $logtext\n * @param $details\n */\nfunction logentry($module, $eventId, $userId, $objectid1, $objectid2, $logtext, $details): void\n{\n    sql(\n        \"INSERT INTO logentries (`module`, `eventid`, `userid`, `objectid1`, `objectid2`, `logtext`, `details`)\n         VALUES ('&1', '&2', '&3', '&4', '&5', '&6', '&7')\",\n        $module,\n        $eventId,\n        $userId,\n        $objectid1,\n        $objectid2,\n        $logtext,\n        serialize($details)\n    );\n}\n\n// read a file and return it as a string\n// WARNING: no huge files!\nfunction read_file($file = '')\n{\n    $content = false;\n    $fh = fopen($file, 'r');\n    if ($fh) {\n        $content = fread($fh, filesize($file));\n    }\n\n    fclose($fh);\n\n    return $content;\n}\n\nfunction escape_javascript($text)\n{\n    return str_replace('\\'', '\\\\\\'', str_replace('\"', '&quot;', $text));\n}\n\n// called if mysqli_query failed, sends email to sysadmin\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n */\nfunction sql_failed(): void\n{\n    sql_error();\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $sql\n * @param mixed $default\n */\nfunction sqlValue($sql, $default)\n{\n    $rs = sql($sql);\n    if ($r = sql_fetch_row($rs)) {\n        if ($r[0] == null) {\n            return $default;\n        }\n\n        return $r[0];\n    }\n\n    return $default;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $sql\n * @param $default\n * @return mixed\n */\nfunction sql_value_slave($sql, $default)\n{\n    $rs = sql_slave($sql);\n    if ($r = sql_fetch_row($rs)) {\n        if ($r[0] == null) {\n            return $default;\n        }\n\n        return $r[0];\n    }\n\n    return $default;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $name\n * @param string $default\n * @return string\n */\nfunction getSysConfig($name, $default)\n{\n    return sqlValue('SELECT `value` FROM `sysconfig` WHERE `name`=\\'' . sql_escape($name) . '\\'', $default);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $name\n * @param string $value\n */\nfunction setSysConfig($name, $value): void\n{\n    if (sqlValue('SELECT COUNT(*) FROM sysconfig WHERE name=\\'' . sql_escape($name) . '\\'', 0) == 1) {\n        sql(\n            \"UPDATE `sysconfig` SET `value`='&1' WHERE `name`='&2' LIMIT 1\",\n            $value,\n            $name\n        );\n    } else {\n        sql(\n            \"INSERT INTO `sysconfig` (`name`, `value`) VALUES ('&1', '&2')\",\n            $name,\n            $value\n        );\n    }\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $sql\n * @return mysqli_result\n */\nfunction sql($sql)\n{\n    global $dblink;\n\n    // prepare args\n    $args = func_get_args();\n    unset($args[0]);\n\n    if (isset($args[1]) && is_array($args[1])) {\n        $tmp_args = $args[1];\n        unset($args);\n\n        // correct indizes\n        $args = array_merge([0], $tmp_args);\n        unset($tmp_args);\n        unset($args[0]);\n    }\n\n    return sql_internal($dblink, $sql, false, $args);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $sql\n * @return mysqli_result\n */\nfunction sql_slave($sql)\n{\n    throw new InvalidArgumentException('sql slave support was removed!');\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $_dblink\n * @param $sql\n * @return mysqli_result\n */\nfunction sql_internal($_dblink, $sql)\n{\n    global $sql_warntime;\n    global $sql_replacements;\n\n    $args = func_get_args();\n    unset($args[0], $args[1], $args[2]);\n\n    /* as an option, you can give as second parameter an array\n     * with all values for the placeholder. The array has to be\n     * with numeric indices.\n     */\n    if (isset($args[3]) && is_array($args[3])) {\n        $tmp_args = $args[3];\n        unset($args);\n\n        // correct indices\n        $args = array_merge([0], $tmp_args);\n        unset($tmp_args);\n        unset($args[0]);\n    }\n\n    $sqlpos = 0;\n    $filtered_sql = '';\n\n    // $sql von vorne bis hinten durchlaufen und alle &x ersetzen\n    $nextarg = mb_strpos($sql, '&');\n    while ($nextarg !== false) {\n        // muss dieses & ersetzt werden, oder ist es escaped?\n        $escapesCount = 0;\n        while ((($nextarg - $escapesCount - 1) > 0) && (mb_substr($sql, $nextarg - $escapesCount - 1, 1) == '\\\\')) {\n            $escapesCount++;\n        }\n        if (($escapesCount % 2) == 1) {\n            $nextarg++;\n        } else {\n            $nextchar = mb_substr($sql, $nextarg + 1, 1);\n            if (is_numeric($nextchar)) {\n                $arglength = 0;\n                $arg = '';\n\n                // n\u00e4chstes Zeichen das keine Zahl ist herausfinden\n                while (mb_ereg_match('^[0-9]{1}', $nextchar) == 1) {\n                    $arg .= $nextchar;\n\n                    $arglength++;\n                    $nextchar = mb_substr($sql, $nextarg + $arglength + 1, 1);\n                }\n\n                // ok ... ersetzen\n                $filtered_sql .= mb_substr($sql, $sqlpos, $nextarg - $sqlpos);\n                $sqlpos = $nextarg + $arglength;\n\n                if (isset($args[$arg])) {\n                    if (is_numeric($args[$arg])) {\n                        $filtered_sql .= $args[$arg];\n                    } else {\n                        if ((mb_substr($sql, $sqlpos - $arglength - 1, 1) == '\\'') &&\n                            (mb_substr($sql, $sqlpos + 1, 1) == '\\'')\n                        ) {\n                            $filtered_sql .= sql_escape($args[$arg]);\n                        } elseif ((mb_substr($sql, $sqlpos - $arglength - 1, 1) == '`') &&\n                            (mb_substr($sql, $sqlpos + 1, 1) == '`')\n                        ) {\n                            $filtered_sql .= sql_escape($args[$arg]);\n                        } else {\n                            sql_error();\n                        }\n                    }\n                } else {\n                    // NULL\n                    if ((mb_substr($sql, $sqlpos - $arglength - 1, 1) == '\\'') &&\n                        (mb_substr($sql, $sqlpos + 1, 1) == '\\'')\n                    ) {\n                        // Anf\u00fchrungszeichen weg machen und NULL einsetzen\n                        $filtered_sql = mb_substr($filtered_sql, 0, mb_strlen($filtered_sql) - 1);\n                        $filtered_sql .= 'NULL';\n                        $sqlpos++;\n                    } else {\n                        $filtered_sql .= 'NULL';\n                    }\n                }\n\n                $sqlpos++;\n            } else {\n                $arglength = 0;\n                $arg = '';\n\n                // n\u00e4chstes Zeichen das kein Buchstabe/Zahl ist herausfinden\n                while (mb_ereg_match('^[a-zA-Z0-9]{1}', $nextchar) == 1) {\n                    $arg .= $nextchar;\n\n                    $arglength++;\n                    $nextchar = mb_substr($sql, $nextarg + $arglength + 1, 1);\n                }\n\n                // ok ... ersetzen\n                $filtered_sql .= mb_substr($sql, $sqlpos, $nextarg - $sqlpos);\n\n                if (isset($sql_replacements[$arg])) {\n                    $filtered_sql .= $sql_replacements[$arg];\n                } else {\n                    sql_error();\n                }\n\n                $sqlpos = $nextarg + $arglength + 1;\n            }\n        }\n\n        $nextarg = mb_strpos($sql, '&', $nextarg + 1);\n    }\n\n    // rest anh\u00e4ngen\n    $filtered_sql .= mb_substr($sql, $sqlpos);\n\n    // \\& durch & ersetzen\n    $nextarg = mb_strpos($filtered_sql, '\\&');\n    while ($nextarg !== false) {\n        $escapesCount = 0;\n        while ((($nextarg - $escapesCount - 1) > 0) &&\n            (mb_substr($filtered_sql, $nextarg - $escapesCount - 1, 1) == '\\\\')) {\n            $escapesCount++;\n        }\n        if (($escapesCount % 2) == 0) {\n            // \\& ersetzen durch &\n            $filtered_sql = mb_substr($filtered_sql, 0, $nextarg) . '&' . mb_substr($filtered_sql, $nextarg + 2);\n            $nextarg--;\n        }\n\n        $nextarg = mb_strpos($filtered_sql, '\\&', $nextarg + 2);\n    }\n\n    //\n    // ok ... hier ist filtered_sql fertig\n    //\n\n    /* todo:\n        - errorlogging\n        - LIMIT\n        - DROP/DELETE ggf. blocken\n    */\n\n    // Zeitmessung f\u00fcr die Ausf\u00fchrung\n    $cSqlExecution = new CBench;\n    $cSqlExecution->start();\n\n    $result = mysqli_query($_dblink, $filtered_sql);\n    if ($result === false) {\n        sql_error();\n    }\n\n    $cSqlExecution->stop();\n\n    if ($sql_warntime > 0 && $cSqlExecution->diff() > $sql_warntime) {\n        $ua = isset($_SERVER['HTTP_USER_AGENT']) ? \"\\r\\n\" . $_SERVER['HTTP_USER_AGENT'] : '';\n        sql_warn('execution took ' . $cSqlExecution->diff() . ' seconds' . $ua);\n    }\n\n    return $result;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $value\n * @return false|string\n */\nfunction sql_escape($value)\n{\n    global $dblink;\n    $value = mysqli_real_escape_string($dblink, $value);\n    $value = mb_ereg_replace('&', '\\&', $value);\n\n    return $value;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $value\n * @return false|mixed|string\n */\nfunction sql_escape_backtick($value)\n{\n    $value = sql_escape($value);\n    $value = str_replace('`', '``', $value);\n\n    return $value;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n */\nfunction sql_error(): void\n{\n    global $debug_page;\n    global $sql_errormail;\n    global $emailheaders;\n    global $absolute_server_URI;\n    global $interface_output;\n    global $dberrormsg;\n    global $db_error;\n    global $dblink;\n\n    $db_error += 1;\n    $msql_error = mysqli_connect_error() . ': ' . mysqli_error($dblink);\n    if ($db_error > 1) {\n        $msql_error .= \"\\n(** error recursion **)\";\n    }\n\n    if ($sql_errormail != '') {\n        // sendout email\n        $email_content = $msql_error;\n        $email_content .= \"\\n--------------------\\n\";\n        $email_content .= print_r(debug_backtrace(), true);\n        if (admin_errormail($sql_errormail, 'sql_error', $email_content, $emailheaders)) {\n            mb_send_mail($sql_errormail, 'sql_error: ' . $absolute_server_URI, $email_content, $emailheaders);\n        }\n    }\n\n    if ($interface_output == 'html') {\n        // display errorpage\n        $errmsg = $dberrormsg . ($debug_page ? '<br />' . $msql_error : '');\n        if ($db_error <= 1) {\n            tpl_errorMsg('sql_error', $errmsg);\n        } else {\n            // database error recursion, because another error occurred while trying to\n            // build the error template (e.g. because connection was lost, or an error mail\n            // could not load translations from database)\n\n            $errtitle = 'Datenbankfehler';\n            require __DIR__ . '/../html/error.php';\n        }\n        exit;\n    } elseif ($interface_output == 'plain') {\n        echo \"\\n\";\n        echo 'sql_error' . \"\\n\";\n        if ($debug_page) {\n            echo $msql_error . \"\\n\";\n        }\n        echo '---------' . \"\\n\";\n        echo print_r(debug_backtrace(), true) . \"\\n\";\n        exit;\n    }\n\n    die('sql_error');\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $warnmessage\n */\nfunction sql_warn($warnmessage): void\n{\n    global $sql_errormail;\n    global $emailheaders;\n    global $absolute_server_URI;\n\n    $email_content = $warnmessage;\n    $email_content .= \"\\n--------------------\\n\";\n    $email_content .= print_r(debug_backtrace(), true);\n\n    if (admin_errormail($sql_errormail, 'sql_warn', $email_content, $emailheaders)) {\n        @mb_send_mail($sql_errormail, 'sql_warn: ' . $absolute_server_URI, $email_content, $emailheaders);\n    }\n}\n\n/*\n    Ersatz f\u00fcr die in Mysql eingebauten Funktionen\n*/\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param resource $rs\n * @return array|false|null\n */\nfunction sql_fetch_array($rs)\n{\n    return mysqli_fetch_array($rs);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $rs\n * @return array\n */\nfunction sql_fetch_assoc($rs)\n{\n    return mysqli_fetch_assoc($rs);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $rs\n * @return array\n */\nfunction sql_fetch_row($rs)\n{\n    return mysqli_fetch_row($rs);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param resource $rs\n * @return array|null\n */\nfunction sql_fetch_column($rs)\n{\n    $col = [];\n    while ($r = sql_fetch_row($rs)) {\n        if (count($r) != 1) {\n            return null;\n        }\n        $col[] = $r[0];\n    }\n    sql_free_result($rs);\n\n    return $col;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $rs\n * @return bool\n */\nfunction sql_free_result($rs)\n{\n    return mysqli_free_result($rs);\n}\n\nfunction mb_trim($str)\n{\n    $bLoop = true;\n    while ($bLoop == true) {\n        $sPos = mb_substr($str, 0, 1);\n\n        if ($sPos == ' ' || $sPos == \"\\r\" || $sPos == \"\\n\" || $sPos == \"\\t\" || $sPos == \"\\x0B\" || $sPos == \"\\0\") {\n            $str = mb_substr($str, 1, mb_strlen($str) - 1);\n        } else {\n            $bLoop = false;\n        }\n    }\n\n    $bLoop = true;\n    while ($bLoop == true) {\n        $sPos = mb_substr($str, -1, 1);\n\n        if ($sPos == ' ' || $sPos == \"\\r\" || $sPos == \"\\n\" || $sPos == \"\\t\" || $sPos == \"\\x0B\" || $sPos == \"\\0\") {\n            $str = mb_substr($str, 0, mb_strlen($str) - 1);\n        } else {\n            $bLoop = false;\n        }\n    }\n\n    return $str;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * disconnect the database\n */\nfunction db_disconnect(): void\n{\n    global $dbpconnect, $dblink;\n\n    //is connected and no persistent connect used?\n    if (($dbpconnect == false) && ($dblink !== false)) {\n        @mysqli_close($dblink);\n        $dblink = false;\n    }\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * database handling\n */\nfunction db_connect(): void\n{\n    global $dblink, $dbusername, $dbname, $dbserver, $dbpasswd;\n\n    //connect to the database by the given method - no php error reporting!\n    $dblink = mysqli_connect($dbserver, $dbusername, $dbpasswd, $dbname);\n\n    if (!$dblink instanceof mysqli) {\n        throw new InvalidArgumentException('cannot connect to database');\n    }\n}\n\nfunction get_site_urls($domain)\n{\n    global $opt;\n\n    if (!$domain) {\n        $domain = parse_url($opt['page']['default_primary_url'], PHP_URL_HOST);\n    }\n    if ($domain == parse_url($opt['page']['default_primary_url'], PHP_URL_HOST) ||\n        !isset($opt['domain'][$domain]['url'])\n    ) {\n        $site_url = $opt['page']['default_primary_url'];\n        $shortlink_url = $opt['page']['default_primary_shortlink_url'];\n    } else {\n        $protocol = 'http';\n        if (isset($opt['domain'][$domain]['https']['is_default']) && $opt['domain'][$domain]['https']['is_default']) {\n            $protocol = 'https';\n        }\n\n        $site_url = $protocol . strstr($opt['domain'][$domain]['url'], '://');\n        if (isset($opt['domain'][$domain]['shortlink_domain']) && $opt['domain'][$domain]['shortlink_domain']) {\n            $shortlink_url = $protocol . '://' . $opt['domain'][$domain]['shortlink_domain'] . '/';\n        } else {\n            $shortlink_url = false;\n        }\n    }\n\n    return [\n        'site_url' => $site_url,\n        'shortlink_url' => $shortlink_url,\n    ];\n}\n\n/**\n * @param string $filename\n * @param mixed $language\n * @param mixed $domain\n * @return bool|string\n */\nfunction fetch_email_template($filename, $language, $domain)\n{\n    global $opt, $rootpath;\n\n    if (!$language) {\n        $language = $opt['template']['default']['locale'];\n    }\n    $language = strtolower($language);\n    if (!file_exists(__DIR__ . '/../lang/de/ocstyle/email/' . $language . '/' . $filename . '.email')) {\n        $language = 'en';\n    }\n    $mailtext = read_file(__DIR__ . '/../lang/de/ocstyle/email/' . $language . '/' . $filename . '.email');\n\n    $urls = get_site_urls($domain);\n    $mailtext = mb_ereg_replace('{site_url}', $urls['site_url'], $mailtext);\n    if ($urls['shortlink_url']) {\n        $mailtext = mb_ereg_replace('{shortlink_url}', $urls['shortlink_url'], $mailtext);\n    } else {\n        $mailtext = mb_ereg_replace('{shortlink_url}', $urls['site_url'], $mailtext);\n    }\n\n    $mailtext = mb_ereg_replace('{email_contact}', $opt['mail']['contact'], $mailtext);\n\n    return $mailtext;\n}\n", "<?php\n/***************************************************************************\n * for license information see LICENSE.md\n *  This module includes all database function necessary to do queries from\n *  the database.\n ***************************************************************************/\n\nuse Oc\\Util\\CBench;\n\n/***************************************************************************\n * Overview:\n * sql_enable_debugger()           ... enables Sqldebug if not not already done by config\n * sql($sql)                       ... Query SQL and return result\n * sql_escape($value)              ... Escape parameter for SQL-use\n * sql_escape_backtick($value)     ... escape $value for use within backticks\n * sql_value($sql, $default)       ... Query SQL and return first row of first line\n * sql_fetch_array($rs)            ... mysqli_fetch_array with charset conversion\n * sql_fetch_assoc($rs)            ... mysqli_fetch_assoc with charset conversion\n * sql_fetch_row($rs)              ... mysqli_fetch_row with charset conversion\n * sql_fetch_column($rs)           ... fetch column with charset conversion\n * sql_fetch_assoc_table($rs)      ... fetch_assoc for all rows\n * sql_temp_table($table)          ... registers an placeholder for use as temporary\n * table and drop's temporary tables if\n * mysqli_pconnect is used\n * sql_drop_temp_table($table)     ... unregisters and drops an tmp-table placeholder\n * sql_free_result($rs)            ... mysqli_free_result\n * sql_affected_rows()             ... mysqli_affected_rows\n * sql_insert_id()                 ... mysqli_insert_id\n * sql_num_rows($rs)               ... mysqli_num_rows\n * sql_export_recordset($f, $rs)   ... export recordset to file\n * sql_export_table($f, $table)    ... export table to file\n * sql_export_table_to_file($filename, $table)\n * sql_table_exists                ... tests if a table exists\n * sql_field_exists                ... tests if a table and a field in this table exist\n * sql_field_type                  ... queries the type of a field (uppercase letters)\n * sql_index_exists                ... tests if a table and an index of this table exist\n * // slave query functions\n * sql_slave_exclude()             ... do not use slave servers for the current user\n * until the slaves have replicated to this point\n * (e.g. after a new cache was hidden)\n * sql_slave($sql)\n * sql_value_slave($sql, $default)\n * sql_temp_table_slave($table)\n * sql_drop_temp_table_slave($table)\n * sql_affected_rows_slave()\n * sql_insert_id_slave()\n * sql_connect_anyslave()\n * sql_connect_slave($id)\n * sqlf_slave($sql)\n * // for sqldebugger\n * sqlf($sql)                    ... sql for framwork functions\n * sqll($sql)                    ... sql for business layer functions\n * sqlf_value($sql, $default)    ... sql_value for framwork functions\n * sqll_value($sql, $default)    ... sql_value for business layer functions\n * // only for internal use      ... invoked automatically\n * sql_connect()                 ... connect to the database\n * sql_disconnect()              ... disconnect database\n * sql_error()                   ... report an error and stop processing\n * sql_warn($warnmessage)        ... report a warning and resume processing\n * // for maintenance functions\n * sql_connect_maintenance()       ... connect the database with more privileges\n * sql_dropFunction                ... drops stored function\n * sql_dropProcedure               ... drops stored procedure\n * sql_dropTrigger                 ... drops stored trigger\n ***************************************************************************/\n\n$db['connected'] = false;\n$db['dblink'] = false;\n$db['dblink_slave'] = false;\n$db['slave_id'] = -1;\n$db['slave_server'] = '';\n$db['temptable_initialized'] = false;\n$db['temptables'] = [];\n$db['temptables_slave'] = [];\n$db['mode'] = DB_MODE_USER;\n$db['error'] = false;\n\n$db['debug'] = (($opt['debug'] & DEBUG_SQLDEBUGGER) == DEBUG_SQLDEBUGGER);\nif ($db['debug'] === true) {\n    require_once __DIR__ . '/sqldebugger.class.php';\n}\n\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $sql\n * @return resource\n */\nfunction sql($sql)\n{\n    global $db;\n\n    // establish db connection\n    if ($db['connected'] !== true) {\n        sql_connect();\n    }\n\n    // prepare args\n    $args = func_get_args();\n    unset($args[0]);\n\n    if (isset($args[1]) && is_array($args[1])) {\n        $tmp_args = $args[1];\n        unset($args);\n\n        // correct indices\n        $args = array_merge([0], $tmp_args);\n        unset($tmp_args, $args[0]);\n    }\n\n    return sql_internal($db['dblink'], $sql, $args);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $sql\n * @return resource\n */\nfunction sql_slave($sql)\n{\n    global $db;\n\n    if ($db['dblink_slave'] === false) {\n        sql_connect_anyslave();\n    }\n\n    // prepare args\n    $args = func_get_args();\n    unset($args[0]);\n\n    if (isset($args[1]) && is_array($args[1])) {\n        $tmp_args = $args[1];\n        unset($args);\n\n        // correct indices\n        $args = array_merge([0], $tmp_args);\n        unset($tmp_args, $args[0]);\n    }\n\n    return sql_internal($db['dblink_slave'], $sql, $args);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $dblink\n * @param $sql\n * @return resource\n */\nfunction sql_internal($dblink, $sql)\n{\n    global $opt, $db, $sqldebugger;\n\n    $args = func_get_args();\n    unset($args[0], $args[1]);\n\n    /* as an option, you can give as second parameter an array\n     * with all values for the placeholder. The array has to be\n     * with numeric indices.\n     */\n    if (isset($args[2]) && is_array($args[2])) {\n        $tmp_args = $args[2];\n        unset($args);\n\n        // correct indices\n        $args = array_merge([0], $tmp_args);\n        unset($tmp_args, $args[0]);\n    }\n\n    $sqlpos = 0;\n    $filtered_sql = '';\n\n    // replace every &x in $sql with the placeholder or parameter\n    $nextarg = strpos($sql, '&');\n    while ($nextarg !== false) {\n        // & escaped?\n        $escapesCount = 0;\n        while ((($nextarg - $escapesCount - 1) > 0) && (substr($sql, $nextarg - $escapesCount - 1, 1) == '\\\\')) {\n            $escapesCount++;\n        }\n        if (($escapesCount % 2) === 1) {\n            $nextarg++;\n        } else {\n            $nextchar = substr($sql, $nextarg + 1, 1);\n            if (is_numeric($nextchar)) {\n                $arglength = 0;\n                $arg = '';\n\n                // find next non-digit\n                while (preg_match('/^[0-9]{1}/', $nextchar) === 1) {\n                    $arg .= $nextchar;\n\n                    $arglength++;\n                    $nextchar = substr($sql, $nextarg + $arglength + 1, 1);\n                }\n\n                // ok ... replace\n                $filtered_sql .= substr($sql, $sqlpos, $nextarg - $sqlpos);\n                $sqlpos = $nextarg + $arglength;\n\n                if (isset($args[$arg])) {\n                    if (is_numeric($args[$arg])) {\n                        $filtered_sql .= $args[$arg];\n                    } else {\n                        if ((substr($sql, $sqlpos - $arglength - 1, 1) == '\\'') && (substr(\n                                    $sql,\n                            $sqlpos + 1,\n                            1\n                                ) == '\\'')) {\n                            $filtered_sql .= sql_escape($args[$arg]);\n                        } elseif ((substr($sql, $sqlpos - $arglength - 1, 1) == '`') && (substr(\n                                    $sql,\n                            $sqlpos + 1,\n                            1\n                                ) == '`')) {\n                            $filtered_sql .= sql_escape_backtick($args[$arg]);\n                        } else {\n                            sql_error($sql);\n                        }\n                    }\n                } else {\n                    // NULL\n                    if ((substr($sql, $sqlpos - $arglength - 1, 1) == '\\'') && (substr($sql, $sqlpos + 1, 1) == '\\'')) {\n                        // strip apostroph and insert NULL\n                        $filtered_sql = substr($filtered_sql, 0, strlen($filtered_sql) - 1);\n                        $filtered_sql .= 'NULL';\n                        $sqlpos++;\n                    } else {\n                        $filtered_sql .= 'NULL';\n                    }\n                }\n\n                $sqlpos++;\n            } else {\n                $arglength = 0;\n                $arg = '';\n\n                // find next non-alphanumeric char\n                // (added '_' - it is used in temptable names - following 2013/07/18)\n                while (preg_match('/^[a-zA-Z0-9_]{1}/', $nextchar) == 1) {\n                    $arg .= $nextchar;\n\n                    $arglength++;\n                    $nextchar = substr($sql, $nextarg + $arglength + 1, 1);\n                }\n\n                // ok ... replace\n                $filtered_sql .= substr($sql, $sqlpos, $nextarg - $sqlpos);\n\n                if (isset($opt['db']['placeholder'][$arg])) {\n                    if (substr($sql, $nextarg - 1, 1) != '`') {\n                        $filtered_sql .= '`';\n                    }\n\n                    $filtered_sql .= sql_escape_backtick($opt['db']['placeholder'][$arg]);\n\n                    if (substr($sql, $nextarg + $arglength + 1, 1) != '`') {\n                        $filtered_sql .= '`';\n                    }\n                } elseif (isset($db['temptables'][$arg])) {\n                    if (substr($sql, $nextarg - 1, 1) != '`') {\n                        $filtered_sql .= '`';\n                    }\n\n                    $filtered_sql .= sql_escape_backtick(\n                            $opt['db']['placeholder']['tmpdb']\n                        ) . '`.`' . sql_escape_backtick($db['temptables'][$arg]);\n\n                    if (substr($sql, $nextarg + $arglength + 1, 1) != '`') {\n                        $filtered_sql .= '`';\n                    }\n                } else {\n                    sql_error($sql);\n                }\n\n                $sqlpos = $nextarg + $arglength + 1;\n            }\n        }\n\n        $nextarg = strpos($sql, '&', $nextarg + 1);\n    }\n\n    // append the rest\n    $filtered_sql .= substr($sql, $sqlpos);\n\n    // strip escapes of &\n    $nextarg = strpos($filtered_sql, '\\&');\n    while ($nextarg !== false) {\n        $escapesCount = 0;\n        while ((($nextarg - $escapesCount - 1) > 0)\n            && (substr($filtered_sql, $nextarg - $escapesCount - 1, 1) == '\\\\')) {\n            $escapesCount++;\n        }\n        if (($escapesCount % 2) == 0) {\n            // strip escapes of &\n            $filtered_sql = substr($filtered_sql, 0, $nextarg) . '&' . substr($filtered_sql, $nextarg + 2);\n            $nextarg--;\n        }\n\n        $nextarg = strpos($filtered_sql, '\\&', $nextarg + 2);\n    }\n\n    //\n    // ok ... filtered_sql is ready for usage\n    //\n\n    /* todo:\n        - errorlogging\n        - LIMIT\n        - block DROP/DELETE\n    */\n\n    if ($db['debug'] === true) {\n        $result = $sqldebugger->execute($filtered_sql, $dblink, $dblink === $db['dblink_slave'], $db['slave_server']);\n        if ($result === false) {\n            sql_error($filtered_sql);\n        }\n    } else {\n        // measure time\n        if ($opt['db']['warn']['time'] > 0) {\n            $cSqlExecution = new CBench;\n            $cSqlExecution->start();\n        }\n\n        $result = @mysqli_query($dblink, $filtered_sql);\n        if ($result === false) {\n            sql_error($filtered_sql);\n        }\n\n        if ($opt['db']['warn']['time'] > 0) {\n            $cSqlExecution->stop();\n\n            if ($cSqlExecution->diff() > $opt['db']['warn']['time']) {\n                $ua = isset($_SERVER['HTTP_USER_AGENT']) ? \"\\r\\n\" . $_SERVER['HTTP_USER_AGENT'] : '';\n                sql_warn('execution took ' . $cSqlExecution->diff() . ' seconds' . $ua);\n            }\n        }\n    }\n\n    return $result;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $sql\n * @return resource\n */\nfunction sqlf($sql)\n{\n    global $db;\n    $nOldMode = $db['mode'];\n    $db['mode'] = DB_MODE_FRAMEWORK;\n    $args = func_get_args();\n    unset($args[0]);\n    $result = sql($sql, $args);\n    $db['mode'] = $nOldMode;\n\n    return $result;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $sql\n * @return resource\n */\nfunction sqlf_slave($sql)\n{\n    global $db;\n    $nOldMode = $db['mode'];\n    $db['mode'] = DB_MODE_FRAMEWORK;\n    $args = func_get_args();\n    unset($args[0]);\n    $result = sql_slave($sql, $args);\n    $db['mode'] = $nOldMode;\n\n    return $result;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $sql\n * @return resource\n */\nfunction sqll($sql)\n{\n    global $db;\n    $nOldMode = $db['mode'];\n    $db['mode'] = DB_MODE_BUSINESSLAYER;\n    $args = func_get_args();\n    unset($args[0]);\n    $result = sql($sql, $args);\n    $db['mode'] = $nOldMode;\n\n    return $result;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $sql\n * @param int $default\n * @return mixed\n */\nfunction sqlf_value($sql, $default)\n{\n    global $db;\n    $nOldMode = $db['mode'];\n    $db['mode'] = DB_MODE_FRAMEWORK;\n    $args = func_get_args();\n    unset($args[0], $args[1]);\n    $result = sql_value($sql, $default, $args);\n    $db['mode'] = $nOldMode;\n\n    return $result;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $sql\n * @param int $default\n * @return mixed\n */\nfunction sqll_value($sql, $default)\n{\n    global $db;\n    $nOldMode = $db['mode'];\n    $db['mode'] = DB_MODE_BUSINESSLAYER;\n    $args = func_get_args();\n    unset($args[0], $args[1]);\n    $result = sql_value($sql, $default, $args);\n    $db['mode'] = $nOldMode;\n\n    return $result;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $value\n * @return string\n */\nfunction sql_escape($value)\n{\n    global $db, $opt;\n\n    // convert the charset of $value\n    if ($opt['charset']['iconv'] != 'UTF-8') {\n        $value = iconv('UTF-8', $opt['charset']['iconv'], $value);\n    }\n\n    // establish db connection\n    if ($db['connected'] !== true) {\n        sql_connect();\n    }\n\n    $value = mysqli_real_escape_string($db['dblink'], $value);\n    $value = str_replace('&', '\\&', $value);\n\n    return $value;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $value\n * @return string\n */\nfunction sql_escape_backtick($value)\n{\n    $value = sql_escape($value);\n    $value = str_replace('`', '``', $value);\n\n    return $value;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $sql\n * @param $default\n * @return mixed\n */\nfunction sql_value($sql, $default)\n{\n    $args = func_get_args();\n    unset($args[0], $args[1]);\n\n    if (isset($args[2]) && is_array($args[2])) {\n        $tmp_args = $args[2];\n        unset($args);\n\n        // correct indices\n        $args = array_merge([0], $tmp_args);\n        unset($tmp_args, $args[0]);\n    }\n\n    return sql_value_internal(false, $sql, $default, $args);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $sql\n * @param $default\n * @return mixed\n */\nfunction sql_value_slave($sql, $default)\n{\n    $args = func_get_args();\n    unset($args[0], $args[1]);\n\n    if (isset($args[2]) && is_array($args[2])) {\n        $tmp_args = $args[2];\n        unset($args);\n\n        // correct indices\n        $args = array_merge([0], $tmp_args);\n        unset($tmp_args, $args[0]);\n    }\n\n    return sql_value_internal(true, $sql, $default, $args);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param bool $bQuerySlave\n * @param $sql\n * @param $default\n * @return mixed\n */\nfunction sql_value_internal($bQuerySlave, $sql, $default)\n{\n    $args = func_get_args();\n    unset($args[0], $args[1], $args[2]);\n\n    /* as an option, you can give as third parameter an array\n     * with all values for the placeholder. The array has to be\n     * with numeric indices.\n     */\n    if (isset($args[3]) && is_array($args[3])) {\n        $tmp_args = $args[3];\n        unset($args);\n\n        // correct indices\n        $args = array_merge([0], $tmp_args);\n        unset($tmp_args, $args[0]);\n    }\n\n    if ($bQuerySlave == true) {\n        $rs = sql_slave($sql, $args);\n    } else {\n        $rs = sql($sql, $args);\n    }\n\n    $r = sql_fetch_row($rs);\n    sql_free_result($rs);\n\n    if ($r) {\n        if ($r[0] == null) {\n            return $default;\n        }\n\n        return $r[0];\n    }\n\n    return $default;\n}\n\n/*\n    Replacement for builtin MySQL functions\n    (includes database charset conversion)\n*/\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $rs\n * @return array|false|null\n */\nfunction sql_fetch_array($rs)\n{\n    global $opt;\n    $retval = mysqli_fetch_array($rs);\n    if (is_array($retval)) {\n        if ($opt['charset']['iconv'] != 'UTF-8') {\n            foreach ($retval as $k => $v) {\n                $retval[$k] = iconv($opt['charset']['iconv'], 'UTF-8', $v);\n            }\n        }\n    }\n\n    return $retval;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $rs\n * @return array\n */\nfunction sql_fetch_assoc($rs)\n{\n    global $opt;\n    $retval = mysqli_fetch_assoc($rs);\n    if (is_array($retval)) {\n        if ($opt['charset']['iconv'] != 'UTF-8') {\n            foreach ($retval as $k => $v) {\n                $retval[$k] = iconv($opt['charset']['iconv'], 'UTF-8', $v);\n            }\n        }\n    }\n\n    return $retval;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param resource $rs\n * @return array\n */\nfunction sql_fetch_assoc_table($rs)\n{\n    $result = [];\n    while ($r = sql_fetch_assoc($rs)) {\n        $result[] = $r;\n    }\n    sql_free_result($rs);\n\n    return $result;\n}\n\n// returns false if no more matching rows exist\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param resource $rs\n * @return array\n */\nfunction sql_fetch_row($rs)\n{\n    global $opt;\n    $retval = mysqli_fetch_row($rs);\n    if (is_array($retval)) {\n        if ($opt['charset']['iconv'] != 'UTF-8') {\n            foreach ($retval as $k => $v) {\n                $retval[$k] = iconv($opt['charset']['iconv'], 'UTF-8', $v);\n            }\n        }\n    }\n\n    return $retval;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $rs\n * @return array\n */\nfunction sql_fetch_column($rs)\n{\n    global $opt;\n    $result = [];\n    while ($r = mysqli_fetch_row($rs)) {\n        if ($opt['charset']['iconv'] != 'UTF-8') {\n            $result[] = iconv($opt['charset']['iconv'], 'UTF-8', $r[0]);\n        } else {\n            $result[] = $r[0];\n        }\n    }\n    sql_free_result($rs);\n\n    return $result;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @return int\n */\nfunction sql_affected_rows()\n{\n    global $db;\n\n    return mysqli_affected_rows($db['dblink']);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @return int\n */\nfunction sql_affected_rows_slave()\n{\n    global $db;\n\n    return mysqli_affected_rows($db['dblink_slave']);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $rs\n */\nfunction sql_free_result($rs): void\n{\n    mysqli_free_result($rs);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @return int\n */\nfunction sql_insert_id()\n{\n    global $db;\n\n    return mysqli_insert_id($db['dblink']);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @return int\n */\nfunction sql_insert_id_slave()\n{\n    global $db;\n\n    return mysqli_insert_id($db['dblink_slave']);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param resource $rs\n * @return int\n */\nfunction sql_num_rows($rs)\n{\n    return mysqli_num_rows($rs);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $table\n */\nfunction sql_temp_table($table): void\n{\n    global $db, $opt;\n\n    if ($db['connected'] == false) {\n        sql_connect();\n    }\n\n    if ($opt['db']['pconnect'] == true) {\n        if ($db['temptable_initialized'] == false) {\n            $rs = sqlf(\n                \"SELECT `threadid`, `name` FROM &db.`sys_temptables` WHERE `threadid`='&1'\",\n                mysqli_thread_id($db['dblink'])\n            );\n            while ($r = sql_fetch_assoc($rs)) {\n                sqlf('DROP TEMPORARY TABLE IF EXISTS &tmpdb.`&1`', $r['name']);\n            }\n            sql_free_result($rs);\n            sqlf(\"DELETE FROM &db.`sys_temptables` WHERE `threadid`='&1'\", mysqli_thread_id($db['dblink']));\n\n            $db['temptable_initialized'] = true;\n        }\n\n        sqlf(\n            \"INSERT IGNORE INTO &db.`sys_temptables` (`threadid`, `name`) VALUES ('&1', '&2')\",\n            mysqli_thread_id($db['dblink']),\n            $table\n        );\n    }\n\n    $db['temptables'][$table] = $table;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $table\n */\nfunction sql_temp_table_slave($table): void\n{\n    global $db, $opt;\n\n    if ($db['dblink_slave'] === false) {\n        sql_connect_anyslave();\n    }\n\n    if ($opt['db']['pconnect'] === true) {\n        sqlf_slave(\n            \"INSERT IGNORE INTO &db.`sys_temptables` (`threadid`, `name`) VALUES ('&1', '&2')\",\n            mysqli_thread_id($db['dblink_slave']),\n            $table\n        );\n    }\n\n    $db['temptables'][$table] = $table;\n    $db['temptables_slave'][$table] = $table;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $table\n */\nfunction sql_drop_temp_table($table): void\n{\n    global $db, $opt;\n\n    sqlf('DROP TEMPORARY TABLE IF EXISTS &tmpdb.`&1`', $table);\n\n    if ($opt['db']['pconnect'] === true) {\n        sqlf(\n            \"DELETE FROM &db.`sys_temptables` WHERE `threadid`='&1' AND `name`='&2'\",\n            mysqli_thread_id($db['dblink']),\n            $table\n        );\n    }\n\n    unset($db['temptables'][$table]);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $table\n * @param $newname\n */\nfunction sql_rename_temp_table($table, $newname): void\n{\n    global $db, $opt;\n\n    if ($opt['db']['pconnect'] === true) {\n        sqlf(\n            \"UPDATE &db.`sys_temptables` SET `name`='&3' WHERE `threadid`='&1' AND `name`='&2'\",\n            mysqli_thread_id($db['dblink']),\n            $table,\n            $newname\n        );\n    }\n\n    sqlf('ALTER TABLE &tmpdb.`&1` RENAME &tmpdb.`&2`', $table, $newname);\n\n    unset($db['temptables'][$table]);\n    $db['temptables'][$newname] = $newname;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $table\n */\nfunction sql_drop_temp_table_slave($table): void\n{\n    global $db, $opt;\n\n    sqlf_slave('DROP TEMPORARY TABLE IF EXISTS &tmpdb.`&1`', $table);\n\n    if ($opt['db']['pconnect'] === true) {\n        sqlf_slave(\n            \"DELETE FROM &db.`sys_temptables` WHERE `threadid`='&1' AND `name`='&2'\",\n            mysqli_thread_id($db['dblink']),\n            $table\n        );\n    }\n\n    unset($db['temptables'][$table], $db['temptables_slave'][$table]);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $table\n * @param $newname\n */\nfunction sql_rename_temp_table_slave($table, $newname): void\n{\n    global $db, $opt;\n\n    if ($opt['db']['pconnect'] === true) {\n        sqlf(\n            \"UPDATE &db.`sys_temptables` SET `name`='&3' WHERE `threadid`='&1' AND `name`='&2'\",\n            mysqli_thread_id($db['dblink']),\n            $table,\n            $newname\n        );\n    }\n\n    sqlf_slave('ALTER TABLE &tmpdb.`&1` RENAME &tmpdb.`&2`', $table, $newname);\n\n    unset($db['temptables'][$table], $db['temptables_slave'][$table]);\n    $db['temptables'][$newname] = $newname;\n    $db['temptables_slave'][$newname] = $newname;\n}\n\n//database handling\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param bool $raiseError\n * @param null|mixed $username\n * @param null|mixed $password\n */\nfunction sql_connect($username = null, $password = null, $raiseError = true): void\n{\n    global $opt, $db;\n\n    if ($username === null) {\n        $username = $opt['db']['username'];\n    }\n    if ($password === null) {\n        $password = $opt['db']['password'];\n    }\n\n    //connect to the database by the given method - no php error reporting!\n    $db['dblink'] = @mysqli_connect($opt['db']['servername'], $username, $password, $opt['db']['placeholder']['db']);\n\n\n    if ($db['dblink'] !== false) {\n        mysqli_query(\n            $db['dblink'],\n            \"SET NAMES '\" . mysqli_real_escape_string($db['dblink'], $opt['charset']['mysql']) . \"'\"\n        );\n    }\n\n    // output the error form if there was an error\n    if ($db['dblink'] === false) {\n        if ($raiseError === true) {\n            sql_error();\n        }\n    } else {\n        $db['connected'] = true;\n    }\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n */\nfunction sql_slave_exclude(): void\n{\n    global $login;\n    if ($login->userid == 0) {\n        return;\n    }\n\n    sql(\n        \"INSERT INTO `sys_repl_exclude` (`user_id`, `datExclude`) VALUES ('&1', NOW())\n                    ON DUPLICATE KEY UPDATE `datExclude`=NOW()\",\n        $login->userid\n    );\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n */\nfunction sql_connect_anyslave(): void\n{\n    global $db, $opt, $login;\n\n    if ($db['dblink_slave'] !== false) {\n        return;\n    }\n\n    $nMaxTimeDiff = $opt['db']['slave']['max_behind'];\n    if ($login->userid != 0) {\n        $nMaxTimeDiff = sql_value(\n            \"SELECT TIMESTAMP(NOW())-TIMESTAMP(`datExclude`)\n            FROM `sys_repl_exclude`\n            WHERE `user_id`='&1'\",\n            $opt['db']['slave']['max_behind'],\n            $login->userid\n        );\n        if ($nMaxTimeDiff > $opt['db']['slave']['max_behind']) {\n            $nMaxTimeDiff = $opt['db']['slave']['max_behind'];\n        }\n    }\n\n    $id = sqlf_value(\n        \"SELECT `id`, `weight`*RAND() AS `w`\n        FROM `sys_repl_slaves`\n        WHERE `active`= 1\n        AND `online`= 1\n        AND (TIMESTAMP(NOW())-TIMESTAMP(`last_check`)+`time_diff`<'&1')\n        ORDER BY `w` DESC LIMIT 1\",\n        -1,\n        $nMaxTimeDiff\n    );\n\n    sql_connect_slave($id);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n */\nfunction sql_connect_master_as_slave(): void\n{\n    global $db;\n\n    // the right slave is connected\n    if ($db['dblink_slave'] !== false) {\n        sql_error();\n\n        return;\n    }\n\n    // use existing master connection\n    $db['slave_id'] = -1;\n    $db['dblink_slave'] = $db['dblink'];\n    $db['slave_server'] = 'master';\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $id\n */\nfunction sql_connect_slave($id): void\n{\n    global $opt, $db;\n\n    if ($id == -1) {\n        sql_connect_master_as_slave();\n\n        return;\n    }\n\n    // the right slave is connected\n    if ($db['dblink_slave'] !== false) {\n        // TODO: disconnect if other slave is connected\n        if ($db['slave_id'] != $id) {\n            sql_error();\n        }\n\n        return;\n    }\n\n    $db['slave_id'] = $id;\n    $slave = $opt['db']['slaves'][$id];\n\n    // for display in SQL debugger\n    $db['slave_server'] = $slave['server'];\n\n\n    $db['dblink_slave'] = @mysqli_connect(\n        $slave['server'],\n        $slave['username'],\n        $slave['password'],\n        $opt['db']['placeholder']['db']\n    );\n\n    if ($db['dblink_slave'] !== false) {\n        mysqli_query(\n            $db['dblink_slave'] .\n            \"SET NAMES '\" . mysqli_real_escape_string($db['dblink_slave'], $opt['charset']['mysql']) . \"'\"\n\n        );\n\n        // initialize temp tables on slave server\n        $rs = sqlf_slave(\n            \"SELECT `threadid`, `name` FROM `sys_temptables` WHERE `threadid`='&1'\",\n            mysqli_thread_id($db['dblink_slave'])\n        );\n        while ($r = sql_fetch_assoc($rs)) {\n            sqlf_slave('DROP TEMPORARY TABLE IF EXISTS &tmpdb.`&1`', $r['name']);\n        }\n        sql_free_result($rs);\n        sqlf_slave(\"DELETE FROM &db.`sys_temptables` WHERE `threadid`='&1'\", mysqli_thread_id($db['dblink_slave']));\n    } else {\n        sql_error();\n    }\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @return bool\n */\nfunction sql_connect_maintenance()\n{\n    global $tpl, $db, $opt;\n\n    sql_connect($opt['db']['maintenance_user'], $opt['db']['maintenance_password'], false);\n    if ($db['dblink'] === false) {\n        sql_disconnect();\n        sql_connect();\n        if ($db['connected'] === false) {\n            $tpl->error(ERROR_DB_COULD_NOT_RECONNECT);\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * disconnect the database\n */\nfunction sql_disconnect(): void\n{\n    global $opt, $db;\n\n    if ($db['dblink'] !== false && $opt['db']['pconnect'] === true) {\n        if (count($db['temptables']) > 0) {\n            foreach ($db['temptables'] as $table) {\n                sqlf('DROP TEMPORARY TABLE IF EXISTS &tmpdb.`&1`', $table);\n            }\n\n            sqlf(\"DELETE FROM &db.`sys_temptables` WHERE `threadid`='&1'\", mysqli_thread_id($db['dblink']));\n            $db['temptables'] = [];\n            $db['temptables_slave'] = [];\n        }\n    }\n\n    if ($db['dblink'] === $db['dblink_slave']) {\n        $db['dblink_slave'] = false;\n    }\n\n    //is connected and no persistent connect used?\n    if ($db['dblink'] !== false && $opt['db']['pconnect'] === false) {\n        mysqli_close($db['dblink']);\n        $db['dblink'] = false;\n        $db['connected'] = false;\n    }\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $sqlstatement\n */\nfunction sql_error($sqlstatement = ''): void\n{\n    global $tpl, $opt, $db;\n    global $bSmartyNoTranslate;\n\n    $errno = mysqli_errno($db['dblink']);\n    $error = mysqli_error($db['dblink']);\n    if ($sqlstatement !== '') {\n        $error .= \"\\n\\nSQL statement: \" . $sqlstatement;\n    }\n\n    if ($db['error'] === true) {\n        // database error recursion, because another error occurred while trying to\n        // build the error template (e.g. because connection was lost, or an error mail\n        // could not load translations from database)\n\n        if ($opt['db']['error']['display'] === true) {\n            $errmsg = 'MySQL error recursion (' . $errno . '): ' . $error;\n        } else {\n            $errmsg = '';\n        }\n        $errtitle = 'Datenbankfehler';\n        require __DIR__ . '/../html/error.php';\n        exit;\n    }\n    $db['error'] = true;\n\n    if ($db['connected'] === false) {\n        $bSmartyNoTranslate = true;\n    }\n\n    if ($opt['db']['error']['mail'] != '') {\n        $subject = '[' . $opt['page']['domain'] . '] SQL error';\n        if (admin_errormail(\n            $opt['db']['error']['mail'],\n            $subject,\n            str_replace(\"\\n\", \"\\r\\n\", $error) . \"\\n\" . print_r(debug_backtrace(), true),\n            'From: ' . $opt['mail']['from']\n        )) {\n            require_once __DIR__ . '/../lib2/mail.class.php';\n\n            $mail = new mail();\n            $mail->subject = $subject;\n            $mail->to = $opt['db']['error']['mail'];\n\n            $mail->name = 'sql_error';\n\n            $mail->assign('errno', $errno);\n            $mail->assign('error', str_replace(\"\\n\", \"\\r\\n\", $error));\n            $mail->assign('trace', print_r(debug_backtrace(), true));\n\n            $mail->send();\n            $mail = null;\n        }\n    }\n\n    if ($opt['gui'] === GUI_HTML) {\n        if (isset($tpl)) {\n            if ($opt['db']['error']['display'] === true) {\n                $tpl->error('MySQL error (' . $errno . '): ' . $error);\n            } else {\n                $tpl->error('A database command could not be performed.');\n            }\n        } else {\n            if ($opt['db']['error']['display'] == true) {\n                die(\n                    '<html><body>' .\n                    htmlspecialchars(\n                        'MySQL error (' . $errno . '): ' . str_replace(\"\\n,\", '<br />', $error),\n                        ENT_QUOTES | ENT_HTML5\n                    )\n                    . '</body></html>'\n                );\n            }\n            die('<html><body>A database command could not be performed</body></html>');\n        }\n    } else {\n        // CLI script, simple text output\n        if ($opt['db']['error']['display'] === true) {\n            die('MySQL error (' . $errno . '): ' . $error . \"\\n\");\n        }\n        die(\"A database command could not be performed.\\n\");\n    }\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $warnmessage\n */\nfunction sql_warn($warnmessage): void\n{\n    global $opt;\n\n    if ($opt['db']['error']['mail'] != '') {\n        $subject = '[' . $opt['page']['domain'] . '] SQL error';\n        if (admin_errormail(\n            $opt['db']['error']['mail'],\n            $subject,\n            $warnmessage . \"\\n\" . print_r(debug_backtrace(), true),\n            'From: ' . $opt['mail']['from']\n        )) {\n            require_once __DIR__ . '/../lib2/mail.class.php';\n            $mail = new mail();\n            $mail->name = 'sql_warn';\n            $mail->subject = $subject;\n            $mail->to = $opt['db']['warn']['mail'];\n\n            $mail->assign('warnmessage', $warnmessage);\n            $mail->assign('trace', print_r(debug_backtrace(), true));\n\n            $mail->send();\n            $mail = null;\n        }\n    }\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $f\n * @param resource $rs\n * @param $table\n * @param bool $truncate\n */\nfunction sql_export_recordset($f, $rs, $table, $truncate = true): void\n{\n    fwrite($f, \"SET NAMES 'utf8';\\n\");\n\n    if ($truncate == true) {\n        fwrite($f, 'TRUNCATE TABLE `' . sql_escape($table) . \"`;\\n\");\n    }\n\n    while ($r = sql_fetch_assoc($rs)) {\n        $fields = [];\n        $values = [];\n\n        foreach ($r as $k => $v) {\n            $fields[] = '`' . sql_escape($k) . '`';\n            if ($v === null) {\n                $values[] = 'NULL';\n            } else {\n                $values[] = \"'\" . sql_escape($v) . \"'\";\n            }\n        }\n        unset($r);\n\n        fwrite(\n            $f,\n            'INSERT INTO `' . sql_escape($table) . '` (' . implode(', ', $fields) . ')'\n            . ' VALUES (' . implode(', ', $values) . \");\\n\"\n        );\n    }\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param resource $f\n * @param $table\n */\nfunction sql_export_table($f, $table): void\n{\n    $primary = [];\n    $rsIndex = sql('SHOW INDEX FROM `&1`', $table);\n    while ($r = sql_fetch_assoc($rsIndex)) {\n        if ($r['Key_name'] == 'PRIMARY') {\n            $primary[] = '`' . sql_escape($r['Column_name']) . '` ASC';\n        }\n    }\n    sql_free_result($rsIndex);\n\n    $sql = 'SELECT * FROM `' . sql_escape($table) . '`';\n    if (count($primary) > 0) {\n        $sql .= ' ORDER BY ' . implode(', ', $primary);\n    }\n\n    $rs = sql($sql);\n    sql_export_recordset($f, $rs, $table);\n    sql_free_result($rs);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $filename\n * @param string[] $tables\n */\nfunction sql_export_tables_to_file($filename, $tables): void\n{\n    $f = fopen($filename, 'w');\n\n    fwrite($f, \"-- Content of tables:\\n\");\n\n    foreach ($tables as $t) {\n        fwrite($f, \"-- $t\\n\");\n    }\n    fwrite($f, \"\\n\");\n\n    foreach ($tables as $t) {\n        fwrite($f, \"-- Table $t\\n\");\n        sql_export_table($f, $t);\n        fwrite($f, \"\\n\");\n    }\n\n    fclose($f);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $filename\n * @param $table\n */\nfunction sql_export_table_to_file($filename, $table): void\n{\n    $f = fopen($filename, 'w');\n    sql_export_table($f, $table);\n    fclose($f);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param resource $f\n * @param $table\n */\nfunction sql_export_structure($f, $table): void\n{\n    $rs = sql('SHOW CREATE TABLE `&1`', $table);\n    $r = sql_fetch_array($rs);\n    sql_free_result($rs);\n\n    $sTableSql = $r[1];\n    $sTableSql = preg_replace('/ AUTO_INCREMENT=[0-9]{1,} /', ' ', $sTableSql);\n    $sTableSql = preg_replace(\"/,\\n +?(KEY )?`okapi_syncbase`.+?(,)?\\n/\", \"\\\\2\\n\", $sTableSql);\n\n    fwrite($f, \"SET NAMES 'utf8';\\n\");\n    fwrite($f, 'DROP TABLE IF EXISTS `' . sql_escape($table) . \"`;\\n\");\n    fwrite($f, $sTableSql . \" ;\\n\");\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $filename\n * @param $table\n */\nfunction sql_export_structure_to_file($filename, $table): void\n{\n    $f = fopen($filename, 'w');\n    sql_export_structure($f, $table);\n    fclose($f);\n}\n\n// test if a database table exists\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $table\n * @return bool\n */\nfunction sql_table_exists($table)\n{\n    global $opt;\n\n    return sql_value(\n            \"SELECT COUNT(*)\n         FROM `information_schema`.`tables`\n         WHERE `table_schema`='&1' AND `table_name`='&2'\",\n            0,\n            $opt['db']['placeholder']['db'],\n            $table\n        ) > 0;\n}\n\n// test if a database field exists\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $table\n * @param $field\n * @return bool\n */\nfunction sql_field_exists($table, $field)\n{\n    global $opt;\n\n    return sql_value(\n            \"SELECT COUNT(*)\n         FROM `information_schema`.`columns`\n         WHERE `table_schema`='&1' AND `table_name`='&2' AND `column_name`='&3'\",\n            0,\n            $opt['db']['placeholder']['db'],\n            $table,\n            $field\n        ) > 0;\n}\n\n// get type of a database field\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $table\n * @param $field\n * @return string\n */\nfunction sql_field_type($table, $field)\n{\n    global $opt;\n\n    return strtoupper(\n        sql_value(\n            \"SELECT `data_type`\n             FROM `information_schema`.`columns`\n             WHERE `table_schema`='&1' AND `table_name`='&2' AND `column_name`='&3'\",\n            '',\n            $opt['db']['placeholder']['db'],\n            $table,\n            $field\n        )\n    );\n}\n\n// test if a database index exists\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $table\n * @param $index\n * @return bool\n */\nfunction sql_index_exists($table, $index)\n{\n    global $opt;\n\n    return sql_value(\n            \"SELECT COUNT(*)\n         FROM `information_schema`.`statistics`\n         WHERE `table_schema`='&1' AND `table_name`='&2' AND `index_name`='&3'\",\n            0,\n            $opt['db']['placeholder']['db'],\n            $table,\n            $index\n        ) > 0;\n}\n\n// test if a function or procedure exists\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param string $type\n * @param $name\n * @return bool\n */\nfunction sql_fp_exists($type, $name)\n{\n    global $opt;\n\n    $rs = sql(\"SHOW $type STATUS LIKE '&1'\", $name);\n    $r = sql_fetch_assoc($rs);\n    sql_free_result($rs);\n\n    return ($r &&\n        $r['Db'] == $opt['db']['placeholder']['db'] &&\n        $r['Name'] == $name &&\n        $r['Type'] == $type);\n}\n\n// test if a function exists\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $name\n * @return bool\n */\nfunction sql_function_exists($name)\n{\n    return sql_fp_exists('FUNCTION', $name);\n}\n\n// delete a function\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $name\n */\nfunction sql_dropFunction($name): void\n{\n    sql('DROP FUNCTION IF EXISTS `&1`', $name);\n}\n\n// test if a procedure exists\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $name\n * @return bool\n */\nfunction sql_procedure_exists($name)\n{\n    return sql_fp_exists('PROCEDURE', $name);\n}\n\n// delete a procedure\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $name\n */\nfunction sql_dropProcedure($name): void\n{\n    sql('DROP PROCEDURE IF EXISTS `&1`', $name);\n}\n\n/**\n * @deprecated use DBAL Conenction instead. See adminreports.php for an example implementation\n * @param $triggername\n */\nfunction sql_dropTrigger($triggername): void\n{\n    $rs = sql('SHOW TRIGGERS');\n    while ($r = sql_fetch_assoc($rs)) {\n        if ($r['Trigger'] == $triggername) {\n            sql('DROP TRIGGER `&1`', $triggername);\n\n            return;\n        }\n    }\n    sql_free_result($rs);\n}\n"], "filenames": ["htdocs/editcache.php", "htdocs/lang/de/ocstyle/varset.inc.php", "htdocs/lib/clicompatbase.inc.php", "htdocs/lib2/db.inc.php"], "buggy_code_start_loc": [126, 52, 509, 570], "buggy_code_end_loc": [127, 53, 510, 571], "fixing_code_start_loc": [126, 52, 509, 570], "fixing_code_end_loc": [127, 53, 510, 571], "type": "CWE-79", "message": "A vulnerability, which was classified as problematic, was found in Opencaching Deutschland oc-server3. Affected is an unknown function of the file htdocs/lang/de/ocstyle/varset.inc.php. The manipulation of the argument varvalue leads to cross site scripting. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. The name of the patch is 4bdd6a0e7b7760cea03b91812cbb80d7b16e3b5f. It is recommended to apply a patch to fix this issue. VDB-215886 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-4514", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-15T20:15:10.133", "lastModified": "2022-12-20T21:13:31.100", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, was found in Opencaching Deutschland oc-server3. Affected is an unknown function of the file htdocs/lang/de/ocstyle/varset.inc.php. The manipulation of the argument varvalue leads to cross site scripting. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. The name of the patch is 4bdd6a0e7b7760cea03b91812cbb80d7b16e3b5f. It is recommended to apply a patch to fix this issue. VDB-215886 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-707"}, {"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opencaching:oc-server3:-:*:*:*:*:*:*:*", "matchCriteriaId": "24456001-1127-4311-90AF-3C6FAA831F4B"}]}]}], "references": [{"url": "https://github.com/OpencachingDeutschland/oc-server3/commit/4bdd6a0e7b7760cea03b91812cbb80d7b16e3b5f", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/OpencachingDeutschland/oc-server3/pull/902", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.215886", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/OpencachingDeutschland/oc-server3/commit/4bdd6a0e7b7760cea03b91812cbb80d7b16e3b5f"}}