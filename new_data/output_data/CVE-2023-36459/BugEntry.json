{"buggy_code": ["# frozen_string_literal: true\n\nclass REST::PreviewCardSerializer < ActiveModel::Serializer\n  include RoutingHelper\n\n  attributes :url, :title, :description, :language, :type,\n             :author_name, :author_url, :provider_name,\n             :provider_url, :html, :width, :height,\n             :image, :embed_url, :blurhash\n\n  def image\n    object.image? ? full_asset_url(object.image.url(:original)) : nil\n  end\nend\n", "# frozen_string_literal: true\n\nclass Sanitize\n  module Config\n    HTTP_PROTOCOLS = %w(\n      http\n      https\n    ).freeze\n\n    LINK_PROTOCOLS = %w(\n      http\n      https\n      dat\n      dweb\n      ipfs\n      ipns\n      ssb\n      gopher\n      xmpp\n      magnet\n      gemini\n    ).freeze\n\n    CLASS_WHITELIST_TRANSFORMER = lambda do |env|\n      node = env[:node]\n      class_list = node['class']&.split(/[\\t\\n\\f\\r ]/)\n\n      return unless class_list\n\n      class_list.keep_if do |e|\n        next true if /^(h|p|u|dt|e)-/.match?(e) # microformats classes\n        next true if /^(mention|hashtag)$/.match?(e) # semantic classes\n        next true if /^(ellipsis|invisible)$/.match?(e) # link formatting classes\n      end\n\n      node['class'] = class_list.join(' ')\n    end\n\n    TRANSLATE_TRANSFORMER = lambda do |env|\n      node = env[:node]\n      node.remove_attribute('translate') unless node['translate'] == 'no'\n    end\n\n    UNSUPPORTED_HREF_TRANSFORMER = lambda do |env|\n      return unless env[:node_name] == 'a'\n\n      current_node = env[:node]\n\n      scheme = if current_node['href'] =~ Sanitize::REGEX_PROTOCOL\n                 Regexp.last_match(1).downcase\n               else\n                 :relative\n               end\n\n      current_node.replace(Nokogiri::XML::Text.new(current_node.text, current_node.document)) unless LINK_PROTOCOLS.include?(scheme)\n    end\n\n    UNSUPPORTED_ELEMENTS_TRANSFORMER = lambda do |env|\n      return unless %w(h1 h2 h3 h4 h5 h6).include?(env[:node_name])\n\n      current_node = env[:node]\n\n      current_node.name = 'strong'\n      current_node.wrap('<p></p>')\n    end\n\n    MASTODON_STRICT ||= freeze_config(\n      elements: %w(p br span a del pre blockquote code b strong u i em ul ol li),\n\n      attributes: {\n        'a' => %w(href rel class translate),\n        'span' => %w(class translate),\n        'ol' => %w(start reversed),\n        'li' => %w(value),\n      },\n\n      add_attributes: {\n        'a' => {\n          'rel' => 'nofollow noopener noreferrer',\n          'target' => '_blank',\n        },\n      },\n\n      protocols: {},\n\n      transformers: [\n        CLASS_WHITELIST_TRANSFORMER,\n        TRANSLATE_TRANSFORMER,\n        UNSUPPORTED_ELEMENTS_TRANSFORMER,\n        UNSUPPORTED_HREF_TRANSFORMER,\n      ]\n    )\n\n    MASTODON_OEMBED ||= freeze_config merge(\n      RELAXED,\n      elements: RELAXED[:elements] + %w(audio embed iframe source video),\n\n      attributes: merge(\n        RELAXED[:attributes],\n        'audio' => %w(controls),\n        'embed' => %w(height src type width),\n        'iframe' => %w(allowfullscreen frameborder height scrolling src width),\n        'source' => %w(src type),\n        'video' => %w(controls height loop width),\n        'div' => [:data]\n      ),\n\n      protocols: merge(\n        RELAXED[:protocols],\n        'embed' => { 'src' => HTTP_PROTOCOLS },\n        'iframe' => { 'src' => HTTP_PROTOCOLS },\n        'source' => { 'src' => HTTP_PROTOCOLS }\n      )\n    )\n  end\nend\n"], "fixing_code": ["# frozen_string_literal: true\n\nclass REST::PreviewCardSerializer < ActiveModel::Serializer\n  include RoutingHelper\n\n  attributes :url, :title, :description, :language, :type,\n             :author_name, :author_url, :provider_name,\n             :provider_url, :html, :width, :height,\n             :image, :embed_url, :blurhash\n\n  def image\n    object.image? ? full_asset_url(object.image.url(:original)) : nil\n  end\n\n  def html\n    Sanitize.fragment(object.html, Sanitize::Config::MASTODON_OEMBED)\n  end\nend\n", "# frozen_string_literal: true\n\nclass Sanitize\n  module Config\n    HTTP_PROTOCOLS = %w(\n      http\n      https\n    ).freeze\n\n    LINK_PROTOCOLS = %w(\n      http\n      https\n      dat\n      dweb\n      ipfs\n      ipns\n      ssb\n      gopher\n      xmpp\n      magnet\n      gemini\n    ).freeze\n\n    CLASS_WHITELIST_TRANSFORMER = lambda do |env|\n      node = env[:node]\n      class_list = node['class']&.split(/[\\t\\n\\f\\r ]/)\n\n      return unless class_list\n\n      class_list.keep_if do |e|\n        next true if /^(h|p|u|dt|e)-/.match?(e) # microformats classes\n        next true if /^(mention|hashtag)$/.match?(e) # semantic classes\n        next true if /^(ellipsis|invisible)$/.match?(e) # link formatting classes\n      end\n\n      node['class'] = class_list.join(' ')\n    end\n\n    TRANSLATE_TRANSFORMER = lambda do |env|\n      node = env[:node]\n      node.remove_attribute('translate') unless node['translate'] == 'no'\n    end\n\n    UNSUPPORTED_HREF_TRANSFORMER = lambda do |env|\n      return unless env[:node_name] == 'a'\n\n      current_node = env[:node]\n\n      scheme = if current_node['href'] =~ Sanitize::REGEX_PROTOCOL\n                 Regexp.last_match(1).downcase\n               else\n                 :relative\n               end\n\n      current_node.replace(Nokogiri::XML::Text.new(current_node.text, current_node.document)) unless LINK_PROTOCOLS.include?(scheme)\n    end\n\n    UNSUPPORTED_ELEMENTS_TRANSFORMER = lambda do |env|\n      return unless %w(h1 h2 h3 h4 h5 h6).include?(env[:node_name])\n\n      current_node = env[:node]\n\n      current_node.name = 'strong'\n      current_node.wrap('<p></p>')\n    end\n\n    MASTODON_STRICT ||= freeze_config(\n      elements: %w(p br span a del pre blockquote code b strong u i em ul ol li),\n\n      attributes: {\n        'a' => %w(href rel class translate),\n        'span' => %w(class translate),\n        'ol' => %w(start reversed),\n        'li' => %w(value),\n      },\n\n      add_attributes: {\n        'a' => {\n          'rel' => 'nofollow noopener noreferrer',\n          'target' => '_blank',\n        },\n      },\n\n      protocols: {},\n\n      transformers: [\n        CLASS_WHITELIST_TRANSFORMER,\n        TRANSLATE_TRANSFORMER,\n        UNSUPPORTED_ELEMENTS_TRANSFORMER,\n        UNSUPPORTED_HREF_TRANSFORMER,\n      ]\n    )\n\n    MASTODON_OEMBED ||= freeze_config(\n      elements: %w(audio embed iframe source video),\n\n      attributes: {\n        'audio' => %w(controls),\n        'embed' => %w(height src type width),\n        'iframe' => %w(allowfullscreen frameborder height scrolling src width),\n        'source' => %w(src type),\n        'video' => %w(controls height loop width),\n      },\n\n      protocols: {\n        'embed' => { 'src' => HTTP_PROTOCOLS },\n        'iframe' => { 'src' => HTTP_PROTOCOLS },\n        'source' => { 'src' => HTTP_PROTOCOLS },\n      },\n\n      add_attributes: {\n        'iframe' => { 'sandbox' => 'allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox allow-forms' },\n      }\n    )\n  end\nend\n"], "filenames": ["app/serializers/rest/preview_card_serializer.rb", "lib/sanitize_ext/sanitize_config.rb"], "buggy_code_start_loc": [13, 94], "buggy_code_end_loc": [13, 114], "fixing_code_start_loc": [14, 94], "fixing_code_end_loc": [18, 114], "type": "CWE-79", "message": "Mastodon is a free, open-source social network server based on ActivityPub. Starting in version 1.3 and prior to versions 3.5.9, 4.0.5, and 4.1.3, an attacker using carefully crafted oEmbed data can bypass the HTML sanitization performed by Mastodon and include arbitrary HTML in oEmbed preview cards. This introduces a vector for cross-site scripting (XSS) payloads that can be rendered in the user's browser when a preview card for a malicious link is clicked through. Versions 3.5.9, 4.0.5, and 4.1.3 contain a patch for this issue.", "other": {"cve": {"id": "CVE-2023-36459", "sourceIdentifier": "security-advisories@github.com", "published": "2023-07-06T19:15:10.727", "lastModified": "2023-07-14T19:33:36.027", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Mastodon is a free, open-source social network server based on ActivityPub. Starting in version 1.3 and prior to versions 3.5.9, 4.0.5, and 4.1.3, an attacker using carefully crafted oEmbed data can bypass the HTML sanitization performed by Mastodon and include arbitrary HTML in oEmbed preview cards. This introduces a vector for cross-site scripting (XSS) payloads that can be rendered in the user's browser when a preview card for a malicious link is clicked through. Versions 3.5.9, 4.0.5, and 4.1.3 contain a patch for this issue."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.3, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.8, "impactScore": 5.8}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:joinmastodon:mastodon:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.3", "versionEndExcluding": "3.5.9", "matchCriteriaId": "B812C873-88F0-4897-B42C-A67FA6EBB394"}, {"vulnerable": true, "criteria": "cpe:2.3:a:joinmastodon:mastodon:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.0.0", "versionEndExcluding": "4.0.5", "matchCriteriaId": "51150E6A-F99E-4905-A464-2BAC2B1C36C3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:joinmastodon:mastodon:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.1.0", "versionEndExcluding": "4.1.3", "matchCriteriaId": "8AB4CC5C-A9AE-4CD1-8912-B570E2F6E170"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2023/07/06/5", "source": "security-advisories@github.com", "tags": ["Mailing List"]}, {"url": "https://github.com/mastodon/mastodon/commit/6d8e0fae3e96f3cf4febe03fa7fcf5b95ff761b2", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/mastodon/mastodon/releases/tag/v3.5.9", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/mastodon/mastodon/releases/tag/v4.0.5", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/mastodon/mastodon/releases/tag/v4.1.3", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/mastodon/mastodon/security/advisories/GHSA-ccm4-vgcc-73hp", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/mastodon/mastodon/commit/6d8e0fae3e96f3cf4febe03fa7fcf5b95ff761b2"}}