{"buggy_code": ["#encoding=utf-8\n# test for flask\n\nimport MySQLdb\nimport time\nfrom flask import Flask\nfrom flask import render_template\nfrom flask import request, jsonify\n\n\nCOLOR_CHART = [\"#F7464A\",\"#46BFBD\",\"#FDB45C\",\"#949FB1\",\"#C7604C\",\\\n\t\t\t\t\"#4D5360\",\"#7D4F6D\",\"#9D9B7F\",\"#21323D\",\"#1874CD\",\\\n\t\t\t\t\"#218868\",\"#8E8E38\"]\nconn=MySQLdb.connect(host=\"localhost\",user=\"root\",passwd=\"\",db=\"db_vote_web\",charset=\"utf8\")\napp = Flask(__name__)\n\n\ndef parse_req():\n\ttitle = request.form[\"title\"]\n\tn = len(request.form)-1\n\tl_dsc = []\n\tfor i in range(1,n):\n\t\tl_dsc.append(request.form[\"opt\"+str(i)])\n\treturn title, n-1, l_dsc\n\n@app.route('/')\ndef hello_world():\n    return render_template(\"index.html\")\n\n@app.route('/error')\ndef error():\n    return render_template(\"error.html\")\n\n@app.route('/create', methods=['POST'])\ndef create_poll():\n\ttry:\n\t\tcursor = conn.cursor()  \n\t\tuid = request.remote_addr\n\t\timport pdb\n\t\tpdb.set_trace()\n\t\tvid = str(int(time.time()*100))\n\t\ttitle, optn, l_dsc = parse_req()\n\t\toptdsc = '|'.join(l_dsc)\n\t\toptnum = '|'.join(['0']*optn)\n\t\tsql = \"insert into t_vote_info(FUid, FVoteId, FTitle, FOptionNum, \\\n\t\t\t\tFOptionDesc, FOptionVoteNum, FState, FCreateTime, FEndTime) \\\n\t\t\t\tvalues(\\\"%s\\\",\\\"%s\\\",\\\"%s\\\",%d,\\\"%s\\\",\\\"%s\\\",0,now(),now()+interval 1 day);\" \n\t\tparam = (uid, vid, title, optn, optdsc, optnum) \n\t\tres = cursor.execute(sql%param)\n\t\tconn.commit()\n\t\tcursor.close()\n\texcept Exception,e:\n\t\treturn jsonify({\"return_code\":21, \"return_msg\":str(e), \"p_id\":0})\n\treturn jsonify({\"p_id\":vid})\n\n@app.route('/poll', methods=['POST','GET'])\ndef do_poll():\n\tif \"p_id\" in request.args:\n\t\tp_id = request.args['p_id']\n\t\tcursor = conn.cursor()\n\t\tsql_s = \"select FTitle, FOptionDesc from t_vote_info where FVoteId=%s;\"%p_id\n\t\tres = cursor.execute(sql_s)\n\t\tr = cursor.fetchone()\n\t\tcursor.close()\n\t\ttitle = r[0]\n\t\topts_desc = r[1].split('|')\n\t\treturn render_template(\"poll.html\", title=title, opts=opts_desc)\n\n\tif \"p_id\" not in request.form:\n\t\treturn render_template(\"poll.html\")\n\tif \"opt_idx\" not in request.form:\n\t\treturn render_template(\"poll.html\")\n\n\to_id = int(request.form['opt_idx'])-1\n\tp_id = request.form['p_id']\n\ttry:\n\t\tcursor = conn.cursor()\n\t\tsql_s = \"select FOptionVoteNum from t_vote_info where FVoteId=%s;\"%p_id\n\t\tres = cursor.execute(sql_s)\n\t\topt_pre = cursor.fetchone()[0].split('|')\n\t\topt_pre[o_id] = str(int(opt_pre[o_id])+1)\n\t\topt_new = '|'.join(opt_pre)\n\t\tsql_u = \"update t_vote_info set FOptionVoteNum=\\\"%s\\\" where FVoteId=\\\"%s\\\";\"%(opt_new,p_id)\n\t\tres = cursor.execute(sql_u)\n\t\tconn.commit()\n\t\tcursor.close()\n\texcept Exception,e:\n\t\tcursor.close()\n\t\treturn jsonify({\"result_code\":\"-1\", \"result_msg\":\"error\", \"p_id\":0})\n\treturn jsonify({\"result_code\":\"0\", \"result_msg\":\"success\", \"p_id\":p_id})\n\n@app.route('/show')\ndef show_poll():\n\ttitle = \"error\"\n\tif \"p_id\" not in request.args:\n\t\treturn render_template(\"show.html\", title=title)\n\tp_id = request.args['p_id']\n\trows = []\n\ttry:\n\t\tcursor = conn.cursor()\n\t\tsql_s = \"select FTitle,FOptionDesc,FOptionVoteNum,FState,FEndTime from t_vote_info where FVoteId=%s;\"%p_id\n\t\tres = cursor.execute(sql_s)\n\t\tr = cursor.fetchone()\n\t\tcursor.close()\n\t\ttitle = r[0]\n\t\topts_desc = r[1].split('|')\n\t\topts_num = r[2].split('|')\n\t\topts_col = COLOR_CHART[:len(opts_desc)]\n\t\tfor i in range(len(opts_desc)):\n\t\t\trows.append([opts_desc[i], opts_num[i], opts_col[i]])\n\texcept Exception,e:\n\t\treturn render_template(\"show.html\", title=title)\n\t#poll_id = request.args['p_id']\n\treturn render_template(\"show.html\", title=title, opts=rows)\n\n@app.route('/refresh', methods=['POST'])\ndef show_refresh():\n\tif \"p_id\" not in request.form:\n\t\treturn jsonify({\"result_code\":\"-1\", \"result_msg\":\"refresh error\"})\n\tp_id = request.form['p_id']\n\trows = []\n\ttry:\n\t\tcursor = conn.cursor()\n\t\tsql_s = \"select FTitle,FOptionDesc,FOptionVoteNum,FState,FEndTime from t_vote_info where FVoteId=%s;\"%p_id\n\t\tres = cursor.execute(sql_s)\n\t\tr = cursor.fetchone()\n\t\tcursor.close()\n\t\ttitle = r[0]\n\t\topts_desc = r[1].split('|')\n\t\topts_num = r[2].split('|')\n\t\topts_col = COLOR_CHART[:len(opts_desc)]\n\t\tfor i in range(len(opts_desc)):\n\t\t\trows.append({\"label\":opts_desc[i], \"value\":int(opts_num[i]), \"color\":opts_col[i]})\n\t\treturn jsonify({\"result_code\":\"0\", \"result_msg\":\"success\", \"rows\":rows})\n\texcept Exception,e:\n\t\treturn jsonify({\"result_code\":\"-1\", \"result_msg\":\"refresh error\"})\n\n\nif __name__ == '__main__':\n    app.debug = True\n    app.run()\n    conn.close()\n\n", "<!DOCTYPE html>\n<html>\n    <head>\n        <title></title>\n        <link rel=\"stylesheet\" href=\"static/uikit/css/uikit.min.css\" />\n        <script src=\"static/uikit/js/jquery-1.11.1.min.js\"></script>\n        <script src=\"static/uikit/js/uikit.min.js\"></script>\n        <script src=\"static/uikit/js/Chart.min.js\"></script>\n    </head>\n    <body>\n    <div class=\"uk-width-large-1-1 uk-container uk-container-center\">\n        <div class=\"uk-width-large-1-1 uk-margin-large-top\"> </div>\n    <form class=\"uk-form\">\n        <legend> <h1 class=\"uk-text-primary\">  {{ title }} </h1> </legend>\n        <div>\n            <canvas id=\"myChart\" width=\"400\" height=\"400\"></canvas>\n        </div>\n    </form>\n\n    <script>\n$(document).ready(function(){\n    var ctx = $(\"#myChart\").get(0).getContext(\"2d\");    \n    var data = [\n    {% for item in opts %}\n        {label: \"{{ item[0] }}\", value: {{ item[1] }}, color:\"{{ item[2] }}\"},\n    {% endfor %}\n    ];\n    var myPieChart = new Chart(ctx).Pie(data,{animationSteps: 60});\n    \n    function diff_rows(old_, new_){\n        n_o = old_.length;\n        n_n = new_.length;\n        if(n_o != n_n)\n            return 1;\n        for (var i = n_o - 1; i >= 0; i--) {\n            for (var j = n_n - 1; j >= 0; j--) {\n                if(old_[i].color != new_[j].color)\n                    continue;\n                if(old_[i].value != new_[j].value)\n                    return 1;\n            };\n        };\n        return 0;\n    };\n\n    timeout = [3,4,6,9,14,22,35,56,90,145];\n    idx_timeout = 0;\n    function refresh(myChart){\n        var p_id = location.search.substring(1).split('=')[1];\n        var p_ajax = {\n            type: \"POST\",\n            dataType: \"json\",\n            url: \"/refresh\",\n            data: {\"p_id\":p_id},\n            ret: 0,\n            success: function(d){\n                rows = d.rows;\n                if (diff_rows(data, rows) == 1){\n                    data = rows;\n                    myChart.destroy();\n                    myPieChart = new Chart(ctx).Pie(data,{animation: false});\n                    this.ret = 1;\n                }\n                this.ret = 0;\n            },\n            error: function(e,b,c){\n                alert(\"ajax error function.\");\n            },\n            complete: function(){\n                if (this.ret != 0) idx_timeout=0; else idx_timeout++;\n                if (idx_timeout >= timeout.length) return;\n                setTimeout(refresh, timeout[idx_timeout]*1000);\n            }\n        };\n        $.ajax(p_ajax);\n    };\n\n    setTimeout(refresh, 3000);\n});\n    </script>\n    </div>\n    </body>\n</html>\n"], "fixing_code": ["#encoding=utf-8\n# test for flask\n\nimport MySQLdb\nimport time\nfrom flask import Flask\nfrom flask import render_template\nfrom flask import request, jsonify\n\n\nCOLOR_CHART = [\"#F7464A\",\"#46BFBD\",\"#FDB45C\",\"#949FB1\",\"#C7604C\",\\\n\t\t\t\t\"#4D5360\",\"#7D4F6D\",\"#9D9B7F\",\"#21323D\",\"#1874CD\",\\\n\t\t\t\t\"#218868\",\"#8E8E38\"]\nconn=MySQLdb.connect(host=\"localhost\",user=\"root\",passwd=\"\",db=\"db_vote_web\",charset=\"utf8\")\napp = Flask(__name__)\n\n\ndef parse_req():\n\ttitle = request.form[\"title\"]\n\tn = len(request.form)-1\n\tl_dsc = []\n\tfor i in range(1,n):\n\t\tl_dsc.append(request.form[\"opt\"+str(i)])\n\treturn title, n-1, l_dsc\n\n@app.route('/')\ndef hello_world():\n    return render_template(\"index.html\")\n\n@app.route('/error')\ndef error():\n    return render_template(\"error.html\")\n\n@app.route('/create', methods=['POST'])\ndef create_poll():\n\ttry:\n\t\tcursor = conn.cursor()  \n\t\tuid = request.remote_addr\n\t\tvid = str(int(time.time()*100))\n\t\ttitle, optn, l_dsc = parse_req()\n\t\toptdsc = '|'.join(l_dsc)\n\t\toptnum = '|'.join(['0']*optn)\n\t\tsql = \"insert into t_vote_info(FUid, FVoteId, FTitle, FOptionNum, \\\n\t\t\t\tFOptionDesc, FOptionVoteNum, FState, FCreateTime, FEndTime) \\\n\t\t\t\tvalues(%s,%s,%s,%s,%s,%s,0,now(),now()+interval 1 day);\" \n\t\tparam = (uid, vid, title, optn, optdsc, optnum) \n\t\tres = cursor.execute(sql, param)\n\t\tconn.commit()\n\t\tcursor.close()\n\texcept Exception,e:\n\t\treturn jsonify({\"return_code\":21, \"return_msg\":str(e), \"p_id\":0})\n\treturn jsonify({\"p_id\":vid})\n\n@app.route('/poll', methods=['POST','GET'])\ndef do_poll():\n\tif \"p_id\" in request.args:\n\t\tp_id = request.args['p_id']\n\t\tcursor = conn.cursor()\n\t\tsql_s = \"select FTitle, FOptionDesc from t_vote_info where FVoteId=%s;\"\n\t\tres = cursor.execute(sql_s, (p_id,))\n\t\tr = cursor.fetchone()\n\t\tcursor.close()\n\t\ttitle = r[0]\n\t\topts_desc = r[1].split('|')\n\t\treturn render_template(\"poll.html\", title=title, opts=opts_desc)\n\n\tif \"p_id\" not in request.form:\n\t\treturn render_template(\"poll.html\")\n\tif \"opt_idx\" not in request.form:\n\t\treturn render_template(\"poll.html\")\n\n\to_id = int(request.form['opt_idx'])-1\n\tp_id = request.form['p_id']\n\ttry:\n\t\tcursor = conn.cursor()\n\t\tsql_s = \"select FOptionVoteNum from t_vote_info where FVoteId=%s;\"\n\t\tres = cursor.execute(sql_s, (p_id,))\n\t\topt_pre = cursor.fetchone()[0].split('|')\n\t\topt_pre[o_id] = str(int(opt_pre[o_id])+1)\n\t\topt_new = '|'.join(opt_pre)\n\t\tsql_u = \"update t_vote_info set FOptionVoteNum=%s where FVoteId=%s;\"\n\t\tres = cursor.execute(sql_u, (opt_new,p_id))\n\t\tconn.commit()\n\t\tcursor.close()\n\texcept Exception,e:\n\t\tcursor.close()\n\t\treturn jsonify({\"result_code\":\"-1\", \"result_msg\":\"error\", \"p_id\":0})\n\treturn jsonify({\"result_code\":\"0\", \"result_msg\":\"success\", \"p_id\":p_id})\n\n@app.route('/show')\ndef show_poll():\n\ttitle = \"error\"\n\tif \"p_id\" not in request.args:\n\t\treturn render_template(\"show.html\", title=title)\n\tp_id = request.args['p_id']\n\trows = []\n\ttry:\n\t\tcursor = conn.cursor()\n\t\tsql_s = \"select FTitle,FOptionDesc,FOptionVoteNum,FState,FEndTime from t_vote_info where FVoteId=%s;\"\n\t\tres = cursor.execute(sql_s, (p_id,))\n\t\tr = cursor.fetchone()\n\t\tcursor.close()\n\t\ttitle = r[0]\n\t\topts_desc = r[1].split('|')\n\t\topts_num = r[2].split('|')\n\t\topts_col = COLOR_CHART[:len(opts_desc)]\n\t\tfor i in range(len(opts_desc)):\n\t\t\trows.append([opts_desc[i], opts_num[i], opts_col[i]])\n\texcept Exception,e:\n\t\treturn render_template(\"show.html\", title=title)\n\t#poll_id = request.args['p_id']\n\treturn render_template(\"show.html\", title=title, opts=rows)\n\n@app.route('/refresh', methods=['POST'])\ndef show_refresh():\n\tif \"p_id\" not in request.form:\n\t\treturn jsonify({\"result_code\":\"-1\", \"result_msg\":\"refresh error\"})\n\tp_id = request.form['p_id']\n\trows = []\n\ttry:\n\t\tcursor = conn.cursor()\n\t\tsql_s = \"select FTitle,FOptionDesc,FOptionVoteNum,FState,FEndTime from t_vote_info where FVoteId=%s;\"\n\t\tres = cursor.execute(sql_s, (p_id,))\n\t\tr = cursor.fetchone()\n\t\tcursor.close()\n\t\ttitle = r[0]\n\t\topts_desc = r[1].split('|')\n\t\topts_num = r[2].split('|')\n\t\topts_col = COLOR_CHART[:len(opts_desc)]\n\t\tfor i in range(len(opts_desc)):\n\t\t\trows.append({\"label\":opts_desc[i], \"value\":int(opts_num[i]), \"color\":opts_col[i]})\n\t\treturn jsonify({\"result_code\":\"0\", \"result_msg\":\"success\", \"rows\":rows})\n\texcept Exception,e:\n\t\treturn jsonify({\"result_code\":\"-1\", \"result_msg\":\"refresh error\"})\n\n\nif __name__ == '__main__':\n    app.debug = True\n    app.run()\n    conn.close()\n\n", "<!DOCTYPE html>\n<html>\n    <head>\n        <title></title>\n        <link rel=\"stylesheet\" href=\"static/uikit/css/uikit.min.css\" />\n        <script src=\"static/uikit/js/jquery-1.11.1.min.js\"></script>\n        <script src=\"static/uikit/js/uikit.min.js\"></script>\n        <script src=\"static/uikit/js/Chart.min.js\"></script>\n    </head>\n    <body>\n    <div class=\"uk-width-large-1-1 uk-container uk-container-center\">\n        <div class=\"uk-width-large-1-1 uk-margin-large-top\"> </div>\n    <form class=\"uk-form\">\n        <legend> <h1 class=\"uk-text-primary\">  {{ title }} </h1> </legend>\n        <div>\n            <canvas id=\"myChart\" width=\"400\" height=\"400\"></canvas>\n        </div>\n    </form>\n\n    <script>\n$(document).ready(function(){\n    var ctx = $(\"#myChart\").get(0).getContext(\"2d\");    \n    var data = [\n    {% for item in opts %}\n        {label: \"{{ item[0] }}\", value: {{ item[1] }}, color:\"{{ item[2] }}\"},\n    {% endfor %}\n    ];\n    var pie_chart = new Chart(ctx).Pie(data,{animationSteps: 60});\n    \n    function diff_rows(old_, new_){\n        n_o = old_.length;\n        n_n = new_.length;\n        if(n_o != n_n)\n            return 1;\n        for (var i = n_o - 1; i >= 0; i--) {\n            for (var j = n_n - 1; j >= 0; j--) {\n                if(old_[i].color != new_[j].color)\n                    continue;\n                if(old_[i].value != new_[j].value)\n                    return 1;\n            };\n        };\n        return 0;\n    };\n\n    timeout = [3,4,6,9,14,22,35,56,90,145];\n    idx_timeout = 0;\n    function refresh(){\n        var p_id = location.search.substring(1).split('=')[1];\n        var p_ajax = {\n            type: \"POST\",\n            dataType: \"json\",\n            url: \"/refresh\",\n            data: {\"p_id\":p_id},\n            ret: 0,\n            success: function(d){\n                rows = d.rows;\n                if (diff_rows(data, rows) == 1){\n                    data = rows;\n                    pie_chart.destroy();\n                    pie_chart = new Chart(ctx).Pie(data,{animation: false});\n                    this.ret = 1;\n                }\n                else\n                    this.ret = 0;\n            },\n            error: function(e,b,c){\n                alert(\"ajax error function.\");\n            },\n            complete: function(){\n                if (this.ret != 0) idx_timeout=0; else idx_timeout++;\n                if (idx_timeout >= timeout.length) return;\n                setTimeout(refresh, timeout[idx_timeout]*1000);\n            }\n        };\n        $.ajax(p_ajax);\n    };\n\n    setTimeout(refresh, 3000);\n});\n    </script>\n    </div>\n    </body>\n</html>\n"], "filenames": ["app.py", "templates/show.html"], "buggy_code_start_loc": [39, 28], "buggy_code_end_loc": [126, 65], "fixing_code_start_loc": [38, 28], "fixing_code_end_loc": [124, 66], "type": "CWE-89", "message": "A vulnerability was found in mapoor voteapp. It has been rated as critical. Affected by this issue is the function create_poll/do_poll/show_poll/show_refresh of the file app.py. The manipulation leads to sql injection. The name of the patch is b290c21a0d8bcdbd55db860afd3cadec97388e72. It is recommended to apply a patch to fix this issue. VDB-217790 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2014-125073", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-10T16:15:10.657", "lastModified": "2023-01-14T21:28:10.233", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in mapoor voteapp. It has been rated as critical. Affected by this issue is the function create_poll/do_poll/show_poll/show_refresh of the file app.py. The manipulation leads to sql injection. The name of the patch is b290c21a0d8bcdbd55db860afd3cadec97388e72. It is recommended to apply a patch to fix this issue. VDB-217790 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:voteapp_project:voteapp:*:*:*:*:*:*:*:*", "versionEndExcluding": "2014-12-30", "matchCriteriaId": "182EB143-B57B-4E00-8D49-0F2791E54600"}]}]}], "references": [{"url": "https://github.com/mapoor/voteapp/commit/b290c21a0d8bcdbd55db860afd3cadec97388e72", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217790", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217790", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/mapoor/voteapp/commit/b290c21a0d8bcdbd55db860afd3cadec97388e72"}}