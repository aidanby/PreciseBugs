{"buggy_code": ["import { DropdownButton } from '../../../../new-components/DropdownButton';\nimport { Analytics } from '../../../../features/Analytics';\nimport React, { useMemo } from 'react';\nimport { FaBook, FaEdit, FaFileImport, FaWrench } from 'react-icons/fa';\nimport { browserHistory, Link } from 'react-router';\n\nimport LeftSubSidebar from '../../../Common/Layout/LeftSubSidebar/LeftSubSidebar';\nimport styles from '../../../Common/Layout/LeftSubSidebar/LeftSubSidebar.module.scss';\nimport { isProConsole } from '../../../../utils';\nimport { Badge } from '../../../../new-components/Badge';\n\nconst LeftSidebar = ({\n  appPrefix,\n  common: { currentAction },\n  actions,\n  readOnlyMode,\n}) => {\n  const [searchText, setSearchText] = React.useState('');\n\n  const handleSearch = e => setSearchText(e.target.value);\n\n  const getSearchInput = () => {\n    return (\n      <div className=\"mr-2\">\n        <input\n          type=\"text\"\n          onChange={handleSearch}\n          className=\"form-control\"\n          placeholder=\"search actions\"\n          data-test=\"search-actions\"\n        />\n      </div>\n    );\n  };\n\n  const findIfSubStringExists = (originalString, subString) => {\n    return originalString.toLowerCase().includes(subString.toLocaleLowerCase());\n  };\n\n  const actionsList = useMemo(() => {\n    if (!searchText) return actions;\n\n    return actions.reduce((acc, action) => {\n      const idx = findIfSubStringExists(action.name, searchText);\n      if (idx === 0) return [action, ...acc];\n      if (idx > 0) return [...acc, action];\n      return acc;\n    }, []);\n  }, [searchText, actions]);\n\n  const getActionIcon = action => {\n    switch (action.definition.type) {\n      case 'mutation':\n        return <FaEdit className={styles.tableIcon} aria-hidden=\"true\" />;\n      case 'query':\n        return <FaBook className={styles.tableIcon} aria-hidden=\"true\" />;\n      default:\n        return <FaWrench className={styles.tableIcon} aria-hidden=\"true\" />;\n    }\n  };\n\n  const getChildList = () => {\n    let childList;\n    if (actionsList.length === 0) {\n      childList = (\n        <li\n          data-test=\"actions-sidebar-no-actions\"\n          className=\"italic font-normal pb-sm pt-xs text-gray-500\"\n        >\n          <i>No actions available</i>\n        </li>\n      );\n    } else {\n      childList = actionsList.map((a, i) => {\n        let activeTableClass = '';\n        if (a.name === currentAction) {\n          activeTableClass = '!text-yellow-500';\n        }\n\n        const actionIcon = getActionIcon(a);\n\n        return (\n          <li key={i} data-test={`action-sidebar-links-${i + 1}`}>\n            <Link\n              className={activeTableClass}\n              to={appPrefix + '/manage/' + a.name + '/modify'}\n              data-test={a.name}\n            >\n              {actionIcon}\n              {a.name}\n            </Link>\n          </li>\n        );\n      });\n    }\n\n    return childList;\n  };\n\n  return (\n    <LeftSubSidebar\n      showAddBtn={!readOnlyMode}\n      searchInput={getSearchInput()}\n      heading={`Actions (${actionsList.length})`}\n      addLink={`${appPrefix}/manage/add`}\n      addLabel={'Create'}\n      addTrackId=\"action-tab-button-add-actions-sidebar\"\n      addTestString={'actions-sidebar-add-table'}\n      childListTestString={'actions-table-links'}\n      addBtn={\n        isProConsole(window.__env) ? (\n          <div\n            className={`col-xs-4 text-center ${styles.padd_left_remove} ${styles.sidebarCreateTable}`}\n          >\n            <DropdownButton\n              className=\"relative -left-2\"\n              data-testid=\"dropdown-button\"\n              items={[\n                [\n                  <Analytics name=\"action-tab-button-add-actions-sidebar-with-form\">\n                    <div\n                      className=\"py-1 \"\n                      onClick={() => {\n                        browserHistory.push(`${appPrefix}/manage/add`);\n                      }}\n                    >\n                      <FaEdit className=\"relative -top-[1px]\" /> New Action\n                    </div>\n                  </Analytics>,\n                  <Analytics name=\"action-tab-button-add-actions-sidebar-openapi\">\n                    <div\n                      className=\"py-1 \"\n                      onClick={() => {\n                        browserHistory.push(`${appPrefix}/manage/add-oas`);\n                      }}\n                    >\n                      <FaFileImport className=\"relative -left-[2px] -top-[1px]\" />{' '}\n                      Import OpenAPI{' '}\n                      <Badge className=\"ml-1 font-xs\" color=\"purple\">\n                        New\n                      </Badge>\n                    </div>\n                  </Analytics>,\n                ],\n              ]}\n            >\n              Create\n            </DropdownButton>\n          </div>\n        ) : undefined\n      }\n    >\n      {getChildList()}\n    </LeftSubSidebar>\n  );\n};\n\nexport default LeftSidebar;\n", "import { Button } from '../../../../new-components/Button';\nimport { Analytics } from '../../../Analytics';\nimport clsx from 'clsx';\nimport React from 'react';\nimport { FaChevronDown, FaExternalLinkAlt } from 'react-icons/fa';\nimport { Operation } from './types';\n\nexport interface OasGeneratorActionsProps {\n  operation: Operation;\n  existing?: boolean;\n  onCreate: () => void;\n  onDelete: () => void;\n  disabled?: boolean;\n}\n\nexport const OasGeneratorActions: React.FC<\n  OasGeneratorActionsProps\n> = props => {\n  const { operation, existing, onCreate, onDelete, disabled } = props;\n  const [isExpanded, setExpanded] = React.useState(false);\n  return (\n    <div data-testid={`operation-${operation.operationId}`}>\n      <div className=\"flex justify-between cursor-pointer\">\n        <div className=\"max-w-[17vw] overflow-hidden truncate\">\n          {operation.path}\n        </div>\n        {existing ? (\n          <div className=\"flex items-center space-x-xs -my-2\">\n            <Analytics\n              name=\"action-tab-btn-import-openapi-delete-action\"\n              passHtmlAttributesToChildren\n            >\n              <Button\n                disabled={disabled}\n                size=\"sm\"\n                mode=\"destructive\"\n                onClick={onDelete}\n              >\n                Delete\n              </Button>\n            </Analytics>\n            <Analytics\n              name=\"action-tab-btn-import-openapi-modify-action\"\n              passHtmlAttributesToChildren\n            >\n              <Button\n                icon={<FaExternalLinkAlt />}\n                iconPosition=\"end\"\n                disabled={disabled}\n                size=\"sm\"\n                onClick={e => {\n                  window.open(\n                    `/actions/manage/${operation.operationId}/modify`,\n                    '_blank'\n                  );\n                }}\n              >\n                Modify\n              </Button>\n            </Analytics>\n          </div>\n        ) : (\n          <div className=\"flex items-center space-x-xs -my-2\">\n            <div onClick={() => setExpanded(!isExpanded)} className=\"mr-5\">\n              <span className=\"text-sm text-gray-500\">More info </span>\n              <FaChevronDown\n                className={clsx(\n                  isExpanded ? 'rotate-180' : '',\n                  'transition-all duration-300 ease-in-out w-3 h-3'\n                )}\n              />\n            </div>\n            <Analytics\n              name=\"action-tab-btn-import-openapi-create-action\"\n              passHtmlAttributesToChildren\n            >\n              <Button disabled={disabled} size=\"sm\" onClick={onCreate}>\n                Create\n              </Button>\n            </Analytics>\n          </div>\n        )}\n      </div>\n      <div\n        className={clsx(\n          'max-w-[28vw] whitespace-normal break-all',\n          isExpanded ? 'h-auto pt-4' : 'h-0 pt-0',\n          'overflow-hidden transition-all duration-300 ease-in-out'\n        )}\n      >\n        {operation.description.trim() ??\n          'No description available for this endpoint'}\n      </div>\n    </div>\n  );\n};\n", "import defaultState from '../components/Services/Events/EventTriggers/state';\nimport {\n  ColumnConfig,\n  CustomRootFields,\n  ActionDefinition,\n  CustomTypes,\n  QualifiedTable,\n  QualifiedTableBigQuery,\n  QualifiedFunction,\n  RestEndpointEntry,\n  RemoteSchemaDef,\n  RequestTransform,\n  HasuraMetadataV2,\n  HasuraMetadataV3,\n} from './types';\nimport { transformHeaders } from '../components/Common/Headers/utils';\nimport { LocalEventTriggerState } from '../components/Services/Events/EventTriggers/state';\nimport { LocalScheduledTriggerState } from '../components/Services/Events/CronTriggers/state';\nimport { RemoteRelationshipPayload } from '../components/Services/Data/TableRelationships/RemoteRelationships/utils';\nimport { Driver, currentDriver } from '../dataSources';\nimport { ConsoleState } from '../telemetry/state';\nimport { TriggerOperation } from '../components/Common/FilterQuery/state';\nimport { isEmpty } from '../components/Common/utils/jsUtils';\nimport { Nullable } from '../components/Common/utils/tsUtils';\nimport { getDataSourcePrefix } from './dataSource.utils';\n\nexport const metadataQueryTypes = [\n  'add_source',\n  'update_source',\n  'drop_source',\n  'reload_source',\n  'track_table',\n  'untrack_table',\n  'set_table_is_enum',\n  'set_apollo_federation_config',\n  'track_function',\n  'untrack_function',\n  'create_object_relationship',\n  'create_array_relationship',\n  'drop_relationship',\n  'set_relationship_comment',\n  'rename_relationship',\n  'add_computed_field',\n  'drop_computed_field',\n  'create_remote_relationship',\n  'update_remote_relationship',\n  'delete_remote_relationship',\n  'create_insert_permission',\n  'create_select_permission',\n  'create_update_permission',\n  'create_delete_permission',\n  'drop_insert_permission',\n  'drop_select_permission',\n  'drop_update_permission',\n  'drop_delete_permission',\n  'set_permission_comment',\n  'create_event_trigger',\n  'delete_event_trigger',\n  'redeliver_event',\n  'invoke_event_trigger',\n  'get_inconsistent_metadata',\n  'drop_inconsistent_metadata',\n  'add_remote_schema',\n  'update_remote_schema',\n  'remove_remote_schema',\n  'reload_remote_schema',\n  'introspect_remote_schema',\n  'create_cron_trigger',\n  'delete_cron_trigger',\n  'create_scheduled_event',\n  'add_existing_table_or_view',\n  'create_query_collection',\n  'drop_query_collection',\n  'rename_query_collection',\n  'add_query_to_collection',\n  'drop_query_from_collection',\n  'add_collection_to_allowlist',\n  'drop_collection_from_allowlist',\n  'replace_metadata',\n  'export_metadata',\n  'clear_metadata',\n  'reload_metadata',\n  'create_action',\n  'drop_action',\n  'update_action',\n  'create_action_permission',\n  'drop_action_permission',\n  'set_custom_types',\n  'dump_internal_state',\n  'bulk',\n  'get_catalog_state',\n  'set_catalog_state',\n  'set_table_customization',\n  'get_scheduled_event_invocations',\n  'get_scheduled_events',\n  'delete_scheduled_event',\n  'create_function_permission',\n  'drop_function_permission',\n  'create_rest_endpoint',\n  'drop_rest_endpoint',\n  'add_host_to_tls_allowlist',\n  'drop_host_from_tls_allowlist',\n  'dc_add_agent',\n  'dc_delete_agent',\n  'suggest_relationships',\n] as const;\n\nexport type MetadataQueryType = (typeof metadataQueryTypes)[number];\n\nexport type MetadataQueries = Record<Driver, Record<MetadataQueryType, string>>;\n\ntype MetadataQueryArgs = {\n  [key: string]: any;\n};\n\nexport type InvokeManualTriggerArgs = {\n  name: string;\n  source: string;\n  payload: Record<string, any>;\n};\n\nexport const getMetadataQuery = (\n  type: MetadataQueryType,\n  source: string,\n  args: MetadataQueryArgs,\n  driver: Driver = currentDriver\n): {\n  type: string;\n  args: MetadataQueryArgs;\n  version?: number;\n} => {\n  const prefix = getDataSourcePrefix(driver);\n  return {\n    type: `${prefix}${type}`,\n    args: { ...args, source },\n  };\n};\n\nexport const getCreatePermissionQuery = (\n  action: 'update' | 'insert' | 'delete' | 'select',\n  tableDef: QualifiedTable,\n  role: string,\n  permission: any,\n  source: string\n) => {\n  let queryType: MetadataQueryType;\n  switch (action) {\n    case 'delete':\n      queryType = 'create_delete_permission';\n      break;\n    case 'insert':\n      queryType = 'create_insert_permission';\n      break;\n    case 'select':\n      queryType = 'create_select_permission';\n      break;\n    case 'update':\n      queryType = 'create_update_permission';\n      break;\n    default:\n      throw new Error('Invalid action type');\n  }\n\n  return getMetadataQuery(queryType, source, {\n    table: tableDef,\n    role,\n    permission,\n  });\n};\n\nexport const getDropPermissionQuery = (\n  action: string,\n  tableDef: QualifiedTable,\n  role: string,\n  source: string\n) => {\n  let queryType: MetadataQueryType;\n  switch (action) {\n    case 'delete':\n      queryType = 'drop_delete_permission';\n      break;\n    case 'insert':\n      queryType = 'drop_insert_permission';\n      break;\n    case 'select':\n      queryType = 'drop_select_permission';\n      break;\n    case 'update':\n      queryType = 'drop_update_permission';\n      break;\n    default:\n      throw new Error('Invalid action type');\n  }\n  return getMetadataQuery(queryType, source, {\n    table: tableDef,\n    role,\n  });\n};\n\nexport const generateSetCustomTypesQuery = (customTypes: CustomTypes) => {\n  return {\n    type: 'set_custom_types',\n    args: customTypes,\n  };\n};\n\nexport const generateCreateActionQuery = (\n  name: string,\n  definition: ActionDefinition,\n  comment: string\n) => {\n  return {\n    type: 'create_action',\n    args: {\n      name,\n      definition,\n      comment,\n    },\n  };\n};\n\nexport const getSetCustomRootFieldsQuery = (\n  tableDef: QualifiedTable,\n  rootFields: CustomRootFields,\n  columnConfig: ColumnConfig,\n  customTableName: string | null,\n  source: string\n) => {\n  const customNameValue = customTableName || null;\n\n  return getMetadataQuery('set_table_customization', source, {\n    source,\n    table: tableDef,\n    configuration: {\n      custom_name: customNameValue,\n      custom_root_fields: rootFields,\n      column_config: columnConfig,\n    },\n  });\n};\n\nexport const generateDropActionQuery = (name: string) => {\n  return {\n    type: 'drop_action',\n    args: {\n      name,\n    },\n  };\n};\n\nexport const getCreateActionPermissionQuery = (\n  def: { role: string; filter: Record<string, any> },\n  actionName: string\n) => {\n  return {\n    type: 'create_action_permission',\n    args: {\n      action: actionName,\n      role: def.role,\n      definition: {\n        select: {\n          filter: def.filter,\n        },\n      },\n    },\n  };\n};\n\nexport const getUpdateActionQuery = (\n  def: ActionDefinition,\n  actionName: string,\n  actionComment: string,\n  request_transform: RequestTransform\n) => {\n  return {\n    type: 'update_action',\n    args: {\n      name: actionName,\n      definition: def,\n      comment: actionComment,\n      request_transform,\n    },\n  };\n};\n\nexport const getDropActionPermissionQuery = (\n  role: string,\n  actionName: string\n) => {\n  return {\n    type: 'drop_action_permission',\n    args: {\n      action: actionName,\n      role,\n    },\n  };\n};\n\nexport const getSetTableEnumQuery = (\n  tableDef: QualifiedTable,\n  isEnum: boolean,\n  source: string\n) => {\n  return getMetadataQuery('set_table_is_enum', source, {\n    table: tableDef,\n    is_enum: isEnum,\n  });\n};\n\nexport const getSetTableApolloFederationQuery = (\n  tableDef: QualifiedTable,\n  isApolloFederationSupported: boolean,\n  source: string\n) => {\n  return getMetadataQuery('set_apollo_federation_config', source, {\n    table: tableDef,\n    apollo_federation_config: isApolloFederationSupported\n      ? { enable: 'v1' }\n      : null,\n  });\n};\n\nexport const getTrackTableQuery = ({\n  tableDef,\n  source,\n  driver,\n  customColumnNames,\n  customName,\n}: {\n  tableDef: QualifiedTable | QualifiedTableBigQuery;\n  source: string;\n  driver: Driver;\n  customName: Nullable<string>;\n  customColumnNames?: Record<string, string>;\n}) => {\n  const configuration: Partial<{\n    column_config: ColumnConfig;\n    custom_name: string;\n  }> = {};\n  if (!isEmpty(customColumnNames)) {\n    const newColumnConfigs = Object.entries(customColumnNames || {}).map(\n      ([column, columnCustomName]) => ({\n        [column]: { custom_name: columnCustomName },\n      })\n    );\n    configuration.column_config = Object.assign({}, ...newColumnConfigs);\n  }\n  if (customName) {\n    configuration.custom_name = customName;\n  }\n  const args = isEmpty(configuration)\n    ? { table: tableDef }\n    : {\n        table: tableDef,\n        configuration,\n      };\n\n  return getMetadataQuery('track_table', source, args, driver);\n};\n\nexport const getUntrackTableQuery = (\n  tableDef: QualifiedTable,\n  source: string\n) => {\n  return getMetadataQuery('untrack_table', source, { table: tableDef });\n};\n\nexport const getAddComputedFieldQuery = (\n  tableDef: QualifiedTable,\n  computedFieldName: string,\n  definition: any,\n  comment: string,\n  source: string\n) => {\n  return getMetadataQuery('add_computed_field', source, {\n    table: tableDef,\n    name: computedFieldName,\n    definition,\n    comment,\n  });\n};\n\nexport const getDropComputedFieldQuery = (\n  tableDef: QualifiedTable,\n  computedFieldName: string,\n  source: string\n) => {\n  return getMetadataQuery('drop_computed_field', source, {\n    table: tableDef,\n    name: computedFieldName,\n  });\n};\n\nexport const inconsistentObjectsQuery = {\n  type: 'get_inconsistent_metadata',\n  args: {},\n};\n\nexport const dropInconsistentObjectsQuery = {\n  type: 'drop_inconsistent_metadata',\n  args: {},\n};\n\nexport const getReloadMetadataQuery = (\n  shouldReloadRemoteSchemas: boolean | string[],\n  shouldReloadSources?: boolean | string[]\n) => ({\n  type: 'reload_metadata',\n  args: {\n    reload_sources: shouldReloadSources ?? [],\n    reload_remote_schemas: shouldReloadRemoteSchemas ?? [],\n  },\n});\n\nexport const getReloadRemoteSchemaCacheQuery = (remoteSchemaName: string) => {\n  return {\n    type: 'reload_remote_schema',\n    args: {\n      name: remoteSchemaName,\n    },\n  };\n};\n\nexport const exportMetadataQuery = {\n  type: 'export_metadata',\n  version: 2,\n  args: {},\n};\n\nexport const generateReplaceMetadataQuery = (\n  metadata: HasuraMetadataV3 | HasuraMetadataV2\n) => ({\n  type: 'replace_metadata',\n  args: metadata,\n});\n\nexport const resetMetadataQuery = {\n  type: 'clear_metadata',\n  args: {},\n};\n\nexport const generateCreateEventTriggerQuery = (\n  state: LocalEventTriggerState,\n  source: { name: string; driver: Driver },\n  replace = false,\n  requestTransform?: RequestTransform\n) =>\n  getMetadataQuery(\n    'create_event_trigger',\n    source.name,\n    {\n      name: state.name.trim(),\n      table: state.table,\n      webhook:\n        state.webhook.type === 'static' ? state.webhook.value.trim() : null,\n      webhook_from_env:\n        state.webhook.type === 'env' ? state.webhook.value.trim() : null,\n      insert: state.operations.insert\n        ? {\n            columns: '*',\n          }\n        : null,\n      update: state.operations.update\n        ? {\n            columns: state.isAllColumnChecked\n              ? '*'\n              : state.operationColumns\n                  .filter(c => !!c.enabled)\n                  .map(c => c.name),\n          }\n        : null,\n      delete: state.operations.delete\n        ? {\n            columns: '*',\n          }\n        : null,\n      enable_manual: state.operations.enable_manual,\n      retry_conf: state.retryConf,\n      ...(state.cleanupConfig\n        ? {\n            cleanup_config: {\n              ...defaultState.cleanupConfig,\n              ...state.cleanupConfig,\n            },\n          }\n        : {}),\n      replace,\n      request_transform: requestTransform,\n    },\n    source.driver\n  );\n\nexport const getDropEventTriggerQuery = (\n  name: string,\n  source: { name: string; driver: Driver }\n) =>\n  getMetadataQuery(\n    'delete_event_trigger',\n    source.name,\n    {\n      source: source.name,\n      name: name.trim(),\n    },\n    source.driver\n  );\n\nexport const generateCreateScheduledTriggerQuery = (\n  state: LocalScheduledTriggerState,\n  source: string,\n  replace = false\n) => ({\n  type: 'create_cron_trigger',\n  args: {\n    source,\n    name: state.name.trim(),\n    webhook: state.webhook,\n    schedule: state.schedule,\n    payload: JSON.parse(state.payload),\n    headers: transformHeaders(state.headers),\n    retry_conf: {\n      num_retries: state.retryConf.num_retries,\n      retry_interval_seconds: state.retryConf.interval_sec,\n      timeout_seconds: state.retryConf.timeout_sec,\n    },\n    comment: state.comment,\n    include_in_metadata: state.includeInMetadata,\n    replace,\n  },\n});\n\nexport const generateUpdateScheduledTriggerQuery = (\n  state: LocalScheduledTriggerState,\n  source: string\n) => generateCreateScheduledTriggerQuery(state, source, true);\n\nexport const getDropScheduledTriggerQuery = (name: string, source: string) => ({\n  type: 'delete_cron_trigger',\n  args: {\n    source,\n    name: name.trim(),\n  },\n});\n\nexport const getRedeliverDataEventQuery = (\n  eventId: string,\n  tableDef: QualifiedTable,\n  source: string\n) =>\n  getMetadataQuery('redeliver_event', source, {\n    table: tableDef,\n    event_id: eventId,\n  });\n\n// this function returns the payload in old format,\n// please note that there is also a new format for local table to remote schema relationship\n// https://gist.github.com/0x777/e9c21e846507c6123cfb7a40c64d5772\nexport const getSaveRemoteRelQuery = (\n  args: RemoteRelationshipPayload,\n  isNew: boolean,\n  source: string\n) =>\n  getMetadataQuery(\n    isNew ? 'create_remote_relationship' : 'update_remote_relationship',\n    source,\n    args\n  );\n\nexport const getDropRemoteRelQuery = (\n  name: string,\n  table: QualifiedTable,\n  source: string\n) =>\n  getMetadataQuery('delete_remote_relationship', source, {\n    name,\n    table,\n    source,\n  });\n\nexport const getRemoteSchemaIntrospectionQuery = (\n  remoteSchemaName: string\n) => ({\n  type: 'introspect_remote_schema',\n  args: {\n    name: remoteSchemaName,\n  },\n});\n\nexport const addExistingTableOrView = (\n  tableName: string,\n  schemaName: string,\n  source: string\n) =>\n  getMetadataQuery('add_existing_table_or_view', source, {\n    name: tableName,\n    schema: schemaName,\n  });\n\nexport const getTrackFunctionQuery = (\n  name: string,\n  schema: string,\n  source: string,\n  configuration?: Record<string, any>,\n  driver?: Driver\n) => {\n  if (configuration) {\n    return getMetadataQuery(\n      'track_function',\n      source,\n      {\n        function: { name, schema },\n        configuration,\n      },\n      driver\n    );\n  }\n  return getMetadataQuery(\n    'track_function',\n    source,\n    {\n      function: { name, schema },\n    },\n    driver\n  );\n};\n\nexport const getUntrackFunctionQuery = (\n  name: string,\n  schema: string,\n  source: string\n) =>\n  getMetadataQuery('untrack_function', source, { function: { name, schema } });\n\nexport const getRenameRelationshipQuery = (\n  table: QualifiedTable,\n  name: string,\n  newName: string,\n  source: string\n) =>\n  getMetadataQuery('rename_relationship', source, {\n    table,\n    name,\n    new_name: newName,\n  });\n\nexport const getCreateObjectRelationshipQuery = (\n  table: QualifiedTable,\n  name: string,\n  source: string\n) =>\n  getMetadataQuery('create_object_relationship', source, {\n    name,\n    table,\n    using: {},\n  });\n\nexport const getDropRelationshipQuery = (\n  table: QualifiedTable,\n  name: string,\n  source: string\n) =>\n  getMetadataQuery('drop_relationship', source, {\n    table,\n    relationship: name,\n  });\n\nexport const getCreateArrayRelationshipQuery = (\n  table: QualifiedTable,\n  name: string,\n  source: string\n) =>\n  getMetadataQuery('create_array_relationship', source, {\n    name,\n    table,\n    using: {},\n  });\n\nexport const getSaveRemoteDbRelationshipQuery = (\n  isObjRel: boolean,\n  tableName: string,\n  name: string,\n  remoteTable: Record<string, string>,\n  columnMapping: Record<string, string>,\n  source: string,\n  rSource: string,\n  isNew: boolean,\n  driver: string,\n  schema: string\n) => {\n  const args = {\n    source,\n    name,\n    table:\n      currentDriver !== 'bigquery'\n        ? { name: tableName, schema }\n        : { name: tableName, dataset: schema },\n    definition: {\n      to_source: {\n        source: rSource,\n        table:\n          driver !== 'bigquery'\n            ? remoteTable\n            : { name: remoteTable.name, dataset: remoteTable.schema },\n        relationship_type: isObjRel ? 'object' : 'array',\n        field_mapping: columnMapping,\n      },\n    },\n  };\n\n  return getMetadataQuery(\n    isNew ? 'create_remote_relationship' : 'update_remote_relationship',\n    source,\n    args\n  );\n};\n\nexport const getDropRemoteDbRelationshipQuery = (\n  name: string,\n  tableName: string,\n  source: string,\n  schema: string\n) =>\n  getMetadataQuery('delete_remote_relationship', source, {\n    name,\n    table:\n      currentDriver !== 'bigquery'\n        ? { name: tableName, schema }\n        : { name: tableName, dataset: schema },\n    source,\n  });\n\nexport const getAddRelationshipQuery = (\n  isObjRel: boolean,\n  table: QualifiedTable,\n  name: string,\n  remoteTable: QualifiedTable,\n  columnMapping: Record<string, string>,\n  source: string\n) => {\n  const args = {\n    source,\n    name,\n    table,\n    using: {\n      manual_configuration: {\n        remote_table: remoteTable,\n        column_mapping: columnMapping,\n      },\n    },\n  };\n  if (isObjRel) {\n    return getMetadataQuery('create_object_relationship', source, args);\n  }\n\n  return getMetadataQuery('create_array_relationship', source, args);\n};\n\nexport const getSetConsoleStateQuery = (\n  state: ConsoleState['console_opts']\n) => ({\n  type: 'set_catalog_state',\n  args: {\n    type: 'console',\n    state,\n  },\n});\n\nexport const getConsoleStateQuery = {\n  type: 'get_catalog_state',\n  args: {},\n};\n\nexport type SupportedEvents = 'cron' | 'one_off' | 'data';\n\nexport const getEventInvocationsLogByID = (\n  type: SupportedEvents,\n  event_id: string\n) => ({\n  type: 'get_scheduled_event_invocations',\n  args: {\n    type,\n    event_id,\n    get_rows_count: false,\n  },\n});\n\nexport const getEventInvocations = (\n  type: SupportedEvents,\n  limit: number,\n  offset: number,\n  triggerName?: string // is required for cron\n) => {\n  const query = {\n    type: 'get_scheduled_event_invocations',\n    args: {},\n  };\n\n  if (type === 'one_off') {\n    query.args = {\n      type,\n    };\n  } else {\n    query.args = {\n      type,\n      trigger_name: triggerName,\n    };\n  }\n\n  return {\n    ...query,\n    args: {\n      ...query.args,\n      limit,\n      offset,\n      get_rows_count: false,\n    },\n  };\n};\n\nexport const getScheduledEvents = (\n  type: SupportedEvents,\n  limit: number,\n  offset: number,\n  triggerOp: Exclude<TriggerOperation, 'invocation'>,\n  triggerName?: string // is required for cron triggers\n) => {\n  const query = {\n    type: 'get_scheduled_events',\n    args: {},\n  };\n  const statusPending = ['scheduled'];\n  const statusProcessed = ['delivered', 'dead', 'error'];\n\n  if (type === 'one_off') {\n    query.args = {\n      type,\n    };\n  } else {\n    query.args = {\n      type,\n      trigger_name: triggerName,\n    };\n  }\n\n  if (triggerOp === 'pending') {\n    query.args = {\n      ...query.args,\n      status: statusPending,\n    };\n  } else {\n    query.args = {\n      ...query.args,\n      status: statusProcessed,\n    };\n  }\n\n  return {\n    ...query,\n    args: {\n      ...query.args,\n      limit,\n      offset,\n      get_rows_count: false,\n    },\n  };\n};\n\nexport const deleteScheduledEvent = (\n  type: SupportedEvents,\n  event_id: string\n) => ({\n  type: 'delete_scheduled_event',\n  args: {\n    type,\n    event_id,\n  },\n});\n\nexport const invokeManualTriggerQuery = (\n  args: InvokeManualTriggerArgs,\n  source: string\n) => getMetadataQuery('invoke_event_trigger', source, args);\n\nexport const createFunctionPermissionQuery = (\n  source: string,\n  func: QualifiedFunction,\n  role: string\n) =>\n  getMetadataQuery('create_function_permission', source, {\n    function: func,\n    role,\n  });\n\nexport const dropFunctionPermissionQuery = (\n  source: string,\n  func: QualifiedFunction,\n  role: string\n) =>\n  getMetadataQuery('drop_function_permission', source, {\n    function: func,\n    role,\n  });\n\nexport const createRESTEndpointQuery = (args: RestEndpointEntry) => ({\n  type: 'create_rest_endpoint',\n  args,\n});\n\nexport const dropRESTEndpointQuery = (name: string) => ({\n  type: 'drop_rest_endpoint',\n  args: { name },\n});\n\nconst getMetadataQueryForRemoteSchema =\n  (queryName: 'add' | 'update') =>\n  (name: string, definition: RemoteSchemaDef, comment?: string) => ({\n    type: `${queryName}_remote_schema` as MetadataQueryType,\n    args: {\n      name,\n      definition,\n      comment: comment ?? null,\n    },\n  });\n\nexport const addRemoteSchemaQuery = getMetadataQueryForRemoteSchema('add');\n\nexport const updateRemoteSchemaQuery =\n  getMetadataQueryForRemoteSchema('update');\n\nexport const removeRemoteSchemaQuery = (name: string) => ({\n  type: 'remove_remote_schema',\n  args: { name },\n});\n"], "fixing_code": ["import { DropdownButton } from '../../../../new-components/DropdownButton';\nimport { Analytics } from '../../../../features/Analytics';\nimport React, { useMemo } from 'react';\nimport { FaBook, FaEdit, FaFileImport, FaWrench } from 'react-icons/fa';\nimport { browserHistory, Link } from 'react-router';\n\nimport LeftSubSidebar from '../../../Common/Layout/LeftSubSidebar/LeftSubSidebar';\nimport styles from '../../../Common/Layout/LeftSubSidebar/LeftSubSidebar.module.scss';\nimport { isProConsole } from '../../../../utils';\nimport { Badge } from '../../../../new-components/Badge';\nimport globals from '../../../../Globals';\n\nconst LeftSidebar = ({\n  appPrefix,\n  common: { currentAction },\n  actions,\n  readOnlyMode,\n}) => {\n  const [searchText, setSearchText] = React.useState('');\n\n  const handleSearch = e => setSearchText(e.target.value);\n\n  const getSearchInput = () => {\n    return (\n      <div className=\"mr-2\">\n        <input\n          type=\"text\"\n          onChange={handleSearch}\n          className=\"form-control\"\n          placeholder=\"search actions\"\n          data-test=\"search-actions\"\n        />\n      </div>\n    );\n  };\n\n  const findIfSubStringExists = (originalString, subString) => {\n    return originalString.toLowerCase().includes(subString.toLocaleLowerCase());\n  };\n\n  const actionsList = useMemo(() => {\n    if (!searchText) return actions;\n\n    return actions.reduce((acc, action) => {\n      const idx = findIfSubStringExists(action.name, searchText);\n      if (idx === 0) return [action, ...acc];\n      if (idx > 0) return [...acc, action];\n      return acc;\n    }, []);\n  }, [searchText, actions]);\n\n  const getActionIcon = action => {\n    switch (action.definition.type) {\n      case 'mutation':\n        return <FaEdit className={styles.tableIcon} aria-hidden=\"true\" />;\n      case 'query':\n        return <FaBook className={styles.tableIcon} aria-hidden=\"true\" />;\n      default:\n        return <FaWrench className={styles.tableIcon} aria-hidden=\"true\" />;\n    }\n  };\n\n  const getChildList = () => {\n    let childList;\n    if (actionsList.length === 0) {\n      childList = (\n        <li\n          data-test=\"actions-sidebar-no-actions\"\n          className=\"italic font-normal pb-sm pt-xs text-gray-500\"\n        >\n          <i>No actions available</i>\n        </li>\n      );\n    } else {\n      childList = actionsList.map((a, i) => {\n        let activeTableClass = '';\n        if (a.name === currentAction) {\n          activeTableClass = '!text-yellow-500';\n        }\n\n        const actionIcon = getActionIcon(a);\n\n        return (\n          <li key={i} data-test={`action-sidebar-links-${i + 1}`}>\n            <Link\n              className={activeTableClass}\n              to={appPrefix + '/manage/' + a.name + '/modify'}\n              data-test={a.name}\n            >\n              {actionIcon}\n              {a.name}\n            </Link>\n          </li>\n        );\n      });\n    }\n\n    return childList;\n  };\n\n  return (\n    <LeftSubSidebar\n      showAddBtn={!readOnlyMode}\n      searchInput={getSearchInput()}\n      heading={`Actions (${actionsList.length})`}\n      addLink={`${appPrefix}/manage/add`}\n      addLabel={'Create'}\n      addTrackId=\"action-tab-button-add-actions-sidebar\"\n      addTestString={'actions-sidebar-add-table'}\n      childListTestString={'actions-table-links'}\n      addBtn={\n        isProConsole(window.__env) ? (\n          <div\n            className={`col-xs-4 text-center ${styles.padd_left_remove} ${styles.sidebarCreateTable}`}\n          >\n            <DropdownButton\n              className=\"relative -left-2\"\n              data-testid=\"dropdown-button\"\n              items={[\n                [\n                  <Analytics name=\"action-tab-button-add-actions-sidebar-with-form\">\n                    <div\n                      className=\"py-1 \"\n                      onClick={() => {\n                        browserHistory.push(\n                          `${globals.urlPrefix}${appPrefix}/manage/add`\n                        );\n                      }}\n                    >\n                      <FaEdit className=\"relative -top-[1px]\" /> New Action\n                    </div>\n                  </Analytics>,\n                  <Analytics name=\"action-tab-button-add-actions-sidebar-openapi\">\n                    <div\n                      className=\"py-1 \"\n                      onClick={() => {\n                        browserHistory.push(\n                          `${globals.urlPrefix}${appPrefix}/manage/add-oas`\n                        );\n                      }}\n                    >\n                      <FaFileImport className=\"relative -left-[2px] -top-[1px]\" />{' '}\n                      Import OpenAPI{' '}\n                      <Badge className=\"ml-1 font-xs\" color=\"purple\">\n                        New\n                      </Badge>\n                    </div>\n                  </Analytics>,\n                ],\n              ]}\n            >\n              Create\n            </DropdownButton>\n          </div>\n        ) : undefined\n      }\n    >\n      {getChildList()}\n    </LeftSubSidebar>\n  );\n};\n\nexport default LeftSidebar;\n", "import { Button } from '../../../../new-components/Button';\nimport { Analytics } from '../../../Analytics';\nimport clsx from 'clsx';\nimport React from 'react';\nimport { FaChevronDown, FaExternalLinkAlt } from 'react-icons/fa';\nimport { Operation } from './types';\nimport globals from '../../../../Globals';\n\nexport interface OasGeneratorActionsProps {\n  operation: Operation;\n  existing?: boolean;\n  onCreate: () => void;\n  onDelete: () => void;\n  disabled?: boolean;\n}\n\nexport const OasGeneratorActions: React.FC<\n  OasGeneratorActionsProps\n> = props => {\n  const { operation, existing, onCreate, onDelete, disabled } = props;\n  const [isExpanded, setExpanded] = React.useState(false);\n  return (\n    <div data-testid={`operation-${operation.operationId}`}>\n      <div className=\"flex justify-between cursor-pointer\">\n        <div className=\"max-w-[17vw] overflow-hidden truncate\">\n          {operation.path}\n        </div>\n        {existing ? (\n          <div className=\"flex items-center space-x-xs -my-2\">\n            <Analytics\n              name=\"action-tab-btn-import-openapi-delete-action\"\n              passHtmlAttributesToChildren\n            >\n              <Button\n                disabled={disabled}\n                size=\"sm\"\n                mode=\"destructive\"\n                onClick={onDelete}\n              >\n                Delete\n              </Button>\n            </Analytics>\n            <Analytics\n              name=\"action-tab-btn-import-openapi-modify-action\"\n              passHtmlAttributesToChildren\n            >\n              <Button\n                icon={<FaExternalLinkAlt />}\n                iconPosition=\"end\"\n                disabled={disabled}\n                size=\"sm\"\n                onClick={e => {\n                  window.open(\n                    `${globals.urlPrefix}/actions/manage/${operation.operationId}/modify`,\n                    '_blank'\n                  );\n                }}\n              >\n                Modify\n              </Button>\n            </Analytics>\n          </div>\n        ) : (\n          <div className=\"flex items-center space-x-xs -my-2\">\n            <div onClick={() => setExpanded(!isExpanded)} className=\"mr-5\">\n              <span className=\"text-sm text-gray-500\">More info </span>\n              <FaChevronDown\n                className={clsx(\n                  isExpanded ? 'rotate-180' : '',\n                  'transition-all duration-300 ease-in-out w-3 h-3'\n                )}\n              />\n            </div>\n            <Analytics\n              name=\"action-tab-btn-import-openapi-create-action\"\n              passHtmlAttributesToChildren\n            >\n              <Button disabled={disabled} size=\"sm\" onClick={onCreate}>\n                Create\n              </Button>\n            </Analytics>\n          </div>\n        )}\n      </div>\n      <div\n        className={clsx(\n          'max-w-[28vw] whitespace-normal break-all',\n          isExpanded ? 'h-auto pt-4' : 'h-0 pt-0',\n          'overflow-hidden transition-all duration-300 ease-in-out'\n        )}\n      >\n        {operation.description.trim() ??\n          'No description available for this endpoint'}\n      </div>\n    </div>\n  );\n};\n", "import defaultState from '../components/Services/Events/EventTriggers/state';\nimport {\n  ColumnConfig,\n  CustomRootFields,\n  ActionDefinition,\n  CustomTypes,\n  QualifiedTable,\n  QualifiedTableBigQuery,\n  QualifiedFunction,\n  RestEndpointEntry,\n  RemoteSchemaDef,\n  RequestTransform,\n  HasuraMetadataV2,\n  HasuraMetadataV3,\n} from './types';\nimport { transformHeaders } from '../components/Common/Headers/utils';\nimport { LocalEventTriggerState } from '../components/Services/Events/EventTriggers/state';\nimport { LocalScheduledTriggerState } from '../components/Services/Events/CronTriggers/state';\nimport { RemoteRelationshipPayload } from '../components/Services/Data/TableRelationships/RemoteRelationships/utils';\nimport { Driver, currentDriver } from '../dataSources';\nimport { ConsoleState } from '../telemetry/state';\nimport { TriggerOperation } from '../components/Common/FilterQuery/state';\nimport { isEmpty } from '../components/Common/utils/jsUtils';\nimport { Nullable } from '../components/Common/utils/tsUtils';\nimport { getDataSourcePrefix } from './dataSource.utils';\n\nexport const metadataQueryTypes = [\n  'add_source',\n  'update_source',\n  'drop_source',\n  'reload_source',\n  'track_table',\n  'untrack_table',\n  'set_table_is_enum',\n  'set_apollo_federation_config',\n  'track_function',\n  'untrack_function',\n  'create_object_relationship',\n  'create_array_relationship',\n  'drop_relationship',\n  'set_relationship_comment',\n  'rename_relationship',\n  'add_computed_field',\n  'drop_computed_field',\n  'create_remote_relationship',\n  'update_remote_relationship',\n  'delete_remote_relationship',\n  'create_insert_permission',\n  'create_select_permission',\n  'create_update_permission',\n  'create_delete_permission',\n  'drop_insert_permission',\n  'drop_select_permission',\n  'drop_update_permission',\n  'drop_delete_permission',\n  'set_permission_comment',\n  'create_event_trigger',\n  'delete_event_trigger',\n  'redeliver_event',\n  'invoke_event_trigger',\n  'get_inconsistent_metadata',\n  'drop_inconsistent_metadata',\n  'add_remote_schema',\n  'update_remote_schema',\n  'remove_remote_schema',\n  'reload_remote_schema',\n  'introspect_remote_schema',\n  'create_cron_trigger',\n  'delete_cron_trigger',\n  'create_scheduled_event',\n  'add_existing_table_or_view',\n  'create_query_collection',\n  'drop_query_collection',\n  'rename_query_collection',\n  'add_query_to_collection',\n  'drop_query_from_collection',\n  'add_collection_to_allowlist',\n  'drop_collection_from_allowlist',\n  'replace_metadata',\n  'export_metadata',\n  'clear_metadata',\n  'reload_metadata',\n  'create_action',\n  'drop_action',\n  'update_action',\n  'create_action_permission',\n  'drop_action_permission',\n  'set_custom_types',\n  'dump_internal_state',\n  'bulk',\n  'get_catalog_state',\n  'set_catalog_state',\n  'set_table_customization',\n  'get_scheduled_event_invocations',\n  'get_scheduled_events',\n  'delete_scheduled_event',\n  'create_function_permission',\n  'drop_function_permission',\n  'create_rest_endpoint',\n  'drop_rest_endpoint',\n  'add_host_to_tls_allowlist',\n  'drop_host_from_tls_allowlist',\n  'dc_add_agent',\n  'dc_delete_agent',\n  'suggest_relationships',\n] as const;\n\nexport type MetadataQueryType = (typeof metadataQueryTypes)[number];\n\nexport type MetadataQueries = Record<Driver, Record<MetadataQueryType, string>>;\n\ntype MetadataQueryArgs = {\n  [key: string]: any;\n};\n\nexport type InvokeManualTriggerArgs = {\n  name: string;\n  source: string;\n  payload: Record<string, any>;\n};\n\nexport const getMetadataQuery = (\n  type: MetadataQueryType,\n  source: string,\n  args: MetadataQueryArgs,\n  driver: Driver = currentDriver\n): {\n  type: string;\n  args: MetadataQueryArgs;\n  version?: number;\n} => {\n  const prefix = getDataSourcePrefix(driver);\n  return {\n    type: `${prefix}${type}`,\n    args: { ...args, source },\n  };\n};\n\nexport const getCreatePermissionQuery = (\n  action: 'update' | 'insert' | 'delete' | 'select',\n  tableDef: QualifiedTable,\n  role: string,\n  permission: any,\n  source: string\n) => {\n  let queryType: MetadataQueryType;\n  switch (action) {\n    case 'delete':\n      queryType = 'create_delete_permission';\n      break;\n    case 'insert':\n      queryType = 'create_insert_permission';\n      break;\n    case 'select':\n      queryType = 'create_select_permission';\n      break;\n    case 'update':\n      queryType = 'create_update_permission';\n      break;\n    default:\n      throw new Error('Invalid action type');\n  }\n\n  return getMetadataQuery(queryType, source, {\n    table: tableDef,\n    role,\n    permission,\n  });\n};\n\nexport const getDropPermissionQuery = (\n  action: string,\n  tableDef: QualifiedTable,\n  role: string,\n  source: string\n) => {\n  let queryType: MetadataQueryType;\n  switch (action) {\n    case 'delete':\n      queryType = 'drop_delete_permission';\n      break;\n    case 'insert':\n      queryType = 'drop_insert_permission';\n      break;\n    case 'select':\n      queryType = 'drop_select_permission';\n      break;\n    case 'update':\n      queryType = 'drop_update_permission';\n      break;\n    default:\n      throw new Error('Invalid action type');\n  }\n  return getMetadataQuery(queryType, source, {\n    table: tableDef,\n    role,\n  });\n};\n\nexport const generateSetCustomTypesQuery = (customTypes: CustomTypes) => {\n  return {\n    type: 'set_custom_types',\n    args: customTypes,\n  };\n};\n\nexport const generateCreateActionQuery = (\n  name: string,\n  definition: ActionDefinition,\n  comment: string\n) => {\n  return {\n    type: 'create_action',\n    args: {\n      name,\n      definition,\n      comment,\n    },\n  };\n};\n\nexport const getSetCustomRootFieldsQuery = (\n  tableDef: QualifiedTable,\n  rootFields: CustomRootFields,\n  columnConfig: ColumnConfig,\n  customTableName: string | null,\n  source: string\n) => {\n  const customNameValue = customTableName || null;\n\n  return getMetadataQuery('set_table_customization', source, {\n    source,\n    table: tableDef,\n    configuration: {\n      custom_name: customNameValue,\n      custom_root_fields: rootFields,\n      column_config: columnConfig,\n    },\n  });\n};\n\nexport const generateDropActionQuery = (name: string) => {\n  return {\n    type: 'drop_action',\n    args: {\n      name,\n    },\n  };\n};\n\nexport const getCreateActionPermissionQuery = (\n  def: { role: string; filter: Record<string, any> },\n  actionName: string\n) => {\n  return {\n    type: 'create_action_permission',\n    args: {\n      action: actionName,\n      role: def.role,\n      definition: {\n        select: {\n          filter: def.filter,\n        },\n      },\n    },\n  };\n};\n\nexport const getUpdateActionQuery = (\n  def: ActionDefinition,\n  actionName: string,\n  actionComment: string,\n  request_transform: RequestTransform\n) => {\n  return {\n    type: 'update_action',\n    args: {\n      name: actionName,\n      definition: def,\n      comment: actionComment,\n      request_transform,\n    },\n  };\n};\n\nexport const getDropActionPermissionQuery = (\n  role: string,\n  actionName: string\n) => {\n  return {\n    type: 'drop_action_permission',\n    args: {\n      action: actionName,\n      role,\n    },\n  };\n};\n\nexport const getSetTableEnumQuery = (\n  tableDef: QualifiedTable,\n  isEnum: boolean,\n  source: string\n) => {\n  return getMetadataQuery('set_table_is_enum', source, {\n    table: tableDef,\n    is_enum: isEnum,\n  });\n};\n\nexport const getSetTableApolloFederationQuery = (\n  tableDef: QualifiedTable,\n  isApolloFederationSupported: boolean,\n  source: string\n) => {\n  return getMetadataQuery('set_apollo_federation_config', source, {\n    table: tableDef,\n    apollo_federation_config: isApolloFederationSupported\n      ? { enable: 'v1' }\n      : null,\n  });\n};\n\nexport const getTrackTableQuery = ({\n  tableDef,\n  source,\n  driver,\n  customColumnNames,\n  customName,\n}: {\n  tableDef: QualifiedTable | QualifiedTableBigQuery;\n  source: string;\n  driver: Driver;\n  customName: Nullable<string>;\n  customColumnNames?: Record<string, string>;\n}) => {\n  const configuration: Partial<{\n    column_config: ColumnConfig;\n    custom_name: string;\n  }> = {};\n  if (!isEmpty(customColumnNames)) {\n    const newColumnConfigs = Object.entries(customColumnNames || {}).map(\n      ([column, columnCustomName]) => ({\n        [column]: { custom_name: columnCustomName },\n      })\n    );\n    configuration.column_config = Object.assign({}, ...newColumnConfigs);\n  }\n  if (customName) {\n    configuration.custom_name = customName;\n  }\n  const args = isEmpty(configuration)\n    ? { table: tableDef }\n    : {\n        table: tableDef,\n        configuration,\n      };\n\n  return getMetadataQuery('track_table', source, args, driver);\n};\n\nexport const getUntrackTableQuery = (\n  tableDef: QualifiedTable,\n  source: string\n) => {\n  return getMetadataQuery('untrack_table', source, { table: tableDef });\n};\n\nexport const getAddComputedFieldQuery = (\n  tableDef: QualifiedTable,\n  computedFieldName: string,\n  definition: any,\n  comment: string,\n  source: string\n) => {\n  return getMetadataQuery('add_computed_field', source, {\n    table: tableDef,\n    name: computedFieldName,\n    definition,\n    comment,\n  });\n};\n\nexport const getDropComputedFieldQuery = (\n  tableDef: QualifiedTable,\n  computedFieldName: string,\n  source: string\n) => {\n  return getMetadataQuery('drop_computed_field', source, {\n    table: tableDef,\n    name: computedFieldName,\n  });\n};\n\nexport const inconsistentObjectsQuery = {\n  type: 'get_inconsistent_metadata',\n  args: {},\n};\n\nexport const dropInconsistentObjectsQuery = {\n  type: 'drop_inconsistent_metadata',\n  args: {},\n};\n\nexport const getReloadMetadataQuery = (\n  shouldReloadRemoteSchemas: boolean | string[],\n  shouldReloadSources?: boolean | string[]\n) => ({\n  type: 'reload_metadata',\n  args: {\n    reload_sources: shouldReloadSources ?? [],\n    reload_remote_schemas: shouldReloadRemoteSchemas ?? [],\n  },\n});\n\nexport const getReloadRemoteSchemaCacheQuery = (remoteSchemaName: string) => {\n  return {\n    type: 'reload_remote_schema',\n    args: {\n      name: remoteSchemaName,\n    },\n  };\n};\n\nexport const exportMetadataQuery = {\n  type: 'export_metadata',\n  version: 2,\n  args: {},\n};\n\nexport const generateReplaceMetadataQuery = (\n  metadata: HasuraMetadataV3 | HasuraMetadataV2\n) => ({\n  type: 'replace_metadata',\n  args: metadata,\n});\n\nexport const resetMetadataQuery = {\n  type: 'clear_metadata',\n  args: {},\n};\n\nexport const generateCreateEventTriggerQuery = (\n  state: LocalEventTriggerState,\n  source: { name: string; driver: Driver },\n  replace = false,\n  requestTransform?: RequestTransform\n) =>\n  getMetadataQuery(\n    'create_event_trigger',\n    source.name,\n    {\n      name: state.name.trim(),\n      table: state.table,\n      webhook:\n        state.webhook.type === 'static' ? state.webhook.value.trim() : null,\n      webhook_from_env:\n        state.webhook.type === 'env' ? state.webhook.value.trim() : null,\n      insert: state.operations.insert\n        ? {\n            columns: '*',\n          }\n        : null,\n      update: state.operations.update\n        ? {\n            columns: state.isAllColumnChecked\n              ? '*'\n              : state.operationColumns\n                  .filter(c => !!c.enabled)\n                  .map(c => c.name),\n          }\n        : null,\n      delete: state.operations.delete\n        ? {\n            columns: '*',\n          }\n        : null,\n      enable_manual: state.operations.enable_manual,\n      retry_conf: state.retryConf,\n      ...(state.cleanupConfig\n        ? {\n            cleanup_config: {\n              ...defaultState.cleanupConfig,\n              ...state.cleanupConfig,\n            },\n          }\n        : {}),\n      replace,\n      headers: transformHeaders(state?.headers),\n      request_transform: requestTransform,\n    },\n    source.driver\n  );\n\nexport const getDropEventTriggerQuery = (\n  name: string,\n  source: { name: string; driver: Driver }\n) =>\n  getMetadataQuery(\n    'delete_event_trigger',\n    source.name,\n    {\n      source: source.name,\n      name: name.trim(),\n    },\n    source.driver\n  );\n\nexport const generateCreateScheduledTriggerQuery = (\n  state: LocalScheduledTriggerState,\n  source: string,\n  replace = false\n) => ({\n  type: 'create_cron_trigger',\n  args: {\n    source,\n    name: state.name.trim(),\n    webhook: state.webhook,\n    schedule: state.schedule,\n    payload: JSON.parse(state.payload),\n    headers: transformHeaders(state.headers),\n    retry_conf: {\n      num_retries: state.retryConf.num_retries,\n      retry_interval_seconds: state.retryConf.interval_sec,\n      timeout_seconds: state.retryConf.timeout_sec,\n    },\n    comment: state.comment,\n    include_in_metadata: state.includeInMetadata,\n    replace,\n  },\n});\n\nexport const generateUpdateScheduledTriggerQuery = (\n  state: LocalScheduledTriggerState,\n  source: string\n) => generateCreateScheduledTriggerQuery(state, source, true);\n\nexport const getDropScheduledTriggerQuery = (name: string, source: string) => ({\n  type: 'delete_cron_trigger',\n  args: {\n    source,\n    name: name.trim(),\n  },\n});\n\nexport const getRedeliverDataEventQuery = (\n  eventId: string,\n  tableDef: QualifiedTable,\n  source: string\n) =>\n  getMetadataQuery('redeliver_event', source, {\n    table: tableDef,\n    event_id: eventId,\n  });\n\n// this function returns the payload in old format,\n// please note that there is also a new format for local table to remote schema relationship\n// https://gist.github.com/0x777/e9c21e846507c6123cfb7a40c64d5772\nexport const getSaveRemoteRelQuery = (\n  args: RemoteRelationshipPayload,\n  isNew: boolean,\n  source: string\n) =>\n  getMetadataQuery(\n    isNew ? 'create_remote_relationship' : 'update_remote_relationship',\n    source,\n    args\n  );\n\nexport const getDropRemoteRelQuery = (\n  name: string,\n  table: QualifiedTable,\n  source: string\n) =>\n  getMetadataQuery('delete_remote_relationship', source, {\n    name,\n    table,\n    source,\n  });\n\nexport const getRemoteSchemaIntrospectionQuery = (\n  remoteSchemaName: string\n) => ({\n  type: 'introspect_remote_schema',\n  args: {\n    name: remoteSchemaName,\n  },\n});\n\nexport const addExistingTableOrView = (\n  tableName: string,\n  schemaName: string,\n  source: string\n) =>\n  getMetadataQuery('add_existing_table_or_view', source, {\n    name: tableName,\n    schema: schemaName,\n  });\n\nexport const getTrackFunctionQuery = (\n  name: string,\n  schema: string,\n  source: string,\n  configuration?: Record<string, any>,\n  driver?: Driver\n) => {\n  if (configuration) {\n    return getMetadataQuery(\n      'track_function',\n      source,\n      {\n        function: { name, schema },\n        configuration,\n      },\n      driver\n    );\n  }\n  return getMetadataQuery(\n    'track_function',\n    source,\n    {\n      function: { name, schema },\n    },\n    driver\n  );\n};\n\nexport const getUntrackFunctionQuery = (\n  name: string,\n  schema: string,\n  source: string\n) =>\n  getMetadataQuery('untrack_function', source, { function: { name, schema } });\n\nexport const getRenameRelationshipQuery = (\n  table: QualifiedTable,\n  name: string,\n  newName: string,\n  source: string\n) =>\n  getMetadataQuery('rename_relationship', source, {\n    table,\n    name,\n    new_name: newName,\n  });\n\nexport const getCreateObjectRelationshipQuery = (\n  table: QualifiedTable,\n  name: string,\n  source: string\n) =>\n  getMetadataQuery('create_object_relationship', source, {\n    name,\n    table,\n    using: {},\n  });\n\nexport const getDropRelationshipQuery = (\n  table: QualifiedTable,\n  name: string,\n  source: string\n) =>\n  getMetadataQuery('drop_relationship', source, {\n    table,\n    relationship: name,\n  });\n\nexport const getCreateArrayRelationshipQuery = (\n  table: QualifiedTable,\n  name: string,\n  source: string\n) =>\n  getMetadataQuery('create_array_relationship', source, {\n    name,\n    table,\n    using: {},\n  });\n\nexport const getSaveRemoteDbRelationshipQuery = (\n  isObjRel: boolean,\n  tableName: string,\n  name: string,\n  remoteTable: Record<string, string>,\n  columnMapping: Record<string, string>,\n  source: string,\n  rSource: string,\n  isNew: boolean,\n  driver: string,\n  schema: string\n) => {\n  const args = {\n    source,\n    name,\n    table:\n      currentDriver !== 'bigquery'\n        ? { name: tableName, schema }\n        : { name: tableName, dataset: schema },\n    definition: {\n      to_source: {\n        source: rSource,\n        table:\n          driver !== 'bigquery'\n            ? remoteTable\n            : { name: remoteTable.name, dataset: remoteTable.schema },\n        relationship_type: isObjRel ? 'object' : 'array',\n        field_mapping: columnMapping,\n      },\n    },\n  };\n\n  return getMetadataQuery(\n    isNew ? 'create_remote_relationship' : 'update_remote_relationship',\n    source,\n    args\n  );\n};\n\nexport const getDropRemoteDbRelationshipQuery = (\n  name: string,\n  tableName: string,\n  source: string,\n  schema: string\n) =>\n  getMetadataQuery('delete_remote_relationship', source, {\n    name,\n    table:\n      currentDriver !== 'bigquery'\n        ? { name: tableName, schema }\n        : { name: tableName, dataset: schema },\n    source,\n  });\n\nexport const getAddRelationshipQuery = (\n  isObjRel: boolean,\n  table: QualifiedTable,\n  name: string,\n  remoteTable: QualifiedTable,\n  columnMapping: Record<string, string>,\n  source: string\n) => {\n  const args = {\n    source,\n    name,\n    table,\n    using: {\n      manual_configuration: {\n        remote_table: remoteTable,\n        column_mapping: columnMapping,\n      },\n    },\n  };\n  if (isObjRel) {\n    return getMetadataQuery('create_object_relationship', source, args);\n  }\n\n  return getMetadataQuery('create_array_relationship', source, args);\n};\n\nexport const getSetConsoleStateQuery = (\n  state: ConsoleState['console_opts']\n) => ({\n  type: 'set_catalog_state',\n  args: {\n    type: 'console',\n    state,\n  },\n});\n\nexport const getConsoleStateQuery = {\n  type: 'get_catalog_state',\n  args: {},\n};\n\nexport type SupportedEvents = 'cron' | 'one_off' | 'data';\n\nexport const getEventInvocationsLogByID = (\n  type: SupportedEvents,\n  event_id: string\n) => ({\n  type: 'get_scheduled_event_invocations',\n  args: {\n    type,\n    event_id,\n    get_rows_count: false,\n  },\n});\n\nexport const getEventInvocations = (\n  type: SupportedEvents,\n  limit: number,\n  offset: number,\n  triggerName?: string // is required for cron\n) => {\n  const query = {\n    type: 'get_scheduled_event_invocations',\n    args: {},\n  };\n\n  if (type === 'one_off') {\n    query.args = {\n      type,\n    };\n  } else {\n    query.args = {\n      type,\n      trigger_name: triggerName,\n    };\n  }\n\n  return {\n    ...query,\n    args: {\n      ...query.args,\n      limit,\n      offset,\n      get_rows_count: false,\n    },\n  };\n};\n\nexport const getScheduledEvents = (\n  type: SupportedEvents,\n  limit: number,\n  offset: number,\n  triggerOp: Exclude<TriggerOperation, 'invocation'>,\n  triggerName?: string // is required for cron triggers\n) => {\n  const query = {\n    type: 'get_scheduled_events',\n    args: {},\n  };\n  const statusPending = ['scheduled'];\n  const statusProcessed = ['delivered', 'dead', 'error'];\n\n  if (type === 'one_off') {\n    query.args = {\n      type,\n    };\n  } else {\n    query.args = {\n      type,\n      trigger_name: triggerName,\n    };\n  }\n\n  if (triggerOp === 'pending') {\n    query.args = {\n      ...query.args,\n      status: statusPending,\n    };\n  } else {\n    query.args = {\n      ...query.args,\n      status: statusProcessed,\n    };\n  }\n\n  return {\n    ...query,\n    args: {\n      ...query.args,\n      limit,\n      offset,\n      get_rows_count: false,\n    },\n  };\n};\n\nexport const deleteScheduledEvent = (\n  type: SupportedEvents,\n  event_id: string\n) => ({\n  type: 'delete_scheduled_event',\n  args: {\n    type,\n    event_id,\n  },\n});\n\nexport const invokeManualTriggerQuery = (\n  args: InvokeManualTriggerArgs,\n  source: string\n) => getMetadataQuery('invoke_event_trigger', source, args);\n\nexport const createFunctionPermissionQuery = (\n  source: string,\n  func: QualifiedFunction,\n  role: string\n) =>\n  getMetadataQuery('create_function_permission', source, {\n    function: func,\n    role,\n  });\n\nexport const dropFunctionPermissionQuery = (\n  source: string,\n  func: QualifiedFunction,\n  role: string\n) =>\n  getMetadataQuery('drop_function_permission', source, {\n    function: func,\n    role,\n  });\n\nexport const createRESTEndpointQuery = (args: RestEndpointEntry) => ({\n  type: 'create_rest_endpoint',\n  args,\n});\n\nexport const dropRESTEndpointQuery = (name: string) => ({\n  type: 'drop_rest_endpoint',\n  args: { name },\n});\n\nconst getMetadataQueryForRemoteSchema =\n  (queryName: 'add' | 'update') =>\n  (name: string, definition: RemoteSchemaDef, comment?: string) => ({\n    type: `${queryName}_remote_schema` as MetadataQueryType,\n    args: {\n      name,\n      definition,\n      comment: comment ?? null,\n    },\n  });\n\nexport const addRemoteSchemaQuery = getMetadataQueryForRemoteSchema('add');\n\nexport const updateRemoteSchemaQuery =\n  getMetadataQueryForRemoteSchema('update');\n\nexport const removeRemoteSchemaQuery = (name: string) => ({\n  type: 'remove_remote_schema',\n  args: { name },\n});\n"], "filenames": ["frontend/libs/console/legacy-ce/src/lib/components/Services/Actions/Sidebar/LeftSidebar.js", "frontend/libs/console/legacy-ce/src/lib/features/Actions/components/OASGenerator/OASGeneratorActions.tsx", "frontend/libs/console/legacy-ce/src/lib/metadata/queryUtils.ts"], "buggy_code_start_loc": [10, 6, 487], "buggy_code_end_loc": [135, 54, 487], "fixing_code_start_loc": [11, 7, 488], "fixing_code_end_loc": [140, 55, 489], "type": "CWE-22", "message": "Hasura is an open-source product that provides users GraphQL or REST APIs. A path traversal vulnerability has been discovered within Hasura GraphQL Engine prior to versions 1.3.4, 2.55.1, 2.20.1, and 2.21.0-beta1. Projects running on Hasura Cloud were not vulnerable. Self-hosted Hasura Projects with deployments that are publicly exposed and not protected by a WAF or other HTTP protection layer should be upgraded to version 1.3.4, 2.55.1, 2.20.1, or 2.21.0-beta1 to receive a patch.", "other": {"cve": {"id": "CVE-2023-27588", "sourceIdentifier": "security-advisories@github.com", "published": "2023-03-14T18:15:10.460", "lastModified": "2023-03-21T13:43:20.797", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Hasura is an open-source product that provides users GraphQL or REST APIs. A path traversal vulnerability has been discovered within Hasura GraphQL Engine prior to versions 1.3.4, 2.55.1, 2.20.1, and 2.21.0-beta1. Projects running on Hasura Cloud were not vulnerable. Self-hosted Hasura Projects with deployments that are publicly exposed and not protected by a WAF or other HTTP protection layer should be upgraded to version 1.3.4, 2.55.1, 2.20.1, or 2.21.0-beta1 to receive a patch."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-22"}, {"lang": "en", "value": "CWE-27"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:hasura:graphql_engine:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3.4", "matchCriteriaId": "966F6E14-F5DC-4610-95F4-19221345A44A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hasura:graphql_engine:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "2.11.5", "matchCriteriaId": "3E8B2A1F-26DF-4160-A1ED-6803FC345C58"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hasura:graphql_engine:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.12.0", "versionEndExcluding": "2.20.1", "matchCriteriaId": "9FCD45CF-6AE7-4EB5-B50F-2420E4167731"}]}]}], "references": [{"url": "https://github.com/hasura/graphql-engine/commit/dda54543ee1ecf647ca5d0971b140c3a7b9f4158", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/hasura/graphql-engine/releases/tag/v1.3.4", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/hasura/graphql-engine/releases/tag/v2.11.5", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/hasura/graphql-engine/releases/tag/v2.20.1", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/hasura/graphql-engine/releases/tag/v2.21.0-beta.1", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/hasura/graphql-engine/security/advisories/GHSA-c9rw-rw2f-mj4x", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/hasura/graphql-engine/commit/dda54543ee1ecf647ca5d0971b140c3a7b9f4158"}}