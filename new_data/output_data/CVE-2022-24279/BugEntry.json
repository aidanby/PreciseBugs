{"buggy_code": ["(function() {\n  (function(factory) {\n    if (typeof exports === \"object\") {\n      return module.exports = factory();\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([], factory);\n    }\n  })(function() {\n    var getAndCreate, getValue, isArray, isObject, objectUtils, setValue;\n    isObject = function(value) {\n      var type;\n      type = typeof value;\n      return value !== null && (type === 'object' || type === 'function');\n    };\n    isArray = function(object) {\n      if (Array.isArray != null) {\n        return Array.isArray(object);\n      } else {\n        return Object.prototype.toString.call(object) === \"[object Array]\";\n      }\n    };\n    getValue = function(path, object, valueIfMissing) {\n      var aPath, key, value;\n      if (valueIfMissing == null) {\n        valueIfMissing = void 0;\n      }\n      if (object == null) {\n        return valueIfMissing;\n      }\n      aPath = (\"\" + path).split(\".\");\n      value = object;\n      key = aPath.shift();\n      if (key === 'constructor' && typeof object[key] === 'function') {\n        return;\n      }\n      if (key === '__proto__') {\n        return;\n      }\n      if (aPath.length === 0) {\n        value = value[key.replace(\"%2E\", \".\")];\n        if (value == null) {\n          value = valueIfMissing;\n        }\n      } else {\n        while (value && key) {\n          value = value[key.replace(\"%2E\", \".\")];\n          if (value == null) {\n            value = valueIfMissing;\n          }\n          key = aPath.shift();\n        }\n        value = 0 === aPath.length ? value : valueIfMissing;\n      }\n      return value;\n    };\n    getAndCreate = function(path, object, defaultValue) {\n      var aPath, key, value;\n      if (object == null) {\n        return;\n      }\n      if (!isObject(object)) {\n        return;\n      }\n      aPath = (\"\" + path).split(\".\");\n      value = object;\n      key = aPath.shift();\n      if (key === 'constructor' && typeof object[key] === 'function') {\n        return object;\n      }\n      if (key === '__proto__') {\n        return object;\n      }\n      while (key) {\n        key = key.replace(\"%2E\", \".\");\n        if (value[key] == null) {\n          value[key] = {};\n        }\n        if (aPath.length === 0) {\n          if (defaultValue != null) {\n            value[key] = defaultValue;\n          }\n        }\n        value = value[key];\n        key = aPath.shift();\n      }\n      return value;\n    };\n    setValue = function(path, object, value) {\n      getAndCreate(path, object, value);\n      return object;\n    };\n\n    /**\n     *   A small set of utility functions for working with objects\n     *\n     *   @author     mdoeswijk\n     *   @module     objectUtils\n     *   @version    0.1\n     */\n    return objectUtils = {\n\n      /**\n       *   Checks if the provided parameter is an array\n       *\n       *   @function isArray\n       *   @param {Mixed}  object  The object to check\n       *\n       *   @return {Boolean} Returns true if the provided object is an array\n       *\n       */\n      isArray: isArray,\n\n      /**\n       *   Retrieves a value from the target object using the provided path\n       *\n       *   @function getValue\n       *   @param {String} path                The path to check on the object\n       *   @param {Object} object              The object to retrieve the value from\n       *   @param {Mixed}  [valueIfMissing]    Optional default value to return if the path isn't found\n       *\n       *   @return {Mixed} Returns the found value\n       *\n       */\n      getValue: getValue,\n\n      /**\n       *   Retrieves a value from the target object using the provided path\n       *   Creates the entire path if missing\n       *\n       *   @function getAndCreate\n       *   @param {String} path                The path to check on the object\n       *   @param {Object} object              The object to retrieve the value from\n       *   @param {Mixed}  [valueIfMissing]    Optional default value to set return if the path isn't found\n       *\n       *   @return {Mixed} Returns the found and/or created value\n       *\n       */\n      getAndCreate: getAndCreate,\n\n      /**\n       *   Sets a value on the target object using the provided path\n       *\n       *   @function setValue\n       *   @param {String} path                The path to check on the object\n       *   @param {Object} object              The object to retrieve the value from\n       *   @param {Mixed}  value               The value to set on the object at the provided path\n       *\n       *   @return {Object} Returns the updated object\n       *\n       */\n      setValue: setValue\n    };\n  });\n\n}).call(this);\n", "( ( factory ) ->\n    if typeof exports is \"object\"\n        module.exports = factory()\n    else if typeof define is \"function\" and define.amd\n        define( [], factory )\n\n)( () ->\n    isObject = ( value ) ->\n        type = typeof value\n        return value != null and ( type is 'object' or type is 'function' )\n\n    isArray = ( object ) ->\n        # This is lifted from underscore.js\n        # Reason is that it was the only reason to add underscore to some\n        # modules so this saves us more then a few kilobytes\n        #\n        if Array.isArray?\n            Array.isArray( object )\n        else\n            Object.prototype.toString.call( object ) == \"[object Array]\"\n\n    # Convenience function to retrieve a value from an object as if it was a\n    # selector-like path\n    #\n    # Example: child.attributes.0.value\n    #\n    getValue = ( path, object, valueIfMissing = undefined ) ->\n        if not object? then return valueIfMissing\n\n        aPath = \"#{path}\".split( \".\" )\n        value = object\n        key   = aPath.shift()\n\n        if key is 'constructor' and typeof object[key] is 'function'\n            return\n        if key is '__proto__'\n            return\n\n        if aPath.length is 0\n            # This is only a 1 deep check\n            #\n            value = value[ key.replace( \"%2E\", \".\" ) ]\n            value = valueIfMissing if not value?\n\n        else\n            while value and key\n                value = value[ key.replace( \"%2E\", \".\" ) ]\n                value = valueIfMissing if not value?\n                key   = aPath.shift()\n\n            value = if 0 is aPath.length then value else valueIfMissing\n\n        return value\n\n    getAndCreate = ( path, object, defaultValue ) ->\n        if not object? then return\n        if not isObject( object ) then return\n\n        aPath = \"#{path}\".split( \".\" )\n        value = object\n        key   = aPath.shift()\n\n        if key is 'constructor' and typeof object[key] is 'function'\n            return object\n        if key is '__proto__'\n            return object\n\n        while key\n            key = key.replace( \"%2E\", \".\" )\n\n            # Create non existing path element\n            #\n            if not value[ key ]?\n                value[ key ] = {}\n\n            if aPath.length is 0\n                # Assign the default value to the newly created key if supplied\n                #\n                value[ key ] = defaultValue if defaultValue?\n\n            # Process the next path element\n            #\n            value = value[ key ]\n            key   = aPath.shift()\n\n        return value\n\n    setValue = ( path, object, value ) ->\n        getAndCreate( path, object, value )\n        return object\n\n    ###*\n    #   A small set of utility functions for working with objects\n    #\n    #   @author     mdoeswijk\n    #   @module     objectUtils\n    #   @version    0.1\n    ###\n    objectUtils =\n        ###*\n        #   Checks if the provided parameter is an array\n        #\n        #   @function isArray\n        #   @param {Mixed}  object  The object to check\n        #\n        #   @return {Boolean} Returns true if the provided object is an array\n        #\n        ###\n        isArray:        isArray\n\n        ###*\n        #   Retrieves a value from the target object using the provided path\n        #\n        #   @function getValue\n        #   @param {String} path                The path to check on the object\n        #   @param {Object} object              The object to retrieve the value from\n        #   @param {Mixed}  [valueIfMissing]    Optional default value to return if the path isn't found\n        #\n        #   @return {Mixed} Returns the found value\n        #\n        ###\n        getValue:       getValue\n\n        ###*\n        #   Retrieves a value from the target object using the provided path\n        #   Creates the entire path if missing\n        #\n        #   @function getAndCreate\n        #   @param {String} path                The path to check on the object\n        #   @param {Object} object              The object to retrieve the value from\n        #   @param {Mixed}  [valueIfMissing]    Optional default value to set return if the path isn't found\n        #\n        #   @return {Mixed} Returns the found and/or created value\n        #\n        ###\n        getAndCreate:   getAndCreate\n\n        ###*\n        #   Sets a value on the target object using the provided path\n        #\n        #   @function setValue\n        #   @param {String} path                The path to check on the object\n        #   @param {Object} object              The object to retrieve the value from\n        #   @param {Mixed}  value               The value to set on the object at the provided path\n        #\n        #   @return {Object} Returns the updated object\n        #\n        ###\n        setValue:       setValue\n )\n", "chai        = require \"chai\"\nobjectUtils = require \"../lib/utils.js\"\n\ndescribe( \"Prototype pollution\", () ->\n    describe( \"#setValue()\", () ->\n        it( \"Should not pollute value\", () ->\n            objectUtils.setValue( '__proto__.polluted', {}, true )\n\n            chai.expect( global.polluted ).to.eql( undefined )\n        )\n    )\n)\n"], "fixing_code": ["(function() {\n  (function(factory) {\n    if (typeof exports === \"object\") {\n      return module.exports = factory();\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([], factory);\n    }\n  })(function() {\n    var getAndCreate, getValue, isArray, isObject, objectUtils, setValue;\n    isObject = function(value) {\n      var type;\n      type = typeof value;\n      return value !== null && (type === 'object' || type === 'function');\n    };\n    isArray = function(object) {\n      if (Array.isArray != null) {\n        return Array.isArray(object);\n      } else {\n        return Object.prototype.toString.call(object) === \"[object Array]\";\n      }\n    };\n    getValue = function(path, object, valueIfMissing) {\n      var aPath, key, value;\n      if (valueIfMissing == null) {\n        valueIfMissing = void 0;\n      }\n      if (object == null) {\n        return valueIfMissing;\n      }\n      aPath = (\"\" + path).split(\".\");\n      value = object;\n      key = aPath.shift();\n      if (aPath.length === 0) {\n        value = value[key.replace(\"%2E\", \".\")];\n        if (value == null) {\n          value = valueIfMissing;\n        }\n      } else {\n        while (value && key) {\n          value = value[key.replace(\"%2E\", \".\")];\n          if (value == null) {\n            value = valueIfMissing;\n          }\n          key = aPath.shift();\n        }\n        value = 0 === aPath.length ? value : valueIfMissing;\n      }\n      return value;\n    };\n    getAndCreate = function(path, object, defaultValue) {\n      var aPath, key, value;\n      if (object == null) {\n        return;\n      }\n      if (!isObject(object)) {\n        return;\n      }\n      aPath = (\"\" + path).split(\".\");\n      value = object;\n      key = aPath.shift();\n      while (key) {\n        key = key.replace(\"%2E\", \".\");\n        if (value[key] == null) {\n          value[key] = {};\n        }\n        if (!value.hasOwnProperty(key)) {\n          return;\n        }\n        if (aPath.length === 0) {\n          if (defaultValue != null) {\n            value[key] = defaultValue;\n          }\n        }\n        value = value[key];\n        key = aPath.shift();\n      }\n      return value;\n    };\n    setValue = function(path, object, value) {\n      getAndCreate(path, object, value);\n      return object;\n    };\n\n    /**\n     *   A small set of utility functions for working with objects\n     *\n     *   @author     mdoeswijk\n     *   @module     objectUtils\n     *   @version    0.1\n     */\n    return objectUtils = {\n\n      /**\n       *   Checks if the provided parameter is an array\n       *\n       *   @function isArray\n       *   @param {Mixed}  object  The object to check\n       *\n       *   @return {Boolean} Returns true if the provided object is an array\n       *\n       */\n      isArray: isArray,\n\n      /**\n       *   Retrieves a value from the target object using the provided path\n       *\n       *   @function getValue\n       *   @param {String} path                The path to check on the object\n       *   @param {Object} object              The object to retrieve the value from\n       *   @param {Mixed}  [valueIfMissing]    Optional default value to return if the path isn't found\n       *\n       *   @return {Mixed} Returns the found value\n       *\n       */\n      getValue: getValue,\n\n      /**\n       *   Retrieves a value from the target object using the provided path\n       *   Creates the entire path if missing\n       *\n       *   @function getAndCreate\n       *   @param {String} path                The path to check on the object\n       *   @param {Object} object              The object to retrieve the value from\n       *   @param {Mixed}  [valueIfMissing]    Optional default value to set return if the path isn't found\n       *\n       *   @return {Mixed} Returns the found and/or created value\n       *\n       */\n      getAndCreate: getAndCreate,\n\n      /**\n       *   Sets a value on the target object using the provided path\n       *\n       *   @function setValue\n       *   @param {String} path                The path to check on the object\n       *   @param {Object} object              The object to retrieve the value from\n       *   @param {Mixed}  value               The value to set on the object at the provided path\n       *\n       *   @return {Object} Returns the updated object\n       *\n       */\n      setValue: setValue\n    };\n  });\n\n}).call(this);\n", "( ( factory ) ->\n    if typeof exports is \"object\"\n        module.exports = factory()\n    else if typeof define is \"function\" and define.amd\n        define( [], factory )\n\n)( () ->\n    isObject = ( value ) ->\n        type = typeof value\n        return value != null and ( type is 'object' or type is 'function' )\n\n    isArray = ( object ) ->\n        # This is lifted from underscore.js\n        # Reason is that it was the only reason to add underscore to some\n        # modules so this saves us more then a few kilobytes\n        #\n        if Array.isArray?\n            Array.isArray( object )\n        else\n            Object.prototype.toString.call( object ) == \"[object Array]\"\n\n    # Convenience function to retrieve a value from an object as if it was a\n    # selector-like path\n    #\n    # Example: child.attributes.0.value\n    #\n    getValue = ( path, object, valueIfMissing = undefined ) ->\n        if not object? then return valueIfMissing\n\n        aPath = \"#{path}\".split( \".\" )\n        value = object\n        key   = aPath.shift()\n\n        if aPath.length is 0\n            # This is only a 1 deep check\n            #\n            value = value[ key.replace( \"%2E\", \".\" ) ]\n            value = valueIfMissing if not value?\n\n        else\n            while value and key\n                value = value[ key.replace( \"%2E\", \".\" ) ]\n                value = valueIfMissing if not value?\n                key   = aPath.shift()\n\n            value = if 0 is aPath.length then value else valueIfMissing\n\n        return value\n\n    getAndCreate = ( path, object, defaultValue ) ->\n        if not object? then return\n        if not isObject( object ) then return\n\n        aPath = \"#{path}\".split( \".\" )\n        value = object\n        key   = aPath.shift()\n\n        while key\n            key = key.replace( \"%2E\", \".\" )\n\n            # Create non existing path element\n            #\n            if not value[ key ]?\n                value[ key ] = {}\n\n            if not value.hasOwnProperty(key)\n                return\n\n            if aPath.length is 0\n                # Assign the default value to the newly created key if supplied\n                #\n                value[ key ] = defaultValue if defaultValue?\n\n            # Process the next path element\n            #\n            value = value[ key ]\n            key   = aPath.shift()\n\n        return value\n\n    setValue = ( path, object, value ) ->\n        getAndCreate( path, object, value )\n        return object\n\n    ###*\n    #   A small set of utility functions for working with objects\n    #\n    #   @author     mdoeswijk\n    #   @module     objectUtils\n    #   @version    0.1\n    ###\n    objectUtils =\n        ###*\n        #   Checks if the provided parameter is an array\n        #\n        #   @function isArray\n        #   @param {Mixed}  object  The object to check\n        #\n        #   @return {Boolean} Returns true if the provided object is an array\n        #\n        ###\n        isArray:        isArray\n\n        ###*\n        #   Retrieves a value from the target object using the provided path\n        #\n        #   @function getValue\n        #   @param {String} path                The path to check on the object\n        #   @param {Object} object              The object to retrieve the value from\n        #   @param {Mixed}  [valueIfMissing]    Optional default value to return if the path isn't found\n        #\n        #   @return {Mixed} Returns the found value\n        #\n        ###\n        getValue:       getValue\n\n        ###*\n        #   Retrieves a value from the target object using the provided path\n        #   Creates the entire path if missing\n        #\n        #   @function getAndCreate\n        #   @param {String} path                The path to check on the object\n        #   @param {Object} object              The object to retrieve the value from\n        #   @param {Mixed}  [valueIfMissing]    Optional default value to set return if the path isn't found\n        #\n        #   @return {Mixed} Returns the found and/or created value\n        #\n        ###\n        getAndCreate:   getAndCreate\n\n        ###*\n        #   Sets a value on the target object using the provided path\n        #\n        #   @function setValue\n        #   @param {String} path                The path to check on the object\n        #   @param {Object} object              The object to retrieve the value from\n        #   @param {Mixed}  value               The value to set on the object at the provided path\n        #\n        #   @return {Object} Returns the updated object\n        #\n        ###\n        setValue:       setValue\n )\n", "chai        = require \"chai\"\nobjectUtils = require \"../lib/utils.js\"\n\ndescribe( \"Prototype pollution\", () ->\n    describe( \"#setValue()\", () ->\n        it( \"Should not pollute value\", () ->\n            objectUtils.setValue( '__proto__.polluted', {}, true )\n            chai.expect( global.polluted ).to.eql( undefined )\n\n            objectUtils.setValue('this.constructor.prototype.polluted', {}, 'yes');\n            chai.expect( {}.polluted ).to.eql( undefined )\n        )\n    )\n)\n"], "filenames": ["lib/utils.js", "src/utils.coffee", "test/prototype-pollution.coffee"], "buggy_code_start_loc": [33, 34, 7], "buggy_code_end_loc": [76, 74, 10], "fixing_code_start_loc": [32, 33, 8], "fixing_code_end_loc": [68, 68, 12], "type": "CWE-1321", "message": "The package madlib-object-utils before 0.1.8 are vulnerable to Prototype Pollution via the setValue method, as it allows an attacker to merge object prototypes into it. *Note:* This vulnerability derives from an incomplete fix of [CVE-2020-7701](https://security.snyk.io/vuln/SNYK-JS-MADLIBOBJECTUTILS-598676)", "other": {"cve": {"id": "CVE-2022-24279", "sourceIdentifier": "report@snyk.io", "published": "2022-04-15T20:15:11.010", "lastModified": "2022-04-25T18:50:59.470", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The package madlib-object-utils before 0.1.8 are vulnerable to Prototype Pollution via the setValue method, as it allows an attacker to merge object prototypes into it. *Note:* This vulnerability derives from an incomplete fix of [CVE-2020-7701](https://security.snyk.io/vuln/SNYK-JS-MADLIBOBJECTUTILS-598676)"}, {"lang": "es", "value": "El paquete madlib-object-utils versiones anteriores a 0.1.8, es vulnerable a la Contaminaci\u00f3n de Prototipos por medio del m\u00e9todo setValue, ya que permite a un atacante fusionar prototipos de objetos en \u00e9l. *Nota:* Esta vulnerabilidad deriva de una correcci\u00f3n incompleta de [CVE-2020-7701](https://security.snyk.io/vuln/SNYK-JS-MADLIBOBJECTUTILS-598676)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1321"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:springtree:madlib-object-utils:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "0.1.8", "matchCriteriaId": "B7F84A48-3CD3-4098-A46F-0624CD0C8339"}]}]}], "references": [{"url": "https://github.com/Qwerios/madlib-object-utils/commit/8d5d54c11c8fb9a7980a99778329acd13e3ef98f", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-MADLIBOBJECTUTILS-2388572", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Qwerios/madlib-object-utils/commit/8d5d54c11c8fb9a7980a99778329acd13e3ef98f"}}