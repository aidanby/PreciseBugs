{"buggy_code": ["export BASE_SPACE=$(shell pwd)\nexport BUILD_SPACE=$(BASE_SPACE)/build\nexport AOC_BASE_SPACE=$(BASE_SPACE)/aws-otel-collector\nexport AOC_BUILD_SPACE=$(AOC_BASE_SPACE)/build\n\nVERSION = $(shell echo `git describe --tag --dirty``git status --porcelain 2>/dev/null| grep -q \"^??\" &&echo '-untracked'`)\nVERSION := $(shell echo ${VERSION} | sed -e \"s/^v//\")\nnightly-release: VERSION := $(shell echo ${VERSION}-nightly-build)\n# In case building outside of a git repo, use the version presented in the CWAGENT_VERSION file as a fallback\nifeq ($(VERSION),)\nVERSION := `cat CWAGENT_VERSION`\nendif\n\n# Determine agent build mode, default to PIE mode\nifndef CWAGENT_BUILD_MODE\nCWAGENT_BUILD_MODE=default\nendif\n\nBUILD := $(shell date -u +\"%Y-%m-%dT%H:%M:%SZ\")\nLDFLAGS = -s -w\nLDFLAGS +=  -X github.com/aws/amazon-cloudwatch-agent/cfg/agentinfo.VersionStr=${VERSION}\nLDFLAGS +=  -X github.com/aws/amazon-cloudwatch-agent/cfg/agentinfo.BuildStr=${BUILD}\nLINUX_AMD64_BUILD = CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -buildmode=${CWAGENT_BUILD_MODE} -ldflags=\"${LDFLAGS}\" -o $(BUILD_SPACE)/bin/linux_amd64\nLINUX_ARM64_BUILD = CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -buildmode=${CWAGENT_BUILD_MODE} -ldflags=\"${LDFLAGS}\" -o $(BUILD_SPACE)/bin/linux_arm64\nWIN_BUILD = GOOS=windows GOARCH=amd64 go build -buildmode=${CWAGENT_BUILD_MODE} -ldflags=\"${LDFLAGS}\" -o $(BUILD_SPACE)/bin/windows_amd64\nDARWIN_BUILD = GO111MODULE=on GOOS=darwin GOARCH=amd64 go build -ldflags=\"${LDFLAGS}\" -o $(BUILD_SPACE)/bin/darwin_amd64\n\nIMAGE = amazon/cloudwatch-agent:$(VERSION)\nDOCKER_BUILD_FROM_SOURCE = docker build -t $(IMAGE) -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile\n\nAOC_IMPORT_PATH=github.com/aws-observability/aws-otel-collector\nAOC_GIT_SHA = $(shell cd $(AOC_BASE_SPACE) && git rev-parse HEAD)\nAOC_LDFLAGS = -s -w -X $(AOC_IMPORT_PATH)/tools/version.GitHash=$(AOC_GIT_SHA)\nAOC_LDFLAGS += -X github.com/open-telemetry/opentelemetry-collector-contrib/exporter/awsxrayexporter.collectorDistribution=cwagent-otel-collector\nAOC_LDFLAGS += -X github.com/open-telemetry/opentelemetry-collector-contrib/exporter/awsemfexporter.collectorDistribution=cwagent-otel-collector\nAOC_LDFLAGS += -X $(AOC_IMPORT_PATH)/tools/version.Version=$(VERSION)\nAOC_LDFLAGS += -X $(AOC_IMPORT_PATH)/tools/version.Date=$(BUILD)\nAOC_LDFLAGS += -X $(AOC_IMPORT_PATH)/pkg/userutils.defaultUser=cwagent\nAOC_LDFLAGS += -X $(AOC_IMPORT_PATH)/pkg/userutils.defaultInstallPath=/opt/aws/amazon-cloudwatch-agent/cwagent-otel-collector/\nAOC_LDFLAGS += -X $(AOC_IMPORT_PATH)/pkg/logger.UnixLogPath=/opt/aws/amazon-cloudwatch-agent/cwagent-otel-collector/logs/cwagent-otel-collector.log\nAOC_LDFLAGS += -X $(AOC_IMPORT_PATH)/pkg/logger.WindowsLogPath=C:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\CWAgentOtelCollector\\\\Logs\\\\cwagent-otel-collector.log\nAOC_LDFLAGS += -X $(AOC_IMPORT_PATH)/pkg/extraconfig.unixExtraConfigPath=/opt/aws/amazon-cloudwatch-agent/cwagent-otel-collector/etc/extracfg.txt\nAOC_LDFLAGS += -X $(AOC_IMPORT_PATH)/pkg/extraconfig.windowsExtraConfigPath=C:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\CWAgentOtelCollector\\\\extracfg.txt\n\nCW_AGENT_IMPORT_PATH=https://github.com/aws/amazon-cloudwatch-agent.git\nALL_SRC := $(shell find . -name '*.go' -type f | sort)\nTOOLS_BIN_DIR := $(abspath ./build/tools)\n\nGOIMPORTS_OPT?= -w -local $(CW_AGENT_IMPORT_PATH)\n\nGOIMPORTS = $(TOOLS_BIN_DIR)/goimports\nSHFMT = $(TOOLS_BIN_DIR)/shfmt\nLINTER = $(TOOLS_BIN_DIR)/golangci-lint\nrelease: clean test build package-rpm package-deb package-win package-darwin\n\nnightly-release: release\n\nbuild: check_secrets cwagent-otel-collector amazon-cloudwatch-agent config-translator start-amazon-cloudwatch-agent amazon-cloudwatch-agent-config-wizard config-downloader\n\ncheck_secrets::\n\tif grep --exclude-dir=build --exclude-dir=vendor -E \"(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}|(\\\"|')?(AWS|aws|Aws)?_?(SECRET|secret|Secret)?_?(ACCESS|access|Access)?_?(KEY|key|Key)(\\\"|')?\\\\s*(:|=>|=)\\\\s*(\\\"|')?[A-Za-z0-9/\\\\+=]{40}(\\\"|')?\" -Rn .; then echo \"check_secrets failed\"; exit 1; fi;\n\ncreate-version-file:\n\t@echo Version: ${VERSION}\n\t@echo Building time: ${BUILD}\n\techo \"$(VERSION)\" > CWAGENT_VERSION\n\ncopy-version-file: create-version-file\n\tmkdir -p build/bin/\n\tcp CWAGENT_VERSION $(BUILD_SPACE)/bin/CWAGENT_VERSION\n\namazon-cloudwatch-agent: copy-version-file\n\t@echo Building amazon-cloudwatch-agent\n\t$(LINUX_AMD64_BUILD)/amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n\t$(LINUX_ARM64_BUILD)/amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n\t$(WIN_BUILD)/amazon-cloudwatch-agent.exe github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n\t$(DARWIN_BUILD)/amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n\n# Save AWS OTEL Collector GIT SHA to a file so it can be easily referenced from outside this repository.\nupdate-submodule:\n\tgit submodule update --init\n\techo \"$(AOC_GIT_SHA)\" > AOC_GIT_SHA\n\ncwagent-otel-collector: update-submodule\n\t@echo Building aws-otel-collector\n\tcd $(AOC_BASE_SPACE) && CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -buildmode=${CWAGENT_BUILD_MODE} -ldflags=\"${AOC_LDFLAGS}\" -o $(BUILD_SPACE)/bin/linux_amd64/cwagent-otel-collector $(AOC_IMPORT_PATH)/cmd/awscollector\n\tcd $(AOC_BASE_SPACE) && CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -buildmode=${CWAGENT_BUILD_MODE} -ldflags=\"${AOC_LDFLAGS}\" -o $(BUILD_SPACE)/bin/linux_arm64/cwagent-otel-collector $(AOC_IMPORT_PATH)/cmd/awscollector\n\tcd $(AOC_BASE_SPACE) && CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -buildmode=${CWAGENT_BUILD_MODE} -ldflags=\"${AOC_LDFLAGS}\" -o $(BUILD_SPACE)/bin/windows_amd64/cwagent-otel-collector.exe $(AOC_IMPORT_PATH)/cmd/awscollector\n\nconfig-translator: copy-version-file\n\t@echo Building config-translator\n\t$(LINUX_AMD64_BUILD)/config-translator github.com/aws/amazon-cloudwatch-agent/cmd/config-translator\n\t$(LINUX_ARM64_BUILD)/config-translator github.com/aws/amazon-cloudwatch-agent/cmd/config-translator\n\t$(WIN_BUILD)/config-translator.exe github.com/aws/amazon-cloudwatch-agent/cmd/config-translator\n\t$(DARWIN_BUILD)/config-translator github.com/aws/amazon-cloudwatch-agent/cmd/config-translator\n\nstart-amazon-cloudwatch-agent: copy-version-file\n\t@echo Building start-amazon-cloudwatch-agent\n\t$(LINUX_AMD64_BUILD)/start-amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/start-amazon-cloudwatch-agent\n\t$(LINUX_ARM64_BUILD)/start-amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/start-amazon-cloudwatch-agent\n\t$(WIN_BUILD)/start-amazon-cloudwatch-agent.exe github.com/aws/amazon-cloudwatch-agent/cmd/start-amazon-cloudwatch-agent\n\t$(DARWIN_BUILD)/start-amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/start-amazon-cloudwatch-agent\n\namazon-cloudwatch-agent-config-wizard: copy-version-file\n\t@echo Building amazon-cloudwatch-agent-config-wizard\n\t$(LINUX_AMD64_BUILD)/amazon-cloudwatch-agent-config-wizard github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent-config-wizard\n\t$(LINUX_ARM64_BUILD)/amazon-cloudwatch-agent-config-wizard github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent-config-wizard\n\t$(WIN_BUILD)/amazon-cloudwatch-agent-config-wizard.exe github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent-config-wizard\n\t$(DARWIN_BUILD)/amazon-cloudwatch-agent-config-wizard github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent-config-wizard\n\nconfig-downloader: copy-version-file\n\t@echo Building config-downloader\n\t$(LINUX_AMD64_BUILD)/config-downloader github.com/aws/amazon-cloudwatch-agent/cmd/config-downloader\n\t$(LINUX_ARM64_BUILD)/config-downloader github.com/aws/amazon-cloudwatch-agent/cmd/config-downloader\n\t$(WIN_BUILD)/config-downloader.exe github.com/aws/amazon-cloudwatch-agent/cmd/config-downloader\n\t$(DARWIN_BUILD)/config-downloader github.com/aws/amazon-cloudwatch-agent/cmd/config-downloader\n\n# A fast build that only builds amd64, we don't need wizard and config downloader\nbuild-for-docker: build-for-docker-amd64\n\nbuild-for-docker-amd64:\n\t$(LINUX_AMD64_BUILD)/amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n\t$(LINUX_AMD64_BUILD)/start-amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/start-amazon-cloudwatch-agent\n\t$(LINUX_AMD64_BUILD)/config-translator github.com/aws/amazon-cloudwatch-agent/cmd/config-translator\n\nbuild-for-docker-arm64:\n\t$(LINUX_ARM64_BUILD)/amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n\t$(LINUX_ARM64_BUILD)/start-amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/start-amazon-cloudwatch-agent\n\t$(LINUX_ARM64_BUILD)/config-translator github.com/aws/amazon-cloudwatch-agent/cmd/config-translator\n\n#Install from source for golangci-lint is not recommended based on https://golangci-lint.run/usage/install/#install-from-source so using binary\n#installation\ninstall-tools:\n\tGOBIN=$(TOOLS_BIN_DIR) go install golang.org/x/tools/cmd/goimports\n\tGOBIN=$(TOOLS_BIN_DIR) go install mvdan.cc/sh/v3/cmd/shfmt@latest\n\tcurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(TOOLS_BIN_DIR) v1.45.2\n\nfmt: install-tools\n\tgo fmt ./...\n\techo $(ALL_SRC) | xargs -n 10 $(GOIMPORTS) $(GOIMPORTS_OPT)\n\nfmt-sh: install-tools\n\t${SHFMT} -w -d -i 5 .\n\nlint: install-tools\n\t${LINTER} run ./...\n\ntest:\n\tCGO_ENABLED=0 go test -coverprofile coverage.txt -failfast ./awscsm/... ./cfg/... ./cmd/... ./handlers/... ./internal/... ./logger/... ./logs/... ./metric/... ./plugins/... ./profiler/... ./tool/... ./translator/...\n\nclean::\n\trm -rf release/ build/\n\trm -f CWAGENT_VERSION\n\npackage-prepare-rpm:\n\t# amd64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/LICENSE $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/NOTICE $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/THIRD-PARTY-LICENSES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/dependencies/cwagent-otel-collector.service $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/cwagent-otel-collector.conf $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(AOC_BASE_SPACE)/config.yaml $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/predefined-config-data\n\n\t# arm64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/LICENSE $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/NOTICE $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/THIRD-PARTY-LICENSES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/dependencies/cwagent-otel-collector.service $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/cwagent-otel-collector.conf $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(AOC_BASE_SPACE)/config.yaml $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/predefined-config-data\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-deb:\n\t# amd64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/LICENSE $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/NOTICE $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/THIRD-PARTY-LICENSES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/dependencies/cwagent-otel-collector.service $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/cwagent-otel-collector.conf $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(AOC_BASE_SPACE)/config.yaml $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/predefined-config-data\n\n\t# arm64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/LICENSE $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/NOTICE $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/THIRD-PARTY-LICENSES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/dependencies/cwagent-otel-collector.service $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/cwagent-otel-collector.conf $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(AOC_BASE_SPACE)/config.yaml $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/predefined-config-data\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\tcp -rf $(BASE_SPACE)/packaging $(BUILD_SPACE)/\n\npackage-prepare-win-zip:\n\t# amd64 win\n\tmkdir -p $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/windows_amd64/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/LICENSE $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/NOTICE $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/THIRD-PARTY-LICENSES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp ${BASE_SPACE}/packaging/windows/amazon-cloudwatch-agent-ctl.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/install.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/uninstall.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(AOC_BASE_SPACE)/config.yaml $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/predefined-config-data\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-darwin-tar:\n\t# amd64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_amd64/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/LICENSE $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/NOTICE $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/THIRD-PARTY-LICENSES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\n.PHONY: package-rpm\npackage-rpm: package-prepare-rpm\n\tARCH=amd64 TARGET_SUPPORTED_ARCH=x86_64 PREPKGPATH=\"$(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg\" $(BUILD_SPACE)/Tools/src/create_rpm.sh\n\tARCH=arm64 TARGET_SUPPORTED_ARCH=aarch64 PREPKGPATH=\"$(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\" $(BUILD_SPACE)/Tools/src/create_rpm.sh\n\n.PHONY: package-deb\npackage-deb: package-prepare-deb\n\tARCH=amd64 TARGET_SUPPORTED_ARCH=x86_64 PREPKGPATH=\"$(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg\" $(BUILD_SPACE)/Tools/src/create_deb.sh\n\tARCH=arm64 TARGET_SUPPORTED_ARCH=aarch64 PREPKGPATH=\"$(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg\" $(BUILD_SPACE)/Tools/src/create_deb.sh\n\n.PHONY: package-win\npackage-win: package-prepare-win-zip\n\tARCH=amd64 TARGET_SUPPORTED_ARCH=x86_64 PREPKGPATH=\"$(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg\" $(BUILD_SPACE)/Tools/src/create_win.sh\n\n.PHONY: package-darwin\npackage-darwin: package-prepare-darwin-tar\n\tARCH=amd64 TARGET_SUPPORTED_ARCH=x86_64 PREPKGPATH=\"$(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg\" $(BUILD_SPACE)/Tools/src/create_darwin.sh\n\n.PHONY: fmt fmt-sh build test clean\n\n.PHONY: dockerized-build dockerized-build-vendor\ndockerized-build:\n\t$(DOCKER_BUILD_FROM_SOURCE) .\n\t@echo Built image:\n\t@echo $(IMAGE)\n\n# Use vendor instead of proxy when building w/ vendor folder\ndockerized-build-vendor:\n\t$(DOCKER_BUILD_FROM_SOURCE) --build-arg GO111MODULE=off .\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT\n\npackage main\n\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"os\"\n\t\"os/user\"\n\t\"path/filepath\"\n\n\t\"github.com/aws/amazon-cloudwatch-agent/cfg/commonconfig\"\n\t\"github.com/aws/amazon-cloudwatch-agent/translator\"\n\t\"github.com/aws/amazon-cloudwatch-agent/translator/cmdutil\"\n\t\"github.com/aws/amazon-cloudwatch-agent/translator/context\"\n\ttranslatorUtil \"github.com/aws/amazon-cloudwatch-agent/translator/util\"\n)\n\nconst (\n\texitErrorMessage  = \"Configuration validation first phase failed. Agent version: %v. Verify the JSON input is only using features supported by this version.\\n\"\n\tversion           = \"1.0\"\n\tenvConfigFileName = \"env-config.json\"\n)\n\nfunc initFlags() {\n\tvar inputOs = flag.String(\"os\", \"\", \"Please provide the os preference, valid value: windows/linux.\")\n\tvar inputJsonFile = flag.String(\"input\", \"\", \"Please provide the path of input agent json config file\")\n\tvar inputJsonDir = flag.String(\"input-dir\", \"\", \"Please provide the path of input agent json config directory.\")\n\tvar inputTomlFile = flag.String(\"output\", \"\", \"Please provide the path of the output CWAgent config file\")\n\tvar inputMode = flag.String(\"mode\", \"ec2\", \"Please provide the mode, i.e. ec2, onPremise, auto\")\n\tvar inputConfig = flag.String(\"config\", \"\", \"Please provide the common-config file\")\n\tvar multiConfig = flag.String(\"multi-config\", \"remove\", \"valid values: default, append, remove\")\n\tflag.Parse()\n\n\tctx := context.CurrentContext()\n\tctx.SetOs(*inputOs)\n\tctx.SetInputJsonFilePath(*inputJsonFile)\n\tctx.SetInputJsonDirPath(*inputJsonDir)\n\tctx.SetMultiConfig(*multiConfig)\n\tctx.SetOutputTomlFilePath(*inputTomlFile)\n\n\tif *inputConfig != \"\" {\n\t\tf, err := os.Open(*inputConfig)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"E! Failed to open common-config file %s with error: %v\", *inputConfig, err)\n\t\t}\n\t\tdefer f.Close()\n\t\tconf, err := commonconfig.Parse(f)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"E! Failed to parse common-config file %s with error: %v\", *inputConfig, err)\n\t\t}\n\t\tctx.SetCredentials(conf.CredentialsMap())\n\t\tctx.SetProxy(conf.ProxyMap())\n\t\tctx.SetSSL(conf.SSLMap())\n\t}\n\ttranslatorUtil.SetProxyEnv(ctx.Proxy())\n\ttranslatorUtil.SetSSLEnv(ctx.SSL())\n\tctx.SetMode(translatorUtil.DetectAgentMode(*inputMode))\n}\n\n/**\n *\tconfig-translator --input ${JSON} --input-dir ${JSON_DIR} --output ${TOML} --mode ${param_mode} --config ${COMMON_CONFIG}\n *  --multi-config [default|append|remove]\n *\n *\t\tmulti-config:\n *\t\t\tdefault:\tonly process .tmp files\n *\t\t\tappend:\t\tprocess both existing files and .tmp files\n *\t\t\tremove:\t\tonly process existing files\n */\nfunc main() {\n\tinitFlags()\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\t// Only emit error message if panic content is string(pre-checked)\n\t\t\t// Not emitting the non-handled error message for now, we don't want to show non-user-friendly error message to customer\n\t\t\tif val, ok := r.(string); ok {\n\t\t\t\tlog.Println(val)\n\t\t\t}\n\t\t\t//If the Input JSON config file is invalid, output all the error path and error messages.\n\t\t\tfor _, errMessage := range translator.ErrorMessages {\n\t\t\t\tlog.Println(errMessage)\n\t\t\t}\n\t\t\tlog.Printf(exitErrorMessage, version)\n\t\t\tos.Exit(1)\n\t\t}\n\t}()\n\tctx := context.CurrentContext()\n\n\tmergedJsonConfigMap, err := cmdutil.GenerateMergedJsonConfigMap(ctx)\n\tif err != nil {\n\t\tlog.Panicf(\"E! Failed to generate merged json config: %v\", err)\n\t}\n\n\tif !ctx.RunInContainer() {\n\t\t// run as user only applies to non container situation.\n\t\tcurrent, err := user.Current()\n\t\tif err == nil && current.Name == \"root\" {\n\t\t\trunAsUser, err := cmdutil.DetectRunAsUser(mergedJsonConfigMap)\n\t\t\tif err != nil {\n\t\t\t\tlog.Panic(\"E! Failed to detectRunAsUser\")\n\t\t\t}\n\t\t\tcmdutil.VerifyCredentials(ctx, runAsUser)\n\t\t}\n\t}\n\n\ttomlConfigPath := cmdutil.GetTomlConfigPath(ctx.OutputTomlFilePath())\n\tcmdutil.TranslateJsonMapToTomlFile(mergedJsonConfigMap, tomlConfigPath)\n\t// Put env config into the same folder as the toml config.\n\tenvConfigPath := filepath.Join(filepath.Dir(tomlConfigPath), envConfigFileName)\n\tcmdutil.TranslateJsonMapToEnvConfigFile(mergedJsonConfigMap, envConfigPath)\n}\n", "<?xml version='1.0' encoding='UTF-8'?>\n<Wix xmlns='http://schemas.microsoft.com/wix/2006/wi'\n     xmlns:util='http://schemas.microsoft.com/wix/UtilExtension'>\n\n  <?define FixPermissionScriptAction=\"\"powershell.exe\" -ExecutionPolicy Bypass -File \"[INSTALLDIR]permission.ps1\"?>\n\n  <Product Id='*'\n    Name='Amazon CloudWatch Agent'\n    UpgradeCode='c537c936-91b3-4270-94d7-e128acfc3e86'\n    Language='1033'\n    Codepage='1252'\n    Version='<version>'\n    Manufacturer='Amazon.com, Inc.'>\n\n    <Package Id='*'\n      Keywords='Installer'\n      Description=\"Amazon CloudWatch Agent Installer\"\n      Comments='Copyright 2018 Amazon.com, Inc. and its affiliates. All Rights Reserved.'\n      Manufacturer='Amazon.com, Inc.'\n      InstallerVersion='200'\n      Languages='1033'\n      Compressed='yes'\n      SummaryCodepage='1252'\n      InstallScope=\"perMachine\"\n      Platform=\"x64\"\n    />\n\n    <MediaTemplate EmbedCab='yes' />\n\n    <Feature Id='ProductFeature' Title=\"Amazon CloudWatch Agent\" Level='1'>\n      <ComponentRef Id='StarterEXE' />\n      <ComponentRef Id='AgentEXE' />\n      <ComponentRef Id='WizardEXE' />\n      <ComponentRef Id='Ctl' />\n      <ComponentRef Id='SchemaJSON' />\n      <ComponentRef Id='DownloaderEXE' />\n      <ComponentRef Id='TranslatorEXE' />\n      <ComponentRef Id='CWAGENT_VERSION' />\n      <ComponentRef Id='LICENSE' />\n      <ComponentRef Id='NOTICE' />\n      <ComponentRef Id='RELEASE_NOTES' />\n      <ComponentRef Id='THIRD_PARTY_LICENSES' />\n      <ComponentRef Id='CommonConfigTOML' />\n      <ComponentRef Id='CreateLogsFolder' />\n      <ComponentRef Id='CreateConfigsFolder' />\n      <ComponentRef Id='CreateCWOCConfigsFolder' />\n      <ComponentRef Id='CreateCWOCLogsFolder' />\n      <ComponentRef Id='CWOCEXE' />\n      <ComponentRef Id='PredefinedConfigData' />\n      <ComponentRef Id='FIX_PERMISSION' />\n    </Feature>\n\n    <Directory Id='TARGETDIR' Name='SourceDir'>\n\n      <Directory Id='ProgramFiles64Folder'>\n        <Directory Id='PFilesAmazon' Name='Amazon'>\n          <Directory Id='INSTALLDIR' Name='AmazonCloudWatchAgent'/>\n        </Directory>\n      </Directory>\n\n      <Directory Id='CommonAppDataFolder' Name='AppDataFolder'>\n        <Directory Id='AppDataFolderAmazon' Name='Amazon'>\n          <Directory Id='Config' Name='AmazonCloudWatchAgent'>\n            <Directory Id=\"Configs\" Name=\"Configs\"/>\n            <Directory Id='Logs' Name='Logs'/>\n            <Directory Id='CWOCConfig' Name='CWAgentOtelCollector'>\n              <Directory Id='CWOCConfigs' Name='Configs'/>\n              <Directory Id='CWOCLogs' Name='Logs'/>\n            </Directory>\n          </Directory>\n        </Directory>\n      </Directory>\n\n    </Directory>\n\n    <DirectoryRef Id=\"INSTALLDIR\">\n        <Component Id='StarterEXE' Guid='5f344c26-c8f5-4a10-83c0-0651399fb8ff' Win64='yes'>\n            <File Source='start-amazon-cloudwatch-agent.exe' KeyPath='yes' Checksum='yes'/>\n            <ServiceInstall\n                Id=\"ServiceInstaller\"\n                Type=\"ownProcess\"\n                Name=\"AmazonCloudWatchAgent\"\n                DisplayName=\"Amazon CloudWatch Agent\"\n                Description=\"Amazon CloudWatch Agent\"\n                Start=\"auto\"\n                Account=\"LocalSystem\"\n                Interactive=\"no\"\n                ErrorControl=\"normal\"\n                Vital=\"yes\"\n            >\n                <ServiceDependency Id=\"LanmanServer\"/>\n                <ServiceConfig FirstFailureActionType=\"restart\" SecondFailureActionType=\"restart\" ThirdFailureActionType=\"restart\" ResetPeriodInDays=\"1\" RestartServiceDelayInSeconds=\"2\" xmlns=\"http://schemas.microsoft.com/wix/UtilExtension\"/>\n                <ServiceConfig OnInstall=\"yes\" OnReinstall=\"yes\" FailureActionsWhen=\"failedToStopOrReturnedError\"/>\n            </ServiceInstall>\n            <ServiceControl\n                Id=\"StartService\"\n                Stop=\"both\"\n                Remove=\"uninstall\"\n                Name=\"AmazonCloudWatchAgent\"\n                Wait=\"yes\"\n            />\n        </Component>\n        <Component Id='CWOCEXE' Guid='3afd22e7-3f83-413f-9861-e1ac923a15c4' Win64='yes'>\n            <File Source='cwagent-otel-collector.exe' KeyPath='yes' Checksum='yes'/>\n            <ServiceInstall\n                Id=\"CWOCServiceInstaller\"\n                Type=\"ownProcess\"\n                Name=\"CWAgentOtelCollector\"\n                DisplayName=\"CWAgent Otel Collector\"\n                Description=\"CWAgent Otel Collector\"\n                Start=\"demand\"\n                Account=\"LocalSystem\"\n                Interactive=\"no\"\n                ErrorControl=\"normal\"\n                Arguments=\" --config=&quot;[CWOCConfig]cwagent-otel-collector.yaml&quot;\"\n                Vital=\"yes\"\n            >\n                <ServiceDependency Id=\"LanmanServer\"/>\n                <ServiceConfig FirstFailureActionType=\"restart\" SecondFailureActionType=\"restart\" ThirdFailureActionType=\"restart\" ResetPeriodInDays=\"1\" RestartServiceDelayInSeconds=\"2\" xmlns=\"http://schemas.microsoft.com/wix/UtilExtension\"/>\n                <ServiceConfig OnInstall=\"yes\" OnReinstall=\"yes\" FailureActionsWhen=\"failedToStopOrReturnedError\"/>\n            </ServiceInstall>\n            <ServiceControl\n                Id=\"CWOCStartService\"\n                Stop=\"both\"\n                Remove=\"uninstall\"\n                Name=\"CWAgentOtelCollector\"\n                Wait=\"yes\"\n            />\n        </Component>\n        <Component Id='AgentEXE' Guid='d98c86be-b6c8-4f24-84a5-03b08bd6e7f2' Win64='yes'>\n            <File Source='amazon-cloudwatch-agent.exe' KeyPath='yes' Checksum='yes'/>\n        </Component>\n        <Component Id='WizardEXE' Guid='e8c20fcf-94c7-4097-97ed-ef4cc5c867b2' Win64='yes'>\n            <File Source='amazon-cloudwatch-agent-config-wizard.exe' KeyPath='yes' Checksum='yes'/>\n        </Component>\n        <Component Id='Ctl' Guid='f95f122b-aa48-4f6e-beab-05380b8ce99d' Win64='yes'>\n            <File Source='amazon-cloudwatch-agent-ctl.ps1' KeyPath='yes'/>\n        </Component>\n        <Component Id='SchemaJSON' Guid='80a1bfcc-8a0f-46e2-8e84-c2023d10fdf3' Win64='yes'>\n            <File Source='amazon-cloudwatch-agent-schema.json' KeyPath='yes'/>\n        </Component>\n        <Component Id='DownloaderEXE' Guid='727f4d1b-76bd-4cde-969a-02f16e4425ac' Win64='yes'>\n            <File Source='config-downloader.exe' KeyPath='yes' Checksum='yes'/>\n        </Component>\n        <Component Id='TranslatorEXE' Guid='f4527006-edcb-4271-a971-039848bc8bb7' Win64='yes'>\n            <File Source='config-translator.exe' KeyPath='yes' Checksum='yes'/>\n        </Component>\n        <Component Id='CWAGENT_VERSION' Guid='f4ddf7bf-48fc-41f6-a914-4153a7cf0afc' Win64='yes'>\n            <File Source='CWAGENT_VERSION' KeyPath='yes'/>\n        </Component>\n        <Component Id='LICENSE' Guid='ac70ef6c-8ec4-4a91-8059-2c18543df863' Win64='yes'>\n            <File Source='LICENSE' KeyPath='yes'/>\n        </Component>\n        <Component Id='NOTICE' Guid='d490c48d-eed1-445d-8eac-99769c472ec7' Win64='yes'>\n            <File Source='NOTICE' KeyPath='yes'/>\n        </Component>\n        <Component Id='RELEASE_NOTES' Guid='5bb03e58-44e1-4acc-a827-ad91e25025b9' Win64='yes'>\n            <File Source='RELEASE_NOTES' KeyPath='yes'/>\n        </Component>\n        <Component Id='THIRD_PARTY_LICENSES' Guid='ca4ac31e-8c1d-482f-9724-27f8857caca5' Win64='yes'>\n            <File Source='THIRD-PARTY-LICENSES' KeyPath='yes'/>\n        </Component>\n        <Component Id='FIX_PERMISSION' Guid='6ea35ac1-b8cc-492b-b62f-312c30395110' Win64='yes'>\n            <File Source='permission.ps1' KeyPath='yes'/>\n        </Component>\n    </DirectoryRef>\n\n    <DirectoryRef Id=\"Config\">\n        <Component Id='CommonConfigTOML' Guid='293f73c5-1f51-4e65-86e3-97425ec75c94' Win64='yes' NeverOverwrite='yes' Permanent='yes'>\n            <File Source='common-config.toml' KeyPath='yes'/>\n        </Component>\n    </DirectoryRef>\n\n    <DirectoryRef Id=\"Configs\">\n        <Component Id='CreateConfigsFolder' Guid='c860d000-ed10-11e8-8eb2-f2801f1b9fd1' Win64='yes'>\n            <CreateFolder />\n        </Component>\n    </DirectoryRef>\n\n    <DirectoryRef Id=\"CWOCConfig\">\n        <Component Id='PredefinedConfigData' Guid='b0543a32-51e2-4f89-8375-4924e46095f4' Win64='yes' NeverOverwrite='yes' Permanent='yes'>\n            <File Source='predefined-config-data' KeyPath='yes'/>\n        </Component>\n    </DirectoryRef>\n\n    <DirectoryRef Id=\"CWOCConfigs\">\n        <Component Id='CreateCWOCConfigsFolder' Guid='8c7cb53c-9b56-47b7-8a06-7c164a0b574a' Win64='yes'>\n            <CreateFolder />\n        </Component>\n    </DirectoryRef>\n\n    <DirectoryRef Id=\"CWOCLogs\">\n        <Component Id='CreateCWOCLogsFolder' Guid='bfbfaece-1a9a-489b-bf1c-1039a7f70803' Win64='yes'>\n            <CreateFolder />\n        </Component>\n    </DirectoryRef>\n\n    <DirectoryRef Id=\"Logs\">\n        <Component Id='CreateLogsFolder' Guid='fe9042cb-a4fa-4b8e-9852-685a342338b5' Win64='yes'>\n            <CreateFolder />\n        </Component>\n    </DirectoryRef>\n\n    <CustomAction Id=\"UpdateConfigPermission\" Directory=\"INSTALLDIR\" ExeCommand=\"$(var.FixPermissionScriptAction)\" Execute=\"deferred\" Return=\"check\" Impersonate=\"no\" />\n\n    <InstallExecuteSequence>\n        <Custom Action=\"UpdateConfigPermission\" After=\"InstallFiles\">NOT UPGRADINGPRODUCTCODE AND NOT (REMOVE~=\"ALL\")</Custom>\n    </InstallExecuteSequence>\n\n    <MajorUpgrade AllowDowngrades=\"yes\"/>\n  </Product>\n</Wix>", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT\n\npackage config\n\nconst (\n\tModeEC2    = \"ec2\"\n\tModeOnPrem = \"onPremise\"\n)\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT\n\npackage context\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/aws/amazon-cloudwatch-agent/translator/config\"\n)\n\nconst (\n\tTmpFileSuffix = \".tmp\"\n)\n\nvar ctx *Context\n\nfunc CurrentContext() *Context {\n\tif ctx == nil {\n\t\tctx = &Context{\n\t\t\tcredentials:         make(map[string]string),\n\t\t\tproxy:               make(map[string]string),\n\t\t\tcloudWatchLogConfig: make(map[string]interface{}),\n\t\t\trunInContainer:      os.Getenv(config.RUN_IN_CONTAINER) == config.RUN_IN_CONTAINER_TRUE,\n\t\t}\n\t}\n\treturn ctx\n}\n\n//Testing only\nfunc ResetContext() {\n\tctx = nil\n}\n\ntype Context struct {\n\tos                  string\n\tinputJsonFilePath   string\n\tinputJsonDirPath    string\n\tmultiConfig         string\n\toutputTomlFilePath  string\n\tmode                string\n\tcredentials         map[string]string\n\tproxy               map[string]string\n\tssl                 map[string]string\n\tcloudWatchLogConfig map[string]interface{}\n\trunInContainer      bool\n}\n\nfunc (ctx *Context) Os() string {\n\treturn ctx.os\n}\n\nfunc (ctx *Context) SetOs(os string) {\n\tctx.os = config.ToValidOs(os)\n}\n\nfunc (ctx *Context) InputJsonFilePath() string {\n\treturn ctx.inputJsonFilePath\n}\n\nfunc (ctx *Context) SetInputJsonFilePath(inputJsonFilePath string) {\n\tctx.inputJsonFilePath = inputJsonFilePath\n}\n\nfunc (ctx *Context) InputJsonDirPath() string {\n\treturn ctx.inputJsonDirPath\n}\n\nfunc (ctx *Context) SetInputJsonDirPath(inputJsonDirPath string) {\n\tctx.inputJsonDirPath = inputJsonDirPath\n}\n\nfunc (ctx *Context) MultiConfig() string {\n\treturn ctx.multiConfig\n}\n\nfunc (ctx *Context) SetMultiConfig(multiConfig string) {\n\tctx.multiConfig = multiConfig\n}\n\nfunc (ctx *Context) OutputTomlFilePath() string {\n\treturn ctx.outputTomlFilePath\n}\n\nfunc (ctx *Context) SetOutputTomlFilePath(outputTomlFilePath string) {\n\tctx.outputTomlFilePath = outputTomlFilePath\n}\n\nfunc (ctx *Context) Mode() string {\n\tif ctx.mode == \"\" {\n\t\tctx.mode = config.ModeEC2\n\t}\n\treturn ctx.mode\n}\n\nfunc (ctx *Context) Credentials() map[string]string {\n\treturn ctx.credentials\n}\n\nfunc (ctx *Context) SSL() map[string]string {\n\treturn ctx.ssl\n}\n\nfunc (ctx *Context) Proxy() map[string]string {\n\treturn ctx.proxy\n}\n\nfunc (ctx *Context) SetMode(mode string) {\n\tswitch mode {\n\tcase config.ModeEC2:\n\t\tctx.mode = config.ModeEC2\n\tcase config.ModeOnPrem:\n\t\tctx.mode = config.ModeOnPrem\n\tdefault:\n\t\tlog.Panicf(\"Invalid mode %s. Valid mode values are %s and %s.\", mode, config.ModeEC2, config.ModeOnPrem)\n\t}\n}\n\nfunc (ctx *Context) SetCredentials(creds map[string]string) {\n\tctx.credentials = creds\n}\n\nfunc (ctx *Context) SetSSL(ssl map[string]string) {\n\tctx.ssl = ssl\n}\n\nfunc (ctx *Context) SetProxy(proxy map[string]string) {\n\tctx.proxy = proxy\n}\n\nfunc (ctx *Context) SetCloudWatchLogConfig(config map[string]interface{}) {\n\tctx.cloudWatchLogConfig = config\n}\n\nfunc (ctx *Context) CloudWatchLogConfig() map[string]interface{} {\n\treturn ctx.cloudWatchLogConfig\n}\n\nfunc (ctx *Context) RunInContainer() bool {\n\treturn ctx.runInContainer\n}\n\nfunc (ctx *Context) SetRunInContainer(runInContainer bool) {\n\tctx.runInContainer = runInContainer\n}\n"], "fixing_code": ["export BASE_SPACE=$(shell pwd)\nexport BUILD_SPACE=$(BASE_SPACE)/build\nexport AOC_BASE_SPACE=$(BASE_SPACE)/aws-otel-collector\nexport AOC_BUILD_SPACE=$(AOC_BASE_SPACE)/build\n\nVERSION = $(shell echo `git describe --tag --dirty``git status --porcelain 2>/dev/null| grep -q \"^??\" &&echo '-untracked'`)\nVERSION := $(shell echo ${VERSION} | sed -e \"s/^v//\")\nnightly-release: VERSION := $(shell echo ${VERSION}-nightly-build)\n# In case building outside of a git repo, use the version presented in the CWAGENT_VERSION file as a fallback\nifeq ($(VERSION),)\nVERSION := `cat CWAGENT_VERSION`\nendif\n\n# Determine agent build mode, default to PIE mode\nifndef CWAGENT_BUILD_MODE\nCWAGENT_BUILD_MODE=default\nendif\n\nBUILD := $(shell date -u +\"%Y-%m-%dT%H:%M:%SZ\")\nLDFLAGS = -s -w\nLDFLAGS +=  -X github.com/aws/amazon-cloudwatch-agent/cfg/agentinfo.VersionStr=${VERSION}\nLDFLAGS +=  -X github.com/aws/amazon-cloudwatch-agent/cfg/agentinfo.BuildStr=${BUILD}\nLINUX_AMD64_BUILD = CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -buildmode=${CWAGENT_BUILD_MODE} -ldflags=\"${LDFLAGS}\" -o $(BUILD_SPACE)/bin/linux_amd64\nLINUX_ARM64_BUILD = CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -buildmode=${CWAGENT_BUILD_MODE} -ldflags=\"${LDFLAGS}\" -o $(BUILD_SPACE)/bin/linux_arm64\nWIN_BUILD = GOOS=windows GOARCH=amd64 go build -buildmode=${CWAGENT_BUILD_MODE} -ldflags=\"${LDFLAGS}\" -o $(BUILD_SPACE)/bin/windows_amd64\nDARWIN_BUILD = GO111MODULE=on GOOS=darwin GOARCH=amd64 go build -ldflags=\"${LDFLAGS}\" -o $(BUILD_SPACE)/bin/darwin_amd64\n\nIMAGE = amazon/cloudwatch-agent:$(VERSION)\nDOCKER_BUILD_FROM_SOURCE = docker build -t $(IMAGE) -f ./amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/source/Dockerfile\n\nAOC_IMPORT_PATH=github.com/aws-observability/aws-otel-collector\nAOC_GIT_SHA = $(shell cd $(AOC_BASE_SPACE) && git rev-parse HEAD)\nAOC_LDFLAGS = -s -w -X $(AOC_IMPORT_PATH)/tools/version.GitHash=$(AOC_GIT_SHA)\nAOC_LDFLAGS += -X github.com/open-telemetry/opentelemetry-collector-contrib/exporter/awsxrayexporter.collectorDistribution=cwagent-otel-collector\nAOC_LDFLAGS += -X github.com/open-telemetry/opentelemetry-collector-contrib/exporter/awsemfexporter.collectorDistribution=cwagent-otel-collector\nAOC_LDFLAGS += -X $(AOC_IMPORT_PATH)/tools/version.Version=$(VERSION)\nAOC_LDFLAGS += -X $(AOC_IMPORT_PATH)/tools/version.Date=$(BUILD)\nAOC_LDFLAGS += -X $(AOC_IMPORT_PATH)/pkg/userutils.defaultUser=cwagent\nAOC_LDFLAGS += -X $(AOC_IMPORT_PATH)/pkg/userutils.defaultInstallPath=/opt/aws/amazon-cloudwatch-agent/cwagent-otel-collector/\nAOC_LDFLAGS += -X $(AOC_IMPORT_PATH)/pkg/logger.UnixLogPath=/opt/aws/amazon-cloudwatch-agent/cwagent-otel-collector/logs/cwagent-otel-collector.log\nAOC_LDFLAGS += -X $(AOC_IMPORT_PATH)/pkg/logger.WindowsLogPath=C:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\CWAgentOtelCollector\\\\Logs\\\\cwagent-otel-collector.log\nAOC_LDFLAGS += -X $(AOC_IMPORT_PATH)/pkg/extraconfig.unixExtraConfigPath=/opt/aws/amazon-cloudwatch-agent/cwagent-otel-collector/etc/extracfg.txt\nAOC_LDFLAGS += -X $(AOC_IMPORT_PATH)/pkg/extraconfig.windowsExtraConfigPath=C:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\CWAgentOtelCollector\\\\extracfg.txt\n\nCW_AGENT_IMPORT_PATH=https://github.com/aws/amazon-cloudwatch-agent.git\nALL_SRC := $(shell find . -name '*.go' -type f | sort)\nTOOLS_BIN_DIR := $(abspath ./build/tools)\n\nGOIMPORTS_OPT?= -w -local $(CW_AGENT_IMPORT_PATH)\n\nGOIMPORTS = $(TOOLS_BIN_DIR)/goimports\nSHFMT = $(TOOLS_BIN_DIR)/shfmt\nLINTER = $(TOOLS_BIN_DIR)/golangci-lint\nrelease: clean test build package-rpm package-deb package-win package-darwin\n\nnightly-release: release\n\nbuild: check_secrets cwagent-otel-collector amazon-cloudwatch-agent config-translator start-amazon-cloudwatch-agent amazon-cloudwatch-agent-config-wizard config-downloader\n\ncheck_secrets::\n\tif grep --exclude-dir=build --exclude-dir=vendor -exclude=integration/msi/tools/amazon-cloudwatch-agent.wxs -E \"(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}|(\\\"|')?(AWS|aws|Aws)?_?(SECRET|secret|Secret)?_?(ACCESS|access|Access)?_?(KEY|key|Key)(\\\"|')?\\\\s*(:|=>|=)\\\\s*(\\\"|')?[A-Za-z0-9/\\\\+=]{40}(\\\"|')?\" -Rn .; then echo \"check_secrets failed\"; exit 1; fi;\n\ncreate-version-file:\n\t@echo Version: ${VERSION}\n\t@echo Building time: ${BUILD}\n\techo \"$(VERSION)\" > CWAGENT_VERSION\n\ncopy-version-file: create-version-file\n\tmkdir -p build/bin/\n\tcp CWAGENT_VERSION $(BUILD_SPACE)/bin/CWAGENT_VERSION\n\namazon-cloudwatch-agent: copy-version-file\n\t@echo Building amazon-cloudwatch-agent\n\t$(LINUX_AMD64_BUILD)/amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n\t$(LINUX_ARM64_BUILD)/amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n\t$(WIN_BUILD)/amazon-cloudwatch-agent.exe github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n\t$(DARWIN_BUILD)/amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n\n# Save AWS OTEL Collector GIT SHA to a file so it can be easily referenced from outside this repository.\nupdate-submodule:\n\tgit submodule update --init\n\techo \"$(AOC_GIT_SHA)\" > AOC_GIT_SHA\n\ncwagent-otel-collector: update-submodule\n\t@echo Building aws-otel-collector\n\tcd $(AOC_BASE_SPACE) && CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -buildmode=${CWAGENT_BUILD_MODE} -ldflags=\"${AOC_LDFLAGS}\" -o $(BUILD_SPACE)/bin/linux_amd64/cwagent-otel-collector $(AOC_IMPORT_PATH)/cmd/awscollector\n\tcd $(AOC_BASE_SPACE) && CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -buildmode=${CWAGENT_BUILD_MODE} -ldflags=\"${AOC_LDFLAGS}\" -o $(BUILD_SPACE)/bin/linux_arm64/cwagent-otel-collector $(AOC_IMPORT_PATH)/cmd/awscollector\n\tcd $(AOC_BASE_SPACE) && CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -buildmode=${CWAGENT_BUILD_MODE} -ldflags=\"${AOC_LDFLAGS}\" -o $(BUILD_SPACE)/bin/windows_amd64/cwagent-otel-collector.exe $(AOC_IMPORT_PATH)/cmd/awscollector\n\nconfig-translator: copy-version-file\n\t@echo Building config-translator\n\t$(LINUX_AMD64_BUILD)/config-translator github.com/aws/amazon-cloudwatch-agent/cmd/config-translator\n\t$(LINUX_ARM64_BUILD)/config-translator github.com/aws/amazon-cloudwatch-agent/cmd/config-translator\n\t$(WIN_BUILD)/config-translator.exe github.com/aws/amazon-cloudwatch-agent/cmd/config-translator\n\t$(DARWIN_BUILD)/config-translator github.com/aws/amazon-cloudwatch-agent/cmd/config-translator\n\nstart-amazon-cloudwatch-agent: copy-version-file\n\t@echo Building start-amazon-cloudwatch-agent\n\t$(LINUX_AMD64_BUILD)/start-amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/start-amazon-cloudwatch-agent\n\t$(LINUX_ARM64_BUILD)/start-amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/start-amazon-cloudwatch-agent\n\t$(WIN_BUILD)/start-amazon-cloudwatch-agent.exe github.com/aws/amazon-cloudwatch-agent/cmd/start-amazon-cloudwatch-agent\n\t$(DARWIN_BUILD)/start-amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/start-amazon-cloudwatch-agent\n\namazon-cloudwatch-agent-config-wizard: copy-version-file\n\t@echo Building amazon-cloudwatch-agent-config-wizard\n\t$(LINUX_AMD64_BUILD)/amazon-cloudwatch-agent-config-wizard github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent-config-wizard\n\t$(LINUX_ARM64_BUILD)/amazon-cloudwatch-agent-config-wizard github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent-config-wizard\n\t$(WIN_BUILD)/amazon-cloudwatch-agent-config-wizard.exe github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent-config-wizard\n\t$(DARWIN_BUILD)/amazon-cloudwatch-agent-config-wizard github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent-config-wizard\n\nconfig-downloader: copy-version-file\n\t@echo Building config-downloader\n\t$(LINUX_AMD64_BUILD)/config-downloader github.com/aws/amazon-cloudwatch-agent/cmd/config-downloader\n\t$(LINUX_ARM64_BUILD)/config-downloader github.com/aws/amazon-cloudwatch-agent/cmd/config-downloader\n\t$(WIN_BUILD)/config-downloader.exe github.com/aws/amazon-cloudwatch-agent/cmd/config-downloader\n\t$(DARWIN_BUILD)/config-downloader github.com/aws/amazon-cloudwatch-agent/cmd/config-downloader\n\n# A fast build that only builds amd64, we don't need wizard and config downloader\nbuild-for-docker: build-for-docker-amd64\n\nbuild-for-docker-amd64:\n\t$(LINUX_AMD64_BUILD)/amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n\t$(LINUX_AMD64_BUILD)/start-amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/start-amazon-cloudwatch-agent\n\t$(LINUX_AMD64_BUILD)/config-translator github.com/aws/amazon-cloudwatch-agent/cmd/config-translator\n\nbuild-for-docker-arm64:\n\t$(LINUX_ARM64_BUILD)/amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/amazon-cloudwatch-agent\n\t$(LINUX_ARM64_BUILD)/start-amazon-cloudwatch-agent github.com/aws/amazon-cloudwatch-agent/cmd/start-amazon-cloudwatch-agent\n\t$(LINUX_ARM64_BUILD)/config-translator github.com/aws/amazon-cloudwatch-agent/cmd/config-translator\n\n#Install from source for golangci-lint is not recommended based on https://golangci-lint.run/usage/install/#install-from-source so using binary\n#installation\ninstall-tools:\n\tGOBIN=$(TOOLS_BIN_DIR) go install golang.org/x/tools/cmd/goimports\n\tGOBIN=$(TOOLS_BIN_DIR) go install mvdan.cc/sh/v3/cmd/shfmt@latest\n\tcurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(TOOLS_BIN_DIR) v1.45.2\n\nfmt: install-tools\n\tgo fmt ./...\n\techo $(ALL_SRC) | xargs -n 10 $(GOIMPORTS) $(GOIMPORTS_OPT)\n\nfmt-sh: install-tools\n\t${SHFMT} -w -d -i 5 .\n\nlint: install-tools\n\t${LINTER} run ./...\n\ntest:\n\tCGO_ENABLED=0 go test -coverprofile coverage.txt -failfast ./awscsm/... ./cfg/... ./cmd/... ./handlers/... ./internal/... ./logger/... ./logs/... ./metric/... ./plugins/... ./profiler/... ./tool/... ./translator/...\n\nclean::\n\trm -rf release/ build/\n\trm -f CWAGENT_VERSION\n\npackage-prepare-rpm:\n\t# amd64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/LICENSE $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/NOTICE $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/THIRD-PARTY-LICENSES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/dependencies/cwagent-otel-collector.service $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/cwagent-otel-collector.conf $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(AOC_BASE_SPACE)/config.yaml $(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg/predefined-config-data\n\n\t# arm64 rpm\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/LICENSE $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/NOTICE $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/THIRD-PARTY-LICENSES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.spec $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/dependencies/cwagent-otel-collector.service $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/cwagent-otel-collector.conf $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(AOC_BASE_SPACE)/config.yaml $(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg/predefined-config-data\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-deb:\n\t# amd64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_amd64/* $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/LICENSE $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/NOTICE $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/THIRD-PARTY-LICENSES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/dependencies/cwagent-otel-collector.service $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/cwagent-otel-collector.conf $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(AOC_BASE_SPACE)/config.yaml $(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg/predefined-config-data\n\n\t# arm64 deb\n\tmkdir -p $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/linux_arm64/* $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/LICENSE $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/NOTICE $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/THIRD-PARTY-LICENSES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/dependencies/amazon-cloudwatch-agent.service $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/amazon-cloudwatch-agent.conf $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/dependencies/cwagent-otel-collector.service $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/linux/cwagent-otel-collector.conf $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(AOC_BASE_SPACE)/config.yaml $(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg/predefined-config-data\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\tcp -rf $(BASE_SPACE)/packaging $(BUILD_SPACE)/\n\npackage-prepare-win-zip:\n\t# amd64 win\n\tmkdir -p $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/windows_amd64/* $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/LICENSE $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/NOTICE $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/THIRD-PARTY-LICENSES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp ${BASE_SPACE}/packaging/windows/amazon-cloudwatch-agent-ctl.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/install.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp ${BASE_SPACE}/packaging/windows/uninstall.ps1 $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(AOC_BASE_SPACE)/config.yaml $(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg/predefined-config-data\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\npackage-prepare-darwin-tar:\n\t# amd64 darwin\n\tmkdir -p $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg\n\tcp $(BUILD_SPACE)/bin/darwin_amd64/* $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/LICENSE $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/NOTICE $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/licensing/THIRD-PARTY-LICENSES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/RELEASE_NOTES $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BUILD_SPACE)/bin/CWAGENT_VERSION $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/cfg/commonconfig/common-config.toml $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/translator/config/schema.json $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/amazon-cloudwatch-agent-schema.json\n\tcp $(BASE_SPACE)/packaging/darwin/amazon-cloudwatch-agent-ctl $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\tcp $(BASE_SPACE)/packaging/darwin/com.amazon.cloudwatch.agent.plist $(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg/\n\n\tcp -rf $(BASE_SPACE)/Tools $(BUILD_SPACE)/\n\n.PHONY: package-rpm\npackage-rpm: package-prepare-rpm\n\tARCH=amd64 TARGET_SUPPORTED_ARCH=x86_64 PREPKGPATH=\"$(BUILD_SPACE)/private/linux/amd64/rpm/amazon-cloudwatch-agent-pre-pkg\" $(BUILD_SPACE)/Tools/src/create_rpm.sh\n\tARCH=arm64 TARGET_SUPPORTED_ARCH=aarch64 PREPKGPATH=\"$(BUILD_SPACE)/private/linux/arm64/rpm/amazon-cloudwatch-agent-pre-pkg\" $(BUILD_SPACE)/Tools/src/create_rpm.sh\n\n.PHONY: package-deb\npackage-deb: package-prepare-deb\n\tARCH=amd64 TARGET_SUPPORTED_ARCH=x86_64 PREPKGPATH=\"$(BUILD_SPACE)/private/linux/amd64/deb/amazon-cloudwatch-agent-pre-pkg\" $(BUILD_SPACE)/Tools/src/create_deb.sh\n\tARCH=arm64 TARGET_SUPPORTED_ARCH=aarch64 PREPKGPATH=\"$(BUILD_SPACE)/private/linux/arm64/deb/amazon-cloudwatch-agent-pre-pkg\" $(BUILD_SPACE)/Tools/src/create_deb.sh\n\n.PHONY: package-win\npackage-win: package-prepare-win-zip\n\tARCH=amd64 TARGET_SUPPORTED_ARCH=x86_64 PREPKGPATH=\"$(BUILD_SPACE)/private/windows/amd64/zip/amazon-cloudwatch-agent-pre-pkg\" $(BUILD_SPACE)/Tools/src/create_win.sh\n\n.PHONY: package-darwin\npackage-darwin: package-prepare-darwin-tar\n\tARCH=amd64 TARGET_SUPPORTED_ARCH=x86_64 PREPKGPATH=\"$(BUILD_SPACE)/private/darwin/amd64/tar/amazon-cloudwatch-agent-pre-pkg\" $(BUILD_SPACE)/Tools/src/create_darwin.sh\n\n.PHONY: fmt fmt-sh build test clean\n\n.PHONY: dockerized-build dockerized-build-vendor\ndockerized-build:\n\t$(DOCKER_BUILD_FROM_SOURCE) .\n\t@echo Built image:\n\t@echo $(IMAGE)\n\n# Use vendor instead of proxy when building w/ vendor folder\ndockerized-build-vendor:\n\t$(DOCKER_BUILD_FROM_SOURCE) --build-arg GO111MODULE=off .\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT\n\npackage main\n\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"os\"\n\t\"os/user\"\n\t\"path/filepath\"\n\n\t\"github.com/aws/amazon-cloudwatch-agent/cfg/commonconfig\"\n\t\"github.com/aws/amazon-cloudwatch-agent/translator\"\n\t\"github.com/aws/amazon-cloudwatch-agent/translator/cmdutil\"\n\t\"github.com/aws/amazon-cloudwatch-agent/translator/context\"\n\ttranslatorUtil \"github.com/aws/amazon-cloudwatch-agent/translator/util\"\n)\n\nconst (\n\texitErrorMessage  = \"Configuration validation first phase failed. Agent version: %v. Verify the JSON input is only using features supported by this version.\\n\"\n\tversion           = \"1.0\"\n\tenvConfigFileName = \"env-config.json\"\n)\n\nfunc initFlags() {\n\tvar inputOs = flag.String(\"os\", \"\", \"Please provide the os preference, valid value: windows/linux.\")\n\tvar inputJsonFile = flag.String(\"input\", \"\", \"Please provide the path of input agent json config file\")\n\tvar inputJsonDir = flag.String(\"input-dir\", \"\", \"Please provide the path of input agent json config directory.\")\n\tvar inputTomlFile = flag.String(\"output\", \"\", \"Please provide the path of the output CWAgent config file\")\n\tvar inputMode = flag.String(\"mode\", \"ec2\", \"Please provide the mode, i.e. ec2, onPremise, onPrem, auto\")\n\tvar inputConfig = flag.String(\"config\", \"\", \"Please provide the common-config file\")\n\tvar multiConfig = flag.String(\"multi-config\", \"remove\", \"valid values: default, append, remove\")\n\tflag.Parse()\n\n\tctx := context.CurrentContext()\n\tctx.SetOs(*inputOs)\n\tctx.SetInputJsonFilePath(*inputJsonFile)\n\tctx.SetInputJsonDirPath(*inputJsonDir)\n\tctx.SetMultiConfig(*multiConfig)\n\tctx.SetOutputTomlFilePath(*inputTomlFile)\n\n\tif *inputConfig != \"\" {\n\t\tf, err := os.Open(*inputConfig)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"E! Failed to open common-config file %s with error: %v\", *inputConfig, err)\n\t\t}\n\t\tdefer f.Close()\n\t\tconf, err := commonconfig.Parse(f)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"E! Failed to parse common-config file %s with error: %v\", *inputConfig, err)\n\t\t}\n\t\tctx.SetCredentials(conf.CredentialsMap())\n\t\tctx.SetProxy(conf.ProxyMap())\n\t\tctx.SetSSL(conf.SSLMap())\n\t}\n\ttranslatorUtil.SetProxyEnv(ctx.Proxy())\n\ttranslatorUtil.SetSSLEnv(ctx.SSL())\n\tctx.SetMode(translatorUtil.DetectAgentMode(*inputMode))\n}\n\n/**\n *\tconfig-translator --input ${JSON} --input-dir ${JSON_DIR} --output ${TOML} --mode ${param_mode} --config ${COMMON_CONFIG}\n *  --multi-config [default|append|remove]\n *\n *\t\tmulti-config:\n *\t\t\tdefault:\tonly process .tmp files\n *\t\t\tappend:\t\tprocess both existing files and .tmp files\n *\t\t\tremove:\t\tonly process existing files\n */\nfunc main() {\n\tinitFlags()\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\t// Only emit error message if panic content is string(pre-checked)\n\t\t\t// Not emitting the non-handled error message for now, we don't want to show non-user-friendly error message to customer\n\t\t\tif val, ok := r.(string); ok {\n\t\t\t\tlog.Println(val)\n\t\t\t}\n\t\t\t//If the Input JSON config file is invalid, output all the error path and error messages.\n\t\t\tfor _, errMessage := range translator.ErrorMessages {\n\t\t\t\tlog.Println(errMessage)\n\t\t\t}\n\t\t\tlog.Printf(exitErrorMessage, version)\n\t\t\tos.Exit(1)\n\t\t}\n\t}()\n\tctx := context.CurrentContext()\n\n\tmergedJsonConfigMap, err := cmdutil.GenerateMergedJsonConfigMap(ctx)\n\tif err != nil {\n\t\tlog.Panicf(\"E! Failed to generate merged json config: %v\", err)\n\t}\n\n\tif !ctx.RunInContainer() {\n\t\t// run as user only applies to non container situation.\n\t\tcurrent, err := user.Current()\n\t\tif err == nil && current.Name == \"root\" {\n\t\t\trunAsUser, err := cmdutil.DetectRunAsUser(mergedJsonConfigMap)\n\t\t\tif err != nil {\n\t\t\t\tlog.Panic(\"E! Failed to detectRunAsUser\")\n\t\t\t}\n\t\t\tcmdutil.VerifyCredentials(ctx, runAsUser)\n\t\t}\n\t}\n\n\ttomlConfigPath := cmdutil.GetTomlConfigPath(ctx.OutputTomlFilePath())\n\tcmdutil.TranslateJsonMapToTomlFile(mergedJsonConfigMap, tomlConfigPath)\n\t// Put env config into the same folder as the toml config.\n\tenvConfigPath := filepath.Join(filepath.Dir(tomlConfigPath), envConfigFileName)\n\tcmdutil.TranslateJsonMapToEnvConfigFile(mergedJsonConfigMap, envConfigPath)\n}\n", "<?xml version='1.0' encoding='UTF-8'?>\n<Wix xmlns='http://schemas.microsoft.com/wix/2006/wi'\n     xmlns:util='http://schemas.microsoft.com/wix/UtilExtension'>\n\n  <Product Id='*'\n    Name='Amazon CloudWatch Agent'\n    UpgradeCode='c537c936-91b3-4270-94d7-e128acfc3e86'\n    Language='1033'\n    Codepage='1252'\n    Version='<version>'\n    Manufacturer='Amazon.com, Inc.'>\n\n    <Package Id='*'\n      Keywords='Installer'\n      Description=\"Amazon CloudWatch Agent Installer\"\n      Comments='Copyright 2018 Amazon.com, Inc. and its affiliates. All Rights Reserved.'\n      Manufacturer='Amazon.com, Inc.'\n      InstallerVersion='200'\n      Languages='1033'\n      Compressed='yes'\n      SummaryCodepage='1252'\n      InstallScope=\"perMachine\"\n      Platform=\"x64\"\n    />\n\n    <MediaTemplate EmbedCab='yes' />\n    <Property Id=\"POWERSHELLEXE\">\n      <RegistrySearch Id=\"POWERSHELLEXE\"\n                      Type=\"raw\"\n                      Root=\"HKLM\"\n                      Key=\"SOFTWARE\\Microsoft\\PowerShell\\1\\ShellIds\\Microsoft.PowerShell\"\n                      Name=\"Path\" />\n    </Property>\n    <Feature Id='ProductFeature' Title=\"Amazon CloudWatch Agent\" Level='1'>\n      <ComponentRef Id='StarterEXE' />\n      <ComponentRef Id='AgentEXE' />\n      <ComponentRef Id='WizardEXE' />\n      <ComponentRef Id='Ctl' />\n      <ComponentRef Id='SchemaJSON' />\n      <ComponentRef Id='DownloaderEXE' />\n      <ComponentRef Id='TranslatorEXE' />\n      <ComponentRef Id='CWAGENT_VERSION' />\n      <ComponentRef Id='LICENSE' />\n      <ComponentRef Id='NOTICE' />\n      <ComponentRef Id='RELEASE_NOTES' />\n      <ComponentRef Id='THIRD_PARTY_LICENSES' />\n      <ComponentRef Id='CommonConfigTOML' />\n      <ComponentRef Id='CreateLogsFolder' />\n      <ComponentRef Id='CreateConfigsFolder' />\n      <ComponentRef Id='CreateCWOCConfigsFolder' />\n      <ComponentRef Id='CreateCWOCLogsFolder' />\n      <ComponentRef Id='CWOCEXE' />\n      <ComponentRef Id='PredefinedConfigData' />\n      <ComponentRef Id='FIX_PERMISSION' />\n    </Feature>\n\n    <Directory Id='TARGETDIR' Name='SourceDir'>\n\n      <Directory Id='ProgramFiles64Folder'>\n        <Directory Id='PFilesAmazon' Name='Amazon'>\n          <Directory Id='INSTALLDIR' Name='AmazonCloudWatchAgent'/>\n        </Directory>\n      </Directory>\n\n      <Directory Id='CommonAppDataFolder' Name='AppDataFolder'>\n        <Directory Id='AppDataFolderAmazon' Name='Amazon'>\n          <Directory Id='Config' Name='AmazonCloudWatchAgent'>\n            <Directory Id=\"Configs\" Name=\"Configs\"/>\n            <Directory Id='Logs' Name='Logs'/>\n            <Directory Id='CWOCConfig' Name='CWAgentOtelCollector'>\n              <Directory Id='CWOCConfigs' Name='Configs'/>\n              <Directory Id='CWOCLogs' Name='Logs'/>\n            </Directory>\n          </Directory>\n        </Directory>\n      </Directory>\n\n    </Directory>\n\n    <DirectoryRef Id=\"INSTALLDIR\">\n        <Component Id='StarterEXE' Guid='5f344c26-c8f5-4a10-83c0-0651399fb8ff' Win64='yes'>\n            <File Source='start-amazon-cloudwatch-agent.exe' KeyPath='yes' Checksum='yes'/>\n            <ServiceInstall\n                Id=\"ServiceInstaller\"\n                Type=\"ownProcess\"\n                Name=\"AmazonCloudWatchAgent\"\n                DisplayName=\"Amazon CloudWatch Agent\"\n                Description=\"Amazon CloudWatch Agent\"\n                Start=\"auto\"\n                Account=\"LocalSystem\"\n                Interactive=\"no\"\n                ErrorControl=\"normal\"\n                Vital=\"yes\"\n            >\n                <ServiceDependency Id=\"LanmanServer\"/>\n                <ServiceConfig FirstFailureActionType=\"restart\" SecondFailureActionType=\"restart\" ThirdFailureActionType=\"restart\" ResetPeriodInDays=\"1\" RestartServiceDelayInSeconds=\"2\" xmlns=\"http://schemas.microsoft.com/wix/UtilExtension\"/>\n                <ServiceConfig OnInstall=\"yes\" OnReinstall=\"yes\" FailureActionsWhen=\"failedToStopOrReturnedError\"/>\n            </ServiceInstall>\n            <ServiceControl\n                Id=\"StartService\"\n                Stop=\"both\"\n                Remove=\"uninstall\"\n                Name=\"AmazonCloudWatchAgent\"\n                Wait=\"yes\"\n            />\n        </Component>\n        <Component Id='CWOCEXE' Guid='3afd22e7-3f83-413f-9861-e1ac923a15c4' Win64='yes'>\n            <File Source='cwagent-otel-collector.exe' KeyPath='yes' Checksum='yes'/>\n            <ServiceInstall\n                Id=\"CWOCServiceInstaller\"\n                Type=\"ownProcess\"\n                Name=\"CWAgentOtelCollector\"\n                DisplayName=\"CWAgent Otel Collector\"\n                Description=\"CWAgent Otel Collector\"\n                Start=\"demand\"\n                Account=\"LocalSystem\"\n                Interactive=\"no\"\n                ErrorControl=\"normal\"\n                Arguments=\" --config=&quot;[CWOCConfig]cwagent-otel-collector.yaml&quot;\"\n                Vital=\"yes\"\n            >\n                <ServiceDependency Id=\"LanmanServer\"/>\n                <ServiceConfig FirstFailureActionType=\"restart\" SecondFailureActionType=\"restart\" ThirdFailureActionType=\"restart\" ResetPeriodInDays=\"1\" RestartServiceDelayInSeconds=\"2\" xmlns=\"http://schemas.microsoft.com/wix/UtilExtension\"/>\n                <ServiceConfig OnInstall=\"yes\" OnReinstall=\"yes\" FailureActionsWhen=\"failedToStopOrReturnedError\"/>\n            </ServiceInstall>\n            <ServiceControl\n                Id=\"CWOCStartService\"\n                Stop=\"both\"\n                Remove=\"uninstall\"\n                Name=\"CWAgentOtelCollector\"\n                Wait=\"yes\"\n            />\n        </Component>\n        <Component Id='AgentEXE' Guid='d98c86be-b6c8-4f24-84a5-03b08bd6e7f2' Win64='yes'>\n            <File Source='amazon-cloudwatch-agent.exe' KeyPath='yes' Checksum='yes'/>\n        </Component>\n        <Component Id='WizardEXE' Guid='e8c20fcf-94c7-4097-97ed-ef4cc5c867b2' Win64='yes'>\n            <File Source='amazon-cloudwatch-agent-config-wizard.exe' KeyPath='yes' Checksum='yes'/>\n        </Component>\n        <Component Id='Ctl' Guid='f95f122b-aa48-4f6e-beab-05380b8ce99d' Win64='yes'>\n            <File Source='amazon-cloudwatch-agent-ctl.ps1' KeyPath='yes'/>\n        </Component>\n        <Component Id='SchemaJSON' Guid='80a1bfcc-8a0f-46e2-8e84-c2023d10fdf3' Win64='yes'>\n            <File Source='amazon-cloudwatch-agent-schema.json' KeyPath='yes'/>\n        </Component>\n        <Component Id='DownloaderEXE' Guid='727f4d1b-76bd-4cde-969a-02f16e4425ac' Win64='yes'>\n            <File Source='config-downloader.exe' KeyPath='yes' Checksum='yes'/>\n        </Component>\n        <Component Id='TranslatorEXE' Guid='f4527006-edcb-4271-a971-039848bc8bb7' Win64='yes'>\n            <File Source='config-translator.exe' KeyPath='yes' Checksum='yes'/>\n        </Component>\n        <Component Id='CWAGENT_VERSION' Guid='f4ddf7bf-48fc-41f6-a914-4153a7cf0afc' Win64='yes'>\n            <File Source='CWAGENT_VERSION' KeyPath='yes'/>\n        </Component>\n        <Component Id='LICENSE' Guid='ac70ef6c-8ec4-4a91-8059-2c18543df863' Win64='yes'>\n            <File Source='LICENSE' KeyPath='yes'/>\n        </Component>\n        <Component Id='NOTICE' Guid='d490c48d-eed1-445d-8eac-99769c472ec7' Win64='yes'>\n            <File Source='NOTICE' KeyPath='yes'/>\n        </Component>\n        <Component Id='RELEASE_NOTES' Guid='5bb03e58-44e1-4acc-a827-ad91e25025b9' Win64='yes'>\n            <File Source='RELEASE_NOTES' KeyPath='yes'/>\n        </Component>\n        <Component Id='THIRD_PARTY_LICENSES' Guid='ca4ac31e-8c1d-482f-9724-27f8857caca5' Win64='yes'>\n            <File Source='THIRD-PARTY-LICENSES' KeyPath='yes'/>\n        </Component>\n        <Component Id='FIX_PERMISSION' Guid='6ea35ac1-b8cc-492b-b62f-312c30395110' Win64='yes'>\n            <File Source='permission.ps1' KeyPath='yes'/>\n        </Component>\n    </DirectoryRef>\n\n    <DirectoryRef Id=\"Config\">\n        <Component Id='CommonConfigTOML' Guid='293f73c5-1f51-4e65-86e3-97425ec75c94' Win64='yes' NeverOverwrite='yes' Permanent='yes'>\n            <File Source='common-config.toml' KeyPath='yes'/>\n        </Component>\n    </DirectoryRef>\n\n    <DirectoryRef Id=\"Configs\">\n        <Component Id='CreateConfigsFolder' Guid='c860d000-ed10-11e8-8eb2-f2801f1b9fd1' Win64='yes'>\n            <CreateFolder />\n        </Component>\n    </DirectoryRef>\n\n    <DirectoryRef Id=\"CWOCConfig\">\n        <Component Id='PredefinedConfigData' Guid='b0543a32-51e2-4f89-8375-4924e46095f4' Win64='yes' NeverOverwrite='yes' Permanent='yes'>\n            <File Source='predefined-config-data' KeyPath='yes'/>\n        </Component>\n    </DirectoryRef>\n\n    <DirectoryRef Id=\"CWOCConfigs\">\n        <Component Id='CreateCWOCConfigsFolder' Guid='8c7cb53c-9b56-47b7-8a06-7c164a0b574a' Win64='yes'>\n            <CreateFolder />\n        </Component>\n    </DirectoryRef>\n\n    <DirectoryRef Id=\"CWOCLogs\">\n        <Component Id='CreateCWOCLogsFolder' Guid='bfbfaece-1a9a-489b-bf1c-1039a7f70803' Win64='yes'>\n            <CreateFolder />\n        </Component>\n    </DirectoryRef>\n\n    <DirectoryRef Id=\"Logs\">\n        <Component Id='CreateLogsFolder' Guid='fe9042cb-a4fa-4b8e-9852-685a342338b5' Win64='yes'>\n            <CreateFolder />\n        </Component>\n    </DirectoryRef>\n     <!-- Find and use powershell to run the command, because just running \"powershell.exe\" did not resolve (not in ENV path) when using \"WixQuietExec\".-->\n    <SetProperty Id=\"QtExecUpdateConfigPermission\" \n        Sequence=\"execute\"\n        Before =\"QtExecUpdateConfigPermission\"\n        Value='&quot;[POWERSHELLEXE]&quot;  -ExecutionPolicy Bypass -File \"[INSTALLDIR]permission.ps1\" ' \n    />\n    <!-- Setup a silent execution contrainer around the command -->\n    <CustomAction Id=\"QtExecUpdateConfigPermission\" \n    BinaryKey=\"WixCA\" \n    DllEntry=\"WixQuietExec\" \n    Execute=\"deferred\" \n    Return=\"check\" \n    Impersonate=\"no\" />\n\n    <InstallExecuteSequence>\n    <Custom Action=\"QtExecUpdateConfigPermission\" After=\"InstallFiles\">NOT UPGRADINGPRODUCTCODE AND NOT (REMOVE~=\"ALL\")</Custom>\n    </InstallExecuteSequence>\n\n    <MajorUpgrade AllowDowngrades=\"yes\"/>\n  </Product>\n</Wix>", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT\n\npackage config\n\nconst (\n\tModeEC2       = \"ec2\"\n\tModeOnPrem    = \"onPrem\"\n        ModeOnPremise = \"onPremise\"\n)\n", "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT\n\npackage context\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/aws/amazon-cloudwatch-agent/translator/config\"\n)\n\nconst (\n\tTmpFileSuffix = \".tmp\"\n)\n\nvar ctx *Context\n\nfunc CurrentContext() *Context {\n\tif ctx == nil {\n\t\tctx = &Context{\n\t\t\tcredentials:         make(map[string]string),\n\t\t\tproxy:               make(map[string]string),\n\t\t\tcloudWatchLogConfig: make(map[string]interface{}),\n\t\t\trunInContainer:      os.Getenv(config.RUN_IN_CONTAINER) == config.RUN_IN_CONTAINER_TRUE,\n\t\t}\n\t}\n\treturn ctx\n}\n\n//Testing only\nfunc ResetContext() {\n\tctx = nil\n}\n\ntype Context struct {\n\tos                  string\n\tinputJsonFilePath   string\n\tinputJsonDirPath    string\n\tmultiConfig         string\n\toutputTomlFilePath  string\n\tmode                string\n\tcredentials         map[string]string\n\tproxy               map[string]string\n\tssl                 map[string]string\n\tcloudWatchLogConfig map[string]interface{}\n\trunInContainer      bool\n}\n\nfunc (ctx *Context) Os() string {\n\treturn ctx.os\n}\n\nfunc (ctx *Context) SetOs(os string) {\n\tctx.os = config.ToValidOs(os)\n}\n\nfunc (ctx *Context) InputJsonFilePath() string {\n\treturn ctx.inputJsonFilePath\n}\n\nfunc (ctx *Context) SetInputJsonFilePath(inputJsonFilePath string) {\n\tctx.inputJsonFilePath = inputJsonFilePath\n}\n\nfunc (ctx *Context) InputJsonDirPath() string {\n\treturn ctx.inputJsonDirPath\n}\n\nfunc (ctx *Context) SetInputJsonDirPath(inputJsonDirPath string) {\n\tctx.inputJsonDirPath = inputJsonDirPath\n}\n\nfunc (ctx *Context) MultiConfig() string {\n\treturn ctx.multiConfig\n}\n\nfunc (ctx *Context) SetMultiConfig(multiConfig string) {\n\tctx.multiConfig = multiConfig\n}\n\nfunc (ctx *Context) OutputTomlFilePath() string {\n\treturn ctx.outputTomlFilePath\n}\n\nfunc (ctx *Context) SetOutputTomlFilePath(outputTomlFilePath string) {\n\tctx.outputTomlFilePath = outputTomlFilePath\n}\n\nfunc (ctx *Context) Mode() string {\n\tif ctx.mode == \"\" {\n\t\tctx.mode = config.ModeEC2\n\t}\n\treturn ctx.mode\n}\n\nfunc (ctx *Context) Credentials() map[string]string {\n\treturn ctx.credentials\n}\n\nfunc (ctx *Context) SSL() map[string]string {\n\treturn ctx.ssl\n}\n\nfunc (ctx *Context) Proxy() map[string]string {\n\treturn ctx.proxy\n}\n\nfunc (ctx *Context) SetMode(mode string) {\n\tswitch mode {\n\tcase config.ModeEC2:\n\t\tctx.mode = config.ModeEC2\n\tcase config.ModeOnPrem,config.ModeOnPremise:\n\t\tctx.mode = config.ModeOnPrem\n\tdefault:\n\t\tlog.Panicf(\"Invalid mode %s. Valid mode values are %s and %s.\", mode, config.ModeEC2, config.ModeOnPrem)\n\t}\n}\n\nfunc (ctx *Context) SetCredentials(creds map[string]string) {\n\tctx.credentials = creds\n}\n\nfunc (ctx *Context) SetSSL(ssl map[string]string) {\n\tctx.ssl = ssl\n}\n\nfunc (ctx *Context) SetProxy(proxy map[string]string) {\n\tctx.proxy = proxy\n}\n\nfunc (ctx *Context) SetCloudWatchLogConfig(config map[string]interface{}) {\n\tctx.cloudWatchLogConfig = config\n}\n\nfunc (ctx *Context) CloudWatchLogConfig() map[string]interface{} {\n\treturn ctx.cloudWatchLogConfig\n}\n\nfunc (ctx *Context) RunInContainer() bool {\n\treturn ctx.runInContainer\n}\n\nfunc (ctx *Context) SetRunInContainer(runInContainer bool) {\n\tctx.runInContainer = runInContainer\n}\n"], "filenames": ["Makefile", "cmd/config-translator/translator.go", "integration/msi/tools/amazon-cloudwatch-agent.wxs", "translator/config/mode.go", "translator/context/context.go"], "buggy_code_start_loc": [61, 31, 4, 7, 113], "buggy_code_end_loc": [62, 32, 208, 9, 114], "fixing_code_start_loc": [61, 31, 3, 7, 113], "fixing_code_end_loc": [62, 32, 223, 10, 114], "type": "CWE-274", "message": "A privilege escalation issue exists within the Amazon CloudWatch Agent for Windows, software for collecting metrics and logs from Amazon EC2 instances and on-premises servers, in versions up to and including v1.247354. When users trigger a repair of the Agent, a pop-up window opens with SYSTEM permissions. Users with administrative access to affected hosts may use this to create a new command prompt as NT AUTHORITY\\SYSTEM. To trigger this issue, the third party must be able to access the affected host and elevate their privileges such that they're able to trigger the agent repair process. They must also be able to install the tools required to trigger the issue. This issue does not affect the CloudWatch Agent for macOS or Linux. Agent users should upgrade to version 1.247355 of the CloudWatch Agent to address this issue. There is no recommended work around. Affected users must update the installed version of the CloudWatch Agent to address this issue.", "other": {"cve": {"id": "CVE-2022-23511", "sourceIdentifier": "security-advisories@github.com", "published": "2022-12-12T13:15:12.120", "lastModified": "2023-01-25T15:14:40.277", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A privilege escalation issue exists within the Amazon CloudWatch Agent for Windows, software for collecting metrics and logs from Amazon EC2 instances and on-premises servers, in versions up to and including v1.247354. When users trigger a repair of the Agent, a pop-up window opens with SYSTEM permissions. Users with administrative access to affected hosts may use this to create a new command prompt as NT AUTHORITY\\SYSTEM. To trigger this issue, the third party must be able to access the affected host and elevate their privileges such that they're able to trigger the agent repair process. They must also be able to install the tools required to trigger the issue. This issue does not affect the CloudWatch Agent for macOS or Linux. Agent users should upgrade to version 1.247355 of the CloudWatch Agent to address this issue. There is no recommended work around. Affected users must update the installed version of the CloudWatch Agent to address this issue."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.3, "impactScore": 5.3}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-274"}]}], "configurations": [{"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:amazon:cloudwatch_agent:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.247355", "matchCriteriaId": "F164A3B8-BCCF-45E9-B9E2-02BE79C1D31C"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:o:microsoft:windows:-:*:*:*:*:*:*:*", "matchCriteriaId": "A2572D17-1DE6-457B-99CC-64AFD54487EA"}]}]}], "references": [{"url": "https://github.com/aws/amazon-cloudwatch-agent/commit/6119858864c317ff26f41f576c169148d1250837#diff-76ed074a9305c04054cdebb9e9aad2d818052b07091de1f20cad0bbac34ffb52", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/aws/amazon-cloudwatch-agent/security/advisories/GHSA-j8x2-2m5w-j939", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/aws/amazon-cloudwatch-agent/commit/6119858864c317ff26f41f576c169148d1250837#diff-76ed074a9305c04054cdebb9e9aad2d818052b07091de1f20cad0bbac34ffb52"}}