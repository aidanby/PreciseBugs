{"buggy_code": ["<?php\nApp::uses('AppShell', 'Console/Command');\nclass AdminShell extends AppShell\n{\n    public $uses = array('Event', 'Post', 'Attribute', 'Job', 'User', 'Task', 'Whitelist', 'Server', 'Organisation', 'AdminSetting', 'Galaxy', 'Taxonomy', 'Warninglist', 'Noticelist', 'ObjectTemplate', 'Bruteforce', 'Role');\n\n    public function jobGenerateCorrelation() {\n        $jobId = $this->args[0];\n        $this->loadModel('Job');\n        $this->Job->id = $jobId;\n        $this->loadModel('Attribute');\n        $this->Attribute->generateCorrelation($jobId, 0);\n        $this->Job->saveField('progress', 100);\n        $this->Job->saveField('message', 'Job done.');\n        $this->Job->saveField('status', 4);\n    }\n\n    public function jobPurgeCorrelation() {\n        $jobId = $this->args[0];\n        $this->loadModel('Job');\n        $this->Job->id = $jobId;\n        $this->loadModel('Attribute');\n        $this->Attribute->purgeCorrelations();\n        $this->Job->saveField('progress', 100);\n        $this->Job->saveField('message', 'Job done.');\n        $this->Job->saveField('status', 4);\n    }\n\n    public function jobGenerateShadowAttributeCorrelation() {\n        $jobId = $this->args[0];\n        $this->loadModel('Job');\n        $this->Job->id = $jobId;\n        $this->loadModel('ShadowAttribute');\n        $this->ShadowAttribute->generateCorrelation($jobId);\n    }\n\n    public function updateMISP() {\n        $status = array('branch' => '2.4');\n        echo $this->Server->update($status) . PHP_EOL;\n    }\n\n    public function restartWorkers()\n    {\n        $this->Server->restartWorkers();\n        echo PHP_EOL . 'Workers restarted.' . PHP_EOL;\n    }\n\n    public function updateAfterPull() {\n        $this->loadModel('Job');\n        $this->loadModel('Server');\n        $submodule_name = $this->args[0];\n        $jobId = $this->args[1];\n        $userId = $this->args[2];\n        $this->Job->id = $jobId;\n        $result = $this->Server->updateAfterPull($submodule_name, $userId);\n        $this->Job->saveField('progress', 100);\n        $this->Job->saveField('date_modified', date(\"Y-m-d H:i:s\"));\n        if ($result) {\n            $this->Job->saveField('message', __('Database updated: ' . $submodule_name));\n        } else {\n            $this->Job->saveField('message', __('Could not update the database: ' . $submodule_name));\n        }\n    }\n\n    public function restartWorker()\n    {\n        if (empty($this->args[0]) || !is_numeric($this->args[0])) {\n            echo 'Usage: ' . APP . '/cake ' . 'Admin restartWorker [PID]' . PHP_EOL;\n        }\n        $pid = $this->args[0];\n        $result = $this->Server->restartWorker($pid);\n        if ($result === true) {\n            $response = __('Worker restarted.');\n        } else {\n            $response = __('Could not restart the worker. Reason: %s', $result);\n        }\n        echo sprintf(\n            '%s%s%s',\n            PHP_EOL,\n            $response,\n            PHP_EOL\n        );\n    }\n\n    public function killWorker()\n    {\n        if (empty($this->args[0]) || !is_numeric($this->args[0])) {\n            echo 'Usage: ' . APP . '/cake ' . 'Admin killWorker [PID]' . PHP_EOL;\n            die();\n        }\n        $pid = $this->args[0];\n        $result = $this->Server->killWorker($pid, false);\n        echo sprintf(\n            '%s%s%s',\n            PHP_EOL,\n            __('Worker killed.'),\n            PHP_EOL\n        );\n    }\n\n    public function startWorker()\n    {\n        if (empty($this->args[0])) {\n            echo 'Usage: ' . APP . '/cake ' . 'Admin startWorker [queue]' . PHP_EOL;\n            die();\n        }\n        $queue = $this->args[0];\n        $this->Server->startWorker($queue);\n        echo sprintf(\n            '%s%s%s',\n            PHP_EOL,\n            __('Worker started.'),\n            PHP_EOL\n        );\n    }\n\n    public function updateJSON() {\n        echo 'Updating all JSON structures.' . PHP_EOL;\n        $results = $this->Server->updateJSON();\n        foreach ($results as $type => $result) {\n            if ($result !== false) {\n                echo sprintf(\n                    __('%s updated.') . PHP_EOL,\n                    Inflector::pluralize(Inflector::humanize($type))\n                );\n            } else {\n                echo sprintf(\n                    __('Could not update %s.') . PHP_EOL,\n                    Inflector::pluralize(Inflector::humanize($type))\n                );\n            }\n        }\n        echo 'All JSON structures updated. Thank you and have a very safe and productive day.' . PHP_EOL;\n    }\n\n    public function updateGalaxies() {\n        // The following is 7.x upwards only\n        //$value = $this->args[0] ?? $this->args[0] ?? 0;\n        $value = empty($this->args[0])  ? null : $this->args[0];\n        if ($value === 'false') $value = 0;\n        if ($value === 'true') $value = 1;\n        if ($value === 'force') $value = 1;\n        $force = $value;\n        $result = $this->Galaxy->update($force);\n        if ($result) {\n            echo 'Galaxies updated' . PHP_EOL;\n        } else {\n            echo 'Could not update Galaxies' . PHP_EOL;\n        }\n    }\n\n    # FIXME: Make Taxonomy->update() return a status string on API if successful\n    public function updateTaxonomies() {\n        $result = $this->Taxonomy->update();\n        if ($result) {\n            echo 'Taxonomies updated' . PHP_EOL;\n        } else {\n            echo 'Could not update Taxonomies' . PHP_EOL;\n        }\n    }\n\n    public function updateWarningLists() {\n        $result = $this->Galaxy->update();\n        if ($result) {\n            echo 'Warning lists updated' . PHP_EOL;\n        } else {\n            echo 'Could not update warning lists' . PHP_EOL;\n        }\n    }\n\n    public function updateNoticeLists() {\n        $result = $this->Noticelist->update();\n        if ($result) {\n            echo 'Notice lists updated' . PHP_EOL;\n        } else {\n            echo 'Could not update notice lists' . PHP_EOL;\n        }\n    }\n\n    # FIXME: Fails to pass userId/orgId properly, global update works.\n    public function updateObjectTemplates() {\n        if (empty($this->args[0])) {\n            echo 'Usage: ' . APP . '/cake ' . 'Admin updateObjectTemplates [user_id]' . PHP_EOL;\n        } else {\n            $userId = $this->args[0];\n            $user = $this->User->find('first', array(\n                'recursive' => -1,\n                'conditions' => array(\n                    'User.id' => $userId,\n                ),\n                'fields' => array('User.id', 'User.org_id')\n            ));\n            # If the user_id passed does not exist, do a global update.\n            if (empty($user)) {\n                echo 'User with ID: ' . $userId . ' not found' . PHP_EOL;\n                $result = $this->ObjectTemplate->update();\n                if ($result) {\n                    echo 'Object templates updated' . PHP_EOL;\n                } else {\n                    echo 'Could not update object templates' . PHP_EOL;\n                }\n            } else {\n                $result = $this->ObjectTemplate->update($user, false,false);\n                if ($result) {\n                    echo 'Object templates updated' . PHP_EOL;\n                } else {\n                    echo 'Could not update object templates' . PHP_EOL;\n                }\n            }\n        }\n    }\n\n    public function jobUpgrade24() {\n        $jobId = $this->args[0];\n        $user_id = $this->args[1];\n        $this->loadModel('Job');\n        $this->Job->id = $jobId;\n        $this->loadModel('Server');\n        $this->Server->upgrade2324($user_id, $jobId);\n        $this->Job->saveField('progress', 100);\n        $this->Job->saveField('message', 'Job done.');\n        $this->Job->saveField('status', 4);\n    }\n\n    public function prune_update_logs() {\n        $jobId = $this->args[0];\n        $user_id = $this->args[1];\n        $user = $this->User->getAuthUser($user_id);\n        $this->loadModel('Job');\n        $this->Job->id = $jobId;\n        $this->loadModel('Log');\n        $this->Log->pruneUpdateLogs($jobId, $user);\n        $this->Job->saveField('progress', 100);\n        $this->Job->saveField('message', 'Job done.');\n        $this->Job->saveField('status', 4);\n    }\n\n    public function getWorkers() {\n        $result = $this->Server->workerDiagnostics($workerIssueCount);\n        $query = 'all';\n        if (!empty($this->args[0])) {\n            $query = $this->args[0];\n        }\n        if ($query === 'dead') {\n            $dead_workers = array();\n            foreach ($result as $queue => $data) {\n                if (!empty($data['workers'])) {\n                    foreach ($data['workers'] as $k => $worker) {\n                        if ($worker['alive']) {\n                            unset($result[$queue]['workers'][$k]);\n                        }\n                    }\n                }\n                if (empty($result[$queue]['workers'])) {\n                    unset($result[$queue]);\n                }\n            }\n        }\n        echo json_encode($result, JSON_PRETTY_PRINT) . PHP_EOL;\n    }\n\n    public function getSetting() {\n        $param = empty($this->args[0]) ? 'all' : $this->args[0];\n        $settings = $this->Server->serverSettingsRead();\n        $result = $settings;\n        if (!empty($param)) {\n            $result = 'No valid setting found for ' . $param;\n            foreach ($settings as $setting) {\n                if ($setting['setting'] == $param) {\n                    $result = $setting;\n                    break;\n                }\n            }\n        }\n        echo json_encode($result, JSON_PRETTY_PRINT) . PHP_EOL;\n  }\n\n    public function setSetting() {\n        $setting_name = !isset($this->args[0]) ? null : $this->args[0];\n        $value = !isset($this->args[1]) ? null : $this->args[1];\n        if ($value === 'false') $value = 0;\n        if ($value === 'true') $value = 1;\n        $cli_user = array('id' => 0, 'email' => 'SYSTEM', 'Organisation' => array('name' => 'SYSTEM'));\n        if (empty($setting_name) || $value === null) {\n            echo 'Invalid parameters. Usage: ' . APP . 'Console/cake Admin setSetting [setting_name] [setting_value]' . PHP_EOL;\n        } else {\n            $setting = $this->Server->getSettingData($setting_name);\n            if (empty($setting)) {\n                echo 'Invalid setting \"' . $setting_name . '\". Please make sure that the setting that you are attempting to change exists and if a module parameter, the modules are running.' . PHP_EOL;\n            }\n            $result = $this->Server->serverSettingsEditValue($cli_user, $setting, $value);\n            if ($result === true) {\n                echo 'Setting \"' . $setting_name . '\" changed to ' . $value . PHP_EOL;\n            } else {\n                echo $result;\n            }\n        }\n        echo PHP_EOL;\n    }\n\n    public function setDatabaseVersion() {\n        if (empty($this->args[0])) echo 'Invalid parameters. Usage: ' . APP . 'Console/cake Admin setDatabaseVersion [db_version]' . PHP_EOL;\n        else {\n            $db_version = $this->AdminSetting->find('first', array(\n                'conditions' => array('setting' => 'db_version')\n            ));\n            if (!empty($db_version)) {\n                $db_version['AdminSetting']['value'] = trim($this->args[0]);\n                $this->AdminSetting->save($db_version);\n                echo 'Database version set. MISP will replay all of the upgrade scripts since the selected version on the next user login.' . PHP_EOL;\n            } else {\n                echo 'Something went wrong. Could not find the existing db version.' . PHP_EOL;\n            }\n        }\n    }\n\n    public function updateDatabase() {\n        $whoami = exec('whoami');\n        if ($whoami === 'httpd' || $whoami === 'www-data' || $whoami === 'apache') {\n            echo 'Executing all updates to bring the database up to date with the current version.' . PHP_EOL;\n            $this->Server->runUpdates(true);\n            echo 'All updates completed.' . PHP_EOL;\n        } else {\n            die('This OS user is not allowed to run this command.'. PHP_EOL. 'Run it under `www-data` or `httpd`.' . PHP_EOL . 'You tried to run this command as: ' . $whoami . PHP_EOL);\n        }\n    }\n\n    public function updateApp() {\n        $whoami = exec('whoami');\n        if ($whoami === 'httpd' || $whoami === 'www-data' || $whoami === 'apache') {\n            $command = $this->args[0];\n            if (!empty($this->args[1])) {\n                $processId = $this->args[1];\n                $job = $this->Job->read(null, $processId);\n            } else { // create worker\n                $this->Job->create();\n                $job_data = array(\n                    'worker' => 'prio',\n                    'job_type' => 'update_app',\n                    'job_input' => 'command: ' . $command,\n                    'status' => 0,\n                    'retries' => 0,\n                    'org_id' => '',\n                    'org' => '',\n                    'message' => 'Updating.',\n                );\n                $this->Job->save($job_data);\n                $job = $this->Job->read(null, $this->Job->id);\n            }\n            $result = $this->Server->updateDatabase($command, false);\n            $job['Job']['progress'] = 100;\n            $job['Job']['message'] = 'Update done';\n            $this->Job->save($job);\n        } else {\n            die('This OS user is not allowed to run this command.' . PHP_EOL . 'Run it under `www-data` or `httpd`.' . PHP_EOL . 'You tried to run this command as: ' . $whoami . PHP_EOL);\n        }\n    }\n\n\n    public function getAuthkey() {\n        if (empty($this->args[0])) {\n            echo 'Invalid parameters. Usage: ' . APP . 'Console/cake Admin getAuthkey [user_email]' . PHP_EOL;\n        } else {\n            $user = $this->User->find('first', array(\n                'recursive' => -1,\n                'conditions' => array('User.email' => strtolower($this->args[0])),\n                'fields' => array('User.authkey')\n            ));\n            if (empty($user)) {\n                echo 'Invalid user.' . PHP_EOL;\n            } else {\n                echo $user['User']['authkey'] . PHP_EOL;\n            }\n        }\n    }\n\n    public function clearBruteforce()\n    {\n        $conditions = array('Bruteforce.username !=' => '');\n        if (!empty($this->args[0])) {\n            $conditions = array('Bruteforce.username' => $this->args[0]);\n        }\n        $result = $this->Bruteforce->deleteAll($conditions, false, false);\n        $target = empty($this->args[0]) ? 'all users' : $this->args[0];\n        if ($result) {\n            echo 'Brutefoce entries for ' . $target . ' deleted.' . PHP_EOL;\n        } else {\n            echo 'Something went wrong, could not delete bruteforce entries for ' . $target . '.' . PHP_EOL;\n        }\n    }\n\n    public function setDefaultRole()\n    {\n        if (empty($this->args[0]) || !is_numeric($this->args[0])) {\n            $roles = $this->Role->find('list', array(\n                'fields' => array('id', 'name')\n            ));\n            foreach ($roles as $k => $role) {\n                $roles[$k] = $k . '. ' . $role;\n            }\n            $roles = implode(PHP_EOL, $roles);\n            echo \"Roles:\\n\" . $roles . $this->separator();\n            echo 'Usage: ' . APP . 'cake ' . 'Admin setDefaultRole [role_id]' . PHP_EOL;\n        } else {\n            $role = $this->Role->find('first', array(\n                'recursive' => -1,\n                'conditions' => array('Role.id' => $this->args[0])\n            ));\n            if (!empty($role)) {\n                $result = $this->AdminSetting->changeSetting('default_role', $role['Role']['id']);\n                echo 'Default Role updated to ' . escapeshellcmd($role['Role']['name']) . PHP_EOL;\n            } else {\n                echo 'Something went wrong, invalid Role.' . PHP_EOL;\n            }\n        }\n    }\n\n    private function separator()\n    {\n        return PHP_EOL . '---------------------------------------------------------------' . PHP_EOL;\n    }\n\n    public function change_authkey()\n    {\n        if (empty($this->args[0])) {\n            echo 'MISP apikey command line tool.' . PHP_EOL . 'To assign a new random API key for a user: ' . APP . 'Console/cake Password [email]' . PHP_EOL . 'To assign a fixed API key: ' . APP . 'Console/cake Password [email] [authkey]' . PHP_EOL;\n            die();\n        }\n        if (!empty($this->args[1])) {\n            $authKey = $this->args[1];\n        } else {\n            $authKey = $this->User->generateAuthKey();\n        }\n        $user = $this->User->find('first', array(\n            'conditions' => array('email' => $this->args[0]),\n            'recursive' => -1,\n            'fields' => array('User.id', 'User.email', 'User.authkey')\n        ));\n        if (empty($user)) {\n            echo 'Invalid e-mail, user not found.' . PHP_EOL;\n            die();\n        }\n        $user['User']['authkey'] = $authKey;\n        $fields = array('id', 'email', 'authkey');\n        if (!$this->User->save($user, true, $fields)) {\n            echo 'Could not update authkey, reason:' . PHP_EOL . json_encode($this->User->validationErrors) . PHP_EOL;\n            die();\n        }\n        echo 'Updated, new key:' . PHP_EOL . $authKey . PHP_EOL;\n    }\n\n    public function getOptionParser() {\n        $parser = parent::getOptionParser();\n        $parser->addSubcommand('updateJSON', array(\n            'help' => __('Update the JSON definitions of MISP.'),\n            'parser' => array(\n                'arguments' => array(\n                    'update' => array('help' => __('Update the submodules before ingestion.'), 'short' => 'u', 'boolean' => 1)\n                )\n            )\n        ));\n        return $parser;\n    }\n\n    public function recoverSinceLastSuccessfulUpdate()\n    {\n        $this->loadModel('Log');\n        $logs = $this->Log->find('all', array(\n            'conditions' => array(\n                'action' => 'update_database',\n                'title LIKE ' => array(\n                    'Successfuly executed the SQL query for %',\n                    'Issues executing the SQL query for %'\n                )\n            ),\n            'order' => 'id DESC'\n        ));\n        $last_db_num = -1;\n        foreach ($logs as $i => $log) {\n            preg_match_all('/.* the SQL query for (\\d+)/', $log['Log']['title'], $matches);\n            if (!empty($matches[1])) {\n                $last_db_num = $matches[1][0];\n                break;\n            }\n        }\n        if ($last_db_num > 0) {\n            echo __('Last DB num which was successfully executed: ') . h($last_db_num) . PHP_EOL;\n            // replay all update from that point.\n            $this->loadModel('AdminSetting');\n            $db_version = $this->AdminSetting->find('first', array('conditions' => array('setting' => 'db_version')));\n            if (!empty($db_version)) {\n                $db_version['AdminSetting']['value'] = $last_db_num;\n                $this->AdminSetting->save($db_version);\n                $this->Server->runUpdates(true);\n            } else {\n                echo __('Something went wrong. Could not find the existing db version') . PHP_EOL;\n            }\n        } else {\n            echo __('DB was never successfully updated or we are on a fresh install') . PHP_EOL;\n        }\n    }\n\n    public function cleanCaches()\n    {\n        echo 'Cleaning caches...' . PHP_EOL;\n        $this->Server->cleanCacheFiles();\n        echo '...caches lost in time, like tears in rain.' . PHP_EOL;\n    }\n}\n", "<?php\nApp::uses('Component', 'Controller');\n\nclass ACLComponent extends Component\n{\n\n    // syntax:\n    // $__aclList[$controller][$action] = $permission_rules\n    // $controller == '*'                 -  any controller can have this action\n    // $action == array()                 -  site admin only has access\n    // $action == '*'                     -  any role has access\n    // $action == array('OR' => array())  -  any role in the array has access\n    // $action == array('AND' => array()) -  roles with all permissions in the array have access\n    // If we add any new functionality to MISP and we don't add it to this list, it will only be visible to site admins.\n    private $__aclList = array(\n            '*' => array(\n                    'blackhole' => array(),\n                    'checkAction' => array(),\n                    'checkAuthUser' => array(),\n                    'checkExternalAuthUser' => array(),\n                    'cleanModelCaches' => array(),\n                    'debugACL' => array(),\n                    'generateCount' => array(),\n                    'getActions' => array(),\n                    'pruneDuplicateUUIDs' => array(),\n                    'queryACL' => array(),\n                    'removeDuplicateEvents' => array(),\n                    'updateDatabase' => array(),\n                    'upgrade2324' => array(),\n            ),\n            'attributes' => array(\n                    'add' => array('perm_add'),\n                    'add_attachment' => array('perm_add'),\n                    'add_threatconnect' => array('perm_add'),\n                    'addTag' => array('perm_tagger'),\n                    'attributeReplace' => array('perm_add'),\n                    'attributeStatistics' => array('*'),\n                    'bro' => array('*'),\n                    'checkAttachments' => array(),\n                    'checkComposites' => array('perm_admin'),\n                    'checkOrphanedAttributes' => array(),\n                    'delete' => array('perm_add'),\n                    'deleteSelected' => array('perm_add'),\n                    'describeTypes' => array('*'),\n                    'download' => array('*'),\n                    'downloadAttachment' => array('*'),\n                    'downloadSample' => array('*'),\n                    'edit' => array('perm_add'),\n                    'editField' => array('perm_add'),\n                    'editSelected' => array('perm_add'),\n                    'exportSearch' => array('*'),\n                    'fetchEditForm' => array('perm_add'),\n                    'fetchViewValue' => array('*'),\n                    'generateCorrelation' => array(),\n                    'hoverEnrichment' => array('perm_add'),\n                    'index' => array('*'),\n                    'pruneOrphanedAttributes' => array(),\n                    'removeTag' => array('perm_tagger'),\n                    'reportValidationIssuesAttributes' => array(),\n                    'restore' => array('perm_add'),\n                    'restSearch' => array('*'),\n                    'returnAttributes' => array('*'),\n                    'rpz' => array('*'),\n                    'search' => array('*'),\n                    'searchAlternate' => array('*'),\n                    'toggleCorrelation' => array('perm_add'),\n                    'text' => array('*'),\n                    'toggleToIDS' => array('perm_add'),\n                    'updateAttributeValues' => array('perm_add'),\n                    'view' => array('*'),\n                    'viewPicture' => array('*'),\n            ),\n            'communities' => array(\n                    'index' => array(),\n                    'requestAccess' => array(),\n                    'view' => array()\n            ),\n            'eventBlacklists' => array(\n                    'add' => array(),\n                    'delete' => array(),\n                    'edit' => array(),\n                    'index' => array(),\n                    'massDelete' => array()\n            ),\n            'eventDelegations' => array(\n                    'acceptDelegation' => array('perm_add'),\n                    'delegateEvent' => array('perm_delegate'),\n                    'deleteDelegation' => array('perm_add'),\n                    'index' => array('*'),\n                    'view' => array('*'),\n            ),\n            'events' => array(\n                    'add' => array('perm_add'),\n                    'addIOC' => array('perm_add'),\n                    'addTag' => array('perm_tagger'),\n                    'add_misp_export' => array('perm_modify'),\n                    'alert' => array('perm_publish'),\n                    'automation' => array('perm_auth'),\n                    'checkLocks' => array('perm_add'),\n                    'checkPublishedStatus' => array('*'),\n                    'checkuuid' => array('perm_sync'),\n                    'contact' => array('*'),\n                    'create_dummy_event' => array(),\n                    'create_massive_dummy_events' => array(),\n                    'csv' => array('*'),\n                    'cullEmptyEvents' => array(),\n                    'delegation_index' => array('*'),\n                    'delete' => array('perm_add'),\n                    'deleteNode' => array('*'),\n                    'dot' => array(),\n                    'downloadExport' => array('*'),\n                    'downloadOpenIOCEvent' => array('*'),\n                    'downloadSearchResult' => array('*'),\n                    'edit' => array('perm_add'),\n                    'enrichEvent' => array('perm_add'),\n                    'export' => array('*'),\n                    'exportChoice' => array('*'),\n                    'exportModule' => array('*'),\n                    'filterEventIdsForPush' => array('perm_sync'),\n                    'filterEventIndex' => array('*'),\n                    'freeTextImport' => array('perm_add'),\n                    'getEditStrategy' => array('perm_add'),\n                    'getEventInfoById' => array('*'),\n                    'getEventGraphReferences' => array('*'),\n                    'getEventGraphTags' => array('*'),\n                    'getEventGraphGeneric' => array('*'),\n                    'genDistributionGraph' => array('*'),\n                    'getDistributionGraph' => array('*'),\n                    'getReferenceData' => array('*'),\n                    'getReferences' => array('*'),\n                    'getObjectTemplate' => array('*'),\n                    'handleModuleResults' => array('*'),\n                    'hids' => array('*'),\n                    'index' => array('*'),\n                    'importChoice' => array('*'),\n                    'importModule' => array('*'),\n                    'massDelete' => array('perm_site_admin'),\n                    'merge' => array('perm_modify'),\n                    'nids' => array('*'),\n                    'proposalEventIndex' => array('*'),\n                    'publish' => array('perm_publish'),\n                    'pushEventToZMQ' => array('perm_publish_zmq'),\n                    'pushEventToKafka' => array('perm_publish_kafka'),\n                    'pushProposals' => array('perm_sync'),\n                    'queryEnrichment' => array('perm_add'),\n                    'removePivot' => array('*'),\n                    'removeTag' => array('perm_tagger'),\n                    'reportValidationIssuesEvents' => array(),\n                    'restSearch' => array('*'),\n                    'saveFreeText' => array('perm_add'),\n                    'stix' => array('*'),\n                    'stix2' => array('*'),\n                    'strposarray' => array(),\n                    'toggleCorrelation' => array('perm_add'),\n                    'unpublish' => array('perm_modify'),\n                    'updateGraph' => array('*'),\n                    'upload_analysis_file' => array('perm_add'),\n                    'upload_sample' => array('AND' => array('perm_auth', 'perm_add')),\n                    'upload_stix' => array('perm_add'),\n                    'view' => array('*'),\n                    'viewEventAttributes' => array('*'),\n                    'viewEventGraph' => array('*'),\n                    'viewGraph' => array('*'),\n                    'viewGalaxyMatrix' => array('*'),\n                    'xml' => array('*')\n            ),\n            'favouriteTags' => array(\n                'index' => array('*'),\n                'toggle' => array('*'),\n                'getToggleField' => array('*')\n            ),\n            'feeds' => array(\n                    'add' => array(),\n                    'cacheFeeds' => array(),\n                    'compareFeeds' => array('*'),\n                    'delete' => array(),\n                    'disable' => array(),\n                    'edit' => array(),\n                    'enable' => array(),\n                    'feedCoverage' => array('*'),\n                    'fetchFromAllFeeds' => array(),\n                    'fetchFromFeed' => array(),\n                    'fetchSelectedFromFreetextIndex' => array(),\n                    'getEvent' => array(),\n                    'importFeeds' => array(),\n                    'index' => array('*'),\n                    'previewEvent' => array('*'),\n                    'previewIndex' => array('*'),\n                    'searchCaches' => array('*'),\n                    'toggleSelected' => array('perm_site_admin'),\n                    'view' => array('*'),\n            ),\n            'galaxies' => array(\n                'attachCluster' => array('perm_tagger'),\n                'attachMultipleClusters' => array('perm_tagger'),\n                'delete' => array(),\n                'index' => array('*'),\n                'selectGalaxy' => array('perm_tagger'),\n                'selectGalaxyNamespace' => array('perm_tagger'),\n                'selectCluster' => array('perm_tagger'),\n                'showGalaxies' => array('*'),\n                'update' => array(),\n                'view' => array('*'),\n                'viewGraph' => array('*')\n            ),\n            'galaxyClusters' => array(\n                'attachToEvent' => array('perm_tagger'),\n                'delete' => array('perm_site_admin'),\n                'detach' => array('perm_tagger'),\n                'index' => array('*'),\n                'view' => array('*'),\n                'viewGalaxyMatrix' => array('*')\n            ),\n            'galaxyElements' => array(\n                    'index' => array('*')\n            ),\n            'jobs' => array(\n                    'cache' => array('*'),\n                    'getError' => array(),\n                    'getGenerateCorrelationProgress' => array('*'),\n                    'getProgress' => array('*'),\n                    'index' => array(),\n                    'clearJobs' => array()\n            ),\n            'logs' => array(\n                    'admin_index' => array('perm_audit'),\n                    'admin_search' => array('perm_audit'),\n                    'event_index' => array('*'),\n                    'maxDateActivity' => array('*'),\n                    'returnDates' => array('*'),\n                    'testForStolenAttributes' => array(),\n                    'pruneUpdateLogs' => array()\n            ),\n      'modules' => array(\n        'index' => array('perm_auth'),\n        'queryEnrichment' => array('perm_auth'),\n      ),\n            'news' => array(\n                    'add' => array(),\n                    'edit' => array(),\n                    'delete' => array(),\n                    'index' => array('*'),\n            ),\n            'noticelists' => array(\n                    'delete' => array(),\n                    'enableNoticelist' => array(),\n                    'getToggleField' => array(),\n                    'index' => array('*'),\n                    'toggleEnable' => array(),\n                    'update' => array(),\n                    'view' => array('*')\n            ),\n            'objects' => array(\n                'add' => array('perm_add'),\n                'addValueField' => array('perm_add'),\n                'delete' => array('perm_add'),\n                'edit' => array('perm_add'),\n                'get_row' => array('perm_add'),\n                'orphanedObjectDiagnostics' => array(),\n                'proposeObjectsFromAttributes' => array('*'),\n                'groupAttributesIntoObject' => array('perm_add'),\n                'revise_object' => array('perm_add'),\n                'view' => array('*'),\n            ),\n            'objectReferences' => array(\n                'add' => array('perm_add'),\n                'delete' => array('perm_add'),\n                'view' => array('*'),\n            ),\n            'objectTemplates' => array(\n                'activate' => array(),\n                'add' => array('perm_object_template'),\n                'edit' => array('perm_object_template'),\n                'delete' => array('perm_object_template'),\n                'getToggleField' => array(),\n                'objectChoice' => array('*'),\n                'objectMetaChoice' => array('perm_add'),\n                'view' => array('*'),\n                'viewElements' => array('*'),\n                'index' => array('*'),\n                'update' => array('perm_site_admin')\n            ),\n            'objectTemplateElements' => array(\n                'viewElements' => array('*')\n            ),\n            'orgBlacklists' => array(\n                    'add' => array(),\n                    'delete' => array(),\n                    'edit' => array(),\n                    'index' => array(),\n            ),\n            'organisations' => array(\n                    'admin_add' => array(),\n                    'admin_delete' => array(),\n                    'admin_edit' => array(),\n                    'admin_generateuuid' => array(),\n                    'admin_merge' => array(),\n                    'fetchOrgsForSG' => array('*'),\n                    'fetchSGOrgRow' => array('*'),\n                    'getUUIDs' => array('perm_sync'),\n                    'index' => array('*'),\n                    'landingpage' => array('*'),\n                    'view' => array('*'),\n            ),\n            'pages' => array(\n                    'display' => array('*'),\n            ),\n            'posts' => array(\n                    'add' => array('*'),\n                    'delete' => array('*'),\n                    'edit' => array('*'),\n                    'pushMessageToZMQ' => array('perm_site_admin')\n            ),\n            'regexp' => array(\n                    'admin_add' => array('perm_regexp_access'),\n                    'admin_clean' => array('perm_regexp_access'),\n                    'admin_delete' => array('perm_regexp_access'),\n                    'admin_edit' => array('perm_regexp_access'),\n                    'admin_index' => array('perm_regexp_access'),\n                    'cleanRegexModifiers' => array('perm_regexp_access'),\n                    'index' => array('*'),\n            ),\n            'restClientHistory' => array(\n                    'delete' => array('*'),\n                    'index' => array('*')\n            ),\n            'roles' => array(\n                    'admin_add' => array(),\n                    'admin_delete' => array(),\n                    'admin_edit' => array(),\n                    'admin_index' => array('perm_admin'),\n                    'admin_set_default' => array(),\n                    'index' => array('*'),\n                    'view' => array('*'),\n            ),\n            'servers' => array(\n                    'add' => array(),\n                    'cache' => array('perm_site_admin'),\n                    'checkout' => array(),\n                    'createSync' => array('perm_sync'),\n                    'delete' => array(),\n                    'deleteFile' => array(),\n                    'edit' => array(),\n                    'fetchServersForSG' => array('*'),\n                    'filterEventIndex' => array(),\n                    'getApiInfo' => array('*'),\n                    'getGit' => array(),\n                    'getInstanceUUID' => array('perm_sync'),\n                    'getPyMISPVersion' => array('*'),\n                    'getSetting' => array(),\n                    'getSubmodulesStatus' => array('perm_site_admin'),\n                    'getSubmoduleQuickUpdateForm' => array('perm_site_admin'),\n                    'getWorkers' => array(),\n                    'getVersion' => array('*'),\n                    'import' => ('perm_site_admin'),\n                    'index' => array('OR' => array('perm_sync', 'perm_admin')),\n                    'ondemandAction' => array(),\n                    'postTest' => array('perm_sync'),\n                    'previewEvent' => array(),\n                    'previewIndex' => array(),\n                    'pull' => array(),\n                    'purgeSessions' => array(),\n                    'push' => array(),\n                    'rest' => array('perm_auth'),\n                    'restartWorkers' => array(),\n                    'serverSettings' => array(),\n                    'serverSettingsEdit' => array(),\n                    'serverSettingsReloadSetting' => array(),\n                    'startWorker' => array(),\n                    'startZeroMQServer' => array(),\n                    'statusZeroMQServer' => array(),\n                    'stopWorker' => array(),\n                    'stopZeroMQServer' => array(),\n                    'testConnection' => array('perm_sync'),\n                    'update' => array(),\n                    'updateJSON' => array(),\n                    'updateProgress' => array(),\n                    'updateSubmodule' => array(),\n                    'uploadFile' => array(),\n                    'clearWorkerQueue' => array()\n            ),\n            'shadowAttributes' => array(\n                    'accept' => array('perm_add'),\n                    'acceptSelected' => array('perm_add'),\n                    'add' => array('perm_add'),\n                    'add_attachment' => array('perm_add'),\n                    'delete' => array('perm_add'),\n                    'discard' => array('perm_add'),\n                    'discardSelected' => array('perm_add'),\n                    'download' => array('*'),\n                    'edit' => array('perm_add'),\n                    'editField' => array('perm_add'),\n                    'fetchEditForm' => array('perm_add'),\n                    'generateCorrelation' => array(),\n                    'getProposalsByUuid' => array('perm_sync'),\n                    'getProposalsByUuidList' => array('perm_sync'),\n                    'index' => array('*'),\n                    'view' => array('*'),\n            ),\n            'sharingGroups' => array(\n                    'add' => array('perm_sharing_group'),\n                    'addServer' => array('perm_sharing_group'),\n                    'addOrg' => array('perm_sharing_group'),\n                    'delete' => array('perm_sharing_group'),\n                    'edit' => array('perm_sharing_group'),\n                    'index' => array('*'),\n                    'removeServer' => array('perm_sharing_group'),\n                    'removeOrg' => array('perm_sharing_group'),\n                    'view' => array('*'),\n            ),\n            'sightings' => array(\n                    'add' => array('perm_sighting'),\n                    'restSearch' => array('perm_sighting'),\n                    'advanced' => array('perm_sighting'),\n                    'delete' => array('perm_sighting'),\n                    'index' => array('*'),\n                    'listSightings' => array('*'),\n                    'quickDelete' => array('perm_sighting'),\n                    'viewSightings' => array('*'),\n                    'quickAdd' => array('perm_sighting')\n            ),\n            'tagCollections' => array(\n                    'add' => array('perm_tag_editor'),\n                    'addTag' => array('perm_tag_editor'),\n                    'delete' => array('perm_tag_editor'),\n                    'edit' => array('perm_tag_editor'),\n                    'getRow' => array('perm_tag_editor'),\n                    'import' => array('perm_tag_editor'),\n                    'index' => array('*'),\n                    'removeTag' => array('perm_tag_editor'),\n                    'view' => array('*')\n            ),\n            'tags' => array(\n                    'add' => array('perm_tag_editor'),\n                    'attachTagToObject' => array('perm_tagger'),\n                    'delete' => array(),\n                    'edit' => array(),\n                    'index' => array('*'),\n                    'quickAdd' => array('perm_tag_editor'),\n                    'removeTagFromObject' => array('perm_tagger'),\n                    'search' => array('*'),\n                    'selectTag' => array('perm_tagger'),\n                    'selectTaxonomy' => array('perm_tagger'),\n                    'showEventTag' => array('*'),\n                    'showAttributeTag' => array('*'),\n                    'showTagControllerTag' => array('*'),\n                    'tagStatistics' => array('*'),\n                    'view' => array('*'),\n                    'viewGraph' => array('*'),\n                    'viewTag' => array('*')\n            ),\n            'tasks' => array(\n                    'index' => array(),\n                    'setTask' => array(),\n            ),\n            'taxonomies' => array(\n                    'addTag' => array(),\n                    'delete' => array(),\n                    'disable' => array(),\n                    'disableTag' => array(),\n                    'enable' => array(),\n                    'index' => array('*'),\n                    'taxonomyMassConfirmation' => array('perm_tagger'),\n                    'taxonomyMassHide' => array('perm_tagger'),\n                    'taxonomyMassUnhide' => array('perm_tagger'),\n                    'toggleRequired' => array('perm_site_admin'),\n                    'update' => array(),\n                    'view' => array('*'),\n                    'unhideTag' => array('perm_tagger'),\n                    'hideTag' => array('perm_tagger'),\n            ),\n            'templateElements' => array(\n                    'add' => array('perm_template'),\n                    'delete' => array('perm_template'),\n                    'edit' => array('perm_template'),\n                    'index' => array('*'),\n                    'templateElementAddChoices' => array('perm_template'),\n            ),\n            'templates' => array(\n                    'add' => array('perm_template'),\n                    'delete' => array('perm_template'),\n                    'deleteTemporaryFile' => array('perm_add'),\n                    'edit' => array('perm_template'),\n                    'index' => array('*'),\n                    'populateEventFromTemplate' => array('perm_add'),\n                    'saveElementSorting' => array('perm_template'),\n                    'submitEventPopulation' => array('perm_add'),\n                    'templateChoices' => array('*'),\n                    'uploadFile' => array('*'),\n                    'view' => array('*'),\n            ),\n            'threads' => array(\n                    'index' => array('*'),\n                    'view' => array('*'),\n                    'viewEvent' => array('*'),\n            ),\n            'users' => array(\n                    'admin_add' => array('perm_admin'),\n                    'admin_delete' => array('perm_admin'),\n                    'admin_edit' => array('perm_admin'),\n                    'admin_email' => array('perm_admin'),\n                    'admin_filterUserIndex' => array('perm_admin'),\n                    'admin_index' => array('perm_admin'),\n                    'admin_quickEmail' => array('perm_admin'),\n                    'admin_view' => array('perm_admin'),\n                    'arrayCopy' => array(),\n                    'attributehistogram' => array('*'),\n                    'change_pw' => array('*'),\n                    'checkAndCorrectPgps' => array(),\n                    'checkIfLoggedIn' => array('*'),\n                    'dashboard' => array('*'),\n                    'delete' => array('perm_admin'),\n                    'downloadTerms' => array('*'),\n                    'edit' => array('*'),\n                    'fetchPGPKey' => array('*'),\n                    'histogram' => array('*'),\n                    'index' => array('*'),\n                    'initiatePasswordReset' => array('perm_admin'),\n                    'login' => array('*'),\n                    'logout' => array('*'),\n                    'resetauthkey' => array('*'),\n                    'request_API' => array('*'),\n                    'routeafterlogin' => array('*'),\n                    'statistics' => array('*'),\n                    'tagStatisticsGraph' => array('*'),\n                    'terms' => array('*'),\n                    'updateLoginTime' => array('*'),\n                    'verifyCertificate' => array(),\n                    'verifyGPG' => array(),\n                    'view' => array('*'),\n            ),\n            'warninglists' => array(\n                    'checkValue' => array('perm_auth'),\n                    'delete' => array(),\n                    'enableWarninglist' => array(),\n                    'getToggleField' => array(),\n                    'index' => array('*'),\n                    'toggleEnable' => array(),\n                    'update' => array(),\n                    'view' => array('*')\n            ),\n            'whitelists' => array(\n                    'admin_add' => array('perm_regexp_access'),\n                    'admin_delete' => array('perm_regexp_access'),\n                    'admin_edit' => array('perm_regexp_access'),\n                    'admin_index' => array('perm_regexp_access'),\n                    'index' => array('*'),\n            ),\n            'eventGraph' => array(\n                    'view' => array('*'),\n                    'add' => array('perm_add'),\n                    'delete' => array('perm_modify'),\n            )\n    );\n\n    // The check works like this:\n    // If the user is a site admin, return true\n    // If the requested action has an OR-d list, iterate through the list. If any of the permissions are set for the user, return true\n    // If the requested action has an AND-ed list, iterate through the list. If any of the permissions for the user are not set, turn the check to false. Otherwise return true.\n    // If the requested action has a permission, check if the user's role has it flagged. If yes, return true\n    // If we fall through all of the checks, return an exception.\n    public function checkAccess($user, $controller, $action, $soft = false)\n    {\n        $controller = lcfirst(Inflector::camelize($controller));\n        $action = strtolower($action);\n        $aclList = $this->__aclList;\n        foreach ($aclList as $k => $v) {\n            $aclList[$k] = array_change_key_case($v);\n        }\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        if (!isset($aclList[$controller])) {\n            return $this->__error(404, 'Invalid controller.', $soft);\n        }\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        if (isset($aclList[$controller][$action]) && !empty($aclList[$controller][$action])) {\n            if (in_array('*', $aclList[$controller][$action])) {\n                return true;\n            }\n            if (isset($aclList[$controller][$action]['OR'])) {\n                foreach ($aclList[$controller][$action]['OR'] as $permission) {\n                    if ($user['Role'][$permission]) {\n                        return true;\n                    }\n                }\n            } elseif (isset($aclList[$controller][$action]['AND'])) {\n                $allConditionsMet = true;\n                foreach ($aclList[$controller][$action]['AND'] as $permission) {\n                    if (!$user['Role'][$permission]) {\n                        $allConditionsMet = false;\n                    }\n                }\n                if ($allConditionsMet) {\n                    return true;\n                }\n            } elseif ($user['Role'][$aclList[$controller][$action][0]]) {\n                return true;\n            }\n        }\n        return $this->__error(403, 'You do not have permission to use this functionality.', $soft);\n    }\n\n    private function __error($code, $message, $soft = false)\n    {\n        if ($soft) {\n            return $code;\n        }\n        switch ($code) {\n            case 404:\n                throw new NotFoundException($message);\n                break;\n            case 403:\n                throw new MethodNotAllowedException($message);\n            default:\n                throw new InternalErrorException('Unknown error: ' . $message);\n        }\n    }\n\n    private function __findAllFunctions()\n    {\n        $functionFinder = '/function[\\s\\n]+(\\S+)[\\s\\n]*\\(/';\n        $dir = new Folder(APP . 'Controller');\n        $files = $dir->find('.*\\.php');\n        $results = array();\n        foreach ($files as $file) {\n            $controllerName = lcfirst(str_replace('Controller.php', \"\", $file));\n            if ($controllerName === 'app') {\n                $controllerName = '*';\n            }\n            $functionArray = array();\n            $fileContents = file_get_contents(APP . 'Controller' . DS . $file);\n            $fileContents = preg_replace('/\\/\\*[^\\*]+?\\*\\//', '', $fileContents);\n            preg_match_all($functionFinder, $fileContents, $functionArray);\n            foreach ($functionArray[1] as $function) {\n                if (substr($function, 0, 1) !== '_' && $function !== 'beforeFilter' && $function !== 'afterFilter') {\n                    $results[$controllerName][] = $function;\n                }\n            }\n        }\n        return $results;\n    }\n\n    public function printAllFunctionNames($content = false)\n    {\n        $results = $this->__findAllFunctions();\n        ksort($results);\n        return $results;\n    }\n\n    public function findMissingFunctionNames($content = false)\n    {\n        $results = $this->__findAllFunctions();\n        $missing = array();\n        foreach ($results as $controller => $functions) {\n            foreach ($functions as $function) {\n                if (!isset($this->__aclList[$controller])\n                || !in_array($function, array_keys($this->__aclList[$controller]))) {\n                    $missing[$controller][] = $function;\n                }\n            }\n        }\n        return $missing;\n    }\n\n    public function printRoleAccess($content = false)\n    {\n        $results = array();\n        $this->Role = ClassRegistry::init('Role');\n        $conditions = array();\n        if (is_numeric($content)) {\n            $conditions = array('Role.id' => $content);\n        }\n        $roles = $this->Role->find('all', array(\n            'recursive' => -1,\n            'conditions' => $conditions\n        ));\n        if (empty($roles)) {\n            throw new NotFoundException('Role not found.');\n        }\n        foreach ($roles as $role) {\n            $urls = $this->__checkRoleAccess($role['Role']);\n            $results[$role['Role']['id']] = array('name' => $role['Role']['name'], 'urls' => $urls);\n        }\n        return $results;\n    }\n\n    private function __checkRoleAccess($role)\n    {\n        $result = array();\n        foreach ($this->__aclList as $controller => $actions) {\n            $controllerNames = Inflector::variable($controller) == Inflector::underscore($controller) ? array(Inflector::variable($controller)) : array(Inflector::variable($controller), Inflector::underscore($controller));\n            foreach ($controllerNames as $controllerName) {\n                foreach ($actions as $action => $permissions) {\n                    if ($role['perm_site_admin']) {\n                        $result[] = DS . $controllerName . DS . $action;\n                    } elseif (in_array('*', $permissions)) {\n                        $result[] = DS . $controllerName . DS . $action . DS . '*';\n                    } elseif (isset($permissions['OR'])) {\n                        $access = false;\n                        foreach ($permissions['OR'] as $permission) {\n                            if ($role[$permission]) {\n                                $access = true;\n                            }\n                        }\n                        if ($access) {\n                            $result[] = DS . $controllerName . DS . $action . DS . '*';\n                        }\n                    } elseif (isset($permissions['AND'])) {\n                        $access = true;\n                        foreach ($permissions['AND'] as $permission) {\n                            if ($role[$permission]) {\n                                $access = false;\n                            }\n                        }\n                        if ($access) {\n                            $result[] = DS . $controllerName . DS . $action . DS . '*';\n                        }\n                    } elseif (isset($permissions[0]) && $role[$permissions[0]]) {\n                        $result[] = DS . $controllerName . DS . $action . DS . '*';\n                    }\n                }\n            }\n        }\n        return $result;\n    }\n}\n", "<?php\nApp::uses('AppController', 'Controller');\nApp::uses('Xml', 'Utility');\n\nclass ServersController extends AppController\n{\n    public $components = array('Security' ,'RequestHandler');   // XXX ACL component\n\n    public $paginate = array(\n            'limit' => 60,\n            'recursive' => -1,\n            'contain' => array(\n                    'User' => array(\n                            'fields' => array('User.id', 'User.org_id', 'User.email'),\n                    ),\n                    'Organisation' => array(\n                            'fields' => array('Organisation.name', 'Organisation.id'),\n                    ),\n                    'RemoteOrg' => array(\n                            'fields' => array('RemoteOrg.name', 'RemoteOrg.id'),\n                    ),\n            ),\n            'maxLimit' => 9999, // LATER we will bump here on a problem once we have more than 9999 events\n            'order' => array(\n                    'Server.url' => 'ASC'\n            ),\n    );\n\n    public $uses = array('Server', 'Event');\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n        $this->Security->unlockedActions[] = 'getApiInfo';\n        // permit reuse of CSRF tokens on some pages.\n        switch ($this->request->params['action']) {\n            case 'push':\n            case 'pull':\n            case 'getVersion':\n            case 'testConnection':\n                $this->Security->csrfUseOnce = false;\n        }\n    }\n\n    public function index()\n    {\n        if (!$this->_isSiteAdmin()) {\n            if (!$this->userRole['perm_sync'] && !$this->userRole['perm_admin']) {\n                $this->redirect(array('controller' => 'events', 'action' => 'index'));\n            }\n            $this->paginate['conditions'] = array('Server.org_id LIKE' => $this->Auth->user('org_id'));\n        }\n        if ($this->_isRest()) {\n            $params = array(\n                'recursive' => -1,\n                'contain' => array(\n                        'User' => array(\n                                'fields' => array('User.id', 'User.org_id', 'User.email'),\n                        ),\n                        'Organisation' => array(\n                                'fields' => array('Organisation.id', 'Organisation.name', 'Organisation.uuid', 'Organisation.nationality', 'Organisation.sector', 'Organisation.type'),\n                        ),\n                        'RemoteOrg' => array(\n                                'fields' => array('RemoteOrg.id', 'RemoteOrg.name', 'RemoteOrg.uuid', 'RemoteOrg.nationality', 'RemoteOrg.sector', 'RemoteOrg.type'),\n                        ),\n                ),\n            );\n            $servers = $this->Server->find('all', $params);\n            $servers = $this->Server->attachServerCacheTimestamps($servers);\n            return $this->RestResponse->viewData($servers, $this->response->type());\n        } else {\n            $servers = $this->paginate();\n            $servers = $this->Server->attachServerCacheTimestamps($servers);\n            $this->set('servers', $servers);\n            $collection = array();\n            $collection['orgs'] = $this->Server->Organisation->find('list', array(\n                  'fields' => array('id', 'name'),\n            ));\n            $this->loadModel('Tag');\n            $collection['tags'] = $this->Tag->find('list', array(\n                  'fields' => array('id', 'name'),\n            ));\n            $this->set('collection', $collection);\n        }\n    }\n\n    public function previewIndex($id)\n    {\n        $urlparams = '';\n        $passedArgs = array();\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        $server = $this->Server->find('first', array('conditions' => array('Server.id' => $id), 'recursive' => -1, 'fields' => array('Server.id', 'Server.url', 'Server.name')));\n        if (empty($server)) {\n            throw new NotFoundException('Invalid server ID.');\n        }\n        $validFilters = $this->Server->validEventIndexFilters;\n        foreach ($validFilters as $k => $filter) {\n            if (isset($this->passedArgs[$filter])) {\n                $passedArgs[$filter] = $this->passedArgs[$filter];\n                if ($k != 0) {\n                    $urlparams .= '/';\n                }\n                $urlparams .= $filter . ':' . $this->passedArgs[$filter];\n            }\n        }\n        $combinedArgs = array_merge($this->passedArgs, $passedArgs);\n        if (!isset($combinedArgs['sort'])) {\n            $combinedArgs['sort'] = 'timestamp';\n            $combinedArgs['direction'] = 'desc';\n        }\n        if (empty($combinedArgs['page'])) {\n            $combinedArgs['page'] = 1;\n        }\n        if (empty($combinedArgs['limit'])) {\n            $combinedArgs['limit'] = 60;\n        }\n        $total_count = 0;\n        $events = $this->Server->previewIndex($id, $this->Auth->user(), $combinedArgs, $total_count);\n        $this->loadModel('Event');\n        $threat_levels = $this->Event->ThreatLevel->find('all');\n        $this->set('threatLevels', Set::combine($threat_levels, '{n}.ThreatLevel.id', '{n}.ThreatLevel.name'));\n        App::uses('CustomPaginationTool', 'Tools');\n        $customPagination = new CustomPaginationTool();\n        $params = $customPagination->createPaginationRules($events, $this->passedArgs, $this->alias);\n        if (!empty($total_count)) {\n            $params['pageCount'] = ceil($total_count / $params['limit']);\n        }\n        $this->params->params['paging'] = array($this->modelClass => $params);\n        if (is_array($events)) {\n            if (count($events) > 60) {\n                $customPagination->truncateByPagination($events, $params);\n            }\n        } else ($events = array());\n        $this->set('events', $events);\n        $this->set('eventDescriptions', $this->Event->fieldDescriptions);\n        $this->set('analysisLevels', $this->Event->analysisLevels);\n        $this->set('distributionLevels', $this->Event->distributionLevels);\n\n        $shortDist = array(0 => 'Organisation', 1 => 'Community', 2 => 'Connected', 3 => 'All', 4 => ' sharing Group');\n        $this->set('shortDist', $shortDist);\n        $this->set('id', $id);\n        $this->set('urlparams', $urlparams);\n        $this->set('passedArgs', json_encode($passedArgs));\n        $this->set('passedArgsArray', $passedArgs);\n        $this->set('server', $server);\n    }\n\n    public function previewEvent($serverId, $eventId, $all = false)\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        $server = $this->Server->find('first', array('conditions' => array('Server.id' => $serverId), 'recursive' => -1, 'fields' => array('Server.id', 'Server.url', 'Server.name')));\n        if (empty($server)) {\n            throw new NotFoundException('Invalid server ID.');\n        }\n        $event = $this->Server->previewEvent($serverId, $eventId);\n        // work on this in the future to improve the feedback\n        // 2 = wrong error code\n        if (is_numeric($event)) {\n            throw new NotFoundException('Invalid event.');\n        }\n        $this->loadModel('Event');\n        $params = $this->Event->rearrangeEventForView($event, $this->passedArgs, $all);\n        $this->params->params['paging'] = array('Server' => $params);\n        $this->set('event', $event);\n        $this->set('server', $server);\n        $this->loadModel('Event');\n        $dataForView = array(\n                'Attribute' => array('attrDescriptions' => 'fieldDescriptions', 'distributionDescriptions' => 'distributionDescriptions', 'distributionLevels' => 'distributionLevels'),\n                'Event' => array('eventDescriptions' => 'fieldDescriptions', 'analysisLevels' => 'analysisLevels'),\n                'Object' => array()\n        );\n        foreach ($dataForView as $m => $variables) {\n            if ($m === 'Event') {\n                $currentModel = $this->Event;\n            } elseif ($m === 'Attribute') {\n                $currentModel = $this->Event->Attribute;\n            } elseif ($m === 'Object') {\n                $currentModel = $this->Event->Object;\n            }\n            foreach ($variables as $alias => $variable) {\n                $this->set($alias, $currentModel->{$variable});\n            }\n        }\n        $threat_levels = $this->Event->ThreatLevel->find('all');\n        $this->set('threatLevels', Set::combine($threat_levels, '{n}.ThreatLevel.id', '{n}.ThreatLevel.name'));\n    }\n\n    public function filterEventIndex($id)\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        $validFilters = $this->Server->validEventIndexFilters;\n        $validatedFilterString = '';\n        foreach ($this->passedArgs as $k => $v) {\n            if (in_array('' . $k, $validFilters)) {\n                if ($validatedFilterString != '') {\n                    $validatedFilterString .= '/';\n                }\n                $validatedFilterString .= $k . ':' . $v;\n            }\n        }\n        $this->set('id', $id);\n        $this->set('validFilters', $validFilters);\n        $this->set('filter', $validatedFilterString);\n    }\n\n    public function add()\n    {\n        if (!$this->_isSiteAdmin()) {\n            $this->redirect(array('controller' => 'servers', 'action' => 'index'));\n        }\n        if ($this->request->is('post')) {\n            if ($this->_isRest()) {\n                if (!isset($this->request->data['Server'])) {\n                    $this->request->data = array('Server' => $this->request->data);\n                }\n            }\n            if (!empty($this->request->data['Server']['json'])) {\n                $json = json_decode($this->request->data['Server']['json'], true);\n            } elseif ($this->_isRest()) {\n                if (empty($this->request->data['Server']['remote_org_id'])) {\n                    throw new MethodNotAllowedException('No remote org ID set. Please pass it as remote_org_id');\n                }\n            }\n            $fail = false;\n            if (empty(Configure::read('MISP.host_org_id'))) {\n                $this->request->data['Server']['internal'] = 0;\n            }\n            // test the filter fields\n            if (!empty($this->request->data['Server']['pull_rules']) && !$this->Server->isJson($this->request->data['Server']['pull_rules'])) {\n                $fail = true;\n                $error_msg = __('The pull filter rules must be in valid JSON format.');\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'add', false, array('pull_rules' => $error_msg), $this->response->type());\n                } else {\n                    $this->Flash->error($error_msg);\n                }\n            }\n\n            if (!$fail && !empty($this->request->data['Server']['push_rules']) && !$this->Server->isJson($this->request->data['Server']['push_rules'])) {\n                $fail = true;\n                $error_msg = __('The push filter rules must be in valid JSON format.');\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'add', false, array('push_rules' => $error_msg), $this->response->type());\n                } else {\n                    $this->Flash->error($error_msg);\n                }\n            }\n            if (!$fail) {\n                if ($this->_isRest()) {\n                    $defaults = array(\n                        'push' => 0,\n                        'pull' => 0,\n                        'caching_enabled' => 0,\n                        'json' => '[]',\n                        'push_rules' => '[]',\n                        'pull_rules' => '[]',\n                        'self_signed' => 0\n                    );\n                    foreach ($defaults as $default => $dvalue) {\n                        if (!isset($this->request->data['Server'][$default])) {\n                            $this->request->data['Server'][$default] = $dvalue;\n                        }\n                    }\n                }\n                // force check userid and orgname to be from yourself\n                $this->request->data['Server']['org_id'] = $this->Auth->user('org_id');\n                if ($this->_isRest()) {\n                    if (empty($this->request->data['Server']['remote_org_id'])) {\n                        return $this->RestResponse->saveFailResponse('Servers', 'add', false, array('Organisation' => 'Remote Organisation\\'s id/uuid not given (remote_org_id)'), $this->response->type());\n                    }\n                    if (Validation::uuid($this->request->data['Server']['remote_org_id'])) {\n                        $orgCondition = array('uuid' => $this->request->data['Server']['remote_org_id']);\n                    } else {\n                        $orgCondition = array('id' => $this->request->data['Server']['remote_org_id']);\n                    }\n                    $existingOrgs = $this->Server->Organisation->find('first', array(\n                            'conditions' => $orgCondition,\n                            'recursive' => -1,\n                            'fields' => array('id', 'uuid')\n                    ));\n                    if (empty($existingOrgs)) {\n                        return $this->RestResponse->saveFailResponse('Servers', 'add', false, array('Organisation' => 'Invalid Remote Organisation'), $this->response->type());\n                    }\n                } else {\n                    if ($this->request->data['Server']['organisation_type'] < 2) {\n                        $this->request->data['Server']['remote_org_id'] = $json['id'];\n                    } else {\n                        $existingOrgs = $this->Server->Organisation->find('first', array(\n                                'conditions' => array('uuid' => $json['uuid']),\n                                'recursive' => -1,\n                                'fields' => array('id', 'uuid')\n                        ));\n                        if (!empty($existingOrgs)) {\n                            $fail = true;\n                            $this->Flash->error(__('That organisation could not be created as the uuid is in use already.'));\n                        }\n                        if (!$fail) {\n                            $this->Server->Organisation->create();\n                            $orgSave = $this->Server->Organisation->save(array(\n                                    'name' => $json['name'],\n                                    'uuid' => $json['uuid'],\n                                    'local' => 0,\n                                    'created_by' => $this->Auth->user('id')\n                            ));\n\n                            if (!$orgSave) {\n                                $this->Flash->error(__('Couldn\\'t save the new organisation, are you sure that the uuid is in the correct format? Also, make sure the organisation\\'s name doesn\\'t clash with an existing one.'));\n                                $fail = true;\n                                $this->request->data['Server']['external_name'] = $json['name'];\n                                $this->request->data['Server']['external_uuid'] = $json['uuid'];\n                            } else {\n                                $this->request->data['Server']['remote_org_id'] = $this->Server->Organisation->id;\n                            }\n                        }\n                    }\n                }\n                if (!$fail) {\n                    if (Configure::read('MISP.host_org_id') == 0 || $this->request->data['Server']['remote_org_id'] != Configure::read('MISP.host_org_id')) {\n                        $this->request->data['Server']['internal'] = 0;\n                    }\n                    $this->request->data['Server']['org_id'] = $this->Auth->user('org_id');\n                    if (empty($this->request->data['Server']['push_rules'])) {\n                        $this->request->data['Server']['push_rules'] = '[]';\n                    }\n                    if (empty($this->request->data['Server']['pull_rules'])) {\n                        $this->request->data['Server']['pull_rules'] = '[]';\n                    }\n                    if ($this->Server->save($this->request->data)) {\n                        if (isset($this->request->data['Server']['submitted_cert'])) {\n                            $this->__saveCert($this->request->data, $this->Server->id, false);\n                        }\n                        if (isset($this->request->data['Server']['submitted_client_cert'])) {\n                            $this->__saveCert($this->request->data, $this->Server->id, true);\n                        }\n                        if ($this->_isRest()) {\n                            $server = $this->Server->find('first', array(\n                                    'conditions' => array('Server.id' => $this->Server->id),\n                                    'recursive' => -1\n                            ));\n                            return $this->RestResponse->viewData($server, $this->response->type());\n                        } else {\n                            $this->Flash->success(__('The server has been saved'));\n                            $this->redirect(array('action' => 'index'));\n                        }\n                    } else {\n                        if ($this->_isRest()) {\n                            return $this->RestResponse->saveFailResponse('Servers', 'add', false, $this->Server->validationErrors, $this->response->type());\n                        } else {\n                            $this->Flash->error(__('The server could not be saved. Please, try again.'));\n                        }\n                    }\n                }\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->describe('Servers', 'add', false, $this->response->type());\n        } else {\n            $organisationOptions = array(0 => 'Local organisation', 1 => 'External organisation', 2 => 'New external organisation');\n            $temp = $this->Server->Organisation->find('all', array(\n                    'conditions' => array('local' => true),\n                    'fields' => array('id', 'name'),\n                    'order' => array('lower(Organisation.name) ASC')\n            ));\n            $localOrganisations = array();\n            $allOrgs = array();\n            foreach ($temp as $o) {\n                $localOrganisations[$o['Organisation']['id']] = $o['Organisation']['name'];\n                $allOrgs[] = array('id' => $o['Organisation']['id'], 'name' => $o['Organisation']['name']);\n            }\n            $temp = $this->Server->Organisation->find('all', array(\n                    'conditions' => array('local' => false),\n                    'fields' => array('id', 'name'),\n                    'order' => array('lower(Organisation.name) ASC')\n            ));\n            $externalOrganisations = array();\n            foreach ($temp as $o) {\n                $externalOrganisations[$o['Organisation']['id']] = $o['Organisation']['name'];\n                $allOrgs[] = array('id' => $o['Organisation']['id'], 'name' => $o['Organisation']['name']);\n            }\n            $this->set('host_org_id', Configure::read('MISP.host_org_id'));\n            $this->set('organisationOptions', $organisationOptions);\n            $this->set('localOrganisations', $localOrganisations);\n            $this->set('externalOrganisations', $externalOrganisations);\n            $this->set('allOrganisations', $allOrgs);\n\n            // list all tags for the rule picker\n            $this->loadModel('Tag');\n            $temp = $this->Tag->find('all', array('recursive' => -1));\n            $allTags = array();\n            foreach ($temp as $t) {\n                $allTags[] = array('id' => $t['Tag']['id'], 'name' => $t['Tag']['name']);\n            }\n            $this->set('allTags', $allTags);\n            $this->set('host_org_id', Configure::read('MISP.host_org_id'));\n        }\n    }\n\n    public function edit($id = null)\n    {\n        $this->Server->id = $id;\n        if (!$this->Server->exists()) {\n            throw new NotFoundException(__('Invalid server'));\n        }\n        $s = $this->Server->read(null, $id);\n        if (!$this->_isSiteAdmin()) {\n            $this->redirect(array('controller' => 'servers', 'action' => 'index'));\n        }\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (empty(Configure::read('MISP.host_org_id'))) {\n                $this->request->data['Server']['internal'] = 0;\n            }\n            if ($this->_isRest()) {\n                if (!isset($this->request->data['Server'])) {\n                    $this->request->data = array('Server' => $this->request->data);\n                }\n            }\n            if (isset($this->request->data['Server']['json'])) {\n                $json = json_decode($this->request->data['Server']['json'], true);\n            } else {\n                $json = null;\n            }\n            $fail = false;\n\n            // test the filter fields\n            if (!empty($this->request->data['Server']['pull_rules']) && !$this->Server->isJson($this->request->data['Server']['pull_rules'])) {\n                $fail = true;\n                $error_msg = __('The pull filter rules must be in valid JSON format.');\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'edit', false, array('pull_rules' => $error_msg), $this->response->type());\n                } else {\n                    $this->Flash->error($error_msg);\n                }\n            }\n\n            if (!$fail && !empty($this->request->data['Server']['push_rules']) && !$this->Server->isJson($this->request->data['Server']['push_rules'])) {\n                $fail = true;\n                $error_msg = __('The push filter rules must be in valid JSON format.');\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'edit', false, array('push_rules' => $error_msg), $this->response->type());\n                } else {\n                    $this->Flash->error($error_msg);\n                }\n            }\n            if (!$fail) {\n                // say what fields are to be updated\n                $fieldList = array('id', 'url', 'push', 'pull', 'caching_enabled', 'unpublish_event', 'publish_without_email', 'remote_org_id', 'name' ,'self_signed', 'cert_file', 'client_cert_file', 'push_rules', 'pull_rules', 'internal', 'skip_proxy');\n                $this->request->data['Server']['id'] = $id;\n                if (isset($this->request->data['Server']['authkey']) && \"\" != $this->request->data['Server']['authkey']) {\n                    $fieldList[] = 'authkey';\n                }\n                if (isset($this->request->data['Server']['organisation_type']) && isset($json)) {\n                    // adds 'remote_org_id' in the fields to update\n                    $fieldList[] = 'remote_org_id';\n                    if ($this->request->data['Server']['organisation_type'] < 2) {\n                        $this->request->data['Server']['remote_org_id'] = $json['id'];\n                    } else {\n                        $existingOrgs = $this->Server->Organisation->find('first', array(\n                                'conditions' => array('uuid' => $json['uuid']),\n                                'recursive' => -1,\n                                'fields' => array('id', 'uuid')\n                        ));\n                        if (!empty($existingOrgs)) {\n                            $fail = true;\n                            if ($this->_isRest()) {\n                                return $this->RestResponse->saveFailResponse('Servers', 'edit', false, array('Organisation' => 'Remote Organisation\\'s uuid already used'), $this->response->type());\n                            } else {\n                                $this->Flash->error(__('That organisation could not be created as the uuid is in use already.'));\n                            }\n                        }\n\n                        if (!$fail) {\n                            $this->Server->Organisation->create();\n                            $orgSave = $this->Server->Organisation->save(array(\n                                    'name' => $json['name'],\n                                    'uuid' => $json['uuid'],\n                                    'local' => 0,\n                                    'created_by' => $this->Auth->user('id')\n                            ));\n\n                            if (!$orgSave) {\n                                if ($this->_isRest()) {\n                                    return $this->RestResponse->saveFailResponse('Servers', 'edit', false, $this->Server->Organisation->validationError, $this->response->type());\n                                } else {\n                                    $this->Flash->error(__('Couldn\\'t save the new organisation, are you sure that the uuid is in the correct format?.'));\n                                }\n                                $fail = true;\n                                $this->request->data['Server']['external_name'] = $json['name'];\n                                $this->request->data['Server']['external_uuid'] = $json['uuid'];\n                            } else {\n                                $this->request->data['Server']['remote_org_id'] = $this->Server->Organisation->id;\n                            }\n                        }\n                    }\n                    if (empty(Configure::read('MISP.host_org_id')) || $this->request->data['Server']['remote_org_id'] != Configure::read('MISP.host_org_id')) {\n                        $this->request->data['Server']['internal'] = 0;\n                    }\n                }\n            }\n            if (!$fail) {\n                // Save the data\n                if ($this->Server->save($this->request->data, true, $fieldList)) {\n                    if (isset($this->request->data['Server']['submitted_cert']) && (!isset($this->request->data['Server']['delete_cert']) || !$this->request->data['Server']['delete_cert'])) {\n                        $this->__saveCert($this->request->data, $this->Server->id, false);\n                    } else {\n                        if (isset($this->request->data['Server']['delete_cert']) && $this->request->data['Server']['delete_cert']) {\n                            $this->__saveCert($this->request->data, $this->Server->id, false, true);\n                        }\n                    }\n                    if (isset($this->request->data['Server']['submitted_client_cert']) && (!isset($this->request->data['Server']['delete_client_cert']) || !$this->request->data['Server']['delete_client_cert'])) {\n                        $this->__saveCert($this->request->data, $this->Server->id, true);\n                    } else {\n                        if (isset($this->request->data['Server']['delete_client_cert']) && $this->request->data['Server']['delete_client_cert']) {\n                            $this->__saveCert($this->request->data, $this->Server->id, true, true);\n                        }\n                    }\n                    if ($this->_isRest()) {\n                        $server = $this->Server->find('first', array(\n                                'conditions' => array('Server.id' => $this->Server->id),\n                                'recursive' => -1\n                        ));\n                        return $this->RestResponse->viewData($server, $this->response->type());\n                    } else {\n                        $this->Flash->success(__('The server has been saved'));\n                        $this->redirect(array('action' => 'index'));\n                    }\n                } else {\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Servers', 'edit', false, $this->Server->validationError, $this->response->type());\n                    } else {\n                        $this->Flash->error(__('The server could not be saved. Please, try again.'));\n                    }\n                }\n            }\n        } else {\n            $this->Server->read(null, $id);\n            $this->Server->set('authkey', '');\n            $this->request->data = $this->Server->data;\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->describe('Servers', 'edit', false, $this->response->type());\n        } else {\n            $organisationOptions = array(0 => 'Local organisation', 1 => 'External organisation', 2 => 'New external organisation');\n            $temp = $this->Server->Organisation->find('all', array(\n                    'conditions' => array('local' => true),\n                    'fields' => array('id', 'name'),\n                    'order' => array('lower(Organisation.name) ASC')\n            ));\n            $localOrganisations = array();\n            $allOrgs = array();\n            foreach ($temp as $o) {\n                $localOrganisations[$o['Organisation']['id']] = $o['Organisation']['name'];\n                $allOrgs[] = array('id' => $o['Organisation']['id'], 'name' => $o['Organisation']['name']);\n            }\n            $temp = $this->Server->Organisation->find('all', array(\n                    'conditions' => array('local' => false),\n                    'fields' => array('id', 'name'),\n                    'order' => array('lower(Organisation.name) ASC')\n            ));\n            $externalOrganisations = array();\n            foreach ($temp as $o) {\n                $externalOrganisations[$o['Organisation']['id']] = $o['Organisation']['name'];\n                $allOrgs[] = array('id' => $o['Organisation']['id'], 'name' => $o['Organisation']['name']);\n            }\n\n            $oldRemoteSetting = 0;\n            if (!$this->Server->data['RemoteOrg']['local']) {\n                $oldRemoteSetting = 1;\n            }\n            $this->set('host_org_id', Configure::read('MISP.host_org_id'));\n            $this->set('oldRemoteSetting', $oldRemoteSetting);\n            $this->set('oldRemoteOrg', $this->Server->data['RemoteOrg']['id']);\n\n            $this->set('organisationOptions', $organisationOptions);\n            $this->set('localOrganisations', $localOrganisations);\n            $this->set('externalOrganisations', $externalOrganisations);\n            $this->set('allOrganisations', $allOrgs);\n\n            // list all tags for the rule picker\n            $this->loadModel('Tag');\n            $temp = $this->Tag->find('all', array('recursive' => -1));\n            $allTags = array();\n            foreach ($temp as $t) {\n                $allTags[] = array('id' => $t['Tag']['id'], 'name' => $t['Tag']['name']);\n            }\n            $this->set('allTags', $allTags);\n            $this->set('server', $s);\n            $this->set('id', $id);\n            $this->set('host_org_id', Configure::read('MISP.host_org_id'));\n        }\n    }\n\n    public function delete($id = null)\n    {\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException(__('This endpoint expects POST requests.'));\n        }\n        $this->Server->id = $id;\n        if (!$this->Server->exists()) {\n            throw new NotFoundException(__('Invalid server'));\n        }\n        $s = $this->Server->read(null, $id);\n        if (!$this->_isSiteAdmin()) {\n            $message = __('You don\\'t have the privileges to do that.');\n            if ($this->_isRest()) {\n                throw new MethodNotAllowedException($message);\n            } else {\n                $this->Flash->error($message);\n                $this->redirect(array('controller' => 'servers', 'action' => 'index'));\n            }\n        }\n        if ($this->Server->delete()) {\n            $message = __('Server deleted');\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('Servers', 'delete', $message, $this->response->type());\n            } else {\n                $this->Flash->success($message);\n                $this->redirect(array('controller' => 'servers', 'action' => 'index'));\n            }\n\n        }\n        $message = __('Server was not deleted');\n        if ($this->_isRest()) {\n            return $this->RestResponse->saveFailResponse('Servers', 'delete', $id, $message, $this->response->type());\n        } else {\n            $this->Flash->error($message);\n            $this->redirect(array('action' => 'index'));\n        }\n    }\n\n    /**\n     * Pull one or more events with attributes from a remote instance.\n     * Set $technique to\n     *      full - download everything\n     *      incremental - only new events\n     *      <int>   - specific id of the event to pull\n     */\n    public function pull($id = null, $technique='full')\n    {\n        if (!empty($id)) {\n            $this->Server->id = $id;\n        } else if (!empty($this->request->data['id'])) {\n            $this->Server->id = $this->request->data['id'];\n        } else {\n            throw new NotFoundException(__('Invalid server'));\n        }\n        if (!$this->Server->exists()) {\n            throw new NotFoundException(__('Invalid server'));\n        }\n        $s = $this->Server->read(null, $id);\n        $error = false;\n        if (!$this->_isSiteAdmin() && !($s['Server']['org_id'] == $this->Auth->user('org_id') && $this->_isAdmin())) {\n            throw new MethodNotAllowedException(__('You are not authorised to do that.'));\n        }\n        $this->Server->id = $id;\n        if (!$this->Server->exists()) {\n            throw new NotFoundException(__('Invalid server'));\n        }\n        if (false == $this->Server->data['Server']['pull'] && ($technique == 'full' || $technique == 'incremental')) {\n            $error = __('Pull setting not enabled for this server.');\n        }\n        if (empty($error)) {\n            if (!Configure::read('MISP.background_jobs')) {\n                $result = $this->Server->pull($this->Auth->user(), $id, $technique, $s);\n                if (is_array($result)) {\n                    $success = sprintf(__('Pull completed. %s events pulled, %s events could not be pulled, %s proposals pulled.', count($result[0]), count($result[1]), $result[2]));\n                } else {\n                    $error = $result;\n                }\n                $this->set('successes', $result[0]);\n                $this->set('fails', $result[1]);\n                $this->set('pulledProposals', $result[2]);\n            } else {\n                $this->loadModel('Job');\n                $this->Job->create();\n                $data = array(\n                        'worker' => 'default',\n                        'job_type' => 'pull',\n                        'job_input' => 'Server: ' . $id,\n                        'status' => 0,\n                        'retries' => 0,\n                        'org' => $this->Auth->user('Organisation')['name'],\n                        'message' => __('Pulling.'),\n                );\n                $this->Job->save($data);\n                $jobId = $this->Job->id;\n                $process_id = CakeResque::enqueue(\n                        'default',\n                        'ServerShell',\n                        array('pull', $this->Auth->user('id'), $id, $technique, $jobId)\n                );\n                $this->Job->saveField('process_id', $process_id);\n                $success = sprintf(__('Pull queued for background execution. Job ID: %s'), $jobId);\n            }\n        }\n        if ($this->_isRest()) {\n            if (!empty($error)) {\n                return $this->RestResponse->saveFailResponse('Servers', 'pull', false, $error, $this->response->type());\n            } else {\n                return $this->RestResponse->saveSuccessResponse('Servers', 'pull', $success, $this->response->type());\n            }\n        } else {\n            if (!empty($error)) {\n                $this->Flash->error($error);\n                $this->redirect(array('action' => 'index'));\n            } else {\n                $this->Flash->success($success);\n                $this->redirect($this->referer());\n            }\n        }\n    }\n\n    public function push($id = null, $technique=false)\n    {\n        if (!empty($id)) {\n            $this->Server->id = $id;\n        } else if (!empty($this->request->data['id'])) {\n            $this->Server->id = $this->request->data['id'];\n        } else {\n            throw new NotFoundException(__('Invalid server'));\n        }\n        if (!empty($this->request->data['technique'])) {\n            $technique = $this->request->data['technique'];\n        }\n        if (!$this->Server->exists()) {\n            throw new NotFoundException(__('Invalid server'));\n        }\n        $s = $this->Server->read(null, $id);\n        if (!$this->_isSiteAdmin() && !($s['Server']['org_id'] == $this->Auth->user('org_id') && $this->_isAdmin())) {\n            throw new MethodNotAllowedException(__('You are not authorised to do that.'));\n        }\n        if (!Configure::read('MISP.background_jobs')) {\n            $server = $this->Server->read(null, $id);\n            App::uses('SyncTool', 'Tools');\n            $syncTool = new SyncTool();\n            $HttpSocket = $syncTool->setupHttpSocket($server);\n            $result = $this->Server->push($id, $technique, false, $HttpSocket, $this->Auth->user());\n            if ($result === false) {\n                $error = __('The remote server is too outdated to initiate a push towards it. Please notify the hosting organisation of the remote instance.');\n            } elseif (!is_array($result)) {\n                $error = $result;\n            }\n            if (!empty($error)) {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'push', false, $error, $this->response->type());\n                } else {\n                    $this->Flash->info($error);\n                    $this->redirect(array('action' => 'index'));\n                }\n            }\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('Servers', 'push', array(sprintf(__('Push complete. %s events pushed, %s events could not be pushed.', $result[0], $result[1]))), $this->response->type());\n            } else {\n                $this->set('successes', $result[0]);\n                $this->set('fails', $result[1]);\n            }\n        } else {\n            $this->loadModel('Job');\n            $this->Job->create();\n            $data = array(\n                    'worker' => 'default',\n                    'job_type' => 'push',\n                    'job_input' => 'Server: ' . $id,\n                    'status' => 0,\n                    'retries' => 0,\n                    'org' => $this->Auth->user('Organisation')['name'],\n                    'message' => __('Pushing.'),\n            );\n            $this->Job->save($data);\n            $jobId = $this->Job->id;\n            $process_id = CakeResque::enqueue(\n                    'default',\n                    'ServerShell',\n                    array('push', $this->Auth->user('id'), $id, $jobId)\n            );\n            $this->Job->saveField('process_id', $process_id);\n            $message = sprintf(__('Push queued for background execution. Job ID: %s'), $jobId);\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('Servers', 'push', $message, $this->response->type());\n            }\n            $this->Flash->success($message);\n            $this->redirect(array('action' => 'index'));\n        }\n    }\n\n    private function __saveCert($server, $id, $client = false, $delete = false)\n    {\n        if ($client) {\n            $subm = 'submitted_client_cert';\n            $attr = 'client_cert_file';\n            $ins  = '_client';\n        } else {\n            $subm = 'submitted_cert';\n            $attr = 'cert_file';\n            $ins  = '';\n        }\n        if (!$delete) {\n            $ext = '';\n            App::uses('File', 'Utility');\n            App::uses('Folder', 'Utility');\n            App::uses('FileAccessTool', 'Tools');\n            if (isset($server['Server'][$subm]['name'])) {\n                if ($this->request->data['Server'][$subm]['size'] != 0) {\n                    if (!$this->Server->checkFilename($server['Server'][$subm]['name'])) {\n                        throw new Exception(__('Filename not allowed'));\n                    }\n                    $file = new File($server['Server'][$subm]['name']);\n                    $ext = $file->ext();\n                    if (!$server['Server'][$subm]['size'] > 0) {\n                        $this->Flash->error(__('Incorrect extension or empty file.'));\n                        $this->redirect(array('action' => 'index'));\n                    }\n\n                    // read pem file data\n                    $pemData = (new FileAccessTool())->readFromFile($server['Server'][$subm]['tmp_name'], $server['Server'][$subm]['size']);\n                } else {\n                    return true;\n                }\n            } else {\n                $pemData = base64_decode($server['Server'][$subm]);\n            }\n            $destpath = APP . \"files\" . DS . \"certs\" . DS;\n            $dir = new Folder(APP . \"files\" . DS . \"certs\", true);\n            $pemfile = new File($destpath . $id . $ins . '.' . $ext);\n            $result = $pemfile->write($pemData);\n            $s = $this->Server->read(null, $id);\n            $s['Server'][$attr] = $s['Server']['id'] . $ins . '.' . $ext;\n            if ($result) {\n                $this->Server->save($s);\n            }\n        } else {\n            $s = $this->Server->read(null, $id);\n            $s['Server'][$attr] = '';\n            $this->Server->save($s);\n        }\n        return true;\n    }\n\n    public function serverSettingsReloadSetting($setting, $id)\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $pathToSetting = explode('.', $setting);\n        if (strpos($setting, 'Plugin.Enrichment') !== false || strpos($setting, 'Plugin.Import') !== false || strpos($setting, 'Plugin.Export') !== false || strpos($setting, 'Plugin.Cortex') !== false) {\n            $settingObject = $this->Server->getCurrentServerSettings();\n        } else {\n            $settingObject = $this->Server->serverSettings;\n        }\n        foreach ($pathToSetting as $key) {\n            if (!isset($settingObject[$key])) {\n                throw new MethodNotAllowedException();\n            }\n            $settingObject = $settingObject[$key];\n        }\n        $result = $this->Server->serverSettingReadSingle($settingObject, $setting, $key);\n        $this->set('setting', $result);\n        $priorityErrorColours = array(0 => 'red', 1 => 'yellow', 2 => 'green');\n        $this->set('priorityErrorColours', $priorityErrorColours);\n        $priorities = array(0 => 'Critical', 1 => 'Recommended', 2 => 'Optional', 3 => 'Deprecated');\n        $this->set('priorities', $priorities);\n        $this->set('k', $id);\n        $this->layout = false;\n\n        $subGroup = 'general';\n        if ($pathToSetting[0] === 'Plugin') {\n            $subGroup = explode('_', $pathToSetting[1])[0];\n        }\n        $this->set('subGroup', $subGroup);\n\n        $this->render('/Elements/healthElements/settings_row');\n    }\n\n    private function __loadAvailableLanguages()\n    {\n        return $this->Server->loadAvailableLanguages();\n    }\n\n    private function __loadTagCollections()\n    {\n        return $this->Server->loadTagCollections($this->Auth->user());\n    }\n\n    private function __loadLocalOrgs()\n    {\n        $this->loadModel('Organisation');\n        $local_orgs = $this->Organisation->find('list', array(\n                'conditions' => array('local' => 1),\n                'recursive' => -1,\n                'fields' => array('Organisation.id', 'Organisation.name')\n        ));\n        return array_replace(array(0 => __('No organisation selected.')), $local_orgs);\n    }\n\n    public function serverSettings($tab=false)\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        if ($this->request->is('Get')) {\n            $tabs = array(\n                    'MISP' => array('count' => 0, 'errors' => 0, 'severity' => 5),\n                    'Encryption' => array('count' => 0, 'errors' => 0, 'severity' => 5),\n                    'Proxy' => array('count' => 0, 'errors' => 0, 'severity' => 5),\n                    'Security' => array('count' => 0, 'errors' => 0, 'severity' => 5),\n                    'Plugin' => array('count' => 0, 'errors' => 0, 'severity' => 5)\n            );\n            $writeableErrors = array(0 => __('OK'), 1 => __('not found'), 2 => __('is not writeable'));\n            $readableErrors = array(0 => __('OK'), 1 => __('not readable'));\n            $gpgErrors = array(0 => __('OK'), 1 => __('FAIL: settings not set'), 2 => __('FAIL: Failed to load GnuPG'), 3 => __('FAIL: Issues with the key/passphrase'), 4 => __('FAIL: encrypt failed'));\n            $proxyErrors = array(0 => __('OK'), 1 => __('not configured (so not tested)'), 2 => __('Getting URL via proxy failed'));\n            $zmqErrors = array(0 => __('OK'), 1 => __('not enabled (so not tested)'), 2 => __('Python ZeroMQ library not installed correctly.'), 3 => __('ZeroMQ script not running.'));\n            $stixOperational = array(0 => __('Some of the libraries related to STIX are not installed. Make sure that all libraries listed below are correctly installed.'), 1 => __('OK'));\n            $stixVersion = array(0 => __('Incorrect STIX version installed, found $current, expecting $expected'), 1 => __('OK'));\n            $stix2Version = array(0 => __('Incorrect STIX2 version installed, found $current, expecting $expected'), 1 => __('OK'));\n            $cyboxVersion = array(0 => __('Incorrect CyBox version installed, found $current, expecting $expected'), 1 => __('OK'));\n            $mixboxVersion = array(0 => __('Incorrect mixbox version installed, found $current, expecting $expected'), 1 => __('OK'));\n            $maecVersion = array(0 => __('Incorrect maec version installed, found $current, expecting $expected'), 1 => __('OK'));\n            $pymispVersion = array(0 => __('Incorrect PyMISP version installed, found $current, expecting $expected'), 1 => __('OK'));\n            $plyaraVersion = array(0 => __('Incorrect plyara version installed, found $current, expecting $expected'), 1 => __('OK'));\n            $sessionErrors = array(0 => __('OK'), 1 => __('High'), 2 => __('Alternative setting used'), 3 => __('Test failed'));\n            $moduleErrors = array(0 => __('OK'), 1 => __('System not enabled'), 2 => __('No modules found'));\n\n            $finalSettings = $this->Server->serverSettingsRead();\n            $issues = array(\n                'errors' => array(\n                        0 => array(\n                                'value' => 0,\n                                'description' => __('MISP will not operate correctly or will be unsecure until these issues are resolved.')\n                        ),\n                        1 => array(\n                                'value' => 0,\n                                'description' => __('Some of the features of MISP cannot be utilised until these issues are resolved.')\n                        ),\n                        2 => array(\n                                'value' => 0,\n                                'description' => __('There are some optional tweaks that could be done to improve the looks of your MISP instance.')\n                        ),\n                ),\n                'deprecated' => array(),\n                'overallHealth' => 3,\n            );\n            $dumpResults = array();\n            $tempArray = array();\n            foreach ($finalSettings as $k => $result) {\n                if ($result['level'] == 3) {\n                    $issues['deprecated']++;\n                }\n                $tabs[$result['tab']]['count']++;\n                if (isset($result['error']) && $result['level'] < 3) {\n                    $issues['errors'][$result['level']]['value']++;\n                    if ($result['level'] < $issues['overallHealth']) {\n                        $issues['overallHealth'] = $result['level'];\n                    }\n                    $tabs[$result['tab']]['errors']++;\n                    if ($result['level'] < $tabs[$result['tab']]['severity']) {\n                        $tabs[$result['tab']]['severity'] = $result['level'];\n                    }\n                }\n                if (isset($result['optionsSource']) && !empty($result['optionsSource'])) {\n                    $result['options'] = $this->{'__load' . $result['optionsSource']}();\n                }\n                $dumpResults[] = $result;\n                if ($result['tab'] == $tab) {\n                    if (isset($result['subGroup'])) {\n                        $tempArray[$result['subGroup']][] = $result;\n                    } else {\n                        $tempArray['general'][] = $result;\n                    }\n                }\n            }\n            $finalSettings = $tempArray;\n            // Diagnostics portion\n            $diagnostic_errors = 0;\n            App::uses('File', 'Utility');\n            App::uses('Folder', 'Utility');\n            $additionalViewVars = array();\n            if ($tab == 'files') {\n                $files = $this->__manageFiles();\n                $this->set('files', $files);\n            }\n            // Only run this check on the diagnostics tab\n            if ($tab == 'diagnostics' || $tab == 'download' || $this->_isRest()) {\n                $php_ini = php_ini_loaded_file();\n                $this->set('php_ini', $php_ini);\n                $advanced_attachments = shell_exec($this->Server->getPythonVersion() . ' ' . APP . 'files/scripts/generate_file_objects.py -c');\n\n                try {\n                    $advanced_attachments = json_decode($advanced_attachments, true);\n                } catch (Exception $e) {\n                    $advanced_attachments = false;\n                }\n                $this->set('advanced_attachments', $advanced_attachments);\n                // check if the current version of MISP is outdated or not\n                $version = $this->__checkVersion();\n                $this->set('version', $version);\n                $gitStatus = $this->Server->getCurrentGitStatus();\n                $this->set('branch', $gitStatus['branch']);\n                $this->set('commit', $gitStatus['commit']);\n                $this->set('latestCommit', $gitStatus['latestCommit']);\n                $phpSettings = array(\n                        'max_execution_time' => array(\n                            'explanation' => 'The maximum duration that a script can run (does not affect the background workers). A too low number will break long running scripts like comprehensive API exports',\n                            'recommended' => 300,\n                            'unit' => false\n                        ),\n                        'memory_limit' => array(\n                            'explanation' => 'The maximum memory that PHP can consume. It is recommended to raise this number since certain exports can generate a fair bit of memory usage',\n                            'recommended' => 2048,\n                            'unit' => 'M'\n                        ),\n                        'upload_max_filesize' => array(\n                            'explanation' => 'The maximum size that an uploaded file can be. It is recommended to raise this number to allow for the upload of larger samples',\n                            'recommended' => 50,\n                            'unit' => 'M'\n                        ),\n                        'post_max_size' => array(\n                            'explanation' => 'The maximum size of a POSTed message, this has to be at least the same size as the upload_max_filesize setting',\n                            'recommended' => 50,\n                            'unit' => 'M'\n                        )\n\n                );\n\n                foreach ($phpSettings as $setting => $settingArray) {\n                    $phpSettings[$setting]['value'] = ini_get($setting);\n                    if ($settingArray['unit']) {\n                        $phpSettings[$setting]['value'] = intval(rtrim($phpSettings[$setting]['value'], $phpSettings[$setting]['unit']));\n                    } else {\n                        $phpSettings[$setting]['value'] = intval($phpSettings[$setting]['value']);\n                    }\n                }\n                $this->set('phpSettings', $phpSettings);\n\n                if ($version && (!$version['upToDate'] || $version['upToDate'] == 'older')) {\n                    $diagnostic_errors++;\n                }\n\n                // check if the STIX and Cybox libraries are working and the correct version using the test script stixtest.py\n                $stix = $this->Server->stixDiagnostics($diagnostic_errors, $stixVersion, $cyboxVersion, $mixboxVersion, $maecVersion, $stix2Version, $pymispVersion);\n\n                $yaraStatus = $this->Server->yaraDiagnostics($diagnostic_errors);\n\n                // if GnuPG is set up in the settings, try to encrypt a test message\n                $gpgStatus = $this->Server->gpgDiagnostics($diagnostic_errors);\n\n                // if the message queue pub/sub is enabled, check whether the extension works\n                $zmqStatus = $this->Server->zmqDiagnostics($diagnostic_errors);\n\n                // if Proxy is set up in the settings, try to connect to a test URL\n                $proxyStatus = $this->Server->proxyDiagnostics($diagnostic_errors);\n\n                // get the DB diagnostics\n                $dbDiagnostics = $this->Server->dbSpaceUsage();\n\n                $moduleTypes = array('Enrichment', 'Import', 'Export', 'Cortex');\n                foreach ($moduleTypes as $type) {\n                    $moduleStatus[$type] = $this->Server->moduleDiagnostics($diagnostic_errors, $type);\n                }\n\n                // check the size of the session table\n                $sessionCount = 0;\n                $sessionStatus = $this->Server->sessionDiagnostics($diagnostic_errors, $sessionCount);\n                $this->set('sessionCount', $sessionCount);\n\n                $additionalViewVars = array('gpgStatus', 'sessionErrors', 'proxyStatus', 'sessionStatus', 'zmqStatus', 'stixVersion', 'cyboxVersion', 'mixboxVersion', 'maecVersion', 'stix2Version', 'pymispVersion', 'moduleStatus', 'yaraStatus', 'gpgErrors', 'proxyErrors', 'zmqErrors', 'stixOperational', 'stix', 'moduleErrors', 'moduleTypes', 'dbDiagnostics');\n            }\n            // check whether the files are writeable\n            $writeableDirs = $this->Server->writeableDirsDiagnostics($diagnostic_errors);\n            $writeableFiles = $this->Server->writeableFilesDiagnostics($diagnostic_errors);\n            $readableFiles = $this->Server->readableFilesDiagnostics($diagnostic_errors);\n            $extensions = $this->Server->extensionDiagnostics();\n\n            // check if the encoding is not set to utf8\n            $dbEncodingStatus = $this->Server->databaseEncodingDiagnostics($diagnostic_errors);\n\n            $viewVars = array(\n                    'diagnostic_errors', 'tabs', 'tab', 'issues', 'finalSettings', 'writeableErrors', 'readableErrors', 'writeableDirs', 'writeableFiles', 'readableFiles', 'extensions', 'dbEncodingStatus'\n            );\n            $viewVars = array_merge($viewVars, $additionalViewVars);\n            foreach ($viewVars as $viewVar) {\n                $this->set($viewVar, ${$viewVar});\n            }\n\n            $workerIssueCount = 4;\n            $worker_array = array();\n            if (Configure::read('MISP.background_jobs')) {\n                $workerIssueCount = 0;\n                $worker_array = $this->Server->workerDiagnostics($workerIssueCount);\n            }\n            $this->set('worker_array', $worker_array);\n            if ($tab == 'download' || $this->_isRest()) {\n                foreach ($dumpResults as $key => $dr) {\n                    unset($dumpResults[$key]['description']);\n                }\n                $dump = array(\n                        'version' => $version,\n                        'phpSettings' => $phpSettings,\n                        'gpgStatus' => $gpgErrors[$gpgStatus],\n                        'proxyStatus' => $proxyErrors[$proxyStatus],\n                        'zmqStatus' => $zmqStatus,\n                        'stix' => $stix,\n                        'moduleStatus' => $moduleStatus,\n                        'writeableDirs' => $writeableDirs,\n                        'writeableFiles' => $writeableFiles,\n                        'readableFiles' => $readableFiles,\n                        'finalSettings' => $dumpResults,\n                        'extensions' => $extensions,\n                        'workers' => $worker_array\n                );\n                foreach ($dump['finalSettings'] as $k => $v) {\n                    if (!empty($v['redacted'])) {\n                        $dump['finalSettings'][$k]['value'] = '*****';\n                    }\n                }\n                $this->response->body(json_encode($dump, JSON_PRETTY_PRINT));\n                $this->response->type('json');\n                $this->response->download('MISP.report.json');\n                return $this->response;\n            }\n\n            $priorities = array(0 => 'Critical', 1 => 'Recommended', 2 => 'Optional', 3 => 'Deprecated');\n            $this->set('priorities', $priorities);\n            $this->set('workerIssueCount', $workerIssueCount);\n            $priorityErrorColours = array(0 => 'red', 1 => 'yellow', 2 => 'green');\n            $this->set('priorityErrorColours', $priorityErrorColours);\n            $this->set('phpversion', phpversion());\n            $this->set('phpmin', $this->phpmin);\n            $this->set('phprec', $this->phprec);\n        }\n    }\n\n    public function startWorker($type)\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $validTypes = array('default', 'email', 'scheduler', 'cache', 'prio');\n        if (!in_array($type, $validTypes)) {\n            throw new MethodNotAllowedException('Invalid worker type.');\n        }\n        $prepend = '';\n        if ($type != 'scheduler') {\n            shell_exec($prepend . APP . 'Console' . DS . 'cake CakeResque.CakeResque start --interval 5 --queue ' . $type .' > /dev/null 2>&1 &');\n        } else {\n            shell_exec($prepend . APP . 'Console' . DS . 'cake CakeResque.CakeResque startscheduler -i 5 > /dev/null 2>&1 &');\n        }\n        $message = __('Worker start signal sent');\n        if ($this->_isRest()) {\n            return $this->RestResponse->saveSuccessResponse('Servers', 'startWorker', $type, $this->response->type(), $message);\n        } else {\n            $this->Flash->info($message);\n            $this->redirect('/servers/serverSettings/workers');\n        }\n    }\n\n    public function stopWorker($pid)\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $this->Server->killWorker($pid, $this->Auth->user());\n        $message = __('Worker stop signal sent');\n        if ($this->_isRest()) {\n            return $this->RestResponse->saveSuccessResponse('Servers', 'stopWorker', $pid, $this->response->type(), $message);\n        } else {\n            $this->Flash->info($message);\n            $this->redirect('/servers/serverSettings/workers');\n        }\n    }\n\n    public function getWorkers()\n    {\n        $issues = 0;\n        $worker_array = $this->Server->workerDiagnostics($issues);\n        return $this->RestResponse->viewData($worker_array);\n    }\n\n    private function __checkVersion()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        App::uses('SyncTool', 'Tools');\n        $syncTool = new SyncTool();\n        try {\n            $HttpSocket = $syncTool->setupHttpSocket();\n            $response = $HttpSocket->get('https://api.github.com/repos/MISP/MISP/tags');\n            $tags = $response->body;\n        } catch (Exception $e) {\n            return false;\n        }\n        if ($response->isOK() && !empty($tags)) {\n            $json_decoded_tags = json_decode($tags);\n\n            // find the latest version tag in the v[major].[minor].[hotfix] format\n            for ($i = 0; $i < count($json_decoded_tags); $i++) {\n                if (preg_match('/^v[0-9]+\\.[0-9]+\\.[0-9]+$/', $json_decoded_tags[$i]->name)) {\n                    break;\n                }\n            }\n            return $this->Server->checkVersion($json_decoded_tags[$i]->name);\n        } else {\n            return false;\n        }\n    }\n\n    public function getSubmodulesStatus() {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $this->set('submodules', $this->Server->getSubmodulesGitStatus());\n        $this->render('ajax/submoduleStatus');\n    }\n\n    public function getSetting($setting_name)\n    {\n        $setting = $this->Server->getSettingData($setting_name);\n        if (!empty($setting[\"redacted\"])) {\n            throw new MethodNotAllowedException(__('This setting is redacted.'));\n        }\n        if (Configure::check($setting_name)) {\n            $setting['value'] = Configure::read($setting_name);\n        }\n        return $this->RestResponse->viewData($setting);\n    }\n\n    public function serverSettingsEdit($setting_name, $id = false, $forceSave = false)\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        if (!isset($setting_name)) {\n            throw new MethodNotAllowedException();\n        }\n        if (!$this->_isRest()) {\n            if (!isset($id)) {\n                throw new MethodNotAllowedException();\n            }\n            $this->set('id', $id);\n        }\n\n        $setting = $this->Server->getSettingData($setting_name);\n        if (!empty($setting['cli_only'])) {\n            throw new MethodNotAllowedException(__('This setting can only be edited via the CLI.'));\n        }\n        if ($this->request->is('get')) {\n            if ($setting != null) {\n                $value = Configure::read($setting['name']);\n                if ($value) {\n                    $setting['value'] = $value;\n                }\n                $setting['setting'] = $setting['name'];\n            }\n            if (isset($setting['optionsSource']) && !empty($setting['optionsSource'])) {\n                $setting['options'] = $this->{'__load' . $setting['optionsSource']}();\n            }\n            $subGroup = 'general';\n            $subGroup = explode('.', $setting['name']);\n            if ($subGroup[0] === 'Plugin') {\n                $subGroup = explode('_', $subGroup[1])[0];\n            } else {\n                $subGroup = 'general';\n            }\n            if ($this->_isRest()) {\n                return $this->RestResponse->viewData(array($setting['name'] => $setting['value']));\n            } else {\n                $this->set('subGroup', $subGroup);\n                $this->set('setting', $setting);\n                $this->render('ajax/server_settings_edit');\n            }\n        }\n        if ($this->request->is('post')) {\n            if (!isset($this->request->data['Server'])) {\n                $this->request->data = array('Server' => $this->request->data);\n            }\n            if (!isset($this->request->data['Server']['value'])) {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'serverSettingsEdit', false, 'Invalid input. Expected: {\"value\": \"new_setting\"}', $this->response->type());\n                }\n            }\n            if (!empty($this->request->data['Server']['force'])) {\n                $forceSave = $this->request->data['Server']['force'];\n            }\n            if (trim($this->request->data['Server']['value']) === '*****') {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'serverSettingsEdit', false, 'No change.', $this->response->type());\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'No change.')), 'status'=>200, 'type' => 'json'));\n                }\n            }\n            $this->autoRender = false;\n            $this->loadModel('Log');\n            if (!is_writeable(APP . 'Config/config.php')) {\n                $this->Log->create();\n                $result = $this->Log->save(array(\n                        'org' => $this->Auth->user('Organisation')['name'],\n                        'model' => 'Server',\n                        'model_id' => 0,\n                        'email' => $this->Auth->user('email'),\n                        'action' => 'serverSettingsEdit',\n                        'user_id' => $this->Auth->user('id'),\n                        'title' => 'Server setting issue',\n                        'change' => 'There was an issue witch changing ' . $setting['name'] . ' to ' . $this->request->data['Server']['value']  . '. The error message returned is: app/Config.config.php is not writeable to the apache user. No changes were made.',\n                ));\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'serverSettingsEdit', false, 'app/Config.config.php is not writeable to the apache user.', $this->response->type());\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'app/Config.config.php is not writeable to the apache user.')), 'status'=>200, 'type' => 'json'));\n                }\n            }\n            $result = $this->Server->serverSettingsEditValue($this->Auth->user(), $setting, $this->request->data['Server']['value'], $forceSave);\n            if ($result === true) {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveSuccessResponse('Servers', 'serverSettingsEdit', false, $this->response->type(), 'Field updated');\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Field updated.')), 'status'=>200, 'type' => 'json'));\n                }\n            } else {\n                if ($this->_isRest) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'serverSettingsEdit', false, $result, $this->response->type());\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $result)), 'status'=>200, 'type' => 'json'));\n                }\n            }\n        }\n    }\n\n    public function restartWorkers()\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $this->Server->restartWorkers($this->Auth->user());\n        if ($this->_isRest()) {\n            return $this->RestResponse->saveSuccessResponse('Server', 'restartWorkers', false, $this->response->type(), __('Restarting workers.'));\n        }\n        $this->redirect(array('controller' => 'servers', 'action' => 'serverSettings', 'workers'));\n    }\n\n    private function __manageFiles()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $files = $this->Server->grabFiles();\n        return $files;\n    }\n\n    public function deleteFile($type, $filename)\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        if ($this->request->is('post')) {\n            $validItems = $this->Server->getFileRules();\n            App::uses('File', 'Utility');\n            $existingFile = new File($validItems[$type]['path'] . DS . $filename);\n            if (!$existingFile->exists()) {\n                $this->Flash->error(__('File not found.', true), 'default', array(), 'error');\n                $this->redirect(array('controller' => 'servers', 'action' => 'serverSettings', 'files'));\n            }\n            if ($existingFile->delete()) {\n                $this->Flash->success('File deleted.');\n            } else {\n                $this->Flash->error(__('File could not be deleted.', true), 'default', array(), 'error');\n            }\n            $this->redirect(array('controller' => 'servers', 'action' => 'serverSettings', 'files'));\n        } else {\n            throw new MethodNotAllowedException('This action expects a POST request.');\n        }\n    }\n\n    public function uploadFile($type)\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $validItems = $this->Server->getFileRules();\n\n        // Check if there were problems with the file upload\n        // only keep the last part of the filename, this should prevent directory attacks\n        $filename = basename($this->request->data['Server']['file']['name']);\n        if (!preg_match(\"/\" . $validItems[$type]['regex'] . \"/\", $filename)) {\n            $this->Flash->error($validItems[$type]['regex_error'], 'default', array(), 'error');\n            $this->redirect(array('controller' => 'servers', 'action' => 'serverSettings', 'files'));\n        }\n        if (empty($this->request->data['Server']['file']['tmp_name']) || !is_uploaded_file($this->request->data['Server']['file']['tmp_name'])) {\n            $this->Flash->error(__('Upload failed.', true), 'default', array(), 'error');\n            $this->redirect(array('controller' => 'servers', 'action' => 'serverSettings', 'files'));\n        }\n\n        // check if the file already exists\n        App::uses('File', 'Utility');\n        $existingFile = new File($validItems[$type]['path'] . DS . $filename);\n        if ($existingFile->exists()) {\n            $this->Flash->info(__('File already exists. If you would like to replace it, remove the old one first.', true), 'default', array(), 'error');\n            $this->redirect(array('controller' => 'servers', 'action' => 'serverSettings', 'files'));\n        }\n\n        $result = move_uploaded_file($this->request->data['Server']['file']['tmp_name'], $validItems[$type]['path'] . DS . $filename);\n        if ($result) {\n            $this->Flash->success('File uploaded.');\n        } else {\n            $this->Flash->error(__('Upload failed.', true), 'default', array(), 'error');\n        }\n        $this->redirect(array('controller' => 'servers', 'action' => 'serverSettings', 'files'));\n    }\n\n    public function fetchServersForSG($idList = '{}')\n    {\n        $id_exclusion_list = json_decode($idList, true);\n        $temp = $this->Server->find('all', array(\n                'conditions' => array(\n                        'id !=' => $id_exclusion_list,\n                ),\n                'recursive' => -1,\n                'fields' => array('id', 'name', 'url')\n        ));\n        $servers = array();\n        foreach ($temp as $server) {\n            $servers[] = array('id' => $server['Server']['id'], 'name' => $server['Server']['name'], 'url' => $server['Server']['url']);\n        }\n        $this->layout = false;\n        $this->autoRender = false;\n        $this->set('servers', $servers);\n        $this->render('ajax/fetch_servers_for_sg');\n    }\n\n    public function postTest()\n    {\n        if ($this->request->is('post')) {\n            // Fix for PHP-FPM / Nginx / etc\n            // Fix via https://www.popmartian.com/tipsntricks/2015/07/14/howto-use-php-getallheaders-under-fastcgi-php-fpm-nginx-etc/\n            if (!function_exists('getallheaders')) {\n                $headers = [];\n                foreach ($_SERVER as $name => $value) {\n                    if (substr($name, 0, 5) == 'HTTP_') {\n                        $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))))] = $value;\n                    }\n                }\n            } else {\n                $headers = getallheaders();\n            }\n            $result = array();\n            $result['body'] = $this->request->data;\n            $result['headers']['Content-type'] = isset($headers['Content-type']) ? $headers['Content-type'] : 0;\n            $result['headers']['Accept'] = isset($headers['Accept']) ? $headers['Accept'] : 0;\n            $result['headers']['Authorization'] = isset($headers['Authorization']) ? 'OK' : 0;\n            return new CakeResponse(array('body'=> json_encode($result), 'type' => 'json'));\n        } else {\n            throw new MethodNotAllowedException('Invalid request, expecting a POST request.');\n        }\n    }\n\n    public function testConnection($id = false)\n    {\n        if (!$this->Auth->user('Role')['perm_sync'] && !$this->Auth->user('Role')['perm_site_admin']) {\n            throw new MethodNotAllowedException('You don\\'t have permission to do that.');\n        }\n        $this->Server->id = $id;\n        if (!$this->Server->exists()) {\n            throw new NotFoundException(__('Invalid server'));\n        }\n        $result = $this->Server->runConnectionTest($id);\n        if ($result['status'] == 1) {\n            $version = json_decode($result['message'], true);\n            if (isset($version['version']) && preg_match('/^[0-9]+\\.+[0-9]+\\.[0-9]+$/', $version['version'])) {\n                $perm_sync = false;\n                if (isset($version['perm_sync'])) {\n                    $perm_sync = $version['perm_sync'];\n                }\n                App::uses('Folder', 'Utility');\n                $file = new File(ROOT . DS . 'VERSION.json', true);\n                $local_version = json_decode($file->read(), true);\n                $file->close();\n                $version = explode('.', $version['version']);\n                $mismatch = false;\n                $newer = false;\n                $parts = array('major', 'minor', 'hotfix');\n                if ($version[0] == 2 && $version[1] == 4 && $version[2] > 68) {\n                    $post = $this->Server->runPOSTTest($id);\n                }\n                $testPost = false;\n                foreach ($parts as $k => $v) {\n                    if (!$mismatch) {\n                        if ($version[$k] > $local_version[$v]) {\n                            $mismatch = $v;\n                            $newer = 'remote';\n                        } elseif ($version[$k] < $local_version[$v]) {\n                            $mismatch = $v;\n                            $newer = 'local';\n                        }\n                    }\n                }\n                if (!$mismatch && $version[2] < 111) {\n                    $mismatch = 'proposal';\n                }\n                if (!$perm_sync) {\n                    $result['status'] = 7;\n                    return new CakeResponse(array('body'=> json_encode($result), 'type' => 'json'));\n                }\n                return new CakeResponse(\n                        array(\n                        'body'=> json_encode(\n                            array(\n                                'status' => 1,\n                                'local_version' => implode('.', $local_version),\n                                'version' => implode('.', $version),\n                                'mismatch' => $mismatch,\n                                'newer' => $newer,\n                                'post' => isset($post) ? $post : 'too old'\n                                )\n                            ),\n                            'type' => 'json'\n                        )\n                    );\n            } else {\n                $result['status'] = 3;\n            }\n        }\n        return new CakeResponse(array('body'=> json_encode($result), 'type' => 'json'));\n    }\n\n    public function startZeroMQServer()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $pubSubTool = $this->Server->getPubSubTool();\n        $result = $pubSubTool->restartServer();\n        if ($result === true) {\n            return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'ZeroMQ server successfully started.')), 'status'=>200, 'type' => 'json'));\n        } else {\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $result)), 'status'=>200, 'type' => 'json'));\n        }\n    }\n\n    public function stopZeroMQServer()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $pubSubTool = $this->Server->getPubSubTool();\n        $result = $pubSubTool->killService();\n        if ($result === true) {\n            return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'ZeroMQ server successfully killed.')), 'status'=>200, 'type' => 'json'));\n        } else {\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Could not kill the previous instance of the ZeroMQ script.')), 'status'=>200, 'type' => 'json'));\n        }\n    }\n\n    public function statusZeroMQServer()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $pubSubTool = $this->Server->getPubSubTool();\n        $result = $pubSubTool->statusCheck();\n        if (!empty($result)) {\n            $this->set('events', $result['publishCount']);\n            $this->set('time', date('Y/m/d H:i:s', $result['timestamp']));\n            $this->set('time2', date('Y/m/d H:i:s', $result['timestampSettings']));\n        }\n        $this->render('ajax/zeromqstatus');\n    }\n\n    public function purgeSessions()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        if ($this->Server->updateDatabase('cleanSessionTable') == false) {\n            $this->Flash->error('Could not purge the session table.');\n        }\n        $this->redirect('/servers/serverSettings/diagnostics');\n    }\n\n    public function clearWorkerQueue($worker)\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('Post') || $this->request->is('ajax')) {\n            throw new MethodNotAllowedException();\n        }\n        $worker_array = array('cache', 'default', 'email', 'prio');\n        if (!in_array($worker, $worker_array)) {\n            throw new MethodNotAllowedException('Invalid worker');\n        }\n        $redis = Resque::redis();\n        $redis->del('queue:' . $worker);\n        $this->Flash->success('Queue cleared.');\n        $this->redirect($this->referer());\n    }\n\n    public function getVersion()\n    {\n        if (!$this->userRole['perm_auth']) {\n            throw new MethodNotAllowedException('This action requires API access.');\n        }\n        $versionArray = $this->Server->checkMISPVersion();\n        $this->set('response', array('version' => $versionArray['major'] . '.' . $versionArray['minor'] . '.' . $versionArray['hotfix'], 'perm_sync' => $this->userRole['perm_sync']));\n        $this->set('_serialize', 'response');\n    }\n\n    public function getPyMISPVersion()\n    {\n        $this->set('response', array('version' => $this->pyMispVersion));\n        $this->set('_serialize', 'response');\n    }\n\n    public function getGit()\n    {\n        $status = $this->Server->getCurrentGitStatus();\n    }\n\n    public function checkout()\n    {\n        $result = $this->Server->checkoutMain();\n    }\n\n    public function update()\n    {\n        if ($this->request->is('post')) {\n            $status = $this->Server->getCurrentGitStatus();\n            $update = $this->Server->update($status);\n            return new CakeResponse(array('body'=> $update, 'type' => 'txt'));\n        } else {\n            $branch = $this->Server->getCurrentBranch();\n            $this->set('branch', $branch);\n            $this->render('ajax/update');\n        }\n    }\n\n    public function ondemandAction()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        $actions = $this->Server->actions_description;\n        $default_fields = array(\n            'title' => '',\n            'description' => '',\n            'liveOff' => false,\n            'recommendBackup' => false,\n            'exitOnError' => false,\n            'requirements' => '',\n            'url' => '/'\n        );\n        foreach($actions as $id => $action) {\n            foreach($default_fields as $field => $value) {\n                if (!isset($action[$field])) {\n                    $actions[$id][$field] = $value;\n                }\n            }\n            $done = $this->AdminSetting->getSetting($id);\n            $actions[$id]['done'] = ($done == '1');\n        }\n        $this->set('actions', $actions);\n        $this->set('updateLocked', $this->Server->isUpdateLocked());\n    }\n\n    public function updateProgress()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        $update_progress = $this->Server->getUpdateProgress();\n        $current_index = $update_progress['current'];\n        $current_command = !isset($update_progress['commands'][$current_index]) ? '' : $update_progress['commands'][$current_index];\n        $lookup_string = preg_replace('/\\s{2,}/', '', substr($current_command, 0, -1));\n        $sql_info = $this->Server->query(\"SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST;\");\n        if (empty($sql_info)) {\n            $update_progress['process_list'] = array();\n        } else {\n            // retreive current update process\n            foreach($sql_info as $row) {\n                if (preg_replace('/\\s{2,}/', '', $row['PROCESSLIST']['INFO']) == $lookup_string) {\n                    $sql_info = $row['PROCESSLIST'];\n                    break;\n                }\n            }\n            $update_progress['process_list'] = array();\n            $update_progress['process_list']['STATE'] = isset($sql_info['STATE']) ? $sql_info['STATE'] : '';\n            $update_progress['process_list']['PROGRESS'] = isset($sql_info['PROGRESS']) ? $sql_info['PROGRESS'] : 0;\n            $update_progress['process_list']['STAGE'] = isset($sql_info['STAGE']) ? $sql_info['STAGE'] : 0;\n            $update_progress['process_list']['MAX_STAGE'] = isset($sql_info['MAX_STAGE']) ? $sql_info['MAX_STAGE'] : 0;\n        }\n        if ($this->request->is('ajax')) {\n            return $this->RestResponse->viewData(h($update_progress), $this->response->type());\n        } else {\n            $this->set('updateProgress', $update_progress);\n        }\n    }\n\n\n    public function getSubmoduleQuickUpdateForm($submodule_path=false) {\n        $this->set('submodule', base64_decode($submodule_path));\n        $this->render('ajax/submodule_quick_update_form');\n    }\n\n    public function updateSubmodule()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        if ($this->request->is('post')) {\n            $request = $this->request->data;\n            $submodule = $request['Server']['submodule'];\n            $res = $this->Server->updateSubmodule($this->Auth->user(), $submodule);\n            return new CakeResponse(array('body'=> json_encode($res), 'type' => 'json'));\n        } else {\n            throw new MethodNotAllowedException();\n        }\n    }\n\n    public function getInstanceUUID()\n    {\n        return $this->RestResponse->viewData(array('uuid' => Configure::read('MISP.uuid')), $this->response->type());\n    }\n\n    public function rest()\n    {\n        $allValidApis = $this->RestResponse->getAllApis($this->Auth->user());\n        $allValidApisFieldsContraint = $this->RestResponse->getAllApisFieldsConstraint($this->Auth->user());\n        if ($this->request->is('post')) {\n            $request = $this->request->data;\n            if (!empty($request['Server'])) {\n                $request = $this->request->data['Server'];\n            }\n            $curl = '';\n            $python = '';\n            $result = $this->__doRestQuery($request, $curl, $python);\n            $this->set('curl', $curl);\n            $this->set('python', $python);\n            if (!$result) {\n                $this->Flash->error('Something went wrong. Make sure you set the http method, body (when sending POST requests) and URL correctly.');\n            } else {\n                $this->set('data', $result);\n            }\n        }\n        $header =\n            'Authorization: ' . $this->Auth->user('authkey') . PHP_EOL .\n            'Accept: application/json' . PHP_EOL .\n            'Content-Type: application/json';\n        $this->set('header', $header);\n        $this->set('allValidApis', $allValidApis);\n        // formating for optgroup\n        $allValidApisFormated = array();\n        foreach ($allValidApis as $endpoint_url => $endpoint_data) {\n            $allValidApisFormated[$endpoint_data['controller']][] = array('url' => $endpoint_url, 'action' => $endpoint_data['action']);\n        }\n        $this->set('allValidApisFormated', $allValidApisFormated);\n        $this->set('allValidApisFieldsContraint', $allValidApisFieldsContraint);\n    }\n\n    private function __doRestQuery($request, &$curl = false, &$python = false)\n    {\n        App::uses('SyncTool', 'Tools');\n        $params = array();\n        $this->loadModel('RestClientHistory');\n        $this->RestClientHistory->create();\n        $date = new DateTime();\n        $rest_history_item = array(\n            'org_id' => $this->Auth->user('org_id'),\n            'user_id' => $this->Auth->user('id'),\n            'headers' => $request['header'],\n            'body' => empty($request['body']) ? '' : $request['body'],\n            'url' => $request['url'],\n            'http_method' => $request['method'],\n            'use_full_path' => $request['use_full_path'],\n            'show_result' => $request['show_result'],\n            'skip_ssl' => $request['skip_ssl_validation'],\n            'bookmark' => $request['bookmark'],\n            'bookmark_name' => $request['name'],\n            'timestamp' => $date->getTimestamp()\n        );\n        if (!empty($request['url'])) {\n            if (empty($request['use_full_path'])) {\n                $path = preg_replace('#^(://|[^/?])+#', '', $request['url']);\n                $url = Configure::read('MISP.baseurl') . $path;\n                unset($request['url']);\n            } else {\n                $url = $request['url'];\n            }\n        } else {\n            throw new InvalidArgumentException('Url not set.');\n        }\n        if (!empty($request['skip_ssl_validation'])) {\n            $params['ssl_verify_peer'] = false;\n            $params['ssl_verify_host'] = false;\n            $params['ssl_verify_peer_name'] = false;\n            $params['ssl_allow_self_signed'] = true;\n        }\n        $params['timeout'] = 300;\n        App::uses('HttpSocket', 'Network/Http');\n        $HttpSocket = new HttpSocket($params);\n        $view_data = array();\n        $temp_headers = explode(\"\\n\", $request['header']);\n        $request['header'] = array(\n            'Authorization' => $this->Auth->user('authkey'),\n            'Accept' => 'application/json',\n            'Content-Type' => 'application/json'\n        );\n        foreach ($temp_headers as $header) {\n            $header = explode(':', $header);\n            $header[0] = trim($header[0]);\n            $header[1] = trim($header[1]);\n            $request['header'][$header[0]] = $header[1];\n        }\n        $start = microtime(true);\n        if (\n            !empty($request['method']) &&\n            $request['method'] === 'GET'\n        ) {\n            if ($curl !== false) {\n                $curl = $this->__generateCurlQuery('get', $request, $url);\n            }\n            if ($python !== false) {\n                $python = $this->__generatePythonScript($request, $url);\n            }\n            $response = $HttpSocket->get($url, false, array('header' => $request['header']));\n        } elseif (\n            !empty($request['method']) &&\n            $request['method'] === 'POST' &&\n            !empty($request['body'])\n        ) {\n            if ($curl !== false) {\n                $curl = $this->__generateCurlQuery('post', $request, $url);\n            }\n            if ($python !== false) {\n                $python = $this->__generatePythonScript($request, $url);\n            }\n            $response = $HttpSocket->post($url, $request['body'], array('header' => $request['header']));\n        } else {\n            return false;\n        }\n        $view_data['duration'] = microtime(true) - $start;\n        $view_data['duration'] = round($view_data['duration'] * 1000, 2) . 'ms';\n        $view_data['code'] =  $response->code;\n        $view_data['headers'] = $response->headers;\n        if (!empty($request['show_result'])) {\n            $view_data['data'] = $response->body;\n        } else {\n            if ($response->isOk()) {\n                $view_data['data'] = 'Success.';\n            } else {\n                $view_data['data'] = 'Something went wrong.';\n            }\n        }\n        $rest_history_item['outcome'] = $response->code;\n        $this->RestClientHistory->save($rest_history_item);\n        $this->RestClientHistory->cleanup($this->Auth->user('id'));\n        return $view_data;\n    }\n\n    private function __generatePythonScript($request, $url)\n    {\n        $slashCounter = 0;\n        $baseurl = '';\n        $relative = '';\n        $verifyCert = ($url[4] === 's') ? 'True' : 'False';\n        for ($i = 0; $i < strlen($url); $i++) {\n            //foreach ($url as $url[$i]) {\n            if ($url[$i] === '/') {\n                $slashCounter += 1;\n                if ($slashCounter == 3) {\n                    continue;\n                }\n            }\n            if ($slashCounter < 3) {\n                $baseurl .= $url[$i];\n            } else {\n                $relative .= $url[$i];\n            }\n        }\n        $python_script =\n        sprintf(\n'misp_url = \\'%s\\'\nmisp_key = \\'%s\\'\nmisp_verifycert = %s\nrelative_path = \\'%s\\'\nbody = %s\n\nfrom pymisp import PyMISP\n\nmisp = PyMISP(misp_url, misp_key, misp_verifycert)\nmisp.direct_call(relative_path, body)\n',\n            $baseurl,\n            $request['header']['Authorization'],\n            $verifyCert,\n            $relative,\n            (empty($request['body']) ? 'Null' : $request['body'])\n        );\n        return $python_script;\n    }\n\n    private function __generateCurlQuery($type, $request, $url)\n    {\n        if ($type === 'get') {\n            $curl = sprintf(\n                'curl \\%s -H \"Authorization: %s\" \\%s -H \"Accept: %s\" \\%s -H \"Content-type: %s\" \\%s %s',\n                PHP_EOL,\n                $request['header']['Authorization'],\n                PHP_EOL,\n                $request['header']['Accept'],\n                PHP_EOL,\n                $request['header']['Content-Type'],\n                PHP_EOL,\n                $url\n            );\n        } else {\n            $curl = sprintf(\n                'curl \\%s -d \\'%s\\' \\%s -H \"Authorization: %s\" \\%s -H \"Accept: %s\" \\%s -H \"Content-type: %s\" \\%s -X POST %s',\n                PHP_EOL,\n                json_encode(json_decode($request['body']), true),\n                PHP_EOL,\n                $request['header']['Authorization'],\n                PHP_EOL,\n                $request['header']['Accept'],\n                PHP_EOL,\n                $request['header']['Content-Type'],\n                PHP_EOL,\n                $url\n            );\n        }\n        return $curl;\n    }\n\n    public function getApiInfo()\n    {\n        $relative_path = $this->request->data['url'];\n        $result = $this->RestResponse->getApiInfo($relative_path);\n        if ($this->_isRest()) {\n            return $result;\n        } else {\n            $result = json_decode($result, true);\n            if (empty($result)) {\n                return $this->RestResponse->viewData('&nbsp;', $this->response->type());\n            }\n            $this->layout = false;\n            $this->autoRender = false;\n            $this->set('api_info', $result);\n            $this->render('ajax/get_api_info');\n        }\n    }\n\n    public function cache($id = 'all')\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            $this->loadModel('Job');\n            $this->Job->create();\n            $data = array(\n                    'worker' => 'default',\n                    'job_type' => 'cache_servers',\n                    'job_input' => intval($id) ? $id : 'all',\n                    'status' => 0,\n                    'retries' => 0,\n                    'org' => $this->Auth->user('Organisation')['name'],\n                    'message' => __('Starting server caching.'),\n            );\n            $this->Job->save($data);\n            $jobId = $this->Job->id;\n            $process_id = CakeResque::enqueue(\n                    'default',\n                    'ServerShell',\n                    array('cacheServer', $this->Auth->user('id'), $id, $jobId),\n                    true\n            );\n            $this->Job->saveField('process_id', $process_id);\n            $message = 'Server caching job initiated.';\n        } else {\n            $result = $this->Server->cacheServerInitiator($this->Auth->user(), $id);\n            if (!$result) {\n                $this->Flash->error(__('Caching the servers has failed.'));\n                $this->redirect(array('action' => 'index'));\n            }\n            $message = __('Caching the servers has successfully completed.');\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->saveSuccessResponse('Server', 'cache', false, $this->response->type(), $message);\n        } else {\n            $this->Flash->info($message);\n            $this->redirect(array('action' => 'index'));\n        }\n    }\n\n    public function updateJSON()\n    {\n        $results = $this->Server->updateJSON();\n        return $this->RestResponse->viewData($results, $this->response->type());\n    }\n\n    public function createSync()\n    {\n        if ($this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException('Site admin accounts cannot be used to create server sync configurations.');\n        }\n        $baseurl = Configure::read('MISP.external_baseurl');\n        if (empty($baseurl)) {\n            $baseurl = Configure::read('MISP.baseurl');\n            if (empty($baseurl)) {\n                $baseurl = Router::url('/', true);\n            }\n        }\n        $host_org_id = Configure::read('MISP.host_org_id');\n        if (empty($host_org_id)) {\n            throw new MethodNotAllowedException(__('Cannot create sync config - no host org ID configured for the instance.'));\n        }\n        $this->loadModel('Organisation');\n        $host_org = $this->Organisation->find('first', array(\n            'conditions' => array('Organisation.id' => $host_org_id),\n            'recursive' => -1,\n            'fields' => array('name', 'uuid')\n        ));\n        if (empty($host_org)) {\n            throw new MethodNotAllowedException(__('Configured host org not found. Please make sure that the setting is current on the instance.'));\n        }\n        $server = array(\n            'Server' => array(\n                'url' => $baseurl,\n                'uuid' => Configure::read('MISP.uuid'),\n                'authkey' => $this->Auth->user('authkey'),\n                'Organisation' => array(\n                    'name' => $host_org['Organisation']['name'],\n                    'uuid' => $host_org['Organisation']['uuid'],\n                )\n            )\n        );\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($server, $this->response->type());\n        } else {\n            $this->set('server', $server);\n        }\n    }\n\n    public function import()\n    {\n        if ($this->request->is('post')) {\n            $server = $this->request->data;\n            if (isset($server['Server'])) {\n                $server = $server['Server'];\n            }\n            if (isset($server['json'])) {\n                $server = json_decode($server['json'], true)['Server'];\n            }\n            $this->loadModel('Organisation');\n            $org_id = $this->Organisation->captureOrg($server['Organisation'], $this->Auth->user());\n            $toSave = array(\n                'push' => 0,\n                'pull' => 0,\n                'caching_enabled' => 0,\n                'json' => '[]',\n                'push_rules' => '[]',\n                'pull_rules' => '[]',\n                'self_signed' => 0,\n                'org_id' => $this->Auth->user('org_id'),\n                'remote_org_id' => $org_id,\n                'name' => empty($server['name']) ? $server['url'] : $server['name'],\n                'url' => $server['url'],\n                'uuid' => $server['uuid'],\n                'authkey' => $server['authkey']\n            );\n            $this->Server->create();\n            $result = $this->Server->save($toSave);\n            if ($result) {\n                if ($this->_isRest()) {\n                    $server = $this->Server->find('first', array(\n                        'conditions' => array('Server.id' => $this->Server->id),\n                        'recursive' => -1\n                    ));\n                    return $this->RestResponse->viewData($server, $this->response->type());\n                } else {\n                    $this->Flash->success(__('The server has been saved'));\n                    $this->redirect(array('action' => 'index', $this->Server->id));\n                }\n            } else {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'addFromJson', false, $this->Server->validationErrors, $this->response->type());\n                } else {\n                    $this->Flash->error(__('Could not save the server. Error: %s', json_encode($this->Server->validationErrors, true)));\n                    $this->redirect(array('action' => 'index'));\n                }\n            }\n        }\n    }\n}\n", "<?php\nApp::uses('AppController', 'Controller');\n\nclass UsersController extends AppController\n{\n    public $newkey;\n\n    public $components = array(\n            'Security',\n            'Email',\n            'RequestHandler'\n    );\n\n    public $paginate = array(\n            'limit' => 60,\n            'recursive' => -1,\n            'order' => array(\n                    'Organisation.name' => 'ASC'\n            ),\n            'contain' => array(\n                'Organisation' => array('id', 'name'),\n                'Role' => array('id', 'name', 'perm_auth', 'perm_site_admin')\n            )\n    );\n\n    public $helpers = array('Js' => array('Jquery'));\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n\n        // what pages are allowed for non-logged-in users\n        $this->Auth->allow('login', 'logout');\n    }\n\n    public function view($id = null)\n    {\n        if (\"me\" == $id) {\n            $id = $this->Auth->user('id');\n        }\n        if (!$this->_isSiteAdmin() && $this->Auth->user('id') != $id) {\n            throw new NotFoundException(__('Invalid user or not authorised.'));\n        }\n        if (!is_numeric($id) && !empty($id)) {\n            $userId = $this->User->find('first', array(\n                    'conditions' => array('email' => $id),\n                    'fields' => array('id')\n            ));\n            $id = $userid['User']['id'];\n        }\n        $this->User->id = $id;\n        $this->User->recursive = 0;\n        if (!$this->User->exists()) {\n            throw new NotFoundException(__('Invalid user'));\n        }\n        $user = $this->User->read(null, $id);\n        if (!empty($user['User']['gpgkey'])) {\n            $pgpDetails = $this->User->verifySingleGPG($user);\n            $user['User']['pgp_status'] = isset($pgpDetails[2]) ? $pgpDetails[2] : 'OK';\n            $user['User']['fingerprint'] = !empty($pgpDetails[4]) ? $pgpDetails[4] : 'N/A';\n        }\n        if ($this->_isRest()) {\n            unset($user['User']['server_id']);\n            $user['User']['password'] = '*****';\n            return $this->RestResponse->viewData(array('User' => $user['User']), $this->response->type());\n        } else {\n            $this->set('user', $user);\n        }\n    }\n\n    public function request_API()\n    {\n        if (Configure::read('MISP.disable_emailing')) {\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'API access request failed. E-mailing is currently disabled on this instance.')), 'status'=>200, 'type' => 'json'));\n        }\n        $responsibleAdmin = $this->User->findAdminsResponsibleForUser($this->Auth->user());\n        if (isset($responsibleAdmin['email']) && !empty($responsibleAdmin['email'])) {\n            $subject = \"[MISP \" . Configure::read('MISP.org') . \"] User requesting API access\";\n            $body = \"A user (\" . $this->Auth->user('email') . \") has sent you a request to enable his/her API key access.\" . PHP_EOL;\n            $body .= \"You can edit the user's profile at \" . Configure::read('MISP.baseurl') . '/admin/users/edit/' . $this->Auth->user('id');\n            $user = $this->User->find('first', array('conditions' => array('User.id' => $responsibleAdmin['id'])));\n            $result = $this->User->sendEmail($user, $body, false, $subject);\n            if ($result) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'API access requested.')), 'status'=>200, 'type' => 'json'));\n            }\n        }\n        return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Something went wrong, please try again later.')), 'status'=>200, 'type' => 'json'));\n    }\n\n    public function edit()\n    {\n        if (!$this->_isAdmin() && Configure::read('MISP.disableUserSelfManagement')) {\n            throw new MethodNotAllowedException('User self-management has been disabled on this instance.');\n        }\n        $id = $this->Auth->user('id');\n        $this->User->read(null, $id);\n        if (!$this->User->exists()) {\n            throw new NotFoundException('Something went wrong. Your user account could not be accessed.');\n        }\n        if ($this->request->is('post') || $this->request->is('put')) {\n            $abortPost = false;\n            if (!$this->_isSiteAdmin() && !empty($this->request->data['User']['email'])) {\n                $organisation = $this->User->Organisation->find('first', array(\n                    'conditions' => array('Organisation.id' => $this->Auth->user('org_id')),\n                    'recursive' => -1\n                ));\n                if (!empty($organisation['Organisation']['restricted_to_domain'])) {\n                    $abortPost = true;\n                    foreach ($organisation['Organisation']['restricted_to_domain'] as $restriction) {\n                        if (\n                            strlen($this->request->data['User']['email']) > strlen($restriction) &&\n                            substr($this->request->data['User']['email'], (-1 * strlen($restriction))) === $restriction &&\n                            in_array($this->request->data['User']['email'][strlen($this->request->data['User']['email']) - strlen($restriction) -1], array('@', '.'))\n                        ) {\n                            $abortPost = false;\n                        }\n                    }\n                    if ($abortPost) {\n                        $this->Flash->error(__('Invalid e-mail domain. Your user is restricted to creating users for the following domain(s): ') . implode(', ', $organisation['Organisation']['restricted_to_domain']));\n                    }\n                }\n            }\n            if (!$abortPost && !$this->_isRest()) {\n                if (Configure::read('Security.require_password_confirmation')) {\n                    if (!empty($this->request->data['User']['current_password'])) {\n                        $hashed = $this->User->verifyPassword($this->Auth->user('id'), $this->request->data['User']['current_password']);\n                        if (!$hashed) {\n                            $abortPost = true;\n                            $this->Flash->error('Invalid password. Please enter your current password to continue.');\n                        }\n                        unset($this->request->data['User']['current_password']);\n                    } else {\n                        $abortPost = true;\n                        $this->Flash->info('Please enter your current password to continue.');\n                    }\n                }\n            }\n            if (!$abortPost) {\n                // What fields should be saved (allowed to be saved)\n                $fieldList = array('email', 'autoalert', 'gpgkey', 'certif_public', 'nids_sid', 'contactalert', 'disabled');\n                if (\"\" != $this->request->data['User']['password']) {\n                    $fieldList[] = 'password';\n                }\n                // Save the data\n                if ($this->User->save($this->request->data, true, $fieldList)) {\n                    $this->Flash->success(__('The profile has been updated'));\n                    $this->_refreshAuth();\n                    $this->redirect(array('action' => 'view', $id));\n                } else {\n                    $this->Flash->error(__('The profile could not be updated. Please, try again.'));\n                }\n            }\n        } else {\n            $this->User->set('password', '');\n            $this->request->data = $this->User->data;\n        }\n        $this->loadModel('Server');\n        $this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n        $this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n        $roles = $this->User->Role->find('list');\n        $this->set(compact('roles'));\n        $this->set('id', $id);\n    }\n\n    public function change_pw()\n    {\n        if (!$this->_isAdmin() && Configure::read('MISP.disableUserSelfManagement')) {\n            throw new MethodNotAllowedException('User self-management has been disabled on this instance.');\n        }\n        $id = $this->Auth->user('id');\n        $user = $this->User->find('first', array(\n            'conditions' => array('User.id' => $id),\n            'recursive' => -1\n        ));\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (!isset($this->request->data['User'])) {\n                $this->request->data = array('User' => $this->request->data);\n            }\n            $abortPost = false;\n            if (Configure::read('Security.require_password_confirmation')) {\n                if (!empty($this->request->data['User']['current_password'])) {\n                    $hashed = $this->User->verifyPassword($this->Auth->user('id'), $this->request->data['User']['current_password']);\n                    if (!$hashed) {\n                        $message = __('Invalid password. Please enter your current password to continue.');\n                        if ($this->_isRest()) {\n                            return $this->RestResponse->saveFailResponse('Users', 'change_pw', false, $message, $this->response->type());\n                        }\n                        $abortPost = true;\n                        $this->Flash->error($message);\n                    }\n                    unset($this->request->data['User']['current_password']);\n                } else if (!$this->_isRest()) {\n                    $message = __('Please enter your current password to continue.');\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Users', 'change_pw', false, $message, $this->response->type());\n                    }\n                    $abortPost = true;\n                    $this->Flash->info($message);\n                }\n            }\n            if (!$abortPost) {\n                // What fields should be saved (allowed to be saved)\n                $user['User']['change_pw'] = 0;\n                $user['User']['password'] = $this->request->data['User']['password'];\n                if ($this->_isRest()) {\n                    $user['User']['confirm_password'] = $this->request->data['User']['password'];\n                } else {\n                    $user['User']['confirm_password'] = $this->request->data['User']['confirm_password'];\n                }\n                $temp = $user['User']['password'];\n                // Save the data\n                if ($this->User->save($user)) {\n                    $message = __('Password Changed.');\n                    $this->__extralog(\"change_pw\");\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveSuccessResponse('User', 'change_pw', false, $this->response->type(), $message);\n                    }\n                    $this->Flash->success($message);\n                    $this->_refreshAuth();\n                    $this->redirect(array('action' => 'view', $id));\n                } else {\n                    $message = __('The password could not be updated. Make sure you meet the minimum password length / complexity requirements.');\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Users', 'change_pw', false, $message, $this->response->type());\n                    }\n                    $this->Flash->error($message);\n                }\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->describe('Users', 'change_pw', false, $this->response->type());\n        }\n        $this->loadModel('Server');\n        $this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n        $this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n        $this->User->recursive = 0;\n        $this->User->read(null, $id);\n        $this->User->set('password', '');\n        $this->request->data = $this->User->data;\n        $roles = $this->User->Role->find('list');\n        $this->set(compact('roles'));\n    }\n\n    public function admin_index()\n    {\n        if (!$this->_isAdmin()) {\n            throw new NotFoundException(__('Invalid user or not authorised.'));\n        }\n        $this->User->virtualFields['org_ci'] = 'UPPER(Organisation.name)';\n        $urlParams = \"\";\n        $passedArgsArray = array();\n        $booleanFields = array('autoalert', 'contactalert', 'termsaccepted');\n        $textFields = array('role', 'email', 'all', 'authkey');\n        // org admins can't see users of other orgs\n        if ($this->_isSiteAdmin()) {\n            $textFields[] = 'org';\n        }\n        $this->set('passedArgs', json_encode($this->passedArgs));\n        // check each of the passed arguments whether they're a filter (could also be a sort for example) and if yes, add it to the pagination conditions\n        foreach ($this->passedArgs as $k => $v) {\n            if (substr($k, 0, 6) === 'search') {\n                if ($v != \"\") {\n                    if ($urlParams != \"\") {\n                        $urlParams .= \"/\";\n                    }\n                    $urlParams .= $k . \":\" . $v;\n                }\n                $searchTerm = substr($k, 6);\n                if (in_array($searchTerm, $booleanFields)) {\n                    if ($v != \"\") {\n                        $this->paginate['conditions'][] = array('User.' . $searchTerm => $v);\n                    }\n                } elseif (in_array($searchTerm, $textFields)) {\n                    if ($v != \"\") {\n                        if ($searchTerm == \"role\") {\n                            $searchTerm = \"role_id\";\n                        }\n                        $pieces = explode('|', $v);\n                        $test = array();\n                        foreach ($pieces as $piece) {\n                            if ($piece[0] == '!') {\n                                if ($searchTerm == 'email') {\n                                    $this->paginate['conditions']['AND'][] = array('LOWER(User.' . $searchTerm . ') NOT LIKE' => '%' . strtolower(substr($piece, 1)) . '%');\n                                } elseif ($searchTerm == 'org') {\n                                    $this->paginate['conditions']['AND'][] = array('User.org_id !=' => substr($piece, 1));\n                                } else {\n                                    $this->paginate['conditions']['AND'][] = array('User.' . $searchTerm => substr($piece, 1));\n                                }\n                            } else {\n                                if ($searchTerm == 'email') {\n                                    $test['OR'][] = array('LOWER(User.' . $searchTerm . ') LIKE' => '%' . strtolower($piece) . '%');\n                                } elseif ($searchTerm == 'org') {\n                                    $this->paginate['conditions']['OR'][] = array('User.org_id' => $piece);\n                                } elseif ($searchTerm == 'all') {\n                                    $this->paginate['conditions']['AND'][] = array(\n                                            'OR' => array(\n                                                    'UPPER(User.email) LIKE' => '%' . strtoupper($piece) . '%',\n                                                    'UPPER(Organisation.name) LIKE' => '%' . strtoupper($piece) . '%',\n                                                    'UPPER(Role.name) LIKE' => '%' . strtoupper($piece) . '%',\n                                                    'UPPER(User.authkey) LIKE' => '%' . strtoupper($piece) . '%'\n                                            ),\n                                    );\n                                } else {\n                                    $test['OR'][] = array('User.' . $searchTerm => $piece);\n                                }\n                            }\n                        }\n                        if (!empty($test)) {\n                            $this->paginate['conditions']['AND'][] = $test;\n                        }\n                    }\n                }\n                $passedArgsArray[$searchTerm] = $v;\n            }\n        }\n        if ($this->_isRest()) {\n            $conditions = array();\n            if (isset($this->paginate['conditions'])) {\n                $conditions = $this->paginate['conditions'];\n            }\n            if (!$this->_isSiteAdmin()) {\n                $conditions['User.org_id'] = $this->Auth->user('org_id');\n            }\n            $users = $this->User->find('all', array(\n                    'conditions' => $conditions,\n                    'recursive' => -1,\n                    'fields' => array(\n                        'id',\n            'org_id',\n            'server_id',\n            'email',\n            'autoalert',\n            'authkey',\n            'invited_by',\n            'gpgkey',\n            'certif_public',\n            'nids_sid',\n            'termsaccepted',\n            'newsread',\n            'role_id',\n            'change_pw',\n            'contactalert',\n            'disabled',\n            'expiration',\n            'current_login',\n            'last_login',\n            'force_logout',\n            'date_created',\n            'date_modified'\n                    ),\n                    'contain' => array(\n                            'Organisation' => array('id', 'name'),\n                            'Role' => array('id', 'name', 'perm_auth', 'perm_site_admin')\n                    )\n            ));\n            foreach ($users as $key => $value) {\n                if (empty($this->Auth->user('Role')['perm_site_admin'])) {\n                    if ($value['Role']['perm_site_admin']) {\n                        $users[$key]['User']['authkey'] = __('Redacted');\n                    }\n                }\n                unset($users[$key]['User']['password']);\n            }\n            return $this->RestResponse->viewData($users, $this->response->type());\n        } else {\n            $this->set('urlparams', $urlParams);\n            $this->set('passedArgsArray', $passedArgsArray);\n            $conditions = array();\n            if ($this->_isSiteAdmin()) {\n                $this->set('users', $this->paginate());\n            } else {\n                $conditions['User.org_id'] = $this->Auth->user('org_id');\n                $this->paginate['conditions']['AND'][] = $conditions;\n                $users = $this->paginate();\n                foreach ($users as $key => $value) {\n                    if ($value['Role']['perm_site_admin']) {\n                        $users[$key]['User']['authkey'] = __('Redacted');\n                    }\n                }\n                $this->set('users', $users);\n            }\n            if ($this->request->is('ajax')) {\n                $this->autoRender = false;\n                $this->layout = false;\n                $this->render('ajax/admin_index');\n            }\n        }\n    }\n\n    public function admin_filterUserIndex()\n    {\n        if (!$this->_isAdmin() && !$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $passedArgsArray = array();\n        $booleanFields = array('autoalert', 'contactalert', 'termsaccepted');\n        $textFields = array('role', 'email', 'authkey');\n        $showOrg = 0;\n        // org admins can't see users of other orgs\n        if ($this->_isSiteAdmin()) {\n            $textFields[] = 'org';\n            $showOrg = 1;\n        }\n        $this->set('differentFilters', $booleanFields);\n        $this->set('simpleFilters', $textFields);\n        $rules = array_merge($booleanFields, $textFields);\n        $this->set('showorg', $showOrg);\n\n        $filtering = array();\n        foreach ($booleanFields as $b) {\n            $filtering[$b] = '';\n        }\n        foreach ($textFields as $t) {\n            $filtering[$t] = array('OR' => array(), 'NOT' => array());\n        }\n\n        foreach ($this->passedArgs as $k => $v) {\n            if (substr($k, 0, 6) === 'search') {\n                $searchTerm = substr($k, 6);\n                if (in_array($searchTerm, $booleanFields)) {\n                    $filtering[$searchTerm] = $v;\n                } elseif (in_array($searchTerm, $textFields)) {\n                    $pieces = explode('|', $v);\n                    foreach ($pieces as $piece) {\n                        if ($piece[0] == '!') {\n                            $filtering[$searchTerm]['NOT'][] = substr($piece, 1);\n                        } else {\n                            $filtering[$searchTerm]['OR'][] = $piece;\n                        }\n                    }\n                }\n                $passedArgsArray[$searchTerm] = $v;\n            }\n        }\n        $this->set('filtering', json_encode($filtering));\n\n        $roles = $this->User->Role->find('all', array('recursive' => -1));\n        $roleNames = array();\n        $roleJSON = array();\n        foreach ($roles as $k => $v) {\n            $roleNames[$v['Role']['id']] = $v['Role']['name'];\n            $roleJSON[] = array('id' => $v['Role']['id'], 'value' => $v['Role']['name']);\n        }\n        $temp = $this->User->Organisation->find('all', array(\n            'conditions' => array('local' => 1),\n            'recursive' => -1,\n            'fields' => array('id', 'name'),\n            'order' => array('LOWER(name) ASC')\n        ));\n        $orgs = array();\n        foreach ($temp as $org) {\n            $orgs[$org['Organisation']['id']] = $org['Organisation']['name'];\n        }\n        $this->set('orgs', $orgs);\n        $this->set('roles', $roleNames);\n        $this->set('roleJSON', json_encode($roleJSON));\n        $rules = $this->_arrayToValuesIndexArray($rules);\n        $this->set('rules', $rules);\n        $this->set('baseurl', Configure::read('MISP.baseurl'));\n        $this->layout = 'ajax';\n    }\n\n    public function admin_view($id = null)\n    {\n        $this->User->id = $id;\n        if (!$this->User->exists()) {\n            throw new NotFoundException(__('Invalid user'));\n        }\n        $user = $this->User->read(null, $id);\n        if (!empty($user['User']['gpgkey'])) {\n            $pgpDetails = $this->User->verifySingleGPG($user);\n            $user['User']['pgp_status'] = isset($pgpDetails[2]) ? $pgpDetails[2] : 'OK';\n            $user['User']['fingerprint'] = !empty($pgpDetails[4]) ? $pgpDetails[4] : 'N/A';\n        }\n        $user['User']['orgAdmins'] = $this->User->getOrgAdminsForOrg($user['User']['org_id'], $user['User']['id']);\n        if (empty($this->Auth->user('Role')['perm_site_admin']) && !(empty($user['Role']['perm_site_admin']))) {\n            $user['User']['authkey'] = __('Redacted');\n        }\n        $this->set('user', $user);\n        if (!$this->_isSiteAdmin() && !($this->_isAdmin() && $this->Auth->user('org_id') == $user['User']['org_id'])) {\n            throw new MethodNotAllowedException();\n        }\n        if ($this->_isRest()) {\n            $user['User']['password'] = '*****';\n            return $this->RestResponse->viewData(array('User' => $user['User']), $this->response->type());\n        } else {\n            $temp = $this->User->data['User']['invited_by'];\n            $this->set('id', $id);\n            $this->set('user2', $this->User->read(null, $temp));\n        }\n    }\n\n    public function admin_add()\n    {\n        if (!$this->_isAdmin()) {\n            throw new Exception('Administrators only.');\n        }\n        $params = null;\n        if (!$this->_isSiteAdmin()) {\n            $params = array('conditions' => array('perm_site_admin !=' => 1, 'perm_sync !=' => 1, 'perm_regexp_access !=' => 1));\n        }\n        $this->loadModel('AdminSetting');\n        $default_role_id = $this->AdminSetting->getSetting('default_role');\n        $roles = $this->User->Role->find('list', $params);\n        $syncRoles = $this->User->Role->find('list', array('conditions' => array('perm_sync' => 1), 'recursive' => -1));\n        if ($this->request->is('post')) {\n            // In case we don't get the data encapsulated in a User object\n            if ($this->_isRest()) {\n                if (!isset($this->request->data['User'])) {\n                    $this->request->data = array('User' => $this->request->data);\n                }\n                if (isset($this->request->data['User']['id'])) {\n                    unset($this->request->data['User']['id']);\n                }\n                $required_fields = array('role_id', 'email');\n                foreach ($required_fields as $field) {\n                    $set_field_via_other_means = false;\n                    if (empty($this->request->data['User'][$field])) {\n                        if ($field === 'role_id') {\n                            if (!empty($default_role_id)) {\n                                $this->request->data['User'][$field] = $default_role_id;\n                                $set_field_via_other_means = true;\n                            }\n                        }\n                        if (!$set_field_via_other_means) {\n                            return $this->RestResponse->saveFailResponse('Users', 'admin_add', false, array($field => 'Mandatory field not set.'), $this->response->type());\n                        }\n                    }\n                }\n                if (isset($this->request->data['User']['password'])) {\n                    $this->request->data['User']['confirm_password'] = $this->request->data['User']['password'];\n                }\n                $defaults = array(\n                        'external_auth_required' => 0,\n                        'external_auth_key' => '',\n                        'server_id' => 0,\n                        'gpgkey' => '',\n                        'certif_public' => '',\n                        'autoalert' => 0,\n                        'contactalert' => 0,\n                        'disabled' => 0,\n                        'newsread' => 0,\n                        'change_pw' => 1,\n                        'authkey' => $this->User->generateAuthKey(),\n                        'termsaccepted' => 0,\n                        'org_id' => $this->Auth->user('org_id')\n                );\n                foreach ($defaults as $key => $value) {\n                    if (!isset($this->request->data['User'][$key])) {\n                        $this->request->data['User'][$key] = $value;\n                    }\n                }\n            }\n            $this->request->data['User']['date_created'] = time();\n            $this->request->data['User']['date_modified'] = time();\n            if (!array_key_exists($this->request->data['User']['role_id'], $syncRoles)) {\n                $this->request->data['User']['server_id'] = 0;\n            }\n            $this->User->create();\n            // set invited by\n            $this->loadModel('Role');\n            $this->Role->recursive = -1;\n            $chosenRole = $this->Role->findById($this->request->data['User']['role_id']);\n            if (empty($chosenRole)) {\n                throw new MethodNotAllowedException('Invalid role');\n            }\n            $this->request->data['User']['invited_by'] = $this->Auth->user('id');\n            if (!$this->_isRest()) {\n                if ($chosenRole['Role']['perm_sync']) {\n                    $this->request->data['User']['change_pw'] = 0;\n                    $this->request->data['User']['termsaccepted'] = 1;\n                } else {\n                    $this->request->data['User']['change_pw'] = 1;\n                    $this->request->data['User']['termsaccepted'] = 0;\n                }\n            }\n            if (!isset($this->request->data['User']['disabled'])) {\n                $this->request->data['User']['disabled'] = false;\n            }\n            $this->request->data['User']['newsread'] = 0;\n            if (!$this->_isSiteAdmin()) {\n                $this->request->data['User']['org_id'] = $this->Auth->user('org_id');\n                $this->loadModel('Role');\n                $this->Role->recursive = -1;\n                $chosenRole = $this->Role->findById($this->request->data['User']['role_id']);\n                if (\n                    $chosenRole['Role']['perm_site_admin'] == 1 ||\n                    $chosenRole['Role']['perm_regexp_access'] == 1 ||\n                    $chosenRole['Role']['perm_sync'] == 1 ||\n                    $chosenRole['Role']['restricted_to_site_admin'] == 1\n                ) {\n                    throw new Exception('You are not authorised to assign that role to a user.');\n                }\n            }\n            $organisation = $this->User->Organisation->find('first', array(\n                'conditions' => array('Organisation.id' => $this->request->data['User']['org_id']),\n                'recursive' => -1\n            ));\n            $fail = false;\n            if (!$this->_isSiteAdmin()) {\n                if (!empty($organisation['Organisation']['restricted_to_domain'])) {\n                    $fail = true;\n                    foreach ($organisation['Organisation']['restricted_to_domain'] as $restriction) {\n                        if (\n                            strlen($this->request->data['User']['email']) > strlen($restriction) &&\n                            substr($this->request->data['User']['email'], (-1 * strlen($restriction))) === $restriction &&\n                            in_array($this->request->data['User']['email'][strlen($this->request->data['User']['email']) - strlen($restriction) -1], array('@', '.'))\n                        ) {\n                            $fail = false;\n                        }\n                    }\n                    if ($abortPost) {\n                        $this->Flash->error(__('Invalid e-mail domain. Your user is restricted to creating users for the following domain(s): ') . implode(', ', $organisation['Organisation']['restricted_to_domain']));\n                    }\n                }\n            }\n            if (!$fail) {\n                if (empty($organisation)) {\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Users', 'admin_add', false, array('Invalid organisation'), $this->response->type());\n                    } else {\n                        // reset auth key for a new user\n                        $this->set('authkey', $this->newkey);\n                        $this->Flash->error(__('The user could not be saved. Invalid organisation.'));\n                    }\n                } else {\n                    $fieldList = array('password', 'email', 'external_auth_required', 'external_auth_key', 'enable_password', 'confirm_password', 'org_id', 'role_id', 'authkey', 'nids_sid', 'server_id', 'gpgkey', 'certif_public', 'autoalert', 'contactalert', 'disabled', 'invited_by', 'change_pw', 'termsaccepted', 'newsread', 'date_created', 'date_modified');\n                    if ($this->User->save($this->request->data, true, $fieldList)) {\n                        $notification_message = '';\n                        if (!empty($this->request->data['User']['notify'])) {\n                            $user = $this->User->find('first', array('conditions' => array('User.id' => $this->User->id), 'recursive' => -1));\n                            $password = isset($this->request->data['User']['password']) ? $this->request->data['User']['password'] : false;\n                            $result = $this->User->initiatePasswordReset($user, true, true, $password);\n                            if ($result) {\n                                $notification_message .= ' User notified of new credentials.';\n                            }\n                        }\n                        if ($this->_isRest()) {\n                            $user = $this->User->find('first', array(\n                                    'conditions' => array('User.id' => $this->User->id),\n                                    'recursive' => -1\n                            ));\n                            $user['User']['password'] = '******';\n                            return $this->RestResponse->viewData($user, $this->response->type());\n                        } else {\n                            $this->Flash->success(__('The user has been saved.' . $notification_message));\n                            $this->redirect(array('action' => 'index'));\n                        }\n                    } else {\n                        if ($this->_isRest()) {\n                            return $this->RestResponse->saveFailResponse('Users', 'admin_add', false, $this->User->validationErrors, $this->response->type());\n                        } else {\n                            // reset auth key for a new user\n                            $this->set('authkey', $this->newkey);\n                            $this->Flash->error(__('The user could not be saved. Please, try again.'));\n                        }\n                    }\n                }\n            }\n        }\n        if (!$this->_isRest()) {\n            $this->newkey = $this->User->generateAuthKey();\n            $this->set('authkey', $this->newkey);\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->describe('Users', 'admin_add', false, $this->response->type());\n        } else {\n            $orgs = $this->User->Organisation->find('list', array(\n                    'conditions' => array('local' => 1),\n                    'order' => array('lower(name) asc')\n            ));\n            $this->set('orgs', $orgs);\n            // generate auth key for a new user\n            $this->loadModel('Server');\n            $this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n            $this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n            $conditions = array();\n            if (!$this->_isSiteAdmin()) {\n                $conditions['Server.org_id LIKE'] = $this->Auth->user('org_id');\n            }\n            $temp = $this->Server->find('all', array('conditions' => $conditions, 'recursive' => -1, 'fields' => array('id', 'name', 'url')));\n            $servers = array(0 => 'Not bound to a server');\n            if (!empty($temp)) {\n                foreach ($temp as $t) {\n                    if (!empty($t['Server']['name'])) {\n                        $servers[$t['Server']['id']] = $t['Server']['name'];\n                    } else {\n                        $servers[$t['Server']['id']] = $t['Server']['url'];\n                    }\n                }\n            }\n            $this->set('currentOrg', $this->Auth->user('org_id'));\n            $this->set('isSiteAdmin', $this->_isSiteAdmin());\n            $this->set('default_role_id', $default_role_id);\n            $this->set('servers', $servers);\n            $this->set(compact('roles'));\n            $this->set(compact('syncRoles'));\n        }\n    }\n\n    public function admin_edit($id = null)\n    {\n        $this->set('currentOrg', $this->Auth->user('org_id'));\n        $this->User->id = $id;\n        if (!$this->User->exists()) {\n            throw new NotFoundException(__('Invalid user'));\n        }\n        $params = array();\n        $allowedRole = '';\n        $userToEdit = $this->User->find('first', array(\n                'conditions' => array('User.id' => $id),\n                'recursive' => -1,\n                'fields' => array('User.id', 'User.role_id', 'User.email', 'User.org_id', 'Role.perm_site_admin'),\n                'contain' => array('Role')\n        ));\n        if (!$this->_isSiteAdmin()) {\n            // Org admins should be able to select the role that is already assigned to an org user when editing them.\n            // What happened previously:\n            // Org admin edits another org admin of the same org\n            // Org admin is not allowed to set privileged access roles (site_admin/sync/regex)\n            // MISP automatically chooses the first available option for the user as the selected setting (usually user)\n            // Org admin is downgraded to a user\n            // Now we make an exception for the already assigned role, both in the form and the actual edit.\n            if ($userToEdit['User']['org_id'] != $this->Auth->user('org_id') || !empty($userToEdit['Role']['perm_site_admin'])) {\n                throw new NotFoundException(__('Invalid user'));\n            }\n            $allowedRole = $userToEdit['User']['role_id'];\n            $params = array('conditions' => array(\n                    'OR' => array(\n                            'AND' => array(\n                                'perm_site_admin' => 0, 'perm_sync' => 0, 'perm_regexp_access' => 0, 'restricted_to_site_admin' => 0\n                            ),\n                            'id' => $allowedRole,\n                    )\n            ));\n        }\n        $roles = $this->User->Role->find('list', $params);\n        $syncRoles = $this->User->Role->find('list', array('conditions' => array('perm_sync' => 1), 'recursive' => -1));\n        $this->set('currentId', $id);\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (!isset($this->request->data['User'])) {\n                $this->request->data['User'] = $this->request->data;\n            }\n            $abortPost = false;\n            if (!$this->_isRest()) {\n                if (Configure::read('Security.require_password_confirmation')) {\n                    if (!empty($this->request->data['User']['current_password'])) {\n                        $hashed = $this->User->verifyPassword($this->Auth->user('id'), $this->request->data['User']['current_password']);\n                        if (!$hashed) {\n                            $abortPost = true;\n                            $this->Flash->error('Invalid password. Please enter your current password to continue.');\n                        }\n                        unset($this->request->data['User']['current_password']);\n                    } else {\n                        $abortPost = true;\n                        $this->Flash->info('Please enter your current password to continue.');\n                    }\n                }\n            }\n            $fail = false;\n            if (!$this->_isSiteAdmin() && !$abortPost) {\n                $organisation = $this->User->Organisation->find('first', array(\n                    'conditions' => array('Organisation.id' => $userToEdit['User']['org_id']),\n                    'recursive' => -1\n                ));\n                if (!empty($organisation['Organisation']['restricted_to_domain'])) {\n                    $abortPost = true;\n                    foreach ($organisation['Organisation']['restricted_to_domain'] as $restriction) {\n                        if (\n                            strlen($this->request->data['User']['email']) > strlen($restriction) &&\n                            substr($this->request->data['User']['email'], (-1 * strlen($restriction))) === $restriction &&\n                            in_array($this->request->data['User']['email'][strlen($this->request->data['User']['email']) - strlen($restriction) -1], array('@', '.'))\n                        ) {\n                            $abortPost = false;\n                        }\n                    }\n                    if ($abortPost) {\n                        $this->Flash->error(__('Invalid e-mail domain. Your user is restricted to creating users for the following domain(s): ') . implode(', ', $organisation['Organisation']['restricted_to_domain']));\n                    }\n                }\n            }\n            if (!$abortPost) {\n                $this->request->data['User']['id'] = $id;\n                if (!isset($this->request->data['User']['email'])) {\n                    $this->request->data['User']['email'] = $userToEdit['User']['email'];\n                }\n                if (isset($this->request->data['User']['role_id']) && !array_key_exists($this->request->data['User']['role_id'], $syncRoles)) {\n                    $this->request->data['User']['server_id'] = 0;\n                }\n                $fields = array();\n                $blockedFields = array('id', 'invited_by');\n                if (!$this->_isSiteAdmin()) {\n                    $blockedFields[] = 'org_id';\n                }\n                foreach (array_keys($this->request->data['User']) as $field) {\n                    if (in_array($field, $blockedFields)) {\n                        continue;\n                    }\n                    if ($field != 'password') {\n                        array_push($fields, $field);\n                    }\n                }\n                $fieldsOldValues = array();\n                foreach ($fields as $field) {\n                    if ($field == 'enable_password') {\n                        continue;\n                    }\n                    if ($field != 'confirm_password') {\n                        array_push($fieldsOldValues, $this->User->field($field));\n                    } else {\n                        array_push($fieldsOldValues, $this->User->field('password'));\n                    }\n                }\n                if (\n                    isset($this->request->data['User']['enable_password']) && $this->request->data['User']['enable_password'] != '0' &&\n                    isset($this->request->data['User']['password']) && \"\" != $this->request->data['User']['password']\n                ) {\n                    $fields[] = 'password';\n                    if ($this->_isRest() && !isset($this->request->data['User']['confirm_password'])) {\n                        $this->request->data['User']['confirm_password'] = $this->request->data['User']['password'];\n                        $fields[] = 'confirm_password';\n                    }\n                }\n                if (!$this->_isRest()) {\n                    $fields[] = 'role_id';\n                }\n                if (!$this->_isSiteAdmin()) {\n                    $this->loadModel('Role');\n                    $this->Role->recursive = -1;\n                    $chosenRole = $this->Role->findById($this->request->data['User']['role_id']);\n                    if (empty($chosenRole) || (($chosenRole['Role']['id'] != $allowedRole) && ($chosenRole['Role']['perm_site_admin'] == 1 || $chosenRole['Role']['perm_regexp_access'] == 1 || $chosenRole['Role']['perm_sync'] == 1))) {\n                        throw new Exception('You are not authorised to assign that role to a user.');\n                    }\n                }\n                if ($this->User->save($this->request->data, true, $fields)) {\n                    // newValues to array\n                    $fieldsNewValues = array();\n                    foreach ($fields as $field) {\n                        if ($field != 'confirm_password') {\n                            $newValue = $this->data['User'][$field];\n                            if (gettype($newValue) == 'array') {\n                                $newValueStr = '';\n                                $cP = 0;\n                                foreach ($newValue as $newValuePart) {\n                                    if ($cP < 2) {\n                                        $newValueStr .= '-' . $newValuePart;\n                                    } else {\n                                        $newValueStr = $newValuePart . $newValueStr;\n                                    }\n                                    $cP++;\n                                }\n                                array_push($fieldsNewValues, $newValueStr);\n                            } else {\n                                array_push($fieldsNewValues, $newValue);\n                            }\n                        } else {\n                            array_push($fieldsNewValues, $this->data['User']['password']);\n                        }\n                    }\n                    // compare\n                    $fieldsResultStr = '';\n                    $c = 0;\n                    foreach ($fields as $field) {\n                        if (isset($fieldsOldValues[$c]) && $fieldsOldValues[$c] != $fieldsNewValues[$c]) {\n                            if ($field != 'confirm_password' && $field != 'enable_password') {\n                                $fieldsResultStr = $fieldsResultStr . ', ' . $field . ' (' . $fieldsOldValues[$c] . ') => (' . $fieldsNewValues[$c] . ')';\n                            }\n                        }\n                        $c++;\n                    }\n                    $fieldsResultStr = substr($fieldsResultStr, 2);\n                    $this->__extralog(\"edit\", \"user\", $fieldsResultStr);\n                    if ($this->_isRest()) {\n                        $user = $this->User->find('first', array(\n                                'conditions' => array('User.id' => $this->User->id),\n                                'recursive' => -1\n                        ));\n                        $user['User']['password'] = '******';\n                        return $this->RestResponse->viewData($user, $this->response->type());\n                    } else {\n                        $this->Flash->success(__('The user has been saved'));\n                        $this->_refreshAuth(); // in case we modify ourselves\n                        $this->redirect(array('action' => 'index'));\n                    }\n                } else {\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Users', 'admin_edit', $id, $this->User->validationErrors, $this->response->type());\n                    } else {\n                        $this->Flash->error(__('The user could not be saved. Please, try again.'));\n                    }\n                }\n            }\n        } else {\n            if ($this->_isRest()) {\n                return $this->RestResponse->describe('Users', 'admin_edit', $id, $this->response->type());\n            }\n            $this->User->read(null, $id);\n            if (!$this->_isSiteAdmin() && $this->Auth->user('org_id') != $this->User->data['User']['org_id']) {\n                $this->redirect(array('controller' => 'users', 'action' => 'index', 'admin' => true));\n            }\n            $this->User->set('password', '');\n            $this->request->data = $this->User->data;\n        }\n        if ($this->_isSiteAdmin()) {\n            $orgs = $this->User->Organisation->find('list', array(\n                    'conditions' => array('local' => 1),\n                    'order' => array('lower(name) asc')\n            ));\n        } else {\n            $orgs = array();\n        }\n        $this->loadModel('Server');\n        $this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n        $this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n        $conditions = array();\n        if (!$this->_isSiteAdmin()) {\n            $conditions['Server.org_id LIKE'] = $this->Auth->user('org_id');\n        }\n        $temp = $this->Server->find('all', array('conditions' => $conditions, 'recursive' => -1, 'fields' => array('id', 'name', 'url')));\n        $servers = array(0 => 'Not bound to a server');\n        foreach ($temp as $t) {\n            if (!empty($t['Server']['name'])) {\n                $servers[$t['Server']['id']] = $t['Server']['name'];\n            } else {\n                $servers[$t['Server']['id']] = $t['Server']['url'];\n            }\n        }\n        $this->set('servers', $servers);\n        $this->set('orgs', $orgs);\n        $this->set('id', $id);\n        $this->set(compact('roles'));\n        $this->set(compact('syncRoles'));\n    }\n\n    public function admin_delete($id = null)\n    {\n        if (!$this->request->is('post') && !$this->request->is('delete')) {\n            throw new MethodNotAllowedException(__('Action not allowed, post or delete request expected.'));\n        }\n        if (!$this->_isAdmin()) {\n            throw new Exception('Administrators only.');\n        }\n        $this->User->id = $id;\n        $conditions = array('User.id' => $id);\n        if (!$this->_isSiteAdmin()) {\n            $conditions['org_id'] = $this->Auth->user('org_id');\n        }\n        $user = $this->User->find('first', array(\n                'conditions' => $conditions,\n                'recursive' => -1\n        ));\n        if (empty($user)) {\n            throw new NotFoundException(__('Invalid user'));\n        }\n        $fieldsDescrStr = 'User (' . $id . '): ' . $user['User']['email'];\n        if ($this->User->delete($id)) {\n            $this->__extralog(\"delete\", $fieldsDescrStr, '');\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('User', 'admin_delete', $id, $this->response->type(), 'User deleted.');\n            } else {\n                $this->Flash->success(__('User deleted'));\n                $this->redirect(array('action' => 'index'));\n            }\n        }\n        $this->Flash->error(__('User was not deleted'));\n        $this->redirect(array('action' => 'index'));\n    }\n\n    public function updateLoginTime()\n    {\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException('This feature is only accessible via POST requests');\n        }\n        $user = $this->User->find('first', array(\n            'recursive' => -1,\n            'conditions' => array('User.id' => $this->Auth->user('id'))\n        ));\n        $this->User->id = $this->Auth->user('id');\n        $this->User->saveField('last_login', time());\n        $this->User->saveField('current_login', time());\n        $user = $this->User->getAuthUser($user['User']['id']);\n        $this->Auth->login($user);\n        $this->redirect(array('Controller' => 'User', 'action' => 'dashboard'));\n    }\n\n    public function login()\n    {\n        if ($this->request->is('post') || $this->request->is('put')) {\n            $this->Bruteforce = ClassRegistry::init('Bruteforce');\n            if (!empty($this->request->data['User']['email'])) {\n                if ($this->Bruteforce->isBlacklisted($_SERVER['REMOTE_ADDR'], $this->request->data['User']['email'])) {\n                    throw new ForbiddenException('You have reached the maximum number of login attempts. Please wait ' . Configure::read('SecureAuth.expire') . ' seconds and try again.');\n                }\n            }\n            // Check the length of the user's authkey\n            $userPass = $this->User->find('first', array(\n                'conditions' => array('User.email' => $this->request->data['User']['email']),\n                'fields' => array('User.password'),\n                'recursive' => -1\n            ));\n            if (!empty($userPass) && strlen($userPass['User']['password']) == 40) {\n                $this->AdminSetting = ClassRegistry::init('AdminSetting');\n                $db_version = $this->AdminSetting->find('all', array('conditions' => array('setting' => 'db_version')));\n                $versionRequirementMet = $this->User->checkVersionRequirements($db_version[0]['AdminSetting']['value'], '2.4.77');\n                if ($versionRequirementMet) {\n                    $passwordToSave = $this->request->data['User']['password'];\n                }\n                unset($this->Auth->authenticate['Form']['passwordHasher']);\n                $this->Auth->constructAuthenticate();\n            }\n        }\n        if ($this->Auth->login()) {\n            $this->__extralog(\"login\");\n            $this->User->Behaviors->disable('SysLogLogable.SysLogLogable');\n            $this->User->id = $this->Auth->user('id');\n            $user = $this->User->find('first', array(\n                'conditions' => array(\n                    'User.id' => $this->Auth->user('id')\n                ),\n                'recursive' => -1\n            ));\n            unset($user['User']['password']);\n            $user['User']['action'] = 'login';\n            $user['User']['last_login'] = $this->Auth->user('current_login');\n            $user['User']['current_login'] = time();\n            $this->User->save($user['User'], true, array('id', 'last_login', 'current_login'));\n            if (empty($this->Auth->authenticate['Form']['passwordHasher']) && !empty($passwordToSave)) {\n                $this->User->saveField('password', $passwordToSave);\n            }\n            $this->User->Behaviors->enable('SysLogLogable.SysLogLogable');\n            // no state changes are ever done via GET requests, so it is safe to return to the original page:\n            $this->redirect($this->Auth->redirectUrl());\n        // $this->redirect(array('controller' => 'events', 'action' => 'index'));\n        } else {\n            $dataSourceConfig = ConnectionManager::getDataSource('default')->config;\n            $dataSource = $dataSourceConfig['datasource'];\n            // don't display authError before first login attempt\n            if (str_replace(\"//\", \"/\", $this->webroot . $this->Session->read('Auth.redirect')) == $this->webroot && $this->Session->read('Message.auth.message') == $this->Auth->authError) {\n                $this->Session->delete('Message.auth');\n            }\n            // don't display \"invalid user\" before first login attempt\n            if ($this->request->is('post')) {\n                $this->Flash->error(__('Invalid username or password, try again'));\n                if (isset($this->request->data['User']['email'])) {\n                    $this->Bruteforce->insert($_SERVER['REMOTE_ADDR'], $this->request->data['User']['email']);\n                }\n            }\n            // populate the DB with the first role (site admin) if it's empty\n            $this->loadModel('Role');\n            if ($this->Role->find('count') == 0) {\n                $siteAdmin = array('Role' => array(\n                    'id' => 1,\n                    'name' => 'Site Admin',\n                    'permission' => 3,\n                    'perm_add' => 1,\n                    'perm_modify' => 1,\n                    'perm_modify_org' => 1,\n                    'perm_publish' => 1,\n                    'perm_sync' => 1,\n                    'perm_admin' => 1,\n                    'perm_audit' => 1,\n                    'perm_auth' => 1,\n                    'perm_site_admin' => 1,\n                    'perm_regexp_access' => 1,\n                    'perm_sharing_group' => 1,\n                    'perm_template' => 1,\n                    'perm_tagger' => 1,\n                ));\n                $this->Role->save($siteAdmin);\n                // PostgreSQL: update value of auto incremented serial primary key after setting the column by force\n                if ($dataSource == 'Database/Postgres') {\n                    $sql = \"SELECT setval('roles_id_seq', (SELECT MAX(id) FROM roles));\";\n                    $this->Role->query($sql);\n                }\n            }\n            if ($this->User->Organisation->find('count', array('conditions' => array('Organisation.local' => true))) == 0) {\n                $this->User->runUpdates();\n                $date = date('Y-m-d H:i:s');\n                $org = array('Organisation' => array(\n                        'id' => 1,\n                        'name' => !empty(Configure::read('MISP.org')) ? Configure::read('MISP.org') : 'ADMIN',\n                        'description' => 'Automatically generated admin organisation',\n                        'type' => 'ADMIN',\n                        'uuid' => CakeText::uuid(),\n                        'local' => 1,\n                        'date_created' => $date,\n                        'sector' => '',\n                        'nationality' => ''\n                ));\n                $this->User->Organisation->save($org);\n                // PostgreSQL: update value of auto incremented serial primary key after setting the column by force\n                if ($dataSource == 'Database/Postgres') {\n                    $sql = \"SELECT setval('organisations_id_seq', (SELECT MAX(id) FROM organisations));\";\n                    $this->User->Organisation->query($sql);\n                }\n                $org_id = $this->User->Organisation->id;\n            } else {\n                $hostOrg = $this->User->Organisation->find('first', array('conditions' => array('Organisation.name' => Configure::read('MISP.org'), 'Organisation.local' => true), 'recursive' => -1));\n                if (!empty($hostOrg)) {\n                    $org_id = $hostOrg['Organisation']['id'];\n                } else {\n                    $firstOrg = $this->User->Organisation->find('first', array('conditions' => array('Organisation.local' => true), 'order' => 'Organisation.id ASC'));\n                    $org_id = $firstOrg['Organisation']['id'];\n                }\n            }\n\n            // populate the DB with the first user if it's empty\n            if ($this->User->find('count') == 0) {\n                $this->User->runUpdates();\n                $this->User->createInitialUser($org_id);\n            }\n        }\n    }\n\n    public function routeafterlogin()\n    {\n        // Events list\n        $url = $this->Session->consume('pre_login_requested_url');\n        if (empty($url)) {\n            $url = array('controller' => 'events', 'action' => 'index');\n        }\n        $this->redirect($url);\n    }\n\n    public function logout()\n    {\n        if ($this->Session->check('Auth.User')) {\n            $this->__extralog(\"logout\");\n        }\n        $this->Flash->info(__('Good-Bye'));\n        $user = $this->User->find('first', array(\n            'conditions' => array(\n                'User.id' => $this->Auth->user('id')\n            ),\n            'recursive' => -1\n        ));\n        unset($user['User']['password']);\n        $user['User']['action'] = 'logout';\n        $this->User->save($user['User'], true, array('id'));\n        $this->redirect($this->Auth->logout());\n    }\n\n    public function resetauthkey($id = null)\n    {\n        if (!$this->_isAdmin() && Configure::read('MISP.disableUserSelfManagement')) {\n            throw new MethodNotAllowedException('User self-management has been disabled on this instance.');\n        }\n        if ($id == 'me') {\n            $id = $this->Auth->user('id');\n        }\n        if (!$this->userRole['perm_auth']) {\n            throw new MethodNotAllowedException('Invalid action.');\n        }\n        $this->User->id = $id;\n        if (!$id || !$this->User->exists($id)) {\n            throw new MethodNotAllowedException('Invalid user.');\n        }\n        $user = $this->User->read();\n        $oldKey = $this->User->data['User']['authkey'];\n        if (!$this->_isSiteAdmin() && !($this->_isAdmin() && $this->Auth->user('org_id') == $this->User->data['User']['org_id']) && ($this->Auth->user('id') != $id)) {\n            throw new MethodNotAllowedException('Invalid user.');\n        }\n        $newkey = $this->User->generateAuthKey();\n        $this->User->saveField('authkey', $newkey);\n        $this->__extralog(\n                'reset_auth_key',\n                'Authentication key for user ' . $user['User']['id'] . ' (' . $user['User']['email'] . ')',\n                $fieldsResult = 'authkey(' . $oldKey . ') => (' . $newkey . ')'\n        );\n        if (!$this->_isRest()) {\n            $this->Flash->success(__('New authkey generated.', true));\n            $this->_refreshAuth();\n            $this->redirect($this->referer());\n        } else {\n            return $this->RestResponse->saveSuccessResponse('User', 'resetauthkey', $id, $this->response->type(), 'Authkey updated: ' . $newkey);\n        }\n    }\n\n    public function histogram($selected = null)\n    {\n        //if (!$this->request->is('ajax') && !$this->_isRest()) throw new MethodNotAllowedException('This function can only be accessed via AJAX or the API.');\n        if ($selected == '[]') {\n            $selected = null;\n        }\n        $selectedTypes = array();\n        if ($selected) {\n            $selectedTypes = json_decode($selected);\n        }\n        if (!$this->_isSiteAdmin() && !empty(Configure::read('Security.hide_organisation_index_from_users'))) {\n            $org_ids = array($this->Auth->user('org_id'));\n        } else {\n            $org_ids = $this->User->Event->find('list', array(\n                'fields' => array('Event.orgc_id', 'Event.orgc_id'),\n                'group' => array('Event.orgc_id')\n            ));\n        }\n        $orgs_temp = $this->User->Organisation->find('list', array(\n            'fields' => array('Organisation.id', 'Organisation.name'),\n            'conditions' => array('Organisation.id' => $org_ids)\n        ));\n        $orgs = array(0 => 'All organisations');\n        foreach ($org_ids as $v) {\n            if (!empty($orgs_temp[$v])) {\n                $orgs[$v] = $orgs_temp[$v];\n            }\n        }\n        $data = array();\n        $max = 1;\n        foreach ($orgs as $org_id => $org_name) {\n            $conditions = array('Attribute.deleted' => 0);\n            if ($selected) {\n                $conditions['Attribute.type'] = $selectedTypes;\n            }\n            if ($org_id != 0) {\n                $conditions['Event.orgc_id'] = $org_id;\n            }\n            $params = array(\n                'recursive' => -1,\n                'fields' => array('Attribute.type', 'COUNT(*) as num_types'),\n                'group' => array('Attribute.type'),\n                'joins' => array(\n                    array(\n                        'table' => 'events',\n                        'alias' => 'Event',\n                        'type' => 'LEFT',\n                        'conditions' => array(\n                            'Attribute.event_id = Event.id'\n                        )\n                    )\n                ),\n                //'order' => array('num_types DESC'),\n                'conditions' => $conditions,\n                'order' => false\n            );\n            if ($org_id == 0) {\n                unset($params['joins']);\n            }\n            $temp = $this->User->Event->Attribute->find('all', $params);\n            $temp = Hash::combine($temp, '{n}.Attribute.type', '{n}.0.num_types');\n            $total = 0;\n            foreach ($temp as $k => $v) {\n                if (intval($v) > $max) {\n                    $max = intval($v);\n                }\n                $total += intval($v);\n            }\n            $data[$org_id]['data'] = $temp;\n            $data[$org_id]['org_name'] = $org_name;\n            $data[$org_id]['total'] = $total;\n        }\n        uasort($data, function ($a, $b) {\n            return $b['total'] - $a['total'];\n        });\n        $data = array_values($data);\n        $this->set('data', $data);\n        $this->set('max', $max);\n        $this->set('selectedTypes', $selectedTypes);\n\n        // Nice graphical histogram\n        $sigTypes = array_keys($this->User->Event->Attribute->typeDefinitions);\n        App::uses('ColourPaletteTool', 'Tools');\n        $paletteTool = new ColourPaletteTool();\n        $colours = $paletteTool->createColourPalette(count($sigTypes));\n        $typeDb = array();\n        foreach ($sigTypes as $k => $type) {\n            $typeDb[$type] = $colours[$k];\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($data, $this->response->type());\n        } else {\n            $this->set('typeDb', $typeDb);\n            $this->set('sigTypes', $sigTypes);\n            $this->layout = 'ajax';\n        }\n    }\n\n    public function terms()\n    {\n        if ($this->request->is('post') || $this->request->is('put')) {\n            $this->User->id = $this->Auth->user('id');\n            $this->User->saveField('termsaccepted', true);\n            $this->_refreshAuth(); // refresh auth info\n            $this->Flash->success(__('You accepted the Terms and Conditions.'));\n            $this->redirect(array('action' => 'routeafterlogin'));\n        }\n        $this->set('termsaccepted', $this->Auth->user('termsaccepted'));\n    }\n\n    public function downloadTerms()\n    {\n        if (!Configure::read('MISP.terms_file')) {\n            $termsFile = APP .\"View/Users/terms\";\n        } else {\n            $termsFile = APP . 'files' . DS . 'terms' . DS .  Configure::read('MISP.terms_file');\n        }\n        $this->response->file($termsFile, array('download' => true, 'name' => Configure::read('MISP.terms_file')));\n        return $this->response;\n    }\n\n    private function __extralog($action = null, $description = null, $fieldsResult = null)\n    {\n        // new data\n        $model = 'User';\n        $modelId = $this->Auth->user('id');\n        if ($action == 'login') {\n            $description = \"User (\" . $this->Auth->user('id') . \"): \" . $this->data['User']['email'];\n        } elseif ($action == 'logout') {\n            $description = \"User (\" . $this->Auth->user('id') . \"): \" . $this->Auth->user('email');\n        } elseif ($action == 'edit') {\n            $description = \"User (\" . $this->User->id . \"): \" . $this->data['User']['email'];\n        } elseif ($action == 'change_pw') {\n            $description = \"User (\" . $this->User->id . \"): \" . $this->Auth->user('email');\n            $fieldsResult = \"Password changed.\";\n        }\n\n        // query\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        $this->Log->save(array(\n            'org' => $this->Auth->user('Organisation')['name'],\n            'model' => $model,\n            'model_id' => $modelId,\n            'email' => $this->Auth->user('email'),\n            'action' => $action,\n            'title' => $description,\n            'change' => isset($fieldsResult) ? $fieldsResult : ''));\n\n        // write to syslogd as well\n        App::import('Lib', 'SysLog.SysLog');\n        $syslog = new SysLog();\n        if (isset($fieldsResult) && $fieldsResult) {\n            $syslog->write('notice', $description . ' -- ' . $action . ' -- ' . $fieldsResult);\n        } else {\n            $syslog->write('notice', $description . ' -- ' . $action);\n        }\n    }\n\n    // Used for fields_before and fields for audit\n    public function arrayCopy(array $array)\n    {\n        $result = array();\n        foreach ($array as $key => $val) {\n            if (is_array($val)) {\n                $result[$key] = arrayCopy($val);\n            } elseif (is_object($val)) {\n                $result[$key] = clone $val;\n            } else {\n                $result[$key] = $val;\n            }\n        }\n        return $result;\n    }\n\n    public function checkAndCorrectPgps()\n    {\n        if (!self::_isAdmin()) {\n            throw new NotFoundException();\n        }\n        $this->set('fails', $this->User->checkAndCorrectPgps());\n    }\n\n    public function admin_quickEmail($user_id)\n    {\n        if (!$this->_isAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $conditions = array('User.id' => $user_id);\n        if (!$this->_isSiteAdmin()) {\n            $conditions['User.org_id'] = $this->Auth->user('org_id');\n        }\n        $user = $this->User->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1\n        ));\n        $error = false;\n        if (empty($user)) {\n            $error = 'Invalid user.';\n        }\n        if (!$error && $user['User']['disabled']) {\n            $error = 'Cannot send an e-mail to this user as the account is disabled.';\n        }\n        $encryption = false;\n        if (!$error && !empty($user['User']['gpgkey'])) {\n            $encryption = 'PGP';\n        } elseif (!$error && !empty($user['User']['certif_public'])) {\n            $encryption = 'SMIME';\n        }\n        $this->set('encryption', $encryption);\n        if (!$error && !$encryption && (Configure::read('GnuPG.onlyencrypted') || Configure::read('GnuPG.bodyonlyencrypted'))) {\n            $error = 'No encryption key found for the user and the instance posture blocks non encrypted e-mails from being sent.';\n        }\n        if ($error) {\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveFailResponse('Users', 'admin_quickEmail', false, $error, $this->response->type());\n            } else {\n                $this->Flash->error('Cannot send an e-mail to this user as the account is disabled.');\n                $this->redirect('/admin/users/view/' . $user_id);\n            }\n        }\n        if ($this->request->is('post')) {\n            if (!isset($this->request->data['User'])) {\n                $this->request->data['User'] = $this->request->data;\n            }\n            if (empty($this->request->data['User']['subject']) || empty($this->request->data['User']['body'])) {\n                $message = 'Both the subject and the body have to be set.';\n                if ($this->_isRest()) {\n                    throw new MethodNotAllowedException($message);\n                } else {\n                    $this->Flash->error($message);\n                    $this->redirect('/admin/users/quickEmail/' . $user_id);\n                }\n            }\n            $result = $this->User->sendEmail($user, $this->request->data['User']['body'], false, $this->request->data['User']['subject']);\n            if ($this->_isRest()) {\n                if ($result) {\n                    return $this->RestResponse->saveSuccessResponse('User', 'admin_quickEmail', $id, $this->response->type(), 'User deleted.');\n                } else {\n                    return $this->RestResponse->saveFailResponse('Users', 'admin_quickEmail', false, $this->User->validationErrors, $this->response->type());\n                }\n            } else {\n                if ($result) {\n                    $this->Flash->success('Email sent.');\n                } else {\n                    $this->Flash->error('Could not send e-mail.');\n                }\n                $this->redirect('/admin/users/view/' . $user_id);\n            }\n        } elseif ($this->_isRest()) {\n            return $this->RestResponse->describe('Users', 'admin_quickEmail', false, $this->response->type());\n        }\n        $this->set('encryption', $encryption);\n        $this->set('user', $user);\n    }\n\n    public function admin_email($isPreview=false)\n    {\n        if (!$this->_isAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $isPostOrPut = $this->request->is('post') || $this->request->is('put');\n        $conditions = array();\n        if (!$this->_isSiteAdmin()) {\n            $conditions = array('org_id' => $this->Auth->user('org_id'));\n        }\n\n        // harvest parameters\n        if ($isPostOrPut) {\n            $recipient = $this->request->data['User']['recipient'];\n        } else {\n            $recipient = isset($this->request->query['recipient']) ? $this->request->query['recipient'] : null;\n        }\n        if ($isPostOrPut) {\n            $recipientEmailList = $this->request->data['User']['recipientEmailList'];\n        } else {\n            $recipientEmailList = isset($this->request->query['recipientEmailList']) ? $this->request->query['recipientEmailList'] : null;\n        }\n        if ($isPostOrPut) {\n            $orgNameList = $this->request->data['User']['orgNameList'];\n        } else {\n            $orgNameList = isset($this->request->query['orgNameList']) ? $this->request->query['orgNameList'] : null;\n        }\n\n        if (!is_null($recipient) && $recipient == 0) {\n            if (is_null($recipientEmailList)) {\n                throw new NotFoundException(__('Recipient email not provided'));\n            }\n            $conditions['id'] = $recipientEmailList;\n        } elseif (!is_null($recipient) && $recipient == 2) {\n            if (is_null($orgNameList)) {\n                throw new NotFoundException(__('Recipient organisation not provided'));\n            }\n            $conditions['org_id'] = $orgNameList;\n        }\n        $conditions['AND'][] = array('User.disabled' => 0);\n\n        // Allow to mimic real form post\n        if ($isPreview) {\n            $users = $this->User->find('list', array('recursive' => -1, 'order' => array('email ASC'), 'conditions' => $conditions, 'fields' => array('email')));\n            $this->set('emails', $users);\n            $this->set('emailsCount', count($users));\n            $this->render('ajax/emailConfirmTemplate');\n        } else {\n            $users = $this->User->find('all', array('recursive' => -1, 'order' => array('email ASC'), 'conditions' => $conditions));\n            // User has filled in his contact form, send out the email.\n            if ($isPostOrPut) {\n                $this->request->data['User']['message'] = $this->User->adminMessageResolve($this->request->data['User']['message']);\n                $failures = '';\n                foreach ($users as $user) {\n                    $password = $this->User->generateRandomPassword();\n                    $body = str_replace('$password', $password, $this->request->data['User']['message']);\n                    $body = str_replace('$username', $user['User']['email'], $body);\n                    $result = $this->User->sendEmail($user, $body, false, $this->request->data['User']['subject']);\n                    // if sending successful and action was a password change, update the user's password.\n                    if ($result && $this->request->data['User']['action'] != '0') {\n                        $this->User->id = $user['User']['id'];\n                        $this->User->saveField('password', $password);\n                        $this->User->saveField('change_pw', '1');\n                    }\n                    if (!$result) {\n                        if ($failures != '') {\n                            $failures .= ', ';\n                        }\n                        $failures .= $user['User']['email'];\n                    }\n                }\n                if ($failures != '') {\n                    $this->Flash->success(__('E-mails sent, but failed to deliver the messages to the following recipients: ' . $failures));\n                } else {\n                    $this->Flash->success(__('E-mails sent.'));\n                }\n            }\n            $conditions = array();\n            if (!$this->_isSiteAdmin()) {\n                $conditions = array('org_id' => $this->Auth->user('org_id'));\n            }\n            $conditions['User.disabled'] = 0;\n            $temp = $this->User->find('all', array('recursive' => -1, 'fields' => array('id', 'email', 'Organisation.name'), 'order' => array('email ASC'), 'conditions' => $conditions, 'contain' => array('Organisation')));\n            $emails = array();\n            $orgName = array();\n            // save all the emails of the users and set it for the dropdown list in the form\n            foreach ($temp as $user) {\n                $emails[$user['User']['id']] = $user['User']['email'];\n                $orgName[$user['Organisation']['id']] = $user['Organisation']['name'];\n            }\n\n            $this->set('users', $temp);\n            $this->set('recipientEmail', $emails);\n            $this->set('orgName', $orgName);\n            $this->set('org', Configure::read('MISP.org'));\n            $textsToFetch = array('newUserText', 'passwordResetText');\n            $this->loadModel('Server');\n            foreach ($textsToFetch as $text) {\n                ${$text} = Configure::read('MISP.' . $text);\n                if (!${$text}) {\n                    ${$text} = $this->Server->serverSettings['MISP'][$text]['value'];\n                }\n                $this->set($text, ${$text});\n            }\n        }\n    }\n\n    public function initiatePasswordReset($id, $firstTime = false)\n    {\n        if (!$this->_isAdmin()) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        $user = $this->User->find('first', array(\n            'conditions' => array('id' => $id),\n            'recursive' => -1\n        ));\n        if (!$this->_isSiteAdmin() && $this->Auth->user('org_id') != $user['User']['org_id']) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        if ($this->request->is('post')) {\n            if (isset($this->request->data['User']['firstTime'])) {\n                $firstTime = $this->request->data['User']['firstTime'];\n            }\n            return new CakeResponse($this->User->initiatePasswordReset($user, $firstTime));\n        } else {\n            $error = false;\n            $encryption = false;\n            if (!empty($user['User']['gpgkey'])) {\n                $encryption = 'PGP';\n            } elseif (!$error && !empty($user['User']['certif_public'])) {\n                $encryption = 'SMIME';\n            }\n            $this->set('encryption', $encryption);\n            if (!$encryption && (Configure::read('GnuPG.onlyencrypted') || Configure::read('GnuPG.bodyonlyencrypted'))) {\n                $error = 'No encryption key found for the user and the instance posture blocks non encrypted e-mails from being sent.';\n            }\n            $this->set('error', $error);\n            $this->layout = 'ajax';\n            $this->set('user', $user);\n            $this->set('firstTime', $firstTime);\n            $this->render('ajax/passwordResetConfirmationForm');\n        }\n    }\n\n    // shows some statistics about the instance\n    public function statistics($page = 'data')\n    {\n        $this->set('page', $page);\n        $pages = array('data' => __('Usage data'),\n                       'orgs' => __('Organisations'),\n                       'users' => __('User and Organisation statistics'),\n                       'tags' => __('Tags'),\n                       'attributehistogram' => __('Attribute histogram'),\n                       'sightings' => __('Sightings toplists'),\n                       'galaxyMatrix' => __('Galaxy Matrix'));\n        if (!$this->_isSiteAdmin() && !empty(Configure::read('Security.hide_organisation_index_from_users'))) {\n            unset($pages['orgs']);\n        }\n        $this->set('pages', $pages);\n        $result = array();\n        if ($page == 'data') {\n            $result = $this->__statisticsData($this->params['named']);\n        } elseif ($page == 'orgs') {\n            if (!$this->_isSiteAdmin() && !empty(Configure::read('Security.hide_organisation_index_from_users'))) {\n                throw new MethodNotAllowedException('This feature is currently disabled.');\n            }\n            $result = $this->__statisticsOrgs($this->params['named']);\n        } elseif ($page == 'users') {\n            $result = $this->__statisticsUsers($this->params['named']);\n        } elseif ($page == 'tags') {\n            $result = $this->__statisticsTags($this->params['named']);\n        } elseif ($page == 'attributehistogram') {\n            if ($this->_isRest()) {\n                return $this->histogram($selected = null);\n            } else {\n                $this->render('statistics_histogram');\n            }\n        } elseif ($page == 'sightings') {\n            $result = $this->__statisticsSightings($this->params['named']);\n        } elseif ($page == 'galaxyMatrix') {\n            $result = $this->__statisticsGalaxyMatrix($this->params['named']);\n        }\n        if ($this->_isRest()) {\n            return $result;\n        }\n    }\n\n    private function __statisticsData($params = array())\n    {\n        // set all of the data up for the heatmaps\n        $params = array(\n            'fields' => array('name'),\n            'recursive' => -1,\n            'conditions' => array()\n        );\n        if (!$this->_isSiteAdmin() && !empty(Configure::read('Security.hide_organisation_index_from_users'))) {\n            $params['conditions'] = array('Organisation.id' => $this->Auth->user('org_id'));\n        }\n        $orgs = $this->User->Organisation->find('all', $params);\n        $local_orgs_params = $params;\n        $local_orgs_params['conditions']['Organisation.local'] = 1;\n        $local_orgs = $this->User->Organisation->find('all', $local_orgs_params);\n        $this->loadModel('Log');\n        $year = date('Y');\n        $month = date('n');\n        $month = $month - 5;\n        if ($month < 1) {\n            $year--;\n            $month = 12 + $month;\n        }\n        // Some additional statistics\n        $this_month = strtotime('first day of this month');\n        $stats['event_count'] = $this->User->Event->find('count', array('recursive' => -1));\n        $stats['event_count_month'] = $this->User->Event->find('count', array('conditions' => array('Event.timestamp >' => $this_month), 'recursive' => -1));\n\n        $stats['attribute_count'] = $this->User->Event->Attribute->find('count', array('conditions' => array('Attribute.deleted' => 0), 'recursive' => -1));\n        $stats['attribute_count_month'] = $this->User->Event->Attribute->find('count', array('conditions' => array('Attribute.timestamp >' => $this_month, 'Attribute.deleted' => 0), 'recursive' => -1));\n        $stats['attributes_per_event'] = round($stats['attribute_count'] / $stats['event_count']);\n\n        $this->loadModel('Correlation');\n        $this->Correlation->recursive = -1;\n        $stats['correlation_count'] = $this->Correlation->find('count', array('recursive' => -1));\n        $stats['correlation_count'] = $stats['correlation_count'] / 2;\n\n        $stats['proposal_count'] = $this->User->Event->ShadowAttribute->find('count', array('recursive' => -1));\n\n        $stats['user_count'] = $this->User->find('count', array('recursive' => -1));\n        $stats['user_count_pgp'] = $this->User->find('count', array('recursive' => -1, 'conditions' => array('User.gpgkey !=' => '')));\n        $stats['org_count'] = count($orgs);\n        $stats['local_org_count'] = count($local_orgs);\n        $stats['average_user_per_org'] = round($stats['user_count'] / $stats['local_org_count'], 1);\n\n        $this->loadModel('Thread');\n        $stats['thread_count'] = $this->Thread->find('count', array('conditions' => array('Thread.post_count >' => 0), 'recursive' => -1));\n        $stats['thread_count_month'] = $this->Thread->find('count', array('conditions' => array('Thread.date_created >' => date(\"Y-m-d H:i:s\", $this_month), 'Thread.post_count >' => 0), 'recursive' => -1));\n\n        $stats['post_count'] = $this->Thread->Post->find('count', array('recursive' => -1));\n        $stats['post_count_month'] = $this->Thread->Post->find('count', array('conditions' => array('Post.date_created >' => date(\"Y-m-d H:i:s\", $this_month)), 'recursive' => -1));\n\n\n        if ($this->_isRest()) {\n            $data = array(\n                'stats' => $stats\n            );\n            return $this->RestResponse->viewData($data, $this->response->type());\n        } else {\n            $this->set('stats', $stats);\n            $this->set('orgs', $orgs);\n            $this->set('start', strtotime(date('Y-m-d H:i:s') . ' -5 months'));\n            $this->set('end', strtotime(date('Y-m-d H:i:s')));\n            $this->set('startDateCal', $year . ', ' . $month . ', 01');\n            $range = '[5, 10, 50, 100]';\n            $this->set('range', $range);\n            $this->render('statistics_data');\n        }\n    }\n\n    private function __statisticsSightings($params = array())\n    {\n        $this->loadModel('Sighting');\n        $conditions = array('Sighting.org_id' => $this->Auth->user('org_id'));\n        if (isset($params['timestamp'])) {\n            $conditions['Sighting.date_sighting >'] = $params['timestamp'];\n        }\n        $sightings = $this->Sighting->find('all', array(\n            'conditions' => $conditions,\n            'fields' => array('Sighting.date_sighting', 'Sighting.type', 'Sighting.source', 'Sighting.event_id')\n        ));\n        $data = array();\n        $toplist = array();\n        $eventids = array();\n        foreach ($sightings as $k => $v) {\n            if ($v['Sighting']['source'] == '') {\n                $v['Sighting']['source'] = 'Undefined';\n            }\n            $v['Sighting']['type'] = array('sighting', 'false-positive', 'expiration')[$v['Sighting']['type']];\n            if (isset($data[$v['Sighting']['source']][$v['Sighting']['type']])) {\n                $data[$v['Sighting']['source']][$v['Sighting']['type']]++;\n            } else {\n                $data[$v['Sighting']['source']][$v['Sighting']['type']] = 1;\n            }\n            if (!isset($toplist[$v['Sighting']['source']])) {\n                $toplist[$v['Sighting']['source']] = 1;\n            } else {\n                $toplist[$v['Sighting']['source']]++;\n            }\n            if (!isset($eventids[$v['Sighting']['source']][$v['Sighting']['type']])) {\n                $eventids[$v['Sighting']['source']][$v['Sighting']['type']] = array();\n            }\n            if (!in_array($v['Sighting']['event_id'], $eventids[$v['Sighting']['source']][$v['Sighting']['type']])) {\n                $eventids[$v['Sighting']['source']][$v['Sighting']['type']][] = $v['Sighting']['event_id'];\n            }\n        }\n        arsort($toplist);\n        if ($this->_isRest()) {\n            $data = array(\n                'toplist' => $toplist,\n                'eventids' => $eventids\n            );\n            return $this->RestResponse->viewData($data, $this->response->type());\n        } else {\n            $this->set('eventids', $eventids);\n            $this->set('toplist', $toplist);\n            $this->set('data', $data);\n            $this->render('statistics_sightings');\n        }\n    }\n\n    private function __statisticsOrgs($params = array())\n    {\n        $this->loadModel('Organisation');\n        $conditions = array();\n        if (!isset($params['scope']) || $params['scope'] == 'local') {\n            $params['scope'] = 'local';\n            $conditions['Organisation.local'] = 1;\n        } elseif ($params['scope'] == 'external') {\n            $conditions['Organisation.local'] = 0;\n        }\n        $orgs = array();\n        $orgs = $this->Organisation->find('all', array(\n                'recursive' => -1,\n                'conditions' => $conditions,\n                'fields' => array('id', 'name', 'description', 'local', 'contacts', 'type', 'sector', 'nationality'),\n        ));\n        $orgs = Set::combine($orgs, '{n}.Organisation.id', '{n}.Organisation');\n        $users = $this->User->find('all', array(\n            'group' => 'User.org_id',\n            'conditions' => array('User.org_id' => array_keys($orgs)),\n            'recursive' => -1,\n            'fields' => array('org_id', 'count(*)')\n        ));\n        foreach ($users as $user) {\n            $orgs[$user['User']['org_id']]['userCount'] = $user[0]['count(*)'];\n        }\n        unset($users);\n        $events = $this->User->Event->find('all', array(\n            'group' => 'Event.orgc_id',\n            'conditions' => array('Event.orgc_id' => array_keys($orgs)),\n            'recursive' => -1,\n            'fields' => array('Event.orgc_id', 'count(*)')\n        ));\n        foreach ($events as $event) {\n            $orgs[$event['Event']['orgc_id']]['eventCount'] = $event[0]['count(*)'];\n        }\n        unset($events);\n        $orgs = Set::combine($orgs, '{n}.name', '{n}');\n        // f*** php\n        uksort($orgs, 'strcasecmp');\n        foreach ($orgs as $k => $value) {\n            if (file_exists(APP . 'webroot' . DS . 'img' . DS . 'orgs' . DS . $k . '.png')) {\n                $orgs[$k]['logo'] = true;\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($orgs, $this->response->type());\n        } else {\n            $this->set('scope', $params['scope']);\n            $this->set('orgs', $orgs);\n            $this->render('statistics_orgs');\n        }\n    }\n\n    private function __statisticsUsers($params = array())\n    {\n        $this->loadModel('Organisation');\n        $this->loadModel('User');\n        $this_month = strtotime(date('Y/m') . '/01');\n        $this_year = strtotime(date('Y') . '/01/01');\n        $ranges = array(\n            'total' => null,\n            'month' => $this_month,\n            'year' => $this_year\n        );\n        $scopes = array(\n            'user' => array(\n                'conditions' => array(),\n                'model' => 'User',\n                'date_created' => 'timestamp'\n            ),\n            'org_local' => array(\n                'conditions' => array('Organisation.local' => 1),\n                'model' => 'Organisation',\n                'date_created' => 'datetime'\n            ),\n            'org_external' => array(\n                'conditions' => array('Organisation.local' => 0),\n                'model' => 'Organisation',\n                'date_created' => 'datetime'\n            )\n        );\n        $statistics = array();\n        foreach ($scopes as $scope => $scope_data) {\n            foreach ($ranges as $range => $condition) {\n                $params = array(\n                    'recursive' => -1\n                );\n                $filter = array();\n                if (!empty($condition)) {\n                    if ($scope_data['date_created'] === 'datetime') {\n                        $condition = date('Y-m-d H:i:s', $condition);\n                    }\n                    $filter = array($scope_data['model'] . '.date_created >=' => $condition);\n                }\n                $params['conditions'] = array_merge($scopes[$scope]['conditions'], $filter);\n                $statistics[$scope]['data'][$range] = $this->{$scope_data['model']}->find('count', $params);\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($statistics, $this->response->type());\n        } else {\n            $this->set('statistics', $statistics);\n            $this->render('statistics_users');\n        }\n    }\n\n    public function tagStatisticsGraph()\n    {\n        $this->loadModel('EventTag');\n        $tags = $this->EventTag->getSortedTagList();\n        $this->loadModel('Taxonomy');\n        $taxonomies = $this->Taxonomy->find('list', array(\n                'conditions' => array('enabled' => true),\n                'fields' => array('Taxonomy.namespace')\n        ));\n        $flatData = array();\n        $tagIds = $this->EventTag->Tag->find('list', array('fields' => array('Tag.name', 'Tag.id')));\n        $this->set('tagIds', $tagIds);\n        foreach ($tags as $key => $value) {\n            $name = explode(':', $value['name']);\n            $tags[$key]['taxonomy'] = 'custom';\n            if (count($name) > 1) {\n                if (in_array($name[0], $taxonomies)) {\n                    $tags[$key]['taxonomy'] = $name[0];\n                }\n            }\n            $flatData[$tags[$key]['taxonomy']][$value['name']] = array('name' => $value['name'], 'size' => $value['eventCount']);\n        }\n        $treemap = array(\n                'name' => 'tags',\n                'children' => array()\n        );\n\n        foreach ($flatData as $key => $value) {\n            $newElement = array(\n                'name' => $key,\n                'children' => array()\n            );\n            foreach ($value as $tag) {\n                $newElement['children'][] = array('name' => $tag['name'], 'size' => $tag['size']);\n            }\n            $treemap['children'][] = $newElement;\n        }\n        $taxonomyColourCodes = array();\n        $taxonomies = array_merge(array('custom'), $taxonomies);\n        if ($this->_isRest()) {\n            $data = array(\n                'flatData' => $flatData,\n                'treemap' => $treemap\n            );\n            return $this->RestResponse->viewData($data, $this->response->type());\n        } else {\n            $this->set('taxonomyColourCodes', $taxonomyColourCodes);\n            $this->set('taxonomies', $taxonomies);\n            $this->set('flatData', $flatData);\n            $this->set('treemap', $treemap);\n            $this->set('tags', $tags);\n            $this->layout = 'treemap';\n            $this->render('ajax/tag_statistics_graph');\n        }\n    }\n\n    private function __statisticsTags($params = array())\n    {\n        $trending_tags = array();\n        $all_tags = array();\n        if ($this->_isRest()) {\n            return $this->tagStatisticsGraph();\n        } else {\n            $this->render('statistics_tags');\n        }\n    }\n\n    private function __statisticsGalaxyMatrix($params = array())\n    {\n        $this->loadModel('Event');\n        $this->loadModel('Galaxy');\n        $mitre_galaxy_id = $this->Galaxy->getMitreAttackGalaxyId();\n        if (isset($params['galaxy_id'])) {\n            $galaxy_id = $params['galaxy_id'];\n        } else {\n            $galaxy_id = $mitre_galaxy_id;\n        }\n        $organisations = $this->User->Organisation->find('all', array(\n                'recursive' => -1,\n        ));\n        array_unshift($organisations, array('Organisation' => array('id' => 0, 'name' => 'All')));\n        $this->set('organisations', $organisations);\n        $picked_organisation = 0;\n        if (isset($params['organisation']) && $params['organisation'] != 0) {\n            $org = $this->User->Organisation->find('first', array(\n                    'recursive' => -1,\n                    'conditions' => array('id' => $params['organisation']),\n            ));\n            if (!empty($org)) {\n                $picked_organisation = $org;\n                $this->set('picked_organisation', $picked_organisation);\n            } else {\n                $this->set('picked_organisation', array('Organisation' => array('id' => '')));\n            }\n        } else {\n            $this->set('picked_organisation', array('Organisation' => array('id' => '')));\n        }\n\n        $rest_response_empty = true;\n        $ignore_score = false;\n        if (\n            isset($params['dateFrom'])\n            || isset($params['dateTo'])\n            || isset($params['organisation']) && $params['organisation'] != 0\n        ) { // use restSearch\n            $ignore_score = true;\n            $filters = array();\n            if (isset($params['dateFrom'])) {\n                $filters['from'] = $params['dateFrom'];\n                $this->set('dateFrom', $params['dateFrom']);\n            }\n            if (isset($params['dateTo'])) {\n                $filters['to'] = $params['dateTo'];\n                $this->set('dateTo', $params['dateTo']);\n            }\n            if (isset($params['organisation'])) {\n                $filters['org'] = $params['organisation'];\n            }\n            $elementCounter = 0;\n            $renderView = '';\n            $final = $this->Event->restSearch($this->Auth->user(), 'attack', $filters, false, false, $elementCounter, $renderView);\n\n            $final = json_decode($final, true);\n            if (!empty($final)) {\n                $rest_response_empty = false;\n                foreach ($final as $key => $data) {\n                    $this->set($key, $data);\n                }\n            }\n        }\n\n        // No need for restSearch or result is empty\n        if ($rest_response_empty) {\n            $matrixData = $this->Galaxy->getMatrix($galaxy_id);\n            $tabs = $matrixData['tabs'];\n            $matrixTags = $matrixData['matrixTags'];\n            $killChainOrders = $matrixData['killChain'];\n            $instanceUUID = $matrixData['instance-uuid'];\n            if ($ignore_score) {\n                $scores_uniform = array('scores' => array(), 'maxScore' => 0);\n            } else {\n                $scores_uniform = $this->Event->EventTag->getTagScoresUniform(0, $matrixTags);\n            }\n            $scores = $scores_uniform['scores'];\n            $maxScore = $scores_uniform['maxScore'];\n            // FIXME: temporary fix: add the score of deprecated mitre galaxies to the new one (for the stats)\n            if ($matrixData['galaxy']['id'] == $mitre_galaxy_id) {\n                $mergedScore = array();\n                foreach ($scores as $tag => $v) {\n                    $predicateValue = explode(':', $tag, 2)[1];\n                    $predicateValue = explode('=', $predicateValue, 2);\n                    $predicate = $predicateValue[0];\n                    $clusterValue = $predicateValue[1];\n                    $mappedTag = '';\n                    $mappingWithoutExternalId = array();\n                    if ($predicate == 'mitre-attack-pattern') {\n                        $mappedTag = $tag;\n                        $name = explode(\" \", $tag);\n                        $name = join(\" \", array_slice($name, 0, -2)); // remove \" - external_id\"\n                        $mappingWithoutExternalId[$name] = $tag;\n                    } else {\n                        $name = explode(\" \", $clusterValue);\n                        $name = join(\" \", array_slice($name, 0, -2)); // remove \" - external_id\"\n                        if (isset($mappingWithoutExternalId[$name])) {\n                            $mappedTag = $mappingWithoutExternalId[$name];\n                        } else {\n                            $adjustedTagName = $this->Galaxy->GalaxyCluster->find('list', array(\n                                'group' => array('GalaxyCluster.id', 'GalaxyCluster.tag_name'),\n                                'conditions' => array('GalaxyCluster.tag_name LIKE' => 'misp-galaxy:mitre-attack-pattern=' . $name . '% T%'),\n                                'fields' => array('GalaxyCluster.tag_name')\n                            ));\n                            if (!empty($adjustedTagName)) {\n                                $adjustedTagName = array_values($adjustedTagName)[0];\n                                $mappingWithoutExternalId[$name] = $adjustedTagName;\n                                $mappedTag = $mappingWithoutExternalId[$name];\n                            }\n                        }\n                    }\n                    if (isset($mergedScore[$mappedTag])) {\n                        $mergedScore[$mappedTag] += $v;\n                    } else {\n                        $mergedScore[$mappedTag] = $v;\n                    }\n                }\n                $scores = $mergedScore;\n                $maxScore = !empty($mergedScore) ? max(array_values($mergedScore)) : 0;\n            }\n            // end FIXME\n\n            $this->Galaxy->sortMatrixByScore($tabs, $scores);\n            if ($this->_isRest()) {\n                $json = array('matrix' => $tabs, 'scores' => $scores, 'instance-uuid' => $instanceUUID);\n                return $this->RestResponse->viewData($json, $this->response->type());\n            } else {\n                App::uses('ColourGradientTool', 'Tools');\n                $gradientTool = new ColourGradientTool();\n                $colours = $gradientTool->createGradientFromValues($scores);\n\n                $this->set('target_type', 'attribute');\n                $this->set('columnOrders', $killChainOrders);\n                $this->set('tabs', $tabs);\n                $this->set('scores', $scores);\n                $this->set('maxScore', $maxScore);\n                if (!empty($colours)) {\n                    $this->set('colours', $colours['mapping']);\n                    $this->set('interpolation', $colours['interpolation']);\n                }\n                $this->set('pickingMode', false);\n                if ($matrixData['galaxy']['id'] == $mitre_galaxy_id) {\n                    $this->set('defaultTabName', \"mitre-attack\");\n                    $this->set('removeTrailling', 2);\n                }\n\n                $this->set('galaxyName', $matrixData['galaxy']['name']);\n                $this->set('galaxyId', $matrixData['galaxy']['id']);\n                $matrixGalaxies = $this->Galaxy->getAllowedMatrixGalaxies();\n                $this->set('matrixGalaxies', $matrixGalaxies);\n            }\n        }\n        $this->render('statistics_galaxymatrix');\n    }\n\n    public function verifyGPG($full = false)\n    {\n        if (!self::_isSiteAdmin()) {\n            throw new NotFoundException();\n        }\n        $user_results = $this->User->verifyGPG($full);\n        $this->set('users', $user_results);\n    }\n\n    public function verifyCertificate()\n    {\n        $user_results = $this->User->verifyCertificate();\n        $this->set('users', $user_results);\n    }\n\n    // Refreshes the Auth session with new/updated data\n    protected function _refreshAuth()\n    {\n        $oldUser = $this->Auth->user();\n        $newUser = $this->User->find('first', array('conditions' => array('User.id' => $oldUser['id']), 'recursive' => -1,'contain' => array('Organisation', 'Role')));\n        // Rearrange it a bit to match the Auth object created during the login\n        $newUser['User']['Role'] = $newUser['Role'];\n        $newUser['User']['Organisation'] = $newUser['Organisation'];\n        unset($newUser['Organisation'], $newUser['Role']);\n        $this->Auth->login($newUser['User']);\n    }\n\n    public function fetchPGPKey($email = false)\n    {\n        if ($email == false) {\n            throw new NotFoundException('No email provided.');\n        }\n        $keys = $this->User->fetchPGPKey($email);\n        if (is_numeric($keys)) {\n            throw new NotFoundException('Could not retrieved any keys from the key server.');\n        }\n        $this->set('keys', $keys);\n        $this->autorender = false;\n        $this->layout = false;\n        $this->render('ajax/fetchpgpkey');\n    }\n\n    public function dashboard()\n    {\n        $events = array();\n        // the last login in the session is not updated after the login - only in the db, so let's fetch it.\n        $lastLogin = $this->Auth->user('last_login');\n        $this->loadModel('Event');\n        $events['changed'] = count($this->Event->fetchEventIds($this->Auth->user(), false, false, false, true, $lastLogin));\n        $events['published'] = count($this->Event->fetchEventIds($this->Auth->user(), false, false, false, true, false, $lastLogin));\n        $notifications = $this->{$this->modelClass}->populateNotifications($this->Auth->user());\n        $this->set('notifications', $notifications);\n        $this->set('events', $events);\n    }\n\n    public function checkIfLoggedIn()\n    {\n        return new CakeResponse(array('body'=> 'OK','status' => 200));\n    }\n}\n", "<?php\n\nApp::uses('AppModel', 'Model');\n\nclass Log extends AppModel\n{\n    public $warningActions = array(\n        'warning',\n        'change_pw',\n        'login_fail',\n        'version_warning',\n        'auth_fail'\n    );\n    public $errorActions = array(\n        'error'\n    );\n    public $validate = array(\n            'action' => array(\n            'rule' => array('inList', array(\n                            'accept',\n                            'accept_delegation',\n                            'add',\n                            'admin_email',\n                            'auth',\n                            'auth_fail',\n                            'blacklisted',\n                            'change_pw',\n                            'delete',\n                            'disable',\n                            'discard',\n                            'edit',\n                            'email',\n                            'enable',\n                            'error',\n                            'export',\n                            'file_upload',\n                            'galaxy',\n                            'login',\n                            'login_fail',\n                            'logout',\n                            'merge',\n                            'pruneUpdateLogs',\n                            'publish',\n                            'publish alert',\n                            'pull',\n                            'push',\n                            'remove_dead_workers',\n                            'request',\n                            'request_delegation',\n                            'reset_auth_key',\n                            'serverSettingsEdit',\n                            'tag',\n                            'undelete',\n                            'update',\n                            'update_database',\n                            'upgrade_24',\n                            'upload_sample',\n                            'version_warning',\n                            'warning'\n                        )),\n            'message' => 'Options : ...'\n        )\n    );\n\n    public $actionDefinitions = array(\n        'login' => array('desc' => 'Login action', 'formdesc' => \"Login action\"),\n        'logout' => array('desc' => 'Logout action', 'formdesc' => \"Logout action\"),\n        'add' => array('desc' => 'Add action', 'formdesc' => \"Add action\"),\n        'edit' => array('desc' => 'Edit action', 'formdesc' => \"Edit action\"),\n        'change_pw' => array('desc' => 'Change_pw action', 'formdesc' => \"Change_pw action\"),\n        'delete' => array('desc' => 'Delete action', 'formdesc' => \"Delete action\"),\n        'publish' => array('desc' => \"Publish action\", 'formdesc' => \"Publish action\")\n    );\n\n    public $logMeta = array(\n        'email' => array('values' => array('email'), 'name' => 'Emails'),\n        'auth_issues' => array('values' => array('login_fail', 'auth_fail'), 'name' => 'Authentication issues')\n    );\n\n    public $logMetaAdmin = array(\n        'update' => array('values' => array('update_database'), 'name' => 'MISP Update results'),\n        'settings' => array('values' => array('serverSettingsEdit', 'remove_dead_workers'), 'name' => 'Setting changes'),\n        'errors' => array('values' => array('warning', 'errors', 'version_warning'), 'name' => 'Warnings and errors'),\n        'email' => array('values' => array('admin_email'))\n    );\n\n    public function beforeValidete()\n    {\n        parent::beforeValidate();\n        if (!isset($this->data['Log']['org']) || empty($this->data['Log']['org'])) {\n            $this->data['Log']['org'] = 'SYSTEM';\n        }\n        // truncate the description if it would exceed the allowed size in mysql\n        if (!empty($this->data['Log']['description'] && strlen($this->data['Log']['description']) > 65536)) {\n            $this->data['Log']['description'] = substr($this->data['Log']['description'], 0, 65535);\n        }\n    }\n\n    public function beforeSave($options = array())\n    {\n        if (!empty(Configure::read('MISP.log_skip_db_logs_completely'))) {\n            return false;\n        }\n        if (Configure::read('MISP.log_client_ip') && isset($_SERVER['REMOTE_ADDR'])) {\n            $this->data['Log']['ip'] = $_SERVER['REMOTE_ADDR'];\n        }\n        $setEmpty = array('title' => '', 'model' => '', 'model_id' => 0, 'action' => '', 'user_id' => 0, 'change' => '', 'email' => '', 'org' => '', 'description' => '');\n        foreach ($setEmpty as $field => $empty) {\n            if (!isset($this->data['Log'][$field]) || empty($this->data['Log'][$field])) {\n                $this->data['Log'][$field] = $empty;\n            }\n        }\n        if (!isset($this->data['Log']['created'])) {\n            $this->data['Log']['created'] = date('Y-m-d H:i:s');\n        }\n        if (!isset($this->data['Log']['org'])) {\n            $this->data['Log']['org'] = 'SYSTEM';\n        }\n        $truncate_fields = array('title', 'change', 'description');\n        foreach ($truncate_fields as $tf) {\n            if (isset($this->data['Log'][$tf]) && strlen($this->data['Log'][$tf]) >= 65535) {\n                $this->data['Log'][$tf] = substr($this->data['Log'][$tf], 0, 65532) . '...';\n            }\n        }\n        $this->logData($this->data);\n        if ($this->data['Log']['action'] === 'request' && !empty(Configure::read('MISP.log_paranoid_skip_db'))) {\n            return false;\n        }\n        return true;\n    }\n\n    public function returnDates($org = 'all')\n    {\n        $dataSourceConfig = ConnectionManager::getDataSource('default')->config;\n        $dataSource = $dataSourceConfig['datasource'];\n        $conditions = array();\n        $this->Organisation = ClassRegistry::init('Organisation');\n        if ($org !== 'all') {\n            $org = $this->Organisation->find('first', array('fields' => array('name'), 'recursive' => -1, 'conditions' => array('UPPER(Organisation.name) LIKE' => strtoupper($org))));\n            if (empty($org)) {\n                return MethodNotAllowedException('Invalid organisation.');\n            }\n            $conditions['org'] = $org['Organisation']['name'];\n        }\n        $conditions['AND']['NOT'] = array('action' => array('login', 'logout', 'changepw'));\n        if ($dataSource == 'Database/Mysql') {\n            $validDates = $this->find('all', array(\n                    'fields' => array('DISTINCT UNIX_TIMESTAMP(DATE(created)) AS Date', 'count(id) AS count'),\n                    'conditions' => $conditions,\n                    'group' => array('Date'),\n                    'order' => array('Date')\n            ));\n        } elseif ($dataSource == 'Database/Postgres') {\n            // manually generate the query for Postgres\n            // cakephp ORM would escape \"DATE\" datatype in CAST expression\n            $condnotinaction = \"'\" . implode(\"', '\", $conditions['AND']['NOT']['action']) . \"'\";\n            if (!empty($conditions['org'])) {\n                $condOrg = ' AND org = \"' . $conditions['org'] . '\"';\n            } else {\n                $condOrg = '';\n            }\n            $sql = 'SELECT DISTINCT EXTRACT(EPOCH FROM CAST(created AS DATE)) AS \"Date\",\n                                    COUNT(id) AS count\n                    FROM logs\n                    WHERE action NOT IN (' . $condnotinaction . ')\n                    ' . $condOrg . '\n                    GROUP BY \"Date\" ORDER BY \"Date\"';\n            $validDates = $this->query($sql);\n        }\n        $data = array();\n        foreach ($validDates as $k => $date) {\n            $data[$date[0]['Date']] = intval($date[0]['count']);\n        }\n        return $data;\n    }\n\n    public function createLogEntry($user = array('Organisation' => array('name' => 'SYSTEM'), 'email' => 'SYSTEM', 'id' => 0), $action, $model, $model_id = 0, $title = '', $change = '')\n    {\n        $this->create();\n        $this->save(array(\n                'org' => $user['Organisation']['name'],\n                'email' =>$user['email'],\n                'user_id' => $user['id'],\n                'action' => $action,\n                'title' => $title,\n                'change' => $change,\n                'model' => $model,\n                'model_id' => $model_id,\n        ));\n    }\n\n    // to combat a certain bug that causes the upgrade scripts to loop without being able to set the correct version\n    // this function remedies a fixed upgrade bug instance by eliminating the massive number of erroneous upgrade log entries\n    public function pruneUpdateLogs($jobId = false, $user)\n    {\n        $max = $this->find('first', array('fields' => array('MAX(id) AS lastid')));\n        if (!empty($max)) {\n            $max = $max[0]['lastid'];\n        }\n        if ($jobId) {\n            $this->Job = ClassRegistry::init('Job');\n            $this->Job->id = $jobId;\n            if (!$this->Job->exists()) {\n                $jobId = false;\n            }\n        }\n        $iterations = ($max / 1000);\n        for ($i = 0; $i < $iterations; $i++) {\n            $this->deleteAll(array(\n                'OR' => array(\n                        'action' => 'update_database',\n                        'AND' => array(\n                            'action' => 'edit',\n                            'model' => 'AdminSetting'\n                        )\n                ),\n                'id >' => $i * 1000,\n                'id <' => ($i+1) * 1000));\n            if ($jobId) {\n                $this->Job->saveField('progress', $i * 100 / $iterations);\n            }\n        }\n        $this->create();\n        $this->save(array(\n                'org' => $user['Organisation']['name'],\n                'email' =>$user['email'],\n                'user_id' => $user['id'],\n                'action' => 'pruneUpdateLogs',\n                'title' => 'Pruning updates',\n                'change' => 'Pruning completed in ' . $i . ' iteration(s).',\n                'model' => 'Log',\n                'model_id' => 0\n        ));\n    }\n\n\n    public function pruneUpdateLogsRouter($user)\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            $job = ClassRegistry::init('Job');\n            $job->create();\n            $data = array(\n                    'worker' => 'default',\n                    'job_type' => 'prune_update_logs',\n                    'job_input' => 'All update entries',\n                    'status' => 0,\n                    'retries' => 0,\n                    'org_id' => $user['org_id'],\n                    'org' => $user['Organisation']['name'],\n                    'message' => 'Purging the heretic.',\n            );\n            $job->save($data);\n            $jobId = $job->id;\n            $process_id = CakeResque::enqueue(\n                    'default',\n                    'AdminShell',\n                    array('prune_update_logs', $jobId, $user['id']),\n                    true\n            );\n            $job->saveField('process_id', $process_id);\n            return $process_id;\n        } else {\n            $result = $this->pruneUpdateLogs(false, $user);\n            return $result;\n        }\n    }\n\n    public function logData($data)\n    {\n        if (Configure::read('Plugin.ZeroMQ_enable') && Configure::read('Plugin.ZeroMQ_audit_notifications_enable')) {\n            $pubSubTool = $this->getPubSubTool();\n            $pubSubTool->publish($data, 'audit', 'log');\n        }\n\n        $this->publishKafkaNotification('audit', $data, 'log');\n\n        if (Configure::read('Plugin.ElasticSearch_logging_enable')) {\n            // send off our logs to distributed /dev/null\n            $logIndex = Configure::read(\"Plugin.ElasticSearch_log_index\");\n            $elasticSearchClient = $this->getElasticSearchTool();\n            $elasticSearchClient->pushDocument($logIndex, \"log\", $data);\n        }\n\n        if (Configure::read('Security.syslog')) {\n            // write to syslogd as well\n            $syslog = new SysLog();\n            $action = 'info';\n            if (isset($data['Log']['action'])) {\n                if (in_array($data['Log']['action'], $this->errorActions)) {\n                    $action = 'err';\n                }\n                if (in_array($data['Log']['action'], $this->warningActions)) {\n                    $action = 'warning';\n                }\n            }\n\n            $entry = $data['Log']['action'];\n            if (!empty($data['Log']['description'])) {\n                $entry .= sprintf(' -- %s', $data['Log']['description']);\n            }\n            $syslog->write($action, $entry);\n        }\n        return true;\n    }\n\n    public function filterSiteAdminSensitiveLogs($list)\n    {\n        $this->User = ClassRegistry::init('User');\n        $site_admin_roles = $this->User->Role->find('list', array(\n            'recursive' => -1,\n            'conditions' => array('Role.perm_site_admin' => 1),\n            'fields' => array('Role.id', 'Role.id')\n        ));\n        $site_admins = $this->User->find('list', array(\n            'recursive' => -1,\n            'conditions' => array(\n                'User.role_id' => array_values($site_admin_roles)\n            ),\n            'fields' => array('User.id', 'User.id')\n        ));\n        foreach ($list as $k => $v) {\n            if (\n                $v['Log']['model'] === 'User' &&\n                in_array($v['Log']['model_id'], array_values($site_admins)) &&\n                in_array($v['Log']['action'], array('add', 'edit', 'reset_auth_key'))\n            ) {\n                $list[$k]['Log']['change'] = __('Redacted');\n            }\n        }\n        return $list;\n    }\n}\n", "<?php\nApp::uses('AppModel', 'Model');\n\nclass Server extends AppModel\n{\n    public $name = 'Server';\n\n    public $actsAs = array('SysLogLogable.SysLogLogable' => array(\n            'userModel' => 'User',\n            'userKey' => 'user_id',\n            'change' => 'full'\n        ),\n        'Trim',\n        'Containable'\n    );\n\n    public $belongsTo = array(\n        'Organisation' => array(\n            'className' => 'Organisation',\n            'foreignKey' => 'org_id',\n        ),\n        'RemoteOrg' => array(\n            'className' => 'Organisation',\n            'foreignKey' => 'remote_org_id',\n        )\n    );\n\n    public $hasMany = array(\n        'SharingGroupServer' => array(\n            'className' => 'SharingGroupServer',\n            'foreignKey' => 'server_id',\n            'dependent'=> true,\n        ),\n        'User' => array(\n            'className' => 'User',\n            'foreignKey' => 'server_id',\n        ),\n    );\n\n    public $displayField = 'url';\n\n    public $validate = array(\n        'url' => array(\n            'url' => array(\n                'rule' => array('url'),\n                'message' => 'Please enter a valid base-url.'\n            )\n        ),\n        'authkey' => array(\n            'rule' => array('validateAuthkey')\n        ),\n        'name' => array(\n            'rule' => array('notBlank'),\n            'allowEmpty' => false,\n            'required' => true\n        ),\n        'org_id' => array(\n            'numeric' => array(\n                'rule' => array('valueIsID'),\n                'allowEmpty' => false,\n                'required' => true,\n            ),\n        ),\n        'push' => array(\n            'boolean' => array(\n                'rule' => array('boolean'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'pull' => array(\n            'boolean' => array(\n                'rule' => array('boolean'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                //'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'lastpushedid' => array(\n            'numeric' => array(\n                'rule' => array('numeric'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'lastpulledid' => array(\n            'numeric' => array(\n                'rule' => array('numeric'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n    );\n\n    public function __construct($id = false, $table = null, $ds = null)\n    {\n        parent::__construct($id, $table, $ds);\n\n        $this->command_line_functions = array(\n            'console_admin_tasks' => array(\n                'data' => array(\n                    'Get setting' => 'MISP/app/Console/cake Admin getSetting [setting]',\n                    'Set setting' => 'MISP/app/Console/cake Admin setSetting [setting] [value]',\n                    'Get authkey' => 'MISP/app/Console/cake Admin getAuthkey [email]',\n                    'Set baseurl' => 'MISP/app/Console/cake Baseurl [baseurl]',\n                    'Change password' => 'MISP/app/Console/cake Password [email] [new_password] [--override_password_change]',\n                    'Clear Bruteforce Entries' => 'MISP/app/Console/cake Admin clearBruteforce [user_email]',\n                    'Run database update' => 'MISP/app/Console/cake Admin updateDatabase',\n                    'Update all JSON structures' => 'MISP/app/Console/cake Admin updateJSON',\n                    'Update Galaxy definitions' => 'MISP/app/Console/cake Admin updateGalaxies',\n                    'Update taxonomy definitions' => 'MISP/app/Console/cake Admin updateTaxonomies',\n                    'Update object templates' => 'MISP/app/Console/cake Admin updateObjectTemplates',\n                    'Update Warninglists' => 'MISP/app/Console/cake Admin updateWarningLists',\n                    'Update Noticelists' => 'MISP/app/Console/cake Admin updateNoticeLists',\n                    'Set default role' => 'MISP/app/Console/cake Admin setDefaultRole [role_id]'\n                ),\n                'description' => __('Certain administrative tasks are exposed to the API, these help with maintaining and configuring MISP in an automated way / via external tools.'),\n                'header' => __('Administering MISP via the CLI')\n            ),\n            'console_automation_tasks' => array(\n                'data' => array(\n                    'Pull' => 'MISP/app/Console/cake Server pull [user_id] [server_id] [full|update]',\n                    'Push' => 'MISP/app/Console/cake Server push [user_id] [server_id]',\n                    'Cache feeds for quick lookups' => 'MISP/app/Console/cake Server cacheFeed [user_id] [feed_id|all|csv|text|misp]',\n                    'Fetch feeds as local data' => 'MISP/app/Console/cake Server fetchFeed [user_id] [feed_id|all|csv|text|misp]',\n                    'Run enrichment' => 'MISP/app/Console/cake Event enrichEvent [user_id] [event_id] [json_encoded_module_list]'\n                ),\n                'description' => __('If you would like to automate tasks such as caching feeds or pulling from server instances, you can do it using the following command line tools. Simply execute the given commands via the command line / create cron jobs easily out of them.'),\n                'header' => __('Automating certain console tasks')\n            ),\n            'worker_management_tasks' => array(\n                'data' => array(\n                    'Get list of workers' => 'MISP/app/Console/cake Admin getWorkers [all|dead]',\n                    'Start a worker' => 'MISP/app/Console/cake Admin startWorker [queue_name]',\n                    'Restart a worker' => 'MISP/app/Console/cake Admin restartWorker [worker_pid]',\n                    'Kill a worker' => 'MISP/app/Console/cake Admin killWorker [worker_pid]',\n                ),\n                'description' => __('The background workers can be managed via the CLI in addition to the UI / API management tools'),\n                'header' => __('Managing the background workers')\n            )\n        );\n\n        $this->serverSettings = array(\n                'MISP' => array(\n                        'branch' => 1,\n                        'baseurl' => array(\n                                'level' => 0,\n                                'description' => __('The base url of the application (in the format https://www.mymispinstance.com). Several features depend on this setting being correctly set to function.'),\n                                'value' => '',\n                                'errorMessage' => __('The currenty set baseurl does not match the URL through which you have accessed the page. Disregard this if you are accessing the page via an alternate URL (for example via IP address).'),\n                                'test' => 'testBaseURL',\n                                'type' => 'string',\n                        ),\n                        'external_baseurl' => array(\n                                'level' => 0,\n                                'description' => __('The base url of the application (in the format https://www.mymispinstance.com) as visible externally/by other MISPs. MISP will encode this URL in sharing groups when including itself. If this value is not set, the baseurl is used as a fallback.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testURL',\n                                'type' => 'string',\n                        ),\n                        'live' => array(\n                                'level' => 0,\n                                'description' => __('Unless set to true, the instance will only be accessible by site admins.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testLive',\n                                'type' => 'boolean',\n                        ),\n                        'language' => array(\n                                'level' => 0,\n                                'description' => __('Select the language MISP should use. The default is english.'),\n                                'value' => 'eng',\n                                'errorMessage' => '',\n                                'test' => 'testLanguage',\n                                'type' => 'string',\n                                'optionsSource' => 'AvailableLanguages',\n                                'afterHook' => 'cleanCacheFiles'\n                        ),\n                        'enable_advanced_correlations' => array(\n                                'level' => 0,\n                                'description' => __('Enable some performance heavy correlations (currently CIDR correlation)'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'server_settings_skip_backup_rotate' => array(\n                            'level' => 1,\n                            'description' => __('Enable this setting to directly save the config.php file without first creating a temporary file and moving it to avoid concurency issues. Generally not recommended, but useful when for example other tools modify/maintain the config.php file.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'python_bin' => array(\n                                'level' => 1,\n                                'description' => __('It is highly recommended to install all the python dependencies in a virtualenv. The recommended location is: %s/venv', ROOT),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'null' => false,\n                                'test' => 'testForBinExec',\n                                'beforeHook' => 'beforeHookBinExec',\n                                'type' => 'string',\n                                'cli_only' => 1\n                        ),\n                        'disable_auto_logout' => array(\n                                'level' => 1,\n                                'description' => __('In some cases, a heavily used MISP instance can generate unwanted blackhole errors due to a high number of requests hitting the server. Disable the auto logout functionality to ease the burden on the system.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'ssdeep_correlation_threshold' => array(\n                            'level' => 1,\n                            'description' => __('Set the ssdeep score at which to consider two ssdeep hashes as correlating [1-100]'),\n                            'value' => 40,\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'numeric'\n                        ),\n                        'max_correlations_per_event' => array(\n                                'level' => 1,\n                                'description' => __('Sets the maximum number of correlations that can be fetched with a single event. For extreme edge cases this can prevent memory issues. The default value is 5k.'),\n                                'value' => 5000,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => true\n                        ),\n                        'maintenance_message' => array(\n                                'level' => 2,\n                                'description' => __('The message that users will see if the instance is not live.'),\n                                'value' => 'Great things are happening! MISP is undergoing maintenance, but will return shortly. You can contact the administration at $email.',\n                                'errorMessage' => __('If this is not set the default value will be used.'),\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'name' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'version' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'disable_cached_exports' => array(\n                                'level' => 1,\n                                'description' => __('Cached exports can take up a considerable amount of space and can be disabled instance wide using this setting. Disabling the cached exports is not recommended as it\\'s a valuable feature, however, if your server is having free space issues it might make sense to take this step.'),\n                                'value' => false,\n                                'null' => true,\n                                'errorMessage' => '',\n                                'test' => 'testDisableCache',\n                                'type' => 'boolean',\n                                'afterHook' => 'disableCacheAfterHook',\n                        ),\n                        'disable_threat_level' => array(\n                                'level' => 1,\n                                'description' => __('Disable displaying / modifications to the threat level altogether on the instance (deprecated field).'),\n                                'value' => false,\n                                'null' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'header' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footermidleft' => array(\n                                'level' => 2,\n                                'description' => __('Footer text prepending the \"Powered by MISP\" text.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footermidright' => array(\n                                'level' => 2,\n                                'description' => __('Footer text following the \"Powered by MISP\" text.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footerpart1' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footerpart2' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footer' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footerversion' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footer_logo' => array(\n                                'level' => 2 ,\n                                'description' => __('If set, this setting allows you to display a logo on the right side of the footer. Upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'home_logo' => array(\n                                'level' => 2 ,\n                                'description' => __('If set, this setting allows you to display a logo as the home icon. Upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'main_logo' => array(\n                                'level' => 2 ,\n                                'description' => __('If set, the image specified here will replace the main MISP logo on the login screen. Upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'org' => array(\n                                'level' => 1,\n                                'description' => __('The organisation tag of the hosting organisation. This is used in the e-mail subjects.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'host_org_id' => array(\n                                'level' => 0,\n                                'description' => __('The hosting organisation of this instance. If this is not selected then replication instances cannot be added.'),\n                                'value' => '0',\n                                'errorMessage' => '',\n                                'test' => 'testLocalOrg',\n                                'type' => 'numeric',\n                                'optionsSource' => 'LocalOrgs',\n                        ),\n                        'uuid' => array(\n                                'level' => 0,\n                                'description' => __('The MISP instance UUID. This UUID is used to identify this instance.'),\n                                'value' => '0',\n                                'errorMessage' => __('No valid UUID set'),\n                                'test' => 'testUuid',\n                                'type' => 'string'\n                        ),\n                        'logo' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'showorg' => array(\n                                'level' => 0,\n                                'description' => __('Setting this setting to \\'false\\' will hide all organisation names / logos.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'threatlevel_in_email_subject' => array(\n                                'level' => 2,\n                                'description' => __('Put the event threat level in the notification E-mail subject.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                            ),\n                        'email_subject_TLP_string' => array(\n                                'level' => 2,\n                                'description' => __('This is the TLP string for e-mails when email_subject_tag is not found.'),\n                                'value' => 'TLP Amber',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                            ),\n                        'email_subject_tag' => array(\n                                'level' => 2,\n                                'description' => __('If this tag is set on an event it\\'s value will be sent in the E-mail subject. If the tag is not set the email_subject_TLP_string will be used.'),\n                                'value' => 'tlp',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                            ),\n                        'email_subject_include_tag_name' => array(\n                                'level' => 2,\n                                'description' => __('Include in name of the email_subject_tag in the subject. When false only the tag value is used.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                            ),\n                        'taxii_sync' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'taxii_client_path' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'background_jobs' => array(\n                                'level' => 1,\n                                'description' => __('Enables the use of MISP\\'s background processing.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'attachments_dir' => array(\n                                'level' => 2,\n                                'description' => __('Directory where attachments are stored. MISP will NOT migrate the existing data if you change this setting. The only safe way to change this setting is in config.php, when MISP is not running, and after having moved/copied the existing data to the new location. This directory must already exist and be writable and readable by the MISP application.'),\n                                'value' =>  APP . '/files', # GUI display purpose only.\n                                'errorMessage' => '',\n                                'null' => false,\n                                'test' => 'testForWritableDir',\n                                'type' => 'string',\n                                'cli_only' => 1\n                        ),\n                        'cached_attachments' => array(\n                                'level' => 1,\n                                'description' => __('Allow the XML caches to include the encoded attachments.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'download_attachments_on_load' => array(\n                            'level' => 2,\n                            'description' => __('Always download attachments when loaded by a user in a browser'),\n                            'value' => true,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                        ),\n                        'email' => array(\n                                'level' => 0,\n                                'description' => __('The e-mail address that MISP should use for all notifications'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'disable_emailing' => array(\n                                'level' => 0,\n                                'description' => __('You can disable all e-mailing using this setting. When enabled, no outgoing e-mails will be sent by MISP.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'null' => true,\n                                'test' => 'testDisableEmail',\n                                'type' => 'boolean',\n                        ),\n                        'contact' => array(\n                                'level' => 1,\n                                'description' => __('The e-mail address that MISP should include as a contact address for the instance\\'s support team.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'dns' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'cveurl' => array(\n                                'level' => 1,\n                                'description' => __('Turn Vulnerability type attributes into links linking to the provided CVE lookup'),\n                                'value' => 'http://cve.circl.lu/cve/',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'cweurl' => array(\n                                'level' => 1,\n                                'description' => __('Turn Weakness type attributes into links linking to the provided CWE lookup'),\n                                'value' => 'http://cve.circl.lu/cwe/',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'disablerestalert' => array(\n                                'level' => 1,\n                                'description' => __('This setting controls whether notification e-mails will be sent when an event is created via the REST interface. It might be a good idea to disable this setting when first setting up a link to another instance to avoid spamming your users during the initial pull. Quick recap: True = Emails are NOT sent, False = Emails are sent on events published via sync / REST.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'extended_alert_subject' => array(\n                                'level' => 1,\n                                'description' => __('enabling this flag will allow the event description to be transmitted in the alert e-mail\\'s subject. Be aware that this is not encrypted by GnuPG, so only enable it if you accept that part of the event description will be sent out in clear-text.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'default_event_distribution' => array(\n                                'level' => 0,\n                                'description' => __('The default distribution setting for events (0-3).'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'options' => array('0' => 'Your organisation only', '1' => 'This community only', '2' => 'Connected communities', '3' => 'All communities'),\n                        ),\n                        'default_attribute_distribution' => array(\n                                'level' => 0,\n                                'description' => __('The default distribution setting for attributes, set it to \\'event\\' if you would like the attributes to default to the event distribution level. (0-3 or \"event\")'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'options' => array('0' => 'Your organisation only', '1' => 'This community only', '2' => 'Connected communities', '3' => 'All communities', 'event' => 'Inherit from event'),\n                        ),\n                        'default_event_threat_level' => array(\n                                'level' => 1,\n                                'description' => __('The default threat level setting when creating events.'),\n                                'value' => 4,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'options' => array('1' => 'High', '2' => 'Medium', '3' => 'Low', '4' => 'undefined'),\n                        ),\n                        'default_event_tag_collection' => array(\n                            'level' => 0,\n                            'description' => __('The tag collection to be applied to all events created manually.'),\n                            'value' => 0,\n                            'errorMessage' => '',\n                            'test' => 'testTagCollections',\n                            'type' => 'numeric',\n                            'optionsSource' => 'TagCollections',\n                        ),\n                        'tagging' => array(\n                                'level' => 1,\n                                'description' => __('Enable the tagging feature of MISP. This is highly recommended.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'full_tags_on_event_index' => array(\n                                'level' => 2,\n                                'description' => __('Show the full tag names on the event index.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'options' => array(0 => 'Minimal tags', 1 => 'Full tags', 2 => 'Shortened tags'),\n                        ),\n                        'welcome_text_top' => array(\n                                'level' => 2,\n                                'description' => __('Used on the login page, before the MISP logo'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'welcome_text_bottom' => array(\n                                'level' => 2,\n                                'description' => __('Used on the login page, after the MISP logo'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'welcome_logo' => array(\n                                'level' => 2,\n                                'description' => __('Used on the login page, to the left of the MISP logo, upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'welcome_logo2' => array(\n                                'level' => 2,\n                                'description' => __('Used on the login page, to the right of the MISP logo, upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'title_text' => array(\n                            'level' => 2,\n                            'description' => __('Used in the page title, after the name of the page'),\n                            'value' => 'MISP',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'take_ownership_xml_import' => array(\n                                'level' => 2,\n                                'description' => __('Allows users to take ownership of an event uploaded via the \"Add MISP XML\" button. This allows spoofing the creator of a manually imported event, also breaking possibly breaking the original intended releasability. Synchronising with an instance that has a different creator for the same event can lead to unwanted consequences.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'terms_download' => array(\n                                'level' => 2,\n                                'description' => __('Choose whether the terms and conditions should be displayed inline (false) or offered as a download (true)'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'terms_file' => array(\n                                'level' => 2,\n                                'description' => __('The filename of the terms and conditions file. Make sure that the file is located in your MISP/app/files/terms directory'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForTermsFile',\n                                'type' => 'string'\n                        ),\n                        'showorgalternate' => array(\n                                'level' => 2,\n                                'description' => __('True enables the alternate org fields for the event index (source org and member org) instead of the traditional way of showing only an org field. This allows users to see if an event was uploaded by a member organisation on their MISP instance, or if it originated on an interconnected instance.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'unpublishedprivate' => array(\n                                'level' => 2,\n                                'description' => __('True will deny access to unpublished events to users outside the organization of the submitter except site admins.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'newUserText' => array(\n                                'level' => 1,\n                                'bigField' => true,\n                                'description' => __('The message sent to the user after account creation (has to be sent manually from the administration interface). Use \\\\n for line-breaks. The following variables will be automatically replaced in the text: $password = a new temporary password that MISP generates, $username = the user\\'s e-mail address, $misp = the url of this instance, $org = the organisation that the instance belongs to, as set in MISP.org, $contact = the e-mail address used to contact the support team, as set in MISP.contact. For example, \"the password for $username is $password\" would appear to a user with the e-mail address user@misp.org as \"the password for user@misp.org is hNamJae81\".'),\n                                'value' => 'Dear new MISP user,\\n\\nWe would hereby like to welcome you to the $org MISP community.\\n\\n Use the credentials below to log into MISP at $misp, where you will be prompted to manually change your password to something of your own choice.\\n\\nUsername: $username\\nPassword: $password\\n\\nIf you have any questions, don\\'t hesitate to contact us at: $contact.\\n\\nBest regards,\\nYour $org MISP support team',\n                                'errorMessage' => '',\n                                'test' => 'testPasswordResetText',\n                                'type' => 'string'\n                        ),\n                        'passwordResetText' => array(\n                                'level' => 1,\n                                'bigField' => true,\n                                'description' => __('The message sent to the users when a password reset is triggered. Use \\\\n for line-breaks. The following variables will be automatically replaced in the text: $password = a new temporary password that MISP generates, $username = the user\\'s e-mail address, $misp = the url of this instance, $contact = the e-mail address used to contact the support team, as set in MISP.contact. For example, \"the password for $username is $password\" would appear to a user with the e-mail address user@misp.org as \"the password for user@misp.org is hNamJae81\".'),\n                                'value' => 'Dear MISP user,\\n\\nA password reset has been triggered for your account. Use the below provided temporary password to log into MISP at $misp, where you will be prompted to manually change your password to something of your own choice.\\n\\nUsername: $username\\nYour temporary password: $password\\n\\nIf you have any questions, don\\'t hesitate to contact us at: $contact.\\n\\nBest regards,\\nYour $org MISP support team',\n                                'errorMessage' => '',\n                                'test' => 'testPasswordResetText',\n                                'type' => 'string'\n                        ),\n                        'enableEventBlacklisting' => array(\n                                'level' => 1,\n                                'description' => __('Since version 2.3.107 you can start blacklisting event UUIDs to prevent them from being pushed to your instance. This functionality will also happen silently whenever an event is deleted, preventing a deleted event from being pushed back from another instance.'),\n                                'value' => true,\n                                'type' => 'boolean',\n                                'test' => 'testBool'\n                        ),\n                        'enableOrgBlacklisting' => array(\n                                'level' => 1,\n                                'description' => __('Blacklisting organisation UUIDs to prevent the creation of any event created by the blacklisted organisation.'),\n                                'value' => true,\n                                'type' => 'boolean',\n                                'test' => 'testBool'\n                        ),\n                        'log_client_ip' => array(\n                                'level' => 1,\n                                'description' => __('If enabled, all log entries will include the IP address of the user.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'beforeHook' => 'ipLogBeforeHook'\n                        ),\n                        'log_auth' => array(\n                                'level' => 1,\n                                'description' => __('If enabled, MISP will log all successful authentications using API keys. The requested URLs are also logged.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'log_skip_db_logs_completely' => array(\n                            'level' => 0,\n                            'description' => __('This functionality allows you to completely disable any logs from being saved in your SQL backend. This is HIGHLY advised against, you lose all the functionalities provided by the audit log subsystem along with the event history (as these are built based on the logs on the fly). Only enable this if you understand and accept the associated risks.'),\n                            'value' => false,\n                            'errorMessage' => __('Logging has now been disabled - your audit logs will not capture failed authentication attempts, your event history logs are not being populated and no system maintenance messages are being logged.'),\n                            'test' => 'testBoolFalse',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'log_paranoid' => array(\n                                'level' => 0,\n                                'description' => __('If this functionality is enabled all page requests will be logged. Keep in mind this is extremely verbose and will become a burden to your database.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'log_paranoid_skip_db' => array(\n                                'level' => 0,\n                                'description' => __('You can decide to skip the logging of the paranoid logs to the database.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testParanoidSkipDb',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'log_paranoid_include_post_body' => array(\n                                'level' => 0,\n                                'description' => __('If paranoid logging is enabled, include the POST body in the entries.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'delegation' => array(\n                                'level' => 1,\n                                'description' => __('This feature allows users to create org only events and ask another organisation to take ownership of the event. This allows organisations to remain anonymous by asking a partner to publish an event for them.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'showCorrelationsOnIndex' => array(\n                                'level' => 1,\n                                'description' => __('When enabled, the number of correlations visible to the currently logged in user will be visible on the event index UI. This comes at a performance cost but can be very useful to see correlating events at a glance.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'showProposalsCountOnIndex' => array(\n                                'level' => 1,\n                                'description' => __('When enabled, the number of proposals for the events are shown on the index.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'showSightingsCountOnIndex' => array(\n                                'level' => 1,\n                                'description' => __('When enabled, the aggregate number of attribute sightings within the event becomes visible to the currently logged in user on the event index UI.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'showDiscussionsCountOnIndex' => array(\n                                'level' => 1,\n                                'description' => __('When enabled, the aggregate number of discussion posts for the event becomes visible to the currently logged in user on the event index UI.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'disableUserSelfManagement' => array(\n                                'level' => 1,\n                                'description' => __('When enabled only Org and Site admins can edit a user\\'s profile.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false,\n\n                        ),\n                        'block_event_alert' => array(\n                                'level' => 1,\n                                'description' => __('Enable this setting to start blocking alert e-mails for events with a certain tag. Define the tag in MISP.block_event_alert_tag.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false,\n                        ),\n                        'block_event_alert_tag' => array(\n                                'level' => 1,\n                                'description' => __('If the MISP.block_event_alert setting is set, alert e-mails for events tagged with the tag defined by this setting will be blocked.'),\n                                'value' => 'no-alerts=\"true\"',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => false,\n                        ),\n                        'org_alert_threshold' => array(\n                                'level' => 1,\n                                'description' => __('Set a value to limit the number of email alerts that events can generate per creator organisation (for example, if an organisation pushes out 2000 events in one shot, only alert on the first 20).'),\n                                'value' => 0,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => true,\n                        ),\n                        'block_old_event_alert' => array(\n                                'level' => 1,\n                                'description' => __('Enable this setting to start blocking alert e-mails for old events. The exact timing of what constitutes an old event is defined by MISP.block_old_event_alert_age.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false,\n                        ),\n                        'block_old_event_alert_age' => array(\n                                'level' => 1,\n                                'description' => __('If the MISP.block_old_event_alert setting is set, this setting will control how old an event can be for it to be alerted on. The \"timestamp\" field of the event is used. Expected format: integer, in days'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => false,\n                        ),\n                        'block_old_event_alert_by_date' => array(\n                                'level' => 1,\n                                'description' => __('If the MISP.block_old_event_alert setting is set, this setting will control the threshold for the event.date field, indicating how old an event can be for it to be alerted on. The \"date\" field of the event is used. Expected format: integer, in days'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => false,\n                        ),\n                        'tmpdir' => array(\n                                'level' => 1,\n                                'description' => __('Please indicate the temp directory you wish to use for certain functionalities in MISP. By default this is set to /tmp and will be used among others to store certain temporary files extracted from imports during the import process.'),\n                                'value' => '/tmp',\n                                'errorMessage' => '',\n                                'test' => 'testForPath',\n                                'type' => 'string',\n                                'null' => true,\n                                'cli_only' => 1\n                        ),\n                        'custom_css' => array(\n                                'level' => 2,\n                                'description' => __('If you would like to customise the css, simply drop a css file in the /var/www/MISP/app/webroot/css directory and enter the name here.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForStyleFile',\n                                'type' => 'string',\n                                'null' => true,\n                        ),\n                        'proposals_block_attributes' => array(\n                                'level' => 0,\n                                'description' => __('Enable this setting to allow blocking attributes from to_ids sensitive exports if a proposal has been made to it to remove the IDS flag or to remove the attribute altogether. This is a powerful tool to deal with false-positives efficiently.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false,\n                        ),\n                        'incoming_tags_disabled_by_default' => array(\n                                'level' => 1,\n                                'description' => __('Enable this settings if new tags synced / added via incoming events from any source should not be selectable by users by default.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false\n                        ),\n                        'completely_disable_correlation' => array(\n                                'level' => 0,\n                                'description' => __('*WARNING* This setting will completely disable the correlation on this instance and remove any existing saved correlations. Enabling this will trigger a full recorrelation of all data which is an extremely long and costly procedure. Only enable this if you know what you\\'re doing.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                                'null' => true,\n                                'afterHook' => 'correlationAfterHook',\n                        ),\n                        'allow_disabling_correlation' => array(\n                                'level' => 0,\n                                'description' => __('*WARNING* This setting will give event creators the possibility to disable the correlation of individual events / attributes that they have created.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'redis_host' => array(\n                            'level' => 0,\n                            'description' => __('The host running the redis server to be used for generic MISP tasks such as caching. This is not to be confused by the redis server used by the background processing.'),\n                            'value' => '127.0.0.1',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'redis_port' => array(\n                            'level' => 0,\n                            'description' => __('The port used by the redis server to be used for generic MISP tasks such as caching. This is not to be confused by the redis server used by the background processing.'),\n                            'value' => 6379,\n                            'errorMessage' => '',\n                            'test' => 'testForNumeric',\n                            'type' => 'numeric'\n                        ),\n                        'redis_database' => array(\n                            'level' => 0,\n                            'description' => __('The database on the redis server to be used for generic MISP tasks. If you run more than one MISP instance, please make sure to use a different database on each instance.'),\n                            'value' => 13,\n                            'errorMessage' => '',\n                            'test' => 'testForNumeric',\n                            'type' => 'numeric'\n                        ),\n                        'redis_password' => array(\n                            'level' => 0,\n                            'description' => __('The password on the redis server (if any) to be used for generic MISP tasks.'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => null,\n                            'type' => 'string',\n                            'redacted' => true\n                        ),\n                        'event_view_filter_fields' => array(\n                            'level' => 2,\n                            'description' => __('Specify which fields to filter on when you search on the event view. Default values are : \"id, uuid, value, comment, type, category, Tag.name\"'),\n                            'value' => 'id, uuid, value, comment, type, category, Tag.name',\n                            'errorMessage' => '',\n                            'test' => null,\n                            'type' => 'string',\n                        ),\n                        'manage_workers' => array(\n                                'level' => 2,\n                                'description' => __('Set this to false if you would like to disable MISP managing its own worker processes (for example, if you are managing the workers with a systemd unit).'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'deadlock_avoidance' => array(\n                                'level' => 1,\n                                'description' => __('Only enable this if you have some tools using MISP with extreme high concurency. General performance will be lower as normal as certain transactional queries are avoided in favour of shorter table locks.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'updateTimeThreshold' => array(\n                               'level' => 1,\n                               'description' => __('Sets the minimum time before being able to re-trigger an update if the previous one failed. (safe guard to avoid starting the same update multiple time)'),\n                               'value' => '7200',\n                               'test' => 'testForNumeric',\n                               'type' => 'numeric',\n                               'null' => true\n                       )\n                ),\n                'GnuPG' => array(\n                        'branch' => 1,\n                        'binary' => array(\n                                'level' => 2,\n                                'description' => __('The location of the GnuPG executable. If you would like to use a different GnuPG executable than /usr/bin/gpg, you can set it here. If the default is fine, just keep the setting suggested by MISP.'),\n                                'value' => '/usr/bin/gpg',\n                                'errorMessage' => '',\n                                'test' => 'testForGPGBinary',\n                                'type' => 'string',\n                                'cli_only' => 1\n                        ),\n                        'onlyencrypted' => array(\n                                'level' => 0,\n                                'description' => __('Allow (false) unencrypted e-mails to be sent to users that don\\'t have a GnuPG key.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'bodyonlyencrypted' => array(\n                                'level' => 2,\n                                'description' => __('Allow (false) the body of unencrypted e-mails to contain details about the event.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'sign' => array(\n                                'level' => 2,\n                                'description' => __('Enable the signing of GnuPG emails. By default, GnuPG emails are signed'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'email' => array(\n                                'level' => 0,\n                                'description' => __('The e-mail address that the instance\\'s GnuPG key is tied to.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'password' => array(\n                                'level' => 1,\n                                'description' => __('The password (if it is set) of the GnuPG key of the instance.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'redacted' => true\n                        ),\n                        'homedir' => array(\n                                'level' => 0,\n                                'description' => __('The location of the GnuPG homedir.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        )\n                ),\n                'SMIME' => array(\n                        'branch' => 1,\n                        'enabled' => array(\n                                'level' => 2,\n                                'description' => __('Enable SMIME encryption. The encryption posture of the GnuPG.onlyencrypted and GnuPG.bodyonlyencrypted settings are inherited if SMIME is enabled.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'email' => array(\n                                'level' => 2,\n                                'description' => __('The e-mail address that the instance\\'s SMIME key is tied to.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'cert_public_sign' => array(\n                                'level' => 2,\n                                'description' => __('The location of the public half of the signing certificate.'),\n                                'value' => '/var/www/MISP/.smime/email@address.com.pem',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'key_sign' => array(\n                                'level' => 2,\n                                'description' => __('The location of the private half of the signing certificate.'),\n                                'value' => '/var/www/MISP/.smime/email@address.com.key',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'password' => array(\n                                'level' => 2,\n                                'description' => __('The password (if it is set) of the SMIME key of the instance.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'redacted' => true\n                        ),\n                ),\n                'Proxy' => array(\n                        'branch' => 1,\n                        'host' => array(\n                                'level' => 2,\n                                'description' => __('The hostname of an HTTP proxy for outgoing sync requests. Leave empty to not use a proxy.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'port' => array(\n                                'level' => 2,\n                                'description' => __('The TCP port for the HTTP proxy.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                        ),\n                        'method' => array(\n                                'level' => 2,\n                                'description' => __('The authentication method for the HTTP proxy. Currently supported are Basic or Digest. Leave empty for no proxy authentication.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'user' => array(\n                                'level' => 2,\n                                'description' => __('The authentication username for the HTTP proxy.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'password' => array(\n                                'level' => 2,\n                                'description' => __('The authentication password for the HTTP proxy.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                ),\n                'Security' => array(\n                        'branch' => 1,\n                        'salt' => array(\n                                'level' => 0,\n                                'description' => __('The salt used for the hashed passwords. You cannot reset this from the GUI, only manually from the settings.php file. Keep in mind, this will invalidate all passwords in the database.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testSalt',\n                                'type' => 'string',\n                                'editable' => false,\n                                'redacted' => true\n                        ),\n                        'syslog' => array(\n                            'level' => 0,\n                            'description' => __('Enable this setting to pass all audit log entries directly to syslog. Keep in mind, this is verbose and will include user, organisation, event data.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'password_policy_length' => array(\n                                'level' => 2,\n                                'description' => __('Password length requirement. If it is not set or it is set to 0, then the default value is assumed (12).'),\n                                'value' => '12',\n                                'errorMessage' => '',\n                                'test' => 'testPasswordLength',\n                                'type' => 'numeric',\n                        ),\n                        'password_policy_complexity' => array(\n                                'level' => 2,\n                                'description' => __('Password complexity requirement. Leave it empty for the default setting (3 out of 4, with either a digit or a special char) or enter your own regex. Keep in mind that the length is checked in another key. Default (simple 3 out of 4 or minimum 16 characters): /^((?=.*\\d)|(?=.*\\W+))(?![\\n])(?=.*[A-Z])(?=.*[a-z]).*$|.{16,}/'),\n                                'value' => '/^((?=.*\\d)|(?=.*\\W+))(?![\\n])(?=.*[A-Z])(?=.*[a-z]).*$|.{16,}/',\n                                'errorMessage' => '',\n                                'test' => 'testPasswordRegex',\n                                'type' => 'string',\n                        ),\n                        'require_password_confirmation' => array(\n                            'level' => 1,\n                            'description' => __('Enabling this setting will require users to submit their current password on any edits to their profile (including a triggered password change). For administrators, the confirmation will be required when changing the profile of any user. Could potentially mitigate an attacker trying to change a compromised user\\'s password in order to establish persistance, however, enabling this feature will be highly annoying to users.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'sanitise_attribute_on_delete' => array(\n                            'level' => 1,\n                            'description' => __('Enabling this setting will sanitise the contents of an attribute on a soft delete'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'hide_organisation_index_from_users' => array(\n                            'level' => 1,\n                            'description' => __('Enabling this setting will block the organisation index from being visible to anyone besides site administrators on the current instance. Keep in mind that users can still see organisations that produce data via events, proposals, event history log entries, etc.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'allow_unsafe_apikey_named_param' => array(\n                            'level' => 0,\n                            'description' => __('Allows passing the API key via the named url parameter \"apikey\" - highly recommended not to enable this, but if you have some dodgy legacy tools that cannot pass the authorization header it can work as a workaround. Again, only use this as a last resort.'),\n                            'value' => false,\n                            'errorMessage' => __('You have enabled the passing of API keys via URL parameters. This is highly recommended against, do you really want to reveal APIkeys in your logs?...'),\n                            'test' => 'testBoolFalse',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'allow_cors' => array(\n                            'level' => 1,\n                            'description' => __('Allow cross-origin requests to this instance, matching origins given in Security.cors_origins. Set to false to totally disable'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'cors_origins' => array(\n                            'level' => 1,\n                            'description' => __('Set the origins from which MISP will allow cross-origin requests. Useful for external integration. Comma seperate if you need more than one.'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'null' => true\n                        ),\n                        'sync_audit' => array(\n                            'level' => 1,\n                            'description' => __('Enable this setting to create verbose logs of synced event data for debugging reasons. Logs are saved in your MISP directory\\'s app/files/scripts/tmp/ directory.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBoolFalse',\n                            'type' => 'boolean',\n                            'null' => true\n                        )\n                ),\n                'SecureAuth' => array(\n                        'branch' => 1,\n                        'amount' => array(\n                                'level' => 0,\n                                'description' => __('The number of tries a user can try to login and fail before the bruteforce protection kicks in.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'string',\n                        ),\n                        'expire' => array(\n                                'level' => 0,\n                                'description' => __('The duration (in seconds) of how long the user will be locked out when the allowed number of login attempts are exhausted.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'string',\n                        ),\n                ),\n                'Session' => array(\n                        'branch' => 1,\n                        'autoRegenerate' => array(\n                                'level' => 0,\n                                'description' => __('Set to true to automatically regenerate sessions after x number of requests. This might lead to the user getting de-authenticated and is frustrating in general, so only enable it if you really need to regenerate sessions. (Not recommended)'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                        ),\n                        'checkAgent' => array(\n                                'level' => 0,\n                                'description' => __('Set to true to check for the user agent string in each request. This can lead to occasional logouts (not recommended).'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                        ),\n                        'defaults' => array(\n                                'level' => 0,\n                                'description' => __('The session type used by MISP. The default setting is php, which will use the session settings configured in php.ini for the session data (supported options: php, database). The recommended option is php and setting your PHP up to use redis sessions via your php.ini. Just add \\'session.save_handler = redis\\' and \"session.save_path = \\'tcp://localhost:6379\\'\" (replace the latter with your redis connection) to '),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForSessionDefaults',\n                                'type' => 'string',\n                                'options' => array('php' => 'php', 'database' => 'database', 'cake' => 'cake', 'cache' => 'cache'),\n                        ),\n                        'timeout' => array(\n                                'level' => 0,\n                                'description' => __('The timeout duration of sessions (in MINUTES). 0 does not mean infinite for the PHP session handler, instead sessions will invalidate immediately.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'string'\n                        ),\n                        'cookieTimeout' => array(\n                                'level' => 0,\n                                'description' => __('The expiration of the cookie (in MINUTES). The session timeout gets refreshed frequently, however the cookies do not. Generally it is recommended to have a much higher cookie_timeout than timeout.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCookieTimeout',\n                                'type' => 'numeric'\n                        )\n                ),\n                'Plugin' => array(\n                        'branch' => 1,\n                        'RPZ_policy' => array(\n                            'level' => 2,\n                            'description' => __('The default policy action for the values added to the RPZ.'),\n                            'value' => 1,\n                            'errorMessage' => '',\n                            'test' => 'testForRPZBehaviour',\n                            'type' => 'numeric',\n                            'options' => array(0 => 'DROP', 1 => 'NXDOMAIN', 2 => 'NODATA', 3 => 'Local-Data', 4 => 'PASSTHRU', 5 => 'TCP-only' ),\n                        ),\n                        'RPZ_walled_garden' => array(\n                            'level' => 2,\n                            'description' => __('The default walled garden used by the RPZ export if the Local-Data policy setting is picked for the export.'),\n                            'value' => '127.0.0.1',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'RPZ_serial' => array(\n                                'level' => 2,\n                                'description' => __('The serial in the SOA portion of the zone file. (numeric, best practice is yyyymmddrr where rr is the two digit sub-revision of the file. $date will automatically get converted to the current yyyymmdd, so $date00 is a valid setting). Setting it to $time will give you an unixtime-based serial (good then you need more than 99 revisions per day).'),\n                                'value' => '$date00',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZSerial',\n                                'type' => 'string',\n                        ),\n                        'RPZ_refresh' => array(\n                                'level' => 2,\n                                'description' => __('The refresh specified in the SOA portion of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '2h',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_retry' => array(\n                                'level' => 2,\n                                'description' => __('The retry specified in the SOA portion of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '30m',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_expiry' => array(\n                                'level' => 2,\n                                'description' => __('The expiry specified in the SOA portion of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '30d',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_minimum_ttl' => array(\n                                'level' => 2,\n                                'description' => __('The minimum TTL specified in the SOA portion of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '1h',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_ttl' => array(\n                                'level' => 2,\n                                'description' => __('The TTL of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '1w',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_ns' => array(\n                                'level' => 2,\n                                'description' => __('Nameserver'),\n                                'value' => 'localhost.',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'RPZ_ns_alt' => array(\n                            'level' => 2,\n                            'description' => __('Alternate nameserver'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                    ),\n                        'RPZ_email' => array(\n                            'level' => 2,\n                            'description' => __('The e-mail address specified in the SOA portion of the zone file.'),\n                            'value' => 'root.localhost',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'Kafka_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the Kafka pub feature of MISP. Make sure that you install the requirements for the plugin to work. Refer to the installation instructions for more information.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                        ),\n                        'Kafka_brokers' => array(\n                            'level' => 2,\n                            'description' => __('A comma separated list of Kafka bootstrap brokers'),\n                            'value' => 'kafka:9092',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'Kafka_rdkafka_config' => array(\n                            'level' => 2,\n                            'description' => __('A path to an ini file with configuration options to be passed to rdkafka. Section headers in the ini file will be ignored.'),\n                            'value' => '/etc/rdkafka.ini',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'Kafka_include_attachments' => array(\n                            'level' => 2,\n                            'description' => __('Enable this setting to include the base64 encoded payloads of malware-samples/attachments in the output.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_event_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any event creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_event_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing event creations/edits/deletions.'),\n                            'value' => 'misp_event',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_event_publish_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('If enabled it will publish to Kafka the event at the time that the event gets published in MISP. Event actions (creation or edit) will not be published to Kafka.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_event_publish_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing event information on publish.'),\n                            'value' => 'misp_event_publish',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_object_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any object creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_object_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing object creations/edits/deletions.'),\n                            'value' => 'misp_object',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_object_reference_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any object reference creations/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_object_reference_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing object reference creations/deletions.'),\n                            'value' => 'misp_object_reference',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_attribute_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any attribute creations/edits/soft deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_attribute_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing attribute creations/edits/soft deletions.'),\n                            'value' => 'misp_attribute',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_shadow_attribute_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any proposal creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_shadow_attribute_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing proposal creations/edits/deletions.'),\n                            'value' => 'misp_shadow_attribute',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_tag_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any tag creations/edits/deletions as well as tags being attached to / detached from various MISP elements.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_tag_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing tag creations/edits/deletions as well as tags being attached to / detached from various MISP elements.'),\n                            'value' => 'misp_tag',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_sighting_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new sightings.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_sighting_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing sightings.'),\n                            'value' => 'misp_sighting',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_user_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new/modified users.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_user_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing new/modified users.'),\n                            'value' => 'misp_user',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_organisation_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new/modified organisations.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_organisation_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing new/modified organisations.'),\n                            'value' => 'misp_organisation',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_audit_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of log entries. Keep in mind, this can get pretty verbose depending on your logging settings.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_audit_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing log entries.'),\n                            'value' => 'misp_audit',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'ZeroMQ_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the pub/sub feature of MISP. Make sure that you install the requirements for the plugin to work. Refer to the installation instructions for more information.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_port' => array(\n                            'level' => 2,\n                            'description' => __('The port that the pub/sub feature will use.'),\n                            'value' => 50000,\n                            'errorMessage' => '',\n                            'test' => 'testForZMQPortNumber',\n                            'type' => 'numeric',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_host' => array(\n                            'level' => 2,\n                            'description' => __('Location of the Redis db used by MISP and the Python PUB script to queue data to be published.'),\n                            'value' => 'localhost',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_port' => array(\n                            'level' => 2,\n                            'description' => __('The port that Redis is listening on.'),\n                            'value' => 6379,\n                            'errorMessage' => '',\n                            'test' => 'testForPortNumber',\n                            'type' => 'numeric',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_password' => array(\n                            'level' => 2,\n                            'description' => __('The password, if set for Redis.'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_database' => array(\n                            'level' => 2,\n                            'description' => __('The database to be used for queuing messages for the pub/sub functionality.'),\n                            'value' => 1,\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_namespace' => array(\n                            'level' => 2,\n                            'description' => __('The namespace to be used for queuing messages for the pub/sub functionality.'),\n                            'value' => 'mispq',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_include_attachments' => array(\n                            'level' => 2,\n                            'description' => __('Enable this setting to include the base64 encoded payloads of malware-samples/attachments in the output.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_event_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any event creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_object_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any object creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_object_reference_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any object reference creations/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_attribute_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any attribute creations/edits/soft deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_tag_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any tag creations/edits/deletions as well as tags being attached to / detached from various MISP elements.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_sighting_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new sightings to the ZMQ pubsub feed.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_user_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new/modified users to the ZMQ pubsub feed.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_organisation_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new/modified organisations to the ZMQ pubsub feed.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_audit_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of log entries to the ZMQ pubsub feed. Keep in mind, this can get pretty verbose depending on your logging settings.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ElasticSearch_logging_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enabled logging to an ElasticSearch instance'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ElasticSearch_connection_string' => array(\n                            'level' => 2,\n                            'description' => __('The URL(s) at which to access ElasticSearch - comma separate if you want to have more than one.'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'ElasticSearch_log_index' => array(\n                            'level' => 2,\n                            'description' => __('The index in which to place logs'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'S3_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables uploading of malware samples to S3 rather than to disk (WARNING: Get permission from amazon first!)'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'S3_bucket_name' => array(\n                            'level' => 2,\n                            'description' => __('Bucket name to upload to'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'S3_region' => array(\n                            'level' => 2,\n                            'description' => __('Region in which your S3 bucket resides'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'S3_aws_access_key' => array(\n                            'level' => 2,\n                            'description' => __('AWS key to use when uploading samples (WARNING: It\\' highly recommended that you use EC2 IAM roles if at all possible)'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'S3_aws_secret_key' => array(\n                            'level' => 2,\n                            'description' => __('AWS secret key to use when uploading samples'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Sightings_policy' => array(\n                            'level' => 1,\n                            'description' => __('This setting defines who will have access to seeing the reported sightings. The default setting is the event owner alone (in addition to everyone seeing their own contribution) with the other options being Sighting reporters (meaning the event owner and anyone that provided sighting data about the event) and Everyone (meaning anyone that has access to seeing the event / attribute).'),\n                            'value' => 0,\n                            'errorMessage' => '',\n                            'test' => 'testForSightingVisibility',\n                            'type' => 'numeric',\n                            'options' => array(0 => 'Event Owner', 1 => 'Sighting reporters', 2 => 'Everyone'),\n                        ),\n                        'Sightings_anonymise' => array(\n                            'level' => 1,\n                            'description' => __('Enabling the anonymisation of sightings will simply aggregate all sightings instead of showing the organisations that have reported a sighting. Users will be able to tell the number of sightings their organisation has submitted and the number of sightings for other organisations'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                        ),\n                        'Sightings_range' => array(\n                            'level' => 1,\n                            'description' => __('Set the range in which sightings will be taken into account when generating graphs. For example a sighting with a sighted_date of 7 years ago might not be relevant anymore. Setting given in number of days, default is 365 days'),\n                            'value' => 365,\n                            'errorMessage' => '',\n                            'test' => 'testForNumeric',\n                            'type' => 'numeric'\n                        ),\n                        'CustomAuth_enable' => array(\n                                'level' => 2,\n                                'description' => __('Enable this functionality if you would like to handle the authentication via an external tool and authenticate with MISP using a custom header.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true,\n                                'beforeHook' => 'customAuthBeforeHook'\n                        ),\n                        'CustomAuth_header' => array(\n                                'level' => 2,\n                                'description' => __('Set the header that MISP should look for here. If left empty it will default to the Authorization header.'),\n                                'value' => 'Authorization',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_use_header_namespace' => array(\n                                'level' => 2,\n                                'description' => __('Use a header namespace for the auth header - default setting is enabled'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'CustomAuth_header_namespace' => array(\n                                'level' => 2,\n                                'description' => __('The default header namespace for the auth header - default setting is HTTP_'),\n                                'value' => 'HTTP_',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_required' => array(\n                                'level' => 2,\n                                'description' => __('If this setting is enabled then the only way to authenticate will be using the custom header. Altnertatively you can run in mixed mode that will log users in via the header if found, otherwise users will be redirected to the normal login page.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'CustomAuth_only_allow_source' => array(\n                                'level' => 2,\n                                'description' => __('If you are using an external tool to authenticate with MISP and would like to only allow the tool\\'s url as a valid point of entry then set this field. '),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_name' => array(\n                                'level' => 2,\n                                'description' => __('The name of the authentication method, this is cosmetic only and will be shown on the user creation page and logs.'),\n                                'value' => 'External authentication',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_disable_logout' => array(\n                                'level' => 2,\n                                'description' => __('Disable the logout button for users authenticate with the external auth mechanism.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Enrichment_services_enable' => array(\n                            'level' => 0,\n                            'description' => __('Enable/disable the enrichment services'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Enrichment_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the enrichment services'),\n                                'value' => 10,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Import_services_enable' => array(\n                                'level' => 0,\n                                'description' => __('Enable/disable the import services'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Import_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the import services'),\n                                'value' => 10,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Import_services_url' => array(\n                                'level' => 1,\n                                'description' => __('The url used to access the import services. By default, it is accessible at http://127.0.0.1:6666'),\n                                'value' => 'http://127.0.0.1',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string'\n                        ),\n                        'Import_services_port' => array(\n                                'level' => 1,\n                                'description' => __('The port used to access the import services. By default, it is accessible at 127.0.0.1:6666'),\n                                'value' => '6666',\n                                'errorMessage' => '',\n                                'test' => 'testForPortNumber',\n                                'type' => 'numeric'\n                        ),\n                        'Export_services_url' => array(\n                                'level' => 1,\n                                'description' => __('The url used to access the export services. By default, it is accessible at http://127.0.0.1:6666'),\n                                'value' => 'http://127.0.0.1',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string'\n                        ),\n                        'Export_services_port' => array(\n                                'level' => 1,\n                                'description' => __('The port used to access the export services. By default, it is accessible at 127.0.0.1:6666'),\n                                'value' => '6666',\n                                'errorMessage' => '',\n                                'test' => 'testForPortNumber',\n                                'type' => 'numeric'\n                        ),\n                        'Export_services_enable' => array(\n                                'level' => 0,\n                                'description' => __('Enable/disable the export services'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Export_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the export services'),\n                                'value' => 10,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Enrichment_hover_enable' => array(\n                                'level' => 0,\n                                'description' => __('Enable/disable the hover over information retrieved from the enrichment modules'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Enrichment_hover_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the hover services'),\n                                'value' => 5,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Enrichment_services_url' => array(\n                                'level' => 1,\n                                'description' => __('The url used to access the enrichment services. By default, it is accessible at http://127.0.0.1:6666'),\n                                'value' => 'http://127.0.0.1',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string'\n                        ),\n                        'Enrichment_services_port' => array(\n                                'level' => 1,\n                                'description' => __('The port used to access the enrichment services. By default, it is accessible at 127.0.0.1:6666'),\n                                'value' => 6666,\n                                'errorMessage' => '',\n                                'test' => 'testForPortNumber',\n                                'type' => 'numeric'\n                        ),\n                        'Cortex_services_url' => array(\n                                'level' => 1,\n                                'description' => __('The url used to access Cortex. By default, it is accessible at http://cortex-url'),\n                                'value' => 'http://127.0.0.1',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string'\n                        ),\n                        'Cortex_services_port' => array(\n                                'level' => 1,\n                                'description' => __('The port used to access Cortex. By default, this is port 9000'),\n                                'value' => 9000,\n                                'errorMessage' => '',\n                                'test' => 'testForPortNumber',\n                                'type' => 'numeric'\n                        ),\n                        'Cortex_services_enable' => array(\n                                'level' => 0,\n                                'description' => __('Enable/disable the Cortex services'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Cortex_authkey' => array(\n                                'level' => 1,\n                                'description' => __('Set an authentication key to be passed to Cortex'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'Cortex_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the Cortex services'),\n                                'value' => 120,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Cortex_ssl_verify_peer' => array(\n                                'level' => 1,\n                                'description' => __('Set to false to disable SSL verification. This is not recommended.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'Cortex_ssl_verify_host' => array(\n                                'level' => 1,\n                                'description' => __('Set to false if you wish to ignore hostname match errors when validating certificates.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'Cortex_ssl_allow_self_signed' => array(\n                                'level' => 1,\n                                'description' => __('Set to true to enable self-signed certificates to be accepted. This requires Cortex_ssl_verify_peer to be enabled.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'Cortex_ssl_cafile' => array(\n                                'level' => 1,\n                                'description' => __('Set to the absolute path of the Certificate Authority file that you wish to use for verifying SSL certificates.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_custom_password_reset' => array(\n                                'level' => 2,\n                                'description' => __('Provide your custom authentication users with an external URL to the authentication system to reset their passwords.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_custom_logout' => array(\n                                'level' => 2,\n                                'description' => __('Provide a custom logout URL for your users that will log them out using the authentication system you use.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        )\n                ),\n                'debug' => array(\n                        'level' => 0,\n                        'description' => __('The debug level of the instance, always use 0 for production instances.'),\n                        'value' => '',\n                        'errorMessage' => '',\n                        'test' => 'testDebug',\n                        'type' => 'numeric',\n                        'options' => array(0 => 'Debug off', 1 => 'Debug on', 2 => 'Debug + SQL dump'),\n                ),\n                'site_admin_debug' => array(\n                        'level' => 0,\n                        'description' => __('The debug level of the instance for site admins. This feature allows site admins to run debug mode on a live instance without exposing it to other users. The most verbose option of debug and site_admin_debug is used for site admins.'),\n                        'value' => '',\n                        'errorMessage' => '',\n                        'test' => 'testDebugAdmin',\n                        'type' => 'boolean',\n                        'null' => true\n                ),\n        );\n    }\n\n    private $__settingTabMergeRules = array(\n            'GnuPG' => 'Encryption',\n            'SMIME' => 'Encryption',\n            'misc' => 'Security',\n            'Security' => 'Security',\n            'Session' => 'Security'\n    );\n\n\n    public $validEventIndexFilters = array('searchall', 'searchpublished', 'searchorg', 'searchtag', 'searcheventid', 'searchdate', 'searcheventinfo', 'searchthreatlevel', 'searchdistribution', 'searchanalysis', 'searchattribute');\n\n    public function isOwnedByOrg($serverid, $org)\n    {\n        return $this->field('id', array('id' => $serverid, 'org' => $org)) === $serverid;\n    }\n\n    public function beforeSave($options = array())\n    {\n        $this->data['Server']['url'] = rtrim($this->data['Server']['url'], '/');\n        return true;\n    }\n\n    private function __getEventIdListBasedOnPullTechnique($technique, $server)\n    {\n        if (\"full\" === $technique) {\n            // get a list of the event_ids on the server\n            $eventIds = $this->getEventIdsFromServer($server);\n            if ($eventIds === 403) {\n                return array('error' => array(1, null));\n            } elseif (is_string($eventIds)) {\n                return array('error' => array(2, $eventIds));\n            }\n\n            // reverse array of events, to first get the old ones, and then the new ones\n            if (!empty($eventIds)) {\n                $eventIds = array_reverse($eventIds);\n            }\n        } elseif (\"update\" === $technique) {\n            $eventIds = $this->getEventIdsFromServer($server, false, null, true, true);\n            if ($eventIds === 403) {\n                return array('error' => array(1, null));\n            } elseif (is_string($eventIds)) {\n                return array('error' => array(2, $eventIds));\n            }\n            $eventModel = ClassRegistry::init('Event');\n            $local_event_ids = $eventModel->find('list', array(\n                    'fields' => array('uuid'),\n                    'recursive' => -1,\n            ));\n            $eventIds = array_intersect($eventIds, $local_event_ids);\n        } elseif (is_numeric($technique)) {\n            $eventIds[] = intval($technique);\n        } else {\n            return array('error' => array(4, null));\n        }\n        return $eventIds;\n    }\n\n    private function __checkIfEventIsBlockedBeforePull($event)\n    {\n        if (Configure::read('MISP.enableEventBlacklisting') !== false) {\n            $this->EventBlacklist = ClassRegistry::init('EventBlacklist');\n            $r = $this->EventBlacklist->find('first', array('conditions' => array('event_uuid' => $event['Event']['uuid'])));\n            if (!empty($r)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private function __updatePulledEventBeforeInsert(&$event, $server, $user)\n    {\n        // we have an Event array\n        // The event came from a pull, so it should be locked.\n        $event['Event']['locked'] = true;\n        if (!isset($event['Event']['distribution'])) { // version 1\n            $event['Event']['distribution'] = '1';\n        }\n        // Distribution\n        if (empty(Configure::read('MISP.host_org_id')) || !$server['Server']['internal'] ||  Configure::read('MISP.host_org_id') != $server['Server']['org_id']) {\n            switch ($event['Event']['distribution']) {\n                case 1:\n                    // if community only, downgrade to org only after pull\n                    $event['Event']['distribution'] = '0';\n                    break;\n                case 2:\n                    // if connected communities downgrade to community only\n                    $event['Event']['distribution'] = '1';\n                    break;\n            }\n            if (isset($event['Event']['Attribute']) && !empty($event['Event']['Attribute'])) {\n                foreach ($event['Event']['Attribute'] as $key => $a) {\n                    switch ($a['distribution']) {\n                        case '1':\n                            $event['Event']['Attribute'][$key]['distribution'] = '0';\n                            break;\n                        case '2':\n                            $event['Event']['Attribute'][$key]['distribution'] = '1';\n                            break;\n                    }\n                }\n            }\n        }\n        // Distribution, set reporter of the event, being the admin that initiated the pull\n        $event['Event']['user_id'] = $user['id'];\n        return $event;\n    }\n\n    private function __checkIfEventSaveAble($event) {\n        if (!empty($event['Event']['Attribute'])) {\n            foreach ($event['Event']['Attribute'] as $attribute) {\n                if (empty($attribute['deleted'])) {\n                    return true;\n                }\n            }\n        }\n        if (!empty($event['Event']['Object'])) {\n            foreach ($event['Event']['Object'] as $object) {\n                if (!empty($object['deleted'])) {\n                    continue;\n                }\n                if (!empty($object['Attribute'])) {\n                    foreach ($object['Attribute'] as $attribute) {\n                        if (empty($attribute['deleted'])) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private function __checkIfPulledEventExistsAndAddOrUpdate($event, $eventId, &$successes, &$fails, $eventModel, $server, $user, $jobId)\n    {\n        // check if the event already exist (using the uuid)\n        $existingEvent = $eventModel->find('first', array('conditions' => array('Event.uuid' => $event['Event']['uuid'])));\n        $passAlong = $server['Server']['id'];\n        if (!$existingEvent) {\n            // add data for newly imported events\n            $result = $eventModel->_add($event, true, $user, $server['Server']['org_id'], $passAlong, true, $jobId);\n            if ($result === true) {\n                $successes[] = $eventId;\n            } else {\n                $fails[$eventId] = __('Failed (partially?) because of errors: ') . $result;\n            }\n        } else {\n            if (!$existingEvent['Event']['locked'] && !$server['Server']['internal']) {\n                $fails[$eventId] = __('Blocked an edit to an event that was created locally. This can happen if a synchronised event that was created on this instance was modified by an administrator on the remote side.');\n            } else {\n                $result = $eventModel->_edit($event, $user, $existingEvent['Event']['id'], $jobId, $passAlong);\n                if ($result === true) {\n                    $successes[] = $eventId;\n                } elseif (isset($result['error'])) {\n                    $fails[$eventId] = $result['error'];\n                } else {\n                    $fails[$eventId] = json_encode($result);\n                }\n            }\n        }\n    }\n\n    private function __pullEvent($eventId, &$successes, &$fails, $eventModel, $server, $user, $jobId)\n    {\n        $event = $eventModel->downloadEventFromServer(\n                $eventId,\n                $server\n        );\n        if (!empty($event)) {\n            if ($this->__checkIfEventIsBlockedBeforePull($event)) {\n                return false;\n            }\n            $event = $this->__updatePulledEventBeforeInsert($event, $server, $user);\n            if (!$this->__checkIfEventSaveAble($event)) {\n                $fails[$eventId] = __('Empty event detected.');\n            } else {\n                $this->__checkIfPulledEventExistsAndAddOrUpdate($event, $eventId, $successes, $fails, $eventModel, $server, $user, $jobId);\n            }\n        } else {\n            // error\n            $fails[$eventId] = __('failed downloading the event') . ': ' . json_encode($event);\n        }\n        return true;\n    }\n\n    private function __handlePulledProposals($proposals, $events, $job, $jobId, $eventModel, $user)\n    {\n        $pulledProposals = array();\n        if (!empty($proposals)) {\n            $shadowAttribute = ClassRegistry::init('ShadowAttribute');\n            $shadowAttribute->recursive = -1;\n            $uuidEvents = array_flip($events);\n            foreach ($proposals as $k => &$proposal) {\n                $proposal = $proposal['ShadowAttribute'];\n                $oldsa = $shadowAttribute->findOldProposal($proposal);\n                $proposal['event_id'] = $uuidEvents[$proposal['event_uuid']];\n                if (!$oldsa || $oldsa['timestamp'] < $proposal['timestamp']) {\n                    if ($oldsa) {\n                        $shadowAttribute->delete($oldsa['id']);\n                    }\n                    if (!isset($pulledProposals[$proposal['event_id']])) {\n                        $pulledProposals[$proposal['event_id']] = 0;\n                    }\n                    $pulledProposals[$proposal['event_id']]++;\n                    if (isset($proposal['old_id'])) {\n                        $oldAttribute = $eventModel->Attribute->find('first', array('recursive' => -1, 'conditions' => array('uuid' => $proposal['uuid'])));\n                        if ($oldAttribute) {\n                            $proposal['old_id'] = $oldAttribute['Attribute']['id'];\n                        } else {\n                            $proposal['old_id'] = 0;\n                        }\n                    }\n                    // check if this is a proposal from an old MISP instance\n                    if (!isset($proposal['Org']) && isset($proposal['org']) && !empty($proposal['org'])) {\n                        $proposal['Org'] = $proposal['org'];\n                        $proposal['EventOrg'] = $proposal['event_org'];\n                    } elseif (!isset($proposal['Org']) && !isset($proposal['EventOrg'])) {\n                        continue;\n                    }\n                    $proposal['org_id'] = $this->Organisation->captureOrg($proposal['Org'], $user);\n                    $proposal['event_org_id'] = $this->Organisation->captureOrg($proposal['EventOrg'], $user);\n                    unset($proposal['Org']);\n                    unset($proposal['EventOrg']);\n                    $shadowAttribute->create();\n                    if (!isset($proposal['deleted']) || !$proposal['deleted']) {\n                        if ($shadowAttribute->save($proposal)) {\n                            $shadowAttribute->sendProposalAlertEmail($proposal['event_id']);\n                        }\n                    }\n                }\n                if ($jobId) {\n                    if ($k % 50 == 0) {\n                        $job->id =  $jobId;\n                        $job->saveField('progress', 50 * (($k + 1) / count($proposals)) + 50);\n                    }\n                }\n            }\n        }\n        return $pulledProposals;\n    }\n\n    public function pull($user, $id = null, $technique=false, $server, $jobId = false)\n    {\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n            $job->read(null, $jobId);\n            $email = \"Scheduled job\";\n        } else {\n            $job = false;\n            $email = $user['email'];\n        }\n        $eventModel = ClassRegistry::init('Event');\n        $eventIds = array();\n        // if we are downloading a single event, don't fetch all proposals\n        $conditions = is_numeric($technique) ? array('Event.id' => $technique) : array();\n        $eventIds = $this->__getEventIdListBasedOnPullTechnique($technique, $server);\n        $server['Server']['version'] = $this->getRemoteVersion($id);\n        if (!empty($eventIds['error'])) {\n            $errors = array(\n                '1' => __('Not authorised. This is either due to an invalid auth key, or due to the sync user not having authentication permissions enabled on the remote server. Another reason could be an incorrect sync server setting.'),\n                '2' => $eventIds['error'][1],\n                '3' => __('Sorry, this is not yet implemented'),\n                '4' => __('Something went wrong while trying to pull')\n            );\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                'org' => $user['Organisation']['name'],\n                'model' => 'Server',\n                'model_id' => $id,\n                'email' => $user['email'],\n                'action' => 'error',\n                'user_id' => $user['id'],\n                'title' => 'Failed pull from ' . $server['Server']['url'] . ' initiated by ' . $email,\n                'change' => !empty($errors[$eventIds['error'][0]]) ? $errors[$eventIds['error'][0]] : __('Unknown issue.')\n            ));\n            return !empty($errors[$eventIds['error'][0]]) ? $errors[$eventIds['error'][0]] : __('Unknown issue.');\n        }\n        $successes = array();\n        $fails = array();\n        // now process the $eventIds to pull each of the events sequentially\n        if (!empty($eventIds)) {\n            // download each event\n            foreach ($eventIds as $k => $eventId) {\n                $this->__pullEvent($eventId, $successes, $fails, $eventModel, $server, $user, $jobId);\n                if ($jobId) {\n                    if ($k % 10 == 0) {\n                        $job->saveField('progress', 50 * (($k + 1) / count($eventIds)));\n                    }\n                }\n            }\n        }\n        if (!empty($fails)) {\n            $this->Log = ClassRegistry::init('Log');\n            foreach ($fails as $eventid => $message) {\n                $this->Log->create();\n                $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => 'pull',\n                    'user_id' => $user['id'],\n                    'title' => 'Failed to pull event #' . $eventid . '.',\n                    'change' => 'Reason:' . $message\n                ));\n            }\n        }\n        if ($jobId) {\n            $job->saveField('progress', 50);\n            $job->saveField('message', 'Pulling proposals.');\n        }\n        $pulledProposals = $eventModel->ShadowAttribute->pullProposals($user, $server);\n        if ($jobId) {\n            $job->saveField('progress', 100);\n            $job->saveField('message', 'Pull completed.');\n            $job->saveField('status', 4);\n        }\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        $this->Log->save(array(\n            'org' => $user['Organisation']['name'],\n            'model' => 'Server',\n            'model_id' => $id,\n            'email' => $user['email'],\n            'action' => 'pull',\n            'user_id' => $user['id'],\n            'title' => 'Pull from ' . $server['Server']['url'] . ' initiated by ' . $email,\n            'change' => sprintf(\n                '%s events and %s proposals pulled or updated. %s events failed or didn\\'t need an update.',\n                count($successes),\n                $pulledProposals,\n                count($fails)\n            )\n        ));\n        return array($successes, $fails, $pulledProposals);\n    }\n\n    public function filterRuleToParameter($filter_rules)\n    {\n        $final = array();\n        if (empty($filter_rules)) {\n            return $final;\n        }\n        $filter_rules = json_decode($filter_rules, true);\n        foreach ($filter_rules as $field => $rules) {\n            $temp = array();\n            foreach ($rules as $operator => $elements) {\n                foreach ($elements as $k => $element) {\n                    if ($operator === 'NOT') {\n                        $element = '!' . $element;\n                    }\n                    if (!empty($element)) {\n                        $temp[] = $element;\n                    }\n                }\n            }\n            if (!empty($temp)) {\n                $temp = implode('|', $temp);\n                $final[substr($field, 0, strlen($field) -1)] = $temp;\n            }\n        }\n        return $final;\n    }\n\n\n    // Get an array of event_ids that are present on the remote server\n    public function getEventIdsFromServer($server, $all = false, $HttpSocket=null, $force_uuid=false, $ignoreFilterRules = false)\n    {\n        $url = $server['Server']['url'];\n        if ($ignoreFilterRules) {\n            $filter_rules = array();\n        } else {\n            $filter_rules = $this->filterRuleToParameter($server['Server']['pull_rules']);\n        }\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        $request = $this->setupSyncRequest($server);\n        $uri = $url . '/events/index';\n        $filter_rules['minimal'] = 1;\n        $filter_rules['published'] = 1;\n        try {\n            $response = $HttpSocket->post($uri, json_encode($filter_rules), $request);\n            if ($response->isOk()) {\n                $eventArray = json_decode($response->body, true);\n                // correct $eventArray if just one event\n                if (is_array($eventArray) && isset($eventArray['id'])) {\n                    $tmp = $eventArray;\n                    unset($eventArray);\n                    $eventArray[0] = $tmp;\n                    unset($tmp);\n                }\n                $eventIds = array();\n                if ($all) {\n                    if (!empty($eventArray)) {\n                        foreach ($eventArray as $event) {\n                            $eventIds[] = $event['uuid'];\n                        }\n                    }\n                } else {\n                    // multiple events, iterate over the array\n                    $this->Event = ClassRegistry::init('Event');\n                    $blacklisting = array();\n                    if (Configure::read('MISP.enableEventBlacklisting') !== false) {\n                        $this->EventBlacklist = ClassRegistry::init('EventBlacklist');\n                        $blacklisting['EventBlacklist'] = array(\n                            'index_field' => 'uuid',\n                            'blacklist_field' => 'event_uuid'\n                        );\n                    }\n                    if (Configure::read('MISP.enableOrgBlacklisting') !== false) {\n                        $this->OrgBlacklist = ClassRegistry::init('OrgBlacklist');\n                        $blacklisting['OrgBlacklist'] = array(\n                            'index_field' => 'orgc_uuid',\n                            'blacklist_field' => 'org_uuid'\n                        );\n                    }\n                    foreach ($eventArray as $k => $event) {\n                        if (1 != $event['published']) {\n                            unset($eventArray[$k]); // do not keep non-published events\n                            continue;\n                        }\n                        foreach ($blacklisting as $type => $blacklist) {\n                            if (!empty($eventArray[$k][$blacklist['index_field']])) {\n                                $blacklist_hit = $this->{$type}->find('first', array(\n                                    'conditions' => array($blacklist['blacklist_field'] => $eventArray[$k][$blacklist['index_field']]),\n                                    'recursive' => -1,\n                                    'fields' => array($type . '.id')\n                                ));\n                                if (!empty($blacklist_hit)) {\n                                    unset($eventArray[$k]);\n                                    continue 2;\n                                }\n                            }\n                        }\n                    }\n                    $this->Event->removeOlder($eventArray);\n                    if (!empty($eventArray)) {\n                        foreach ($eventArray as $event) {\n                            if ($force_uuid) {\n                                $eventIds[] = $event['uuid'];\n                            } else {\n                                $eventIds[] = $event['uuid'];\n                            }\n                        }\n                    }\n                }\n                return $eventIds;\n            }\n            if ($response->code == '403') {\n                return 403;\n            }\n        } catch (SocketException $e) {\n            return $e->getMessage();\n        }\n        // error, so return error message, since that is handled and everything is expecting an array\n        return \"Error: got response code \" . $response->code;\n    }\n\n    public function push($id = null, $technique=false, $jobId = false, $HttpSocket, $user)\n    {\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n            $job->read(null, $jobId);\n        }\n        $this->Event = ClassRegistry::init('Event');\n        $this->read(null, $id);\n        $url = $this->data['Server']['url'];\n        $push = $this->checkVersionCompatibility($id, $user);\n        if (isset($push['canPush']) && !$push['canPush']) {\n            $push = 'Remote instance is outdated or no permission to push.';\n        }\n        if (!is_array($push)) {\n            $message = sprintf('Push to server %s failed. Reason: %s', $id, $push);\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => 'error',\n                    'user_id' => $user['id'],\n                    'title' => 'Failed: Push to ' . $url . ' initiated by ' . $user['email'],\n                    'change' => $message\n            ));\n            if ($jobId) {\n                $job->id = $jobId;\n                $job->saveField('progress', 100);\n                $job->saveField('message', $message);\n                $job->saveField('status', 4);\n            }\n            return $push;\n        }\n        if (\"full\" == $technique) {\n            $eventid_conditions_key = 'Event.id >';\n            $eventid_conditions_value = 0;\n        } elseif (\"incremental\" == $technique) {\n            $eventid_conditions_key = 'Event.id >';\n            $eventid_conditions_value = $this->data['Server']['lastpushedid'];\n        } elseif (true == $technique) {\n            $eventid_conditions_key = 'Event.id';\n            $eventid_conditions_value = intval($technique);\n        } else {\n            $this->redirect(array('action' => 'index'));\n        }\n        $sgs = $this->Event->SharingGroup->find('all', array(\n            'recursive' => -1,\n            'contain' => array('Organisation', 'SharingGroupOrg' => array('Organisation'), 'SharingGroupServer')\n        ));\n        $sgIds = array();\n        foreach ($sgs as $k => $sg) {\n            if (!$this->Event->SharingGroup->checkIfServerInSG($sg, $this->data)) {\n                unset($sgs[$k]);\n                continue;\n            }\n            $sgIds[] = $sg['SharingGroup']['id'];\n        }\n        if (!isset($sgIds) || empty($sgIds)) {\n            $sgIds = array(-1);\n        }\n        $findParams = array(\n                'conditions' => array(\n                        $eventid_conditions_key => $eventid_conditions_value,\n                        'Event.published' => 1,\n                        'Event.attribute_count >' => 0,\n                        'OR' => array(\n                            array(\n                                'AND' => array(\n                                    array('Event.distribution >' => 0),\n                                    array('Event.distribution <' => 4),\n                                ),\n                            ),\n                            array(\n                                'AND' => array(\n                                    'Event.distribution' => 4,\n                                    'Event.sharing_group_id' => $sgIds\n                                ),\n                            )\n                        )\n                ), // array of conditions\n                'recursive' => -1, //int\n                'contain' => array('EventTag' => array('fields' => array('EventTag.tag_id'))),\n                'fields' => array('Event.id', 'Event.timestamp', 'Event.uuid', 'Event.orgc_id'), // array of field names\n        );\n        $eventIds = $this->Event->find('all', $findParams);\n        $eventUUIDsFiltered = $this->getEventIdsForPush($id, $HttpSocket, $eventIds, $user);\n        if ($eventUUIDsFiltered === false || empty($eventUUIDsFiltered)) {\n            $pushFailed = true;\n        }\n        if (!empty($eventUUIDsFiltered)) {\n            $eventCount = count($eventUUIDsFiltered);\n            // now process the $eventIds to pull each of the events sequentially\n            if (!empty($eventUUIDsFiltered)) {\n                $successes = array();\n                $fails = array();\n                $lowestfailedid = null;\n                foreach ($eventUUIDsFiltered as $k => $eventUuid) {\n                    $params = array();\n                    if (!empty($this->data['Server']['push_rules'])) {\n                        $push_rules = json_decode($this->data['Server']['push_rules'], true);\n                        if (!empty($push_rules['tags']['NOT'])) {\n                            $params['blockedAttributeTags'] = $push_rules['tags']['NOT'];\n                        }\n                    }\n                    $params = array_merge($params, array(\n                        'event_uuid' => $eventUuid,\n                        'includeAttachments' => true,\n                        'includeAllTags' => true,\n                        'deleted' => array(0,1),\n                        'excludeGalaxy' => 1\n                    ));\n                    $event = $this->Event->fetchEvent($user, $params);\n                    $event = $event[0];\n                    $event['Event']['locked'] = 1;\n                    $result = $this->Event->uploadEventToServer($event, $this->data, $HttpSocket);\n                    if ('Success' === $result) {\n                        $successes[] = $event['Event']['id'];\n                    } else {\n                        $fails[$event['Event']['id']] = $result;\n                    }\n                    if ($jobId && $k%10 == 0) {\n                        $job->saveField('progress', 100 * $k / $eventCount);\n                    }\n                }\n                if (count($fails) > 0) {\n                    // there are fails, take the lowest fail\n                    $lastpushedid = min(array_keys($fails));\n                } else {\n                    // no fails, take the highest success\n                    $lastpushedid = max($successes);\n                }\n                // increment lastid based on the highest ID seen\n                // Save the entire Server data instead of just a single field, so that the logger can be fed with the extra fields.\n                $this->data['Server']['lastpushedid'] = $lastpushedid;\n                $this->save($this->data);\n            }\n        }\n\n        $this->syncProposals($HttpSocket, $this->data, null, null, $this->Event);\n\n        if (!isset($successes)) {\n            $successes = array();\n        }\n        if (!isset($fails)) {\n            $fails = array();\n        }\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        $this->Log->save(array(\n                'org' => $user['Organisation']['name'],\n                'model' => 'Server',\n                'model_id' => $id,\n                'email' => $user['email'],\n                'action' => 'push',\n                'user_id' => $user['id'],\n                'title' => 'Push to ' . $url . ' initiated by ' . $user['email'],\n                'change' => count($successes) . ' events pushed or updated. ' . count($fails) . ' events failed or didn\\'t need an update.'\n        ));\n        if ($jobId) {\n            $job->id = $jobId;\n            $job->saveField('progress', 100);\n            $job->saveField('message', 'Push to server ' . $id . ' complete.');\n            $job->saveField('status', 4);\n        } else {\n            return array($successes, $fails);\n        }\n        return true;\n    }\n\n    public function getEventIdsForPush($id, $HttpSocket, $eventIds, $user)\n    {\n        $server = $this->read(null, $id);\n        $this->Event = ClassRegistry::init('Event');\n\n        foreach ($eventIds as $k => $event) {\n            if (empty($this->eventFilterPushableServers($event, array($server)))) {\n                unset($eventIds[$k]);\n                continue;\n            }\n            unset($eventIds[$k]['Event']['id']);\n        }\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        $request = $this->setupSyncRequest($server);\n        $data = json_encode($eventIds);\n        $uri = $server['Server']['url'] . '/events/filterEventIdsForPush';\n        $response = $HttpSocket->post($uri, $data, $request);\n        if ($response->code == '200') {\n            $uuidList = json_decode($response->body());\n        } else {\n            return false;\n        }\n        return $uuidList;\n    }\n\n    public function syncProposals($HttpSocket, $server, $sa_id = null, $event_id = null, $eventModel)\n    {\n        $saModel = ClassRegistry::init('ShadowAttribute');\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        if ($sa_id == null) {\n            if ($event_id == null) {\n                // event_id is null when we are doing a push\n                $ids = $this->getEventIdsFromServer($server, true, $HttpSocket, false, true);\n                // error return strings or ints or throw exceptions\n                if (!is_array($ids)) {\n                    return false;\n                }\n                $conditions = array('uuid' => $ids);\n            } else {\n                $conditions = array('id' => $event_id);\n                // event_id is not null when we are doing a publish\n            }\n            $events = $eventModel->find('all', array(\n                    'conditions' => $conditions,\n                    'recursive' => 1,\n                    'contain' => 'ShadowAttribute',\n                    'fields' => array('Event.uuid')\n            ));\n\n            $fails = 0;\n            $success = 0;\n            $error_message = \"\";\n            foreach ($events as $k => &$event) {\n                if (!empty($event['ShadowAttribute'])) {\n                    foreach ($event['ShadowAttribute'] as &$sa) {\n                        $sa['data'] = $saModel->base64EncodeAttachment($sa);\n                        unset($sa['id']);\n                        unset($sa['value1']);\n                        unset($sa['value2']);\n                    }\n\n                    $data = json_encode($event['ShadowAttribute']);\n                    $request = $this->setupSyncRequest($server);\n                    $uri = $server['Server']['url'] . '/events/pushProposals/' . $event['Event']['uuid'];\n                    $response = $HttpSocket->post($uri, $data, $request);\n                    if ($response->code == '200') {\n                        $result = json_decode($response->body(), true);\n                        if ($result['success']) {\n                            $success += intval($result['counter']);\n                        } else {\n                            $fails++;\n                            if ($error_message == \"\") {\n                                $result['message'];\n                            } else {\n                                $error_message .= \" --- \" . $result['message'];\n                            }\n                        }\n                    } else {\n                        $fails++;\n                    }\n                }\n            }\n        } else {\n            // connect to checkuuid($uuid)\n            $request = $this->setupSyncRequest($server);\n            $uri = $server['Server']['url'] . '/events/checkuuid/' . $sa_id;\n            $response = $HttpSocket->get($uri, '', $request);\n            if ($response->code != '200') {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public function getCurrentServerSettings()\n    {\n        $this->Module = ClassRegistry::init('Module');\n        $serverSettings = $this->serverSettings;\n        $moduleTypes = array('Enrichment', 'Import', 'Export', 'Cortex');\n        $serverSettings = $this->readModuleSettings($serverSettings, $moduleTypes);\n        return $serverSettings;\n    }\n\n    private function readModuleSettings($serverSettings, $moduleTypes)\n    {\n        $this->Module = ClassRegistry::init('Module');\n        $orgs = $this->Organisation->find('list', array(\n            'conditions' => array(\n                'Organisation.local' => 1\n            ),\n            'fields' => array(\n                'Organisation.id', 'Organisation.name'\n            )\n        ));\n        $orgs = array_merge(array('Unrestricted'), $orgs);\n        foreach ($moduleTypes as $moduleType) {\n            if (Configure::read('Plugin.' . $moduleType . '_services_enable')) {\n                $results = $this->Module->getModuleSettings($moduleType);\n                foreach ($results as $module => $data) {\n                    foreach ($data as $result) {\n                        $setting = array('level' => 1, 'errorMessage' => '');\n                        if ($result['type'] == 'boolean') {\n                            $setting['test'] = 'testBool';\n                            $setting['type'] = 'boolean';\n                            $setting['description'] = __('Enable or disable the %s module.', $module);\n                            $setting['value'] = false;\n                        } elseif ($result['type'] == 'orgs') {\n                            $setting['description'] = __('Restrict the %s module to the given organisation.', $module);\n                            $setting['value'] = 0;\n                            $setting['test'] = 'testLocalOrg';\n                            $setting['type'] = 'numeric';\n                            $setting['optionsSource'] = 'LocalOrgs';\n                        } else {\n                            $setting['test'] = 'testForEmpty';\n                            $setting['type'] = 'string';\n                            $setting['description'] = __('Set this required module specific setting.');\n                            $setting['value'] = '';\n                        }\n                        $serverSettings['Plugin'][$moduleType . '_' . $module . '_' .  $result['name']] = $setting;\n                    }\n                }\n            }\n        }\n        return $serverSettings;\n    }\n\n    private function __serverSettingsRead($serverSettings, $currentSettings)\n    {\n        foreach ($serverSettings as $branchKey => &$branchValue) {\n            if (isset($branchValue['branch'])) {\n                foreach ($branchValue as $leafKey => &$leafValue) {\n                    if ($leafValue['level'] == 3 && !(isset($currentSettings[$branchKey][$leafKey]))) {\n                        continue;\n                    }\n                    $setting = null;\n                    if (isset($currentSettings[$branchKey][$leafKey])) {\n                        $setting = $currentSettings[$branchKey][$leafKey];\n                    }\n                    $leafValue = $this->__evaluateLeaf($leafValue, $leafKey, $setting);\n                    if ($leafKey != 'branch') {\n                        if ($branchKey == 'Plugin') {\n                            $pluginData = explode('_', $leafKey);\n                            $leafValue['subGroup'] = $pluginData[0];\n                        }\n                        if (strpos($branchKey, 'Secur') === 0) {\n                            $leafValue['tab'] = 'Security';\n                        } else {\n                            $leafValue['tab'] = $branchKey;\n                        }\n                        $finalSettingsUnsorted[$branchKey . '.' . $leafKey] = $leafValue;\n                    }\n                }\n            } else {\n                $setting = null;\n                if (isset($currentSettings[$branchKey])) {\n                    $setting = $currentSettings[$branchKey];\n                }\n                $branchValue = $this->__evaluateLeaf($branchValue, $branchKey, $setting);\n                $branchValue['tab'] = 'misc';\n                $finalSettingsUnsorted[$branchKey] = $branchValue;\n            }\n        }\n        return $finalSettingsUnsorted;\n    }\n\n    private function __sortFinalSettings($finalSettingsUnsorted)\n    {\n        $finalSettings = array();\n        for ($i = 0; $i < 4; $i++) {\n            foreach ($finalSettingsUnsorted as $k => $s) {\n                $s['setting'] = $k;\n                if ($s['level'] == $i) {\n                    $finalSettings[] = $s;\n                }\n            }\n        }\n        return $finalSettings;\n    }\n\n    public function serverSettingsRead($unsorted = false)\n    {\n        $this->Module = ClassRegistry::init('Module');\n        $serverSettings = $this->getCurrentServerSettings();\n        $currentSettings = Configure::read();\n        if (Configure::read('Plugin.Enrichment_services_enable')) {\n            $this->readModuleSettings($serverSettings, array('Enrichment'));\n        }\n        $finalSettingsUnsorted = $this->__serverSettingsRead($serverSettings, $currentSettings);\n        foreach ($finalSettingsUnsorted as $key => $temp) {\n            if (in_array($temp['tab'], array_keys($this->__settingTabMergeRules))) {\n                $finalSettingsUnsorted[$key]['tab'] = $this->__settingTabMergeRules[$temp['tab']];\n            }\n        }\n        if ($unsorted) {\n            return $finalSettingsUnsorted;\n        }\n        return $this->__sortFinalSettings($finalSettingsUnsorted);\n    }\n\n    public function serverSettingReadSingle($settingObject, $settingName, $leafKey)\n    {\n        // invalidate config.php from php opcode cache\n        if (function_exists('opcache_reset')) {\n            opcache_reset();\n        }\n\n        $setting = Configure::read($settingName);\n        $result = $this->__evaluateLeaf($settingObject, $leafKey, $setting);\n        $result['setting'] = $settingName;\n        return $result;\n    }\n\n    private function __evaluateLeaf($leafValue, $leafKey, $setting)\n    {\n        if (isset($setting)) {\n            if (!empty($leafValue['test'])) {\n                $result = $this->{$leafValue['test']}($setting, empty($leafValue['errorMessage']) ? false : $leafValue['errorMessage']);\n                if ($result !== true) {\n                    $leafValue['error'] = 1;\n                    if ($result !== false) {\n                        $leafValue['errorMessage'] = $result;\n                    }\n                }\n            }\n            if ($setting !== '') {\n                $leafValue['value'] = $setting;\n            }\n        } else {\n            if ($leafKey != 'branch' && (!isset($leafValue['null']) || !$leafValue['null'])) {\n                $leafValue['error'] = 1;\n                $leafValue['errorMessage'] = __('Value not set.');\n            }\n        }\n        return $leafValue;\n    }\n\n    public function loadAvailableLanguages()\n    {\n        $dirs = glob(APP . 'Locale/*', GLOB_ONLYDIR);\n        $languages = array('eng' => 'eng');\n        foreach ($dirs as $k => $dir) {\n            $dir = str_replace(APP . 'Locale' . DS, '', $dir);\n            $languages[$dir] = $dir;\n        }\n        return $languages;\n    }\n\n    public function testLanguage($value)\n    {\n        $languages = $this->loadAvailableLanguages();\n        if (!isset($languages[$value])) {\n            return __('Invalid language.');\n        }\n        return true;\n    }\n\n    public function loadTagCollections()\n    {\n        $this->TagCollection = ClassRegistry::init('TagCollection');\n        $user = array('Role' => array('perm_site_admin' => 1));\n        $tagCollections = $this->TagCollection->fetchTagCollection($user);\n        $options = array(0 => 'None');\n        foreach ($tagCollections as $tagCollection) {\n            $options[intval($tagCollection['TagCollection']['id'])] = $tagCollection['TagCollection']['name'];\n        }\n        return $options;\n    }\n\n    public function testTagCollections($value)\n    {\n        $tag_collections = $this->loadTagCollections();\n        if (!isset($tag_collections[intval($value)])) {\n            return __('Invalid tag_collection.');\n        }\n        return true;\n    }\n\n    public function testForNumeric($value)\n    {\n        if (!is_numeric($value)) {\n            return __('This setting has to be a number.');\n        }\n        return true;\n    }\n\n    public function testForCookieTimeout($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < Configure::read('Session.timeout') && $value !== 0) {\n            return __('The cookie timeout is currently lower than the session timeout. This will invalidate the cookie before the session expires.');\n        }\n        return true;\n    }\n\n    public function testUuid($value)\n    {\n        if (empty($value) || !preg_match('/^\\{?[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}\\}?$/', $value)) {\n            return 'Invalid UUID.';\n        }\n        return true;\n    }\n\n    public function testForSessionDefaults($value)\n    {\n        if (empty($value) || !in_array($value, array('php', 'database', 'cake', 'cache'))) {\n            return 'Please choose a valid session handler. Recommended values: php or database. Alternate options are cake (cakephp file based sessions) and cache.';\n        } else {\n            return true;\n        }\n    }\n\n    public function testLocalOrg($value)\n    {\n        $this->Organisation = ClassRegistry::init('Organisation');\n        if ($value == 0) {\n            return 'No organisation selected';\n        }\n        $local_orgs = $this->Organisation->find('list', array(\n            'conditions' => array('local' => 1),\n            'recursive' => -1,\n            'fields' => array('Organisation.id', 'Organisation.name')\n        ));\n        if (in_array($value, array_keys($local_orgs))) {\n            return true;\n        }\n        return 'Invalid organisation';\n    }\n\n    public function testForEmpty($value)\n    {\n        $value = trim($value);\n        if ($value === '') {\n            return 'Value not set.';\n        }\n        return true;\n    }\n\n    public function testForPath($value)\n    {\n        if ($value === '') {\n            return true;\n        }\n        if (preg_match('@^\\/?(([a-z0-9_.]+[a-z0-9_.\\-.\\:]*[a-z0-9_.\\-.\\:]|[a-z0-9_.])+\\/?)+$@i', $value)) {\n            return true;\n        }\n        return 'Invalid characters in the path.';\n    }\n\n    public function beforeHookBinExec($setting, $value)\n    {\n        return $this->testForBinExec($value);\n    }\n\n    public function testForBinExec($value)\n    {\n        if (substr($value, 0, 7) === \"phar://\") {\n            return 'Phar protocol not allowed.';\n        }\n        $finfo = finfo_open(FILEINFO_MIME_TYPE);\n        if ($value === '') {\n            return true;\n        }\n        if (is_executable($value)) {\n            if (finfo_file($finfo, $value) == \"application/x-executable\" || finfo_file($finfo, $value) == \"application/x-sharedlib\") {\n                finfo_close($finfo);\n                return true;\n            } else {\n                return 'Binary file not executable. It is of type: ' . finfo_file($finfo, $value);\n            }\n        } else {\n            return false;\n        }\n    }\n\n    public function testForWritableDir($value)\n    {\n        if (substr($value, 0, 7) === \"phar://\") {\n            return 'Phar protocol not allowed.';\n        }\n        if (!is_dir($value)) {\n            return 'Not a valid directory.';\n        }\n        if (!is_writeable($value)) {\n            return 'Not a writable directory.';\n        }\n        return true;\n    }\n\n    public function testDebug($value)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if ($this->testForNumeric($value) !== true) {\n            return 'This setting has to be a number between 0 and 2, with 0 disabling debug mode.';\n        }\n        if ($value === 0) {\n            return true;\n        }\n        return 'This setting has to be set to 0 on production systems. Ignore this warning if this is not the case.';\n    }\n\n    public function testDebugAdmin($value)\n    {\n        if ($this->testBool($value) !== true) {\n            return 'This setting has to be either true or false.';\n        }\n        if (!$value) {\n            return true;\n        }\n        return 'Enabling debug is not recommended. Turn this on temporarily if you need to see a stack trace to debug an issue, but make sure this is not left on.';\n    }\n\n    public function testDate($date)\n    {\n        if ($this->testForEmpty($date) !== true) {\n            return $this->testForEmpty($date);\n        }\n        if (!strtotime($date)) {\n            return 'The date that you have entered is invalid. Expected: yyyy-mm-dd';\n        }\n        return true;\n    }\n\n\n    public function getHost()\n    {\n        if (function_exists('apache_request_headers')) {\n            $headers = apache_request_headers();\n        } else {\n            $headers = $_SERVER;\n        }\n\n        if (array_key_exists('X-Forwarded-Host', $headers)) {\n            $host = $headers['X-Forwarded-Host'];\n        } else {\n            $host = $_SERVER['HTTP_HOST'];\n        }\n        return $host;\n    }\n\n    public function getProto()\n    {\n        if (function_exists('apache_request_headers')) {\n            $headers = apache_request_headers();\n        } else {\n            $headers = $_SERVER;\n        }\n\n        if (array_key_exists('X-Forwarded-Proto', $headers)) {\n            $proto = $headers['X-Forwarded-Proto'];\n        } else {\n            $proto = ((!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') || $_SERVER['SERVER_PORT'] == 443) === true ? 'HTTPS' : 'HTTP';\n        }\n        return $proto;\n    }\n\n    public function testBaseURL($value)\n    {\n        // only run this check via the GUI, via the CLI it won't work\n        if (php_sapi_name() == 'cli') {\n            if (!empty($value) && !preg_match('/^http(s)?:\\/\\//i', $value)) {\n                return 'Invalid baseurl, please make sure that the protocol is set.';\n            }\n            return true;\n        }\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if ($value != strtolower($this->getProto()) . '://' . $this->getHost()) {\n            return 'Invalid baseurl, it has to be in the \"https://FQDN\" format.';\n        }\n        return true;\n    }\n\n    public function testURL($value)\n    {\n        // only run this check via the GUI, via the CLI it won't work\n        if (!empty($value) && !preg_match('/^http(s)?:\\/\\//i', $value)) {\n            return 'Invalid baseurl, please make sure that the protocol is set.';\n        }\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        return true;\n    }\n\n    public function testDisableEmail($value)\n    {\n        if (isset($value) && $value) {\n            return 'E-mailing is blocked.';\n        }\n        return true;\n    }\n\n    public function testDisableCache($value)\n    {\n        if (isset($value) && $value) {\n            return 'Export caches are disabled.';\n        }\n        return true;\n    }\n\n    public function testLive($value)\n    {\n        if ($this->testBool($value) !== true) {\n            return $this->testBool($value);\n        }\n        if (!$value) {\n            return 'MISP disabled.';\n        }\n        return true;\n    }\n\n    public function testBool($value, $errorMessage = false)\n    {\n        if ($value !== true && $value !== false) {\n            if ($errorMessage) {\n                return $errorMessage;\n            }\n            return 'Value is not a boolean, make sure that you convert \\'true\\' to true for example.';\n        }\n        return true;\n    }\n\n    public function testBoolFalse($value, $errorMessage = false)\n    {\n        if ($this->testBool($value, $errorMessage) !== true) {\n            return $this->testBool($value, $errorMessage);\n        }\n        if ($value !== false) {\n            if ($errorMessage) {\n                return $errorMessage;\n            }\n            return 'It is highly recommended that this setting is disabled. Make sure you understand the impact of having this setting turned on.';\n        } else {\n            return true;\n        }\n    }\n\n    public function testParanoidSkipDb($value)\n    {\n        if (!empty(Configure::read('MISP.log_paranoid')) && empty($value)) {\n            return 'Perhaps consider skipping the database when using paranoid mode. A great number of entries will be added to your log database otherwise that will lead to performance degradation.';\n        }\n        return true;\n    }\n\n    public function testSalt($value)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if (strlen($value) < 32) {\n            return 'The salt has to be an at least 32 byte long string.';\n        }\n        if ($value == \"Rooraenietu8Eeyo<Qu2eeNfterd-dd+\") {\n            return 'This is the default salt shipped with the application and is therefore unsecure.';\n        }\n        return true;\n    }\n\n    public function testForTermsFile($value)\n    {\n        return $this->__testForFile($value, APP . 'files' . DS . 'terms');\n    }\n\n    public function testForStyleFile($value)\n    {\n        if (empty($value)) {\n            return true;\n        }\n        return $this->__testForFile($value, APP . 'webroot' . DS . 'css');\n    }\n\n    public function testForCustomImage($value)\n    {\n        return $this->__testForFile($value, APP . 'webroot' . DS . 'img' . DS . 'custom');\n    }\n\n    public function testPasswordLength($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 0) {\n            return 'Length cannot be negative, set a positive integer or 0 (to choose the default option).';\n        }\n        return true;\n    }\n\n    public function testForPortNumber($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 21 || $value > 65535) {\n            return 'Make sure that you pick a valid port number.';\n        }\n        return true;\n    }\n\n    public function testForZMQPortNumber($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 49152 || $value > 65535) {\n            return 'It is recommended that you pick a port number in the dynamic range (49152-65535). However, if you have a valid reason to use a different port, ignore this message.';\n        }\n        return true;\n    }\n\n    public function testPasswordRegex($value)\n    {\n        if (!empty($value) && @preg_match($value, 'test') === false) {\n            return 'Invalid regex.';\n        }\n        return true;\n    }\n\n    public function testPasswordResetText($value)\n    {\n        if (strpos($value, '$password') === false || strpos($value, '$username') === false || strpos($value, '$misp') === false) {\n            return 'The text served to the users must include the following replacement strings: \"$username\", \"$password\", \"$misp\"';\n        }\n        return true;\n    }\n\n    public function testForGPGBinary($value)\n    {\n        if (empty($value)) {\n            $value = $this->serverSettings['GnuPG']['binary']['value'];\n        }\n        if (file_exists($value)) {\n            return true;\n        }\n        return 'Could not find the GnuPG executable at the defined location.';\n    }\n\n    public function testForRPZDuration($value)\n    {\n        if (($this->testForNumeric($value) !== true && preg_match('/^[0-9]*[mhdw]$/i', $value)) || $value >= 0) {\n            return true;\n        } else {\n            return 'Negative seconds found. The following formats are accepted: seconds (positive integer), or duration (positive integer) followed by a letter denoting scale (such as m, h, d, w for minutes, hours, days, weeks)';\n        }\n    }\n\n    public function testForRPZBehaviour($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 0 || $value > 5) {\n            return 'Invalid setting, valid range is 0-5 (0 = DROP, 1 = NXDOMAIN, 2 = NODATA, 3 = walled garden, 4 = PASSTHRU, 5 = TCP-only.';\n        }\n        return true;\n    }\n\n    public function testForSightingVisibility($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 0 || $value > 2) {\n            return 'Invalid setting, valid range is 0-2 (0 = Event owner, 1 = Sighting reporters, 2 = Everyone.';\n        }\n        return true;\n    }\n\n    public function sightingsBeforeHook($setting, $value)\n    {\n        if ($value == true) {\n            $this->updateDatabase('addSightings');\n        }\n        return true;\n    }\n\n    public function testForRPZSerial($value)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if (!preg_match('/^((\\$date(\\d*)|\\$time|\\d*))$/', $value)) {\n            return 'Invalid format.';\n        }\n        return true;\n    }\n\n    public function testForRPZNS($value)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if (!preg_match('/^\\w+(\\.\\w+)*(\\.?) \\w+(\\.\\w+)*$/', $value)) {\n            return 'Invalid format.';\n        }\n        return true;\n    }\n\n    public function zmqAfterHook($setting, $value)\n    {\n        $pubSubTool = $this->getPubSubTool();\n        // If we are trying to change the enable setting to false, we don't need to test anything, just kill the server and return true.\n        if ($setting == 'Plugin.ZeroMQ_enable') {\n            if ($value == false || $value == 0) {\n                $pubSubTool->killService();\n                return true;\n            }\n        } elseif (!Configure::read('Plugin.ZeroMQ_enable')) {\n            // If we are changing any other ZeroMQ settings but the feature is disabled, don't reload the service\n            return true;\n        }\n        $pubSubTool->reloadServer();\n        return true;\n    }\n\n    public function disableCacheAfterHook($setting, $value)\n    {\n        if ($value) {\n            $this->Event = ClassRegistry::init('Event');\n            App::uses('Folder', 'Utility');\n            App::uses('File', 'Utility');\n            // delete all cache files\n            foreach ($this->Event->export_types as $type => $settings) {\n                $dir = new Folder(APP . 'tmp/cached_exports/' . $type);\n                // No caches created for this type of export, move on\n                if ($dir == null) {\n                    continue;\n                }\n                $files = $dir->find('.*' . $settings['extension']);\n                foreach ($files as $file) {\n                    $file = new File($dir->pwd() . DS . $file);\n                    $file->delete();\n                    $file->close();\n                }\n            }\n        }\n        return true;\n    }\n\n    public function correlationAfterHook($setting, $value)\n    {\n        if (!Configure::read('MISP.background_jobs')) {\n            $this->Attribute = ClassRegistry::init('Attribute');\n            if ($value) {\n                $k = $this->Attribute->purgeCorrelations();\n            } else {\n                $k = $this->Attribute->generateCorrelation();\n            }\n        } else {\n            if ($value == true) {\n                $jobType = 'jobPurgeCorrelation';\n                $jobTypeText = 'purge correlations';\n            } else {\n                $jobType = 'jobGenerateCorrelation';\n                $jobTypeText = 'generate correlation';\n            }\n            $job = ClassRegistry::init('Job');\n            $job->create();\n            $data = array(\n                    'worker' => 'default',\n                    'job_type' => $jobTypeText,\n                    'job_input' => 'All attributes',\n                    'status' => 0,\n                    'retries' => 0,\n                    'org' => 'ADMIN',\n                    'message' => 'Job created.',\n            );\n            $job->save($data);\n            $jobId = $job->id;\n            $process_id = CakeResque::enqueue(\n                    'default',\n                    'AdminShell',\n                    array($jobType, $jobId),\n                    true\n            );\n            $job->saveField('process_id', $process_id);\n        }\n    }\n\n    public function ipLogBeforeHook($setting, $value)\n    {\n        if ($setting == 'MISP.log_client_ip') {\n            if ($value == true) {\n                $this->updateDatabase('addIPLogging');\n            }\n        }\n        return true;\n    }\n\n    public function customAuthBeforeHook($setting, $value)\n    {\n        if (!empty($value)) {\n            $this->updateDatabase('addCustomAuth');\n        }\n        $this->cleanCacheFiles();\n        return true;\n    }\n\n    // never come here directly, always go through a secondary check like testForTermsFile in order to also pass along the expected file path\n    private function __testForFile($value, $path)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if (!$this->checkFilename($value)) {\n            return 'Invalid filename.';\n        }\n        $file = $path . DS . $value;\n        if (!file_exists($file)) {\n            return 'Could not find the specified file. Make sure that it is uploaded into the following directory: ' . $path;\n        }\n        return true;\n    }\n\n    private function __serverSettingNormaliseValue($data, $value, $setting)\n    {\n        if (!empty($data['type'])) {\n            if ($data['type'] == 'boolean') {\n                $value = $value ? true : false;\n            } elseif ($data['type'] == 'numeric') {\n                $value = intval($value);\n            }\n        }\n        return $value;\n    }\n\n    public function getSettingData($setting_name)\n    {\n        // invalidate config.php from php opcode cache\n        if (function_exists('opcache_reset')) {\n            opcache_reset();\n        }\n        if (strpos($setting_name, 'Plugin.Enrichment') !== false || strpos($setting_name, 'Plugin.Import') !== false || strpos($setting_name, 'Plugin.Export') !== false || strpos($setting_name, 'Plugin.Cortex') !== false) {\n            $serverSettings = $this->getCurrentServerSettings();\n        } else {\n            $serverSettings = $this->serverSettings;\n        }\n        $relevantSettings = (array_intersect_key(Configure::read(), $serverSettings));\n        $setting = false;\n        foreach ($serverSettings as $k => $s) {\n            if (isset($s['branch'])) {\n                foreach ($s as $ek => $es) {\n                    if ($ek != 'branch') {\n                        if ($setting_name == $k . '.' . $ek) {\n                            $setting = $es;\n                            continue 2;\n                        }\n                    }\n                }\n            } else {\n                if ($setting_name == $k) {\n                    $setting = $s;\n                    continue;\n                }\n            }\n        }\n        if (!empty($setting)) {\n            $setting['name'] = $setting_name;\n        }\n        return $setting;\n    }\n\n    public function serverSettingsEditValue($user, $setting, $value, $forceSave = false)\n    {\n        if (isset($setting['beforeHook'])) {\n            $beforeResult = call_user_func_array(array($this, $setting['beforeHook']), array($setting['name'], $value));\n            if ($beforeResult !== true) {\n                $this->Log = ClassRegistry::init('Log');\n                $this->Log->create();\n                $result = $this->Log->save(array(\n                        'org' => $user['Organisation']['name'],\n                        'model' => 'Server',\n                        'model_id' => 0,\n                        'email' => $user['email'],\n                        'action' => 'serverSettingsEdit',\n                        'user_id' => $user['id'],\n                        'title' => 'Server setting issue',\n                        'change' => 'There was an issue witch changing ' . $setting['name'] . ' to ' . $value  . '. The error message returned is: ' . $beforeResult . 'No changes were made.',\n                ));\n                return $beforeResult;\n            }\n        }\n        $value = trim($value);\n        if ($setting['type'] == 'boolean') {\n            $value = ($value ? true : false);\n        }\n        if ($setting['type'] == 'numeric') {\n            $value = intval($value);\n        }\n        if (!empty($setting['test'])) {\n            $testResult = $this->{$setting['test']}($value);\n        } else {\n            $testResult = true;  # No test defined for this setting: cannot fail\n        }\n        if (!$forceSave && $testResult !== true) {\n            if ($testResult === false) {\n                $errorMessage = $setting['errorMessage'];\n            } else {\n                $errorMessage = $testResult;\n            }\n            return $errorMessage;\n        } else {\n            $oldValue = Configure::read($setting['name']);\n            $settingSaveResult = $this->serverSettingsSaveValue($setting['name'], $value);\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            if ($settingSaveResult) {\n                $result = $this->Log->save(array(\n                        'org' => $user['Organisation']['name'],\n                        'model' => 'Server',\n                        'model_id' => 0,\n                        'email' => $user['email'],\n                        'action' => 'serverSettingsEdit',\n                        'user_id' => $user['id'],\n                        'title' => 'Server setting changed',\n                        'change' => $setting['name'] . ' (' . $oldValue . ') => (' . $value . ')',\n                ));\n                // execute after hook\n                if (isset($setting['afterHook'])) {\n                    $afterResult = call_user_func_array(array($this, $setting['afterHook']), array($setting['name'], $value));\n                    if ($afterResult !== true) {\n                        $this->Log->create();\n                        $result = $this->Log->save(array(\n                                'org' => $user['Organisation']['name'],\n                                'model' => 'Server',\n                                'model_id' => 0,\n                                'email' => $user['email'],\n                                'action' => 'serverSettingsEdit',\n                                'user_id' => $user['id'],\n                                'title' => 'Server setting issue',\n                                'change' => 'There was an issue after setting a new setting. The error message returned is: ' . $afterResult,\n                        ));\n                        return $afterResult;\n                    }\n                }\n                return true;\n            } else {\n                return __('Something went wrong. MISP tried to save a malformed config file. Setting change reverted.');\n            }\n        }\n    }\n\n    public function serverSettingsSaveValue($setting, $value)\n    {\n        // validate if current config.php is intact:\n        $current = file_get_contents(APP . 'Config' . DS . 'config.php');\n        $current = trim($current);\n        if (strlen($current) < 20) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: Tried to modify server settings but current config is broken.',\n            ));\n            return false;\n        }\n        copy(APP . 'Config' . DS . 'config.php', APP . 'Config' . DS . 'config.php.bk');\n        $settingObject = $this->getCurrentServerSettings();\n        foreach ($settingObject as $branchName => $branch) {\n            if (!isset($branch['level'])) {\n                foreach ($branch as $settingName => $settingObject) {\n                    if ($setting == $branchName . '.' . $settingName) {\n                        $value = $this->__serverSettingNormaliseValue($settingObject, $value, $setting);\n                    }\n                }\n            } else {\n                if ($setting == $branchName) {\n                    $value = $this->__serverSettingNormaliseValue($branch, $value, $setting);\n                }\n            }\n        }\n        Configure::write($setting, $value);\n        $arrayFix = array(\n            'Security.auth',\n            'ApacheSecureAuth.ldapFilter'\n        );\n        foreach ($arrayFix as $settingFix) {\n            if (Configure::read($settingFix) && is_array(Configure::read($settingFix)) && !empty(Configure::read($settingFix))) {\n                $arrayElements = array();\n                foreach (Configure::read($settingFix) as $array) {\n                    if (!in_array($array, $arrayElements)) {\n                        $arrayElements[] = $array;\n                    }\n                }\n                Configure::write($settingFix, $arrayElements);\n            }\n        }\n        $settingsToSave = array(\n            'debug', 'MISP', 'GnuPG', 'SMIME', 'Proxy', 'SecureAuth',\n            'Security', 'Session.defaults', 'Session.timeout', 'Session.cookieTimeout',\n            'Session.autoRegenerate', 'Session.checkAgent', 'site_admin_debug',\n            'Plugin', 'CertAuth', 'ApacheShibbAuth', 'ApacheSecureAuth'\n        );\n        $settingsArray = array();\n        foreach ($settingsToSave as $setting) {\n            $settingsArray[$setting] = Configure::read($setting);\n        }\n        $settingsString = var_export($settingsArray, true);\n        $settingsString = '<?php' . \"\\n\" . '$config = ' . $settingsString . ';';\n        if (function_exists('opcache_reset')) {\n            opcache_reset();\n        }\n        if (empty(Configure::read('MISP.server_settings_skip_backup_rotate'))) {\n            $randomFilename = $this->generateRandomFileName();\n            // To protect us from 2 admin users having a concurent file write to the config file, solar flares and the bogeyman\n            file_put_contents(APP . 'Config' . DS . $randomFilename, $settingsString);\n            rename(APP . 'Config' . DS . $randomFilename, APP . 'Config' . DS . 'config.php');\n            $config_saved = file_get_contents(APP . 'Config' . DS . 'config.php');\n            // if the saved config file is empty, restore the backup.\n            if (strlen($config_saved) < 20) {\n                copy(APP . 'Config' . DS . 'config.php.bk', APP . 'Config' . DS . 'config.php');\n                $this->Log = ClassRegistry::init('Log');\n                $this->Log->create();\n                $this->Log->save(array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => $id,\n                        'email' => 'SYSTEM',\n                        'action' => 'error',\n                        'user_id' => 0,\n                        'title' => 'Error: Something went wrong saving the config file, reverted to backup file.',\n                ));\n                return false;\n            }\n        } else {\n            file_put_contents(APP . 'Config' . DS . 'config.php', $settingsString);\n        }\n        return true;\n    }\n\n    public function checkVersion($newest)\n    {\n        $version_array = $this->checkMISPVersion();\n        $current = 'v' . $version_array['major'] . '.' . $version_array['minor'] . '.' . $version_array['hotfix'];\n        $newest_array = $this->__dissectVersion($newest);\n        $upToDate = $this->__compareVersions(array($version_array['major'], $version_array['minor'], $version_array['hotfix']), $newest_array, 0);\n        return array('current' => $current, 'newest' => $newest, 'upToDate' => $upToDate);\n    }\n\n    private function __dissectVersion($version)\n    {\n        $version = substr($version, 1);\n        return explode('.', $version);\n    }\n\n    private function __compareVersions($current, $newest, $i)\n    {\n        if ($current[$i] == $newest[$i]) {\n            if ($i < 2) {\n                return $this->__compareVersions($current, $newest, $i+1);\n            } else {\n                return 'same';\n            }\n        } elseif ($current[$i] < $newest[$i]) {\n            return 'older';\n        } else {\n            return 'newer';\n        }\n    }\n\n    public function getFileRules()\n    {\n        $validItems = array(\n                'orgs' => array(\n                        'name' => __('Organisation logos'),\n                        'description' => __('The logo used by an organisation on the event index, event view, discussions, proposals, etc. Make sure that the filename is in the org.png format, where org is the case-sensitive organisation name.'),\n                        'expected' => array(),\n                        'valid_format' => __('48x48 pixel .png files'),\n                        'path' => APP . 'webroot' . DS . 'img' . DS . 'orgs',\n                        'regex' => '.*\\.(png|PNG)$',\n                        'regex_error' => __('Filename must be in the following format: *.png'),\n                        'files' => array(),\n                ),\n                'img' => array(\n                        'name' => __('Additional image files'),\n                        'description' => __('Image files uploaded into this directory can be used for various purposes, such as for the login page logos'),\n                        'expected' => array(\n                                'MISP.footer_logo' => Configure::read('MISP.footer_logo'),\n                                'MISP.home_logo' => Configure::read('MISP.home_logo'),\n                                'MISP.welcome_logo' => Configure::read('MISP.welcome_logo'),\n                                'MISP.welcome_logo2' => Configure::read('MISP.welcome_logo2'),\n                        ),\n                        'valid_format' => __('text/html if served inline, anything that conveys the terms of use if served as download'),\n                        'path' => APP . 'webroot' . DS . 'img' . DS . 'custom',\n                        'regex' => '.*\\.(png|PNG)$',\n                        'regex_error' => __('Filename must be in the following format: *.png'),\n                        'files' => array(),\n                ),\n        );\n        return $validItems;\n    }\n\n    public function grabFiles()\n    {\n        $validItems = $this->getFileRules();\n        App::uses('Folder', 'Utility');\n        App::uses('File', 'Utility');\n        foreach ($validItems as $k => $item) {\n            $dir = new Folder($item['path']);\n            $files = $dir->find($item['regex'], true);\n            foreach ($files as $file) {\n                $f = new File($item['path'] . DS . $file);\n                $validItems[$k]['files'][] = array('filename' => $file, 'filesize' => $f->size(), 'read' => $f->readable(), 'write' => $f->writable(), 'execute' => $f->executable());\n            }\n        }\n        return $validItems;\n    }\n\n    public function runConnectionTest($id)\n    {\n        $server = $this->find('first', array('conditions' => array('Server.id' => $id)));\n        $HttpSocket = $this->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $uri = $server['Server']['url'] . '/servers/getVersion';\n        try {\n            $response = $HttpSocket->get($uri, false, $request);\n        } catch (Exception $e) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: Connection test failed. Reason: ' . json_encode($e->getMessage()),\n            ));\n            return array('status' => 2);\n        }\n        if ($response->isOk()) {\n            return array('status' => 1, 'message' => $response->body());\n        } else {\n            if ($response->code == '403') {\n                return array('status' => 4);\n            }\n            if ($response->code == '405') {\n                try {\n                    $responseText = json_decode($response->body, true)['message'];\n                } catch (Exception $e) {\n                    return array('status' => 3);\n                }\n                if ($responseText === 'Your user account is expecting a password change, please log in via the web interface and change it before proceeding.') {\n                    return array('status' => 5);\n                } elseif ($responseText === 'You have not accepted the terms of use yet, please log in via the web interface and accept them.') {\n                    return array('status' => 6);\n                }\n            }\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: Connection test failed. Returned data is in the change field.',\n                    'change' => sprintf(\n                        'response () => (%s), response-code () => (%s)',\n                        $response->body,\n                        $response->code\n                    )\n            ));\n            return array('status' => 3);\n        }\n    }\n\n    public function runPOSTtest($id)\n    {\n        $server = $this->find('first', array('conditions' => array('Server.id' => $id)));\n        $HttpSocket = $this->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $testFile = file_get_contents(APP . 'files/scripts/test_payload.txt');\n        $uri = $server['Server']['url'] . '/servers/postTest';\n        $this->Log = ClassRegistry::init('Log');\n        try {\n            $response = $HttpSocket->post($uri, json_encode(array('testString' => $testFile)), $request);\n            $response = json_decode($response, true);\n        } catch (Exception $e) {\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: POST connection test failed. Reason: ' . json_encode($e->getMessage()),\n            ));\n            return 8;\n        }\n        if (!isset($response['body']['testString']) || $response['body']['testString'] !== $testFile) {\n            $responseString = isset($response['body']['testString']) ? $response['body']['testString'] : 'Response was empty.';\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: POST connection test failed due to the message body not containing the expected data. Response: ' . PHP_EOL . PHP_EOL . $responseString,\n            ));\n            return 9;\n        }\n        $headers = array('Accept', 'Content-type');\n        foreach ($headers as $header) {\n            if (!isset($response['headers'][$header]) || $response['headers'][$header] != 'application/json') {\n                $responseHeader = isset($response['headers'][$header]) ? $response['headers'][$header] : 'Header was not set.';\n                $this->Log->create();\n                $this->Log->save(array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => $id,\n                        'email' => 'SYSTEM',\n                        'action' => 'error',\n                        'user_id' => 0,\n                        'title' => 'Error: POST connection test failed due to a header not matching the expected value. Expected: \"application/json\", received \"' . $responseHeader,\n                ));\n                return 10;\n            }\n        }\n        return 1;\n    }\n\n    public function checkVersionCompatibility($id, $user = array(), $HttpSocket = false)\n    {\n        // for event publishing when we don't have a user.\n        if (empty($user)) {\n            $user = array('Organisation' => array('name' => 'SYSTEM'), 'email' => 'SYSTEM', 'id' => 0);\n        }\n        App::uses('Folder', 'Utility');\n        $file = new File(ROOT . DS . 'VERSION.json', true);\n        $localVersion = json_decode($file->read(), true);\n        $file->close();\n        $server = $this->find('first', array('conditions' => array('Server.id' => $id)));\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        $request = $this->setupSyncRequest($server);\n        $uri = $server['Server']['url'] . '/servers/getVersion';\n        try {\n            $response = $HttpSocket->get($uri, '', $request);\n        } catch (Exception $e) {\n            $error = $e->getMessage();\n        }\n        if (!isset($response) || $response->code != '200') {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            if (isset($response->code)) {\n                $title = 'Error: Connection to the server has failed.' . (isset($response->code) ? ' Returned response code: ' . $response->code : '');\n            } else {\n                $title = 'Error: Connection to the server has failed. The returned exception\\'s error message was: ' . $e->getMessage();\n            }\n            $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => 'error',\n                    'user_id' => $user['id'],\n                    'title' => $title\n            ));\n            return $title;\n        }\n        $remoteVersion = json_decode($response->body, true);\n        $canPush = isset($remoteVersion['perm_sync']) ? $remoteVersion['perm_sync'] : false;\n        $remoteVersion = explode('.', $remoteVersion['version']);\n        if (!isset($remoteVersion[0])) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $message = __('Error: Server didn\\'t send the expected response. This may be because the remote server version is outdated.');\n            $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => 'error',\n                    'user_id' => $user['id'],\n                    'title' => $message,\n            ));\n            return $message;\n        }\n        $response = false;\n        $success = false;\n        $issueLevel = \"warning\";\n        if ($localVersion['major'] > $remoteVersion[0]) {\n            $response = \"Sync to Server ('\" . $id . \"') aborted. The remote instance's MISP version is behind by a major version.\";\n        }\n        if ($response === false && $localVersion['major'] < $remoteVersion[0]) {\n            $response = \"Sync to Server ('\" . $id . \"') aborted. The remote instance is at least a full major version ahead - make sure you update your MISP instance!\";\n        }\n        if ($response === false && $localVersion['minor'] > $remoteVersion[1]) {\n            $response = \"Sync to Server ('\" . $id . \"') aborted. The remote instance's MISP version is behind by a minor version.\";\n        }\n        if ($response === false && $localVersion['minor'] < $remoteVersion[1]) {\n            $response = \"Sync to Server ('\" . $id . \"') aborted. The remote instance is at least a full minor version ahead - make sure you update your MISP instance!\";\n        }\n\n        // if we haven't set a message yet, we're good to go. We are only behind by a hotfix version\n        if ($response === false) {\n            $success = true;\n        } else {\n            $issueLevel = \"error\";\n        }\n        if ($response === false && $localVersion['hotfix'] > $remoteVersion[2]) {\n            $response = \"Sync to Server ('\" . $id . \"') initiated, but the remote instance is a few hotfixes behind.\";\n        }\n        if ($response === false && $localVersion['hotfix'] < $remoteVersion[2]) {\n            $response = \"Sync to Server ('\" . $id . \"') initiated, but the remote instance is a few hotfixes ahead. Make sure you keep your instance up to date!\";\n        }\n        if (empty($response) && $remoteVersion[2] < 111) {\n            $response = \"Sync to Server ('\" . $id . \"') initiated, but version 2.4.111 is required in order to be able to pull proposals from the remote side.\";\n        }\n\n        if ($response !== false) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => $issueLevel,\n                    'user_id' => $user['id'],\n                    'title' => ucfirst($issueLevel) . ': ' . $response,\n            ));\n        }\n        return array('success' => $success, 'response' => $response, 'canPush' => $canPush, 'version' => $remoteVersion);\n    }\n\n    public function isJson($string)\n    {\n        return (json_last_error() == JSON_ERROR_NONE);\n    }\n\n    public function captureServer($server, $user)\n    {\n        if (isset($server[0])) {\n            $server = $server[0];\n        }\n        if ($server['url'] == Configure::read('MISP.baseurl')) {\n            return 0;\n        }\n        $existingServer = $this->find('first', array(\n                'recursive' => -1,\n                'conditions' => array('url' => $server['url'])\n        ));\n        // unlike with other capture methods, if we find a server that we don't know\n        // we don't want to save it.\n        if (empty($existingServer)) {\n            return false;\n        }\n        return $existingServer[$this->alias]['id'];\n    }\n\n    public function dbSpaceUsage()\n    {\n        $dataSource = $this->getDataSource()->config['datasource'];\n        if ($dataSource == 'Database/Mysql') {\n            $sql = sprintf(\n                'select table_name, sum((data_length+index_length)/1024/1024) AS used, sum(data_free)/1024/1024 reclaimable from information_schema.tables where table_schema = %s group by table_name;',\n                \"'\" . $this->getDataSource()->config['database'] . \"'\"\n            );\n            $sqlResult = $this->query($sql);\n            $result = array();\n            foreach ($sqlResult as $temp) {\n                foreach ($temp[0] as $k => $v) {\n                    $temp[0][$k] = round($v, 2) . 'MB';\n                }\n                $temp[0]['table'] = $temp['tables']['table_name'];\n                $result[] = $temp[0];\n            }\n            return $result;\n        }\n        else if ($dataSource == 'Database/Postgres') {\n            $sql = sprintf(\n                'select table_name as table, pg_total_relation_size(%s||%s||table_name) as used from information_schema.tables where table_schema = %s group by table_name;',\n                \"'\" . $this->getDataSource()->config['database'] . \"'\",\n                \"'.'\",\n                \"'\" . $this->getDataSource()->config['database'] . \"'\"\n            );\n            $sqlResult = $this->query($sql);\n            $result = array();\n            foreach ($sqlResult as $temp) {\n                foreach ($temp[0] as $k => $v) {\n                    if ($k == \"table\") {\n                        continue;\n                    }\n                    $temp[0][$k] = round($v / 1024 / 1024, 2) . 'MB';\n                }\n                $temp[0]['reclaimable'] = '0MB';\n                $result[] = $temp[0];\n            }\n            return $result;\n        }\n\n    }\n\n    public function writeableDirsDiagnostics(&$diagnostic_errors)\n    {\n        App::uses('File', 'Utility');\n        App::uses('Folder', 'Utility');\n        // check writeable directories\n        $writeableDirs = array(\n                '/tmp' => 0,\n                APP . 'tmp' => 0,\n                APP . 'files' => 0,\n                APP . 'files' . DS . 'scripts' . DS . 'tmp' => 0,\n                APP . 'tmp' . DS . 'csv_all' => 0,\n                APP . 'tmp' . DS . 'csv_sig' => 0,\n                APP . 'tmp' . DS . 'md5' => 0,\n                APP . 'tmp' . DS . 'sha1' => 0,\n                APP . 'tmp' . DS . 'snort' => 0,\n                APP . 'tmp' . DS . 'suricata' => 0,\n                APP . 'tmp' . DS . 'text' => 0,\n                APP . 'tmp' . DS . 'xml' => 0,\n                APP . 'tmp' . DS . 'files' => 0,\n                APP . 'tmp' . DS . 'logs' => 0,\n                APP . 'tmp' . DS . 'bro' => 0,\n        );\n        foreach ($writeableDirs as $path => &$error) {\n            $dir = new Folder($path);\n            if (is_null($dir->path)) {\n                $error = 1;\n            }\n            $file = new File($path . DS . 'test.txt', true);\n            if ($error == 0 && !$file->write('test')) {\n                $error = 2;\n            }\n            if ($error != 0) {\n                $diagnostic_errors++;\n            }\n            $file->delete();\n            $file->close();\n        }\n        return $writeableDirs;\n    }\n\n    public function writeableFilesDiagnostics(&$diagnostic_errors)\n    {\n        $writeableFiles = array(\n                APP . 'Config' . DS . 'config.php' => 0,\n                ROOT .  DS . '.git' . DS . 'ORIG_HEAD' => 0,\n        );\n        foreach ($writeableFiles as $path => &$error) {\n            if (!file_exists($path)) {\n                $error = 1;\n                continue;\n            }\n            if (!is_writeable($path)) {\n                $error = 2;\n                $diagnostic_errors++;\n            }\n        }\n        return $writeableFiles;\n    }\n\n    public function readableFilesDiagnostics(&$diagnostic_errors)\n    {\n        $readableFiles = array(\n                APP . 'files' . DS . 'scripts' . DS . 'stixtest.py' => 0\n        );\n        foreach ($readableFiles as $path => &$error) {\n            if (!is_readable($path)) {\n                $error = 1;\n                continue;\n            }\n        }\n        return $readableFiles;\n    }\n\n    public function yaraDiagnostics(&$diagnostic_errors)\n    {\n        $scriptResult = shell_exec($this->getPythonVersion() . ' ' . APP . 'files' . DS . 'scripts' . DS . 'yaratest.py');\n        $scriptResult = json_decode($scriptResult, true);\n        return array('operational' => $scriptResult['success'], 'plyara' => $scriptResult['plyara']);\n    }\n\n    public function stixDiagnostics(&$diagnostic_errors, &$stixVersion, &$cyboxVersion, &$mixboxVersion, &$maecVersion, &$stix2Version, &$pymispVersion)\n    {\n        $result = array();\n        $expected = array('stix' => '1.2.0.6', 'cybox' => '2.1.0.18.dev0', 'mixbox' => '1.0.3', 'maec' => '4.1.0.14', 'stix2' => '1.1.2', 'pymisp' => '>2.4.93');\n        // check if the STIX and Cybox libraries are working using the test script stixtest.py\n        $scriptResult = shell_exec($this->getPythonVersion() . ' ' . APP . 'files' . DS . 'scripts' . DS . 'stixtest.py');\n        $scriptResult = json_decode($scriptResult, true);\n        if ($scriptResult == null) {\n            return array('operational' => 0, 'stix' => array('expected' => $expected['stix']), 'cybox' => array('expected' => $expected['cybox']), 'mixbox' => array('expected' => $expected['mixbox']), 'maec' => array('expected' => $expected['maec']), 'stix2' => array('expected' => $expected['stix2']), 'pymisp' => array('expected' => $expected['pymisp']));\n        }\n        $scriptResult['operational'] = $scriptResult['success'];\n        if ($scriptResult['operational'] == 0) {\n            $diagnostic_errors++;\n        }\n        $result['operational'] = $scriptResult['operational'];\n        foreach ($expected as $package => $version) {\n            $result[$package]['version'] = $scriptResult[$package];\n            $result[$package]['expected'] = $expected[$package];\n            if ($expected[$package][0] === '>') {\n                $expected[$package] = trim($expected[$package], '>');\n                $result[$package]['status'] = (version_compare($result[$package]['version'], $expected[$package]) >= 0) ? 1 : 0;\n            } else {\n                $result[$package]['status'] = $result[$package]['version'] == $result[$package]['expected'] ? 1 : 0;\n            }\n            if ($result[$package]['status'] == 0) {\n                $diagnostic_errors++;\n            }\n            ${$package . 'Version'}[0] = str_replace('$current', $result[$package]['version'], ${$package . 'Version'}[0]);\n            ${$package . 'Version'}[0] = str_replace('$expected', $result[$package]['expected'], ${$package . 'Version'}[0]);\n        }\n        return $result;\n    }\n\n    public function gpgDiagnostics(&$diagnostic_errors)\n    {\n        $gpgStatus = 0;\n        if (Configure::read('GnuPG.email') && Configure::read('GnuPG.homedir')) {\n            $continue = true;\n            try {\n                require_once 'Crypt/GPG.php';\n                $gpg = new Crypt_GPG(array('homedir' => Configure::read('GnuPG.homedir'), 'gpgconf' => Configure::read('GnuPG.gpgconf'), 'binary' => (Configure::read('GnuPG.binary') ? Configure::read('GnuPG.binary') : '/usr/bin/gpg')));\n            } catch (Exception $e) {\n                $gpgStatus = 2;\n                $continue = false;\n            }\n            if ($continue) {\n                try {\n                    $key = $gpg->addSignKey(Configure::read('GnuPG.email'), Configure::read('GnuPG.password'));\n                } catch (Exception $e) {\n                    $gpgStatus = 3;\n                    $continue = false;\n                }\n            }\n            if ($continue) {\n                try {\n                    $gpgStatus = 0;\n                    $signed = $gpg->sign('test', Crypt_GPG::SIGN_MODE_CLEAR);\n                } catch (Exception $e) {\n                    $gpgStatus = 4;\n                }\n            }\n        } else {\n            $gpgStatus = 1;\n        }\n        if ($gpgStatus != 0) {\n            $diagnostic_errors++;\n        }\n        return $gpgStatus;\n    }\n\n    public function zmqDiagnostics(&$diagnostic_errors)\n    {\n        if (!Configure::read('Plugin.ZeroMQ_enable')) {\n            return 1;\n        }\n        $pubSubTool = $this->getPubSubTool();\n        if (!$pubSubTool->checkIfPythonLibInstalled()) {\n            $diagnostic_errors++;\n            return 2;\n        }\n        if ($pubSubTool->checkIfRunning()) {\n            return 0;\n        }\n        $diagnostic_errors++;\n        return 3;\n    }\n\n    public function moduleDiagnostics(&$diagnostic_errors, $type = 'Enrichment')\n    {\n        $this->Module = ClassRegistry::init('Module');\n        $types = array('Enrichment', 'Import', 'Export', 'Cortex');\n        $diagnostic_errors++;\n        if (Configure::read('Plugin.' . $type . '_services_enable')) {\n            $exception = false;\n            $result = $this->Module->getModules(false, $type, $exception);\n            if ($exception) {\n                return $exception;\n            }\n            if (empty($result)) {\n                return 2;\n            }\n            $diagnostic_errors--;\n            return 0;\n        }\n        return 1;\n    }\n\n    public function proxyDiagnostics(&$diagnostic_errors)\n    {\n        $proxyStatus = 0;\n        $proxy = Configure::read('Proxy');\n        if (!empty($proxy['host'])) {\n            App::uses('SyncTool', 'Tools');\n            $syncTool = new SyncTool();\n            try {\n                $HttpSocket = $syncTool->setupHttpSocket();\n                $proxyResponse = $HttpSocket->get('https://www.github.com/');\n            } catch (Exception $e) {\n                $proxyStatus = 2;\n            }\n            if (empty($proxyResponse) || $proxyResponse->code > 399) {\n                $proxyStatus = 2;\n            }\n        } else {\n            $proxyStatus = 1;\n        }\n        if ($proxyStatus > 1) {\n            $diagnostic_errors++;\n        }\n        return $proxyStatus;\n    }\n\n    public function sessionDiagnostics(&$diagnostic_errors = 0, &$sessionCount = '')\n    {\n        if (Configure::read('Session.defaults') !== 'database') {\n            $sessionCount = 'N/A';\n            return 2;\n        }\n        $sql = 'SELECT COUNT(id) AS session_count FROM cake_sessions WHERE expires < ' . time() . ';';\n        $sqlResult = $this->query($sql);\n        if (isset($sqlResult[0][0])) {\n            $sessionCount = $sqlResult[0][0]['session_count'];\n        } else {\n            $sessionCount = 'Error';\n            return 3;\n        }\n        if ($sessionCount > 1000) {\n            $diagnostic_errors++;\n            return 1;\n        }\n        return 0;\n    }\n\n    public function workerDiagnostics(&$workerIssueCount)\n    {\n        try {\n            $this->ResqueStatus = new ResqueStatus\\ResqueStatus(Resque::redis());\n        } catch (Exception $e) {\n            // redis connection failed\n            return array(\n                    'cache' => array('ok' => false),\n                    'default' => array('ok' => false),\n                    'email' => array('ok' => false),\n                    'prio' => array('ok' => false),\n                    'scheduler' => array('ok' => false)\n            );\n        }\n        $workers = $this->ResqueStatus->getWorkers();\n        if (function_exists('posix_getpwuid')) {\n            $currentUser = posix_getpwuid(posix_geteuid());\n            $currentUser = $currentUser['name'];\n        } else {\n            $currentUser = trim(shell_exec('whoami'));\n        }\n        $worker_array = array(\n                'cache' => array('ok' => true),\n                'default' => array('ok' => true),\n                'email' => array('ok' => true),\n                'prio' => array('ok' => true),\n                'scheduler' => array('ok' => true)\n        );\n        $procAccessible = file_exists('/proc');\n        foreach ($workers as $pid => $worker) {\n            $entry = ($worker['type'] == 'regular') ? $worker['queue'] : $worker['type'];\n            $correct_user = ($currentUser === $worker['user']);\n            if (!is_numeric($pid)) {\n                throw new MethodNotAllowedException('Non numeric PID found.');\n            }\n            if ($procAccessible) {\n                $alive = $correct_user ? (file_exists('/proc/' . addslashes($pid))) : false;\n            } else {\n                $alive = 'N/A';\n            }\n            $ok = true;\n            if (!$alive || !$correct_user) {\n                $ok = false;\n                $workerIssueCount++;\n                $worker_array[$entry]['ok'] = false;\n            }\n            $worker_array[$entry]['workers'][] = array('pid' => $pid, 'user' => $worker['user'], 'alive' => $alive, 'correct_user' => $correct_user, 'ok' => $ok);\n        }\n        foreach ($worker_array as $k => $queue) {\n            if ($k != 'scheduler') {\n                $worker_array[$k]['jobCount'] = CakeResque::getQueueSize($k);\n            }\n            if (!isset($queue['workers'])) {\n                $workerIssueCount++;\n                $worker_array[$k]['ok'] = false;\n            }\n        }\n        $worker_array['proc_accessible'] = $procAccessible;\n        $worker_array['controls'] = 1;\n        if (Configure::check('MISP.manage_workers')) {\n            $worker_array['controls'] = Configure::read('MISP.manage_workers');\n        }\n        return $worker_array;\n    }\n\n    public function retrieveCurrentSettings($branch, $subString)\n    {\n        $settings = array();\n        foreach ($this->serverSettings[$branch] as $settingName => $setting) {\n            if (strpos($settingName, $subString) !== false) {\n                $settings[$settingName] = $setting['value'];\n                if (Configure::read('Plugin.' . $settingName)) {\n                    $settings[$settingName] = Configure::read('Plugin.' . $settingName);\n                }\n                if (isset($setting['options'])) {\n                    $settings[$settingName] = $setting['options'][$settings[$settingName]];\n                }\n            }\n        }\n        return $settings;\n    }\n\n    public function killWorker($pid, $user)\n    {\n        if (!is_numeric($pid)) {\n            throw new MethodNotAllowedException('Non numeric PID found!');\n        }\n        $this->ResqueStatus = new ResqueStatus\\ResqueStatus(Resque::redis());\n        $workers = $this->ResqueStatus->getWorkers();\n        $this->Log = ClassRegistry::init('Log');\n        if (isset($workers[$pid])) {\n            $worker = $workers[$pid];\n            if (substr_count(trim(shell_exec('ps -p ' . $pid)), PHP_EOL) > 0 ? true : false) {\n                shell_exec('kill ' . $pid . ' > /dev/null 2>&1 &');\n                $this->__logRemoveWorker($user, $pid, $worker['queue'], false);\n            } else {\n                $this->ResqueStatus->removeWorker($pid);\n                $this->__logRemoveWorker($user, $pid, $worker['queue'], true);\n            }\n            $this->ResqueStatus->removeWorker($pid);\n        }\n    }\n\n    public function workerRemoveDead($user = false)\n    {\n        $this->ResqueStatus = new ResqueStatus\\ResqueStatus(Resque::redis());\n        $workers = $this->ResqueStatus->getWorkers();\n        if (function_exists('posix_getpwuid')) {\n            $currentUser = posix_getpwuid(posix_geteuid());\n            $currentUser = $currentUser['name'];\n        } else {\n            $currentUser = trim(shell_exec('whoami'));\n        }\n        foreach ($workers as $pid => $worker) {\n            if (!is_numeric($pid)) {\n                throw new MethodNotAllowedException('Non numeric PID found!');\n            }\n            $pidTest = substr_count(trim(shell_exec('ps -p ' . $pid)), PHP_EOL) > 0 ? true : false;\n            if ($worker['user'] == $currentUser && !$pidTest) {\n                $this->ResqueStatus->removeWorker($pid);\n                $this->__logRemoveWorker($user, $pid, $worker['queue'], true);\n            }\n        }\n    }\n\n    private function __logRemoveWorker($user, $pid, $queue, $dead = false)\n    {\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        if (empty($user)) {\n            $user = array(\n                'id' => 0,\n                'Organisation' => array(\n                    'name' => 'SYSTEM'\n                ),\n                'email' => 'SYSTEM'\n            );\n        }\n        $type = $dead ? 'dead' : 'kill';\n        $text = array(\n            'dead' => array(\n                'action' => 'remove_dead_workers',\n                'title' => __('Removing a dead worker.'),\n                'change' => sprintf(__('Removing dead worker data. Worker was of type %s with pid %s'), $queue, $pid)\n            ),\n            'kill' => array(\n                'action' => 'stop_worker',\n                'title' => __('Stopping a worker.'),\n                'change' => sprintf(__('Stopping a worker. Worker was of type %s with pid %s'), $queue, $pid)\n            )\n        );\n        $this->Log->save(array(\n            'org' => $user['Organisation']['name'],\n            'model' => 'User',\n            'model_id' => $user['id'],\n            'email' => $user['email'],\n            'action' => $text[$type]['action'],\n            'user_id' => $user['id'],\n            'title' => $text[$type]['title'],\n            'change' => $text[$type]['change']\n        ));\n    }\n\n    /* returns the version string of a connected instance\n     * error codes:\n     * 1: received non json response\n     * 2: no route to host\n     * 3: empty result set\n     */\n    public function getRemoteVersion($id)\n    {\n        $server = $this->find('first', array(\n                'conditions' => array('Server.id' => $id),\n        ));\n        if (empty($server)) {\n            return 2;\n        }\n        App::uses('SyncTool', 'Tools');\n        $syncTool = new SyncTool();\n        $HttpSocket = $syncTool->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $response = $HttpSocket->get($server['Server']['url'] . '/servers/getVersion', $data = '', $request);\n        if ($response->code == 200) {\n            try {\n                $data = json_decode($response->body, true);\n            } catch (Exception $e) {\n                return 1;\n            }\n            if (isset($data['version']) && !empty($data['version'])) {\n                return $data['version'];\n            } else {\n                return 3;\n            }\n        }\n        return 2;\n    }\n\n\n    /* returns an array with the events\n     * error codes:\n     * 1: received non json response\n     * 2: no route to host\n     * 3: empty result set\n     */\n    public function previewIndex($id, $user, $passedArgs, &$total_count = 0)\n    {\n        $server = $this->find('first', array(\n            'conditions' => array('Server.id' => $id),\n        ));\n        if (empty($server)) {\n            return 2;\n        }\n        $HttpSocket = $this->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $validArgs = array_merge(array('sort', 'direction', 'page', 'limit'), $this->validEventIndexFilters);\n        $urlParams = '';\n        foreach ($validArgs as $v) {\n            if (isset($passedArgs[$v])) {\n                $urlParams .= '/' . $v . ':' . $passedArgs[$v];\n            }\n        }\n        $uri = $server['Server']['url'] . '/events/index' . $urlParams;\n        $response = $HttpSocket->get($uri, $data = '', $request);\n        if (!empty($response->headers['X-Result-Count'])) {\n            $temp = $response->headers['X-Result-Count'];\n            $total_count = $temp;\n        }\n        if ($response->code == 200) {\n            try {\n                $events = json_decode($response->body, true);\n            } catch (Exception $e) {\n                return 1;\n            }\n            if (!empty($events)) {\n                foreach ($events as $k => $event) {\n                    if (!isset($event['Orgc'])) {\n                        $event['Orgc']['name'] = $event['orgc'];\n                    }\n                    if (!isset($event['Org'])) {\n                        $event['Org']['name'] = $event['org'];\n                    }\n                    if (!isset($event['EventTag'])) {\n                        $event['EventTag'] = array();\n                    }\n                    $events[$k] = array('Event' => $event);\n                }\n            } else {\n                return 3;\n            }\n            return $events;\n        }\n        return 2;\n    }\n\n    /* returns an array with the events\n     * error codes:\n     * 1: received non-json response\n     * 2: no route to host\n     */\n    public function previewEvent($serverId, $eventId)\n    {\n        $server = $this->find('first', array(\n                'conditions' => array('Server.id' => $serverId),\n        ));\n        if (empty($server)) {\n            return 2;\n        }\n        $HttpSocket = $this->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $uri = $server['Server']['url'] . '/events/' . $eventId;\n        $response = $HttpSocket->get($uri, $data = '', $request);\n        if ($response->code == 200) {\n            try {\n                $event = json_decode($response->body, true);\n            } catch (Exception $e) {\n                return 1;\n            }\n            if (!isset($event['Event']['Orgc'])) {\n                $event['Event']['Orgc']['name'] = $event['Event']['orgc'];\n            }\n            if (isset($event['Event']['Orgc'][0])) {\n                $event['Event']['Orgc'] = $event['Event']['Orgc'][0];\n            }\n            if (!isset($event['Event']['Org'])) {\n                $event['Event']['Org']['name'] = $event['Event']['org'];\n            }\n            if (isset($event['Event']['Org'][0])) {\n                $event['Event']['Org'] = $event['Event']['Org'][0];\n            }\n            if (!isset($event['Event']['EventTag'])) {\n                $event['Event']['EventTag'] = array();\n            }\n            return $event;\n        }\n        return 2;\n    }\n\n    // Loops through all servers and checks which servers' push rules don't conflict with the given event.\n    // returns the server objects that would allow the event to be pushed\n    public function eventFilterPushableServers($event, $servers)\n    {\n        $eventTags = array();\n        $validServers = array();\n        foreach ($event['EventTag'] as $tag) {\n            $eventTags[] = $tag['tag_id'];\n        }\n        foreach ($servers as $server) {\n            $push_rules = json_decode($server['Server']['push_rules'], true);\n            if (!empty($push_rules['tags']['OR'])) {\n                $intersection = array_intersect($push_rules['tags']['OR'], $eventTags);\n                if (empty($intersection)) {\n                    continue;\n                }\n            }\n            if (!empty($push_rules['tags']['NOT'])) {\n                $intersection = array_intersect($push_rules['tags']['NOT'], $eventTags);\n                if (!empty($intersection)) {\n                    continue;\n                }\n            }\n            if (!empty($push_rules['orgs']['OR'])) {\n                if (!in_array($event['Event']['orgc_id'], $push_rules['orgs']['OR'])) {\n                    continue;\n                }\n            }\n            if (!empty($push_rules['orgs']['NOT'])) {\n                if (in_array($event['Event']['orgc_id'], $push_rules['orgs']['NOT'])) {\n                    continue;\n                }\n            }\n            $validServers[] = $server;\n        }\n        return $validServers;\n    }\n\n    public function extensionDiagnostics()\n    {\n        $results = array();\n        $extensions = array('redis', 'gd');\n        foreach ($extensions as $extension) {\n            $results['web']['extensions'][$extension] = extension_loaded($extension);\n        }\n        if (!is_readable(APP . '/files/scripts/selftest.php')) {\n            $results['cli'] = false;\n        } else {\n            $results['cli'] = exec('php ' . APP . '/files/scripts/selftest.php');\n            $results['cli'] = json_decode($results['cli'], true);\n        }\n        return $results;\n    }\n\n    public function databaseEncodingDiagnostics(&$diagnostic_errors)\n    {\n        if (!isset($this->getDataSource()->config['encoding']) || strtolower($this->getDataSource()->config['encoding']) != 'utf8') {\n            $diagnostic_errors++;\n            return false;\n        }\n        return true;\n    }\n\n    public function getLatestGitRemote()\n    {\n        return exec('timeout 3 git ls-remote https://github.com/MISP/MISP | head -1 | sed \"s/HEAD//\"');\n    }\n\n    public function getCurrentGitStatus()\n    {\n        $status = array();\n        $status['commit'] = exec('git rev-parse HEAD');\n        $status['branch'] = $this->getCurrentBranch();\n        $status['latestCommit'] = $this->getLatestGitremote();\n        return $status;\n    }\n\n    public function getCurrentBranch()\n    {\n        return exec(\"git symbolic-ref HEAD | sed 's!refs\\/heads\\/!!'\");\n    }\n\n    public function checkoutMain()\n    {\n        $mainBranch = '2.4';\n        return exec('git checkout ' . $mainBranch);\n    }\n\n    public function getSubmodulesGitStatus()\n    {\n        exec('cd ' . APP . '../; git submodule status --cached | grep -v ^- | cut -b 2- | cut -d \" \" -f 1,2 ', $submodules_names);\n        $status = array();\n        foreach ($submodules_names as $submodule_name_info) {\n            $submodule_name_info = explode(' ', $submodule_name_info);\n            $superproject_submodule_commit_id = $submodule_name_info[0];\n            $submodule_name = $submodule_name_info[1];\n            $temp = $this->getSubmoduleGitStatus($submodule_name, $superproject_submodule_commit_id);\n            if ( !empty($temp) ) {\n                $status[$submodule_name] = $temp;\n            }\n        }\n        return $status;\n    }\n\n    private function _isAcceptedSubmodule($submodule) {\n        $accepted_submodules_names = array('PyMISP',\n            'app/files/misp-galaxy',\n            'app/files/taxonomies',\n            'app/files/misp-objects',\n            'app/files/noticelists',\n            'app/files/warninglists',\n            'cti-python-stix2'\n        );\n        return in_array($submodule, $accepted_submodules_names);\n    }\n\n    public function getSubmoduleGitStatus($submodule_name, $superproject_submodule_commit_id) {\n        $status = array();\n        if ($this->_isAcceptedSubmodule($submodule_name)) {\n            $path = APP . '../' . $submodule_name;\n            $submodule_name=(strpos($submodule_name, '/') >= 0 ? explode('/', $submodule_name) : $submodule_name);\n            $submodule_name=end($submodule_name);\n            $submoduleRemote=exec('cd ' . $path . '; git config --get remote.origin.url');\n            exec(sprintf('cd %s; git rev-parse HEAD', $path), $submodule_current_commit_id);\n            if (!empty($submodule_current_commit_id[0])) {\n                $submodule_current_commit_id = $submodule_current_commit_id[0];\n            } else {\n                $submodule_current_commit_id = null;\n            }\n            $status = array(\n                'moduleName' => $submodule_name,\n                'current' => $submodule_current_commit_id,\n                'currentTimestamp' => exec(sprintf('cd %s; git log -1 --pretty=format:%%ct', $path)),\n                'remoteTimestamp' => exec(sprintf('cd %s; git show -s --pretty=format:%%ct %s', $path, $superproject_submodule_commit_id)),\n                'remote' => $superproject_submodule_commit_id,\n                'upToDate' => '',\n                'isReadable' => is_readable($path) && is_readable($path . '/.git'),\n            );\n\n            if (!empty($status['remote'])) {\n                if ($status['remote'] == $status['current']) {\n                    $status['upToDate'] = 'same';\n                } else if ($status['currentTimestamp'] < $status['remoteTimestamp']) {\n                    $status['upToDate'] = 'older';\n                } else {\n                    $status['upToDate'] = 'younger';\n                }\n            } else {\n                $status['upToDate'] = 'error';\n            }\n\n            if ($status['isReadable'] && !empty($status['remoteTimestamp']) && !empty($status['currentTimestamp'])) {\n                $date1 = new DateTime();\n                $date1->setTimestamp($status['remoteTimestamp']);\n                $date2 = new DateTime();\n                $date2->setTimestamp($status['currentTimestamp']);\n                $status['timeDiff'] = $date1->diff($date2);\n            } else {\n                $status['upToDate'] = 'error';\n            }\n        }\n        return $status;\n    }\n\n    public function updateSubmodule($user, $submodule_name=false) {\n        $path = APP . '../';\n        if ($submodule_name == false) {\n            $command = sprintf('cd %s; git submodule update 2>&1', $path);\n            exec($command, $output, $return_code);\n            $output = implode(\"\\n\", $output);\n            $res = array('status' => ($return_code==0 ? true : false), 'output' => $output);\n            if ($return_code == 0) { // update all DB\n                $res = array_merge($res, $this->updateDatabaseAfterPullRouter($submodule_name, $user));\n            }\n        } else if ($this->_isAcceptedSubmodule($submodule_name)) {\n            $command = sprintf('cd %s; git submodule update -- %s 2>&1', $path, $submodule_name);\n            exec($command, $output, $return_code);\n            $output = implode(\"\\n\", $output);\n            $res = array('status' => ($return_code==0 ? true : false), 'output' => $output);\n            if ($return_code == 0) { // update DB if necessary\n                $res = array_merge($res, $this->updateDatabaseAfterPullRouter($submodule_name, $user));\n            }\n        } else {\n            $res = array('status' => false, 'output' => __('Invalid submodule.'), 'job_sent' => false, 'sync_result' => __('unknown'));\n        }\n        return $res;\n    }\n\n    public function updateDatabaseAfterPullRouter($submodule_name, $user) {\n        if (Configure::read('MISP.background_jobs')) {\n            $job = ClassRegistry::init('Job');\n            $job->create();\n            $eventModel = ClassRegistry::init('Event');\n            $data = array(\n                    'worker' => $eventModel->__getPrioWorkerIfPossible(),\n                    'job_type' => __('update_after_pull'),\n                    'job_input' => __('Updating: ' . $submodule_name),\n                    'status' => 0,\n                    'retries' => 0,\n                    'org_id' => $user['org_id'],\n                    'org' => $user['Organisation']['name'],\n                    'message' => 'Update the database after PULLing the submodule(s).',\n            );\n            $job->save($data);\n            $jobId = $job->id;\n            $process_id = CakeResque::enqueue(\n                    'prio',\n                    'AdminShell',\n                    array('updateAfterPull', $submodule_name, $jobId, $user['id']),\n                    true\n            );\n            $job->saveField('process_id', $process_id);\n            return array('job_sent' => true, 'sync_result' => __('unknown'));\n        } else {\n            $result = $this->updateAfterPull($submodule_name, $user['id']);\n            return array('job_sent' => false, 'sync_result' => $result);\n        }\n    }\n\n    public function updateAfterPull($submodule_name, $userId) {\n        $user = $this->User->getAuthUser($userId);\n        $result = array();\n        if ($user['Role']['perm_site_admin']) {\n            $updateAll = empty($submodule_name);\n            if ($submodule_name == 'app/files/misp-galaxy' || $updateAll) {\n                $this->Galaxy = ClassRegistry::init('Galaxy');\n                $result[] = ($this->Galaxy->update() ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n            if ($submodule_name == 'app/files/misp-objects' || $updateAll) {\n                $this->ObjectTemplate = ClassRegistry::init('ObjectTemplate');\n                $result[] = ($this->ObjectTemplate->update($user, false, false) ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n            if ($submodule_name == 'app/files/noticelists' || $updateAll) {\n                $this->Noticelist = ClassRegistry::init('Noticelist');\n                $result[] = ($this->Noticelist->update() ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n            if ($submodule_name == 'app/files/taxonomies' || $updateAll) {\n                $this->Taxonomy = ClassRegistry::init('Taxonomy');\n                $result[] = ($this->Taxonomy->update() ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n            if ($submodule_name == 'app/files/warninglists' || $updateAll) {\n                $this->Warninglist = ClassRegistry::init('Warninglist');\n                $result[] = ($this->Warninglist->update() ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n        }\n        return implode('\\n', $result);\n    }\n\n    public function update($status)\n    {\n        $final = '';\n        $workingDirectoryPrefix = 'cd $(git rev-parse --show-toplevel) && ';\n        $cleanup_commands = array(\n            // (>^-^)> [hacky]\n            $workingDirectoryPrefix . 'git checkout app/composer.json 2>&1'\n        );\n        foreach ($cleanup_commands as $cleanup_command) {\n            $final .= $cleanup_command . \"\\n\\n\";\n            exec($cleanup_command, $output);\n            $final .= implode(\"\\n\", $output) . \"\\n\\n\";\n        }\n        $command1 = $workingDirectoryPrefix . 'git pull origin ' . $status['branch'] . ' 2>&1';\n        $command2 = $workingDirectoryPrefix . 'git submodule update --init --recursive 2>&1';\n        $final .= $command1 . \"\\n\\n\";\n        exec($command1, $output);\n        $final .= implode(\"\\n\", $output) . \"\\n\\n=================================\\n\\n\";\n        $output = array();\n        $final .= $command2 . \"\\n\\n\";\n        exec($command2, $output);\n        $final .= implode(\"\\n\", $output);\n        return $final;\n    }\n\n    public function fetchServer($id)\n    {\n        if (empty($id)) {\n            return false;\n        }\n        $conditions = array('Server.id' => $id);\n        if (!is_numeric($id)) {\n            $conditions = array('OR' => array(\n                'LOWER(Server.name)' => strtolower($id),\n                'LOWER(Server.url)' => strtolower($id)\n            ));\n        }\n        $server = $this->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1\n        ));\n        return (empty($server)) ? false : $server;\n    }\n\n    public function restartWorkers($user=false)\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            $this->workerRemoveDead($user);\n            $prepend = '';\n            shell_exec($prepend . APP . 'Console' . DS . 'worker' . DS . 'start.sh > /dev/null 2>&1 &');\n        }\n        return true;\n    }\n\n    public function restartWorker($pid)\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            $this->ResqueStatus = new ResqueStatus\\ResqueStatus(Resque::redis());\n            $workers = $this->ResqueStatus->getWorkers();\n            $pid = intval($pid);\n            if (!isset($workers[$pid])) {\n                return __('Invalid worker.');\n            }\n            $currentWorker = $workers[$pid];\n            $this->killWorker($pid, false);\n            $this->startWorker($currentWorker['queue']);\n            return true;\n        }\n        return __('Background workers not enabled.');\n    }\n\n    public function startWorker($queue)\n    {\n        $validTypes = array('default', 'email', 'scheduler', 'cache', 'prio');\n        if (!in_array($queue, $validTypes)) {\n            return __('Invalid worker type.');\n        }\n        if ($queue != 'scheduler') {\n            shell_exec(APP . 'Console' . DS . 'cake CakeResque.CakeResque start --interval 5 --queue ' . $queue .' > /dev/null 2>&1 &');\n        } else {\n            shell_exec(APP . 'Console' . DS . 'cake CakeResque.CakeResque startscheduler -i 5 > /dev/null 2>&1 &');\n        }\n        return true;\n    }\n\n    public function cacheServerInitiator($user, $id = 'all', $jobId = false)\n    {\n        $params = array(\n            'conditions' => array('caching_enabled' => 1),\n            'recursive' => -1\n        );\n        $redis = $this->setupRedis();\n        if ($redis === false) {\n            return 'Redis not reachable.';\n        }\n        if ($id !== 'all') {\n            $params['conditions']['Server.id'] = $id;\n        } else {\n            $redis->del('misp:server_cache:combined');\n            $redis->del('misp:server_cache:event_uuid_lookup:');\n        }\n        $servers = $this->find('all', $params);\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n            $job->id = $jobId;\n            if (!$job->exists()) {\n                $jobId = false;\n            }\n        }\n        foreach ($servers as $k => $server) {\n            $this->__cacheInstance($server, $redis, $jobId);\n            if ($jobId) {\n                $job->saveField('progress', 100 * $k / count($servers));\n                $job->saveField('message', 'Server ' . $server['Server']['id'] . ' cached.');\n            }\n        }\n        return true;\n    }\n\n    private function __cacheInstance($server, $redis, $jobId = false)\n    {\n        $continue = true;\n        $i = 0;\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n            $job->id = $jobId;\n        }\n        $redis->del('misp:server_cache:' . $server['Server']['id']);\n        $HttpSocket = null;\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        while ($continue) {\n            $i++;\n            $pipe = $redis->multi(Redis::PIPELINE);\n            $chunk_size = 50000;\n            $data = $this->__getCachedAttributes($server, $HttpSocket, $chunk_size, $i);\n            if (empty(trim($data))) {\n                $continue = false;\n            } else {\n                $data = explode(PHP_EOL, trim($data));\n                foreach ($data as $entry) {\n                    list($value, $uuid) = explode(',', $entry);\n                    if (!empty($value)) {\n                        $redis->sAdd('misp:server_cache:' . $server['Server']['id'], $value);\n                        $redis->sAdd('misp:server_cache:combined', $value);\n                        $redis->sAdd('misp:server_cache:event_uuid_lookup:' . $value, $server['Server']['id'] . '/' . $uuid);\n                    }\n                }\n            }\n            if ($jobId) {\n                $job->saveField('message', 'Server ' . $server['Server']['id'] . ': ' . ((($i -1) * $chunk_size) + count($data)) . ' attributes cached.');\n            }\n            $pipe->exec();\n        }\n        $redis->set('misp:server_cache_timestamp:' . $server['Server']['id'], time());\n        return true;\n    }\n\n    private function __getCachedAttributes($server, $HttpSocket, $chunk_size, $i)\n    {\n        $filter_rules = array(\n            'returnFormat' => 'cache',\n            'includeEventUuid' => 1,\n            'page' => $i,\n            'limit' => $chunk_size\n        );\n        debug($filter_rules);\n        $request = $this->setupSyncRequest($server);\n        try {\n            $response = $HttpSocket->post($server['Server']['url'] . '/attributes/restSearch.json', json_encode($filter_rules), $request);\n        } catch (SocketException $e) {\n            return $e->getMessage();\n        }\n        return $response->body;\n    }\n\n    public function attachServerCacheTimestamps($data)\n    {\n        $redis = $this->setupRedis();\n        if ($redis === false) {\n            return $data;\n        }\n        foreach ($data as $k => $v) {\n            $data[$k]['Server']['cache_timestamp'] = $redis->get('misp:server_cache_timestamp:' . $data[$k]['Server']['id']);\n        }\n        return $data;\n    }\n\n    public function updateJSON()\n    {\n        $toUpdate = array('Galaxy', 'Noticelist', 'Warninglist', 'Taxonomy', 'ObjectTemplate');\n        $results = array();\n        foreach ($toUpdate as $target) {\n            $this->$target = ClassRegistry::init($target);\n            $result = $this->$target->update();\n            $results[$target] = $result === false ? false : true;\n        }\n        return $results;\n    }\n}\n", "<?php\nApp::uses('AppModel', 'Model');\nApp::uses('AuthComponent', 'Controller/Component');\nApp::uses('RandomTool', 'Tools');\n\nclass User extends AppModel\n{\n    public $displayField = 'email';\n\n    public $orgField = array('Organisation', 'name');\n\n    public $validate = array(\n        'role_id' => array(\n            'numeric' => array(\n                'rule' => array('numeric'),\n                //'message' => 'Your custom message here',\n                //'allowEmpty' => false,\n                //'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'password' => array(\n            'minlength' => array(\n                'rule' => array('passwordLength'),\n                'message' => 'Password length requirement not met.',\n                //'allowEmpty' => false,\n                'required' => true,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n            'complexity' => array(\n                'rule' => array('complexPassword'),\n                'message' => 'Password complexity requirement not met.',\n                //'allowEmpty' => false,\n                //'required' => true,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n            'identical' => array(\n                'rule' => array('identicalFieldValues', 'confirm_password'),\n                'message' => 'Please re-enter your password twice so that the values match.',\n                //'allowEmpty' => false,\n                //'required' => true,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n\n        'org_id' => array(\n            'valueNotEmpty' => array(\n                'rule' => array('valueNotEmpty'),\n            ),\n            'numeric' => array(\n                    'rule' => array('numeric'),\n                    'message' => 'The organisation ID has to be a numeric value.',\n            ),\n        ),\n        'email' => array(\n            'email' => array(\n                'rule' => array('email'),\n                'message' => 'Please enter a valid email address.',\n                //'allowEmpty' => false,\n                'required' => true,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n            'unique' => array(\n                'rule' => 'isUnique',\n                'message' => 'An account with this email address already exists.'\n            ),\n        ),\n        'autoalert' => array(\n            'boolean' => array(\n                'rule' => array('boolean'),\n                //'message' => 'Your custom message here',\n                //'allowEmpty' => false,\n                'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'contactalert' => array(\n                'boolean' => array(\n                        'rule' => array('boolean'),\n                        //'message' => 'Your custom message here',\n                        //'allowEmpty' => false,\n                        'required' => false,\n                        //'last' => false, // Stop validation after this rule\n                        //'on' => 'create', // Limit validation to 'create' or 'update' operations\n                ),\n        ),\n        'authkey' => array(\n            'minlength' => array(\n                'rule' => array('minlength', 40),\n                'message' => 'A authkey of a minimum length of 40 is required.',\n                'required' => true,\n            ),\n            'valueNotEmpty' => array(\n                'rule' => array('valueNotEmpty'),\n            ),\n        ),\n        'invited_by' => array(\n            'numeric' => array(\n                'rule' => array('numeric'),\n                //'message' => 'Your custom message here',\n                //'allowEmpty' => false,\n                //'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'change_pw' => array(\n            'boolean' => array(\n                'rule' => array('boolean'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'gpgkey' => array(\n            'gpgvalidation' => array(\n                'rule' => array('validateGpgkey'),\n                'message' => 'GnuPG key not valid, please enter a valid key.',\n            ),\n        ),\n        'certif_public' => array(\n            'notempty' => array(\n                'rule' => array('validateCertificate'),\n                'message' => 'Certificate not valid, please enter a valid certificate (x509).',\n                //'allowEmpty' => false,\n                //'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'nids_sid' => array(\n            'numeric' => array(\n                'rule' => array('numeric'),\n                'message' => 'A SID should be an integer.',\n                'allowEmpty' => false,\n                'required' => true,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'termsaccepted' => array(\n            'boolean' => array(\n                'rule' => array('boolean'),\n                //'message' => 'Your custom message here',\n                //'allowEmpty' => false,\n                //'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'newsread' => array(\n            'numeric' => array(\n                'rule' => array('numeric')\n            ),\n        ),\n    );\n\n    // The Associations below have been created with all possible keys, those that are not needed can be removed\n    public $belongsTo = array(\n        'Role' => array(\n            'className' => 'Role',\n            'foreignKey' => 'role_id',\n            'conditions' => '',\n            'fields' => '',\n            'order' => ''\n        ),\n        'Organisation' => array(\n            'className' => 'Organisation',\n            'foreignKey' => 'org_id',\n            'conditions' => '',\n            'fields' => '',\n            'order' => ''\n        ),\n        'Server' => array(\n            'className' => 'Server',\n            'foreignKey' => 'server_id',\n            'conditions' => '',\n            'fields' => array('Server.id', 'Server.url', 'Server.push_rules'),\n            'order' => ''\n        )\n    );\n\n    public $hasMany = array(\n        'Event' => array(\n            'className' => 'Event',\n            'foreignKey' => 'user_id',\n            'dependent' => false,\n            'conditions' => '',\n            'fields' => '',\n            'order' => '',\n            'limit' => '',\n            'offset' => '',\n            'exclusive' => '',\n            'finderQuery' => '',\n            'counterQuery' => ''\n        ),\n        'Post'\n    );\n\n    public $actsAs = array(\n        'SysLogLogable.SysLogLogable' => array(\n            'userModel' => 'User',\n            'userKey' => 'user_id',\n            'change' => 'full',\n            'ignore' => array('password')\n        ),\n        'Trim',\n        'Containable'\n    );\n\n    public function beforeValidate($options = array())\n    {\n        if (!isset($this->data['User']['id'])) {\n            if ((isset($this->data['User']['enable_password']) && (!$this->data['User']['enable_password'])) || (empty($this->data['User']['password']) && empty($this->data['User']['confirm_password']))) {\n                $this->data['User']['password'] = $this->generateRandomPassword();\n                $this->data['User']['confirm_password'] = $this->data['User']['password'];\n            }\n        }\n        if (!isset($this->data['User']['certif_public']) || empty($this->data['User']['certif_public'])) {\n            $this->data['User']['certif_public'] = '';\n        }\n        if (!isset($this->data['User']['authkey']) || empty($this->data['User']['authkey'])) {\n            $this->data['User']['authkey'] = $this->generateAuthKey();\n        }\n        if (!isset($this->data['User']['nids_sid']) || empty($this->data['User']['nids_sid'])) {\n            $this->data['User']['nids_sid'] = mt_rand(1000000, 9999999);\n        }\n        if (isset($this->data['User']['newsread']) && $this->data['User']['newsread'] === null) {\n            $this->data['User']['newsread'] = 0;\n        }\n        return true;\n    }\n\n    public function beforeSave($options = array())\n    {\n        $this->data[$this->alias]['date_modified'] = time();\n        if (isset($this->data[$this->alias]['password'])) {\n            $passwordHasher = new BlowfishPasswordHasher();\n            $this->data[$this->alias]['password'] = $passwordHasher->hash($this->data[$this->alias]['password']);\n        }\n        return true;\n    }\n\n    public function afterSave($created, $options = array())\n    {\n        $pubToZmq = Configure::read('Plugin.ZeroMQ_enable') && Configure::read('Plugin.ZeroMQ_user_notifications_enable');\n        $kafkaTopic = Configure::read('Plugin.Kafka_user_notifications_topic');\n        $pubToKafka = Configure::read('Plugin.Kafka_enable') && Configure::read('Plugin.Kafka_user_notifications_enable') && !empty($kafkaTopic);\n        if ($pubToZmq || $pubToKafka) {\n            if (!empty($this->data)) {\n                $user = $this->data;\n                if (!isset($user['User'])) {\n                    $user['User'] = $user;\n                }\n                $action = $created ? 'edit' : 'add';\n                if (isset($user['User']['action'])) {\n                    $action = $user['User']['action'];\n                }\n                if (isset($user['User']['id'])) {\n                    $user = $this->find('first', array(\n                        'recursive' => -1,\n                        'conditions' => array('User.id' => $user['User']['id']),\n                        'fields' => array('id', 'email', 'last_login', 'org_id', 'termsaccepted', 'autoalert', 'newsread', 'disabled'),\n                        'contain' => array(\n                            'Organisation' => array(\n                                'fields' => array('Organisation.id', 'Organisation.name', 'Organisation.description', 'Organisation.uuid', 'Organisation.nationality', 'Organisation.sector', 'Organisation.type', 'Organisation.local')\n                            )\n                        )\n                    ));\n                }\n                if (isset($user['User']['password'])) {\n                    unset($user['User']['password']);\n                    unset($user['User']['confirm_password']);\n                }\n                if ($pubToZmq) {\n                    $pubSubTool = $this->getPubSubTool();\n                    $pubSubTool->modified($user, 'user', $action);\n                }\n                if ($pubToKafka) {\n                    $kafkaPubTool = $this->getKafkaPubTool();\n                    $kafkaPubTool->publishJson($kafkaTopic, $user, $action);\n                }\n            }\n        }\n        return true;\n    }\n\n    // Checks if the GnuPG key is a valid key, but also import it in the keychain.\n    // this will NOT fail on keys that can only be used for signing but not encryption!\n    // the method in verifyUsers will fail in that case.\n    public function validateGpgkey($check)\n    {\n        // LATER first remove the old gpgkey from the keychain\n        // empty value\n        if (empty($check['gpgkey'])) {\n            return true;\n        }\n\n        // we have a clean, hopefully public, key here\n        try {\n            require_once 'Crypt/GPG.php';\n            $gpg = new Crypt_GPG(array('homedir' => Configure::read('GnuPG.homedir'), 'gpgconf' => Configure::read('GnuPG.gpgconf'), 'binary' => (Configure::read('GnuPG.binary') ? Configure::read('GnuPG.binary') : '/usr/bin/gpg')));\n            try {\n                $keyImportOutput = $gpg->importKey($check['gpgkey']);\n                if (!empty($keyImportOutput['fingerprint'])) {\n                    return true;\n                }\n            } catch (Exception $e) {\n                $this->log($e->getMessage());\n                return false;\n            }\n        } catch (Exception $e) {\n            $this->log($e->getMessage());\n            return true;\n        }\n    }\n\n    // Checks if the certificate is a valid x509 certificate, but also import it in the keychain.\n    // this will NOT fail on keys that can only be used for signing but not encryption!\n    // the method in verifyUsers will fail in that case.\n    public function validateCertificate($check)\n    {\n        // LATER first remove the old certif_public from the keychain\n\n        // empty value\n        if (empty($check['certif_public'])) {\n            return true;\n        }\n\n        // certif_public is entered\n\n        // Check if $check is a x509 certificate\n        if (openssl_x509_read($check['certif_public'])) {\n            return $this->testSmimeCertificate($check['certif_public']);\n        } else {\n            return false;\n        }\n    }\n\n    public function passwordLength($check)\n    {\n        $length = Configure::read('Security.password_policy_length');\n        if (empty($length) || $length < 0) {\n            $length = 12;\n        }\n        $value = array_values($check);\n        $value = $value[0];\n        if (strlen($value) < $length) {\n            return false;\n        }\n        return true;\n    }\n\n    /*\n     default password:\n     6 characters minimum\n     1 or more upper-case letters\n     1 or more lower-case letters\n     1 or more digits or special characters\n     example: \"EasyPeasy34\"\n     If Security.password_policy_complexity is set and valid, use the regex provided.\n     */\n    public function complexPassword($check)\n    {\n        $regex = Configure::read('Security.password_policy_complexity');\n        if (empty($regex) || @preg_match($regex, 'test') === false) {\n            $regex = '/^((?=.*\\d)|(?=.*\\W+))(?![\\n])(?=.*[A-Z])(?=.*[a-z]).*$|.{16,}/';\n        }\n        $value = array_values($check);\n        $value = $value[0];\n        return preg_match($regex, $value);\n    }\n\n    public function identicalFieldValues($field=array(), $compareField=null)\n    {\n        foreach ($field as $key => $value) {\n            $v1 = $value;\n            $v2 = $this->data[$this->name][$compareField];\n            if ($v1 !== $v2) {\n                return false;\n            } else {\n                continue;\n            }\n        }\n        return true;\n    }\n\n    public function generateAuthKey()\n    {\n        return (new RandomTool())->random_str(true, 40);\n    }\n\n    /**\n     * Generates a cryptographically secure password\n     *\n     * @param int $passwordLength\n     * @return string\n     */\n    public function generateRandomPassword($passwordLength = 40)\n    {\n        // makes sure, the password policy isn't undermined by setting a manual passwordLength\n        $policyPasswordLength = Configure::read('Security.password_policy_length') ? Configure::read('Security.password_policy_length') : false;\n        if (is_int($policyPasswordLength) && $policyPasswordLength > $passwordLength) {\n            $passwordLength = $policyPasswordLength;\n        }\n        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-+=!@#$%^&*()<>/?';\n        return (new RandomTool())->random_str(true, $passwordLength, $characters);\n    }\n\n\n    public function checkAndCorrectPgps()\n    {\n        $fails = array();\n        $users = $this->find('all', array('recursive' => 0));\n\n        foreach ($users as $user) {\n            if (strlen($user['User']['gpgkey']) && strpos($user['User']['gpgkey'], \"\\n\")) {\n                $fails[] = $user['User']['id'] . ':' . $user['User']['id'];\n            }\n        }\n        return $fails;\n    }\n\n    public function getOrgs()\n    {\n        $orgs = $this->Organisation->find('list', array(\n            'recursive' => -1,\n            'fields' => array('name'),\n        ));\n        return $orgs;\n    }\n\n    public function getOrgMemberCount($org)\n    {\n        return $this->find('count', array(\n                'conditions' => array(\n                        'org =' => $org,\n                )));\n    }\n\n    public function verifySingleGPG($user, $gpg = false)\n    {\n        if (!$gpg) {\n            try {\n                require_once 'Crypt/GPG.php';\n                $gpg = new Crypt_GPG(array('homedir' => Configure::read('GnuPG.homedir'), 'gpgconf' => Configure::read('GnuPG.gpgconf'), 'binary' => (Configure::read('GnuPG.binary') ? Configure::read('GnuPG.binary') : '/usr/bin/gpg')));\n            } catch (Exception $e) {\n                $result[2] ='GnuPG is not configured on this system.';\n                $result[0] = true;\n                return $result;\n            }\n        }\n        $result = array();\n        try {\n            $currentTimestamp = time();\n            $temp = $gpg->importKey($user['User']['gpgkey']);\n            $key = $gpg->getKeys($temp['fingerprint']);\n            $result[5] = $temp['fingerprint'];\n            $subKeys = $key[0]->getSubKeys();\n            $sortedKeys = array('valid' => 0, 'expired' => 0, 'noEncrypt' => 0);\n            foreach ($subKeys as $subKey) {\n                $expiration = $subKey->getExpirationDate();\n                if ($expiration != 0 && $currentTimestamp > $expiration) {\n                    $sortedKeys['expired']++;\n                    continue;\n                }\n                if (!$subKey->canEncrypt()) {\n                    $sortedKeys['noEncrypt']++;\n                    continue;\n                }\n                $sortedKeys['valid']++;\n            }\n            if (!$sortedKeys['valid']) {\n                $result[2] = 'The user\\'s GnuPG key does not include a valid subkey that could be used for encryption.';\n                if ($sortedKeys['expired']) {\n                    $result[2] .= ' Found ' . $sortedKeys['expired'] . ' subkey(s) that have expired.';\n                }\n                if ($sortedKeys['noEncrypt']) {\n                    $result[2] .= ' Found ' . $sortedKeys['noEncrypt'] . ' subkey(s) that are sign only.';\n                }\n                $result[0] = true;\n            }\n        } catch (Exception $e) {\n            $result[2] = $e->getMessage();\n            $result[0] = true;\n        }\n        $result[1] = $user['User']['email'];\n        $result[4] = $temp['fingerprint'];\n        return $result;\n    }\n\n    public function verifyGPG($id = false)\n    {\n        require_once 'Crypt/GPG.php';\n        $this->Behaviors->detach('Trim');\n        $results = array();\n        $conditions = array('not' => array('gpgkey' => ''));\n        if ($id !== false) {\n            $conditions['User.id'] = $id;\n        }\n        $users = $this->find('all', array(\n            'conditions' => $conditions,\n            'recursive' => -1,\n        ));\n        if (empty($users)) {\n            return $results;\n        }\n        $gpg = new Crypt_GPG(array('homedir' => Configure::read('GnuPG.homedir'), 'gpgconf' => Configure::read('GnuPG.gpgconf'), 'binary' => (Configure::read('GnuPG.binary') ? Configure::read('GnuPG.binary') : '/usr/bin/gpg')));\n        foreach ($users as $k => $user) {\n            $results[$user['User']['id']] = $this->verifySingleGPG($user, $gpg);\n        }\n        return $results;\n    }\n\n    private function testSmimeCertificate($certif_public)\n    {\n        $result = array();\n        try {\n            App::uses('Folder', 'Utility');\n            App::uses('FileAccessTool', 'Tools');\n            $fileAccessTool = new FileAccessTool();\n            $dir = APP . 'tmp' . DS . 'SMIME';\n            if (!file_exists($dir)) {\n                if (!mkdir($dir, 0750, true)) {\n                    throw new MethodNotAllowedException('The SMIME temp directory is not writeable (app/tmp/SMIME).');\n                }\n            }\n            $tempFile = $fileAccessTool->createTempFile($dir, 'SMIME');\n            $msg_test = $fileAccessTool->writeToFile($tempFile, 'test');\n            $msg_test_encrypted = $fileAccessTool->createTempFile($dir, 'SMIME');\n            // encrypt it\n            if (openssl_pkcs7_encrypt($msg_test, $msg_test_encrypted, $certif_public, null, 0, OPENSSL_CIPHER_AES_256_CBC)) {\n                $parse = openssl_x509_parse($certif_public);\n                // Valid certificate ?\n                $now = new DateTime(\"now\");\n                $validTo_time_t_epoch = $parse['validTo_time_t'];\n                $validTo_time_t = new DateTime(\"@$validTo_time_t_epoch\");\n                if ($validTo_time_t > $now) {\n                    // purposes smimeencrypt ?\n                    if (($parse['purposes'][5][0] == 1) && ($parse['purposes'][5][2] == 'smimeencrypt')) {\n                        $result = true;\n                    } else {\n                        // openssl_pkcs7_encrypt good -- Model/User purposes is NOT GOOD'\n                        $result = 'This certificate cannot be used to encrypt email';\n                    }\n                } else {\n                    // openssl_pkcs7_encrypt good -- Model/User expired;\n                    $result = 'This certificate is expired';\n                }\n            } else {\n                // openssl_pkcs7_encrypt NOT good -- Model/User\n                $result = 'This certificate cannot be used to encrypt email';\n            }\n        } catch (Exception $e) {\n            $this->log($e->getMessage());\n        }\n        unlink($msg_test);\n        unlink($msg_test_encrypted);\n        return $result;\n    }\n\n    public function verifyCertificate()\n    {\n        $this->Behaviors->detach('Trim');\n        $results = array();\n        $users = $this->find('all', array(\n            'conditions' => array('not' => array('certif_public' => '')),\n            'recursive' => -1,\n        ));\n        foreach ($users as $k => $user) {\n            $result = $this->testSmimeCertificate($user['User']['certif_public']);\n            if ($result !== true) {\n                $results[$user['User']['id']] = array(0 => true, 1 => $user['User']['email']);\n            }\n        }\n        return $results;\n    }\n\n    public function getPGP($id)\n    {\n        $result = $this->find('first', array(\n            'recursive' => -1,\n            'fields' => array('id', 'gpgkey'),\n            'conditions' => array('id' => $id),\n        ));\n        return $result['User']['gpgkey'];\n    }\n\n    public function getCertificate($id)\n    {\n        $result = $this->find('first', array(\n            'recursive' => -1,\n            'fields' => array('id', 'certif_public'),\n            'conditions' => array('id' => $id),\n        ));\n        return $result['User']['certif_public'];\n    }\n\n    // get the current user and rearrange it to be in the same format as in the auth component\n    public function getAuthUser($id)\n    {\n        if (empty($id)) {\n            throw new Exception('Invalid user ID.');\n        }\n        $conditions = array('User.id' => $id);\n        $user = $this->find('first', array('conditions' => $conditions, 'recursive' => -1,'contain' => array('Organisation', 'Role', 'Server')));\n        if (empty($user)) {\n            return $user;\n        }\n        // Rearrange it a bit to match the Auth object created during the login\n        $user['User']['Role'] = $user['Role'];\n        $user['User']['Organisation'] = $user['Organisation'];\n        $user['User']['Server'] = $user['Server'];\n        unset($user['Organisation'], $user['Role'], $user['Server']);\n        return $user['User'];\n    }\n\n    // get the current user and rearrange it to be in the same format as in the auth component\n    public function getAuthUserByAuthkey($id)\n    {\n        $conditions = array('User.authkey' => $id);\n        $user = $this->find('first', array('conditions' => $conditions, 'recursive' => -1,'contain' => array('Organisation', 'Role', 'Server')));\n        if (empty($user)) {\n            return $user;\n        }\n        // Rearrange it a bit to match the Auth object created during the login\n        $user['User']['Role'] = $user['Role'];\n        $user['User']['Organisation'] = $user['Organisation'];\n        $user['User']['Server'] = $user['Server'];\n        return $user['User'];\n    }\n\n    public function getAuthUserByExternalAuth($auth_key)\n    {\n        $conditions = array(\n            'User.external_auth_key' => $auth_key,\n            'User.external_auth_required' => true\n        );\n        $user = $this->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1,\n            'contain' => array(\n                'Organisation',\n                'Role',\n                'Server'\n            )\n        ));\n        if (empty($user)) {\n            return $user;\n        }\n        // Rearrange it a bit to match the Auth object created during the login\n        $user['User']['Role'] = $user['Role'];\n        $user['User']['Organisation'] = $user['Organisation'];\n        $user['User']['Server'] = $user['Server'];\n        unset($user['Organisation'], $user['Role'], $user['Server']);\n        return $user['User'];\n    }\n\n    // Fetch all users that have access to an event / discussion for e-mailing (or maybe something else in the future.\n    // parameters are an array of org IDs that are owners (for an event this would be orgc and org)\n    public function getUsersWithAccess($owners = array(), $distribution, $sharing_group_id = 0, $userConditions = array())\n    {\n        $sgModel = ClassRegistry::init('SharingGroup');\n        $conditions = array();\n        $validOrgs = array();\n        $all = true;\n\n        // add owners to the conditions\n        if ($distribution == 0 || $distribution == 4) {\n            $all = false;\n            $validOrgs = $owners;\n        }\n\n        // add all orgs to the conditions that can see the SG\n        if ($distribution == 4) {\n            $sgOrgs = $sgModel->getOrgsWithAccess($sharing_group_id);\n            if ($sgOrgs === true) {\n                $all = true;\n            } else {\n                $validOrgs = array_merge($validOrgs, $sgOrgs);\n            }\n        }\n        $validOrgs = array_unique($validOrgs);\n        $conditions['AND'][] = array('disabled' => 0);\n        if (!$all) {\n            $conditions['AND']['OR'][] = array('org_id' => $validOrgs);\n\n            // Add the site-admins to the list\n            $roles = $this->Role->find('all', array(\n                    'conditions' => array('perm_site_admin' => 1),\n                    'fields' => array('id')\n            ));\n            $roleIDs = array();\n            foreach ($roles as $role) {\n                $roleIDs[] = $role['Role']['id'];\n            }\n            $conditions['AND']['OR'][] = array('role_id' => $roleIDs);\n        }\n        $conditions['AND'][] = $userConditions;\n        $users = $this->find('all', array(\n            'conditions' => $conditions,\n            'recursive' => -1,\n            'fields' => array('id', 'email', 'gpgkey', 'certif_public', 'org_id'),\n            'contain' => array('Role' => array('fields' => array('perm_site_admin'))),\n        ));\n        foreach ($users as $k => $user) {\n            $user = $user['User'];\n            unset($users[$k]['User']);\n            $users[$k] = array_merge($user, $users[$k]);\n        }\n        return $users;\n    }\n\n    public function sendEmailExternal($user, $params)\n    {\n        $this->Log = ClassRegistry::init('Log');\n        $params['body'] = str_replace('\\n', PHP_EOL, $params['body']);\n        $Email = new CakeEmail();\n        $recipient = array('User' => array('email' => $params['to']));\n        $failed = false;\n        if (!empty($params['gpgkey'])) {\n            $recipient['User']['gpgkey'] = $params['gpgkey'];\n            $encryptionResult = $this->__encryptUsingGPG($Email, $params['body'], $params['subject'], $recipient);\n            if (isset($encryptionResult['failed'])) {\n                $failed = true;\n            }\n            if (isset($encryptionResult['failureReason'])) {\n                $failureReason = $encryptionResult['failureReason'];\n            }\n        }\n        if (!$failed) {\n            $replyToLog = '';\n            $user = array('User' => $user);\n            $attachments = array();\n            $Email->replyTo($params['reply-to']);\n            if (!empty($params['requestor_gpgkey'])) {\n                $attachments['gpgkey.asc'] = array(\n                    'data' => $params['requestor_gpgkey']\n                );\n            }\n            $Email->from(Configure::read('MISP.email'));\n            $Email->returnPath(Configure::read('MISP.email'));\n            $Email->to($params['to']);\n            $Email->subject($params['subject']);\n            $Email->emailFormat('text');\n            if (!empty($params['attachments'])) {\n                foreach ($params['attachments'] as $key => $value) {\n                    $attachments[$k] = array('data' => $value);\n                }\n            }\n            $Email->attachments($attachments);\n            $mock = false;\n            if (Configure::read('MISP.disable_emailing') || !empty($params['mock'])) {\n                $Email->transport('Debug');\n                $mock = true;\n            }\n            $result = $Email->send($params['body']);\n            $Email->reset();\n            if ($result && !$mock) {\n                return true;\n            }\n            return $result;\n        }\n        return false;\n    }\n\n    // all e-mail sending is now handled by this method\n    // Just pass the user ID in an array that is the target of the e-mail along with the message body and the alternate message body if the message cannot be encrypted\n    // the remaining two parameters are the e-mail subject and a secondary user object which will be used as the replyto address if set. If it is set and an encryption key for the replyTo user exists, then his/her public key will also be attached\n    public function sendEmail($user, $body, $bodyNoEnc = false, $subject, $replyToUser = false)\n    {\n        $this->Log = ClassRegistry::init('Log');\n        if (Configure::read('MISP.disable_emailing')) {\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'User',\n                    'model_id' => $user['User']['id'],\n                    'email' => $user['User']['email'],\n                    'action' => 'email',\n                    'title' => 'Email to ' . $user['User']['email'] . ', titled \"' . $subject . '\" failed. Reason: Emailing is currently disabled on this instance.',\n                    'change' => null,\n            ));\n            return true;\n        }\n        if (!empty($user['User']['disabled'])) {\n            return true;\n        }\n        $failed = false;\n        $failureReason = \"\";\n        // check if the e-mail can be encrypted\n        $canEncryptGPG = isset($user['User']['gpgkey']) && !empty($user['User']['gpgkey']);\n        $canEncryptSMIME = isset($user['User']['certif_public']) && !empty($user['User']['certif_public']) && Configure::read('SMIME.enabled');\n\n        // If bodyonlyencrypted is enabled and the user has no encryption key, use the alternate body (if it exists)\n        if (Configure::read('GnuPG.bodyonlyencrypted') && !$canEncryptSMIME && !$canEncryptGPG && $bodyNoEnc) {\n            $body = $bodyNoEnc;\n        }\n        $body = str_replace('\\n', PHP_EOL, $body);\n\n        $Email = new CakeEmail();\n        // If we cannot encrypt the mail and the server settings restricts sending unencrypted messages, return false\n        if (!$failed && Configure::read('GnuPG.onlyencrypted') && !$canEncryptGPG && !$canEncryptSMIME) {\n            $failed = true;\n            $failureReason = \" encrypted messages are enforced and the message could not be encrypted for this user as no valid encryption key was found.\";\n        }\n        // Let's encrypt the message if we can\n        if (!$failed && $canEncryptGPG) {\n            $encryptionResult = $this->__encryptUsingGPG($Email, $body, $subject, $user);\n            if (isset($encryptionResult['failed'])) {\n                $failed = true;\n            }\n            if (isset($encryptionResult['failureReason'])) {\n                $failureReason = $encryptionResult['failureReason'];\n            }\n        }\n        // SMIME if not GPG key\n        if (!$failed && !$canEncryptGPG && $canEncryptSMIME) {\n            $encryptionResult = $this->__encryptUsingSmime($Email, $body, $subject, $user);\n            if (isset($encryptionResult['failed'])) {\n                $failed = true;\n            }\n            if (isset($encryptionResult['failureReason'])) {\n                $failureReason = $encryptionResult['failureReason'];\n            }\n        }\n        $replyToLog = '';\n        if (!$failed) {\n            $result = $this->__finaliseAndSendEmail($replyToUser, $Email, $replyToLog, $user, $subject, $body);\n        }\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        if (!$failed && $result) {\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'User',\n                    'model_id' => $user['User']['id'],\n                    'email' => $user['User']['email'],\n                    'action' => 'email',\n                    'title' => 'Email ' . $replyToLog  . ' to ' . $user['User']['email'] . ' sent, titled \"' . $subject . '\".',\n                    'change' => null,\n            ));\n            return true;\n        } else {\n            if (empty($failureReason)) {\n                $failureReason = \" there was an error sending the e-mail.\";\n            }\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'User',\n                    'model_id' => $user['User']['id'],\n                    'email' => $user['User']['email'],\n                    'action' => 'email',\n                    'title' => 'Email ' . $replyToLog  . ' to ' . $user['User']['email'] . ', titled \"' . $subject . '\" failed. Reason: ' . $failureReason,\n                    'change' => null,\n            ));\n        }\n        return false;\n    }\n\n    private function __finaliseAndSendEmail($replyToUser, &$Email, &$replyToLog, $user, $subject, $body, $additionalAttachments = false)\n    {\n        // If the e-mail is sent on behalf of a user, then we want the target user to be able to respond to the sender\n        // For this reason we should also attach the public key of the sender along with the message (if applicable)\n        $attachments = array();\n        if ($replyToUser != false) {\n            $Email->replyTo($replyToUser['User']['email']);\n            if (!empty($replyToUser['User']['gpgkey'])) {\n                $attachments['gpgkey.asc'] = array(\n                    'data' => $replyToUser['User']['gpgkey']\n                );\n            } elseif (!empty($replyToUser['User']['certif_public'])) {\n                $attachments[$replyToUser['User']['email'] . '.pem'] = array(\n                    'data' => $replyToUser['User']['certif_public']\n                );\n            }\n            $replyToLog = 'from ' . $replyToUser['User']['email'];\n        }\n        $Email->from(Configure::read('MISP.email'));\n        $Email->returnPath(Configure::read('MISP.email'));\n        $Email->to($user['User']['email']);\n        $Email->subject($subject);\n        $Email->emailFormat('text');\n        if (!empty($additionalAttachments)) {\n            foreach ($additionalAttachments as $key => $value) {\n                $attachments[$k] = array('data' => $value);\n            }\n        }\n        $Email->attachments($attachments);\n        $result = $Email->send($body);\n        $Email->reset();\n        return $result;\n    }\n\n    private function __encryptUsingGPG(&$Email, &$body, $subject, $user)\n    {\n        $failed = false;\n        // Sign the body\n        require_once 'Crypt/GPG.php';\n        try {\n            $gpg = new Crypt_GPG(array('homedir' => Configure::read('GnuPG.homedir'), 'gpgconf' => Configure::read('GnuPG.gpgconf'), 'binary' => (Configure::read('GnuPG.binary') ? Configure::read('GnuPG.binary') : '/usr/bin/gpg'), 'debug'));   // , 'debug' => true\n            if (Configure::read('GnuPG.sign')) {\n                $gpg->addSignKey(Configure::read('GnuPG.email'), Configure::read('GnuPG.password'));\n                $body = $gpg->sign($body, Crypt_GPG::SIGN_MODE_CLEAR);\n            }\n        } catch (Exception $e) {\n            $failureReason = \" the message could not be signed. The following error message was returned by gpg: \" . $e->getMessage();\n            $this->log($e->getMessage());\n            $failed = true;\n        }\n        if (!$failed) {\n            $keyImportOutput = $gpg->importKey($user['User']['gpgkey']);\n            try {\n                $key = $gpg->getKeys($keyImportOutput['fingerprint']);\n                $subKeys = $key[0]->getSubKeys();\n                $canEncryptGPG = false;\n                $currentTimestamp = time();\n                foreach ($subKeys as $subKey) {\n                    $expiration = $subKey->getExpirationDate();\n                    if (($expiration == 0 || $currentTimestamp < $expiration) && $subKey->canEncrypt()) {\n                        $canEncryptGPG = true;\n                    }\n                }\n                if ($canEncryptGPG) {\n                    $gpg->addEncryptKey($keyImportOutput['fingerprint']); // use the key that was given in the import\n                    $body = $gpg->encrypt($body, true);\n                } else {\n                    $failed = true;\n                    $failureReason = \" the message could not be encrypted because the provided key is either expired or cannot be used for encryption.\";\n                }\n            } catch (Exception $e) {\n                // despite the user having a GnuPG key and the signing already succeeding earlier, we get an exception. This must mean that there is an issue with the user's key.\n                $failureReason = \" the message could not be encrypted because there was an issue with the user's GnuPG key. The following error message was returned by gpg: \" . $e->getMessage();\n                $this->log($e->getMessage());\n                $failed = true;\n            }\n        }\n        if (!empty($failed)) {\n            return array('failed' => $failed, 'failureReason' => $failureReason);\n        }\n        return true;\n    }\n\n    private function __encryptUsingSmime(&$Email, &$body, $subject, $user)\n    {\n        try {\n            $prependedBody = 'Content-Transfer-Encoding: 7bit' . PHP_EOL . 'Content-Type: text/plain;' . PHP_EOL . '    charset=us-ascii' . PHP_EOL . PHP_EOL . $body;\n            App::uses('Folder', 'Utility');\n            App::uses('FileAccessTool', 'Tools');\n            $fileAccessTool = new FileAccessTool();\n            $dir = APP . 'tmp' . DS . 'SMIME';\n            if (!file_exists($dir)) {\n                if (!mkdir($dir, 0750, true)) {\n                    throw new MethodNotAllowedException('The SMIME temp directory is not writeable (app/tmp/SMIME).');\n                }\n            }\n            // save message to file\n            $tempFile = $fileAccessTool->createTempFile($dir, 'SMIME');\n            $msg = $fileAccessTool->writeToFile($tempFile, $prependedBody);\n            $headers_smime = array(\"To\" => $user['User']['email'], \"From\" => Configure::read('MISP.email'), \"Subject\" => $subject);\n            $canSign = true;\n            if (\n                !empty(Configure::read('SMIME.cert_public_sign')) &&\n                is_readable(Configure::read('SMIME.cert_public_sign')) &&\n                !empty(Configure::read('SMIME.key_sign')) &&\n                is_readable(Configure::read('SMIME.key_sign'))\n            ) {\n                $signed = $fileAccessTool->createTempFile($dir, 'SMIME');\n                if (openssl_pkcs7_sign($msg, $signed, 'file://'.Configure::read('SMIME.cert_public_sign'), array('file://'.Configure::read('SMIME.key_sign'), Configure::read('SMIME.password')), array(), PKCS7_TEXT)) {\n                    $bodySigned = $fileAccessTool->readFromFile($signed);\n                    unlink($msg);\n                    unlink($signed);\n                } else {\n                    unlink($msg);\n                    unlink($signed);\n                    throw new Exception('Failed while attempting to sign the SMIME message.');\n                }\n                // save message to file\n                $tempFile = $fileAccessTool->createTempFile($dir, 'SMIME');\n                $msg_signed = $fileAccessTool->writeToFile($tempFile, $bodySigned);\n            } else {\n                $msg_signed = $msg;\n            }\n            $msg_signed_encrypted = $fileAccessTool->createTempFile($dir, 'SMIME');\n            // encrypt it\n            if (openssl_pkcs7_encrypt($msg_signed, $msg_signed_encrypted, $user['User']['certif_public'], $headers_smime, 0, OPENSSL_CIPHER_AES_256_CBC)) {\n                $bodyEncSig = $fileAccessTool->readFromFile($msg_signed_encrypted);\n                unlink($msg_signed);\n                unlink($msg_signed_encrypted);\n                $parts = explode(\"\\n\\n\", $bodyEncSig);\n                $bodyEncSig = $parts[1];\n                // SMIME transport (hardcoded headers\n                $Email = $Email->transport('Smime');\n                $body = $bodyEncSig;\n            } else {\n                unlink($msg_signed);\n                unlink($msg_signed_encrypted);\n                throw new Exception('Could not encrypt the SMIME message.');\n            }\n        } catch (Exception $e) {\n            // despite the user having a certificate. This must mean that there is an issue with the user's certificate.\n            $result['failureReason'] = \" the message could not be encrypted because there was an issue with the user's public certificate. The following error message was returned by openssl: \" . $e->getMessage();\n            $this->log($e->getMessage());\n            $result['failed'] = true;\n        }\n        return $result;\n    }\n\n    public function adminMessageResolve($message)\n    {\n        $resolveVars = array('$contact' => 'MISP.contact', '$org' => 'MISP.org', '$misp' => 'MISP.baseurl');\n        foreach ($resolveVars as $k => $v) {\n            $v = Configure::read($v);\n            $message = str_replace($k, $v, $message);\n        }\n        return $message;\n    }\n\n    public function fetchPGPKey($email)\n    {\n        App::uses('SyncTool', 'Tools');\n        $syncTool = new SyncTool();\n        $HttpSocket = $syncTool->setupHttpSocket();\n        $response = $HttpSocket->get('https://pgp.circl.lu/pks/lookup?search=' . urlencode($email) . '&op=index&fingerprint=on&options=mr');\n        if ($response->code != 200) {\n            return $response->code;\n        }\n        return $this->__extractPGPInfo($response->body);\n    }\n\n    private function __extractPGPInfo($body)\n    {\n        $final = array();\n        $lines = explode(\"\\n\", $body);\n        foreach ($lines as $line) {\n            $parts = explode(\":\", $line);\n\n            if ($parts[0] === 'pub') {\n                if (!empty($temp)) {\n                    $final[] = $temp;\n                    $temp = array();\n                }\n\n                if (strpos($parts[6], 'r') !== false || strpos($parts[6], 'd') !== false || strpos($parts[6], 'e') !== false) {\n                    continue; // skip if key is expired, revoked or disabled\n                }\n\n                $temp = array(\n                    'fingerprint' => chunk_split($parts[1], 4, ' '),\n                    'key_id' => substr($parts[1], -8),\n                    'date' => date('Y-m-d', $parts[4]),\n                    'uri' => 'pks/lookup?op=get&search=0x' . $parts[1],\n                );\n\n            } else if ($parts[0] === 'uid' && !empty($temp)) {\n                $temp['address'] = urldecode($parts[1]);\n            }\n        }\n\n        if (!empty($temp)) {\n            $final[] = $temp;\n        }\n\n        return $final;\n    }\n\n    public function describeAuthFields()\n    {\n        $fields = array();\n        $fields = array_merge($fields, array_keys($this->getColumnTypes()));\n        foreach ($fields as $k => $field) {\n            if (in_array($field, array('gpgkey', 'certif_public'))) {\n                unset($fields[$k]);\n            }\n        }\n        $fields = array_values($fields);\n        $relatedModels = array_keys($this->belongsTo);\n        foreach ($relatedModels as $relatedModel) {\n            $fields[] = $relatedModel . '.*';\n        }\n        return $fields;\n    }\n\n    public function getMembersCount($org_id = false)\n    {\n        // for Organizations List\n        $conditions = array();\n        $findType = 'all';\n        if ($org_id !== false) {\n            $findType = 'first';\n            $conditions = array('User.org_id' => $org_id);\n        }\n        $fields = array('org_id', 'COUNT(User.id) AS num_members');\n        $params = array(\n                'fields' => $fields,\n                'recursive' => -1,\n                'group' => array('org_id'),\n                'order' => array('org_id'),\n                'conditions' => $conditions\n        );\n        $orgs = $this->find($findType, $params);\n        if (empty($orgs)) {\n            return 0;\n        }\n        if ($org_id !== false) {\n            return $orgs[0]['num_members'];\n        } else {\n            $usersPerOrg = [];\n            foreach ($orgs as $key => $value) {\n                $usersPerOrg[$value['User']['org_id']] = $value[0]['num_members'];\n            }\n            return $usersPerOrg;\n        }\n    }\n\n    public function findAdminsResponsibleForUser($user)\n    {\n        $admin = $this->find('first', array(\n            'recursive' => -1,\n            'conditions' => array(\n                'Role.perm_admin' => 1,\n                'User.disabled' => 0,\n                'User.org_id' => $user['org_id']\n            ),\n            'contain' => array(\n                'Role' => array('fields' => array('perm_admin'))\n            ),\n            'fields' => array('User.id', 'User.email', 'User.org_id')\n        ));\n        if (count($admin) == 0) {\n            $admin = $this->find('first', array(\n                'recursive' => -1,\n                'conditions' => array(\n                    'Role.perm_site_admin' => 1,\n                    'User.disabled' => 0,\n                ),\n                'contain' => array(\n                    'Role' => array('fields' => array('perm_site_admin'))\n                ),\n                'fields' => array('User.id', 'User.email', 'User.org_id')\n            ));\n        }\n\n        return $admin['User'];\n    }\n\n    public function initiatePasswordReset($user, $firstTime = false, $simpleReturn = false, $fixedPassword = false)\n    {\n        $org = Configure::read('MISP.org');\n        $options = array('passwordResetText', 'newUserText');\n        $subjects = array('[' . $org . ' MISP] New user registration', '[' . $org .  ' MISP] Password reset');\n        $textToFetch = $options[($firstTime ? 0 : 1)];\n        $subject = $subjects[($firstTime ? 0 : 1)];\n        $this->Server = ClassRegistry::init('Server');\n        $body = Configure::read('MISP.' . $textToFetch);\n        if (!$body) {\n            $body = $this->Server->serverSettings['MISP'][$textToFetch]['value'];\n        }\n        $body = $this->adminMessageResolve($body);\n        if ($fixedPassword) {\n            $password = $fixedPassword;\n        } else {\n            $password = $this->generateRandomPassword();\n        }\n        $body = str_replace('$password', $password, $body);\n        $body = str_replace('$username', $user['User']['email'], $body);\n        $result = $this->sendEmail($user, $body, false, $subject);\n        if ($result) {\n            $this->id = $user['User']['id'];\n            $this->saveField('password', $password);\n            $this->saveField('change_pw', '1');\n            if ($simpleReturn) {\n                return true;\n            } else {\n                return array('body'=> json_encode(array('saved' => true, 'success' => 'New credentials sent.')),'status'=>200);\n            }\n        }\n        if ($simpleReturn) {\n            return false;\n        } else {\n            return array('body'=> json_encode(array('saved' => false, 'errors' => 'There was an error notifying the user. His/her credentials were not altered.')),'status'=>200);\n        }\n    }\n\n    public function getOrgAdminsForOrg($org_id, $excludeUserId = false)\n    {\n        $adminRoles = $this->Role->find('list', array(\n            'recursive' => -1,\n            'conditions' => array('perm_admin' => 1),\n            'fields' => array('Role.id', 'Role.id')\n        ));\n        $conditions = array(\n            'User.org_id' => $org_id,\n            'User.disabled' => 0,\n            'User.role_id' => $adminRoles\n        );\n        if ($excludeUserId) {\n            $conditions['User.id !='] = $excludeUserId;\n        }\n        return $this->find('list', array(\n            'recursive' => -1,\n            'conditions' => $conditions,\n            'fields' => array(\n                'User.id', 'User.email'\n            )\n        ));\n    }\n\n    public function verifyPassword($user_id, $password)\n    {\n        $currentUser = $this->find('first', array(\n                'conditions' => array('User.id' => $user_id),\n                'recursive' => -1,\n                'fields' => array('User.password')\n        ));\n        if (empty($currentUser)) {\n            return false;\n        }\n        if (strlen($currentUser['User']['password']) == 40) {\n            App::uses('SimplePasswordHasher', 'Controller/Component/Auth');\n            $passwordHasher = new SimplePasswordHasher();\n        } else {\n            $passwordHasher = new BlowfishPasswordHasher();\n        }\n        $hashed = $passwordHasher->check($password, $currentUser['User']['password']);\n        return $hashed;\n    }\n\n    public function createInitialUser($org_id)\n    {\n        $authKey = $this->generateAuthKey();\n        $admin = array('User' => array(\n            'id' => 1,\n            'email' => 'admin@admin.test',\n            'org_id' => $org_id,\n            'password' => 'admin',\n            'confirm_password' => 'admin',\n            'authkey' => $authKey,\n            'nids_sid' => 4000000,\n            'newsread' => 0,\n            'role_id' => 1,\n            'change_pw' => 1\n        ));\n        $this->validator()->remove('password'); // password is too simple, remove validation\n        $this->save($admin);\n        return $authKey;\n    }\n}\n", "<div class=\"servers index\">\n    <h2><?php echo __('Servers');?></h2>\n    <div class=\"pagination\">\n        <ul>\n        <?php\n        $this->Paginator->options(array(\n            'update' => '.span12',\n            'evalScripts' => true,\n            'before' => '$(\".progress\").show()',\n            'complete' => '$(\".progress\").hide()',\n        ));\n\n            echo $this->Paginator->prev('&laquo; ' . __('previous'), array('tag' => 'li', 'escape' => false), null, array('tag' => 'li', 'class' => 'prev disabled', 'escape' => false, 'disabledTag' => 'span'));\n            echo $this->Paginator->numbers(array('modulus' => 20, 'separator' => '', 'tag' => 'li', 'currentClass' => 'active', 'currentTag' => 'span'));\n            echo $this->Paginator->next(__('next') . ' &raquo;', array('tag' => 'li', 'escape' => false), null, array('tag' => 'li', 'class' => 'next disabled', 'escape' => false, 'disabledTag' => 'span'));\n        ?>\n        </ul>\n    </div>\n    <table class=\"table table-striped table-hover table-condensed\">\n    <tr>\n            <th><?php echo $this->Paginator->sort('id');?></th>\n            <th><?php echo $this->Paginator->sort('name');?></th>\n            <th><?php echo __('Connection test');?></th>\n            <th><?php echo $this->Paginator->sort('internal');?></th>\n            <th><?php echo $this->Paginator->sort('push');?></th>\n            <th><?php echo $this->Paginator->sort('pull');?></th>\n            <th><?php echo $this->Paginator->sort('caching_enabled', 'Cache');?></th>\n            <th><?php echo $this->Paginator->sort('unpublish_event (push event)');?></th>\n            <th><?php echo $this->Paginator->sort('publish_without_email (pull event)');?></th>\n            <th><?php echo $this->Paginator->sort('url');?></th>\n            <th><?php echo __('Remote Organisation');?></th>\n            <th><?php echo $this->Paginator->sort('cert_file');?></th>\n            <th><?php echo $this->Paginator->sort('client_cert_file');?></th>\n            <th><?php echo $this->Paginator->sort('self_signed');?></th>\n            <th><?php echo $this->Paginator->sort('skip_proxy');?></th>\n            <th><?php echo $this->Paginator->sort('org');?></th>\n            <th class=\"actions\"><?php echo __('Actions');?></th>\n    </tr>\n    <?php\nforeach ($servers as $server):\n    $rules = array();\n    $rules['push'] = json_decode($server['Server']['push_rules'], true);\n    $rules['pull'] = json_decode($server['Server']['pull_rules'], true);\n    $syncOptions = array('pull', 'push');\n    $fieldOptions = array('tags', 'orgs');\n    $typeOptions = array('OR' => array('colour' => 'green', 'text' => 'allowed'), 'NOT' => array('colour' => 'red', 'text' => 'blocked'));\n    $ruleDescription = array('pull' => '', 'push' => '');\n    foreach ($syncOptions as $syncOption) {\n        foreach ($fieldOptions as $fieldOption) {\n            foreach ($typeOptions as $typeOption => $typeData) {\n                if (isset($rules[$syncOption][$fieldOption][$typeOption]) && !empty($rules[$syncOption][$fieldOption][$typeOption])) {\n                    $ruleDescription[$syncOption] .= '<span class=\\'bold\\'>' . ucfirst($fieldOption) . ' ' . $typeData['text'] . '</span>: <span class=\\'' . $typeData['colour'] . '\\'>';\n                    foreach ($rules[$syncOption][$fieldOption][$typeOption] as $k => $temp) {\n                        if ($k != 0) $ruleDescription[$syncOption] .= ', ';\n                        if ($syncOption === 'push') $temp = $collection[$fieldOption][$temp];\n                        $ruleDescription[$syncOption] .= h($temp);\n                    }\n                    $ruleDescription[$syncOption] .= '</span><br />';\n                }\n            }\n        }\n    }\n?>\n    <tr>\n        <td class=\"short\"><?php echo h($server['Server']['id']); ?></td>\n        <td>\n            <?php\n                if (!empty($server['Server']['name'])) echo h($server['Server']['name']);\n                else echo h($server['Server']['url']);\n            ?>\n        </td>\n        <td id=\"connection_test_<?php echo $server['Server']['id'];?>\"><span role=\"button\" tabindex=\"0\" aria-label=\"<?php echo __('Test the connection to the remote instance');?>\" title=\"<?php echo __('Test the connection to the remote instance');?>\" class=\"btn btn-primary\" style=\"line-height:10px; padding: 4px 4px;\" onClick=\"testConnection('<?php echo $server['Server']['id'];?>');\"><?php echo __('Run');?></span></td>\n\n<td><span class=\"<?php echo ($server['Server']['internal']? 'icon-ok' : 'icon-remove'); ?>\" role=\"img\" aria-label=\"<?php echo ($server['Server']['internal']? __('Yes') : __('No')); ?>\" title=\"<?php echo ($server['Server']['internal']? __('Internal instance that ignores distribution level degradation *WARNING: Only use this setting if you have several internal instances and the sync link is to an internal extension of the current MISP community*') : __('Normal sync link to an external MISP instance. Distribution degradation will follow the normal rules.')); ?>\"></span></td>\n        <td><span class=\"<?php echo ($server['Server']['push']? 'icon-ok' : 'icon-remove'); ?>\" role=\"img\" aria-label=\"<?php echo ($server['Server']['push']? __('Yes') : __('No')); ?>\"></span><span class=\"short <?php if (!$server['Server']['push'] || empty($ruleDescription['push'])) echo \"hidden\"; ?>\" data-toggle=\"popover\" title=\"Distribution List\" data-content=\"<?php echo $ruleDescription['push']; ?>\"> (<?php echo __('Rules');?>)</span></td>\n        <td><span class=\"<?php echo ($server['Server']['pull']? 'icon-ok' : 'icon-remove'); ?>\" role=\"img\" aria-label=\"<?php echo ($server['Server']['pull']? __('Yes') : __('No')); ?>\"></span><span class=\"short <?php if (!$server['Server']['pull'] || empty($ruleDescription['pull'])) echo \"hidden\"; ?>\" data-toggle=\"popover\" title=\"Distribution List\" data-content=\"<?php echo $ruleDescription['pull']; ?>\"> (<?php echo __('Rules');?>)</span></td>\n        <td>\n            <?php\n                if ($server['Server']['caching_enabled']) {\n                    if (!empty($server['Server']['cache_timestamp'])) {\n                        $units = array('m', 'h', 'd');\n                        $intervals = array(60, 60, 24);\n                        $unit = 's';\n                        $last = time() - $server['Server']['cache_timestamp'];\n                        foreach ($units as $k => $v) {\n                            if ($last > $intervals[$k]) {\n                                $unit = $v;\n                                $last = floor($last / $intervals[$k]);\n                            } else {\n                                break;\n                            }\n                        }\n                        echo sprintf(\n                            '<span class=\"blue bold\">%s%s%s</span> %s',\n                            __('Age: '),\n                            $last,\n                            $unit,\n                            '<span class=\"icon-ok\"></span>'\n                        );\n                    } else {\n                        echo sprintf(\n                            '<span class=\"red bold\">%s</span> %s',\n                            __('Not cached'),\n                            '<span class=\"icon-ok\"></span>'\n                        );\n                    }\n                } else {\n                    echo '<span class=\"icon-remove\" role=\"img\" aria-label=\"' . __('No') . '\"></span>';\n                }\n            ?>\n        </td>\n        <td class=\"short\"><span class=\"<?php echo ($server['Server']['unpublish_event'] ? 'icon-ok' : 'icon-remove'); ?>\" role=\"img\" aria-label=\"<?php echo ($server['Server']['unpublish_event'] ? __('Yes') : __('No')); ?>\"></span></td>\n        <td class=\"short\"><span class=\"<?php echo ($server['Server']['publish_without_email'] ? 'icon-ok' : 'icon-remove'); ?>\" role=\"img\" aria-label=\"<?php echo ($server['Server']['publish_without_email'] ? __('Yes') : __('No')); ?>\"></span></td>\n        <td><?php echo h($server['Server']['url']); ?>&nbsp;</td>\n        <td><a href=\"/organisations/view/<?php echo h($server['RemoteOrg']['id']); ?>\"><?php echo h($server['RemoteOrg']['name']); ?></a></td>\n        <td class=\"short\"><?php echo h($server['Server']['cert_file']); ?>&nbsp;</td>\n        <td class=\"short\"><?php echo h($server['Server']['client_cert_file']); ?>&nbsp;</td>\n        <td class=\"short\"><span class=\"<?php echo ($server['Server']['self_signed'] ? 'icon-ok' : 'icon-remove'); ?>\" role=\"img\" aria-label=\"<?php echo ($server['Server']['self_signed'] ? __('Yes') : __('No')); ?>\"></span></td>\n        <td class=\"short\"><span class=\"<?php echo ($server['Server']['skip_proxy'] ? 'icon-ok' : 'icon-remove'); ?>\" role=\"img\" aria-label=\"<?php echo ($server['Server']['skip_proxy'] ? __('Yes') : __('No')); ?>\"></span></td>\n        <td class=\"short\"><a href=\"/organisations/view/<?php echo h($server['Organisation']['id']); ?>\"><?php echo h($server['Organisation']['name']); ?></a></td>\n        <td class=\"short action-links\">\n            <?php\n                echo sprintf('<a href=\"%s\" title=\"%s\" aria-label=\"%s\" class=\"%s\"></a>', $baseurl . '/servers/previewIndex/' . h($server['Server']['id']), __('Explore'), __('Explore'), 'fa fa-search');\n                if ($server['Server']['pull']) {\n                    echo sprintf('<a href=\"%s\" title=\"%s\" aria-label=\"%s\" class=\"%s\"></a>', $baseurl . '/servers/pull/' . h($server['Server']['id']) . '/update', __('Pull updates to events that already exist locally'), __('Pull updates'), 'fa fa-sync');\n                    echo sprintf('<a href=\"%s\" title=\"%s\" aria-label=\"%s\" class=\"%s\"></a>', $baseurl . '/servers/pull/' . h($server['Server']['id']) . '/full', __('Pull all'), __('Pull all'), 'fa fa-arrow-circle-down');\n                }\n                if ($server['Server']['push']) {\n                    echo sprintf('<a href=\"%s\" title=\"%s\" aria-label=\"%s\" class=\"%s\"></a>', $baseurl . '/servers/push/' . h($server['Server']['id']) . '/full', __('Push all'), __('Push all'), 'fa fa-arrow-circle-up');\n                }\n                if ($server['Server']['caching_enabled']) {\n                        echo sprintf('<a href=\"%s\" title=\"%s\" aria-label=\"%s\" class=\"%s\"></a>', $baseurl . '/servers/cache/' . h($server['Server']['id']), __('Cache instance'), __('Cache instance'), 'fa fa-memory');\n                }\n                $mayModify = ($isSiteAdmin);\n                if ($mayModify) {\n                    echo sprintf('<a href=\"%s\" title=\"%s\" aria-label=\"%s\" class=\"%s\"></a>', $baseurl . '/servers/edit/' . h($server['Server']['id']), __('Edit'), __('Edit'), 'fa fa-edit');\n                    echo $this->Form->postLink('', array('action' => 'delete', $server['Server']['id']), array('class' => 'fa fa-trash', 'title' => __('Delete'), 'aria-label' => __('Delete')), __('Are you sure you want to delete # %s?', $server['Server']['id']));\n                }\n            ?>\n\n        </td>\n    </tr>\n    <?php\nendforeach; ?>\n    </table>\n    <p>\n    <?php\n    echo $this->Paginator->counter(array(\n    'format' => __('Page {:page} of {:pages}, showing {:current} records out of {:count} total, starting on record {:start}, ending on {:end}')\n    ));\n    ?>\n    </p>\n    <div class=\"pagination\">\n        <ul>\n        <?php\n            echo $this->Paginator->prev('&laquo; ' . __('previous'), array('tag' => 'li', 'escape' => false), null, array('tag' => 'li', 'class' => 'prev disabled', 'escape' => false, 'disabledTag' => 'span'));\n            echo $this->Paginator->numbers(array('modulus' => 20, 'separator' => '', 'tag' => 'li', 'currentClass' => 'active', 'currentTag' => 'span'));\n            echo $this->Paginator->next(__('next') . ' &raquo;', array('tag' => 'li', 'escape' => false), null, array('tag' => 'li', 'class' => 'next disabled', 'escape' => false, 'disabledTag' => 'span'));\n        ?>\n        </ul>\n    </div>\n\n</div>\n<script type=\"text/javascript\">\n    $(document).ready(function(){\n        popoverStartup();\n    });\n</script>\n<?php\n    echo $this->element('/genericElements/SideMenu/side_menu', array('menuList' => 'sync', 'menuItem' => 'index'));\n", "<div class=\"users index\">\n    <h2><?php echo __('Users');?></h2>\n    <div class=\"pagination\">\n        <ul>\n        <?php\n            $this->Paginator->options(array(\n                'update' => '.span12',\n                'evalScripts' => true,\n                'before' => '$(\".progress\").show()',\n                'complete' => '$(\".progress\").hide()',\n            ));\n            echo $this->Paginator->prev('&laquo; ' . __('previous'), array('tag' => 'li', 'escape' => false), null, array('tag' => 'li', 'class' => 'prev disabled', 'escape' => false, 'disabledTag' => 'span'));\n            echo $this->Paginator->numbers(array('modulus' => 20, 'separator' => '', 'tag' => 'li', 'currentClass' => 'active', 'currentTag' => 'span'));\n            echo $this->Paginator->next(__('next') . ' &raquo;', array('tag' => 'li', 'escape' => false), null, array('tag' => 'li', 'class' => 'next disabled', 'escape' => false, 'disabledTag' => 'span'));\n        ?>\n        </ul>\n    </div>\n    <?php\n        $filterParamsString = array();\n        foreach ($passedArgsArray as $k => $v) {\n                $filterParamsString[] = sprintf(\n                    '%s: %s',\n                    h(ucfirst($k)),\n                    h($v)\n                );\n        }\n        $filterParamsString = implode(' & ', $filterParamsString);\n        $data = array(\n            'children' => array(\n                array(\n                    'children' => array(\n                        array(\n                            'id' => 'create-button',\n                            'title' => __('Modify filters'),\n                            'fa-icon' => 'search',\n                            'onClick' => 'getPopup',\n                            'onClickParams' => array($urlparams, 'admin/users', 'filterUserIndex')\n                        )\n                    )\n                ),\n                array(\n                    'children' => array(\n                        array(\n                            'requirement' => count($passedArgsArray) > 0,\n                            'html' => sprintf(\n                                '<span class=\"bold\">%s</span>: %s',\n                                __('Filters'),\n                                $filterParamsString\n                            )\n                        ),\n                        array(\n                            'requirement' => count($passedArgsArray) > 0,\n                            'url' => '/admin/users/index',\n                            'title' => __('Remove filters'),\n                            'fa-icon' => 'times'\n                        )\n                    )\n                ),\n                array(\n                    'type' => 'search',\n                    'button' => __('Filter'),\n                    'placeholder' => __('Enter value to search'),\n                    'data' => '',\n                )\n            )\n        );\n        echo $this->element('/genericElements/ListTopBar/scaffold', array('data' => $data));\n        $tab = \"Center\";\n        $filtered = false;\n        if (count($passedArgsArray) > 0) {\n            $tab = \"Left\";\n            $filtered = true;\n        }\n        echo $this->element('Users/userIndexTable');\n    ?>\n    <p>\n    <?php\n    echo $this->Paginator->counter(array(\n    'format' => __('Page {:page} of {:pages}, showing {:current} records out of {:count} total, starting on record {:start}, ending on {:end}')\n    ));\n    ?>\n    </p>\n    <div class=\"pagination\">\n        <ul>\n        <?php\n            echo $this->Paginator->prev('&laquo; ' . __('previous'), array('tag' => 'li', 'escape' => false), null, array('tag' => 'li', 'class' => 'prev disabled', 'escape' => false, 'disabledTag' => 'span'));\n            echo $this->Paginator->numbers(array('modulus' => 20, 'separator' => '', 'tag' => 'li', 'currentClass' => 'active', 'currentTag' => 'span'));\n            echo $this->Paginator->next(__('next') . ' &raquo;', array('tag' => 'li', 'escape' => false), null, array('tag' => 'li', 'class' => 'next disabled', 'escape' => false, 'disabledTag' => 'span'));\n        ?>\n        </ul>\n    </div>\n</div>\n<script type=\"text/javascript\">\n    var passedArgsArray = <?php echo $passedArgs; ?>;\n    $(document).ready(function() {\n        $('.searchFilterButton').click(function() {\n            runIndexFilter(this);\n        });\n        $('#quickFilterButton').click(function() {\n            runIndexQuickFilter();\n        });\n        $('#quickFilterField').on('keypress', function (e) {\n            if(e.which === 13) {\n                runIndexQuickFilter();\n            }\n        });\n    });\n</script>\n<?php\n    echo $this->element('/genericElements/SideMenu/side_menu', array('menuList' => 'admin', 'menuItem' => 'indexUser'));\n"], "fixing_code": ["<?php\nApp::uses('AppShell', 'Console/Command');\nclass AdminShell extends AppShell\n{\n    public $uses = array('Event', 'Post', 'Attribute', 'Job', 'User', 'Task', 'Whitelist', 'Server', 'Organisation', 'AdminSetting', 'Galaxy', 'Taxonomy', 'Warninglist', 'Noticelist', 'ObjectTemplate', 'Bruteforce', 'Role');\n\n    public function jobGenerateCorrelation() {\n        $jobId = $this->args[0];\n        $this->loadModel('Job');\n        $this->Job->id = $jobId;\n        $this->loadModel('Attribute');\n        $this->Attribute->generateCorrelation($jobId, 0);\n        $this->Job->saveField('progress', 100);\n        $this->Job->saveField('message', 'Job done.');\n        $this->Job->saveField('status', 4);\n    }\n\n    public function jobPurgeCorrelation() {\n        $jobId = $this->args[0];\n        $this->loadModel('Job');\n        $this->Job->id = $jobId;\n        $this->loadModel('Attribute');\n        $this->Attribute->purgeCorrelations();\n        $this->Job->saveField('progress', 100);\n        $this->Job->saveField('message', 'Job done.');\n        $this->Job->saveField('status', 4);\n    }\n\n    public function jobGenerateShadowAttributeCorrelation() {\n        $jobId = $this->args[0];\n        $this->loadModel('Job');\n        $this->Job->id = $jobId;\n        $this->loadModel('ShadowAttribute');\n        $this->ShadowAttribute->generateCorrelation($jobId);\n    }\n\n    public function updateMISP() {\n        $status = array('branch' => '2.4');\n        echo $this->Server->update($status) . PHP_EOL;\n    }\n\n    public function restartWorkers()\n    {\n        $this->Server->restartWorkers();\n        echo PHP_EOL . 'Workers restarted.' . PHP_EOL;\n    }\n\n    public function updateAfterPull() {\n        $this->loadModel('Job');\n        $this->loadModel('Server');\n        $submodule_name = $this->args[0];\n        $jobId = $this->args[1];\n        $userId = $this->args[2];\n        $this->Job->id = $jobId;\n        $result = $this->Server->updateAfterPull($submodule_name, $userId);\n        $this->Job->saveField('progress', 100);\n        $this->Job->saveField('date_modified', date(\"Y-m-d H:i:s\"));\n        if ($result) {\n            $this->Job->saveField('message', __('Database updated: ' . $submodule_name));\n        } else {\n            $this->Job->saveField('message', __('Could not update the database: ' . $submodule_name));\n        }\n    }\n\n    public function restartWorker()\n    {\n        if (empty($this->args[0]) || !is_numeric($this->args[0])) {\n            echo 'Usage: ' . APP . '/cake ' . 'Admin restartWorker [PID]' . PHP_EOL;\n        }\n        $pid = $this->args[0];\n        $result = $this->Server->restartWorker($pid);\n        if ($result === true) {\n            $response = __('Worker restarted.');\n        } else {\n            $response = __('Could not restart the worker. Reason: %s', $result);\n        }\n        echo sprintf(\n            '%s%s%s',\n            PHP_EOL,\n            $response,\n            PHP_EOL\n        );\n    }\n\n    public function killWorker()\n    {\n        if (empty($this->args[0]) || !is_numeric($this->args[0])) {\n            echo 'Usage: ' . APP . '/cake ' . 'Admin killWorker [PID]' . PHP_EOL;\n            die();\n        }\n        $pid = $this->args[0];\n        $result = $this->Server->killWorker($pid, false);\n        echo sprintf(\n            '%s%s%s',\n            PHP_EOL,\n            __('Worker killed.'),\n            PHP_EOL\n        );\n    }\n\n    public function startWorker()\n    {\n        if (empty($this->args[0])) {\n            echo 'Usage: ' . APP . '/cake ' . 'Admin startWorker [queue]' . PHP_EOL;\n            die();\n        }\n        $queue = $this->args[0];\n        $this->Server->startWorker($queue);\n        echo sprintf(\n            '%s%s%s',\n            PHP_EOL,\n            __('Worker started.'),\n            PHP_EOL\n        );\n    }\n\n    public function updateJSON() {\n        echo 'Updating all JSON structures.' . PHP_EOL;\n        $results = $this->Server->updateJSON();\n        foreach ($results as $type => $result) {\n            if ($result !== false) {\n                echo sprintf(\n                    __('%s updated.') . PHP_EOL,\n                    Inflector::pluralize(Inflector::humanize($type))\n                );\n            } else {\n                echo sprintf(\n                    __('Could not update %s.') . PHP_EOL,\n                    Inflector::pluralize(Inflector::humanize($type))\n                );\n            }\n        }\n        echo 'All JSON structures updated. Thank you and have a very safe and productive day.' . PHP_EOL;\n    }\n\n    public function updateGalaxies() {\n        // The following is 7.x upwards only\n        //$value = $this->args[0] ?? $this->args[0] ?? 0;\n        $value = empty($this->args[0])  ? null : $this->args[0];\n        if ($value === 'false') $value = 0;\n        if ($value === 'true') $value = 1;\n        if ($value === 'force') $value = 1;\n        $force = $value;\n        $result = $this->Galaxy->update($force);\n        if ($result) {\n            echo 'Galaxies updated' . PHP_EOL;\n        } else {\n            echo 'Could not update Galaxies' . PHP_EOL;\n        }\n    }\n\n    # FIXME: Make Taxonomy->update() return a status string on API if successful\n    public function updateTaxonomies() {\n        $result = $this->Taxonomy->update();\n        if ($result) {\n            echo 'Taxonomies updated' . PHP_EOL;\n        } else {\n            echo 'Could not update Taxonomies' . PHP_EOL;\n        }\n    }\n\n    public function updateWarningLists() {\n        $result = $this->Galaxy->update();\n        if ($result) {\n            echo 'Warning lists updated' . PHP_EOL;\n        } else {\n            echo 'Could not update warning lists' . PHP_EOL;\n        }\n    }\n\n    public function updateNoticeLists() {\n        $result = $this->Noticelist->update();\n        if ($result) {\n            echo 'Notice lists updated' . PHP_EOL;\n        } else {\n            echo 'Could not update notice lists' . PHP_EOL;\n        }\n    }\n\n    # FIXME: Fails to pass userId/orgId properly, global update works.\n    public function updateObjectTemplates() {\n        if (empty($this->args[0])) {\n            echo 'Usage: ' . APP . '/cake ' . 'Admin updateObjectTemplates [user_id]' . PHP_EOL;\n        } else {\n            $userId = $this->args[0];\n            $user = $this->User->find('first', array(\n                'recursive' => -1,\n                'conditions' => array(\n                    'User.id' => $userId,\n                ),\n                'fields' => array('User.id', 'User.org_id')\n            ));\n            # If the user_id passed does not exist, do a global update.\n            if (empty($user)) {\n                echo 'User with ID: ' . $userId . ' not found' . PHP_EOL;\n                $result = $this->ObjectTemplate->update();\n                if ($result) {\n                    echo 'Object templates updated' . PHP_EOL;\n                } else {\n                    echo 'Could not update object templates' . PHP_EOL;\n                }\n            } else {\n                $result = $this->ObjectTemplate->update($user, false,false);\n                if ($result) {\n                    echo 'Object templates updated' . PHP_EOL;\n                } else {\n                    echo 'Could not update object templates' . PHP_EOL;\n                }\n            }\n        }\n    }\n\n    public function jobUpgrade24() {\n        $jobId = $this->args[0];\n        $user_id = $this->args[1];\n        $this->loadModel('Job');\n        $this->Job->id = $jobId;\n        $this->loadModel('Server');\n        $this->Server->upgrade2324($user_id, $jobId);\n        $this->Job->saveField('progress', 100);\n        $this->Job->saveField('message', 'Job done.');\n        $this->Job->saveField('status', 4);\n    }\n\n    public function prune_update_logs() {\n        $jobId = $this->args[0];\n        $user_id = $this->args[1];\n        $user = $this->User->getAuthUser($user_id);\n        $this->loadModel('Job');\n        $this->Job->id = $jobId;\n        $this->loadModel('Log');\n        $this->Log->pruneUpdateLogs($jobId, $user);\n        $this->Job->saveField('progress', 100);\n        $this->Job->saveField('message', 'Job done.');\n        $this->Job->saveField('status', 4);\n    }\n\n    public function getWorkers() {\n        $result = $this->Server->workerDiagnostics($workerIssueCount);\n        $query = 'all';\n        if (!empty($this->args[0])) {\n            $query = $this->args[0];\n        }\n        if ($query === 'dead') {\n            $dead_workers = array();\n            foreach ($result as $queue => $data) {\n                if (!empty($data['workers'])) {\n                    foreach ($data['workers'] as $k => $worker) {\n                        if ($worker['alive']) {\n                            unset($result[$queue]['workers'][$k]);\n                        }\n                    }\n                }\n                if (empty($result[$queue]['workers'])) {\n                    unset($result[$queue]);\n                }\n            }\n        }\n        echo json_encode($result, JSON_PRETTY_PRINT) . PHP_EOL;\n    }\n\n    public function getSetting() {\n        $param = empty($this->args[0]) ? 'all' : $this->args[0];\n        $settings = $this->Server->serverSettingsRead();\n        $result = $settings;\n        if (!empty($param)) {\n            $result = 'No valid setting found for ' . $param;\n            foreach ($settings as $setting) {\n                if ($setting['setting'] == $param) {\n                    $result = $setting;\n                    break;\n                }\n            }\n        }\n        echo json_encode($result, JSON_PRETTY_PRINT) . PHP_EOL;\n  }\n\n    public function setSetting() {\n        $setting_name = !isset($this->args[0]) ? null : $this->args[0];\n        $value = !isset($this->args[1]) ? null : $this->args[1];\n        if ($value === 'false') $value = 0;\n        if ($value === 'true') $value = 1;\n        $cli_user = array('id' => 0, 'email' => 'SYSTEM', 'Organisation' => array('name' => 'SYSTEM'));\n        if (empty($setting_name) || $value === null) {\n            echo 'Invalid parameters. Usage: ' . APP . 'Console/cake Admin setSetting [setting_name] [setting_value]' . PHP_EOL;\n        } else {\n            $setting = $this->Server->getSettingData($setting_name);\n            if (empty($setting)) {\n                echo 'Invalid setting \"' . $setting_name . '\". Please make sure that the setting that you are attempting to change exists and if a module parameter, the modules are running.' . PHP_EOL;\n            }\n            $result = $this->Server->serverSettingsEditValue($cli_user, $setting, $value);\n            if ($result === true) {\n                echo 'Setting \"' . $setting_name . '\" changed to ' . $value . PHP_EOL;\n            } else {\n                echo $result;\n            }\n        }\n        echo PHP_EOL;\n    }\n\n    public function setDatabaseVersion() {\n        if (empty($this->args[0])) echo 'Invalid parameters. Usage: ' . APP . 'Console/cake Admin setDatabaseVersion [db_version]' . PHP_EOL;\n        else {\n            $db_version = $this->AdminSetting->find('first', array(\n                'conditions' => array('setting' => 'db_version')\n            ));\n            if (!empty($db_version)) {\n                $db_version['AdminSetting']['value'] = trim($this->args[0]);\n                $this->AdminSetting->save($db_version);\n                echo 'Database version set. MISP will replay all of the upgrade scripts since the selected version on the next user login.' . PHP_EOL;\n            } else {\n                echo 'Something went wrong. Could not find the existing db version.' . PHP_EOL;\n            }\n        }\n    }\n\n    public function updateDatabase() {\n        $whoami = exec('whoami');\n        if ($whoami === 'httpd' || $whoami === 'www-data' || $whoami === 'apache') {\n            echo 'Executing all updates to bring the database up to date with the current version.' . PHP_EOL;\n            $this->Server->runUpdates(true);\n            echo 'All updates completed.' . PHP_EOL;\n        } else {\n            die('This OS user is not allowed to run this command.'. PHP_EOL. 'Run it under `www-data` or `httpd`.' . PHP_EOL . 'You tried to run this command as: ' . $whoami . PHP_EOL);\n        }\n    }\n\n    public function updateApp() {\n        $whoami = exec('whoami');\n        if ($whoami === 'httpd' || $whoami === 'www-data' || $whoami === 'apache') {\n            $command = $this->args[0];\n            if (!empty($this->args[1])) {\n                $processId = $this->args[1];\n                $job = $this->Job->read(null, $processId);\n            } else { // create worker\n                $this->Job->create();\n                $job_data = array(\n                    'worker' => 'prio',\n                    'job_type' => 'update_app',\n                    'job_input' => 'command: ' . $command,\n                    'status' => 0,\n                    'retries' => 0,\n                    'org_id' => '',\n                    'org' => '',\n                    'message' => 'Updating.',\n                );\n                $this->Job->save($job_data);\n                $job = $this->Job->read(null, $this->Job->id);\n            }\n            $result = $this->Server->updateDatabase($command, false);\n            $job['Job']['progress'] = 100;\n            $job['Job']['message'] = 'Update done';\n            $this->Job->save($job);\n        } else {\n            die('This OS user is not allowed to run this command.' . PHP_EOL . 'Run it under `www-data` or `httpd`.' . PHP_EOL . 'You tried to run this command as: ' . $whoami . PHP_EOL);\n        }\n    }\n\n\n    public function getAuthkey() {\n        if (empty($this->args[0])) {\n            echo 'Invalid parameters. Usage: ' . APP . 'Console/cake Admin getAuthkey [user_email]' . PHP_EOL;\n        } else {\n            $user = $this->User->find('first', array(\n                'recursive' => -1,\n                'conditions' => array('User.email' => strtolower($this->args[0])),\n                'fields' => array('User.authkey')\n            ));\n            if (empty($user)) {\n                echo 'Invalid user.' . PHP_EOL;\n            } else {\n                echo $user['User']['authkey'] . PHP_EOL;\n            }\n        }\n    }\n\n    public function clearBruteforce()\n    {\n        $conditions = array('Bruteforce.username !=' => '');\n        if (!empty($this->args[0])) {\n            $conditions = array('Bruteforce.username' => $this->args[0]);\n        }\n        $result = $this->Bruteforce->deleteAll($conditions, false, false);\n        $target = empty($this->args[0]) ? 'all users' : $this->args[0];\n        if ($result) {\n            echo 'Brutefoce entries for ' . $target . ' deleted.' . PHP_EOL;\n        } else {\n            echo 'Something went wrong, could not delete bruteforce entries for ' . $target . '.' . PHP_EOL;\n        }\n    }\n\n    public function setDefaultRole()\n    {\n        if (empty($this->args[0]) || !is_numeric($this->args[0])) {\n            $roles = $this->Role->find('list', array(\n                'fields' => array('id', 'name')\n            ));\n            foreach ($roles as $k => $role) {\n                $roles[$k] = $k . '. ' . $role;\n            }\n            $roles = implode(PHP_EOL, $roles);\n            echo \"Roles:\\n\" . $roles . $this->separator();\n            echo 'Usage: ' . APP . 'cake ' . 'Admin setDefaultRole [role_id]' . PHP_EOL;\n        } else {\n            $role = $this->Role->find('first', array(\n                'recursive' => -1,\n                'conditions' => array('Role.id' => $this->args[0])\n            ));\n            if (!empty($role)) {\n                $result = $this->AdminSetting->changeSetting('default_role', $role['Role']['id']);\n                echo 'Default Role updated to ' . escapeshellcmd($role['Role']['name']) . PHP_EOL;\n            } else {\n                echo 'Something went wrong, invalid Role.' . PHP_EOL;\n            }\n        }\n    }\n\n    private function separator()\n    {\n        return PHP_EOL . '---------------------------------------------------------------' . PHP_EOL;\n    }\n\n    public function change_authkey()\n    {\n        if (empty($this->args[0])) {\n            echo 'MISP apikey command line tool.' . PHP_EOL . 'To assign a new random API key for a user: ' . APP . 'Console/cake Password [email]' . PHP_EOL . 'To assign a fixed API key: ' . APP . 'Console/cake Password [email] [authkey]' . PHP_EOL;\n            die();\n        }\n        if (!empty($this->args[1])) {\n            $authKey = $this->args[1];\n        } else {\n            $authKey = $this->User->generateAuthKey();\n        }\n        $user = $this->User->find('first', array(\n            'conditions' => array('email' => $this->args[0]),\n            'recursive' => -1,\n            'fields' => array('User.id', 'User.email', 'User.authkey')\n        ));\n        if (empty($user)) {\n            echo 'Invalid e-mail, user not found.' . PHP_EOL;\n            die();\n        }\n        $user['User']['authkey'] = $authKey;\n        $fields = array('id', 'email', 'authkey');\n        if (!$this->User->save($user, true, $fields)) {\n            echo 'Could not update authkey, reason:' . PHP_EOL . json_encode($this->User->validationErrors) . PHP_EOL;\n            die();\n        }\n        echo 'Updated, new key:' . PHP_EOL . $authKey . PHP_EOL;\n    }\n\n    public function getOptionParser() {\n        $parser = parent::getOptionParser();\n        $parser->addSubcommand('updateJSON', array(\n            'help' => __('Update the JSON definitions of MISP.'),\n            'parser' => array(\n                'arguments' => array(\n                    'update' => array('help' => __('Update the submodules before ingestion.'), 'short' => 'u', 'boolean' => 1)\n                )\n            )\n        ));\n        return $parser;\n    }\n\n    public function recoverSinceLastSuccessfulUpdate()\n    {\n        $this->loadModel('Log');\n        $logs = $this->Log->find('all', array(\n            'conditions' => array(\n                'action' => 'update_database',\n                'title LIKE ' => array(\n                    'Successfuly executed the SQL query for %',\n                    'Issues executing the SQL query for %'\n                )\n            ),\n            'order' => 'id DESC'\n        ));\n        $last_db_num = -1;\n        foreach ($logs as $i => $log) {\n            preg_match_all('/.* the SQL query for (\\d+)/', $log['Log']['title'], $matches);\n            if (!empty($matches[1])) {\n                $last_db_num = $matches[1][0];\n                break;\n            }\n        }\n        if ($last_db_num > 0) {\n            echo __('Last DB num which was successfully executed: ') . h($last_db_num) . PHP_EOL;\n            // replay all update from that point.\n            $this->loadModel('AdminSetting');\n            $db_version = $this->AdminSetting->find('first', array('conditions' => array('setting' => 'db_version')));\n            if (!empty($db_version)) {\n                $db_version['AdminSetting']['value'] = $last_db_num;\n                $this->AdminSetting->save($db_version);\n                $this->Server->runUpdates(true);\n            } else {\n                echo __('Something went wrong. Could not find the existing db version') . PHP_EOL;\n            }\n        } else {\n            echo __('DB was never successfully updated or we are on a fresh install') . PHP_EOL;\n        }\n    }\n\n    public function cleanCaches()\n    {\n        echo 'Cleaning caches...' . PHP_EOL;\n        $this->Server->cleanCacheFiles();\n        echo '...caches lost in time, like tears in rain.' . PHP_EOL;\n    }\n\n    public function resetSyncAuthkeys()\n    {\n        if (empty($this->args[0])) {\n            echo sprintf(\n                __(\"MISP mass sync authkey reset command line tool.\\n\\nUsage: %sConsole/cake resetSyncAuthkeys [user_id]\") . \"\\n\\n\",\n                APP\n            );\n            die();\n        } else {\n            $userId = $this->args[0];\n            $user = $this->User->getAuthUser($userId);\n            if (empty($user)) {\n                echo __('Invalid user.') . \"\\n\\n\";\n            }\n            if (!$user['Role']['perm_site_admin']) {\n                echo __('User has to be a site admin.') . \"\\n\\n\";\n            }\n            if (!empty($this->args[1])) {\n                $jobId = $this->args[1];\n            } else {\n                $jobId = false;\n            }\n            $this->User->resetAllSyncAuthKeys($user, $jobId);\n        }\n    }\n}\n", "<?php\nApp::uses('Component', 'Controller');\n\nclass ACLComponent extends Component\n{\n\n    // syntax:\n    // $__aclList[$controller][$action] = $permission_rules\n    // $controller == '*'                 -  any controller can have this action\n    // $action == array()                 -  site admin only has access\n    // $action == '*'                     -  any role has access\n    // $action == array('OR' => array())  -  any role in the array has access\n    // $action == array('AND' => array()) -  roles with all permissions in the array have access\n    // If we add any new functionality to MISP and we don't add it to this list, it will only be visible to site admins.\n    private $__aclList = array(\n            '*' => array(\n                    'blackhole' => array(),\n                    'checkAction' => array(),\n                    'checkAuthUser' => array(),\n                    'checkExternalAuthUser' => array(),\n                    'cleanModelCaches' => array(),\n                    'debugACL' => array(),\n                    'generateCount' => array(),\n                    'getActions' => array(),\n                    'pruneDuplicateUUIDs' => array(),\n                    'queryACL' => array(),\n                    'removeDuplicateEvents' => array(),\n                    'updateDatabase' => array(),\n                    'upgrade2324' => array(),\n            ),\n            'attributes' => array(\n                    'add' => array('perm_add'),\n                    'add_attachment' => array('perm_add'),\n                    'add_threatconnect' => array('perm_add'),\n                    'addTag' => array('perm_tagger'),\n                    'attributeReplace' => array('perm_add'),\n                    'attributeStatistics' => array('*'),\n                    'bro' => array('*'),\n                    'checkAttachments' => array(),\n                    'checkComposites' => array('perm_admin'),\n                    'checkOrphanedAttributes' => array(),\n                    'delete' => array('perm_add'),\n                    'deleteSelected' => array('perm_add'),\n                    'describeTypes' => array('*'),\n                    'download' => array('*'),\n                    'downloadAttachment' => array('*'),\n                    'downloadSample' => array('*'),\n                    'edit' => array('perm_add'),\n                    'editField' => array('perm_add'),\n                    'editSelected' => array('perm_add'),\n                    'exportSearch' => array('*'),\n                    'fetchEditForm' => array('perm_add'),\n                    'fetchViewValue' => array('*'),\n                    'generateCorrelation' => array(),\n                    'hoverEnrichment' => array('perm_add'),\n                    'index' => array('*'),\n                    'pruneOrphanedAttributes' => array(),\n                    'removeTag' => array('perm_tagger'),\n                    'reportValidationIssuesAttributes' => array(),\n                    'restore' => array('perm_add'),\n                    'restSearch' => array('*'),\n                    'returnAttributes' => array('*'),\n                    'rpz' => array('*'),\n                    'search' => array('*'),\n                    'searchAlternate' => array('*'),\n                    'toggleCorrelation' => array('perm_add'),\n                    'text' => array('*'),\n                    'toggleToIDS' => array('perm_add'),\n                    'updateAttributeValues' => array('perm_add'),\n                    'view' => array('*'),\n                    'viewPicture' => array('*'),\n            ),\n            'communities' => array(\n                    'index' => array(),\n                    'requestAccess' => array(),\n                    'view' => array()\n            ),\n            'eventBlacklists' => array(\n                    'add' => array(),\n                    'delete' => array(),\n                    'edit' => array(),\n                    'index' => array(),\n                    'massDelete' => array()\n            ),\n            'eventDelegations' => array(\n                    'acceptDelegation' => array('perm_add'),\n                    'delegateEvent' => array('perm_delegate'),\n                    'deleteDelegation' => array('perm_add'),\n                    'index' => array('*'),\n                    'view' => array('*'),\n            ),\n            'events' => array(\n                    'add' => array('perm_add'),\n                    'addIOC' => array('perm_add'),\n                    'addTag' => array('perm_tagger'),\n                    'add_misp_export' => array('perm_modify'),\n                    'alert' => array('perm_publish'),\n                    'automation' => array('perm_auth'),\n                    'checkLocks' => array('perm_add'),\n                    'checkPublishedStatus' => array('*'),\n                    'checkuuid' => array('perm_sync'),\n                    'contact' => array('*'),\n                    'create_dummy_event' => array(),\n                    'create_massive_dummy_events' => array(),\n                    'csv' => array('*'),\n                    'cullEmptyEvents' => array(),\n                    'delegation_index' => array('*'),\n                    'delete' => array('perm_add'),\n                    'deleteNode' => array('*'),\n                    'dot' => array(),\n                    'downloadExport' => array('*'),\n                    'downloadOpenIOCEvent' => array('*'),\n                    'downloadSearchResult' => array('*'),\n                    'edit' => array('perm_add'),\n                    'enrichEvent' => array('perm_add'),\n                    'export' => array('*'),\n                    'exportChoice' => array('*'),\n                    'exportModule' => array('*'),\n                    'filterEventIdsForPush' => array('perm_sync'),\n                    'filterEventIndex' => array('*'),\n                    'freeTextImport' => array('perm_add'),\n                    'getEditStrategy' => array('perm_add'),\n                    'getEventInfoById' => array('*'),\n                    'getEventGraphReferences' => array('*'),\n                    'getEventGraphTags' => array('*'),\n                    'getEventGraphGeneric' => array('*'),\n                    'genDistributionGraph' => array('*'),\n                    'getDistributionGraph' => array('*'),\n                    'getReferenceData' => array('*'),\n                    'getReferences' => array('*'),\n                    'getObjectTemplate' => array('*'),\n                    'handleModuleResults' => array('*'),\n                    'hids' => array('*'),\n                    'index' => array('*'),\n                    'importChoice' => array('*'),\n                    'importModule' => array('*'),\n                    'massDelete' => array('perm_site_admin'),\n                    'merge' => array('perm_modify'),\n                    'nids' => array('*'),\n                    'proposalEventIndex' => array('*'),\n                    'publish' => array('perm_publish'),\n                    'pushEventToZMQ' => array('perm_publish_zmq'),\n                    'pushEventToKafka' => array('perm_publish_kafka'),\n                    'pushProposals' => array('perm_sync'),\n                    'queryEnrichment' => array('perm_add'),\n                    'removePivot' => array('*'),\n                    'removeTag' => array('perm_tagger'),\n                    'reportValidationIssuesEvents' => array(),\n                    'restSearch' => array('*'),\n                    'saveFreeText' => array('perm_add'),\n                    'stix' => array('*'),\n                    'stix2' => array('*'),\n                    'strposarray' => array(),\n                    'toggleCorrelation' => array('perm_add'),\n                    'unpublish' => array('perm_modify'),\n                    'updateGraph' => array('*'),\n                    'upload_analysis_file' => array('perm_add'),\n                    'upload_sample' => array('AND' => array('perm_auth', 'perm_add')),\n                    'upload_stix' => array('perm_add'),\n                    'view' => array('*'),\n                    'viewEventAttributes' => array('*'),\n                    'viewEventGraph' => array('*'),\n                    'viewGraph' => array('*'),\n                    'viewGalaxyMatrix' => array('*'),\n                    'xml' => array('*')\n            ),\n            'favouriteTags' => array(\n                'index' => array('*'),\n                'toggle' => array('*'),\n                'getToggleField' => array('*')\n            ),\n            'feeds' => array(\n                    'add' => array(),\n                    'cacheFeeds' => array(),\n                    'compareFeeds' => array('*'),\n                    'delete' => array(),\n                    'disable' => array(),\n                    'edit' => array(),\n                    'enable' => array(),\n                    'feedCoverage' => array('*'),\n                    'fetchFromAllFeeds' => array(),\n                    'fetchFromFeed' => array(),\n                    'fetchSelectedFromFreetextIndex' => array(),\n                    'getEvent' => array(),\n                    'importFeeds' => array(),\n                    'index' => array('*'),\n                    'previewEvent' => array('*'),\n                    'previewIndex' => array('*'),\n                    'searchCaches' => array('*'),\n                    'toggleSelected' => array('perm_site_admin'),\n                    'view' => array('*'),\n            ),\n            'galaxies' => array(\n                'attachCluster' => array('perm_tagger'),\n                'attachMultipleClusters' => array('perm_tagger'),\n                'delete' => array(),\n                'index' => array('*'),\n                'selectGalaxy' => array('perm_tagger'),\n                'selectGalaxyNamespace' => array('perm_tagger'),\n                'selectCluster' => array('perm_tagger'),\n                'showGalaxies' => array('*'),\n                'update' => array(),\n                'view' => array('*'),\n                'viewGraph' => array('*')\n            ),\n            'galaxyClusters' => array(\n                'attachToEvent' => array('perm_tagger'),\n                'delete' => array('perm_site_admin'),\n                'detach' => array('perm_tagger'),\n                'index' => array('*'),\n                'view' => array('*'),\n                'viewGalaxyMatrix' => array('*')\n            ),\n            'galaxyElements' => array(\n                    'index' => array('*')\n            ),\n            'jobs' => array(\n                    'cache' => array('*'),\n                    'getError' => array(),\n                    'getGenerateCorrelationProgress' => array('*'),\n                    'getProgress' => array('*'),\n                    'index' => array(),\n                    'clearJobs' => array()\n            ),\n            'logs' => array(\n                    'admin_index' => array('perm_audit'),\n                    'admin_search' => array('perm_audit'),\n                    'event_index' => array('*'),\n                    'maxDateActivity' => array('*'),\n                    'returnDates' => array('*'),\n                    'testForStolenAttributes' => array(),\n                    'pruneUpdateLogs' => array()\n            ),\n      'modules' => array(\n        'index' => array('perm_auth'),\n        'queryEnrichment' => array('perm_auth'),\n      ),\n            'news' => array(\n                    'add' => array(),\n                    'edit' => array(),\n                    'delete' => array(),\n                    'index' => array('*'),\n            ),\n            'noticelists' => array(\n                    'delete' => array(),\n                    'enableNoticelist' => array(),\n                    'getToggleField' => array(),\n                    'index' => array('*'),\n                    'toggleEnable' => array(),\n                    'update' => array(),\n                    'view' => array('*')\n            ),\n            'objects' => array(\n                'add' => array('perm_add'),\n                'addValueField' => array('perm_add'),\n                'delete' => array('perm_add'),\n                'edit' => array('perm_add'),\n                'get_row' => array('perm_add'),\n                'orphanedObjectDiagnostics' => array(),\n                'proposeObjectsFromAttributes' => array('*'),\n                'groupAttributesIntoObject' => array('perm_add'),\n                'revise_object' => array('perm_add'),\n                'view' => array('*'),\n            ),\n            'objectReferences' => array(\n                'add' => array('perm_add'),\n                'delete' => array('perm_add'),\n                'view' => array('*'),\n            ),\n            'objectTemplates' => array(\n                'activate' => array(),\n                'add' => array('perm_object_template'),\n                'edit' => array('perm_object_template'),\n                'delete' => array('perm_object_template'),\n                'getToggleField' => array(),\n                'objectChoice' => array('*'),\n                'objectMetaChoice' => array('perm_add'),\n                'view' => array('*'),\n                'viewElements' => array('*'),\n                'index' => array('*'),\n                'update' => array('perm_site_admin')\n            ),\n            'objectTemplateElements' => array(\n                'viewElements' => array('*')\n            ),\n            'orgBlacklists' => array(\n                    'add' => array(),\n                    'delete' => array(),\n                    'edit' => array(),\n                    'index' => array(),\n            ),\n            'organisations' => array(\n                    'admin_add' => array(),\n                    'admin_delete' => array(),\n                    'admin_edit' => array(),\n                    'admin_generateuuid' => array(),\n                    'admin_merge' => array(),\n                    'fetchOrgsForSG' => array('*'),\n                    'fetchSGOrgRow' => array('*'),\n                    'getUUIDs' => array('perm_sync'),\n                    'index' => array('*'),\n                    'landingpage' => array('*'),\n                    'view' => array('*'),\n            ),\n            'pages' => array(\n                    'display' => array('*'),\n            ),\n            'posts' => array(\n                    'add' => array('*'),\n                    'delete' => array('*'),\n                    'edit' => array('*'),\n                    'pushMessageToZMQ' => array('perm_site_admin')\n            ),\n            'regexp' => array(\n                    'admin_add' => array('perm_regexp_access'),\n                    'admin_clean' => array('perm_regexp_access'),\n                    'admin_delete' => array('perm_regexp_access'),\n                    'admin_edit' => array('perm_regexp_access'),\n                    'admin_index' => array('perm_regexp_access'),\n                    'cleanRegexModifiers' => array('perm_regexp_access'),\n                    'index' => array('*'),\n            ),\n            'restClientHistory' => array(\n                    'delete' => array('*'),\n                    'index' => array('*')\n            ),\n            'roles' => array(\n                    'admin_add' => array(),\n                    'admin_delete' => array(),\n                    'admin_edit' => array(),\n                    'admin_index' => array('perm_admin'),\n                    'admin_set_default' => array(),\n                    'index' => array('*'),\n                    'view' => array('*'),\n            ),\n            'servers' => array(\n                    'add' => array(),\n                    'cache' => array(),\n                    'checkout' => array(),\n                    'createSync' => array('perm_sync'),\n                    'delete' => array(),\n                    'deleteFile' => array(),\n                    'edit' => array(),\n                    'fetchServersForSG' => array('*'),\n                    'filterEventIndex' => array(),\n                    'getApiInfo' => array('*'),\n                    'getGit' => array(),\n                    'getInstanceUUID' => array('perm_sync'),\n                    'getPyMISPVersion' => array('*'),\n                    'getSetting' => array(),\n                    'getSubmodulesStatus' => array(),\n                    'getSubmoduleQuickUpdateForm' => array(),\n                    'getWorkers' => array(),\n                    'getVersion' => array('*'),\n                    'import' => array(),\n                    'index' => array(),\n                    'ondemandAction' => array(),\n                    'postTest' => array(),\n                    'previewEvent' => array(),\n                    'previewIndex' => array(),\n                    'pull' => array(),\n                    'purgeSessions' => array(),\n                    'push' => array(),\n                    'rest' => array('perm_auth'),\n                    'restartWorkers' => array(),\n                    'serverSettings' => array(),\n                    'serverSettingsEdit' => array(),\n                    'serverSettingsReloadSetting' => array(),\n                    'startWorker' => array(),\n                    'startZeroMQServer' => array(),\n                    'statusZeroMQServer' => array(),\n                    'stopWorker' => array(),\n                    'stopZeroMQServer' => array(),\n                    'testConnection' => array(),\n                    'update' => array(),\n                    'updateJSON' => array(),\n                    'updateProgress' => array(),\n                    'updateSubmodule' => array(),\n                    'uploadFile' => array(),\n                    'clearWorkerQueue' => array()\n            ),\n            'shadowAttributes' => array(\n                    'accept' => array('perm_add'),\n                    'acceptSelected' => array('perm_add'),\n                    'add' => array('perm_add'),\n                    'add_attachment' => array('perm_add'),\n                    'delete' => array('perm_add'),\n                    'discard' => array('perm_add'),\n                    'discardSelected' => array('perm_add'),\n                    'download' => array('*'),\n                    'edit' => array('perm_add'),\n                    'editField' => array('perm_add'),\n                    'fetchEditForm' => array('perm_add'),\n                    'generateCorrelation' => array(),\n                    'getProposalsByUuid' => array('perm_sync'),\n                    'getProposalsByUuidList' => array('perm_sync'),\n                    'index' => array('*'),\n                    'view' => array('*'),\n            ),\n            'sharingGroups' => array(\n                    'add' => array('perm_sharing_group'),\n                    'addServer' => array('perm_sharing_group'),\n                    'addOrg' => array('perm_sharing_group'),\n                    'delete' => array('perm_sharing_group'),\n                    'edit' => array('perm_sharing_group'),\n                    'index' => array('*'),\n                    'removeServer' => array('perm_sharing_group'),\n                    'removeOrg' => array('perm_sharing_group'),\n                    'view' => array('*'),\n            ),\n            'sightings' => array(\n                    'add' => array('perm_sighting'),\n                    'restSearch' => array('perm_sighting'),\n                    'advanced' => array('perm_sighting'),\n                    'delete' => array('perm_sighting'),\n                    'index' => array('*'),\n                    'listSightings' => array('*'),\n                    'quickDelete' => array('perm_sighting'),\n                    'viewSightings' => array('*'),\n                    'quickAdd' => array('perm_sighting')\n            ),\n            'tagCollections' => array(\n                    'add' => array('perm_tag_editor'),\n                    'addTag' => array('perm_tag_editor'),\n                    'delete' => array('perm_tag_editor'),\n                    'edit' => array('perm_tag_editor'),\n                    'getRow' => array('perm_tag_editor'),\n                    'import' => array('perm_tag_editor'),\n                    'index' => array('*'),\n                    'removeTag' => array('perm_tag_editor'),\n                    'view' => array('*')\n            ),\n            'tags' => array(\n                    'add' => array('perm_tag_editor'),\n                    'attachTagToObject' => array('perm_tagger'),\n                    'delete' => array(),\n                    'edit' => array(),\n                    'index' => array('*'),\n                    'quickAdd' => array('perm_tag_editor'),\n                    'removeTagFromObject' => array('perm_tagger'),\n                    'search' => array('*'),\n                    'selectTag' => array('perm_tagger'),\n                    'selectTaxonomy' => array('perm_tagger'),\n                    'showEventTag' => array('*'),\n                    'showAttributeTag' => array('*'),\n                    'showTagControllerTag' => array('*'),\n                    'tagStatistics' => array('*'),\n                    'view' => array('*'),\n                    'viewGraph' => array('*'),\n                    'viewTag' => array('*')\n            ),\n            'tasks' => array(\n                    'index' => array(),\n                    'setTask' => array(),\n            ),\n            'taxonomies' => array(\n                    'addTag' => array(),\n                    'delete' => array(),\n                    'disable' => array(),\n                    'disableTag' => array(),\n                    'enable' => array(),\n                    'index' => array('*'),\n                    'taxonomyMassConfirmation' => array('perm_tagger'),\n                    'taxonomyMassHide' => array('perm_tagger'),\n                    'taxonomyMassUnhide' => array('perm_tagger'),\n                    'toggleRequired' => array('perm_site_admin'),\n                    'update' => array(),\n                    'view' => array('*'),\n                    'unhideTag' => array('perm_tagger'),\n                    'hideTag' => array('perm_tagger'),\n            ),\n            'templateElements' => array(\n                    'add' => array('perm_template'),\n                    'delete' => array('perm_template'),\n                    'edit' => array('perm_template'),\n                    'index' => array('*'),\n                    'templateElementAddChoices' => array('perm_template'),\n            ),\n            'templates' => array(\n                    'add' => array('perm_template'),\n                    'delete' => array('perm_template'),\n                    'deleteTemporaryFile' => array('perm_add'),\n                    'edit' => array('perm_template'),\n                    'index' => array('*'),\n                    'populateEventFromTemplate' => array('perm_add'),\n                    'saveElementSorting' => array('perm_template'),\n                    'submitEventPopulation' => array('perm_add'),\n                    'templateChoices' => array('*'),\n                    'uploadFile' => array('*'),\n                    'view' => array('*'),\n            ),\n            'threads' => array(\n                    'index' => array('*'),\n                    'view' => array('*'),\n                    'viewEvent' => array('*'),\n            ),\n            'users' => array(\n                    'admin_add' => array('perm_admin'),\n                    'admin_delete' => array('perm_admin'),\n                    'admin_edit' => array('perm_admin'),\n                    'admin_email' => array('perm_admin'),\n                    'admin_filterUserIndex' => array('perm_admin'),\n                    'admin_index' => array('perm_admin'),\n                    'admin_quickEmail' => array('perm_admin'),\n                    'admin_view' => array('perm_admin'),\n                    'arrayCopy' => array(),\n                    'attributehistogram' => array('*'),\n                    'change_pw' => array('*'),\n                    'checkAndCorrectPgps' => array(),\n                    'checkIfLoggedIn' => array('*'),\n                    'dashboard' => array('*'),\n                    'delete' => array('perm_admin'),\n                    'downloadTerms' => array('*'),\n                    'edit' => array('*'),\n                    'fetchPGPKey' => array('*'),\n                    'histogram' => array('*'),\n                    'index' => array('*'),\n                    'initiatePasswordReset' => array('perm_admin'),\n                    'login' => array('*'),\n                    'logout' => array('*'),\n                    'resetAllSyncAuthKeys' => array(),\n                    'resetauthkey' => array('*'),\n                    'request_API' => array('*'),\n                    'routeafterlogin' => array('*'),\n                    'statistics' => array('*'),\n                    'tagStatisticsGraph' => array('*'),\n                    'terms' => array('*'),\n                    'updateLoginTime' => array('*'),\n                    'verifyCertificate' => array(),\n                    'verifyGPG' => array(),\n                    'view' => array('*'),\n            ),\n            'warninglists' => array(\n                    'checkValue' => array('perm_auth'),\n                    'delete' => array(),\n                    'enableWarninglist' => array(),\n                    'getToggleField' => array(),\n                    'index' => array('*'),\n                    'toggleEnable' => array(),\n                    'update' => array(),\n                    'view' => array('*')\n            ),\n            'whitelists' => array(\n                    'admin_add' => array('perm_regexp_access'),\n                    'admin_delete' => array('perm_regexp_access'),\n                    'admin_edit' => array('perm_regexp_access'),\n                    'admin_index' => array('perm_regexp_access'),\n                    'index' => array('*'),\n            ),\n            'eventGraph' => array(\n                    'view' => array('*'),\n                    'add' => array('perm_add'),\n                    'delete' => array('perm_modify'),\n            )\n    );\n\n    private function __checkLoggedActions($user, $controller, $action)\n    {\n        $loggedActions = array(\n            'servers' => array(\n                'index' => array(\n                    'role' => array(\n                        'NOT' => array(\n                            'perm_site_admin'\n                        )\n                    ),\n                    'message' => __('This could be an indication of an attempted privilege escalation on older vulnerable versions of MISP (<2.4.115)')\n                )\n            )\n        );\n        foreach ($loggedActions as $k => $v) {\n            $loggedActions[$k] = array_change_key_case($v);\n        }\n        $message = '';\n        if (!empty($loggedActions[$controller])) {\n            if (!empty($loggedActions[$controller][$action])) {\n                $message = $loggedActions[$controller][$action]['message'];\n                $hit = false;\n                if (empty($loggedActions[$controller][$action]['role'])) {\n                    $hit = true;\n                } else {\n                    $role_req = $loggedActions[$controller][$action]['role'];\n                    if (empty($role_req['OR']) && empty($role_req['AND']) && empty($role_req['NOT'])) {\n                        $role_req = array('OR' => $role_req);\n                    }\n                    if (!empty($role_req['NOT'])) {\n                        foreach ($role_req['NOT'] as $k => $v) {\n                            if (!$user['Role'][$v]) {\n                                $hit = true;\n                                continue;\n                            }\n                        }\n                    }\n                    if (!$hit && !empty($role_req['AND'])) {\n                        $subhit = true;\n                        foreach ($role_req['AND'] as $k => $v) {\n                            $subhit = $subhit && $user['Role'][$v];\n                        }\n                        if ($subhit) {\n                            $hit = true;\n                        }\n                    }\n                    if (!$hit && !empty($role_req['OR'])) {\n                        foreach ($role_req['OR'] as $k => $v) {\n                            if ($user['Role'][$v]) {\n                                $hit = true;\n                                continue;\n                            }\n                        }\n                    }\n                    if ($hit) {\n                        $this->Log = ClassRegistry::init('Log');\n                        $this->Log->create();\n                        $this->Log->save(array(\n                                'org' => 'SYSTEM',\n                                'model' => 'User',\n                                'model_id' => $user['id'],\n                                'email' => $user['email'],\n                                'action' => 'security',\n                                'user_id' => $user['id'],\n                                'title' => __('User triggered security alert by attempting to access /%s/%s. Reason why this endpoint is of interest: %s', $controller, $action, $message),\n                        ));\n                    }\n                }\n            }\n        }\n    }\n\n    // The check works like this:\n    // If the user is a site admin, return true\n    // If the requested action has an OR-d list, iterate through the list. If any of the permissions are set for the user, return true\n    // If the requested action has an AND-ed list, iterate through the list. If any of the permissions for the user are not set, turn the check to false. Otherwise return true.\n    // If the requested action has a permission, check if the user's role has it flagged. If yes, return true\n    // If we fall through all of the checks, return an exception.\n    public function checkAccess($user, $controller, $action, $soft = false)\n    {\n        $controller = lcfirst(Inflector::camelize($controller));\n        $action = strtolower($action);\n        $aclList = $this->__aclList;\n        foreach ($aclList as $k => $v) {\n            $aclList[$k] = array_change_key_case($v);\n        }\n        $this->__checkLoggedActions($user, $controller, $action);\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        if (!isset($aclList[$controller])) {\n            return $this->__error(404, 'Invalid controller.', $soft);\n        }\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        if (isset($aclList[$controller][$action]) && !empty($aclList[$controller][$action])) {\n            if (in_array('*', $aclList[$controller][$action])) {\n                return true;\n            }\n            if (isset($aclList[$controller][$action]['OR'])) {\n                foreach ($aclList[$controller][$action]['OR'] as $permission) {\n                    if ($user['Role'][$permission]) {\n                        return true;\n                    }\n                }\n            } elseif (isset($aclList[$controller][$action]['AND'])) {\n                $allConditionsMet = true;\n                foreach ($aclList[$controller][$action]['AND'] as $permission) {\n                    if (!$user['Role'][$permission]) {\n                        $allConditionsMet = false;\n                    }\n                }\n                if ($allConditionsMet) {\n                    return true;\n                }\n            } elseif ($user['Role'][$aclList[$controller][$action][0]]) {\n                return true;\n            }\n        }\n        return $this->__error(403, 'You do not have permission to use this functionality.', $soft);\n    }\n\n    private function __error($code, $message, $soft = false)\n    {\n        if ($soft) {\n            return $code;\n        }\n        switch ($code) {\n            case 404:\n                throw new NotFoundException($message);\n                break;\n            case 403:\n                throw new MethodNotAllowedException($message);\n            default:\n                throw new InternalErrorException('Unknown error: ' . $message);\n        }\n    }\n\n    private function __findAllFunctions()\n    {\n        $functionFinder = '/function[\\s\\n]+(\\S+)[\\s\\n]*\\(/';\n        $dir = new Folder(APP . 'Controller');\n        $files = $dir->find('.*\\.php');\n        $results = array();\n        foreach ($files as $file) {\n            $controllerName = lcfirst(str_replace('Controller.php', \"\", $file));\n            if ($controllerName === 'app') {\n                $controllerName = '*';\n            }\n            $functionArray = array();\n            $fileContents = file_get_contents(APP . 'Controller' . DS . $file);\n            $fileContents = preg_replace('/\\/\\*[^\\*]+?\\*\\//', '', $fileContents);\n            preg_match_all($functionFinder, $fileContents, $functionArray);\n            foreach ($functionArray[1] as $function) {\n                if (substr($function, 0, 1) !== '_' && $function !== 'beforeFilter' && $function !== 'afterFilter') {\n                    $results[$controllerName][] = $function;\n                }\n            }\n        }\n        return $results;\n    }\n\n    public function printAllFunctionNames($content = false)\n    {\n        $results = $this->__findAllFunctions();\n        ksort($results);\n        return $results;\n    }\n\n    public function findMissingFunctionNames($content = false)\n    {\n        $results = $this->__findAllFunctions();\n        $missing = array();\n        foreach ($results as $controller => $functions) {\n            foreach ($functions as $function) {\n                if (!isset($this->__aclList[$controller])\n                || !in_array($function, array_keys($this->__aclList[$controller]))) {\n                    $missing[$controller][] = $function;\n                }\n            }\n        }\n        return $missing;\n    }\n\n    public function printRoleAccess($content = false)\n    {\n        $results = array();\n        $this->Role = ClassRegistry::init('Role');\n        $conditions = array();\n        if (is_numeric($content)) {\n            $conditions = array('Role.id' => $content);\n        }\n        $roles = $this->Role->find('all', array(\n            'recursive' => -1,\n            'conditions' => $conditions\n        ));\n        if (empty($roles)) {\n            throw new NotFoundException('Role not found.');\n        }\n        foreach ($roles as $role) {\n            $urls = $this->__checkRoleAccess($role['Role']);\n            $results[$role['Role']['id']] = array('name' => $role['Role']['name'], 'urls' => $urls);\n        }\n        return $results;\n    }\n\n    private function __checkRoleAccess($role)\n    {\n        $result = array();\n        foreach ($this->__aclList as $controller => $actions) {\n            $controllerNames = Inflector::variable($controller) == Inflector::underscore($controller) ? array(Inflector::variable($controller)) : array(Inflector::variable($controller), Inflector::underscore($controller));\n            foreach ($controllerNames as $controllerName) {\n                foreach ($actions as $action => $permissions) {\n                    if ($role['perm_site_admin']) {\n                        $result[] = DS . $controllerName . DS . $action;\n                    } elseif (in_array('*', $permissions)) {\n                        $result[] = DS . $controllerName . DS . $action . DS . '*';\n                    } elseif (isset($permissions['OR'])) {\n                        $access = false;\n                        foreach ($permissions['OR'] as $permission) {\n                            if ($role[$permission]) {\n                                $access = true;\n                            }\n                        }\n                        if ($access) {\n                            $result[] = DS . $controllerName . DS . $action . DS . '*';\n                        }\n                    } elseif (isset($permissions['AND'])) {\n                        $access = true;\n                        foreach ($permissions['AND'] as $permission) {\n                            if ($role[$permission]) {\n                                $access = false;\n                            }\n                        }\n                        if ($access) {\n                            $result[] = DS . $controllerName . DS . $action . DS . '*';\n                        }\n                    } elseif (isset($permissions[0]) && $role[$permissions[0]]) {\n                        $result[] = DS . $controllerName . DS . $action . DS . '*';\n                    }\n                }\n            }\n        }\n        return $result;\n    }\n}\n", "<?php\nApp::uses('AppController', 'Controller');\nApp::uses('Xml', 'Utility');\n\nclass ServersController extends AppController\n{\n    public $components = array('Security' ,'RequestHandler');   // XXX ACL component\n\n    public $paginate = array(\n            'limit' => 60,\n            'recursive' => -1,\n            'contain' => array(\n                    'User' => array(\n                            'fields' => array('User.id', 'User.org_id', 'User.email'),\n                    ),\n                    'Organisation' => array(\n                            'fields' => array('Organisation.name', 'Organisation.id'),\n                    ),\n                    'RemoteOrg' => array(\n                            'fields' => array('RemoteOrg.name', 'RemoteOrg.id'),\n                    ),\n            ),\n            'maxLimit' => 9999, // LATER we will bump here on a problem once we have more than 9999 events\n            'order' => array(\n                    'Server.url' => 'ASC'\n            ),\n    );\n\n    public $uses = array('Server', 'Event');\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n        $this->Security->unlockedActions[] = 'getApiInfo';\n        // permit reuse of CSRF tokens on some pages.\n        switch ($this->request->params['action']) {\n            case 'push':\n            case 'pull':\n            case 'getVersion':\n            case 'testConnection':\n                $this->Security->csrfUseOnce = false;\n        }\n    }\n\n    public function index()\n    {\n        if ($this->_isRest()) {\n            $params = array(\n                'recursive' => -1,\n                'contain' => array(\n                        'User' => array(\n                                'fields' => array('User.id', 'User.org_id', 'User.email'),\n                        ),\n                        'Organisation' => array(\n                                'fields' => array('Organisation.id', 'Organisation.name', 'Organisation.uuid', 'Organisation.nationality', 'Organisation.sector', 'Organisation.type'),\n                        ),\n                        'RemoteOrg' => array(\n                                'fields' => array('RemoteOrg.id', 'RemoteOrg.name', 'RemoteOrg.uuid', 'RemoteOrg.nationality', 'RemoteOrg.sector', 'RemoteOrg.type'),\n                        ),\n                ),\n            );\n            $servers = $this->Server->find('all', $params);\n            $servers = $this->Server->attachServerCacheTimestamps($servers);\n            return $this->RestResponse->viewData($servers, $this->response->type());\n        } else {\n            $servers = $this->paginate();\n            $servers = $this->Server->attachServerCacheTimestamps($servers);\n            $this->set('servers', $servers);\n            $collection = array();\n            $collection['orgs'] = $this->Server->Organisation->find('list', array(\n                  'fields' => array('id', 'name'),\n            ));\n            $this->loadModel('Tag');\n            $collection['tags'] = $this->Tag->find('list', array(\n                  'fields' => array('id', 'name'),\n            ));\n            $this->set('collection', $collection);\n        }\n    }\n\n    public function previewIndex($id)\n    {\n        $urlparams = '';\n        $passedArgs = array();\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        $server = $this->Server->find('first', array('conditions' => array('Server.id' => $id), 'recursive' => -1, 'fields' => array('Server.id', 'Server.url', 'Server.name')));\n        if (empty($server)) {\n            throw new NotFoundException('Invalid server ID.');\n        }\n        $validFilters = $this->Server->validEventIndexFilters;\n        foreach ($validFilters as $k => $filter) {\n            if (isset($this->passedArgs[$filter])) {\n                $passedArgs[$filter] = $this->passedArgs[$filter];\n                if ($k != 0) {\n                    $urlparams .= '/';\n                }\n                $urlparams .= $filter . ':' . $this->passedArgs[$filter];\n            }\n        }\n        $combinedArgs = array_merge($this->passedArgs, $passedArgs);\n        if (!isset($combinedArgs['sort'])) {\n            $combinedArgs['sort'] = 'timestamp';\n            $combinedArgs['direction'] = 'desc';\n        }\n        if (empty($combinedArgs['page'])) {\n            $combinedArgs['page'] = 1;\n        }\n        if (empty($combinedArgs['limit'])) {\n            $combinedArgs['limit'] = 60;\n        }\n        $total_count = 0;\n        $events = $this->Server->previewIndex($id, $this->Auth->user(), $combinedArgs, $total_count);\n        $this->loadModel('Event');\n        $threat_levels = $this->Event->ThreatLevel->find('all');\n        $this->set('threatLevels', Set::combine($threat_levels, '{n}.ThreatLevel.id', '{n}.ThreatLevel.name'));\n        App::uses('CustomPaginationTool', 'Tools');\n        $customPagination = new CustomPaginationTool();\n        $params = $customPagination->createPaginationRules($events, $this->passedArgs, $this->alias);\n        if (!empty($total_count)) {\n            $params['pageCount'] = ceil($total_count / $params['limit']);\n        }\n        $this->params->params['paging'] = array($this->modelClass => $params);\n        if (is_array($events)) {\n            if (count($events) > 60) {\n                $customPagination->truncateByPagination($events, $params);\n            }\n        } else ($events = array());\n        $this->set('events', $events);\n        $this->set('eventDescriptions', $this->Event->fieldDescriptions);\n        $this->set('analysisLevels', $this->Event->analysisLevels);\n        $this->set('distributionLevels', $this->Event->distributionLevels);\n\n        $shortDist = array(0 => 'Organisation', 1 => 'Community', 2 => 'Connected', 3 => 'All', 4 => ' sharing Group');\n        $this->set('shortDist', $shortDist);\n        $this->set('id', $id);\n        $this->set('urlparams', $urlparams);\n        $this->set('passedArgs', json_encode($passedArgs));\n        $this->set('passedArgsArray', $passedArgs);\n        $this->set('server', $server);\n    }\n\n    public function previewEvent($serverId, $eventId, $all = false)\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        $server = $this->Server->find('first', array('conditions' => array('Server.id' => $serverId), 'recursive' => -1, 'fields' => array('Server.id', 'Server.url', 'Server.name')));\n        if (empty($server)) {\n            throw new NotFoundException('Invalid server ID.');\n        }\n        $event = $this->Server->previewEvent($serverId, $eventId);\n        // work on this in the future to improve the feedback\n        // 2 = wrong error code\n        if (is_numeric($event)) {\n            throw new NotFoundException('Invalid event.');\n        }\n        $this->loadModel('Event');\n        $params = $this->Event->rearrangeEventForView($event, $this->passedArgs, $all);\n        $this->params->params['paging'] = array('Server' => $params);\n        $this->set('event', $event);\n        $this->set('server', $server);\n        $this->loadModel('Event');\n        $dataForView = array(\n                'Attribute' => array('attrDescriptions' => 'fieldDescriptions', 'distributionDescriptions' => 'distributionDescriptions', 'distributionLevels' => 'distributionLevels'),\n                'Event' => array('eventDescriptions' => 'fieldDescriptions', 'analysisLevels' => 'analysisLevels'),\n                'Object' => array()\n        );\n        foreach ($dataForView as $m => $variables) {\n            if ($m === 'Event') {\n                $currentModel = $this->Event;\n            } elseif ($m === 'Attribute') {\n                $currentModel = $this->Event->Attribute;\n            } elseif ($m === 'Object') {\n                $currentModel = $this->Event->Object;\n            }\n            foreach ($variables as $alias => $variable) {\n                $this->set($alias, $currentModel->{$variable});\n            }\n        }\n        $threat_levels = $this->Event->ThreatLevel->find('all');\n        $this->set('threatLevels', Set::combine($threat_levels, '{n}.ThreatLevel.id', '{n}.ThreatLevel.name'));\n    }\n\n    public function filterEventIndex($id)\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        $validFilters = $this->Server->validEventIndexFilters;\n        $validatedFilterString = '';\n        foreach ($this->passedArgs as $k => $v) {\n            if (in_array('' . $k, $validFilters)) {\n                if ($validatedFilterString != '') {\n                    $validatedFilterString .= '/';\n                }\n                $validatedFilterString .= $k . ':' . $v;\n            }\n        }\n        $this->set('id', $id);\n        $this->set('validFilters', $validFilters);\n        $this->set('filter', $validatedFilterString);\n    }\n\n    public function add()\n    {\n        if (!$this->_isSiteAdmin()) {\n            $this->redirect(array('controller' => 'servers', 'action' => 'index'));\n        }\n        if ($this->request->is('post')) {\n            if ($this->_isRest()) {\n                if (!isset($this->request->data['Server'])) {\n                    $this->request->data = array('Server' => $this->request->data);\n                }\n            }\n            if (!empty($this->request->data['Server']['json'])) {\n                $json = json_decode($this->request->data['Server']['json'], true);\n            } elseif ($this->_isRest()) {\n                if (empty($this->request->data['Server']['remote_org_id'])) {\n                    throw new MethodNotAllowedException('No remote org ID set. Please pass it as remote_org_id');\n                }\n            }\n            $fail = false;\n            if (empty(Configure::read('MISP.host_org_id'))) {\n                $this->request->data['Server']['internal'] = 0;\n            }\n            // test the filter fields\n            if (!empty($this->request->data['Server']['pull_rules']) && !$this->Server->isJson($this->request->data['Server']['pull_rules'])) {\n                $fail = true;\n                $error_msg = __('The pull filter rules must be in valid JSON format.');\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'add', false, array('pull_rules' => $error_msg), $this->response->type());\n                } else {\n                    $this->Flash->error($error_msg);\n                }\n            }\n\n            if (!$fail && !empty($this->request->data['Server']['push_rules']) && !$this->Server->isJson($this->request->data['Server']['push_rules'])) {\n                $fail = true;\n                $error_msg = __('The push filter rules must be in valid JSON format.');\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'add', false, array('push_rules' => $error_msg), $this->response->type());\n                } else {\n                    $this->Flash->error($error_msg);\n                }\n            }\n            if (!$fail) {\n                if ($this->_isRest()) {\n                    $defaults = array(\n                        'push' => 0,\n                        'pull' => 0,\n                        'caching_enabled' => 0,\n                        'json' => '[]',\n                        'push_rules' => '[]',\n                        'pull_rules' => '[]',\n                        'self_signed' => 0\n                    );\n                    foreach ($defaults as $default => $dvalue) {\n                        if (!isset($this->request->data['Server'][$default])) {\n                            $this->request->data['Server'][$default] = $dvalue;\n                        }\n                    }\n                }\n                // force check userid and orgname to be from yourself\n                $this->request->data['Server']['org_id'] = $this->Auth->user('org_id');\n                if ($this->_isRest()) {\n                    if (empty($this->request->data['Server']['remote_org_id'])) {\n                        return $this->RestResponse->saveFailResponse('Servers', 'add', false, array('Organisation' => 'Remote Organisation\\'s id/uuid not given (remote_org_id)'), $this->response->type());\n                    }\n                    if (Validation::uuid($this->request->data['Server']['remote_org_id'])) {\n                        $orgCondition = array('uuid' => $this->request->data['Server']['remote_org_id']);\n                    } else {\n                        $orgCondition = array('id' => $this->request->data['Server']['remote_org_id']);\n                    }\n                    $existingOrgs = $this->Server->Organisation->find('first', array(\n                            'conditions' => $orgCondition,\n                            'recursive' => -1,\n                            'fields' => array('id', 'uuid')\n                    ));\n                    if (empty($existingOrgs)) {\n                        return $this->RestResponse->saveFailResponse('Servers', 'add', false, array('Organisation' => 'Invalid Remote Organisation'), $this->response->type());\n                    }\n                } else {\n                    if ($this->request->data['Server']['organisation_type'] < 2) {\n                        $this->request->data['Server']['remote_org_id'] = $json['id'];\n                    } else {\n                        $existingOrgs = $this->Server->Organisation->find('first', array(\n                                'conditions' => array('uuid' => $json['uuid']),\n                                'recursive' => -1,\n                                'fields' => array('id', 'uuid')\n                        ));\n                        if (!empty($existingOrgs)) {\n                            $fail = true;\n                            $this->Flash->error(__('That organisation could not be created as the uuid is in use already.'));\n                        }\n                        if (!$fail) {\n                            $this->Server->Organisation->create();\n                            $orgSave = $this->Server->Organisation->save(array(\n                                    'name' => $json['name'],\n                                    'uuid' => $json['uuid'],\n                                    'local' => 0,\n                                    'created_by' => $this->Auth->user('id')\n                            ));\n\n                            if (!$orgSave) {\n                                $this->Flash->error(__('Couldn\\'t save the new organisation, are you sure that the uuid is in the correct format? Also, make sure the organisation\\'s name doesn\\'t clash with an existing one.'));\n                                $fail = true;\n                                $this->request->data['Server']['external_name'] = $json['name'];\n                                $this->request->data['Server']['external_uuid'] = $json['uuid'];\n                            } else {\n                                $this->request->data['Server']['remote_org_id'] = $this->Server->Organisation->id;\n                            }\n                        }\n                    }\n                }\n                if (!$fail) {\n                    if (Configure::read('MISP.host_org_id') == 0 || $this->request->data['Server']['remote_org_id'] != Configure::read('MISP.host_org_id')) {\n                        $this->request->data['Server']['internal'] = 0;\n                    }\n                    $this->request->data['Server']['org_id'] = $this->Auth->user('org_id');\n                    if (empty($this->request->data['Server']['push_rules'])) {\n                        $this->request->data['Server']['push_rules'] = '[]';\n                    }\n                    if (empty($this->request->data['Server']['pull_rules'])) {\n                        $this->request->data['Server']['pull_rules'] = '[]';\n                    }\n                    if ($this->Server->save($this->request->data)) {\n                        if (isset($this->request->data['Server']['submitted_cert'])) {\n                            $this->__saveCert($this->request->data, $this->Server->id, false);\n                        }\n                        if (isset($this->request->data['Server']['submitted_client_cert'])) {\n                            $this->__saveCert($this->request->data, $this->Server->id, true);\n                        }\n                        if ($this->_isRest()) {\n                            $server = $this->Server->find('first', array(\n                                    'conditions' => array('Server.id' => $this->Server->id),\n                                    'recursive' => -1\n                            ));\n                            return $this->RestResponse->viewData($server, $this->response->type());\n                        } else {\n                            $this->Flash->success(__('The server has been saved'));\n                            $this->redirect(array('action' => 'index'));\n                        }\n                    } else {\n                        if ($this->_isRest()) {\n                            return $this->RestResponse->saveFailResponse('Servers', 'add', false, $this->Server->validationErrors, $this->response->type());\n                        } else {\n                            $this->Flash->error(__('The server could not be saved. Please, try again.'));\n                        }\n                    }\n                }\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->describe('Servers', 'add', false, $this->response->type());\n        } else {\n            $organisationOptions = array(0 => 'Local organisation', 1 => 'External organisation', 2 => 'New external organisation');\n            $temp = $this->Server->Organisation->find('all', array(\n                    'conditions' => array('local' => true),\n                    'fields' => array('id', 'name'),\n                    'order' => array('lower(Organisation.name) ASC')\n            ));\n            $localOrganisations = array();\n            $allOrgs = array();\n            foreach ($temp as $o) {\n                $localOrganisations[$o['Organisation']['id']] = $o['Organisation']['name'];\n                $allOrgs[] = array('id' => $o['Organisation']['id'], 'name' => $o['Organisation']['name']);\n            }\n            $temp = $this->Server->Organisation->find('all', array(\n                    'conditions' => array('local' => false),\n                    'fields' => array('id', 'name'),\n                    'order' => array('lower(Organisation.name) ASC')\n            ));\n            $externalOrganisations = array();\n            foreach ($temp as $o) {\n                $externalOrganisations[$o['Organisation']['id']] = $o['Organisation']['name'];\n                $allOrgs[] = array('id' => $o['Organisation']['id'], 'name' => $o['Organisation']['name']);\n            }\n            $this->set('host_org_id', Configure::read('MISP.host_org_id'));\n            $this->set('organisationOptions', $organisationOptions);\n            $this->set('localOrganisations', $localOrganisations);\n            $this->set('externalOrganisations', $externalOrganisations);\n            $this->set('allOrganisations', $allOrgs);\n\n            // list all tags for the rule picker\n            $this->loadModel('Tag');\n            $temp = $this->Tag->find('all', array('recursive' => -1));\n            $allTags = array();\n            foreach ($temp as $t) {\n                $allTags[] = array('id' => $t['Tag']['id'], 'name' => $t['Tag']['name']);\n            }\n            $this->set('allTags', $allTags);\n            $this->set('host_org_id', Configure::read('MISP.host_org_id'));\n        }\n    }\n\n    public function edit($id = null)\n    {\n        $this->Server->id = $id;\n        if (!$this->Server->exists()) {\n            throw new NotFoundException(__('Invalid server'));\n        }\n        $s = $this->Server->read(null, $id);\n        if (!$this->_isSiteAdmin()) {\n            $this->redirect(array('controller' => 'servers', 'action' => 'index'));\n        }\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (empty(Configure::read('MISP.host_org_id'))) {\n                $this->request->data['Server']['internal'] = 0;\n            }\n            if ($this->_isRest()) {\n                if (!isset($this->request->data['Server'])) {\n                    $this->request->data = array('Server' => $this->request->data);\n                }\n            }\n            if (isset($this->request->data['Server']['json'])) {\n                $json = json_decode($this->request->data['Server']['json'], true);\n            } else {\n                $json = null;\n            }\n            $fail = false;\n\n            // test the filter fields\n            if (!empty($this->request->data['Server']['pull_rules']) && !$this->Server->isJson($this->request->data['Server']['pull_rules'])) {\n                $fail = true;\n                $error_msg = __('The pull filter rules must be in valid JSON format.');\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'edit', false, array('pull_rules' => $error_msg), $this->response->type());\n                } else {\n                    $this->Flash->error($error_msg);\n                }\n            }\n\n            if (!$fail && !empty($this->request->data['Server']['push_rules']) && !$this->Server->isJson($this->request->data['Server']['push_rules'])) {\n                $fail = true;\n                $error_msg = __('The push filter rules must be in valid JSON format.');\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'edit', false, array('push_rules' => $error_msg), $this->response->type());\n                } else {\n                    $this->Flash->error($error_msg);\n                }\n            }\n            if (!$fail) {\n                // say what fields are to be updated\n                $fieldList = array('id', 'url', 'push', 'pull', 'caching_enabled', 'unpublish_event', 'publish_without_email', 'remote_org_id', 'name' ,'self_signed', 'cert_file', 'client_cert_file', 'push_rules', 'pull_rules', 'internal', 'skip_proxy');\n                $this->request->data['Server']['id'] = $id;\n                if (isset($this->request->data['Server']['authkey']) && \"\" != $this->request->data['Server']['authkey']) {\n                    $fieldList[] = 'authkey';\n                }\n                if (isset($this->request->data['Server']['organisation_type']) && isset($json)) {\n                    // adds 'remote_org_id' in the fields to update\n                    $fieldList[] = 'remote_org_id';\n                    if ($this->request->data['Server']['organisation_type'] < 2) {\n                        $this->request->data['Server']['remote_org_id'] = $json['id'];\n                    } else {\n                        $existingOrgs = $this->Server->Organisation->find('first', array(\n                                'conditions' => array('uuid' => $json['uuid']),\n                                'recursive' => -1,\n                                'fields' => array('id', 'uuid')\n                        ));\n                        if (!empty($existingOrgs)) {\n                            $fail = true;\n                            if ($this->_isRest()) {\n                                return $this->RestResponse->saveFailResponse('Servers', 'edit', false, array('Organisation' => 'Remote Organisation\\'s uuid already used'), $this->response->type());\n                            } else {\n                                $this->Flash->error(__('That organisation could not be created as the uuid is in use already.'));\n                            }\n                        }\n\n                        if (!$fail) {\n                            $this->Server->Organisation->create();\n                            $orgSave = $this->Server->Organisation->save(array(\n                                    'name' => $json['name'],\n                                    'uuid' => $json['uuid'],\n                                    'local' => 0,\n                                    'created_by' => $this->Auth->user('id')\n                            ));\n\n                            if (!$orgSave) {\n                                if ($this->_isRest()) {\n                                    return $this->RestResponse->saveFailResponse('Servers', 'edit', false, $this->Server->Organisation->validationError, $this->response->type());\n                                } else {\n                                    $this->Flash->error(__('Couldn\\'t save the new organisation, are you sure that the uuid is in the correct format?.'));\n                                }\n                                $fail = true;\n                                $this->request->data['Server']['external_name'] = $json['name'];\n                                $this->request->data['Server']['external_uuid'] = $json['uuid'];\n                            } else {\n                                $this->request->data['Server']['remote_org_id'] = $this->Server->Organisation->id;\n                            }\n                        }\n                    }\n                    if (empty(Configure::read('MISP.host_org_id')) || $this->request->data['Server']['remote_org_id'] != Configure::read('MISP.host_org_id')) {\n                        $this->request->data['Server']['internal'] = 0;\n                    }\n                }\n            }\n            if (!$fail) {\n                // Save the data\n                if ($this->Server->save($this->request->data, true, $fieldList)) {\n                    if (isset($this->request->data['Server']['submitted_cert']) && (!isset($this->request->data['Server']['delete_cert']) || !$this->request->data['Server']['delete_cert'])) {\n                        $this->__saveCert($this->request->data, $this->Server->id, false);\n                    } else {\n                        if (isset($this->request->data['Server']['delete_cert']) && $this->request->data['Server']['delete_cert']) {\n                            $this->__saveCert($this->request->data, $this->Server->id, false, true);\n                        }\n                    }\n                    if (isset($this->request->data['Server']['submitted_client_cert']) && (!isset($this->request->data['Server']['delete_client_cert']) || !$this->request->data['Server']['delete_client_cert'])) {\n                        $this->__saveCert($this->request->data, $this->Server->id, true);\n                    } else {\n                        if (isset($this->request->data['Server']['delete_client_cert']) && $this->request->data['Server']['delete_client_cert']) {\n                            $this->__saveCert($this->request->data, $this->Server->id, true, true);\n                        }\n                    }\n                    if ($this->_isRest()) {\n                        $server = $this->Server->find('first', array(\n                                'conditions' => array('Server.id' => $this->Server->id),\n                                'recursive' => -1\n                        ));\n                        return $this->RestResponse->viewData($server, $this->response->type());\n                    } else {\n                        $this->Flash->success(__('The server has been saved'));\n                        $this->redirect(array('action' => 'index'));\n                    }\n                } else {\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Servers', 'edit', false, $this->Server->validationError, $this->response->type());\n                    } else {\n                        $this->Flash->error(__('The server could not be saved. Please, try again.'));\n                    }\n                }\n            }\n        } else {\n            $this->Server->read(null, $id);\n            $this->Server->set('authkey', '');\n            $this->request->data = $this->Server->data;\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->describe('Servers', 'edit', false, $this->response->type());\n        } else {\n            $organisationOptions = array(0 => 'Local organisation', 1 => 'External organisation', 2 => 'New external organisation');\n            $temp = $this->Server->Organisation->find('all', array(\n                    'conditions' => array('local' => true),\n                    'fields' => array('id', 'name'),\n                    'order' => array('lower(Organisation.name) ASC')\n            ));\n            $localOrganisations = array();\n            $allOrgs = array();\n            foreach ($temp as $o) {\n                $localOrganisations[$o['Organisation']['id']] = $o['Organisation']['name'];\n                $allOrgs[] = array('id' => $o['Organisation']['id'], 'name' => $o['Organisation']['name']);\n            }\n            $temp = $this->Server->Organisation->find('all', array(\n                    'conditions' => array('local' => false),\n                    'fields' => array('id', 'name'),\n                    'order' => array('lower(Organisation.name) ASC')\n            ));\n            $externalOrganisations = array();\n            foreach ($temp as $o) {\n                $externalOrganisations[$o['Organisation']['id']] = $o['Organisation']['name'];\n                $allOrgs[] = array('id' => $o['Organisation']['id'], 'name' => $o['Organisation']['name']);\n            }\n\n            $oldRemoteSetting = 0;\n            if (!$this->Server->data['RemoteOrg']['local']) {\n                $oldRemoteSetting = 1;\n            }\n            $this->set('host_org_id', Configure::read('MISP.host_org_id'));\n            $this->set('oldRemoteSetting', $oldRemoteSetting);\n            $this->set('oldRemoteOrg', $this->Server->data['RemoteOrg']['id']);\n\n            $this->set('organisationOptions', $organisationOptions);\n            $this->set('localOrganisations', $localOrganisations);\n            $this->set('externalOrganisations', $externalOrganisations);\n            $this->set('allOrganisations', $allOrgs);\n\n            // list all tags for the rule picker\n            $this->loadModel('Tag');\n            $temp = $this->Tag->find('all', array('recursive' => -1));\n            $allTags = array();\n            foreach ($temp as $t) {\n                $allTags[] = array('id' => $t['Tag']['id'], 'name' => $t['Tag']['name']);\n            }\n            $this->set('allTags', $allTags);\n            $this->set('server', $s);\n            $this->set('id', $id);\n            $this->set('host_org_id', Configure::read('MISP.host_org_id'));\n        }\n    }\n\n    public function delete($id = null)\n    {\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException(__('This endpoint expects POST requests.'));\n        }\n        $this->Server->id = $id;\n        if (!$this->Server->exists()) {\n            throw new NotFoundException(__('Invalid server'));\n        }\n        $s = $this->Server->read(null, $id);\n        if (!$this->_isSiteAdmin()) {\n            $message = __('You don\\'t have the privileges to do that.');\n            if ($this->_isRest()) {\n                throw new MethodNotAllowedException($message);\n            } else {\n                $this->Flash->error($message);\n                $this->redirect(array('controller' => 'servers', 'action' => 'index'));\n            }\n        }\n        if ($this->Server->delete()) {\n            $message = __('Server deleted');\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('Servers', 'delete', $message, $this->response->type());\n            } else {\n                $this->Flash->success($message);\n                $this->redirect(array('controller' => 'servers', 'action' => 'index'));\n            }\n\n        }\n        $message = __('Server was not deleted');\n        if ($this->_isRest()) {\n            return $this->RestResponse->saveFailResponse('Servers', 'delete', $id, $message, $this->response->type());\n        } else {\n            $this->Flash->error($message);\n            $this->redirect(array('action' => 'index'));\n        }\n    }\n\n    /**\n     * Pull one or more events with attributes from a remote instance.\n     * Set $technique to\n     *      full - download everything\n     *      incremental - only new events\n     *      <int>   - specific id of the event to pull\n     */\n    public function pull($id = null, $technique='full')\n    {\n        if (!empty($id)) {\n            $this->Server->id = $id;\n        } else if (!empty($this->request->data['id'])) {\n            $this->Server->id = $this->request->data['id'];\n        } else {\n            throw new NotFoundException(__('Invalid server'));\n        }\n        if (!$this->Server->exists()) {\n            throw new NotFoundException(__('Invalid server'));\n        }\n        $s = $this->Server->read(null, $id);\n        $error = false;\n        if (!$this->_isSiteAdmin() && !($s['Server']['org_id'] == $this->Auth->user('org_id') && $this->_isAdmin())) {\n            throw new MethodNotAllowedException(__('You are not authorised to do that.'));\n        }\n        $this->Server->id = $id;\n        if (!$this->Server->exists()) {\n            throw new NotFoundException(__('Invalid server'));\n        }\n        if (false == $this->Server->data['Server']['pull'] && ($technique == 'full' || $technique == 'incremental')) {\n            $error = __('Pull setting not enabled for this server.');\n        }\n        if (empty($error)) {\n            if (!Configure::read('MISP.background_jobs')) {\n                $result = $this->Server->pull($this->Auth->user(), $id, $technique, $s);\n                if (is_array($result)) {\n                    $success = sprintf(__('Pull completed. %s events pulled, %s events could not be pulled, %s proposals pulled.', count($result[0]), count($result[1]), $result[2]));\n                } else {\n                    $error = $result;\n                }\n                $this->set('successes', $result[0]);\n                $this->set('fails', $result[1]);\n                $this->set('pulledProposals', $result[2]);\n            } else {\n                $this->loadModel('Job');\n                $this->Job->create();\n                $data = array(\n                        'worker' => 'default',\n                        'job_type' => 'pull',\n                        'job_input' => 'Server: ' . $id,\n                        'status' => 0,\n                        'retries' => 0,\n                        'org' => $this->Auth->user('Organisation')['name'],\n                        'message' => __('Pulling.'),\n                );\n                $this->Job->save($data);\n                $jobId = $this->Job->id;\n                $process_id = CakeResque::enqueue(\n                        'default',\n                        'ServerShell',\n                        array('pull', $this->Auth->user('id'), $id, $technique, $jobId)\n                );\n                $this->Job->saveField('process_id', $process_id);\n                $success = sprintf(__('Pull queued for background execution. Job ID: %s'), $jobId);\n            }\n        }\n        if ($this->_isRest()) {\n            if (!empty($error)) {\n                return $this->RestResponse->saveFailResponse('Servers', 'pull', false, $error, $this->response->type());\n            } else {\n                return $this->RestResponse->saveSuccessResponse('Servers', 'pull', $success, $this->response->type());\n            }\n        } else {\n            if (!empty($error)) {\n                $this->Flash->error($error);\n                $this->redirect(array('action' => 'index'));\n            } else {\n                $this->Flash->success($success);\n                $this->redirect($this->referer());\n            }\n        }\n    }\n\n    public function push($id = null, $technique=false)\n    {\n        if (!empty($id)) {\n            $this->Server->id = $id;\n        } else if (!empty($this->request->data['id'])) {\n            $this->Server->id = $this->request->data['id'];\n        } else {\n            throw new NotFoundException(__('Invalid server'));\n        }\n        if (!empty($this->request->data['technique'])) {\n            $technique = $this->request->data['technique'];\n        }\n        if (!$this->Server->exists()) {\n            throw new NotFoundException(__('Invalid server'));\n        }\n        $s = $this->Server->read(null, $id);\n        if (!$this->_isSiteAdmin() && !($s['Server']['org_id'] == $this->Auth->user('org_id') && $this->_isAdmin())) {\n            throw new MethodNotAllowedException(__('You are not authorised to do that.'));\n        }\n        if (!Configure::read('MISP.background_jobs')) {\n            $server = $this->Server->read(null, $id);\n            App::uses('SyncTool', 'Tools');\n            $syncTool = new SyncTool();\n            $HttpSocket = $syncTool->setupHttpSocket($server);\n            $result = $this->Server->push($id, $technique, false, $HttpSocket, $this->Auth->user());\n            if ($result === false) {\n                $error = __('The remote server is too outdated to initiate a push towards it. Please notify the hosting organisation of the remote instance.');\n            } elseif (!is_array($result)) {\n                $error = $result;\n            }\n            if (!empty($error)) {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'push', false, $error, $this->response->type());\n                } else {\n                    $this->Flash->info($error);\n                    $this->redirect(array('action' => 'index'));\n                }\n            }\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('Servers', 'push', array(sprintf(__('Push complete. %s events pushed, %s events could not be pushed.', $result[0], $result[1]))), $this->response->type());\n            } else {\n                $this->set('successes', $result[0]);\n                $this->set('fails', $result[1]);\n            }\n        } else {\n            $this->loadModel('Job');\n            $this->Job->create();\n            $data = array(\n                    'worker' => 'default',\n                    'job_type' => 'push',\n                    'job_input' => 'Server: ' . $id,\n                    'status' => 0,\n                    'retries' => 0,\n                    'org' => $this->Auth->user('Organisation')['name'],\n                    'message' => __('Pushing.'),\n            );\n            $this->Job->save($data);\n            $jobId = $this->Job->id;\n            $process_id = CakeResque::enqueue(\n                    'default',\n                    'ServerShell',\n                    array('push', $this->Auth->user('id'), $id, $jobId)\n            );\n            $this->Job->saveField('process_id', $process_id);\n            $message = sprintf(__('Push queued for background execution. Job ID: %s'), $jobId);\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('Servers', 'push', $message, $this->response->type());\n            }\n            $this->Flash->success($message);\n            $this->redirect(array('action' => 'index'));\n        }\n    }\n\n    private function __saveCert($server, $id, $client = false, $delete = false)\n    {\n        if ($client) {\n            $subm = 'submitted_client_cert';\n            $attr = 'client_cert_file';\n            $ins  = '_client';\n        } else {\n            $subm = 'submitted_cert';\n            $attr = 'cert_file';\n            $ins  = '';\n        }\n        if (!$delete) {\n            $ext = '';\n            App::uses('File', 'Utility');\n            App::uses('Folder', 'Utility');\n            App::uses('FileAccessTool', 'Tools');\n            if (isset($server['Server'][$subm]['name'])) {\n                if ($this->request->data['Server'][$subm]['size'] != 0) {\n                    if (!$this->Server->checkFilename($server['Server'][$subm]['name'])) {\n                        throw new Exception(__('Filename not allowed'));\n                    }\n                    $file = new File($server['Server'][$subm]['name']);\n                    $ext = $file->ext();\n                    if (!$server['Server'][$subm]['size'] > 0) {\n                        $this->Flash->error(__('Incorrect extension or empty file.'));\n                        $this->redirect(array('action' => 'index'));\n                    }\n\n                    // read pem file data\n                    $pemData = (new FileAccessTool())->readFromFile($server['Server'][$subm]['tmp_name'], $server['Server'][$subm]['size']);\n                } else {\n                    return true;\n                }\n            } else {\n                $pemData = base64_decode($server['Server'][$subm]);\n            }\n            $destpath = APP . \"files\" . DS . \"certs\" . DS;\n            $dir = new Folder(APP . \"files\" . DS . \"certs\", true);\n            $pemfile = new File($destpath . $id . $ins . '.' . $ext);\n            $result = $pemfile->write($pemData);\n            $s = $this->Server->read(null, $id);\n            $s['Server'][$attr] = $s['Server']['id'] . $ins . '.' . $ext;\n            if ($result) {\n                $this->Server->save($s);\n            }\n        } else {\n            $s = $this->Server->read(null, $id);\n            $s['Server'][$attr] = '';\n            $this->Server->save($s);\n        }\n        return true;\n    }\n\n    public function serverSettingsReloadSetting($setting, $id)\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $pathToSetting = explode('.', $setting);\n        if (strpos($setting, 'Plugin.Enrichment') !== false || strpos($setting, 'Plugin.Import') !== false || strpos($setting, 'Plugin.Export') !== false || strpos($setting, 'Plugin.Cortex') !== false) {\n            $settingObject = $this->Server->getCurrentServerSettings();\n        } else {\n            $settingObject = $this->Server->serverSettings;\n        }\n        foreach ($pathToSetting as $key) {\n            if (!isset($settingObject[$key])) {\n                throw new MethodNotAllowedException();\n            }\n            $settingObject = $settingObject[$key];\n        }\n        $result = $this->Server->serverSettingReadSingle($settingObject, $setting, $key);\n        $this->set('setting', $result);\n        $priorityErrorColours = array(0 => 'red', 1 => 'yellow', 2 => 'green');\n        $this->set('priorityErrorColours', $priorityErrorColours);\n        $priorities = array(0 => 'Critical', 1 => 'Recommended', 2 => 'Optional', 3 => 'Deprecated');\n        $this->set('priorities', $priorities);\n        $this->set('k', $id);\n        $this->layout = false;\n\n        $subGroup = 'general';\n        if ($pathToSetting[0] === 'Plugin') {\n            $subGroup = explode('_', $pathToSetting[1])[0];\n        }\n        $this->set('subGroup', $subGroup);\n\n        $this->render('/Elements/healthElements/settings_row');\n    }\n\n    private function __loadAvailableLanguages()\n    {\n        return $this->Server->loadAvailableLanguages();\n    }\n\n    private function __loadTagCollections()\n    {\n        return $this->Server->loadTagCollections($this->Auth->user());\n    }\n\n    private function __loadLocalOrgs()\n    {\n        $this->loadModel('Organisation');\n        $local_orgs = $this->Organisation->find('list', array(\n                'conditions' => array('local' => 1),\n                'recursive' => -1,\n                'fields' => array('Organisation.id', 'Organisation.name')\n        ));\n        return array_replace(array(0 => __('No organisation selected.')), $local_orgs);\n    }\n\n    public function serverSettings($tab=false)\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        if ($this->request->is('Get')) {\n            $tabs = array(\n                    'MISP' => array('count' => 0, 'errors' => 0, 'severity' => 5),\n                    'Encryption' => array('count' => 0, 'errors' => 0, 'severity' => 5),\n                    'Proxy' => array('count' => 0, 'errors' => 0, 'severity' => 5),\n                    'Security' => array('count' => 0, 'errors' => 0, 'severity' => 5),\n                    'Plugin' => array('count' => 0, 'errors' => 0, 'severity' => 5)\n            );\n            $writeableErrors = array(0 => __('OK'), 1 => __('not found'), 2 => __('is not writeable'));\n            $readableErrors = array(0 => __('OK'), 1 => __('not readable'));\n            $gpgErrors = array(0 => __('OK'), 1 => __('FAIL: settings not set'), 2 => __('FAIL: Failed to load GnuPG'), 3 => __('FAIL: Issues with the key/passphrase'), 4 => __('FAIL: encrypt failed'));\n            $proxyErrors = array(0 => __('OK'), 1 => __('not configured (so not tested)'), 2 => __('Getting URL via proxy failed'));\n            $zmqErrors = array(0 => __('OK'), 1 => __('not enabled (so not tested)'), 2 => __('Python ZeroMQ library not installed correctly.'), 3 => __('ZeroMQ script not running.'));\n            $stixOperational = array(0 => __('Some of the libraries related to STIX are not installed. Make sure that all libraries listed below are correctly installed.'), 1 => __('OK'));\n            $stixVersion = array(0 => __('Incorrect STIX version installed, found $current, expecting $expected'), 1 => __('OK'));\n            $stix2Version = array(0 => __('Incorrect STIX2 version installed, found $current, expecting $expected'), 1 => __('OK'));\n            $cyboxVersion = array(0 => __('Incorrect CyBox version installed, found $current, expecting $expected'), 1 => __('OK'));\n            $mixboxVersion = array(0 => __('Incorrect mixbox version installed, found $current, expecting $expected'), 1 => __('OK'));\n            $maecVersion = array(0 => __('Incorrect maec version installed, found $current, expecting $expected'), 1 => __('OK'));\n            $pymispVersion = array(0 => __('Incorrect PyMISP version installed, found $current, expecting $expected'), 1 => __('OK'));\n            $plyaraVersion = array(0 => __('Incorrect plyara version installed, found $current, expecting $expected'), 1 => __('OK'));\n            $sessionErrors = array(0 => __('OK'), 1 => __('High'), 2 => __('Alternative setting used'), 3 => __('Test failed'));\n            $moduleErrors = array(0 => __('OK'), 1 => __('System not enabled'), 2 => __('No modules found'));\n\n            $finalSettings = $this->Server->serverSettingsRead();\n            $issues = array(\n                'errors' => array(\n                        0 => array(\n                                'value' => 0,\n                                'description' => __('MISP will not operate correctly or will be unsecure until these issues are resolved.')\n                        ),\n                        1 => array(\n                                'value' => 0,\n                                'description' => __('Some of the features of MISP cannot be utilised until these issues are resolved.')\n                        ),\n                        2 => array(\n                                'value' => 0,\n                                'description' => __('There are some optional tweaks that could be done to improve the looks of your MISP instance.')\n                        ),\n                ),\n                'deprecated' => array(),\n                'overallHealth' => 3,\n            );\n            $dumpResults = array();\n            $tempArray = array();\n            foreach ($finalSettings as $k => $result) {\n                if ($result['level'] == 3) {\n                    $issues['deprecated']++;\n                }\n                $tabs[$result['tab']]['count']++;\n                if (isset($result['error']) && $result['level'] < 3) {\n                    $issues['errors'][$result['level']]['value']++;\n                    if ($result['level'] < $issues['overallHealth']) {\n                        $issues['overallHealth'] = $result['level'];\n                    }\n                    $tabs[$result['tab']]['errors']++;\n                    if ($result['level'] < $tabs[$result['tab']]['severity']) {\n                        $tabs[$result['tab']]['severity'] = $result['level'];\n                    }\n                }\n                if (isset($result['optionsSource']) && !empty($result['optionsSource'])) {\n                    $result['options'] = $this->{'__load' . $result['optionsSource']}();\n                }\n                $dumpResults[] = $result;\n                if ($result['tab'] == $tab) {\n                    if (isset($result['subGroup'])) {\n                        $tempArray[$result['subGroup']][] = $result;\n                    } else {\n                        $tempArray['general'][] = $result;\n                    }\n                }\n            }\n            $finalSettings = $tempArray;\n            // Diagnostics portion\n            $diagnostic_errors = 0;\n            App::uses('File', 'Utility');\n            App::uses('Folder', 'Utility');\n            $additionalViewVars = array();\n            if ($tab == 'files') {\n                $files = $this->__manageFiles();\n                $this->set('files', $files);\n            }\n            // Only run this check on the diagnostics tab\n            if ($tab == 'diagnostics' || $tab == 'download' || $this->_isRest()) {\n                $php_ini = php_ini_loaded_file();\n                $this->set('php_ini', $php_ini);\n                $advanced_attachments = shell_exec($this->Server->getPythonVersion() . ' ' . APP . 'files/scripts/generate_file_objects.py -c');\n\n                try {\n                    $advanced_attachments = json_decode($advanced_attachments, true);\n                } catch (Exception $e) {\n                    $advanced_attachments = false;\n                }\n                $this->set('advanced_attachments', $advanced_attachments);\n                // check if the current version of MISP is outdated or not\n                $version = $this->__checkVersion();\n                $this->set('version', $version);\n                $gitStatus = $this->Server->getCurrentGitStatus();\n                $this->set('branch', $gitStatus['branch']);\n                $this->set('commit', $gitStatus['commit']);\n                $this->set('latestCommit', $gitStatus['latestCommit']);\n                $phpSettings = array(\n                        'max_execution_time' => array(\n                            'explanation' => 'The maximum duration that a script can run (does not affect the background workers). A too low number will break long running scripts like comprehensive API exports',\n                            'recommended' => 300,\n                            'unit' => false\n                        ),\n                        'memory_limit' => array(\n                            'explanation' => 'The maximum memory that PHP can consume. It is recommended to raise this number since certain exports can generate a fair bit of memory usage',\n                            'recommended' => 2048,\n                            'unit' => 'M'\n                        ),\n                        'upload_max_filesize' => array(\n                            'explanation' => 'The maximum size that an uploaded file can be. It is recommended to raise this number to allow for the upload of larger samples',\n                            'recommended' => 50,\n                            'unit' => 'M'\n                        ),\n                        'post_max_size' => array(\n                            'explanation' => 'The maximum size of a POSTed message, this has to be at least the same size as the upload_max_filesize setting',\n                            'recommended' => 50,\n                            'unit' => 'M'\n                        )\n\n                );\n\n                foreach ($phpSettings as $setting => $settingArray) {\n                    $phpSettings[$setting]['value'] = ini_get($setting);\n                    if ($settingArray['unit']) {\n                        $phpSettings[$setting]['value'] = intval(rtrim($phpSettings[$setting]['value'], $phpSettings[$setting]['unit']));\n                    } else {\n                        $phpSettings[$setting]['value'] = intval($phpSettings[$setting]['value']);\n                    }\n                }\n                $this->set('phpSettings', $phpSettings);\n\n                if ($version && (!$version['upToDate'] || $version['upToDate'] == 'older')) {\n                    $diagnostic_errors++;\n                }\n\n                // check if the STIX and Cybox libraries are working and the correct version using the test script stixtest.py\n                $stix = $this->Server->stixDiagnostics($diagnostic_errors, $stixVersion, $cyboxVersion, $mixboxVersion, $maecVersion, $stix2Version, $pymispVersion);\n\n                $yaraStatus = $this->Server->yaraDiagnostics($diagnostic_errors);\n\n                // if GnuPG is set up in the settings, try to encrypt a test message\n                $gpgStatus = $this->Server->gpgDiagnostics($diagnostic_errors);\n\n                // if the message queue pub/sub is enabled, check whether the extension works\n                $zmqStatus = $this->Server->zmqDiagnostics($diagnostic_errors);\n\n                // if Proxy is set up in the settings, try to connect to a test URL\n                $proxyStatus = $this->Server->proxyDiagnostics($diagnostic_errors);\n\n                // get the DB diagnostics\n                $dbDiagnostics = $this->Server->dbSpaceUsage();\n\n                $moduleTypes = array('Enrichment', 'Import', 'Export', 'Cortex');\n                foreach ($moduleTypes as $type) {\n                    $moduleStatus[$type] = $this->Server->moduleDiagnostics($diagnostic_errors, $type);\n                }\n\n                // check the size of the session table\n                $sessionCount = 0;\n                $sessionStatus = $this->Server->sessionDiagnostics($diagnostic_errors, $sessionCount);\n                $this->set('sessionCount', $sessionCount);\n\n                $additionalViewVars = array('gpgStatus', 'sessionErrors', 'proxyStatus', 'sessionStatus', 'zmqStatus', 'stixVersion', 'cyboxVersion', 'mixboxVersion', 'maecVersion', 'stix2Version', 'pymispVersion', 'moduleStatus', 'yaraStatus', 'gpgErrors', 'proxyErrors', 'zmqErrors', 'stixOperational', 'stix', 'moduleErrors', 'moduleTypes', 'dbDiagnostics');\n            }\n            // check whether the files are writeable\n            $writeableDirs = $this->Server->writeableDirsDiagnostics($diagnostic_errors);\n            $writeableFiles = $this->Server->writeableFilesDiagnostics($diagnostic_errors);\n            $readableFiles = $this->Server->readableFilesDiagnostics($diagnostic_errors);\n            $extensions = $this->Server->extensionDiagnostics();\n\n            // check if the encoding is not set to utf8\n            $dbEncodingStatus = $this->Server->databaseEncodingDiagnostics($diagnostic_errors);\n\n            $viewVars = array(\n                    'diagnostic_errors', 'tabs', 'tab', 'issues', 'finalSettings', 'writeableErrors', 'readableErrors', 'writeableDirs', 'writeableFiles', 'readableFiles', 'extensions', 'dbEncodingStatus'\n            );\n            $viewVars = array_merge($viewVars, $additionalViewVars);\n            foreach ($viewVars as $viewVar) {\n                $this->set($viewVar, ${$viewVar});\n            }\n\n            $workerIssueCount = 4;\n            $worker_array = array();\n            if (Configure::read('MISP.background_jobs')) {\n                $workerIssueCount = 0;\n                $worker_array = $this->Server->workerDiagnostics($workerIssueCount);\n            }\n            $this->set('worker_array', $worker_array);\n            if ($tab == 'download' || $this->_isRest()) {\n                foreach ($dumpResults as $key => $dr) {\n                    unset($dumpResults[$key]['description']);\n                }\n                $dump = array(\n                        'version' => $version,\n                        'phpSettings' => $phpSettings,\n                        'gpgStatus' => $gpgErrors[$gpgStatus],\n                        'proxyStatus' => $proxyErrors[$proxyStatus],\n                        'zmqStatus' => $zmqStatus,\n                        'stix' => $stix,\n                        'moduleStatus' => $moduleStatus,\n                        'writeableDirs' => $writeableDirs,\n                        'writeableFiles' => $writeableFiles,\n                        'readableFiles' => $readableFiles,\n                        'finalSettings' => $dumpResults,\n                        'extensions' => $extensions,\n                        'workers' => $worker_array\n                );\n                foreach ($dump['finalSettings'] as $k => $v) {\n                    if (!empty($v['redacted'])) {\n                        $dump['finalSettings'][$k]['value'] = '*****';\n                    }\n                }\n                $this->response->body(json_encode($dump, JSON_PRETTY_PRINT));\n                $this->response->type('json');\n                $this->response->download('MISP.report.json');\n                return $this->response;\n            }\n\n            $priorities = array(0 => 'Critical', 1 => 'Recommended', 2 => 'Optional', 3 => 'Deprecated');\n            $this->set('priorities', $priorities);\n            $this->set('workerIssueCount', $workerIssueCount);\n            $priorityErrorColours = array(0 => 'red', 1 => 'yellow', 2 => 'green');\n            $this->set('priorityErrorColours', $priorityErrorColours);\n            $this->set('phpversion', phpversion());\n            $this->set('phpmin', $this->phpmin);\n            $this->set('phprec', $this->phprec);\n        }\n    }\n\n    public function startWorker($type)\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $validTypes = array('default', 'email', 'scheduler', 'cache', 'prio');\n        if (!in_array($type, $validTypes)) {\n            throw new MethodNotAllowedException('Invalid worker type.');\n        }\n        $prepend = '';\n        if ($type != 'scheduler') {\n            shell_exec($prepend . APP . 'Console' . DS . 'cake CakeResque.CakeResque start --interval 5 --queue ' . $type .' > /dev/null 2>&1 &');\n        } else {\n            shell_exec($prepend . APP . 'Console' . DS . 'cake CakeResque.CakeResque startscheduler -i 5 > /dev/null 2>&1 &');\n        }\n        $message = __('Worker start signal sent');\n        if ($this->_isRest()) {\n            return $this->RestResponse->saveSuccessResponse('Servers', 'startWorker', $type, $this->response->type(), $message);\n        } else {\n            $this->Flash->info($message);\n            $this->redirect('/servers/serverSettings/workers');\n        }\n    }\n\n    public function stopWorker($pid)\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $this->Server->killWorker($pid, $this->Auth->user());\n        $message = __('Worker stop signal sent');\n        if ($this->_isRest()) {\n            return $this->RestResponse->saveSuccessResponse('Servers', 'stopWorker', $pid, $this->response->type(), $message);\n        } else {\n            $this->Flash->info($message);\n            $this->redirect('/servers/serverSettings/workers');\n        }\n    }\n\n    public function getWorkers()\n    {\n        $issues = 0;\n        $worker_array = $this->Server->workerDiagnostics($issues);\n        return $this->RestResponse->viewData($worker_array);\n    }\n\n    private function __checkVersion()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        App::uses('SyncTool', 'Tools');\n        $syncTool = new SyncTool();\n        try {\n            $HttpSocket = $syncTool->setupHttpSocket();\n            $response = $HttpSocket->get('https://api.github.com/repos/MISP/MISP/tags');\n            $tags = $response->body;\n        } catch (Exception $e) {\n            return false;\n        }\n        if ($response->isOK() && !empty($tags)) {\n            $json_decoded_tags = json_decode($tags);\n\n            // find the latest version tag in the v[major].[minor].[hotfix] format\n            for ($i = 0; $i < count($json_decoded_tags); $i++) {\n                if (preg_match('/^v[0-9]+\\.[0-9]+\\.[0-9]+$/', $json_decoded_tags[$i]->name)) {\n                    break;\n                }\n            }\n            return $this->Server->checkVersion($json_decoded_tags[$i]->name);\n        } else {\n            return false;\n        }\n    }\n\n    public function getSubmodulesStatus() {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $this->set('submodules', $this->Server->getSubmodulesGitStatus());\n        $this->render('ajax/submoduleStatus');\n    }\n\n    public function getSetting($setting_name)\n    {\n        $setting = $this->Server->getSettingData($setting_name);\n        if (!empty($setting[\"redacted\"])) {\n            throw new MethodNotAllowedException(__('This setting is redacted.'));\n        }\n        if (Configure::check($setting_name)) {\n            $setting['value'] = Configure::read($setting_name);\n        }\n        return $this->RestResponse->viewData($setting);\n    }\n\n    public function serverSettingsEdit($setting_name, $id = false, $forceSave = false)\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        if (!isset($setting_name)) {\n            throw new MethodNotAllowedException();\n        }\n        if (!$this->_isRest()) {\n            if (!isset($id)) {\n                throw new MethodNotAllowedException();\n            }\n            $this->set('id', $id);\n        }\n\n        $setting = $this->Server->getSettingData($setting_name);\n        if (!empty($setting['cli_only'])) {\n            throw new MethodNotAllowedException(__('This setting can only be edited via the CLI.'));\n        }\n        if ($this->request->is('get')) {\n            if ($setting != null) {\n                $value = Configure::read($setting['name']);\n                if ($value) {\n                    $setting['value'] = $value;\n                }\n                $setting['setting'] = $setting['name'];\n            }\n            if (isset($setting['optionsSource']) && !empty($setting['optionsSource'])) {\n                $setting['options'] = $this->{'__load' . $setting['optionsSource']}();\n            }\n            $subGroup = 'general';\n            $subGroup = explode('.', $setting['name']);\n            if ($subGroup[0] === 'Plugin') {\n                $subGroup = explode('_', $subGroup[1])[0];\n            } else {\n                $subGroup = 'general';\n            }\n            if ($this->_isRest()) {\n                return $this->RestResponse->viewData(array($setting['name'] => $setting['value']));\n            } else {\n                $this->set('subGroup', $subGroup);\n                $this->set('setting', $setting);\n                $this->render('ajax/server_settings_edit');\n            }\n        }\n        if ($this->request->is('post')) {\n            if (!isset($this->request->data['Server'])) {\n                $this->request->data = array('Server' => $this->request->data);\n            }\n            if (!isset($this->request->data['Server']['value'])) {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'serverSettingsEdit', false, 'Invalid input. Expected: {\"value\": \"new_setting\"}', $this->response->type());\n                }\n            }\n            if (!empty($this->request->data['Server']['force'])) {\n                $forceSave = $this->request->data['Server']['force'];\n            }\n            if (trim($this->request->data['Server']['value']) === '*****') {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'serverSettingsEdit', false, 'No change.', $this->response->type());\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'No change.')), 'status'=>200, 'type' => 'json'));\n                }\n            }\n            $this->autoRender = false;\n            $this->loadModel('Log');\n            if (!is_writeable(APP . 'Config/config.php')) {\n                $this->Log->create();\n                $result = $this->Log->save(array(\n                        'org' => $this->Auth->user('Organisation')['name'],\n                        'model' => 'Server',\n                        'model_id' => 0,\n                        'email' => $this->Auth->user('email'),\n                        'action' => 'serverSettingsEdit',\n                        'user_id' => $this->Auth->user('id'),\n                        'title' => 'Server setting issue',\n                        'change' => 'There was an issue witch changing ' . $setting['name'] . ' to ' . $this->request->data['Server']['value']  . '. The error message returned is: app/Config.config.php is not writeable to the apache user. No changes were made.',\n                ));\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'serverSettingsEdit', false, 'app/Config.config.php is not writeable to the apache user.', $this->response->type());\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'app/Config.config.php is not writeable to the apache user.')), 'status'=>200, 'type' => 'json'));\n                }\n            }\n            $result = $this->Server->serverSettingsEditValue($this->Auth->user(), $setting, $this->request->data['Server']['value'], $forceSave);\n            if ($result === true) {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveSuccessResponse('Servers', 'serverSettingsEdit', false, $this->response->type(), 'Field updated');\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Field updated.')), 'status'=>200, 'type' => 'json'));\n                }\n            } else {\n                if ($this->_isRest) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'serverSettingsEdit', false, $result, $this->response->type());\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $result)), 'status'=>200, 'type' => 'json'));\n                }\n            }\n        }\n    }\n\n    public function restartWorkers()\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $this->Server->restartWorkers($this->Auth->user());\n        if ($this->_isRest()) {\n            return $this->RestResponse->saveSuccessResponse('Server', 'restartWorkers', false, $this->response->type(), __('Restarting workers.'));\n        }\n        $this->redirect(array('controller' => 'servers', 'action' => 'serverSettings', 'workers'));\n    }\n\n    private function __manageFiles()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $files = $this->Server->grabFiles();\n        return $files;\n    }\n\n    public function deleteFile($type, $filename)\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        if ($this->request->is('post')) {\n            $validItems = $this->Server->getFileRules();\n            App::uses('File', 'Utility');\n            $existingFile = new File($validItems[$type]['path'] . DS . $filename);\n            if (!$existingFile->exists()) {\n                $this->Flash->error(__('File not found.', true), 'default', array(), 'error');\n                $this->redirect(array('controller' => 'servers', 'action' => 'serverSettings', 'files'));\n            }\n            if ($existingFile->delete()) {\n                $this->Flash->success('File deleted.');\n            } else {\n                $this->Flash->error(__('File could not be deleted.', true), 'default', array(), 'error');\n            }\n            $this->redirect(array('controller' => 'servers', 'action' => 'serverSettings', 'files'));\n        } else {\n            throw new MethodNotAllowedException('This action expects a POST request.');\n        }\n    }\n\n    public function uploadFile($type)\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $validItems = $this->Server->getFileRules();\n\n        // Check if there were problems with the file upload\n        // only keep the last part of the filename, this should prevent directory attacks\n        $filename = basename($this->request->data['Server']['file']['name']);\n        if (!preg_match(\"/\" . $validItems[$type]['regex'] . \"/\", $filename)) {\n            $this->Flash->error($validItems[$type]['regex_error'], 'default', array(), 'error');\n            $this->redirect(array('controller' => 'servers', 'action' => 'serverSettings', 'files'));\n        }\n        if (empty($this->request->data['Server']['file']['tmp_name']) || !is_uploaded_file($this->request->data['Server']['file']['tmp_name'])) {\n            $this->Flash->error(__('Upload failed.', true), 'default', array(), 'error');\n            $this->redirect(array('controller' => 'servers', 'action' => 'serverSettings', 'files'));\n        }\n\n        // check if the file already exists\n        App::uses('File', 'Utility');\n        $existingFile = new File($validItems[$type]['path'] . DS . $filename);\n        if ($existingFile->exists()) {\n            $this->Flash->info(__('File already exists. If you would like to replace it, remove the old one first.', true), 'default', array(), 'error');\n            $this->redirect(array('controller' => 'servers', 'action' => 'serverSettings', 'files'));\n        }\n\n        $result = move_uploaded_file($this->request->data['Server']['file']['tmp_name'], $validItems[$type]['path'] . DS . $filename);\n        if ($result) {\n            $this->Flash->success('File uploaded.');\n        } else {\n            $this->Flash->error(__('Upload failed.', true), 'default', array(), 'error');\n        }\n        $this->redirect(array('controller' => 'servers', 'action' => 'serverSettings', 'files'));\n    }\n\n    public function fetchServersForSG($idList = '{}')\n    {\n        $id_exclusion_list = json_decode($idList, true);\n        $temp = $this->Server->find('all', array(\n                'conditions' => array(\n                        'id !=' => $id_exclusion_list,\n                ),\n                'recursive' => -1,\n                'fields' => array('id', 'name', 'url')\n        ));\n        $servers = array();\n        foreach ($temp as $server) {\n            $servers[] = array('id' => $server['Server']['id'], 'name' => $server['Server']['name'], 'url' => $server['Server']['url']);\n        }\n        $this->layout = false;\n        $this->autoRender = false;\n        $this->set('servers', $servers);\n        $this->render('ajax/fetch_servers_for_sg');\n    }\n\n    public function postTest()\n    {\n        if ($this->request->is('post')) {\n            // Fix for PHP-FPM / Nginx / etc\n            // Fix via https://www.popmartian.com/tipsntricks/2015/07/14/howto-use-php-getallheaders-under-fastcgi-php-fpm-nginx-etc/\n            if (!function_exists('getallheaders')) {\n                $headers = [];\n                foreach ($_SERVER as $name => $value) {\n                    if (substr($name, 0, 5) == 'HTTP_') {\n                        $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))))] = $value;\n                    }\n                }\n            } else {\n                $headers = getallheaders();\n            }\n            $result = array();\n            $result['body'] = $this->request->data;\n            $result['headers']['Content-type'] = isset($headers['Content-type']) ? $headers['Content-type'] : 0;\n            $result['headers']['Accept'] = isset($headers['Accept']) ? $headers['Accept'] : 0;\n            $result['headers']['Authorization'] = isset($headers['Authorization']) ? 'OK' : 0;\n            return new CakeResponse(array('body'=> json_encode($result), 'type' => 'json'));\n        } else {\n            throw new MethodNotAllowedException('Invalid request, expecting a POST request.');\n        }\n    }\n\n    public function testConnection($id = false)\n    {\n        if (!$this->Auth->user('Role')['perm_sync'] && !$this->Auth->user('Role')['perm_site_admin']) {\n            throw new MethodNotAllowedException('You don\\'t have permission to do that.');\n        }\n        $this->Server->id = $id;\n        if (!$this->Server->exists()) {\n            throw new NotFoundException(__('Invalid server'));\n        }\n        $result = $this->Server->runConnectionTest($id);\n        if ($result['status'] == 1) {\n            $version = json_decode($result['message'], true);\n            if (isset($version['version']) && preg_match('/^[0-9]+\\.+[0-9]+\\.[0-9]+$/', $version['version'])) {\n                $perm_sync = false;\n                if (isset($version['perm_sync'])) {\n                    $perm_sync = $version['perm_sync'];\n                }\n                App::uses('Folder', 'Utility');\n                $file = new File(ROOT . DS . 'VERSION.json', true);\n                $local_version = json_decode($file->read(), true);\n                $file->close();\n                $version = explode('.', $version['version']);\n                $mismatch = false;\n                $newer = false;\n                $parts = array('major', 'minor', 'hotfix');\n                if ($version[0] == 2 && $version[1] == 4 && $version[2] > 68) {\n                    $post = $this->Server->runPOSTTest($id);\n                }\n                $testPost = false;\n                foreach ($parts as $k => $v) {\n                    if (!$mismatch) {\n                        if ($version[$k] > $local_version[$v]) {\n                            $mismatch = $v;\n                            $newer = 'remote';\n                        } elseif ($version[$k] < $local_version[$v]) {\n                            $mismatch = $v;\n                            $newer = 'local';\n                        }\n                    }\n                }\n                if (!$mismatch && $version[2] < 111) {\n                    $mismatch = 'proposal';\n                }\n                if (!$perm_sync) {\n                    $result['status'] = 7;\n                    return new CakeResponse(array('body'=> json_encode($result), 'type' => 'json'));\n                }\n                return new CakeResponse(\n                        array(\n                        'body'=> json_encode(\n                            array(\n                                'status' => 1,\n                                'local_version' => implode('.', $local_version),\n                                'version' => implode('.', $version),\n                                'mismatch' => $mismatch,\n                                'newer' => $newer,\n                                'post' => isset($post) ? $post : 'too old'\n                                )\n                            ),\n                            'type' => 'json'\n                        )\n                    );\n            } else {\n                $result['status'] = 3;\n            }\n        }\n        return new CakeResponse(array('body'=> json_encode($result), 'type' => 'json'));\n    }\n\n    public function startZeroMQServer()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $pubSubTool = $this->Server->getPubSubTool();\n        $result = $pubSubTool->restartServer();\n        if ($result === true) {\n            return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'ZeroMQ server successfully started.')), 'status'=>200, 'type' => 'json'));\n        } else {\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $result)), 'status'=>200, 'type' => 'json'));\n        }\n    }\n\n    public function stopZeroMQServer()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $pubSubTool = $this->Server->getPubSubTool();\n        $result = $pubSubTool->killService();\n        if ($result === true) {\n            return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'ZeroMQ server successfully killed.')), 'status'=>200, 'type' => 'json'));\n        } else {\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Could not kill the previous instance of the ZeroMQ script.')), 'status'=>200, 'type' => 'json'));\n        }\n    }\n\n    public function statusZeroMQServer()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $pubSubTool = $this->Server->getPubSubTool();\n        $result = $pubSubTool->statusCheck();\n        if (!empty($result)) {\n            $this->set('events', $result['publishCount']);\n            $this->set('time', date('Y/m/d H:i:s', $result['timestamp']));\n            $this->set('time2', date('Y/m/d H:i:s', $result['timestampSettings']));\n        }\n        $this->render('ajax/zeromqstatus');\n    }\n\n    public function purgeSessions()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        if ($this->Server->updateDatabase('cleanSessionTable') == false) {\n            $this->Flash->error('Could not purge the session table.');\n        }\n        $this->redirect('/servers/serverSettings/diagnostics');\n    }\n\n    public function clearWorkerQueue($worker)\n    {\n        if (!$this->_isSiteAdmin() || !$this->request->is('Post') || $this->request->is('ajax')) {\n            throw new MethodNotAllowedException();\n        }\n        $worker_array = array('cache', 'default', 'email', 'prio');\n        if (!in_array($worker, $worker_array)) {\n            throw new MethodNotAllowedException('Invalid worker');\n        }\n        $redis = Resque::redis();\n        $redis->del('queue:' . $worker);\n        $this->Flash->success('Queue cleared.');\n        $this->redirect($this->referer());\n    }\n\n    public function getVersion()\n    {\n        if (!$this->userRole['perm_auth']) {\n            throw new MethodNotAllowedException('This action requires API access.');\n        }\n        $versionArray = $this->Server->checkMISPVersion();\n        $this->set('response', array('version' => $versionArray['major'] . '.' . $versionArray['minor'] . '.' . $versionArray['hotfix'], 'perm_sync' => $this->userRole['perm_sync']));\n        $this->set('_serialize', 'response');\n    }\n\n    public function getPyMISPVersion()\n    {\n        $this->set('response', array('version' => $this->pyMispVersion));\n        $this->set('_serialize', 'response');\n    }\n\n    public function getGit()\n    {\n        $status = $this->Server->getCurrentGitStatus();\n    }\n\n    public function checkout()\n    {\n        $result = $this->Server->checkoutMain();\n    }\n\n    public function update()\n    {\n        if ($this->request->is('post')) {\n            $status = $this->Server->getCurrentGitStatus();\n            $update = $this->Server->update($status);\n            return new CakeResponse(array('body'=> $update, 'type' => 'txt'));\n        } else {\n            $branch = $this->Server->getCurrentBranch();\n            $this->set('branch', $branch);\n            $this->render('ajax/update');\n        }\n    }\n\n    public function ondemandAction()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        $this->AdminSetting = ClassRegistry::init('AdminSetting');\n        $actions = $this->Server->actions_description;\n        $default_fields = array(\n            'title' => '',\n            'description' => '',\n            'liveOff' => false,\n            'recommendBackup' => false,\n            'exitOnError' => false,\n            'requirements' => '',\n            'url' => '/'\n        );\n        foreach($actions as $id => $action) {\n            foreach($default_fields as $field => $value) {\n                if (!isset($action[$field])) {\n                    $actions[$id][$field] = $value;\n                }\n            }\n            $done = $this->AdminSetting->getSetting($id);\n            $actions[$id]['done'] = ($done == '1');\n        }\n        $this->set('actions', $actions);\n        $this->set('updateLocked', $this->Server->isUpdateLocked());\n    }\n\n    public function updateProgress()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        $update_progress = $this->Server->getUpdateProgress();\n        $current_index = $update_progress['current'];\n        $current_command = !isset($update_progress['commands'][$current_index]) ? '' : $update_progress['commands'][$current_index];\n        $lookup_string = preg_replace('/\\s{2,}/', '', substr($current_command, 0, -1));\n        $sql_info = $this->Server->query(\"SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST;\");\n        if (empty($sql_info)) {\n            $update_progress['process_list'] = array();\n        } else {\n            // retreive current update process\n            foreach($sql_info as $row) {\n                if (preg_replace('/\\s{2,}/', '', $row['PROCESSLIST']['INFO']) == $lookup_string) {\n                    $sql_info = $row['PROCESSLIST'];\n                    break;\n                }\n            }\n            $update_progress['process_list'] = array();\n            $update_progress['process_list']['STATE'] = isset($sql_info['STATE']) ? $sql_info['STATE'] : '';\n            $update_progress['process_list']['PROGRESS'] = isset($sql_info['PROGRESS']) ? $sql_info['PROGRESS'] : 0;\n            $update_progress['process_list']['STAGE'] = isset($sql_info['STAGE']) ? $sql_info['STAGE'] : 0;\n            $update_progress['process_list']['MAX_STAGE'] = isset($sql_info['MAX_STAGE']) ? $sql_info['MAX_STAGE'] : 0;\n        }\n        if ($this->request->is('ajax')) {\n            return $this->RestResponse->viewData(h($update_progress), $this->response->type());\n        } else {\n            $this->set('updateProgress', $update_progress);\n        }\n    }\n\n\n    public function getSubmoduleQuickUpdateForm($submodule_path=false) {\n        $this->set('submodule', base64_decode($submodule_path));\n        $this->render('ajax/submodule_quick_update_form');\n    }\n\n    public function updateSubmodule()\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        if ($this->request->is('post')) {\n            $request = $this->request->data;\n            $submodule = $request['Server']['submodule'];\n            $res = $this->Server->updateSubmodule($this->Auth->user(), $submodule);\n            return new CakeResponse(array('body'=> json_encode($res), 'type' => 'json'));\n        } else {\n            throw new MethodNotAllowedException();\n        }\n    }\n\n    public function getInstanceUUID()\n    {\n        return $this->RestResponse->viewData(array('uuid' => Configure::read('MISP.uuid')), $this->response->type());\n    }\n\n    public function rest()\n    {\n        $allValidApis = $this->RestResponse->getAllApis($this->Auth->user());\n        $allValidApisFieldsContraint = $this->RestResponse->getAllApisFieldsConstraint($this->Auth->user());\n        if ($this->request->is('post')) {\n            $request = $this->request->data;\n            if (!empty($request['Server'])) {\n                $request = $this->request->data['Server'];\n            }\n            $curl = '';\n            $python = '';\n            $result = $this->__doRestQuery($request, $curl, $python);\n            $this->set('curl', $curl);\n            $this->set('python', $python);\n            if (!$result) {\n                $this->Flash->error('Something went wrong. Make sure you set the http method, body (when sending POST requests) and URL correctly.');\n            } else {\n                $this->set('data', $result);\n            }\n        }\n        $header =\n            'Authorization: ' . $this->Auth->user('authkey') . PHP_EOL .\n            'Accept: application/json' . PHP_EOL .\n            'Content-Type: application/json';\n        $this->set('header', $header);\n        $this->set('allValidApis', $allValidApis);\n        // formating for optgroup\n        $allValidApisFormated = array();\n        foreach ($allValidApis as $endpoint_url => $endpoint_data) {\n            $allValidApisFormated[$endpoint_data['controller']][] = array('url' => $endpoint_url, 'action' => $endpoint_data['action']);\n        }\n        $this->set('allValidApisFormated', $allValidApisFormated);\n        $this->set('allValidApisFieldsContraint', $allValidApisFieldsContraint);\n    }\n\n    private function __doRestQuery($request, &$curl = false, &$python = false)\n    {\n        App::uses('SyncTool', 'Tools');\n        $params = array();\n        $this->loadModel('RestClientHistory');\n        $this->RestClientHistory->create();\n        $date = new DateTime();\n        $rest_history_item = array(\n            'org_id' => $this->Auth->user('org_id'),\n            'user_id' => $this->Auth->user('id'),\n            'headers' => $request['header'],\n            'body' => empty($request['body']) ? '' : $request['body'],\n            'url' => $request['url'],\n            'http_method' => $request['method'],\n            'use_full_path' => $request['use_full_path'],\n            'show_result' => $request['show_result'],\n            'skip_ssl' => $request['skip_ssl_validation'],\n            'bookmark' => $request['bookmark'],\n            'bookmark_name' => $request['name'],\n            'timestamp' => $date->getTimestamp()\n        );\n        if (!empty($request['url'])) {\n            if (empty($request['use_full_path'])) {\n                $path = preg_replace('#^(://|[^/?])+#', '', $request['url']);\n                $url = Configure::read('MISP.baseurl') . $path;\n                unset($request['url']);\n            } else {\n                $url = $request['url'];\n            }\n        } else {\n            throw new InvalidArgumentException('Url not set.');\n        }\n        if (!empty($request['skip_ssl_validation'])) {\n            $params['ssl_verify_peer'] = false;\n            $params['ssl_verify_host'] = false;\n            $params['ssl_verify_peer_name'] = false;\n            $params['ssl_allow_self_signed'] = true;\n        }\n        $params['timeout'] = 300;\n        App::uses('HttpSocket', 'Network/Http');\n        $HttpSocket = new HttpSocket($params);\n        $view_data = array();\n        $temp_headers = explode(\"\\n\", $request['header']);\n        $request['header'] = array(\n            'Authorization' => $this->Auth->user('authkey'),\n            'Accept' => 'application/json',\n            'Content-Type' => 'application/json'\n        );\n        foreach ($temp_headers as $header) {\n            $header = explode(':', $header);\n            $header[0] = trim($header[0]);\n            $header[1] = trim($header[1]);\n            $request['header'][$header[0]] = $header[1];\n        }\n        $start = microtime(true);\n        if (\n            !empty($request['method']) &&\n            $request['method'] === 'GET'\n        ) {\n            if ($curl !== false) {\n                $curl = $this->__generateCurlQuery('get', $request, $url);\n            }\n            if ($python !== false) {\n                $python = $this->__generatePythonScript($request, $url);\n            }\n            $response = $HttpSocket->get($url, false, array('header' => $request['header']));\n        } elseif (\n            !empty($request['method']) &&\n            $request['method'] === 'POST' &&\n            !empty($request['body'])\n        ) {\n            if ($curl !== false) {\n                $curl = $this->__generateCurlQuery('post', $request, $url);\n            }\n            if ($python !== false) {\n                $python = $this->__generatePythonScript($request, $url);\n            }\n            $response = $HttpSocket->post($url, $request['body'], array('header' => $request['header']));\n        } else {\n            return false;\n        }\n        $view_data['duration'] = microtime(true) - $start;\n        $view_data['duration'] = round($view_data['duration'] * 1000, 2) . 'ms';\n        $view_data['code'] =  $response->code;\n        $view_data['headers'] = $response->headers;\n        if (!empty($request['show_result'])) {\n            $view_data['data'] = $response->body;\n        } else {\n            if ($response->isOk()) {\n                $view_data['data'] = 'Success.';\n            } else {\n                $view_data['data'] = 'Something went wrong.';\n            }\n        }\n        $rest_history_item['outcome'] = $response->code;\n        $this->RestClientHistory->save($rest_history_item);\n        $this->RestClientHistory->cleanup($this->Auth->user('id'));\n        return $view_data;\n    }\n\n    private function __generatePythonScript($request, $url)\n    {\n        $slashCounter = 0;\n        $baseurl = '';\n        $relative = '';\n        $verifyCert = ($url[4] === 's') ? 'True' : 'False';\n        for ($i = 0; $i < strlen($url); $i++) {\n            //foreach ($url as $url[$i]) {\n            if ($url[$i] === '/') {\n                $slashCounter += 1;\n                if ($slashCounter == 3) {\n                    continue;\n                }\n            }\n            if ($slashCounter < 3) {\n                $baseurl .= $url[$i];\n            } else {\n                $relative .= $url[$i];\n            }\n        }\n        $python_script =\n        sprintf(\n'misp_url = \\'%s\\'\nmisp_key = \\'%s\\'\nmisp_verifycert = %s\nrelative_path = \\'%s\\'\nbody = %s\n\nfrom pymisp import PyMISP\n\nmisp = PyMISP(misp_url, misp_key, misp_verifycert)\nmisp.direct_call(relative_path, body)\n',\n            $baseurl,\n            $request['header']['Authorization'],\n            $verifyCert,\n            $relative,\n            (empty($request['body']) ? 'Null' : $request['body'])\n        );\n        return $python_script;\n    }\n\n    private function __generateCurlQuery($type, $request, $url)\n    {\n        if ($type === 'get') {\n            $curl = sprintf(\n                'curl \\%s -H \"Authorization: %s\" \\%s -H \"Accept: %s\" \\%s -H \"Content-type: %s\" \\%s %s',\n                PHP_EOL,\n                $request['header']['Authorization'],\n                PHP_EOL,\n                $request['header']['Accept'],\n                PHP_EOL,\n                $request['header']['Content-Type'],\n                PHP_EOL,\n                $url\n            );\n        } else {\n            $curl = sprintf(\n                'curl \\%s -d \\'%s\\' \\%s -H \"Authorization: %s\" \\%s -H \"Accept: %s\" \\%s -H \"Content-type: %s\" \\%s -X POST %s',\n                PHP_EOL,\n                json_encode(json_decode($request['body']), true),\n                PHP_EOL,\n                $request['header']['Authorization'],\n                PHP_EOL,\n                $request['header']['Accept'],\n                PHP_EOL,\n                $request['header']['Content-Type'],\n                PHP_EOL,\n                $url\n            );\n        }\n        return $curl;\n    }\n\n    public function getApiInfo()\n    {\n        $relative_path = $this->request->data['url'];\n        $result = $this->RestResponse->getApiInfo($relative_path);\n        if ($this->_isRest()) {\n            return $result;\n        } else {\n            $result = json_decode($result, true);\n            if (empty($result)) {\n                return $this->RestResponse->viewData('&nbsp;', $this->response->type());\n            }\n            $this->layout = false;\n            $this->autoRender = false;\n            $this->set('api_info', $result);\n            $this->render('ajax/get_api_info');\n        }\n    }\n\n    public function cache($id = 'all')\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            $this->loadModel('Job');\n            $this->Job->create();\n            $data = array(\n                    'worker' => 'default',\n                    'job_type' => 'cache_servers',\n                    'job_input' => intval($id) ? $id : 'all',\n                    'status' => 0,\n                    'retries' => 0,\n                    'org' => $this->Auth->user('Organisation')['name'],\n                    'message' => __('Starting server caching.'),\n            );\n            $this->Job->save($data);\n            $jobId = $this->Job->id;\n            $process_id = CakeResque::enqueue(\n                    'default',\n                    'ServerShell',\n                    array('cacheServer', $this->Auth->user('id'), $id, $jobId),\n                    true\n            );\n            $this->Job->saveField('process_id', $process_id);\n            $message = 'Server caching job initiated.';\n        } else {\n            $result = $this->Server->cacheServerInitiator($this->Auth->user(), $id);\n            if (!$result) {\n                $this->Flash->error(__('Caching the servers has failed.'));\n                $this->redirect(array('action' => 'index'));\n            }\n            $message = __('Caching the servers has successfully completed.');\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->saveSuccessResponse('Server', 'cache', false, $this->response->type(), $message);\n        } else {\n            $this->Flash->info($message);\n            $this->redirect(array('action' => 'index'));\n        }\n    }\n\n    public function updateJSON()\n    {\n        $results = $this->Server->updateJSON();\n        return $this->RestResponse->viewData($results, $this->response->type());\n    }\n\n    public function createSync()\n    {\n        if ($this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException('Site admin accounts cannot be used to create server sync configurations.');\n        }\n        $baseurl = Configure::read('MISP.external_baseurl');\n        if (empty($baseurl)) {\n            $baseurl = Configure::read('MISP.baseurl');\n            if (empty($baseurl)) {\n                $baseurl = Router::url('/', true);\n            }\n        }\n        $host_org_id = Configure::read('MISP.host_org_id');\n        if (empty($host_org_id)) {\n            throw new MethodNotAllowedException(__('Cannot create sync config - no host org ID configured for the instance.'));\n        }\n        $this->loadModel('Organisation');\n        $host_org = $this->Organisation->find('first', array(\n            'conditions' => array('Organisation.id' => $host_org_id),\n            'recursive' => -1,\n            'fields' => array('name', 'uuid')\n        ));\n        if (empty($host_org)) {\n            throw new MethodNotAllowedException(__('Configured host org not found. Please make sure that the setting is current on the instance.'));\n        }\n        $server = array(\n            'Server' => array(\n                'url' => $baseurl,\n                'uuid' => Configure::read('MISP.uuid'),\n                'authkey' => $this->Auth->user('authkey'),\n                'Organisation' => array(\n                    'name' => $host_org['Organisation']['name'],\n                    'uuid' => $host_org['Organisation']['uuid'],\n                )\n            )\n        );\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($server, $this->response->type());\n        } else {\n            $this->set('server', $server);\n        }\n    }\n\n    public function import()\n    {\n        if ($this->request->is('post')) {\n            $server = $this->request->data;\n            if (isset($server['Server'])) {\n                $server = $server['Server'];\n            }\n            if (isset($server['json'])) {\n                $server = json_decode($server['json'], true)['Server'];\n            }\n            $this->loadModel('Organisation');\n            $org_id = $this->Organisation->captureOrg($server['Organisation'], $this->Auth->user());\n            $toSave = array(\n                'push' => 0,\n                'pull' => 0,\n                'caching_enabled' => 0,\n                'json' => '[]',\n                'push_rules' => '[]',\n                'pull_rules' => '[]',\n                'self_signed' => 0,\n                'org_id' => $this->Auth->user('org_id'),\n                'remote_org_id' => $org_id,\n                'name' => empty($server['name']) ? $server['url'] : $server['name'],\n                'url' => $server['url'],\n                'uuid' => $server['uuid'],\n                'authkey' => $server['authkey']\n            );\n            $this->Server->create();\n            $result = $this->Server->save($toSave);\n            if ($result) {\n                if ($this->_isRest()) {\n                    $server = $this->Server->find('first', array(\n                        'conditions' => array('Server.id' => $this->Server->id),\n                        'recursive' => -1\n                    ));\n                    return $this->RestResponse->viewData($server, $this->response->type());\n                } else {\n                    $this->Flash->success(__('The server has been saved'));\n                    $this->redirect(array('action' => 'index', $this->Server->id));\n                }\n            } else {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Servers', 'addFromJson', false, $this->Server->validationErrors, $this->response->type());\n                } else {\n                    $this->Flash->error(__('Could not save the server. Error: %s', json_encode($this->Server->validationErrors, true)));\n                    $this->redirect(array('action' => 'index'));\n                }\n            }\n        }\n    }\n\n    public function resetRemoteAuthKey($id)\n    {\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException(__('This endpoint expects POST requests.'));\n        }\n        $result = $this->Server->resetRemoteAuthkey($id);\n        if ($result !== true) {\n            if (!$this->_isRest()) {\n                $this->Flash->error($result);\n                $this->redirect(array('action' => 'index'));\n            } else {\n                return $this->RestResponse->saveFailResponse('Servers', 'resetRemoteAuthKey', $id, $message, $this->response->type());\n            }\n        } else {\n            $message = __('API key updated.');\n            if (!$this->_isRest()) {\n                $this->Flash->success($message);\n                $this->redirect(array('action' => 'index'));\n            } else {\n                return $this->RestResponse->saveSuccessResponse('Servers', 'resetRemoteAuthKey', $message, $this->response->type());\n            }\n        }\n    }\n}\n", "<?php\nApp::uses('AppController', 'Controller');\n\nclass UsersController extends AppController\n{\n    public $newkey;\n\n    public $components = array(\n            'Security',\n            'Email',\n            'RequestHandler'\n    );\n\n    public $paginate = array(\n            'limit' => 60,\n            'recursive' => -1,\n            'order' => array(\n                    'Organisation.name' => 'ASC'\n            ),\n            'contain' => array(\n                'Organisation' => array('id', 'name'),\n                'Role' => array('id', 'name', 'perm_auth', 'perm_site_admin')\n            )\n    );\n\n    public $helpers = array('Js' => array('Jquery'));\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n\n        // what pages are allowed for non-logged-in users\n        $this->Auth->allow('login', 'logout');\n    }\n\n    public function view($id = null)\n    {\n        if (\"me\" == $id) {\n            $id = $this->Auth->user('id');\n        }\n        if (!$this->_isSiteAdmin() && $this->Auth->user('id') != $id) {\n            throw new NotFoundException(__('Invalid user or not authorised.'));\n        }\n        if (!is_numeric($id) && !empty($id)) {\n            $userId = $this->User->find('first', array(\n                    'conditions' => array('email' => $id),\n                    'fields' => array('id')\n            ));\n            $id = $userid['User']['id'];\n        }\n        $this->User->id = $id;\n        $this->User->recursive = 0;\n        if (!$this->User->exists()) {\n            throw new NotFoundException(__('Invalid user'));\n        }\n        $user = $this->User->read(null, $id);\n        if (!empty($user['User']['gpgkey'])) {\n            $pgpDetails = $this->User->verifySingleGPG($user);\n            $user['User']['pgp_status'] = isset($pgpDetails[2]) ? $pgpDetails[2] : 'OK';\n            $user['User']['fingerprint'] = !empty($pgpDetails[4]) ? $pgpDetails[4] : 'N/A';\n        }\n        if ($this->_isRest()) {\n            unset($user['User']['server_id']);\n            $user['User']['password'] = '*****';\n            return $this->RestResponse->viewData(array('User' => $user['User']), $this->response->type());\n        } else {\n            $this->set('user', $user);\n        }\n    }\n\n    public function request_API()\n    {\n        if (Configure::read('MISP.disable_emailing')) {\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'API access request failed. E-mailing is currently disabled on this instance.')), 'status'=>200, 'type' => 'json'));\n        }\n        $responsibleAdmin = $this->User->findAdminsResponsibleForUser($this->Auth->user());\n        if (isset($responsibleAdmin['email']) && !empty($responsibleAdmin['email'])) {\n            $subject = \"[MISP \" . Configure::read('MISP.org') . \"] User requesting API access\";\n            $body = \"A user (\" . $this->Auth->user('email') . \") has sent you a request to enable his/her API key access.\" . PHP_EOL;\n            $body .= \"You can edit the user's profile at \" . Configure::read('MISP.baseurl') . '/admin/users/edit/' . $this->Auth->user('id');\n            $user = $this->User->find('first', array('conditions' => array('User.id' => $responsibleAdmin['id'])));\n            $result = $this->User->sendEmail($user, $body, false, $subject);\n            if ($result) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'API access requested.')), 'status'=>200, 'type' => 'json'));\n            }\n        }\n        return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Something went wrong, please try again later.')), 'status'=>200, 'type' => 'json'));\n    }\n\n    public function edit()\n    {\n        if (!$this->_isAdmin() && Configure::read('MISP.disableUserSelfManagement')) {\n            throw new MethodNotAllowedException('User self-management has been disabled on this instance.');\n        }\n        $id = $this->Auth->user('id');\n        $this->User->read(null, $id);\n        if (!$this->User->exists()) {\n            throw new NotFoundException('Something went wrong. Your user account could not be accessed.');\n        }\n        if ($this->request->is('post') || $this->request->is('put')) {\n            $abortPost = false;\n            if (!$this->_isSiteAdmin() && !empty($this->request->data['User']['email'])) {\n                $organisation = $this->User->Organisation->find('first', array(\n                    'conditions' => array('Organisation.id' => $this->Auth->user('org_id')),\n                    'recursive' => -1\n                ));\n                if (!empty($organisation['Organisation']['restricted_to_domain'])) {\n                    $abortPost = true;\n                    foreach ($organisation['Organisation']['restricted_to_domain'] as $restriction) {\n                        if (\n                            strlen($this->request->data['User']['email']) > strlen($restriction) &&\n                            substr($this->request->data['User']['email'], (-1 * strlen($restriction))) === $restriction &&\n                            in_array($this->request->data['User']['email'][strlen($this->request->data['User']['email']) - strlen($restriction) -1], array('@', '.'))\n                        ) {\n                            $abortPost = false;\n                        }\n                    }\n                    if ($abortPost) {\n                        $this->Flash->error(__('Invalid e-mail domain. Your user is restricted to creating users for the following domain(s): ') . implode(', ', $organisation['Organisation']['restricted_to_domain']));\n                    }\n                }\n            }\n            if (!$abortPost && !$this->_isRest()) {\n                if (Configure::read('Security.require_password_confirmation')) {\n                    if (!empty($this->request->data['User']['current_password'])) {\n                        $hashed = $this->User->verifyPassword($this->Auth->user('id'), $this->request->data['User']['current_password']);\n                        if (!$hashed) {\n                            $abortPost = true;\n                            $this->Flash->error('Invalid password. Please enter your current password to continue.');\n                        }\n                        unset($this->request->data['User']['current_password']);\n                    } else {\n                        $abortPost = true;\n                        $this->Flash->info('Please enter your current password to continue.');\n                    }\n                }\n            }\n            if (!$abortPost) {\n                // What fields should be saved (allowed to be saved)\n                $fieldList = array('email', 'autoalert', 'gpgkey', 'certif_public', 'nids_sid', 'contactalert', 'disabled');\n                if (\"\" != $this->request->data['User']['password']) {\n                    $fieldList[] = 'password';\n                }\n                // Save the data\n                if ($this->User->save($this->request->data, true, $fieldList)) {\n                    $this->Flash->success(__('The profile has been updated'));\n                    $this->_refreshAuth();\n                    $this->redirect(array('action' => 'view', $id));\n                } else {\n                    $this->Flash->error(__('The profile could not be updated. Please, try again.'));\n                }\n            }\n        } else {\n            $this->User->set('password', '');\n            $this->request->data = $this->User->data;\n        }\n        $this->loadModel('Server');\n        $this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n        $this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n        $roles = $this->User->Role->find('list');\n        $this->set(compact('roles'));\n        $this->set('id', $id);\n    }\n\n    public function change_pw()\n    {\n        if (!$this->_isAdmin() && Configure::read('MISP.disableUserSelfManagement')) {\n            throw new MethodNotAllowedException('User self-management has been disabled on this instance.');\n        }\n        $id = $this->Auth->user('id');\n        $user = $this->User->find('first', array(\n            'conditions' => array('User.id' => $id),\n            'recursive' => -1\n        ));\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (!isset($this->request->data['User'])) {\n                $this->request->data = array('User' => $this->request->data);\n            }\n            $abortPost = false;\n            if (Configure::read('Security.require_password_confirmation')) {\n                if (!empty($this->request->data['User']['current_password'])) {\n                    $hashed = $this->User->verifyPassword($this->Auth->user('id'), $this->request->data['User']['current_password']);\n                    if (!$hashed) {\n                        $message = __('Invalid password. Please enter your current password to continue.');\n                        if ($this->_isRest()) {\n                            return $this->RestResponse->saveFailResponse('Users', 'change_pw', false, $message, $this->response->type());\n                        }\n                        $abortPost = true;\n                        $this->Flash->error($message);\n                    }\n                    unset($this->request->data['User']['current_password']);\n                } else if (!$this->_isRest()) {\n                    $message = __('Please enter your current password to continue.');\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Users', 'change_pw', false, $message, $this->response->type());\n                    }\n                    $abortPost = true;\n                    $this->Flash->info($message);\n                }\n            }\n            if (!$abortPost) {\n                // What fields should be saved (allowed to be saved)\n                $user['User']['change_pw'] = 0;\n                $user['User']['password'] = $this->request->data['User']['password'];\n                if ($this->_isRest()) {\n                    $user['User']['confirm_password'] = $this->request->data['User']['password'];\n                } else {\n                    $user['User']['confirm_password'] = $this->request->data['User']['confirm_password'];\n                }\n                $temp = $user['User']['password'];\n                // Save the data\n                if ($this->User->save($user)) {\n                    $message = __('Password Changed.');\n                    $this->User->extralog($this->Auth->user(), \"change_pw\", null, null, $user);\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveSuccessResponse('User', 'change_pw', false, $this->response->type(), $message);\n                    }\n                    $this->Flash->success($message);\n                    $this->_refreshAuth();\n                    $this->redirect(array('action' => 'view', $id));\n                } else {\n                    $message = __('The password could not be updated. Make sure you meet the minimum password length / complexity requirements.');\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Users', 'change_pw', false, $message, $this->response->type());\n                    }\n                    $this->Flash->error($message);\n                }\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->describe('Users', 'change_pw', false, $this->response->type());\n        }\n        $this->loadModel('Server');\n        $this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n        $this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n        $this->User->recursive = 0;\n        $this->User->read(null, $id);\n        $this->User->set('password', '');\n        $this->request->data = $this->User->data;\n        $roles = $this->User->Role->find('list');\n        $this->set(compact('roles'));\n    }\n\n    public function admin_index()\n    {\n        if (!$this->_isAdmin()) {\n            throw new NotFoundException(__('Invalid user or not authorised.'));\n        }\n        $this->User->virtualFields['org_ci'] = 'UPPER(Organisation.name)';\n        $urlParams = \"\";\n        $passedArgsArray = array();\n        $booleanFields = array('autoalert', 'contactalert', 'termsaccepted');\n        $textFields = array('role', 'email', 'all', 'authkey');\n        // org admins can't see users of other orgs\n        if ($this->_isSiteAdmin()) {\n            $textFields[] = 'org';\n        }\n        $this->set('passedArgs', json_encode($this->passedArgs));\n        // check each of the passed arguments whether they're a filter (could also be a sort for example) and if yes, add it to the pagination conditions\n        foreach ($this->passedArgs as $k => $v) {\n            if (substr($k, 0, 6) === 'search') {\n                if ($v != \"\") {\n                    if ($urlParams != \"\") {\n                        $urlParams .= \"/\";\n                    }\n                    $urlParams .= $k . \":\" . $v;\n                }\n                $searchTerm = substr($k, 6);\n                if (in_array($searchTerm, $booleanFields)) {\n                    if ($v != \"\") {\n                        $this->paginate['conditions'][] = array('User.' . $searchTerm => $v);\n                    }\n                } elseif (in_array($searchTerm, $textFields)) {\n                    if ($v != \"\") {\n                        if ($searchTerm == \"role\") {\n                            $searchTerm = \"role_id\";\n                        }\n                        $pieces = explode('|', $v);\n                        $test = array();\n                        foreach ($pieces as $piece) {\n                            if ($piece[0] == '!') {\n                                if ($searchTerm == 'email') {\n                                    $this->paginate['conditions']['AND'][] = array('LOWER(User.' . $searchTerm . ') NOT LIKE' => '%' . strtolower(substr($piece, 1)) . '%');\n                                } elseif ($searchTerm == 'org') {\n                                    $this->paginate['conditions']['AND'][] = array('User.org_id !=' => substr($piece, 1));\n                                } else {\n                                    $this->paginate['conditions']['AND'][] = array('User.' . $searchTerm => substr($piece, 1));\n                                }\n                            } else {\n                                if ($searchTerm == 'email') {\n                                    $test['OR'][] = array('LOWER(User.' . $searchTerm . ') LIKE' => '%' . strtolower($piece) . '%');\n                                } elseif ($searchTerm == 'org') {\n                                    $this->paginate['conditions']['OR'][] = array('User.org_id' => $piece);\n                                } elseif ($searchTerm == 'all') {\n                                    $this->paginate['conditions']['AND'][] = array(\n                                            'OR' => array(\n                                                    'UPPER(User.email) LIKE' => '%' . strtoupper($piece) . '%',\n                                                    'UPPER(Organisation.name) LIKE' => '%' . strtoupper($piece) . '%',\n                                                    'UPPER(Role.name) LIKE' => '%' . strtoupper($piece) . '%',\n                                                    'UPPER(User.authkey) LIKE' => '%' . strtoupper($piece) . '%'\n                                            ),\n                                    );\n                                } else {\n                                    $test['OR'][] = array('User.' . $searchTerm => $piece);\n                                }\n                            }\n                        }\n                        if (!empty($test)) {\n                            $this->paginate['conditions']['AND'][] = $test;\n                        }\n                    }\n                }\n                $passedArgsArray[$searchTerm] = $v;\n            }\n        }\n        if ($this->_isRest()) {\n            $conditions = array();\n            if (isset($this->paginate['conditions'])) {\n                $conditions = $this->paginate['conditions'];\n            }\n            if (!$this->_isSiteAdmin()) {\n                $conditions['User.org_id'] = $this->Auth->user('org_id');\n            }\n            $users = $this->User->find('all', array(\n                    'conditions' => $conditions,\n                    'recursive' => -1,\n                    'fields' => array(\n                        'id',\n            'org_id',\n            'server_id',\n            'email',\n            'autoalert',\n            'authkey',\n            'invited_by',\n            'gpgkey',\n            'certif_public',\n            'nids_sid',\n            'termsaccepted',\n            'newsread',\n            'role_id',\n            'change_pw',\n            'contactalert',\n            'disabled',\n            'expiration',\n            'current_login',\n            'last_login',\n            'force_logout',\n            'date_created',\n            'date_modified'\n                    ),\n                    'contain' => array(\n                            'Organisation' => array('id', 'name'),\n                            'Role' => array('id', 'name', 'perm_auth', 'perm_site_admin')\n                    )\n            ));\n            foreach ($users as $key => $value) {\n                if (empty($this->Auth->user('Role')['perm_site_admin'])) {\n                    if ($value['Role']['perm_site_admin']) {\n                        $users[$key]['User']['authkey'] = __('Redacted');\n                    }\n                }\n                unset($users[$key]['User']['password']);\n            }\n            return $this->RestResponse->viewData($users, $this->response->type());\n        } else {\n            $this->set('urlparams', $urlParams);\n            $this->set('passedArgsArray', $passedArgsArray);\n            $conditions = array();\n            if ($this->_isSiteAdmin()) {\n                $this->set('users', $this->paginate());\n            } else {\n                $conditions['User.org_id'] = $this->Auth->user('org_id');\n                $this->paginate['conditions']['AND'][] = $conditions;\n                $users = $this->paginate();\n                foreach ($users as $key => $value) {\n                    if ($value['Role']['perm_site_admin']) {\n                        $users[$key]['User']['authkey'] = __('Redacted');\n                    }\n                }\n                $this->set('users', $users);\n            }\n            if ($this->request->is('ajax')) {\n                $this->autoRender = false;\n                $this->layout = false;\n                $this->render('ajax/admin_index');\n            }\n        }\n    }\n\n    public function admin_filterUserIndex()\n    {\n        if (!$this->_isAdmin() && !$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $passedArgsArray = array();\n        $booleanFields = array('autoalert', 'contactalert', 'termsaccepted');\n        $textFields = array('role', 'email', 'authkey');\n        $showOrg = 0;\n        // org admins can't see users of other orgs\n        if ($this->_isSiteAdmin()) {\n            $textFields[] = 'org';\n            $showOrg = 1;\n        }\n        $this->set('differentFilters', $booleanFields);\n        $this->set('simpleFilters', $textFields);\n        $rules = array_merge($booleanFields, $textFields);\n        $this->set('showorg', $showOrg);\n\n        $filtering = array();\n        foreach ($booleanFields as $b) {\n            $filtering[$b] = '';\n        }\n        foreach ($textFields as $t) {\n            $filtering[$t] = array('OR' => array(), 'NOT' => array());\n        }\n\n        foreach ($this->passedArgs as $k => $v) {\n            if (substr($k, 0, 6) === 'search') {\n                $searchTerm = substr($k, 6);\n                if (in_array($searchTerm, $booleanFields)) {\n                    $filtering[$searchTerm] = $v;\n                } elseif (in_array($searchTerm, $textFields)) {\n                    $pieces = explode('|', $v);\n                    foreach ($pieces as $piece) {\n                        if ($piece[0] == '!') {\n                            $filtering[$searchTerm]['NOT'][] = substr($piece, 1);\n                        } else {\n                            $filtering[$searchTerm]['OR'][] = $piece;\n                        }\n                    }\n                }\n                $passedArgsArray[$searchTerm] = $v;\n            }\n        }\n        $this->set('filtering', json_encode($filtering));\n\n        $roles = $this->User->Role->find('all', array('recursive' => -1));\n        $roleNames = array();\n        $roleJSON = array();\n        foreach ($roles as $k => $v) {\n            $roleNames[$v['Role']['id']] = $v['Role']['name'];\n            $roleJSON[] = array('id' => $v['Role']['id'], 'value' => $v['Role']['name']);\n        }\n        $temp = $this->User->Organisation->find('all', array(\n            'conditions' => array('local' => 1),\n            'recursive' => -1,\n            'fields' => array('id', 'name'),\n            'order' => array('LOWER(name) ASC')\n        ));\n        $orgs = array();\n        foreach ($temp as $org) {\n            $orgs[$org['Organisation']['id']] = $org['Organisation']['name'];\n        }\n        $this->set('orgs', $orgs);\n        $this->set('roles', $roleNames);\n        $this->set('roleJSON', json_encode($roleJSON));\n        $rules = $this->_arrayToValuesIndexArray($rules);\n        $this->set('rules', $rules);\n        $this->set('baseurl', Configure::read('MISP.baseurl'));\n        $this->layout = 'ajax';\n    }\n\n    public function admin_view($id = null)\n    {\n        $this->User->id = $id;\n        if (!$this->User->exists()) {\n            throw new NotFoundException(__('Invalid user'));\n        }\n        $user = $this->User->read(null, $id);\n        if (!empty($user['User']['gpgkey'])) {\n            $pgpDetails = $this->User->verifySingleGPG($user);\n            $user['User']['pgp_status'] = isset($pgpDetails[2]) ? $pgpDetails[2] : 'OK';\n            $user['User']['fingerprint'] = !empty($pgpDetails[4]) ? $pgpDetails[4] : 'N/A';\n        }\n        $user['User']['orgAdmins'] = $this->User->getOrgAdminsForOrg($user['User']['org_id'], $user['User']['id']);\n        if (empty($this->Auth->user('Role')['perm_site_admin']) && !(empty($user['Role']['perm_site_admin']))) {\n            $user['User']['authkey'] = __('Redacted');\n        }\n        $this->set('user', $user);\n        if (!$this->_isSiteAdmin() && !($this->_isAdmin() && $this->Auth->user('org_id') == $user['User']['org_id'])) {\n            throw new MethodNotAllowedException();\n        }\n        if ($this->_isRest()) {\n            $user['User']['password'] = '*****';\n            return $this->RestResponse->viewData(array('User' => $user['User']), $this->response->type());\n        } else {\n            $temp = $this->User->data['User']['invited_by'];\n            $this->set('id', $id);\n            $this->set('user2', $this->User->read(null, $temp));\n        }\n    }\n\n    public function admin_add()\n    {\n        if (!$this->_isAdmin()) {\n            throw new Exception('Administrators only.');\n        }\n        $params = null;\n        if (!$this->_isSiteAdmin()) {\n            $params = array('conditions' => array('perm_site_admin !=' => 1, 'perm_sync !=' => 1, 'perm_regexp_access !=' => 1));\n        }\n        $this->loadModel('AdminSetting');\n        $default_role_id = $this->AdminSetting->getSetting('default_role');\n        $roles = $this->User->Role->find('list', $params);\n        $syncRoles = $this->User->Role->find('list', array('conditions' => array('perm_sync' => 1), 'recursive' => -1));\n        if ($this->request->is('post')) {\n            // In case we don't get the data encapsulated in a User object\n            if ($this->_isRest()) {\n                if (!isset($this->request->data['User'])) {\n                    $this->request->data = array('User' => $this->request->data);\n                }\n                if (isset($this->request->data['User']['id'])) {\n                    unset($this->request->data['User']['id']);\n                }\n                $required_fields = array('role_id', 'email');\n                foreach ($required_fields as $field) {\n                    $set_field_via_other_means = false;\n                    if (empty($this->request->data['User'][$field])) {\n                        if ($field === 'role_id') {\n                            if (!empty($default_role_id)) {\n                                $this->request->data['User'][$field] = $default_role_id;\n                                $set_field_via_other_means = true;\n                            }\n                        }\n                        if (!$set_field_via_other_means) {\n                            return $this->RestResponse->saveFailResponse('Users', 'admin_add', false, array($field => 'Mandatory field not set.'), $this->response->type());\n                        }\n                    }\n                }\n                if (isset($this->request->data['User']['password'])) {\n                    $this->request->data['User']['confirm_password'] = $this->request->data['User']['password'];\n                }\n                $defaults = array(\n                        'external_auth_required' => 0,\n                        'external_auth_key' => '',\n                        'server_id' => 0,\n                        'gpgkey' => '',\n                        'certif_public' => '',\n                        'autoalert' => 0,\n                        'contactalert' => 0,\n                        'disabled' => 0,\n                        'newsread' => 0,\n                        'change_pw' => 1,\n                        'authkey' => $this->User->generateAuthKey(),\n                        'termsaccepted' => 0,\n                        'org_id' => $this->Auth->user('org_id')\n                );\n                foreach ($defaults as $key => $value) {\n                    if (!isset($this->request->data['User'][$key])) {\n                        $this->request->data['User'][$key] = $value;\n                    }\n                }\n            }\n            $this->request->data['User']['date_created'] = time();\n            $this->request->data['User']['date_modified'] = time();\n            if (!array_key_exists($this->request->data['User']['role_id'], $syncRoles)) {\n                $this->request->data['User']['server_id'] = 0;\n            }\n            $this->User->create();\n            // set invited by\n            $this->loadModel('Role');\n            $this->Role->recursive = -1;\n            $chosenRole = $this->Role->findById($this->request->data['User']['role_id']);\n            if (empty($chosenRole)) {\n                throw new MethodNotAllowedException('Invalid role');\n            }\n            $this->request->data['User']['invited_by'] = $this->Auth->user('id');\n            if (!$this->_isRest()) {\n                if ($chosenRole['Role']['perm_sync']) {\n                    $this->request->data['User']['change_pw'] = 0;\n                    $this->request->data['User']['termsaccepted'] = 1;\n                } else {\n                    $this->request->data['User']['change_pw'] = 1;\n                    $this->request->data['User']['termsaccepted'] = 0;\n                }\n            }\n            if (!isset($this->request->data['User']['disabled'])) {\n                $this->request->data['User']['disabled'] = false;\n            }\n            $this->request->data['User']['newsread'] = 0;\n            if (!$this->_isSiteAdmin()) {\n                $this->request->data['User']['org_id'] = $this->Auth->user('org_id');\n                $this->loadModel('Role');\n                $this->Role->recursive = -1;\n                $chosenRole = $this->Role->findById($this->request->data['User']['role_id']);\n                if (\n                    $chosenRole['Role']['perm_site_admin'] == 1 ||\n                    $chosenRole['Role']['perm_regexp_access'] == 1 ||\n                    $chosenRole['Role']['perm_sync'] == 1 ||\n                    $chosenRole['Role']['restricted_to_site_admin'] == 1\n                ) {\n                    throw new Exception('You are not authorised to assign that role to a user.');\n                }\n            }\n            $organisation = $this->User->Organisation->find('first', array(\n                'conditions' => array('Organisation.id' => $this->request->data['User']['org_id']),\n                'recursive' => -1\n            ));\n            $fail = false;\n            if (!$this->_isSiteAdmin()) {\n                if (!empty($organisation['Organisation']['restricted_to_domain'])) {\n                    $fail = true;\n                    foreach ($organisation['Organisation']['restricted_to_domain'] as $restriction) {\n                        if (\n                            strlen($this->request->data['User']['email']) > strlen($restriction) &&\n                            substr($this->request->data['User']['email'], (-1 * strlen($restriction))) === $restriction &&\n                            in_array($this->request->data['User']['email'][strlen($this->request->data['User']['email']) - strlen($restriction) -1], array('@', '.'))\n                        ) {\n                            $fail = false;\n                        }\n                    }\n                    if ($abortPost) {\n                        $this->Flash->error(__('Invalid e-mail domain. Your user is restricted to creating users for the following domain(s): ') . implode(', ', $organisation['Organisation']['restricted_to_domain']));\n                    }\n                }\n            }\n            if (!$fail) {\n                if (empty($organisation)) {\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Users', 'admin_add', false, array('Invalid organisation'), $this->response->type());\n                    } else {\n                        // reset auth key for a new user\n                        $this->set('authkey', $this->newkey);\n                        $this->Flash->error(__('The user could not be saved. Invalid organisation.'));\n                    }\n                } else {\n                    $fieldList = array('password', 'email', 'external_auth_required', 'external_auth_key', 'enable_password', 'confirm_password', 'org_id', 'role_id', 'authkey', 'nids_sid', 'server_id', 'gpgkey', 'certif_public', 'autoalert', 'contactalert', 'disabled', 'invited_by', 'change_pw', 'termsaccepted', 'newsread', 'date_created', 'date_modified');\n                    if ($this->User->save($this->request->data, true, $fieldList)) {\n                        $notification_message = '';\n                        if (!empty($this->request->data['User']['notify'])) {\n                            $user = $this->User->find('first', array('conditions' => array('User.id' => $this->User->id), 'recursive' => -1));\n                            $password = isset($this->request->data['User']['password']) ? $this->request->data['User']['password'] : false;\n                            $result = $this->User->initiatePasswordReset($user, true, true, $password);\n                            if ($result) {\n                                $notification_message .= ' User notified of new credentials.';\n                            }\n                        }\n                        if ($this->_isRest()) {\n                            $user = $this->User->find('first', array(\n                                    'conditions' => array('User.id' => $this->User->id),\n                                    'recursive' => -1\n                            ));\n                            $user['User']['password'] = '******';\n                            return $this->RestResponse->viewData($user, $this->response->type());\n                        } else {\n                            $this->Flash->success(__('The user has been saved.' . $notification_message));\n                            $this->redirect(array('action' => 'index'));\n                        }\n                    } else {\n                        if ($this->_isRest()) {\n                            return $this->RestResponse->saveFailResponse('Users', 'admin_add', false, $this->User->validationErrors, $this->response->type());\n                        } else {\n                            // reset auth key for a new user\n                            $this->set('authkey', $this->newkey);\n                            $this->Flash->error(__('The user could not be saved. Please, try again.'));\n                        }\n                    }\n                }\n            }\n        }\n        if (!$this->_isRest()) {\n            $this->newkey = $this->User->generateAuthKey();\n            $this->set('authkey', $this->newkey);\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->describe('Users', 'admin_add', false, $this->response->type());\n        } else {\n            $orgs = $this->User->Organisation->find('list', array(\n                    'conditions' => array('local' => 1),\n                    'order' => array('lower(name) asc')\n            ));\n            $this->set('orgs', $orgs);\n            // generate auth key for a new user\n            $this->loadModel('Server');\n            $this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n            $this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n            $conditions = array();\n            if (!$this->_isSiteAdmin()) {\n                $conditions['Server.org_id LIKE'] = $this->Auth->user('org_id');\n            }\n            $temp = $this->Server->find('all', array('conditions' => $conditions, 'recursive' => -1, 'fields' => array('id', 'name', 'url')));\n            $servers = array(0 => 'Not bound to a server');\n            if (!empty($temp)) {\n                foreach ($temp as $t) {\n                    if (!empty($t['Server']['name'])) {\n                        $servers[$t['Server']['id']] = $t['Server']['name'];\n                    } else {\n                        $servers[$t['Server']['id']] = $t['Server']['url'];\n                    }\n                }\n            }\n            $this->set('currentOrg', $this->Auth->user('org_id'));\n            $this->set('isSiteAdmin', $this->_isSiteAdmin());\n            $this->set('default_role_id', $default_role_id);\n            $this->set('servers', $servers);\n            $this->set(compact('roles'));\n            $this->set(compact('syncRoles'));\n        }\n    }\n\n    public function admin_edit($id = null)\n    {\n        $this->set('currentOrg', $this->Auth->user('org_id'));\n        $this->User->id = $id;\n        if (!$this->User->exists()) {\n            throw new NotFoundException(__('Invalid user'));\n        }\n        $params = array();\n        $allowedRole = '';\n        $userToEdit = $this->User->find('first', array(\n                'conditions' => array('User.id' => $id),\n                'recursive' => -1,\n                'fields' => array('User.id', 'User.role_id', 'User.email', 'User.org_id', 'Role.perm_site_admin'),\n                'contain' => array('Role')\n        ));\n        if (!$this->_isSiteAdmin()) {\n            // Org admins should be able to select the role that is already assigned to an org user when editing them.\n            // What happened previously:\n            // Org admin edits another org admin of the same org\n            // Org admin is not allowed to set privileged access roles (site_admin/sync/regex)\n            // MISP automatically chooses the first available option for the user as the selected setting (usually user)\n            // Org admin is downgraded to a user\n            // Now we make an exception for the already assigned role, both in the form and the actual edit.\n            if ($userToEdit['User']['org_id'] != $this->Auth->user('org_id') || !empty($userToEdit['Role']['perm_site_admin'])) {\n                throw new NotFoundException(__('Invalid user'));\n            }\n            $allowedRole = $userToEdit['User']['role_id'];\n            $params = array('conditions' => array(\n                    'OR' => array(\n                            'AND' => array(\n                                'perm_site_admin' => 0, 'perm_sync' => 0, 'perm_regexp_access' => 0, 'restricted_to_site_admin' => 0\n                            ),\n                            'id' => $allowedRole,\n                    )\n            ));\n        }\n        $roles = $this->User->Role->find('list', $params);\n        $syncRoles = $this->User->Role->find('list', array('conditions' => array('perm_sync' => 1), 'recursive' => -1));\n        $this->set('currentId', $id);\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (!isset($this->request->data['User'])) {\n                $this->request->data['User'] = $this->request->data;\n            }\n            $abortPost = false;\n            if (!$this->_isRest()) {\n                if (Configure::read('Security.require_password_confirmation')) {\n                    if (!empty($this->request->data['User']['current_password'])) {\n                        $hashed = $this->User->verifyPassword($this->Auth->user('id'), $this->request->data['User']['current_password']);\n                        if (!$hashed) {\n                            $abortPost = true;\n                            $this->Flash->error('Invalid password. Please enter your current password to continue.');\n                        }\n                        unset($this->request->data['User']['current_password']);\n                    } else {\n                        $abortPost = true;\n                        $this->Flash->info('Please enter your current password to continue.');\n                    }\n                }\n            }\n            $fail = false;\n            if (!$this->_isSiteAdmin() && !$abortPost) {\n                $organisation = $this->User->Organisation->find('first', array(\n                    'conditions' => array('Organisation.id' => $userToEdit['User']['org_id']),\n                    'recursive' => -1\n                ));\n                if (!empty($organisation['Organisation']['restricted_to_domain'])) {\n                    $abortPost = true;\n                    foreach ($organisation['Organisation']['restricted_to_domain'] as $restriction) {\n                        if (\n                            strlen($this->request->data['User']['email']) > strlen($restriction) &&\n                            substr($this->request->data['User']['email'], (-1 * strlen($restriction))) === $restriction &&\n                            in_array($this->request->data['User']['email'][strlen($this->request->data['User']['email']) - strlen($restriction) -1], array('@', '.'))\n                        ) {\n                            $abortPost = false;\n                        }\n                    }\n                    if ($abortPost) {\n                        $this->Flash->error(__('Invalid e-mail domain. Your user is restricted to creating users for the following domain(s): ') . implode(', ', $organisation['Organisation']['restricted_to_domain']));\n                    }\n                }\n            }\n            if (!$abortPost) {\n                $this->request->data['User']['id'] = $id;\n                if (!isset($this->request->data['User']['email'])) {\n                    $this->request->data['User']['email'] = $userToEdit['User']['email'];\n                }\n                if (isset($this->request->data['User']['role_id']) && !array_key_exists($this->request->data['User']['role_id'], $syncRoles)) {\n                    $this->request->data['User']['server_id'] = 0;\n                }\n                $fields = array();\n                $blockedFields = array('id', 'invited_by');\n                if (!$this->_isSiteAdmin()) {\n                    $blockedFields[] = 'org_id';\n                }\n                foreach (array_keys($this->request->data['User']) as $field) {\n                    if (in_array($field, $blockedFields)) {\n                        continue;\n                    }\n                    if ($field != 'password') {\n                        array_push($fields, $field);\n                    }\n                }\n                $fieldsOldValues = array();\n                foreach ($fields as $field) {\n                    if ($field == 'enable_password') {\n                        continue;\n                    }\n                    if ($field != 'confirm_password') {\n                        array_push($fieldsOldValues, $this->User->field($field));\n                    } else {\n                        array_push($fieldsOldValues, $this->User->field('password'));\n                    }\n                }\n                if (\n                    isset($this->request->data['User']['enable_password']) && $this->request->data['User']['enable_password'] != '0' &&\n                    isset($this->request->data['User']['password']) && \"\" != $this->request->data['User']['password']\n                ) {\n                    $fields[] = 'password';\n                    if ($this->_isRest() && !isset($this->request->data['User']['confirm_password'])) {\n                        $this->request->data['User']['confirm_password'] = $this->request->data['User']['password'];\n                        $fields[] = 'confirm_password';\n                    }\n                }\n                if (!$this->_isRest()) {\n                    $fields[] = 'role_id';\n                }\n                if (!$this->_isSiteAdmin()) {\n                    $this->loadModel('Role');\n                    $this->Role->recursive = -1;\n                    $chosenRole = $this->Role->findById($this->request->data['User']['role_id']);\n                    if (empty($chosenRole) || (($chosenRole['Role']['id'] != $allowedRole) && ($chosenRole['Role']['perm_site_admin'] == 1 || $chosenRole['Role']['perm_regexp_access'] == 1 || $chosenRole['Role']['perm_sync'] == 1))) {\n                        throw new Exception('You are not authorised to assign that role to a user.');\n                    }\n                }\n                if ($this->User->save($this->request->data, true, $fields)) {\n                    // newValues to array\n                    $fieldsNewValues = array();\n                    foreach ($fields as $field) {\n                        if ($field != 'confirm_password') {\n                            $newValue = $this->data['User'][$field];\n                            if (gettype($newValue) == 'array') {\n                                $newValueStr = '';\n                                $cP = 0;\n                                foreach ($newValue as $newValuePart) {\n                                    if ($cP < 2) {\n                                        $newValueStr .= '-' . $newValuePart;\n                                    } else {\n                                        $newValueStr = $newValuePart . $newValueStr;\n                                    }\n                                    $cP++;\n                                }\n                                array_push($fieldsNewValues, $newValueStr);\n                            } else {\n                                array_push($fieldsNewValues, $newValue);\n                            }\n                        } else {\n                            array_push($fieldsNewValues, $this->data['User']['password']);\n                        }\n                    }\n                    // compare\n                    $fieldsResultStr = '';\n                    $c = 0;\n                    foreach ($fields as $field) {\n                        if (isset($fieldsOldValues[$c]) && $fieldsOldValues[$c] != $fieldsNewValues[$c]) {\n                            if ($field != 'confirm_password' && $field != 'enable_password') {\n                                $fieldsResultStr = $fieldsResultStr . ', ' . $field . ' (' . $fieldsOldValues[$c] . ') => (' . $fieldsNewValues[$c] . ')';\n                            }\n                        }\n                        $c++;\n                    }\n                    $fieldsResultStr = substr($fieldsResultStr, 2);\n                    $user = $this->User->find('first', array(\n                        'recursive' => -1,\n                        'conditions' => array('User.id' => $this->id)\n                    ));\n                    $this->User->extralog($this->Auth->user(), \"edit\", \"user\", $fieldsResultStr, $user);\n                    if ($this->_isRest()) {\n                        $user = $this->User->find('first', array(\n                                'conditions' => array('User.id' => $this->User->id),\n                                'recursive' => -1\n                        ));\n                        $user['User']['password'] = '******';\n                        return $this->RestResponse->viewData($user, $this->response->type());\n                    } else {\n                        $this->Flash->success(__('The user has been saved'));\n                        $this->_refreshAuth(); // in case we modify ourselves\n                        $this->redirect(array('action' => 'index'));\n                    }\n                } else {\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Users', 'admin_edit', $id, $this->User->validationErrors, $this->response->type());\n                    } else {\n                        $this->Flash->error(__('The user could not be saved. Please, try again.'));\n                    }\n                }\n            }\n        } else {\n            if ($this->_isRest()) {\n                return $this->RestResponse->describe('Users', 'admin_edit', $id, $this->response->type());\n            }\n            $this->User->read(null, $id);\n            if (!$this->_isSiteAdmin() && $this->Auth->user('org_id') != $this->User->data['User']['org_id']) {\n                $this->redirect(array('controller' => 'users', 'action' => 'index', 'admin' => true));\n            }\n            $this->User->set('password', '');\n            $this->request->data = $this->User->data;\n        }\n        if ($this->_isSiteAdmin()) {\n            $orgs = $this->User->Organisation->find('list', array(\n                    'conditions' => array('local' => 1),\n                    'order' => array('lower(name) asc')\n            ));\n        } else {\n            $orgs = array();\n        }\n        $this->loadModel('Server');\n        $this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n        $this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n        $conditions = array();\n        if (!$this->_isSiteAdmin()) {\n            $conditions['Server.org_id LIKE'] = $this->Auth->user('org_id');\n        }\n        $temp = $this->Server->find('all', array('conditions' => $conditions, 'recursive' => -1, 'fields' => array('id', 'name', 'url')));\n        $servers = array(0 => 'Not bound to a server');\n        foreach ($temp as $t) {\n            if (!empty($t['Server']['name'])) {\n                $servers[$t['Server']['id']] = $t['Server']['name'];\n            } else {\n                $servers[$t['Server']['id']] = $t['Server']['url'];\n            }\n        }\n        $this->set('servers', $servers);\n        $this->set('orgs', $orgs);\n        $this->set('id', $id);\n        $this->set(compact('roles'));\n        $this->set(compact('syncRoles'));\n    }\n\n    public function admin_delete($id = null)\n    {\n        if (!$this->request->is('post') && !$this->request->is('delete')) {\n            throw new MethodNotAllowedException(__('Action not allowed, post or delete request expected.'));\n        }\n        if (!$this->_isAdmin()) {\n            throw new Exception('Administrators only.');\n        }\n        $this->User->id = $id;\n        $conditions = array('User.id' => $id);\n        if (!$this->_isSiteAdmin()) {\n            $conditions['org_id'] = $this->Auth->user('org_id');\n        }\n        $user = $this->User->find('first', array(\n                'conditions' => $conditions,\n                'recursive' => -1\n        ));\n        if (empty($user)) {\n            throw new NotFoundException(__('Invalid user'));\n        }\n        $fieldsDescrStr = 'User (' . $id . '): ' . $user['User']['email'];\n        if ($this->User->delete($id)) {\n            $this->User->extralog($this->Auth->user(), \"delete\", $fieldsDescrStr, '');\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('User', 'admin_delete', $id, $this->response->type(), 'User deleted.');\n            } else {\n                $this->Flash->success(__('User deleted'));\n                $this->redirect(array('action' => 'index'));\n            }\n        }\n        $this->Flash->error(__('User was not deleted'));\n        $this->redirect(array('action' => 'index'));\n    }\n\n    public function updateLoginTime()\n    {\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException('This feature is only accessible via POST requests');\n        }\n        $user = $this->User->find('first', array(\n            'recursive' => -1,\n            'conditions' => array('User.id' => $this->Auth->user('id'))\n        ));\n        $this->User->id = $this->Auth->user('id');\n        $this->User->saveField('last_login', time());\n        $this->User->saveField('current_login', time());\n        $user = $this->User->getAuthUser($user['User']['id']);\n        $this->Auth->login($user);\n        $this->redirect(array('Controller' => 'User', 'action' => 'dashboard'));\n    }\n\n    public function login()\n    {\n        if ($this->request->is('post') || $this->request->is('put')) {\n            $this->Bruteforce = ClassRegistry::init('Bruteforce');\n            if (!empty($this->request->data['User']['email'])) {\n                if ($this->Bruteforce->isBlacklisted($_SERVER['REMOTE_ADDR'], $this->request->data['User']['email'])) {\n                    throw new ForbiddenException('You have reached the maximum number of login attempts. Please wait ' . Configure::read('SecureAuth.expire') . ' seconds and try again.');\n                }\n            }\n            // Check the length of the user's authkey\n            $userPass = $this->User->find('first', array(\n                'conditions' => array('User.email' => $this->request->data['User']['email']),\n                'fields' => array('User.password'),\n                'recursive' => -1\n            ));\n            if (!empty($userPass) && strlen($userPass['User']['password']) == 40) {\n                $this->AdminSetting = ClassRegistry::init('AdminSetting');\n                $db_version = $this->AdminSetting->find('all', array('conditions' => array('setting' => 'db_version')));\n                $versionRequirementMet = $this->User->checkVersionRequirements($db_version[0]['AdminSetting']['value'], '2.4.77');\n                if ($versionRequirementMet) {\n                    $passwordToSave = $this->request->data['User']['password'];\n                }\n                unset($this->Auth->authenticate['Form']['passwordHasher']);\n                $this->Auth->constructAuthenticate();\n            }\n        }\n        if ($this->Auth->login()) {\n            $this->User->extralog($this->Auth->user(), \"login\");\n            $this->User->Behaviors->disable('SysLogLogable.SysLogLogable');\n            $this->User->id = $this->Auth->user('id');\n            $user = $this->User->find('first', array(\n                'conditions' => array(\n                    'User.id' => $this->Auth->user('id')\n                ),\n                'recursive' => -1\n            ));\n            unset($user['User']['password']);\n            $user['User']['action'] = 'login';\n            $user['User']['last_login'] = $this->Auth->user('current_login');\n            $user['User']['current_login'] = time();\n            $this->User->save($user['User'], true, array('id', 'last_login', 'current_login'));\n            if (empty($this->Auth->authenticate['Form']['passwordHasher']) && !empty($passwordToSave)) {\n                $this->User->saveField('password', $passwordToSave);\n            }\n            $this->User->Behaviors->enable('SysLogLogable.SysLogLogable');\n            // no state changes are ever done via GET requests, so it is safe to return to the original page:\n            $this->redirect($this->Auth->redirectUrl());\n        // $this->redirect(array('controller' => 'events', 'action' => 'index'));\n        } else {\n            $dataSourceConfig = ConnectionManager::getDataSource('default')->config;\n            $dataSource = $dataSourceConfig['datasource'];\n            // don't display authError before first login attempt\n            if (str_replace(\"//\", \"/\", $this->webroot . $this->Session->read('Auth.redirect')) == $this->webroot && $this->Session->read('Message.auth.message') == $this->Auth->authError) {\n                $this->Session->delete('Message.auth');\n            }\n            // don't display \"invalid user\" before first login attempt\n            if ($this->request->is('post')) {\n                $this->Flash->error(__('Invalid username or password, try again'));\n                if (isset($this->request->data['User']['email'])) {\n                    $this->Bruteforce->insert($_SERVER['REMOTE_ADDR'], $this->request->data['User']['email']);\n                }\n            }\n            // populate the DB with the first role (site admin) if it's empty\n            $this->loadModel('Role');\n            if ($this->Role->find('count') == 0) {\n                $siteAdmin = array('Role' => array(\n                    'id' => 1,\n                    'name' => 'Site Admin',\n                    'permission' => 3,\n                    'perm_add' => 1,\n                    'perm_modify' => 1,\n                    'perm_modify_org' => 1,\n                    'perm_publish' => 1,\n                    'perm_sync' => 1,\n                    'perm_admin' => 1,\n                    'perm_audit' => 1,\n                    'perm_auth' => 1,\n                    'perm_site_admin' => 1,\n                    'perm_regexp_access' => 1,\n                    'perm_sharing_group' => 1,\n                    'perm_template' => 1,\n                    'perm_tagger' => 1,\n                ));\n                $this->Role->save($siteAdmin);\n                // PostgreSQL: update value of auto incremented serial primary key after setting the column by force\n                if ($dataSource == 'Database/Postgres') {\n                    $sql = \"SELECT setval('roles_id_seq', (SELECT MAX(id) FROM roles));\";\n                    $this->Role->query($sql);\n                }\n            }\n            if ($this->User->Organisation->find('count', array('conditions' => array('Organisation.local' => true))) == 0) {\n                $this->User->runUpdates();\n                $date = date('Y-m-d H:i:s');\n                $org = array('Organisation' => array(\n                        'id' => 1,\n                        'name' => !empty(Configure::read('MISP.org')) ? Configure::read('MISP.org') : 'ADMIN',\n                        'description' => 'Automatically generated admin organisation',\n                        'type' => 'ADMIN',\n                        'uuid' => CakeText::uuid(),\n                        'local' => 1,\n                        'date_created' => $date,\n                        'sector' => '',\n                        'nationality' => ''\n                ));\n                $this->User->Organisation->save($org);\n                // PostgreSQL: update value of auto incremented serial primary key after setting the column by force\n                if ($dataSource == 'Database/Postgres') {\n                    $sql = \"SELECT setval('organisations_id_seq', (SELECT MAX(id) FROM organisations));\";\n                    $this->User->Organisation->query($sql);\n                }\n                $org_id = $this->User->Organisation->id;\n            } else {\n                $hostOrg = $this->User->Organisation->find('first', array('conditions' => array('Organisation.name' => Configure::read('MISP.org'), 'Organisation.local' => true), 'recursive' => -1));\n                if (!empty($hostOrg)) {\n                    $org_id = $hostOrg['Organisation']['id'];\n                } else {\n                    $firstOrg = $this->User->Organisation->find('first', array('conditions' => array('Organisation.local' => true), 'order' => 'Organisation.id ASC'));\n                    $org_id = $firstOrg['Organisation']['id'];\n                }\n            }\n\n            // populate the DB with the first user if it's empty\n            if ($this->User->find('count') == 0) {\n                $this->User->runUpdates();\n                $this->User->createInitialUser($org_id);\n            }\n        }\n    }\n\n    public function routeafterlogin()\n    {\n        // Events list\n        $url = $this->Session->consume('pre_login_requested_url');\n        if (empty($url)) {\n            $url = array('controller' => 'events', 'action' => 'index');\n        }\n        $this->redirect($url);\n    }\n\n    public function logout()\n    {\n        if ($this->Session->check('Auth.User')) {\n            $this->User->extralog($this->Auth->user(), \"logout\");\n        }\n        $this->Flash->info(__('Good-Bye'));\n        $user = $this->User->find('first', array(\n            'conditions' => array(\n                'User.id' => $this->Auth->user('id')\n            ),\n            'recursive' => -1\n        ));\n        unset($user['User']['password']);\n        $user['User']['action'] = 'logout';\n        $this->User->save($user['User'], true, array('id'));\n        $this->redirect($this->Auth->logout());\n    }\n\n    public function resetauthkey($id = null, $alert = false)\n    {\n        if (!$this->_isAdmin() && Configure::read('MISP.disableUserSelfManagement')) {\n            throw new MethodNotAllowedException('User self-management has been disabled on this instance.');\n        }\n        if ($id == 'me') {\n            $id = $this->Auth->user('id');\n        }\n        if (!$this->userRole['perm_auth']) {\n            throw new MethodNotAllowedException(__('Invalid action.'));\n        }\n        $newkey = $this->User->resetauthkey($this->Auth->user(), $id, $alert);\n        if ($newkey === false) {\n            throw new MethodNotAllowedException(__('Invalid user.'));\n        }\n        if (!$this->_isRest()) {\n            $this->Flash->success(__('New authkey generated.', true));\n            $this->_refreshAuth();\n            $this->redirect($this->referer());\n        } else {\n            return $this->RestResponse->saveSuccessResponse('User', 'resetauthkey', $id, $this->response->type(), 'Authkey updated: ' . $newkey);\n        }\n    }\n\n    public function resetAllSyncAuthKeys()\n    {\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException(__('This functionality is only accessible via POST requests.'));\n        }\n        $results = $this->User->resetAllSyncAuthKeysRouter($this->Auth->user());\n        if ($results === true) {\n            $message = __('Job initiated.');\n        } else {\n            $message = __('%s authkeys reset, %s could not be reset.', $results['success'], $results['fails']);\n        }\n        if (!$this->_isRest()) {\n            $this->Flash->info($message);\n            $this->redirect($this->referer());\n        } else {\n            return $this->RestResponse->saveSuccessResponse('User', 'resetAllSyncAuthKeys', false, $this->response->type(), $message);\n        }\n    }\n\n    public function histogram($selected = null)\n    {\n        //if (!$this->request->is('ajax') && !$this->_isRest()) throw new MethodNotAllowedException('This function can only be accessed via AJAX or the API.');\n        if ($selected == '[]') {\n            $selected = null;\n        }\n        $selectedTypes = array();\n        if ($selected) {\n            $selectedTypes = json_decode($selected);\n        }\n        if (!$this->_isSiteAdmin() && !empty(Configure::read('Security.hide_organisation_index_from_users'))) {\n            $org_ids = array($this->Auth->user('org_id'));\n        } else {\n            $org_ids = $this->User->Event->find('list', array(\n                'fields' => array('Event.orgc_id', 'Event.orgc_id'),\n                'group' => array('Event.orgc_id')\n            ));\n        }\n        $orgs_temp = $this->User->Organisation->find('list', array(\n            'fields' => array('Organisation.id', 'Organisation.name'),\n            'conditions' => array('Organisation.id' => $org_ids)\n        ));\n        $orgs = array(0 => 'All organisations');\n        foreach ($org_ids as $v) {\n            if (!empty($orgs_temp[$v])) {\n                $orgs[$v] = $orgs_temp[$v];\n            }\n        }\n        $data = array();\n        $max = 1;\n        foreach ($orgs as $org_id => $org_name) {\n            $conditions = array('Attribute.deleted' => 0);\n            if ($selected) {\n                $conditions['Attribute.type'] = $selectedTypes;\n            }\n            if ($org_id != 0) {\n                $conditions['Event.orgc_id'] = $org_id;\n            }\n            $params = array(\n                'recursive' => -1,\n                'fields' => array('Attribute.type', 'COUNT(*) as num_types'),\n                'group' => array('Attribute.type'),\n                'joins' => array(\n                    array(\n                        'table' => 'events',\n                        'alias' => 'Event',\n                        'type' => 'LEFT',\n                        'conditions' => array(\n                            'Attribute.event_id = Event.id'\n                        )\n                    )\n                ),\n                //'order' => array('num_types DESC'),\n                'conditions' => $conditions,\n                'order' => false\n            );\n            if ($org_id == 0) {\n                unset($params['joins']);\n            }\n            $temp = $this->User->Event->Attribute->find('all', $params);\n            $temp = Hash::combine($temp, '{n}.Attribute.type', '{n}.0.num_types');\n            $total = 0;\n            foreach ($temp as $k => $v) {\n                if (intval($v) > $max) {\n                    $max = intval($v);\n                }\n                $total += intval($v);\n            }\n            $data[$org_id]['data'] = $temp;\n            $data[$org_id]['org_name'] = $org_name;\n            $data[$org_id]['total'] = $total;\n        }\n        uasort($data, function ($a, $b) {\n            return $b['total'] - $a['total'];\n        });\n        $data = array_values($data);\n        $this->set('data', $data);\n        $this->set('max', $max);\n        $this->set('selectedTypes', $selectedTypes);\n\n        // Nice graphical histogram\n        $sigTypes = array_keys($this->User->Event->Attribute->typeDefinitions);\n        App::uses('ColourPaletteTool', 'Tools');\n        $paletteTool = new ColourPaletteTool();\n        $colours = $paletteTool->createColourPalette(count($sigTypes));\n        $typeDb = array();\n        foreach ($sigTypes as $k => $type) {\n            $typeDb[$type] = $colours[$k];\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($data, $this->response->type());\n        } else {\n            $this->set('typeDb', $typeDb);\n            $this->set('sigTypes', $sigTypes);\n            $this->layout = 'ajax';\n        }\n    }\n\n    public function terms()\n    {\n        if ($this->request->is('post') || $this->request->is('put')) {\n            $this->User->id = $this->Auth->user('id');\n            $this->User->saveField('termsaccepted', true);\n            $this->_refreshAuth(); // refresh auth info\n            $this->Flash->success(__('You accepted the Terms and Conditions.'));\n            $this->redirect(array('action' => 'routeafterlogin'));\n        }\n        $this->set('termsaccepted', $this->Auth->user('termsaccepted'));\n    }\n\n    public function downloadTerms()\n    {\n        if (!Configure::read('MISP.terms_file')) {\n            $termsFile = APP .\"View/Users/terms\";\n        } else {\n            $termsFile = APP . 'files' . DS . 'terms' . DS .  Configure::read('MISP.terms_file');\n        }\n        $this->response->file($termsFile, array('download' => true, 'name' => Configure::read('MISP.terms_file')));\n        return $this->response;\n    }\n\n    // Used for fields_before and fields for audit\n    public function arrayCopy(array $array)\n    {\n        $result = array();\n        foreach ($array as $key => $val) {\n            if (is_array($val)) {\n                $result[$key] = arrayCopy($val);\n            } elseif (is_object($val)) {\n                $result[$key] = clone $val;\n            } else {\n                $result[$key] = $val;\n            }\n        }\n        return $result;\n    }\n\n    public function checkAndCorrectPgps()\n    {\n        if (!self::_isAdmin()) {\n            throw new NotFoundException();\n        }\n        $this->set('fails', $this->User->checkAndCorrectPgps());\n    }\n\n    public function admin_quickEmail($user_id)\n    {\n        if (!$this->_isAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $conditions = array('User.id' => $user_id);\n        if (!$this->_isSiteAdmin()) {\n            $conditions['User.org_id'] = $this->Auth->user('org_id');\n        }\n        $user = $this->User->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1\n        ));\n        $error = false;\n        if (empty($user)) {\n            $error = 'Invalid user.';\n        }\n        if (!$error && $user['User']['disabled']) {\n            $error = 'Cannot send an e-mail to this user as the account is disabled.';\n        }\n        $encryption = false;\n        if (!$error && !empty($user['User']['gpgkey'])) {\n            $encryption = 'PGP';\n        } elseif (!$error && !empty($user['User']['certif_public'])) {\n            $encryption = 'SMIME';\n        }\n        $this->set('encryption', $encryption);\n        if (!$error && !$encryption && (Configure::read('GnuPG.onlyencrypted') || Configure::read('GnuPG.bodyonlyencrypted'))) {\n            $error = 'No encryption key found for the user and the instance posture blocks non encrypted e-mails from being sent.';\n        }\n        if ($error) {\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveFailResponse('Users', 'admin_quickEmail', false, $error, $this->response->type());\n            } else {\n                $this->Flash->error('Cannot send an e-mail to this user as the account is disabled.');\n                $this->redirect('/admin/users/view/' . $user_id);\n            }\n        }\n        if ($this->request->is('post')) {\n            if (!isset($this->request->data['User'])) {\n                $this->request->data['User'] = $this->request->data;\n            }\n            if (empty($this->request->data['User']['subject']) || empty($this->request->data['User']['body'])) {\n                $message = 'Both the subject and the body have to be set.';\n                if ($this->_isRest()) {\n                    throw new MethodNotAllowedException($message);\n                } else {\n                    $this->Flash->error($message);\n                    $this->redirect('/admin/users/quickEmail/' . $user_id);\n                }\n            }\n            $result = $this->User->sendEmail($user, $this->request->data['User']['body'], false, $this->request->data['User']['subject']);\n            if ($this->_isRest()) {\n                if ($result) {\n                    return $this->RestResponse->saveSuccessResponse('User', 'admin_quickEmail', $id, $this->response->type(), 'User deleted.');\n                } else {\n                    return $this->RestResponse->saveFailResponse('Users', 'admin_quickEmail', false, $this->User->validationErrors, $this->response->type());\n                }\n            } else {\n                if ($result) {\n                    $this->Flash->success('Email sent.');\n                } else {\n                    $this->Flash->error('Could not send e-mail.');\n                }\n                $this->redirect('/admin/users/view/' . $user_id);\n            }\n        } elseif ($this->_isRest()) {\n            return $this->RestResponse->describe('Users', 'admin_quickEmail', false, $this->response->type());\n        }\n        $this->set('encryption', $encryption);\n        $this->set('user', $user);\n    }\n\n    public function admin_email($isPreview=false)\n    {\n        if (!$this->_isAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $isPostOrPut = $this->request->is('post') || $this->request->is('put');\n        $conditions = array();\n        if (!$this->_isSiteAdmin()) {\n            $conditions = array('org_id' => $this->Auth->user('org_id'));\n        }\n\n        // harvest parameters\n        if ($isPostOrPut) {\n            $recipient = $this->request->data['User']['recipient'];\n        } else {\n            $recipient = isset($this->request->query['recipient']) ? $this->request->query['recipient'] : null;\n        }\n        if ($isPostOrPut) {\n            $recipientEmailList = $this->request->data['User']['recipientEmailList'];\n        } else {\n            $recipientEmailList = isset($this->request->query['recipientEmailList']) ? $this->request->query['recipientEmailList'] : null;\n        }\n        if ($isPostOrPut) {\n            $orgNameList = $this->request->data['User']['orgNameList'];\n        } else {\n            $orgNameList = isset($this->request->query['orgNameList']) ? $this->request->query['orgNameList'] : null;\n        }\n\n        if (!is_null($recipient) && $recipient == 0) {\n            if (is_null($recipientEmailList)) {\n                throw new NotFoundException(__('Recipient email not provided'));\n            }\n            $conditions['id'] = $recipientEmailList;\n        } elseif (!is_null($recipient) && $recipient == 2) {\n            if (is_null($orgNameList)) {\n                throw new NotFoundException(__('Recipient organisation not provided'));\n            }\n            $conditions['org_id'] = $orgNameList;\n        }\n        $conditions['AND'][] = array('User.disabled' => 0);\n\n        // Allow to mimic real form post\n        if ($isPreview) {\n            $users = $this->User->find('list', array('recursive' => -1, 'order' => array('email ASC'), 'conditions' => $conditions, 'fields' => array('email')));\n            $this->set('emails', $users);\n            $this->set('emailsCount', count($users));\n            $this->render('ajax/emailConfirmTemplate');\n        } else {\n            $users = $this->User->find('all', array('recursive' => -1, 'order' => array('email ASC'), 'conditions' => $conditions));\n            // User has filled in his contact form, send out the email.\n            if ($isPostOrPut) {\n                $this->request->data['User']['message'] = $this->User->adminMessageResolve($this->request->data['User']['message']);\n                $failures = '';\n                foreach ($users as $user) {\n                    $password = $this->User->generateRandomPassword();\n                    $body = str_replace('$password', $password, $this->request->data['User']['message']);\n                    $body = str_replace('$username', $user['User']['email'], $body);\n                    $result = $this->User->sendEmail($user, $body, false, $this->request->data['User']['subject']);\n                    // if sending successful and action was a password change, update the user's password.\n                    if ($result && $this->request->data['User']['action'] != '0') {\n                        $this->User->id = $user['User']['id'];\n                        $this->User->saveField('password', $password);\n                        $this->User->saveField('change_pw', '1');\n                    }\n                    if (!$result) {\n                        if ($failures != '') {\n                            $failures .= ', ';\n                        }\n                        $failures .= $user['User']['email'];\n                    }\n                }\n                if ($failures != '') {\n                    $this->Flash->success(__('E-mails sent, but failed to deliver the messages to the following recipients: ' . $failures));\n                } else {\n                    $this->Flash->success(__('E-mails sent.'));\n                }\n            }\n            $conditions = array();\n            if (!$this->_isSiteAdmin()) {\n                $conditions = array('org_id' => $this->Auth->user('org_id'));\n            }\n            $conditions['User.disabled'] = 0;\n            $temp = $this->User->find('all', array('recursive' => -1, 'fields' => array('id', 'email', 'Organisation.name'), 'order' => array('email ASC'), 'conditions' => $conditions, 'contain' => array('Organisation')));\n            $emails = array();\n            $orgName = array();\n            // save all the emails of the users and set it for the dropdown list in the form\n            foreach ($temp as $user) {\n                $emails[$user['User']['id']] = $user['User']['email'];\n                $orgName[$user['Organisation']['id']] = $user['Organisation']['name'];\n            }\n\n            $this->set('users', $temp);\n            $this->set('recipientEmail', $emails);\n            $this->set('orgName', $orgName);\n            $this->set('org', Configure::read('MISP.org'));\n            $textsToFetch = array('newUserText', 'passwordResetText');\n            $this->loadModel('Server');\n            foreach ($textsToFetch as $text) {\n                ${$text} = Configure::read('MISP.' . $text);\n                if (!${$text}) {\n                    ${$text} = $this->Server->serverSettings['MISP'][$text]['value'];\n                }\n                $this->set($text, ${$text});\n            }\n        }\n    }\n\n    public function initiatePasswordReset($id, $firstTime = false)\n    {\n        if (!$this->_isAdmin()) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        $user = $this->User->find('first', array(\n            'conditions' => array('id' => $id),\n            'recursive' => -1\n        ));\n        if (!$this->_isSiteAdmin() && $this->Auth->user('org_id') != $user['User']['org_id']) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        if ($this->request->is('post')) {\n            if (isset($this->request->data['User']['firstTime'])) {\n                $firstTime = $this->request->data['User']['firstTime'];\n            }\n            return new CakeResponse($this->User->initiatePasswordReset($user, $firstTime));\n        } else {\n            $error = false;\n            $encryption = false;\n            if (!empty($user['User']['gpgkey'])) {\n                $encryption = 'PGP';\n            } elseif (!$error && !empty($user['User']['certif_public'])) {\n                $encryption = 'SMIME';\n            }\n            $this->set('encryption', $encryption);\n            if (!$encryption && (Configure::read('GnuPG.onlyencrypted') || Configure::read('GnuPG.bodyonlyencrypted'))) {\n                $error = 'No encryption key found for the user and the instance posture blocks non encrypted e-mails from being sent.';\n            }\n            $this->set('error', $error);\n            $this->layout = 'ajax';\n            $this->set('user', $user);\n            $this->set('firstTime', $firstTime);\n            $this->render('ajax/passwordResetConfirmationForm');\n        }\n    }\n\n    // shows some statistics about the instance\n    public function statistics($page = 'data')\n    {\n        $this->set('page', $page);\n        $pages = array('data' => __('Usage data'),\n                       'orgs' => __('Organisations'),\n                       'users' => __('User and Organisation statistics'),\n                       'tags' => __('Tags'),\n                       'attributehistogram' => __('Attribute histogram'),\n                       'sightings' => __('Sightings toplists'),\n                       'galaxyMatrix' => __('Galaxy Matrix'));\n        if (!$this->_isSiteAdmin() && !empty(Configure::read('Security.hide_organisation_index_from_users'))) {\n            unset($pages['orgs']);\n        }\n        $this->set('pages', $pages);\n        $result = array();\n        if ($page == 'data') {\n            $result = $this->__statisticsData($this->params['named']);\n        } elseif ($page == 'orgs') {\n            if (!$this->_isSiteAdmin() && !empty(Configure::read('Security.hide_organisation_index_from_users'))) {\n                throw new MethodNotAllowedException('This feature is currently disabled.');\n            }\n            $result = $this->__statisticsOrgs($this->params['named']);\n        } elseif ($page == 'users') {\n            $result = $this->__statisticsUsers($this->params['named']);\n        } elseif ($page == 'tags') {\n            $result = $this->__statisticsTags($this->params['named']);\n        } elseif ($page == 'attributehistogram') {\n            if ($this->_isRest()) {\n                return $this->histogram($selected = null);\n            } else {\n                $this->render('statistics_histogram');\n            }\n        } elseif ($page == 'sightings') {\n            $result = $this->__statisticsSightings($this->params['named']);\n        } elseif ($page == 'galaxyMatrix') {\n            $result = $this->__statisticsGalaxyMatrix($this->params['named']);\n        }\n        if ($this->_isRest()) {\n            return $result;\n        }\n    }\n\n    private function __statisticsData($params = array())\n    {\n        // set all of the data up for the heatmaps\n        $params = array(\n            'fields' => array('name'),\n            'recursive' => -1,\n            'conditions' => array()\n        );\n        if (!$this->_isSiteAdmin() && !empty(Configure::read('Security.hide_organisation_index_from_users'))) {\n            $params['conditions'] = array('Organisation.id' => $this->Auth->user('org_id'));\n        }\n        $orgs = $this->User->Organisation->find('all', $params);\n        $local_orgs_params = $params;\n        $local_orgs_params['conditions']['Organisation.local'] = 1;\n        $local_orgs = $this->User->Organisation->find('all', $local_orgs_params);\n        $this->loadModel('Log');\n        $year = date('Y');\n        $month = date('n');\n        $month = $month - 5;\n        if ($month < 1) {\n            $year--;\n            $month = 12 + $month;\n        }\n        // Some additional statistics\n        $this_month = strtotime('first day of this month');\n        $stats['event_count'] = $this->User->Event->find('count', array('recursive' => -1));\n        $stats['event_count_month'] = $this->User->Event->find('count', array('conditions' => array('Event.timestamp >' => $this_month), 'recursive' => -1));\n\n        $stats['attribute_count'] = $this->User->Event->Attribute->find('count', array('conditions' => array('Attribute.deleted' => 0), 'recursive' => -1));\n        $stats['attribute_count_month'] = $this->User->Event->Attribute->find('count', array('conditions' => array('Attribute.timestamp >' => $this_month, 'Attribute.deleted' => 0), 'recursive' => -1));\n        $stats['attributes_per_event'] = round($stats['attribute_count'] / $stats['event_count']);\n\n        $this->loadModel('Correlation');\n        $this->Correlation->recursive = -1;\n        $stats['correlation_count'] = $this->Correlation->find('count', array('recursive' => -1));\n        $stats['correlation_count'] = $stats['correlation_count'] / 2;\n\n        $stats['proposal_count'] = $this->User->Event->ShadowAttribute->find('count', array('recursive' => -1));\n\n        $stats['user_count'] = $this->User->find('count', array('recursive' => -1));\n        $stats['user_count_pgp'] = $this->User->find('count', array('recursive' => -1, 'conditions' => array('User.gpgkey !=' => '')));\n        $stats['org_count'] = count($orgs);\n        $stats['local_org_count'] = count($local_orgs);\n        $stats['average_user_per_org'] = round($stats['user_count'] / $stats['local_org_count'], 1);\n\n        $this->loadModel('Thread');\n        $stats['thread_count'] = $this->Thread->find('count', array('conditions' => array('Thread.post_count >' => 0), 'recursive' => -1));\n        $stats['thread_count_month'] = $this->Thread->find('count', array('conditions' => array('Thread.date_created >' => date(\"Y-m-d H:i:s\", $this_month), 'Thread.post_count >' => 0), 'recursive' => -1));\n\n        $stats['post_count'] = $this->Thread->Post->find('count', array('recursive' => -1));\n        $stats['post_count_month'] = $this->Thread->Post->find('count', array('conditions' => array('Post.date_created >' => date(\"Y-m-d H:i:s\", $this_month)), 'recursive' => -1));\n\n\n        if ($this->_isRest()) {\n            $data = array(\n                'stats' => $stats\n            );\n            return $this->RestResponse->viewData($data, $this->response->type());\n        } else {\n            $this->set('stats', $stats);\n            $this->set('orgs', $orgs);\n            $this->set('start', strtotime(date('Y-m-d H:i:s') . ' -5 months'));\n            $this->set('end', strtotime(date('Y-m-d H:i:s')));\n            $this->set('startDateCal', $year . ', ' . $month . ', 01');\n            $range = '[5, 10, 50, 100]';\n            $this->set('range', $range);\n            $this->render('statistics_data');\n        }\n    }\n\n    private function __statisticsSightings($params = array())\n    {\n        $this->loadModel('Sighting');\n        $conditions = array('Sighting.org_id' => $this->Auth->user('org_id'));\n        if (isset($params['timestamp'])) {\n            $conditions['Sighting.date_sighting >'] = $params['timestamp'];\n        }\n        $sightings = $this->Sighting->find('all', array(\n            'conditions' => $conditions,\n            'fields' => array('Sighting.date_sighting', 'Sighting.type', 'Sighting.source', 'Sighting.event_id')\n        ));\n        $data = array();\n        $toplist = array();\n        $eventids = array();\n        foreach ($sightings as $k => $v) {\n            if ($v['Sighting']['source'] == '') {\n                $v['Sighting']['source'] = 'Undefined';\n            }\n            $v['Sighting']['type'] = array('sighting', 'false-positive', 'expiration')[$v['Sighting']['type']];\n            if (isset($data[$v['Sighting']['source']][$v['Sighting']['type']])) {\n                $data[$v['Sighting']['source']][$v['Sighting']['type']]++;\n            } else {\n                $data[$v['Sighting']['source']][$v['Sighting']['type']] = 1;\n            }\n            if (!isset($toplist[$v['Sighting']['source']])) {\n                $toplist[$v['Sighting']['source']] = 1;\n            } else {\n                $toplist[$v['Sighting']['source']]++;\n            }\n            if (!isset($eventids[$v['Sighting']['source']][$v['Sighting']['type']])) {\n                $eventids[$v['Sighting']['source']][$v['Sighting']['type']] = array();\n            }\n            if (!in_array($v['Sighting']['event_id'], $eventids[$v['Sighting']['source']][$v['Sighting']['type']])) {\n                $eventids[$v['Sighting']['source']][$v['Sighting']['type']][] = $v['Sighting']['event_id'];\n            }\n        }\n        arsort($toplist);\n        if ($this->_isRest()) {\n            $data = array(\n                'toplist' => $toplist,\n                'eventids' => $eventids\n            );\n            return $this->RestResponse->viewData($data, $this->response->type());\n        } else {\n            $this->set('eventids', $eventids);\n            $this->set('toplist', $toplist);\n            $this->set('data', $data);\n            $this->render('statistics_sightings');\n        }\n    }\n\n    private function __statisticsOrgs($params = array())\n    {\n        $this->loadModel('Organisation');\n        $conditions = array();\n        if (!isset($params['scope']) || $params['scope'] == 'local') {\n            $params['scope'] = 'local';\n            $conditions['Organisation.local'] = 1;\n        } elseif ($params['scope'] == 'external') {\n            $conditions['Organisation.local'] = 0;\n        }\n        $orgs = array();\n        $orgs = $this->Organisation->find('all', array(\n                'recursive' => -1,\n                'conditions' => $conditions,\n                'fields' => array('id', 'name', 'description', 'local', 'contacts', 'type', 'sector', 'nationality'),\n        ));\n        $orgs = Set::combine($orgs, '{n}.Organisation.id', '{n}.Organisation');\n        $users = $this->User->find('all', array(\n            'group' => 'User.org_id',\n            'conditions' => array('User.org_id' => array_keys($orgs)),\n            'recursive' => -1,\n            'fields' => array('org_id', 'count(*)')\n        ));\n        foreach ($users as $user) {\n            $orgs[$user['User']['org_id']]['userCount'] = $user[0]['count(*)'];\n        }\n        unset($users);\n        $events = $this->User->Event->find('all', array(\n            'group' => 'Event.orgc_id',\n            'conditions' => array('Event.orgc_id' => array_keys($orgs)),\n            'recursive' => -1,\n            'fields' => array('Event.orgc_id', 'count(*)')\n        ));\n        foreach ($events as $event) {\n            $orgs[$event['Event']['orgc_id']]['eventCount'] = $event[0]['count(*)'];\n        }\n        unset($events);\n        $orgs = Set::combine($orgs, '{n}.name', '{n}');\n        // f*** php\n        uksort($orgs, 'strcasecmp');\n        foreach ($orgs as $k => $value) {\n            if (file_exists(APP . 'webroot' . DS . 'img' . DS . 'orgs' . DS . $k . '.png')) {\n                $orgs[$k]['logo'] = true;\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($orgs, $this->response->type());\n        } else {\n            $this->set('scope', $params['scope']);\n            $this->set('orgs', $orgs);\n            $this->render('statistics_orgs');\n        }\n    }\n\n    private function __statisticsUsers($params = array())\n    {\n        $this->loadModel('Organisation');\n        $this->loadModel('User');\n        $this_month = strtotime(date('Y/m') . '/01');\n        $this_year = strtotime(date('Y') . '/01/01');\n        $ranges = array(\n            'total' => null,\n            'month' => $this_month,\n            'year' => $this_year\n        );\n        $scopes = array(\n            'user' => array(\n                'conditions' => array(),\n                'model' => 'User',\n                'date_created' => 'timestamp'\n            ),\n            'org_local' => array(\n                'conditions' => array('Organisation.local' => 1),\n                'model' => 'Organisation',\n                'date_created' => 'datetime'\n            ),\n            'org_external' => array(\n                'conditions' => array('Organisation.local' => 0),\n                'model' => 'Organisation',\n                'date_created' => 'datetime'\n            )\n        );\n        $statistics = array();\n        foreach ($scopes as $scope => $scope_data) {\n            foreach ($ranges as $range => $condition) {\n                $params = array(\n                    'recursive' => -1\n                );\n                $filter = array();\n                if (!empty($condition)) {\n                    if ($scope_data['date_created'] === 'datetime') {\n                        $condition = date('Y-m-d H:i:s', $condition);\n                    }\n                    $filter = array($scope_data['model'] . '.date_created >=' => $condition);\n                }\n                $params['conditions'] = array_merge($scopes[$scope]['conditions'], $filter);\n                $statistics[$scope]['data'][$range] = $this->{$scope_data['model']}->find('count', $params);\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($statistics, $this->response->type());\n        } else {\n            $this->set('statistics', $statistics);\n            $this->render('statistics_users');\n        }\n    }\n\n    public function tagStatisticsGraph()\n    {\n        $this->loadModel('EventTag');\n        $tags = $this->EventTag->getSortedTagList();\n        $this->loadModel('Taxonomy');\n        $taxonomies = $this->Taxonomy->find('list', array(\n                'conditions' => array('enabled' => true),\n                'fields' => array('Taxonomy.namespace')\n        ));\n        $flatData = array();\n        $tagIds = $this->EventTag->Tag->find('list', array('fields' => array('Tag.name', 'Tag.id')));\n        $this->set('tagIds', $tagIds);\n        foreach ($tags as $key => $value) {\n            $name = explode(':', $value['name']);\n            $tags[$key]['taxonomy'] = 'custom';\n            if (count($name) > 1) {\n                if (in_array($name[0], $taxonomies)) {\n                    $tags[$key]['taxonomy'] = $name[0];\n                }\n            }\n            $flatData[$tags[$key]['taxonomy']][$value['name']] = array('name' => $value['name'], 'size' => $value['eventCount']);\n        }\n        $treemap = array(\n                'name' => 'tags',\n                'children' => array()\n        );\n\n        foreach ($flatData as $key => $value) {\n            $newElement = array(\n                'name' => $key,\n                'children' => array()\n            );\n            foreach ($value as $tag) {\n                $newElement['children'][] = array('name' => $tag['name'], 'size' => $tag['size']);\n            }\n            $treemap['children'][] = $newElement;\n        }\n        $taxonomyColourCodes = array();\n        $taxonomies = array_merge(array('custom'), $taxonomies);\n        if ($this->_isRest()) {\n            $data = array(\n                'flatData' => $flatData,\n                'treemap' => $treemap\n            );\n            return $this->RestResponse->viewData($data, $this->response->type());\n        } else {\n            $this->set('taxonomyColourCodes', $taxonomyColourCodes);\n            $this->set('taxonomies', $taxonomies);\n            $this->set('flatData', $flatData);\n            $this->set('treemap', $treemap);\n            $this->set('tags', $tags);\n            $this->layout = 'treemap';\n            $this->render('ajax/tag_statistics_graph');\n        }\n    }\n\n    private function __statisticsTags($params = array())\n    {\n        $trending_tags = array();\n        $all_tags = array();\n        if ($this->_isRest()) {\n            return $this->tagStatisticsGraph();\n        } else {\n            $this->render('statistics_tags');\n        }\n    }\n\n    private function __statisticsGalaxyMatrix($params = array())\n    {\n        $this->loadModel('Event');\n        $this->loadModel('Galaxy');\n        $mitre_galaxy_id = $this->Galaxy->getMitreAttackGalaxyId();\n        if (isset($params['galaxy_id'])) {\n            $galaxy_id = $params['galaxy_id'];\n        } else {\n            $galaxy_id = $mitre_galaxy_id;\n        }\n        $organisations = $this->User->Organisation->find('all', array(\n                'recursive' => -1,\n        ));\n        array_unshift($organisations, array('Organisation' => array('id' => 0, 'name' => 'All')));\n        $this->set('organisations', $organisations);\n        $picked_organisation = 0;\n        if (isset($params['organisation']) && $params['organisation'] != 0) {\n            $org = $this->User->Organisation->find('first', array(\n                    'recursive' => -1,\n                    'conditions' => array('id' => $params['organisation']),\n            ));\n            if (!empty($org)) {\n                $picked_organisation = $org;\n                $this->set('picked_organisation', $picked_organisation);\n            } else {\n                $this->set('picked_organisation', array('Organisation' => array('id' => '')));\n            }\n        } else {\n            $this->set('picked_organisation', array('Organisation' => array('id' => '')));\n        }\n\n        $rest_response_empty = true;\n        $ignore_score = false;\n        if (\n            isset($params['dateFrom'])\n            || isset($params['dateTo'])\n            || isset($params['organisation']) && $params['organisation'] != 0\n        ) { // use restSearch\n            $ignore_score = true;\n            $filters = array();\n            if (isset($params['dateFrom'])) {\n                $filters['from'] = $params['dateFrom'];\n                $this->set('dateFrom', $params['dateFrom']);\n            }\n            if (isset($params['dateTo'])) {\n                $filters['to'] = $params['dateTo'];\n                $this->set('dateTo', $params['dateTo']);\n            }\n            if (isset($params['organisation'])) {\n                $filters['org'] = $params['organisation'];\n            }\n            $elementCounter = 0;\n            $renderView = '';\n            $final = $this->Event->restSearch($this->Auth->user(), 'attack', $filters, false, false, $elementCounter, $renderView);\n\n            $final = json_decode($final, true);\n            if (!empty($final)) {\n                $rest_response_empty = false;\n                foreach ($final as $key => $data) {\n                    $this->set($key, $data);\n                }\n            }\n        }\n\n        // No need for restSearch or result is empty\n        if ($rest_response_empty) {\n            $matrixData = $this->Galaxy->getMatrix($galaxy_id);\n            $tabs = $matrixData['tabs'];\n            $matrixTags = $matrixData['matrixTags'];\n            $killChainOrders = $matrixData['killChain'];\n            $instanceUUID = $matrixData['instance-uuid'];\n            if ($ignore_score) {\n                $scores_uniform = array('scores' => array(), 'maxScore' => 0);\n            } else {\n                $scores_uniform = $this->Event->EventTag->getTagScoresUniform(0, $matrixTags);\n            }\n            $scores = $scores_uniform['scores'];\n            $maxScore = $scores_uniform['maxScore'];\n            // FIXME: temporary fix: add the score of deprecated mitre galaxies to the new one (for the stats)\n            if ($matrixData['galaxy']['id'] == $mitre_galaxy_id) {\n                $mergedScore = array();\n                foreach ($scores as $tag => $v) {\n                    $predicateValue = explode(':', $tag, 2)[1];\n                    $predicateValue = explode('=', $predicateValue, 2);\n                    $predicate = $predicateValue[0];\n                    $clusterValue = $predicateValue[1];\n                    $mappedTag = '';\n                    $mappingWithoutExternalId = array();\n                    if ($predicate == 'mitre-attack-pattern') {\n                        $mappedTag = $tag;\n                        $name = explode(\" \", $tag);\n                        $name = join(\" \", array_slice($name, 0, -2)); // remove \" - external_id\"\n                        $mappingWithoutExternalId[$name] = $tag;\n                    } else {\n                        $name = explode(\" \", $clusterValue);\n                        $name = join(\" \", array_slice($name, 0, -2)); // remove \" - external_id\"\n                        if (isset($mappingWithoutExternalId[$name])) {\n                            $mappedTag = $mappingWithoutExternalId[$name];\n                        } else {\n                            $adjustedTagName = $this->Galaxy->GalaxyCluster->find('list', array(\n                                'group' => array('GalaxyCluster.id', 'GalaxyCluster.tag_name'),\n                                'conditions' => array('GalaxyCluster.tag_name LIKE' => 'misp-galaxy:mitre-attack-pattern=' . $name . '% T%'),\n                                'fields' => array('GalaxyCluster.tag_name')\n                            ));\n                            if (!empty($adjustedTagName)) {\n                                $adjustedTagName = array_values($adjustedTagName)[0];\n                                $mappingWithoutExternalId[$name] = $adjustedTagName;\n                                $mappedTag = $mappingWithoutExternalId[$name];\n                            }\n                        }\n                    }\n                    if (isset($mergedScore[$mappedTag])) {\n                        $mergedScore[$mappedTag] += $v;\n                    } else {\n                        $mergedScore[$mappedTag] = $v;\n                    }\n                }\n                $scores = $mergedScore;\n                $maxScore = !empty($mergedScore) ? max(array_values($mergedScore)) : 0;\n            }\n            // end FIXME\n\n            $this->Galaxy->sortMatrixByScore($tabs, $scores);\n            if ($this->_isRest()) {\n                $json = array('matrix' => $tabs, 'scores' => $scores, 'instance-uuid' => $instanceUUID);\n                return $this->RestResponse->viewData($json, $this->response->type());\n            } else {\n                App::uses('ColourGradientTool', 'Tools');\n                $gradientTool = new ColourGradientTool();\n                $colours = $gradientTool->createGradientFromValues($scores);\n\n                $this->set('target_type', 'attribute');\n                $this->set('columnOrders', $killChainOrders);\n                $this->set('tabs', $tabs);\n                $this->set('scores', $scores);\n                $this->set('maxScore', $maxScore);\n                if (!empty($colours)) {\n                    $this->set('colours', $colours['mapping']);\n                    $this->set('interpolation', $colours['interpolation']);\n                }\n                $this->set('pickingMode', false);\n                if ($matrixData['galaxy']['id'] == $mitre_galaxy_id) {\n                    $this->set('defaultTabName', \"mitre-attack\");\n                    $this->set('removeTrailling', 2);\n                }\n\n                $this->set('galaxyName', $matrixData['galaxy']['name']);\n                $this->set('galaxyId', $matrixData['galaxy']['id']);\n                $matrixGalaxies = $this->Galaxy->getAllowedMatrixGalaxies();\n                $this->set('matrixGalaxies', $matrixGalaxies);\n            }\n        }\n        $this->render('statistics_galaxymatrix');\n    }\n\n    public function verifyGPG($full = false)\n    {\n        if (!self::_isSiteAdmin()) {\n            throw new NotFoundException();\n        }\n        $user_results = $this->User->verifyGPG($full);\n        $this->set('users', $user_results);\n    }\n\n    public function verifyCertificate()\n    {\n        $user_results = $this->User->verifyCertificate();\n        $this->set('users', $user_results);\n    }\n\n    // Refreshes the Auth session with new/updated data\n    protected function _refreshAuth()\n    {\n        $oldUser = $this->Auth->user();\n        $newUser = $this->User->find('first', array('conditions' => array('User.id' => $oldUser['id']), 'recursive' => -1,'contain' => array('Organisation', 'Role')));\n        // Rearrange it a bit to match the Auth object created during the login\n        $newUser['User']['Role'] = $newUser['Role'];\n        $newUser['User']['Organisation'] = $newUser['Organisation'];\n        unset($newUser['Organisation'], $newUser['Role']);\n        $this->Auth->login($newUser['User']);\n    }\n\n    public function fetchPGPKey($email = false)\n    {\n        if ($email == false) {\n            throw new NotFoundException('No email provided.');\n        }\n        $keys = $this->User->fetchPGPKey($email);\n        if (is_numeric($keys)) {\n            throw new NotFoundException('Could not retrieved any keys from the key server.');\n        }\n        $this->set('keys', $keys);\n        $this->autorender = false;\n        $this->layout = false;\n        $this->render('ajax/fetchpgpkey');\n    }\n\n    public function dashboard()\n    {\n        $events = array();\n        // the last login in the session is not updated after the login - only in the db, so let's fetch it.\n        $lastLogin = $this->Auth->user('last_login');\n        $this->loadModel('Event');\n        $events['changed'] = count($this->Event->fetchEventIds($this->Auth->user(), false, false, false, true, $lastLogin));\n        $events['published'] = count($this->Event->fetchEventIds($this->Auth->user(), false, false, false, true, false, $lastLogin));\n        $notifications = $this->{$this->modelClass}->populateNotifications($this->Auth->user());\n        $this->set('notifications', $notifications);\n        $this->set('events', $events);\n    }\n\n    public function checkIfLoggedIn()\n    {\n        return new CakeResponse(array('body'=> 'OK','status' => 200));\n    }\n}\n", "<?php\n\nApp::uses('AppModel', 'Model');\n\nclass Log extends AppModel\n{\n    public $warningActions = array(\n        'warning',\n        'change_pw',\n        'login_fail',\n        'version_warning',\n        'auth_fail'\n    );\n    public $errorActions = array(\n        'error'\n    );\n    public $validate = array(\n            'action' => array(\n            'rule' => array('inList', array(\n                            'accept',\n                            'accept_delegation',\n                            'add',\n                            'admin_email',\n                            'auth',\n                            'auth_fail',\n                            'blacklisted',\n                            'change_pw',\n                            'delete',\n                            'disable',\n                            'discard',\n                            'edit',\n                            'email',\n                            'enable',\n                            'error',\n                            'export',\n                            'file_upload',\n                            'galaxy',\n                            'login',\n                            'login_fail',\n                            'logout',\n                            'merge',\n                            'pruneUpdateLogs',\n                            'publish',\n                            'publish alert',\n                            'pull',\n                            'push',\n                            'remove_dead_workers',\n                            'request',\n                            'request_delegation',\n                            'reset_auth_key',\n                            'security',\n                            'serverSettingsEdit',\n                            'tag',\n                            'undelete',\n                            'update',\n                            'update_database',\n                            'upgrade_24',\n                            'upload_sample',\n                            'version_warning',\n                            'warning'\n                        )),\n            'message' => 'Options : ...'\n        )\n    );\n\n    public $actionDefinitions = array(\n        'login' => array('desc' => 'Login action', 'formdesc' => \"Login action\"),\n        'logout' => array('desc' => 'Logout action', 'formdesc' => \"Logout action\"),\n        'add' => array('desc' => 'Add action', 'formdesc' => \"Add action\"),\n        'edit' => array('desc' => 'Edit action', 'formdesc' => \"Edit action\"),\n        'change_pw' => array('desc' => 'Change_pw action', 'formdesc' => \"Change_pw action\"),\n        'delete' => array('desc' => 'Delete action', 'formdesc' => \"Delete action\"),\n        'publish' => array('desc' => \"Publish action\", 'formdesc' => \"Publish action\")\n    );\n\n    public $logMeta = array(\n        'email' => array('values' => array('email'), 'name' => 'Emails'),\n        'auth_issues' => array('values' => array('login_fail', 'auth_fail'), 'name' => 'Authentication issues')\n    );\n\n    public $logMetaAdmin = array(\n        'update' => array('values' => array('update_database'), 'name' => 'MISP Update results'),\n        'settings' => array('values' => array('serverSettingsEdit', 'remove_dead_workers'), 'name' => 'Setting changes'),\n        'errors' => array('values' => array('warning', 'errors', 'version_warning'), 'name' => 'Warnings and errors'),\n        'email' => array('values' => array('admin_email'))\n    );\n\n    public function beforeValidete()\n    {\n        parent::beforeValidate();\n        if (!isset($this->data['Log']['org']) || empty($this->data['Log']['org'])) {\n            $this->data['Log']['org'] = 'SYSTEM';\n        }\n        // truncate the description if it would exceed the allowed size in mysql\n        if (!empty($this->data['Log']['description'] && strlen($this->data['Log']['description']) > 65536)) {\n            $this->data['Log']['description'] = substr($this->data['Log']['description'], 0, 65535);\n        }\n    }\n\n    public function beforeSave($options = array())\n    {\n        if (!empty(Configure::read('MISP.log_skip_db_logs_completely'))) {\n            return false;\n        }\n        if (Configure::read('MISP.log_client_ip') && isset($_SERVER['REMOTE_ADDR'])) {\n            $this->data['Log']['ip'] = $_SERVER['REMOTE_ADDR'];\n        }\n        $setEmpty = array('title' => '', 'model' => '', 'model_id' => 0, 'action' => '', 'user_id' => 0, 'change' => '', 'email' => '', 'org' => '', 'description' => '');\n        foreach ($setEmpty as $field => $empty) {\n            if (!isset($this->data['Log'][$field]) || empty($this->data['Log'][$field])) {\n                $this->data['Log'][$field] = $empty;\n            }\n        }\n        if (!isset($this->data['Log']['created'])) {\n            $this->data['Log']['created'] = date('Y-m-d H:i:s');\n        }\n        if (!isset($this->data['Log']['org'])) {\n            $this->data['Log']['org'] = 'SYSTEM';\n        }\n        $truncate_fields = array('title', 'change', 'description');\n        foreach ($truncate_fields as $tf) {\n            if (isset($this->data['Log'][$tf]) && strlen($this->data['Log'][$tf]) >= 65535) {\n                $this->data['Log'][$tf] = substr($this->data['Log'][$tf], 0, 65532) . '...';\n            }\n        }\n        $this->logData($this->data);\n        if ($this->data['Log']['action'] === 'request' && !empty(Configure::read('MISP.log_paranoid_skip_db'))) {\n            return false;\n        }\n        return true;\n    }\n\n    public function returnDates($org = 'all')\n    {\n        $dataSourceConfig = ConnectionManager::getDataSource('default')->config;\n        $dataSource = $dataSourceConfig['datasource'];\n        $conditions = array();\n        $this->Organisation = ClassRegistry::init('Organisation');\n        if ($org !== 'all') {\n            $org = $this->Organisation->find('first', array('fields' => array('name'), 'recursive' => -1, 'conditions' => array('UPPER(Organisation.name) LIKE' => strtoupper($org))));\n            if (empty($org)) {\n                return MethodNotAllowedException('Invalid organisation.');\n            }\n            $conditions['org'] = $org['Organisation']['name'];\n        }\n        $conditions['AND']['NOT'] = array('action' => array('login', 'logout', 'changepw'));\n        if ($dataSource == 'Database/Mysql') {\n            $validDates = $this->find('all', array(\n                    'fields' => array('DISTINCT UNIX_TIMESTAMP(DATE(created)) AS Date', 'count(id) AS count'),\n                    'conditions' => $conditions,\n                    'group' => array('Date'),\n                    'order' => array('Date')\n            ));\n        } elseif ($dataSource == 'Database/Postgres') {\n            // manually generate the query for Postgres\n            // cakephp ORM would escape \"DATE\" datatype in CAST expression\n            $condnotinaction = \"'\" . implode(\"', '\", $conditions['AND']['NOT']['action']) . \"'\";\n            if (!empty($conditions['org'])) {\n                $condOrg = ' AND org = \"' . $conditions['org'] . '\"';\n            } else {\n                $condOrg = '';\n            }\n            $sql = 'SELECT DISTINCT EXTRACT(EPOCH FROM CAST(created AS DATE)) AS \"Date\",\n                                    COUNT(id) AS count\n                    FROM logs\n                    WHERE action NOT IN (' . $condnotinaction . ')\n                    ' . $condOrg . '\n                    GROUP BY \"Date\" ORDER BY \"Date\"';\n            $validDates = $this->query($sql);\n        }\n        $data = array();\n        foreach ($validDates as $k => $date) {\n            $data[$date[0]['Date']] = intval($date[0]['count']);\n        }\n        return $data;\n    }\n\n    public function createLogEntry($user = array('Organisation' => array('name' => 'SYSTEM'), 'email' => 'SYSTEM', 'id' => 0), $action, $model, $model_id = 0, $title = '', $change = '')\n    {\n        $this->create();\n        $this->save(array(\n                'org' => $user['Organisation']['name'],\n                'email' =>$user['email'],\n                'user_id' => $user['id'],\n                'action' => $action,\n                'title' => $title,\n                'change' => $change,\n                'model' => $model,\n                'model_id' => $model_id,\n        ));\n    }\n\n    // to combat a certain bug that causes the upgrade scripts to loop without being able to set the correct version\n    // this function remedies a fixed upgrade bug instance by eliminating the massive number of erroneous upgrade log entries\n    public function pruneUpdateLogs($jobId = false, $user)\n    {\n        $max = $this->find('first', array('fields' => array('MAX(id) AS lastid')));\n        if (!empty($max)) {\n            $max = $max[0]['lastid'];\n        }\n        if ($jobId) {\n            $this->Job = ClassRegistry::init('Job');\n            $this->Job->id = $jobId;\n            if (!$this->Job->exists()) {\n                $jobId = false;\n            }\n        }\n        $iterations = ($max / 1000);\n        for ($i = 0; $i < $iterations; $i++) {\n            $this->deleteAll(array(\n                'OR' => array(\n                        'action' => 'update_database',\n                        'AND' => array(\n                            'action' => 'edit',\n                            'model' => 'AdminSetting'\n                        )\n                ),\n                'id >' => $i * 1000,\n                'id <' => ($i+1) * 1000));\n            if ($jobId) {\n                $this->Job->saveField('progress', $i * 100 / $iterations);\n            }\n        }\n        $this->create();\n        $this->save(array(\n                'org' => $user['Organisation']['name'],\n                'email' =>$user['email'],\n                'user_id' => $user['id'],\n                'action' => 'pruneUpdateLogs',\n                'title' => 'Pruning updates',\n                'change' => 'Pruning completed in ' . $i . ' iteration(s).',\n                'model' => 'Log',\n                'model_id' => 0\n        ));\n    }\n\n\n    public function pruneUpdateLogsRouter($user)\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            $job = ClassRegistry::init('Job');\n            $job->create();\n            $data = array(\n                    'worker' => 'default',\n                    'job_type' => 'prune_update_logs',\n                    'job_input' => 'All update entries',\n                    'status' => 0,\n                    'retries' => 0,\n                    'org_id' => $user['org_id'],\n                    'org' => $user['Organisation']['name'],\n                    'message' => 'Purging the heretic.',\n            );\n            $job->save($data);\n            $jobId = $job->id;\n            $process_id = CakeResque::enqueue(\n                    'default',\n                    'AdminShell',\n                    array('prune_update_logs', $jobId, $user['id']),\n                    true\n            );\n            $job->saveField('process_id', $process_id);\n            return $process_id;\n        } else {\n            $result = $this->pruneUpdateLogs(false, $user);\n            return $result;\n        }\n    }\n\n    public function logData($data)\n    {\n        if (Configure::read('Plugin.ZeroMQ_enable') && Configure::read('Plugin.ZeroMQ_audit_notifications_enable')) {\n            $pubSubTool = $this->getPubSubTool();\n            $pubSubTool->publish($data, 'audit', 'log');\n        }\n\n        $this->publishKafkaNotification('audit', $data, 'log');\n\n        if (Configure::read('Plugin.ElasticSearch_logging_enable')) {\n            // send off our logs to distributed /dev/null\n            $logIndex = Configure::read(\"Plugin.ElasticSearch_log_index\");\n            $elasticSearchClient = $this->getElasticSearchTool();\n            $elasticSearchClient->pushDocument($logIndex, \"log\", $data);\n        }\n\n        if (Configure::read('Security.syslog')) {\n            // write to syslogd as well\n            $syslog = new SysLog();\n            $action = 'info';\n            if (isset($data['Log']['action'])) {\n                if (in_array($data['Log']['action'], $this->errorActions)) {\n                    $action = 'err';\n                }\n                if (in_array($data['Log']['action'], $this->warningActions)) {\n                    $action = 'warning';\n                }\n            }\n\n            $entry = $data['Log']['action'];\n            if (!empty($data['Log']['description'])) {\n                $entry .= sprintf(' -- %s', $data['Log']['description']);\n            }\n            $syslog->write($action, $entry);\n        }\n        return true;\n    }\n\n    public function filterSiteAdminSensitiveLogs($list)\n    {\n        $this->User = ClassRegistry::init('User');\n        $site_admin_roles = $this->User->Role->find('list', array(\n            'recursive' => -1,\n            'conditions' => array('Role.perm_site_admin' => 1),\n            'fields' => array('Role.id', 'Role.id')\n        ));\n        $site_admins = $this->User->find('list', array(\n            'recursive' => -1,\n            'conditions' => array(\n                'User.role_id' => array_values($site_admin_roles)\n            ),\n            'fields' => array('User.id', 'User.id')\n        ));\n        foreach ($list as $k => $v) {\n            if (\n                $v['Log']['model'] === 'User' &&\n                in_array($v['Log']['model_id'], array_values($site_admins)) &&\n                in_array($v['Log']['action'], array('add', 'edit', 'reset_auth_key'))\n            ) {\n                $list[$k]['Log']['change'] = __('Redacted');\n            }\n        }\n        return $list;\n    }\n}\n", "<?php\nApp::uses('AppModel', 'Model');\n\nclass Server extends AppModel\n{\n    public $name = 'Server';\n\n    public $actsAs = array('SysLogLogable.SysLogLogable' => array(\n            'userModel' => 'User',\n            'userKey' => 'user_id',\n            'change' => 'full'\n        ),\n        'Trim',\n        'Containable'\n    );\n\n    public $belongsTo = array(\n        'Organisation' => array(\n            'className' => 'Organisation',\n            'foreignKey' => 'org_id',\n        ),\n        'RemoteOrg' => array(\n            'className' => 'Organisation',\n            'foreignKey' => 'remote_org_id',\n        )\n    );\n\n    public $hasMany = array(\n        'SharingGroupServer' => array(\n            'className' => 'SharingGroupServer',\n            'foreignKey' => 'server_id',\n            'dependent'=> true,\n        ),\n        'User' => array(\n            'className' => 'User',\n            'foreignKey' => 'server_id',\n        ),\n    );\n\n    public $displayField = 'url';\n\n    public $validate = array(\n        'url' => array(\n            'url' => array(\n                'rule' => array('url'),\n                'message' => 'Please enter a valid base-url.'\n            )\n        ),\n        'authkey' => array(\n            'rule' => array('validateAuthkey')\n        ),\n        'name' => array(\n            'rule' => array('notBlank'),\n            'allowEmpty' => false,\n            'required' => true\n        ),\n        'org_id' => array(\n            'numeric' => array(\n                'rule' => array('valueIsID'),\n                'allowEmpty' => false,\n                'required' => true,\n            ),\n        ),\n        'push' => array(\n            'boolean' => array(\n                'rule' => array('boolean'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'pull' => array(\n            'boolean' => array(\n                'rule' => array('boolean'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                //'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'lastpushedid' => array(\n            'numeric' => array(\n                'rule' => array('numeric'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'lastpulledid' => array(\n            'numeric' => array(\n                'rule' => array('numeric'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n    );\n\n    public function __construct($id = false, $table = null, $ds = null)\n    {\n        parent::__construct($id, $table, $ds);\n\n        $this->command_line_functions = array(\n            'console_admin_tasks' => array(\n                'data' => array(\n                    'Get setting' => 'MISP/app/Console/cake Admin getSetting [setting]',\n                    'Set setting' => 'MISP/app/Console/cake Admin setSetting [setting] [value]',\n                    'Get authkey' => 'MISP/app/Console/cake Admin getAuthkey [email]',\n                    'Set baseurl' => 'MISP/app/Console/cake Baseurl [baseurl]',\n                    'Change password' => 'MISP/app/Console/cake Password [email] [new_password] [--override_password_change]',\n                    'Clear Bruteforce Entries' => 'MISP/app/Console/cake Admin clearBruteforce [user_email]',\n                    'Run database update' => 'MISP/app/Console/cake Admin updateDatabase',\n                    'Update all JSON structures' => 'MISP/app/Console/cake Admin updateJSON',\n                    'Update Galaxy definitions' => 'MISP/app/Console/cake Admin updateGalaxies',\n                    'Update taxonomy definitions' => 'MISP/app/Console/cake Admin updateTaxonomies',\n                    'Update object templates' => 'MISP/app/Console/cake Admin updateObjectTemplates',\n                    'Update Warninglists' => 'MISP/app/Console/cake Admin updateWarningLists',\n                    'Update Noticelists' => 'MISP/app/Console/cake Admin updateNoticeLists',\n                    'Set default role' => 'MISP/app/Console/cake Admin setDefaultRole [role_id]'\n                ),\n                'description' => __('Certain administrative tasks are exposed to the API, these help with maintaining and configuring MISP in an automated way / via external tools.'),\n                'header' => __('Administering MISP via the CLI')\n            ),\n            'console_automation_tasks' => array(\n                'data' => array(\n                    'Pull' => 'MISP/app/Console/cake Server pull [user_id] [server_id] [full|update]',\n                    'Push' => 'MISP/app/Console/cake Server push [user_id] [server_id]',\n                    'Cache feeds for quick lookups' => 'MISP/app/Console/cake Server cacheFeed [user_id] [feed_id|all|csv|text|misp]',\n                    'Fetch feeds as local data' => 'MISP/app/Console/cake Server fetchFeed [user_id] [feed_id|all|csv|text|misp]',\n                    'Run enrichment' => 'MISP/app/Console/cake Event enrichEvent [user_id] [event_id] [json_encoded_module_list]'\n                ),\n                'description' => __('If you would like to automate tasks such as caching feeds or pulling from server instances, you can do it using the following command line tools. Simply execute the given commands via the command line / create cron jobs easily out of them.'),\n                'header' => __('Automating certain console tasks')\n            ),\n            'worker_management_tasks' => array(\n                'data' => array(\n                    'Get list of workers' => 'MISP/app/Console/cake Admin getWorkers [all|dead]',\n                    'Start a worker' => 'MISP/app/Console/cake Admin startWorker [queue_name]',\n                    'Restart a worker' => 'MISP/app/Console/cake Admin restartWorker [worker_pid]',\n                    'Kill a worker' => 'MISP/app/Console/cake Admin killWorker [worker_pid]',\n                ),\n                'description' => __('The background workers can be managed via the CLI in addition to the UI / API management tools'),\n                'header' => __('Managing the background workers')\n            )\n        );\n\n        $this->serverSettings = array(\n                'MISP' => array(\n                        'branch' => 1,\n                        'baseurl' => array(\n                                'level' => 0,\n                                'description' => __('The base url of the application (in the format https://www.mymispinstance.com). Several features depend on this setting being correctly set to function.'),\n                                'value' => '',\n                                'errorMessage' => __('The currenty set baseurl does not match the URL through which you have accessed the page. Disregard this if you are accessing the page via an alternate URL (for example via IP address).'),\n                                'test' => 'testBaseURL',\n                                'type' => 'string',\n                        ),\n                        'external_baseurl' => array(\n                                'level' => 0,\n                                'description' => __('The base url of the application (in the format https://www.mymispinstance.com) as visible externally/by other MISPs. MISP will encode this URL in sharing groups when including itself. If this value is not set, the baseurl is used as a fallback.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testURL',\n                                'type' => 'string',\n                        ),\n                        'live' => array(\n                                'level' => 0,\n                                'description' => __('Unless set to true, the instance will only be accessible by site admins.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testLive',\n                                'type' => 'boolean',\n                        ),\n                        'language' => array(\n                                'level' => 0,\n                                'description' => __('Select the language MISP should use. The default is english.'),\n                                'value' => 'eng',\n                                'errorMessage' => '',\n                                'test' => 'testLanguage',\n                                'type' => 'string',\n                                'optionsSource' => 'AvailableLanguages',\n                                'afterHook' => 'cleanCacheFiles'\n                        ),\n                        'enable_advanced_correlations' => array(\n                                'level' => 0,\n                                'description' => __('Enable some performance heavy correlations (currently CIDR correlation)'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'server_settings_skip_backup_rotate' => array(\n                            'level' => 1,\n                            'description' => __('Enable this setting to directly save the config.php file without first creating a temporary file and moving it to avoid concurency issues. Generally not recommended, but useful when for example other tools modify/maintain the config.php file.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'python_bin' => array(\n                                'level' => 1,\n                                'description' => __('It is highly recommended to install all the python dependencies in a virtualenv. The recommended location is: %s/venv', ROOT),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'null' => false,\n                                'test' => 'testForBinExec',\n                                'beforeHook' => 'beforeHookBinExec',\n                                'type' => 'string',\n                                'cli_only' => 1\n                        ),\n                        'disable_auto_logout' => array(\n                                'level' => 1,\n                                'description' => __('In some cases, a heavily used MISP instance can generate unwanted blackhole errors due to a high number of requests hitting the server. Disable the auto logout functionality to ease the burden on the system.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'ssdeep_correlation_threshold' => array(\n                            'level' => 1,\n                            'description' => __('Set the ssdeep score at which to consider two ssdeep hashes as correlating [1-100]'),\n                            'value' => 40,\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'numeric'\n                        ),\n                        'max_correlations_per_event' => array(\n                                'level' => 1,\n                                'description' => __('Sets the maximum number of correlations that can be fetched with a single event. For extreme edge cases this can prevent memory issues. The default value is 5k.'),\n                                'value' => 5000,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => true\n                        ),\n                        'maintenance_message' => array(\n                                'level' => 2,\n                                'description' => __('The message that users will see if the instance is not live.'),\n                                'value' => 'Great things are happening! MISP is undergoing maintenance, but will return shortly. You can contact the administration at $email.',\n                                'errorMessage' => __('If this is not set the default value will be used.'),\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'name' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'version' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'disable_cached_exports' => array(\n                                'level' => 1,\n                                'description' => __('Cached exports can take up a considerable amount of space and can be disabled instance wide using this setting. Disabling the cached exports is not recommended as it\\'s a valuable feature, however, if your server is having free space issues it might make sense to take this step.'),\n                                'value' => false,\n                                'null' => true,\n                                'errorMessage' => '',\n                                'test' => 'testDisableCache',\n                                'type' => 'boolean',\n                                'afterHook' => 'disableCacheAfterHook',\n                        ),\n                        'disable_threat_level' => array(\n                                'level' => 1,\n                                'description' => __('Disable displaying / modifications to the threat level altogether on the instance (deprecated field).'),\n                                'value' => false,\n                                'null' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'header' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footermidleft' => array(\n                                'level' => 2,\n                                'description' => __('Footer text prepending the \"Powered by MISP\" text.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footermidright' => array(\n                                'level' => 2,\n                                'description' => __('Footer text following the \"Powered by MISP\" text.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footerpart1' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footerpart2' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footer' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footerversion' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footer_logo' => array(\n                                'level' => 2 ,\n                                'description' => __('If set, this setting allows you to display a logo on the right side of the footer. Upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'home_logo' => array(\n                                'level' => 2 ,\n                                'description' => __('If set, this setting allows you to display a logo as the home icon. Upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'main_logo' => array(\n                                'level' => 2 ,\n                                'description' => __('If set, the image specified here will replace the main MISP logo on the login screen. Upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'org' => array(\n                                'level' => 1,\n                                'description' => __('The organisation tag of the hosting organisation. This is used in the e-mail subjects.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'host_org_id' => array(\n                                'level' => 0,\n                                'description' => __('The hosting organisation of this instance. If this is not selected then replication instances cannot be added.'),\n                                'value' => '0',\n                                'errorMessage' => '',\n                                'test' => 'testLocalOrg',\n                                'type' => 'numeric',\n                                'optionsSource' => 'LocalOrgs',\n                        ),\n                        'uuid' => array(\n                                'level' => 0,\n                                'description' => __('The MISP instance UUID. This UUID is used to identify this instance.'),\n                                'value' => '0',\n                                'errorMessage' => __('No valid UUID set'),\n                                'test' => 'testUuid',\n                                'type' => 'string'\n                        ),\n                        'logo' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'showorg' => array(\n                                'level' => 0,\n                                'description' => __('Setting this setting to \\'false\\' will hide all organisation names / logos.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'threatlevel_in_email_subject' => array(\n                                'level' => 2,\n                                'description' => __('Put the event threat level in the notification E-mail subject.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                            ),\n                        'email_subject_TLP_string' => array(\n                                'level' => 2,\n                                'description' => __('This is the TLP string for e-mails when email_subject_tag is not found.'),\n                                'value' => 'TLP Amber',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                            ),\n                        'email_subject_tag' => array(\n                                'level' => 2,\n                                'description' => __('If this tag is set on an event it\\'s value will be sent in the E-mail subject. If the tag is not set the email_subject_TLP_string will be used.'),\n                                'value' => 'tlp',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                            ),\n                        'email_subject_include_tag_name' => array(\n                                'level' => 2,\n                                'description' => __('Include in name of the email_subject_tag in the subject. When false only the tag value is used.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                            ),\n                        'taxii_sync' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'taxii_client_path' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'background_jobs' => array(\n                                'level' => 1,\n                                'description' => __('Enables the use of MISP\\'s background processing.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'attachments_dir' => array(\n                                'level' => 2,\n                                'description' => __('Directory where attachments are stored. MISP will NOT migrate the existing data if you change this setting. The only safe way to change this setting is in config.php, when MISP is not running, and after having moved/copied the existing data to the new location. This directory must already exist and be writable and readable by the MISP application.'),\n                                'value' =>  APP . '/files', # GUI display purpose only.\n                                'errorMessage' => '',\n                                'null' => false,\n                                'test' => 'testForWritableDir',\n                                'type' => 'string',\n                                'cli_only' => 1\n                        ),\n                        'cached_attachments' => array(\n                                'level' => 1,\n                                'description' => __('Allow the XML caches to include the encoded attachments.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'download_attachments_on_load' => array(\n                            'level' => 2,\n                            'description' => __('Always download attachments when loaded by a user in a browser'),\n                            'value' => true,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                        ),\n                        'email' => array(\n                                'level' => 0,\n                                'description' => __('The e-mail address that MISP should use for all notifications'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'disable_emailing' => array(\n                                'level' => 0,\n                                'description' => __('You can disable all e-mailing using this setting. When enabled, no outgoing e-mails will be sent by MISP.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'null' => true,\n                                'test' => 'testDisableEmail',\n                                'type' => 'boolean',\n                        ),\n                        'contact' => array(\n                                'level' => 1,\n                                'description' => __('The e-mail address that MISP should include as a contact address for the instance\\'s support team.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'dns' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'cveurl' => array(\n                                'level' => 1,\n                                'description' => __('Turn Vulnerability type attributes into links linking to the provided CVE lookup'),\n                                'value' => 'http://cve.circl.lu/cve/',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'cweurl' => array(\n                                'level' => 1,\n                                'description' => __('Turn Weakness type attributes into links linking to the provided CWE lookup'),\n                                'value' => 'http://cve.circl.lu/cwe/',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'disablerestalert' => array(\n                                'level' => 1,\n                                'description' => __('This setting controls whether notification e-mails will be sent when an event is created via the REST interface. It might be a good idea to disable this setting when first setting up a link to another instance to avoid spamming your users during the initial pull. Quick recap: True = Emails are NOT sent, False = Emails are sent on events published via sync / REST.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'extended_alert_subject' => array(\n                                'level' => 1,\n                                'description' => __('enabling this flag will allow the event description to be transmitted in the alert e-mail\\'s subject. Be aware that this is not encrypted by GnuPG, so only enable it if you accept that part of the event description will be sent out in clear-text.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'default_event_distribution' => array(\n                                'level' => 0,\n                                'description' => __('The default distribution setting for events (0-3).'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'options' => array('0' => 'Your organisation only', '1' => 'This community only', '2' => 'Connected communities', '3' => 'All communities'),\n                        ),\n                        'default_attribute_distribution' => array(\n                                'level' => 0,\n                                'description' => __('The default distribution setting for attributes, set it to \\'event\\' if you would like the attributes to default to the event distribution level. (0-3 or \"event\")'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'options' => array('0' => 'Your organisation only', '1' => 'This community only', '2' => 'Connected communities', '3' => 'All communities', 'event' => 'Inherit from event'),\n                        ),\n                        'default_event_threat_level' => array(\n                                'level' => 1,\n                                'description' => __('The default threat level setting when creating events.'),\n                                'value' => 4,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'options' => array('1' => 'High', '2' => 'Medium', '3' => 'Low', '4' => 'undefined'),\n                        ),\n                        'default_event_tag_collection' => array(\n                            'level' => 0,\n                            'description' => __('The tag collection to be applied to all events created manually.'),\n                            'value' => 0,\n                            'errorMessage' => '',\n                            'test' => 'testTagCollections',\n                            'type' => 'numeric',\n                            'optionsSource' => 'TagCollections',\n                        ),\n                        'tagging' => array(\n                                'level' => 1,\n                                'description' => __('Enable the tagging feature of MISP. This is highly recommended.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'full_tags_on_event_index' => array(\n                                'level' => 2,\n                                'description' => __('Show the full tag names on the event index.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'options' => array(0 => 'Minimal tags', 1 => 'Full tags', 2 => 'Shortened tags'),\n                        ),\n                        'welcome_text_top' => array(\n                                'level' => 2,\n                                'description' => __('Used on the login page, before the MISP logo'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'welcome_text_bottom' => array(\n                                'level' => 2,\n                                'description' => __('Used on the login page, after the MISP logo'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'welcome_logo' => array(\n                                'level' => 2,\n                                'description' => __('Used on the login page, to the left of the MISP logo, upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'welcome_logo2' => array(\n                                'level' => 2,\n                                'description' => __('Used on the login page, to the right of the MISP logo, upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'title_text' => array(\n                            'level' => 2,\n                            'description' => __('Used in the page title, after the name of the page'),\n                            'value' => 'MISP',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'take_ownership_xml_import' => array(\n                                'level' => 2,\n                                'description' => __('Allows users to take ownership of an event uploaded via the \"Add MISP XML\" button. This allows spoofing the creator of a manually imported event, also breaking possibly breaking the original intended releasability. Synchronising with an instance that has a different creator for the same event can lead to unwanted consequences.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'terms_download' => array(\n                                'level' => 2,\n                                'description' => __('Choose whether the terms and conditions should be displayed inline (false) or offered as a download (true)'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'terms_file' => array(\n                                'level' => 2,\n                                'description' => __('The filename of the terms and conditions file. Make sure that the file is located in your MISP/app/files/terms directory'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForTermsFile',\n                                'type' => 'string'\n                        ),\n                        'showorgalternate' => array(\n                                'level' => 2,\n                                'description' => __('True enables the alternate org fields for the event index (source org and member org) instead of the traditional way of showing only an org field. This allows users to see if an event was uploaded by a member organisation on their MISP instance, or if it originated on an interconnected instance.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'unpublishedprivate' => array(\n                                'level' => 2,\n                                'description' => __('True will deny access to unpublished events to users outside the organization of the submitter except site admins.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'newUserText' => array(\n                                'level' => 1,\n                                'bigField' => true,\n                                'description' => __('The message sent to the user after account creation (has to be sent manually from the administration interface). Use \\\\n for line-breaks. The following variables will be automatically replaced in the text: $password = a new temporary password that MISP generates, $username = the user\\'s e-mail address, $misp = the url of this instance, $org = the organisation that the instance belongs to, as set in MISP.org, $contact = the e-mail address used to contact the support team, as set in MISP.contact. For example, \"the password for $username is $password\" would appear to a user with the e-mail address user@misp.org as \"the password for user@misp.org is hNamJae81\".'),\n                                'value' => 'Dear new MISP user,\\n\\nWe would hereby like to welcome you to the $org MISP community.\\n\\n Use the credentials below to log into MISP at $misp, where you will be prompted to manually change your password to something of your own choice.\\n\\nUsername: $username\\nPassword: $password\\n\\nIf you have any questions, don\\'t hesitate to contact us at: $contact.\\n\\nBest regards,\\nYour $org MISP support team',\n                                'errorMessage' => '',\n                                'test' => 'testPasswordResetText',\n                                'type' => 'string'\n                        ),\n                        'passwordResetText' => array(\n                                'level' => 1,\n                                'bigField' => true,\n                                'description' => __('The message sent to the users when a password reset is triggered. Use \\\\n for line-breaks. The following variables will be automatically replaced in the text: $password = a new temporary password that MISP generates, $username = the user\\'s e-mail address, $misp = the url of this instance, $contact = the e-mail address used to contact the support team, as set in MISP.contact. For example, \"the password for $username is $password\" would appear to a user with the e-mail address user@misp.org as \"the password for user@misp.org is hNamJae81\".'),\n                                'value' => 'Dear MISP user,\\n\\nA password reset has been triggered for your account. Use the below provided temporary password to log into MISP at $misp, where you will be prompted to manually change your password to something of your own choice.\\n\\nUsername: $username\\nYour temporary password: $password\\n\\nIf you have any questions, don\\'t hesitate to contact us at: $contact.\\n\\nBest regards,\\nYour $org MISP support team',\n                                'errorMessage' => '',\n                                'test' => 'testPasswordResetText',\n                                'type' => 'string'\n                        ),\n                        'enableEventBlacklisting' => array(\n                                'level' => 1,\n                                'description' => __('Since version 2.3.107 you can start blacklisting event UUIDs to prevent them from being pushed to your instance. This functionality will also happen silently whenever an event is deleted, preventing a deleted event from being pushed back from another instance.'),\n                                'value' => true,\n                                'type' => 'boolean',\n                                'test' => 'testBool'\n                        ),\n                        'enableOrgBlacklisting' => array(\n                                'level' => 1,\n                                'description' => __('Blacklisting organisation UUIDs to prevent the creation of any event created by the blacklisted organisation.'),\n                                'value' => true,\n                                'type' => 'boolean',\n                                'test' => 'testBool'\n                        ),\n                        'log_client_ip' => array(\n                                'level' => 1,\n                                'description' => __('If enabled, all log entries will include the IP address of the user.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'beforeHook' => 'ipLogBeforeHook'\n                        ),\n                        'log_auth' => array(\n                                'level' => 1,\n                                'description' => __('If enabled, MISP will log all successful authentications using API keys. The requested URLs are also logged.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'log_skip_db_logs_completely' => array(\n                            'level' => 0,\n                            'description' => __('This functionality allows you to completely disable any logs from being saved in your SQL backend. This is HIGHLY advised against, you lose all the functionalities provided by the audit log subsystem along with the event history (as these are built based on the logs on the fly). Only enable this if you understand and accept the associated risks.'),\n                            'value' => false,\n                            'errorMessage' => __('Logging has now been disabled - your audit logs will not capture failed authentication attempts, your event history logs are not being populated and no system maintenance messages are being logged.'),\n                            'test' => 'testBoolFalse',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'log_paranoid' => array(\n                                'level' => 0,\n                                'description' => __('If this functionality is enabled all page requests will be logged. Keep in mind this is extremely verbose and will become a burden to your database.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'log_paranoid_skip_db' => array(\n                                'level' => 0,\n                                'description' => __('You can decide to skip the logging of the paranoid logs to the database.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testParanoidSkipDb',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'log_paranoid_include_post_body' => array(\n                                'level' => 0,\n                                'description' => __('If paranoid logging is enabled, include the POST body in the entries.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'delegation' => array(\n                                'level' => 1,\n                                'description' => __('This feature allows users to create org only events and ask another organisation to take ownership of the event. This allows organisations to remain anonymous by asking a partner to publish an event for them.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'showCorrelationsOnIndex' => array(\n                                'level' => 1,\n                                'description' => __('When enabled, the number of correlations visible to the currently logged in user will be visible on the event index UI. This comes at a performance cost but can be very useful to see correlating events at a glance.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'showProposalsCountOnIndex' => array(\n                                'level' => 1,\n                                'description' => __('When enabled, the number of proposals for the events are shown on the index.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'showSightingsCountOnIndex' => array(\n                                'level' => 1,\n                                'description' => __('When enabled, the aggregate number of attribute sightings within the event becomes visible to the currently logged in user on the event index UI.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'showDiscussionsCountOnIndex' => array(\n                                'level' => 1,\n                                'description' => __('When enabled, the aggregate number of discussion posts for the event becomes visible to the currently logged in user on the event index UI.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'disableUserSelfManagement' => array(\n                                'level' => 1,\n                                'description' => __('When enabled only Org and Site admins can edit a user\\'s profile.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false,\n\n                        ),\n                        'block_event_alert' => array(\n                                'level' => 1,\n                                'description' => __('Enable this setting to start blocking alert e-mails for events with a certain tag. Define the tag in MISP.block_event_alert_tag.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false,\n                        ),\n                        'block_event_alert_tag' => array(\n                                'level' => 1,\n                                'description' => __('If the MISP.block_event_alert setting is set, alert e-mails for events tagged with the tag defined by this setting will be blocked.'),\n                                'value' => 'no-alerts=\"true\"',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => false,\n                        ),\n                        'org_alert_threshold' => array(\n                                'level' => 1,\n                                'description' => __('Set a value to limit the number of email alerts that events can generate per creator organisation (for example, if an organisation pushes out 2000 events in one shot, only alert on the first 20).'),\n                                'value' => 0,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => true,\n                        ),\n                        'block_old_event_alert' => array(\n                                'level' => 1,\n                                'description' => __('Enable this setting to start blocking alert e-mails for old events. The exact timing of what constitutes an old event is defined by MISP.block_old_event_alert_age.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false,\n                        ),\n                        'block_old_event_alert_age' => array(\n                                'level' => 1,\n                                'description' => __('If the MISP.block_old_event_alert setting is set, this setting will control how old an event can be for it to be alerted on. The \"timestamp\" field of the event is used. Expected format: integer, in days'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => false,\n                        ),\n                        'block_old_event_alert_by_date' => array(\n                                'level' => 1,\n                                'description' => __('If the MISP.block_old_event_alert setting is set, this setting will control the threshold for the event.date field, indicating how old an event can be for it to be alerted on. The \"date\" field of the event is used. Expected format: integer, in days'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => false,\n                        ),\n                        'tmpdir' => array(\n                                'level' => 1,\n                                'description' => __('Please indicate the temp directory you wish to use for certain functionalities in MISP. By default this is set to /tmp and will be used among others to store certain temporary files extracted from imports during the import process.'),\n                                'value' => '/tmp',\n                                'errorMessage' => '',\n                                'test' => 'testForPath',\n                                'type' => 'string',\n                                'null' => true,\n                                'cli_only' => 1\n                        ),\n                        'custom_css' => array(\n                                'level' => 2,\n                                'description' => __('If you would like to customise the css, simply drop a css file in the /var/www/MISP/app/webroot/css directory and enter the name here.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForStyleFile',\n                                'type' => 'string',\n                                'null' => true,\n                        ),\n                        'proposals_block_attributes' => array(\n                                'level' => 0,\n                                'description' => __('Enable this setting to allow blocking attributes from to_ids sensitive exports if a proposal has been made to it to remove the IDS flag or to remove the attribute altogether. This is a powerful tool to deal with false-positives efficiently.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false,\n                        ),\n                        'incoming_tags_disabled_by_default' => array(\n                                'level' => 1,\n                                'description' => __('Enable this settings if new tags synced / added via incoming events from any source should not be selectable by users by default.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false\n                        ),\n                        'completely_disable_correlation' => array(\n                                'level' => 0,\n                                'description' => __('*WARNING* This setting will completely disable the correlation on this instance and remove any existing saved correlations. Enabling this will trigger a full recorrelation of all data which is an extremely long and costly procedure. Only enable this if you know what you\\'re doing.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                                'null' => true,\n                                'afterHook' => 'correlationAfterHook',\n                        ),\n                        'allow_disabling_correlation' => array(\n                                'level' => 0,\n                                'description' => __('*WARNING* This setting will give event creators the possibility to disable the correlation of individual events / attributes that they have created.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'redis_host' => array(\n                            'level' => 0,\n                            'description' => __('The host running the redis server to be used for generic MISP tasks such as caching. This is not to be confused by the redis server used by the background processing.'),\n                            'value' => '127.0.0.1',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'redis_port' => array(\n                            'level' => 0,\n                            'description' => __('The port used by the redis server to be used for generic MISP tasks such as caching. This is not to be confused by the redis server used by the background processing.'),\n                            'value' => 6379,\n                            'errorMessage' => '',\n                            'test' => 'testForNumeric',\n                            'type' => 'numeric'\n                        ),\n                        'redis_database' => array(\n                            'level' => 0,\n                            'description' => __('The database on the redis server to be used for generic MISP tasks. If you run more than one MISP instance, please make sure to use a different database on each instance.'),\n                            'value' => 13,\n                            'errorMessage' => '',\n                            'test' => 'testForNumeric',\n                            'type' => 'numeric'\n                        ),\n                        'redis_password' => array(\n                            'level' => 0,\n                            'description' => __('The password on the redis server (if any) to be used for generic MISP tasks.'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => null,\n                            'type' => 'string',\n                            'redacted' => true\n                        ),\n                        'event_view_filter_fields' => array(\n                            'level' => 2,\n                            'description' => __('Specify which fields to filter on when you search on the event view. Default values are : \"id, uuid, value, comment, type, category, Tag.name\"'),\n                            'value' => 'id, uuid, value, comment, type, category, Tag.name',\n                            'errorMessage' => '',\n                            'test' => null,\n                            'type' => 'string',\n                        ),\n                        'manage_workers' => array(\n                                'level' => 2,\n                                'description' => __('Set this to false if you would like to disable MISP managing its own worker processes (for example, if you are managing the workers with a systemd unit).'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'deadlock_avoidance' => array(\n                                'level' => 1,\n                                'description' => __('Only enable this if you have some tools using MISP with extreme high concurency. General performance will be lower as normal as certain transactional queries are avoided in favour of shorter table locks.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'updateTimeThreshold' => array(\n                               'level' => 1,\n                               'description' => __('Sets the minimum time before being able to re-trigger an update if the previous one failed. (safe guard to avoid starting the same update multiple time)'),\n                               'value' => '7200',\n                               'test' => 'testForNumeric',\n                               'type' => 'numeric',\n                               'null' => true\n                       )\n                ),\n                'GnuPG' => array(\n                        'branch' => 1,\n                        'binary' => array(\n                                'level' => 2,\n                                'description' => __('The location of the GnuPG executable. If you would like to use a different GnuPG executable than /usr/bin/gpg, you can set it here. If the default is fine, just keep the setting suggested by MISP.'),\n                                'value' => '/usr/bin/gpg',\n                                'errorMessage' => '',\n                                'test' => 'testForGPGBinary',\n                                'type' => 'string',\n                                'cli_only' => 1\n                        ),\n                        'onlyencrypted' => array(\n                                'level' => 0,\n                                'description' => __('Allow (false) unencrypted e-mails to be sent to users that don\\'t have a GnuPG key.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'bodyonlyencrypted' => array(\n                                'level' => 2,\n                                'description' => __('Allow (false) the body of unencrypted e-mails to contain details about the event.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'sign' => array(\n                                'level' => 2,\n                                'description' => __('Enable the signing of GnuPG emails. By default, GnuPG emails are signed'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'email' => array(\n                                'level' => 0,\n                                'description' => __('The e-mail address that the instance\\'s GnuPG key is tied to.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'password' => array(\n                                'level' => 1,\n                                'description' => __('The password (if it is set) of the GnuPG key of the instance.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'redacted' => true\n                        ),\n                        'homedir' => array(\n                                'level' => 0,\n                                'description' => __('The location of the GnuPG homedir.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        )\n                ),\n                'SMIME' => array(\n                        'branch' => 1,\n                        'enabled' => array(\n                                'level' => 2,\n                                'description' => __('Enable SMIME encryption. The encryption posture of the GnuPG.onlyencrypted and GnuPG.bodyonlyencrypted settings are inherited if SMIME is enabled.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'email' => array(\n                                'level' => 2,\n                                'description' => __('The e-mail address that the instance\\'s SMIME key is tied to.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'cert_public_sign' => array(\n                                'level' => 2,\n                                'description' => __('The location of the public half of the signing certificate.'),\n                                'value' => '/var/www/MISP/.smime/email@address.com.pem',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'key_sign' => array(\n                                'level' => 2,\n                                'description' => __('The location of the private half of the signing certificate.'),\n                                'value' => '/var/www/MISP/.smime/email@address.com.key',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'password' => array(\n                                'level' => 2,\n                                'description' => __('The password (if it is set) of the SMIME key of the instance.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'redacted' => true\n                        ),\n                ),\n                'Proxy' => array(\n                        'branch' => 1,\n                        'host' => array(\n                                'level' => 2,\n                                'description' => __('The hostname of an HTTP proxy for outgoing sync requests. Leave empty to not use a proxy.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'port' => array(\n                                'level' => 2,\n                                'description' => __('The TCP port for the HTTP proxy.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                        ),\n                        'method' => array(\n                                'level' => 2,\n                                'description' => __('The authentication method for the HTTP proxy. Currently supported are Basic or Digest. Leave empty for no proxy authentication.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'user' => array(\n                                'level' => 2,\n                                'description' => __('The authentication username for the HTTP proxy.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'password' => array(\n                                'level' => 2,\n                                'description' => __('The authentication password for the HTTP proxy.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                ),\n                'Security' => array(\n                        'branch' => 1,\n                        'salt' => array(\n                                'level' => 0,\n                                'description' => __('The salt used for the hashed passwords. You cannot reset this from the GUI, only manually from the settings.php file. Keep in mind, this will invalidate all passwords in the database.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testSalt',\n                                'type' => 'string',\n                                'editable' => false,\n                                'redacted' => true\n                        ),\n                        'syslog' => array(\n                            'level' => 0,\n                            'description' => __('Enable this setting to pass all audit log entries directly to syslog. Keep in mind, this is verbose and will include user, organisation, event data.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'password_policy_length' => array(\n                                'level' => 2,\n                                'description' => __('Password length requirement. If it is not set or it is set to 0, then the default value is assumed (12).'),\n                                'value' => '12',\n                                'errorMessage' => '',\n                                'test' => 'testPasswordLength',\n                                'type' => 'numeric',\n                        ),\n                        'password_policy_complexity' => array(\n                                'level' => 2,\n                                'description' => __('Password complexity requirement. Leave it empty for the default setting (3 out of 4, with either a digit or a special char) or enter your own regex. Keep in mind that the length is checked in another key. Default (simple 3 out of 4 or minimum 16 characters): /^((?=.*\\d)|(?=.*\\W+))(?![\\n])(?=.*[A-Z])(?=.*[a-z]).*$|.{16,}/'),\n                                'value' => '/^((?=.*\\d)|(?=.*\\W+))(?![\\n])(?=.*[A-Z])(?=.*[a-z]).*$|.{16,}/',\n                                'errorMessage' => '',\n                                'test' => 'testPasswordRegex',\n                                'type' => 'string',\n                        ),\n                        'require_password_confirmation' => array(\n                            'level' => 1,\n                            'description' => __('Enabling this setting will require users to submit their current password on any edits to their profile (including a triggered password change). For administrators, the confirmation will be required when changing the profile of any user. Could potentially mitigate an attacker trying to change a compromised user\\'s password in order to establish persistance, however, enabling this feature will be highly annoying to users.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'sanitise_attribute_on_delete' => array(\n                            'level' => 1,\n                            'description' => __('Enabling this setting will sanitise the contents of an attribute on a soft delete'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'hide_organisation_index_from_users' => array(\n                            'level' => 1,\n                            'description' => __('Enabling this setting will block the organisation index from being visible to anyone besides site administrators on the current instance. Keep in mind that users can still see organisations that produce data via events, proposals, event history log entries, etc.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'allow_unsafe_apikey_named_param' => array(\n                            'level' => 0,\n                            'description' => __('Allows passing the API key via the named url parameter \"apikey\" - highly recommended not to enable this, but if you have some dodgy legacy tools that cannot pass the authorization header it can work as a workaround. Again, only use this as a last resort.'),\n                            'value' => false,\n                            'errorMessage' => __('You have enabled the passing of API keys via URL parameters. This is highly recommended against, do you really want to reveal APIkeys in your logs?...'),\n                            'test' => 'testBoolFalse',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'allow_cors' => array(\n                            'level' => 1,\n                            'description' => __('Allow cross-origin requests to this instance, matching origins given in Security.cors_origins. Set to false to totally disable'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'cors_origins' => array(\n                            'level' => 1,\n                            'description' => __('Set the origins from which MISP will allow cross-origin requests. Useful for external integration. Comma seperate if you need more than one.'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'null' => true\n                        ),\n                        'sync_audit' => array(\n                            'level' => 1,\n                            'description' => __('Enable this setting to create verbose logs of synced event data for debugging reasons. Logs are saved in your MISP directory\\'s app/files/scripts/tmp/ directory.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBoolFalse',\n                            'type' => 'boolean',\n                            'null' => true\n                        )\n                ),\n                'SecureAuth' => array(\n                        'branch' => 1,\n                        'amount' => array(\n                                'level' => 0,\n                                'description' => __('The number of tries a user can try to login and fail before the bruteforce protection kicks in.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'string',\n                        ),\n                        'expire' => array(\n                                'level' => 0,\n                                'description' => __('The duration (in seconds) of how long the user will be locked out when the allowed number of login attempts are exhausted.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'string',\n                        ),\n                ),\n                'Session' => array(\n                        'branch' => 1,\n                        'autoRegenerate' => array(\n                                'level' => 0,\n                                'description' => __('Set to true to automatically regenerate sessions after x number of requests. This might lead to the user getting de-authenticated and is frustrating in general, so only enable it if you really need to regenerate sessions. (Not recommended)'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                        ),\n                        'checkAgent' => array(\n                                'level' => 0,\n                                'description' => __('Set to true to check for the user agent string in each request. This can lead to occasional logouts (not recommended).'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                        ),\n                        'defaults' => array(\n                                'level' => 0,\n                                'description' => __('The session type used by MISP. The default setting is php, which will use the session settings configured in php.ini for the session data (supported options: php, database). The recommended option is php and setting your PHP up to use redis sessions via your php.ini. Just add \\'session.save_handler = redis\\' and \"session.save_path = \\'tcp://localhost:6379\\'\" (replace the latter with your redis connection) to '),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForSessionDefaults',\n                                'type' => 'string',\n                                'options' => array('php' => 'php', 'database' => 'database', 'cake' => 'cake', 'cache' => 'cache'),\n                        ),\n                        'timeout' => array(\n                                'level' => 0,\n                                'description' => __('The timeout duration of sessions (in MINUTES). 0 does not mean infinite for the PHP session handler, instead sessions will invalidate immediately.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'string'\n                        ),\n                        'cookieTimeout' => array(\n                                'level' => 0,\n                                'description' => __('The expiration of the cookie (in MINUTES). The session timeout gets refreshed frequently, however the cookies do not. Generally it is recommended to have a much higher cookie_timeout than timeout.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCookieTimeout',\n                                'type' => 'numeric'\n                        )\n                ),\n                'Plugin' => array(\n                        'branch' => 1,\n                        'RPZ_policy' => array(\n                            'level' => 2,\n                            'description' => __('The default policy action for the values added to the RPZ.'),\n                            'value' => 1,\n                            'errorMessage' => '',\n                            'test' => 'testForRPZBehaviour',\n                            'type' => 'numeric',\n                            'options' => array(0 => 'DROP', 1 => 'NXDOMAIN', 2 => 'NODATA', 3 => 'Local-Data', 4 => 'PASSTHRU', 5 => 'TCP-only' ),\n                        ),\n                        'RPZ_walled_garden' => array(\n                            'level' => 2,\n                            'description' => __('The default walled garden used by the RPZ export if the Local-Data policy setting is picked for the export.'),\n                            'value' => '127.0.0.1',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'RPZ_serial' => array(\n                                'level' => 2,\n                                'description' => __('The serial in the SOA portion of the zone file. (numeric, best practice is yyyymmddrr where rr is the two digit sub-revision of the file. $date will automatically get converted to the current yyyymmdd, so $date00 is a valid setting). Setting it to $time will give you an unixtime-based serial (good then you need more than 99 revisions per day).'),\n                                'value' => '$date00',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZSerial',\n                                'type' => 'string',\n                        ),\n                        'RPZ_refresh' => array(\n                                'level' => 2,\n                                'description' => __('The refresh specified in the SOA portion of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '2h',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_retry' => array(\n                                'level' => 2,\n                                'description' => __('The retry specified in the SOA portion of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '30m',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_expiry' => array(\n                                'level' => 2,\n                                'description' => __('The expiry specified in the SOA portion of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '30d',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_minimum_ttl' => array(\n                                'level' => 2,\n                                'description' => __('The minimum TTL specified in the SOA portion of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '1h',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_ttl' => array(\n                                'level' => 2,\n                                'description' => __('The TTL of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '1w',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_ns' => array(\n                                'level' => 2,\n                                'description' => __('Nameserver'),\n                                'value' => 'localhost.',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'RPZ_ns_alt' => array(\n                            'level' => 2,\n                            'description' => __('Alternate nameserver'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                    ),\n                        'RPZ_email' => array(\n                            'level' => 2,\n                            'description' => __('The e-mail address specified in the SOA portion of the zone file.'),\n                            'value' => 'root.localhost',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'Kafka_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the Kafka pub feature of MISP. Make sure that you install the requirements for the plugin to work. Refer to the installation instructions for more information.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                        ),\n                        'Kafka_brokers' => array(\n                            'level' => 2,\n                            'description' => __('A comma separated list of Kafka bootstrap brokers'),\n                            'value' => 'kafka:9092',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'Kafka_rdkafka_config' => array(\n                            'level' => 2,\n                            'description' => __('A path to an ini file with configuration options to be passed to rdkafka. Section headers in the ini file will be ignored.'),\n                            'value' => '/etc/rdkafka.ini',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'Kafka_include_attachments' => array(\n                            'level' => 2,\n                            'description' => __('Enable this setting to include the base64 encoded payloads of malware-samples/attachments in the output.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_event_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any event creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_event_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing event creations/edits/deletions.'),\n                            'value' => 'misp_event',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_event_publish_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('If enabled it will publish to Kafka the event at the time that the event gets published in MISP. Event actions (creation or edit) will not be published to Kafka.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_event_publish_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing event information on publish.'),\n                            'value' => 'misp_event_publish',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_object_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any object creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_object_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing object creations/edits/deletions.'),\n                            'value' => 'misp_object',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_object_reference_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any object reference creations/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_object_reference_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing object reference creations/deletions.'),\n                            'value' => 'misp_object_reference',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_attribute_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any attribute creations/edits/soft deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_attribute_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing attribute creations/edits/soft deletions.'),\n                            'value' => 'misp_attribute',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_shadow_attribute_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any proposal creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_shadow_attribute_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing proposal creations/edits/deletions.'),\n                            'value' => 'misp_shadow_attribute',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_tag_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any tag creations/edits/deletions as well as tags being attached to / detached from various MISP elements.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_tag_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing tag creations/edits/deletions as well as tags being attached to / detached from various MISP elements.'),\n                            'value' => 'misp_tag',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_sighting_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new sightings.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_sighting_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing sightings.'),\n                            'value' => 'misp_sighting',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_user_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new/modified users.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_user_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing new/modified users.'),\n                            'value' => 'misp_user',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_organisation_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new/modified organisations.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_organisation_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing new/modified organisations.'),\n                            'value' => 'misp_organisation',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_audit_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of log entries. Keep in mind, this can get pretty verbose depending on your logging settings.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_audit_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing log entries.'),\n                            'value' => 'misp_audit',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'ZeroMQ_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the pub/sub feature of MISP. Make sure that you install the requirements for the plugin to work. Refer to the installation instructions for more information.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_port' => array(\n                            'level' => 2,\n                            'description' => __('The port that the pub/sub feature will use.'),\n                            'value' => 50000,\n                            'errorMessage' => '',\n                            'test' => 'testForZMQPortNumber',\n                            'type' => 'numeric',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_host' => array(\n                            'level' => 2,\n                            'description' => __('Location of the Redis db used by MISP and the Python PUB script to queue data to be published.'),\n                            'value' => 'localhost',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_port' => array(\n                            'level' => 2,\n                            'description' => __('The port that Redis is listening on.'),\n                            'value' => 6379,\n                            'errorMessage' => '',\n                            'test' => 'testForPortNumber',\n                            'type' => 'numeric',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_password' => array(\n                            'level' => 2,\n                            'description' => __('The password, if set for Redis.'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_database' => array(\n                            'level' => 2,\n                            'description' => __('The database to be used for queuing messages for the pub/sub functionality.'),\n                            'value' => 1,\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_namespace' => array(\n                            'level' => 2,\n                            'description' => __('The namespace to be used for queuing messages for the pub/sub functionality.'),\n                            'value' => 'mispq',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_include_attachments' => array(\n                            'level' => 2,\n                            'description' => __('Enable this setting to include the base64 encoded payloads of malware-samples/attachments in the output.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_event_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any event creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_object_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any object creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_object_reference_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any object reference creations/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_attribute_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any attribute creations/edits/soft deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_tag_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any tag creations/edits/deletions as well as tags being attached to / detached from various MISP elements.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_sighting_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new sightings to the ZMQ pubsub feed.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_user_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new/modified users to the ZMQ pubsub feed.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_organisation_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new/modified organisations to the ZMQ pubsub feed.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_audit_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of log entries to the ZMQ pubsub feed. Keep in mind, this can get pretty verbose depending on your logging settings.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ElasticSearch_logging_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enabled logging to an ElasticSearch instance'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ElasticSearch_connection_string' => array(\n                            'level' => 2,\n                            'description' => __('The URL(s) at which to access ElasticSearch - comma separate if you want to have more than one.'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'ElasticSearch_log_index' => array(\n                            'level' => 2,\n                            'description' => __('The index in which to place logs'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'S3_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables uploading of malware samples to S3 rather than to disk (WARNING: Get permission from amazon first!)'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'S3_bucket_name' => array(\n                            'level' => 2,\n                            'description' => __('Bucket name to upload to'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'S3_region' => array(\n                            'level' => 2,\n                            'description' => __('Region in which your S3 bucket resides'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'S3_aws_access_key' => array(\n                            'level' => 2,\n                            'description' => __('AWS key to use when uploading samples (WARNING: It\\' highly recommended that you use EC2 IAM roles if at all possible)'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'S3_aws_secret_key' => array(\n                            'level' => 2,\n                            'description' => __('AWS secret key to use when uploading samples'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Sightings_policy' => array(\n                            'level' => 1,\n                            'description' => __('This setting defines who will have access to seeing the reported sightings. The default setting is the event owner alone (in addition to everyone seeing their own contribution) with the other options being Sighting reporters (meaning the event owner and anyone that provided sighting data about the event) and Everyone (meaning anyone that has access to seeing the event / attribute).'),\n                            'value' => 0,\n                            'errorMessage' => '',\n                            'test' => 'testForSightingVisibility',\n                            'type' => 'numeric',\n                            'options' => array(0 => 'Event Owner', 1 => 'Sighting reporters', 2 => 'Everyone'),\n                        ),\n                        'Sightings_anonymise' => array(\n                            'level' => 1,\n                            'description' => __('Enabling the anonymisation of sightings will simply aggregate all sightings instead of showing the organisations that have reported a sighting. Users will be able to tell the number of sightings their organisation has submitted and the number of sightings for other organisations'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                        ),\n                        'Sightings_range' => array(\n                            'level' => 1,\n                            'description' => __('Set the range in which sightings will be taken into account when generating graphs. For example a sighting with a sighted_date of 7 years ago might not be relevant anymore. Setting given in number of days, default is 365 days'),\n                            'value' => 365,\n                            'errorMessage' => '',\n                            'test' => 'testForNumeric',\n                            'type' => 'numeric'\n                        ),\n                        'CustomAuth_enable' => array(\n                                'level' => 2,\n                                'description' => __('Enable this functionality if you would like to handle the authentication via an external tool and authenticate with MISP using a custom header.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true,\n                                'beforeHook' => 'customAuthBeforeHook'\n                        ),\n                        'CustomAuth_header' => array(\n                                'level' => 2,\n                                'description' => __('Set the header that MISP should look for here. If left empty it will default to the Authorization header.'),\n                                'value' => 'Authorization',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_use_header_namespace' => array(\n                                'level' => 2,\n                                'description' => __('Use a header namespace for the auth header - default setting is enabled'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'CustomAuth_header_namespace' => array(\n                                'level' => 2,\n                                'description' => __('The default header namespace for the auth header - default setting is HTTP_'),\n                                'value' => 'HTTP_',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_required' => array(\n                                'level' => 2,\n                                'description' => __('If this setting is enabled then the only way to authenticate will be using the custom header. Altnertatively you can run in mixed mode that will log users in via the header if found, otherwise users will be redirected to the normal login page.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'CustomAuth_only_allow_source' => array(\n                                'level' => 2,\n                                'description' => __('If you are using an external tool to authenticate with MISP and would like to only allow the tool\\'s url as a valid point of entry then set this field. '),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_name' => array(\n                                'level' => 2,\n                                'description' => __('The name of the authentication method, this is cosmetic only and will be shown on the user creation page and logs.'),\n                                'value' => 'External authentication',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_disable_logout' => array(\n                                'level' => 2,\n                                'description' => __('Disable the logout button for users authenticate with the external auth mechanism.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Enrichment_services_enable' => array(\n                            'level' => 0,\n                            'description' => __('Enable/disable the enrichment services'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Enrichment_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the enrichment services'),\n                                'value' => 10,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Import_services_enable' => array(\n                                'level' => 0,\n                                'description' => __('Enable/disable the import services'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Import_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the import services'),\n                                'value' => 10,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Import_services_url' => array(\n                                'level' => 1,\n                                'description' => __('The url used to access the import services. By default, it is accessible at http://127.0.0.1:6666'),\n                                'value' => 'http://127.0.0.1',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string'\n                        ),\n                        'Import_services_port' => array(\n                                'level' => 1,\n                                'description' => __('The port used to access the import services. By default, it is accessible at 127.0.0.1:6666'),\n                                'value' => '6666',\n                                'errorMessage' => '',\n                                'test' => 'testForPortNumber',\n                                'type' => 'numeric'\n                        ),\n                        'Export_services_url' => array(\n                                'level' => 1,\n                                'description' => __('The url used to access the export services. By default, it is accessible at http://127.0.0.1:6666'),\n                                'value' => 'http://127.0.0.1',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string'\n                        ),\n                        'Export_services_port' => array(\n                                'level' => 1,\n                                'description' => __('The port used to access the export services. By default, it is accessible at 127.0.0.1:6666'),\n                                'value' => '6666',\n                                'errorMessage' => '',\n                                'test' => 'testForPortNumber',\n                                'type' => 'numeric'\n                        ),\n                        'Export_services_enable' => array(\n                                'level' => 0,\n                                'description' => __('Enable/disable the export services'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Export_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the export services'),\n                                'value' => 10,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Enrichment_hover_enable' => array(\n                                'level' => 0,\n                                'description' => __('Enable/disable the hover over information retrieved from the enrichment modules'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Enrichment_hover_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the hover services'),\n                                'value' => 5,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Enrichment_services_url' => array(\n                                'level' => 1,\n                                'description' => __('The url used to access the enrichment services. By default, it is accessible at http://127.0.0.1:6666'),\n                                'value' => 'http://127.0.0.1',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string'\n                        ),\n                        'Enrichment_services_port' => array(\n                                'level' => 1,\n                                'description' => __('The port used to access the enrichment services. By default, it is accessible at 127.0.0.1:6666'),\n                                'value' => 6666,\n                                'errorMessage' => '',\n                                'test' => 'testForPortNumber',\n                                'type' => 'numeric'\n                        ),\n                        'Cortex_services_url' => array(\n                                'level' => 1,\n                                'description' => __('The url used to access Cortex. By default, it is accessible at http://cortex-url'),\n                                'value' => 'http://127.0.0.1',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string'\n                        ),\n                        'Cortex_services_port' => array(\n                                'level' => 1,\n                                'description' => __('The port used to access Cortex. By default, this is port 9000'),\n                                'value' => 9000,\n                                'errorMessage' => '',\n                                'test' => 'testForPortNumber',\n                                'type' => 'numeric'\n                        ),\n                        'Cortex_services_enable' => array(\n                                'level' => 0,\n                                'description' => __('Enable/disable the Cortex services'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Cortex_authkey' => array(\n                                'level' => 1,\n                                'description' => __('Set an authentication key to be passed to Cortex'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'Cortex_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the Cortex services'),\n                                'value' => 120,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Cortex_ssl_verify_peer' => array(\n                                'level' => 1,\n                                'description' => __('Set to false to disable SSL verification. This is not recommended.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'Cortex_ssl_verify_host' => array(\n                                'level' => 1,\n                                'description' => __('Set to false if you wish to ignore hostname match errors when validating certificates.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'Cortex_ssl_allow_self_signed' => array(\n                                'level' => 1,\n                                'description' => __('Set to true to enable self-signed certificates to be accepted. This requires Cortex_ssl_verify_peer to be enabled.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'Cortex_ssl_cafile' => array(\n                                'level' => 1,\n                                'description' => __('Set to the absolute path of the Certificate Authority file that you wish to use for verifying SSL certificates.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_custom_password_reset' => array(\n                                'level' => 2,\n                                'description' => __('Provide your custom authentication users with an external URL to the authentication system to reset their passwords.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_custom_logout' => array(\n                                'level' => 2,\n                                'description' => __('Provide a custom logout URL for your users that will log them out using the authentication system you use.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        )\n                ),\n                'debug' => array(\n                        'level' => 0,\n                        'description' => __('The debug level of the instance, always use 0 for production instances.'),\n                        'value' => '',\n                        'errorMessage' => '',\n                        'test' => 'testDebug',\n                        'type' => 'numeric',\n                        'options' => array(0 => 'Debug off', 1 => 'Debug on', 2 => 'Debug + SQL dump'),\n                ),\n                'site_admin_debug' => array(\n                        'level' => 0,\n                        'description' => __('The debug level of the instance for site admins. This feature allows site admins to run debug mode on a live instance without exposing it to other users. The most verbose option of debug and site_admin_debug is used for site admins.'),\n                        'value' => '',\n                        'errorMessage' => '',\n                        'test' => 'testDebugAdmin',\n                        'type' => 'boolean',\n                        'null' => true\n                ),\n        );\n    }\n\n    private $__settingTabMergeRules = array(\n            'GnuPG' => 'Encryption',\n            'SMIME' => 'Encryption',\n            'misc' => 'Security',\n            'Security' => 'Security',\n            'Session' => 'Security'\n    );\n\n\n    public $validEventIndexFilters = array('searchall', 'searchpublished', 'searchorg', 'searchtag', 'searcheventid', 'searchdate', 'searcheventinfo', 'searchthreatlevel', 'searchdistribution', 'searchanalysis', 'searchattribute');\n\n    public function isOwnedByOrg($serverid, $org)\n    {\n        return $this->field('id', array('id' => $serverid, 'org' => $org)) === $serverid;\n    }\n\n    public function beforeSave($options = array())\n    {\n        $this->data['Server']['url'] = rtrim($this->data['Server']['url'], '/');\n        return true;\n    }\n\n    private function __getEventIdListBasedOnPullTechnique($technique, $server)\n    {\n        if (\"full\" === $technique) {\n            // get a list of the event_ids on the server\n            $eventIds = $this->getEventIdsFromServer($server);\n            if ($eventIds === 403) {\n                return array('error' => array(1, null));\n            } elseif (is_string($eventIds)) {\n                return array('error' => array(2, $eventIds));\n            }\n\n            // reverse array of events, to first get the old ones, and then the new ones\n            if (!empty($eventIds)) {\n                $eventIds = array_reverse($eventIds);\n            }\n        } elseif (\"update\" === $technique) {\n            $eventIds = $this->getEventIdsFromServer($server, false, null, true, true);\n            if ($eventIds === 403) {\n                return array('error' => array(1, null));\n            } elseif (is_string($eventIds)) {\n                return array('error' => array(2, $eventIds));\n            }\n            $eventModel = ClassRegistry::init('Event');\n            $local_event_ids = $eventModel->find('list', array(\n                    'fields' => array('uuid'),\n                    'recursive' => -1,\n            ));\n            $eventIds = array_intersect($eventIds, $local_event_ids);\n        } elseif (is_numeric($technique)) {\n            $eventIds[] = intval($technique);\n        } else {\n            return array('error' => array(4, null));\n        }\n        return $eventIds;\n    }\n\n    private function __checkIfEventIsBlockedBeforePull($event)\n    {\n        if (Configure::read('MISP.enableEventBlacklisting') !== false) {\n            $this->EventBlacklist = ClassRegistry::init('EventBlacklist');\n            $r = $this->EventBlacklist->find('first', array('conditions' => array('event_uuid' => $event['Event']['uuid'])));\n            if (!empty($r)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private function __updatePulledEventBeforeInsert(&$event, $server, $user)\n    {\n        // we have an Event array\n        // The event came from a pull, so it should be locked.\n        $event['Event']['locked'] = true;\n        if (!isset($event['Event']['distribution'])) { // version 1\n            $event['Event']['distribution'] = '1';\n        }\n        // Distribution\n        if (empty(Configure::read('MISP.host_org_id')) || !$server['Server']['internal'] ||  Configure::read('MISP.host_org_id') != $server['Server']['org_id']) {\n            switch ($event['Event']['distribution']) {\n                case 1:\n                    // if community only, downgrade to org only after pull\n                    $event['Event']['distribution'] = '0';\n                    break;\n                case 2:\n                    // if connected communities downgrade to community only\n                    $event['Event']['distribution'] = '1';\n                    break;\n            }\n            if (isset($event['Event']['Attribute']) && !empty($event['Event']['Attribute'])) {\n                foreach ($event['Event']['Attribute'] as $key => $a) {\n                    switch ($a['distribution']) {\n                        case '1':\n                            $event['Event']['Attribute'][$key]['distribution'] = '0';\n                            break;\n                        case '2':\n                            $event['Event']['Attribute'][$key]['distribution'] = '1';\n                            break;\n                    }\n                }\n            }\n        }\n        // Distribution, set reporter of the event, being the admin that initiated the pull\n        $event['Event']['user_id'] = $user['id'];\n        return $event;\n    }\n\n    private function __checkIfEventSaveAble($event) {\n        if (!empty($event['Event']['Attribute'])) {\n            foreach ($event['Event']['Attribute'] as $attribute) {\n                if (empty($attribute['deleted'])) {\n                    return true;\n                }\n            }\n        }\n        if (!empty($event['Event']['Object'])) {\n            foreach ($event['Event']['Object'] as $object) {\n                if (!empty($object['deleted'])) {\n                    continue;\n                }\n                if (!empty($object['Attribute'])) {\n                    foreach ($object['Attribute'] as $attribute) {\n                        if (empty($attribute['deleted'])) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private function __checkIfPulledEventExistsAndAddOrUpdate($event, $eventId, &$successes, &$fails, $eventModel, $server, $user, $jobId)\n    {\n        // check if the event already exist (using the uuid)\n        $existingEvent = $eventModel->find('first', array('conditions' => array('Event.uuid' => $event['Event']['uuid'])));\n        $passAlong = $server['Server']['id'];\n        if (!$existingEvent) {\n            // add data for newly imported events\n            $result = $eventModel->_add($event, true, $user, $server['Server']['org_id'], $passAlong, true, $jobId);\n            if ($result) {\n                $successes[] = $eventId;\n            } else {\n                $fails[$eventId] = __('Failed (partially?) because of validation errors: ') . json_encode($eventModel->validationErrors, true);\n            }\n        } else {\n            if (!$existingEvent['Event']['locked'] && !$server['Server']['internal']) {\n                $fails[$eventId] = __('Blocked an edit to an event that was created locally. This can happen if a synchronised event that was created on this instance was modified by an administrator on the remote side.');\n            } else {\n                $result = $eventModel->_edit($event, $user, $existingEvent['Event']['id'], $jobId, $passAlong);\n                if ($result === true) {\n                    $successes[] = $eventId;\n                } elseif (isset($result['error'])) {\n                    $fails[$eventId] = $result['error'];\n                } else {\n                    $fails[$eventId] = json_encode($result);\n                }\n            }\n        }\n    }\n\n    private function __pullEvent($eventId, &$successes, &$fails, $eventModel, $server, $user, $jobId)\n    {\n        $event = $eventModel->downloadEventFromServer(\n                $eventId,\n                $server\n        );\n        ;\n        if (!empty($event)) {\n            if ($this->__checkIfEventIsBlockedBeforePull($event)) {\n                return false;\n            }\n            $event = $this->__updatePulledEventBeforeInsert($event, $server, $user);\n            if (!$this->__checkIfEventSaveAble($event)) {\n                $fails[$eventId] = __('Empty event detected.');\n            } else {\n                $this->__checkIfPulledEventExistsAndAddOrUpdate($event, $eventId, $successes, $fails, $eventModel, $server, $user, $jobId);\n            }\n        } else {\n            // error\n            $fails[$eventId] = __('failed downloading the event');\n        }\n        return true;\n    }\n\n    private function __handlePulledProposals($proposals, $events, $job, $jobId, $eventModel, $user)\n    {\n        $pulledProposals = array();\n        if (!empty($proposals)) {\n            $shadowAttribute = ClassRegistry::init('ShadowAttribute');\n            $shadowAttribute->recursive = -1;\n            $uuidEvents = array_flip($events);\n            foreach ($proposals as $k => &$proposal) {\n                $proposal = $proposal['ShadowAttribute'];\n                $oldsa = $shadowAttribute->findOldProposal($proposal);\n                $proposal['event_id'] = $uuidEvents[$proposal['event_uuid']];\n                if (!$oldsa || $oldsa['timestamp'] < $proposal['timestamp']) {\n                    if ($oldsa) {\n                        $shadowAttribute->delete($oldsa['id']);\n                    }\n                    if (!isset($pulledProposals[$proposal['event_id']])) {\n                        $pulledProposals[$proposal['event_id']] = 0;\n                    }\n                    $pulledProposals[$proposal['event_id']]++;\n                    if (isset($proposal['old_id'])) {\n                        $oldAttribute = $eventModel->Attribute->find('first', array('recursive' => -1, 'conditions' => array('uuid' => $proposal['uuid'])));\n                        if ($oldAttribute) {\n                            $proposal['old_id'] = $oldAttribute['Attribute']['id'];\n                        } else {\n                            $proposal['old_id'] = 0;\n                        }\n                    }\n                    // check if this is a proposal from an old MISP instance\n                    if (!isset($proposal['Org']) && isset($proposal['org']) && !empty($proposal['org'])) {\n                        $proposal['Org'] = $proposal['org'];\n                        $proposal['EventOrg'] = $proposal['event_org'];\n                    } elseif (!isset($proposal['Org']) && !isset($proposal['EventOrg'])) {\n                        continue;\n                    }\n                    $proposal['org_id'] = $this->Organisation->captureOrg($proposal['Org'], $user);\n                    $proposal['event_org_id'] = $this->Organisation->captureOrg($proposal['EventOrg'], $user);\n                    unset($proposal['Org']);\n                    unset($proposal['EventOrg']);\n                    $shadowAttribute->create();\n                    if (!isset($proposal['deleted']) || !$proposal['deleted']) {\n                        if ($shadowAttribute->save($proposal)) {\n                            $shadowAttribute->sendProposalAlertEmail($proposal['event_id']);\n                        }\n                    }\n                }\n                if ($jobId) {\n                    if ($k % 50 == 0) {\n                        $job->id =  $jobId;\n                        $job->saveField('progress', 50 * (($k + 1) / count($proposals)) + 50);\n                    }\n                }\n            }\n        }\n        return $pulledProposals;\n    }\n\n    public function pull($user, $id = null, $technique=false, $server, $jobId = false)\n    {\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n            $job->read(null, $jobId);\n            $email = \"Scheduled job\";\n        } else {\n            $job = false;\n            $email = $user['email'];\n        }\n        $eventModel = ClassRegistry::init('Event');\n        $eventIds = array();\n        // if we are downloading a single event, don't fetch all proposals\n        $conditions = is_numeric($technique) ? array('Event.id' => $technique) : array();\n        $eventIds = $this->__getEventIdListBasedOnPullTechnique($technique, $server);\n        $server['Server']['version'] = $this->getRemoteVersion($id);\n        if (!empty($eventIds['error'])) {\n            $errors = array(\n                '1' => __('Not authorised. This is either due to an invalid auth key, or due to the sync user not having authentication permissions enabled on the remote server. Another reason could be an incorrect sync server setting.'),\n                '2' => $eventIds['error'][1],\n                '3' => __('Sorry, this is not yet implemented'),\n                '4' => __('Something went wrong while trying to pull')\n            );\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                'org' => $user['Organisation']['name'],\n                'model' => 'Server',\n                'model_id' => $id,\n                'email' => $user['email'],\n                'action' => 'error',\n                'user_id' => $user['id'],\n                'title' => 'Failed pull from ' . $server['Server']['url'] . ' initiated by ' . $email,\n                'change' => !empty($errors[$eventIds['error'][0]]) ? $errors[$eventIds['error'][0]] : __('Unknown issue.')\n            ));\n            return !empty($errors[$eventIds['error'][0]]) ? $errors[$eventIds['error'][0]] : __('Unknown issue.');\n        }\n        $successes = array();\n        $fails = array();\n        // now process the $eventIds to pull each of the events sequentially\n        if (!empty($eventIds)) {\n            // download each event\n            foreach ($eventIds as $k => $eventId) {\n                $this->__pullEvent($eventId, $successes, $fails, $eventModel, $server, $user, $jobId);\n                if ($jobId) {\n                    if ($k % 10 == 0) {\n                        $job->saveField('progress', 50 * (($k + 1) / count($eventIds)));\n                    }\n                }\n            }\n        }\n        if (!empty($fails)) {\n            $this->Log = ClassRegistry::init('Log');\n            foreach ($fails as $eventid => $message) {\n                $this->Log->create();\n                $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => 'pull',\n                    'user_id' => $user['id'],\n                    'title' => 'Failed to pull event #' . $eventid . '.',\n                    'change' => 'Reason:' . $message\n                ));\n            }\n        }\n        if ($jobId) {\n            $job->saveField('progress', 50);\n            $job->saveField('message', 'Pulling proposals.');\n        }\n        $pulledProposals = $eventModel->ShadowAttribute->pullProposals($user, $server);\n        if ($jobId) {\n            $job->saveField('progress', 100);\n            $job->saveField('message', 'Pull completed.');\n            $job->saveField('status', 4);\n        }\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        $this->Log->save(array(\n            'org' => $user['Organisation']['name'],\n            'model' => 'Server',\n            'model_id' => $id,\n            'email' => $user['email'],\n            'action' => 'pull',\n            'user_id' => $user['id'],\n            'title' => 'Pull from ' . $server['Server']['url'] . ' initiated by ' . $email,\n            'change' => sprintf(\n                '%s events and %s proposals pulled or updated. %s events failed or didn\\'t need an update.',\n                count($successes),\n                $pulledProposals,\n                count($fails)\n            )\n        ));\n        return array($successes, $fails, $pulledProposals);\n    }\n\n    public function filterRuleToParameter($filter_rules)\n    {\n        $final = array();\n        if (empty($filter_rules)) {\n            return $final;\n        }\n        $filter_rules = json_decode($filter_rules, true);\n        foreach ($filter_rules as $field => $rules) {\n            $temp = array();\n            foreach ($rules as $operator => $elements) {\n                foreach ($elements as $k => $element) {\n                    if ($operator === 'NOT') {\n                        $element = '!' . $element;\n                    }\n                    if (!empty($element)) {\n                        $temp[] = $element;\n                    }\n                }\n            }\n            if (!empty($temp)) {\n                $temp = implode('|', $temp);\n                $final[substr($field, 0, strlen($field) -1)] = $temp;\n            }\n        }\n        return $final;\n    }\n\n\n    // Get an array of event_ids that are present on the remote server\n    public function getEventIdsFromServer($server, $all = false, $HttpSocket=null, $force_uuid=false, $ignoreFilterRules = false)\n    {\n        $url = $server['Server']['url'];\n        if ($ignoreFilterRules) {\n            $filter_rules = array();\n        } else {\n            $filter_rules = $this->filterRuleToParameter($server['Server']['pull_rules']);\n        }\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        $request = $this->setupSyncRequest($server);\n        $uri = $url . '/events/index';\n        $filter_rules['minimal'] = 1;\n        $filter_rules['published'] = 1;\n        try {\n            $response = $HttpSocket->post($uri, json_encode($filter_rules), $request);\n            if ($response->isOk()) {\n                $eventArray = json_decode($response->body, true);\n                // correct $eventArray if just one event\n                if (is_array($eventArray) && isset($eventArray['id'])) {\n                    $tmp = $eventArray;\n                    unset($eventArray);\n                    $eventArray[0] = $tmp;\n                    unset($tmp);\n                }\n                $eventIds = array();\n                if ($all) {\n                    if (!empty($eventArray)) {\n                        foreach ($eventArray as $event) {\n                            $eventIds[] = $event['uuid'];\n                        }\n                    }\n                } else {\n                    // multiple events, iterate over the array\n                    $this->Event = ClassRegistry::init('Event');\n                    $blacklisting = array();\n                    if (Configure::read('MISP.enableEventBlacklisting') !== false) {\n                        $this->EventBlacklist = ClassRegistry::init('EventBlacklist');\n                        $blacklisting['EventBlacklist'] = array(\n                            'index_field' => 'uuid',\n                            'blacklist_field' => 'event_uuid'\n                        );\n                    }\n                    if (Configure::read('MISP.enableOrgBlacklisting') !== false) {\n                        $this->OrgBlacklist = ClassRegistry::init('OrgBlacklist');\n                        $blacklisting['OrgBlacklist'] = array(\n                            'index_field' => 'orgc_uuid',\n                            'blacklist_field' => 'org_uuid'\n                        );\n                    }\n                    foreach ($eventArray as $k => $event) {\n                        if (1 != $event['published']) {\n                            unset($eventArray[$k]); // do not keep non-published events\n                            continue;\n                        }\n                        foreach ($blacklisting as $type => $blacklist) {\n                            if (!empty($eventArray[$k][$blacklist['index_field']])) {\n                                $blacklist_hit = $this->{$type}->find('first', array(\n                                    'conditions' => array($blacklist['blacklist_field'] => $eventArray[$k][$blacklist['index_field']]),\n                                    'recursive' => -1,\n                                    'fields' => array($type . '.id')\n                                ));\n                                if (!empty($blacklist_hit)) {\n                                    unset($eventArray[$k]);\n                                    continue 2;\n                                }\n                            }\n                        }\n                    }\n                    $this->Event->removeOlder($eventArray);\n                    if (!empty($eventArray)) {\n                        foreach ($eventArray as $event) {\n                            if ($force_uuid) {\n                                $eventIds[] = $event['uuid'];\n                            } else {\n                                $eventIds[] = $event['uuid'];\n                            }\n                        }\n                    }\n                }\n                return $eventIds;\n            }\n            if ($response->code == '403') {\n                return 403;\n            }\n        } catch (SocketException $e) {\n            return $e->getMessage();\n        }\n        // error, so return error message, since that is handled and everything is expecting an array\n        return \"Error: got response code \" . $response->code;\n    }\n\n    public function push($id = null, $technique=false, $jobId = false, $HttpSocket, $user)\n    {\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n            $job->read(null, $jobId);\n        }\n        $this->Event = ClassRegistry::init('Event');\n        $this->read(null, $id);\n        $url = $this->data['Server']['url'];\n        $push = $this->checkVersionCompatibility($id, $user);\n        if (isset($push['canPush']) && !$push['canPush']) {\n            $push = 'Remote instance is outdated or no permission to push.';\n        }\n        if (!is_array($push)) {\n            $message = sprintf('Push to server %s failed. Reason: %s', $id, $push);\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => 'error',\n                    'user_id' => $user['id'],\n                    'title' => 'Failed: Push to ' . $url . ' initiated by ' . $user['email'],\n                    'change' => $message\n            ));\n            if ($jobId) {\n                $job->id = $jobId;\n                $job->saveField('progress', 100);\n                $job->saveField('message', $message);\n                $job->saveField('status', 4);\n            }\n            return $push;\n        }\n        if (\"full\" == $technique) {\n            $eventid_conditions_key = 'Event.id >';\n            $eventid_conditions_value = 0;\n        } elseif (\"incremental\" == $technique) {\n            $eventid_conditions_key = 'Event.id >';\n            $eventid_conditions_value = $this->data['Server']['lastpushedid'];\n        } elseif (true == $technique) {\n            $eventid_conditions_key = 'Event.id';\n            $eventid_conditions_value = intval($technique);\n        } else {\n            $this->redirect(array('action' => 'index'));\n        }\n        $sgs = $this->Event->SharingGroup->find('all', array(\n            'recursive' => -1,\n            'contain' => array('Organisation', 'SharingGroupOrg' => array('Organisation'), 'SharingGroupServer')\n        ));\n        $sgIds = array();\n        foreach ($sgs as $k => $sg) {\n            if (!$this->Event->SharingGroup->checkIfServerInSG($sg, $this->data)) {\n                unset($sgs[$k]);\n                continue;\n            }\n            $sgIds[] = $sg['SharingGroup']['id'];\n        }\n        if (!isset($sgIds) || empty($sgIds)) {\n            $sgIds = array(-1);\n        }\n        $findParams = array(\n                'conditions' => array(\n                        $eventid_conditions_key => $eventid_conditions_value,\n                        'Event.published' => 1,\n                        'Event.attribute_count >' => 0,\n                        'OR' => array(\n                            array(\n                                'AND' => array(\n                                    array('Event.distribution >' => 0),\n                                    array('Event.distribution <' => 4),\n                                ),\n                            ),\n                            array(\n                                'AND' => array(\n                                    'Event.distribution' => 4,\n                                    'Event.sharing_group_id' => $sgIds\n                                ),\n                            )\n                        )\n                ), // array of conditions\n                'recursive' => -1, //int\n                'contain' => array('EventTag' => array('fields' => array('EventTag.tag_id'))),\n                'fields' => array('Event.id', 'Event.timestamp', 'Event.uuid', 'Event.orgc_id'), // array of field names\n        );\n        $eventIds = $this->Event->find('all', $findParams);\n        $eventUUIDsFiltered = $this->getEventIdsForPush($id, $HttpSocket, $eventIds, $user);\n        if ($eventUUIDsFiltered === false || empty($eventUUIDsFiltered)) {\n            $pushFailed = true;\n        }\n        if (!empty($eventUUIDsFiltered)) {\n            $eventCount = count($eventUUIDsFiltered);\n            // now process the $eventIds to pull each of the events sequentially\n            if (!empty($eventUUIDsFiltered)) {\n                $successes = array();\n                $fails = array();\n                $lowestfailedid = null;\n                foreach ($eventUUIDsFiltered as $k => $eventUuid) {\n                    $params = array();\n                    if (!empty($this->data['Server']['push_rules'])) {\n                        $push_rules = json_decode($this->data['Server']['push_rules'], true);\n                        if (!empty($push_rules['tags']['NOT'])) {\n                            $params['blockedAttributeTags'] = $push_rules['tags']['NOT'];\n                        }\n                    }\n                    $params = array_merge($params, array(\n                        'event_uuid' => $eventUuid,\n                        'includeAttachments' => true,\n                        'includeAllTags' => true,\n                        'deleted' => array(0,1),\n                        'excludeGalaxy' => 1\n                    ));\n                    $event = $this->Event->fetchEvent($user, $params);\n                    $event = $event[0];\n                    $event['Event']['locked'] = 1;\n                    $result = $this->Event->uploadEventToServer($event, $this->data, $HttpSocket);\n                    if ('Success' === $result) {\n                        $successes[] = $event['Event']['id'];\n                    } else {\n                        $fails[$event['Event']['id']] = $result;\n                    }\n                    if ($jobId && $k%10 == 0) {\n                        $job->saveField('progress', 100 * $k / $eventCount);\n                    }\n                }\n                if (count($fails) > 0) {\n                    // there are fails, take the lowest fail\n                    $lastpushedid = min(array_keys($fails));\n                } else {\n                    // no fails, take the highest success\n                    $lastpushedid = max($successes);\n                }\n                // increment lastid based on the highest ID seen\n                // Save the entire Server data instead of just a single field, so that the logger can be fed with the extra fields.\n                $this->data['Server']['lastpushedid'] = $lastpushedid;\n                $this->save($this->data);\n            }\n        }\n\n        $this->syncProposals($HttpSocket, $this->data, null, null, $this->Event);\n\n        if (!isset($successes)) {\n            $successes = array();\n        }\n        if (!isset($fails)) {\n            $fails = array();\n        }\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        $this->Log->save(array(\n                'org' => $user['Organisation']['name'],\n                'model' => 'Server',\n                'model_id' => $id,\n                'email' => $user['email'],\n                'action' => 'push',\n                'user_id' => $user['id'],\n                'title' => 'Push to ' . $url . ' initiated by ' . $user['email'],\n                'change' => count($successes) . ' events pushed or updated. ' . count($fails) . ' events failed or didn\\'t need an update.'\n        ));\n        if ($jobId) {\n            $job->id = $jobId;\n            $job->saveField('progress', 100);\n            $job->saveField('message', 'Push to server ' . $id . ' complete.');\n            $job->saveField('status', 4);\n        } else {\n            return array($successes, $fails);\n        }\n        return true;\n    }\n\n    public function getEventIdsForPush($id, $HttpSocket, $eventIds, $user)\n    {\n        $server = $this->read(null, $id);\n        $this->Event = ClassRegistry::init('Event');\n\n        foreach ($eventIds as $k => $event) {\n            if (empty($this->eventFilterPushableServers($event, array($server)))) {\n                unset($eventIds[$k]);\n                continue;\n            }\n            unset($eventIds[$k]['Event']['id']);\n        }\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        $request = $this->setupSyncRequest($server);\n        $data = json_encode($eventIds);\n        $uri = $server['Server']['url'] . '/events/filterEventIdsForPush';\n        $response = $HttpSocket->post($uri, $data, $request);\n        if ($response->code == '200') {\n            $uuidList = json_decode($response->body());\n        } else {\n            return false;\n        }\n        return $uuidList;\n    }\n\n    public function syncProposals($HttpSocket, $server, $sa_id = null, $event_id = null, $eventModel)\n    {\n        $saModel = ClassRegistry::init('ShadowAttribute');\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        if ($sa_id == null) {\n            if ($event_id == null) {\n                // event_id is null when we are doing a push\n                $ids = $this->getEventIdsFromServer($server, true, $HttpSocket, false, true);\n                // error return strings or ints or throw exceptions\n                if (!is_array($ids)) {\n                    return false;\n                }\n                $conditions = array('uuid' => $ids);\n            } else {\n                $conditions = array('id' => $event_id);\n                // event_id is not null when we are doing a publish\n            }\n            $events = $eventModel->find('all', array(\n                    'conditions' => $conditions,\n                    'recursive' => 1,\n                    'contain' => 'ShadowAttribute',\n                    'fields' => array('Event.uuid')\n            ));\n\n            $fails = 0;\n            $success = 0;\n            $error_message = \"\";\n            foreach ($events as $k => &$event) {\n                if (!empty($event['ShadowAttribute'])) {\n                    foreach ($event['ShadowAttribute'] as &$sa) {\n                        $sa['data'] = $saModel->base64EncodeAttachment($sa);\n                        unset($sa['id']);\n                        unset($sa['value1']);\n                        unset($sa['value2']);\n                    }\n\n                    $data = json_encode($event['ShadowAttribute']);\n                    $request = $this->setupSyncRequest($server);\n                    $uri = $server['Server']['url'] . '/events/pushProposals/' . $event['Event']['uuid'];\n                    $response = $HttpSocket->post($uri, $data, $request);\n                    if ($response->code == '200') {\n                        $result = json_decode($response->body(), true);\n                        if ($result['success']) {\n                            $success += intval($result['counter']);\n                        } else {\n                            $fails++;\n                            if ($error_message == \"\") {\n                                $result['message'];\n                            } else {\n                                $error_message .= \" --- \" . $result['message'];\n                            }\n                        }\n                    } else {\n                        $fails++;\n                    }\n                }\n            }\n        } else {\n            // connect to checkuuid($uuid)\n            $request = $this->setupSyncRequest($server);\n            $uri = $server['Server']['url'] . '/events/checkuuid/' . $sa_id;\n            $response = $HttpSocket->get($uri, '', $request);\n            if ($response->code != '200') {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public function getCurrentServerSettings()\n    {\n        $this->Module = ClassRegistry::init('Module');\n        $serverSettings = $this->serverSettings;\n        $moduleTypes = array('Enrichment', 'Import', 'Export', 'Cortex');\n        $serverSettings = $this->readModuleSettings($serverSettings, $moduleTypes);\n        return $serverSettings;\n    }\n\n    private function readModuleSettings($serverSettings, $moduleTypes)\n    {\n        $this->Module = ClassRegistry::init('Module');\n        $orgs = $this->Organisation->find('list', array(\n            'conditions' => array(\n                'Organisation.local' => 1\n            ),\n            'fields' => array(\n                'Organisation.id', 'Organisation.name'\n            )\n        ));\n        $orgs = array_merge(array('Unrestricted'), $orgs);\n        foreach ($moduleTypes as $moduleType) {\n            if (Configure::read('Plugin.' . $moduleType . '_services_enable')) {\n                $results = $this->Module->getModuleSettings($moduleType);\n                foreach ($results as $module => $data) {\n                    foreach ($data as $result) {\n                        $setting = array('level' => 1, 'errorMessage' => '');\n                        if ($result['type'] == 'boolean') {\n                            $setting['test'] = 'testBool';\n                            $setting['type'] = 'boolean';\n                            $setting['description'] = __('Enable or disable the %s module.', $module);\n                            $setting['value'] = false;\n                        } elseif ($result['type'] == 'orgs') {\n                            $setting['description'] = __('Restrict the %s module to the given organisation.', $module);\n                            $setting['value'] = 0;\n                            $setting['test'] = 'testLocalOrg';\n                            $setting['type'] = 'numeric';\n                            $setting['optionsSource'] = 'LocalOrgs';\n                        } else {\n                            $setting['test'] = 'testForEmpty';\n                            $setting['type'] = 'string';\n                            $setting['description'] = __('Set this required module specific setting.');\n                            $setting['value'] = '';\n                        }\n                        $serverSettings['Plugin'][$moduleType . '_' . $module . '_' .  $result['name']] = $setting;\n                    }\n                }\n            }\n        }\n        return $serverSettings;\n    }\n\n    private function __serverSettingsRead($serverSettings, $currentSettings)\n    {\n        foreach ($serverSettings as $branchKey => &$branchValue) {\n            if (isset($branchValue['branch'])) {\n                foreach ($branchValue as $leafKey => &$leafValue) {\n                    if ($leafValue['level'] == 3 && !(isset($currentSettings[$branchKey][$leafKey]))) {\n                        continue;\n                    }\n                    $setting = null;\n                    if (isset($currentSettings[$branchKey][$leafKey])) {\n                        $setting = $currentSettings[$branchKey][$leafKey];\n                    }\n                    $leafValue = $this->__evaluateLeaf($leafValue, $leafKey, $setting);\n                    if ($leafKey != 'branch') {\n                        if ($branchKey == 'Plugin') {\n                            $pluginData = explode('_', $leafKey);\n                            $leafValue['subGroup'] = $pluginData[0];\n                        }\n                        if (strpos($branchKey, 'Secur') === 0) {\n                            $leafValue['tab'] = 'Security';\n                        } else {\n                            $leafValue['tab'] = $branchKey;\n                        }\n                        $finalSettingsUnsorted[$branchKey . '.' . $leafKey] = $leafValue;\n                    }\n                }\n            } else {\n                $setting = null;\n                if (isset($currentSettings[$branchKey])) {\n                    $setting = $currentSettings[$branchKey];\n                }\n                $branchValue = $this->__evaluateLeaf($branchValue, $branchKey, $setting);\n                $branchValue['tab'] = 'misc';\n                $finalSettingsUnsorted[$branchKey] = $branchValue;\n            }\n        }\n        return $finalSettingsUnsorted;\n    }\n\n    private function __sortFinalSettings($finalSettingsUnsorted)\n    {\n        $finalSettings = array();\n        for ($i = 0; $i < 4; $i++) {\n            foreach ($finalSettingsUnsorted as $k => $s) {\n                $s['setting'] = $k;\n                if ($s['level'] == $i) {\n                    $finalSettings[] = $s;\n                }\n            }\n        }\n        return $finalSettings;\n    }\n\n    public function serverSettingsRead($unsorted = false)\n    {\n        $this->Module = ClassRegistry::init('Module');\n        $serverSettings = $this->getCurrentServerSettings();\n        $currentSettings = Configure::read();\n        if (Configure::read('Plugin.Enrichment_services_enable')) {\n            $this->readModuleSettings($serverSettings, array('Enrichment'));\n        }\n        $finalSettingsUnsorted = $this->__serverSettingsRead($serverSettings, $currentSettings);\n        foreach ($finalSettingsUnsorted as $key => $temp) {\n            if (in_array($temp['tab'], array_keys($this->__settingTabMergeRules))) {\n                $finalSettingsUnsorted[$key]['tab'] = $this->__settingTabMergeRules[$temp['tab']];\n            }\n        }\n        if ($unsorted) {\n            return $finalSettingsUnsorted;\n        }\n        return $this->__sortFinalSettings($finalSettingsUnsorted);\n    }\n\n    public function serverSettingReadSingle($settingObject, $settingName, $leafKey)\n    {\n        // invalidate config.php from php opcode cache\n        if (function_exists('opcache_reset')) {\n            opcache_reset();\n        }\n\n        $setting = Configure::read($settingName);\n        $result = $this->__evaluateLeaf($settingObject, $leafKey, $setting);\n        $result['setting'] = $settingName;\n        return $result;\n    }\n\n    private function __evaluateLeaf($leafValue, $leafKey, $setting)\n    {\n        if (isset($setting)) {\n            if (!empty($leafValue['test'])) {\n                $result = $this->{$leafValue['test']}($setting, empty($leafValue['errorMessage']) ? false : $leafValue['errorMessage']);\n                if ($result !== true) {\n                    $leafValue['error'] = 1;\n                    if ($result !== false) {\n                        $leafValue['errorMessage'] = $result;\n                    }\n                }\n            }\n            if ($setting !== '') {\n                $leafValue['value'] = $setting;\n            }\n        } else {\n            if ($leafKey != 'branch' && (!isset($leafValue['null']) || !$leafValue['null'])) {\n                $leafValue['error'] = 1;\n                $leafValue['errorMessage'] = __('Value not set.');\n            }\n        }\n        return $leafValue;\n    }\n\n    public function loadAvailableLanguages()\n    {\n        $dirs = glob(APP . 'Locale/*', GLOB_ONLYDIR);\n        $languages = array('eng' => 'eng');\n        foreach ($dirs as $k => $dir) {\n            $dir = str_replace(APP . 'Locale' . DS, '', $dir);\n            $languages[$dir] = $dir;\n        }\n        return $languages;\n    }\n\n    public function testLanguage($value)\n    {\n        $languages = $this->loadAvailableLanguages();\n        if (!isset($languages[$value])) {\n            return __('Invalid language.');\n        }\n        return true;\n    }\n\n    public function loadTagCollections()\n    {\n        $this->TagCollection = ClassRegistry::init('TagCollection');\n        $user = array('Role' => array('perm_site_admin' => 1));\n        $tagCollections = $this->TagCollection->fetchTagCollection($user);\n        $options = array(0 => 'None');\n        foreach ($tagCollections as $tagCollection) {\n            $options[intval($tagCollection['TagCollection']['id'])] = $tagCollection['TagCollection']['name'];\n        }\n        return $options;\n    }\n\n    public function testTagCollections($value)\n    {\n        $tag_collections = $this->loadTagCollections();\n        if (!isset($tag_collections[intval($value)])) {\n            return __('Invalid tag_collection.');\n        }\n        return true;\n    }\n\n    public function testForNumeric($value)\n    {\n        if (!is_numeric($value)) {\n            return __('This setting has to be a number.');\n        }\n        return true;\n    }\n\n    public function testForCookieTimeout($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < Configure::read('Session.timeout') && $value !== 0) {\n            return __('The cookie timeout is currently lower than the session timeout. This will invalidate the cookie before the session expires.');\n        }\n        return true;\n    }\n\n    public function testUuid($value)\n    {\n        if (empty($value) || !preg_match('/^\\{?[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}\\}?$/', $value)) {\n            return 'Invalid UUID.';\n        }\n        return true;\n    }\n\n    public function testForSessionDefaults($value)\n    {\n        if (empty($value) || !in_array($value, array('php', 'database', 'cake', 'cache'))) {\n            return 'Please choose a valid session handler. Recommended values: php or database. Alternate options are cake (cakephp file based sessions) and cache.';\n        } else {\n            return true;\n        }\n    }\n\n    public function testLocalOrg($value)\n    {\n        $this->Organisation = ClassRegistry::init('Organisation');\n        if ($value == 0) {\n            return 'No organisation selected';\n        }\n        $local_orgs = $this->Organisation->find('list', array(\n            'conditions' => array('local' => 1),\n            'recursive' => -1,\n            'fields' => array('Organisation.id', 'Organisation.name')\n        ));\n        if (in_array($value, array_keys($local_orgs))) {\n            return true;\n        }\n        return 'Invalid organisation';\n    }\n\n    public function testForEmpty($value)\n    {\n        $value = trim($value);\n        if ($value === '') {\n            return 'Value not set.';\n        }\n        return true;\n    }\n\n    public function testForPath($value)\n    {\n        if ($value === '') {\n            return true;\n        }\n        if (preg_match('@^\\/?(([a-z0-9_.]+[a-z0-9_.\\-.\\:]*[a-z0-9_.\\-.\\:]|[a-z0-9_.])+\\/?)+$@i', $value)) {\n            return true;\n        }\n        return 'Invalid characters in the path.';\n    }\n\n    public function beforeHookBinExec($setting, $value)\n    {\n        return $this->testForBinExec($value);\n    }\n\n    public function testForBinExec($value)\n    {\n        if (substr($value, 0, 7) === \"phar://\") {\n            return 'Phar protocol not allowed.';\n        }\n        $finfo = finfo_open(FILEINFO_MIME_TYPE);\n        if ($value === '') {\n            return true;\n        }\n        if (is_executable($value)) {\n            if (finfo_file($finfo, $value) == \"application/x-executable\" || finfo_file($finfo, $value) == \"application/x-sharedlib\") {\n                finfo_close($finfo);\n                return true;\n            } else {\n                return 'Binary file not executable. It is of type: ' . finfo_file($finfo, $value);\n            }\n        } else {\n            return false;\n        }\n    }\n\n    public function testForWritableDir($value)\n    {\n        if (substr($value, 0, 7) === \"phar://\") {\n            return 'Phar protocol not allowed.';\n        }\n        if (!is_dir($value)) {\n            return 'Not a valid directory.';\n        }\n        if (!is_writeable($value)) {\n            return 'Not a writable directory.';\n        }\n        return true;\n    }\n\n    public function testDebug($value)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if ($this->testForNumeric($value) !== true) {\n            return 'This setting has to be a number between 0 and 2, with 0 disabling debug mode.';\n        }\n        if ($value === 0) {\n            return true;\n        }\n        return 'This setting has to be set to 0 on production systems. Ignore this warning if this is not the case.';\n    }\n\n    public function testDebugAdmin($value)\n    {\n        if ($this->testBool($value) !== true) {\n            return 'This setting has to be either true or false.';\n        }\n        if (!$value) {\n            return true;\n        }\n        return 'Enabling debug is not recommended. Turn this on temporarily if you need to see a stack trace to debug an issue, but make sure this is not left on.';\n    }\n\n    public function testDate($date)\n    {\n        if ($this->testForEmpty($date) !== true) {\n            return $this->testForEmpty($date);\n        }\n        if (!strtotime($date)) {\n            return 'The date that you have entered is invalid. Expected: yyyy-mm-dd';\n        }\n        return true;\n    }\n\n\n    public function getHost()\n    {\n        if (function_exists('apache_request_headers')) {\n            $headers = apache_request_headers();\n        } else {\n            $headers = $_SERVER;\n        }\n\n        if (array_key_exists('X-Forwarded-Host', $headers)) {\n            $host = $headers['X-Forwarded-Host'];\n        } else {\n            $host = $_SERVER['HTTP_HOST'];\n        }\n        return $host;\n    }\n\n    public function getProto()\n    {\n        if (function_exists('apache_request_headers')) {\n            $headers = apache_request_headers();\n        } else {\n            $headers = $_SERVER;\n        }\n\n        if (array_key_exists('X-Forwarded-Proto', $headers)) {\n            $proto = $headers['X-Forwarded-Proto'];\n        } else {\n            $proto = ((!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') || $_SERVER['SERVER_PORT'] == 443) === true ? 'HTTPS' : 'HTTP';\n        }\n        return $proto;\n    }\n\n    public function testBaseURL($value)\n    {\n        // only run this check via the GUI, via the CLI it won't work\n        if (php_sapi_name() == 'cli') {\n            if (!empty($value) && !preg_match('/^http(s)?:\\/\\//i', $value)) {\n                return 'Invalid baseurl, please make sure that the protocol is set.';\n            }\n            return true;\n        }\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if ($value != strtolower($this->getProto()) . '://' . $this->getHost()) {\n            return 'Invalid baseurl, it has to be in the \"https://FQDN\" format.';\n        }\n        return true;\n    }\n\n    public function testURL($value)\n    {\n        // only run this check via the GUI, via the CLI it won't work\n        if (!empty($value) && !preg_match('/^http(s)?:\\/\\//i', $value)) {\n            return 'Invalid baseurl, please make sure that the protocol is set.';\n        }\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        return true;\n    }\n\n    public function testDisableEmail($value)\n    {\n        if (isset($value) && $value) {\n            return 'E-mailing is blocked.';\n        }\n        return true;\n    }\n\n    public function testDisableCache($value)\n    {\n        if (isset($value) && $value) {\n            return 'Export caches are disabled.';\n        }\n        return true;\n    }\n\n    public function testLive($value)\n    {\n        if ($this->testBool($value) !== true) {\n            return $this->testBool($value);\n        }\n        if (!$value) {\n            return 'MISP disabled.';\n        }\n        return true;\n    }\n\n    public function testBool($value, $errorMessage = false)\n    {\n        if ($value !== true && $value !== false) {\n            if ($errorMessage) {\n                return $errorMessage;\n            }\n            return 'Value is not a boolean, make sure that you convert \\'true\\' to true for example.';\n        }\n        return true;\n    }\n\n    public function testBoolFalse($value, $errorMessage = false)\n    {\n        if ($this->testBool($value, $errorMessage) !== true) {\n            return $this->testBool($value, $errorMessage);\n        }\n        if ($value !== false) {\n            if ($errorMessage) {\n                return $errorMessage;\n            }\n            return 'It is highly recommended that this setting is disabled. Make sure you understand the impact of having this setting turned on.';\n        } else {\n            return true;\n        }\n    }\n\n    public function testParanoidSkipDb($value)\n    {\n        if (!empty(Configure::read('MISP.log_paranoid')) && empty($value)) {\n            return 'Perhaps consider skipping the database when using paranoid mode. A great number of entries will be added to your log database otherwise that will lead to performance degradation.';\n        }\n        return true;\n    }\n\n    public function testSalt($value)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if (strlen($value) < 32) {\n            return 'The salt has to be an at least 32 byte long string.';\n        }\n        if ($value == \"Rooraenietu8Eeyo<Qu2eeNfterd-dd+\") {\n            return 'This is the default salt shipped with the application and is therefore unsecure.';\n        }\n        return true;\n    }\n\n    public function testForTermsFile($value)\n    {\n        return $this->__testForFile($value, APP . 'files' . DS . 'terms');\n    }\n\n    public function testForStyleFile($value)\n    {\n        if (empty($value)) {\n            return true;\n        }\n        return $this->__testForFile($value, APP . 'webroot' . DS . 'css');\n    }\n\n    public function testForCustomImage($value)\n    {\n        return $this->__testForFile($value, APP . 'webroot' . DS . 'img' . DS . 'custom');\n    }\n\n    public function testPasswordLength($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 0) {\n            return 'Length cannot be negative, set a positive integer or 0 (to choose the default option).';\n        }\n        return true;\n    }\n\n    public function testForPortNumber($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 21 || $value > 65535) {\n            return 'Make sure that you pick a valid port number.';\n        }\n        return true;\n    }\n\n    public function testForZMQPortNumber($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 49152 || $value > 65535) {\n            return 'It is recommended that you pick a port number in the dynamic range (49152-65535). However, if you have a valid reason to use a different port, ignore this message.';\n        }\n        return true;\n    }\n\n    public function testPasswordRegex($value)\n    {\n        if (!empty($value) && @preg_match($value, 'test') === false) {\n            return 'Invalid regex.';\n        }\n        return true;\n    }\n\n    public function testPasswordResetText($value)\n    {\n        if (strpos($value, '$password') === false || strpos($value, '$username') === false || strpos($value, '$misp') === false) {\n            return 'The text served to the users must include the following replacement strings: \"$username\", \"$password\", \"$misp\"';\n        }\n        return true;\n    }\n\n    public function testForGPGBinary($value)\n    {\n        if (empty($value)) {\n            $value = $this->serverSettings['GnuPG']['binary']['value'];\n        }\n        if (file_exists($value)) {\n            return true;\n        }\n        return 'Could not find the GnuPG executable at the defined location.';\n    }\n\n    public function testForRPZDuration($value)\n    {\n        if (($this->testForNumeric($value) !== true && preg_match('/^[0-9]*[mhdw]$/i', $value)) || $value >= 0) {\n            return true;\n        } else {\n            return 'Negative seconds found. The following formats are accepted: seconds (positive integer), or duration (positive integer) followed by a letter denoting scale (such as m, h, d, w for minutes, hours, days, weeks)';\n        }\n    }\n\n    public function testForRPZBehaviour($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 0 || $value > 5) {\n            return 'Invalid setting, valid range is 0-5 (0 = DROP, 1 = NXDOMAIN, 2 = NODATA, 3 = walled garden, 4 = PASSTHRU, 5 = TCP-only.';\n        }\n        return true;\n    }\n\n    public function testForSightingVisibility($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 0 || $value > 2) {\n            return 'Invalid setting, valid range is 0-2 (0 = Event owner, 1 = Sighting reporters, 2 = Everyone.';\n        }\n        return true;\n    }\n\n    public function sightingsBeforeHook($setting, $value)\n    {\n        if ($value == true) {\n            $this->updateDatabase('addSightings');\n        }\n        return true;\n    }\n\n    public function testForRPZSerial($value)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if (!preg_match('/^((\\$date(\\d*)|\\$time|\\d*))$/', $value)) {\n            return 'Invalid format.';\n        }\n        return true;\n    }\n\n    public function testForRPZNS($value)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if (!preg_match('/^\\w+(\\.\\w+)*(\\.?) \\w+(\\.\\w+)*$/', $value)) {\n            return 'Invalid format.';\n        }\n        return true;\n    }\n\n    public function zmqAfterHook($setting, $value)\n    {\n        $pubSubTool = $this->getPubSubTool();\n        // If we are trying to change the enable setting to false, we don't need to test anything, just kill the server and return true.\n        if ($setting == 'Plugin.ZeroMQ_enable') {\n            if ($value == false || $value == 0) {\n                $pubSubTool->killService();\n                return true;\n            }\n        } elseif (!Configure::read('Plugin.ZeroMQ_enable')) {\n            // If we are changing any other ZeroMQ settings but the feature is disabled, don't reload the service\n            return true;\n        }\n        $pubSubTool->reloadServer();\n        return true;\n    }\n\n    public function disableCacheAfterHook($setting, $value)\n    {\n        if ($value) {\n            $this->Event = ClassRegistry::init('Event');\n            App::uses('Folder', 'Utility');\n            App::uses('File', 'Utility');\n            // delete all cache files\n            foreach ($this->Event->export_types as $type => $settings) {\n                $dir = new Folder(APP . 'tmp/cached_exports/' . $type);\n                // No caches created for this type of export, move on\n                if ($dir == null) {\n                    continue;\n                }\n                $files = $dir->find('.*' . $settings['extension']);\n                foreach ($files as $file) {\n                    $file = new File($dir->pwd() . DS . $file);\n                    $file->delete();\n                    $file->close();\n                }\n            }\n        }\n        return true;\n    }\n\n    public function correlationAfterHook($setting, $value)\n    {\n        if (!Configure::read('MISP.background_jobs')) {\n            $this->Attribute = ClassRegistry::init('Attribute');\n            if ($value) {\n                $k = $this->Attribute->purgeCorrelations();\n            } else {\n                $k = $this->Attribute->generateCorrelation();\n            }\n        } else {\n            if ($value == true) {\n                $jobType = 'jobPurgeCorrelation';\n                $jobTypeText = 'purge correlations';\n            } else {\n                $jobType = 'jobGenerateCorrelation';\n                $jobTypeText = 'generate correlation';\n            }\n            $job = ClassRegistry::init('Job');\n            $job->create();\n            $data = array(\n                    'worker' => 'default',\n                    'job_type' => $jobTypeText,\n                    'job_input' => 'All attributes',\n                    'status' => 0,\n                    'retries' => 0,\n                    'org' => 'ADMIN',\n                    'message' => 'Job created.',\n            );\n            $job->save($data);\n            $jobId = $job->id;\n            $process_id = CakeResque::enqueue(\n                    'default',\n                    'AdminShell',\n                    array($jobType, $jobId),\n                    true\n            );\n            $job->saveField('process_id', $process_id);\n        }\n    }\n\n    public function ipLogBeforeHook($setting, $value)\n    {\n        if ($setting == 'MISP.log_client_ip') {\n            if ($value == true) {\n                $this->updateDatabase('addIPLogging');\n            }\n        }\n        return true;\n    }\n\n    public function customAuthBeforeHook($setting, $value)\n    {\n        if (!empty($value)) {\n            $this->updateDatabase('addCustomAuth');\n        }\n        $this->cleanCacheFiles();\n        return true;\n    }\n\n    // never come here directly, always go through a secondary check like testForTermsFile in order to also pass along the expected file path\n    private function __testForFile($value, $path)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if (!$this->checkFilename($value)) {\n            return 'Invalid filename.';\n        }\n        $file = $path . DS . $value;\n        if (!file_exists($file)) {\n            return 'Could not find the specified file. Make sure that it is uploaded into the following directory: ' . $path;\n        }\n        return true;\n    }\n\n    private function __serverSettingNormaliseValue($data, $value, $setting)\n    {\n        if (!empty($data['type'])) {\n            if ($data['type'] == 'boolean') {\n                $value = $value ? true : false;\n            } elseif ($data['type'] == 'numeric') {\n                $value = intval($value);\n            }\n        }\n        return $value;\n    }\n\n    public function getSettingData($setting_name)\n    {\n        // invalidate config.php from php opcode cache\n        if (function_exists('opcache_reset')) {\n            opcache_reset();\n        }\n        if (strpos($setting_name, 'Plugin.Enrichment') !== false || strpos($setting_name, 'Plugin.Import') !== false || strpos($setting_name, 'Plugin.Export') !== false || strpos($setting_name, 'Plugin.Cortex') !== false) {\n            $serverSettings = $this->getCurrentServerSettings();\n        } else {\n            $serverSettings = $this->serverSettings;\n        }\n        $relevantSettings = (array_intersect_key(Configure::read(), $serverSettings));\n        $setting = false;\n        foreach ($serverSettings as $k => $s) {\n            if (isset($s['branch'])) {\n                foreach ($s as $ek => $es) {\n                    if ($ek != 'branch') {\n                        if ($setting_name == $k . '.' . $ek) {\n                            $setting = $es;\n                            continue 2;\n                        }\n                    }\n                }\n            } else {\n                if ($setting_name == $k) {\n                    $setting = $s;\n                    continue;\n                }\n            }\n        }\n        if (!empty($setting)) {\n            $setting['name'] = $setting_name;\n        }\n        return $setting;\n    }\n\n    public function serverSettingsEditValue($user, $setting, $value, $forceSave = false)\n    {\n        if (isset($setting['beforeHook'])) {\n            $beforeResult = call_user_func_array(array($this, $setting['beforeHook']), array($setting['name'], $value));\n            if ($beforeResult !== true) {\n                $this->Log = ClassRegistry::init('Log');\n                $this->Log->create();\n                $result = $this->Log->save(array(\n                        'org' => $user['Organisation']['name'],\n                        'model' => 'Server',\n                        'model_id' => 0,\n                        'email' => $user['email'],\n                        'action' => 'serverSettingsEdit',\n                        'user_id' => $user['id'],\n                        'title' => 'Server setting issue',\n                        'change' => 'There was an issue witch changing ' . $setting['name'] . ' to ' . $value  . '. The error message returned is: ' . $beforeResult . 'No changes were made.',\n                ));\n                return $beforeResult;\n            }\n        }\n        $value = trim($value);\n        if ($setting['type'] == 'boolean') {\n            $value = ($value ? true : false);\n        }\n        if ($setting['type'] == 'numeric') {\n            $value = intval($value);\n        }\n        if (!empty($setting['test'])) {\n            $testResult = $this->{$setting['test']}($value);\n        } else {\n            $testResult = true;  # No test defined for this setting: cannot fail\n        }\n        if (!$forceSave && $testResult !== true) {\n            if ($testResult === false) {\n                $errorMessage = $setting['errorMessage'];\n            } else {\n                $errorMessage = $testResult;\n            }\n            return $errorMessage;\n        } else {\n            $oldValue = Configure::read($setting['name']);\n            $settingSaveResult = $this->serverSettingsSaveValue($setting['name'], $value);\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            if ($settingSaveResult) {\n                $result = $this->Log->save(array(\n                        'org' => $user['Organisation']['name'],\n                        'model' => 'Server',\n                        'model_id' => 0,\n                        'email' => $user['email'],\n                        'action' => 'serverSettingsEdit',\n                        'user_id' => $user['id'],\n                        'title' => 'Server setting changed',\n                        'change' => $setting['name'] . ' (' . $oldValue . ') => (' . $value . ')',\n                ));\n                // execute after hook\n                if (isset($setting['afterHook'])) {\n                    $afterResult = call_user_func_array(array($this, $setting['afterHook']), array($setting['name'], $value));\n                    if ($afterResult !== true) {\n                        $this->Log->create();\n                        $result = $this->Log->save(array(\n                                'org' => $user['Organisation']['name'],\n                                'model' => 'Server',\n                                'model_id' => 0,\n                                'email' => $user['email'],\n                                'action' => 'serverSettingsEdit',\n                                'user_id' => $user['id'],\n                                'title' => 'Server setting issue',\n                                'change' => 'There was an issue after setting a new setting. The error message returned is: ' . $afterResult,\n                        ));\n                        return $afterResult;\n                    }\n                }\n                return true;\n            } else {\n                return __('Something went wrong. MISP tried to save a malformed config file. Setting change reverted.');\n            }\n        }\n    }\n\n    public function serverSettingsSaveValue($setting, $value)\n    {\n        // validate if current config.php is intact:\n        $current = file_get_contents(APP . 'Config' . DS . 'config.php');\n        $current = trim($current);\n        if (strlen($current) < 20) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: Tried to modify server settings but current config is broken.',\n            ));\n            return false;\n        }\n        copy(APP . 'Config' . DS . 'config.php', APP . 'Config' . DS . 'config.php.bk');\n        $settingObject = $this->getCurrentServerSettings();\n        foreach ($settingObject as $branchName => $branch) {\n            if (!isset($branch['level'])) {\n                foreach ($branch as $settingName => $settingObject) {\n                    if ($setting == $branchName . '.' . $settingName) {\n                        $value = $this->__serverSettingNormaliseValue($settingObject, $value, $setting);\n                    }\n                }\n            } else {\n                if ($setting == $branchName) {\n                    $value = $this->__serverSettingNormaliseValue($branch, $value, $setting);\n                }\n            }\n        }\n        Configure::write($setting, $value);\n        $arrayFix = array(\n            'Security.auth',\n            'ApacheSecureAuth.ldapFilter'\n        );\n        foreach ($arrayFix as $settingFix) {\n            if (Configure::read($settingFix) && is_array(Configure::read($settingFix)) && !empty(Configure::read($settingFix))) {\n                $arrayElements = array();\n                foreach (Configure::read($settingFix) as $array) {\n                    if (!in_array($array, $arrayElements)) {\n                        $arrayElements[] = $array;\n                    }\n                }\n                Configure::write($settingFix, $arrayElements);\n            }\n        }\n        $settingsToSave = array(\n            'debug', 'MISP', 'GnuPG', 'SMIME', 'Proxy', 'SecureAuth',\n            'Security', 'Session.defaults', 'Session.timeout', 'Session.cookieTimeout',\n            'Session.autoRegenerate', 'Session.checkAgent', 'site_admin_debug',\n            'Plugin', 'CertAuth', 'ApacheShibbAuth', 'ApacheSecureAuth'\n        );\n        $settingsArray = array();\n        foreach ($settingsToSave as $setting) {\n            $settingsArray[$setting] = Configure::read($setting);\n        }\n        $settingsString = var_export($settingsArray, true);\n        $settingsString = '<?php' . \"\\n\" . '$config = ' . $settingsString . ';';\n        if (function_exists('opcache_reset')) {\n            opcache_reset();\n        }\n        if (empty(Configure::read('MISP.server_settings_skip_backup_rotate'))) {\n            $randomFilename = $this->generateRandomFileName();\n            // To protect us from 2 admin users having a concurent file write to the config file, solar flares and the bogeyman\n            file_put_contents(APP . 'Config' . DS . $randomFilename, $settingsString);\n            rename(APP . 'Config' . DS . $randomFilename, APP . 'Config' . DS . 'config.php');\n            $config_saved = file_get_contents(APP . 'Config' . DS . 'config.php');\n            // if the saved config file is empty, restore the backup.\n            if (strlen($config_saved) < 20) {\n                copy(APP . 'Config' . DS . 'config.php.bk', APP . 'Config' . DS . 'config.php');\n                $this->Log = ClassRegistry::init('Log');\n                $this->Log->create();\n                $this->Log->save(array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => $id,\n                        'email' => 'SYSTEM',\n                        'action' => 'error',\n                        'user_id' => 0,\n                        'title' => 'Error: Something went wrong saving the config file, reverted to backup file.',\n                ));\n                return false;\n            }\n        } else {\n            file_put_contents(APP . 'Config' . DS . 'config.php', $settingsString);\n        }\n        return true;\n    }\n\n    public function checkVersion($newest)\n    {\n        $version_array = $this->checkMISPVersion();\n        $current = 'v' . $version_array['major'] . '.' . $version_array['minor'] . '.' . $version_array['hotfix'];\n        $newest_array = $this->__dissectVersion($newest);\n        $upToDate = $this->__compareVersions(array($version_array['major'], $version_array['minor'], $version_array['hotfix']), $newest_array, 0);\n        return array('current' => $current, 'newest' => $newest, 'upToDate' => $upToDate);\n    }\n\n    private function __dissectVersion($version)\n    {\n        $version = substr($version, 1);\n        return explode('.', $version);\n    }\n\n    private function __compareVersions($current, $newest, $i)\n    {\n        if ($current[$i] == $newest[$i]) {\n            if ($i < 2) {\n                return $this->__compareVersions($current, $newest, $i+1);\n            } else {\n                return 'same';\n            }\n        } elseif ($current[$i] < $newest[$i]) {\n            return 'older';\n        } else {\n            return 'newer';\n        }\n    }\n\n    public function getFileRules()\n    {\n        $validItems = array(\n                'orgs' => array(\n                        'name' => __('Organisation logos'),\n                        'description' => __('The logo used by an organisation on the event index, event view, discussions, proposals, etc. Make sure that the filename is in the org.png format, where org is the case-sensitive organisation name.'),\n                        'expected' => array(),\n                        'valid_format' => __('48x48 pixel .png files'),\n                        'path' => APP . 'webroot' . DS . 'img' . DS . 'orgs',\n                        'regex' => '.*\\.(png|PNG)$',\n                        'regex_error' => __('Filename must be in the following format: *.png'),\n                        'files' => array(),\n                ),\n                'img' => array(\n                        'name' => __('Additional image files'),\n                        'description' => __('Image files uploaded into this directory can be used for various purposes, such as for the login page logos'),\n                        'expected' => array(\n                                'MISP.footer_logo' => Configure::read('MISP.footer_logo'),\n                                'MISP.home_logo' => Configure::read('MISP.home_logo'),\n                                'MISP.welcome_logo' => Configure::read('MISP.welcome_logo'),\n                                'MISP.welcome_logo2' => Configure::read('MISP.welcome_logo2'),\n                        ),\n                        'valid_format' => __('text/html if served inline, anything that conveys the terms of use if served as download'),\n                        'path' => APP . 'webroot' . DS . 'img' . DS . 'custom',\n                        'regex' => '.*\\.(png|PNG)$',\n                        'regex_error' => __('Filename must be in the following format: *.png'),\n                        'files' => array(),\n                ),\n        );\n        return $validItems;\n    }\n\n    public function grabFiles()\n    {\n        $validItems = $this->getFileRules();\n        App::uses('Folder', 'Utility');\n        App::uses('File', 'Utility');\n        foreach ($validItems as $k => $item) {\n            $dir = new Folder($item['path']);\n            $files = $dir->find($item['regex'], true);\n            foreach ($files as $file) {\n                $f = new File($item['path'] . DS . $file);\n                $validItems[$k]['files'][] = array('filename' => $file, 'filesize' => $f->size(), 'read' => $f->readable(), 'write' => $f->writable(), 'execute' => $f->executable());\n            }\n        }\n        return $validItems;\n    }\n\n    public function runConnectionTest($id)\n    {\n        $server = $this->find('first', array('conditions' => array('Server.id' => $id)));\n        $HttpSocket = $this->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $uri = $server['Server']['url'] . '/servers/getVersion';\n        try {\n            $response = $HttpSocket->get($uri, false, $request);\n        } catch (Exception $e) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: Connection test failed. Reason: ' . json_encode($e->getMessage()),\n            ));\n            return array('status' => 2);\n        }\n        if ($response->isOk()) {\n            return array('status' => 1, 'message' => $response->body());\n        } else {\n            if ($response->code == '403') {\n                return array('status' => 4);\n            }\n            if ($response->code == '405') {\n                try {\n                    $responseText = json_decode($response->body, true)['message'];\n                } catch (Exception $e) {\n                    return array('status' => 3);\n                }\n                if ($responseText === 'Your user account is expecting a password change, please log in via the web interface and change it before proceeding.') {\n                    return array('status' => 5);\n                } elseif ($responseText === 'You have not accepted the terms of use yet, please log in via the web interface and accept them.') {\n                    return array('status' => 6);\n                }\n            }\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: Connection test failed. Returned data is in the change field.',\n                    'change' => sprintf(\n                        'response () => (%s), response-code () => (%s)',\n                        $response->body,\n                        $response->code\n                    )\n            ));\n            return array('status' => 3);\n        }\n    }\n\n    public function runPOSTtest($id)\n    {\n        $server = $this->find('first', array('conditions' => array('Server.id' => $id)));\n        $HttpSocket = $this->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $testFile = file_get_contents(APP . 'files/scripts/test_payload.txt');\n        $uri = $server['Server']['url'] . '/servers/postTest';\n        $this->Log = ClassRegistry::init('Log');\n        try {\n            $response = $HttpSocket->post($uri, json_encode(array('testString' => $testFile)), $request);\n            $response = json_decode($response, true);\n        } catch (Exception $e) {\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: POST connection test failed. Reason: ' . json_encode($e->getMessage()),\n            ));\n            return 8;\n        }\n        if (!isset($response['body']['testString']) || $response['body']['testString'] !== $testFile) {\n            $responseString = isset($response['body']['testString']) ? $response['body']['testString'] : 'Response was empty.';\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: POST connection test failed due to the message body not containing the expected data. Response: ' . PHP_EOL . PHP_EOL . $responseString,\n            ));\n            return 9;\n        }\n        $headers = array('Accept', 'Content-type');\n        foreach ($headers as $header) {\n            if (!isset($response['headers'][$header]) || $response['headers'][$header] != 'application/json') {\n                $responseHeader = isset($response['headers'][$header]) ? $response['headers'][$header] : 'Header was not set.';\n                $this->Log->create();\n                $this->Log->save(array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => $id,\n                        'email' => 'SYSTEM',\n                        'action' => 'error',\n                        'user_id' => 0,\n                        'title' => 'Error: POST connection test failed due to a header not matching the expected value. Expected: \"application/json\", received \"' . $responseHeader,\n                ));\n                return 10;\n            }\n        }\n        return 1;\n    }\n\n    public function checkVersionCompatibility($id, $user = array(), $HttpSocket = false)\n    {\n        // for event publishing when we don't have a user.\n        if (empty($user)) {\n            $user = array('Organisation' => array('name' => 'SYSTEM'), 'email' => 'SYSTEM', 'id' => 0);\n        }\n        App::uses('Folder', 'Utility');\n        $file = new File(ROOT . DS . 'VERSION.json', true);\n        $localVersion = json_decode($file->read(), true);\n        $file->close();\n        $server = $this->find('first', array('conditions' => array('Server.id' => $id)));\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        $request = $this->setupSyncRequest($server);\n        $uri = $server['Server']['url'] . '/servers/getVersion';\n        try {\n            $response = $HttpSocket->get($uri, '', $request);\n        } catch (Exception $e) {\n            $error = $e->getMessage();\n        }\n        if (!isset($response) || $response->code != '200') {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            if (isset($response->code)) {\n                $title = 'Error: Connection to the server has failed.' . (isset($response->code) ? ' Returned response code: ' . $response->code : '');\n            } else {\n                $title = 'Error: Connection to the server has failed. The returned exception\\'s error message was: ' . $e->getMessage();\n            }\n            $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => 'error',\n                    'user_id' => $user['id'],\n                    'title' => $title\n            ));\n            return $title;\n        }\n        $remoteVersion = json_decode($response->body, true);\n        $canPush = isset($remoteVersion['perm_sync']) ? $remoteVersion['perm_sync'] : false;\n        $remoteVersion = explode('.', $remoteVersion['version']);\n        if (!isset($remoteVersion[0])) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $message = __('Error: Server didn\\'t send the expected response. This may be because the remote server version is outdated.');\n            $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => 'error',\n                    'user_id' => $user['id'],\n                    'title' => $message,\n            ));\n            return $message;\n        }\n        $response = false;\n        $success = false;\n        $issueLevel = \"warning\";\n        if ($localVersion['major'] > $remoteVersion[0]) {\n            $response = \"Sync to Server ('\" . $id . \"') aborted. The remote instance's MISP version is behind by a major version.\";\n        }\n        if ($response === false && $localVersion['major'] < $remoteVersion[0]) {\n            $response = \"Sync to Server ('\" . $id . \"') aborted. The remote instance is at least a full major version ahead - make sure you update your MISP instance!\";\n        }\n        if ($response === false && $localVersion['minor'] > $remoteVersion[1]) {\n            $response = \"Sync to Server ('\" . $id . \"') aborted. The remote instance's MISP version is behind by a minor version.\";\n        }\n        if ($response === false && $localVersion['minor'] < $remoteVersion[1]) {\n            $response = \"Sync to Server ('\" . $id . \"') aborted. The remote instance is at least a full minor version ahead - make sure you update your MISP instance!\";\n        }\n\n        // if we haven't set a message yet, we're good to go. We are only behind by a hotfix version\n        if ($response === false) {\n            $success = true;\n        } else {\n            $issueLevel = \"error\";\n        }\n        if ($response === false && $localVersion['hotfix'] > $remoteVersion[2]) {\n            $response = \"Sync to Server ('\" . $id . \"') initiated, but the remote instance is a few hotfixes behind.\";\n        }\n        if ($response === false && $localVersion['hotfix'] < $remoteVersion[2]) {\n            $response = \"Sync to Server ('\" . $id . \"') initiated, but the remote instance is a few hotfixes ahead. Make sure you keep your instance up to date!\";\n        }\n        if (empty($response) && $remoteVersion[2] < 111) {\n            $response = \"Sync to Server ('\" . $id . \"') initiated, but version 2.4.111 is required in order to be able to pull proposals from the remote side.\";\n        }\n\n        if ($response !== false) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => $issueLevel,\n                    'user_id' => $user['id'],\n                    'title' => ucfirst($issueLevel) . ': ' . $response,\n            ));\n        }\n        return array('success' => $success, 'response' => $response, 'canPush' => $canPush, 'version' => $remoteVersion);\n    }\n\n    public function isJson($string)\n    {\n        return (json_last_error() == JSON_ERROR_NONE);\n    }\n\n    public function captureServer($server, $user)\n    {\n        if (isset($server[0])) {\n            $server = $server[0];\n        }\n        if ($server['url'] == Configure::read('MISP.baseurl')) {\n            return 0;\n        }\n        $existingServer = $this->find('first', array(\n                'recursive' => -1,\n                'conditions' => array('url' => $server['url'])\n        ));\n        // unlike with other capture methods, if we find a server that we don't know\n        // we don't want to save it.\n        if (empty($existingServer)) {\n            return false;\n        }\n        return $existingServer[$this->alias]['id'];\n    }\n\n    public function dbSpaceUsage()\n    {\n        $dataSource = $this->getDataSource()->config['datasource'];\n        if ($dataSource == 'Database/Mysql') {\n            $sql = sprintf(\n                'select table_name, sum((data_length+index_length)/1024/1024) AS used, sum(data_free)/1024/1024 reclaimable from information_schema.tables where table_schema = %s group by table_name;',\n                \"'\" . $this->getDataSource()->config['database'] . \"'\"\n            );\n            $sqlResult = $this->query($sql);\n            $result = array();\n            foreach ($sqlResult as $temp) {\n                foreach ($temp[0] as $k => $v) {\n                    $temp[0][$k] = round($v, 2) . 'MB';\n                }\n                $temp[0]['table'] = $temp['tables']['table_name'];\n                $result[] = $temp[0];\n            }\n            return $result;\n        }\n        else if ($dataSource == 'Database/Postgres') {\n            $sql = sprintf(\n                'select table_name as table, pg_total_relation_size(%s||%s||table_name) as used from information_schema.tables where table_schema = %s group by table_name;',\n                \"'\" . $this->getDataSource()->config['database'] . \"'\",\n                \"'.'\",\n                \"'\" . $this->getDataSource()->config['database'] . \"'\"\n            );\n            $sqlResult = $this->query($sql);\n            $result = array();\n            foreach ($sqlResult as $temp) {\n                foreach ($temp[0] as $k => $v) {\n                    if ($k == \"table\") {\n                        continue;\n                    }\n                    $temp[0][$k] = round($v / 1024 / 1024, 2) . 'MB';\n                }\n                $temp[0]['reclaimable'] = '0MB';\n                $result[] = $temp[0];\n            }\n            return $result;\n        }\n\n    }\n\n    public function writeableDirsDiagnostics(&$diagnostic_errors)\n    {\n        App::uses('File', 'Utility');\n        App::uses('Folder', 'Utility');\n        // check writeable directories\n        $writeableDirs = array(\n                '/tmp' => 0,\n                APP . 'tmp' => 0,\n                APP . 'files' => 0,\n                APP . 'files' . DS . 'scripts' . DS . 'tmp' => 0,\n                APP . 'tmp' . DS . 'csv_all' => 0,\n                APP . 'tmp' . DS . 'csv_sig' => 0,\n                APP . 'tmp' . DS . 'md5' => 0,\n                APP . 'tmp' . DS . 'sha1' => 0,\n                APP . 'tmp' . DS . 'snort' => 0,\n                APP . 'tmp' . DS . 'suricata' => 0,\n                APP . 'tmp' . DS . 'text' => 0,\n                APP . 'tmp' . DS . 'xml' => 0,\n                APP . 'tmp' . DS . 'files' => 0,\n                APP . 'tmp' . DS . 'logs' => 0,\n                APP . 'tmp' . DS . 'bro' => 0,\n        );\n        foreach ($writeableDirs as $path => &$error) {\n            $dir = new Folder($path);\n            if (is_null($dir->path)) {\n                $error = 1;\n            }\n            $file = new File($path . DS . 'test.txt', true);\n            if ($error == 0 && !$file->write('test')) {\n                $error = 2;\n            }\n            if ($error != 0) {\n                $diagnostic_errors++;\n            }\n            $file->delete();\n            $file->close();\n        }\n        return $writeableDirs;\n    }\n\n    public function writeableFilesDiagnostics(&$diagnostic_errors)\n    {\n        $writeableFiles = array(\n                APP . 'Config' . DS . 'config.php' => 0,\n                ROOT .  DS . '.git' . DS . 'ORIG_HEAD' => 0,\n        );\n        foreach ($writeableFiles as $path => &$error) {\n            if (!file_exists($path)) {\n                $error = 1;\n                continue;\n            }\n            if (!is_writeable($path)) {\n                $error = 2;\n                $diagnostic_errors++;\n            }\n        }\n        return $writeableFiles;\n    }\n\n    public function readableFilesDiagnostics(&$diagnostic_errors)\n    {\n        $readableFiles = array(\n                APP . 'files' . DS . 'scripts' . DS . 'stixtest.py' => 0\n        );\n        foreach ($readableFiles as $path => &$error) {\n            if (!is_readable($path)) {\n                $error = 1;\n                continue;\n            }\n        }\n        return $readableFiles;\n    }\n\n    public function yaraDiagnostics(&$diagnostic_errors)\n    {\n        $scriptResult = shell_exec($this->getPythonVersion() . ' ' . APP . 'files' . DS . 'scripts' . DS . 'yaratest.py');\n        $scriptResult = json_decode($scriptResult, true);\n        return array('operational' => $scriptResult['success'], 'plyara' => $scriptResult['plyara']);\n    }\n\n    public function stixDiagnostics(&$diagnostic_errors, &$stixVersion, &$cyboxVersion, &$mixboxVersion, &$maecVersion, &$stix2Version, &$pymispVersion)\n    {\n        $result = array();\n        $expected = array('stix' => '1.2.0.6', 'cybox' => '2.1.0.18.dev0', 'mixbox' => '1.0.3', 'maec' => '4.1.0.14', 'stix2' => '1.1.2', 'pymisp' => '>2.4.93');\n        // check if the STIX and Cybox libraries are working using the test script stixtest.py\n        $scriptResult = shell_exec($this->getPythonVersion() . ' ' . APP . 'files' . DS . 'scripts' . DS . 'stixtest.py');\n        $scriptResult = json_decode($scriptResult, true);\n        if ($scriptResult == null) {\n            return array('operational' => 0, 'stix' => array('expected' => $expected['stix']), 'cybox' => array('expected' => $expected['cybox']), 'mixbox' => array('expected' => $expected['mixbox']), 'maec' => array('expected' => $expected['maec']), 'stix2' => array('expected' => $expected['stix2']), 'pymisp' => array('expected' => $expected['pymisp']));\n        }\n        $scriptResult['operational'] = $scriptResult['success'];\n        if ($scriptResult['operational'] == 0) {\n            $diagnostic_errors++;\n        }\n        $result['operational'] = $scriptResult['operational'];\n        foreach ($expected as $package => $version) {\n            $result[$package]['version'] = $scriptResult[$package];\n            $result[$package]['expected'] = $expected[$package];\n            if ($expected[$package][0] === '>') {\n                $expected[$package] = trim($expected[$package], '>');\n                $result[$package]['status'] = (version_compare($result[$package]['version'], $expected[$package]) >= 0) ? 1 : 0;\n            } else {\n                $result[$package]['status'] = $result[$package]['version'] == $result[$package]['expected'] ? 1 : 0;\n            }\n            if ($result[$package]['status'] == 0) {\n                $diagnostic_errors++;\n            }\n            ${$package . 'Version'}[0] = str_replace('$current', $result[$package]['version'], ${$package . 'Version'}[0]);\n            ${$package . 'Version'}[0] = str_replace('$expected', $result[$package]['expected'], ${$package . 'Version'}[0]);\n        }\n        return $result;\n    }\n\n    public function gpgDiagnostics(&$diagnostic_errors)\n    {\n        $gpgStatus = 0;\n        if (Configure::read('GnuPG.email') && Configure::read('GnuPG.homedir')) {\n            $continue = true;\n            try {\n                require_once 'Crypt/GPG.php';\n                $gpg = new Crypt_GPG(array('homedir' => Configure::read('GnuPG.homedir'), 'gpgconf' => Configure::read('GnuPG.gpgconf'), 'binary' => (Configure::read('GnuPG.binary') ? Configure::read('GnuPG.binary') : '/usr/bin/gpg')));\n            } catch (Exception $e) {\n                $gpgStatus = 2;\n                $continue = false;\n            }\n            if ($continue) {\n                try {\n                    $key = $gpg->addSignKey(Configure::read('GnuPG.email'), Configure::read('GnuPG.password'));\n                } catch (Exception $e) {\n                    $gpgStatus = 3;\n                    $continue = false;\n                }\n            }\n            if ($continue) {\n                try {\n                    $gpgStatus = 0;\n                    $signed = $gpg->sign('test', Crypt_GPG::SIGN_MODE_CLEAR);\n                } catch (Exception $e) {\n                    $gpgStatus = 4;\n                }\n            }\n        } else {\n            $gpgStatus = 1;\n        }\n        if ($gpgStatus != 0) {\n            $diagnostic_errors++;\n        }\n        return $gpgStatus;\n    }\n\n    public function zmqDiagnostics(&$diagnostic_errors)\n    {\n        if (!Configure::read('Plugin.ZeroMQ_enable')) {\n            return 1;\n        }\n        $pubSubTool = $this->getPubSubTool();\n        if (!$pubSubTool->checkIfPythonLibInstalled()) {\n            $diagnostic_errors++;\n            return 2;\n        }\n        if ($pubSubTool->checkIfRunning()) {\n            return 0;\n        }\n        $diagnostic_errors++;\n        return 3;\n    }\n\n    public function moduleDiagnostics(&$diagnostic_errors, $type = 'Enrichment')\n    {\n        $this->Module = ClassRegistry::init('Module');\n        $types = array('Enrichment', 'Import', 'Export', 'Cortex');\n        $diagnostic_errors++;\n        if (Configure::read('Plugin.' . $type . '_services_enable')) {\n            $exception = false;\n            $result = $this->Module->getModules(false, $type, $exception);\n            if ($exception) {\n                return $exception;\n            }\n            if (empty($result)) {\n                return 2;\n            }\n            $diagnostic_errors--;\n            return 0;\n        }\n        return 1;\n    }\n\n    public function proxyDiagnostics(&$diagnostic_errors)\n    {\n        $proxyStatus = 0;\n        $proxy = Configure::read('Proxy');\n        if (!empty($proxy['host'])) {\n            App::uses('SyncTool', 'Tools');\n            $syncTool = new SyncTool();\n            try {\n                $HttpSocket = $syncTool->setupHttpSocket();\n                $proxyResponse = $HttpSocket->get('https://www.github.com/');\n            } catch (Exception $e) {\n                $proxyStatus = 2;\n            }\n            if (empty($proxyResponse) || $proxyResponse->code > 399) {\n                $proxyStatus = 2;\n            }\n        } else {\n            $proxyStatus = 1;\n        }\n        if ($proxyStatus > 1) {\n            $diagnostic_errors++;\n        }\n        return $proxyStatus;\n    }\n\n    public function sessionDiagnostics(&$diagnostic_errors = 0, &$sessionCount = '')\n    {\n        if (Configure::read('Session.defaults') !== 'database') {\n            $sessionCount = 'N/A';\n            return 2;\n        }\n        $sql = 'SELECT COUNT(id) AS session_count FROM cake_sessions WHERE expires < ' . time() . ';';\n        $sqlResult = $this->query($sql);\n        if (isset($sqlResult[0][0])) {\n            $sessionCount = $sqlResult[0][0]['session_count'];\n        } else {\n            $sessionCount = 'Error';\n            return 3;\n        }\n        if ($sessionCount > 1000) {\n            $diagnostic_errors++;\n            return 1;\n        }\n        return 0;\n    }\n\n    public function workerDiagnostics(&$workerIssueCount)\n    {\n        try {\n            $this->ResqueStatus = new ResqueStatus\\ResqueStatus(Resque::redis());\n        } catch (Exception $e) {\n            // redis connection failed\n            return array(\n                    'cache' => array('ok' => false),\n                    'default' => array('ok' => false),\n                    'email' => array('ok' => false),\n                    'prio' => array('ok' => false),\n                    'scheduler' => array('ok' => false)\n            );\n        }\n        $workers = $this->ResqueStatus->getWorkers();\n        if (function_exists('posix_getpwuid')) {\n            $currentUser = posix_getpwuid(posix_geteuid());\n            $currentUser = $currentUser['name'];\n        } else {\n            $currentUser = trim(shell_exec('whoami'));\n        }\n        $worker_array = array(\n                'cache' => array('ok' => true),\n                'default' => array('ok' => true),\n                'email' => array('ok' => true),\n                'prio' => array('ok' => true),\n                'scheduler' => array('ok' => true)\n        );\n        $procAccessible = file_exists('/proc');\n        foreach ($workers as $pid => $worker) {\n            $entry = ($worker['type'] == 'regular') ? $worker['queue'] : $worker['type'];\n            $correct_user = ($currentUser === $worker['user']);\n            if (!is_numeric($pid)) {\n                throw new MethodNotAllowedException('Non numeric PID found.');\n            }\n            if ($procAccessible) {\n                $alive = $correct_user ? (file_exists('/proc/' . addslashes($pid))) : false;\n            } else {\n                $alive = 'N/A';\n            }\n            $ok = true;\n            if (!$alive || !$correct_user) {\n                $ok = false;\n                $workerIssueCount++;\n                $worker_array[$entry]['ok'] = false;\n            }\n            $worker_array[$entry]['workers'][] = array('pid' => $pid, 'user' => $worker['user'], 'alive' => $alive, 'correct_user' => $correct_user, 'ok' => $ok);\n        }\n        foreach ($worker_array as $k => $queue) {\n            if ($k != 'scheduler') {\n                $worker_array[$k]['jobCount'] = CakeResque::getQueueSize($k);\n            }\n            if (!isset($queue['workers'])) {\n                $workerIssueCount++;\n                $worker_array[$k]['ok'] = false;\n            }\n        }\n        $worker_array['proc_accessible'] = $procAccessible;\n        $worker_array['controls'] = 1;\n        if (Configure::check('MISP.manage_workers')) {\n            $worker_array['controls'] = Configure::read('MISP.manage_workers');\n        }\n        return $worker_array;\n    }\n\n    public function retrieveCurrentSettings($branch, $subString)\n    {\n        $settings = array();\n        foreach ($this->serverSettings[$branch] as $settingName => $setting) {\n            if (strpos($settingName, $subString) !== false) {\n                $settings[$settingName] = $setting['value'];\n                if (Configure::read('Plugin.' . $settingName)) {\n                    $settings[$settingName] = Configure::read('Plugin.' . $settingName);\n                }\n                if (isset($setting['options'])) {\n                    $settings[$settingName] = $setting['options'][$settings[$settingName]];\n                }\n            }\n        }\n        return $settings;\n    }\n\n    public function killWorker($pid, $user)\n    {\n        if (!is_numeric($pid)) {\n            throw new MethodNotAllowedException('Non numeric PID found!');\n        }\n        $this->ResqueStatus = new ResqueStatus\\ResqueStatus(Resque::redis());\n        $workers = $this->ResqueStatus->getWorkers();\n        $this->Log = ClassRegistry::init('Log');\n        if (isset($workers[$pid])) {\n            $worker = $workers[$pid];\n            if (substr_count(trim(shell_exec('ps -p ' . $pid)), PHP_EOL) > 0 ? true : false) {\n                shell_exec('kill ' . $pid . ' > /dev/null 2>&1 &');\n                $this->__logRemoveWorker($user, $pid, $worker['queue'], false);\n            } else {\n                $this->ResqueStatus->removeWorker($pid);\n                $this->__logRemoveWorker($user, $pid, $worker['queue'], true);\n            }\n            $this->ResqueStatus->removeWorker($pid);\n        }\n    }\n\n    public function workerRemoveDead($user = false)\n    {\n        $this->ResqueStatus = new ResqueStatus\\ResqueStatus(Resque::redis());\n        $workers = $this->ResqueStatus->getWorkers();\n        if (function_exists('posix_getpwuid')) {\n            $currentUser = posix_getpwuid(posix_geteuid());\n            $currentUser = $currentUser['name'];\n        } else {\n            $currentUser = trim(shell_exec('whoami'));\n        }\n        foreach ($workers as $pid => $worker) {\n            if (!is_numeric($pid)) {\n                throw new MethodNotAllowedException('Non numeric PID found!');\n            }\n            $pidTest = substr_count(trim(shell_exec('ps -p ' . $pid)), PHP_EOL) > 0 ? true : false;\n            if ($worker['user'] == $currentUser && !$pidTest) {\n                $this->ResqueStatus->removeWorker($pid);\n                $this->__logRemoveWorker($user, $pid, $worker['queue'], true);\n            }\n        }\n    }\n\n    private function __logRemoveWorker($user, $pid, $queue, $dead = false)\n    {\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        if (empty($user)) {\n            $user = array(\n                'id' => 0,\n                'Organisation' => array(\n                    'name' => 'SYSTEM'\n                ),\n                'email' => 'SYSTEM'\n            );\n        }\n        $type = $dead ? 'dead' : 'kill';\n        $text = array(\n            'dead' => array(\n                'action' => 'remove_dead_workers',\n                'title' => __('Removing a dead worker.'),\n                'change' => sprintf(__('Removing dead worker data. Worker was of type %s with pid %s'), $queue, $pid)\n            ),\n            'kill' => array(\n                'action' => 'stop_worker',\n                'title' => __('Stopping a worker.'),\n                'change' => sprintf(__('Stopping a worker. Worker was of type %s with pid %s'), $queue, $pid)\n            )\n        );\n        $this->Log->save(array(\n            'org' => $user['Organisation']['name'],\n            'model' => 'User',\n            'model_id' => $user['id'],\n            'email' => $user['email'],\n            'action' => $text[$type]['action'],\n            'user_id' => $user['id'],\n            'title' => $text[$type]['title'],\n            'change' => $text[$type]['change']\n        ));\n    }\n\n    /* returns the version string of a connected instance\n     * error codes:\n     * 1: received non json response\n     * 2: no route to host\n     * 3: empty result set\n     */\n    public function getRemoteVersion($id)\n    {\n        $server = $this->find('first', array(\n                'conditions' => array('Server.id' => $id),\n        ));\n        if (empty($server)) {\n            return 2;\n        }\n        App::uses('SyncTool', 'Tools');\n        $syncTool = new SyncTool();\n        $HttpSocket = $syncTool->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $response = $HttpSocket->get($server['Server']['url'] . '/servers/getVersion', $data = '', $request);\n        if ($response->code == 200) {\n            try {\n                $data = json_decode($response->body, true);\n            } catch (Exception $e) {\n                return 1;\n            }\n            if (isset($data['version']) && !empty($data['version'])) {\n                return $data['version'];\n            } else {\n                return 3;\n            }\n        }\n        return 2;\n    }\n\n\n    /* returns an array with the events\n     * error codes:\n     * 1: received non json response\n     * 2: no route to host\n     * 3: empty result set\n     */\n    public function previewIndex($id, $user, $passedArgs, &$total_count = 0)\n    {\n        $server = $this->find('first', array(\n            'conditions' => array('Server.id' => $id),\n        ));\n        if (empty($server)) {\n            return 2;\n        }\n        $HttpSocket = $this->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $validArgs = array_merge(array('sort', 'direction', 'page', 'limit'), $this->validEventIndexFilters);\n        $urlParams = '';\n        foreach ($validArgs as $v) {\n            if (isset($passedArgs[$v])) {\n                $urlParams .= '/' . $v . ':' . $passedArgs[$v];\n            }\n        }\n        $uri = $server['Server']['url'] . '/events/index' . $urlParams;\n        $response = $HttpSocket->get($uri, $data = '', $request);\n        if (!empty($response->headers['X-Result-Count'])) {\n            $temp = $response->headers['X-Result-Count'];\n            $total_count = $temp;\n        }\n        if ($response->code == 200) {\n            try {\n                $events = json_decode($response->body, true);\n            } catch (Exception $e) {\n                return 1;\n            }\n            if (!empty($events)) {\n                foreach ($events as $k => $event) {\n                    if (!isset($event['Orgc'])) {\n                        $event['Orgc']['name'] = $event['orgc'];\n                    }\n                    if (!isset($event['Org'])) {\n                        $event['Org']['name'] = $event['org'];\n                    }\n                    if (!isset($event['EventTag'])) {\n                        $event['EventTag'] = array();\n                    }\n                    $events[$k] = array('Event' => $event);\n                }\n            } else {\n                return 3;\n            }\n            return $events;\n        }\n        return 2;\n    }\n\n    /* returns an array with the events\n     * error codes:\n     * 1: received non-json response\n     * 2: no route to host\n     */\n    public function previewEvent($serverId, $eventId)\n    {\n        $server = $this->find('first', array(\n                'conditions' => array('Server.id' => $serverId),\n        ));\n        if (empty($server)) {\n            return 2;\n        }\n        $HttpSocket = $this->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $uri = $server['Server']['url'] . '/events/' . $eventId;\n        $response = $HttpSocket->get($uri, $data = '', $request);\n        if ($response->code == 200) {\n            try {\n                $event = json_decode($response->body, true);\n            } catch (Exception $e) {\n                return 1;\n            }\n            if (!isset($event['Event']['Orgc'])) {\n                $event['Event']['Orgc']['name'] = $event['Event']['orgc'];\n            }\n            if (isset($event['Event']['Orgc'][0])) {\n                $event['Event']['Orgc'] = $event['Event']['Orgc'][0];\n            }\n            if (!isset($event['Event']['Org'])) {\n                $event['Event']['Org']['name'] = $event['Event']['org'];\n            }\n            if (isset($event['Event']['Org'][0])) {\n                $event['Event']['Org'] = $event['Event']['Org'][0];\n            }\n            if (!isset($event['Event']['EventTag'])) {\n                $event['Event']['EventTag'] = array();\n            }\n            return $event;\n        }\n        return 2;\n    }\n\n    // Loops through all servers and checks which servers' push rules don't conflict with the given event.\n    // returns the server objects that would allow the event to be pushed\n    public function eventFilterPushableServers($event, $servers)\n    {\n        $eventTags = array();\n        $validServers = array();\n        foreach ($event['EventTag'] as $tag) {\n            $eventTags[] = $tag['tag_id'];\n        }\n        foreach ($servers as $server) {\n            $push_rules = json_decode($server['Server']['push_rules'], true);\n            if (!empty($push_rules['tags']['OR'])) {\n                $intersection = array_intersect($push_rules['tags']['OR'], $eventTags);\n                if (empty($intersection)) {\n                    continue;\n                }\n            }\n            if (!empty($push_rules['tags']['NOT'])) {\n                $intersection = array_intersect($push_rules['tags']['NOT'], $eventTags);\n                if (!empty($intersection)) {\n                    continue;\n                }\n            }\n            if (!empty($push_rules['orgs']['OR'])) {\n                if (!in_array($event['Event']['orgc_id'], $push_rules['orgs']['OR'])) {\n                    continue;\n                }\n            }\n            if (!empty($push_rules['orgs']['NOT'])) {\n                if (in_array($event['Event']['orgc_id'], $push_rules['orgs']['NOT'])) {\n                    continue;\n                }\n            }\n            $validServers[] = $server;\n        }\n        return $validServers;\n    }\n\n    public function extensionDiagnostics()\n    {\n        $results = array();\n        $extensions = array('redis', 'gd');\n        foreach ($extensions as $extension) {\n            $results['web']['extensions'][$extension] = extension_loaded($extension);\n        }\n        if (!is_readable(APP . '/files/scripts/selftest.php')) {\n            $results['cli'] = false;\n        } else {\n            $results['cli'] = exec('php ' . APP . '/files/scripts/selftest.php');\n            $results['cli'] = json_decode($results['cli'], true);\n        }\n        return $results;\n    }\n\n    public function databaseEncodingDiagnostics(&$diagnostic_errors)\n    {\n        if (!isset($this->getDataSource()->config['encoding']) || strtolower($this->getDataSource()->config['encoding']) != 'utf8') {\n            $diagnostic_errors++;\n            return false;\n        }\n        return true;\n    }\n\n    public function getLatestGitRemote()\n    {\n        return exec('timeout 3 git ls-remote https://github.com/MISP/MISP | head -1 | sed \"s/HEAD//\"');\n    }\n\n    public function getCurrentGitStatus()\n    {\n        $status = array();\n        $status['commit'] = exec('git rev-parse HEAD');\n        $status['branch'] = $this->getCurrentBranch();\n        $status['latestCommit'] = $this->getLatestGitremote();\n        return $status;\n    }\n\n    public function getCurrentBranch()\n    {\n        return exec(\"git symbolic-ref HEAD | sed 's!refs\\/heads\\/!!'\");\n    }\n\n    public function checkoutMain()\n    {\n        $mainBranch = '2.4';\n        return exec('git checkout ' . $mainBranch);\n    }\n\n    public function getSubmodulesGitStatus()\n    {\n        exec('cd ' . APP . '../; git submodule status --cached | grep -v ^- | cut -b 2- | cut -d \" \" -f 1,2 ', $submodules_names);\n        $status = array();\n        foreach ($submodules_names as $submodule_name_info) {\n            $submodule_name_info = explode(' ', $submodule_name_info);\n            $superproject_submodule_commit_id = $submodule_name_info[0];\n            $submodule_name = $submodule_name_info[1];\n            $temp = $this->getSubmoduleGitStatus($submodule_name, $superproject_submodule_commit_id);\n            if ( !empty($temp) ) {\n                $status[$submodule_name] = $temp;\n            }\n        }\n        return $status;\n    }\n\n    private function _isAcceptedSubmodule($submodule) {\n        $accepted_submodules_names = array('PyMISP',\n            'app/files/misp-galaxy',\n            'app/files/taxonomies',\n            'app/files/misp-objects',\n            'app/files/noticelists',\n            'app/files/warninglists',\n            'cti-python-stix2'\n        );\n        return in_array($submodule, $accepted_submodules_names);\n    }\n\n    public function getSubmoduleGitStatus($submodule_name, $superproject_submodule_commit_id) {\n        $status = array();\n        if ($this->_isAcceptedSubmodule($submodule_name)) {\n            $path = APP . '../' . $submodule_name;\n            $submodule_name=(strpos($submodule_name, '/') >= 0 ? explode('/', $submodule_name) : $submodule_name);\n            $submodule_name=end($submodule_name);\n            $submoduleRemote=exec('cd ' . $path . '; git config --get remote.origin.url');\n            exec(sprintf('cd %s; git rev-parse HEAD', $path), $submodule_current_commit_id);\n            if (!empty($submodule_current_commit_id[0])) {\n                $submodule_current_commit_id = $submodule_current_commit_id[0];\n            } else {\n                $submodule_current_commit_id = null;\n            }\n            $status = array(\n                'moduleName' => $submodule_name,\n                'current' => $submodule_current_commit_id,\n                'currentTimestamp' => exec(sprintf('cd %s; git log -1 --pretty=format:%%ct', $path)),\n                'remoteTimestamp' => exec(sprintf('cd %s; git show -s --pretty=format:%%ct %s', $path, $superproject_submodule_commit_id)),\n                'remote' => $superproject_submodule_commit_id,\n                'upToDate' => '',\n                'isReadable' => is_readable($path) && is_readable($path . '/.git'),\n            );\n\n            if (!empty($status['remote'])) {\n                if ($status['remote'] == $status['current']) {\n                    $status['upToDate'] = 'same';\n                } else if ($status['currentTimestamp'] < $status['remoteTimestamp']) {\n                    $status['upToDate'] = 'older';\n                } else {\n                    $status['upToDate'] = 'younger';\n                }\n            } else {\n                $status['upToDate'] = 'error';\n            }\n\n            if ($status['isReadable'] && !empty($status['remoteTimestamp']) && !empty($status['currentTimestamp'])) {\n                $date1 = new DateTime();\n                $date1->setTimestamp($status['remoteTimestamp']);\n                $date2 = new DateTime();\n                $date2->setTimestamp($status['currentTimestamp']);\n                $status['timeDiff'] = $date1->diff($date2);\n            } else {\n                $status['upToDate'] = 'error';\n            }\n        }\n        return $status;\n    }\n\n    public function updateSubmodule($user, $submodule_name=false) {\n        $path = APP . '../';\n        if ($submodule_name == false) {\n            $command = sprintf('cd %s; git submodule update 2>&1', $path);\n            exec($command, $output, $return_code);\n            $output = implode(\"\\n\", $output);\n            $res = array('status' => ($return_code==0 ? true : false), 'output' => $output);\n            if ($return_code == 0) { // update all DB\n                $res = array_merge($res, $this->updateDatabaseAfterPullRouter($submodule_name, $user));\n            }\n        } else if ($this->_isAcceptedSubmodule($submodule_name)) {\n            $command = sprintf('cd %s; git submodule update -- %s 2>&1', $path, $submodule_name);\n            exec($command, $output, $return_code);\n            $output = implode(\"\\n\", $output);\n            $res = array('status' => ($return_code==0 ? true : false), 'output' => $output);\n            if ($return_code == 0) { // update DB if necessary\n                $res = array_merge($res, $this->updateDatabaseAfterPullRouter($submodule_name, $user));\n            }\n        } else {\n            $res = array('status' => false, 'output' => __('Invalid submodule.'), 'job_sent' => false, 'sync_result' => __('unknown'));\n        }\n        return $res;\n    }\n\n    public function updateDatabaseAfterPullRouter($submodule_name, $user) {\n        if (Configure::read('MISP.background_jobs')) {\n            $job = ClassRegistry::init('Job');\n            $job->create();\n            $eventModel = ClassRegistry::init('Event');\n            $data = array(\n                    'worker' => $eventModel->__getPrioWorkerIfPossible(),\n                    'job_type' => __('update_after_pull'),\n                    'job_input' => __('Updating: ' . $submodule_name),\n                    'status' => 0,\n                    'retries' => 0,\n                    'org_id' => $user['org_id'],\n                    'org' => $user['Organisation']['name'],\n                    'message' => 'Update the database after PULLing the submodule(s).',\n            );\n            $job->save($data);\n            $jobId = $job->id;\n            $process_id = CakeResque::enqueue(\n                    'prio',\n                    'AdminShell',\n                    array('updateAfterPull', $submodule_name, $jobId, $user['id']),\n                    true\n            );\n            $job->saveField('process_id', $process_id);\n            return array('job_sent' => true, 'sync_result' => __('unknown'));\n        } else {\n            $result = $this->updateAfterPull($submodule_name, $user['id']);\n            return array('job_sent' => false, 'sync_result' => $result);\n        }\n    }\n\n    public function updateAfterPull($submodule_name, $userId) {\n        $user = $this->User->getAuthUser($userId);\n        $result = array();\n        if ($user['Role']['perm_site_admin']) {\n            $updateAll = empty($submodule_name);\n            if ($submodule_name == 'app/files/misp-galaxy' || $updateAll) {\n                $this->Galaxy = ClassRegistry::init('Galaxy');\n                $result[] = ($this->Galaxy->update() ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n            if ($submodule_name == 'app/files/misp-objects' || $updateAll) {\n                $this->ObjectTemplate = ClassRegistry::init('ObjectTemplate');\n                $result[] = ($this->ObjectTemplate->update($user, false, false) ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n            if ($submodule_name == 'app/files/noticelists' || $updateAll) {\n                $this->Noticelist = ClassRegistry::init('Noticelist');\n                $result[] = ($this->Noticelist->update() ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n            if ($submodule_name == 'app/files/taxonomies' || $updateAll) {\n                $this->Taxonomy = ClassRegistry::init('Taxonomy');\n                $result[] = ($this->Taxonomy->update() ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n            if ($submodule_name == 'app/files/warninglists' || $updateAll) {\n                $this->Warninglist = ClassRegistry::init('Warninglist');\n                $result[] = ($this->Warninglist->update() ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n        }\n        return implode('\\n', $result);\n    }\n\n    public function update($status)\n    {\n        $final = '';\n        $workingDirectoryPrefix = 'cd $(git rev-parse --show-toplevel) && ';\n        $cleanup_commands = array(\n            // (>^-^)> [hacky]\n            $workingDirectoryPrefix . 'git checkout app/composer.json 2>&1'\n        );\n        foreach ($cleanup_commands as $cleanup_command) {\n            $final .= $cleanup_command . \"\\n\\n\";\n            exec($cleanup_command, $output);\n            $final .= implode(\"\\n\", $output) . \"\\n\\n\";\n        }\n        $command1 = $workingDirectoryPrefix . 'git pull origin ' . $status['branch'] . ' 2>&1';\n        $command2 = $workingDirectoryPrefix . 'git submodule update --init --recursive 2>&1';\n        $final .= $command1 . \"\\n\\n\";\n        exec($command1, $output);\n        $final .= implode(\"\\n\", $output) . \"\\n\\n=================================\\n\\n\";\n        $output = array();\n        $final .= $command2 . \"\\n\\n\";\n        exec($command2, $output);\n        $final .= implode(\"\\n\", $output);\n        return $final;\n    }\n\n    public function fetchServer($id)\n    {\n        if (empty($id)) {\n            return false;\n        }\n        $conditions = array('Server.id' => $id);\n        if (!is_numeric($id)) {\n            $conditions = array('OR' => array(\n                'LOWER(Server.name)' => strtolower($id),\n                'LOWER(Server.url)' => strtolower($id)\n            ));\n        }\n        $server = $this->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1\n        ));\n        return (empty($server)) ? false : $server;\n    }\n\n    public function restartWorkers($user=false)\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            $this->workerRemoveDead($user);\n            $prepend = '';\n            shell_exec($prepend . APP . 'Console' . DS . 'worker' . DS . 'start.sh > /dev/null 2>&1 &');\n        }\n        return true;\n    }\n\n    public function restartWorker($pid)\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            $this->ResqueStatus = new ResqueStatus\\ResqueStatus(Resque::redis());\n            $workers = $this->ResqueStatus->getWorkers();\n            $pid = intval($pid);\n            if (!isset($workers[$pid])) {\n                return __('Invalid worker.');\n            }\n            $currentWorker = $workers[$pid];\n            $this->killWorker($pid, false);\n            $this->startWorker($currentWorker['queue']);\n            return true;\n        }\n        return __('Background workers not enabled.');\n    }\n\n    public function startWorker($queue)\n    {\n        $validTypes = array('default', 'email', 'scheduler', 'cache', 'prio');\n        if (!in_array($queue, $validTypes)) {\n            return __('Invalid worker type.');\n        }\n        if ($queue != 'scheduler') {\n            shell_exec(APP . 'Console' . DS . 'cake CakeResque.CakeResque start --interval 5 --queue ' . $queue .' > /dev/null 2>&1 &');\n        } else {\n            shell_exec(APP . 'Console' . DS . 'cake CakeResque.CakeResque startscheduler -i 5 > /dev/null 2>&1 &');\n        }\n        return true;\n    }\n\n    public function cacheServerInitiator($user, $id = 'all', $jobId = false)\n    {\n        $params = array(\n            'conditions' => array('caching_enabled' => 1),\n            'recursive' => -1\n        );\n        $redis = $this->setupRedis();\n        if ($redis === false) {\n            return 'Redis not reachable.';\n        }\n        if ($id !== 'all') {\n            $params['conditions']['Server.id'] = $id;\n        } else {\n            $redis->del('misp:server_cache:combined');\n            $redis->del('misp:server_cache:event_uuid_lookup:');\n        }\n        $servers = $this->find('all', $params);\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n            $job->id = $jobId;\n            if (!$job->exists()) {\n                $jobId = false;\n            }\n        }\n        foreach ($servers as $k => $server) {\n            $this->__cacheInstance($server, $redis, $jobId);\n            if ($jobId) {\n                $job->saveField('progress', 100 * $k / count($servers));\n                $job->saveField('message', 'Server ' . $server['Server']['id'] . ' cached.');\n            }\n        }\n        return true;\n    }\n\n    private function __cacheInstance($server, $redis, $jobId = false)\n    {\n        $continue = true;\n        $i = 0;\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n            $job->id = $jobId;\n        }\n        $redis->del('misp:server_cache:' . $server['Server']['id']);\n        $HttpSocket = null;\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        while ($continue) {\n            $i++;\n            $pipe = $redis->multi(Redis::PIPELINE);\n            $chunk_size = 50000;\n            $data = $this->__getCachedAttributes($server, $HttpSocket, $chunk_size, $i);\n            if (empty(trim($data))) {\n                $continue = false;\n            } else {\n                $data = explode(PHP_EOL, trim($data));\n                foreach ($data as $entry) {\n                    list($value, $uuid) = explode(',', $entry);\n                    if (!empty($value)) {\n                        $redis->sAdd('misp:server_cache:' . $server['Server']['id'], $value);\n                        $redis->sAdd('misp:server_cache:combined', $value);\n                        $redis->sAdd('misp:server_cache:event_uuid_lookup:' . $value, $server['Server']['id'] . '/' . $uuid);\n                    }\n                }\n            }\n            if ($jobId) {\n                $job->saveField('message', 'Server ' . $server['Server']['id'] . ': ' . ((($i -1) * $chunk_size) + count($data)) . ' attributes cached.');\n            }\n            $pipe->exec();\n        }\n        $redis->set('misp:server_cache_timestamp:' . $server['Server']['id'], time());\n        return true;\n    }\n\n    private function __getCachedAttributes($server, $HttpSocket, $chunk_size, $i)\n    {\n        $filter_rules = array(\n            'returnFormat' => 'cache',\n            'includeEventUuid' => 1,\n            'page' => $i,\n            'limit' => $chunk_size\n        );\n        debug($filter_rules);\n        $request = $this->setupSyncRequest($server);\n        try {\n            $response = $HttpSocket->post($server['Server']['url'] . '/attributes/restSearch.json', json_encode($filter_rules), $request);\n        } catch (SocketException $e) {\n            return $e->getMessage();\n        }\n        return $response->body;\n    }\n\n    public function attachServerCacheTimestamps($data)\n    {\n        $redis = $this->setupRedis();\n        if ($redis === false) {\n            return $data;\n        }\n        foreach ($data as $k => $v) {\n            $data[$k]['Server']['cache_timestamp'] = $redis->get('misp:server_cache_timestamp:' . $data[$k]['Server']['id']);\n        }\n        return $data;\n    }\n\n    public function updateJSON()\n    {\n        $toUpdate = array('Galaxy', 'Noticelist', 'Warninglist', 'Taxonomy', 'ObjectTemplate');\n        $results = array();\n        foreach ($toUpdate as $target) {\n            $this->$target = ClassRegistry::init($target);\n            $result = $this->$target->update();\n            $results[$target] = $result === false ? false : true;\n        }\n        return $results;\n    }\n\n    public function resetRemoteAuthKey($id)\n    {\n        $server = $this->find('first', array(\n            'recursive' => -1,\n            'conditions' => array('Server.id' => $id)\n        ));\n        if (empty($server)) {\n            return __('Invalid server');\n        }\n        $HttpSocket = $this->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $uri = $server['Server']['url'] . '/users/resetauthkey/me';\n        try {\n            $response = $HttpSocket->post($uri, '{}', $request);\n        } catch (Exception $e) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $message = 'Could not reset the remote authentication key.';\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: ' . $message,\n            ));\n            return $message;\n        }\n        if ($response->isOk()) {\n            try {\n                $response = json_decode($response->body, true);\n            } catch (Exception $e) {\n                $this->Log = ClassRegistry::init('Log');\n                $this->Log->create();\n                $message = 'Invalid response received from the remote instance.';\n                $this->Log->save(array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => $id,\n                        'email' => 'SYSTEM',\n                        'action' => 'error',\n                        'user_id' => 0,\n                        'title' => 'Error: ' . $message,\n                ));\n                return $message;\n            }\n            if (!empty($response['message'])) {\n                $authkey = $response['message'];\n            }\n            if (substr($authkey, 0, 17) === 'Authkey updated: ') {\n                $authkey = substr($authkey, 17, 57);\n            }\n            $server['Server']['authkey'] = $authkey;\n            $this->save($server);\n            return true;\n        } else {\n            return __('Could not reset the remote authentication key.');\n        }\n    }\n}\n", "<?php\nApp::uses('AppModel', 'Model');\nApp::uses('AuthComponent', 'Controller/Component');\nApp::uses('RandomTool', 'Tools');\n\nclass User extends AppModel\n{\n    public $displayField = 'email';\n\n    public $orgField = array('Organisation', 'name');\n\n    public $validate = array(\n        'role_id' => array(\n            'numeric' => array(\n                'rule' => array('numeric'),\n                //'message' => 'Your custom message here',\n                //'allowEmpty' => false,\n                //'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'password' => array(\n            'minlength' => array(\n                'rule' => array('passwordLength'),\n                'message' => 'Password length requirement not met.',\n                //'allowEmpty' => false,\n                'required' => true,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n            'complexity' => array(\n                'rule' => array('complexPassword'),\n                'message' => 'Password complexity requirement not met.',\n                //'allowEmpty' => false,\n                //'required' => true,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n            'identical' => array(\n                'rule' => array('identicalFieldValues', 'confirm_password'),\n                'message' => 'Please re-enter your password twice so that the values match.',\n                //'allowEmpty' => false,\n                //'required' => true,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n\n        'org_id' => array(\n            'valueNotEmpty' => array(\n                'rule' => array('valueNotEmpty'),\n            ),\n            'numeric' => array(\n                    'rule' => array('numeric'),\n                    'message' => 'The organisation ID has to be a numeric value.',\n            ),\n        ),\n        'email' => array(\n            'email' => array(\n                'rule' => array('email'),\n                'message' => 'Please enter a valid email address.',\n                //'allowEmpty' => false,\n                'required' => true,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n            'unique' => array(\n                'rule' => 'isUnique',\n                'message' => 'An account with this email address already exists.'\n            ),\n        ),\n        'autoalert' => array(\n            'boolean' => array(\n                'rule' => array('boolean'),\n                //'message' => 'Your custom message here',\n                //'allowEmpty' => false,\n                'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'contactalert' => array(\n                'boolean' => array(\n                        'rule' => array('boolean'),\n                        //'message' => 'Your custom message here',\n                        //'allowEmpty' => false,\n                        'required' => false,\n                        //'last' => false, // Stop validation after this rule\n                        //'on' => 'create', // Limit validation to 'create' or 'update' operations\n                ),\n        ),\n        'authkey' => array(\n            'minlength' => array(\n                'rule' => array('minlength', 40),\n                'message' => 'A authkey of a minimum length of 40 is required.',\n                'required' => true,\n            ),\n            'valueNotEmpty' => array(\n                'rule' => array('valueNotEmpty'),\n            ),\n        ),\n        'invited_by' => array(\n            'numeric' => array(\n                'rule' => array('numeric'),\n                //'message' => 'Your custom message here',\n                //'allowEmpty' => false,\n                //'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'change_pw' => array(\n            'boolean' => array(\n                'rule' => array('boolean'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'gpgkey' => array(\n            'gpgvalidation' => array(\n                'rule' => array('validateGpgkey'),\n                'message' => 'GnuPG key not valid, please enter a valid key.',\n            ),\n        ),\n        'certif_public' => array(\n            'notempty' => array(\n                'rule' => array('validateCertificate'),\n                'message' => 'Certificate not valid, please enter a valid certificate (x509).',\n                //'allowEmpty' => false,\n                //'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'nids_sid' => array(\n            'numeric' => array(\n                'rule' => array('numeric'),\n                'message' => 'A SID should be an integer.',\n                'allowEmpty' => false,\n                'required' => true,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'termsaccepted' => array(\n            'boolean' => array(\n                'rule' => array('boolean'),\n                //'message' => 'Your custom message here',\n                //'allowEmpty' => false,\n                //'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'newsread' => array(\n            'numeric' => array(\n                'rule' => array('numeric')\n            ),\n        ),\n    );\n\n    // The Associations below have been created with all possible keys, those that are not needed can be removed\n    public $belongsTo = array(\n        'Role' => array(\n            'className' => 'Role',\n            'foreignKey' => 'role_id',\n            'conditions' => '',\n            'fields' => '',\n            'order' => ''\n        ),\n        'Organisation' => array(\n            'className' => 'Organisation',\n            'foreignKey' => 'org_id',\n            'conditions' => '',\n            'fields' => '',\n            'order' => ''\n        ),\n        'Server' => array(\n            'className' => 'Server',\n            'foreignKey' => 'server_id',\n            'conditions' => '',\n            'fields' => array('Server.id', 'Server.url', 'Server.push_rules'),\n            'order' => ''\n        )\n    );\n\n    public $hasMany = array(\n        'Event' => array(\n            'className' => 'Event',\n            'foreignKey' => 'user_id',\n            'dependent' => false,\n            'conditions' => '',\n            'fields' => '',\n            'order' => '',\n            'limit' => '',\n            'offset' => '',\n            'exclusive' => '',\n            'finderQuery' => '',\n            'counterQuery' => ''\n        ),\n        'Post'\n    );\n\n    public $actsAs = array(\n        'SysLogLogable.SysLogLogable' => array(\n            'userModel' => 'User',\n            'userKey' => 'user_id',\n            'change' => 'full',\n            'ignore' => array('password')\n        ),\n        'Trim',\n        'Containable'\n    );\n\n    public function beforeValidate($options = array())\n    {\n        if (!isset($this->data['User']['id'])) {\n            if ((isset($this->data['User']['enable_password']) && (!$this->data['User']['enable_password'])) || (empty($this->data['User']['password']) && empty($this->data['User']['confirm_password']))) {\n                $this->data['User']['password'] = $this->generateRandomPassword();\n                $this->data['User']['confirm_password'] = $this->data['User']['password'];\n            }\n        }\n        if (!isset($this->data['User']['certif_public']) || empty($this->data['User']['certif_public'])) {\n            $this->data['User']['certif_public'] = '';\n        }\n        if (!isset($this->data['User']['authkey']) || empty($this->data['User']['authkey'])) {\n            $this->data['User']['authkey'] = $this->generateAuthKey();\n        }\n        if (!isset($this->data['User']['nids_sid']) || empty($this->data['User']['nids_sid'])) {\n            $this->data['User']['nids_sid'] = mt_rand(1000000, 9999999);\n        }\n        if (isset($this->data['User']['newsread']) && $this->data['User']['newsread'] === null) {\n            $this->data['User']['newsread'] = 0;\n        }\n        return true;\n    }\n\n    public function beforeSave($options = array())\n    {\n        $this->data[$this->alias]['date_modified'] = time();\n        if (isset($this->data[$this->alias]['password'])) {\n            $passwordHasher = new BlowfishPasswordHasher();\n            $this->data[$this->alias]['password'] = $passwordHasher->hash($this->data[$this->alias]['password']);\n        }\n        return true;\n    }\n\n    public function afterSave($created, $options = array())\n    {\n        $pubToZmq = Configure::read('Plugin.ZeroMQ_enable') && Configure::read('Plugin.ZeroMQ_user_notifications_enable');\n        $kafkaTopic = Configure::read('Plugin.Kafka_user_notifications_topic');\n        $pubToKafka = Configure::read('Plugin.Kafka_enable') && Configure::read('Plugin.Kafka_user_notifications_enable') && !empty($kafkaTopic);\n        if ($pubToZmq || $pubToKafka) {\n            if (!empty($this->data)) {\n                $user = $this->data;\n                if (!isset($user['User'])) {\n                    $user['User'] = $user;\n                }\n                $action = $created ? 'edit' : 'add';\n                if (isset($user['User']['action'])) {\n                    $action = $user['User']['action'];\n                }\n                if (isset($user['User']['id'])) {\n                    $user = $this->find('first', array(\n                        'recursive' => -1,\n                        'conditions' => array('User.id' => $user['User']['id']),\n                        'fields' => array('id', 'email', 'last_login', 'org_id', 'termsaccepted', 'autoalert', 'newsread', 'disabled'),\n                        'contain' => array(\n                            'Organisation' => array(\n                                'fields' => array('Organisation.id', 'Organisation.name', 'Organisation.description', 'Organisation.uuid', 'Organisation.nationality', 'Organisation.sector', 'Organisation.type', 'Organisation.local')\n                            )\n                        )\n                    ));\n                }\n                if (isset($user['User']['password'])) {\n                    unset($user['User']['password']);\n                    unset($user['User']['confirm_password']);\n                }\n                if ($pubToZmq) {\n                    $pubSubTool = $this->getPubSubTool();\n                    $pubSubTool->modified($user, 'user', $action);\n                }\n                if ($pubToKafka) {\n                    $kafkaPubTool = $this->getKafkaPubTool();\n                    $kafkaPubTool->publishJson($kafkaTopic, $user, $action);\n                }\n            }\n        }\n        return true;\n    }\n\n    // Checks if the GnuPG key is a valid key, but also import it in the keychain.\n    // this will NOT fail on keys that can only be used for signing but not encryption!\n    // the method in verifyUsers will fail in that case.\n    public function validateGpgkey($check)\n    {\n        // LATER first remove the old gpgkey from the keychain\n        // empty value\n        if (empty($check['gpgkey'])) {\n            return true;\n        }\n\n        // we have a clean, hopefully public, key here\n        try {\n            require_once 'Crypt/GPG.php';\n            $gpg = new Crypt_GPG(array('homedir' => Configure::read('GnuPG.homedir'), 'gpgconf' => Configure::read('GnuPG.gpgconf'), 'binary' => (Configure::read('GnuPG.binary') ? Configure::read('GnuPG.binary') : '/usr/bin/gpg')));\n            try {\n                $keyImportOutput = $gpg->importKey($check['gpgkey']);\n                if (!empty($keyImportOutput['fingerprint'])) {\n                    return true;\n                }\n            } catch (Exception $e) {\n                $this->log($e->getMessage());\n                return false;\n            }\n        } catch (Exception $e) {\n            $this->log($e->getMessage());\n            return true;\n        }\n    }\n\n    // Checks if the certificate is a valid x509 certificate, but also import it in the keychain.\n    // this will NOT fail on keys that can only be used for signing but not encryption!\n    // the method in verifyUsers will fail in that case.\n    public function validateCertificate($check)\n    {\n        // LATER first remove the old certif_public from the keychain\n\n        // empty value\n        if (empty($check['certif_public'])) {\n            return true;\n        }\n\n        // certif_public is entered\n\n        // Check if $check is a x509 certificate\n        if (openssl_x509_read($check['certif_public'])) {\n            return $this->testSmimeCertificate($check['certif_public']);\n        } else {\n            return false;\n        }\n    }\n\n    public function passwordLength($check)\n    {\n        $length = Configure::read('Security.password_policy_length');\n        if (empty($length) || $length < 0) {\n            $length = 12;\n        }\n        $value = array_values($check);\n        $value = $value[0];\n        if (strlen($value) < $length) {\n            return false;\n        }\n        return true;\n    }\n\n    /*\n     default password:\n     6 characters minimum\n     1 or more upper-case letters\n     1 or more lower-case letters\n     1 or more digits or special characters\n     example: \"EasyPeasy34\"\n     If Security.password_policy_complexity is set and valid, use the regex provided.\n     */\n    public function complexPassword($check)\n    {\n        $regex = Configure::read('Security.password_policy_complexity');\n        if (empty($regex) || @preg_match($regex, 'test') === false) {\n            $regex = '/^((?=.*\\d)|(?=.*\\W+))(?![\\n])(?=.*[A-Z])(?=.*[a-z]).*$|.{16,}/';\n        }\n        $value = array_values($check);\n        $value = $value[0];\n        return preg_match($regex, $value);\n    }\n\n    public function identicalFieldValues($field=array(), $compareField=null)\n    {\n        foreach ($field as $key => $value) {\n            $v1 = $value;\n            $v2 = $this->data[$this->name][$compareField];\n            if ($v1 !== $v2) {\n                return false;\n            } else {\n                continue;\n            }\n        }\n        return true;\n    }\n\n    public function generateAuthKey()\n    {\n        return (new RandomTool())->random_str(true, 40);\n    }\n\n    /**\n     * Generates a cryptographically secure password\n     *\n     * @param int $passwordLength\n     * @return string\n     */\n    public function generateRandomPassword($passwordLength = 40)\n    {\n        // makes sure, the password policy isn't undermined by setting a manual passwordLength\n        $policyPasswordLength = Configure::read('Security.password_policy_length') ? Configure::read('Security.password_policy_length') : false;\n        if (is_int($policyPasswordLength) && $policyPasswordLength > $passwordLength) {\n            $passwordLength = $policyPasswordLength;\n        }\n        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-+=!@#$%^&*()<>/?';\n        return (new RandomTool())->random_str(true, $passwordLength, $characters);\n    }\n\n\n    public function checkAndCorrectPgps()\n    {\n        $fails = array();\n        $users = $this->find('all', array('recursive' => 0));\n\n        foreach ($users as $user) {\n            if (strlen($user['User']['gpgkey']) && strpos($user['User']['gpgkey'], \"\\n\")) {\n                $fails[] = $user['User']['id'] . ':' . $user['User']['id'];\n            }\n        }\n        return $fails;\n    }\n\n    public function getOrgs()\n    {\n        $orgs = $this->Organisation->find('list', array(\n            'recursive' => -1,\n            'fields' => array('name'),\n        ));\n        return $orgs;\n    }\n\n    public function getOrgMemberCount($org)\n    {\n        return $this->find('count', array(\n                'conditions' => array(\n                        'org =' => $org,\n                )));\n    }\n\n    public function verifySingleGPG($user, $gpg = false)\n    {\n        if (!$gpg) {\n            try {\n                require_once 'Crypt/GPG.php';\n                $gpg = new Crypt_GPG(array('homedir' => Configure::read('GnuPG.homedir'), 'gpgconf' => Configure::read('GnuPG.gpgconf'), 'binary' => (Configure::read('GnuPG.binary') ? Configure::read('GnuPG.binary') : '/usr/bin/gpg')));\n            } catch (Exception $e) {\n                $result[2] ='GnuPG is not configured on this system.';\n                $result[0] = true;\n                return $result;\n            }\n        }\n        $result = array();\n        try {\n            $currentTimestamp = time();\n            $temp = $gpg->importKey($user['User']['gpgkey']);\n            $key = $gpg->getKeys($temp['fingerprint']);\n            $result[5] = $temp['fingerprint'];\n            $subKeys = $key[0]->getSubKeys();\n            $sortedKeys = array('valid' => 0, 'expired' => 0, 'noEncrypt' => 0);\n            foreach ($subKeys as $subKey) {\n                $expiration = $subKey->getExpirationDate();\n                if ($expiration != 0 && $currentTimestamp > $expiration) {\n                    $sortedKeys['expired']++;\n                    continue;\n                }\n                if (!$subKey->canEncrypt()) {\n                    $sortedKeys['noEncrypt']++;\n                    continue;\n                }\n                $sortedKeys['valid']++;\n            }\n            if (!$sortedKeys['valid']) {\n                $result[2] = 'The user\\'s GnuPG key does not include a valid subkey that could be used for encryption.';\n                if ($sortedKeys['expired']) {\n                    $result[2] .= ' Found ' . $sortedKeys['expired'] . ' subkey(s) that have expired.';\n                }\n                if ($sortedKeys['noEncrypt']) {\n                    $result[2] .= ' Found ' . $sortedKeys['noEncrypt'] . ' subkey(s) that are sign only.';\n                }\n                $result[0] = true;\n            }\n        } catch (Exception $e) {\n            $result[2] = $e->getMessage();\n            $result[0] = true;\n        }\n        $result[1] = $user['User']['email'];\n        $result[4] = $temp['fingerprint'];\n        return $result;\n    }\n\n    public function verifyGPG($id = false)\n    {\n        require_once 'Crypt/GPG.php';\n        $this->Behaviors->detach('Trim');\n        $results = array();\n        $conditions = array('not' => array('gpgkey' => ''));\n        if ($id !== false) {\n            $conditions['User.id'] = $id;\n        }\n        $users = $this->find('all', array(\n            'conditions' => $conditions,\n            'recursive' => -1,\n        ));\n        if (empty($users)) {\n            return $results;\n        }\n        $gpg = new Crypt_GPG(array('homedir' => Configure::read('GnuPG.homedir'), 'gpgconf' => Configure::read('GnuPG.gpgconf'), 'binary' => (Configure::read('GnuPG.binary') ? Configure::read('GnuPG.binary') : '/usr/bin/gpg')));\n        foreach ($users as $k => $user) {\n            $results[$user['User']['id']] = $this->verifySingleGPG($user, $gpg);\n        }\n        return $results;\n    }\n\n    private function testSmimeCertificate($certif_public)\n    {\n        $result = array();\n        try {\n            App::uses('Folder', 'Utility');\n            App::uses('FileAccessTool', 'Tools');\n            $fileAccessTool = new FileAccessTool();\n            $dir = APP . 'tmp' . DS . 'SMIME';\n            if (!file_exists($dir)) {\n                if (!mkdir($dir, 0750, true)) {\n                    throw new MethodNotAllowedException('The SMIME temp directory is not writeable (app/tmp/SMIME).');\n                }\n            }\n            $tempFile = $fileAccessTool->createTempFile($dir, 'SMIME');\n            $msg_test = $fileAccessTool->writeToFile($tempFile, 'test');\n            $msg_test_encrypted = $fileAccessTool->createTempFile($dir, 'SMIME');\n            // encrypt it\n            if (openssl_pkcs7_encrypt($msg_test, $msg_test_encrypted, $certif_public, null, 0, OPENSSL_CIPHER_AES_256_CBC)) {\n                $parse = openssl_x509_parse($certif_public);\n                // Valid certificate ?\n                $now = new DateTime(\"now\");\n                $validTo_time_t_epoch = $parse['validTo_time_t'];\n                $validTo_time_t = new DateTime(\"@$validTo_time_t_epoch\");\n                if ($validTo_time_t > $now) {\n                    // purposes smimeencrypt ?\n                    if (($parse['purposes'][5][0] == 1) && ($parse['purposes'][5][2] == 'smimeencrypt')) {\n                        $result = true;\n                    } else {\n                        // openssl_pkcs7_encrypt good -- Model/User purposes is NOT GOOD'\n                        $result = 'This certificate cannot be used to encrypt email';\n                    }\n                } else {\n                    // openssl_pkcs7_encrypt good -- Model/User expired;\n                    $result = 'This certificate is expired';\n                }\n            } else {\n                // openssl_pkcs7_encrypt NOT good -- Model/User\n                $result = 'This certificate cannot be used to encrypt email';\n            }\n        } catch (Exception $e) {\n            $this->log($e->getMessage());\n        }\n        unlink($msg_test);\n        unlink($msg_test_encrypted);\n        return $result;\n    }\n\n    public function verifyCertificate()\n    {\n        $this->Behaviors->detach('Trim');\n        $results = array();\n        $users = $this->find('all', array(\n            'conditions' => array('not' => array('certif_public' => '')),\n            'recursive' => -1,\n        ));\n        foreach ($users as $k => $user) {\n            $result = $this->testSmimeCertificate($user['User']['certif_public']);\n            if ($result !== true) {\n                $results[$user['User']['id']] = array(0 => true, 1 => $user['User']['email']);\n            }\n        }\n        return $results;\n    }\n\n    public function getPGP($id)\n    {\n        $result = $this->find('first', array(\n            'recursive' => -1,\n            'fields' => array('id', 'gpgkey'),\n            'conditions' => array('id' => $id),\n        ));\n        return $result['User']['gpgkey'];\n    }\n\n    public function getCertificate($id)\n    {\n        $result = $this->find('first', array(\n            'recursive' => -1,\n            'fields' => array('id', 'certif_public'),\n            'conditions' => array('id' => $id),\n        ));\n        return $result['User']['certif_public'];\n    }\n\n    // get the current user and rearrange it to be in the same format as in the auth component\n    public function getAuthUser($id)\n    {\n        if (empty($id)) {\n            throw new Exception('Invalid user ID.');\n        }\n        $conditions = array('User.id' => $id);\n        $user = $this->find('first', array('conditions' => $conditions, 'recursive' => -1,'contain' => array('Organisation', 'Role', 'Server')));\n        if (empty($user)) {\n            return $user;\n        }\n        // Rearrange it a bit to match the Auth object created during the login\n        $user['User']['Role'] = $user['Role'];\n        $user['User']['Organisation'] = $user['Organisation'];\n        $user['User']['Server'] = $user['Server'];\n        unset($user['Organisation'], $user['Role'], $user['Server']);\n        return $user['User'];\n    }\n\n    // get the current user and rearrange it to be in the same format as in the auth component\n    public function getAuthUserByAuthkey($id)\n    {\n        $conditions = array('User.authkey' => $id);\n        $user = $this->find('first', array('conditions' => $conditions, 'recursive' => -1,'contain' => array('Organisation', 'Role', 'Server')));\n        if (empty($user)) {\n            return $user;\n        }\n        // Rearrange it a bit to match the Auth object created during the login\n        $user['User']['Role'] = $user['Role'];\n        $user['User']['Organisation'] = $user['Organisation'];\n        $user['User']['Server'] = $user['Server'];\n        return $user['User'];\n    }\n\n    public function getAuthUserByExternalAuth($auth_key)\n    {\n        $conditions = array(\n            'User.external_auth_key' => $auth_key,\n            'User.external_auth_required' => true\n        );\n        $user = $this->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1,\n            'contain' => array(\n                'Organisation',\n                'Role',\n                'Server'\n            )\n        ));\n        if (empty($user)) {\n            return $user;\n        }\n        // Rearrange it a bit to match the Auth object created during the login\n        $user['User']['Role'] = $user['Role'];\n        $user['User']['Organisation'] = $user['Organisation'];\n        $user['User']['Server'] = $user['Server'];\n        unset($user['Organisation'], $user['Role'], $user['Server']);\n        return $user['User'];\n    }\n\n    // Fetch all users that have access to an event / discussion for e-mailing (or maybe something else in the future.\n    // parameters are an array of org IDs that are owners (for an event this would be orgc and org)\n    public function getUsersWithAccess($owners = array(), $distribution, $sharing_group_id = 0, $userConditions = array())\n    {\n        $sgModel = ClassRegistry::init('SharingGroup');\n        $conditions = array();\n        $validOrgs = array();\n        $all = true;\n\n        // add owners to the conditions\n        if ($distribution == 0 || $distribution == 4) {\n            $all = false;\n            $validOrgs = $owners;\n        }\n\n        // add all orgs to the conditions that can see the SG\n        if ($distribution == 4) {\n            $sgOrgs = $sgModel->getOrgsWithAccess($sharing_group_id);\n            if ($sgOrgs === true) {\n                $all = true;\n            } else {\n                $validOrgs = array_merge($validOrgs, $sgOrgs);\n            }\n        }\n        $validOrgs = array_unique($validOrgs);\n        $conditions['AND'][] = array('disabled' => 0);\n        if (!$all) {\n            $conditions['AND']['OR'][] = array('org_id' => $validOrgs);\n\n            // Add the site-admins to the list\n            $roles = $this->Role->find('all', array(\n                    'conditions' => array('perm_site_admin' => 1),\n                    'fields' => array('id')\n            ));\n            $roleIDs = array();\n            foreach ($roles as $role) {\n                $roleIDs[] = $role['Role']['id'];\n            }\n            $conditions['AND']['OR'][] = array('role_id' => $roleIDs);\n        }\n        $conditions['AND'][] = $userConditions;\n        $users = $this->find('all', array(\n            'conditions' => $conditions,\n            'recursive' => -1,\n            'fields' => array('id', 'email', 'gpgkey', 'certif_public', 'org_id'),\n            'contain' => array('Role' => array('fields' => array('perm_site_admin'))),\n        ));\n        foreach ($users as $k => $user) {\n            $user = $user['User'];\n            unset($users[$k]['User']);\n            $users[$k] = array_merge($user, $users[$k]);\n        }\n        return $users;\n    }\n\n    public function sendEmailExternal($user, $params)\n    {\n        $this->Log = ClassRegistry::init('Log');\n        $params['body'] = str_replace('\\n', PHP_EOL, $params['body']);\n        $Email = new CakeEmail();\n        $recipient = array('User' => array('email' => $params['to']));\n        $failed = false;\n        if (!empty($params['gpgkey'])) {\n            $recipient['User']['gpgkey'] = $params['gpgkey'];\n            $encryptionResult = $this->__encryptUsingGPG($Email, $params['body'], $params['subject'], $recipient);\n            if (isset($encryptionResult['failed'])) {\n                $failed = true;\n            }\n            if (isset($encryptionResult['failureReason'])) {\n                $failureReason = $encryptionResult['failureReason'];\n            }\n        }\n        if (!$failed) {\n            $replyToLog = '';\n            $user = array('User' => $user);\n            $attachments = array();\n            $Email->replyTo($params['reply-to']);\n            if (!empty($params['requestor_gpgkey'])) {\n                $attachments['gpgkey.asc'] = array(\n                    'data' => $params['requestor_gpgkey']\n                );\n            }\n            $Email->from(Configure::read('MISP.email'));\n            $Email->returnPath(Configure::read('MISP.email'));\n            $Email->to($params['to']);\n            $Email->subject($params['subject']);\n            $Email->emailFormat('text');\n            if (!empty($params['attachments'])) {\n                foreach ($params['attachments'] as $key => $value) {\n                    $attachments[$k] = array('data' => $value);\n                }\n            }\n            $Email->attachments($attachments);\n            $mock = false;\n            if (Configure::read('MISP.disable_emailing') || !empty($params['mock'])) {\n                $Email->transport('Debug');\n                $mock = true;\n            }\n            $result = $Email->send($params['body']);\n            $Email->reset();\n            if ($result && !$mock) {\n                return true;\n            }\n            return $result;\n        }\n        return false;\n    }\n\n    // all e-mail sending is now handled by this method\n    // Just pass the user ID in an array that is the target of the e-mail along with the message body and the alternate message body if the message cannot be encrypted\n    // the remaining two parameters are the e-mail subject and a secondary user object which will be used as the replyto address if set. If it is set and an encryption key for the replyTo user exists, then his/her public key will also be attached\n    public function sendEmail($user, $body, $bodyNoEnc = false, $subject, $replyToUser = false)\n    {\n        $this->Log = ClassRegistry::init('Log');\n        if (Configure::read('MISP.disable_emailing')) {\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'User',\n                    'model_id' => $user['User']['id'],\n                    'email' => $user['User']['email'],\n                    'action' => 'email',\n                    'title' => 'Email to ' . $user['User']['email'] . ', titled \"' . $subject . '\" failed. Reason: Emailing is currently disabled on this instance.',\n                    'change' => null,\n            ));\n            return true;\n        }\n        if (!empty($user['User']['disabled'])) {\n            return true;\n        }\n        $failed = false;\n        $failureReason = \"\";\n        // check if the e-mail can be encrypted\n        $canEncryptGPG = isset($user['User']['gpgkey']) && !empty($user['User']['gpgkey']);\n        $canEncryptSMIME = isset($user['User']['certif_public']) && !empty($user['User']['certif_public']) && Configure::read('SMIME.enabled');\n\n        // If bodyonlyencrypted is enabled and the user has no encryption key, use the alternate body (if it exists)\n        if (Configure::read('GnuPG.bodyonlyencrypted') && !$canEncryptSMIME && !$canEncryptGPG && $bodyNoEnc) {\n            $body = $bodyNoEnc;\n        }\n        $body = str_replace('\\n', PHP_EOL, $body);\n\n        $Email = new CakeEmail();\n        // If we cannot encrypt the mail and the server settings restricts sending unencrypted messages, return false\n        if (!$failed && Configure::read('GnuPG.onlyencrypted') && !$canEncryptGPG && !$canEncryptSMIME) {\n            $failed = true;\n            $failureReason = \" encrypted messages are enforced and the message could not be encrypted for this user as no valid encryption key was found.\";\n        }\n        // Let's encrypt the message if we can\n        if (!$failed && $canEncryptGPG) {\n            $encryptionResult = $this->__encryptUsingGPG($Email, $body, $subject, $user);\n            if (isset($encryptionResult['failed'])) {\n                $failed = true;\n            }\n            if (isset($encryptionResult['failureReason'])) {\n                $failureReason = $encryptionResult['failureReason'];\n            }\n        }\n        // SMIME if not GPG key\n        if (!$failed && !$canEncryptGPG && $canEncryptSMIME) {\n            $encryptionResult = $this->__encryptUsingSmime($Email, $body, $subject, $user);\n            if (isset($encryptionResult['failed'])) {\n                $failed = true;\n            }\n            if (isset($encryptionResult['failureReason'])) {\n                $failureReason = $encryptionResult['failureReason'];\n            }\n        }\n        $replyToLog = '';\n        if (!$failed) {\n            $result = $this->__finaliseAndSendEmail($replyToUser, $Email, $replyToLog, $user, $subject, $body);\n        }\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        if (!$failed && $result) {\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'User',\n                    'model_id' => $user['User']['id'],\n                    'email' => $user['User']['email'],\n                    'action' => 'email',\n                    'title' => 'Email ' . $replyToLog  . ' to ' . $user['User']['email'] . ' sent, titled \"' . $subject . '\".',\n                    'change' => null,\n            ));\n            return true;\n        } else {\n            if (empty($failureReason)) {\n                $failureReason = \" there was an error sending the e-mail.\";\n            }\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'User',\n                    'model_id' => $user['User']['id'],\n                    'email' => $user['User']['email'],\n                    'action' => 'email',\n                    'title' => 'Email ' . $replyToLog  . ' to ' . $user['User']['email'] . ', titled \"' . $subject . '\" failed. Reason: ' . $failureReason,\n                    'change' => null,\n            ));\n        }\n        return false;\n    }\n\n    private function __finaliseAndSendEmail($replyToUser, &$Email, &$replyToLog, $user, $subject, $body, $additionalAttachments = false)\n    {\n        // If the e-mail is sent on behalf of a user, then we want the target user to be able to respond to the sender\n        // For this reason we should also attach the public key of the sender along with the message (if applicable)\n        $attachments = array();\n        if ($replyToUser != false) {\n            $Email->replyTo($replyToUser['User']['email']);\n            if (!empty($replyToUser['User']['gpgkey'])) {\n                $attachments['gpgkey.asc'] = array(\n                    'data' => $replyToUser['User']['gpgkey']\n                );\n            } elseif (!empty($replyToUser['User']['certif_public'])) {\n                $attachments[$replyToUser['User']['email'] . '.pem'] = array(\n                    'data' => $replyToUser['User']['certif_public']\n                );\n            }\n            $replyToLog = 'from ' . $replyToUser['User']['email'];\n        }\n        $Email->from(Configure::read('MISP.email'));\n        $Email->returnPath(Configure::read('MISP.email'));\n        $Email->to($user['User']['email']);\n        $Email->subject($subject);\n        $Email->emailFormat('text');\n        if (!empty($additionalAttachments)) {\n            foreach ($additionalAttachments as $key => $value) {\n                $attachments[$k] = array('data' => $value);\n            }\n        }\n        $Email->attachments($attachments);\n        $result = $Email->send($body);\n        $Email->reset();\n        return $result;\n    }\n\n    private function __encryptUsingGPG(&$Email, &$body, $subject, $user)\n    {\n        $failed = false;\n        // Sign the body\n        require_once 'Crypt/GPG.php';\n        try {\n            $gpg = new Crypt_GPG(array('homedir' => Configure::read('GnuPG.homedir'), 'gpgconf' => Configure::read('GnuPG.gpgconf'), 'binary' => (Configure::read('GnuPG.binary') ? Configure::read('GnuPG.binary') : '/usr/bin/gpg'), 'debug'));   // , 'debug' => true\n            if (Configure::read('GnuPG.sign')) {\n                $gpg->addSignKey(Configure::read('GnuPG.email'), Configure::read('GnuPG.password'));\n                $body = $gpg->sign($body, Crypt_GPG::SIGN_MODE_CLEAR);\n            }\n        } catch (Exception $e) {\n            $failureReason = \" the message could not be signed. The following error message was returned by gpg: \" . $e->getMessage();\n            $this->log($e->getMessage());\n            $failed = true;\n        }\n        if (!$failed) {\n            $keyImportOutput = $gpg->importKey($user['User']['gpgkey']);\n            try {\n                $key = $gpg->getKeys($keyImportOutput['fingerprint']);\n                $subKeys = $key[0]->getSubKeys();\n                $canEncryptGPG = false;\n                $currentTimestamp = time();\n                foreach ($subKeys as $subKey) {\n                    $expiration = $subKey->getExpirationDate();\n                    if (($expiration == 0 || $currentTimestamp < $expiration) && $subKey->canEncrypt()) {\n                        $canEncryptGPG = true;\n                    }\n                }\n                if ($canEncryptGPG) {\n                    $gpg->addEncryptKey($keyImportOutput['fingerprint']); // use the key that was given in the import\n                    $body = $gpg->encrypt($body, true);\n                } else {\n                    $failed = true;\n                    $failureReason = \" the message could not be encrypted because the provided key is either expired or cannot be used for encryption.\";\n                }\n            } catch (Exception $e) {\n                // despite the user having a GnuPG key and the signing already succeeding earlier, we get an exception. This must mean that there is an issue with the user's key.\n                $failureReason = \" the message could not be encrypted because there was an issue with the user's GnuPG key. The following error message was returned by gpg: \" . $e->getMessage();\n                $this->log($e->getMessage());\n                $failed = true;\n            }\n        }\n        if (!empty($failed)) {\n            return array('failed' => $failed, 'failureReason' => $failureReason);\n        }\n        return true;\n    }\n\n    private function __encryptUsingSmime(&$Email, &$body, $subject, $user)\n    {\n        try {\n            $prependedBody = 'Content-Transfer-Encoding: 7bit' . PHP_EOL . 'Content-Type: text/plain;' . PHP_EOL . '    charset=us-ascii' . PHP_EOL . PHP_EOL . $body;\n            App::uses('Folder', 'Utility');\n            App::uses('FileAccessTool', 'Tools');\n            $fileAccessTool = new FileAccessTool();\n            $dir = APP . 'tmp' . DS . 'SMIME';\n            if (!file_exists($dir)) {\n                if (!mkdir($dir, 0750, true)) {\n                    throw new MethodNotAllowedException('The SMIME temp directory is not writeable (app/tmp/SMIME).');\n                }\n            }\n            // save message to file\n            $tempFile = $fileAccessTool->createTempFile($dir, 'SMIME');\n            $msg = $fileAccessTool->writeToFile($tempFile, $prependedBody);\n            $headers_smime = array(\"To\" => $user['User']['email'], \"From\" => Configure::read('MISP.email'), \"Subject\" => $subject);\n            $canSign = true;\n            if (\n                !empty(Configure::read('SMIME.cert_public_sign')) &&\n                is_readable(Configure::read('SMIME.cert_public_sign')) &&\n                !empty(Configure::read('SMIME.key_sign')) &&\n                is_readable(Configure::read('SMIME.key_sign'))\n            ) {\n                $signed = $fileAccessTool->createTempFile($dir, 'SMIME');\n                if (openssl_pkcs7_sign($msg, $signed, 'file://'.Configure::read('SMIME.cert_public_sign'), array('file://'.Configure::read('SMIME.key_sign'), Configure::read('SMIME.password')), array(), PKCS7_TEXT)) {\n                    $bodySigned = $fileAccessTool->readFromFile($signed);\n                    unlink($msg);\n                    unlink($signed);\n                } else {\n                    unlink($msg);\n                    unlink($signed);\n                    throw new Exception('Failed while attempting to sign the SMIME message.');\n                }\n                // save message to file\n                $tempFile = $fileAccessTool->createTempFile($dir, 'SMIME');\n                $msg_signed = $fileAccessTool->writeToFile($tempFile, $bodySigned);\n            } else {\n                $msg_signed = $msg;\n            }\n            $msg_signed_encrypted = $fileAccessTool->createTempFile($dir, 'SMIME');\n            // encrypt it\n            if (openssl_pkcs7_encrypt($msg_signed, $msg_signed_encrypted, $user['User']['certif_public'], $headers_smime, 0, OPENSSL_CIPHER_AES_256_CBC)) {\n                $bodyEncSig = $fileAccessTool->readFromFile($msg_signed_encrypted);\n                unlink($msg_signed);\n                unlink($msg_signed_encrypted);\n                $parts = explode(\"\\n\\n\", $bodyEncSig);\n                $bodyEncSig = $parts[1];\n                // SMIME transport (hardcoded headers\n                $Email = $Email->transport('Smime');\n                $body = $bodyEncSig;\n            } else {\n                unlink($msg_signed);\n                unlink($msg_signed_encrypted);\n                throw new Exception('Could not encrypt the SMIME message.');\n            }\n        } catch (Exception $e) {\n            // despite the user having a certificate. This must mean that there is an issue with the user's certificate.\n            $result['failureReason'] = \" the message could not be encrypted because there was an issue with the user's public certificate. The following error message was returned by openssl: \" . $e->getMessage();\n            $this->log($e->getMessage());\n            $result['failed'] = true;\n        }\n        return $result;\n    }\n\n    public function adminMessageResolve($message)\n    {\n        $resolveVars = array('$contact' => 'MISP.contact', '$org' => 'MISP.org', '$misp' => 'MISP.baseurl');\n        foreach ($resolveVars as $k => $v) {\n            $v = Configure::read($v);\n            $message = str_replace($k, $v, $message);\n        }\n        return $message;\n    }\n\n    public function fetchPGPKey($email)\n    {\n        App::uses('SyncTool', 'Tools');\n        $syncTool = new SyncTool();\n        $HttpSocket = $syncTool->setupHttpSocket();\n        $response = $HttpSocket->get('https://pgp.circl.lu/pks/lookup?search=' . urlencode($email) . '&op=index&fingerprint=on&options=mr');\n        if ($response->code != 200) {\n            return $response->code;\n        }\n        return $this->__extractPGPInfo($response->body);\n    }\n\n    private function __extractPGPInfo($body)\n    {\n        $final = array();\n        $lines = explode(\"\\n\", $body);\n        foreach ($lines as $line) {\n            $parts = explode(\":\", $line);\n\n            if ($parts[0] === 'pub') {\n                if (!empty($temp)) {\n                    $final[] = $temp;\n                    $temp = array();\n                }\n\n                if (strpos($parts[6], 'r') !== false || strpos($parts[6], 'd') !== false || strpos($parts[6], 'e') !== false) {\n                    continue; // skip if key is expired, revoked or disabled\n                }\n\n                $temp = array(\n                    'fingerprint' => chunk_split($parts[1], 4, ' '),\n                    'key_id' => substr($parts[1], -8),\n                    'date' => date('Y-m-d', $parts[4]),\n                    'uri' => 'pks/lookup?op=get&search=0x' . $parts[1],\n                );\n\n            } else if ($parts[0] === 'uid' && !empty($temp)) {\n                $temp['address'] = urldecode($parts[1]);\n            }\n        }\n\n        if (!empty($temp)) {\n            $final[] = $temp;\n        }\n\n        return $final;\n    }\n\n    public function describeAuthFields()\n    {\n        $fields = array();\n        $fields = array_merge($fields, array_keys($this->getColumnTypes()));\n        foreach ($fields as $k => $field) {\n            if (in_array($field, array('gpgkey', 'certif_public'))) {\n                unset($fields[$k]);\n            }\n        }\n        $fields = array_values($fields);\n        $relatedModels = array_keys($this->belongsTo);\n        foreach ($relatedModels as $relatedModel) {\n            $fields[] = $relatedModel . '.*';\n        }\n        return $fields;\n    }\n\n    public function getMembersCount($org_id = false)\n    {\n        // for Organizations List\n        $conditions = array();\n        $findType = 'all';\n        if ($org_id !== false) {\n            $findType = 'first';\n            $conditions = array('User.org_id' => $org_id);\n        }\n        $fields = array('org_id', 'COUNT(User.id) AS num_members');\n        $params = array(\n                'fields' => $fields,\n                'recursive' => -1,\n                'group' => array('org_id'),\n                'order' => array('org_id'),\n                'conditions' => $conditions\n        );\n        $orgs = $this->find($findType, $params);\n        if (empty($orgs)) {\n            return 0;\n        }\n        if ($org_id !== false) {\n            return $orgs[0]['num_members'];\n        } else {\n            $usersPerOrg = [];\n            foreach ($orgs as $key => $value) {\n                $usersPerOrg[$value['User']['org_id']] = $value[0]['num_members'];\n            }\n            return $usersPerOrg;\n        }\n    }\n\n    public function findAdminsResponsibleForUser($user)\n    {\n        $admin = $this->find('first', array(\n            'recursive' => -1,\n            'conditions' => array(\n                'Role.perm_admin' => 1,\n                'User.disabled' => 0,\n                'User.org_id' => $user['org_id']\n            ),\n            'contain' => array(\n                'Role' => array('fields' => array('perm_admin'))\n            ),\n            'fields' => array('User.id', 'User.email', 'User.org_id')\n        ));\n        if (count($admin) == 0) {\n            $admin = $this->find('first', array(\n                'recursive' => -1,\n                'conditions' => array(\n                    'Role.perm_site_admin' => 1,\n                    'User.disabled' => 0,\n                ),\n                'contain' => array(\n                    'Role' => array('fields' => array('perm_site_admin'))\n                ),\n                'fields' => array('User.id', 'User.email', 'User.org_id')\n            ));\n        }\n\n        return $admin['User'];\n    }\n\n    public function initiatePasswordReset($user, $firstTime = false, $simpleReturn = false, $fixedPassword = false)\n    {\n        $org = Configure::read('MISP.org');\n        $options = array('passwordResetText', 'newUserText');\n        $subjects = array('[' . $org . ' MISP] New user registration', '[' . $org .  ' MISP] Password reset');\n        $textToFetch = $options[($firstTime ? 0 : 1)];\n        $subject = $subjects[($firstTime ? 0 : 1)];\n        $this->Server = ClassRegistry::init('Server');\n        $body = Configure::read('MISP.' . $textToFetch);\n        if (!$body) {\n            $body = $this->Server->serverSettings['MISP'][$textToFetch]['value'];\n        }\n        $body = $this->adminMessageResolve($body);\n        if ($fixedPassword) {\n            $password = $fixedPassword;\n        } else {\n            $password = $this->generateRandomPassword();\n        }\n        $body = str_replace('$password', $password, $body);\n        $body = str_replace('$username', $user['User']['email'], $body);\n        $result = $this->sendEmail($user, $body, false, $subject);\n        if ($result) {\n            $this->id = $user['User']['id'];\n            $this->saveField('password', $password);\n            $this->saveField('change_pw', '1');\n            if ($simpleReturn) {\n                return true;\n            } else {\n                return array('body'=> json_encode(array('saved' => true, 'success' => 'New credentials sent.')),'status'=>200);\n            }\n        }\n        if ($simpleReturn) {\n            return false;\n        } else {\n            return array('body'=> json_encode(array('saved' => false, 'errors' => 'There was an error notifying the user. His/her credentials were not altered.')),'status'=>200);\n        }\n    }\n\n    public function getOrgAdminsForOrg($org_id, $excludeUserId = false)\n    {\n        $adminRoles = $this->Role->find('list', array(\n            'recursive' => -1,\n            'conditions' => array('perm_admin' => 1),\n            'fields' => array('Role.id', 'Role.id')\n        ));\n        $conditions = array(\n            'User.org_id' => $org_id,\n            'User.disabled' => 0,\n            'User.role_id' => $adminRoles\n        );\n        if ($excludeUserId) {\n            $conditions['User.id !='] = $excludeUserId;\n        }\n        return $this->find('list', array(\n            'recursive' => -1,\n            'conditions' => $conditions,\n            'fields' => array(\n                'User.id', 'User.email'\n            )\n        ));\n    }\n\n    public function verifyPassword($user_id, $password)\n    {\n        $currentUser = $this->find('first', array(\n                'conditions' => array('User.id' => $user_id),\n                'recursive' => -1,\n                'fields' => array('User.password')\n        ));\n        if (empty($currentUser)) {\n            return false;\n        }\n        if (strlen($currentUser['User']['password']) == 40) {\n            App::uses('SimplePasswordHasher', 'Controller/Component/Auth');\n            $passwordHasher = new SimplePasswordHasher();\n        } else {\n            $passwordHasher = new BlowfishPasswordHasher();\n        }\n        $hashed = $passwordHasher->check($password, $currentUser['User']['password']);\n        return $hashed;\n    }\n\n    public function createInitialUser($org_id)\n    {\n        $authKey = $this->generateAuthKey();\n        $admin = array('User' => array(\n            'id' => 1,\n            'email' => 'admin@admin.test',\n            'org_id' => $org_id,\n            'password' => 'admin',\n            'confirm_password' => 'admin',\n            'authkey' => $authKey,\n            'nids_sid' => 4000000,\n            'newsread' => 0,\n            'role_id' => 1,\n            'change_pw' => 1\n        ));\n        $this->validator()->remove('password'); // password is too simple, remove validation\n        $this->save($admin);\n        return $authKey;\n    }\n\n    public function resetAllSyncAuthKeysRouter($user, $jobId = false)\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            $job = ClassRegistry::init('Job');\n            $job->create();\n            $eventModel = ClassRegistry::init('Event');\n            $data = array(\n                    'worker' => $eventModel->__getPrioWorkerIfPossible(),\n                    'job_type' => __('reset_all_sync_api_keys'),\n                    'job_input' => __('Reseting all API keys'),\n                    'status' => 0,\n                    'retries' => 0,\n                    'org_id' => $user['org_id'],\n                    'org' => $user['Organisation']['name'],\n                    'message' => 'Issuing new API keys to all sync users.',\n            );\n            $job->save($data);\n            $jobId = $job->id;\n            $process_id = CakeResque::enqueue(\n                    'prio',\n                    'AdminShell',\n                    array('resetSyncAuthkeys', $user['id'], $jobId),\n                    true\n            );\n            $job->saveField('process_id', $process_id);\n            return true;\n        } else {\n            return $this->resetAllSyncAuthKeys($user);\n        }\n    }\n\n    public function resetAllSyncAuthKeys($user, $jobId = false)\n    {\n        $affected_users = $this->find('all', array(\n            'recursive' => -1,\n            'contain' => array('Role'),\n            'conditions' => array(\n                'OR' => array(\n                    'Role.perm_sync' => 1,\n                    'Role.perm_admin' => 1\n                ),\n                'Role.perm_site_admin' => 0\n            )\n        ));\n        $results = array('success' => 0, 'fails' => 0);\n        $user_count = count($affected_users);\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n            $existingJob = $job->find('first', array(\n                'conditions' => array('Job.id' => $jobId),\n                'recursive' => -1\n            ));\n            if (empty($existingJob)) {\n                $jobId = false;\n            }\n        }\n        foreach ($affected_users as $k => $affected_user) {\n            try {\n                $reset_result = $this->resetauthkey($user, $affected_user['User']['id'], true);\n                if ($reset_result) {\n                    $results['success'] += 1;\n                } else {\n                    $results['fails'] += 1;\n                }\n            } catch (Exception $e) {\n                $results['fails'] += 1;\n            }\n            if ($jobId) {\n                if ($k % 100 == 0) {\n                    $job->id =  $jobId;\n                    $job->saveField('progress', 100 * (($k + 1) / count($user_count)));\n                    $job->saveField('message', __('Reset in progress - %s/%s.', $k, $user_count));\n                }\n            }\n        }\n        if ($jobId) {\n            $message = __('%s authkeys reset, %s could not be reset', $results['success'], $results['fails']);\n            $job->saveField('progress', 100);\n            $job->saveField('message', $message);\n            $job->saveField('status', 4);\n        }\n        return $results;\n    }\n\n    public function resetauthkey($user, $id, $alert = false)\n    {\n        $this->id = $id;\n        if (!$id || !$this->exists($id)) {\n            return false;\n        }\n        $updatedUser = $this->read();\n        $oldKey = $this->data['User']['authkey'];\n        if (empty($user['Role']['perm_site_admin']) && !($user['Role']['perm_admin'] && $user['org_id'] == $updatedUser['User']['org_id']) && ($user['id'] != $id)) {\n            return false;\n        }\n        $newkey = $this->generateAuthKey();\n        $this->saveField('authkey', $newkey);\n        $this->extralog(\n                $user,\n                'reset_auth_key',\n                sprintf(\n                    __('Authentication key for user %s (%s) updated.'),\n                    $updatedUser['User']['id'],\n                    $updatedUser['User']['email']\n                ),\n                $fieldsResult = 'authkey(' . $oldKey . ') => (' . $newkey . ')',\n                $updatedUser\n        );\n        if ($alert) {\n            $baseurl = Configure::read('MISP.external_baseurl');\n            if (empty($baseurl)) {\n                $baseurl = Configure::read('MISP.baseurl');\n            }\n            $body = __(\n                \"Dear user,\\n\\nan API key reset has been triggered by an administrator for your user account on %s.\\n\\nYour new API key is: %s\\n\\nPlease update your server's sync setup to reflect this change.\\n\\nWe apologise for the inconvenience.\",\n                $baseurl,\n                $newkey\n            );\n            $bodyNoEnc = __(\n                \"Dear user,\\n\\nan API key reset has been triggered by an administrator for your user account on %s.\\n\\nYour new API key can be retrieved by logging in using this sync user's account.\\n\\nPlease update your server's sync setup to reflect this change.\\n\\nWe apologise for the inconvenience.\",\n                $baseurl,\n                $newkey\n            );\n            $this->sendEmail(\n                $updatedUser,\n                $body,\n                $bodyNoEnc,\n                __('API key reset by administrator')\n            );\n        }\n        return $newkey;\n    }\n\n    public function extralog($user, $action = null, $description = null, $fieldsResult = null, $modifiedUser = null)\n    {\n        // new data\n        $model = 'User';\n        $modelId = $user['id'];\n        if (!empty($modifiedUser)) {\n            $modelId = $modifiedUser['User']['id'];\n        }\n        if ($action == 'login') {\n            $description = \"User (\" . $user['id'] . \"): \" . $user['email'];\n        } elseif ($action == 'logout') {\n            $description = \"User (\" . $user['id'] . \"): \" . $user['email'];\n        } elseif ($action == 'edit') {\n            $description = \"User (\" . $modifiedUser['User']['id'] . \"): \" . $modifiedUser['User']['email'];\n        } elseif ($action == 'change_pw') {\n            $description = \"User (\" . $modifiedUser['User']['id'] . \"): \" . $modifiedUser['User']['email'];\n            $fieldsResult = \"Password changed.\";\n        }\n\n        // query\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        $this->Log->save(array(\n            'org' => $user['Organisation']['name'],\n            'model' => $model,\n            'model_id' => $modelId,\n            'email' => $user['email'],\n            'action' => $action,\n            'title' => $description,\n            'change' => isset($fieldsResult) ? $fieldsResult : ''));\n\n        // write to syslogd as well\n        App::import('Lib', 'SysLog.SysLog');\n        $syslog = new SysLog();\n        $syslog->write('notice', $description . ' -- ' . $action . (empty($fieldResult) ? '' : '-- ' . $fieldResult));\n    }\n}\n", "<div class=\"servers index\">\n    <h2><?php echo __('Servers');?></h2>\n    <div class=\"pagination\">\n        <ul>\n        <?php\n        $this->Paginator->options(array(\n            'update' => '.span12',\n            'evalScripts' => true,\n            'before' => '$(\".progress\").show()',\n            'complete' => '$(\".progress\").hide()',\n        ));\n\n            echo $this->Paginator->prev('&laquo; ' . __('previous'), array('tag' => 'li', 'escape' => false), null, array('tag' => 'li', 'class' => 'prev disabled', 'escape' => false, 'disabledTag' => 'span'));\n            echo $this->Paginator->numbers(array('modulus' => 20, 'separator' => '', 'tag' => 'li', 'currentClass' => 'active', 'currentTag' => 'span'));\n            echo $this->Paginator->next(__('next') . ' &raquo;', array('tag' => 'li', 'escape' => false), null, array('tag' => 'li', 'class' => 'next disabled', 'escape' => false, 'disabledTag' => 'span'));\n        ?>\n        </ul>\n    </div>\n    <table class=\"table table-striped table-hover table-condensed\">\n    <tr>\n            <th><?php echo $this->Paginator->sort('id');?></th>\n            <th><?php echo $this->Paginator->sort('name');?></th>\n            <th><?php echo __('Connection test');?></th>\n            <th><?php echo __('Reset API key');?></th>\n            <th><?php echo $this->Paginator->sort('internal');?></th>\n            <th><?php echo $this->Paginator->sort('push');?></th>\n            <th><?php echo $this->Paginator->sort('pull');?></th>\n            <th><?php echo $this->Paginator->sort('caching_enabled', 'Cache');?></th>\n            <th><?php echo $this->Paginator->sort('unpublish_event (push event)');?></th>\n            <th><?php echo $this->Paginator->sort('publish_without_email (pull event)');?></th>\n            <th><?php echo $this->Paginator->sort('url');?></th>\n            <th><?php echo __('Remote Organisation');?></th>\n            <th><?php echo $this->Paginator->sort('cert_file');?></th>\n            <th><?php echo $this->Paginator->sort('client_cert_file');?></th>\n            <th><?php echo $this->Paginator->sort('self_signed');?></th>\n            <th><?php echo $this->Paginator->sort('skip_proxy');?></th>\n            <th><?php echo $this->Paginator->sort('org');?></th>\n            <th class=\"actions\"><?php echo __('Actions');?></th>\n    </tr>\n    <?php\nforeach ($servers as $server):\n    $rules = array();\n    $rules['push'] = json_decode($server['Server']['push_rules'], true);\n    $rules['pull'] = json_decode($server['Server']['pull_rules'], true);\n    $syncOptions = array('pull', 'push');\n    $fieldOptions = array('tags', 'orgs');\n    $typeOptions = array('OR' => array('colour' => 'green', 'text' => 'allowed'), 'NOT' => array('colour' => 'red', 'text' => 'blocked'));\n    $ruleDescription = array('pull' => '', 'push' => '');\n    foreach ($syncOptions as $syncOption) {\n        foreach ($fieldOptions as $fieldOption) {\n            foreach ($typeOptions as $typeOption => $typeData) {\n                if (isset($rules[$syncOption][$fieldOption][$typeOption]) && !empty($rules[$syncOption][$fieldOption][$typeOption])) {\n                    $ruleDescription[$syncOption] .= '<span class=\\'bold\\'>' . ucfirst($fieldOption) . ' ' . $typeData['text'] . '</span>: <span class=\\'' . $typeData['colour'] . '\\'>';\n                    foreach ($rules[$syncOption][$fieldOption][$typeOption] as $k => $temp) {\n                        if ($k != 0) $ruleDescription[$syncOption] .= ', ';\n                        if ($syncOption === 'push') $temp = $collection[$fieldOption][$temp];\n                        $ruleDescription[$syncOption] .= h($temp);\n                    }\n                    $ruleDescription[$syncOption] .= '</span><br />';\n                }\n            }\n        }\n    }\n?>\n    <tr>\n        <td class=\"short\"><?php echo h($server['Server']['id']); ?></td>\n        <td>\n            <?php\n                if (!empty($server['Server']['name'])) echo h($server['Server']['name']);\n                else echo h($server['Server']['url']);\n            ?>\n        </td>\n        <td id=\"connection_test_<?php echo $server['Server']['id'];?>\"><span role=\"button\" tabindex=\"0\" aria-label=\"<?php echo __('Test the connection to the remote instance');?>\" title=\"<?php echo __('Test the connection to the remote instance');?>\" class=\"btn btn-primary\" style=\"line-height:10px; padding: 4px 4px;\" onClick=\"testConnection('<?php echo $server['Server']['id'];?>');\"><?php echo __('Run');?></span></td>\n        <td id=\"reset_api_key_<?php echo $server['Server']['id'];?>\">\n            <?php\n                echo $this->Form->postLink(\n                    __('Reset'),\n                    $baseurl . '/servers/resetRemoteAuthKey/' . $server['Server']['id'],\n                    array(\n                        'style' => 'line-height:10px; padding: 4px 4px;',\n                        'title' => __('Remotely reset API key'),\n                        'aria-label' => __('Remotely reset API key'),\n                        'class' => 'btn btn-primary'\n                    )\n                );\n            ?>\n        </td>\n\n<td><span class=\"<?php echo ($server['Server']['internal']? 'icon-ok' : 'icon-remove'); ?>\" role=\"img\" aria-label=\"<?php echo ($server['Server']['internal']? __('Yes') : __('No')); ?>\" title=\"<?php echo ($server['Server']['internal']? __('Internal instance that ignores distribution level degradation *WARNING: Only use this setting if you have several internal instances and the sync link is to an internal extension of the current MISP community*') : __('Normal sync link to an external MISP instance. Distribution degradation will follow the normal rules.')); ?>\"></span></td>\n        <td><span class=\"<?php echo ($server['Server']['push']? 'icon-ok' : 'icon-remove'); ?>\" role=\"img\" aria-label=\"<?php echo ($server['Server']['push']? __('Yes') : __('No')); ?>\"></span><span class=\"short <?php if (!$server['Server']['push'] || empty($ruleDescription['push'])) echo \"hidden\"; ?>\" data-toggle=\"popover\" title=\"Distribution List\" data-content=\"<?php echo $ruleDescription['push']; ?>\"> (<?php echo __('Rules');?>)</span></td>\n        <td><span class=\"<?php echo ($server['Server']['pull']? 'icon-ok' : 'icon-remove'); ?>\" role=\"img\" aria-label=\"<?php echo ($server['Server']['pull']? __('Yes') : __('No')); ?>\"></span><span class=\"short <?php if (!$server['Server']['pull'] || empty($ruleDescription['pull'])) echo \"hidden\"; ?>\" data-toggle=\"popover\" title=\"Distribution List\" data-content=\"<?php echo $ruleDescription['pull']; ?>\"> (<?php echo __('Rules');?>)</span></td>\n        <td>\n            <?php\n                if ($server['Server']['caching_enabled']) {\n                    if (!empty($server['Server']['cache_timestamp'])) {\n                        $units = array('m', 'h', 'd');\n                        $intervals = array(60, 60, 24);\n                        $unit = 's';\n                        $last = time() - $server['Server']['cache_timestamp'];\n                        foreach ($units as $k => $v) {\n                            if ($last > $intervals[$k]) {\n                                $unit = $v;\n                                $last = floor($last / $intervals[$k]);\n                            } else {\n                                break;\n                            }\n                        }\n                        echo sprintf(\n                            '<span class=\"blue bold\">%s%s%s</span> %s',\n                            __('Age: '),\n                            $last,\n                            $unit,\n                            '<span class=\"icon-ok\"></span>'\n                        );\n                    } else {\n                        echo sprintf(\n                            '<span class=\"red bold\">%s</span> %s',\n                            __('Not cached'),\n                            '<span class=\"icon-ok\"></span>'\n                        );\n                    }\n                } else {\n                    echo '<span class=\"icon-remove\" role=\"img\" aria-label=\"' . __('No') . '\"></span>';\n                }\n            ?>\n        </td>\n        <td class=\"short\"><span class=\"<?php echo ($server['Server']['unpublish_event'] ? 'icon-ok' : 'icon-remove'); ?>\" role=\"img\" aria-label=\"<?php echo ($server['Server']['unpublish_event'] ? __('Yes') : __('No')); ?>\"></span></td>\n        <td class=\"short\"><span class=\"<?php echo ($server['Server']['publish_without_email'] ? 'icon-ok' : 'icon-remove'); ?>\" role=\"img\" aria-label=\"<?php echo ($server['Server']['publish_without_email'] ? __('Yes') : __('No')); ?>\"></span></td>\n        <td><?php echo h($server['Server']['url']); ?>&nbsp;</td>\n        <td><a href=\"/organisations/view/<?php echo h($server['RemoteOrg']['id']); ?>\"><?php echo h($server['RemoteOrg']['name']); ?></a></td>\n        <td class=\"short\"><?php echo h($server['Server']['cert_file']); ?>&nbsp;</td>\n        <td class=\"short\"><?php echo h($server['Server']['client_cert_file']); ?>&nbsp;</td>\n        <td class=\"short\"><span class=\"<?php echo ($server['Server']['self_signed'] ? 'icon-ok' : 'icon-remove'); ?>\" role=\"img\" aria-label=\"<?php echo ($server['Server']['self_signed'] ? __('Yes') : __('No')); ?>\"></span></td>\n        <td class=\"short\"><span class=\"<?php echo ($server['Server']['skip_proxy'] ? 'icon-ok' : 'icon-remove'); ?>\" role=\"img\" aria-label=\"<?php echo ($server['Server']['skip_proxy'] ? __('Yes') : __('No')); ?>\"></span></td>\n        <td class=\"short\"><a href=\"/organisations/view/<?php echo h($server['Organisation']['id']); ?>\"><?php echo h($server['Organisation']['name']); ?></a></td>\n        <td class=\"short action-links\">\n            <?php\n                echo sprintf('<a href=\"%s\" title=\"%s\" aria-label=\"%s\" class=\"%s\"></a>', $baseurl . '/servers/previewIndex/' . h($server['Server']['id']), __('Explore'), __('Explore'), 'fa fa-search');\n                if ($server['Server']['pull']) {\n                    echo sprintf('<a href=\"%s\" title=\"%s\" aria-label=\"%s\" class=\"%s\"></a>', $baseurl . '/servers/pull/' . h($server['Server']['id']) . '/update', __('Pull updates to events that already exist locally'), __('Pull updates'), 'fa fa-sync');\n                    echo sprintf('<a href=\"%s\" title=\"%s\" aria-label=\"%s\" class=\"%s\"></a>', $baseurl . '/servers/pull/' . h($server['Server']['id']) . '/full', __('Pull all'), __('Pull all'), 'fa fa-arrow-circle-down');\n                }\n                if ($server['Server']['push']) {\n                    echo sprintf('<a href=\"%s\" title=\"%s\" aria-label=\"%s\" class=\"%s\"></a>', $baseurl . '/servers/push/' . h($server['Server']['id']) . '/full', __('Push all'), __('Push all'), 'fa fa-arrow-circle-up');\n                }\n                if ($server['Server']['caching_enabled']) {\n                        echo sprintf('<a href=\"%s\" title=\"%s\" aria-label=\"%s\" class=\"%s\"></a>', $baseurl . '/servers/cache/' . h($server['Server']['id']), __('Cache instance'), __('Cache instance'), 'fa fa-memory');\n                }\n                $mayModify = ($isSiteAdmin);\n                if ($mayModify) {\n                    echo sprintf('<a href=\"%s\" title=\"%s\" aria-label=\"%s\" class=\"%s\"></a>', $baseurl . '/servers/edit/' . h($server['Server']['id']), __('Edit'), __('Edit'), 'fa fa-edit');\n                    echo $this->Form->postLink('', array('action' => 'delete', $server['Server']['id']), array('class' => 'fa fa-trash', 'title' => __('Delete'), 'aria-label' => __('Delete')), __('Are you sure you want to delete # %s?', $server['Server']['id']));\n                }\n            ?>\n\n        </td>\n    </tr>\n    <?php\nendforeach; ?>\n    </table>\n    <p>\n    <?php\n    echo $this->Paginator->counter(array(\n    'format' => __('Page {:page} of {:pages}, showing {:current} records out of {:count} total, starting on record {:start}, ending on {:end}')\n    ));\n    ?>\n    </p>\n    <div class=\"pagination\">\n        <ul>\n        <?php\n            echo $this->Paginator->prev('&laquo; ' . __('previous'), array('tag' => 'li', 'escape' => false), null, array('tag' => 'li', 'class' => 'prev disabled', 'escape' => false, 'disabledTag' => 'span'));\n            echo $this->Paginator->numbers(array('modulus' => 20, 'separator' => '', 'tag' => 'li', 'currentClass' => 'active', 'currentTag' => 'span'));\n            echo $this->Paginator->next(__('next') . ' &raquo;', array('tag' => 'li', 'escape' => false), null, array('tag' => 'li', 'class' => 'next disabled', 'escape' => false, 'disabledTag' => 'span'));\n        ?>\n        </ul>\n    </div>\n\n</div>\n<script type=\"text/javascript\">\n    $(document).ready(function(){\n        popoverStartup();\n    });\n</script>\n<?php\n    echo $this->element('/genericElements/SideMenu/side_menu', array('menuList' => 'sync', 'menuItem' => 'index'));\n", "<div class=\"users index\">\n    <h2><?php echo __('Users');?></h2>\n    <?php\n        if ($isSiteAdmin) {\n            echo sprintf(\n                '<span>%s</span>',\n                __(\n                    'Click %s to reset the API keys of all sync and org admin users in one shot. This will also automatically inform them of their new API keys.',\n                    $this->Form->postLink(\n                        __('here'),\n                        $baseurl . '/users/resetAllSyncAuthKeys',\n                        array(\n                            'title' => __('Reset all sync user API keys'),\n                            'aria-label' => __('Reset all sync user API keys'),\n                            'class' => 'bold'\n                        ),\n                        __('Are you sure you wish to reset the API keys of all users with sync privileges?')\n                    )\n                )\n            );\n        }\n    ?>\n    <div class=\"pagination\">\n        <ul>\n        <?php\n            $this->Paginator->options(array(\n                'update' => '.span12',\n                'evalScripts' => true,\n                'before' => '$(\".progress\").show()',\n                'complete' => '$(\".progress\").hide()',\n            ));\n            echo $this->Paginator->prev('&laquo; ' . __('previous'), array('tag' => 'li', 'escape' => false), null, array('tag' => 'li', 'class' => 'prev disabled', 'escape' => false, 'disabledTag' => 'span'));\n            echo $this->Paginator->numbers(array('modulus' => 20, 'separator' => '', 'tag' => 'li', 'currentClass' => 'active', 'currentTag' => 'span'));\n            echo $this->Paginator->next(__('next') . ' &raquo;', array('tag' => 'li', 'escape' => false), null, array('tag' => 'li', 'class' => 'next disabled', 'escape' => false, 'disabledTag' => 'span'));\n        ?>\n        </ul>\n    </div>\n    <?php\n        $filterParamsString = array();\n        foreach ($passedArgsArray as $k => $v) {\n                $filterParamsString[] = sprintf(\n                    '%s: %s',\n                    h(ucfirst($k)),\n                    h($v)\n                );\n        }\n        $filterParamsString = implode(' & ', $filterParamsString);\n        $data = array(\n            'children' => array(\n                array(\n                    'children' => array(\n                        array(\n                            'id' => 'create-button',\n                            'title' => __('Modify filters'),\n                            'fa-icon' => 'search',\n                            'onClick' => 'getPopup',\n                            'onClickParams' => array($urlparams, 'admin/users', 'filterUserIndex')\n                        )\n                    )\n                ),\n                array(\n                    'children' => array(\n                        array(\n                            'requirement' => count($passedArgsArray) > 0,\n                            'html' => sprintf(\n                                '<span class=\"bold\">%s</span>: %s',\n                                __('Filters'),\n                                $filterParamsString\n                            )\n                        ),\n                        array(\n                            'requirement' => count($passedArgsArray) > 0,\n                            'url' => '/admin/users/index',\n                            'title' => __('Remove filters'),\n                            'fa-icon' => 'times'\n                        )\n                    )\n                ),\n                array(\n                    'type' => 'search',\n                    'button' => __('Filter'),\n                    'placeholder' => __('Enter value to search'),\n                    'data' => '',\n                )\n            )\n        );\n        echo $this->element('/genericElements/ListTopBar/scaffold', array('data' => $data));\n        $tab = \"Center\";\n        $filtered = false;\n        if (count($passedArgsArray) > 0) {\n            $tab = \"Left\";\n            $filtered = true;\n        }\n        echo $this->element('Users/userIndexTable');\n    ?>\n    <p>\n    <?php\n    echo $this->Paginator->counter(array(\n    'format' => __('Page {:page} of {:pages}, showing {:current} records out of {:count} total, starting on record {:start}, ending on {:end}')\n    ));\n    ?>\n    </p>\n    <div class=\"pagination\">\n        <ul>\n        <?php\n            echo $this->Paginator->prev('&laquo; ' . __('previous'), array('tag' => 'li', 'escape' => false), null, array('tag' => 'li', 'class' => 'prev disabled', 'escape' => false, 'disabledTag' => 'span'));\n            echo $this->Paginator->numbers(array('modulus' => 20, 'separator' => '', 'tag' => 'li', 'currentClass' => 'active', 'currentTag' => 'span'));\n            echo $this->Paginator->next(__('next') . ' &raquo;', array('tag' => 'li', 'escape' => false), null, array('tag' => 'li', 'class' => 'next disabled', 'escape' => false, 'disabledTag' => 'span'));\n        ?>\n        </ul>\n    </div>\n</div>\n<script type=\"text/javascript\">\n    var passedArgsArray = <?php echo $passedArgs; ?>;\n    $(document).ready(function() {\n        $('.searchFilterButton').click(function() {\n            runIndexFilter(this);\n        });\n        $('#quickFilterButton').click(function() {\n            runIndexQuickFilter();\n        });\n        $('#quickFilterField').on('keypress', function (e) {\n            if(e.which === 13) {\n                runIndexQuickFilter();\n            }\n        });\n    });\n</script>\n<?php\n    echo $this->element('/genericElements/SideMenu/side_menu', array('menuList' => 'admin', 'menuItem' => 'indexUser'));\n"], "filenames": ["app/Console/Command/AdminShell.php", "app/Controller/Component/ACLComponent.php", "app/Controller/ServersController.php", "app/Controller/UsersController.php", "app/Model/Log.php", "app/Model/Server.php", "app/Model/User.php", "app/View/Servers/index.ctp", "app/View/Users/admin_index.ctp"], "buggy_code_start_loc": [508, 338, 47, 214, 50, 2292, 1255, 23, 2], "buggy_code_end_loc": [508, 569, 2091, 1336, 50, 5189, 1255, 72, 2], "fixing_code_start_loc": [509, 338, 46, 214, 51, 2292, 1256, 24, 3], "fixing_code_end_loc": [535, 644, 2110, 1308, 52, 5252, 1426, 88, 23], "type": "CWE-269", "message": "MISP before 2.4.115 allows privilege escalation in certain situations. After updating to 2.4.115, escalation attempts are blocked by the __checkLoggedActions function with a \"This could be an indication of an attempted privilege escalation on older vulnerable versions of MISP (<2.4.115)\" message.", "other": {"cve": {"id": "CVE-2019-16202", "sourceIdentifier": "cve@mitre.org", "published": "2019-09-10T14:15:10.663", "lastModified": "2019-09-11T18:34:41.483", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "MISP before 2.4.115 allows privilege escalation in certain situations. After updating to 2.4.115, escalation attempts are blocked by the __checkLoggedActions function with a \"This could be an indication of an attempted privilege escalation on older vulnerable versions of MISP (<2.4.115)\" message."}, {"lang": "es", "value": "MISP versiones anteriores a 2.4.115, permite una escalada de privilegios en ciertas situaciones. Despu\u00e9s de actualizar a la versi\u00f3n 2.4.115, los intentos de escalada son bloqueados por la funci\u00f3n __checkLoggedActions con un mensaje \"This could be an indication of an attempted privilege escalation on older vulnerable versions of MISP (versiones anteriores a la 2.4.115)\"."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.115", "matchCriteriaId": "300E8B54-6A61-4CE8-A154-E63B3FB16F3E"}]}]}], "references": [{"url": "https://excellium-services.com/cert-xlm-advisory/cve-2019-16202/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/MISP/MISP/commit/75acd63c46506ad404764c3a3de7d4ca11d0560f", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/MISP/MISP/compare/v2.4.114...v2.4.115", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/75acd63c46506ad404764c3a3de7d4ca11d0560f"}}