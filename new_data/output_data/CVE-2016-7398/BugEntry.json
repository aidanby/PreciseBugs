{"buggy_code": [".cproject\n.deps\n.libs/\n.project\nMakefile\nMakefile.fragments\nMakefile.global\nMakefile.objects\nacinclude.m4\naclocal.m4\nautom4te.cache/\nbuild/\nconfig.guess\nconfig.h\nconfig.h.in\nconfig.log\nconfig.nice\nconfig.status\nconfig.sub\nconfigure\nconfigure.in\nhttp.la\ninstall-sh\nlcov_data\nlibtool\nltmain.sh\nmissing\nmkinstalldirs\nmodules/\npecl_http-*.tgz\n*.lo\n*.o\nrun-tests.php\ntests/*.diff\ntests/*.exp\ntests/*.log\ntests/*.out\ntests/*.php\ntests/*.sh\nlcov_data\n*~\n*.phar\nvendor/\ntests/helper/server.log\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<package version=\"2.0\" xmlns=\"http://pear.php.net/dtd/package-2.0\"\n xmlns:tasks=\"http://pear.php.net/dtd/tasks-1.0\"\n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n xsi:schemaLocation=\"\n  http://pear.php.net/dtd/tasks-1.0\n  http://pear.php.net/dtd/tasks-1.0.xsd\n  http://pear.php.net/dtd/package-2.0\n  http://pear.php.net/dtd/package-2.0.xsd\">\n <name>pecl_http</name>\n <channel>pecl.php.net</channel>\n <summary>Extended HTTP Support</summary>\n <description><![CDATA[\nThis HTTP extension aims to provide a convenient and powerful\nset of functionality for one of PHPs major applications.\n\nIt eases handling of HTTP urls, headers and messages, provides\nmeans for negotiation of a client's preferred content type,\nlanguage and charset, as well as a convenient way to send any\narbitrary data with caching and resuming capabilities.\n\nIt provides powerful request functionality with support for\nparallel requests.\n\nDocumentation:\nhttps://mdref.m6w6.name/http\n]]></description>\n <lead>\n  <name>Michael Wallner</name>\n  <user>mike</user>\n  <email>mike@php.net</email>\n  <active>yes</active>\n </lead>\n <date>2016-09-07</date>\n <version>\n  <release>2.6.0beta2</release>\n  <api>2.6.0</api>\n </version>\n <stability>\n  <release>beta</release>\n  <api>stable</api>\n </stability>\n <license uri=\"http://copyfree.org/content/standard/licenses/2bsd/license.txt\">BSD-2-Clause</license>\n <notes><![CDATA[\n+ Added http\\Client\\Curl\\User interface for userland event loops\n+ Added http\\Url::IGNORE_ERRORS, http\\Url::SILENT_ERRORS and http\\Url::STDFLAGS\n+ Added http\\Client::setDebug(callable $debug)\n+ Added http\\Client\\Curl\\FEATURES constants and namespace\n+ Added http\\Client\\Curl\\VERSIONS constants and namespace\n+ Added share_cookies and share_ssl (libcurl >= 7.23.0) options to http\\Client::configure()\n+ http\\Client uses curl_share handles to properly share cookies and SSL/TLS sessions between requests\n+ Improved configure checks for default CA bundles\n+ Improved negotiation precision\n* Fixed regression introduced by http\\Params::PARSE_RFC5987: negotiation using the params parser would receive param keys without the trailing asterisk, stripped by http\\Params::PARSE_RFC5987.\n* Fix gh-issue #50: http\\Client::dequeue() within http\\Client::setDebug() causes segfault (Mike, Maik Wagner)\n* Fix gh-issue #47: http\\Url: Null pointer deref in sanitize_value() (Mike, @rc0r)\n* Fix gh-issue #45: HTTP/2 response message parsing broken with libcurl >= 7.49.1 (Mike)\n* Fix gh-issue #43: Joining query with empty original variable in query (Mike, Sander Backus)\n* Fix gh-issue #42: fatal error when using punycode in URLs (Mike, Sebastian Thielen)\n* Fix gh-issue #41: Use curl_version_info_data.features when initializing options (Mike)\n* Fix gh-issue #40: determinde the SSL backend used by curl at runtime (Mike, @rcanavan)\n* Fix gh-issue #39: Notice: http\\Client::enqueue(): Could not set option proxy_service_name (Mike, @rcanavan)\n* Fix gh-issue #38: Persistent curl handles: error code not properly reset (Mike, @afflerbach)\n* Fix gh-issue #36: Unexpected cookies sent if persistent_handle_id is used (Mike, @rcanavan, @afflerbach)\n* Fix gh-issue #34: allow setting multiple headers with the same name (Mike, @rcanavan)\n* Fix gh-issue #33: allow setting prodyhost request option to NULL (Mike, @rcanavan)\n* Fix gh-issue #31: add/improve configure checks for default CA bundle/path (Mike, @rcanavan) \n\nChanges from beta1:\n* Fixed PHP-5.3 compatibility\n* Fixed recursive calls to the event loop dispatcher\n]]></notes>\n <contents>\n  <dir name=\"/\">\n   <file role=\"doc\" name=\"AUTHORS\"/>\n   <file role=\"doc\" name=\"BUGS\"/>\n   <file role=\"doc\" name=\"CONTRIBUTING.md\"/>\n   <file role=\"doc\" name=\"CREDITS\"/>\n   <file role=\"doc\" name=\"LICENSE\"/>\n   <file role=\"doc\" name=\"README.md\"/>\n   <file role=\"doc\" name=\"THANKS\"/>\n   <file role=\"doc\" name=\"TODO\"/>\n   <file role=\"src\" name=\"config.m4\"/>\n   <file role=\"src\" name=\"config9.m4\"/>\n   <file role=\"src\" name=\"config.w32\"/>\n   <file role=\"src\" name=\"Makefile.frag\"/>\n   <file role=\"src\" name=\"php_http.h\"/>\n   <dir name=\"src\">\n    <file role=\"src\" name=\"php_http_api.h\"/>\n    <file role=\"src\" name=\"php_http_buffer.c\"/>\n    <file role=\"src\" name=\"php_http_buffer.h\"/>\n    <file role=\"src\" name=\"php_http.c\"/>\n    <file role=\"src\" name=\"php_http_client.c\"/>\n    <file role=\"src\" name=\"php_http_client.h\"/>\n    <file role=\"src\" name=\"php_http_client_curl.c\"/>\n    <file role=\"src\" name=\"php_http_client_curl.h\"/>\n    <file role=\"src\" name=\"php_http_client_curl_event.c\"/>\n    <file role=\"src\" name=\"php_http_client_curl_event.h\"/>\n    <file role=\"src\" name=\"php_http_client_curl_user.c\"/>\n    <file role=\"src\" name=\"php_http_client_curl_user.h\"/>\n    <file role=\"src\" name=\"php_http_client_request.c\"/>\n    <file role=\"src\" name=\"php_http_client_request.h\"/>\n    <file role=\"src\" name=\"php_http_client_response.c\"/>\n    <file role=\"src\" name=\"php_http_client_response.h\"/>\n    <file role=\"src\" name=\"php_http_cookie.c\"/>\n    <file role=\"src\" name=\"php_http_cookie.h\"/>\n    <file role=\"src\" name=\"php_http_curl.c\"/>\n    <file role=\"src\" name=\"php_http_curl.h\"/>\n    <file role=\"src\" name=\"php_http_encoding.c\"/>\n    <file role=\"src\" name=\"php_http_encoding.h\"/>\n    <file role=\"src\" name=\"php_http_env.c\"/>\n    <file role=\"src\" name=\"php_http_env.h\"/>\n    <file role=\"src\" name=\"php_http_env_request.c\"/>\n    <file role=\"src\" name=\"php_http_env_request.h\"/>\n    <file role=\"src\" name=\"php_http_env_response.c\"/>\n    <file role=\"src\" name=\"php_http_env_response.h\"/>\n    <file role=\"src\" name=\"php_http_etag.c\"/>\n    <file role=\"src\" name=\"php_http_etag.h\"/>\n    <file role=\"src\" name=\"php_http_exception.c\"/>\n    <file role=\"src\" name=\"php_http_exception.h\"/>\n    <file role=\"src\" name=\"php_http_filter.c\"/>\n    <file role=\"src\" name=\"php_http_filter.h\"/>\n    <file role=\"src\" name=\"php_http_header_parser.c\"/>\n    <file role=\"src\" name=\"php_http_header_parser.h\"/>\n    <file role=\"src\" name=\"php_http_header.c\"/>\n    <file role=\"src\" name=\"php_http_header.h\"/>\n    <file role=\"src\" name=\"php_http_info.c\"/>\n    <file role=\"src\" name=\"php_http_info.h\"/>\n    <file role=\"src\" name=\"php_http_message_body.c\"/>\n    <file role=\"src\" name=\"php_http_message_body.h\"/>\n    <file role=\"src\" name=\"php_http_message.c\"/>\n    <file role=\"src\" name=\"php_http_message.h\"/>\n    <file role=\"src\" name=\"php_http_message_parser.c\"/>\n    <file role=\"src\" name=\"php_http_message_parser.h\"/>\n    <file role=\"src\" name=\"php_http_misc.c\"/>\n    <file role=\"src\" name=\"php_http_misc.h\"/>\n    <file role=\"src\" name=\"php_http_negotiate.c\"/>\n    <file role=\"src\" name=\"php_http_negotiate.h\"/>\n    <file role=\"src\" name=\"php_http_object.c\"/>\n    <file role=\"src\" name=\"php_http_object.h\"/>\n    <file role=\"src\" name=\"php_http_options.c\"/>\n    <file role=\"src\" name=\"php_http_options.h\"/>\n    <file role=\"src\" name=\"php_http_params.c\"/>\n    <file role=\"src\" name=\"php_http_params.h\"/>\n    <file role=\"src\" name=\"php_http_querystring.c\"/>\n    <file role=\"src\" name=\"php_http_querystring.h\"/>\n    <file role=\"src\" name=\"php_http_response_codes.h\"/>\n    <file role=\"src\" name=\"php_http_url.c\"/>\n    <file role=\"src\" name=\"php_http_url.h\"/>\n    <file role=\"src\" name=\"php_http_utf8.h\"/>\n    <file role=\"src\" name=\"php_http_version.c\"/>\n    <file role=\"src\" name=\"php_http_version.h\"/>\n   </dir>\n   <dir name=\"tests\">\n    <file role=\"test\" name=\"skipif.inc\"/>\n     <dir name=\"data\">\n      <file role=\"test\" name=\"bug71719.bin\"/>\n      <file role=\"test\" name=\"message_r_content_range.txt\"/>\n      <file role=\"test\" name=\"message_r_multipart_put.txt\"/>\n      <file role=\"test\" name=\"message_rr_empty.txt\"/>\n      <file role=\"test\" name=\"message_rr_empty_chunked.txt\"/>\n      <file role=\"test\" name=\"message_rr_empty_gzip.txt\"/>\n      <file role=\"test\" name=\"message_rr_helloworld_chunked.txt\"/>\n      <file role=\"test\" name=\"urls.txt\"/>\n     </dir>\n     <dir name=\"helper\">\n      <file role=\"test\" name=\"cookie.inc\"/>\n      <file role=\"test\" name=\"dump.inc\"/>\n      <file role=\"test\" name=\"http2.crt\"/>\n      <file role=\"test\" name=\"http2.key\"/>\n      <file role=\"test\" name=\"pipeline.inc\"/>\n      <file role=\"test\" name=\"proxy.inc\"/>\n      <file role=\"test\" name=\"server.inc\"/>\n      <file role=\"test\" name=\"upload.inc\"/>\n      <dir name=\"html\">\n       <file role=\"test\" name=\"index.html\"/>\n      </dir>\n     </dir>\n     <file role=\"test\" name=\"bug61444.phpt\"/>\n     <file role=\"test\" name=\"bug66388.phpt\"/>\n     <file role=\"test\" name=\"bug66891.phpt\"/>\n     <file role=\"test\" name=\"bug67932.phpt\"/>\n     <file role=\"test\" name=\"bug69000.phpt\"/>\n     <file role=\"test\" name=\"bug69076.phpt\"/>\n     <file role=\"test\" name=\"bug69313.phpt\"/>\n     <file role=\"test\" name=\"bug69357.phpt\"/>\n     <file role=\"test\" name=\"bug71719.phpt\"/>\n     <file role=\"test\" name=\"client001.phpt\"/>\n     <file role=\"test\" name=\"client002.phpt\"/>\n     <file role=\"test\" name=\"client003.phpt\"/>\n     <file role=\"test\" name=\"client004.phpt\"/>\n     <file role=\"test\" name=\"client005.phpt\"/>\n     <file role=\"test\" name=\"client006.phpt\"/>\n     <file role=\"test\" name=\"client007.phpt\"/>\n     <file role=\"test\" name=\"client008.phpt\"/>\n     <file role=\"test\" name=\"client009.phpt\"/>\n     <file role=\"test\" name=\"client010.phpt\"/>\n     <file role=\"test\" name=\"client011.phpt\"/>\n     <file role=\"test\" name=\"client012.phpt\"/>\n     <file role=\"test\" name=\"client013.phpt\"/>\n     <file role=\"test\" name=\"client014.phpt\"/>\n     <file role=\"test\" name=\"client015.phpt\"/>\n     <file role=\"test\" name=\"client016.phpt\"/>\n     <file role=\"test\" name=\"client017.phpt\"/>\n     <file role=\"test\" name=\"client018.phpt\"/>\n     <file role=\"test\" name=\"client019.phpt\"/>\n     <file role=\"test\" name=\"client020.phpt\"/>\n     <file role=\"test\" name=\"client021.phpt\"/>\n     <file role=\"test\" name=\"client022.phpt\"/>\n     <file role=\"test\" name=\"client023.phpt\"/>\n     <file role=\"test\" name=\"client024.phpt\"/>\n     <file role=\"test\" name=\"client025.phpt\"/>\n     <file role=\"test\" name=\"client026.phpt\"/>\n     <file role=\"test\" name=\"client027.phpt\"/>\n     <file role=\"test\" name=\"client028.phpt\"/>\n     <file role=\"test\" name=\"client029.phpt\"/>\n     <file role=\"test\" name=\"clientrequest001.phpt\"/>\n     <file role=\"test\" name=\"clientrequest002.phpt\"/>\n     <file role=\"test\" name=\"clientrequest003.phpt\"/>\n     <file role=\"test\" name=\"clientrequest004.phpt\"/>\n     <file role=\"test\" name=\"clientresponse001.phpt\"/>\n     <file role=\"test\" name=\"clientresponse002.phpt\"/>\n     <file role=\"test\" name=\"clientresponse003.phpt\"/>\n     <file role=\"test\" name=\"cookie001.phpt\"/>\n     <file role=\"test\" name=\"cookie002.phpt\"/>\n     <file role=\"test\" name=\"cookie003.phpt\"/>\n     <file role=\"test\" name=\"cookie004.phpt\"/>\n     <file role=\"test\" name=\"cookie005.phpt\"/>\n     <file role=\"test\" name=\"cookie006.phpt\"/>\n     <file role=\"test\" name=\"cookie007.phpt\"/>\n     <file role=\"test\" name=\"cookie008.phpt\"/>\n     <file role=\"test\" name=\"cookie009.phpt\"/>\n     <file role=\"test\" name=\"cookie010.phpt\"/>\n     <file role=\"test\" name=\"cookie011.phpt\"/>\n     <file role=\"test\" name=\"cookie012.phpt\"/>\n     <file role=\"test\" name=\"encstream001.phpt\"/>\n     <file role=\"test\" name=\"encstream002.phpt\"/>\n     <file role=\"test\" name=\"encstream003.phpt\"/>\n     <file role=\"test\" name=\"encstream004.phpt\"/>\n     <file role=\"test\" name=\"encstream005.phpt\"/>\n     <file role=\"test\" name=\"encstream006.phpt\"/>\n     <file role=\"test\" name=\"encstream007.phpt\"/>\n     <file role=\"test\" name=\"encstream008.phpt\"/>\n     <file role=\"test\" name=\"encstream009.phpt\"/>\n     <file role=\"test\" name=\"envrequestbody001.phpt\"/>\n     <file role=\"test\" name=\"envrequestcookie001.phpt\"/>\n     <file role=\"test\" name=\"envrequestfiles001.phpt\"/>\n     <file role=\"test\" name=\"envrequestfiles002.phpt\"/>\n     <file role=\"test\" name=\"envrequestform.phpt\"/>\n     <file role=\"test\" name=\"envrequestheader001.phpt\"/>\n     <file role=\"test\" name=\"envrequestquery.phpt\"/>\n     <file role=\"test\" name=\"envresponse001.phpt\"/>\n     <file role=\"test\" name=\"envresponse002.phpt\"/>\n     <file role=\"test\" name=\"envresponse003.phpt\"/>\n     <file role=\"test\" name=\"envresponse004.phpt\"/>\n     <file role=\"test\" name=\"envresponse005.phpt\"/>\n     <file role=\"test\" name=\"envresponse006.phpt\"/>\n     <file role=\"test\" name=\"envresponse007.phpt\"/>\n     <file role=\"test\" name=\"envresponse008.phpt\"/>\n     <file role=\"test\" name=\"envresponse009.phpt\"/>\n     <file role=\"test\" name=\"envresponse010.phpt\"/>\n     <file role=\"test\" name=\"envresponse011.phpt\"/>\n     <file role=\"test\" name=\"envresponse012.phpt\"/>\n     <file role=\"test\" name=\"envresponse013.phpt\"/>\n     <file role=\"test\" name=\"envresponse014.phpt\"/>\n     <file role=\"test\" name=\"envresponse015.phpt\"/>\n     <file role=\"test\" name=\"envresponse016.phpt\"/>\n     <file role=\"test\" name=\"envresponse017.phpt\"/>\n     <file role=\"test\" name=\"envresponse018.phpt\"/>\n     <file role=\"test\" name=\"envresponsebody001.phpt\"/>\n     <file role=\"test\" name=\"envresponsebody002.phpt\"/>\n     <file role=\"test\" name=\"envresponsecodes.phpt\"/>\n     <file role=\"test\" name=\"envresponsecookie001.phpt\"/>\n     <file role=\"test\" name=\"envresponseheader001.phpt\"/>\n     <file role=\"test\" name=\"envresponseranges001.phpt\"/>\n     <file role=\"test\" name=\"etag001.phpt\"/>\n     <file role=\"test\" name=\"filterchunked.phpt\"/>\n     <file role=\"test\" name=\"filterzlib.phpt\"/>\n     <file role=\"test\" name=\"gh-issue6.phpt\"/>\n     <file role=\"test\" name=\"gh-issue7.phpt\"/>\n     <file role=\"test\" name=\"gh-issue12.phpt\"/>\n     <file role=\"test\" name=\"gh-issue42.phpt\"/>\n     <file role=\"test\" name=\"gh-issue47.phpt\"/>\n     <file role=\"test\" name=\"gh-issue48.phpt\"/>\n     <file role=\"test\" name=\"gh-issue50.phpt\"/>\n     <file role=\"test\" name=\"header001.phpt\"/>\n     <file role=\"test\" name=\"header002.phpt\"/>\n     <file role=\"test\" name=\"header003.phpt\"/>\n     <file role=\"test\" name=\"header004.phpt\"/>\n     <file role=\"test\" name=\"header005.phpt\"/>\n     <file role=\"test\" name=\"header006.phpt\"/>\n     <file role=\"test\" name=\"header007.phpt\"/>\n     <file role=\"test\" name=\"header008.phpt\"/>\n     <file role=\"test\" name=\"header009.phpt\"/>\n     <file role=\"test\" name=\"headerparser001.phpt\"/>\n     <file role=\"test\" name=\"headerparser002.phpt\"/>\n     <file role=\"test\" name=\"headerparser003.phpt\"/>\n     <file role=\"test\" name=\"info001.phpt\"/>\n     <file role=\"test\" name=\"info002.phpt\"/>\n     <file role=\"test\" name=\"message001.phpt\"/>\n     <file role=\"test\" name=\"message002.phpt\"/>\n     <file role=\"test\" name=\"message003.phpt\"/>\n     <file role=\"test\" name=\"message004.phpt\"/>\n     <file role=\"test\" name=\"message005.phpt\"/>\n     <file role=\"test\" name=\"message006.phpt\"/>\n     <file role=\"test\" name=\"message007.phpt\"/>\n     <file role=\"test\" name=\"message008.phpt\"/>\n     <file role=\"test\" name=\"message009.phpt\"/>\n     <file role=\"test\" name=\"message010.phpt\"/>\n     <file role=\"test\" name=\"message011.phpt\"/>\n     <file role=\"test\" name=\"message012.phpt\"/>\n     <file role=\"test\" name=\"message013.phpt\"/>\n     <file role=\"test\" name=\"message014.phpt\"/>\n     <file role=\"test\" name=\"message015.phpt\"/>\n     <file role=\"test\" name=\"message016.phpt\"/>\n     <file role=\"test\" name=\"messagebody001.phpt\"/>\n     <file role=\"test\" name=\"messagebody002.phpt\"/>\n     <file role=\"test\" name=\"messagebody003.phpt\"/>\n     <file role=\"test\" name=\"messagebody004.phpt\"/>\n     <file role=\"test\" name=\"messagebody005.phpt\"/>\n     <file role=\"test\" name=\"messagebody006.phpt\"/>\n     <file role=\"test\" name=\"messagebody007.phpt\"/>\n     <file role=\"test\" name=\"messagebody008.phpt\"/>\n     <file role=\"test\" name=\"messagebody009.phpt\"/>\n     <file role=\"test\" name=\"messagebody010.phpt\"/>\n     <file role=\"test\" name=\"messageparser001.phpt\"/>\n     <file role=\"test\" name=\"messageparser002.phpt\"/>\n     <file role=\"test\" name=\"negotiate001.phpt\"/>\n     <file role=\"test\" name=\"params001.phpt\"/>\n     <file role=\"test\" name=\"params002.phpt\"/>\n     <file role=\"test\" name=\"params003.phpt\"/>\n     <file role=\"test\" name=\"params004.phpt\"/>\n     <file role=\"test\" name=\"params005.phpt\"/>\n     <file role=\"test\" name=\"params006.phpt\"/>\n     <file role=\"test\" name=\"params007.phpt\"/>\n     <file role=\"test\" name=\"params008.phpt\"/>\n     <file role=\"test\" name=\"params009.phpt\"/>\n     <file role=\"test\" name=\"params010.phpt\"/>\n     <file role=\"test\" name=\"params011.phpt\"/>\n     <file role=\"test\" name=\"params012.phpt\"/>\n     <file role=\"test\" name=\"params013.phpt\"/>\n     <file role=\"test\" name=\"params014.phpt\"/>\n     <file role=\"test\" name=\"params015.phpt\"/>\n     <file role=\"test\" name=\"params016.phpt\"/>\n     <file role=\"test\" name=\"params017.phpt\"/>\n     <file role=\"test\" name=\"phpinfo.phpt\"/>\n     <file role=\"test\" name=\"propertyproxy001.phpt\"/>\n     <file role=\"test\" name=\"querystring001.phpt\"/>\n     <file role=\"test\" name=\"querystring002.phpt\"/>\n     <file role=\"test\" name=\"querystring003.phpt\"/>\n     <file role=\"test\" name=\"serialize001.phpt\"/>\n     <file role=\"test\" name=\"url001.phpt\"/>\n     <file role=\"test\" name=\"url002.phpt\"/>\n     <file role=\"test\" name=\"url003.phpt\"/>\n     <file role=\"test\" name=\"url004.phpt\"/>\n     <file role=\"test\" name=\"url005.phpt\"/>\n     <file role=\"test\" name=\"urlparser001.phpt\"/>\n     <file role=\"test\" name=\"urlparser002.phpt\"/>\n     <file role=\"test\" name=\"urlparser003.phpt\"/>\n     <file role=\"test\" name=\"urlparser004.phpt\"/>\n     <file role=\"test\" name=\"urlparser005.phpt\"/>\n     <file role=\"test\" name=\"urlparser006.phpt\"/>\n     <file role=\"test\" name=\"urlparser007.phpt\"/>\n     <file role=\"test\" name=\"urlparser008.phpt\"/>\n     <file role=\"test\" name=\"urlparser009.phpt\"/>\n     <file role=\"test\" name=\"urlparser010.phpt\"/>\n     <file role=\"test\" name=\"urlparser011.phpt\"/>\n     <file role=\"test\" name=\"version001.phpt\"/>\n   </dir>\n   <dir name=\"scripts\">\n    <file role=\"src\" name=\"bench_select_vs_event.php\"/>\n    <file role=\"src\" name=\"check_package-xml.php\"/>\n    <file role=\"src\" name=\"gen_curlinfo.php\"/>\n    <file role=\"src\" name=\"gen_stubs.php\"/>\n    <file role=\"src\" name=\"gen_travis_yml.php\"/>\n    <file role=\"src\" name=\"gen_utf8.php\"/>\n   </dir>\n  </dir>\n </contents>\n <dependencies>\n  <required>\n   <php>\n    <min>5.3.0</min>\n    <max>7.0.0</max>\n    <exclude>7.0.0</exclude>\n   </php>\n   <pearinstaller>\n    <min>1.4.1</min>\n   </pearinstaller>\n   <package>\n    <name>raphf</name>\n    <channel>pecl.php.net</channel>\n    <min>1.1.0</min>\n    <max>2.0.0dev</max>\n    <exclude>2.0.0dev</exclude>\n    <providesextension>raphf</providesextension>\n   </package>\n   <package>\n    <name>propro</name>\n    <channel>pecl.php.net</channel>\n    <min>1.0.0</min>\n    <max>2.0.0dev</max>\n    <exclude>2.0.0dev</exclude>\n    <providesextension>propro</providesextension>\n   </package>\n  </required>\n  <optional>\n   <extension><name>hash</name></extension>\n   <extension><name>iconv</name></extension>\n  </optional>\n </dependencies>\n <providesextension>http</providesextension>\n <extsrcrelease>\n  <configureoption\n   name=\"with-http-zlib-dir\"\n   prompt=\"where to find zlib\"\n   default=\"/usr\" />\n  <configureoption\n   name=\"with-http-libcurl-dir\"\n   prompt=\"where to find libcurl\"\n   default=\"/usr\" />\n  <configureoption\n   name=\"with-http-libevent-dir\"\n   prompt=\"where to find libevent\"\n   default=\"/usr\" />\n  <configureoption\n   name=\"with-http-libidn-dir\"\n   prompt=\"where to find libidn\"\n   default=\"/usr\" />\n  </extsrcrelease>\n <changelog />\n</package>\n", "/*\n    +--------------------------------------------------------------------+\n    | PECL :: http                                                       |\n    +--------------------------------------------------------------------+\n    | Redistribution and use in source and binary forms, with or without |\n    | modification, are permitted provided that the conditions mentioned |\n    | in the accompanying LICENSE file are met.                          |\n    +--------------------------------------------------------------------+\n    | Copyright (c) 2004-2014, Michael Wallner <mike@php.net>            |\n    +--------------------------------------------------------------------+\n*/\n\n#include \"php_http_api.h\"\n\nstatic php_http_params_token_t def_param_sep = {\",\", 1}, *def_param_sep_ptr[] = {&def_param_sep, NULL};\nstatic php_http_params_token_t def_arg_sep = {\";\", 1}, *def_arg_sep_ptr[] = {&def_arg_sep, NULL};\nstatic php_http_params_token_t def_val_sep = {\"=\", 1}, *def_val_sep_ptr[] = {&def_val_sep, NULL};\nstatic php_http_params_opts_t def_opts = {\n\t{NULL, 0},\n\tdef_param_sep_ptr,\n\tdef_arg_sep_ptr,\n\tdef_val_sep_ptr,\n\tNULL,\n\tPHP_HTTP_PARAMS_DEFAULT\n};\n\nphp_http_params_opts_t *php_http_params_opts_default_get(php_http_params_opts_t *opts)\n{\n\tif (!opts) {\n\t\topts = emalloc(sizeof(*opts));\n\t}\n\n\tmemcpy(opts, &def_opts, sizeof(def_opts));\n\n\treturn opts;\n}\n\ntypedef struct php_http_params_state {\n\tphp_http_params_token_t input;\n\tphp_http_params_token_t param;\n\tphp_http_params_token_t arg;\n\tphp_http_params_token_t val;\n\tstruct {\n\t\tzval **param;\n\t\tzval **args;\n\t\tzval **val;\n\t} current;\n\tunsigned quotes:1;\n\tunsigned escape:1;\n\tunsigned rfc5987:1;\n} php_http_params_state_t;\n\nstatic inline void sanitize_escaped(zval *zv TSRMLS_DC)\n{\n\tif (Z_STRVAL_P(zv)[0] == '\"' && Z_STRVAL_P(zv)[Z_STRLEN_P(zv) - 1] == '\"') {\n\t\tsize_t deq_len = Z_STRLEN_P(zv) - 2;\n\t\tchar *deq = estrndup(Z_STRVAL_P(zv) + 1, deq_len);\n\n\t\tzval_dtor(zv);\n\t\tZVAL_STRINGL(zv, deq, deq_len, 0);\n\t}\n\n\tphp_stripcslashes(Z_STRVAL_P(zv), &Z_STRLEN_P(zv));\n}\n\nstatic inline void quote_string(zval *zv, zend_bool force TSRMLS_DC)\n{\n\tint len = Z_STRLEN_P(zv);\n\n\tZ_STRVAL_P(zv) = php_addcslashes(Z_STRVAL_P(zv), Z_STRLEN_P(zv), &Z_STRLEN_P(zv), 1,\n\t\t\tZEND_STRL(\"\\0..\\37\\173\\\\\\\"\") TSRMLS_CC);\n\n\tif (force || len != Z_STRLEN_P(zv) || strpbrk(Z_STRVAL_P(zv), \"()<>@,;:\\\"[]?={} \")) {\n\t\tzval tmp = *zv;\n\t\tint len = Z_STRLEN_P(zv) + 2;\n\t\tchar *str = emalloc(len + 1);\n\n\t\tstr[0] = '\"';\n\t\tmemcpy(&str[1], Z_STRVAL_P(zv), Z_STRLEN_P(zv));\n\t\tstr[len-1] = '\"';\n\t\tstr[len] = '\\0';\n\n\t\tzval_dtor(&tmp);\n\t\tZVAL_STRINGL(zv, str, len, 0);\n\t}\n}\n\nstatic inline void prepare_escaped(zval *zv TSRMLS_DC)\n{\n\tif (Z_TYPE_P(zv) == IS_STRING) {\n\t\tquote_string(zv, 0 TSRMLS_CC);\n\t} else {\n\t\tzval_dtor(zv);\n\t\tZVAL_EMPTY_STRING(zv);\n\t}\n}\n\nstatic inline void sanitize_urlencoded(zval *zv TSRMLS_DC)\n{\n\tZ_STRLEN_P(zv) = php_raw_url_decode(Z_STRVAL_P(zv), Z_STRLEN_P(zv));\n}\n\nstatic inline void prepare_urlencoded(zval *zv TSRMLS_DC)\n{\n\tint len;\n\tchar *str =\tphp_raw_url_encode(Z_STRVAL_P(zv), Z_STRLEN_P(zv), &len);\n\n\tzval_dtor(zv);\n\tZVAL_STRINGL(zv, str, len, 0);\n}\n\nstatic void sanitize_dimension(zval *zv TSRMLS_DC)\n{\n\tzval *arr = NULL, *tmp = NULL, **cur = NULL;\n\tchar *var = NULL, *ptr = Z_STRVAL_P(zv), *end = Z_STRVAL_P(zv) + Z_STRLEN_P(zv);\n\tlong level = 0;\n\n\tMAKE_STD_ZVAL(arr);\n\tarray_init(arr);\n\tcur = &arr;\n\n\twhile (ptr < end) {\n\t\tif (!var) {\n\t\t\tvar = ptr;\n\t\t}\n\n\t\tswitch (*ptr) {\n\t\t\tcase '[':\n\t\t\t\tif (++level > PG(max_input_nesting_level)) {\n\t\t\t\t\tzval_ptr_dtor(&arr);\n\t\t\t\t\tphp_error_docref(NULL TSRMLS_CC, E_WARNING, \"Max input nesting level of %ld exceeded\", (long) PG(max_input_nesting_level));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (ptr - var == 0) {\n\t\t\t\t\t++var;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t/* no break */\n\n\t\t\tcase ']':\n\n\t\t\t\tMAKE_STD_ZVAL(tmp);\n\t\t\t\tZVAL_NULL(tmp);\n\t\t\t\tconvert_to_array(*cur);\n\n\t\t\t\tif (ptr - var) {\n\t\t\t\t\tchar chr = *ptr;\n\t\t\t\t\t*ptr = '\\0';\n\t\t\t\t\tzend_symtable_update(Z_ARRVAL_PP(cur), var, ptr - var + 1, (void *) &tmp, sizeof(zval *), (void *) &cur);\n\t\t\t\t\t*ptr = chr;\n\t\t\t\t} else {\n\t\t\t\t\tzend_hash_next_index_insert(Z_ARRVAL_PP(cur), (void *) &tmp, sizeof(zval *), (void *) &cur);\n\t\t\t\t}\n\n\t\t\t\tvar = NULL;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t++ptr;\n\t}\n\n\tif (zend_hash_num_elements(Z_ARRVAL_P(arr))) {\n\t\tzval_dtor(zv);\n#if PHP_VERSION_ID >= 50400\n\t\tZVAL_COPY_VALUE(zv, arr);\n#else\n\t\tzv->value = arr->value;\n\t\tZ_TYPE_P(zv) = Z_TYPE_P(arr);\n#endif\n\t\tFREE_ZVAL(arr);\n\t} else {\n\t\tzval_ptr_dtor(&arr);\n\t}\n}\n\nstatic inline void shift_key(php_http_buffer_t *buf, char *key_str, size_t key_len, const char *ass, size_t asl, unsigned flags TSRMLS_DC);\nstatic inline void shift_val(php_http_buffer_t *buf, zval *zvalue, const char *vss, size_t vsl, unsigned flags TSRMLS_DC);\n\nstatic void prepare_dimension(php_http_buffer_t *buf, php_http_buffer_t *keybuf, zval *zvalue, const char *pss, size_t psl, const char *vss, size_t vsl, unsigned flags TSRMLS_DC)\n{\n\tHashTable *ht = HASH_OF(zvalue);\n\tHashPosition pos;\n\tphp_http_array_hashkey_t key = php_http_array_hashkey_init(0);\n\tzval **val;\n\tphp_http_buffer_t prefix;\n\n\tif (!ht->nApplyCount++) {\n\t\tphp_http_buffer_init(&prefix);\n\t\tphp_http_buffer_append(&prefix, keybuf->data, keybuf->used);\n\n\t\tFOREACH_HASH_KEYVAL(pos, ht, key, val) {\n\t\t\tif (key.type == HASH_KEY_IS_STRING && !*key.str) {\n\t\t\t\t/* only public properties */\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tphp_http_buffer_appends(&prefix, \"[\");\n\t\t\tif (key.type == HASH_KEY_IS_STRING) {\n\t\t\t\tphp_http_buffer_append(&prefix, key.str, key.len - 1);\n\t\t\t} else {\n\t\t\t\tphp_http_buffer_appendf(&prefix, \"%lu\", key.num);\n\t\t\t}\n\t\t\tphp_http_buffer_appends(&prefix, \"]\");\n\n\t\t\tif (Z_TYPE_PP(val) == IS_ARRAY || Z_TYPE_PP(val) == IS_OBJECT) {\n\t\t\t\tprepare_dimension(buf, &prefix, *val, pss, psl, vss, vsl, flags TSRMLS_CC);\n\t\t\t} else {\n\t\t\t\tzval *cpy = php_http_ztyp(IS_STRING, *val);\n\n\t\t\t\tshift_key(buf, prefix.data, prefix.used, pss, psl, flags TSRMLS_CC);\n\t\t\t\tshift_val(buf, cpy, vss, vsl, flags TSRMLS_CC);\n\t\t\t\tzval_ptr_dtor(&cpy);\n\t\t\t}\n\n\t\t\tphp_http_buffer_cut(&prefix, keybuf->used, prefix.used - keybuf->used);\n\t\t}\n\t\tphp_http_buffer_dtor(&prefix);\n\t}\n\t--ht->nApplyCount;\n}\n\nstatic inline void sanitize_key(unsigned flags, char *str, size_t len, zval *zv, zend_bool *rfc5987 TSRMLS_DC)\n{\n\tchar *eos;\n\n\tzval_dtor(zv);\n\tphp_trim(str, len, NULL, 0, zv, 3 TSRMLS_CC);\n\n\tif (flags & PHP_HTTP_PARAMS_ESCAPED) {\n\t\tsanitize_escaped(zv TSRMLS_CC);\n\t}\n\t\n\tif (!Z_STRLEN_P(zv)) {\n\t\treturn;\n\t}\n\n\tif (flags & PHP_HTTP_PARAMS_RFC5987) {\n\t\teos = &Z_STRVAL_P(zv)[Z_STRLEN_P(zv)-1];\n\t\tif (*eos == '*') {\n\t\t\t*eos = '\\0';\n\t\t\t*rfc5987 = 1;\n\t\t\tZ_STRLEN_P(zv) -= 1;\n\t\t}\n\t}\n\n\tif (flags & PHP_HTTP_PARAMS_URLENCODED) {\n\t\tsanitize_urlencoded(zv TSRMLS_CC);\n\t}\n\n\tif (flags & PHP_HTTP_PARAMS_DIMENSION) {\n\t\tsanitize_dimension(zv TSRMLS_CC);\n\t}\n}\n\nstatic inline void sanitize_rfc5987(zval *zv, char **language, zend_bool *latin1 TSRMLS_DC)\n{\n\tchar *ptr;\n\n\t/* examples:\n\t * iso-8850-1'de'bl%f6der%20schei%df%21\n\t * utf-8'de-DE'bl%c3%b6der%20schei%c3%9f%21\n\t */\n\n\tswitch (Z_STRVAL_P(zv)[0]) {\n\tcase 'I':\n\tcase 'i':\n\t\tif (!strncasecmp(Z_STRVAL_P(zv), \"iso-8859-1\", lenof(\"iso-8859-1\"))) {\n\t\t\t*latin1 = 1;\n\t\t\tptr = Z_STRVAL_P(zv) + lenof(\"iso-8859-1\");\n\t\t\tbreak;\n\t\t}\n\t\t/* no break */\n\tcase 'U':\n\tcase 'u':\n\t\tif (!strncasecmp(Z_STRVAL_P(zv), \"utf-8\", lenof(\"utf-8\"))) {\n\t\t\t*latin1 = 0;\n\t\t\tptr = Z_STRVAL_P(zv) + lenof(\"utf-8\");\n\t\t\tbreak;\n\t\t}\n\t\t/* no break */\n\tdefault:\n\t\treturn;\n\t}\n\n\t/* extract language */\n\tif (*ptr == '\\'') {\n\t\tfor (*language = ++ptr; *ptr && *ptr != '\\''; ++ptr);\n\t\tif (!*ptr) {\n\t\t\t*language = NULL;\n\t\t\treturn;\n\t\t}\n\t\t*language = estrndup(*language, ptr - *language);\n\n\t\t/* remainder */\n\t\tptr = estrdup(++ptr);\n\t\tzval_dtor(zv);\n\t\tZVAL_STRING(zv, ptr, 0);\n\t}\n}\n\nstatic inline void sanitize_rfc5988(char *str, size_t len, zval *zv TSRMLS_DC)\n{\n\tzval_dtor(zv);\n\tphp_trim(str, len, \" ><\", 3, zv, 3 TSRMLS_CC);\n}\n\nstatic inline void prepare_rfc5988(zval *zv TSRMLS_DC)\n{\n\tif (Z_TYPE_P(zv) != IS_STRING) {\n\t\tzval_dtor(zv);\n\t\tZVAL_EMPTY_STRING(zv);\n\t}\n}\n\nstatic void utf8encode(zval *zv)\n{\n\tsize_t pos, len = 0;\n\tunsigned char *ptr = (unsigned char *) Z_STRVAL_P(zv);\n\n\twhile (*ptr) {\n\t\tif (*ptr++ >= 0x80) {\n\t\t\t++len;\n\t\t}\n\t\t++len;\n\t}\n\n\tptr = safe_emalloc(1, len, 1);\n\tfor (len = 0, pos = 0; len <= Z_STRLEN_P(zv); ++len, ++pos) {\n\t\tptr[pos] = Z_STRVAL_P(zv)[len];\n\t\tif ((ptr[pos]) >= 0x80) {\n\t\t\tptr[pos + 1] = 0x80 | (ptr[pos] & 0x3f);\n\t\t\tptr[pos] = 0xc0 | ((ptr[pos] >> 6) & 0x1f);\n\t\t\t++pos;\n\t\t}\n\t}\n\tzval_dtor(zv);\n\tZVAL_STRINGL(zv, (char *) ptr, pos-1, 0);\n}\n\nstatic inline void sanitize_value(unsigned flags, char *str, size_t len, zval *zv, zend_bool rfc5987 TSRMLS_DC)\n{\n\tchar *language = NULL;\n\tzend_bool latin1 = 0;\n\n\tzval_dtor(zv);\n\tphp_trim(str, len, NULL, 0, zv, 3 TSRMLS_CC);\n\n\tif (rfc5987) {\n\t\tsanitize_rfc5987(zv, &language, &latin1 TSRMLS_CC);\n\t}\n\n\tif (flags & PHP_HTTP_PARAMS_ESCAPED) {\n\t\tsanitize_escaped(zv TSRMLS_CC);\n\t}\n\n\tif ((flags & PHP_HTTP_PARAMS_URLENCODED) || (rfc5987 && language)) {\n\t\tsanitize_urlencoded(zv TSRMLS_CC);\n\t}\n\n\tif (rfc5987 && language) {\n\t\tzval *tmp;\n\n\t\tif (latin1) {\n\t\t\tutf8encode(zv);\n\t\t}\n\n\t\tMAKE_STD_ZVAL(tmp);\n\t\tZVAL_COPY_VALUE(tmp, zv);\n\t\tarray_init(zv);\n\t\tadd_assoc_zval(zv, language, tmp);\n\t\tPTR_FREE(language);\n\t}\n}\n\nstatic inline void prepare_key(unsigned flags, char *old_key, size_t old_len, char **new_key, size_t *new_len TSRMLS_DC)\n{\n\tzval zv;\n\n\tINIT_PZVAL(&zv);\n\tZVAL_STRINGL(&zv, old_key, old_len, 1);\n\n\tif (flags & PHP_HTTP_PARAMS_URLENCODED) {\n\t\tprepare_urlencoded(&zv TSRMLS_CC);\n\t}\n\n\tif (flags & PHP_HTTP_PARAMS_ESCAPED) {\n\t\tif (flags & PHP_HTTP_PARAMS_RFC5988) {\n\t\t\tprepare_rfc5988(&zv TSRMLS_CC);\n\t\t} else {\n\t\t\tprepare_escaped(&zv TSRMLS_CC);\n\t\t}\n\t}\n\n\t*new_key = Z_STRVAL(zv);\n\t*new_len = Z_STRLEN(zv);\n}\n\nstatic inline void prepare_value(unsigned flags, zval *zv TSRMLS_DC)\n{\n\tif (flags & PHP_HTTP_PARAMS_URLENCODED) {\n\t\tprepare_urlencoded(zv TSRMLS_CC);\n\t}\n\n\tif (flags & PHP_HTTP_PARAMS_ESCAPED) {\n\t\tprepare_escaped(zv TSRMLS_CC);\n\t}\n}\n\nstatic void merge_param(HashTable *params, zval *zdata, zval ***current_param, zval ***current_args TSRMLS_DC)\n{\n\tzval **ptr, **zdata_ptr;\n\tphp_http_array_hashkey_t hkey = php_http_array_hashkey_init(0);\n\n#if 0\n\t{\n\t\tzval tmp;\n\t\tINIT_PZVAL_ARRAY(&tmp, params);\n\t\tfprintf(stderr, \"params = \");\n\t\tzend_print_zval_r(&tmp, 1 TSRMLS_CC);\n\t\tfprintf(stderr, \"\\n\");\n\t}\n#endif\n\n\thkey.type = zend_hash_get_current_key_ex(Z_ARRVAL_P(zdata), &hkey.str, &hkey.len, &hkey.num, hkey.dup, NULL);\n\n\tif ((hkey.type == HASH_KEY_IS_STRING && !zend_hash_exists(params, hkey.str, hkey.len))\n\t||\t(hkey.type == HASH_KEY_IS_LONG && !zend_hash_index_exists(params, hkey.num))\n\t) {\n\t\tzval *tmp, *arg, **args;\n\n\t\t/* create the entry if it doesn't exist */\n\t\tzend_hash_get_current_data(Z_ARRVAL_P(zdata), (void *) &ptr);\n\t\tZ_ADDREF_PP(ptr);\n\t\tMAKE_STD_ZVAL(tmp);\n\t\tarray_init(tmp);\n\t\tadd_assoc_zval_ex(tmp, ZEND_STRS(\"value\"), *ptr);\n\n\t\tMAKE_STD_ZVAL(arg);\n\t\tarray_init(arg);\n\t\tzend_hash_update(Z_ARRVAL_P(tmp), \"arguments\", sizeof(\"arguments\"), (void *) &arg, sizeof(zval *), (void *) &args);\n\t\t*current_args = args;\n\n\t\tif (hkey.type == HASH_KEY_IS_STRING) {\n\t\t\tzend_hash_update(params, hkey.str, hkey.len, (void *) &tmp, sizeof(zval *), (void *) &ptr);\n\t\t} else {\n\t\t\tzend_hash_index_update(params, hkey.num, (void *) &tmp, sizeof(zval *), (void *) &ptr);\n\t\t}\n\t} else {\n\t\t/* merge */\n\t\tif (hkey.type == HASH_KEY_IS_STRING) {\n\t\t\tzend_hash_find(params, hkey.str, hkey.len, (void *) &ptr);\n\t\t} else {\n\t\t\tzend_hash_index_find(params, hkey.num, (void *) &ptr);\n\t\t}\n\n\t\tzdata_ptr = &zdata;\n\n\t\tif (Z_TYPE_PP(ptr) == IS_ARRAY\n\t\t&&\tSUCCESS == zend_hash_find(Z_ARRVAL_PP(ptr), \"value\", sizeof(\"value\"), (void *) &ptr)\n\t\t&&\tSUCCESS == zend_hash_get_current_data(Z_ARRVAL_PP(zdata_ptr), (void *) &zdata_ptr)\n\t\t) {\n\t\t\t/*\n\t\t\t * params = [arr => [value => [0 => 1]]]\n\t\t\t *                            ^- ptr\n\t\t\t * zdata  = [arr => [0 => NULL]]\n\t\t\t *                  ^- zdata_ptr\n\t\t\t */\n\t\t\tzval **test_ptr;\n\n\t\t\twhile (Z_TYPE_PP(zdata_ptr) == IS_ARRAY\n\t\t\t&&\tSUCCESS == zend_hash_get_current_data(Z_ARRVAL_PP(zdata_ptr), (void *) &test_ptr)\n\t\t\t) {\n\t\t\t\tif (Z_TYPE_PP(test_ptr) == IS_ARRAY) {\n\n\t\t\t\t\t/* now find key in ptr */\n\t\t\t\t\tif (HASH_KEY_IS_STRING == zend_hash_get_current_key_ex(Z_ARRVAL_PP(zdata_ptr), &hkey.str, &hkey.len, &hkey.num, hkey.dup, NULL)) {\n\t\t\t\t\t\tif (SUCCESS == zend_hash_find(Z_ARRVAL_PP(ptr), hkey.str, hkey.len, (void *) &ptr)) {\n\t\t\t\t\t\t\tzdata_ptr = test_ptr;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tZ_ADDREF_PP(test_ptr);\n\t\t\t\t\t\t\tzend_hash_update(Z_ARRVAL_PP(ptr), hkey.str, hkey.len, (void *) test_ptr, sizeof(zval *), (void *) &ptr);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (SUCCESS == zend_hash_index_find(Z_ARRVAL_PP(ptr), hkey.num, (void *) &ptr)) {\n\t\t\t\t\t\t\tzdata_ptr = test_ptr;\n\t\t\t\t\t\t} else if (hkey.num) {\n\t\t\t\t\t\t\tZ_ADDREF_PP(test_ptr);\n\t\t\t\t\t\t\tzend_hash_index_update(Z_ARRVAL_PP(ptr), hkey.num, (void *) test_ptr, sizeof(zval *), (void *) &ptr);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tZ_ADDREF_PP(test_ptr);\n\t\t\t\t\t\t\tzend_hash_next_index_insert(Z_ARRVAL_PP(ptr), (void *) test_ptr, sizeof(zval *), (void *) &ptr);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t/* this is the leaf */\n\t\t\t\t\tZ_ADDREF_PP(test_ptr);\n\t\t\t\t\tif (Z_TYPE_PP(ptr) != IS_ARRAY) {\n\t\t\t\t\t\tzval_dtor(*ptr);\n\t\t\t\t\t\tarray_init(*ptr);\n\t\t\t\t\t}\n\t\t\t\t\tif (HASH_KEY_IS_STRING == zend_hash_get_current_key_ex(Z_ARRVAL_PP(zdata_ptr), &hkey.str, &hkey.len, &hkey.num, hkey.dup, NULL)) {\n\t\t\t\t\t\tzend_hash_update(Z_ARRVAL_PP(ptr), hkey.str, hkey.len, (void *) test_ptr, sizeof(zval *), (void *) &ptr);\n\t\t\t\t\t} else if (hkey.num) {\n\t\t\t\t\t\tzend_hash_index_update(Z_ARRVAL_PP(ptr), hkey.num, (void *) test_ptr, sizeof(zval *), (void *) &ptr);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tzend_hash_next_index_insert(Z_ARRVAL_PP(ptr), (void *) test_ptr, sizeof(zval *), (void *) &ptr);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n\t/* bubble up */\n\twhile (Z_TYPE_PP(ptr) == IS_ARRAY && SUCCESS == zend_hash_get_current_data(Z_ARRVAL_PP(ptr), (void *) &ptr));\n\t*current_param = ptr;\n}\n\nstatic void push_param(HashTable *params, php_http_params_state_t *state, const php_http_params_opts_t *opts TSRMLS_DC)\n{\n\tif (state->val.str) {\n\t\tif (!state->current.val) {\n\t\t\treturn;\n\t\t} else if (0 < (state->val.len = state->input.str - state->val.str)) {\n\t\t\tsanitize_value(opts->flags, state->val.str, state->val.len, *(state->current.val), state->rfc5987 TSRMLS_CC);\n\t\t} else {\n\t\t\tZVAL_EMPTY_STRING(*(state->current.val));\n\t\t}\n\t\tstate->rfc5987 = 0;\n\t} else if (state->arg.str) {\n\t\tif (0 < (state->arg.len = state->input.str - state->arg.str)) {\n\t\t\tzval *val, key;\n\t\t\tzend_bool rfc5987 = 0;\n\n\t\t\tINIT_PZVAL(&key);\n\t\t\tZVAL_NULL(&key);\n\t\t\tsanitize_key(opts->flags, state->arg.str, state->arg.len, &key, &rfc5987 TSRMLS_CC);\n\t\t\tstate->rfc5987 = rfc5987;\n\t\t\tif (Z_TYPE(key) == IS_STRING && Z_STRLEN(key)) {\n\t\t\t\tMAKE_STD_ZVAL(val);\n\t\t\t\tZVAL_TRUE(val);\n\n\t\t\t\tif (rfc5987) {\n\t\t\t\t\tzval **rfc;\n\n\t\t\t\t\tif (SUCCESS == zend_hash_find(Z_ARRVAL_PP(state->current.args), ZEND_STRS(\"*rfc5987*\"), (void *) &rfc)) {\n\t\t\t\t\t\tzend_symtable_update(Z_ARRVAL_PP(rfc), Z_STRVAL(key), Z_STRLEN(key) + 1, (void *) &val, sizeof(zval *), (void *) &state->current.val);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tzval *tmp;\n\n\t\t\t\t\t\tMAKE_STD_ZVAL(tmp);\n\t\t\t\t\t\tarray_init_size(tmp, 1);\n\t\t\t\t\t\tzend_symtable_update(Z_ARRVAL_P(tmp), Z_STRVAL(key), Z_STRLEN(key) + 1, (void *) &val, sizeof(zval *), (void *) &state->current.val);\n\t\t\t\t\t\tzend_symtable_update(Z_ARRVAL_PP(state->current.args), ZEND_STRS(\"*rfc5987*\"), (void *) &tmp, sizeof(zval *), NULL);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tzend_symtable_update(Z_ARRVAL_PP(state->current.args), Z_STRVAL(key), Z_STRLEN(key) + 1, (void *) &val, sizeof(zval *), (void *) &state->current.val);\n\t\t\t\t}\n\t\t\t}\n\t\t\tzval_dtor(&key);\n\t\t}\n\t} else if (state->param.str) {\n\t\tif (0 < (state->param.len = state->input.str - state->param.str)) {\n\t\t\tzval *prm, *arg, *val, *key;\n\t\t\tzend_bool rfc5987 = 0;\n\n\t\t\tMAKE_STD_ZVAL(key);\n\t\t\tZVAL_NULL(key);\n\t\t\tif (opts->flags & PHP_HTTP_PARAMS_RFC5988) {\n\t\t\t\tsanitize_rfc5988(state->param.str, state->param.len, key TSRMLS_CC);\n\t\t\t} else {\n\t\t\t\tsanitize_key(opts->flags, state->param.str, state->param.len, key, &rfc5987 TSRMLS_CC);\n\t\t\t\tstate->rfc5987 = rfc5987;\n\t\t\t}\n\t\t\tif (Z_TYPE_P(key) != IS_STRING) {\n\t\t\t\tmerge_param(params, key, &state->current.val, &state->current.args TSRMLS_CC);\n\t\t\t} else if (Z_STRLEN_P(key)) {\n\t\t\t\tMAKE_STD_ZVAL(prm);\n\t\t\t\tarray_init_size(prm, 2);\n\n\t\t\t\tMAKE_STD_ZVAL(val);\n\t\t\t\tif (opts->defval) {\n\t\t\t\t\tZVAL_COPY_VALUE(val, opts->defval);\n\t\t\t\t\tzval_copy_ctor(val);\n\t\t\t\t} else {\n\t\t\t\t\tZVAL_TRUE(val);\n\t\t\t\t}\n\t\t\t\tif (rfc5987 && (opts->flags & PHP_HTTP_PARAMS_RFC5987)) {\n\t\t\t\t\tzend_hash_update(Z_ARRVAL_P(prm), \"*rfc5987*\", sizeof(\"*rfc5987*\"), (void *) &val, sizeof(zval *), (void *) &state->current.val);\n\t\t\t\t} else {\n\t\t\t\t\tzend_hash_update(Z_ARRVAL_P(prm), \"value\", sizeof(\"value\"), (void *) &val, sizeof(zval *), (void *) &state->current.val);\n\t\t\t\t}\n\n\t\t\t\tMAKE_STD_ZVAL(arg);\n\t\t\t\tarray_init_size(arg, 3);\n\t\t\t\tzend_hash_update(Z_ARRVAL_P(prm), \"arguments\", sizeof(\"arguments\"), (void *) &arg, sizeof(zval *), (void *) &state->current.args);\n\n\t\t\t\tzend_symtable_update(params, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, (void *) &prm, sizeof(zval *), (void *) &state->current.param);\n\t\t\t}\n\t\t\tzval_ptr_dtor(&key);\n\t\t}\n\t}\n}\n\nstatic inline zend_bool check_str(const char *chk_str, size_t chk_len, const char *sep_str, size_t sep_len) {\n\treturn 0 < sep_len && chk_len >= sep_len && *chk_str == *sep_str && !memcmp(chk_str + 1, sep_str + 1, sep_len - 1);\n}\n\nstatic size_t check_sep(php_http_params_state_t *state, php_http_params_token_t **separators)\n{\n\tphp_http_params_token_t **sep = separators;\n\n\tif (state->quotes || state->escape) {\n\t\treturn 0;\n\t}\n\t\n\tif (sep) while (*sep) {\n\t\tif (check_str(state->input.str, state->input.len, (*sep)->str, (*sep)->len)) {\n\t\t\treturn (*sep)->len;\n\t\t}\n\t\t++sep;\n\t}\n\treturn 0;\n}\n\nstatic void skip_sep(size_t skip, php_http_params_state_t *state, php_http_params_token_t **param, php_http_params_token_t **arg, php_http_params_token_t **val TSRMLS_DC)\n{\n\tsize_t sep_len;\n\n\tstate->input.str += skip;\n\tstate->input.len -= skip;\n\n\twhile (\t(param && (sep_len = check_sep(state, param)))\n\t||\t\t(arg && (sep_len = check_sep(state, arg)))\n\t||\t\t(val && (sep_len = check_sep(state, val)))\n\t) {\n\t\tstate->input.str += sep_len;\n\t\tstate->input.len -= sep_len;\n\t}\n}\n\nHashTable *php_http_params_parse(HashTable *params, const php_http_params_opts_t *opts TSRMLS_DC)\n{\n\tphp_http_params_state_t state = {{NULL,0}, {NULL,0}, {NULL,0}, {NULL,0}, {NULL,NULL,NULL}, 0, 0};\n\n\tstate.input.str = opts->input.str;\n\tstate.input.len = opts->input.len;\n\n\tif (!params) {\n\t\tALLOC_HASHTABLE(params);\n\t\tZEND_INIT_SYMTABLE(params);\n\t}\n\n\twhile (state.input.len) {\n\t\tif ((opts->flags & PHP_HTTP_PARAMS_RFC5988) && !state.arg.str) {\n\t\t\tif (*state.input.str == '<') {\n\t\t\t\tstate.quotes = 1;\n\t\t\t} else if (*state.input.str == '>') {\n\t\t\t\tstate.quotes = 0;\n\t\t\t}\n\t\t} else if (*state.input.str == '\"' && !state.escape) {\n\t\t\tstate.quotes = !state.quotes;\n\t\t} else {\n\t\t\tstate.escape = (*state.input.str == '\\\\');\n\t\t}\n\t\t\n\t\tif (!state.param.str) {\n\t\t\t/* initialize */\n\t\t\tskip_sep(0, &state, opts->param, opts->arg, opts->val TSRMLS_CC);\n\t\t\tstate.param.str = state.input.str;\n\t\t} else {\n\t\t\tsize_t sep_len;\n\t\t\t/* are we at a param separator? */\n\t\t\tif (0 < (sep_len = check_sep(&state, opts->param))) {\n\t\t\t\tpush_param(params, &state, opts TSRMLS_CC);\n\n\t\t\t\tskip_sep(sep_len, &state, opts->param, opts->arg, opts->val TSRMLS_CC);\n\n\t\t\t\t/* start off with a new param */\n\t\t\t\tstate.param.str = state.input.str;\n\t\t\t\tstate.param.len = 0;\n\t\t\t\tstate.arg.str = NULL;\n\t\t\t\tstate.arg.len = 0;\n\t\t\t\tstate.val.str = NULL;\n\t\t\t\tstate.val.len = 0;\n\n\t\t\t\tcontinue;\n\n\t\t\t} else\n\t\t\t/* are we at an arg separator? */\n\t\t\tif (0 < (sep_len = check_sep(&state, opts->arg))) {\n\t\t\t\tpush_param(params, &state, opts TSRMLS_CC);\n\n\t\t\t\tskip_sep(sep_len, &state, NULL, opts->arg, opts->val TSRMLS_CC);\n\n\t\t\t\t/* continue with a new arg */\n\t\t\t\tstate.arg.str = state.input.str;\n\t\t\t\tstate.arg.len = 0;\n\t\t\t\tstate.val.str = NULL;\n\t\t\t\tstate.val.len = 0;\n\n\t\t\t\tcontinue;\n\n\t\t\t} else\n\t\t\t/* are we at a val separator? */\n\t\t\tif (0 < (sep_len = check_sep(&state, opts->val))) {\n\t\t\t\t/* only handle separator if we're not already reading in a val */\n\t\t\t\tif (!state.val.str) {\n\t\t\t\t\tpush_param(params, &state, opts TSRMLS_CC);\n\n\t\t\t\t\tskip_sep(sep_len, &state, NULL, NULL, opts->val TSRMLS_CC);\n\n\t\t\t\t\tstate.val.str = state.input.str;\n\t\t\t\t\tstate.val.len = 0;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (state.input.len) {\n\t\t\t++state.input.str;\n\t\t\t--state.input.len;\n\t\t}\n\t}\n\t/* finalize */\n\tpush_param(params, &state, opts TSRMLS_CC);\n\n\treturn params;\n}\n\nstatic inline void shift_key(php_http_buffer_t *buf, char *key_str, size_t key_len, const char *ass, size_t asl, unsigned flags TSRMLS_DC)\n{\n\tchar *str;\n\tsize_t len;\n\n\tif (buf->used) {\n\t\tphp_http_buffer_append(buf, ass, asl);\n\t}\n\n\tprepare_key(flags, key_str, key_len, &str, &len TSRMLS_CC);\n\tphp_http_buffer_append(buf, str, len);\n\tefree(str);\n}\n\nstatic inline void shift_rfc5987(php_http_buffer_t *buf, zval *zvalue, const char *vss, size_t vsl, unsigned flags TSRMLS_DC)\n{\n\tHashTable *ht = HASH_OF(zvalue);\n\tzval **zdata, *tmp;\n\tphp_http_array_hashkey_t key = php_http_array_hashkey_init(0);\n\n\tif (SUCCESS == zend_hash_get_current_data(ht, (void *) &zdata)\n\t&&\tHASH_KEY_NON_EXISTENT != (key.type = zend_hash_get_current_key_ex(ht, &key.str, &key.len, &key.num, key.dup, NULL))\n\t) {\n\t\tphp_http_array_hashkey_stringify(&key);\n\t\tphp_http_buffer_appendf(buf, \"*%.*sutf-8'%.*s'\",\n\t\t\t\t(int) (vsl > INT_MAX ? INT_MAX : vsl), vss,\n\t\t\t\t(int) (key.len > INT_MAX ? INT_MAX : key.len), key.str);\n\t\tphp_http_array_hashkey_stringfree(&key);\n\n\t\ttmp = php_http_zsep(1, IS_STRING, *zdata);\n\t\tprepare_value(flags | PHP_HTTP_PARAMS_URLENCODED, tmp TSRMLS_CC);\n\t\tphp_http_buffer_append(buf, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));\n\t\tzval_ptr_dtor(&tmp);\n\t}\n}\n\nstatic inline void shift_rfc5988(php_http_buffer_t *buf, char *key_str, size_t key_len, const char *ass, size_t asl, unsigned flags TSRMLS_DC)\n{\n\tchar *str;\n\tsize_t len;\n\n\tif (buf->used) {\n\t\tphp_http_buffer_append(buf, ass, asl);\n\t}\n\n\tprepare_key(flags, key_str, key_len, &str, &len TSRMLS_CC);\n\tphp_http_buffer_appends(buf, \"<\");\n\tphp_http_buffer_append(buf, str, len);\n\tphp_http_buffer_appends(buf, \">\");\n\tefree(str);\n}\n\nstatic inline void shift_rfc5988_val(php_http_buffer_t *buf, zval *zv, const char *vss, size_t vsl, unsigned flags TSRMLS_DC)\n{\n\tzval *tmp = php_http_zsep(1, IS_STRING, zv);\n\n\tquote_string(tmp, 1 TSRMLS_CC);\n\tphp_http_buffer_append(buf, vss, vsl);\n\tphp_http_buffer_append(buf, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));\n\n\tzval_ptr_dtor(&tmp);\n}\n\nstatic inline void shift_val(php_http_buffer_t *buf, zval *zvalue, const char *vss, size_t vsl, unsigned flags TSRMLS_DC)\n{\n\tif (Z_TYPE_P(zvalue) != IS_BOOL) {\n\t\tzval *tmp = php_http_zsep(1, IS_STRING, zvalue);\n\n\t\tprepare_value(flags, tmp TSRMLS_CC);\n\t\tphp_http_buffer_append(buf, vss, vsl);\n\t\tphp_http_buffer_append(buf, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));\n\n\t\tzval_ptr_dtor(&tmp);\n\t} else if (!Z_BVAL_P(zvalue)) {\n\t\tphp_http_buffer_append(buf, vss, vsl);\n\t\tphp_http_buffer_appends(buf, \"0\");\n\t}\n}\n\nstatic void shift_arg(php_http_buffer_t *buf, char *key_str, size_t key_len, zval *zvalue, const char *ass, size_t asl, const char *vss, size_t vsl, unsigned flags TSRMLS_DC)\n{\n\tif (Z_TYPE_P(zvalue) == IS_ARRAY || Z_TYPE_P(zvalue) == IS_OBJECT) {\n\t\tHashPosition pos;\n\t\tphp_http_array_hashkey_t key = php_http_array_hashkey_init(0);\n\t\tzval **val;\n\t\tzend_bool rfc5987 = !strcmp(key_str, \"*rfc5987*\");\n\n\t\tif (!rfc5987) {\n\t\t\tshift_key(buf, key_str, key_len, ass, asl, flags TSRMLS_CC);\n\t\t}\n\t\tFOREACH_KEYVAL(pos, zvalue, key, val) {\n\t\t\t/* did you mean recursion? */\n\t\t\tphp_http_array_hashkey_stringify(&key);\n\t\t\tif (rfc5987 && (Z_TYPE_PP(val) == IS_ARRAY || Z_TYPE_PP(val) == IS_OBJECT)) {\n\t\t\t\tshift_key(buf, key.str, key.len-1, ass, asl, flags TSRMLS_CC);\n\t\t\t\tshift_rfc5987(buf, *val, vss, vsl, flags TSRMLS_CC);\n\t\t\t} else {\n\t\t\t\tshift_arg(buf, key.str, key.len-1, *val, ass, asl, vss, vsl, flags TSRMLS_CC);\n\t\t\t}\n\t\t\tphp_http_array_hashkey_stringfree(&key);\n\t\t}\n\t} else {\n\t\tshift_key(buf, key_str, key_len, ass, asl, flags TSRMLS_CC);\n\n\t\tif (flags & PHP_HTTP_PARAMS_RFC5988) {\n\t\t\tswitch (key_len) {\n\t\t\tcase lenof(\"rel\"):\n\t\t\tcase lenof(\"title\"):\n\t\t\tcase lenof(\"anchor\"):\n\t\t\t\t/* some args must be quoted */\n\t\t\t\tif (0 <= php_http_select_str(key_str, 3, \"rel\", \"title\", \"anchor\")) {\n\t\t\t\t\tshift_rfc5988_val(buf, zvalue, vss, vsl, flags TSRMLS_CC);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tshift_val(buf, zvalue, vss, vsl, flags TSRMLS_CC);\n\t}\n}\n\nstatic void shift_param(php_http_buffer_t *buf, char *key_str, size_t key_len, zval *zvalue, const char *pss, size_t psl, const char *ass, size_t asl, const char *vss, size_t vsl, unsigned flags, zend_bool rfc5987 TSRMLS_DC)\n{\n\tif (Z_TYPE_P(zvalue) == IS_ARRAY || Z_TYPE_P(zvalue) == IS_OBJECT) {\n\t\t/* treat as arguments, unless we care for dimensions or rfc5987 */\n\t\tif (flags & PHP_HTTP_PARAMS_DIMENSION) {\n\t\t\tphp_http_buffer_t *keybuf = php_http_buffer_from_string(key_str, key_len);\n\t\t\tprepare_dimension(buf, keybuf, zvalue, pss, psl, vss, vsl, flags TSRMLS_CC);\n\t\t\tphp_http_buffer_free(&keybuf);\n\t\t} else if (rfc5987) {\n\t\t\tshift_key(buf, key_str, key_len, pss, psl, flags TSRMLS_CC);\n\t\t\tshift_rfc5987(buf, zvalue, vss, vsl, flags TSRMLS_CC);\n\t\t} else {\n\t\t\tshift_arg(buf, key_str, key_len, zvalue, ass, asl, vss, vsl, flags TSRMLS_CC);\n\t\t}\n\t} else {\n\t\tif (flags & PHP_HTTP_PARAMS_RFC5988) {\n\t\t\tshift_rfc5988(buf, key_str, key_len, pss, psl, flags TSRMLS_CC);\n\t\t} else {\n\t\t\tshift_key(buf, key_str, key_len, pss, psl, flags TSRMLS_CC);\n\t\t}\n\t\tshift_val(buf, zvalue, vss, vsl, flags TSRMLS_CC);\n\t}\n}\n\nphp_http_buffer_t *php_http_params_to_string(php_http_buffer_t *buf, HashTable *params, const char *pss, size_t psl, const char *ass, size_t asl, const char *vss, size_t vsl, unsigned flags TSRMLS_DC)\n{\n\tzval **zparam;\n\tHashPosition pos, pos1;\n\tphp_http_array_hashkey_t key = php_http_array_hashkey_init(0), key1 = php_http_array_hashkey_init(0);\n\tzend_bool rfc5987 = 0;\n\n\tif (!buf) {\n\t\tbuf = php_http_buffer_init(NULL);\n\t}\n\n\tFOREACH_HASH_KEYVAL(pos, params, key, zparam) {\n\t\tzval **zvalue, **zargs;\n\n\t\tif (Z_TYPE_PP(zparam) != IS_ARRAY) {\n\t\t\tzvalue = zparam;\n\t\t} else {\n\t\t\tif (SUCCESS != zend_hash_find(Z_ARRVAL_PP(zparam), ZEND_STRS(\"value\"), (void *) &zvalue)) {\n\t\t\t\tif (SUCCESS != zend_hash_find(Z_ARRVAL_PP(zparam), ZEND_STRS(\"*rfc5987*\"), (void *) &zvalue)) {\n\t\t\t\t\tzvalue = zparam;\n\t\t\t\t} else {\n\t\t\t\t\trfc5987 = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tphp_http_array_hashkey_stringify(&key);\n\t\tshift_param(buf, key.str, key.len - 1, *zvalue, pss, psl, ass, asl, vss, vsl, flags, rfc5987 TSRMLS_CC);\n\t\tphp_http_array_hashkey_stringfree(&key);\n\n\t\tif (Z_TYPE_PP(zparam) == IS_ARRAY && SUCCESS != zend_hash_find(Z_ARRVAL_PP(zparam), ZEND_STRS(\"arguments\"), (void *) &zvalue)) {\n\t\t\tif (zvalue == zparam) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tzvalue = zparam;\n\t\t}\n\n\t\tif (Z_TYPE_PP(zvalue) == IS_ARRAY) {\n\t\t\tFOREACH_KEYVAL(pos1, *zvalue, key1, zargs) {\n\t\t\t\tif (zvalue == zparam && key1.type == HASH_KEY_IS_STRING && !strcmp(key1.str, \"value\")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tphp_http_array_hashkey_stringify(&key1);\n\t\t\t\tshift_arg(buf, key1.str, key1.len - 1, *zargs, ass, asl, vss, vsl, flags TSRMLS_CC);\n\t\t\t\tphp_http_array_hashkey_stringfree(&key1);\n\t\t\t}\n\t\t}\n\t}\n\n\tphp_http_buffer_shrink(buf);\n\tphp_http_buffer_fix(buf);\n\n\treturn buf;\n}\n\nphp_http_params_token_t **php_http_params_separator_init(zval *zv TSRMLS_DC)\n{\n\tzval **sep;\n\tHashPosition pos;\n\tphp_http_params_token_t **ret, **tmp;\n\n\tif (!zv) {\n\t\treturn NULL;\n\t}\n\n\tzv = php_http_ztyp(IS_ARRAY, zv);\n\tret = ecalloc(zend_hash_num_elements(Z_ARRVAL_P(zv)) + 1, sizeof(*ret));\n\n\ttmp = ret;\n\tFOREACH_VAL(pos, zv, sep) {\n\t\tzval *zt = php_http_ztyp(IS_STRING, *sep);\n\n\t\tif (Z_STRLEN_P(zt)) {\n\t\t\t*tmp = emalloc(sizeof(**tmp));\n\t\t\t(*tmp)->str = estrndup(Z_STRVAL_P(zt), (*tmp)->len = Z_STRLEN_P(zt));\n\t\t\t++tmp;\n\t\t}\n\t\tzval_ptr_dtor(&zt);\n\t}\n\tzval_ptr_dtor(&zv);\n\n\t*tmp = NULL;\n\treturn ret;\n}\n\nvoid php_http_params_separator_free(php_http_params_token_t **separator)\n{\n\tphp_http_params_token_t **sep = separator;\n\tif (sep) {\n\t\twhile (*sep) {\n\t\t\tPTR_FREE((*sep)->str);\n\t\t\tefree(*sep);\n\t\t\t++sep;\n\t\t}\n\t\tefree(separator);\n\t}\n}\n\nZEND_BEGIN_ARG_INFO_EX(ai_HttpParams___construct, 0, 0, 0)\n\tZEND_ARG_INFO(0, params)\n\tZEND_ARG_INFO(0, param_sep)\n\tZEND_ARG_INFO(0, arg_sep)\n\tZEND_ARG_INFO(0, val_sep)\n\tZEND_ARG_INFO(0, flags)\nZEND_END_ARG_INFO();\nPHP_METHOD(HttpParams, __construct)\n{\n\tzval *zcopy, *zparams = NULL, *param_sep = NULL, *arg_sep = NULL, *val_sep = NULL;\n\tlong flags = PHP_HTTP_PARAMS_DEFAULT;\n\tzend_error_handling zeh;\n\n\tphp_http_expect(SUCCESS == zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|z!/z/z/z/l\", &zparams, &param_sep, &arg_sep, &val_sep, &flags), invalid_arg, return);\n\n\tzend_replace_error_handling(EH_THROW, php_http_exception_runtime_class_entry, &zeh TSRMLS_CC);\n\t{\n\t\tswitch (ZEND_NUM_ARGS()) {\n\t\t\tcase 5:\n\t\t\t\tzend_update_property_long(php_http_params_class_entry, getThis(), ZEND_STRL(\"flags\"), flags TSRMLS_CC);\n\t\t\t\t/* no break */\n\t\t\tcase 4:\n\t\t\t\tzend_update_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"val_sep\"), val_sep TSRMLS_CC);\n\t\t\t\t/* no break */\n\t\t\tcase 3:\n\t\t\t\tzend_update_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"arg_sep\"), arg_sep TSRMLS_CC);\n\t\t\t\t/* no break */\n\t\t\tcase 2:\n\t\t\t\tzend_update_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"param_sep\"), param_sep TSRMLS_CC);\n\t\t\t\t/* no break */\n\t\t}\n\n\t\tif (zparams) {\n\t\t\tswitch (Z_TYPE_P(zparams)) {\n\t\t\t\tcase IS_OBJECT:\n\t\t\t\tcase IS_ARRAY:\n\t\t\t\t\tzcopy = php_http_zsep(1, IS_ARRAY, zparams);\n\t\t\t\t\tzend_update_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), zcopy TSRMLS_CC);\n\t\t\t\t\tzval_ptr_dtor(&zcopy);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tzcopy = php_http_ztyp(IS_STRING, zparams);\n\t\t\t\t\tif (Z_STRLEN_P(zcopy)) {\n\t\t\t\t\t\tphp_http_params_opts_t opts = {\n\t\t\t\t\t\t\t{Z_STRVAL_P(zcopy), Z_STRLEN_P(zcopy)},\n\t\t\t\t\t\t\tphp_http_params_separator_init(zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"param_sep\"), 0 TSRMLS_CC) TSRMLS_CC),\n\t\t\t\t\t\t\tphp_http_params_separator_init(zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"arg_sep\"), 0 TSRMLS_CC) TSRMLS_CC),\n\t\t\t\t\t\t\tphp_http_params_separator_init(zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"val_sep\"), 0 TSRMLS_CC) TSRMLS_CC),\n\t\t\t\t\t\t\tNULL, flags\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tMAKE_STD_ZVAL(zparams);\n\t\t\t\t\t\tarray_init(zparams);\n\t\t\t\t\t\tphp_http_params_parse(Z_ARRVAL_P(zparams), &opts TSRMLS_CC);\n\t\t\t\t\t\tzend_update_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), zparams TSRMLS_CC);\n\t\t\t\t\t\tzval_ptr_dtor(&zparams);\n\n\t\t\t\t\t\tphp_http_params_separator_free(opts.param);\n\t\t\t\t\t\tphp_http_params_separator_free(opts.arg);\n\t\t\t\t\t\tphp_http_params_separator_free(opts.val);\n\t\t\t\t\t}\n\t\t\t\t\tzval_ptr_dtor(&zcopy);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tMAKE_STD_ZVAL(zparams);\n\t\t\tarray_init(zparams);\n\t\t\tzend_update_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), zparams TSRMLS_CC);\n\t\t\tzval_ptr_dtor(&zparams);\n\t\t}\n\t}\n\tzend_restore_error_handling(&zeh TSRMLS_CC);\n}\n\nZEND_BEGIN_ARG_INFO_EX(ai_HttpParams_toArray, 0, 0, 0)\nZEND_END_ARG_INFO();\nPHP_METHOD(HttpParams, toArray)\n{\n\tzval *zparams;\n\n\tif (SUCCESS != zend_parse_parameters_none()) {\n\t\treturn;\n\t}\n\tzparams = zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), 0 TSRMLS_CC);\n\tRETURN_ZVAL(zparams, 1, 0);\n}\n\nZEND_BEGIN_ARG_INFO_EX(ai_HttpParams_toString, 0, 0, 0)\nZEND_END_ARG_INFO();\nPHP_METHOD(HttpParams, toString)\n{\n\tzval **tmp, *zparams, *zpsep, *zasep, *zvsep, *zflags;\n\tphp_http_buffer_t buf;\n\n\tzparams = php_http_zsep(1, IS_ARRAY, zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), 0 TSRMLS_CC));\n\tzflags = php_http_ztyp(IS_LONG, zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"flags\"), 0 TSRMLS_CC));\n\n\tzpsep = zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"param_sep\"), 0 TSRMLS_CC);\n\tif (Z_TYPE_P(zpsep) == IS_ARRAY && SUCCESS == zend_hash_get_current_data(Z_ARRVAL_P(zpsep), (void *) &tmp)) {\n\t\tzpsep = php_http_ztyp(IS_STRING, *tmp);\n\t} else {\n\t\tzpsep = php_http_ztyp(IS_STRING, zpsep);\n\t}\n\tzasep = zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"arg_sep\"), 0 TSRMLS_CC);\n\tif (Z_TYPE_P(zasep) == IS_ARRAY && SUCCESS == zend_hash_get_current_data(Z_ARRVAL_P(zasep), (void *) &tmp)) {\n\t\tzasep = php_http_ztyp(IS_STRING, *tmp);\n\t} else {\n\t\tzasep = php_http_ztyp(IS_STRING, zasep);\n\t}\n\tzvsep = zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"val_sep\"), 0 TSRMLS_CC);\n\tif (Z_TYPE_P(zvsep) == IS_ARRAY && SUCCESS == zend_hash_get_current_data(Z_ARRVAL_P(zvsep), (void *) &tmp)) {\n\t\tzvsep = php_http_ztyp(IS_STRING, *tmp);\n\t} else {\n\t\tzvsep = php_http_ztyp(IS_STRING, zvsep);\n\t}\n\n\tphp_http_buffer_init(&buf);\n\tphp_http_params_to_string(&buf, Z_ARRVAL_P(zparams), Z_STRVAL_P(zpsep), Z_STRLEN_P(zpsep), Z_STRVAL_P(zasep), Z_STRLEN_P(zasep), Z_STRVAL_P(zvsep), Z_STRLEN_P(zvsep), Z_LVAL_P(zflags) TSRMLS_CC);\n\n\tzval_ptr_dtor(&zparams);\n\tzval_ptr_dtor(&zpsep);\n\tzval_ptr_dtor(&zasep);\n\tzval_ptr_dtor(&zvsep);\n\tzval_ptr_dtor(&zflags);\n\n\tRETVAL_PHP_HTTP_BUFFER_VAL(&buf);\n}\n\nZEND_BEGIN_ARG_INFO_EX(ai_HttpParams_offsetExists, 0, 0, 1)\n\tZEND_ARG_INFO(0, name)\nZEND_END_ARG_INFO();\nPHP_METHOD(HttpParams, offsetExists)\n{\n\tchar *name_str;\n\tint name_len;\n\tzval **zparam, *zparams;\n\n\tif (SUCCESS != zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &name_str, &name_len)) {\n\t\treturn;\n\t}\n\n\tzparams = php_http_ztyp(IS_ARRAY, zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), 0 TSRMLS_CC));\n\n\tif (SUCCESS == zend_symtable_find(Z_ARRVAL_P(zparams), name_str, name_len + 1, (void *) &zparam)) {\n\t\tRETVAL_BOOL(Z_TYPE_PP(zparam) != IS_NULL);\n\t} else {\n\t\tRETVAL_FALSE;\n\t}\n\tzval_ptr_dtor(&zparams);\n}\n\nZEND_BEGIN_ARG_INFO_EX(ai_HttpParams_offsetGet, 0, 0, 1)\n\tZEND_ARG_INFO(0, name)\nZEND_END_ARG_INFO();\nPHP_METHOD(HttpParams, offsetGet)\n{\n\tchar *name_str;\n\tint name_len;\n\tzval **zparam, *zparams;\n\n\tif (SUCCESS != zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &name_str, &name_len)) {\n\t\treturn;\n\t}\n\n\tzparams = php_http_ztyp(IS_ARRAY, zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), 0 TSRMLS_CC));\n\n\tif (SUCCESS == zend_symtable_find(Z_ARRVAL_P(zparams), name_str, name_len + 1, (void *) &zparam)) {\n\t\tRETVAL_ZVAL(*zparam, 1, 0);\n\t}\n\n\tzval_ptr_dtor(&zparams);\n}\n\nZEND_BEGIN_ARG_INFO_EX(ai_HttpParams_offsetUnset, 0, 0, 1)\n\tZEND_ARG_INFO(0, name)\nZEND_END_ARG_INFO();\nPHP_METHOD(HttpParams, offsetUnset)\n{\n\tchar *name_str;\n\tint name_len;\n\tzval *zparams;\n\n\tif (SUCCESS != zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &name_str, &name_len)) {\n\t\treturn;\n\t}\n\n\tzparams = php_http_zsep(1, IS_ARRAY, zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), 0 TSRMLS_CC));\n\n\tzend_symtable_del(Z_ARRVAL_P(zparams), name_str, name_len + 1);\n\tzend_update_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), zparams TSRMLS_CC);\n\n\tzval_ptr_dtor(&zparams);\n}\n\nZEND_BEGIN_ARG_INFO_EX(ai_HttpParams_offsetSet, 0, 0, 2)\n\tZEND_ARG_INFO(0, name)\n\tZEND_ARG_INFO(0, value)\nZEND_END_ARG_INFO();\nPHP_METHOD(HttpParams, offsetSet)\n{\n\tzval *nvalue;\n\tchar *name_str;\n\tint name_len;\n\tzval **zparam, *zparams;\n\n\tif (SUCCESS != zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"sz\", &name_str, &name_len, &nvalue)) {\n\t\treturn;\n\t}\n\n\tzparams = php_http_zsep(1, IS_ARRAY, zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), 0 TSRMLS_CC));\n\n\tif (name_len) {\n\t\tif (Z_TYPE_P(nvalue) == IS_ARRAY) {\n\t\t\tzval *new_zparam;\n\n\t\t\tif (SUCCESS == zend_symtable_find(Z_ARRVAL_P(zparams), name_str, name_len + 1, (void *) &zparam)) {\n\t\t\t\tnew_zparam = php_http_zsep(1, IS_ARRAY, *zparam);\n\t\t\t\tarray_join(Z_ARRVAL_P(nvalue), Z_ARRVAL_P(new_zparam), 0, 0);\n\t\t\t} else {\n\t\t\t\tnew_zparam = nvalue;\n\t\t\t\tZ_ADDREF_P(new_zparam);\n\t\t\t}\n\t\t\tadd_assoc_zval_ex(zparams, name_str, name_len + 1, new_zparam);\n\t\t} else {\n\t\t\tzval *tmp;\n\n\t\t\tif (SUCCESS == zend_symtable_find(Z_ARRVAL_P(zparams), name_str, name_len + 1, (void *) &zparam)) {\n\t\t\t\ttmp = php_http_zsep(1, IS_ARRAY, *zparam);\n\t\t\t} else {\n\t\t\t\tMAKE_STD_ZVAL(tmp);\n\t\t\t\tarray_init(tmp);\n\t\t\t}\n\n\t\t\tZ_ADDREF_P(nvalue);\n\t\t\tadd_assoc_zval_ex(tmp, ZEND_STRS(\"value\"), nvalue);\n\t\t\tadd_assoc_zval_ex(zparams, name_str, name_len + 1, tmp);\n\t\t}\n\t} else {\n\t\tzval *tmp = php_http_ztyp(IS_STRING, nvalue), *arr;\n\n\t\tMAKE_STD_ZVAL(arr);\n\t\tarray_init(arr);\n\t\tadd_assoc_bool_ex(arr, ZEND_STRS(\"value\"), 1);\n\t\tadd_assoc_zval_ex(zparams, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp) + 1, arr);\n\t\tzval_ptr_dtor(&tmp);\n\t}\n\n\tzend_update_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), zparams TSRMLS_CC);\n\tzval_ptr_dtor(&zparams);\n}\n\nstatic zend_function_entry php_http_params_methods[] = {\n\tPHP_ME(HttpParams, __construct,   ai_HttpParams___construct,   ZEND_ACC_PUBLIC|ZEND_ACC_CTOR|ZEND_ACC_FINAL)\n\n\tPHP_ME(HttpParams, toArray,       ai_HttpParams_toArray,       ZEND_ACC_PUBLIC)\n\tPHP_ME(HttpParams, toString,      ai_HttpParams_toString,      ZEND_ACC_PUBLIC)\n\tZEND_MALIAS(HttpParams, __toString, toString, ai_HttpParams_toString, ZEND_ACC_PUBLIC)\n\n\tPHP_ME(HttpParams, offsetExists,  ai_HttpParams_offsetExists,  ZEND_ACC_PUBLIC)\n\tPHP_ME(HttpParams, offsetUnset,   ai_HttpParams_offsetUnset,   ZEND_ACC_PUBLIC)\n\tPHP_ME(HttpParams, offsetSet,     ai_HttpParams_offsetSet,     ZEND_ACC_PUBLIC)\n\tPHP_ME(HttpParams, offsetGet,     ai_HttpParams_offsetGet,     ZEND_ACC_PUBLIC)\n\n\tEMPTY_FUNCTION_ENTRY\n};\n\nzend_class_entry *php_http_params_class_entry;\n\nPHP_MINIT_FUNCTION(http_params)\n{\n\tzend_class_entry ce = {0};\n\n\tINIT_NS_CLASS_ENTRY(ce, \"http\", \"Params\", php_http_params_methods);\n\tphp_http_params_class_entry = zend_register_internal_class(&ce TSRMLS_CC);\n\tphp_http_params_class_entry->create_object = php_http_params_object_new;\n\tzend_class_implements(php_http_params_class_entry TSRMLS_CC, 1, zend_ce_arrayaccess);\n\n\tzend_declare_class_constant_stringl(php_http_params_class_entry, ZEND_STRL(\"DEF_PARAM_SEP\"), ZEND_STRL(\",\") TSRMLS_CC);\n\tzend_declare_class_constant_stringl(php_http_params_class_entry, ZEND_STRL(\"DEF_ARG_SEP\"), ZEND_STRL(\";\") TSRMLS_CC);\n\tzend_declare_class_constant_stringl(php_http_params_class_entry, ZEND_STRL(\"DEF_VAL_SEP\"), ZEND_STRL(\"=\") TSRMLS_CC);\n\tzend_declare_class_constant_stringl(php_http_params_class_entry, ZEND_STRL(\"COOKIE_PARAM_SEP\"), ZEND_STRL(\"\") TSRMLS_CC);\n\n\tzend_declare_class_constant_long(php_http_params_class_entry, ZEND_STRL(\"PARSE_RAW\"), PHP_HTTP_PARAMS_RAW TSRMLS_CC);\n\tzend_declare_class_constant_long(php_http_params_class_entry, ZEND_STRL(\"PARSE_ESCAPED\"), PHP_HTTP_PARAMS_ESCAPED TSRMLS_CC);\n\tzend_declare_class_constant_long(php_http_params_class_entry, ZEND_STRL(\"PARSE_URLENCODED\"), PHP_HTTP_PARAMS_URLENCODED TSRMLS_CC);\n\tzend_declare_class_constant_long(php_http_params_class_entry, ZEND_STRL(\"PARSE_DIMENSION\"), PHP_HTTP_PARAMS_DIMENSION TSRMLS_CC);\n\tzend_declare_class_constant_long(php_http_params_class_entry, ZEND_STRL(\"PARSE_RFC5987\"), PHP_HTTP_PARAMS_RFC5987 TSRMLS_CC);\n\tzend_declare_class_constant_long(php_http_params_class_entry, ZEND_STRL(\"PARSE_RFC5988\"), PHP_HTTP_PARAMS_RFC5988 TSRMLS_CC);\n\tzend_declare_class_constant_long(php_http_params_class_entry, ZEND_STRL(\"PARSE_DEFAULT\"), PHP_HTTP_PARAMS_DEFAULT TSRMLS_CC);\n\tzend_declare_class_constant_long(php_http_params_class_entry, ZEND_STRL(\"PARSE_QUERY\"), PHP_HTTP_PARAMS_QUERY TSRMLS_CC);\n\n\tzend_declare_property_null(php_http_params_class_entry, ZEND_STRL(\"params\"), ZEND_ACC_PUBLIC TSRMLS_CC);\n\tzend_declare_property_stringl(php_http_params_class_entry, ZEND_STRL(\"param_sep\"), ZEND_STRL(\",\"), ZEND_ACC_PUBLIC TSRMLS_CC);\n\tzend_declare_property_stringl(php_http_params_class_entry, ZEND_STRL(\"arg_sep\"), ZEND_STRL(\";\"), ZEND_ACC_PUBLIC TSRMLS_CC);\n\tzend_declare_property_stringl(php_http_params_class_entry, ZEND_STRL(\"val_sep\"), ZEND_STRL(\"=\"), ZEND_ACC_PUBLIC TSRMLS_CC);\n\tzend_declare_property_long(php_http_params_class_entry, ZEND_STRL(\"flags\"), PHP_HTTP_PARAMS_DEFAULT, ZEND_ACC_PUBLIC TSRMLS_CC);\n\n\treturn SUCCESS;\n}\n\n/*\n * Local variables:\n * tab-width: 4\n * c-basic-offset: 4\n * End:\n * vim600: noet sw=4 ts=4 fdm=marker\n * vim<600: noet sw=4 ts=4\n */\n\n"], "fixing_code": [".cproject\n.deps\n.libs/\n.project\nMakefile\nMakefile.fragments\nMakefile.global\nMakefile.objects\nacinclude.m4\naclocal.m4\nautom4te.cache/\nbuild/\nconfig.guess\nconfig.h\nconfig.h.in\nconfig.log\nconfig.nice\nconfig.status\nconfig.sub\nconfigure\nconfigure.in\nhttp.la\ninstall-sh\nlcov_data\nlibtool\nltmain.sh\nmissing\nmkinstalldirs\nmodules/\npecl_http-*.tgz\n*.lo\n*.o\nrun-tests.php\ntests/*.diff\ntests/*.exp\ntests/*.log\ntests/*.out\ntests/*.php\ntests/*.sh\nlcov_data\n*~\n*.phar\nvendor/\ntests/helper/server.log\nphp_http_api.h\nphp_http_buffer.h\nphp_http_client.h\nphp_http_client_curl.h\nphp_http_client_curl_event.h\nphp_http_client_curl_user.h\nphp_http_client_request.h\nphp_http_client_response.h\nphp_http_cookie.h\nphp_http_curl.h\nphp_http_encoding.h\nphp_http_env.h\nphp_http_env_request.h\nphp_http_env_response.h\nphp_http_etag.h\nphp_http_exception.h\nphp_http_filter.h\nphp_http_header.h\nphp_http_header_parser.h\nphp_http_info.h\nphp_http_message.h\nphp_http_message_body.h\nphp_http_message_parser.h\nphp_http_misc.h\nphp_http_negotiate.h\nphp_http_object.h\nphp_http_options.h\nphp_http_params.h\nphp_http_querystring.h\nphp_http_response_codes.h\nphp_http_url.h\nphp_http_utf8.h\nphp_http_version.h\n", "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<package version=\"2.0\" xmlns=\"http://pear.php.net/dtd/package-2.0\"\n xmlns:tasks=\"http://pear.php.net/dtd/tasks-1.0\"\n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n xsi:schemaLocation=\"\n  http://pear.php.net/dtd/tasks-1.0\n  http://pear.php.net/dtd/tasks-1.0.xsd\n  http://pear.php.net/dtd/package-2.0\n  http://pear.php.net/dtd/package-2.0.xsd\">\n <name>pecl_http</name>\n <channel>pecl.php.net</channel>\n <summary>Extended HTTP Support</summary>\n <description><![CDATA[\nThis HTTP extension aims to provide a convenient and powerful\nset of functionality for one of PHPs major applications.\n\nIt eases handling of HTTP urls, headers and messages, provides\nmeans for negotiation of a client's preferred content type,\nlanguage and charset, as well as a convenient way to send any\narbitrary data with caching and resuming capabilities.\n\nIt provides powerful request functionality with support for\nparallel requests.\n\nDocumentation:\nhttps://mdref.m6w6.name/http\n]]></description>\n <lead>\n  <name>Michael Wallner</name>\n  <user>mike</user>\n  <email>mike@php.net</email>\n  <active>yes</active>\n </lead>\n <date>2016-09-12</date>\n <version>\n  <release>2.6.0RC1</release>\n  <api>2.6.0</api>\n </version>\n <stability>\n  <release>beta</release>\n  <api>stable</api>\n </stability>\n <license uri=\"http://copyfree.org/content/standard/licenses/2bsd/license.txt\">BSD-2-Clause</license>\n <notes><![CDATA[\n+ Added http\\Client\\Curl\\User interface for userland event loops\n+ Added http\\Url::IGNORE_ERRORS, http\\Url::SILENT_ERRORS and http\\Url::STDFLAGS\n+ Added http\\Client::setDebug(callable $debug)\n+ Added http\\Client\\Curl\\FEATURES constants and namespace\n+ Added http\\Client\\Curl\\VERSIONS constants and namespace\n+ Added share_cookies and share_ssl (libcurl >= 7.23.0) options to http\\Client::configure()\n+ http\\Client uses curl_share handles to properly share cookies and SSL/TLS sessions between requests\n+ Improved configure checks for default CA bundles\n+ Improved negotiation precision\n* Fixed regression introduced by http\\Params::PARSE_RFC5987: negotiation using the params parser would receive param keys without the trailing asterisk, stripped by http\\Params::PARSE_RFC5987.\n* Fix gh-issue #50: http\\Client::dequeue() within http\\Client::setDebug() causes segfault (Mike, Maik Wagner)\n* Fix gh-issue #47: http\\Url: Null pointer deref in sanitize_value() (Mike, @rc0r)\n* Fix gh-issue #45: HTTP/2 response message parsing broken with libcurl >= 7.49.1 (Mike)\n* Fix gh-issue #43: Joining query with empty original variable in query (Mike, Sander Backus)\n* Fix gh-issue #42: fatal error when using punycode in URLs (Mike, Sebastian Thielen)\n* Fix gh-issue #41: Use curl_version_info_data.features when initializing options (Mike)\n* Fix gh-issue #40: determinde the SSL backend used by curl at runtime (Mike, @rcanavan)\n* Fix gh-issue #39: Notice: http\\Client::enqueue(): Could not set option proxy_service_name (Mike, @rcanavan)\n* Fix gh-issue #38: Persistent curl handles: error code not properly reset (Mike, @afflerbach)\n* Fix gh-issue #36: Unexpected cookies sent if persistent_handle_id is used (Mike, @rcanavan, @afflerbach)\n* Fix gh-issue #34: allow setting multiple headers with the same name (Mike, @rcanavan)\n* Fix gh-issue #33: allow setting prodyhost request option to NULL (Mike, @rcanavan)\n* Fix gh-issue #31: add/improve configure checks for default CA bundle/path (Mike, @rcanavan) \n\nChanges from beta1:\n* Fixed PHP-5.3 compatibility\n* Fixed recursive calls to the event loop dispatcher\n\nChanges from beta2:\n* Fix bug #73055: crash in http\\QueryString (Mike, @rc0r)\n* Fix HTTP/2 version parser for older libcurl versions (Mike)\n]]></notes>\n <contents>\n  <dir name=\"/\">\n   <file role=\"doc\" name=\"AUTHORS\"/>\n   <file role=\"doc\" name=\"BUGS\"/>\n   <file role=\"doc\" name=\"CONTRIBUTING.md\"/>\n   <file role=\"doc\" name=\"CREDITS\"/>\n   <file role=\"doc\" name=\"LICENSE\"/>\n   <file role=\"doc\" name=\"README.md\"/>\n   <file role=\"doc\" name=\"THANKS\"/>\n   <file role=\"doc\" name=\"TODO\"/>\n   <file role=\"src\" name=\"config.m4\"/>\n   <file role=\"src\" name=\"config9.m4\"/>\n   <file role=\"src\" name=\"config.w32\"/>\n   <file role=\"src\" name=\"Makefile.frag\"/>\n   <file role=\"src\" name=\"php_http.h\"/>\n   <dir name=\"src\">\n    <file role=\"src\" name=\"php_http_api.h\"/>\n    <file role=\"src\" name=\"php_http_buffer.c\"/>\n    <file role=\"src\" name=\"php_http_buffer.h\"/>\n    <file role=\"src\" name=\"php_http.c\"/>\n    <file role=\"src\" name=\"php_http_client.c\"/>\n    <file role=\"src\" name=\"php_http_client.h\"/>\n    <file role=\"src\" name=\"php_http_client_curl.c\"/>\n    <file role=\"src\" name=\"php_http_client_curl.h\"/>\n    <file role=\"src\" name=\"php_http_client_curl_event.c\"/>\n    <file role=\"src\" name=\"php_http_client_curl_event.h\"/>\n    <file role=\"src\" name=\"php_http_client_curl_user.c\"/>\n    <file role=\"src\" name=\"php_http_client_curl_user.h\"/>\n    <file role=\"src\" name=\"php_http_client_request.c\"/>\n    <file role=\"src\" name=\"php_http_client_request.h\"/>\n    <file role=\"src\" name=\"php_http_client_response.c\"/>\n    <file role=\"src\" name=\"php_http_client_response.h\"/>\n    <file role=\"src\" name=\"php_http_cookie.c\"/>\n    <file role=\"src\" name=\"php_http_cookie.h\"/>\n    <file role=\"src\" name=\"php_http_curl.c\"/>\n    <file role=\"src\" name=\"php_http_curl.h\"/>\n    <file role=\"src\" name=\"php_http_encoding.c\"/>\n    <file role=\"src\" name=\"php_http_encoding.h\"/>\n    <file role=\"src\" name=\"php_http_env.c\"/>\n    <file role=\"src\" name=\"php_http_env.h\"/>\n    <file role=\"src\" name=\"php_http_env_request.c\"/>\n    <file role=\"src\" name=\"php_http_env_request.h\"/>\n    <file role=\"src\" name=\"php_http_env_response.c\"/>\n    <file role=\"src\" name=\"php_http_env_response.h\"/>\n    <file role=\"src\" name=\"php_http_etag.c\"/>\n    <file role=\"src\" name=\"php_http_etag.h\"/>\n    <file role=\"src\" name=\"php_http_exception.c\"/>\n    <file role=\"src\" name=\"php_http_exception.h\"/>\n    <file role=\"src\" name=\"php_http_filter.c\"/>\n    <file role=\"src\" name=\"php_http_filter.h\"/>\n    <file role=\"src\" name=\"php_http_header_parser.c\"/>\n    <file role=\"src\" name=\"php_http_header_parser.h\"/>\n    <file role=\"src\" name=\"php_http_header.c\"/>\n    <file role=\"src\" name=\"php_http_header.h\"/>\n    <file role=\"src\" name=\"php_http_info.c\"/>\n    <file role=\"src\" name=\"php_http_info.h\"/>\n    <file role=\"src\" name=\"php_http_message_body.c\"/>\n    <file role=\"src\" name=\"php_http_message_body.h\"/>\n    <file role=\"src\" name=\"php_http_message.c\"/>\n    <file role=\"src\" name=\"php_http_message.h\"/>\n    <file role=\"src\" name=\"php_http_message_parser.c\"/>\n    <file role=\"src\" name=\"php_http_message_parser.h\"/>\n    <file role=\"src\" name=\"php_http_misc.c\"/>\n    <file role=\"src\" name=\"php_http_misc.h\"/>\n    <file role=\"src\" name=\"php_http_negotiate.c\"/>\n    <file role=\"src\" name=\"php_http_negotiate.h\"/>\n    <file role=\"src\" name=\"php_http_object.c\"/>\n    <file role=\"src\" name=\"php_http_object.h\"/>\n    <file role=\"src\" name=\"php_http_options.c\"/>\n    <file role=\"src\" name=\"php_http_options.h\"/>\n    <file role=\"src\" name=\"php_http_params.c\"/>\n    <file role=\"src\" name=\"php_http_params.h\"/>\n    <file role=\"src\" name=\"php_http_querystring.c\"/>\n    <file role=\"src\" name=\"php_http_querystring.h\"/>\n    <file role=\"src\" name=\"php_http_response_codes.h\"/>\n    <file role=\"src\" name=\"php_http_url.c\"/>\n    <file role=\"src\" name=\"php_http_url.h\"/>\n    <file role=\"src\" name=\"php_http_utf8.h\"/>\n    <file role=\"src\" name=\"php_http_version.c\"/>\n    <file role=\"src\" name=\"php_http_version.h\"/>\n   </dir>\n   <dir name=\"tests\">\n    <file role=\"test\" name=\"skipif.inc\"/>\n     <dir name=\"data\">\n      <file role=\"test\" name=\"bug71719.bin\"/>\n      <file role=\"test\" name=\"message_r_content_range.txt\"/>\n      <file role=\"test\" name=\"message_r_multipart_put.txt\"/>\n      <file role=\"test\" name=\"message_rr_empty.txt\"/>\n      <file role=\"test\" name=\"message_rr_empty_chunked.txt\"/>\n      <file role=\"test\" name=\"message_rr_empty_gzip.txt\"/>\n      <file role=\"test\" name=\"message_rr_helloworld_chunked.txt\"/>\n      <file role=\"test\" name=\"urls.txt\"/>\n     </dir>\n     <dir name=\"helper\">\n      <file role=\"test\" name=\"cookie.inc\"/>\n      <file role=\"test\" name=\"dump.inc\"/>\n      <file role=\"test\" name=\"http2.crt\"/>\n      <file role=\"test\" name=\"http2.key\"/>\n      <file role=\"test\" name=\"pipeline.inc\"/>\n      <file role=\"test\" name=\"proxy.inc\"/>\n      <file role=\"test\" name=\"server.inc\"/>\n      <file role=\"test\" name=\"upload.inc\"/>\n      <dir name=\"html\">\n       <file role=\"test\" name=\"index.html\"/>\n      </dir>\n     </dir>\n     <file role=\"test\" name=\"bug61444.phpt\"/>\n     <file role=\"test\" name=\"bug66388.phpt\"/>\n     <file role=\"test\" name=\"bug66891.phpt\"/>\n     <file role=\"test\" name=\"bug67932.phpt\"/>\n     <file role=\"test\" name=\"bug69000.phpt\"/>\n     <file role=\"test\" name=\"bug69076.phpt\"/>\n     <file role=\"test\" name=\"bug69313.phpt\"/>\n     <file role=\"test\" name=\"bug69357.phpt\"/>\n     <file role=\"test\" name=\"bug71719.phpt\"/>\n     <file role=\"test\" name=\"bug73055.phpt\"/>\n     <file role=\"test\" name=\"client001.phpt\"/>\n     <file role=\"test\" name=\"client002.phpt\"/>\n     <file role=\"test\" name=\"client003.phpt\"/>\n     <file role=\"test\" name=\"client004.phpt\"/>\n     <file role=\"test\" name=\"client005.phpt\"/>\n     <file role=\"test\" name=\"client006.phpt\"/>\n     <file role=\"test\" name=\"client007.phpt\"/>\n     <file role=\"test\" name=\"client008.phpt\"/>\n     <file role=\"test\" name=\"client009.phpt\"/>\n     <file role=\"test\" name=\"client010.phpt\"/>\n     <file role=\"test\" name=\"client011.phpt\"/>\n     <file role=\"test\" name=\"client012.phpt\"/>\n     <file role=\"test\" name=\"client013.phpt\"/>\n     <file role=\"test\" name=\"client014.phpt\"/>\n     <file role=\"test\" name=\"client015.phpt\"/>\n     <file role=\"test\" name=\"client016.phpt\"/>\n     <file role=\"test\" name=\"client017.phpt\"/>\n     <file role=\"test\" name=\"client018.phpt\"/>\n     <file role=\"test\" name=\"client019.phpt\"/>\n     <file role=\"test\" name=\"client020.phpt\"/>\n     <file role=\"test\" name=\"client021.phpt\"/>\n     <file role=\"test\" name=\"client022.phpt\"/>\n     <file role=\"test\" name=\"client023.phpt\"/>\n     <file role=\"test\" name=\"client024.phpt\"/>\n     <file role=\"test\" name=\"client025.phpt\"/>\n     <file role=\"test\" name=\"client026.phpt\"/>\n     <file role=\"test\" name=\"client027.phpt\"/>\n     <file role=\"test\" name=\"client028.phpt\"/>\n     <file role=\"test\" name=\"client029.phpt\"/>\n     <file role=\"test\" name=\"clientrequest001.phpt\"/>\n     <file role=\"test\" name=\"clientrequest002.phpt\"/>\n     <file role=\"test\" name=\"clientrequest003.phpt\"/>\n     <file role=\"test\" name=\"clientrequest004.phpt\"/>\n     <file role=\"test\" name=\"clientresponse001.phpt\"/>\n     <file role=\"test\" name=\"clientresponse002.phpt\"/>\n     <file role=\"test\" name=\"clientresponse003.phpt\"/>\n     <file role=\"test\" name=\"cookie001.phpt\"/>\n     <file role=\"test\" name=\"cookie002.phpt\"/>\n     <file role=\"test\" name=\"cookie003.phpt\"/>\n     <file role=\"test\" name=\"cookie004.phpt\"/>\n     <file role=\"test\" name=\"cookie005.phpt\"/>\n     <file role=\"test\" name=\"cookie006.phpt\"/>\n     <file role=\"test\" name=\"cookie007.phpt\"/>\n     <file role=\"test\" name=\"cookie008.phpt\"/>\n     <file role=\"test\" name=\"cookie009.phpt\"/>\n     <file role=\"test\" name=\"cookie010.phpt\"/>\n     <file role=\"test\" name=\"cookie011.phpt\"/>\n     <file role=\"test\" name=\"cookie012.phpt\"/>\n     <file role=\"test\" name=\"encstream001.phpt\"/>\n     <file role=\"test\" name=\"encstream002.phpt\"/>\n     <file role=\"test\" name=\"encstream003.phpt\"/>\n     <file role=\"test\" name=\"encstream004.phpt\"/>\n     <file role=\"test\" name=\"encstream005.phpt\"/>\n     <file role=\"test\" name=\"encstream006.phpt\"/>\n     <file role=\"test\" name=\"encstream007.phpt\"/>\n     <file role=\"test\" name=\"encstream008.phpt\"/>\n     <file role=\"test\" name=\"encstream009.phpt\"/>\n     <file role=\"test\" name=\"envrequestbody001.phpt\"/>\n     <file role=\"test\" name=\"envrequestcookie001.phpt\"/>\n     <file role=\"test\" name=\"envrequestfiles001.phpt\"/>\n     <file role=\"test\" name=\"envrequestfiles002.phpt\"/>\n     <file role=\"test\" name=\"envrequestform.phpt\"/>\n     <file role=\"test\" name=\"envrequestheader001.phpt\"/>\n     <file role=\"test\" name=\"envrequestquery.phpt\"/>\n     <file role=\"test\" name=\"envresponse001.phpt\"/>\n     <file role=\"test\" name=\"envresponse002.phpt\"/>\n     <file role=\"test\" name=\"envresponse003.phpt\"/>\n     <file role=\"test\" name=\"envresponse004.phpt\"/>\n     <file role=\"test\" name=\"envresponse005.phpt\"/>\n     <file role=\"test\" name=\"envresponse006.phpt\"/>\n     <file role=\"test\" name=\"envresponse007.phpt\"/>\n     <file role=\"test\" name=\"envresponse008.phpt\"/>\n     <file role=\"test\" name=\"envresponse009.phpt\"/>\n     <file role=\"test\" name=\"envresponse010.phpt\"/>\n     <file role=\"test\" name=\"envresponse011.phpt\"/>\n     <file role=\"test\" name=\"envresponse012.phpt\"/>\n     <file role=\"test\" name=\"envresponse013.phpt\"/>\n     <file role=\"test\" name=\"envresponse014.phpt\"/>\n     <file role=\"test\" name=\"envresponse015.phpt\"/>\n     <file role=\"test\" name=\"envresponse016.phpt\"/>\n     <file role=\"test\" name=\"envresponse017.phpt\"/>\n     <file role=\"test\" name=\"envresponse018.phpt\"/>\n     <file role=\"test\" name=\"envresponsebody001.phpt\"/>\n     <file role=\"test\" name=\"envresponsebody002.phpt\"/>\n     <file role=\"test\" name=\"envresponsecodes.phpt\"/>\n     <file role=\"test\" name=\"envresponsecookie001.phpt\"/>\n     <file role=\"test\" name=\"envresponseheader001.phpt\"/>\n     <file role=\"test\" name=\"envresponseranges001.phpt\"/>\n     <file role=\"test\" name=\"etag001.phpt\"/>\n     <file role=\"test\" name=\"filterchunked.phpt\"/>\n     <file role=\"test\" name=\"filterzlib.phpt\"/>\n     <file role=\"test\" name=\"gh-issue6.phpt\"/>\n     <file role=\"test\" name=\"gh-issue7.phpt\"/>\n     <file role=\"test\" name=\"gh-issue12.phpt\"/>\n     <file role=\"test\" name=\"gh-issue42.phpt\"/>\n     <file role=\"test\" name=\"gh-issue47.phpt\"/>\n     <file role=\"test\" name=\"gh-issue48.phpt\"/>\n     <file role=\"test\" name=\"gh-issue50.phpt\"/>\n     <file role=\"test\" name=\"header001.phpt\"/>\n     <file role=\"test\" name=\"header002.phpt\"/>\n     <file role=\"test\" name=\"header003.phpt\"/>\n     <file role=\"test\" name=\"header004.phpt\"/>\n     <file role=\"test\" name=\"header005.phpt\"/>\n     <file role=\"test\" name=\"header006.phpt\"/>\n     <file role=\"test\" name=\"header007.phpt\"/>\n     <file role=\"test\" name=\"header008.phpt\"/>\n     <file role=\"test\" name=\"header009.phpt\"/>\n     <file role=\"test\" name=\"headerparser001.phpt\"/>\n     <file role=\"test\" name=\"headerparser002.phpt\"/>\n     <file role=\"test\" name=\"headerparser003.phpt\"/>\n     <file role=\"test\" name=\"info001.phpt\"/>\n     <file role=\"test\" name=\"info002.phpt\"/>\n     <file role=\"test\" name=\"message001.phpt\"/>\n     <file role=\"test\" name=\"message002.phpt\"/>\n     <file role=\"test\" name=\"message003.phpt\"/>\n     <file role=\"test\" name=\"message004.phpt\"/>\n     <file role=\"test\" name=\"message005.phpt\"/>\n     <file role=\"test\" name=\"message006.phpt\"/>\n     <file role=\"test\" name=\"message007.phpt\"/>\n     <file role=\"test\" name=\"message008.phpt\"/>\n     <file role=\"test\" name=\"message009.phpt\"/>\n     <file role=\"test\" name=\"message010.phpt\"/>\n     <file role=\"test\" name=\"message011.phpt\"/>\n     <file role=\"test\" name=\"message012.phpt\"/>\n     <file role=\"test\" name=\"message013.phpt\"/>\n     <file role=\"test\" name=\"message014.phpt\"/>\n     <file role=\"test\" name=\"message015.phpt\"/>\n     <file role=\"test\" name=\"message016.phpt\"/>\n     <file role=\"test\" name=\"messagebody001.phpt\"/>\n     <file role=\"test\" name=\"messagebody002.phpt\"/>\n     <file role=\"test\" name=\"messagebody003.phpt\"/>\n     <file role=\"test\" name=\"messagebody004.phpt\"/>\n     <file role=\"test\" name=\"messagebody005.phpt\"/>\n     <file role=\"test\" name=\"messagebody006.phpt\"/>\n     <file role=\"test\" name=\"messagebody007.phpt\"/>\n     <file role=\"test\" name=\"messagebody008.phpt\"/>\n     <file role=\"test\" name=\"messagebody009.phpt\"/>\n     <file role=\"test\" name=\"messagebody010.phpt\"/>\n     <file role=\"test\" name=\"messageparser001.phpt\"/>\n     <file role=\"test\" name=\"messageparser002.phpt\"/>\n     <file role=\"test\" name=\"negotiate001.phpt\"/>\n     <file role=\"test\" name=\"params001.phpt\"/>\n     <file role=\"test\" name=\"params002.phpt\"/>\n     <file role=\"test\" name=\"params003.phpt\"/>\n     <file role=\"test\" name=\"params004.phpt\"/>\n     <file role=\"test\" name=\"params005.phpt\"/>\n     <file role=\"test\" name=\"params006.phpt\"/>\n     <file role=\"test\" name=\"params007.phpt\"/>\n     <file role=\"test\" name=\"params008.phpt\"/>\n     <file role=\"test\" name=\"params009.phpt\"/>\n     <file role=\"test\" name=\"params010.phpt\"/>\n     <file role=\"test\" name=\"params011.phpt\"/>\n     <file role=\"test\" name=\"params012.phpt\"/>\n     <file role=\"test\" name=\"params013.phpt\"/>\n     <file role=\"test\" name=\"params014.phpt\"/>\n     <file role=\"test\" name=\"params015.phpt\"/>\n     <file role=\"test\" name=\"params016.phpt\"/>\n     <file role=\"test\" name=\"params017.phpt\"/>\n     <file role=\"test\" name=\"phpinfo.phpt\"/>\n     <file role=\"test\" name=\"propertyproxy001.phpt\"/>\n     <file role=\"test\" name=\"querystring001.phpt\"/>\n     <file role=\"test\" name=\"querystring002.phpt\"/>\n     <file role=\"test\" name=\"querystring003.phpt\"/>\n     <file role=\"test\" name=\"serialize001.phpt\"/>\n     <file role=\"test\" name=\"url001.phpt\"/>\n     <file role=\"test\" name=\"url002.phpt\"/>\n     <file role=\"test\" name=\"url003.phpt\"/>\n     <file role=\"test\" name=\"url004.phpt\"/>\n     <file role=\"test\" name=\"url005.phpt\"/>\n     <file role=\"test\" name=\"urlparser001.phpt\"/>\n     <file role=\"test\" name=\"urlparser002.phpt\"/>\n     <file role=\"test\" name=\"urlparser003.phpt\"/>\n     <file role=\"test\" name=\"urlparser004.phpt\"/>\n     <file role=\"test\" name=\"urlparser005.phpt\"/>\n     <file role=\"test\" name=\"urlparser006.phpt\"/>\n     <file role=\"test\" name=\"urlparser007.phpt\"/>\n     <file role=\"test\" name=\"urlparser008.phpt\"/>\n     <file role=\"test\" name=\"urlparser009.phpt\"/>\n     <file role=\"test\" name=\"urlparser010.phpt\"/>\n     <file role=\"test\" name=\"urlparser011.phpt\"/>\n     <file role=\"test\" name=\"version001.phpt\"/>\n   </dir>\n   <dir name=\"scripts\">\n    <file role=\"src\" name=\"bench_select_vs_event.php\"/>\n    <file role=\"src\" name=\"check_package-xml.php\"/>\n    <file role=\"src\" name=\"gen_curlinfo.php\"/>\n    <file role=\"src\" name=\"gen_stubs.php\"/>\n    <file role=\"src\" name=\"gen_travis_yml.php\"/>\n    <file role=\"src\" name=\"gen_utf8.php\"/>\n   </dir>\n  </dir>\n </contents>\n <dependencies>\n  <required>\n   <php>\n    <min>5.3.0</min>\n    <max>7.0.0</max>\n    <exclude>7.0.0</exclude>\n   </php>\n   <pearinstaller>\n    <min>1.4.1</min>\n   </pearinstaller>\n   <package>\n    <name>raphf</name>\n    <channel>pecl.php.net</channel>\n    <min>1.1.0</min>\n    <max>2.0.0dev</max>\n    <exclude>2.0.0dev</exclude>\n    <providesextension>raphf</providesextension>\n   </package>\n   <package>\n    <name>propro</name>\n    <channel>pecl.php.net</channel>\n    <min>1.0.0</min>\n    <max>2.0.0dev</max>\n    <exclude>2.0.0dev</exclude>\n    <providesextension>propro</providesextension>\n   </package>\n  </required>\n  <optional>\n   <extension><name>hash</name></extension>\n   <extension><name>iconv</name></extension>\n  </optional>\n </dependencies>\n <providesextension>http</providesextension>\n <extsrcrelease>\n  <configureoption\n   name=\"with-http-zlib-dir\"\n   prompt=\"where to find zlib\"\n   default=\"/usr\" />\n  <configureoption\n   name=\"with-http-libcurl-dir\"\n   prompt=\"where to find libcurl\"\n   default=\"/usr\" />\n  <configureoption\n   name=\"with-http-libevent-dir\"\n   prompt=\"where to find libevent\"\n   default=\"/usr\" />\n  <configureoption\n   name=\"with-http-libidn-dir\"\n   prompt=\"where to find libidn\"\n   default=\"/usr\" />\n  </extsrcrelease>\n <changelog />\n</package>\n", "/*\n    +--------------------------------------------------------------------+\n    | PECL :: http                                                       |\n    +--------------------------------------------------------------------+\n    | Redistribution and use in source and binary forms, with or without |\n    | modification, are permitted provided that the conditions mentioned |\n    | in the accompanying LICENSE file are met.                          |\n    +--------------------------------------------------------------------+\n    | Copyright (c) 2004-2014, Michael Wallner <mike@php.net>            |\n    +--------------------------------------------------------------------+\n*/\n\n#include \"php_http_api.h\"\n\nstatic php_http_params_token_t def_param_sep = {\",\", 1}, *def_param_sep_ptr[] = {&def_param_sep, NULL};\nstatic php_http_params_token_t def_arg_sep = {\";\", 1}, *def_arg_sep_ptr[] = {&def_arg_sep, NULL};\nstatic php_http_params_token_t def_val_sep = {\"=\", 1}, *def_val_sep_ptr[] = {&def_val_sep, NULL};\nstatic php_http_params_opts_t def_opts = {\n\t{NULL, 0},\n\tdef_param_sep_ptr,\n\tdef_arg_sep_ptr,\n\tdef_val_sep_ptr,\n\tNULL,\n\tPHP_HTTP_PARAMS_DEFAULT\n};\n\nphp_http_params_opts_t *php_http_params_opts_default_get(php_http_params_opts_t *opts)\n{\n\tif (!opts) {\n\t\topts = emalloc(sizeof(*opts));\n\t}\n\n\tmemcpy(opts, &def_opts, sizeof(def_opts));\n\n\treturn opts;\n}\n\ntypedef struct php_http_params_state {\n\tphp_http_params_token_t input;\n\tphp_http_params_token_t param;\n\tphp_http_params_token_t arg;\n\tphp_http_params_token_t val;\n\tstruct {\n\t\tzval **param;\n\t\tzval **args;\n\t\tzval **val;\n\t} current;\n\tunsigned quotes:1;\n\tunsigned escape:1;\n\tunsigned rfc5987:1;\n} php_http_params_state_t;\n\nstatic inline void sanitize_escaped(zval *zv TSRMLS_DC)\n{\n\tif (Z_STRVAL_P(zv)[0] == '\"' && Z_STRVAL_P(zv)[Z_STRLEN_P(zv) - 1] == '\"') {\n\t\tsize_t deq_len = Z_STRLEN_P(zv) - 2;\n\t\tchar *deq = estrndup(Z_STRVAL_P(zv) + 1, deq_len);\n\n\t\tzval_dtor(zv);\n\t\tZVAL_STRINGL(zv, deq, deq_len, 0);\n\t}\n\n\tphp_stripcslashes(Z_STRVAL_P(zv), &Z_STRLEN_P(zv));\n}\n\nstatic inline void quote_string(zval *zv, zend_bool force TSRMLS_DC)\n{\n\tint len = Z_STRLEN_P(zv);\n\n\tZ_STRVAL_P(zv) = php_addcslashes(Z_STRVAL_P(zv), Z_STRLEN_P(zv), &Z_STRLEN_P(zv), 1,\n\t\t\tZEND_STRL(\"\\0..\\37\\173\\\\\\\"\") TSRMLS_CC);\n\n\tif (force || len != Z_STRLEN_P(zv) || strpbrk(Z_STRVAL_P(zv), \"()<>@,;:\\\"[]?={} \")) {\n\t\tzval tmp = *zv;\n\t\tint len = Z_STRLEN_P(zv) + 2;\n\t\tchar *str = emalloc(len + 1);\n\n\t\tstr[0] = '\"';\n\t\tmemcpy(&str[1], Z_STRVAL_P(zv), Z_STRLEN_P(zv));\n\t\tstr[len-1] = '\"';\n\t\tstr[len] = '\\0';\n\n\t\tzval_dtor(&tmp);\n\t\tZVAL_STRINGL(zv, str, len, 0);\n\t}\n}\n\nstatic inline void prepare_escaped(zval *zv TSRMLS_DC)\n{\n\tif (Z_TYPE_P(zv) == IS_STRING) {\n\t\tquote_string(zv, 0 TSRMLS_CC);\n\t} else {\n\t\tzval_dtor(zv);\n\t\tZVAL_EMPTY_STRING(zv);\n\t}\n}\n\nstatic inline void sanitize_urlencoded(zval *zv TSRMLS_DC)\n{\n\tZ_STRLEN_P(zv) = php_raw_url_decode(Z_STRVAL_P(zv), Z_STRLEN_P(zv));\n}\n\nstatic inline void prepare_urlencoded(zval *zv TSRMLS_DC)\n{\n\tint len;\n\tchar *str =\tphp_raw_url_encode(Z_STRVAL_P(zv), Z_STRLEN_P(zv), &len);\n\n\tzval_dtor(zv);\n\tZVAL_STRINGL(zv, str, len, 0);\n}\n\nstatic void sanitize_dimension(zval *zv TSRMLS_DC)\n{\n\tzval *arr = NULL, *tmp = NULL, **cur = NULL;\n\tchar *var = NULL, *ptr = Z_STRVAL_P(zv), *end = Z_STRVAL_P(zv) + Z_STRLEN_P(zv);\n\tlong level = 0;\n\n\tMAKE_STD_ZVAL(arr);\n\tarray_init(arr);\n\tcur = &arr;\n\n\twhile (ptr < end) {\n\t\tif (!var) {\n\t\t\tvar = ptr;\n\t\t}\n\n\t\tswitch (*ptr) {\n\t\t\tcase '[':\n\t\t\t\tif (++level > PG(max_input_nesting_level)) {\n\t\t\t\t\tzval_ptr_dtor(&arr);\n\t\t\t\t\tphp_error_docref(NULL TSRMLS_CC, E_WARNING, \"Max input nesting level of %ld exceeded\", (long) PG(max_input_nesting_level));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (ptr - var == 0) {\n\t\t\t\t\t++var;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t/* no break */\n\n\t\t\tcase ']':\n\n\t\t\t\tMAKE_STD_ZVAL(tmp);\n\t\t\t\tZVAL_NULL(tmp);\n\t\t\t\tconvert_to_array(*cur);\n\n\t\t\t\tif (ptr - var) {\n\t\t\t\t\tchar chr = *ptr;\n\t\t\t\t\t*ptr = '\\0';\n\t\t\t\t\tzend_symtable_update(Z_ARRVAL_PP(cur), var, ptr - var + 1, (void *) &tmp, sizeof(zval *), (void *) &cur);\n\t\t\t\t\t*ptr = chr;\n\t\t\t\t} else {\n\t\t\t\t\tzend_hash_next_index_insert(Z_ARRVAL_PP(cur), (void *) &tmp, sizeof(zval *), (void *) &cur);\n\t\t\t\t}\n\n\t\t\t\tvar = NULL;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t++ptr;\n\t}\n\n\tif (zend_hash_num_elements(Z_ARRVAL_P(arr))) {\n\t\tzval_dtor(zv);\n#if PHP_VERSION_ID >= 50400\n\t\tZVAL_COPY_VALUE(zv, arr);\n#else\n\t\tzv->value = arr->value;\n\t\tZ_TYPE_P(zv) = Z_TYPE_P(arr);\n#endif\n\t\tFREE_ZVAL(arr);\n\t} else {\n\t\tzval_ptr_dtor(&arr);\n\t}\n}\n\nstatic inline void shift_key(php_http_buffer_t *buf, char *key_str, size_t key_len, const char *ass, size_t asl, unsigned flags TSRMLS_DC);\nstatic inline void shift_val(php_http_buffer_t *buf, zval *zvalue, const char *vss, size_t vsl, unsigned flags TSRMLS_DC);\n\nstatic void prepare_dimension(php_http_buffer_t *buf, php_http_buffer_t *keybuf, zval *zvalue, const char *pss, size_t psl, const char *vss, size_t vsl, unsigned flags TSRMLS_DC)\n{\n\tHashTable *ht = HASH_OF(zvalue);\n\tHashPosition pos;\n\tphp_http_array_hashkey_t key = php_http_array_hashkey_init(0);\n\tzval **val;\n\tphp_http_buffer_t prefix;\n\n\tif (!ht->nApplyCount++) {\n\t\tphp_http_buffer_init(&prefix);\n\t\tphp_http_buffer_append(&prefix, keybuf->data, keybuf->used);\n\n\t\tFOREACH_HASH_KEYVAL(pos, ht, key, val) {\n\t\t\tif (key.type == HASH_KEY_IS_STRING && !*key.str) {\n\t\t\t\t/* only public properties */\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tphp_http_buffer_appends(&prefix, \"[\");\n\t\t\tif (key.type == HASH_KEY_IS_STRING) {\n\t\t\t\tphp_http_buffer_append(&prefix, key.str, key.len - 1);\n\t\t\t} else {\n\t\t\t\tphp_http_buffer_appendf(&prefix, \"%lu\", key.num);\n\t\t\t}\n\t\t\tphp_http_buffer_appends(&prefix, \"]\");\n\n\t\t\tif (Z_TYPE_PP(val) == IS_ARRAY || Z_TYPE_PP(val) == IS_OBJECT) {\n\t\t\t\tprepare_dimension(buf, &prefix, *val, pss, psl, vss, vsl, flags TSRMLS_CC);\n\t\t\t} else {\n\t\t\t\tzval *cpy = php_http_ztyp(IS_STRING, *val);\n\n\t\t\t\tshift_key(buf, prefix.data, prefix.used, pss, psl, flags TSRMLS_CC);\n\t\t\t\tshift_val(buf, cpy, vss, vsl, flags TSRMLS_CC);\n\t\t\t\tzval_ptr_dtor(&cpy);\n\t\t\t}\n\n\t\t\tphp_http_buffer_cut(&prefix, keybuf->used, prefix.used - keybuf->used);\n\t\t}\n\t\tphp_http_buffer_dtor(&prefix);\n\t}\n\t--ht->nApplyCount;\n}\n\nstatic inline void sanitize_key(unsigned flags, char *str, size_t len, zval *zv, zend_bool *rfc5987 TSRMLS_DC)\n{\n\tchar *eos;\n\n\tzval_dtor(zv);\n\tphp_trim(str, len, NULL, 0, zv, 3 TSRMLS_CC);\n\n\tif (flags & PHP_HTTP_PARAMS_ESCAPED) {\n\t\tsanitize_escaped(zv TSRMLS_CC);\n\t}\n\t\n\tif (!Z_STRLEN_P(zv)) {\n\t\treturn;\n\t}\n\n\tif (flags & PHP_HTTP_PARAMS_RFC5987) {\n\t\teos = &Z_STRVAL_P(zv)[Z_STRLEN_P(zv)-1];\n\t\tif (*eos == '*') {\n\t\t\t*eos = '\\0';\n\t\t\t*rfc5987 = 1;\n\t\t\tZ_STRLEN_P(zv) -= 1;\n\t\t}\n\t}\n\n\tif (flags & PHP_HTTP_PARAMS_URLENCODED) {\n\t\tsanitize_urlencoded(zv TSRMLS_CC);\n\t}\n\n\tif (flags & PHP_HTTP_PARAMS_DIMENSION) {\n\t\tsanitize_dimension(zv TSRMLS_CC);\n\t}\n}\n\nstatic inline void sanitize_rfc5987(zval *zv, char **language, zend_bool *latin1 TSRMLS_DC)\n{\n\tchar *ptr;\n\n\t/* examples:\n\t * iso-8850-1'de'bl%f6der%20schei%df%21\n\t * utf-8'de-DE'bl%c3%b6der%20schei%c3%9f%21\n\t */\n\n\tswitch (Z_STRVAL_P(zv)[0]) {\n\tcase 'I':\n\tcase 'i':\n\t\tif (!strncasecmp(Z_STRVAL_P(zv), \"iso-8859-1\", lenof(\"iso-8859-1\"))) {\n\t\t\t*latin1 = 1;\n\t\t\tptr = Z_STRVAL_P(zv) + lenof(\"iso-8859-1\");\n\t\t\tbreak;\n\t\t}\n\t\t/* no break */\n\tcase 'U':\n\tcase 'u':\n\t\tif (!strncasecmp(Z_STRVAL_P(zv), \"utf-8\", lenof(\"utf-8\"))) {\n\t\t\t*latin1 = 0;\n\t\t\tptr = Z_STRVAL_P(zv) + lenof(\"utf-8\");\n\t\t\tbreak;\n\t\t}\n\t\t/* no break */\n\tdefault:\n\t\treturn;\n\t}\n\n\t/* extract language */\n\tif (*ptr == '\\'') {\n\t\tfor (*language = ++ptr; *ptr && *ptr != '\\''; ++ptr);\n\t\tif (!*ptr) {\n\t\t\t*language = NULL;\n\t\t\treturn;\n\t\t}\n\t\t*language = estrndup(*language, ptr - *language);\n\n\t\t/* remainder */\n\t\tptr = estrdup(++ptr);\n\t\tzval_dtor(zv);\n\t\tZVAL_STRING(zv, ptr, 0);\n\t}\n}\n\nstatic inline void sanitize_rfc5988(char *str, size_t len, zval *zv TSRMLS_DC)\n{\n\tzval_dtor(zv);\n\tphp_trim(str, len, \" ><\", 3, zv, 3 TSRMLS_CC);\n}\n\nstatic inline void prepare_rfc5988(zval *zv TSRMLS_DC)\n{\n\tif (Z_TYPE_P(zv) != IS_STRING) {\n\t\tzval_dtor(zv);\n\t\tZVAL_EMPTY_STRING(zv);\n\t}\n}\n\nstatic void utf8encode(zval *zv)\n{\n\tsize_t pos, len = 0;\n\tunsigned char *ptr = (unsigned char *) Z_STRVAL_P(zv);\n\n\twhile (*ptr) {\n\t\tif (*ptr++ >= 0x80) {\n\t\t\t++len;\n\t\t}\n\t\t++len;\n\t}\n\n\tptr = safe_emalloc(1, len, 1);\n\tfor (len = 0, pos = 0; len <= Z_STRLEN_P(zv); ++len, ++pos) {\n\t\tptr[pos] = Z_STRVAL_P(zv)[len];\n\t\tif ((ptr[pos]) >= 0x80) {\n\t\t\tptr[pos + 1] = 0x80 | (ptr[pos] & 0x3f);\n\t\t\tptr[pos] = 0xc0 | ((ptr[pos] >> 6) & 0x1f);\n\t\t\t++pos;\n\t\t}\n\t}\n\tzval_dtor(zv);\n\tZVAL_STRINGL(zv, (char *) ptr, pos-1, 0);\n}\n\nstatic inline void sanitize_value(unsigned flags, char *str, size_t len, zval *zv, zend_bool rfc5987 TSRMLS_DC)\n{\n\tchar *language = NULL;\n\tzend_bool latin1 = 0;\n\n\tzval_dtor(zv);\n\tphp_trim(str, len, NULL, 0, zv, 3 TSRMLS_CC);\n\n\tif (rfc5987) {\n\t\tsanitize_rfc5987(zv, &language, &latin1 TSRMLS_CC);\n\t}\n\n\tif (flags & PHP_HTTP_PARAMS_ESCAPED) {\n\t\tsanitize_escaped(zv TSRMLS_CC);\n\t}\n\n\tif ((flags & PHP_HTTP_PARAMS_URLENCODED) || (rfc5987 && language)) {\n\t\tsanitize_urlencoded(zv TSRMLS_CC);\n\t}\n\n\tif (rfc5987 && language) {\n\t\tzval *tmp;\n\n\t\tif (latin1) {\n\t\t\tutf8encode(zv);\n\t\t}\n\n\t\tMAKE_STD_ZVAL(tmp);\n\t\tZVAL_COPY_VALUE(tmp, zv);\n\t\tarray_init(zv);\n\t\tadd_assoc_zval(zv, language, tmp);\n\t\tPTR_FREE(language);\n\t}\n}\n\nstatic inline void prepare_key(unsigned flags, char *old_key, size_t old_len, char **new_key, size_t *new_len TSRMLS_DC)\n{\n\tzval zv;\n\n\tINIT_PZVAL(&zv);\n\tZVAL_STRINGL(&zv, old_key, old_len, 1);\n\n\tif (flags & PHP_HTTP_PARAMS_URLENCODED) {\n\t\tprepare_urlencoded(&zv TSRMLS_CC);\n\t}\n\n\tif (flags & PHP_HTTP_PARAMS_ESCAPED) {\n\t\tif (flags & PHP_HTTP_PARAMS_RFC5988) {\n\t\t\tprepare_rfc5988(&zv TSRMLS_CC);\n\t\t} else {\n\t\t\tprepare_escaped(&zv TSRMLS_CC);\n\t\t}\n\t}\n\n\t*new_key = Z_STRVAL(zv);\n\t*new_len = Z_STRLEN(zv);\n}\n\nstatic inline void prepare_value(unsigned flags, zval *zv TSRMLS_DC)\n{\n\tif (flags & PHP_HTTP_PARAMS_URLENCODED) {\n\t\tprepare_urlencoded(zv TSRMLS_CC);\n\t}\n\n\tif (flags & PHP_HTTP_PARAMS_ESCAPED) {\n\t\tprepare_escaped(zv TSRMLS_CC);\n\t}\n}\n\nstatic void merge_param(HashTable *params, zval *zdata, zval ***current_param, zval ***current_args TSRMLS_DC)\n{\n\tzval **ptr, **zdata_ptr;\n\tphp_http_array_hashkey_t hkey = php_http_array_hashkey_init(0);\n\n#if 0\n\t{\n\t\tzval tmp;\n\t\tINIT_PZVAL_ARRAY(&tmp, params);\n\t\tfprintf(stderr, \"params = \");\n\t\tzend_print_zval_r(&tmp, 1 TSRMLS_CC);\n\t\tfprintf(stderr, \"\\n\");\n\t}\n#endif\n\n\thkey.type = zend_hash_get_current_key_ex(Z_ARRVAL_P(zdata), &hkey.str, &hkey.len, &hkey.num, hkey.dup, NULL);\n\n\tif ((hkey.type == HASH_KEY_IS_STRING && !zend_hash_exists(params, hkey.str, hkey.len))\n\t||\t(hkey.type == HASH_KEY_IS_LONG && !zend_hash_index_exists(params, hkey.num))\n\t) {\n\t\tzval *tmp, *arg, **args;\n\n\t\t/* create the entry if it doesn't exist */\n\t\tzend_hash_get_current_data(Z_ARRVAL_P(zdata), (void *) &ptr);\n\t\tZ_ADDREF_PP(ptr);\n\t\tMAKE_STD_ZVAL(tmp);\n\t\tarray_init(tmp);\n\t\tadd_assoc_zval_ex(tmp, ZEND_STRS(\"value\"), *ptr);\n\n\t\tMAKE_STD_ZVAL(arg);\n\t\tarray_init(arg);\n\t\tzend_hash_update(Z_ARRVAL_P(tmp), \"arguments\", sizeof(\"arguments\"), (void *) &arg, sizeof(zval *), (void *) &args);\n\t\t*current_args = args;\n\n\t\tif (hkey.type == HASH_KEY_IS_STRING) {\n\t\t\tzend_hash_update(params, hkey.str, hkey.len, (void *) &tmp, sizeof(zval *), (void *) &ptr);\n\t\t} else {\n\t\t\tzend_hash_index_update(params, hkey.num, (void *) &tmp, sizeof(zval *), (void *) &ptr);\n\t\t}\n\t} else {\n\t\t/* merge */\n\t\tif (hkey.type == HASH_KEY_IS_STRING) {\n\t\t\tzend_hash_find(params, hkey.str, hkey.len, (void *) &ptr);\n\t\t} else {\n\t\t\tzend_hash_index_find(params, hkey.num, (void *) &ptr);\n\t\t}\n\n\t\tzdata_ptr = &zdata;\n\n\t\tif (Z_TYPE_PP(ptr) == IS_ARRAY\n\t\t&&\tSUCCESS == zend_hash_find(Z_ARRVAL_PP(ptr), \"value\", sizeof(\"value\"), (void *) &ptr)\n\t\t&&\tSUCCESS == zend_hash_get_current_data(Z_ARRVAL_PP(zdata_ptr), (void *) &zdata_ptr)\n\t\t) {\n\t\t\t/*\n\t\t\t * params = [arr => [value => [0 => 1]]]\n\t\t\t *                            ^- ptr\n\t\t\t * zdata  = [arr => [0 => NULL]]\n\t\t\t *                  ^- zdata_ptr\n\t\t\t */\n\t\t\tzval **test_ptr;\n\n\t\t\twhile (Z_TYPE_PP(zdata_ptr) == IS_ARRAY\n\t\t\t&&\tSUCCESS == zend_hash_get_current_data(Z_ARRVAL_PP(zdata_ptr), (void *) &test_ptr)\n\t\t\t) {\n\t\t\t\tif (Z_TYPE_PP(test_ptr) == IS_ARRAY && Z_TYPE_PP(ptr) == IS_ARRAY) {\n\n\t\t\t\t\t/* now find key in ptr */\n\t\t\t\t\tif (HASH_KEY_IS_STRING == zend_hash_get_current_key_ex(Z_ARRVAL_PP(zdata_ptr), &hkey.str, &hkey.len, &hkey.num, hkey.dup, NULL)) {\n\t\t\t\t\t\tif (SUCCESS == zend_hash_find(Z_ARRVAL_PP(ptr), hkey.str, hkey.len, (void *) &ptr)) {\n\t\t\t\t\t\t\tzdata_ptr = test_ptr;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tZ_ADDREF_PP(test_ptr);\n\t\t\t\t\t\t\tzend_hash_update(Z_ARRVAL_PP(ptr), hkey.str, hkey.len, (void *) test_ptr, sizeof(zval *), (void *) &ptr);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (SUCCESS == zend_hash_index_find(Z_ARRVAL_PP(ptr), hkey.num, (void *) &ptr)) {\n\t\t\t\t\t\t\tzdata_ptr = test_ptr;\n\t\t\t\t\t\t} else if (hkey.num) {\n\t\t\t\t\t\t\tZ_ADDREF_PP(test_ptr);\n\t\t\t\t\t\t\tzend_hash_index_update(Z_ARRVAL_PP(ptr), hkey.num, (void *) test_ptr, sizeof(zval *), (void *) &ptr);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tZ_ADDREF_PP(test_ptr);\n\t\t\t\t\t\t\tzend_hash_next_index_insert(Z_ARRVAL_PP(ptr), (void *) test_ptr, sizeof(zval *), (void *) &ptr);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t/* this is the leaf */\n\t\t\t\t\tZ_ADDREF_PP(test_ptr);\n\t\t\t\t\tif (Z_TYPE_PP(ptr) != IS_ARRAY) {\n\t\t\t\t\t\tzval_dtor(*ptr);\n\t\t\t\t\t\tarray_init(*ptr);\n\t\t\t\t\t}\n\t\t\t\t\tif (HASH_KEY_IS_STRING == zend_hash_get_current_key_ex(Z_ARRVAL_PP(zdata_ptr), &hkey.str, &hkey.len, &hkey.num, hkey.dup, NULL)) {\n\t\t\t\t\t\tzend_hash_update(Z_ARRVAL_PP(ptr), hkey.str, hkey.len, (void *) test_ptr, sizeof(zval *), (void *) &ptr);\n\t\t\t\t\t} else if (hkey.num) {\n\t\t\t\t\t\tzend_hash_index_update(Z_ARRVAL_PP(ptr), hkey.num, (void *) test_ptr, sizeof(zval *), (void *) &ptr);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tzend_hash_next_index_insert(Z_ARRVAL_PP(ptr), (void *) test_ptr, sizeof(zval *), (void *) &ptr);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n\t/* bubble up */\n\twhile (Z_TYPE_PP(ptr) == IS_ARRAY && SUCCESS == zend_hash_get_current_data(Z_ARRVAL_PP(ptr), (void *) &ptr));\n\t*current_param = ptr;\n}\n\nstatic void push_param(HashTable *params, php_http_params_state_t *state, const php_http_params_opts_t *opts TSRMLS_DC)\n{\n\tif (state->val.str) {\n\t\tif (!state->current.val) {\n\t\t\treturn;\n\t\t} else if (0 < (state->val.len = state->input.str - state->val.str)) {\n\t\t\tsanitize_value(opts->flags, state->val.str, state->val.len, *(state->current.val), state->rfc5987 TSRMLS_CC);\n\t\t} else {\n\t\t\tZVAL_EMPTY_STRING(*(state->current.val));\n\t\t}\n\t\tstate->rfc5987 = 0;\n\t} else if (state->arg.str) {\n\t\tif (0 < (state->arg.len = state->input.str - state->arg.str)) {\n\t\t\tzval *val, key;\n\t\t\tzend_bool rfc5987 = 0;\n\n\t\t\tINIT_PZVAL(&key);\n\t\t\tZVAL_NULL(&key);\n\t\t\tsanitize_key(opts->flags, state->arg.str, state->arg.len, &key, &rfc5987 TSRMLS_CC);\n\t\t\tstate->rfc5987 = rfc5987;\n\t\t\tif (Z_TYPE(key) == IS_STRING && Z_STRLEN(key)) {\n\t\t\t\tMAKE_STD_ZVAL(val);\n\t\t\t\tZVAL_TRUE(val);\n\n\t\t\t\tif (rfc5987) {\n\t\t\t\t\tzval **rfc;\n\n\t\t\t\t\tif (SUCCESS == zend_hash_find(Z_ARRVAL_PP(state->current.args), ZEND_STRS(\"*rfc5987*\"), (void *) &rfc)) {\n\t\t\t\t\t\tzend_symtable_update(Z_ARRVAL_PP(rfc), Z_STRVAL(key), Z_STRLEN(key) + 1, (void *) &val, sizeof(zval *), (void *) &state->current.val);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tzval *tmp;\n\n\t\t\t\t\t\tMAKE_STD_ZVAL(tmp);\n\t\t\t\t\t\tarray_init_size(tmp, 1);\n\t\t\t\t\t\tzend_symtable_update(Z_ARRVAL_P(tmp), Z_STRVAL(key), Z_STRLEN(key) + 1, (void *) &val, sizeof(zval *), (void *) &state->current.val);\n\t\t\t\t\t\tzend_symtable_update(Z_ARRVAL_PP(state->current.args), ZEND_STRS(\"*rfc5987*\"), (void *) &tmp, sizeof(zval *), NULL);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tzend_symtable_update(Z_ARRVAL_PP(state->current.args), Z_STRVAL(key), Z_STRLEN(key) + 1, (void *) &val, sizeof(zval *), (void *) &state->current.val);\n\t\t\t\t}\n\t\t\t}\n\t\t\tzval_dtor(&key);\n\t\t}\n\t} else if (state->param.str) {\n\t\tif (0 < (state->param.len = state->input.str - state->param.str)) {\n\t\t\tzval *prm, *arg, *val, *key;\n\t\t\tzend_bool rfc5987 = 0;\n\n\t\t\tMAKE_STD_ZVAL(key);\n\t\t\tZVAL_NULL(key);\n\t\t\tif (opts->flags & PHP_HTTP_PARAMS_RFC5988) {\n\t\t\t\tsanitize_rfc5988(state->param.str, state->param.len, key TSRMLS_CC);\n\t\t\t} else {\n\t\t\t\tsanitize_key(opts->flags, state->param.str, state->param.len, key, &rfc5987 TSRMLS_CC);\n\t\t\t\tstate->rfc5987 = rfc5987;\n\t\t\t}\n\t\t\tif (Z_TYPE_P(key) != IS_STRING) {\n\t\t\t\tmerge_param(params, key, &state->current.val, &state->current.args TSRMLS_CC);\n\t\t\t} else if (Z_STRLEN_P(key)) {\n\t\t\t\tMAKE_STD_ZVAL(prm);\n\t\t\t\tarray_init_size(prm, 2);\n\n\t\t\t\tMAKE_STD_ZVAL(val);\n\t\t\t\tif (opts->defval) {\n\t\t\t\t\tZVAL_COPY_VALUE(val, opts->defval);\n\t\t\t\t\tzval_copy_ctor(val);\n\t\t\t\t} else {\n\t\t\t\t\tZVAL_TRUE(val);\n\t\t\t\t}\n\t\t\t\tif (rfc5987 && (opts->flags & PHP_HTTP_PARAMS_RFC5987)) {\n\t\t\t\t\tzend_hash_update(Z_ARRVAL_P(prm), \"*rfc5987*\", sizeof(\"*rfc5987*\"), (void *) &val, sizeof(zval *), (void *) &state->current.val);\n\t\t\t\t} else {\n\t\t\t\t\tzend_hash_update(Z_ARRVAL_P(prm), \"value\", sizeof(\"value\"), (void *) &val, sizeof(zval *), (void *) &state->current.val);\n\t\t\t\t}\n\n\t\t\t\tMAKE_STD_ZVAL(arg);\n\t\t\t\tarray_init_size(arg, 3);\n\t\t\t\tzend_hash_update(Z_ARRVAL_P(prm), \"arguments\", sizeof(\"arguments\"), (void *) &arg, sizeof(zval *), (void *) &state->current.args);\n\n\t\t\t\tzend_symtable_update(params, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, (void *) &prm, sizeof(zval *), (void *) &state->current.param);\n\t\t\t}\n\t\t\tzval_ptr_dtor(&key);\n\t\t}\n\t}\n}\n\nstatic inline zend_bool check_str(const char *chk_str, size_t chk_len, const char *sep_str, size_t sep_len) {\n\treturn 0 < sep_len && chk_len >= sep_len && *chk_str == *sep_str && !memcmp(chk_str + 1, sep_str + 1, sep_len - 1);\n}\n\nstatic size_t check_sep(php_http_params_state_t *state, php_http_params_token_t **separators)\n{\n\tphp_http_params_token_t **sep = separators;\n\n\tif (state->quotes || state->escape) {\n\t\treturn 0;\n\t}\n\t\n\tif (sep) while (*sep) {\n\t\tif (check_str(state->input.str, state->input.len, (*sep)->str, (*sep)->len)) {\n\t\t\treturn (*sep)->len;\n\t\t}\n\t\t++sep;\n\t}\n\treturn 0;\n}\n\nstatic void skip_sep(size_t skip, php_http_params_state_t *state, php_http_params_token_t **param, php_http_params_token_t **arg, php_http_params_token_t **val TSRMLS_DC)\n{\n\tsize_t sep_len;\n\n\tstate->input.str += skip;\n\tstate->input.len -= skip;\n\n\twhile (\t(param && (sep_len = check_sep(state, param)))\n\t||\t\t(arg && (sep_len = check_sep(state, arg)))\n\t||\t\t(val && (sep_len = check_sep(state, val)))\n\t) {\n\t\tstate->input.str += sep_len;\n\t\tstate->input.len -= sep_len;\n\t}\n}\n\nHashTable *php_http_params_parse(HashTable *params, const php_http_params_opts_t *opts TSRMLS_DC)\n{\n\tphp_http_params_state_t state = {{NULL,0}, {NULL,0}, {NULL,0}, {NULL,0}, {NULL,NULL,NULL}, 0, 0};\n\n\tstate.input.str = opts->input.str;\n\tstate.input.len = opts->input.len;\n\n\tif (!params) {\n\t\tALLOC_HASHTABLE(params);\n\t\tZEND_INIT_SYMTABLE(params);\n\t}\n\n\twhile (state.input.len) {\n\t\tif ((opts->flags & PHP_HTTP_PARAMS_RFC5988) && !state.arg.str) {\n\t\t\tif (*state.input.str == '<') {\n\t\t\t\tstate.quotes = 1;\n\t\t\t} else if (*state.input.str == '>') {\n\t\t\t\tstate.quotes = 0;\n\t\t\t}\n\t\t} else if (*state.input.str == '\"' && !state.escape) {\n\t\t\tstate.quotes = !state.quotes;\n\t\t} else {\n\t\t\tstate.escape = (*state.input.str == '\\\\');\n\t\t}\n\t\t\n\t\tif (!state.param.str) {\n\t\t\t/* initialize */\n\t\t\tskip_sep(0, &state, opts->param, opts->arg, opts->val TSRMLS_CC);\n\t\t\tstate.param.str = state.input.str;\n\t\t} else {\n\t\t\tsize_t sep_len;\n\t\t\t/* are we at a param separator? */\n\t\t\tif (0 < (sep_len = check_sep(&state, opts->param))) {\n\t\t\t\tpush_param(params, &state, opts TSRMLS_CC);\n\n\t\t\t\tskip_sep(sep_len, &state, opts->param, opts->arg, opts->val TSRMLS_CC);\n\n\t\t\t\t/* start off with a new param */\n\t\t\t\tstate.param.str = state.input.str;\n\t\t\t\tstate.param.len = 0;\n\t\t\t\tstate.arg.str = NULL;\n\t\t\t\tstate.arg.len = 0;\n\t\t\t\tstate.val.str = NULL;\n\t\t\t\tstate.val.len = 0;\n\n\t\t\t\tcontinue;\n\n\t\t\t} else\n\t\t\t/* are we at an arg separator? */\n\t\t\tif (0 < (sep_len = check_sep(&state, opts->arg))) {\n\t\t\t\tpush_param(params, &state, opts TSRMLS_CC);\n\n\t\t\t\tskip_sep(sep_len, &state, NULL, opts->arg, opts->val TSRMLS_CC);\n\n\t\t\t\t/* continue with a new arg */\n\t\t\t\tstate.arg.str = state.input.str;\n\t\t\t\tstate.arg.len = 0;\n\t\t\t\tstate.val.str = NULL;\n\t\t\t\tstate.val.len = 0;\n\n\t\t\t\tcontinue;\n\n\t\t\t} else\n\t\t\t/* are we at a val separator? */\n\t\t\tif (0 < (sep_len = check_sep(&state, opts->val))) {\n\t\t\t\t/* only handle separator if we're not already reading in a val */\n\t\t\t\tif (!state.val.str) {\n\t\t\t\t\tpush_param(params, &state, opts TSRMLS_CC);\n\n\t\t\t\t\tskip_sep(sep_len, &state, NULL, NULL, opts->val TSRMLS_CC);\n\n\t\t\t\t\tstate.val.str = state.input.str;\n\t\t\t\t\tstate.val.len = 0;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (state.input.len) {\n\t\t\t++state.input.str;\n\t\t\t--state.input.len;\n\t\t}\n\t}\n\t/* finalize */\n\tpush_param(params, &state, opts TSRMLS_CC);\n\n\treturn params;\n}\n\nstatic inline void shift_key(php_http_buffer_t *buf, char *key_str, size_t key_len, const char *ass, size_t asl, unsigned flags TSRMLS_DC)\n{\n\tchar *str;\n\tsize_t len;\n\n\tif (buf->used) {\n\t\tphp_http_buffer_append(buf, ass, asl);\n\t}\n\n\tprepare_key(flags, key_str, key_len, &str, &len TSRMLS_CC);\n\tphp_http_buffer_append(buf, str, len);\n\tefree(str);\n}\n\nstatic inline void shift_rfc5987(php_http_buffer_t *buf, zval *zvalue, const char *vss, size_t vsl, unsigned flags TSRMLS_DC)\n{\n\tHashTable *ht = HASH_OF(zvalue);\n\tzval **zdata, *tmp;\n\tphp_http_array_hashkey_t key = php_http_array_hashkey_init(0);\n\n\tif (SUCCESS == zend_hash_get_current_data(ht, (void *) &zdata)\n\t&&\tHASH_KEY_NON_EXISTENT != (key.type = zend_hash_get_current_key_ex(ht, &key.str, &key.len, &key.num, key.dup, NULL))\n\t) {\n\t\tphp_http_array_hashkey_stringify(&key);\n\t\tphp_http_buffer_appendf(buf, \"*%.*sutf-8'%.*s'\",\n\t\t\t\t(int) (vsl > INT_MAX ? INT_MAX : vsl), vss,\n\t\t\t\t(int) (key.len > INT_MAX ? INT_MAX : key.len), key.str);\n\t\tphp_http_array_hashkey_stringfree(&key);\n\n\t\ttmp = php_http_zsep(1, IS_STRING, *zdata);\n\t\tprepare_value(flags | PHP_HTTP_PARAMS_URLENCODED, tmp TSRMLS_CC);\n\t\tphp_http_buffer_append(buf, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));\n\t\tzval_ptr_dtor(&tmp);\n\t}\n}\n\nstatic inline void shift_rfc5988(php_http_buffer_t *buf, char *key_str, size_t key_len, const char *ass, size_t asl, unsigned flags TSRMLS_DC)\n{\n\tchar *str;\n\tsize_t len;\n\n\tif (buf->used) {\n\t\tphp_http_buffer_append(buf, ass, asl);\n\t}\n\n\tprepare_key(flags, key_str, key_len, &str, &len TSRMLS_CC);\n\tphp_http_buffer_appends(buf, \"<\");\n\tphp_http_buffer_append(buf, str, len);\n\tphp_http_buffer_appends(buf, \">\");\n\tefree(str);\n}\n\nstatic inline void shift_rfc5988_val(php_http_buffer_t *buf, zval *zv, const char *vss, size_t vsl, unsigned flags TSRMLS_DC)\n{\n\tzval *tmp = php_http_zsep(1, IS_STRING, zv);\n\n\tquote_string(tmp, 1 TSRMLS_CC);\n\tphp_http_buffer_append(buf, vss, vsl);\n\tphp_http_buffer_append(buf, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));\n\n\tzval_ptr_dtor(&tmp);\n}\n\nstatic inline void shift_val(php_http_buffer_t *buf, zval *zvalue, const char *vss, size_t vsl, unsigned flags TSRMLS_DC)\n{\n\tif (Z_TYPE_P(zvalue) != IS_BOOL) {\n\t\tzval *tmp = php_http_zsep(1, IS_STRING, zvalue);\n\n\t\tprepare_value(flags, tmp TSRMLS_CC);\n\t\tphp_http_buffer_append(buf, vss, vsl);\n\t\tphp_http_buffer_append(buf, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp));\n\n\t\tzval_ptr_dtor(&tmp);\n\t} else if (!Z_BVAL_P(zvalue)) {\n\t\tphp_http_buffer_append(buf, vss, vsl);\n\t\tphp_http_buffer_appends(buf, \"0\");\n\t}\n}\n\nstatic void shift_arg(php_http_buffer_t *buf, char *key_str, size_t key_len, zval *zvalue, const char *ass, size_t asl, const char *vss, size_t vsl, unsigned flags TSRMLS_DC)\n{\n\tif (Z_TYPE_P(zvalue) == IS_ARRAY || Z_TYPE_P(zvalue) == IS_OBJECT) {\n\t\tHashPosition pos;\n\t\tphp_http_array_hashkey_t key = php_http_array_hashkey_init(0);\n\t\tzval **val;\n\t\tzend_bool rfc5987 = !strcmp(key_str, \"*rfc5987*\");\n\n\t\tif (!rfc5987) {\n\t\t\tshift_key(buf, key_str, key_len, ass, asl, flags TSRMLS_CC);\n\t\t}\n\t\tFOREACH_KEYVAL(pos, zvalue, key, val) {\n\t\t\t/* did you mean recursion? */\n\t\t\tphp_http_array_hashkey_stringify(&key);\n\t\t\tif (rfc5987 && (Z_TYPE_PP(val) == IS_ARRAY || Z_TYPE_PP(val) == IS_OBJECT)) {\n\t\t\t\tshift_key(buf, key.str, key.len-1, ass, asl, flags TSRMLS_CC);\n\t\t\t\tshift_rfc5987(buf, *val, vss, vsl, flags TSRMLS_CC);\n\t\t\t} else {\n\t\t\t\tshift_arg(buf, key.str, key.len-1, *val, ass, asl, vss, vsl, flags TSRMLS_CC);\n\t\t\t}\n\t\t\tphp_http_array_hashkey_stringfree(&key);\n\t\t}\n\t} else {\n\t\tshift_key(buf, key_str, key_len, ass, asl, flags TSRMLS_CC);\n\n\t\tif (flags & PHP_HTTP_PARAMS_RFC5988) {\n\t\t\tswitch (key_len) {\n\t\t\tcase lenof(\"rel\"):\n\t\t\tcase lenof(\"title\"):\n\t\t\tcase lenof(\"anchor\"):\n\t\t\t\t/* some args must be quoted */\n\t\t\t\tif (0 <= php_http_select_str(key_str, 3, \"rel\", \"title\", \"anchor\")) {\n\t\t\t\t\tshift_rfc5988_val(buf, zvalue, vss, vsl, flags TSRMLS_CC);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tshift_val(buf, zvalue, vss, vsl, flags TSRMLS_CC);\n\t}\n}\n\nstatic void shift_param(php_http_buffer_t *buf, char *key_str, size_t key_len, zval *zvalue, const char *pss, size_t psl, const char *ass, size_t asl, const char *vss, size_t vsl, unsigned flags, zend_bool rfc5987 TSRMLS_DC)\n{\n\tif (Z_TYPE_P(zvalue) == IS_ARRAY || Z_TYPE_P(zvalue) == IS_OBJECT) {\n\t\t/* treat as arguments, unless we care for dimensions or rfc5987 */\n\t\tif (flags & PHP_HTTP_PARAMS_DIMENSION) {\n\t\t\tphp_http_buffer_t *keybuf = php_http_buffer_from_string(key_str, key_len);\n\t\t\tprepare_dimension(buf, keybuf, zvalue, pss, psl, vss, vsl, flags TSRMLS_CC);\n\t\t\tphp_http_buffer_free(&keybuf);\n\t\t} else if (rfc5987) {\n\t\t\tshift_key(buf, key_str, key_len, pss, psl, flags TSRMLS_CC);\n\t\t\tshift_rfc5987(buf, zvalue, vss, vsl, flags TSRMLS_CC);\n\t\t} else {\n\t\t\tshift_arg(buf, key_str, key_len, zvalue, ass, asl, vss, vsl, flags TSRMLS_CC);\n\t\t}\n\t} else {\n\t\tif (flags & PHP_HTTP_PARAMS_RFC5988) {\n\t\t\tshift_rfc5988(buf, key_str, key_len, pss, psl, flags TSRMLS_CC);\n\t\t} else {\n\t\t\tshift_key(buf, key_str, key_len, pss, psl, flags TSRMLS_CC);\n\t\t}\n\t\tshift_val(buf, zvalue, vss, vsl, flags TSRMLS_CC);\n\t}\n}\n\nphp_http_buffer_t *php_http_params_to_string(php_http_buffer_t *buf, HashTable *params, const char *pss, size_t psl, const char *ass, size_t asl, const char *vss, size_t vsl, unsigned flags TSRMLS_DC)\n{\n\tzval **zparam;\n\tHashPosition pos, pos1;\n\tphp_http_array_hashkey_t key = php_http_array_hashkey_init(0), key1 = php_http_array_hashkey_init(0);\n\tzend_bool rfc5987 = 0;\n\n\tif (!buf) {\n\t\tbuf = php_http_buffer_init(NULL);\n\t}\n\n\tFOREACH_HASH_KEYVAL(pos, params, key, zparam) {\n\t\tzval **zvalue, **zargs;\n\n\t\tif (Z_TYPE_PP(zparam) != IS_ARRAY) {\n\t\t\tzvalue = zparam;\n\t\t} else {\n\t\t\tif (SUCCESS != zend_hash_find(Z_ARRVAL_PP(zparam), ZEND_STRS(\"value\"), (void *) &zvalue)) {\n\t\t\t\tif (SUCCESS != zend_hash_find(Z_ARRVAL_PP(zparam), ZEND_STRS(\"*rfc5987*\"), (void *) &zvalue)) {\n\t\t\t\t\tzvalue = zparam;\n\t\t\t\t} else {\n\t\t\t\t\trfc5987 = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tphp_http_array_hashkey_stringify(&key);\n\t\tshift_param(buf, key.str, key.len - 1, *zvalue, pss, psl, ass, asl, vss, vsl, flags, rfc5987 TSRMLS_CC);\n\t\tphp_http_array_hashkey_stringfree(&key);\n\n\t\tif (Z_TYPE_PP(zparam) == IS_ARRAY && SUCCESS != zend_hash_find(Z_ARRVAL_PP(zparam), ZEND_STRS(\"arguments\"), (void *) &zvalue)) {\n\t\t\tif (zvalue == zparam) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tzvalue = zparam;\n\t\t}\n\n\t\tif (Z_TYPE_PP(zvalue) == IS_ARRAY) {\n\t\t\tFOREACH_KEYVAL(pos1, *zvalue, key1, zargs) {\n\t\t\t\tif (zvalue == zparam && key1.type == HASH_KEY_IS_STRING && !strcmp(key1.str, \"value\")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tphp_http_array_hashkey_stringify(&key1);\n\t\t\t\tshift_arg(buf, key1.str, key1.len - 1, *zargs, ass, asl, vss, vsl, flags TSRMLS_CC);\n\t\t\t\tphp_http_array_hashkey_stringfree(&key1);\n\t\t\t}\n\t\t}\n\t}\n\n\tphp_http_buffer_shrink(buf);\n\tphp_http_buffer_fix(buf);\n\n\treturn buf;\n}\n\nphp_http_params_token_t **php_http_params_separator_init(zval *zv TSRMLS_DC)\n{\n\tzval **sep;\n\tHashPosition pos;\n\tphp_http_params_token_t **ret, **tmp;\n\n\tif (!zv) {\n\t\treturn NULL;\n\t}\n\n\tzv = php_http_ztyp(IS_ARRAY, zv);\n\tret = ecalloc(zend_hash_num_elements(Z_ARRVAL_P(zv)) + 1, sizeof(*ret));\n\n\ttmp = ret;\n\tFOREACH_VAL(pos, zv, sep) {\n\t\tzval *zt = php_http_ztyp(IS_STRING, *sep);\n\n\t\tif (Z_STRLEN_P(zt)) {\n\t\t\t*tmp = emalloc(sizeof(**tmp));\n\t\t\t(*tmp)->str = estrndup(Z_STRVAL_P(zt), (*tmp)->len = Z_STRLEN_P(zt));\n\t\t\t++tmp;\n\t\t}\n\t\tzval_ptr_dtor(&zt);\n\t}\n\tzval_ptr_dtor(&zv);\n\n\t*tmp = NULL;\n\treturn ret;\n}\n\nvoid php_http_params_separator_free(php_http_params_token_t **separator)\n{\n\tphp_http_params_token_t **sep = separator;\n\tif (sep) {\n\t\twhile (*sep) {\n\t\t\tPTR_FREE((*sep)->str);\n\t\t\tefree(*sep);\n\t\t\t++sep;\n\t\t}\n\t\tefree(separator);\n\t}\n}\n\nZEND_BEGIN_ARG_INFO_EX(ai_HttpParams___construct, 0, 0, 0)\n\tZEND_ARG_INFO(0, params)\n\tZEND_ARG_INFO(0, param_sep)\n\tZEND_ARG_INFO(0, arg_sep)\n\tZEND_ARG_INFO(0, val_sep)\n\tZEND_ARG_INFO(0, flags)\nZEND_END_ARG_INFO();\nPHP_METHOD(HttpParams, __construct)\n{\n\tzval *zcopy, *zparams = NULL, *param_sep = NULL, *arg_sep = NULL, *val_sep = NULL;\n\tlong flags = PHP_HTTP_PARAMS_DEFAULT;\n\tzend_error_handling zeh;\n\n\tphp_http_expect(SUCCESS == zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|z!/z/z/z/l\", &zparams, &param_sep, &arg_sep, &val_sep, &flags), invalid_arg, return);\n\n\tzend_replace_error_handling(EH_THROW, php_http_exception_runtime_class_entry, &zeh TSRMLS_CC);\n\t{\n\t\tswitch (ZEND_NUM_ARGS()) {\n\t\t\tcase 5:\n\t\t\t\tzend_update_property_long(php_http_params_class_entry, getThis(), ZEND_STRL(\"flags\"), flags TSRMLS_CC);\n\t\t\t\t/* no break */\n\t\t\tcase 4:\n\t\t\t\tzend_update_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"val_sep\"), val_sep TSRMLS_CC);\n\t\t\t\t/* no break */\n\t\t\tcase 3:\n\t\t\t\tzend_update_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"arg_sep\"), arg_sep TSRMLS_CC);\n\t\t\t\t/* no break */\n\t\t\tcase 2:\n\t\t\t\tzend_update_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"param_sep\"), param_sep TSRMLS_CC);\n\t\t\t\t/* no break */\n\t\t}\n\n\t\tif (zparams) {\n\t\t\tswitch (Z_TYPE_P(zparams)) {\n\t\t\t\tcase IS_OBJECT:\n\t\t\t\tcase IS_ARRAY:\n\t\t\t\t\tzcopy = php_http_zsep(1, IS_ARRAY, zparams);\n\t\t\t\t\tzend_update_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), zcopy TSRMLS_CC);\n\t\t\t\t\tzval_ptr_dtor(&zcopy);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tzcopy = php_http_ztyp(IS_STRING, zparams);\n\t\t\t\t\tif (Z_STRLEN_P(zcopy)) {\n\t\t\t\t\t\tphp_http_params_opts_t opts = {\n\t\t\t\t\t\t\t{Z_STRVAL_P(zcopy), Z_STRLEN_P(zcopy)},\n\t\t\t\t\t\t\tphp_http_params_separator_init(zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"param_sep\"), 0 TSRMLS_CC) TSRMLS_CC),\n\t\t\t\t\t\t\tphp_http_params_separator_init(zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"arg_sep\"), 0 TSRMLS_CC) TSRMLS_CC),\n\t\t\t\t\t\t\tphp_http_params_separator_init(zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"val_sep\"), 0 TSRMLS_CC) TSRMLS_CC),\n\t\t\t\t\t\t\tNULL, flags\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tMAKE_STD_ZVAL(zparams);\n\t\t\t\t\t\tarray_init(zparams);\n\t\t\t\t\t\tphp_http_params_parse(Z_ARRVAL_P(zparams), &opts TSRMLS_CC);\n\t\t\t\t\t\tzend_update_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), zparams TSRMLS_CC);\n\t\t\t\t\t\tzval_ptr_dtor(&zparams);\n\n\t\t\t\t\t\tphp_http_params_separator_free(opts.param);\n\t\t\t\t\t\tphp_http_params_separator_free(opts.arg);\n\t\t\t\t\t\tphp_http_params_separator_free(opts.val);\n\t\t\t\t\t}\n\t\t\t\t\tzval_ptr_dtor(&zcopy);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tMAKE_STD_ZVAL(zparams);\n\t\t\tarray_init(zparams);\n\t\t\tzend_update_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), zparams TSRMLS_CC);\n\t\t\tzval_ptr_dtor(&zparams);\n\t\t}\n\t}\n\tzend_restore_error_handling(&zeh TSRMLS_CC);\n}\n\nZEND_BEGIN_ARG_INFO_EX(ai_HttpParams_toArray, 0, 0, 0)\nZEND_END_ARG_INFO();\nPHP_METHOD(HttpParams, toArray)\n{\n\tzval *zparams;\n\n\tif (SUCCESS != zend_parse_parameters_none()) {\n\t\treturn;\n\t}\n\tzparams = zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), 0 TSRMLS_CC);\n\tRETURN_ZVAL(zparams, 1, 0);\n}\n\nZEND_BEGIN_ARG_INFO_EX(ai_HttpParams_toString, 0, 0, 0)\nZEND_END_ARG_INFO();\nPHP_METHOD(HttpParams, toString)\n{\n\tzval **tmp, *zparams, *zpsep, *zasep, *zvsep, *zflags;\n\tphp_http_buffer_t buf;\n\n\tzparams = php_http_zsep(1, IS_ARRAY, zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), 0 TSRMLS_CC));\n\tzflags = php_http_ztyp(IS_LONG, zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"flags\"), 0 TSRMLS_CC));\n\n\tzpsep = zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"param_sep\"), 0 TSRMLS_CC);\n\tif (Z_TYPE_P(zpsep) == IS_ARRAY && SUCCESS == zend_hash_get_current_data(Z_ARRVAL_P(zpsep), (void *) &tmp)) {\n\t\tzpsep = php_http_ztyp(IS_STRING, *tmp);\n\t} else {\n\t\tzpsep = php_http_ztyp(IS_STRING, zpsep);\n\t}\n\tzasep = zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"arg_sep\"), 0 TSRMLS_CC);\n\tif (Z_TYPE_P(zasep) == IS_ARRAY && SUCCESS == zend_hash_get_current_data(Z_ARRVAL_P(zasep), (void *) &tmp)) {\n\t\tzasep = php_http_ztyp(IS_STRING, *tmp);\n\t} else {\n\t\tzasep = php_http_ztyp(IS_STRING, zasep);\n\t}\n\tzvsep = zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"val_sep\"), 0 TSRMLS_CC);\n\tif (Z_TYPE_P(zvsep) == IS_ARRAY && SUCCESS == zend_hash_get_current_data(Z_ARRVAL_P(zvsep), (void *) &tmp)) {\n\t\tzvsep = php_http_ztyp(IS_STRING, *tmp);\n\t} else {\n\t\tzvsep = php_http_ztyp(IS_STRING, zvsep);\n\t}\n\n\tphp_http_buffer_init(&buf);\n\tphp_http_params_to_string(&buf, Z_ARRVAL_P(zparams), Z_STRVAL_P(zpsep), Z_STRLEN_P(zpsep), Z_STRVAL_P(zasep), Z_STRLEN_P(zasep), Z_STRVAL_P(zvsep), Z_STRLEN_P(zvsep), Z_LVAL_P(zflags) TSRMLS_CC);\n\n\tzval_ptr_dtor(&zparams);\n\tzval_ptr_dtor(&zpsep);\n\tzval_ptr_dtor(&zasep);\n\tzval_ptr_dtor(&zvsep);\n\tzval_ptr_dtor(&zflags);\n\n\tRETVAL_PHP_HTTP_BUFFER_VAL(&buf);\n}\n\nZEND_BEGIN_ARG_INFO_EX(ai_HttpParams_offsetExists, 0, 0, 1)\n\tZEND_ARG_INFO(0, name)\nZEND_END_ARG_INFO();\nPHP_METHOD(HttpParams, offsetExists)\n{\n\tchar *name_str;\n\tint name_len;\n\tzval **zparam, *zparams;\n\n\tif (SUCCESS != zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &name_str, &name_len)) {\n\t\treturn;\n\t}\n\n\tzparams = php_http_ztyp(IS_ARRAY, zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), 0 TSRMLS_CC));\n\n\tif (SUCCESS == zend_symtable_find(Z_ARRVAL_P(zparams), name_str, name_len + 1, (void *) &zparam)) {\n\t\tRETVAL_BOOL(Z_TYPE_PP(zparam) != IS_NULL);\n\t} else {\n\t\tRETVAL_FALSE;\n\t}\n\tzval_ptr_dtor(&zparams);\n}\n\nZEND_BEGIN_ARG_INFO_EX(ai_HttpParams_offsetGet, 0, 0, 1)\n\tZEND_ARG_INFO(0, name)\nZEND_END_ARG_INFO();\nPHP_METHOD(HttpParams, offsetGet)\n{\n\tchar *name_str;\n\tint name_len;\n\tzval **zparam, *zparams;\n\n\tif (SUCCESS != zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &name_str, &name_len)) {\n\t\treturn;\n\t}\n\n\tzparams = php_http_ztyp(IS_ARRAY, zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), 0 TSRMLS_CC));\n\n\tif (SUCCESS == zend_symtable_find(Z_ARRVAL_P(zparams), name_str, name_len + 1, (void *) &zparam)) {\n\t\tRETVAL_ZVAL(*zparam, 1, 0);\n\t}\n\n\tzval_ptr_dtor(&zparams);\n}\n\nZEND_BEGIN_ARG_INFO_EX(ai_HttpParams_offsetUnset, 0, 0, 1)\n\tZEND_ARG_INFO(0, name)\nZEND_END_ARG_INFO();\nPHP_METHOD(HttpParams, offsetUnset)\n{\n\tchar *name_str;\n\tint name_len;\n\tzval *zparams;\n\n\tif (SUCCESS != zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &name_str, &name_len)) {\n\t\treturn;\n\t}\n\n\tzparams = php_http_zsep(1, IS_ARRAY, zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), 0 TSRMLS_CC));\n\n\tzend_symtable_del(Z_ARRVAL_P(zparams), name_str, name_len + 1);\n\tzend_update_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), zparams TSRMLS_CC);\n\n\tzval_ptr_dtor(&zparams);\n}\n\nZEND_BEGIN_ARG_INFO_EX(ai_HttpParams_offsetSet, 0, 0, 2)\n\tZEND_ARG_INFO(0, name)\n\tZEND_ARG_INFO(0, value)\nZEND_END_ARG_INFO();\nPHP_METHOD(HttpParams, offsetSet)\n{\n\tzval *nvalue;\n\tchar *name_str;\n\tint name_len;\n\tzval **zparam, *zparams;\n\n\tif (SUCCESS != zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"sz\", &name_str, &name_len, &nvalue)) {\n\t\treturn;\n\t}\n\n\tzparams = php_http_zsep(1, IS_ARRAY, zend_read_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), 0 TSRMLS_CC));\n\n\tif (name_len) {\n\t\tif (Z_TYPE_P(nvalue) == IS_ARRAY) {\n\t\t\tzval *new_zparam;\n\n\t\t\tif (SUCCESS == zend_symtable_find(Z_ARRVAL_P(zparams), name_str, name_len + 1, (void *) &zparam)) {\n\t\t\t\tnew_zparam = php_http_zsep(1, IS_ARRAY, *zparam);\n\t\t\t\tarray_join(Z_ARRVAL_P(nvalue), Z_ARRVAL_P(new_zparam), 0, 0);\n\t\t\t} else {\n\t\t\t\tnew_zparam = nvalue;\n\t\t\t\tZ_ADDREF_P(new_zparam);\n\t\t\t}\n\t\t\tadd_assoc_zval_ex(zparams, name_str, name_len + 1, new_zparam);\n\t\t} else {\n\t\t\tzval *tmp;\n\n\t\t\tif (SUCCESS == zend_symtable_find(Z_ARRVAL_P(zparams), name_str, name_len + 1, (void *) &zparam)) {\n\t\t\t\ttmp = php_http_zsep(1, IS_ARRAY, *zparam);\n\t\t\t} else {\n\t\t\t\tMAKE_STD_ZVAL(tmp);\n\t\t\t\tarray_init(tmp);\n\t\t\t}\n\n\t\t\tZ_ADDREF_P(nvalue);\n\t\t\tadd_assoc_zval_ex(tmp, ZEND_STRS(\"value\"), nvalue);\n\t\t\tadd_assoc_zval_ex(zparams, name_str, name_len + 1, tmp);\n\t\t}\n\t} else {\n\t\tzval *tmp = php_http_ztyp(IS_STRING, nvalue), *arr;\n\n\t\tMAKE_STD_ZVAL(arr);\n\t\tarray_init(arr);\n\t\tadd_assoc_bool_ex(arr, ZEND_STRS(\"value\"), 1);\n\t\tadd_assoc_zval_ex(zparams, Z_STRVAL_P(tmp), Z_STRLEN_P(tmp) + 1, arr);\n\t\tzval_ptr_dtor(&tmp);\n\t}\n\n\tzend_update_property(php_http_params_class_entry, getThis(), ZEND_STRL(\"params\"), zparams TSRMLS_CC);\n\tzval_ptr_dtor(&zparams);\n}\n\nstatic zend_function_entry php_http_params_methods[] = {\n\tPHP_ME(HttpParams, __construct,   ai_HttpParams___construct,   ZEND_ACC_PUBLIC|ZEND_ACC_CTOR|ZEND_ACC_FINAL)\n\n\tPHP_ME(HttpParams, toArray,       ai_HttpParams_toArray,       ZEND_ACC_PUBLIC)\n\tPHP_ME(HttpParams, toString,      ai_HttpParams_toString,      ZEND_ACC_PUBLIC)\n\tZEND_MALIAS(HttpParams, __toString, toString, ai_HttpParams_toString, ZEND_ACC_PUBLIC)\n\n\tPHP_ME(HttpParams, offsetExists,  ai_HttpParams_offsetExists,  ZEND_ACC_PUBLIC)\n\tPHP_ME(HttpParams, offsetUnset,   ai_HttpParams_offsetUnset,   ZEND_ACC_PUBLIC)\n\tPHP_ME(HttpParams, offsetSet,     ai_HttpParams_offsetSet,     ZEND_ACC_PUBLIC)\n\tPHP_ME(HttpParams, offsetGet,     ai_HttpParams_offsetGet,     ZEND_ACC_PUBLIC)\n\n\tEMPTY_FUNCTION_ENTRY\n};\n\nzend_class_entry *php_http_params_class_entry;\n\nPHP_MINIT_FUNCTION(http_params)\n{\n\tzend_class_entry ce = {0};\n\n\tINIT_NS_CLASS_ENTRY(ce, \"http\", \"Params\", php_http_params_methods);\n\tphp_http_params_class_entry = zend_register_internal_class(&ce TSRMLS_CC);\n\tphp_http_params_class_entry->create_object = php_http_params_object_new;\n\tzend_class_implements(php_http_params_class_entry TSRMLS_CC, 1, zend_ce_arrayaccess);\n\n\tzend_declare_class_constant_stringl(php_http_params_class_entry, ZEND_STRL(\"DEF_PARAM_SEP\"), ZEND_STRL(\",\") TSRMLS_CC);\n\tzend_declare_class_constant_stringl(php_http_params_class_entry, ZEND_STRL(\"DEF_ARG_SEP\"), ZEND_STRL(\";\") TSRMLS_CC);\n\tzend_declare_class_constant_stringl(php_http_params_class_entry, ZEND_STRL(\"DEF_VAL_SEP\"), ZEND_STRL(\"=\") TSRMLS_CC);\n\tzend_declare_class_constant_stringl(php_http_params_class_entry, ZEND_STRL(\"COOKIE_PARAM_SEP\"), ZEND_STRL(\"\") TSRMLS_CC);\n\n\tzend_declare_class_constant_long(php_http_params_class_entry, ZEND_STRL(\"PARSE_RAW\"), PHP_HTTP_PARAMS_RAW TSRMLS_CC);\n\tzend_declare_class_constant_long(php_http_params_class_entry, ZEND_STRL(\"PARSE_ESCAPED\"), PHP_HTTP_PARAMS_ESCAPED TSRMLS_CC);\n\tzend_declare_class_constant_long(php_http_params_class_entry, ZEND_STRL(\"PARSE_URLENCODED\"), PHP_HTTP_PARAMS_URLENCODED TSRMLS_CC);\n\tzend_declare_class_constant_long(php_http_params_class_entry, ZEND_STRL(\"PARSE_DIMENSION\"), PHP_HTTP_PARAMS_DIMENSION TSRMLS_CC);\n\tzend_declare_class_constant_long(php_http_params_class_entry, ZEND_STRL(\"PARSE_RFC5987\"), PHP_HTTP_PARAMS_RFC5987 TSRMLS_CC);\n\tzend_declare_class_constant_long(php_http_params_class_entry, ZEND_STRL(\"PARSE_RFC5988\"), PHP_HTTP_PARAMS_RFC5988 TSRMLS_CC);\n\tzend_declare_class_constant_long(php_http_params_class_entry, ZEND_STRL(\"PARSE_DEFAULT\"), PHP_HTTP_PARAMS_DEFAULT TSRMLS_CC);\n\tzend_declare_class_constant_long(php_http_params_class_entry, ZEND_STRL(\"PARSE_QUERY\"), PHP_HTTP_PARAMS_QUERY TSRMLS_CC);\n\n\tzend_declare_property_null(php_http_params_class_entry, ZEND_STRL(\"params\"), ZEND_ACC_PUBLIC TSRMLS_CC);\n\tzend_declare_property_stringl(php_http_params_class_entry, ZEND_STRL(\"param_sep\"), ZEND_STRL(\",\"), ZEND_ACC_PUBLIC TSRMLS_CC);\n\tzend_declare_property_stringl(php_http_params_class_entry, ZEND_STRL(\"arg_sep\"), ZEND_STRL(\";\"), ZEND_ACC_PUBLIC TSRMLS_CC);\n\tzend_declare_property_stringl(php_http_params_class_entry, ZEND_STRL(\"val_sep\"), ZEND_STRL(\"=\"), ZEND_ACC_PUBLIC TSRMLS_CC);\n\tzend_declare_property_long(php_http_params_class_entry, ZEND_STRL(\"flags\"), PHP_HTTP_PARAMS_DEFAULT, ZEND_ACC_PUBLIC TSRMLS_CC);\n\n\treturn SUCCESS;\n}\n\n/*\n * Local variables:\n * tab-width: 4\n * c-basic-offset: 4\n * End:\n * vim600: noet sw=4 ts=4 fdm=marker\n * vim<600: noet sw=4 ts=4\n */\n\n"], "filenames": [".gitignore", "package.xml", "src/php_http_params.c"], "buggy_code_start_loc": [44, 34, 473], "buggy_code_end_loc": [44, 187, 474], "fixing_code_start_loc": [45, 34, 473], "fixing_code_end_loc": [78, 193, 474], "type": "CWE-704", "message": "A type confusion vulnerability in the merge_param() function of php_http_params.c in PHP's pecl-http extension 3.1.0beta2 (PHP 7) and earlier as well as 2.6.0beta2 (PHP 5) and earlier allows attackers to crash PHP and possibly execute arbitrary code via crafted HTTP requests.", "other": {"cve": {"id": "CVE-2016-7398", "sourceIdentifier": "cve@mitre.org", "published": "2019-09-06T19:15:11.387", "lastModified": "2019-09-20T21:15:11.120", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "A type confusion vulnerability in the merge_param() function of php_http_params.c in PHP's pecl-http extension 3.1.0beta2 (PHP 7) and earlier as well as 2.6.0beta2 (PHP 5) and earlier allows attackers to crash PHP and possibly execute arbitrary code via crafted HTTP requests."}, {"lang": "es", "value": "Una vulnerabilidad de confusi\u00f3n de tipo en la funci\u00f3n merge_param() del archivo php_http_params.c en la extensi\u00f3n pecl-http de PHP versi\u00f3n 3.1.0beta2 (PHP 7) y anteriores, as\u00ed como tambi\u00e9n versi\u00f3n 2.6.0beta2 (PHP 5) y anteriores, permite a atacantes bloquear PHP y posiblemente ejecutar c\u00f3digo arbitrario por medio de peticiones HTTP creadas."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-704"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:php:ext-http:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.5.6", "matchCriteriaId": "14147AA2-88B6-4FB1-85D2-B5E6303A01E1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:ext-http:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.0.0", "versionEndIncluding": "3.0.1", "matchCriteriaId": "5F6F5342-02E9-47D8-9A78-C5500316CF32"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:ext-http:2.6.0:-:*:*:*:*:*:*", "matchCriteriaId": "002D0A5C-AC9C-4834-853F-E654007B6E9B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:ext-http:2.6.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "2553E007-B037-4864-8422-07E258479C66"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:ext-http:2.6.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "665FFBDD-7A2C-49C2-A773-93F4C359FE89"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:ext-http:2.6.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "6D58B96D-6D9B-47FB-AE57-D933F08B3C1B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:ext-http:3.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "EB488CE3-0E47-4A13-9B8A-841DEE172E32"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:ext-http:3.1.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "D31B18B2-5326-489D-99A5-CFB9524CAB12"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:ext-http:3.1.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "C15E183A-FFF4-4F72-8961-F8A7194B9E13"}, {"vulnerable": true, "criteria": "cpe:2.3:a:php:ext-http:3.1.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "623E4BBF-D8E3-48F4-AC70-4AD4AD232BD5"}]}]}], "references": [{"url": "https://bugs.php.net/bug.php?id=73055", "source": "cve@mitre.org", "tags": ["Exploit", "Mailing List", "Vendor Advisory"]}, {"url": "https://bugs.php.net/bug.php?id=73055&edit=1", "source": "cve@mitre.org", "tags": ["Exploit", "Vendor Advisory"]}, {"url": "https://github.com/m6w6/ext-http/commit/17137d4ab1ce81a2cee0fae842340a344ef3da83", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2019/09/msg00022.html", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/m6w6/ext-http/commit/17137d4ab1ce81a2cee0fae842340a344ef3da83"}}