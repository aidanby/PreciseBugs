{"buggy_code": ["<?php\n/**\n * Donors Query\n *\n * @package     Give\n * @subpackage  Classes/Stats\n * @copyright   Copyright (c) 2017, GiveWP\n * @license     https://opensource.org/licenses/gpl-license GNU Public License\n * @since       1.8.14\n */\n\n// Exit if accessed directly.\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Give_Donors_Query Class\n *\n * This class is for retrieving donors data.\n *\n * Donors can be retrieved for date ranges and pre-defined periods.\n *\n * @since 1.8.14\n */\nclass Give_Donors_Query {\n\n\t/**\n\t * The args to pass to the give_get_donors() query\n\t *\n\t * @since  1.8.14\n\t * @access public\n\t *\n\t * @var    array\n\t */\n\tpublic $args = array();\n\n\t/**\n\t * The donors found based on the criteria set\n\t *\n\t * @since  1.8.14\n\t * @access public\n\t *\n\t * @var    array\n\t */\n\tpublic $donors = array();\n\n\t/**\n\t * The donors found based on the criteria set\n\t *\n\t * @since  1.8.14\n\t * @access public\n\t *\n\t * @var    string\n\t */\n\tpublic $table_name = '';\n\n\t/**\n\t * The donors found based on the criteria set\n\t *\n\t * @since  1.8.14\n\t * @access public\n\t *\n\t * @var    string\n\t */\n\tpublic $meta_table_name = '';\n\n\t/**\n\t * The donors found based on the criteria set\n\t *\n\t * @since  1.8.14\n\t * @access public\n\t *\n\t * @var    string\n\t */\n\tpublic $meta_type = '';\n\n\t/**\n\t * Preserve args\n\t *\n\t * @since  2.4.0\n\t * @access public\n\t *\n\t * @var    array\n\t */\n\tpublic $_args = array();\n\n\t/**\n\t * Default query arguments.\n\t *\n\t * Not all of these are valid arguments that can be passed to WP_Query. The ones that are not, are modified before\n\t * the query is run to convert them to the proper syntax.\n\t *\n\t * @since  1.8.14\n\t * @access public\n\t *\n\t * @param  $args array The array of arguments that can be passed in and used for setting up this payment query.\n\t */\n\tpublic function __construct( $args = array() ) {\n\t\t$defaults = array(\n\t\t\t'number'          => 20,\n\t\t\t'offset'          => 0,\n\t\t\t'paged'           => 1,\n\t\t\t'orderby'         => 'id',\n\t\t\t'order'           => 'DESC',\n\t\t\t'user'            => null,\n\t\t\t'email'           => null,\n\t\t\t'donor'           => null,\n\t\t\t'meta_query'      => array(),\n\t\t\t'date_query'      => array(),\n\t\t\t's'               => null,\n\t\t\t'fields'          => 'all', // Supports donors (all fields) or valid column as string or array list.\n\t\t\t'count'           => false,\n\t\t\t'give_forms'      => array(),\n\t\t\t'start_date'      => false,\n\t\t\t'end_date'        => false,\n\n\t\t\t/**\n\t\t\t * donation_amount will contain value like:\n\t\t\t * array(\n\t\t\t *     'compare' => *compare symbol* (by default set to > )\n\t\t\t *     'amount'  => *numeric_value*\n\t\t\t * )\n\t\t\t *\n\t\t\t * You can also pass number value to this param then compare symbol will auto set to >\n\t\t\t */\n\t\t\t'donation_amount' => array(),\n\t\t);\n\n\t\t$this->args            = $this->_args = wp_parse_args( $args, $defaults );\n\t\t$this->table_name      = Give()->donors->table_name;\n\t\t$this->meta_table_name = Give()->donor_meta->table_name;\n\t\t$this->meta_type       = Give()->donor_meta->meta_type;\n\n\t\t$this->date_filter_pre();\n\t}\n\n\t/**\n\t * Modify the query/query arguments before we retrieve donors.\n\t *\n\t * @since  1.8.14\n\t * @access public\n\t *\n\t * @return void\n\t */\n\tpublic function init() {\n\t}\n\n\n\t/**\n\t * Retrieve donors.\n\t *\n\t * The query can be modified in two ways; either the action before the\n\t * query is run, or the filter on the arguments (existing mainly for backwards\n\t * compatibility).\n\t *\n\t * @since  1.8.14\n\t * @access public\n\t *\n\t * @global wpdb $wpdb\n\t *\n\t * @return array\n\t */\n\tpublic function get_donors() {\n\t\tglobal $wpdb;\n\n\t\t/**\n\t\t * Fires before retrieving donors.\n\t\t *\n\t\t * @since 1.8.14\n\t\t *\n\t\t * @param Give_Donors_Query $this Donors query object.\n\t\t */\n\t\tdo_action( 'give_pre_get_donors', $this );\n\n\t\t$cache_key = Give_Cache::get_key( 'give_donor', $this->get_sql(), false );\n\n\t\t// Get donors from cache.\n\t\t$this->donors = Give_Cache::get_db_query( $cache_key );\n\n\t\tif ( is_null( $this->donors ) ) {\n\t\t\tif ( empty( $this->args['count'] ) ) {\n\t\t\t\t$this->donors = $wpdb->get_results( $this->get_sql() );\n\t\t\t\t$this->update_meta_cache( wp_list_pluck( (array) $this->donors, 'id' ) );\n\t\t\t} else {\n\t\t\t\t$this->donors = $wpdb->get_var( $this->get_sql() );\n\t\t\t}\n\n\t\t\tGive_Cache::set_db_query( $cache_key, $this->donors );\n\t\t}\n\n\n\t\t/**\n\t\t * Fires after retrieving donors.\n\t\t *\n\t\t * @since 1.8.14\n\t\t *\n\t\t * @param Give_Donors_Query $this Donors query object.\n\t\t */\n\t\tdo_action( 'give_post_get_donors', $this );\n\n\t\treturn $this->donors;\n\t}\n\n\t/**\n\t * Get sql query from queried array.\n\t *\n\t * @since  2.0\n\t * @access public\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tpublic function get_sql() {\n\t\tglobal $wpdb;\n\n\t\tif ( $this->args['number'] < 1 ) {\n\t\t\t$this->args['number'] = 99999999999;\n\t\t}\n\n\t\t$where = $this->get_where_query();\n\n\n\t\t// Set offset.\n\t\tif ( empty( $this->args['offset'] ) && ( 0 < $this->args['paged'] ) ) {\n\t\t\t$this->args['offset'] = $this->args['number'] * ( $this->args['paged'] - 1 );\n\t\t}\n\n\t\t// Set fields.\n\t\t$fields = \"{$this->table_name}.*\";\n\t\tif ( ! empty( $this->args['fields'] ) && 'all' !== $this->args['fields'] ) {\n\t\t\tif ( is_string( $this->args['fields'] ) ) {\n\t\t\t\t$fields = \"{$this->table_name}.{$this->args['fields']}\";\n\t\t\t} elseif ( is_array( $this->args['fields'] ) ) {\n\t\t\t\t$fields = \"{$this->table_name}.\" . implode( \" , {$this->table_name}.\", $this->args['fields'] );\n\t\t\t}\n\t\t}\n\n\t\t// Set count.\n\t\tif ( ! empty( $this->args['count'] ) ) {\n\t\t\t$fields = \"COUNT({$this->table_name}.id)\";\n\t\t}\n\n\t\t$orderby = $this->get_order_query();\n\n\t\t$sql = $wpdb->prepare( \"SELECT {$fields} FROM {$this->table_name} LIMIT %d,%d;\", absint( $this->args['offset'] ), absint( $this->args['number'] ) );\n\n\t\t// $where, $orderby and order already prepared query they can generate notice if you re prepare them in above.\n\t\t// WordPress consider LIKE condition as placeholder if start with s,f, or d.\n\t\t$sql = str_replace( 'LIMIT', \"{$where} {$orderby} LIMIT\", $sql );\n\n\t\treturn $sql;\n\t}\n\n\t/**\n\t * Set query where clause.\n\t *\n\t * @since  1.8.14\n\t * @access private\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tprivate function get_where_query() {\n\n\t\t// Get sql query for meta.\n\t\tif ( ! empty( $this->args['meta_query'] ) ) {\n\t\t\t$meta_query_object = new WP_Meta_Query( $this->args['meta_query'] );\n\t\t\t$meta_query        = $meta_query_object->get_sql( $this->meta_type, $this->table_name, 'id' );\n\n\t\t\t$where[] = implode( '', $meta_query );\n\t\t}\n\n\t\t$where[] = 'WHERE 1=1';\n\t\t$where[] = $this->get_where_search();\n\t\t$where[] = $this->get_where_email();\n\t\t$where[] = $this->get_where_donor();\n\t\t$where[] = $this->get_where_user();\n\t\t$where[] = $this->get_where_date();\n\t\t$where[] = $this->get_where_donation_amount();\n\t\t$where[] = $this->get_where_donation_count();\n\t\t$where[] = $this->get_where_give_forms();\n\n\t\t$where = array_filter( $where );\n\n\t\treturn trim( implode( ' ', array_map( 'trim', $where ) ) );\n\n\t}\n\n\t/**\n\t * Set email where clause.\n\t *\n\t * @since  1.8.14\n\t * @access private\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tprivate function get_where_email() {\n\t\tglobal $wpdb;\n\n\t\t$where = '';\n\n\t\tif ( ! empty( $this->args['email'] ) ) {\n\n\t\t\tif ( is_array( $this->args['email'] ) ) {\n\n\t\t\t\t$emails_count       = count( $this->args['email'] );\n\t\t\t\t$emails_placeholder = array_fill( 0, $emails_count, '%s' );\n\t\t\t\t$emails             = implode( ', ', $emails_placeholder );\n\n\t\t\t\t$where .= $wpdb->prepare( \"AND {$this->table_name}.email IN( $emails )\", $this->args['email'] );\n\t\t\t} else {\n\t\t\t\t$where .= $wpdb->prepare( \"AND {$this->table_name}.email = %s\", $this->args['email'] );\n\t\t\t}\n\t\t}\n\n\t\treturn $where;\n\t}\n\n\t/**\n\t * Set donor where clause.\n\t *\n\t * @since  1.8.14\n\t * @access private\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tprivate function get_where_donor() {\n\t\t$where = '';\n\n\t\t// Specific donors.\n\t\tif ( ! empty( $this->args['donor'] ) ) {\n\t\t\tif ( ! is_array( $this->args['donor'] ) ) {\n\t\t\t\t$this->args['donor'] = explode( ',', $this->args['donor'] );\n\t\t\t}\n\t\t\t$donor_ids = implode( ',', array_map( 'intval', $this->args['donor'] ) );\n\n\t\t\t$where .= \"AND {$this->table_name}.id IN( {$donor_ids} )\";\n\t\t}\n\n\t\treturn $where;\n\t}\n\n\t/**\n\t * Set date where clause.\n\t *\n\t * @since  1.8.14\n\t * @access private\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tprivate function get_where_date() {\n\t\t$where = '';\n\n\t\t// Donors created for a specific date or in a date range\n\t\tif ( ! empty( $this->args['date_query'] ) ) {\n\t\t\t$date_query_object = new WP_Date_Query( is_array( $this->args['date_query'] ) ? $this->args['date_query'] : wp_parse_args( $this->args['date_query'] ), \"{$this->table_name}.date_created\" );\n\n\t\t\t$where .= str_replace( array(\n\t\t\t\t\"\\n\",\n\t\t\t\t'(   (',\n\t\t\t\t'))',\n\t\t\t), array(\n\t\t\t\t'',\n\t\t\t\t'( (',\n\t\t\t\t') )',\n\t\t\t), $date_query_object->get_sql() );\n\t\t}\n\n\t\treturn $where;\n\t}\n\n\t/**\n\t * Set search where clause.\n\t *\n\t * @since  1.8.14\n\t * @access private\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tprivate function get_where_search() {\n\t\t$where = '';\n\n\t\t// Bailout.\n\t\tif( empty( $this->args['s'] ) ) {\n\t\t\treturn $where;\n\t\t}\n\n\t\t// Donors created for a specific date or in a date range\n\t\tif ( false !== strpos( $this->args['s'], ':' ) ) {\n\t\t\t$search_parts = explode( ':', $this->args['s'] );\n\t\t\tif ( ! empty( $search_parts[0] ) ) {\n\t\t\t\tswitch ( $search_parts[0] ) {\n\t\t\t\t\t// Backward compatibility.\n\t\t\t\t\tcase 'name':\n\t\t\t\t\t\t$where = \"AND {$this->table_name}.name LIKE '%{$search_parts[1]}%'\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'note':\n\t\t\t\t\t\t$where = \"AND {$this->table_name}.notes LIKE '%{$search_parts[1]}%'\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else if ( is_numeric( $this->args['s'] ) ) {\n\t\t\t$where = \"AND {$this->table_name}.id ='{$this->args['s']}'\";\n\n\t\t} else {\n\t\t\t$search_field = is_email( $this->args['s'] ) ? 'email' : 'name';\n\t\t\t$where        = \"AND {$this->table_name}.$search_field LIKE '%{$this->args['s']}%'\";\n\t\t}\n\n\t\treturn $where;\n\t}\n\n\t/**\n\t * Set user where clause.\n\t *\n\t * @since  1.8.14\n\t * @access private\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tprivate function get_where_user() {\n\t\t$where = '';\n\n\t\t// Donors create for specific wp user.\n\t\tif ( ! empty( $this->args['user'] ) ) {\n\t\t\tif ( ! is_array( $this->args['user'] ) ) {\n\t\t\t\t$this->args['user'] = explode( ',', $this->args['user'] );\n\t\t\t}\n\t\t\t$user_ids = implode( ',', array_map( 'intval', $this->args['user'] ) );\n\n\t\t\t$where .= \"AND {$this->table_name}.user_id IN( {$user_ids} )\";\n\t\t}\n\n\t\treturn $where;\n\t}\n\n\t/**\n\t * Set orderby query\n\t *\n\t * @since  1.8.14\n\t * @access private\n\t *\n\t * @return string\n\t */\n\tprivate function get_order_query() {\n\t\t$table_columns = Give()->donors->get_columns();\n\n\t\t$query = array();\n\t\t$ordersby = $this->args['orderby'];\n\n\t\tif( ! is_array( $ordersby ) ) {\n\t\t\t$ordersby = array(\n\t\t\t\t$this->args['orderby'] => $this->args['order']\n\t\t\t);\n\t\t}\n\n\t\t// Remove non existing column.\n\t\t// Filter orderby values.\n\t\tforeach ( $ordersby as $orderby => $order ) {\n\t\t\tif( ! array_key_exists( $orderby, $table_columns ) ) {\n\t\t\t\tunset( $ordersby[$orderby] );\n\t\t\t}\n\n\t\t\t$ordersby[ esc_sql( $orderby ) ] = esc_sql( $order );\n\t\t}\n\n\t\tif( empty( $ordersby ) ) {\n\t\t\t$ordersby = array(\n\t\t\t\t'id' => $this->args['order']\n\t\t\t);\n\t\t}\n\n\t\t// Create query.\n\t\tforeach ( $ordersby as $orderby => $order ) {\n\t\t\tswitch ( $table_columns[ $orderby ] ) {\n\t\t\t\tcase '%d':\n\t\t\t\tcase '%f':\n\t\t\t\t\t$query[] = \"{$this->table_name}.{$orderby}+0 {$order}\";\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t$query[] = \"{$this->table_name}.{$orderby} {$order}\";\n\t\t\t}\n\t\t}\n\n\t\treturn ! empty( $query ) ? 'ORDER BY ' . implode( ', ', $query ) : '';\n\t}\n\n\t/**\n\t * Set donation count value where clause.\n\t * @todo: add phpunit test\n\t *\n\t * @since  2.2.0\n\t * @access private\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tprivate function get_where_donation_count() {\n\t\t$where = '';\n\n\t\tif ( ! empty( $this->args['donation_count'] ) ) {\n\t\t\t$compare = '>';\n\t\t\t$amount  = $this->args['donation_count'];\n\t\t\tif ( is_array( $this->args['donation_count'] ) ) {\n\t\t\t\t$compare = $this->args['donation_count'] ['compare'];\n\t\t\t\t$amount = $this->args['donation_count']['amount'];\n\t\t\t}\n\n\t\t\t$where .= \"AND {$this->table_name}.purchase_count{$compare}{$amount}\";\n\t\t}\n\n\t\treturn $where;\n\t}\n\n\t/**\n\t * Set purchase value where clause.\n\t * @todo: add phpunit test\n\t *\n\t * @since  2.1.0\n\t * @access private\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tprivate function get_where_donation_amount() {\n\t\t$where = '';\n\n\t\tif ( ! empty( $this->args['donation_amount'] ) ) {\n\t\t\t$compare = '>';\n\t\t\t$amount  = $this->args['donation_amount'];\n\t\t\tif ( is_array( $this->args['donation_amount'] ) ) {\n\t\t\t\t$compare = $this->args['donation_amount'] ['compare'];\n\t\t\t\t$amount = $this->args['donation_amount']['amount'];\n\t\t\t}\n\n\t\t\t$where .= \"AND {$this->table_name}.purchase_value{$compare}{$amount}\";\n\t\t}\n\n\t\treturn $where;\n\t}\n\n\t/**\n\t * Set give_forms where clause.\n\t *\n\t * @todo   : add phpunit test\n\t *\n\t * @since  2.1.0\n\t * @access private\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tprivate function get_where_give_forms() {\n\t\tglobal $wpdb;\n\t\t$where = '';\n\n\t\tif ( ! empty( $this->args['give_forms'] ) ) {\n\t\t\tif ( ! is_array( $this->args['give_forms'] ) ) {\n\t\t\t\t$this->args['give_forms'] = explode( ',', $this->args['give_forms'] );\n\t\t\t}\n\n\t\t\t$form_ids        = implode( ',', array_map( 'intval', $this->args['give_forms'] ) );\n\t\t\t$donation_id_col = Give()->payment_meta->get_meta_type() . '_id';\n\n\t\t\t$query = $wpdb->prepare(\n\t\t\t\t\"\n\t\t\tSELECT DISTINCT meta_value as donor_id\n\t\t\tFROM {$wpdb->donationmeta}\n\t\t\tWHERE meta_key=%s\n\t\t\tAND {$donation_id_col} IN(\n\t\t\t\tSELECT {$donation_id_col}\n\t\t\t\tFROM {$wpdb->paymentmeta}\n\t\t\t\tWHERE meta_key=%s\n\t\t\t\tAND meta_value IN (%s)\n\t\t\t)\n\t\t\t\",\n\t\t\t\t'_give_payment_donor_id',\n\t\t\t\t'_give_payment_form_id',\n\t\t\t\t$form_ids\n\t\t\t);\n\n\t\t\t$donor_ids = $wpdb->get_results( $query, ARRAY_A );\n\n\t\t\tif ( ! empty( $donor_ids ) ) {\n\t\t\t\t$donor_ids = wp_list_pluck( $donor_ids, 'donor_id' );\n\t\t\t\t$donor_ids = implode( ',', array_map( 'intval', $donor_ids ) );\n\t\t\t\t$where     .= \"AND {$this->table_name}.id IN ({$donor_ids})\";\n\t\t\t} else {\n\t\t\t\t$where .= \"AND {$this->table_name}.id IN ('0')\";\n\t\t\t}\n\t\t}\n\n\t\treturn $where;\n\t}\n\n\t/**\n\t * If querying a specific date, add the proper filters.\n\t * Note: This function currently only accept dates with admin defined core date format\n\t *\n\t * @since  2.4.0\n\t * @access public\n\t *\n\t * @return void\n\t */\n\tpublic function date_filter_pre() {\n\t\tif (\n\t\t\t! empty( $this->args['date_query'] )\n\t\t\t|| empty( $this->args['start_date'] )\n\t\t\t|| empty( $this->args['end_date'] )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t$date_query = array();\n\n\t\tif ( ! empty ( $this->args['start_date'] ) ) {\n\t\t\t$date_query['after'] = date(\n\t\t\t\t'Y-m-d H:i:s',\n\t\t\t\tis_numeric( $this->args['start_date'] )\n\t\t\t\t\t? $this->args['start_date']\n\t\t\t\t\t: strtotime( $this->args['start_date'] )\n\t\t\t);\n\t\t}\n\n\t\tif ( ! empty ( $this->args['end_date'] ) ) {\n\t\t\t$date_query['before'] = date(\n\t\t\t\t'Y-m-d H:i:s',\n\t\t\t\tis_numeric( $this->args['end_date'] )\n\t\t\t\t\t? $this->args['end_date']\n\t\t\t\t\t: strtotime( $this->args['end_date'] )\n\t\t\t);\n\t\t}\n\n\t\t// Include Start Date and End Date while querying.\n\t\t$date_query['inclusive'] = true;\n\n\t\t$this->__set( 'date_query', $date_query );\n\t}\n\n\t/**\n\t * Update donors meta cache\n\t *\n\t * @since  2.5.0\n\t * @access private\n\t *\n\t * @param array $donor_ids\n\t */\n\tpublic static function update_meta_cache( $donor_ids ){\n\t\t// Exit.\n\t\tif ( empty( $donor_ids ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tupdate_meta_cache( Give()->donor_meta->get_meta_type(), $donor_ids );\n\t}\n\n\t/**\n\t * Set a query variable.\n\t *\n\t * @since  2.4.0\n\t * @access public\n\t *\n\t * @param $query_var\n\t * @param $value\n\t */\n\tpublic function __set( $query_var, $value ) {\n\t\tif ( in_array( $query_var, array( 'meta_query', 'tax_query' ) ) ) {\n\t\t\t$this->args[ $query_var ][] = $value;\n\t\t} else {\n\t\t\t$this->args[ $query_var ] = $value;\n\t\t}\n\t}\n\n}\n"], "fixing_code": ["<?php\n/**\n * Donors Query\n *\n * @package     Give\n * @subpackage  Classes/Stats\n * @copyright   Copyright (c) 2017, GiveWP\n * @license     https://opensource.org/licenses/gpl-license GNU Public License\n * @since       1.8.14\n */\n\n// Exit if accessed directly.\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Give_Donors_Query Class\n *\n * This class is for retrieving donors data.\n *\n * Donors can be retrieved for date ranges and pre-defined periods.\n *\n * @since 1.8.14\n */\nclass Give_Donors_Query {\n\n\t/**\n\t * The args to pass to the give_get_donors() query\n\t *\n\t * @since  1.8.14\n\t * @access public\n\t *\n\t * @var    array\n\t */\n\tpublic $args = array();\n\n\t/**\n\t * The donors found based on the criteria set\n\t *\n\t * @since  1.8.14\n\t * @access public\n\t *\n\t * @var    array\n\t */\n\tpublic $donors = array();\n\n\t/**\n\t * The donors found based on the criteria set\n\t *\n\t * @since  1.8.14\n\t * @access public\n\t *\n\t * @var    string\n\t */\n\tpublic $table_name = '';\n\n\t/**\n\t * The donors found based on the criteria set\n\t *\n\t * @since  1.8.14\n\t * @access public\n\t *\n\t * @var    string\n\t */\n\tpublic $meta_table_name = '';\n\n\t/**\n\t * The donors found based on the criteria set\n\t *\n\t * @since  1.8.14\n\t * @access public\n\t *\n\t * @var    string\n\t */\n\tpublic $meta_type = '';\n\n\t/**\n\t * Preserve args\n\t *\n\t * @since  2.4.0\n\t * @access public\n\t *\n\t * @var    array\n\t */\n\tpublic $_args = array();\n\n\t/**\n\t * Default query arguments.\n\t *\n\t * Not all of these are valid arguments that can be passed to WP_Query. The ones that are not, are modified before\n\t * the query is run to convert them to the proper syntax.\n\t *\n\t * @since  1.8.14\n\t * @access public\n\t *\n\t * @param  $args array The array of arguments that can be passed in and used for setting up this payment query.\n\t */\n\tpublic function __construct( $args = array() ) {\n\t\t$defaults = array(\n\t\t\t'number'          => 20,\n\t\t\t'offset'          => 0,\n\t\t\t'paged'           => 1,\n\t\t\t'orderby'         => 'id',\n\t\t\t'order'           => 'DESC',\n\t\t\t'user'            => null,\n\t\t\t'email'           => null,\n\t\t\t'donor'           => null,\n\t\t\t'meta_query'      => array(),\n\t\t\t'date_query'      => array(),\n\t\t\t's'               => null,\n\t\t\t'fields'          => 'all', // Supports donors (all fields) or valid column as string or array list.\n\t\t\t'count'           => false,\n\t\t\t'give_forms'      => array(),\n\t\t\t'start_date'      => false,\n\t\t\t'end_date'        => false,\n\n\t\t\t/**\n\t\t\t * donation_amount will contain value like:\n\t\t\t * array(\n\t\t\t *     'compare' => *compare symbol* (by default set to > )\n\t\t\t *     'amount'  => *numeric_value*\n\t\t\t * )\n\t\t\t *\n\t\t\t * You can also pass number value to this param then compare symbol will auto set to >\n\t\t\t */\n\t\t\t'donation_amount' => array(),\n\t\t);\n\n\t\t$this->args            = $this->_args = wp_parse_args( $args, $defaults );\n\t\t$this->table_name      = Give()->donors->table_name;\n\t\t$this->meta_table_name = Give()->donor_meta->table_name;\n\t\t$this->meta_type       = Give()->donor_meta->meta_type;\n\n\t\t$this->date_filter_pre();\n\t}\n\n\t/**\n\t * Modify the query/query arguments before we retrieve donors.\n\t *\n\t * @since  1.8.14\n\t * @access public\n\t *\n\t * @return void\n\t */\n\tpublic function init() {\n\t}\n\n\n\t/**\n\t * Retrieve donors.\n\t *\n\t * The query can be modified in two ways; either the action before the\n\t * query is run, or the filter on the arguments (existing mainly for backwards\n\t * compatibility).\n\t *\n\t * @since  1.8.14\n\t * @access public\n\t *\n\t * @global wpdb $wpdb\n\t *\n\t * @return array\n\t */\n\tpublic function get_donors() {\n\t\tglobal $wpdb;\n\n\t\t/**\n\t\t * Fires before retrieving donors.\n\t\t *\n\t\t * @since 1.8.14\n\t\t *\n\t\t * @param Give_Donors_Query $this Donors query object.\n\t\t */\n\t\tdo_action( 'give_pre_get_donors', $this );\n\n\t\t$cache_key = Give_Cache::get_key( 'give_donor', $this->get_sql(), false );\n\n\t\t// Get donors from cache.\n\t\t$this->donors = Give_Cache::get_db_query( $cache_key );\n\n\t\tif ( is_null( $this->donors ) ) {\n\t\t\tif ( empty( $this->args['count'] ) ) {\n\t\t\t\t$this->donors = $wpdb->get_results( $this->get_sql() );\n\t\t\t\t$this->update_meta_cache( wp_list_pluck( (array) $this->donors, 'id' ) );\n\t\t\t} else {\n\t\t\t\t$this->donors = $wpdb->get_var( $this->get_sql() );\n\t\t\t}\n\n\t\t\tGive_Cache::set_db_query( $cache_key, $this->donors );\n\t\t}\n\n\n\t\t/**\n\t\t * Fires after retrieving donors.\n\t\t *\n\t\t * @since 1.8.14\n\t\t *\n\t\t * @param Give_Donors_Query $this Donors query object.\n\t\t */\n\t\tdo_action( 'give_post_get_donors', $this );\n\n\t\treturn $this->donors;\n\t}\n\n\t/**\n\t * Get sql query from queried array.\n\t *\n\t * @since  2.0\n\t * @access public\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tpublic function get_sql() {\n\t\tglobal $wpdb;\n\n\t\tif ( $this->args['number'] < 1 ) {\n\t\t\t$this->args['number'] = 99999999999;\n\t\t}\n\n\t\t$where = $this->get_where_query();\n\n\n\t\t// Set offset.\n\t\tif ( empty( $this->args['offset'] ) && ( 0 < $this->args['paged'] ) ) {\n\t\t\t$this->args['offset'] = $this->args['number'] * ( $this->args['paged'] - 1 );\n\t\t}\n\n\t\t// Set fields.\n\t\t$fields = \"{$this->table_name}.*\";\n\t\tif ( ! empty( $this->args['fields'] ) && 'all' !== $this->args['fields'] ) {\n\t\t\tif ( is_string( $this->args['fields'] ) ) {\n\t\t\t\t$fields = \"{$this->table_name}.{$this->args['fields']}\";\n\t\t\t} elseif ( is_array( $this->args['fields'] ) ) {\n\t\t\t\t$fields = \"{$this->table_name}.\" . implode( \" , {$this->table_name}.\", $this->args['fields'] );\n\t\t\t}\n\t\t}\n\n\t\t// Set count.\n\t\tif ( ! empty( $this->args['count'] ) ) {\n\t\t\t$fields = \"COUNT({$this->table_name}.id)\";\n\t\t}\n\n\t\t$orderby = $this->get_order_query();\n\n\t\t$sql = $wpdb->prepare( \"SELECT {$fields} FROM {$this->table_name} LIMIT %d,%d;\", absint( $this->args['offset'] ), absint( $this->args['number'] ) );\n\n\t\t// $where, $orderby and order already prepared query they can generate notice if you re prepare them in above.\n\t\t// WordPress consider LIKE condition as placeholder if start with s,f, or d.\n\t\t$sql = str_replace( 'LIMIT', \"{$where} {$orderby} LIMIT\", $sql );\n\n\t\treturn $sql;\n\t}\n\n\t/**\n\t * Set query where clause.\n\t *\n\t * @since  1.8.14\n\t * @access private\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tprivate function get_where_query() {\n\n\t\t// Get sql query for meta.\n\t\tif ( ! empty( $this->args['meta_query'] ) ) {\n\t\t\t$meta_query_object = new WP_Meta_Query( $this->args['meta_query'] );\n\t\t\t$meta_query        = $meta_query_object->get_sql( $this->meta_type, $this->table_name, 'id' );\n\n\t\t\t$where[] = implode( '', $meta_query );\n\t\t}\n\n\t\t$where[] = 'WHERE 1=1';\n\t\t$where[] = $this->get_where_search();\n\t\t$where[] = $this->get_where_email();\n\t\t$where[] = $this->get_where_donor();\n\t\t$where[] = $this->get_where_user();\n\t\t$where[] = $this->get_where_date();\n\t\t$where[] = $this->get_where_donation_amount();\n\t\t$where[] = $this->get_where_donation_count();\n\t\t$where[] = $this->get_where_give_forms();\n\n\t\t$where = array_filter( $where );\n\n\t\treturn trim( implode( ' ', array_map( 'trim', $where ) ) );\n\n\t}\n\n\t/**\n\t * Set email where clause.\n\t *\n\t * @since  1.8.14\n\t * @access private\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tprivate function get_where_email() {\n\t\tglobal $wpdb;\n\n\t\t$where = '';\n\n\t\tif ( ! empty( $this->args['email'] ) ) {\n\n\t\t\tif ( is_array( $this->args['email'] ) ) {\n\n\t\t\t\t$emails_count       = count( $this->args['email'] );\n\t\t\t\t$emails_placeholder = array_fill( 0, $emails_count, '%s' );\n\t\t\t\t$emails             = implode( ', ', $emails_placeholder );\n\n\t\t\t\t$where .= $wpdb->prepare( \"AND {$this->table_name}.email IN( $emails )\", $this->args['email'] );\n\t\t\t} else {\n\t\t\t\t$where .= $wpdb->prepare( \"AND {$this->table_name}.email = %s\", $this->args['email'] );\n\t\t\t}\n\t\t}\n\n\t\treturn $where;\n\t}\n\n\t/**\n\t * Set donor where clause.\n\t *\n\t * @since  1.8.14\n\t * @access private\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tprivate function get_where_donor() {\n\t\t$where = '';\n\n\t\t// Specific donors.\n\t\tif ( ! empty( $this->args['donor'] ) ) {\n\t\t\tif ( ! is_array( $this->args['donor'] ) ) {\n\t\t\t\t$this->args['donor'] = explode( ',', $this->args['donor'] );\n\t\t\t}\n\t\t\t$donor_ids = implode( ',', array_map( 'intval', $this->args['donor'] ) );\n\n\t\t\t$where .= \"AND {$this->table_name}.id IN( {$donor_ids} )\";\n\t\t}\n\n\t\treturn $where;\n\t}\n\n\t/**\n\t * Set date where clause.\n\t *\n\t * @since  1.8.14\n\t * @access private\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tprivate function get_where_date() {\n\t\t$where = '';\n\n\t\t// Donors created for a specific date or in a date range\n\t\tif ( ! empty( $this->args['date_query'] ) ) {\n\t\t\t$date_query_object = new WP_Date_Query( is_array( $this->args['date_query'] ) ? $this->args['date_query'] : wp_parse_args( $this->args['date_query'] ), \"{$this->table_name}.date_created\" );\n\n\t\t\t$where .= str_replace( array(\n\t\t\t\t\"\\n\",\n\t\t\t\t'(   (',\n\t\t\t\t'))',\n\t\t\t), array(\n\t\t\t\t'',\n\t\t\t\t'( (',\n\t\t\t\t') )',\n\t\t\t), $date_query_object->get_sql() );\n\t\t}\n\n\t\treturn $where;\n\t}\n\n\t/**\n\t * Set search where clause.\n\t *\n\t * @since  1.8.14\n\t * @access private\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tprivate function get_where_search() {\n\t\t$where = '';\n\n\t\t// Bailout.\n\t\tif( empty( $this->args['s'] ) ) {\n\t\t\treturn $where;\n\t\t}\n\n\t\t// Donors created for a specific date or in a date range\n\t\tif ( false !== strpos( $this->args['s'], ':' ) ) {\n\t\t\t$search_parts = explode( ':', $this->args['s'] );\n\t\t\tif ( ! empty( $search_parts[0] ) ) {\n\t\t\t\tswitch ( $search_parts[0] ) {\n\t\t\t\t\t// Backward compatibility.\n\t\t\t\t\tcase 'name':\n\t\t\t\t\t\t$where = \"AND {$this->table_name}.name LIKE '%{$search_parts[1]}%'\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'note':\n\t\t\t\t\t\t$where = \"AND {$this->table_name}.notes LIKE '%{$search_parts[1]}%'\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else if ( is_numeric( $this->args['s'] ) ) {\n\t\t\t$where = \"AND {$this->table_name}.id ='{$this->args['s']}'\";\n\n\t\t} else {\n\t\t\t$search_field = is_email( $this->args['s'] ) ? 'email' : 'name';\n\t\t\t$where        = \"AND {$this->table_name}.$search_field LIKE '%{$this->args['s']}%'\";\n\t\t}\n\n\t\treturn $where;\n\t}\n\n\t/**\n\t * Set user where clause.\n\t *\n\t * @since  1.8.14\n\t * @access private\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tprivate function get_where_user() {\n\t\t$where = '';\n\n\t\t// Donors create for specific wp user.\n\t\tif ( ! empty( $this->args['user'] ) ) {\n\t\t\tif ( ! is_array( $this->args['user'] ) ) {\n\t\t\t\t$this->args['user'] = explode( ',', $this->args['user'] );\n\t\t\t}\n\t\t\t$user_ids = implode( ',', array_map( 'intval', $this->args['user'] ) );\n\n\t\t\t$where .= \"AND {$this->table_name}.user_id IN( {$user_ids} )\";\n\t\t}\n\n\t\treturn $where;\n\t}\n\n\t/**\n\t * Set orderby query\n\t *\n\t * @since  1.8.14\n\t * @access private\n\t *\n\t * @return string\n\t */\n\tprivate function get_order_query() {\n\t\t$table_columns = Give()->donors->get_columns();\n\n\t\t$query = array();\n\t\t$ordersby = $this->args['orderby'];\n\n\t\tif( ! is_array( $ordersby ) ) {\n\t\t\t$ordersby = array(\n\t\t\t\t$this->args['orderby'] => $this->args['order']\n\t\t\t);\n\t\t}\n\n\t\t// Remove non existing column.\n\t\t// Filter orderby values.\n\t\tforeach ( $ordersby as $orderby => $order ) {\n\t\t\tif( ! array_key_exists( $orderby, $table_columns ) ) {\n\t\t\t\tunset( $ordersby[$orderby] );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$ordersby[ esc_sql( $orderby ) ] = esc_sql( $order );\n\t\t}\n\n\t\tif( empty( $ordersby ) ) {\n\t\t\t$ordersby = array(\n\t\t\t\t'id' => $this->args['order']\n\t\t\t);\n\t\t}\n\n\t\t// Create query.\n\t\tforeach ( $ordersby as $orderby => $order ) {\n\t\t\tswitch ( $table_columns[ $orderby ] ) {\n\t\t\t\tcase '%d':\n\t\t\t\tcase '%f':\n\t\t\t\t\t$query[] = \"{$this->table_name}.{$orderby}+0 {$order}\";\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t$query[] = \"{$this->table_name}.{$orderby} {$order}\";\n\t\t\t}\n\t\t}\n\n\t\treturn ! empty( $query ) ? 'ORDER BY ' . implode( ', ', $query ) : '';\n\t}\n\n\t/**\n\t * Set donation count value where clause.\n\t * @todo: add phpunit test\n\t *\n\t * @since  2.2.0\n\t * @access private\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tprivate function get_where_donation_count() {\n\t\t$where = '';\n\n\t\tif ( ! empty( $this->args['donation_count'] ) ) {\n\t\t\t$compare = '>';\n\t\t\t$amount  = $this->args['donation_count'];\n\t\t\tif ( is_array( $this->args['donation_count'] ) ) {\n\t\t\t\t$compare = $this->args['donation_count'] ['compare'];\n\t\t\t\t$amount = $this->args['donation_count']['amount'];\n\t\t\t}\n\n\t\t\t$where .= \"AND {$this->table_name}.purchase_count{$compare}{$amount}\";\n\t\t}\n\n\t\treturn $where;\n\t}\n\n\t/**\n\t * Set purchase value where clause.\n\t * @todo: add phpunit test\n\t *\n\t * @since  2.1.0\n\t * @access private\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tprivate function get_where_donation_amount() {\n\t\t$where = '';\n\n\t\tif ( ! empty( $this->args['donation_amount'] ) ) {\n\t\t\t$compare = '>';\n\t\t\t$amount  = $this->args['donation_amount'];\n\t\t\tif ( is_array( $this->args['donation_amount'] ) ) {\n\t\t\t\t$compare = $this->args['donation_amount'] ['compare'];\n\t\t\t\t$amount = $this->args['donation_amount']['amount'];\n\t\t\t}\n\n\t\t\t$where .= \"AND {$this->table_name}.purchase_value{$compare}{$amount}\";\n\t\t}\n\n\t\treturn $where;\n\t}\n\n\t/**\n\t * Set give_forms where clause.\n\t *\n\t * @todo   : add phpunit test\n\t *\n\t * @since  2.1.0\n\t * @access private\n\t *\n\t * @global wpdb $wpdb\n\t * @return string\n\t */\n\tprivate function get_where_give_forms() {\n\t\tglobal $wpdb;\n\t\t$where = '';\n\n\t\tif ( ! empty( $this->args['give_forms'] ) ) {\n\t\t\tif ( ! is_array( $this->args['give_forms'] ) ) {\n\t\t\t\t$this->args['give_forms'] = explode( ',', $this->args['give_forms'] );\n\t\t\t}\n\n\t\t\t$form_ids        = implode( ',', array_map( 'intval', $this->args['give_forms'] ) );\n\t\t\t$donation_id_col = Give()->payment_meta->get_meta_type() . '_id';\n\n\t\t\t$query = $wpdb->prepare(\n\t\t\t\t\"\n\t\t\tSELECT DISTINCT meta_value as donor_id\n\t\t\tFROM {$wpdb->donationmeta}\n\t\t\tWHERE meta_key=%s\n\t\t\tAND {$donation_id_col} IN(\n\t\t\t\tSELECT {$donation_id_col}\n\t\t\t\tFROM {$wpdb->paymentmeta}\n\t\t\t\tWHERE meta_key=%s\n\t\t\t\tAND meta_value IN (%s)\n\t\t\t)\n\t\t\t\",\n\t\t\t\t'_give_payment_donor_id',\n\t\t\t\t'_give_payment_form_id',\n\t\t\t\t$form_ids\n\t\t\t);\n\n\t\t\t$donor_ids = $wpdb->get_results( $query, ARRAY_A );\n\n\t\t\tif ( ! empty( $donor_ids ) ) {\n\t\t\t\t$donor_ids = wp_list_pluck( $donor_ids, 'donor_id' );\n\t\t\t\t$donor_ids = implode( ',', array_map( 'intval', $donor_ids ) );\n\t\t\t\t$where     .= \"AND {$this->table_name}.id IN ({$donor_ids})\";\n\t\t\t} else {\n\t\t\t\t$where .= \"AND {$this->table_name}.id IN ('0')\";\n\t\t\t}\n\t\t}\n\n\t\treturn $where;\n\t}\n\n\t/**\n\t * If querying a specific date, add the proper filters.\n\t * Note: This function currently only accept dates with admin defined core date format\n\t *\n\t * @since  2.4.0\n\t * @access public\n\t *\n\t * @return void\n\t */\n\tpublic function date_filter_pre() {\n\t\tif (\n\t\t\t! empty( $this->args['date_query'] )\n\t\t\t|| empty( $this->args['start_date'] )\n\t\t\t|| empty( $this->args['end_date'] )\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t$date_query = array();\n\n\t\tif ( ! empty ( $this->args['start_date'] ) ) {\n\t\t\t$date_query['after'] = date(\n\t\t\t\t'Y-m-d H:i:s',\n\t\t\t\tis_numeric( $this->args['start_date'] )\n\t\t\t\t\t? $this->args['start_date']\n\t\t\t\t\t: strtotime( $this->args['start_date'] )\n\t\t\t);\n\t\t}\n\n\t\tif ( ! empty ( $this->args['end_date'] ) ) {\n\t\t\t$date_query['before'] = date(\n\t\t\t\t'Y-m-d H:i:s',\n\t\t\t\tis_numeric( $this->args['end_date'] )\n\t\t\t\t\t? $this->args['end_date']\n\t\t\t\t\t: strtotime( $this->args['end_date'] )\n\t\t\t);\n\t\t}\n\n\t\t// Include Start Date and End Date while querying.\n\t\t$date_query['inclusive'] = true;\n\n\t\t$this->__set( 'date_query', $date_query );\n\t}\n\n\t/**\n\t * Update donors meta cache\n\t *\n\t * @since  2.5.0\n\t * @access private\n\t *\n\t * @param array $donor_ids\n\t */\n\tpublic static function update_meta_cache( $donor_ids ){\n\t\t// Exit.\n\t\tif ( empty( $donor_ids ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tupdate_meta_cache( Give()->donor_meta->get_meta_type(), $donor_ids );\n\t}\n\n\t/**\n\t * Set a query variable.\n\t *\n\t * @since  2.4.0\n\t * @access public\n\t *\n\t * @param $query_var\n\t * @param $value\n\t */\n\tpublic function __set( $query_var, $value ) {\n\t\tif ( in_array( $query_var, array( 'meta_query', 'tax_query' ) ) ) {\n\t\t\t$this->args[ $query_var ][] = $value;\n\t\t} else {\n\t\t\t$this->args[ $query_var ] = $value;\n\t\t}\n\t}\n\n}\n"], "filenames": ["includes/donors/class-give-donors-query.php"], "buggy_code_start_loc": [468], "buggy_code_end_loc": [468], "fixing_code_start_loc": [469], "fixing_code_end_loc": [470], "type": "CWE-89", "message": "A SQL injection vulnerability exists in the Impress GiveWP Give plugin through 2.5.0 for WordPress. Successful exploitation of this vulnerability would allow a remote attacker to execute arbitrary SQL commands on the affected system via includes/payments/class-payments-query.php.", "other": {"cve": {"id": "CVE-2019-13578", "sourceIdentifier": "cve@mitre.org", "published": "2019-08-15T16:15:11.947", "lastModified": "2023-02-06T21:32:35.173", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A SQL injection vulnerability exists in the Impress GiveWP Give plugin through 2.5.0 for WordPress. Successful exploitation of this vulnerability would allow a remote attacker to execute arbitrary SQL commands on the affected system via includes/payments/class-payments-query.php."}, {"lang": "es", "value": "Se presenta una vulnerabilidad de inyecci\u00f3n SQL en el plugin Impress GiveWP Give versiones hasta 2.5.0 para WordPress. La explotaci\u00f3n con \u00e9xito de esta vulnerabilidad permitir\u00eda a un atacante remoto ejecutar comandos SQL arbitrarios en el sistema afectado por medio del archivo includes/payments/class-payments-query.php."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:givewp:givewp:*:*:*:*:*:wordpress:*:*", "versionEndIncluding": "2.5.0", "matchCriteriaId": "D14FD4DF-18BC-478A-A2BA-7ACE3C1CC065"}]}]}], "references": [{"url": "https://fortiguard.com/zeroday/FG-VD-19-098", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/impress-org/give/commit/894937d7927eab0c98457656cbd6fb414b3a6fbf", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/impress-org/give/commit/97b9b5fae2d10742ee42fe00092729fa7da3cb32", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/impress-org/give/commit/d91f4c6dcc92aeb826b060cb2feadd56885f4cea", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/9504", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/impress-org/give/commit/894937d7927eab0c98457656cbd6fb414b3a6fbf"}}