{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.document.editables.link\");\npimcore.document.editables.link = Class.create(pimcore.document.editable, {\n\n    initialize: function($super, id, name, config, data, inherited) {\n        $super(id, name, config, data, inherited);\n\n        this.defaultData = {\n            path: \"\",\n            parameters: \"\",\n            anchor: \"\",\n            accesskey: \"\",\n            rel: \"\",\n            tabindex: \"\",\n            target: \"\",\n            \"class\": \"\",\n            attributes: \"\"\n        };\n\n        this.data = mergeObject(this.defaultData, data ?? {});\n    },\n\n    render: function() {\n        this.setupWrapper();\n\n        this.element = Ext.get(this.id);\n\n        if (this.config[\"required\"]) {\n            this.required = this.config[\"required\"];\n        }\n\n        this.checkValue();\n\n        Ext.get(this.id).setStyle({\n            display:\"inline\"\n        });\n        Ext.get(this.id).insertHtml(\"beforeEnd\",'<span class=\"pimcore_editable_link_text\">' + this.getLinkContent() + '</span>');\n\n        var editButton = new Ext.Button({\n            iconCls: \"pimcore_icon_link pimcore_icon_overlay_edit\",\n            cls: \"pimcore_edit_link_button\",\n            listeners: {\n                \"click\": this.openEditor.bind(this)\n            }\n        });\n\n        var openButton = new Ext.Button({\n            iconCls: \"pimcore_icon_open\",\n            cls: \"pimcore_open_link_button\",\n            listeners: {\n                \"click\": function () {\n                    if (this.data && this.data.path) {\n                        if (this.data.linktype == \"internal\") {\n                            pimcore.helpers.openElement(this.data.path, this.data.internalType);\n                        } else {\n                            window.open(this.data.path, \"_blank\");\n                        }\n                    }\n                }.bind(this)\n            }\n        });\n\n        openButton.render(this.id);\n        editButton.render(this.id);\n    },\n\n    openEditor: function () {\n\n        // disable the global dnd handler in this editmode/frame\n        window.dndManager.disable();\n\n        this.window = pimcore.helpers.editmode.openLinkEditPanel(this.data, {\n            empty: this.empty.bind(this),\n            cancel: this.cancel.bind(this),\n            save: this.save.bind(this)\n        });\n    },\n\n\n    getLinkContent: function () {\n\n        let text = \"[\" + t(\"not_set\") + \"]\";\n        if (this.data.text) {\n            text = this.data.text;\n        } else if (this.data.path) {\n            text = this.data.path;\n        }\n        if (this.data.path || this.data.anchor || this.data.parameters) {\n            let fullpath = this.data.path + (this.data.parameters ? '?' + this.data.parameters : '') + (this.data.anchor ? '#' + this.data.anchor : '');\n            let displayHtml = Ext.util.Format.htmlEncode(text);\n            \n            if (this.config.textPrefix !== undefined) {\n                displayHtml = this.config.textPrefix + displayHtml;\n            }\n            if (this.config.textSuffix !== undefined) {\n                displayHtml += this.config.textSuffix;\n            }\n\n            return '<a href=\"' + fullpath + '\" class=\"' + this.config[\"class\"] + ' ' + this.data[\"class\"] + '\">' + displayHtml + '</a>';\n        }\n        return text;\n    },\n\n    save: function () {\n\n        // enable the global dnd dropzone again\n        window.dndManager.enable();\n\n        var values = this.window.getComponent(\"form\").getForm().getFieldValues();\n        this.data = values;\n        this.checkValue(true);\n\n        // close window\n        this.window.close();\n\n        // set text\n        Ext.get(this.id).query(\".pimcore_editable_link_text\")[0].innerHTML = this.getLinkContent();\n\n        this.reload();\n    },\n\n    reload : function () {\n        if (this.config.reload) {\n            this.reloadDocument();\n            this.checkValue(true);\n        }\n    },\n\n    empty: function () {\n\n        // enable the global dnd dropzone again\n        window.dndManager.enable();\n\n        // close window\n        this.window.close();\n\n        this.data = this.defaultData;\n        this.checkValue(true);\n\n        // set text\n        Ext.get(this.id).query(\".pimcore_editable_link_text\")[0].innerHTML = this.getLinkContent();\n    },\n\n    cancel: function () {\n\n        // enable the global dnd dropzone again\n        window.dndManager.enable();\n\n        this.window.close();\n    },\n\n    checkValue: function (mark) {\n        var data = this.getValue();\n        var text = '';\n\n        if (this.required) {\n            if (this.required === \"linkonly\") {\n                if (this.data.path) {\n                    text = this.data.path;\n                }\n            } else {\n                if (this.data.text && this.data.path) {\n                    text = this.data.text + this.data.path;\n                }\n            }\n\n            this.validateRequiredValue(text, this.element, this, mark);\n        }\n    },\n\n    getValue: function () {\n        return this.data;\n    },\n\n    getType: function () {\n        return \"link\";\n    }\n});\n"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.document.editables.link\");\npimcore.document.editables.link = Class.create(pimcore.document.editable, {\n\n    initialize: function($super, id, name, config, data, inherited) {\n        $super(id, name, config, data, inherited);\n\n        this.defaultData = {\n            path: \"\",\n            parameters: \"\",\n            anchor: \"\",\n            accesskey: \"\",\n            rel: \"\",\n            tabindex: \"\",\n            target: \"\",\n            \"class\": \"\",\n            attributes: \"\"\n        };\n\n        this.data = mergeObject(this.defaultData, data ?? {});\n    },\n\n    render: function() {\n        this.setupWrapper();\n\n        this.element = Ext.get(this.id);\n\n        if (this.config[\"required\"]) {\n            this.required = this.config[\"required\"];\n        }\n\n        this.checkValue();\n\n        Ext.get(this.id).setStyle({\n            display:\"inline\"\n        });\n        Ext.get(this.id).insertHtml(\"beforeEnd\",'<span class=\"pimcore_editable_link_text\">' + this.getLinkContent() + '</span>');\n\n        var editButton = new Ext.Button({\n            iconCls: \"pimcore_icon_link pimcore_icon_overlay_edit\",\n            cls: \"pimcore_edit_link_button\",\n            listeners: {\n                \"click\": this.openEditor.bind(this)\n            }\n        });\n\n        var openButton = new Ext.Button({\n            iconCls: \"pimcore_icon_open\",\n            cls: \"pimcore_open_link_button\",\n            listeners: {\n                \"click\": function () {\n                    if (this.data && this.data.path) {\n                        if (this.data.linktype == \"internal\") {\n                            pimcore.helpers.openElement(this.data.path, this.data.internalType);\n                        } else {\n                            window.open(this.data.path, \"_blank\");\n                        }\n                    }\n                }.bind(this)\n            }\n        });\n\n        openButton.render(this.id);\n        editButton.render(this.id);\n    },\n\n    openEditor: function () {\n\n        // disable the global dnd handler in this editmode/frame\n        window.dndManager.disable();\n\n        this.window = pimcore.helpers.editmode.openLinkEditPanel(this.data, {\n            empty: this.empty.bind(this),\n            cancel: this.cancel.bind(this),\n            save: this.save.bind(this)\n        });\n    },\n\n\n    getLinkContent: function () {\n\n        let text = \"[\" + t(\"not_set\") + \"]\";\n        if (this.data.text) {\n            text = this.data.text;\n        } else if (this.data.path) {\n            text = this.data.path;\n        }\n        if (this.data.path || this.data.anchor || this.data.parameters) {\n            let fullpath = this.data.path + (this.data.parameters ? '?' + Ext.util.Format.htmlEncode(this.data.parameters) : '') + (this.data.anchor ? '#' + Ext.util.Format.htmlEncode(this.data.anchor) : '');\n            let displayHtml = Ext.util.Format.htmlEncode(text);\n            \n            if (this.config.textPrefix !== undefined) {\n                displayHtml = this.config.textPrefix + displayHtml;\n            }\n            if (this.config.textSuffix !== undefined) {\n                displayHtml += this.config.textSuffix;\n            }\n\n            return '<a href=\"' + fullpath + '\" class=\"' + this.config[\"class\"] + ' ' + this.data[\"class\"] + '\">' + displayHtml + '</a>';\n        }\n        return text;\n    },\n\n    save: function () {\n\n        // enable the global dnd dropzone again\n        window.dndManager.enable();\n\n        var values = this.window.getComponent(\"form\").getForm().getFieldValues();\n        this.data = values;\n        this.checkValue(true);\n\n        // close window\n        this.window.close();\n\n        // set text\n        Ext.get(this.id).query(\".pimcore_editable_link_text\")[0].innerHTML = this.getLinkContent();\n\n        this.reload();\n    },\n\n    reload : function () {\n        if (this.config.reload) {\n            this.reloadDocument();\n            this.checkValue(true);\n        }\n    },\n\n    empty: function () {\n\n        // enable the global dnd dropzone again\n        window.dndManager.enable();\n\n        // close window\n        this.window.close();\n\n        this.data = this.defaultData;\n        this.checkValue(true);\n\n        // set text\n        Ext.get(this.id).query(\".pimcore_editable_link_text\")[0].innerHTML = this.getLinkContent();\n    },\n\n    cancel: function () {\n\n        // enable the global dnd dropzone again\n        window.dndManager.enable();\n\n        this.window.close();\n    },\n\n    checkValue: function (mark) {\n        var data = this.getValue();\n        var text = '';\n\n        if (this.required) {\n            if (this.required === \"linkonly\") {\n                if (this.data.path) {\n                    text = this.data.path;\n                }\n            } else {\n                if (this.data.text && this.data.path) {\n                    text = this.data.text + this.data.path;\n                }\n            }\n\n            this.validateRequiredValue(text, this.element, this, mark);\n        }\n    },\n\n    getValue: function () {\n        return this.data;\n    },\n\n    getType: function () {\n        return \"link\";\n    }\n});\n"], "filenames": ["bundles/AdminBundle/Resources/public/js/pimcore/document/editables/link.js"], "buggy_code_start_loc": [101], "buggy_code_end_loc": [102], "fixing_code_start_loc": [101], "fixing_code_end_loc": [102], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.21.", "other": {"cve": {"id": "CVE-2023-2322", "sourceIdentifier": "security@huntr.dev", "published": "2023-04-27T09:15:09.927", "lastModified": "2023-05-05T16:07:09.430", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.21."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:N/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 5.2, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.9, "impactScore": 4.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.21", "matchCriteriaId": "72C537D6-67BA-4562-B853-F99E6C14315C"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/9fc674892b8b53103098b9524705074a45e7f773", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/f7228f3f-3bef-46fe-b0e3-56c432048a67", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/9fc674892b8b53103098b9524705074a45e7f773"}}