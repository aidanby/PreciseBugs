{"buggy_code": ["# Copyright (C) 2009-2012, InSTEDD\n#\n# This file is part of Nuntium.\n#\n# Nuntium is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Nuntium is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Nuntium.  If not, see <http://www.gnu.org/licenses/>.\n\nrequire 'digest/md5'\n\nclass GeopollController < ApplicationController\n  skip_filter :check_login\n\n  # POST /:account_name/:channel_name/:secret_token/geopoll/incoming\n  def incoming\n    account = Account.find_by_id_or_name(params[:account_name])\n    channel = account.geopoll_channels.find_by_name(params[:channel_name])\n    auth_token = channel.configuration[:auth_token].to_s.split(' ')[1]\n    identifier = params[:Identifier]\n    signature = Digest::MD5.hexdigest(auth_token + identifier)\n\n    if signature != params[:Signature]\n      return render text: \"Error\", status: :unauthorized\n    end\n\n    msg = AtMessage.new\n    msg.from = \"sms://#{params[:SourceAddress]}\"\n    msg.to   = \"sms://#{channel.configuration[:from]}\"\n    msg.body = params[:MessageText]\n    msg.channel_relative_id = params[:Identifier]\n    account.route_at msg, channel\n\n    render text: \"Accepted\"\n  end\n\n  def status\n    account = Account.find_by_id_or_name(params[:account_name])\n    channel = account.geopoll_channels.find_by_name(params[:channel_name])\n    ao = channel.ao_messages.find_by_channel_relative_id(params[:MessageId])\n\n    unless ao\n      return render text: \"Error\", status: :not_found\n    end\n\n    status = params[:Status]\n    case status\n      when \"SUCCESS\"\n        ao.state = \"confirmed\"\n      when \"UNDELIVERABLE_TO_MESSAGING_PROVIDER\", \"REJECTED_BY_MESSAGING_PROVIDER\",\n        \"RETRYABLE_FAILURE\", \"TERMINAL_FAILURE\", \"NOT_ROUTABLE\"\n        ao.state = \"failed\"\n    end\n\n    account.logger.info :channel_id => channel.id, :ao_message_id => ao.id,\n      :message => \"Recieved delivery notification with status #{status.inspect}\"\n\n     ao.custom_attributes[:geopoll_status] = status if status\n     ao.save!\n\n    render text: \"Accepted\"\n  end\n\n  def balance\n    channel = account.geopoll_channels.find_by_id params[:channel_id]\n    balance = Geopoll.check_balance(channel)\n    render text: \"Account balance is USD #{balance}\"\n  end\nend\n", "<%- if applications.empty? and channels.empty? -%>\n  To interact with this account you must first create a new application or a new channel.\n<%- else -%>\n  <p>These are the ways you can interface with nuntium. This section is updated when you create and modify applications and channels.</p>\n\n  <div style=\"padding-left:20px\">\n  <%- if channels.any?{|c| c.kind == 'clickatell'} -%>\n    <div><b>Via <%= link_to 'Clickatell', 'http://www.clickatell.com', :target => '_blank' -%></b></div>\n    Use <%= link_to 'Http Basic Authentication', 'http://en.wikipedia.org/wiki/Basic_access_authentication', :target => '_blank' -%> with channel name and incoming password.\n    <ul>\n      <li><span class=\"url\">GET <%= clickatell_url(:account_id => account.name) -%></span>\n        create Application Terminated Messages</li>\n        <li><span class=\"url\">GET <%= clickatell_ack_url(:account_id => account.id) -%></span\n        create Application Terminated Messages</li>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'dtac'} -%>\n    <div><b>Via <%= link_to 'DTAC', 'http://www.dtac.co.th/', :target => '_blank' -%></b></div>\n    Use <%= link_to 'Http Basic Authentication', 'http://en.wikipedia.org/wiki/Basic_access_authentication', :target => '_blank' -%> with channel name and incoming password.\n    <ul>\n      <li><span class=\"url\">GET <%= dtac_url(:account_id => account.name) -%></span>\n        create Application Terminated Messages</li>\n    </ul>\n  <%- end -%>\n\n  <%- if not applications.empty? -%>\n    <div><b>Via HTTP GET</b></div>\n    Use <%= link_to 'Http Basic Authentication', 'http://en.wikipedia.org/wiki/Basic_access_authentication', :target => '_blank' -%> with application credentials (use \"account/application\" as username).\n\n    <ul>\n      <%- applications.each do |app| -%>\n        <li><span class=\"url\">GET <%= send_ao_url(:account_name => account.name, :application_name => app.name) -%></span>\n          create Application Originated Messages from application <%= app.name -%></li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'ipop'} -%>\n    <div><b>Via <%= link_to 'I-POP', 'http://www.i-pop.net/', :target => '_blank' -%></b></div>\n    <ul>\n      <%- channels.select{|c| c.kind == 'ipop'}.each do |channel| -%>\n        <li><span class=\"url\">POST <%= ipop_url(:account_id => account.name, :channel_name => channel.name) -%></span>\n          create Application Terminated Messages from channel <%= channel.name %></li>\n        <li><span class=\"url\">POST <%= ipop_ack_url(:account_id => account.name, :channel_name => channel.name) -%></span>\n          receive Delivery Receipts callbacks from channel <%= channel.name %></li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'pop3'} -%>\n    <div><b>Via Email</b></div>\n    <ul>\n      <%- channels.select{|c| c.kind == 'pop3'}.each do |c| -%>\n        <li>Send an email to <%= c.user -%>: create Application Terminated Messages</li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'qst_server'} -%>\n    <div><b>Via <%= link_to 'QueueStateTransfer', 'http://code.google.com/p/geochat/wiki/QueueStateTransfer', :target => '_blank' -%></b></div>\n    <ul>\n      <li>Use <span class=\"url\"><%= qst_pull_url(:account_id => account.name)[0 .. -10] %></span> when configuring a QST client using <%= link_to 'Http Basic Authentication', 'http://en.wikipedia.org/wiki/Basic_access_authentication', :target => '_blank' -%> with channel credentials</li>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'shujaa'} -%>\n    <div><b>Via <%= link_to 'Shujaa', 'http://sms.shujaa.mobi/', :target => '_blank' -%></b></div>\n    <ul>\n      <%- channels.select{|c| c.kind == 'shujaa'}.each do |channel| -%>\n        <li><span class=\"url\">GET <%= shujaa_url(:account_id => account.name, :callback_guid => channel.callback_guid) -%></span>\n          create Application Terminated Messages in channel <%= channel.name %></li>\n          <li><span class=\"url\">GET <%= clickatell_ack_url(:account_id => account.id, :callback_guid => channel.callback_guid) -%></span>\n          create Application Terminated Messages in channel <%= channel.name %></li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'chikka'} -%>\n    <div><b>Via <%= link_to 'chikka', 'http://api.chikka.com/', :target => '_blank' -%></b></div>\n    <ul>\n      <%- channels.select{|c| c.kind == 'chikka'}.each do |channel| -%>\n        <li>Notification Receiver URL: <span class=\"url\">POST <%= chikka_ack_url(:account_name => account.name, :channel_name => channel.name, :secret_token => channel.secret_token) -%></span>\n          receive delivery notifications in channel <%= channel.name %></li>\n        <li>Message Receiver URL: <span class=\"url\">POST <%= chikka_incoming_url(:account_name => account.name, :channel_name => channel.name, :secret_token => channel.secret_token) -%></span>\n          create Application Terminated Messages in channel <%= channel.name %></li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'africas_talking'} -%>\n    <div><b>Via <%= link_to 'Africa\\'s Talking', 'https://africastalking.com/', :target => '_blank' -%></b></div>\n    <ul>\n      <%- channels.select{|c| c.kind == 'africas_talking'}.each do |channel| -%>\n        <li>Incoming Messages URL: <span class=\"url\">POST <%= africas_talking_incoming_url(:account_name => account.name, :channel_name => channel.name, :secret_token => channel.secret_token) -%></span>\n          create Application Terminated Messages in channel <%= channel.name %></li>\n        <li>Delivery Reports Receiver URL: <span class=\"url\">POST <%= africas_talking_delivery_reports_url(:account_name => account.name, :channel_name => channel.name, :secret_token => channel.secret_token) -%></span>\n          receive delivery reports in channel <%= channel.name %></li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'itexmo'} -%>\n    <div><b>Via <%= link_to 'iTexMo', 'https://www.itexmo.com/', :target => '_blank' -%></b></div>\n    <ul>\n      <%- channels.select{|c| c.kind == 'itexmo'}.each do |channel| -%>\n        <li>Incoming Messages URL: <span class=\"url\">POST <%= itexmo_incoming_url(:account_name => account.name, :channel_name => channel.name, :incoming_password => channel.incoming_password) -%></span>\n          create Application Terminated Messages in channel <%= channel.name %></li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n\n  <%- unless applications.empty? -%>\n    <div><b>Via <%= link_to 'RSS', 'http://en.wikipedia.org/wiki/RSS', :target => '_blank' -%></b></div>\n    Use <%= link_to 'Http Basic Authentication', 'http://en.wikipedia.org/wiki/Basic_access_authentication', :target => '_blank' -%> with application credentials (use \"account/application\" as username).\n\n    <ul>\n      <%- applications.each do |app| -%>\n        <li><span class=\"url\">POST <%= rss_url(:account_name => account.name, :application_name => app.name) -%></span>\n          create Application Originated Messages from application <%= app.name -%></li>\n          <li><span class=\"url\">GET <%= create_rss_url(:account_name => account.name, :application_name => app.name) -%></span>\n          read Application Terminated Messages to application <%= app.name -%></li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'twitter'} -%>\n    <div><b>Via <%= link_to 'Twitter', 'http://www.twitter.com', :target => '_blank' -%></b></div>\n    <ul>\n      <%- channels.select{|c| c.kind == 'twitter'}.each do |c| -%>\n        <li>Send a direct message to <%= c.screen_name -%>: create Application Terminated Messages</li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n  </div>\n<%- end -%>\n"], "fixing_code": ["# Copyright (C) 2009-2012, InSTEDD\n#\n# This file is part of Nuntium.\n#\n# Nuntium is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Nuntium is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Nuntium.  If not, see <http://www.gnu.org/licenses/>.\n\nrequire 'digest/md5'\n\nclass GeopollController < ApplicationController\n  skip_filter :check_login\n\n  # POST /:account_name/:channel_name/geopoll/incoming\n  def incoming\n    account = Account.find_by_id_or_name(params[:account_name])\n    channel = account.geopoll_channels.find_by_name(params[:channel_name])\n    auth_token = channel.configuration[:auth_token].to_s.split(' ')[1]\n    identifier = params[:Identifier]\n    signature = Digest::MD5.hexdigest(auth_token + identifier)\n\n    if !(ActiveSupport::SecurityUtils.secure_compare params[:Signature], signature)\n      return render text: \"Error\", status: :unauthorized\n    end\n\n    unknown_params = params.except(\n      'Identifier', 'Signature', 'SourceAddress', 'TargetAddress', 'MessageText', # GeoPoll API specification\n      'account_name', 'channel_name', 'controller', 'action' # Rails-generated parameters\n    )\n\n    msg = AtMessage.new\n    msg.from = \"sms://#{params[:SourceAddress]}\"\n    msg.to   = \"sms://#{params[:TargetAddress]}\"\n    msg.body = params[:MessageText]\n    msg.channel_relative_id = params[:Identifier]\n    account.route_at msg, channel\n\n    channel.logger.warning :channel_id => channel.id, :at_message_id => msg.id, :message => \"Received unknown parameters for AT #{msg.id}: #{unknown_params.to_json}\" unless unknown_params.empty?\n    \n    render text: \"Accepted\"\n  end\n\n  def status\n    account = Account.find_by_id_or_name(params[:account_name])\n    channel = account.geopoll_channels.find_by_name(params[:channel_name])\n    ao = channel.ao_messages.find_by_channel_relative_id(params[:MessageId])\n\n    unless ao\n      return render text: \"Error\", status: :not_found\n    end\n\n    unknown_params = params.except(\n      'MessageId', 'Status', # GeoPoll API specification\n      'account_name', 'channel_name', 'controller', 'action' # Rails-generated parameters\n    )\n\n    status = params[:Status]\n    case status\n      when \"SUCCESS\"\n        ao.state = \"confirmed\"\n      when \"UNDELIVERABLE_TO_MESSAGING_PROVIDER\", \"REJECTED_BY_MESSAGING_PROVIDER\",\n        \"RETRYABLE_FAILURE\", \"TERMINAL_FAILURE\", \"NOT_ROUTABLE\"\n        ao.state = \"failed\"\n    end\n\n    account.logger.info :channel_id => channel.id, :ao_message_id => ao.id,\n      :message => \"Recieved delivery notification with status #{status.inspect}\"\n\n    channel.logger.warning :channel_id => channel.id, :at_message_id => msg.id, :message => \"Received unknown parameters for AO #{msg.id} Status: #{unknown_params.to_json}\" unless unknown_params.empty?\n\n    ao.custom_attributes[:geopoll_status] = status if status\n    ao.save!\n\n    render text: \"Accepted\"\n  end\n\n  def balance\n    channel = account.geopoll_channels.find_by_id params[:channel_id]\n    balance = Geopoll.check_balance(channel)\n    render text: \"Account balance is USD #{balance}\"\n  end\nend\n", "<%- if applications.empty? and channels.empty? -%>\n  To interact with this account you must first create a new application or a new channel.\n<%- else -%>\n  <p>These are the ways you can interface with nuntium. This section is updated when you create and modify applications and channels.</p>\n\n  <div style=\"padding-left:20px\">\n  <%- if channels.any?{|c| c.kind == 'clickatell'} -%>\n    <div><b>Via <%= link_to 'Clickatell', 'http://www.clickatell.com', :target => '_blank' -%></b></div>\n    Use <%= link_to 'Http Basic Authentication', 'http://en.wikipedia.org/wiki/Basic_access_authentication', :target => '_blank' -%> with channel name and incoming password.\n    <ul>\n      <li><span class=\"url\">GET <%= clickatell_url(:account_id => account.name) -%></span>\n        create Application Terminated Messages</li>\n        <li><span class=\"url\">GET <%= clickatell_ack_url(:account_id => account.id) -%></span\n        create Application Terminated Messages</li>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'dtac'} -%>\n    <div><b>Via <%= link_to 'DTAC', 'http://www.dtac.co.th/', :target => '_blank' -%></b></div>\n    Use <%= link_to 'Http Basic Authentication', 'http://en.wikipedia.org/wiki/Basic_access_authentication', :target => '_blank' -%> with channel name and incoming password.\n    <ul>\n      <li><span class=\"url\">GET <%= dtac_url(:account_id => account.name) -%></span>\n        create Application Terminated Messages</li>\n    </ul>\n  <%- end -%>\n\n  <%- if not applications.empty? -%>\n    <div><b>Via HTTP GET</b></div>\n    Use <%= link_to 'Http Basic Authentication', 'http://en.wikipedia.org/wiki/Basic_access_authentication', :target => '_blank' -%> with application credentials (use \"account/application\" as username).\n\n    <ul>\n      <%- applications.each do |app| -%>\n        <li><span class=\"url\">GET <%= send_ao_url(:account_name => account.name, :application_name => app.name) -%></span>\n          create Application Originated Messages from application <%= app.name -%></li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'ipop'} -%>\n    <div><b>Via <%= link_to 'I-POP', 'http://www.i-pop.net/', :target => '_blank' -%></b></div>\n    <ul>\n      <%- channels.select{|c| c.kind == 'ipop'}.each do |channel| -%>\n        <li><span class=\"url\">POST <%= ipop_url(:account_id => account.name, :channel_name => channel.name) -%></span>\n          create Application Terminated Messages from channel <%= channel.name %></li>\n        <li><span class=\"url\">POST <%= ipop_ack_url(:account_id => account.name, :channel_name => channel.name) -%></span>\n          receive Delivery Receipts callbacks from channel <%= channel.name %></li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'pop3'} -%>\n    <div><b>Via Email</b></div>\n    <ul>\n      <%- channels.select{|c| c.kind == 'pop3'}.each do |c| -%>\n        <li>Send an email to <%= c.user -%>: create Application Terminated Messages</li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'qst_server'} -%>\n    <div><b>Via <%= link_to 'QueueStateTransfer', 'http://code.google.com/p/geochat/wiki/QueueStateTransfer', :target => '_blank' -%></b></div>\n    <ul>\n      <li>Use <span class=\"url\"><%= qst_pull_url(:account_id => account.name)[0 .. -10] %></span> when configuring a QST client using <%= link_to 'Http Basic Authentication', 'http://en.wikipedia.org/wiki/Basic_access_authentication', :target => '_blank' -%> with channel credentials</li>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'shujaa'} -%>\n    <div><b>Via <%= link_to 'Shujaa', 'http://sms.shujaa.mobi/', :target => '_blank' -%></b></div>\n    <ul>\n      <%- channels.select{|c| c.kind == 'shujaa'}.each do |channel| -%>\n        <li><span class=\"url\">GET <%= shujaa_url(:account_id => account.name, :callback_guid => channel.callback_guid) -%></span>\n          create Application Terminated Messages in channel <%= channel.name %></li>\n          <li><span class=\"url\">GET <%= clickatell_ack_url(:account_id => account.id, :callback_guid => channel.callback_guid) -%></span>\n          create Application Terminated Messages in channel <%= channel.name %></li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'chikka'} -%>\n    <div><b>Via <%= link_to 'chikka', 'http://api.chikka.com/', :target => '_blank' -%></b></div>\n    <ul>\n      <%- channels.select{|c| c.kind == 'chikka'}.each do |channel| -%>\n        <li>Notification Receiver URL: <span class=\"url\">POST <%= chikka_ack_url(:account_name => account.name, :channel_name => channel.name, :secret_token => channel.secret_token) -%></span>\n          receive delivery notifications in channel <%= channel.name %></li>\n        <li>Message Receiver URL: <span class=\"url\">POST <%= chikka_incoming_url(:account_name => account.name, :channel_name => channel.name, :secret_token => channel.secret_token) -%></span>\n          create Application Terminated Messages in channel <%= channel.name %></li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'africas_talking'} -%>\n    <div><b>Via <%= link_to 'Africa\\'s Talking', 'https://africastalking.com/', :target => '_blank' -%></b></div>\n    <ul>\n      <%- channels.select{|c| c.kind == 'africas_talking'}.each do |channel| -%>\n        <li>Incoming Messages URL: <span class=\"url\">POST <%= africas_talking_incoming_url(:account_name => account.name, :channel_name => channel.name, :secret_token => channel.secret_token) -%></span>\n          create Application Terminated Messages in channel <%= channel.name %></li>\n        <li>Delivery Reports Receiver URL: <span class=\"url\">POST <%= africas_talking_delivery_reports_url(:account_name => account.name, :channel_name => channel.name, :secret_token => channel.secret_token) -%></span>\n          receive delivery reports in channel <%= channel.name %></li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'itexmo'} -%>\n    <div><b>Via <%= link_to 'iTexMo', 'https://www.itexmo.com/', :target => '_blank' -%></b></div>\n    <ul>\n      <%- channels.select{|c| c.kind == 'itexmo'}.each do |channel| -%>\n        <li>Incoming Messages URL: <span class=\"url\">POST <%= itexmo_incoming_url(:account_name => account.name, :channel_name => channel.name, :incoming_password => channel.incoming_password) -%></span>\n          create Application Terminated Messages in channel <%= channel.name %></li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'geopoll'} -%>\n    <div><b>Via <%= link_to 'GeoPoll', 'https://www.geopoll.com/', :target => '_blank' -%></b></div>\n    <ul>\n      <%- channels.select{|c| c.kind == 'geopoll'}.each do |channel| -%>\n        <li>Incoming Messages URL: <span class=\"url\">POST <%= geopoll_incoming_url(:account_name => account.name, :channel_name => channel.name) -%></span>\n          create Application Terminated Messages in channel <%= channel.name %></li>\n        <li>Delivery Reports Receiver URL: <span class=\"url\">POST <%= geopoll_status_url(:account_name => account.name, :channel_name => channel.name) -%></span>\n          receive delivery reports in channel <%= channel.name %></li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n\n  <%- unless applications.empty? -%>\n    <div><b>Via <%= link_to 'RSS', 'http://en.wikipedia.org/wiki/RSS', :target => '_blank' -%></b></div>\n    Use <%= link_to 'Http Basic Authentication', 'http://en.wikipedia.org/wiki/Basic_access_authentication', :target => '_blank' -%> with application credentials (use \"account/application\" as username).\n\n    <ul>\n      <%- applications.each do |app| -%>\n        <li><span class=\"url\">POST <%= rss_url(:account_name => account.name, :application_name => app.name) -%></span>\n          create Application Originated Messages from application <%= app.name -%></li>\n          <li><span class=\"url\">GET <%= create_rss_url(:account_name => account.name, :application_name => app.name) -%></span>\n          read Application Terminated Messages to application <%= app.name -%></li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n\n  <%- if channels.any?{|c| c.kind == 'twitter'} -%>\n    <div><b>Via <%= link_to 'Twitter', 'http://www.twitter.com', :target => '_blank' -%></b></div>\n    <ul>\n      <%- channels.select{|c| c.kind == 'twitter'}.each do |c| -%>\n        <li>Send a direct message to <%= c.screen_name -%>: create Application Terminated Messages</li>\n      <%- end -%>\n    </ul>\n  <%- end -%>\n  </div>\n<%- end -%>\n"], "filenames": ["app/controllers/geopoll_controller.rb", "app/views/interactions/show.html.erb"], "buggy_code_start_loc": [23, 112], "buggy_code_end_loc": [68, 112], "fixing_code_start_loc": [23, 113], "fixing_code_end_loc": [82, 125], "type": "CWE-203", "message": "A vulnerability, which was classified as problematic, was found in InSTEDD Nuntium. Affected is an unknown function of the file app/controllers/geopoll_controller.rb. The manipulation of the argument signature leads to observable timing discrepancy. It is possible to launch the attack remotely. The name of the patch is 77236f7fd71a0e2eefeea07f9866b069d612cf0d. It is recommended to apply a patch to fix this issue. VDB-217002 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-4823", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-28T21:15:11.147", "lastModified": "2023-01-06T18:51:58.843", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, was found in InSTEDD Nuntium. Affected is an unknown function of the file app/controllers/geopoll_controller.rb. The manipulation of the argument signature leads to observable timing discrepancy. It is possible to launch the attack remotely. The name of the patch is 77236f7fd71a0e2eefeea07f9866b069d612cf0d. It is recommended to apply a patch to fix this issue. VDB-217002 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.1, "baseSeverity": "LOW"}, "exploitabilityScore": 1.6, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-203"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-208"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:instedd:nuntium:*:*:*:*:*:*:*:*", "versionEndExcluding": "2022-11-23", "matchCriteriaId": "BA0FBC4D-5972-40E9-8D63-1FA7328A4CAD"}]}]}], "references": [{"url": "https://github.com/instedd/nuntium/commit/77236f7fd71a0e2eefeea07f9866b069d612cf0d", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217002", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217002", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/instedd/nuntium/commit/77236f7fd71a0e2eefeea07f9866b069d612cf0d"}}