{"buggy_code": ["<?php\nApp::uses('Component', 'Controller');\n\nclass ACLComponent extends Component\n{\n\n    // syntax:\n    // $__aclList[$controller][$action] = $permission_rules\n    // $controller == '*'                 -  any controller can have this action\n    // $action == array()                 -  site admin only has access\n    // $action == '*'                     -  any role has access\n    // $action == array('OR' => array())  -  any role in the array has access\n    // $action == array('AND' => array()) -  roles with all permissions in the array have access\n    // If we add any new functionality to MISP and we don't add it to this list, it will only be visible to site admins.\n    const ACL_LIST = array(\n            '*' => array(\n                'blackhole' => array(),\n                'debugACL' => array(),\n                'queryACL' => array(),\n                'restSearch' => array('*'),\n            ),\n            'api' => [\n                'rest' => ['perm_auth'],\n                'viewDeprecatedFunctionUse' => [],\n                'openapi' => ['*'],\n                'getApiInfo' => ['*'],\n                'getAllApis' => ['*'],\n            ],\n            'attributes' => array(\n                'add' => array('perm_add'),\n                'add_attachment' => array('perm_add'),\n                'add_threatconnect' => array('perm_add'),\n                'addTag' => array('perm_tagger'),\n                'attributeReplace' => array('perm_add'),\n                'attributeStatistics' => array('*'),\n                'bro' => array('*'),\n                'checkAttachments' => array(),\n                'checkComposites' => array('perm_admin'),\n                'checkOrphanedAttributes' => array(),\n                'delete' => array('perm_add'),\n                'deleteSelected' => array('perm_add'),\n                'describeTypes' => array('*'),\n                'download' => array('*'),\n                'downloadAttachment' => array('*'),\n                'downloadSample' => array('*'),\n                'edit' => array('perm_add'),\n                'editField' => array('perm_add'),\n                'editSelected' => array('perm_add'),\n                'exportSearch' => array('*'),\n                'fetchEditForm' => array('perm_add'),\n                'fetchViewValue' => array('*'),\n                'generateCorrelation' => array(),\n                'getMassEditForm' => array('perm_add'),\n                'hoverEnrichment' => array('perm_add'),\n                'index' => array('*'),\n                'pruneOrphanedAttributes' => array(),\n                'removeTag' => array('perm_tagger'),\n                'reportValidationIssuesAttributes' => array(),\n                'restore' => array('perm_add'),\n                'restSearch' => array('*'),\n                'returnAttributes' => array('*'),\n                'rpz' => array('*'),\n                'search' => array('*'),\n                'toggleCorrelation' => array('perm_add'),\n                'text' => array('*'),\n                'toggleToIDS' => array('perm_add'),\n                'updateAttributeValues' => array('perm_add'),\n                'view' => array('*'),\n                'viewPicture' => array('*'),\n            ),\n            'authKeys' => [\n                'add' => ['AND' => ['perm_auth', 'not_read_only_authkey']],\n                'delete' => ['AND' => ['perm_auth', 'not_read_only_authkey']],\n                'edit' => ['AND' => ['perm_auth', 'not_read_only_authkey']],\n                'index' => ['perm_auth'],\n                'view' => ['perm_auth']\n            ],\n            'cerebrates' => [\n                'add' => [],\n                'delete' => [],\n                'download_org' => [],\n                'download_sg' => [],\n                'edit' => [],\n                'index' => [],\n                'preview_orgs' => [],\n                'preview_sharing_groups' => [],\n                'pull_orgs' => [],\n                'pull_sgs' => [],\n                'view' => []\n            ],\n            'correlationExclusions' => [\n                'add' => [],\n                'edit' => [],\n                'clean' => [],\n                'delete' => [],\n                'index' => [],\n                'view' => []\n            ],\n            'correlations' => [\n                'generateOccurrences' => [],\n                'generateTopCorrelations' => [],\n                'overCorrelations' => [],\n                'switchEngine' => [],\n                'top' => [],\n                'truncate' => []\n            ],\n            'cryptographicKeys' => [\n                'add' => ['perm_add'],\n                'delete' => ['perm_add'],\n                'index' => ['*'],\n                'view' => ['*']\n            ],\n            'dashboards' => array(\n                'getForm' => array('*'),\n                'index' => array('*'),\n                'updateSettings' => array('*'),\n                'getEmptyWidget' => array('*'),\n                'renderWidget' => array('*'),\n                'listTemplates' => array('*'),\n                'saveTemplate' => array('*'),\n                'export' => array('*'),\n                'import' => array('*'),\n                'deleteTemplate' => array('*')\n            ),\n            'decayingModel' => array(\n                \"update\" => array(),\n                \"export\" => array('*'),\n                \"import\" => array('*'),\n                \"view\" => array('*'),\n                \"index\" => array('*'),\n                \"add\" => array( 'OR' => array('perm_admin', 'perm_decaying')),\n                \"edit\" => array( 'OR' => array('perm_admin', 'perm_decaying')),\n                \"delete\" => array( 'OR' => array('perm_admin', 'perm_decaying')),\n                \"enable\" => array( 'OR' => array('perm_admin', 'perm_decaying')),\n                \"disable\" => array( 'OR' => array('perm_admin', 'perm_decaying')),\n                \"decayingTool\" => array( 'OR' => array('perm_admin', 'perm_decaying')),\n                \"getAllDecayingModels\" => array('*'),\n                \"decayingToolBasescore\" => array('*'),\n                \"decayingToolSimulation\" => array('*'),\n                \"decayingToolRestSearch\" => array('*'),\n                \"decayingToolComputeSimulation\" => array('*')\n            ),\n            'decayingModelMapping' => array(\n                \"viewAssociatedTypes\" => array('*'),\n                \"linkAttributeTypeToModel\" => array( 'OR' => array('perm_admin', 'perm_decaying'))\n            ),\n            'communities' => array(\n                'index' => array(),\n                'requestAccess' => array(),\n                'view' => array()\n            ),\n            'eventBlocklists' => array(\n                'add' => [\n                    'AND' => [\n                        'host_org_user',\n                        'perm_add'\n                    ]\n                ],\n                'delete' => [\n                    'AND' => [\n                        'host_org_user',\n                        'perm_add'\n                    ]\n                ],\n                'edit' => [\n                    'AND' => [\n                        'host_org_user',\n                        'perm_add'\n                    ]\n                ],\n                'index' => [\n                    'AND' => [\n                        'host_org_user',\n                        'perm_add'\n                    ]\n                ],\n                'massDelete' => [\n                    'AND' => [\n                        'host_org_user',\n                        'perm_add'\n                    ]\n                ]\n            ),\n            'eventDelegations' => array(\n                'acceptDelegation' => array('AND' => ['delegation_enabled', 'perm_add']),\n                'delegateEvent' => array('AND' => ['delegation_enabled', 'perm_delegate']),\n                'deleteDelegation' => array('AND' => ['delegation_enabled', 'perm_add']),\n                'index' => array('delegation_enabled'),\n                'view' => array('delegation_enabled'),\n            ),\n            'eventReports' => array(\n                'add' => array('perm_add'),\n                'view' => array('*'),\n                'viewSummary' => array('*'),\n                'edit' => array('perm_add'),\n                'delete' => array('perm_add'),\n                'reportFromEvent' => array('perm_add'),\n                'restore' => array('perm_add'),\n                'index' => array('*'),\n                'getProxyMISPElements' => array('*'),\n                'extractAllFromReport' => array('*'),\n                'extractFromReport' => array('*'),\n                'replaceSuggestionInReport' => array('*'),\n                'importReportFromUrl' => array('*'),\n            ),\n            'events' => array(\n                    'add' => array('perm_add'),\n                    'addIOC' => array('perm_add'),\n                    'addTag' => array('perm_tagger'),\n                    'add_misp_export' => array('perm_modify'),\n                    'alert' => array('perm_publish'),\n                    'automation' => array('perm_auth'),\n                    'checkLocks' => array('perm_add'),\n                    'checkPublishedStatus' => array('*'),\n                    'checkuuid' => array('perm_sync'),\n                    'contact' => array('*'),\n                    'csv' => array('*'),\n                    'cullEmptyEvents' => array(),\n                    'delegation_index' => array('*'),\n                    'delete' => array('perm_add'),\n                    'deleteNode' => array('*'),\n                    'dot' => array(),\n                    'downloadExport' => array('*'),\n                    'downloadOpenIOCEvent' => array('*'),\n                    'edit' => array('perm_add'),\n                    'enrichEvent' => array('perm_add'),\n                    'export' => array('*'),\n                    'exportChoice' => array('*'),\n                    'exportModule' => array('*'),\n                    'filterEventIdsForPush' => array('perm_sync'),\n                    'filterEventIndex' => array('*'),\n                    'freeTextImport' => array('perm_add'),\n                    'getEditStrategy' => array('perm_add'),\n                    'getEventInfoById' => array('*'),\n                    'getEventGraphReferences' => array('*'),\n                    'getEventGraphTags' => array('*'),\n                    'getEventGraphGeneric' => array('*'),\n                    'getEventTimeline' => array('*'),\n                    'getDistributionGraph' => array('*'),\n                    'getReferenceData' => array('*'),\n                    'getReferences' => array('*'),\n                    'getObjectTemplate' => array('*'),\n                    'handleModuleResults' => array('*'),\n                    'hids' => array('*'),\n                    'index' => array('*'),\n                    'importChoice' => array('*'),\n                    'importModule' => array('*'),\n                    'massDelete' => array(),\n                    'merge' => array('perm_modify'),\n                    'nids' => array('*'),\n                    'populate' => array('perm_add'),\n                    'proposalEventIndex' => array('*'),\n                    'protect' => ['perm_add'],\n                    'publish' => array('perm_publish'),\n                    'publishSightings' => array('perm_sighting'),\n                    'pushEventToZMQ' => array('perm_publish_zmq'),\n                    'pushEventToKafka' => array('perm_publish_kafka'),\n                    'pushProposals' => array('perm_sync'),\n                    'queryEnrichment' => array('perm_add'),\n                    'recoverEvent' => array(),\n                    'removePivot' => array('*'),\n                    'removeTag' => array('perm_tagger'),\n                    'reportValidationIssuesEvents' => array(),\n                    'restoreDeletedEvents' => array(),\n                    'restSearch' => array('*'),\n                    'restSearchExport' => array('*'),\n                    'runTaxonomyExclusivityCheck' => array('*'),\n                    'saveFreeText' => array('perm_add'),\n                    'stix' => array('*'),\n                    'stix2' => array('*'),\n                    'strposarray' => array(),\n                    'toggleCorrelation' => array('perm_add'),\n                    'unprotect' => ['perm_add'],\n                    'unpublish' => array('perm_modify'),\n                    'updateGraph' => array('*'),\n                    'upload_analysis_file' => array('perm_add'),\n                    'upload_sample' => array('AND' => array('perm_auth', 'perm_add')),\n                    'upload_stix' => array('perm_modify'),\n                    'view' => array('*'),\n                    'viewClusterRelations' => array('*'),\n                    'viewEventAttributes' => array('*'),\n                    'viewGraph' => array('*'),\n                    'viewGalaxyMatrix' => array('*'),\n                    'xml' => array('*'),\n                'addEventLock' => ['perm_auth'],\n                'removeEventLock' => ['perm_auth'],\n                'generateCount' => array(),\n            ),\n            'favouriteTags' => array(\n                'toggle' => array('*'),\n                'getToggleField' => array('*')\n            ),\n            'feeds' => array(\n                'add' => array(),\n                'cacheFeeds' => array(),\n                'compareFeeds' => ['host_org_user'],\n                'delete' => array(),\n                'disable' => array(),\n                'edit' => array(),\n                'enable' => array(),\n                'feedCoverage' => ['host_org_user'],\n                'fetchFromAllFeeds' => array(),\n                'fetchFromFeed' => array(),\n                'fetchSelectedFromFreetextIndex' => array(),\n                'getEvent' => array(),\n                'importFeeds' => array(),\n                'index' => ['host_org_user'],\n                'loadDefaultFeeds' => array(),\n                'previewEvent' => ['host_org_user'],\n                'previewIndex' => ['host_org_user'],\n                'searchCaches' => ['host_org_user'],\n                'toggleSelected' => array(),\n                'view' => ['host_org_user'],\n            ),\n            'galaxies' => array(\n                'attachCluster' => array('perm_tagger'),\n                'attachMultipleClusters' => array('perm_tagger'),\n                'delete' => array(),\n                'disable' => array(),\n                'enable' => array(),\n                'export' => array('*'),\n                'forkTree' => array('*'),\n                'index' => array('*'),\n                'import' => array('perm_galaxy_editor'),\n                'pushCluster' => array('perm_sync'),\n                'relationsGraph' => array('*'),\n                'selectGalaxy' => array('perm_tagger'),\n                'selectGalaxyNamespace' => array('perm_tagger'),\n                'selectCluster' => array('perm_tagger'),\n                'showGalaxies' => array('*'),\n                'toggle' => array(),\n                'update' => array(),\n                'view' => array('*'),\n                'viewGraph' => array('*'),\n                'wipe_default' => array(),\n            ),\n            'galaxyClusterBlocklists' => array(\n                'add' => array(),\n                'delete' => array(),\n                'edit' => array(),\n                'index' => array(),\n                'massDelete' => array(),\n            ),\n            'galaxyClusters' => array(\n                'add' => array('perm_galaxy_editor'),\n                'delete' => array('perm_galaxy_editor'),\n                'detach' => array('perm_tagger'),\n                'edit' => array('perm_galaxy_editor'),\n                'index' => array('*'),\n                'publish' => array('perm_galaxy_editor'),\n                'restore' => array('perm_galaxy_editor'),\n                'restSearch' => array('*'),\n                'unpublish' => array('perm_galaxy_editor'),\n                'updateCluster' => array('perm_galaxy_editor'),\n                'view' => array('*'),\n                'viewCyCatRelations' => array('*'),\n                'viewGalaxyMatrix' => array('*'),\n                'viewRelations' => array('*'),\n                'viewRelationTree' => array('*'),\n            ),\n            'galaxyClusterRelations' => array(\n                'add' => array('perm_galaxy_editor'),\n                'delete' => array('perm_galaxy_editor'),\n                'edit' => array('perm_galaxy_editor'),\n                'index' => array('*'),\n                'view' => array('*'),\n            ),\n            'galaxyElements' => array(\n                'delete' => array('perm_galaxy_editor'),\n                'flattenJson' => array('perm_galaxy_editor'),\n                'index' => array('*'),\n            ),\n            'jobs' => array(\n                    'cache' => array('*'),\n                    'getError' => array(),\n                    'getGenerateCorrelationProgress' => array(),\n                    'getProgress' => array('*'),\n                    'index' => array(),\n                    'clearJobs' => array()\n            ),\n            'logs' => array(\n                    'admin_index' => array('perm_audit'),\n                    'admin_search' => array('perm_audit'),\n                    'event_index' => array('*'),\n                    'returnDates' => array('*'),\n                    'testForStolenAttributes' => array(),\n                    'pruneUpdateLogs' => array(),\n                    'index' => array('perm_audit')\n            ),\n        'auditLogs' => [\n            'admin_index' => ['perm_audit'],\n            'fullChange' => ['perm_audit'],\n            'eventIndex' => ['*'],\n            'returnDates' => ['*'],\n        ],\n        'accessLogs' => [\n            'admin_index' => [],\n            'admin_request' => [],\n            'admin_queryLog' => [],\n        ],\n        'modules' => array(\n            'index' => array('perm_auth'),\n            'queryEnrichment' => array('perm_auth'),\n        ),\n            'news' => array(\n                'add' => array(),\n                'edit' => array(),\n                'delete' => array(),\n                'admin_index' => array(),\n                'index' => ['*'],\n            ),\n            'noticelists' => array(\n                    'delete' => array(),\n                    'enableNoticelist' => array(),\n                    'getToggleField' => array(),\n                    'index' => array('*'),\n                    'toggleEnable' => array(),\n                    'update' => array(),\n                    'view' => array('*'),\n                    'preview_entries' => array('*')\n            ),\n            'objects' => array(\n                    'add' => array('perm_add'),\n                    'addValueField' => array('perm_add'),\n                    'delete' => array('perm_add'),\n                    'edit' => array('perm_add'),\n                    'get_row' => array('perm_add'),\n                    'orphanedObjectDiagnostics' => array(),\n                    'editField' => array('perm_add'),\n                    'fetchEditForm' => array('perm_add'),\n                    'fetchViewValue' => array('*'),\n                    'quickAddAttributeForm' => array('perm_add'),\n                    'quickFetchTemplateWithValidObjectAttributes' => array('perm_add'),\n                    'restSearch' => array('*'),\n                    'proposeObjectsFromAttributes' => array('*'),\n                    'groupAttributesIntoObject' => array('perm_add'),\n                    'revise_object' => array('perm_add'),\n                    'view' => array('*'),\n                'createFromFreetext' => ['perm_add'],\n            ),\n            'objectReferences' => array(\n                'add' => array('perm_add'),\n                'bulkAdd' => array('perm_add'),\n                'delete' => array('perm_add'),\n                'view' => array('*'),\n            ),\n            'objectTemplates' => array(\n                'activate' => array(),\n                'add' => array('perm_object_template'),\n                'edit' => array('perm_object_template'),\n                'delete' => array('perm_object_template'),\n                'getToggleField' => array(),\n                'getRaw' => array('perm_object_template'),\n                'objectChoice' => array('*'),\n                'objectMetaChoice' => array('perm_add'),\n                'view' => array('*'),\n                'index' => array('*'),\n                'update' => array(),\n                'possibleObjectTemplates' => ['*'],\n            ),\n            'objectTemplateElements' => array(\n                'viewElements' => array('*')\n            ),\n            'orgBlocklists' => array(\n                'add' => array(),\n                'delete' => array(),\n                'edit' => array(),\n                'index' => array(),\n            ),\n            'organisations' => array(\n                'admin_add' => array(),\n                'admin_delete' => array(),\n                'admin_edit' => array(),\n                'admin_generateuuid' => array(),\n                'admin_merge' => array(),\n                'fetchOrgsForSG' => array('perm_sharing_group'),\n                'fetchSGOrgRow' => array('*'),\n                'getUUIDs' => array('perm_sync'),\n                'index' => ['organisation_index'],\n                'view' => array('*'),\n            ),\n            'pages' => array(\n                'display' => array('*'),\n            ),\n            'posts' => array(\n                'add' => ['AND' => ['not_read_only_authkey', 'discussion_enabled']],\n                'delete' => ['AND' => ['not_read_only_authkey', 'discussion_enabled']],\n                'edit' => ['AND' => ['not_read_only_authkey', 'discussion_enabled']],\n                'pushMessageToZMQ' => array()\n            ),\n            'regexp' => array(\n                'admin_add' => array('perm_regexp_access'),\n                'admin_clean' => array(),\n                'admin_delete' => array('perm_regexp_access'),\n                'admin_edit' => array('perm_regexp_access'),\n                'admin_index' => array('perm_regexp_access'),\n                'cleanRegexModifiers' => array(),\n                'index' => array('*'),\n            ),\n            'restClientHistory' => array(\n                'delete' => array('not_read_only_authkey'),\n                'index' => array('*')\n            ),\n            'roles' => array(\n                'admin_add' => array(),\n                'admin_delete' => array(),\n                'admin_edit' => array(),\n                'admin_set_default' => array(),\n                'index' => array('*'),\n                'view' => array('*'),\n            ),\n            'servers' => array(\n                'add' => array(),\n                'dbSchemaDiagnostic' => array(),\n                'dbConfiguration' => array(),\n                'cache' => array(),\n                'changePriority' => array(),\n                'checkout' => array(),\n                'clearWorkerQueue' => array(),\n                'createSync' => array('perm_sync'),\n                'delete' => array(),\n                'deleteFile' => array(),\n                'edit' => array(),\n                'eventBlockRule' => array(),\n                'fetchServersForSG' => array('perm_sharing_group'),\n                'filterEventIndex' => array(),\n                'getAvailableSyncFilteringRules' => array('*'),\n                'getInstanceUUID' => array('perm_sync'),\n                'getPyMISPVersion' => array('*'),\n                'getRemoteUser' => array(),\n                'getSetting' => array(),\n                'getSubmodulesStatus' => array(),\n                'getSubmoduleQuickUpdateForm' => array(),\n                'getWorkers' => array(),\n                'getVersion' => array('perm_auth'),\n                'idTranslator' => ['host_org_user'],\n                'import' => array(),\n                'index' => array(),\n                'ipUser' => ['perm_site_admin'],\n                'ondemandAction' => array(),\n                'postTest' => array('*'),\n                'previewEvent' => array(),\n                'previewIndex' => array(),\n                'compareServers' => [],\n                'pull' => array(),\n                'purgeSessions' => array(),\n                'push' => array(),\n                'queryAvailableSyncFilteringRules' => array(),\n                'releaseUpdateLock' => array(),\n                'resetRemoteAuthKey' => array(),\n                'removeOrphanedCorrelations' => array(),\n                'restartDeadWorkers' => array(),\n                'restartWorkers' => array(),\n                'serverSettings' => array(),\n                'serverSettingsEdit' => array(),\n                'serverSettingsReloadSetting' => array(),\n                'startWorker' => array(),\n                'startZeroMQServer' => array(),\n                'statusZeroMQServer' => array(),\n                'stopWorker' => array(),\n                'stopZeroMQServer' => array(),\n                'testConnection' => array(),\n                'update' => array(),\n                'updateJSON' => array(),\n                'updateProgress' => array(),\n                'updateSubmodule' => array(),\n                'uploadFile' => array(),\n                'killAllWorkers' => [],\n                'cspReport' => ['*'],\n                'pruneDuplicateUUIDs' => array(),\n                'removeDuplicateEvents' => array(),\n                'upgrade2324' => array(),\n                'cleanModelCaches' => array(),\n                'updateDatabase' => array(),\n                'rest' => ['perm_auth'],\n            ),\n            'shadowAttributes' => array(\n                'accept' => array('perm_add'),\n                'acceptSelected' => array('perm_add'),\n                'add' => array('perm_add'),\n                'add_attachment' => array('perm_add'),\n                'delete' => array('perm_add'),\n                'discard' => array('perm_add'),\n                'discardSelected' => array('perm_add'),\n                'download' => array('*'),\n                'edit' => array('perm_add'),\n                'generateCorrelation' => array(),\n                'index' => array('*'),\n                'view' => array('*'),\n                'viewPicture' => array('*'),\n            ),\n            'sharingGroupBlueprints' => array(\n                'add' => array('perm_sharing_group'),\n                'delete' => array('perm_sharing_group'),\n                'detach' => array('perm_sharing_group'),\n                'edit' => array('perm_sharing_group'),\n                'execute' => array('perm_sharing_group'),\n                'index' => array('perm_sharing_group'),\n                'view' => array('perm_sharing_group'),\n                'viewOrgs' => array('perm_sharing_group'),\n            ),\n            'sharingGroups' => array(\n                'add' => array('perm_sharing_group'),\n                'addServer' => array('perm_sharing_group'),\n                'addOrg' => array('perm_sharing_group'),\n                'delete' => array('perm_sharing_group'),\n                'edit' => array('perm_sharing_group'),\n                'index' => array('*'),\n                'removeServer' => array('perm_sharing_group'),\n                'removeOrg' => array('perm_sharing_group'),\n                'view' => array('*'),\n            ),\n            'sightings' => array(\n                'add' => array('perm_sighting'),\n                'restSearch' => array('perm_sighting'),\n                'advanced' => array('perm_sighting'),\n                'delete' => ['AND' => ['perm_sighting', 'perm_modify_org']],\n                'index' => array('*'),\n                'listSightings' => array('*'),\n                'quickDelete' => ['AND' => ['perm_sighting', 'perm_modify_org']],\n                'viewSightings' => array('*'),\n                'bulkSaveSightings' => array('OR' => array('perm_sync', 'perm_sighting')),\n                'filterSightingUuidsForPush' => ['perm_sync'],\n                'quickAdd' => array('perm_sighting')\n            ),\n            'sightingdb' => array(\n                'add' => array(),\n                'edit' => array(),\n                'delete' => array(),\n                'index' => array(),\n                'requestStatus' => array(),\n                'search' => array()\n            ),\n            'tagCollections' => array(\n                'add' => array('perm_tag_editor'),\n                'addTag' => array('perm_tag_editor'),\n                'delete' => array('perm_tag_editor'),\n                'edit' => array('perm_tag_editor'),\n                'getRow' => array('perm_tag_editor'),\n                'import' => array('perm_tag_editor'),\n                'index' => array('*'),\n                'removeTag' => array('perm_tag_editor'),\n                'view' => array('*')\n            ),\n            'tags' => array(\n                'add' => array('perm_tag_editor'),\n                'attachTagToObject' => array('perm_tagger'),\n                'delete' => array(),\n                'edit' => array(),\n                'index' => array('*'),\n                'modifyTagRelationship' => ['perm_tagger'],\n                'quickAdd' => array('perm_tag_editor'),\n                'removeTagFromObject' => array('perm_tagger'),\n                'search' => array('*'),\n                'selectTag' => array('perm_tagger'),\n                'selectTaxonomy' => array('perm_tagger'),\n                'showEventTag' => array('*'),\n                'showAttributeTag' => array('*'),\n                'tagStatistics' => array('*'),\n                'view' => array('*'),\n                'viewGraph' => array('*'),\n                'viewTag' => array('*')\n            ),\n            'tasks' => array(\n                'index' => array(),\n                'setTask' => array(),\n            ),\n            'taxonomies' => array(\n                'addTag' => array(),\n                'delete' => array(),\n                'disable' => array(),\n                'disableTag' => array(),\n                'enable' => array(),\n                'index' => array('*'),\n                'taxonomy_tags' => array('*'),\n                'taxonomyMassConfirmation' => array('perm_tagger'),\n                'taxonomyMassHide' => array('perm_tagger'),\n                'taxonomyMassUnhide' => array('perm_tagger'),\n                'toggleRequired' => array(),\n                'toggleHighlighted' => array(),\n                'update' => array(),\n                'import' => [],\n                'export' => ['*'],\n                'view' => array('*'),\n                'unhideTag' => array('perm_tagger'),\n                'hideTag' => array('perm_tagger'),\n                'normalizeCustomTagsToTaxonomyFormat' => [],\n            ),\n            'taxiiServers' => [\n                'add' => ['perm_admin'],\n                'edit' => ['perm_admin'],\n                'index' => ['perm_admin'],\n                'delete' => ['perm_admin'],\n                'view' => ['perm_admin'],\n                'push' => ['perm_admin'],\n                'getRoot' => ['perm_admin'],\n                'getCollections' => ['perm_admin']\n            ],\n            'templateElements' => array(\n                'add' => array('perm_template'),\n                'delete' => array('perm_template'),\n                'edit' => array('perm_template'),\n                'index' => array('*'),\n                'templateElementAddChoices' => array('perm_template'),\n            ),\n            'templates' => array(\n                'add' => array('perm_template'),\n                'delete' => array('perm_template'),\n                'deleteTemporaryFile' => array('perm_add'),\n                'edit' => array('perm_template'),\n                'index' => array('*'),\n                'populateEventFromTemplate' => array('perm_add'),\n                'saveElementSorting' => array('perm_template'),\n                'submitEventPopulation' => array('perm_add'),\n                'templateChoices' => array('*'),\n                'uploadFile' => array('*'),\n                'view' => array('*'),\n            ),\n            'threads' => array(\n                'index' => array('discussion_enabled'),\n                'view' => array('discussion_enabled'),\n                'viewEvent' => array('discussion_enabled'),\n            ),\n            'users' => array(\n                'acceptRegistrations' => array(),\n                'admin_add' => ['AND' => ['perm_admin', 'add_user_enabled']],\n                'admin_delete' => array('perm_admin'),\n                'admin_destroy' => array(),\n                'admin_edit' => array('perm_admin'),\n                'admin_email' => array('perm_admin'),\n                'admin_filterUserIndex' => array('perm_admin'),\n                'admin_index' => array('perm_admin'),\n                'admin_massToggleField' => array('perm_admin'),\n                'admin_monitor' => array(),\n                'admin_quickEmail' => array('perm_admin'),\n                'admin_view' => array('perm_admin'),\n                'attributehistogram' => array('*'),\n                'change_pw' => ['AND' => ['self_management_enabled', 'password_change_enabled', 'not_read_only_authkey']],\n                'checkAndCorrectPgps' => array(),\n                'checkIfLoggedIn' => array('*'),\n                'dashboard' => array('*'),\n                'delete' => array('perm_admin'),\n                'discardRegistrations' => array(),\n                'downloadTerms' => array('*'),\n                'edit' => array('self_management_enabled'),\n                'email_otp' => array('*'),\n                'searchGpgKey' => array('*'),\n                'fetchGpgKey' => array('*'),\n                'histogram' => array('*'),\n                'initiatePasswordReset' => ['AND' => ['perm_admin', 'password_change_enabled']],\n                'login' => array('*'),\n                'logout' => array('*'),\n                'notificationSettings' => ['*'],\n                'register' => array('*'),\n                'registrations' => array(),\n                'resetAllSyncAuthKeys' => array(),\n                'resetauthkey' => ['AND' => ['self_management_enabled', 'perm_auth', 'not_read_only_authkey']],\n                'request_API' => array('*'),\n                'routeafterlogin' => array('*'),\n                'statistics' => array('*'),\n                'tagStatisticsGraph' => array('*'),\n                'terms' => array('*'),\n                'updateLoginTime' => array('*'),\n                'updateToAdvancedAuthKeys' => array(),\n                'verifyCertificate' => array(),\n                'verifyGPG' => array(),\n                'view' => array('*'),\n                'viewPeriodicSummary' => ['*'],\n                'getGpgPublicKey' => array('*'),\n                'unsubscribe' => ['*'],\n            ),\n            'userSettings' => array(\n                'index' => array('*'),\n                'view' => array('*'),\n                'setSetting' => array('not_read_only_authkey'),\n                'getSetting' => array('*'),\n                'delete' => array('not_read_only_authkey'),\n                'setHomePage' => array('not_read_only_authkey'),\n                'eventIndexColumnToggle' => ['*'],\n            ),\n            'warninglists' => array(\n                'checkValue' => ['*'],\n                'delete' => ['perm_warninglist'],\n                'enableWarninglist' => ['perm_warninglist'],\n                'getToggleField' => ['perm_warninglist'],\n                'index' => array('*'),\n                'toggleEnable' => ['perm_warninglist'],\n                'update' => array(),\n                'view' => array('*'),\n                'edit' => ['perm_warninglist'],\n                'add' => ['perm_warninglist'],\n                'export' => ['*'],\n                'import' => ['perm_warninglist'],\n            ),\n            'workflows' => [\n                'index'=> [],\n                'rebuildRedis'=> [],\n                'edit'=> [],\n                'delete'=> [],\n                'view'=> [],\n                'editor'=> [],\n                'triggers'=> [],\n                'moduleIndex'=> [],\n                'moduleView'=> [],\n                'toggleModule'=> [],\n                'checkGraph'=> [],\n                'executeWorkflow'=> [],\n                'debugToggleField'=> [],\n                'massToggleField'=> [],\n                'moduleStatelessExecution'=> [],\n            ],\n            'workflowBlueprints' => [\n                'add' => [],\n                'delete' => [],\n                'edit' => [],\n                'export' => [],\n                'import' => [],\n                'index' => [],\n                'update' => [],\n                'view' => [],\n            ],\n            'allowedlists' => array(\n                'admin_add' => array('perm_regexp_access'),\n                'admin_delete' => array('perm_regexp_access'),\n                'admin_edit' => array('perm_regexp_access'),\n                'admin_index' => array('perm_regexp_access'),\n                'index' => array('*'),\n            ),\n            'eventGraph' => array(\n                'view' => array('*'),\n                'viewPicture' => array('*'),\n                'add' => array('perm_add'),\n                'delete' => array('perm_modify'),\n            )\n    );\n\n    private $dynamicChecks = [];\n\n    /** @var int */\n    private $hostOrgId;\n\n    public function __construct(ComponentCollection $collection, $settings = array())\n    {\n        parent::__construct($collection, $settings);\n\n        $this->hostOrgId = (int)Configure::read('MISP.host_org_id');\n\n        $this->dynamicChecks['host_org_user'] = function (array $user) {\n            return (int)$user['org_id'] === $this->hostOrgId;\n        };\n        $this->dynamicChecks['self_management_enabled'] = function (array $user) {\n            if (Configure::read('MISP.disableUserSelfManagement') && !$user['Role']['perm_admin'])  {\n                throw new MethodNotAllowedException('User self-management has been disabled on this instance.');\n            }\n            return true;\n        };\n        $this->dynamicChecks['password_change_enabled'] = function (array $user) {\n            if (Configure::read('MISP.disable_user_password_change')) {\n                throw new MethodNotAllowedException('User password change has been disabled on this instance.');\n            }\n            return true;\n        };\n        $this->dynamicChecks['add_user_enabled'] = function (array $user) {\n            if (Configure::read('MISP.disable_user_add')) {\n                throw new MethodNotAllowedException('Adding users has been disabled on this instance.');\n            }\n            return true;\n        };\n        $this->dynamicChecks['delegation_enabled'] = function (array $user) {\n            return (bool)Configure::read('MISP.delegation');\n        };\n        $this->dynamicChecks['discussion_enabled'] = function (array $user) {\n            return !Configure::read('MISP.discussion_disable');\n        };\n        // Returns true if current user is not using advanced auth key or if authkey is not read only\n        $this->dynamicChecks['not_read_only_authkey'] = function (array $user) {\n            return !isset($user['authkey_read_only']) || !$user['authkey_read_only'];\n        };\n        // If `Security.hide_organisation_index_from_users` is enabled, only user with sharing group permission can see org index\n        $this->dynamicChecks['organisation_index'] = function (array $user) {\n            if (Configure::read('Security.hide_organisation_index_from_users')) {\n                return $user['Role']['perm_sharing_group'];\n            }\n            return true;\n        };\n    }\n\n    /**\n     * Returns true if user can modify given event.\n     *\n     * @param array $event\n     * @param array $user\n     * @return bool\n     */\n    public function canModifyEvent(array $user, array $event)\n    {\n        if (!isset($event['Event'])) {\n            throw new InvalidArgumentException('Passed object does not contain an Event.');\n        }\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        if ($user['Role']['perm_modify_org'] && $event['Event']['orgc_id'] == $user['org_id']) {\n            return true;\n        }\n        if ($user['Role']['perm_modify'] && $event['Event']['user_id'] == $user['id']) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns true if user can publish the given event.\n     *\n     * @param array $user\n     * @param array $event\n     * @return bool\n     */\n    public function canPublishEvent(array $user, array $event)\n    {\n        if (!isset($event['Event'])) {\n            throw new InvalidArgumentException('Passed object does not contain an Event.');\n        }\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        if ($user['Role']['perm_publish'] && $event['Event']['orgc_id'] == $user['org_id']) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns true if user can add or remove tags for given event.\n     *\n     * @param array $user\n     * @param array $event\n     * @param bool $isTagLocal\n     * @return bool\n     */\n    public function canModifyTag(array $user, array $event, $isTagLocal = false)\n    {\n        if (!isset($event['Event'])) {\n            throw new InvalidArgumentException('Passed object does not contain an Event.');\n        }\n        // Site admin can add any tag\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        // User must have tagger or sync permission\n        if (!$user['Role']['perm_tagger'] && !$user['Role']['perm_sync']) {\n            return false;\n        }\n        if ($this->canModifyEvent($user, $event)) {\n            return true; // full access\n        }\n        if ($isTagLocal && $this->hostOrgId === (int)$user['org_id']) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @param array $user\n     * @param array $event\n     * @return bool\n     */\n    public function canDisableCorrelation(array $user, array $event)\n    {\n        if (Configure::read('MISP.completely_disable_correlation')) {\n            return false; // correlations are completely disabled\n        }\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        return Configure::read('MISP.allow_disabling_correlation') && $this->canModifyEvent($user, $event);\n    }\n\n    /**\n     * @param array $user\n     * @param array $tagCollection\n     * @return bool\n     */\n    public function canModifyTagCollection(array $user, array $tagCollection)\n    {\n        if (!isset($tagCollection['TagCollection'])) {\n            throw new InvalidArgumentException('Passed object does not contain a TagCollection.');\n        }\n        if (!empty($user['Role']['perm_site_admin'])) {\n            return true;\n        }\n        return $user['org_id'] == $tagCollection['TagCollection']['org_id'];\n    }\n\n    /**\n     * Only users that can modify organisation can delete sightings as sighting is not linked to user.\n     *\n     * @param array $user\n     * @param array $sighting\n     * @return bool\n     */\n    public function canDeleteSighting(array $user, array $sighting)\n    {\n        if (!isset($sighting['Sighting'])) {\n            throw new InvalidArgumentException('Passed object does not contain a Sighting.');\n        }\n        // Site admin can delete any sighting\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        if (!$user['Role']['perm_modify_org']) {\n            return false;\n        }\n        return $sighting['Sighting']['org_id'] == $user['org_id'];\n    }\n\n    /**\n     * @param array $user\n     * @param array $eventReport\n     * @return bool\n     */\n    public function canEditEventReport(array $user, array $eventReport)\n    {\n        if (!isset($eventReport['Event'])) {\n            throw new InvalidArgumentException('Passed object does not contain an Event.');\n        }\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        if ($eventReport['Event']['orgc_id'] == $user['org_id']) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Checks if user can modify given galaxy cluster\n     *\n     * @param array $user\n     * @param array $cluster\n     * @return bool\n     */\n    public function canModifyGalaxyCluster(array $user, array $cluster)\n    {\n        if (!isset($cluster['GalaxyCluster'])) {\n            throw new InvalidArgumentException('Passed object does not contain an GalaxyCluster.');\n        }\n        if ($cluster['GalaxyCluster']['default']) {\n            return false; // it is not possible to edit default clusters\n        }\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        if (!$user['Role']['perm_galaxy_editor']) {\n            return false;\n        }\n        return $cluster['GalaxyCluster']['orgc_id'] == $user['org_id'];\n    }\n\n    /**\n     * Checks if user can publish given galaxy cluster\n     *\n     * @param array $user\n     * @param array $cluster\n     * @return bool\n     */\n    public function canPublishGalaxyCluster(array $user, array $cluster)\n    {\n        if (!$this->canModifyGalaxyCluster($user, $cluster)) {\n            return false;\n        }\n        return (bool)$user['Role']['perm_publish'];\n    }\n\n    private function __checkLoggedActions($user, $controller, $action)\n    {\n        $loggedActions = array(\n            'servers' => array(\n                'index' => array(\n                    'role' => array(\n                        'NOT' => array(\n                            'perm_site_admin'\n                        )\n                    ),\n                    'message' => __('This could be an indication of an attempted privilege escalation on older vulnerable versions of MISP (<2.4.115)')\n                )\n            )\n        );\n        foreach ($loggedActions as $k => $v) {\n            $loggedActions[$k] = array_change_key_case($v);\n        }\n        if (!empty($loggedActions[$controller])) {\n            if (!empty($loggedActions[$controller][$action])) {\n                $message = $loggedActions[$controller][$action]['message'];\n                $hit = false;\n                if (empty($loggedActions[$controller][$action]['role'])) {\n                    $hit = true;\n                } else {\n                    $role_req = $loggedActions[$controller][$action]['role'];\n                    if (empty($role_req['OR']) && empty($role_req['AND']) && empty($role_req['NOT'])) {\n                        $role_req = array('OR' => $role_req);\n                    }\n                    if (!empty($role_req['NOT'])) {\n                        foreach ($role_req['NOT'] as $k => $v) {\n                            if (!$user['Role'][$v]) {\n                                $hit = true;\n                                continue;\n                            }\n                        }\n                    }\n                    if (!$hit && !empty($role_req['AND'])) {\n                        $subhit = true;\n                        foreach ($role_req['AND'] as $k => $v) {\n                            $subhit = $subhit && $user['Role'][$v];\n                        }\n                        if ($subhit) {\n                            $hit = true;\n                        }\n                    }\n                    if (!$hit && !empty($role_req['OR'])) {\n                        foreach ($role_req['OR'] as $k => $v) {\n                            if ($user['Role'][$v]) {\n                                $hit = true;\n                                continue;\n                            }\n                        }\n                    }\n                    if ($hit) {\n                        $this->Log = ClassRegistry::init('Log');\n                        $this->Log->create();\n                        $this->Log->save(array(\n                                'org' => 'SYSTEM',\n                                'model' => 'User',\n                                'model_id' => $user['id'],\n                                'email' => $user['email'],\n                                'action' => 'security',\n                                'user_id' => $user['id'],\n                                'title' => __('User triggered security alert by attempting to access /%s/%s. Reason why this endpoint is of interest: %s', $controller, $action, $message),\n                        ));\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @param array $user\n     * @param string $controller\n     * @param string $action\n     * @return bool\n     */\n    public function canUserAccess($user, $controller, $action)\n    {\n        try {\n            $this->checkAccess($user, $controller, $action, false);\n        } catch (NotFoundException $e) {\n            throw new RuntimeException(\"Invalid controller '$controller' specified.\", 0, $e);\n        } catch (MethodNotAllowedException $e) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * The check works like this:\n     * - If the user is a site admin, return true\n     * - If the requested action has an OR-d list, iterate through the list. If any of the permissions are set for the user, return true\n     * - If the requested action has an AND-ed list, iterate through the list. If any of the permissions for the user are not set, turn the check to false. Otherwise return true.\n     * - If the requested action has a permission, check if the user's role has it flagged. If yes, return true\n     * - If we fall through all of the checks, return an exception.\n     *\n     * @param array|null $user\n     * @param string $controller\n     * @param string $action\n     * @param bool $checkLoggedActions\n     * @return true\n     * @throws NotFoundException\n     * @throws MethodNotAllowedException\n     */\n    public function checkAccess($user, $controller, $action, $checkLoggedActions = true)\n    {\n        $controller = lcfirst(Inflector::camelize($controller));\n        $action = strtolower($action);\n        if ($checkLoggedActions) {\n            $this->__checkLoggedActions($user, $controller, $action);\n        }\n        if ($user && $user['Role']['perm_site_admin']) {\n            return true;\n        }\n        if (!isset(self::ACL_LIST[$controller])) {\n            throw new NotFoundException('Invalid controller.');\n        }\n        $controllerAclList = array_change_key_case(self::ACL_LIST[$controller]);\n        if (!empty($controllerAclList[$action])) {\n            $rules = $controllerAclList[$action];\n            if (in_array('*', $rules, true)) {\n                return true;\n            }\n            if (isset($rules['OR'])) {\n                foreach ($rules['OR'] as $permission) {\n                    if (isset($this->dynamicChecks[$permission])) {\n                        if ($this->dynamicChecks[$permission]($user)) {\n                            return true;\n                        }\n                    } else {\n                        if ($user['Role'][$permission]) {\n                            return true;\n                        }\n                    }\n                }\n            } elseif (isset($rules['AND'])) {\n                $allConditionsMet = true;\n                foreach ($rules['AND'] as $permission) {\n                    if (isset($this->dynamicChecks[$permission])) {\n                        if (!$this->dynamicChecks[$permission]($user)) {\n                            $allConditionsMet = false;\n                        }\n                    } else {\n                        if (!$user['Role'][$permission]) {\n                            $allConditionsMet = false;\n                        }\n                    }\n                }\n                if ($allConditionsMet) {\n                    return true;\n                }\n            } elseif (isset($this->dynamicChecks[$rules[0]])) {\n                if ($this->dynamicChecks[$rules[0]]($user)) {\n                    return true;\n                }\n            } elseif ($user['Role'][$rules[0]]) {\n                return true;\n            }\n        }\n        throw new MethodNotAllowedException('You do not have permission to use this functionality.');\n    }\n\n    private function __findAllFunctions()\n    {\n        $functionsToIgnore = ['beforeFilter', 'afterFilter', 'beforeRender',  'getEventManager'];\n\n        $functionFinder = '/function[\\s\\n]+(\\S+)[\\s\\n]*\\(/';\n        $dir = new Folder(APP . 'Controller');\n        $files = $dir->find('.*\\.php');\n        $results = array();\n        foreach ($files as $file) {\n            $controllerName = lcfirst(str_replace('Controller.php', \"\", $file));\n            if ($controllerName === 'app') {\n                $controllerName = '*';\n            }\n            $functionArray = array();\n            $fileContents = FileAccessTool::readFromFile(APP . 'Controller' . DS . $file);\n            $fileContents = preg_replace('/\\/\\*[^\\*]+?\\*\\//', '', $fileContents);\n            preg_match_all($functionFinder, $fileContents, $functionArray);\n            foreach ($functionArray[1] as $function) {\n                if ($function[0] !== '_' && !in_array($function, $functionsToIgnore, true)) {\n                    $results[$controllerName][] = $function;\n                }\n            }\n        }\n        return $results;\n    }\n\n    public function printAllFunctionNames($content = false)\n    {\n        $results = $this->__findAllFunctions();\n        ksort($results);\n        return $results;\n    }\n\n    public function findMissingFunctionNames($content = false)\n    {\n        $results = $this->__findAllFunctions();\n        $missing = array();\n        foreach ($results as $controller => $functions) {\n            foreach ($functions as $function) {\n                if (!isset(self::ACL_LIST[$controller]) || !in_array($function, array_keys(self::ACL_LIST[$controller]))) {\n                    $missing[$controller][] = $function;\n                }\n            }\n        }\n        return $missing;\n    }\n\n    public function printRoleAccess($content = false)\n    {\n        $results = array();\n        $this->Role = ClassRegistry::init('Role');\n        $conditions = array();\n        if (is_numeric($content)) {\n            $conditions = array('Role.id' => $content);\n        }\n        $roles = $this->Role->find('all', array(\n            'recursive' => -1,\n            'conditions' => $conditions\n        ));\n        if (empty($roles)) {\n            throw new NotFoundException('Role not found.');\n        }\n        foreach ($roles as $role) {\n            $urls = $this->__checkRoleAccess($role['Role']);\n            $results[$role['Role']['id']] = array('name' => $role['Role']['name'], 'urls' => $urls);\n        }\n        return $results;\n    }\n\n    private function __checkRoleAccess(array $role)\n    {\n        $result = array();\n        $fakeUser = ['Role' => $role, 'org_id' => $this->hostOrgId];\n        foreach (self::ACL_LIST as $controller => $actions) {\n            $controllerNames = Inflector::variable($controller) === Inflector::underscore($controller) ?\n                array(Inflector::variable($controller)) :\n                array(Inflector::variable($controller), Inflector::underscore($controller));\n            foreach ($controllerNames as $controllerName) {\n                foreach ($actions as $action => $permissions) {\n                    if ($this->canUserAccess($fakeUser, $controllerName, $action)) {\n                        $result[] = \"/$controllerName/$action\";\n                    }\n                }\n            }\n        }\n        return $result;\n    }\n}\n"], "fixing_code": ["<?php\nApp::uses('Component', 'Controller');\n\nclass ACLComponent extends Component\n{\n\n    // syntax:\n    // $__aclList[$controller][$action] = $permission_rules\n    // $controller == '*'                 -  any controller can have this action\n    // $action == array()                 -  site admin only has access\n    // $action == '*'                     -  any role has access\n    // $action == array('OR' => array())  -  any role in the array has access\n    // $action == array('AND' => array()) -  roles with all permissions in the array have access\n    // If we add any new functionality to MISP and we don't add it to this list, it will only be visible to site admins.\n    const ACL_LIST = array(\n            '*' => array(\n                'blackhole' => array(),\n                'debugACL' => array(),\n                'queryACL' => array(),\n                'restSearch' => array('*'),\n            ),\n            'api' => [\n                'rest' => ['perm_auth'],\n                'viewDeprecatedFunctionUse' => [],\n                'openapi' => ['*'],\n                'getApiInfo' => ['*'],\n                'getAllApis' => ['*'],\n            ],\n            'attributes' => array(\n                'add' => array('perm_add'),\n                'add_attachment' => array('perm_add'),\n                'add_threatconnect' => array('perm_add'),\n                'addTag' => array('perm_tagger'),\n                'attributeReplace' => array('perm_add'),\n                'attributeStatistics' => array('*'),\n                'bro' => array('*'),\n                'checkAttachments' => array(),\n                'checkComposites' => array('perm_admin'),\n                'checkOrphanedAttributes' => array(),\n                'delete' => array('perm_add'),\n                'deleteSelected' => array('perm_add'),\n                'describeTypes' => array('*'),\n                'download' => array('*'),\n                'downloadAttachment' => array('*'),\n                'downloadSample' => array('*'),\n                'edit' => array('perm_add'),\n                'editField' => array('perm_add'),\n                'editSelected' => array('perm_add'),\n                'exportSearch' => array('*'),\n                'fetchEditForm' => array('perm_add'),\n                'fetchViewValue' => array('*'),\n                'generateCorrelation' => array(),\n                'getMassEditForm' => array('perm_add'),\n                'hoverEnrichment' => array('perm_add'),\n                'index' => array('*'),\n                'pruneOrphanedAttributes' => array(),\n                'removeTag' => array('perm_tagger'),\n                'reportValidationIssuesAttributes' => array(),\n                'restore' => array('perm_add'),\n                'restSearch' => array('*'),\n                'returnAttributes' => array('*'),\n                'rpz' => array('*'),\n                'search' => array('*'),\n                'toggleCorrelation' => array('perm_add'),\n                'text' => array('*'),\n                'toggleToIDS' => array('perm_add'),\n                'updateAttributeValues' => array('perm_add'),\n                'view' => array('*'),\n                'viewPicture' => array('*'),\n            ),\n            'authKeys' => [\n                'add' => ['AND' => ['perm_auth', 'not_read_only_authkey']],\n                'delete' => ['AND' => ['perm_auth', 'not_read_only_authkey']],\n                'edit' => ['AND' => ['perm_auth', 'not_read_only_authkey']],\n                'index' => ['perm_auth'],\n                'view' => ['perm_auth']\n            ],\n            'cerebrates' => [\n                'add' => [],\n                'delete' => [],\n                'download_org' => [],\n                'download_sg' => [],\n                'edit' => [],\n                'index' => [],\n                'preview_orgs' => [],\n                'preview_sharing_groups' => [],\n                'pull_orgs' => [],\n                'pull_sgs' => [],\n                'view' => []\n            ],\n            'correlationExclusions' => [\n                'add' => [],\n                'edit' => [],\n                'clean' => [],\n                'delete' => [],\n                'index' => [],\n                'view' => []\n            ],\n            'correlations' => [\n                'generateOccurrences' => [],\n                'generateTopCorrelations' => [],\n                'overCorrelations' => [],\n                'switchEngine' => [],\n                'top' => [],\n                'truncate' => []\n            ],\n            'cryptographicKeys' => [\n                'add' => ['perm_add'],\n                'delete' => ['perm_add'],\n                'index' => ['*'],\n                'view' => ['*']\n            ],\n            'dashboards' => array(\n                'getForm' => array('*'),\n                'index' => array('*'),\n                'updateSettings' => array('*'),\n                'getEmptyWidget' => array('*'),\n                'renderWidget' => array('*'),\n                'listTemplates' => array('*'),\n                'saveTemplate' => array('*'),\n                'export' => array('*'),\n                'import' => array('*'),\n                'deleteTemplate' => array('*')\n            ),\n            'decayingModel' => array(\n                \"update\" => array(),\n                \"export\" => array('*'),\n                \"import\" => array('OR' => array('perm_admin', 'perm_decaying')),\n                \"view\" => array('*'),\n                \"index\" => array('*'),\n                \"add\" => array( 'OR' => array('perm_admin', 'perm_decaying')),\n                \"edit\" => array( 'OR' => array('perm_admin', 'perm_decaying')),\n                \"delete\" => array( 'OR' => array('perm_admin', 'perm_decaying')),\n                \"enable\" => array( 'OR' => array('perm_admin', 'perm_decaying')),\n                \"disable\" => array( 'OR' => array('perm_admin', 'perm_decaying')),\n                \"decayingTool\" => array( 'OR' => array('perm_admin', 'perm_decaying')),\n                \"getAllDecayingModels\" => array('*'),\n                \"decayingToolBasescore\" => array('*'),\n                \"decayingToolSimulation\" => array('*'),\n                \"decayingToolRestSearch\" => array('*'),\n                \"decayingToolComputeSimulation\" => array('*')\n            ),\n            'decayingModelMapping' => array(\n                \"viewAssociatedTypes\" => array('*'),\n                \"linkAttributeTypeToModel\" => array( 'OR' => array('perm_admin', 'perm_decaying'))\n            ),\n            'communities' => array(\n                'index' => array(),\n                'requestAccess' => array(),\n                'view' => array()\n            ),\n            'eventBlocklists' => array(\n                'add' => [\n                    'AND' => [\n                        'host_org_user',\n                        'perm_add'\n                    ]\n                ],\n                'delete' => [\n                    'AND' => [\n                        'host_org_user',\n                        'perm_add'\n                    ]\n                ],\n                'edit' => [\n                    'AND' => [\n                        'host_org_user',\n                        'perm_add'\n                    ]\n                ],\n                'index' => [\n                    'AND' => [\n                        'host_org_user',\n                        'perm_add'\n                    ]\n                ],\n                'massDelete' => [\n                    'AND' => [\n                        'host_org_user',\n                        'perm_add'\n                    ]\n                ]\n            ),\n            'eventDelegations' => array(\n                'acceptDelegation' => array('AND' => ['delegation_enabled', 'perm_add']),\n                'delegateEvent' => array('AND' => ['delegation_enabled', 'perm_delegate']),\n                'deleteDelegation' => array('AND' => ['delegation_enabled', 'perm_add']),\n                'index' => array('delegation_enabled'),\n                'view' => array('delegation_enabled'),\n            ),\n            'eventReports' => array(\n                'add' => array('perm_add'),\n                'view' => array('*'),\n                'viewSummary' => array('*'),\n                'edit' => array('perm_add'),\n                'delete' => array('perm_add'),\n                'reportFromEvent' => array('perm_add'),\n                'restore' => array('perm_add'),\n                'index' => array('*'),\n                'getProxyMISPElements' => array('*'),\n                'extractAllFromReport' => array('*'),\n                'extractFromReport' => array('*'),\n                'replaceSuggestionInReport' => array('*'),\n                'importReportFromUrl' => array('*'),\n            ),\n            'events' => array(\n                    'add' => array('perm_add'),\n                    'addIOC' => array('perm_add'),\n                    'addTag' => array('perm_tagger'),\n                    'add_misp_export' => array('perm_modify'),\n                    'alert' => array('perm_publish'),\n                    'automation' => array('perm_auth'),\n                    'checkLocks' => array('perm_add'),\n                    'checkPublishedStatus' => array('*'),\n                    'checkuuid' => array('perm_sync'),\n                    'contact' => array('*'),\n                    'csv' => array('*'),\n                    'cullEmptyEvents' => array(),\n                    'delegation_index' => array('*'),\n                    'delete' => array('perm_add'),\n                    'deleteNode' => array('*'),\n                    'dot' => array(),\n                    'downloadExport' => array('*'),\n                    'downloadOpenIOCEvent' => array('*'),\n                    'edit' => array('perm_add'),\n                    'enrichEvent' => array('perm_add'),\n                    'export' => array('*'),\n                    'exportChoice' => array('*'),\n                    'exportModule' => array('*'),\n                    'filterEventIdsForPush' => array('perm_sync'),\n                    'filterEventIndex' => array('*'),\n                    'freeTextImport' => array('perm_add'),\n                    'getEditStrategy' => array('perm_add'),\n                    'getEventInfoById' => array('*'),\n                    'getEventGraphReferences' => array('*'),\n                    'getEventGraphTags' => array('*'),\n                    'getEventGraphGeneric' => array('*'),\n                    'getEventTimeline' => array('*'),\n                    'getDistributionGraph' => array('*'),\n                    'getReferenceData' => array('*'),\n                    'getReferences' => array('*'),\n                    'getObjectTemplate' => array('*'),\n                    'handleModuleResults' => array('*'),\n                    'hids' => array('*'),\n                    'index' => array('*'),\n                    'importChoice' => array('*'),\n                    'importModule' => array('*'),\n                    'massDelete' => array(),\n                    'merge' => array('perm_modify'),\n                    'nids' => array('*'),\n                    'populate' => array('perm_add'),\n                    'proposalEventIndex' => array('*'),\n                    'protect' => ['perm_add'],\n                    'publish' => array('perm_publish'),\n                    'publishSightings' => array('perm_sighting'),\n                    'pushEventToZMQ' => array('perm_publish_zmq'),\n                    'pushEventToKafka' => array('perm_publish_kafka'),\n                    'pushProposals' => array('perm_sync'),\n                    'queryEnrichment' => array('perm_add'),\n                    'recoverEvent' => array(),\n                    'removePivot' => array('*'),\n                    'removeTag' => array('perm_tagger'),\n                    'reportValidationIssuesEvents' => array(),\n                    'restoreDeletedEvents' => array(),\n                    'restSearch' => array('*'),\n                    'restSearchExport' => array('*'),\n                    'runTaxonomyExclusivityCheck' => array('*'),\n                    'saveFreeText' => array('perm_add'),\n                    'stix' => array('*'),\n                    'stix2' => array('*'),\n                    'strposarray' => array(),\n                    'toggleCorrelation' => array('perm_add'),\n                    'unprotect' => ['perm_add'],\n                    'unpublish' => array('perm_modify'),\n                    'updateGraph' => array('*'),\n                    'upload_analysis_file' => array('perm_add'),\n                    'upload_sample' => array('AND' => array('perm_auth', 'perm_add')),\n                    'upload_stix' => array('perm_modify'),\n                    'view' => array('*'),\n                    'viewClusterRelations' => array('*'),\n                    'viewEventAttributes' => array('*'),\n                    'viewGraph' => array('*'),\n                    'viewGalaxyMatrix' => array('*'),\n                    'xml' => array('*'),\n                'addEventLock' => ['perm_auth'],\n                'removeEventLock' => ['perm_auth'],\n                'generateCount' => array(),\n            ),\n            'favouriteTags' => array(\n                'toggle' => array('*'),\n                'getToggleField' => array('*')\n            ),\n            'feeds' => array(\n                'add' => array(),\n                'cacheFeeds' => array(),\n                'compareFeeds' => ['host_org_user'],\n                'delete' => array(),\n                'disable' => array(),\n                'edit' => array(),\n                'enable' => array(),\n                'feedCoverage' => ['host_org_user'],\n                'fetchFromAllFeeds' => array(),\n                'fetchFromFeed' => array(),\n                'fetchSelectedFromFreetextIndex' => array(),\n                'getEvent' => array(),\n                'importFeeds' => array(),\n                'index' => ['host_org_user'],\n                'loadDefaultFeeds' => array(),\n                'previewEvent' => ['host_org_user'],\n                'previewIndex' => ['host_org_user'],\n                'searchCaches' => ['host_org_user'],\n                'toggleSelected' => array(),\n                'view' => ['host_org_user'],\n            ),\n            'galaxies' => array(\n                'attachCluster' => array('perm_tagger'),\n                'attachMultipleClusters' => array('perm_tagger'),\n                'delete' => array(),\n                'disable' => array(),\n                'enable' => array(),\n                'export' => array('*'),\n                'forkTree' => array('*'),\n                'index' => array('*'),\n                'import' => array('perm_galaxy_editor'),\n                'pushCluster' => array('perm_sync'),\n                'relationsGraph' => array('*'),\n                'selectGalaxy' => array('perm_tagger'),\n                'selectGalaxyNamespace' => array('perm_tagger'),\n                'selectCluster' => array('perm_tagger'),\n                'showGalaxies' => array('*'),\n                'toggle' => array(),\n                'update' => array(),\n                'view' => array('*'),\n                'viewGraph' => array('*'),\n                'wipe_default' => array(),\n            ),\n            'galaxyClusterBlocklists' => array(\n                'add' => array(),\n                'delete' => array(),\n                'edit' => array(),\n                'index' => array(),\n                'massDelete' => array(),\n            ),\n            'galaxyClusters' => array(\n                'add' => array('perm_galaxy_editor'),\n                'delete' => array('perm_galaxy_editor'),\n                'detach' => array('perm_tagger'),\n                'edit' => array('perm_galaxy_editor'),\n                'index' => array('*'),\n                'publish' => array('perm_galaxy_editor'),\n                'restore' => array('perm_galaxy_editor'),\n                'restSearch' => array('*'),\n                'unpublish' => array('perm_galaxy_editor'),\n                'updateCluster' => array('perm_galaxy_editor'),\n                'view' => array('*'),\n                'viewCyCatRelations' => array('*'),\n                'viewGalaxyMatrix' => array('*'),\n                'viewRelations' => array('*'),\n                'viewRelationTree' => array('*'),\n            ),\n            'galaxyClusterRelations' => array(\n                'add' => array('perm_galaxy_editor'),\n                'delete' => array('perm_galaxy_editor'),\n                'edit' => array('perm_galaxy_editor'),\n                'index' => array('*'),\n                'view' => array('*'),\n            ),\n            'galaxyElements' => array(\n                'delete' => array('perm_galaxy_editor'),\n                'flattenJson' => array('perm_galaxy_editor'),\n                'index' => array('*'),\n            ),\n            'jobs' => array(\n                    'cache' => array('*'),\n                    'getError' => array(),\n                    'getGenerateCorrelationProgress' => array(),\n                    'getProgress' => array('*'),\n                    'index' => array(),\n                    'clearJobs' => array()\n            ),\n            'logs' => array(\n                    'admin_index' => array('perm_audit'),\n                    'admin_search' => array('perm_audit'),\n                    'event_index' => array('*'),\n                    'returnDates' => array('*'),\n                    'testForStolenAttributes' => array(),\n                    'pruneUpdateLogs' => array(),\n                    'index' => array('perm_audit')\n            ),\n        'auditLogs' => [\n            'admin_index' => ['perm_audit'],\n            'fullChange' => ['perm_audit'],\n            'eventIndex' => ['*'],\n            'returnDates' => ['*'],\n        ],\n        'accessLogs' => [\n            'admin_index' => [],\n            'admin_request' => [],\n            'admin_queryLog' => [],\n        ],\n        'modules' => array(\n            'index' => array('perm_auth'),\n            'queryEnrichment' => array('perm_auth'),\n        ),\n            'news' => array(\n                'add' => array(),\n                'edit' => array(),\n                'delete' => array(),\n                'admin_index' => array(),\n                'index' => ['*'],\n            ),\n            'noticelists' => array(\n                    'delete' => array(),\n                    'enableNoticelist' => array(),\n                    'getToggleField' => array(),\n                    'index' => array('*'),\n                    'toggleEnable' => array(),\n                    'update' => array(),\n                    'view' => array('*'),\n                    'preview_entries' => array('*')\n            ),\n            'objects' => array(\n                    'add' => array('perm_add'),\n                    'addValueField' => array('perm_add'),\n                    'delete' => array('perm_add'),\n                    'edit' => array('perm_add'),\n                    'get_row' => array('perm_add'),\n                    'orphanedObjectDiagnostics' => array(),\n                    'editField' => array('perm_add'),\n                    'fetchEditForm' => array('perm_add'),\n                    'fetchViewValue' => array('*'),\n                    'quickAddAttributeForm' => array('perm_add'),\n                    'quickFetchTemplateWithValidObjectAttributes' => array('perm_add'),\n                    'restSearch' => array('*'),\n                    'proposeObjectsFromAttributes' => array('*'),\n                    'groupAttributesIntoObject' => array('perm_add'),\n                    'revise_object' => array('perm_add'),\n                    'view' => array('*'),\n                'createFromFreetext' => ['perm_add'],\n            ),\n            'objectReferences' => array(\n                'add' => array('perm_add'),\n                'bulkAdd' => array('perm_add'),\n                'delete' => array('perm_add'),\n                'view' => array('*'),\n            ),\n            'objectTemplates' => array(\n                'activate' => array(),\n                'add' => array('perm_object_template'),\n                'edit' => array('perm_object_template'),\n                'delete' => array('perm_object_template'),\n                'getToggleField' => array(),\n                'getRaw' => array('perm_object_template'),\n                'objectChoice' => array('*'),\n                'objectMetaChoice' => array('perm_add'),\n                'view' => array('*'),\n                'index' => array('*'),\n                'update' => array(),\n                'possibleObjectTemplates' => ['*'],\n            ),\n            'objectTemplateElements' => array(\n                'viewElements' => array('*')\n            ),\n            'orgBlocklists' => array(\n                'add' => array(),\n                'delete' => array(),\n                'edit' => array(),\n                'index' => array(),\n            ),\n            'organisations' => array(\n                'admin_add' => array(),\n                'admin_delete' => array(),\n                'admin_edit' => array(),\n                'admin_generateuuid' => array(),\n                'admin_merge' => array(),\n                'fetchOrgsForSG' => array('perm_sharing_group'),\n                'fetchSGOrgRow' => array('*'),\n                'getUUIDs' => array('perm_sync'),\n                'index' => ['organisation_index'],\n                'view' => array('*'),\n            ),\n            'pages' => array(\n                'display' => array('*'),\n            ),\n            'posts' => array(\n                'add' => ['AND' => ['not_read_only_authkey', 'discussion_enabled']],\n                'delete' => ['AND' => ['not_read_only_authkey', 'discussion_enabled']],\n                'edit' => ['AND' => ['not_read_only_authkey', 'discussion_enabled']],\n                'pushMessageToZMQ' => array()\n            ),\n            'regexp' => array(\n                'admin_add' => array('perm_regexp_access'),\n                'admin_clean' => array(),\n                'admin_delete' => array('perm_regexp_access'),\n                'admin_edit' => array('perm_regexp_access'),\n                'admin_index' => array('perm_regexp_access'),\n                'cleanRegexModifiers' => array(),\n                'index' => array('*'),\n            ),\n            'restClientHistory' => array(\n                'delete' => array('not_read_only_authkey'),\n                'index' => array('*')\n            ),\n            'roles' => array(\n                'admin_add' => array(),\n                'admin_delete' => array(),\n                'admin_edit' => array(),\n                'admin_set_default' => array(),\n                'index' => array('*'),\n                'view' => array('*'),\n            ),\n            'servers' => array(\n                'add' => array(),\n                'dbSchemaDiagnostic' => array(),\n                'dbConfiguration' => array(),\n                'cache' => array(),\n                'changePriority' => array(),\n                'checkout' => array(),\n                'clearWorkerQueue' => array(),\n                'createSync' => array('perm_sync'),\n                'delete' => array(),\n                'deleteFile' => array(),\n                'edit' => array(),\n                'eventBlockRule' => array(),\n                'fetchServersForSG' => array('perm_sharing_group'),\n                'filterEventIndex' => array(),\n                'getAvailableSyncFilteringRules' => array('*'),\n                'getInstanceUUID' => array('perm_sync'),\n                'getPyMISPVersion' => array('*'),\n                'getRemoteUser' => array(),\n                'getSetting' => array(),\n                'getSubmodulesStatus' => array(),\n                'getSubmoduleQuickUpdateForm' => array(),\n                'getWorkers' => array(),\n                'getVersion' => array('perm_auth'),\n                'idTranslator' => ['host_org_user'],\n                'import' => array(),\n                'index' => array(),\n                'ipUser' => ['perm_site_admin'],\n                'ondemandAction' => array(),\n                'postTest' => array('*'),\n                'previewEvent' => array(),\n                'previewIndex' => array(),\n                'compareServers' => [],\n                'pull' => array(),\n                'purgeSessions' => array(),\n                'push' => array(),\n                'queryAvailableSyncFilteringRules' => array(),\n                'releaseUpdateLock' => array(),\n                'resetRemoteAuthKey' => array(),\n                'removeOrphanedCorrelations' => array(),\n                'restartDeadWorkers' => array(),\n                'restartWorkers' => array(),\n                'serverSettings' => array(),\n                'serverSettingsEdit' => array(),\n                'serverSettingsReloadSetting' => array(),\n                'startWorker' => array(),\n                'startZeroMQServer' => array(),\n                'statusZeroMQServer' => array(),\n                'stopWorker' => array(),\n                'stopZeroMQServer' => array(),\n                'testConnection' => array(),\n                'update' => array(),\n                'updateJSON' => array(),\n                'updateProgress' => array(),\n                'updateSubmodule' => array(),\n                'uploadFile' => array(),\n                'killAllWorkers' => [],\n                'cspReport' => ['*'],\n                'pruneDuplicateUUIDs' => array(),\n                'removeDuplicateEvents' => array(),\n                'upgrade2324' => array(),\n                'cleanModelCaches' => array(),\n                'updateDatabase' => array(),\n                'rest' => ['perm_auth'],\n            ),\n            'shadowAttributes' => array(\n                'accept' => array('perm_add'),\n                'acceptSelected' => array('perm_add'),\n                'add' => array('perm_add'),\n                'add_attachment' => array('perm_add'),\n                'delete' => array('perm_add'),\n                'discard' => array('perm_add'),\n                'discardSelected' => array('perm_add'),\n                'download' => array('*'),\n                'edit' => array('perm_add'),\n                'generateCorrelation' => array(),\n                'index' => array('*'),\n                'view' => array('*'),\n                'viewPicture' => array('*'),\n            ),\n            'sharingGroupBlueprints' => array(\n                'add' => array('perm_sharing_group'),\n                'delete' => array('perm_sharing_group'),\n                'detach' => array('perm_sharing_group'),\n                'edit' => array('perm_sharing_group'),\n                'execute' => array('perm_sharing_group'),\n                'index' => array('perm_sharing_group'),\n                'view' => array('perm_sharing_group'),\n                'viewOrgs' => array('perm_sharing_group'),\n            ),\n            'sharingGroups' => array(\n                'add' => array('perm_sharing_group'),\n                'addServer' => array('perm_sharing_group'),\n                'addOrg' => array('perm_sharing_group'),\n                'delete' => array('perm_sharing_group'),\n                'edit' => array('perm_sharing_group'),\n                'index' => array('*'),\n                'removeServer' => array('perm_sharing_group'),\n                'removeOrg' => array('perm_sharing_group'),\n                'view' => array('*'),\n            ),\n            'sightings' => array(\n                'add' => array('perm_sighting'),\n                'restSearch' => array('perm_sighting'),\n                'advanced' => array('perm_sighting'),\n                'delete' => ['AND' => ['perm_sighting', 'perm_modify_org']],\n                'index' => array('*'),\n                'listSightings' => array('*'),\n                'quickDelete' => ['AND' => ['perm_sighting', 'perm_modify_org']],\n                'viewSightings' => array('*'),\n                'bulkSaveSightings' => array('OR' => array('perm_sync', 'perm_sighting')),\n                'filterSightingUuidsForPush' => ['perm_sync'],\n                'quickAdd' => array('perm_sighting')\n            ),\n            'sightingdb' => array(\n                'add' => array(),\n                'edit' => array(),\n                'delete' => array(),\n                'index' => array(),\n                'requestStatus' => array(),\n                'search' => array()\n            ),\n            'tagCollections' => array(\n                'add' => array('perm_tag_editor'),\n                'addTag' => array('perm_tag_editor'),\n                'delete' => array('perm_tag_editor'),\n                'edit' => array('perm_tag_editor'),\n                'getRow' => array('perm_tag_editor'),\n                'import' => array('perm_tag_editor'),\n                'index' => array('*'),\n                'removeTag' => array('perm_tag_editor'),\n                'view' => array('*')\n            ),\n            'tags' => array(\n                'add' => array('perm_tag_editor'),\n                'attachTagToObject' => array('perm_tagger'),\n                'delete' => array(),\n                'edit' => array(),\n                'index' => array('*'),\n                'modifyTagRelationship' => ['perm_tagger'],\n                'quickAdd' => array('perm_tag_editor'),\n                'removeTagFromObject' => array('perm_tagger'),\n                'search' => array('*'),\n                'selectTag' => array('perm_tagger'),\n                'selectTaxonomy' => array('perm_tagger'),\n                'showEventTag' => array('*'),\n                'showAttributeTag' => array('*'),\n                'tagStatistics' => array('*'),\n                'view' => array('*'),\n                'viewGraph' => array('*'),\n                'viewTag' => array('*')\n            ),\n            'tasks' => array(\n                'index' => array(),\n                'setTask' => array(),\n            ),\n            'taxonomies' => array(\n                'addTag' => array(),\n                'delete' => array(),\n                'disable' => array(),\n                'disableTag' => array(),\n                'enable' => array(),\n                'index' => array('*'),\n                'taxonomy_tags' => array('*'),\n                'taxonomyMassConfirmation' => array('perm_tagger'),\n                'taxonomyMassHide' => array('perm_tagger'),\n                'taxonomyMassUnhide' => array('perm_tagger'),\n                'toggleRequired' => array(),\n                'toggleHighlighted' => array(),\n                'update' => array(),\n                'import' => [],\n                'export' => ['*'],\n                'view' => array('*'),\n                'unhideTag' => array('perm_tagger'),\n                'hideTag' => array('perm_tagger'),\n                'normalizeCustomTagsToTaxonomyFormat' => [],\n            ),\n            'taxiiServers' => [\n                'add' => ['perm_admin'],\n                'edit' => ['perm_admin'],\n                'index' => ['perm_admin'],\n                'delete' => ['perm_admin'],\n                'view' => ['perm_admin'],\n                'push' => ['perm_admin'],\n                'getRoot' => ['perm_admin'],\n                'getCollections' => ['perm_admin']\n            ],\n            'templateElements' => array(\n                'add' => array('perm_template'),\n                'delete' => array('perm_template'),\n                'edit' => array('perm_template'),\n                'index' => array('*'),\n                'templateElementAddChoices' => array('perm_template'),\n            ),\n            'templates' => array(\n                'add' => array('perm_template'),\n                'delete' => array('perm_template'),\n                'deleteTemporaryFile' => array('perm_add'),\n                'edit' => array('perm_template'),\n                'index' => array('*'),\n                'populateEventFromTemplate' => array('perm_add'),\n                'saveElementSorting' => array('perm_template'),\n                'submitEventPopulation' => array('perm_add'),\n                'templateChoices' => array('*'),\n                'uploadFile' => array('*'),\n                'view' => array('*'),\n            ),\n            'threads' => array(\n                'index' => array('discussion_enabled'),\n                'view' => array('discussion_enabled'),\n                'viewEvent' => array('discussion_enabled'),\n            ),\n            'users' => array(\n                'acceptRegistrations' => array(),\n                'admin_add' => ['AND' => ['perm_admin', 'add_user_enabled']],\n                'admin_delete' => array('perm_admin'),\n                'admin_destroy' => array(),\n                'admin_edit' => array('perm_admin'),\n                'admin_email' => array('perm_admin'),\n                'admin_filterUserIndex' => array('perm_admin'),\n                'admin_index' => array('perm_admin'),\n                'admin_massToggleField' => array('perm_admin'),\n                'admin_monitor' => array(),\n                'admin_quickEmail' => array('perm_admin'),\n                'admin_view' => array('perm_admin'),\n                'attributehistogram' => array('*'),\n                'change_pw' => ['AND' => ['self_management_enabled', 'password_change_enabled', 'not_read_only_authkey']],\n                'checkAndCorrectPgps' => array(),\n                'checkIfLoggedIn' => array('*'),\n                'dashboard' => array('*'),\n                'delete' => array('perm_admin'),\n                'discardRegistrations' => array(),\n                'downloadTerms' => array('*'),\n                'edit' => array('self_management_enabled'),\n                'email_otp' => array('*'),\n                'searchGpgKey' => array('*'),\n                'fetchGpgKey' => array('*'),\n                'histogram' => array('*'),\n                'initiatePasswordReset' => ['AND' => ['perm_admin', 'password_change_enabled']],\n                'login' => array('*'),\n                'logout' => array('*'),\n                'notificationSettings' => ['*'],\n                'register' => array('*'),\n                'registrations' => array(),\n                'resetAllSyncAuthKeys' => array(),\n                'resetauthkey' => ['AND' => ['self_management_enabled', 'perm_auth', 'not_read_only_authkey']],\n                'request_API' => array('*'),\n                'routeafterlogin' => array('*'),\n                'statistics' => array('*'),\n                'tagStatisticsGraph' => array('*'),\n                'terms' => array('*'),\n                'updateLoginTime' => array('*'),\n                'updateToAdvancedAuthKeys' => array(),\n                'verifyCertificate' => array(),\n                'verifyGPG' => array(),\n                'view' => array('*'),\n                'viewPeriodicSummary' => ['*'],\n                'getGpgPublicKey' => array('*'),\n                'unsubscribe' => ['*'],\n            ),\n            'userSettings' => array(\n                'index' => array('*'),\n                'view' => array('*'),\n                'setSetting' => array('not_read_only_authkey'),\n                'getSetting' => array('*'),\n                'delete' => array('not_read_only_authkey'),\n                'setHomePage' => array('not_read_only_authkey'),\n                'eventIndexColumnToggle' => ['*'],\n            ),\n            'warninglists' => array(\n                'checkValue' => ['*'],\n                'delete' => ['perm_warninglist'],\n                'enableWarninglist' => ['perm_warninglist'],\n                'getToggleField' => ['perm_warninglist'],\n                'index' => array('*'),\n                'toggleEnable' => ['perm_warninglist'],\n                'update' => array(),\n                'view' => array('*'),\n                'edit' => ['perm_warninglist'],\n                'add' => ['perm_warninglist'],\n                'export' => ['*'],\n                'import' => ['perm_warninglist'],\n            ),\n            'workflows' => [\n                'index'=> [],\n                'rebuildRedis'=> [],\n                'edit'=> [],\n                'delete'=> [],\n                'view'=> [],\n                'editor'=> [],\n                'triggers'=> [],\n                'moduleIndex'=> [],\n                'moduleView'=> [],\n                'toggleModule'=> [],\n                'checkGraph'=> [],\n                'executeWorkflow'=> [],\n                'debugToggleField'=> [],\n                'massToggleField'=> [],\n                'moduleStatelessExecution'=> [],\n            ],\n            'workflowBlueprints' => [\n                'add' => [],\n                'delete' => [],\n                'edit' => [],\n                'export' => [],\n                'import' => [],\n                'index' => [],\n                'update' => [],\n                'view' => [],\n            ],\n            'allowedlists' => array(\n                'admin_add' => array('perm_regexp_access'),\n                'admin_delete' => array('perm_regexp_access'),\n                'admin_edit' => array('perm_regexp_access'),\n                'admin_index' => array('perm_regexp_access'),\n                'index' => array('*'),\n            ),\n            'eventGraph' => array(\n                'view' => array('*'),\n                'viewPicture' => array('*'),\n                'add' => array('perm_add'),\n                'delete' => array('perm_modify'),\n            )\n    );\n\n    private $dynamicChecks = [];\n\n    /** @var int */\n    private $hostOrgId;\n\n    public function __construct(ComponentCollection $collection, $settings = array())\n    {\n        parent::__construct($collection, $settings);\n\n        $this->hostOrgId = (int)Configure::read('MISP.host_org_id');\n\n        $this->dynamicChecks['host_org_user'] = function (array $user) {\n            return (int)$user['org_id'] === $this->hostOrgId;\n        };\n        $this->dynamicChecks['self_management_enabled'] = function (array $user) {\n            if (Configure::read('MISP.disableUserSelfManagement') && !$user['Role']['perm_admin'])  {\n                throw new MethodNotAllowedException('User self-management has been disabled on this instance.');\n            }\n            return true;\n        };\n        $this->dynamicChecks['password_change_enabled'] = function (array $user) {\n            if (Configure::read('MISP.disable_user_password_change')) {\n                throw new MethodNotAllowedException('User password change has been disabled on this instance.');\n            }\n            return true;\n        };\n        $this->dynamicChecks['add_user_enabled'] = function (array $user) {\n            if (Configure::read('MISP.disable_user_add')) {\n                throw new MethodNotAllowedException('Adding users has been disabled on this instance.');\n            }\n            return true;\n        };\n        $this->dynamicChecks['delegation_enabled'] = function (array $user) {\n            return (bool)Configure::read('MISP.delegation');\n        };\n        $this->dynamicChecks['discussion_enabled'] = function (array $user) {\n            return !Configure::read('MISP.discussion_disable');\n        };\n        // Returns true if current user is not using advanced auth key or if authkey is not read only\n        $this->dynamicChecks['not_read_only_authkey'] = function (array $user) {\n            return !isset($user['authkey_read_only']) || !$user['authkey_read_only'];\n        };\n        // If `Security.hide_organisation_index_from_users` is enabled, only user with sharing group permission can see org index\n        $this->dynamicChecks['organisation_index'] = function (array $user) {\n            if (Configure::read('Security.hide_organisation_index_from_users')) {\n                return $user['Role']['perm_sharing_group'];\n            }\n            return true;\n        };\n    }\n\n    /**\n     * Returns true if user can modify given event.\n     *\n     * @param array $event\n     * @param array $user\n     * @return bool\n     */\n    public function canModifyEvent(array $user, array $event)\n    {\n        if (!isset($event['Event'])) {\n            throw new InvalidArgumentException('Passed object does not contain an Event.');\n        }\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        if ($user['Role']['perm_modify_org'] && $event['Event']['orgc_id'] == $user['org_id']) {\n            return true;\n        }\n        if ($user['Role']['perm_modify'] && $event['Event']['user_id'] == $user['id']) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns true if user can publish the given event.\n     *\n     * @param array $user\n     * @param array $event\n     * @return bool\n     */\n    public function canPublishEvent(array $user, array $event)\n    {\n        if (!isset($event['Event'])) {\n            throw new InvalidArgumentException('Passed object does not contain an Event.');\n        }\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        if ($user['Role']['perm_publish'] && $event['Event']['orgc_id'] == $user['org_id']) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns true if user can add or remove tags for given event.\n     *\n     * @param array $user\n     * @param array $event\n     * @param bool $isTagLocal\n     * @return bool\n     */\n    public function canModifyTag(array $user, array $event, $isTagLocal = false)\n    {\n        if (!isset($event['Event'])) {\n            throw new InvalidArgumentException('Passed object does not contain an Event.');\n        }\n        // Site admin can add any tag\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        // User must have tagger or sync permission\n        if (!$user['Role']['perm_tagger'] && !$user['Role']['perm_sync']) {\n            return false;\n        }\n        if ($this->canModifyEvent($user, $event)) {\n            return true; // full access\n        }\n        if ($isTagLocal && $this->hostOrgId === (int)$user['org_id']) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @param array $user\n     * @param array $event\n     * @return bool\n     */\n    public function canDisableCorrelation(array $user, array $event)\n    {\n        if (Configure::read('MISP.completely_disable_correlation')) {\n            return false; // correlations are completely disabled\n        }\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        return Configure::read('MISP.allow_disabling_correlation') && $this->canModifyEvent($user, $event);\n    }\n\n    /**\n     * @param array $user\n     * @param array $tagCollection\n     * @return bool\n     */\n    public function canModifyTagCollection(array $user, array $tagCollection)\n    {\n        if (!isset($tagCollection['TagCollection'])) {\n            throw new InvalidArgumentException('Passed object does not contain a TagCollection.');\n        }\n        if (!empty($user['Role']['perm_site_admin'])) {\n            return true;\n        }\n        return $user['org_id'] == $tagCollection['TagCollection']['org_id'];\n    }\n\n    /**\n     * Only users that can modify organisation can delete sightings as sighting is not linked to user.\n     *\n     * @param array $user\n     * @param array $sighting\n     * @return bool\n     */\n    public function canDeleteSighting(array $user, array $sighting)\n    {\n        if (!isset($sighting['Sighting'])) {\n            throw new InvalidArgumentException('Passed object does not contain a Sighting.');\n        }\n        // Site admin can delete any sighting\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        if (!$user['Role']['perm_modify_org']) {\n            return false;\n        }\n        return $sighting['Sighting']['org_id'] == $user['org_id'];\n    }\n\n    /**\n     * @param array $user\n     * @param array $eventReport\n     * @return bool\n     */\n    public function canEditEventReport(array $user, array $eventReport)\n    {\n        if (!isset($eventReport['Event'])) {\n            throw new InvalidArgumentException('Passed object does not contain an Event.');\n        }\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        if ($eventReport['Event']['orgc_id'] == $user['org_id']) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Checks if user can modify given galaxy cluster\n     *\n     * @param array $user\n     * @param array $cluster\n     * @return bool\n     */\n    public function canModifyGalaxyCluster(array $user, array $cluster)\n    {\n        if (!isset($cluster['GalaxyCluster'])) {\n            throw new InvalidArgumentException('Passed object does not contain an GalaxyCluster.');\n        }\n        if ($cluster['GalaxyCluster']['default']) {\n            return false; // it is not possible to edit default clusters\n        }\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        if (!$user['Role']['perm_galaxy_editor']) {\n            return false;\n        }\n        return $cluster['GalaxyCluster']['orgc_id'] == $user['org_id'];\n    }\n\n    /**\n     * Checks if user can publish given galaxy cluster\n     *\n     * @param array $user\n     * @param array $cluster\n     * @return bool\n     */\n    public function canPublishGalaxyCluster(array $user, array $cluster)\n    {\n        if (!$this->canModifyGalaxyCluster($user, $cluster)) {\n            return false;\n        }\n        return (bool)$user['Role']['perm_publish'];\n    }\n\n    private function __checkLoggedActions($user, $controller, $action)\n    {\n        $loggedActions = array(\n            'servers' => array(\n                'index' => array(\n                    'role' => array(\n                        'NOT' => array(\n                            'perm_site_admin'\n                        )\n                    ),\n                    'message' => __('This could be an indication of an attempted privilege escalation on older vulnerable versions of MISP (<2.4.115)')\n                )\n            )\n        );\n        foreach ($loggedActions as $k => $v) {\n            $loggedActions[$k] = array_change_key_case($v);\n        }\n        if (!empty($loggedActions[$controller])) {\n            if (!empty($loggedActions[$controller][$action])) {\n                $message = $loggedActions[$controller][$action]['message'];\n                $hit = false;\n                if (empty($loggedActions[$controller][$action]['role'])) {\n                    $hit = true;\n                } else {\n                    $role_req = $loggedActions[$controller][$action]['role'];\n                    if (empty($role_req['OR']) && empty($role_req['AND']) && empty($role_req['NOT'])) {\n                        $role_req = array('OR' => $role_req);\n                    }\n                    if (!empty($role_req['NOT'])) {\n                        foreach ($role_req['NOT'] as $k => $v) {\n                            if (!$user['Role'][$v]) {\n                                $hit = true;\n                                continue;\n                            }\n                        }\n                    }\n                    if (!$hit && !empty($role_req['AND'])) {\n                        $subhit = true;\n                        foreach ($role_req['AND'] as $k => $v) {\n                            $subhit = $subhit && $user['Role'][$v];\n                        }\n                        if ($subhit) {\n                            $hit = true;\n                        }\n                    }\n                    if (!$hit && !empty($role_req['OR'])) {\n                        foreach ($role_req['OR'] as $k => $v) {\n                            if ($user['Role'][$v]) {\n                                $hit = true;\n                                continue;\n                            }\n                        }\n                    }\n                    if ($hit) {\n                        $this->Log = ClassRegistry::init('Log');\n                        $this->Log->create();\n                        $this->Log->save(array(\n                                'org' => 'SYSTEM',\n                                'model' => 'User',\n                                'model_id' => $user['id'],\n                                'email' => $user['email'],\n                                'action' => 'security',\n                                'user_id' => $user['id'],\n                                'title' => __('User triggered security alert by attempting to access /%s/%s. Reason why this endpoint is of interest: %s', $controller, $action, $message),\n                        ));\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @param array $user\n     * @param string $controller\n     * @param string $action\n     * @return bool\n     */\n    public function canUserAccess($user, $controller, $action)\n    {\n        try {\n            $this->checkAccess($user, $controller, $action, false);\n        } catch (NotFoundException $e) {\n            throw new RuntimeException(\"Invalid controller '$controller' specified.\", 0, $e);\n        } catch (MethodNotAllowedException $e) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * The check works like this:\n     * - If the user is a site admin, return true\n     * - If the requested action has an OR-d list, iterate through the list. If any of the permissions are set for the user, return true\n     * - If the requested action has an AND-ed list, iterate through the list. If any of the permissions for the user are not set, turn the check to false. Otherwise return true.\n     * - If the requested action has a permission, check if the user's role has it flagged. If yes, return true\n     * - If we fall through all of the checks, return an exception.\n     *\n     * @param array|null $user\n     * @param string $controller\n     * @param string $action\n     * @param bool $checkLoggedActions\n     * @return true\n     * @throws NotFoundException\n     * @throws MethodNotAllowedException\n     */\n    public function checkAccess($user, $controller, $action, $checkLoggedActions = true)\n    {\n        $controller = lcfirst(Inflector::camelize($controller));\n        $action = strtolower($action);\n        if ($checkLoggedActions) {\n            $this->__checkLoggedActions($user, $controller, $action);\n        }\n        if ($user && $user['Role']['perm_site_admin']) {\n            return true;\n        }\n        if (!isset(self::ACL_LIST[$controller])) {\n            throw new NotFoundException('Invalid controller.');\n        }\n        $controllerAclList = array_change_key_case(self::ACL_LIST[$controller]);\n        if (!empty($controllerAclList[$action])) {\n            $rules = $controllerAclList[$action];\n            if (in_array('*', $rules, true)) {\n                return true;\n            }\n            if (isset($rules['OR'])) {\n                foreach ($rules['OR'] as $permission) {\n                    if (isset($this->dynamicChecks[$permission])) {\n                        if ($this->dynamicChecks[$permission]($user)) {\n                            return true;\n                        }\n                    } else {\n                        if ($user['Role'][$permission]) {\n                            return true;\n                        }\n                    }\n                }\n            } elseif (isset($rules['AND'])) {\n                $allConditionsMet = true;\n                foreach ($rules['AND'] as $permission) {\n                    if (isset($this->dynamicChecks[$permission])) {\n                        if (!$this->dynamicChecks[$permission]($user)) {\n                            $allConditionsMet = false;\n                        }\n                    } else {\n                        if (!$user['Role'][$permission]) {\n                            $allConditionsMet = false;\n                        }\n                    }\n                }\n                if ($allConditionsMet) {\n                    return true;\n                }\n            } elseif (isset($this->dynamicChecks[$rules[0]])) {\n                if ($this->dynamicChecks[$rules[0]]($user)) {\n                    return true;\n                }\n            } elseif ($user['Role'][$rules[0]]) {\n                return true;\n            }\n        }\n        throw new MethodNotAllowedException('You do not have permission to use this functionality.');\n    }\n\n    private function __findAllFunctions()\n    {\n        $functionsToIgnore = ['beforeFilter', 'afterFilter', 'beforeRender',  'getEventManager'];\n\n        $functionFinder = '/function[\\s\\n]+(\\S+)[\\s\\n]*\\(/';\n        $dir = new Folder(APP . 'Controller');\n        $files = $dir->find('.*\\.php');\n        $results = array();\n        foreach ($files as $file) {\n            $controllerName = lcfirst(str_replace('Controller.php', \"\", $file));\n            if ($controllerName === 'app') {\n                $controllerName = '*';\n            }\n            $functionArray = array();\n            $fileContents = FileAccessTool::readFromFile(APP . 'Controller' . DS . $file);\n            $fileContents = preg_replace('/\\/\\*[^\\*]+?\\*\\//', '', $fileContents);\n            preg_match_all($functionFinder, $fileContents, $functionArray);\n            foreach ($functionArray[1] as $function) {\n                if ($function[0] !== '_' && !in_array($function, $functionsToIgnore, true)) {\n                    $results[$controllerName][] = $function;\n                }\n            }\n        }\n        return $results;\n    }\n\n    public function printAllFunctionNames($content = false)\n    {\n        $results = $this->__findAllFunctions();\n        ksort($results);\n        return $results;\n    }\n\n    public function findMissingFunctionNames($content = false)\n    {\n        $results = $this->__findAllFunctions();\n        $missing = array();\n        foreach ($results as $controller => $functions) {\n            foreach ($functions as $function) {\n                if (!isset(self::ACL_LIST[$controller]) || !in_array($function, array_keys(self::ACL_LIST[$controller]))) {\n                    $missing[$controller][] = $function;\n                }\n            }\n        }\n        return $missing;\n    }\n\n    public function printRoleAccess($content = false)\n    {\n        $results = array();\n        $this->Role = ClassRegistry::init('Role');\n        $conditions = array();\n        if (is_numeric($content)) {\n            $conditions = array('Role.id' => $content);\n        }\n        $roles = $this->Role->find('all', array(\n            'recursive' => -1,\n            'conditions' => $conditions\n        ));\n        if (empty($roles)) {\n            throw new NotFoundException('Role not found.');\n        }\n        foreach ($roles as $role) {\n            $urls = $this->__checkRoleAccess($role['Role']);\n            $results[$role['Role']['id']] = array('name' => $role['Role']['name'], 'urls' => $urls);\n        }\n        return $results;\n    }\n\n    private function __checkRoleAccess(array $role)\n    {\n        $result = array();\n        $fakeUser = ['Role' => $role, 'org_id' => $this->hostOrgId];\n        foreach (self::ACL_LIST as $controller => $actions) {\n            $controllerNames = Inflector::variable($controller) === Inflector::underscore($controller) ?\n                array(Inflector::variable($controller)) :\n                array(Inflector::variable($controller), Inflector::underscore($controller));\n            foreach ($controllerNames as $controllerName) {\n                foreach ($actions as $action => $permissions) {\n                    if ($this->canUserAccess($fakeUser, $controllerName, $action)) {\n                        $result[] = \"/$controllerName/$action\";\n                    }\n                }\n            }\n        }\n        return $result;\n    }\n}\n"], "filenames": ["app/Controller/Component/ACLComponent.php"], "buggy_code_start_loc": [128], "buggy_code_end_loc": [129], "fixing_code_start_loc": [128], "fixing_code_end_loc": [129], "type": "NVD-CWE-Other", "message": "In MISP 2.4.167, app/Controller/Component/ACLComponent.php has incorrect access control for the decaying import function.", "other": {"cve": {"id": "CVE-2023-24028", "sourceIdentifier": "cve@mitre.org", "published": "2023-01-20T22:15:10.767", "lastModified": "2023-01-27T14:29:39.073", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In MISP 2.4.167, app/Controller/Component/ACLComponent.php has incorrect access control for the decaying import function."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp-project:misp:2.4.167:*:*:*:*:*:*:*", "matchCriteriaId": "22483A68-8ADB-435E-9972-4A130C5FE8C6"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/93bf15d3bd703a32ebfe86cb6c1c9b735cf23e30", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/93bf15d3bd703a32ebfe86cb6c1c9b735cf23e30"}}