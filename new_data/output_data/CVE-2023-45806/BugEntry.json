{"buggy_code": ["# frozen_string_literal: true\n\nclass QuoteRewriter\n  def initialize(user_id)\n    @user_id = user_id\n  end\n\n  def rewrite_raw_username(raw, old_username, new_username)\n    pattern =\n      Regexp.union(\n        /(?<pre>\\[quote\\s*=\\s*[\"'']?.*username:)#{old_username}(?<post>\\,?[^\\]]*\\])/i,\n        /(?<pre>\\[quote\\s*=\\s*[\"'']?)#{old_username}(?<post>\\,?[^\\]]*\\])/i,\n      )\n\n    raw.gsub(pattern, \"\\\\k<pre>#{new_username}\\\\k<post>\")\n  end\n\n  def rewrite_cooked_username(cooked, old_username, new_username, avatar_img)\n    pattern = /(?<=\\s)#{PrettyText::Helpers.format_username(old_username)}(?=:)/i\n\n    cooked\n      .css(\"aside.quote\")\n      .each do |aside|\n        next unless div = aside.at_css(\"div.title\")\n\n        username_replaced = false\n\n        aside[\"data-username\"] = new_username if aside[\"data-username\"] == old_username\n\n        div.children.each do |child|\n          if child.text?\n            content = child.content\n            username_replaced = content.gsub!(pattern, new_username).present?\n            child.content = content if username_replaced\n          end\n        end\n\n        if username_replaced || quotes_correct_user?(aside)\n          div.at_css(\"img.avatar\")&.replace(avatar_img)\n        end\n      end\n  end\n\n  def rewrite_raw_display_name(raw, old_display_name, new_display_name)\n    pattern = /(?<pre>\\[quote\\s*=\\s*[\"'']?)#{old_display_name}(?<post>\\,[^\\]]*username[^\\]]*\\])/i\n\n    raw.gsub(pattern, \"\\\\k<pre>#{new_display_name}\\\\k<post>\")\n  end\n\n  def rewrite_cooked_display_name(cooked, old_display_name, new_display_name)\n    pattern = /(?<=\\s)#{PrettyText::Helpers.format_username(old_display_name)}(?=:)/i\n\n    cooked\n      .css(\"aside.quote\")\n      .each do |aside|\n        next unless div = aside.at_css(\"div.title\")\n\n        div.children.each do |child|\n          if child.text?\n            content = child.content\n            display_name_replaced = content.gsub!(pattern, new_display_name).present?\n            child.content = content if display_name_replaced\n          end\n        end\n      end\n  end\n\n  private\n\n  attr_reader :user_id\n\n  def quotes_correct_user?(aside)\n    Post.exists?(topic_id: aside[\"data-topic\"], post_number: aside[\"data-post\"], user_id: user_id)\n  end\nend\n", "# frozen_string_literal: true\n\nRSpec.describe Jobs::ChangeDisplayName do\n  before { stub_image_size }\n\n  let(:user) { Fabricate(:user, username: \"codinghorror\", name: \"Jeff\") }\n  let(:topic) { Fabricate(:topic, user: user) }\n  let!(:post) { create_post(post_attributes.merge(topic_id: topic.id)) }\n\n  let!(:quoted_post) { create_post(user: user, topic: topic, post_number: 1, raw: \"quoted post\") }\n  let(:avatar_url) { user.avatar_template_url.gsub(\"{size}\", \"48\") }\n\n  let(:post_attributes) { { raw: <<~RAW } }\n    [quote=\"Jeff, post:1, topic:#{quoted_post.topic.id}, username:codinghorror\"]\n    quoted post\n    [/quote]\n  RAW\n\n  let(:revised_post_attributes) { { raw: <<~RAW } }\n    [quote=\"Jeff, post:1, topic:#{quoted_post.topic.id}, username:codinghorror\"]\n    quoted post\n    [/quote]\n    Forgot something.\n  RAW\n\n  let(:args) { { user_id: user.id, old_name: \"Jeff\", new_name: \"Mr. Atwood\" } }\n\n  describe \"#execute\" do\n    context \"when the renamed user has been quoted\" do\n      it \"rewrites the raw quote display name\" do\n        expect { described_class.new.execute(args) }.to change { post.reload.raw }.to(<<~RAW.strip)\n          [quote=\"Mr. Atwood, post:1, topic:#{quoted_post.topic.id}, username:codinghorror\"]\n          quoted post\n          [/quote]\n        RAW\n      end\n\n      it \"rewrites the cooked quote display name\" do\n        expect { described_class.new.execute(args) }.to change { post.reload.cooked }.to(\n          match_html(<<~HTML.strip),\n          <aside class=\"quote no-group\" data-username=\"codinghorror\" data-post=\"1\" data-topic=\"#{quoted_post.topic.id}\">\n          <div class=\"title\">\n          <div class=\"quote-controls\"></div>\n          <img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"#{avatar_url}\" class=\"avatar\"> Mr. Atwood:</div>\n          <blockquote>\n          <p>quoted post</p>\n          </blockquote>\n          </aside>\n        HTML\n        )\n      end\n    end\n\n    context \"when the user has been quoted in revisions\" do\n      before { post.revise(post.user, revised_post_attributes, force_new_version: true) }\n\n      it \"rewrites the quote in revisions\" do\n        expect { described_class.new.execute(args) }.to change {\n          post.reload.revisions[0].modifications[\"raw\"][0]\n        }.to(<<~RAW.strip)\n          [quote=\"Mr. Atwood, post:1, topic:#{quoted_post.topic.id}, username:codinghorror\"]\n          quoted post\n          [/quote]\n          RAW\n      end\n    end\n  end\nend\n"], "fixing_code": ["# frozen_string_literal: true\n\nclass QuoteRewriter\n  def initialize(user_id)\n    @user_id = user_id\n  end\n\n  def rewrite_raw_username(raw, old_username, new_username)\n    escaped_old_username = Regexp.escape(old_username)\n    pattern =\n      Regexp.union(\n        /(?<pre>\\[quote\\s*=\\s*[\"'']?.*username:)#{escaped_old_username}(?<post>\\,?[^\\]]*\\])/i,\n        /(?<pre>\\[quote\\s*=\\s*[\"'']?)#{escaped_old_username}(?<post>\\,?[^\\]]*\\])/i,\n      )\n\n    raw.gsub(pattern, \"\\\\k<pre>#{new_username}\\\\k<post>\")\n  end\n\n  def rewrite_cooked_username(cooked, old_username, new_username, avatar_img)\n    formatted_old_username = PrettyText::Helpers.format_username(old_username)\n    escaped_old_username = Regexp.escape(formatted_old_username)\n    pattern = /(?<=\\s)#{escaped_old_username}(?=:)/i\n\n    cooked\n      .css(\"aside.quote\")\n      .each do |aside|\n        next unless div = aside.at_css(\"div.title\")\n\n        username_replaced = false\n\n        aside[\"data-username\"] = new_username if aside[\"data-username\"] == old_username\n\n        div.children.each do |child|\n          if child.text?\n            content = child.content\n            username_replaced = content.gsub!(pattern, new_username).present?\n            child.content = content if username_replaced\n          end\n        end\n\n        if username_replaced || quotes_correct_user?(aside)\n          div.at_css(\"img.avatar\")&.replace(avatar_img)\n        end\n      end\n  end\n\n  def rewrite_raw_display_name(raw, old_display_name, new_display_name)\n    escaped_old_display_name = Regexp.escape(old_display_name)\n    pattern =\n      /(?<pre>\\[quote\\s*=\\s*[\"'']?)#{escaped_old_display_name}(?<post>\\,[^\\]]*username[^\\]]*\\])/i\n\n    raw.gsub(pattern, \"\\\\k<pre>#{new_display_name}\\\\k<post>\")\n  end\n\n  def rewrite_cooked_display_name(cooked, old_display_name, new_display_name)\n    formatted_old_display_name = PrettyText::Helpers.format_username(old_display_name)\n    escaped_old_display_name = Regexp.escape(formatted_old_display_name)\n    pattern = /(?<=\\s)#{escaped_old_display_name}(?=:)/i\n\n    cooked\n      .css(\"aside.quote\")\n      .each do |aside|\n        next unless div = aside.at_css(\"div.title\")\n\n        div.children.each do |child|\n          if child.text?\n            content = child.content\n            display_name_replaced = content.gsub!(pattern, new_display_name).present?\n            child.content = content if display_name_replaced\n          end\n        end\n      end\n  end\n\n  private\n\n  attr_reader :user_id\n\n  def quotes_correct_user?(aside)\n    Post.exists?(topic_id: aside[\"data-topic\"], post_number: aside[\"data-post\"], user_id: user_id)\n  end\nend\n", "# frozen_string_literal: true\n\nRSpec.describe Jobs::ChangeDisplayName do\n  before { stub_image_size }\n\n  let(:username) { \"codinghorror\" }\n  let(:old_display_name) { \"|| Jeff ||\" }\n  let(:new_display_name) { \"|| Mr. Atwood ||\" }\n\n  let(:user) { Fabricate(:user, username: username, name: old_display_name) }\n  let(:topic) { Fabricate(:topic, user: user) }\n  let!(:post) { create_post(post_attributes.merge(topic_id: topic.id)) }\n\n  let!(:quoted_post) { create_post(user: user, topic: topic, post_number: 1, raw: \"quoted post\") }\n  let(:avatar_url) { user.avatar_template_url.gsub(\"{size}\", \"48\") }\n\n  let(:post_attributes) { { raw: <<~RAW } }\n    [quote=\"#{old_display_name}, post:1, topic:#{quoted_post.topic.id}, username:#{username}\"]\n    quoted post\n    [/quote]\n  RAW\n\n  let(:revised_post_attributes) { { raw: <<~RAW } }\n    [quote=\"#{old_display_name}, post:1, topic:#{quoted_post.topic.id}, username:#{username}\"]\n    quoted post\n    [/quote]\n    Forgot something.\n  RAW\n\n  let(:args) { { user_id: user.id, old_name: old_display_name, new_name: new_display_name } }\n\n  describe \"#execute\" do\n    context \"when the renamed user has been quoted\" do\n      it \"rewrites the raw quote display name\" do\n        expect { described_class.new.execute(args) }.to change { post.reload.raw }.to(<<~RAW.strip)\n          [quote=\"#{new_display_name}, post:1, topic:#{quoted_post.topic.id}, username:#{username}\"]\n          quoted post\n          [/quote]\n        RAW\n      end\n\n      it \"rewrites the cooked quote display name\" do\n        expect { described_class.new.execute(args) }.to change { post.reload.cooked }.to(\n          match_html(<<~HTML.strip),\n          <aside class=\"quote no-group\" data-username=\"#{username}\" data-post=\"1\" data-topic=\"#{quoted_post.topic.id}\">\n          <div class=\"title\">\n          <div class=\"quote-controls\"></div>\n          <img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"#{avatar_url}\" class=\"avatar\"> #{new_display_name}:</div>\n          <blockquote>\n          <p>quoted post</p>\n          </blockquote>\n          </aside>\n        HTML\n        )\n      end\n    end\n\n    context \"when the user has been quoted in revisions\" do\n      before { post.revise(post.user, revised_post_attributes, force_new_version: true) }\n\n      it \"rewrites the quote in revisions\" do\n        expect { described_class.new.execute(args) }.to change {\n          post.reload.revisions[0].modifications[\"raw\"][0]\n        }.to(<<~RAW.strip)\n          [quote=\"#{new_display_name}, post:1, topic:#{quoted_post.topic.id}, username:#{username}\"]\n          quoted post\n          [/quote]\n          RAW\n      end\n    end\n  end\nend\n"], "filenames": ["lib/quote_rewriter.rb", "spec/jobs/change_display_name_spec.rb"], "buggy_code_start_loc": [8, 6], "buggy_code_end_loc": [52, 62], "fixing_code_start_loc": [9, 6], "fixing_code_end_loc": [59, 66], "type": "CWE-1333", "message": "Discourse is an open source platform for community discussion. Prior to version 3.1.3 of the `stable` branch and version 3.2.0.beta3 of the `beta` and `tests-passed` branches, if a user has been quoted and uses a `|` in their full name, they might be able to trigger a bug that generates a lot of duplicate content in all the posts they've been quoted by updating their full name again. Version 3.1.3 of the `stable` branch and version 3.2.0.beta3 of the `beta` and `tests-passed` branches contain a patch for this issue. No known workaround exists, although one can stop the \"bleeding\" by ensuring users only use alphanumeric characters in their full name field.", "other": {"cve": {"id": "CVE-2023-45806", "sourceIdentifier": "security-advisories@github.com", "published": "2023-11-10T15:15:08.440", "lastModified": "2023-11-17T18:03:00.167", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Discourse is an open source platform for community discussion. Prior to version 3.1.3 of the `stable` branch and version 3.2.0.beta3 of the `beta` and `tests-passed` branches, if a user has been quoted and uses a `|` in their full name, they might be able to trigger a bug that generates a lot of duplicate content in all the posts they've been quoted by updating their full name again. Version 3.1.3 of the `stable` branch and version 3.2.0.beta3 of the `beta` and `tests-passed` branches contain a patch for this issue. No known workaround exists, although one can stop the \"bleeding\" by ensuring users only use alphanumeric characters in their full name field."}, {"lang": "es", "value": "Discourse es una plataforma de c\u00f3digo abierto para el debate comunitario. Antes de la versi\u00f3n 3.1.3 de la rama `stable` y la versi\u00f3n 3.2.0.beta3 de las ramas `beta` y `tests-passed`, si un usuario ha sido citado y usa un `|` en su nombre completo, podr\u00eda desencadenar un error que genere una gran cantidad de contenido duplicado en todas las publicaciones que han sido citados al actualizar su nombre completo nuevamente. La versi\u00f3n 3.1.3 de la rama `stable` y la versi\u00f3n 3.2.0.beta3 de las ramas `beta` y `tests-passed` contienen un parche para este problema. No existe ning\u00fan workaround conocido, aunque se puede detener el \"sangrado\" asegur\u00e1ndose de que los usuarios s\u00f3lo utilicen caracteres alfanum\u00e9ricos en el campo de nombre completo."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1333"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:*:*:*:*:stable:*:*:*", "versionEndExcluding": "3.1.3", "matchCriteriaId": "8E31336C-750D-4039-A89F-FF602B59098C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:*:*:*:*:beta:*:*:*", "versionEndExcluding": "3.2.0", "matchCriteriaId": "E10444D1-B4E6-4EA7-A56E-95BD0FA3E39D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:3.2.0:beta1:*:*:beta:*:*:*", "matchCriteriaId": "1BFF647B-6CEF-43BF-BF5E-C82B557F78E2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:3.2.0:beta2:*:*:beta:*:*:*", "matchCriteriaId": "10D931DE-F8F5-4A34-A30A-FDD4420ABD1A"}]}]}], "references": [{"url": "https://github.com/discourse/discourse/commit/2ec25105179199cf80912bf011c18b8b870e1863", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/discourse/discourse/commit/7d484864fe91ff79c478f57e7ddb1235d701921e", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/discourse/discourse/security/advisories/GHSA-hcgf-hg2g-mw78", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/discourse/discourse/commit/2ec25105179199cf80912bf011c18b8b870e1863"}}