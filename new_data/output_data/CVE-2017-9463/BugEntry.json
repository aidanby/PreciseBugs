{"buggy_code": ["<?php\n// +-----------------------------------------------------------------------+\n// | Piwigo - a PHP based photo gallery                                    |\n// +-----------------------------------------------------------------------+\n// | Copyright(C) 2008-2016 Piwigo Team                  http://piwigo.org |\n// | Copyright(C) 2003-2008 PhpWebGallery Team    http://phpwebgallery.net |\n// | Copyright(C) 2002-2003 Pierrick LE GALL   http://le-gall.net/pierrick |\n// +-----------------------------------------------------------------------+\n// | This program is free software; you can redistribute it and/or modify  |\n// | it under the terms of the GNU General Public License as published by  |\n// | the Free Software Foundation                                          |\n// |                                                                       |\n// | This program is distributed in the hope that it will be useful, but   |\n// | WITHOUT ANY WARRANTY; without even the implied warranty of            |\n// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU      |\n// | General Public License for more details.                              |\n// |                                                                       |\n// | You should have received a copy of the GNU General Public License     |\n// | along with this program; if not, write to the Free Software           |\n// | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, |\n// | USA.                                                                  |\n// +-----------------------------------------------------------------------+\n\ndefine('PHPWG_ROOT_PATH','../');\ndefine('IN_ADMIN', true);\n\ninclude_once(PHPWG_ROOT_PATH.'include/common.inc.php');\n\ncheck_status(ACCESS_ADMINISTRATOR);\n\t\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Easy set variables\n */\n\t\n/* Array of database columns which should be read and sent back to DataTables. Use a space where\n * you want to insert a non-database field (for example a counter or static image)\n */\n$aColumns = array(\n  $conf['user_fields']['id'],\n  $conf['user_fields']['username'],\n  'status',\n  $conf['user_fields']['email'],\n  'recent_period',\n  'level',\n  'registration_date'\n  );\n\n$aColumns = trigger_change('user_list_columns', $aColumns);\n\t\n/* Indexed column (used for fast and accurate table cardinality) */\n$sIndexColumn = 'user_id';\n\t\n/* DB table to use */\n$sTable = USERS_TABLE.' INNER JOIN '.USER_INFOS_TABLE.' AS ui ON '.$conf['user_fields']['id'].' = ui.user_id';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * If you just want to use the basic configuration for DataTables with PHP server-side, there is\n * no need to edit below this line\n */\n\n/* \n * Paging\n */\n$sLimit = \"\";\nif ( isset( $_REQUEST['iDisplayStart'] ) && $_REQUEST['iDisplayLength'] != '-1' )\n{\n  $sLimit = \"LIMIT \".pwg_db_real_escape_string( $_REQUEST['iDisplayStart'] ).\", \".\n    pwg_db_real_escape_string( $_REQUEST['iDisplayLength'] );\n}\n\t\n\t\n/*\n * Ordering\n */\nif ( isset( $_REQUEST['iSortCol_0'] ) )\n{\n  $sOrder = \"ORDER BY  \";\n  for ( $i=0 ; $i<intval( $_REQUEST['iSortingCols'] ) ; $i++ )\n  {\n    if ( $_REQUEST[ 'bSortable_'.intval($_REQUEST['iSortCol_'.$i]) ] == \"true\" )\n    {\n      $sOrder .= $aColumns[ intval( $_REQUEST['iSortCol_'.$i] ) ].\"\n\t\t\t\t \t\".pwg_db_real_escape_string( $_REQUEST['sSortDir_'.$i] ) .\", \";\n    }\n  }\n\t\t\n  $sOrder = substr_replace( $sOrder, \"\", -2 );\n  if ( $sOrder == \"ORDER BY\" )\n  {\n    $sOrder = \"\";\n  }\n}\n\t\n\t\n/* \n * Filtering\n * NOTE this does not match the built-in DataTables filtering which does it\n * word by word on any field. It's possible to do here, but concerned about efficiency\n * on very large tables, and MySQL's regex functionality is very limited\n */\n$sWhere = \"\";\nif ( $_REQUEST['sSearch'] != \"\" )\n{\n  $sWhere = \"WHERE (\";\n  for ( $i=0 ; $i<count($aColumns) ; $i++ )\n  {\n    $sWhere .= $aColumns[$i].\" LIKE '%\".pwg_db_real_escape_string( $_REQUEST['sSearch'] ).\"%' OR \";\n  }\n  $sWhere = substr_replace( $sWhere, \"\", -3 );\n  $sWhere .= ')';\n}\n\t\n/* Individual column filtering */\nfor ( $i=0 ; $i<count($aColumns) ; $i++ )\n{\n  if (isset($_REQUEST['bSearchable_'.$i]) && isset($_REQUEST['sSearch_'.$i])\n      &&$_REQUEST['bSearchable_'.$i] == \"true\" && $_REQUEST['sSearch_'.$i] != ''\n    )\n  {\n    if ( $sWhere == \"\" )\n    {\n      $sWhere = \"WHERE \";\n    }\n    else\n    {\n      $sWhere .= \" AND \";\n    }\n    $sWhere .= $aColumns[$i].\" LIKE '%\".pwg_db_real_escape_string($_REQUEST['sSearch_'.$i]).\"%' \";\n  }\n}\n\t\n\t\n/*\n * SQL queries\n * Get data to display\n */\n$sQuery = \"\n\t\tSELECT SQL_CALC_FOUND_ROWS \".str_replace(\" , \", \" \", implode(\", \", $aColumns)).\"\n\t\tFROM   $sTable\n\t\t$sWhere\n\t\t$sOrder\n\t\t$sLimit\n\t\";\n$rResult = pwg_query($sQuery);\n\t\n/* Data set length after filtering */\n$rResultFilterTotal = pwg_query('SELECT FOUND_ROWS();');\nlist($iFilteredTotal) = pwg_db_fetch_row($rResultFilterTotal);\n\t\n/* Total data set length */\n$sQuery = \"\n\t\tSELECT COUNT(\".$sIndexColumn.\")\n\t\tFROM   $sTable\n\t\";\n$rResultTotal = pwg_query($sQuery);\n$aResultTotal = pwg_db_fetch_array($rResultTotal);\n$iTotal = $aResultTotal[0];\n\t\n\t\n/*\n * Output\n */\n$output = array(\n  \"sEcho\" => intval($_REQUEST['sEcho']),\n  \"iTotalRecords\" => $iTotal,\n  \"iTotalDisplayRecords\" => $iFilteredTotal,\n  \"aaData\" => array()\n\t);\n\n$user_ids = array();\n\nwhile ( $aRow = pwg_db_fetch_array( $rResult ) )\n{\n  $user_ids[] = $aRow[ $conf['user_fields']['id'] ];\n  \n  $row = array();\n  for ( $i=0 ; $i<count($aColumns) ; $i++ )\n  {\n    if ( $aColumns[$i] == \"status\" )\n    {\n      $row[] = l10n('user_status_'.$aRow[ $aColumns[$i] ]);\n    }\n    else if ( $aColumns[$i] == \"level\" )\n    {\n      $row[] = $aRow[ $aColumns[$i] ] == 0 ? '' : l10n(sprintf('Level %d', $aRow[ $aColumns[$i] ]));\n    }\n    else if ( $aColumns[$i] != ' ' )\n    {\n      /* General output */\n      $colname = $aColumns[$i];\n      foreach ($conf['user_fields'] as $real_name => $alias)\n      {\n        if ($aColumns[$i] == $real_name)\n        {\n          $colname = $alias;\n        }\n      }\n      \n      $row[] = $aRow[$colname];\n    }\n\n  }\n  $output['aaData'][] = $row;\n}\n\n// replace \"recent_period\" by the list of groups\nif (count($user_ids) > 0)\n{\n  $groups_of_user = array();\n  \n  $query = '\nSELECT\n    user_id,\n    GROUP_CONCAT(name ORDER BY name SEPARATOR \", \") AS groups\n  FROM '.USER_GROUP_TABLE.'\n    JOIN '.GROUPS_TABLE.' ON id = group_id\n  WHERE user_id IN ('.implode(',', $user_ids).')\n  GROUP BY user_id\n;';\n  $result = pwg_query($query);\n  while ($row = pwg_db_fetch_assoc($result))\n  {\n    $groups_of_user[ $row['user_id'] ] = $row['groups'];\n  }\n\n  $key_replace = array_search('recent_period', $aColumns);\n  \n  // replacement\n  foreach (array_keys($output['aaData']) as $idx)\n  {\n    $user_id = $output['aaData'][$idx][0];\n    $output['aaData'][$idx][$key_replace] = isset($groups_of_user[$user_id]) ? $groups_of_user[$user_id] : '';\n  }\n}\n\n$output = trigger_change('after_render_user_list', $output);\n\t\necho json_encode( $output );\n?>"], "fixing_code": ["<?php\n// +-----------------------------------------------------------------------+\n// | Piwigo - a PHP based photo gallery                                    |\n// +-----------------------------------------------------------------------+\n// | Copyright(C) 2008-2016 Piwigo Team                  http://piwigo.org |\n// | Copyright(C) 2003-2008 PhpWebGallery Team    http://phpwebgallery.net |\n// | Copyright(C) 2002-2003 Pierrick LE GALL   http://le-gall.net/pierrick |\n// +-----------------------------------------------------------------------+\n// | This program is free software; you can redistribute it and/or modify  |\n// | it under the terms of the GNU General Public License as published by  |\n// | the Free Software Foundation                                          |\n// |                                                                       |\n// | This program is distributed in the hope that it will be useful, but   |\n// | WITHOUT ANY WARRANTY; without even the implied warranty of            |\n// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU      |\n// | General Public License for more details.                              |\n// |                                                                       |\n// | You should have received a copy of the GNU General Public License     |\n// | along with this program; if not, write to the Free Software           |\n// | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, |\n// | USA.                                                                  |\n// +-----------------------------------------------------------------------+\n\ndefine('PHPWG_ROOT_PATH','../');\ndefine('IN_ADMIN', true);\n\ninclude_once(PHPWG_ROOT_PATH.'include/common.inc.php');\n\ncheck_status(ACCESS_ADMINISTRATOR);\n\ncheck_input_parameter('iDisplayStart', $_REQUEST, false, PATTERN_ID);\ncheck_input_parameter('iDisplayLength', $_REQUEST, false, PATTERN_ID);\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Easy set variables\n */\n\t\n/* Array of database columns which should be read and sent back to DataTables. Use a space where\n * you want to insert a non-database field (for example a counter or static image)\n */\n$aColumns = array(\n  $conf['user_fields']['id'],\n  $conf['user_fields']['username'],\n  'status',\n  $conf['user_fields']['email'],\n  'recent_period',\n  'level',\n  'registration_date'\n  );\n\n$aColumns = trigger_change('user_list_columns', $aColumns);\n\t\n/* Indexed column (used for fast and accurate table cardinality) */\n$sIndexColumn = 'user_id';\n\t\n/* DB table to use */\n$sTable = USERS_TABLE.' INNER JOIN '.USER_INFOS_TABLE.' AS ui ON '.$conf['user_fields']['id'].' = ui.user_id';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * If you just want to use the basic configuration for DataTables with PHP server-side, there is\n * no need to edit below this line\n */\n\n/* \n * Paging\n */\n$sLimit = \"\";\nif ( isset( $_REQUEST['iDisplayStart'] ) && $_REQUEST['iDisplayLength'] != '-1' )\n{\n  $sLimit = \"LIMIT \".pwg_db_real_escape_string( $_REQUEST['iDisplayStart'] ).\", \".\n    pwg_db_real_escape_string( $_REQUEST['iDisplayLength'] );\n}\n\t\n\t\n/*\n * Ordering\n */\nif ( isset( $_REQUEST['iSortCol_0'] ) )\n{\n  $sOrder = \"ORDER BY  \";\n  for ( $i=0 ; $i<intval( $_REQUEST['iSortingCols'] ) ; $i++ )\n  {\n    if ( $_REQUEST[ 'bSortable_'.intval($_REQUEST['iSortCol_'.$i]) ] == \"true\" )\n    {\n      $sOrder .= $aColumns[ intval( $_REQUEST['iSortCol_'.$i] ) ].\"\n\t\t\t\t \t\".pwg_db_real_escape_string( $_REQUEST['sSortDir_'.$i] ) .\", \";\n    }\n  }\n\t\t\n  $sOrder = substr_replace( $sOrder, \"\", -2 );\n  if ( $sOrder == \"ORDER BY\" )\n  {\n    $sOrder = \"\";\n  }\n}\n\t\n\t\n/* \n * Filtering\n * NOTE this does not match the built-in DataTables filtering which does it\n * word by word on any field. It's possible to do here, but concerned about efficiency\n * on very large tables, and MySQL's regex functionality is very limited\n */\n$sWhere = \"\";\nif ( $_REQUEST['sSearch'] != \"\" )\n{\n  $sWhere = \"WHERE (\";\n  for ( $i=0 ; $i<count($aColumns) ; $i++ )\n  {\n    $sWhere .= $aColumns[$i].\" LIKE '%\".pwg_db_real_escape_string( $_REQUEST['sSearch'] ).\"%' OR \";\n  }\n  $sWhere = substr_replace( $sWhere, \"\", -3 );\n  $sWhere .= ')';\n}\n\t\n/* Individual column filtering */\nfor ( $i=0 ; $i<count($aColumns) ; $i++ )\n{\n  if (isset($_REQUEST['bSearchable_'.$i]) && isset($_REQUEST['sSearch_'.$i])\n      &&$_REQUEST['bSearchable_'.$i] == \"true\" && $_REQUEST['sSearch_'.$i] != ''\n    )\n  {\n    if ( $sWhere == \"\" )\n    {\n      $sWhere = \"WHERE \";\n    }\n    else\n    {\n      $sWhere .= \" AND \";\n    }\n    $sWhere .= $aColumns[$i].\" LIKE '%\".pwg_db_real_escape_string($_REQUEST['sSearch_'.$i]).\"%' \";\n  }\n}\n\t\n\t\n/*\n * SQL queries\n * Get data to display\n */\n$sQuery = \"\n\t\tSELECT SQL_CALC_FOUND_ROWS \".str_replace(\" , \", \" \", implode(\", \", $aColumns)).\"\n\t\tFROM   $sTable\n\t\t$sWhere\n\t\t$sOrder\n\t\t$sLimit\n\t\";\n$rResult = pwg_query($sQuery);\n\t\n/* Data set length after filtering */\n$rResultFilterTotal = pwg_query('SELECT FOUND_ROWS();');\nlist($iFilteredTotal) = pwg_db_fetch_row($rResultFilterTotal);\n\t\n/* Total data set length */\n$sQuery = \"\n\t\tSELECT COUNT(\".$sIndexColumn.\")\n\t\tFROM   $sTable\n\t\";\n$rResultTotal = pwg_query($sQuery);\n$aResultTotal = pwg_db_fetch_array($rResultTotal);\n$iTotal = $aResultTotal[0];\n\t\n\t\n/*\n * Output\n */\n$output = array(\n  \"sEcho\" => intval($_REQUEST['sEcho']),\n  \"iTotalRecords\" => $iTotal,\n  \"iTotalDisplayRecords\" => $iFilteredTotal,\n  \"aaData\" => array()\n\t);\n\n$user_ids = array();\n\nwhile ( $aRow = pwg_db_fetch_array( $rResult ) )\n{\n  $user_ids[] = $aRow[ $conf['user_fields']['id'] ];\n  \n  $row = array();\n  for ( $i=0 ; $i<count($aColumns) ; $i++ )\n  {\n    if ( $aColumns[$i] == \"status\" )\n    {\n      $row[] = l10n('user_status_'.$aRow[ $aColumns[$i] ]);\n    }\n    else if ( $aColumns[$i] == \"level\" )\n    {\n      $row[] = $aRow[ $aColumns[$i] ] == 0 ? '' : l10n(sprintf('Level %d', $aRow[ $aColumns[$i] ]));\n    }\n    else if ( $aColumns[$i] != ' ' )\n    {\n      /* General output */\n      $colname = $aColumns[$i];\n      foreach ($conf['user_fields'] as $real_name => $alias)\n      {\n        if ($aColumns[$i] == $real_name)\n        {\n          $colname = $alias;\n        }\n      }\n      \n      $row[] = $aRow[$colname];\n    }\n\n  }\n  $output['aaData'][] = $row;\n}\n\n// replace \"recent_period\" by the list of groups\nif (count($user_ids) > 0)\n{\n  $groups_of_user = array();\n  \n  $query = '\nSELECT\n    user_id,\n    GROUP_CONCAT(name ORDER BY name SEPARATOR \", \") AS groups\n  FROM '.USER_GROUP_TABLE.'\n    JOIN '.GROUPS_TABLE.' ON id = group_id\n  WHERE user_id IN ('.implode(',', $user_ids).')\n  GROUP BY user_id\n;';\n  $result = pwg_query($query);\n  while ($row = pwg_db_fetch_assoc($result))\n  {\n    $groups_of_user[ $row['user_id'] ] = $row['groups'];\n  }\n\n  $key_replace = array_search('recent_period', $aColumns);\n  \n  // replacement\n  foreach (array_keys($output['aaData']) as $idx)\n  {\n    $user_id = $output['aaData'][$idx][0];\n    $output['aaData'][$idx][$key_replace] = isset($groups_of_user[$user_id]) ? $groups_of_user[$user_id] : '';\n  }\n}\n\n$output = trigger_change('after_render_user_list', $output);\n\t\necho json_encode( $output );\n?>"], "filenames": ["admin/user_list_backend.php"], "buggy_code_start_loc": [30], "buggy_code_end_loc": [31], "fixing_code_start_loc": [30], "fixing_code_end_loc": [34], "type": "CWE-89", "message": "The application Piwigo is affected by a SQL injection vulnerability in version 2.9.0 and possibly prior. This vulnerability allows remote authenticated attackers to obtain information in the context of the user used by the application to retrieve data from the database. The user_list_backend.php component is affected: values of the iDisplayStart & iDisplayLength parameters are not sanitized; these are used to construct a SQL query and retrieve a list of registered users into the application.", "other": {"cve": {"id": "CVE-2017-9463", "sourceIdentifier": "cve@mitre.org", "published": "2017-06-14T19:29:00.200", "lastModified": "2017-06-19T18:15:35.970", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The application Piwigo is affected by a SQL injection vulnerability in version 2.9.0 and possibly prior. This vulnerability allows remote authenticated attackers to obtain information in the context of the user used by the application to retrieve data from the database. The user_list_backend.php component is affected: values of the iDisplayStart & iDisplayLength parameters are not sanitized; these are used to construct a SQL query and retrieve a list of registered users into the application."}, {"lang": "es", "value": "La aplicaci\u00f3n Piwigo esta afectada por una vulnerabilidad de inyecci\u00f3n SQL en la versi\u00f3n 2.9.0 y posiblemente anteriores. Esta vulnerabilidad permite a los atacantes identificados  remotos obtener informaci\u00f3n en el contexto del usuario usado por la aplicaci\u00f3n para recuperar datos de la base de datos. El componente del archivo user_list_backend.php se ve afectado: los valores de los par\u00e1metros iDisplayStart y iDisplayLength no son saneados; estos se utilizan para construir una consulta SQL y recuperar una lista de usuarios registrados en la aplicaci\u00f3n."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:piwigo:piwigo:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.9.0", "matchCriteriaId": "1931608C-2835-4E94-AC78-CCBB6C9EC9E5"}]}]}], "references": [{"url": "https://github.com/Piwigo/Piwigo/commit/42920897ce927c236728d387f61bf03d117109a2", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/Piwigo/Piwigo/issues/705", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://www.wizlynxgroup.com/security-research-advisories/vuln/WLX-2017-003", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Piwigo/Piwigo/commit/42920897ce927c236728d387f61bf03d117109a2"}}