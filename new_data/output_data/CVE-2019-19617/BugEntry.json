{"buggy_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Displays git revision\n *\n * @package PhpMyAdmin\n */\nnamespace PhpMyAdmin\\Display;\n\nuse PhpMyAdmin\\Core;\nuse PhpMyAdmin\\Response;\nuse PhpMyAdmin\\Util;\n\n/**\n * PhpMyAdmin\\Display\\GitRevision class\n *\n * @package PhpMyAdmin\n */\nclass GitRevision\n{\n    /**\n    * Prints details about the current Git commit revision\n    *\n    * @return void\n    */\n    public static function display()\n    {\n\n        // load revision data from repo\n        $GLOBALS['PMA_Config']->checkGitRevision();\n\n        if (! $GLOBALS['PMA_Config']->get('PMA_VERSION_GIT')) {\n            $response = Response::getInstance();\n            $response->setRequestStatus(false);\n            return;\n        }\n\n        // if using a remote commit fast-forwarded, link to GitHub\n        $commit_hash = substr(\n            $GLOBALS['PMA_Config']->get('PMA_VERSION_GIT_COMMITHASH'),\n            0,\n            7\n        );\n        $commit_hash = '<strong title=\"'\n            . htmlspecialchars($GLOBALS['PMA_Config']->get('PMA_VERSION_GIT_MESSAGE'))\n            . '\">' . $commit_hash . '</strong>';\n        if ($GLOBALS['PMA_Config']->get('PMA_VERSION_GIT_ISREMOTECOMMIT')) {\n            $commit_hash = '<a href=\"'\n                . Core::linkURL(\n                    'https://github.com/phpmyadmin/phpmyadmin/commit/'\n                    . $GLOBALS['PMA_Config']->get('PMA_VERSION_GIT_COMMITHASH')\n                )\n                . '\" rel=\"noopener noreferrer\" target=\"_blank\">' . $commit_hash . '</a>';\n        }\n\n        $branch = $GLOBALS['PMA_Config']->get('PMA_VERSION_GIT_BRANCH');\n        if ($GLOBALS['PMA_Config']->get('PMA_VERSION_GIT_ISREMOTEBRANCH')) {\n            $branch = '<a href=\"'\n                . Core::linkURL(\n                    'https://github.com/phpmyadmin/phpmyadmin/tree/'\n                    . $GLOBALS['PMA_Config']->get('PMA_VERSION_GIT_BRANCH')\n                )\n                . '\" rel=\"noopener noreferrer\" target=\"_blank\">' . $branch . '</a>';\n        }\n        if ($branch !== false) {\n            $branch = sprintf(__('%1$s from %2$s branch'), $commit_hash, $branch);\n        } else {\n            $branch = $commit_hash . ' (' . __('no branch') . ')';\n        }\n\n        $committer = $GLOBALS['PMA_Config']->get('PMA_VERSION_GIT_COMMITTER');\n        $author = $GLOBALS['PMA_Config']->get('PMA_VERSION_GIT_AUTHOR');\n        Core::printListItem(\n            __('Git revision:') . ' '\n            . $branch . ',<br /> '\n            . sprintf(\n                __('committed on %1$s by %2$s'),\n                Util::localisedDate(strtotime($committer['date'])),\n                '<a href=\"' . Core::linkURL(\n                    'mailto:' . htmlspecialchars($committer['email'])\n                ) . '\">'\n                . htmlspecialchars($committer['name']) . '</a>'\n            )\n            . ($author != $committer\n                ? ', <br />'\n                . sprintf(\n                    __('authored on %1$s by %2$s'),\n                    Util::localisedDate(strtotime($author['date'])),\n                    '<a href=\"' . Core::linkURL(\n                        'mailto:' . htmlspecialchars($author['email'])\n                    ) . '\">'\n                    . htmlspecialchars($author['name']) . '</a>'\n                )\n                : ''),\n            'li_pma_version_git', null, null, null\n        );\n    }\n}\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Used to render the footer of PMA's pages\n *\n * @package PhpMyAdmin\n */\nnamespace PhpMyAdmin;\n\nuse PhpMyAdmin\\Config;\nuse PhpMyAdmin\\Core;\nuse PhpMyAdmin\\Message;\nuse PhpMyAdmin\\Relation;\nuse PhpMyAdmin\\Response;\nuse PhpMyAdmin\\Sanitize;\nuse PhpMyAdmin\\Scripts;\nuse PhpMyAdmin\\Url;\nuse PhpMyAdmin\\Util;\nuse Traversable;\n\n/**\n * Class used to output the footer\n *\n * @package PhpMyAdmin\n */\nclass Footer\n{\n    /**\n     * Scripts instance\n     *\n     * @access private\n     * @var Scripts\n     */\n    private $_scripts;\n    /**\n     * Whether we are servicing an ajax request.\n     *\n     * @access private\n     * @var bool\n     */\n    private $_isAjax;\n    /**\n     * Whether to only close the BODY and HTML tags\n     * or also include scripts, errors and links\n     *\n     * @access private\n     * @var bool\n     */\n    private $_isMinimal;\n    /**\n     * Whether to display anything\n     *\n     * @access private\n     * @var bool\n     */\n    private $_isEnabled;\n\n    /**\n     * @var Relation $relation\n     */\n    private $relation;\n\n    /**\n     * Creates a new class instance\n     */\n    public function __construct()\n    {\n        $this->_isEnabled = true;\n        $this->_scripts   = new Scripts();\n        $this->_isMinimal = false;\n        $this->relation = new Relation();\n    }\n\n    /**\n     * Returns the message for demo server to error messages\n     *\n     * @return string\n     */\n    private function _getDemoMessage()\n    {\n        $message = '<a href=\"/\">' . __('phpMyAdmin Demo Server') . '</a>: ';\n        if (@file_exists('./revision-info.php')) {\n            include './revision-info.php';\n            $message .= sprintf(\n                __('Currently running Git revision %1$s from the %2$s branch.'),\n                '<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"' . $repobase . $fullrevision . '\">'\n                . $revision . '</a>',\n                '<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"' . $repobranchbase . $branch . '\">'\n                . $branch . '</a>'\n            );\n        } else {\n            $message .= __('Git information missing!');\n        }\n\n        return Message::notice($message)->getDisplay();\n    }\n\n    /**\n     * Remove recursions and iterator objects from an object\n     *\n     * @param object|array &$object Object to clean\n     * @param array        $stack   Stack used to keep track of recursion,\n     *                              need not be passed for the first time\n     *\n     * @return object Reference passed object\n     */\n    private static function _removeRecursion(&$object, array $stack = array())\n    {\n        if ((is_object($object) || is_array($object)) && $object) {\n            if ($object instanceof Traversable) {\n                $object = \"***ITERATOR***\";\n            } elseif (!in_array($object, $stack, true)) {\n                $stack[] = $object;\n                foreach ($object as &$subobject) {\n                    self::_removeRecursion($subobject, $stack);\n                }\n            } else {\n                $object = \"***RECURSION***\";\n            }\n        }\n        return $object;\n    }\n\n    /**\n     * Renders the debug messages\n     *\n     * @return string\n     */\n    public function getDebugMessage()\n    {\n        $retval = '\\'null\\'';\n        if ($GLOBALS['cfg']['DBG']['sql']\n            && empty($_REQUEST['no_debug'])\n            && !empty($_SESSION['debug'])\n        ) {\n            // Remove recursions and iterators from $_SESSION['debug']\n            self::_removeRecursion($_SESSION['debug']);\n\n            $retval = JSON_encode($_SESSION['debug']);\n            $_SESSION['debug'] = array();\n            return json_last_error() ? '\\'false\\'' : $retval;\n        }\n        $_SESSION['debug'] = array();\n        return $retval;\n    }\n\n    /**\n     * Returns the url of the current page\n     *\n     * @return string\n     */\n    public function getSelfUrl()\n    {\n        $db = isset($GLOBALS['db']) && strlen($GLOBALS['db']) ? $GLOBALS['db'] : '';\n        $table = isset($GLOBALS['table']) && strlen($GLOBALS['table']) ? $GLOBALS['table'] : '';\n        $target = isset($_REQUEST['target']) && strlen($_REQUEST['target']) ? $_REQUEST['target'] : '';\n        $params = array(\n            'db' => $db,\n            'table' => $table,\n            'server' => $GLOBALS['server'],\n            'target' => $target\n        );\n        // needed for server privileges tabs\n        if (isset($_GET['viewing_mode'])\n            && in_array($_GET['viewing_mode'], array('server', 'db', 'table'))\n        ) {\n            $params['viewing_mode'] = $_GET['viewing_mode'];\n        }\n        /*\n         * @todo    coming from server_privileges.php, here $db is not set,\n         *          add the following condition below when that is fixed\n         *          && $_GET['checkprivsdb'] == $db\n         */\n        if (isset($_GET['checkprivsdb'])\n        ) {\n            $params['checkprivsdb'] = $_GET['checkprivsdb'];\n        }\n        /*\n         * @todo    coming from server_privileges.php, here $table is not set,\n         *          add the following condition below when that is fixed\n         *          && $_REQUEST['checkprivstable'] == $table\n         */\n        if (isset($_GET['checkprivstable'])\n        ) {\n            $params['checkprivstable'] = $_GET['checkprivstable'];\n        }\n        if (isset($_REQUEST['single_table'])\n            && in_array($_REQUEST['single_table'], array(true, false))\n        ) {\n            $params['single_table'] = $_REQUEST['single_table'];\n        }\n        return basename(Core::getenv('SCRIPT_NAME')) . Url::getCommonRaw($params);\n    }\n\n    /**\n     * Renders the link to open a new page\n     *\n     * @param string $url The url of the page\n     *\n     * @return string\n     */\n    private function _getSelfLink($url)\n    {\n        $retval  = '';\n        $retval .= '<div id=\"selflink\" class=\"print_ignore\">';\n        $retval .= '<a href=\"' . htmlspecialchars($url) . '\"'\n            . ' title=\"' . __('Open new phpMyAdmin window') . '\" target=\"_blank\" rel=\"noopener noreferrer\">';\n        if (Util::showIcons('TabsMode')) {\n            $retval .= Util::getImage(\n                'window-new',\n                __('Open new phpMyAdmin window')\n            );\n        } else {\n            $retval .=  __('Open new phpMyAdmin window');\n        }\n        $retval .= '</a>';\n        $retval .= '</div>';\n        return $retval;\n    }\n\n    /**\n     * Renders the link to open a new page\n     *\n     * @return string\n     */\n    public function getErrorMessages()\n    {\n        $retval = '';\n        if ($GLOBALS['error_handler']->hasDisplayErrors()) {\n            $retval .= $GLOBALS['error_handler']->getDispErrors();\n        }\n\n        /**\n         * Report php errors\n         */\n        $GLOBALS['error_handler']->reportErrors();\n\n        return $retval;\n    }\n\n    /**\n     * Saves query in history\n     *\n     * @return void\n     */\n    private function _setHistory()\n    {\n        if (! Core::isValid($_REQUEST['no_history'])\n            && empty($GLOBALS['error_message'])\n            && ! empty($GLOBALS['sql_query'])\n            && isset($GLOBALS['dbi'])\n            && $GLOBALS['dbi']->isUserType('logged')\n        ) {\n            $this->relation->setHistory(\n                Core::ifSetOr($GLOBALS['db'], ''),\n                Core::ifSetOr($GLOBALS['table'], ''),\n                $GLOBALS['cfg']['Server']['user'],\n                $GLOBALS['sql_query']\n            );\n        }\n    }\n\n    /**\n     * Disables the rendering of the footer\n     *\n     * @return void\n     */\n    public function disable()\n    {\n        $this->_isEnabled = false;\n    }\n\n    /**\n     * Set the ajax flag to indicate whether\n     * we are servicing an ajax request\n     *\n     * @param bool $isAjax Whether we are servicing an ajax request\n     *\n     * @return void\n     */\n    public function setAjax($isAjax)\n    {\n        $this->_isAjax = (boolean) $isAjax;\n    }\n\n    /**\n     * Turn on minimal display mode\n     *\n     * @return void\n     */\n    public function setMinimal()\n    {\n        $this->_isMinimal = true;\n    }\n\n    /**\n     * Returns the Scripts object\n     *\n     * @return Scripts object\n     */\n    public function getScripts()\n    {\n        return $this->_scripts;\n    }\n\n    /**\n     * Renders the footer\n     *\n     * @return string\n     */\n    public function getDisplay()\n    {\n        $retval = '';\n        $this->_setHistory();\n        if ($this->_isEnabled) {\n            if (! $this->_isAjax) {\n                $retval .= \"</div>\";\n            }\n            if (! $this->_isAjax && ! $this->_isMinimal) {\n                if (Core::getenv('SCRIPT_NAME')\n                    && empty($_POST)\n                    && ! $this->_isAjax\n                ) {\n                    $url = $this->getSelfUrl();\n                    $header = Response::getInstance()->getHeader();\n                    $scripts = $header->getScripts()->getFiles();\n                    $menuHash = $header->getMenu()->getHash();\n                    // prime the client-side cache\n                    $this->_scripts->addCode(\n                        sprintf(\n                            'if (! (history && history.pushState)) '\n                            . 'PMA_MicroHistory.primer = {'\n                            . ' url: \"%s\",'\n                            . ' scripts: %s,'\n                            . ' menuHash: \"%s\"'\n                            . '};',\n                            Sanitize::escapeJsString($url),\n                            json_encode($scripts),\n                            Sanitize::escapeJsString($menuHash)\n                        )\n                    );\n                }\n                if (Core::getenv('SCRIPT_NAME')\n                    && ! $this->_isAjax\n                ) {\n                    $url = $this->getSelfUrl();\n                    $retval .= $this->_getSelfLink($url);\n                }\n                $this->_scripts->addCode(\n                    'var debugSQLInfo = ' . $this->getDebugMessage() . ';'\n                );\n                $retval .= '<div class=\"clearfloat\" id=\"pma_errors\">';\n                $retval .= $this->getErrorMessages();\n                $retval .= '</div>';\n                $retval .= $this->_scripts->getDisplay();\n                if ($GLOBALS['cfg']['DBG']['demo']) {\n                    $retval .= '<div id=\"pma_demo\">';\n                    $retval .= $this->_getDemoMessage();\n                    $retval .= '</div>';\n                }\n\n                $retval .= Config::renderFooter();\n            }\n            if (! $this->_isAjax) {\n                $retval .= \"</body></html>\";\n            }\n        }\n\n        return $retval;\n    }\n}\n"], "fixing_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Displays git revision\n *\n * @package PhpMyAdmin\n */\nnamespace PhpMyAdmin\\Display;\n\nuse PhpMyAdmin\\Core;\nuse PhpMyAdmin\\Response;\nuse PhpMyAdmin\\Util;\n\n/**\n * PhpMyAdmin\\Display\\GitRevision class\n *\n * @package PhpMyAdmin\n */\nclass GitRevision\n{\n    /**\n    * Prints details about the current Git commit revision\n    *\n    * @return void\n    */\n    public static function display()\n    {\n\n        // load revision data from repo\n        $GLOBALS['PMA_Config']->checkGitRevision();\n\n        if (! $GLOBALS['PMA_Config']->get('PMA_VERSION_GIT')) {\n            $response = Response::getInstance();\n            $response->setRequestStatus(false);\n            return;\n        }\n\n        // if using a remote commit fast-forwarded, link to GitHub\n        $commit_hash = substr(\n            $GLOBALS['PMA_Config']->get('PMA_VERSION_GIT_COMMITHASH'),\n            0,\n            7\n        );\n        $commit_hash = '<strong title=\"'\n            . htmlspecialchars($GLOBALS['PMA_Config']->get('PMA_VERSION_GIT_MESSAGE'))\n            . '\">' . htmlspecialchars($commit_hash) . '</strong>';\n        if ($GLOBALS['PMA_Config']->get('PMA_VERSION_GIT_ISREMOTECOMMIT')) {\n            $commit_hash = '<a href=\"'\n                . Core::linkURL(\n                    'https://github.com/phpmyadmin/phpmyadmin/commit/'\n                    . htmlspecialchars($GLOBALS['PMA_Config']->get('PMA_VERSION_GIT_COMMITHASH'))\n                )\n                . '\" rel=\"noopener noreferrer\" target=\"_blank\">' . $commit_hash . '</a>';\n        }\n\n        $branch = $GLOBALS['PMA_Config']->get('PMA_VERSION_GIT_BRANCH');\n        $isRemoteBranch = $GLOBALS['PMA_Config']->get('PMA_VERSION_GIT_ISREMOTEBRANCH');\n        if ($isRemoteBranch) {\n            $branch = '<a href=\"'\n                . Core::linkURL(\n                    'https://github.com/phpmyadmin/phpmyadmin/tree/'\n                    . $GLOBALS['PMA_Config']->get('PMA_VERSION_GIT_BRANCH')\n                )\n                . '\" rel=\"noopener noreferrer\" target=\"_blank\">' . htmlspecialchars($branch) . '</a>';\n        }\n        if ($branch !== false) {\n            $branch = sprintf(\n                __('%1$s from %2$s branch'),\n                $commit_hash,\n                $isRemoteBranch ? $branch : htmlspecialchars($branch)\n            );\n        } else {\n            $branch = $commit_hash . ' (' . __('no branch') . ')';\n        }\n\n        $committer = $GLOBALS['PMA_Config']->get('PMA_VERSION_GIT_COMMITTER');\n        $author = $GLOBALS['PMA_Config']->get('PMA_VERSION_GIT_AUTHOR');\n        Core::printListItem(\n            __('Git revision:') . ' '\n            . $branch . ',<br /> '\n            . sprintf(\n                __('committed on %1$s by %2$s'),\n                Util::localisedDate(strtotime($committer['date'])),\n                '<a href=\"' . Core::linkURL(\n                    'mailto:' . htmlspecialchars($committer['email'])\n                ) . '\">'\n                . htmlspecialchars($committer['name']) . '</a>'\n            )\n            . ($author != $committer\n                ? ', <br />'\n                . sprintf(\n                    __('authored on %1$s by %2$s'),\n                    Util::localisedDate(strtotime($author['date'])),\n                    '<a href=\"' . Core::linkURL(\n                        'mailto:' . htmlspecialchars($author['email'])\n                    ) . '\">'\n                    . htmlspecialchars($author['name']) . '</a>'\n                )\n                : ''),\n            'li_pma_version_git', null, null, null\n        );\n    }\n}\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Used to render the footer of PMA's pages\n *\n * @package PhpMyAdmin\n */\nnamespace PhpMyAdmin;\n\nuse PhpMyAdmin\\Config;\nuse PhpMyAdmin\\Core;\nuse PhpMyAdmin\\Message;\nuse PhpMyAdmin\\Relation;\nuse PhpMyAdmin\\Response;\nuse PhpMyAdmin\\Sanitize;\nuse PhpMyAdmin\\Scripts;\nuse PhpMyAdmin\\Url;\nuse PhpMyAdmin\\Util;\nuse Traversable;\n\n/**\n * Class used to output the footer\n *\n * @package PhpMyAdmin\n */\nclass Footer\n{\n    /**\n     * Scripts instance\n     *\n     * @access private\n     * @var Scripts\n     */\n    private $_scripts;\n    /**\n     * Whether we are servicing an ajax request.\n     *\n     * @access private\n     * @var bool\n     */\n    private $_isAjax;\n    /**\n     * Whether to only close the BODY and HTML tags\n     * or also include scripts, errors and links\n     *\n     * @access private\n     * @var bool\n     */\n    private $_isMinimal;\n    /**\n     * Whether to display anything\n     *\n     * @access private\n     * @var bool\n     */\n    private $_isEnabled;\n\n    /**\n     * @var Relation $relation\n     */\n    private $relation;\n\n    /**\n     * Creates a new class instance\n     */\n    public function __construct()\n    {\n        $this->_isEnabled = true;\n        $this->_scripts   = new Scripts();\n        $this->_isMinimal = false;\n        $this->relation = new Relation();\n    }\n\n    /**\n     * Returns the message for demo server to error messages\n     *\n     * @return string\n     */\n    private function _getDemoMessage()\n    {\n        $message = '<a href=\"/\">' . __('phpMyAdmin Demo Server') . '</a>: ';\n        if (@file_exists('./revision-info.php')) {\n            include './revision-info.php';\n            $message .= sprintf(\n                __('Currently running Git revision %1$s from the %2$s branch.'),\n                '<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"' . htmlspecialchars($repobase . $fullrevision) . '\">'\n                . htmlspecialchars($revision) . '</a>',\n                '<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"' . htmlspecialchars($repobranchbase . $branch) . '\">'\n                . htmlspecialchars($branch) . '</a>'\n            );\n        } else {\n            $message .= __('Git information missing!');\n        }\n\n        return Message::notice($message)->getDisplay();\n    }\n\n    /**\n     * Remove recursions and iterator objects from an object\n     *\n     * @param object|array &$object Object to clean\n     * @param array        $stack   Stack used to keep track of recursion,\n     *                              need not be passed for the first time\n     *\n     * @return object Reference passed object\n     */\n    private static function _removeRecursion(&$object, array $stack = array())\n    {\n        if ((is_object($object) || is_array($object)) && $object) {\n            if ($object instanceof Traversable) {\n                $object = \"***ITERATOR***\";\n            } elseif (!in_array($object, $stack, true)) {\n                $stack[] = $object;\n                foreach ($object as &$subobject) {\n                    self::_removeRecursion($subobject, $stack);\n                }\n            } else {\n                $object = \"***RECURSION***\";\n            }\n        }\n        return $object;\n    }\n\n    /**\n     * Renders the debug messages\n     *\n     * @return string\n     */\n    public function getDebugMessage()\n    {\n        $retval = '\\'null\\'';\n        if ($GLOBALS['cfg']['DBG']['sql']\n            && empty($_REQUEST['no_debug'])\n            && !empty($_SESSION['debug'])\n        ) {\n            // Remove recursions and iterators from $_SESSION['debug']\n            self::_removeRecursion($_SESSION['debug']);\n\n            $retval = JSON_encode($_SESSION['debug']);\n            $_SESSION['debug'] = array();\n            return json_last_error() ? '\\'false\\'' : $retval;\n        }\n        $_SESSION['debug'] = array();\n        return $retval;\n    }\n\n    /**\n     * Returns the url of the current page\n     *\n     * @return string\n     */\n    public function getSelfUrl()\n    {\n        $db = isset($GLOBALS['db']) && strlen($GLOBALS['db']) ? $GLOBALS['db'] : '';\n        $table = isset($GLOBALS['table']) && strlen($GLOBALS['table']) ? $GLOBALS['table'] : '';\n        $target = isset($_REQUEST['target']) && strlen($_REQUEST['target']) ? $_REQUEST['target'] : '';\n        $params = array(\n            'db' => $db,\n            'table' => $table,\n            'server' => $GLOBALS['server'],\n            'target' => $target\n        );\n        // needed for server privileges tabs\n        if (isset($_GET['viewing_mode'])\n            && in_array($_GET['viewing_mode'], array('server', 'db', 'table'))\n        ) {\n            $params['viewing_mode'] = $_GET['viewing_mode'];\n        }\n        /*\n         * @todo    coming from server_privileges.php, here $db is not set,\n         *          add the following condition below when that is fixed\n         *          && $_GET['checkprivsdb'] == $db\n         */\n        if (isset($_GET['checkprivsdb'])\n        ) {\n            $params['checkprivsdb'] = $_GET['checkprivsdb'];\n        }\n        /*\n         * @todo    coming from server_privileges.php, here $table is not set,\n         *          add the following condition below when that is fixed\n         *          && $_REQUEST['checkprivstable'] == $table\n         */\n        if (isset($_GET['checkprivstable'])\n        ) {\n            $params['checkprivstable'] = $_GET['checkprivstable'];\n        }\n        if (isset($_REQUEST['single_table'])\n            && in_array($_REQUEST['single_table'], array(true, false))\n        ) {\n            $params['single_table'] = $_REQUEST['single_table'];\n        }\n        return basename(Core::getenv('SCRIPT_NAME')) . Url::getCommonRaw($params);\n    }\n\n    /**\n     * Renders the link to open a new page\n     *\n     * @param string $url The url of the page\n     *\n     * @return string\n     */\n    private function _getSelfLink($url)\n    {\n        $retval  = '';\n        $retval .= '<div id=\"selflink\" class=\"print_ignore\">';\n        $retval .= '<a href=\"' . htmlspecialchars($url) . '\"'\n            . ' title=\"' . __('Open new phpMyAdmin window') . '\" target=\"_blank\" rel=\"noopener noreferrer\">';\n        if (Util::showIcons('TabsMode')) {\n            $retval .= Util::getImage(\n                'window-new',\n                __('Open new phpMyAdmin window')\n            );\n        } else {\n            $retval .=  __('Open new phpMyAdmin window');\n        }\n        $retval .= '</a>';\n        $retval .= '</div>';\n        return $retval;\n    }\n\n    /**\n     * Renders the link to open a new page\n     *\n     * @return string\n     */\n    public function getErrorMessages()\n    {\n        $retval = '';\n        if ($GLOBALS['error_handler']->hasDisplayErrors()) {\n            $retval .= $GLOBALS['error_handler']->getDispErrors();\n        }\n\n        /**\n         * Report php errors\n         */\n        $GLOBALS['error_handler']->reportErrors();\n\n        return $retval;\n    }\n\n    /**\n     * Saves query in history\n     *\n     * @return void\n     */\n    private function _setHistory()\n    {\n        if (! Core::isValid($_REQUEST['no_history'])\n            && empty($GLOBALS['error_message'])\n            && ! empty($GLOBALS['sql_query'])\n            && isset($GLOBALS['dbi'])\n            && $GLOBALS['dbi']->isUserType('logged')\n        ) {\n            $this->relation->setHistory(\n                Core::ifSetOr($GLOBALS['db'], ''),\n                Core::ifSetOr($GLOBALS['table'], ''),\n                $GLOBALS['cfg']['Server']['user'],\n                $GLOBALS['sql_query']\n            );\n        }\n    }\n\n    /**\n     * Disables the rendering of the footer\n     *\n     * @return void\n     */\n    public function disable()\n    {\n        $this->_isEnabled = false;\n    }\n\n    /**\n     * Set the ajax flag to indicate whether\n     * we are servicing an ajax request\n     *\n     * @param bool $isAjax Whether we are servicing an ajax request\n     *\n     * @return void\n     */\n    public function setAjax($isAjax)\n    {\n        $this->_isAjax = (boolean) $isAjax;\n    }\n\n    /**\n     * Turn on minimal display mode\n     *\n     * @return void\n     */\n    public function setMinimal()\n    {\n        $this->_isMinimal = true;\n    }\n\n    /**\n     * Returns the Scripts object\n     *\n     * @return Scripts object\n     */\n    public function getScripts()\n    {\n        return $this->_scripts;\n    }\n\n    /**\n     * Renders the footer\n     *\n     * @return string\n     */\n    public function getDisplay()\n    {\n        $retval = '';\n        $this->_setHistory();\n        if ($this->_isEnabled) {\n            if (! $this->_isAjax) {\n                $retval .= \"</div>\";\n            }\n            if (! $this->_isAjax && ! $this->_isMinimal) {\n                if (Core::getenv('SCRIPT_NAME')\n                    && empty($_POST)\n                    && ! $this->_isAjax\n                ) {\n                    $url = $this->getSelfUrl();\n                    $header = Response::getInstance()->getHeader();\n                    $scripts = $header->getScripts()->getFiles();\n                    $menuHash = $header->getMenu()->getHash();\n                    // prime the client-side cache\n                    $this->_scripts->addCode(\n                        sprintf(\n                            'if (! (history && history.pushState)) '\n                            . 'PMA_MicroHistory.primer = {'\n                            . ' url: \"%s\",'\n                            . ' scripts: %s,'\n                            . ' menuHash: \"%s\"'\n                            . '};',\n                            Sanitize::escapeJsString($url),\n                            json_encode($scripts),\n                            Sanitize::escapeJsString($menuHash)\n                        )\n                    );\n                }\n                if (Core::getenv('SCRIPT_NAME')\n                    && ! $this->_isAjax\n                ) {\n                    $url = $this->getSelfUrl();\n                    $retval .= $this->_getSelfLink($url);\n                }\n                $this->_scripts->addCode(\n                    'var debugSQLInfo = ' . $this->getDebugMessage() . ';'\n                );\n                $retval .= '<div class=\"clearfloat\" id=\"pma_errors\">';\n                $retval .= $this->getErrorMessages();\n                $retval .= '</div>';\n                $retval .= $this->_scripts->getDisplay();\n                if ($GLOBALS['cfg']['DBG']['demo']) {\n                    $retval .= '<div id=\"pma_demo\">';\n                    $retval .= $this->_getDemoMessage();\n                    $retval .= '</div>';\n                }\n\n                $retval .= Config::renderFooter();\n            }\n            if (! $this->_isAjax) {\n                $retval .= \"</body></html>\";\n            }\n        }\n\n        return $retval;\n    }\n}\n"], "filenames": ["libraries/classes/Display/GitRevision.php", "libraries/classes/Footer.php"], "buggy_code_start_loc": [46, 86], "buggy_code_end_loc": [67, 90], "fixing_code_start_loc": [46, 86], "fixing_code_end_loc": [72, 90], "type": "NVD-CWE-noinfo", "message": "phpMyAdmin before 4.9.2 does not escape certain Git information, related to libraries/classes/Display/GitRevision.php and libraries/classes/Footer.php.", "other": {"cve": {"id": "CVE-2019-19617", "sourceIdentifier": "cve@mitre.org", "published": "2019-12-06T03:15:10.607", "lastModified": "2020-11-10T19:33:26.297", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "phpMyAdmin before 4.9.2 does not escape certain Git information, related to libraries/classes/Display/GitRevision.php and libraries/classes/Footer.php."}, {"lang": "es", "value": "phpMyAdmin versiones anteriores a 4.9.2 no escapa determinada informaci\u00f3n de Git, relacionada con las bibliotecas libraries/classes/Display/GitRevision.php y libraries/classes/Footer.php."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.9.2", "matchCriteriaId": "A48DCA8C-1CE7-4518-B9EC-5D368AC1057F"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "https://github.com/phpmyadmin/phpmyadmin/commit/1119de642b136d20e810bb20f545069a01dd7cc9", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/compare/RELEASE_4_9_1...RELEASE_4_9_2", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2019/12/msg00006.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2020/10/msg00024.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://www.phpmyadmin.net/news/2019/11/22/phpmyadmin-492-released/", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/1119de642b136d20e810bb20f545069a01dd7cc9"}}