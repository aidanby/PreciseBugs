{"buggy_code": ["<?php\n/**\n * Copyright (C) 2018 Dennis Lassiter\n *\n * This file is part of iTop.\n *\n *  iTop is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * iTop is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with iTop. If not, see <http://www.gnu.org/licenses/>\n *\n */\n\nnamespace Combodo\\iTop\\Test\\UnitTest\\Application;\n\nuse Combodo\\iTop\\Test\\UnitTest\\ItopTestCase;\nuse utils;\n\n/**\n * @covers utils\n */\nclass utilsTest extends ItopTestCase\n{\n\tpublic function testEndsWith()\n\t{\n\t\t$this->assertFalse(utils::EndsWith('a', 'bbbb'));\n\t}\n\n\t/**\n\t * @dataProvider memoryLimitDataProvider\n\t */\n\tpublic function testIsMemoryLimit($expected, $memoryLimit, $requiredMemory)\n\t{\n\t\t$this->assertSame($expected, utils::IsMemoryLimitOk($memoryLimit, $requiredMemory));\n\t}\n\n\t/**\n\t * DataProvider for testIsMemoryLimitOk\n\t *\n\t * @return array\n\t */\n\tpublic function memoryLimitDataProvider()\n\t{\n\t\treturn [\n\t\t\t'current -1, required 1024' => [true, -1, 1024],\n\t\t\t'current 1024, required 1024' => [true, 1024, 1024],\n\t\t\t'current 2048, required 1024' => [true, 2048, 1024],\n\t\t\t'current 1024, required 2048' => [false, 1024, 2048],\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider realPathDataProvider\n\t * @covers       utils::RealPath()\n\t */\n\tpublic function testRealPath($sPath, $sBasePath, $expected)\n\t{\n\t\t$this->assertSame($expected, utils::RealPath($sPath, $sBasePath), \"utils::RealPath($sPath, $sBasePath) does not match $expected\");\n\t}\n\n\tpublic function realPathDataProvider()\n\t{\n\t\tparent::setUp(); // if not called, APPROOT won't be defined :(\n\n\t\t$sSep = DIRECTORY_SEPARATOR;\n\t\t$sItopRootRealPath = realpath(APPROOT).$sSep;\n\t\t$sLicenseFileName = 'license.txt';\n\t\tif (!is_file(APPROOT.$sLicenseFileName))\n\t\t{\n\t\t\t$sLicenseFileName = 'LICENSE';\n\t\t}\n\n\t\treturn [\n\t\t\t$sLicenseFileName => [APPROOT.$sLicenseFileName, APPROOT, $sItopRootRealPath.$sLicenseFileName],\n\t\t\t'unexisting file' => [APPROOT.'license_DOES_NOT_EXIST.txt', APPROOT, false],\n\t\t\t'/'.$sLicenseFileName => [APPROOT.$sSep.$sLicenseFileName, APPROOT, $sItopRootRealPath.$sLicenseFileName],\n\t\t\t'%2f'.$sLicenseFileName => [APPROOT.'%2f'. $sLicenseFileName, APPROOT, false],\n\t\t\t'../'.$sLicenseFileName => [APPROOT.'..'.$sSep.$sLicenseFileName, APPROOT, false],\n\t\t\t'%2e%2e%2f'.$sLicenseFileName => [APPROOT.'%2e%2e%2f'.$sLicenseFileName, APPROOT, false],\n\t\t\t'application/utils.inc.php with basepath=APPROOT' => [\n\t\t\t\tAPPROOT.'application/utils.inc.php',\n\t\t\t\tAPPROOT,\n\t\t\t\t$sItopRootRealPath.'application'.$sSep.'utils.inc.php',\n\t\t\t],\n\t\t\t'application/utils.inc.php with basepath=APPROOT/application' => [\n\t\t\t\tAPPROOT.'application/utils.inc.php',\n\t\t\t\tAPPROOT.'application',\n\t\t\t\t$sItopRootRealPath.'application'.$sSep.'utils.inc.php',\n\t\t\t],\n\t\t\t'basepath containing / and \\\\' => [\n\t\t\t\tAPPROOT.'sources/Form/Form.php',\n\t\t\t\tAPPROOT.'sources/Form\\\\Form.php',\n\t\t\t\t$sItopRootRealPath.'sources'.$sSep.'Form'.$sSep.'Form.php',\n\t\t\t],\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider LocalPathProvider\n\t *\n\t * @param $sAbsolutePath\n\t * @param $expected\n\t */\n\tpublic function testLocalPath($sAbsolutePath, $expected)\n\t{\n\t\t$this->assertSame($expected, utils::LocalPath($sAbsolutePath));\n\n\t}\n\n\tpublic function LocalPathProvider()\n\t{\n\t\treturn array(\n\t\t\t'index.php' => array(\n\t\t\t\t'sAbsolutePath' => APPROOT.'index.php',\n\t\t\t\t'expected' => 'index.php',\n\t\t\t),\n\t\t\t'non existing' => array(\n\t\t\t\t'sAbsolutePath' => APPROOT.'nonexisting/nonexisting',\n\t\t\t\t'expected' => false,\n\t\t\t),\n\t\t\t'outside' => array(\n\t\t\t\t'sAbsolutePath' => '/tmp',\n\t\t\t\t'expected' => false,\n\t\t\t),\n\t\t\t'application/cmdbabstract.class.inc.php' => array(\n\t\t\t\t'sAbsolutePath' => APPROOT.'application/cmdbabstract.class.inc.php',\n\t\t\t\t'expected' => 'application/cmdbabstract.class.inc.php',\n\t\t\t),\n\t\t\t'dir' => array(\n\t\t\t\t'sAbsolutePath' => APPROOT.'application/.',\n\t\t\t\t'expected' => 'application',\n\t\t\t),\n\t\t\t'root' => array(\n\t\t\t\t'sAbsolutePath' => APPROOT.'.',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t);\n\t}\n\n\t/**\n\t * @dataProvider appRootUrlProvider\n\t * @covers utils::GetAppRootUrl\n\t */\n\tpublic function testGetAppRootUrl($sReturnValue, $sCurrentScript, $sAppRoot, $sAbsoluteUrl)\n\t{\n\t\t$this->assertEquals($sReturnValue, utils::GetAppRootUrl($sCurrentScript, $sAppRoot, $sAbsoluteUrl));\n\t}\n\n\tpublic function appRootUrlProvider()\n\t{\n\t\treturn array(\n\t\t\t'Setup index (windows antislash)' => array('http://localhost/', 'C:\\Dev\\wamp64\\www\\itop-dev\\setup\\index.php', 'C:\\Dev\\wamp64\\www\\itop-dev', 'http://localhost/setup/'),\n\t\t\t'Setup index (windows slash)' => array('http://127.0.0.1/', 'C:/web/setup/index.php', 'C:/web', 'http://127.0.0.1/setup/'),\n\t\t\t'Setup index (windows slash, drive letter case difference)' => array('http://127.0.0.1/', 'c:/web/setup/index.php', 'C:/web', 'http://127.0.0.1/setup/'),\n\t\t);\n\t}\n\n\tpublic function GetAbsoluteUrlAppRootPersistency() {\n\t\t$this->setUp();\n\n\t\treturn [\n\t\t\t'ForceTrustProxy 111' => [\n\t\t\t\t'bBehindReverseProxy' => false,\n\t\t\t\t'bForceTrustProxy1' => true,\n\t\t\t\t'sExpectedAppRootUrl1' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy2' => true,\n\t\t\t\t'sExpectedAppRootUrl2' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy3' => true,\n\t\t\t\t'sExpectedAppRootUrl3' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'ForceTrustProxy 101' => [\n\t\t\t\t'bBehindReverseProxy' => false,\n\t\t\t\t'bForceTrustProxy1' => true,\n\t\t\t\t'sExpectedAppRootUrl1' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy2' => false,\n\t\t\t\t'sExpectedAppRootUrl2' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy3' => true,\n\t\t\t\t'sExpectedAppRootUrl3' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'ForceTrustProxy 011' => [\n\t\t\t\t'bBehindReverseProxy' => false,\n\t\t\t\t'bForceTrustProxy1' => false,\n\t\t\t\t'sExpectedAppRootUrl1' => 'http://example.com/',\n\t\t\t\t'bForceTrustProxy2' => true,\n\t\t\t\t'sExpectedAppRootUrl2' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy3' => true,\n\t\t\t\t'sExpectedAppRootUrl3' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'ForceTrustProxy 110' => [\n\t\t\t\t'bBehindReverseProxy' => false,\n\t\t\t\t'bForceTrustProxy1' => true,\n\t\t\t\t'sExpectedAppRootUrl1' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy2' => true,\n\t\t\t\t'sExpectedAppRootUrl2' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy3' => false,\n\t\t\t\t'sExpectedAppRootUrl3' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'ForceTrustProxy 010' => [\n\t\t\t\t'bBehindReverseProxy' => false,\n\t\t\t\t'bForceTrustProxy1' => false,\n\t\t\t\t'sExpectedAppRootUrl1' => 'http://example.com/',\n\t\t\t\t'bForceTrustProxy2' => true,\n\t\t\t\t'sExpectedAppRootUrl2' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy3' => false,\n\t\t\t\t'sExpectedAppRootUrl3' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'ForceTrustProxy 001' => [\n\t\t\t\t'bBehindReverseProxy' => false,\n\t\t\t\t'bForceTrustProxy1' => false,\n\t\t\t\t'sExpectedAppRootUrl1' => 'http://example.com/',\n\t\t\t\t'bForceTrustProxy2' => false,\n\t\t\t\t'sExpectedAppRootUrl2' => 'http://example.com/',\n\t\t\t\t'bForceTrustProxy3' => true,\n\t\t\t\t'sExpectedAppRootUrl3' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'ForceTrustProxy 000' => [\n\t\t\t\t'bBehindReverseProxy' => false,\n\t\t\t\t'bForceTrustProxy1' => false,\n\t\t\t\t'sExpectedAppRootUrl1' => 'http://example.com/',\n\t\t\t\t'bForceTrustProxy2' => false,\n\t\t\t\t'sExpectedAppRootUrl2' => 'http://example.com/',\n\t\t\t\t'bForceTrustProxy3' => false,\n\t\t\t\t'sExpectedAppRootUrl3' => 'http://example.com/',\n\t\t\t],\n\t\t\t'BehindReverseProxy ForceTrustProxy 010' => [\n\t\t\t\t'bBehindReverseProxy' => true,\n\t\t\t\t'bForceTrustProxy1' => false,\n\t\t\t\t'sExpectedAppRootUrl1' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy2' => true,\n\t\t\t\t'sExpectedAppRootUrl2' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy3' => false,\n\t\t\t\t'sExpectedAppRootUrl3' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t];\n\t}\n\n\t/**\n\t * @runInSeparateProcess\n\t * @dataProvider GetAbsoluteUrlAppRootPersistency\n\t */\n\tpublic function testGetAbsoluteUrlAppRootPersistency($bBehindReverseProxy,$bForceTrustProxy1 ,$sExpectedAppRootUrl1,$bForceTrustProxy2 , $sExpectedAppRootUrl2,$bForceTrustProxy3 , $sExpectedAppRootUrl3)\n\t{\n\t\tutils::GetConfig()->Set('behind_reverse_proxy', $bBehindReverseProxy);\n\t\tutils::GetConfig()->Set('app_root_url', '');\n\n\t\t//should match http://example.com/ when not trusting the proxy\n\t\t//should match https://proxy.com:4443/ when  trusting the proxy\n\t\t$_SERVER = [\n\t\t\t'REMOTE_ADDR' => '127.0.0.1', //is not set, disable IsProxyTrusted\n\t\t\t'SERVER_NAME' => 'example.com',\n\t\t\t'SERVER_PORT' => '80',\n\t\t\t'REQUEST_URI' => '/index.php?baz=1',\n\t\t\t'SCRIPT_NAME' => '/index.php',\n\t\t\t'SCRIPT_FILENAME' => APPROOT.'index.php',\n\t\t\t'QUERY_STRING' => 'baz=1',\n\t\t\t'HTTP_X_FORWARDED_HOST' => 'proxy.com',\n\t\t\t'HTTP_X_FORWARDED_PORT' => '4443',\n\t\t\t'HTTP_X_FORWARDED_PROTO' => 'https',\n\t\t\t'HTTPS' => null,\n\t\t];\n\n\t\t$this->assertEquals($sExpectedAppRootUrl1, utils::GetAbsoluteUrlAppRoot($bForceTrustProxy1));\n\n\t\t$this->assertEquals($sExpectedAppRootUrl2, utils::GetAbsoluteUrlAppRoot($bForceTrustProxy2));\n\n\t\t$this->assertEquals($sExpectedAppRootUrl3, utils::GetAbsoluteUrlAppRoot($bForceTrustProxy3));\n\t}\n\n\n\t/**\n\t * @dataProvider GetDefaultUrlAppRootProvider\n\t */\n\tpublic function testGetDefaultUrlAppRoot($bForceTrustProxy, $bConfTrustProxy, $aServerVars, $sExpectedAppRootUrl)\n\t{\n\t\t$_SERVER = $aServerVars;\n\t\tutils::GetConfig()->Set('behind_reverse_proxy', $bConfTrustProxy);\n\t\t$sAppRootUrl = utils::GetDefaultUrlAppRoot($bForceTrustProxy);\n\t\t$this->assertEquals($sExpectedAppRootUrl, $sAppRootUrl);\n\t}\n\n\tpublic function GetDefaultUrlAppRootProvider()\n\t{\n\t\t$this->setUp();\n\n\t\t$baseServerVar = [\n\t\t\t'REMOTE_ADDR' => '127.0.0.1', //is not set, disable IsProxyTrusted\n\t\t\t'SERVER_NAME' => 'example.com',\n\t\t\t'HTTP_X_FORWARDED_HOST' => null,\n\t\t\t'SERVER_PORT' => '80',\n\t\t\t'HTTP_X_FORWARDED_PORT' => null,\n\t\t\t'REQUEST_URI' => '/index.php?baz=1',\n\t\t\t'SCRIPT_NAME' => '/index.php',\n\t\t\t'SCRIPT_FILENAME' => APPROOT.'index.php',\n\t\t\t'QUERY_STRING' => 'baz=1',\n\t\t\t'HTTP_X_FORWARDED_PROTO' => null,\n\t\t\t'HTTP_X_FORWARDED_PROTOCOL' => null,\n\t\t\t'HTTPS' => null,\n\t\t];\n\n\t\treturn [\n\t\t\t'no proxy, http' => [\n\t\t\t\t'bForceTrustProxy' => false,\n\t\t\t\t'bConfTrustProxy' => false,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, []),\n\t\t\t\t'sExpectedAppRootUrl' => 'http://example.com/',\n\t\t\t],\n\t\t\t'no proxy, subPath, http' => [\n\t\t\t\t'bForceTrustProxy' => false,\n\t\t\t\t'bConfTrustProxy' => false,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'REQUEST_URI' => '/foo/index.php?baz=1',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'http://example.com/foo/',\n\t\t\t],\n\t\t\t'IIS lack REQUEST_URI' => [\n\t\t\t\t'bForceTrustProxy' => false,\n\t\t\t\t'bConfTrustProxy' => false,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'REQUEST_URI' => null,\n\t\t\t\t\t'SCRIPT_NAME' => '/foo/index.php',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'http://example.com/foo/',\n\t\t\t],\n\t\t\t'no proxy, https' => [\n\t\t\t\t'bForceTrustProxy' => false,\n\t\t\t\t'bConfTrustProxy' => false,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'SERVER_PORT' => '443',\n\t\t\t\t\t'HTTPS' => 'on',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'https://example.com/',\n\t\t\t],\n\t\t\t'no proxy, https on 4443' => [\n\t\t\t\t'bForceTrustProxy' => false,\n\t\t\t\t'bConfTrustProxy' => false,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'SERVER_PORT' => '4443',\n\t\t\t\t\t'HTTPS' => 'on',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'https://example.com:4443/',\n\t\t\t],\n\t\t\t'with proxy, not enabled' => [\n\t\t\t\t'bForceTrustProxy' => false,\n\t\t\t\t'bConfTrustProxy' => false,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'HTTP_X_FORWARDED_HOST' => 'proxy.com',\n\t\t\t\t\t'HTTP_X_FORWARDED_PORT' => '4443',\n\t\t\t\t\t'HTTP_X_FORWARDED_PROTO' => 'https',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'http://example.com/',\n\t\t\t],\n\t\t\t'with proxy, enabled HTTP_X_FORWARDED_PROTO' => [\n\t\t\t\t'bForceTrustProxy' => false,\n\t\t\t\t'bConfTrustProxy' => true,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'HTTP_X_FORWARDED_HOST' => 'proxy.com',\n\t\t\t\t\t'HTTP_X_FORWARDED_PORT' => '4443',\n\t\t\t\t\t'HTTP_X_FORWARDED_PROTO' => 'https',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'with proxy, enabled - alt HTTP_X_FORWARDED_PROTO COL' => [\n\t\t\t\t'bForceTrustProxy' => false,\n\t\t\t\t'bConfTrustProxy' => true,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'HTTP_X_FORWARDED_HOST' => 'proxy.com',\n\t\t\t\t\t'HTTP_X_FORWARDED_PORT' => '4443',\n\t\t\t\t\t'HTTP_X_FORWARDED_PROTOCOL' => 'https',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'with proxy, disabled, forced' => [\n\t\t\t\t'bForceTrustProxy' => true,\n\t\t\t\t'bConfTrustProxy' => false,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'HTTP_X_FORWARDED_HOST' => 'proxy.com',\n\t\t\t\t\t'HTTP_X_FORWARDED_PORT' => '4443',\n\t\t\t\t\t'HTTP_X_FORWARDED_PROTO' => 'https',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'with proxy, enabled, forced' => [\n\t\t\t\t'bForceTrustProxy' => true,\n\t\t\t\t'bConfTrustProxy' => true,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'HTTP_X_FORWARDED_HOST' => 'proxy.com',\n\t\t\t\t\t'HTTP_X_FORWARDED_PORT' => '4443',\n\t\t\t\t\t'HTTP_X_FORWARDED_PROTO' => 'https',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'https://proxy.com:4443/',\n\t\t\t],\n\n\t\t\t'with proxy, disabled, forced, no remote addr' => [\n\t\t\t\t'bForceTrustProxy' => true,\n\t\t\t\t'bConfTrustProxy' => false,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'REMOTE_ADDR' => null,\n\t\t\t\t\t'HTTP_X_FORWARDED_HOST' => 'proxy.com',\n\t\t\t\t\t'HTTP_X_FORWARDED_PORT' => '4443',\n\t\t\t\t\t'HTTP_X_FORWARDED_PROTO' => 'https',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'with proxy, enabled, no remote addr' => [\n\t\t\t\t'bForceTrustProxy' => false,\n\t\t\t\t'bConfTrustProxy' => true,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'REMOTE_ADDR' => null,\n\t\t\t\t\t'HTTP_X_FORWARDED_HOST' => 'proxy.com',\n\t\t\t\t\t'HTTP_X_FORWARDED_PORT' => '4443',\n\t\t\t\t\t'HTTP_X_FORWARDED_PROTO' => 'https',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'http://example.com/',\n\t\t\t],\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider StrftimeFormatToDateTimeFormatProvider\n\t * @covers \\utils::StrftimeFormatToDateTimeFormat\n\t *\n\t * @param string $sInput\n\t * @param string $sExpectedFormat\n\t *\n\t * @return void\n\t */\n\tpublic function testStrftimeFormatToDateTimeFormat(string $sInput, string $sExpectedFormat)\n\t{\n\t\t$sTestedFormat = utils::StrftimeFormatToDateTimeFormat($sInput);\n\t\t$this->assertEquals($sExpectedFormat, $sTestedFormat, \"DateTime format transformation for '$sInput' doesn't match. Got '$sTestedFormat', expected '$sExpectedFormat'.\");\n\t}\n\n\tpublic function StrftimeFormatToDateTimeFormatProvider(): array\n\t{\n\t\treturn [\n\t\t\t'Standard date time' => [\n\t\t\t\t'%Y-%m-%d %H:%M:%S',\n\t\t\t\t'Y-m-d H:i:s',\n\t\t\t],\n\t\t\t'All placeholders' => [\n\t\t\t\t'%d | %m | %y | %Y | %H | %M | %S | %a | %A | %e | %j | %u | %w | %U | %V | %W | %b | %B | %h | %C | %g | %G | %k | %I | %l | %p | %P | %r | %R | %T | %X | %z | %Z | %c | %D | %F | %s | %x | %n | %t | %%',\n\t\t\t\t'd | m | y | Y | H | i | s | D | l | j | z | N | w | %U | W | %W | M | F | M | %C | y | Y | G | h | g | A | a | h:i:s A | H:i | H:i:s | %X | O | T | %c | m/d/y | Y-m-d | U | %x | %n | %t | %',\n\t\t\t],\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider ToCamelCaseProvider\n\t * @covers       utils::ToCamelCase\n\t *\n\t * @param string $sInput\n\t * @param string $sExpectedOutput\n\t *\n\t * @return void\n\t */\n\tpublic function testToCamelCase(string $sInput, string $sExpectedOutput)\n\t{\n\t\t$sTestedOutput = utils::ToCamelCase($sInput);\n\t\t$this->assertEquals($sExpectedOutput, $sTestedOutput, \"Camel case transformation for '$sInput' doesn't match. Got '$sTestedOutput', expected '$sExpectedOutput'.\");\n\t}\n\n\t/**\n\t * @since 3.1.0\n\t * @return \\string[][]\n\t */\n\tpublic function ToCamelCaseProvider(): array\n\t{\n\t\treturn [\n\t\t\t'One word' => [\n\t\t\t\t'hello',\n\t\t\t\t'Hello',\n\t\t\t],\n\t\t\t'Two words separated with space' => [\n\t\t\t\t'hello world',\n\t\t\t\t'HelloWorld',\n\t\t\t],\n\t\t\t'Two words separated with underscore' => [\n\t\t\t\t'hello_world',\n\t\t\t\t'HelloWorld',\n\t\t\t],\n\t\t\t'Two words separated with dash' => [\n\t\t\t\t'hello-world',\n\t\t\t\t'HelloWorld',\n\t\t\t],\n\t\t\t'Two words separated with dot' => [\n\t\t\t\t'hello.world',\n\t\t\t\t'Hello.world',\n\t\t\t],\n\t\t\t'Three words separated with underscore and space' => [\n\t\t\t\t'hello_there world',\n\t\t\t\t'HelloThereWorld',\n\t\t\t],\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider ToSnakeCaseProvider\n\t * @covers       utils::ToSnakeCase\n\t *\n\t * @param string $sInput\n\t * @param string $sExpectedOutput\n\t *\n\t * @return void\n\t */\n\tpublic function testToSnakeCase(string $sInput, string $sExpectedOutput)\n\t{\n\t\t$sTestedOutput = utils::ToSnakeCase($sInput);\n\t\t$this->assertEquals($sExpectedOutput, $sTestedOutput, \"Snake case transformation for '$sInput' doesn't match. Got '$sTestedOutput', expected '$sExpectedOutput'.\");\n\t}\n\n\t/**\n\t * @since 3.1.0\n\t * @return \\string[][]\n\t */\n\tpublic function ToSnakeCaseProvider(): array\n\t{\n\t\treturn [\n\t\t\t'One word lowercase' => [\n\t\t\t\t'hello',\n\t\t\t\t'hello',\n\t\t\t],\n\t\t\t'One word uppercase' => [\n\t\t\t\t'HELLO',\n\t\t\t\t'hello',\n\t\t\t],\n\t\t\t'One word capitalize' => [\n\t\t\t\t'Hello',\n\t\t\t\t'hello',\n\t\t\t],\n\t\t\t'Two words separated with space' => [\n\t\t\t\t'hello world',\n\t\t\t\t'hello_world',\n\t\t\t],\n\t\t\t'Two words separated with underscore' => [\n\t\t\t\t'hello_world',\n\t\t\t\t'hello_world',\n\t\t\t],\n\t\t\t'Two words separated with dash' => [\n\t\t\t\t'hello-world',\n\t\t\t\t'hello_world',\n\t\t\t],\n\t\t\t'Two words separated with dot' => [\n\t\t\t\t'hello.world',\n\t\t\t\t'hello_world',\n\t\t\t],\n\t\t\t'Two words camel cased' => [\n\t\t\t\t'HelloWorld',\n\t\t\t\t'hello_world',\n\t\t\t],\n\t\t\t'Two words camel cased with acronym' => [\n\t\t\t\t'HTMLWorld',\n\t\t\t\t'html_world',\n\t\t\t],\n\t\t\t'Three words separated with underscore and space' => [\n\t\t\t\t'hello_there world',\n\t\t\t\t'hello_there_world',\n\t\t\t],\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider ToAcronymProvider\n\t * @covers       utils::ToAcronym\n\t *\n\t * @param string $sInput\n\t * @param string $sExceptedAcronym\n\t */\n\tpublic function testToAcronym(string $sInput, string $sExceptedAcronym)\n\t{\n\t\t$sTestedAcronym = utils::ToAcronym($sInput);\n\t\t$this->assertEquals($sExceptedAcronym, $sTestedAcronym, \"Acronym for '$sInput' doesn't match. Got '$sTestedAcronym', expected '$sExceptedAcronym'.\");\n\t}\n\n\t/**\n\t * @since 3.0.0\n\t */\n\tpublic function ToAcronymProvider()\n\t{\n\t\treturn [\n\t\t\t'One word, upper case letter' => [\n\t\t\t\t'Carrie',\n\t\t\t\t'C',\n\t\t\t],\n\t\t\t'One word, lower case letter' => [\n\t\t\t\t'carrie',\n\t\t\t\t'C',\n\t\t\t],\n\t\t\t'Application name' => [\n\t\t\t\t'iTop',\n\t\t\t\t'I',\n\t\t\t],\n\t\t\t'Several words, upper case letters' => [\n\t\t\t\t'Carrie Ann Moss',\n\t\t\t\t'CAM',\n\t\t\t],\n\t\t\t'Several words, mixed case letters' => [\n\t\t\t\t'My name My name',\n\t\t\t\t'MM',\n\t\t\t],\n\t\t\t'Several words, upper case letters, two first hyphened' => [\n\t\t\t\t'Lily-Rose Depp',\n\t\t\t\t'LRD',\n\t\t\t],\n\t\t\t'Several words, mixed case letters, two first hyphened' => [\n\t\t\t\t'Lily-rose Depp',\n\t\t\t\t'LD',\n\t\t\t],\n\t\t\t'Several words, upper case letetrs, two last hypened' => [\n\t\t\t\t'Jada Pinkett-Smith',\n\t\t\t\t'JPS',\n\t\t\t],\n\t\t\t'Several words, mixed case letters, two last hyphened' => [\n\t\t\t\t'Jada Pinkett-smith',\n\t\t\t\t'JP',\n\t\t\t],\n\t\t\t'Several words, cyrillic alphabet' => [\n\t\t\t\t'\u0414\u0435\u043d\u0438\u0441 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u0430',\n\t\t\t\t'\u0414\u0410',\n\t\t\t],\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider GetMentionedObjectsFromTextProvider\n\t * @covers       utils::GetMentionedObjectsFromText\n\t *\n\t * @param string $sInput\n\t * @param string $sFormat\n\t * @param array $aExceptedMentionedObjects\n\t *\n\t * @throws \\Exception\n\t */\n\tpublic function testGetMentionedObjectsFromText(string $sInput, string $sFormat, array $aExceptedMentionedObjects)\n\t{\n\t\t$aTestedMentionedObjects = utils::GetMentionedObjectsFromText($sInput, $sFormat);\n\n\t\t$sExpectedAsString = print_r($aExceptedMentionedObjects, true);\n\t\t$sTestedAsString = print_r($aTestedMentionedObjects, true);\n\n\t\t$this->assertEquals($sTestedAsString, $sExpectedAsString, \"Found mentioned objects don't match. Got: $sTestedAsString, expected $sExpectedAsString\");\n\t}\n\n\t/**\n\t * @since 3.0.0\n\t */\n\tpublic function GetMentionedObjectsFromTextProvider(): array\n\t{\n\t\t$sAbsUrlAppRoot = utils::GetAbsoluteUrlAppRoot();\n\n\t\treturn [\n\t\t\t'No object' => [\n\t\t\t\t\"Begining\n\t\t\t\tSecond line\n\t\t\t\tEnd\",\n\t\t\t\tutils::ENUM_TEXT_FORMAT_HTML,\n\t\t\t\t[],\n\t\t\t],\n\t\t\t'1 UserRequest' => [\n\t\t\t\t\"Begining\n\t\t\t\tBefore link <a href=\\\"$sAbsUrlAppRoot/pages/UI.php&operation=details&class=UserRequest&id=12345&foo=bar\\\">R-012345</a> After link\n\t\t\t\tEnd\",\n\t\t\t\tutils::ENUM_TEXT_FORMAT_HTML,\n\t\t\t\t[\n\t\t\t\t\t'UserRequest' => ['12345'],\n\t\t\t\t],\n\t\t\t],\n\t\t\t'2 UserRequests' => [\n\t\t\t\t\"Begining\n\t\t\t\tBefore link <a href=\\\"$sAbsUrlAppRoot/pages/UI.php&operation=details&class=UserRequest&id=12345&foo=bar\\\">R-012345</a> After link\n\t\t\t\tAnd <a href=\\\"$sAbsUrlAppRoot/pages/UI.php&operation=details&class=UserRequest&id=987654&foo=bar\\\">R-987654</a>\n\t\t\t\tEnd\",\n\t\t\t\tutils::ENUM_TEXT_FORMAT_HTML,\n\t\t\t\t[\n\t\t\t\t\t'UserRequest' => ['12345', '987654'],\n\t\t\t\t],\n\t\t\t],\n\t\t\t'1 UserRequest, 1 Person' => [\n\t\t\t\t\"Begining\n\t\t\t\tBefore link <a href=\\\"$sAbsUrlAppRoot/pages/UI.php&operation=details&class=UserRequest&id=12345&foo=bar\\\">R-012345</a> After link\n\t\t\t\tAnd <a href=\\\"$sAbsUrlAppRoot/pages/UI.php&operation=details&class=Person&id=3&foo=bar\\\">Claude Monet</a>\n\t\t\t\tEnd\",\n\t\t\t\tutils::ENUM_TEXT_FORMAT_HTML,\n\t\t\t\t[\n\t\t\t\t\t'UserRequest' => ['12345'],\n\t\t\t\t\t'Person' => ['3'],\n\t\t\t\t],\n\t\t\t],\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider FormatInitialsForMedallionProvider\n\t * @covers utils::FormatInitialsForMedallion\n\t *\n\t * @param string $sInput\n\t * @param string $sExpected\n\t */\n\tpublic function testFormatInitialsForMedallion(string $sInput, string $sExpected)\n\t{\n\t\t$sTested = utils::FormatInitialsForMedallion($sInput);\n\t\t$this->assertEquals($sExpected, $sTested);\n\t}\n\n\t/**\n\t * @since 3.0.1\n\t */\n\tpublic function FormatInitialsForMedallionProvider()\n\t{\n\t\treturn [\n\t\t\t'All letters kept (2)' => [\n\t\t\t\t'AB',\n\t\t\t\t'AB',\n\t\t\t],\n\t\t\t'All letters kept (3)' => [\n\t\t\t\t'ABC',\n\t\t\t\t'ABC',\n\t\t\t],\n\t\t\t'Only 3 first letters kept (4)' => [\n\t\t\t\t'ABCD',\n\t\t\t\t'ABC',\n\t\t\t],\n\t\t];\n\t}\n\n\t/**\n\t * @param string $sExpressionToConvert\n\t * @param int $iExpectedConvertedValue\n\t *\n\t * @dataProvider ConvertToBytesProvider\n\t */\n\tpublic function testConvertToBytes($sExpressionToConvert, $iExpectedConvertedValue)\n\t{\n\t\t$iCurrentConvertedValue = utils::ConvertToBytes($sExpressionToConvert);\n\t\tself::assertEquals($iExpectedConvertedValue, $iCurrentConvertedValue, 'Converted value wasn\\'t the one expected !');\n\t\tself::assertSame($iExpectedConvertedValue, $iCurrentConvertedValue, 'Value was converted but not of the expected type');\n\t}\n\n\tpublic function ConvertToBytesProvider()\n\t{\n\t\treturn [\n\t\t\t'123 int value' => ['123', 123],\n\t\t\t'-1 no limit'   => ['-1', -1],\n\t\t\t'56k'           => ['56k', 56 * 1024],\n\t\t\t'512M'          => ['512M', 512 * 1024 * 1024],\n\t\t\t'2G'            => ['2G', 2 * 1024 * 1024 * 1024],\n\t\t];\n\t}\n\n\t/**\n\t * @param string|null $sString\n\t * @param int $iExpected\n\t *\n\t * @dataProvider StrLenProvider\n\t */\n\tpublic function testStrLen(?string $sString, int $iExpected)\n\t{\n\t\t$iComputed = utils::StrLen($sString);\n\t\tself::assertEquals($iExpected, $iComputed, 'Length was not as expected');\n\t}\n\n\tpublic function StrLenProvider(): array\n\t{\n\t\treturn [\n\t\t\t'null value' => [null, 0],\n\t\t\t'0 character' => ['', 0],\n\t\t\t'1 character' => ['a', 1],\n\t\t\t'5 characters' => ['abcde', 5],\n\t\t];\n\t}\n\n\t/**\n\t * Test sanitizer.\n\t *\n\t * @param $type string type of sanitizer\n\t * @param $valueToSanitize ? value to sanitize\n\t * @param $expectedResult ? expected result\n\t *\n\t * @return void\n\t *\n\t * @dataProvider sanitizerDataProvider\n\t */\n\tpublic function testSanitizer($type, $valueToSanitize, $expectedResult)\n\t{\n\t\t$this->assertEquals($expectedResult, utils::Sanitize($valueToSanitize, null, $type), 'url sanitize failed');\n\t}\n\n\t/**\n\t * DataProvider for testSanitizer\n\t *\n\t * @return array\n\t */\n\tpublic function sanitizerDataProvider()\n\t{\n\t\treturn [\n\t\t\t'good integer'            => [utils::ENUM_SANITIZATION_FILTER_INTEGER, '2565', '2565'],\n\t\t\t'bad integer'             => [utils::ENUM_SANITIZATION_FILTER_INTEGER, 'a2656', '2656'],\n\t\t\t/**\n\t\t\t * 'class' filter needs a loaded datamodel... and is only an indirection to \\MetaModel::IsValidClass so might very important to test !\n\t\t\t * If we switch this class to ItopDataTestCase then we are seeing :\n\t\t\t *   - the class now takes 18s to process instead of... 459ms when using ItopTestCase !!!\n\t\t\t *   - multiple errors are thrown in testGetAbsoluteUrlAppRootPersistency :(\n\t\t\t * We decided it wasn't worse the effort to test the 'class' filter !\n\t\t\t */\n\t\t\t//\t\t\t'good class' => ['class', 'UserRequest', 'UserRequest'],\n\t\t\t//\t\t\t'bad class' => ['class', 'MyUserRequest',null],\n\t\t\t'good string'             => [utils::ENUM_SANITIZATION_FILTER_STRING, 'Is Peter smart and funny?', 'Is Peter smart and funny?'],\n\t\t\t'bad string'              => [utils::ENUM_SANITIZATION_FILTER_STRING, 'Is Peter <smart> & funny?', 'Is Peter &#60;smart&#62; &#38; funny?'],\n\t\t\t'good transaction_id'     => [utils::ENUM_SANITIZATION_FILTER_TRANSACTION_ID, '8965.-dd', '8965.-dd'],\n\t\t\t'bad transaction_id'      => [utils::ENUM_SANITIZATION_FILTER_TRANSACTION_ID, '8965.-dd+', null],\n\t\t\t'good route'              => [utils::ENUM_SANITIZATION_FILTER_ROUTE, 'object.modify', 'object.modify'],\n\t\t\t'good route with underscore' => [utils::ENUM_SANITIZATION_FILTER_ROUTE, 'object.apply_modify', 'object.apply_modify'],\n\t\t\t'bad route with space'    => [utils::ENUM_SANITIZATION_FILTER_ROUTE, 'object modify', null],\n\t\t\t'good operation'          => [utils::ENUM_SANITIZATION_FILTER_OPERATION, 'modify', 'modify'],\n\t\t\t'good operation with underscore' => [utils::ENUM_SANITIZATION_FILTER_OPERATION, 'apply_modify', 'apply_modify'],\n\t\t\t'bad operation with space' => [utils::ENUM_SANITIZATION_FILTER_OPERATION, 'apply modify', null],\n\t\t\t'good parameter'          => [utils::ENUM_SANITIZATION_FILTER_PARAMETER, 'JU8965-dd=_', 'JU8965-dd=_'],\n\t\t\t'bad parameter'           => [utils::ENUM_SANITIZATION_FILTER_PARAMETER, '8965.-dd+', null],\n\t\t\t'good field_name'         => [utils::ENUM_SANITIZATION_FILTER_FIELD_NAME, 'Name->bUzz38', 'Name->bUzz38'],\n\t\t\t'bad field_name'          => [utils::ENUM_SANITIZATION_FILTER_FIELD_NAME, 'name-buzz', null],\n\t\t\t'good context_param'      => [utils::ENUM_SANITIZATION_FILTER_CONTEXT_PARAM, '%dssD25_=%:+-', '%dssD25_=%:+-'],\n\t\t\t'bad context_param'       => [utils::ENUM_SANITIZATION_FILTER_CONTEXT_PARAM, '%dssD,25_=%:+-', null],\n\t\t\t'good element_identifier' => [utils::ENUM_SANITIZATION_FILTER_ELEMENT_IDENTIFIER, 'AD05nb', 'AD05nb'],\n\t\t\t'bad element_identifier' => [utils::ENUM_SANITIZATION_FILTER_ELEMENT_IDENTIFIER, 'AD05nb+', 'AD05nb'],\n\t\t\t'good url' => [utils::ENUM_SANITIZATION_FILTER_URL, 'https://www.w3schools.com', 'https://www.w3schools.com'],\n\t\t\t'bad url' => [utils::ENUM_SANITIZATION_FILTER_URL, 'https://www.w3schoo\ufffd\ufffdls.co\ufffdm', null],\n\t\t\t'raw_data' => ['raw_data', '<Test>\\s\ud83d\ude03\ud83d\ude03\ud83d\ude03', '<Test>\\s\ud83d\ude03\ud83d\ude03\ud83d\ude03'],\n\t\t];\n\t}\n\n\t/**\n\t * @return void\n\t *\n\t * @dataProvider escapeHtmlProvider\n\t */\n\tpublic function testEscapeHtml($sInput, $sExpectedEscaped)\n\t{\n\t\tif (is_null($sExpectedEscaped)) {\n\t\t\t$sExpectedEscaped = $sInput;\n\t\t}\n\n\t\t$sEscaped = utils::EscapeHtml($sInput);\n\t\tself::assertSame($sExpectedEscaped, $sEscaped);\n\n\t\t$sEscapedDecoded = utils::EscapedHtmlDecode($sEscaped);\n\t\tself::assertSame($sInput, $sEscapedDecoded);\n\t}\n\n\tpublic function escapeHtmlProvider()\n\t{\n\t\treturn [\n\t\t\t'no escape' => ['abcdefghijklmnop', null],\n\t\t\t'&amp;'     => ['abcdefghijklmnop&0123456789', 'abcdefghijklmnop&amp;0123456789'],\n\t\t\t['\"double quotes\"', '&quot;double quotes&quot;'],\n\t\t\t[\"'simple quotes'\", '&apos;simple quotes&apos;'],\n\t\t];\n\t}\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright (C) 2018 Dennis Lassiter\n *\n * This file is part of iTop.\n *\n *  iTop is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * iTop is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with iTop. If not, see <http://www.gnu.org/licenses/>\n *\n */\n\nnamespace Combodo\\iTop\\Test\\UnitTest\\Application;\n\nuse Combodo\\iTop\\Test\\UnitTest\\ItopTestCase;\nuse utils;\n\n/**\n * @covers utils\n */\nclass utilsTest extends ItopTestCase\n{\n\tpublic function testEndsWith()\n\t{\n\t\t$this->assertFalse(utils::EndsWith('a', 'bbbb'));\n\t}\n\n\t/**\n\t * @dataProvider memoryLimitDataProvider\n\t */\n\tpublic function testIsMemoryLimit($expected, $memoryLimit, $requiredMemory)\n\t{\n\t\t$this->assertSame($expected, utils::IsMemoryLimitOk($memoryLimit, $requiredMemory));\n\t}\n\n\t/**\n\t * DataProvider for testIsMemoryLimitOk\n\t *\n\t * @return array\n\t */\n\tpublic function memoryLimitDataProvider()\n\t{\n\t\treturn [\n\t\t\t'current -1, required 1024' => [true, -1, 1024],\n\t\t\t'current 1024, required 1024' => [true, 1024, 1024],\n\t\t\t'current 2048, required 1024' => [true, 2048, 1024],\n\t\t\t'current 1024, required 2048' => [false, 1024, 2048],\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider realPathDataProvider\n\t * @covers       utils::RealPath()\n\t */\n\tpublic function testRealPath($sPath, $sBasePath, $expected)\n\t{\n\t\t$this->assertSame($expected, utils::RealPath($sPath, $sBasePath), \"utils::RealPath($sPath, $sBasePath) does not match $expected\");\n\t}\n\n\tpublic function realPathDataProvider()\n\t{\n\t\tparent::setUp(); // if not called, APPROOT won't be defined :(\n\n\t\t$sSep = DIRECTORY_SEPARATOR;\n\t\t$sItopRootRealPath = realpath(APPROOT).$sSep;\n\t\t$sLicenseFileName = 'license.txt';\n\t\tif (!is_file(APPROOT.$sLicenseFileName))\n\t\t{\n\t\t\t$sLicenseFileName = 'LICENSE';\n\t\t}\n\n\t\treturn [\n\t\t\t$sLicenseFileName => [APPROOT.$sLicenseFileName, APPROOT, $sItopRootRealPath.$sLicenseFileName],\n\t\t\t'unexisting file' => [APPROOT.'license_DOES_NOT_EXIST.txt', APPROOT, false],\n\t\t\t'/'.$sLicenseFileName => [APPROOT.$sSep.$sLicenseFileName, APPROOT, $sItopRootRealPath.$sLicenseFileName],\n\t\t\t'%2f'.$sLicenseFileName => [APPROOT.'%2f'. $sLicenseFileName, APPROOT, false],\n\t\t\t'../'.$sLicenseFileName => [APPROOT.'..'.$sSep.$sLicenseFileName, APPROOT, false],\n\t\t\t'%2e%2e%2f'.$sLicenseFileName => [APPROOT.'%2e%2e%2f'.$sLicenseFileName, APPROOT, false],\n\t\t\t'application/utils.inc.php with basepath=APPROOT' => [\n\t\t\t\tAPPROOT.'application/utils.inc.php',\n\t\t\t\tAPPROOT,\n\t\t\t\t$sItopRootRealPath.'application'.$sSep.'utils.inc.php',\n\t\t\t],\n\t\t\t'application/utils.inc.php with basepath=APPROOT/application' => [\n\t\t\t\tAPPROOT.'application/utils.inc.php',\n\t\t\t\tAPPROOT.'application',\n\t\t\t\t$sItopRootRealPath.'application'.$sSep.'utils.inc.php',\n\t\t\t],\n\t\t\t'basepath containing / and \\\\' => [\n\t\t\t\tAPPROOT.'sources/Form/Form.php',\n\t\t\t\tAPPROOT.'sources/Form\\\\Form.php',\n\t\t\t\t$sItopRootRealPath.'sources'.$sSep.'Form'.$sSep.'Form.php',\n\t\t\t],\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider LocalPathProvider\n\t *\n\t * @param $sAbsolutePath\n\t * @param $expected\n\t */\n\tpublic function testLocalPath($sAbsolutePath, $expected)\n\t{\n\t\t$this->assertSame($expected, utils::LocalPath($sAbsolutePath));\n\n\t}\n\n\tpublic function LocalPathProvider()\n\t{\n\t\treturn array(\n\t\t\t'index.php' => array(\n\t\t\t\t'sAbsolutePath' => APPROOT.'index.php',\n\t\t\t\t'expected' => 'index.php',\n\t\t\t),\n\t\t\t'non existing' => array(\n\t\t\t\t'sAbsolutePath' => APPROOT.'nonexisting/nonexisting',\n\t\t\t\t'expected' => false,\n\t\t\t),\n\t\t\t'outside' => array(\n\t\t\t\t'sAbsolutePath' => '/tmp',\n\t\t\t\t'expected' => false,\n\t\t\t),\n\t\t\t'application/cmdbabstract.class.inc.php' => array(\n\t\t\t\t'sAbsolutePath' => APPROOT.'application/cmdbabstract.class.inc.php',\n\t\t\t\t'expected' => 'application/cmdbabstract.class.inc.php',\n\t\t\t),\n\t\t\t'dir' => array(\n\t\t\t\t'sAbsolutePath' => APPROOT.'application/.',\n\t\t\t\t'expected' => 'application',\n\t\t\t),\n\t\t\t'root' => array(\n\t\t\t\t'sAbsolutePath' => APPROOT.'.',\n\t\t\t\t'expected' => '',\n\t\t\t),\n\t\t);\n\t}\n\n\t/**\n\t * @dataProvider appRootUrlProvider\n\t * @covers utils::GetAppRootUrl\n\t */\n\tpublic function testGetAppRootUrl($sReturnValue, $sCurrentScript, $sAppRoot, $sAbsoluteUrl)\n\t{\n\t\t$this->assertEquals($sReturnValue, utils::GetAppRootUrl($sCurrentScript, $sAppRoot, $sAbsoluteUrl));\n\t}\n\n\tpublic function appRootUrlProvider()\n\t{\n\t\treturn array(\n\t\t\t'Setup index (windows antislash)' => array('http://localhost/', 'C:\\Dev\\wamp64\\www\\itop-dev\\setup\\index.php', 'C:\\Dev\\wamp64\\www\\itop-dev', 'http://localhost/setup/'),\n\t\t\t'Setup index (windows slash)' => array('http://127.0.0.1/', 'C:/web/setup/index.php', 'C:/web', 'http://127.0.0.1/setup/'),\n\t\t\t'Setup index (windows slash, drive letter case difference)' => array('http://127.0.0.1/', 'c:/web/setup/index.php', 'C:/web', 'http://127.0.0.1/setup/'),\n\t\t);\n\t}\n\n\tpublic function GetAbsoluteUrlAppRootPersistency() {\n\t\t$this->setUp();\n\n\t\treturn [\n\t\t\t'ForceTrustProxy 111' => [\n\t\t\t\t'bBehindReverseProxy' => false,\n\t\t\t\t'bForceTrustProxy1' => true,\n\t\t\t\t'sExpectedAppRootUrl1' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy2' => true,\n\t\t\t\t'sExpectedAppRootUrl2' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy3' => true,\n\t\t\t\t'sExpectedAppRootUrl3' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'ForceTrustProxy 101' => [\n\t\t\t\t'bBehindReverseProxy' => false,\n\t\t\t\t'bForceTrustProxy1' => true,\n\t\t\t\t'sExpectedAppRootUrl1' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy2' => false,\n\t\t\t\t'sExpectedAppRootUrl2' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy3' => true,\n\t\t\t\t'sExpectedAppRootUrl3' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'ForceTrustProxy 011' => [\n\t\t\t\t'bBehindReverseProxy' => false,\n\t\t\t\t'bForceTrustProxy1' => false,\n\t\t\t\t'sExpectedAppRootUrl1' => 'http://example.com/',\n\t\t\t\t'bForceTrustProxy2' => true,\n\t\t\t\t'sExpectedAppRootUrl2' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy3' => true,\n\t\t\t\t'sExpectedAppRootUrl3' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'ForceTrustProxy 110' => [\n\t\t\t\t'bBehindReverseProxy' => false,\n\t\t\t\t'bForceTrustProxy1' => true,\n\t\t\t\t'sExpectedAppRootUrl1' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy2' => true,\n\t\t\t\t'sExpectedAppRootUrl2' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy3' => false,\n\t\t\t\t'sExpectedAppRootUrl3' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'ForceTrustProxy 010' => [\n\t\t\t\t'bBehindReverseProxy' => false,\n\t\t\t\t'bForceTrustProxy1' => false,\n\t\t\t\t'sExpectedAppRootUrl1' => 'http://example.com/',\n\t\t\t\t'bForceTrustProxy2' => true,\n\t\t\t\t'sExpectedAppRootUrl2' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy3' => false,\n\t\t\t\t'sExpectedAppRootUrl3' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'ForceTrustProxy 001' => [\n\t\t\t\t'bBehindReverseProxy' => false,\n\t\t\t\t'bForceTrustProxy1' => false,\n\t\t\t\t'sExpectedAppRootUrl1' => 'http://example.com/',\n\t\t\t\t'bForceTrustProxy2' => false,\n\t\t\t\t'sExpectedAppRootUrl2' => 'http://example.com/',\n\t\t\t\t'bForceTrustProxy3' => true,\n\t\t\t\t'sExpectedAppRootUrl3' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'ForceTrustProxy 000' => [\n\t\t\t\t'bBehindReverseProxy' => false,\n\t\t\t\t'bForceTrustProxy1' => false,\n\t\t\t\t'sExpectedAppRootUrl1' => 'http://example.com/',\n\t\t\t\t'bForceTrustProxy2' => false,\n\t\t\t\t'sExpectedAppRootUrl2' => 'http://example.com/',\n\t\t\t\t'bForceTrustProxy3' => false,\n\t\t\t\t'sExpectedAppRootUrl3' => 'http://example.com/',\n\t\t\t],\n\t\t\t'BehindReverseProxy ForceTrustProxy 010' => [\n\t\t\t\t'bBehindReverseProxy' => true,\n\t\t\t\t'bForceTrustProxy1' => false,\n\t\t\t\t'sExpectedAppRootUrl1' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy2' => true,\n\t\t\t\t'sExpectedAppRootUrl2' => 'https://proxy.com:4443/',\n\t\t\t\t'bForceTrustProxy3' => false,\n\t\t\t\t'sExpectedAppRootUrl3' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t];\n\t}\n\n\t/**\n\t * @runInSeparateProcess\n\t * @dataProvider GetAbsoluteUrlAppRootPersistency\n\t */\n\tpublic function testGetAbsoluteUrlAppRootPersistency($bBehindReverseProxy,$bForceTrustProxy1 ,$sExpectedAppRootUrl1,$bForceTrustProxy2 , $sExpectedAppRootUrl2,$bForceTrustProxy3 , $sExpectedAppRootUrl3)\n\t{\n\t\tutils::GetConfig()->Set('behind_reverse_proxy', $bBehindReverseProxy);\n\t\tutils::GetConfig()->Set('app_root_url', '');\n\n\t\t//should match http://example.com/ when not trusting the proxy\n\t\t//should match https://proxy.com:4443/ when  trusting the proxy\n\t\t$_SERVER = [\n\t\t\t'REMOTE_ADDR' => '127.0.0.1', //is not set, disable IsProxyTrusted\n\t\t\t'SERVER_NAME' => 'example.com',\n\t\t\t'SERVER_PORT' => '80',\n\t\t\t'REQUEST_URI' => '/index.php?baz=1',\n\t\t\t'SCRIPT_NAME' => '/index.php',\n\t\t\t'SCRIPT_FILENAME' => APPROOT.'index.php',\n\t\t\t'QUERY_STRING' => 'baz=1',\n\t\t\t'HTTP_X_FORWARDED_HOST' => 'proxy.com',\n\t\t\t'HTTP_X_FORWARDED_PORT' => '4443',\n\t\t\t'HTTP_X_FORWARDED_PROTO' => 'https',\n\t\t\t'HTTPS' => null,\n\t\t];\n\n\t\t$this->assertEquals($sExpectedAppRootUrl1, utils::GetAbsoluteUrlAppRoot($bForceTrustProxy1));\n\n\t\t$this->assertEquals($sExpectedAppRootUrl2, utils::GetAbsoluteUrlAppRoot($bForceTrustProxy2));\n\n\t\t$this->assertEquals($sExpectedAppRootUrl3, utils::GetAbsoluteUrlAppRoot($bForceTrustProxy3));\n\t}\n\n\n\t/**\n\t * @dataProvider GetDefaultUrlAppRootProvider\n\t */\n\tpublic function testGetDefaultUrlAppRoot($bForceTrustProxy, $bConfTrustProxy, $aServerVars, $sExpectedAppRootUrl)\n\t{\n\t\t$_SERVER = $aServerVars;\n\t\tutils::GetConfig()->Set('behind_reverse_proxy', $bConfTrustProxy);\n\t\t$sAppRootUrl = utils::GetDefaultUrlAppRoot($bForceTrustProxy);\n\t\t$this->assertEquals($sExpectedAppRootUrl, $sAppRootUrl);\n\t}\n\n\tpublic function GetDefaultUrlAppRootProvider()\n\t{\n\t\t$this->setUp();\n\n\t\t$baseServerVar = [\n\t\t\t'REMOTE_ADDR' => '127.0.0.1', //is not set, disable IsProxyTrusted\n\t\t\t'SERVER_NAME' => 'example.com',\n\t\t\t'HTTP_X_FORWARDED_HOST' => null,\n\t\t\t'SERVER_PORT' => '80',\n\t\t\t'HTTP_X_FORWARDED_PORT' => null,\n\t\t\t'REQUEST_URI' => '/index.php?baz=1',\n\t\t\t'SCRIPT_NAME' => '/index.php',\n\t\t\t'SCRIPT_FILENAME' => APPROOT.'index.php',\n\t\t\t'QUERY_STRING' => 'baz=1',\n\t\t\t'HTTP_X_FORWARDED_PROTO' => null,\n\t\t\t'HTTP_X_FORWARDED_PROTOCOL' => null,\n\t\t\t'HTTPS' => null,\n\t\t];\n\n\t\treturn [\n\t\t\t'no proxy, http' => [\n\t\t\t\t'bForceTrustProxy' => false,\n\t\t\t\t'bConfTrustProxy' => false,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, []),\n\t\t\t\t'sExpectedAppRootUrl' => 'http://example.com/',\n\t\t\t],\n\t\t\t'no proxy, subPath, http' => [\n\t\t\t\t'bForceTrustProxy' => false,\n\t\t\t\t'bConfTrustProxy' => false,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'REQUEST_URI' => '/foo/index.php?baz=1',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'http://example.com/foo/',\n\t\t\t],\n\t\t\t'IIS lack REQUEST_URI' => [\n\t\t\t\t'bForceTrustProxy' => false,\n\t\t\t\t'bConfTrustProxy' => false,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'REQUEST_URI' => null,\n\t\t\t\t\t'SCRIPT_NAME' => '/foo/index.php',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'http://example.com/foo/',\n\t\t\t],\n\t\t\t'no proxy, https' => [\n\t\t\t\t'bForceTrustProxy' => false,\n\t\t\t\t'bConfTrustProxy' => false,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'SERVER_PORT' => '443',\n\t\t\t\t\t'HTTPS' => 'on',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'https://example.com/',\n\t\t\t],\n\t\t\t'no proxy, https on 4443' => [\n\t\t\t\t'bForceTrustProxy' => false,\n\t\t\t\t'bConfTrustProxy' => false,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'SERVER_PORT' => '4443',\n\t\t\t\t\t'HTTPS' => 'on',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'https://example.com:4443/',\n\t\t\t],\n\t\t\t'with proxy, not enabled' => [\n\t\t\t\t'bForceTrustProxy' => false,\n\t\t\t\t'bConfTrustProxy' => false,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'HTTP_X_FORWARDED_HOST' => 'proxy.com',\n\t\t\t\t\t'HTTP_X_FORWARDED_PORT' => '4443',\n\t\t\t\t\t'HTTP_X_FORWARDED_PROTO' => 'https',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'http://example.com/',\n\t\t\t],\n\t\t\t'with proxy, enabled HTTP_X_FORWARDED_PROTO' => [\n\t\t\t\t'bForceTrustProxy' => false,\n\t\t\t\t'bConfTrustProxy' => true,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'HTTP_X_FORWARDED_HOST' => 'proxy.com',\n\t\t\t\t\t'HTTP_X_FORWARDED_PORT' => '4443',\n\t\t\t\t\t'HTTP_X_FORWARDED_PROTO' => 'https',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'with proxy, enabled - alt HTTP_X_FORWARDED_PROTO COL' => [\n\t\t\t\t'bForceTrustProxy' => false,\n\t\t\t\t'bConfTrustProxy' => true,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'HTTP_X_FORWARDED_HOST' => 'proxy.com',\n\t\t\t\t\t'HTTP_X_FORWARDED_PORT' => '4443',\n\t\t\t\t\t'HTTP_X_FORWARDED_PROTOCOL' => 'https',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'with proxy, disabled, forced' => [\n\t\t\t\t'bForceTrustProxy' => true,\n\t\t\t\t'bConfTrustProxy' => false,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'HTTP_X_FORWARDED_HOST' => 'proxy.com',\n\t\t\t\t\t'HTTP_X_FORWARDED_PORT' => '4443',\n\t\t\t\t\t'HTTP_X_FORWARDED_PROTO' => 'https',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'with proxy, enabled, forced' => [\n\t\t\t\t'bForceTrustProxy' => true,\n\t\t\t\t'bConfTrustProxy' => true,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'HTTP_X_FORWARDED_HOST' => 'proxy.com',\n\t\t\t\t\t'HTTP_X_FORWARDED_PORT' => '4443',\n\t\t\t\t\t'HTTP_X_FORWARDED_PROTO' => 'https',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'https://proxy.com:4443/',\n\t\t\t],\n\n\t\t\t'with proxy, disabled, forced, no remote addr' => [\n\t\t\t\t'bForceTrustProxy' => true,\n\t\t\t\t'bConfTrustProxy' => false,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'REMOTE_ADDR' => null,\n\t\t\t\t\t'HTTP_X_FORWARDED_HOST' => 'proxy.com',\n\t\t\t\t\t'HTTP_X_FORWARDED_PORT' => '4443',\n\t\t\t\t\t'HTTP_X_FORWARDED_PROTO' => 'https',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'https://proxy.com:4443/',\n\t\t\t],\n\t\t\t'with proxy, enabled, no remote addr' => [\n\t\t\t\t'bForceTrustProxy' => false,\n\t\t\t\t'bConfTrustProxy' => true,\n\t\t\t\t'aServerVars' => array_merge($baseServerVar, [\n\t\t\t\t\t'REMOTE_ADDR' => null,\n\t\t\t\t\t'HTTP_X_FORWARDED_HOST' => 'proxy.com',\n\t\t\t\t\t'HTTP_X_FORWARDED_PORT' => '4443',\n\t\t\t\t\t'HTTP_X_FORWARDED_PROTO' => 'https',\n\t\t\t\t]),\n\t\t\t\t'sExpectedAppRootUrl' => 'http://example.com/',\n\t\t\t],\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider StrftimeFormatToDateTimeFormatProvider\n\t * @covers \\utils::StrftimeFormatToDateTimeFormat\n\t *\n\t * @param string $sInput\n\t * @param string $sExpectedFormat\n\t *\n\t * @return void\n\t */\n\tpublic function testStrftimeFormatToDateTimeFormat(string $sInput, string $sExpectedFormat)\n\t{\n\t\t$sTestedFormat = utils::StrftimeFormatToDateTimeFormat($sInput);\n\t\t$this->assertEquals($sExpectedFormat, $sTestedFormat, \"DateTime format transformation for '$sInput' doesn't match. Got '$sTestedFormat', expected '$sExpectedFormat'.\");\n\t}\n\n\tpublic function StrftimeFormatToDateTimeFormatProvider(): array\n\t{\n\t\treturn [\n\t\t\t'Standard date time' => [\n\t\t\t\t'%Y-%m-%d %H:%M:%S',\n\t\t\t\t'Y-m-d H:i:s',\n\t\t\t],\n\t\t\t'All placeholders' => [\n\t\t\t\t'%d | %m | %y | %Y | %H | %M | %S | %a | %A | %e | %j | %u | %w | %U | %V | %W | %b | %B | %h | %C | %g | %G | %k | %I | %l | %p | %P | %r | %R | %T | %X | %z | %Z | %c | %D | %F | %s | %x | %n | %t | %%',\n\t\t\t\t'd | m | y | Y | H | i | s | D | l | j | z | N | w | %U | W | %W | M | F | M | %C | y | Y | G | h | g | A | a | h:i:s A | H:i | H:i:s | %X | O | T | %c | m/d/y | Y-m-d | U | %x | %n | %t | %',\n\t\t\t],\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider ToCamelCaseProvider\n\t * @covers       utils::ToCamelCase\n\t *\n\t * @param string $sInput\n\t * @param string $sExpectedOutput\n\t *\n\t * @return void\n\t */\n\tpublic function testToCamelCase(string $sInput, string $sExpectedOutput)\n\t{\n\t\t$sTestedOutput = utils::ToCamelCase($sInput);\n\t\t$this->assertEquals($sExpectedOutput, $sTestedOutput, \"Camel case transformation for '$sInput' doesn't match. Got '$sTestedOutput', expected '$sExpectedOutput'.\");\n\t}\n\n\t/**\n\t * @since 3.1.0\n\t * @return \\string[][]\n\t */\n\tpublic function ToCamelCaseProvider(): array\n\t{\n\t\treturn [\n\t\t\t'One word' => [\n\t\t\t\t'hello',\n\t\t\t\t'Hello',\n\t\t\t],\n\t\t\t'Two words separated with space' => [\n\t\t\t\t'hello world',\n\t\t\t\t'HelloWorld',\n\t\t\t],\n\t\t\t'Two words separated with underscore' => [\n\t\t\t\t'hello_world',\n\t\t\t\t'HelloWorld',\n\t\t\t],\n\t\t\t'Two words separated with dash' => [\n\t\t\t\t'hello-world',\n\t\t\t\t'HelloWorld',\n\t\t\t],\n\t\t\t'Two words separated with dot' => [\n\t\t\t\t'hello.world',\n\t\t\t\t'Hello.world',\n\t\t\t],\n\t\t\t'Three words separated with underscore and space' => [\n\t\t\t\t'hello_there world',\n\t\t\t\t'HelloThereWorld',\n\t\t\t],\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider ToSnakeCaseProvider\n\t * @covers       utils::ToSnakeCase\n\t *\n\t * @param string $sInput\n\t * @param string $sExpectedOutput\n\t *\n\t * @return void\n\t */\n\tpublic function testToSnakeCase(string $sInput, string $sExpectedOutput)\n\t{\n\t\t$sTestedOutput = utils::ToSnakeCase($sInput);\n\t\t$this->assertEquals($sExpectedOutput, $sTestedOutput, \"Snake case transformation for '$sInput' doesn't match. Got '$sTestedOutput', expected '$sExpectedOutput'.\");\n\t}\n\n\t/**\n\t * @since 3.1.0\n\t * @return \\string[][]\n\t */\n\tpublic function ToSnakeCaseProvider(): array\n\t{\n\t\treturn [\n\t\t\t'One word lowercase' => [\n\t\t\t\t'hello',\n\t\t\t\t'hello',\n\t\t\t],\n\t\t\t'One word uppercase' => [\n\t\t\t\t'HELLO',\n\t\t\t\t'hello',\n\t\t\t],\n\t\t\t'One word capitalize' => [\n\t\t\t\t'Hello',\n\t\t\t\t'hello',\n\t\t\t],\n\t\t\t'Two words separated with space' => [\n\t\t\t\t'hello world',\n\t\t\t\t'hello_world',\n\t\t\t],\n\t\t\t'Two words separated with underscore' => [\n\t\t\t\t'hello_world',\n\t\t\t\t'hello_world',\n\t\t\t],\n\t\t\t'Two words separated with dash' => [\n\t\t\t\t'hello-world',\n\t\t\t\t'hello_world',\n\t\t\t],\n\t\t\t'Two words separated with dot' => [\n\t\t\t\t'hello.world',\n\t\t\t\t'hello_world',\n\t\t\t],\n\t\t\t'Two words camel cased' => [\n\t\t\t\t'HelloWorld',\n\t\t\t\t'hello_world',\n\t\t\t],\n\t\t\t'Two words camel cased with acronym' => [\n\t\t\t\t'HTMLWorld',\n\t\t\t\t'html_world',\n\t\t\t],\n\t\t\t'Three words separated with underscore and space' => [\n\t\t\t\t'hello_there world',\n\t\t\t\t'hello_there_world',\n\t\t\t],\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider ToAcronymProvider\n\t * @covers       utils::ToAcronym\n\t *\n\t * @param string $sInput\n\t * @param string $sExceptedAcronym\n\t */\n\tpublic function testToAcronym(string $sInput, string $sExceptedAcronym)\n\t{\n\t\t$sTestedAcronym = utils::ToAcronym($sInput);\n\t\t$this->assertEquals($sExceptedAcronym, $sTestedAcronym, \"Acronym for '$sInput' doesn't match. Got '$sTestedAcronym', expected '$sExceptedAcronym'.\");\n\t}\n\n\t/**\n\t * @since 3.0.0\n\t */\n\tpublic function ToAcronymProvider()\n\t{\n\t\treturn [\n\t\t\t'One word, upper case letter' => [\n\t\t\t\t'Carrie',\n\t\t\t\t'C',\n\t\t\t],\n\t\t\t'One word, lower case letter' => [\n\t\t\t\t'carrie',\n\t\t\t\t'C',\n\t\t\t],\n\t\t\t'Application name' => [\n\t\t\t\t'iTop',\n\t\t\t\t'I',\n\t\t\t],\n\t\t\t'Several words, upper case letters' => [\n\t\t\t\t'Carrie Ann Moss',\n\t\t\t\t'CAM',\n\t\t\t],\n\t\t\t'Several words, mixed case letters' => [\n\t\t\t\t'My name My name',\n\t\t\t\t'MM',\n\t\t\t],\n\t\t\t'Several words, upper case letters, two first hyphened' => [\n\t\t\t\t'Lily-Rose Depp',\n\t\t\t\t'LRD',\n\t\t\t],\n\t\t\t'Several words, mixed case letters, two first hyphened' => [\n\t\t\t\t'Lily-rose Depp',\n\t\t\t\t'LD',\n\t\t\t],\n\t\t\t'Several words, upper case letetrs, two last hypened' => [\n\t\t\t\t'Jada Pinkett-Smith',\n\t\t\t\t'JPS',\n\t\t\t],\n\t\t\t'Several words, mixed case letters, two last hyphened' => [\n\t\t\t\t'Jada Pinkett-smith',\n\t\t\t\t'JP',\n\t\t\t],\n\t\t\t'Several words, cyrillic alphabet' => [\n\t\t\t\t'\u0414\u0435\u043d\u0438\u0441 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u0430',\n\t\t\t\t'\u0414\u0410',\n\t\t\t],\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider GetMentionedObjectsFromTextProvider\n\t * @covers       utils::GetMentionedObjectsFromText\n\t *\n\t * @param string $sInput\n\t * @param string $sFormat\n\t * @param array $aExceptedMentionedObjects\n\t *\n\t * @throws \\Exception\n\t */\n\tpublic function testGetMentionedObjectsFromText(string $sInput, string $sFormat, array $aExceptedMentionedObjects)\n\t{\n\t\t$aTestedMentionedObjects = utils::GetMentionedObjectsFromText($sInput, $sFormat);\n\n\t\t$sExpectedAsString = print_r($aExceptedMentionedObjects, true);\n\t\t$sTestedAsString = print_r($aTestedMentionedObjects, true);\n\n\t\t$this->assertEquals($sTestedAsString, $sExpectedAsString, \"Found mentioned objects don't match. Got: $sTestedAsString, expected $sExpectedAsString\");\n\t}\n\n\t/**\n\t * @since 3.0.0\n\t */\n\tpublic function GetMentionedObjectsFromTextProvider(): array\n\t{\n\t\t$sAbsUrlAppRoot = utils::GetAbsoluteUrlAppRoot();\n\n\t\treturn [\n\t\t\t'No object' => [\n\t\t\t\t\"Begining\n\t\t\t\tSecond line\n\t\t\t\tEnd\",\n\t\t\t\tutils::ENUM_TEXT_FORMAT_HTML,\n\t\t\t\t[],\n\t\t\t],\n\t\t\t'1 UserRequest' => [\n\t\t\t\t\"Begining\n\t\t\t\tBefore link <a href=\\\"$sAbsUrlAppRoot/pages/UI.php&operation=details&class=UserRequest&id=12345&foo=bar\\\">R-012345</a> After link\n\t\t\t\tEnd\",\n\t\t\t\tutils::ENUM_TEXT_FORMAT_HTML,\n\t\t\t\t[\n\t\t\t\t\t'UserRequest' => ['12345'],\n\t\t\t\t],\n\t\t\t],\n\t\t\t'2 UserRequests' => [\n\t\t\t\t\"Begining\n\t\t\t\tBefore link <a href=\\\"$sAbsUrlAppRoot/pages/UI.php&operation=details&class=UserRequest&id=12345&foo=bar\\\">R-012345</a> After link\n\t\t\t\tAnd <a href=\\\"$sAbsUrlAppRoot/pages/UI.php&operation=details&class=UserRequest&id=987654&foo=bar\\\">R-987654</a>\n\t\t\t\tEnd\",\n\t\t\t\tutils::ENUM_TEXT_FORMAT_HTML,\n\t\t\t\t[\n\t\t\t\t\t'UserRequest' => ['12345', '987654'],\n\t\t\t\t],\n\t\t\t],\n\t\t\t'1 UserRequest, 1 Person' => [\n\t\t\t\t\"Begining\n\t\t\t\tBefore link <a href=\\\"$sAbsUrlAppRoot/pages/UI.php&operation=details&class=UserRequest&id=12345&foo=bar\\\">R-012345</a> After link\n\t\t\t\tAnd <a href=\\\"$sAbsUrlAppRoot/pages/UI.php&operation=details&class=Person&id=3&foo=bar\\\">Claude Monet</a>\n\t\t\t\tEnd\",\n\t\t\t\tutils::ENUM_TEXT_FORMAT_HTML,\n\t\t\t\t[\n\t\t\t\t\t'UserRequest' => ['12345'],\n\t\t\t\t\t'Person' => ['3'],\n\t\t\t\t],\n\t\t\t],\n\t\t];\n\t}\n\n\t/**\n\t * @dataProvider FormatInitialsForMedallionProvider\n\t * @covers utils::FormatInitialsForMedallion\n\t *\n\t * @param string $sInput\n\t * @param string $sExpected\n\t */\n\tpublic function testFormatInitialsForMedallion(string $sInput, string $sExpected)\n\t{\n\t\t$sTested = utils::FormatInitialsForMedallion($sInput);\n\t\t$this->assertEquals($sExpected, $sTested);\n\t}\n\n\t/**\n\t * @since 3.0.1\n\t */\n\tpublic function FormatInitialsForMedallionProvider()\n\t{\n\t\treturn [\n\t\t\t'All letters kept (2)' => [\n\t\t\t\t'AB',\n\t\t\t\t'AB',\n\t\t\t],\n\t\t\t'All letters kept (3)' => [\n\t\t\t\t'ABC',\n\t\t\t\t'ABC',\n\t\t\t],\n\t\t\t'Only 3 first letters kept (4)' => [\n\t\t\t\t'ABCD',\n\t\t\t\t'ABC',\n\t\t\t],\n\t\t];\n\t}\n\n\t/**\n\t * @param string $sExpressionToConvert\n\t * @param int $iExpectedConvertedValue\n\t *\n\t * @dataProvider ConvertToBytesProvider\n\t */\n\tpublic function testConvertToBytes($sExpressionToConvert, $iExpectedConvertedValue)\n\t{\n\t\t$iCurrentConvertedValue = utils::ConvertToBytes($sExpressionToConvert);\n\t\tself::assertEquals($iExpectedConvertedValue, $iCurrentConvertedValue, 'Converted value wasn\\'t the one expected !');\n\t\tself::assertSame($iExpectedConvertedValue, $iCurrentConvertedValue, 'Value was converted but not of the expected type');\n\t}\n\n\tpublic function ConvertToBytesProvider()\n\t{\n\t\treturn [\n\t\t\t'123 int value' => ['123', 123],\n\t\t\t'-1 no limit'   => ['-1', -1],\n\t\t\t'56k'           => ['56k', 56 * 1024],\n\t\t\t'512M'          => ['512M', 512 * 1024 * 1024],\n\t\t\t'2G'            => ['2G', 2 * 1024 * 1024 * 1024],\n\t\t];\n\t}\n\n\t/**\n\t * @param string|null $sString\n\t * @param int $iExpected\n\t *\n\t * @dataProvider StrLenProvider\n\t */\n\tpublic function testStrLen(?string $sString, int $iExpected)\n\t{\n\t\t$iComputed = utils::StrLen($sString);\n\t\tself::assertEquals($iExpected, $iComputed, 'Length was not as expected');\n\t}\n\n\tpublic function StrLenProvider(): array\n\t{\n\t\treturn [\n\t\t\t'null value' => [null, 0],\n\t\t\t'0 character' => ['', 0],\n\t\t\t'1 character' => ['a', 1],\n\t\t\t'5 characters' => ['abcde', 5],\n\t\t];\n\t}\n\n\t/**\n\t * Test sanitizer.\n\t *\n\t * @param $type string type of sanitizer\n\t * @param $valueToSanitize ? value to sanitize\n\t * @param $expectedResult ? expected result\n\t *\n\t * @return void\n\t *\n\t * @dataProvider sanitizerDataProvider\n\t */\n\tpublic function testSanitizer($type, $valueToSanitize, $expectedResult)\n\t{\n\t\t$this->assertEquals($expectedResult, utils::Sanitize($valueToSanitize, null, $type), 'url sanitize failed');\n\t}\n\n\t/**\n\t * DataProvider for testSanitizer\n\t *\n\t * @return array\n\t */\n\tpublic function sanitizerDataProvider()\n\t{\n\t\treturn [\n\t\t\t'good integer'            => [utils::ENUM_SANITIZATION_FILTER_INTEGER, '2565', '2565'],\n\t\t\t'bad integer'             => [utils::ENUM_SANITIZATION_FILTER_INTEGER, 'a2656', '2656'],\n\t\t\t/**\n\t\t\t * 'class' filter needs a loaded datamodel... and is only an indirection to \\MetaModel::IsValidClass so might very important to test !\n\t\t\t * If we switch this class to ItopDataTestCase then we are seeing :\n\t\t\t *   - the class now takes 18s to process instead of... 459ms when using ItopTestCase !!!\n\t\t\t *   - multiple errors are thrown in testGetAbsoluteUrlAppRootPersistency :(\n\t\t\t * We decided it wasn't worse the effort to test the 'class' filter !\n\t\t\t */\n\t\t\t//\t\t\t'good class' => ['class', 'UserRequest', 'UserRequest'],\n\t\t\t//\t\t\t'bad class' => ['class', 'MyUserRequest',null],\n\t\t\t'good string'             => [utils::ENUM_SANITIZATION_FILTER_STRING, 'Is Peter smart and funny?', 'Is Peter smart and funny?'],\n\t\t\t'bad string'              => [utils::ENUM_SANITIZATION_FILTER_STRING, 'Is Peter <smart> & funny?', 'Is Peter &#60;smart&#62; &#38; funny?'],\n\t\t\t'good transaction_id'     => [utils::ENUM_SANITIZATION_FILTER_TRANSACTION_ID, '8965.-dd', '8965.-dd'],\n\t\t\t'bad transaction_id'      => [utils::ENUM_SANITIZATION_FILTER_TRANSACTION_ID, '8965.-dd+', null],\n\t\t\t'good route'              => [utils::ENUM_SANITIZATION_FILTER_ROUTE, 'object.modify', 'object.modify'],\n\t\t\t'good route with underscore' => [utils::ENUM_SANITIZATION_FILTER_ROUTE, 'object.apply_modify', 'object.apply_modify'],\n\t\t\t'bad route with space'    => [utils::ENUM_SANITIZATION_FILTER_ROUTE, 'object modify', null],\n\t\t\t'good operation'          => [utils::ENUM_SANITIZATION_FILTER_OPERATION, 'modify', 'modify'],\n\t\t\t'good operation with underscore' => [utils::ENUM_SANITIZATION_FILTER_OPERATION, 'apply_modify', 'apply_modify'],\n\t\t\t'bad operation with space' => [utils::ENUM_SANITIZATION_FILTER_OPERATION, 'apply modify', null],\n\t\t\t'good parameter'          => [utils::ENUM_SANITIZATION_FILTER_PARAMETER, 'JU8965-dd=_', 'JU8965-dd=_'],\n\t\t\t'bad parameter'           => [utils::ENUM_SANITIZATION_FILTER_PARAMETER, '8965.-dd+', null],\n\t\t\t'good field_name'         => [utils::ENUM_SANITIZATION_FILTER_FIELD_NAME, 'Name->bUzz38', 'Name->bUzz38'],\n\t\t\t'bad field_name'          => [utils::ENUM_SANITIZATION_FILTER_FIELD_NAME, 'name-buzz', null],\n\t\t\t'good context_param'      => [utils::ENUM_SANITIZATION_FILTER_CONTEXT_PARAM, '%dssD25_=%:+-', '%dssD25_=%:+-'],\n\t\t\t'bad context_param'       => [utils::ENUM_SANITIZATION_FILTER_CONTEXT_PARAM, '%dssD,25_=%:+-', null],\n\t\t\t'good element_identifier' => [utils::ENUM_SANITIZATION_FILTER_ELEMENT_IDENTIFIER, 'AD05nb', 'AD05nb'],\n\t\t\t'bad element_identifier' => [utils::ENUM_SANITIZATION_FILTER_ELEMENT_IDENTIFIER, 'AD05nb+', 'AD05nb'],\n\t\t\t'good url' => [utils::ENUM_SANITIZATION_FILTER_URL, 'https://www.w3schools.com', 'https://www.w3schools.com'],\n\t\t\t'bad url' => [utils::ENUM_SANITIZATION_FILTER_URL, 'https://www.w3schoo\ufffd\ufffdls.co\ufffdm', null],\n\t\t\t'url with injection' => [utils::ENUM_SANITIZATION_FILTER_URL, 'https://demo.combodo.com/simple/pages/UI.php?operation=full_text&text=<img zzz src=x onerror=alert(1) //>', null],\n\t\t\t'raw_data' => ['raw_data', '<Test>\\s\ud83d\ude03\ud83d\ude03\ud83d\ude03', '<Test>\\s\ud83d\ude03\ud83d\ude03\ud83d\ude03'],\n\t\t];\n\t}\n\n\t/**\n\t * @return void\n\t *\n\t * @dataProvider escapeHtmlProvider\n\t */\n\tpublic function testEscapeHtml($sInput, $sExpectedEscaped)\n\t{\n\t\tif (is_null($sExpectedEscaped)) {\n\t\t\t$sExpectedEscaped = $sInput;\n\t\t}\n\n\t\t$sEscaped = utils::EscapeHtml($sInput);\n\t\tself::assertSame($sExpectedEscaped, $sEscaped);\n\n\t\t$sEscapedDecoded = utils::EscapedHtmlDecode($sEscaped);\n\t\tself::assertSame($sInput, $sEscapedDecoded);\n\t}\n\n\tpublic function escapeHtmlProvider()\n\t{\n\t\treturn [\n\t\t\t'no escape' => ['abcdefghijklmnop', null],\n\t\t\t'&amp;'     => ['abcdefghijklmnop&0123456789', 'abcdefghijklmnop&amp;0123456789'],\n\t\t\t['\"double quotes\"', '&quot;double quotes&quot;'],\n\t\t\t[\"'simple quotes'\", '&apos;simple quotes&apos;'],\n\t\t];\n\t}\n}\n"], "filenames": ["tests/php-unit-tests/unitary-tests/application/utilsTest.php"], "buggy_code_start_loc": [833], "buggy_code_end_loc": [833], "fixing_code_start_loc": [834], "fixing_code_end_loc": [835], "type": "CWE-79", "message": "iTop is an open source, web-based IT service management platform. Prior to versions 3.0.4 and 3.1.0, on `pages/UI.php`, cross site scripting is possible. This issue is fixed in versions 3.0.4 and 3.1.0.", "other": {"cve": {"id": "CVE-2023-34447", "sourceIdentifier": "security-advisories@github.com", "published": "2023-10-25T18:17:28.147", "lastModified": "2023-10-31T15:21:59.647", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "iTop is an open source, web-based IT service management platform. Prior to versions 3.0.4 and 3.1.0, on `pages/UI.php`, cross site scripting is possible. This issue is fixed in versions 3.0.4 and 3.1.0."}, {"lang": "es", "value": "iTop es una plataforma de gesti\u00f3n de servicios de TI basada en web y de c\u00f3digo abierto. Antes de las versiones 3.0.4 y 3.1.0, en `pages/UI.php`, era posible realizar Cross-Site Scripting (XSS). Este problema se solucion\u00f3 en las versiones 3.0.4 y 3.1.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:combodo:itop:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.0.4", "matchCriteriaId": "9189E922-30ED-4E69-9B1F-6AD643A37BF7"}]}]}], "references": [{"url": "https://github.com/Combodo/iTop/commit/519751faa10b2fc5b75ea4516a1b8ef13ca35b33", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/Combodo/iTop/commit/b8f61362f570e1ef8127175331012b7fc8aba802", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/Combodo/iTop/security/advisories/GHSA-6rfm-2rwg-mj7p", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/Combodo/iTop/commit/519751faa10b2fc5b75ea4516a1b8ef13ca35b33"}}