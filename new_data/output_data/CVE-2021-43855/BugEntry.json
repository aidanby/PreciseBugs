{"buggy_code": ["/* global WIKI */\n\nconst Model = require('objection').Model\nconst moment = require('moment')\nconst path = require('path')\nconst fs = require('fs-extra')\nconst _ = require('lodash')\nconst assetHelper = require('../helpers/asset')\nconst Promise = require('bluebird')\n\n/**\n * Users model\n */\nmodule.exports = class Asset extends Model {\n  static get tableName() { return 'assets' }\n\n  static get jsonSchema () {\n    return {\n      type: 'object',\n\n      properties: {\n        id: {type: 'integer'},\n        filename: {type: 'string'},\n        hash: {type: 'string'},\n        ext: {type: 'string'},\n        kind: {type: 'string'},\n        mime: {type: 'string'},\n        fileSize: {type: 'integer'},\n        metadata: {type: 'object'},\n        createdAt: {type: 'string'},\n        updatedAt: {type: 'string'}\n      }\n    }\n  }\n\n  static get relationMappings() {\n    return {\n      author: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: require('./users'),\n        join: {\n          from: 'assets.authorId',\n          to: 'users.id'\n        }\n      },\n      folder: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: require('./assetFolders'),\n        join: {\n          from: 'assets.folderId',\n          to: 'assetFolders.id'\n        }\n      }\n    }\n  }\n\n  async $beforeUpdate(opt, context) {\n    await super.$beforeUpdate(opt, context)\n\n    this.updatedAt = moment.utc().toISOString()\n  }\n  async $beforeInsert(context) {\n    await super.$beforeInsert(context)\n\n    this.createdAt = moment.utc().toISOString()\n    this.updatedAt = moment.utc().toISOString()\n  }\n\n  async getAssetPath() {\n    let hierarchy = []\n    if (this.folderId) {\n      hierarchy = await WIKI.models.assetFolders.getHierarchy(this.folderId)\n    }\n    return (this.folderId) ? hierarchy.map(h => h.slug).join('/') + `/${this.filename}` : this.filename\n  }\n\n  async deleteAssetCache() {\n    await fs.remove(path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `cache/${this.hash}.dat`))\n  }\n\n  static async upload(opts) {\n    const fileInfo = path.parse(opts.originalname)\n    const fileHash = assetHelper.generateHash(opts.assetPath)\n\n    // Check for existing asset\n    let asset = await WIKI.models.assets.query().where({\n      hash: fileHash,\n      folderId: opts.folderId\n    }).first()\n\n    // Build Object\n    let assetRow = {\n      filename: opts.originalname,\n      hash: fileHash,\n      ext: fileInfo.ext,\n      kind: _.startsWith(opts.mimetype, 'image/') ? 'image' : 'binary',\n      mime: opts.mimetype,\n      fileSize: opts.size,\n      folderId: opts.folderId\n    }\n\n    // Sanitize SVG contents\n    if (WIKI.config.uploads.scanSVG && opts.mimetype === 'image/svg+xml') {\n      const svgSanitizeJob = await WIKI.scheduler.registerJob({\n        name: 'sanitize-svg',\n        immediate: true,\n        worker: true\n      }, opts.path)\n      await svgSanitizeJob.finished\n    }\n\n    // Save asset data\n    try {\n      const fileBuffer = await fs.readFile(opts.path)\n\n      if (asset) {\n        // Patch existing asset\n        if (opts.mode === 'upload') {\n          assetRow.authorId = opts.user.id\n        }\n        await WIKI.models.assets.query().patch(assetRow).findById(asset.id)\n        await WIKI.models.knex('assetData').where({\n          id: asset.id\n        }).update({\n          data: fileBuffer\n        })\n      } else {\n        // Create asset entry\n        assetRow.authorId = opts.user.id\n        asset = await WIKI.models.assets.query().insert(assetRow)\n        await WIKI.models.knex('assetData').insert({\n          id: asset.id,\n          data: fileBuffer\n        })\n      }\n\n      // Move temp upload to cache\n      if (opts.mode === 'upload') {\n        await fs.move(opts.path, path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `cache/${fileHash}.dat`), { overwrite: true })\n      } else {\n        await fs.copy(opts.path, path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `cache/${fileHash}.dat`), { overwrite: true })\n      }\n\n      // Add to Storage\n      if (!opts.skipStorage) {\n        await WIKI.models.storage.assetEvent({\n          event: 'uploaded',\n          asset: {\n            ...asset,\n            path: await asset.getAssetPath(),\n            data: fileBuffer,\n            authorId: opts.user.id,\n            authorName: opts.user.name,\n            authorEmail: opts.user.email\n          }\n        })\n      }\n    } catch (err) {\n      WIKI.logger.warn(err)\n    }\n  }\n\n  static async getAsset(assetPath, res) {\n    try {\n      const fileHash = assetHelper.generateHash(assetPath)\n      const cachePath = path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `cache/${fileHash}.dat`)\n      if (await WIKI.models.assets.getAssetFromCache(assetPath, cachePath, res)) {\n        return\n      }\n      if (await WIKI.models.assets.getAssetFromStorage(assetPath, res)) {\n        return\n      }\n      await WIKI.models.assets.getAssetFromDb(assetPath, fileHash, cachePath, res)\n    } catch (err) {\n      if (err.code === `ECONNABORTED` || err.code === `EPIPE`) {\n        return\n      }\n      WIKI.logger.error(err)\n      res.sendStatus(500)\n    }\n  }\n\n  static async getAssetFromCache(assetPath, cachePath, res) {\n    try {\n      await fs.access(cachePath, fs.constants.R_OK)\n    } catch (err) {\n      return false\n    }\n    const sendFile = Promise.promisify(res.sendFile, {context: res})\n    res.type(path.extname(assetPath))\n    await sendFile(cachePath, { dotfiles: 'deny' })\n    return true\n  }\n\n  static async getAssetFromStorage(assetPath, res) {\n    const localLocations = await WIKI.models.storage.getLocalLocations({\n      asset: {\n        path: assetPath\n      }\n    })\n    for (let location of _.filter(localLocations, location => Boolean(location.path))) {\n      const assetExists = await WIKI.models.assets.getAssetFromCache(assetPath, location.path, res)\n      if (assetExists) {\n        return true\n      }\n    }\n    return false\n  }\n\n  static async getAssetFromDb(assetPath, fileHash, cachePath, res) {\n    const asset = await WIKI.models.assets.query().where('hash', fileHash).first()\n    if (asset) {\n      const assetData = await WIKI.models.knex('assetData').where('id', asset.id).first()\n      res.type(asset.ext)\n      res.send(assetData.data)\n      await fs.outputFile(cachePath, assetData.data)\n    } else {\n      res.sendStatus(404)\n    }\n  }\n\n  static async flushTempUploads() {\n    return fs.emptyDir(path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `uploads`))\n  }\n}\n"], "fixing_code": ["/* global WIKI */\n\nconst Model = require('objection').Model\nconst moment = require('moment')\nconst path = require('path')\nconst fs = require('fs-extra')\nconst _ = require('lodash')\nconst assetHelper = require('../helpers/asset')\nconst Promise = require('bluebird')\n\n/**\n * Users model\n */\nmodule.exports = class Asset extends Model {\n  static get tableName() { return 'assets' }\n\n  static get jsonSchema () {\n    return {\n      type: 'object',\n\n      properties: {\n        id: {type: 'integer'},\n        filename: {type: 'string'},\n        hash: {type: 'string'},\n        ext: {type: 'string'},\n        kind: {type: 'string'},\n        mime: {type: 'string'},\n        fileSize: {type: 'integer'},\n        metadata: {type: 'object'},\n        createdAt: {type: 'string'},\n        updatedAt: {type: 'string'}\n      }\n    }\n  }\n\n  static get relationMappings() {\n    return {\n      author: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: require('./users'),\n        join: {\n          from: 'assets.authorId',\n          to: 'users.id'\n        }\n      },\n      folder: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: require('./assetFolders'),\n        join: {\n          from: 'assets.folderId',\n          to: 'assetFolders.id'\n        }\n      }\n    }\n  }\n\n  async $beforeUpdate(opt, context) {\n    await super.$beforeUpdate(opt, context)\n\n    this.updatedAt = moment.utc().toISOString()\n  }\n  async $beforeInsert(context) {\n    await super.$beforeInsert(context)\n\n    this.createdAt = moment.utc().toISOString()\n    this.updatedAt = moment.utc().toISOString()\n  }\n\n  async getAssetPath() {\n    let hierarchy = []\n    if (this.folderId) {\n      hierarchy = await WIKI.models.assetFolders.getHierarchy(this.folderId)\n    }\n    return (this.folderId) ? hierarchy.map(h => h.slug).join('/') + `/${this.filename}` : this.filename\n  }\n\n  async deleteAssetCache() {\n    await fs.remove(path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `cache/${this.hash}.dat`))\n  }\n\n  static async upload(opts) {\n    const fileInfo = path.parse(opts.originalname)\n    const fileHash = assetHelper.generateHash(opts.assetPath)\n\n    // Check for existing asset\n    let asset = await WIKI.models.assets.query().where({\n      hash: fileHash,\n      folderId: opts.folderId\n    }).first()\n\n    // Build Object\n    let assetRow = {\n      filename: opts.originalname,\n      hash: fileHash,\n      ext: fileInfo.ext,\n      kind: _.startsWith(opts.mimetype, 'image/') ? 'image' : 'binary',\n      mime: opts.mimetype,\n      fileSize: opts.size,\n      folderId: opts.folderId\n    }\n\n    // Sanitize SVG contents\n    if (\n      WIKI.config.uploads.scanSVG &&\n      (\n        opts.mimetype.toLowerCase().startsWith('image/svg') ||\n        opts.ext.toLowerCase() === 'svg'\n      )\n    ) {\n      const svgSanitizeJob = await WIKI.scheduler.registerJob({\n        name: 'sanitize-svg',\n        immediate: true,\n        worker: true\n      }, opts.path)\n      await svgSanitizeJob.finished\n    }\n\n    // Save asset data\n    try {\n      const fileBuffer = await fs.readFile(opts.path)\n\n      if (asset) {\n        // Patch existing asset\n        if (opts.mode === 'upload') {\n          assetRow.authorId = opts.user.id\n        }\n        await WIKI.models.assets.query().patch(assetRow).findById(asset.id)\n        await WIKI.models.knex('assetData').where({\n          id: asset.id\n        }).update({\n          data: fileBuffer\n        })\n      } else {\n        // Create asset entry\n        assetRow.authorId = opts.user.id\n        asset = await WIKI.models.assets.query().insert(assetRow)\n        await WIKI.models.knex('assetData').insert({\n          id: asset.id,\n          data: fileBuffer\n        })\n      }\n\n      // Move temp upload to cache\n      if (opts.mode === 'upload') {\n        await fs.move(opts.path, path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `cache/${fileHash}.dat`), { overwrite: true })\n      } else {\n        await fs.copy(opts.path, path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `cache/${fileHash}.dat`), { overwrite: true })\n      }\n\n      // Add to Storage\n      if (!opts.skipStorage) {\n        await WIKI.models.storage.assetEvent({\n          event: 'uploaded',\n          asset: {\n            ...asset,\n            path: await asset.getAssetPath(),\n            data: fileBuffer,\n            authorId: opts.user.id,\n            authorName: opts.user.name,\n            authorEmail: opts.user.email\n          }\n        })\n      }\n    } catch (err) {\n      WIKI.logger.warn(err)\n    }\n  }\n\n  static async getAsset(assetPath, res) {\n    try {\n      const fileHash = assetHelper.generateHash(assetPath)\n      const cachePath = path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `cache/${fileHash}.dat`)\n      if (await WIKI.models.assets.getAssetFromCache(assetPath, cachePath, res)) {\n        return\n      }\n      if (await WIKI.models.assets.getAssetFromStorage(assetPath, res)) {\n        return\n      }\n      await WIKI.models.assets.getAssetFromDb(assetPath, fileHash, cachePath, res)\n    } catch (err) {\n      if (err.code === `ECONNABORTED` || err.code === `EPIPE`) {\n        return\n      }\n      WIKI.logger.error(err)\n      res.sendStatus(500)\n    }\n  }\n\n  static async getAssetFromCache(assetPath, cachePath, res) {\n    try {\n      await fs.access(cachePath, fs.constants.R_OK)\n    } catch (err) {\n      return false\n    }\n    const sendFile = Promise.promisify(res.sendFile, {context: res})\n    res.type(path.extname(assetPath))\n    await sendFile(cachePath, { dotfiles: 'deny' })\n    return true\n  }\n\n  static async getAssetFromStorage(assetPath, res) {\n    const localLocations = await WIKI.models.storage.getLocalLocations({\n      asset: {\n        path: assetPath\n      }\n    })\n    for (let location of _.filter(localLocations, location => Boolean(location.path))) {\n      const assetExists = await WIKI.models.assets.getAssetFromCache(assetPath, location.path, res)\n      if (assetExists) {\n        return true\n      }\n    }\n    return false\n  }\n\n  static async getAssetFromDb(assetPath, fileHash, cachePath, res) {\n    const asset = await WIKI.models.assets.query().where('hash', fileHash).first()\n    if (asset) {\n      const assetData = await WIKI.models.knex('assetData').where('id', asset.id).first()\n      res.type(asset.ext)\n      res.send(assetData.data)\n      await fs.outputFile(cachePath, assetData.data)\n    } else {\n      res.sendStatus(404)\n    }\n  }\n\n  static async flushTempUploads() {\n    return fs.emptyDir(path.resolve(WIKI.ROOTPATH, WIKI.config.dataPath, `uploads`))\n  }\n}\n"], "filenames": ["server/models/assets.js"], "buggy_code_start_loc": [103], "buggy_code_end_loc": [104], "fixing_code_start_loc": [103], "fixing_code_end_loc": [110], "type": "CWE-79", "message": "Wiki.js is a wiki app built on node.js. Wiki.js 2.5.263 and earlier is vulnerable to stored cross-site scripting through a SVG file upload made via a custom request with a fake MIME type. By creating a crafted SVG file, a malicious Wiki.js user may stage a stored cross-site scripting attack. This allows the attacker to execute malicious JavaScript when the SVG is viewed directly by other users. Scripts do not execute when loaded inside a page via normal `<img>` tags. The malicious SVG can only be uploaded by crafting a custom request to the server with a fake MIME type. A patch in version 2.5.264 fixes this vulnerability by adding an additional file extension verification check to the optional (enabled by default) SVG sanitization step to all file uploads that match the SVG mime type. As a workaround, disable file upload for all non-trusted users.", "other": {"cve": {"id": "CVE-2021-43855", "sourceIdentifier": "security-advisories@github.com", "published": "2021-12-27T18:15:07.520", "lastModified": "2022-01-07T14:01:44.003", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Wiki.js is a wiki app built on node.js. Wiki.js 2.5.263 and earlier is vulnerable to stored cross-site scripting through a SVG file upload made via a custom request with a fake MIME type. By creating a crafted SVG file, a malicious Wiki.js user may stage a stored cross-site scripting attack. This allows the attacker to execute malicious JavaScript when the SVG is viewed directly by other users. Scripts do not execute when loaded inside a page via normal `<img>` tags. The malicious SVG can only be uploaded by crafting a custom request to the server with a fake MIME type. A patch in version 2.5.264 fixes this vulnerability by adding an additional file extension verification check to the optional (enabled by default) SVG sanitization step to all file uploads that match the SVG mime type. As a workaround, disable file upload for all non-trusted users."}, {"lang": "es", "value": "Wiki.js es una aplicaci\u00f3n wiki construida sobre node.js. Wiki.js versiones 2.5.263 y anteriores, es vulnerable a un ataque de tipo cross-site scripting almacenado por medio de una carga de archivos SVG realizada por medio de una petici\u00f3n personalizada con un tipo MIME falso. Al crear un archivo SVG dise\u00f1ado, un usuario malicioso de Wiki.js puede llevar a cabo un ataque de tipo Cross-site scripting almacenado. Esto permite al atacante ejecutar JavaScript malicioso cuando el SVG es visto directamente por otros usuarios. Los scripts no se ejecutan cuando se cargan dentro de una p\u00e1gina por medio de etiquetas \"(img)\" normales. El SVG malicioso s\u00f3lo puede subirse al dise\u00f1ar una petici\u00f3n personalizada al servidor con un tipo MIME falso. Un parche en la versi\u00f3n 2.5.264 corrige esta vulnerabilidad al a\u00f1adir una comprobaci\u00f3n adicional de la extensi\u00f3n del archivo al paso opcional (habilitado por defecto) de saneo de SVG a todas las subidas de archivos que coincidan con el tipo mime de SVG. Como soluci\u00f3n, deshabilite la carga de archivos para todos los usuarios que no sean confiables"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 8.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:requarks:wiki.js:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.5.264", "matchCriteriaId": "1F3F2ADB-A69D-403D-9A61-51A8644F42E0"}]}]}], "references": [{"url": "https://github.com/Requarks/wiki/commit/57b56d3a5b9c00358814e76f3ee5b4bb353ad62f", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Requarks/wiki/releases/tag/2.5.264", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/Requarks/wiki/security/advisories/GHSA-4893-pj5w-3hq9", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Requarks/wiki/commit/57b56d3a5b9c00358814e76f3ee5b4bb353ad62f"}}